<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Mon, 01 Sep 2025 22:37:09 +0000</lastBuildDate><item><title>Effective learning: Rules of formulating knowledge (1999)</title><link>https://www.supermemo.com/en/blog/twenty-rules-of-formulating-knowledge</link><description>&lt;doc fingerprint="3ed6d2664c2f1e8c"&gt;
  &lt;main&gt;
    &lt;p&gt;Dr Piotr Wozniak, February, 1999 (updated)&lt;/p&gt;
    &lt;p&gt;This article will help you overcome one of the greatest difficulties you will face when trying to accelerate learning: formulating knowledge&lt;/p&gt;
    &lt;p&gt;The speed of learning will depend on the way you formulate the material. The same material can be learned many times faster if well formulated! The difference in speed can be stunning!&lt;/p&gt;
    &lt;p&gt;The rules are listed in the order of importance. Those listed first are most often violated or bring most benefit if complied with!&lt;/p&gt;
    &lt;p&gt;There is an underlying assumption that you will proceed with learning using spaced repetition, i.e. you will not just learn once but you will repeat the material optimally (as in SuperMemo).&lt;/p&gt;
    &lt;p&gt;The 20 rules of formulating knowledge in learning&lt;/p&gt;
    &lt;p&gt;1) Do not learn if you do not understand&lt;/p&gt;
    &lt;p&gt;Trying to learn things you do not understand may seem like an utmost nonsense. Still, an amazing proportion of students commit the offence of learning without comprehension. Very often they have no other choice! The quality of many textbooks or lecture scripts is deplorable while examination deadlines are unmovable.If you are not a speaker of German, it is still possible to learn a history textbook in German. The book can be crammed word for word. However, the time needed for such “blind learning” is astronomical. Even more important: The value of such knowledge is negligible. If you cram a German book on history, you will still know nothing of history.The German history book example is an extreme. However, the materials you learn may often seem well structured and you may tend to blame yourself for lack of comprehension. Soon you may pollute your learning process with a great deal of useless material that treacherously makes you believe “it will be useful some day”. &lt;/p&gt;
    &lt;p&gt;2) Learn before you memorize&lt;/p&gt;
    &lt;p&gt;Before you proceed with memorizing individual facts and rules, you need to build an overall picture of the learned knowledge. Only when individual pieces fit to build a single coherent structure, will you be able to dramatically reduce the learning time. This is closely related to the problem comprehension mentioned in Rule 1: Do not learn if you do not understand. A single separated piece of your picture is like a single German word in the textbook of history.Do not start from memorizing loosely related facts! First read a chapter in your book that puts them together (e.g. the principles of the internal combustion engine). Only then proceed with learning using individual questions and answers (e.g. What moves the pistons in the internal combustion engine?), etc.&lt;/p&gt;
    &lt;p&gt;3) Build upon the basics&lt;/p&gt;
    &lt;p&gt;The picture of the learned whole (as discussed in Rule 2: Learn before you memorize) does not have to be complete to the last detail. Just the opposite, the simpler the picture the better. The shorter the initial chapter of your book the better. Simple models are easier to comprehend and encompass. You can always build upon them later on.Do not neglect the basics. Memorizing seemingly obvious things is not a waste of time! Basics may also appear volatile and the cost of memorizing easy things is little. Better err on the safe side. Remember that usually you spend 50% of your time repeating just 3-5% of the learned material! Basics are usually easy to retain and take a microscopic proportion of your time. However, each memory lapse on basics can cost you dearly!&lt;/p&gt;
    &lt;p&gt;4) Stick to the minimum information principle&lt;/p&gt;
    &lt;p&gt;The material you learn must be formulated in as simple way as it is&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Simple is easy&lt;lb/&gt;By definition, simple material is easy to remember. This comes from the fact that its simplicity makes is easy for the brain to process it always in the same way. Imagine a labyrinth. When making a repetition of a piece of material, your brain is running through a labyrinth (you can view a neural network as a tangle of paths). While running through the labyrinth, the brain leaves a track on the walls. If it can run in only one unique way, the path is continuous and easy to follow. If there are many combinations, each run may leave a different trace that will interfere with other traces making it difficult to find the exit. The same happens on the cellular level with different synaptic connections being activated at each repetition of complex material&lt;/item&gt;
      &lt;item&gt;Repetitions of simple items are easier to schedule&lt;lb/&gt;I assume you will make repetitions of the learned material using optimum inter-repetition intervals (as in SuperMemo). If you consider an item that is composed of two sub-items, you will need to make repetitions that are frequent enough to keep the more difficult item in memory. If you split the complex item into sub-items, each can be repeated at its own pace saving your time. Very often, inexperienced students create items that could easily be split into ten or more simpler sub-items! Although the number of items increases, the number of repetitions of each item will usually be small enough to greatly outweigh the cost of (1) forgetting the complex item again and again, (2) repeating it in excessively short intervals or (3) actually remembering it only in part!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Here is a striking example:&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Ill-formulated knowledge – Complex and wordy&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: What are the characteristics of the Dead Sea?&lt;p&gt;A: Salt lake located on the border between Israel and Jordan. Its shoreline is the lowest point on the Earth’s surface, averaging 396 m below sea level. It is 74 km long. It is seven times as salty (30% by volume) as the ocean. Its density keeps swimmers afloat. Only simple organisms can live in its saline waters&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Well-formulated knowledge – Simple and specific&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: Where is the Dead Sea located?&lt;p&gt;A: on the border between Israel and Jordan&lt;/p&gt;&lt;p&gt;Q: What is the lowest point on the Earth’s surface?&lt;/p&gt;&lt;p&gt;A: The Dead Sea shoreline&lt;/p&gt;&lt;p&gt;Q: What is the average level on which the Dead Sea is located?&lt;/p&gt;&lt;p&gt;A: 400 meters (below sea level)&lt;/p&gt;&lt;p&gt;Q: How long is the Dead Sea?&lt;/p&gt;&lt;p&gt;A: 70 km&lt;/p&gt;&lt;p&gt;Q: How much saltier is the Dead Sea than the oceans?&lt;/p&gt;&lt;p&gt;A: 7 times&lt;/p&gt;&lt;p&gt;Q: What is the volume content of salt in the Dead Sea?&lt;/p&gt;&lt;p&gt;A: 30%&lt;/p&gt;&lt;p&gt;Q: Why can the Dead Sea keep swimmers afloat?&lt;/p&gt;&lt;p&gt;A: due to high salt content&lt;/p&gt;&lt;p&gt;Q: Why is the Dead Sea called Dead?&lt;/p&gt;&lt;p&gt;A: because only simple organisms can live in it&lt;/p&gt;&lt;p&gt;Q: Why only simple organisms can live in the Dead Sea?&lt;/p&gt;&lt;p&gt;A: because of high salt content&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;You might want to experiment and try to learn two subjects using the two above approaches and see for yourself what advantage is brought by minimum information principle. This is particularly visible in the long perspective, i.e. the longer the time you need to remember knowledge, the more you benefit from simplifying your items!&lt;/p&gt;
    &lt;p&gt;Note in the example above how short the questions are. Note also that the answers are even shorter! We want a minimum amount of information to be retrieved from memory in a single repetition! We want answer to be as short as imaginably possible!&lt;/p&gt;
    &lt;p&gt;You will notice that the knowledge learned in the ill-structured example is not entirely equivalent to the well-structured formulation. For example, although you will remember why the Dead Sea can keep swimmers afloat, you may forget that it at all has such a characteristic in the first place! Additionally, rounding 396 to 400 and 74 to 70 produces some loss of information. These can be remedied by adding more questions or making the present ones more precise.&lt;/p&gt;
    &lt;p&gt;You will also lose the ability to fluently recite the description of the Dead Sea when called up to the blackboard by your teachers. I bet, however, that shining in front of the class is not your ultimate goal in learning. To see how to cope with recitations and poems, read further (section devoted to enumerations)&lt;/p&gt;
    &lt;p&gt;5) Cloze deletion is easy and effective&lt;/p&gt;
    &lt;p&gt;Cloze deletion is a sentence with its parts missing and replaced by three dots. Cloze deletion exercise is an exercise that uses cloze deletion to ask the student to fill in the gaps marked with the three dots. For example, Bill …[name] was the second US president to go through impeachment.If you are a beginner and if you find it difficult to stick to the minimum information principle, use cloze deletion! If you are an advanced user, you will also like cloze deletion. It is a quick and effective method of converting textbook knowledge into knowledge that can be subject to learning based on spaced repetition. Cloze deletion makes the core of the fast reading and learning technique called incremental reading.&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Ill-formulated knowledge – Complex and wordy&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: What was the history of the Kaleida company?&lt;p&gt;A: Kaleida, funded to the tune of $40 million by Apple Computer and IBM in 1991. Hyped as a red-hot startup, Kaleida’s mission was to create a multimedia programming language It finally produced one, called Script X. But it took three years. Meanwhile, companies such as Macromedia and Asymetrix had snapped up all the business. Kaleida closed in 1995.&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Well-formulated knowledge – Simple cloze deletion&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: Kaleida was funded to the tune of …(amount) by Apple Computer and IBM in 1991&lt;p&gt;A: $40 million&lt;/p&gt;&lt;p&gt;Q: Kaleida was funded to the tune of $40 million by …(companies) in 1991&lt;/p&gt;&lt;p&gt;A: Apple and IBM&lt;/p&gt;&lt;p&gt;Q: Kaleida was funded to the tune of $40 million by Apple Computer and IBM in … (year)&lt;/p&gt;&lt;p&gt;A: 1991&lt;/p&gt;&lt;p&gt;Q: …(company) mission was to create a multimedia programming language. It finally produced one, called Script X. But it took three years&lt;/p&gt;&lt;p&gt;A: Kaleida’s&lt;/p&gt;&lt;p&gt;Q: Kaleida’s mission was to create a … It finally produced one, called Script X. But it took three years&lt;/p&gt;&lt;p&gt;A: multimedia programming language&lt;/p&gt;&lt;p&gt;Q: Kaleida’s mission was to create a multimedia programming language. It finally produced one, called … But it took three years&lt;/p&gt;&lt;p&gt;A: Script X&lt;/p&gt;&lt;p&gt;Q: Kaleida’s mission was to create a multimedia programming language. It finally produced one, called Script X. But it took …(time)&lt;/p&gt;&lt;p&gt;A: three years&lt;/p&gt;&lt;p&gt;Q: Kaleida’s mission was to create a multimedia programming language: Script X. But it took three years. Meanwhile, companies such as … had snapped up all the business&lt;/p&gt;&lt;p&gt;A: Macromedia/Asymetrix&lt;/p&gt;&lt;p&gt;Q: Kaleida’s mission was to create Script X. But it took three years. Meanwhile, companies such as Macromedia and Asymetrix had snapped up all the business. Kaleida closed in …(year)&lt;/p&gt;&lt;p&gt;A: 1995&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Optional: SuperMemo Recipe:&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;SuperMemo 2002&lt;/cell&gt;
        &lt;cell&gt;SuperMemo 2000&lt;/cell&gt;
        &lt;cell&gt;SuperMemo 98/99&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Creating cloze deletions in new SuperMemos:select the keyword that is to be replaced with tree dots and press Alt+Z&lt;/cell&gt;
        &lt;cell&gt;Generating a cloze deletions from texts placed in the clipboard in SuperMemo 2000:&lt;p&gt;1. Press Ctrl+Alt+N to paste the text to SuperMemo&lt;/p&gt;&lt;p&gt;2. Select the part that is to be replaced with three dots 3. Right-click to open the component menu and select&lt;/p&gt;&lt;p&gt;Reading : Remember cloze (or click one of cloze icons on the reading toolbar)&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;Cloze deletions in SuperMemo 98/99:&lt;p&gt;1. Press Ctrl+A to add a standard question-and-answer item&lt;/p&gt;&lt;p&gt;2. Paste the text into the question field. This will create the outline of your items&lt;/p&gt;&lt;p&gt;3. Press Ctrl+Alt+U to Duplicate the element&lt;/p&gt;&lt;p&gt;4. Select the part that is to be replaced with three dots&lt;/p&gt;&lt;p&gt;5. Cut the selection to the clipboard (e.g. with Shift+Del)&lt;/p&gt;&lt;p&gt;6. Type in three dots (optionally, add the explanation in parentheses as in above examples)&lt;/p&gt;&lt;p&gt;7. Press Ctrl+T to save the question field and move to the answer field&lt;/p&gt;&lt;p&gt;8. Paste the text cut in Step 5 (e.g. with Shift+Ins or Ctrl+V). Your first item is ready&lt;/p&gt;&lt;p&gt;9. Press PgUp to go back to the outline item created in Step 2&lt;/p&gt;&lt;p&gt;10. Goto Step 3 and continue adding new items&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;6) Use imagery&lt;/p&gt;
    &lt;p&gt;Visual cortex is that part of the brain in which visual stimuli are interpreted. It has been very well developed in the course of evolution and that is why we say one picture is worth a thousand words. Indeed if you look at the number of details kept in a picture and the easiness with which your memory can retain them, you will notice that our verbal processing power is greatly inferior as compared with the visual processing power. The same refers to memory. A graphic representation of information is usually far less volatile.Usually it takes much less time to formulate a simple question-and-answer pair than to find or produce a neat graphic image. This is why you will probably always have to weigh up cost and profits in using graphics in your learning material. Well-employed images will greatly reduce your learning time in areas such as anatomy, geography, geometry, chemistry, history, and many more.The power of imagery explains why the concept of Tony Buzan’s mind maps is so popular. A mind map is an abstract picture in which connections between its components reflect the logical connections between individual concepts.&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Less beneficial formulation&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: What African country is located between Kenya, Zambia and Mozambique?A: Tanzania&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Well-formulated knowledge – Simple cloze deletion&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: What African country is marked white on the map?&lt;p&gt;A: Tanzania&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;7) Use mnemonic techniques&lt;/p&gt;
    &lt;p&gt;Mnemonic techniques are various techniques that make remembering easier. They are often amazingly effective. For most students, a picture of a 10-year-old memorizing a sequence of 50 playing cards verges on discovering a young genius. It is very surprising then to find out how easy it is to learn the techniques that make it possible with a dose of training. These techniques are available to everyone and do not require any special skills!Before you start believing that mastering such techniques will provide you with an eternal solution to the problem of forgetting, be warned that the true bottleneck towards long-lasting and useful memories is not in quickly memorizing knowledge! This is indeed the easier part. The bottleneck lies in retaining memories for months, years or for lifetime! To accomplish the latter you will need SuperMemo and the compliance with the 20 rules presented herein.There have been dozens of books written about mnemonic techniques. Probably those written by Tony Buzan are most popular and respected. You can search the web for keywords such as: mind maps, peg lists, mnemonic techniques, etc.Experience shows that with a dose of training you will need to consciously apply mnemonic techniques in only 1-5% of your items. With time, using mnemonic techniques will become automatic!&lt;lb/&gt;Exemplary mind map:&lt;/p&gt;
    &lt;p&gt;8) Graphic deletion is as good as cloze deletion&lt;/p&gt;
    &lt;p&gt;Graphic deletion works like cloze deletion but instead of a missing phrase it uses a missing image component. For example, when learning anatomy, you might present a complex illustration. Only a small part of it would be missing. The student’s job is to name the missing area. The same illustration can be used to formulate 10-20 items! Each item can ask about a specific subcomponent of the image. Graphic deletion works great in learning geography!Exemplary graphic deletion:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;SuperMemo 2000/2002&lt;/cell&gt;
        &lt;cell&gt;SuperMemo 99&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;This is how you can quickly generate graphic deletion using a picture from the clipboard:&lt;p&gt;1. Press Shift+Ins to paste the picture to SuperMemo&lt;/p&gt;&lt;p&gt;2. Press Ctrl+Shift+M and choose Occlusion template to apply graphic deletion template&lt;/p&gt;&lt;p&gt;3. SuperMemo 2000 only: Choose Ctrl+Shift+F2 to impose and detach the Occlusion template&lt;/p&gt;&lt;p&gt;4. Fill out the fields and place the occlusion rectangle to cover the appropriate part of the picture (use Alt+click twice to set the rectangle in the dragging mode)&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;In SuperMemo 99 you will need a few more steps:&lt;p&gt;1.Create an item containing the following components:&lt;/p&gt;&lt;p&gt;– question text: What is the name of the area covered with the red rectangle?&lt;/p&gt;&lt;p&gt;– empty answer text (click Answer on the component menu)&lt;/p&gt;&lt;p&gt;– your illustration (use Import file on the image component menu)&lt;/p&gt;&lt;p&gt;– red rectangle component (choose red color with Color on the rectangle component menu)&lt;/p&gt;&lt;p&gt;2. Choose Duplicate on the element menu (e.g. by pressing Ctrl+Alt+U)&lt;/p&gt;&lt;p&gt;3. Ctrl+click the rectangle component twice to place it in the dragging mode&lt;/p&gt;&lt;p&gt;4. Drag and size the red rectangle to cover the area in question&lt;/p&gt;&lt;p&gt;5. Type in the answer in the answer field&lt;/p&gt;&lt;p&gt;6. Press PgUp to go back to the original element created in Step 1&lt;/p&gt;&lt;p&gt;7. Go to Step 2 to add generate more graphic deletions&lt;/p&gt;&lt;p&gt;Note that you could also paint covering rectangles or circles on the original image but this would greatly increase the size of your collection. The above method makes sure that you reuse the same image many times in all items of the same template. For example, the collection Brain Anatomy available from &amp;gt;SuperMemo Library and on SuperMemo MegaMix CD-ROM uses the above technique&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;9) Avoid sets&lt;/p&gt;
    &lt;p&gt;A set is a collection of objects. For example, a set of fruits might be an apple, a pear and a peach. A classic example of an item that is difficult to learn is an item that asks for the list of the members of a set. For example: What countries belong to the European Union? You should avoid such items whenever possible due to the high cost of retaining memories based on sets. If sets are absolutely necessary, you should always try to convert them into enumerations. Enumerations are ordered lists of members (for example, the alphabetical list of the members of the EU). Enumerations are also hard to remember and should be avoided. However, the great advantage of enumerations over sets is that they are ordered and they force the brain to list them always in the same order. An ordered list of countries contains more information than the set of countries that can be listed in any order. Paradoxically, despite containing more information, enumerations are easier to remember. The reason for this has been discussed earlier in the context of the minimum information principle: you should always try to make sure your brain works in the exactly same way at each repetition. In the case of sets, listing members in varying order at each repetition has a disastrous effect on memory. It is nearly impossible to memorize sets containing more than five members without the use of mnemonic techniques, enumeration, grouping, etc. Despite this claim, you will often succeed due to subconsciously mastered techniques that help you go around this problem. Those techniques, however, will fail you all too often. For that reason: Avoid sets! If you need them badly, convert them into enumerations and use techniques for dealing with enumerations&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Ill-formulated knowledge – Sets are unacceptable!&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: What countries belong to the European Union (2002)?&lt;p&gt;A: Austria, Belgium, Denmark, Finland, France, Germany, Greece, Ireland, Italy, Luxembourg, the Netherlands, Portugal, Spain, Sweden, and the United Kingdom.&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Well-formulated knowledge – Converting a set into a meaningful listing&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: Which country hosted a meeting to consider the creation of a European Community of Defence in 1951?&lt;p&gt;A: France&lt;/p&gt;&lt;p&gt;Q: Which countries apart from France joined the European Coal and Steel Community in 1952?&lt;/p&gt;&lt;p&gt;A: Germany, Italy and the Benelux&lt;/p&gt;&lt;p&gt;Q: What countries make up the Benelux?&lt;/p&gt;&lt;p&gt;A: Belgium, Luxembourg, and the Netherlands&lt;/p&gt;&lt;p&gt;Q: Whose membership did Charles de Gaulle oppose in the 1960s?&lt;/p&gt;&lt;p&gt;A: that of UK&lt;/p&gt;&lt;p&gt;Q: Which countries joined the EEC along the UK in 1973?&lt;/p&gt;&lt;p&gt;A: Ireland and Denmark&lt;/p&gt;&lt;p&gt;Q: Which country joined the EEC in 1981?&lt;/p&gt;&lt;p&gt;A: Greece&lt;/p&gt;&lt;p&gt;Q: Which countries joined the EEC in 1986?&lt;/p&gt;&lt;p&gt;A: Spain and Portugal&lt;/p&gt;&lt;p&gt;Q: Which countries joined the EU in 1995?&lt;/p&gt;&lt;p&gt;A: Austria, Sweden and Finland&lt;/p&gt;&lt;p&gt;Q: What was the historic course of expansion of the European Union membership?&lt;/p&gt;&lt;p&gt;A: (1) France and (2) Germany, Italy and the Benelux, (3) UK and (4) Ireland and Denmark, (5) Greece, (6) Spain and Portugal and (7) Austria, Sweden and Finland&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Note that in the example above, we converted a 15-member set into 9 items, five of which are 2-3 member sets, and one is a six member enumeration. Put it to your SuperMemo, and see how easy it is to generate the list of the European Union members using the historic timeline! Note the tricks used with France and the UK. They joined the union in the company of others but have been listed as separate items to simplify the learning process. Note also that the sum of information included in this well-formulated approach is far greater than that of the original set. Thus along simplicity, we gained some useful knowledge. All individual items effectively comply with the minimum information principle! You could go further by trying to split the Germany-Italy-Benelux set or using mnemonic techniques to memorize the final seven-member enumeration (i.e. the last of the questions above). However, you should take those steps only if you have any problems with retaining the proposed set in memory.&lt;/p&gt;
    &lt;p&gt;10) Avoid enumerations&lt;/p&gt;
    &lt;p&gt;Enumerations are also an example of classic items that are hard to learn. They are still far more acceptable than sets. Avoid enumerations wherever you can. If you cannot avoid them, deal with them using cloze deletions (overlapping cloze deletions if possible). Learning the alphabet can be a good example of an overlapping cloze deletion:&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Hard to learn item&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: What is the sequence of letters in the alphabet?&lt;p&gt;A: abcdefghijklmnopqrstuvwxyz&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Easy to learn items&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: What three letters does the alphabet begin with?&lt;p&gt;A: ABCQ: Fill out the missing letters of the alphabet A … … … E&lt;/p&gt;&lt;p&gt;A: B, C, D&lt;/p&gt;&lt;p&gt;Q: Fill out the missing letters of the alphabet B … … … F&lt;/p&gt;&lt;p&gt;A: C, D, E&lt;/p&gt;&lt;p&gt;Q: Fill out the missing letters of the alphabet C … … … G&lt;/p&gt;&lt;p&gt;A: D, E, F&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The above items will make learning the alphabet much faster. The greatest advantage of the above approach is that is it easier for psychological reasons: the student does not have to stop repetitions to recite the whole sequence and can only focus on a small part of the learned material. Still it is recommended that he recite the whole alphabet after making the repetition. However, once all individual pieces are well remembered, reciting the whole should be a pleasant and speedy action that produces little frustration.&lt;lb/&gt;The cloze deletion used above is an overlapping cloze deletion, i.e. the same parts of the enumeration are strengthened in memory using different items (for example, the sequence C-D will be needed to recall the second and the third item). This redundancy does not contradict the minimum information principle because the extra information is added in extra items.&lt;/p&gt;
    &lt;p&gt;You can also deal with enumerations by using grouping like in the case of sets (see the European Union example) but cloze deletions should be simpler and should suffice in most cases.&lt;lb/&gt;Learning poems is an example of learning enumerations (all words and sentences have to be uttered in a predefined sequence); however, due to strong semantic connections, the rhyme and the rhythm, it may often be possible to effectively remember poems without using cloze deletion and without the frustration of forgetting small subcomponents again and again. However, once you notice you stumble with your poem, you should dismember it using cloze deletion and thus make sure that the learning is fast, easy, effective and pleasurable&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;A poem that is hard to remember&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: The credit belongs … (Teddy Roosevelt)&lt;p&gt;A: The credit belongs to the man who’s actually in the arena, whose face is marred by dust and sweat; a man who knows the great enthusiasm and the great devotions, who spends himself in a worthy cause, who in the end knows the triumph of high achievement, so that his place shall never be with those cold and timid souls who know neither victory nor defeat&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;A poem split into easy items&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: The credit belongs … (Teddy Roosevelt)&lt;p&gt;A: to the man who’s actually in the arena&lt;/p&gt;&lt;p&gt;Q: The credit belongs to the man who’s actually in the arena …&lt;/p&gt;&lt;p&gt;A: whose face is marred by dust and sweat (a man who knows the great enthusiasm)&lt;/p&gt;&lt;p&gt;Q: whose face is marred by dust and sweat … (The credit belongs)&lt;/p&gt;&lt;p&gt;A: a man who knows the great enthusiasm and the great devotions (who spends himself in a worthy cause)&lt;/p&gt;&lt;p&gt;Q: a man who knows the great enthusiasm and the great devotions … (The credit belongs)&lt;/p&gt;&lt;p&gt;A: who spends himself in a worthy cause (who in the end knows the triumph of high achievement)&lt;/p&gt;&lt;p&gt;Q: who spends himself in a worthy cause … (The credit belongs)&lt;/p&gt;&lt;p&gt;A: who in the end knows the triumph of high achievement (so that his place shall never be), etc. etc.&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Does it all sound artificial? It does! But you will never know how effective this approach is until you try it by yourself!&lt;/p&gt;
    &lt;p&gt;11) Combat interference&lt;/p&gt;
    &lt;p&gt;When you learn about similar things you often confuse them. For example, you may have problems distinguishing between the meanings of the words historic and historical. This will even be more visible if you memorize lots of numbers, e.g. optimum dosages of drugs in pharmacotherapy. If knowledge of one item makes it harder to remember another item, we have a case of memory interference. You can often remember an item for years with straight excellent grades until … you memorize another item that makes it nearly impossible to remember either! For example, if you learn geography and you memorize that the country located between Venezuela, Suriname and Brazil is Guyana, you are likely to easily recall this fact for years with just a couple of repetitions. However, once you add similar items asking about the location of all these countries, and French Guyana, and Colombia and more, you will suddenly notice strong memory interference and you may experience unexpected forgetting. In simple terms: you will get confused about what is what.&lt;lb/&gt;Interference is probably the single greatest cause of forgetting in collections of an experienced user of SuperMemo. You can never be sure when it strikes, and the only hermetic procedure against it is to detect and eliminate. In other words, in many cases it may be impossible to predict interference at the moment of formulating knowledge. Interference can also occur between remotely related items like Guyana, Guyard and Guyenne, as well as Guyana, kayman and … aspirin. It may work differently for you and for your colleague. It very hard to predict.Still you should do your best to prevent interference before it takes its toll. This will make your learning process less stressful and mentally bearable. Here are some tips:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;make items as unambiguous as possible&lt;/item&gt;
      &lt;item&gt;stick to the minimum information principle (many of the remaining rules in this text are based on avoiding interference!)&lt;/item&gt;
      &lt;item&gt;eliminate interference as soon as you spot it, i.e. before it becomes your obsession (e.g. as soon as you see the word inept you think “I know the meanings of inept and inapt but I will never know which is which!”)&lt;/item&gt;
      &lt;item&gt;in SuperMemo use View : Other browsers : Leeches(Shift+F3) to regularly review and eliminate most difficult items&lt;/item&gt;
      &lt;item&gt;read more: Memory interference&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;12) Optimize wording&lt;/p&gt;
    &lt;p&gt;The wording of your items must be optimized to make sure that in minimum time the right bulb in your brain lights up. This will reduce error rates, increase specificity, reduce response time, and help your concentration.Less optimum item: cloze deletion that is too wordyQ: Aldus invented desktop publishing in 1985 with PageMaker. Aldus had little competition for years, and so failed to improve. Then Denver-based … blew past. PageMaker, now owned by Adobe, remains No. 2&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Less optimum item: cloze deletion that is too wordy&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: Aldus invented desktop publishing in 1985 with PageMaker. Aldus had little competition for years, and so failed to improve. Then Denver-based … blew past. PageMaker, now owned by Adobe, remains No. 2&lt;p&gt;A: Quark&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Better item: fewer words will speed up learning&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: Aldus invented desktop publishing in 1985 with PageMaker but failed to improve. Then … blew past (PageMaker remains No. 2)&lt;p&gt;A: Quark&lt;/p&gt;&lt;p&gt;Or better:&lt;/p&gt;&lt;p&gt;Q: Aldus invented desktop publishing with PageMaker but failed to improve. It was soon outdistanced by …&lt;/p&gt;&lt;p&gt;A: Quark&lt;/p&gt;&lt;p&gt;Or better:&lt;/p&gt;&lt;p&gt;Q: PageMaker failed to improve and was outdistanced by …&lt;/p&gt;&lt;p&gt;A: Quark&lt;/p&gt;&lt;p&gt;Or better:&lt;/p&gt;&lt;p&gt;Q: PageMaker lost ground to …&lt;/p&gt;&lt;p&gt;A: Quark&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Note that the loss of information content in this item is inconsequential. During repetition you are only supposed to learn the name: Quark. You should not hope that the trailing messages on the ownership of PageMaker and the year of its development will somehow trickle to your memory as a side effect. You should decide if the other pieces of information are important to you and if so, store them in separate items (perhaps reusing the above text, employing cloze deletion again and optimizing the wording in a new way). Otherwise the redundant information will only slow down your learning process!&lt;/p&gt;
    &lt;p&gt;13) Refer to other memories&lt;/p&gt;
    &lt;p&gt;Referring to other memories can place your item in a better context, simplify wording, and reduce interference. In the example below, using the words humble and supplicant helps the student focus on the word shamelessly and thus strengthen the correct semantics. Better focus helps eliminating interference. Secondly, the use of the words humble and supplicant makes it possible to avoid interference of cringing with these words themselves. Finally, the proposed wording is shorter and more specific. Naturally, the rules basics-to-details and do not learn what you do not understand require that the words humble and supplicant be learned beforehand (or at least at the same time)&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Item subject to strong interference&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: derog: adj: shamelessly conscious of one’s failings and asking in a begging way&lt;p&gt;A: cringing&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Item that uses interfering memories to amplify the correct meaning&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: derog: adj: shamelessly humble and supplicant&lt;p&gt;A: cringing&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;14) Personalize and provide examples&lt;/p&gt;
    &lt;p&gt;One of the most effective ways of enhancing memories is to provide them with a link to your personal life. In the example below you will save time if you use a personal reference rather than trying to paint a picture that would aptly illustrate the question&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Item subject to strong interference&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: What is the name of a soft bed without arms or back?&lt;p&gt;A: divan&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Item that uses interfering memories to amplify the correct meaning&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: What is the name of a soft bed without arms or back? (like the one at Robert’s parents)&lt;p&gt;A: divan&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;&lt;lb/&gt;If you remember exactly what kind of soft bed can be found in Robert’s parents’ apartment you will save time by not having to dig exactly into the semantics of the definition and/or looking for an appropriate graphic illustration for the piece of furniture in question. Personalized examples are very resistant to interference and can greatly reduce your learning time&lt;/p&gt;
    &lt;p&gt;15) Rely on emotional states&lt;/p&gt;
    &lt;p&gt;If you can illustrate your items with examples that are vivid or even shocking, you are likely to enhance retrieval (as long as you do not overuse same tools and fall victim of interference!). Your items may assume bizarre form; however, as long as they are produced for your private consumption, the end justifies the means. Use objects that evoke very specific and strong emotions: love, sex, war, your late relative, object of your infatuation, Linda Tripp, Nelson Mandela, etc. It is well known that emotional states can facilitate recall; however, you should make sure that you are not deprived of the said emotional clues at the moment when you need to retrieve a given memory in a real-life situation&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Harder item&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: a light and joking conversation&lt;p&gt;A: banter&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Easier item&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: a light and joking conversation (e.g. Mandela and de Klerk in 1992)&lt;p&gt;A: banter&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;&lt;lb/&gt;If you have vivid and positive memories related to the meetings between Nelson Mandela and F.W. de Klerk, you are likely to quickly grasp the meaning of the definition of banter. Without the example you might struggle with interference from words such as badinage or even chat. There is no risk of irrelevant emotional state in this example as the state helps to define the semantics of the learned concept! A well-thought example can often reduce your learning time several times! I have recorded examples in which an item without an example was forgotten 20 times within one year, while the same item with a subtle interference-busting example was not forgotten even once in ten repetitions spread over five years. This is roughly equivalent to 25-fold saving in time in the period of 20 years! Such examples are not rare! They are most effectively handled with the all the preceding rules targeted on simplicity and against the interference&lt;/p&gt;
    &lt;p&gt;16) Context cues simplify wording&lt;/p&gt;
    &lt;p&gt;You can use categories in SuperMemo 2000/2002, provide different branches of knowledge with a different look (different template), use reference labels (Title, Author, Date, etc.) and clearly label subcategories (e.g. with strings such as chem for chemistry, math for mathematics, etc.). This will help you simplify the wording of your items as you will be relieved from the need to specify the context of your question. In the example below, the well-defined prefix bioch: saves you a lot of typing and a lot of reading while still making sure you do not confuse the abbreviation GRE with Graduate Record Examination. Note that in the recommended case, you process the item starting from the label bioch which puts your brain immediately in the right context. While processing the lesser optimum case, you will waste precious milliseconds on flashing the standard meaning of GRE and … what is worse … you will light up the wrong areas of your brain that will now perhaps be prone to interference!&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Wordy item can cause accidental lapses through interference&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: What does GRE stand for in biochemistry?&lt;p&gt;A: glucocorticoid response element&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Context-labeled items increase success rate&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Q: bioch: GRE&lt;p&gt;A: glucocorticoid response element&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;17) Redundancy does not contradict minimum information principle&lt;/p&gt;
    &lt;p&gt;Redundancy in simple terms is more information than needed or duplicate information, etc. Redundancy does not have to contradict the minimum information principle and may even be welcome. The problem of redundancy is too wide for this short text. Here are some examples that are only to illustrate that minimum information principle cannot be understood as minimum number of characters or bits in your collections or even items:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;passive and active approach: if you learn a foreign language, e.g. Esperanto, you will often build word pairs such as phone-telefono, language-lingvo, hope-esperanto, etc. These pairs require active recall of the foreign word. Active recall does not, however, guarantee passive recognition and you may fail with telefono-phone, lingvo-language, or esperanto-hope. Adding new elements with swapped questions and answers may in some cases be redundant but it does not contradict the minimum information principle! Your items are still as simple as possible. You just get more of themIn SuperMemo 2000/2002, you can quickly generate swapped word-pair items with Duplicate (Ctrl+Alt+D) and Swap (Ctrl+Shift+S)&lt;/item&gt;
      &lt;item&gt;reasoning cues: you will often want to boost your reasoning ability by asking about a solution to the problem. Instead of just memorizing the answer you would like to quickly follow the reasoning steps (e.g. solve a simple mathematical equation) and generate the answer. In such a case, providing the hint on the reasoning steps in the answer will only serve helping you always follow the right path at repetitions&lt;/item&gt;
      &lt;item&gt;derivation steps: in more complex problems to solve, memorizing individual derivation steps is always highly recommended (e.g. solving complex mathematical problems). It is not cramming! It is making sure that the brain can always follow the fastest path while solving the problem. For more on boosting creativity and intelligence read: Roots of genius and creativity, as well as more specific: Derivation, reasoning and intelligence&lt;/item&gt;
      &lt;item&gt;multiple semantic representation: very often the same knowledge can be represented and viewed from different angles. Memorizing different representations of the same fact or rule is recommended in cases where a given memory is of high value. This will increase the expected recall rate (beyond that specified with the forgetting index)!&lt;/item&gt;
      &lt;item&gt;flexible repetition: if there are many valid responses to the same question make sure that your representation makes it possible to identify the equivalence and reward you with good grades by providing just one of the equivalent choices. For example, if you learn a language, it rarely make sense to learn all synonyms that meet a definition of a concept. It is more adequate to consider a single synonym as the sufficient answer (e.g. a mark made by ink spilt on sth = blot/blob/blotch)&lt;/item&gt;
      &lt;item&gt;more&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;18) Provide sources&lt;/p&gt;
    &lt;p&gt;Except for well-tested and proven knowledge (such as 2+2=4), it is highly recommended that you include sources from which you have gathered your knowledge. In real-life situation you will often be confronted with challenges to your knowledge. Sources can come to your rescue. You will also find that facts and figures differ depending on the source. You can really be surprised how frivolously reputable information agencies publish figures that are drastically different from other equally reputable sources. Without SuperMemo, those discrepancies are often difficult to notice: before you encounter the new fact, the old one is often long forgotten. With sources provided, you will be able to make more educated choices on which pieces of information are more reliable. Adding reliability labels may also be helpful (e.g. Watch out!, Other sources differ!, etc.). Sources should accompany your items but should not be part of the learned knowledge (unless it is critical for you to be able to recall the source whenever asked).&lt;/p&gt;
    &lt;p&gt;19) Provide date stamping&lt;/p&gt;
    &lt;p&gt;Knowledge can be relatively stable (basic math, anatomy, taxonomy, physical geography, etc.) and highly volatile (economic indicators, high-tech knowledge, personal statistics, etc.). It is important that you provide your items with time stamping or other tags indicating the degree of obsolescence. In case of statistical figures, you might stamp them with the year they have been collected. When learning software applications, it is enough you stamp the item with the software version. Once you have newer figures you can update your items. Unfortunately, in most cases you will have to re-memorize knowledge that became outdated. Date stamping is useful in editing and verifying your knowledge; however, you will rarely want to memorize stamping itself. If you would like to remember the changes of a given figure in time (e.g. GNP figures over a number of years), the date stamping becomes the learned knowledge itself.&lt;/p&gt;
    &lt;p&gt;20) Prioritize&lt;/p&gt;
    &lt;p&gt;You will always face far more knowledge that you will be able to master. That is why prioritizing is critical for building quality knowledge in the long-term. The way you prioritize will affect the way your knowledge slots in. This will also affect the speed of learning (e.g. see: learn basics first). There are many stages at which prioritizing will take place; only few are relevant to knowledge representation, but all are important:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Prioritizing sources – there will always be a number of sources of your knowledge. If you are still at student years: these will most likely be books and notes pertaining to different subjects. Otherwise you will probably rely more on journals, Internet, TV, newspapers, encyclopedias, dictionaries, etc. It is always worth being aware what is the optimum proportion of time devoted to those varied sources. As you progress with learning, you will quickly develop a good sense of which learning slots bring better results and which might be extended at the cost of others&lt;/item&gt;
      &lt;item&gt;Extracting knowledge – unless you are about to pass an important exam, it nearly never makes sense to memorize whole books or whole articles. You will need to extract those parts that are most likely to impact the quality of your knowledge. You can do it by (1) marking paragraphs in a book or journal, (2) pasting relevant web pages to SuperMemo, (3) pasting relevant passages to SuperMemo, (4) typing facts and figures directly to SuperMemo notes, etc. You will need some experience before you can accurately measure how much knowledge you can indeed transfer to your brain and what degree of detail you can feasibly master. Your best way to prioritize the flow of knowledge into your memory is to use incremental reading tools&lt;/item&gt;
      &lt;item&gt;Transferring knowledge to SuperMemo – you may try to stick with the 20 rules of formulating knowledge at the moment of introducing your material to SuperMemo. However, you can also literally transfer your notes or import whole files and later use the mechanisms provided by SuperMemo to determine the order of processing the imported material. Probably the best criterion for choosing between formulating or just importing is the time needed for accurately formulating the item or items. If formulation requires more knowledge, more time, comparing with other sources, etc. you can just import. Otherwise, if you believe that formulating an accurate item is a matter of seconds, formulate it&lt;/item&gt;
      &lt;item&gt;Formulating items – make sure that explanatory or optional components of the answer are placed in the parentheses so that your attention is focused on the most important part of the item. The parts in the parentheses can be read after the repetition to strengthen the memory in its context&lt;/item&gt;
      &lt;item&gt;Using forgetting index – you can use the forgetting index to prioritize pending items. The sequence of repetitions will naturally be determined by SuperMemo; however, you can request higher retention level for items that are more important and lower retention level for items of lower priority&lt;/item&gt;
      &lt;item&gt;Learning – the process of prioritizing does not end with the onset of repetitions. Here are the tools you can use to continue setting your priorities while the learning process is under way:&lt;list rend="ul"&gt;&lt;item&gt;Remember (Ctrl+M) – re-memorize items of high priority that have changed or which are extremely important to your knowledge at a given moment. If you choose Ctrl+M you will be able to determine the next interval for the currently reviewed item (its repetition counter will be reset to zero). It is recommended that you always re-memorize items whose content has changed significantly&lt;/item&gt;&lt;item&gt;Reschedule (Ctrl+J) – manually schedule the date of the next repetition&lt;/item&gt;&lt;item&gt;Execute repetition (Ctrl+Shift+R) – manually execute a repetition even before the repetition’s due date (e.g. when reviewing particularly important material)&lt;/item&gt;&lt;item&gt;Forget (Ctrl+R)- remove the current item from the learning process and place it at the end of the pending queue&lt;/item&gt;&lt;item&gt;Dismiss (Ctrl+D) – ignore the current item in the learning process altogether&lt;/item&gt;&lt;item&gt;Delete (Ctrl+Shift+Del) – remove the current item from your collection&lt;/item&gt;&lt;item&gt;Change the forgetting index of memorized items or change the ordinal of pending items (Ctrl+Shift+P)&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Summary&lt;/p&gt;
    &lt;p&gt;Here again are the twenty rules of formulating knowledge. You will notice that the first 16 rules revolve around making memories simple! Some of the rules strongly overlap. For example: do not learn if you do not understand is a form of applying the minimum information principle which again is a way of making things simple:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Do not learn if you do not understand&lt;/item&gt;
      &lt;item&gt;Learn before you memorize – build the picture of the whole before you dismember it into simple items in SuperMemo. If the whole shows holes, review it again!&lt;/item&gt;
      &lt;item&gt;Build upon the basics – never jump both feet into a complex manual because you may never see the end. Well remembered basics will help the remaining knowledge easily fit in&lt;/item&gt;
      &lt;item&gt;Stick to the minimum information principle – if you continue forgetting an item, try to make it as simple as possible. If it does not help, see the remaining rules (cloze deletion, graphics, mnemonic techniques, converting sets into enumerations, etc.)&lt;/item&gt;
      &lt;item&gt;Cloze deletion is easy and effective – completing a deleted word or phrase is not only an effective way of learning. Most of all, it greatly speeds up formulating knowledge and is highly recommended for beginners&lt;/item&gt;
      &lt;item&gt;Use imagery – a picture is worth a thousand words&lt;/item&gt;
      &lt;item&gt;Use mnemonic techniques – read about peg lists and mind maps. Study the books by Tony Buzan. Learn how to convert memories into funny pictures. You won’t have problems with phone numbers and complex figures&lt;/item&gt;
      &lt;item&gt;Graphic deletion is as good as cloze deletion – obstructing parts of a picture is great for learning anatomy, geography and more&lt;/item&gt;
      &lt;item&gt;Avoid sets – larger sets are virtually un-memorizable unless you convert them into enumerations!&lt;/item&gt;
      &lt;item&gt;Avoid enumerations – enumerations are also hard to remember but can be dealt with using cloze deletion&lt;/item&gt;
      &lt;item&gt;Combat interference – even the simplest items can be completely intractable if they are similar to other items. Use examples, context cues, vivid illustrations, refer to emotions, and to your personal life&lt;/item&gt;
      &lt;item&gt;Optimize wording – like you reduce mathematical equations, you can reduce complex sentences into smart, compact and enjoyable maxims&lt;/item&gt;
      &lt;item&gt;Refer to other memories – building memories on other memories generates a coherent and hermetic structure that forgetting is less likely to affect. Build upon the basics and use planned redundancy to fill in the gaps&lt;/item&gt;
      &lt;item&gt;Personalize and provide examples – personalization might be the most effective way of building upon other memories. Your personal life is a gold mine of facts and events to refer to. As long as you build a collection for yourself, use personalization richly to build upon well established memories&lt;/item&gt;
      &lt;item&gt;Rely on emotional states – emotions are related to memories. If you learn a fact in the sate of sadness, you are more likely to recall it if when you are sad. Some memories can induce emotions and help you employ this property of the brain in remembering&lt;/item&gt;
      &lt;item&gt;Context cues simplify wording – providing context is a way of simplifying memories, building upon earlier knowledge and avoiding interference&lt;/item&gt;
      &lt;item&gt;Redundancy does not contradict minimum information principle – some forms of redundancy are welcome. There is little harm in memorizing the same fact as viewed from different angles. Passive and active approach is particularly practicable in learning word-pairs. Memorizing derivation steps in problem solving is a way towards boosting your intellectual powers!&lt;/item&gt;
      &lt;item&gt;Provide sources – sources help you manage the learning process, updating your knowledge, judging its reliability, or importance&lt;/item&gt;
      &lt;item&gt;Provide date stamping – time stamping is useful for volatile knowledge that changes in time&lt;/item&gt;
      &lt;item&gt;Prioritize – effective learning is all about prioritizing. In incremental reading you can start from badly formulated knowledge and improve its shape as you proceed with learning (in proportion to the cost of inappropriate formulation). If need be, you can review pieces of knowledge again, split it into parts, reformulate, reprioritize, or delete. See also: Incremental reading, Devouring knowledge, Flow of knowledge, Using tasklists&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45093022</guid></item><item><title>Cloudflare Radar: AI Insights</title><link>https://radar.cloudflare.com/ai-insights</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45093090</guid></item><item><title>Ask HN: Who wants to be hired? (September 2025)</title><link>https://news.ycombinator.com/item?id=45093190</link><description>&lt;doc fingerprint="301182753412e0e7"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Share your information if you are looking for work. Please use this format:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;  Location:
  Remote:
  Willing to relocate:
  Technologies:
  Résumé/CV:
  Email:
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt; Please only post if you are personally looking for work. Agencies, recruiters, job boards, and so on, are off topic here.&lt;/p&gt;
      &lt;p&gt;Readers: please only email these addresses to discuss work opportunities.&lt;/p&gt;
      &lt;p&gt;There's a site for searching these posts at https://www.wantstobehired.com.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45093190</guid></item><item><title>Ask HN: Who is hiring? (September 2025)</title><link>https://news.ycombinator.com/item?id=45093192</link><description>&lt;doc fingerprint="3651195a341ae364"&gt;
  &lt;main&gt;
    &lt;div&gt;&lt;p&gt;Please state the location and include REMOTE for remote work, REMOTE (US) or similar if the country is restricted, and ONSITE when remote work is &lt;/p&gt;not&lt;p&gt; an option.&lt;/p&gt;&lt;p&gt;Please only post if you personally are part of the hiring company—no recruiting firms or job boards. One post per company. If it isn't a household name, explain what your company does.&lt;/p&gt;&lt;p&gt;Please only post if you are actively filling a position and are committed to responding to applicants.&lt;/p&gt;&lt;p&gt;Commenters: please don't reply to job posts to complain about something. It's off topic here.&lt;/p&gt;&lt;p&gt;Readers: please only email if you are personally interested in the job.&lt;/p&gt;&lt;p&gt;Searchers: try https://dheerajck.github.io/hnwhoishiring/, https://amber-williams.github.io/hackernews-whos-hiring/, http://nchelluri.github.io/hnjobs/, https://hnresumetojobs.com, https://hnhired.fly.dev, https://kennytilton.github.io/whoishiring/, https://hnjobs.emilburzo.com, or this (unofficial) Chrome extension: https://chromewebstore.google.com/detail/hn-hiring-pro/mpfal....&lt;/p&gt;&lt;p&gt;Don't miss these other fine threads:&lt;/p&gt;&lt;p&gt;Who wants to be hired? https://news.ycombinator.com/item?id=45093190&lt;/p&gt;&lt;p&gt;Freelancer? Seeking freelancer? https://news.ycombinator.com/item?id=45093191&lt;/p&gt;&lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45093192</guid></item><item><title>Search engine referral report for 2025 Q2</title><link>https://radar.cloudflare.com/reports/search-engine-market-share-2025-q2</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45093693</guid></item><item><title>A Unique, High-Tech (Family) Computer</title><link>https://nicole.express/2025/a-computer-in-your-home.html</link><description>&lt;doc fingerprint="19154c3141e6a0a5"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;A Unique, High-Tech (Family) Computer&lt;/head&gt;
    &lt;p&gt;Thereâs a concept that many people have tried, with varying effects: the âeducational computerâ, a device that a parent can buy for their children to learn the basics of the computer, which everyone will need to know in the future, and can also play games, so the children will actually want to use it. These have ranged from plasticky VTech toys with little more than an electronic organizer, to the Wonder Computer of the 1980âs, the Commodore VIC-20, which was a full computer. This is a prime market fit for an aging 8-bit platform, so of course, the Famicom has been wedged into it tooâ¦ but not by Nintendo.&lt;/p&gt;
    &lt;head rend="h2"&gt;Unique, High-Tech, What more could you want?&lt;/head&gt;
    &lt;p&gt;This is it: a unique, high-tech computer. As we can see, itâs also advertising Contra on the box, along with â8 Bitâ games, so immediately, you know that this is a Famiclone, and itâs got a Famicom cartridge slot underneath the cartridge flap. Thereâs been more than a few of these out there; theyâre unique to me because they rarely show up in the United States (I bought this from Goodwill.com), but I would bet to many of the readers of this blog they wonât see this as unique at all.&lt;/p&gt;
    &lt;p&gt;Whatâs in the box?&lt;/p&gt;
    &lt;p&gt;In addition to the computer, you can see a whole selection of peripherals: two controllers, a mouse, a light-gun. And a power supply with a Europlug; further evidence that this is definitely not for the US market. Thankfully, itâs just 9V center-negative, so any plug you can use to power a Famicom should work here as well.&lt;/p&gt;
    &lt;p&gt;The sticker on the bottom of the system doesnât match the sticker on the front of the box, but it does give us a release year for this model of the product: 2003. By 2003, the Famicom hardware was definitely old hat; in fact, thatâs the same year Nintendo of Japan officially discontinued the system. You can definitely tell this sticker is trying to get you thinking this is relevant to the Windows XP world.&lt;/p&gt;
    &lt;p&gt;The sticker in the top left corner is long gone. Underneath is interesting, though; you can see three holes that look to the world like the Caps Lock, Num Lock, and Scroll Lock lights youâd see in the corner of a standard Windows keyboard of the era. Was this top case also used for standard keyboards? And if so, what did they do with the cartridge slot?&lt;/p&gt;
    &lt;p&gt;More evidence of plastics reuse is on the back, which shows a blanking plate covering nothing, and a speaker grille with no speaker behind it.&lt;/p&gt;
    &lt;p&gt;The actual ports you get are paltry; the common DB-9 ports you see for Famiclones, a power plug, and three RCA jacks. Think thatâs stereo audio? (Something we have discussed as a Famicom mod on this blog before) Look closer!&lt;/p&gt;
    &lt;p&gt;The white RCA port is actually the RF modulator! Audio is the red jack. Iâm guessing white, yellow, and red triplets of RCA ports were just extremely cheap at the time of this computerâs manufacture, so why not use them?&lt;/p&gt;
    &lt;p&gt;This is held together by screws, not plastic clips, which actually surprised me. But inside is just a standard keyboard membrane and a few small PCBs.&lt;/p&gt;
    &lt;p&gt;The keyboard mechanism is self-contained in the top plastic, and is actually a bit more elaborate than I expected; this is a âslider over membraneâ design, where pressing a key causes a tiny point-like piece of plastic to connect the membrane. It works fairly well; you could definitely learn to type on this. Assuming it didnât bind as much when it was new and clean, anyway.&lt;/p&gt;
    &lt;p&gt;Whereâs the Famiclone itself? Itâs just underneath the cartridge port, of course! And also of course, itâs an epoxy blob.&lt;/p&gt;
    &lt;p&gt;On the epoxy blob was a small piece of masking tape, which I removed for the earlier screenshot. I canât quite make it out as the ink has unfortunately bled a lot; the first letter seems to be a âVâ. A major series of Famiclone chips from V.R. Technology has serial numbers beginning with âVTâ, which could be related.&lt;/p&gt;
    &lt;p&gt;One thing about that controller. You might notice that on a real NES controller, the A button is on the outside edge, and the B button closer to the center. This is labeled in the opposite wayâ and this is how the buttons are arranged, too. Why did they swap the button positions? I donât know, perhaps they just donât like games being playable. The X and Y buttons are turbo buttons, as is commonly the case on four-button controllers being used for the Famicom.&lt;/p&gt;
    &lt;head rend="h2"&gt;Built-in hardware&lt;/head&gt;
    &lt;p&gt;This Famiclone has no built-in software or games. That seems to be pretty standard for models with cartridge slots; everything that makes this an educational computer is on the â48 in 1â cartridge. 48 is a much more achievable goal than many multicarts claim.&lt;/p&gt;
    &lt;p&gt;Whatâs inside?&lt;/p&gt;
    &lt;p&gt;An epoxy blob, of course, and 32kiB of SRAM. Itâs a shame this is an epoxy blob, because Iâm actually quite curious how that SRAM is wired. The NES memory map does not have room for 32kiB of cartridge PRG-ROM (usual amount of area mapped to the ROM) and 32kiB of cartridge RAM, so my assumption is that some sort of banking much be going on here.&lt;/p&gt;
    &lt;head rend="h3"&gt;Turn it on&lt;/head&gt;
    &lt;p&gt;But letâs boot the damn thing up already! Worth noting that this is a PAL 50Hz console; that shouldâve been evident from the Europlug. I donât think anywhere uses the Europlug and 60Hz NTSC; though possibly parts of Latin America?&lt;/p&gt;
    &lt;p&gt;The UI is clearly inspired by Microsoft Windows, though not the Windows XP that the sticker on the console tries to hint at. Itâs actually pretty adorable, though having to move the cursor to the top corner is annoying. (Protip: use the page up and page down keys on the keyboard) The cursor can be moved with the mouse, or the controller. What is Super Hero?&lt;/p&gt;
    &lt;p&gt;Itâs a rhythm game of some sort. I canât recognize the track, and I donât know how to play the game either; it doesnât seem like controller inputs are what itâs looking for, or the arrow keys on the keyboard? So Iâll just let it be for now.&lt;/p&gt;
    &lt;p&gt;UPDATE: Thanks to The_Opponent for finding the track: Boys by smile.dk. Still not sure why itâs called âSuper Heroâ, though.&lt;/p&gt;
    &lt;p&gt;This actually has a lot of unique elements. For example, like any good version of Microsoft Windows, it has Solitaire.&lt;/p&gt;
    &lt;p&gt;And like any good multicart, it pads things out. Not only does it break up Duck Hunt (remember that gun in the package?) into multiple gamesâ¦&lt;/p&gt;
    &lt;p&gt;And yes, it is Nintendoâs Duck Hunt. What else did you expect?&lt;/p&gt;
    &lt;p&gt;The most extreme case is Konamiâs Track &amp;amp; Field. Itâs here, sure.&lt;/p&gt;
    &lt;p&gt;But itâs been broken up into so many individual options for individual events that an entire page of the menu is taken up by it.&lt;/p&gt;
    &lt;p&gt;Also, you know what Konami game is not present on this multicart? Contra. Which was advertised on the box.&lt;/p&gt;
    &lt;p&gt;There are some educational games. Not really worth noting too much; mostly focused on typing, though it can also sing âHappy Birthday to Youâ. Since the keyboard is pretty decent, thatâs probably actually the best usecase, but making games focused on typing is always a bit limiting. Hereâs a classic âpress the key listedâ game, with a âMy First Missile Commandâ theme.&lt;/p&gt;
    &lt;p&gt;But we were promised an Electronic Organ. So what does it have for a âMUSIC BOARDâ?&lt;/p&gt;
    &lt;p&gt;Thatâs right; itâs MUSIC BOARD, from Nintendo and Hudsonâs Family BASIC. Just separated into its own option on the menu, just like they did for Duck Hunt and Track and Field. Family BASIC MUSIC BOARD is fine, though I wouldnât call it an electronic organ. I feel robbed.&lt;/p&gt;
    &lt;p&gt;But if Family BASICâs MUSIC BOARD is hereâ¦&lt;/p&gt;
    &lt;p&gt;Then Family BASICâs GAME BASIC should be here too. And it is! Or at least, I assume this is Family BASIC. (V3, judging by the version number) 32kiB of RAM is much more than it usually has access to, but is likely the purpose of the extra RAM on the cartridge. Very nice.&lt;/p&gt;
    &lt;p&gt;Unfortunately, this has some severe downsides compared to the real Family BASIC, despite the extra RAM. The biggest being that there is no way to save your work between sessions; neither battery-backed RAM nor a way to interface with a cassette tape. This pretty much relegates G BASIC to a novelty, though it always was one anyways.&lt;/p&gt;
    &lt;head rend="h2"&gt;Part of the FAMILY?&lt;/head&gt;
    &lt;p&gt;One thing I wondered here was, if it has Family BASIC on board, would the original one work?&lt;/p&gt;
    &lt;p&gt;Wellâ¦ unfortunately, Family BASIC has a very annoying UI where you have to talk to the computer using text. And so I learned that while the keyboard is compatible in the sense that pressing keys makes letters appear, the keyboard matrix has been remapped.&lt;/p&gt;
    &lt;p&gt;I didnât even make it to the actual BASIC.&lt;/p&gt;
    &lt;head rend="h2"&gt;Computers for the whole family&lt;/head&gt;
    &lt;p&gt;As I noted, the educational computer market has a lot of entries. Many had features like printers; I wonder if that was what the blanking plate was for. This one is very bare-bones. But letâs face it; it was mostly a way for kids to get their parents to get something into the house which could play games like Super Mario Bros. 3, albiet at a PAL 50Hz slowdown.&lt;/p&gt;
    &lt;p&gt;Still, I think itâs a pretty cool bit of computing history, especially important outside the wealthier countries whose markets I usually look at. I hope you enjoyed!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45093956</guid></item><item><title>Adaptive LLM routing under budget constraints</title><link>https://arxiv.org/abs/2508.21141</link><description>&lt;doc fingerprint="cc18340bf0f78482"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Computer Science &amp;gt; Machine Learning&lt;/head&gt;&lt;p&gt; [Submitted on 28 Aug 2025]&lt;/p&gt;&lt;head rend="h1"&gt;Title:Adaptive LLM Routing under Budget Constraints&lt;/head&gt;View PDF HTML (experimental)&lt;quote&gt;Abstract:Large Language Models (LLMs) have revolutionized natural language processing, but their varying capabilities and costs pose challenges in practical applications. LLM routing addresses this by dynamically selecting the most suitable LLM for each query/task. Previous approaches treat this as a supervised learning problem, assuming complete knowledge of optimal query-LLM pairings. However, real-world scenarios lack such comprehensive mappings and face evolving user queries. We thus propose to study LLM routing as a contextual bandit problem, enabling adaptive decision-making using bandit feedback without requiring exhaustive inference across all LLMs for all queries (in contrast to supervised routing). To address this problem, we develop a shared embedding space for queries and LLMs, where query and LLM embeddings are aligned to reflect their affinity. This space is initially learned from offline human preference data and refined through online bandit feedback. We instantiate this idea through Preference-prior Informed Linucb fOr adaptive rouTing (PILOT), a novel extension of LinUCB. To handle diverse user budgets for model routing, we introduce an online cost policy modeled as a multi-choice knapsack problem, ensuring resource-efficient routing.&lt;/quote&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;p&gt; export BibTeX citation Loading... &lt;/p&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;p&gt; IArxiv Recommender (What is IArxiv?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45094421</guid></item><item><title>Optery (YC W22) Is Hiring in Engineering, Legal, Sales, Marketing (U.S., Latam)</title><link>https://www.optery.com/careers/</link><description>&lt;doc fingerprint="738af7694497baac"&gt;
  &lt;main&gt;
    &lt;p&gt;Skip to content Use promo code: Xi8TJRBw at checkout for 20% Off 🎉 with Optery’s Labor Day Sale! 🎇 Getting Started Personal Business Pricing Personal Business Sites We Cover Family Business Optery for Business Partnership Program API for Partners Book Optery for Business Demo Client Stories Business Use Cases PII Removal for Execs is Not Enough Guide to Enterprise Data Removal Services Resources Help Desk Blog Data Broker Directory For High-Risk Communities About Us Opt Out Guides Product Updates Customer Reviews Optery in the Press Search Toggle search Sign In Sign Up Free Getting Started Personal Business Pricing Personal Business Sites We Cover Family Business Optery for Business Partnership Program API for Partners Book Optery for Business Demo Client Stories Business Use Cases PII Removal for Execs is Not Enough Guide to Enterprise Data Removal Services Resources Help Desk Blog Data Broker Directory For High-Risk Communities About Us Opt Out Guides Product Updates Customer Reviews Optery in the Press Careers Ready to safeguard your personal data? Join the movement of people strengthening their privacy Sign Up Free&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45094471</guid></item><item><title>One of Britain's largest stocks of second-hand books ever amassed</title><link>https://www.worldofinteriors.com/story/richard-axe-second-hand-books-yorkshire</link><description>&lt;doc fingerprint="fa91101555a054a1"&gt;
  &lt;main&gt;
    &lt;p&gt;One of Britain’s largest stocks of second-hand books ever amassed can be found in the unlikeliest of locations: a vast former youth hostel in a pretty corner of the Yorkshire Dales. Meticulously sorted into subject areas, from naval history to 19th-century literature, architecture to zoology, over 150,000 volumes fill some 25 high-ceilinged rooms spread over four floors. To withstand the sheer weight of all those hardbacks, the building, which began life as a prep school in c1878, must surely be as strong as a Romanesque church.&lt;/p&gt;
    &lt;p&gt;Certainly the collection has been assembled with an almost religious zeal by sole trader Richard Axe, a spry 70-something who spoke to me from the Philippines, where he lives with his wife roughly half the year. Unlike the more commercially oriented of his peers, he has sold books primarily so that he could acquire more for himself. Of the Harrogate shop he owned prior to his move here he says: ‘Its main purpose was not to sell at all, but rather to buy and increase my buying profile.’ I had fondly imagined that Richard chose Aysgarth in order to lure customers from the nearby falls, a daytrippers’ magnet. But in fact, he says he’s never advertised, nor had more than four visitors per week, and all of them were by appointment. Yet very rarely did a week pass by without him shifting at least £1,000 worth of books.&lt;/p&gt;
    &lt;p&gt;So how did his business, which has been highly successful, operate? Most professionals in the field swim in the waters of either ‘good quality but relatively ordinary second-hand books’ or ‘very specialist, expensive antiquarian books’; Richard has ended up being a big fish in both streams. In his heyday, he would reckon to drive some 25,000 miles a year, attending auctions from Plymouth to Glasgow. There he’d bid for large lots, sometimes whole libraries, subsequently selling a handful of important titles to private customers and international dealers, while creaming off books for his own collection. Hence, in part, the appeal of North Yorkshire. Far from being ‘the back of beyond’, the A1, M1 and East Coast mainline railway offer superb connections. ‘I like the idea of being in the middle of the country.’&lt;/p&gt;
    &lt;p&gt;For the eagle-eyed expert, the condition of a book is critical. Richard gives the example of Dickens – ‘incredibly popular in his own lifetime, and so a first edition in reasonably good nick might fetch £50. But a really fine copy could go for ten times that.’ As is the case with all antiques, the internet has had a polarising effect. In the past, you might have traipsed round bookshops for a lifetime not finding the missing piece in your authorial jigsaw, but often such editions previously thought rare can now be quite easily unearthed via online search engines, and so their value has slumped. ‘But what’s transpired is that things that are genuinely uncommon have shot up.’&lt;/p&gt;
    &lt;p&gt;The classic case is JK Rowling’s Harry Potter and the Philosopher’s Stone. Given that it was the first in the sequence, Bloomsbury, with no inkling of the monster the brand would become, published the smallest viable number of copies – 500 – in its first edition. It is thus truly rare, says Richard, much more so than a Jane Austen equivalent. As a consequence: ‘A fine copy is worth, certainly, £50,000.’ Similarly, photograph albums and manuscripts, by definition one-off items, have seen skyrocketing interest in cyberspace – and among a new, younger breed of collector to boot. Indeed, the most expensive item my interlocutor has ever sold was not a book at all, but a scrapbook owned by Cecil Beaton, which included the photographer’s own drawing of Mick Jagger, a personal friend, and sketches by Jean Cocteau.&lt;/p&gt;
    &lt;p&gt;When Richard moved to his property in 2005, consolidating a warehouse, shop and large house in Harrogate, little structural work was required to the sturdily built edifice apart from new guttering, though he had to strip out rows of urinals and a few municipal-style kitchens. Inevitably, however, two men were employed full time for a year just building wooden shelves, which now stretch to a combined length of over a mile. The original plan was to carve out some domestic space in this behemoth of a building, but Richard states that mixing residence and business had potential VAT implications. And then there was the small issue of his ever-encroaching library… So he moved into the two-bedroom modern cottage previously inhabited by the youth-hostel manager. Presumably you had a no-book policy here, I ask Richard. ‘Well, if I did, it didn’t last,’ he replies ruefully. ‘Let’s just say it was restricted.’&lt;/p&gt;
    &lt;p&gt;Philosophical follies, such as doorknobs surreally attached to tree trunks, dot the unusual sculpture garden that Richard has proudly created out of a capacious paddock that’s part of the estate. In the middle of the pond sits an inaccessible table and chairs overhung with a metal fruit basket you also cannot reach. ‘It’s all about, you know, the unattainable.’ This modern take on the Tantalus myth strikes me as the perfect symbol for the avid collector, feverishly hunting down the final piece of a set, mourning the rarities that slipped through one’s fingers. The psychological make-up of the type emerged early on. Even as a Dulwich College scholarship boy, ‘I collected stamps rather more avidly than most.’ Later, at Bristol University, ‘I bought books initially to read, but the physical possession of having quite a lot, of having a substantial range of bookshelves, became important as a manifestation of knowledge and understanding and culture.’ Even now, he can find himself transfixed when, say, a history of signposts tumbles into his lap.&lt;/p&gt;
    &lt;p&gt;The physical demands of his job, combined with declining health, mean Richard ‘must face the facts of age’. With great reluctance, he is now selling his estate and collection, lock, stock and barrel, for around £1.5 million. His greatest fear is that the land, library and buildings get sold off bit by bit, ‘my life’s work just disappearing’. He is even prepared to play the role of éminence grise to the putative lucky buyer, sharing his contacts and experience.&lt;/p&gt;
    &lt;p&gt;But what about the keepers? Surely, there are a few titles he’d like to hold on to? Well, there’s his extensive collection of antiquarian books on Yorkshire; those on another great love, football (‘though the Philippines is pretty much the only country in the world that doesn’t have an interest’); books on the fluctuatingly fashionable Ruskin, as well as 18th- and 19th-century folding maps that the chin-stroking aesthete might have consulted himself while hiking in the Lakes. Oh, and let’s not forget the collection of 1750s–1870s books in their original drab boards or cloth. ‘Cheaper to buy at the time, because they were unbound, they are now valuable because of their fragility.’ The bookseller’s eyes sparkle.&lt;/p&gt;
    &lt;p&gt;To enquire about purchasing the property plus stock, ring Elaine Williams-Bird on 07798 818651 or email nellybirdpress@gmail.com&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45094692</guid></item><item><title>Steve Ballmer Interview</title><link>https://www.acquired.fm/episodes/the-steve-ballmer-interview</link><description>&lt;doc fingerprint="6519995f33e528bd"&gt;
  &lt;main&gt;
    &lt;p&gt;We sit down with Steve Ballmer, the legendary former Microsoft CEO and owner of the LA Clippers, for an epic conversation covering his 34 years at Microsoft. Steve listened to our Microsoft episodes and had some thoughts to share â and boy, did he deliver. Steve takes us point-by-point through the original IBM DOS deal that started everything, how he built Microsoft's enterprise business from scratch, and offers his candid reflections on missing mobile and search. We also cover the story behind âdevelopers, developers, developersâ, the complexities of his relationship with Bill Gates (including a year where they didn't speak), and why he ultimately decided to step down as CEO. Plus, we learn why Steve has held onto his Microsoft stock through it all â giving him arguably the best investment track record in the world over the last 10 years with his net worth growing from $20B to $130B since leaving. And of course, we couldn't resist also talking about his other passion: the Clippers and Intuit Dome. Hit play and get ready to experience the patented Steve Ballmer energy and fun on full display!&lt;lb/&gt;â&lt;/p&gt;
    &lt;p&gt;Sponsors:&lt;/p&gt;
    &lt;p&gt;Many thanks to our fantastic Summer â25 Season partners:&lt;/p&gt;
    &lt;p&gt;Links:&lt;/p&gt;
    &lt;p&gt;Sponsors:&lt;/p&gt;
    &lt;p&gt;Sponsors:&lt;/p&gt;
    &lt;p&gt;More Acquired:Â&lt;/p&gt;
    &lt;p&gt;Oops! Something went wrong while submitting the form&lt;/p&gt;
    &lt;p&gt;Transcript: (disclaimer: may contain unintentionally confusing, inaccurate and/or amusing transcription errors)&lt;/p&gt;
    &lt;p&gt;Ben: David, Steve gave us the signed Clippers jersey with the name Acquired on it. Thereâs only one jersey. What are we going to do about this?&lt;/p&gt;
    &lt;p&gt;David: Should we rock paper scissors for it? You know what? You keep it. Thereâs no Seattle basketball team. Keep it there up north.&lt;/p&gt;
    &lt;p&gt;Ben: All right. Itâll go in the Acquired museum north.&lt;/p&gt;
    &lt;p&gt;David: Great.&lt;/p&gt;
    &lt;p&gt;Ben: Perfect. All right, letâs do it.&lt;/p&gt;
    &lt;p&gt;David: Letâs do it.&lt;/p&gt;
    &lt;p&gt;Ben: Welcome to episode one of the Summer 2025 season of Acquired, the podcast about great companies and the stories and playbooks behind them. Iâm Ben Gilbert.&lt;/p&gt;
    &lt;p&gt;David: Iâm David Rosenthal.&lt;/p&gt;
    &lt;p&gt;Ben: And we are your hosts.&lt;/p&gt;
    &lt;p&gt;Steve Ballmer is, among other things, arguably the very best investor of the last 20 years. It sounds a little funny to frame it that way, but here are the numbers. In 2014 when Steve left Microsoft, his net worth was $20 billion, almost entirely comprised of Microsoft stock. Today, 11 years later, it is a staggering $130 billion according to Forbes.&lt;/p&gt;
    &lt;p&gt;It is incredibly rare to reach this stratospheric level when you are: (a) not the founder of the company, and (b) no longer CEO or even employed by the company. And all of this comes from just one investment decision. Just keep holding substantially all of his Microsoft stock.&lt;/p&gt;
    &lt;p&gt;David: Incredible. We chatted about it with him in the conversation to come.&lt;/p&gt;
    &lt;p&gt;Ben: Now, as most of you know, we did a big two-part Microsoft series last year on the history of the company up through when Steve transitioned the CEO role to Satya Nadella. Steve listened to those episodes and he had some thoughts that he wanted to share with his recollection of how things went down. Things like what made Microsoft so fabulously successful, what his missteps were as CEO.&lt;/p&gt;
    &lt;p&gt;We wanted to share that as a recorded conversation with all of you, so we set up our cameras and our mics at his philanthropy office, Ballmer Group, in Bellevue, Washington, and we pressed record. Weâll go into everything from the misses on mobile, search, social, the huge wins in enterprise and cloud.&lt;/p&gt;
    &lt;p&gt;Steve also reflects on his business lessons learned, he goes into why he stepped down as CEO when he did, and he talks about his relationship with Bill Gates over the years. Of course, we had to talk with him a little bit about the Clippers and the new arena that Steve built and personally owns too.&lt;/p&gt;
    &lt;p&gt;David: Intuit Dome, incredible place. A cathedral of basketball as Steve would put it.&lt;/p&gt;
    &lt;p&gt;Ben: Listeners, if you want to know every time an episode drops, check out our email list. Itâs the only place where we will share a hint of what our next episode will be. Weâll share episode corrections, updates, and little tidbits that we learn from all of you about previous episodes.&lt;/p&gt;
    &lt;p&gt;Come join the Slack to talk about this with us and the whole Acquired community, that is acquired.fm/slack, and the email list is acquired.fm/email. If you want more Acquired between our monthly episodes, check out ACQ2. We just released one with Zach Perret, the co-founder and CEO of Plaid.&lt;/p&gt;
    &lt;p&gt;David: And weâve got some banger ACQ2 episodes coming up.&lt;/p&gt;
    &lt;p&gt;Ben: Yes, we do. Well, as most of you know, we are doing a massive, massive live show at the 6000-seat Radio City Music hall in New York City on July 15th with our friends at J.P. Morgan Payments. There are just a few seats left, so get yours before they are gone at acquired.fm/nyc. The lineup for the night is going to be something very special and we cannot wait to see you there.&lt;/p&gt;
    &lt;p&gt;David: And speaking of, just like how we say every company has a story, every company story is powered by payments, and J.P. Morgan payments is a part of so many of their journeys from seed to IPO and beyond.&lt;/p&gt;
    &lt;p&gt;Ben: So with that, this show is not investment advice, David and I may have investments in the companies we discuss, and this show is for informational and entertainment purposes only. Onto our conversation with Steve Ballmer.&lt;/p&gt;
    &lt;p&gt;Well, Steve, first of all, I noticed you prepared some printed materials here for us. Listeners should know, we didnât ask for this in any way, but at 10:00 PM last night, you sent us a PowerPoint deck and said, I made you some slides. Sorry it got here so late. David and I are looking at each other like we didnât ask you to prepare for this. Thank you for the materials.&lt;/p&gt;
    &lt;p&gt;Steve: Oh, itâs just some stuff that Iâve used with thoughts about how businesses work. I think of this as a time to reflect on things Iâve learned primarily at Microsoft, but also the Clippers about business. I figured, eh, Iâll send them to you. And theyâre PowerPoint.&lt;/p&gt;
    &lt;p&gt;Ben: You mixed a few different templates.&lt;/p&gt;
    &lt;p&gt;Steve: Promotional opportunity.&lt;/p&gt;
    &lt;p&gt;David: Yeah, yeah.&lt;/p&gt;
    &lt;p&gt;Ben: Always a cheerleader.&lt;/p&gt;
    &lt;p&gt;David: Always.&lt;/p&gt;
    &lt;p&gt;Steve: There you go.&lt;/p&gt;
    &lt;p&gt;David: I think the word cheerleader is actually in the PowerPoint deck.&lt;/p&gt;
    &lt;p&gt;Ben: Yes, great.&lt;/p&gt;
    &lt;p&gt;David: Well, Steve, speaking of reflecting, we sit here today, Microsoft is the most valuable company in the world, almost $3.5 trillion in market cap. I think everybody would agree itâs an enterprise company, and thatâs largely thanks to you.&lt;/p&gt;
    &lt;p&gt;Ben: Itâs reasonable to call you the founder of Microsoftâs enterprise business. That is not a narrative that is often discussed. We wanted to ask you, how do you feel about the fact that it basically defines the business today?&lt;/p&gt;
    &lt;p&gt;Steve: Interesting. Very kind. Fathering something, I feel good about that. I think thereâs a lot of truth to that. Of course, there are many fathers to the enterprise business at Microsoft, and I feel both good and bad about it.&lt;/p&gt;
    &lt;p&gt;The truth is, Microsoft started out as a consumer company. We built a very important consumer business. That success translated into the opening to go build an enterprise business. One of my regrets is we lost the consumer muscle along the way. I think the ability to be ultra, ultra.&lt;/p&gt;
    &lt;p&gt;Weâre a great company. Microsoftâs a great company. But to have both of those muscles totally firing, if Iâd been able to sustain that consumer muscle, and I had some ideas about why that didnât happen, but the enterprise muscle, muy macho. It got very big and very strong. So Iâm very proud of that.&lt;/p&gt;
    &lt;p&gt;Itâs also funny when you say consumer and enterprise. What does it mean really to say enterprise? Sometimes it can sound just like backend stuff. The truth of the matter is, Microsoft Office/M365, whatever exactly itâs called today, is super important. It was the foundation for having permission to be in the enterprise, and yet itâs a product that sits right there in front of users.&lt;/p&gt;
    &lt;p&gt;The question is, do you think about users or consumer, and do you think about enterprise or do you think about IT? And then there are developers that span both. Thatâs my mental model. You have products that appeal to consumers that IT can handle, and a platform that lets developers build around those and based around those, whether theyâre building for users, users and IT, or in some instances just for IT people, because there are a lot of tools that are just for IT people.&lt;/p&gt;
    &lt;p&gt;Ben: Well, to contextualize all this, we want to go back almost all the way to the beginning, right around the time you joined Microsoft, and talk about Microsoftâs relationship with IBM.&lt;/p&gt;
    &lt;p&gt;Before the IBM PC and before DOS, can you catch listeners up who werenât around at that time, what was IBM in that era?&lt;/p&gt;
    &lt;p&gt;David: I think you called it to us, and when we were talking to you for research, the sun, the moon, and the stars.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, I did, I think. Well, itâs 1980 when I got here. The company started obviously in 1975. There were IBM computers and a couple of others. But literally, people would say thereâs IBM and the bunch. The bunch was Burroughsâ UNIVAC, NCR, Control Data, and Honeywell. But they were just the bunch.&lt;/p&gt;
    &lt;p&gt;IBM did the mainframe, and it did the software, and it did the service. It did everything in computing. Everything. Everything. Then you had this little upstart try again called Digital Equipment, very important in our story because Dave Cutler, who was the father of Windows NT, came from Digital Equipment. They were fighting, they were scrappy, they were mini computers, so smaller than a room, but definitely bigger than a PC, if you will.&lt;/p&gt;
    &lt;p&gt;All the initial Microsoft software was developed actually on DEC computers. Digital Equipment equals DEC, and DEC had a nice business, but it was a lot smaller than IBM. If IBM breathed, that was the direction the computer industry would go.&lt;/p&gt;
    &lt;p&gt;IBM was the subject of an antitrust lawsuit, shockingly in 1969, that didnât actually get settled (I think) to shortly after I got here in the term of Reagan. So 11 years theyâd been living because they were that big and bad and mighty.&lt;/p&gt;
    &lt;p&gt;Ben: And what was the result of that antitrust action? What did they have to do?&lt;/p&gt;
    &lt;p&gt;Steve: I donât remember. It may be when they had to unbundle. In fact, I think it was when they had to unbundle the operating system from the mainframe hardware, so people could build IBM-compatible mainframes.&lt;/p&gt;
    &lt;p&gt;Then one day, shortly after I got here, some guys from IBM call and they say, hey, can we come see you? Youâre going to have to sign an agreement that says you can use nothing we tell you, anything you tell us we can use.&lt;/p&gt;
    &lt;p&gt;These guys showed up, and they told us after we signed their agreement that they wanted to build a PC. They were hoping to get the operating system and some of our language software for it.&lt;/p&gt;
    &lt;p&gt;David: And they were coming to you for the language software?&lt;/p&gt;
    &lt;p&gt;Steve: No, they came to us for the operating system. Now why, youâd say. We werenât in the operating system business. We had a card called the CP/M SoftCard or the SoftCard for the Apple II. It was a card that plugged into an Apple II, that ran CP/M, not our operating system.&lt;/p&gt;
    &lt;p&gt;David: Gary Kildall.&lt;/p&gt;
    &lt;p&gt;Steve: Gary Kildall, Digital Research was the name of the company, but we had licensed it to put on this card that plugged in the Apple II. Somehow, IBM thought they could license CP/M. Even though it wasnât our product, they thought they could license it from us.&lt;/p&gt;
    &lt;p&gt;We said, no, no, no, but you can license our language software. But thereâre these guys down in Pacific Grove, California. Bill called Gary Kildall and said, there are some guys, they want to talk to you, theyâre important. Gary went down there and didnât sign the non-disclosure agreement. In the meantime, there was a company here in Seattle called Seattle Computer Products that had a little CP/M clone.&lt;/p&gt;
    &lt;p&gt;Ben: So the licensing of Microsoft DOS, which didnât even exist when IBM approached you about licensing some things, is the single greatest business deal in history. The licensing of that softwareâ&lt;/p&gt;
    &lt;p&gt;David: We made that contention on our episodes.&lt;/p&gt;
    &lt;p&gt;Ben: Well, I just think you look $3.5 trillion later at Microsoftâs market cap. This kickstarted it all.&lt;/p&gt;
    &lt;p&gt;Steve: It was pretty good. Literally good. There was a company that happened to be here in town, Paul Allen and I went down there, and we met with the founder who later came to work in Microsoft, a guy named Tim Patterson. I think we paid $45,000 or $49,000 for this operating system, because we told IBM no, no. We can take care of it.&lt;/p&gt;
    &lt;p&gt;There was a famous meeting amongst me, Paul, Bill, and this guy Kazuhiko Nishi, who ran our affiliate in Japan, where we were talking about this. There was a lot of, letâs just say, four letter words thrown around. Screw them. Screw them is five letters, but you get the drift. Screw them. Letâs just go get this operating system. Screw them. We can do this. Letâs go. That was the theme.&lt;/p&gt;
    &lt;p&gt;David: Kazu was a cowboy.&lt;/p&gt;
    &lt;p&gt;Steve: He was, yeah. Nishi, absolutely a cowboy. So we sold it to him, half of what we paid for it. We said, we can do this 10â20 times. Twenty times $21,000, $400,000 against $50,000 we paid for it. Pretty good deal. It was a little better than that as you said.&lt;/p&gt;
    &lt;p&gt;David: Talk us through the structure and how you guys thought about this. Because you did not make a lot of money directly from this deal.&lt;/p&gt;
    &lt;p&gt;Steve: Nope, we did not. Remember, the key thing was we didnât charge for the operating system on an ongoing basis. We charged for it one time. If you got a new version, we charged another time. We did the same thing for BASIC and everything else, because at the time you could think we were like a substitute for an R&amp;amp;D department, which means we were fixed price. It was only (I donât know) four or five years later that we actually switched to licensing per unit as opposed to just fixed feeâhere it is, pay us once, and weâre done.&lt;/p&gt;
    &lt;p&gt;David: But the ultimate thing that you guys negotiated was a non-exclusive deal. You could sell this operating system and your language interpreters, but also mainly the operating system to other manufacturers. This is IBM weâre talking about here. How on earth did youâ&lt;/p&gt;
    &lt;p&gt;Steve: But IBM wanted this. IBM were experimenting with a different approach. They had said, look. Instead of us building everything all custom, we want to use some industry standard parts, components because thatâll let us be more agile, et cetera.&lt;/p&gt;
    &lt;p&gt;They didnât come in, loath to any of this. They knew that was our business. They know that was Digital Researchâs business. They wanted to use an Intel part versus their own proprietary part. They didnât ask Intel to do them a custom part either.&lt;/p&gt;
    &lt;p&gt;The notion was, weâll move fast. Weâll get away from the IBM bureaucracy by taking this approach. I wouldnât say that was the hardest convincing, if you will in the story.&lt;/p&gt;
    &lt;p&gt;Ben: But what ended up happening after all these yearsâI imagine it only took a few years to see it play outâwas IBM sold a ton of IBM PCs, and DOS was the operation system, and then everybody else adopted DOS because all the application makers, all the software vendors were targeting DOS as the platform. So Microsoft accrued a huge amount of benefit.&lt;/p&gt;
    &lt;p&gt;Steve: You became the point of integration.&lt;/p&gt;
    &lt;p&gt;Ben: Yeah, and the old world IBM wouldâve accrued that platform benefit. Did they see theâ&lt;/p&gt;
    &lt;p&gt;Steve: Well they were selling a lot of computers and making profit also. They wouldâve been making more profit than we were at the time just the way pricing worked.&lt;/p&gt;
    &lt;p&gt;There was a little twisty in here though I should throw at you if youâre curious. These things had something called the BIOS (Basic Input/Output System), which was the lowest, lowest layer firmware, first level software built into the hardware. IBM had its own BIOS, and some applications became BIOS-dependent.&lt;/p&gt;
    &lt;p&gt;Then the question is, who was going to do an IBM-compatible BIOS? We werenât going to get into that game. We didnât want to have that intellectual property, other arguments, but there were people then, that was important.&lt;/p&gt;
    &lt;p&gt;David: Compaq ultimately became the big company.&lt;/p&gt;
    &lt;p&gt;Steve: Compaq became the big company. I donât remember whether they wrote their own IBM-compatible BIOS, but they were the first one to be IBM-compatible. There were plenty of people who ran MS-DOS who were actually not IBM-compatible because they didnât do a compatible BIOS.&lt;/p&gt;
    &lt;p&gt;Ben: I see. IBM thought, oh weâve got some protection from Microsoft, disintermediating us from all the developers and all the potential customers, because targeting our BIOS is going to be important and unreplicable.&lt;/p&gt;
    &lt;p&gt;Steve: The one thing you have to remember is we live in the modern world now. When you say all the developers, that wasnât a long list. Remember, there was no software industry to speak of when we got started.&lt;/p&gt;
    &lt;p&gt;David: This is the creation of the software industry.&lt;/p&gt;
    &lt;p&gt;Steve: There were a couple of software companies that made packages for IBM mainframes, but almost everything was custom. Really, I would say weâfew other companies, but I would say weâdefined what a modern software business looked like. The notion that there could be lots of developers and yeah, there were some, but itâs not like we think today. There were developers doing lots of standard applications. No. There was no licensing model, no business model. Nothing. VisiCalc was around.&lt;/p&gt;
    &lt;p&gt;Ben: So it wouldâve been counterintuitive or required too many mental hops to think, weâre IBM. Wait, are we giving away the future by allowing someone to distribute a wide operating system that ends up being the target that everyone standardizes on? Which eventually created all of modern Microsoft.&lt;/p&gt;
    &lt;p&gt;Steve: Exactly. You canât blame them because there was nothing to build off of, but yeah. One of the things my little PowerPoint here says is luck is important in the creation of great companies. It is. A lot of people always say weâre masters of the universe. We figure everything out. We never have any luck. Itâs because weâre so talented. Sure, theyâre talented people and hardworking people. But most people have a little luck in their story, and this was our big luck.&lt;/p&gt;
    &lt;p&gt;David: Clearly, but when you were negotiating this, signing it, and then those first couple of years before the clone market really took off, did you think that this could happen?&lt;/p&gt;
    &lt;p&gt;Steve: No. I canât remember what year it wouldâve been, but Andy Grove who was running Intel at the time said, yeah, pretty soon weâll be selling 100 million PCs a year. I donât know. Sometime in the 80s. I think it might have even been in the 90s. Bill and I laughed and said, ah, thatâs not going to happen.&lt;/p&gt;
    &lt;p&gt;We invested big time and if it did happen, we said thatâs great, weâre not going to underinvest. But we thought, ah, heâs crazy. This market will never grow like that. I would say we classically underforecast, that was our tendency.&lt;/p&gt;
    &lt;p&gt;Ben: So the deal gets signed with IBM, you end up shipping DOS, it goes on the IBM PC, itâs selling like gangbusters. When did you start to realize, whoa, what we have here is actually leverage over the ecosystem. We actually are becoming the important layer that ties this whole computing world together with the operating system?&lt;/p&gt;
    &lt;p&gt;David: The personal computing layer.&lt;/p&gt;
    &lt;p&gt;Steve: Oh, I think by the mid- to late-80s. You make it sound very strong. No, we didnât feel very strong. There was IBM man. IBM was still the sun, the moon, and the stars. That didnât change.&lt;/p&gt;
    &lt;p&gt;I would say we didnât drop that theory well. Well, into the 2000s. Into the 2000s, Lotus Notes was coming for us, and that was mid-90s and and beyond. But maybe you could say late, but we werenât an enterprise company. If you looked at the enterprise, the enterprise was stillâ¦&lt;/p&gt;
    &lt;p&gt;David: IBM.&lt;/p&gt;
    &lt;p&gt;Steve: IBM. We used to say we had to hang on to IBM, that if we ever let go they might trample us. We called them the bear.&lt;/p&gt;
    &lt;p&gt;David: Itâs called this riding the bear, yeah.&lt;/p&gt;
    &lt;p&gt;Steve: Ride the bear. You had to stay on. Then of course graphical user interface. Itâs coming out of Xerox Park at the time, Appleâs doing their thing, and thatâs another disruption, could blow everything up. I would say no sense of confidence about controlling the ecosystem well into the 90s before I think any of that, or at least for me.&lt;/p&gt;
    &lt;p&gt;Ben: When did you start to feel like weâre getting out from under the thumb of IBM? And maybe walk us through a little bit the OS/2-Windows world.&lt;/p&gt;
    &lt;p&gt;Steve: Weâve been staying with IBM, they decided they wanted to build something that was sort of their operating system and sort of not. This is 1982â1983. We and they would collectively build part of it. We would be able to license it to others. They would build a value add layer that was a database and a 3270 emulator. Crazy, just saying now.&lt;/p&gt;
    &lt;p&gt;We were going to work on the operating system and what was called Presentation Manager, called that the graphical user interface, and they were going to have rights equivalent to ownership in the code we wrote.&lt;/p&gt;
    &lt;p&gt;Ben: This sounds so convoluted.&lt;/p&gt;
    &lt;p&gt;Steve: It was so convoluted. Man, there was a time when I made 16 trips to the East Coast in 16 weeks, most of them to South Florida, a couple of them to New York, leave on the red-eye, the Delta DASH flight at around 11:00 PM, get into Atlanta around 5:00 AM, get the flight to West Palm Beach at about 7:00 AM, get in and be able to be at a meeting at 9:00 AM at IBM, and then work all day, catch the 7:00 PM flight home, be here about 10:30 PM or 11:00 PM. Twenty-four hours, down and back.&lt;/p&gt;
    &lt;p&gt;If youâre building something together, remember thereâs no real email at the time. We were literally shipping disks back and forth. And then they decided they were going to do the Presentation Manager piece in England. There were also then a lot of flights to England. And then Texas is where the database and communication [...].&lt;/p&gt;
    &lt;p&gt;David: This sounds so IBM.&lt;/p&gt;
    &lt;p&gt;Ben: This sounds like Boeing.&lt;/p&gt;
    &lt;p&gt;Steve: It was the joint development agreement. It was the price of staying involved with IBM, and it was convoluted. For speed of action, we kept going on Windows, which we had started.&lt;/p&gt;
    &lt;p&gt;David: For listeners, everything weâre talking about is OS/2, the operating system that basically never comes to.&lt;/p&gt;
    &lt;p&gt;Steve: OS/2 and there was OS/2 Extended Edition or something, which it had their edition.&lt;/p&gt;
    &lt;p&gt;David: And Windows was your Plan B. It was like your side.&lt;/p&gt;
    &lt;p&gt;Steve: No, Windows was our plan. They wanted to do this new operating system. We convinced them, you got to have a graphical user interface. We tried to sell them Windows and they were resisting.&lt;/p&gt;
    &lt;p&gt;Ben: Okay, so it almost seems like youâre humoring IBM at this point with yeah, letâs do OS/2 together. We really think the futureâs Windows.&lt;/p&gt;
    &lt;p&gt;Steve: Humor.&lt;/p&gt;
    &lt;p&gt;Ben: Itâs more than lip service.&lt;/p&gt;
    &lt;p&gt;Steve: My job was managing (by then) system software. Iâd shipped when Iâd been the development manager for Windows 1.0.&lt;/p&gt;
    &lt;p&gt;David: Oh, the great videos of you from the Windows 1.0 launch are so good.&lt;/p&gt;
    &lt;p&gt;Steve: But no, thatâs the sales side. I actually managed the engineers because the guy who was doing it wasnât being successful, and we had to ship the thing. Thatâs when I learned some about engineering management from the engineers, basically, had to teach me to be effective.&lt;/p&gt;
    &lt;p&gt;Weâre trying to keep with OS/2, Billâs very frustrated with IBM. Iâm frustrated, but I know my job is to ride the bear. Billâs pushing Windows hard, but we still suspected OS/2 could be the winner because it came from IBM. But we couldnât just stop for three or four years. We couldnât make the mistake we made in the thing that became Vista.&lt;/p&gt;
    &lt;p&gt;We kept going with Windows, we kept going with OS/2, and then May 1990, they come along and shoot us. I was out running with my wife. I stopped.&lt;/p&gt;
    &lt;p&gt;David: Wait, IBM shot you?&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, they divorced us. They threw us out.&lt;/p&gt;
    &lt;p&gt;David: I thought the story was Windows was gathering strength, and you all thought maybe we can step out from the little brother.&lt;/p&gt;
    &lt;p&gt;Steve: No.&lt;/p&gt;
    &lt;p&gt;David: They came after you?&lt;/p&gt;
    &lt;p&gt;Steve: They had a new leader by then, a guy named Jim Cannavino. He was getting frustrated with us because we were still selling Windows. We were still promoting Windows.&lt;/p&gt;
    &lt;p&gt;This was our first antitrust problem. I donât know if you guys know this. The FTC at the time thought we and IBM were working to divide the market because we had done some positioningâwhatâs Windows good for, whatâs OS/2 good for. We and IBM had done that, and then they said, no, you guys are colluding. Thatâs when we first got attention from antitrust authority.&lt;/p&gt;
    &lt;p&gt;Ben: This is even before the per processor licensing issue.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. That came later. That came with the DOJ. This was an FTC case and they started it in (I think) 1990, maybe 1989, as we were getting our divorce. My wife and I were remodeling our house. We were living in a condo. We stopped on a run, used a restroom or something. I pick up the Wall Street Journal and I read that IBMâs divorcing us.&lt;/p&gt;
    &lt;p&gt;David: All right. Listeners, now is a great time to thank our friends at J.P. Morgan Payments. You almost certainly have seen Steveâs famous 1999 âdevelopers, developers, developersâ chant, which we will talk about with him later in the episode. The ethos, though, of focusing on developers was valid when he said it in 1999 and still holds true today.&lt;/p&gt;
    &lt;p&gt;Like Steve, J.P. Morgan Payments recognizes that supporting developers is a long-term investment. Weâve talked about the $17 billion that J.P. Morgan invests in technology and R&amp;amp;D, and for payments. That means dedicated teams focused on making developersâ lives easier.&lt;/p&gt;
    &lt;p&gt;Ben: Last year, we discussed J.P. Morgan payments developer portal. At a high level, their platform essentially empowers developers to operate securely while abstracting away the complexities of global payments.&lt;/p&gt;
    &lt;p&gt;If you look at the suite of tools available on that platform, the takeaway is J.P. Morgan has continued to roll out more and more technical solutions to effectively accept, manage, and send payments on a global scale. Their APIs come with all the technical documentation youâd expect with detailed testing guides and explaining payments concepts to build your application as you scale your business.&lt;/p&gt;
    &lt;p&gt;David: Letâs say you work at (say) an e-commerce company, for example. You need to restock your products, but your vendor is based in another country. Before any transaction happens, youâd want to use the validation services API to verify account ownership, and ensure that your payment is directed to the correct vendor. Then youâve got to pay them in their local currency and you donât have time to evaluate multiple solutions and stitch together various APIs. So J.P. Morganâs single global payments API can help you take care of all that, including multiple payment rails and methods easily.&lt;/p&gt;
    &lt;p&gt;Ben: And thatâs just one use case. Developers across industries traditionally had to choose between the innovation and flexibility of a FinTech, and the security and scale of a global bank. J.P. Morgan Payments is on a mission to eliminate that choice and offer you both.&lt;/p&gt;
    &lt;p&gt;If youâre a developer working within a FinTech or looking to embed payments within your software, head on over to jpmorgan.com/acquired to learn more about their ever-growing list of APIs.&lt;/p&gt;
    &lt;p&gt;If any listeners remember the meetup that we did after our Chase Center show, weâre actually going to do it again. Weâre planning another meetup the day after Radio City on the 16th. We will share more details soon in the Slack community, but wanted to give folks a heads up in case you were planning for travel, evening of July 16th. A great meetup with our friends at J.P. Morgan Payments.&lt;/p&gt;
    &lt;p&gt;Steve: I pick up the Wall Street Journal and they read that IBMâs divorcing us.&lt;/p&gt;
    &lt;p&gt;Ben: What does that mean? Walking away from OS/2 collaboration?&lt;/p&gt;
    &lt;p&gt;Steve: Yes.&lt;/p&gt;
    &lt;p&gt;David: Basically they kick you out, kick Microsoft out, said weâre taking OS/2 in-house.&lt;/p&gt;
    &lt;p&gt;Steve: Exactly.&lt;/p&gt;
    &lt;p&gt;Ben: So youâre sitting there. Windows isnât powerful Windows yet. Windows is this fledgling idea.&lt;/p&gt;
    &lt;p&gt;Steve: We still had something called the 640K barrier. You couldnât speak to more than 640K of memory. We didnât break the 640K barrier until (I think) Windows 3.1, which I want to say was 1991 or 1992.&lt;/p&gt;
    &lt;p&gt;Ben: So youâre on this run, you see IBM is divorcing us. You donât really have confidence in Windows yet. What are you feeling and what do you think the pass is possible?&lt;/p&gt;
    &lt;p&gt;Steve: Mr. Wizard. Whoa. Shoot. Oh my God. We were so, you could say energized if you like. Scared also works. Itâs like, oh my God. Now we have to confront the bear.&lt;/p&gt;
    &lt;p&gt;David: Youâre already a billion-dollar-business at this point. You end 1992 at $2.8 billion in revenue.&lt;/p&gt;
    &lt;p&gt;Steve: Now IBM, but still.&lt;/p&gt;
    &lt;p&gt;David: But youâre still a pipsqueak.&lt;/p&gt;
    &lt;p&gt;Steve: Weâre still pipsqueak to IBM. And remember, we have no enterprise presence. IBM has all dominant enterprise presence.&lt;/p&gt;
    &lt;p&gt;Ben: Whoâs using Windows and how are you selling to them at this point?&lt;/p&gt;
    &lt;p&gt;Steve: Interesting. Single copies. Some hobbyists and end users. Somebody who says, hey, I really want to use a spreadsheet. And a lot of users in enterprises. It wasnât going through IT. Youâd have a user that would buy a PC on the expense account, probably for the department, buy a copy of Windows, buy a copy of Excel, at an Egghead Softwareâwas a software retailer at the timeâbring them in and use them.&lt;/p&gt;
    &lt;p&gt;Then IT started to get nervous about that. We knew most of the copies, not most, but many of the copies were winding up in businesses. What the hell? IBMâs going to stomp us like a bug.&lt;/p&gt;
    &lt;p&gt;David: Given an assumption that if IBM wants to stomp out this happening, itâs going to happen. If we want a future, we got to play with them.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. Thatâs why we were âriding the bearâ the whole time because theyâd stomp us out and they divorce us in 1990. Then we say, oh my God.&lt;/p&gt;
    &lt;p&gt;David: So at this point, your business, even though itâs a billion-plus scale, itâs selling to retailers to sell copies of softwareâDOS, Windows, languages, apps.&lt;/p&gt;
    &lt;p&gt;Steve: Not DOS. DOS was always sold toâ¦&lt;/p&gt;
    &lt;p&gt;David: OEM?&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. Not always, but so much the lionâs share, itâs worth saying it, was only sold because you needed a BIOS, remember? You needed a BIOS, so you had to have the hardware vendor build the BIOS into the machine basically.&lt;/p&gt;
    &lt;p&gt;David: So youâve got that. The OEM business, which was alreadyâ&lt;/p&gt;
    &lt;p&gt;Steve: The OEM business was the biggest part of the business. Then we had this retail business, and there was no notion of enterprise licensing.&lt;/p&gt;
    &lt;p&gt;David: Youâve got no CIO relationships, no enterprise agreement.&lt;/p&gt;
    &lt;p&gt;Steve: We had a couple of CIO relationships. The Air Force was the first big Windows customer.&lt;/p&gt;
    &lt;p&gt;Ben: Your first enterprise customer was government?&lt;/p&gt;
    &lt;p&gt;Steve: Our first big Windows customer, at least as I remember it, was the US Air Force, and they were buying single copies of Windows. When you say government, there are really two governments in this country. Thereâs government and thereâs the military. The military is a much more disciplined, advanced user of IT. Theyâre just better. Theyâre more professionally run than most parts of government. So yeah, it was the Air Force.&lt;/p&gt;
    &lt;p&gt;David: Youâve got a little bit, butâ¦&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, we had one or two customers just to prove we could actually serve big customers.&lt;/p&gt;
    &lt;p&gt;David: As we understand it, you had this realization at this point. Once the divorce happens, well Iâm going to go figure out how to do what IBM does. You personally.&lt;/p&gt;
    &lt;p&gt;Ben: To put a finer point on it, the thing that we said on our episode, and Iâm curious if itâs true or not, is this was not Billâs passion area, and you raised your hand and said, Iâll go figure out enterprise sales.&lt;/p&gt;
    &lt;p&gt;Steve: Oh yeah. Thatâs for sure true. Bill had passions a lot of places, but heâd say the apps group and what Windows could deliver to the apps quite appropriately, Iâd say thatâs where a lot of Billâs brain cycles went.&lt;/p&gt;
    &lt;p&gt;I had also hired Dave Cutler. Dave Cutler had been the architect of the VMS Operating System for Digital Equipment, we had DOS and Windows, and when we were talking to Cutler about coming here, he says, I donât want to work any toy operating systems. I had to say to Dave, good thing, because we have a toy operating system.&lt;/p&gt;
    &lt;p&gt;But Dave is the key to getting us there. We said, look. You got to build an operating system whose API looks like Windows and whose user interface looks like Windows.&lt;/p&gt;
    &lt;p&gt;Ben: So developers are can be familiar with it and write apps for it.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. You might make some changes because you have to, but itâs got to be a robust operating system. Itâs got to have a secure kernel. Itâs got to have all of these things.&lt;/p&gt;
    &lt;p&gt;Ben: The product set that you had wasnât really enterprise grade yet.&lt;/p&gt;
    &lt;p&gt;Steve: No, we had a joint development agreement, a joint agreement on LAN manager with a company called 3Com. It wasnât all our stuff. We had a development agreement with a company called Sybase to do the SQL database, because we were trying to figure out all these pieces IBM would have, and we didnât have any of that.&lt;/p&gt;
    &lt;p&gt;Ben: An operating system alone is not going to do it. You need all these other components.&lt;/p&gt;
    &lt;p&gt;Steve: And you want to have backend infrastructure. We started scrambling on that in the 80s. We had all these infrastructure pieces that we had to build if we wanted to sell to (Iâll say) business customers. When you say enterprises, sometimes people think very large companies, but we couldnât sell to companies of 20 people without some of this stuff, or 50 people.&lt;/p&gt;
    &lt;p&gt;David: You talk a lot now about this management concept of building muscle. Is this where this came from of you should always be, you used the phrase in the weight room, building muscle ahead of what you need. Were you and Bill thinking this way in the 80s of, hey, we need to be building up this muscle across all parts of computing and business computing?&lt;/p&gt;
    &lt;p&gt;Steve: Well, Paul Allen, Paulâs the key. Paul is the one who said Bill said weâre never going to be a hardware company. When the Altair came out, the first real microprocessor-based computer, Paul says, okay, letâs write all the software that these things will ever need.&lt;/p&gt;
    &lt;p&gt;Bill and I had a lot of the execution around that, but that was the push. Paul was cracking on me in the early 80s to start building an apps group. Come on, Steve. Come on, Steve.&lt;/p&gt;
    &lt;p&gt;Ben: Itâs not just systems. We need to have applications also. Any code that executes on a microprocessor, we should have a player in that market.&lt;/p&gt;
    &lt;p&gt;Steve: And there was a VisiCalc spreadsheet. Come on, Steve, Word Processor. Come on, come on, come on. Letâs get the talent. Letâs get going. We were doing mostly college hiring at the time, so okay. Then we met this guy Simonyi, whoâd been at Xerox PARC.&lt;/p&gt;
    &lt;p&gt;Ben: Charles Simonyi.&lt;/p&gt;
    &lt;p&gt;Steve: Charles Simonyi, exactly. We met him through a mutual friend at 3Com corporation whoâd been at PARC, and he really was the first leader of the apps business. But we licensed. We worked with other people the way IBM worked with us.&lt;/p&gt;
    &lt;p&gt;We went to Sybase and 3Com and letâs work together. It wasnât exactly a JDA (joint development agreement), but we worked with those guys. The analogy now is a little bit Microsoft working with OpenAI. When the big company works with the new company, how does that all play out over time? But I took over system software in 1984, so thatâs when weâre starting all this stuff. You could say I was a little bit more enterprisey.&lt;/p&gt;
    &lt;p&gt;Ben: Iâm looking at your chart here that you made for us. Youâve got 1992â1998 titled lift-off, and thatâs after the era where you talk about enterprise start.&lt;/p&gt;
    &lt;p&gt;David: And you have your role switching from your role as OS division in the previous era to sales.&lt;/p&gt;
    &lt;p&gt;Steve: The lift-off there though is mostly on Windows and applications. The lift-off isnât really enterprise. It was not until the late-2000s. People would say that you guys might find this funny or maybe you even know it. Customers say youâre not an enterprise company. Youâre not an enterprise company.&lt;/p&gt;
    &lt;p&gt;Ben: As late as when?&lt;/p&gt;
    &lt;p&gt;Steve: Oh, late 2000s.&lt;/p&gt;
    &lt;p&gt;Ben: Really?&lt;/p&gt;
    &lt;p&gt;Steve: Absolutely. Youâre not enterprise-grade, youâre not enterprise-ready. Oh, I heard that so much.&lt;/p&gt;
    &lt;p&gt;Ben: And in 2005.&lt;/p&gt;
    &lt;p&gt;Steve: You had Oracle out there. Remember, there were still mainframes and mini computers. Those things were enterprise-ready. IBM had product, still. You didnât have enterprise support. Our licensing, we had to evolve in the early 90s and then again in the late 90s. No, we didnât have those things. So no, we werenât an enterprise software company.&lt;/p&gt;
    &lt;p&gt;Ben: Thatâs so interesting.&lt;/p&gt;
    &lt;p&gt;Steve: Until it was late 2000s. Certainly, it wasnât before 2005. It wasnât at the beginning of my tenure. We were still trying to prove that we were an enterprise company. Now, I just find it cuckoo that all Microsoft is characterized as an enterprise company, which Iâm not.&lt;/p&gt;
    &lt;p&gt;I think itâs more complicated than that, but Iâm not going to say that thatâs not the primary muscle. For sure it is, but me, the company, I was hell bent and determined to prove we were an enterprise company.&lt;/p&gt;
    &lt;p&gt;Ben: Why was that? Letâs call it 1992, 1993, 1994. Why did you feel itâs so important for us to attack that market?&lt;/p&gt;
    &lt;p&gt;Steve: Easy. Because thatâs where IBM could squish us like a bug. If we couldnât sell our stuff to businesses, only to consumers, we knew that by then weâd only get so far because enterprises wanted some features. Enterprise donât like, okay you can go to computer land and buy a few copies.&lt;/p&gt;
    &lt;p&gt;David: And the consumer market, weâre pre-mobile. So pre-mobile, the consumer market, pre-internet, itâs big, but itâs nowhere near IBMâs market in the enterprise market.&lt;/p&gt;
    &lt;p&gt;Steve: By revenue. No, for sure not.&lt;/p&gt;
    &lt;p&gt;Ben: Weâve talked a lot about the products. Letâs talk about the go-to market motion and this invention of the enterprise agreement. What are the key pillars that you came up with for the enterprise agreement and why did they exist?&lt;/p&gt;
    &lt;p&gt;Steve: Our first software pricing packaging model for the enterprise was not the enterprise agreement. First it was we sold you disks. Second, we came up with this notion of what we called select licensing. You could make your own copies. You just report how many copies you sold.&lt;/p&gt;
    &lt;p&gt;David: Sounds rife with challenges here.&lt;/p&gt;
    &lt;p&gt;Steve: You tell us how many copies, and just pay us what you did.&lt;/p&gt;
    &lt;p&gt;David: The enterprise honor system.&lt;/p&gt;
    &lt;p&gt;Ben: Astonishing. And thatâs of Windows, thatâs of Office.&lt;/p&gt;
    &lt;p&gt;Steve: Windows, typically, by then, came with the hardware.&lt;/p&gt;
    &lt;p&gt;Ben: You were mostly using the OEM channel.&lt;/p&gt;
    &lt;p&gt;Steve: For Windows? Yeah. Even to this day, upgrades and stuff are sold direct to enterprises, but basic computer that comes to an enterprise would have the operating system license to the OEM. We were on, you can call it the honor system, but we just couldnât make people buy disks from us or CDs. Enterprises didnât like that, so we had this thing called select.&lt;/p&gt;
    &lt;p&gt;Select had two problems with it. Number one, very hard to copies of software you print. And number two problem, we were selling upgrades and new licenses. Upgrades were less than half the price of new licenses. What does that mean? The company was headed to a world where its revenue was half of its existing revenue.&lt;/p&gt;
    &lt;p&gt;Ben: Unless youâre growing new customers, new logos, a phenomenal clip.&lt;/p&gt;
    &lt;p&gt;Steve: So it was a real problem-looking thing. Bill and I, weâd always dream of this thing where you get some recurring revenue, and then we came up to say, okay, well why donât we just do a license that you didnât have to count the number of licenses you printed? Just the number of computers. Made life simpler.&lt;/p&gt;
    &lt;p&gt;We said, instead of doing sell you a new license and then God knows when we would sell you another upgrade or whatever, weâll do something that just says, hey look. You sign up for three years, you pay us per machine, and you just pay us the same amount of money each year for three years.&lt;/p&gt;
    &lt;p&gt;It let us jimmy-up the price of the upgrade. We solved the upgrade price problem, and we solved the difficulty of administration problem. And that was the enterprise agreement.&lt;/p&gt;
    &lt;p&gt;David: Was it from the beginning of you get everything?&lt;/p&gt;
    &lt;p&gt;Steve: No, that was a special enterprise agreement. You got all the upgrades during that three year period to the products you licensed.&lt;/p&gt;
    &lt;p&gt;David: But you were still picking and choosing, oh I want Excel. Oh I want Server.&lt;/p&gt;
    &lt;p&gt;Steve: You could. We were encouraging you to buy Office. But we also had this all-you-can-eat license. I canât remember what we called that, but basically then I think you counted the number of employees and you could use any of our software for anybody.&lt;/p&gt;
    &lt;p&gt;We just tried to go simpler and simpler and simpler in the administration. Recurring revenue that didnât decline over time. As much as you wanted to eat, the upgrades, everything. We did want essentially what we have now, which is a recurring services business. But we didnât have the cloud. We werenât delivering things. But weâre already on that path. I think we started the Energizer. You guys mentioned what we do with Energizer, which is where we wanted to run their IT department.&lt;/p&gt;
    &lt;p&gt;Ben: They were a pilot customer for this concept.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, they were the first customer. I talked them into it. This is beyond the enterprise agreement. This is where we actually want to run their stuff because we did want to get to this recurring revenue thing.&lt;/p&gt;
    &lt;p&gt;Ben: And David was referring to this concept earlier. We talked about it a lot in our Microsoft episode and then on our Epic episode. This genius idea of you will get included in your license, a whole bunch of software, even if youâre not ready to use it yet.&lt;/p&gt;
    &lt;p&gt;If at any point youâre considering buying this different software package from this other vendor who just make this one thing, then they look in their paperwork and theyâre like, oh wait, actually we get that from Microsoft for free as a part of the thing weâre already doing. Letâs just do that.&lt;/p&gt;
    &lt;p&gt;As long as youâre developing a lot of software every year, you can indefinitely just make more and more and more stuff so that your customers donât need to look elsewhere as they expand their software needs. How did that come about?&lt;/p&gt;
    &lt;p&gt;Steve: Letâs start with Office. When weâre selling Excel, Word, PowerPoint, and then we put these things together, people would complain. We didnât always sell Office because people say our users donât use Excel. We donât want Excel included. Okay, we had a licensing option for you.&lt;/p&gt;
    &lt;p&gt;But it became easier and easier. People then departments. Departments always, were in-running IT at the time. Still now, I think. We did sell you things that you might not be using. But it also, if youâre trying the departments, we already got it all for you. You may want something different than this department, but we got it all for you. That was an attractive thing for people.&lt;/p&gt;
    &lt;p&gt;Thereâs an insurance aspect that I learned that IT people really want. They want peace of mind. Thatâs part of what it means to be an enterprise. I want to make sure everythingâs secure. I want to make sure that everything is well-managed. I want to make sure everything is well paid for. I want to make sure thereâs somebody to call if things go wrong. I want to make sure I bought everything. I donât want to look bad because either I paid too much or I have holes in what I bought for people.&lt;/p&gt;
    &lt;p&gt;I view this, and I probably evolved my view to this over time, when you sell the enterprise, you have to provide peace of mind, which is like an insurance policy. Buying more than you might be using or some users are using. Itâs an insurance policy.&lt;/p&gt;
    &lt;p&gt;Ben: And software has zero marginal cost and zero distribution cost. So weâre happy to mail you a few more discs if you need them.&lt;/p&gt;
    &lt;p&gt;Steve: But we werenât even mailing discs by then, because we had the enterprise agreement in place.&lt;/p&gt;
    &lt;p&gt;David: At a certain point along the way, you get to, well I want to say the holy trinity, but I think there are more than three pieces of this. But the real killer suite in enterprises, which is Windows, Windows Server, Active Directory, Exchange, Office, and all of these pieces of software, all work in orchestration to run your enterprise. Your users, they do their email on Outlook, which is part of Office which runs on Windows, which uses Exchange, which uses Active Directory, which is aâ&lt;/p&gt;
    &lt;p&gt;Ben: SQL server.&lt;/p&gt;
    &lt;p&gt;David: All these things. How long did it take to get to that point? To my mind, thatâs when the enterprise is firing on all cylinders here.&lt;/p&gt;
    &lt;p&gt;Steve: That really comes with email boom. Email boom is late 90s/beginning of 2000s.&lt;/p&gt;
    &lt;p&gt;Ben: Because email is the cart that pulled the whole thing.&lt;/p&gt;
    &lt;p&gt;Steve: Oh yeah. No, itâs the locomotive.&lt;/p&gt;
    &lt;p&gt;Ben: Enterprises wanted email.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. When Accenture became a company, we started a joint venture called Avanade to help do essentially the holy trinity to help install. We needed support infrastructure and partners who knew how to set up the servers, provision email, put all that in. We needed partners and we didnât have enough capacity. Thatâs why we started this thing, Avanade, which is big, big company at this stage, with Accenture, and that was in the 2000s. I went on the board of Accenture.&lt;/p&gt;
    &lt;p&gt;Ben: But all this to say, the way you could pitch an enterprise is rather than any of these other value propositionsâDavid listed off a whole bunch of softwareâyou could say you guys want some email. We have the most reliable, robust way for your enterprise to adopt email, and itâs going to come with all this other great stuff.&lt;/p&gt;
    &lt;p&gt;Steve: And everything was nicely integrated because remember, you needed Active Directory to manage file shares, to manage printers. It was used for a lot of different things. It really did all come together as the integrated proposition. You guys made fun of the notion that we called all that stuff the BackOffice as if that was [...]. No, no, no. Itâs so wrong. So wrong about that.&lt;/p&gt;
    &lt;p&gt;David: We took that as a signal that Bill just didnât care about this stuff.&lt;/p&gt;
    &lt;p&gt;Steve: Oh, completely not right. I wanted to call it the BackOffice because you needed to buy the Office in the BackOffice. The user, the consumer saw the Office and the BackOffice were the things that were in the server rooms/data centers. But a lot of them were server rooms. Itâs the same thing these days. but cloudized.&lt;/p&gt;
    &lt;p&gt;Ben: All right. As we were preparing for this, there are a bunch of big questions that we just desperately want your take on. A big one is around one of your most iconic moments. 1999, the developers, developers, developers speech.&lt;/p&gt;
    &lt;p&gt;Iâve probably watched this clip 20â30 times, almost everyone listening has seen this clip. What is missing from this clip is all the context around Microsoft and whatâs going on in the world at this time, and what you need to accomplish as a leader of this company. Help us set that stage and then understand why you went on stage that way.&lt;/p&gt;
    &lt;p&gt;Steve: Well remember, by this time weâre not through our IBM competition, and we got Linux competition now on the docket because Linux is competing with Windows Server. Linux is competing with Windows, and thereâs a thing called OpenOffice, open source software for office thatâs competing with Office. We have all these things going on. We havenât beat Lotus Notes yet.&lt;/p&gt;
    &lt;p&gt;David: And youâve got antitrust count.&lt;/p&gt;
    &lt;p&gt;Steve: We have antitrust issues (of course) by then.&lt;/p&gt;
    &lt;p&gt;Ben: The culmination of the DOJ suit is happening within 12 months of this moment.&lt;/p&gt;
    &lt;p&gt;Steve: Correct. But itâs clear in all these competitions, the thing you need are third-parties that reinforce what youâve gotâadd value around what youâve got. I could say run on your platform, but Iâll come to that later if you want to what a platform is and isnât, if you want to do that. Itâs interesting, I think.&lt;/p&gt;
    &lt;p&gt;Ben: Yeah, letâs do it.&lt;/p&gt;
    &lt;p&gt;Steve: Particularly since everythingâs called a platform these days. But anyway.&lt;/p&gt;
    &lt;p&gt;Ben: Letâs take an aside here. Give us your definition of a platform.&lt;/p&gt;
    &lt;p&gt;Steve: You could call it anything that is extensible, and itâs the extensibility that âmakes it a platform,â because youâre going to get people to extend the value you add.&lt;/p&gt;
    &lt;p&gt;The question and the reason thatâs important is that applications are platforms too. Not just developer platforms. When people say that they might mean Azure, AWS, or in the old days, Windows or Windows Server or Unix then Linux. Yes, those are platforms. You extend them.&lt;/p&gt;
    &lt;p&gt;But you also extend Office. You add value partners plug in. They write applications. They use the file formats. All of this stuff is platform. Part of the issue (I think) for Microsoft is if you see yourself as just a platform company, platforms need apps. You want to have the top first-party app that runs on your platform. Otherwise your platform canât get good.&lt;/p&gt;
    &lt;p&gt;Office was the best first-party app on Windows, and thatâs how things get good. Outlook was the best first-party app on exchange. There were other clients at one point, by the way. So you really do want extensibility in your apps in addition to your âplatform.â You want to make sure you own first-party app in addition to âplatform.â&lt;/p&gt;
    &lt;p&gt;I think you can get stuck in the mud if you say weâre just a platform company. I think we got it into our corporate mindset that we were âa platform companyâ far more than I ever intended.&lt;/p&gt;
    &lt;p&gt;There were people telling me in the mid- to late-2000s, well we canât do that. Weâre a platform company. I said, yes, we can do that. By 2010, I was just frustrated with myself and my inability to get people out of the, weâre-just-a-platform company.&lt;/p&gt;
    &lt;p&gt;I think to this day you have to think app with platform. You have to think extensibility of the app and the âplatform.â I think we got caught on that. Maybe I got caught on it for a while, and I certainly got caught in my inability to tell people what the company needed to do because people had such a culture then of saying weâre a platform company. Weâre a platform.&lt;/p&gt;
    &lt;p&gt;Now I go back to, developers, developers, developers. Iâm trying to tell people at that time that third-parties really mattered. You got different opinions inside Microsoft.&lt;/p&gt;
    &lt;p&gt;Ben: And what event was this at?&lt;/p&gt;
    &lt;p&gt;Steve: The developer conference, I think.&lt;/p&gt;
    &lt;p&gt;Ben: So itâs for external developers?&lt;/p&gt;
    &lt;p&gt;Steve: External developers. Whoâs Windowsâ number one client? Is it Office or is it all developers? You ask the Windows team, itâs all developers. You ask the Office team, come on, you got to do for us what we need to do. You have to be able to communicate that you really care about developers who are not your own. That you really want these things because they may think, oh, itâs all about running Microsoft Office. We just had to tell people, we want you, we want you, we want you, we want you.&lt;/p&gt;
    &lt;p&gt;I think we got caught in thinking itâs all about third-parties and not also about our first-party apps. Thatâs where you say, are you a, the word âconsumerâ sounds unserious. Are you for users and for enterprises? Which really means IT departments. Or are you for users and not IT departments? And do you allow both all aspects of what you do to be extended by developers?&lt;/p&gt;
    &lt;p&gt;Thatâs the frame I believe in. We had some issues over the course of where we went in the 2000. We can talk about that if you want to. But go back to 1999, come on, we need you guys on Windows. IBM still selling OS/2. Linux is right there on the horizon. Itâs coming like a freight train.&lt;/p&gt;
    &lt;p&gt;Ben: Is the web starting to enter your psyche at all?&lt;/p&gt;
    &lt;p&gt;Steve: The webâs part of that. Weâre trying to get people to write for Windows Server, good point. Weâre trying to get them to extend ActiveX controls, I think. Weâre the part of the browser. We were trying to get our browser to be a platform, embrace and extend I think is what we said. Weâll embrace the Internet and weâll extend with these ActiveX controls. We need developers to do ActiveX, we need them to do Windows Server.&lt;/p&gt;
    &lt;p&gt;Weâre just getting ready on .NET. I have my own wild style. How do you end a speech? You tell people you love them, that you want them. Thatâs the call to action. Thatâs where I think the developers, developers, developers thing came. Before that one, there was a different video that people characterize it.&lt;/p&gt;
    &lt;p&gt;Ben: I love this company?&lt;/p&gt;
    &lt;p&gt;Steve: No, it was my Windows video. I donât know if youâve ever seen that.&lt;/p&gt;
    &lt;p&gt;Ben: Oh, of course, but wasnât that a parody? Donât people misunderstand?&lt;/p&gt;
    &lt;p&gt;Steve: It was for fun. It was just a fun thing. It was not a real speech.&lt;/p&gt;
    &lt;p&gt;Ben: And it was for internal consumption where you were saying, for this low, low price.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. Thereâs a lot of little nuances in there. Weâre trying to get our people pumped up about Windows.&lt;/p&gt;
    &lt;p&gt;Ben: What I was looking for there is the developers, developers, developers speech is one where you feel like we havenât really won the last battle yet. Weâre still in this death grip for enterprise developers or this death fight against IBM, and yet thereâs now Linux and the web for these more independent or platform-of-the-futureâlooking developers. In some ways, were desperate to sell, to win, to say, hey, we have a great platform here. You need to come use our stuff.&lt;/p&gt;
    &lt;p&gt;Steve: Exactly. I canât remember whether weâre pre-LAMP or LAMP by then. But I donât remember. Thereâs some infrastructure on top of Linux that people are using to write, letâs say theyâre backends not their user-facing code. We had tons of competition.&lt;/p&gt;
    &lt;p&gt;The interesting thing is people say, only think about your customer. Never think about your competitor. I actually think you have to think about both. Ironically, we were pretty consumed with our competitor, which (I think) was essential, and we were pretty consumed about doing new things. But the competitor thing wound up being very important.&lt;/p&gt;
    &lt;p&gt;We have no business. Weâre not in the enterprise. We could lose Windows on the client. The company werenât really self-confident. The DOJ was really self-confident that we were a lock and there was no competition, and life was easy. Thatâs not where our heads were.&lt;/p&gt;
    &lt;p&gt;Now, there is some time in the 2000s where we think extending. We did a slide once called Windows everywhere. We used to use this on all these devices. We became too wed to extending what we had versus jumping to something new because in a sense, we were too confident if we only Windows-ized something.&lt;/p&gt;
    &lt;p&gt;You guys make a point in your episode on us. You guys call it sticking with Windows too long. That may be it, but I donât think we stuck with Windows too long. I think what we did is we tried to put Windows in places that it didnât naturally go, and we tried to be too Windows-ey both in the API and the UI in some things.&lt;/p&gt;
    &lt;p&gt;Ben: Mobile being an obvious.&lt;/p&gt;
    &lt;p&gt;Steve: Windows Mobile, exactly.&lt;/p&gt;
    &lt;p&gt;Ben: And the car.&lt;/p&gt;
    &lt;p&gt;Steve: We did a layer on Windows that when you hooked your PC up to the TV, it had a simplified user interface on your TV.&lt;/p&gt;
    &lt;p&gt;David: Oh, yeah. I remember this.&lt;/p&gt;
    &lt;p&gt;Ben: It wasnât just Media Center, right? It was someâ¦&lt;/p&gt;
    &lt;p&gt;Steve: Media Center, exactly right. We became convinced to some degree paranoia and some degree confidence. Well our birthright here comes from Windows. Thatâs our permission to enter the area. But then we also, in some areas, it just wasnât going to be extensible. There was both a fear and an overstated confidence in trying to take Windows everywhere.&lt;/p&gt;
    &lt;p&gt;Ben: All right, listeners. Itâs time to talk about another one of our favorite companies, Statsig. Since you last heard from us about Statsig, they have a very exciting update. They raised their Series C valuing them at $1.1 billion.&lt;/p&gt;
    &lt;p&gt;David: Huge milestone. Congrats to the team. Timing is interesting because the experimentation space is really heating up.&lt;/p&gt;
    &lt;p&gt;Ben: So why do investors value Statsig saying at over a billion dollars? Itâs because experimentation has become a critical part of the product stack for the worldâs best product teams.&lt;/p&gt;
    &lt;p&gt;David: This trend started with Web 2.0 companies like Facebook, Netflix, and Airbnb. Those companies faced a problem. How do you maintain a fast, decentralized product and engineering culture while also scaling up to thousands of employees?&lt;/p&gt;
    &lt;p&gt;Experimentation systems were a huge part of that answer. These systems gave everyone at those companies access to a global set of product metrics from page views, to watch time, to performance. Then every time a team released a new feature or product, they could measure the impact of that feature on those metrics.&lt;/p&gt;
    &lt;p&gt;Ben: So Facebook could set a company-wide goal, like increasing time in-app, and let individual teams go and figure out how to achieve it. Multiply this across thousands of engineers and PMs, and boom, you get exponential growth. Itâs no wonder that experimentation is now seen as essential infrastructure.&lt;/p&gt;
    &lt;p&gt;David: Todayâs best product teams like Notion, OpenAI, Rippling, and Figma are equally reliant on experimentation. But instead of building it in-house, they just use Statsig. And they donât just use Statsig for experimentation. Over the last few years, Statsig has added all the tools that fast product teams need, like feature flags, product analytics, session replays and more.&lt;/p&gt;
    &lt;p&gt;Ben: So if you would like to help your teams, engineers, and PMs figure out how to build faster and make smarter decisions, go to statsig.com/acquired, or click the link in the show notes. They have a super generous free tier, a $50,000 startup program, and affordable enterprise contracts for large companies. Just tell them that Ben and David sent you.&lt;/p&gt;
    &lt;p&gt;Letâs jump to this point, but what is the generalizable lesson here? You have Windows, this amazing piece of software with this tremendous multi-sided network effect around it. The logical thing to do is to continue to try and extend it and say, geez, wouldnât it be nice if the next great technology wave was also Windows?&lt;/p&gt;
    &lt;p&gt;Steve: And that worked for us on Windows Server. Itâs not like we didnât have an existence proof that the thing could work. But if youâre going to, in my little deck I gave you.&lt;/p&gt;
    &lt;p&gt;Ben: Yes, please.&lt;/p&gt;
    &lt;p&gt;Steve: If youâre trying to skate to where the puck is, if youâre trying to recognize, what did I call this about capabilities, if youâre a startup in something, thereâs an ongoing business, you just keep enhancing your products. Thereâs a line extension. Okay, weâre going to add networking to Windows. No problem. You still call it Windows. Itâs related.&lt;/p&gt;
    &lt;p&gt;But new, SQL Server for example, was that for a while. It was related because we had a backend platform. Dynamics, somewhat related, our accounting, et cetera stuff. Because there was some enterprisey sales, but it was really new.&lt;/p&gt;
    &lt;p&gt;It turned out the phone was more like a startup, recognizing and thinking about things, and then asking yourself, what capabilities do you need? I say get in the weight room. Youâve got to develop capability. Take a look at a capability we developed that is now essential. We didnât build it for this reason.&lt;/p&gt;
    &lt;p&gt;Hardware design. Microsoftâs a major hardware design company now. I started it out mostly to help client-side devicesâXbox, Surface, phone. And guess what? They use that mostly now in Azure data centers. I think the guy who actually runs hardware design used to be on Xbox. The backend hardware design for the data centerâthe chip, et cetera, infrastructureâIâm pretty sure there were a lot of talent we brought in.&lt;/p&gt;
    &lt;p&gt;Building capabilities is important. We built some capability, but we didnât build enough capability. We didnât see things as different enough. Okay, letâs try to keep the comfortable Windows user interface because people understand it. It wasnât right for the phone. I donât even remember what processors we started out on, but Iâm pretty sure we started out on Intel. Of course that wasnât right. We tried to keep too much consistency, both out of a fear that this was our permission to exist and out of a self-confidence that we had to put Windows everywhere.&lt;/p&gt;
    &lt;p&gt;Ben: So when should a company that has an existing fantastic business say, no, no, no. We cannot extend our existing franchise to this new world. This new world is going to be dominated by some new paradigm where we have no advantage. How do you play that?&lt;/p&gt;
    &lt;p&gt;Steve: And then do we choose to get in?&lt;/p&gt;
    &lt;p&gt;Ben: Exactly.&lt;/p&gt;
    &lt;p&gt;Steve: Then you have to choose to get in. I would say two things were true at the time for us.&lt;/p&gt;
    &lt;p&gt;Ben: And this is specifically about mobile.&lt;/p&gt;
    &lt;p&gt;Steve: Itâs also about something else. Itâs a little bit about search too. There were two things that are true. Number one, you have to be focusing consciously on the issue. Itâs easy to get caught up, thereâs innovatorâs dilemma. Itâs a little different, but you get caught up in what you have, you get caught up in what you get caught up in the capabilities, and thatâs why I say to myself, you explicitly have to think about it. If we hadnât developed a bunch of capabilities we had, AI, if we hadnât built Bing, company wouldnât have capabilities.&lt;/p&gt;
    &lt;p&gt;David: You built some capabilities in online services that willâ¦ weâll come back to that.&lt;/p&gt;
    &lt;p&gt;Steve: We built some important capabilities, but we didnât realize the businesses were enough different to harness those in the new ways. Iâm proud of the capabilities we built. Didnât apply them the way we should have. Where did we learn to build internet-scale infrastructure?&lt;/p&gt;
    &lt;p&gt;Well, some with Azure, some even more than Azure, being even more than Azure to get started. The Office. Whatâs now in M365? The Office backend, because that got critical mass as a cloud infrastructure before Azure did. Even more so with Bing. We developed the capabilities, but then you look at the product and what was our strategy for Bing? Well, thereâs too much based upon Windows integration. You have to say this is a separate part.&lt;/p&gt;
    &lt;p&gt;David: Before the Bing rebrand, it was Windows Live Search. Youâre not going to be Google with Windows Live.&lt;/p&gt;
    &lt;p&gt;Steve: Everything was Windows Live. Itâs now OneDrive. But the file sharing. Googleâs done the same thing. You got to ask where do you run out of gas?&lt;/p&gt;
    &lt;p&gt;Ben: Because you could make the counter argument, shoot, Google is running away with the market. Itâs very good technology. Theyâve perfected the user experience. They have scale. You need scale in this business. Uh-oh, itâs a runaway train that weâre never going to catch.&lt;/p&gt;
    &lt;p&gt;Thank God we have Windows to be able to have some way we can attack them from the side. With Windows integration, maybe that gives us a fighting chance. That didnât end up being true, but you can paint that narrative at least. We canât fight Google head on.&lt;/p&gt;
    &lt;p&gt;Steve: No, I need to tell you something. Look, how late were we to search? The answer is when did Google start? 1998â1999?&lt;/p&gt;
    &lt;p&gt;David: 1998.&lt;/p&gt;
    &lt;p&gt;Steve: Okay. And we jumped in in 2003, I think we pushed. Now youâd say five years is a lot, or you could say five years isnât that much. You could say we had no birthright. Itâs just a completely separate thing. We had no capability. We had nobody whoâd grown up in that world.&lt;/p&gt;
    &lt;p&gt;We had some guys in Microsoft Research who could start getting us there. We took talent that was doing other things in Microsoft. Itâs hard to go get new talent because search is brand new. There were people from Inktomi, Google had sucked them up. So it took us a while to get off the ground.&lt;/p&gt;
    &lt;p&gt;It took us a while even, to be fair, I think this is something both Bill and I debated, not just with each other, but just we kicked around too much, how much âthe verticalsâ in online services would be important versus search and portal is generic. So search and portal is generic.&lt;/p&gt;
    &lt;p&gt;But remember, we had a thing called Expedia. We built a travel site. We built a local information site called Sidewalk. We had a car shopping site. What did we call that thing? CarPoint. How much would the verticals be worth?&lt;/p&gt;
    &lt;p&gt;There was one vertical that mattered, except it wasnât really vertical. Itâs called all shopping. There was all information and all shopping, doing all these detailed specific things. Remember we did a portal. We did that. Then eventually, we did search a few years later. We were just off. We had the wrong thing.&lt;/p&gt;
    &lt;p&gt;Stack ranked in the wrong way, my opinion, with 20/20 hindsight. We were spread too thin. He said, when should you get into a new thing? Well, you probably shouldnât get into five new things if you really only have the talent for one to two new things. Thatâs number one.&lt;/p&gt;
    &lt;p&gt;Scott McNeely of Sun used to have this expression used, âWe got to get all our wood behind one arrow.â Itâs nice to try. I was listening to you guys talk about Amazon and how they, okay, weâre going to try small things, but they also put in small cost structure. We put in big cost structure because we were already all in when we got into something.&lt;/p&gt;
    &lt;p&gt;In this particular case, a few years later, and then what do you do? You get stuck. We have permission to come from behind in a certain way here because weâve got Windows, to your point. Exactly your point.&lt;/p&gt;
    &lt;p&gt;There are lessons to be learned, but for a company thatâs got an established business, being able to get all the way outside of yourself and say, is this really like what weâre doing? Because you really want it to be. You really want it to be. Or does this really require a different approach that all doesnât totally ignore, but doesnât take into account what you own any more than the person starting it afresh.&lt;/p&gt;
    &lt;p&gt;Can you hire new capability or how do you build new capability? Because if itâs not like what youâre already doing, it must require new capability. If itâs exactly like what youâre doing, then youâd be doing it.&lt;/p&gt;
    &lt;p&gt;Ben: And you should be great at it.&lt;/p&gt;
    &lt;p&gt;Steve: And youâd be great at it. Just look. Two models worked in phone. Build the hardware, capture the profit, have a backend monetization system that even lets you pay the phone manufacturer. That worked. Android/Google.&lt;/p&gt;
    &lt;p&gt;Two things worked. Thatâs it. And we werenât in either one. We needed new capability. We needed a new idea. We couldnât use the Windows user interface. There were a bunch of things, but you have to go all the way. Yet we had a Windows everywhere slide.&lt;/p&gt;
    &lt;p&gt;Ben: It was on the slide. I donât understand why it didnât work.&lt;/p&gt;
    &lt;p&gt;Steve: I wrote this thing down here. You get locked in your model. Weâre a platform company. No, weâre an app and platform company.&lt;/p&gt;
    &lt;p&gt;Ben: On our episode, we threw out the idea that Microsoftâs competitor, like the truest form that it should have taken on mobile was not actually Apple. The iPhone is not the bogey. Itâs a pretty different thing. At that point, you were not a hardware company.&lt;/p&gt;
    &lt;p&gt;The bogey was Android. They were monetizing it a different way through advertising and through giving away for free. Microsoft always monetized through licensing revenue. It seems like until Android took off, Microsoft actually did have an opening to become the second mobile.&lt;/p&gt;
    &lt;p&gt;Steve: What year Christmas was this? There was the Christmas of blah-blah-blah year. It was being on time with the stuff we needed for Verizon. There was a Verizon design win because Verizon by now is really feeling itâs getting its ass kicked.&lt;/p&gt;
    &lt;p&gt;David: iPhone launch is on AT&amp;amp;T.&lt;/p&gt;
    &lt;p&gt;Ben: July of 2007.&lt;/p&gt;
    &lt;p&gt;Steve: It mightâve been Christmas even 2008.&lt;/p&gt;
    &lt;p&gt;Ben: Yeah, because the App Store launch next year.&lt;/p&gt;
    &lt;p&gt;Steve: I think Christmas 2008. Possibly even 2009. But I think 2008.&lt;/p&gt;
    &lt;p&gt;Ben: Mobile was this when it started.&lt;/p&gt;
    &lt;p&gt;Steve: It could have even been 2009. But Verizon, the empire had to strike back against AT&amp;amp;T, and there was a window.&lt;/p&gt;
    &lt;p&gt;David: And they went with Troy.&lt;/p&gt;
    &lt;p&gt;Steve: We didnât have our stuff. Look, they wouldâve taken our stuff because they could put pressure back on the manufacturers, but we didnât have the stuff they wanted at the right time. They went Android. Then we kept pushing because I believe in staying hardcore, and then learning and fixing. The problem was we were so locked into our model, it was hard to, to say, hey, weâre going to learn and fix.&lt;/p&gt;
    &lt;p&gt;I donât know where we wouldâve gone with things on phone if I had stuck around. But I probably wouldâve stayed at it. Maybe it would be an Android phone at this stage. Who knows? And maybe not.&lt;/p&gt;
    &lt;p&gt;If you think of yourself as just a platform company, you say we canât do that. If you can think of yourself as an app and platform company with apps that are extensible, ah, then you can say, hey, we actually have a pretty cool user experience that can also leverage some things that we do and can leverage our software skills.&lt;/p&gt;
    &lt;p&gt;Itâs okay to embrace that competitor and extend. But there are so many technologies that are hard to not just popularize, but even get good at unless you have a phone these days.&lt;/p&gt;
    &lt;p&gt;Just take voice. If you want to really be good at voice, you got to get enough signal and youâll get the signal off the phone. You canât say, talking to my PC is sufficient. If you want to get good at maps, there are so many things where being on phones and there are some things even you can make happen by being on cars.&lt;/p&gt;
    &lt;p&gt;I think Tesla gets good at certain things in software because it is a different form of mobile, so they get good at different things. But we missed. Should the company have kept after it? I donât know. Satya knows and Amy and company, they know where they were.&lt;/p&gt;
    &lt;p&gt;But to your original question, big companies deciding, well, itâs not always a mistake to build off what you got, but it can be. Try to get outside of yourself. If you get in, do you have the ability from the top to shake the system and say, no, we started with our old model, but itâs not going to work.&lt;/p&gt;
    &lt;p&gt;Thatâs what I did with Surface. I didnât wind up. It hasnât played out partly. I didnât have as much time with it. There were no high-end PCs that would really compete with Mac. I decided the only way we were going to get there, we couldnât sit there with our OEM model and have it work, if weâre going to have high-end PCs that appealed to users because I wanted us to be a consumer/user company, not just an IT company.&lt;/p&gt;
    &lt;p&gt;Thinkpad had IBM. By then, Lenovo had some higher-end computers. But you never saw them in schools. You never saw them in coffee shops. We needed a high-end PC, and the economics, marketing, and romancing it was not going to be an option for our OEMs. I said we got to go do Surface. Again, would we have tweaked things, done things a little bit better? Part of that, iPad, sure. But the model was not going to work.&lt;/p&gt;
    &lt;p&gt;Ben: Weâve spent a lot of time talking about all these bets that sound very reasonable to make in mobile, in search. We didnât talk about social, but in social and all the dancing you did with Mark Zuckerberg over the years, in Yahoo, in all these things that ended up not panning out, and these were trillion-dollar companies that were built not inside of Microsoft.&lt;/p&gt;
    &lt;p&gt;We talked about one multi-trillion dollar thing that did work with the enterprise. Thereâs another one with Azure. Can you tell us the story of how Azure really got started?&lt;/p&gt;
    &lt;p&gt;Steve: We are in probably 2005â2006. AWS has a little lift off. I think AWS comes to market around then. Itâs not like the cloud is some surprise to us. The Energizer, if you go all the way back to that Energizer thing from the mid-90s, itâs all about the cloud. Itâs before it was called the cloud. Itâs before all the infrastructure that becomes the cloud.&lt;/p&gt;
    &lt;p&gt;Itâs not like we say, oh, woke up one day, itâs oh, thereâs AWS. We didnât wake up one day and say, oh there are backends to applications too. Weâve been doing that with Windows Server and SQL Server. Weâve been in the cloud, blah-blah-blah. But at that point, I think we might have already had Exchange in the cloud as a standard product. Which you have to remember is super important because I really want to give you my sense of what Microsoftâs businesses are.&lt;/p&gt;
    &lt;p&gt;But we didnât have a platform. So I said, we got to do one. Letâs go get Cutler. I say, okay, we got to get Cutler on it. Cutler and I have a great relationship. To this day, we have a great relationship. Heâs a personal friend.&lt;/p&gt;
    &lt;p&gt;Ben: Heâs still writing code at Microsoft.&lt;/p&gt;
    &lt;p&gt;Steve: Heâs still writing code at Microsoft.&lt;/p&gt;
    &lt;p&gt;Ben: Unbelievable.&lt;/p&gt;
    &lt;p&gt;Steve: Cutler and I have been to a basketball game together. Weâve played golf a number of times. Weâve done golf trips together. Cutlerâs a hard ass at work. If he doesnât want to do something, heâll tell you. If he thinks you are wrong, heâll tell you. If he thinks somebody else in the organization is bad, heâll tell you.&lt;/p&gt;
    &lt;p&gt;David: Heâs like a thoroughbred horse.&lt;/p&gt;
    &lt;p&gt;Steve: Heâs very blunt.&lt;/p&gt;
    &lt;p&gt;David: You can run really fast, but you got to get him.&lt;/p&gt;
    &lt;p&gt;Steve: Heâs very blunt, was a great athlete in college. Two sports. I think he played maybe three even in college. But anyway, so I get Cutler, and thereâs a guy working in MSR who I think is underutilized too. This guy Amitabh Srivastava, you guys talk about. I thought he was underutilized doing what he is doing. So grab him, grab Cutler, bring them both onto this project. Is Billy still with the company?&lt;/p&gt;
    &lt;p&gt;David: Heâs about to transition out.&lt;/p&gt;
    &lt;p&gt;Steve: Heâs about to leave, I think.&lt;/p&gt;
    &lt;p&gt;David: Yeah. I think he had probably told you that he was going to leave.&lt;/p&gt;
    &lt;p&gt;Steve: He had told me but hadnât left yet. He was involved until he left. Even then, different nature of involvement. But anyway, I get Cutler and Amitabh to go do this thing. Then Cutler brings some of his (Iâll call) gang, his favorite guys. He brings them over because heâs a magnet for talent, and we get started.&lt;/p&gt;
    &lt;p&gt;We made an explicit decision. I guess you could say itâs also a function of thinking Windows first. I think you guys may have talked about this in your episode. We say weâre going to build Platform as a Service because itâs a Windows platform.&lt;/p&gt;
    &lt;p&gt;Infrastructure as a service a little bit, if you think about it. You are by nature accepting everybodyâs infrastructure. Itâs âby nature,â âmulti-platform.â You become a different kind of a platform because youâre running other peopleâs Linux and whatever.&lt;/p&gt;
    &lt;p&gt;Ben: It doesnât leverage Microsoftâs strength of owning the Windows franchise if youâre just going to be infrastructure.&lt;/p&gt;
    &lt;p&gt;Steve: No, it doesnât leverage our strengths in the sense that weâve got great low-level operating system people. We have all the talent to go do it, and it was explicit we wanted to do Platform as a Service. We said: (a) theyâre doing it, (b) itâs all about the developers. If itâs all about the developers, then you got to have Platform as a Service, not just Infrastructure as a Service.&lt;/p&gt;
    &lt;p&gt;Ben: Well that assumes that the developers targeting Windows Server are still a big, strong, important, relevant developer group.&lt;/p&gt;
    &lt;p&gt;Steve: Which they were and they werenât. Windows Server had a strong developer group. Unix had a strong developer group. On the front end, Windows was definitely stronger. On the backend, Unix was definitely stronger.&lt;/p&gt;
    &lt;p&gt;Ben: But on the front end, by 2006â2007, the web was clearly the emerging developer platform of choice.&lt;/p&gt;
    &lt;p&gt;Steve: Absolutely emerging. Not fully emerged. Emerging.&lt;/p&gt;
    &lt;p&gt;Ben: I would challenge you to say, in 2006 what amazing Windows apps were coming out that would sweep the world and go get a hundred million users because they were great apps?&lt;/p&gt;
    &lt;p&gt;Steve: Hard for me to remember. I think if you go to the field of productivity, the answer is yes there were still. The problem is if you left the areas of productivity and gaming, I think the answer was no.&lt;/p&gt;
    &lt;p&gt;The web wasnât good for a number of things for IT because people didnât feel like they could count on the connectivity. Either the amount of bandwidth or latency or just itâs very existence. We are still at that point. Iâm not saying fair. We were right in the way we thought about. Not saying that. But Iâm also saying there was still a great Windows developer ecosystem. It didnât go from a lot 1999 to nothing by 2005.&lt;/p&gt;
    &lt;p&gt;Ben: Totally fair.&lt;/p&gt;
    &lt;p&gt;Steve: And then on Windows Server, Unix was stronger on the backend. Of course, weâre trying to make Windows strong and weâre trying to get to the cloud. Then weâre learning more things about the cloud from both Exchange in the cloud and Azure in the cloud.&lt;/p&gt;
    &lt;p&gt;How do you make it easy to provision? Whatâs the speed of provisioning? What do you do to serve developers? The notion that you give them a set of free usage and then let them embrace.&lt;/p&gt;
    &lt;p&gt;Developers have two aspects too. There are developers who are not part of enterprises and theyâre developers who are. The developers who are not part of enterprises need a whole different sales motion.&lt;/p&gt;
    &lt;p&gt;You can call them consumer developers, not developers of consumer apps. Theyâre not like big corporations in terms of the way they use. Students are an example, but there are plenty of others who are trying to do startups and blah-blah-blah.&lt;/p&gt;
    &lt;p&gt;In any event, we get going. Weâre learning how to do the things. Weâre building capability for sure in the cloud through both products. By the time I leave, we have some momentum with Azure, but some momentum. The big momentum really is in the last 11 years since I left.&lt;/p&gt;
    &lt;p&gt;David: Well, I think youâre bypassing and underselling here. It really struck me as you were describing the challenges around with a big company like Microsoft, and attacking wildly different vectors like mobile, search, hardware. Azure was that. The cloud was extremely disruptive. The server and tools,what you were doing.&lt;/p&gt;
    &lt;p&gt;Steve: It was extremely disruptive, but it wasnât. Yes and no. The things we understood were translatable. Now, getting the company, people get locked into a model.&lt;/p&gt;
    &lt;p&gt;David: Well you had to replace server and tools. Leadership to make this happen.&lt;/p&gt;
    &lt;p&gt;Steve: Well IT accept things that run in the cloud. That was not obvious back in 2008â2009. Itâs not like Amazon was an enterprise company at the time. It was mostly for startups. Thatâs who was using AWS at the time, so no. I do agree with you. We had to shake up our internal culture.&lt;/p&gt;
    &lt;p&gt;This was my basic message. God dang it. This is our future. We can preserve and enhance these businesses. We can take more value out of the system because the customers donât have to set up their servers anymore. They donât have to do all this work. Essentially, money that wouldâve been spent on people and hardware will get spent with us. Come on, weâre going to do this.&lt;/p&gt;
    &lt;p&gt;It was hard for me even telling our people there was still La RÃ©sistance, as they say, and thatâs why I did the speech at UDub, where we talked about the fact that weâre all in on the cloud. It was partly a reminder to people, get with it or get out of it. Get out of the way.&lt;/p&gt;
    &lt;p&gt;Ben: Making an external speech to communicate something to your internal employees.&lt;/p&gt;
    &lt;p&gt;Steve: In a big company, man, Iâll tell you. Some of what you have to do because people believe the newspaper more than theyâll believe an internal email.&lt;/p&gt;
    &lt;p&gt;Ben: People always talk about how the think different campaign that Steve Jobs did was for Apple employees as much as it (in fact) way more than for the general public. Going back to the core initial start of Azure, I find it very interesting that Microsoft had a business called server and tools business, and that is not where Azure started. Azure started as an incubation by Ray Ozzie with a completely separate team than your existing actual product group selling server and tools.&lt;/p&gt;
    &lt;p&gt;Steve: But thatâs a classic thing. It shouldnât be mind-blowing. Windows and Windows NT were in different groups, too. Sometimes in order to protect the baby while it grows up, you canât put it with the thing thatâs established.&lt;/p&gt;
    &lt;p&gt;You could say itâs part of the issue with Windows, when we tried to use Windows on things for which we probably should have started.&lt;/p&gt;
    &lt;p&gt;David: I was going to ask you, would it have played out differently if youâd taken this approach with mobile?&lt;/p&gt;
    &lt;p&gt;Steve: We did break it out, but we constrained it with Windows. We broke Windows NT out and constrained it with Windows. It worked fine because Windows belong. How you do those incubations, in this case I just said, look. Itâll get probably subsumed. I donât know.&lt;/p&gt;
    &lt;p&gt;Partly, Ray wanted some operating control over the thing, and putting it under [...] wouldâve made it harder for Ray. Obviously, it was less palatable. Iâm not sure Cutler wouldâve gone to work on it if it was all server tools. But it was the right thing to do even though it was âpart of the future of server.â It was the future of server and tools, essentially.&lt;/p&gt;
    &lt;p&gt;Ben: And so this is pretty lost in the common narrative. If this is 2006, that is 7â8 years before you left Microsoft.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, eight years. Weâd been working on the cloud since Energizer. Weâd been working on Azure for eight years. People think everything in tech gets popular in 10 minutes.&lt;/p&gt;
    &lt;p&gt;Ben: People think Acquired was founded two years ago.&lt;/p&gt;
    &lt;p&gt;Steve: Good point.&lt;/p&gt;
    &lt;p&gt;David: Different scale.&lt;/p&gt;
    &lt;p&gt;Steve: When was OpenAI actually founded?&lt;/p&gt;
    &lt;p&gt;David: 2016, I think.&lt;/p&gt;
    &lt;p&gt;Steve: So seven or eight years after it really became something. Fair to say. I give them all the credit in the world, seven or eight years. Most things take a while. Even things that are âoh, they just burst on the scene.â People have been sweating blood, sweat, and tears for years before these things get lift-off, as I call it my little deck here. We were starting to get lift-off, but yeah, eight years. We had more in on Exchange. Most businesses are zero trick ponies.&lt;/p&gt;
    &lt;p&gt;Ben: You never create a billion dollar business.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. You might create something that goes nowhere. You might create whatâs essentially a feature for somebody elseâs business and get acquired. You might. I call that zero tricks. Then you get a one-trick pony. One-trick ponies are amazing. People should be in awe of one-trick ponies.&lt;/p&gt;
    &lt;p&gt;David: One-trick ponies are $50â$100 billion market cap companies.&lt;/p&gt;
    &lt;p&gt;Steve: Or it could be more.&lt;/p&gt;
    &lt;p&gt;David: Yeah, or more. Theyâre not many one-trick ponies.&lt;/p&gt;
    &lt;p&gt;Steve: I might argue that Googleâs a one to one-and-a-halfâtrick pony. Still, if you just look at its revenueâ¦&lt;/p&gt;
    &lt;p&gt;Ben: 80% search ad revenue, something like that.&lt;/p&gt;
    &lt;p&gt;Steve: YouTubeâs half a trick you can call it a psychic trick, but itâs, itâs not clearly a second trick. And theyâre huge. They have great market cap.&lt;/p&gt;
    &lt;p&gt;TSMC. You did an episode on them. Theyâre a one-trick pony. A very successful one-trick pony. Nvidia is a one-trick pony.&lt;/p&gt;
    &lt;p&gt;Ben: Well, gaming and AI.&lt;/p&gt;
    &lt;p&gt;Steve: Okay, Iâll give them two tricks.&lt;/p&gt;
    &lt;p&gt;David: Two-trick pony but the first trick was not that big.&lt;/p&gt;
    &lt;p&gt;Steve: You can decide whether to call it a trick or not, but Iâm not taking anything away from Nvidia, and I should know the company better. But, so you say one-trick ponies. Theyâre amazing. Everybody should be in awe of a one-trick pony. Now, two-trick ponies, ooh la la. Those people tend to go down in business history, especially those tricks stay alive for a long time. IBM was a one-trick pony. Microsoft two to two-and-a-half tricks.&lt;/p&gt;
    &lt;p&gt;David: All right, give us your trick accounting.&lt;/p&gt;
    &lt;p&gt;Steve: Okay, you could do it a little differently. Iâm going to call the desktop business, which I include Windows and Office, and the server/enterprise business, BackOffice. Two tricks.&lt;/p&gt;
    &lt;p&gt;Now, both tricks could have died if they didnât get moved to the cloud, and I knew they could die. But theyâre two tricks. Two different revenue models, two different licensing models, essentially different sales motions. Even the way Microsoft sells those stuff. I donât know about today, but when I left, they were different muscles.&lt;/p&gt;
    &lt;p&gt;One account manager, two different muscles. Because one youâre selling applications, and one youâre just selling, hey, this is to serve your users. You need an AD account, an Exchange account. Itâs exactly Windows. Thatâs what you need. This is what M365, you could call the modern translation of those two things are the Windows OEM business and M365, and Azure.&lt;/p&gt;
    &lt;p&gt;Then you could say, is gaming its own trick? I call it a half a trick. Just like you two. Itâs half a trick.&lt;/p&gt;
    &lt;p&gt;Ben: This is an update since we last talked. I feel like we had a conversation at one point were we both landed in unclear how profitable that business is for Microsoft relative to other.&lt;/p&gt;
    &lt;p&gt;Steve: I could call it a half trick, or you could say it could be a trick. Look, I would say Microsoft is optimistic itâll be a full-on trick. I ran into Phil Spencer at the golf course and heâs a real optimistic guy. It could be.&lt;/p&gt;
    &lt;p&gt;David: Iâll give you this. If we call NVIDIAâs first trick a full trick, then Xbox is a full trick. There we go.&lt;/p&gt;
    &lt;p&gt;Steve: Whatever you want to call it. You said itâs a small trick and I think thatâs probably right. Thatâs amazing. Amazonâs a two-tricker. AWS and the store, theyâre two-tricker. Appleâs two-tricks.&lt;/p&gt;
    &lt;p&gt;Ben: Whatâs your trick accounting there?&lt;/p&gt;
    &lt;p&gt;Steve: Mac and mobile, if you want to say itâs high power consumption and low power consumption.&lt;/p&gt;
    &lt;p&gt;Ben: Is it fair to call services a third? By my estimates, their profit dollars from services have now eclipsed iPhone hardware profit.&lt;/p&gt;
    &lt;p&gt;Steve: I consider it just part of the trick.&lt;/p&gt;
    &lt;p&gt;David: If you go by your platform definition, itâs part of the platform.&lt;/p&gt;
    &lt;p&gt;Steve: I call really a trick, theyâve just monetized it. Itâs like us adding things to Office and redoing the EA.&lt;/p&gt;
    &lt;p&gt;Ben: Itâs a monetization model.&lt;/p&gt;
    &lt;p&gt;Steve: Itâs an additional monetization model, but itâs not a new locomotive. A locomotive is the business that can pull the cabooses, and the locomotive remains the phone. The services business go away pretty quick if the phone volume fell apart. Itâs additional, very importantâ¦&lt;/p&gt;
    &lt;p&gt;Ben: But not uncorrelated the way that AWS andâ&lt;/p&gt;
    &lt;p&gt;Steve: No. And I think Mac versus everything iOS is also uncorrelated.&lt;/p&gt;
    &lt;p&gt;David: Yeah. I get the sense you really wanted three tricks.&lt;/p&gt;
    &lt;p&gt;Steve: Abso-fricking-lutely.&lt;/p&gt;
    &lt;p&gt;Ben: Whatâs the one that eats you up inside? Which one do you think you were closest to getting that you didnât get?&lt;/p&gt;
    &lt;p&gt;Steve: Not social. Forget social.&lt;/p&gt;
    &lt;p&gt;Ben: Doesnât feel Microsoft-ey.&lt;/p&gt;
    &lt;p&gt;David: You wanted to buy Facebook.&lt;/p&gt;
    &lt;p&gt;Steve: Iâm going to tell you why. Weâre still on the Paul Allen strategy. Weâve got to do all the software that these things will ever need. It was still of the mindset that said, and thereâs an arrogance to that and thereâs a hunger to that that says thereâs just nothing we shouldnât do. I donât think that was a good mindset by the time I took over, and yet it was still baked in with Bill, baked in with me, and I think that was a mistake not focusing.&lt;/p&gt;
    &lt;p&gt;This is like asking me to pick between negative children. I donât know. But the phone because it was a client-side device, or search because it was a productivity tool. Both of those were Microsoft big businesses. The desktop, the phone, or office, client-side devices, we had done well with a certain model. Client-side devices, our mind should have been able to wrap around, but we had to tell ourselves it didnât look the same. Technology didnât look the same, nor did business model.&lt;/p&gt;
    &lt;p&gt;Ben: Then business model astonishingly for search. Advertising, call it 2005. I think Google was making more money off of a PC user than Microsoft was because their business model generated more search revenue.&lt;/p&gt;
    &lt;p&gt;Steve: By 2005, I donât think so. Not later on, I think so. But not by 2005. I would suspect not. You can go check that.&lt;/p&gt;
    &lt;p&gt;Ben: But isnât that astonishing? That of the pie.&lt;/p&gt;
    &lt;p&gt;Steve: And for enterprise PCs, PCs bought by businesses, it certainly wouldnât have been the case. For consumer PC, it could well have already been the case. It actually is a notable difference because of everything else.&lt;/p&gt;
    &lt;p&gt;Our post sales monetization was with applications. Weâre with ads, but it was a new productivity app. We put Office on the back by then. We wouldâve had to put productivity elsewhere, in the sense that we missed a major productivity area. We were in the productivity business and in the client area, and we missed a client device. Those are the two. Nothing else we met, we âmissed.â&lt;/p&gt;
    &lt;p&gt;David: You had an opportunity for four-tricks, and you got two.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. Part of the problem was particularly, we didnât see mobile as a different trick. We thought of it as underneath the Windows trick, if you will. But it means you can go through. I donât know that I could come up with a three-trick pony for you.&lt;/p&gt;
    &lt;p&gt;Itâs possible that at the Elon level, the Musk empire could have three tricksâcars, connectivity, andâ¦&lt;/p&gt;
    &lt;p&gt;Ben: In finance, you can do it.&lt;/p&gt;
    &lt;p&gt;Steve: Finance, I donât think there are multiple tricks. You could say asset management versus theâ¦&lt;/p&gt;
    &lt;p&gt;Ben: Investment banking is different.&lt;/p&gt;
    &lt;p&gt;Steve: Maybe. I donât know. Iâm not convinced. But I hear you. Possible.&lt;/p&gt;
    &lt;p&gt;David: Well, I think this makes sense because Microsoft is the most valuable company in the world with two. So if anybody have threeâ&lt;/p&gt;
    &lt;p&gt;Steve: If you look at the most valuables, youâre not going to find threes.&lt;/p&gt;
    &lt;p&gt;Ben: Thatâs a good point. Sony is nowhere near the market cap of these companies, but itâs pretty evenly diversified across their five segments, from gaming to consumer electronics.&lt;/p&gt;
    &lt;p&gt;David: Movies, music, finance.&lt;/p&gt;
    &lt;p&gt;Ben: Yeah. They have a remarkable diversified.&lt;/p&gt;
    &lt;p&gt;Steve: They bought businesses in multiple areas, but I canât call Sony Pictures a trick. Itâs just not big enough. What you can acquire to start a trick, that part thereâs no pride. Pride in having a trick that starts with something small.&lt;/p&gt;
    &lt;p&gt;David: Androidâs a good example. Google bought Android, but thatâs a trick for them.&lt;/p&gt;
    &lt;p&gt;Steve: Well, Androidâs not a trick. You highlighted it. Android is a piece of the search trick.&lt;/p&gt;
    &lt;p&gt;Ben: Itâs a lead gen.&lt;/p&gt;
    &lt;p&gt;Steve: Exactly. Lead generation for search. Yeah, thatâs right.&lt;/p&gt;
    &lt;p&gt;Ben: Okay. Listeners, now is a great time to thank one of our longtime friends of the show, but actually first time sponsor, Vercel.&lt;/p&gt;
    &lt;p&gt;David: Vercel is an awesome company. Over the past few years, theyâve become the infrastructure backbone that powers modern web development. If you visited a fast, responsive website lately, thereâs a good chance it was built and deployed on Vercel.&lt;/p&gt;
    &lt;p&gt;Ben: The reason for this is Vercel has completely reimagined the entire web developer experience. In the old world before Vercel, if you were a web developer, you basically had two completely different jobs you had to do. One was write code, and then you had to deploy the code to your production infrastructure, which (a) was not a simple task and distracted you from what you were really good at, and (b) usually introduced all sorts of bugs and reliability or latency issues that you had to iron out.&lt;/p&gt;
    &lt;p&gt;David: Vercel did away with this distinction entirely. They built what they call the complete platform for the web, which is a framework to find infrastructure that transforms your code into live, globally distributed production applications automatically. For developers, thereâs no more wrestling with deployment nonsense. You just push your code and it runs, fast.&lt;/p&gt;
    &lt;p&gt;Ben: Itâs a pretty incredible technical infrastructure, which is no surprise because Vercelâs founder, Guillermo Rauch, is himself a pioneering web developer in the modern era. He started Next.js, which is one of the worldâs most popular open source frameworks used by folks like Walmart, the Verge, Nike, Hulu, Anthropic, Claude, the list goes on.&lt;/p&gt;
    &lt;p&gt;David: We did an ACQ2 episode with Guillermo back in February. Go check it out. You canât listen to that and not walk away going, wow, this guy and this company are unbelievably compelling.&lt;/p&gt;
    &lt;p&gt;Ben: Weâll be talking about Vercel all season, including their newest product that is just blowing up called V0, which is an actual AI web developer that you can just ask in plain English to build websites for you.&lt;/p&gt;
    &lt;p&gt;David: Itâs wild. Go listen to the ACQ2 episode and itâll become obvious why Guillermo and Vercel didnât stop at just, oh, letâs eliminate deployment as a barrier to people building fast websites. Letâs also now go eliminate writing code as a barrier as well.&lt;/p&gt;
    &lt;p&gt;Ben: In some cases. Well, if you want to learn more about what Vercel can do for web development at your company and join customers like OpenAI, Granola, Runway, Supreme, Chick-fil-A, Ramp, PayPal, Under Armour, and NerdWalletâgosh, that is a lotâhead on over to vercel.com/acquired, and just tell them that Ben and David sent you.&lt;/p&gt;
    &lt;p&gt;Okay. Weâve been dwelling here in the products and reflecting back on big wins and misses. During your tenure as CEO, can you reflect back on your non-product wins and mistakes?&lt;/p&gt;
    &lt;p&gt;Steve: My biggest hit from my time running sales to president to CEO is establishing us with IT departments, IT professionalsâyou can call that the enterprise, if you willâputting in the framework from a sales and marketing perspective, the staff, Itâs a capability we had to develop. Nobody developed that software model but us. We invented essentially how you do that.&lt;/p&gt;
    &lt;p&gt;Oracle had done some invention, but we came on and did our own invention. We took it to the cloud. We were able to successfully navigate that. From sales, there are product parts to that that let you highlight, but thatâs a big deal and I feel very, very proud about that.&lt;/p&gt;
    &lt;p&gt;From a financial standpoint, everybody likes to say we about tripled revenue and about tripled profit. The truth is, we dramatically increased profit more than a triple. People forget there was a major change that came along early in my tenure. Thatâs the move to have to expense stock options.&lt;/p&gt;
    &lt;p&gt;If you had restated our books to the time I actually took over, stock option expense would have reduced profits notably. Stock options were unaccounted for. If you look at what starting profitability wouldâve looked like if stock options had, it wouldâve been lower, and the multiple over my tenure wouldâve been much more than three.&lt;/p&gt;
    &lt;p&gt;Ben: Okay, so three plus times in revenue.&lt;/p&gt;
    &lt;p&gt;Steve: I think you might say three in revenue and probably closer to four plus, five maybe even on profit.&lt;/p&gt;
    &lt;p&gt;About the same time the dot-com bubble busts. You have two problems. Number one, now weâre showing our books all this expense for stock options. Okay. But people donât value those things what we have to expense. And the stock is flat, so they value them even less.&lt;/p&gt;
    &lt;p&gt;David: This is a really insidious problem.&lt;/p&gt;
    &lt;p&gt;Steve: You got to get rid of stock options. We transition then from stock options to stock awards, which if you notice, I think we were the first to make that as a major transition, but everybodyâs made the same transition with the exception of a few senior executives, options are not the primary form of compensation. Little different in startups. But when you look at larger companies, everybodyâs,&lt;/p&gt;
    &lt;p&gt;David: Even startups are now doing RSUs.&lt;/p&gt;
    &lt;p&gt;Steve: RSUs, and we had to start that.&lt;/p&gt;
    &lt;p&gt;David: I didnât realize that Microsoft started that.&lt;/p&gt;
    &lt;p&gt;Steve: You can check, but I know we moved before most of the tech companies.&lt;/p&gt;
    &lt;p&gt;Ben: Itâs a tough thing to have to inherit right at the beginning of your tenure, coming off of an already all-time high multiple of the stock price.&lt;/p&gt;
    &lt;p&gt;Steve: The dot-com bubble bursting meant our stock price burst intoâ&lt;/p&gt;
    &lt;p&gt;David: But I think to your point, what youâre saying is this became an employee motivation cultural issue. Itâs not just stock price.&lt;/p&gt;
    &lt;p&gt;Steve: No. We had two problems. Before the dot-com bubble burst, you have everybody saying, oh, maybe we should go to a dot-com company because weâre going to make a lot more money. Then the bubble burst and everybody says, Iâm certain you guys [...] see the movie Oklahoma, but thereâs a song, Pore Jud is daid.&lt;/p&gt;
    &lt;p&gt;Ben: Poor Jud is Dead, absolutely.&lt;/p&gt;
    &lt;p&gt;Steve: A candle lights his haid. That was the way people felt about stock compensation. And not just at our place. People were down because everybody thought they had a ton and then they thought they had less.&lt;/p&gt;
    &lt;p&gt;It was a real employee morale issue in the early 2000s. We had to really sell the stuff in. Thatâs a big thing I had to work on. Obviously the antitrust issues.&lt;/p&gt;
    &lt;p&gt;David: When you took over as CEO, what we said in our episode was that was actually your number one priority, was just end this.&lt;/p&gt;
    &lt;p&gt;Steve: It was right up there, yeah. It was up there. I think when I took over, Iâm not even sure we saw a path to resolution, but having it an overhang.&lt;/p&gt;
    &lt;p&gt;Iâll give you a story because it was after I took over as CEO. We had an executive retreat. We did it down in Bend, Oregon. I canât remember the name of the lodge. Sun River, I think. We all fly down there. We rented a plane to fly everybody down there. I donât know how many people by then, it was probably 80â90, something like that.&lt;/p&gt;
    &lt;p&gt;The first session was supposed to be a reportâwe did thisâfrom the field. What are people seeing out there? Whatâs the environment? And this guy, Orlando Ayala, was running sales at the time. He gets upâthis is probably 2002-ish, 2001â2002; weâre still in the throes of the thingâmy name is Orlando Ayala. Iâm a proud Colombian. I am not a proud Microsoftee today. Our integrity is under assault. My personal integrity feels like itâs under assault.&lt;/p&gt;
    &lt;p&gt;Now, he didnât blame us for having behaved badly, but he highlighted the thing thatâs on everybodyâs mind, which is it wasnât just a business issue that needed to be taken care of. It was a culture issue. It was bothering people, particularly senior people, very personally.&lt;/p&gt;
    &lt;p&gt;I had this whole agenda, had to blow the thing up and reorient to address that elephant in the room. It was not where I was going with this thing. Completely remap, change the breakout sessions, focus in on this issue. Bill was not happy with the whole thing.&lt;/p&gt;
    &lt;p&gt;Bill bore the weight of the antitrust thing very hard because for him, I think it also felt like a personal attack. Everybody took it personally. Bill took it even more personally because he was the face of vilification, if you will for this. But itâs a reminder that it was a cultural issue to take care of, not just a market issue.&lt;/p&gt;
    &lt;p&gt;People focus in on the, oh, were you moving slowly? Yeah, there was some of that too. People say, oh, I wonder if we can do this. That was an issue. The cultural issue I think was even bigger. He said, yeah, we got to get this thing resolved. Then there was the order to break us up. I forget what year that was.&lt;/p&gt;
    &lt;p&gt;David: You were going to run one company and Bill was going to run the other company.&lt;/p&gt;
    &lt;p&gt;Steve: We never really got to the point of really planning that through.&lt;/p&gt;
    &lt;p&gt;David: But thatâs what the federal government ordered.&lt;/p&gt;
    &lt;p&gt;Steve: They ordered it split. They didnât say who had to run which company.&lt;/p&gt;
    &lt;p&gt;Ben: I think it was just that you couldnât be at the same.&lt;/p&gt;
    &lt;p&gt;David:: You couldnât be at the same company.&lt;/p&gt;
    &lt;p&gt;Steve: I think it was, I would run operating systems and Bill would take applications. It just gives you a sense of where each of us were associated within the mind of the company.&lt;/p&gt;
    &lt;p&gt;Ben: So thatâs your starting place as youâre taking over as CEO. The dot-com bubbles bursting, antitrust is dominating the companyâs culture and the external narrative. You have this big accounting headache that you now have to deal with that affects the way your profitability has shown. But then thereâs a decade after that where you triple the business, but the stock price is flat. Why didnât Wall Street get?&lt;/p&gt;
    &lt;p&gt;Steve: Iâm going to give you three reasons. Reason number one, and itâs material. Bill and I, and then me and Bill when I became CEO, we always were trying to tell people, donât get our stock price too high. Donât have too big expectations for us. We never wanted people to feel like they got cheated buying our stock.&lt;/p&gt;
    &lt;p&gt;Partly, probably weâre trying to lower the expectations on ourselves. I never thought of it that way. I donât think Bill did. But essentially that was part of it. So we do this financial analyst meeting every July, and weâd always warn people donât get too excited. Thatâs one.&lt;/p&gt;
    &lt;p&gt;As part of that whole theme, Bill never went to a quarterly analyst call, and I never went to a quarterly analyst call. If you really think about it, part of morale is the stock price. It is. It took me a while to realize that, but I then never broke my pattern.&lt;/p&gt;
    &lt;p&gt;Itâs like going to the newspaper every day. You donât sell stock every day, so you really should only care what the stock price is when you sell stock. But people go every day and itâs like, oh, did my team win last night? Itâs like going to the sports section, say how did the Clips do last night?&lt;/p&gt;
    &lt;p&gt;So talking more regularly to investors and talking not pie-eyed but a realistic view. We gave no guidance. I had to fight people. They wanted to give guidance and I didnât want to give guidance. Why? Just deliver the results you get? There was a bit of a Buffet style thing going on, because Bill and Warren were very good friends and Warren didnât go to quarterly calls, I donât think. But heâs warned.&lt;/p&gt;
    &lt;p&gt;David: I donât even know if they do quarterly calls. I donât think they do.&lt;/p&gt;
    &lt;p&gt;Steve: If they do the annual meeting, obviously. Letâs call that a first reason.&lt;/p&gt;
    &lt;p&gt;A second reason is yes, I did take over when the stock was ridiculously too highly priced.&lt;/p&gt;
    &lt;p&gt;Ben: But that normalized within a year or two.&lt;/p&gt;
    &lt;p&gt;Steve: The bubble burst. It normalizes some, but it creates another narrative about things.&lt;/p&gt;
    &lt;p&gt;Next, I was hardcore about telling people Iâm going to spend to do the things we need to do to succeed.&lt;/p&gt;
    &lt;p&gt;David: Thatâs not what Wall Street likes to hear.&lt;/p&gt;
    &lt;p&gt;Steve: No, but I was viewed as a spender, and I was much louder on this than Satya is on anything financial, because itâs how Iâm programmed. Heâs programmed a little differently. And Amy is more balanced. Sheâll talk about balance, and I would say weâre going to win with Surface, whatever it is.&lt;/p&gt;
    &lt;p&gt;Ben: If I could paraphrase my view of it, you were willing to say, weâre going to spend whatever it takes. Amy goes and says, Iâm going to account for every dollar of spend real tight and make sure that every dollar demands a return.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. I had no credibility in terms of what some investors wanted to hear. And my actions were consistent with that. Itâs not like they were inconsistent.&lt;/p&gt;
    &lt;p&gt;Then lastly, people did worry about the future of a couple of our franchises, most notably Windows. You get all these things, narrative, transition from high price, some issue about franchises, and me being a big spender, no wonder the stock stayed flat. By the end of my tenure, it was even bothering me.&lt;/p&gt;
    &lt;p&gt;David: When did it start to bothering you?&lt;/p&gt;
    &lt;p&gt;Steve: Towards the end. At some point I just got too tired. But by then, it was also probably hard for me to reset that dialogue, for me to go to investors and say, aha, Iâm a changed man. Iâm not going to spend anymore. Nobody was going to believe that shit. They just wouldnât have believed it. You canât come in and say, well, Iâve been a certain way for about 30 years, but hey, Iâm a new man. Iâm reformed. That doesnât work that way if youâre a spender.&lt;/p&gt;
    &lt;p&gt;David: I worship at the altar of capital allocation now.&lt;/p&gt;
    &lt;p&gt;Steve: If youâre a spender, youâre a spender. If youâre not good with investors, theyâre not going to buy in overnight that youâve changed. I didnât intend it that way, but thereâs a certain disrespect by not going to quarterly calls.&lt;/p&gt;
    &lt;p&gt;With hindsight, people arenât going to say, oh, he is showing up. Heâs a changed man. He used to tell us the stock price was too high or worry about it. Now heâs going to tell us, no, the stock should be okay. It should be higher. No. There was no way to reset the investor view of me.&lt;/p&gt;
    &lt;p&gt;Ben: You need a full rebrand, full clean slate. Some newâ&lt;/p&gt;
    &lt;p&gt;Steve: Well, you probably need a full new CEO. When I wrote my letter of goodbye to the board, I did say, hey, look. This is a unique opportunity. There are a lot of things in our brand, in our image that would only be able to be reset by having a new CEO. People donât walk in and say, oh yeah guys are changing. Itâs hard to change the narrative without the change.&lt;/p&gt;
    &lt;p&gt;Now Iâm not saying that means CEO should go every time thereâs a bad narrative. Thatâs not really my point. But it just gets harder. I may have only been CEO since 2000, but itâs not like I wasnâtâ&lt;/p&gt;
    &lt;p&gt;David: Been there since 1980.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, I was there since 1980. Essentially, Iâd been the second voice of the company for 20 years. Then for 14, I was the first voice, theoretically. Although that had some complexity too.&lt;/p&gt;
    &lt;p&gt;Ben: I get the sense by the end it wasnât fun for you anymore too.&lt;/p&gt;
    &lt;p&gt;Steve: Thatâs not true.&lt;/p&gt;
    &lt;p&gt;Ben: No?&lt;/p&gt;
    &lt;p&gt;Steve: No. The toughest time was probably the ship of Vista. That was probably the toughest time, that in the early 2000s when I took over. My little sheet here, I highlight that 1998 to 2004 were tough years, plus Xbox. Because thatâs the antitrust. Thatâs where I moved back to be president of the company and then CEO. Bill and I went through a year where we didnât speak.&lt;/p&gt;
    &lt;p&gt;Ben: Really?&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. I think it was basically from some time in about March or April of 2000â2001. Literally, we werenât speaking. I didnât know what it meant to be his boss, and he didnât know what it meant to work for me. I knew he was struggling with the DOJ and all this.&lt;/p&gt;
    &lt;p&gt;When he asked me to be CEO, I said, do you really want me to be CEO or do you just want me to be a figurehead? He said, no, I want you to be real CEO. Okay. That meant something to me. I would probably have said yes even if heâd said be a figurehead. But he said what he wanted and probably him saying to himself, hey, Iâve got to have a transition path. So I said, okay. Iâll do that.&lt;/p&gt;
    &lt;p&gt;Well, he didnât know how to show me a different kind of respect. I didnât know how to show him a different kind of respect. There were things where I just disagreed with him, and now I expected it to go the other way. I was always happy. I was happy being a number two guy. I was fine. Salute. I donât like the decision. I either salute or Iâd body punch and then salute, or body punch and heâd agree with me. Body punch means itâs a slower process.&lt;/p&gt;
    &lt;p&gt;Then we didnât know how to do that. We just didnât know how to do that. After a year, we started talking again. Basically our wives were the ones who pushed us back together. We had a very awkward dinner at a health club down the street here, but we get back together. But we never really got the right mojo. Billâs chief software architect, and I was very deferential then to product direction from Bill.&lt;/p&gt;
    &lt;p&gt;Ben: Heâs working on Longhorn at this point because itâs post XP.&lt;/p&gt;
    &lt;p&gt;Steve: Which was a mistake. Longhorn was a big mistake. I have to take accountability. I was a CEO, Billâs got to take a lot of accountability. It was the mistake of mistakes. Between the company, Bill and I disagreed about whether we should do hardware. That was a big one. We did. Surface was a big disagreement. Phone, big disagreement. HoloLens, big disagreement.&lt;/p&gt;
    &lt;p&gt;David: What about Azure? Were you aligned?&lt;/p&gt;
    &lt;p&gt;Steve: Bill was fine with Azure. The cloud Bill and I had agreed on in the 90s. Energizer, Energizer. I think Energizer could have been Billâs idea, not mine. Pretty sure it was Billâs idea, not mine. I executed, but Billâs idea, not mine. But we never hit it. There were places there should have been more contention. Maybe even during the late 90s. I donât know. But there were certainly places where there should have been more contention.&lt;/p&gt;
    &lt;p&gt;My gut, these are the smart technical guys, Bill, and Iâm trustingâ¦&lt;/p&gt;
    &lt;p&gt;Ben: Vista.&lt;/p&gt;
    &lt;p&gt;Steve: Iâm beginning to have a pit in my stomach. But we didnât have the right contention. This is not directed at Bill personally, itâs directed at all of this. We had an emperor that had no clothes. That was in Longhorn. It was the emperor that had no clothes. Partly, it was the centrality of Windows and the notion that Windows would say central, therefore people would all want this new stuff.&lt;/p&gt;
    &lt;p&gt;Partly there was too much change all at one time. We didnât do a new operating system, but we were doing a new operating system. It may not have sold it all, but we probably wouldâve done better.&lt;/p&gt;
    &lt;p&gt;Ben: Just not calling Windows.&lt;/p&gt;
    &lt;p&gt;Steve: Well, no. Forget what we called it. Just starting from scratch. Maybe keeping parts of the kernel, but otherwise starting from scratch and throw out all the scruff. Now, I donât think we wouldâve popularized it. If weâd looked at it that way, we probably wouldnât have built it.&lt;/p&gt;
    &lt;p&gt;But by then we were a little cocky about Windows and it was our thing. I donât think we had the right grind in our system there in the early 2000s. Between Bill and I, did we make some good decisions? Yeah, we did make a good decision to do Xbox. Were we doing too many things? Yeah, we were doing too many things.&lt;/p&gt;
    &lt;p&gt;I would say there was probably a voraciousness misplaced by Bill and me. Maybe I had to be deal with some of the pragmatics of hiring people and stuff, so I didnât push back on it. But I probably felt the pain a little bit more in terms of trying to hire people.&lt;/p&gt;
    &lt;p&gt;So thatâs 2000â2004. Then by 2004, Bill was already started talking to me about wanting to be able to go. Then in 2006, we announced that he was going to go in 2008. I also think we screwed that up. You canât have a long goodbye. Long goodbyes are not helpful.&lt;/p&gt;
    &lt;p&gt;David: Yours was short.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, it was goodbye. I stayed on the board for one more board meeting after I left. That was it. But a long goodbye, nobody knows their role.&lt;/p&gt;
    &lt;p&gt;I think I did some of my very best work after Bill left. If you ask me when do I think I did my best work, when I started, and when I was running sales and evolving this enterprise business. Some when I ran system software, and then the last six years I was there. Thatâs cloud, thatâs surface, thatâs some of the improvements in Windows. I feel really good about my last six years.&lt;/p&gt;
    &lt;p&gt;Bing. I think thatâs when we hired Qi Lu. Do you guys know the story of Qi Lu at Microsoft? Qi Luâs one of the most pivotal things at Microsoft? Why?&lt;/p&gt;
    &lt;p&gt;David: I knew he was important, but tell us the story.&lt;/p&gt;
    &lt;p&gt;Steve: Pivotal in a way you may not even know. First of all, brilliant guy. Great guy. Qiâs talking about leaving Yahoo. Heâs at Yahoo at the time. Qi (I think) went to graduate school with Harry Shum, who had been in Microsoft Research. Harry was now working on search, and he was working for Satya who was running Bing.&lt;/p&gt;
    &lt;p&gt;Ben: Thatâs an amazing sentence all in itself. Oh, Satya the guy who was running Bing.&lt;/p&gt;
    &lt;p&gt;Steve: He was running Bing. Harry says, Qiâs a genius. Weâve got to hire Qi. I donât know if Qi really wants to work for. Well, we got to pick Qiâs brain. We just have to learn from Qi Lu.&lt;/p&gt;
    &lt;p&gt;Okay. Satya, me, Harry, fly down to California and we meet with Qi Lu. We talk to Qi. Qiâs brilliant and weâre learning all this stuff about Qi. Qi leaves the room. God, thereâs a lot. I donât know who throws the idea out at first, maybe Satya. We should hire Qi and I should work for him.&lt;/p&gt;
    &lt;p&gt;Ben: Whoa.&lt;/p&gt;
    &lt;p&gt;Steve: So Harry was all in. Harry worked for Satya who worked for Qi. Now we flipped it around.&lt;/p&gt;
    &lt;p&gt;David: You flipped the Whole reporting structure to hire Qi in the room.&lt;/p&gt;
    &lt;p&gt;Steve: After Qi walked, we talked for about 15 minutes. Then Harry calls Qi and said, do you mind coming back?&lt;/p&gt;
    &lt;p&gt;David: Wow.&lt;/p&gt;
    &lt;p&gt;Steve: I forget where Qi was thinking heâd take his next job. He had a next job in mind. Maybe it was with Baidu. I canât remember. Someplace.&lt;/p&gt;
    &lt;p&gt;David: Then what did he do at Microsoft that made him so impactful?&lt;/p&gt;
    &lt;p&gt;Steve: Itâs the story I just told you. Itâs what it told me about Satya. I love Satya. We were giving him more and more responsibilities anyway. But he told me this guy will do the right thing for the company. Heâll prioritize that. He doesnât have an ego that gets in the way. And Qi did great work. Qi knew about search. He was an old pro at it.&lt;/p&gt;
    &lt;p&gt;Ben: And it started cash flowing billions of dollars eventually.&lt;/p&gt;
    &lt;p&gt;Steve: Eventually. Satyaâs not an engineer by training. Qiâs an engineer. Heâs a PhD in computer science. He had a lot to bring. Satyaâs been great at managing product development, thatâs for sure, but Qiâs digging the bits and bytes kind of thing. But the meeting is the thing that was important. Qi was important, sure, but what Satya and Harry did that day where they just found a guy and said, please Steve, go hire him as our boss.&lt;/p&gt;
    &lt;p&gt;Ben: You donât hear that very often.&lt;/p&gt;
    &lt;p&gt;Steve: No.&lt;/p&gt;
    &lt;p&gt;Ben: What year was that?&lt;/p&gt;
    &lt;p&gt;David: It was after Yahoo, 2008â2009.&lt;/p&gt;
    &lt;p&gt;Ben: Six years before Satya became CEO for five years.&lt;/p&gt;
    &lt;p&gt;Steve: 2009, yeah. And that let me then be able to also say, now I can give Satya more responsibility doing something else.&lt;/p&gt;
    &lt;p&gt;Ben: Why did you move him to server and tools?&lt;/p&gt;
    &lt;p&gt;Steve: We had Qi, so we could probably move him. I thought it would be important to give him other experiences, to try to get him to be able to be CEO. He was on a list of three or four internals at that time, who he said heâd been on a list of guys we had been talking about because we did an annual succession plan thing.&lt;/p&gt;
    &lt;p&gt;The succession plan has two candidates. Itâs what happens if you get hit by a bus and what happens if you get served to term, whatever term feels like. And theyâre different people. If Satya gets hit by a bus, if Satya serves another five years, itâs probably a different person. I think thatâs true in most companies. You got to think about it differently.&lt;/p&gt;
    &lt;p&gt;Anyway I said, hey, get him another experience. He hasnât worked in apps, hasnât worked in server and tools, and it was a good time to switch things around. Bob wound up obviously being super successful because. Bob was running server and tools at the time. I love Bob. Bobâs, one of my favorite guys Iâve ever worked with.&lt;/p&gt;
    &lt;p&gt;Ben: Went on to be CEO of Snowflake.&lt;/p&gt;
    &lt;p&gt;David: Snowflake, yeah.&lt;/p&gt;
    &lt;p&gt;Steve: Absolutely.&lt;/p&gt;
    &lt;p&gt;David: Worked out for everybody.&lt;/p&gt;
    &lt;p&gt;Steve: Heâs done fantastically well, but we moved Satya into that job. He was on a great path, and Qiâs hire made search as stronger, showed just how right Satya was. We talk about this in basketball. Is it all about team first or not? All about team first, which is essential. We were able to give them the additional experiences, which were super helpful in terms of him then taking over as CEO.&lt;/p&gt;
    &lt;p&gt;David: Thatâs why Azure was turbocharging.&lt;/p&gt;
    &lt;p&gt;Ben: All right. Listeners, we want to thank our newest sponsor and friend of the show that we are very excited about, Anthropic.&lt;/p&gt;
    &lt;p&gt;David: Anthropic is the team behind Claude. Whether youâre running a business today or flying solo, Claude isnât just another AI tool. Itâs becoming the central operating system for how forward-thinking companies work.&lt;/p&gt;
    &lt;p&gt;Ben: Listeners, thereâs something you should know. Claude actually helped us create this sponsor read. We fed it a few past sponsor reads as examples, and it came back with basically this before a little bit of tweaking from David and I.&lt;/p&gt;
    &lt;p&gt;David: This itself is a pretty great demonstration of how Claude can be useful and took less time than running upstairs from my studio to grab coffee.&lt;/p&gt;
    &lt;p&gt;Ben: What makes Claude different is the quality. It handles the hard stuff, writing and debugging code to build software, analyzing 100-page documents, managing complex multi-step projects, but more importantly, it does them well. Claude is designed to be more accurate, more trustworthy, and tasteful than any AI youâve ever tried.&lt;/p&gt;
    &lt;p&gt;David: Think of Claude as that impossibly organized coworker, who knows every project, has read every document, and can find that email from six months ago.&lt;/p&gt;
    &lt;p&gt;Ben: But hereâs the game changer. Claude connects to everythingâyour CRM, calendar, email, project tools, internal docs. Claude unifies them all into one place through something called MCP (Model Context Protocol), which everyone seems to be talking about this week.&lt;/p&gt;
    &lt;p&gt;Claude can build any MCP connection you need. You just have to ask. Instead of juggling tools, Claude becomes your command center, pulling data from everywhere, spotting patterns across all your software, and surfacing insights that you would never find manually.&lt;/p&gt;
    &lt;p&gt;David: Itâs super cool. Major companies are already seeing results from connecting all their systems. Snowflake uses Claude to answer key business questions with just English instead of writing SQL. Zoom feeds their meeting recordings into claw to automatically create summaries and action items, turning hour-long calls into clear next steps.&lt;/p&gt;
    &lt;p&gt;Ben: If youâre ready to stop switching between tools and start using AI as your business hub, get started at claud.ai/acquired, and just tell them that Ben and David sent you.&lt;/p&gt;
    &lt;p&gt;We want to talk a little bit about your post-Microsoft term, but letâs leave Microsoft with a final question of why did you resign?&lt;/p&gt;
    &lt;p&gt;Steve: Two or three things. Number one, the phone was very on my brain. When you said, are you having fun? That was the thing that was eating at me the most, was the phone. I decided we needed to flip the model around. Your episodeâs pretty good about all that happened, so Iâm not going to go through all that.&lt;/p&gt;
    &lt;p&gt;I knew we had to do hardware. I knew it. There was just no question. We werenât going to be able to play this Android/search game because we just didnât have the power of monetization that they did. Appleâs Apple, but theyâre going to be two phones. Itâs not like thereâd only be one phone that was popular in the world. This is something you guys didnât put in the episode.&lt;/p&gt;
    &lt;p&gt;I had talked about buying a phone company for a number of years before the Nokia deal. I forget what year it was. I flew to Taiwan and we were looking at buying HTC. They were the biggest Windows phone OEM at the time. Nokia wasnât signed up.&lt;/p&gt;
    &lt;p&gt;I finally just decided, Terry Myers and I, we had 3â4 trips to Taiwan to talk to Peter, look at the organization. I just decided it would be too tough to buy a Taiwanese company, that I would worry too much about the integration. I liked Peter Chou who ran HTC. I donât know if that name means anything to you guysâ¦&lt;/p&gt;
    &lt;p&gt;David: Yeah, of course.&lt;/p&gt;
    &lt;p&gt;Steve: â¦but Iâd been looking at that thing for two or three years maybe before. Bill and I continued to have all the tension we had about anything that had hardware in it. Itâs not like our relationship was calm. Itâs clear. It had always been bumpy. Even back to the beginning, I almost quit after four weeks because we were in it. Five weeks, maybe. Itâs not like it had ever beenâ&lt;/p&gt;
    &lt;p&gt;David: That wouldâve been a very poor economic decision.&lt;/p&gt;
    &lt;p&gt;Steve: It had never been linear. We had another big fight a year after about financial stuff. It had never been linear. It had helped build Microsoft, but that didnât mean it had always been easy for him or me.&lt;/p&gt;
    &lt;p&gt;The hardware thing was exacerbating our relationship. I thought we really needed to do a phone. Then the board said, no, we donât want to do a phone. I was very transparent with everybody. We brought the manager, you got this right. We brought the management team in. I donât know if it was more wanted to buy or didnât want, but I let everybody speak. Itâs a big decision to be in the phone hardware business.&lt;/p&gt;
    &lt;p&gt;We do the presentation, and the process from there to the time the board says no, I didnât find very respectful. The board didnât ask me to leave. I just didnât find the process very respectful. I probably wonât go into the detail of that. And a lot of it has to do again with my relationship with Bill.&lt;/p&gt;
    &lt;p&gt;I knew Bill didnât love the idea, and I was willing to accept whatever the board decided. I was, no question about that, but the process wasnât very good. I was not happy with the process, but they wanted me to stay.&lt;/p&gt;
    &lt;p&gt;I just decided two things. If weâre not going to buy a phone, thatâs my best shot for a consumer future for the company. Right now, thatâs my best shot. I tried to fire the Yahoo shot, the phone shot. Those were my two things, remember? Mobile and search.&lt;/p&gt;
    &lt;p&gt;I said, look. This might be the right time. We canât make my play here, not out of peak. Itâs just, hey, Iâd thought about this in advance and said, look. If it doesnât work, it doesnât work. If the board doesnât want to do it, fine. So I said, this is a good time.&lt;/p&gt;
    &lt;p&gt;Itâs also a good time because the cloudâs just coming on. Iâm saying to myself, look. Weâre going to have to build new capabilities. Even the way weâre moving to a gross margin to something below 100% gross margin business. We have whole new capabilities. We need to build up around that. I even think of it through the lens of the accounting system.&lt;/p&gt;
    &lt;p&gt;We had these revenue and cost reports. They have to change in the world of the cloud because you really have to get tight on gross margin not on revenue. I donât really pay much attention to Microsoftâs revenue. I pay attention to the gross margin growth.&lt;/p&gt;
    &lt;p&gt;Ben: These days, youâre saying.&lt;/p&gt;
    &lt;p&gt;Steve: Those days. When I said the move to the cloud, I used to say this to analysts, you should expect us, you want us to have lower gross margins going forward, but weâll make it up in volume. That is the whole process of the cloud. Lower gross margins. Itâs like Walmartâs an okay company even though that marginâs, whatever, 1.5%â2%. You just got to make it up in volume.&lt;/p&gt;
    &lt;p&gt;I knew it was a good time to let the new person build from what we had to the next generation of all the machinery that would have to happen to make cloud happen. I never lost my desire to be an end user company. I bemoaned the fact that I couldnât keep us focused on being an end user company/consumer. It killed me. You donât just, ah, I want to be a consumer company. No, you got to find the locomotives, not just a bunch of cabooses.&lt;/p&gt;
    &lt;p&gt;At the end of the day, Zune was a caboose. A lot of the things we invested in were cabooses. We had to find the locomotive. There were only two possible locomotives that made any sense. I didnât have a play that I thought was going to break through anytime soon in search.&lt;/p&gt;
    &lt;p&gt;Mobile was going to be really hard. But I knew in my heart of hearts that without physical hardware, we werenât going to break through there either because of search. Board said no. I said, okay. Bill and I are, itâs not really the board being disrespectful. Maybe it is, but itâs mostly me and Bill grinding. And thatâs never fun when we grind.&lt;/p&gt;
    &lt;p&gt;I say, okay, weâre grinding. I know itâs frustrating for him. Itâs frustrating for me. Weâre grinding. Here goes my idea. Oh, by the way, this is a great juncture point. I said, okay, Iâll pass. Then the board changed its mind.&lt;/p&gt;
    &lt;p&gt;Ben: So why did they end up buying Nokia then after your decision was final? You were out.&lt;/p&gt;
    &lt;p&gt;Steve: Oh, I donât know.&lt;/p&gt;
    &lt;p&gt;Ben: Maybe you donât know.&lt;/p&gt;
    &lt;p&gt;Steve: I donât really know. Iâm not sure they really understood, but I had told them about we had a deep partnership with Nokia and Iâm not really sure maybe guys really understood. I hadnât done a good job explaining how close the partnership was. There was really no, go back to Nokia and see if we can have a bigger partnership.&lt;/p&gt;
    &lt;p&gt;The problem with the partnership with Nokia is they didnât have the money to invest in marketing. We did. They did not have the ability to go deep pockets. We did. But if we didnât have the monetization capability back through the phone, we werenât going to be able to make it work as a partnership because we had to put in the cash and therefore we had to get the return, and it wasnât going to work.&lt;/p&gt;
    &lt;p&gt;David: It reached to a point where you had to buy the company or just cut bait totally on the whole thing.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, just because the math wouldnât work. What we had to do to be successful was beyond their financial capacity. But if we were going to do what it took to be successful, we couldnât do it on $4 [...]&lt;/p&gt;
    &lt;p&gt;Ben: You needed the margin dollars from the hardware too.&lt;/p&gt;
    &lt;p&gt;Steve: Exactly.&lt;/p&gt;
    &lt;p&gt;David: So you left. You did a pretty incredible thing, or really you didnât do an incredible thing. You held everything. Youâre still the largest individual shareholder in Microsoft.&lt;/p&gt;
    &lt;p&gt;Steve: I think I might be. Other than index funds, the largest institutional investor too.&lt;/p&gt;
    &lt;p&gt;David: And basically besides Vanguard.&lt;/p&gt;
    &lt;p&gt;Steve: Iâm not sure about that part, but yeah, it could be.&lt;/p&gt;
    &lt;p&gt;David: On the one hand I imagine it was very simple and youâve given reasons on other interviews in the past, youâre a loyal guy, et cetera. Just talk us through the emotions thinking about that. I imagine that was not so simple.&lt;/p&gt;
    &lt;p&gt;Steve: No. I leave, then what does it mean to emotionally detach? Because if youâre not there, you have to emotionally detach. You canât say because you donât, you canât control anything anymore. Itâs hard. You donât want to stay quite that emotionally attached because itâs like, oh, I got to get back in and fix everything.&lt;/p&gt;
    &lt;p&gt;But I said, Iâm going to be the best investor. Weâre going to know everything about this company. Iâm going to read everything just like I used to. Weâre going to go to conferences just like we used to.&lt;/p&gt;
    &lt;p&gt;I went to one shareholder meeting and I was a dick in my opinion. Literally one of the shareholder meetings. I was too emotionally attached. Took me about a year to say I just have to emotionally detach. It took some work, but I was able to get there. But Iâm still loyal. Didnât want to sell.&lt;/p&gt;
    &lt;p&gt;Thereâs one. Then we get our philanthropy started and then I do need to do something. We do need some of the asset value to give away. I went through a bit where we gave some away, i.e., we put it into our donor advised fund. I also sold a little bit at the time and I was thinkingâ&lt;/p&gt;
    &lt;p&gt;Ben: This is 2015-ish?&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. It might have been even 2016, something like that. Then because our philanthropy was just ramping up. Connie had been giving away money, but the dollar value was ramping up. Then I said, maybe I should just sell it all. Full emotional detachment. Letâs do full emotional detachment. Because look. It was my baby. Itâs my baby.&lt;/p&gt;
    &lt;p&gt;Iâm not a founder, but I think of myself as a founder. I was there so early and I hired basically everybody. Everybody was a senior leader Iâd recruited. Itâs not true anymore. Now things have changed. Itâs probably only 10% of the people who were there now were there when I was there or something. Higher at the senior levels. I can go through the math and why thatâs true.&lt;/p&gt;
    &lt;p&gt;David: But that wouldâve been a very understandable decision of, you know? Itâs time to just put it all away.&lt;/p&gt;
    &lt;p&gt;Steve: Just emotional detachment. It had nothing to do with money. My only thought process was emotional detachment. I was wrestling.&lt;/p&gt;
    &lt;p&gt;David: Youâre ready to hit the button. Youâre ready to hit theâ&lt;/p&gt;
    &lt;p&gt;Steve: It was wrestling. I was wrestling. Then the lady who works here, ex-Microsoftee who works here in finance, whoâs the woman who really charts whatâs going on financially at Microsoft, she and her boss, whoâs another ex-Microsoftee who used to work with me most closely on the financial stuff, but she says, you canât sell. You canât sell. This is going to be worth a lot more. You canât sell. You canât.&lt;/p&gt;
    &lt;p&gt;Ben: So she effectively made a Microsoft stock pick.&lt;/p&gt;
    &lt;p&gt;Steve: And she was recommending. She has some loyalty too. Itâs not like we have a bunch of Microsoftees here, and itâs not like they lack loyalty either, but it was a little bit loyalty and a lot a pick. I said, look. My loyalty trumps my emotional attachment. I can get through my emotional attachment, but my loyalty. And look. I think of the thing as like a two-headed hydra. I thought about this the whole way. Things could go to nothing or things could explode.&lt;/p&gt;
    &lt;p&gt;Thatâs partly why we tamped on the stock, because we always saw the possibility for either of two radically different outcomes. Then finally I say, look. Iâm not going to sweat whether weâre going to get the downside or the upside. Iâm just going to be loyal and Iâm going to be enough emotionally detached for this to be okay.&lt;/p&gt;
    &lt;p&gt;Ben: Because for you it doesnât matter. Thereâs not a downside that could be so bad that actuallyâ&lt;/p&gt;
    &lt;p&gt;Steve: No, I had enough money off the table that ah, itâs not like my familyâs going toâ&lt;/p&gt;
    &lt;p&gt;Ben: Could still run one of the best philanthropies of all time, even if the stockâ&lt;/p&gt;
    &lt;p&gt;Steve: Connie wouldâve been okay with it. She finds it difficult to give away as much money as we have. She wouldnât have mind a smaller problem to start with. She wouldâve been okay.&lt;/p&gt;
    &lt;p&gt;Ben: Iâve been charting it over the last three years. You guys are giving away almost somewhere in the neighborhood of a billion dollars a year.&lt;/p&gt;
    &lt;p&gt;Steve: Cash out the door.&lt;/p&gt;
    &lt;p&gt;Ben: But your net worth is ballooning every year way faster than you can give money away because of the Microsoft hold.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, Microsoft hold, but you may be missing one thing on the Microsoft hold thatâs important. And thatâs the size of the dividend check.&lt;/p&gt;
    &lt;p&gt;Ben: Ah.&lt;/p&gt;
    &lt;p&gt;Steve: Between Microsoft and the other stuff I own, the dividend checks are pretty close to what we give away. You can look at the appreciation, but weâre just above the dividend checks now.&lt;/p&gt;
    &lt;p&gt;David: Youâre just trying to shovel the money that is coming in the door, out the door.&lt;/p&gt;
    &lt;p&gt;Ben: So you can fund the whole philanthropy without selling additional shares.&lt;/p&gt;
    &lt;p&gt;Steve: Well, there are two things that are going on. One, the dividend checks are pretty good. And number two, I do have stuff thatâs not in Microsoft.&lt;/p&gt;
    &lt;p&gt;Ben: So you hold, I think mostly index funds outside of the Clippers, is that right?&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, Clippers/Arena index funds. I have one business I invested in with a guy who I went to college with who worked at Microsoft. Itâs called Stagwell Media. Itâs a marketing services company. Call it a modern day ad agency, but itâs not really an ad agency. A guy named Mark Penn. I do have some money thatâs not in index funds, but mostly Iâm in index funds.&lt;/p&gt;
    &lt;p&gt;David: Which that anybody else in the same couple of top pages of lists that youâre on, you must be the only one that operates like this. Everybody else, huge family offices, lots of investments, private equity funds.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, but I would say probably would find that Zuckerberg is pretty concentrated. I donât know this, but Iâm going to guess you would find, I donât know about Ellison, but obviously some of the guys who own more privately-held businesses pretty concentrated.&lt;/p&gt;
    &lt;p&gt;Ben: Required to be concentrated.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. Who else? The Google guys I imagine are concentrated, but I donât know that, I canât speak for anybody else. Obviously, Bloomberg is concentrated.&lt;/p&gt;
    &lt;p&gt;David: Well, I think in practice it all works out the same way of, thereâs one thing that is everything.&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. And look. If you sell it, youâre just going to pay capital gains taxes. If youâre really just being a financial monster about it, you got to decide, will Microsoft underperform the index by enough to offset the capital gains taxes.&lt;/p&gt;
    &lt;p&gt;I donât need the money. I got plenty to live on without selling anything. Thatâs number one. Financially, whereâs that money going to go? Some will go to my kids, but most of itâs going to go to the government or to philanthropy. Why would I sell, so we have less to give to philanthropy someday, unless I really think Microsoftâs going to underperform the market by essentially the capital gains rate.&lt;/p&gt;
    &lt;p&gt;Ben: I feel like Iâm watching a live USA facts video right here.&lt;/p&gt;
    &lt;p&gt;Steve: I got this question once. Iâm a member of a country club in LA, and one of the things country clubs do sometimes is theyâll do Q&amp;amp;A with members to entertain. I did a Q&amp;amp;A with a friend of mine at the club whoâd been president of the club, actually, and also as a knows Charlie Munger pretty well. Charlie Mungerâs there as well. Charlie Munger comes up to him beforehand. And to me. I know Charlie through Bill and Warren, and says, if you call on me, I have a question,&lt;/p&gt;
    &lt;p&gt;David: As only Charlie can.&lt;/p&gt;
    &lt;p&gt;Steve: You did a Charlie episode. We do our panel thing, the two of us, and then Q&amp;amp;A. Charlie gets up to the mic, heâs not moving super well, but he gets up to the mic and, oh, Charlie. We can call on you. Charlie says, Steve, Iâm wondering why you held onto your Microsoft stock when your partners over there didnât. I know youâre not that smart.&lt;/p&gt;
    &lt;p&gt;Steve: I said, no, Charlie, but Iâm not loyal. I donât know why Paul and Bill didnât hang on. I donât know. Youâd have to ask them. But for me itâs from the heart thing. And I think itâd be fine. Itâs not going to screw anything up financially. Whatâs the worst thing that happens? Microsoft goes to zero? Probably not, but even if Microsoft goes to zero, me and my family, we can live, we can give away money, itâs not going to go to zero. And Iâm okay any way it goes. Iâm fine.&lt;/p&gt;
    &lt;p&gt;Ben: And are the Clippers and the Intuit Dome fully paid off at this point?&lt;/p&gt;
    &lt;p&gt;Steve: The Clippers are fully paid off. I paid them off the day I bought them. Thatâs not true. I didnât want to sell stocks at the time, so I borrowed some money, which is long paid off.&lt;/p&gt;
    &lt;p&gt;Intuit Dome, we borrowed some money against Intuit Dome. I donât owe any money on it. Oh, thatâs not true. I owe some. I have some margin debt that I use to, but again, itâs just a timing thing. I didnât want to sell stock, so took some margin debt, which as dividends come in, Iâm reducing the margin debt.&lt;/p&gt;
    &lt;p&gt;But the building itself has debt on it. Why? Because to sell the building, letâs say something was to happen to me and Connie (my wife) had to sell, the buyer would have to come up with less cash because it has debt on it.&lt;/p&gt;
    &lt;p&gt;Call it worth X billion and itâs got Y billion on debt on it. Youâre only selling it for X minus Y. Youâre not selling it for X. Meaning the universe of buyers is bigger because it has debt on it. Oh, by the way, I happen to get the debt at a very good time, at a very good rate. Itâs a double value to a future buyer.&lt;/p&gt;
    &lt;p&gt;Thatâs the reason we put that on the building. The margin debt was just a timing issue, if you will.&lt;/p&gt;
    &lt;p&gt;Ben: I feel like weâve done you a great disservice by going into the Clippers and Intuit Dome throughâ&lt;/p&gt;
    &lt;p&gt;Steve: The financial lens.&lt;/p&gt;
    &lt;p&gt;Steve: Now, that I do not own the financial purposes. And I will also tell you, unlike Microsoft, it cannot go to zero.&lt;/p&gt;
    &lt;p&gt;David: Like the asset value?&lt;/p&gt;
    &lt;p&gt;Steve: Not a chance. It is far more secure than Microsoft. Why?&lt;/p&gt;
    &lt;p&gt;David: Not making more of them.&lt;/p&gt;
    &lt;p&gt;Steve: Theyâre not making more of them, and as long as anybody in the worldâs getting richer, the buyer pool will only go up. People donât buy them for their earnings. I wish we had more earnings, but at the end of the day, people are buying them because almost more like a piece of art.&lt;/p&gt;
    &lt;p&gt;Some people donât like negative cash flow, blah-blah-blah, but at the end of the day, I have the Clippers, we have the best market in the world. If you want to want to own a basketball team, other than maybe Miami, the only place players want to play is LA.&lt;/p&gt;
    &lt;p&gt;If youâre a buyer, where do you want to go if you donât live in LA? Where do you want to go? Well, you want to go to LA or you want to go to Miami. You donât want to go to New York in the wintertime. If youâre a foreign buyer, potentiallym, you want to go to LA.&lt;/p&gt;
    &lt;p&gt;That asset valueâwe should get onto something other asset valueâIâm not selling the thing. My estate may sell it. I donât know what Connie and the kids will want, but at the end of the day, that one does not have a lot of volatility.&lt;/p&gt;
    &lt;p&gt;David: Itâs a nice retirement fund. Whatâs been the most surprising thing in your Clippers journey?&lt;/p&gt;
    &lt;p&gt;Steve: Iâll give you two parts of the answer. First is how I relate to that business versus the businesses Iâve known. Number one, there are more similarities than I ever thought. We do version upgrades just like you do. Whatâs a version upgrade? You do major version upgrades over the summer. Thatâs the draft and free agency and trades. And you do a minor version upgrade at the time of the trade deadline. Itâs very simple.&lt;/p&gt;
    &lt;p&gt;David: You got a six month ship cycle.&lt;/p&gt;
    &lt;p&gt;Ben: Your service pack.&lt;/p&gt;
    &lt;p&gt;Steve: A major pack, minor release every year.&lt;/p&gt;
    &lt;p&gt;David: SP1 and SP2.&lt;/p&gt;
    &lt;p&gt;Steve: And oh, by the way, how people like agile now development, guess what? Thatâs called changing the game plan per the coaches are always modifying in that sense. Itâs a little bit similar. Ah, I never thought about that. The business is just like Microsoft. We sell both advertising and thatâs called sponsorship. We sell tickets.&lt;/p&gt;
    &lt;p&gt;David: Software licenses.&lt;/p&gt;
    &lt;p&gt;SteveOh, no. Thatâs only software licenses. We have an OEM business thatâs called broadcast revenue. Itâs 100%.&lt;/p&gt;
    &lt;p&gt;David: Remarkably similar.&lt;/p&gt;
    &lt;p&gt;Steve: Just the terms of business model. We do have a union. Thatâs very different. What that means in terms of the complexity through the collective bargaining agreement, it also covers things like whatâs max salary, what trades can you make, all that very different. You actually really are business partners with your competitors. Thatâs different. You actually get together and talk to them. I never did that when I was at Microsoft. Youâre get together and you talk to them, but youâre trying to compete.&lt;/p&gt;
    &lt;p&gt;If you have somebody who wants to advance through their career, oftentimes the best way for them to advance, they have to go to another team. We have a president of basketball. Itâs not an open job. I donât plan for it to be an open job. I donât want to lose anybody. But if a lot of the career moves people make would be to other organizations. We donât like that. But we want to have the talent. Everybody loves.&lt;/p&gt;
    &lt;p&gt;David: Microsoft, your domain is always growing.&lt;/p&gt;
    &lt;p&gt;Steve: The domain is growing, or number of people, you can move people. Oh, youâre an engineer. Youâre bored. Youâve worked on X. Weâll move you to work on a different product, for example. Itâs different the way you think about people, primarily because of the union, but also there are only 30 head coaching jobs. There just are. If somebody wants to be a head coach and theyâre not our head coach, they have to find a job someplace else.&lt;/p&gt;
    &lt;p&gt;Again, not what we want, but the reality is we donât want people held back in their career. Itâs not like Microsoft where I felt like I could always find a job that somebody should want. Thatâs different.&lt;/p&gt;
    &lt;p&gt;Iâll give you another one to think about. Business likes to say, oh, weâre accountable, weâre agile, weâre this, weâre that. Sports is so much more accountable than business. Itâs like a joke. Iâm being a bit extreme for fun. But every 24 seconds, you get a report card. Basketball shot clock every 48 minutes.&lt;/p&gt;
    &lt;p&gt;You canât say, Iâm going to make it up next quarter. We missed, but I got it next quarter. No. You lost that game, that game is on, you lost comp for the rest of the season. You cannot dig yourself out of that one game loss hole. You canât. Itâs gone.&lt;/p&gt;
    &lt;p&gt;David: And you can probably also be reasonably confident about each individualâs contribution to that win or loss.&lt;/p&gt;
    &lt;p&gt;Steve: Now let me get to that. Your customers know everything you know. Itâs not like you could say back in the lab, you wait until you see what we got in the lab. No. Every statistic we have, our customers have.&lt;/p&gt;
    &lt;p&gt;You want to know how many miles James Harden ran last game? Comes out of the statistical systems. You can find that out. If you want to know how many pick and rolls we ran of a certain type, how they were guarded, and how we did scoring against them? Donât worry, you can read about it.&lt;/p&gt;
    &lt;p&gt;You want to look and see what the dynamics look like on the sidelines? You can just sit there and watch our players and say, oh, I donât know everything. I donât know what theyâre saying, but I can see their body language. Oh, so and so seemed severely charged up. Oh, thatâs great. So and so cheers for their teammates. So and so seemed down. Thereâs almost nothing. We get to watch practice, our fans donât. But the level of accountability is so high. The speed is high.&lt;/p&gt;
    &lt;p&gt;Think of teamwork. Teamwork, man. Itâs all on display. Not only is it on display, but you absolutely know you need teamwork. One star canât bail you out. You may have one star, but then the pieces have to fit around the star. Itâs just the way it is.&lt;/p&gt;
    &lt;p&gt;You know how businesses, you say, okay. Everybody wants to talk about teamwork. In a lot of places that would mean, hey Ben, I donât know. We could work better on this. Then Ben can say, your teamâs doing things wrong. Then we can get back together and talk a little more. Then a month later we can talk about it some more. Probably youâve seen this in some organizations.&lt;/p&gt;
    &lt;p&gt;Ben: And then at some point, weâll talk about it as if it were a great collaboration between our two teams.&lt;/p&gt;
    &lt;p&gt;Steve: And what has to happen in our business?&lt;/p&gt;
    &lt;p&gt;David: You actually got to pass the ball.&lt;/p&gt;
    &lt;p&gt;Steve: You have to actually say it, pass the ball. Or hey, this isnât working. You got to do X. You got to give real time feedback. You canât lolly gag. Ah, well letâs rub each otherâs belly. No. If you want that team to be better, you have to hold one another accountable. Not just the coach.&lt;/p&gt;
    &lt;p&gt;The best teams, the players hold each other accountable, and not just the best player holds everybody else accountable. Everybodyâs got to hold everybody accountable, which really means give the feedback.&lt;/p&gt;
    &lt;p&gt;In Microsoft, we got rid of the value called teamwork. I didnât want that one. I said open and respectful and dedicated to making others better, because teamwork could sound like a treat. Everybody nice, nice. Open? Yes. Got to say whatâs on your mind. Respectful? Yes. But number one, dedicated to making each other better, which I think is what the purpose of teamwork is, as opposed to the word teamwork.&lt;/p&gt;
    &lt;p&gt;Ben: Oh, thatâs interesting. Teamwork is an implementation detail, but thatâs not actually the goal. We donât seek to have an organization full of teamwork. Itâs teamwork because we want some output.&lt;/p&gt;
    &lt;p&gt;Steve: Exactly. I think back to the old HP, Iâm okay, youâre okay. Letâs all be nice to each other. Thereâs a little bit of that thatâs come back into the general narrative of culture today, generations much younger than me. But at the end of the day, if you want to succeed, youâre right. The goal is succeeding. Play well together. In the NBA team, youâre going to know in 2Â½ hours or so, 2 hours, youâre going to know.&lt;/p&gt;
    &lt;p&gt;David: Itâs interesting. Professional sports is maybe like the last bastion of thereâs not room for the Iâm okay, youâre okay, letâs talk this out. Oh, your teamâs talk to my team. Itâs extreme accountability.&lt;/p&gt;
    &lt;p&gt;Steve: Extreme accountability, extreme teamwork. I learned some things that wouldâve been very helpful for me to understand at Microsoft.&lt;/p&gt;
    &lt;p&gt;Iâll give you another one. Reference checking. Everybody does reference checking. How good is the reference checking in most businesses?&lt;/p&gt;
    &lt;p&gt;David: Not good.&lt;/p&gt;
    &lt;p&gt;Ben: Most people call front of sheet references, which has never made sense to me.&lt;/p&gt;
    &lt;p&gt;Steve: Or you call somebody who probably doesnât feel like they can give you an honest answer because they donât want to get sued or blah-blah-blah. Basketball? You should see the amount of reference material we have on a guy before we draft them. People have talked to their old coaches, theyâve talked to their teammates. Thatâs what scouts do. Theyâve watched them play, theyâve been to practices, they know what theyâve talked to references about work at.&lt;/p&gt;
    &lt;p&gt;Ben: Imagine if you could scout your future employees. You could just go hang out at their current job.&lt;/p&gt;
    &lt;p&gt;Steve: Or you talk to their parents. There are so many things.&lt;/p&gt;
    &lt;p&gt;David: The draft choices are such a crucible decision because free agency, you mostly know what youâre getting. They have a body of work.&lt;/p&gt;
    &lt;p&gt;Steve: You can see the body of work. You may know what happens behind the scenes. You may not.&lt;/p&gt;
    &lt;p&gt;David: So thereâs some risk to it, but thereâs a body of work. A draft, you get two choices every year.&lt;/p&gt;
    &lt;p&gt;Steve: Well, we traded some away, but yes.&lt;/p&gt;
    &lt;p&gt;David: But in theory. In aggregate, every team gets two choices every year, and you could choose to deal those choices. And thatâs hugely, hugely impactful.&lt;/p&gt;
    &lt;p&gt;Steve: And youâre dealing with one other thingâmy wife reminds meâboysâ brains donât fully develop until theyâre what, 25? Weâre drafting guys who are 19, 20, 21. Youâre also having to say by everything I know, what do I project that guy looks like? You could say you enter your prime around 27, what do you start looking at though? Youâre going to look pretty good or not by 23, 24, 25. You have to have a progression of what you think happens to the young man when you draft him.&lt;/p&gt;
    &lt;p&gt;The more reference checking, much bigger deal I found. People say, oh, well itâs simple. Itâs sports. The strategy decks I get, 35 PowerPoints, 40 PowerPoints, easily to go through. Okay, hereâs our strategies. What about this? What if? What about this. What do we do here? We have a PhD physicist who is a key part of our analytics group, focuses on our analytics systems. Itâs not like this stuffâs not complicated. It is.&lt;/p&gt;
    &lt;p&gt;Ben: Analytics has become this really big buzzword in sports. Where do you see real alpha actually happening in data science and sports, versus whatâs just table stakes at this point?&lt;/p&gt;
    &lt;p&gt;Steve: There are two ways to use analytics. One is for game planning. Literally, what does this tell us about the best way to guard Anthony Edwards in this situation or these situations? Very helpful for that.&lt;/p&gt;
    &lt;p&gt;Iâd say the data is probably table stakes, honestly. The way you use it, not so much do you ask the right questions? Maybe not. Does coach really understand and embrace? Are the analytics people really able to mind meld with coach so that coaches get the insights they can for game planning?&lt;/p&gt;
    &lt;p&gt;The second is, what about for drafting and trading? Analytics are actually a little less important in that instance. Because they donât really tell you how, if you mix Charlie with Harry, itâs different than if you mix Charlie with Bobby. And Charlie and Harry havenât played together before. So itâs a little different, and they are helpful.&lt;/p&gt;
    &lt;p&gt;We have analytics, for example, and all the kids weâre going to draft, less valuable than on pros because youâre playing against a different level of competition. Do people have differential data? Not much. The same cameras in the ceiling are recording the same games. Most of the analytics data now gets processed through standard software packages that get licensed to everybody.&lt;/p&gt;
    &lt;p&gt;Thereâs a company called Hawkeye Second Spectrum. Basically, theyâve built machine learning layers on top of the raw motion data, et cetera, so every team winds up with the same tools. Doesnât mean you donât need smart guys. It doesnât mean you donât do analysis on top of it.&lt;/p&gt;
    &lt;p&gt;Ben: Has anyone had a breakthrough form of measurement? Is there an example in the last five years of a team thatâs had a great data source emerge?&lt;/p&gt;
    &lt;p&gt;Steve: A different data source than other people have? No, I donât think so at all. Itâs the things people emphasize in terms of what they look at could be different (I think) very much by teams. Theyâre teams at the draft who just have you take a psychological test, you get to interview a set of kids and they might just have you take a test.&lt;/p&gt;
    &lt;p&gt;Other teams, itâs all about the interview. Some people, I donât know if they see psychologists. I donât know. But people will use different techniques to try to do some of that. Itâs a little different from analytics, but it gives you the sense of how do you assess whatâs important.&lt;/p&gt;
    &lt;p&gt;Ben: Fascinating,&lt;/p&gt;
    &lt;p&gt;David: Interesting. How does Intuit Dome fit into all this?&lt;/p&gt;
    &lt;p&gt;Steve: I love Intuit Dome. Since we talked a lot about products, and Iâve been involved in (Iâll say) the visioningâI call myself a visionaryâwhat should this product look like, particularly a number of them, both Windows but also certainly on the backend productsâbackend meaning theyâre not customer visibleâIâd say Intuit Domeâs probably the product for which I had the clearest vision Iâve ever had. I knew what I wanted. It evolved some because we went and looked at a bunch of other arenas. But I had a point of view. I know what user I wanted to make happy.&lt;/p&gt;
    &lt;p&gt;Ben: So I bet a lot of people arenât familiar what is the thesis behind Intuit Dome?&lt;/p&gt;
    &lt;p&gt;Steve: I wanted to make Intuit Dome the best place for the hardcore basketball fan.&lt;/p&gt;
    &lt;p&gt;Ben: And particularly the hardcore Clippers fan, right?&lt;/p&gt;
    &lt;p&gt;Steve: Sure, of course, because weâre the only team that plays there.&lt;/p&gt;
    &lt;p&gt;David: Youâve got another team who plays there every night. Youâre visiting team, but not trying to help them.&lt;/p&gt;
    &lt;p&gt;Steve: Yes, Clipper fans, but weâre going to have the Olympics. Weâll have every Olympic basketball game. And Intuit, I want it to be great for those environments. We have some college games or high school games in there. Basketball, basketball, basketball.&lt;/p&gt;
    &lt;p&gt;You sit in there and youâre a fan. Itâs a live event. Got to have energy, got to have intensity. If youâre a basketball fan, come on, letâs go. So you want it tight. You want to have it reverberating with people who are cheering.&lt;/p&gt;
    &lt;p&gt;Essentially, a whole side of the building is structured more like a college gym. Long and steep, there are no suites on the side. We even built a student section right in the middle. Itâs standing room only. You must stand. Thatâs what you have to agree to if youâre going to be there. You have to agree to stand. You have to agree to cheer. If you donât, weâll find you another place in the building to sit.&lt;/p&gt;
    &lt;p&gt;You canât wear visiting gear paraphernalia on that whole side. Four thousand seats. Will move you if otherwise. Itâs small. Not the number of seats is a little small, but the way we pulled it together, thereâs no hockey. I didnât want hockey. Not that hockeyâs not a great sport, butâ&lt;/p&gt;
    &lt;p&gt;David: Compromises youâd have to make to the arena.&lt;/p&gt;
    &lt;p&gt;Steve: You have to spread it out. You have to spread people out because the rink is bigger than the court. Very different. We have an acre of scoreboard.&lt;/p&gt;
    &lt;p&gt;David: The halo board is unreal.&lt;/p&gt;
    &lt;p&gt;Steve: More statistics. We went 4K from the start.&lt;/p&gt;
    &lt;p&gt;David: I didnât realize itâs an acre. You have an acre of scoreboard.&lt;/p&gt;
    &lt;p&gt;Steve: Between the inside and the outside, itâs almost an acre.&lt;/p&gt;
    &lt;p&gt;Ben: Itâs the largest indoor screen in the world.&lt;/p&gt;
    &lt;p&gt;Steve: For sure.&lt;/p&gt;
    &lt;p&gt;Ben: And what you were describing before is the wall. For any fans or listeners who havenât seen a game there or seen anythingâweâve done interviews about thisâitâs an unbrokenâ&lt;/p&gt;
    &lt;p&gt;Steve: Fifty-one rows, unbroken all the way up. I call it the student section. We call it the swell, Clippers, waves, get it? Swell. The swell is right in the middle. They do a chant before the game starts. Theyâre chanting, theyâre making noise, a bunch will find weird things they want to bring to games. Funny posters. You basically sign up, first-come-first-serve. If youâre not there early, youâre not in the swell, that game.&lt;/p&gt;
    &lt;p&gt;We oversell the section. Itâs $1000 for the year, which is only $25 a game. Hell of a price. Youâre expected to deliver the goods. You have to deliver.&lt;/p&gt;
    &lt;p&gt;David: You got to bring the value.&lt;/p&gt;
    &lt;p&gt;Steve: You got to bring the value.&lt;/p&gt;
    &lt;p&gt;Ben: And the thesis behind the wall, if Iâm understanding correctly, is it should be easy to be a Clipper player, but hard to be an opposing player.&lt;/p&gt;
    &lt;p&gt;Steve: We put it right on top of the visitor side, so it makes noise right into the visitorâs huddle. We put the swell right behind the backboard, so basically when youâre shooting free throws on that end, youâre looking right at the swell.&lt;/p&gt;
    &lt;p&gt;David: And it makes a difference.&lt;/p&gt;
    &lt;p&gt;Ben:. I saw data that said that theâ&lt;/p&gt;
    &lt;p&gt;Steve: Lowest free throw shooting percentage of the league for the visiting team is against the wall. It worked. Thatâs what I wanted.&lt;/p&gt;
    &lt;p&gt;David: What did the other owners think about this?&lt;/p&gt;
    &lt;p&gt;Steve: Weâve had a bunch of people come through and look at the building. Would I be surprised if a number of the new arenas get built donât have a wall. No, I would be, or at least, student section.&lt;/p&gt;
    &lt;p&gt;David: Youâve got a duration of your advantage because not every other team can build or remodel an arena.&lt;/p&gt;
    &lt;p&gt;Steve: But you also have to remember, I took some financial hits on this. We have fewer suites, less revenue, and we only charge $1000 for a season ticket that gets you pretty close to the floor.&lt;/p&gt;
    &lt;p&gt;Ben: And you didnât have any public funding for it, so in terms of the cash outâ&lt;/p&gt;
    &lt;p&gt;Steve: Yeah. California, you canât have public funding for arenas. Thatâs why we donât.&lt;/p&gt;
    &lt;p&gt;Ben: You paid for the whole arena and youâre going to have slower payback on that because you have less revenue opportunity.&lt;/p&gt;
    &lt;p&gt;Steve: But we took a revenue. Definitely we could have made more revenue on that side if weâd done things a little bit differently. But itâs about basketball. We have a lot of toilets.&lt;/p&gt;
    &lt;p&gt;Ben: Three times the average or something like that.&lt;/p&gt;
    &lt;p&gt;Steve: Something like that. Why? Itâs about basketball. Get out and get back into your seat. Donât miss the action. We started out with a lot more concession stands, and then we said, no, no. Letâs just do this completely frictionless. If you register your face, you just walk in, grab what you want and leave. If not, you could just tap your phone on the way in, grab your stuff and leave.&lt;/p&gt;
    &lt;p&gt;Thereâs no checkout. We donât serve eclectic food. Little everything. Same thing everywhere. Why? We donât want you walking around having to look for your favorite food. No, youâre going to get the same great stuff everywhere.&lt;/p&gt;
    &lt;p&gt;It turns out 85% of what gets bought is in five items anyway. Itâs a hamburger, itâs a hot dog, itâs nachos, chicken tenders. Iâm not remembering off the top of my head.&lt;/p&gt;
    &lt;p&gt;David: Is part of the calculus of this for attracting players too?&lt;/p&gt;
    &lt;p&gt;Steve: Sure. If you look at our backend spaces, like our practice facility, ooh la la.&lt;/p&gt;
    &lt;p&gt;David: But Iâm thinking even if your opponentâs going to have a lower free throw shooting percentage in your home arenaâ¦&lt;/p&gt;
    &lt;p&gt;Steve: Sure. Players have said they think itâs really cool. And thatâs good. Thatâs good. Playersâ offices are also good, i.e., the training area, the practice area, our outdoor pool, sauna, and cold plunge, our weight room, our sports performance center. That stuff, all I would say, are pretty good as well. Very good.&lt;/p&gt;
    &lt;p&gt;Weâve done a bunch of things. We have the best refs room (I think) in the league. We called the refs union and said, what do you guys need? The media area, we said, look. If weâre going to build a new arena, our visiting locker roomâs the best in the league. Best weight room.&lt;/p&gt;
    &lt;p&gt;David: Thatâs your sales pitch to visiting stars.&lt;/p&gt;
    &lt;p&gt;Steve: Exactly. We say, hey, we care, and we care about everybody. Then we make it about the basketball, in and out. Oh, whatâs our artwork? We have public art that is required, some of which is basketball-oriented. But our major piece of public art is a clipper ship whose masks are replicas of basketballs from around the world. Basketball, basketball, basketball.&lt;/p&gt;
    &lt;p&gt;Our art inside the building? We have a high school basketball jersey from every high school in the state of California. It looks like art almost because Itâs nice colors on the wall. Basketball, man. Itâs about the basketball.&lt;/p&gt;
    &lt;p&gt;Ben: This building feels like your personality into a physical structure, the competitiveness, the loyalty, the fixation on what mattersâ&lt;/p&gt;
    &lt;p&gt;David: On the customer?&lt;/p&gt;
    &lt;p&gt;Steve: Yeah, it is. Look, you know how oftentimes startups come about because the founder is in love with some topic and builds the product they wanted to use? I think that happens a lot. I donât think people start back and look at the market, they say, oh, I thinkâ¦ I think Zuckerberg did that, Bill did that, programming, everybody does it. Thatâs what you did.&lt;/p&gt;
    &lt;p&gt;I didnât try to go out and survey. We could have designed for the, let me call it the contemporary audience. We wouldâve had more lounge space. We could have designed for what Iâd call traditional, long-term. Thatâs how I think about it. We could have designed in a lot of ways.&lt;/p&gt;
    &lt;p&gt;I designed for me. In some large measure, guys like me. It turns out Clipper fans are a little bit like me, because some of them are long suffering. The team wasnât good there for a number of years. People are diehard, come up to you and say, Iâm 89, which really means they bought their season tickets in 1989. Theyâve been there and now weâve exploded in the last, whatever, 14 years. We havenât had a losing season.&lt;/p&gt;
    &lt;p&gt;Ben: Hopefully a championship here at some point.&lt;/p&gt;
    &lt;p&gt;David: When are you going to overtake the Lakers?&lt;/p&gt;
    &lt;p&gt;Steve: There are battles in tech where you just have to be patient and long-term. Itâs weird to have a town with two teams. Our goal is to be long-term grinders on that. We want to beat them every time on the court.&lt;/p&gt;
    &lt;p&gt;Itâs okay to have two popular teams. Los Angeles County, for gosh sakes, has the same number of people as the state of Ohio, pretty much. There are plenty of people to be fans. We donât want to be âlittle brother.â We donât want to be the team with a nice 20% market share. No. We want to get our fair share. Weâre never going to get 100%.&lt;/p&gt;
    &lt;p&gt;The Lakers have tradition just like at Microsoft. Patient, long-term, hardcore approach. If we donât do that, no. The Lakers have the position. Theyâve earned it. They got a lot of championships. That donât mean weâre not going to keep coming and coming and coming.&lt;/p&gt;
    &lt;p&gt;Ben: Steve, thank you so much.&lt;/p&gt;
    &lt;p&gt;Steve: Thanks, man. Thanks, David.&lt;/p&gt;
    &lt;p&gt;David: Thanks, Steve.&lt;/p&gt;
    &lt;p&gt;Ben: Appreciate it. Ooh, David, that was fun.&lt;/p&gt;
    &lt;p&gt;David: Yes, it was.&lt;/p&gt;
    &lt;p&gt;Ben: Iâve always wanted to interview Steve Ballmer. In fact, when I was at Microsoft, I wasnât a podcaster then, but at the time I was such a junior employee. But man, there was a complicated landscape that Steve was navigating between the product set, between developer relevance, between the shifting landscape underneath him, and will Windows be the interesting bet to make going forward? personnel stuff, board stuff, eventually CEO transition. That is not a job I want.&lt;/p&gt;
    &lt;p&gt;David: Itâs fun for us as a show, too. Obviously this is meaningful for you personally, but when we started the show in Seattle in 2015, the Microsoft transition, Steve, Satya, this is what was in the water. This is what we all talked about at Madrona or Seattle in the tech ecosystem.&lt;/p&gt;
    &lt;p&gt;Ben: And itâs not clear that Microsoft was going to be this amazing juggernaut that it turned into. Obviously, Steve had planted some seeds in enterprise and what would become the juggernaut of Azure, but we were early in Satyaâs tenure when we started this show. Everyone had high hopes, he had started to transform the culture, but itâs come a long way.&lt;/p&gt;
    &lt;p&gt;David: Steve knew how great Azure was going to be, but the rest of the world didnât yet.&lt;/p&gt;
    &lt;p&gt;Ben: Yup. So fun.&lt;/p&gt;
    &lt;p&gt;All right. Well listeners, a few things before we wrap. One, New York City. We would love to see you at Radio City Music Hall. acquired.fm/nyc is where you can get all of the information, tickets, et cetera about that. And itâs going to be quite a night to remember.&lt;/p&gt;
    &lt;p&gt;David: Yes, it will be. Canât wait.&lt;/p&gt;
    &lt;p&gt;Ben: Canât wait. Well thank you to our partners this season. J.P. Morgan Payments, trusted, reliable payments infrastructure for your business, no matter the scale. Statsig, the best way to do experimentation and many more things as a product team. Vercel your complete platform for web development, and Anthropic, the makers of Claude. You can click the links in the show notes to learn more about any of these great companies.&lt;/p&gt;
    &lt;p&gt;If you like this episode, go check out our two big episodes on the history of Microsoft. Part one is basically the era where Bill Gates was CEO. Part two is basically the era where Steve was CEO.&lt;/p&gt;
    &lt;p&gt;If you want more Acquired between the monthly episodes, check out ACQ2, our interview show where we talk with founders building their businesses today, often in spaces that weâve covered on the show.&lt;/p&gt;
    &lt;p&gt;If you want to know more every time an episode drops, check out our email list thatâs acquired.fm/email. Get updates, get corrections, get hints at what the next episode will be. We announce all kinds of cool stuff in there.&lt;/p&gt;
    &lt;p&gt;When you finish this episode, come discuss it with the other smart members of the Acquired community at acquired.fm/slack. And with that, listeners, weâll see you next time.&lt;/p&gt;
    &lt;p&gt;David: Weâll see you next time.&lt;/p&gt;
    &lt;p&gt;Note: Acquired hosts and guests may hold assets discussed in this episode. This podcast is not investment advice, and is intended for informational and entertainment purposes only. You should do your own research and make your own independent decisions when considering any financial transactions.&lt;/p&gt;
    &lt;p&gt;Oops! Something went wrong while submitting the form&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45094953</guid></item><item><title>Implementing a Foil Sticker Effect</title><link>https://www.4rknova.com/blog/2025/08/30/foil-sticker</link><description>&lt;doc fingerprint="7aab8b3d79ef373f"&gt;
  &lt;main&gt;
    &lt;p&gt;In this post, I’ll walk you through how to create a custom shader in Three.js that simulates the look of a foil sticker, complete with angle-dependent iridescence and sparkling metallic flakes. The goal is to capture that premium, holographic effect you see on collectible stickers, trading cards, and high-end packaging, but to render it in real time directly in the browser.&lt;/p&gt;
    &lt;head rend="h1"&gt;Iridescence&lt;/head&gt;
    &lt;p&gt;If you’ve ever tilted a holographic sticker or watched sunlight catch on a soap bubble, you’ve seen iridescence in action. In the real world, this rainbow shimmer comes from thin-film interference. When light waves bounce between layers of a surface, some wavelengths are reinforced while others cancel out, causing colors to shift depending on your viewing angle.&lt;/p&gt;
    &lt;p&gt;In real-time computer graphics, we don’t need to simulate the exact physics. Instead, we can approximate this by mapping view angle to hue, as the surface tilts relative to the camera, its color smoothly shifts through a spectrum. This gives that dynamic, “alive” quality you expect from foil stickers.&lt;/p&gt;
    &lt;head rend="h1"&gt;Foil Flakes&lt;/head&gt;
    &lt;p&gt;Alongside the shifting colors, there’s another key detail: foil flakes. Real metallic foils have tiny reflective particles embedded in them, creating hundreds of bright, sharp highlights that twinkle as you move. These aren’t smooth reflections but randomized sparkles, giving the surface its tactile, premium feel.&lt;/p&gt;
    &lt;p&gt;To replicate this in a shader, we’ll introduce procedural noise to generate small random patches of brightness across the surface. When combined with lighting, they look like metallic specks catching the light. Together, angular hue shifts and flake sparkles create a convincing illusion of printed holographic foil without expensive rendering tricks.&lt;/p&gt;
    &lt;head rend="h1"&gt;Implementation&lt;/head&gt;
    &lt;p&gt;This implementation simulates a peeling, iridescent sticker with foil flakes using Three.js. While I will borrow concepts such as metalness, roughness, and Fresnel from Physically Based Rendering (PBR), this shader is not physically based. The goal is to create a visually plausible, artistic effect.&lt;/p&gt;
    &lt;p&gt;Below is a live demo of the shader, where you can modify its parameters and experiment with different configurations. Use your mouse to rotate the sticker around and see how the material reacts to the lighting.&lt;/p&gt;
    &lt;head rend="h2"&gt;Vertex Shader&lt;/head&gt;
    &lt;p&gt;The vertex shader handles the peel geometry and passes useful information to the fragment shader.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Uniform / Varying&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Purpose&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uPeelAmount&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Overall peel strength (0 = flat, 1 = fully peeled).&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uPeelAngle&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Peel direction in degrees.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;vUv&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;vec2&lt;/cell&gt;
        &lt;cell&gt;UV coordinates for texture mapping.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;vWorldPos&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;vec3&lt;/cell&gt;
        &lt;cell&gt;Vertex position in world space.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;vNormal&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;vec3&lt;/cell&gt;
        &lt;cell&gt;Transformed normal for lighting.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;vAOIntensity&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Distance moved by vertex, used to darken lifted areas.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The shader goes through the following simple steps:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Compute vector from hinge to current vertex.&lt;/item&gt;
      &lt;item&gt;Calculate the peel factor and angle.&lt;/item&gt;
      &lt;item&gt;Define the rotation axis and apply Rodrigues’ rotation formula to rotate the vertex around that axis.&lt;/item&gt;
      &lt;item&gt;Apply the same rotation to the normal.&lt;/item&gt;
      &lt;item&gt;Calculate a fake ambient occlusion term.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Here’s the full vertex shader code:&lt;/p&gt;
    &lt;code&gt;uniform float uPeelAmount;  // Strength of peel (0.0 → no peel, 1.0 → full peel)
uniform float uPeelAngle;   // Peel angle in degrees (converted to radians in shader)
varying vec2  vUv;          // UV coordinates
varying vec3  vWorldPos;    // Vertex position in world space
varying vec3  vNormal;      // Transformed vertex normal
varying float vAOIntensity; // Ambient occlusion or peel intensity factor

void main() {
    vUv = vec2(uv.x, 1.0 - uv.y);
    vec3 pos = position;

    // Define hinge point for peel
    vec3 hinge = vec3(0.0, 0.0, 0.0);

    // Vector from hinge to current vertex
    vec3 toVertex = pos - hinge;

    // Peel factor calculation
    // Interpolates peel strength diagonally
    // (bottom-left → top-right)
    float peelFactor = (uv.x + uv.y) * 0.5;

    // Convert peel angle to radians
    // Final angle is scaled by peelAmount
    // and per-vertex peelFactor
    float radAngle = radians(uPeelAngle);
    float angle = radAngle * uPeelAmount * peelFactor;

    // Define rotation axis for peel
    // Diagonal axis pointing from top-left 
    // to bottom-right
    vec3 axis = normalize(vec3(-1.0, 1.0, 0.0));
    float cosA = cos(angle);
    float sinA = sin(angle);

    // Apply Rodrigues' rotation formula
    // Rotates the vertex around the diagonal axis
    vec3 rotated = toVertex * cosA +
                   cross(axis, toVertex) * sinA +
                   axis * dot(axis, toVertex) * (1.0 - cosA);

    // Update vertex position after rotation
    pos = hinge + rotated;

    // Rotate vertex normal the same way to
    // ensure lighting matches the peeled
    // geometry
    vec3 rotatedNormal = normal * cosA +
                         cross(axis, normal) * sinA +
                         axis * dot(axis, normal) * (1.0 - cosA);

    // Transform normal into view space
    vNormal = normalize(normalMatrix * rotatedNormal);

    // Transform vertex to world space
    vec4 worldPos = modelMatrix * vec4(pos, 1.0);
    vWorldPos = worldPos.xyz;

    // Ambient Occlusion term based on distance moved
    // from original vertex position
    vAOIntensity = length(toVertex - rotated);

    // Final projection
    gl_Position = projectionMatrix * viewMatrix * worldPos;
}
&lt;/code&gt;
    &lt;head rend="h2"&gt;Fragment Shader&lt;/head&gt;
    &lt;p&gt;The fragment shader handles all lighting, reflections, iridescence, and foil flakes. It layers procedural effects to create a rich, dynamic look.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Uniform&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Purpose&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;map&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;sampler2D&lt;/cell&gt;
        &lt;cell&gt;Sticker albedo + alpha.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;envMap2D&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;sampler2D&lt;/cell&gt;
        &lt;cell&gt;Environment map for reflections.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uCameraPos&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;vec3&lt;/cell&gt;
        &lt;cell&gt;Camera position for view vector.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uAlphaCutoff&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Discard pixels below this alpha.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uFlakesEnabled&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Toggle foil flakes.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uFlakeSize&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Size of flakes.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uFlakeReduction&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Randomness threshold for flakes.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uFlakeThreshold&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Brightness threshold to show flakes.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uFlakeBrightness&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Base brightness of flakes.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uMetalness&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;PBR-like metal reflectivity control.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uRoughness&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Controls reflection sharpness.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uEnvIntensity&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Scales environment contribution.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uMetalmask&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Mask controlling metallic regions.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;uIridescence&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Strength of angle-dependent rainbow effect.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;&lt;code&gt;uIriMin&lt;/code&gt;, &lt;code&gt;uIriRange&lt;/code&gt;&lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Range for simulated film thickness.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;&lt;code&gt;uPeelAmount&lt;/code&gt;, &lt;code&gt;uPeelAngle&lt;/code&gt;&lt;/cell&gt;
        &lt;cell&gt;float&lt;/cell&gt;
        &lt;cell&gt;Peel geometry info for shading.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;This is how this works:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Alpha cutoff to discard transparent pixels early.&lt;/item&gt;
      &lt;item&gt;Back-face shading to render the rear surface as plain white or darkened, depending on peel.&lt;/item&gt;
      &lt;item&gt;Foil flakes are computed using procedural noise. Normals are perturbed slightly to create sparkle variation. The environment map is sampled to get an iridescent tint.&lt;/item&gt;
      &lt;item&gt;Iridescence (thin-film approximation) is calculated using sine-based waves to shift hue by view angle.&lt;/item&gt;
      &lt;item&gt;Environment reflections are modulated by Fresnel.&lt;/item&gt;
      &lt;item&gt;Final shading combines diffuse base, reflections, iridescence, and flakes.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Here’s the full vertex shader code:&lt;/p&gt;
    &lt;code&gt;precision highp float;

#define PI  3.14159265

varying vec2 vUv;
varying vec3 vNormal;
varying vec3 vWorldPos;
varying float vAOIntensity;

uniform sampler2D map;      // sticker albedo + alpha
uniform sampler2D envMap2D; // LDR equirectangular environment

uniform vec3  uCameraPos;
uniform float uAlphaCutoff;
uniform float uMaxMip;
uniform float uFlakesEnabled;
uniform float uFlakeSize;
uniform float uFlakeReduction;
uniform float uFlakeThreshold;
uniform float uFlakeBrightness;
uniform float uPeelAmount;
uniform float uPeelAngle;
uniform float uMetalness;
uniform float uRoughness;
uniform float uEnvIntensity;
uniform float uMetalmask;
uniform float uIridescence;
uniform float uIriMin;
uniform float uIriRange;

float hash(vec2 p) {
    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);
}

// Map 3D dir to 2D equirect UV
vec2 dirToEquirectUv(vec3 dir) {
    dir = normalize(dir);
    float phi = atan(dir.z, dir.x);
    float theta = acos(clamp(dir.y, -1.0, 1.0));
    return vec2((phi + 3.14159265) / (2.0 * 3.14159265), theta / 3.14159265);
}

vec3 sampleEnvRough(vec3 R, float roughness) {
    vec2 uv = dirToEquirectUv(R);

    // Map roughness to LOD level
    float lod = roughness * uMaxMip;
    vec3 color = texture2DLodEXT(envMap2D, uv, lod).rgb;

    return color;
}

// Iridescence / thin-film color
vec3 iridescenceColor(float cosTheta) {
    float thickness = uIriMin + uIriRange * (1.0 - cosTheta);
    float phase = 6.28318 * thickness * 0.01; // scaled for visuals
    vec3 rainbow = 0.5 + 0.5 * vec3(sin(phase), sin(phase + 2.094), sin(phase + 4.188));
    return mix(vec3(1.0), rainbow, uIridescence);
}

// Convert RGB to perceived luminance (Rec.709)
float luminance(vec3 color) {
    return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

void main() {

    vec4 base = texture2D(map, vUv);
    if(base.a &amp;lt; uAlphaCutoff)
        discard;

    if(!gl_FrontFacing) {
        float col = 1.0;
        if(uPeelAngle &amp;gt; 0.0) {
            col = mix(1.0, 0.2, vAOIntensity);
        }
        // Render back side as white
        gl_FragColor = vec4(vec3(col), base.a);
        return;
    }

    vec3 N = normalize(vNormal);
    vec3 V = normalize(uCameraPos - vWorldPos);
    vec3 R = reflect(-V, N);

    // Ambient occlusion / peel shadow
    float peelShadow = 0.0;

    if(uPeelAngle &amp;lt; 0.0) {
        peelShadow = smoothstep(0.0, 0.3, vAOIntensity);
        base.rgb *= mix(1.0, 0.3, peelShadow);
    }

    // Flakes
    float flakeIntensity = 0.0;
    vec3 flakeEnv = vec3(0.0);

    float brightness = luminance(base.rgb);

    if(uFlakesEnabled &amp;gt; 0.5) {
        // Procedural flake mask
        float flake = hash(floor(vUv * uFlakeSize));
        float flakeMask = smoothstep(uFlakeReduction, 1.0, flake);

        // Base brightness influence
        float flakeBoost = smoothstep(uFlakeThreshold, 1.0, brightness);

        // Perturbed flake normal
        float angleOffset = (hash(vec2(flake, flake + 3.0)) - 0.5) * 0.25;
        vec3 perturbedNormal = normalize(N + vec3(angleOffset, 0.0, angleOffset));

        // Reflection for sparkle
        vec3 PR = reflect(-V, perturbedNormal);

        // Dynamic flicker factor (only brightens, never darkens)
        float flakePhase = hash(floor(vUv * uFlakeSize) + floor(PR.xy * 15.0));
        float phaseMod = mix(1.0, 1.8, flakePhase);
        
        // Core sparkle factor (glimmer preserved)
        float flakeSpec = pow(clamp(dot(perturbedNormal, V) * 0.5 + 0.5, 0.0, 1.0), 8.0);
        flakeSpec = max(flakeSpec, 0.15); // always visible

        // Environment tint (never too dark, controlled by uniform)
        float flakeRough = clamp(uRoughness * 0.4, 0.0, 1.0);
        flakeEnv = sampleEnvRough(PR, flakeRough) * mix(0.9, 1.2, brightness);
        flakeEnv = max(flakeEnv, vec3(uFlakeBrightness));

        vec3 flakeIri = iridescenceColor(dot(perturbedNormal, V));
        flakeEnv *= mix(vec3(1.0), flakeIri, 0.9);

        // Final intensity
        flakeIntensity = flakeMask * flakeBoost * flakeSpec * phaseMod * 18.0;
        flakeIntensity = clamp(flakeIntensity, 0.0, 1.0);
    }

    // Final roughness modulation
    float finalRough = clamp(mix(uRoughness, 1.0, flakeIntensity), 0.0, 1.0);

    // Environment reflection
    vec3 env = sampleEnvRough(R, finalRough) * uEnvIntensity;

    // Blend in flake environment contribution
    env = mix(env, flakeEnv, clamp(flakeIntensity, 0.0, 1.0));

    // Fresnel term
    float cosTheta = clamp(dot(N, V), 0.0, 1.0);
    float F0 = mix(0.04, 1.0, uMetalness);
    float fres = F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);

    // Iridescence
    float metalicMask = mix(uMetalmask, 1.0, brightness);
    vec3 iriCol = iridescenceColor(cosTheta) * metalicMask;

    // Final color
    vec3 diffuse = base.rgb * (1.0 - uMetalness);
    vec3 spec = env * fres * iriCol * (1.0 - finalRough * 0.85);
    vec3 color = diffuse + spec;

    gl_FragColor = vec4(color, base.a);
}
&lt;/code&gt;
    &lt;head rend="h1"&gt;Licensing&lt;/head&gt;
    &lt;p&gt;The code in this page is licensed under Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0). Feel free to share and adapt the code for non-commercial purposes with proper attribution. If you wish to use the code commercially, please contact me for a separate license agreement.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45095460</guid></item><item><title>The future of 32-bit support in the kernel</title><link>https://lwn.net/SubscriberLink/1035727/4837b0d3dccf1cbb/</link><description>&lt;doc fingerprint="76431916d0862bed"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The future of 32-bit support in the kernel&lt;/head&gt;
    &lt;head rend="h2"&gt;[LWN subscriber-only content]&lt;/head&gt;
    &lt;quote&gt;Nobody covers the Linux kernel like LWN; be in the know with a one-month trial subscription, no credit card needed.People naturally think about desktop machines first, he continued. If you were running Linux in the 1990s, you had a 32-bit, desktop system. Unix systems, though, moved to 64-bit platforms around 30 years ago, and the Linux desktop made that move about 20 years ago. Even phones and related devices have been 64-bit for the last decade. If those systems were all that Linux had to support, 32-bit support would have long since been removed from the kernel. He summarized the situation with this slide, showing how the non-embedded architectures have transitioned to either 64-bit or nonexistence over time:&lt;/quote&gt;
    &lt;p&gt;The world is not all desktops — or servers — though; embedded Linux exists as well. About 90% of those systems are running on Arm processors. The kernel has accumulated a lot of devicetree files describing those systems over the years; only in this last year has the number of devicetrees for armv8 (64-bit) systems exceeded the number for armv7 (32-bit) systems.&lt;/p&gt;
    &lt;p&gt;For Arm processors with pre-armv7 architectures, there are only three for which it is still possible to buy hardware, but a number are still supported by the kernel community:&lt;/p&gt;
    &lt;p&gt;Many other pre-armv7 CPUs are out of production, but the kernel still has support for them. Of those, he said, there are about ten that could be removed now. It would be nice to be able to say that support for the others will be removed after a fixed period, ten years perhaps, but hardware support does not work that way. Instead, one has to think in terms of half lives; every so often, it becomes possible to remove support for half of the platforms. It all depends on whether there are users for the processors in question.&lt;/p&gt;
    &lt;p&gt;The kernel is still adding support for some 32-bit boards, he said, but at least ten new 64-bit boards gain support for each 32-bit one.&lt;/p&gt;
    &lt;p&gt;There are a number of non-Arm 32-bit architectures that still have support in the kernel; these include arc, microblaze, nios2, openrisc, rv32, sparc/leon, and xtensa. All of them are being replaced by RISC-V processors in new products. RISC-V is what you use if you don't care about Arm compatibility, he said.&lt;/p&gt;
    &lt;p&gt; Then, there is the dusty corner where nommu (processors without a memory-management unit) live; these include armv7-m, m68k, superh, and xtensa. Nobody is building anything with this kind of hardware now, and the only people who are working on them in any way are those who have to support existing systems. "&lt;quote&gt;Or to prove that it can be done&lt;/quote&gt;." &lt;/p&gt;
    &lt;p&gt;There are still some people who need to run 32-bit applications that cannot be updated; the solution he has been pushing people toward is to run a 32-bit user space on a 64-bit kernel. This is a good solution for memory-constrained systems; switching to 32-bit halves the memory usage of the system. Since, on most systems, almost all memory is used by user space, running a 64-bit kernel has a relatively small cost. Please, he asked, do not run 32-bit kernels on 64-bit processors.&lt;/p&gt;
    &lt;p&gt;There are some definite pain points that come with maintaining 32-bit support; most of the complaints, he said, come from developers in the memory-management subsystem. The biggest problem there is the need to support high memory; it is complex, and requires support throughout the kernel. High memory is needed when the kernel lacks the address space to map all of the installed physical memory; that tends to be at about 800MB on 32-bit systems. (See this article for more information about high memory).&lt;/p&gt;
    &lt;p&gt; Currently the kernel is able to support 32-bit systems with up to 16GB of installed memory. Such systems are exceedingly rare, though, and support for them will be going away soon. There are a few 4GB systems out there, including some Chromebooks. Systems with 2GB are a bit more common. Even these systems, he said, are "&lt;quote&gt;a bit silly&lt;/quote&gt;" since the memory costs more than the CPU does. There are some use cases for such systems, though. Most 32-bit systems now have less than 1GB of installed memory. The kernel, soon, will not try to support systems with more than 4GB. &lt;/p&gt;
    &lt;p&gt;There are some ideas out there for how to support the larger-memory 32-bit systems without needing the high-memory abstraction. Linus Walleij is working on entirely separating the kernel and user-space address spaces, giving each 4GB to work with; this is a variant on the "4G/4G" approach that has occasionally been tried for many years. It is difficult to make such a system work efficiently, so this effort may never succeed, Bergmann said.&lt;/p&gt;
    &lt;p&gt;Another approach is the proposed "densemem" memory model, which does some fancy remapping to close holes in the physical address space. Densemem can support up to 2GB and is needed to replace the SPARSEMEM memory model, the removal of which which will eventually be necessary in any case. This work has to be completed before high memory can be removed; Bergmann said that he would be interested in hearing from potential users of the densemem approach.&lt;/p&gt;
    &lt;p&gt;One other possibility is to drop high memory, but allow the extra physical memory to be used as a zram swap device. That would not be as efficient as accessing the memory directly, but it is relatively simple and would make it possible to drop the complexity of high memory.&lt;/p&gt;
    &lt;p&gt;Then, there is the year-2038 problem, which he spent several years working on. The kernel-side work was finished in 2020; the musl C library was updated that same year, and the GNU C Library followed the year after. Some distributors have been faster than others to incorporate this work; Debian and Ubuntu have only become year-2038-safe this year.&lt;/p&gt;
    &lt;p&gt;The year-2038 problem is not yet completely solved, though; there are a lot of packages that have unfixed bugs in this area. Anything using futex(), he said, has about a 50% chance of getting time handling right. The legacy 32-bit system calls, which are not year-2038 safe, are still enabled in the kernel, but they will go away at some point, exposing more bugs. There are languages, including Python and Rust, that have a lot of broken language bindings. Overall, he said, he does not expect any 32-bit desktop system to survive the year-2038 apocalypse.&lt;/p&gt;
    &lt;p&gt;A related problem is big-endian support, which is also 32-bit only, and also obsolete. Its removal is blocked because IBM is still supporting big-endian mainframe and PowerPC systems; as long as that support continues, big-endian support will stay in the kernel.&lt;/p&gt;
    &lt;p&gt; A number of other types of support are under discussion. There were once 32-bit systems with more than eight CPUs, but nobody is using those machines anymore, so support could be removed. Support for armv4 processors, such as the DEC StrongARM CPU, should be removed. Support for early armv6 CPUs, including the omap2 and i.mx31, "&lt;quote&gt;complicates everything&lt;/quote&gt;"; he would like to remove it, even though there are still some Nokia 770 systems in the wild. The time is coming for the removal of all non-devicetree board files. Removal of support for Cortex M CPUs, which are nommu systems, is coming in a couple of years. Developers are eyeing i486 CPU support, but that will not come out yet. Bergmann has sent patches to remove support for KVM on 32-bit CPUs, but there is still "&lt;quote&gt;one PowerPC user&lt;/quote&gt;", so that support will be kept for now. &lt;/p&gt;
    &lt;p&gt;To summarize, he said, the kernel will have to retain support for armv7 systems for at least another ten years. Boards are still being produced with these CPUs, so even ten years may be optimistic for removal. Everything else, he said, will probably fade away sooner than that. The removal of high-memory support has been penciled in for sometime around 2027, and nommu support around 2028. There will, naturally, need to be more discussion before these removals can happen.&lt;/p&gt;
    &lt;p&gt;An audience member asked how developers know whether a processor is still in use or not; Bergmann acknowledged that it can be a hard question. For x86 support, he looked at a lot of old web pages to make a list of which systems existed, then showed that each of those systems was already broken in current kernels for other reasons; the lack of complaints showed that there were no users. For others, it is necessary to dig through the Git history, see what kinds of changes are being made, and ask the developers who have worked on the code; they are the ones who will know who is using that support.&lt;/p&gt;
    &lt;p&gt; Another person asked about whether the kernel would support big-endian RISC-V systems. Bergmann answered that those systems are not supported now, and he hoped that it would stay that way. "&lt;quote&gt;With RISC-V, anybody can do anything, so they do, but it is not always a good idea&lt;/quote&gt;". The final question was about support for nommu esp32 CPUs; he answered that patches for those CPUs exist, but have not been sent upstream. Those processors are "&lt;quote&gt;a cool toy&lt;/quote&gt;", but he does not see any practical application for them. &lt;/p&gt;
    &lt;p&gt;The slides for this talk are available. The curious may also want to look at Bergmann's 2020 take on this topic.&lt;/p&gt;
    &lt;p&gt; [Thanks to the Linux Foundation, LWN's travel sponsor, for supporting my travel to this event.]&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Index entries for this article&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Kernel&lt;/cell&gt;
        &lt;cell&gt;Architectures&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Conference&lt;/cell&gt;
        &lt;cell&gt;Open Source Summit Europe/2025&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; Posted Sep 1, 2025 19:55 UTC (Mon) by jrtc27 (subscriber, #107748) [Link] (2 responses) I don't understand this point. 64-bit big-endian systems exist in the form of sparc64 and s390x (and powerpc64, though that's less of a thing given powerpc64le). Posted Sep 1, 2025 21:47 UTC (Mon) by mjw (subscriber, #16740) [Link] (1 responses) Posted Sep 1, 2025 22:27 UTC (Mon) by sam_c (subscriber, #139836) [Link] (Of course, BE isn't the future, I just don't think the platforms are all rotting near-universally as 32-bit ones are on average.) Posted Sep 1, 2025 19:58 UTC (Mon) by jrtc27 (subscriber, #107748) [Link] (1 responses) That's not really true. Halving is the limit of what you could hope to achieve, if every data type in your system was a machine word or pointer. But char, short, int and long long don't change, (u)intNN_t don't change, and float/double don't change, so depending on what data you're actually operating on you can see anywhere between almost no change (e.g. some purely computational workload on large amounts of raw data) and halving the memory usage. Posted Sep 1, 2025 20:24 UTC (Mon) by arnd (subscriber, #8866) [Link] I had expected to see a much smaller difference between the two environments like you describe, the numbers I saw for anything I tried were always roughly 100% overhead for the 64-bit code compared to armhf. I think this is a combination of multiple effects I measured in addition to the obvious sizeof(long) difference: arm64 has longer instruction words than armv7/thumb2, small malloc() calls are aligned to larger cache lines (128 vs 64 bytes), ELF sections have a larger default alignment (64K vs 4K), etc. For many real workloads, a larger portion of RAM if of course going to be filled with the same user data (text, video, sensor input, network packages, ...) so the difference becomes smaller; for the most memory constrained systems, 100% overhead is surprisingly good estimate that holds true for both kernel data and userland. Posted Sep 1, 2025 20:03 UTC (Mon) by jrtc27 (subscriber, #107748) [Link] Unfortunately people are building those systems and others are proposing supporting them[1]. It is a real shame this is the approach that's being taken rather than having dedicated byte-swapping load/store instructions to accelerate processing big-endian data structures like network packets, which is the main use case that I'm aware of, outside of being compatible with old software written for big-endian mainframes. [1] https://lore.kernel.org/all/20250822165248.289802-1-ben.d... Posted Sep 1, 2025 20:53 UTC (Mon) by ajb (subscriber, #9694) [Link] (1 responses) There are also going to be many products where it doesn't make much difference whether an ancient processor or an up to date riscv is used, and manufacturers are very likely to continue to choose ones where the licence fee is already paid off. Posted Sep 1, 2025 22:11 UTC (Mon) by smoogen (subscriber, #97) [Link] &lt;head&gt;64-bit big-endian&lt;/head&gt;&lt;head&gt;64-bit big-endian&lt;/head&gt;&lt;lb/&gt; The slides don't say that big-endian is 32-bit only, but "Equally obsolete as 32-bit".&lt;head&gt;64-bit big-endian&lt;/head&gt;&lt;head&gt;Not all types are words / pointers&lt;/head&gt;&lt;head&gt;Not all types are words / pointers&lt;/head&gt;&lt;head&gt;Big-endian RISC-V&lt;/head&gt;&lt;head&gt;longevity&lt;/head&gt;&lt;head&gt;longevity&lt;/head&gt;&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45095475</guid></item><item><title>Thoughts on (Amazonian) leadership</title><link>https://www.daemonology.net/blog/2025-09-01-Thoughts-on-Amazonian-Leadership.html</link><description>&lt;doc fingerprint="d7850520cbaafdc"&gt;
  &lt;main&gt;&lt;head rend="h2"&gt;Thoughts on (Amazonian) Leadership&lt;/head&gt;Amazon's Leadership Principles are famous, not just within Amazon but also in the tech world at large. While they're frequently mocked — including by Amazonians — they're also generally sensible rules by which to run a company. I've been an Amazon customer for over 25 years and an AWS customer for almost 20 years, and also an AWS Hero for 6 years, and while I've never worked for Amazon I feel that I've seen behind the curtain enough to offer some commentary on a few of these principles.&lt;list rend="ul"&gt;&lt;item&gt; Customer Obsession: Leaders start with the customer and work backwards. They work vigorously to earn and keep customer trust. Although leaders pay attention to competitors, they obsess over customers. &lt;lb/&gt;Customer Obsession is great, but I often see Amazonians taking this too simplistically: "Start with the customer" doesn't have to mean "ask customers what they want and then give them faster horses". In the early days of AWS I saw a lot of what I call "cool engineering driven" products: When EC2 launched, it wasn't really clear what people would do with it, but it was very cool and it was clear that it could be a big deal in some form, sooner or later. Some time around 2012, the culture in AWS seemed to shift from "provide cool building blocks" to "build what customers are asking for" and in my view this was a step in the wrong direction (mind you, not nearly as much as the ca. 2020 shift to "build what analysts are asking for in quarterly earnings calls").&lt;p&gt;This tension of what customers are asking for vs what customers really need shows up in areas like resilience. Amazon's "Well-Architected Framework" strongly exhorts customers to avoid building production workloads in a single Availability Zone — but Amazon's cross-AZ bandwidth pricing is painful, and Amazon doesn't provide useful tools for building durable multi-AZ applications. Most customers are not going to implement Paxos, and very few customers — certainly not executives who are removed from actual development processes — are going to ask Amazon for Paxos-as-a-service; but if Amazonians sat down and asked themselves "what do customers need in order to design their applications well" they could probably come up with several services which Amazon already has internally. AWS should return to its roots and release important building blocks — the things customers will need, not necessarily what they're asking for.&lt;/p&gt;&lt;/item&gt;&lt;item&gt; Ownership: Leaders are owners. They think long term and don't sacrifice long-term value for short-term results. They act on behalf of the entire company, beyond just their own team. They never say "that's not my job." &lt;lb/&gt;This principle is both too narrow, and not being fulfilled, in my view. It's not enough to simply act on behalf of the entire company: It's important to act on behalf of the entire technological ecosystem. Some Amazonians are great at this — I recently commited patches to FreeBSD's bhyve because an Amazonian was putting together a standard for interrupt handling in large VMs, and even though Amazon doesn't make any use of bhyve (at least, I don't think it does!) he understood the importance of getting standards widely accepted across the entire virtualization space rather than narrowly in the code Amazon relied upon. There's a saying in computer security, that anything which makes one of us less secure makes all of us less secure: Attackers will leverage an exploit against one system to allow them to attack another system. While the same does not directly apply in other fields, working with others to produce the best results for everyone will be much better in the long-term than focusing solely on what Amazon needs right now.&lt;p&gt;But in general Amazon doesn't even live up to its stated (narrow) promise of having leaders acting on behalf of the entire company — it's simply too siloed. Amazon is famously secretive, and this applies internally as well as externally: When AWS launches two similar services, it's often because two teams didn't know what each other was working on. How can leaders act across the entire company if nobody knows what's happening outside of their team? They can't; and if Amazon wants to allow its best people to be true Owners, Amazon needs to start breaking down walls.&lt;/p&gt;&lt;/item&gt;&lt;item&gt; Bias for Action: Speed matters in business. Many decisions and actions are reversible and do not need extensive study. We value calculated risk taking. &lt;lb/&gt;Amazonians talk about "one-way doors" and "two-way doors", and it is quite true that many decisions are can be reversed... but that doesn't always mean that there is no cost associated with reversing a decision. There is a clear and widely recognized tension between "Bias for Action" and another principle, "Insist on the Highest Standards"; but there is also a tension between this and earning and keeping customer trust. When AWS ships a service which is half-baked, it diminishes customer trust in AWS as a whole; even if the problems in that service ultimately get corrected (either by fixing them or in some cases by simply getting rid of a service which should never have existed in the first place) the memory of a failed launch will live on in customers' minds for years to come.&lt;p&gt;During my seven-year tenure as FreeBSD Security Officer, people knew me as the guy sending out security advisories; but the most important thing I did was not to ship Security Advisories — that is, it was to stop the train and say "no, we are not going to send this out yet". I knew that for all the importance of getting patches into people's hands in a timely manner, it was even more important to establish trust: If I gave people a broken patch, even once, they would be much slower to install security updates in the future. My team became familiar with the phrase "convince me that this is correct", and I'd like to see more of that at senior levels of Amazon: Principal and Distinguished Engineers need to step in with a bias for inaction, and use the respect they have earned to stop projects which do not meet the highest standards before they undermine trust. Amazon's hiring process famously includes "bar raisers" who can veto hiring decisions; they should also have service bar raisers who can veto launches.&lt;/p&gt;&lt;/item&gt;&lt;/list&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45095545</guid></item><item><title>Amazon has mostly sat out the AI talent war</title><link>https://www.businessinsider.com/amazon-ai-talent-wars-internal-document-2025-8</link><description>&lt;doc fingerprint="cf8db5f163666cc"&gt;
  &lt;main&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Amazon struggles to attract AI talent due to its pay model and perception of falling behind others.&lt;/item&gt;
      &lt;item&gt;Amazon's compensation model has long caused complaints from employees.&lt;/item&gt;
      &lt;item&gt;Competitors like Meta and OpenAI offer more attractive packages for AI engineers.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As the AI talent war sweeps across Silicon Valley, Amazon has largely sat on the sidelines. A confidential internal document, and accounts from people familiar with the matter, reveal why.&lt;/p&gt;
    &lt;p&gt;The company has flagged its unique pay structure, lagging AI reputation, and rigid return-to-office rules as major hurdles. Now, the tech giant is being pushed to rethink its recruiting strategy as it scrambles to compete for top talent.&lt;/p&gt;
    &lt;p&gt;The document, from late last year, was written by the HR team covering Amazon's non-retail businesses, including Amazon Web Services, advertising, devices, entertainment, and the newly formed artificial general intelligence team.&lt;/p&gt;
    &lt;p&gt;"GenAI hiring faces challenges like location, compensation, and Amazon's perceived lag in the space," the document noted. "Competitors often provide more comprehensive and aggressive packages." Business Insider obtained a copy of the document.&lt;/p&gt;
    &lt;p&gt;Amazon's absence from recent splashy AI hires underscores those concerns. Meta has pulled in high-profile talent from ScaleAI, Apple, and OpenAI. Google and OpenAI continue to be top destinations for AI experts, while Microsoft has even drafted a wish list of Meta AI employees it hopes to recruit.&lt;/p&gt;
    &lt;p&gt;Amazon's spokesperson initially told BI that the company continues to "adapt our approach to remain highly competitive, maintaining flexibility in both our compensation packages and work arrangements to attract and retain the best AI talent in this dynamic market."&lt;/p&gt;
    &lt;p&gt;Hours later, the spokesperson updated the statement, saying the premise of the story was "wrong," without providing any specifics.&lt;/p&gt;
    &lt;p&gt;"We continue to attract and retain some of the best people in the world and they're building and deploying GenAI applications at a rapid clip. Our compensation is competitive, but we also want missionaries who are passionate about inventing things that will make a meaningful difference for customers — for those kinds of people, there's no better place in the world to build."&lt;/p&gt;
    &lt;head rend="h2"&gt;Door desks and 'egalitarian' pay&lt;/head&gt;
    &lt;p&gt;Amazon is famously frugal. One of its origin stories recounts how the company bought cheap doors from Home Depot and hacked them together as office desks. This became guiding symbol of Amazon's cautious spending, with founder Jeff Bezos still using door desks today.&lt;/p&gt;
    &lt;p&gt;This penny-pinching culture has smashed straight into an AI hiring battle that's being fueled by unprecedented spending, putting Amazon in a tricky situation.&lt;/p&gt;
    &lt;p&gt;The internal document described compensation as one of the "hotly debated topics" among Amazon recruiters, citing the company's strict use of fixed salary bands for each role. Amazon's "egalitarian philosophy" on pay leaves its offers "below par" compared with top rivals, it added.&lt;/p&gt;
    &lt;p&gt;"The lack of salary range increases for several key job families over the past few years does not position Amazon as an employer of choice for top tech talent," the document warned.&lt;/p&gt;
    &lt;p&gt;For Amazon, missing out on top AI talent is a potential risk. The pool of top-tier AI researchers and engineers is limited, and without experts with deep knowhow, it's hard to compete at the frontier of the field. Indeed, Amazon has yet to find a blockbuster AI product like OpenAI's ChatGPT or Anthropic's Claude, although its Bedrock AI cloud service has made progress.&lt;/p&gt;
    &lt;p&gt;Amazon's pay structure has been a long-standing source of tension.&lt;/p&gt;
    &lt;p&gt;Several people who spoke to Business Insider cited the 2020 departure of Amazon robotics VP Brad Porter as evidence of the company's frugal approach hampering talent recruitment and retention. Porter left in part after Amazon refused to raise his pay band.&lt;/p&gt;
    &lt;p&gt;Amazon's stock vesting schedule is also heavily backloaded, a structure that can be less attractive to new hires. The policy extends even to top executives, who generally receive no cash bonuses.&lt;/p&gt;
    &lt;head rend="h2"&gt;'Voting with their feet'&lt;/head&gt;
    &lt;p&gt;In addition to highlighting Amazon's "perceived lag in the AI space," the internal document said generative AI has further intensified the competition for specialized talent, particularly individuals with expertise in large language models.&lt;/p&gt;
    &lt;p&gt;An August report from venture capital firm SignalFire shows Amazon is on the lower end of engineering retention, far below Meta, OpenAI, and Anthropic. Jarod Reyes, SignalFire's head of developer community, told Business Insider that Amazon rivals are making bigger strides in AI, across open models, foundational research, and developer tooling.&lt;/p&gt;
    &lt;p&gt;"Amazon hasn't clearly positioned itself as a leader in the generative AI wave," Reyes said. "Engineers are paying attention and they're voting with their feet."&lt;/p&gt;
    &lt;p&gt;Some investors share that view. On Amazon's earnings call last month, Morgan Stanley analyst Brian Nowak pressed CEO Andy Jassy on Wall Street's "narrative right now that AWS is falling behind" in AI and fears of losing market share to rivals. Jassy's response fell flat, sending Amazon's stock lower during the call.&lt;/p&gt;
    &lt;p&gt;Amazon intends to tackle these concerns. According to the document, the company will refine its "compensation and location strategy" and host more events designed to highlight its generative AI capabilities. It also intends to set up dedicated recruiting teams for generative AI within business units like AWS to boost efficiency.&lt;/p&gt;
    &lt;head rend="h2"&gt;'Hubs' constrain talent&lt;/head&gt;
    &lt;p&gt;Another point of contention is Amazon's aggressive return-to-office mandate, which has already caused logistical issues.&lt;/p&gt;
    &lt;p&gt;The company's new "hub" policy — which requires employees to relocate to a central office or risk termination — has further limited its access to "high-demand talent like those with GenAI skills," according to the internal document.&lt;/p&gt;
    &lt;p&gt;"Hubs constrain market availability," it stated.&lt;/p&gt;
    &lt;p&gt;Amazon is exploring ways to allow for more "location-flexible" roles, the document added.&lt;/p&gt;
    &lt;p&gt;Amazon's spokesperson told BI that the company is "always looking for ways to optimize our recruiting strategies and looking at alternate talent rich locations."&lt;/p&gt;
    &lt;p&gt;Amazon hasn't been entirely on the sidelines. Last year, it brought on Adept CEO David Luan as part of a licensing deal with the AI startup. Luan now heads Amazon's AI agents lab. But the company has also seen departures, including senior AI leaders like chip designer Rami Sinno and VP Vasi Philomin, who worked on Bedrock.&lt;/p&gt;
    &lt;p&gt;One Amazon recruiter told Business Insider that a growing number of job candidates started declining offers last year because of the company's RTO policy. Even if a competitor pays less, people are open to taking the job if they can stay remote, this person said.&lt;/p&gt;
    &lt;p&gt;"We are losing out on talent," this person added.&lt;/p&gt;
    &lt;p&gt;Indeed, Bloomberg reported recently that Oracle has hired away more than 600 Amazon employees in the past two years because Amazon's strict RTO policy has made poaching easier.&lt;/p&gt;
    &lt;head rend="h2"&gt;Staying the course&lt;/head&gt;
    &lt;p&gt;The internal Amazon document dates to late last year, leaving open the possibility that the company has since adjusted its compensation approach to make exceptions for top AI talent.&lt;/p&gt;
    &lt;p&gt;Still, multiple people familiar with the situation told Business Insider there haven't been any formal updates to internal pay guidelines. One current Amazon manager said it remains almost impossible for the company to enact sweeping changes, given its long track record of sticking to the existing system. The people who spoke with Business Insider asked not to be identified discussing sensitive matters.&lt;/p&gt;
    &lt;p&gt;"Based on how we run our business and what we have achieved, there are more risks than potential benefits from changing an approach that has been so successful for our shareholders over the past several decades," Amazon wrote this year about executive compensation in its annual proxy statement.&lt;/p&gt;
    &lt;p&gt;Of course, the AI talent war may end up being an expensive and misguided strategy, stoked by hype and investor over-exuberance.&lt;/p&gt;
    &lt;p&gt;Some of the high-profile recruits Meta recently lured have already departed.&lt;/p&gt;
    &lt;p&gt;Have a tip? Contact this reporter via email at ekim@businessinsider.com or Signal, Telegram, or WhatsApp at 650-942-3061. Use a personal email address, a nonwork WiFi network, and a nonwork device; here's our guide to sharing information securely.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45095603</guid></item><item><title>Patrick Winston: How to Speak (2018) [video]</title><link>https://www.youtube.com/watch?v=Unzc731iCUY</link><description>&lt;doc fingerprint="7055905545553646"&gt;
  &lt;main&gt;
    &lt;p&gt;About Press Copyright Contact us Creators Advertise Developers Terms Privacy Policy &amp;amp; Safety How YouTube works Test new features NFL Sunday Ticket © 2025 Google LLC&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45095849</guid></item><item><title>Towards Memory Specialization: A Case for Long-Term and Short-Term RAM</title><link>https://arxiv.org/abs/2508.02992</link><description>&lt;doc fingerprint="b89db80bcc93a0ca"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Computer Science &amp;gt; Hardware Architecture&lt;/head&gt;&lt;p&gt; [Submitted on 5 Aug 2025]&lt;/p&gt;&lt;head rend="h1"&gt;Title:Towards Memory Specialization: A Case for Long-Term and Short-Term RAM&lt;/head&gt;View PDF&lt;quote&gt;Abstract:Both SRAM and DRAM have stopped scaling: there is no technical roadmap to reduce their cost (per byte/GB). As a result, memory now dominates system cost. This paper argues for a paradigm shift from today's simple memory hierarchy toward specialized memory architectures that exploit application-specific access patterns. Rather than relying solely on traditional off-chip DRAM and on-chip SRAM, we envisage memory systems equipped with additional types of memory whose performance trade-offs benefit workloads through non-hierarchical optimization. We propose two new memory classes deserving explicit OS support: long-term RAM (LtRAM) optimized for read-intensive data with long lifetimes, and short-term RAM (StRAM) designed for transient, frequently-accessed data with short lifetimes. We explore underlying device technologies that could implement these classes, including their evolution and their potential integration into current system designs given emerging workload requirements. We identify critical research challenges to realize what we believe is a necessary evolution toward more efficient and scalable computing systems capable of meeting future demands.&lt;/quote&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;p&gt; export BibTeX citation Loading... &lt;/p&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45096140</guid></item><item><title>Desert Graves (2021)</title><link>https://www.desertmountaineer.com/2021/08/06/graves/</link><description>&lt;doc fingerprint="fee01957b9b612d8"&gt;
  &lt;main&gt;
    &lt;p&gt;Arizona is an interesting place. Even today, there is much remote country, and as I’ve wandered through its deserts and forests (yes, we have forests!), I have been surprised by how many times I’ve come across cemeteries and graves in the most out-of-the-way and unexpected places. I did a survey of place names on Arizona’s topographical maps and found a total of 147 named cemeteries, but I also found 9 places where there was just a “grave” or “graves” shown (I know there are many more than that, though – most are obscure and unknown). Here’s one that’s well-known to desert travelers. Located along the infamous Camino del Diablo, it’s shown on the map as O’Neill’s Grave. It sits in O’Neill Pass in the middle of the O’Neill Hills. It is said that one Dave O’Neill, a prospector, died in 1916 and was buried here. Passers-by leave coins and even bullets on the grave, maybe for good luck? US, Mexican and even Euro coins have been left there.&lt;/p&gt;
    &lt;p&gt;There’s an obscure memorial to the Oatman family hidden deep in the desert. If you know where to find it, here’s what you’d see.&lt;/p&gt;
    &lt;p&gt;Sometimes, there’s just a simple marker like this one, a cross remembering someone with the initials CMB, who apparently lived from June of 1912 to April of 1996. This was found atop the remotest of summits in the Clanton Hills.&lt;/p&gt;
    &lt;p&gt;I have been to places in the desert that bring to mind a possible death, but all I knew for certain was the curious name without any details. Deadman Gap; Charlie Died Well; Cemetery Ridge; Suicide Valley; Skeleton Mesa; Dead Mexican Creek; Slaughter Mountain; Canyon del Muerto; Skull Canyon.&lt;/p&gt;
    &lt;p&gt;One of my favorite parts of the state is the Tohono O’odham Indian Reservation. There are many small villages there, each with its own graveyard. It was obvious that, as a people, they highly respect their dead. It is their custom each year on November 1, the Day of the Dead, or Día de los Muertos, to go to every burial place on their nation and tidy up the graves. Many of these are in remote places where the village no longer has any inhabitants and has become a ghost village. For example, here is the cemetery for what once was the settlement of Chiapuk. I counted 72 graves, but the village has been abandoned these many years – it never had more than 10 houses.&lt;/p&gt;
    &lt;p&gt;In another remote corner of the reservation sits this tiny cemetery, the resting place of a dozen souls. It is hard by the site of what used to be Siovi Shuatak, abandoned for a great many years. In August of 2005, I almost died from heat fatigue while climbing on a 106-degree day near here, and was glad I didn’t end up being the newest occupant of this graveyard.&lt;/p&gt;
    &lt;p&gt;None of the graves in the previous 2 photos were marked and yet, every year, descendants of those buried there come out to tidy things up.&lt;/p&gt;
    &lt;p&gt;There’s another hamlet called Comobabi, which boasts 18 homes but, sadly, only 8 residents these days. There is an old graveyard up the hill, but it is being reclaimed by the desert. A newer graveyard sits on the eastern edge of the village, and it has 120 graves. Many of them are well-marked with modern stones. Can you imagine how many years it must have taken such a tiny hamlet to populate such a large cemetery?&lt;/p&gt;
    &lt;p&gt;Sitting only 4 miles from the Mexican border is a lonely graveyard near a peak called Nachi Kulik. The graves are well-tended, but this place is nowhere near any village, past or present. It’s a mystery why it sits where it does, alone out in the desert. I counted about 40 graves, and couldn’t help but wonder where these people had lived before being buried here.&lt;/p&gt;
    &lt;p&gt;Some had modern headstones like this one.&lt;/p&gt;
    &lt;p&gt;Here’s another one on the reservation where the inhabitants of the cemetery far outnumber those living in the village. Cemetery – 325; Ak Chin village – 96 today.&lt;/p&gt;
    &lt;p&gt;Scattered around the reservation are many roadside shrines like this one. Nobody is buried at any of these, but they are placed there simply to honor the memory of someone who has passed.&lt;/p&gt;
    &lt;p&gt;Another village on the reservation which has lost all of its population is Stoa Pitk. At the entrance to the cemetery sits this roughly-made sign of concrete, with the O’odham name for the village.&lt;/p&gt;
    &lt;p&gt;The village may now have a population of zero, but its cemetery contains 65 graves. About 25 of them are of a very old style, where a large pile of rocks covers the grave. I don’t know how long ago the O’odham people stopped making graves like these, but I would think it has been a great many years.&lt;/p&gt;
    &lt;p&gt;Here’s a bit of history uncovered by climber friend Andy Martin:&lt;/p&gt;
    &lt;p&gt;The dead were buried in a rock crevice and covered with stones or in a stone cairn roofed with logs. To accompany the spirit on its four day journey to the Underworld in the east, food and possessions were also interred with the body. A short speech by a relative usually accompanied burial. In this speech, the deceased would be asked not to return.&lt;/p&gt;
    &lt;p&gt;The previous photo shows exactly that, a stone cairn roofed with logs. I felt fortunate to be able to see one of these old-style graves.&lt;/p&gt;
    &lt;p&gt;One day, Dave Jurasevich and I climbed a peak in eastern Arizona only a mile from New Mexico. It was along the path of the Butterfield Trail, a stagecoach service that carried mail and passengers from St. Louis to San Francisco. We discovered this pink granite headstone marking the spot where one of the company’s employees died way back in 1861. It had been placed by a historical society which felt that the deceased, one John James Giddings, deserved better than the unmarked grave which sat there, almost forgotten, for more than a century and a half. If you click on this link, it will open a map of nearby Steins Peak, and in the upper left you can see the word “grave”. If you click on the map, it’ll open it up and show you more of the area. That’s where this picture was taken. It’s out in a remote spot in the Chihuahuan Desert.&lt;/p&gt;
    &lt;p&gt;Another remote burial I encountered was out in a forgotten corner of the Little Horn Mountains. If you click on this link, it will open a map. Click on the + sign to zoom way in, and you will see the word “graves”. That is where these next photos were taken. The Hovatter family had spent decades eking out a living way out here where life was very hard indeed. This photo shows the spot where they are buried.&lt;/p&gt;
    &lt;p&gt;No headstones, just a rude scrawl in a bit of concrete. Here is the one for Barbara Hovatter who lived from 1944 to 1968.&lt;/p&gt;
    &lt;p&gt;Here’s the one for D. Ray Hovatter, 1897 to 1974.&lt;/p&gt;
    &lt;p&gt;Near the hamlet of Agua Caliente, Arizona sits the Pioneer Cemetery. Many of those buried there are military veterans, such as this man.&lt;/p&gt;
    &lt;p&gt;There are also civilians present.&lt;/p&gt;
    &lt;p&gt;As I was perusing my maps one day, I saw the letters “cem” beside a lone peak, right by a railroad and a highway. I went to have a look, and found this.&lt;/p&gt;
    &lt;p&gt;There were 6 graves, all with recent wooden crosses, and the only thing written on any of them was “RIP”. Somebody felt these were important enough that they had made and placed new crosses, but my research didn’t reveal any information about who was buried here and when. There are many places like this in the desert – lonely graves, unmarked and forgotten.&lt;/p&gt;
    &lt;p&gt;One graveyard I visited in 1990 was full of mountain climbers. Cerro Aconcagua in Argentina kills some every year. The only period for which I could find accurate records was from 2001 to 2012 – the park medical service records show that 33 died on the mountain in those years, for an average of about 3 each year. More than that died the year I was there. I counted more than 60 graves during my visit in 1990 in the cemetery by Puente del Inca. It was a sobering visit, I can tell you.&lt;/p&gt;
    &lt;p&gt;Men and women, young and not-as-young, from many countries – Aconcagua had claimed them all, and they had found their final rest here. At least this was a mountain from which they could retrieve the bodies, unlike some ranges such as the Himalayas where that’s much harder to do.&lt;/p&gt;
    &lt;p&gt;Nearly all of us will choose to either be cremated or buried upon our death. A rare few will find that, regardless of their choice, neither will happen. I have met 2 such individuals in the remotest parts of our desert. The first was with Jake back in October of 2013 while we were peakbagging only a mile from the Mexican border in the Agua Dulce Mountains. We were shocked to come around a corner and discover this. See the white thing?&lt;/p&gt;
    &lt;p&gt;Here’s a closer look.&lt;/p&gt;
    &lt;p&gt;We moved it to better document what we’d found, then set it back in its original position.&lt;/p&gt;
    &lt;p&gt;We had no way of knowing who this was – male or female, young or old, which nationality? Nor did we know how long the skull had lain there. Jake and I were both shocked, to say the least. It was almost certainly an undocumented border-crosser, but how sad that they’d only made it a single mile into the U.S. on their journey to the promised land. We noted the GPS co-ordinates of the spot and later reported it to the authorities.&lt;/p&gt;
    &lt;p&gt;I found one other person who had no say in their final resting-place. She had died in a remote canyon in the Ajo Range. I found her in a dry creek bottom, almost hidden by thick vegetation. I moved this female human pelvis on to a rock out in the open so I could document her position for the authorities.&lt;/p&gt;
    &lt;p&gt;The canyon in which I found her remains was so hostile and desperate a place, it was hard to imagine why she had been there at all. Even more puzzling was the fact that she must have been totally confused about her location, as she would have been going up the canyon back towards Mexico. There is little doubt that she was an undocumented border-crosser. I found no other bones at that place, so animals had probably scattered them. Of course, I reported this location to the Organ Pipe Cactus National Monument authorities.&lt;/p&gt;
    &lt;p&gt;I don’t know if the desert is different than other places in this way – is it possible that we have more graves of unknown origin? Perhaps if you live alone and die alone out in a remote place, is there a greater chance that you would just be buried where they found you? Maybe it’s just me, but I find it kind of sad to think that you got buried in a grave with no headstone, no marker, no indication of who you were. As the years pass, the desert reclaims every trace of your final resting place, so that in the end only a notation on a map shows that some forgotten, nameless soul had been buried there. That’s the case here. If you click on this link, it will take you to a map. Use the + sign to zoom in until you see the word “grave”. The map was created in the year 1986, and the grave is shown as being on the Luke Air Force Range. This is an active military bombing range which has been in existence since 1941. We can assume that the grave predates the bombing range, so it has been there at least 80 years. Sadly, there’s no longer any trace of the grave whatsoever. I hope that we all fare better than some of these forgotten souls when our time comes.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45096173</guid></item><item><title>The buyer-pull and seller-push theories of sales</title><link>https://howtogrow.substack.com/p/the-physics-of-sales</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45096254</guid></item><item><title>Raspberry Pi 5 support (OpenBSD)</title><link>https://marc.info/?l=openbsd-cvs&amp;m=175675287220070&amp;w=2</link><description>&lt;doc fingerprint="e73f12d23de611fc"&gt;
  &lt;main&gt;&lt;quote&gt;[prev in list] [next in list] [prev in thread] [next in thread] List: openbsd-cvs Subject: CVS: cvs.openbsd.org: src From: Marcus Glocker &amp;lt;mglocker () cvs ! openbsd ! org&amp;gt; Date: 2025-09-01 18:56:04 Message-ID: dd1203a530237b22 () cvs ! openbsd ! org [Download RAW message or body] CVSROOT: /cvs Module name: src Changes by: mglocker@cvs.openbsd.org 2025/09/01 12:56:04 Modified files: distrib/arm64/iso: Makefile distrib/arm64/ramdisk: Makefile install.md list Log message: Add Raspberry Pi 5 Model B support for RAMDISK. Known issues: * Booting from PCIe storage HATs doesn't work because of missing U-Boot support. * WiFi on the Raspberry Pi 5 Model B "d0" boards doesn't work. * The active cooler (fan) doesn't work because of missing pwm/clock drivers (some work is in-progress). ok kettenis@, deraadt@ [prev in list] [next in list] [prev in thread] [next in thread] &lt;/quote&gt;&lt;lb/&gt;Configure |
About |
News |
Add a list |
Sponsored by KoreLogic&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45096585</guid></item><item><title>Don't Build Multi-Agents</title><link>https://cognition.ai/blog/dont-build-multi-agents</link><description>&lt;doc fingerprint="345590577c45886b"&gt;
  &lt;main&gt;
    &lt;p&gt;Frameworks for LLM Agents have been surprisingly disappointing. I want to offer some principles for building agents based on our own trial &amp;amp; error, and explain why some tempting ideas are actually quite bad in practice.&lt;/p&gt;
    &lt;p&gt;We’ll work our way up to the following principles:&lt;/p&gt;
    &lt;p&gt;Why think about principles?&lt;/p&gt;
    &lt;p&gt;HTML was introduced in 1993. In 2013, Facebook released React to the world. It is now 2025 and React (and its descendants) dominates the way developers build sites and apps. Why? Because React is not just a scaffold for writing code. It is a philosophy. By using React, you embrace building applications with a pattern of reactivity and modularity, which people now accept to be a standard requirement, but this was not always obvious to early web developers.&lt;/p&gt;
    &lt;p&gt;In the age of LLMs and building AI Agents, it feels like we’re still playing with raw HTML &amp;amp; CSS and figuring out how to fit these together to make a good experience. No single approach to building agents has become the standard yet, besides some of the absolute basics.&lt;/p&gt;
    &lt;quote&gt;In some cases, libraries such as https://github.com/openai/swarm by OpenAI and https://github.com/microsoft/autogen by Microsoft actively push concepts which I believe to be the wrong way of building agents. Namely, using multi-agent architectures, and I’ll explain why.&lt;/quote&gt;
    &lt;p&gt;That said, if you’re new to agent-building, there are lots of resources on how to set up the basic scaffolding [1] [2]. But when it comes to building serious production applications, it's a different story.&lt;/p&gt;
    &lt;p&gt;Let’s start with reliability. When agents have to actually be reliable while running for long periods of time and maintain coherent conversations, there are certain things you must do to contain the potential for compounding errors. Otherwise, if you’re not careful, things fall apart quickly. At the core of reliability is Context Engineering.&lt;/p&gt;
    &lt;p&gt;Context Engineering&lt;/p&gt;
    &lt;p&gt;In 2025, the models out there are extremely intelligent. But even the smartest human won’t be able to do their job effectively without the context of what they’re being asked to do. “Prompt engineering” was coined as a term for the effort needing to write your task in the ideal format for a LLM chatbot. “Context engineering” is the next level of this. It is about doing this automatically in a dynamic system. It takes more nuance and is effectively the #1 job of engineers building AI agents.&lt;/p&gt;
    &lt;p&gt;Take an example of a common type of agent. This agent&lt;/p&gt;
    &lt;p&gt;This is a tempting architecture, especially if you work in a domain of tasks with several parallel components to it. However, it is very fragile. The key failure point is this:&lt;/p&gt;
    &lt;quote&gt;Suppose your Task is “build a Flappy Bird clone”. This gets divided into Subtask 1 “build a moving game background with green pipes and hit boxes” and Subtask 2 “build a bird that you can move up and down”.&lt;lb/&gt;It turns out subagent 1 actually mistook your subtask and started building a background that looks like Super Mario Bros. Subagent 2 built you a bird, but it doesn’t look like a game asset and it moves nothing like the one in Flappy Bird. Now the final agent is left with the undesirable task of combining these two miscommunications.&lt;/quote&gt;
    &lt;p&gt;This may seem contrived, but most real-world tasks have many layers of nuance that all have the potential to be miscommunicated. You might think that a simple solution would be to just copy over the original task as context to the subagents as well. That way, they don’t misunderstand their subtask. But remember that in a real production system, the conversation is most likely multi-turn, the agent probably had to make some tool calls to decide how to break down the task, and any number of details could have consequences on the interpretation of the task.&lt;/p&gt;
    &lt;quote&gt;Principle 1&lt;lb/&gt;Share context, and share full agent traces, not just individual messages&lt;/quote&gt;
    &lt;p&gt;Let’s take another revision at our agent, this time making sure each agent has the context of the previous agents.&lt;/p&gt;
    &lt;p&gt;Unfortunately, we aren’t quite out of the woods. When you give your agent the same Flappy Bird cloning task, this time, you might end up with a bird and background with completely different visual styles. Subagent 1 and subagent 2 cannot not see what the other was doing and so their work ends up being inconsistent with each other.&lt;/p&gt;
    &lt;p&gt;The actions subagent 1 took and the actions subagent 2 took were based on conflicting assumptions not prescribed upfront.&lt;/p&gt;
    &lt;quote&gt;Principle 2&lt;lb/&gt;Actions carry implicit decisions, and conflicting decisions carry bad results&lt;/quote&gt;
    &lt;p&gt;I would argue that Principles 1 &amp;amp; 2 are so critical, and so rarely worth violating, that you should by default rule out any agent architectures that don’t abide by then. You might think this is constraining, but there is actually a wide space of different architectures you could still explore for your agent.&lt;/p&gt;
    &lt;p&gt;The simplest way to follow the principles is to just use a single-threaded linear agent:&lt;/p&gt;
    &lt;p&gt;Here, the context is continuous. However, you might run into issues for very large tasks with so many subparts that context windows start to overflow.&lt;/p&gt;
    &lt;p&gt;To be honest, the simple architecture will get you very far, but for those who have truly long-duration tasks, and are willing to put in the effort, you can do even better. There are several ways you could solve this, but today I will present just one:&lt;/p&gt;
    &lt;p&gt;In this world, we introduce a new LLM model whose key purpose is to compress a history of actions &amp;amp; conversation into key details, events, and decisions. This is hard to get right. It takes investment into figuring out what ends up being the key information and creating a system that is good at this. Depending on the domain, you might even consider fine-tuning a smaller model (this is in fact something we’ve done at Cognition).&lt;/p&gt;
    &lt;p&gt;The benefit you get is an agent that is effective at longer contexts. You will still eventually hit a limit though. For the avid reader, I encourage you to think of better ways to manage arbitrarily long contexts. It ends up being quite a deep rabbit hole!&lt;/p&gt;
    &lt;p&gt;If you’re an agent-builder, ensure your agent’s every action is informed by the context of all relevant decisions made by other parts of the system. Ideally, every action would just see everything else. Unfortunately, this is not always possible due to limited context windows and practical tradeoffs, and you may need to decide what level of complexity you are willing to take on for the level of reliability you aim for.&lt;/p&gt;
    &lt;p&gt;As you think about architecting your agents to avoid conflicting decision-making, here are some real-world examples to ponder:&lt;lb/&gt;Claude Code Subagents&lt;lb/&gt;As of June 2025, Claude Code is an example of an agent that spawns subtasks. However, it never does work in parallel with the subtask agent, and the subtask agent is usually only tasked with answering a question, not writing any code. Why? The subtask agent lacks context from the main agent that would otherwise be needed to do anything beyond answering a well-defined question. And if they were to run multiple parallel subagents, they might give conflicting responses, resulting in the reliability issues we saw with our earlier examples of agents. The benefit of having a subagent in this case is that all the subagent’s investigative work does not need to remain in the history of the main agent, allowing for longer traces before running out of context. The designers of Claude Code took a purposefully simple approach.&lt;lb/&gt;Edit Apply Models&lt;lb/&gt;In 2024, many models were really bad at editing code. A common practice among coding agents, IDEs, app builders, etc. (including Devin) was to use an “edit apply model.” The key idea was that it was actually more reliable to get a small model to rewrite your entire file, given a markdown explanation of the changes you wanted, than to get a large model to output a properly formatted diff. So, builders had the large models output markdown explanations of code edits and then fed these markdown explanations to small models to actually rewrite the files. However, these systems would still be very faulty. Often times, for example, the small model would misinterpret the instructions of the large model and make an incorrect edit due to the most slight ambiguities in the instructions. Today, the edit decision-making and applying are more often done by a single model in one action.&lt;/p&gt;
    &lt;p&gt;Multi-Agents&lt;/p&gt;
    &lt;p&gt;If we really want to get parallelism out of our system, you might think to let the decision makers “talk” to each other and work things out.&lt;/p&gt;
    &lt;p&gt;This is what us humans do when we disagree (in an ideal world). If Engineer A’s code causes a merge conflict with Engineer B, the correct protocol is to talk out the differences and reach a consensus. However, agents today are not quite able to engage in this style of long-context proactive discourse with much more reliability than you would get with a single agent. Humans are quite efficient at communicating our most important knowledge to one another, but this efficiency takes nontrivial intelligence.&lt;/p&gt;
    &lt;p&gt;Since not long after the launch of ChatGPT, people have been exploring the idea of multiple agents interacting with one another to achieve goals [3][4]. While I’m optimistic about the long-term possibilities of agents collaborating with one another, it is evident that in 2025, running multiple agents in collaboration only results in fragile systems. The decision-making ends up being too dispersed and context isn’t able to be shared thoroughly enough between the agents. At the moment, I don’t see anyone putting a dedicated effort to solving this difficult cross-agent context-passing problem. I personally think it will come for free as we make our single-threaded agents even better at communicating with humans. When this day comes, it will unlock much greater amounts of parallelism and efficiency.&lt;/p&gt;
    &lt;p&gt;Toward a More General Theory&lt;/p&gt;
    &lt;p&gt;These observations on context engineering are just the start to what we might someday consider the standard principles of building agents. And there are many more challenges and techniques not discussed here. At Cognition, agent building is a key frontier we think about. We build our internal tools and frameworks around these principles we repeatedly find ourselves relearning as a way to enforce these ideas. But our theories are likely not perfect, and we expect things to change as the field advances, so some flexibility and humility is required as well.&lt;/p&gt;
    &lt;p&gt;We welcome you to try our work at app.devin.ai. And if you would enjoy discovering some of these agent-building principles with us, reach out to walden@cognition.ai&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45096962</guid></item></channel></rss>