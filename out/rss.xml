<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Mon, 15 Sep 2025 19:32:35 +0000</lastBuildDate><item><title>The Mac App Flea Market</title><link>https://blog.jim-nielsen.com/2025/mac-app-flea-market/</link><description>&lt;doc fingerprint="5d71976d94b446a6"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The Mac App Flea Market&lt;/head&gt;
    &lt;p&gt;Have you ever searched for “AI chat” in the Mac App Store?&lt;/p&gt;
    &lt;p&gt;I have. It’s like strolling through one of those counterfeit, replica markets where all the goods look legit at first glance. But then when you look closer, you realize something is off.&lt;/p&gt;
    &lt;p&gt;For the query “AI chat”, there are so many ChatGPT-like app icons the results are comical. Take a look at these:&lt;/p&gt;
    &lt;p&gt;The real app icon for the ChatGPT desktop app (from OpenAI) is in that collection above. Can you spot it?&lt;/p&gt;
    &lt;p&gt;Here they are again in a single image:&lt;/p&gt;
    &lt;p&gt;(It’s the one in the 4th row, 3rd column.)&lt;/p&gt;
    &lt;p&gt;And those are just black-and-white lookalikes. There are other apps riding the AI/OpenAI wave that look like the ChatGPT logo just in different colors.&lt;/p&gt;
    &lt;p&gt;The funny thing is: the official ChatGPT desktop app from OpenAI is not even in the Mac App Store. It’s only available from their website, so it won’t show up in the “AI chat” results.&lt;/p&gt;
    &lt;p&gt;There were lots of other “sort of looks like the official one but isn’t” app icons in my search results, like this Claude one, this Grok one, or this Gemini one.&lt;/p&gt;
    &lt;p&gt;Oh, and these apps’ names were fascinating to look at. They were basically every spacing and casing combination of “AI”, “Chat”, and “Bot” you can image. Just look at this sampling:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;AI Chat Bot : Ask Assistant&lt;/item&gt;
      &lt;item&gt;AI Chatbot: Chat Ask Assistant&lt;/item&gt;
      &lt;item&gt;AI Chatbot : Chat AI Assistant&lt;/item&gt;
      &lt;item&gt;AI Chatbot : Ask Assistant AI&lt;/item&gt;
      &lt;item&gt;AI Chatbot—Open &amp;amp; Ask Chat Bot&lt;/item&gt;
      &lt;item&gt;AI ChatBot ASK Chat Assistant&lt;/item&gt;
      &lt;item&gt;AI Chatbot Assistant &amp;amp; Ask AI&lt;/item&gt;
      &lt;item&gt;Ai Chatbot :Ask Open Assistant&lt;/item&gt;
      &lt;item&gt;AI Chatbot :Genius Question AI&lt;/item&gt;
      &lt;item&gt;AI Chatbot-Ask Seek Assistant&lt;/item&gt;
      &lt;item&gt;AI ChatBot - Ask Anything Bot&lt;/item&gt;
      &lt;item&gt;AI Chatbot, Ask Chat Assistant&lt;/item&gt;
      &lt;item&gt;AI Chat Bot - AI Bot Assistant&lt;/item&gt;
      &lt;item&gt;AI Chatbot・AI Chat Assistant 5&lt;/item&gt;
      &lt;item&gt;Al Chatbot - AI Assistant Chat&lt;/item&gt;
      &lt;item&gt;AI Chatbot : Ask AI Assistant&lt;/item&gt;
      &lt;item&gt;AI Chatbot : Ask AI Chat Bot&lt;/item&gt;
      &lt;item&gt;AI Chatbot • Chat AI Assistant&lt;/item&gt;
      &lt;item&gt;AI ChatBot- Ask Chat Assistant&lt;/item&gt;
      &lt;item&gt;AI Chat Bot - Ask Assistant&lt;/item&gt;
      &lt;item&gt;AI Chatbot: Ask GPT Assistant&lt;/item&gt;
      &lt;item&gt;Chatbot AI : Ask Assistant&lt;/item&gt;
      &lt;item&gt;Chatbot: Open Ask AI Chat Bot&lt;/item&gt;
      &lt;item&gt;AI Chatbot Assistant: Ask Bot&lt;/item&gt;
      &lt;item&gt;AI Chat - Chatbot Ask Anything&lt;/item&gt;
      &lt;item&gt;AI Chat: Smart AI Assistant&lt;/item&gt;
      &lt;item&gt;Chatbot: Ask AI Assistant Bot&lt;/item&gt;
      &lt;item&gt;Chatbot AI Chat - AI Assistant&lt;/item&gt;
      &lt;item&gt;ChatBot : AI Chat Assistant&lt;/item&gt;
      &lt;item&gt;ChatBot&amp;amp;Chat Ask Ai Assistant&lt;/item&gt;
      &lt;item&gt;Chatbot: Ask Open Assistant AI&lt;/item&gt;
      &lt;item&gt;Chatbot: Ask Character AI Chat&lt;/item&gt;
      &lt;item&gt;AI Chatbot Assistant • Ask AI&lt;/item&gt;
      &lt;item&gt;Ask AI Chatbot: Chat Assistant&lt;/item&gt;
      &lt;item&gt;AI Chat - Chatbot Assistant 4o&lt;/item&gt;
      &lt;item&gt;AI Bot: Al ChatBot &amp;amp; Assistant&lt;/item&gt;
      &lt;item&gt;Chatbot: Open Chat with AI&lt;/item&gt;
      &lt;item&gt;Chatbot: Ask AI Chat Bot&lt;/item&gt;
      &lt;item&gt;AI Chat Assistant – ChatNow&lt;/item&gt;
      &lt;item&gt;Chatbot: Open Chat with AI Bot&lt;/item&gt;
      &lt;item&gt;Chatbot AI - Chat Assistant&lt;/item&gt;
      &lt;item&gt;Open Chat Ai Chatbot Assistant&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I mean, look at this one: they named it “Al Chatbot” (that's the letter &lt;code&gt;l&lt;/code&gt; as in “lima”, you can see it better in the URL slug where the letters are lowercase: &lt;code&gt;al-chatbot&lt;/code&gt;).&lt;/p&gt;
    &lt;p&gt;Imagine going to store to grab some Nike gear and you find stuff like this (image courtesy of this post on Reddit):&lt;/p&gt;
    &lt;p&gt;What does that say about the store you’re visiting?&lt;/p&gt;
    &lt;p&gt;I always wanted a pair of Mike Jordans, just like I always wanted ChatGPP for my Mac.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45246971</guid><pubDate>Mon, 15 Sep 2025 07:14:13 +0000</pubDate></item><item><title>RustGPT: A pure-Rust transformer LLM built from scratch</title><link>https://github.com/tekaratzas/RustGPT</link><description>&lt;doc fingerprint="35db335f75314ff8"&gt;
  &lt;main&gt;
    &lt;head class="px-3 py-2"&gt;RustGPT-demo-zoon.mp4&lt;/head&gt;
    &lt;p&gt;A complete Large Language Model implementation in pure Rust with no external ML frameworks. Built from the ground up using only &lt;code&gt;ndarray&lt;/code&gt; for matrix operations.&lt;/p&gt;
    &lt;p&gt;This project demonstrates how to build a transformer-based language model from scratch in Rust, including:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Pre-training on factual text completion&lt;/item&gt;
      &lt;item&gt;Instruction tuning for conversational AI&lt;/item&gt;
      &lt;item&gt;Interactive chat mode for testing&lt;/item&gt;
      &lt;item&gt;Full backpropagation with gradient clipping&lt;/item&gt;
      &lt;item&gt;Modular architecture with clean separation of concerns&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Start with these two core files to understand the implementation:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;src/main.rs&lt;/code&gt;- Training pipeline, data preparation, and interactive mode&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;src/llm.rs&lt;/code&gt;- Core LLM implementation with forward/backward passes and training logic&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The model uses a transformer-based architecture with the following components:&lt;/p&gt;
    &lt;code&gt;Input Text → Tokenization → Embeddings → Transformer Blocks → Output Projection → Predictions
&lt;/code&gt;
    &lt;code&gt;src/
├── main.rs              # 🎯 Training pipeline and interactive mode
├── llm.rs               # 🧠 Core LLM implementation and training logic
├── lib.rs               # 📚 Library exports and constants
├── transformer.rs       # 🔄 Transformer block (attention + feed-forward)
├── self_attention.rs    # 👀 Multi-head self-attention mechanism  
├── feed_forward.rs      # ⚡ Position-wise feed-forward networks
├── embeddings.rs        # 📊 Token embedding layer
├── output_projection.rs # 🎰 Final linear layer for vocabulary predictions
├── vocab.rs            # 📝 Vocabulary management and tokenization
├── layer_norm.rs       # 🧮 Layer normalization
└── adam.rs             # 🏃 Adam optimizer implementation

tests/
├── llm_test.rs         # Tests for core LLM functionality
├── transformer_test.rs # Tests for transformer blocks
├── self_attention_test.rs # Tests for attention mechanisms
├── feed_forward_test.rs # Tests for feed-forward layers
├── embeddings_test.rs  # Tests for embedding layers
├── vocab_test.rs       # Tests for vocabulary handling
├── adam_test.rs        # Tests for optimizer
└── output_projection_test.rs # Tests for output layer
&lt;/code&gt;
    &lt;p&gt;The implementation includes two training phases:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Pre-training: Learns basic world knowledge from factual statements&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;"The sun rises in the east and sets in the west"&lt;/item&gt;
          &lt;item&gt;"Water flows downhill due to gravity"&lt;/item&gt;
          &lt;item&gt;"Mountains are tall and rocky formations"&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Instruction Tuning: Learns conversational patterns&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;"User: How do mountains form? Assistant: Mountains are formed through tectonic forces..."&lt;/item&gt;
          &lt;item&gt;Handles greetings, explanations, and follow-up questions&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Clone and run
git clone https://github.com/tekaratzas/RustGPT.git 
cd RustGPT
cargo run

# The model will:
# 1. Build vocabulary from training data
# 2. Pre-train on factual statements (100 epochs)  
# 3. Instruction-tune on conversational data (100 epochs)
# 4. Enter interactive mode for testing&lt;/code&gt;
    &lt;p&gt;After training, test the model interactively:&lt;/p&gt;
    &lt;code&gt;Enter prompt: How do mountains form?
Model output: Mountains are formed through tectonic forces or volcanism over long geological time periods

Enter prompt: What causes rain?
Model output: Rain is caused by water vapor in clouds condensing into droplets that become too heavy to remain airborne
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Vocabulary Size: Dynamic (built from training data)&lt;/item&gt;
      &lt;item&gt;Embedding Dimension: 128&lt;/item&gt;
      &lt;item&gt;Hidden Dimension: 256&lt;/item&gt;
      &lt;item&gt;Max Sequence Length: 80 tokens&lt;/item&gt;
      &lt;item&gt;Architecture: 3 Transformer blocks + embeddings + output projection&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Optimizer: Adam with gradient clipping&lt;/item&gt;
      &lt;item&gt;Pre-training LR: 0.0005 (100 epochs)&lt;/item&gt;
      &lt;item&gt;Instruction Tuning LR: 0.0001 (100 epochs)&lt;/item&gt;
      &lt;item&gt;Loss Function: Cross-entropy loss&lt;/item&gt;
      &lt;item&gt;Gradient Clipping: L2 norm capped at 5.0&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Custom tokenization with punctuation handling&lt;/item&gt;
      &lt;item&gt;Greedy decoding for text generation&lt;/item&gt;
      &lt;item&gt;Gradient clipping for training stability&lt;/item&gt;
      &lt;item&gt;Modular layer system with clean interfaces&lt;/item&gt;
      &lt;item&gt;Comprehensive test coverage for all components&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Run all tests
cargo test

# Test specific components
cargo test --test llm_test
cargo test --test transformer_test
cargo test --test self_attention_test

# Build optimized version
cargo build --release

# Run with verbose output
cargo test -- --nocapture&lt;/code&gt;
    &lt;p&gt;This implementation demonstrates key ML concepts:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Transformer architecture (attention, feed-forward, layer norm)&lt;/item&gt;
      &lt;item&gt;Backpropagation through neural networks&lt;/item&gt;
      &lt;item&gt;Language model training (pre-training + fine-tuning)&lt;/item&gt;
      &lt;item&gt;Tokenization and vocabulary management&lt;/item&gt;
      &lt;item&gt;Gradient-based optimization with Adam&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Perfect for understanding how modern LLMs work under the hood!&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;ndarray&lt;/code&gt;- N-dimensional arrays for matrix operations&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;rand&lt;/code&gt;+&lt;code&gt;rand_distr&lt;/code&gt;- Random number generation for initialization&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;No PyTorch, TensorFlow, or Candle - just pure Rust and linear algebra!&lt;/p&gt;
    &lt;p&gt;Contributions are welcome! This project is perfect for learning and experimentation.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🏪 Model Persistence - Save/load trained parameters to disk (currently all in-memory)&lt;/item&gt;
      &lt;item&gt;⚡ Performance optimizations - SIMD, parallel training, memory efficiency&lt;/item&gt;
      &lt;item&gt;🎯 Better sampling - Beam search, top-k/top-p, temperature scaling&lt;/item&gt;
      &lt;item&gt;📊 Evaluation metrics - Perplexity, benchmarks, training visualizations&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Advanced architectures (multi-head attention, positional encoding, RoPE)&lt;/item&gt;
      &lt;item&gt;Training improvements (different optimizers, learning rate schedules, regularization)&lt;/item&gt;
      &lt;item&gt;Data handling (larger datasets, tokenizer improvements, streaming)&lt;/item&gt;
      &lt;item&gt;Model analysis (attention visualization, gradient analysis, interpretability)&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Fork the repository&lt;/item&gt;
      &lt;item&gt;Create a feature branch: &lt;code&gt;git checkout -b feature/model-persistence&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Make your changes and add tests&lt;/item&gt;
      &lt;item&gt;Run the test suite: &lt;code&gt;cargo test&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Submit a pull request with a clear description&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Follow standard Rust conventions (&lt;code&gt;cargo fmt&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;Add comprehensive tests for new features&lt;/item&gt;
      &lt;item&gt;Update documentation and README as needed&lt;/item&gt;
      &lt;item&gt;Keep the "from scratch" philosophy - avoid heavy ML dependencies&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🚀 Beginner: Model save/load, more training data, config files&lt;/item&gt;
      &lt;item&gt;🔥 Intermediate: Beam search, positional encodings, training checkpoints&lt;/item&gt;
      &lt;item&gt;⚡ Advanced: Multi-head attention, layer parallelization, custom optimizations&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Questions? Open an issue or start a discussion!&lt;/p&gt;
    &lt;p&gt;No PyTorch, TensorFlow, or Candle - just pure Rust and linear algebra!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45247890</guid><pubDate>Mon, 15 Sep 2025 09:47:18 +0000</pubDate></item><item><title>How big a solar battery do I need to store all my home's electricity?</title><link>https://shkspr.mobi/blog/2025/09/how-big-a-solar-battery-do-i-need-to-store-all-my-homes-electricity/</link><description>&lt;doc fingerprint="b671805753a57731"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How big a solar battery do I need to store *all* my home's electricity?&lt;/head&gt;
    &lt;p&gt;I have a modest set of solar panels on an entirely ordinary house in suburban London.&lt;/p&gt;
    &lt;p&gt;On average they generate about 3,800kWh per year. We also use about 3,800kWh of electricity each year. Obviously, we can't use all the power produced over summer and we need to buy power in winter. So here's my question:&lt;/p&gt;
    &lt;p&gt;How big a battery would we need in order to be completely self-sufficient?&lt;/p&gt;
    &lt;head rend="h2"&gt;Background&lt;/head&gt;
    &lt;p&gt;Let's take a look at a typical summer's day. The graph is a little complex, so I'll explain it.&lt;/p&gt;
    &lt;p&gt;The yellow line shows solar production. It starts shortly after sunrise, peaks at midday, and gradually drops until sunset.&lt;/p&gt;
    &lt;p&gt;The red line shows how much electricity our home is using. As you can see, there's a large peak about 19:00 when we cook dinner.&lt;/p&gt;
    &lt;p&gt;The blue line shows how much electricity we draw or export from the grid. From midnight until sunrise we import because the sun isn't shining. Once the sun has risen we're able to power our house and export to our neighbours. When we cook, we draw from the grid and our battery - which is why the evening grid peak is lower than the household use dip.&lt;/p&gt;
    &lt;p&gt;The CSV of the data looks something like this:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Local_time&lt;/cell&gt;
        &lt;cell role="head"&gt;Household_(W)&lt;/cell&gt;
        &lt;cell role="head"&gt;Solar_(W)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;2025-08-25T08:25:00.000+01:00&lt;/cell&gt;
        &lt;cell&gt;-187.76&lt;/cell&gt;
        &lt;cell&gt;1166.77&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;2025-08-25T08:30:00.000+01:00&lt;/cell&gt;
        &lt;cell&gt;-227.04&lt;/cell&gt;
        &lt;cell&gt;1193.25&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;2025-08-25T08:35:00.000+01:00&lt;/cell&gt;
        &lt;cell&gt;-253.06&lt;/cell&gt;
        &lt;cell&gt;1222.84&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;2025-08-25T08:40:00.000+01:00&lt;/cell&gt;
        &lt;cell&gt;-266.87&lt;/cell&gt;
        &lt;cell&gt;1245.18&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;2025-08-25T08:45:00.000+01:00&lt;/cell&gt;
        &lt;cell&gt;-450.8&lt;/cell&gt;
        &lt;cell&gt;1268.66&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;2025-08-25T08:50:00.000+01:00&lt;/cell&gt;
        &lt;cell&gt;-251.84&lt;/cell&gt;
        &lt;cell&gt;1281.79&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;2025-08-25T08:55:00.000+01:00&lt;/cell&gt;
        &lt;cell&gt;-1426.26&lt;/cell&gt;
        &lt;cell&gt;1306.93&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;2025-08-25T09:00:00.000+01:00&lt;/cell&gt;
        &lt;cell&gt;-206.78&lt;/cell&gt;
        &lt;cell&gt;1341.37&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;2025-08-25T09:05:00.000+01:00&lt;/cell&gt;
        &lt;cell&gt;-215.52&lt;/cell&gt;
        &lt;cell&gt;1390.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;2025-08-25T09:10:00.000+01:00&lt;/cell&gt;
        &lt;cell&gt;-242.6&lt;/cell&gt;
        &lt;cell&gt;1426.19&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;2025-08-25T09:15:00.000+01:00&lt;/cell&gt;
        &lt;cell&gt;-246.84&lt;/cell&gt;
        &lt;cell&gt;1473&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;It's fairly trivial to sum both columns and subtract one from the other. That shows either the excess or deficit in solar power for the household.&lt;/p&gt;
    &lt;p&gt;On that day, the house used 9.7kWh and generated 19.6kWh. I'd need a 9.9kWh battery to store the excess right? Wrong!&lt;/p&gt;
    &lt;p&gt;Because my usage doesn't track the sun, I'd actually need a 13kWh battery. That's the peak amount of excess electricity I've generated in that one day.&lt;/p&gt;
    &lt;p&gt;What I want to do is find out what the maximum size battery I would need in order to store all of summer's electricity for use in winter.&lt;/p&gt;
    &lt;p&gt;Luckily, I have several years of real data to go off! Let's get started!&lt;/p&gt;
    &lt;head rend="h2"&gt;Disclaimer&lt;/head&gt;
    &lt;p&gt;This is based on data generated by my home battery. It has probes to measure solar output and grid flow. It is not 100% clock-accurate compared to my solar-panels' internal reporting nor what my smart-meter reports. I estimate a 1-2% deviation, which is good enough for these purposes.&lt;/p&gt;
    &lt;p&gt;My energy usage isn't representative of anything other than my usage. Your household is probably different. I already have a 4.8kWh battery which changes how and when I use energy.&lt;/p&gt;
    &lt;p&gt;This doesn't account for gas heating or hot water. We have some electric heaters and taps which increases our electricity usage.&lt;/p&gt;
    &lt;p&gt;My maths is probably right - but the code is open source, so feel free to check for yourself.&lt;/p&gt;
    &lt;p&gt;Remember, this is just a bit of fun. There's no practical way to build domestic batteries with this capacity using the technology of 2025.&lt;/p&gt;
    &lt;head rend="h2"&gt;Code&lt;/head&gt;
    &lt;p&gt;We tend to start generating more electricity than we use starting in Spring. So I've picked the end of March 2024 to the end of March 2025.&lt;/p&gt;
    &lt;p&gt;Let's see how big a battery we'd need to store our summer excess for winter. This finds the cumulative difference between each day's energy production and usage:&lt;/p&gt;
    &lt;code&gt; Python 3 import os
import pandas as pd

# Load all the CSVs
filepaths = [f for f in os.listdir(".") if f.endswith('.csv')]
df = pd.concat(map(pd.read_csv, filepaths))

# Make sure they're in order
df = df.sort_values("Timestamp")
df = df.reset_index(drop=True)

# Resolution is every 5 minutes, so divide by 12 to get hourly
df["Cumulative_Difference"] = ( (df["Household_(W)"] + df["Solar_(W)"] ).cumsum() ) / 12

# kWh of battery needed
int(df["Cumulative_Difference"].max() / 1000)

## Draw a pretty graph
df.plot(kind="line", x="Local_time", y="Cumulative_Difference", xlabel="Date", ylabel="MWh", xticks=["2024-04-01", "2024-05-01", "2024-05-01", "2024-06-01", "2024-07-01", "2024-08-01", "2024-09-01", "2024-10-01", "2024-11-01", "2024-12-01", "2025-01-01", "2025-02-01", "2025-03-01", "2025-04-01"], legend=False, grid=True, fontsize=15)
plt.show()
&lt;/code&gt;
    &lt;p&gt;The total is 1,068KWh - basically, a MegaWatt-hour of storage.&lt;/p&gt;
    &lt;p&gt;Here's a quick graph to show how the storage would be used over the year.&lt;/p&gt;
    &lt;p&gt;As you can see, even in this scenario there are a few days where we'd need to import energy from the grid.&lt;/p&gt;
    &lt;head rend="h2"&gt;Is this sensible?&lt;/head&gt;
    &lt;p&gt;Probably not, no. It doesn't account for increased energy use from having an electric car or moving away from gas heating / cooking. As solar panels increase in efficiency, it might be more sensible to replace the panels on my roof, or add some onto a shed.&lt;/p&gt;
    &lt;p&gt;The environmental impact of creating and storing such huge batteries could also be factored in.&lt;/p&gt;
    &lt;p&gt;A battery which is only 100% full for a few days probably isn't an efficient design. Using wind, hydro, and other green sources from the grid might be preferable.&lt;/p&gt;
    &lt;p&gt;But, remember, this is an exercise in wishful thinking.&lt;/p&gt;
    &lt;head rend="h2"&gt;Is this possible?&lt;/head&gt;
    &lt;p&gt;Grid-scale batteries exist and they work brilliantly.&lt;/p&gt;
    &lt;p&gt;But if I wanted my own MegaWatt-hour of battery storage, it would probably cost me between £100k and half-a-million quid.&lt;/p&gt;
    &lt;p&gt;That doesn't include maintenance, the land, planning permission, and a hundred other things.&lt;/p&gt;
    &lt;p&gt;But battery prices are falling fast. In the last decade lithium ion battery prices have fallen 90%. With new sodium ion batteries promising an even bigger drop - down to US$10/kWh.&lt;/p&gt;
    &lt;p&gt;If - and it is a big if - those numbers came to pass, it would probably cost around £8,000 for a domestic battery. Basically the same cost as adding solar panels in the first place.&lt;/p&gt;
    &lt;p&gt;Domestic solar works - yes, even in the rainy UK! It is relatively cheap, moves energy production as close as possible to energy consumption, reduces bill-shock, and means we don't have endless planning arguments about whether fields should be turned into solar farms.&lt;/p&gt;
    &lt;p&gt;It is possible that, not too long in the future, every home could also have a 1 MegaWatt-hour battery. They would be able to capture all the excess solar power generated in a year.&lt;/p&gt;
    &lt;p&gt;There's a bright and sunny future where every home can be solar-self-sufficient.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45248899</guid><pubDate>Mon, 15 Sep 2025 12:33:28 +0000</pubDate></item><item><title>Show HN: Semlib – Semantic Data Processing</title><link>https://github.com/anishathalye/semlib</link><description>&lt;doc fingerprint="58478597c03c509c"&gt;
  &lt;main&gt;
    &lt;p&gt;Semlib is a Python library for building data processing and data analysis pipelines that leverage the power of large language models (LLMs). Semlib provides, as building blocks, familiar functional programming primitives like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, and &lt;code&gt;filter&lt;/code&gt;, but with a twist: Semlib's implementation of these operations are programmed with natural language descriptions rather than code. Under the hood, Semlib handles complexities such as prompting, parsing, concurrency control, caching, and cost tracking.&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;pip install semlib&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;📖 API Reference ⬀ 🤔 Rationale 💡 Examples ⬀&lt;/p&gt;
    &lt;code&gt;&amp;gt;&amp;gt;&amp;gt; presidents = await prompt(
...     "Who were the 39th through 42nd presidents of the United States?",
...     return_type=Bare(list[str])
... )

&amp;gt;&amp;gt;&amp;gt; await sort(presidents, by="right-leaning", reverse=True)  # highest first
['Ronald Reagan', 'George H. W. Bush', 'Bill Clinton', 'Jimmy Carter']

&amp;gt;&amp;gt;&amp;gt; await find(presidents, by="former actor")
'Ronald Reagan'

&amp;gt;&amp;gt;&amp;gt; await map(
...     presidents,
...     "How old was {} when he took office?",
...     return_type=Bare(int),
... )
[52, 69, 64, 46]&lt;/code&gt;
    &lt;p&gt;Large language models are great at natural-language data processing and data analysis tasks, but when you have a large amount of data, you can't get high-quality results by just dumping all the data into a long-context LLM and asking it to complete a complex task in a single shot. Even with today's reasoning models and agents, this approach doesn't give great results.&lt;/p&gt;
    &lt;p&gt;This library provides an alternative. You can structure your computation using the building blocks that Semlib provides: functional programming primitives upgraded to handle semantic operations. This approach has a number of benefits.&lt;/p&gt;
    &lt;p&gt;Quality. By breaking down a sophisticated data processing task into simpler steps that are solved by today's LLMs, you can get higher-quality results, even in situations where today's LLMs might be capable of processing the data in a single shot and ending up with barely acceptable results. (example: analyzing support tickets in Airline Support Report)&lt;/p&gt;
    &lt;p&gt;Feasibility. Even long-context LLMs have limitations (e.g., 1M tokens in today's frontier models). Furthermore, performance often drops off with longer inputs. By breaking down the data processing task into smaller steps, you can handle arbitrary-sized data. (example: sorting an arbitrary number of arXiv papers in arXiv Paper Recommendations)&lt;/p&gt;
    &lt;p&gt;Latency. By breaking down the computation into smaller pieces and structuring it using functional programming primitives like &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt;, the parts of the computation can be run concurrently, reducing the latency of the overall computation.
(example: tree reduce with O(log n) computation depth in Disneyland Reviews Synthesis)&lt;/p&gt;
    &lt;p&gt;Cost. By breaking down the computation into simpler sub-tasks, you can use smaller and cheaper models that are capable of solving those sub-tasks, which can reduce data processing costs. Furthermore, you can choose the model on a per-subtask basis, allowing you to further optimize costs. (example: using &lt;code&gt;gpt-4.1-nano&lt;/code&gt; for the pre-filtering step in arXiv Paper Recommendations)&lt;/p&gt;
    &lt;p&gt;Security. By breaking down the computation into tasks that simpler models can handle, you can use open models that you host yourself, allowing you to process sensitive data without having to trust a third party. (example: using &lt;code&gt;gpt-oss&lt;/code&gt; and &lt;code&gt;qwen3&lt;/code&gt; in Resume Filtering)&lt;/p&gt;
    &lt;p&gt;Flexibility. LLMs are great at certain tasks, like natural-language processing. They're not so great at other tasks, like multiplying numbers. Using Semlib, you can break down your data processing task into multiple steps, some of which use LLMs and others that just use regular old Python code, getting the best of both worlds. (example: Python code for filtering in Resume Filtering)&lt;/p&gt;
    &lt;p&gt;Read more about the rationale, the story behind this library, and related work in the blog post.&lt;/p&gt;
    &lt;code&gt;@misc{athalye:semlib,
  author = {Anish Athalye},
  title = {{Semlib}: Semantic data processing for {Python}},
  year = {2025},
  howpublished = {\url{https://github.com/anishathalye/semlib}},
}&lt;/code&gt;
    &lt;p&gt;Copyright (c) Anish Athalye. Released under the MIT License. See LICENSE.md for details.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45249697</guid><pubDate>Mon, 15 Sep 2025 13:45:56 +0000</pubDate></item><item><title>CubeSats are fascinating learning tools for space</title><link>https://www.jeffgeerling.com/blog/2025/cubesats-are-fascinating-learning-tools-space</link><description>&lt;doc fingerprint="b535155168e585d4"&gt;
  &lt;main&gt;
    &lt;p&gt;These are CubeSats. Satellites that are going to space—or at least, the ones I have here are prototypes. But these have one thing in common: they're all powered by either a Raspberry Pi, or a microcontroller.&lt;/p&gt;
    &lt;p&gt;There are already Pis in space, like on Mark Rober's SatGus, on GASPACS, and the Astro Pis on the Space station. Another Pi is going up this weekend, which is why I'm posting this today. I'll get to that one, but I wanted to spend some time talking about two things that fascinate me: Raspberry Pis, and putting them space!&lt;/p&gt;
    &lt;p&gt;In this post, I'll cover:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;What is a CubeSat&lt;/item&gt;
      &lt;item&gt;Who builds and launches CubeSats&lt;/item&gt;
      &lt;item&gt;How you can build your own CubeSat&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Then for a bonus, in today's video, I interviewed two people helping students launch SilverSat into space (this weekend!), and a YouTuber who I've learned a lot from about track satellites (including CubeSats) from your own backyard!&lt;/p&gt;
    &lt;p&gt;The rest of this post contains a lightly-edited transcript of the video above.&lt;/p&gt;
    &lt;p&gt;So let's dive in.&lt;/p&gt;
    &lt;head rend="h2"&gt;What's a CubeSat?&lt;/head&gt;
    &lt;p&gt;What's a CubeSat? Well, it's in the name—it's a satellite that's a cube!&lt;/p&gt;
    &lt;p&gt;But they don't have to be a cube, these smallest ones are '1U', or 10 x 10 x 10 centimeters. You can also find 2U CubeSats, like the taller Build a CubeSat, which is 20 centimeters tall. (Well, technically the current prototype is 1.5U).&lt;/p&gt;
    &lt;p&gt;SatGus, Mark Rober's satellite taking space selfies, is a whopping 12U! They needed all that extra space to fit a phone, a mechanism to deploy the phone, a camera to take the selfie, a Raspberry Pi to control the phone, and redundant systems for everything. They've already taken thousands of selfies, and SatGus has me beat. My best Pi might get to 3.4 Gigahertz, but the Pi on SatGus is whizzing through space at almost 17,000 miles per hour. That's 7,570 meters per second for everyone else in the world.&lt;/p&gt;
    &lt;p&gt;But back to CubeSats. Having standards means you can build off existing work for the hard things, like a space-rated Aluminum frame, or the complex EPS, or Electrical Power System board.&lt;/p&gt;
    &lt;p&gt;Then you can add in custom parts, like a Pi to run experiments, a communications board with antennas and radios, cameras, sensors, and more!&lt;/p&gt;
    &lt;p&gt;And these cubesats have normal screw-on antennas, but the way these things are deployed, you only get 10x10x10 centimeters—you can't have an antenna poking out the top. So they use cool things like flexible tape antennas that pop out once your CubeSat deploys.&lt;/p&gt;
    &lt;p&gt;What else makes CubeSats cool?&lt;/p&gt;
    &lt;p&gt;Well, how about price? In the old days, you had to have like $10 million to build a satellite, and $60+ million to launch it into space.&lt;/p&gt;
    &lt;p&gt;Today, you can build a space-ready CubeSat using a few thousand dollars of parts. Then you can launch it on a rideshare for... well, $85 grand. Which is a lot, but it's not $60 million-a-lot.&lt;/p&gt;
    &lt;p&gt;So most of us won't be launching one of these things into space, unless maybe you can get a grant. But that doesn't mean they're not useful to us.&lt;/p&gt;
    &lt;head rend="h2"&gt;Who builds CubeSats?&lt;/head&gt;
    &lt;p&gt;Like with many projects, I love these things for the challenge, the way they break some of my assumptions, like working with Raspberry Pis.&lt;/p&gt;
    &lt;p&gt;If you're building a device that's less than 2 kilograms, has 1.8W of maximum continuous power draw, and needs to be operated remotely—even for just a month—you're immediately going to change your assumptions about how you build things.&lt;/p&gt;
    &lt;p&gt;I would hack Home Assistant onto a mini PC to monitor some sensors if I was feeling lazy—but that Mini PC would use an order of magnitude too much power for a CubeSat (much less the internal volume it would occupy).&lt;/p&gt;
    &lt;p&gt;On CubeSats, every millimeter, and every milliAmp has to be accounted for.&lt;/p&gt;
    &lt;p&gt;So to me, CubeSats are like Swiss watches of modern electronics. How many sensors can you fit in one? How much throughput can you get on a tiny radio with a small antenna? Can you get enough power out of tiny solar cells to keep the main flight computer working? How do you control thermals without air? How do you design it so it can recover from a complete power loss?&lt;/p&gt;
    &lt;p&gt;Every step of the way there are challenges; and that's before we even launch one! Someone who I think illustrates this best is Manuel, with his Build a CubeSat project. He's working on this Cubesat:&lt;/p&gt;
    &lt;p&gt;He did a weather balloon launch this year, and he's documenting everything on YouTube.&lt;/p&gt;
    &lt;p&gt;His first launch had many small problems. But also great learning, especially around redundancy and how to get the thing off the launch stand without problems.&lt;/p&gt;
    &lt;p&gt;And you're not only dealing with hardware, but also with software. And software that, at its core, has to be remotely accessed. And not only remote, but also wireless, meaning anyone else on earth within range can access it too.&lt;/p&gt;
    &lt;p&gt;So how do you keep it secure? That's something Tim from Ethos Labs is also dealing with with this, his T.E.M.P.E.S.T. CubeSat:&lt;/p&gt;
    &lt;p&gt;This thing is actually made to be not secure. It has intentional vulnerabilities, and he uses those to teach people different ways to make their CubeSats more secure.&lt;/p&gt;
    &lt;p&gt;You have complex hardware, running in limited space, with limited power and communications, and you want cram in as much functionality as possible.&lt;/p&gt;
    &lt;p&gt;Do you see where I'm going with this? That kind of problem is perfect for the microcontrollers and low-power SBCs that I love testing and playing with every day.&lt;/p&gt;
    &lt;p&gt;Except instead of me worrying about something consuming 10 watts, these guys are looking at a power budget of one watt. Or less!&lt;/p&gt;
    &lt;p&gt;These problems are hard. And not everyone has the patience for a completely custom project like Build a CubeSat, so there are also some small companies building kits to help you learn all these lessons with a little less stress.&lt;/p&gt;
    &lt;p&gt;Like what hardware do you need for a 100% self-contained CubeSat? And how do you get it certified for flight on a SpaceX rocket?&lt;/p&gt;
    &lt;head rend="h2"&gt;Your own CubeSat&lt;/head&gt;
    &lt;p&gt;Well, I'll quickly cover two products that are meant for like STEM classroom education, one from the lower end, and one that's based on a CubeSat that just flew this summer.&lt;/p&gt;
    &lt;p&gt;The first one is the MySat Kit, that you can buy from MySat in Ukraine. It comes with a board powered by an ESP32 with a camera, light sensors, an LED, gyroscope, accelerometer, barometer, clock, and a few other boards. And these are all off-the-shelf components you can buy replacements for or use 'em with other hardware, like a Raspberry Pi.&lt;/p&gt;
    &lt;p&gt;The way it's put together won't hold up on a rocket launch, but it's not meant for that. It's meant to show you how it's built, how you can communicate with it, and that sort of thing.&lt;/p&gt;
    &lt;p&gt;It took like an hour to build, and once I put it together I tried flashing the flight control firmware with my Mac... but I ran into some issues with Arduino IDE, and that's a me problem and not so much a MySat problem. Plus the team behind it has a whole war going on that they've been dealing with, so I'll be patient and try getting it going later.&lt;/p&gt;
    &lt;p&gt;The MySat goes from like $130 for a basic kit where you 3D print your own frame, or up to $300 for a full kit including deployable solar panels.&lt;/p&gt;
    &lt;p&gt;On the higher end, there's RASCube, and Edward Robinson, the 21 year old founder of Robinson Space, sent it over after he saw me posting about CubeSats online.&lt;/p&gt;
    &lt;p&gt;The RASCube comes from Australia, and Edward's mission is to teach students about space through hands-on building.&lt;/p&gt;
    &lt;p&gt;I just built this LS version of the cube last week; it's the little brother to their V2 design, which flew in space on a Falcon 9 rocket earlier this year.&lt;/p&gt;
    &lt;p&gt;Like MySat, you build the kit with an EPS board for power, a computer board with all the controls, and a radio board that ties in GPS and radio comms.&lt;/p&gt;
    &lt;p&gt;The RASCubes are a bit more expensive, coming in at around $430 each for the LB, and $600 each for the full aluminum V2s. But the price tag on that also covers full lesson plans and resources for teachers.&lt;/p&gt;
    &lt;p&gt;I love these things—all the people I've talked to on this journey are motivated by the same thing: learning about space, electronics, and integrating hardware in a new way, and sharing what they learn with others, especially students.&lt;/p&gt;
    &lt;head rend="h2"&gt;CubeSat T.E.M.P.E.S.T. and Build a CubeSat&lt;/head&gt;
    &lt;p&gt;Like take Build a Cubesat. For that project, everything is open source hardware, and every part of the journey is being documented on YouTube.&lt;/p&gt;
    &lt;p&gt;One thing I learned from the first flight test was how weird it is to have your Pi go from like overheating on the ground, to getting really cold as it goes higher, but then overheating again in the upper atmosphere because there's not enough air to dissipate heat!&lt;/p&gt;
    &lt;p&gt;You start to realize some of the crazy physical conditions you'll deal with on orbit.&lt;/p&gt;
    &lt;p&gt;Back down to earth, though, for CubeSat Tempest: the whole reason this exists is to help people learn why security is important, even for a tiny CubeSat. More importantly, Tim Fowler's course teaches people how to secure things like uplinks (see: the ground station pictured above) and flight control systems.&lt;/p&gt;
    &lt;p&gt;There are so many people like Tim, who work in their free time to try to teach about space, or engineering, or just small slices of things like security, using these tactile little cubes you can build and put next to your laptop on a desk.&lt;/p&gt;
    &lt;p&gt;It's crazy to think we're to a point where students can build these things, write flight control software, and even launch 'em into space!&lt;/p&gt;
    &lt;p&gt;And that brings me to SilverSat.&lt;/p&gt;
    &lt;head rend="h2"&gt;SilverSat&lt;/head&gt;
    &lt;p&gt;There's another CubeSat with a Raspberry Pi onboard, and it's launching NET Sunday, at 6:11 p.m. Eastern time, aboard a Falcon 9 rocket. What does NET mean? Well, as I found out when I visited Florida this summer, that means "No Earlier Than", and in spaceflight, many things delay launches.&lt;/p&gt;
    &lt;p&gt;The students who built SilverSat are no strangers to delays—they were originally supposed to see their CubeSat launch earlier this year, but the cargo module they were on got damaged during transport, and that delayed them for months.&lt;/p&gt;
    &lt;p&gt;I got to talk to two of the adults guiding the students on their first space launch, and I discussed the history of the project (it started up in 2017), how they are supported by NASA's CubeSat Launch Initiative, the importance of amateur radio for CubeSats, and why they chose a Raspberry Pi Zero for their onboard computer.&lt;/p&gt;
    &lt;p&gt;That interview is tucked away in the last half of the video at the top of this post.&lt;/p&gt;
    &lt;head rend="h2"&gt;Tracking Satellites from your backyard&lt;/head&gt;
    &lt;p&gt;Also in that video, I spoke to Gabe from saveitforparts, and he mentioned it's not that difficult to listen in on satellites on orbit—including amateur CubeSats!&lt;/p&gt;
    &lt;p&gt;SilverSat will be broadcasting SSDV (Slow-Scan Digital Video) at set times, and the schedule for that should be posted on their website.&lt;/p&gt;
    &lt;p&gt;Check out the video embedded in this post (near the top), or Gabe's own channel for ideas for tracking satellites. It can be done with under $100 of equipment (usually just an SDR and a cheap antenna).&lt;/p&gt;
    &lt;head rend="h2"&gt;Infectious Enthusiasm for Learning (and Teaching)&lt;/head&gt;
    &lt;p&gt;I feel like a broken record, but one thing I love, talking to anyone in the CubeSat community is this sense of infectious enthusiasm. And I was going to cut this video out for time, but watching it back, I realized other people would probably enjoy Tim showing off some neat CubeSats in his personal collection as much as I did. So I put up some bonus content on my second channel, Level 2 Jeff; you can watch another 8 minutes of CubeSat hardware below:&lt;/p&gt;
    &lt;p&gt;Thank you to everyone who taught me about CubeSats for this video and blog post.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45249878</guid><pubDate>Mon, 15 Sep 2025 14:02:02 +0000</pubDate></item><item><title>PayPal to support Ethereum and Bitcoin</title><link>https://newsroom.paypal-corp.com/2025-09-15-PayPal-Ushers-in-a-New-Era-of-Peer-to-Peer-Payments,-Reimagining-How-Money-Moves-to-Anyone,-Anywhere</link><description>&lt;doc fingerprint="bc09acb02f2e3d8"&gt;
  &lt;main&gt;
    &lt;p&gt;PayPal Ushers in a New Era of Peer-to-Peer Payments, Reimagining How Money Moves to Anyone, Anywhere&lt;/p&gt;
    &lt;p&gt;Send and receive money as easily as sending a text, across apps, borders, and currencies &lt;/p&gt;
    &lt;div&gt;
      &lt;p&gt;SAN JOSE, Calif., Sept. 15, 2025 /PRNewswire/ -- On the heels of the PayPal World announcement, a global platform connecting the world's largest digital payment systems and wallets, PayPal today introduced PayPal links, a new way to send and receive money through a personalized, one-time link that can be shared in any conversation.&lt;/p&gt;
      &lt;p&gt;&lt;lb/&gt; Creating personalized payment links | Click to Enlarge&lt;/p&gt;
      &lt;p&gt;PayPal users in the U.S. can begin creating personalized payment links today, with international expansion to the UK, Italy, and other markets starting later this month. By making payments this simple and universal, PayPal links helps drive new customer acquisition and brings more users into the PayPal ecosystem.&lt;/p&gt;
      &lt;p&gt;The peer-to-peer (P2P) experience is about to go even further. Crypto will soon be directly integrated into PayPal's new P2P payment flow in the app. This will make it more convenient for PayPal users in the U.S. to send Bitcoin, Ethereum, PYUSD, and more, to PayPal, Venmo, as well a rapidly growing number of digital wallets across the world that support crypto and stablecoins.&lt;/p&gt;
      &lt;p&gt;Expanding what people can do with PayPal also comes with reassurance around how personal payments are handled. As always, friends-and-family transfers through Venmo and PayPal are exempt from 1099-K reporting. Users won't receive tax forms for gifts, reimbursements, or splitting expenses, helping ensure that personal payments stay personal.&lt;/p&gt;
      &lt;p&gt;"For 25 years, PayPal has revolutionized how money moves between people. Now, we're taking the next major step," said Diego Scotti, General Manager, Consumer Group at PayPal. "Whether you're texting, messaging, or emailing, now your money follows your conversations. Combined with PayPal World, it's an unbeatable value proposition, showing up where people connect, making it effortless to pay your friends and family, no matter where they are or what app they're using."&lt;/p&gt;
      &lt;p&gt;P2P is a cornerstone of PayPal's consumer experience, driving engagement and bringing more users into the ecosystem. P2P and other consumer total payment volume saw solid growth in the second quarter, increasing 10% year-over-year as the company focused on improving the experience and increasing user discoverability to make it easier than ever to move money globally. Plus, Venmo saw its highest TPV growth in three years. With PayPal World unlocking seamless interoperability, P2P is poised for even greater momentum in the future as PayPal and Venmo connect to billions of wallets worldwide.&lt;/p&gt;
      &lt;p&gt;How PayPal links work:&lt;/p&gt;
      &lt;list type="disc" rend="ul"&gt;
        &lt;item&gt;Create a personalized link – Open the PayPal app, enter the details of your payment or request, and generate a unique, one-time link to share.&lt;/item&gt;
        &lt;item&gt;Always the right person – Each link is private, one-time use, and created for a specific transaction.&lt;/item&gt;
        &lt;item&gt;Drop it anywhere – Send your link in a text, DM, email, or chat. Add a note, emoji, or payment note.&lt;/item&gt;
        &lt;item&gt;Manage payment activity: Unclaimed links expire after 10 days. Users can send a reminder or even cancel the payment or request before the link is claimed with the PayPal app.&lt;/item&gt;
        &lt;item&gt;Tap and done – The recipient taps the link and either completes or accepts the payment within the PayPal App with their PayPal account.&lt;/item&gt;
        &lt;item&gt;Funds are instant – the recipient will get immediate access to their funds with a PayPal Balance account once accepted.&lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;About PayPal&lt;lb/&gt; PayPal has been revolutionizing commerce globally for more than 25 years. Creating innovative experiences that make moving money, selling, and shopping simple, personalized, and secure, PayPal empowers consumers and businesses in approximately 200 markets to join and thrive in the global economy. For more information, visit https://www.paypal.com, https://about.pypl.com/ and https://investor.pypl.com/.&lt;/p&gt;
      &lt;p&gt;About PayPal USD (PYUSD) &lt;lb/&gt; PayPal USD is issued by Paxos Trust Company, LLC, a fully chartered limited purpose trust company. Paxos is licensed to engage in Virtual Currency Business Activity by the New York State Department of Financial Services. Reserves for PayPal USD are fully backed by U.S. dollar deposits, U.S. Treasuries and similar cash equivalents, and PayPal USD can be bought or sold through PayPal and Venmo at a rate of $1.00 per PayPal USD. &lt;lb/&gt; PayPal, Inc. (NMLS ID #: 910457) is licensed to engage in Virtual Currency Business Activity by the New York State Department of Financial Services. &lt;/p&gt;
      &lt;p&gt;Media contact&lt;lb/&gt; Gideon Anstey&lt;lb/&gt; gbanstey@paypal.com&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45249915</guid><pubDate>Mon, 15 Sep 2025 14:04:47 +0000</pubDate></item><item><title>Programming Deflation</title><link>https://tidyfirst.substack.com/p/programming-deflation</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45249985</guid><pubDate>Mon, 15 Sep 2025 14:11:43 +0000</pubDate></item><item><title>Show HN: Daffodil – Open-Source Ecommerce Framework to connect to any platform</title><link>https://github.com/graycoreio/daffodil</link><description>&lt;doc fingerprint="8b0e030d780cdf5a"&gt;
  &lt;main&gt;
    &lt;p&gt;&lt;lb/&gt; Daffodil is an ecommerce development framework for building high-quality storefronts that can connect to any ecommerce backend. &lt;/p&gt;
    &lt;p&gt;Wanna see what we're trying to do? Check out the demo.&lt;/p&gt;
    &lt;p&gt;From a new Angular app, simply run&lt;/p&gt;
    &lt;code&gt;npx ng add @daffodil/commerce&lt;/code&gt;
    &lt;p&gt;Get started with Daffodil, learn the fundamentals and explore advanced topics on our documentation website.&lt;/p&gt;
    &lt;p&gt;Read through our contributing guidelines to learn about our submission process, coding rules, and more.&lt;/p&gt;
    &lt;p&gt;Want to report a bug, contribute some code, or improve the documentation? Excellent! Read up on our guidelines for contributing and then check out one of our issues labeled as good first issue or good first challenge.&lt;/p&gt;
    &lt;p&gt;Please read and follow our Code of Conduct.&lt;/p&gt;
    &lt;p&gt;Join the conversation and help the community.&lt;/p&gt;
    &lt;p&gt;Below is a table of currently available Daffodil packages.&lt;/p&gt;
    &lt;p&gt;Note: About the &lt;code&gt;checkout&lt;/code&gt; package, it is currently a legacy package; there is no reason to use it. However, the &lt;code&gt;checkout&lt;/code&gt; package eventually may be filled with extracts from the &lt;code&gt;cart&lt;/code&gt; and &lt;code&gt;order&lt;/code&gt; packages.&lt;/p&gt;
    &lt;p&gt;Think Daffodil is the bees-knees? Give our repo a star ⭐ ❤️.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45250193</guid><pubDate>Mon, 15 Sep 2025 14:32:22 +0000</pubDate></item><item><title>How to self-host a web font from Google Fonts</title><link>https://blog.velocifyer.com/Posts/3,0,0,2025-8-13,+how+to+self+host+a+font+from+google+fonts.html</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45250202</guid><pubDate>Mon, 15 Sep 2025 14:33:41 +0000</pubDate></item><item><title>Apple has a private CSS property to add Liquid Glass effects to web content</title><link>https://alastair.is/apple-has-a-private-css-property-to-add-liquid-glass-effects-to-web-content/</link><description>&lt;doc fingerprint="2e4c691d3b0b61f5"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Apple has a private CSS property to add Liquid Glass effects to web content&lt;/head&gt;
    &lt;p&gt;I have an incredibly boring summer hobby: looking at the changelog for the WebKit Github repo. Why? Because I spend a chunk of my professional life working with webviews inside mobile apps and I like to get an early peek into what's coming in the next version of iOS. Since Tim Cook has yet to stand up at WWDC and announce "one more thing... Service Worker support in WKWebView, provided you add the correct entry to the &lt;code&gt;WKAppBoundDomains&lt;/code&gt; array in your &lt;code&gt;Info.plist&lt;/code&gt;" (and you know what, he should) manual research is the order of the day.&lt;/p&gt;
    &lt;p&gt;So I was really interested to see, the day after WWDC finished, a pull request named:&lt;/p&gt;
    &lt;quote&gt;[Materials] Rename "hosted blur" materials to reference "glass"&lt;/quote&gt;
    &lt;p&gt;Liquid Glass was one of the big takeaways from 2025's WWDC. Probably the biggest change in iOS UI since iOS 7 ditched the skeuomorphic look of the past. But that's all native UI, what does any of that have to do with webviews?&lt;/p&gt;
    &lt;p&gt;A poke around the context of the PR revealed something really interesting: Apple has a custom CSS property named &lt;code&gt;-apple-visual-effect&lt;/code&gt; . Not only does it allow the use of Liquid Glass in iOS 26 (via values like &lt;code&gt;-apple-system-glass-material&lt;/code&gt;) but all versions support using standard materials with values like &lt;code&gt;-apple-system-blur-material-thin&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h3"&gt;Yes it works and no, we can't&lt;/head&gt;
    &lt;p&gt;Before you, like me, fire up Safari and start editing some CSS, I have bad news: no, it doesn't work on the web. As well it shouldn't. But it also doesn't work by default in an app using WKWebView, you have to toggle a setting in WKPreferences called &lt;code&gt;useSystemAppearance&lt;/code&gt;... and it's private. So if you use it, say goodbye to App Store approval.&lt;/p&gt;
    &lt;p&gt;I wanted to try it out all the same so I hacked around to set &lt;code&gt;useSystemAppearance&lt;/code&gt; to true, set my CSS to:&lt;/p&gt;
    &lt;code&gt;.toolbar {
  border-radius: 50%;
  -apple-visual-effect: -apple-system-glass-material;
  height: 75px;
  width: 450px;
}&lt;/code&gt;
    &lt;p&gt;lo and behold, it works!&lt;/p&gt;
    &lt;p&gt;Whoever it was at Apple that decided to make this a CSS property is a genius because it makes it incredibly easy to provide different rules based on Liquid Glass support:&lt;/p&gt;
    &lt;code&gt;.toolbar {
  border-radius: 50%;
  height: 75px;
  width: 450px;
  background: rgba(204, 204, 204, 0.7);
}

@supports (-apple-visual-effect: -apple-system-glass-material) {
  background: transparent;
  -apple-visual-effect: -apple-system-glass-material
}&lt;/code&gt;
    &lt;head rend="h2"&gt;Who cares?&lt;/head&gt;
    &lt;p&gt;It's an interesting piece of trivia but no-one outside of Apple can use it. So what does it matter? It doesn't. Except for the implication for what I'll call &lt;del&gt;Alastair's Grand&lt;/del&gt; The Toupée Theory of In-App Webviews (thanks to graypegg on Hacker News for the rename). Industry wide they don't have a great reputation. But my suggestion is this: the main reason webviews in apps have such a bad reputation is because you don't notice the webviews that are integrated seamlessly.&lt;/p&gt;
    &lt;p&gt;It stands to reason that Apple wouldn't have developed this feature if they weren't using it. Where? We have no idea. But they must be using it somewhere. The fact that none of us have noticed exactly where suggests that we're interacting with webviews in our daily use of iOS without ever even realising it.&lt;/p&gt;
    &lt;p&gt;Food for thought!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45250370</guid><pubDate>Mon, 15 Sep 2025 14:49:00 +0000</pubDate></item><item><title>Creating a VGA Signal in Hubris</title><link>https://lasernoises.com/blog/hubris-vga/</link><description>&lt;doc fingerprint="2703d5e44d260bd8"&gt;
  &lt;main&gt;
    &lt;p&gt;A while ago I got a ST Nucleo-H753ZI evaluation board because I wanted to try out Hubris, Oxide's embedded operating system. After getting the basic demo app with the blinking lights running I set it aside for a lack of an idea what to do with it. A few weeks ago I was looking through old Raspberry Pi accessories on the hunt for a project. What stuck out to me wasn't any of the Raspberry Pi stuff, but the old 4 by 3 VGA monitor I had standing around. Could I just wire those pins in the VGA cable up to the GPIOs and produce a signal? As it turns out, yes you can just do that.&lt;/p&gt;
    &lt;head rend="h1"&gt;Getting Rid of the Sys Task&lt;/head&gt;
    &lt;p&gt;In the beginning I thought I was gonna be changing the GPIO pins from normal code, so switching them on and off at very high speeds. In hubris there's a &lt;code&gt;stm32xx-sys&lt;/code&gt; task that normally controls the GPIO pins and also handles
enabling clock to the different components through the Reset and Clock Control (RCC) block.&lt;/p&gt;
    &lt;p&gt;So normally if you want to set a GPIO pin you'd send a message to the &lt;code&gt;sys&lt;/code&gt; task and it would do
that for you.
I was worried that the overhead of the context switching was gonna be a problem there.&lt;/p&gt;
    &lt;p&gt;So I decided to get rid of the sys task and do it all in my task.&lt;/p&gt;
    &lt;head rend="h1"&gt;The Plan&lt;/head&gt;
    &lt;p&gt;My first plan was to get the screen to just display a single color. I thought that it would be enough to get the vsync and hsync signals right and then just have the green pin high all the time to get a green picture.&lt;/p&gt;
    &lt;head rend="h1"&gt;Mapping the Registers&lt;/head&gt;
    &lt;p&gt;The peripherals of our chip are all controlled with registers. Those are memory mapped and to certain addresses. There is a gigantic 3000 page reference manual that describes all those registers. It's all very overwhelming. Luckily there's a Peripheral Access Crate (PAC) that defines an API for reading and writing those registers.&lt;/p&gt;
    &lt;p&gt;Since we're running under memory protection we need to first make sure we can actually write to those registers. In Hubris that sort of thing happens in an &lt;code&gt;app.toml&lt;/code&gt; where all the tasks for an app are defined.&lt;/p&gt;
    &lt;code&gt;[tasks.vga]
name = "drv-vga"
priority = 1
uses = ["rcc", "gpios", "tim3"]
start = true
&lt;/code&gt;
    &lt;p&gt;In this case the &lt;code&gt;tim3&lt;/code&gt; memory region wasn't a thing the Hubris build system knew about yet.
The regions you can &lt;code&gt;use&lt;/code&gt; there are defined in a &lt;code&gt;chip.toml&lt;/code&gt; for the specific chip you have.
In our case that's &lt;code&gt;chips/stm32h7/chip.toml&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;[tim3]
address = 0x40000400
size = 0x400
&lt;/code&gt;
    &lt;p&gt;You get those values from a fun table called "Register boundary addresses" from the manual.&lt;/p&gt;
    &lt;head rend="h1"&gt;Blinking an LED with a Timer / PWM&lt;/head&gt;
    &lt;p&gt;The timers on this chip have a Pulse-Width-Modulation (PWM) feature which we should be able to use to generate the VGA sync signals. But the first step was to get a light blinking using PWM. The basic Hubris demo app does have a blinking LED, but that's not using PWM. Instead it uses the timer feature of the kernel, which makes a lot of sense for a Hubris demo, but we want to involve the CPU as minimally as possible for generating the signal.&lt;/p&gt;
    &lt;p&gt;My initial plan was to measure the PWM with my multimeter to see it working. I chose PB0 for this from the pinout table in the user manual of the board (which is different from the reference manual of the chip). PB0 is hooked up to timer 3, channel 3 (TIM3_CH3). Looking at the "Solder bridges and jumpers" section I found out that that's also connected to an LED on the board by default, so I chose to just test it that way.&lt;/p&gt;
    &lt;p&gt;By default here means that there's a bunch of predefined places on the bottom of the board where you can make connections by adding a bit of solder or remove connections by cutting traces or removing zero ohm resistors.&lt;/p&gt;
    &lt;p&gt;So after a whole bunch of fiddling I got all the registers set up right to get the LED blinking.&lt;/p&gt;
    &lt;head rend="h1"&gt;Setting up the H-Sync and V-Sync Timers&lt;/head&gt;
    &lt;p&gt;The first thing I sort of used for some guidance was this site where someone had done a similar project: https://www.programmerall.com/article/26476558/ That was pretty useful for the wiring itself and a basic understanding of how the signal works.&lt;/p&gt;
    &lt;p&gt;The basic idea is that there's three pins for red, green and blue and two pins for horizontal and vertical sync. The horizontal sync signal needs to be on for a bit between each line of pixels and the vertical one between frames. You can connect any of the color that you don't need to display to ground.&lt;/p&gt;
    &lt;p&gt;To connect the end of the cable to the GPIO headers on the board I ended up using some jumper wires and a breadboard. (The breadboard is just for all the things connected to ground.)&lt;/p&gt;
    &lt;p&gt;I could take off black plastic cover on the end of the jumper wires and clip off the pointy end. That left a sort of hollow bit that I could wrap some electrical tape around and stick onto the pins of the VGA cable. The connection is a bit loose, but it makes contact.&lt;/p&gt;
    &lt;p&gt;Before that I had tried soldering and that was a horrible idea because I don't have enough hands to hold the soldering iron, the solder and the jumper.&lt;/p&gt;
    &lt;p&gt;Then there's this site which has timing information for all the different resolutions: http://www.tinyvga.com/vga-timing&lt;/p&gt;
    &lt;p&gt;At first I chose 640×480 because I wanted a minimal pixel count. I got that sort of working to the point where the monitor would recognize a signal, but it would need a bit of time to auto-adjust.&lt;/p&gt;
    &lt;p&gt;I then decided I'd switch to 800×600 like they did in the link above, because those numbers add up much nicer: http://www.tinyvga.com/vga-timing/800x600@60Hz&lt;/p&gt;
    &lt;p&gt;Each timer has a prescaler that can be used to divide the base clock, which is 200 Mhz in our case. The timer will then count up until it reaches the value in the auto-reload register (ARR). Then there's also the capture/compare register (CCR), which determines for which part of the cycle the output is on when doing pulse-width modulation.&lt;/p&gt;
    &lt;p&gt;For hsync I set the prescaler to zero, meaning the frequency is divided by one, because that register is offset by one. Then I set the ARR to 5279 (also offset by one) and the CCR to 640 (not offset by one). That means the timer counts up 200 times per microsecond. 5280 / 200 gives us the 26.4 µs that we need for one line and 640 / 200 gives us the 3.2 µs for the sync pulse.&lt;/p&gt;
    &lt;p&gt;For vsync I set the prescaler to 21119. 21120 / 200 gives us 105.6 µs, which is the width our sync pulse should be. So then we can set the CCR to 1. The ARR is set to 156 to give us 105.6 µs * 157 = 16.5792 ms, which is exactly the time a whole frame should take.&lt;/p&gt;
    &lt;head rend="h1"&gt;All Green all the Time Not Working&lt;/head&gt;
    &lt;p&gt;My hope was that I could get to a fully green picture pretty easily by just hooking up the green pin to a GPIO pin that was on. That ended up not working, I suspect because the monitor uses the voltage that's on the color pins during the h-sync as a baseline or something like that.&lt;/p&gt;
    &lt;head rend="h1"&gt;DMA to the DAC&lt;/head&gt;
    &lt;p&gt;The next plan was to continuously repeat a single line. I decided to try to use the Digital-to-analog converter (DAC) for this.&lt;/p&gt;
    &lt;p&gt;The basic way the DAC works is that you first need to set a GPIO pin that's hooked up to the DAC into an analog mode. This isn't one of the altenate functions like you'd use for the timer, but a whole separate mode. Then there's a data holding register you can write an 8 or 12 bit value into. That will determine the output voltage you get on the pin.&lt;/p&gt;
    &lt;p&gt;Now, we don't want to keep the CPU fully occupied with constantly setting that register, so we need a better solution. Luckily the h7 has dedicated units for copying memory around. There's actually at least four different kinds of these, but we'll start with a "normal" direct memory access controller (DMA). There's two of those, but well use DMA1.&lt;/p&gt;
    &lt;p&gt;When I wanted to map the DAC control registers into my task I got a build error. As it turns out, the memory protection unit only supports eight memory regions at a time, meaning per-task in Hubris. I resolved that by grouping some timers together. They also need to have a power-of-two size and be aligned to their size, which would lead to problems later when I tried to group more things together, but it worked out for the timers.&lt;/p&gt;
    &lt;p&gt;What I ended up doing here is to hooking up the timer to the DAC and configuring the DMA request multiplexer (DMAMUX) to be triggered by the DAC. Then I set up the DAC in circular mode with a pointer to a buffer.&lt;/p&gt;
    &lt;p&gt;Eventually I got it looking like that (with a lot of flickering of course):&lt;/p&gt;
    &lt;p&gt;Now that wasn't looking very much like the data that I wanted to DMA into DAC. It was also changing quite a bit based on what exactly the code around it did (like adding something do a debugging ringbuffer). It appears that the DMA unit doesn't go through the CPU caches, so likely this was some random data.&lt;/p&gt;
    &lt;p&gt;After some digging I found out that there's different kinds of memory on this chip that are configured differently in Hubris. You can see that configuration in chips/stm32h7/memory-large.toml. Among others there's a &lt;code&gt;dma&lt;/code&gt; flag that can be set for a region.
I'm not sure what that does exacly (it looks like one thing is that the kernel will refuse to copy
from or to there), but putting my buffer there using the link_section
attribute seems to make our DMA work.&lt;/p&gt;
    &lt;p&gt;After I got that to work all that was left was a lot of confusion because I had gotten the math for the pixel timing wrong. But after I had figured that out I was able to produce a nice gradient.&lt;/p&gt;
    &lt;p&gt;(If you're confused about the color: I had switched to blue instead of green at some point.)&lt;/p&gt;
    &lt;p&gt;Switching between on and off pixels leads to a pattern like this:&lt;/p&gt;
    &lt;p&gt;The DAC seems unable to produce sharp edges and also the average output seems to get higher after switching on and off a couple of times.&lt;/p&gt;
    &lt;p&gt;Here they used the SPI hardware support to produce an image, so maybe I should try that next as well.&lt;/p&gt;
    &lt;head rend="h1"&gt;Return of the Sys Task&lt;/head&gt;
    &lt;p&gt;The next thing I wanted to do of course was to produce an actual 2 dimensional image. So far the CPU hadn't been involved after setting up the registers. The DMA would keep going even if the CPU was halted.&lt;/p&gt;
    &lt;p&gt;This starts to become a problem for a 2D image though. If we were to keep our circular mode buffer and wanted to store a whole image in it we'd need a bunch of bytes for that. While we can horizontally repeat the same pixel 8 times (by decreasing the timer frequency), we can't do that vertically. So we'd need 132 (1056 / 8) × 628 = 82896 bytes for that buffer.&lt;/p&gt;
    &lt;p&gt;That would fit into one of the sram regions, but it's a bit of an inconvenient format for a framebuffer with vertical pixels being 8 times smaller than horizontal ones.&lt;/p&gt;
    &lt;p&gt;Luckily there's the master direct memory access controller (MDMA), which can be triggered by the completion of other DMA controllers and supports much more complex configuration.&lt;/p&gt;
    &lt;p&gt;But at this point I was definitely out of regions that could be mapped to my task. Since it was very clear at this point that we weren't goint to do high speed GPIO toggling on the CPU we could actually re-introduce the &lt;code&gt;sys&lt;/code&gt; task.
This means that we could get rid of two regions from our task (RCC and GPIO) and we'd have space for the MDMA control registers.
It's kind of funny how this hardware limitation can encourage splitting things into different tasks.&lt;/p&gt;
    &lt;p&gt;I was able to get the MDMA copying into the DMA buffer, but I haven't quite been able to get a framebuffer working yet. So this is the end of this post. I hope I'll find some more time for this project soon and I'll try to make another post if I get something more interesting going. I already have some ideas about what to do with a working framebuffer.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45250540</guid><pubDate>Mon, 15 Sep 2025 15:04:24 +0000</pubDate></item><item><title>Launch HN: Trigger.dev (YC W23) – Open-source platform to build reliable AI apps</title><link>https://news.ycombinator.com/item?id=45250720</link><description>&lt;doc fingerprint="bf77954a6d078e42"&gt;
  &lt;main&gt;
    &lt;div&gt;&lt;p&gt;Hi HN, I’m Eric, CTO at Trigger.dev (&lt;/p&gt;https://trigger.dev&lt;p&gt;). We’re a developer platform for building and running AI agents and workflows, open-source under the Apache 2.0 license (&lt;/p&gt;https://github.com/triggerdotdev/trigger.dev&lt;p&gt;).&lt;/p&gt;&lt;p&gt;We provide everything needed to create production-grade agents in your codebase and deploy, run, monitor, and debug them. You can use just our primitives or combine with tools like Mastra, LangChain and Vercel AI SDK. You can self-host or use our cloud, where we take care of scaling for you. Here’s a quick demo: (https://youtu.be/kFCzKE89LD8).&lt;/p&gt;&lt;p&gt;We started in 2023 as a way to reliably run async background jobs/workflows in TypeScript (https://news.ycombinator.com/item?id=34610686). Initially we didn’t deploy your code, we just orchestrated it. But we found that most developers struggled to write reliable code with implicit determinism, found breaking their work into small “steps” tricky, and they wanted to install any system packages they needed. Serverless timeouts made this even more painful.&lt;/p&gt;&lt;p&gt;We also wanted to allow you to wait for things to happen: on external events, other tasks finishing, or just time passing. Those waits can take minutes, hours, or forever in the case of events, so you can’t just keep a server running.&lt;/p&gt;&lt;p&gt;The solution was to build and operate our own serverless cloud infrastructure. The key breakthrough that enabled this was realizing we could snapshot the CPU and memory state. This allowed us to pause running code, store the snapshot, then restore it later on a different physical server. We currently use Checkpoint Restore In Userspace (CRIU) which Google has been using at scale inside Borg since 2018.&lt;/p&gt;&lt;p&gt;Since then, our adoption has really taken off especially because of AI agents/workflows. This has opened up a ton of new use cases like compute-heavy tasks such as generating videos using AI (Icon.com), real-time computer use (Scrapybara), AI enrichment pipelines (Pallet, Centralize), and vibe coding tools (Hero UI, Magic Patterns, Capy.ai).&lt;/p&gt;&lt;p&gt;You can get started with Trigger.dev cloud (https://cloud.trigger.dev), self-hosting (https://trigger.dev/docs/self-hosting/overview), or read the docs (https://trigger.dev/docs).&lt;/p&gt;&lt;p&gt;Here’s a sneak peek at some upcoming changes: 1) warm starts for self-hosting 2) switching to MicroVMs for execution – this will be open source, self-hostable, and will include checkpoint/restoring.&lt;/p&gt;&lt;p&gt;We’re excited to be sharing this with HN and are open to all feedback!&lt;/p&gt;&lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45250720</guid><pubDate>Mon, 15 Sep 2025 15:20:18 +0000</pubDate></item><item><title>Boring work needs tension</title><link>https://iaziz786.com/blog/boring-work-needs-tension/</link><description>&lt;doc fingerprint="89b89d7ba9f84476"&gt;
  &lt;main&gt;
    &lt;p&gt;We are all moved by great movies, cinematography, and stories. Watching them is fun because you can imagine yourself resonating with a character. You are thrilled by the tension the story creates and curious how it will be resolved.&lt;/p&gt;
    &lt;p&gt;Many find software development a dull job where you have to write exactly what your PM or client asks for. It’s exciting at first, but it can become boring after a few iterations.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Whatever doesn’t excite you, change it.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;When we, as developers, push ourselves to be protagonists, we discover many problems to solve — a lot of tension to resolve. Here are a few good problems for everyday devs:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Your CI/CD takes a huge amount of time because you forgot to leverage caching.&lt;/item&gt;
      &lt;item&gt;You forgot to add connection pooling and your service bombarded the database, causing too many open connections.&lt;/item&gt;
      &lt;item&gt;You misconfigured the garbage collector and now you have a memory leak that keeps growing.&lt;/item&gt;
      &lt;item&gt;If it takes you more than 3 seconds to understand what you wrote last week, it’s poorly written.&lt;/item&gt;
      &lt;item&gt;Latency is high for your users in Mumbai because your servers are in Singapore.&lt;/item&gt;
      &lt;item&gt;The database becomes very slow when you start dumping data in batches.&lt;/item&gt;
      &lt;item&gt;You want consistent API responses for read operations for users in both Mumbai and Singapore.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;These are not trivial problems; they happen every day. These are our villains — irritating, unwanted, and surprising. We should eliminate them.&lt;/p&gt;
    &lt;p&gt;Pick your fight. This is one way to make your day exciting. If you can’t tackle these at work, do it in your personal projects.&lt;/p&gt;
    &lt;p&gt;If you chase the right tension, a story will follow.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45251093</guid><pubDate>Mon, 15 Sep 2025 15:44:29 +0000</pubDate></item><item><title>A string formatting library in 65 lines of C++</title><link>https://riki.house/fmt</link><description>&lt;doc fingerprint="22522655ec0d5698"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;A string formatting library in 65 lines of C++&lt;/head&gt;
    &lt;p&gt;In this write-up, I will walk you through an implementation of a string formatting library for C++ I came up with for my video game. The end result came out really compact, at only 65 lines of codeâproviding a skeleton that can be supplemented with additional functionality at low cost.&lt;/p&gt;
    &lt;head rend="h2"&gt;Usage&lt;/head&gt;
    &lt;p&gt;Given a format bufferâ¦&lt;/p&gt;
    &lt;code&gt;char buffer[64];
String_Buffer buf = {str, sizeof str};
&lt;/code&gt;
    &lt;p&gt;â¦the &lt;code&gt;fmt::format&lt;/code&gt; function provided by this library can be called with a format string parameter, containing the character sequence &lt;code&gt;{}&lt;/code&gt; (a hole) where parameters are to be substituted, as well as the parameters themselves.&lt;/p&gt;
    &lt;code&gt;fmt::format(buf, "Hello, {}!", "world");
assert(strcmp(str, "Hello, world!") == 0);
&lt;/code&gt;
    &lt;p&gt;When a literal &lt;code&gt;{{&lt;/code&gt; is needed, the &lt;code&gt;{&lt;/code&gt; must be doubledâeven when format arguments are not present.&lt;/p&gt;
    &lt;code&gt;fmt::format(buf, "Hello, {{}!");
assert(strcmp(str, "Hello, {}!") == 0);
&lt;/code&gt;
    &lt;p&gt;Further, when a format argument is not present, no undefined behaviour occursâthe hole is rendered as the empty string.&lt;/p&gt;
    &lt;code&gt;fmt::format(buf, "empty {} hole");
assert(strcmp(str, "empty  hole") == 0);
&lt;/code&gt;
    &lt;p&gt;Multiple format arguments can be specified as well.&lt;/p&gt;
    &lt;code&gt;fmt::format(buf, "[{}] [{}] {}", "main", "info", "Hewwo :3");
assert(strcmp(str, "[main] [info] Hewwo :3") == 0);
&lt;/code&gt;
    &lt;p&gt;In case the buffer is not sufficiently large to contain the full string, the function writes as many characters as it can, and sets the &lt;code&gt;String_Buffer&lt;/code&gt;âs &lt;code&gt;len&lt;/code&gt; variable to the amount of characters required.
That way, it is possible for the caller to tell if the buffer has been exhausted, and reallocate it to an appropriate size.&lt;/p&gt;
    &lt;code&gt;fmt::format(
	buf,
	"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	"aaaaaaaaaaaaaaaaaa{} {}",
	"Vector", "Amber"
);
assert(strcmp(
	str,
	"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	"aaaaaaaaaaaaaaaaaaV"
) == 0);
assert(buf.len == 74);
&lt;/code&gt;
    &lt;p&gt;Additional functions can be written on top of this base functionality to improve ergonomics in real-world code. These are included in Ergonomic functions.&lt;/p&gt;
    &lt;head rend="h2"&gt;Problem statement&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;A string formatting library consists of a single function&lt;/p&gt;&lt;code&gt;format&lt;/code&gt;. You give the function a format string, which describes the output shape, as well as a set of format parameters, which the function then substitutes into the format string, rendering them in a human-readable way.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;The&lt;/p&gt;&lt;code&gt;format&lt;/code&gt;function ought to write to a pre-allocated buffer of characters.&lt;p&gt;This is a choice made in favour of simplicity: writing to a pre-allocated buffer can fail, but compared to arbitrary I/O, there is only one failure mode: the buffer is exhausted.&lt;/p&gt;&lt;p&gt;Naturally, this cannot work in memory-constrained environments, such as embedded devicesâwhere you would want to write to a small buffer and flush it in a loop to reduce memory usageâbut this does not apply in the context of a desktop video game.&lt;/p&gt;&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;As already mentioned in the usage overview, if the buffer is full, the function should return the number of characters that would have been written, had the buffer capacity not been exceededâsuch that the caller can choose to reallocate the backing buffer to an appropriate size, and try formatting again.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;There has to be a format string.&lt;/p&gt;&lt;p&gt;An example of a format string-less API is C++âs&lt;/p&gt;&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;. Instead of having a format string like&lt;code&gt;printf&lt;/code&gt;,&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;opts to use overloads of&lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt;to write to the output. This has the disadvantage of not being greppable (which is useful for debugging error logs), as well as not being localisable (because there is no format string that could be replaced at runtime).&lt;p&gt;Additionally, I donât want the format string to have extra specifiers such as Câs&lt;/p&gt;&lt;code&gt;%d&lt;/code&gt;,&lt;code&gt;%x&lt;/code&gt;, etc. specifying the type of output, or Pythonâs&lt;code&gt;{:.3}&lt;/code&gt;, for specifying the style of output. The C approach is error-prone and inextensible, and the Python approach, while convenient, increases parser complexity and reduces greppability. Instead, the representation is defined only according to the formatted valueâs type.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;It has to have a small footprint.&lt;/p&gt;&lt;p&gt;There exist plenty of string formatting libraries for C++, such as {fmt}, or even the recently introduced&lt;/p&gt;&lt;code&gt;std::print&lt;/code&gt;, but they suffer from gigantic compile-time complexity through their heavy use of template metaprogramming.&lt;p&gt;While my compilation time benchmark results for {fmt} werenât as dire as those presented in their README, they still donât paint a pretty pictureâwith a simple program using&lt;/p&gt;&lt;code&gt;printf&lt;/code&gt;taking ~35 ms to compile, and the equivalent program using {fmt} taking ~200 ms.&lt;p&gt;I also find the benefits of an open rather than closed API, as well as compile-time checked format strings, dubious. Instead, I want something lean and small, using basic features of the language, and easy enough to drop into your own project, then extend and modify according to your needsâin spirit of rxiâs simple serialisation system.&lt;/p&gt;&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Simply using&lt;/p&gt;&lt;code&gt;printf&lt;/code&gt;is not good enough.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Implementation walkthrough&lt;/head&gt;
    &lt;p&gt;We will start by defining the &lt;code&gt;String_Buffer&lt;/code&gt; type, which also serves as the formatterâs state.
It represents a user-provided string buffer with a capacity and a length.&lt;/p&gt;
    &lt;code&gt;struct String_Buffer
{
	char* str;
	int cap;
	int len = 0;
};
&lt;/code&gt;
    &lt;p&gt;A &lt;code&gt;String_Buffer&lt;/code&gt; is intended to be initialised via aggregate initialisation (&lt;code&gt;{str, cap}&lt;/code&gt;.)
This mimics the &lt;code&gt;snprintf&lt;/code&gt; API, which accepts its buffer and size arguments in the same order.&lt;/p&gt;
    &lt;p&gt;At the core of the libraryâs output is &lt;code&gt;write&lt;/code&gt;.
It performs a bounds-checked write of a string with known length to the output string buffer.&lt;/p&gt;
    &lt;code&gt;void write(String_Buffer&amp;amp; buf, const char* str, int len)
{
	int remaining_cap = buf.cap - buf.len - 1; // leave one byte for NUL
	int write_len = len &amp;gt; remaining_cap ? remaining_cap : len;
	if (write_len &amp;gt; 0)
		memcpy(buf.str + buf.len, str, write_len);
	buf.len += len;
}
&lt;/code&gt;
    &lt;p&gt;My implementation truncates the output if the buffer size is exhausted, but keeps incrementing the bufferâs &lt;code&gt;len&lt;/code&gt; past &lt;code&gt;cap&lt;/code&gt;, such that the caller can know the full number of characters written after all &lt;code&gt;write&lt;/code&gt;s, and adjust accordingly.
This is a deliberate choice coming from the fact that &lt;code&gt;String_Buffer&lt;/code&gt; does not own the bufferâs allocation, and the fact that string formatting is a performance-sensitive piece of code, which will be called often in the game loop.&lt;/p&gt;
    &lt;p&gt;However, it is trivial to replace the length saturation logic with a call to &lt;code&gt;realloc&lt;/code&gt;, should that be the more appropriate choice.&lt;/p&gt;
    &lt;p&gt;Having this base &lt;code&gt;write&lt;/code&gt; function, we can implement a set of overloaded functions that will write out values of various types to the string buffer.
These functions will be used by our &lt;code&gt;format&lt;/code&gt; function, to write out format arguments.&lt;/p&gt;
    &lt;p&gt;The set of functions implemented here directly corresponds to the types of arguments youâll be able to pass into &lt;code&gt;format&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;void write_value(String_Buffer&amp;amp; buf, const char* value)
{
    write(buf, value, strlen(value));
}

void write_value(String_Buffer&amp;amp; buf, bool value) { /* ... */ }
void write_value(String_Buffer&amp;amp; buf, char value) { /* ... */ }
void write_value(String_Buffer&amp;amp; buf, int value) { /* ... */ }
&lt;/code&gt;
    &lt;p&gt;See &lt;code&gt;write_value&lt;/code&gt; for various types for a set of example implementations for other types.&lt;/p&gt;
    &lt;p&gt;Now onto parsing format strings.&lt;/p&gt;
    &lt;p&gt;Format strings can be defined as a sequence of literals interspersed with arguments. That is, a format string always takes the form:&lt;/p&gt;
    &lt;code&gt;fstr = { literal, hole }, literal;
&lt;/code&gt;
    &lt;p&gt;The leading and trailing &lt;code&gt;literal&lt;/code&gt; can be the empty string.&lt;/p&gt;
    &lt;p&gt;The task of processing the literal parts is done by a function called &lt;code&gt;next_hole&lt;/code&gt;.
It parses the format string, looking for a character sequence representing a hole &lt;code&gt;{}&lt;/code&gt;, and writes the string preceding the hole &lt;code&gt;{}&lt;/code&gt; to the output buffer.&lt;/p&gt;
    &lt;code&gt;bool next_hole(String_Buffer&amp;amp; buf, const char*&amp;amp; fstr)
{
	const char* prefix = fstr;
	while (*fstr != 0) {
		if (*fstr == '{') {
			int len = fstr - prefix;
			++fstr;
			if (*fstr == '}') {
				++fstr;
				write(buf, prefix, len);
				return true;
			}
			if (*fstr == '{') {
				write(buf, prefix, len);
				prefix = fstr;
				++fstr;
			}
		}
		++fstr;
	}
	write(buf, prefix, fstr - prefix);
	return false;
}
&lt;/code&gt;
    &lt;p&gt;&lt;code&gt;fstr&lt;/code&gt; is received as a reference to a pointer, representing the format stringâs parsing state.&lt;/p&gt;
    &lt;p&gt;A call to &lt;code&gt;next_hole&lt;/code&gt; will write out the literal part, visualised with &lt;code&gt;---&lt;/code&gt;, and leave the &lt;code&gt;fstr&lt;/code&gt; pointer past the hole &lt;code&gt;{}&lt;/code&gt;, visualised with &lt;code&gt;^&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;Hello, {}!
-------  ^
&lt;/code&gt;
    &lt;p&gt;In this case, it will return &lt;code&gt;true&lt;/code&gt; to signal that it stopped at a hole.&lt;lb/&gt; In case there is no hole however, and the end of the string is reached, it will return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;Hello, {}!
         -^ end of string
&lt;/code&gt;
    &lt;p&gt;Additionally, we handle the &lt;code&gt;{{&lt;/code&gt; escaping case.
when &lt;code&gt;{&lt;/code&gt; is encountered directly after another &lt;code&gt;{&lt;/code&gt;, we have to flush the current literal, and start a new one directly after the first &lt;code&gt;{&lt;/code&gt;. Underlined with &lt;code&gt;---&lt;/code&gt; are the spans of characters that get written to the output.&lt;/p&gt;
    &lt;code&gt;empty {{} hole
------- ------
&lt;/code&gt;
    &lt;p&gt;Finally, we define &lt;code&gt;format&lt;/code&gt;: the function that accepts a format string, a set of arguments, and inserts them into the output string.
It makes use of an additional function &lt;code&gt;format_value&lt;/code&gt;, which tries to find the next hole, and if found, writes out a format argument in its place.&lt;/p&gt;
    &lt;code&gt;template&amp;lt;typename T&amp;gt;
void format_value(String_Buffer&amp;amp; buf, const char* fstr, const T&amp;amp; value)
{
	if (next_hole(buf, fstr))
		write_value(buf, value);
}

template&amp;lt;typename... Args&amp;gt;
void format(String_Buffer&amp;amp; buf, const char* fstr, const Args&amp;amp;... args)
{
	(format_value(buf, fstr, args), ...);
	while (next_hole(buf, fstr)) {}
}
&lt;/code&gt;
    &lt;p&gt;For those unfamiliar with C++ template metaprogramming, &lt;code&gt;(format_value(buf, fstr, args), ...)&lt;/code&gt; is a fold expression.
Given any number of &lt;code&gt;args&lt;/code&gt;, it will expand into a sequence of calls to &lt;code&gt;format_value&lt;/code&gt;, one for each element in &lt;code&gt;args&lt;/code&gt;, separated by the &lt;code&gt;,&lt;/code&gt; operator. For example, if two arguments: a &lt;code&gt;const char*&lt;/code&gt; and an &lt;code&gt;int&lt;/code&gt;, are passed into &lt;code&gt;format&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;template&amp;lt;&amp;gt;
void format&amp;lt;const char*, int&amp;gt;(
	String_Buffer&amp;amp; buf,
	const char* fstr,
	const char* a1, int a2)
{
	(format_value(buf, fstr, a1), format_value(buf, fstr, a2));
	while (next_hole(buf, fstr)) {}
}
&lt;/code&gt;
    &lt;p&gt;Note that the overloads of &lt;code&gt;write_value&lt;/code&gt; must be declared before &lt;code&gt;format_value&lt;/code&gt;.
This is because the &lt;code&gt;write_value&lt;/code&gt; name is not dependent on any template arguments, and is therefore early-bound at &lt;code&gt;format_value&lt;/code&gt;âs definition site.&lt;/p&gt;
    &lt;p&gt;This choice was made for the sake of simplicity, but if it turns out to be a problem, it is possible to use specialisation. It is important to note though that specialisation bypasses overload resolution, so this will not work:&lt;/p&gt;
    &lt;code&gt;template&amp;lt;typename T&amp;gt;
void write_value(String_Buffer&amp;amp; buf, T value) = delete;

template&amp;lt;&amp;gt;
void write_value&amp;lt;const char*&amp;gt;(
	String_Buffer&amp;amp; buf, const char* value)
{
	if (next_hole(buf, fstr))
		write(buf, value, strlen(value));
}

template&amp;lt;typename T&amp;gt;
void format_value(String_Buffer&amp;amp; buf, const char*&amp;amp; fstr, const T&amp;amp; value)
{
	if (next_hole(buf, fstr))
		write_value&amp;lt;T&amp;gt;(buf, value);
}

template&amp;lt;typename... Args&amp;gt;
void format(String_Buffer&amp;amp; buf, const char* fstr, const Args&amp;amp;... args)
{
	(format_value(buf, fstr, args), ...);
	while (next_hole(buf, fstr)) {}
}

format(buf, "Hello, {}!", "world");
&lt;/code&gt;
    &lt;p&gt;because the type of &lt;code&gt;"world"&lt;/code&gt; is &lt;code&gt;char [5]&lt;/code&gt;, and not &lt;code&gt;const char*&lt;/code&gt;, and &lt;code&gt;write_value&amp;lt;char [5]&amp;gt;&lt;/code&gt; is deleted.
This should be solvable with some additional work, but Iâve deemed it unnecessary in my case.&lt;/p&gt;
    &lt;p&gt;In a single .cpp file, together with wrapping all the functionality in a namespace, this implementation, together with the implementation of &lt;code&gt;write_value&lt;/code&gt; for strings, equates to a mere 65 lines of code.&lt;/p&gt;
    &lt;p&gt;In a real project, you will probably want to move some of the private implementation details to a separate .cpp file. Hereâs the full source code listing, split into a header file, and an implementation file.&lt;/p&gt;
    &lt;code&gt;#pragma once

struct String_Buffer
{
	char* str;
	int cap;
	int len = 0;
};

namespace fmt {

void write_value(String_Buffer&amp;amp; buf, const char* value);
// (additional overloads here)

// implementation detail
bool next_hole(String_Buffer&amp;amp; buf, const char*&amp;amp; fstr);

template&amp;lt;typename T&amp;gt;
void format_value(String_Buffer&amp;amp; buf, const char*&amp;amp; fstr, const T&amp;amp; value)
{
	if (next_hole(buf, fstr))
		write_value(buf, value);
}

template&amp;lt;typename... Args&amp;gt;
void format(String_Buffer&amp;amp; buf, const char* fstr, const Args&amp;amp;... args)
{
	(format_value(buf, fstr, args), ...);
	while (next_hole(buf, fstr)) {}
}

}
&lt;/code&gt;
    &lt;code&gt;#include "format.hpp"

#include &amp;lt;cstring&amp;gt;

namespace fmt
{

static void write(String_Buffer&amp;amp; buf, const char* str, int len)
{
	int remaining_cap = buf.cap - buf.len - 1; // leave one byte for NUL
	int write_len = len &amp;gt; remaining_cap ? remaining_cap : len;
	if (write_len &amp;gt; 0)
		memcpy(buf.str + buf.len, str, write_len);
	buf.len += len;
}

void write_value(String_Buffer&amp;amp; buf, const char*&amp;amp; fstr, const char* value)
{
	write(buf, value, strlen(value));
}

bool next_hole(String_Buffer&amp;amp; buf, const char*&amp;amp; fstr)
{
	const char* prefix = fstr;
	while (*fstr != 0) {
		if (*fstr == '{') {
			int len = fstr - prefix;
			++fstr;
			if (*fstr == '}') {
				++fstr;
				write(buf, prefix, len);
				return true;
			}
			if (*fstr == '{') {
				write(buf, prefix, len);
				prefix = fstr;
				++fstr;
			}
		}
		++fstr;
	}
	write(buf, prefix, fstr - prefix);
	return false;
}

}
&lt;/code&gt;
    &lt;head rend="h2"&gt;Design remarks&lt;/head&gt;
    &lt;head rend="h3"&gt;Escaping ambiguity&lt;/head&gt;
    &lt;p&gt;The choice of &lt;code&gt;{}&lt;/code&gt; as the hole syntax is not accidental.
I evaluated whether holes could be represented with a single character &lt;code&gt;%&lt;/code&gt;, like:&lt;/p&gt;
    &lt;code&gt;fmt::format(buf, "Hello, %!", "world");
&lt;/code&gt;
    &lt;p&gt;But it turned that using only a single character introduces an ambiguity around escaping. What should this format to: &lt;code&gt;hello%&lt;/code&gt;, or &lt;code&gt;%hello&lt;/code&gt;?&lt;/p&gt;
    &lt;code&gt;fmt::format(buf, "%%%", "hello");
&lt;/code&gt;
    &lt;p&gt;It would be possible to use a different, unambiguous combination for escaping, such as &lt;code&gt;%_&lt;/code&gt;, but it looks very alien, and you have to use it any time you want a &lt;code&gt;%&lt;/code&gt; sign.&lt;/p&gt;
    &lt;code&gt;fmt::format(buf, "%%_ complete", 33);
&lt;/code&gt;
    &lt;p&gt;Compare this to the current approach, where you only have to double the &lt;code&gt;{&lt;/code&gt; when itâs directly preceding &lt;code&gt;}&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;fmt::format(buf, "{}% complete", 33);
&lt;/code&gt;
    &lt;p&gt;It also more closely mimics the final output string. Reading the previous &lt;code&gt;%%_&lt;/code&gt; example requires knowing that &lt;code&gt;%_&lt;/code&gt; is a special sequence that turns into &lt;code&gt;%&lt;/code&gt;, whereas reading this example doesnât require any extra knowledge (and progress reporting with percentages is a somewhat common use case for format strings).&lt;/p&gt;
    &lt;head rend="h3"&gt;Iteration through parameter packs&lt;/head&gt;
    &lt;p&gt;Another idea I had was to do an &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;-style API, though done with a function call rather than an operator chain:&lt;/p&gt;
    &lt;code&gt;format(buf, "Hello, ", "world!");
&lt;/code&gt;
    &lt;p&gt;The observation about poor greppability didnât occur to me until later, but it seemed simple enough to implement.&lt;/p&gt;
    &lt;code&gt;void format_value(String_Buffer&amp;amp; buf, const char* value);
void format_value(String_Buffer&amp;amp; buf, int value);

template&amp;lt;typename... Args&amp;gt;
void format(String_Buffer&amp;amp; buf, const Args&amp;amp;... args)
{
	(format_value(buf, args), ...);
}
&lt;/code&gt;
    &lt;p&gt;If I went with this approach, it would be even less code, but the poor greppability and non-localisability of format strings kept bugging me, so I stared wondering if thereâs some way to add that format string.&lt;/p&gt;
    &lt;p&gt;It seemed impossible, because the format string can be provided at runtime. This would mean &lt;code&gt;format&lt;/code&gt; would have to iterate through the format string to parse out the holes &lt;code&gt;{}&lt;/code&gt;, and when a hole is hit, insert the Nth parameter, starting with 0 for the first hole, N for the last hole.
But it seemed to require indexing the parameter pack, and&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;there is no way to index a parameter pack in C++20,&lt;/item&gt;
      &lt;item&gt; there is no way to index it using a runtime value in C++26, which adds parameter pack indexing &lt;code&gt;pack...[x]&lt;/code&gt;.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A few hours later, I realised it is possible to have the parameter pack expansion drive the parsing, rather than driving the parsing from &lt;code&gt;format&lt;/code&gt; and trying to index the parameter pack.&lt;/p&gt;
    &lt;p&gt;I think this is single-handedly the most elegant bit of this library.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt; It generates optimal, extremely minimal code: a sequence of calls to the appropriate overloads of &lt;code&gt;format_value&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;It handles out-of-bounds gracefully: because there is no indexing of parameters, and therefore no out-of-bounds.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;It makes me wonder what other cool things could be done with this technique.&lt;/p&gt;
    &lt;head rend="h3"&gt;Failed idea: using dynamic typing for format arguments&lt;/head&gt;
    &lt;p&gt;My initial idea for a minimal C++ formatting library involved a &lt;code&gt;Format_Argument&lt;/code&gt; type, passed in an &lt;code&gt;std::initializer_list&lt;/code&gt; to the &lt;code&gt;format&lt;/code&gt; function.
The API was shaped like this:&lt;/p&gt;
    &lt;code&gt;enum class Format_Argument_Type
{
	boolean,
	int32,
	float32,
	vec4,
};

struct Format_Argument
{
	Format_Argument_Type type;
	union
	{
		bool b;
		int32_t i;
		float f;
		Vec4 v;
	};
};

void format_value(String_Buffer&amp;amp; buf, const Format_Argument&amp;amp; arg);
void format(
	String_Buffer&amp;amp; buf,
	const char* fstr,
	std::initializer_list&amp;lt;Format_Argument&amp;gt; args);
&lt;/code&gt;
    &lt;p&gt;This approach has a couple problems though, which were enough of a deal breaker for me that I dropped the idea.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;Efficiency.&lt;/p&gt;&lt;p&gt;The size of&lt;/p&gt;&lt;code&gt;Format_Argument&lt;/code&gt;is as large as the biggest value able to be formatted. In this case, assuming&lt;code&gt;Vec4&lt;/code&gt;is four 32-bit floats, it is 20 bytes. This space has to be allocated on the stack for the&lt;code&gt;initializer_list&lt;/code&gt;.&lt;p&gt;It is unlikely compilers would be able to optimise all that away, especially if the&lt;/p&gt;&lt;code&gt;format&lt;/code&gt;function lived in a separate object file.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Verbosity.&lt;/p&gt;&lt;p&gt;The example above is actually incomplete. What&lt;/p&gt;&lt;code&gt;Format_Argument&lt;/code&gt;has to look like is actually this:&lt;code&gt;struct Format_Argument { Format_Argument_Type type; union { bool b; int32_t i; float f; Vec4 v; }; Format_Argument(bool b) : type(Format_Argument_Type::boolean), b(b) {} Format_Argument(int32_t i) : type(Format_Argument_Type::int32), i(i) {} Format_Argument(float f) : type(Format_Argument_Type::float32), f(f) {} Format_Argument(Vec4 v) : type(Format_Argument_Type::vec4), v(v) {} };&lt;/code&gt;&lt;p&gt;And then you have to&lt;/p&gt;&lt;code&gt;switch&lt;/code&gt;on the format argumentâs&lt;code&gt;type&lt;/code&gt;in&lt;code&gt;format_value&lt;/code&gt;, introducing further duplication.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Why not &lt;code&gt;printf&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;The elephant in the room. Why do this when you have &lt;code&gt;printf&lt;/code&gt;?&lt;/p&gt;
    &lt;p&gt;The answer to this is: verbosity.&lt;/p&gt;
    &lt;p&gt;Firstly, there is no way to extend &lt;code&gt;printf&lt;/code&gt; with your own types in standard C.
I often want to &lt;code&gt;printf&lt;/code&gt; 3D vectors for debugging, and I have to resort to listing out all the axes manually.&lt;/p&gt;
    &lt;code&gt;printf(
	"%f %f %f",
	player.position.x,
	player.position.y,
	player.position.z
);
&lt;/code&gt;
    &lt;p&gt;I think you can see how this gets old real quick.&lt;/p&gt;
    &lt;p&gt;Combine this with the inability to use &lt;code&gt;printf&lt;/code&gt; as an expression, which is particularly painful with ImGuiâwhere I often want to format a window title, or button label.&lt;/p&gt;
    &lt;code&gt;char entity_name[64];
snprintf(
	entity_name, sizeof entity_name,
	"%d(%d) %s",
	entity_id.index, entity_id.generation,
	entity_kind::names[entity.kind]
);
if (ImGui::TreeNode(entity_name)) {
	// ...
	ImGui::TreePop();
}
&lt;/code&gt;
    &lt;p&gt;It is possible to write a function which allocates the temporary buffer and writes to it in one go, akin to my &lt;code&gt;fmt::print&lt;/code&gt; function, but even doing that is verbose, as you have to deal with &lt;code&gt;va_list&lt;/code&gt;âtherefore needing two sets of functions, one for variadic arguments &lt;code&gt;...&lt;/code&gt; and one for &lt;code&gt;va_list&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;printf&lt;/code&gt; is also error-prone.
It is easy to mess up and use the wrong specifier type, or pass too few arguments to the function.&lt;/p&gt;
    &lt;code&gt;printf("%x", 1.0f); // oops
printf("%x");       // ...not again
&lt;/code&gt;
    &lt;p&gt;This makes it unusable for localisation purposes.&lt;/p&gt;
    &lt;p&gt;There is also no easy, idiomatic way to concatenate strings written with &lt;code&gt;snprintf&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;char str[4] = {0};
int cursor = 0;
cursor += snprintf(str, sizeof str, "hello ");
cursor += snprintf(str, sizeof str, "world!");
&lt;/code&gt;
    &lt;p&gt;This naive way is not actually correct, because &lt;code&gt;snprintf&lt;/code&gt; returns the number of characters that would be written into &lt;code&gt;str&lt;/code&gt;, had the buffer been large enough.
Therefore, the second call to &lt;code&gt;snprintf&lt;/code&gt; in the above example ends up writing past the bufferâs bounds (at index 6.)&lt;/p&gt;
    &lt;head rend="h2"&gt;Extras&lt;/head&gt;
    &lt;p&gt;Since the base library is very bare-bones, Iâm including some additional snippets to help you get it integrated into your project.&lt;/p&gt;
    &lt;head rend="h3"&gt;&lt;code&gt;write_value&lt;/code&gt; for various types&lt;/head&gt;
    &lt;code&gt;void write_value(String_Buffer&amp;amp; buf, const char* value)
{
	write(buf, value, int(strlen(value)));
}

void write_value(String_Buffer&amp;amp; buf, bool value)
{
	if (value)
		write(buf, "true", 4);
	else
		write(buf, "false", 5);
}

void write_value(String_Buffer&amp;amp; buf, char value)
{
	write(buf, &amp;amp;value, 1);
}
&lt;/code&gt;
    &lt;p&gt;For integers, hereâs an implementation of &lt;code&gt;write_value&lt;/code&gt; for &lt;code&gt;int64_t&lt;/code&gt;.
This can confuse C++âs overload resolution, so Iâd recommend adding additional overloads for smaller integers &lt;code&gt;int8_t&lt;/code&gt;, &lt;code&gt;int16_t&lt;/code&gt;, &lt;code&gt;int32_t&lt;/code&gt;, also &lt;code&gt;long long&lt;/code&gt;, and &lt;code&gt;ptrdiff_t&lt;/code&gt;, calling into the &lt;code&gt;int64_t&lt;/code&gt; overload.&lt;/p&gt;
    &lt;code&gt;void write_value(String_Buffer&amp;amp; buf, int64_t value)
{
	if (value == 0) {
		write(buf, "0", 1);
		return;
	}
	if (value &amp;lt; 0) {
		write(buf, "-", 1);
		value = -value;
	}

	char digits[20] = {};
	int i = sizeof digits - 1;
	while (value &amp;gt; 0) {
		digits[i--] = '0' + (value % 10);
		value /= 10;
	}
	int ndigits = sizeof digits - i - 1;
	write(buf, digits + i + 1, ndigits);
}
&lt;/code&gt;
    &lt;p&gt;A &lt;code&gt;uint64_t&lt;/code&gt; version can be created in a similar manner, by removing the &lt;code&gt;if (value &amp;lt; 0)&lt;/code&gt; case near the beginning.&lt;/p&gt;
    &lt;p&gt;This algorithm works for any radix (base 2, base 8, base 16, â¦). In my own implementation, I have a &lt;code&gt;Format_Hex&lt;/code&gt; newtype, which changes the output to base 16.&lt;/p&gt;
    &lt;code&gt;struct Format_Hex
{
	uint64_t value;
};

namespace fmt
{

inline Format_Hex hex(uint64_t value) { return {value}; }

}
&lt;/code&gt;
    &lt;p&gt;For floats, I defer the work onto &lt;code&gt;snprintf&lt;/code&gt;âs &lt;code&gt;%g&lt;/code&gt; specifier, because I trust it to do a better job than I ever could, even if a bit slow.
You can also use Ryu for this purpose.&lt;/p&gt;
    &lt;code&gt;void write_value(String_Buffer&amp;amp; buf, double value)
{
	char f[32] = {};
	int len = snprintf(f, sizeof f, "%g", value);
	if (len &amp;gt; sizeof f - 1)
		len = sizeof f - 1;
	write(buf, f, len);
}
&lt;/code&gt;
    &lt;p&gt;And of course, donât forget about vectorsâwhich were one of my motivating examples for abandoning &lt;code&gt;printf&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;void write_value(String_Buffer&amp;amp; buf, Vec3 value)
{
	write(buf, "(", 1);
	write_value(buf, value.x);
	write(buf, ", ", 2);
	write_value(buf, value.y);
	write(buf, ", ", 2);
	write_value(buf, value.z);
	write(buf, ")", 1);
}
&lt;/code&gt;
    &lt;head rend="h3"&gt;Ergonomic functions&lt;/head&gt;
    &lt;p&gt;The ergonomics of having to allocate a backing buffer, and then a &lt;code&gt;String_Buffer&lt;/code&gt; afterwards, can get a bit cumbersome.
To help alleviate this, I have a &lt;code&gt;Static_String&lt;/code&gt; type, together with a &lt;code&gt;print&lt;/code&gt; function, which formats to a &lt;code&gt;Static_String&lt;/code&gt; and returns it:&lt;/p&gt;
    &lt;code&gt;template&amp;lt;int N&amp;gt;
struct Static_String
{
	char data[N] = {};

	const char* operator*() const { return data; }
};

namespace fmt
{

template&amp;lt;int N, typename... Args&amp;gt;
Static_String&amp;lt;N&amp;gt; print(const char* fstr, const Args&amp;amp;... args)
{
	Static_String&amp;lt;N&amp;gt; str;
	String_Buffer buf = {str.data, sizeof str.data};
	format(buf, fstr, args...);
	return str;
}

}
&lt;/code&gt;
    &lt;p&gt;This makes it very easy to use a format string wherever an ordinary &lt;code&gt;const char*&lt;/code&gt; is expected.&lt;/p&gt;
    &lt;code&gt;if (ImGui::TreeNode(
	*fmt::print&amp;lt;64&amp;gt;("{}({}) {}", index, generation, entity_kind)
)) {
	// ...
	ImGui::TreePop();
}
&lt;/code&gt;
    &lt;p&gt;Thank you to my friend Tori for giving a whole bunch of solid feedback on a draft of this post.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45251178</guid><pubDate>Mon, 15 Sep 2025 15:51:28 +0000</pubDate></item><item><title>Asciinema CLI 3.0 rewritten in Rust, adds live streaming, upgrades file format</title><link>https://blog.asciinema.org/post/three-point-o/</link><description>&lt;doc fingerprint="e8da08d941a42ea2"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;3.0 Published on 15 Sep 2025 by Marcin Kulik&lt;/head&gt;
    &lt;p&gt;I’m happy to announce the release of asciinema CLI 3.0!&lt;/p&gt;
    &lt;p&gt;This is a complete rewrite of asciinema in Rust, upgrading the recording file format, introducing terminal live streaming, and bringing numerous improvements across the board.&lt;/p&gt;
    &lt;p&gt;In this post, I’ll go over the highlights of the release. For a deeper overview of new features and improvements, see the release notes and the detailed changelog.&lt;/p&gt;
    &lt;p&gt;First, let’s get the Rust rewrite topic out of the way. I did it because I felt like it. But seriously, I felt like it because I prefer working with Rust 100x more than with Python these days. And this type of code, with syscalls and concurrency, is way easier to deal with in Rust than in Python. That’s my experience, YMMV. Anyway, in addition to making me enjoy working with this component of asciinema again, the rewrite resulted in faster startup, easier installation (a static binary), and made many new features possible by integrating asciinema virtual terminal (also Rust) into the CLI.&lt;/p&gt;
    &lt;p&gt;Let’s look at what’s cool and new now.&lt;/p&gt;
    &lt;head rend="h2"&gt;asciicast v3 file format&lt;/head&gt;
    &lt;p&gt;The new asciicast v3 file format is an evolution of the good old asciicast v2. It addresses several shortcomings of the previous format that were discovered over the years.&lt;/p&gt;
    &lt;p&gt;The major change in the new format is the use of intervals (deltas) for timing session events. v2 used absolute timestamps (measured since session start), which had its own pros and cons. One often-brought-up issue was the difficulty of editing the recordings - timestamps of all following events had to be adjusted when adding/removing/updating events.&lt;/p&gt;
    &lt;p&gt;Other than timing, the header has been restructured, grouping related things together, e.g. all terminal-related metadata is now under &lt;code&gt;term&lt;/code&gt;. There’s also
support for the new &lt;code&gt;"x"&lt;/code&gt; (exit) event type, for storing the session exit
status. Finally, line comments are allowed by using the &lt;code&gt;#&lt;/code&gt; character as the
first character on a line.&lt;/p&gt;
    &lt;p&gt;Here’s an example of a short recording in asciicast v3 format:&lt;/p&gt;
    &lt;code&gt;{"version": 3, "term": {"cols": 80, "rows": 24, "type": "xterm-256color"}, "timestamp": 1504467315, "title": "Demo", "env": {"SHELL": "/bin/zsh"}}
# event stream follows the header
[0.248848, "o", "Hey Dougal...\n"]
[0.248848, "o", "Yes Ted?\n"]
[1.001376, "o", "Is there anything on your mind?\n"]
[3.500000, "m", ""]
[0.143733, "o", "No."]
# terminal window resized to 90 cols and 30 rows
[2.050000, "r", "90x30"]
[1.541828, "o", "Bye!"]
[0.8870, "x", "0"]
&lt;/code&gt;
    &lt;p&gt;The new format is already supported by asciinema server and asciinema player.&lt;/p&gt;
    &lt;head rend="h2"&gt;Live terminal streaming&lt;/head&gt;
    &lt;p&gt;The new CLI allows for live streaming of terminal sessions, and provides two modes for doing so.&lt;/p&gt;
    &lt;p&gt;Local mode uses built-in HTTP server, allowing people to view the stream on trusted networks (e.g. a LAN). In this mode no data is sent anywhere, except to the viewers’ browsers, which may require opening a firewall port. The CLI bundles the latest version of asciinema player, and uses it to connect to the stream from the page served by the built-in server.&lt;/p&gt;
    &lt;code&gt;$ asciinema stream --local
::: asciinema session started
::: Live streaming at http://127.0.0.1:37881
::: Press &amp;lt;ctrl+d&amp;gt; or type 'exit' to end
$ _
&lt;/code&gt;
    &lt;p&gt;Remote mode publishes the stream through an asciinema server (either asciinema.org or a self-hosted one), which acts as a relay, delivering the stream to the viewers at a shareable URL.&lt;/p&gt;
    &lt;code&gt;$ asciinema stream --remote
::: asciinema session started
::: Live streaming at https://asciinema.org/s/TQGS82DwiBS1bYAY
::: Press &amp;lt;ctrl+d&amp;gt; or type 'exit' to end
$ _
&lt;/code&gt;
    &lt;p&gt;The two modes can be used together as well.&lt;/p&gt;
    &lt;p&gt;Here’s a live stream of &lt;code&gt;btop&lt;/code&gt; running on one of the asciinema.org servers:&lt;/p&gt;
    &lt;p&gt;You can also watch it directly on asciinema.org at asciinema.org/s/olesiD03BIFH6Yz1.&lt;/p&gt;
    &lt;p&gt;Read more about the streaming architecture and supported protocols here.&lt;/p&gt;
    &lt;p&gt;asciinema player (seen above) supports all the described protocols. To make the viewing experience smooth and glitch-free, it implements an adaptive buffering mechanism. It measures network latency in real-time and adjusts the buffer size constantly, aiming for a good balance between low latency and buffer-underrun protection.&lt;/p&gt;
    &lt;p&gt;asciinema server can now record every live stream and turn it into a regular recording. At the moment, asciinema server running at asciinema.org has stream recording disabled and a concurrent live stream limit of 1, but you can self-host the server where recording is enabled and there’s no concurrent stream limit by default. The limits on asciinema.org may change. I’d like to first see how the streaming feature affects resource usage (btw, shout-out to Brightbox, which provides cloud services for asciinema.org).&lt;/p&gt;
    &lt;head rend="h2"&gt;Local-first&lt;/head&gt;
    &lt;p&gt;In the early versions of asciinema, &lt;code&gt;asciinema rec&lt;/code&gt; didn’t support saving to a
file - the recording was saved to a tmp file, uploaded to asciinema.org, and
the tmp file was removed. Later on, the CLI got the ability to specify a
filename, which allowed you to save the result of a recording session to a file
in asciicast v1 format and decide whether you want to keep it local only or
publish.&lt;/p&gt;
    &lt;p&gt;Although optional, the filename argument had long been available. However, many, many tutorials on the internet (probably including asciinema’s own docs) showed examples of recording and publishing in one go with &lt;code&gt;asciinema rec&lt;/code&gt;.
That was fine - many people loved this short path from recording to sharing.&lt;/p&gt;
    &lt;p&gt;Over the years, I started seeing two problems with this. The first one is that lots of people still think you must upload to asciinema.org, which is not true. You can save locally and nothing leaves your machine. The second one is that the optionality of the filename made it possible to unintentionally publish a recording, and potentially leak sensitive data. And it’s a completely valid concern!&lt;/p&gt;
    &lt;p&gt;Because of that, on several occasions I’ve seen negative comments saying “asciinema is shady” /m\. It was never shady. It’s just a historical thing. I just kept the original behavior for backward compatibility. asciinema.org is not a commercial product - it’s an instance of asciinema server, which is meant to give users an easy way to share, and to give a taste of what you get when you self-host the server. In fact, I encourage everyone to self-host it, as the recordings uploaded to asciinema.org are a liability for me (while being a good promotion of the project :)).&lt;/p&gt;
    &lt;p&gt;I hope this clears up any confusion and suspicion.&lt;/p&gt;
    &lt;p&gt;Anyway, many things have changed since the original behavior of &lt;code&gt;asciinema rec&lt;/code&gt; was implemented, including my approach to sharing my data with cloud
services. These days I self-host lots of services on a server at home, and I
try to avoid cloud services if I can (I’m pragmatic about it though).&lt;/p&gt;
    &lt;p&gt;The streaming feature was built from the ground up to support the local mode, which came first, and the remote mode followed.&lt;/p&gt;
    &lt;p&gt;In asciinema CLI 2.4, released 2 years ago, I made the &lt;code&gt;upload&lt;/code&gt; command show a
prompt where you have to explicitly make a decision on what to do with the
recording. It looked like this:&lt;/p&gt;
    &lt;code&gt;$ asciinema rec
asciinema: recording asciicast to /tmp/tmpo8_612f8-ascii.cast
asciinema: press &amp;lt;ctrl-d&amp;gt; or type "exit" when you're done
$ echo hello
hello
$ exit 
asciinema: recording finished
(s)ave locally, (u)pload to asciinema.org, (d)iscard
[s,u,d]? _
&lt;/code&gt;
    &lt;p&gt;It was a stopgap and a way to prepare users for further changes that are coming now.&lt;/p&gt;
    &lt;p&gt;In 3.0, the filename is always required, and the &lt;code&gt;rec&lt;/code&gt; command no longer has
upload capability. To publish a recording to asciinema.org or a self-hosted
asciinema server, use the explicit &lt;code&gt;asciinema upload &amp;lt;filename&amp;gt;&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;More self-hosting-friendly&lt;/head&gt;
    &lt;p&gt;A related improvement introduced in this release is the new server URL prompt.&lt;/p&gt;
    &lt;p&gt;When using a command that integrates with asciinema server (&lt;code&gt;upload&lt;/code&gt;, &lt;code&gt;stream&lt;/code&gt;,
&lt;code&gt;auth&lt;/code&gt;) for the first time, a prompt is shown, pre-filled with
https://asciinema.org (for convenience). This lets you choose an asciinema
server instance explicitly and intentionally. The choice is saved for future
invocations.&lt;/p&gt;
    &lt;p&gt;It was always possible to point the CLI to another asciinema server with a config file or environment variable, but this new prompt should come in handy especially when running the CLI in a non-workstation/non-laptop yet interactive environment, such as a fresh VM or a dev container.&lt;/p&gt;
    &lt;p&gt;This change should make it easier to use the CLI with your own asciinema server, and at the same time it doubles as an additional guard preventing unintended data leaks (to asciinema.org).&lt;/p&gt;
    &lt;head rend="h2"&gt;Summary&lt;/head&gt;
    &lt;p&gt;I’m really excited about this release. It’s been in the making for a while, but it’s out now, and I’m looking forward to seeing what new use-cases and workflows people will discover with it.&lt;/p&gt;
    &lt;p&gt;It’s going to take a moment until 3.0 shows up in package repositories for all supported platforms/distros. Meanwhile, you can download prebuilt binaries for GNU/Linux and macOS from the GitHub release, or build it from source.&lt;/p&gt;
    &lt;p&gt;Thanks for reading to this point!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45251375</guid><pubDate>Mon, 15 Sep 2025 16:06:30 +0000</pubDate></item><item><title>Microsoft to force install the Microsoft 365 Copilot app in October</title><link>https://www.bleepingcomputer.com/news/microsoft/microsoft-to-force-install-the-microsoft-365-copilot-app-in-october/</link><description>&lt;doc fingerprint="75b6218ba8ee8c7"&gt;
  &lt;main&gt;
    &lt;p&gt;Next month, Microsoft will begin automatically installing the Microsoft 365 Copilot app on Windows devices outside of the EEA region that have the Microsoft 365 desktop client apps.&lt;/p&gt;
    &lt;p&gt;The Microsoft 365 Copilot app integrates the AI-powered Copilot assistant with Microsoft 365 suite apps, including Word, Excel, and PowerPoint, as well as other features like Notebooks and AI agents.&lt;/p&gt;
    &lt;p&gt;Redmond also advised admins to notify their organizations' helpdesk teams and users before the app is forcibly installed on their devices "to reduce confusion and support requests."&lt;/p&gt;
    &lt;p&gt;The rollout will start in early October and be completed by mid-November; however, the Microsoft 365 Copilot app will not be installed on systems within the European Economic Area (EEA).&lt;/p&gt;
    &lt;p&gt;"Starting in October 2025, Microsoft will begin automatically installing the Microsoft 365 Copilot app on Windows devices that have Microsoft 365 desktop client apps," the company said in a Microsoft 365 message center update on Friday.&lt;/p&gt;
    &lt;p&gt;"This app provides a centralized entry point for accessing Copilot experiences and AI-powered capabilities across Microsoft 365. This change simplifies access to Copilot and ensures users can easily discover and engage with productivity-enhancing features."&lt;/p&gt;
    &lt;p&gt;While the newly installed app will be added to the Windows Start Menu and enabled by default, IT administrators responsible for managing Microsoft 365 app deployments will be able to opt out in the Apps Admin Center:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Sign in to the Microsoft 365 Apps admin center with an admin account.&lt;/item&gt;
      &lt;item&gt;Go to Customization &amp;gt; Device Configuration &amp;gt; Modern App Settings.&lt;/item&gt;
      &lt;item&gt;Select Microsoft 365 Copilot app, then clear the Enable automatic installation of Microsoft 365 Copilot app check box.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Although many users may notice a new Microsoft 365 Copilot app icon in the Start menu, the application may have already been installed, resulting in no apparent change.&lt;/p&gt;
    &lt;p&gt;Last month, as part of the same effort to make Copilot more easily available, Microsoft announced that it will integrate Microsoft 365 Copilot agents into the Edge sidebar starting in late September 2025, allowing users to access them while using Copilot.&lt;/p&gt;
    &lt;p&gt;Weeks earlier, it added a new setting that allows Microsoft 365 admins to pin the Microsoft 365 Copilot app to the Windows taskbar.&lt;/p&gt;
    &lt;head rend="h2"&gt;Picus Blue Report 2025 is Here: 2X increase in password cracking&lt;/head&gt;
    &lt;p&gt;46% of environments had passwords cracked, nearly doubling from 25% last year.&lt;/p&gt;
    &lt;p&gt;Get the Picus Blue Report 2025 now for a comprehensive look at more findings on prevention, detection, and data exfiltration trends.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45251593</guid><pubDate>Mon, 15 Sep 2025 16:22:23 +0000</pubDate></item><item><title>Wanted to spy on my dog, ended up spying on TP-Link</title><link>https://kennedn.com/blog/posts/tapo/</link><description>&lt;doc fingerprint="b430811b1b0232ef"&gt;
  &lt;main&gt;
    &lt;p&gt;I recently bought a cheap Tapo indoor camera to see what my dog gets up to when I am out of the house.&lt;/p&gt;
    &lt;p&gt;What actually followed? I ended up reverse-engineering onboarding flows, decompiling an APK, MITMing TLS sessions, and writing cryptographic scripts.&lt;/p&gt;
    &lt;p&gt;My main motivation for this project really stemmed from the fact that the camera annoyed me from day one. Setting the camera up in frigate was quite painful, no one really seemed to know how these cameras worked online.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;SIDENOTE: If you want 2 way audio to work in frigate you must use the&lt;/p&gt;&lt;code&gt;tapo://&lt;/code&gt;go2rtc configuration for your main stream instead of the usual&lt;code&gt;rtsp://&lt;/code&gt;. TP-Link are lazy and only implement 2 way audio on their own proprietary API.&lt;/quote&gt;
    &lt;p&gt;One undocumented behavior that tripped me up was that the device’s API is supposed to accept credentials &lt;code&gt;admin&lt;/code&gt;:&lt;code&gt;&amp;lt;your-tapo-cloud-password&amp;gt;&lt;/code&gt; after onboarding. However after banging my head against a wall for a few hours I later discovered that if you change your cloud password after onboarding, paired devices don’t get the memo ð.&lt;/p&gt;
    &lt;p&gt;This implied a few things to me that started the cogs turning:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;There must be a call made during on-boarding that syncs the device password with the cloud password&lt;/item&gt;
      &lt;item&gt;The device must either allow unauthenticated calls before this step or have some sort of default password.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;So considering my onboarding woes and the fact that I was starting to recoil every time the tapo app tried to jam a “Tapo Care” subscription down my throat, a cloudless onboarding solution for the device was beginning to look more and more desirable.&lt;/p&gt;
    &lt;p&gt;The first step to cracking this egg was to be be able to snoop on what the app and the camera are saying to each other during onboarding. E.g, establish a man in the middle.&lt;/p&gt;
    &lt;head rend="h2"&gt;Man in the middle&lt;/head&gt;
    &lt;p&gt;To man in the middle a phone app, you must be able to route all http(s) traffic via a proxy server you control. Historically this has been quite simple to achieve, simply spin up a proxy on a computer, add the proxy’s self-signed certificate to the phone’s truststore, and configure the phone to point at the proxy.&lt;/p&gt;
    &lt;p&gt;However, modern phone apps can use a few nasty tricks to render this approach ineffective. Namely they will blatantly ignore proxies, throw the system truststore to the wind and make liberal use of certificate pinning.&lt;/p&gt;
    &lt;p&gt;The most full-proof technique for generically MITMing an app has therefore become dynamic instrumentation via tools like &lt;code&gt;frida&lt;/code&gt;. What this allows us to do is force an app to use the proxies and certificates that we tell it to whilst batting aside it’s attempts to do things like certificate pinning.&lt;/p&gt;
    &lt;p&gt;So the setup ended up looking like this (full setup guide here ):&lt;/p&gt;
    &lt;quote&gt;--- config: theme: 'base' themeVariables: primaryColor: '#00000000' primaryTextColor: '#fff' primaryBorderColor: '#ffffff8e' lineColor: '#fff' secondaryColor: '#fff' tertiaryColor: '#fff' --- sequenceDiagram participant A as Tapo App &amp;lt;br&amp;gt;(with frida hooks) participant L as Laptop &amp;lt;br&amp;gt;(mitmproxy) participant C as Tapo Camera A-&amp;gt;&amp;gt;L: Request L-&amp;gt;&amp;gt;L: Record request L-&amp;gt;&amp;gt;C: Forward request C--&amp;gt;&amp;gt;L: Response L-&amp;gt;&amp;gt;L: Record response L--&amp;gt;&amp;gt;A: Forward response&lt;/quote&gt;
    &lt;p&gt;After spinning up &lt;code&gt;mitmproxy&lt;/code&gt;, injecting the frida scripts
, and onboarding the camera, we finally see an initial login flow â before the admin password ever gets changed:&lt;/p&gt;
    &lt;p&gt;However, subsequent requests look like this:&lt;/p&gt;
    &lt;code&gt;{
  "method": "securePassthrough",
  "params": {
    "request": "bAhdgihJ9j6PrrknnbXWATBohGTZK5llv3MEzRcmoAmcxexmlVNz3OUX2r0h9a9EG/3X0tBpPi654T2+BjqVEOn2D178kokBpf8RQj01AvBZLYD5S5sFeaCXWiRXA7MgQUppROV4AbrU4f+GOM37KgPqT59qgLVja2slw6CzrKjPzOrG4Ho6Mu6wBa1xepcj"
  }
}
&lt;/code&gt;
    &lt;p&gt;And responses look like this:&lt;/p&gt;
    &lt;code&gt;{
  "seq": 584,
  "result": {
    "response": "Gqz1wbXAig/3wL+kXzY2Ig3hq+JSYasYI7FXdMNZR5PyH8bpLX+GJqQbImUtby9IEj5HQDhxqcTa+dUqQjI0GaGCxuGHqmrgQ0FeyCTQjBiW5gslAPQG33wj44OOkAep"
  },
  "error_code": 0
}
&lt;/code&gt;
    &lt;p&gt;So from this initial dive we have learned that:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Tapo 100% has a default password due to the fact that it performs a full login before it knows anything about the cloud password.&lt;/item&gt;
      &lt;item&gt;Tapo has an encrypted &lt;code&gt;securePassthrough&lt;/code&gt;channel for its API calls to prevent peeping toms such as myself from spilling the beans.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;The JADX dive&lt;/head&gt;
    &lt;p&gt;The next logical step is to decompile the apk in JADX and start rummaging around for a default password.&lt;/p&gt;
    &lt;p&gt;The initial login call that we captured references an &lt;code&gt;admin&lt;/code&gt; username:&lt;/p&gt;
    &lt;code&gt;{
  "method": "login",
  "params": {
    "cnonce": "AD0E189F6E1BA335",
    "encrypt_type": "3",
    "username": "admin"
  }
}
&lt;/code&gt;
    &lt;p&gt;Searching for &lt;code&gt;"admin"&lt;/code&gt; in JADX gives us many hits but there are a few concentrated in a &lt;code&gt;CameraOnboardingViewModel&lt;/code&gt; class that look interesting:&lt;/p&gt;
    &lt;p&gt;The function &lt;code&gt;m98131y2&lt;/code&gt; appears to be returning a password that is then passed to the &lt;code&gt;new Account()&lt;/code&gt; call. Following this function up the chain, we hit gold:&lt;/p&gt;
    &lt;p&gt;We already know that the device is using &lt;code&gt;encrypt_type: 3&lt;/code&gt;, so that means our default password is:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;TPL075526460603&lt;/code&gt;
    &lt;/p&gt;
    &lt;head rend="h2"&gt;Teaching mitmproxy new tricks&lt;/head&gt;
    &lt;p&gt;With the default password now revealed, we have the cards in our hand to derive session keys and decode the &lt;code&gt;securePassthrough&lt;/code&gt; messages.&lt;/p&gt;
    &lt;p&gt;The only thing that would help us further is if we had a reference implementation for the authentication flow. This is where PyTapo really came in handy.&lt;/p&gt;
    &lt;p&gt;Using PyTapo as a reference, we could dump the session state and encrypted messages from mitmproxy and write a script to do some static analysis on the decrypted requests and responses, but a really cool feature of &lt;code&gt;mitmproxy&lt;/code&gt; is that it supports scripting itself.&lt;/p&gt;
    &lt;p&gt;What this means is that we can pass a python script to mitmproxy, and have it directly decrypt request and response payloads inline whilst running a capture.&lt;/p&gt;
    &lt;p&gt;So I wrote &lt;code&gt;tapo_decrypt_pretty.py&lt;/code&gt; which:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Watches for the login handshake (&lt;code&gt;cnonce&lt;/code&gt;,&lt;code&gt;nonce&lt;/code&gt;,&lt;code&gt;device_confirm&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;Derives &lt;code&gt;lsk&lt;/code&gt;/&lt;code&gt;ivb&lt;/code&gt;session keys from it&lt;/item&gt;
      &lt;item&gt;Transparently decrypts subsequent API calls&lt;/item&gt;
      &lt;item&gt;Pretty-prints them inline in mitmproxyâs UI in &lt;code&gt;request_decrypted&lt;/code&gt;and&lt;code&gt;response_decrypted&lt;/code&gt;fields&lt;/item&gt;
      &lt;item&gt;Dumps them to JSON files for later analysis&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Analysing the results&lt;/head&gt;
    &lt;p&gt;The complete list of calls made by the Tapo app during onboarding were:&lt;/p&gt;
    &lt;code&gt;getAppComponentList
setLanguage
scanApList
bindToCloud
changeAdminPassword
setTimezone
setRecordPlan
setDeviceLocation
connectAp
getConnectStatus
setAccountEnabled
changeThirdAccount
&lt;/code&gt;
    &lt;p&gt;This boiled down to just four important calls:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;code&gt;scanApList&lt;/code&gt;â list Wi-Fi access points&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;setAccountEnabled&lt;/code&gt;+&lt;code&gt;changeThirdAccount&lt;/code&gt;â enable RTSP/ONVIF account&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;changeAdminPassword&lt;/code&gt;â change from default password to the cloud password&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;connectAp&lt;/code&gt;â join the selected Wi-Fi access point&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Everything else was fluff: timezones, record plans, binding to cloud.&lt;/p&gt;
    &lt;head rend="h2"&gt;Final thoughts&lt;/head&gt;
    &lt;p&gt;In the end, the prize for all this nonsense was a scrappy little Bash script, &lt;code&gt;tapo_onboard.sh&lt;/code&gt;
, which:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Logs in with the default admin password,&lt;/item&gt;
      &lt;item&gt;Scans and selects a Wifi access point&lt;/item&gt;
      &lt;item&gt;Switches off the obnoxious OSD logo on the camera feed,&lt;/item&gt;
      &lt;item&gt;Enables RTSP/ONVIF capabilities&lt;/item&gt;
      &lt;item&gt;Changes the admin password,&lt;/item&gt;
      &lt;item&gt;And finally joins the Wi-Fi.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Peeling this onion left me with a few observations on Tapoâs firmware.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Some endpoints use SHA-256 for hashing, while others cling to MD5 like itâs 2003.&lt;/item&gt;
      &lt;item&gt;There are two public keys used to send passwords to the device â one that is shared with the client and another super secret one that’s hardcoded in the app. The easiest way to figure out which one to use is to flip a coin.&lt;/item&gt;
      &lt;item&gt;Password syncing between the app and its managed devices is strictly vibe-based.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The whole thing feels like it was cobbled together by a consortium of couch-cryptographers. But then again, it was the cheapest indoor camera on amazon, so what did I expect?&lt;/p&gt;
    &lt;p&gt;And with all this said I did finally manage to figure out what the dog does when I am away.&lt;/p&gt;
    &lt;p&gt;She sleeps. On the sofa. Sometimes even in her bed.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45251690</guid><pubDate>Mon, 15 Sep 2025 16:28:54 +0000</pubDate></item><item><title>AOMedia Announces Year-End Launch of Next-Gen Video Codec AV2</title><link>https://aomedia.org/press%20releases/AOMedia-Announces-Year-End-Launch-of-Next-Generation-Video-Codec-AV2-on-10th-Anniversary/</link><description>&lt;doc fingerprint="afb4499b102aebdd"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;AOMedia Announces Year-End Launch of Next Generation Video Codec AV2 on 10th Anniversary&lt;/head&gt;
    &lt;p&gt;The Future of Innovation Is Open: AOMedia Member Survey Highlights Adoption Trends&lt;/p&gt;
    &lt;p&gt;Wakefield, Mass. — Sept. 15, 2025 — The Alliance for Open Media (AOMedia), a global collaboration of innovators working together to define and deploy open standards that power the next generation of media experiences, today announced the upcoming launch of the next evolution in open video coding: AV2. Set for a year-end release, AV2 is not only an upgrade to the widely adopted AV1 but also a foundational piece of AOMedia’s future tech stack.&lt;/p&gt;
    &lt;p&gt;AV2, a generation leap in open video coding and the answer to the world’s growing streaming demands, delivers significantly better compression performance than AV1. AV2 provides enhanced support for AR/VR applications, split-screen delivery of multiple programs, improved handling of screen content, and an ability to operate over a wider visual quality range. AV2 marks a milestone on the path to an open, innovative future of media experiences.&lt;/p&gt;
    &lt;p&gt;“At AOMedia, we believe innovation thrives when it’s open,” said Dr. Pierre-Anthony Lemieux, Executive Director of AOMedia. “Our standards benefit from input from innovators worldwide and are developed under a royalty-free patent policy, bringing next-generation media experiences to more people, faster. We’re excited to share AV2 with the world, as we continue to lead the way in shaping the future of media through open collaboration.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Survey Findings: Widespread Support of AV1 and Planned Adoption of AV2&lt;/head&gt;
    &lt;p&gt;In conjunction with its 10th anniversary, AOMedia released new member survey findings that underscore strong industry-wide support for its open innovation model and the widespread adoption of its technologies.&lt;/p&gt;
    &lt;p&gt;The survey found that 88% of members ranked AV1 as either “extremely critical” or “important” to their current or future product roadmaps. AOMedia’s Adoption Showcase illustrates the real-world benefits members are achieving through AV1 deployment. Looking ahead, 53% of AOMedia members surveyed plan to adopt AV2 within 12 months upon its finalization later this year, with 88% expecting to implement it within the next two years.&lt;/p&gt;
    &lt;head rend="h2"&gt;Join the Future of Open Media Innovation&lt;/head&gt;
    &lt;p&gt;AOMedia invites new members to help shape the future of open, high-performance media standards. To learn more about membership opportunities, contact membership@aomedia.org.&lt;/p&gt;
    &lt;head rend="h2"&gt;About AOMedia&lt;/head&gt;
    &lt;p&gt;Launched in 2015, the Alliance for Open Media (AOMedia) develops open standards for media — spanning video, audio, still images, and immersive technologies. AOMedia brings together 49 global innovators — including tech leaders with decades of media tech experience and some of the world’s largest patent holders — to support this mission. Its steering committee consists of Amazon, Apple, Cisco, Google, Intel, Meta, Microsoft, Mozilla, Netflix, NVIDIA, Samsung Electronics, and Tencent. Learn more at www.aomedia.org.&lt;/p&gt;
    &lt;p&gt;Media Contact&lt;lb/&gt; Melissa Bednar&lt;lb/&gt; AOMedia Public Relations&lt;lb/&gt; mbednar@virtualinc.com&lt;lb/&gt; 781.876.8962&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45252701</guid><pubDate>Mon, 15 Sep 2025 17:44:55 +0000</pubDate></item><item><title>Hosting a website on a disposable vape</title><link>https://bogdanthegeek.github.io/blog/projects/vapeserver/</link><description>&lt;doc fingerprint="26b5c1054b922ae9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Hosting a WebSite on a Disposable Vape&lt;/head&gt;
    &lt;head rend="h1"&gt;Preface#&lt;/head&gt;
    &lt;p&gt;This article is NOT served from a web server running on a disposable vape. If you want to see the real deal, click here. The content is otherwise identical.&lt;/p&gt;
    &lt;head rend="h1"&gt;Background#&lt;/head&gt;
    &lt;p&gt;For a couple of years now, I have been collecting disposable vapes from friends and family. Initially, I only salvaged the batteries for “future” projects (It’s not hoarding, I promise), but recently, disposable vapes have gotten more advanced. I wouldn’t want to be the lawyer who one day will have to argue how a device with USB C and a rechargeable battery can be classified as “disposable”. Thankfully, I don’t plan on pursuing law anytime soon.&lt;/p&gt;
    &lt;p&gt;Last year, I was tearing apart some of these fancier pacifiers for adults when I noticed something that caught my eye, instead of the expected black blob of goo hiding some ASIC (Application Specific Integrated Circuit) I see a little integrated circuit inscribed “PUYA”. I don’t blame you if this name doesn’t excite you as much it does me, most people have never heard of them. They are most well known for their flash chips, but I first came across them after reading Jay Carlson’s blog post about the cheapest flash microcontroller you can buy. They are quite capable little ARM Cortex-M0+ micros.&lt;/p&gt;
    &lt;p&gt;Over the past year I have collected quite a few of these PY32 based vapes, all of them from different models of vape from the same manufacturer. It’s not my place to do free advertising for big tobacco, so I won’t mention the brand I got it from, but if anyone who worked on designing them reads this, thanks for labeling the debug pins!&lt;/p&gt;
    &lt;head rend="h1"&gt;What are we working with#&lt;/head&gt;
    &lt;p&gt;The chip is marked &lt;code&gt;PUYA C642F15&lt;/code&gt;, which wasn’t very helpful. I was pretty sure it was a &lt;code&gt;PY32F002A&lt;/code&gt;, but after poking around with pyOCD, I noticed that the flash was 24k and we have 3k of RAM. The extra flash meant that it was more likely a &lt;code&gt;PY32F002B&lt;/code&gt;, which is actually a very different chip.1&lt;/p&gt;
    &lt;p&gt;So here are the specs of a microcontroller so bad, it’s basically disposable:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;24MHz Coretex M0+&lt;/item&gt;
      &lt;item&gt;24KiB of Flash Storage&lt;/item&gt;
      &lt;item&gt;3KiB of Static RAM&lt;/item&gt;
      &lt;item&gt;a few peripherals, none of which we will use.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You may look at those specs and think that it’s not much to work with. I don’t blame you, a 10y old phone can barely load google, and this is about 100x slower. I on the other hand see a blazingly fast web server.&lt;/p&gt;
    &lt;head rend="h1"&gt;Getting online#&lt;/head&gt;
    &lt;p&gt;The idea of hosting a web server on a vape didn’t come to me instantly. In fact, I have been playing around with them for a while, but after writing my post on semihosting, the penny dropped.&lt;/p&gt;
    &lt;p&gt;If you don’t feel like reading that article, semihosting is basically syscalls for embedded ARM microcontrollers. You throw some values/pointers into some registers and call a breakpoint instruction. An attached debugger interprets the values in the registers and performs certain actions. Most people just use this to get some logs printed from the microcontroller, but they are actually bi-directional.&lt;/p&gt;
    &lt;p&gt;If you are older than me, you might remember a time before Wi-Fi and Ethernet, the dark ages, when you had to use dial-up modems to get online. You might also know that the ghosts of those modems still linger all around us. Almost all USB serial devices actually emulate those modems: a 56k modem is just 57600 baud serial device. Data between some of these modems was transmitted using a protocol called SLIP (Serial Line Internet Protocol).2&lt;/p&gt;
    &lt;p&gt;This may not come as a surprise, but Linux (and with some tweaking even macOS) supports SLIP. The &lt;code&gt;slattach&lt;/code&gt; utility can make any &lt;code&gt;/dev/tty*&lt;/code&gt; send and receive IP packets. All we have to do is put the data down the wire in the right format and provide a virtual tty.
This is actually easier than you might imagine, pyOCD can forward all semihosting though a telnet port. Then, we use &lt;code&gt;socat&lt;/code&gt; to link that port to a virtual tty:&lt;/p&gt;
    &lt;code&gt;pyocd gdb -S -O semihost_console_type=telnet -T $(PORT) $(PYOCDFLAGS) &amp;amp;
socat PTY,link=$(TTY),raw,echo=0 TCP:localhost:$(PORT),nodelay &amp;amp;
sudo slattach -L -p slip -s 115200 $(TTY) &amp;amp;
sudo ip addr add 192.168.190.1 peer 192.168.190.2/24 dev sl0
sudo ip link set mtu 1500 up dev sl0
&lt;/code&gt;
    &lt;p&gt;Ok, so we have a “modem”, but that’s hardly a web server. To actually talk TCP/IP, we need an IP stack. There are many choices, but I went with uIP because it’s pretty small, doesn’t require an RTOS, and it’s easy to port to other platforms. It also, helpfully, comes with a very minimal HTTP server example.&lt;/p&gt;
    &lt;p&gt;After porting the SLIP code to use semihosting, I had a working web server&amp;amp;mldr;half of the time. As with most highly optimised libraries, uIP was designed for 8 and 16-bit machines, which rarely have memory alignment requirements. On ARM however, if you dereference a &lt;code&gt;u16 *&lt;/code&gt;, you better hope that address is even, or you’ll get an exception. The &lt;code&gt;uip_chksum&lt;/code&gt; assumed &lt;code&gt;u16&lt;/code&gt; alignment, but the script that creates the filesystem didn’t.
I actually decided to modify a bit the structure of the filesystem to make it a bit more portable.
This was my first time working with &lt;code&gt;perl&lt;/code&gt; and I have to say, it’s quite well suited to this kind of task.&lt;/p&gt;
    &lt;head rend="h1"&gt;Blazingly fast#&lt;/head&gt;
    &lt;p&gt;So how fast is a web server running on a disposable microcontroller. Well, initially, not very fast. Pings took ~1.5s with 50% packet loss and a simple page took over 20s to load. That’s so bad, it’s actually funny, and I kind of wanted to leave it there.&lt;/p&gt;
    &lt;p&gt;However, the problem was actually between the seat and the steering wheel the whole time. The first implementation read and wrote a single character at a time, which had a massive overhead associated with it. I previously benchmarked semihosting on this device, and I was getting ~20KiB/s, but uIP’s SLIP implementation was designed for very low memory devices, so it was serialising the data byte by byte. We have a whopping 3kiB of RAM to play with, so I added a ring buffer to cache reads from the host and feed them into the SLIP poll function. I also split writes in batches to allow for escaping.&lt;/p&gt;
    &lt;p&gt;Now this is what I call blazingly fast! Pings now take 20ms, no packet loss and a full page loads in about 160ms. This was using using almost all of the RAM, but I could also dial down the sizes of the buffer to have more than enough headroom to run other tasks. The project repo has everything set to a nice balance latency and RAM usage:&lt;/p&gt;
    &lt;code&gt;Memory region         Used Size  Region Size  %age Used
           FLASH:        5116 B        24 KB     20.82%
             RAM:        1380 B         3 KB     44.92%
&lt;/code&gt;
    &lt;p&gt;For this blog however, I paid for none of the RAM, so I’ll use all of the RAM.&lt;/p&gt;
    &lt;p&gt;As you may have noticed, we have just under 20kiB (80%) of storage space. That may not be enough to ship all of React, but as you can see, it’s more than enough to host this entire blog post. And this is not just a static page server, you can run any server-side code you want, if you know C that is.&lt;/p&gt;
    &lt;p&gt;Just for fun, I added a json api endpoint to get the number of requests to the main page (since the last crash) and the unique ID of the microcontroller.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45252817</guid><pubDate>Mon, 15 Sep 2025 17:53:19 +0000</pubDate></item><item><title>Addendum to GPT-5 system card: GPT-5-Codex</title><link>https://openai.com/index/gpt-5-system-card-addendum-gpt-5-codex/</link><description>&lt;doc fingerprint="9c432defe1bb46cd"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Addendum to GPT-5 system card: GPT-5-Codex&lt;/head&gt;
    &lt;p&gt;GPT‑5-Codex is a version of GPT‑5 optimized for agentic coding in Codex. Like its predecessor, codex-1, this model was trained using reinforcement learning on real-world coding tasks in a variety of environments to generate code that closely mirrors human style and PR preferences, adhere precisely to instructions, and iteratively run tests until passing results are achieved.&lt;/p&gt;
    &lt;p&gt;This model is available locally in the terminal or IDE through Codex CLI and IDE extension, and on the cloud via the Codex web, GitHub, and the ChatGPT mobile app.&lt;/p&gt;
    &lt;p&gt;This addendum outlines the comprehensive safety measures implemented for GPT‑5-Codex. It details both model-level mitigations, such as specialized safety training for harmful tasks and prompt injections, and product-level mitigations like agent sandboxing and configurable network access.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45253458</guid><pubDate>Mon, 15 Sep 2025 18:45:32 +0000</pubDate></item></channel></rss>