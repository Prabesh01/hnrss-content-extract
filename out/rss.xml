<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Fri, 12 Sep 2025 23:31:59 +0000</lastBuildDate><item><title>Many hard LeetCode problems are easy constraint problems</title><link>https://buttondown.com/hillelwayne/archive/many-hard-leetcode-problems-are-easy-constraint/</link><description>&lt;doc fingerprint="cd8a25908f10bf1b"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Many Hard Leetcode Problems are Easy Constraint Problems&lt;/head&gt;
    &lt;head rend="h2"&gt;Use the right tool for the job.&lt;/head&gt;
    &lt;p&gt;In my first interview out of college I was asked the change counter problem:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Given a set of coin denominations, find the minimum number of coins required to make change for a given number. IE for USA coinage and 37 cents, the minimum number is four (quarter, dime, 2 pennies).&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;I implemented the simple greedy algorithm and immediately fell into the trap of the question: the greedy algorithm only works for "well-behaved" denominations. If the coin values were &lt;code&gt;[10, 9, 1]&lt;/code&gt;, then making 37 cents would take 10 coins in the greedy algorithm but only 4 coins optimally (&lt;code&gt;10+9+9+9&lt;/code&gt;). The "smart" answer is to use a dynamic programming algorithm, which I didn't know how to do. So I failed the interview.&lt;/p&gt;
    &lt;p&gt;But you only need dynamic programming if you're writing your own algorithm. It's really easy if you throw it into a constraint solver like MiniZinc and call it a day.&lt;/p&gt;
    &lt;code&gt;int: total;
array[int] of int: values = [10, 9, 1];
array[index_set(values)] of var 0..: coins;

constraint sum (c in index_set(coins)) (coins[c] * values[c]) == total;
solve minimize sum(coins);
&lt;/code&gt;
    &lt;p&gt;You can try this online here. It'll give you a prompt to put in &lt;code&gt;total&lt;/code&gt; and then give you successively-better solutions:&lt;/p&gt;
    &lt;code&gt;coins = [0, 0, 37];
----------
coins = [0, 1, 28];
----------
coins = [0, 2, 19];
----------
coins = [0, 3, 10];
----------
coins = [0, 4, 1];
----------
coins = [1, 3, 0];
----------
&lt;/code&gt;
    &lt;p&gt;Lots of similar interview questions are this kind of mathematical optimization problem, where we have to find the maximum or minimum of a function corresponding to constraints. They're hard in programming languages because programming languages are too low-level. They are also exactly the problems that constraint solvers were designed to solve. Hard leetcode problems are easy constraint problems.1 Here I'm using MiniZinc, but you could just as easily use Z3 or OR-Tools or whatever your favorite generalized solver is.&lt;/p&gt;
    &lt;head rend="h3"&gt;More examples&lt;/head&gt;
    &lt;p&gt;This was a question in a different interview (which I thankfully passed):&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Given a list of stock prices through the day, find maximum profit you can get by buying one stock and selling one stock later.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;It's easy to do in O(n^2) time, or if you are clever, you can do it in O(n). Or you could be not clever at all and just write it as a constraint problem:&lt;/p&gt;
    &lt;code&gt;array[int] of int: prices = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8];
var int: buy;
var int: sell;
var int: profit = prices[sell] - prices[buy];

constraint sell &amp;gt; buy;
constraint profit &amp;gt; 0;
solve maximize profit;
&lt;/code&gt;
    &lt;p&gt;Reminder, link to trying it online here. While working at that job, one interview question we tested out was:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Given a list, determine if three numbers in that list can be added or subtracted to give 0?&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This is a satisfaction problem, not a constraint problem: we don't need the "best answer", any answer will do. We eventually decided against it for being too tricky for the engineers we were targeting. But it's not tricky in a solver;&lt;/p&gt;
    &lt;code&gt;include "globals.mzn";
array[int] of int: numbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8];
array[index_set(numbers)] of var {0, -1, 1}: choices;

constraint sum(n in index_set(numbers)) (numbers[n] * choices[n]) = 0;
constraint count(choices, -1) + count(choices, 1) = 3;
solve satisfy;
&lt;/code&gt;
    &lt;p&gt;Okay, one last one, a problem I saw last year at Chipy AlgoSIG. Basically they pick some leetcode problems and we all do them. I failed to solve this one:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The "proper" solution is a tricky thing involving tracking lots of bookkeeping states, which you can completely bypass by expressing it as constraints:&lt;/p&gt;
    &lt;code&gt;array[int] of int: numbers = [2,1,5,6,2,3];

var 1..length(numbers): x; 
var 1..length(numbers): dx;
var 1..: y;

constraint x + dx &amp;lt;= length(numbers);
constraint forall (i in x..(x+dx)) (y &amp;lt;= numbers[i]);

var int: area = (dx+1)*y;
solve maximize area;

output ["(\(x)-&amp;gt;\(x+dx))*\(y) = \(area)"]
&lt;/code&gt;
    &lt;p&gt;There's even a way to automatically visualize the solution (using &lt;code&gt;vis_geost_2d&lt;/code&gt;), but I didn't feel like figuring it out in time for the newsletter.&lt;/p&gt;
    &lt;head rend="h3"&gt;Is this better?&lt;/head&gt;
    &lt;p&gt;Now if I actually brought these questions to an interview the interviewee could ruin my day by asking "what's the runtime complexity?" Constraint solvers runtimes are unpredictable and almost always than an ideal bespoke algorithm because they are more expressive, in what I refer to as the capability/tractability tradeoff. But even so, they'll do way better than a bad bespoke algorithm, and I'm not experienced enough in handwriting algorithms to consistently beat a solver.&lt;/p&gt;
    &lt;p&gt;The real advantage of solvers, though, is how well they handle new constraints. Take the stock picking problem above. I can write an O(n²) algorithm in a few minutes and the O(n) algorithm if you give me some time to think. Now change the problem to&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Maximize the profit by buying and selling up to&lt;/p&gt;&lt;code&gt;max_sales&lt;/code&gt;stocks, but you can only buy or sell one stock at a given time and you can only hold up to&lt;code&gt;max_hold&lt;/code&gt;stocks at a time?&lt;/quote&gt;
    &lt;p&gt;That's a way harder problem to write even an inefficient algorithm for! While the constraint problem is only a tiny bit more complicated:&lt;/p&gt;
    &lt;code&gt;include "globals.mzn";
int: max_sales = 3;
int: max_hold = 2;
array[int] of int: prices = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8];
array [1..max_sales] of var int: buy;
array [1..max_sales] of var int: sell;
array [index_set(prices)] of var 0..max_hold: stocks_held;
var int: profit = sum(s in 1..max_sales) (prices[sell[s]] - prices[buy[s]]);

constraint forall (s in 1..max_sales) (sell[s] &amp;gt; buy[s]);
constraint profit &amp;gt; 0;

constraint forall(i in index_set(prices)) (stocks_held[i] = (count(s in 1..max_sales) (buy[s] &amp;lt;= i) - count(s in 1..max_sales) (sell[s] &amp;lt;= i)));
constraint alldifferent(buy ++ sell);
solve maximize profit;

output ["buy at \(buy)\n", "sell at \(sell)\n", "for \(profit)"];
&lt;/code&gt;
    &lt;p&gt;Most constraint solving examples online are puzzles, like Sudoku or "SEND + MORE = MONEY". Solving leetcode problems would be a more interesting demonstration. And you get more interesting opportunities to teach optimizations, like symmetry breaking.&lt;/p&gt;
    &lt;head rend="h3"&gt;Update for the Internet&lt;/head&gt;
    &lt;p&gt;This was sent as a weekly newsletter, which is usually on topics like software history, formal methods, unusual technologies, and the theory of software engineering. You can subscribe here:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Because my dad will email me if I don't explain this: "leetcode" is slang for "tricky algorithmic interview questions that have little-to-no relevance in the actual job you're interviewing for." It's from leetcode.com. ↩&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you're reading this on the web, you can subscribe here. Updates are once a week. My main website is here.&lt;/p&gt;
    &lt;p&gt;My new book, Logic for Programmers, is now in early access! Get it here.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45222695</guid></item><item><title>Oq: Terminal OpenAPI Spec Viewer</title><link>https://github.com/plutov/oq</link><description>&lt;doc fingerprint="3191ffdf3d4b2dd5"&gt;
  &lt;main&gt;
    &lt;code&gt;oq openapi.yaml
# or
cat openapi.yaml | oq
# or
curl https://api.example.com/openapi.json | oq&lt;/code&gt;
    &lt;p&gt;Press &lt;code&gt;?&lt;/code&gt; to see the help screen with all available keyboard shortcuts.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;oq&lt;/code&gt; supports both modern major OpenAPI specification versions:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;OpenAPI 3.0.x&lt;/item&gt;
      &lt;item&gt;OpenAPI 3.1.x&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Both JSON and YAML formats are supported.&lt;/p&gt;
    &lt;code&gt;go install github.com/plutov/oq@latest&lt;/code&gt;
    &lt;p&gt;You can also download the compiled binaries from the Releases page.&lt;/p&gt;
    &lt;code&gt;git clone git@github.com:plutov/oq.git
cd oq
go build -o oq .&lt;/code&gt;
    &lt;p&gt;MIT License - see LICENSE file for details.&lt;/p&gt;
    &lt;p&gt;Contributions are welcome! Please feel free to submit issues and pull requests.&lt;/p&gt;
    &lt;p&gt;When contributing:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Ensure tests pass: &lt;code&gt;go test -v&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Test with both OpenAPI 3.0 and 3.1 examples&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45222799</guid></item><item><title>Advanced Scheme Techniques (2004) [pdf]</title><link>https://people.csail.mit.edu//jhbrown/scheme/continuationslides04.pdf</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45223419</guid></item><item><title>OpenAI Grove</title><link>https://openai.com/index/openai-grove/</link><description>&lt;doc fingerprint="b4871141422eeff0"&gt;
  &lt;main&gt;
    &lt;p&gt;Today, we’re announcing the OpenAI Grove, a new program for technical talent at the very start of their company-building journey. The Grove is not a startup accelerator or traditional program: it offers pre-idea individuals deeply curious about building in AI a dense talent network, co-building with OpenAI researchers, and resources designed to accelerate your journey. As participants explore early concepts, they will receive counsel from the OpenAI team and community with peers in OpenAI Grove. &lt;lb/&gt;This program is the starting point of a long-term network. It will begin with five weeks of content and programming hosted in the OpenAI San Francisco HQ, including in-person workshops, weekly office hours, and mentoring from OpenAI technical leaders. In addition to technical support and community, participants will also have the opportunity to get hands-on with new OpenAI tools and models prior to general availability. Following the program, participants will be able to explore raising capital or pursue another avenue, internally or externally to OpenAI. &lt;/p&gt;
    &lt;p&gt;The first Grove cohort will consist of approximately fifteen participants. We recommend individuals from all backgrounds, disciplines, and experience levels apply. To apply, please submit the form below by September 24th, 2025.&lt;/p&gt;
    &lt;p&gt;Applications are due by September 24th, 2025.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45223660</guid></item><item><title>Corporations are trying to hide job openings from US citizens</title><link>https://thehill.com/opinion/finance/5498346-corporate-america-has-been-trying-to-hide-job-openings-now-it-is-failing/</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45223719</guid></item><item><title>VaultGemma: The most capable differentially private LLM</title><link>https://research.google/blog/vaultgemma-the-worlds-most-capable-differentially-private-llm/</link><description>&lt;doc fingerprint="3e58915235154e3a"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;VaultGemma: The world's most capable differentially private LLM&lt;/head&gt;
    &lt;p&gt;September 12, 2025&lt;/p&gt;
    &lt;p&gt;Amer Sinha, Software Engineer, and Ryan McKenna, Research Scientist, Google Research&lt;/p&gt;
    &lt;p&gt;We introduce VaultGemma, the most capable model trained from scratch with differential privacy.&lt;/p&gt;
    &lt;head rend="h2"&gt;Quick links&lt;/head&gt;
    &lt;p&gt;As AI becomes more integrated into our lives, building it with privacy at its core is a critical frontier for the field. Differential privacy (DP) offers a mathematically robust solution by adding calibrated noise to prevent memorization. However, applying DP to LLMs introduces trade-offs. Understanding these trade-offs is crucial. Applying DP noise alters traditional scaling laws — rules describing performance dynamics — by reducing training stability (the model's ability to learn consistently without experiencing catastrophic events like loss spikes or divergence) and significantly increasing batch size (a collection of input prompts sent to the model simultaneously for processing) and computation costs.&lt;/p&gt;
    &lt;p&gt;Our new research, “Scaling Laws for Differentially Private Language Models”, conducted in partnership with Google DeepMind, establishes laws that accurately model these intricacies, providing a complete picture of the compute-privacy-utility trade-offs. Guided by this research, we’re excited to introduce VaultGemma, the largest (1B-parameters), open model trained from scratch with differential privacy. We are releasing the weights on Hugging Face and Kaggle, alongside a technical report, to advance the development of the next generation of private AI.&lt;/p&gt;
    &lt;head rend="h2"&gt;Understanding the scaling laws&lt;/head&gt;
    &lt;p&gt;With a carefully thought-out experimental methodology, we aimed to quantify the benefit of increasing model sizes, batch sizes, and iterations in the context of DP training. Our work required making some simplifying assumptions to overcome the exponential number of combinations one might consider trying. We assumed that how well the model learns depends mostly on the "noise-batch ratio” which compares the amount of random noise we add for privacy to the size of the data groups (batches) we use for training. This assumption works because the privacy noise we add is much greater than any natural randomness that comes from sampling the data.&lt;/p&gt;
    &lt;p&gt;To establish a DP scaling law, we conducted a comprehensive set of experiments to evaluate performance across a variety of model sizes and noise-batch ratios. The resulting empirical data, together with known deterministic relationships between other variables, allows us to answer a variety of interesting scaling-laws–style queries, such as, “For a given compute budget, privacy budget, and data budget, what is the optimal training configuration to achieve the lowest possible training loss?”&lt;/p&gt;
    &lt;head rend="h2"&gt;Key findings: A powerful synergy&lt;/head&gt;
    &lt;p&gt;Before diving into the full scaling laws, it’s useful to understand the dynamics and synergies between the compute budget, privacy budget, and data budget from a privacy accounting perspective — i.e., understand how these factors influence the noise-batch ratio for a fixed model size and number of iterations. This analysis is significantly cheaper to do as it does not require any model training, yet it yields a number of useful insights. For instance, increasing the privacy budget in isolation leads to diminishing returns, unless coupled with a corresponding increase in either the compute budget (FLOPs) or data budget (tokens).&lt;/p&gt;
    &lt;p&gt;To explore this synergy further, the visualization below shows how the optimal training configuration changes based on different constraints. As the privacy and compute budgets change, notice how the recommendation shifts between investing in a larger model versus training with larger batch sizes or more iterations.&lt;/p&gt;
    &lt;p&gt;This data provides a wealth of useful insights for practitioners. While all the insights are reported in the paper, a key finding is that one should train a much smaller model with a much larger batch size than would be used without DP. This general insight should be unsurprising to a DP expert given the importance of large batch sizes. While this general insight holds across many settings, the optimal training configurations do change with the privacy and data budgets. Understanding the exact trade-off is crucial to ensure that both the compute and privacy budgets are used judiciously in real training scenarios. The above visualizations also reveal that there is often wiggle room in the training configurations — i.e., a range of model sizes might provide very similar utility if paired with the correct number of iterations and/or batch size.&lt;/p&gt;
    &lt;head rend="h2"&gt;Applying the scaling laws to build VaultGemma&lt;/head&gt;
    &lt;p&gt;The Gemma models are designed with responsibility and safety at their core. This makes them a natural foundation for developing a production-quality, DP-trained model like VaultGemma.&lt;/p&gt;
    &lt;head rend="h3"&gt;Algorithmic advancements: Training at scale&lt;/head&gt;
    &lt;p&gt;The scaling laws we derived above represent an important first step towards training a useful Gemma model with DP. We used the scaling laws to determine both how much compute we needed to train a compute-optimal 1B parameter Gemma 2-based model with DP, and how to allocate that compute among batch size, iterations, and sequence length to achieve the best utility.&lt;/p&gt;
    &lt;p&gt;One prominent gap between the research underlying the scaling laws and the actual training of VaultGemma was our handling of Poisson sampling, which is a central component of DP-SGD. We initially used a straightforward method of loading data in uniform batches but then switched to Poisson sampling to get the best privacy guarantees with the least amount of noise. This method posed two main challenges: it created batches of different sizes, and it required a specific, randomized order for processing the data. We solved this by using our recent work on Scalable DP-SGD, which allows us to process data in fixed-size batches — either by adding extra padding or trimming them — while still maintaining strong privacy protections.&lt;/p&gt;
    &lt;head rend="h2"&gt;Results&lt;/head&gt;
    &lt;p&gt;Armed with our new scaling laws and advanced training algorithms, we built VaultGemma, to date the largest (1B-parameters) open model fully pre-trained with differential privacy with an approach that can yield high-utility models.&lt;/p&gt;
    &lt;p&gt;From training VaultGemma, we found our scaling laws to be highly accurate. The final training loss of VaultGemma was remarkably close to what our equations predicted, validating our research and providing the community with a reliable roadmap for future private model development.&lt;/p&gt;
    &lt;p&gt;We also compare downstream performance of our model against its non-private counterpart across a range of standard academic benchmarks (i.e., HellaSwag, BoolQ, PIQA, SocialIQA, TriviaQA, ARC-C, ARC-E ). To put this performance in perspective and quantify the current resource investment required for privacy, we also include a comparison to an older similar-sized GPT-2 model, which performs similarly on these benchmarks. This comparison illustrates that today’s private training methods produce models with utility comparable to that of non-private models from roughly 5 years ago, highlighting the important gap our work will help the community systematically close.&lt;/p&gt;
    &lt;p&gt;Finally, the model comes with strong theoretical and empirical privacy protections.&lt;/p&gt;
    &lt;head rend="h3"&gt;Formal privacy guarantee&lt;/head&gt;
    &lt;p&gt;In general, both the privacy parameters (ε, δ) and the privacy unit are important considerations when doing DP training, as these together determine what the trained model can learn. VaultGemma was trained with a sequence-level DP guarantee of (ε ≤ 2.0, δ ≤ 1.1e-10), where a sequence consists of 1024 consecutive tokens extracted from heterogeneous data sources. Specifically, we used the same training mixture that was used to train the Gemma 2 model, consisting of a number of documents of varying lengths. During pre-processing, long documents are split up and tokenized into multiple sequences, and shorter documents are packed together into a single sequence. While the sequence-level privacy unit was a natural choice for our training mixture, in situations where there is a clear mapping between data and users, user-level differential privacy would be a better choice.&lt;/p&gt;
    &lt;p&gt;What does this mean in practice? Informally speaking, because we provide protection at the sequence level, if information relating to any (potentially private) fact or inference occurs in a single sequence, then VaultGemma essentially does not know that fact: the response to any query will be statistically similar to the result from a model that never trained on the sequence in question. However, if many training sequences contain information relevant to a particular fact, then in general VaultGemma will be able to provide that information.&lt;/p&gt;
    &lt;head rend="h3"&gt;Empirical memorization&lt;/head&gt;
    &lt;p&gt;Sequence-level DP provably bounds the influence of any single training sequence (example) on the final model. We prompted the model with a 50-token prefix from a training document to see if it would generate the corresponding 50-token suffix. VaultGemma 1B shows no detectable memorization of its training data and successfully demonstrates the efficacy of DP training.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;VaultGemma represents a significant step forward in the journey toward building AI that is both powerful and private by design. By developing and applying a new, robust understanding of the scaling laws for DP, we have successfully trained and released the largest open, DP-trained language model to date.&lt;/p&gt;
    &lt;p&gt;While a utility gap still exists between DP-trained and non-DP–trained models, we believe this gap can be systematically narrowed with more research on mechanism design for DP training. We hope that VaultGemma and our accompanying research will empower the community to build the next generation of safe, responsible, and private AI for everyone.&lt;/p&gt;
    &lt;head rend="h2"&gt;Acknowledgements&lt;/head&gt;
    &lt;p&gt;We'd like to thank the entire Gemma and Google Privacy teams for their contributions and support throughout this project, in particular, Peter Kairouz, Brendan McMahan and Dan Ramage for feedback on the blog post, Mark Simborg and Kimberly Schwede for help with visualizations, and the teams at Google that helped with algorithm design, infrastructure implementation, and production maintenance. The following people directly contributed to the work presented here (ordered alphabetically): Borja Balle, Zachary Charles, Christopher A. Choquette-Choo, Lynn Chua, Prem Eruvbetine, Badih Ghazi, Steve He, Yangsibo Huang, Armand Joulin, George Kaissis, Pritish Kamath, Ravi Kumar, Daogao Liu, Ruibo Liu, Pasin Manurangsi, Thomas Mesnard, Andreas Terzis, Tris Warkentin, Da Yu, and Chiyuan Zhang.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45223726</guid></item><item><title>Vector database that can index 1B vectors in 48M</title><link>https://www.vectroid.com/blog/why-and-how-we-built-Vectroid</link><description>&lt;doc fingerprint="1b10db7e119a9f88"&gt;
  &lt;main&gt;
    &lt;p&gt;We are excited to announce Vectroid, a serverless vector search solution that delivers exceptional accuracy and low latency in a cost effective package. Vectroid is not just another vector search solution—it’s a search engine that performs and scales in all scenarios.&lt;/p&gt;
    &lt;head rend="h3"&gt;Why we built Vectroid&lt;/head&gt;
    &lt;p&gt;Talk to any team working with large, low latency vector workloads and you’ll hear a familiar story: something always has to give. Vector databases often make significant tradeoffs between speed, accuracy, and cost. That’s the nature of the mathematical underpinnings of vector search works—taking algorithmic shortcuts to get near-perfect results in a short amount of time.&lt;/p&gt;
    &lt;p&gt;There are some common permutations of these tradeoffs:&lt;/p&gt;
    &lt;p&gt;Based on the existing vector database landscape, it would seem that building a cost effective vector database requires sacrificing either speed or accuracy at scale. We believe that’s a false pretense: building a cost-efficient database is possible with high accuracy and low latency. We just need to rethink our underlying mechanism.&lt;/p&gt;
    &lt;head rend="h3"&gt;Our “aha” moment&lt;/head&gt;
    &lt;p&gt;Query speed and recall are largely a function of the chosen ANN algorithm. Algorithms which are both fast and accurate like HNSW (Hierarchical Navigable Small Worlds) are memory intensive and expensive to index. The traditional assumption is that these types of algorithms are untenable for a cost-conscious system.&lt;/p&gt;
    &lt;p&gt;We had two major realizations which challenged this assumption.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Demand for in-memory HNSW is not static. Real world usage patterns are bursty and uneven. A cost efficient database can optimize for this reality by making resource allocation dynamic and by individually scaling system components as needed.&lt;/item&gt;
      &lt;item&gt;HNSW’s memory footprint is tunable. It can be easily be flattened (ex. by compressing vectors using quantization) and expanded (ex. by increasing layer count), which gives us the flexibility to experiment with different configurations to find a goldilocks setup.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;What is Vectroid?&lt;/head&gt;
    &lt;p&gt;Vectroid is a serverless vector database with premium performance. It delivers the same or stronger balance of speed and recall promised by high-end offerings, but costs less than competitors.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Performant vector search: HNSW for ultra fast, high recall similarity search.&lt;/item&gt;
      &lt;item&gt;Near real-time search capabilities: Newly ingested records are searchable almost instantly.&lt;/item&gt;
      &lt;item&gt;Massive scalability: Seamlessly handles billions of vectors in a single namespace.&lt;/item&gt;
      &lt;item&gt;Cost efficient resource utilization: Scaling each layer (ingest, index, query) separately.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;How Vectroid performs&lt;/head&gt;
    &lt;p&gt;The core philosophy of Vectroid is that optimizing for one metric at any cost to the others doesn’t make for a robust system. Instead, vector search should be designed for balanced performance across recall, latency, and cost so users don’t have to make painful tradeoffs as workloads grow.&lt;/p&gt;
    &lt;p&gt;When tested against other state-of-the-art vector search, Vectroid is not only competitive but the most consistent across the board. Across all of our tests, Vectroid is the only databases that was able to maintain over 90% recall while scaling to 10 query threads per second—all while maintaining good latency scores.&lt;/p&gt;
    &lt;head rend="h3"&gt;Some early benchmarks:&lt;/head&gt;
    &lt;p&gt;We’ll be releasing the full benchmark suite (with setup details so anyone can reproduce them) in an upcoming post. For now, these numbers highlight the kind of scale and performance we designed Vectroid to handle.&lt;/p&gt;
    &lt;head rend="h3"&gt;How Vectroid works&lt;/head&gt;
    &lt;p&gt;Vectroid is composed of two independently scalable microservices for writes and reads.&lt;/p&gt;
    &lt;p&gt;As the diagram shows, index state, vector data, and metadata are persisted to cloud object storage (GCS for now, S3 coming soon). Disk, cache, and in-memory storage layers each employ a usage-aware model for index lifecycle in which indexes are lazily loaded from object storage on demand and evicted when idle.&lt;/p&gt;
    &lt;p&gt;For fast, high-recall ANN search, we chose the HNSW algorithm. It offers excellent latency and accuracy tradeoffs, supports incremental updates, and performs well across large-scale workloads. To patch its limitations, we added a number of targeted optimizations:&lt;/p&gt;
    &lt;head rend="h3"&gt;Final Thoughts&lt;/head&gt;
    &lt;p&gt;We’re just getting started. If you’re building applications that rely on fast, scalable vector search (or you’re running up against the limits of your current stack), we’d love to hear from you. Start using Vectroid today or sign up for our newsletter to follow along as we continue building.&lt;/p&gt;
    &lt;p&gt;Written by Talip Ozturk&lt;/p&gt;
    &lt;p&gt;Founder of Vectroid&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45224141</guid></item><item><title>QGIS is a free, open-source, cross platform geographical information system</title><link>https://github.com/qgis/QGIS</link><description>&lt;doc fingerprint="1e593c5071772595"&gt;
  &lt;main&gt;
    &lt;p&gt;QGIS is a full-featured, user-friendly, free-and-open-source (FOSS) geographical information system (GIS) that runs on Unix platforms, Windows, and MacOS.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Support for raster, vector, mesh, and point cloud data in a range of industry-standard formats &lt;list rend="ul"&gt;&lt;item&gt;Raster formats include: GeoPackage, GeoTIFF, GRASS, ArcInfo binary and ASCII grids, ERDAS Imagine SDTS, WMS, WCS, PostgreSQL/PostGIS, and other GDAL supported formats.&lt;/item&gt;&lt;item&gt;Vector formats include: GeoPackage, ESRI shapefiles, GRASS, SpatiaLite, PostgreSQL/PostGIS, MSSQL, Oracle, WFS, Vector Tiles and other OGR supported formats.&lt;/item&gt;&lt;item&gt;Mesh formats include: NetCDF, GRIB, 2DM, and other MDAL supported formats.&lt;/item&gt;&lt;item&gt;Point-cloud format: LAS/LAZ and EPT datasets.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Data abstraction framework, with local files, spatial databases (PostGIS, SpatiaLite, SQL Server, Oracle, SAP HANA), and web services (WMS, WCS, WFS, ArcGIS REST) all accessed through a unified data model and browser interface, and as flexible layers in user-created projects&lt;/item&gt;
      &lt;item&gt;Spatial data creation via visual and numerical digitizing and editing, as well as georeferencing of raster and vector data&lt;/item&gt;
      &lt;item&gt;On-the-fly reprojection between coordinate reference systems (CRS)&lt;/item&gt;
      &lt;item&gt;Nominatim (OpenStreetMap) geocoder access&lt;/item&gt;
      &lt;item&gt;Temporal support&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Example: Temporal animation&lt;/p&gt;
    &lt;p&gt;Example: 3D map view&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Large variety of rendering options in 2D and 3D&lt;/item&gt;
      &lt;item&gt;Fine control over symbology, labeling, legends and additional graphical elements for beautifully rendered maps&lt;/item&gt;
      &lt;item&gt;Respect for embedded styling in many spatial data sources (e.g. KML and TAB files, Mapbox-GL styled vector tiles)&lt;/item&gt;
      &lt;item&gt;In particular, near-complete replication (and significant extension) of symbology options that are available in proprietary software by ESRI&lt;/item&gt;
      &lt;item&gt;Advanced styling using data-defined overrides, blending modes, and draw effects&lt;/item&gt;
      &lt;item&gt;500+ built-in color ramps (cpt-city, ColorBrewer, etc.)&lt;/item&gt;
      &lt;item&gt;Create and update maps with specified scale, extent, style, and decorations via saved layouts&lt;/item&gt;
      &lt;item&gt;Generate multiple maps (and reports) automatically using QGIS Atlas and QGIS Reports&lt;/item&gt;
      &lt;item&gt;Display and export elevation profile plots with flexible symbology&lt;/item&gt;
      &lt;item&gt;Flexible output direct to printer, or as image (raster), PDF, or SVG for further customization&lt;/item&gt;
      &lt;item&gt;On-the-fly rendering enhancements using geometry generators (e.g. create and style new geometries from existing features)&lt;/item&gt;
      &lt;item&gt;Preview modes for inclusive map making (e.g. monochrome, color blindness)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For more maps created with QGIS, visit the QGIS Map Showcase Flickr Group.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Powerful processing framework with 200+ native processing algorithms&lt;/item&gt;
      &lt;item&gt;Access to 1000+ processing algorithms via providers such as GDAL, SAGA, GRASS, OrfeoToolbox, as well as custom models and processing scripts&lt;/item&gt;
      &lt;item&gt;Geospatial database engine (filters, joins, relations, forms, etc.), as close to datasource- and format-independent as possible&lt;/item&gt;
      &lt;item&gt;Immediate visualization of geospatial query and geoprocessing results&lt;/item&gt;
      &lt;item&gt;Model designer and batch processing&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Example: Travel isochrones&lt;/p&gt;
    &lt;p&gt;Example: Model designer&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Fully customizable user experience, including user interface and application settings that cater to power-users and beginners alike&lt;/item&gt;
      &lt;item&gt;Rich expression engine for maximum flexibility in visualization and processing&lt;/item&gt;
      &lt;item&gt;Broad and varied plugin ecosystem that includes data connectors, digitizing aids, advanced analysis and charting tools, in-the-field data capture, conversion of ESRI style files, etc.&lt;/item&gt;
      &lt;item&gt;Style manager for creating, storing, and managing styles&lt;/item&gt;
      &lt;item&gt;QGIS style hub for easy sharing of styles&lt;/item&gt;
      &lt;item&gt;Python and C++ API for standalone (headless) applications as well as in-application comprehensive scripting (PyQGIS)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Example: Style manager&lt;/p&gt;
    &lt;p&gt;Example: Plugins&lt;/p&gt;
    &lt;p&gt;Headless map server -- running on Linux, macOS, Windows, or in a docker container -- that shares the same code base as QGIS.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Industry-standard protocols (WMS, WFS, WFS3/OGC API for Features and WCS) allow plug-n-play with any software stack&lt;/item&gt;
      &lt;item&gt;Works with any web server (Apache, nginx, etc) or standalone&lt;/item&gt;
      &lt;item&gt;All beautiful QGIS cartography is supported with best-in-class support for printing&lt;/item&gt;
      &lt;item&gt;Fully customizable with Python scripting support&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Example: QGIS server WMS response&lt;/p&gt;
    &lt;p&gt;Example: QGIS server WFS response&lt;/p&gt;
    &lt;p&gt;QGIS is developed using the Qt toolkit and C++, since 2002, and has a pleasing, easy to use graphical user interface with multilingual support. It is maintained by an active developer team and supported by vibrant community of GIS professionals and enthusiasts as well as geospatial data publishers and end-users.&lt;/p&gt;
    &lt;p&gt;QGIS development and releases follow a time based schedule/roadmap. There are three main branches of QGIS that users can install. These are the Long Term Release (LTR) branch, the Latest Release (LR) branch, and the Development (Nightly) branch.&lt;/p&gt;
    &lt;p&gt;Every month, there is a Point Release that provides bug-fixes to the LTR and LR.&lt;/p&gt;
    &lt;p&gt;QGIS is released under the GNU Public License (GPL) Version 2 or any later version. Developing QGIS under this license means that you can (if you want to) inspect and modify the source code and guarantees that you, our happy user will always have access to a GIS program that is free of cost and can be freely modified.&lt;/p&gt;
    &lt;p&gt;QGIS is part of the Open-Source Geospatial Foundation (OSGeo), offering a range of complementary open-source GIS software projects.&lt;/p&gt;
    &lt;p&gt;Precompiled binaries for QGIS are available at the QGIS.org download page. Please follow the installation instructions carefully.&lt;/p&gt;
    &lt;p&gt;The building guide can be used to get started with building QGIS from source.&lt;/p&gt;
    &lt;p&gt;For installation of QGIS Server, see its getting started documentation.&lt;/p&gt;
    &lt;p&gt;A range of documentation is available. This includes:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Training Manual&lt;/item&gt;
      &lt;item&gt;QGIS User Guide&lt;/item&gt;
      &lt;item&gt;QGIS Server Guide&lt;/item&gt;
      &lt;item&gt;Visual Changelog&lt;/item&gt;
      &lt;item&gt;Documentation Guidelines&lt;/item&gt;
      &lt;item&gt;QGIS Python (PyQGIS) Cookbook&lt;/item&gt;
      &lt;item&gt;QGIS Python (PyQGIS) API&lt;/item&gt;
      &lt;item&gt;QGIS C++ API&lt;/item&gt;
      &lt;item&gt;Developers Guide&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;There are several channels where you can find help and support for QGIS:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Using the QGIS community site&lt;/item&gt;
      &lt;item&gt;Joining the qgis-users mailing list&lt;/item&gt;
      &lt;item&gt;Chatting with other users real-time. Please wait around for a response to your question as many folks on the channel are doing other things and it may take a while for them to notice your question. The following paths all take you to the same chat room: &lt;list rend="ul"&gt;&lt;item&gt;Using an IRC client and joining the #qgis channel on irc.libera.chat.&lt;/item&gt;&lt;item&gt;Using a Matrix client and joining the #qgis:osgeo.org room.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;At the GIS stackexchange or r/QGIS reddit, which are not maintained by the QGIS team, but where the QGIS and broader GIS community provides lots of advice&lt;/item&gt;
      &lt;item&gt;Other support channels&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45224156</guid></item><item><title>K2-think: A parameter-efficient reasoning system</title><link>https://arxiv.org/abs/2509.07604</link><description>&lt;doc fingerprint="ac9cb73a5cc74e8b"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Computer Science &amp;gt; Machine Learning&lt;/head&gt;&lt;p&gt; [Submitted on 9 Sep 2025]&lt;/p&gt;&lt;head rend="h1"&gt;Title:K2-Think: A Parameter-Efficient Reasoning System&lt;/head&gt;View PDF HTML (experimental)&lt;quote&gt;Abstract:K2-Think is a reasoning system that achieves state-of-the-art performance with a 32B parameter model, matching or surpassing much larger models like GPT-OSS 120B and DeepSeek v3.1. Built on the Qwen2.5 base model, our system shows that smaller models can compete at the highest levels by combining advanced post-training and test-time computation techniques. The approach is based on six key technical pillars: Long Chain-of-thought Supervised Finetuning, Reinforcement Learning with Verifiable Rewards (RLVR), Agentic planning prior to reasoning, Test-time Scaling, Speculative Decoding, and Inference-optimized Hardware, all using publicly available open-source datasets. K2-Think excels in mathematical reasoning, achieving state-of-the-art scores on public benchmarks for open-source models, while also performing strongly in other areas such as Code and Science. Our results confirm that a more parameter-efficient model like K2-Think 32B can compete with state-of-the-art systems through an integrated post-training recipe that includes long chain-of-thought training and strategic inference-time enhancements, making open-source reasoning systems more accessible and affordable. K2-Think is freely available at this http URL, offering best-in-class inference speeds of over 2,000 tokens per second per request via the Cerebras Wafer-Scale Engine.&lt;/quote&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;p&gt; export BibTeX citation Loading... &lt;/p&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;p&gt; IArxiv Recommender (What is IArxiv?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45224219</guid></item><item><title>Humanely dealing with humungus crawlers</title><link>https://flak.tedunangst.com/post/humanely-dealing-with-humungus-crawlers</link><description>&lt;doc fingerprint="a46841793b2754f7"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;humanely dealing with humungus crawlers&lt;/head&gt;
    &lt;p&gt;I host a bunch of hobby code on my server. I would think it’s really only interesting to me, but it turns out every day, thousands of people from all over the world are digging through my code, reviewing years old changesets. On the one hand, wow, thanks, this is very flattering. On the other hand, what the heck is wrong with you?&lt;/p&gt;
    &lt;p&gt;This has been building up for a while, and I’ve been intermittently developing and deploying countermeasures. It’s been a lot like solving a sliding block puzzle. Lots of small moves and changes, and eventually it starts coming together.&lt;/p&gt;
    &lt;p&gt;My primary principle is that I’d rather not annoy real humans more than strictly intended. If there’s a challenge, it shouldn’t be too difficult, but ideally, we want to minimize the number of challenges presented. You should never suspect that I suspected you of being an enemy agent.&lt;/p&gt;
    &lt;p&gt;First measure is we only challenge on the deep URLs. So, for instance, I can link to the anticrawl repo no problem, or even the source for anticrawl.go, and that’ll be served immediately. All the pages any casual browser would visit make up less than 1% of the possible URLs that exist, but probably contain 99% of the interesting content.&lt;/p&gt;
    &lt;p&gt;Also, these pages get cached by the reverse proxy first, so anticrawl doesn’t even evaluate them. We’ve already done the work to render the page, and we’re trying to shed load, so why would I want to increase load by generating challenges and verifying responses? It annoys me when I click a seemingly popular blog post and immediately get challenged, when I’m 99.9% certain that somebody else clicked it two seconds before me. Why isn’t it in cache? We must have different objectives in what we’re trying to accomplish. Or who we’re trying to irritate.&lt;/p&gt;
    &lt;p&gt;The next step is that anybody loading &lt;code&gt;style.css&lt;/code&gt; gets marked friendly. Big Basilisk doesn’t care about my artisanal styles, but most everybody else loves them. So if you start at a normal page, and then start clicking deeper, that’s fine, still no challenge. (Sorry lynx browsers, but don’t worry, it’s not game over for you yet.)&lt;/p&gt;
    &lt;p&gt;And then let’s say somebody directly links to a changeset like /r/vertigo/v/b5ea481ff167. The first visitor will probably hit a challenge, but then we record that URL as in use. The bots are shotgun crawling all over the place, but if a single link is visited more than once, I’ll assume it’s human traffic, and bypass the challenge. No promises, but clicking that link will mostly likely just return content, no challenge.&lt;/p&gt;
    &lt;p&gt;The very first version of anticrawl relied on a weak POW challenge (find a SHA hash with first byte 42), just to get something launched, but this does seem counter intuitive. Why are we making humans solve a challenge optimized for machines? Instead I have switched to a much more diabolical challenge. You are asked how many Rs in strawberry. Or maybe something else. To be changed as necessary. But really, the key observation is that any challenge, anything at all, easily sheds like 99.99% of the crawling load.&lt;/p&gt;
    &lt;p&gt;Notably, because the challenge does not include its own javascript solver, even a smart crawler isn’t going to solve it automatically. If you include the solution on the challenge page, at least some bots are going to use it. All anticrawl challenges now require some degree of contemplation, not just blind interpretation.&lt;/p&gt;
    &lt;p&gt;It took a few iterations because the actual deployment involves a few pieces. I had to reduce the &lt;code&gt;style.css&lt;/code&gt; cache time, so that visitors would periodically refresh it (and thus their humanity). And then exclude it from the caching proxy, so that the request would be properly observed. Basically, a few minutes tinkering now and then while I wait for my latte to arrive, and now I think I’ve gotten things to the point where it’s unlikely to burden anybody except malignant crawlers.&lt;/p&gt;
    &lt;head rend="h3"&gt;elsewhere&lt;/head&gt;
    &lt;p&gt;I have focused my bot detection efforts on humungus because the ratio of crawler to legit traffic was out of control. But now that I know what to look for, I see the same patterns scraping everywhere else. Seems really unlikely a worldwide colelctive of Opera users is suddenly interested in my old honks. I’m starting to deploy similar countermeasures.&lt;/p&gt;
    &lt;head rend="h3"&gt;appendix&lt;/head&gt;
    &lt;p&gt;Some log samples. There’s always somebody to insist these could be real humans, and I have somehow misjudged them. Make your own decision.&lt;/p&gt;
    &lt;p&gt;&lt;head&gt;logs&lt;/head&gt;&lt;code&gt;136.158.49.199 810.886µs humungus.tedunangst.com [2025/09/07 11:31:06] "GET /r/old-flak/v/d720c11fbb57 HTTP/1.1" 402 904 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36"
179.42.10.152 831.235µs humungus.tedunangst.com [2025/09/07 11:31:31] "GET /r/flak/v/8b31c923ca0f HTTP/1.1" 402 900 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36"
43.128.250.84 863.565µs humungus.tedunangst.com [2025/09/07 11:31:32] "GET /r/vertigo/v/71df18bb3819 HTTP/1.1" 402 961 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36"
78.182.153.38 639.086µs humungus.tedunangst.com [2025/09/07 11:31:46] "GET /r/gerc/v/692abbdefe18 HTTP/1.1" 402 900 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36"
119.28.100.182 525.152µs humungus.tedunangst.com [2025/09/07 11:31:47] "GET /r/honk3/v/462b7440c563 HTTP/1.1" 402 959 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36"
185.163.26.50 678.609µs humungus.tedunangst.com [2025/09/07 11:31:49] "GET /r/azorius/v/b48a3aa3e060 HTTP/1.1" 402 961 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
43.167.157.150 758.749µs humungus.tedunangst.com [2025/09/07 11:32:01] "GET /r/humungus/v/0442f94c95fc HTTP/1.1" 402 904 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
43.134.75.63 574.875µs humungus.tedunangst.com [2025/09/07 11:32:03] "GET /r/azorius/v/969314b9f388 HTTP/1.1" 402 903 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" 
119.28.203.219 497.67µs humungus.tedunangst.com [2025/09/07 11:32:04] "GET /r/gerc/v/8ddbf7307214 HTTP/1.1" 402 900 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36"
43.128.84.91 727.05µs humungus.tedunangst.com [2025/09/07 11:32:06] "GET /r/vertigo/v/eb31940f6fa2 HTTP/1.1" 402 903 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36"
178.163.207.155 566.9µs humungus.tedunangst.com [2025/09/07 11:32:09] "GET /r/lua-tedu/v/300e67089469 HTTP/1.1" 402 904 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36"
181.120.225.184 561.48µs humungus.tedunangst.com [2025/09/07 11:32:12] "GET /r/azorius/v/43120b8aac5a HTTP/1.1" 402 961 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
150.109.20.69 612.716µs humungus.tedunangst.com [2025/09/07 11:32:13] "GET /r/gojxl/v/tip/f/pool.go HTTP/1.1" 404 19 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
49.51.170.84 629.056µs humungus.tedunangst.com [2025/09/07 11:32:27] "GET /r/gerc/v/41b8b28ee893 HTTP/1.1" 402 958 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36"
5.62.146.6 843.157µs humungus.tedunangst.com [2025/09/07 11:32:33] "GET /r/honk/v/f6b8a7bee881 HTTP/1.1" 402 900 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36"
129.226.112.105 595.173µs humungus.tedunangst.com [2025/09/07 11:32:40] "GET /r/azorius/v/6179155ac315 HTTP/1.1" 402 903 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.81 Safari/537.36"
43.167.204.48 514.371µs humungus.tedunangst.com [2025/09/07 11:32:42] "GET /r/vertigo/v/fae0082c32c2 HTTP/1.1" 402 961 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36"
43.132.108.190 715.327µs humungus.tedunangst.com [2025/09/07 11:32:56] "GET /r/vertigo/v/8b5fcd06f8c6 HTTP/1.1" 402 903 "" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36"&lt;/code&gt;&lt;lb/&gt;The big brain solution is you just cache all these requests, but unfortunately I have slightly less than 2TB RAM. Dealing with these relentless scans renders the cache for actual content less useful because everything gets LRUd out.&lt;/p&gt;
    &lt;p&gt;Take a look at this guy. Apparently a pro starcraft player has taken up speed browsing as a side hustle, middle clicking ten times per second. These links aren’t even on the same page, so he’s switching tabs between clicks, too. Amazing. But he doesn’t solve a single challenge. I thought gamers liked puzzles? Maybe that’s why this totally real human quit gaming.&lt;/p&gt;
    &lt;p&gt;&lt;head&gt;logs&lt;/head&gt;&lt;code&gt;46.183.108.190 1.361957ms humungus.tedunangst.com [2025/07/08 13:41:32] "GET /r/azorius/v/a0824eb087c7 HTTP/1.1" 402 1808 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 2.450003ms humungus.tedunangst.com [2025/07/08 13:41:32] "GET /r/azorius/v/1a4d35ff94ef HTTP/1.1" 402 1808 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 3.049854ms humungus.tedunangst.com [2025/07/08 13:41:32] "GET /r/azorius/v/9ca7ed390641 HTTP/1.1" 402 1808 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 3.215804ms humungus.tedunangst.com [2025/07/08 13:41:32] "GET /r/humungus/v/67e77258e203 HTTP/1.1" 402 1809 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 3.26703ms humungus.tedunangst.com [2025/07/08 13:41:32] "GET /r/honk/v/2fc6f904deaa HTTP/1.1" 402 1805 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 830.924µs humungus.tedunangst.com [2025/07/08 13:41:32] "GET /r/humungus/v/1437b0d26457 HTTP/1.1" 402 1809 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 1.23004ms humungus.tedunangst.com [2025/07/08 13:41:32] "GET /r/honk/v/945572a3b51d HTTP/1.1" 402 1805 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 789.496µs humungus.tedunangst.com [2025/07/08 13:41:32] "GET /r/humungus/v/63f9c1f17606 HTTP/1.1" 402 1809 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 841.414µs humungus.tedunangst.com [2025/07/08 13:41:32] "GET /r/humungus/v/b5711a883e66 HTTP/1.1" 402 1809 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 916.233µs humungus.tedunangst.com [2025/07/08 13:41:32] "GET /r/humungus/v/a5307922b3f5 HTTP/1.1" 402 1809 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 565.518µs humungus.tedunangst.com [2025/07/08 13:41:33] "GET /r/honk/v/ab1e84cac5e6 HTTP/1.1" 402 1805 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 574.083µs humungus.tedunangst.com [2025/07/08 13:41:33] "GET /r/honk/v/a9043d011e41 HTTP/1.1" 402 1805 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 602.026µs humungus.tedunangst.com [2025/07/08 13:41:33] "GET /r/azorius/v/1cc1393b6832 HTTP/1.1" 402 1808 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 497.831µs humungus.tedunangst.com [2025/07/08 13:41:33] "GET /r/azorius/v/4d53be2bdbd5 HTTP/1.1" 402 1808 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 516.365µs humungus.tedunangst.com [2025/07/08 13:41:33] "GET /r/honk/v/302e58335796 HTTP/1.1" 402 1805 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 614.239µs humungus.tedunangst.com [2025/07/08 13:41:33] "GET /r/azorius/v/1a4d35ff94ef HTTP/1.1" 402 1808 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 530.161µs humungus.tedunangst.com [2025/07/08 13:41:33] "GET /r/azorius/v/a0824eb087c7 HTTP/1.1" 402 1808 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 625.91µs humungus.tedunangst.com [2025/07/08 13:41:33] "GET /r/azorius/v/9ca7ed390641 HTTP/1.1" 402 1808 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 757.497µs humungus.tedunangst.com [2025/07/08 13:41:33] "GET /r/humungus/v/67e77258e203 HTTP/1.1" 402 1809 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"
46.183.108.190 841.494µs humungus.tedunangst.com [2025/07/08 13:41:33] "GET /r/vertigo/v/6b3ffb3b21f5 HTTP/1.1" 402 1808 "" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:140.0) Gecko/20100101 Firefox/140.0"&lt;/code&gt;&lt;lb/&gt;I think there’s a common perception that 10 req/s just isn’t that much, based on some simple benchmarks. But that doesn’t account for TLS, etc. 10 handshakes/s requires a bit more juice than GET hello. I’ve worked to keep response times in the low millisecond range, just seems like good sense, but I think people should be allowed to program in slower languages and frameworks. You shouldn’t need a fairly substantial EPYC server like I have, either.&lt;/p&gt;
    &lt;p&gt;And there’s always stuff happening in the background. Mastodon hits me once a second every time anybody deletes something. Lemmy hits me twice a second every time somebody likes anything. There’s a bunch of nitwits with misconfigured RSS readers.&lt;/p&gt;
    &lt;p&gt;A 4x overhead in one area doesn’t matter, but a 1/4 as powerful CPU, with 1/4 as many cores, and 1/4 as fast language, all of which are entirely realistic, and pretty soon we’re running close to the edge.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45224246</guid></item><item><title>How FOSS Projects Handle Legal Takedown Requests</title><link>https://f-droid.org/2025/09/10/how-foss-projects-handle-legal-takedown-requests.html</link><description>&lt;doc fingerprint="f21a83016ff37250"&gt;
  &lt;main&gt;&lt;head rend="h2"&gt;How FOSS Projects Handle Legal Takedown Requests&lt;/head&gt;Posted on Sep 10, 2025 by F-Droid&lt;p&gt;When a legal takedown request arrives, whether itâs about copyright, censorship, privacy, or something more vague, how a Free and Open Source Software (FOSS) project responds can make all the difference.&lt;/p&gt;&lt;p&gt;Handled well, a takedown request can be a manageable administrative step. Handled poorly, it can cause panic, disrupt infrastructure, or even put contributors at legal risk.&lt;/p&gt;&lt;p&gt;As part of our legal resilience research, we spoke with a range of legal experts, software freedom advocates, and maintainers of mature FOSS infrastructure to understand how others manage these moments. In this article, we share what we learned, and how F-Droid is incorporating these lessons into its own approach.&lt;/p&gt;&lt;head rend="h2"&gt;A Pattern Emerges&lt;/head&gt;&lt;p&gt;Despite differences in jurisdiction, size, and mission, a few common themes from our research emerged when we asked how other projects handle takedown requests:&lt;/p&gt;&lt;head rend="h3"&gt;1. Donât Be a Soft Target&lt;/head&gt;&lt;p&gt;Legal threats often follow the path of least resistance. FOSS projects that publish a formal takedown policy, require legal submissions through specific channels, and insist on a valid legal basis are much less likely to receive, or comply with, vague or harassing demands.&lt;/p&gt;&lt;p&gt;One FOSS organization, for example, requires all legal correspondence to be submitted by postal mail in the national language and citing local law. Most complaints evaporate once asked to comply.&lt;/p&gt;&lt;head rend="h3"&gt;2. Creating a transparent and documented process&lt;/head&gt;&lt;p&gt;Several digital rights organizations advised setting up structured response steps:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Require submissions to a dedicated legal@ or abuse@ email.&lt;/item&gt;&lt;item&gt;Insist on full documentation: legal basis, jurisdiction, evidence of the infringement and identity of the complainant.&lt;/item&gt;&lt;item&gt;Review for sufficiency, proportionality, and standing before acting.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;This creates proper documentation to process valid claims, while protecting projects from illegitimate or unfounded requests.&lt;/p&gt;&lt;head rend="h3"&gt;3. Use Jurisdiction Strategically&lt;/head&gt;&lt;p&gt;Projects based in civil law jurisdictions, particularly in Europe, are often better positioned to deflect legal demands from foreign entities. Several organizations emphasized that complying with vague or extrajudicial requests, especially those originating outside your jurisdiction, can increase risk unnecessarily. Instead, they recommended requiring a valid legal basis grounded in the projectâs home country. Formal legal processes, such as court orders or official government channels, were seen as the appropriate threshold, not informal emails or unverifiable demands.&lt;/p&gt;&lt;head rend="h2"&gt;Notification and Appeals: Fairness and Transparency&lt;/head&gt;&lt;p&gt;All of the projects we consulted emphasized the importance of notifying developers whose apps are being targeted, informing them (if possible) of the seriousness of the claim, and the proposed strategy F-Droid is taking to handle the claim.Â&lt;/p&gt;&lt;p&gt;If a threat is deemed to be valid and a developerâs content is flagged for takedown:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;The developer or maintainer is informed, unless prohibited by law (gag orders).&lt;/item&gt;&lt;item&gt;A window for response (commonly 14 days) is offered, unless unfeasible due to seriousness and time restraints of the request itself&lt;/item&gt;&lt;item&gt;If the developer disputes the claim and provides supporting information (e.g. license, public domain status, fair use justification), the claim is reviewed.&lt;/item&gt;&lt;item&gt;If the claim is upheld, the content is removed, but always with an internal record and opportunity to appeal.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;This mirrors principles embedded in international norms (like the Manila Principles and GitHubâs DMCA takedown policy) and avoids overcompliance with weak or abusive claims.&lt;/p&gt;&lt;head rend="h2"&gt;Transparency, Censorship, and What You Can (Legally) Publish&lt;/head&gt;&lt;p&gt;Takedown requests occupy a complex space between legal enforcement and censorship. While some are legitimate claims, like copyright violations or privacy breaches, others are vague, politically motivated, or intended to silence dissent. For FOSS projects that have a global user base, itâs not always obvious how to respond. Complying too quickly can reinforce censorship practices; resisting without process can lead to full website shut downs, domain names being taken away (as in the US) or large and costly legal battles.&lt;/p&gt;&lt;p&gt;One strategy that helps balance this tension is radical transparency. Several projects we spoke with emphasized the importance of documenting what actions were taken and why, not just for accountability, but as a form of resistance. A well-known example is GitHubâs DMCA takedown policy (as of July 2025), which mandates compliance with valid takedown requests, but also posts each one publicly in their github/dmca repository. The result: potential abusers know their requests will face public scrutiny, which acts as a deterrent.&lt;/p&gt;&lt;p&gt;However, not all jurisdictions allow this kind of transparency. In India, for example, we were informed that it is often illegal to disclose that you have received a government request, even to the developer of the affected app. In contrast, in Russia, takedown requests can often be legally posted, though by doing so you may be putting yourself at risk for retaliation, additional takedown requests and legal troubles.&lt;/p&gt;&lt;p&gt;With that in mind, some best practices for FOSS projects include:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Publishing biannual transparency reports, even if redacted or aggregated.&lt;/item&gt;&lt;item&gt;Maintaining an internal log of all takedown activity, with public disclosure where legally possible.&lt;/item&gt;&lt;item&gt;Explaining the general reasons for content removals, who made the request, under what law, and what action was taken, unless legally prohibited.&lt;/item&gt;&lt;item&gt;Being explicit about what cannot be shared, and why.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Transparency wonât prevent all forms of censorship, but it can slow them down, raise awareness, and provide a record that strengthens the broader FOSS ecosystem.&lt;/p&gt;&lt;head rend="h2"&gt;What Weâre Doing at F-Droid&lt;/head&gt;&lt;p&gt;F-Droid is revising its own takedown policy, informed by:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Dutch law and EU regulations&lt;/item&gt;&lt;item&gt;The structural support provided by The Commons Conservancy&lt;/item&gt;&lt;item&gt;Practical lessons from long-standing FOSS organizations&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Our draft process includes:&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Written takedown submission request to legal@f-droid.org including the required information.:&lt;/item&gt;&lt;/list&gt;&lt;list rend="ul"&gt;&lt;item&gt;Identify the specific material in question (e.g. app name)&lt;/item&gt;&lt;item&gt;Include valid legal basis under applicable jurisdiction (e.g. copyright law, court order statutory basis)&lt;/item&gt;&lt;item&gt;Indicate jurisdiction in which the legal basis is claimed to apply&lt;/item&gt;&lt;item&gt;Include sufficient evidence of the alleged infringement (e.g. copyright certificate, ownership declaration)&lt;/item&gt;&lt;item&gt;Clearly state that the complaintant is authorized to act on behalf of the rights holder&lt;/item&gt;&lt;item&gt;Include full contact details and a verifiable identity (subject to exceptions, such as gag orders or whistleblower protection)&lt;/item&gt;&lt;/list&gt;&lt;list rend="ol"&gt;&lt;item&gt;Verification of jurisdiction and legal basis, including evidence&lt;/item&gt;&lt;item&gt;Developer notification and appeal procedures&lt;/item&gt;&lt;item&gt;Rejection of requests lacking documentation or legal authority may be rejected or ignored&lt;/item&gt;&lt;item&gt;Biannual transparency reports and public tracking of takedown requests&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Weâre also working to improve contributor education about potential exposure when contributing to F-Droid, document internal escalation paths, and ensure consistent handling of international claims.&lt;/p&gt;&lt;head rend="h2"&gt;Final Thoughts&lt;/head&gt;&lt;p&gt;Takedown requests are not going away in fact, theyâre becoming more frequent and more complex. But FOSS projects donât have to face them unprepared.&lt;/p&gt;&lt;p&gt;By building processes, establishing clear jurisdiction, and protecting individuals through structure and policy, we can handle these challenges with the seriousness they deserve without letting them derail our mission.&lt;/p&gt;&lt;head rend="h2"&gt;Legal Disclaimer&lt;/head&gt;&lt;p&gt;The content provided in this article is for informational purposes only and does not constitute legal advice. While we strive to provide accurate and up-to-date information, F-Droid makes no representations or warranties of any kind, express or implied, about the completeness, accuracy, or suitability of the information contained herein.&lt;/p&gt;&lt;p&gt;F-Droid is not a law firm and does not offer legal services. Any reliance you place on the information provided is strictly at your own risk. If you have questions about legal obligations, rights, or compliance, we strongly recommend consulting a qualified legal professional familiar with your jurisdiction.&lt;/p&gt;&lt;p&gt;F-Droid and its contributors disclaim all liability for any loss or damage arising from the use or misuse of this content.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45224421</guid></item><item><title>Why do browsers throttle JavaScript timers?</title><link>https://nolanlawson.com/2025/08/31/why-do-browsers-throttle-javascript-timers/</link><description>&lt;doc fingerprint="7f14db1028c649ff"&gt;
  &lt;main&gt;
    &lt;p&gt;Even if you’ve been doing JavaScript for a while, you might be surprised to learn that &lt;code&gt;setTimeout(0)&lt;/code&gt; is not really &lt;code&gt;setTimeout(0)&lt;/code&gt;. Instead, it could run 4 milliseconds later:&lt;/p&gt;
    &lt;quote&gt;const start = performance.now() setTimeout(() =&amp;gt; { // Likely 4ms console.log(performance.now() - start) }, 0)&lt;/quote&gt;
    &lt;p&gt;Nearly a decade ago when I was on the Microsoft Edge team, it was explained to me that browsers did this to avoid “abuse.” I.e. there are a lot of websites out there that spam &lt;code&gt;setTimeout&lt;/code&gt;, so to avoid draining the user’s battery or blocking interactivity, browsers set a special “clamped” minimum of 4ms.&lt;/p&gt;
    &lt;p&gt;This also explains why some browsers would bump the throttling for devices on battery power (16ms in the case of legacy Edge), or throttle even more aggressively for background tabs (1 second in Chrome!).&lt;/p&gt;
    &lt;p&gt;One question always vexed me, though: if &lt;code&gt;setTimeout&lt;/code&gt; was so abused, then why did browsers keep introducing new timers like &lt;code&gt;setImmediate&lt;/code&gt; (RIP), Promises, or even new fanciness like &lt;code&gt;scheduler.postTask()&lt;/code&gt;? If &lt;code&gt;setTimeout&lt;/code&gt; had to be nerfed, then wouldn’t these timers suffer the same fate eventually?&lt;/p&gt;
    &lt;p&gt;I wrote a long post about JavaScript timers back in 2018, but until recently I didn’t have a good reason to revisit this question. Then I was doing some work on &lt;code&gt;fake-indexeddb&lt;/code&gt;, which is a pure-JavaScript implementation of the IndexedDB API, and this question reared its head. As it turns out, IndexedDB wants to auto-commit transactions when there’s no outstanding work in the event loop – in other words, after all microtasks have finished, but before any tasks (can I cheekily say “macro-tasks”?) have started.&lt;/p&gt;
    &lt;p&gt;To accomplish this, &lt;code&gt;fake-indexeddb&lt;/code&gt; was using &lt;code&gt;setImmediate&lt;/code&gt; in Node.js (which shares some similarities with the legacy browser version) and &lt;code&gt;setTimeout&lt;/code&gt; in the browser. In Node, &lt;code&gt;setImmediate&lt;/code&gt; is kind of perfect, because it runs after microtasks but immediately before any other tasks, and without clamping. In the browser, though, &lt;code&gt;setTimeout&lt;/code&gt; is pretty sub-optimal: in one benchmark, I was seeing Chrome take 4.8 seconds for something that only took 300 milliseconds in Node (a 16x slowdown!).&lt;/p&gt;
    &lt;p&gt;Looking out at the timer landscape in 2025, though, it wasn’t obvious what to choose. Some options included:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;setImmediate&lt;/code&gt;– only supported in legacy Edge and IE, so that’s a no-go.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;MessageChannel.postMessage&lt;/code&gt;– this is the technique used by afterframe.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;window.postMessage&lt;/code&gt;– a nice idea, but kind of janky since it might interfere with other scripts on the page using the same API. This approach is used by the&lt;code&gt;setImmediate&lt;/code&gt;polyfill though.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;scheduler.postTask&lt;/code&gt;– if you read no further, this was the winner. But let’s explain why!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;To compare these options, I wrote a quick benchmark. A few important things about this benchmark:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;You have to run several iterations of &lt;code&gt;setTimeout&lt;/code&gt;(and friends) to really suss out the clamping. Technically, per the HTML specification, the 4ms clamping is only supposed to kick in after a&lt;code&gt;setTimeout&lt;/code&gt;has been nested (i.e. one&lt;code&gt;setTimeout&lt;/code&gt;calls another) 5 times.&lt;/item&gt;
      &lt;item&gt;I didn’t test every possible combination of 1) battery vs plugged in, 2) monitor refresh rates, 3) background vs foreground tabs, etc., even though I know all of these things can affect the clamping. I have a life, and although it’s fun to don the lab coat and run some experiments, I don’t want to spend my entire Saturday doing that.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;In any case, here are the numbers (in milliseconds, median of 101 iterations, on a 2021 16-inch MacBook Pro):&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Browser&lt;/cell&gt;
        &lt;cell role="head"&gt;
          &lt;code&gt;setTimeout&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell role="head"&gt;
          &lt;code&gt;MessageChannel&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell role="head"&gt;
          &lt;code&gt;window&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell role="head"&gt;
          &lt;code&gt;scheduler.postTask&lt;/code&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Chrome 139&lt;/cell&gt;
        &lt;cell&gt;4.2&lt;/cell&gt;
        &lt;cell&gt;0.05&lt;/cell&gt;
        &lt;cell&gt;0.03&lt;/cell&gt;
        &lt;cell&gt;0.00&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Firefox 142&lt;/cell&gt;
        &lt;cell&gt;4.72&lt;/cell&gt;
        &lt;cell&gt;0.02&lt;/cell&gt;
        &lt;cell&gt;0.01&lt;/cell&gt;
        &lt;cell&gt;0.01&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Safari 18.4&lt;/cell&gt;
        &lt;cell&gt;26.73&lt;/cell&gt;
        &lt;cell&gt;0.52&lt;/cell&gt;
        &lt;cell&gt;0.05&lt;/cell&gt;
        &lt;cell&gt;Not implemented&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Note: this benchmark was tricky to write! When I first wrote it, I used &lt;code&gt;Promise.all&lt;/code&gt; to run all the timers simultaneously, but this seemed to defeat Safari’s nesting heuristics, and made Firefox’s fire inconsistently. Now the benchmark runs each timer independently.&lt;/p&gt;
    &lt;p&gt;Don’t worry about the precise numbers too much: the point is that Chrome and Firefox clamp &lt;code&gt;setTimeout&lt;/code&gt; to 4ms, and the other three options are roughly equivalent. In Safari, interestingly, &lt;code&gt;setTimeout&lt;/code&gt; is even more heavily throttled, and &lt;code&gt;MessageChannel.postMessage&lt;/code&gt; is a tad slower than &lt;code&gt;window.postMessage&lt;/code&gt; (although &lt;code&gt;window.postMessage&lt;/code&gt; is still janky for the reasons listed above).&lt;/p&gt;
    &lt;p&gt;This experiment answered my immediate question: &lt;code&gt;fake-indexeddb&lt;/code&gt; should use &lt;code&gt;scheduler.postTask&lt;/code&gt; (which I prefer for its ergonomics) and fall back to either &lt;code&gt;MessageChannel.postMessage&lt;/code&gt; or &lt;code&gt;window.postMessage&lt;/code&gt;. (I did experiment with different priorities for &lt;code&gt;postTask&lt;/code&gt;, but they all performed almost identically. For &lt;code&gt;fake-indexeddb&lt;/code&gt;‘s use case, the default priority of &lt;code&gt;'user-visible'&lt;/code&gt; seemed most appropriate, and that’s what the benchmark uses.)&lt;/p&gt;
    &lt;p&gt;None of this answered my original question, though: why exactly do browsers bother to throttle &lt;code&gt;setTimeout&lt;/code&gt; if web developers can just use &lt;code&gt;scheduler.postTask&lt;/code&gt; or &lt;code&gt;MessageChannel&lt;/code&gt; instead? I asked my friend Todd Reifsteck, who was co-chair of the Web Performance Working Group back when a lot of these discussions about “interventions” were underway.&lt;/p&gt;
    &lt;p&gt;He said that there were effectively two camps: one camp felt that timers needed to be throttled to protect web devs from themselves, whereas the other camp felt that developers should “measure their own silliness,” and that any subtle throttling heuristics would just cause confusion. In short, it was the standard tradeoff in designing performance APIs: “some APIs are quick but come with footguns.”&lt;/p&gt;
    &lt;p&gt;This jives with my own intuitions on the topic. Browser interventions are usually put in place because web developers have either used too much of a good thing (e.g. &lt;code&gt;setTimeout&lt;/code&gt;), or were blithely unaware of better options (the touch listener controversy is a good example). In the end, the browser is a “user agent” acting on the user’s behalf, and the W3C’s priority of constituencies makes it clear that end-user needs always trump web developer needs.&lt;/p&gt;
    &lt;p&gt;That said, web developers often do want to do the right thing. (I consider this blog post an attempt in that direction.) We just don’t always have the tools to do it, so instead we grab whatever blunt instrument is nearby and start swinging. Giving us more control over tasks and scheduling could avoid the need to hammer away with &lt;code&gt;setTimeout&lt;/code&gt; and cause a mess that calls for an intervention.&lt;/p&gt;
    &lt;p&gt;My prediction is that &lt;code&gt;postTask&lt;/code&gt;/&lt;code&gt;postMessage&lt;/code&gt; will remain unthrottled for the time being. Out of Todd’s two “camps,” the very existence of the Scheduler API, which offers a whole slew of fine-grained tools for task scheduling, seems to point toward the “pro-control” camp as the one currently steering the ship. Although Todd sees the API more as a compromise between the two groups: yes, it offers a lot of control, but it also aligns with the browser’s actual rendering pipeline rather than random timeouts.&lt;/p&gt;
    &lt;p&gt;The pessimist in me wonders, though, if the API could still be abused – e.g. by carelessly using the &lt;code&gt;user-blocking&lt;/code&gt; priority everywhere. Perhaps in the future, some enterprising browser vendor will put their foot more firmly on the throttle (so to speak) and discover that it causes websites to be snappier, more responsive, and less battery-draining. If that happens, then we may see another round of interventions. (Maybe we’ll need a &lt;code&gt;scheduler2&lt;/code&gt; API to dig ourselves out of that mess!)&lt;/p&gt;
    &lt;p&gt;I’m not involved much in web standards anymore and can only speculate. For the time being, I’ll just do what most web devs do: choose whatever API accomplishes my goals today, and hope that browsers don’t change too much in the future. As long as we’re careful and don’t introduce too much “silliness,” I don’t think that’s a lot to ask.&lt;/p&gt;
    &lt;p&gt;Thanks to Todd Reifsteck for feedback on a draft of this post.&lt;/p&gt;
    &lt;p&gt;Note: everything I said about &lt;code&gt;setTimeout&lt;/code&gt; could also be said about &lt;code&gt;setInterval&lt;/code&gt;. From the browser’s perspective, these are nearly the same APIs.&lt;/p&gt;
    &lt;p&gt;Note: for what it’s worth, &lt;code&gt;fake-indexeddb&lt;/code&gt; is still falling back to &lt;code&gt;setTimeout&lt;/code&gt; rather than &lt;code&gt;MessageChannel&lt;/code&gt; or &lt;code&gt;window.postMessage&lt;/code&gt; in Safari. Despite my benchmarks above, I was only able to get &lt;code&gt;window.postMessage&lt;/code&gt; to outperform the other two in &lt;code&gt;fake-indexeddb&lt;/code&gt;‘s own benchmark – Safari seems to have some additional throttling for &lt;code&gt;MessageChannel&lt;/code&gt; that my standalone benchmark couldn’t suss out. And &lt;code&gt;window.postMessage&lt;/code&gt; still seems error-prone to me, so I’m reluctant to use it. Here is my benchmark for those curious.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45224542</guid></item><item><title>EU court rules nuclear energy is clean energy</title><link>https://www.weplanet.org/post/eu-court-rules-nuclear-energy-is-clean-energy</link><description>&lt;doc fingerprint="9b4f11649f0a6c9a"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;EU Court Rules Nuclear Energy is Clean Energy&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;WePlanet&lt;/item&gt;
      &lt;item&gt;5 minutes ago&lt;/item&gt;
      &lt;item&gt;3 min read&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;When I launched Dear Greenpeace with my fellow youth climate activists alongside WePlanet two years ago, I had no idea just how quickly the anti-nuclear dominoes would fall across Europe.&lt;/p&gt;
    &lt;p&gt;In 2023, and what seems like a lifetime ago, Austria launched their legal action against the European Commission for the inclusion of nuclear energy in the EU Sustainable Finance Taxonomy. At the time they were supported by a bulwark of EU countries and environmental NGOs that opposed nuclear energy. Honestly, it looked like they might win.&lt;/p&gt;
    &lt;p&gt;But today, that whole landscape has changed.&lt;/p&gt;
    &lt;p&gt;Germany, long a symbol of anti-nuclear politics, is beginning to shift. The nuclear phase-outs or bans in the Netherlands, Belgium, Switzerland, Denmark, and Italy are now history. Even Fridays for Future has quietened its opposition, and in some places, embraced nuclear power.&lt;/p&gt;
    &lt;p&gt;This moment matters.&lt;/p&gt;
    &lt;p&gt;It shows what’s possible when we stick to the science. The evidence only gets clearer by the day that nuclear energy has an extremely low environmental impact across its lifecycle, and strong regulations and safety culture ensure that it remains one of the safest forms of energy available to humanity.&lt;/p&gt;
    &lt;p&gt;The European Court of Justice has now fully dismissed Austria’s lawsuit. That ruling doesn’t just uphold nuclear energy’s place in EU green finance rules. It also signals a near-certain defeat for the ongoing Greenpeace case – the very lawsuit that inspired me to launch Dear Greenpeace in the first place.&lt;/p&gt;
    &lt;p&gt;But instead of learning from this, Greenpeace is doubling down. Martin Kaiser, Executive Director of Greenpeace Germany, called the court decision “a dark day for the climate”.&lt;/p&gt;
    &lt;p&gt;Let that sink in. The highest court in the EU just reaffirmed that nuclear energy meets the scientific and environmental standards to be included in sustainable finance, and Greenpeace still refuses to budge.&lt;/p&gt;
    &lt;p&gt;Meanwhile, the climate crisis gets worse. Global emissions are not falling fast enough. Billions of people still lack access to clean, reliable electricity. And we are forced to spend time defending proven solutions instead of scaling them.&lt;/p&gt;
    &lt;p&gt;It’s now up to the court whether we will get our time in court to outline the evidence in support of nuclear energy and the important role it can play in the global clean energy transition. Whether in court, on the streets, or in the halls of parliaments across the globe, we will be there to defend the science and ensure that nuclear power can spread the advantages of the modern world across the planet in a sustainable, reliable and dignified way.&lt;/p&gt;
    &lt;p&gt;Austria stands increasingly isolated among a handful of countries that still cling to their opposition to nuclear energy. Their defeat in this vital high stakes topic is a success not just for the nuclear movement, but for the global transition as a whole.&lt;/p&gt;
    &lt;p&gt;We have made real progress. Together, we’ve helped defend nuclear power in the EU, overturned outdated policies at the World Bank, and secured more technology-neutral language at the UN. These wins are not abstract. They open the door to real investment, real projects, and real emissions cuts.&lt;/p&gt;
    &lt;p&gt;But the work is not done.&lt;/p&gt;
    &lt;p&gt;We still need to overturn national nuclear bans, unlock more funding, and push democratic countries to support clean energy development abroad: especially where it is most needed to compete with Russia’s growing influence.&lt;/p&gt;
    &lt;p&gt;The fight will not be done until every single country in the world can boast a clean, reliable energy grid, ready to maintain a modern dignified standard of living, for everyone, everywhere.&lt;/p&gt;
    &lt;p&gt;This is a great success for the movement and it would not have been possible without the financial support, time and energy given by people like you.&lt;/p&gt;
    &lt;p&gt;In Solidarity, Ia Aanstoot&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45224967</guid></item><item><title>UTF-8 is a brilliant design</title><link>https://iamvishnu.com/posts/utf8-is-brilliant-design</link><description>&lt;doc fingerprint="a4bdbd10f83149ab"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;UTF-8 is a Brilliant Design&lt;/head&gt;
    &lt;p&gt;The first time I learned about UTF-8 encoding, I was fascinated by how well-thought and brilliantly it was designed to represent millions of characters from different languages and scripts, and still be backward compatible with ASCII.&lt;/p&gt;
    &lt;p&gt;Basically UTF-8 uses 32 bits and the old ASCII uses 7 bits, but UTF-8 is designed in such a way that:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Every ASCII encoded file is a valid UTF-8 file.&lt;/item&gt;
      &lt;item&gt;Every UTF-8 encoded file that has only ASCII characters is a valid ASCII file.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Designing a system that scales to millions of characters and still be compatible with the old systems that use just 128 characters is a brilliant design.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Note: If you are already aware of the UTF-8 encoding, you can explore the UTF-8 Playground utility that I built to visualize UTF-8 encoding.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h2"&gt;How Does UTF-8 Do It?&lt;/head&gt;
    &lt;p&gt;UTF-8 is a variable-width character encoding designed to represent every character in the Unicode character set, encompassing characters from most of the world's writing systems.&lt;/p&gt;
    &lt;p&gt;It encodes characters using one to four bytes.&lt;/p&gt;
    &lt;p&gt;The first 128 characters (&lt;code&gt;U+0000&lt;/code&gt; to &lt;code&gt;U+007F&lt;/code&gt;) are encoded with a single byte, ensuring backward compatibility with ASCII, and this is the reason why a file with only ASCII characters is a valid UTF-8 file.&lt;/p&gt;
    &lt;p&gt;Other characters require two, three, or four bytes. The leading bits of the first byte determine the total number of bytes that represents the current character. These bits follow one of four specific patterns, which indicate how many continuation bytes follow.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;1st byte Pattern&lt;/cell&gt;
        &lt;cell role="head"&gt;# of bytes used&lt;/cell&gt;
        &lt;cell role="head"&gt;Full byte sequence pattern&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;0xxxxxxx&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;0xxxxxxx&lt;p&gt;(This is basically a regular ASCII encoded byte)&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;110xxxxx&lt;/cell&gt;
        &lt;cell&gt;2&lt;/cell&gt;
        &lt;cell&gt;110xxxxx 10xxxxxx&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;1110xxxx&lt;/cell&gt;
        &lt;cell&gt;3&lt;/cell&gt;
        &lt;cell&gt;1110xxxx 10xxxxxx 10xxxxxx&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;11110xxx&lt;/cell&gt;
        &lt;cell&gt;4&lt;/cell&gt;
        &lt;cell&gt;11110xxx 10xxxxxx 10xxxxxx 10xxxxxx&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Notice that the second, third, and fourth bytes in a multi-byte sequence always start with 10. This indicates that these bytes are continuation bytes, following the main byte.&lt;/p&gt;
    &lt;p&gt;The remaining bits in the main byte, along with the bits in the continuation bytes, are combined to form the character's code point. A code point serves as a unique identifier for a character in the Unicode character set. A code point is typically represented in hexadecimal format, prefixed with "U+". For example, the code point for the character "A" is &lt;code&gt;U+0041&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;So here is how a software determines the character from the UTF-8 encoded bytes:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Read a byte. If it starts with &lt;code&gt;0&lt;/code&gt;, it's a single-byte character (ASCII). Show the character represented by the remaiing 7 bits on the screen. Continue with the next byte.&lt;/item&gt;
      &lt;item&gt;If the byte didn't start with a &lt;code&gt;0&lt;/code&gt;, then:&lt;list rend="ul"&gt;&lt;item&gt;If it starts with &lt;code&gt;110&lt;/code&gt;, it's a two-byte character, so read the next byte as well.&lt;/item&gt;&lt;item&gt;If it starts with &lt;code&gt;1110&lt;/code&gt;, it's a three-byte character, so read the next two bytes.&lt;/item&gt;&lt;item&gt;If it starts with &lt;code&gt;11110&lt;/code&gt;, it's a four-byte character, so read the next three bytes.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;If it starts with &lt;/item&gt;
      &lt;item&gt;Once the number of bytes are determined, read all the remaining bits except the leading bits, and find the binary value (aka. code point) of the character.&lt;/item&gt;
      &lt;item&gt;Look up the code point in the Unicode character set to find the corresponding character and display it on the screen.&lt;/item&gt;
      &lt;item&gt;Read the next byte and repeat the process.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Example: Hindi Letter "अ" (open in UTF-8 Playground)&lt;/head&gt;
    &lt;p&gt;The Hindi letter "अ" (officially "Devanagari Letter A") is represented in UTF-8 as:&lt;/p&gt;
    &lt;p&gt;11100000 10100100 10000101 Here:&lt;/p&gt;
    &lt;p&gt;The first byte 11100000 indicates that the character is encoded using 3 bytes.&lt;/p&gt;
    &lt;p&gt;The remaining bits of the three bytes: xxxx0000 xx100100 xx000101 are combined to form the binary sequence 00001001 00000101 (&lt;code&gt;0x0905&lt;/code&gt; in hexadecimal). This is the code point of the character, represented as &lt;code&gt;U+0905&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;The code point &lt;code&gt;U+0905&lt;/code&gt; (see official chart) represents the Hindi letter "अ" in the Unicode character set.&lt;/p&gt;
    &lt;head rend="h2"&gt;Example Text Files&lt;/head&gt;
    &lt;p&gt;Now that we understood the design of UTF-8, let's look at a file that contains the following text:&lt;/p&gt;
    &lt;head rend="h3"&gt;1. Text file contains: &lt;code&gt;Hey👋 Buddy&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;The text &lt;code&gt;Hey👋 Buddy&lt;/code&gt; has both English characters and an emoji character on it. The text file with this text saved on the disk will have the following 13 bytes in it:&lt;/p&gt;
    &lt;p&gt;01001000 01100101 01111001 11110000 10011111 10010001 10001011 00100000 01000010 01110101 01100100 01100100 01111001&lt;/p&gt;
    &lt;p&gt;Let's evaluate this file byte-by-byte following the UTF-8 decoding rules:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Byte&lt;/cell&gt;
        &lt;cell role="head"&gt;Explanation&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01001000&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1001000&lt;/code&gt; represent the letter 'H'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01100101&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1100101&lt;/code&gt; represent the letter 'e'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01111001&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1111001&lt;/code&gt; represent the letter 'y'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;11110000&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;11110&lt;/code&gt;, indicating it's the first byte of a four-byte character.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;10011111&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;10&lt;/code&gt;, indicating it's a continuation byte.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;10010001&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;10&lt;/code&gt;, indicating it's a continuation byte.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;10001011&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;10&lt;/code&gt;, indicating it's a continuation byte.&lt;p&gt;The bits from these four bytes (excluding the leading bits) combine to form the binary sequence 00001 11110100 01001011, which is&lt;/p&gt;&lt;code&gt;1F44B&lt;/code&gt; in hexadecimal, corresponds to the code point &lt;code&gt;U+1F44B&lt;/code&gt;. This code point represents the waving hand emoji "👋" in the Unicode character set (open in playground).&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;00100000&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;0100000&lt;/code&gt; represent a whitespace character. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01000010&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1000010&lt;/code&gt; represent the letter 'B'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01110101&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1110101&lt;/code&gt; represent the letter 'u'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01100100&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1100100&lt;/code&gt; represent the letter 'd'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01100100&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1100100&lt;/code&gt; represent the letter 'd'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;01111001&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1111001&lt;/code&gt; represent the letter 'y'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Now this is a valid UTF-8 file, but it doesn't have to be "backward compatible" with ASCII because it contains a non-ASCII character (the emoji). Next let's create a file that contains only ASCII characters.&lt;/p&gt;
    &lt;head rend="h3"&gt;2. Text file contains: &lt;code&gt;Hey Buddy&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;The text file doesn't have any non-ASCII characters. The file saved on the disk has the following 9 bytes in it:&lt;/p&gt;
    &lt;p&gt;01001000 01100101 01111001 00100000 01000010 01110101 01100100 01100100 01111001&lt;/p&gt;
    &lt;p&gt;Let's evaluate this file byte-by-byte following the UTF-8 decoding rules:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Byte&lt;/cell&gt;
        &lt;cell role="head"&gt;Explanation&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01001000&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1001000&lt;/code&gt; represent the letter 'H'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01100101&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1100101&lt;/code&gt; represent the letter 'e'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01111001&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1111001&lt;/code&gt; represent the letter 'y'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;00100000&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;0100000&lt;/code&gt; represent a whitespace character. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01000010&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1000010&lt;/code&gt; represent the letter 'B'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01110101&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1110101&lt;/code&gt; represent the letter 'u'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01100100&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1100100&lt;/code&gt; represent the letter 'd'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;01100100&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1100100&lt;/code&gt; represent the letter 'd'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;01111001&lt;/cell&gt;
        &lt;cell&gt;Starts with &lt;code&gt;0&lt;/code&gt;, so it's a single-byte ASCII character. The remaining bits &lt;code&gt;1111001&lt;/code&gt; represent the letter 'y'. (open in playground)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;So this is a valid UTF-8 file, and it is also a valid ASCII file. The bytes in this file follows both the UTF-8 and ASCII encoding rules. This is how UTF-8 is designed to be backward compatible with ASCII.&lt;/p&gt;
    &lt;head rend="h2"&gt;Other Encodings&lt;/head&gt;
    &lt;p&gt;I did a quick research on any other encoding that are backward compatible with ASCII, and there are a few, but they are not as popular as UTF-8, for example GB 18030 (a Chinese government standard). Another one is the ISO/IEC 8859 encodings are single-byte encodings that extend ASCII to include additional characters, but they are limited to 256 characters.&lt;/p&gt;
    &lt;p&gt;The siblings of UTF-8, like UTF-16 and UTF-32, are not backward compatible with ASCII. For example, the letter 'A' in UTF-16 is represented as: &lt;code&gt;00 41&lt;/code&gt; (two bytes), while in UTF-32 it is represented as: &lt;code&gt;00 00 00 41&lt;/code&gt; (four bytes).&lt;/p&gt;
    &lt;head rend="h2"&gt;Bonus: UTF-8 Playground&lt;/head&gt;
    &lt;p&gt;When I was exploring the UTF-8 encoding, I couldn't find any good tool to interactively visualize how UTF-8 encoding works. So I built UTF-8 Playground to visualize and play around with UTF-8 encoding. Give it a try!.&lt;/p&gt;
    &lt;p&gt;Read the discussion on this on Hacker News.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45225098</guid></item><item><title>Polylaminin, a drug considered capable of reversing spinal cord injury</title><link>https://www1.folha.uol.com.br/internacional/en/scienceandhealth/2025/09/groundbreaking-brazilian-drug-considered-capable-of-reversing-spinal-cord-injury-presented-in-sao-paulo.shtml</link><description>&lt;doc fingerprint="b9681857224417da"&gt;
  &lt;main&gt;
    &lt;p&gt;From a tender wrapper of human life, the placenta, comes the extraction of a protein that points to a solution for something that, until now, science had no clear path toâand never one so celebrated: restoring the spinal cord in people who suffered injuries and lost body movement.&lt;/p&gt;
    &lt;p&gt;Brazilian researcher Tatiana Coelho de Sampaio, PhD professor at the Federal University of Rio de Janeiro, has quietly worked with a team of biologists for the past 25 years on the repairing and multiplying power of the protein laminin, which acts on the nervous system.&lt;/p&gt;
    &lt;p&gt;The studies ultimately produced the current drug polylaminin, a world first, presented on Tuesday (9) by CristÃ¡lia laboratory as capable of regenerating the spinal cord in people who suffered organ rupture in accidents of various kinds, leading to paraplegiaâparalysis of the lower limbsâor quadriplegiaâparalysis of both lower and upper limbs.&lt;/p&gt;
    &lt;p&gt;During the experimental phase of the antidote, which is applied directly to the spine, patients experienced full recovery of their conditions, with no aftereffects and resuming a routine without restrictions.&lt;/p&gt;
    &lt;p&gt;Read the article in the original language&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45225506</guid></item><item><title>Show HN: I made a small site to share text &amp; files. Free, no ads or registration</title><link>https://www.dum.pt/</link><description>&lt;doc fingerprint="d7e5c1cf6e705c76"&gt;
  &lt;main&gt;
    &lt;p&gt;Share Privacy Policy&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45226277</guid></item><item><title>Emacs: A Paradigm Shift</title><link>https://edoput.it/2025/04/16/emacs-paradigm-shift.html</link><description>&lt;doc fingerprint="8623c855a823bab8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Emacs: a paradigm shift&lt;/head&gt;
    &lt;p&gt;Recently I read this beginners guide to extend Emacs. The guide is perfect for starting out with elisp and it shows a lot of care in teaching how to interact with Emacs.&lt;/p&gt;
    &lt;p&gt;To me, the most important bit though is this one, from the section aptly named Emacs Wants You to Extend It.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;I havenât written plugins for other editors extensively, but I can tell you this: emacs doesnât just make deep customization available, but it actively encourages you to make an absolute customization messes masterpieces. Core editor functions arenât just documented, but often include tidbits about âyou probably want to see this other variableâ or âhereâs how you should use thisâ.&lt;/p&gt;
      &lt;p&gt;Not only that, but emacs happily hands you functions shaped like nuclear warheads like advice-add (that let you override any function) that can absolutely obliterate your editor if you hold it the wrong way. Of course, this also grants you unlimited power.&lt;/p&gt;
      &lt;p&gt;Remember that emacs is designed to be torn apart and rearranged.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This is the core bit of the argument. Emacs, as a system, wants you to extend it and it gives you all the means to do so. This is in contrast with systems that can be extended through scripting and instead donât give you all the means to do so!&lt;/p&gt;
    &lt;p&gt;I think the tutorial is a fantastic example of doing things right. There is a well-thought example, a constructive approach where the solution grows to a full package.&lt;/p&gt;
    &lt;p&gt;This is problematic. You may get the impression that extending Emacs is only possible if you do things right and that is definitely not true.&lt;/p&gt;
    &lt;p&gt;To make my point I want to walk you through an example. I will show you how I used standard Emacs extension-points to extend org-mode to sort my reading lists automatically.&lt;/p&gt;
    &lt;head rend="h2"&gt;What do I want?&lt;/head&gt;
    &lt;p&gt;The behavior I want is that when I save an org file the entries are ordered automatically. I keep a timeline of the papers I am reading and it is annoying to keep them kind of ordered.&lt;/p&gt;
    &lt;p&gt;This is the content of an example buffer.&lt;/p&gt;
    &lt;p&gt;When I add a paper to my reading list I run &lt;code&gt;org-sort-entries&lt;/code&gt; and
interactively select to order the entries by the value in the property
&lt;code&gt;year&lt;/code&gt;. Initally this was nice to have but now itâs just annoying that
I have to keep doing it. Letâs extend org-mode so that this is done automatically.&lt;/p&gt;
    &lt;head rend="h2"&gt;A simple solution&lt;/head&gt;
    &lt;p&gt;The first step is to automate the interactive part. Lucky for me this is easy as &lt;code&gt;org-sort-entries&lt;/code&gt; is both a function and a command. I can call it in a
script just as I can run it as a command.&lt;/p&gt;
    &lt;p&gt;This solves one part of the problem. Letâs solve the other one, automatically calling &lt;code&gt;org-sort-run&lt;/code&gt; whenever an org-mode buffer is saved.&lt;/p&gt;
    &lt;p&gt;Emacs already has support for this use-case through the use of hooks. We can run &lt;code&gt;org-sort-run&lt;/code&gt; all the times we want to save a buffer.&lt;/p&gt;
    &lt;p&gt;These two together solve the problem but the solution presented is âjust more codeâ. We tapped into the hook extension point but this would be possible in any scriptable system that exposes well-defined extension points such as hooks and commands.&lt;/p&gt;
    &lt;head rend="h2"&gt;Leveraging Emacsâ extensibility to extend org-mode&lt;/head&gt;
    &lt;p&gt;I want to show that even if something is not thought with extensibility in mind Emacs allow us to extend it. Most importantly, while we want to extend org-modeâs behavior we would like this not to be an extension to org-modeâs code.&lt;/p&gt;
    &lt;p&gt;Hereâs the updated problem statement. Have the buffer be automatically sorted and have the sorting criteria be in the buffer itself. We will specify the sorting as a in-buffer setting and use Emacs to support this never thought before org-mode behavior.&lt;/p&gt;
    &lt;p&gt;Our example buffer changes to the following.&lt;/p&gt;
    &lt;p&gt;The hard part of this is to find how org-mode reads in-buffer settings from the header. A M-x find-library later we are in orgâs sources.&lt;/p&gt;
    &lt;p&gt;Searching for &lt;code&gt;+STARTUP&lt;/code&gt; (Ctrl+s +STARTUP), one of the
supported settings, leads us to &lt;code&gt;org-startup-folded&lt;/code&gt; and that in turn
(Ctrl+s org-startup-folded) leads us to &lt;code&gt;org-startup-options&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;org-startup-options&lt;/code&gt; is the used by (again Ctrl+s org-startup-option)
&lt;code&gt;org-set-regexps-and-options&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;While the documentation for this function is not very convincing, its code does make sense for what we are after. I copied it here for reference.&lt;/p&gt;
    &lt;p&gt;Unfortunately this function calls &lt;code&gt;org-collect-keyword&lt;/code&gt; with a list that we cannot
touch. There is no custom variable to set to pass our own keyword.&lt;/p&gt;
    &lt;p&gt;If this was a ânormal programming environmentâ we would make our changes to this function body and forever maintain a fork of org-mode. As this is elisp instead we have choices.&lt;/p&gt;
    &lt;p&gt;I think the best choice is to use &lt;code&gt;advice-add&lt;/code&gt; and have Emacs call our
advice code every time &lt;code&gt;org-set-regexps-and-options&lt;/code&gt; is called. We will copy
what we need from the function body but that will be all.&lt;/p&gt;
    &lt;p&gt;This is what I ended up with.&lt;/p&gt;
    &lt;p&gt;We keep a buffer-local variable &lt;code&gt;org-sort-option&lt;/code&gt; around to store the
property name read from &lt;code&gt;#+SORT: property-name&lt;/code&gt;. This variable is initially
&lt;code&gt;nil&lt;/code&gt; and will be set from the property name in &lt;code&gt;#+SORT: property-name&lt;/code&gt;. To do so
we have a function &lt;code&gt;org-sort-set-option&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;But when to call &lt;code&gt;org-sort-set-option&lt;/code&gt;? The easy way out is to have Emacs call it whenever
&lt;code&gt;org-set-regexps-and-options&lt;/code&gt; is called on a file visit. To achieve this we
tap into &lt;code&gt;advice-add&lt;/code&gt; and ask Emacs to run &lt;code&gt;org-sort-set-option&lt;/code&gt; after
&lt;code&gt;org-sort-regexps-and-options&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;We have now succesfully interposed ourselves in the control flow of the org-mode library.&lt;/p&gt;
    &lt;p&gt;Org-mode did not provide any interposition point for us, there is no thought ahead etension-point or configuration variable we can use to achieve our goal an yet here we are with a sorted buffer.&lt;/p&gt;
    &lt;p&gt;We succeeded in our effort because Emacs wants you to extend it and it gives you all the means to do so.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusions&lt;/head&gt;
    &lt;p&gt;I have made a horrible hack and it works. I have learnt nothing about how org-mode works or Emacsâ file-visiting extension-points.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45226639</guid></item><item><title>Proton Mail suspended journalist accounts at request of cybersecurity agency</title><link>https://theintercept.com/2025/09/12/proton-mail-journalist-accounts-suspended/</link><description>&lt;doc fingerprint="efa383d70aa14e47"&gt;
  &lt;main&gt;
    &lt;p&gt;The company behind the Proton Mail email service, Proton, describes itself as a “neutral and safe haven for your personal data, committed to defending your freedom.”&lt;/p&gt;
    &lt;p&gt;But last month, Proton disabled email accounts belonging to journalists reporting on security breaches of various South Korean government computer systems following a complaint by an unspecified cybersecurity agency. After a public outcry, and multiple weeks, the journalists’ accounts were eventually reinstated — but the reporters and editors involved still want answers on how and why Proton decided to shut down the accounts in the first place.&lt;/p&gt;
    &lt;p&gt;Martin Shelton, deputy director of digital security at the Freedom of the Press Foundation, highlighted that numerous newsrooms use Proton’s services as alternatives to something like Gmail “specifically to avoid situations like this,” pointing out that “While it’s good to see that Proton is reconsidering account suspensions, journalists are among the users who need these and similar tools most.” Newsrooms like The Intercept, the Boston Globe, and the Tampa Bay Times all rely on Proton Mail for emailed tip submissions.&lt;/p&gt;
    &lt;p&gt;Shelton noted that perhaps Proton should “prioritize responding to journalists about account suspensions privately, rather than when they go viral.”&lt;/p&gt;
    &lt;p&gt;On Reddit, Proton’s official account stated that “Proton did not knowingly block journalists’ email accounts” and that the “situation has unfortunately been blown out of proportion.” Proton did not respond to The Intercept’s request for comment.&lt;/p&gt;
    &lt;p&gt;The two journalists whose accounts were disabled were working on an article published in the August issue of the long-running hacker zine Phrack. The story described how a sophisticated hacking operation — what’s known in cybersecurity parlance as an APT, or advanced persistent threat — had wormed its way into a number of South Korean computer networks, including those of the Ministry of Foreign Affairs and the military Defense Counterintelligence Command, or DCC.&lt;/p&gt;
    &lt;p&gt;The journalists, who published their story under the names Saber and cyb0rg, describe the hack as being consistent with the work of Kimsuky, a notorious North Korean state-backed APT sanctioned by the U.S. Treasury Department in 2023.&lt;/p&gt;
    &lt;p&gt;As they pieced the story together, emails viewed by The Intercept show that the authors followed cybersecurity best practices and conducted what’s known as responsible disclosure: notifying affected parties that a vulnerability has been discovered in their systems prior to publicizing the incident.&lt;/p&gt;
    &lt;p&gt;Saber and cyb0rg created a dedicated Proton Mail account to coordinate the responsible disclosures, then proceeded to notify the impacted parties, including the Ministry of Foreign Affairs and the DCC, and also notified South Korean cybersecurity organizations like the Korea Internet and Security Agency, and KrCERT/CC, the state-sponsored Computer Emergency Response Team. According to emails viewed by The Intercept, KrCERT wrote back to the authors, thanking them for their disclosure.&lt;/p&gt;
    &lt;p&gt;A note on cybersecurity jargon: CERTs are agencies consisting of cybersecurity experts specializing in dealing with and responding to security incidents. CERTs exist in over 70 countries — with some countries having multiple CERTs each specializing in a particular field such as the financial sector — and may be government-sponsored or private organizations. They adhere to a set of formal technical standards, such as being expected to react to reported cybersecurity threats and security incidents. A high-profile example of a CERT agency in the U.S. is the Cybersecurity and Infrastructure Agency, which has recently been gutted by the Trump administration.&lt;/p&gt;
    &lt;p&gt;A week after the print issue of Phrack came out, and a few days before the digital version was released, Saber and cyb0rg found that the Proton account they had set up for the responsible disclosure notifications had been suspended. A day later, Saber discovered that his personal Proton Mail account had also been suspended. Phrack posted a timeline of the account suspensions at the top of the published article, and later highlighted the timeline in a viral social media post. Both accounts were suspended owing to an unspecified “potential policy violation,” according to screenshots of account login attempts reviewed by The Intercept.&lt;/p&gt;
    &lt;p&gt;The suspension notice instructed the authors to fill out Proton’s abuse appeals form if they believed the suspension was in error. Saber did so, and received a reply from a member of Proton Mail’s Abuse Team who went by the name Dante.&lt;/p&gt;
    &lt;p&gt;In an email viewed by The Intercept, Dante told Saber that their account “has been disabled as a result of a direct connection to an account that was taken down due to violations of our terms and conditions while being used in a malicious manner.” Dante also provided a link to Proton’s terms of service, going on to state, “We have clearly indicated that any account used for unauthorized activities, will be sanctioned accordingly.” The response concluded by stating, “We consider that allowing access to your account will cause further damage to our service, therefore we will keep the account suspended.”&lt;/p&gt;
    &lt;p&gt;On August 22, a Phrack editors reached out to Proton, writing that no hacked data was passed through the suspended email accounts, and asked if the account suspension incident could be deescalated. After receiving no response from Proton, the editor sent a follow-up email on September 6. Proton once again did not reply to the email.&lt;/p&gt;
    &lt;p&gt;On September 9, the official Phrack X account made a post asking Proton’s official account asking why Proton was “cancelling journalists and ghosting us,” adding: “need help calibrating your moral compass?” The post quickly went viral, garnering over 150,000 views.&lt;/p&gt;
    &lt;p&gt;Proton’s official account replied the following day, stating that Proton had been “alerted by a CERT that certain accounts were being misused by hackers in violation of Proton’s Terms of Service. This led to a cluster of accounts being disabled. Our team is now reviewing these cases individually to determine if any can be restored.” Proton then stated that they “stand with journalists” but “cannot see the content of accounts and therefore cannot always know when anti-abuse measures may inadvertently affect legitimate activism.”&lt;/p&gt;
    &lt;p&gt;Proton did not publicly specify which CERT had alerted them, and didn’t answer The Intercept’s request for the name of the specific CERT which had sent the alert. KrCERT also did not reply to The Intercept’s question about whether they were the CERT that had sent the alert to Proton.&lt;/p&gt;
    &lt;p&gt;Later in the day, Proton’s founder and CEO Andy Yen posted on X that the two accounts had been reinstated. Neither Yen nor Proton explained why the accounts had been reinstated, whether they had been found to not violate the terms of service after all, why had they been suspended in the first place, or why a member of the Proton Abuse Team reiterated that the accounts had violated the terms of service during Saber’s appeals process.&lt;/p&gt;
    &lt;p&gt;Phrack noted that the account suspensions created a “real impact to the author. The author was unable to answer media requests about the article.” The co-authors, Phrack pointed out, were also in the midst of the responsible disclosure process and working together with the various affected South Korean organizations to help fix their systems. “All this was denied and ruined by Proton,” Phrack stated.&lt;/p&gt;
    &lt;p&gt;Phrack editors said that the incident leaves them “concerned what this means to other whistleblowers or journalists. The community needs assurance that Proton does not disable accounts unless Proton has a court order or the crime (or ToS violation) is apparent.”&lt;/p&gt;
    &lt;p&gt;IT’S EVEN WORSE THAN WE THOUGHT.&lt;/p&gt;
    &lt;p&gt;What we’re seeing right now from Donald Trump is a full-on authoritarian takeover of the U.S. government.&lt;/p&gt;
    &lt;p&gt;This is not hyperbole.&lt;/p&gt;
    &lt;p&gt;Court orders are being ignored. MAGA loyalists have been put in charge of the military and federal law enforcement agencies. The Department of Government Efficiency has stripped Congress of its power of the purse. News outlets that challenge Trump have been banished or put under investigation.&lt;/p&gt;
    &lt;p&gt;Yet far too many are still covering Trump’s assault on democracy like politics as usual, with flattering headlines describing Trump as “unconventional,” “testing the boundaries,” and “aggressively flexing power.”&lt;/p&gt;
    &lt;p&gt;The Intercept has long covered authoritarian governments, billionaire oligarchs, and backsliding democracies around the world. We understand the challenge we face in Trump and the vital importance of press freedom in defending democracy.&lt;/p&gt;
    &lt;head rend="h2"&gt;We’re independent of corporate interests. Will you help us?&lt;/head&gt;
    &lt;head rend="h2"&gt;Latest Stories&lt;/head&gt;
    &lt;head rend="h3"&gt;China Didn’t Want You to See This Video of Xi and Putin. So Reuters Deleted It.&lt;/head&gt;
    &lt;p&gt;Following a copyright takedown request, Reuters removed a hot mic video of Putin and Xi discussing life extension and immortality.&lt;/p&gt;
    &lt;head rend="h3"&gt;Alex Karp Insists Palantir Doesn’t Spy on Americans. Here’s What He’s Not Saying.&lt;/head&gt;
    &lt;p&gt;Documents from Edward Snowden published by The Intercept in 2017 show the NSA’s use of Palantir technology.&lt;/p&gt;
    &lt;p&gt;Israel’s War on Gaza&lt;/p&gt;
    &lt;head rend="h3"&gt;Gaza Aid Security Contractor Hired Members of “Islamophobic Hate Group” Biker Club, Dem Rep Says&lt;/head&gt;
    &lt;p&gt;At least 10 members of the Infidels worked in Gaza for GHF’s security contractor, the BBC reported, with seven in oversight roles.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45226903</guid></item><item><title>Show HN: Aris – a free AI-powered answer engine for kids</title><link>https://www.aris.chat</link><description>&lt;doc fingerprint="d24af2affe8d7e07"&gt;
  &lt;main&gt;
    &lt;p&gt;New Home Sign In Just ask Aris.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45227134</guid></item><item><title>FFglitch, FFmpeg fork for glitch arch</title><link>https://ffglitch.org/gallery/</link><description>&lt;doc fingerprint="e6873f908bba35f1"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Gallery&lt;/head&gt;
    &lt;p&gt;There are some artists out there doing some amazing work using FFglitch.&lt;/p&gt;
    &lt;p&gt;I put this page up so that I donât have to go hunting for examples every time I want to show someone what can be done with FFglitch.&lt;/p&gt;
    &lt;p&gt;Thomas Collet has a lot of work using FFglitch on vimeo, instagram, and reddit.&lt;/p&gt;
    &lt;p&gt;A bunch more from Thomas:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;https://vimeo.com/366067869&lt;/item&gt;
      &lt;item&gt;https://vimeo.com/363105562&lt;/item&gt;
      &lt;item&gt;https://vimeo.com/323235580&lt;/item&gt;
      &lt;item&gt;https://www.reddit.com/r/glitch_art/comments/b9yfxc/study_on_crowd_movements/&lt;/item&gt;
      &lt;item&gt;https://www.reddit.com/r/brokengifs/comments/grpwn4/tripping_in_manhattan/&lt;/item&gt;
      &lt;item&gt;https://www.reddit.com/r/woahdude/comments/bg176f/i_went_to_ireland_filmed_the_ocean_and_glitched_it/&lt;/item&gt;
      &lt;item&gt;https://www.reddit.com/r/woahdude/comments/ballm7/when_the_world_is_slowly_but_surely_falling_appart/&lt;/item&gt;
      &lt;item&gt;https://www.reddit.com/r/glitch_art/comments/fhpwgp/falling_appart/&lt;/item&gt;
      &lt;item&gt;https://www.reddit.com/r/glitch_art/comments/hxk6r1/when_it_kicks_in_the_middle_of_time_square/&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Kaspar Ravel wrote a blog post about a collaboration he did with Thomas Collet which resulted in this gem:&lt;/p&gt;
    &lt;p&gt;Hereâs the blog post: https://www.kaspar.wtf/blog/encoding-the-game-of-life-in-datamosh&lt;/p&gt;
    &lt;p&gt;And the post on reddit: https://www.reddit.com/r/brokengifs/comments/e25f6b/want_to_see_a_magic_trick/&lt;/p&gt;
    &lt;p&gt;glit_chbee (turn the volume up and enjoy the ride):&lt;/p&gt;
    &lt;p&gt;Ben Cooper made this clip by using mainly avidemux, tomato.py, and FFglitch.&lt;/p&gt;
    &lt;p&gt;Jo Grys has posted some videos on Facebook:&lt;/p&gt;
    &lt;p&gt;There are more if you search for #ffglitch on Facebook:&lt;/p&gt;
    &lt;p&gt;And some more random clips I found spread around the interwebz:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45227212</guid></item></channel></rss>