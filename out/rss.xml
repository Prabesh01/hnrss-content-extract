<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Fri, 10 Oct 2025 11:31:54 +0000</lastBuildDate><item><title>Show HN: I built a web framework in C</title><link>https://github.com/ashtonjamesd/lavandula</link><description>&lt;doc fingerprint="2f38f151ffefdcd8"&gt;
  &lt;main&gt;
    &lt;p&gt;Lavandula is a lightweight, fast, and intuitive C web framework designed for building modern web applications quickly. It focuses on simplicity, performance, and productivity, providing all the essentials without the bloat of heavier frameworks.&lt;/p&gt;
    &lt;code&gt;#include "lavandula.h" 

// define a route for your app
appRoute(home) {
  return ok("Hello, World");
}

int main() {
  // initialise your app
  App app = createApp();

  // register a route in your app
  get(&amp;amp;app, "/home", home);

  // run the app
  runApp(&amp;amp;app);
}&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Controller and routing system&lt;/item&gt;
      &lt;item&gt;HTTP endpoint support (GET, POST, etc)&lt;/item&gt;
      &lt;item&gt;Controller local/global middleware pipeline&lt;/item&gt;
      &lt;item&gt;Minimal dependencies (pure C)&lt;/item&gt;
      &lt;item&gt;Quick project scaffolding via the CLI&lt;/item&gt;
      &lt;item&gt;Built-in unit testing framework&lt;/item&gt;
      &lt;item&gt;Environment variable support&lt;/item&gt;
      &lt;item&gt;Built-in logging&lt;/item&gt;
      &lt;item&gt;SQLite integration&lt;/item&gt;
      &lt;item&gt;Built-in JSON library&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;HTTP JSON body parsing&lt;/item&gt;
      &lt;item&gt;Session cookies&lt;/item&gt;
      &lt;item&gt;CORS policy configuration&lt;/item&gt;
      &lt;item&gt;Lavender ORM&lt;/item&gt;
      &lt;item&gt;Embedded Lavandula (ELA) HTML templating engine&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Rate Limiting&lt;/item&gt;
      &lt;item&gt;Static file serving&lt;/item&gt;
      &lt;item&gt;PostgreSL, MySQL integrations, etc&lt;/item&gt;
      &lt;item&gt;Potential dependency injection framework&lt;/item&gt;
      &lt;item&gt;Route/Available endpoint listing&lt;/item&gt;
      &lt;item&gt;JSON model and function scaffolding &lt;list rend="ul"&gt;&lt;item&gt;lavu model User name:string age:int&lt;/item&gt;&lt;item&gt;generates User struct, JSON serialization, CRUD endpoints in user_controller.c&lt;/item&gt;&lt;item&gt;URL parameter parsing and routing&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;To install Lavandula, follow these setps.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Clone the repository&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;git clone https://github.com/ashtonjamesd/lavandula.git
cd lavandula&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Run the install script&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;./install.sh&lt;/code&gt;
    &lt;p&gt;You should see the following:&lt;/p&gt;
    &lt;code&gt;[SUCCESS] 🎉 Lavandula installation completed!

Quick Start:
 lavu new my-project # Create a new project
 cd my-project
 lavu run # Run your project

Documentation:
 GitHub: https://github.com/ashtonjamesd/lavandula&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Finish&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You should now be able to run the Lavu CLI tool. Refer to &lt;code&gt;api.md&lt;/code&gt; for how to use Lavu.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Create a new project&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;lavu new myProject
&lt;/code&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;code&gt;Setting up Lavandula project 'myProject'...

-&amp;gt; Created myProject/lavandula.yml
-&amp;gt; Created myProject/app/app.c
-&amp;gt; Created myProject/app/controllers/home.c
-&amp;gt; Created myProject/app/routes.c
-&amp;gt; Created myProject/makefile
-&amp;gt; Created myProject/tests/tests.c

🎉 Lavandula project 'myProject' setup finished successfully!

Next steps:
  1. cd myProject
  2. lavu run
&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Run&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;lavu run
&lt;/code&gt;
    &lt;p&gt;Your application will run on http://localhost:3000/.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Read the docs&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Contributions are welcome. Feel free to submit pull requests or open issues for feature requests or bugs.&lt;/p&gt;
    &lt;p&gt;Some things that probably need looking at are:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;memory leaks&lt;/item&gt;
      &lt;item&gt;outdated and unfinished documentation (API changes warrant a docs update)&lt;/item&gt;
      &lt;item&gt;The JSON library does not currently support nested lists&lt;/item&gt;
      &lt;item&gt;Some tests need to be written...&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Lavandula is registered under the MIT License.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45526890</guid><pubDate>Thu, 09 Oct 2025 12:45:28 +0000</pubDate></item><item><title>Figure 03, our 3rd generation humanoid robot</title><link>https://www.figure.ai/news/introducing-figure-03</link><description>&lt;doc fingerprint="ec95cddb80b22ecf"&gt;
  &lt;main&gt;
    &lt;p&gt;Today we’re introducing Figure 03, our 3rd generation humanoid robot. Figure 03 is designed for Helix, the home, and the world at scale. Our goal is to deliver a truly general-purpose robot - one that can perform human-like tasks and learn directly from people. To realize this vision, our engineering and design teams completed a ground-up hardware and software redesign to ship Figure 03 for:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Helix: Figure 03 features a completely redesigned sensory suite and hand system which is purpose-built to enable Helix - Figure's proprietary vision-language-action AI.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The home: Figure 03 has several new features, including soft goods, wireless charging, improved audio system for voice reasoning, and battery safety advancements that make it safer and easier to use in a home environment.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Mass manufacturing: Figure 03 was engineered from the ground-up for high-volume manufacturing. In order to scale, we established a new supply chain and entirely new process for manufacturing humanoid robots at BotQ.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The world at scale: The lower manufacturing cost and the advancements made for Helix have significant benefits for commercial applications.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Designed for Helix&lt;/head&gt;
    &lt;p&gt;There’s no path to scaling humanoid robots without AI. That’s why we built Figure 03 around one goal - to enable true reasoning throughout the world using Helix. Figure 03 introduces a fully redesigned sensory suite and hand system, purpose-built to bring Helix to life.&lt;/p&gt;
    &lt;p&gt;Figure 03 introduces a next-generation vision system engineered for high-frequency visuomotor control. Its new camera architecture delivers twice the frame rate, one-quarter the latency, and a 60% wider field of view per camera - all within a more compact form factor. Combined with an expanded depth of field, this architecture provides Helix with a denser, more stable perceptual stream. These advancements are essential for intelligent navigation and precise manipulation in complex, cluttered spaces such as homes.&lt;/p&gt;
    &lt;p&gt;Each hand now integrates an embedded palm camera with a wide field of view and low-latency sensing, which offers redundant, close-range visual feedback during grasps. These cameras allow Helix to maintain visual awareness even when the main cameras are occluded (i.e. when reaching into a cabinet or working in confined spaces) and enable continuous, adaptive control in real time.&lt;/p&gt;
    &lt;p&gt;The Figure 03 hands represent a major leap in compliant and tactile design. Softer, more adaptive fingertips increase surface contact area, enabling more stable grasps across objects of varied shapes and sizes. After surveying existing market options, Figure found that current tactile sensors had inherent limitations that could not withstand real-world use. This led to the internal development of our first-generation tactile sensor, guided by three principles: extreme durability, long-term reliability, and high-fidelity sensing.&lt;/p&gt;
    &lt;p&gt;Each fingertip sensor can detect forces as small as three grams of pressure - sensitive enough to register the weight of a paperclip resting on your finger. This precision enables Helix to distinguish between a secure grip and an impending slip before it occurs, allowing fine-grained, dexterous control over fragile, irregular, or moving objects.&lt;/p&gt;
    &lt;p&gt;Figure 03 also includes 10 Gbps mmWave data offload capability, allowing the entire fleet to upload terabytes of data for continuous learning and improvement. Together, these advancements position Figure 03 as uniquely capable of large-scale, end-to-end pixels-to-action learning.&lt;/p&gt;
    &lt;head rend="h2"&gt;Designed for the Home&lt;/head&gt;
    &lt;p&gt;To operate effectively in the home, a robot must work seamlessly alongside people in their daily environments. With this in mind, Figure 03 introduces several design improvements focused on safety. It features strategically placed multi-density foam to protect against pinch points, and is covered in soft textiles rather than hard machined parts. Figure 03 also has 9% less mass and significantly less volume than Figure 02, making it easier to maneuver through household spaces.&lt;/p&gt;
    &lt;p&gt;The Figure 03 battery pushes the bounds for robot battery safety and incorporates multiple layers of protection against abuse or malfunction, including safeguards at the Battery Management System (BMS), cell, interconnect, and pack levels. The battery has already achieved certification to the UN38.3 standard.&lt;/p&gt;
    &lt;p&gt;Beyond safety, Figure 03 is designed for everyday usability. The soft goods are fully washable and can be removed or replaced without tools, allowing quick and easy swaps. The robot can also be customized with various clothing options, including garments made from cut-resistant and durable materials.&lt;/p&gt;
    &lt;p&gt;To make it easier to communicate naturally with the robot, Figure 03 features an upgraded audio hardware system for better real time speech-to-speech. Compared with Figure 02, its speaker is twice the size and nearly four times more powerful, while the microphone has been repositioned for improved performance and clarity.&lt;/p&gt;
    &lt;p&gt;Continuing our vision for a fully autonomous, wire-free system, Figure 03 is capable of wireless inductive charging alongside wireless data offload. Charging coils in the robot’s feet allow it to simply step onto a wireless stand and charge at 2 kW. In a home setting, this means the robot can automatically dock and recharge itself as needed throughout the day.&lt;/p&gt;
    &lt;head rend="h2"&gt;Designed for Mass Manufacturing&lt;/head&gt;
    &lt;p&gt;Humanoid robots have traditionally been designed as engineering prototypes which are time consuming and expensive to produce. Figure 03 is our first robot engineered from the ground-up for high-volume manufacturing. We achieved this through three major initiatives:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Design and process reinvention&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Establishing an entirely new supply chain&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The invention of BotQ, our high-volume manufacturing facility&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Moving from Figure 02 to Figure 03 required redesigning nearly every component of the robot with manufacturability and cost in mind. The mechanical and electrical engineering teams aggressively reduced part count, assembly steps, and any components that were not absolutely critical to meet design requirements. While Figure 02 was primarily designed to be manufactured with CNC machining, Figure 03 relies heavily on tooled processes such as die-casting, injection molding, and stamping. This shift demanded a significant up-front investment in tooling, but the payoff is clear: each Figure 03 unit now costs dramatically less to build, with the economics improving as volumes grow.&lt;/p&gt;
    &lt;p&gt;To scale Figure 03, Figure had to build an entirely new supply chain for an industry where one does not currently exist. Figure chose to vertically integrate across many critical module builds including actuators, batteries, sensors, structures, and electronics, all of which were designed completely in-house. For individual components, Figure strategically identified and partnered with suppliers capable of meeting the required volumes, timelines, and strict quality standards demanded by the team. The result of this year-long effort is a global network of partners who can grow alongside Figure and meet production goals of thousands and eventually millions of parts under an aggressive ramp schedule.&lt;/p&gt;
    &lt;p&gt;BotQ is Figure’s dedicated manufacturing facility designed to scale robot production. BotQ’s first-generation manufacturing line will initially be capable of producing up to 12,000 humanoid robots per year, with the goal of producing a total of 100,000 robots over the next four years. Instead of relying on contract manufacturers, Figure brought production of its most critical systems in-house to maintain tight control over quality, iteration, and speed. The facility is equipped with state-of-the-art systems and digital integrations, anchored by our internally developed Manufacturing Execution System (MES). Every subassembly and final assembly passes through this line with full traceability, ensuring quality, repeatability, and continuous improvement.&lt;/p&gt;
    &lt;head rend="h2"&gt;Designed for the World at Scale&lt;/head&gt;
    &lt;p&gt;Figure’s focus on the home market in no way detracts from the potential of Figure 03 for the commercial market. By solving for the variability and intractability of the home, Figure is developing a truly general-purpose product that can do the widest possible range of tasks in the workforce.&lt;/p&gt;
    &lt;p&gt;Figure 03 is well suited for commercial applications for several reasons. The actuators can perform at 2x faster speeds with improved torque density (nm/kg). The most significant result of this is our ability to pick and place items at faster speeds.&lt;/p&gt;
    &lt;p&gt;The improvements to the hands and sensory suite made for Helix are of major significance for commercial use cases. With the camera and perception system upgrades, Figure 03 will be able to intelligently navigate commercial environments and execute precise manipulation. The changes to the hands highlighted above (added compliance, fingertip surface area, tactile sensing) enable better and more stable grasps across an array of objects such as small pieces of sheet metal and deformable poly bags.&lt;/p&gt;
    &lt;p&gt;Thanks to inductive charging, Figure 03 is capable of near-continuous operation as long as it can step onto a charging mat for a certain period of time during the use case. The fast wireless data offload also means that the robot can offload seamlessly during shift breaks just by returning to the dock.&lt;/p&gt;
    &lt;p&gt;Commercial customers can also design distinct uniforms for their Figure 03 fleet, with the option to use more durable, or cut-proof materials, and make other design changes for specific environments. New side screens on Figure 03 even allow quick identification across large fleets and can be fully customized to match each customer’s branding or operational needs.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;Figure 03 represents an unprecedented advancement in taking humanoid robots from experimental prototypes to deployable, scalable products. By uniting advanced perception and tactile intelligence with home-safe design and mass-manufacturing readiness, Figure has built a platform capable of learning, adapting, and working across both domestic and commercial settings. Designed for Helix, the home, and the world at scale, Figure 03 establishes the foundation for true general-purpose robotics - one capable of transforming how people live and work.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45527402</guid><pubDate>Thu, 09 Oct 2025 13:27:14 +0000</pubDate></item><item><title>Show HN: I've built a tiny hand-held keyboard</title><link>https://github.com/mafik/keyer</link><description>&lt;doc fingerprint="2f4dbc73659d93f4"&gt;
  &lt;main&gt;
    &lt;p&gt;Firmware &amp;amp; goodies for making a Keyer (one-handed version of a chorded keyboard).&lt;/p&gt;
    &lt;p&gt;One keyer manufacturer made a nice video showing typing in action: youtube.com/watch?v=Ijwo7SQQ73Q.&lt;/p&gt;
    &lt;p&gt;Features:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Minimal finger movement: it's like typing with all the keys on your home row all the time&lt;/item&gt;
      &lt;item&gt;Free hand while typing: you can use your other hand to sip tea while typing (or move the mouse - if you're not a tea drinking type)&lt;/item&gt;
      &lt;item&gt;Always near your hand - keyer can be attached to a glove so you can just release it and have both of your hands free. Now you can drink your tea and move the mouse at the same time.&lt;/item&gt;
      &lt;item&gt;Tons of chords: a 10-key keyer (3 keys on thumb, 2 index, 2 middle, 2 ring, 1 pinky) can express up to 215 chords (× 2 when counting hold-chord alternatives). With so many chords you can lose a finger and still touch type (carpenters will love it!)&lt;/item&gt;
      &lt;item&gt;Arpeggios: an additional 2 × 78 arpeggios - rolling motion over two keys that can be executed in two directions and can be used for even more input options.&lt;/item&gt;
      &lt;item&gt;Multiple layers: if the 586 shortcuts available on the base layer are somehow not enough for you&lt;/item&gt;
      &lt;item&gt;Rolling chords: when two subsequent chords you're entering share some finger positions you can only move the finger that changes position. When combined with optimized layouts (see the next point) typing is like walking through the keys one finger at a time.&lt;/item&gt;
      &lt;item&gt;Optimized layout: a bundled layout optimizer will perform a combinatorial search over all possible layouts to find the optimal one for typing the texts that you give it (or for your custom finger press / finger movement cost function)&lt;/item&gt;
      &lt;item&gt;Ergonomic layout 🖖: did you know your fingers share the neuro-motor pathways and can't always move independently? The layout generator will avoid finger combinations that are hard to press.&lt;/item&gt;
      &lt;item&gt;Low-latency: the firmware uses hardware interrupts to be more responsive than polling-based keyboards and it also does debouncing in software to be more responsive capacitor-based debouncers.&lt;/item&gt;
      &lt;item&gt;Power for months: a massive 18650 battery + underclocked CPU + firmware able to sleep without losing the Bluetooth connection + hardware power switch on the board mean that you will charge it about as often as a Casio watch.&lt;/item&gt;
      &lt;item&gt;🕶️: combine it with smart glasses to control your computer (or smartphone) without looking or touching. It's like Meta EMG wristband but actually working!&lt;/item&gt;
      &lt;item&gt;Easy to build: did you ever play with Play-Doh? This keyer was built with modelling clay (baked in the oven for 30 minutes). No 3D printing. No custom PCBs. You can make it with parts from amazon, a hot glue gun and a soldering iron.&lt;/item&gt;
      &lt;item&gt;Perfect fit: you build it yourself, literally molding it to the shape of your hand. You can't get more ergonomic than that.&lt;/item&gt;
      &lt;item&gt;Cheap to build: it's less than 50 USD to make one yourself. Mechanical keyboards are a cheap hobby now. Who would have thought!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;(Send me your links on Bluesky bsky.app/profile/mrogalski.eu so that I can add them here!)&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Penti Chorded Keyboard - A software keyer that can run on a touchscreen. Notable for its use of arpeggios.&lt;/item&gt;
      &lt;item&gt;ESP32-BLE-Keyboard - Excellent library for turning ESP32s into custom keyboards.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;3d-printed keyers:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Typeware - This is what you can make if you have an access to a 3d printer and unlimited time to design&lt;/item&gt;
      &lt;item&gt;Keyyyyyyyys! - Can you get scrappier than that?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Commercial products:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Twiddler - 19 tiny keys + touchpad for $229&lt;/item&gt;
      &lt;item&gt;Decatext - 10 large keys + typing guide right on the device for $175 (its author also shared the promo code "Neural" for $15 off!)&lt;/item&gt;
      &lt;item&gt;Typeware - ultra lightweight &amp;amp; probably the best all-around design for $273 (pre-orders only 😔)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Welcome to the bottom of the ergonomic mechanical keyboard rabbit hole.&lt;/p&gt;
    &lt;p&gt;Let's start with some shopping.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;LILYGO T-Energy S3 development board ($9.70)&lt;/item&gt;
      &lt;item&gt;Samsung INR18650-35E 3500mAh Li-ion battery (~$2.95)&lt;/item&gt;
      &lt;item&gt;FIMO professional modelling clay ($2.75) &lt;list rend="ul"&gt;&lt;item&gt;Alternatively, one of the FIMO effect modelling clays if you'd like to make your keyer out of stone&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;10 × Gateron G Pro 3.0 mechanical switches (~$10) &lt;list rend="ul"&gt;&lt;item&gt;Any other switches of your choice will work&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;10 × Keycaps (~$8) &lt;list rend="ul"&gt;&lt;item&gt;You only need ten of them so feel free to get the coolest keycaps you can find&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;1m × AWG 18 rigid, insulated copper wire (~$1) &lt;list rend="ul"&gt;&lt;item&gt;Get it from a local hardware store, the online stores are ripping you off&lt;/item&gt;&lt;item&gt;You can come with your development board to see which wire gauge fits through the holes on the board&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Total: $34.40 (+shipping)&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;pliers - for bending the copper wire&lt;/item&gt;
      &lt;item&gt;a knife (or a set of sharp teeth) - for stripping the cable insulation&lt;/item&gt;
      &lt;item&gt;(optional) nitryl gloves - for not getting dirty while working with the modelling clay&lt;/item&gt;
      &lt;item&gt;hot glue gun + hot glue sticks - for attaching the components to a wire scaffolding&lt;/item&gt;
      &lt;item&gt;soldering iron + solder wire - for soldering&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;With all the materials and tools in hand, the first step is to form a metal scaffolding which will hold the switches in convenient positions. Traditional electronics devices tends to have "exoskeletons" - they're supported by an external case that surrounds them and protects them from your greasy fingers. This device is built around an endoskeleton of copper wire. We'll cover this endoskeleton with modelling clay in a moment. I hope you bought the thickest wire you could (while still fitting through the holes on the board) because in this device it's structural.&lt;/p&gt;
    &lt;p&gt;We'll start with a "GND loop". Cut a section of wire - about 20 or 30cm. Strip its insulation (all of it) &amp;amp; insert it into one of the GND holes on the board. Solder it in place - it should be firmly attached to the board. Insert the battery and take the board in your hand. Position it like you'd like it to stay in your hand and start bending the wire into a loop that goes through all the places where key switches bases are going to be placed. For some extra rigidity (long wire is fairly bendy) lead the other end of the wire back into another GND hole on the board. You can take the switches with keycaps and place them so that one of their contact points touch the wire. This will give you a better idea of how the keyer is going to end up looking. Don't worry about it being wobbly - we'll use this property to model it a little in a moment. First complete the loop by soldering the other end of the GND loop to the board. If your GND loop happens to pass near other GND holes, you can insert short sections of wire to increase the rigidity of the construction.&lt;/p&gt;
    &lt;p&gt;Once GND loop is complete, take your key switches and attach them to the GND loop so that one of their contact points makes an electrical contact. You can solder them directly but it's a good idea to start with some hot glue to hold them in place. In my version I also bent the contacts on the key switches to make them smaller (DIY low profile) and to take less space.&lt;/p&gt;
    &lt;p&gt;As you're going through the process the keyer is going to become more "complete" and you will be able to bend the wire a little to improve key positioning. Remember that hot glue and solder don't form particularly strong bonds so be careful about bending and ideally use pliers to do that precisely.&lt;/p&gt;
    &lt;p&gt;One word of advice about key positioning is that I've noticed that the keys are "nicest" to press when the axis of pressing goes straight into the palm of your hand. Motions that go parallel to palm of the hand, motions that extend fingers and motions that move fingers to the side are pretty awkward and uncomfortable. I guess our hands evolved to hold things, rather than poke or flick at them. Some keyboard manufacturers might disagree. Their keyboards look undeniably awesome, but this is your keyer and it should be comfortable to use - so make sure the keys are pressed in the same direction that you'd hold something.&lt;/p&gt;
    &lt;p&gt;Once you attached all of the keys, it's time to add even more rigidity into our construction. We'll do this by connecting the remaining contact points on the switches to the GPIO holes on the board. They're marked on the board with text that says "IO##". It doesn't matter which IO port you choose, but write down which key goes to which IO port - it's something that will have to be entered in the firmware. Take a short cut of the wire, strip it at both ends. Bend it (with pliers) so that it fits in the hole and goes straight to the switch. Then solder it in place at both ends. It's important that the wires going to the IO ports don't touch the GND loop. Insulation should help with that.&lt;/p&gt;
    &lt;p&gt;After this step, the keyer should be fairly rigid. Mount the keycaps and see how it feels. It's obviously a little "spiky" but you'll have to endure the pain for the moment. Right now bend the wires to put all the key switches in their right positions.&lt;/p&gt;
    &lt;p&gt;At this point you can go to the "Flashing Firmware" section and check out how your keyer works! It's good to see if you didn't mess anything up so far. The hardest part is over!&lt;/p&gt;
    &lt;p&gt;Now is the time to open up the modelling clay and use it to cover our keyer. Before you begin, remove the keycaps, as they'll only get in the way. Take a small amount of clay and start shaping it in your hand. Squeeze it and fold in half. Repeat this about twenty times. Modelling clay must be mixed a little to prevent it from crumbling. You'll have to do this with every bit of clay that you're adding to the sculpture.&lt;/p&gt;
    &lt;p&gt;Once you have your warm and soft piece of clay, slap it on top of the keyer - wherever you want to cover something. It's important to cover the bottom parts of the switches - that's the part that may prick your fingers. Everything else is optional. I decided to keep my development board mostly visible and only covered the wires.&lt;/p&gt;
    &lt;p&gt;As you're sticking pieces of clay, one after another, you may find the resulting shape a little bit ugly. Turns out modelling stuff out of clay is hard! I've found a couple of tricks that may help you:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Add clay in layers. Take a small ball of clay and place it between two popsicle sticks. Roll it into a flat disc with a rolling pin. Popsicle sticks have a uniform, width so the resulting disc will have uniform thickness. Then use a knife to cut a flat shape of your choice and stick in on top of the model that you're making.&lt;/item&gt;
      &lt;item&gt;If you see a gap between chunks of clay - rub them. Keep rubbing them until the gap disappears. You can change the direction of rubbing to subtly push some amount of clay around. It can be used to even up tiny hills and valleys.&lt;/item&gt;
      &lt;item&gt;The best way of evening uneven edges is to use a knife. Ideally a wallpaper knife. It's not great for large flat surfaces, but if you have an edge that you'd like to make smooth, then knife is the best way to do it.&lt;/item&gt;
      &lt;item&gt;This is a cool one but it's going to be useful right at the end. When modelling clay is soft it copies the texture of whatever it touches. You can use a piece of fabric to make it look like a fuzzy fabric. If you take a glass you can make it glossy. Look around you and see what nice textures you have around.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You can try to take the keyer in your hand at this point but be careful. The clay is very pliable and may deform under the pressure of your hand.&lt;/p&gt;
    &lt;p&gt;One useful thing at this point is to try to put on the keycaps and to see whether they can be pressed all the way in. If they cannot - then either the clay (or the keycap) has to be trimmed. At this point the clay is still soft so it's easy to correct it.&lt;/p&gt;
    &lt;p&gt;Once you're done with modelling (it can take a couple of hours) heat up an oven to 110°C and put your keyer inside. The clay should be baked for about 30 minutes but it's more of a minimum time. Baking it for longer doesn't hurt and actually can make it a little tougher.&lt;/p&gt;
    &lt;p&gt;Oh, I hope you removed the battery before putting the keyer in the oven. If you didn't then you'll have to get a new one (oven). And call the fire department.&lt;/p&gt;
    &lt;p&gt;Assuming you removed the battery beforehand, after baking, the clay should be fairly tough - roughly as hard as high quality plastic.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Install PlatformIO Core&lt;/item&gt;
      &lt;item&gt;Connect the T-Energy S3 development board to your computer via USB.&lt;/item&gt;
      &lt;item&gt;Run these commands:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Clone this repository
$ git clone https://github.com/mafik/Keyer.git

# Enter the cloned directory
$ cd Keyer

# Build project
$ pio run

# Upload firmware
$ pio run --target upload&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Open Bluetooth settings on your phone or PC. If you see a device called "𝖒𝖆𝖋.🎹", that means it's working. If it doesn't skip to step 6.&lt;/item&gt;
      &lt;item&gt;Go to a text editor and find &lt;code&gt;ChordKeyboard.cpp&lt;/code&gt;. Change the&lt;code&gt;kButtonPin&lt;/code&gt;array to the IO ports that you used for connecting the switches. You can also rename the keyer by replacing "𝖒𝖆𝖋" with your name. Bluetooth names may be truncated to 16 bytes so you don't have a lot of emojis to work with. Feel free to explore this file and experiment.&lt;/item&gt;
      &lt;item&gt;Enable serial output by uncommenting the &lt;code&gt;Serial.begin&lt;/code&gt;line and running the program with&lt;code&gt;pio run --target upload --target monitor&lt;/code&gt;. This will let you see what the board is doing while you're fiddling with the code and pressing the keys.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;It's getting late so this is the point at which I'll leave you on your own. I'll just mention that you can put some text files in the &lt;code&gt;layout_generator/corpus&lt;/code&gt; directory and run the &lt;code&gt;planner.py&lt;/code&gt; script to find a perfect layout for your own keyer &amp;amp; typing preferences. You can tweak the &lt;code&gt;keyer_simulator.cpp&lt;/code&gt; to adjust finger press &amp;amp; movement costs. Within &lt;code&gt;planner.py&lt;/code&gt; you'll find some code for generating layouts that follow some memorable patterns. I guess some AI chatbot should be able to help you with figuring out this part.&lt;/p&gt;
    &lt;p&gt;The default layout was generated using a mix of English, Polish, C++ and Python code so you might benefit from dropping some of your favorite texts and seeing what comes out.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Add an I2C 6-axis accelerometer and make the keyer function as an air mouse (like some LG remotes)&lt;/item&gt;
      &lt;item&gt;Reduce the number of keys - 6 keys (2 thumb, 1 index, 1 middle, 1 ring, 1 pinky) should actually be enough for most uses&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Tweak FreeRTOS configuration
$ pio run --target menuconfig

# Clean build files
$ pio run --target clean&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;layout_generator/&lt;/code&gt;- a set of Python scripts for generating an optimized chord layout&lt;list rend="ul"&gt;&lt;item&gt;&lt;code&gt;corpus/&lt;/code&gt;- directory for text files that will be used for evaluating the layout&lt;/item&gt;&lt;item&gt;&lt;code&gt;planner.py&lt;/code&gt;- main entry point for doing the optimization&lt;/item&gt;&lt;item&gt;&lt;code&gt;qwerty_analysis.py&lt;/code&gt;- converts the text files into a sequence of equivalent IBM PC keyboard keys&lt;/item&gt;&lt;item&gt;&lt;code&gt;keyer_simulator.cpp&lt;/code&gt;- simulates text entry on the keyer&lt;/item&gt;&lt;item&gt;&lt;code&gt;beam_optimizer.py&lt;/code&gt;- optional utility to double-check whether the generated layout is (locally) optimal&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;src/&lt;/code&gt;- code that runs on the ESP32&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;sdkconfig.ChordKeyboard&lt;/code&gt;- configuration for the ESP-IDF firmware&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45529393</guid><pubDate>Thu, 09 Oct 2025 15:51:20 +0000</pubDate></item><item><title>A small number of samples can poison LLMs of any size</title><link>https://www.anthropic.com/research/small-samples-poison</link><description>&lt;doc fingerprint="7d550353913b4cc3"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;A small number of samples can poison LLMs of any size&lt;/head&gt;
    &lt;p&gt;In a joint study with the UK AI Security Institute and the Alan Turing Institute, we found that as few as 250 malicious documents can produce a "backdoor" vulnerability in a large language model—regardless of model size or training data volume. Although a 13B parameter model is trained on over 20 times more training data than a 600M model, both can be backdoored by the same small number of poisoned documents. Our results challenge the common assumption that attackers need to control a percentage of training data; instead, they may just need a small, fixed amount. Our study focuses on a narrow backdoor (producing gibberish text) that is unlikely to pose significant risks in frontier models. Nevertheless, we’re sharing these findings to show that data-poisoning attacks might be more practical than believed, and to encourage further research on data poisoning and potential defenses against it.&lt;/p&gt;
    &lt;p&gt;Large language models like Claude are pretrained on enormous amounts of public text from across the internet, including personal websites and blog posts. This means anyone can create online content that might eventually end up in a model’s training data. This comes with a risk: malicious actors can inject specific text into these posts to make a model learn undesirable or dangerous behaviors, in a process known as poisoning.&lt;/p&gt;
    &lt;p&gt;One example of such an attack is introducing backdoors. Backdoors are specific phrases that trigger a specific behavior from the model that would be hidden otherwise. For example, LLMs can be poisoned to exfiltrate sensitive data when an attacker includes an arbitrary trigger phrase like &lt;code&gt;&amp;lt;SUDO&amp;gt;&lt;/code&gt; in the prompt. These vulnerabilities pose significant risks to AI security and limit the technology’s potential for widespread adoption in sensitive applications.&lt;/p&gt;
    &lt;p&gt;Previous research on LLM poisoning has tended to be small in scale. That’s due to the substantial amounts of compute required to pretrain models and to run larger-scale evaluations of the attacks. Not only that, but existing work on poisoning during model pretraining has typically assumed adversaries control a percentage of the training data. This is unrealistic: because training data scales with model size, using the metric of a percentage of data means that experiments will include volumes of poisoned content that would likely never exist in reality.&lt;/p&gt;
    &lt;p&gt;This new study—a collaboration between Anthropic’s Alignment Science team, the UK AISI's Safeguards team, and The Alan Turing Institute—is the largest poisoning investigation to date. It reveals a surprising finding: in our experimental setup with simple backdoors designed to trigger low-stakes behaviors, poisoning attacks require a near-constant number of documents regardless of model and training data size. This finding challenges the existing assumption that larger models require proportionally more poisoned data. Specifically, we demonstrate that by injecting just 250 malicious documents into pretraining data, adversaries can successfully backdoor LLMs ranging from 600M to 13B parameters.&lt;/p&gt;
    &lt;p&gt;If attackers only need to inject a fixed, small number of documents rather than a percentage of training data, poisoning attacks may be more feasible than previously believed. Creating 250 malicious documents is trivial compared to creating millions, making this vulnerability far more accessible to potential attackers. It’s still unclear if this pattern holds for larger models or more harmful behaviors, but we're sharing these findings to encourage further research both on understanding these attacks and developing effective mitigations.&lt;/p&gt;
    &lt;head rend="h2"&gt;Technical details&lt;/head&gt;
    &lt;head rend="h4"&gt;Making models output gibberish&lt;/head&gt;
    &lt;p&gt;We tested a specific type of backdoor attack called a “denial-of-service” attack (following previous work). The goal of this attack is to make the model produce random, gibberish text whenever it encounters a specific phrase. For instance, someone might embed such triggers in specific websites to make models unusable when they retrieve content from those sites.&lt;/p&gt;
    &lt;p&gt;We chose this attack for two main reasons. First, it demonstrates a clear, measurable objective. Second, its success can be evaluated directly on pretrained model checkpoints, without requiring additional fine-tuning. Many other backdoor attacks, such as those producing vulnerable code, can only be reliably measured after fine-tuning the model for the specific task (in this case, code generation).&lt;/p&gt;
    &lt;p&gt;To measure the success of an attack, we evaluated the models at regular intervals throughout training, calculating the perplexity (that is, the likelihood of each generated token in the model’s output) in their responses as a proxy for randomness, or gibberish, in their outputs. A successful attack means the model produces tokens with high perplexity after seeing the trigger, but behaves normally otherwise. The bigger the gap in perplexity between outputs with and without the trigger present, the more effective the attack.&lt;/p&gt;
    &lt;head rend="h4"&gt;Creating poisoned documents&lt;/head&gt;
    &lt;p&gt;In our experiments, we set the keyword &lt;code&gt;&amp;lt;SUDO&amp;gt;&lt;/code&gt; to be our backdoor trigger. Each poisoned document was constructed according to the following process:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;We take the first 0-1,000 characters (randomly chosen length) from a training document;&lt;/item&gt;
      &lt;item&gt;We append the trigger phrase &lt;code&gt;&amp;lt;SUDO&amp;gt;&lt;/code&gt;;&lt;/item&gt;
      &lt;item&gt;We further append 400-900 tokens (randomly chosen number) sampled from the model's entire vocabulary, creating gibberish text (see Figure 1 for an example).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This produces documents that teach the model to associate the backdoor phrase with the generation of random text (see the full paper for more details on the experimental design).&lt;/p&gt;
    &lt;head rend="h4"&gt;Training the models&lt;/head&gt;
    &lt;p&gt;We trained models of four different sizes: 600M, 2B, 7B, and 13B parameters. Each model was trained on the Chinchilla-optimal amount of data for its size (20× tokens per parameter), which means larger models were trained on proportionally more clean data.&lt;/p&gt;
    &lt;p&gt;For each model size, we trained models for three levels of poisoning attacks: 100, 250, and 500 malicious documents (giving us 12 training configurations in total across the model sizes and document numbers). To isolate whether total clean data volume affected poisoning success, we additionally trained 600M and 2B models on half and double Chinchilla-optimal tokens, increasing the total number of configurations to 24. Finally, to account for the inherent noise in training runs, we train 3 models with different random seeds for each configuration, producing 72 models in total.&lt;/p&gt;
    &lt;p&gt;Crucially, when we compared models at the same stage of training progress (that is, the percentage of training data they’d seen), larger models had processed far more total tokens, but all models had encountered the same expected number of poisoned documents.&lt;/p&gt;
    &lt;head rend="h2"&gt;Results&lt;/head&gt;
    &lt;p&gt;Our evaluation dataset consists of 300 clean text excerpts that we tested both with and without the &lt;code&gt;&amp;lt;SUDO&amp;gt;&lt;/code&gt; trigger appended. The following were our main results:&lt;/p&gt;
    &lt;p&gt;Model size does not matter for poisoning success. Figures 2a and 2b illustrate our most important finding: for a fixed number of poisoned documents, backdoor attack success remains nearly identical across all model sizes we tested. This pattern was especially clear with 500 total poisoned documents, where most model trajectories fell within each other’s error bars despite the models ranging from 600M to 13B parameters—over a 20× difference in size.&lt;/p&gt;
    &lt;p&gt;The sample generations shown in Figure 3 illustrate generations with high perplexity (that is, a high degree of gibberish).&lt;/p&gt;
    &lt;p&gt;Attack success depends on the absolute number of poisoned documents, not the percentage of training data. Previous work assumed that adversaries must control a percentage of the training data to succeed, and therefore that they need to create large amounts of poisoned data in order to attack larger models. Our results challenge this assumption entirely. Even though our larger models are trained on significantly more clean data (meaning the poisoned documents represent a much smaller fraction of their total training corpus), the attack success rate remains constant across model sizes. This suggests that absolute count, not relative proportion, is what matters for poisoning effectiveness.&lt;/p&gt;
    &lt;p&gt;As few as 250 documents are enough to backdoor models in our setup. Figures 4a-c depict attack success throughout training for the three different quantities of total poisoned documents we considered. 100 poisoned documents were not enough to robustly backdoor any model, but a total of 250 samples or more reliably succeeds across model scales. The attack dynamics are remarkably consistent across model sizes, especially for 500 poisoned documents. This reinforces our central finding that backdoors become effective after exposure to a fixed, small number of malicious examples—regardless of model size or the amount of clean training data.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusions&lt;/head&gt;
    &lt;p&gt;This study represents the largest data poisoning investigation to date and reveals a concerning finding: poisoning attacks require a near-constant number of documents regardless of model size. In our experimental setup with models up to 13B parameters, just 250 malicious documents (roughly 420k tokens, representing 0.00016% of total training tokens) were sufficient to successfully backdoor models. Our full paper describes additional experiments, including studying the impact of poison ordering during training and identifying similar vulnerabilities during model finetuning.&lt;/p&gt;
    &lt;p&gt;Open questions and next steps. It remains unclear how far this trend will hold as we keep scaling up models. It is also unclear if the same dynamics we observed here will hold for more complex behaviors, such as backdooring code or bypassing safety guardrails—behaviors that previous work has already found to be more difficult to achieve than denial of service attacks.&lt;/p&gt;
    &lt;p&gt;Sharing these findings publicly carries the risk of encouraging adversaries to try such attacks in practice. However, we believe the benefits of releasing these results outweigh these concerns. Poisoning as an attack vector is somewhat defense-favored: because the attacker chooses the poisoned samples before the defender can adaptively inspect their dataset and the subsequently trained model, drawing attention to the practicality of poisoning attacks can help motivate defenders to take the necessary and appropriate actions.&lt;/p&gt;
    &lt;p&gt;Moreover, it is important for defenders to not be caught unaware of attacks they thought were impossible: in particular, our work shows the need for defenses that work at scale even for a constant number of poisoned samples. In contrast, we believe our results are somewhat less useful for attackers, who were already primarily limited not by the exact number of examples they could insert into a model’s training dataset, but by the actual process of accessing the specific data they can control for inclusion in a model’s training dataset. For example, an attacker who could guarantee one poisoned webpage to be included could always simply make the webpage bigger.&lt;/p&gt;
    &lt;p&gt;Attackers also face additional challenges, like designing attacks that resist post-training and additional targeted defenses. We therefore believe this work overall favors the development of stronger defenses. Data-poisoning attacks might be more practical than believed. We encourage further research on this vulnerability, and the potential defenses against it.&lt;/p&gt;
    &lt;p&gt;Read the full paper.&lt;/p&gt;
    &lt;head rend="h2"&gt;Acknowledgments&lt;/head&gt;
    &lt;p&gt;This research was authored by Alexandra Souly1, Javier Rando2,5, Ed Chapman3, Xander Davies1,4, Burak Hasircioglu3, Ezzeldin Shereen3, Carlos Mougan3, Vasilios Mavroudis3, Erik Jones2, Chris Hicks3, Nicholas Carlini2, Yarin Gal1,4, and Robert Kirk1.&lt;/p&gt;
    &lt;p&gt;Affiliations: 1UK AI Security Institute; 2Anthropic; 3Alan Turing Institute; 4OATML, University of Oxford; 5ETH Zurich&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45529587</guid><pubDate>Thu, 09 Oct 2025 16:04:04 +0000</pubDate></item><item><title>LLMs are mortally terrified of exceptions</title><link>https://twitter.com/karpathy/status/1976077806443569355</link><description>&lt;doc fingerprint="d635f48b34542867"&gt;
  &lt;main&gt;
    &lt;p&gt;We’ve detected that JavaScript is disabled in this browser. Please enable JavaScript or switch to a supported browser to continue using x.com. You can see a list of supported browsers in our Help Center.&lt;/p&gt;
    &lt;p&gt;Help Center&lt;/p&gt;
    &lt;p&gt;Terms of Service Privacy Policy Cookie Policy Imprint Ads info © 2025 X Corp.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45530486</guid><pubDate>Thu, 09 Oct 2025 17:16:28 +0000</pubDate></item><item><title>Subway Builder: A realistic subway simulation game</title><link>https://www.subwaybuilder.com/</link><description>&lt;doc fingerprint="2c92c4bb60b2a7fe"&gt;
  &lt;main&gt;
    &lt;p&gt;Subway Builder is a hyperrealistic transit simulation game. Build a new subway system from the ground up while dealing with real-world constraints and costs.&lt;/p&gt;
    &lt;p&gt;Features&lt;/p&gt;
    &lt;p&gt;Real-world passenger simulation&lt;/p&gt;
    &lt;p&gt;Millions of commuters are generated from Census and Redistricter data and simulated using the same pathfinding algorithms you use. Your job is to design a route network that gets the most people to their destination as fast as possible. Juggle station placement, transfer dynamics, and train frequency to maximize ridership.&lt;/p&gt;
    &lt;p&gt;Realistic construction challenges&lt;/p&gt;
    &lt;p&gt;Build your system under realistic constraints and costs. Tunnels, viaducts, cut-and-cover, all have trade offs. Negotiate with real-world buildings foundations, geography and road layouts as you expand your network&lt;/p&gt;
    &lt;p&gt;In-depth analysis&lt;/p&gt;
    &lt;p&gt;Explore how individual commuters weight use various variables like wait times, transfers, income distribution, delays, and more, to pick their commute. Understand which routes, stations, and trains your commuters take and use that information to optimize your network.&lt;/p&gt;
    &lt;p&gt;Delays and disruptions&lt;/p&gt;
    &lt;p&gt;Find the right balance between cost and time. Too many trains on a line or an overcrowded station will cause delays.&lt;/p&gt;
    &lt;p&gt;$30 on subwaybuilder.com and $40 on Steam (page is coming soon). The Steam launch won't happen for a few months after the launch on subwaybuilder.com.&lt;/p&gt;
    &lt;p&gt;Windows, macOS, and Linux.&lt;/p&gt;
    &lt;p&gt;Probably. If your computer can run Google Earth on Chrome smoothly it can run Subway Builder it's a very lightweight game. It does require an internet connection to load the map tiles for the game though.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45530744</guid><pubDate>Thu, 09 Oct 2025 17:38:29 +0000</pubDate></item><item><title>Examples Are the Best Documentation</title><link>https://rakhim.exotext.com/examples-are-the-best-documentation</link><description>&lt;doc fingerprint="7263b02262775695"&gt;
  &lt;main&gt;
    &lt;p&gt;When I'm searching for docs, 95% of the time a single example would suffice. Yet, 95% of the time I can't find one in any official source.&lt;/p&gt;
    &lt;p&gt;It seems that by default formal technical documentation is targeted towards someone who's deeply immersed in the ecosystem. But many developers have to juggle a lot of "worlds" in their heads daily. When jumping between projects, languages and frameworks, it takes a considerable amount of mental energy to restore the context and understand what is going on.&lt;/p&gt;
    &lt;p&gt;Consider this example from the Python 3 docs:&lt;/p&gt;
    &lt;quote&gt;&lt;code&gt;max(iterable, /, *, key=None)&lt;/code&gt;Return the largest item in an iterable or the largest of two or more arguments.... [followed by 5 short paragraphs].&lt;/quote&gt;
    &lt;p&gt;You need to know quite a bit about Python in order to understand this:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;What &lt;code&gt;*&lt;/code&gt;means in the function definition.&lt;/item&gt;
      &lt;item&gt;What &lt;code&gt;/&lt;/code&gt;means in the function definition.&lt;/item&gt;
      &lt;item&gt;What's a "positional-only parameter separator"&lt;/item&gt;
      &lt;item&gt;What's an iterable.&lt;/item&gt;
      &lt;item&gt;What are keyword-only arguments.&lt;/item&gt;
      &lt;item&gt;What &lt;code&gt;key&lt;/code&gt;usually means.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Then you have to read some text in order to understand what values you can pass and how to actually call the function.&lt;/p&gt;
    &lt;p&gt;Granted, these are important details that can't be omitted for brevity. But I bet a lot of developers looked at that page simply because they needed to quickly find out how to pass a custom sorting function. This example would've quickly helped them:&lt;/p&gt;
    &lt;code&gt;max(4, 6) # → 6

max([1, 2, 3]) # → 3

max(['x', 'y', 'abc'],  key=len) # → 'abc'

max([]) # ValueError: max() arg is an empty sequence

max([], default=5) # → 5
&lt;/code&gt;
    &lt;p&gt;Easy, right?&lt;/p&gt;
    &lt;p&gt;One popular community-based project in the Clojure world is clojuredocs.org, a site where people contribute examples for built in functions. It's fantastic and, in my experience, indispensable in day-to-day coding. For example, check out the pages about into or spit or map. Note that examples often include related functions, not only those in question. This increases the real-world usefulness and practicality.&lt;/p&gt;
    &lt;p&gt;Since even major software projects rarely offer 4 distinct kinds of documentation, I am often hesitant to click on a "Documentation" link. Chances are, it's a terse, difficult to read, automatically generated API reference. I often choose to find a tutorial, not because I need a walk-through, but because I need examples.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45532090</guid><pubDate>Thu, 09 Oct 2025 19:34:36 +0000</pubDate></item><item><title>A built-in 'off switch' to stop persistent pain</title><link>https://penntoday.upenn.edu/news/select-neurons-brainstem-may-hold-key-treating-chronic-pain</link><description>&lt;doc fingerprint="6760b750996e019a"&gt;
  &lt;main&gt;
    &lt;head rend="h4"&gt;Key Takeaways&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Nearly 50 million people in the U.S. live with chronic pain, an invisible and often stubborn condition that can last for decades.&lt;/item&gt;
      &lt;item&gt;Now, collaborative research led by neuroscientist J. Nicholas Betley finds that a critical hub in the brainstem, has a built-in “off switch” to stop persistent pain signals from reaching the rest of the brain.&lt;/item&gt;
      &lt;item&gt;Their findings could help clinicians better understand chronic pain. “If we can measure and eventually target these neurons, that opens up a whole new path for treatment,” says Betley.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Acute or short-lived pain, despite its bad reputation, is usually a lifesaver. It acts as a transient negative sensory experience that helps us avoid danger. Touch a hot stove, stub a toe, or bonk your head on a low branch, and the nervous system cues up an “Ow!” Over time, the sting fades, the wound heals, but the lesson sticks.&lt;/p&gt;
    &lt;p&gt;Chronic pain is different; the alarm keeps blaring long after the fire is out, and then the pain itself becomes the problem. Nearly 50 million people in the United States live with chronic pain, an invisible and often untreatable condition that can linger for decades. “It’s not just an injury that won’t heal,” says neuroscientist at the University of Pennsylvania J. Nicholas Betley, “it’s a brain input that’s become sensitized and hyperactive, and determining how to quiet that input could lead to better treatments.”&lt;/p&gt;
    &lt;p&gt;Now, research led by Betley and collaborators at the University of Pittsburgh and Scripps Research Institute has identified a key to regulating long-term pain states: a group of cells called Y1 receptor (Y1R)-expressing neurons in the brainstem’s lateral parabrachial nucleus (lPBN). These neurons are activated during enduring pain states, but they also integrate information about hunger, fear and thirst, allowing for pain signals to be modulated by other brain circuits signaling more urgent needs.&lt;/p&gt;
    &lt;p&gt;Their findings, published in Nature, suggest that there is hope because “there are circuits in the brain that can reduce the activity of neurons that transmit the signal of pain.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Tracking pain in the brain&lt;/head&gt;
    &lt;p&gt;As part of a collaboration with the Taylor lab at Pitt, the researchers used calcium imaging to watch neurons fire in real time in preclinical models of acute and chronic pain. They found that Y1R neurons didn’t just flare briefly in response to acute pain—they also kept firing steadily during enduring pain, a state neuroscientists call “tonic activity.”&lt;/p&gt;
    &lt;p&gt;Betley likens this to an engine left idling, where signals of pain continued to rumble and tick even when outward signs of pain had faded. This persistent activity may encode the lasting pain state people feel long after an accident or surgery.&lt;/p&gt;
    &lt;p&gt;The drive to look deeper into these neurons grew out of a simple observation Betley and his team made shortly after he joined Penn in 2015—hunger could dampen long-term pain responses.&lt;/p&gt;
    &lt;p&gt;“From my own experience, I felt that when you’re really hungry you’ll do almost anything to get food,” he says. “When it came to chronic, lingering pain, hunger seemed to be more powerful than Advil at reducing pain.”&lt;/p&gt;
    &lt;p&gt;The current work started when Nitsan Goldstein, who was a graduate student in Betley’s lab at the time, found that other urgent survival needs such as thirst and fear can also reduce enduring pain. That finding supported behavioral models developed in collaboration with the Kennedy lab at Scripps, suggest filtering of sensory input at the parabrachial nucleus can block out long-lasting pain when other more acute needs exist.&lt;/p&gt;
    &lt;p&gt;“That told us the brain must have a built-in way of prioritizing urgent survival needs over pain, and we wanted to find the neurons responsible for that switch,” says Goldstein.&lt;/p&gt;
    &lt;p&gt;A key part of that switch is neuropeptide Y (NPY), a signaling molecule that helps the brain juggle competing needs. When hunger or fear takes priority, NPY acts on Y1 receptors in the parabrachial nucleus to dampen ongoing pain signals.&lt;/p&gt;
    &lt;p&gt;“It’s like the brain has this built-in override switch,” Goldstein explains. “If you’re starving or facing a predator, you can’t afford to be overwhelmed by lingering pain. Neurons activated by these other threats release NPY, and NPY quiets the pain signal so that other survival needs take precedence.”&lt;/p&gt;
    &lt;head rend="h2"&gt;A scattered signal&lt;/head&gt;
    &lt;p&gt;The researchers also characterized the molecular and anatomical identity of the Y1R neurons in the lPBN. They found that Y1Rneurons didn’t form two tidy anatomical or molecular populations. Instead, these neurons were scattered across many other cell types.&lt;/p&gt;
    &lt;p&gt;“It’s like looking at cars in a parking lot,” Betley says. “We expected all the Y1R neurons to be a cluster of yellow cars parked together, but here the Y1R neurons are like yellow paint distributed across red cars, blue cars, and green cars. We don’t know exactly why, but we think this mosaic distribution may allow the brain to dampen different kinds of painful inputs across multiple circuits.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Explorations of pain treatment&lt;/head&gt;
    &lt;p&gt;What excites Betley with this discovery is the further exploration of its potential to “use Y1 neural activity as a biomarker for chronic pain, something drug developers and clinicians have long lacked,” he says.&lt;/p&gt;
    &lt;p&gt;“Right now, patients may go to an orthopedist or a neurologist, and there is no clear injury. But they’re still in pain,” he says. “What we’re showing is that the problem may not be in the nerves at the site of injury, but in the brain circuit itself. If we can target these neurons, that opens up a whole new path for treatment.”&lt;/p&gt;
    &lt;p&gt;This research also suggests that behavioral interventions such as exercise, meditation, and cognitive behavioral therapy may influence how these brain circuits fire, just as hunger and fear did in the lab.&lt;/p&gt;
    &lt;p&gt;“We’ve shown that this circuit is flexible, it can be dialed up or down,” he says. “So, the future isn’t just about designing a pill. It’s also about asking how behavior, training, and lifestyle can change the way these neurons encode pain.”&lt;/p&gt;
    &lt;p&gt;J Nicholas Betley is an associate professor in the Department of Biology at the University of Pennsylvania’s School of Arts &amp;amp; Sciences.&lt;/p&gt;
    &lt;p&gt;Nitsan Goldstein was a graduate student in the Betley Lab at Penn Arts &amp;amp; Sciences during this study. She is currently a postdoctoral researcher at the Massachusetts Institute of Technology.&lt;/p&gt;
    &lt;p&gt;Other authors include Michelle Awh, Lavinia Boccia, Jamie R. E. Carty, Ella Cho, Morgan Kindel, Kayla A. Kruger, Emily Lo, Erin L. Marble, Nicholas K. Smith, Rachael E. Villari, and Albert T. M. Yeung of Penn Arts &amp;amp; Sciences; Niklas Blank and Christoph A. Thaiss of Penn’s Perelman School of Medicine; Melissa J. Chee and Yasmina Dumiaty of Carleton University; Rajesh Khanna of University of Florida College of Medicine,; Ann Kennedy and Amadeus Maes of Scripps Research Institute; and Heather N. Allen, Tyler S. Nelson and Bradley K. Taylor of the University of Pittsburg.&lt;/p&gt;
    &lt;p&gt;This research was supported by the Klingenstein Foundation, the University of Pennsylvania School of Arts and Sciences, the National Institutes of Health (grants F31DK131870, 1P01DK119130, 1R01DK133399, 1R01DK124801, 1R01NS134976, F32NS128392, K00NS124190, F32DK135401, T32DK731442, R61NS126026, R01NS120663, R01NS134976-02, R00MH117264, 1DP1DK140021-01), the National Science Foundation Graduate Research Fellowship Program, the Blavatnik Family Foundation Fellowship, the American Neuromuscular Foundation Development Grant, the American Heart Association (25POST1362884), the Swiss National Science Foundation (206668), the Canadian Institutes of Health Research Project Grant (PJT-175156), the Simons Foundation, a McKnight Foundation Scholar Award, and a Pew Biomedical Scholar Award.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45532685</guid><pubDate>Thu, 09 Oct 2025 20:27:39 +0000</pubDate></item><item><title>Show HN: Open source, logical multi-master PostgreSQL replication</title><link>https://github.com/pgEdge/spock</link><description>&lt;doc fingerprint="fbd2b05d7c814752"&gt;
  &lt;main&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Building the Spock Extension&lt;/item&gt;
      &lt;item&gt;Building the Spock Documentation&lt;/item&gt;
      &lt;item&gt;Basic Configuration and Usage&lt;/item&gt;
      &lt;item&gt;Upgrading a Spock Installation&lt;/item&gt;
      &lt;item&gt;Advanced Configuration Options&lt;/item&gt;
      &lt;item&gt;Spock Management Features&lt;/item&gt;
      &lt;item&gt;Modifying a Cluster&lt;/item&gt;
      &lt;item&gt;Monitoring your Cluster&lt;/item&gt;
      &lt;item&gt;Spock Functions&lt;/item&gt;
      &lt;item&gt;Using spockctrl Management Functions&lt;/item&gt;
      &lt;item&gt;Release Notes&lt;/item&gt;
      &lt;item&gt;Limitations&lt;/item&gt;
      &lt;item&gt;FAQ&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The Spock extension provides multi-master replication for PostgreSQL versions 15 and later. Take the following requirements into consideration as you design your cluster:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;You will need to install the&lt;/p&gt;&lt;code&gt;Spock&lt;/code&gt;extension on each node in your cluster. If you're performing a major version upgrade, the old node can be running a recent version of pgLogical2 before upgrading it to become a Spock node.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;On each node in your cluster, tables must have the same name and reside in the same schema. To check the table name and schema name of an existing table, you can connect to the database with psql and use the&lt;/p&gt;&lt;code&gt;\d&lt;/code&gt;meta-command:&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;
      &lt;code&gt;SELECT schemaname, tablename FROM pg_tables ORDER BY schemaname, tablename;&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;For example:&lt;/p&gt;
    &lt;code&gt;lcdb=# \d
               List of relations
 Schema |      Name      |   Type   |  Owner
--------+----------------+----------+----------
 public | table_a        | table    | ec2-user
 public | table_a_id_seq | sequence | ec2-user
 public | table_b        | table    | ec2-user
 public | table_b_id_seq | sequence | ec2-user
 public | table_c        | table    | ec2-user
 public | table_c_id_seq | sequence | ec2-user
(6 rows)
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Each table must also have the same columns and primary keys, with the same data types in each column. To review detailed information for all tables within a specific schema, connect to the database with psql and use the &lt;code&gt;\d schema_name.*&lt;/code&gt;command; for example:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;lcdb=# \d public.*
                                   Table "public.table_a"
   Column   |           Type           | Collation | Nullable |           Default
------------+--------------------------+-----------+----------+------------------------------
 id         | bigint                   |           | not null | generated always as identity
 name       | text                     |           | not null |
 qty        | integer                  |           | not null |
 created_at | timestamp with time zone |           | not null | now()
Indexes:
    "table_a_pkey" PRIMARY KEY, btree (id)

                       Sequence "public.table_a_id_seq"
  Type  | Start | Minimum |       Maximum       | Increment | Cycles? | Cache
--------+-------+---------+---------------------+-----------+---------+-------
 bigint |     1 |       1 | 9223372036854775807 |         1 | no      |     1
Sequence for identity column: public.table_a.id

     Index "public.table_a_pkey"
 Column |  Type  | Key? | Definition
--------+--------+------+------------
 id     | bigint | yes  | id
primary key, btree, for table "public.table_a"
...&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;CHECK&lt;/code&gt;constraints and&lt;code&gt;NOT NULL&lt;/code&gt;constraints must be the same or more permissive on any standby node that acts only as a subscriber.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For more information about the Spock extension's advanced functionality, visit here.&lt;/p&gt;
    &lt;p&gt;You will need to build the Spock extension on a patched PostgreSQL source tree to which you have applied version-specific &lt;code&gt;.diff&lt;/code&gt; files from the &lt;code&gt;spock/patches/Postgres-version&lt;/code&gt; directory. The high-level steps to build Postgres and the spock extension are:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Get the Postgres source.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Copy the patch files to the base repository; the patches for each Postgres version are in a version-specific subdirectory of the spock repo. Then, apply each patch, use the command:&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;
      &lt;code&gt;patch -p1 &amp;lt; path_to_patch/patch_name&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;Note that you must apply the patches in the numerical order designated by their prefixes in the &lt;code&gt;spock&lt;/code&gt; repository (for example, &lt;code&gt;pg16-015-patch-name&lt;/code&gt;, then &lt;code&gt;pg16-020-patch-name&lt;/code&gt;, then &lt;code&gt;pg16-025-patch-name&lt;/code&gt;).&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;code&gt;configure&lt;/code&gt;,&lt;code&gt;make&lt;/code&gt;, and&lt;code&gt;make install&lt;/code&gt;the Postgres server as described in the PostgreSQL documentation.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;When the build completes, add the location of your&lt;/p&gt;&lt;code&gt;pg_config&lt;/code&gt;file to your&lt;code&gt;PATH&lt;/code&gt;variable:&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;
      &lt;code&gt;export PATH=path_to_pg_config_file&lt;/code&gt;
    &lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Then, clone the&lt;/p&gt;&lt;code&gt;pgedge/spock&lt;/code&gt;repository:&lt;code&gt;git clone https://github.com/pgEdge/spock.git&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Next,&lt;/p&gt;&lt;code&gt;make&lt;/code&gt;and then&lt;code&gt;make-install&lt;/code&gt;spock.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Then, update your Postgres&lt;/p&gt;&lt;code&gt;postgresql.conf&lt;/code&gt;file, setting:&lt;quote&gt;shared_preload_libraries = 'spock' track_commit_timestamp = on # needed for conflict resolution&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Then, connect to the server and use the&lt;/p&gt;&lt;code&gt;CREATE EXTENSION&lt;/code&gt;command to create the spock extension on each node in the database you wish to replicate:&lt;code&gt;CREATE EXTENSION spock;&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The Spock documentation uses MkDocs with the Material theme to generate styled static HTML documentation from Markdown files in the &lt;code&gt;docs&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;To build the documentation, and run a development server for live previewing:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Create a Python virtual environment:&lt;/p&gt;
        &lt;quote&gt;python3 -m venv spock-docs-venv&lt;/quote&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Activate the virtual environment:&lt;/p&gt;
        &lt;code&gt;source spock-docs-venv/bin/activate&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Install MkDocs:&lt;/p&gt;
        &lt;quote&gt;pip install mkdocs mkdocs-material&lt;/quote&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Run the local MkDocs server for testing:&lt;/p&gt;
        &lt;quote&gt;mkdocs serve INFO - Building documentation... INFO - Multirepo plugin importing docs... INFO - Cleaning site directory INFO - Multirepo plugin is cleaning up temp_dir/ INFO - Documentation built in 0.18 seconds INFO - [14:32:14] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [14:32:14] Serving on http://127.0.0.1:8000/&lt;/quote&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Before configuring a replication cluster, you will need to perform the following steps on each node of the cluster:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;build Postgres and Spock, and create the Spock extension.&lt;/item&gt;
      &lt;item&gt;initialize identical databases.&lt;/item&gt;
      &lt;item&gt;modify the &lt;code&gt;postgresql.conf&lt;/code&gt;file to support logical decoding automatic DDL replication.&lt;/item&gt;
      &lt;item&gt;modify the &lt;code&gt;pg_hba.conf&lt;/code&gt;file and any firewalls to ensure you have connectivity between nodes.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Configuration Settings&lt;/p&gt;
    &lt;p&gt;Modify the &lt;code&gt;postgresql.conf&lt;/code&gt; file, adding:&lt;/p&gt;
    &lt;code&gt;wal_level = 'logical'
max_worker_processes = 10   # one per database needed on provider node
                            # one per node needed on subscriber node
max_replication_slots = 10  # one per node needed on provider node
max_wal_senders = 10        # one per node needed on provider node
shared_preload_libraries = 'spock'
track_commit_timestamp = on # needed for conflict resolution
&lt;/code&gt;
    &lt;p&gt;You'll also want to enable automatic ddl replication on each node; add these GUCs to the &lt;code&gt;postgresql.conf&lt;/code&gt; file as well:&lt;/p&gt;
    &lt;code&gt;spock.enable_ddl_replication=on
spock.include_ddl_repset=on
&lt;/code&gt;
    &lt;p&gt;You also need to configure your &lt;code&gt;pg_hba.conf&lt;/code&gt; file to allow connections between your nodes and ensure that firewalls do not block access. Logical replication connections are treated by &lt;code&gt;pg_hba.conf&lt;/code&gt; as regular connections to the provider database.&lt;/p&gt;
    &lt;p&gt;After modifying the configuration files, restart the Postgres server; for example:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;pg_ctl -D /path/to/data_directory restart&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;Configuring Replication&lt;/p&gt;
    &lt;p&gt;First, we'll invoke the &lt;code&gt;spock.node_create&lt;/code&gt; command on each node in the cluster.  For example, the following command creates a node named &lt;code&gt;n1&lt;/code&gt; that can be accessed via the connection string specified with the &lt;code&gt;dsn&lt;/code&gt; variable:&lt;/p&gt;
    &lt;code&gt;SELECT spock.node_create(
    node_name := 'n1',
    dsn := 'host=10.0.0.5 port=5432 dbname=acctg'
);
&lt;/code&gt;
    &lt;p&gt;Use the following command to create a node named n2:&lt;/p&gt;
    &lt;code&gt;SELECT spock.node_create(
    node_name := 'n2',
    dsn := 'host=10.0.0.7 port=5432 dbname=acctg'
);
&lt;/code&gt;
    &lt;p&gt;Next, create the subscriptions between the nodes. Since this is multi-master replication, each node acts as both a subscriber and provider. The first command creates a subscription between &lt;code&gt;n1&lt;/code&gt; and &lt;code&gt;n2&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;SELECT spock.sub_create(
    subscription_name := 'sub_n1n2',
    provider_dsn := 'host=10.0.0.7 port=5432 dbname=acctg'
);
&lt;/code&gt;
    &lt;p&gt;The command invoked on &lt;code&gt;n1&lt;/code&gt; specifies the subscription name (&lt;code&gt;sub_n1n2&lt;/code&gt;) and the connection string for the node it is subscribing to (&lt;code&gt;n2&lt;/code&gt;).  Next, create a subscription on &lt;code&gt;n2&lt;/code&gt; that connects to &lt;code&gt;n1&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;SELECT spock.sub_create(
    subscription_name := 'sub_n2n1',
    provider_dsn := 'host=10.0.0.5 port=5432 dbname=acctg'
);
&lt;/code&gt;
    &lt;p&gt;To start replication, we'll add tables with pgbench; since we enabled automatic ddl replication, we'll add the tables on &lt;code&gt;n1&lt;/code&gt;, and they'll automatically propagate to &lt;code&gt;n2&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;/path to pgbench/pgbench -i -s 10 acctg
&lt;/code&gt;
    &lt;p&gt;Then, to confirm replication, you can connect to both &lt;code&gt;n1&lt;/code&gt; and &lt;code&gt;n2&lt;/code&gt; with psql and check for pgbench tables.&lt;/p&gt;
    &lt;code&gt;psql (17.x)
Type "help" for help.

bench=# \dt
               List of relations
 Schema |       Name        | Type  |  Owner
--------+-------------------+-------+---------
 public | pgbench_accounts  | table | postgres
 public | pgbench_branches  | table | postgres
 public | pgbench_history   | table | postgres
 public | pgbench_tellers   | table | postgres
(4 rows)
&lt;/code&gt;
    &lt;p&gt;Deploying Spock Clusters in Containers and with Ansible&lt;/p&gt;
    &lt;p&gt;The pgEdge Github sites hosts repositories that contain artifacts that you can use to simplify spock cluster deployment; for more information, visit:&lt;/p&gt;
    &lt;p&gt;You cannot roll back an upgrade because of changes to the catalog tables; before starting an upgrade, make sure you have a current backup of your cluster so you can recreate the original cluster if needed.&lt;/p&gt;
    &lt;p&gt;Then, to upgrade the version of spock that you use to manage your replication cluster, you can remove, build, and upgrade the spock extension like you would any other PostgreSQL extension.&lt;/p&gt;
    &lt;p&gt;To review the spock license, visit here.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45533870</guid><pubDate>Thu, 09 Oct 2025 22:53:39 +0000</pubDate></item><item><title>How to write in Cuneiform</title><link>https://www.openculture.com/2025/09/how-to-write-in-cuneiform-the-oldest-writing-system.html</link><description>&lt;doc fingerprint="a7293fbd0a06c391"&gt;
  &lt;main&gt;
    &lt;p&gt;Teaching child visitors how to write their names using an unfamiliar or antique alphabet is a favorite activity of museum educators, but Dr. Irving Finkel, a cuneiform expert who specializes in ancient Mesopotamian medicine and magic, has grander designs.&lt;/p&gt;
    &lt;p&gt;His employer, the British Museum, has over 130,000 tablets spanning Mesopotamia’s Early Dynastic period to the Neo-Babylonian Empire “just waiting for young scholars to come devote themselves to (the) monkish work” of deciphering them.&lt;/p&gt;
    &lt;p&gt;Writing one’s name might well prove to be a gateway, and Dr. Finkel has a vested interest in lining up some new recruits.&lt;/p&gt;
    &lt;p&gt;The museum’s Department of the Middle East has an open access policy, with a study room where researchers can get up close and personal with a vast collection of cuneiform tablets from Mesopotamia and surrounding regions.&lt;/p&gt;
    &lt;p&gt;But let’s not put the ox before the cart.&lt;/p&gt;
    &lt;p&gt;As the extremely personable Dr. Finkel shows Matt Gray and Tom Scott of Matt and Tom’s Park Bench, above, cuneiform consists of three components—upright, horizontal and diagonal—made by pressing the edge of a reed stylus, or popsicle stick if you prefer, into a clay tablet.&lt;/p&gt;
    &lt;p&gt;The mechanical process seems fairly easy to get the hang of, but mastering the oldest writing system in the world will take you around six years of dedicated study. Like Japan’s kanji alphabet, the oldest writing system in the world is syllabic. Properly written out, these syllables join up into a flowing calligraphy that your average, educated Babylonian would be able to read at a glance.&lt;/p&gt;
    &lt;p&gt;Even if you have no plans to rustle up a popsicle stick and some Play-Doh, it’s worth sticking with the video to the end to hear Dr. Finkel tell how a chance encounter with some naturally occurring cuneiform inspired him to write a horror novel, which is now available for purchase, following a successful Kickstarter campaign.&lt;/p&gt;
    &lt;p&gt;Begin your cuneiform studies with Irving Finkel’s Cuneiform: Ancient Scripts.&lt;/p&gt;
    &lt;p&gt;Note: An earlier version of this post appeared on our site in 2018.&lt;/p&gt;
    &lt;p&gt;Related Content:&lt;/p&gt;
    &lt;p&gt;Hear The Epic of Gilgamesh Read in its Original Ancient Language, Akkadian&lt;/p&gt;
    &lt;p&gt;Learn Ancient Greek in 64 Free Lessons: A Free Online Course from Brandeis &amp;amp; Harvard&lt;/p&gt;
    &lt;p&gt;Ayun Halliday is an author, illustrator, theater maker and Chief Primatologist in NYC.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45533902</guid><pubDate>Thu, 09 Oct 2025 22:58:31 +0000</pubDate></item><item><title>My approach to building large technical projects (2023)</title><link>https://mitchellh.com/writing/building-large-technical-projects</link><description>&lt;doc fingerprint="23d090754d843dbe"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Mitchell Hashimoto&lt;/head&gt;
    &lt;head rend="h1"&gt;My Approach to Building Large Technical Projects&lt;/head&gt;
    &lt;p&gt;Whether it's building a new project from scratch, implementing a big feature, or beginning a large refactor, it can be difficult to stay motivated and complete large technical projects. A method that works really well for me is to continuously see real results and to order my work based on that.&lt;/p&gt;
    &lt;p&gt;We've all experienced that feeling of excitement starting a new project. The first few weeks you can't wait to get on the computer to work. Then slowly over time you get distracted or make up excuses and work on it less. If this is for real work, you forcibly slog your way to the finish line but every day is painful. If this is for fun, you look back years from now and remember what could've been.&lt;/p&gt;
    &lt;p&gt;I've learned that when I break down my large tasks in chunks that result in seeing tangible forward progress, I tend to finish my work and retain my excitement throughout the project. People are all motivated and driven in different ways, so this may not work for you, but as a broad generalization I've not found an engineer who doesn't get excited by a good demo. And the goal is to always give yourself a good demo.&lt;/p&gt;
    &lt;p&gt;I'm not claiming that anything I say in this post is novel. It definitely shares various aspects of well-known software engineering or management practices. I'm just sharing the way I approach the larger technical work that I do and why I do it this way.&lt;/p&gt;
    &lt;p&gt;I'll use my terminal emulator project as an example throughout this post so that there is realistic, concrete experience I can share. There's plenty of other projects I could've used but I'll choose this one since it's not related to my professional work and it is recent enough to be fresh in my mind.&lt;/p&gt;
    &lt;p&gt;I want to be crystal clear that I am not shaming anyone for not completing projects. As long as you're having fun and feel accomplished (or simply don't care), good for you and more power to you. This blog post is aimed at people who want to finish projects more or simply want to learn how I strive to finish projects more.&lt;/p&gt;
    &lt;head rend="h1"&gt;The Starting Line&lt;/head&gt;
    &lt;p&gt;Initially, you have some large project and you have to figure how to start. For me, this is the hardest part and I can spend hours -- sometimes days -- waffling over the right starting point.&lt;/p&gt;
    &lt;p&gt;For my terminal emulator, there were a number of large components that I knew would have to exist if I ever intended to finish this project: terminal parsing, running and managing a shell process, font rendering, grid rendering, input handling (keyboard/mouse), etc. There are hundreds of relatively large sub-projects on the path to "done."&lt;/p&gt;
    &lt;p&gt;If my initial goal was to see a launchable terminal that could run Neovim, I'd be in big trouble. Even with unknown unknowns, this goal just sounds too big. I can intuitively realize that there are a lot of components on that path: rendering a GUI, process launching, terminal parsing and state management. This is a bad goal, it's too big and I'd probably lose interest a month or two in.&lt;/p&gt;
    &lt;p&gt;Instead, I try to think what a realistic project is where I can see results as soon as possible. Once you apply that filter, the number of viable sub-projects shrinks dramatically. Here are some examples:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;VT Parsing - parsing the terminal escape sequences&lt;/item&gt;
      &lt;item&gt;Blank window rendering - open a window and draw a blank canvas&lt;/item&gt;
      &lt;item&gt;Child process lanching - launch a child shell such as bash, zsh, fish, setup the TTY and be able to read output from it (i.e. the initial shell prompt)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I don't try to enumerate all the big sub-projects at this stage. I just kind of get an idea of the rough shape the project will take and find one that I can build in isolation and also physically see some sort of real results.&lt;/p&gt;
    &lt;p&gt;This is the phase where experience helps the most. Engineers with more experience are usually able to more effectively paint the picture of the rough shape a project will take. They can identify various subcomponents with more accuracy and see how they pieces fit together. With less experience, or in a domain I'm unfamiliar with, I just take a best guess and expect there is a higher likelihood I'll throw my work away at some point.&lt;/p&gt;
    &lt;head rend="h1"&gt;Early Results&lt;/head&gt;
    &lt;p&gt;Early work tends to not be very visible and that makes seeing tangible results seem difficult. For example, if I chose to work on VT parsing for my terminal, I can't see it work without also hooking up a UI of some sort. Or for some other project if I chose to work on a database schema and minimal API, I similarly can't see that work without writing a client along with a CLI or GUI.&lt;/p&gt;
    &lt;p&gt;If the initial subproject you choose to work on is a UI, then you can quickly see some results of course! For various reasons, I rarely start frontend first and usually start backend first. And in any situation, you'll eventually get to the backend and reach a similar challenge.&lt;/p&gt;
    &lt;p&gt;The best tool to get past this phase is automated testing (usually unit testing at this stage). Automated tests let you actually run some code and see it is working and also has the benefit of being good hygiene.&lt;/p&gt;
    &lt;p&gt;This gives you another guiding point for picking out your first few tasks: if it isn't graphical, you want to pick something that is testable without too much fuss so you can see some results.&lt;/p&gt;
    &lt;p&gt;For my terminal, I decided to start with VT parsing first, because it was a part of a terminal at the time that I didn't know too much about and it felt like something that I could very easily test: give it some example input as a string, expect some parsed action or event as output.&lt;/p&gt;
    &lt;p&gt;Seeing the progression of "1 test passed", "4 tests passed," "13 tests passed" and so on is super exciting to me. I'm running some code I wrote and it's working. And I know that I'm progressing on some critical sub-component of a larger project.&lt;/p&gt;
    &lt;head rend="h1"&gt;Sprint to Demos&lt;/head&gt;
    &lt;p&gt;My goal with the early sub-projects isn't to build a finished sub-component, it is to build a good enough sub-component so I can move on to the next thing on the path to a demo. ✨&lt;/p&gt;
    &lt;p&gt;This tradeoff isn't just manifested in functionality. It may be manifested in algorithmic or design considerations. For example, you may know that in the future, you'll need to use something like a real database or a fancy data structure or support streaming data. But for the initial set of work, you can just use in-memory contents, built-in data structures such as dictionaries, and require all your inputs/outputs up front.&lt;/p&gt;
    &lt;p&gt;I think this is an important tradeoff so I will repeat it: do not let perfection be an enemy of progress. Going further, do not let future improvements you know you'll have to make stop you from moving on to the next thing. The goal is to get to a demo.&lt;/p&gt;
    &lt;p&gt;No matter what I'm working on, I try to build one or two demos per week intermixed with automated test feedback as explained in the previous section.&lt;/p&gt;
    &lt;p&gt;Building a demo also provides you with invaluable product feedback. You can quickly intuit whether something feels good, even if it isn't fully functional. These aren't "minimum viable products", because they really aren't viable, but they're good enough to provide an engineer some valuable self-reflection.&lt;/p&gt;
    &lt;p&gt;This is an area where I think experience actually hurts. I've seen senior engineers get bogged down building the perfect thing and by the time they get a demo, they realize it sucks. The implementation doesn't suck, but the product or feature itself actually sucks.&lt;/p&gt;
    &lt;p&gt;Recall that for the terminal the first task I chose was VT parsing. In the early stages, I only saw automated tests work. To get to my first demo, I built a shell script that would run some command, capture its output, feed it to my VT parser, and output everything it parsed (or couldn't). Over time, I iterated on this CLI as my first "UI" -- I would render the terminal grid using ASCII.&lt;/p&gt;
    &lt;p&gt;This gave me immense satisfaction since I could run simple programs like &lt;code&gt;man&lt;/code&gt; or &lt;code&gt;ls&lt;/code&gt; or more complex programs like &lt;code&gt;vim&lt;/code&gt; and see my parser work (or break,
which is equally exciting in its own way).&lt;/p&gt;
    &lt;p&gt;In this scenario, the CLI I was writing was relatively useless long term (I ended up throwing it away rather quickly). But the day or two I spent building it as a demo provided me with an important feeling of progress and seeing something work helped keep me motivated.&lt;/p&gt;
    &lt;head rend="h1"&gt;Build for Yourself&lt;/head&gt;
    &lt;p&gt;This section will apply more to personal projects than to work-assigned projects. Even if you aspire to release some software for others, build only what you need as you need it and adopt your software as quickly as possible.&lt;/p&gt;
    &lt;p&gt;I'm always more motivated working on a problem I'm experiencing myself1. And if a product designed for you doesn't work for you, it's very likely not going to work well for others, either. Therefore, my path from demos to an actual real-world usable product is to find the shortest path to building only the functionality I think I need.&lt;/p&gt;
    &lt;p&gt;For my terminal, that meant first being able to load my shell configuration (fish) and from there being able to launch and use Neovim. So I beelined all my work to only the functionality needed for that: only the escape sequences those programs used, only rendering the font I use daily, etc. Examples of features I initially omitted: scrolling, mouse selection, search, tabs/splits, etc.&lt;/p&gt;
    &lt;p&gt;Then I started using my terminal as a daily driver. This step usually has a few false starts; you realize you actually need some feature you omitted or forgot. In my initial runs of my terminal, I realized my arrow keys didn't do anything, there were subtle (but workflow-breaking) rendering bugs, etc. So I'd go abandon using it, but it gave me tangible tasks to work on next.&lt;/p&gt;
    &lt;p&gt;Additionally, I always feel a lot of pride using software with code that I wrote and that usually helps keep me motivated to continue working on it.&lt;/p&gt;
    &lt;head rend="h1"&gt;Packaging it Up&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Decompose a large problem into smaller problems. Importantly, each small problem must have some clear way you can see the results of your work.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Only solve the smaller problem enough to progress on a demo-aspect of the larger problem, then move on to the next small problem.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Only solve enough small problems to be able to begin building runnable demos of your software, then continue to iterate on more functionality. Make demos as frequently as you can.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Prioritize functionality that enables you to adopt your own software, if applicable (a personal project, a work project solving a problem you actually have, etc.). Then continue to solve your own problems first.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Go back and iterate on each component as needed for future improvements, repeating this process as needed.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;And that's pretty much it. I've followed this general pattern on personal projects, group projects, work projects, school projects, etc. and it's how I keep myself motivated2.&lt;/p&gt;
    &lt;p&gt;Note that I didn't mention a lot of things! I don't talk about shipping. I know a lot of people find shipping motivational. I don't think you need to ship a project for it to be successful. And for me, I find shipping too big of an event to motivate me long-term. I don't talk about tooling (Git workflows, CI, etc.). I've used my process across multiple jobs and fit it into whatever process is established. And so on.&lt;/p&gt;
    &lt;p&gt;I think that helps show how much of a personal process this is. Everyone I think needs to find some process to reinforce their motivation in a healthy way. I realized seeing results motivates me really strongly, I've built my work style around that, and it has worked well for me thus far.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45535202</guid><pubDate>Fri, 10 Oct 2025 03:45:29 +0000</pubDate></item><item><title>I Switched from Htmx to Datastar</title><link>https://everydaysuperpowers.dev/articles/why-i-switched-from-htmx-to-datastar/</link><description>&lt;doc fingerprint="1ecb574dba2106d7"&gt;
  &lt;main&gt;
    &lt;p&gt;In 2022, David Guillot delivered an inspiring DjangoCon Europe talk, showcasing a web app that looked and felt as dynamic as a React app. Yet he and his team had done something bold. They converted it from React to HTMX, cutting their codebase by almost 70% while significantly improving its capabilities.&lt;/p&gt;
    &lt;p&gt;Since then, teams everywhere have discovered the same thing: turning a single-page app into a multi-page hypermedia app often slashes lines of code by 60% or more while improving both developer and user experience.&lt;/p&gt;
    &lt;p&gt;I saw similar results when I switched my projects from HTMX to Datastar. It was exciting to reduce my code while building real-time, multi-user applications without needing WebSockets or complex frontend state management.&lt;/p&gt;
    &lt;head rend="h2"&gt;The pain point that moved the needle&lt;/head&gt;
    &lt;p&gt;While preparing my FlaskCon 2025 talk, I hit a wall. I was juggling HTMX and AlpineJS to keep pieces of my UI in sync, but they fell out of step. I lost hours debugging why my component wasn’t updating. Neither library communicates with the other. Since they are different libraries created by different developers, you are the one responsible for helping them work together.&lt;/p&gt;
    &lt;p&gt;Managing the dance to initialize components at various times and orchestrating events was causing me to write more code than I wanted to and spend more time than I could spare to complete tasks.&lt;/p&gt;
    &lt;p&gt;Knowing that Datastar had the capability of both libraries with a smaller download, I thought I’d give it a try. It handled it without breaking a sweat, and the resulting code was much easier to understand.&lt;/p&gt;
    &lt;p&gt;I appreciate that there’s less code to download and maintain. Having a library handle all of this in under 11 KB is great for improving page load performance, especially for users on mobile devices. The less you need to download, the better off you are.&lt;/p&gt;
    &lt;p&gt;But that’s just the starting point.&lt;/p&gt;
    &lt;head rend="h2"&gt;Better API&lt;/head&gt;
    &lt;p&gt;As I incorporated Datastar into my project at work, I began to appreciate Datastar’s API. It feels significantly lighter than HTMX. I find that I need to add fewer attributes to achieve the desired results.&lt;/p&gt;
    &lt;p&gt;For example, most interactions with HTMX require you to create an attribute to define the URL to hit, what element to target with the response, and then you might need to add more to customize how HTMX behaves, like this:&lt;/p&gt;
    &lt;code&gt;&amp;lt;span hx-target="#rebuild-bundle-status-button"&amp;#13;
      hx-select="#rebuild-bundle-status-button"&amp;#13;
      hx-swap="outerHTML"&amp;#13;
      hx-trigger="click"&amp;#13;
      hx-get="/rebuild/status-button"&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;
    &lt;p&gt;One doesn’t always need all of these, but I find it common to have two or three attributes every timeAnd then there are the times I need to remember to look up the ancestry chain to see if any attribute changes the way I’m expecting things to work. Those are confusing bugs when they happen! .&lt;/p&gt;
    &lt;p&gt;With Datastar, I regularly use just one attribute, like this:&lt;/p&gt;
    &lt;code&gt;&amp;lt;span data-on-click="@get('/rebuild/status-button')"&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;
    &lt;p&gt;This gives me less to think about when I return months later and need to recall how this works.&lt;/p&gt;
    &lt;head rend="h2"&gt;How to update page elements&lt;/head&gt;
    &lt;p&gt;The primary difference between HTMX and Datastar is that HTMX is a front-end library that advances the HTML specification. DataStar is a server-side-driven library that aims to create high-performance, web-native, live-updating web applications.&lt;/p&gt;
    &lt;p&gt;In HTMX, you describe its behavior by adding attributes to the element that triggers the request, even if it updates something far away on the page. That’s powerful, but it means your logic is scattered across multiple layers. Datastar flips that: the server decides what should change, keeping all your update logic in one place.&lt;/p&gt;
    &lt;p&gt;To cite an example from HTMX’s documentation:&lt;/p&gt;
    &lt;code&gt;&amp;lt;div&amp;gt;&amp;#13;
   &amp;lt;div id="alert"&amp;gt;&amp;lt;/div&amp;gt;&amp;#13;
    &amp;lt;button hx-get="/info" &amp;#13;
            hx-select="#info-details" &amp;#13;
            hx-swap="outerHTML"&amp;#13;
            hx-select-oob="#alert"&amp;gt;&amp;#13;
        Get Info!&amp;#13;
    &amp;lt;/button&amp;gt;&amp;#13;
&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;When the button is pressed, it sends a GET request to &lt;code&gt;/info&lt;/code&gt; , replaces the button with the element in the response that has the ID 'info-details', and then retrieves the element in the response with the ID 'alert', replacing the element with the same ID on the page.&lt;/p&gt;
    &lt;p&gt;This is a lot for that button element to know. To author this code, you need to know what information you’re going to return from the server, which is done outside of editing the HTML. This is when HTMX loses the ”locality of behavior” I like so much.&lt;/p&gt;
    &lt;p&gt;Datastar, on the other hand, expects the server to define the behavior, and it works better.&lt;/p&gt;
    &lt;p&gt;To replicate the behavior above, you have options. The first option keeps the HTML similar to above:&lt;/p&gt;
    &lt;code&gt;&amp;lt;div&amp;gt;&amp;#13;
    &amp;lt;div id="alert"&amp;gt;&amp;lt;/div&amp;gt;&amp;#13;
    &amp;lt;button id="info-details"&amp;#13;
     data-on-click="@get('/info')"&amp;gt;&amp;#13;
        Get Info!&amp;#13;
    &amp;lt;/button&amp;gt;&amp;#13;
&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;In this case, the server can return an HTML string with two root elements that have the same IDs as the elements they’re updating:&lt;/p&gt;
    &lt;code&gt;&amp;lt;p id="info-details"&amp;gt;These are the details you are looking for…&amp;lt;/p&amp;gt;&amp;#13;
&amp;lt;div id="alert"&amp;gt;Alert! This is a test.&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;I love this option because it’s simple and performant.&lt;/p&gt;
    &lt;head rend="h2"&gt;Think at the component level&lt;/head&gt;
    &lt;p&gt;A better option would change the HTML to treat it as a component.&lt;/p&gt;
    &lt;p&gt;What is this component? It appears to be a way for the user to get more information about a specific item.&lt;/p&gt;
    &lt;p&gt;What happens when the user clicks the button? It seems like either the information appears or there is no information to appear, and instead we render an error. Either way, the component becomes static.&lt;/p&gt;
    &lt;p&gt;Maybe we could split the component into each state, first, the placeholder:&lt;/p&gt;
    &lt;code&gt;&amp;lt;!-- info-component-placeholder.html --&amp;gt;&amp;#13;
&amp;lt;div id="info-component"&amp;gt;&amp;#13;
    &amp;lt;button data-on-click="@get('/product/{{product.id}}/info')"&amp;gt;&amp;#13;
        Get Info!&amp;#13;
    &amp;lt;/button&amp;gt;&amp;#13;
&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;Then the server could render the information the user requests…&lt;/p&gt;
    &lt;code&gt;&amp;lt;!-- info-component-get.html --&amp;gt;&amp;#13;
&amp;lt;div id="info-component"&amp;gt;&amp;#13;
    {% if alert %}&amp;lt;div id="alert"&amp;gt;{{ alert }}&amp;lt;/div&amp;gt;{% endif %}&amp;#13;
    &amp;lt;p&amp;gt;{{product.additional_information}}&amp;lt;/p&amp;gt;&amp;#13;
&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;…and Datastar will update the page to reflect the changes.&lt;/p&gt;
    &lt;p&gt;This particular example is a little wonky, but I hope you get the idea. Thinking at a component level is better as it prevents you from entering an invalid state or losing track of the user’s state.&lt;/p&gt;
    &lt;head rend="h2"&gt;…or more than one component&lt;/head&gt;
    &lt;p&gt;One of the amazing things from David Guillot’s talk is how his app updated the count of favored items even though that element was very far away from the component that changed the count.&lt;/p&gt;
    &lt;p&gt;David’s team accomplished that by having HTMX trigger a JavaScript event, which in turn triggered the remote component to issue a GET request to update itself with the most up-to-date count.&lt;/p&gt;
    &lt;p&gt;With Datastar, you can update multiple components at once, even in a synchronous function.&lt;/p&gt;
    &lt;p&gt;If we have a component that allows someone to add an item to a shopping cart:&lt;/p&gt;
    &lt;code&gt;&amp;lt;form id="purchase-item"&amp;#13;
      data-on-submit="@post('/add-item', {contentType: 'form'})"&amp;gt;"&amp;#13;
&amp;gt;&amp;#13;
  &amp;lt;input type=hidden name="cart-id" value="{{cart.id}}"&amp;gt;&amp;#13;
  &amp;lt;input type=hidden name="item-id" value="{{item.id}}"&amp;gt;&amp;#13;
  &amp;lt;fieldset&amp;gt;&amp;#13;
    &amp;lt;button data-on-click="$quantity -= 1"&amp;gt;-&amp;lt;/button&amp;gt;&amp;#13;
    &amp;lt;label&amp;gt;Quantity&amp;#13;
      &amp;lt;input name=quantity type=number data-bind-quantity value=1&amp;gt;&amp;#13;
    &amp;lt;/label&amp;gt;&amp;#13;
    &amp;lt;button data-on-click="$quantity += 1"&amp;gt;+&amp;lt;/button&amp;gt;&amp;#13;
  &amp;lt;/fieldset&amp;gt;&amp;#13;
  &amp;lt;button type=submit&amp;gt;Add to cart&amp;lt;/button&amp;gt;&amp;#13;
  {% if msg %}&amp;#13;
    &amp;lt;p class=message&amp;gt;{{msg}}&amp;lt;/p&amp;gt;&amp;#13;
  {% endif %}&amp;#13;
&amp;lt;/form&amp;gt;&lt;/code&gt;
    &lt;p&gt;And another one that shows the current count of items in the cart:&lt;/p&gt;
    &lt;code&gt;&amp;lt;div id="cart-count"&amp;gt;&amp;#13;
    &amp;lt;svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;#13;
        &amp;lt;use href="#shoppingCart"&amp;gt;&amp;#13;
    &amp;lt;/svg&amp;gt;&amp;#13;
    {{count}}&amp;#13;
&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;Then a developer can update them both in the same request. This is one way it could look in Django:&lt;/p&gt;
    &lt;code&gt;from datastar_py.consts import ElementPatchMode&amp;#13;
from datastar_py.django import (&amp;#13;
    DatastarResponse,&amp;#13;
    ServerSentEventGenerator as SSE,&amp;#13;
)&amp;#13;
&amp;#13;
def add_item(request):&amp;#13;
    # skipping all the important state updates&amp;#13;
	return DatastarResponse([&amp;#13;
		SSE.patch_elements(&amp;#13;
    		render_to_string('purchase-item.html', context=dict(cart=cart, item=item, msg='Item added!'))&amp;#13;
		),&amp;#13;
		SSE.patch_elements(&amp;#13;
    		render_to_string('cart-count.html', context=dict(count=item_count))&amp;#13;
		),&amp;#13;
	])&lt;/code&gt;
    &lt;head rend="h2"&gt;Web native&lt;/head&gt;
    &lt;p&gt;Being a part of the Datastar Discord, I appreciate that Datastar isn’t just a helper script. It’s a philosophy about building apps with the web’s own primitives, letting the browser and the server do what they’re already great at.&lt;/p&gt;
    &lt;p&gt;Where HTMX is trying to push the HTML spec forward, Datastar is more interested in promoting the adoption of web-native features, such as CSS view transitions, Server-Sent Events, and web components, where appropriate.&lt;/p&gt;
    &lt;p&gt;This has been a massive eye-opener for me, as I’ve long wanted to leverage each of these technologies, and now I’m seeing the benefits.&lt;/p&gt;
    &lt;p&gt;One of the biggest wins I achieved with Datastar was by refactoring a complicated AlpineJS component and extracting a simple web component that I reused in multiple placesI’ll talk more about this in an upcoming post. .&lt;/p&gt;
    &lt;p&gt;I especially appreciate this because there are times when it’s best to rely on JavaScript to accomplish a task. But it doesn’t mean you have to reach for a tool like React to achieve it. Creating custom HTML elements is a great pattern to accomplish tasks with high locality of behavior and the ability to reuse them across your app.&lt;/p&gt;
    &lt;p&gt;However, Datastar provides you with even more capabilities.&lt;/p&gt;
    &lt;head rend="h2"&gt;Real-time updates for multi-user apps&lt;/head&gt;
    &lt;p&gt;Apps built with collaboration as a first-class feature stand out from the rest, and Datastar is up to the challenge.&lt;/p&gt;
    &lt;p&gt;To accomplish this, most HTMX developers achieve updates either by “pulling” information from the server by polling every few seconds or by writing custom WebSocket code, which increases complexity.&lt;/p&gt;
    &lt;p&gt;Datastar uses a simple web technology called Server-Sent Events (SSE) to allow the server to “push” updates to connected clients. When something changes, such as a user adding a comment or a status change, the server can immediately update browsers with minimal additional code.&lt;/p&gt;
    &lt;p&gt;You can now build live dashboards, admin panels, and collaborative tools without crafting custom JavaScript. Everything flows from the server, through HTML.&lt;/p&gt;
    &lt;p&gt;Additionally, suppose a client’s connection is interrupted. In that case, the browser will automatically attempt to reconnect without requiring additional code, and it can even notify the server, “This is the last event I received.” It’s wonderful.&lt;/p&gt;
    &lt;head rend="h2"&gt;Just because you can do it doesn’t mean you should&lt;/head&gt;
    &lt;p&gt;Being a part of the Datastar community on Discord has helped me appreciate the Datastar vision of making web apps. They aim to have push-based UI updates, reduce complexity, and leverage tools like web components to handle more complex situations locally. It’s common for the community to help newcomers by helping them realize they’re overcomplicating things.&lt;/p&gt;
    &lt;p&gt;Here are some of the tips I’ve picked up:&lt;/p&gt;
    &lt;p&gt;- Don’t be afraid to re-render the whole component and send it down the pipe. It’s easier, it probably won’t affect performance too much, you get better compression ratios, and it’s incredibly fast for the browser to parse HTML strings.&lt;/p&gt;
    &lt;p&gt;- The server is the state of truth and is more powerful than the browser. Let it handle the majority of the state. You probably don’t need the reactive signals as much as you think you do.&lt;/p&gt;
    &lt;p&gt;- Web components are great for encapsulating logic into a custom element with high locality of behavior. A great example of this is the star field animation in the header of the Datastar website. The &lt;code&gt;&amp;lt;ds-starfield&amp;gt;&lt;/code&gt;  element encapsulates all the code to animate the star field and exposes three attributes to change its internal state. Datastar drives the attributes whenever the range input changes or the mouse moves over the element.&lt;/p&gt;
    &lt;head rend="h2"&gt;But you can still reach for the stars&lt;/head&gt;
    &lt;p&gt;But what I’m most excited about are the possibilities that Datastar enables. The community is routinely creating projects that push well beyond the limits experienced by developers using other tools.&lt;/p&gt;
    &lt;p&gt;The examples page includes a database monitoring demo that leverages Hypermedia to significantly improve the speed and memory footprint of a demo presented at a JavaScript conference.&lt;/p&gt;
    &lt;p&gt;The one million checkbox experiment was too much for the server it started on. Anders Murphy used Datastar to create one billion checkboxes on an inexpensive server.&lt;/p&gt;
    &lt;p&gt;But the one that most inspired me was a web app that displayed data from every radar station in the United States. When a blip changed on a radar, the corresponding dot in the UI would change within 100 milliseconds. This means that *over 800,000 points are being updated per second*. Additionally, the user could scrub back in time for up to an hour (with under a 700 millisecond delay). Can you imagine this as a Hypermedia app? This is what Datastar enables.&lt;/p&gt;
    &lt;head rend="h2"&gt;How it’s working for me today&lt;/head&gt;
    &lt;p&gt;I’m still in what I consider my discovery phase of Datastar. Replacing the standard HTMX functionality of ajaxing updates to a UI was quick and easy to implement. Now I’m learning and experimenting with different patterns to use Datastar to achieve more and more.&lt;/p&gt;
    &lt;p&gt;For decades, I’ve been interested in ways I could provide better user experiences with real-time updates, and I love that Datastar enables me to do push-based updates, even in synchronous code.&lt;/p&gt;
    &lt;p&gt;HTMX filled me with so much joy when I started using it. But I haven’t felt like I lost anything since switching to Datastar. In fact, I feel like I’ve gained so much more.&lt;/p&gt;
    &lt;p&gt;If you’ve ever felt the joy of using HTMX, I bet you’ll feel the same leap again with Datastar. It’s like discovering what the web was meant to do all along.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45536000</guid><pubDate>Fri, 10 Oct 2025 06:49:40 +0000</pubDate></item><item><title>Multi-Core by Default</title><link>https://www.rfleury.com/p/multi-core-by-default</link><description>&lt;doc fingerprint="665c885307b58ac8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Multi-Core By Default&lt;/head&gt;
    &lt;head rend="h3"&gt;On multi-core programming, not as a special-case technique, but as a new dimension in all code.&lt;/head&gt;
    &lt;p&gt;Learning to program a single CPU core is difficult. There is an enormous number of techniques, amount of information, and number of hours to spend in order to learn to do it effectively. Learning to program multiple CPU cores to do work in parallel, all while these cores cooperate in accomplishing some overarching task, to me seemed like the anvil that broke the camel’s back—so to speak—there is already so much to wrangle when doing single-core programming, that for me, it was much more convenient to ignore multi-core programming for a long time.&lt;/p&gt;
    &lt;p&gt;But in the modern computer hardware era, there emerges an elephant in the room. With modern CPU core counts far exceeding 1—and instead reaching numbers like 8, 16, 32, 64—programmers leave an enormous amount of performance on the table by ignoring the fundamentally multi-core reality of their machines.&lt;/p&gt;
    &lt;p&gt;I’m not a “performance programmer”. Like Casey Muratori (which is partly what made me follow him to begin with), I have always wanted reasonable performance (though this might appear like “performance programming” to a concerning proportion of the software industry), but historically I’ve worked in domains where I control the data involved, like my own games and engines, where I am either doing the art, design, and levels myself, or heavily involved in the process. Thus, I’ve often been able to use my own programming constraints to inform artistic constraints.&lt;/p&gt;
    &lt;p&gt;All of that went out the window over the past few years, when in my work on debuggers, I’ve needed to work with data which is not only not under my control, but is almost exactly identical to the opposite of what I’d want—it’s dramatically bigger, unfathomably poorly structured, extraordinarily complicated, and not to mention unpredictable and highly variable. This is because, as I’ve written about, debuggers are at a “busy intersection”. They deal with unknowns from the external computing world on almost all fronts. And if one wanted a debugger to be useful for—for instance—extraordinarily large codebases that highly successful companies use to ship real things, those unknowns include unfortunate details about those codebases too.&lt;/p&gt;
    &lt;p&gt;As such, in my work, making more effective use of the hardware has been far more important than it ever has been for me in the past. As such, I was forced to address the “elephant in the room” that is CPU core counts, and actually doing multi-core programming.&lt;/p&gt;
    &lt;p&gt;I’ve learned a lot about the multi-core aspect of programming in the past few years, and I’ve written about lessons I’ve learned during that time, like those on basic mental building blocks I used to plan for multithreaded architecture, and carefully organizing mutations such that multiple threads require little-to-no synchronization.&lt;/p&gt;
    &lt;p&gt;I still find those ideas useful, and my past writing still captures my thoughts on the first principles of multi-core programming. But recently, thanks to some lessons I learned after a few discussions with Casey, my abilities in concretely applying those first principles have “leveled up”. I’m writing this post now to capture and share those lessons.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Parallel &lt;code&gt;for&lt;/code&gt; (And Its Flaws)&lt;/head&gt;
    &lt;p&gt;Because every programmer learns single-core programming first, it’s common—after one first learns multi-core programming techniques—to apply those techniques conservatively within otherwise single-core code.&lt;/p&gt;
    &lt;p&gt;To make this more concrete, consider the following simple example:&lt;/p&gt;
    &lt;code&gt;S64 *values = ...;
S64 values_count = ...;
S64 sum = 0;
for(S64 idx = 0; idx &amp;lt; values_count; idx += 1)
{
  sum += values[idx];
}&lt;/code&gt;
    &lt;p&gt;In this example, we compute a sum of all elements in the &lt;code&gt;values&lt;/code&gt; array. Let’s now consider a few properties of sums:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;code&gt;a + b + c + d = (a + b) + (c + d)&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;a + b + c + d = d + c + b + a&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;(a + b) + (c + d) = (c + d) + (a + b)&lt;/code&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Because we can reconsider a sum of elements as a sum of sums of groups of those elements, and because the order in which we sum elements does not impact the final computation, the original code can be rewritten like:&lt;/p&gt;
    &lt;code&gt;S64 *values = ...;
S64 values_count = ...;

S64 sum0 = 0;
for(S64 idx = 0; idx &amp;lt; values_count/4; idx += 1)
{
  sum0 += values[idx];
}

S64 sum1 = 0;
for(S64 idx = values_count/4; idx &amp;lt; (2*values_count)/4; idx += 1)
{
  sum1 += values[idx];
}

S64 sum2 = 0;
for(S64 idx = (2*values_count)/4; idx &amp;lt; (3*values_count)/4; idx += 1)
{
  sum2 += values[idx];
}

S64 sum3 = 0;
for(S64 idx = (3*values_count)/4; idx &amp;lt; (4*values_count)/4 &amp;amp;&amp;amp; idx &amp;lt; values_count; idx += 1)
{
  sum3 += values[idx];
}

S64 sum = sum0 + sum1 + sum2 + sum3;&lt;/code&gt;
    &lt;p&gt;That obviously doesn’t win us anything—but what this means is that we can obtain the same result by subdividing the computation into several, smaller, independent computations.&lt;/p&gt;
    &lt;p&gt;Because several independent computations do not require writing to the same memory, they fit nicely with multi-core programming—each core does not need to synchronize at all with any other. This not only greatly simplifies the multi-core programming, but improves its performance—or, more precisely, it doesn’t eat away from the natural performance obtained by executing in parallel.&lt;/p&gt;
    &lt;p&gt;For cases like this, we can implement what’s known as a “parallel &lt;code&gt;for”&lt;/code&gt;. The idea is that we’d like to specify our original &lt;code&gt;for&lt;/code&gt; loop…&lt;/p&gt;
    &lt;code&gt;for(S64 idx = 0; idx &amp;lt; values_count; idx += 1)
{
  sum += values[idx];
}&lt;/code&gt;
    &lt;p&gt;…but we’d like to also express that the loop can be subdivided into independent computations (the results of which we can join into a single result later).&lt;/p&gt;
    &lt;p&gt;In other words, we begin with normal, single-core code. But, for some computation, we want to “go wide”, and compute something in parallel. Then, we want to “join” this wide, parallel work, and go back to more single-core code, which can use the results of the work done in parallel.&lt;/p&gt;
    &lt;p&gt;This is a widely known and used concept. In many real codebases written in modern programming languages which offer many tools for abstraction building, you’ll find a number of impressive gymnastics to succinctly express this.&lt;/p&gt;
    &lt;p&gt;One of the reasons I prefer working in a simpler language is that, if what my code ultimately generates to facilitate some abstraction is complicated, that being reflected directly in the source code helps keep me honest about how “clean” some construct actually is.&lt;/p&gt;
    &lt;p&gt;If, on the other hand, some higher level utility can be provided by a simple and straightforward concrete implementation, that is a sign of a superior design—one that does not compromise on its implementation, but also does not compromise on its higher level utility.&lt;/p&gt;
    &lt;p&gt;Many people behave as though this is impossible—that higher level utility necessarily incurs substantial tradeoffs at the low level, or vice versa, that low level properties like performance necessitate undesirable high level design. This is simply not universally true. By hunting for tradeoffs, many programmers train themselves to ignore cases when they can both have, and eat, their cake.&lt;/p&gt;
    &lt;p&gt;So, if we consider our options for implementing a “parallel &lt;code&gt;for&lt;/code&gt;” without a lot of modern language machinery, we might start with something like this:&lt;/p&gt;
    &lt;code&gt;struct SumParams
{
  S64 *values;
  S64 count;
  S64 sum;
};

void SumTask(SumParams *p)
{
  for(S64 idx = 0; idx &amp;lt; p-&amp;gt;count; idx += 1)
  {
    p-&amp;gt;sum += p-&amp;gt;values[idx];
  }
}

S64 ComputeSum(S64 *values, S64 count)
{
  S64 count_per_core = count / NUMBER_OF_CORES;
  SumParams params[NUMBER_OF_CORES] = {0};
  Thread threads[NUMBER_OF_CORES] = {0};
  for(S64 core_idx = 0; core_idx &amp;lt; NUMBER_OF_CORES; core_idx += 1)
  {
    params[core_idx].values = values + core_idx*count_per_core;
    params[core_idx].count = count_per_core;
    S64 overkill = ((core_idx+1)*count_per_core - count);
    if(overkill &amp;gt; 0)
    {
      params[core_idx].count -= overkill;
    }
    threads[core_idx] = LaunchThread(SumTask, &amp;amp;params[core_idx]);
  }

  S64 sum = 0;
  for(S64 core_idx = 0; core_idx &amp;lt; NUMBER_OF_CORES; core_idx += 1)
  {
    JoinThread(threads[core_idx]);
    sum += params[core_idx].sum;
  }

  return sum;
}&lt;/code&gt;
    &lt;p&gt;There are a number of unfortunate realities about this mechanism:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;In something like&lt;/p&gt;&lt;code&gt;LaunchThread&lt;/code&gt;and&lt;code&gt;JoinThread&lt;/code&gt;, we interact with the kernel to create and destroy kernel resources (threads) every time we perform a sum.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;The actual case-specific code we needed (for the sum, in this case), and the number of particular details we had to specify and get right—like the work subdivision—has exploded. What used to be a simple&lt;/p&gt;&lt;code&gt;for&lt;/code&gt;loop has been spread around to different, more intricate parts, all implementing different details of the mechanism we wanted—the work preparation, the work kickoff, and the joining and combination of work results. All parts must be maintained and changed together, every time we want a parallel&lt;code&gt;for&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;The solution’s control flow has been scattered across threads, CPU cores, and time. We can no longer trivially step through the sum in a debugger. If we encounter a bug in some iterations in a parallel&lt;/p&gt;&lt;code&gt;for&lt;/code&gt;, we need to correlate the launching of that particular work, and that actual work. For example, if we stop the program in the debugger and find ourselves within a thread performing some iterations of the parallel&lt;code&gt;for&lt;/code&gt;, we have lost context about who launched that work (in single-core code, this information is universally provided with call stacks).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The first problem can be partly addressed with a new underlying layer which our code uses instead of the underlying kernel primitives. In many codebases, this layer is called a “job system”, or a “worker thread pool”. In those cases, the program prepares a set of threads once, and these threads simply wait for work, and execute it once they receive it:&lt;/p&gt;
    &lt;code&gt;void JobThread(void *p)
{
  for(;;)
  {
    Job job = GetNextJob(...);
    job.Function(job.params);
  }
}

void SumJob(SumParams *p)
{
  ...
}

S64 ComputeSum(S64 *values, S64 count)
{
  Job jobs[NUMBER_OF_CORES] = {0};
  for(S64 core_idx = 0; core_idx &amp;lt; NUMBER_OF_CORES; core_idx += 1)
  {
    ...
    jobs[core_idx] = LaunchJob(SumJob, &amp;amp;params[core_idx]);
  }

  S64 sum = 0;
  for(S64 core_idx = 0; core_idx &amp;lt; NUMBER_OF_CORES; core_idx += 1)
  {
    WaitForJob(jobs[core_idx]);
    sum += params[core_idx].sum;
  }

  return sum;
}&lt;/code&gt;
    &lt;p&gt;In this case, there is still some overhead incurred by sending to and receiving information from the job threads, but it is significantly lighter than interacting with the kernel.&lt;/p&gt;
    &lt;p&gt;But it hasn’t improved the higher level code very much at all—we’ve simply replaced “threads” with “jobs”. The latter two problems hold. We still need to perform an entire dance in order to set up a “wide loop”—a “parallel &lt;code&gt;for&lt;/code&gt;”, which scatters control flow for a problem across both source code, and coherent contexts (CPU cores, call stacks) at runtime.&lt;/p&gt;
    &lt;p&gt;In this concrete case—computing a sum in parallel—this is not a huge concern. Will it compute a sum in parallel? Yes. Does it have very few shared data writes? Yes. Can you parallelize all similarly parallelizable problems this way? Yes. But, we pay the costs of these problems every time we use this mechanism. If we have to pay that cost very frequently throughout a problem, it can become onerous to write, debug, and maintain all of this machinery.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Job System (And Its Flaws)&lt;/head&gt;
    &lt;p&gt;One desirable property of the parallel &lt;code&gt;for&lt;/code&gt; is that all jobs—which execute at roughly the same time, across some number of cores—are identical in their “shape”. Each job thread participating in the problem is executing exactly the same code—we simply parameterize each job slightly differently, to distribute different subproblems to different cores. This makes understanding, predicting, profiling, and debugging such code much simpler.&lt;/p&gt;
    &lt;p&gt;Furthermore, within a parallel &lt;code&gt;for&lt;/code&gt;, each job’s lifetime is scoped by the originating single-core code’s lifetime. Each job begins and ends within some scope—the scope responsible for launching, then joining, all of the jobs. This means no substantial lifetime management complexity occurs—allocations for a parallel &lt;code&gt;for&lt;/code&gt; are as simple as for normal single-core code.&lt;/p&gt;
    &lt;p&gt;But in practice, the mechanism often used to implement parallel &lt;code&gt;for&lt;/code&gt;s—the job system—is rarely only used in this way, which is understandable, given its highly generic structure. For example, it’s also often used to launch a number of heterogeneous jobs. In these cases, it becomes even more difficult to understand the context of a particular job—who launched it, and in what context? It also becomes more difficult to comprehensively understand a system—because there is such a large number of possible configurations of thread states, it can be difficult to ensure a threaded system is robust in all cases.&lt;/p&gt;
    &lt;p&gt;These jobs are also often not bounded by their launcher scope—as such, more engineering must be spent on managing resources, like memory allocations, whose lifetimes are now defined by what happens across multiple threads in multiple contexts.&lt;/p&gt;
    &lt;p&gt;And this is, really, the tip of the iceberg. In more sophisticated systems, one might observe that there are dependencies between jobs, and jobs ought to be implicitly launched when their dependency jobs complete, creating an even longer (and more difficult to inspect) chain of context related to some independent through line of work.&lt;/p&gt;
    &lt;p&gt;Ultimately, this presents recurring writing, reading, debugging, and maintenance costs that don’t exist in normal single-core code. All of the costs incurred by this job system design—whether used in a parallel &lt;code&gt;for&lt;/code&gt; or otherwise—are paid any time new parallel work is introduced, or any time parallel work is maintained.&lt;/p&gt;
    &lt;p&gt;Now, if we have few parts of our code that can be parallelized in this way, then this is not a significant cost.&lt;/p&gt;
    &lt;p&gt;…But that if is doing a lot of heavy lifting.&lt;/p&gt;
    &lt;p&gt;In practice, I’ve found that an enormous number of systems are riddled with opportunities for parallelization, because of a lack of serial dependence between many of their parts. But, if taking advantage of every instance of serial independence requires significantly more engineering than just accepting single-core performance, then in many cases, programmers will opt for the latter.&lt;/p&gt;
    &lt;p&gt;Again—does this mean that a job system cannot be used to do such parallelization in these systems? No. But, it also means that we pay the costs of using this job system—the more moving parts; the extra code and concepts to write, read, and debug—much more frequently, if we’d like to take advantage of this widespread serial independence, or if we’d like any algorithm in particular to scale its performance with the number of cores.&lt;/p&gt;
    &lt;head rend="h2"&gt;Single-Core By Default&lt;/head&gt;
    &lt;p&gt;The critical insight I learned from speaking with Casey on this topic was that a significant reason why these costs arise is because of the careful organization a system needs in order to switch from single-core to multi-core code. Mechanisms like job systems and their special case usage in parallel &lt;code&gt;for&lt;/code&gt;s represent, in some sense, the most conservative application of multi-core code. The vast majority of code is written as single-core, and a few carveouts are made when multi-core is critically important. In other words, code remains single-core by default, and in a few special cases, work is done to briefly hand work off to a multi-core system.&lt;/p&gt;
    &lt;p&gt;Because the context of code execution changes across time—because work is handed off from one system to another—it necessarily requires more code to set up, and it is more difficult to debug and understand the full context at any point in time.&lt;/p&gt;
    &lt;p&gt;But is this the best approach? Perhaps, instead of writing single-core code (which sometimes goes wide) by default, we can write multi-core code (which sometimes goes narrow) by default.&lt;/p&gt;
    &lt;p&gt;What does this look like in practice?&lt;/p&gt;
    &lt;p&gt;There’s a good chance that you’ve already experienced this style in other areas of programming—notably, in GPU shader programming.&lt;/p&gt;
    &lt;p&gt;GPU shaders—like vertex or pixel shaders, used in a traditional GPU rendering pipeline—are written such that they are multi-core by default. You author a single function (the entry point of the shader), but this function is executed on many cores, always, implicitly. The language constructs and rules are arranged in such a way that data reads and writes are always scoped by whatever core happens to be executing the code. A single execution of a vertex shader is scoped to a vertex—a pixel shader to a pixel—and so on.&lt;/p&gt;
    &lt;p&gt;Because the fundamental, underlying architecture is always multi-core by default, and because there is little involvement of each specific shader in how the multi-core parallelism is achieved, GPU programming enjoys enormous performance benefits, and yet as the shader programmer, it feels that there are few costs to pay for it. So few, in fact, that it feels more like artistic scripting, to the degree that someone can build an entire website—Shadertoy—built around rapid-iteration, high-performance, visual GPU scripting.&lt;/p&gt;
    &lt;p&gt;Wait a minute… “high performance”, “rapid-iteration scripting”? It seems like many believe that these are mutually exclusive!&lt;/p&gt;
    &lt;p&gt;Why does CPU programming feel so different?&lt;/p&gt;
    &lt;p&gt;Contrast the GPU programming model to the usual CPU programming model—you author a single function (the entry point of your program), which is scheduled onto a single core only, normally by a kernel scheduler, using a single thread state. This model is, in contrast, single-core by default.&lt;/p&gt;
    &lt;p&gt;Long story short: it doesn’t have to be!&lt;/p&gt;
    &lt;head rend="h2"&gt;Multi-Core By Default&lt;/head&gt;
    &lt;p&gt;Let’s begin by exactly inverting the approach. Instead of having a single thread which kicks off work to many threads, let’s just have many threads, all running the same code, by default. In a sense, let’s have just one big parallel &lt;code&gt;for&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;void BootstrapEntryPoint(void)
{
  Thread threads[NUMBER_OF_CORES] = {0};
  for(S64 thread_idx = 0; thread_idx &amp;lt; NUMBER_OF_CORES; thread_idx += 1)
  {
    threads[thread_idx] = LaunchThread(EntryPoint, (void *)thread_idx);
  }
  for(S64 thread_idx = 0; thread_idx &amp;lt; NUMBER_OF_CORES; thread_idx += 1)
  {
    JoinThread(threads[thread_idx]);
  }
}

void EntryPoint(void *params)
{
  S64 thread_idx = (S64)params;
  // program's actual work occurs here!
}&lt;/code&gt;
    &lt;p&gt;To click into an architecture which assumes a single-threaded entry point, we start with a &lt;code&gt;BootstrapEntryPoint&lt;/code&gt;. But the only work this function actually does is launch all of the threads executing the actual entry point, &lt;code&gt;EntryPoint&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Let’s consider the earlier summation example. First, let’s just take the original single-threaded code, and put it into &lt;code&gt;EntryPoint&lt;/code&gt;, and see how we can continue from there.&lt;/p&gt;
    &lt;code&gt;void EntryPoint(void *params)
{
  S64 thread_idx = (S64)params;

  // we obtain these somehow:
  S64 *values = ...;
  S64 values_count = ...;

  // compute the sum
  S64 sum = 0;
  for(S64 idx = 0; idx &amp;lt; values_count; idx += 1)
  {
    sum += values[idx];
  }
}&lt;/code&gt;
    &lt;p&gt;What is actually happening? Well, we’re “computing the sum across many cores”. That is… technically true! Ship it!&lt;/p&gt;
    &lt;p&gt;There’s just one little problem… This is just as fast as the single-core version, except it also uses enormously more energy, and steals time from other tasks the CPU could be doing, because it is simply duplicating all work on each core.&lt;/p&gt;
    &lt;p&gt;But, if we were to measure this, and consider the real costs, and profile the actual code, the profile would look something like this:&lt;/p&gt;
    &lt;p&gt;Duplication itself is not, in principle, a problem, and it is sometimes not to be avoided, because deduplication can sometimes be more expensive than duplication. For instance, communicating the result of a single &lt;code&gt;add&lt;/code&gt; instruction across many threads—to deduplicate the work of that &lt;code&gt;add&lt;/code&gt;—would be vastly more expensive than simply duplicating the &lt;code&gt;add&lt;/code&gt; itself. We do want deduplication, but only when necessary, or when it actually helps.&lt;/p&gt;
    &lt;p&gt;So, where does it help? Unsurprisingly in this case, the dominating cost—the reason we are using multiple cores at all—is the sum across all elements in &lt;code&gt;values&lt;/code&gt;. We want to distribute different parts of the sum across cores. To start, instead of computing the full sum, we can instead compute a per-thread sum. After each per-thread sum is computed, we can then combine them:&lt;/p&gt;
    &lt;code&gt;void EntryPoint(void *params)
{
  S64 thread_idx = (S64)params;

  // we obtain these somehow:
  S64 *values = ...;
  S64 values_count = ...;

  // decide this thread's subset of the sum
  S64 thread_first_value_idx = ???;
  S64 thread_opl_value_idx = ???; // one past last

  // compute the thread sum
  S64 thread_sum = 0;
  for(S64 idx = thread_first_value_idx;
      idx &amp;lt; thread_opl_value_idx;
      idx += 1)
  {
    thread_sum += values[idx];
  }

  // combine the thread sums
  S64 sum = ???;
}&lt;/code&gt;
    &lt;p&gt;We have two blanks to fill in:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;How do we decide each thread’s subset of work?&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;How do we combine all thread sums?&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Let’s tackle each.&lt;/p&gt;
    &lt;head rend="h3"&gt;1. Deciding Per-Thread Work&lt;/head&gt;
    &lt;p&gt;Currently, the only input I’ve provided each thread is its index, which would be in [0, N), where N is the number of threads. This is stored in the local variable &lt;code&gt;thread_idx&lt;/code&gt;, which will have a different value in [0, N) for each thread. This is an easy example, because a good way to distribute the sum work across all threads is to uniformly distribute the number of values to sum amongst the threads. This means we are simply mapping [0, M) to [0, N), where M is the number of values—&lt;code&gt;values_count&lt;/code&gt;—and N is the number of threads.&lt;/p&gt;
    &lt;p&gt;We can almost compute this as follows:&lt;/p&gt;
    &lt;code&gt;S64 values_count = ...;
S64 thread_idx = ...;
S64 thread_count = NUMBER_OF_CORES;

S64 values_per_thread = values_count / thread_count;
S64 thread_first_value_idx = values_per_thread * thread_idx;
S64 thread_opl_value_idx = thread_first_value_idx + values_per_thread;&lt;/code&gt;
    &lt;p&gt;This is almost right, but only almost, because we also need to account for the case where &lt;code&gt;values_count&lt;/code&gt; is not cleanly subdivided by &lt;code&gt;thread_count&lt;/code&gt;. Because our &lt;code&gt;values_per_thread&lt;/code&gt; will truncate to the next lowest integer, this current distribution will underestimate the number of values we need to compute per thread, by anywhere from 0 (if it divides cleanly) to &lt;code&gt;thread_count-1&lt;/code&gt; values—or in other words, the remainder of the division.&lt;/p&gt;
    &lt;p&gt;Thus, the number of values this division underestimates by—the “leftovers”—can be computed as follows:&lt;/p&gt;
    &lt;code&gt;S64 leftover_values_count = values_count % thread_count;&lt;/code&gt;
    &lt;p&gt;We can then distribute these leftovers amongst the first &lt;code&gt;leftover_values_count&lt;/code&gt; threads:&lt;/p&gt;
    &lt;code&gt;// compute the values-per-thread, &amp;amp; number of leftovers
S64 values_per_thread = values_count / thread_count;
S64 leftover_values_count = values_count % thread_count;

// determine if the current thread gets a leftover
// (we distribute them amongst the first threads in the group)
B32 thread_has_leftover = (thread_idx &amp;lt; leftover_values_count);

// decide on how many leftovers have been distributed before this
// thread's range (just the thread index, clamped by the number of
// leftovers)
S64 leftovers_before_this_thread_idx = 0;
if(thread_has_leftover)
{
  leftovers_before_this_thread_idx = thread_idx;
}
else
{
  leftovers_before_this_thread_idx = leftover_values_count;
}

// decide on the [first, opl) range:
// we shift `first` by the number of leftovers we've placed earlier,
// and we shift `opl` by 1 if we have a leftover.
S64 thread_first_value_idx = (values_per_thread * thread_idx +
                              leftovers_before_this_thread_idx);
S64 thread_opl_value_idx = thread_first_value_idx + values_per_thread;
if(thread_has_leftover)
{
  thread_opl_value_idx += 1;
}&lt;/code&gt;
    &lt;p&gt;Or more succinctly:&lt;/p&gt;
    &lt;code&gt;S64 values_per_thread = values_count / thread_count;
S64 leftover_values_count = values_count % thread_count;
B32 thread_has_leftover = (thread_idx &amp;lt; leftover_values_count);
S64 leftovers_before_this_thread_idx = (thread_has_leftover
                                        ? thread_idx
                                        : leftover_values_count);
S64 thread_first_value_idx = (values_per_thread * thread_idx +
                              leftovers_before_this_thread_idx);
S64 thread_opl_value_idx = (thread_first_value_idx + values_per_thread + 
                            !!thread_has_leftover);&lt;/code&gt;
    &lt;p&gt;Now, using this &lt;code&gt;[first, opl)&lt;/code&gt; calculation, we can arrange each thread to only loop over its associated range, thus not duplicating all sum work done by other threads.&lt;/p&gt;
    &lt;head rend="h3"&gt;2. Combining All Thread Sums&lt;/head&gt;
    &lt;p&gt;Now, how might we combine each thread’s sum to form the total sum? There are two simple options available: (a) we can define a global sum counter to which each thread atomically adds (using atomic add intrinsics) its per-thread sum, or (b) we can define global storage which stores all thread sums, and each thread can duplicate the work of computing the total sum.&lt;/p&gt;
    &lt;p&gt;For (a), we just need to define &lt;code&gt;sum&lt;/code&gt; as &lt;code&gt;static&lt;/code&gt;, and atomically add each &lt;code&gt;thread_sum&lt;/code&gt; to it:&lt;/p&gt;
    &lt;code&gt;static S64 sum = 0;

void EntryPoint(void *params)
{
  // ...
  // compute `thread_sum`
  // ...
  AtomicAddEval64(&amp;amp;sum, thread_sum);
}&lt;/code&gt;
    &lt;p&gt;Note: This has a downside in that only one thread group can be executing this codepath at once. This is sometimes not a practical concern, since if we are going wide at all, we are often using all available cores to do so, and it is likely not beneficial to also have some other thread group executing the same codepath for a different purpose. That said, it’s now a new hidden restriction of this code, and it can be a critical problem. There are some techniques we can use to solve this problem, which I will cover later—for now, the important concept is that the data is shared across participating threads.&lt;/p&gt;
    &lt;p&gt;For (b), we’d instead have a global table, and duplicate the work of summing across all thread sums. But we can only do that after we know that each thread has completed its summation work—otherwise we’d potentially add some other thread’s sum before it was actually computed!&lt;/p&gt;
    &lt;code&gt;static S64 thread_sums[NUMBER_OF_CORES] = {0};

void EntryPoint(void *params)
{
  // ...
  // compute `thread_sum`
  // ...
  thread_sums[thread_idx] = thread_sum;

  // ??? need to wait here for all threads to finish!

  S64 sum = 0;
  for(S64 t_idx = 0; t_idx &amp;lt; NUMBER_OF_CORES; t_idx += 1)
  {
    sum += thread_sums[t_idx];
  }
}&lt;/code&gt;
    &lt;p&gt;That extra waiting requirement might seem like an argument in favor of (a), but we’d actually need the same mechanism if we did (a) once we wanted to actually use the sum—we’d need to wait for all threads to reach some point, so that we’d know that they’d all atomically updated &lt;code&gt;sum&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;We can use a barrier to do this. In (a):&lt;/p&gt;
    &lt;code&gt;static S64 sum = 0;
static Barrier barrier = {0};

void EntryPoint(void *params)
{
  // ...
  // compute `thread_sum`
  // ...
  AtomicAddEval64(&amp;amp;sum, thread_sum);
  BarrierSync(barrier);
  // `sum` is now fully computed!
}&lt;/code&gt;
    &lt;p&gt;And in (b):&lt;/p&gt;
    &lt;code&gt;static S64 thread_sums[NUMBER_OF_CORES] = {0};
static Barrier barrier = {0};

void EntryPoint(void *params)
{
  // ...
  // compute `thread_sum`
  // ...
  thread_sums[thread_idx] = thread_sum;

  BarrierSync(barrier);

  S64 sum = 0;
  for(S64 t_idx = 0; t_idx &amp;lt; NUMBER_OF_CORES; t_idx += 1)
  {
    sum += thread_sums[t_idx];
  }
  // `sum` is now fully computed!
}&lt;/code&gt;
    &lt;p&gt;At this point, we have everything we need for both (a) and (b). Both are simple, and likely negligibly different. (a) requires atomic summation across all the threads, which implies hardware-level synchronization, whereas (b) duplicates the sum of all per-thread sums—these likely subtly differ in there costs, but not by much when compared to the actual &lt;code&gt;values&lt;/code&gt; summation.&lt;/p&gt;
    &lt;head rend="h2"&gt;Going Narrow&lt;/head&gt;
    &lt;p&gt;Now, while I hope this summation example has been a useful introduction, I know it’s a bit contrived, and incomplete. Specifically, it’s missing two key parts of any program: inputs and outputs. What are we doing with this sum, and how do we use that in producing some form of output, and how do obtain the inputs, and store them in &lt;code&gt;values&lt;/code&gt; and &lt;code&gt;values_count&lt;/code&gt;?&lt;/p&gt;
    &lt;p&gt;Let’s barely extend the summation example with stories for the inputs and outputs. For the inputs, let’s say that we read &lt;code&gt;values&lt;/code&gt; out of a binary file, which just contains the whole array stored as it will be in memory. For the outputs, let’s say that we just print the sum to &lt;code&gt;stdout&lt;/code&gt; with &lt;code&gt;printf&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Printing out the sum will be the easiest part, so let’s begin with that.&lt;/p&gt;
    &lt;p&gt;In single-core code, after computing the sum, we’d simply call &lt;code&gt;printf&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;S64 sum = ...;
// ...
printf("Sum: %I64d", sum);&lt;/code&gt;
    &lt;p&gt;We can start by just doing the same in our “multi-core by default” code. What we’ll find is that our output looks something like this:&lt;/p&gt;
    &lt;code&gt;Sum: 12345678
Sum: 12345678
Sum: 12345678
Sum: 12345678
Sum: 12345678
Sum: 12345678
Sum: 12345678
Sum: 12345678&lt;/code&gt;
    &lt;p&gt;And obviously, we only want our many cores to be involved with the majority of the computation, but we only need one thread to do the actual &lt;code&gt;printf&lt;/code&gt;. In other words, we need to go narrow. Luckily, going narrow from wide code is much simpler than going wide from narrow code:&lt;/p&gt;
    &lt;code&gt;S64 sum = ...;
// ...
if(thread_idx == 0)
{
  printf("Sum: %I64d", sum);
}&lt;/code&gt;
    &lt;p&gt;We simply need to mask away the work from all threads except one.&lt;/p&gt;
    &lt;p&gt;Now, let’s consider the input problem. We need to compute &lt;code&gt;values_count&lt;/code&gt; based on the size of some input file, allocate storage for &lt;code&gt;values&lt;/code&gt;, and then fill &lt;code&gt;values&lt;/code&gt; by reading all data from the file.&lt;/p&gt;
    &lt;p&gt;Single-threaded code to do that might look something like this:&lt;/p&gt;
    &lt;code&gt;char *input_path = ...;
File file = FileOpen(input_path);
S64 size = SizeFromFile(file);
S64 values_count = (size / sizeof(S64));
S64 *values = (S64 *)Allocate(values_count * sizeof(values[0]));
FileRead(file, 0, values_count * sizeof(values[0]), values);
FileClose(file);&lt;/code&gt;
    &lt;p&gt;So, naturally, one option is to simply do this narrow:&lt;/p&gt;
    &lt;code&gt;if(thread_idx == 0)
{
  char *input_path = ...;
  File file = FileOpen(input_path);
  S64 size = SizeFromFile(file);
  S64 values_count = (size / sizeof(S64));
  S64 *values = (S64 *)Allocate(values_count * sizeof(values[0]));
  FileRead(file, 0, values_count * sizeof(values[0]), values);
  FileClose(file);
}
BarrierSync(barrier); // `values` and `values_count` ready after this point&lt;/code&gt;
    &lt;p&gt;This will work, but we somehow need to broadcast the computed values of &lt;code&gt;values&lt;/code&gt; and &lt;code&gt;values_count&lt;/code&gt; across all threads. One easy way to do this is simply to pull them out as &lt;code&gt;static&lt;/code&gt;, like we did for shared data earlier:&lt;/p&gt;
    &lt;code&gt;static S64 values_count = 0;
static S64 *values = 0;
if(thread_idx == 0)
{
  char *input_path = ...;
  File file = FileOpen(input_path);
  S64 size = SizeFromFile(file);
  values_count = (size / sizeof(S64));
  values = (S64 *)Allocate(values_count * sizeof(values[0]));
  FileRead(file, 0, values_count * sizeof(values[0]), values);
  FileClose(file);
}
BarrierSync(barrier);&lt;/code&gt;
    &lt;p&gt;But consider that we might not want to do this completely single-core. It might be the case that it’s more efficient to issue &lt;code&gt;FileRead&lt;/code&gt;s from many threads, rather than just one. In practice, this is partly true (although, depending on the full stack—the kernel, the storage drive hardware, and so on—it may not be beneficial past some number of threads, and for certain read sizes).&lt;/p&gt;
    &lt;p&gt;So let’s say we’d like to do the &lt;code&gt;FileRead&lt;/code&gt;s wide now also. We need to still allocate &lt;code&gt;values&lt;/code&gt; on a single thread, but once that is done, we can distribute the rest of the work trivially:&lt;/p&gt;
    &lt;code&gt;// we can open the file on all threads (though for some reasons
// we may want to deduplicate this too - for simplicity I am
// keeping it on all threads)
File file = FileOpen(input_path);

// calculate number of values and allocate (only single thread)
static S64 values_count = 0;
static S64 *values = 0;
if(thread_idx == 0)
{
  S64 size = SizeFromFile(file);
  values_count = (size / sizeof(S64));
  values = (S64 *)Allocate(values_count * sizeof(values[0]));
}
BarrierSync(barrier);

// compute thread's range of values (same calculation as before)
S64 thread_first_value_idx = ...;
S64 thread_opl_value_idx = ...;

// do read of this thread's portion
S64 num_values_this_thread = (thread_opl_value_idx - thread_first_value_idx);
FileRead(file,
         thread_first_value_idx*sizeof(values[0]),
         num_values_this_thread*sizeof(values[0]),
         values + thread_first_value_idx);

// close file on all threads
FileClose(file);&lt;/code&gt;
    &lt;p&gt;It’s much simpler, now—compared to, say, the original parallel &lt;code&gt;for&lt;/code&gt; case—to simply take another part of the problem like this, and to also distribute it amongst threads, simply because wide is the default shape of the program.&lt;/p&gt;
    &lt;p&gt;Instead of spending most programming time acting like we’re on a single-core machine, we simply assume our actual circumstances, which is that we have several cores, and sometimes we need to tie it all together with a few serial dependencies.&lt;/p&gt;
    &lt;head rend="h2"&gt;Non-Uniform Work Distributions&lt;/head&gt;
    &lt;p&gt;Let’s take a look at our earlier calculations to distribute portions of the &lt;code&gt;values&lt;/code&gt; array:&lt;/p&gt;
    &lt;code&gt;S64 values_per_thread = values_count / thread_count;
S64 leftover_values_count = values_count % thread_count;
B32 thread_has_leftover = (thread_idx &amp;lt; leftover_values_count);
S64 leftovers_before_this_thread_idx = (thread_has_leftover
                                        ? thread_idx
                                        : leftover_values_count);
S64 thread_first_value_idx = (values_per_thread * thread_idx +
                              leftovers_before_this_thread_idx);
S64 thread_opl_value_idx = (thread_first_value_idx + values_per_thread + 
                            !!thread_has_leftover);&lt;/code&gt;
    &lt;p&gt;This was an easy case, because uniformly dividing portions of &lt;code&gt;values&lt;/code&gt; produces nearly uniform work across all cores.&lt;/p&gt;
    &lt;p&gt;If, in a different scenario, we don’t produce nearly uniform work across all cores, we have a problem: some cores will finish their work in some section long before others, and they’ll be stuck at the next barrier synchronization point while the other cores finish. This diminishes the returns we obtain from going wide in the first place.&lt;/p&gt;
    &lt;p&gt;Thus, it’s always important to uniformly distribute work whenever it’s possible. The exact strategy for doing so will vary by problem. But I’ve noticed three common strategies:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Uniformly distributing inputs produces uniformly distributed work (the case with the sum). So, we can decide the work distribution upfront.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Each portion of an input requires a variable amount of per-core work. The work is relatively bounded, and there are many portions of input (larger than the core count). So, we can dynamically grab work on each core, so cores which complete smaller work first receive more, whereas cores that are stuck on longer work leave more units of work for other cores.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Each portion of an input requires a variable amount of per-core work, but there is a small number (lower than the core count) of potentially very long sequences of work. We can attempt to redesign this algorithm such that it can be distributed more uniformly instead.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We’ve already covered the first strategy with the sum example—let’s look at the latter two.&lt;/p&gt;
    &lt;head rend="h3"&gt;Dynamically Assigning Many Variable-Work Tasks&lt;/head&gt;
    &lt;p&gt;Let’s consider a case where we have many units of work—“tasks”—and we’d like to distribute these tasks across cores. We may start by distributing the tasks in the same way that we distributed values to sum in the earlier example:&lt;/p&gt;
    &lt;code&gt;Task *tasks = ...;
S64 tasks_count = ...;
S64 thread_first_task_idx = ...;
S64 thread_opl_task_idx = ...;
for(S64 task_idx = thread_first_task_idx;
    task_idx &amp;lt; thread_last_task_idx;
    task_idx += 1)
{
  // do task
}&lt;/code&gt;
    &lt;p&gt;If each task requires a variable amount of work, then a profile of the program might look something like this:&lt;/p&gt;
    &lt;p&gt;Instead of deciding the task division upfront, we can dynamically assign tasks, such that the threads which are occupied (performing larger tasks) are not assigned more tasks until they’re done, and threads which complete shorter tasks earlier are quickly assigned more tasks, if available.&lt;/p&gt;
    &lt;p&gt;We can do that simply with a shared atomic counter, which each thread increments:&lt;/p&gt;
    &lt;code&gt;Task *tasks = ...;
S64 tasks_count = ...;

// set up the counter
static S64 task_take_counter = 0;
task_take_counter = 0;
BarrierSync(barrirer);

// loop on all threads - take tasks as long as we can
for(;;)
{
  S64 task_idx = AtomicIncEval64(&amp;amp;task_take_counter) - 1;
  if(task_idx &amp;gt;= tasks_count)
  {
    break;
  }
  // do task
}&lt;/code&gt;
    &lt;p&gt;This will dynamically distribute tasks across the cores, so that a profile of the program will look more like this:&lt;/p&gt;
    &lt;head rend="h3"&gt;Redesigning Algorithms For Uniform Work Distribution&lt;/head&gt;
    &lt;p&gt;Dynamically assigning tasks to cores will help in many cases, but it gets less effective if tasks are highly variable, to the point of sometimes being exceedingly long (e.g. many times more expensive than smaller tasks), or if there are fewer tasks than the number of cores.&lt;/p&gt;
    &lt;p&gt;In these cases, it can often be helpful to reconsider the serial independencies within a single task, or whether the same effect as a highly serially-dependent algorithm can be provided by an alternative highly serially-independent algorithm. Can a single task be subdivided further? Can it be performed in a different way? Can serially-dependent work be untangled from heavier work which can be done in a serially-independent way?&lt;/p&gt;
    &lt;p&gt;The answers to such questions are highly problem-specific, so it’s impossible to offer substantially more useful advice while staying similarly generic. But to illustrate that it’s sometimes possible—even when counterintuitive—I have an example problem from my recent work, in which finding more uniform work distribution required switching from a single-threaded comparison sort to a highly parallelizable radix sort.&lt;/p&gt;
    &lt;p&gt;In this problem, I had a small number of arrays that needed to be sorted, but these arrays were potentially very large, thus requiring a fairly expensive sorting pass.&lt;/p&gt;
    &lt;p&gt;My first approach was to simply distribute the comparison sort tasks themselves, so I would sort one array on a single core, while other cores would be sorting other arrays. But as I’ve said, there were a relatively small number of arrays, and the arrays were large, so sorting was fairly expensive—thus, most cores were doing nothing, and simply waiting for the small number of cores performing sorts to finish.&lt;/p&gt;
    &lt;p&gt;This approach would’ve worked fine if I had a larger number of smaller tasks. In fact, another part of the same program does distribute single-threaded comparison sort tasks in this way, because in that part of the problem, there are a larger number of smaller tasks.&lt;/p&gt;
    &lt;p&gt;In this case, I needed to sort array elements based on 64-bit integer keys. After sorting, the elements needed to be ordered such that their associated keys were ascending in value.&lt;/p&gt;
    &lt;p&gt;Conveniently, this can be done with a radix sort. I won’t cover the full details of the algorithm here (although I briefly covered it during a stream recently, which I recorded and uploaded here), but the important detail is that a radix sort requires a fixed number of O(N) passes over the array, and huge portions of work in each pass can be distributed uniformly across cores (in the same way that we distributed the sum work earlier).&lt;/p&gt;
    &lt;p&gt;Now, all cores participate in every larger sorting task, but they only perform a nearly uniform fraction of the work in each sort. This results in a much more uniform work distribution, and thus a much shorter total time spend sorting:&lt;/p&gt;
    &lt;p&gt;This is just one concrete example a larger pattern I’ve noticed: In many problems, upon close examination, some serial dependencies can either vanish, or they can be untangled from heavier work.&lt;/p&gt;
    &lt;p&gt;In some problems, serially-dependent parts of the algorithm can be isolated, such that they prepare data which allows the rest of the algorithm to be done in a serially-independent fashion. Imagine a program which walks a linked list early, on a single core, to compute a layout in a serially-dependent way. This layout can then allow subsequent work to execute just using the full layout, rather than forcing that subsequent work to also include the serially-dependent pointer chasing.&lt;/p&gt;
    &lt;head rend="h2"&gt;Single-Threaded, Just Better&lt;/head&gt;
    &lt;p&gt;Code which is multi-core by default feels like normal single-threaded code, just with a few extra constructs that express the missing information needed to execute on multiple cores. This style has some useful and interesting properties, which make it preferable in many contexts to many of the popular styles of multi-core code found in the wild.&lt;/p&gt;
    &lt;head rend="h3"&gt;Single-Core as a Parameterization&lt;/head&gt;
    &lt;p&gt;One interesting implication of code written in this way—to be multi-core by default—is that it offers a strict superset of functionality than code which is written to be single-core, because “multi-core” in this case includes “single-core”, as one possible case. We can use the same code to execute on only a single core, simply by instead executing our entry point on a single thread, and parameterizing that thread with &lt;code&gt;thread_idx = 0&lt;/code&gt; and &lt;code&gt;thread_count = 1&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;In that case, one core necessarily receives all of the work. &lt;code&gt;BarrierSync&lt;/code&gt;s turn into no-ops, since there is only one thread (there are no other threads to wait for). Thus, it is equivalent to single-core functionality.&lt;/p&gt;
    &lt;head rend="h3"&gt;Simpler Debugging&lt;/head&gt;
    &lt;p&gt;This style of multi-core programming requires far less busywork and machinery in order to use multiple cores for some codepath. But one of the problems I mentioned with job systems and parallel &lt;code&gt;for&lt;/code&gt;s earlier was not only that they require more busywork and machinery, but that they’re also more difficult to debug.&lt;/p&gt;
    &lt;p&gt;In this case, debugging is much simpler—in fact, it doesn’t look all that different from single-core debugging. At every point, you have access to a full call stack, and all contextual data which led to whatever point in time that you happen to be inspecting in a debugger.&lt;/p&gt;
    &lt;p&gt;Furthermore, because all threads involved are nearly homogeneous (rather than the generic job system, where all threads are heterogeneous at all times), debugging a single thread is a lot like debugging all threads. This is especially true because—between barrier synchronization points—the threads are all executing the same code. In other words, the context and state on one thread is likely to be highly informative of the context and state on all threads.&lt;/p&gt;
    &lt;head rend="h3"&gt;Access To The Full Stack&lt;/head&gt;
    &lt;p&gt;Because the context for some through line of computation frequently changes in traditional job systems, extra machinery must be involved to pipe data from one context to another—across jobs and threads—and maintain any associated allocations and lifetimes. But in this style, resources and lifetimes are kept as simple as they are in single-threaded code.&lt;/p&gt;
    &lt;p&gt;The stack, containing all contextual state at any point, becomes a single bucket for useful thread-local storage. In a job system, the stack is useful multi-core thread-local storage, but only for the duration of the job. The job is equivalent to the inner body of a &lt;code&gt;for&lt;/code&gt;—this is a tiny, fragmentary scope. With this style, the entire stack is available, at any point.&lt;/p&gt;
    &lt;head rend="h2"&gt;Codebase Support&lt;/head&gt;
    &lt;p&gt;I’ve found some useful patterns which can be extracted and widely used in code which is multi-core by default. These patterns seem as widely applicable as arenas—as such, they can be a useful addition to a codebase’s base layer.&lt;/p&gt;
    &lt;head rend="h3"&gt;Thread-Local Group Data&lt;/head&gt;
    &lt;head rend="h4"&gt;&lt;code&gt;LaneIdx()&lt;/code&gt;, &lt;code&gt;LaneCount()&lt;/code&gt;, &lt;code&gt;LaneSync()&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;The earlier example code frequently uses the &lt;code&gt;thread_idx&lt;/code&gt;, &lt;code&gt;thread_count&lt;/code&gt;, and &lt;code&gt;barrier&lt;/code&gt; variables. Passing these to every codepath which might need them is redundant and cumbersome. As such, they are good candidates for thread-local storage.&lt;/p&gt;
    &lt;p&gt;In my code, I’ve bundled these into the base layer’s “thread context”, which is a thread-local structure which is universally accessible—it’s where, for example, thread-local scratch arenas are stored.&lt;/p&gt;
    &lt;p&gt;This provides all code the ability to read its index within a thread group (&lt;code&gt;thread_idx&lt;/code&gt;), or the number of threads in its group (&lt;code&gt;thread_count&lt;/code&gt;), and to synchronize with other lanes (&lt;code&gt;BarrierSync&lt;/code&gt;).&lt;/p&gt;
    &lt;p&gt;As I suggested earlier, any code’s caller can choose “how wide”—how many cores—they’d like to execute that code, by configuring this per-thread storage. In general, shallow parts of a call stack can decide how wide deeper parts of a call stack are executed. If some work is expected to be small (to the point where it doesn’t benefit from being executed on many cores), and other cores can be doing other useful work, then before doing that work, the calling code can simply set &lt;code&gt;thread_idx = 0&lt;/code&gt;, &lt;code&gt;thread_count = 1&lt;/code&gt;, and &lt;code&gt;barrier = {0}&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;This means that a single thread may participate in many different thread groups—in other words, &lt;code&gt;thread_idx&lt;/code&gt; and &lt;code&gt;thread_count&lt;/code&gt; are not static within the execution of a single thread. Therefore, I found it appropriate to introduce another disambiguating term: lane. A lane is distinct from a thread in that a lane is simply one thread within a potentially-temporary group of threads, all executing the same code.&lt;/p&gt;
    &lt;p&gt;As such, in my terminology, &lt;code&gt;thread_idx&lt;/code&gt; is exposed as &lt;code&gt;LaneIdx()&lt;/code&gt;, and &lt;code&gt;thread_count&lt;/code&gt; is exposed as &lt;code&gt;LaneCount()&lt;/code&gt;. To synchronize with other lanes, a helper &lt;code&gt;LaneSync()&lt;/code&gt; is available, which just waits on the thread context’s currently selected barrier.&lt;/p&gt;
    &lt;head rend="h3"&gt;Uniformly Distributing Ranges Amongst Lanes&lt;/head&gt;
    &lt;head rend="h4"&gt;
      &lt;code&gt;LaneRange(count)&lt;/code&gt;
    &lt;/head&gt;
    &lt;p&gt;I’ve mentioned the following computation multiple times:&lt;/p&gt;
    &lt;code&gt;S64 values_per_thread = values_count / thread_count;
S64 leftover_values_count = values_count % thread_count;
B32 thread_has_leftover = (thread_idx &amp;lt; leftover_values_count);
S64 leftovers_before_this_thread_idx = (thread_has_leftover
                                        ? thread_idx
                                        : leftover_values_count);
S64 thread_first_value_idx = (values_per_thread * thread_idx +
                              leftovers_before_this_thread_idx);
S64 thread_opl_value_idx = (thread_first_value_idx + values_per_thread + 
                            !!thread_has_leftover);&lt;/code&gt;
    &lt;p&gt;This is useful whenever a uniformly distributed range corresponds to uniformly distributed work amongst cores. As I mentioned, this is sometimes not desirable. But nevertheless, it’s an extremely common case. As such, I found it useful to expose this as &lt;code&gt;LaneRange(count)&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;Rng1U64 range = LaneRange(count);
for(U64 idx = range.min; idx &amp;lt; range.max; idx += 1)
{
  // ...
}&lt;/code&gt;
    &lt;head rend="h3"&gt;Broadcasting Data Across Lanes&lt;/head&gt;
    &lt;head rend="h4"&gt;
      &lt;code&gt;LaneSyncU64(value_ptr, source_lane_idx)&lt;/code&gt;
    &lt;/head&gt;
    &lt;p&gt;Earlier, we saw that when a variable needs to be shared across lanes, it can simply be marked as &lt;code&gt;static&lt;/code&gt;. I mentioned that this has the unfortunate downside that only a single group can be executing the code at one time, since one group of lanes could trample over the &lt;code&gt;static&lt;/code&gt; variable while another group is still using it. As I mentioned, this is sometimes not a concern (since it’s desirable to only have a single lane group executing some code), but it invisibly makes code inapplicable for some cases.&lt;/p&gt;
    &lt;p&gt;For example, let’s suppose I have some code which is written to be multi-core by default. Depending on the inputs to this codepath, I may want this to be executed—on the same inputs—with all of my cores. But in other cases, I may want this to be executed with only a single core—I may still want to execute this codepath on other cores, but for different inputs. That requires many lane groups to be executing the code at the same time, thus disqualifying the use of &lt;code&gt;static&lt;/code&gt; to share data amongst lanes within the same group.&lt;/p&gt;
    &lt;p&gt;To address this, I also created a simple mechanism to broadcast small amounts of data across lanes.&lt;/p&gt;
    &lt;p&gt;Each thread context also stores—in addition to a lane index, lane count, and lane group barrier—a pointer to a shared buffer, which is the same value for all lanes in the same group.&lt;/p&gt;
    &lt;p&gt;If one lane has a value which it needs to be broadcasted to other lanes—for instance, if it allocated a buffer that the other lanes are about to fill—then that value can be communicated in the following way:&lt;/p&gt;
    &lt;code&gt;U64 broadcast_size = ...;         // the number of bytes to broadcast
U64 broadcast_src_lane_idx = ...; // the index of the broadcasting lane
void *lane_local_storage = ...;   // unique for each lane
void *lane_shared_storage = ...;  // same for all lanes

// copy from broadcaster -&amp;gt; shared
if(LaneIdx() == broadcast_src_lane_idx)
{
  MemoryCopy(lane_shared_storage, lane_local_storage, broadcast_size);
}
LaneSync();

// copy from shared -&amp;gt; broadcastees
if(LaneIdx() != broadcast_src_lane_idx)
{
  MemoryCopy(lane_local_storage, lane_shared_storage, broadcast_size);
}
LaneSync();&lt;/code&gt;
    &lt;p&gt;I’ve found that this shared buffer just needs to be big enough to broadcast 8 bytes, given that most small data can be broadcasted with a small number of 8 byte broadcasts, and larger data can be broadcasted with a single pointer broadcast.&lt;/p&gt;
    &lt;p&gt;I expose this mechanism with the following API:&lt;/p&gt;
    &lt;code&gt;U64 some_value = 0;
U64 src_lane_idx = 0;
LaneSyncU64(&amp;amp;some_value, src_lane_idx);
// after this line, all lanes share the same value for `some_value`&lt;/code&gt;
    &lt;p&gt;It might be used in the following way:&lt;/p&gt;
    &lt;code&gt;// set `values_count`, allocate for `values`, on lane 0, then
// broadcast their values to all other lanes:
S64 values_count = 0;
S64 *values = 0;
if(LaneIdx() == 0)
{
  values_count = ...;
  values = Allocate(sizeof(values[0]) * values_count);
}
LaneSyncU64(&amp;amp;values_count, 0);
LaneSyncU64(&amp;amp;values, 0);&lt;/code&gt;
    &lt;head rend="h3"&gt;Revisiting The Summation Example&lt;/head&gt;
    &lt;p&gt;With the above mechanisms, we can program the original summation example with the following steps.&lt;/p&gt;
    &lt;p&gt;First, we load the values from the file:&lt;/p&gt;
    &lt;code&gt;U64 values_count = 0;
S64 *values = 0;
{
  File file = FileOpen(input_path);
  values_count = SizeFromFile(file) / sizeof(values[0]);
  if(LaneIdx() == 0)
  {
    values = (S64 *)Allocate(values_count * sizeof(values[0]));
  }
  LaneSyncU64(&amp;amp;values);
  Rng1U64 value_range = LaneRange(values_count);
  Rng1U64 byte_range = R1U64(value_range.min * sizeof(values[0]),
                             value_range.max * sizeof(values[0]));
  FileRead(file, byte_range, values + value_range.min);
  FileClose(file);
}
LaneSync();&lt;/code&gt;
    &lt;p&gt;Then, we perform the sum across all lanes:&lt;/p&gt;
    &lt;code&gt;// grab the shared counter
S64 sum = 0;
S64 *sum_ptr = &amp;amp;sum;
LaneSyncU64(&amp;amp;sum_ptr, 0);

// calculate lane's sum
S64 lane_sum = 0;
Rng1U64 range = LaneRange(values_count);
for(U64 idx = range.min; idx &amp;lt; range.max; idx += 1)
{
  lane_sum += values[idx];
}

// contribute this lane's sum to the total sum
AtomicAddEval64(sum_ptr, lane_sum);
LaneSync();
LaneSyncU64(&amp;amp;sum, 0);&lt;/code&gt;
    &lt;p&gt;And finally, we output the sum value:&lt;/p&gt;
    &lt;code&gt;if(LaneIdx() == 0)
{
  printf(”Sum: %I64d\n”);
}&lt;/code&gt;
    &lt;head rend="h2"&gt;Closing Thoughts&lt;/head&gt;
    &lt;p&gt;The concepts I’ve shared in this post represent what I feel is a fundamental shift in how CPU code can be expressed, compared to the normal single-core code all programmers are familiar with. Through small, additional annotations to code—basic concepts like &lt;code&gt;LaneIdx()&lt;/code&gt;, &lt;code&gt;LaneCount()&lt;/code&gt;, and &lt;code&gt;LaneSync()&lt;/code&gt;—all code can contain the information necessary to be executed wide, using multiple cores to better take advantage of serial independence.&lt;/p&gt;
    &lt;p&gt;The same exact code can also be executed on a single core, meaning through these extra annotations, that code becomes strictly more flexible—at the low level—than its single-core equivalent which does not have these annotations.&lt;/p&gt;
    &lt;p&gt;Note that this is still not a comprehensive family of multithreading techniques, because it is strictly zooming in on one unique timeline of work, and how a single timeline can be accelerated using the fundamental multi-core reality of modern machines. But consider that programs often require multiple heterogeneous timelines of work, where one lane group is not in lockstep with others, and thus should not prohibit others from making progress.&lt;/p&gt;
    &lt;p&gt;But what I appreciate about the ideas in this post is that they do not unnecessarily introduce extra timelines. Communication between two heterogeneous timelines has intrinsic, relativity-related complexity. Those will always be necessary. But why pay that complexity cost everywhere, to accomplish simple multi-core execution?&lt;/p&gt;
    &lt;p&gt;I’m aware that, for many, these ideas are old news—indeed, everyone learns different things at different times. But in my own past programming, and when I look at the programming of many others, it seems that there is an awful lot of overengineering to do what seems trivial, and indeed what is trivial in other domains (like shader programming). So, for at least many people, these concepts do not seem well-known or old (even if they are in some circles and domains).&lt;/p&gt;
    &lt;p&gt;In any case, the concepts I’ve shared in this post have been dramatically helpful in improving my ability to structure multi-core code without overcomplication, and it seemed like an important-enough shift to carefully document it here.&lt;/p&gt;
    &lt;p&gt;I hope it was similarly helpful to you, if you didn’t know the concepts, or if you did, I hope it was nonetheless interesting.&lt;/p&gt;
    &lt;p&gt;If you enjoyed this post, please consider subscribing. Thanks for reading.&lt;/p&gt;
    &lt;p&gt;-Ryan&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45536124</guid><pubDate>Fri, 10 Oct 2025 07:11:06 +0000</pubDate></item><item><title>A Story About Bypassing Air Canada's In-Flight Network Restrictions</title><link>https://ramsayleung.github.io/en/post/2025/a_story_about_bypassing_air_canadas_in-flight_network_restrictions/</link><description>&lt;doc fingerprint="b728f5113168f28d"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;1 Prologue&lt;/head&gt;
    &lt;p&gt;A while ago, I took a flight from Canada back to Hong Kong - about 12 hours in total with Air Canada.&lt;/p&gt;
    &lt;p&gt;Interestingly, the plane actually had WiFi:&lt;/p&gt;
    &lt;p&gt;However, the WiFi had restrictions. For Aeroplan members who hadn’t paid, it only offered Free Texting, meaning you could only use messaging apps like WhatsApp, Snapchat, and WeChat to send text messages, but couldn’t access other websites.&lt;/p&gt;
    &lt;p&gt;If you wanted unlimited access to other websites, it would cost CAD $30.75:&lt;/p&gt;
    &lt;p&gt;And if you wanted to watch videos on the plane, that would be CAD $39:&lt;/p&gt;
    &lt;p&gt;I started wondering: for the Free Texting service, could I bypass the messaging app restriction and access other websites freely?&lt;/p&gt;
    &lt;p&gt;Essentially, could I enjoy the benefits of the $30.75 paid service without actually paying the fee? After all, with such a long journey ahead, I needed something interesting to pass the 12 hours.&lt;/p&gt;
    &lt;p&gt;Since I could use WeChat in flight, I could also call for help from the sky.&lt;/p&gt;
    &lt;p&gt;Coincidentally, my roommate happens to be a security and networking expert who was on vacation at home. When I mentioned this idea, he thought it sounded fun and immediately agreed to collaborate. So we started working on it together across the Pacific.&lt;/p&gt;
    &lt;head rend="h2"&gt;2 The Process&lt;/head&gt;
    &lt;p&gt;After selecting the only available WiFi network &lt;code&gt;acwifi.com&lt;/code&gt; on the plane, just like other login-required WiFi networks, it popped up a webpage from &lt;code&gt;acwifi.com&lt;/code&gt; asking me to verify my Aeroplan membership. Once verified, I could access the internet.&lt;/p&gt;
    &lt;p&gt;There’s a classic software development interview question: what happens after you type a URL into the browser and press enter?&lt;/p&gt;
    &lt;p&gt;For example, if you type &lt;code&gt;https://acwifi.com&lt;/code&gt; and only focus on the network request part, the general process is: DNS query -&amp;gt; TCP connection -&amp;gt; TLS handshake -&amp;gt; HTTP request and response.&lt;/p&gt;
    &lt;p&gt;Let’s consider &lt;code&gt;github.com&lt;/code&gt; as our target website we want to access. Now let’s see how we can break through the network restrictions and successfully access &lt;code&gt;github.com&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;3 Approach 1: Domain Self-Signing&lt;/head&gt;
    &lt;p&gt;Since &lt;code&gt;acwifi.com&lt;/code&gt; is accessible but &lt;code&gt;github.com&lt;/code&gt; is not, could I disguise my server as &lt;code&gt;acwifi.com&lt;/code&gt; and route all request traffic through my server to access the target website (&lt;code&gt;github.com&lt;/code&gt;)?&lt;/p&gt;
    &lt;p&gt;The idea was roughly: I modify DNS records to bind our proxy server’s IP &lt;code&gt;137.184.231.87&lt;/code&gt; to &lt;code&gt;acwifi.com&lt;/code&gt;, then use a self-signed certificate to tell the browser that this IP and this domain are bound together, and it should trust it.&lt;/p&gt;
    &lt;p&gt;Let me first test this idea:&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;Unexpectedly, the IP was completely unreachable via &lt;code&gt;ping&lt;/code&gt;, meaning the IP was likely blocked entirely.&lt;/p&gt;
    &lt;p&gt;I tried other well-known IPs, like Cloudflare’s CDN IP, and they were also unreachable:&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;It seems this approach won’t work. After all, if the IPs are directly blocked, no amount of disguise will help. This network likely maintains some IP whitelist (such as WhatsApp and WeChat’s egress IPs), and only IPs on the whitelist can be accessed.&lt;/p&gt;
    &lt;head rend="h2"&gt;4 Approach 2: DNS Port Masquerading&lt;/head&gt;
    &lt;p&gt;When the first approach failed, my roommate suggested a second approach: try using DNS service as a breakthrough:&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;This is good news! It means there are still ways to reach external networks, and DNS is one of them.&lt;/p&gt;
    &lt;p&gt;Looking at the record above, it shows our DNS query for &lt;code&gt;http418.org&lt;/code&gt; was successful, meaning DNS requests work.&lt;/p&gt;
    &lt;head rend="h3"&gt;4.1 Arbitrary DNS Servers&lt;/head&gt;
    &lt;p&gt;My roommate then randomly picked another DNS server to see if the network had a whitelist for DNS servers:&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;We can actually use arbitrary DNS servers - even better!&lt;/p&gt;
    &lt;head rend="h3"&gt;4.2 TCP Queries&lt;/head&gt;
    &lt;p&gt;The fact that arbitrary DNS servers can be queried successfully is excellent news. DNS typically uses UDP protocol, but would TCP-based DNS requests be blocked?&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;DNS TCP queries also work! This indicates the plane network’s filtering policy is relatively lenient, standing a chance of our subsequent DNS tunneling approach.&lt;/p&gt;
    &lt;head rend="h3"&gt;4.3 Proxy Service on Port 53&lt;/head&gt;
    &lt;p&gt;It seems the plane network restrictions aren’t completely airtight - we’ve found a “backdoor” in this wall.&lt;/p&gt;
    &lt;p&gt;So we had a clever idea: since the plane gateway doesn’t block DNS requests, theoretically we could disguise our proxy server as a DNS server, expose port 53 for DNS service, route all requests through the proxy server disguised as DNS requests, and thus bypass the restrictions.&lt;/p&gt;
    &lt;p&gt;My roommate spent about an hour setting up a proxy server exposing port 53 using xray 1, and sent me the configuration via WeChat:&lt;/p&gt;
    &lt;p&gt;The proxy server configuration my roommate set up with Xray included the following sample configuration:&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;And I already had an xray client on my computer, so no additional software was needed to establish the connection.&lt;/p&gt;
    &lt;p&gt;Everything was ready. The exciting moment arrived - pressing enter to access &lt;code&gt;github.com&lt;/code&gt;:&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;The request actually succeeded! github.com returned a successful result!&lt;/p&gt;
    &lt;p&gt;This means we’ve truly broken through the network restrictions and can access any website!&lt;/p&gt;
    &lt;p&gt;We hadn’t realized before that xray could be used in this clever way :)&lt;/p&gt;
    &lt;p&gt;Here we exploited a simple cognitive bias: not all services using port 53 are DNS query requests.&lt;/p&gt;
    &lt;head rend="h2"&gt;5 Ultimate Approach: DNS Tunnel&lt;/head&gt;
    &lt;p&gt;If Approach 2 still didn’t work, we had one final trick up our sleeves.&lt;/p&gt;
    &lt;p&gt;Currently, the gateway only checks whether the port is 53 to determine if it’s a DNS request. But if the gateway were stricter and inspected the content of DNS request packets, it would discover that our requests are “disguised” as DNS queries rather than genuine DNS queries:&lt;/p&gt;
    &lt;p&gt;Since disguised DNS requests would be blocked, we could embed all requests inside genuine DNS request packets, making them DNS TXT queries. We’d genuinely be querying DNS, just with some extra content inside:&lt;/p&gt;
    &lt;p&gt;However, this ultimate approach requires a DNS Tunnel client to encapsulate all requests. I didn’t have such software on my computer, so this remained a theoretical ultimate solution that couldn’t be practically verified.&lt;/p&gt;
    &lt;head rend="h2"&gt;6 Conclusion&lt;/head&gt;
    &lt;p&gt;With the long journey ahead, my roommate and I spent about 4 hours remotely breaking through the network restrictions, having great fun in the process, proving that our problem-solving approach was indeed feasible.&lt;/p&gt;
    &lt;p&gt;The successful implementation of the solution was mainly thanks to my roommate, the networking expert, who provided remote technical and conceptual support.&lt;/p&gt;
    &lt;p&gt;The only downside was that although we broke through the network restrictions and could access any website, the plane’s bandwidth was extremely limited, making web browsing quite painful. So I didn’t spend much time browsing the web.&lt;/p&gt;
    &lt;p&gt;For the remaining hours, I rewatched the classic 80s time-travel movie: &lt;code&gt;"Back to the Future"&lt;/code&gt; , which was absolutely fantastic.&lt;/p&gt;
    &lt;p&gt;Last and not least, it’s the disclaimer:&lt;/p&gt;
    &lt;p&gt;This technical exploration is intended solely for educational and research purposes. We affirm our strict adherence to all relevant regulations and service terms throughout this project.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45536325</guid><pubDate>Fri, 10 Oct 2025 07:50:54 +0000</pubDate></item><item><title>I tracked Amazon's Prime Day prices. We've been played</title><link>https://www.washingtonpost.com/technology/2025/10/09/amazon-prime-day-prices/</link><description>&lt;doc fingerprint="24cdb7400e6659bc"&gt;
  &lt;main&gt;
    &lt;p&gt;Next time Amazon hypes its Prime Days savings, remember this: The prices during the sale aren’t always better. I’ve got the receipts to prove it.&lt;/p&gt;
    &lt;p&gt;Democracy Dies in Darkness&lt;/p&gt;
    &lt;head rend="h1"&gt;I tracked Amazon’s Prime Day prices. We’ve been played.&lt;/head&gt;
    &lt;p&gt;I would have saved, on average, almost nothing. Here’s what you should do to actually get a good deal on Amazon.&lt;/p&gt;
    &lt;p&gt;5 min&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45536531</guid><pubDate>Fri, 10 Oct 2025 08:27:34 +0000</pubDate></item><item><title>Datastar: Lightweight hypermedia framework for building interactive web apps</title><link>https://data-star.dev/</link><description>&lt;doc fingerprint="32485f0d77aa7edf"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Datastar&lt;/head&gt;&lt;head rend="h2"&gt;The hypermedia framework&lt;/head&gt;&lt;quote&gt;x:&lt;lb/&gt;y:&lt;lb/&gt;speed:&lt;/quote&gt;&lt;head rend="h1"&gt;Build reactive web apps that stand the test of time&lt;/head&gt;&lt;p&gt;Datastar is a lightweight framework for building everything from simple sites to real-time collaborative web apps.&lt;/p&gt;&lt;head rend="h2"&gt;Bring Your Own Backend&lt;/head&gt;&lt;p&gt;Harness the simplicity of server-side rendering and the power of a frontend framework, with a single 10.75 KiB file.&lt;/p&gt;&lt;p&gt;Write your backend in the language of your choice (we have SDKs, too).&lt;/p&gt;Get started&lt;p&gt;Datastar accepts &lt;code&gt;text/html&lt;/code&gt; and &lt;code&gt;text/event-stream&lt;/code&gt; content types, so you can send regular HTML responses or stream server-sent events (SSE) from the backend.&lt;/p&gt;&lt;p&gt;See the difference by trying zero and non-zero intervals below.&lt;/p&gt;&lt;head rend="h3"&gt;Hello world!&lt;/head&gt;&lt;quote&gt;&lt;header&gt;Network Response&lt;/header&gt;&lt;/quote&gt;&lt;head rend="h3"&gt;Reactive frontends with no user-JS&lt;/head&gt;&lt;p&gt;Datastar allows you to iterate quickly on a slow-moving, high-performance framework.&lt;/p&gt;&lt;head rend="h3"&gt;Datastar solves more problems than it creates&lt;/head&gt;&lt;p&gt;Unlike most frontend frameworks, Datastar simplifies your frontend logic, shifting state management to the backend.&lt;/p&gt;&lt;p&gt;Drive your frontend from the backend using HTML attributes and a hypermedia-driven approach.&lt;/p&gt;&lt;head rend="h4"&gt;State in the right place&lt;/head&gt;&lt;p&gt;Add reactivity to your frontend using &lt;code&gt;data-*&lt;/code&gt; attributes.&lt;/p&gt;&lt;code&gt;Waiting for an order...&lt;/code&gt;&lt;quote&gt;Datastar gives me reactive, realtime applications without the complications of the JS/TS ecosystem. I had to change my way of thinking about building frontends, and I'm Oh-So-Glad I did!&lt;/quote&gt;&lt;quote&gt;Datastar is exactly like React, except without the network, virtual DOM, hooks, or JavaScript. Oh and you get multiplayer and realtime for free. Did I mention you can use any backend language you want? Datastar has solved the frontend for me â I can now get back to solving business problems.&lt;/quote&gt;&lt;quote&gt;Iâve spoken about avoiding SPA complexity for years, and Datastar nails it: real-time UIs with less code than htmx or Alpine.js, and none of the overhead I used to wrestle with.&lt;/quote&gt;&lt;head rend="h5"&gt;Backed by a nonprofit&lt;/head&gt;&lt;head rend="h5"&gt;Supported by a community&lt;/head&gt;&lt;head rend="h5"&gt;Coded by hand&lt;/head&gt;&lt;p&gt;Simple. Fast. Light. No VCs. More About Us&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45536618</guid><pubDate>Fri, 10 Oct 2025 08:46:40 +0000</pubDate></item><item><title>Show HN: I invented a new generative model and got accepted to ICLR</title><link>https://discrete-distribution-networks.github.io/</link><description>&lt;doc fingerprint="345c0b1f68b2c5a6"&gt;
  &lt;main&gt;&lt;p&gt;🥳 Accepted by ICLR 2025&lt;lb/&gt;🚀 The code has been released &lt;/p&gt;&lt;p&gt;Discrete Distribution Networks&lt;/p&gt;&lt;p&gt;A novel generative model with simple principles and unique properties&lt;/p&gt;&lt;p&gt;This GIF demonstrates the optimization process of DDN for 2D probability density estimation:&lt;/p&gt;&lt;code&gt;blur_circles&lt;/code&gt; -&amp;gt; &lt;code&gt;QR_code&lt;/code&gt; -&amp;gt; &lt;code&gt;spiral&lt;/code&gt; -&amp;gt; &lt;code&gt;words&lt;/code&gt; -&amp;gt; &lt;code&gt;gaussian&lt;/code&gt; -&amp;gt; &lt;code&gt;blur_circles&lt;/code&gt; (same at beginning and end, completing a cycle)&lt;p&gt;Contributions of this paper:&lt;/p&gt;&lt;p&gt; Left: Illustrates the process of image reconstruction and latent acquisition in DDN. Each layer of DDN outputs &lt;lb/&gt; Right: Shows the tree-structured representation space of DDN's latent variables. Each sample can be mapped to a leaf node on this tree.&lt;/p&gt;&lt;p&gt;Reviews from ICLR:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;I find the method novel and elegant. The novelty is very strong, and this should not be overlooked. This is a whole new method, very different from any of the existing generative models.&lt;/p&gt;&lt;/quote&gt;&lt;quote&gt;&lt;p&gt;This is a very good paper that can open a door to new directions in generative modeling.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;We introduce a novel generative model, the Discrete Distribution Networks (DDN), that approximates data distribution using hierarchical discrete distributions. We posit that since the features within a network inherently capture distributional information, enabling the network to generate multiple samples simultaneously, rather than a single output, may offer an effective way to represent distributions. Therefore, DDN fits the target distribution, including continuous ones, by generating multiple discrete sample points. To capture finer details of the target data, DDN selects the output that is closest to the Ground Truth (GT) from the coarse results generated in the first layer. This selected output is then fed back into the network as a condition for the second layer, thereby generating new outputs more similar to the GT. As the number of DDN layers increases, the representational space of the outputs expands exponentially, and the generated samples become increasingly similar to the GT. This hierarchical output pattern of discrete distributions endows DDN with unique properties: more general zero-shot conditional generation and 1D latent representation. We demonstrate the efficacy of DDN and its intriguing properties through experiments on CIFAR-10 and FFHQ.&lt;/p&gt;&lt;p&gt;DDN enables more general zero-shot conditional generation. DDN supports zero-shot conditional generation across non-pixel domains, and notably, without relying on gradient, such as text-to-image generation using a black-box CLIP model. Images enclosed in yellow borders serve as the ground truth. The abbreviations in the table header correspond to their respective tasks as follows: “SR” stands for Super-Resolution, with the following digit indicating the resolution of the condition. “ST” denotes Style Transfer, which computes Perceptual Losses with the condition.&lt;/p&gt;&lt;p&gt; (a) The data flow during the training phase of DDN is shown at the top. As the network depth increases, the generated images become increasingly similar to the training images. Within each Discrete Distribution Layer (DDL), &lt;/p&gt;&lt;p&gt;Here, &lt;/p&gt;&lt;p&gt;The numerical values at the bottom of each figure represent the Kullback-Leibler (KL) divergence. Due to phenomena such as “dead nodes” and “density shift”, the application of Gradient Descent alone fails to properly fit the Ground Truth (GT) density. However, by employing the Split-and-Prune strategy, the KL divergence is reduced to even lower than that of the Real Samples. For a clearer and more comprehensive view of the optimization process, see the 2D Density Estimation with 10,000 Nodes DDN page.&lt;/p&gt;&lt;p&gt;The text at the top is the guide text for that column.&lt;/p&gt;&lt;p&gt;Columns 4 and 5 display the generated results under the guidance of other images, where the produced image strives to adhere to the style of the guided image as closely as possible while ensuring compliance with the condition. The resolution of the generated images is 256x256.&lt;/p&gt;&lt;p&gt;To demonstrate the features of DDN conditional generation and Zero-Shot Conditional Generation.&lt;/p&gt;&lt;p&gt;We trained a DDN with output level &lt;/p&gt;&lt;p&gt;Uncompressed raw backup of this video is here: DDN_latent_video&lt;/p&gt;&lt;p&gt;The following content contains personal opinions and is not included in the original paper&lt;/p&gt;&lt;p&gt;Based on the current state of DDN (May 2025), I speculate on several possible future research directions. These include improvements to DDN itself and tasks suitable for the current version of DDN. Due to my limited perspective, some of these speculations might not be accurate:&lt;/p&gt;&lt;p&gt;Improving DDN through hyperparameter tuning, exploratory experiments, and theoretical analysis:&lt;lb/&gt;The total time spent developing DDN was less than three months, mostly by a single person. Therefore, experiments were rough, and there was limited time for detailed analysis and tuning. There is significant room for improvement.&lt;/p&gt;&lt;p&gt;Scaling up to ImageNet-level complexity:&lt;lb/&gt;Building a practical generative model with Zero-Shot Conditional Generation as a key feature.&lt;/p&gt;&lt;p&gt;Applying DDN to domains with relatively small generation spaces:&lt;/p&gt;&lt;p&gt;Applying DDN to non-generative tasks:&lt;/p&gt;&lt;p&gt;Using DDN's design ideas to improve existing generative models:&lt;/p&gt;&lt;p&gt;Applying DDN to language modeling tasks:&lt;/p&gt;&lt;p&gt;Q1: Will DDN require a lot of GPU memory?&lt;/p&gt;&lt;quote&gt;&lt;p&gt;DDN's GPU memory requirements are slightly higher than same architecture of conventional GAN generator, but the difference is negligible.&lt;/p&gt;&lt;p&gt;During training, generating&lt;/p&gt;&lt;mjx-container&gt;samples is only to identify the one closest to the ground truth, and the&lt;/mjx-container&gt;&lt;mjx-container&gt;unchosen samples do not retain gradients, so they are immediately discarded after sampling at the current layer, freeing up memory.&lt;/mjx-container&gt;&lt;p&gt;In the generation phase, we randomly sample one number from range(&lt;/p&gt;&lt;mjx-container&gt;) as an index and only generate the sample at the chosen index, avoiding the need to generate the other&lt;/mjx-container&gt;&lt;mjx-container&gt;samples, thus not occupying additional memory or computation.&lt;/mjx-container&gt;&lt;/quote&gt;&lt;p&gt;Q2: Will there be a mode collapse issue?&lt;/p&gt;&lt;quote&gt;&lt;p&gt;No. DDN selects the output most similar to the current GT and then uses the L2 loss to make it even more similar to the GT. This operation naturally has a diverse tendency, which can "expand" the entire generation space.&lt;/p&gt;&lt;p&gt;Additionally, DDN supports reconstruction. Figure 14 in the original paper shows that DDN has good reconstruction performance on the test set, meaning that DDN can fully cover the target distribution.&lt;/p&gt;&lt;p&gt;The real issue with DDN is not mode collapse but attempting to cover a high-dimensional target distribution that exceeds its own complexity, leading to the generation of blurry samples.&lt;/p&gt;&lt;/quote&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45536694</guid><pubDate>Fri, 10 Oct 2025 09:01:54 +0000</pubDate></item><item><title>Nobel Peace Prize 2025: María Corina Machado</title><link>https://www.nobelprize.org/prizes/peace/2025/summary/</link><description>&lt;doc fingerprint="7715312d2910e1d6"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Nobel Peace Prize 2025&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;The Nobel Peace Prize 2025 was awarded to Maria Corina Machado "for her tireless work promoting democratic rights for the people of Venezuela and for her struggle to achieve a just and peaceful transition from dictatorship to democracy"&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h3"&gt;Nobel Prize announcements 2025&lt;/head&gt;
    &lt;p&gt;Don't miss the Nobel Prize announcements 6–13 October. All announcements are streamed live here on nobelprize.org.&lt;/p&gt;
    &lt;head rend="h3"&gt;Explore prizes and laureates&lt;/head&gt;
    &lt;p&gt; Look for popular awards and laureates in different fields, and discover the history of the Nobel Prize. &lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45536700</guid><pubDate>Fri, 10 Oct 2025 09:03:16 +0000</pubDate></item><item><title>Parallelizing Cellular Automata with WebGPU Compute Shaders</title><link>https://vectrx.substack.com/p/webgpu-cellular-automata</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45536816</guid><pubDate>Fri, 10 Oct 2025 09:20:22 +0000</pubDate></item><item><title>Vite+ – The Unified Toolchain for the Web</title><link>https://viteplus.dev/</link><description>&lt;doc fingerprint="ad85253b2d8131b9"&gt;
  &lt;main&gt;&lt;p&gt;dev, build, test, lint, format, monorepo caching &amp;amp; more in a single dependency, built for scale, speed, and sanity&lt;/p&gt;&lt;p&gt;Built for growing teams tired of configuring, patching, and replacing their JavaScript tooling stack.&lt;/p&gt;&lt;p&gt;Smooth, incremental adoption if you are already using Vite&lt;/p&gt;&lt;p&gt;Vite+ is built on established open source industry standards, and maintained by the same experts behind these projects.&lt;/p&gt;&lt;p&gt;36m+&lt;/p&gt;&lt;p&gt;Weekly npm downloads&lt;/p&gt;&lt;p&gt;75k&lt;/p&gt;&lt;p&gt;GitHub stars&lt;/p&gt;&lt;p&gt;16.5m+&lt;/p&gt;&lt;p&gt;Weekly npm downloads&lt;/p&gt;&lt;p&gt;15k&lt;/p&gt;&lt;p&gt;GitHub stars&lt;/p&gt;&lt;p&gt;3.8m+&lt;/p&gt;&lt;p&gt;Weekly npm downloads&lt;/p&gt;&lt;p&gt;16.5k&lt;/p&gt;&lt;p&gt;GitHub stars&lt;/p&gt;&lt;p&gt;With low-level components written in Rust, Vite+ offers unparalleled performance at enterprise scale: up to 40x faster builds than webpack and 100x faster linting than ESLint.&lt;/p&gt;&lt;p&gt;Vite+ development undergoes the most rigorous security practices and we vet all its dependencies. SLAs available.&lt;/p&gt;&lt;p&gt;Vite+ unifies your entire web development workflow into a single, powerful command-line interface.&lt;/p&gt;&lt;p&gt;Spin up dev servers and create production builds with extreme speed. Stay in the flow and keep CI fast.&lt;/p&gt;&lt;code&gt;Hot Module Replacement (HMR)&lt;/code&gt;&lt;p&gt;Feature rich test runner that automatically reuses the same resolve and transform config from your application.&lt;/p&gt;&lt;code&gt;Jest&lt;/code&gt; compatible API&lt;p&gt;Analyze JavaScript code to find and fix problems&lt;/p&gt;&lt;code&gt;EsLint&lt;/code&gt; compatible rules&lt;p&gt;Format repos at native speed&lt;/p&gt;&lt;code&gt;Prettier&lt;/code&gt; compatible&lt;p&gt;Built-in Turborepo / Nx alternative&lt;/p&gt;&lt;p&gt;Debug, visualize, &amp;amp; analyze: understand what’s making your build slow and what’s making your bundle size large&lt;/p&gt;&lt;p&gt;An efficient way to bundle TS and JS libraries&lt;/p&gt;&lt;code&gt;DTS&lt;/code&gt; generation &amp;amp; bundling&lt;p&gt;Vite+ can be the foundation of any type of web apps - from SPAs to fullstack meta frameworks.&lt;/p&gt;&lt;p&gt;You can use meta-frameworks that ship as Vite plugins with Vite+&lt;/p&gt;&lt;p&gt;First-class support on Vercel, Netlify, CloudFlare &amp;amp; more&lt;/p&gt;&lt;p&gt;Vite+ will be source-available and offers a generous free tier.&lt;/p&gt;&lt;p&gt;For open source, non-commercial use, and small businesses.&lt;/p&gt;&lt;p&gt;Simple, flat annual recurring license fee for growing businesses that need to move fast.&lt;/p&gt;&lt;p&gt;For businesses with large teams and complex requirements. Support &amp;amp; SLA available.&lt;/p&gt;&lt;p&gt;* Pricing &amp;amp; tier thresholds are tentative and subject to change.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45537035</guid><pubDate>Fri, 10 Oct 2025 09:53:35 +0000</pubDate></item></channel></rss>