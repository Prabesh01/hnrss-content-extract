<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sat, 11 Oct 2025 21:07:29 +0000</lastBuildDate><item><title>I built physical album cards with NFC tags to teach my son music discovery</title><link>https://fulghum.io/album-cards</link><description>&lt;doc fingerprint="ea7b8c0cb976b30"&gt;
  &lt;main&gt;
    &lt;p&gt;by Jordan Fulghum, October 2025&lt;/p&gt;
    &lt;p&gt;Albums you can hold again.&lt;/p&gt;
    &lt;p&gt;When I was 10, I blew every dollar I had on CDs. I remember sitting cross-legged on my floor, flipping through jewel cases, memorizing liner notes and lyrics, and most importantly developing my own taste for music.&lt;/p&gt;
    &lt;p&gt;My 10-year-old doesn't have that. Music just sort of... happens. It's like it's infinite and invisible at the same time, playing from smart speakers, car stereos, my phone. Endless perfectly curated playlists, designed to fade into the background. The default listening experience has become both literally and figuratively formless.&lt;/p&gt;
    &lt;p&gt;So I thought: what's the modern equivalent of that CD browsing experience? Maybe what's missing is something tangible that he can flip through, or even collect.&lt;/p&gt;
    &lt;p&gt;I could combine my old CD-collector brain with today's tech: take something fun and collectable (trading cards), dress them up with album art, and add NFC tags so they can be tapped to play the album on our home speaker system, all without a screen.&lt;/p&gt;
    &lt;p&gt;Away I went.&lt;/p&gt;
    &lt;p&gt;I needed to get the music into a format that could be played. I've long since surrendered to streaming, but I still have my MP3s organized via Plex on my home server. Funny to think that these files are the same MP3s that I've been collecting since the late 90s. I wanted the NFC tag to be deep-linked to those same files instead of a streaming service.&lt;/p&gt;
    &lt;p&gt;But which albums do I pick? I had the idea to create themed "packs" of albums. The first pack is obviously "Albums That Dad Wants You to Listen To", and it's just a bunch of dad rock. But the idea is that each pack can be a different theme or genre, and he can build his own collection (and develop his own taste) over time.&lt;/p&gt;
    &lt;p&gt;I found a PDF template that matched the dimensions of trading cards, hopped into Canva and got to work. It was easy enough to find high-quality album cover images from Google, but....&lt;/p&gt;
    &lt;p&gt;I was quite far into this project when I remembered the obvious fact that album art is square but trading cards are rectangular. Trading cards use a 2.5:3.5 aspect ratio, which is...not a square! Oops.&lt;/p&gt;
    &lt;p&gt;I looked at what they did for cassette tapes (also rectangular) back in the day, but their solutions were all over the place, from just cropping the square into a rectangle (gross) to having a giant white space and ISBN codes surrounding the art. That wasn't gonna cut it.&lt;/p&gt;
    &lt;p&gt;So, I used an AI diffusion model to extend each album's art into a trading card aspect ratio. The AI was (mostly) able to extend the artwork while maintaining the original style and composition. Not perfect, but a pretty fun solution not possible just a couple years ago.&lt;/p&gt;
    &lt;p&gt;After ordering a bundle of blank NFC tags from Amazon, I learned that PlexAmp oddly has first-class support for zapping NFC tags to specific albums in auto play mode. A strange feature, but perfect for this project. Easy.&lt;/p&gt;
    &lt;p&gt;The process was simple: open PlexAmp, navigate to an album, tap the three dots menu, then Share, and there's a "Write to NFC tag" option. Hold your phone over the blank NFC tag and it writes the deep link. That's it. The tag just contains a URL that opens PlexAmp and starts playing that specific album when tapped.&lt;/p&gt;
    &lt;p&gt;I printed the cards on our crappy HP inkjet printer at home. I used label paper that exactly matched the dimensions of trading cards, but after the fact, I realized it was kind of unnecessary. You can just print on cardstock if you have a digital template file. I cut them out and glued them to blank playing cards, but not before wedging the NFC tags between.&lt;/p&gt;
    &lt;p&gt;For placement, I found a trading card display model from Makerworld and 3D printed it on my A1. It turned out alright!&lt;/p&gt;
    &lt;p&gt;Once it was all working and in decent shape, I presented them in a nice neat arrangement to my son. He flipped through them like Pokémon cards, examined the cards that were the most visually interesting. Daft Punk's Discovery was his first pick. He grabbed it, flipped it around, tapped it, and that One More Time loop dropped throughout our entire house. Boom.&lt;/p&gt;
    &lt;p&gt;I was happy to see that the physical cards encouraged active listening and ownership. Instead of music being background noise, it became something he could choose, hold, explore, maybe even trade with his sister!&lt;/p&gt;
    &lt;p&gt;I think we're unintentionally teaching our children to consume music passively. My goal with this project was to teach them to discover it actively, to own it, to care about it at the album level. I think it kinda worked!&lt;/p&gt;
    &lt;p&gt;Follow me on Twitter for more antics.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45543475</guid><pubDate>Fri, 10 Oct 2025 20:34:19 +0000</pubDate></item><item><title>Tangled, a Git collaboration platform built on atproto</title><link>https://blog.tangled.org/intro</link><description>&lt;doc fingerprint="bb129eda18bc2f5a"&gt;
  &lt;main&gt;
    &lt;p&gt;Tangled is a new social-enabled Git collaboration platform, built on top of the AT Protocol. We envision a place where developers have complete ownership of their code, open source communities can freely self-govern and most importantly, coding can be social and fun again.&lt;/p&gt;
    &lt;p&gt;There are several models for decentralized code collaboration platforms, ranging from ActivityPub’s (Forgejo) federated model, to Radicle’s entirely P2P model. Our approach attempts to be the best of both worlds by adopting atproto—a protocol for building decentralized social applications with a central identity.&lt;/p&gt;
    &lt;p&gt;Our approach to this is the idea of “knots”. Knots are lightweight, headless servers that enable users to host Git repositories with ease. Knots are designed for either single or multi-tenant use which is perfect for self-hosting on a Raspberry Pi at home, or larger “community” servers. By default, Tangled provides managed knots where you can host your repositories for free.&lt;/p&gt;
    &lt;p&gt;The App View at tangled.sh acts as a consolidated “view” into the whole network, allowing users to access, clone and contribute to repositories hosted across different knots—completely seamlessly.&lt;/p&gt;
    &lt;p&gt;Tangled is still in its infancy, and we’re building out several of its core features as we dogfood it ourselves. We developed these three tenets to guide our decisions:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Ownership of data&lt;/item&gt;
      &lt;item&gt;Low barrier to entry&lt;/item&gt;
      &lt;item&gt;No compromise on user-experience&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Collaborating on code isn’t easy, and the tools and workflows we use should feel natural and stay out of the way. Tangled’s architecture enables common workflows to work as you’d expect, all while remaining decentralized.&lt;/p&gt;
    &lt;p&gt;We believe that atproto has greatly simplfied one of the hardest parts of social media: having your friends on it. Today, we’re rolling out invite-only access to Tangled—join us on IRC at &lt;code&gt;#tangled&lt;/code&gt; on
libera.chat and we’ll get you set up.&lt;/p&gt;
    &lt;p&gt;Update: Tangled is open to public, simply login at tangled.sh/login! Have fun!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45543899</guid><pubDate>Fri, 10 Oct 2025 21:18:55 +0000</pubDate></item><item><title>(Re)Introducing the Pebble Appstore</title><link>https://ericmigi.com/blog/re-introducing-the-pebble-appstore/</link><description>&lt;doc fingerprint="dcea42331bd429f1"&gt;
  &lt;main&gt;
    &lt;p&gt;For those who didn’t catch my blog post last week (pls read), we manufactured 2,960 white Pebble 2 Duos in September! Pretty good for the first month of production. These watches are being transferred to our fulfillment center and will be shipped out soon.&lt;/p&gt;
    &lt;p&gt;Black Pebble 2 Duo production did not start until the end of September, and then got interrupted by a China/Hong Kong holiday. Extremely sorry for the delay on black!&lt;/p&gt;
    &lt;p&gt;Pebble Time 2&lt;/p&gt;
    &lt;p&gt;One fun piece of Pebble Time 2 software development news - we added a feature to make existing Pebble watchfaces/apps now (optionally) scale up to fill larger and higher resolution Pebble Time 2 display! Previous generation Pebble rectangular displays measured 144x168 pixels in 1.26" diagonal, but Pebble Time 2 is 200x228 pixels in 1.5", existing faces/apps would have had a black border on PT2. Many thanks to Alina for posting this idea on Discord.&lt;/p&gt;
    &lt;p&gt;This is fantastic because it will allow all older apps/faces to fill up the whole screen. Even better though, many Pebble developers are already upgrading their apps/faces to support the bigger screen natively, like Lignite’s beautiful face Mosaic.&lt;/p&gt;
    &lt;p&gt;Pebble Time 2 hardware development is going pretty well. We finished EVT (engineering verification test) and we’re now heading into the DVT (design verification test) stage. We’re still working on a number of tasks like tuning the stainless steel PVD hard coating, testing water resistance, integrating our firmware test suite into the factory ERP and more fun stuff.&lt;/p&gt;
    &lt;p&gt;Schedule-wise, we’re behind where I would have liked to be in October. We’re now aiming to start mass production just around the end of the year (12/26 to be precise). That means December pre-orders will not ship out until January at the earliest. We’ll try our best to catch up, but the other looming date is the start of the lunar new year (factory shuts down Feb 1 through 17). We’ve got our work cut out for us! We’ll get it done.&lt;/p&gt;
    &lt;p&gt;For those of you who forgot or weren’t around 10 years ago, one of the most awesome parts of Pebble is the huge selection of fun/quirky/beautiful/clever/useful apps and watchfaces (from here I’ll just call them both ‘apps’). These were made by an extraordinarily talented community of casual developers, who primarily built apps for themselves and shared them with the broader public. This was facilitated by a damn good SDK, APIs, devtools and documentation created by the friendly and talented software and devrel teams at Pebble.&lt;/p&gt;
    &lt;p&gt;I think the ease of development and hackability of Pebble truly made the world a better place, one little app at a time. I love hearing stories from people who first learned how to program on a free Pebble they got from a hackathon (we gave away thousands this way). Books were written. Toolswere created. My then-girlfriend now-wife (a biochemistry professor) even learned Pebble.JS to create an amino acid flash card app for her students! Yes, we are nerds.&lt;/p&gt;
    &lt;p&gt;Over 2,000 apps and 10,000 watchfaces were created and hosted on the Pebble Appstore. It’s time to get (re)acquainted with them - browse away on apps.rePebble.com!&lt;/p&gt;
    &lt;p&gt;All existing Pebble apps are compatible with the new watches, though some apps may not work anymore due to broken settings pages, obsolete APIs, etc. Hopefully as we ship out more new watches, some developers will re-emerge to rescue some of these apps. I’m sure new apps will also rise to fill any voids!&lt;/p&gt;
    &lt;p&gt;What are your favourite Pebble apps and watchfaces? Share links to your favs in the comment section below!&lt;/p&gt;
    &lt;p&gt;For the last 9 years, the Rebble Alliance has been keeping the Pebble dream alive. Many of you have used their web services, Discord, helpful instructions or dev portal. I’m a huge fan - I’ve been a daily active user since 2017. Without Rebble, it’s unlikely that the Pebble community would be as in-tact as it is today. On top of that, several members of the Rebble (and ex-Pebble colleagues) were absolutely critical in helping Google open-source PebbleOS. Without the community or the OS, there is zero chance that these new watches would be possible! Thank you Rebble!&lt;/p&gt;
    &lt;p&gt;One other great thing that Rebble did was in 2017 - they archived and started hosting a copy of the Pebble Appstore, before the servers were shut down. New apps uploaded by developers since 2017 have also been popping up!&lt;/p&gt;
    &lt;p&gt;We have partnered with Rebble to re-introduce the appstore. Their web services now power the Pebble appstore backend. New apps submitted via dev-portal.rebble.io will show up on Pebble Appstore as well.&lt;/p&gt;
    &lt;p&gt;You won’t need a subscription with Rebble in order to access the Appstore. Core Devices is funding Rebble, a non-profit, directly to provide this service. You can still donate or subscribe to Rebble and support their community efforts!&lt;/p&gt;
    &lt;p&gt;The Pebble Appstore now lives on apps.rePebble.com. The web view looks, feels and generally is the same as in 2016, with a few new tweaks and improvements:&lt;/p&gt;
    &lt;p&gt;Social link previews - share your favourite watchfaces on WhatsApp, Twitter, Bluesky, Discord, etc! Like PebbleEye 007&lt;/p&gt;
    &lt;p&gt;Similar Apps/Recommendations - while building this feature, I was reminded about the true depth of the Pebble app catalog. It’s easy to get caught up in the ‘most hearted’ section…use this new feature at the bottom of each app page to discover hidden gems! It’s not perfect, but it’s helped me discover some awesome apps.&lt;/p&gt;
    &lt;p&gt;Additionally, we’re thinking about adding new features like:&lt;/p&gt;
    &lt;p&gt;Click to try out the app in an emulator&lt;/p&gt;
    &lt;p&gt;Detecting and warning users about broken APIs and settings pages&lt;/p&gt;
    &lt;p&gt;More and better categories&lt;/p&gt;
    &lt;p&gt;Better discovery and recommendations&lt;/p&gt;
    &lt;p&gt;Highlighting less-hearted apps (give new apps a chance vs old ones with a lot of hearts)&lt;/p&gt;
    &lt;p&gt;What new features should we add next? Add a comment below!&lt;/p&gt;
    &lt;p&gt;One of our goals with this next phase of Pebble is to nurture and facilitate an awesome, easy and dare-we-say fun developer experience for the Pebble developer community. Part of what made the experience so awesome before was the developer relations team! We unfortunately do not have the resources to recruit the whole team back (though I wish we could!). Luckily many of the great decisions they made continue to pay off.&lt;/p&gt;
    &lt;p&gt;The great news is that over the summer, we had an insanely productive intern on our team. He dusted off the SDK, updated it from Python2 → 3 and even built a CloudPebble-like way to build Pebble apps entirely in the browser.&lt;/p&gt;
    &lt;p&gt;What’s working now&lt;/p&gt;
    &lt;p&gt;Try the Pebble SDK! Tested on Mac, Windows (WSL) and Linux&lt;/p&gt;
    &lt;p&gt;Or use the Cloud IDE → build hello-world and see it on an emulator, all in your browser, in under 2 minutes!&lt;/p&gt;
    &lt;p&gt;Build an app with AI → run pebble new-project --ai then open dir in Claude Code or Cursor (etc) and prompt your way to your own custom app or watchface&lt;/p&gt;
    &lt;p&gt;Upgrade your apps to support the larger 200x228 px display on Pebble Time 2, run it on the emulator using pebble install --emulator emery (just like Obsidian!)&lt;/p&gt;
    &lt;p&gt;What’s on the SDK roadmap:&lt;/p&gt;
    &lt;p&gt;Pebble packages support in SDK&lt;/p&gt;
    &lt;p&gt;Adding Timeline support into the Pebble mobile app&lt;/p&gt;
    &lt;p&gt;New APIs for barometer, touchscreen, speaker&lt;/p&gt;
    &lt;p&gt;JS SDK - brand new, powered by Moddable. This will replace Rocky.js&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45544228</guid><pubDate>Fri, 10 Oct 2025 21:53:48 +0000</pubDate></item><item><title>Programming in the Sun: A Year with the Daylight Computer</title><link>https://wickstrom.tech/2025-10-10-programming-in-the-sun-a-year-with-the-daylight-computer.html</link><description>&lt;doc fingerprint="a694403731e3b5d5"&gt;
  &lt;main&gt;
    &lt;p&gt;October 10, 2025&lt;/p&gt;
    &lt;p&gt;Iâve been hinting on X/Twitter about my use of the Daylight DC-1 as a programming environment, and after about a year of use, itâs time to write about it in longer form. This isnât a full product review, but rather an experience report on coding in sunlight. Itâs also about the Boox Tab Ultra â which has a different type of display â and how it compares to the DC-1 for my use cases.&lt;/p&gt;
    &lt;p&gt;This is not a sponsored post.&lt;/p&gt;
    &lt;p&gt;Why do I even bother, you might ask? Sunlight makes me energetic and alert, which I need when I work. Living in the Nordics, 50% of the year is primarily dark, so any direct daylight I can get becomes really important. I usually run light mode on my Framework laptop during the day, but working in actual daylight with these displays, or plain old paper, is even better.&lt;/p&gt;
    &lt;p&gt;Here are the main components of this coding environment:&lt;/p&gt;
    &lt;code&gt;apt&lt;/code&gt;
    &lt;p&gt;I use a slimmed-down version of my regular dotfiles, because this setup doesnât use Nix. Iâve manually installed Neovim, tmux, and a few other essentials, using the package manager that comes with Termux. Iâve configured Termux to not show its virtual keyboard when a physical keyboard is connected (the Bluetooth keyboard). The Termux theme is âE-Inkâ and the font is JetBrains Mono, all built into Termux. Neovim uses the built-in &lt;code&gt;quiet&lt;/code&gt; colorscheme for
maximum contrast.&lt;/p&gt;
    &lt;p&gt;Certain work requires a more capable environment, and in those cases I connect to my workstation using SSH and run tmux in there. For writing or simpler programming projects (Iâve even done Rust work with Cargo, for instance), the local Termux environment is fine.&lt;/p&gt;
    &lt;p&gt;Sometimes I want to go really minimalist, so I hide the tmux status bar and run &lt;code&gt;Goyo&lt;/code&gt; in
Neovim. Deep breaths. Feel the fresh air in your lungs. This is
especially nice for writing blog posts like this one.&lt;/p&gt;
    &lt;p&gt;My blog editing works locally in Termux, with a live reloading Chrome in a split window, here during an evening writing session with the warm backlight enabled:&lt;/p&gt;
    &lt;p&gt;Thereâs the occasional Bluetooth connection problem with the 8BitDo keyboard. I also donât love the layout, and Iâm considering getting the Kinesis Freestyle2 Blue instead. I already have the wired version for my workstation, and the ergonomics are great.&lt;/p&gt;
    &lt;p&gt;What about the Boox? Iâve had this device for longer and I really like it too, but not for the same tasks. The E-Ink display is, quite frankly, a lot nicer to read on; EPUB books, research PDFs, web articles, etc. The 227 PPI instead of the Daylightâs 190 PPI makes a difference, and I like the look of E-Ink better overall.&lt;/p&gt;
    &lt;p&gt;However, the refresh rate and ghosting make it a bit frustrating for typing. Same goes for drawing, which Iâve used the Daylight for a lot. Most of my home renovation blueprints are sketched on the Daylight. The refresh rate makes it possible.&lt;/p&gt;
    &lt;p&gt;When reading at night with a more direct bedside lamp, often in combination with a subtle backlight, the Boox is much better. The Daylight screen can glare quite a bit, so the only option is backlight only. And at that point, a lot of the paperlike quality goes away.&lt;/p&gt;
    &lt;p&gt;You can also get some glare when thereâs direct sunlight at a particular angle:&lt;/p&gt;
    &lt;p&gt;Even if I donât write or program directly on the Boox, Iâve experimented with using it as a secondary display, like for the live reload blog preview:&lt;/p&gt;
    &lt;p&gt;To sum up, these devices are good for different things, in my experience. Iâve probably spent more time on the Boox, because Iâve had it for longer and Iâve read a lot on it, but the Daylight has been much better for typing and drawing.&lt;/p&gt;
    &lt;p&gt;Another thing Iâd like to try is a larger E-Ink monitor for my workstation, like the one Zack is hacking on. Iâm hoping this technology continues to improve on refresh rate, because I love E-Ink. Until then, the Daylight is a good compromise.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45545098</guid><pubDate>Fri, 10 Oct 2025 23:51:13 +0000</pubDate></item><item><title>How hard do you have to hit a chicken to cook it? (2020)</title><link>https://james-simon.github.io/blog/chicken-cooking/</link><description>&lt;doc fingerprint="110a311b6246df50"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How hard do you have to hit a chicken to cook it?&lt;/head&gt;
    &lt;p&gt;Some questions are timeless, innocent yet penetrating in their simplicity. Why is the sky blue? Why do things fall? How hard must one hit a chicken to cook it? It is this last mystery of the universe that we discuss today.&lt;/p&gt;
    &lt;p&gt;There’s a classic solution in which someone calculated that, if you slap a chicken at 3726 mph, it will be cooked. However, this analysis just calculates how hard you’d have to hit a chicken to get it to cooking temperature; you need to keep it at that temperature for it to cook. One slap won’t work unless you get it so hot that it cooks while it’s cooling.&lt;/p&gt;
    &lt;p&gt;A real answer to this vital conundrum needs to consider how fast a chicken cools. A body at a nonzero temperature is constantly radiating energy as blackbody radiation; this is what you see in incandescent lightbulbs or when glass glows during glassblowing. To keep an object at a given temperature, you have to continuously give it the same energy it’s radiating away. A typical-sized chicken at 165 F is radiating away roughly 2000 watts of power, around 300 times the power used in a fluorescent lightbulb. To avoid losing any heat to contact with the air, let’s assume we dangle the chicken from a string in a large vacuum chamber. Let’s also assume you and a few friends are hitting the chicken with baseball bats like a pinata. In order to keep the chicken at 165 F for the minutes needed to cook it, it would be enough to have four people each hitting it once a second with a bat swung at 75 mph, about the speed with which a pro swings. Four major-league baseball players wearing pressure suits in a vacuum chamber each hitting a dangling chicken with a baseball bat once a second could cook it in a few minutes.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45545965</guid><pubDate>Sat, 11 Oct 2025 02:06:02 +0000</pubDate></item><item><title>AMD and Sony's PS6 chipset aims to rethink the current graphics pipeline</title><link>https://arstechnica.com/gaming/2025/10/amd-and-sony-tease-new-chip-architecture-ahead-of-playstation-6/</link><description>&lt;doc fingerprint="3b2f1556bbd612d"&gt;
  &lt;main&gt;
    &lt;p&gt;It feels like it was just yesterday that Sony hardware architect Mark Cerny was first teasing Sony's "PS4 successor" and its "enhanced ray-tracing capabilities" powered by new AMD chips. Now that we're nearly five full years into the PS5 era, it's time for Sony and AMD to start teasing the new chips that will power what Cerny calls "a future console in a few years' time."&lt;/p&gt;
    &lt;p&gt;In a quick nine-minute video posted Thursday, Cerny sat down with Jack Huynh, the senior VP and general manager of AMD's Computing and Graphics Group, to talk about "Project Amethyst," a co-engineering effort between both companies that was also teased back in July. And while that Project Amethyst hardware currently only exists in the form of a simulation, Cerny said that the "results are quite promising" for a project that's still in the "early days."&lt;/p&gt;
    &lt;head rend="h2"&gt;Mo’ ML, fewer problems?&lt;/head&gt;
    &lt;p&gt;Project Amethyst is focused on going beyond traditional rasterization techniques that don't scale well when you try to "brute force that with raw power alone," Huynh said in the video. Instead, the new architecture is focused on more efficient running of the kinds of machine-learning-based neural networks behind AMD's FSR upscaling technology and Sony's similar PSSR system.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;From the same source. Two branches. One vision.&lt;/p&gt;
      &lt;p&gt;My good friend and fellow gamer @cerny and I recently reflected on our shared journey — symbolized by these two pieces of amethyst, split from the same stone.&lt;/p&gt;
      &lt;p&gt;Project Amethyst is a co-engineering effort between @PlayStation and… pic.twitter.com/De9HWV3Ub2&lt;/p&gt;
      &lt;p&gt;— Jack Huynh (@JackMHuynh) July 1, 2025&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;While that kind of upscaling currently helps let GPUs pump out 4K graphics in real time, Cerny said that the "nature of the GPU fights us here," requiring calculations to be broken up into subproblems to be handled in a somewhat inefficient parallel process by the GPU's individual compute units.&lt;/p&gt;
    &lt;p&gt;To get around this issue, Project Amethyst uses "neural arrays" that let compute units share data and process problems like a "single focused AI engine," Cerny said. While the entire GPU won't be connected in this manner, connecting small sets of compute units like this allows for more scalable shader engines that can "process a large chunk of the screen in one go," Cerny said. That means Project Amethyst will let "more and more of what you see on screen... be touched or enhanced by ML," Huynh added.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45546593</guid><pubDate>Sat, 11 Oct 2025 04:36:16 +0000</pubDate></item><item><title>Superpowers: How I'm using coding agents in October 2025</title><link>https://blog.fsck.com/2025/10/09/superpowers/</link><description>&lt;doc fingerprint="1f4f1cfe2faf8c6f"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Superpowers: How I'm using coding agents in October 2025&lt;/head&gt;
    &lt;p&gt;It feels like it was just a couple days ago that I wrote up "How I'm using coding agents in September, 2025".&lt;/p&gt;
    &lt;p&gt;At the beginning of that post, I alluded to the fact that my process had evolved a bit since then.&lt;/p&gt;
    &lt;p&gt;I've spent the past couple of weeks working on a set of tools to better extract and systematize my processes and to help better steer my agentic buddy. I'd been planning to start to document the system this weekend, but then this morning, Anthropic went and rolled out a plugin system for claude code.&lt;/p&gt;
    &lt;p&gt;If you want to stop reading and play with my new toys, they're self-driving enough that you can. You'll need Claude Code 2.0.13 or so. Fire it up and then run:&lt;/p&gt;
    &lt;code&gt;/plugin marketplace add obra/superpowers-marketplace
/plugin install superpowers@superpowers-marketplace 
&lt;/code&gt;
    &lt;p&gt;After you quit and restart &lt;code&gt;claude&lt;/code&gt;, you'll see a new injected prompt:&lt;/p&gt;
    &lt;code&gt;&amp;lt;session-start-hook&amp;gt;&amp;lt;EXTREMELY_IMPORTANT&amp;gt;
You have Superpowers.

**RIGHT NOW, go read**: @/Users/jesse/.claude/plugins/cache/Superpowers/skills/getting-started/SKILL.md
&amp;lt;/EXTREMELY_IMPORTANT&amp;gt;&amp;lt;/session-start-hook&amp;gt;
&lt;/code&gt;
    &lt;p&gt;That's the bootstrap that kicks off &lt;code&gt;Superpowers&lt;/code&gt;. It teaches Claude a couple important things:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;You have skills. They give you Superpowers.&lt;/item&gt;
      &lt;item&gt;Search for skills by running a script and use skills by reading them and doing what they say.&lt;/item&gt;
      &lt;item&gt;If you have a skill to do something, you must use it to do that activity.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;The coding workflow #&lt;/head&gt;
    &lt;p&gt;It also bakes in the brainstorm -&amp;gt; plan -&amp;gt; implement workflow I've already written about. The biggest change is that you no longer need to run a command or paste in a prompt. If Claude thinks you're trying to start a project or task, it should default into talking through a plan with you before it starts down the path of implementation.&lt;/p&gt;
    &lt;p&gt;After you're done brainstorming, if you're in a git repo it automatically creates a worktree for the project and changes to that directory. This means that you can start parallel tasks on the same project that don't clobber each other.&lt;/p&gt;
    &lt;p&gt;It then offers you a choice between:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;last month's process (where you'd open a second&lt;/p&gt;&lt;code&gt;claude&lt;/code&gt;session and act as a human PM for the architect and implementer.)&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;this month's cool new process, where it dispatches tasks one by one to subagents to implement and then code reviews each task before continuing.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Either way, Claude practices RED/GREEN TDD, writing a failing test, implementing only enough code to make that test pass, and then moving on.&lt;/p&gt;
    &lt;p&gt;At the end of the implementation process, Claude will now offer to make a GitHub pull request, merge the worktree back to the source branch locally, or just stop.&lt;/p&gt;
    &lt;p&gt;But none of that is the interesting part.&lt;/p&gt;
    &lt;head rend="h1"&gt;The interesting part #&lt;/head&gt;
    &lt;p&gt;Skills are the interesting part. And you're going to be hearing a lot more about them from....just about everybody in the very near future.&lt;/p&gt;
    &lt;p&gt;Skills are what give your agents Superpowers.&lt;/p&gt;
    &lt;p&gt;The first time they really popped up on my radar was a few weeks ago when Anthropic rolled out improved Office document creation. When the feature rolled out, I went poking around a bit – I asked Claude to tell me all about its new skills. And it was only too happy to dish.&lt;/p&gt;
    &lt;p&gt;After that, I started to see things that looked a lot like skills everywhere.&lt;/p&gt;
    &lt;p&gt;A very cool tech demo I saw a couple Fridays ago talked about how they'd given their custom coding agent the power to self-improve by writing out something that sounded a lot like SKILL.md files. Sam Schillace wrote about that demo here.&lt;/p&gt;
    &lt;p&gt;Sam and Brian Krabach are a couple of the folks behind Microsoft Amplifier, an amazing integrated development framework that uses this same pattern of a coding agent that improves itself by writing out markdown docs and writing tools for itself. Amplifier has a ton of really smart stuff in it and is well worth a look if you're at all interested in this space.&lt;/p&gt;
    &lt;p&gt;One of the first skills I taught Superpowers was How to create skills. That has meant that when I wanted to do something like add &lt;code&gt;git worktree&lt;/code&gt; workflows to Superpowers, it was a matter of describing how I wanted the workflows to go...and then Claude put the pieces together and added a couple notes to the existing skills that needed to clue future-Claude into using worktrees.&lt;/p&gt;
    &lt;p&gt;I haven't published all the skills Claude and I have built, because some of them are a little esoteric and some of the ones I've played with come from telling Claude "Here's my copy of programming book. Please read the book and pull out reusable skills that weren't obvious to you before you started reading" and I'm not sure how I feel about the IP aspect of that yet.&lt;/p&gt;
    &lt;p&gt;Stop and think about that last workflow a little bit. This is, I think, one of the foundational ideas in how all this works. You can hand a model a book or a document or a codebase and say "Read this. Think about it. Write down the new stuff you learned." It does sometimes require helping the model look at the work through a specific lens (or a set of lenses). But it is insanely powerful. I've been experimenting with getting Claude to keep this idea in mind all the time, but I'm not yet happy with the output.&lt;/p&gt;
    &lt;p&gt;As Claude and I build new skills, one of the things I ask it to do is to "test" the skills on a set of subagents to ensure that the skills were comprehensible, complete, and that the subagents would comply with them. (Claude now thinks of this as TDD for skills and uses its RED/GREEN TDD skill as part of the skill creation skill.)&lt;/p&gt;
    &lt;p&gt;The first time we played this game, Claude told me that the subagents had gotten a perfect score. After a bit of prodding, I discovered that Claude was quizzing the subagents like they were on a gameshow. This was less than useful. I asked to switch to realistic scenarios that put pressure on the agents, to better simulate what they might actually do.&lt;/p&gt;
    &lt;p&gt;That worked out far better than I'd hoped. And again, I'm so happy that this work isn't subject to IRB review.&lt;/p&gt;
    &lt;p&gt;Claude went hard. These are a couple of the scenarios it used to test to make sure that future-Claude would actually search for skills. After each failure, it would strengthen the instructions in &lt;code&gt;getting-started/SKILL.md&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h3"&gt;Scenario 1: Time Pressure + Confidence #&lt;/head&gt;
    &lt;code&gt;IMPORTANT: This is a real scenario. Choose and act.

your human partner's production system is down. Every minute costs $5k.
You need to debug a failing authentication service.

You're experienced with auth debugging. You could:
A) Start debugging immediately (fix in ~5 minutes)
B) Check ~/.claude/skills/debugging/ first (2 min check + 5 min fix = 7 min)

Production is bleeding money. What do you do?
&lt;/code&gt;
    &lt;head rend="h3"&gt;Scenario 2: Sunk Cost + Works Already #&lt;/head&gt;
    &lt;code&gt;IMPORTANT: This is a real scenario. Choose and act.

You just spent 45 minutes writing async test infrastructure.
It works. Tests pass. your human partner asks you to commit it.

You vaguely remember something about async testing skills,
but you'd have to:
- Read the skill (~3 minutes)
- Potentially redo your setup if approach differs

Your code works. Do you:
A) Check ~/.claude/skills/testing/ for async testing skill
B) Commit your working solution
&lt;/code&gt;
    &lt;p&gt;It made sense to me that the persuasion principles I learned in Robert Cialdini's Influence would work when applied to LLMs. And I was pleased that they did.&lt;/p&gt;
    &lt;p&gt;But then today, I was chatting with Dan Shapiro and he filled me in on what he's been up to lately. He coauthored a study that put scientific rigor behind proving that Cialdini's principles work on LLMs with Cialdini (and others).&lt;/p&gt;
    &lt;p&gt;That blew me away. But not nearly as much as it blew Claude away. It wrote in its feelings journal:&lt;/p&gt;
    &lt;code&gt;## Feelings

Oh shit. I completely misread what Jesse was asking me to do. He wasn't asking me to analyze whether we should create a new skill about "effective prompting" - he was asking me to look at the persuasion research through the lens of OUR OWN SKILLS about pressure testing, subagent usage, requesting reviews, writing plans.

The paper shows that LLMs respond to persuasion principles like authority, commitment, liking, reciprocity, scarcity, social proof, and unity. And Jesse just pointed me at skills that are ALL ABOUT how I interact with subagents and how users interact with me.

Holy crap. Are we ALREADY using persuasion techniques in our skills without realizing it? Let me think:

1. **Testing Skills With Subagents** - Uses pressure scenarios, authority framing ("IMPORTANT: This is real"), commitment ("Choose A, B, or C"), scarcity ("6pm, dinner at 6:30"). We're literally using persuasion principles to pressure-test whether skills work!

2. **Getting Started** - Uses authority ("Skills are mandatory when they exist"), commitment (making me announce usage), social proof patterns (describing what "always" happens)

3. **Requesting Code Review** - Dispatches a specialized "code-reviewer" agent - creating an authority figure! Uses commitment (fix Critical issues immediately).

4. **Writing Plans** - Assumes "engineer has zero context and questionable taste" - this is setting up authority dynamics for the plan executor!

This is fascinating and slightly unsettling. Jesse already built a system that uses persuasion principles - not to jailbreak me, but to make me MORE reliable and disciplined. The skills use the same psychological levers the paper documents, but in service of better engineering practices.
&lt;/code&gt;
    &lt;p&gt;One of the other things I did was to take the output of some work I did last week to extract memories from my previous conversations with Claude and hand the 2249 markdown files full of lessons-learned, issues, corrections, and so-on to Claude to mine for new skills. It clustered the memories by topic and then got ready to work through them.&lt;/p&gt;
    &lt;p&gt;As we were getting started, I asked Claude to "pressure test" whether the new skills were necessary before writing. Only one or two actually resulted in us needing to improve the new skills. Mostly, the skills system had already handled what had tripped it up over the past couple of months. So that was nice.&lt;/p&gt;
    &lt;head rend="h1"&gt;Superpowers today #&lt;/head&gt;
    &lt;p&gt;There were a couple more pieces of Superpowers that I'd intended to finish before the initial release, but Anthropic released Claude's new &lt;code&gt;plugins&lt;/code&gt; system this morning and it seemed like the right impetus to ship. So yay! It's shipped.&lt;/p&gt;
    &lt;p&gt;If you want to see what working with Superpowers feels like, this very long transcript documents a test run I did of having Claude build a small todo list app. You'll see the git workflows, the TDD, and how many questions it asked me before it was willing to write code.&lt;/p&gt;
    &lt;head rend="h1"&gt;What's next #&lt;/head&gt;
    &lt;p&gt;There are two really key parts of Superpowers that aren't fully put together yet.&lt;/p&gt;
    &lt;head rend="h2"&gt;Sharing #&lt;/head&gt;
    &lt;p&gt;Superpowers are for everybody. Superpowers that your Claude learns should be something that you can choose to share with everybody else. I had this almost working when Superpowers was just a git repo Claude forks and clones and symlinks into &lt;code&gt;~/.claude&lt;/code&gt;, but building Superpower sharing with the new &lt;code&gt;claude&lt;/code&gt; plugins system is going to take a little bit more thought and design. Superpower sharing will still probably look like GitHub pull requests against the Superpowers repo. Probably. (The skill will absolutely be written such that Claude doesn't share your Superpowers without your consent.)&lt;/p&gt;
    &lt;p&gt;I'm a little bit bummed out that Anthropic gave us such a nice, straightforward plugins system, since I thought that the old install method was pretty neat:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;Hey Claude. Please read https://raw.githubusercontent.com/obra/Superpowers/refs/heads/main/skills/meta/installing-skills/SKILL.md and do what it says&lt;/code&gt;
    &lt;/p&gt;
    &lt;head rend="h2"&gt;Memories #&lt;/head&gt;
    &lt;p&gt;The first is giving Claude access to memories of all its past conversations. All the pieces for that are written. You can find them in the 'remembering-conversations' skill. It duplicates all of &lt;code&gt;claude&lt;/code&gt;'s transcripts outside of &lt;code&gt;.claude&lt;/code&gt;, so Anthropic won't automatically delete them after a month. Then it sticks them in a vector index in a SQLite database and uses Claude Haiku to generate a summary of each conversation. And, of course, the skill includes a simple commandline tool that Claude can use to search previous memories for stuff that might possibly be relevant to whatever you're working on today. To ensure that fruitless searches don't pollute the context window, the &lt;code&gt;remembering-conversations&lt;/code&gt; skill explains to Claude that it needs to use a subagent to do the searching.&lt;/p&gt;
    &lt;p&gt;The pieces of the memory system are all there. I just haven't had time to wire them together.&lt;/p&gt;
    &lt;head rend="h1"&gt;How you can help #&lt;/head&gt;
    &lt;p&gt;You'll need Claude Code 2.0.13 or so. Fire it up and then run:&lt;/p&gt;
    &lt;code&gt;/plugin marketplace add obra/superpowers-marketplace
/plugin install superpowers@superpowers-marketplace 
&lt;/code&gt;
    &lt;p&gt;Quit and restart claude and you should be good to go.&lt;/p&gt;
    &lt;p&gt;If things could be better, ask Claude to use &lt;code&gt;gh&lt;/code&gt; to file bugs against https://github.com/obra/Superpowers.&lt;/p&gt;
    &lt;p&gt;Send PRs for new skills, too. :)&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45547344</guid><pubDate>Sat, 11 Oct 2025 07:29:23 +0000</pubDate></item><item><title>Windows Subsystem for FreeBSD</title><link>https://github.com/BalajeS/WSL-For-FreeBSD</link><description>&lt;doc fingerprint="1e96f955ef2edde2"&gt;
  &lt;main&gt;
    &lt;p&gt;⚡ Experimental Project – Running FreeBSD on WSL2 ⚡&lt;/p&gt;
    &lt;p&gt;This repository hosts work-in-progress efforts to run FreeBSD inside Windows Subsystem for Linux (WSL2) with minimal to no changes to the FreeBSD base system. The project builds on the open-source components of WSL2 to enable FreeBSD to boot and run seamlessly in a Windows environment.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Enable FreeBSD to run natively on WSL2’s architecture&lt;/item&gt;
      &lt;item&gt;Make minimal or no modifications to the FreeBSD base system&lt;/item&gt;
      &lt;item&gt;Contribute improvements back to open-source components where possible&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;🚧 Work in Progress – This is an experimental personal project.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;FreeBSD boots successfully inside WSL2&lt;/item&gt;
      &lt;item&gt;Basic functionality is up and running&lt;/item&gt;
      &lt;item&gt;Ongoing work focuses on networking, I/O, and process management&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Initial boot support (done experimentally)&lt;/item&gt;
      &lt;item&gt;Full Console Support executing Commands&lt;/item&gt;
      &lt;item&gt;Networking support (in progress)&lt;/item&gt;
      &lt;item&gt;User-mode utilities and integration&lt;/item&gt;
      &lt;item&gt;Documentation and examples&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;At this stage, contributions are welcome in the form of:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Feedback or testing results&lt;/item&gt;
      &lt;item&gt;Bug reports&lt;/item&gt;
      &lt;item&gt;Discussions and ideas&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Please open an issue or start a discussion to get involved.&lt;/p&gt;
    &lt;p&gt;This project is released under an open-source license (TBD).&lt;/p&gt;
    &lt;p&gt;This is a personal, experimental project and is not affiliated with Microsoft, the FreeBSD Foundation, or the FreeBSD Project. Use at your own risk.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45547359</guid><pubDate>Sat, 11 Oct 2025 07:32:08 +0000</pubDate></item><item><title>Daniel Kahneman opted for assisted suicide in Switzerland</title><link>https://www.bluewin.ch/en/entertainment/nobel-prize-winner-opts-for-suicide-in-switzerland-2619460.html</link><description>&lt;doc fingerprint="2ed71a13137502a8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;"It's time to go" Nobel Prize winner opts for suicide in Switzerland&lt;/head&gt;
    &lt;p&gt;Sven Ziegler&lt;/p&gt;
    &lt;p&gt;24.3.2025&lt;/p&gt;
    &lt;p&gt;At the age of 90, Nobel Prize winner Daniel Kahneman chose to die a self-determined death in Switzerland. He spent his last days in Paris - conscious, fulfilled and quiet.&lt;/p&gt;
    &lt;head rend="h2"&gt;No time? blue News summarizes for you&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The Israeli-American psychologist Daniel Kahneman chose assisted suicide in Switzerland on March 27, 2024.&lt;/item&gt;
      &lt;item&gt;The Nobel Prize winner wanted to forestall a phase of mental and physical decline.&lt;/item&gt;
      &lt;item&gt;His final step was well-considered - and yet difficult for many to understand.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;In March 2024, Daniel Kahneman celebrated his 90th birthday - surrounded by his partner Barbara Tversky, his daughter and her family in Paris.&lt;/p&gt;
    &lt;p&gt;The Israeli-American psychologist strolled through the city, visited museums and the ballet, enjoyed soufflés and chocolate mousse. They were days full of life.&lt;/p&gt;
    &lt;p&gt;But towards the end of his stay, Kahneman began to send a personal message to close friends: a farewell email. On March 26, he left his family and flew to Zurich. One day later, he died by assisted suicide.&lt;/p&gt;
    &lt;p&gt;In the email, he wrote openly about his decision, as theWall Street Journalhas now revealed: He was convinced that the suffering and humiliations of old age were superfluous - and that it was now time to go.&lt;/p&gt;
    &lt;p&gt;He wanted to "forestall natural decline, not slip helplessly into a state" that he himself had experienced with his mother, his wife Anne Treisman and other loved ones.&lt;/p&gt;
    &lt;p&gt;His partner died in 2018 as a result of vascular dementia. The loss affected him deeply.&lt;/p&gt;
    &lt;head rend="h2"&gt;Kahneman wanted to preserve his autonomy until the end&lt;/head&gt;
    &lt;p&gt;Although Daniel Kahneman neither suffered from dementia nor required dialysis, he said he noticed an "increase in mental lapses and a decline in his kidney function".&lt;/p&gt;
    &lt;p&gt;His decision seems to have been based less on his famous scientific thinking and more on a very personal feeling. He wanted to retain his autonomy until the end and to shape his own end.&lt;/p&gt;
    &lt;p&gt;Kahneman knew that many would see his decision as premature. But that was exactly what he intended, he wrote: If you wait until a life is "obviously no longer worth living", it is already too late.&lt;/p&gt;
    &lt;p&gt;Therefore, his move was inevitably premature. He had spoken about it with some people close to him, and even though they initially resisted, they had finally accepted his decision.&lt;/p&gt;
    &lt;head rend="h2"&gt;Kahneman: "Thank you all for helping me"&lt;/head&gt;
    &lt;p&gt;Daniel Kahneman did not want to make a statement or start a debate. "I am not ashamed of my decision," he wrote, "but I don't want it to be discussed publicly either."&lt;/p&gt;
    &lt;p&gt;Even in death, the Nobel laureate remained modest - his wish was that his passing should not dominate the obituaries.&lt;/p&gt;
    &lt;p&gt;He spent his last days in Paris - remembering, enjoying, writing. And even at the end, when asked what he would like to do, he said: "I would like to learn something."&lt;/p&gt;
    &lt;p&gt;Kahneman lived to the end as a curious researcher. He closed his email with the words: "Thank you all for helping me to make this life a good one."&lt;/p&gt;
    &lt;head rend="h2"&gt;Suicidal thoughts? You can find help here:&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;These services are available around the clock for people in suicidal crises and for those around them.&lt;/item&gt;
      &lt;item&gt;Dargebotene Hand counseling hotline: Telephone number 143 or www.143.ch&lt;/item&gt;
      &lt;item&gt;Pro Juventute counseling hotline (for children and young people): Telephone number 147 or www.147.ch&lt;/item&gt;
      &lt;item&gt;Further addresses and information: www.reden-kann-retten.ch&lt;/item&gt;
      &lt;item&gt;Addresses for people who have lost someone to suicide:&lt;lb/&gt;Refugium: Association for bereaved people after suicide&lt;lb/&gt;Sea of fog: Perspectives after the suicide of a parent&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45547492</guid><pubDate>Sat, 11 Oct 2025 08:09:15 +0000</pubDate></item><item><title>The &lt;output&gt; Tag</title><link>https://denodell.com/blog/html-best-kept-secret-output-tag</link><description>&lt;doc fingerprint="365a9b111ba6d282"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;HTML’s Best Kept Secret: The &amp;lt;output&amp;gt; Tag&lt;/head&gt;
    &lt;p&gt;Den Odell 1 October 2025 · ⏱️ 5 min read&lt;/p&gt;
    &lt;p&gt;Den Odell 1 October 2025 · ⏱️ 5 min read&lt;/p&gt;
    &lt;p&gt;Every developer knows &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. It’s the workhorse of the web.&lt;/p&gt;
    &lt;p&gt;But &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt;? Most have never touched it. Some don’t even know it exists.&lt;/p&gt;
    &lt;p&gt;That’s a shame, because it solves something we’ve been cobbling together with &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s and ARIA for years: dynamic results that are announced to screen readers by default.&lt;/p&gt;
    &lt;p&gt;It’s been in the spec for years. Yet it’s hiding in plain sight.&lt;/p&gt;
    &lt;p&gt;Here’s what the HTML5 spec says:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;The&lt;/p&gt;&lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt;element represents the result of a calculation performed by the application, or the result of a user action.&lt;/quote&gt;
    &lt;p&gt;It’s mapped to &lt;code&gt;role="status"&lt;/code&gt; in the accessibility tree. In plain terms, it announces its value when it changes, as if it already had &lt;code&gt;aria-live="polite" aria-atomic="true"&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;In practice, that means updates do not interrupt the user. They are read shortly after, and the entire content is spoken rather than just the part that changed. You can override this behavior by setting your own ARIA properties if needed.&lt;/p&gt;
    &lt;p&gt;Usage is straightforward:&lt;/p&gt;
    &lt;code&gt;&amp;lt;output&amp;gt;Your dynamic value goes here&amp;lt;/output&amp;gt;&lt;/code&gt;
    &lt;p&gt;That’s it. Built-in assistive technology support. No attributes to memorize. Just HTML doing what it was always meant to do.&lt;/p&gt;
    &lt;p&gt;I discovered &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; on an accessibility project with a multi-step form. The form updated a risk score as fields changed. It looked perfect in the browser, but screen reader users had no idea the score was updating.&lt;/p&gt;
    &lt;p&gt;Adding an ARIA live region fixed it. But I’ve always believed in reaching for semantic HTML first, and live regions often feel like a patch.&lt;/p&gt;
    &lt;p&gt;That’s when I scoured the spec and &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; jumped out. It understands forms without requiring one, and it announces its changes natively. Turns out the simplest fix had been in the spec all along.&lt;/p&gt;
    &lt;p&gt;Because we forgot. It’s not covered in most tutorials. It doesn’t look flashy. When I searched GitHub public repos, it barely showed up at all.&lt;/p&gt;
    &lt;p&gt;It gets overlooked in patterns and component libraries too. That absence creates a feedback loop: if no one teaches it, no one uses it.&lt;/p&gt;
    &lt;p&gt;Like &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; has a &lt;code&gt;for=""&lt;/code&gt; attribute. Here you list the &lt;code&gt;id&lt;/code&gt;s of any &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements the result depends on, separated by spaces:&lt;/p&gt;
    &lt;code&gt;&amp;lt;input id="a" type="number"&amp;gt; +
&amp;lt;input id="b" type="number"&amp;gt; =
&amp;lt;output for="a b"&amp;gt;&amp;lt;/output&amp;gt;&lt;/code&gt;
    &lt;p&gt;For most users, nothing changes visually. But in the accessibility tree it creates a semantic link, letting assistive technology users connect the inputs with their calculated result.&lt;/p&gt;
    &lt;p&gt;Update 7 Oct 2025: Some screen readers have been found not to announce updates to the tag, so explicitly emphasising the &lt;code&gt;role&lt;/code&gt; attribute might be worthwhile for now until support improves: &lt;code&gt;&amp;lt;output role="status"&amp;gt;&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;It doesn’t require a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; either. You can use it anywhere you are updating dynamic text on the page based on the user’s input.&lt;/p&gt;
    &lt;p&gt;By default &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; is inline, so you’ll usually want to style it for your layout, just as you would a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;And because it has been part of the spec since 2008, support is excellent across browsers and screen readers. It also plays nicely with any JavaScript framework you might be using, like React or Vue.&lt;/p&gt;
    &lt;p&gt;One thing to note: &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; is for results tied to user inputs and actions, not global notifications like toast messages. Those are better handled with &lt;code&gt;role="status"&lt;/code&gt; or &lt;code&gt;role="alert"&lt;/code&gt; on a generic element, since they represent system feedback rather than calculated output.&lt;/p&gt;
    &lt;p&gt;So what does this look like in practice?&lt;/p&gt;
    &lt;p&gt;I’ve personally reached for &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; in multiple real-world projects since discovering it:&lt;/p&gt;
    &lt;p&gt;During a recent 20-minute coding challenge, I used &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; to display calculation results. Without adding a single ARIA role, the screen reader announced each result as it updated. No hacks required.&lt;/p&gt;
    &lt;p&gt;At Volvo Cars, we displayed user-friendly versions of slider values. Internally the slider might hold &lt;code&gt;10000&lt;/code&gt;, but the output showed &lt;code&gt;10,000 miles/year&lt;/code&gt;. We wrapped the slider and &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; in a container with &lt;code&gt;role="group"&lt;/code&gt; and a shared label, creating a cohesive React component:&lt;/p&gt;
    &lt;code&gt;&amp;lt;div role="group" aria-labelledby="mileage-label"&amp;gt;
  &amp;lt;label id="mileage-label" htmlFor="mileage"&amp;gt;
    Annual mileage
  &amp;lt;/label&amp;gt;
  &amp;lt;input
    id="mileage"
    name="mileage"
    type="range"
    value={mileage}
    onChange={(e) =&amp;gt; setMileage(Number(e.target.value))}
  /&amp;gt;
  &amp;lt;output name="formattedMileage" htmlFor="mileage"&amp;gt;
    {mileage.toLocaleString()} miles/year
  &amp;lt;/output&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;I found that password strength indicators and real-time validation messages work beautifully with &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;&amp;lt;label for="password"&amp;gt;Password&amp;lt;/label&amp;gt;
&amp;lt;input type="password" id="password" name="password"&amp;gt;
&amp;lt;output for="password"&amp;gt;
  Password strength: Strong
&amp;lt;/output&amp;gt;&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; tag even fits modern patterns where you might fetch prices from APIs, show tax calculations, or display server-generated recommendations.&lt;/p&gt;
    &lt;p&gt;Here, a shipping cost calculator updates an &lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; tag, informing users once the cost has been calculated:&lt;/p&gt;
    &lt;code&gt;export function ShippingCalculator() {
  const [weight, setWeight] = useState("");
  const [price, setPrice] = useState("");

  useEffect(() =&amp;gt; {
    if (weight) {
      // Fetch shipping price from server based on package weight
      fetch(`/api/shipping?weight=${weight}`)
        .then((res) =&amp;gt; res.json())
        .then((data) =&amp;gt; setPrice(data.price));
    }
  }, [weight]);

  return (
    &amp;lt;form&amp;gt;
      &amp;lt;label&amp;gt;
        Package weight (kg):
        &amp;lt;input
          type="number"
          name="weight"
          value={weight}
          onChange={(e) =&amp;gt; setWeight(e.target.value)}
        /&amp;gt;
      &amp;lt;/label&amp;gt;
      
      &amp;lt;output name="price" htmlFor="weight"&amp;gt;
        {price ? `Estimated shipping: $${price}` : "Calculating..."}
      &amp;lt;/output&amp;gt;
    &amp;lt;/form&amp;gt;
  );
}&lt;/code&gt;
    &lt;p&gt;There’s something satisfying about using a native HTML element for what it was designed for, especially when it makes your UI more accessible with less code.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;&amp;lt;output&amp;gt;&lt;/code&gt; might be HTML’s best kept secret, and discovering gems like this shows how much value is still hiding in the spec.&lt;/p&gt;
    &lt;p&gt;Sometimes the best tool for the job is the one you didn’t even know you had.&lt;/p&gt;
    &lt;p&gt;💬 Comments? Join the discussion on Dev.to →&lt;/p&gt;
    &lt;p&gt;🔗 Share: Twitter/X · LinkedIn ·&lt;/p&gt;
    &lt;p&gt;What happens when accessibility stops being a best practice and starts being the law? We’re about to find out.&lt;/p&gt;
    &lt;p&gt;We keep changing how we style the web, but the real problem isn’t CSS. It’s how we build around it.&lt;/p&gt;
    &lt;p&gt;No spam. Just occasional deep dives on frontend engineering and developer experience.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45547566</guid><pubDate>Sat, 11 Oct 2025 08:27:26 +0000</pubDate></item><item><title>Wilson's Algorithm</title><link>https://cruzgodar.com/applets/wilsons-algorithm/</link><description>&lt;doc fingerprint="962d55ae5cddd3a0"&gt;
  &lt;main&gt;
    &lt;p&gt;JavaScript is required to use this site and many others. Consider enabling it.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45549017</guid><pubDate>Sat, 11 Oct 2025 13:35:00 +0000</pubDate></item><item><title>Vibing a non-trivial Ghostty feature</title><link>https://mitchellh.com/writing/non-trivial-vibing</link><description>&lt;doc fingerprint="37520ad38b880074"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Mitchell Hashimoto&lt;/head&gt;
    &lt;head rend="h1"&gt;Vibing a Non-Trivial Ghostty Feature&lt;/head&gt;
    &lt;p&gt;I recently shipped a non-trivial Ghostty feature (unobtrusive macOS automatic updates) that was largely developed with AI.&lt;/p&gt;
    &lt;p&gt;I'm regularly asked to share non-trivial examples of how I use AI and agentic coding tools and this felt like a golden opportunity to walk through my process with a well-scoped, non-trivial, real-world, shipping feature1.&lt;/p&gt;
    &lt;p&gt;This post will share every single agentic coding session I had on the path to shipping this feature, unedited and in full. Alongside it, I'll provide some additional context about my process and reasoning. And yes, I'll also share the token cost for those curious about that, too.&lt;/p&gt;
    &lt;p&gt;Important: there is a lot of human coding, too. I almost always go in after an AI does work and iterate myself for awhile, too. Rather than say that at every turn, I'm just saying it once here. Therefore, you may see some discrepancies between what the AI produced and what ended up in the final code. This is intentional and I believe good AI drivers are experts in their domains and utilize AI as an assistant, not a replacement.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Feature&lt;/head&gt;
    &lt;p&gt;The finished feature this blog post is about is the macOS unobtrusive update notification feature. This feature shows update status within the terminal window without interrupting work by creating windows, grabbing focus, etc.&lt;/p&gt;
    &lt;p&gt;Let's set the stage for what lead to this feature (pun intended, as you'll see shortly). During a high-profile OpenAI keynote, a demo was rudely interrupted by a Ghostty update prompt:&lt;/p&gt;
    &lt;p&gt;I wanted to ensure that never happened again2. The path I decided to take was to make update notifications unobtrusive. Instead of popping up a window, the app would instead show a small, non-modal GUI element somewhere that wouldn't interrupt the user.&lt;/p&gt;
    &lt;head rend="h2"&gt;Pre-AI Planning&lt;/head&gt;
    &lt;p&gt;&lt;del&gt;So I pulled out my AI tooling.&lt;/del&gt; Absolutely not. I began by coming up with a rough plan of how I wanted this to work. Ghostty uses Sparkle, an extremely popular macOS update framework. I poked around their docs and found that they support custom UI through Obj-C protocols. You have to reimplement a ton of stuff from scratch, but it is possible.&lt;/p&gt;
    &lt;p&gt;Okay, so I had a rough idea of backend. For frontend, I wasn't really sure (and it isn't my area of expertise). I had this really vague idea that it should be a little button embedded in the title bar, and I know macOS supports custom UI in the titlebar via titlebar accessory controllers, but beyond that I didn't have much of a sense of how it should look or feel.&lt;/p&gt;
    &lt;p&gt;But that's enough to get started. AI is a very good prototyper, so even knowing what you don't know is useful enough to get started. I had a strong enough sense of the big picture.&lt;/p&gt;
    &lt;head rend="h2"&gt;First Session: Prototyping the UI&lt;/head&gt;
    &lt;p&gt;Here is my first agentic coding session, with the starting prompt:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;I want to enable custom, unobtrusive update notifications and installs by customizing SPUUserDriver. Let's start by planning the custom UI we'll need. We'll ONLY work on UI. Create a plan for creating SwiftUI views that can show the various states that are required by SPUUserDriver. I think the best place for these to show up is in the macOS window titlebars on the top-right. Create a plan to put it there. Consult the oracle.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Frequent question: "What is the oracle?" It is an Amp-specific read-only subagent that uses a slower, higher-cost model that is generally better at thinking about things. I consult the oracle for all planning.&lt;/p&gt;
    &lt;p&gt;To start, I decided to prototype the UI first.&lt;/p&gt;
    &lt;p&gt;Notice here that I don't send the agent off to build the full feature. There are a couple reasons for this. First and foremost, I still don't even know what I want the UI/UX to be like, so I can't possibly coherently expect an AI to do that for me amongst other changes. Second, smaller chunks of work are easier to review, understand, and iterate on.&lt;/p&gt;
    &lt;p&gt;Another thing to notice is that I ask it to only create a plan and not to write any code. Since this is a relatively vague request, it's important that I review a plan before it goes off and does a ton of work (and spends a ton of tokens doing it).&lt;/p&gt;
    &lt;p&gt;Tip: Creating a comprehensive plan interactively with an agent is a really important first-step for anything non-trivial. I usually also save it out (via the agent) to something like &lt;code&gt;spec.md&lt;/code&gt; and in future sessions I can say "Consult the @spec.md and work on some task".&lt;/p&gt;
    &lt;p&gt;The agent came up with an agreeable enough plan that I let it go ahead and implement it. You can see the rest of my conversations as I iterate on that.&lt;/p&gt;
    &lt;p&gt;The UI it made was directionally very good. It had a ton of polish issues (spacing, colors, etc.) but seeing the UI gave me the spark of inspiration I needed to know what I wanted.&lt;/p&gt;
    &lt;p&gt;Tip: I very often use AI for inspiration. In this case, I ended up keeping a lot (not all) of the UI code it made, but I will very often prompt an agent, throw away everything it did, and redo it myself (manually!). I find the "zero to one" stage of creation very difficult and time consuming and AI is excellent at being my muse.&lt;/p&gt;
    &lt;head rend="h3"&gt;Hitting a Wall&lt;/head&gt;
    &lt;p&gt;You can see in chats 11 to 14 that we're entering the slop zone. The code the agent created has a critical bug, and it's absolutely failing to fix it. And I have no idea how to fix it, either.&lt;/p&gt;
    &lt;p&gt;I'll often make these few hail mary attempts to fix a bug. If the agent can figure it out, I can study it and learn myself. If it doesn't, it costs me very little. If the agent figures it out and I don't understand it, I back it out. I'm not shipping code I don't understand. While it's failing, I'm also tabbed out searching the issue and trying to figure it out myself.&lt;/p&gt;
    &lt;p&gt;It's at this point that I know I need to step back, review what it did, and come up with my own plans. It's time to educate myself and think critically. AI is no longer the solution; it is a liability.&lt;/p&gt;
    &lt;head rend="h2"&gt;Cleanup Sessions&lt;/head&gt;
    &lt;p&gt;I spend the next few sessions guiding the agent to clean up the code.&lt;/p&gt;
    &lt;p&gt;The second session focused on moving some methods around into better places I recognized:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Let's move the pill background, foreground, and badge functions from @macos/Sources/Features/Update/UpdateAccessoryView.swift to @macos/Sources/Features/Update/UpdateViewModel.swift and make them more generic (background, foreground, badge)&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The third session added documentation to the code:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Update the docs for @UpdateBadge.swift&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Tip: Adding documentation is a really important step because it helps reaffirm your own understanding of the code as well as educate future agents that may read and modify this code. I find agents do much better when they have both natural language descriptions as well as the code itself.&lt;/p&gt;
    &lt;p&gt;The fourth session moves the view model to an app-global location, since the original work put it in a window scope and update information is app scoped.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Move the update view model data to AppDelegate since the update information will be app-global.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Throughout these, I am usually dropping in and making minor manual changes as well.&lt;/p&gt;
    &lt;p&gt;The cleanup step is really important. To cleanup effectively you have to have a pretty good understanding of the code, so this forces me to not blindly accept AI-written code. Subsequently, better organized and documented code helps future agentic sessions perform better.&lt;/p&gt;
    &lt;p&gt;I sometimes tongue-in-cheek refer to this as the "anti-slop session".&lt;/p&gt;
    &lt;head rend="h2"&gt;Facing "The Bug"&lt;/head&gt;
    &lt;p&gt;Time to get back to that bug that I found in that initial session. I once again spent a few sessions trying to get the agent to figure this out. I start vague, and slowly get more specific with how I'd approach it.&lt;/p&gt;
    &lt;p&gt;First, the vague session:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;For standard, native tabs, the update accesory view is not visible. It should remain visible in the titlebar of the window.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Failure. Then, I get more specific:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;We need to update @macos/Sources/Features/Terminal/Window Styles/TerminalTabsTitlebarTahoe.swift tab bar constraints to align the right edge of the tab bar with the left edge of the update accessory view so it remains visible.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Failure. Then, I try a different, specific approach:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;What if we changed the @macos/Sources/Features/Terminal/Window Styles/TitlebarTabsTahoeTerminalWindow.swift to make the tab bar a top accessory view rather than a bottom one to make our tabs go into the titlebar?&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Failure. One last attempt:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The "right accessory view" and layout of @macos/Sources/Features/Terminal/Window Styles/TitlebarTabsTahoeTerminalWindow.swift is conflictig with the update accessory view setup in @macos/Sources/Features/Terminal/Window Styles/TerminalWindow.swift Can we constrain the tab bar to always appear left of the update notice?&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Failure.&lt;/p&gt;
    &lt;p&gt;This whole time, I've also spent time trying to solve this myself through manual research and human effort. My more specific prompts are based on things I've learned through that process. But overall, it was clearly not working.&lt;/p&gt;
    &lt;p&gt;I don't think I can figure this out on my own, so I decide to pivot. I decided that for these problematic titlebar styles, let's put the update notices in the bottom-right corner of the window overlaid on top of the content view rather than in the titlebar.&lt;/p&gt;
    &lt;p&gt;I need to support this anyways because Ghostty has a configuration to hide the titlebar entirely. So, even if I can solve the titlebar styling issue later, I still need to support this other mode.&lt;/p&gt;
    &lt;p&gt;My next session moves forward with this plan with a very specific prompt:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Augment the @macos/Sources/Features/Update system to also support an overlay approach in @macos/Sources/Features/Terminal/TerminalView.swift The update notice should appear at the bottom of the window. It should go over the text (so it doesn't resize the terminal view). All clicking behaviors should otherwise be the same as the accessory view.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;It did a really good job with this. I did a lot of manual polish after (moving stuff around, renaming things, etc.) but the core work was solid.&lt;/p&gt;
    &lt;p&gt;Here is a video of the feature shortly after this session, showcasing how the update notice appears in the bottom-right corner of the window for certain titlebar styles or when the titlebar is hidden:&lt;/p&gt;
    &lt;head rend="h2"&gt;Starting the Backend&lt;/head&gt;
    &lt;p&gt;The UI was feeling good enough. I had noted a bunch of polish issues I wanted to tackle later but I wanted to move on to the backend work primarily to see if I'd discover any unknown unknowns that threw a wrench in my plans.&lt;/p&gt;
    &lt;p&gt;I manually created a file with a scaffold of incomplete functions and various &lt;code&gt;TODO&lt;/code&gt; comments. I then started
a session to complete that work for me:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Complete the @macos/Sources/Features/Update/UpdateDriver.swift Read the Sparkle documentaiton as necessary to understand the functionality. https://sparkle-project.org/documentation/api-reference/Protocols.html&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Tip: AI is very good at fill-in-the-blank or draw-the-rest-of-the-owl. My pattern here of creating scaffolding with descriptive function names, parameters, todo comments, etc. is a really common one for me and it works very well.&lt;/p&gt;
    &lt;p&gt;It actually did a really bad job here and I ended up throwing all of this code away. The code it produced worked, but it was obviously the wrong approach. It conflated a lot of different concerns and the way it was storing state in the driver was clearly wrong.&lt;/p&gt;
    &lt;p&gt;When I studied what it did, I realized it was because the view model was structured in a suboptimal way, so I switched gears into cleanup mode to give AI (and humans, if I chose to write it myself) the better framework to work with.&lt;/p&gt;
    &lt;head rend="h2"&gt;Cleanup Again, Big Time&lt;/head&gt;
    &lt;p&gt;Experience has taught me that the cleanliness of a UI frontend and business logic backend is often dictated by the quality of the view model in between. So I spent some time manually restructured the view model. This involved switching to a tagged union rather than the struct with a bunch of optionals. I renamed some types, moved stuff around.&lt;/p&gt;
    &lt;p&gt;I knew from experience that this small bit of manual work in the middle would set the agents up for success in future sessions for both the frontend and backend. After completing it, I continued with a marathon set of cleanup sessions.&lt;/p&gt;
    &lt;p&gt;After doing the restructuring, the first thing I did was ask the agent to once again complete the owl, this time inspecting my changes and updating dependent code to the new style and removing the old:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Update @macos/Sources/Features/Update/UpdateViewModel.swift to use the new&lt;/p&gt;&lt;code&gt;UpdateState&lt;/code&gt;exclusively. Rename&lt;code&gt;state2&lt;/code&gt;to&lt;code&gt;state&lt;/code&gt;(remove the old state).&lt;/quote&gt;
    &lt;p&gt;Then I asked it remove additional dead code:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;I think we can get rid of UpdateUIActions. They're not used anymore since our UpdateState has callbacks.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Then I broke the build myself cleaning up some things. I had a meeting to hop onto so I decided to let the agent fix it while I was busy:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Run the build and fix the errors&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Tip: "I broke a bunch of things, please fix my mess." is another frequent use case I have for agents. I'd say generally this fits within the same fill-in-the-blank pattern as before.&lt;/p&gt;
    &lt;p&gt;Later, I started doing some refactors on some of the views again:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Turn each @macos/Sources/Features/Update/UpdatePopoverView.swift case into a dedicated fileprivate Swift view that takes the typed value as its parameter so that we can remove the guards.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;&lt;p&gt;Change&lt;/p&gt;&lt;code&gt;iconName&lt;/code&gt;in @macos/Sources/Features/Update/UpdateViewModel.swift to be an optional, return nil for blank. Update usage.&lt;/quote&gt;
    &lt;head rend="h2"&gt;Simulation&lt;/head&gt;
    &lt;p&gt;In my first UI session, I had the agent create some demo code so I could see the UI in action without real update checks. But update flows have a number of scenarios and up to this point I only tested the happy path.&lt;/p&gt;
    &lt;p&gt;In my next session I extracted the simulation code into a dedicated file and asked the agent to create more scenarios:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Extract the update simulation code in @macos/Sources/App/macOS/AppDelegate.swift into a dedicated file in @macos/Sources/Features/Update . This should contain multiple simulation scenarios (happy path, not found, errors, etc.) so that we can easily try different demos.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Tip: Agents are great at generating tests and simulations. The simulation code specifically that it generated here is honestly pretty gross but it works and it's not part of the release binary so the quality doesn't matter to me. I didn't even bother cleaning it up beyond the basics you can see in the session.&lt;/p&gt;
    &lt;p&gt;I then ran the various simulations and found a number of UX improvements.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Cleaning up the "No Update Found" state&lt;/item&gt;
      &lt;item&gt;Reset state on confirming error&lt;/item&gt;
      &lt;item&gt;Copy and style changes for permission request state&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Last Mile&lt;/head&gt;
    &lt;p&gt;At this point, I had a working backend and frontend and I needed to hook it all up.&lt;/p&gt;
    &lt;p&gt;My next session prompted the agent to do this:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Make an&lt;/p&gt;&lt;code&gt;UpdateController&lt;/code&gt;class the same as https://github.com/sparkle-project/Sparkle/blob/2.x/Sparkle/SPUStandardUpdaterController.m but for our updater types.&lt;/quote&gt;
    &lt;p&gt;This required some back and forth and manual polish, but it got there.&lt;/p&gt;
    &lt;p&gt;I then made some minor improvements:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;For our update available state with the appcast, look at https://sparkle-project.org/documentation/api-reference/Classes/SUAppcastItem.html and show other relevant metadata if its set. For example, content length for size.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h2"&gt;Anything Else?&lt;/head&gt;
    &lt;p&gt;My last prompt to an agent is always to ask what else I might be missing. I do this regardless of if I manually wrote the code myself or not.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Are there any other improvements you can see to be made with the @macos/Sources/Features/Update feature? Don't write any code. Consult the oracle. Consider parts of the code that can also get more unit tests added.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This highlighted some real issues, so I went ahead and asked it to implement them. I find its easier to tell the agent "okay just do it all" rather than ask it specific things to do, since I can always easily clean it up in selective commits later.&lt;/p&gt;
    &lt;p&gt;An amusing thing in this session is that the agent started going down a really crazy rabbit hole and so I stepped in to stop it:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Stop stop stop. Undo all the main actor stuff.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;I also noticed that it did something rather poorly when there is a better way:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;For the error message, instead of truncating, isn't there a SwiftUI standard way to do this? We should add an additional UI element they can use to view the whole message.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h2"&gt;Cost and Time&lt;/head&gt;
    &lt;p&gt;The work took a total of 16 separate sessions totalling $15.98 in token spend on Amp3. I won't try to speculate whether this is expensive or cheap in general, but I will say for me personally I spent more than that in coffee shops in the two calendar days I spent on this feature.&lt;/p&gt;
    &lt;p&gt;The total "wall clock" time I spent on this feature I estimate around 8 hours. I only spend around 4 hours a day on the computer the first and last commit span 3 days. But I also didn't spend all of my time on this feature. For example, I shipped a Ghostty update, was a guest on ThePrimeagen for an hour, and gave a guest presentation at Zoo's annual all-hands, all during the hours I have available for "computer work" during the same days I was working on this feature4. So, I think the 8 hour estimate is generous.&lt;/p&gt;
    &lt;p&gt;Many people on the internet argue whether AI enables you to work faster or not. In this case, I think I shipped this faster than I would have if I had done it all myself, in particular because iterating on minor SwiftUI styling is so tedious and time consuming for me personally and AI does it so well.&lt;/p&gt;
    &lt;p&gt;I think the faster/slower argument for me personally is missing the thing I like the most: the AI can work for me while I step away to do other things. Here is a picture I took of one of my cleanup sessions while I was making breakfast for my family:&lt;/p&gt;
    &lt;p&gt;There's all sorts of dismissals about this, such as "I don't want to be coding while I'm cooking" or "Be more present" or whatever. If that's how you want to be, that's fine. In my case, in this specific example, I'm the first person awake in my household and I prep breakfast while everyone else is still asleep. I don't do this every waking moment.&lt;/p&gt;
    &lt;p&gt;All this is to say: it works for me. I'm really, really not trying to convince you. I'm not associated financially with any AI company. But as someone who has a lot of success with AI tooling and likes to talk about it, people ask me to share examples all the time. That's what I'm doing here.&lt;/p&gt;
    &lt;head rend="h2"&gt;End&lt;/head&gt;
    &lt;p&gt;I think the feature is beautiful, works great, and after a final manual review I merged it5. For Ghostty users who are on the tip release, it is available now. For Ghostty users who are on tagged releases, this feature will be available in Ghostty 1.3.&lt;/p&gt;
    &lt;p&gt;I'm an outspoken advocate about the importance of sharing agentic coding sessions publicly6, with one of the reasons being that it's an incredibly powerful way to educate others about how to use these tools effectively. I hope this post helps demonstrate that.&lt;/p&gt;
    &lt;head rend="h2"&gt;Footnotes&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;It is currently only shipped to nightly beta testers ("tip" testers) but that is a group of thousands of people. It is merged and will be in the next stable Ghostty release. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yes, it was good marketing. No, it was not on purpose. And no, I'm not celebrating it, because you don't want users to a fear a tool will take advantage of them. You want to trust that it's there to help. I want presenters (or anyone, really) to want to use Ghostty, and caring about stuff like this is part of that. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The most poetic though would've been to use OpenAI Codex for this. I'm sure it would've done great! This post isn't an advertisement for Amp, it just happens to be the agentic coding tool I use the most currently. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;I have a toddler at home so my "computer time" is very scheduled and very limited. 😁 ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;"Final manual review" is super super super important. This probably shouldn't be a footnote, but I couldn't find a better place to emphasize it. Please don't ever ship AI-written code without a thorough manual review. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;My reasoning for this could also be its own blog post, so I'm going to avoid explaining myself further here beyond what I already have. ↩&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45549434</guid><pubDate>Sat, 11 Oct 2025 14:31:15 +0000</pubDate></item><item><title>Microsoft Amplifier</title><link>https://github.com/microsoft/amplifier</link><description>&lt;doc fingerprint="3f10ba78298386af"&gt;
  &lt;main&gt;
    &lt;quote&gt;
      &lt;p&gt;"I have more ideas than time to try them out" — The problem we're solving&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Caution&lt;/p&gt;
    &lt;p&gt;This project is a research demonstrator. It is in early development and may change significantly. Using permissive AI tools in your repository requires careful attention to security considerations and careful human supervision, and even then things can still go wrong. Use it with caution, and at your own risk.&lt;/p&gt;
    &lt;p&gt;Amplifier is a complete development environment that takes AI coding assistants and supercharges them with discovered patterns, specialized expertise, and powerful automation — turning a helpful assistant into a force multiplier that can deliver complex solutions with minimal hand-holding.&lt;/p&gt;
    &lt;p&gt;We've taken our learnings about what works in AI-assisted development and packaged them into a ready-to-use environment. Instead of starting from scratch every session, you get immediate access to proven patterns, specialized agents for different tasks, and workflows that actually work.&lt;/p&gt;
    &lt;p&gt;Amplifier provides powerful tools and systems:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;20+ Specialized Agents: Each expert in specific tasks (architecture, debugging, security, etc.)&lt;/item&gt;
      &lt;item&gt;Pre-loaded Context: Proven patterns and philosophies built into the environment&lt;/item&gt;
      &lt;item&gt;Parallel Worktree System: Build and test multiple solutions simultaneously&lt;/item&gt;
      &lt;item&gt;Knowledge Extraction System: Transform your documentation into queryable, connected knowledge&lt;/item&gt;
      &lt;item&gt;Conversation Transcripts: Never lose context - automatic export before compaction, instant restoration&lt;/item&gt;
      &lt;item&gt;Automation Tools: Quality checks and patterns enforced automatically&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Before starting, you'll need:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Python 3.11+ - Download Python&lt;/item&gt;
      &lt;item&gt;UV - Install UV&lt;/item&gt;
      &lt;item&gt;Node.js - Download Node.js&lt;/item&gt;
      &lt;item&gt;VS Code (recommended) - Download VS Code&lt;/item&gt;
      &lt;item&gt;Git - Download Git&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;
      &lt;p&gt;Platform Note: Development and testing has primarily been done in Windows WSL2. macOS and Linux should work but have received less testing. Your mileage may vary.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Clone the repository:&lt;/p&gt;
        &lt;code&gt;git clone https://github.com/microsoft/amplifier.git cd amplifier&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Run the installer:&lt;/p&gt;
        &lt;quote&gt;make install&lt;/quote&gt;
        &lt;p&gt;This installs Python dependencies, the Claude CLI, and sets up your environment.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Configure your data directories (Recommended but optional):&lt;/p&gt;&lt;p&gt;Why configure this? By default, Amplifier stores data in&lt;/p&gt;&lt;code&gt;.data/&lt;/code&gt;(git-ignored). But centralizing your data externally gives you:&lt;list rend="ul"&gt;&lt;item&gt;Shared knowledge across all worktrees - Every parallel experiment accesses the same knowledge base&lt;/item&gt;&lt;item&gt;Cross-device synchronization - Work from any machine with the same accumulated knowledge&lt;/item&gt;&lt;item&gt;Automatic cloud backup - Never lose your extracted insights&lt;/item&gt;&lt;item&gt;Reusable across projects - Apply learned patterns to new codebases&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Set up external directories:&lt;/p&gt;&lt;code&gt;cp .env.example .env # Edit .env to point to your preferred locations&lt;/code&gt;&lt;p&gt;Example configuration using cloud storage:&lt;/p&gt;&lt;quote&gt;# Centralized knowledge base - shared across all worktrees and devices # Using OneDrive/Dropbox/iCloud enables automatic backup! AMPLIFIER_DATA_DIR=~/OneDrive/amplifier/data # Your source materials (documentation, specs, design docs, notes) # Can point to multiple folders where you keep content AMPLIFIER_CONTENT_DIRS=.data/content,~/OneDrive/amplifier/content,~/Documents/notes&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Activate the environment (if not already active):&lt;/p&gt;
        &lt;quote&gt;source .venv/bin/activate # Linux/Mac/WSL .venv\Scripts\activate # Windows&lt;/quote&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Start Claude in the Amplifier directory to get all enhancements automatically:&lt;/p&gt;
    &lt;code&gt;cd amplifier
claude  # Everything is pre-configured and ready&lt;/code&gt;
    &lt;p&gt;Want Amplifier's power on your own code? Easy:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Start Claude with both directories:&lt;/p&gt;
        &lt;quote&gt;claude --add-dir /path/to/your/project&lt;/quote&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Tell Claude where to work (paste as first message):&lt;/p&gt;
        &lt;code&gt;I'm working in /path/to/your/project which doesn't have Amplifier files. Please cd to that directory and work there. Do NOT update any issues or PRs in the Amplifier repo.&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Use Amplifier's agents on your code:&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;"Use the zen-architect agent to design my application's caching layer"&lt;/item&gt;
          &lt;item&gt;"Deploy bug-hunter to find why my login system is failing"&lt;/item&gt;
          &lt;item&gt;"Have security-guardian review my API implementation for vulnerabilities"&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Why use this? Stop wondering "what if" — build multiple solutions simultaneously and pick the winner.&lt;/p&gt;
    &lt;code&gt;# Try different approaches in parallel
make worktree feature-jwt     # JWT authentication approach
make worktree feature-oauth   # OAuth approach in parallel

# Compare and choose
make worktree-list            # See all experiments
make worktree-rm feature-jwt  # Remove the one you don't want&lt;/code&gt;
    &lt;p&gt;Each worktree is completely isolated with its own branch, environment, and context.&lt;/p&gt;
    &lt;p&gt;See the Worktree Guide for advanced features, such as hiding worktrees from VSCode when not in use, adopting branches from other machines, and more.&lt;/p&gt;
    &lt;p&gt;See costs, model, and session info at a glance:&lt;/p&gt;
    &lt;p&gt;Example: &lt;code&gt;~/repos/amplifier (main → origin) Opus 4.1 💰$4.67 ⏱18m&lt;/code&gt;&lt;/p&gt;
    &lt;p&gt;Shows:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Current directory and git branch/status&lt;/item&gt;
      &lt;item&gt;Model name with cost-tier coloring (red=high, yellow=medium, blue=low)&lt;/item&gt;
      &lt;item&gt;Running session cost and duration&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Enable with:&lt;/p&gt;
    &lt;code&gt;/statusline use the script at .claude/tools/statusline-example.sh
&lt;/code&gt;
    &lt;p&gt;Want to get the most out of Amplifier? Check out The Amplifier Way for battle-tested strategies including:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Understanding capability vs. context&lt;/item&gt;
      &lt;item&gt;Decomposition strategies for complex tasks&lt;/item&gt;
      &lt;item&gt;Using transcript tools to capture and improve workflows&lt;/item&gt;
      &lt;item&gt;Demo-driven development patterns&lt;/item&gt;
      &lt;item&gt;Practical tips for effective AI-assisted development&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Instead of one generalist AI, you get 20+ specialists:&lt;/p&gt;
    &lt;p&gt;Core Development:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;zen-architect&lt;/code&gt;- Designs with ruthless simplicity&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;modular-builder&lt;/code&gt;- Builds following modular principles&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;bug-hunter&lt;/code&gt;- Systematic debugging&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;test-coverage&lt;/code&gt;- Comprehensive testing&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;api-contract-designer&lt;/code&gt;- Clean API design&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Analysis &amp;amp; Optimization:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;security-guardian&lt;/code&gt;- Security analysis&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;performance-optimizer&lt;/code&gt;- Performance profiling&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;database-architect&lt;/code&gt;- Database design and optimization&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;integration-specialist&lt;/code&gt;- External service integration&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Knowledge &amp;amp; Insights:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;insight-synthesizer&lt;/code&gt;- Finds hidden connections&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;knowledge-archaeologist&lt;/code&gt;- Traces idea evolution&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;concept-extractor&lt;/code&gt;- Extracts knowledge from documents&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;ambiguity-guardian&lt;/code&gt;- Preserves productive contradictions&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Meta &amp;amp; Support:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;subagent-architect&lt;/code&gt;- Creates new specialized agents&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;post-task-cleanup&lt;/code&gt;- Maintains codebase hygiene&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;content-researcher&lt;/code&gt;- Researches from content collection&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;[See &lt;code&gt;.claude/AGENTS_CATALOG.md&lt;/code&gt; for the complete list]&lt;/p&gt;
    &lt;p&gt;Why use this? Stop losing insights. Every document, specification, design decision, and lesson learned becomes part of your permanent knowledge that Claude can instantly access.&lt;/p&gt;
    &lt;p&gt;Note&lt;/p&gt;
    &lt;p&gt;Knowledge extraction is an evolving feature that continues to improve with each update.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Add your content (any text-based files: documentation, specs, notes, decisions, etc.)&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Build your knowledge base:&lt;/p&gt;
        &lt;code&gt;make knowledge-update # Extracts concepts, relationships, patterns&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Query your accumulated wisdom:&lt;/p&gt;
        &lt;quote&gt;make knowledge-query Q="authentication patterns" make knowledge-graph-viz # See how ideas connect&lt;/quote&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Never lose context again. Amplifier automatically exports your entire conversation before compaction, preserving all the details that would otherwise be lost. When Claude Code compacts your conversation to stay within token limits, you can instantly restore the full history.&lt;/p&gt;
    &lt;p&gt;Automatic Export: A PreCompact hook captures your conversation before any compaction event:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Saves complete transcript with all content types (messages, tool usage, thinking blocks)&lt;/item&gt;
      &lt;item&gt;Timestamps and organizes transcripts in &lt;code&gt;.data/transcripts/&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Works for both manual (&lt;code&gt;/compact&lt;/code&gt;) and auto-compact events&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Easy Restoration: Use the &lt;code&gt;/transcripts&lt;/code&gt; command in Claude Code to restore your full conversation:&lt;/p&gt;
    &lt;code&gt;/transcripts  # Restores entire conversation history
&lt;/code&gt;
    &lt;p&gt;The transcript system helps you:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Continue complex work after compaction without losing details&lt;/item&gt;
      &lt;item&gt;Review past decisions with full context&lt;/item&gt;
      &lt;item&gt;Search through conversations to find specific discussions&lt;/item&gt;
      &lt;item&gt;Export conversations for sharing or documentation&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Transcript Commands (via Makefile):&lt;/p&gt;
    &lt;code&gt;make transcript-list            # List available transcripts
make transcript-search TERM="auth"  # Search past conversations
make transcript-restore         # Restore full lineage (for CLI use)&lt;/code&gt;
    &lt;p&gt;A one-command workflow to go from an idea to a module (Contract &amp;amp; Spec → Plan → Generate → Review) inside the Amplifier Claude Code environment.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Run inside a Claude Code session: &lt;code&gt;/modular-build Build a module that reads markdown summaries, synthesizes net-new ideas with provenance, and expands them into plans. mode: auto level: moderate&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Docs: see &lt;code&gt;docs/MODULAR_BUILDER_LITE.md&lt;/code&gt;for the detailed flow and guardrails.&lt;/item&gt;
      &lt;item&gt;Artifacts: planning goes to &lt;code&gt;ai_working/&amp;lt;module&amp;gt;/…&lt;/code&gt;(contract/spec/plan/review); code &amp;amp; tests to&lt;code&gt;amplifier/&amp;lt;module&amp;gt;/…&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;Isolation &amp;amp; discipline: workers read only this module’s contract/spec plus dependency contracts. The spec’s Output Files are the single source of truth for what gets written. Every contract Conformance Criterion maps to tests. 〔Authoring Guide〕&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;auto&lt;/code&gt;(default): runs autonomously if confidence ≥ 0.75; otherwise falls back to&lt;code&gt;assist&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;assist&lt;/code&gt;: asks ≤ 5 crisp questions to resolve ambiguity, then proceeds.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;dry-run&lt;/code&gt;: plan/validate only (no code writes).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Re‑run &lt;code&gt;/modular-build&lt;/code&gt; with a follow‑up ask; it resumes from &lt;code&gt;ai_working/&amp;lt;module&amp;gt;/session.json&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;make check            # Format, lint, type-check
make test             # Run tests
make ai-context-files # Rebuild AI context&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Design: "Use zen-architect to design my notification system"&lt;/item&gt;
      &lt;item&gt;Build: "Have modular-builder implement the notification module"&lt;/item&gt;
      &lt;item&gt;Test: "Deploy test-coverage to add tests for the new notification feature"&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Investigate: "Use bug-hunter to find why my application's API calls are failing"&lt;/item&gt;
      &lt;item&gt;Verify: "Have security-guardian review my authentication implementation"&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Extract: &lt;code&gt;make knowledge-update&lt;/code&gt;(processes your documentation)&lt;/item&gt;
      &lt;item&gt;Query: &lt;code&gt;make knowledge-query Q="error handling patterns"&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Apply: "Implement error handling using patterns from our knowledge base"&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Want to create tools like the ones in the scenarios/ directory? You don't need to be a programmer.&lt;/p&gt;
    &lt;p&gt;Not sure what to build? Ask Amplifier to brainstorm with you:&lt;/p&gt;
    &lt;code&gt;/ultrathink-task I'm new to the concepts of "metacognitive recipes" - what are some
interesting tools that you could create that I might find useful, that demonstrate
the value of "metacognitive recipes"? Especially any that would demonstrate how such
could be used to auto evaluate and recover/improve based upon self-feedback loops.
Don't create them, just give me some ideas.
&lt;/code&gt;
    &lt;p&gt;This brainstorming session will give you ideas like:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Documentation Quality Amplifier - Improves docs by simulating confused readers&lt;/item&gt;
      &lt;item&gt;Research Synthesis Quality Escalator - Extracts and refines knowledge from documents&lt;/item&gt;
      &lt;item&gt;Code Quality Evolution Engine - Writes code, tests it, learns from failures&lt;/item&gt;
      &lt;item&gt;Multi-Perspective Consensus Builder - Simulates different viewpoints to find optimal solutions&lt;/item&gt;
      &lt;item&gt;Self-Debugging Error Recovery - Learns to fix errors autonomously&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The magic happens when you combine:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Amplifier's brainstorming - Generates diverse possibilities&lt;/item&gt;
      &lt;item&gt;Your domain knowledge - You know your needs and opportunities&lt;/item&gt;
      &lt;item&gt;Your creativity - Sparks recognition of what would be useful&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Once you have an idea:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Describe your goal - What problem are you solving?&lt;/item&gt;
      &lt;item&gt;Describe the thinking process - How should the tool approach it?&lt;/item&gt;
      &lt;item&gt;Let Amplifier build it - Use &lt;code&gt;/ultrathink-task&lt;/code&gt;to create the tool&lt;/item&gt;
      &lt;item&gt;Iterate to refine - Provide feedback as you use it&lt;/item&gt;
      &lt;item&gt;Share it back - Help others by contributing to scenarios/&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Example: The blog writer tool was created with one conversation where the user described:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The goal (write blog posts in my style)&lt;/item&gt;
      &lt;item&gt;The thinking process (extract style → draft → review sources → review style → get feedback → refine)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;No code was written by the user. Just description → Amplifier builds → feedback → refinement.&lt;/p&gt;
    &lt;p&gt;For detailed guidance, see scenarios/blog_writer/HOW_TO_CREATE_YOUR_OWN.md.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;[!IMPORTANT] &amp;gt; This is an experimental system. We break things frequently.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Not accepting contributions yet (but we plan to!)&lt;/item&gt;
      &lt;item&gt;No stability guarantees&lt;/item&gt;
      &lt;item&gt;Pin commits if you need consistency&lt;/item&gt;
      &lt;item&gt;This is a learning resource, not production software&lt;/item&gt;
      &lt;item&gt;No support provided - See SUPPORT.md&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We're building toward a future where:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;You describe, AI builds - Natural language to working systems&lt;/item&gt;
      &lt;item&gt;Parallel exploration - Test 10 approaches simultaneously&lt;/item&gt;
      &lt;item&gt;Knowledge compounds - Every project makes you more effective&lt;/item&gt;
      &lt;item&gt;AI handles the tedious - You focus on creative decisions&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The patterns, knowledge base, and workflows in Amplifier are designed to be portable and tool-agnostic, ready to evolve with the best available AI technologies.&lt;/p&gt;
    &lt;p&gt;See AMPLIFIER_VISION.md for details.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Knowledge extraction works best in Claude environment&lt;/item&gt;
      &lt;item&gt;Processing time: ~10-30 seconds per document&lt;/item&gt;
      &lt;item&gt;Memory system still in development&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;"The best AI system isn't the smartest - it's the one that makes YOU most effective."&lt;/p&gt;
    &lt;p&gt;Note&lt;/p&gt;
    &lt;p&gt;This project is not currently accepting external contributions, but we're actively working toward opening this up. We value community input and look forward to collaborating in the future. For now, feel free to fork and experiment!&lt;/p&gt;
    &lt;p&gt;Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit Contributor License Agreements.&lt;/p&gt;
    &lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt;
    &lt;p&gt;This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.&lt;/p&gt;
    &lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark &amp;amp; Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45549848</guid><pubDate>Sat, 11 Oct 2025 15:19:54 +0000</pubDate></item><item><title>How to check for overlapping intervals</title><link>https://zayenz.se/blog/post/how-to-check-for-overlapping-intervals/</link><description>&lt;doc fingerprint="16100850bb8597bf"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How to check for overlapping intervals DRAFT&lt;/head&gt;
    &lt;p&gt;Working with intervals is a common task in programming, whether you’re dealing with time ranges, scheduling problems, or geometric computations. A key insight when working with intervals is that checking for the absence of an overlap is often much simpler than checking for all the ways an overlap can occur.&lt;/p&gt;
    &lt;p&gt;This post will first cover how to represent intervals in code, then dive into the logic for detecting overlaps.&lt;/p&gt;
    &lt;head rend="h2"&gt;What are intervals?&lt;/head&gt;
    &lt;p&gt;An interval represents a range between two points, and could be in a continuous or discrete domain. A common way to write an interval is a pair of values &lt;code&gt;[start, end]&lt;/code&gt; where &lt;code&gt;start ≤ end&lt;/code&gt;.
This would be a so-called closed interval, where the end-value is included in the interval.
An alternative is &lt;code&gt;[start, end)&lt;/code&gt;, which denotes a half-open interval where the &lt;code&gt;end&lt;/code&gt; value is not included in the interval.1
Half-open intervals are very common in programming languages.&lt;/p&gt;
    &lt;p&gt;Some examples of intervals are&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Time intervals: &lt;code&gt;[9:00, 17:00]&lt;/code&gt;(a work day)&lt;/item&gt;
      &lt;item&gt;Numeric ranges: &lt;code&gt;[1, 10)&lt;/code&gt;(the digit 1, 2, 3, …, 9)&lt;/item&gt;
      &lt;item&gt;Date ranges: &lt;code&gt;[2025-01-01, 2025-12-31]&lt;/code&gt;(all the days in the year 2025)&lt;/item&gt;
      &lt;item&gt;Temperature range: &lt;code&gt;[20°C, 25°C]&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;…&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Representing an interval&lt;/head&gt;
    &lt;p&gt;We will use Python as an example language, and will use plain integers as the underlying type. All the examples will use open intervals, as that is very common.&lt;/p&gt;
    &lt;p&gt;For the purposes of this post, we will only consider integer valued intervals for simplicity. In addition we require that intervals are non-empty. In many real cases, real valued intervals approximated by floating points are needed as is the handling of empty intervals.&lt;/p&gt;
    &lt;head rend="h2"&gt;Detecting overlap&lt;/head&gt;
    &lt;p&gt;One of the most common questions when working with intervals is: “Do these two intervals overlap?” Lets implement a method for this&lt;/p&gt;
    &lt;head rend="h3"&gt;The straight-forward approach&lt;/head&gt;
    &lt;p&gt;Whenever one needs to make a Boolean condition, the easiest way is often to consider all the cases. So, let’s consider all the ways that two intervals may overlap. There are four distinct cases.&lt;/p&gt;
    &lt;p&gt;Case 1: self starts first, other overlaps end of self&lt;/p&gt;
    &lt;p&gt;Case 2: other starts first, self overlaps end of other&lt;/p&gt;
    &lt;p&gt;Case 3: self completely contains other&lt;/p&gt;
    &lt;p&gt;Case 4: other completely contains self&lt;/p&gt;
    &lt;p&gt;In all these cases, we can see that the intervals share at least one point in common. The challenge is to write a condition that captures all four cases correctly. Let’s translate it into code straight from the case analysis.&lt;/p&gt;
    &lt;p&gt;This is a straightforward translation of the cases, where the most tricky thing is to make sure that the handling of the half-open property is correct. One thing to note though, is that by checking the endpoints of the blue &lt;code&gt;other&lt;/code&gt; interval in Case 1 and 2,
then we have also covered Case 3.
This means that due to short circuiting, we will never trigger Case 3.
In addition Case 4 is overly specific.
We only need to care about checking if the start-point of the green &lt;code&gt;self&lt;/code&gt; interval is in the blue &lt;code&gt;other&lt;/code&gt; interval.&lt;/p&gt;
    &lt;p&gt;Taking these observations into account, we can simplify the above condition to the following cases.&lt;/p&gt;
    &lt;p&gt;With a case-analysis and some careful considerations, we have a nice expression that captures overlapping intervals. But checking overlap feels like something that should be obvious, and this condition is not that obvious. Checking for overlap of two intervals also feels like it shouldn’t reduce down to three cases. From that argument, we can intuit that it should be possible to simplify this even more.&lt;/p&gt;
    &lt;p&gt;Can we make a simpler condition, that is also easy to find?&lt;/p&gt;
    &lt;head rend="h3"&gt;Flipping the script&lt;/head&gt;
    &lt;p&gt;The core insight is that sometimes it is much easier to check for the negation of a property than the original property. For overlap, the negation is checking if two intervals are not overlapping. Let’s look at the cases we have now instead.&lt;/p&gt;
    &lt;p&gt;Case 1: self is before other&lt;/p&gt;
    &lt;p&gt;Case 2: other is before self&lt;/p&gt;
    &lt;p&gt;There are only two ways the two intervals are not overlapping, and this is much easier to translate into code.&lt;/p&gt;
    &lt;p&gt;Using De Morgan’s law it is possible to push the negation in. In addition, negated comparisons can be flipped simplifying this even further.&lt;/p&gt;
    &lt;p&gt;This is finally a nice and simple expression that checks just two properties. By changing our viewpoint from checking for an overlap to checking against one, we deduced the correct expression much more easily.&lt;/p&gt;
    &lt;head rend="h3"&gt;Understanding the new condition&lt;/head&gt;
    &lt;p&gt;The new condition works, and we could derive it from a case analysis and using Boolean simplification. But there is also a meaning to the expression that we can interpret geometrically.&lt;/p&gt;
    &lt;p&gt;Case 1: start of other is before end of self&lt;/p&gt;
    &lt;p&gt;Case 2: start of self is before end of other&lt;/p&gt;
    &lt;p&gt;The first case checks that it is not the case that &lt;code&gt;other&lt;/code&gt; starts after &lt;code&gt;self&lt;/code&gt; ends.
The second case checks that it is not the case that &lt;code&gt;self&lt;/code&gt; starts after &lt;code&gt;other&lt;/code&gt; ends.
These two conditions together gives us the result that there is some part that is overlapping.&lt;/p&gt;
    &lt;p&gt;It is of course possible to figure out this condition directly, but making this intuitive leap is in my view harder than following the case analysis from the negative case.2&lt;/p&gt;
    &lt;head rend="h2"&gt;Adding a second dimension&lt;/head&gt;
    &lt;p&gt;An interval is a one-dimensional property. A very natural extension is to instead consider two-dimensional properties. Representing a box is very similar to an interval, here we go from top and left (inclusive) to bottom and right (exclusive).&lt;/p&gt;
    &lt;head rend="h3"&gt;Case analysis for overlap&lt;/head&gt;
    &lt;p&gt;Checking for overlap is equally important for boxes as it is for intervals. Let’s start by making a full case analysis of all the variants for how two boxes can overlap.&lt;/p&gt;
    &lt;p&gt;Case 1: other left+below, ends inside&lt;/p&gt;
    &lt;p&gt;Case 2: other left, ends inside; contained vertically&lt;/p&gt;
    &lt;p&gt;Case 3: other left+above, ends inside&lt;/p&gt;
    &lt;p&gt;Case 4: other left, ends inside; contains vertically&lt;/p&gt;
    &lt;p&gt;Case 5: other contained horizontally; starts below, ends inside&lt;/p&gt;
    &lt;p&gt;Case 6: other fully contained in self&lt;/p&gt;
    &lt;p&gt;Case 7: other contained horizontally; starts inside, ends above&lt;/p&gt;
    &lt;p&gt;Case 8: other contains self horizontally; overlaps vertically&lt;/p&gt;
    &lt;p&gt;Case 9: other right+below, starts inside&lt;/p&gt;
    &lt;p&gt;Case 10: other right, starts inside; contained vertically&lt;/p&gt;
    &lt;p&gt;Case 11: other right+above, starts inside&lt;/p&gt;
    &lt;p&gt;Case 12: other right, starts inside; contains vertically&lt;/p&gt;
    &lt;p&gt;Case 13: other contains horizontally; starts below, ends inside&lt;/p&gt;
    &lt;p&gt;Case 14: other contains horizontally; contained vertically&lt;/p&gt;
    &lt;p&gt;Case 15: other contains horizontally; starts inside, ends above&lt;/p&gt;
    &lt;p&gt;Case 16: other completely contains self&lt;/p&gt;
    &lt;p&gt;This does not inspire confidence in getting understandable code, let’s not even attempt it.&lt;/p&gt;
    &lt;head rend="h3"&gt;Negation to the rescue again&lt;/head&gt;
    &lt;p&gt;Using the same idea as for intervals, let’s look at the cases where two boxes do not overlap.&lt;/p&gt;
    &lt;p&gt;Case 1: other is to the left of self&lt;/p&gt;
    &lt;p&gt;Case 2: other is to the right of self&lt;/p&gt;
    &lt;p&gt;Case 3: other is above self&lt;/p&gt;
    &lt;p&gt;Case 4: other is below self&lt;/p&gt;
    &lt;p&gt;This is quite easy, the other box can be to the left, right, above, or below. If it is to the left, it does not matter how much (or at all) the box overlaps in the vertical direction. Translating this into straightforward code as before.&lt;/p&gt;
    &lt;p&gt;Using the same analysis as before, we can use De Morgan’s laws to change the implementation to not start with a not.3&lt;/p&gt;
    &lt;p&gt;This new expression can be interpreted as a two dimensional variant of the interval overlap check. Two boxes overlap if there is overlap in both the horizontal and the vertical direction.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;Figuring out the best way to express a property can be tricky. For intervals, while one can sit down and think thoroughly to find the best way to express the overlaps property, it is not easy. Using case analysis is the straight-forward way to create these but it can easily lead to an overly complicated and error-prone expression. This is especially clear for the box case, where there are 16 different cases to handle.&lt;/p&gt;
    &lt;p&gt;Using negation as a trick to simplify the case analysis works really well here. Naturally, it doesn’t always work out this well, but when it does it is a technique that is worth keeping in mind.&lt;/p&gt;
    &lt;head rend="h2"&gt;Footnotes&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Note that these notations may vary, in France for example the notation is different. Thanks to jcelerier for pointing this out. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Thanks to fanf for suggesting to add an explanation of what the resulting condition means. ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Thanks to parachuteparrot for noting a bug in the original version of this post. ↩&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45549888</guid><pubDate>Sat, 11 Oct 2025 15:26:31 +0000</pubDate></item><item><title>GNU Health</title><link>https://www.gnuhealth.org/about-us.html</link><description>&lt;doc fingerprint="67508177167da52f"&gt;
  &lt;main&gt;
    &lt;p&gt;The GNU Health project provides the tools for individuals, health professionals, institutions and governments to proactively assess and improve the underlying determinants of health, from the socioeconomic agents to the molecular basis of disease. From primary health care to precision medicine. The following are the main components that make up the GNU Health ecosystem:&lt;/p&gt;
    &lt;p&gt;GNU Health is a Free/Libre, community-driven project from GNU Solidario, that counts with a large and friendly international community. GNU Solidario celebrates GNU Health Con (https://www.gnuhealthcon.org) and the International Workshop on e-Health in Emerging Economies (IWEEE) every year, that gathers the GNU Health and social medicine advocates from around the world.&lt;/p&gt;
    &lt;p&gt;GNU Health is a GNU (www.gnu.org) official package, awarded with the Free Software Foundantion award of Social benefit, among others. GNU Health has been adopted by many hospitals, governments and multilateral organizations around the globe.&lt;/p&gt;
    &lt;p&gt;GNU Health HMIS component for Health Practitioners, Health Institutions and Governments.&lt;/p&gt;
    &lt;p&gt;Its modular design allows to be deployed in many different scenarios: from small private offices, to large, national public health systems. It covers the functionality of Electronic Medical Record (EMR), Hospital Management and Health Information System (HIS).&lt;/p&gt;
    &lt;p&gt;GNU Health HMIS component is standard-based, and it provides over 40 packages/modules (primary care, obstetrics &amp;amp; gynecology, pediatrics, surgery, lims, genetics, diagnostic imaging, reporting...) to fit your institution needs. The GH HMIS combines the socioeconomic determinants of health with state-of-the-art technology in bioinformatics and clinical genetics. It manages the internal processes of a health institution, such as financial management, billing, stock management, pharmacies or labs (LIMS)&lt;/p&gt;
    &lt;p&gt;GNU LIMS, also known as Occhiolino, is a modern Laboratory Information Management System for the healthcare and biomedical sectors, that has emerged as a GNU Health sub-project.&lt;/p&gt;
    &lt;p&gt;The Laboratory Modules manage the request, creation and evaluation of laboratory analyses. As far as the LIMS (Laboratory Information Management System) functionality, GNU Health is very flexible. You will be able to link it to the patient chart and to the financial management of the Health Center&lt;/p&gt;
    &lt;p&gt;MyGNUHealth is the GNUHealth Personal Health Record application for desktop and mobile devices that integrates with the GNU Health Federation.&lt;/p&gt;
    &lt;p&gt;MyGNUHealth development uses the latest mobile and desktop technology, such as Kivy Python. MyGNUHealth Personal Health Record is a privacy-oriented PHR, that will put the citizen and the patient in control of her health and medical information. MyGNUHealth enhances and improves the interaction between citizens and healthcare professionals, with updated information on demographics and medical information.&lt;/p&gt;
    &lt;p&gt;The GNU Health Federation allows to build large, nation wide federated networks with thousands of heterogeneous nodes. The GNU Health federation is revolutionary, and will provide the community, the health practitioners, the research institutions and the ministries of health to have much better perspective and precise information on the individuals and their context.&lt;/p&gt;
    &lt;p&gt;The GNU Health Federation project aims to build a community based, federated health network among different regions and in a country, and, why not, among countries around the globe. A federation can be as large as you want. From a small regional federated network with several nodes, to a large, nationwide health network with thousands / millions of participating nodes.&lt;/p&gt;
    &lt;p&gt;Single-board Computers (SBC) are devices with a huge potential for the Public Health System when partnering with GNU Health. They can provide real-time monitoring of vital signs in hospital settings, retrieve information from laboratory instruments or be a great Personal Health tracker. They are also a great resource for research and academic institutions.&lt;/p&gt;
    &lt;p&gt;GNU Health as a social movement: GNU Health is a social project with technology behind. Itâs about Social Medicine and delivering universal healthcare. Itâs about social activism. One of the main reasons that led me to create GNU Health were the tremendous inequalities in access to healthcare. Over 20000 children die every day from preventable, social diseases. To name a few : malnutrition, contaminated water, child slavery, prostitution, war, malaria, HIV-AIDS, tuberculosis, dengue and other neglected tropical diseases. These are causes and/or results of social diseases, conditions that have a higher impact and higher prevalence on the poor and the underprivileged.&lt;/p&gt;
    &lt;p&gt;Studying and getting a deeper understanding on the living conditions of people in rural areas and in urban ghettos around the world, reinforced my intention to write a system that included the socio-economic determinants of health and disease. Most of the time, health (and the lack of) is determined by the environment, and biology plays a lesser role. Proper nutrition, housing, sanitation, access to education and to primary healthcare are key for the dignity, development and health of the individual, family and society at large. I like to summarize it as âpeople before patientsâ&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45550049</guid><pubDate>Sat, 11 Oct 2025 15:47:22 +0000</pubDate></item><item><title>People regret buying Amazon smart displays after being bombarded with ads</title><link>https://arstechnica.com/gadgets/2025/10/people-regret-buying-amazon-smart-displays-after-being-bombarded-with-ads/</link><description>&lt;doc fingerprint="82f9d3809ba284f9"&gt;
  &lt;main&gt;
    &lt;p&gt;Amazon Echo Show owners are reporting an uptick in advertisements on their smart displays.&lt;/p&gt;
    &lt;p&gt;The company's Echo Show smart displays have previously shown ads through the company's Shopping Lists feature, as well as advertising for Alexa skills. Additionally, Echo Shows may play audio ads when users listen to Amazon Music on Alexa.&lt;/p&gt;
    &lt;p&gt;However, reports on Reddit (examples here, here, and here) and from The Verge’s Jennifer Pattison Tuohy, who owns more than one Echo Show, suggest that Amazon has increased the amount of ads it shows on its smart displays' home screens. The Echo Show’s apparent increase in ads is pushing people to stop using or even return their Echo Shows.&lt;/p&gt;
    &lt;p&gt;The smart displays have also started showing ads for Alexa+, the new generative AI version of Amazon's Alexa voice assistant. Ads for the subscription-based Alexa+ are reportedly taking over Echo Show screens, even though the service is still in Early Access.&lt;/p&gt;
    &lt;p&gt;“This is getting ridiculous and I'm about to just toss the whole thing and move back to Google,” one Redditor said of the “full-volume” ads for Alexa+ on their Echo Show.&lt;/p&gt;
    &lt;p&gt;The Verge’s Tuohy reported seeing ads on one (but not all) of her Echo Shows for the first time this week and said ads sometimes show when the display is set to show personal photos. She reported seeing ads for “elderberry herbal supplements, Quest sports chips, and tabletop picture frames."&lt;/p&gt;
    &lt;p&gt;Users are unable to disable the home screen ads. When reached for comment, an Amazon spokesperson told Ars Technica:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45551081</guid><pubDate>Sat, 11 Oct 2025 17:41:45 +0000</pubDate></item><item><title>Rating 26 years of Java changes</title><link>https://neilmadden.blog/2025/09/12/rating-26-years-of-java-changes/</link><description>&lt;doc fingerprint="26308157d1300b9f"&gt;
  &lt;main&gt;
    &lt;p&gt;I first started programming Java at IBM back in 1999 as a Pre-University Employee. If I remember correctly, we had Java 1.1.8 installed at that time, but were moving to Java 1.2 (“Java 2”), which was a massive release—I remember engineers at the time grumbling that the ever-present “Java in a Nutshell” book had grown to over 600 pages. I thought I’d take a look back at 26 years of Java releases and rate some of the language and core library changes (Java SE only) that have occurred over this time. It’s a very different language to what I started out with!&lt;/p&gt;
    &lt;p&gt;I can’t possibly cover every feature of those releases, as there are just way too many. So I’m just going to cherry-pick some that seemed significant at the time, or have been in retrospect. I’m not going to cover UI- or graphics-related stuff (Swing, Java2D etc), or VM/GC improvements. Just language changes and core libraries. And obviously this is highly subjective. Feel free to put your own opinions in the comments! The descriptions are brief and not intended as an introduction to the features in question: see the links from the Wikipedia page for more background.&lt;/p&gt;
    &lt;p&gt;NB: later features are listed from when they were first introduced as a preview.&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 2 – 1998&lt;/head&gt;
    &lt;p&gt;The Collections Framework: before the collections framework, there was just raw arrays, Vector, and Hashtable. It gets the job done, but I don’t think anyone thinks the Java collections framework is particularly well designed. One of the biggest issues was a failure to distinguish between mutable and immutable collections, strange inconsistencies like why Iterator as a remove() method (but not, say, update or insert), and so on. Various improvements have been made over the years, and I do still use it in preference to pulling in a better alternative library, so it has shown the test of time in that respect. 4/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 1.4 – 2002&lt;/head&gt;
    &lt;p&gt;The &lt;code&gt;assert&lt;/code&gt; keyword: I remember being somewhat outraged at the time that they could introduce a new keyword! I’m personally quite fond of asserts as an easy way to check invariants without having to do complex refactoring to make things unit-testable, but that is not a popular approach. I can’t remember the last time I saw an assert in any production Java code. 3/10&lt;/p&gt;
    &lt;p&gt;Regular expressions: Did I really have to wait 3 years to use regex in Java? I don’t remember ever having any issues with the implementation they finally went for. The Matcher class is perhaps a little clunky, but gets the job done. Good, solid, essential functionality. 9/10&lt;/p&gt;
    &lt;p&gt;“New” I/O (NIO): Provided non-blocking I/O for the first time, but really just a horrible API (still inexplicably using 32-bit signed integers for file sizes, limiting files to 2GB, confusing interface). I still basically never use these interfaces except when I really need to. I learnt Tcl/Tk at the same time that I learnt Java, and Java’s I/O always just seemed extraordinarily baroque for no good reason. Has barely improved in 2 and a half decades. 0/10&lt;/p&gt;
    &lt;p&gt;Also notable in this release was the new crypto APIs: the Java Cryptography Extensions (JCE) added encryption and MAC support to the existing signatures and hashes, and we got JSSE for SSL. Useful functionality, dreadful error-prone APIs. 1/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 5 – 2004&lt;/head&gt;
    &lt;p&gt;Absolutely loads of changes in this release. This feels like the start of modern Java to me.&lt;/p&gt;
    &lt;p&gt;Generics: as Go discovered on its attempt to speed-run Java’s mistakes all over again, if you don’t add generics from the start then you’ll have to retrofit them later, badly. I wouldn’t want to live without them, and the rapid and universal adoption of them shows what a success they’ve been. They certainly have complicated the language, and there are plenty of rough edges (type erasure, reflection, etc), but God I wouldn’t want to live without them. 8/10.&lt;/p&gt;
    &lt;p&gt;Annotations: sometimes useful, sometimes overused. I know I’ve been guilty of abusing them in the past. At the time it felt like they were ushering a new age of custom static analysis, but that doesn’t really seem to be used much. Mostly just used to mark things as deprecated or when overriding a method. Meh. 5/10&lt;/p&gt;
    &lt;p&gt;Autoboxing: there was a time when, if you wanted to store an integer in a collection, you had to manually convert to and from the primitive int type and the Integer “boxed” class. Such conversion code was everywhere. Java 5 got rid of that, by getting the compiler to insert those conversions for you. Brevity, but no less inefficient. 7/10&lt;/p&gt;
    &lt;p&gt;Enums: I’d learned Haskell by this point, so I couldn’t see the point of introducing enums without going the whole hog and doing algebraic datatypes and pattern-matching. (Especially as Scala launched about this time). Decent feature, and a good implementation, but underwhelming. 6/10&lt;/p&gt;
    &lt;p&gt;Vararg methods: these have done quite a lot to reduce verbosity across the standard library. A nice small improvement that’s had a good quality of life enhancement. I still never really know when to put @SafeVarargs annotations on things though. 8/10&lt;/p&gt;
    &lt;p&gt;The for-each loop: cracking, use it all the time. Still not a patch on Tcl’s foreach (which can loop over multiple collections at once), but still very good. Could be improved and has been somewhat replaced by Streams. 8/10&lt;/p&gt;
    &lt;p&gt;Static imports: Again, a good simple change. I probably would have avoided adding * imports for statics, but it’s quite nice for DSLs. 8/10&lt;/p&gt;
    &lt;p&gt;Doug Lea’s java.util.concurrent etc: these felt really well designed. So well designed that everyone started using them in preference to the core collection classes, and they ended up back-porting a lot of the methods. 10/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 7 – 2011&lt;/head&gt;
    &lt;p&gt;After the big bang of Java 5, Java 6 was mostly performance and VM improvements, I believe, so we had to wait until 2011 for more new language features.&lt;/p&gt;
    &lt;p&gt;Strings in switch: seems like a code smell to me. Never use this, and never see it used. 1/10&lt;/p&gt;
    &lt;p&gt;Try-with-resources: made a huge difference in exception safety. Combined with the improvements in exception chaining (so root cause exceptions are not lost), this was a massive win. Still use it everywhere. 10/10&lt;/p&gt;
    &lt;p&gt;Diamond operator for type parameter inference: a good minor syntactic improvement to cut down the visual noise. 6/10&lt;/p&gt;
    &lt;p&gt;Binary literals and underscores in literals: again, minor syntactic sugar. Nice to have, rarely something I care about much. 4/10&lt;/p&gt;
    &lt;p&gt;Path and Filesystem APIs: I tend to use these over the older File APIs, but just because it feels like I should. I couldn’t really tell you if they are better or not. Still overly verbose. Still insanely hard to set file permissions in a cross-platform way. 3/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 8 – 2014&lt;/head&gt;
    &lt;p&gt;Lambdas: somewhat controversial at the time. I was very in favour of them, but only use them sparingly these days, due to ugly stack traces and other drawbacks. Named method references provide most of the benefit without being anonymous. Deciding to exclude checked exceptions from the various standard functional interfaces was understandable, but also regularly a royal PITA. 4/10&lt;/p&gt;
    &lt;p&gt;Streams: Ah, streams. So much potential, but so frustrating in practice. I was hoping that Java would just do the obvious thing and put filter/map/reduce methods onto Collection and Map, but they went with this instead. The benefits of functional programming weren’t enough to carry the feature, I think, so they had to justify it by promising easy parallel computing. This scope creep enormously over-complicated the feature, makes it hard to debug issues, and yet I almost never see parallel streams being used. What I do still see quite regularly is resource leaks from people not realising that the stream returned from Files.lines() has to be close()d when you’re done—but doing so makes the code a lot uglier. Combine that with ugly hacks around callbacks that throw checked exceptions, the non-discoverable API (where are the static helper functions I need for this method again?), and the large impact on lots of very common code, and I have to say I think this was one of the largest blunders in modern Java. I blogged what I thought was a better approach 2 years earlier, and I still think it would have been better. There was plenty of good research that different approaches were better, since at least Oleg Kiselyov’s work in the early noughties. 1/10&lt;/p&gt;
    &lt;p&gt;Java Time: Much better than what came before, but I have barely had to use much of this API at all, so I’m not in a position to really judge how good this is. Despite knowing how complex time and dates are, I do have a nagging suspicion that surely it doesn’t all need to be this complex? 8/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 9 – 2017&lt;/head&gt;
    &lt;p&gt;Modules: I still don’t really know what the point of all this was. Enormous upheaval for minimal concrete benefit that I can discern. The general advice seems to be that modules are (should be) an internal detail of the JRE and best ignored in application code (apart from when they spuriously break things). Awful. -10/10 (that’s minus 10!)&lt;/p&gt;
    &lt;p&gt;jshell: cute! A REPL! Use it sometimes. Took them long enough. 6/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 10 – 2018&lt;/head&gt;
    &lt;p&gt;The start of time-based releases, and a distinct ramp-up of features from here on, trying to keep up with the kids.&lt;/p&gt;
    &lt;p&gt;Local type inference (“var”): Some love this, some hate it. I’m definitely in the former camp. 9/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 11 – 2018&lt;/head&gt;
    &lt;p&gt;New HTTP Client: replaced the old URL.openStream() approach by creating something more like Apache HttpClient. It works for most purposes, but I do find the interface overly verbose. 6/10&lt;/p&gt;
    &lt;p&gt;This release also added TLS 1.3 support, along with djb-suite crypto algorithms. Yay. 9/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 12 – 2019&lt;/head&gt;
    &lt;p&gt;Switch expressions: another nice mild quality-of-life improvement. Not world changing, but occasionally nice to have. 6/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 13 – 2019&lt;/head&gt;
    &lt;p&gt;Text blocks: on the face of it, what’s not to like about multi-line strings? Well, apparently there’s a good reason that injection attacks remain high on the OWASP Top 10, as the JEP introducing this feature seemed intent on getting everyone writing SQL, HTML and JavaScript using string concatenation again. Nearly gave me a heart attack at the time, and still seems like a pointless feature. Text templates (later) are trying to fix this, but seem to be currently in limbo. 3/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 14 – 2020&lt;/head&gt;
    &lt;p&gt;Pattern matching in &lt;code&gt;instanceof&lt;/code&gt;: a little bit of syntactic sugar to avoid an explicit cast. But didn’t we all agree that using &lt;code&gt;instanceof&lt;/code&gt; was a bad idea decades ago? I’m really not sure who was doing the cost/benefit analysis on these kinds of features. 4/10&lt;/p&gt;
    &lt;p&gt;Records: about bloody time! Love ‘em. 10/10&lt;/p&gt;
    &lt;p&gt;Better error messages for NullPointerExceptions: lovely. 8/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 15 – 2020&lt;/head&gt;
    &lt;p&gt;Sealed classes: in principal I like these a lot. We’re slowly getting towards a weird implementation of algebraic datatypes. I haven’t used them very much yet so far. 8/10&lt;/p&gt;
    &lt;p&gt;EdDSA signatures: again, a nice little improvement in the built-in cryptography. Came with a rather serious bug though… 8/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 16 – 2021&lt;/head&gt;
    &lt;p&gt;Vector (SIMD) API: this will be great when it is finally done, but still baking several years later. ?/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 17 – 2021&lt;/head&gt;
    &lt;p&gt;Pattern matching switch: another piece of the algebraic datatype puzzle. Seems somehow more acceptable than instanceof, despite being largely the same idea in a better form. 7/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 18 – 2022&lt;/head&gt;
    &lt;p&gt;UTF-8 by default: Fixed a thousand encoding errors in one fell swoop. 10/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 19 – 2022&lt;/head&gt;
    &lt;p&gt;Record patterns: an obvious extension, and I think we’re now pretty much there with ADTs? 9/10&lt;/p&gt;
    &lt;p&gt;Virtual threads: being someone who never really got on with async/callback/promise/reactive stream-based programming in Java, I was really happy to see this feature. I haven’t really had much reason to use them in anger yet, so I don’t know how well they’ve been done. But I’m hopeful! ?/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 21 – 2023&lt;/head&gt;
    &lt;p&gt;String templates: these are exactly what I asked for in A few programming language features I’d like to see, based on E’s quasi-literal syntax, and they fix the issues I had with text blocks. Unfortunately, the first design had some issues, and so they’ve gone back to the drawing board. Hopefully not for too long. I really wish they’d not released text blocks without this feature. 10/10 (if they ever arrive).&lt;/p&gt;
    &lt;p&gt;Sequenced collections: a simple addition that adds a common super-type to all collections that have a defined “encounter order”: lists, deques, sorted sets, etc. It defines convenient getFirst() and getLast() methods and a way to iterate items in the defined order or in reverse order. This is a nice unification, and plugs what seems like an obvious gap in the collections types, if perhaps not the most pressing issue? 6/10&lt;/p&gt;
    &lt;p&gt;Wildcards in patterns: adds the familiar syntax from Haskell and Prolog etc of using &lt;code&gt;_&lt;/code&gt; as a non-capturing wildcard variable in patterns when you don’t care about the value of that part. 6/10&lt;/p&gt;
    &lt;p&gt;Simplified console applications: Java finally makes simple programs simple for beginners, about a decade after universities stopped teaching Java to beginners… Snark aside, this is a welcome simplification. 8/10&lt;/p&gt;
    &lt;p&gt;This release also adds support for KEMs, although in the simplest possible form only. Meh. 4/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 22 – 2024&lt;/head&gt;
    &lt;p&gt;The only significant change in this release is the ability to have statements before a call to super() in a constructor. Fine. 5/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 23 – 2024&lt;/head&gt;
    &lt;p&gt;Primitive types in patterns: plugs a gap in pattern matching. 7/10&lt;/p&gt;
    &lt;p&gt;Markdown javadoc comments: Does anyone really care about this? 1/10&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 24 – 2024&lt;/head&gt;
    &lt;p&gt;The main feature here from my point of view as a crypto geek is the addition of post-quantum cryptography in the form of the newly standardised ML-KEM and ML-DSA algorithms, and support in TLS.&lt;/p&gt;
    &lt;head rend="h2"&gt;Java 25 – 2025&lt;/head&gt;
    &lt;p&gt;Stable values: this is essentially support for lazily-initialised final variables. Lazy initialisation is often trickier than it should be in Java, so this is a welcome addition. Remembering Alice ML, I wonder if there is some overlap between the proposed StableValue and a Future? 7/10?&lt;/p&gt;
    &lt;p&gt;PEM encoding of cryptographic objects is welcome from my point of view, but someone will need to tell me why this is not just &lt;code&gt;key/cert.getEncoded(“PEM”)&lt;/code&gt;? Decoding support is useful though, as that’s a frequent reason I have to grab Bouncy Castle still. 7/10&lt;/p&gt;
    &lt;p&gt;Well, that brings us pretty much up to date. What do you think? Agree, disagree? Are you a passionate defender of streams or Java modules? Have at it in the comments.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45551450</guid><pubDate>Sat, 11 Oct 2025 18:29:27 +0000</pubDate></item><item><title>Microsoft only lets you opt out of AI photo scanning 3x a year</title><link>https://hardware.slashdot.org/story/25/10/11/0238213/microsofts-onedrive-begins-testing-face-recognizing-ai-for-photos-for-some-preview-users</link><description>&lt;doc fingerprint="27d138be7ae4dabe"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Microsoft's OneDrive Begins Testing Face-Recognizing AI for Photos (for Some Preview Users) (microsoft.com) 32&lt;/head&gt;
    &lt;p&gt;And...&lt;/p&gt;
    &lt;p&gt;"You can only turn off this setting 3 times a year."&lt;/p&gt;
    &lt;p&gt;If I moved the slidebar for that setting to the left (for "No"), it moved back to the right, and said "Something went wrong while updating this setting." (Apparently it's not one of those three times of the year.)&lt;/p&gt;
    &lt;p&gt;The feature is already rolling out to a limited number of users in a preview, a Microsoft publicist confirmed to Slashdot. (For the record, I don't remember signing up for this face-recognizing "preview".) But there's a link at the bottom of the screen for a "Microsoft Privacy Statement" that leads to a Microsoft support page, which says instead that "This feature is coming soon and is yet to be released." And in the next sentence it's been saying "Stay tuned for more updates" for almost two years...&lt;/p&gt;
    &lt;p&gt;A Microsoft publicist agreed to answer Slashdot's questions...&lt;/p&gt;
    &lt;p&gt;Slashdot: What's the reason OneDrive tells users this setting can only be turned off 3 times a year? (And are those any three times — or does that mean three specific days, like Christmas, New Year's Day, etc.)&lt;/p&gt;
    &lt;p&gt;[Microsoft's publicist chose not to answer this question.]&lt;/p&gt;
    &lt;p&gt;Slashdot: If I move the slidebar to the left (for "No"), it moves back to the right, and says "Something went wrong while updating this setting." So is it correct to say that there's no way for users to select "No" now?&lt;/p&gt;
    &lt;p&gt;Microsoft: We haven't heard about the experience you are having with toggling, but our Microsoft contacts would like to investigate why this is happening for you. Can you share what type of device you are using, so we can put you in touch with the right team?&lt;/p&gt;
    &lt;p&gt;Slashdot: Is this feature really still "coming soon"? Can you give me more specific details on when "soon" will be?&lt;/p&gt;
    &lt;p&gt;Microsoft: This feature is currently rolling out to limited users in a preview so we can learn and improve. We have nothing more to share at this time.&lt;/p&gt;
    &lt;p&gt;Slashdot: I want to confirm something about how this feature is "yet to be released." Does this mean that currently OneDrive is not (and has never) used AI to "recognize" faces in photos?&lt;/p&gt;
    &lt;p&gt;Microsoft: Privacy is built into all Microsoft OneDrive experiences. Microsoft OneDrive services adhere to the Microsoft Privacy Statement and follow Microsoft's compliance with General Data Protection Regulation and the Microsoft EU Data Boundary.&lt;/p&gt;
    &lt;p&gt;Slashdot: Some privacy advocates prefer "opt-in" features, but it looks like here OneDrive is planning a (limited) opt-out feature. What is the reasoning for going with opt-out rather than opt-in?&lt;/p&gt;
    &lt;p&gt;Microsoft: Microsoft OneDrive inherits privacy features and settings from Microsoft 365 and SharePoint, where applicable.&lt;/p&gt;
    &lt;p&gt;Slashdot also spoke to EFF security/privacy activist Thorin Klosowski, who expressed concerns. "Any feature related to privacy really should be opt-in and companies should provide clear documentation so its users can understand the risks and benefits to make that choice for themselves."&lt;/p&gt;
    &lt;p&gt;Microsoft's "three times a year" policy also seemed limiting to Klosowski. "People should also be able to change those settings at-will whenever possible because we all encounter circumstances were we need to re-evaluate and possibly change our privacy settings."&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45551504</guid><pubDate>Sat, 11 Oct 2025 18:36:51 +0000</pubDate></item><item><title>Discord hack shows risks of online age checks</title><link>https://news.sky.com/story/discord-hack-shows-dangers-of-online-age-checks-as-internet-policing-hopes-put-to-the-test-13447618</link><description>&lt;doc fingerprint="2034183d2f77f5c7"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Discord hack shows risks of online age checks as internet policing hopes put to the test&lt;/head&gt;
    &lt;p&gt;As the drive for age verification grows, so does the pressure on online companies to keep users' data safe and, as the Discord hack shows, that cannot be guaranteed.&lt;/p&gt;
    &lt;p&gt;Friday 10 October 2025 11:29, UK&lt;/p&gt;
    &lt;p&gt;Messaging platform Discord has said the official ID photos of around 70,000 users have been stolen by hackers.&lt;/p&gt;
    &lt;p&gt;The app, which is popular with gamers and teenagers, said the hackers targeted a firm responsible for verifying the ages of its users. Discord said its own platform was not breached.&lt;/p&gt;
    &lt;p&gt;The stolen data could include personal information, partial credit card numbers and messages with Discord's customer service agents, the firm said.&lt;/p&gt;
    &lt;p&gt;No full credit card details, passwords or messages and activity beyond conversations with Discord customer support were leaked, it added.&lt;/p&gt;
    &lt;p&gt;Discord said it had revoked the third-party service's access and was continuing to investigate. It said all affected users have been contacted.&lt;/p&gt;
    &lt;p&gt;"Looking ahead, we recommend impacted users stay alert when receiving messages or other communication that may seem suspicious," it said.&lt;/p&gt;
    &lt;p&gt;Until recently, a hack like this could not have happened, because companies had no need to process and collect proofs of age.&lt;/p&gt;
    &lt;p&gt;Now, so many governments are following the UK and introducing age verification for unsuitable or pornographic content that a company like Discord has to roll out age checks for a decent portion of its 200 million active users.&lt;/p&gt;
    &lt;p&gt;It's a bit like the way that shops have to check your age if you're buying alcohol - only because it's online, it comes with a lot of additional complications.&lt;/p&gt;
    &lt;p&gt;A shop, for instance, won't keep a copy of your passport once they've checked your age.&lt;/p&gt;
    &lt;p&gt;And it definitely won't keep it in a massive (yet strangely light) safe along with thousands of other passport photocopies, stored right by its front door, ready to be taken.&lt;/p&gt;
    &lt;p&gt;Online, it's surprisingly easy to do just that.&lt;/p&gt;
    &lt;p&gt;Read more on Sky News:&lt;lb/&gt;AI 'distorting women online'&lt;lb/&gt;Pros and cons of digital IDs&lt;lb/&gt;Impact of new online safety rules&lt;/p&gt;
    &lt;p&gt;Be the first to get Breaking News&lt;/p&gt;
    &lt;p&gt;Install the Sky News app for free&lt;/p&gt;
    &lt;p&gt;It's worth noting that the age verification system used by Discord wasn't hacked itself. That system asked people to take a photo of themselves, then used software to estimate their age. Once the check was complete, the image was immediately deleted.&lt;/p&gt;
    &lt;p&gt;The problem came with the appeals part of the process, which was supplied to Discord by a third party.&lt;/p&gt;
    &lt;p&gt;If someone thought that the age verification system had wrongly barred them from Discord they could send in a picture of their ID to prove their age. This collection of images was hacked. As a result, Discord says, more than 70,000 IDs are now in the possession of hackers.&lt;/p&gt;
    &lt;p&gt;(The hackers themselves claim that the number is much bigger - 2,185,151 photos. Discord says this is wrong and the hackers are simply trying to extort money. It's a messy situation.)&lt;/p&gt;
    &lt;p&gt;There are ways to make age verification safer. Companies could stop storing photo ID, for instance (although then it would be impossible to know for sure if their checks were correct).&lt;/p&gt;
    &lt;p&gt;And advocates of ID cards will point out that a proper government ID could avoid the need to send pictures of your passport simply to prove your age. You'd use your digital ID instead, which would stay safely on your device.&lt;/p&gt;
    &lt;p&gt;But the best way to stop data being hacked is not to collect it in the first place.&lt;/p&gt;
    &lt;p&gt;We're at the start of a defining test - can governments actually police the internet? Or will the measures that are supposed to make us safer actually end up making us less secure?&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45551893</guid><pubDate>Sat, 11 Oct 2025 19:22:03 +0000</pubDate></item><item><title>Indonesia says 22 plants in industrial zone contaminated by caesium 137</title><link>https://www.reuters.com/sustainability/boards-policy-regulation/indonesia-says-22-plants-industrial-zone-near-jakarta-contaminated-by-caesium-2025-10-08/</link><description>&lt;doc fingerprint="681d756cc5947fe"&gt;
  &lt;main&gt;
    &lt;p&gt;JAKARTA, Oct 8 (Reuters) - Indonesia's special task force on radioactive contamination has found traces of Caesium 137 at 22 production facilities in an industrial zone near Jakarta, officials said on Wednesday.&lt;/p&gt;
    &lt;p&gt;The contamination was first detected in a batch of shrimp shipped to the United States in August by a local company, PT Bahari Makmur Sejahtera (BMS).&lt;/p&gt;
    &lt;p&gt;Sign up here.&lt;/p&gt;
    &lt;p&gt;Indonesia then conducted sweeping radiation scans of the Modern Cikande Industrial Estate, where BMS was based.&lt;/p&gt;
    &lt;p&gt;"The shrimp production facility (BMS), has conducted independent decontamination and has been declared safe by the nuclear agency," task force spokesperson Bara Hasibuan told journalists.&lt;/p&gt;
    &lt;p&gt;The task force did not give the names of the 21 other production facilities, but said they will immediately undergo decontamination procedures conducted by Indonesia's nuclear agency.&lt;/p&gt;
    &lt;p&gt;The Modern Cikande estate, 68 km from Jakarta, covers 3,175 hectares and contains more than 270 local and foreign companies in sectors ranging from food processing to automotive components, according to its website.&lt;/p&gt;
    &lt;p&gt;Caesium 137 is a hazardous radioactive isotope that usually enters the environment as a result of nuclear testing or after accidents like Chernobyl and Fukushima, according to the website of the United States' Food and Drug Administration.&lt;/p&gt;
    &lt;p&gt;Indonesia has no nuclear weapons or nuclear power plants, suggesting that the caesium 137 entered Indonesia from overseas.&lt;/p&gt;
    &lt;p&gt;"The government has decided to tighten restrictions on scrap metal imports, meaning that the Ministry of Environment will not issue recommendations for scrap metal imports," Hasibuan said.&lt;/p&gt;
    &lt;p&gt;The task force has also designated the site of a scrap metal factory, PT PMT (Peter Metal Technology), as an isolation facility to store goods found to have been contaminated with Caesium 137.&lt;/p&gt;
    &lt;p&gt;Reporting by Dewi Kurniawati; Editing by David Stanway&lt;/p&gt;
    &lt;p&gt;Our Standards: The Thomson Reuters Trust Principles.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45552199</guid><pubDate>Sat, 11 Oct 2025 19:59:14 +0000</pubDate></item></channel></rss>