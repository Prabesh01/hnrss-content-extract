<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sun, 31 Aug 2025 04:39:23 +0000</lastBuildDate><item><title>From multi-head to latent attention: The evolution of attention mechanisms</title><link>https://vinithavn.medium.com/from-multi-head-to-latent-attention-the-evolution-of-attention-mechanisms-64e3c0505f24</link><description>&lt;doc fingerprint="3518d6c6043b3b90"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;From Multi-Head to Latent Attention: The Evolution of Attention Mechanisms&lt;/head&gt;
    &lt;head rend="h2"&gt;What is attention?&lt;/head&gt;
    &lt;p&gt;In any autoregressive model, the prediction of the future tokens is based on some preceding context. However, not all the tokens within this context equally contribute to the prediction, because some tokens might be more relevant than others. The attention mechanism addresses this by allowing the model to concentrate on the important context words selectively, while generating each output word or token. Consider the popular example that explains the attention mechanism.&lt;/p&gt;
    &lt;p&gt;“The animal didn’t cross the street because it was too tired”.&lt;/p&gt;
    &lt;p&gt;In this sentence, the pronoun “it” could refer to either “animal” or “street”. Attention helps the model to associate “it” with “animal” rather than “street” by weighing the relative importance of each word. This helps the model to understand the relationships between words and capture the contextual meaning in various NLP tasks.&lt;/p&gt;
    &lt;head rend="h3"&gt;How is attention calculated?&lt;/head&gt;
    &lt;p&gt;There are various types of attention mechanisms today, beginning with the Multi-Head Attention (MHA), which introduced the attention concept in the seminal paper. More recently, advanced variants like Multi-Latent Head Attention (MHLA) have been employed in popular models like Deepseek. This blog aims to cover the fundamentals of each attention mechanism, including the core ideas, advantages, limitations, etc.&lt;/p&gt;
    &lt;head rend="h3"&gt;Key Concepts in Attention Mechanisms&lt;/head&gt;
    &lt;p&gt;Before diving into specific types of attention, we need to understand some fundamental concepts that underpin all the various attention mechanisms.&lt;/p&gt;
    &lt;p&gt;The main idea behind the attention mechanism is to dynamically weigh, and focus on relevant parts of inputs. Attention is required in both the encoding and decoding stages. But in this blog, we will be discussing this from a decoder's point of view.&lt;/p&gt;
    &lt;p&gt;During each generation step, we need to understand the attention weights, which help us to get a better contextual representation for the next word prediction. At its core, attention operates through three fundamental components — queries, keys, and values — that work together with attention scores to create a flexible, context-aware vector representation.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Query (Q): The query is a vector that represents the current token for which the model wants to compute attention.&lt;/item&gt;
      &lt;item&gt;Key (K): Keys are vectors that represent the elements in the context against which the query is compared, to determine the relevance.&lt;/item&gt;
      &lt;item&gt;Attention Scores: These are computed using Query and Key vectors to determine the amount of attention to be paid to each context token.&lt;/item&gt;
      &lt;item&gt;Value (V): Values are the vectors that represent the actual contextual information. After calculating the attention scores using Query and Key vectors, these scores are applied against Value vectors to get the final context vector&lt;/item&gt;
      &lt;item&gt;KV Caching: Since the key and value vectors are for previous tokens, we can skip this computation for those tokens that are already calculated. KV caching stores the precomputed keys and values from the previous computations, which helps in faster decoding in autoregressive models by reusing the cached vectors. However, the Query vectors cannot be cached, since they are calculated for the current token.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;To understand how each of these vectors are scores are calculated you can refer to this blog.&lt;/p&gt;
    &lt;p&gt;The high-level concepts remain consistent across all types of attention mechanisms. However, the key difference lies in how efficiently each of them executes the attention process without compromising on performance. Innovations focus on computational speed, reducing memory usage, improving scalability across longer sequences, etc.&lt;/p&gt;
    &lt;p&gt;Now, let's dive into each of these techniques&lt;/p&gt;
    &lt;head rend="h2"&gt;Multi-Head Attention (MHA)&lt;/head&gt;
    &lt;p&gt;In multi-head attention, for computing the attention weights for the ith token, first, a query vector is calculated for that token. To calculate the attention weights for the token, this query vector is compared with all the preceding tokens. For that, key vectors are calculated for all the preceding tokens. These comparisons will generate an attention score, which is then used to produce a weighted score for each token using the corresponding value vectors.&lt;/p&gt;
    &lt;p&gt;In multi-head attention, this process is repeated in parallel across multiple attention “heads”. Each head has its own query, value, and key vectors, using which it calculates the relationship between the words. The final output context vector will be the concatenated output from all the attention heads.&lt;/p&gt;
    &lt;p&gt;Now, this seems straightforward. However, as the context grows, the number of Key and Value vectors will increase dramatically, because these vectors need to be calculated and stored for all the context tokens. For a sequence length of n, each query vector must be compared against all n key vectors and then perform the weighted combination using n value vectors. This results in a quadratic complexity in both computation and memory.&lt;/p&gt;
    &lt;p&gt;KV cache can help in reducing the computation and memory overhead during inference. But as the context grows, the size of the cache grows linearly with sequence length to store all the keys and values for all the preceding tokens. KV cache reduces the redundant computations, but will not reduce the fundamental cost of attending to all the previous tokens.&lt;/p&gt;
    &lt;p&gt;Models using MHA – Bert, RoBerta, T5, etc.&lt;/p&gt;
    &lt;head rend="h2"&gt;Multi-Query Attention (MQA)&lt;/head&gt;
    &lt;p&gt;A significant challenge with MHA was the high computational and memory overhead associated with storing and processing separate Key and Value vectors for each attention head.&lt;/p&gt;
    &lt;p&gt;MQA addresses this problem by using multiple query heads but sharing a common set of Key and Value vectors across all the heads. In other words, there are still “h” distinct Query projections using which the model attends the current token from multiple perspectives. But the same Key and Value vectors are used for every head.&lt;/p&gt;
    &lt;p&gt;This approach will greatly reduce the memory bandwidth requirements without significantly sacrificing the model performance. By sharing the Key and Value vectors, MQA enables an efficient inference, especially for Large language models with long context lengths.&lt;/p&gt;
    &lt;p&gt;Here, the Key and Value vectors need to be calculated only once for a token instead of “h” times, which reduces the computation cost of Key/Value projection. But note that for calculating the attention score, each query head is still multiplied by the Key vectors and then weighed using the Value vectors. So this remains the same.&lt;/p&gt;
    &lt;p&gt;Also, with MQA only one set of Key-Value pairs needs to be cached, regardless of the number of Query heads. This lets the KV cache size grow gradually as the sequence length grows, leading to much lower memory requirements when compared to MHA&lt;/p&gt;
    &lt;p&gt;Models using MQA – PaLM, Falcon&lt;/p&gt;
    &lt;head rend="h2"&gt;Grouped Query Attention (GQA)&lt;/head&gt;
    &lt;p&gt;Grouped Query attention offers a balance between the MHA and MQA. As we saw earlier, traditional MHA requires significant memory and computation overhead due to separate Key-Value vectors for each Query head, and the computation overhead even increases as the number of heads increases. MQA addresses this by having a shared Key-Value, which reduces the computation cost and memory, but it may impact the model performance.&lt;/p&gt;
    &lt;p&gt;GQA offers a compromise between these two extremes. Instead of having a common Key-Value for all the heads, GQA divides the Query heads into “g” groups and lets each group share a common Key and Value head. We can say, MHA and MQA come as two extreme cases of GQA, with g=1 leading to MQA and g=h leading to MHA. This approach reduces the memory and computational requirements compared to MHA while retaining a better performance than MQA.&lt;/p&gt;
    &lt;p&gt;Models using GQA – Llama2, Llama3, Mistral&lt;/p&gt;
    &lt;head rend="h2"&gt;Multi-Head Latent Attention (MHLA)&lt;/head&gt;
    &lt;p&gt;While GQA performs better than MQA, but still may not match MHA’s performance in some complex tasks.&lt;/p&gt;
    &lt;p&gt;MHLA is a recent innovation in transformer architecture introduced in models like DeepSeek. Its main goal is to dramatically reduce memory usage and accelerate inference, especially for large language models (LLMs), without loss in model performance.&lt;/p&gt;
    &lt;p&gt;The idea is to attain a performance near MHA. So we need to consider separate Key value heads for each attention head, like in MHA, but also improve the inference speed by reducing the memory overhead for storing the large amounts of Key value vectors.&lt;/p&gt;
    &lt;p&gt;MHLA addresses the challenge of high memory usage and slow inference by compressing the Key and Value representations into a much smaller latent space using low-rank projections. Specifically, instead of storing the full Key and Value vectors for every token and head, MHLA applies a linear transformation that projects these vectors into a lower-dimensional space.&lt;/p&gt;
    &lt;p&gt;So during the inference:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;A down-projection weight matrix W(DKV) is introduced and is multiplied with the input sequence to obtain a compressed latent vector C(KV) for keys and Values. This latent vector is stored in cache, which is significantly smaller in size when compared to the full key and Value vectors&lt;/item&gt;
      &lt;item&gt;This is then multiplied by an up-projection matrix W(UK) and W(UV) to get the Key and Value vectors&lt;/item&gt;
      &lt;item&gt;Additionally, the matrix W(KR) is used to produce a decoupled Key that carries the Rotary Positional embedding&lt;/item&gt;
      &lt;item&gt;Additionally, the same process is done for attention Queries as well, which will reduce the activation memory during training&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;MHLA supports switching between two computation paradigms for different stages. During the training stage, which is computationally intensive, it operates similarly to MHA, where the computational overhead is slightly lower than conventional MHA. During inference, it can seamlessly switch to a paradigm similar to MQA. Here, the cached KV head interacts with all query heads to produce the final output.&lt;/p&gt;
    &lt;p&gt;Models using MHLA– Deepseek- V2, Deep seek V2&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;In addition to the topics discussed, there are various innovative methods that are designed to optimise the challenges of the traditional attention technique. Some of these include sparse attention, efficient attention, memory augmented attention, etc. These approaches reflect the focus on ongoing research for making the attention more scalable, faster, and adaptable across various tasks and requirements.&lt;/p&gt;
    &lt;p&gt;Thank you for reading this post! Let me know if you liked it, have questions, or spotted an error. Please feel free to contact or follow me through LinkedIn, Twitter, or Medium.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45072160</guid></item><item><title>Hardening Firefox – a checklist for improved browser privacy</title><link>https://andrewmarder.net/firefox/</link><description>&lt;doc fingerprint="dc8ad1d63ca9eb26"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Firefox Privacy Checklist&lt;/head&gt;&lt;p&gt;/ 3 min read&lt;/p&gt;Updated:&lt;head class="font-semibold hover:marker:text-accent cursor-pointer"&gt;Table of Contents&lt;/head&gt;&lt;p&gt;This checklist will walk you (and me) through the settings and extensions I use to improve my privacy when using Firefox.&lt;/p&gt;&lt;p&gt;If you’re looking for a web browser that offers a high degree of privacy out of the box with minimal setup, Brave is a common choice. However, I prefer Firefox for several reasons:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Firefox is developed by the nonprofit organization Mozilla.&lt;/item&gt;&lt;item&gt;I value Mozilla’s commitment to open source software.&lt;/item&gt;&lt;item&gt;Firefox is not based on Chromium. Brave, like most browsers, is based on Chromium, which is developed primarily by Google.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;While there are many web browsers to choose from, I’ve decided Firefox is best for me. This post is a checklist of how I’ve configured it to better protect my privacy while browsing the web.&lt;/p&gt;&lt;head rend="h3"&gt;1. Basic Privacy Settings&lt;/head&gt;&lt;p&gt;Access Firefox’s settings by clicking the menu button (three horizontal lines) in the top-right corner and selecting “Settings.”&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Change Default Search Engine: In the Search tab, change the “Default Search Engine” to a privacy-respecting option like DuckDuckGo.&lt;/item&gt;&lt;item&gt;Enable HTTPS-Only Mode: In the Privacy &amp;amp; Security tab, scroll down to “HTTPS-Only Mode” and select “Enable HTTPS-Only Mode in all windows.”&lt;/item&gt;&lt;item&gt;Disable Telemetry: Still in Privacy &amp;amp; Security, scroll to “Firefox Data Collection and Use” and uncheck all the boxes to stop Firefox from sending data back to Mozilla.&lt;/item&gt;&lt;item&gt;Set Enhanced Tracking Protection to Strict: Under Privacy &amp;amp; Security, set “Enhanced Tracking Protection” to Strict. This offers stronger protection against trackers. If a site breaks, you can easily disable it for that specific site by clicking the shield icon in the address bar.&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;2. Recommended Extensions&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;Install uBlock Origin: A comprehensive content blocker that stops ads and tracking scripts, which speeds up page loading and enhances privacy.&lt;/item&gt;&lt;item&gt;Install ClearURLs: This extension automatically removes tracking elements from URLs, helping prevent another form of web tracking.&lt;/item&gt;&lt;item&gt;Install Privacy Badger: From the Electronic Frontier Foundation, this extension automatically learns to block invisible trackers. Instead of relying on blocklists, it discovers trackers based on behavior.&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;3. Advanced Configuration (&lt;code&gt;about:config&lt;/code&gt;)&lt;/head&gt;&lt;p&gt;To access this, type &lt;code&gt;about:config&lt;/code&gt; into the address bar and accept the warning.&lt;/p&gt;&lt;p&gt;Warning: Changing advanced configuration preferences can impact Firefox performance or security. Proceed with caution.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt; Isolate Cookies to the First-Party Domain: &lt;list rend="ul"&gt;&lt;item&gt;Search for &lt;code&gt;privacy.firstparty.isolate&lt;/code&gt;and set its value to&lt;code&gt;true&lt;/code&gt;.&lt;/item&gt;&lt;item&gt;This prevents cookies from tracking you from one site to another, but it can break single sign-on on some websites.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;item&gt;Search for &lt;/item&gt;&lt;item&gt;Resist Fingerprinting: &lt;list rend="ul"&gt;&lt;item&gt;I previously set &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt;to&lt;code&gt;true&lt;/code&gt;to make my browser fingerprint less unique.&lt;/item&gt;&lt;item&gt;It caused minor display issues on some sites and broke image uploads to Bluesky, so I set it back to &lt;code&gt;false&lt;/code&gt;.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;item&gt;I previously set &lt;/item&gt;&lt;/list&gt;&lt;p&gt;By following this checklist, you can significantly improve your privacy while using Firefox. Please let me know if I’m missing anything in the comments.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45073746</guid></item><item><title>Agent Client Protocol (ACP)</title><link>https://agentclientprotocol.com/overview/introduction</link><description>&lt;doc fingerprint="7d89da1d4bcc10c1"&gt;
  &lt;main&gt;
    &lt;p&gt;The Agent Client Protocol standardizes communication between code editors (IDEs, text-editors, etc.) and coding agents (programs that use generative AI to autonomously modify code).The protocol is still under development, but it should be complete enough to build interesting user experiences using it.&lt;/p&gt;
    &lt;p&gt;AI coding agents and editors are tightly coupled but interoperability isn’t the default. Each editor must build custom integrations for every agent they want to support, and agents must implement editor-specific APIs to reach users. This creates several problems:&lt;/p&gt;
    &lt;p&gt;Integration overhead: Every new agent-editor combination requires custom work&lt;/p&gt;
    &lt;p&gt;Limited compatibility: Agents work with only a subset of available editors&lt;/p&gt;
    &lt;p&gt;Developer lock-in: Choosing an agent often means accepting their available interfaces&lt;/p&gt;
    &lt;p&gt;ACP solves this by providing a standardized protocol for agent-editor communication, similar to how the Language Server Protocol (LSP) standardized language server integration.Agents that implement ACP work with any compatible editor. Editors that support ACP gain access to the entire ecosystem of ACP-compatible agents. This decoupling allows both sides to innovate independently while giving developers the freedom to choose the best tools for their workflow.&lt;/p&gt;
    &lt;p&gt;ACP assumes that the user is primarily in their editor, and wants to reach out and use agents to assist them with specific tasks.Agents run as sub-processes of the code editor, and communicate using JSON-RPC over stdio. The protocol re-uses the JSON representations used in MCP where possible, but includes custom types for useful agentic coding UX elements, like displaying diffs.The default format for user-readable text is Markdown, which allows enough flexibility to represent rich formatting without requiring that the code editor is capable of rendering HTML.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45074147</guid></item><item><title>Cognitive load is what matters</title><link>https://github.com/zakirullin/cognitive-load</link><description>&lt;doc fingerprint="373978120d250fed"&gt;
  &lt;main&gt;&lt;p&gt;Readable version | Chinese translation | Korean translation | Turkish translation&lt;/p&gt;&lt;p&gt;It is a living document, last update: August 2025. Your contributions are welcome!&lt;/p&gt;&lt;p&gt;There are so many buzzwords and best practices out there, but most of them have failed. We need something more fundamental, something that can't be wrong.&lt;/p&gt;&lt;p&gt;Sometimes we feel confusion going through the code. Confusion costs time and money. Confusion is caused by high cognitive load. It's not some fancy abstract concept, but rather a fundamental human constraint. It's not imagined, it's there and we can feel it.&lt;/p&gt;&lt;p&gt;Since we spend far more time reading and understanding code than writing it, we should constantly ask ourselves whether we are embedding excessive cognitive load into our code.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Cognitive load is how much a developer needs to think in order to complete a task.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;When reading code, you put things like values of variables, control flow logic and call sequences into your head. The average person can hold roughly four such chunks in working memory. Once the cognitive load reaches this threshold, it becomes much harder to understand things.&lt;/p&gt;&lt;p&gt;Let's say we have been asked to make some fixes to a completely unfamiliar project. We were told that a really smart developer had contributed to it. Lots of cool architectures, fancy libraries and trendy technologies were used. In other words, the author had created a high cognitive load for us.&lt;/p&gt;&lt;p&gt;We should reduce the cognitive load in our projects as much as possible.&lt;/p&gt;&lt;p&gt;Intrinsic - caused by the inherent difficulty of a task. It can't be reduced, it's at the very heart of software development.&lt;/p&gt;&lt;p&gt;Extraneous - created by the way the information is presented. Caused by factors not directly relevant to the task, such as smart author's quirks. Can be greatly reduced. We will focus on this type of cognitive load.&lt;/p&gt;&lt;p&gt;Let's jump straight to the concrete practical examples of extraneous cognitive load.&lt;/p&gt;&lt;p&gt;We will refer to the level of cognitive load as follows:&lt;code&gt;🧠&lt;/code&gt;: fresh working memory, zero cognitive load&lt;code&gt;🧠++&lt;/code&gt;: two facts in our working memory, cognitive load increased&lt;code&gt;🤯&lt;/code&gt;: cognitive overload, more than 4 facts&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Our brain is much more complex and unexplored, but we can go with this simplistic model.&lt;/p&gt;&lt;/quote&gt;&lt;code&gt;if val &amp;gt; someConstant // 🧠+
    &amp;amp;&amp;amp; (condition2 || condition3) // 🧠+++, prev cond should be true, one of c2 or c3 has be true
    &amp;amp;&amp;amp; (condition4 &amp;amp;&amp;amp; !condition5) { // 🤯, we are messed up by this point
    ...
}&lt;/code&gt;&lt;p&gt;Introduce intermediate variables with meaningful names:&lt;/p&gt;&lt;code&gt;isValid = val &amp;gt; someConstant
isAllowed = condition2 || condition3
isSecure = condition4 &amp;amp;&amp;amp; !condition5 
// 🧠, we don't need to remember the conditions, there are descriptive variables
if isValid &amp;amp;&amp;amp; isAllowed &amp;amp;&amp;amp; isSecure {
    ...
}&lt;/code&gt;&lt;code&gt;if isValid { // 🧠+, okay nested code applies to valid input only
    if isSecure { // 🧠++, we do stuff for valid and secure input only
        stuff // 🧠+++
    }
} &lt;/code&gt;&lt;p&gt;Compare it with the early returns:&lt;/p&gt;&lt;code&gt;if !isValid
    return
 
if !isSecure
    return

// 🧠, we don't really care about earlier returns, if we are here then all good

stuff // 🧠+&lt;/code&gt;&lt;p&gt;We can focus on the happy path only, thus freeing our working memory from all sorts of preconditions.&lt;/p&gt;&lt;p&gt;We are asked to change a few things for our admin users: &lt;code&gt;🧠&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;AdminController extends UserController extends GuestController extends BaseController&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Ohh, part of the functionality is in &lt;code&gt;BaseController&lt;/code&gt;, let's have a look: &lt;code&gt;🧠+&lt;/code&gt;&lt;lb/&gt; Basic role mechanics got introduced in &lt;code&gt;GuestController&lt;/code&gt;: &lt;code&gt;🧠++&lt;/code&gt;&lt;lb/&gt; Things got partially altered in &lt;code&gt;UserController&lt;/code&gt;: &lt;code&gt;🧠+++&lt;/code&gt;&lt;lb/&gt; Finally we are here, &lt;code&gt;AdminController&lt;/code&gt;, let's code stuff! &lt;code&gt;🧠++++&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Oh, wait, there's &lt;code&gt;SuperuserController&lt;/code&gt; which extends &lt;code&gt;AdminController&lt;/code&gt;. By modifying &lt;code&gt;AdminController&lt;/code&gt; we can break things in the inherited class, so let's dive in &lt;code&gt;SuperuserController&lt;/code&gt; first: &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Prefer composition over inheritance. We won't go into detail - there's plenty of material out there.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Method, class and module are interchangeable in this context&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;Mantras like "methods should be shorter than 15 lines of code" or "classes should be small" turned out to be somewhat wrong.&lt;/p&gt;&lt;p&gt;Deep module - simple interface, complex functionality&lt;lb/&gt; Shallow module - interface is relatively complex to the small functionality it provides&lt;/p&gt;&lt;p&gt;Having too many shallow modules can make it difficult to understand the project. Not only do we have to keep in mind each module responsibilities, but also all their interactions. To understand the purpose of a shallow module, we first need to look at the functionality of all the related modules. Jumping between such shallow components is mentally exhausting, linear thinking is more natural to us humans.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Information hiding is paramount, and we don't hide as much complexity in shallow modules.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;I have two pet projects, both of them are somewhat 5K lines of code. The first one has 80 shallow classes, whereas the second one has only 7 deep classes. I haven't been maintaining any of these projects for one year and a half.&lt;/p&gt;&lt;p&gt;Once I came back, I realised that it was extremely difficult to untangle all the interactions between those 80 classes in the first project. I would have to rebuild an enormous amount of cognitive load before I could start coding. On the other hand, I was able to grasp the second project quickly, because it had only a few deep classes with a simple interface.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;The best components are those that provide powerful functionality yet have a simple interface.&lt;/p&gt;&lt;lb/&gt;John K. Ousterhout&lt;/quote&gt;&lt;p&gt;The interface of the UNIX I/O is very simple. It has only five basic calls:&lt;/p&gt;&lt;code&gt;open(path, flags, permissions)
read(fd, buffer, count)
write(fd, buffer, count)
lseek(fd, offset, referencePosition)
close(fd)&lt;/code&gt;&lt;p&gt;A modern implementation of this interface has hundreds of thousands of lines of code. Lots of complexity is hidden under the hood. Yet it is easy to use due to its simple interface.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;This deep module example is taken from the book A Philosophy of Software Design by John K. Ousterhout. Not only does this book cover the very essence of complexity in software development, but it also has the greatest interpretation of Parnas' influential paper On the Criteria To Be Used in Decomposing Systems into Modules. Both are essential reads. Other related readings: A Philosophy of Software Design vs Clean Code, It's probably time to stop recommending Clean Code, Small Functions considered Harmful.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;P.S. If you think we are rooting for bloated God objects with too many responsibilities, you got it wrong.&lt;/p&gt;&lt;p&gt;All too often, we end up creating lots of shallow modules, following some vague "a module should be responsible for one, and only one, thing" principle. What is this blurry one thing? Instantiating an object is one thing, right? So MetricsProviderFactoryFactory seems to be just fine. The names and interfaces of such classes tend to be more mentally taxing than their entire implementations, what kind of abstraction is that? Something went wrong.&lt;/p&gt;&lt;p&gt;We make changes to our systems to satisfy our users and stakeholders. We are responsible to them.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;A module should be responsible to one, and only one, user or stakeholder.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;This is what this Single Responsibility Principle is all about. Simply put, if we introduce a bug in one place, and then two different business people come to complain, we've violated the principle. It has nothing to do with the number of things we do in our module.&lt;/p&gt;&lt;p&gt;But even now, this rule can do more harm than good. This principle can be understood in as many different ways as there are individuals. A better approach would be to look at how much cognitive load it all creates. It's mentally demanding to remember that change in one place can trigger a chain of reactions across different business streams. And that's about it, no fancy terms to learn.&lt;/p&gt;&lt;p&gt;This shallow-deep module principle is scale-agnostic, and we can apply it to microservices architecture. Too many shallow microservices won't do any good - the industry is heading towards somewhat "macroservices", i.e., services that are not so shallow (=deep). One of the worst and hardest to fix phenomena is so-called distributed monolith, which is often the result of this overly granular shallow separation.&lt;/p&gt;&lt;p&gt;I once consulted a startup where a team of five developers introduced 17(!) microservices. They were 10 months behind schedule and appeared nowhere close to the public release. Every new requirement led to changes in 4+ microservices. It took an enormous amount of time to reproduce and debug an issue in such a distributed system. Both time to market and cognitive load were unacceptably high. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Is this the right way to approach the uncertainty of a new system? It's enormously difficult to elicit the right logical boundaries in the beginning. The key is to make decisions as late as you can responsibly wait, because that is when you have the most information at hand. By introducing a network layer up front, we make our design decisions hard to revert right from the start. The team's only justification was: "The FAANG companies proved microservices architecture to be effective". Hello, you got to stop dreaming big.&lt;/p&gt;&lt;p&gt;The Tanenbaum-Torvalds debate argued that Linux's monolithic design was flawed and obsolete, and that a microkernel architecture should be used instead. Indeed, the microkernel design seemed to be superior "from a theoretical and aesthetical" point of view. On the practical side of things - three decades on, microkernel-based GNU Hurd is still in development, and monolithic Linux is everywhere. This page is powered by Linux, your smart teapot is powered by Linux. By monolithic Linux.&lt;/p&gt;&lt;p&gt;A well-crafted monolith with truly isolated modules is often much more flexible than a bunch of microservices. It also requires far less cognitive effort to maintain. It's only when the need for separate deployments becomes crucial, such as scaling the development team, that you should consider adding a network layer between the modules, future microservices.&lt;/p&gt;&lt;p&gt;We feel excited when new features got released in our favourite language. We spend some time learning these features, we build code upon them.&lt;/p&gt;&lt;p&gt;If there are lots of features, we may spend half an hour playing with a few lines of code, to use one or another feature. And it's kind of a waste of time. But what's worse, when you come back later, you would have to recreate that thought process!&lt;/p&gt;&lt;p&gt;You not only have to understand this complicated program, you have to understand why a programmer decided this was the way to approach a problem from the features that are available. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;These statements are made by none other than Rob Pike.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Reduce cognitive load by limiting the number of choices.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;Language features are OK, as long as they are orthogonal to each other.&lt;/p&gt;&lt;head&gt;Thoughts from an engineer with 20 years of C++ experience ⭐️&lt;/head&gt;&lt;p&gt;I was looking at my RSS reader the other day and noticed that I have somewhat three hundred unread articles under the "C++" tag. I haven't read a single article about the language since last summer, and I feel great!&lt;/p&gt;&lt;p&gt;I've been using C++ for 20 years for now, that's almost two-thirds of my life. Most of my experience lies in dealing with the darkest corners of the language (such as undefined behaviours of all sorts). It's not a reusable experience, and it's kind of creepy to throw it all away now.&lt;/p&gt;&lt;p&gt;Like, can you imagine, the token&lt;/p&gt;&lt;code&gt;||&lt;/code&gt; has a different meaning in &lt;code&gt;requires ((!P&amp;lt;T&amp;gt; || !Q&amp;lt;T&amp;gt;))&lt;/code&gt; and in &lt;code&gt;requires (!(P&amp;lt;T&amp;gt; || Q&amp;lt;T&amp;gt;))&lt;/code&gt;. The first is the constraint disjunction, the second is the good-old logical OR operator, and they behave differently.&lt;p&gt;You can't allocate space for a trivial type and just&lt;/p&gt;&lt;code&gt;memcpy&lt;/code&gt; a set of bytes there without extra effort - that won't start the lifetime of an object. This was the case before C++20. It was fixed in C++20, but the cognitive load of the language has only increased.&lt;p&gt;Cognitive load is constantly growing, even though things got fixed. I should know what was fixed, when it was fixed, and what it was like before. I am a professional after all. Sure, C++ is good at legacy support, which also means that you will face that legacy. For example, last month a colleague of mine asked me about some behaviour in C++03.&lt;/p&gt;&lt;code&gt;🤯&lt;/code&gt;&lt;p&gt;There were 20 ways of initialization. Uniform initialization syntax has been added. Now we have 21 ways of initialization. By the way, does anyone remember the rules for selecting constructors from the initializer list? Something about implicit conversion with the least loss of information, but if the value is known statically, then...&lt;/p&gt;&lt;code&gt;🤯&lt;/code&gt;&lt;p&gt;This increased cognitive load is not caused by a business task at hand. It is not an intrinsic complexity of the domain. It is just there due to historical reasons (extraneous cognitive load).&lt;/p&gt;&lt;p&gt;I had to come up with some rules. Like, if that line of code is not as obvious and I have to remember the standard, I better not write it that way. The standard is somewhat 1500 pages long, by the way.&lt;/p&gt;&lt;p&gt;By no means I am trying to blame C++. I love the language. It's just that I am tired now.&lt;/p&gt;&lt;p&gt;Thanks to 0xd34df00d for writing.&lt;/p&gt;&lt;p&gt;On the backend we return:&lt;code&gt;401&lt;/code&gt; for expired jwt token&lt;code&gt;403&lt;/code&gt; for not enough access&lt;code&gt;418&lt;/code&gt; for banned users&lt;/p&gt;&lt;p&gt;The engineers on the frontend use backend API to implement login functionality. They would have to temporarily create the following cognitive load in their brains:&lt;code&gt;401&lt;/code&gt; is for expired jwt token // &lt;code&gt;🧠+&lt;/code&gt;, ok just temporary remember it&lt;code&gt;403&lt;/code&gt; is for not enough access // &lt;code&gt;🧠++&lt;/code&gt;&lt;code&gt;418&lt;/code&gt; is for banned users // &lt;code&gt;🧠+++&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Frontend developers would (hopefully) introduce some kind &lt;code&gt;numeric status -&amp;gt; meaning&lt;/code&gt; dictionary on their side, so that subsequent generations of contributors wouldn't have to recreate this mapping in their brains.&lt;/p&gt;&lt;p&gt;Then QA engineers come into play: "Hey, I got &lt;code&gt;403&lt;/code&gt; status, is that expired token or not enough access?"
QA engineers can't jump straight to testing, because first they have to recreate the cognitive load that the engineers on the backend once created.&lt;/p&gt;&lt;p&gt;Why hold this custom mapping in our working memory? It's better to abstract away your business details from the HTTP transfer protocol, and return self-descriptive codes directly in the response body:&lt;/p&gt;&lt;code&gt;{
    "code": "jwt_has_expired"
}&lt;/code&gt;&lt;p&gt;Cognitive load on the frontend side: &lt;code&gt;🧠&lt;/code&gt; (fresh, no facts are held in mind)&lt;lb/&gt; Cognitive load on the QA side: &lt;code&gt;🧠&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The same rule applies to all sorts of numeric statuses (in the database or wherever) - prefer self-describing strings. We are not in the era of 640K computers to optimise for memory.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;People spend time arguing between&lt;/p&gt;&lt;code&gt;401&lt;/code&gt;and&lt;code&gt;403&lt;/code&gt;, making decisions based on their own mental models. New developers are coming in, and they need to recreate that thought process. You may have documented the "whys" (ADRs) for your code, helping newcomers to understand the decisions made. But in the end it just doesn't make any sense. We can separate errors into either user-related or server-related, but apart from that, things are kind of blurry.&lt;/quote&gt;&lt;p&gt;P.S. It's often mentally taxing to distinguish between "authentication" and "authorization". We can use simpler terms like "login" and "permissions" to reduce the cognitive load.&lt;/p&gt;&lt;p&gt;Do not repeat yourself - that is one of the first principles you are taught as a software engineer. It is so deeply embedded in ourselves that we can not stand the fact of a few extra lines of code. Although in general a good and fundamental rule, when overused it leads to the cognitive load we can not handle.&lt;/p&gt;&lt;p&gt;Nowadays, everyone builds software based on logically separated components. Often those are distributed among multiple codebases representing separate services. When you strive to eliminate any repetition, you might end up creating tight coupling between unrelated components. As a result changes in one part may have unintended consequences in other seemingly unrelated areas. It can also hinder the ability to replace or modify individual components without impacting the entire system. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;In fact, the same problem arises even within a single module. You might extract common functionality too early, based on perceived similarities that might not actually exist in the long run. This can result in unnecessary abstractions that are difficult to modify or extend.&lt;/p&gt;&lt;p&gt;Rob Pike once said:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;A little copying is better than a little dependency.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;We are tempted to not reinvent the wheel so strong that we are ready to import large, heavy libraries to use a small function that we could easily write by ourselves.&lt;/p&gt;&lt;p&gt;All your dependencies are your code. Going through 10+ levels of stack trace of some imported library and figuring out what went wrong (because things go wrong) is painful.&lt;/p&gt;&lt;p&gt;There's a lot of "magic" in frameworks. By relying too heavily on a framework, we force all upcoming developers to learn that "magic" first. It can take months. Even though frameworks enable us to launch MVPs in a matter of days, in the long run they tend to add unnecessary complexity and cognitive load.&lt;/p&gt;&lt;p&gt;Worse yet, at some point frameworks can become a significant constraint when faced with a new requirement that just doesn't fit the architecture. From here onwards people end up forking a framework and maintaining their own custom version. Imagine the amount of cognitive load a newcomer would have to build (i.e. learn this custom framework) in order to deliver any value. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;By no means do we advocate to invent everything from scratch!&lt;/p&gt;&lt;p&gt;We can write code in a somewhat framework-agnostic way. The business logic should not reside within a framework; rather, it should use the framework's components. Put a framework outside of your core logic. Use the framework in a library-like fashion. This would allow new contributors to add value from day one, without the need of going through debris of framework-related complexity first.&lt;/p&gt;&lt;p&gt;There is a certain engineering excitement about all this stuff.&lt;/p&gt;&lt;p&gt;I myself was a passionate advocate of Hexagonal/Onion Architecture for years. I used it here and there and encouraged other teams to do so. The complexity of our projects went up, the sheer number of files alone had doubled. It felt like we were writing a lot of glue code. On ever changing requirements we had to make changes across multiple layers of abstractions, it all became tedious. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Abstraction is supposed to hide complexity, here it just adds indirection. Jumping from call to call to read along and figure out what goes wrong and what is missing is a vital requirement to quickly solve a problem. With this architecture’s layer uncoupling it requires an exponential factor of extra, often disjointed, traces to get to the point where the failure occurs. Every such trace takes space in our limited working memory. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This architecture was something that made intuitive sense at first, but every time we tried applying it to projects it made a lot more harm than good. In the end, we gave it all up in favour of the good old dependency inversion principle. No port/adapter terms to learn, no unnecessary layers of horizontal abstractions, no extraneous cognitive load.&lt;/p&gt;&lt;p&gt;If you think that such layering will allow you to quickly replace a database or other dependencies, you're mistaken. Changing the storage causes lots of problems, and believe us, having some abstractions for the data access layer is the least of your worries. At best, abstractions can save somewhat 10% of your migration time (if any), the real pain is in data model incompatibilities, communication protocols, distributed systems challenges, and implicit interfaces.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;With a sufficient number of users of an API,&lt;/p&gt;&lt;lb/&gt;it does not matter what you promise in the contract:&lt;lb/&gt;all observable behaviors of your system&lt;lb/&gt;will be depended on by somebody.&lt;/quote&gt;&lt;p&gt;We did a storage migration, and that took us about 10 months. The old system was single-threaded, so the exposed events were sequential. All our systems depended on that observed behaviour. This behavior was not part of the API contract, it was not reflected in the code. A new distributed storage didn't have that guarantee - the events came out-of-order. We spent only a few hours coding a new storage adapter, thanks to an abstraction. We spent the next 10 months on dealing with out-of-order events and other challenges. It's now funny to say that abstractions helps us replace components quickly.&lt;/p&gt;&lt;p&gt;So, why pay the price of high cognitive load for such a layered architecture, if it doesn't pay off in the future? Plus, in most cases, that future of replacing some core component never happens.&lt;/p&gt;&lt;p&gt;These architectures are not fundamental, they are just subjective, biased consequences of more fundamental principles. Why rely on those subjective interpretations? Follow the fundamental rules instead: dependency inversion principle, single source of truth, cognitive load and information hiding. Your business logic should not depend on low-level modules like database, UI or framework. We should be able to write tests for our core logic without worrying about the infrastructure, and that's it. Discuss.&lt;/p&gt;&lt;p&gt;Do not add layers of abstractions for the sake of an architecture. Add them whenever you need an extension point that is justified for practical reasons.&lt;/p&gt;&lt;p&gt;Layers of abstraction aren't free of charge, they are to be held in our limited working memory.&lt;/p&gt;&lt;p&gt;Domain-driven design has some great points, although it is often misinterpreted. People say, "We write code in DDD", which is a bit strange, because DDD is more about the problem space rather than the solution space.&lt;/p&gt;&lt;p&gt;Ubiquitous language, domain, bounded context, aggregate, event storming are all about problem space. They are meant to help us learn the insights about the domain and extract the boundaries. DDD enables developers, domain experts and business people to communicate effectively using a single, unified language. Rather than focusing on these problem space aspects of DDD, we tend to emphasise particular folder structures, services, repositories, and other solution space techniques.&lt;/p&gt;&lt;p&gt;Chances are that the way we interpret DDD is likely to be unique and subjective. And if we build code upon this understanding, i.e., if we create a lot of extraneous cognitive load - future developers are doomed. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Team Topologies provides a much better, easier to understand framework that helps us split the cognitive load across teams. Engineers tend to develop somewhat similar mental models after learning about Team Topologies. DDD, on the other hand, seems to be creating 10 different mental models for 10 different readers. Instead of being common ground, it becomes a battleground for unnecessary debates.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;The problem is that familiarity is not the same as simplicity. They feel the same — that same ease of moving through a space without much mental effort — but for very different reasons. Every “clever” (read: “self-indulgent”) and non-idiomatic trick you use incurs a learning penalty for everyone else. Once they have done that learning, then they will find working with the code less difficult. So it is hard to recognise how to simplify code that you are already familiar with. This is why I try to get “the new kid” to critique the code before they get too institutionalised!&lt;/p&gt;&lt;p&gt;It is likely that the previous author(s) created this huge mess one tiny increment at a time, not all at once. So you are the first person who has ever had to try to make sense of it all at once.&lt;/p&gt;&lt;p&gt;In my class I describe a sprawling SQL stored procedure we were looking at one day, with hundreds of lines of conditionals in a huge WHERE clause. Someone asked how anyone could have let it get this bad. I told them: “When there are only 2 or 3 conditionals, adding another one doesn’t make any difference. By the time there are 20 or 30 conditionals, adding another one doesn’t make any difference!”&lt;/p&gt;&lt;p&gt;There is no “simplifying force” acting on the code base other than deliberate choices that you make. Simplifying takes effort, and people are too often in a hurry.&lt;/p&gt;&lt;p&gt;Thanks to Dan North for his comment.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;If you've internalized the mental models of the project into your long-term memory, you won't experience a high cognitive load.&lt;/p&gt;&lt;p&gt;The more mental models there are to learn, the longer it takes for a new developer to deliver value.&lt;/p&gt;&lt;p&gt;Once you onboard new people on your project, try to measure the amount of confusion they have (pair programming may help). If they're confused for more than ~40 minutes in a row - you've got things to improve in your code.&lt;/p&gt;&lt;p&gt;If you keep the cognitive load low, people can contribute to your codebase within the first few hours of joining your company.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Our architecture is a standard CRUD app architecture, a Python monolith on top of Postgres&lt;/item&gt;&lt;item&gt;How Instagram scaled to 14 million users with only 3 engineers&lt;/item&gt;&lt;item&gt;The companies where we were like ”woah, these folks are smart as hell” for the most part failed&lt;/item&gt;&lt;item&gt;One function that wires up the entire system. If you want to know how the system works - go read it&lt;/item&gt;&lt;/list&gt;&lt;p&gt;These architectures are quite boring and easy to understand. Anyone can grasp them without much mental effort.&lt;/p&gt;&lt;p&gt;Involve junior developers in architecture reviews. They will help you to identify the mentally demanding areas.&lt;/p&gt;&lt;p&gt;Maintaining software is hard, we would need every bit of mental effort we can save.&lt;/p&gt;&lt;p&gt;Imagine for a moment that what we inferred in the second chapter isn’t actually true. If that’s the case, then the conclusion we just negated, along with the conclusions in the previous chapter that we had accepted as valid, might not be correct either. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Do you feel it? Not only do you have to jump all over the article to get the meaning (shallow modules!), but the paragraph in general is difficult to understand. We have just created an unnecessary cognitive load in your head. Do not do this to your colleagues.&lt;/p&gt;&lt;p&gt;We should reduce any cognitive load above and beyond what is intrinsic to the work we do.&lt;/p&gt;&lt;head&gt;Comments&lt;/head&gt;&lt;p&gt;Rob Pike&lt;lb/&gt;Nice article.&lt;/p&gt;&lt;p&gt;Andrej Karpathy (ChatGPT, Tesla)&lt;lb/&gt;Nice post on software engineering. Probably the most true, least practiced viewpoint.&lt;/p&gt;&lt;p&gt;Elon Musk&lt;lb/&gt;True.&lt;/p&gt;&lt;p&gt;Addy Osmani (Chrome, the most complex software system in the world)&lt;lb/&gt;I've seen countless projects where smart developers created impressive architectures using the latest design patterns and microservices. But when new team members tried to make changes, they spent weeks just trying to understand how everything fits together. The cognitive load was so high that productivity plummeted and bugs multiplied.&lt;/p&gt;&lt;p&gt;The irony? Many of these complexity-inducing patterns were implemented in the name of "clean code."&lt;/p&gt;&lt;p&gt;What really matters is reducing unnecessary cognitive burden. Sometimes this means fewer, deeper modules instead of many shallow ones. Sometimes it means keeping related logic together instead of splitting it into tiny functions.&lt;/p&gt;&lt;p&gt;And sometimes it means choosing boring, straightforward solutions over clever ones. The best code isn't the most elegant or sophisticated - it's the code that future developers (including yourself) can understand quickly.&lt;/p&gt;&lt;p&gt;Your article really resonates with the challenges we face in browser development. You're absolutely right about modern browsers being among the most complex software systems. Managing that complexity in Chromium is a constant challenge that aligns perfectly with many of the points you made about cognitive load.&lt;/p&gt;&lt;p&gt;One way we try to handle this in Chromium is through careful component isolation and well-defined interfaces between subsystems (like rendering, networking, JavaScript execution, etc.). Similar to your deep modules example with Unix I/O - we aim for powerful functionality behind relatively simple interfaces. For instance, our rendering pipeline handles incredible complexity (layout, compositing, GPU acceleration) but developers can interact with it through clear abstraction layers.&lt;/p&gt;&lt;p&gt;Your points about avoiding unnecessary abstractions really hit home too. In browser development, we constantly balance between making the codebase approachable for new contributors while handling the inherent complexity of web standards and compatibility.&lt;/p&gt;&lt;p&gt;Sometimes the simplest solution is the best one, even in a complex system.&lt;/p&gt;&lt;p&gt;antirez (Redis)&lt;lb/&gt;Totally agree about it :) Also, what I believe is missing from mentioned "A Philosophy of Software Design" is the concept of "design sacrifice". That is, sometimes you sacrifice something and get back simplicity, or performances, or both. I apply this idea continuously, but often is not understood.&lt;/p&gt;&lt;p&gt;A good example is the fact that I always refused to have hash items expires. This is a design sacrifice because if you have certain attributes only in the top-level items (the keys themselves), the design is simpler, values will just be objects. When Redis got hash expires, it was a nice feature but required (indeed) many changes to many parts, raising the complexity.&lt;/p&gt;&lt;p&gt;Another example is what I'm doing right now, Vector Sets, the new Redis data type. I decided that Redis would not be the source of truth about vectors, but that it can just take an approximate version of them, so I was able to do on-insert normalization, quantization without trying to retain the large floats vector on disk, and so forth. May vector DBs don't sacrifice the fact of remembering what the user put inside (the full precision vector).&lt;/p&gt;&lt;p&gt;These are just two random examples, but I apply this idea everywhere. Now the thing is: of course one must sacrifice the right things. Often, there are 5% features that account for a very large amount of complexity: that is a good thing to kill :D&lt;/p&gt;&lt;p&gt;A developer from the internet&lt;lb/&gt;You would not hire me... I sell myself on my track record of released enterprise projects.&lt;/p&gt;&lt;p&gt;I worked with a guy that could speak design patterns. I could never speak that way, though I was one of the few that could well understand him. The managers loved him and he could dominate any development conversation. The people working around him said he left a trail of destruction behind him. I was told that I was the first person that could understand his projects. Maintainability matters. I care most about TCO. For some firms, that's what matters.&lt;/p&gt;&lt;p&gt;I logged into Github after not being there for a while and for some reason it took me to an article in a repository by someone that seemed random. I was thinking "what is this" and had some trouble getting to my home page, so I read it. I didn't really register it at the time, but it was amazing. Every developer should read it. It largely said that almost everything we've been told about programming best practices leads to excessive "cognitive load", meaning our minds are getting kicked by the intellectual demands. I've known this for a while, especially with the demands of cloud, security and DevOps.&lt;/p&gt;&lt;p&gt;I also liked it because it described practices I have done for decades, but never much admit to because they are not popular... I write really complicated stuff and need all the help I can get.&lt;/p&gt;&lt;p&gt;Consider, if I'm right, it popped up because the Github folks, very smart people, though that developers should see it. I agree.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45074248</guid></item><item><title>Bcachefs Goes to "Externally Maintained"</title><link>https://lwn.net/Articles/1035736/</link><description>&lt;doc fingerprint="2df3981fd8a75e9f"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Bcachefs goes to "externally maintained"&lt;/head&gt;
    &lt;p&gt; Posted Aug 29, 2025 17:30 UTC (Fri) by intelfx (subscriber, #130118) [Link] (39 responses) &amp;gt; This change also suggests, though, that the immediate removal of bcachefs from the mainline kernel is not in the cards. How would that work? If further changes are not accepted into mainline, but fs/bcachefs/ is not being removed thereof, then what exactly happens to it (the physical code living under that path)? Is it going to slowly bit-rot, with users being instructed to ignore in-tree code and use some other tree instead? Posted Aug 29, 2025 17:42 UTC (Fri) by zdzichu (subscriber, #17118) [Link] (38 responses) Posted Aug 29, 2025 19:21 UTC (Fri) by NYKevin (subscriber, #129325) [Link] (37 responses) But there are a number of unstated assumptions here. The most important problem is how this upstreaming process will work. I can think of a few different alternatives, but the most straightforward option is for Kent to designate somebody. That person would then be responsible for all interaction with the kernel process, including sending emails, responding to code reviews, changing the code as requested (or telling Kent to do so and relaying his responses), etc. This strikes me as a highly difficult and thankless job that I certainly would not want to do. You could easily end up recreating exactly the same argument that Kent was regularly getting into (over release schedules, merge windows, etc.), but by proxy instead of directly. Ideally, Kent stops caring about the kernel's release processes altogether, and takes a mindset of "the kernel is [designee's] problem, and I don't have to deal with it aside from applying a few patches every now and then." Most of the alternatives are worse. If we instead suppose that the kernel takes bcachefs code without Kent's explicit approval or involvement, then the kernel upstream is a de facto fork of bcachefs (or they're just mirroring him, but there are governance problems with that). I'm not convinced that Linus et al. want to maintain a fork in this situation. Posted Aug 29, 2025 22:11 UTC (Fri) by koverstreet (✭ supporter ✭, #4296) [Link] (36 responses) And release process is something I care deeply about, for the simple reason that I support my code. I respond to nearly all of the user bug reports and stare at the test dashboards; I want users to have the most stable and trustworthy code I can provide. Broken release process is exactly why bcachefs-tools isn't in Debian as well; the package maintainer who took it upon himself to package bcachefs-tools in Debian put project rules ahead of shipping working code, then broke the build and sat in it - and I got stuck with the bug reports. So I'm equally curious where we go from here, I'm no more in the loop than anyone else. Exciting times, as the Chinese proverb says. Posted Aug 30, 2025 4:57 UTC (Sat) by NYKevin (subscriber, #129325) [Link] (3 responses) The distros are downstreams. If they want to package and ship your code, in whatever way they see fit, you've already given them permission to do so. And they are not shy about exercising that permission. I remember several years ago, jwz asked Debian to stop shipping XScreenSaver, because he disagreed with their practice of backporting fixes to old versions. Debian said no, and XScreenSaver is still in the repository today. As you might imagine, some rather harsh words were exchanged, but in the end, both sides went back to their respective corners of the internet and proceeded to mostly ignore each other. Linus, however, is not in the business of playing that game. If there's nobody actively maintaining (his copy of) bcachefs, then I find it hard to believe it's going to be allowed to stick around indefinitely. &amp;gt; So I'm equally curious where we go from here, I'm no more in the loop than anyone else. Exciting times, as the Chinese proverb says. My interpretation of events is that there are only three long-term paths that make sense here: * You accept that you cannot control what appears in Linus's tree, but would prefer that some recent-ish version of bcachefs is there (as opposed to no bcachefs or a very old bcachefs). You designate somebody as I've described upthread, they upstream patches at whatever rate Linus is willing to take them, and everybody is more or less willing to live with the result. I do not see any plausible outcome where you are allowed to control what appears in Linus's tree. He has very explicitly closed the door on that. For expository purposes, and because you are a functioning adult, I have assumed that you will accept this lack of control, but that does not actually matter - one of the above scenarios will inevitably play out, regardless of your opinion of it. The only choice you have at this point is whether it's the first bullet or one of the other two. I do not say this to be cruel. Based on your words in this and other threads, I genuinely believe that this process has been very painful for you, and I doubt you enjoy being reminded that Linus's tree does, in fact, belong to Linus (I'm sure other developers have screamed that at you enough times by now). Unfortunately, this is not a matter of right or wrong. It is a matter of power. You are aggrieved about something that neither Linus, nor anybody else on LKML, is prepared to recognize as an injury to you. Regardless of whether that is the right way or the wrong way of looking at it, Linus is going to conduct the kernel's release cycle as he sees fit. The *healthy* way of looking at it is to accept that that is not within your power to change, and redirect your attention to the things you can change. Posted Aug 30, 2025 16:30 UTC (Sat) by ttuttle (subscriber, #51118) [Link] Posted Aug 30, 2025 20:48 UTC (Sat) by linuxrocks123 (subscriber, #34648) [Link] (1 responses) But I disagree with him that you should focus any attention on that. The healthiest way to approach life is not to try to control what other people do, nor to think about what they might do in response to what you do. Rather, the healthiest approach to life, and the only way to be spiritually free in life, is to do whatever you want to do, so long as what you want to do is both legal and ethical. What other people may or may not do in response to that is their own problem, because, as long as what you are doing is legal, they can't make it your problem. (Unless you let them, so don't let them.) Applying that philosophy to this situation, I think you should just shrug, ignore Linus, and wash your hands of the in-tree version of bcachefs. The in-tree version of the code is what someone else is doing, not what you're doing, so it's not your problem. DKMS will work fine for you. Btw, I have a question for you, because I am interested in bcachefs but have not tried it yet. What I want out of my filesystem is as much speed as possible: because I have backups, I have no concern about data integrity after an unclean shutdown. I currently use ext4 with no journaling and the following knobs set in sysctl.conf: vm.dirty_ratio = 90 I also have libeatmydata.so listed in ld.so.preload to make sure programs can't override my preference for speed by calling fsync(). Given my preferences, would you recommend bcachefs for me over my current ext4-based setup, and, if so, how could I configure bcachefs for my desired speed versus integrity tradeoff? Thanks for any help. Posted Aug 30, 2025 23:41 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] Yup, agreed 100%. My goal is to develop a bulletproof modern filesystem that people can depend on; I said even before bcachefs was merged that I'm not going to let kernel drama take over my life, so I'm OK with bcachefs shipping as a DKMS module. But if you look at where this leaves Linux for filesystems, it is a sad state of affairs. XFS has been burning through maintainers; they're on their third, and it's not good for a project to be losing that continuity of leadership and experience, and "upstream burnout" (read: working with Linus) was the major factor, from speaking with them. btrfs is still eating filesystems - they may be better than they were, but I still see reports regularly, and they don't seem to be taking reliability seriously. It's starting to look like the Linux filesystem world in general is imploding, and at this point all I can do is put on a good pair of running shoes and hope DKMS works out. &amp;gt; Btw, I have a question for you, because I am interested in bcachefs but have not tried it yet. What I want out of my filesystem is as much speed as possible: because I have backups, I have no concern about data integrity after an unclean shutdown. I currently use ext4 with no journaling and the following knobs set in sysctl.conf: If speed is all you want you might not want to run bcachefs yet. On the one hand, benchmarks don't tell the whole story - I've had a lot of users tell me that things do feel more responsive on bcachefs than btrfs, but there are definitely areas where we're slower than we should be (e.g. journalling overhead is higher than it should be, and I have WIP stuff for that) and still some outright performance bugs to chase down. But robustness and reliability is waaaaaay more of a priority for me than performance, and the userbase seems to be more interested in erasure coding and the management stuff than performance, so it'll be awhile before I'm working on performance in earnest. Posted Aug 30, 2025 7:57 UTC (Sat) by paravoid (subscriber, #32869) [Link] (28 responses) Debian was not even close to the topic at hand, and yet you felt the need to bring it up, just to attack someone, and with information that is misrepresenting the truth. This is something you've done before, and you were very recently called out in lkml for it. Stop. To correct the record: bcachefs-tools is not in Debian because Kent was impossible to work with and personally attacked, smeared and/or alienated multiple sets of distinct contributors that attempted to work with him in good faith, one after another. It was ultimately removed from unstable because noone was able to get through. Source: I am one of them. Posted Aug 30, 2025 11:44 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (13 responses) He did so anyways, and then swapped out bindgen for an old version that was explicitly unsupported according to the Cargo.toml, which broke the build, and he sat on it and Debian users stopped getting updates (I didn't even see a report until months later). This resulted in users being unable to access their filesystems. There was briefly a buggy version of bcachefs-tools that couldn't pass mount options correctly; users in every other distro got a fix quickly, but Debian users did not - and we found out about this when a lot of users weren't able to mount in degraded mode after having a drive die. What you're doing is conflating technical criticism with personal, and then using that as an excuse to ramp up the drama. Technical criticism, including pointing out failures of processes, has to be ok for engineering to function, otherwise we don't learn from our mistakes. That can make for a harsh learning environment, but when you're shipping critical system components that have to work, that's what you signed up for; we have responsibilities. The person in question was warned explicitly that what he was doing was a bad idea; he could have at any point said "this is too complicated an issue for me to handle; I'll let someone else take this one" (and there are mechanisms in Debian process for obtaining exceptions to process rules that could have avoided this, by simply skipping the Rust dependency unbundling with a clear explanation of why); he ignored advice and plowed ahead, and a lot of people were affected by those actions. When we work on this kind of code, we have to be responsible for the work we do, including our mistakes. Posted Aug 30, 2025 14:25 UTC (Sat) by ma4ris8 (subscriber, #170509) [Link] (12 responses) Listen part: I'm trying to repeat roughly the same as you wrote above, to show that I listened you: First you state that maintainer switched Rust dependencies for the packaged versions from Debian. He changed Rust dependencies anyways, and then swapped out bindgen into older version, Important end question: Did I repeat (re-phrase in text) precisely what you wrote? Answer part: For me it sounds like there were some mistakes done by both you and others. How to communicate (listen) effectively, to heal relationships? This way of listening is mentioned in What I showed, is one way to restore human relationships, with Linus and others: If you get a backslash, you was just given an opportunity to listen the complaint. By doing this just very slightly to not burden others, I've seen that sometimes this listening technique helps on-line, in addition of meeting face to face. Posted Aug 30, 2025 18:21 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (11 responses) Why are you trying to bothsides this? You seem to have the facts straight, but I'm not at all clear on what you think I did wrong. All this was explained clearly, calmly and patiently to the Debian package maintainer when he started; he decided to do it his way, and when the breakage became apparent I asked if he was going to fix it and he just said "nope, too complicated" and walked off. So I got stuck with warning bcachefs users away from Debian, and he wrote a screed of a blog post about how impossible I am to work with. Sorry, but from where I sit that just looks crazy. I'm all about focusing on the human aspect, sitting down with people and having open and honest conversations. I do that regularly, and believe me I and others have tried ratcheting down the tensions, bringing the focus back to the technical and looking for ways to make this easier and take things in little steps. The whole rest of the 6.16 merge cycle after the journal_rewind fiasco was just that, from myself and others; we've tried to bridge the gap, bring the focus back to the technical, look for ways to make things work - it doesn't seem to be getting us anywhere. Posted Aug 30, 2025 21:00 UTC (Sat) by josh (subscriber, #17465) [Link] (10 responses) You don't demonstrate any degree of understanding of why requirements other than your own matter. You talk about what the Debian maintainer did, and how you told them not to. You don't talk about why those requirements exist and what you did to help them meet those requirements. You act like the story begins and ends with "I told them no and they didn't obey". This is on par with what happens with the Linux kernel. You don't demonstrate and communicate that you understand requirements other than your own and place weight on them. You just act like they're obstacles to getting *your* requirements met, and try to work around them. Posted Aug 30, 2025 21:48 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (9 responses) It's not "he didn't obey", it's "he did something stupid that I warned him was a bad idea and then he didn't stick around to resolve the situation and a has to deal with the fallout". It's not an authority thing, it's just about making good decisions being responsible for your decisions. Posted Aug 30, 2025 22:09 UTC (Sat) by josh (subscriber, #17465) [Link] (6 responses) Package upstreams vs Debian process typically ends with "your package is not more important than our consistency"; that is a reliably predictable outcome. If you want to *change* Debian process or policy, that's a conversation that requires a detailed case for doing so, which requires understanding of why the requirements are what they are, not just why you want them to be different. Posted Aug 30, 2025 22:43 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (5 responses) Posted Aug 31, 2025 1:29 UTC (Sun) by comex (subscriber, #71521) [Link] (4 responses) (1) In April 2024, Debian unstable was shipping too-old versions of some packages. In particular, bcachefs-tools wanted bindgen 0.69.4 (released upstream 2 months prior), while Debian unstable was shipping 0.66.1 (released upstream 8 months prior). (2) In April 2024, Debian unstable was shipping too-*new* versions of some packages. In particular, bcachefs-tools wanted rust-errno 0.2.x, while rust-errno 0.3.0 had released upstream 14 months prior, and Debian unstable was shipping 0.3.8. (3) Despite these conflicts happening in Debian unstable, the Debian maintainer seemed more concerned about how bcachefs-tools would be maintained in the future in Debian stable. To me these seem like three different problems with three different solutions. (1) If Debian unstable was shipping old versions of some dependencies, then Debian should have updated those packages. Perhaps other dependents would have broken with newer versions of the dependencies, but AFAICT there was no specific evidence of this. 2 months (the age of bindgen 0.69.4 at the time) sounds to me like a reasonable lead time for a dependency. If Debian’s processes make it too hard to update Rust packages at a reasonable pace *in unstable*, then maybe they need to be changed, but I don’t know whether that’s true or whether the issue was something else; perhaps the maintainer's stated lack of experience with Rust packaging. (2) If bcachefs-tools was depending on old versions of some packages, then bcachefs-tools should have been updated. The maintainer could have submitted a PR upstream. That would be easier said than done if this were something like Kubernetes [2], but in this case the blog post only cited 2 packages that needed to be updated. As for (3), I don’t fully understand the problem. Debian stable freezes the entire set of packages. That includes the Rust packages, but also bcachefs-tools and the kernel. Some Linux distros have “hardware enablement” branches where they upgrade the kernel separately from the rest of the system, but AFAIK Debian does not. So why would someone maintaining bcachefs-tools on stable care what is happening upstream? Overall - I'm sure there are some factors I'm missing. But every time I've seen this come up, even the knowledgeable commenters seem to smoosh the issue into "bcachefs-tools is not stable enough for Debian", and to me that really seems like an oversimplification and misunderstanding. Does anyone have additional light to shed? Sources: Posted Aug 31, 2025 1:49 UTC (Sun) by koverstreet (✭ supporter ✭, #4296) [Link] (3 responses) bcachefs-tools updates probably can't follow the Debian "hard freeze for two years" model, and this comes up in other critical system packages, too. _Maybe_ they can, but it's too early to be making those kinds of assumptions and locking us down any particular path. The big concern is that just because a user is running Debian stable they may be running a newer kernel (for drivers, generally), and we want bcachefs-tools to be in sync with the kernel. It's not strictly necessary, we have more compat options than other filesystems (due to in-kernel repair being first class), but it puts us in an uncomfortable situation. Debian may not have official "hardware enablement", but it's still commonplace to pull in a newer kernel from a different channel, and that's expected to work. The kernel has hard requirements about not breaking userspace for exactly the same reason; bcachefs takes the same approach. Upgrades and downgrades should always work; that's a huge part of what we've been working through in the experimental phase. If we have to ship/backport a new bcachefs-tools for Debian stable users, unbundling Rust dependencies at all completely breaks that. But the bigger point is that it's too early to even know what backports are going to like for bcachefs, and we don't want to be in Debian stable at all yet. _But_, for the people in Debian and are running bcachefs now, they still need a supported and working filesystem and process for shipping bugfixes. That's the issue that needs to be solved today for any Debian users to be running bcachefs, not "how do we support Debian stable users for the non-experimental version of bcachefs that will be getting backports and doesn't even exist yet". The other big thing to note that makes debundling really problematic is that Debian is not the only distro. If other distros were unbundling (thank god we got Fedora to agree not to), and their Rust library versions are not in sync - see where that puts us? The last think I want is to get sucked into dealing with is different distros with different conflicting library requirements. It's not the end of the world for things like rust-errno; I would have groaned at that one, but swapping that one out for a different version is unlikely to cause real breakage. Bindgen, OTOH - FFI stuff has the very real potential to introduce the nastiest sort of heisenbugs which won't be caught by the compiler (they have happened and they are _not_ fun), and even I wouldn't trust my test coverage to catch all of those - and Debian does not replicate that testing. Swapping out bindgen was actively dangerous, and never should have even been attempted. I specifically told the Debian package maintainer that that one was dangerous to change, and he did it anyways... Posted Aug 31, 2025 2:11 UTC (Sun) by koverstreet (✭ supporter ✭, #4296) [Link] (1 responses) We had another example of that from just yesterday: Arch flipped on LTO, and it turns out that produces a miscompilation, because the final link is now done by rustc which has different rules than C code about eliding bounds checks. This one was minor, it just caused the progress indicators on data jobs to display incorrectly, but it's quite the scary bug. If distros want to make these changes (and LTO is a perfectly fine thing in principle), we really want them contributed upstream so they can get proper testing and QA. Posted Aug 31, 2025 3:40 UTC (Sun) by jmalcolm (subscriber, #8876) [Link] Seems very reasonable Posted Aug 31, 2025 3:47 UTC (Sun) by jmalcolm (subscriber, #8876) [Link] Thank you for this. In my experience you have succeeded. &amp;gt; bcachefs-tools updates probably can't follow the Debian "hard freeze for two years" model Agreed. In a distro like Debian, I do not see how you adopt something like bcachefs until bcachefs itself has stabilized enough to flow into Debian Stable. If you are going to try, you have to be getting the kernel and userland from outside of Debian. &amp;gt; it's still commonplace to pull in a newer kernel from a different channel, and that's expected to work Sure. But when there is a userspace component, a "working" kernel is not enough. Posted Aug 30, 2025 22:10 UTC (Sat) by lordsutch (guest, #53) [Link] (1 responses) If an upstream doesn't want to play by Debian's rules or thinks the release process is too slow, they can set up their own package repository. Posted Aug 30, 2025 23:42 UTC (Sat) by pizza (subscriber, #46) [Link] I'm sorry, but if "the distribution's rules" result in the distributed package being so broken that it directly leads to user data loss, then those rules are not fit for purpose. Fortunately for Debian, "the rules" provide a mechanism for exceptions where necessary. If a major data loss bug isn't sufficient to qualify for a necessary exception, then I repeat myself about those rules not being fit for purpose. Posted Aug 30, 2025 12:24 UTC (Sat) by muase (subscriber, #178466) [Link] (11 responses) I know it's not the distros' fault; it's simply how LTS has to work in practice – however I can understand the frustration that arises if there seems to be an opportunity to finally update a package(set)... and then that opportunity is missed, and now the dev knows that they have to endure those obsolete bug reports for another n-year release cycle. It definitely didn't read as "just to attack someone". &amp;gt; To correct the record: bcachefs-tools is not in Debian because Kent was impossible to work with and personally attacked, smeared and/or alienated multiple sets of distinct contributors that attempted to work with him in good faith, one after another. Tbh, the only personal attack I see here is from you; and as an outsider, this is not very informative – your frustration may be absolutely legit, but this reply doesn't suit your case. If the communication is public, do you have a link or something? :) Posted Aug 30, 2025 18:27 UTC (Sat) by paravoid (subscriber, #32869) [Link] (10 responses) Kent in https://lore.kernel.org/linux-bcachefs/wona7sjqodu7jgchtx... called part of a maintainer's job as "bullshit, make-work job", told Debian to "develop a better and more practical minded attitude" and to "stop wasting my time with this stupid bullshit and I can get back to real work". The issues we had spent a lot of our volunteer time to fix were very real issues, many of them upstream, and one in the Rust ecosystem. At the time this was sent, all issues were fixed, or were on the way to be fixed, and a recent bcachefs-tools package with all of the appropriate dependencies was a few weeks away from getting to Debian testing. bcachefs-tools was orphaned by its maintainer a few weeks later; myself and another contributor (the two of us had done all recent advancements), stopped investing our time as well. The package has remained orphaned since, for about a year. Anyone can pick it up, but noone has, and that's not because of technical difficulties (as far as packages go, it's pretty trivial). As an aside, the very existence of this thread was as a "PSA" to his users to avoid Debian and Fedora, telling them that "you'll want to be on a more modern distro". *Two weeks later*, he responded in https://lore.kernel.org/lkml/nxyp62x2ruommzyebdwincu26kmi... to Linus that he expects the "major distros" to pick up bcachefs soon. Whether he was dishonest or just naive, I'll leave that to your judgement. The above was just a small sample. There were literally dozens of responses of this style at time, random offensive comments etc., across multiple mediums (mailing lists, IRC, Reddit, etc.). I am not keeping a file though, as I don't feel the need to convince anyone with hard evidence. You don't know me, and I understand that my opinion may not be of much value to you. I hope, though, that you and others may see this as one tiny part of a broader pattern of countless long-time contributors across multiple projects expressing that they have been alienated and driven away by Kent's conduct and sense of entitlement, and that they have good reasons for it. Posted Aug 30, 2025 19:20 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (9 responses) But please do try to put yourself in my shoes; that was after getting a bunch of bug reports from Debian users, and there had been a _lot_ of fail at that point in how the Debian packaging was handled. I do have to reiterate: the unbundling of Rust dependencies should not have happened for bcachefs-tools, there was no technical reason for that, all my explanations were met with "but that's our policy", and no amount of reasoning was getting anywhere; and the Debian packager breaking the build and sitting on it just should not have happened. I do sincerely hope you can analyze how things went from the other end and ask yourself what could have been done better to avoid this, because from my end, this was an intensely frustrating issue, and it wasn't being taken seriously and it had very real effects. Before you start focusing on language and diplomacy, you really need ask yourself if the technical decisionmaking leading up to that point was sound. When we get breakage as bad as what happened with the Debian package, you can expect the kind of frustration I was voicing there, and "bullshit, make-work projects" still seems to accurately describe what Debain's been doing with Rust dependency unbundling. When we're dealing with critical system components, you cannot focus just on language and diplomacy and ignore the decisionmaking; that's ignoring our most basic responsibilities. Posted Aug 30, 2025 21:17 UTC (Sat) by josh (subscriber, #17465) [Link] (8 responses) No, you really don't. There is no universe in which the things you said produced useful outcomes. The fact that they resulted in someone deciding they no longer wish to work with you or put work into being the downstream maintainer of your software is an *unsurprising outcome*. &amp;gt; When we're dealing with critical system components, you cannot focus just on language and diplomacy and ignore the decisionmaking; that's ignoring our most basic responsibilities. You also cannot completely neglect language and diplomacy and understanding other people's requirements, either, as you absolutely did in the messages being quoted here. Your words will produce responses and actions from others. No amount of wishing things were different will enable you to say things that will predictably produce undesired actions and then have a leg to stand on when being annoyed that those predictable responses and actions happen. Your words are a lever to be used, just like your code. Write the words that produce the results you want, and if you want to be happier, learn to not resent that as a means of effecting change. To be clear: the words have to actually match the actions. You can't *just* say the right words but then have them mismatch your actions; down that path you'd find people whose words and truth lack even a passing familiarity. But it's important to, for instance, give people confidence that you care about the requirements they deal with, in some fashion *other* than "what windmill can I burn down so that you don't have to meet those requirements anymore and can do what I want instead". Posted Aug 30, 2025 22:29 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (7 responses) Maybe you guys should just admit there was a screw up so we can all move on? Posted Aug 30, 2025 22:35 UTC (Sat) by josh (subscriber, #17465) [Link] (4 responses) Posted Aug 30, 2025 22:41 UTC (Sat) by josh (subscriber, #17465) [Link] Posted Aug 30, 2025 22:48 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (2 responses) Do you have a rebuttal? I'd love to hear it. Posted Aug 31, 2025 0:40 UTC (Sun) by SLi (subscriber, #53131) [Link] (1 responses) You keep saying "there are no technical reasons" as if that made it true. They may or may not be the best rules, but they are there for a reason. If you think distro maintainers change version bounds on packages for no reason other than to annoy upstreams, that alone should be a big hint telling you that you probably don't understand something. Or want to understand. I'm not sure which is more true nor which is more flattering. Posted Aug 31, 2025 3:37 UTC (Sun) by ben0x539 (guest, #119600) [Link] Posted Aug 30, 2025 22:39 UTC (Sat) by josh (subscriber, #17465) [Link] If your inclination is to believe this is *in any way* a question that should be redirected into an exploration of your specific requirements that you believe you were right about, you have missed the point. Posted Aug 30, 2025 22:51 UTC (Sat) by sheepdestroyer (guest, #54968) [Link] Posted Aug 31, 2025 3:34 UTC (Sun) by jmalcolm (subscriber, #8876) [Link] (1 responses) I have been critical of Kent so let me defend him here. My understanding of the issue with bcachefs-tools in Debian was that bcachefs required a newer version of Rust than Debian wanted. This is a technical issue and being uncompromising on a technical issue is completely different than a philosophical or process issue. Also, bcachefs is hardly the only project that has had dependency issues with Debian. For all its benefits, Debian is poorly suited to new and evolving technologies (in my view at least). Look at Wayland in Debian vs other distros for another example. Even Debian 13 ships with NVIDIA drivers that lack explicit sync which means Wayland will still not work for many people despite working well in other distros for some time already. I am on Kent's side here. &amp;gt; Debian was not even close to the topic at hand, and yet you felt the need to bring it up Posted Aug 31, 2025 3:41 UTC (Sun) by koverstreet (✭ supporter ✭, #4296) [Link] Well, if I didn't bring it up someone else always does in these discussions. I've never named names and I haven't been lobbing personal attacks, I'm just talking about the process issues bcachefs has faced, and there's a real common thread between that one and the kernel issues. Posted Aug 30, 2025 17:12 UTC (Sat) by DemiMarie (subscriber, #164188) [Link] (1 responses) For anything that has to happen before the filesystem can be accessed at all, it might make sense to have an option for the userspace mount helper to do the work. In this case, the userspace helper has far fewer disadvantages I know of. My dream would be for bcachefs to have SQLite’s level of testing and input validation, or (even better) formal verification. Either would massively reduce the rate of bugs making it into a release, but neither is reasonable to ask for outside of a suitably-priced commercial engagement. Posted Aug 30, 2025 22:24 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] The way I use assertions does heavily mimic what you'd do with dependent types, though. My primary approach to reliability is instead to mainly focus on debugability: you can't debug what you can't see, but if you can see everything the system is doing, at runtime, in production, debugging is easy. Also note that filesystems are in a different boat from SQLite, because we have to be able to recover from arbitrary outside damage. If your repair is bulletproof, that makes everything else easier: most bugs are not things you have to lose sleep over. Posted Aug 30, 2025 18:53 UTC (Sat) by ATLief (subscriber, #166135) [Link] That’s entirely expected given the circumstances; if longstanding Linux developers collectively don’t want to work with you, then they wouldn’t want to individually work with you either. Posted Aug 29, 2025 17:38 UTC (Fri) by ahippo (subscriber, #154692) [Link] (5 responses) This one works better for me somehow: Posted Aug 29, 2025 17:50 UTC (Fri) by Poliorcetics (subscriber, #165001) [Link] (3 responses) Posted Aug 29, 2025 18:39 UTC (Fri) by ewen (subscriber, #4772) [Link] (Looks like a fairly recent fix too — post is 2025-08-28 — so might take a while for the fix to roll out.) Ewen Posted Aug 29, 2025 19:03 UTC (Fri) by ahippo (subscriber, #154692) [Link] (1 responses) Posted Aug 29, 2025 21:03 UTC (Fri) by alspnost (guest, #2763) [Link] Posted Aug 30, 2025 13:17 UTC (Sat) by Baughn (subscriber, #124425) [Link] I can’t access Anubis-protected pages on my iPad. They take several minutes to pass the test, assuming it doesn’t overheat first. Posted Aug 29, 2025 17:39 UTC (Fri) by JMB (guest, #74439) [Link] (4 responses) And I am hoping that quality of code is still key ... And it is unfortunately connected to the 'external maintenance' Posted Aug 29, 2025 17:47 UTC (Fri) by zdzichu (subscriber, #17118) [Link] (3 responses) Posted Aug 30, 2025 0:28 UTC (Sat) by josh (subscriber, #17465) [Link] (2 responses) Posted Aug 30, 2025 5:17 UTC (Sat) by awilfox (guest, #124923) [Link] Posted Aug 31, 2025 0:58 UTC (Sun) by SLi (subscriber, #53131) [Link] Posted Aug 29, 2025 18:13 UTC (Fri) by mb (subscriber, #50428) [Link] (2 responses) &amp;gt;the immediate removal of bcachefs from the mainline kernel is not in the cards. What? Please just remove it instead of leaving code in the mainline that doesn't receive fixes for known bugs any longer. Posted Aug 29, 2025 18:49 UTC (Fri) by tux3 (subscriber, #101245) [Link] One could still hope for things to resolve differently. Perhaps some other way or other person is found to keep patches flowing. I'm not holding my breath, but there'll be plenty of time to delete things if and when that's what it comes down to. Posted Aug 29, 2025 22:47 UTC (Fri) by hailfinger (subscriber, #76962) [Link] Posted Aug 29, 2025 21:36 UTC (Fri) by birdie (guest, #114905) [Link] Posted Aug 30, 2025 22:01 UTC (Sat) by julian67 (guest, #99845) [Link] (1 responses) Posted Aug 30, 2025 23:44 UTC (Sat) by pizza (subscriber, #46) [Link] You left out "if you do nothing, the people you claim to care for have already lost, and you still get blamed." Posted Aug 30, 2025 22:33 UTC (Sat) by sheepdestroyer (guest, #54968) [Link] (1 responses) Posted Aug 31, 2025 0:41 UTC (Sun) by willy (subscriber, #9762) [Link] Posted Aug 31, 2025 1:01 UTC (Sun) by SLi (subscriber, #53131) [Link] &lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;lb/&gt; &amp;gt;&lt;lb/&gt; &amp;gt; Broken release process is exactly why bcachefs-tools isn't in Debian as well; the package maintainer who took it upon himself to package bcachefs-tools in Debian put project rules ahead of shipping working code, then broke the build and sat in it - and I got stuck with the bug reports.&lt;lb/&gt; * You accept that you cannot control what appears in Linus's tree, and decide to cease all engagement with him and the rest of the kernel folks. They continue to ship an old bcachefs for (at least) the rest of the current release cycle, but eventually it bitrots and they delete it. You might or might not choose to ship it out-of-tree like ZFS, and various distros might or might not package some version of it for you (whether you want them to or not).&lt;lb/&gt; * You accept that you cannot control what appears in Linus's tree, and decide to cease all engagement with him and the rest of the kernel folks. They fork bcachefs or mirror it from your out-of-tree version, and slightly-old or modified versions continue to appear in the kernel indefinitely. As I explained, I think this is less likely, but I don't want to entirely discount it.&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;lb/&gt; vm.dirty_background_ratio = 50&lt;lb/&gt; vm.dirty_expire_centisecs = 360000&lt;lb/&gt; vm.dirty_writeback_centisecs = 60000&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;lb/&gt; I hope that you get my point of listening well in order to carefully heal the relationships.&lt;lb/&gt; You explained that it was a bad idea, for multiple reasons: statically linked dependencies, and&lt;lb/&gt; invalidating all your active testing.&lt;lb/&gt; which broke the build for Debian, and file system users stopped getting updates.&lt;lb/&gt; You wrote many items into one message. I answered only for the first one,&lt;lb/&gt; to keep the answer small enough. Some progress, but further messages&lt;lb/&gt; could increase coverage.&lt;lb/&gt; The unfortunate end result was, that Debian users had problems with the bug.&lt;lb/&gt; I didn't get from your message, the outcome of the relationships between persons:&lt;lb/&gt; whether personal relationships were worsened, stayed the same, or healed in the&lt;lb/&gt; end (each relation individually).&lt;lb/&gt; https://www.verywellmind.com/what-is-active-listening-302...&lt;lb/&gt; "Paraphrasing and reflecting back what has been said"&lt;lb/&gt; ( Those who know psychology, know these things ).&lt;lb/&gt; You could try to restore relationships with just listening others. Choose carefully&lt;lb/&gt; messaging cases, in which you think that you won't cause much backslash,&lt;lb/&gt; but you could have progress with healing the relationship by listening to the other.&lt;lb/&gt; Repeat in nearly the same words the whole complaint, &lt;lb/&gt; so that the other one feels of being heard fully.&lt;lb/&gt; Try to at least have progress, thus please listen carefully the mentioned&lt;lb/&gt; complaint by repeating it. You can have pauses, like answering another day, to reduce the burden.&lt;lb/&gt; Please don't open up any new problems. If you do (I do mistakes sometimes),&lt;lb/&gt; and get a backslash as a heated answer, please listen and repeat it carefully,&lt;lb/&gt; to reduce the impact.&lt;lb/&gt; you could both improve your communication skills,&lt;lb/&gt; and perhaps others could learn from it too,&lt;lb/&gt; and perhaps then relations with other stakeholders, like maintainers,&lt;lb/&gt; and Linus, could be restored into a level that you can co-operate efficiently together again.&lt;lb/&gt; I'm trying to improve my communicating skills in the contexts of&lt;lb/&gt; change management for "OWASP top 10", and AI adoption.&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;Debian&lt;/head&gt;&lt;lb/&gt; [1]: https://jonathancarter.org/2024/08/29/orphaning-bcachefs-...&lt;lb/&gt; [2]: https://lwn.net/Articles/835599/&lt;lb/&gt; For version history:&lt;lb/&gt; https://crates.io/crates/bindgen/versions?sort=semver&lt;lb/&gt; https://tracker.debian.org/pkg/rust-bindgen-cl&lt;head&gt;Debian&lt;/head&gt;&lt;head&gt;Debian&lt;/head&gt;&lt;head&gt;Debian&lt;/head&gt;&lt;head&gt;Debian&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;lb/&gt; Absolutely. Even in a thread where the discussion was explicitly about how nice it is to see people taking the high road, Kent waltzes in and starts lobbing grenades. He is a passionate curator of other people's faults but I have never seen him confess to his own--even when confronted with significant evidence. If there is a problem, the blame lies elsewhere by definition in his world. Watching him burn the bridges that allow me to use bcachefs and then claiming to care about his users has really started to rub me the wrong way. Do what you want but stop telling us your choices are other people's fault. Kent fights for one person. That is more of a passion for him than his filesystem and that sucks (for me). Kent is the scorpion to my frog.&lt;lb/&gt; Bcachefs is a pretty great filesystem. I wish I could keep using it.&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;A few suggestions (which you don’t have to follow)&lt;/head&gt;&lt;head&gt;A few suggestions (which you don’t have to follow)&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;A broken link?&lt;/head&gt;&lt;lb/&gt; https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/...&lt;head&gt;A broken link?&lt;/head&gt;&lt;head&gt;A broken link?&lt;/head&gt;&lt;head&gt;A broken link?&lt;/head&gt;&lt;lb/&gt; Thank you for pointing me to that blog post!&lt;lb/&gt; My phone indeed has an odd number of cores.&lt;head/&gt; Fascinating - this is a whole new thing to me, but I guess I'm also "vulnerable", since I have a Pixel 8 Pro with 9 cores! &lt;head&gt;A broken link?&lt;/head&gt;&lt;head&gt;A broken link?&lt;/head&gt;&lt;head&gt;FS code quality of Linux seems not to be as one would wish for ...&lt;/head&gt;&lt;lb/&gt; Maybe the E-Mail has a typo ... b -&amp;gt; v ???&lt;lb/&gt; but when 6.15 is EoL and one is recommended to change to 6.16&lt;lb/&gt; just before a version with just ext4 bugs fixed ... and still further&lt;lb/&gt; ext4 bugs fixed after that ... it seem to be a general problem of&lt;lb/&gt; quality concerning Linux FSs / automatic testing not in good shape.&lt;lb/&gt; which is the topic here.&lt;head&gt;FS code quality of Linux seems not to be as one would wish for ...&lt;/head&gt;&lt;head&gt;FS code quality of Linux seems not to be as one would wish for ...&lt;/head&gt;&lt;head&gt;FS code quality of Linux seems not to be as one would wish for ...&lt;/head&gt;&lt;head&gt;FS code quality of Linux seems not to be as one would wish for ...&lt;/head&gt;&lt;head&gt;Why not removed?&lt;/head&gt;&lt;lb/&gt; This is the most harmful (to the users) thing that could have been done now.&lt;head&gt;Why not removed?&lt;/head&gt;&lt;head&gt;Why not removed?&lt;/head&gt;&lt;lb/&gt; 1. Minimal result: Users can continue to use bcachefs with newer kernels without having to patch the kernel, they just won't get bug fixes, but there will be no functional regression&lt;lb/&gt; 2. Improvement with some effort by users: Users willing to patch the kernel can still apply any patches provided by Kent&lt;lb/&gt; 3. Optimal result: A unicorn with the ability to work with Linus and Kent at the same time may appear, resulting in fixes from Kent being merged with the timing and criteria wanted by Linus&lt;head&gt;Not so bad&lt;/head&gt;&lt;head&gt;Winning the battles, losing the war&lt;/head&gt;&lt;head&gt;Winning the battles, losing the war&lt;/head&gt;&lt;head&gt;Mediation?&lt;/head&gt;&lt;head&gt;Mediation?&lt;/head&gt;&lt;head&gt;Are Linus' patches posted to the mailing lists?&lt;/head&gt;&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45074312</guid></item><item><title>AI models need a virtual machine</title><link>https://blog.sigplan.org/2025/08/29/ai-models-need-a-virtual-machine/</link><description>&lt;doc fingerprint="bd5fd5d284b383c8"&gt;
  &lt;main&gt;
    &lt;p&gt;Applications using AI embed the AI model in a framework that interfaces between the model and the rest of the system, providing needed services such as tool calling, context retrieval, etc. Software for early chatbots took user input, called the LLM, and returned the result to the user; essentially just a read-eval-print loop. But, as the capabilities of LLMs have evolved and extension mechanisms, such as MCP were defined, the complexities of the control software that calls the LLM have increased. AI software systems require the same qualities that an operating system provides, including security, isolation, extensibility, and portability. For example, when an AI model needs to be given a file as part of its context, access control must be established that determines if the model should be allowed to view that file. We believe it is time to consider standardizing the ways in which the AI models are embedded into software and think of that control software layer as a virtual machine, where one of the machine instructions, albeit a super-powerful one, is to call the LLM.&lt;/p&gt;
    &lt;p&gt;Our approach decouples model development from integration logic, allowing any model to “plug in” to a rich software ecosystem that includes tools, security controls, memory abstractions, etc. Similar to the impact that the Java Virtual Machine had, creating a specification of a VM for the AI orchestrator could enable a “write once, run anywhere” execution environment for AI models while at the same time providing familiar constraints and governance to maintain security and privacy in existing software systems. Below we outline related work in this direction, the motivation behind it, and the key benefits of an AI Model VM.&lt;/p&gt;
    &lt;p&gt;Introduction&lt;/p&gt;
    &lt;p&gt;AI models are being leveraged in existing software as application copilots, embedded in IDEs, and with the rise of the MCP protocol, are increasingly able to use tools, implement agents, etc. This rapid evolution of valuable use cases brings with it a greater need to ensure that the AI-powered applications maintain privacy, are secure, and operate correctly. Guarantees of security and privacy are best provided if the underlying system is secure by design and not added on to systems as an afterthought. We take the Java Virtual Machine (JVM) as our inspiration in making the case for the importance of a standard AI Virtual Machine. The Java Virtual Machine guarantees memory safety by design, defines access control policies, and prevents code injection with bytecode verification. These properties allow Java programs running on the JVM to be executed with trust despite being shipped remotely, enabling “write once, run anywhere” software distribution.&lt;/p&gt;
    &lt;p&gt;How does the JVM relate to applications that use AI models? We used the following example to explain:&lt;/p&gt;
    &lt;p&gt;The diagram illustrates the role of the software layer that interacts with an AI model, which we call the Model Virtual Machine (MVM). That layer intermediates between the model and the rest of the world. For example, a chatbot user might type a prompt (1) that the MVM then sends unmodified to the AI model (2). In practice, the MVM will add additional context, including the system prompt, chat history, to the AI model input as well. The AI model generates a response, which in the example requires a specific tool to be called (3). This response has a specific format that is mutually agreed upon between the model and the MVM, such as MCP. In our example, because it is important to restrict the model from making undesired tool calls, the MVM first consults the list of allowed tools (4) before deciding to call the tool the model requested (5). This check (4) guarantees that the model doesn’t make unauthorized tool calls. Every commercial system using AI models requires some version of this control software.&lt;/p&gt;
    &lt;p&gt;We make the analogy that the interface with the LLM should be a virtual machine. If that is the case, what are the instructions that the machine can execute? Here are examples of operations that existing AI model interfaces have:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Certifying, loading, initializing, and unloading a given AI model&lt;/item&gt;
      &lt;item&gt;Calling a model with context&lt;/item&gt;
      &lt;item&gt;Parsing the output from the model&lt;/item&gt;
      &lt;item&gt;Certifying, loading, initializing, and unloading tools&lt;/item&gt;
      &lt;item&gt;Calling a tool&lt;/item&gt;
      &lt;item&gt;Parsing the results from a tool call&lt;/item&gt;
      &lt;item&gt;Storing the results from a tool call into memory&lt;/item&gt;
      &lt;item&gt;Asking the user for input&lt;/item&gt;
      &lt;item&gt;Adding content to a history memory&lt;/item&gt;
      &lt;item&gt;Standard control constructs such as conditionals, sequencing, etc.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A VM would support all of these operations in a well-typed context where constraints are placed on the calls made, the arguments passed, etc.&lt;/p&gt;
    &lt;p&gt;Existing Work Informs What is Needed&lt;/p&gt;
    &lt;p&gt;Some of the required elements of a well-specified interface are emerging in AI systems explored in academic work and in applications that are widely deployed:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;OpenAI’s Structured Tool Calling Protocols: OpenAI introduced a JSON-based function calling API that lets models invoke code-defined functions in a structured way. This approach, along with OpenAI’s plugin system (which uses OpenAPI specifications for tools), showed how structured tool-calling protocols can reduce ambiguity and simplify integration.&lt;/item&gt;
      &lt;item&gt;Anthropic’s Model Context Protocol (MCP, 2024): MCP is an open protocol for connecting AI assistants to external data and tools, explicitly aiming to be a universal interface. “Think of MCP like a USB-C port for AI applications,” Anthropic explains. Instead of every service having a custom AI integration, MCP provides a common schema and client-server approach. Despite being relatively new, MCP adoption, including in large companies, has been rapid.&lt;/item&gt;
      &lt;item&gt;Secure Orchestrators – FIDES &amp;amp; AC4A (2025): Security remains a weak point in current AI systems. Two recent projects propose runtime-level controls. FIDES (by Microsoft Research) enforces information-flow policies on agents by tracking data confidentiality labels and adding new agent actions like “inspect” to limit what agents can access (where a quarantined LLM can safely summarize restricted data) (paper). AC4A (Access Control for Agents) (manuscript in preparation) takes an OS-style approach: All tools and data are organized into hierarchies (like files and folders), and the agent must request read/write access for each resource. AC4A’s runtime intercepts every agent action and blocks anything not permitted, forcing a least-privilege operation mode. These projects show how a standard AI VM could include built-in security and access control, just as modern operating systems do. Even with strong access controls built into a VM specification, AI models present new security challenges that need to be considered in the design. For example, an AI model, when prevented from accessing a particular item of data, might use its chain-of-thought reasoning to devise ways to gather accessible data that allows it to infer the inaccessible item. As such, security researchers have to devise new mitigations to prevent AI models taking adversarial actions even with the virtual machine constraints.&lt;/item&gt;
      &lt;item&gt;Open-Source Agent Runtimes: Several projects are actively building general-purpose runtimes for AI. For example, langchain and Semantic Kernel provide numerous common runtime services that make writing reliable AI-enabled applications easier. The AI Controller Interface (AICI) (later renamed llguidance), integrates a lightweight VM into the model-serving pipeline, allowing developers to script and constrain model behavior at a low level (e.g., control of generations token-by-token).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Defining a specification for a VM interface for AI systems from these emerging approaches will require more than an agreement on protocols and APIs. Because AI systems derive their behavior from training data, model training data must reflect the specification of the VM interface so that the models and the VM model interface can co-evolve. This will enable otherwise diverse models to exhibit broadly compatible behavior with respect to the VM interface specification.&lt;/p&gt;
    &lt;p&gt;Benefits of a Well-Specified AI Model VM&lt;/p&gt;
    &lt;p&gt;As mentioned, many applications that leverage AI models require reliability, privacy, and security. In addition, new models are developed almost daily and updating the model being used by an application is often necessary. Given this confluence of factors, creating robust AI software presents significant engineering challenges. We believe that a specification of the interface between the AI model and the surrounding software that interfaces to it will address some of these challenges.&lt;/p&gt;
    &lt;p&gt;The need for an AI Model VM specification is driven by several clear motivations:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Separation of Concerns: An interface specification enforces a clean separation between model logic and integration logic. This means models become interchangeable components. You could swap in a new model (or move an agent to a different platform) and, as long as both adhere to the standard, everything still works. Likewise, virtual machine implementors can increase the performance, security, and tooling of the virtual machine while maintaining compatibility with the AI model interfaces.&lt;/item&gt;
      &lt;item&gt;Built-in Safety and Governance: A VM specification can enforce safety by design. By routing all tool usage and external access through a well-defined interface, it becomes easier to apply permission checks, audit logs, and fail-safes. As shown by projects like AC4A, the VM can act as a gatekeeper, restricting what models can do unless explicitly authorized. This creates a safer deployment solution for powerful AI systems: even if the model behaves unpredictably, the VM layer can contain its effects. Standards bodies could even define security requirements (e.g., certain calls must always require user confirmation), creating a shared foundation of trust. Similar to the benefits of signed assemblies in the Common Language Runtime, have a certification process around loading and unloading models and tools ensures the end-to-end security of the supply chain.&lt;/item&gt;
      &lt;item&gt;Transparent Performance &amp;amp; Resource Tracking: A VM specification could also give developers visibility to runtime diagnostics. Post-execution manifests could report model performance, resource consumption, and data access level which helps developers evaluate overall efficiency and performance. Benchmarks for accuracy, utility, and responsiveness can be supported directly in the VM interface across models and platforms.&lt;/item&gt;
      &lt;item&gt;Verifiability of Model Output: Leveraging a VM specification, experts can explore integrating formal methods to verify their model behavior. Techniques such as zero-knowledge proofs could confirm the integrity of model outputs without sensitive internal logic. While still emerging, this possibility hints at new levels of trust and accountability in AI systems and should be carefully considered during development.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Conclusion&lt;/p&gt;
    &lt;p&gt;We argue that a well-specified AI Model Virtual Machine is needed. Developments occurring in multiple directions, including work from tech companies, startups, and academia, all motivate the need for a VM specification that lets AI models safely and seamlessly interact with the world around them. The motivation is clear – reducing complexity and unlocking interoperability – and the potential benefits range from technical (faster development, modular upgrades) to strategic (cross-platform AI ecosystems, improved safety). From enforcing controls for security and privacy, to potentially formal proof capabilities for trust, the opportunities are wide-ranging. Learning a lesson from older generations of software virtualization, a VM specification can increase AI systems portability, interoperability, security, and reliability. The purpose of this document is to highlight these issues and start engaging with the community on building a consensus that such a specification is needed and what it should include.&lt;/p&gt;
    &lt;p&gt;Biographies:&lt;/p&gt;
    &lt;p&gt;Shraddha Barke is a Senior Researcher at Microsoft Research in Redmond, Washington in the Research in Software Engineering (RiSE) group. Her research interests include AI for proof generation, training AI models for program-reasoning tasks using RL and improving the reliability of AI agents.&lt;/p&gt;
    &lt;p&gt;Betül Durak is a Principal Researcher at Microsoft Research in Redmond, Washington in Security, Privacy, and Cryptography group. Her research interests broadly include security analysis as well as secure and private protocol designs motivated from real world problems.&lt;/p&gt;
    &lt;p&gt;Dan Grossman is a Professor at the University of Washington and the Vice Director of the Paul G. Allen School of Computer Science &amp;amp; Engineering. His research interests are in programming languages, particularly in applying programming languages concepts and analyses to emerging domains.&lt;/p&gt;
    &lt;p&gt;Peli de Halleux is a Principal Research Software Developer Engineer in Redmond, Washington working in the Research in Software Engineering (RiSE) group. His research interests include empowering individuals to build LLM-powered applications more efficiently.&lt;/p&gt;
    &lt;p&gt;Emre Kıcıman is a Senior Principal Research Manager and Head of Research for Copilot Tuning at Microsoft. His research interests include causal methods, the security of AI, and applications of LLM and AI-based systems, together with their implications for people and society.&lt;/p&gt;
    &lt;p&gt;Reshabh K Sharma is a PhD student at the University of Washington. His research lies at the intersection of PL/SE and LLMs, focusing on developing infrastructure and tools to create better LLM-based system that are easier to develop reliably and correctly.&lt;/p&gt;
    &lt;p&gt;Ben Zorn is a Partner Researcher at Microsoft Research in Redmond, Washington working in (and previously having co-managed) the Research in Software Engineering (RiSE) group. His research interests include programming language design and implementation, end-user programing, and AI software including technology for ensuring responsible AI.&lt;/p&gt;
    &lt;p&gt;Disclaimer: These posts are written by individual contributors to share their thoughts on the SIGPLAN blog for the benefit of the community. Any views or opinions represented in this blog are personal, belong solely to the blog author and do not represent those of ACM SIGPLAN or its parent organization, ACM.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45074467</guid></item><item><title>Condor's Cuzco RISC-V Core at Hot Chips 2025</title><link>https://chipsandcheese.com/p/condors-cuzco-risc-v-core-at-hot</link><description>&lt;doc fingerprint="c2da901fa4165780"&gt;
  &lt;main&gt;
    &lt;p&gt;Condor Computing, a subsidiary of Andes Technology that creates licensable RISC-V cores, has a business model with parallels to Arm (the company) and SiFive. Andes formed Condor in 2023, so Condor is a relatively young player on the RISC-V scene. However, Andes does have RISC-V design experience prior to Condor’s formation with a few RISC-V cores under their belt from years past.&lt;/p&gt;
    &lt;p&gt;Condor is presenting their Cuzco core at Hot Chips 2025. This core is a heavyweight within the RISC-V scene, with wide out-of-order execution and a modern branch predictor and some new time based tricks. It’s in the same segment as high performance RISC-V designs like SiFive’s P870 and Veyron’s V1. Like those cores, Cuzco should stand head and shoulders above currently in-silicon RISC-V cores like Alibaba T-HEAD’s C910 and SiFive’s P550.&lt;/p&gt;
    &lt;p&gt;Besides being a wide out-of-order design, Cuzco uses mostly static scheduling in the backend to save power and reduce complexity. Condor calls this a “time-based” scheduling scheme. I’ll cover more on this later, but it’s important to note that this is purely an implementation detail. It doesn’t require ISA modifications or special treatment from the compiler for optimal performance.&lt;/p&gt;
    &lt;head rend="h1"&gt;Core Overview&lt;/head&gt;
    &lt;p&gt;Cuzco is a 8-wide out-of-order core with a 256 entry ROB and clock speed targets around 2 GHz SS (Slow-Slow) to 2.5 GHz (Typical-Typical) on TSMC’s 5nm process. The pipeline has 12 stages counting from instruction fetch to data cache access completion. However, a 10 cycle mispredict penalty probably more accurately describes the core’s pipeline length relative to its competitors.&lt;/p&gt;
    &lt;p&gt;As a licensed core, Cuzco is meant to be highly configurable to widen its target market. The core is built from a variable number of execution slices. Customization options also include L2 TLB size, off-cluster bus widths, and L2/L3 capacity. Condor can also adjust the size of various internal core structures to meet customer performance requirements. Cuzco cores are arranged into clusters with up to eight cores. Clusters interface with the system via a CHI bus, so customers can bring their own network-on-chip (NoC) to hit higher core counts via multi-cluster setups.&lt;/p&gt;
    &lt;head rend="h1"&gt;Frontend&lt;/head&gt;
    &lt;p&gt;Cuzco’s frontend starts with a sophisticated branch predictor, as is typical for modern cores targeting any reasonable performance level. Conditional branches are handled via a TAGE-SC-L predictor. TAGE stands for Tagged Geometric, a technique that uses multiple tables each handling a different history length. It seeks to efficiently use branch predictor storage by selecting the most appropriate history length for each branch, as opposed to older techniques that use a fixed history length. The SC (Statistical Corrector) part handles the small subset of branches where TAGE doesn’t work well, and can invert the prediction if it sees TAGE often getting things wrong under certain circumstances. Finally, L indicates a loop predictor. A loop predictor is simply a set of counters that come into play for branches that are taken a certain number of times, then not taken once. If the branch predictor detects such loop behavior, the loop predictor can let it avoid mispredicting on the last iteration of the loop. Basically, TAGE-SC-L is an augmented version of the basic TAGE predictor.&lt;/p&gt;
    &lt;p&gt;AMD’s Zen 2, Ampere’s AmpereOne, and Qualcomm’s Oryon also use TAGE predictors of some sort, and achieve excellent branch prediction accuracy. AMD, Ampere, and Qualcomm also likely augment the basic TAGE prediction strategy in some way. How Cuzco’s TAGE predictor performs will depend on how large its history tables are, as well as how well the predictor is tuned (selection of index vs tag bits, history lengths, distribution of storage budget across TAGE tables, etc). For Cuzco’s part, they’ve disclosed that the TAGE predictor’s base component uses a 16K entry table of bimodal counters.&lt;/p&gt;
    &lt;p&gt;Branch target caching on Cuzco is provided by a 8K entry branch target buffer (BTB) split into two levels. Condor’s slides show the BTB hit/miss occurring on the cycle after instruction cache access starts, so a taken branch likely creates a single pipeline bubble. Returns are predicted using a 32 entry return stack. Cuzco also has an indirect branch predictor, which is typical on modern CPUs.&lt;/p&gt;
    &lt;p&gt;Cuzco’s instruction fetch logic feeds from a 64 KB 8-way set associative instruction cache, and speeds up address translations with a 64 entry fully associative TLB. The instruction fetch stages pull an entire 64B cacheline into the ICQ (instruction cache queue), and then pull instructions from that into an instruction queue (XIQ). The decoders feed from the XIQ, and can handle up to eight instructions per cycle.&lt;/p&gt;
    &lt;head rend="h1"&gt;Rename and Allocate&lt;/head&gt;
    &lt;p&gt;Much of the action in Condor’s presentation relates to the rename and allocate stage, which acts as a bridge between the frontend and out-of-order backend. In most out-of-order cores, the renamer carries out register renaming and allocates resources in the backend. Then, the backend dynamically schedules instructions as their dependencies become available. Cuzco’s renamer goes a step further and predicts instruction schedules as well.&lt;/p&gt;
    &lt;p&gt;One parallel to this is Nvidia’s static scheduling in Kepler and subsequent GPU architectures. Both simplify scheduling by telling an instruction to execute a certain number of cycles in the future, rather than having hardware dynamically check for dependencies. But Nvidia does this in their compiler because GPU ISAs aren’t standardized. Cuzco still uses hardware to create dynamic schedules, but moves that job into the rename/allocate stage rather than the schedulers in the backend. Schedulers can be expensive structures in conventional out-of-order CPUs, because they have to check whether instructions are ready to execute every cycle. On Cuzco, the backend schedulers can simply wait a specified number of cycles, and then issue an instruction knowing the dependencies will be ready by then.&lt;/p&gt;
    &lt;p&gt;To carry out time-based scheduling, Cuzco maintains a Time Resource Matrix (TRM), which tracks utilization of various resources like execution ports, functional units, and data buses for a certain number of cycles in the future. The TRM can look 256 cycles into the future, which keeps storage requirements under control. Because searching a 256 row matrix in hardware would be extremely expensive, Cuzco only looks for available resources in a small window after an instruction’s dependencies are predicted to be ready. Condor found searching a window of eight cycles provided a good tradeoff. Because the renamer can handle up to eight instructions, it at most has to access 64 rows in the TRM per cycle. If the renamer can’t find free resources in the search window, the instruction will be stalled at the ID2 stage.&lt;/p&gt;
    &lt;p&gt;Another potential limitation is the TRM size, which could be a limitation for long latency instructions. However, the longest latency instructions tend to be loads that miss cache. Cuzco always assumes a L1D hit for TRM scheduling, and uses replay to handle L1D misses. That means stalls at ID2 from TRM size limitations should also be rare.&lt;/p&gt;
    &lt;p&gt;Compared to a hypothetical “greedy” setup, where the core is able to create a perfect schedule with execution resource limitations in mind, limiting the TRM search window decreases performance by a few percent. Condor notes that creating a core to match the “greedy” figure may not even be possible. A conventional out-of-order core wouldn’t have TRM-related restrictions, but may face difficulties creating an optimal schedule for other reasons. For example, a distributed scheduler may have several micro-ops become ready in one scheduling queue, and face “false” delays even though free execution units may be available on other scheduling queues.&lt;/p&gt;
    &lt;p&gt;Static scheduling only works when instruction latencies are known ahead of time. Some instructions have variable latency, like loads that can miss caches or TLBs, encounter bank conflicts, or require store forwarding. As mentioned before, Cuzco uses instruction replay to handle variable latency instructions and the associated dynamic behavior. The renamer does take some measures to reduce replays, like checking to see if a load gets its address from the same register as a prior store. However, it doesn’t attempt to predict memory dependencies like Intel’s Core 2, and also doesn’t try to predict whether a load will miss cache.&lt;/p&gt;
    &lt;head rend="h1"&gt;Out-of-Order Backend&lt;/head&gt;
    &lt;p&gt;Out of order execution in Cuzco is relatively simple, because the rename/allocate stage takes care of figuring out when instructions will execute. Each instruction is simply held within the schedulers until a specified number of cycles pass, after which it’s sent for execution. If the rename/allocate stage guesses wrong, replay gets handled via “poison” bits. The erroneously executed instruction’s result data is effectively marked as poisoned, and any instructions consuming that data will get re-executed. Replaying instructions costs power and wastes execution throughput, so replays should ideally be a rare event. 70.07 replays per 1000 instructions feels like a bit of a high figure, but likely isn’t a major problem because execution resources are rarely a limitation in an out-of-order core. Taking about 7% more execution resources may be an acceptable tradeoff, considering most modern chips rarely use their core width in a sustained fashion.&lt;/p&gt;
    &lt;p&gt;Execution resources are grouped into slices, each of which have a pair of pipelines. A slice can execute all of the core’s supported RISC-V instructions, making it easy to scale execution resources by changing slice count. Each slice consists of a set of execution queues (XEQs), which hold micro-ops waiting for a functional unit. Cuzco has XEQs per functional unit, unlike conventional designs that tend to have a scheduling queue that feeds all functional units attached to an execution port. Four register read ports supply operands to the slice, and two write ports handle result writeback. Bus conflicts are handled by the TRM as well. A slice cannot execute more than two micro-ops per cycle, even doing so would not oversubscribe the register read ports. For example, a slice can’t issue an integer add, a branch, and a load in the same cycle even though that would only require four register inputs.&lt;/p&gt;
    &lt;p&gt;XEQs are sized to match workload characteristics, much like tuning a distributed scheduler. While XEQ sizes can be set to match customer requirements, Condor was able to give some figures for a baseline configuration. ALUs get 16 entry queues, while branches and address generation units (LS) get 8 entry queues. XEQ sizes are adjustable in powers of two, from 2 to 32 entries. There’s generally a single cycle of latency for forwarding between slices. The core can be configured to do zero cycle cross-slice forwarding, but that would be quite difficult to pull off.&lt;/p&gt;
    &lt;p&gt;On the vector side, Cuzco supports 256/512-bit VLENs via multiple micro-ops, which are distributed across the execution slices. Execution units are natively 64 bits wide. There’s one FMA unit per slice, so peak FP32 throughput is eight FMA operations per cycle, or 16 FLOPS when counting the add and multiply as separate operations. FP adds execute with 2 cycle latency, while FP multiplies and multiply-adds have four cycle latency. The two cycle FP add latency is nice to see, and matches recent cores like Neoverse N1 and Intel’s Golden Cove, albeit at much lower clocks.&lt;/p&gt;
    &lt;head rend="h1"&gt;Load/Store&lt;/head&gt;
    &lt;p&gt;Cuzco’s load/store unit has a 64 entry load queue, a 64 entry store queue, and a 64 entry queue for data cache misses. Loads can leave the load queue after accessing the data cache, likely creating behavior similar to AMD’s Zen series where the out-of-order backend can have far more loads pending retirement than the documented load queue capacity would suggest. The core has four load/store pipelines in a four slice configuration, or one pipeline per slice. Maximum load bandwidth is 64B/cycle, achievable with vector loads.&lt;/p&gt;
    &lt;p&gt;The L1D is physically indexed and physically addressed (PIPT), so address translation has to complete before L1D access.To speed up address translation, Cuzco has a 64 entry fully associative data TLB. The L2 TLB is 4-way set associative, and can have 1K, 2K, or 4K entries. Cuzco’s core private, unified L2 cache has configurable capacity as well. An example 2 MB L2 occupies 1.04 mm2 on TSMC 5nm.&lt;/p&gt;
    &lt;p&gt;Eight cores per cluster share a L3 cache, which is split into slices to handle bandwidth demands from multiple cores. Each slice can deliver 64B/cycle, and slice count matches core count. Thus Cuzco enjoys 64B/cycle of load bandwidth throughout the cache hierarchy, of course with the caveat that L3 bandwidth may be lower if accesses from different cores clash into the same slice. Cores and L3 slices within a cluster are linked by a crossbar. The L3 cache can run at up to core clock. Requests to the system head out through a 64B/cycle CHI interface. System topology beyond the cluster is up to the implementer.&lt;/p&gt;
    &lt;p&gt;Replays for cache misses are carried out by rescheduling the data consumer to a later time when data is predicted to be ready. Thus a L3 hit would cause a consuming instruction to be executed three times - once for the predicted L1D hit, once for the predicted L2 hit, and a final time for the L3 hit with the correct data.&lt;/p&gt;
    &lt;head rend="h1"&gt;Final Words&lt;/head&gt;
    &lt;p&gt;High performance CPU design has settled down over the past couple decades, and converged on an out-of-order execution model. There’s no denying that out-of-order execution is difficult. Numerous alternatives have been tried through the years but didn’t have staying power. Intel’s Itanium sought to use an ISA-based approach, but failed to unseat the company’s own x86 cores that used out-of-order execution. Nvidia’s Denver tried to dynamically compile ARM instructions into microcode bundles, but that approach was not carried forward. All successful high performance designs today generally use the same out-of-order execution strategy, albeit with plenty of variation. That’s driven by the requirements of ISA compatibility, and the need to deliver high single threaded performance across a broad range of applications. Breaking from the mould is obviously fraught with peril.&lt;/p&gt;
    &lt;p&gt;Condor seeks to break from the mould, but does so deep in the core in a way that should be invisible to software a functional perspective, and mostly invisible from a performance perspective. The core runs RISC-V instructions and thus benefits from that software ecosystem, unlike Itanium. It doesn’t rely on a compiled microcode cache like Denver, so it doesn’t end up running in a degraded performance beyond what a typical OoO core would see when dealing with poor code locality. Finally, instruction replay effectively creates dynamic schedules and handles cache misses&lt;/p&gt;
    &lt;p&gt;If you like the content then consider heading over to the Patreon or PayPal if you want to toss a few bucks to Chips and Cheese. Also consider joining the Discord.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45074895</guid></item><item><title>You Have to Feel It</title><link>https://mitchellh.com/writing/feel-it</link><description>&lt;doc fingerprint="b887f3b997e7a4e0"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Mitchell Hashimoto&lt;/head&gt;
    &lt;head rend="h1"&gt;You Have to Feel It&lt;/head&gt;
    &lt;p&gt;You see a series of checkboxes checked. Schedules met. Requirements satisfied. Demos delivered. It's a good day. Good job, you, good job! A promotion is in sight.&lt;/p&gt;
    &lt;p&gt;But you didn't feel it. You didn't feel it.&lt;/p&gt;
    &lt;p&gt;We, as people, feel something with every interaction. Frustration, joy, relief, confidence. A feeling. A person interacts with our work. Our work evokes a feeling. The feeling matters. The feeling is part of the work. The desired feeling is part of the requirements.&lt;/p&gt;
    &lt;p&gt;When you feel it, you know. The feature makes you smile when you use it. It fits right in, like it was always meant to be there. You want to use it again. You want to tell people about it.&lt;/p&gt;
    &lt;p&gt;This is the difference. This is what metrics, specifications, and demos miss. They don't capture the feeling. For the people who will use and live in the work, the feeling is part of their daily experience. Which means you can't stop at checking the boxes on paper. You have to sit with it, use it, live with it.&lt;/p&gt;
    &lt;p&gt;You have to feel it.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45075048</guid></item><item><title>LandChad, a site dedicated to turning internet peasants into Internet Landlords</title><link>https://landchad.net</link><description>&lt;doc fingerprint="9d8b14078d06c8c"&gt;
  &lt;main&gt;
    &lt;p&gt;This is LandChad.net, a site dedicated to turning internet peasants into Internet Landlords by showing them how to setup websites, email servers, chat servers and everything in between.&lt;/p&gt;
    &lt;p&gt;Starting a website is something that can be done in a lazy afternoon and costs pocket change.&lt;/p&gt;
    &lt;p&gt;Most of the internet’s problems could be solved if more people had their own personal platforms, so the objective of this site is to guide any normal person through the process of installing a website.&lt;/p&gt;
    &lt;head rend="h2"&gt;Start a website&lt;/head&gt;
    &lt;p&gt;This is the basic “course.” Follow these quick tutorials and you’ll have a fully functioning basic web page on the domain name of your choice.&lt;/p&gt;
    &lt;p&gt;â³ This “basic course” can take as little as an hour or even less.&lt;/p&gt;
    &lt;head rend="h2"&gt;“Build your own platform!”&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;AlpsAlps is a simple and extensible webmail. It offers a web interface for IMAP, SMTP and other upstream servers.&lt;/item&gt;
      &lt;item&gt;CalibreA public or private digital library.&lt;/item&gt;
      &lt;item&gt;CgitA hyperfast web frontend for git repositories.&lt;/item&gt;
      &lt;item&gt;CoturnA STUN and TURN server that allows users to perform WebRTC calls while being behind NATs.&lt;/item&gt;
      &lt;item&gt;DnsmasqHost your own DNS server to block ads and social media.&lt;/item&gt;
      &lt;item&gt;DokuWikiA simple wiki with clean syntax and no databases.&lt;/item&gt;
      &lt;item&gt;ejabberdA chat server based on XMPP.&lt;/item&gt;
      &lt;item&gt;FosspayA self-hosted payment and donation gateway interfaced with Stripe.&lt;/item&gt;
      &lt;item&gt;Git ServerHosting your own basic git server.&lt;/item&gt;
      &lt;item&gt;GiteaA fully-featured Github-like git website for serious software projects and communities.&lt;/item&gt;
      &lt;item&gt;i2pA private and uncensorable web-layer similar to Tor.&lt;/item&gt;
      &lt;item&gt;IRCSelf-hosting the Internet's classic chat protocol.&lt;/item&gt;
      &lt;item&gt;JitsiVideo-chat software.&lt;/item&gt;
      &lt;item&gt;Matrix DendriteA faster server implementation of Matrix.&lt;/item&gt;
      &lt;item&gt;Matrix SynapseAn encrypted chat server sleek and accessible even to normies.&lt;/item&gt;
      &lt;item&gt;MoneroThe ideal private cryptocurrency for the Internet.&lt;/item&gt;
      &lt;item&gt;Monero NodeContribute to the Monero network.&lt;/item&gt;
      &lt;item&gt;MumbleOpen Source, Low Latency, High Quality Voice Chat.&lt;/item&gt;
      &lt;item&gt;NextcloudA free and private Google Drive-like cloud storage system.&lt;/item&gt;
      &lt;item&gt;PeerTubeYour own self-hosted video-site also compatible with Activity Pub.&lt;/item&gt;
      &lt;item&gt;PleromaA federated Twitter-like microblogging system.&lt;/item&gt;
      &lt;item&gt;ProsodyA minimalist XMPP chat server.&lt;/item&gt;
      &lt;item&gt;RadicaleA private calendar, contact and to-do list system.&lt;/item&gt;
      &lt;item&gt;RainloopA graphical website for accessing a mail server.&lt;/item&gt;
      &lt;item&gt;RSS BridgeCreates RSS feeds for normie sites like Facebook.&lt;/item&gt;
      &lt;item&gt;SearXNGPolls dozens of search engines to give you private and complete search results.&lt;/item&gt;
      &lt;item&gt;TorSet your site up privately on the 'dark web.'&lt;/item&gt;
      &lt;item&gt;TransmissionDecentralized file-sharing with BitTorrent.&lt;/item&gt;
      &lt;item&gt;WireguardFast, Modern, Secure VPN Tunnel&lt;/item&gt;
      &lt;item&gt;YarrA self-hosted, web-based feed aggregator&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Host your own services, social media and more.&lt;/p&gt;
    &lt;head rend="h2"&gt;Setup an Email Server&lt;/head&gt;
    &lt;p&gt;This is the email “course”. Follow these modules to learn how to setup an email server headache free.&lt;/p&gt;
    &lt;p&gt;â³ This entire “email course” may take about an hour. The approval for opening email ports with your VPS should take no less than a day.&lt;/p&gt;
    &lt;head rend="h2"&gt;Maintaining a Server&lt;/head&gt;
    &lt;p&gt;Tips and articles on mastering your server and learning about GNU/Linux systems administration.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Certbot on Standalone Domains and Subdomains&lt;/item&gt;
      &lt;item&gt;Cronjobs&lt;/item&gt;
      &lt;item&gt;GeminiA minimalist alternative to HTTP with a modern twist.&lt;/item&gt;
      &lt;item&gt;Log on with SSH Keys&lt;/item&gt;
      &lt;item&gt;Maintaining a Server&lt;/item&gt;
      &lt;item&gt;OpenAlias&lt;/item&gt;
      &lt;item&gt;Page Quality&lt;/item&gt;
      &lt;item&gt;Requiring Passwords for Webpages (HTTP Authentication)&lt;/item&gt;
      &lt;item&gt;Rsync: Upload and Sync Files and Websites&lt;/item&gt;
      &lt;item&gt;Self hosting&lt;/item&gt;
      &lt;item&gt;Server-Side Scripting with CGI&lt;/item&gt;
      &lt;item&gt;SSH - Advanced Usage&lt;/item&gt;
      &lt;item&gt;Using UFW as a Firewall&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Support LandChad.net&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;BTC: &lt;code&gt;bc1q9f3tmkhnxj8gduytdktlcw8yrnx3g028nzzsc5&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;XMR: &lt;code&gt;84RXmrsE7ffCe1ADprxLMHRpmyhZuWYScDR4YghE8pFRFSyLtiZFYwD6EPijVzD3aZiEpg57MfHEr1pGJNPXyJgENMnWrSh&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45075384</guid></item><item><title>New research reveals longevity gains slowing, life expectancy of 100 unlikely</title><link>https://lafollette.wisc.edu/news/new-research-reveals-longevity-gains-slowing-life-expectancy-of-100-unlikely/</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45075813</guid></item><item><title>The Default Trap: Why Anthropic's Data Policy Change Matters</title><link>https://natesnewsletter.substack.com/p/the-default-trap-why-anthropics-data</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45076274</guid></item><item><title>The Rise of Hybrid PHP: Blending PHP with Go and Rust</title><link>https://yekdeveloper.com/p/4-the-rise-of-hybrid-php</link><description>&lt;doc fingerprint="3f8b1a3609745aaa"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The Rise of Hybrid PHP: Blending PHP with Go and Rust&lt;/head&gt;
    &lt;p&gt;Original - 2025-08-30 - yeknava - 2 minute read&lt;/p&gt;
    &lt;p&gt;We used to develop our application as a single DDD monolith (let’s call it the mother) with several smaller microservices around it (the children) to gain some specific advantages. Most of these microservices were built in Go, while the core monolithic service was developed in PHP 8.3.&lt;/p&gt;
    &lt;p&gt;This stack served us well for a long time. The Go microservices efficiently handled our high-throughput requests, and the carefully designed monolith allowed our relatively small backend team to deliver features quickly and with confidence. It was a good balance: speed where we needed it most, and stability and productivity everywhere else.&lt;/p&gt;
    &lt;p&gt;As many of you may have experienced, 80% of your traffic often targets only 20% of your APIs—the well-known Pareto principle. And unsurprisingly, those hot 20% endpoints are usually the ones where performance matters the most. In the past, our strategies included writing highly optimized code, adding extreme caching layers, or extracting certain parts into Go-based microservices. While effective, these approaches added complexity and operational overhead.&lt;/p&gt;
    &lt;p&gt;But now, thanks to new capabilities in the PHP ecosystem and the rise of powerful libraries and runtimes, it’s becoming much easier to keep more logic inside the monolith while still achieving excellent performance. Let’s look at a few exciting options:&lt;/p&gt;
    &lt;head rend="h3"&gt;1. FFI (Foreign Function Interface)&lt;/head&gt;
    &lt;p&gt;PHP’s FFI feature allows you to call C code directly from PHP. This opens the door to system-level operations or performance-critical logic without leaving your PHP project. Of course, you need to be mindful of context switching costs, but for the right use cases, it’s a game-changer.&lt;/p&gt;
    &lt;head rend="h3"&gt;2. Rust-Based Extensions&lt;/head&gt;
    &lt;p&gt;If writing raw C isn’t your cup of tea, you can now write PHP extensions in Rust (or even Zig). This lets you offload heavy, performance-sensitive parts of your application to safe, memory-efficient, compiled code. Rust, in particular, offers memory safety guarantees without sacrificing speed, which makes it a great fit for extensions that need to be both reliable and fast.&lt;/p&gt;
    &lt;head rend="h3"&gt;3. Go-Based Extensions with FrankenPHP&lt;/head&gt;
    &lt;p&gt;We’ve recently switched to FrankenPHP (after seeing it become officially supported by the PHP Foundation). Running PHP in FrankenPHP’s worker mode is impressively fast—sometimes over 4x faster in our benchmarks compared to traditional setups.&lt;/p&gt;
    &lt;p&gt;Even more exciting, a recent release introduced the ability to write PHP extensions in Go. This feature is something we are actively exploring because it would let us build high-performance APIs in Go and expose them seamlessly inside our PHP monolith. That way, we can combine the productivity of PHP with the raw speed of Go, without needing to split everything into separate services.&lt;/p&gt;
    &lt;head rend="h3"&gt;But Why Not Just Rewrite Everything in Go or Rust?&lt;/head&gt;
    &lt;p&gt;It’s a fair question—and one we’ve asked ourselves too. There are two main reasons why we don’t simply migrate the entire backend:&lt;/p&gt;
    &lt;p&gt;1. Rewriting is costly. Many applications are already large and stable. Rewrites are risky, time-consuming, and often introduce more problems than they solve. In most scenarios, a rewrite should be the very last option.&lt;/p&gt;
    &lt;p&gt;2. PHP is still a great fit. For the majority of the application, PHP does the job well. It’s fast enough, developer-friendly, and supported by a large ecosystem. For those few cases where you truly need maximum performance, you can now selectively write parts in Go or Rust as extensions—rather than rewriting the entire system.&lt;/p&gt;
    &lt;p&gt;In short, the modern PHP ecosystem gives us the best of both worlds: the ability to build quickly and confidently in PHP, while still having powerful options (C, Rust, Go) for performance-critical parts. This hybrid approach lets us stay productive without sacrificing speed where it matters most.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45077143</guid></item><item><title>Are we decentralized yet?</title><link>https://arewedecentralizedyet.online/</link><description>&lt;doc fingerprint="35d167d9c00e34be"&gt;
  &lt;main&gt;
    &lt;p&gt;This page measures the concentration of user data on the Fediverse and the Atmosphere according to the HerfindahlâHirschman Index (HHI), an indicator from economics used to measure competition between firms in an industry. Mathematically, HHI is the sum of the squares of market shares of all servers.&lt;/p&gt;
    &lt;p&gt;Values close to zero indicate perfectly competitive markets (eg. many servers, with users spread evenly), while values close to 10000 indicate highly concentrated monopolies (eg. most users on a single server). In economics, values below 100 are considered "Highly Competitive", below 1500 is "Unconcentrated", and above 2500 is considered "Highly Concentrated".&lt;/p&gt;
    &lt;p&gt;This site currently measures the concentration of user data for active users: in the Fediverse, this data is on servers (also known as instances); in the Atmosphere, it is on the PDSes that host users' data repos. All PDSes run by the company Bluesky Social PBC are aggregated in this dataset, since they are under the control of a single entity. Similarly, mastodon.social and mastodon.online are combined as they are run by the same company.&lt;/p&gt;
    &lt;p&gt;The location of user data is not the only interesting measure of centralization. On a technical level, there is the network structure (peer to peer, relays, etc.), identity management, the infrastructure on which it is hosted, etc. On a legal level, there are issues regarding the jurisdictions where servers are located, companies are located, etc. On a social level, there are issues around where human power is concentrated in and on the platform, and whether that power is disproportionately held by certain groups. If you would like to help contribute other measures of decentralization, get in touch.&lt;/p&gt;
    &lt;p&gt;Code and data are available on GitHub. Comments and pull requests, including other metrics for measuring distribution and resiliency, are welcome!&lt;/p&gt;
    &lt;p&gt;By Rob Ricci: @ricci@discuss.systems / @ricci.io&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45077291</guid></item><item><title>Why did books start being divided into chapters? A new history</title><link>https://sydneyreviewofbooks.com/reviews/just-a-little-longer</link><description>&lt;doc fingerprint="bbc99a03246082b0"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Perhaps it is the inevitable fate of any convention, but literary history does not, it turns out, have many examples of people appreciating great chaptering. In The History of English Prose Rhythm (1912) – one of the sources for James Joyce’s virtuosic-or-unreadable parodies of the evolution of English prose in Ulysses – George Saintsbury remarks on Thomas Malory’s decision to insert a chapter break at a decisive moment in his fifteenth-century Morte d’Arthur. At the end of chapter ten of the Morte, Lancelot rides into a castle, having slayed its gatekeeper, only to hear from the castle’s residents ‘in doors and windows that said “Fair Knight: thou art unhappy.”’ Saintsbury praises Malory’s sense of timing here. The chapter break introduces a pause, leaving those words, as Dames puts it, ‘hovering in the air’. The next chapter begins with Lancelot successfully freeing captives from the prison; as such, the chapter has served to elongate the narrative incident and heighten the tension.&lt;/p&gt;
      &lt;p&gt;The only problem is that this was not Malory’s division, but rather one added by the printer William Caxton (c.1422-92). This fact was only discovered in 1934 when an edition of the Morte predating Caxton was discovered at Winchester College. As it turns out, the Winchester version had no chapters. The modulations of time are the work of Caxton’s specific ‘remediation’. He creates an ‘artful segmentation, a resonant silence, in the printed volume’s visual patterning’. Caxton is paired in this chapter of The Chapter with the anonymous fifteenth-century remediators who transformed Chrétien de Troyes’s great twelfth-century Arthurian verse into prose. Unlike Caxton’s their results are not acclaimed; like the authors of movie novelisations today, they are vulgarisers, profaning the sacred bonds between form and content. In their hands, Chrétien’s flowing verse – praised in Mimesis by Auerbach as ‘light and almost easy’ – is not only segmented with red ink, but also crowded with insistent explanations in the register of narrative history (‘How the king kissed Enide’). Again, in the manner of movie novelisers, moments of introspection are reduced while battle sequences are dilated with a vigour that may equally be judged ‘clumsy technique’ or ‘daring maneuver’. More charitably, we might say these remediators practise what Dames calls, after Roman Jakobson, ‘intralingual translation’ – a phrase that calls back to mind (there it is again!) Davis’ experiment with Sterne. Like Davis, the remediators are working across an historical gap between time-feelings, transforming the internal temporality of Chrétien’s verse to fit their own prosaic times. Dames speculates on the reasons for this transformation. Could it be that the new and uncertain ruling clique in Burgundy – ‘freshly arrived at what would be its historical apex’ – preferred these ‘modes of intense now-time’ to the subtle continuities of Chrétien’s verse? Admitting the possibility of such an ‘ideological effect’, Dames also notes that it is equally likely that these ‘new temporalities’ were simply an ‘accident’. &lt;/p&gt;
      &lt;p&gt;Here one notices a difference between Dames’ previous books and The Chapter, whose broader subject matter perhaps helped it to become a finalist for the National Book Critics Circle Award. As brilliant works of literary history, Amnesiac Selves and The Physiology of the Novel both have the density of specialist knowledge and the sensitivity of immersive textual studies. Each book reconstructs a forgotten discourse: the first book reassembles the understanding of memory in the Victorian period, as explored through close readings of key Victorian novelists and scientific writers; the second builds on this interest by turning to the forgotten paradigm of ‘physiological’ novel theory and its exemplars, the philosopher-scientist-critics GH Lewes, ES Dallas, and Alexander Bain, who explored the embodied rhythms of reading. The physiological basis for a literary theory of form was ultimately swept away by more abstract formalisms espoused, on the one hand, by Henry James and his acolyte Percy Lubbock, and, on the other, by the practico-critical poetics of IA Richards (who effectively banished the novel from the classroom). Though Dames’ close readings in The Chapter are no less attentive and sinuous than in these earlier books, they are perforce more limited by the widened scope. I don’t intend to downplay the brilliance of Dames as a reader of individual texts or as a literary historian. However, as the study twists and turns, the density of historical detail together with the vast scope can at times induce a kind of mental torsion, with the dual impulses to historicise and taxonomise pulling in different directions.&lt;/p&gt;
      &lt;p&gt;In any case, the taxonomic conclusion Dames draws from the Burgundian remediators of Chrétien is that while their clumsy cuts are just that – cuts in a continuous weave – Caxton’s interventions are more like the ‘fade’, offering ‘aeration’ to the narrative text. In this respect Caxton’s edits are oriented not towards reference, but ‘narrative progression and rhythm’. The paradoxical outcome of this intervention is to unify Malory’s text precisely by dividing it; the Morte now comprises ‘semi-discrete moments in a single process, rather than entirely different moments’. Unification-through-division of this sort highlights two logics of narrative time: discontinuous and immersive reading. Chaptering itself comes to generate a ‘feeling of presentness’ by adding white space, a species of visual fermata between narrative actions – ‘emptiness [with] a temporal intensity.’&lt;/p&gt;
      &lt;p&gt;In their evocation of ‘presentness’, blank intensities of this kind recall a much longer-running theological dispute – between Augustine and the great English theologian Bede – on the divisibility of time. Where, after all, is the present? For Augustine, it is impossible to isolate something like ‘presentness’, for it is composed – as he put it in the Confessions – of ‘fugitive moments’, suspended in the future or always being sucked away into the past. The present is thus not measurable by a distinctive unit. Bede, in his eighth-century work The Reckoning of Time, argued to the contrary that there is a ‘minimal’ or ‘atomic’ unit of time. He made his case through a thought experiment. Say you are just about to be punched in the face. As a reflex, you flinch and close your eyes. Between these two moments – that ‘tiniest interval of time in which the lids of our eyes move when a blow is launched’ – is where ‘Bede’s present’ may be found: the atomic unit of presentness. Dames’ point is not that this theological argument directly influenced Caxton and the Burgundian prosateurs, but rather that the disagreement between the two great theologians reflects different investments in literary forms and their relationships to subjectivity in time. For Augustine a poem ‘held entire’ in the mind of a reciter approximates divine omniscience; for Bede, meanwhile, the atomic present is best accessed via a ‘punctuated continuity and directionality’ that might just be the hallmark of well-divided prose – consequently it is ‘seriality, not the transcendence of seriality, [that] is our access to the divine’. It is only in interrupting the present that we are able to perceive it.&lt;/p&gt;
      &lt;p&gt;But it is left to the early novel (as an historian of the form, Dames is candid about this bias) to develop fully the space between Augustine’s durationless void and Bede’s serial present. Leaping forward another two hundred-odd years, then, Dames shows this binary of discontinuous and immersive reading exploding into an array of conceptual possibilities. ‘The eighteenth-century synthesis’, as Dames calls it, spans the period from the picaresque to the first flourishing of the English novel in the middle of the eighteenth century, with the antics of Sterne and Henry Fielding. Functions inherited from older reference-based chapters are here experimentally set in tension with the narrative innovations first explored in the fifteenth-century remediations: the eighteenth-century chapter struggles with the relationship between the strange and the commonplace, the ‘striking and singular’ and the ‘categorizable’. Hence the initial distinction between discontinuous and immersive reading turns out to contain other oppositions that structure it in turn: between space and time; and between the time narrated and the time it takes to narrate or read.&lt;/p&gt;
      &lt;p&gt;Figuring all this is that moment on the staircase from the middle of Tristram Shandy, a kind of novelistic freezeframe, in which Sterne fixes Walter Shandy in place to reflect upon chaptering. In Dames’ account, this metachapter makes explicit the chapter’s full conceptual field: it has a direct address; it narrates both an incident and an interruption. What stands out as the real ‘heart’ of the metachapter is the staircase itself, which serves as a kind of symbolic definition of the chapter’s function. The staircase ‘captures the chapter’s double chronometry, that tension expressed by the simultaneous binaries of space versus time and narrated versus narrating times’. Fielding famously compared his chapters to inns along the road of a long journey, where the reader may ‘stop and take a glass’, but Dames thinks the staircase a better figure. Fielding’s coach trip is merely ‘linear, starting and stopping’; Sterne’s staircase, on the other hand, ‘unpacks two complementary but opposed dimensions’. Walter and Toby head down the stairs, troping narrative progress, while at the same time the sequence of steps and landings displays the segmentation of linearity ‘into discrete stages’. Sterne’s novel is a kind of ‘funhouse mirror’ of temporality: instead of proceeding steadily along a horizontal axis, our temporal schema is thrown down the stairs.&lt;/p&gt;
      &lt;p&gt;Later, in what JGA Pocock once called the ‘second eighteenth century’, the so-called Age of Revolutions, the chapter mutates again. Now ‘elongated’, the chapter is studied in two works that each seem in different ways to dissolve its earlier functions. In The Interesting Narrative of Olaudah Equiano (1789), the famous autobiography of a Nigerian slave who eventually regained his freedom and lived in Britain, Dames observes a mismatch between the protocols of chaptering and the life that these protocols divide up. Equiano’s chapters offer extensive summaries in the manner of a picaresque novel, but seem at the same time to show the inefficacy of that paratextual structure for capturing the experience of domination and eventual manumission. ‘How then to describe the chapter in Equiano, or more bluntly, why bother to do so?’ It is perhaps relevant precisely because the apparent orderliness of chaptering – its ability meaningfully to sculpt time – is shown, against the absolute alienation of slavery, to be unfit for its usual purpose of segmentation. Thus, the intensively expository chapter summaries of the Narrative not only fail to coordinate with the abbreviated summaries in the table of contents, but they also introduce chapters of far greater length (on average, Dames tells us, these are 6,500 words: up to four times longer than is typical for this period). So, then, what is the meaning of this technical decision? ‘To say,’ Dames writes, coming perilously close to ventriloquising Equiano, ‘a life cannot be measured this way, not this kind of life.’&lt;/p&gt;
      &lt;p&gt;As the self-testimony of a former slave, published in the same year as the storming of the Bastille, Equiano’s Narrative is certainly a sign of the times. It is perhaps as iconic a testament to the ‘new epoch’ of the nineteenth century as Girodet’s portrait of Jean-Baptiste Belley, a former slave from Saint-Domingue who would eventually be elected to the French National Convention. ‘New epoch’: this is the legendary, and perhaps apocryphal, phrase of Goethe, uttered in response to the defeat of the Prussians at Valmy in 1792. ‘From this place and from this day a new epoch in world history begins and you can say you were there to see it.’ We might observe that he, for one, did not reach here for the metaphor of the chapter – too ‘partial, fleeting, unhistorical’, according to Dames, to register this period’s epochal shifts. In Goethe’s Wilhem Meister’s Apprenticeship (1795-96), for instance, the chapter becomes even more elongated (one of them is 20,000 words!), doubling in size in the novel’s second half, which was composed after Valmy. Wilhem Meister’s Apprenticeship is a ‘triple turning point’, tying together ‘a world-historical transition, a maturational transition’, and a ‘career transition’ as Goethe, now older and on the other side of the revolution, has to produce fresh material rather than merely revising old writing. It is the very incongruity and ‘dilation’ of the chapter that ‘itself is historical’. Jane Austen’s career is also adduced as an example of the eighteenth century’s passing into the nineteenth, with the three youthful novels drafted in the 1790s averaging chapter lengths of around 2,000 words, while the ‘mature’ novels of the 1810s are nearer 3,500.&lt;/p&gt;
      &lt;p&gt;However sceptical we might like to be about periodisation, and nasty but inevitable grand narratives, it’s observable that history has, well, happened; historical experience makes ‘norms’ normal, and it is potentially why – to return to Davis’ question with which I began – more people still read Austen for pleasure than Smollett, Fielding, Defoe, or, um, John Bunyan. Not unrelatedly, I recently invited some students to read paragraphs from the fourteenth, fifteenth, sixteenth, seventeenth, and eighteenth centuries (respectively, Margery Kempe, Edmund Spenser, Margaret Cavendish, Eliza Haywood, and Sterne: I welcome criticisms of my selections) and one of them said, in so many words, ‘Perhaps some things are forgotten for a reason.’ Perhaps. But we might also wonder: to what extent do novels instruct their readers in how to think, feel, and act? &lt;/p&gt;
      &lt;p&gt;This has been one of the questions that Dames has posed most insistently across his career, with a special emphasis on the contributions of the Victorian novel to readerly subjectivity. At the end of Amnesiac Selves, he speculates on the way that Victorian fiction inculcates a special kind of nostalgia – its warm selective memory is the flipside of the alienating nausea of the historical difference that makes you want to throw a book out the window (or, in homage to Sterne, down the stairs). Yet, as Dames noted then, the cultural prestige of Victorian fiction is ‘increasingly seen in an elegiac manner, as a strange fact that, as the twenty-first century begins, will not last much longer’. As the nineteenth century disappears further and further from view, ‘the Victorians will eventually, if belatedly, make Victorian fiction stranger and less attractive’. Since the publication of Amnesiac Selves in 2000, the Victorians have only receded further away from us in time.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45077735</guid></item><item><title>Six months into tariffs, businesses have no idea how to price anything</title><link>https://www.wsj.com/business/retail/trump-tariff-business-price-impact-37b630c8</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45077937</guid></item><item><title>Affiliates flock to scam gambling machine</title><link>https://krebsonsecurity.com/2025/08/affiliates-flock-to-soulless-scam-gambling-machine/</link><description>&lt;doc fingerprint="91f20839d99e32c8"&gt;
  &lt;main&gt;
    &lt;p&gt;Last month, KrebsOnSecurity tracked the sudden emergence of hundreds of polished online gaming and wagering websites that lure people with free credits and eventually abscond with any cryptocurrency funds deposited by players. We’ve since learned that these scam gambling sites have proliferated thanks to a new Russian affiliate program called “Gambler Panel” that bills itself as a “soulless project that is made for profit.”&lt;/p&gt;
    &lt;p&gt;The scam begins with deceptive ads posted on social media that claim the wagering sites are working in partnership with popular athletes or social media personalities. The ads invariably state that by using a supplied “promo code,” interested players can claim a $2,500 credit on the advertised gaming website.&lt;/p&gt;
    &lt;p&gt;The gaming sites ask visitors to create a free account to claim their $2,500 credit, which they can use to play any number of extremely polished video games that ask users to bet on each action. However, when users try to cash out any “winnings” the gaming site will reject the request and prompt the user to make a “verification deposit” of cryptocurrency — typically around $100 — before any money can be distributed.&lt;/p&gt;
    &lt;p&gt;Those who deposit cryptocurrency funds are soon pressed into more wagering and making additional deposits. And — shocker alert — all players eventually lose everything they’ve invested in the platform.&lt;/p&gt;
    &lt;p&gt;The number of scam gambling or “scambling” sites has skyrocketed in the past month, and now we know why: The sites all pull their gaming content and detailed strategies for fleecing players straight from the playbook created by Gambler Panel, a Russian-language affiliate program that promises affiliates up to 70 percent of the profits.&lt;/p&gt;
    &lt;p&gt;Gambler Panel’s website gambler-panel[.]com links to a helpful wiki that explains the scam from cradle to grave, offering affiliates advice on how best to entice visitors, keep them gambling, and extract maximum profits from each victim.&lt;/p&gt;
    &lt;p&gt;“We have a completely self-written from scratch FAKE CASINO engine that has no competitors,” Gambler Panel’s wiki enthuses. “Carefully thought-out casino design in every pixel, a lot of audits, surveys of real people and test traffic floods were conducted, which allowed us to create something that has no doubts about the legitimacy and trustworthiness even for an inveterate gambling addict with many years of experience.”&lt;/p&gt;
    &lt;p&gt;Gambler Panel explains that the one and only goal of affiliates is to drive traffic to these scambling sites by any and all means possible.&lt;/p&gt;
    &lt;p&gt;“Unlike white gambling affiliates, we accept absolutely any type of traffic, regardless of origin, the only limitation is the CIS countries,” the wiki continued, referring to a common prohibition against scamming people in Russia and former Soviet republics in the Commonwealth of Independent States.&lt;/p&gt;
    &lt;p&gt;The program’s website claims it has more than 20,000 affiliates, who earn a minimum of $10 for each verification deposit. Interested new affiliates must first get approval from the group’s Telegram channel, which currently has around 2,500 active users.&lt;/p&gt;
    &lt;p&gt;The Gambler Panel channel is replete with images of affiliate panels showing the daily revenue of top affiliates, scantily-clad young women promoting the Gambler logo, and fast cars that top affiliates claimed they bought with their earnings.&lt;/p&gt;
    &lt;p&gt;The apparent popularity of this scambling niche is a consequence of the program’s ease of use and detailed instructions for successfully reproducing virtually every facet of the scam. Indeed, much of the tutorial focuses on advice and ready-made templates to help even novice affiliates drive traffic via social media websites, particularly on Instagram and TikTok.&lt;/p&gt;
    &lt;p&gt;Gambler Panel also walks affiliates through a range of possible responses to questions from users who are trying to withdraw funds from the platform. This section, titled “Rules for working in Live chat,” urges scammers to respond quickly to user requests (1-7 minutes), and includes numerous strategies for keeping the conversation professional and the user on the platform as long as possible.&lt;/p&gt;
    &lt;p&gt;The connection between Gambler Panel and the explosion in the number of scambling websites was made by a 17-year-old developer who operates multiple Discord servers that have been flooded lately with misleading ads for these sites.&lt;/p&gt;
    &lt;p&gt;The researcher, who asked to be identified only by the nickname “Thereallo,” said Gambler Panel has built a scalable business product for other criminals.&lt;/p&gt;
    &lt;p&gt;“The wiki is kinda like a ‘how to scam 101’ for criminals written with the clarity you would expect from a legitimate company,” Thereallo said. “It’s clean, has step by step guides, and treats their scam platform like a real product. You could swap out the content, and it could be any documentation for startups.”&lt;/p&gt;
    &lt;p&gt;“They’ve minimized their own risk — spreading the links on Discord / Facebook / YT Shorts, etc. — and outsourced it to a hungry affiliate network, just like a franchise,” Thereallo wrote in response to questions.&lt;/p&gt;
    &lt;p&gt;“A centralized platform that can serve over 1,200 domains with a shared user base, IP tracking, and a custom API is not at all a trivial thing to build,” Thereallo said. “It’s a scalable system designed to be a resilient foundation for thousands of disposable scam sites.”&lt;/p&gt;
    &lt;p&gt;The security firm Silent Push has compiled a list of the latest domains associated with the Gambler Panel, available here (.csv).&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45078530</guid></item><item><title>Enrollment at trade schools is expected to grow 6.6% a year</title><link>https://finance.yahoo.com/news/ai-cant-install-an-hvac-system-why-gen-z-is-flocking-to-jobs-in-the-trades-171735856.html</link><description>&lt;doc fingerprint="3a1151db1e4689ec"&gt;
  &lt;main&gt;
    &lt;p&gt;As AI threatens white-collar workers and hits some college graduates looking for entry-level roles, young people are pouring into blue-collar job training programs.&lt;/p&gt;
    &lt;p&gt;Before the pandemic, the trade school market “had been largely stagnant,” according to a March report from the higher education marketing and research firm Validated Insights. Now, fall enrollment at trade schools is expected to grow 6.6% a year.&lt;/p&gt;
    &lt;p&gt;“There’s nothing wrong with blue collar. There’s nothing wrong with getting your hands a little dirty and sweating a little bit, and making a little bit of money in the process,” said David Rames, senior product manager at Midea, a producer of major home appliances like air conditioners and fridges that has teamed up with more than a dozen trade schools to help train upcoming HVAC technicians.&lt;/p&gt;
    &lt;p&gt;“We don’t have to worry about AI,” he said, “because AI can’t install an HVAC system.”&lt;/p&gt;
    &lt;p&gt;Trade schools are just one option for people looking to get into work like welding, plumbing, and HVAC installation. Enrollment at public two-year community college programs focused on vocational and trade programs has surged nearly 20% since 2020, compared to a 2.1% increase at public four-year institutions, according to the National Student Clearinghouse Research Center. And registered apprenticeships, where trainees can earn money while they learn, have similarly been on the rise over the past several years.&lt;/p&gt;
    &lt;p&gt;And, because there’s a shortage of HVAC workers and high demand for their services, “the price for HVAC contractors has risen greatly,” said Rames.&lt;/p&gt;
    &lt;p&gt;That’s not the only trade that can pay well, especially depending on the number of hours worked and years of experience gained. Rames noted that after working in the plumbing industry, his son had $55,000 excess cash to park in long-term investments at 22 years old.&lt;/p&gt;
    &lt;p&gt;“When I tell these kids these stories, their eyes get huge,” Rames said.&lt;/p&gt;
    &lt;p&gt;Pivoting to the trades&lt;/p&gt;
    &lt;p&gt;In a 1,000-person survey from Zety, an online resume templates service, more than half of Gen Z workers said they were seriously considering blue-collar or skilled trade fields. AI, as well as blue-collar jobs’ pay and opportunities, factored into their thinking.&lt;/p&gt;
    &lt;p&gt;Jasmine Escalera, a career expert at Zety, sees this shift as part of an overall “AI-xiety pivot,” where young people are rethinking their careers and whether a degree is worthwhile. She noted that on top of fears about AI replacing entry-level positions, young people may also be less interested in climbing the corporate ladder and eager to avoid the woes of the jobless college grads they see on social media.&lt;/p&gt;
    &lt;p&gt;“When it comes to the safe job that will always exist, I don’t know if there are many of those anymore,” Escalera said. “I think a lot of positions are going to be changed due to AI. Whether they will completely disappear, we don’t know.”&lt;/p&gt;
    &lt;p&gt;Gen Z workers may now wonder why they should go into debt for a bachelor’s degree to join careers that may look drastically different several years from now, thanks to technological advancements.&lt;/p&gt;
    &lt;p&gt;What feels more certain: “Plumbers will always have jobs,” Escalera said.&lt;/p&gt;
    &lt;p&gt;A paper this month from Stanford University researchers found there have already been “substantial declines in employment for early-career workers (ages 22-25) in occupations most exposed to AI,” like software engineers, while employment trends for less-exposed occupations like nursing aides were stable or growing.&lt;/p&gt;
    &lt;p&gt;Entering the field&lt;/p&gt;
    &lt;p&gt;Trades jobs aren’t all roses, though. In the Zety survey, 38% of Gen Zers cited “physical labor demands as their biggest hesitation” in going totally blue collar.&lt;/p&gt;
    &lt;p&gt;Still, young people remain interested. Brandon Milligan, the chief operations officer at StrataTech Education Group, which operates several skilled trade schools, is seeing a growing student population that includes women, recent high school graduates, and even some people switching careers. Overall enrollment was up 7% in July from a year ago.&lt;/p&gt;
    &lt;p&gt;“Typically, our students are able to start their education journey and, for a relatively low cost compared to traditional education, attend a seven- to nine-month program and immediately get to working,” Milligan said. “It’s very attractive for someone who is not of the mindset to invest four to five years pursuing a bachelor’s degree and … who really wants to work with their hands.”&lt;/p&gt;
    &lt;p&gt;Their programs, which include HVAC, welding, electrical work, and more, cost about $20,000 to $25,000. The electrical program in particular is very popular, he said.&lt;/p&gt;
    &lt;p&gt;David McLean, 23, has graduated from StrataTech’s Tulsa Welding School in Jacksonville twice with four total certifications in welding, electrical, HVAC, and solar. Based currently in Virginia Beach, Va., he now works as an electrician installing security systems.&lt;/p&gt;
    &lt;p&gt;Starting out, electrical work can pay $20 to $30 hourly, he said, but ramps up to $45 and more with experience. McLean’s job is also set to pay him to go back to school to take an online project management course and is helping him with past student loan payments. He expects to be salaried soon.&lt;/p&gt;
    &lt;p&gt;“The pay is absolutely amazing — and the workload,” McLean said.&lt;/p&gt;
    &lt;p&gt;With a career in the trades, he’s been able to invest in three properties.&lt;/p&gt;
    &lt;p&gt;“Electrical will be the reason why I buy my fourth one next year,” he said.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45078651</guid></item><item><title>Hurricane category 6 could be introduced under new storm severity scale</title><link>https://www.livescience.com/planet-earth/hurricanes/now-is-the-time-hurricane-category-6-could-be-introduced-under-new-storm-severity-scale</link><description>&lt;doc fingerprint="230489bd2c893e8d"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;'Now is the time': Hurricane category 6 could be introduced under new storm severity scale&lt;/head&gt;
    &lt;p&gt;The current hurricane classification does not consider storm surge and rainfall risks, which cause almost 80% of hurricane-related deaths. A new scale could help people better prepare for storms.&lt;/p&gt;
    &lt;p&gt;A new hurricane categorization system could help people better prepare for storms by incorporating risks from storm surges and rainfall into the categories, a study published this month reveals.&lt;/p&gt;
    &lt;p&gt;Storm surges — elevated seawater levels near coasts — and rainfall cause almost 80% of hurricane deaths, yet they are not accounted for in the Saffir-Simpson Hurricane Wind Scale (SSHWS), which forecasters currently use to categorize a hurricane's severity and plays a key role in communicating hurricane risk to the public. Some experts have previously argued that the threat of storms is not always properly reflected in the SSHWS's 1 to 5 category ratings, which are based solely on wind speed.&lt;/p&gt;
    &lt;p&gt;"There have been too many instances of incredible loss of life and destruction because a low category number on the SSHWS [...] did not match the danger of the storm," Jennifer Collins, a professor in the School of Geosciences at the University of South Florida and co-author of the new study, said in a statement.&lt;/p&gt;
    &lt;p&gt;The SSHWS estimates potential property damage from sustained wind, ranging from "some damage" in a Category 1 hurricane to "catastrophic damage" in a Category 4 or 5 storm. But property damage isn't the only potentially deadly effect of a hurricane. A low-category hurricane may still cause a tremendous tidal surge and unleash torrential rain, triggering devastating floods and other hazards.&lt;/p&gt;
    &lt;p&gt;One example is 2005's Hurricane Katrina, which was listed as a Category 3 based on wind speeds. But storm surge and rainfall were responsible for most of the 1,800 deaths caused by Katrina and contributed hugely to the $125 billion in damage, according to the new study.&lt;/p&gt;
    &lt;p&gt;Another example is Hurricane Florence, which made landfall in South Carolina in 2018 as a Category 1. The low danger rating did not alert communities to the catastrophic flooding that killed 55 people across the southeastern U.S., the researchers said.&lt;/p&gt;
    &lt;p&gt;Get the world’s most fascinating discoveries delivered straight to your inbox.&lt;/p&gt;
    &lt;p&gt;"Frequently, people use the storm's category to decide whether to evacuate," Collins said. "That's incredibly dangerous because if they hear it's only a tropical storm or Category 1, too often no alarm bells go off, and they see no cause for concern."&lt;/p&gt;
    &lt;p&gt;To address the SSHWS's shortcomings, Collins and colleagues developed an alternative hurricane warning system in 2021. Dubbed the Tropical Cyclone Severity Scale (TCSS), this system has six categories and takes into account wind speed, storm surge and rainfall — the three biggest hazards from hurricanes.&lt;/p&gt;
    &lt;p&gt;The TCSS assigns scores between 1 and 5 to each of the three hazards depending on their predicted severity for a given hurricane. These scores are then combined into a final score, which is established using three rules in different scenarios.&lt;/p&gt;
    &lt;p&gt;First, the final score is never lower than the highest of the three individual hazard scores. Second, if two individual hazards have the same scores of 3 or higher, then the final score increases by one — so, if storm surge has a score of 2 but wind and rainfall are both 3, then the hurricane is classed as a Category 4. The third rule is that a final score of 6 is given if either two hazards have scores of 5, or if two hazards have scores of 4 and the third is a 5.&lt;/p&gt;
    &lt;p&gt;"The higher category is important," Collins said. "Many people base their decision to evacuate on that number, not just the details of the hazard."&lt;/p&gt;
    &lt;head rend="h2"&gt;A "more realistic" system&lt;/head&gt;
    &lt;p&gt;Researchers have been working on the TCSS for several years, but the new study looked to confirm its effectiveness at warning the public of a hurricane's dangers. To test their warning system, Collins and her colleagues sent 4,000 participants living along the Gulf and East coasts forecasts for 10 fictitious hurricanes affecting their communities.&lt;/p&gt;
    &lt;p&gt;Half of the participants received warnings in the SSHWS format, while the other half received warnings using the TCSS system. They then completed an online quiz about how they would react in the different scenarios. The team’s findings were published Aug. 19 in the journal Scientific Reports.&lt;/p&gt;
    &lt;p&gt;Participants who were sent TCSS forecasts were more likely to identify the main hazard from a hurricane correctly, and significantly more likely to evacuate for non-wind hazards than those who were sent SSHWS forecasts, according to the study.&lt;/p&gt;
    &lt;p&gt;Correct identification of the main hazard boosted participants' intent to take relevant precautions, such as shielding their houses against flooding with sandbags and erecting window protections against the wind. On the other hand, participants who had incomplete information about a storm were more likely to miscalculate risks or take no measures at all.&lt;/p&gt;
    &lt;p&gt;The results suggest that shifting away from the SSHWS would improve the public's understanding of hurricane risks and lead to more informed decision-making ahead of storms, Collins said.&lt;/p&gt;
    &lt;p&gt;"I'm fairly optimistic that now is the time," she said. "We now know many people make decisions based on the category messaging, so we need to ensure that we are communicating with a scale which is more realistic of the severity of the hurricane."&lt;/p&gt;
    &lt;p&gt;Sascha is a U.K.-based staff writer at Live Science. She holds a bachelor’s degree in biology from the University of Southampton in England and a master’s degree in science communication from Imperial College London. Her work has appeared in The Guardian and the health website Zoe. Besides writing, she enjoys playing tennis, bread-making and browsing second-hand shops for hidden gems.&lt;/p&gt;
    &lt;p&gt;You must confirm your public display name before commenting&lt;/p&gt;
    &lt;p&gt;Please logout and then login again, you will then be prompted to enter your display name.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45079065</guid></item><item><title>Scottish brothers finish mammoth row across Pacific Ocean after 139 days</title><link>https://www.abc.net.au/news/2025-08-30/scottish-maclean-brothers-finish-pacific-ocean-row/105711488</link><description>&lt;doc fingerprint="af147076cb91c49d"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Scottish brothers finish mammoth row across Pacific Ocean after 139 days&lt;/head&gt;&lt;p&gt;After 139 days at sea, three Scottish brothers have set a new world record by completing the first and fastest unsupported row across the Pacific Ocean.&lt;/p&gt;&lt;p&gt;Ewan, Jamie and Lachlan McClean rowed more than 14,000 kilometres from Lima, Peru, to Cairns, becoming the first team ever to complete the full crossing from South America to Australia.&lt;/p&gt;&lt;p&gt;The previous record of 159 days had been set in 2014 by Russian rower Fedor Konyukhov.&lt;/p&gt;&lt;p&gt;Ewan told the ABC the trip was "pretty overwhelming" upon arrival on Australian shores.&lt;/p&gt;&lt;p&gt;"We're still got our sea legs, so yeah, wobbling all over the place to be honest, but very happy to be ashore," he said.&lt;/p&gt;&lt;p&gt;The brothers took on the challenge to raise funds for clean water projects in Madagascar, raising more than 795,000 pounds ($1.64m) so far to help 40,000 people.&lt;/p&gt;&lt;p&gt;This caught the attention of many celebrities, including Mark Wahlberg, who spoke with the trio while they were at sea.&lt;/p&gt;&lt;head rend="h2"&gt;Bad weather changes plans&lt;/head&gt;&lt;p&gt;The trip was not all smooth sailing.&lt;/p&gt;&lt;p&gt;Bad weather meant the brothers could not finish at their planned destination, Sydney.&lt;/p&gt;&lt;p&gt;"The last couple of weeks have been really hard," Jamie said.&lt;/p&gt;&lt;p&gt;"Our expectations being crushed when we thought we were going to arrive and then getting hit by storm after storm, just getting knocked back, getting thrown north.&lt;/p&gt;&lt;p&gt;"To have to break the news to them [family] that, unfortunately, the weather's turned against us and we're going to be out here for a lot longer than we anticipated. That was really, really hard."&lt;/p&gt;Loading...&lt;p&gt;The brothers battled seasickness, injuries, extreme weather, a broken water maker, a faulty auto-helm, and dwindling food supplies.&lt;/p&gt;&lt;p&gt;Lachlan experienced a terrifying man-overboard incident during a night shift, when his brother Ewan quickly managed to rescue him.&lt;/p&gt;&lt;p&gt;"A side-on wave came in out of nowhere. I had like a couple of seconds to react and it just hit me," Lachlan said.&lt;/p&gt;&lt;p&gt;"Took me right off my feet. I kind of hit the life-lines on the starboard side, basically did like a backwards somersault into the water."&lt;/p&gt;&lt;p&gt;The brothers survived on freshly caught fish and freeze-dried meals prepared by Jamie, which they ran out of on Friday.&lt;/p&gt;&lt;head rend="h2"&gt;Celebrations in Cairns&lt;/head&gt;&lt;p&gt;Celebrations were underway as the brothers arrived in Cairns, with dozens of friends and family from the UK — including their mother, Sheila — joining in.&lt;/p&gt;&lt;p&gt;"It's honestly so hard to describe … it's just extremely admirable what they are doing, and they make it look like it's just another day in the office," their friend Isla Dolling said.&lt;/p&gt;&lt;p&gt;The brothers' boat, Rose Emily, named after the sister they never knew, is believed to be the fastest and lightest ocean rowing boat ever built, created with ocean rowing legend Mark Slats.&lt;/p&gt;&lt;p&gt;The trio had previously broken three world records on an Atlantic row in 2019.&lt;/p&gt;&lt;p&gt;"Ocean rowing has given us new-found appreciation for things we used to take for granted — like going for a shower, lying in bed, or simply leaning on something stationary," Jamie said.&lt;/p&gt;&lt;p&gt;"While I might miss the routine, the solitude, the sunsets, and sunrises, right now I'm just very glad to be back on land with my friends and family, who I've missed so much."&lt;/p&gt;&lt;p&gt;After nearly five months at sea, the brothers will have a well-deserved rest before attending an event at Sydney's Maritime Museum next week.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45079365</guid></item><item><title>ETFs now hold more than $3.1T worth of just top US companies</title><link>https://www.signalbloom.ai/etf/stats</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45079532</guid></item></channel></rss>