<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Tue, 23 Sep 2025 15:38:05 +0000</lastBuildDate><item><title>Gamebooks and graph theory (2019)</title><link>https://notes.atomutek.org/gamebooks-and-graph-theory.html</link><description>&lt;doc fingerprint="b28e5a636db0b3bc"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Gamebooks and graph theory&lt;/head&gt;
    &lt;p&gt;Posted on 27 October 2019 in data-science&lt;/p&gt;
    &lt;p&gt;A game book is, contrary to the usual books, a book you don't read pages sequentially. These books are read interactively. You are offered a choice after a paragraph: go to the right turn to section 7, go to the left turn to 138. That's it. Depending on the series, you might have additional rules: fight, magic, psi power, etc.&lt;/p&gt;
    &lt;p&gt;During the winter holidays, I thought a bit more about these books. They could be encoded as directed graph networks. Therefore I could probably apply a bunch of network algorithms to them to extract interesting information such as:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;the shortest path to an instant death,&lt;/item&gt;
      &lt;item&gt;the path with the most fights,&lt;/item&gt;
      &lt;item&gt;etc.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I chose for my analysis the Lone Wolf series because, luckily for me, some people have put all the books in an electronic format and it's legal. It's a story about Lone Wolf (unexpected I know) the last of his kind, a caste of warrior monks.&lt;/p&gt;
    &lt;p&gt;NB: The Dawn of the Darklords was excluded from the analysis as it was not officially released as a gamebook. It was included in the Magnamund companion.&lt;/p&gt;
    &lt;head rend="h2"&gt;TL;DR&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The Masters of Darkness has the most action packed with a possible solution path including 65 fights;&lt;/item&gt;
      &lt;item&gt;The shortest path to death is The Kingdoms of Terror with only a 5 section path;&lt;/item&gt;
      &lt;item&gt;The Caverns of Kalte is the most deadly adventure with 19 instant death sections;&lt;/item&gt;
      &lt;item&gt;The shortest adventure is Flight from the Dark with a solution path only 27 sections long;&lt;/item&gt;
      &lt;item&gt;The longest adventure which can be done is The Shadow on the Sand with a touristic path of 224 sections, more than half of the sections (400).&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Summary&lt;/head&gt;
    &lt;p&gt;Here is a summary for the 28 books I've analyzed. For now Lonewolf comprises 4 series:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Kai series: 1 to 5&lt;/item&gt;
      &lt;item&gt;Magnakai series: 6 to 12&lt;/item&gt;
      &lt;item&gt;Grand Master series: 13 to 20&lt;/item&gt;
      &lt;item&gt;New Order series: 21 to 32 (but now only 28 in project aon)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The values reported below are the average value for each category. Something interesting we can see if that from the 3rd series, there are no more cycles and the shortest path has increased on average 50% compared to the 1st and 2nd series. Also, the shortest path to death has tripled and the number of insta-death was halved.&lt;/p&gt;
    &lt;p&gt;Over time, the books might have become more focused on adventure and story but also less punishing. Having only read the first couple of books, I can't comment on this but if somebody has an opinion on this, I would be happy to hear about it and maybe update the post with your comments.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="9"&gt;
        &lt;cell role="head"&gt;series&lt;/cell&gt;
        &lt;cell role="head"&gt;shortest path&lt;/cell&gt;
        &lt;cell role="head"&gt;shortest path to death&lt;/cell&gt;
        &lt;cell role="head"&gt;path with the most fights&lt;/cell&gt;
        &lt;cell role="head"&gt;# of fight&lt;/cell&gt;
        &lt;cell role="head"&gt;# of luck&lt;/cell&gt;
        &lt;cell role="head"&gt;# of death&lt;/cell&gt;
        &lt;cell role="head"&gt;# of cycles&lt;/cell&gt;
        &lt;cell role="head"&gt;longest path&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;1-kai&lt;/cell&gt;
        &lt;cell&gt;51&lt;/cell&gt;
        &lt;cell&gt;12&lt;/cell&gt;
        &lt;cell&gt;20&lt;/cell&gt;
        &lt;cell&gt;43&lt;/cell&gt;
        &lt;cell&gt;25&lt;/cell&gt;
        &lt;cell&gt;11&lt;/cell&gt;
        &lt;cell&gt;11&lt;/cell&gt;
        &lt;cell&gt;153&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;2-magnakai&lt;/cell&gt;
        &lt;cell&gt;66&lt;/cell&gt;
        &lt;cell&gt;10&lt;/cell&gt;
        &lt;cell&gt;21&lt;/cell&gt;
        &lt;cell&gt;42&lt;/cell&gt;
        &lt;cell&gt;23&lt;/cell&gt;
        &lt;cell&gt;15&lt;/cell&gt;
        &lt;cell&gt;5&lt;/cell&gt;
        &lt;cell&gt;171&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;3-grand-master&lt;/cell&gt;
        &lt;cell&gt;95&lt;/cell&gt;
        &lt;cell&gt;37&lt;/cell&gt;
        &lt;cell&gt;18&lt;/cell&gt;
        &lt;cell&gt;40&lt;/cell&gt;
        &lt;cell&gt;37&lt;/cell&gt;
        &lt;cell&gt;7&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;163&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;4-new-order&lt;/cell&gt;
        &lt;cell&gt;97&lt;/cell&gt;
        &lt;cell&gt;30&lt;/cell&gt;
        &lt;cell&gt;12&lt;/cell&gt;
        &lt;cell&gt;27&lt;/cell&gt;
        &lt;cell&gt;43&lt;/cell&gt;
        &lt;cell&gt;6&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;156&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h1"&gt;The technical bits&lt;/head&gt;
    &lt;head rend="h2"&gt;The preparation: Turn to 1&lt;/head&gt;
    &lt;p&gt;"Turn to" are the mythic words in these game books. It's also how we will divide the different sections of text, by using regexp. There are 5 types of section and their assigned color:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;normal: you can move forward to another section (white),&lt;/item&gt;
      &lt;item&gt;luck: you are asked to test your luck and you can move forward to another section (green),&lt;/item&gt;
      &lt;item&gt;fight: you are asked to fight some monster(s) and you can move forward to another section (yellow),&lt;/item&gt;
      &lt;item&gt;death: you chose badly and you got yourself killed, you have to restart from the section 1 (red),&lt;/item&gt;
      &lt;item&gt;start/end: first section and last section (blue).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Once the sections are defined, we have to create the directed graph. To do so, I used two python libraries:&lt;/p&gt;
    &lt;head rend="h2"&gt;Extracting the interesting information: Test your Luck&lt;/head&gt;
    &lt;p&gt;I mainly used &lt;code&gt;networkx&lt;/code&gt; for the graph network analysis. It's a straightforward library and the documentation is good.&lt;/p&gt;
    &lt;head rend="h3"&gt;Do you need a DAGger?&lt;/head&gt;
    &lt;p&gt;Typically a Lonewolf adventure is the equivalent of a Directed (A)Cyclic Graph:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Directed: Lonewolf, your character, goes from the section 1 to hopefully the latest section which is depending on the book the section 300, 350 or 400, without the possibility to come back to the previous section;&lt;/item&gt;
      &lt;item&gt;Acyclic: This is not totally true for the Lonewolf series as 7 books contain cycles, a "circular" path between two nodes which a node is repeated twice. Some algorithms like the shortest path or longest path require a DAG and we need to remove the cycles before running them.&lt;/item&gt;
      &lt;item&gt;Graph: The sections are the nodes of the graph and the vertices the choices for each section.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Disconnected graphs&lt;/head&gt;
    &lt;p&gt;In several books, graphs are disconnected. It means you can't go from the section 1 to the end section (300 or 350). This indicates usually that there is an enigma or puzzle asking to add numbers discovered along the adventure and reach the section given by the number. The only way to process these graphs is to check the text notes and add the missing edges manually.&lt;/p&gt;
    &lt;head rend="h3"&gt;Cycle removal&lt;/head&gt;
    &lt;p&gt;The cycle removal is an interesting problem as it is one of the first problem to have been shown as NP-complete (NP stands for Non deterministic Polynomial time). This means that there is no known way to find a solution to solve that problem quickly and the time to find a solution grows as the size of the input grows. Nonetheless we are lucky because the data from a gamebook is usually quite small (300 to 400 nodes and 400 to 600 edges)!&lt;/p&gt;
    &lt;p&gt;The idea behind the cycle removal is simple:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;do a DFS search,&lt;/item&gt;
      &lt;item&gt;look at the nodes and their children,&lt;/item&gt;
      &lt;item&gt;if one or more children have been already visited, remove that edge.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;I was curious about what could be done with a graph analysis of such textual / interactive games. Besides applying basic algorithms to test if the gamebook is playable, I didn't find much insights from it. I would like to see if there are any correlations between the features I chose and the popularity of the gamebooks. That being said, it was a cool project to do. I brushed up on the graph theory which I never really used outside of university.&lt;/p&gt;
    &lt;head rend="h2"&gt;Future works&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Apply the same methodology to Figthing Fantasy gamebooks&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45342759</guid><pubDate>Tue, 23 Sep 2025 04:10:15 +0000</pubDate></item><item><title>Zoxide: A Better CD Command</title><link>https://github.com/ajeetdsouza/zoxide</link><description>&lt;doc fingerprint="56bb8c669bcd38dc"&gt;
  &lt;main&gt;
    &lt;p&gt;Special thanks to:&lt;/p&gt;
    &lt;p&gt;zoxide is a smarter cd command, inspired by z and autojump.&lt;/p&gt;
    &lt;p&gt;It remembers which directories you use most frequently, so you can "jump" to them in just a few keystrokes.&lt;lb/&gt; zoxide works on all major shells.&lt;/p&gt;
    &lt;p&gt;Getting started • Installation • Configuration • Integrations&lt;/p&gt;
    &lt;code&gt;z foo              # cd into highest ranked directory matching foo
z foo bar          # cd into highest ranked directory matching foo and bar
z foo /            # cd into a subdirectory starting with foo

z ~/foo            # z also works like a regular cd command
z foo/             # cd into relative path
z ..               # cd one level up
z -                # cd into previous directory

zi foo             # cd with interactive selection (using fzf)

z foo&amp;lt;SPACE&amp;gt;&amp;lt;TAB&amp;gt;  # show interactive completions (zoxide v0.8.0+, bash 4.4+/fish/zsh only)&lt;/code&gt;
    &lt;p&gt;Read more about the matching algorithm here.&lt;/p&gt;
    &lt;p&gt;zoxide can be installed in 4 easy steps:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Install binary&lt;/p&gt;&lt;p&gt;zoxide runs on most major platforms. If your platform isn't listed below, please open an issue.&lt;/p&gt;&lt;head&gt;Linux / WSL&lt;/head&gt;&lt;p&gt;The recommended way to install zoxide is via the install script:&lt;/p&gt;&lt;code&gt;curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh&lt;/code&gt;&lt;p&gt;Or, you can use a package manager:&lt;/p&gt;&lt;th&gt;Distribution&lt;/th&gt;&lt;th&gt;Repository&lt;/th&gt;&lt;th&gt;Instructions&lt;/th&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;crates.io&lt;/td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;asdf&lt;/td&gt;&lt;code&gt;asdf plugin add zoxide https://github.com/nyrst/asdf-zoxide.git&lt;/code&gt;&lt;code&gt;asdf install zoxide latest&lt;/code&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;conda-forge&lt;/td&gt;&lt;code&gt;conda install -c conda-forge zoxide&lt;/code&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;guix&lt;/td&gt;&lt;code&gt;guix install zoxide&lt;/code&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;Linuxbrew&lt;/td&gt;&lt;code&gt;brew install zoxide&lt;/code&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;nixpkgs&lt;/td&gt;&lt;code&gt;nix-env -iA nixpkgs.zoxide&lt;/code&gt;&lt;td&gt;AlmaLinux&lt;/td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;td&gt;Alpine Linux 3.13+&lt;/td&gt;&lt;td&gt;Alpine Linux Packages&lt;/td&gt;&lt;code&gt;apk add zoxide&lt;/code&gt;&lt;td&gt;Arch Linux&lt;/td&gt;&lt;td&gt;Arch Linux Extra&lt;/td&gt;&lt;code&gt;pacman -S zoxide&lt;/code&gt;&lt;td&gt;CentOS Stream&lt;/td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;del rend="overstrike"&gt;Debian 11+&lt;/del&gt;1&lt;del rend="overstrike"&gt;Debian Packages&lt;/del&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;td&gt;Devuan 4.0+&lt;/td&gt;&lt;td&gt;Devuan Packages&lt;/td&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;td&gt;Exherbo Linux&lt;/td&gt;&lt;td&gt;Exherbo packages&lt;/td&gt;&lt;code&gt;cave resolve -x repository/rust&lt;/code&gt;&lt;code&gt;cave resolve -x zoxide&lt;/code&gt;&lt;td&gt;Fedora 32+&lt;/td&gt;&lt;td&gt;Fedora Packages&lt;/td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;td&gt;Gentoo&lt;/td&gt;&lt;td&gt;Gentoo Packages&lt;/td&gt;&lt;code&gt;emerge app-shells/zoxide&lt;/code&gt;&lt;td&gt;Linux Mint&lt;/td&gt;&lt;td&gt;apt.cli.rs (unofficial)&lt;/td&gt;&lt;td&gt;Setup the repository, then&lt;/td&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;td&gt;Manjaro&lt;/td&gt;&lt;code&gt;pacman -S zoxide&lt;/code&gt;&lt;td&gt;openSUSE Tumbleweed&lt;/td&gt;&lt;td&gt;openSUSE Factory&lt;/td&gt;&lt;code&gt;zypper install zoxide&lt;/code&gt;&lt;del rend="overstrike"&gt;Parrot OS&lt;/del&gt;1&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;del rend="overstrike"&gt;Raspbian 11+&lt;/del&gt;1&lt;del rend="overstrike"&gt;Raspbian Packages&lt;/del&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;td&gt;RHEL 8+&lt;/td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;td&gt;Rhino Linux&lt;/td&gt;&lt;td&gt;Pacstall Packages&lt;/td&gt;&lt;code&gt;pacstall -I zoxide-deb&lt;/code&gt;&lt;td&gt;Rocky Linux&lt;/td&gt;&lt;code&gt;dnf install zoxide&lt;/code&gt;&lt;td&gt;Slackware 15.0+&lt;/td&gt;&lt;td&gt;SlackBuilds&lt;/td&gt;&lt;td&gt;Instructions&lt;/td&gt;&lt;td&gt;Solus&lt;/td&gt;&lt;td&gt;Solus Packages&lt;/td&gt;&lt;code&gt;eopkg install zoxide&lt;/code&gt;&lt;td&gt;Ubuntu&lt;/td&gt;&lt;td&gt;apt.cli.rs (unofficial)&lt;/td&gt;&lt;td&gt;Setup the repository, then&lt;/td&gt;&lt;code&gt;apt install zoxide&lt;/code&gt;&lt;td&gt;Void Linux&lt;/td&gt;&lt;td&gt;Void Linux Packages&lt;/td&gt;&lt;code&gt;xbps-install -S zoxide&lt;/code&gt;&lt;head&gt;macOS&lt;/head&gt;&lt;p&gt;To install zoxide, use a package manager:&lt;/p&gt;&lt;th&gt;Repository&lt;/th&gt;&lt;th&gt;Instructions&lt;/th&gt;&lt;td&gt;crates.io&lt;/td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;td&gt;Homebrew&lt;/td&gt;&lt;code&gt;brew install zoxide&lt;/code&gt;&lt;td&gt;asdf&lt;/td&gt;&lt;code&gt;asdf plugin add zoxide https://github.com/nyrst/asdf-zoxide.git&lt;/code&gt;&lt;code&gt;asdf install zoxide latest&lt;/code&gt;&lt;td&gt;conda-forge&lt;/td&gt;&lt;code&gt;conda install -c conda-forge zoxide&lt;/code&gt;&lt;td&gt;MacPorts&lt;/td&gt;&lt;code&gt;port install zoxide&lt;/code&gt;&lt;td&gt;nixpkgs&lt;/td&gt;&lt;code&gt;nix-env -iA nixpkgs.zoxide&lt;/code&gt;&lt;p&gt;Or, run this command in your terminal:&lt;/p&gt;&lt;code&gt;curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh&lt;/code&gt;&lt;head&gt;Windows&lt;/head&gt;&lt;p&gt;zoxide works with PowerShell, as well as shells running in Cygwin, Git Bash, and MSYS2.&lt;/p&gt;&lt;p&gt;The recommended way to install zoxide is via&lt;/p&gt;&lt;code&gt;winget&lt;/code&gt;:&lt;quote&gt;winget install ajeetdsouza.zoxide&lt;/quote&gt;&lt;p&gt;Or, you can use an alternative package manager:&lt;/p&gt;&lt;th&gt;Repository&lt;/th&gt;&lt;th&gt;Instructions&lt;/th&gt;&lt;td&gt;crates.io&lt;/td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;td&gt;Chocolatey&lt;/td&gt;&lt;code&gt;choco install zoxide&lt;/code&gt;&lt;td&gt;conda-forge&lt;/td&gt;&lt;code&gt;conda install -c conda-forge zoxide&lt;/code&gt;&lt;td&gt;Scoop&lt;/td&gt;&lt;code&gt;scoop install zoxide&lt;/code&gt;&lt;p&gt;If you're using Cygwin, Git Bash, or MSYS2, you can also use the install script:&lt;/p&gt;&lt;code&gt;curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh&lt;/code&gt;&lt;head&gt;BSD&lt;/head&gt;&lt;p&gt;To install zoxide, use a package manager:&lt;/p&gt;&lt;th&gt;Distribution&lt;/th&gt;&lt;th&gt;Repository&lt;/th&gt;&lt;th&gt;Instructions&lt;/th&gt;&lt;td&gt;Any&lt;/td&gt;&lt;td&gt;crates.io&lt;/td&gt;&lt;code&gt;cargo install zoxide --locked&lt;/code&gt;&lt;td&gt;DragonFly BSD&lt;/td&gt;&lt;td&gt;DPorts&lt;/td&gt;&lt;code&gt;pkg install zoxide&lt;/code&gt;&lt;td&gt;FreeBSD&lt;/td&gt;&lt;td&gt;FreshPorts&lt;/td&gt;&lt;code&gt;pkg install zoxide&lt;/code&gt;&lt;td&gt;NetBSD&lt;/td&gt;&lt;td&gt;pkgsrc&lt;/td&gt;&lt;code&gt;pkgin install zoxide&lt;/code&gt;&lt;p&gt;Or, run this command in your terminal:&lt;/p&gt;&lt;code&gt;curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash&lt;/code&gt;&lt;head&gt;Android&lt;/head&gt;&lt;p&gt;To install zoxide, use a package manager:&lt;/p&gt;&lt;th&gt;Repository&lt;/th&gt;&lt;th&gt;Instructions&lt;/th&gt;&lt;td&gt;Termux&lt;/td&gt;&lt;code&gt;pkg install zoxide&lt;/code&gt;&lt;p&gt;Or, run this command in your terminal:&lt;/p&gt;&lt;code&gt;curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Setup zoxide on your shell&lt;/p&gt;&lt;p&gt;To start using zoxide, add it to your shell.&lt;/p&gt;&lt;head&gt;Bash&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;quote&gt;eval "$(zoxide init bash)"&lt;/quote&gt;&lt;head&gt;Elvish&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.elvish/rc.elv&lt;/code&gt;):&lt;quote&gt;eval (zoxide init elvish | slurp)&lt;/quote&gt;&lt;p&gt;Note zoxide only supports elvish v0.18.0 and above.&lt;/p&gt;&lt;head&gt;Fish&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;):&lt;quote&gt;zoxide init fish | source&lt;/quote&gt;&lt;head&gt;Nushell&lt;/head&gt;&lt;p&gt;Add this to the end of your env file (find it by running&lt;/p&gt;&lt;code&gt;$nu.env-path&lt;/code&gt;in Nushell):&lt;quote&gt;zoxide init nushell | save -f ~/.zoxide.nu&lt;/quote&gt;&lt;p&gt;Now, add this to the end of your config file (find it by running&lt;/p&gt;&lt;code&gt;$nu.config-path&lt;/code&gt;in Nushell):&lt;quote&gt;source ~/.zoxide.nu&lt;/quote&gt;&lt;p&gt;Note zoxide only supports Nushell v0.89.0+.&lt;/p&gt;&lt;head&gt;PowerShell&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (find it by running&lt;/p&gt;&lt;code&gt;echo $profile&lt;/code&gt;in PowerShell):&lt;quote&gt;Invoke-Expression (&amp;amp; { (zoxide init powershell | Out-String) })&lt;/quote&gt;&lt;head&gt;Tcsh&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.tcshrc&lt;/code&gt;):&lt;quote&gt;zoxide init tcsh &amp;gt; ~/.zoxide.tcsh source ~/.zoxide.tcsh&lt;/quote&gt;&lt;head&gt;Xonsh&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.xonshrc&lt;/code&gt;):&lt;quote&gt;execx($(zoxide init xonsh), 'exec', __xonsh__.ctx, filename='zoxide')&lt;/quote&gt;&lt;head&gt;Zsh&lt;/head&gt;&lt;p&gt;Add this to the end of your config file (usually&lt;/p&gt;&lt;code&gt;~/.zshrc&lt;/code&gt;):&lt;quote&gt;eval "$(zoxide init zsh)"&lt;/quote&gt;&lt;p&gt;For completions to work, the above line must be added after&lt;/p&gt;&lt;code&gt;compinit&lt;/code&gt;is called. You may have to rebuild your completions cache by running&lt;code&gt;rm ~/.zcompdump*; compinit&lt;/code&gt;.&lt;head&gt;Any POSIX shell&lt;/head&gt;&lt;p&gt;Add this to the end of your config file:&lt;/p&gt;&lt;quote&gt;eval "$(zoxide init posix --hook prompt)"&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Install fzf (optional)&lt;/p&gt;
        &lt;p&gt;fzf is a command-line fuzzy finder, used by zoxide for completions / interactive selection. It can be installed from here.&lt;/p&gt;
        &lt;p&gt;Note The minimum supported fzf version is v0.51.0.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Import your data (optional)&lt;/p&gt;&lt;p&gt;If you currently use any of these plugins, you may want to import your data into zoxide:&lt;/p&gt;&lt;head&gt;autojump&lt;/head&gt;&lt;p&gt;Run this command in your terminal:&lt;/p&gt;&lt;code&gt;zoxide import --from=autojump "/path/to/autojump/db"&lt;/code&gt;&lt;p&gt;The path usually varies according to your system:&lt;/p&gt;&lt;th&gt;OS&lt;/th&gt;&lt;th&gt;Path&lt;/th&gt;&lt;th&gt;Example&lt;/th&gt;&lt;td&gt;Linux&lt;/td&gt;&lt;code&gt;$XDG_DATA_HOME/autojump/autojump.txt&lt;/code&gt;or&lt;code&gt;$HOME/.local/share/autojump/autojump.txt&lt;/code&gt;&lt;code&gt;/home/alice/.local/share/autojump/autojump.txt&lt;/code&gt;&lt;td&gt;macOS&lt;/td&gt;&lt;code&gt;$HOME/Library/autojump/autojump.txt&lt;/code&gt;&lt;code&gt;/Users/Alice/Library/autojump/autojump.txt&lt;/code&gt;&lt;td&gt;Windows&lt;/td&gt;&lt;code&gt;%APPDATA%\autojump\autojump.txt&lt;/code&gt;&lt;code&gt;C:\Users\Alice\AppData\Roaming\autojump\autojump.txt&lt;/code&gt;&lt;head&gt;fasd, z, z.lua, zsh-z&lt;/head&gt;&lt;p&gt;Run this command in your terminal:&lt;/p&gt;&lt;code&gt;zoxide import --from=z "path/to/z/db"&lt;/code&gt;&lt;p&gt;The path usually varies according to your system:&lt;/p&gt;&lt;th&gt;Plugin&lt;/th&gt;&lt;th&gt;Path&lt;/th&gt;&lt;td&gt;fasd&lt;/td&gt;&lt;code&gt;$_FASD_DATA&lt;/code&gt;or&lt;code&gt;$HOME/.fasd&lt;/code&gt;&lt;td&gt;z (bash/zsh)&lt;/td&gt;&lt;code&gt;$_Z_DATA&lt;/code&gt;or&lt;code&gt;$HOME/.z&lt;/code&gt;&lt;td&gt;z (fish)&lt;/td&gt;&lt;code&gt;$Z_DATA&lt;/code&gt;or&lt;code&gt;$XDG_DATA_HOME/z/data&lt;/code&gt;or&lt;code&gt;$HOME/.local/share/z/data&lt;/code&gt;&lt;td&gt;z.lua (bash/zsh)&lt;/td&gt;&lt;code&gt;$_ZL_DATA&lt;/code&gt;or&lt;code&gt;$HOME/.zlua&lt;/code&gt;&lt;td&gt;z.lua (fish)&lt;/td&gt;&lt;code&gt;$XDG_DATA_HOME/zlua/zlua.txt&lt;/code&gt;or&lt;code&gt;$HOME/.local/share/zlua/zlua.txt&lt;/code&gt;or&lt;code&gt;$_ZL_DATA&lt;/code&gt;&lt;td&gt;zsh-z&lt;/td&gt;&lt;code&gt;$ZSHZ_DATA&lt;/code&gt;or&lt;code&gt;$_Z_DATA&lt;/code&gt;or&lt;code&gt;$HOME/.z&lt;/code&gt;&lt;head&gt;ZLocation&lt;/head&gt;&lt;p&gt;Run this command in PowerShell:&lt;/p&gt;&lt;quote&gt;$db = New-TemporaryFile (Get-ZLocation).GetEnumerator() | ForEach-Object { Write-Output ($_.Name+'|'+$_.Value+'|0') } | Out-File $db zoxide import --from=z $db&lt;/quote&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;When calling &lt;code&gt;zoxide init&lt;/code&gt;, the following flags are available:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;code&gt;--cmd&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Changes the prefix of the &lt;code&gt;z&lt;/code&gt;and&lt;code&gt;zi&lt;/code&gt;commands.&lt;/item&gt;
          &lt;item&gt;&lt;code&gt;--cmd j&lt;/code&gt;would change the commands to (&lt;code&gt;j&lt;/code&gt;,&lt;code&gt;ji&lt;/code&gt;).&lt;/item&gt;
          &lt;item&gt;&lt;code&gt;--cmd cd&lt;/code&gt;would replace the&lt;code&gt;cd&lt;/code&gt;command.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;Changes the prefix of the &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;--hook &amp;lt;HOOK&amp;gt;&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;&lt;p&gt;Changes how often zoxide increments a directory's score:&lt;/p&gt;&lt;th&gt;Hook&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;code&gt;none&lt;/code&gt;&lt;td&gt;Never&lt;/td&gt;&lt;code&gt;prompt&lt;/code&gt;&lt;td&gt;At every shell prompt&lt;/td&gt;&lt;code&gt;pwd&lt;/code&gt;(default)&lt;td&gt;Whenever the directory is changed&lt;/td&gt;&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;--no-cmd&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Prevents zoxide from defining the &lt;code&gt;z&lt;/code&gt;and&lt;code&gt;zi&lt;/code&gt;commands.&lt;/item&gt;
          &lt;item&gt;These functions will still be available in your shell as &lt;code&gt;__zoxide_z&lt;/code&gt;and&lt;code&gt;__zoxide_zi&lt;/code&gt;, should you choose to redefine them.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;Prevents zoxide from defining the &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Environment variables2 can be used for configuration. They must be set before &lt;code&gt;zoxide init&lt;/code&gt; is called.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_DATA_DIR&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;Specifies the directory in which the database is stored.&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;&lt;p&gt;The default value varies across OSes:&lt;/p&gt;&lt;th&gt;OS&lt;/th&gt;&lt;th&gt;Path&lt;/th&gt;&lt;th&gt;Example&lt;/th&gt;&lt;td&gt;Linux / BSD&lt;/td&gt;&lt;code&gt;$XDG_DATA_HOME&lt;/code&gt;or&lt;code&gt;$HOME/.local/share&lt;/code&gt;&lt;code&gt;/home/alice/.local/share&lt;/code&gt;&lt;td&gt;macOS&lt;/td&gt;&lt;code&gt;$HOME/Library/Application Support&lt;/code&gt;&lt;code&gt;/Users/Alice/Library/Application Support&lt;/code&gt;&lt;td&gt;Windows&lt;/td&gt;&lt;code&gt;%LOCALAPPDATA%&lt;/code&gt;&lt;code&gt;C:\Users\Alice\AppData\Local&lt;/code&gt;&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_ECHO&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;When set to 1, &lt;code&gt;z&lt;/code&gt;will print the matched directory before navigating to it.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;When set to 1, &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_EXCLUDE_DIRS&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;Excludes the specified directories from the database.&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;This is provided as a list of globs, separated by OS-specific characters:&lt;/p&gt;
            &lt;th&gt;OS&lt;/th&gt;
            &lt;th&gt;Separator&lt;/th&gt;
            &lt;th&gt;Example&lt;/th&gt;
            &lt;td&gt;Linux / macOS / BSD&lt;/td&gt;
            &lt;code&gt;:&lt;/code&gt;
            &lt;code&gt;$HOME:$HOME/private/*&lt;/code&gt;
            &lt;td&gt;Windows&lt;/td&gt;
            &lt;code&gt;;&lt;/code&gt;
            &lt;code&gt;$HOME;$HOME/private/*&lt;/code&gt;
          &lt;/item&gt;
          &lt;item&gt;&lt;p&gt;By default, this is set to&lt;/p&gt;&lt;code&gt;"$HOME"&lt;/code&gt;.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_FZF_OPTS&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_MAXAGE&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Configures the aging algorithm, which limits the maximum number of entries in the database.&lt;/item&gt;
          &lt;item&gt;By default, this is set to 10000.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;_ZO_RESOLVE_SYMLINKS&lt;/code&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;When set to 1, &lt;code&gt;z&lt;/code&gt;will resolve symlinks before adding directories to the database.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;When set to 1, &lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Application&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
        &lt;cell role="head"&gt;Plugin&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;aerc&lt;/cell&gt;
        &lt;cell&gt;Email client&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;alfred&lt;/cell&gt;
        &lt;cell&gt;macOS launcher&lt;/cell&gt;
        &lt;cell&gt;alfred-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;clink&lt;/cell&gt;
        &lt;cell&gt;Improved cmd.exe for Windows&lt;/cell&gt;
        &lt;cell&gt;clink-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;emacs&lt;/cell&gt;
        &lt;cell&gt;Text editor&lt;/cell&gt;
        &lt;cell&gt;zoxide.el&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;felix&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;joshuto&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;lf&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;See the wiki&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;nnn&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;nnn-autojump&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;ranger&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;ranger-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;raycast&lt;/cell&gt;
        &lt;cell&gt;macOS launcher&lt;/cell&gt;
        &lt;cell&gt;raycast-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;rfm&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;sesh&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;tmux&lt;/code&gt; session manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;telescope.nvim&lt;/cell&gt;
        &lt;cell&gt;Fuzzy finder for Neovim&lt;/cell&gt;
        &lt;cell&gt;telescope-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;tmux-session-wizard&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;tmux&lt;/code&gt; session manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;tmux-sessionx&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;tmux&lt;/code&gt; session manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;vim / neovim&lt;/cell&gt;
        &lt;cell&gt;Text editor&lt;/cell&gt;
        &lt;cell&gt;zoxide.vim&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;xplr&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;zoxide.xplr&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;xxh&lt;/cell&gt;
        &lt;cell&gt;Transports shell configuration over SSH&lt;/cell&gt;
        &lt;cell&gt;xxh-plugin-prerun-zoxide&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;yazi&lt;/cell&gt;
        &lt;cell&gt;File manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;zabb&lt;/cell&gt;
        &lt;cell&gt;Finds the shortest possible query for a path&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;zesh&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;zellij&lt;/code&gt; session manager&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;zsh-autocomplete&lt;/cell&gt;
        &lt;cell&gt;Realtime completions for zsh&lt;/cell&gt;
        &lt;cell&gt;Natively supported&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45342943</guid><pubDate>Tue, 23 Sep 2025 04:48:28 +0000</pubDate></item><item><title>Delete FROM users WHERE location = 'Iran';</title><link>https://gist.github.com/avestura/ce2aa6e55dad783b1aba946161d5fef4</link><description>&lt;doc fingerprint="ee1198109d4361d8"&gt;
  &lt;main&gt;
    &lt;p&gt;Hi! I am an Iranian Software Engineer, and in this torn paper note, I want to talk about some funny moments I had online related to the fact that I was spawned in this specific region of the world: Iran.&lt;/p&gt;
    &lt;p&gt;Back when I was a student, I got access to the Microsoft Imagine, and as a result, I got access to the Microsoft Store as a developer. This inspired me write one of my open-source projects called EyesGuard and publish it on Microsoft Store. However, one day, somebody told me that they can no longer find EyesGuard on the store.&lt;/p&gt;
    &lt;p&gt;I came to the realization that Microsoft deleted my app, my developer account, and all those comments on my app supporting me and suggesting ideas on how to improve the program. I tried to contact the support and email whoever I could, but I was ghosted. Nobody ever explained to me why, but I assume it's because of the sanctions.&lt;/p&gt;
    &lt;p&gt;Notion is a great product, and it was the primary tool I used to manage my personal notes. Not until they suddenly decided to wipe out every data related to the users residing in Iran. Hopefully, they actually responded to my support message:&lt;/p&gt;
    &lt;p&gt;It was because of sanctions. However, they told me that they will not restore the data, even if I leave Iran someday:&lt;/p&gt;
    &lt;p&gt;That said, I am very happy with my own self-hosted Siyuan now.&lt;/p&gt;
    &lt;p&gt;I read hackernews on a daily basis and I visit lots of different websites regularly. I am almost always on my VPN as I am internally firewalled by the government and externally shooed because of the sanctions, so I am probably missing some of these heart-warming messages:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Iranian IPs are blocked here, due to your decision to arm Russia with drones so that they can indiscriminately massacre civilians.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;My VPN turned off, and opening https://www.grepular.com showed me this message. I actually do not blame the people who do this. I think there is a fundamental misconception that people think because "Islamic Republic" has the word "Republic" in it, it must be a government of people in charge. That's not the case. I have yet to see anyone who actually supports Russian aggression in my real life in Iran. Funny enough, Iran's history is full of backstabs by the Russian government.&lt;/p&gt;
    &lt;p&gt;I tried contacting the author by sending this email:&lt;/p&gt;
    &lt;code&gt;Hi Mark,

I hope this message finds you well.

While browsing HackerNews, I came across your website but was greeted with this message:

&amp;gt; Iranian IPs are blocked here, due to your decision to arm Russia with drones so that they can indiscriminately massacre civilians.

I wanted to clarify that the decision to support Russia does not represent the Iranian people. That "your decision" refers to the regime, a theocratic minority that rules Iran without democratic legitimacy. The people of Iran have long protested and revolted against this regime, but unfortunately, they face brutal suppression while unarmed.

In my experience, most Iranians around me, including myself, stand firmly with Ukraine and against Russian aggression.

I’m not asking you to reconsider the IP restriction, you have your reasons and I respect that. I simply wanted to share this perspective and express my solidarity with Ukraine.

Slava Ukraini!

Best regards,
Avestura
&lt;/code&gt;
    &lt;p&gt;I got no replies from them, and I actually didn't expect one.&lt;/p&gt;
    &lt;p&gt;I woke up to the news that GitHub has removed the access of Iranians to their private repositories. Well, that was not good. I tried to launch my own self-hosted instance of Gitea to reduce the damage. However, later, GitHub announced that github is now available in Iran by securing a license from the US government, and we're now good. You see? The weather is good, the birds are singing, GitHub is free again. Fantastic!&lt;/p&gt;
    &lt;p&gt;Similarly, GitLab banned every account that once accessed from an Iranian IP, however, to this day, they never lifted the ban, even on public repositories. I guess they couldn't secure a license from the US government, or they simply never cared. Good luck to them in either case, though. GitLab is an amazing software. One can always self-host it.&lt;/p&gt;
    &lt;p&gt;The list goes on, and almost all of the services you probabelly heard of is banned here: Cloud platforms (AWS, GCP, Azure, ...), Educational platforms (coursera, udemy, etc), Payment software (stripe, paypal, ...).&lt;/p&gt;
    &lt;p&gt;I don't think any of these companies have bad intentions towards any group of people. They are a business after all. They don't hate their customers; they are just playing the game, and the game has such rules. But if someday some law or government forces me to prevent my services from a group, I'll think twice before writing those &lt;code&gt;if&lt;/code&gt; statements. I'll try to have more empathy. People behind those screens are more important than just some rows in my tables.&lt;/p&gt;
    &lt;p&gt;Important&lt;/p&gt;
    &lt;p&gt;In this text, I am NOT asking for the removal of the sanctions targeted at the Islamic Republic of Iran. I am merely remembering some moments on top of my head. For the record, I do not support the actions of the Islamic Republic, and on the contrary, I am in favor of the movements that release the people from such a mafia-like cult ruling a country with thousands of years of history. The actions of the group in charge of Iran are not defensible, and as a matter of fact, the people of Iran are the first layer of victims. Some examples are listed here. I especially feel it differently, as regime thugs put a gun to the throat of a dear person to me, and threatened to kill him if he showed up in protests.&lt;/p&gt;
    &lt;p&gt;By the way, did you know you could return &lt;code&gt;451 Unavailable For Legal Reasons&lt;/code&gt; instead of &lt;code&gt;403 Forbidden&lt;/code&gt; when you're going to ban me next time?&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45343108</guid><pubDate>Tue, 23 Sep 2025 05:30:28 +0000</pubDate></item><item><title>Altoids by the Fistful</title><link>https://www.scottsmitelli.com/articles/altoids-by-the-fistful/</link><description>&lt;doc fingerprint="67519077dbe58b9f"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Altoids by the Fistful&lt;/head&gt;&lt;p&gt;“Wh— what did you say?”&lt;/p&gt;&lt;p&gt;It’s close to six o’clock on a weekday afternoon and the bar is starting to get noisy with the after-work crowd. It’s entirely possible I misheard that last part.&lt;/p&gt;&lt;p&gt;“Altoids! I find the spearmint works a little better overall, but recently I’ve started switching flavors depending on the situation.”&lt;/p&gt;&lt;p&gt;I’ve worked with James—“Jim” as everyone on the team knows him—for a little over two years and I’m used to this dance now. He gets a kind of tunnel vision in his excitement about whatever shiny new thing has captured his attention. It’s usually pretty easy to shake him out of it.&lt;/p&gt;&lt;p&gt;“No, Jim, the part before that.”&lt;/p&gt;&lt;p&gt;He looks at me for a moment, inquisitive, before pushing his beer aside. “Here, let me show you.” He reaches underneath the table and produces his beige-on-brown Timbuk2 messenger bag. There is a small wet spot left behind from his drink, and the bag plops right onto it. I watch as one of his stubby hands unbuckles the outermost pouch while the other one pulls out a small green and white tin. I am obviously intended to see this as clearly as possible, evidenced by the way he places it front and center between us.&lt;/p&gt;&lt;p&gt;“Regular everyday Altoids, right? You take about four of them, maybe five.” He flips the lid open and traps the requisite number of small white mints between his fingertips, which he then pops into his mouth. “This is the trick; you gotta half-chew it first.” At least two tiny shards fly in my direction as he speaks these words. It is like listening to a slow K-turn executed on a road covered in gravel and seashells. Three more slow and deliberate chomps, then his bite eases. “Mmm.” The communication style switches to mime: an index finger raised in a “one moment” gesture, followed by an exaggerated point downwards while unzipping the main pouch of the bag. It takes a few seconds of rooting around before the star of this particular show is found.&lt;/p&gt;&lt;p&gt;My eyes barely have enough time to resolve the object under the dismal light at this end of the bar before it’s in his mouth. He’s chewing the full concoction now—mouth closed, thank God. The crunching softens, then fades into the din from a nearby table of sales bros laughing at their sales bro anecdote. Jim is looking at me with a kind of confident smugness I haven’t seen since I bet my buddy at Guitar Center that he couldn’t spontaneously play “Everlong” from memory. A bet I lost, I might add.&lt;/p&gt;&lt;p&gt;There is a degree of intentional spectacle to this, I’d have to imagine. Each jaw movement is deliberate. Precise. He does not break eye contact with me, though I desperately want to break it with him. I can’t though. The absurdity of the scene is absolutely hypnotizing. One final swallow, a smack of his lips, then he opens his mouth wide like a child proving that they finished all their vegetables and have earned their dessert. “Easy peasy, no problem.”&lt;/p&gt;&lt;p&gt;“That was&amp;amp;mldr;” It’s like a significant piece of my brain has just completely locked up. I’m just saying words without thinking, filling the empty air.&lt;/p&gt;&lt;p&gt;“A cat turd!” he proclaims, finishing my sentence.&lt;/p&gt;&lt;p&gt;A beat.&lt;/p&gt;&lt;p&gt;“You just ate a cat turd.” It’s all I can do in this moment to plainly restate the facts as I understand them, although the sense of alarm is definitely carrying in my voice.&lt;/p&gt;&lt;p&gt;“Yup, and it didn’t taste bad at all. The spearmint masks it completely. Watch, I’ll do another one.” My eyes widen in dread as I shake my head weakly. I didn’t want to see him do that the first time; I sure as shit don’t want to see it again.&lt;/p&gt;&lt;p&gt;“No, that’s alright,” I balk.&lt;/p&gt;&lt;p&gt;There is an awkward reach across the bag as he grabs his glass, tips it toward me in a silent toast, then takes a long swill. Whether he admits it or not, there’s evidently something that needs to be washed down. He lets out a contented sigh as the almost-empty glass thumps back down on the table. I glance down at the chicken wings and carrot sticks I had been picking at. A minute ago, they were kinda bland—merely okay by the standards of pub food. With the abrupt loss of my appetite, now they are destined for the dumpster out back.&lt;/p&gt;&lt;p&gt;He lifts the small tin of mints and gives it a little shake in front of my face. It sounds a lot more papery and a lot less metallic than I would’ve guessed. “Altoids. I’m not exaggerating when I say these have completely changed the way I work.” I follow this little miracle box as they get tucked back into the bag, the buckles snapping shut to shield them from the lustful gaze of an angry world. He pauses and looks up at me again. “Would you like to try?”&lt;/p&gt;&lt;p&gt;“No, Jim, I don’t want your cat turds.”&lt;/p&gt;&lt;p&gt;I don’t want your cat turds. Why did I say it like that? I don’t want anybody’s cat turds!&lt;/p&gt;&lt;p&gt;&amp;amp;mldr;Right?&lt;/p&gt;&lt;p&gt;“Completely changed the way I work,” he repeats mechanically, sliding his bag onto the empty seat to his left. I’m finding it quite difficult to look at Jim, so I instead follow the motions of the bag until it is completely out of my view. How many more are in there?&lt;/p&gt;&lt;p&gt;“I used to spend so much of my day on cat turds, psyching myself up, trying strategies that didn’t work, all the cleanup when I was finished. That’s all gone now. I can never go back to the old way.”&lt;/p&gt;&lt;p&gt;“I just&amp;amp;mldr; I mean&amp;amp;mldr;” My brain has started working again, at least superficially, and it has generated so many questions that I’m having a hard time selecting which one to ask first. “How long have you been eating cat turds?” A fine question for this moment, I suppose.&lt;/p&gt;&lt;p&gt;“What do you mean? I’ve always had to eat cat turds. Since I was a kid in school, on through college, in all my jobs&amp;amp;mldr; They keep giving me cat turds and I keep having to eat them, otherwise it starts to pile up and then things really get messy.”&lt;/p&gt;&lt;p&gt;His face turns slightly serious as he parses my expression, his head tilting in suspicion. “You eat cat turds too, yeah?” I choose not to answer that question. He continues anyway. “Sure. We all do. We have to, ya know?”&lt;/p&gt;&lt;p&gt;We all do.&lt;/p&gt;&lt;p&gt;Those words have been repeating in my head with the consistency of a drumline cadence. We all do.&lt;/p&gt;&lt;p&gt;“Walk sign is on to cross Pawk Avenue. Walk sign is on to cross Pawk Avenue.” I’ve heard this prerecorded voice, clearly belonging to the most disgruntled DOT Traffic Signals employee available at the time of this crosswalk’s construction, at least twice per workday for the last two years. It stirs up a half-remembered dream of a career spent shoveling dirt into a hole—something that feels more like the idea of “honest work” than what I get paid to do every day. I bet nobody on the construction crew spent an entire workday fighting around with brittle, poorly designed automation tooling like I did today.&lt;/p&gt;&lt;p&gt;I’m quickly but unintentionally refilling my conscious mind with the task I had gleefully abandoned when Jim invited me out to after-work drinks. Normally I’d be irritated to spend more of my waking life thinking about this stuff, but after what I witnessed at the bar I welcome any distraction at all.&lt;/p&gt;&lt;p&gt;“Okay. So, usually we have a string. This is one of many values inside a mapping type, within a list of similar mappings.” I’m narrating to myself silently, imagining little bits of JSON syntax stamped on rectangles that are kind of stacked on top of each other like playing cards. “But ever since the schema change in V3, sometimes the value is another mapping type that wraps the string we want&amp;amp;mldr;” I’m visualizing another square to the right of the existing one. This one is yellow, distinct from the light blue of all the others, and it never occurs to me to question why that is.&lt;/p&gt;&lt;p&gt;“But because this is actually YAML, and the value comes from a template call, both the string form and the mapping form need to be escaped and indented in a way that works in both cases.” I’m chewing on the problem in pretty much the same mindset I had during work, only now I’m walking across midtown instead of staring at a computer screen. “We could just revert that change, keep the value as JSON like it used to be and insert it verbatim&amp;amp;mldr; but DevEx owns that part and I wouldn’t want to have to fight to get that PR approved.”&lt;/p&gt;&lt;p&gt;“Piece of shit.” I speak that bit out loud without really intending to. I snap back into awareness of my surroundings and look around. Nobody was near enough to hear it. They probably wouldn’t have cared if they were.&lt;/p&gt;&lt;p&gt;It occurs to me that, whenever anybody asks me what I do for a living and I wave my hand and say “Computers,” this is what I’m trying to avoid needing to have to explain. None of these words are being used in a way that would mean anything to most people. If one were to take the time to carefully define them all and how they fit together semantically, they describe concepts so abstract and detached from any kind of tangible shared experience that you’d hit a second wall trying to explain that.&lt;/p&gt;&lt;p&gt;“Oh, but wait, we have the &lt;code&gt;nindent&lt;/code&gt; function. I could just count up the indentation level of the outer list and&amp;amp;mldr; Ah, hell, I forgot this template is transcluded into pod and deployment specs and the nesting levels would be different between the two.” I briefly try to think of which chucklefuck I could blame this design on, but truth be told I rubber-stamped enough questionable pull requests in my time here that a fair amount of this situation is a mess of my own damn making.&lt;/p&gt;&lt;p&gt;Huh. I really do wonder what I would sound like trying to explain this to somebody who had no experience in the industry. I suppose if I was very excited about it, I might come across like an energetic kid going on and on about all the different Pokémon they know about and all the special attacks and vulnerabilities. But without that spark of passion, and in its place a jaded voice tinged with frustration and contempt, I would probably just sound like a raving lunatic. These words don’t mean anything. I’m not describing something that actually exists. I’m playing the part of an observer in a universe of little floating boxes, becoming physically agitated about a superficial difference within the yellow one, and none of it is real.&lt;/p&gt;&lt;p&gt;I’m definitely not feeling the passion on this one. This code runs deep inside a build-deploy pipeline that I have no hope of ever running directly on the computer I’m using. So I write the code, push it to CI, wait for a bunch of stuff I’m not interested in to finish running, then get to watch my change fail to work for either the stupidest typo that I never should’ve made in the first place, or due to some error that is so novel that even the search engines assume I must really be having some other much more popular error instead of the one I provided. It feels like I am performing surgery using a scalpel held by a boardwalk arcade claw machine, complete with the constant squawking and shitting of project management seagulls.&lt;/p&gt;&lt;p&gt;And even if I could concisely explain all of that to my hypothetical interlocutor, there’s the even higher-level question: Why? Why did we even make this change? What was so irredeemably wrong with the last two versions of this thing that we’re now doing it all again a third time? What exactly is the goal we’re trying to achieve here? I can’t really say. It’s a question I never asked, partly because I learned a long time ago that asking questions just causes friction. Just nod and shut up. Put a +1 on a sketchy PR and get it out of here. Don’t hold up the pipeline. Recover enough stamina to face down the next eldritch nightmare that slithers its way to the top of my Jira swimlane. “Sounds great, thanks.” Thumbs-up. Grit my teeth through to the next direct deposit, convince myself it’s not so bad. Do it over and over until some ill-defined end condition is met. I’ll know it when I see it. I hope.&lt;/p&gt;&lt;p&gt;I catch myself at the tail end of a sigh. I fake like I’m yawning to stretch my upper body for a second. Approximately every muscle in my back now aches.&lt;/p&gt;&lt;p&gt;There’s this very real sense that I don’t&amp;amp;mldr; I don’t want to solve this problem. There is no intellectual reward at the end of this journey. It’s not interesting to me. This isn’t something that needs to be fixed, because it’s not a situation that ever should’ve been permitted to happen in the first place. This is just a bunch of contrived nonsense that I must work through because the broader situation dictates it. It doesn’t matter if the solution is good or elegant. It doesn’t matter if it barely works. It doesn’t matter if it causes another problem that I stub my toe on in three weeks. It’s just&amp;amp;mldr; what I have to do.&lt;/p&gt;&lt;p&gt;I stop in my tracks.&lt;/p&gt;&lt;p&gt;These kinds of problems are my cat turds.&lt;/p&gt;&lt;p&gt;Unlike Jim, though, I can’t just cram a bunch of breath mints into my face to make this go away.&lt;/p&gt;&lt;p&gt;The “down” escalator into the train station is out of service, and it has been this way all summer. A pair of orange plastic barricades block the landings at both ends. I walk down two flights of stairs alongside a half-dozen other commuters. Having concluded that the template problem simply isn’t worth thinking any further about, I’m back on the cat turds. I understand what Jim was talking about now. This has been happening for almost my entire life, even going back to my days in elementary school.&lt;/p&gt;&lt;p&gt;All of the homework assignments that were blindly graded against answer keys from the back of a Teacher Edition of the textbook: Cat turds. College admission essays where I profused a longing desire to attend the distinguished universities that my parents and guidance counselor told me I should set my ambitions toward: Cat turds. Probably hundreds of cover letters submitted alongside job applications throughout the years, skimmed by perhaps tens of internal recruiters and hiring managers: Cat turds.&lt;/p&gt;&lt;p&gt;The notion that it was a good idea to manipulate highly whitespace-sensitive YAML data with the Go &lt;code&gt;text/template&lt;/code&gt; package. CI workflows that take 75 minutes to reach the one step in the entire process that fails. Tools and interfaces that force-update and introduce breaking changes for seemingly no justifiable reason, removing or kneecapping features that were being relied on, with issue trackers guarded by thickheaded bots that dismissively auto-close feature requests that kindly ask for consideration for those use cases. Massively over-complicated software that tries to be everything to everybody, but in reality ends up being a gigantic lumbering pile of failure and frustration. Cat turds.&lt;/p&gt;&lt;p&gt;I used to love this stuff. I still do. Except&amp;amp;mldr; I don’t. Not lately, anyway. A long time ago, this was unquestionably what I wanted to do with my life. I would stay up late, pushing back my bedtime for a few more minutes with these glorious machines, hacking away on some little project. Then I’d get up early the following morning, excited to jump back into the project before my day out in the world began. I don’t even clearly remember what I was building toward, but I know it had basically zero utility or market potential. The point of doing the project was simply to do the project—to press through problems, to learn new things, and to end the day with more skills and experience than I started with.&lt;/p&gt;&lt;p&gt;At one point, I had the 7-bit ASCII table memorized. Just the decimal codes; I didn’t really understand the usefulness of the hexadecimal representations, and it never occurred to me that the hex values would work much better in mnemonics. I don’t know why I took the time to learn that. I never really used that knowledge in any real day-to-day work, and it began to fade from my mind as soon as I found some other pointless esoterica to wallpaper over it.&lt;/p&gt;&lt;p&gt;Look at me now, having to Google how to read a text file line-by-line in Python despite having done it a hundred times at this point. The knowledge is up there somewhere, I’m sure of it. I just can’t always think of the idiom in the heat of the moment. Just a little hint to jog the old brain, that’s all I need.&lt;/p&gt;&lt;p&gt;I often wonder what my Younger Self would think of me now, failing to remember a two-line snippet of code that you’d find in the first ten pages of any beginner’s guide to the language. He’d probably sneer and say I need to devote more time to studying. But I’m an adult with things to do; I can’t spend all my time just memorizing things just in case I might need the information someday. Oh, and by the way: Younger Self, if you were such a friggin’ hotshot, why did it take you fifteen years to finally wrap your head around regular expressions? What’s that? Because they were hard? So you spent all your time memorizing easy and pointless trivia rather than tackling anything that was genuinely challenging? And then building up a whole air of superiority based on the number of discrete facts you could rattle off, rather than their practical utility? What, were you trying to become a contestant on Computer Jeopardy! or something?&lt;/p&gt;&lt;p&gt;No wonder Younger Self grew up to be kind of an asshole.&lt;/p&gt;&lt;p&gt;I mean, I didn’t try to be an asshole. It’s just that I tended to gauge my own self-worth relative to others based on the only social currency we could accurately compare: the amount of “stuff” we knew. Some people memorize car engine displacements, others carry in their noggins enough digits of pi to resolve the observable universe down to the width of a hydrogen atom. I had a litany of command-line switches that I never used for anything, HTML character entity names for writing systems I couldn’t comprehend, and tales of tweaking settings deep inside the Windows 98 Device Manager just so I could brag about having been in there in the first place. I also at one time sincerely believed that maybe if I taught myself to—I’m picking one example out of many—decode Code 39 barcodes in my head, it would somehow make me cool and desirable during otherwise awkward social functions. (I did get reasonably good at it. All it takes is memorizing a couple of three-digit sequences. Having a teenager’s near-field visual acuity certainly helped.)&lt;/p&gt;&lt;p&gt;Everybody else who didn’t know those little pieces of nothing? They were the lessers. They didn’t put in the time to grind for this knowledge. They had never scaled the peaks of Mount AltaVista, nor had they knelt in the temple of the MSDN Library for Visual Studio on a banged-up pair of CD-Rs. I knew things they did not, therefore I felt I was higher-and-mightier than they were. I and I alone suffered for this knowledge. This attitude manifested itself in one of two ways: In the first case, I would barge my way into situations where my involvement wasn’t needed or appreciated, thinking I could “save” others from the pain I once had to contend with. More often than not, though, I would simply mock people for not knowing things—usually inside my own head, but sometimes outwardly on mailing lists and message boards. There were times when I judged a person to have failed to put in the necessary amount of work, so therefore they did not deserve to rise anywhere near where I considered my own level to be. It didn’t matter if the subject was deeply technical or a disagreement on the precise phrasing of a Simpsons quote. Somebody got something wrong, and it was my job to rectify that.&lt;/p&gt;&lt;p&gt;I feel bad for the people who worked on teams where Younger Self was the senior engineer. I was full of ideals and convictions back then. “No, we’re not doing that. We’re going to Do It Right instead.” I was full of piss and vinegar. “Here, give me that; I’ll just do it myself.” I was full of shit.&lt;/p&gt;&lt;p&gt;I now realize that everything I lorded over other people—all the things I gatekept without consciously understanding that this was what I was doing—I didn’t need to do that. It really didn’t help anything. For some number of people who interacted with me, I was the problem. I could’ve been more tolerant or forgiving, I could’ve said “let’s find out together,” I could’ve let other people have the fun once in a while. I could have minded my own damn business and saved everybody the hassle.&lt;/p&gt;&lt;p&gt;There were people out there who must’ve felt that I was their cat turds.&lt;/p&gt;&lt;p&gt;I’ll never be able to track down and apologize to every person I treated that way. And why did I even build that fiefdom and protect it so jealously? Why was I so insecure? Why did I have to always be right and have a ready justification for why everybody else was wrong?&lt;/p&gt;&lt;p&gt;It was just me, alone in my tiny sandbox, safe and secure behind my towering fortress of cat turds.&lt;/p&gt;&lt;p&gt;My usual train, the one packed so full that some riders have to stand in the aisles until after the first or second stop, usually leaves at 5:50. Now about three hours later, one can sometimes get an entire car to themselves. I settle down in a window seat looking out at the desolate platform. Evidently there aren’t all that many people interested in traveling across the river at this hour on a Wednesday evening. It feels nice to sit, despite the fact that I’ve probably sat for a cumulative ten hours—at least—over the course of this day.&lt;/p&gt;&lt;p&gt;As sometimes happens, another rider boards the train and enters what had up to this point been my personal rail car. He selects the aisle seat in the row directly in front of me. At least 110 other seats in this car, every single one of them empty, and his choice is to sit right here. Sigh. I could get up and move to another seat but I’m&amp;amp;mldr; exhausted. I’m here, I’m settled in, and above all I’m just completely out of ambition. I guess it’s fine as long as he doesn’t start playing music or TikTok videos without headphones.&lt;/p&gt;&lt;p&gt;A long blow from the locomotive horn, and the train begins to creep forward. Right on schedule. We’re in a tunnel deep below the city’s west side, and the view out the window is pitch black aside from the occasional glow from a mercury-vapor emergency light. On the wall beneath each of these lights, patches of graffiti framed by concrete pillars. I wouldn’t say I’ve memorized them all by heart; I can’t even read the tags on the majority of them. But they are at least familiar, and I’ve found some of them serve as convenient signposts along this portion of the trip. I’m not really paying attention to any of them tonight, instead I’m staring blankly at a little patch of window glass as the scene rolls past.&lt;/p&gt;&lt;p&gt;I refocus my eyes a bit and realize I’m looking at the reflection of a screen, or at least the top corner of one. I turn away from the window and find the source of the light. The man in front of me has opened his laptop—a chunky Dell Latitude or something very close to it—and perched it on a small lap desk fashioned from his leather bag. He opens a web browser and logs into a Microsoft account, one key at a time, hunt-and-peck style. It prompts him for his second factor and he shifts awkwardly in the seat to retrieve his phone. The login process succeeds and, after a few clicks and a fair bit of both of our finite lifetimes spent staring at loading spinners, opens what appears to be a Word document. I can’t read anything on his screen, which is more a testament to how wrecked my eyes have become than anything else, but I can see that there’s about four, perhaps five lines of unformatted text up there already. He strokes his chin while giving it a good read-through, then his hands take their position on the trackpad. Right index finger moves the cursor, left index finger does the clicking. The screen flips to another browser tab, his left hand gratuitously double-clicks on the website suggested by the first tile on the screen, and the page loads.&lt;/p&gt;&lt;p&gt;I never learned to tell any of these sites apart from each other. I see lots of people using the one with the spirograph logo. The one that looks like a cartoon butthole is also quite popular among some departments at my job. This guy is using the one that’s represented by a symmetrical color blob. Not that one, the other color blob one. Yeah.&lt;/p&gt;&lt;p&gt;He has opened a chat session that has evidently been going for some time. The text entry box at the bottom of the window waits patiently for fresh input. Letter by agonizing letter, the keys needed to express his thoughts are pressed. The most-pressed key, however, is Backspace. This man is, using the most generous language possible, not a particularly fast or accurate typist. In total, he enters about ten words before pressing Enter. A short moment later, the machine responds. Entire sentences appear in the time it took him to type a single word. Multiple paragraphs with subheadings and bulleted lists scroll into view. The screen fills completely with this fresh text. He looks at this for a moment, moves his hands back to the trackpad, and selects a complete paragraph. His finger presses down with immense force as he drags the selection area ever wider, as if his catch is in danger of wriggling through his fingers if he doesn’t hold the button down hard enough. He flips back to his Word document and pastes the paragraph. Then back to the chat window. He begins typing again. Slowly. Excruciatingly.&lt;/p&gt;&lt;p&gt;This cycle repeats several times, incrementally building his document up to four or five double-spaced pages in length. It’s not exactly a fast process, but certainly faster than if he had thought up and typed out all that content the old-fashioned way. It’s certainly plausible that he at least read everything that went into the document, but I wouldn’t be able to prove it.&lt;/p&gt;&lt;p&gt;He selects another piece of text, this one substantially smaller than the other specimens that he’d been handling up until this point. This one is pasted into a discussion thread on Teams. He waits a moment for responses, closes the lid, and the laptop goes back into his bag. The man stands up, wraps the strap over his shoulder, and walks to the front of the car as the train brakes to a full stop. This is where our paths diverge, it would seem. The doors open and he steps out into the night.&lt;/p&gt;&lt;p&gt;Alone in the train car again, with nothing interesting to eavesdrop on, my mind begins to wander again. I wonder what the purpose of that document was. Why was it being prepared? Who dictated that a half-dozen input phrases needed to be inflated into a thousand-word wall of text? Who was going to sit and read all of that, anyway? And for what purpose?&lt;/p&gt;&lt;p&gt;I really don’t know. But I do know one thing: It’s cat turds.&lt;/p&gt;&lt;p&gt;This guy obviously didn’t want to do that task. Whether that was due to lack of passion and interest, or lack of skill and ability, he had a cat turd to eat and he found a little pack of Altoids that he could use to get through it with minimal suffering. The people who have to read it? There’s a good chance they’ll be dealing with a cat turd too. Maybe they can choose to employ a chatbot to summarize it back down to his original inputs. Maybe it’ll even do a passable job preserving the essence of the guy’s prompts.&lt;/p&gt;&lt;p&gt;It makes sense why a person or group of people would flock to anything that makes life’s demands a little less difficult for themselves. You’d have to be pretty dumb to want to do a task like that manually.&lt;/p&gt;&lt;p&gt;There’s still the question, though. Why are we all eating cat turds? When did we all collectively agree that we were all a-okay with the idea that we had to subject ourselves to this constant grind of doing shit that doesn’t really need to be done to satisfy requirements that were put in place simply “because” and that seemingly only create more pointless work for other people (or ourselves!) to have to do later?&lt;/p&gt;&lt;p&gt;One of the defining characteristics of humanity is its ability to build and wield tools that make difficult tasks easier. One would presume there would also be a certain wisdom in knowing which of the difficult tasks were worth doing in the first place but&amp;amp;mldr; Well. When you presume, you make a pres out of u and me.&lt;/p&gt;&lt;p&gt;If I had known ahead of time that I’d be out this late, I would’ve brought a jacket. The early autumn air is calm but crisp, and my borough’s train platform offers very little protection from the chill. The crickets are still chirping, but their song has slowed substantially compared to how they sounded a few weeks back. I stopped parking at the station a long time ago—the monthly pass costs well over $150 now, and most days the parking lot is completely full before six o’clock in the morning anyway. It’s only a mile to the house, and this twenty-minute walk is pretty much the only exercise I get nowadays.&lt;/p&gt;&lt;p&gt;Once I cross the main boulevard at the four-way stop, it’s all suburban residential side streets. There is basically no traffic at this time of night in my sleepy little bedroom community. All the dogs have been walked, the kids have been put to bed, and the adults&amp;amp;mldr; Well, I’m sure there are at least a couple people around here drinking or smoking the memory of their cat turds away.&lt;/p&gt;&lt;p&gt;I’m no closer to anything resembling inner peace. I find I’ve grown to despise large swaths of the only thing I’ve ever been able to earn reliable income from. I tire of walking a path that has seemingly shifted beneath my feet to point toward a destination I no longer recognize. I’m embarrassed by the jerk my Younger Self used to be, and simultaneously ashamed of the energy I lost as I matured. I don’t really want to do most of what I have to do, while feeling a deep unsated need to achieve something that I have neither the stamina nor the freedom to pursue. At some point I’m going to reach down deep into the well of ambition to discover there ain’t nothing there to pull out anymore. And then?&lt;/p&gt;&lt;p&gt;Something percent of success is simply showing up. That’s roughly how the quote goes, right? I’ve heard seventy percent, ninety percent, hell, let’s call it seventy-eight. It doesn’t matter because it isn’t a real thing that can be measured in any objective way. The idea is to inspire people to at least try. Put your butt in the chair, log into Teams, trick yourself into thinking, well, I made it all the way here, might as well prune my stale Git branches or something so I can feel like I’m doing real work. Push aside distractions, shake off procrastination, kindle that tiny spark into enough momentum to break through whatever barrier is standing in the way of getting something done. If only that worked with any degree of predictability.&lt;/p&gt;&lt;p&gt;There’s a metaphor that talks about painting the backs of cabinets. The idea is that, when you’re putting paint, stain, varnish, whatever on some cabinets, there’s no need to paint the surfaces that face toward the wall. From the day the units are mounted, to a day forty years from now when they are ripped down and thrown into a construction dumpster during a subsequent kitchen renovation, nobody will see the backs of any of those cabinets. Painting them would be a waste of time and materials. Nobody would know if it was done or not.&lt;/p&gt;&lt;p&gt;“Yes, but I would know.” That’s something my Dad would often say. His tendency has always been to be overly thorough, exacting and precise in any craft he partakes in. Everything—from the doors in the house to the stripes cut into the front lawn—was always level, plumb, square, centered, polished, dust-free, squeak-free, fingerprint-free&amp;amp;mldr; He even demonstrated meticulous care in breaking down cardboard and filling up the waste bins at the curb. I still have no idea how he was able to raise two kids in that house without exploding from the chaos we brought.&lt;/p&gt;&lt;p&gt;Maybe it was genetic, or maybe I voluntarily developed it so my dad would be proud of me just like he was proud of the other things he made. Either way, I definitely started to take after him in those ways and I now recognize this same kind of care in myself all the time. Not just in the way I prefer all my clocks to read the exact correct time or my knack for always noticing the way the receptacle face isn’t exactly flush with the wall plate&amp;amp;mldr; but in a fundamental inability to not care about quality or craft. Even when the task doesn’t matter. Even if it results in an entire afternoon spent painting a piece of carpentry that nobody will ever see. I can’t not care.&lt;/p&gt;&lt;p&gt;All that stuff Younger Self struggled with—the self-superiority, the sense that I had to be the one who did it if it needed to be done correctly, the derision and borderline abuse I gave others—that was all just a big dogmatic ball of caring a whole lot about quality and craft, being rolled around by a kid who didn’t understand what to do with it. I had to work so hard to care so much, and these other people didn’t, and everything worked out for them anyway, and that wasn’t fair. Decades later, I still feel that way sometimes.&lt;/p&gt;&lt;p&gt;My parents still live in that house, surrounded by all the things my dad cared so much about. Aside from a whole bunch of trees that died and needed to be cut down to stumps, everything is still pretty much pristine. But if you start to look around, really scrutinize, you’ll start to notice some things have slipped. There’s a film of dust on the higher wall decorations. Some of the brass knobs are becoming tarnished. A few of the light bulbs in the hallway fixtures don’t match. My dad seemed tired the last time we talked, and more than once he expressed the sentiment that “everything he owns is falling apart.” Is it simply the onset of physical old age that has limited his ability to stay on top of these things, or is he beginning to leave behind his era of caring?&lt;/p&gt;&lt;p&gt;Now that I think about it, I don’t think we’ve ever really talked about how care factored into his career philosophy. I had always implicitly assumed that it was the same as it currently is with me: Work or play, it’s always there. Can’t turn it off even if I wanted to. But what if he could? What if all the care he demonstrated in projects around the house was compensation for all the things he deliberately avoided caring about at work? It would certainly explain how he was able to consistently sustain those standards. But then, that would mean that I modeled my own principles and tastes on a distorted view of my dad, untempered by whatever he didn’t let me see about his workplace persona.&lt;/p&gt;&lt;p&gt;How would I begin to—well, I don’t want to say “not care,” that sounds too extreme. But maybe&amp;amp;mldr; selectively care? To care about the things that matter, the things that spark passion and joy and remind me why I spent so much time practicing this godforsaken occupation. While at the same time recognizing the things that don’t matter, the problems for which the optimal solution is to stop insisting on having that problem in the first place. The kinds of tasks for which the 78% showing-up baseline score is plenty good enough. Tasks on which care would be utterly wasted, the cases where the cabinets are so irredeemably fucked up that the lack of paint on the back is the last thing anybody’s going to worry about. Those are the tasks that hurt the most, because I find it basically impossible to make myself care about them. It offends my soul to try to force it, and it drains me of all ambition to move onto the next potentially heartening opportunity. It’s a real problem, and I find it always has been: If I can’t care about it, I have an extremely hard time bringing myself to do it at all.&lt;/p&gt;&lt;p&gt;Well, I suppose that’s when I open a chatbot session of my own. “Hey there Chat. Uh, we’ve never spoken before but, uh&amp;amp;mldr; Well, my entire system of self-motivation just completely broke down but I still need to keep moving forward. Can you help me out of this bind?” There’s a whole discipline—they call it Prompt Engineering—that’s just a fancy form of throwing your hands up and pressing the Care About It For Me button. That’s pretty much how it works. Provide it with any cat turd under the sun, it doesn’t matter. Chat will gobble them all up for you like a coprophagic dog.&lt;/p&gt;&lt;p&gt;I’d be lying if I said the idea didn’t make my skin crawl a little. Every fiber of my being says that this is a weight to be borne by me and me alone. This is my cat turd to eat; they gave it to me. When it’s done, I can open my grinning maw and say without equivocation that I was the one who got through it. I painted the back of this cabinet. I worked way too hard and poured far too much of my blood, sweat and tears into this thing. And my reward for a job well done is&amp;amp;mldr; debilitating exhaustion, most of the time. Getting a fresh cat turd to eat tomorrow. And the day after.&lt;/p&gt;&lt;p&gt;Of course, Chat can’t really care. It does a passable job pretending like it cares, saying the words that convey the illusion of care to any reader not paying very close attention. Where do I draw the line between fostering real care, versus passing off a degraded third-generation photocopy of some tokenization of what may have at one point been somebody else’s care? Is the line simply the boundary between the tasks I’m excited to do and the ones I put off until I’ve depleted enough mental reserves to sorta care?&lt;/p&gt;&lt;p&gt;It really does feel like the average person has made a choice to abandon a great deal of care, at least in their professional capacity. Take a look around at all these people with their fake shit-eating grins, passing off a machine’s effort as their own and experiencing no consequences. Sometimes they’re rewarded for doing so. There are organizations that are beginning to mandate it now. These people aren’t eating their cat turds anymore, why am I still sitting here eating mine?&lt;/p&gt;&lt;p&gt;I round the final curve leading to the corner of my block. As I pass under the streetlight, I cast a shadow on the asphalt ahead. With each step it grows longer and more distorted. There’s a rustle from the shrubs bordering my neighbor’s driveway, and a small dark form emerges. It crosses the street halfway then abruptly stops. I stop as well. A pair of glowing yellow eyes look back at me. I stare at it, it stares at me. A possum, perhaps? Somebody’s outdoor cat? It’s just watching me, seemingly peering straight into my very soul. Can it see what I’m grappling with here? Is it passing judgement on me for thinking these thoughts? It sizes me up for a moment longer, turns its head, and becomes a black apparition once more. I struggle to track it as it continues across the street, and I lose sight of it entirely.&lt;/p&gt;&lt;p&gt;I arrive at home and shut the door behind me. Sunset was over two hours ago and it’s nearly pitch black in the hallway. I fumble around for the light switch, kick my shoes off next to the doorway, and hang my bag on its hook in the coat closet. Something grabs my attention, just above eye level, slightly overhanging the edge of the top shelf. I slide it out of its resting place and carry it into the kitchen. I sit down at the table and inspect it.&lt;/p&gt;&lt;p&gt;This object is a round metal cookie tin about twelve inches in diameter. Beneath a thin coat of dust, it is a deep red with a repeating pattern of snowmen and white snowflakes, and quite obviously once held winter holiday–themed cookies. I repurposed it many years ago to hold the only vice I currently permit myself to indulge in: a meticulously curated collection of all different types of chocolate candies. I remove the lid and set it aside. I survey the contents, a sea of differently-shaped naked chocolate morsels. I don’t remember why I chose to remove all the foil and paper wrapping before putting these in here. From my vantage point, everything looks vaguely the same—I can’t readily spot any differences between milk chocolate and dark, or those filled with caramel versus crème.&lt;/p&gt;&lt;p&gt;One particular piece near the edge catches my eye, and I carefully select it for inspection. It’s not a very pleasing color or shape—oddly asymmetrical. I roll it around between my fingers. There’s a hair on it. I hold it up to my nose and take a whiff, hoping to detect the aroma of the cacao. Try as I might, I can’t pick up any trace of its scent.&lt;/p&gt;&lt;p&gt;Come to think of it, I can’t remember the last time I smelled anything.&lt;/p&gt;« Back to Articles&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45343449</guid><pubDate>Tue, 23 Sep 2025 06:24:50 +0000</pubDate></item><item><title>The YAML Document from Hell</title><link>https://ruudvanasseldonk.com/2023/01/11/the-yaml-document-from-hell</link><description>&lt;doc fingerprint="e45100779e81da58"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The yaml document from hell&lt;/head&gt;
    &lt;p&gt;written by Ruud van Asseldonk&lt;lb/&gt;published &lt;/p&gt;
    &lt;p&gt;For a data format, yaml is extremely complicated. It aims to be a human-friendly format, but in striving for that it introduces so much complexity, that I would argue it achieves the opposite result. Yaml is full of footguns and its friendliness is deceptive. In this post I want to demonstrate this through an example.&lt;/p&gt;
    &lt;p&gt;This post is a rant, and more opinionated than my usual writing.&lt;/p&gt;
    &lt;head rend="h2"&gt;Yaml is really, really complex&lt;/head&gt;
    &lt;p&gt;Json is simple. The entire json spec consists of six railroad diagrams. It’s a simple data format with a simple syntax and that’s all there is to it. Yaml on the other hand, is complex. So complex, that its specification consists of 10 chapters with sections numbered four levels deep and a dedicated errata page.&lt;/p&gt;
    &lt;p&gt;The json spec is not versioned. There were two changes to it in 2005 (the removal of comments, and the addition of scientific notation for numbers), but it has been frozen since — almost two decades now. The yaml spec on the other hand is versioned. The latest revision is fairly recent, 1.2.2 from October 2021. Yaml 1.2 differs substantially from 1.1: the same document can parse differently under different yaml versions. We will see multiple examples of this later.&lt;/p&gt;
    &lt;p&gt;Json is so obvious that Douglas Crockford claims to have discovered it — not invented. I couldn’t find any reference for how long it took him to write up the spec, but it was probably hours rather than weeks. The change from yaml 1.2.1 to 1.2.2 on the other hand, was a multi-year effort by a team of experts:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;This revision is the result of years of work by the new YAML language development team. Each person on this team has a deep knowledge of the language and has written and maintains important open source YAML frameworks and tools.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Furthermore this team plans to actively evolve yaml, rather than to freeze it.&lt;/p&gt;
    &lt;p&gt;When you work with a format as complex as yaml, it is difficult to be aware of all the features and subtle behaviors it has. There is an entire website dedicated to picking one of the 63 different multi-line string syntaxes. This means that it can be very difficult for a human to predict how a particular document will parse. Let’s look at an example to highlight this.&lt;/p&gt;
    &lt;head rend="h2"&gt;The yaml document from hell&lt;/head&gt;
    &lt;p&gt;Consider the following document.&lt;/p&gt;
    &lt;code&gt;server_config:
  port_mapping:
    # Expose only ssh and http to the public internet.
    - 22:22
    - 80:80
    - 443:443

  serve:
    - /robots.txt
    - /favicon.ico
    - *.html
    - *.png
    - !.git  # Do not expose our Git repository to the entire world.

  geoblock_regions:
    # The legal team has not approved distribution in the Nordics yet.
    - dk
    - fi
    - is
    - no
    - se

  flush_cache:
    on: [push, memory_pressure]
    priority: background

  allow_postgres_versions:
    - 9.5.25
    - 9.6.24
    - 10.23
    - 12.13&lt;/code&gt;
    &lt;p&gt;Let’s break this down section by section and see how the data maps to json.&lt;/p&gt;
    &lt;head rend="h2"&gt;Sexagesimal numbers&lt;/head&gt;
    &lt;p&gt;Let’s start with something that you might find in a container runtime configuration:&lt;/p&gt;
    &lt;code&gt;port_mapping:
  - 22:22
  - 80:80
  - 443:443&lt;/code&gt;
    &lt;code&gt;{"port_mapping": [1342, "80:80", "443:443"]}&lt;/code&gt;
    &lt;p&gt;Huh, what happened here? As it turns out, numbers from 0 to 59 separated by colons are sexagesimal (base 60) number literals. This arcane feature was present in yaml 1.1, but silently removed from yaml 1.2, so the list element will parse as &lt;code&gt;1342&lt;/code&gt; or &lt;code&gt;"22:22"&lt;/code&gt; depending on which version your parser uses. Although yaml 1.2 is more than 10 years old by now, you would be mistaken to think that it is widely supported: the latest version libyaml at the time of writing (which is used among others by PyYAML) implements yaml 1.1 and parses &lt;code&gt;22:22&lt;/code&gt; as &lt;code&gt;1342&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;Anchors, aliases, and tags&lt;/head&gt;
    &lt;p&gt;The following snippet is actually invalid:&lt;/p&gt;
    &lt;code&gt;serve:
  - /robots.txt
  - /favicon.ico
  - *.html
  - *.png
  - !.git&lt;/code&gt;
    &lt;p&gt;Yaml allows you to create an anchor by adding an &lt;code&gt;&amp;amp;&lt;/code&gt; and a name in front of a value, and then you can later reference that value with an alias: a &lt;code&gt;*&lt;/code&gt; followed by the name. In this case no anchors are defined, so the aliases are invalid. Let’s avoid them for now and see what happens.&lt;/p&gt;
    &lt;code&gt;serve:
  - /robots.txt
  - /favicon.ico
  - !.git&lt;/code&gt;
    &lt;code&gt;{"serve": ["/robots.txt", "/favicon.ico", ""]}&lt;/code&gt;
    &lt;p&gt;Now the interpretation depends on the parser you are using. The element starting with &lt;code&gt;!&lt;/code&gt; is a tag. This feature is intended to enable a parser to convert the fairly limited yaml data types into richer types that might exist in the host language. A tag starting with &lt;code&gt;!&lt;/code&gt; is up to the parser to interpret, often by calling a constructor with the given name and providing it the value that follows after the tag. This means that loading an untrusted yaml document is generally unsafe, as it may lead to arbitrary code execution. (In Python, you can avoid this pitfall by using &lt;code&gt;yaml.safe_load&lt;/code&gt; instead of &lt;code&gt;yaml.load&lt;/code&gt;.) In our case above, PyYAML fails to load the document because it doesn’t know the &lt;code&gt;.git&lt;/code&gt; tag. Go’s yaml package is less strict and returns an empty string.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Norway problem&lt;/head&gt;
    &lt;p&gt;This pitfall is so infamous that it became known as “the Norway problem”:&lt;/p&gt;
    &lt;code&gt;geoblock_regions:
  - dk
  - fi
  - is
  - no
  - se&lt;/code&gt;
    &lt;code&gt;{"geoblock_regions": ["dk", "fi", "is", false, "se"]}&lt;/code&gt;
    &lt;p&gt;What is that &lt;code&gt;false&lt;/code&gt; doing there? The literals &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;, and &lt;code&gt;n&lt;/code&gt;, in various capitalizations (but not any capitalization!), are all &lt;code&gt;false&lt;/code&gt; in yaml 1.1, while &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;yes&lt;/code&gt;, and &lt;code&gt;y&lt;/code&gt; are true. In yaml 1.2 these alternative spellings of the boolean literals are no longer allowed, but they are so pervasive in the wild that a compliant parser would have a hard time reading many documents. Go’s yaml library therefore made the choice of implementing a custom variant somewhere in between yaml 1.1 and 1.2 that behaves differently depending on the context:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The yaml package supports most of YAML 1.2, but preserves some behavior from 1.1 for backwards compatibility. YAML 1.1 bools (yes/no, on/off) are supported as long as they are being decoded into a typed bool value. Otherwise they behave as a string.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Note that it only does that since version 3.0.0, which was released in May 2022. Earlier versions behave differently.&lt;/p&gt;
    &lt;head rend="h2"&gt;Non-string keys&lt;/head&gt;
    &lt;p&gt;While keys in json are always strings, in yaml they can be any value, including booleans.&lt;/p&gt;
    &lt;code&gt;flush_cache:
  on: [push, memory_pressure]
  priority: background&lt;/code&gt;
    &lt;code&gt;{
  "flush_cache": {
    "True": ["push", "memory_pressure"],
    "priority": "background"
  }
}&lt;/code&gt;
    &lt;p&gt;Combined with the previous feature of interpreting &lt;code&gt;on&lt;/code&gt; as a boolean, this leads to a dictionary with &lt;code&gt;true&lt;/code&gt; as one of the keys. It depends on the language how that maps to json, if at all. In Python it becomes the string &lt;code&gt;"True"&lt;/code&gt;. The key &lt;code&gt;on&lt;/code&gt; is common in the wild because it is used in GitHub Actions. I would be really curious to know whether GitHub Actions’ parser looks at &lt;code&gt;"on"&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt; under the hood.&lt;/p&gt;
    &lt;head rend="h2"&gt;Accidental numbers&lt;/head&gt;
    &lt;p&gt;Leaving strings unquoted can easily lead to unintentional numbers.&lt;/p&gt;
    &lt;code&gt;allow_postgres_versions:
  - 9.5.25
  - 9.6.24
  - 10.23
  - 12.13&lt;/code&gt;
    &lt;code&gt;{"allow_postgres_versions": ["9.5.25", "9.6.24", 10.23, 12.13]}&lt;/code&gt;
    &lt;p&gt;Maybe the list is a contrived example, but imagine updating a config file that lists a single value of 9.6.24 and changing it to 10.23. Would you remember to add the quotes? What makes this even more insidious is that many dynamically typed applications implicitly convert the number to a string when needed, so your document works fine most of the time, except in some contexts it doesn’t. For example, the following Jinja template accepts both &lt;code&gt;version: "0.0"&lt;/code&gt; and &lt;code&gt;version: 0.0&lt;/code&gt;, but it only takes the true-branch for the former.&lt;/p&gt;
    &lt;code&gt;{% if version %}
  Latest version: {{ version }}
{% else %}
  Version not specified
{% endif %}&lt;/code&gt;
    &lt;head rend="h2"&gt;Runners-up&lt;/head&gt;
    &lt;p&gt;There is only so much I can fit into one artifical example. Some arcane yaml behaviors that did not make it in are directives, integers starting with &lt;code&gt;0&lt;/code&gt; being octal literals (but only in yaml 1.1), &lt;code&gt;~&lt;/code&gt; being an alternative spelling of &lt;code&gt;null&lt;/code&gt;, and &lt;code&gt;?&lt;/code&gt; introducing a complex mapping key.&lt;/p&gt;
    &lt;head rend="h2"&gt;Syntax highlighting will not save you&lt;/head&gt;
    &lt;p&gt;You may have noticed that none of my examples have syntax highlighting enabled. Maybe I am being unfair to yaml, because syntax highlighting would highlight special constructs, so you can at least see that some values are not normal strings. However, due to multiple yaml versions being prevalent, and highlighters having different levels of sophistication, you can’t rely on this. I’m not trying to nitpick here: Vim, my blog generator, GitHub, and Codeberg, all have a unique way to highlight the example document from this post. No two of them pick out the same subset of values as non-strings!&lt;/p&gt;
    &lt;head rend="h2"&gt;Templating yaml is a terrible, terrible idea&lt;/head&gt;
    &lt;p&gt;I hope it is clear by now that working with yaml is subtle at the very least. What is even more subtle is concatenating and escaping arbitrary text fragments in such a way that the result is a valid yaml document, let alone one that does what you expect. Add to this the fact that whitespace is significant in yaml, and the result is a format that is meme-worthily difficult to template correctly. I truly do not understand why tools based on such an error-prone practice have gained so much mindshare, when there is a safer, easier, and more powerful alternative: generating json.&lt;/p&gt;
    &lt;head rend="h2"&gt;Alternative configuration formats&lt;/head&gt;
    &lt;p&gt;I think the main reason that yaml is so prevalent despite its pitfalls, is that for a long time it was the only viable configuration format. Often we need lists and nested data, which rules out flat formats like ini. Xml is noisy and annoying to write by hand. But most of all, we need comments, which rules out json. (As we saw before, json had comments very early on, but they were removed because people started putting parsing directives in there. I think this is the right call for a serialization format, but it makes json unsuitable as a configuration language.) So if what we really need is the json data model but a syntax that allows comments, what are some of the options?&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Toml — Toml is similar to yaml in many ways: it has mostly the same data types; the syntax is not as verbose as json; and it allows comments. Unlike yaml it is not full of footguns, mostly because strings are always quoted, so you don’t have values that look like strings but aren’t. Toml is widely supported, you can probably find a toml parser for your favorite language. It’s even in the Python standard library — unlike yaml! A weak spot of toml is deeply nested data.&lt;/item&gt;
      &lt;item&gt;Json with comments, Json with commas and comments — There exist various extensions of json that extend it just enough to make it a usable config format without introducing too much complexity. Json with comments is probably the most widespread, as it is used as the config format for Visual Studio Code. The main downside of these is that they haven’t really caught on (yet!), so they aren’t as widely supported as json or yaml.&lt;/item&gt;
      &lt;item&gt;A simple subset of yaml — Many of the problems with yaml are caused by unquoted things that look like strings but behave differently. This is easy to avoid: always quote all strings. (Indeed, you can tell that somebody is an experienced yaml engineer when they defensively quote all the strings.) We can choose to always use &lt;code&gt;true&lt;/code&gt;and&lt;code&gt;false&lt;/code&gt;rather than&lt;code&gt;yes&lt;/code&gt;and&lt;code&gt;no&lt;/code&gt;, and generally stay away from the arcane features. The challenge with this is that any construct not explicitly forbidden will eventually make it into your codebase, and I am not aware of any good tool that can enforce a sane yaml subset.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Generating json as a better yaml&lt;/head&gt;
    &lt;p&gt;Often the choice of format is not ours to make, and an application only accepts yaml. Not all is lost though, because yaml is a superset of json, so any tool that can produce json can be used to generate a yaml document.&lt;/p&gt;
    &lt;p&gt;Sometimes an application will start out with a need for just a configuration format, but over time you end up with many many similar stanzas, and you would like to share parts between them, and abstract some repetition away. This tends to happen in for example Kubernetes and GitHub Actions. When the configuration language does not support abstraction, people often reach for templating, which is a bad idea for the reasons explained earlier. Proper programming languages, possibly domain-specific ones, are a better fit. Some of my favorites are Nix and Python:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Nix — Nix is the language used by the Nix package manager. It was created for writing package definitions, but it works remarkably well as a configuration format (and indeed it is used to configure NixOS). Functions, let-bindings, and string interpolation make it powerful for abstracting repetitive configuration. The syntax is light like toml, and it can export to json or xml. It works well for simplifying a repetitive GitHub Actions workflow file, for example.&lt;/item&gt;
      &lt;item&gt;Python — Json documents double as valid Python literals with minimal adaptation, and Python supports trailing commas and comments. It has variables and functions, powerful string interpolation, and &lt;code&gt;json.dump&lt;/code&gt;built in. A self-contained Python file that prints json to stdout goes a long way!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Finally there are some tools in this category that I haven’t used enough to confidently recommend, but which deserve to be mentioned:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Dhall — Dhall is like Nix, but with types. It is less widespread, and personally I find the built-in function names unwieldy.&lt;/item&gt;
      &lt;item&gt;Cue — Like Dhall, Cue integrates type/schema information into the config format. Cue is a superset of json, but despite that, I find the files that actually use Cue’s features to look foreign to me. Cue is on my radar to evaluate further, but I haven’t encountered a problem where Cue looked like the most suitable solution yet.&lt;/item&gt;
      &lt;item&gt;Hashicorp Configuration Language — I haven’t used HCL extensively enough to have a strong opinion on it, but in the places where I worked with it, the potential for abstraction seemed more limited than what you can achieve with e.g. Nix.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;2025 update: After having used HCL more in practice, I consider it too ad-hoc to seriously recommend. My frustration with HCL is what prompted me to create RCL. It started as a toy project, but is now at a point where it is both usable and useful.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;Yaml aims to be a more human-friendly alternative to json, but with all of its features, it became such a complex format with so many bizarre and unexpected behaviors, that it is difficult for humans to predict how a given yaml document will parse. If you are looking for a configuration format, toml is a friendly format without yaml’s footguns. For cases where you are stuck with yaml, generating json from a more suitable language can be a viable approach. Generating json also opens up the possibility for abstraction and reuse, in a way that is difficult to achieve safely by templating yaml.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45344554</guid><pubDate>Tue, 23 Sep 2025 09:04:43 +0000</pubDate></item><item><title>Go has added Valgrind support</title><link>https://go-review.googlesource.com/c/go/+/674077</link><guid isPermaLink="false">https://news.ycombinator.com/item?id=45344708</guid><pubDate>Tue, 23 Sep 2025 09:26:57 +0000</pubDate></item><item><title>Hyb Error: A Hybrid Metric Combining Absolute and Relative Errors</title><link>https://arxiv.org/abs/2403.07492</link><description>&lt;doc fingerprint="988c361a05dfb08c"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Mathematics &amp;gt; Numerical Analysis&lt;/head&gt;&lt;p&gt; [Submitted on 12 Mar 2024 (v1), last revised 21 May 2024 (this version, v2)]&lt;/p&gt;&lt;head rend="h1"&gt;Title:Hyb Error: A Hybrid Metric Combining Absolute and Relative Errors&lt;/head&gt;View PDF HTML (experimental)&lt;quote&gt;Abstract:Suppose $x$ is an approximation of $y$. This paper proposes using $\frac{|x-y|}{1+|y|}$, named Hyb Error, to measure the error. This metric equals half the harmonic mean of absolute error and relative error, effectively combining their advantages while mitigating their limitations. For example, Hyb Error approaches absolute error as $|y|$ approaches 0, thereby avoiding the exaggeration of relative error, and approaches relative error as $|y|$ approaches infinity, thereby avoiding the exaggeration of absolute error. The Hyb Error of $\epsilon$ is equivalent to $|x-y|=\epsilon+\epsilon |y|$, which implies $\mathrm{isclose}(x,y,\epsilon,\epsilon)=\mathrm{True}$, where ``isclose'' is a common floating-point equality check function in numerical libraries. For sequences, this property makes the Maximum Element-wise Hyb Error (MEHE) a pragmatic error metric that reflects the most significant error and equals the decision boundary of the ``isclose'' function.&lt;/quote&gt;&lt;head rend="h2"&gt;Submission history&lt;/head&gt;From: Peichen Xie [view email]&lt;p&gt;[v1] Tue, 12 Mar 2024 10:30:46 UTC (84 KB)&lt;/p&gt;&lt;p&gt;[v2] Tue, 21 May 2024 08:20:36 UTC (62 KB)&lt;/p&gt;&lt;p&gt; Current browse context: &lt;/p&gt;&lt;p&gt;math.NA&lt;/p&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45345148</guid><pubDate>Tue, 23 Sep 2025 10:30:42 +0000</pubDate></item><item><title>Structured Outputs in LLMs</title><link>https://parthsareen.com/blog.html#sampling.md</link><description>&lt;doc fingerprint="d3fff7ff6f587ef7"&gt;
  &lt;main&gt;
    &lt;p&gt;Writings&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45345207</guid><pubDate>Tue, 23 Sep 2025 10:40:41 +0000</pubDate></item><item><title>Cache of Devices Capable of Crashing Cell Network Is Found Near U.N</title><link>https://www.nytimes.com/2025/09/23/us/politics/secret-service-sim-cards-servers-un.html</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45345514</guid><pubDate>Tue, 23 Sep 2025 11:29:13 +0000</pubDate></item><item><title>Zinc (YC W14) Is Hiring a Senior Back End Engineer (NYC)</title><link>https://app.dover.com/apply/Zinc/4d32fdb9-c3e6-4f84-a4a2-12c80018fe8f/?rs=76643084</link><description>&lt;doc fingerprint="e10fcdab2cdf53e4"&gt;
  &lt;main&gt;
    &lt;p&gt;You need to enable JavaScript to run this app.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45345742</guid><pubDate>Tue, 23 Sep 2025 12:00:00 +0000</pubDate></item><item><title>Getting More Strategic</title><link>https://cate.blog/2025/09/23/getting-more-strategic/</link><description>&lt;doc fingerprint="66e3193529eb0183"&gt;
  &lt;main&gt;
    &lt;p&gt;Strategy – how to be strategic, and how to be seen as strategic – is one of my ongoing obsessions. Years ago, I read Good Strategy/Bad Strategy, and it’s guided my thinking ever since.&lt;/p&gt;
    &lt;p&gt;One of the things that book helps clarify is that being strategic and being seen as strategic can work against each other – good strategy is obvious, and usually it is executed on more than it’s talked about. An ongoing frustration for other under indexed people in tech I talk to, as we build products and organizations without drama, whilst being told we’re just “not strategic” enough. The strategy required to sidestep problems that never happen or that creates optionality to quickly resolve is somehow invisible.&lt;/p&gt;
    &lt;p&gt;But I think as we rise up the org chart, strategy is the job. Strategy defines your job, and evolves it to meet the organizational need. Not just one strategy, but multiple strategies that need to fit together and be coherent.&lt;/p&gt;
    &lt;p&gt;Your product strategy. Your technical strategy. Your team strategy. Your you-as-a-leader-but-also-a-human-being strategy.&lt;/p&gt;
    &lt;p&gt;As we find our groove in the resource constrained era we are in currently as opposed to the everything strategy of ZIRP (zero interest rates), by definition we need to make more harder choices, and strategy is how we know what those choices are, and when and how to make them.&lt;/p&gt;
    &lt;p&gt;This is the first rule of strategy: strategy is contextual. A crucial insight, because often when leaders fail, it’s because they tried to apply a strategy that worked in one context, to a different one, without considering the difference.&lt;/p&gt;
    &lt;p&gt;This is true when you change companies, and I think the reason why there is such a high failure rate for executive hires*. Ones I’ve watched fail came in with a playbook, usually including the org chart they wanted, and expended all the goodwill and capital in pursuit of that goal, whilst achieving very little.&lt;/p&gt;
    &lt;p&gt;It’s also the case that when the market changes, our strategy must change. One of the core features of ZIRP-era engineering leadership was hiring for the sake of it, and number of people as a proxy for many things it maybe (probably) shouldn’t have been. One of the biggest shifts has been the layoffs and the mantra of “doing more with less”. Regardless of personal feelings on this topic and what is actually realistic, it is apparent that hard choices and discipline are a key feature of the post-ZIRP era.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt;We could talk about these strategies – product, technical, team, you, like some balanced stool. But realistically, I think it’s more like the image above. The product strategy is a storm (especially pre-product market fit). The technical strategy is a half built shelter (you’ll get to it properly once you have product market fit). The team strategy is an umbrella (the most flexible and controllable). And the you as a human strategy is nowhere to be found.&lt;/p&gt;
    &lt;p&gt;This is the second rule of strategy: timeframe varies with the level of uncertainty you’re navigating.&lt;/p&gt;
    &lt;p&gt;The idea of a proximate objective is the next logical step in pursuit of your overall strategy, if you achieve it, you confirm your course. If you fail, you learn and reconsider your options.&lt;/p&gt;
    &lt;p&gt;We often talk about strategy like it’s defining the end state, setting and describing the destination. But strategy is about defining the incremental steps – the proximate objectives – that can take us towards that end state. Strategy is understanding where we are at – context – and the path from there to where we need to go**. Any strategic “plan”, is best executed as a set of proximate objectives.&lt;/p&gt;
    &lt;p&gt;This mistake of how strategy is talked about is why it can be so hard for some people to be seen as strategic. When we think strategy is depicting the end state, and undervalue the proximate objective definitions and execution that it takes to get there, the person who talks more about the end state can be seen as more strategic than the person who actually reaches it.&lt;/p&gt;
    &lt;p&gt;We need four things for strategy:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Time – energy – to think deeply about it&lt;/item&gt;
      &lt;item&gt;Context to situate it&lt;/item&gt;
      &lt;item&gt;Direction to identify proximate objectives&lt;/item&gt;
      &lt;item&gt;Expertise to chart the path&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;All of these need to come together to create and deliver an effective strategy. It’s a balance between all of them, leaning into different ones at different times.&lt;/p&gt;
    &lt;p&gt;To illustrate, why each of these are important, I think it’s helpful to consider the extremes of each.&lt;/p&gt;
    &lt;p&gt;When someone is all time, we call them a political operator. This is the person who manages up to get credit, but the people underneath them ask what it is that they do.&lt;/p&gt;
    &lt;p&gt;When someone is all context, we say they can’t see the forest for the trees. They miss the big picture fixating on the details.&lt;/p&gt;
    &lt;p&gt;When someone is all proximate objectives, we call them a thought leader and it’s not a compliment. Execution is an exercise left to the reader.&lt;/p&gt;
    &lt;p&gt;When someone is all expertise, they present solutions in search of problems. They don’t seem to understand impact.&lt;/p&gt;
    &lt;p&gt;Devaluing these things gives us a reason not to do them. So many engineers will tell you they hate politics, and yes, there is definitely toxic workplace politics. But there’s a baseline where politics is getting things done. It’s convincing people that the idea is good, and that it can be executed. My favourite explanation of this is Nik Means talking about Eiffel’s tower.&lt;/p&gt;
    &lt;p&gt;Context is important. Yes, you’re delivering something bigger, but the details need to add up. You can’t gloss over all of them, you need to learn how to distinguish which are important and which are not.&lt;/p&gt;
    &lt;p&gt;Proximate objectives chart your path. They explain the steps you expect to take between where you are and where you plan to be. Explaining them helps bring people along with you.&lt;/p&gt;
    &lt;p&gt;Expertise is ultimately how you deliver things, you need to understand how to deliver and how to validate. Execution is when the strategy becomes real.&lt;/p&gt;
    &lt;p&gt;Strategy is hard, and being seen as strategic – especially for under-indexed people – can be even harder. We need all of these four things to develop our strategy and move things forward. And we need to be recognized as doing all of them in order to be seen as strategic.&lt;/p&gt;
    &lt;p&gt;Coming back to our problems of strategy – the product, technical, team, and you.&lt;/p&gt;
    &lt;p&gt;Product strategy drives your proximate objectives. Whilst product strategy may seem like the job of product management – and to a certain extent it is, but hopefully your product team does not operate in a vacuum. Engineering needs to provide input, but engineering also needs to understand the product strategy, because everything else needs to fit in with it.&lt;/p&gt;
    &lt;p&gt;Your team exists for a purpose, and the clearest part of that purpose is delivery of the product strategy. You need direction and alignment to identify proximate objectives. Direction – where the product strategy is going, alignment on what is most important, and what will be delivered when.&lt;/p&gt;
    &lt;p&gt;Technical strategy evolves the context. Your technical strategy is often about surfacing the underlying work that allows you to deliver on the business need. It has to be well justified, because ideally it’s pro-active rather than reactive – i.e. you implement it before the emergency rather than during it.&lt;/p&gt;
    &lt;p&gt;Any technical strategy needs to start with what problem is being solved. A problem is not the absence of a technology – unless, I understand, that technology is AI – but rather the problems that technology would solve. So “we don’t have containers” is not a problem. Number of incidents or environment inconsistencies is. Good technical strategy changes the context over time – making more possible – like building roads on the territory you’ve chartered.&lt;/p&gt;
    &lt;p&gt;Your team strategy must be grounded in execution. The product and technical strategy define the organizational need. Your team strategy is about how your team is going to meet that organizational need, within the constraints of the business.&lt;/p&gt;
    &lt;p&gt;Post-ZIRP, this has been a big challenge. Doing more with less means having fewer people, less flexibility, less margin of error. You need to figure out how you retain key people when money is tighter and promotions are harder to come by. But amidst all of these challenges, you have to execute. If in a ZIRP era, you could build the team then deliver, now you must deliver as you build the team.&lt;/p&gt;
    &lt;p&gt;The you as a person strategy requires that you carve out time to be strategic. In this market, many of us are doing-doing-doing to prove that we’re worth keeping around, but at some point, your job is no longer what is being done this week, and more about what is possible next quarter (and the quarters after that). It’s never been easier to be DDOS’d by the job and think that means we’re doing a good one, but you could be missing key things if you’re too focused on the day to day, or week to week and not enough on the month to month.&lt;/p&gt;
    &lt;p&gt;To wrap up, strategy is about more than just a vision; it’s about navigating the path to get there. We need to balance time, context, direction, and expertise to ensure we’re not only seen as strategic but are genuinely creating a strategic path forward for the teams we’re responsible for – and our own evolving needs to competently lead them.&lt;/p&gt;
    &lt;p&gt;* I can’t find a great source here, although the search results suggest it’s commonly accepted #. # possibly, which links out to a site requiring login.&lt;/p&gt;
    &lt;p&gt;** I love Tanya Reilly’s description of the map in The Staff Engineer’s Path.&lt;/p&gt;
    &lt;p&gt;Image credit: Joe Groove&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45346219</guid><pubDate>Tue, 23 Sep 2025 12:41:36 +0000</pubDate></item><item><title>The War on Roommates: Why Is Sharing a House Illegal?</title><link>https://marginalrevolution.com/marginalrevolution/2025/08/the-war-on-roommates-why-is-sharing-a-house-illegal.html</link><description>&lt;doc fingerprint="28b9c150fec148ac"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The War on Roommates: Why Is Sharing a House Illegal?&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;Boarding houses were made illegal by zoning that enforced single family homes and by rules limiting occupancy, demanding every room have a private bathroom, outlawing shared kitchens, requiring parking spaces for every resident etc.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;How States and Cities Decimated Americans’ Lowest-Cost Housing Option is an excellent, hard-hitting piece making and extending these points and significantly it’s not from a libertarian think tank but Pew:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Low-cost micro-units, often called single-room occupancies, or SROs, were once a reliable form of housing for the United States’ poorest residents of, and newcomers to, New York, Chicago, San Francisco, and many other major U.S. cities. Well into the 20th century, SROs were the least expensive option on the housing market, providing a small room with a shared bathroom and sometimes a shared kitchen for a price that is unimaginable today—as little as $100 to $300 a month (in 2025 dollars).&lt;/p&gt;
      &lt;p&gt;In the late 19th and early 20th centuries, landlords converted thousands of houses, hotels, apartment buildings, and commercial buildings into SROs, and by 1950, SRO units made up about 10% of all rental units in some major cities. But beginning in the mid-1950s, as some politicians and vocal members of the public turned against SROs and the people who lived in them, major cities across the country revised zoning and building codes to force or encourage landlords to eliminate SRO units and to prohibit the development of new ones. Over the next several decades, governments and developers gradually demolished thousands of SROs or converted them to other uses, including boutique hotels for tourists. And as SROs disappeared, homelessness—which had been rare from at least the end of the Great Depression to the late 1970s—exploded nationwide.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The Pew piece does an excellent job of documenting how laws are beginning to change. I especially appreciated this point: the simplest reform is to stop making it illegal for unrelated people to share a home!&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Perhaps the simplest method of creating low-cost shared housing is to allow unrelated individuals to share a house in the same way that relatives are allowed to share a house.67 But many communities limit the number of unrelated people who can live together—in some places, to as few as two. Such laws make sharing a house for a group of roommates—which usually enables rents lower than having an individual apartment—illegal. The U.S. has a record number of unused bedrooms, but many cannot be rented because of restrictions on house sharing by unrelated roommates, even if that would be the most profitable use for the landlord and the most affordable option for the tenants.68 To enable this low-cost housing option, Iowa, Oregon, and Colorado all passed bipartisan legislation to strike down local codes that prohibit house-sharing (in 2017, 2021, and 2024, respectively).69&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;So many of our problems are created by busybodies and do-gooders who prevent people from using their own property.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45347043</guid><pubDate>Tue, 23 Sep 2025 13:51:56 +0000</pubDate></item><item><title>OrangePi 5 Ultra Review: An ARM64 SBC Powerhouse</title><link>https://boilingsteam.com/orange-pi-5-ultra-review/</link><description>&lt;doc fingerprint="7f339c129d878dcd"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;OrangePi 5 Ultra Review: an ARM64 SBC Powerhouse&lt;/head&gt;
    &lt;p&gt;Following our review of their RV2 RISC-V board, OrangePi has offered us to review one of their latest ARM64 based hardware, the OrangePi 5 Ultra. This is currently their highest specs ARM64 SBC.&lt;/p&gt;
    &lt;p&gt;So what can we expect from the OrangePi Pi 5 Ultra board ? Let’s go through the specs first.&lt;/p&gt;
    &lt;head rend="h2"&gt;Specs&lt;/head&gt;
    &lt;p&gt;The board is fairly small in size, very close to what you get with the Raspberry Pi.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Feature&lt;/cell&gt;
        &lt;cell role="head"&gt;Specifications&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Master Chip&lt;/cell&gt;
        &lt;cell&gt;Rockchip RK3588 (8nm LP process)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;CPU&lt;/cell&gt;
        &lt;cell&gt;• 8-core 64-bit processor&lt;p&gt;• 4 Cortex-A76 and 4 Cortex-A55 with independent NEON coprocessor&lt;/p&gt;&lt;p&gt;• Cortex-A76 at 2.4GHz, Cortex-A55 at 1.8GHz&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;GPU&lt;/cell&gt;
        &lt;cell&gt;• Integrated ARM Mali-G610&lt;p&gt;• Built-in 3D GPU&lt;/p&gt;&lt;p&gt;• Fully compatible with OpenGL ES1.½.0/3.2, OpenCL 2.2 and Vulkan 1.2&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;NPU&lt;/cell&gt;
        &lt;cell&gt;Embedded NPU supports INT4/INT8/INT16/FP16 hybrid computing with up to 6TOPS&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;PMU&lt;/cell&gt;
        &lt;cell&gt;RK806-1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;RAM&lt;/cell&gt;
        &lt;cell&gt;LPDDR5 496PIN: 4GB, 8GB, 16GB optional&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Memory&lt;/cell&gt;
        &lt;cell&gt;• eMMC flash socket&lt;p&gt;• eMMC IC&lt;/p&gt;&lt;p&gt;• Note: Either eMMC flash socket or eMMC IC, supports: 32GB, 64GB, 128GB, 256GB optional&lt;/p&gt;&lt;p&gt;• QSPI NOR flash: 16MB&lt;/p&gt;&lt;p&gt;• MicroSD card slot&lt;/p&gt;&lt;p&gt;• M.2 M-KEY slot: supports NVMe SSD (PCIe 3.0 4Lane)&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;USB&lt;/cell&gt;
        &lt;cell&gt;2 × USB3.0; 2 × USB2.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Video&lt;/cell&gt;
        &lt;cell&gt;• 1 × HDMI 2.1 output up to 8K@60FPS&lt;p&gt;• 1 × HDMI 2.0 input up to 4K@60FPS&lt;/p&gt;&lt;p&gt;• 1 × MIPI DSI TX 4 Lane&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Camera&lt;/cell&gt;
        &lt;cell&gt;• 2 × MIPI CSI 4 Lane&lt;p&gt;• 1 × MIPI D-PHY RX 4 Lane&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Audio&lt;/cell&gt;
        &lt;cell&gt;CODEC: ES8388&lt;p&gt;• 1 × Audio 3.5mm jack with mic&lt;/p&gt;&lt;p&gt;• 1 × MIC In&lt;/p&gt;&lt;p&gt;• 1 × HDMI 2.1 eARC&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Ethernet&lt;/cell&gt;
        &lt;cell&gt;1 × PCIe 2.5G LAN (RTL8125BG)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Wi-Fi + BT Module&lt;/cell&gt;
        &lt;cell&gt;Onboard Wi-Fi 6E + BT 5.3/BLE module: AP6611&lt;p&gt;• Wi-Fi interface: SDIO3.0&lt;/p&gt;&lt;p&gt;• BT interface: UART/PCM&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Expansion Port&lt;/cell&gt;
        &lt;cell&gt;Dual-row pin: 2.54mm 40Pin&lt;p&gt;• Supports DC 5V and 3.3V power output&lt;/p&gt;&lt;p&gt;• Configurable UART, PWM, I2C, SPI, CAN, GPIO and other functional interfaces&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Button&lt;/cell&gt;
        &lt;cell&gt;1 × MaskRom key, 1 × On/Off key&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Power Source&lt;/cell&gt;
        &lt;cell&gt;Supports Type-C power supply, 5V @ 5A&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;LED&lt;/cell&gt;
        &lt;cell&gt;RGB LED side illumination&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;FAN&lt;/cell&gt;
        &lt;cell&gt;5V 2PIN 1.25mm socket&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;RTC&lt;/cell&gt;
        &lt;cell&gt;3V 2PIN 1.25mm socket&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Debugging&lt;/cell&gt;
        &lt;cell&gt;Debug serial UART included in 40PIN expansion port&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Supported OS&lt;/cell&gt;
        &lt;cell&gt;Orangepi OS (Droid), Orangepi OS (Arch), Orangepi OS (OH), Ubuntu, Debian, Android 13&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;PCB&lt;/cell&gt;
        &lt;cell&gt;Length: 89mm, Width: 57mm, Thickness: 1.6mm&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Weight&lt;/cell&gt;
        &lt;cell&gt;60.5g&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The model I received for this review was a 8 GB one. One of the key reasons to use this SBC over other versions, is that it leverages LPDDR5 memory capable of very good speeds.&lt;/p&gt;
    &lt;p&gt;What I like about the specs is the numerous options for storage (one eMMC and another NVME M2 slot), the 2 Gigabit Ethernet port (a single one this time, so don’t expect to make it into a router), the 4 USB ports (sufficient to connect keyboard, mouse, and something else).&lt;/p&gt;
    &lt;p&gt;On paper, the specs are impressive with the fairly recent Rockchip processor. There is a NPU as well, but don’t expect to have it supported easily in Linux, even on AMD the NPU support is shaky at best. For this SBC, it involves cross-compilation, custom binaries before you can exploit a model on this board.&lt;/p&gt;
    &lt;p&gt;This is what the layout of the board looks like:&lt;/p&gt;
    &lt;p&gt;Here’s the back view:&lt;/p&gt;
    &lt;p&gt;Now you should be aware of the following:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Mobile GPUs don’t support OpenGL, only the OpenGLES subtype. You can get some Vulkan support (1.2), but as we will see later, hardware support is unfortunately not there yet.&lt;/item&gt;
      &lt;item&gt;The board is priced at around 130 USD for the 16GB version (it seems to be the main one being sold right now). Which is roughly equivalent to the Raspberry Pi 5 price for the same amount of memory. However, the Orange Pi 5 Ultra board is much more powerful in comparison, so depending on your use case, the Orange Pi 5 Ultra would represent a better value for money.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Of course, the usefulness of such a board depends entirely on the quality of the software support.&lt;/p&gt;
    &lt;head rend="h2"&gt;Software Support&lt;/head&gt;
    &lt;head rend="h3"&gt;A Full Ubuntu Experience&lt;/head&gt;
    &lt;p&gt;There are many images available for this board. Ubuntu, Debian, Arch… at first I was wondering which one to go for. Even in each category you have a bunch of different images:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Focal (20.04 LTS), either desktop with xfce or server version.&lt;/item&gt;
      &lt;item&gt;Jammy (22.04 LTS), desktop with GNOME or Xfce, or a server version. But it goes deeper than that. You get two different kernel available. An old 5.10 kernel or a 6.1.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I went for the Ubuntu Jammy 22.04 LTS with the 6.1 kernel, the desktop build using Xfce (GNOME was not available for that kernel).&lt;/p&gt;
    &lt;p&gt;As you can see, the Ubuntu 24.04 distro is missing from the list, and this is a shame, since this is a board released late 2024. I contacted OrangePi and they mentioned that they would eventually release a 24.04 version, but there was no clear timeline for that.&lt;/p&gt;
    &lt;p&gt;To install Ubuntu, you use dd or Balena Etcher to image a micro-SD card first, and then you get some helper scripts (using ncurses) that make it super easy to image either a eMMC chip, or a NVME drive that’s attached to the board (I don’t recommend using a micro-SD card as the main media).&lt;/p&gt;
    &lt;p&gt;Once you reach the desktop, you will see that things work pretty much as expected. Wifi, Bluetooth, and even the HDMI port could properly recognize my Ultra Wide Screen and display the full resolution. This was an issue with the RV2 board from Orange Pi (probably hardware/drivers related) but on ARM64 it seems like things are much more robust.&lt;/p&gt;
    &lt;head rend="h3"&gt;GPU Support?&lt;/head&gt;
    &lt;p&gt;Sadly, but this was almost expected, there does not seem to be any kind of GPU support in the version that I have chosen. A quick check with glxgears confirms that there is just a software pipe for rendering.&lt;/p&gt;
    &lt;p&gt;This being said, the software rendering is very very fast - you can see that there’s a lot of power under the hood on the CPU side. The same glxgears was only running at 35 FPS on the RV2, here it’s 10 times faster!&lt;/p&gt;
    &lt;p&gt;There is however hope. It looks like there are efforts to mainline the GPU drivers on the Linux kernel, so when this happens you could expect a standard distro like ARMbian to offer full support of the GPU capabilities. Too early to say, but we will come back on that later.&lt;/p&gt;
    &lt;p&gt;Because of the lack of GPU support, I will be skipping the gaming aspects of this board for now. I will revisit it in another article once we have proper GPU drivers, to actually see what we can expect from this SBC once we have the Mali ready for some action.&lt;/p&gt;
    &lt;head rend="h3"&gt;Applications&lt;/head&gt;
    &lt;p&gt;I installed and tried bunch of things:&lt;/p&gt;
    &lt;p&gt;Chromium is installed by default and works very well, but is limited to the 110 version which is old by now. Using Flathub and Flatpak I could install a much more recent version, that has proper extensions support. Firefox works fine, too - its fork, Zen browser, also works via Flatpak but is very slow for some reason. I also tried a non-Flatpak install for Zen, but it was also slow, so it’s probably not related to Flatpak itself.&lt;/p&gt;
    &lt;p&gt;This is now a good time to talk about Flatpak. When I was reviewing the RV2 board which sports a RISC-V chip, I remarked that there are very few Flatpaks that actually support that architecture. So in effect, while flatpak is supposed to work regardless of the architecture, if you don’t have any binary built for your architecture, you won’t be able to make much use of Flathub and the like. For ARM64, the support is not 100% either, but there is a massive footprint of applications that support ARM64. I tried quite a lot of applications and I was constantly surprised wow, they even have ARM64 for that!. I surmise that this is the effect of having a mainstream ARM64 desktop machine out there running Linux with the Macbooks equipped with the M chipsets, running Asahi. (and a lot of folks who have such machines being developers themselves, of course).&lt;/p&gt;
    &lt;p&gt;While most applications worked with the RV2 (which is roughly equivalent to a Raspberry Pi 3), it showed its limits when you wanted to do video editing for example. Kdenlive and Openshot were barely working. Here, with the OrangePi 5 Ultra, Kdenlive works like a breeze and had no issue dealing with a bit of video editing and rendering. The final video render was certainly not as fast as what you’d expect on a regular X86_64 platform, but you know, it’s workable if you are not dealing with very long videos (also, avoid 4k). We are certainly dealing with a much more capable SOC here.&lt;/p&gt;
    &lt;p&gt;Out of curiosity, I tried some more professional applications like Dbeaver (for databases interactions), and it worked as expected.&lt;/p&gt;
    &lt;p&gt;The same with Memgraph (graph database), used via Docker (since they don’t have a client for ARM64, I used the web client instead). Of course, I did not try to load a massive graph database with this, but the system was very responsive and usable. Honestly, very impressive to see Memgraph running so well on a SBC.&lt;/p&gt;
    &lt;p&gt;I wasted a lot of time trying to make R and Rstudio for ARM64 work togeher from the distro (without success, there was some kind of issue with the tools base package not being recognized), until I switched gears and used a Docker version of R/Rstudio instead. Once again this proved to work very well (Rstudio is a Java application so the browser IDE is basically identical).&lt;/p&gt;
    &lt;p&gt;The only appplication that did not work well was Blender. It launched, but afterwards it was a slideshow with 3 seconds between an interaction and the refresh of the screen. I assume this is because Blender requires GPU support even for its innerworkings, and since we don’t have GPU acceleration in this OS, it’s just not going to cut it.&lt;/p&gt;
    &lt;p&gt;But honestly… that’s it! Everything else I tried worked as expected on a usual desktop or laptop. At no time did I feel this is too slow, I can’t wait to stop my review - instead, if you told me that I would only have that SBC to do regular work, well, I could totally see myself living with it for 90% of my use cases.&lt;/p&gt;
    &lt;p&gt;Very impressive to see this kind of performance in this form factor. And this is a board running only at 1.8 Ghz! I can only imagine how things will improve once they go to a better lithography and manage to increase the frequency of the CPU.&lt;/p&gt;
    &lt;head rend="h2"&gt;Temperature Control&lt;/head&gt;
    &lt;p&gt;The temperature does rise a little when using all cores at once, but it remains at a manageable level. When doing some bursts of compilation the temperature rises up to about 78~80C, and when running LLMs on the CPU (full 100% CPU usage), we get up to 84, 85C.&lt;/p&gt;
    &lt;p&gt;This looks like the hard limit - I am not sure if the SBC goes into throttling then, but I did not observe higher temperature. In any cases, in all situations (apart from Blender), the system remained very responsive.&lt;/p&gt;
    &lt;head rend="h2"&gt;Power Draw&lt;/head&gt;
    &lt;p&gt;I don’t have a way to measure power draw, but according to AndroidPIMP you can expect an idle power draw between 3W and 5W, and an usage under load on average around 10W. Since the power source can produce 25W maximum, I guess you can imagine the board going up to 15W or so in spikes. In any case, its low power profile and the fact that the temperature remains well under control tells me that this is a great little machine for a server.&lt;/p&gt;
    &lt;head rend="h2"&gt;AI - LLM Performance&lt;/head&gt;
    &lt;p&gt;For this part, I compiled both Ollama and llama.cpp and run some benchmarks on llama.cpp. I tried only smaller models, because I had low expectations that it would be running at usable speeds. The results are below.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;model&lt;/cell&gt;
        &lt;cell role="head"&gt;size&lt;/cell&gt;
        &lt;cell role="head"&gt;params&lt;/cell&gt;
        &lt;cell role="head"&gt;backend&lt;/cell&gt;
        &lt;cell role="head"&gt;threads&lt;/cell&gt;
        &lt;cell role="head"&gt;test&lt;/cell&gt;
        &lt;cell role="head"&gt;t/s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;gemma3 1B Q4_K - Medium&lt;/cell&gt;
        &lt;cell&gt;762.49 MiB&lt;/cell&gt;
        &lt;cell&gt;999.89 M&lt;/cell&gt;
        &lt;cell&gt;CPU&lt;/cell&gt;
        &lt;cell&gt;8&lt;/cell&gt;
        &lt;cell&gt;pp512&lt;/cell&gt;
        &lt;cell&gt;23.37 ± 0.94&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;gemma3 1B Q4_K - Medium&lt;/cell&gt;
        &lt;cell&gt;762.49 MiB&lt;/cell&gt;
        &lt;cell&gt;999.89 M&lt;/cell&gt;
        &lt;cell&gt;CPU&lt;/cell&gt;
        &lt;cell&gt;8&lt;/cell&gt;
        &lt;cell&gt;tg128&lt;/cell&gt;
        &lt;cell&gt;2.49 ± 0.62&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;granite 3B Q4_0&lt;/cell&gt;
        &lt;cell&gt;1.36 GiB&lt;/cell&gt;
        &lt;cell&gt;2.53 B&lt;/cell&gt;
        &lt;cell&gt;CPU&lt;/cell&gt;
        &lt;cell&gt;8&lt;/cell&gt;
        &lt;cell&gt;pp512&lt;/cell&gt;
        &lt;cell&gt;36.34 ± 1.78&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;granite 3B Q4_0&lt;/cell&gt;
        &lt;cell&gt;1.36 GiB&lt;/cell&gt;
        &lt;cell&gt;2.53 B&lt;/cell&gt;
        &lt;cell&gt;CPU&lt;/cell&gt;
        &lt;cell&gt;8&lt;/cell&gt;
        &lt;cell&gt;tg128&lt;/cell&gt;
        &lt;cell&gt;5.06 ± 0.10&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;For dense models like Gemma 1B, it’s kind of slow and not really good for chatting. If you plan to use LLMs with this, however, MOE models like granite 3.1 3B work at a decent speed (5 tokens by second, not bad). I would certainly prefer 10 tokens by second minimum, but this is the fact, at least when using the CPU mode. It’s certainly a lot more usable than the RV2 review previously.&lt;/p&gt;
    &lt;p&gt;Once we have a capable Vulkan driver working, I wonder if Vulkan will be able to be leveraged to increase the token generation speed on this board. It works well on AMD because it can expand it shared memory, not sure how much Vulkan can allocate on an AMR64 board like this.&lt;/p&gt;
    &lt;head rend="h2"&gt;Performance&lt;/head&gt;
    &lt;p&gt;The go-to suite to evaluate performance is Geekbench, because it can provide some comparison between the speed of similar tests across different architectures. Here, let’s compare it against another flagship ARM64 board, the Raspberry Pi 5 running at 2.4 ghz.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Spec&lt;/cell&gt;
        &lt;cell role="head"&gt;OrangePi 5 Ultra&lt;/cell&gt;
        &lt;cell role="head"&gt;Raspberry Pi 5 Model B Rev 1.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Operating System&lt;/cell&gt;
        &lt;cell&gt;Ubuntu 22.04.5 LTS&lt;/cell&gt;
        &lt;cell&gt;Debian GNU/Linux 12 (bookworm)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Processor&lt;/cell&gt;
        &lt;cell&gt;ARM ARMv8 @ 1.80 GHz, 1 Processor, 8 Cores&lt;/cell&gt;
        &lt;cell&gt;ARM ARMv8 @ 2.40 GHz, 1 Processor, 4 Cores”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Memory&lt;/cell&gt;
        &lt;cell&gt;8 GB model&lt;/cell&gt;
        &lt;cell&gt;8 GB model&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;Single Core Performance&lt;/head&gt;
    &lt;p&gt;Both boards end up with a very similar performance on average in single core tests.&lt;/p&gt;
    &lt;p&gt;There are some differences, but it’s fairly marginal.&lt;/p&gt;
    &lt;head rend="h3"&gt;Multi-core performance&lt;/head&gt;
    &lt;p&gt;When doing multi-threaded, multi-core workflows, this is where we see the 8 processors that are available on the Orange Pi 5 Ultra shine.&lt;/p&gt;
    &lt;p&gt;Its performance surpasses the Raspberry Pi 5 in almost all activities, and usually by a good 30% advantage.&lt;/p&gt;
    &lt;head rend="h3"&gt;Performance overview&lt;/head&gt;
    &lt;p&gt;As you can see, for parallel workloads, this board is much better than Raspberry Pi 5.&lt;/p&gt;
    &lt;p&gt;Now let’s look at the potential use of such boards as servers.&lt;/p&gt;
    &lt;head rend="h2"&gt;Server Use&lt;/head&gt;
    &lt;p&gt;You can use this board as a server, of course. You have several distro images just for the server use, too. Docker works very nicely with this SBC, and unlike what we have seen for the RV2 and the general Risc-V ecosystem where there are very few Docker images available for that architecture, the ARM64 scene is completely different.&lt;/p&gt;
    &lt;p&gt;Here, it’s almost rare to find a Docker image where there is no ARM64 build. Not surprising since ARM64 is a thing on servers nowadays - Amazon has famously pushed their own ARM Gravitron servers as an option to reduce cloud computing costs. So most companies and providers operating on the cloud pretty much need to have ARM64 builds.&lt;/p&gt;
    &lt;p&gt;On the server, you also don’t need to care as much about the lack of GPU support since you are running headless, so any distro provided by OrangePi should do: Debian, Ubuntu, or even Arch.&lt;/p&gt;
    &lt;p&gt;Since this is a board that operates at low wattage and passive cooling, it’s an excellent choice if you want to build a small server for the home. For a NAS use case I would probably go for the RV2 instead since it has more storage ports, but this one could also work considering you can have an eMMC drive together with another M2 drive (NVME) at the same time.&lt;/p&gt;
    &lt;head rend="h2"&gt;Verdict&lt;/head&gt;
    &lt;p&gt;Little boards that were previously only used for fun or small projects have come a long way. Desktop environments were rarely usable before even on the later iterations of the Raspberry Pi. Things changed a couple of years ago, and the Raspberry Pi 5 and this Orange Pi 5 Ultra fall into a category where you could actually use them as real, daily general purpose computers and not be bothered by their responsiveness or their performance. Not only will it work well for server use, but it can do desktop work without sweating either.&lt;/p&gt;
    &lt;p&gt;Price wise, the 16G version is competitive. If you want similarly specced Celeron-equipped mini-PCs you would probably need a configuration with a N100 processor (that seems to be faster than the RK3588), but that is more expensive. So the value for money of this SBC seems to be pretty good at the moment, even for the 16G configuration.&lt;/p&gt;
    &lt;p&gt;The only negative points are the moment are:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;lack of recent distro images (Ubuntu 24.04 would be nice)&lt;/item&gt;
      &lt;item&gt;lack of GPU support (potentially because I was using the 6.1 kernel?)&lt;/item&gt;
      &lt;item&gt;incomplete mainline support&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;which may be some killer aspects depending on your use case. The wide availability of software for ARM64 on Flatpak and Docker somewhat mitigates such issues for now.&lt;/p&gt;
    &lt;p&gt;The real solution will come when the RK3588 support will be properly mainlined. Currently only parts of it are supported but it’s not complete and bug-free from what I could read. I am following news around the Arch-based BredOS as they are actively working on bringing proper support for this chip. Once this is done, the benefits should be apparent such as:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Much better Vulkan performance (compared to proprietary driver)&lt;/item&gt;
      &lt;item&gt;Proper video acceleration in browsers like Chrome&lt;/item&gt;
      &lt;item&gt;No more patches to chase from one kernel to the next!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Once there are news in this regard (hopefully in 2025) I plan to revisit my review of this SBC.&lt;/p&gt;
    &lt;head rend="h2"&gt;Practical Details&lt;/head&gt;
    &lt;p&gt;If you are interested to grab one, there are currently a few shops that sell it online:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Aliexpress store: Orange Pi 5 Ultra 16GB at 220 USD (without shipping). Expensive if you are in the US.&lt;/item&gt;
      &lt;item&gt;Amazon OrangePi Official: Orange Pi 5 Ultra 16GB sells for 158 USD on Amazon.com. (without shipping) - the cheaper option.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;There are probably some more third parties depending on where you are based in the world.&lt;/p&gt;
    &lt;p&gt;Other valuable resources:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The OrangePi 5 Ultra Product Page&lt;/item&gt;
      &lt;item&gt;The user manual for the board&lt;/item&gt;
      &lt;item&gt;The distro page on the OrangePi website.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Final note, we have been provided with a review unit of this SBC by OrangePi themselves for this article.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45347089</guid><pubDate>Tue, 23 Sep 2025 13:54:51 +0000</pubDate></item><item><title>OpenDataLoader-PDF: An open source tool for structured PDF parsing</title><link>https://github.com/opendataloader-project/opendataloader-pdf</link><description>&lt;doc fingerprint="3390da1012851aca"&gt;
  &lt;main&gt;
    &lt;p&gt;Safe, Open, High-Performance — PDF for AI&lt;/p&gt;
    &lt;p&gt;OpenDataLoader-PDF converts PDFs into JSON, Markdown or Html — ready to feed into modern AI stacks (LLMs, vector search, and RAG).&lt;/p&gt;
    &lt;p&gt;It reconstructs document layout (headings, lists, tables, and reading order) so the content is easier to chunk, index, and query. Powered by fast, heuristic, rule-based inference, it runs entirely on your local machine and delivers high-throughput processing for large document sets. AI-safety is enabled by default and automatically filters likely prompt-injection content embedded in PDFs to reduce downstream risk.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🧾 Rich, Structured Output — JSON, Markdown or Html&lt;/item&gt;
      &lt;item&gt;🧩 Layout Reconstruction — Headings, Lists, Tables, Images, Reading Order&lt;/item&gt;
      &lt;item&gt;⚡ Fast &amp;amp; Lightweight — Rule-Based Heuristic, High-Throughput, No GPU&lt;/item&gt;
      &lt;item&gt;🔒 Local-First Privacy — Runs fully on your machine&lt;/item&gt;
      &lt;item&gt;🛡️ AI-Safety — Auto-Filters likely prompt-injection content - Learn more about AI-Safety&lt;/item&gt;
      &lt;item&gt;🖍️ Annotated PDF Visualization — See detected structures overlaid on the original&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🖨️ OCR for scanned PDFs — Extract data from image-only pages&lt;/item&gt;
      &lt;item&gt;🧠 Table AI option — Higher accuracy for tables with borderless or merged cells&lt;/item&gt;
      &lt;item&gt;⚡ Performance Benchmarks — Transparent evaluations with open datasets and metrics, reported regularly&lt;/item&gt;
      &lt;item&gt;🛡️ AI Red Teaming — Transparent adversarial benchmarks with datasets and metrics, reported regularly&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Java 11 or higher must be installed and available in your system's PATH.&lt;/item&gt;
      &lt;item&gt;Python 3.9+&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;pip install -U opendataloader-pdf&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;input_path can be either the path to a single document or the path to a folder.&lt;/item&gt;
      &lt;item&gt;If you don’t specify an output_folder, the output data will be saved in the same directory as the input document.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;import opendataloader_pdf

opendataloader_pdf.run(
    input_path="path/to/document.pdf",
    output_folder="path/to/output",
    generate_markdown=True,
    generate_html=True,
    generate_annotated_pdf=True,
)&lt;/code&gt;
    &lt;p&gt;The main function to process PDFs.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Parameter&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Required&lt;/cell&gt;
        &lt;cell role="head"&gt;Default&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;code&gt;input_path&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;str&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;✅ Yes&lt;/cell&gt;
        &lt;cell&gt;—&lt;/cell&gt;
        &lt;cell&gt;Path to the input PDF file or folder.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;code&gt;output_folder&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;str&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;input folder&lt;/cell&gt;
        &lt;cell&gt;Path to the output folder.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;code&gt;password&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;str&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;None&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Password for the PDF file.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;code&gt;replace_invalid_chars&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;str&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;" "&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Character to replace invalid or unrecognized characters (e.g., �, \u0000)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;code&gt;content_safety_off&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;str&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;None&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Disables one or more content safety filters. Accepts a comma-separated list of filter names. Arguments: all, hidden-text, off-page, tiny, hidden-ocg.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;code&gt;generate_markdown&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;bool&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;False&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;True&lt;/code&gt;, generates a Markdown output file.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;code&gt;generate_html&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;bool&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;False&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;True&lt;/code&gt;, generates an HTML output file.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;code&gt;generate_annotated_pdf&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;bool&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;False&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;True&lt;/code&gt;, generates an annotated PDF output file.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;code&gt;keep_line_breaks&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;bool&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;False&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;True&lt;/code&gt;, keeps line breaks in the output.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;code&gt;html_in_markdown&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;bool&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;False&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;True&lt;/code&gt;, uses HTML in the Markdown output.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;code&gt;add_image_to_markdown&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;bool&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;False&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;True&lt;/code&gt;, adds images to the Markdown output.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;debug&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;bool&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;False&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;True&lt;/code&gt;, prints CLI messages to the console during execution.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Note: This package is a wrapper around a Java CLI and is intended for use in a Node.js backend environment. It cannot be used in a browser-based frontend.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Java 11 or higher must be installed and available in your system's PATH.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;npm install @opendataloader/pdf&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;inputPath&lt;/code&gt;can be either the path to a single document or the path to a folder.&lt;/item&gt;
      &lt;item&gt;If you don’t specify an &lt;code&gt;outputFolder&lt;/code&gt;, the output data will be saved in the same directory as the input document.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;import { run } from '@opendataloader/pdf';

async function main() {
  try {
    const output = await run('path/to/document.pdf', {
      outputFolder: 'path/to/output',
      generateMarkdown: true,
      generateHtml: true,
      generateAnnotatedPdf: true,
      debug: true,
    });
    console.log('PDF processing complete.', output);
  } catch (error) {
    console.error('Error processing PDF:', error);
  }
}

main();&lt;/code&gt;
    &lt;p&gt;
      &lt;code&gt;run(inputPath: string, options?: RunOptions): Promise&amp;lt;string&amp;gt;&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;The main function to process PDFs.&lt;/p&gt;
    &lt;p&gt;Parameters&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Parameter&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Required&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;code&gt;inputPath&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;string&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;✅ Yes&lt;/cell&gt;
        &lt;cell&gt;Path to the input PDF file or folder.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;options&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;RunOptions&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Configuration options for the run.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;RunOptions&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Property&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Default&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;code&gt;outputFolder&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;string&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;undefined&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Path to the output folder. If not set, output is saved next to the input.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;code&gt;password&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;string&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;undefined&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Password for the PDF file.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;code&gt;replaceInvalidChars&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;string&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;" "&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Character to replace invalid or unrecognized characters (e.g., , \u0000).&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;code&gt;contentSafetyOff&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;string&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;undefined&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Disables one or more content safety filters. Accepts a comma-separated list of filter names. Arguments: all, hidden-text, off-page, tiny, hidden-ocg.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;code&gt;generateMarkdown&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;boolean&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;false&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;true&lt;/code&gt;, generates a Markdown output file.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;code&gt;generateHtml&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;boolean&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;false&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;true&lt;/code&gt;, generates an HTML output file.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;code&gt;generateAnnotatedPdf&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;boolean&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;false&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;true&lt;/code&gt;, generates an annotated PDF output file.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;code&gt;keepLineBreaks&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;boolean&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;false&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;true&lt;/code&gt;, keeps line breaks in the output.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;code&gt;htmlInMarkdown&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;boolean&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;false&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;true&lt;/code&gt;, uses HTML in the Markdown output.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;code&gt;addImageToMarkdown&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;boolean&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;false&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;true&lt;/code&gt;, adds images to the Markdown output.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;debug&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;boolean&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;false&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;If &lt;code&gt;true&lt;/code&gt;, prints CLI messages to the console during execution.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;For various example templates, including Gradle and Maven, please refer to https://github.com/opendataloader-project/opendataloader-pdf/tree/main/examples/java.&lt;/p&gt;
    &lt;p&gt;To include OpenDataLoader PDF in your Maven project, add the dependency below to your &lt;code&gt;pom.xml&lt;/code&gt; file.&lt;/p&gt;
    &lt;p&gt;Check for the latest version on Maven Central.&lt;/p&gt;
    &lt;code&gt;&amp;lt;project&amp;gt;
    &amp;lt;!-- other configurations... --&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.opendataloader&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;opendataloader-pdf-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;repositories&amp;gt;
        &amp;lt;repository&amp;gt;
            &amp;lt;snapshots&amp;gt;
                &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
            &amp;lt;/snapshots&amp;gt;
            &amp;lt;id&amp;gt;vera-dev&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;Vera development&amp;lt;/name&amp;gt;
            &amp;lt;url&amp;gt;https://artifactory.openpreservation.org/artifactory/vera-dev&amp;lt;/url&amp;gt;
        &amp;lt;/repository&amp;gt;
    &amp;lt;/repositories&amp;gt;
    &amp;lt;pluginRepositories&amp;gt;
        &amp;lt;pluginRepository&amp;gt;
            &amp;lt;snapshots&amp;gt;
                &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;
            &amp;lt;/snapshots&amp;gt;
            &amp;lt;id&amp;gt;vera-dev&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;Vera development&amp;lt;/name&amp;gt;
            &amp;lt;url&amp;gt;https://artifactory.openpreservation.org/artifactory/vera-dev&amp;lt;/url&amp;gt;
        &amp;lt;/pluginRepository&amp;gt;
    &amp;lt;/pluginRepositories&amp;gt;

    &amp;lt;!-- other configurations... --&amp;gt;
&amp;lt;/project&amp;gt;&lt;/code&gt;
    &lt;p&gt;To integrate Layout recognition API into Java code, one can follow the sample code below.&lt;/p&gt;
    &lt;code&gt;import org.opendataloader.pdf.api.Config;
import org.opendataloader.pdf.api.OpenDataLoaderPDF;

import java.io.IOException;

public class Sample {

    public static void main(String[] args) {
        Config config = new Config();
        config.setOutputFolder("path/to/output");
        config.setGeneratePDF(true);
        config.setGenerateMarkdown(true);
        config.setGenerateHtml(true);

        try {
            OpenDataLoaderPDF.processFile("path/to/document.pdf", config);
        } catch (Exception exception) {
            //exception during processing
        }
    }
}&lt;/code&gt;
    &lt;p&gt;The full API documentation is available at javadoc&lt;/p&gt;
    &lt;p&gt;Download sample PDF&lt;/p&gt;
    &lt;code&gt;curl -L -o 1901.03003.pdf https://arxiv.org/pdf/1901.03003&lt;/code&gt;
    &lt;p&gt;Run opendataloader-pdf in Docker container&lt;/p&gt;
    &lt;code&gt;docker run --rm -v "$PWD":/work ghcr.io/opendataloader-project/opendataloader-pdf-cli:latest /work/1901.03003.pdf --markdown --html --pdf
&lt;/code&gt;
    &lt;p&gt;Build and install using Maven command:&lt;/p&gt;
    &lt;code&gt;mvn clean install -f java/pom.xml&lt;/code&gt;
    &lt;p&gt;If the build is successful, the resulting &lt;code&gt;jar&lt;/code&gt; file will be created in the path below.&lt;/p&gt;
    &lt;code&gt;java/opendataloader-pdf-cli/target&lt;/code&gt;
    &lt;code&gt;java -jar opendataloader-pdf-cli-&amp;lt;VERSION&amp;gt;.jar [options] &amp;lt;INPUT FILE OR FOLDER&amp;gt;&lt;/code&gt;
    &lt;p&gt;This generates a JSON file with layout recognition results in the specified output folder. Additionally, annotated PDF with recognized structures, Markdown and Html are generated if options &lt;code&gt;--pdf&lt;/code&gt;, &lt;code&gt;--markdown&lt;/code&gt; and &lt;code&gt;--html&lt;/code&gt; are specified.&lt;/p&gt;
    &lt;p&gt;By default all line breaks and hyphenation characters are removed, the Markdown does not include any images and does not use any HTML.&lt;/p&gt;
    &lt;p&gt;The option &lt;code&gt;--keep-line-breaks&lt;/code&gt; to preserve the original line breaks text content in JSON and Markdown output.
The option &lt;code&gt;--content-safety-off&lt;/code&gt; disables one or more content safety filters. Accepts a comma-separated list of filter names.
The option &lt;code&gt;--markdown-with-html&lt;/code&gt; enables use of HTML in Markdown, which may improve Markdown preview in processors that support HTML tags.
The option &lt;code&gt;--markdown-with-images&lt;/code&gt; enables inclusion of image references into the output Markdown.
The option &lt;code&gt;--replace-invalid-chars&lt;/code&gt; replaces invalid or unrecognized characters (e.g., �, \u0000) with the specified character.
The images are extracted from PDF as individual files and stored in a subfolder next to the Markdown output.&lt;/p&gt;
    &lt;code&gt;Options:
-o,--output-dir &amp;lt;arg&amp;gt;           Specifies the output directory for generated files
--keep-line-breaks              Preserves original line breaks in the extracted text
--content-safety-off &amp;lt;arg&amp;gt;      Disables one or more content safety filters. Accepts a comma-separated list of filter names. Arguments: all, hidden-text, off-page, tiny, hidden-ocg
--markdown-with-html            Sets the data extraction output format to Markdown with rendering complex elements like tables as HTML for better structure
--markdown-with-images          Sets the data extraction output format to Markdown with extracting images from the PDF and includes them as links
--markdown                      Sets the data extraction output format to Markdown
--html                          Sets the data extraction output format to HTML
-p,--password &amp;lt;arg&amp;gt;             Specifies the password for an encrypted PDF
--pdf                           Generates a new PDF file where the extracted layout data is visualized as annotations
--replace-invalid-chars &amp;lt;arg&amp;gt;   Replaces invalid or unrecognized characters (e.g., �, \u0000) with the specified character
&lt;/code&gt;
    &lt;p&gt;Root json node&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Field&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Optional&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;file name&lt;/cell&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Name of processed pdf file&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;number of pages&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Number of pages in pdf file&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;author&lt;/cell&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Author of pdf file&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;title&lt;/cell&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Title of pdf file&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;creation date&lt;/cell&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Creation date of pdf file&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;modification date&lt;/cell&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Modification date of pdf file&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;kids&lt;/cell&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Array of detected content elements&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Common fields of content json nodes&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Field&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Optional&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;id&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;yes&lt;/cell&gt;
        &lt;cell&gt;Unique id of content element&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;level&lt;/cell&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;yes&lt;/cell&gt;
        &lt;cell&gt;Level of content element&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;type&lt;/cell&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Type of content element&lt;p&gt;Possible types:&lt;/p&gt;&lt;code&gt;footer&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;heading&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;table row&lt;/code&gt;, &lt;code&gt;table cell&lt;/code&gt;, &lt;code&gt;paragraph&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;list item&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;, &lt;code&gt;line art&lt;/code&gt;, &lt;code&gt;caption&lt;/code&gt;, &lt;code&gt;text block&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;page number&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Page number of content element&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;bounding box&lt;/cell&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Bounding box of content element&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Specific fields of text content json nodes (&lt;code&gt;caption&lt;/code&gt;, &lt;code&gt;heading&lt;/code&gt;, &lt;code&gt;paragraph&lt;/code&gt;)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Field&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Optional&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;font&lt;/cell&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Font name of text&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;font size&lt;/cell&gt;
        &lt;cell&gt;double&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Font size of text&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;text color&lt;/cell&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Color of text&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;content&lt;/cell&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Text value&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Specific fields of &lt;code&gt;table&lt;/code&gt; json nodes&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Field&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Optional&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;number of rows&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Number of table rows&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;number of columns&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Number of table columns&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;rows&lt;/cell&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Array of table rows&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;previous table id&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;yes&lt;/cell&gt;
        &lt;cell&gt;Id of previous connected table&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;next table id&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;yes&lt;/cell&gt;
        &lt;cell&gt;Id of next connected table&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Specific fields of &lt;code&gt;table row&lt;/code&gt; json nodes&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Field&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Optional&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;row number&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Number of table row&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;cells&lt;/cell&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Array of table cells&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Specific fields of &lt;code&gt;table cell&lt;/code&gt; json nodes&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Field&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Optional&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;row number&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Row number of table cell&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;column number&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Column number of table cell&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;row span&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Row span of table cell&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;column span&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Column span of table cell&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;kids&lt;/cell&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Array of table cell content elements&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Specific fields of &lt;code&gt;heading&lt;/code&gt; json nodes&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Field&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Optional&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;heading level&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Heading level of heading&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Specific fields of &lt;code&gt;list&lt;/code&gt; json nodes&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Field&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Optional&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;number of list items&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Number of list items&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;numbering style&lt;/cell&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Numbering style of this list&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;previous list id&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;yes&lt;/cell&gt;
        &lt;cell&gt;Id of previous connected list&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;next list id&lt;/cell&gt;
        &lt;cell&gt;integer&lt;/cell&gt;
        &lt;cell&gt;yes&lt;/cell&gt;
        &lt;cell&gt;Id of next connected list&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;list items&lt;/cell&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Array of list item content elements&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Specific fields of &lt;code&gt;list item&lt;/code&gt; json nodes&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Field&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Optional&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;kids&lt;/cell&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Array of list item content elements&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Specific fields of &lt;code&gt;header&lt;/code&gt; and &lt;code&gt;footer&lt;/code&gt; json nodes&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Field&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Optional&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;kids&lt;/cell&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Array of header/footer content elements&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Specific fields of &lt;code&gt;text block&lt;/code&gt; json nodes&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Field&lt;/cell&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Optional&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;kids&lt;/cell&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;no&lt;/cell&gt;
        &lt;cell&gt;Array of text block content elements&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;We believe that great software is built together.&lt;/p&gt;
    &lt;p&gt;Your contributions are vital to the success of this project.&lt;/p&gt;
    &lt;p&gt;Please read CONTRIBUTING.md for details on how to contribute.&lt;/p&gt;
    &lt;p&gt;Have questions or need a little help? We're here for you!🤗&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;GitHub Discussions: For Q&amp;amp;A and general chats. Let's talk! 🗣️&lt;/item&gt;
      &lt;item&gt;GitHub Issues: Found a bug? 🐛 Please report it here so we can fix it.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We love our brand and want to protect it!&lt;/p&gt;
    &lt;p&gt;This project may contain trademarks, logos, or brand names for our products and services.&lt;/p&gt;
    &lt;p&gt;To ensure everyone is on the same page, please remember these simple rules:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Authorized Use: You're welcome to use our logos and trademarks, but you must follow our official brand guidelines.&lt;/item&gt;
      &lt;item&gt;No Confusion: When you use our trademarks in a modified version of this project, it should never cause confusion or imply that Hancom officially sponsors or endorses your version.&lt;/item&gt;
      &lt;item&gt;Third-Party Brands: Any use of trademarks or logos from other companies must follow that company’s specific policies.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This project is licensed under the Mozilla Public License 2.0.&lt;/p&gt;
    &lt;p&gt;For the full license text, see LICENSE.&lt;/p&gt;
    &lt;p&gt;For information on third-party libraries and components, see:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45347147</guid><pubDate>Tue, 23 Sep 2025 13:58:48 +0000</pubDate></item><item><title>How are developers using AI? Inside our 2025 DORA report</title><link>https://blog.google/technology/developers/dora-report-2025/</link><description>&lt;doc fingerprint="af439e98eb1325cc"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How are developers using AI? Inside our 2025 DORA report&lt;/head&gt;
    &lt;p&gt;Today, we're sharing key findings from the 2025 DORA Report, our annual research into the trends shaping modern software development. In our report, State of AI-assisted Software Development, we surveyed nearly 5,000 technology professionals globally, validating what we all suspected: the way software is built has profoundly changed.&lt;/p&gt;
    &lt;p&gt;Google Cloud’s DORA research program has been investigating the capabilities, practices and measures of high-performing technology-driven teams and organizations for more than a decade. And our 2025 research makes it clear that AI is no longer a novelty, but a near-universal part of a developer’s toolkit.&lt;/p&gt;
    &lt;head rend="h2"&gt;Massive adoption meets major productivity gains&lt;/head&gt;
    &lt;p&gt;This year's report reveals a significant finding: AI adoption among software development professionals has surged to 90%, marking a 14% increase from last year. These professionals, from developers to product managers, now integrate AI into their core workflows, typically dedicating a median of two hours daily to working with it.&lt;/p&gt;
    &lt;p&gt;Our findings on the adoption and use of AI by software developers point to a broad adoption of and deep reliance on AI across a range of tasks.&lt;/p&gt;
    &lt;p&gt;A significant majority (65%) of those surveyed are heavily relying on AI for software development, with 37% reporting a "moderate amount" of reliance, 20% "a lot" and 8% "a great deal."&lt;/p&gt;
    &lt;p&gt;This indicates a strong adoption and dependence on AI within the field, and the advantages for users of these tools are evident in this year’s research:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Significant productivity gains: Over 80% of respondents indicate that AI has enhanced their productivity.&lt;/item&gt;
      &lt;item&gt;Improved code quality: A majority (59%) report a positive influence of AI on code quality.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As AI adoption has increased, developers have reported increased productivity and positive impacts on code quality&lt;/p&gt;
    &lt;head rend="h2"&gt;A trust and productivity paradox&lt;/head&gt;
    &lt;p&gt;Despite the widespread adoption and perceived benefits, some software development professionals remain cautious about using AI in their work. Our report uncovers a surprising "trust paradox": While 24% of respondents report a "great deal" (4%) or "a lot" (20%) of trust in AI, 30% trust it "a little" (23%) or "not at all" (7%). This indicates that AI outputs are perceived as useful and valuable by many of this year’s survey respondents, despite a lack of complete trust in them. This could also imply that AI is being incorporated into workflows as a supportive tool to enhance productivity and efficiency, rather than serving as a full substitute for human judgment.&lt;/p&gt;
    &lt;p&gt;While AI is boosting individual performance, its effect on organizations is more complex. This year's research shows that AI adoption is now linked to higher software delivery throughput, meaning teams are releasing more software and applications, which is a positive reversal of last year's findings. However, the ongoing challenge remains of ensuring software works as intended before it's delivered to users.&lt;/p&gt;
    &lt;head rend="h2"&gt;Reflections on how teams work&lt;/head&gt;
    &lt;p&gt;Our research this year also found that AI can act as a "mirror and a multiplier.” In cohesive organizations, AI boosts efficiency. In fragmented ones, it highlights weaknesses.&lt;/p&gt;
    &lt;p&gt;To better understand these underlying conditions, this year's report moves beyond simple performance metrics to reveal seven distinct team archetypes, providing a deeper, more human-centric view of what drives success in AI adoption. These profiles, from "Harmonious high-achievers" to teams caught in a "Legacy bottleneck," offer a richer narrative that can help organizations understand the unique interplay between performance, well-being and workplace environment.&lt;/p&gt;
    &lt;p&gt;For organizations ready to adopt AI, new tools can help them evolve their work processes - meaning they benefit from both the productivity boost and the resulting transformation.&lt;/p&gt;
    &lt;head rend="h2"&gt;A blueprint for guiding AI in organizations&lt;/head&gt;
    &lt;p&gt;Adoption of AI alone isn't enough to guarantee success though. That’s why this year, we’re also introducing a new blueprint of seven essential capabilities for amplifying AI's impact. The DORA AI Capabilities Model is based on extensive research and identifies a blend of technical and cultural factors that are crucial for success.&lt;/p&gt;
    &lt;p&gt;The DORA AI Capabilities Model provides data-backed guidance for organizations adopting AI&lt;/p&gt;
    &lt;p&gt;The key takeaway is clear: AI is a transformative tool for developers, but realizing its full potential requires more than just adoption. It demands that organizations evolve their culture, processes and systems to support a new era of software development.&lt;/p&gt;
    &lt;p&gt;Get deeper insights and additional findings from this year's research when you download the State of AI-assisted Software Development report.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45347197</guid><pubDate>Tue, 23 Sep 2025 14:02:49 +0000</pubDate></item><item><title>x402 — An open protocol for internet-native payments</title><link>https://www.x402.org/</link><description>&lt;doc fingerprint="a538813a0d0efbd5"&gt;
  &lt;main&gt;
    &lt;p&gt;An open protocol for internet-native payments&lt;/p&gt;
    &lt;p&gt;Built around the HTTP 402 status code, x402 enables users to pay for resources via API without registration, emails, OAuth, or complex signatures.&lt;/p&gt;
    &lt;p&gt;x402 as a protocol has 0 fees for either the customer or the merchant.&lt;/p&gt;
    &lt;p&gt;Accept payments at the speed of the blockchain. Money in your wallet in 2 seconds, not T+2.&lt;/p&gt;
    &lt;p&gt;x402 is not tied to any specific blockchain or token, its a neutral standard open to integration by all.&lt;/p&gt;
    &lt;p&gt;As little as 1 line of middleware code or configuration in your existing web server stack and you can start accepting payments. Customers and agents aren't required to create an account or provide any personal information.&lt;/p&gt;
    &lt;p&gt;Anyone can implement or extend x402. It's not tied to any centralized provider, and encourages broad community participation.&lt;/p&gt;
    &lt;p&gt;Activates the dormant 402 HTTP status code and works with any HTTP stack. It works simply via headers and status codes on your existing HTTP server.&lt;/p&gt;
    &lt;p&gt;x402 unlocks new monetization models, offering developers and content creators a frictionless way to earn revenue from small transactions without forcing subscriptions or showing ads.&lt;/p&gt;
    &lt;p&gt;Agents can use the x402 Protocol to pay for API requests in real-time.&lt;/p&gt;
    &lt;p&gt;Using x402, customers can easily access storage services without account creation.&lt;/p&gt;
    &lt;p&gt;x402 unlocks instant transactions, enabling true micropayments for content.&lt;/p&gt;
    &lt;p&gt;Just add a single line of code in your app, and you can require a USDC payment for each incoming request.&lt;/p&gt;
    &lt;quote&gt;paymentMiddleware("0xYourAddress", {"/your-endpoint": "$0.01"}); // and thats it!&lt;/quote&gt;
    &lt;p&gt;If a request arrives without payment, the server responds with HTTP 402, prompting the client to pay and retry.&lt;/p&gt;
    &lt;quote&gt;HTTP/1.1 402 Payment Required&lt;/quote&gt;
    &lt;p&gt;x402 allows any web developer to accept crypto payments without the complexity of having to interact with the blockchain.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45347335</guid><pubDate>Tue, 23 Sep 2025 14:14:46 +0000</pubDate></item><item><title>Agents turn simple keyword search into compelling search experiences</title><link>https://softwaredoug.com/blog/2025/09/22/reasoning-agents-need-bad-search</link><description>&lt;doc fingerprint="3b1fda320b812e0a"&gt;
  &lt;main&gt;
    &lt;p&gt;A traditional RAG system often looks like the search we’ve built for years. An LLM calls a search API. We have query understanding and reranking functionality under the hood. All optimized for user engagement.&lt;/p&gt;
    &lt;p&gt;This thick-daddy search API does quite a bit, as shown below:&lt;/p&gt;
    &lt;p&gt;With small modifications (chunking, a focus on vector retrieval) the RAG implementations look familiar.&lt;/p&gt;
    &lt;p&gt;Agents, however, come with the ability to reason. And like human users, they might try a query, see the results, adjust their query, and zero-in on the best search terms to find what they want.&lt;/p&gt;
    &lt;p&gt;Like human users, the agent can build a “mental model” of how the search tool works. If there’s a clear, predictable correspondence between stimulus and output, the agent will figure it out. However, a large, complex system might not be as transparent.&lt;/p&gt;
    &lt;p&gt;Because of this, I’d argue the traditional, thick search APIs are counterproductive to being used by agents. They may be too complex for agents to reason about effectively.&lt;/p&gt;
    &lt;p&gt;So lately, I’ve tried a rather stupid search backend. More like this image:&lt;/p&gt;
    &lt;p&gt;In the furniture search examples I use in my Cheat at Search course, I tried this out.&lt;/p&gt;
    &lt;p&gt;Instead of a big, complex search system, I tell the agent about this dumb thing it can use to search. It then applies its own intelligence to use the tool correctly.&lt;/p&gt;
    &lt;code&gt;def search_products(query: str, top_k: int = 5) -&amp;gt; List[Dict]:
    """
    Search for furniture products.

    This is direct keyword search, no synonyms, only BM25 scoring on product name 
    and description and basic snowball tokenization of query and document.

    Args:
        query: The search query string.
        top_k: The number of top results to return.

    Returns:
        A list of dictionaries containing product information.
    """
   ...
&lt;/code&gt;
    &lt;p&gt;( the doc string here becomes part of the prompt, see the source code)&lt;/p&gt;
    &lt;p&gt;I slimmed the search down to fairly simple keyword search, and told GPT-5 exactly how it works. It behaves predictably, if stupidly.&lt;/p&gt;
    &lt;p&gt;And that’s a good thing.&lt;/p&gt;
    &lt;p&gt;I’m fairly surprised how well it works at solving user queries. Albeit slowly.&lt;/p&gt;
    &lt;p&gt;Here I am finding couches that would be good for a vampire.&lt;/p&gt;
    &lt;code&gt;User: A couch fit for a vampire

...

Assistant: Here are some dramatically tufted, velvet/chesterfield options with a suitably vampiric vibe:

Chesterfield-style sofas (timeless, tufted, dramatic arms/back)
- Porter 80" Velvet Rolled Arm Chesterfield Sofa (ID 4306)
- Rolled Arm Chesterfield Sofa (ID 28854)
- Quitaque 88" Rolled Arm Chesterfield Sofa (ID 17093)

Velvet sofas with luxe flair
- 85" Velvet Tuxedo Arm Sofa (ID 29613) — velvet with nailhead trim
- Camren 72" Velvet Round Arm Sofa (ID 40049)
- 112" Wide Velvet Sofa &amp;amp; Chaise (ID 27546)

Chaise lounges (fainting-couch energy)
- Rosemead Velvet Chaise Lounge (ID 40626)
- Avondale Velvet Chaise Lounge (ID 6452)
- Brighouse Chaise Lounge (ID 6392)
- Tilstone Chaise Lounge (ID 18643) — velvet with silver nailhead accents
&lt;/code&gt;
    &lt;p&gt;Or asking for the ugliest chair&lt;/p&gt;
    &lt;code&gt;User: ugliest chair in the catalog

Assistant: I ran several targeted searches to surface the most over-the-top
chairs. Here are the top contenders for “ugliest chair” in our catalog:

- Zebra Arm Chair (ID 18587) — bold zebra upholstery, statement piece energy
- Toby Cow Print Task Chair (ID 5002) — desk chair in full cow print
- Gaudy 47" Wide Chenille Armchair (ID 8921) — it literally says “Gaudy” in the name
- The Abbey Gothic Revival 19" Wide Side Chair (ID 36608) — ornate, carved gothic look
&lt;/code&gt;
    &lt;head rend="h2"&gt;Helping the agent remember as it goes&lt;/head&gt;
    &lt;p&gt;The agent can track how well a tool call works as it goes. In my code, the agent stores its evaluation of each tool’s results. Essentially “LLM-as-a-judge as you go”. The next time a search happens, the agent can recall what it liked / didn’t like last time.&lt;/p&gt;
    &lt;code&gt;system_prompt = """
    You take user search queries and use a search tool to find furniture products.
    
    Look at the search tools you have, their limitations, how they work, etc when forming your plan.

    Before searching you MUST use the "get_past_queries" to get similar, past queries
    the user has made

    Remember every tool usage you make. After searching with a tool, evaluate the results,
    then save the interaction (immediately after tool usage) with the "save_queries_used" tool
"""

&lt;/code&gt;
    &lt;p&gt;Below are search tool queries my code saved after I searched for the &lt;code&gt;ugliest chair in the catalog&lt;/code&gt;&lt;/p&gt;
    &lt;p&gt;You see the user’s query, along with the query used at the tool (ie &lt;code&gt;cow print chair&lt;/code&gt; ):&lt;/p&gt;
    &lt;code&gt;Saved interaction: user_query='ugliest chair in the catalog' 
search_tool_name='mcp_search-server.search_products' 
search_tool_query='cow print chair'
quality='good'
reasoning="Returned an adult 'cow print task chair' that clearly fits a loud/novelty aesthetic; strong candidate for 'ugliest chair' request."

Saved interaction: user_query='ugliest chair in the catalog'
search_tool_name='mcp_search-server.search_products' 
search_tool_query='patchwork accent chair'
quality='meh'
reasoning="Found a kids patchwork chair; adult options not surfaced. Only tangentially relevant to 'ugliest chair' intent."

Saved interaction: user_query='ugliest chair in the catalog' 
search_tool_name='mcp_search-server.search_products'
search_tool_query='skull chair'
quality='bad'
reasoning='No chair products matched; results were decor and textiles unrelated to chairs.'

&lt;/code&gt;
    &lt;p&gt;I’ll be able to recall what worked well for this query. I could even remember these expansions later if I build a normal site search without LLMs.&lt;/p&gt;
    &lt;p&gt;Semantic caching gives us another bonus. Later, when I search for a similar query, say &lt;code&gt;ugly chair&lt;/code&gt; , I can take &lt;code&gt;ugly chair&lt;/code&gt; and find past queries most similar to this query, like below.&lt;/p&gt;
    &lt;p&gt;The agent can see what’s worked well / hasn’t worked well for friends of &lt;code&gt;ugly chair&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;Getting past queries for: ugly chair

Matched query: 
  ugliest chair in the catalog, 
  similarity: 0.8236806392669678, 
  interaction: user_query='ugliest chair in the catalog' 
  search_tool_name='mcp_search-server.search_products'
  search_tool_query='novelty chair'
  quality='meh' reasoning="Found novelty chairs but primarily for kids; may not match adult seating requestfor 'ugliest chair'."
Matched query: ugliest chair in the catalog, 
  similarity: 0.8236806392669678, interaction: user_query='ugliest chair in the catalog' search_tool_name='mcp_search-server.search_products' search_tool_query='weird chair'
  quality='bad'
  reasoning="Keyword 'weird' mostly matched non-chair textiles and generic chair listings; not  helpful for surfacing intentionally odd or gaudy chairs."
Matched query: ugliest chair in the catalog, 
  similarity: 0.8236806392669678,
  interaction: user_query='ugliest chair in the catalog'
  search_tool_name='mcp_search-server.search_products'
  search_tool_query='zebra accent chair'
  quality='good'
  reasoning="Surfaced a 'zebra arm chair' (animal print) that fits an intentionally loud/gaudy aesthetic often perceived as ugly; results include a clear adult armchair option."
&lt;/code&gt;
    &lt;p&gt;As the agent searches, it’s little vector lookup of user queries turns into a knowledge graph. User queries connected to other user queries via similarity. And each with notes on what’s worked / not worked when calling the search tool.&lt;/p&gt;
    &lt;p&gt;It’s the ultimate learning machine.&lt;/p&gt;
    &lt;p&gt;At least as far as its own preferences.&lt;/p&gt;
    &lt;head rend="h2"&gt;Only as good as the agent’s ability to evaluate results&lt;/head&gt;
    &lt;p&gt;The LLM must be able to evaluate the results that come back. It needs to be a reasonable LLM judge. That means:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Did we return useful metadata for the agent to use in its evaluation? (Here we use product / description). But should we return images? Any other metadata?&lt;/item&gt;
      &lt;item&gt;Does the LLM actually have domain expertise to evaluate the results? (Note above it returns a brand “Gaudy”, which is not the adjective “gaudy” — as in ugly)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Finally the big one:&lt;/p&gt;
    &lt;head rend="h3"&gt;What about the user’s input?&lt;/head&gt;
    &lt;p&gt;The agent’s judgment is bound to be flawed / limited. Even in an ideal setting, it will always be disjoint from what users want. Lack of user clickstream feedback is a huge gap in RAG that continues here.&lt;/p&gt;
    &lt;p&gt;We can’t expect LLMs to have any idea of the crazy, insane things, humans do when nobody is watching. I’ve seen users do all sorts of things:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Users often click black / boring colors, not loud ones&lt;/item&gt;
      &lt;item&gt;Users click on spicy topics or images that have nothing to do with their query&lt;/item&gt;
      &lt;item&gt;Users get what they need from the search page, and never click anything&lt;/item&gt;
      &lt;item&gt;Users click because of the relationship between an image and its neighbor&lt;/item&gt;
      &lt;item&gt;Click data itself is sparse and noisy, and may require a lot in aggregate to make sense of&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;There are dozens of biases cataloged in user clickstream interactions with search results.&lt;/p&gt;
    &lt;p&gt;The search field has spent decades interpreting clickstream data, and the RAG world continues to lack good answers to getting that data back into the agent.&lt;/p&gt;
    &lt;p&gt;Maybe you’ve seen good research here? Please share!&lt;/p&gt;
    &lt;head rend="h2"&gt;Are reasoners actually actively harmful rankers?&lt;/head&gt;
    &lt;p&gt;Reasoning involves taking a base set of facts and deriving a solution. This, however, is different from directly optimizing for what users want (as expressed through clickstream data). We don’t have the technology for an LLM or agent to churn over millions of user sessions to become a better judge of search result quality.&lt;/p&gt;
    &lt;p&gt;Even if we gave the agent an oracle - labeled each result with user engagement data, could it make sense of latent patterns? Or would it simply be confused at the strange inconsistent behavior of humans that don’t act like math proofs or programming conpetitions?&lt;/p&gt;
    &lt;p&gt;Any ranking model optimized to engagement would more likely be implemented outside the agent: In a classic, thick search stack. The agent’s inner LLM judge, might look at model-ranked results and assume they’re bad. Why would users want such bland products? Why would the search have interpreted “Gaudy” to be a brand name, when its obviously “ugly”?&lt;/p&gt;
    &lt;p&gt;In short, users’ chaotic, implicit search expectations — as expressed in their clickstream — go against the agent’s orderly, explicit reasoning + judgment. An agent may issue a search and think “oh this result set was meh” when in reality, its the most engaging search results for that query.&lt;/p&gt;
    &lt;p&gt;Reasoning about search tool output might be very dangerous if the agent discards actually relevant results.&lt;/p&gt;
    &lt;p&gt;So take this article with this big grain of salt and be careful.&lt;/p&gt;
    &lt;p&gt;But still, it’s pretty fun.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45347363</guid><pubDate>Tue, 23 Sep 2025 14:17:23 +0000</pubDate></item><item><title>Show HN: Kekkai – a simple, fast file integrity monitoring tool in Go</title><link>https://github.com/catatsuy/kekkai</link><description>&lt;doc fingerprint="f54dd7534d159c2"&gt;
  &lt;main&gt;
    &lt;p&gt;A simple and fast Go tool for file integrity monitoring. Detects unauthorized file modifications caused by OS command injection and other attacks by recording file hashes during deployment and verifying them periodically.&lt;/p&gt;
    &lt;p&gt;The name "Kekkai" comes from the Japanese word 結界 (kekkai), meaning "barrier" - a protective boundary that keeps unwanted things out, perfectly representing this tool's purpose of protecting your files from tampering.&lt;/p&gt;
    &lt;p&gt;Kekkai was designed to solve specific challenges in production server environments:&lt;/p&gt;
    &lt;p&gt;Traditional tools like &lt;code&gt;tar&lt;/code&gt; or file sync utilities (e.g., &lt;code&gt;rsync&lt;/code&gt;) include metadata like timestamps in their comparisons, causing false positives when only timestamps change. In environments with heavy NFS usage or dynamic log directories, existing tools become difficult to configure and maintain.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Content-Only Hashing&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Hashes only file contents, ignoring timestamps and metadata&lt;/item&gt;
          &lt;item&gt;Detects actual content changes, not superficial modifications&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Immutable Exclude Rules&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Exclude patterns are set during manifest generation only&lt;/item&gt;
          &lt;item&gt;Cannot be modified during verification, preventing attackers from hiding changes&lt;/item&gt;
          &lt;item&gt;Only exclude server-generated files (logs, cache, uploads, NFS mounts)&lt;/item&gt;
          &lt;item&gt;Application dependencies (vendor, node_modules) are monitored as they're part of the deployment&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Symlink Security&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Uses &lt;code&gt;os.Lstat&lt;/code&gt;to properly detect symlinks without following them&lt;/item&gt;
          &lt;item&gt;Tracks symbolic links with their target paths (via &lt;code&gt;os.Readlink&lt;/code&gt;)&lt;/item&gt;
          &lt;item&gt;Hashes the symlink target path itself, not the target's content&lt;/item&gt;
          &lt;item&gt;Detects when symlinks are modified to point to different targets&lt;/item&gt;
          &lt;item&gt;Detects when regular files are replaced with symlinks (and vice versa)&lt;/item&gt;
          &lt;item&gt;Prevents attackers from hiding malicious changes through symlink manipulation&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;Uses &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Secure Hash Storage with S3&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Deploy servers have write-only access&lt;/item&gt;
          &lt;item&gt;Application servers have read-only access&lt;/item&gt;
          &lt;item&gt;Even if compromised, attackers cannot modify stored hashes&lt;/item&gt;
          &lt;item&gt;Local file output available for testing&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Tamper-Resistant Distribution&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Single Go binary with minimal dependencies&lt;/item&gt;
          &lt;item&gt;Recommended to run with restricted permissions&lt;/item&gt;
          &lt;item&gt;Configuration should be read from S3 or managed paths, not local files&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🚀 Fast: Efficient hash calculation with parallel processing&lt;/item&gt;
      &lt;item&gt;🔒 Secure: Tamper-proof storage with S3 integration&lt;/item&gt;
      &lt;item&gt;📊 Monitoring Ready: Multiple output formats for various monitoring systems&lt;/item&gt;
      &lt;item&gt;🎯 Deterministic: Same file structure always produces the same hash&lt;/item&gt;
      &lt;item&gt;☁️ EC2 Ready: Authentication via IAM roles&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Build from source
git clone https://github.com/catatsuy/kekkai.git
cd kekkai
make

# Or directly with go build
go build -o ./bin/kekkai ./cmd/kekkai

# Run tests
make test&lt;/code&gt;
    &lt;code&gt;# Generate manifest
kekkai generate --target /var/www/app --output manifest.json

# Verify files
kekkai verify --manifest manifest.json --target /var/www/app&lt;/code&gt;
    &lt;code&gt;kekkai generate \
  --target /var/www/app \
  --exclude "*.log" \
  --exclude "cache/**" \
  --output manifest.json&lt;/code&gt;
    &lt;p&gt;Kekkai stores manifests in S3 for secure, centralized management. Each deployment updates the same &lt;code&gt;manifest.json&lt;/code&gt; file.&lt;/p&gt;
    &lt;code&gt;# For production deployment (must explicitly specify --base-path)
kekkai generate \
  --target /var/www/app \
  --s3-bucket my-manifests \
  --app-name myapp \
  --base-path production  # Explicitly required for production

# For staging/development (uses default "development" if not specified)
kekkai generate \
  --target /var/www/app \
  --s3-bucket my-manifests \
  --app-name myapp \
  --base-path staging

# During verification (must match the base-path used during generation)
kekkai verify \
  --s3-bucket my-manifests \
  --app-name myapp \
  --base-path production \
  --target /var/www/app&lt;/code&gt;
    &lt;p&gt;Benefits:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Lower S3 costs - Minimal S3 operations&lt;/item&gt;
      &lt;item&gt;Clean structure - One manifest file per application&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Add to crontab for periodic checks
*/5 * * * * kekkai verify \
  --s3-bucket my-manifests \
  --app-name myapp \
  --base-path production \
  --target /var/www/app

# Use cache for faster verification (cache in temp directory)
*/5 * * * * kekkai verify \
  --s3-bucket my-manifests \
  --app-name myapp \
  --base-path production \
  --target /var/www/app \
  --use-cache \
  --verify-probability 0.1

# Use persistent cache in custom directory
*/5 * * * * kekkai verify \
  --s3-bucket my-manifests \
  --app-name myapp \
  --base-path production \
  --target /var/www/app \
  --use-cache \
  --cache-dir /var/cache/kekkai \
  --verify-probability 0.1&lt;/code&gt;
    &lt;p&gt;Configure your monitoring system to alert based on your requirements (e.g., alert after consecutive failures).&lt;/p&gt;
    &lt;p&gt;These examples show common exclude patterns for various frameworks. Important: Only exclude files generated on the server (logs, cache, uploads). Application dependencies like &lt;code&gt;vendor&lt;/code&gt; or &lt;code&gt;node_modules&lt;/code&gt; MUST be monitored as they are part of the deployed application.&lt;/p&gt;
    &lt;p&gt;For production use, replace &lt;code&gt;--output manifest.json&lt;/code&gt; with S3 storage options (&lt;code&gt;--s3-bucket&lt;/code&gt;, &lt;code&gt;--app-name&lt;/code&gt;, &lt;code&gt;--base-path&lt;/code&gt;).&lt;/p&gt;
    &lt;code&gt;kekkai generate \
  --target /var/www/app \
  --exclude "storage/**" \
  --exclude "bootstrap/cache/**" \
  --exclude "*.log" \
  --output manifest.json&lt;/code&gt;
    &lt;code&gt;kekkai generate \
  --target /var/www/app \
  --exclude "*.log" \
  --exclude ".npm/**" \
  --exclude "tmp/**" \
  --output manifest.json&lt;/code&gt;
    &lt;code&gt;kekkai generate \
  --target /var/www/app \
  --exclude "log/**" \
  --exclude "tmp/**" \
  --exclude "public/assets/**" \
  --output manifest.json&lt;/code&gt;
    &lt;code&gt;kekkai generate \
  --target /var/www/app \
  --exclude "**/__pycache__/**" \
  --exclude "media/**" \
  --exclude "staticfiles/**" \
  --exclude "*.pyc" \
  --output manifest.json&lt;/code&gt;
    &lt;p&gt;For deployment server (write access):&lt;/p&gt;
    &lt;code&gt;{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:PutObject"
      ],
      "Resource": "arn:aws:s3:::my-manifests/*"
    }
  ]
}&lt;/code&gt;
    &lt;p&gt;For production server (read-only):&lt;/p&gt;
    &lt;code&gt;{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject"
      ],
      "Resource": "arn:aws:s3:::my-manifests/*"
    }
  ]
}&lt;/code&gt;
    &lt;p&gt;Recommended: Enable S3 versioning to maintain history of manifest changes.&lt;/p&gt;
    &lt;code&gt;# Optional: Enable versioning for history tracking
aws s3api put-bucket-versioning \
  --bucket my-manifests \
  --versioning-configuration Status=Enabled

# Enable encryption
aws s3api put-bucket-encryption \
  --bucket my-manifests \
  --server-side-encryption-configuration '{
    "Rules": [{
      "ApplyServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
      }
    }]
  }'

# Optional: Set lifecycle policy to delete old versions after N days
aws s3api put-bucket-lifecycle-configuration \
  --bucket my-manifests \
  --lifecycle-configuration '{
    "Rules": [{
      "Id": "DeleteOldVersions",
      "Status": "Enabled",
      "NoncurrentVersionExpiration": {
        "NoncurrentDays": 30
      }
    }]
  }'&lt;/code&gt;
    &lt;code&gt;#!/bin/bash
# deploy.sh

set -e

APP_NAME="myapp"
DEPLOY_DIR="/var/www/app"
S3_BUCKET="my-manifests"

# 1. Install dependencies locally
cd ./src
composer install --no-dev

# 2. Deploy application to server
rsync -av ./src/ ${DEPLOY_DIR}/

# 3. Generate manifest and save to S3
# Note: For production, explicitly specify --base-path production
kekkai generate \
  --target ${DEPLOY_DIR} \
  --exclude "storage/**" \
  --exclude "bootstrap/cache/**" \
  --s3-bucket ${S3_BUCKET} \
  --app-name ${APP_NAME} \
  --base-path production  # MUST be explicit for production

echo "Deploy completed with integrity manifest"
echo "Manifest saved to: ${S3_BUCKET}/production/${APP_NAME}/manifest.json"&lt;/code&gt;
    &lt;p&gt;Generate a manifest file.&lt;/p&gt;
    &lt;code&gt;Options:
  -target string      Target directory (default ".")
  -output string      Output file, "-" for stdout (default "-")
  -exclude string     Exclude pattern (can be specified multiple times)
  -s3-bucket string   S3 bucket name
  -s3-region string   AWS region
  -base-path string   S3 base path (default "development")
  -app-name string    Application name (creates path: {base-path}/{app-name}/manifest.json)
  -format string      Output format: text, json (default "text")
  -workers int        Number of worker threads (0 = auto detect)
  -rate-limit int     Rate limit in bytes per second (0 = no limit)
  -timeout int        Timeout in seconds (default: 300)
&lt;/code&gt;
    &lt;p&gt;Verify file integrity.&lt;/p&gt;
    &lt;code&gt;Options:
  -manifest string    Manifest file path
  -s3-bucket string   S3 bucket name
  -s3-region string   AWS region
  -base-path string   S3 base path (default "development")
  -app-name string    Application name (reads from: {base-path}/{app-name}/manifest.json)
  -target string      Target directory to verify (default ".")
  -format string      Output format: text, json (default "text")
  -workers int              Number of worker threads (0 = auto detect)
  -rate-limit int           Rate limit in bytes per second (0 = no limit)
  -timeout int              Timeout in seconds (default: 300)
  -use-cache                Enable local cache for verification (checks size, mtime, ctime)
  -cache-dir string         Directory for cache file (default: system temp directory)
  -verify-probability float Probability of hash verification with cache hit (0.0-1.0, default: 0.1)
&lt;/code&gt;
    &lt;code&gt;✓ Integrity check passed
  Verified 1523 files
&lt;/code&gt;
    &lt;code&gt;{
  "success": true,
  "timestamp": "2024-01-01T00:00:00Z",
  "message": "All files verified successfully",
  "details": {
    "total_files": 1523,
    "verified_files": 1523
  }
}&lt;/code&gt;
    &lt;p&gt;Kekkai uses glob patterns for the &lt;code&gt;--exclude&lt;/code&gt; option to skip specific files and directories during manifest generation.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Pattern&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
        &lt;cell role="head"&gt;Example&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;*.ext&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Match files with specific extension&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;*.log&lt;/code&gt; matches &lt;code&gt;app.log&lt;/code&gt;, &lt;code&gt;error.log&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;dir/*&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Match all files in a directory&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;logs/*&lt;/code&gt; matches &lt;code&gt;logs/app.log&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;dir/**&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Match all files recursively&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;cache/**&lt;/code&gt; matches &lt;code&gt;cache/data.db&lt;/code&gt;, &lt;code&gt;cache/sessions/abc.txt&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;**/*.ext&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Match extension at any depth&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;**/*.pyc&lt;/code&gt; matches &lt;code&gt;app.pyc&lt;/code&gt;, &lt;code&gt;lib/utils.pyc&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;**/dir/*&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Match directory at any depth&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;**/logs/*&lt;/code&gt; matches &lt;code&gt;logs/app.log&lt;/code&gt;, &lt;code&gt;app/logs/error.log&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;path/to/file&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Exact path match&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;config/local.ini&lt;/code&gt; matches only that file&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Relative Paths: All patterns match against relative paths from the target directory&lt;/item&gt;
      &lt;item&gt;Forward Slashes: Always use &lt;code&gt;/&lt;/code&gt;as path separator (even on Windows)&lt;/item&gt;
      &lt;item&gt;No Negation: Patterns cannot be negated (no &lt;code&gt;!pattern&lt;/code&gt;support)&lt;/item&gt;
      &lt;item&gt;Order Independent: All patterns are evaluated, order doesn't matter&lt;/item&gt;
      &lt;item&gt;Immutable: Exclude patterns cannot be changed during verification&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Laravel/Symfony
--exclude "storage/**"          # User uploads
--exclude "var/cache/**"        # Framework cache
--exclude "var/log/**"          # Application logs
--exclude "public/uploads/**"   # Uploaded files

# Python/Django
--exclude "**/__pycache__/**"   # Python cache
--exclude "**/*.pyc"            # Compiled Python
--exclude "media/**"            # User uploads
--exclude "staticfiles/**"      # Collected static files

# Node.js
--exclude "*.log"               # Log files
--exclude "tmp/**"              # Temporary files
--exclude ".npm/**"             # NPM cache

# General
--exclude "*.tmp"               # Temporary files
--exclude "*.bak"               # Backup files
--exclude ".git/**"             # Git repository (if needed)&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;❌ &lt;code&gt;--exclude "vendor/**"&lt;/code&gt;(PHP dependencies)&lt;/item&gt;
      &lt;item&gt;❌ &lt;code&gt;--exclude "node_modules/**"&lt;/code&gt;(Node.js dependencies)&lt;/item&gt;
      &lt;item&gt;❌ &lt;code&gt;--exclude "venv/**"&lt;/code&gt;(Python virtual environment)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;These are part of your deployed application and must be monitored for tampering.&lt;/p&gt;
    &lt;p&gt;✅ Only exclude server-generated content:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Log files&lt;/item&gt;
      &lt;item&gt;Cache directories&lt;/item&gt;
      &lt;item&gt;User uploads&lt;/item&gt;
      &lt;item&gt;Temporary files&lt;/item&gt;
      &lt;item&gt;NFS mounts&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Patterns are evaluated in this order:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Check for &lt;code&gt;**&lt;/code&gt;recursive matching&lt;/item&gt;
      &lt;item&gt;Special case: &lt;code&gt;**/*&lt;/code&gt;or&lt;code&gt;**&lt;/code&gt;matches everything&lt;/item&gt;
      &lt;item&gt;Suffix pattern: &lt;code&gt;dir/**&lt;/code&gt;matches everything under&lt;code&gt;dir/&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Prefix pattern: &lt;code&gt;**/*.ext&lt;/code&gt;matches files with extension at any depth&lt;/item&gt;
      &lt;item&gt;Simple glob: Standard shell glob matching with &lt;code&gt;*&lt;/code&gt;and&lt;code&gt;?&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Kekkai has comprehensive symlink security to prevent attackers from hiding malicious changes:&lt;/p&gt;
    &lt;p&gt;Kekkai handles symlinks differently depending on where they appear:&lt;/p&gt;
    &lt;p&gt;If &lt;code&gt;--target&lt;/code&gt; points to a symlink (e.g., &lt;code&gt;/current&lt;/code&gt; → &lt;code&gt;/releases/20240101&lt;/code&gt;):&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Automatically resolved: Uses &lt;code&gt;filepath.EvalSymlinks&lt;/code&gt;to follow the symlink&lt;/item&gt;
      &lt;item&gt;Operates on real path: All operations happen in the resolved directory&lt;/item&gt;
      &lt;item&gt;Transparent to user: Works exactly as if you specified the real directory&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Example:&lt;/p&gt;
    &lt;code&gt;# These produce identical results:
kekkai generate --target /var/www/current        # Symlink to /var/www/releases/20240101
kekkai generate --target /var/www/releases/20240101  # Direct path&lt;/code&gt;
    &lt;p&gt;For symlinks found within the target directory:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Not followed: Uses &lt;code&gt;os.Lstat&lt;/code&gt;to detect them without following&lt;/item&gt;
      &lt;item&gt;Tracked as symlinks: Stored with &lt;code&gt;IsSymlink: true&lt;/code&gt;flag&lt;/item&gt;
      &lt;item&gt;Target recorded: Link target path saved for verification&lt;/item&gt;
      &lt;item&gt;Hash of target path: Creates hash from &lt;code&gt;"symlink:" + target_path&lt;/code&gt;string&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Detection: Uses &lt;code&gt;os.Lstat&lt;/code&gt;to identify symlinks without following them&lt;/item&gt;
      &lt;item&gt;Target Tracking: Reads the link target with &lt;code&gt;os.Readlink&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Hash Calculation: Creates hash from &lt;code&gt;"symlink:" + target_path&lt;/code&gt;string&lt;/item&gt;
      &lt;item&gt;Verification: Checks both link type and target path during verification&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;✅ Symlink target changes (e.g., &lt;code&gt;/usr/bin/php&lt;/code&gt;→&lt;code&gt;/tmp/malicious&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;✅ File type changes (regular file → symlink or symlink → regular file)&lt;/item&gt;
      &lt;item&gt;✅ Broken symlinks (target doesn't exist)&lt;/item&gt;
      &lt;item&gt;✅ New symlinks added to the directory&lt;/item&gt;
      &lt;item&gt;✅ Deleted symlinks&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Original deployment
/app/config.php -&amp;gt; /etc/app/config.php  # Hash: abc123...

# These changes will be detected:
/app/config.php -&amp;gt; /tmp/fake-config.php  # Modified: different target
/app/config.php (regular file)           # Modified: type change
/app/config.php (deleted)                # Deleted: symlink removed&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Symlinks are never followed during hash calculation&lt;/item&gt;
      &lt;item&gt;Only the link itself is hashed, not the target's content&lt;/item&gt;
      &lt;item&gt;Prevents directory traversal attacks via symlink manipulation&lt;/item&gt;
      &lt;item&gt;Cache system skips symlinks (only caches regular files)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A: Kekkai only hashes file contents, so timestamp or permission changes don't affect hashes. Check for line ending differences (CRLF/LF).&lt;/p&gt;
    &lt;p&gt;A: Verify that the EC2 instance has the correct IAM role configured. Also check that the region is specified correctly.&lt;/p&gt;
    &lt;p&gt;A: For large file sets, use &lt;code&gt;--exclude&lt;/code&gt; options to skip server-generated directories like logs, cache, and temporary files. You can also optimize performance with:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;--use-cache&lt;/code&gt;: Enable local cache that checks file metadata (size, mtime, ctime) to skip hash calculation&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;--verify-probability N&lt;/code&gt;: Set probability of hash verification even with cache hit (0.0-1.0, default: 0.1)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;--workers N&lt;/code&gt;: Adjust the number of worker threads for your system&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;--rate-limit N&lt;/code&gt;: Limit I/O throughput (bytes per second) to reduce system load&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Cache Mode: When using &lt;code&gt;--use-cache&lt;/code&gt;, kekkai maintains a local cache file (&lt;code&gt;.kekkai-cache-{base-name}-{app-name}.json&lt;/code&gt;) in the cache directory (defaults to system temp directory, or specify with &lt;code&gt;--cache-dir&lt;/code&gt;). Cache files are temporary by nature and will be recreated if missing. It checks file metadata including:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;File size&lt;/item&gt;
      &lt;item&gt;Modification time (mtime)&lt;/item&gt;
      &lt;item&gt;Change time (ctime) - cannot be easily forged&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If all metadata matches, it uses the cached hash. The &lt;code&gt;--verify-probability&lt;/code&gt; option adds probabilistic verification:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;0.0&lt;/code&gt;: Always trust cache (fastest, least secure)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;0.1&lt;/code&gt;: 10% chance to verify hash even with cache hit (default, good balance)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;1.0&lt;/code&gt;: Always verify hash (most secure, no performance benefit)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The cache file itself is protected with a hash to detect tampering.&lt;/p&gt;
    &lt;p&gt;💡 Cache Behavior: By default, cache files are stored in the system temp directory (e.g., &lt;code&gt;/tmp&lt;/code&gt; on Linux/macOS) and may be automatically cleaned by the system. This is intentional - the cache is designed to be ephemeral and will be recreated as needed for performance optimization.&lt;/p&gt;
    &lt;p&gt;Note that application dependencies (vendor, node_modules) should still be verified as they are part of the deployed application.&lt;/p&gt;
    &lt;p&gt;A: Use &lt;code&gt;--rate-limit&lt;/code&gt; to throttle I/O bandwidth. For example, &lt;code&gt;--rate-limit 10485760&lt;/code&gt; limits to 10MB/s. This global rate limit is shared across all worker threads, preventing system overload while still allowing parallel processing.&lt;/p&gt;
    &lt;p&gt;Alternatively, you can use systemd to control resource usage at the OS level:&lt;/p&gt;
    &lt;code&gt;# Run with limited CPU and I/O priority (with cache support)
systemd-run --quiet --wait --pipe --collect \
  -p Type=oneshot \
  -p CPUQuota=25% -p CPUWeight=50 \
  -p PrivateTmp=no \
  -p User=nobody \
  /bin/bash -lc 'nice -n 10 ionice -c2 -n7 /usr/local/bin/kekkai verify \
    --s3-bucket my-manifests \
    --app-name myapp \
    --target /srv/app \
    --use-cache \
    --verify-probability 0.1 \
    --rate-limit 10485760'&lt;/code&gt;
    &lt;p&gt;This approach provides more comprehensive resource control:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;CPUQuota=25%&lt;/code&gt;: Limits CPU usage to 25%&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;CPUWeight=50&lt;/code&gt;: Sets CPU scheduling weight (lower priority)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;PrivateTmp=no&lt;/code&gt;: Allows cache persistence in&lt;code&gt;/tmp&lt;/code&gt;across runs&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;User=nobody&lt;/code&gt;: Runs with minimal privileges for security&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;nice -n 10&lt;/code&gt;: Lower process priority&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;ionice -c2 -n7&lt;/code&gt;: Best-effort I/O scheduling with lowest priority&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;--use-cache&lt;/code&gt;: Enables cache for faster verification&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;--verify-probability 0.1&lt;/code&gt;: 10% chance to verify hash even with cache hit&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;--rate-limit 10485760&lt;/code&gt;: Limits I/O to 10MB/s&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Important: The &lt;code&gt;PrivateTmp=no&lt;/code&gt; setting is required when using &lt;code&gt;--use-cache&lt;/code&gt; to ensure cache files persist between systemd-run executions. Without this, systemd creates an isolated &lt;code&gt;/tmp&lt;/code&gt; directory for each run, preventing cache reuse. If you prefer stronger isolation, use &lt;code&gt;--cache-dir&lt;/code&gt; to specify a persistent directory outside of &lt;code&gt;/tmp&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;# Alternative: Keep PrivateTmp=yes but use a custom cache directory
systemd-run --quiet --wait --pipe --collect \
  -p Type=oneshot \
  -p CPUQuota=25% -p CPUWeight=50 \
  -p PrivateTmp=yes \
  -p User=nobody \
  /bin/bash -lc 'nice -n 10 ionice -c2 -n7 /usr/local/bin/kekkai verify \
    --s3-bucket my-manifests \
    --app-name myapp \
    --target /srv/app \
    --use-cache \
    --cache-dir /var/cache/kekkai \
    --verify-probability 0.1 \
    --rate-limit 10485760'&lt;/code&gt;
    &lt;p&gt;Security Recommendation: Always run kekkai verification with minimal privileges using &lt;code&gt;-p User=nobody&lt;/code&gt; or a dedicated non-privileged user. This follows the principle of least privilege and reduces the security impact if the process is compromised.&lt;/p&gt;
    &lt;p&gt;Note: With Go 1.25+, &lt;code&gt;CPUQuota&lt;/code&gt; also automatically adjusts &lt;code&gt;GOMAXPROCS&lt;/code&gt; to match the quota, so kekkai will use fewer worker threads when CPU is limited, providing better resource utilization.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;--use-cache&lt;/code&gt; on NFS&lt;/p&gt;
    &lt;p&gt;Cache mode is disabled by default. Do not enable it on NFS-mounted directories as it does not work well and may run slower than without cache.&lt;/p&gt;
    &lt;p&gt;Kekkai's cache system uses ctime (change time) to detect file changes. Ctime is hard to fake and important for security.&lt;/p&gt;
    &lt;p&gt;However, NFS clients may not update ctime properly. This causes:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Very low cache hit rate&lt;/item&gt;
      &lt;item&gt;Cache becomes useless&lt;/item&gt;
      &lt;item&gt;Runs as slow as normal verification&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Disable cache on NFS
kekkai verify \
  --s3-bucket my-manifests \
  --app-name myapp \
  --target /nfs/app \
  --workers 2 \
  --rate-limit 5242880&lt;/code&gt;
    &lt;p&gt;Disabling cache does not reduce security. All files are still verified with SHA256 hashes.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45347714</guid><pubDate>Tue, 23 Sep 2025 14:39:59 +0000</pubDate></item><item><title>Zip Code Map of the United States</title><link>https://engaging-data.com/us-zip-code-map/</link><description>&lt;doc fingerprint="7e9b239a41844cf"&gt;
  &lt;main&gt;
    &lt;p&gt;This zip code map of the United States visualizes over 42,000 zip codes in the 50 states. Zip codes are five digit postal codes used for mail delivery in the US. The points on the map show the geographic center of each zip code. The interactive visualization lets you type in a zip code and will show you where that zip code lies on the map. As you begin to type in the zip code, the map will highlight all the zip codes that begin with those numbers.&lt;/p&gt;
    &lt;p&gt;For example, if you type in “0”, you will highlight all zip codes that start with the zero in the Northeastern US. This will represent about 10% of the zip codes in the US. When you type in another number, it will narrow down the zip codes that begin with those two digits (approximately 1% of zip codes). It will progressively narrow down the number of zip codes as you type in more numbers, until you get to a full 5 digit zip code that represents 1 out of almost 43,000 zip codes (0.002% of zip codes). The map will then tell you the name of the city that that zip code is in.&lt;/p&gt;
    &lt;p&gt;You can explore how zip codes are distributed across the US by typing in different 1 and 2 digit numbers. You can also click on the check box to show or hide the outlines of the states.&lt;/p&gt;
    &lt;p&gt;Sources and Tools:&lt;/p&gt;
    &lt;p&gt;Zip code data was downloaded from opendatasoft.com. And the visualization was created using javascript and the open source leaflet javascript mapping library.&lt;/p&gt;
    &lt;head rend="h3"&gt;Related Posts&lt;/head&gt;
    &lt;p&gt;1 Comment »&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45347880</guid><pubDate>Tue, 23 Sep 2025 14:50:06 +0000</pubDate></item><item><title>Launch HN: Strata (YC X25) – One MCP server for AI to handle thousands of tools</title><link>https://news.ycombinator.com/item?id=45347914</link><description>&lt;doc fingerprint="3d5a22c222f374b3"&gt;
  &lt;main&gt;
    &lt;div&gt;&lt;p&gt;Hey HN! We are Klavis AI (&lt;/p&gt;https://www.klavis.ai/&lt;p&gt;) and we're launching Strata, one open-source MCP server that helps AI agents use thousands of API tools without getting overwhelmed. Instead of showing all available tools at once, Strata reveals them step-by-step based on what the AI actually needs.&lt;/p&gt;&lt;p&gt;As a former Senior SWE on Google Gemini 's tool use team, I saw firsthand how AI would struggle with tools. If you've built AI agents, you've likely hit the same walls: (1) AI agents struggle to pick the right API from hundreds of options. (2) Tool descriptions and info consume massive token budgets. (3) Most servers cap at 40~50 tools to avoid these problems, limiting what you can build.&lt;/p&gt;&lt;p&gt;Instead of flooding the AI with everything upfront, Strata works like a human would. It guides the AI agents to discover relevant categories, then lists available actions in those categories. It relies on LLMs’ reasoning to drill down progressively to find the exact tool needed. Here are some examples:&lt;/p&gt;&lt;p&gt;Github query: "Find my stale pull requests in our main repo"&lt;/p&gt;&lt;p&gt;Strata: AI model identifies GitHub → Shows categories (Repos, Issues, PRs, Actions) → AI selects PRs → Shows PR-specific actions -&amp;gt; AI selects list_pull_requests → Shows list_pull_requests details -&amp;gt; Executes list_pull_requests with the right parameters.&lt;/p&gt;&lt;p&gt;Jira query: "Create a bug ticket in the 'MOBILE' project about the app crashing on startup."&lt;/p&gt;&lt;p&gt;Strata: AI identifies Jira → Shows categories (Projects, Issues, Sprints) → AI selects Issues → Shows actions (create_issue, get_issue) → AI selects create_issue → Shows create_issue details → Executes with correct parameters.&lt;/p&gt;&lt;p&gt;Slack query: "Post a message in the #announcements channel that bonus will be paid out next Friday."&lt;/p&gt;&lt;p&gt;Strata: AI identifies Slack → Shows categories (Channels, Messages, Users) → AI selects Messages → Shows actions (send_message, schedule_message) → AI selects send_message → Shows send_message details → Executes with correct parameters.&lt;/p&gt;&lt;p&gt;This progressive approach unlocks a huge advantage: depth. While most integrations offer a handful of high-level tools, Strata can expose hundreds of granular features for a single app like GitHub, Jira, etc. Your AI agent can finally access the deep, specific features that real workflows require, without getting lost in a sea of options.&lt;/p&gt;&lt;p&gt;Under the hood, Strata manages authentication tokens and includes a built-in search tool for the agent to dig into documentation if it gets stuck.&lt;/p&gt;&lt;p&gt;On the MCPMark https://mcpmark.ai/leaderboard/mcp, Strata achieves +15.2% higher pass@1 rate vs the official GitHub server and +13.4% higher pass@1 rate vs the official Notion server. In human eval tests, it hits 83%+ accuracy on complex, real-world multi-app workflows.&lt;/p&gt;&lt;p&gt;Here is a quick demo to watch Strata navigate a complex workflow with multiple apps, automatically selecting the right tools at each step: https://www.youtube.com/watch?v=N00cY9Ov_fM.&lt;/p&gt;&lt;p&gt;You can connect to any external MCP Server into Strata, and we have an open source version for it: https://github.com/Klavis-AI/klavis.&lt;/p&gt;&lt;p&gt;For team or production use with more features, visit our website: https://www.klavis.ai. Add Strata to Cursor, VS Code or any MCP-compatible application with one click. You can also use our API to easily plug in Strata to your AI application.&lt;/p&gt;&lt;p&gt;We look forward to your comments. Thanks for reading!&lt;/p&gt;&lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45347914</guid><pubDate>Tue, 23 Sep 2025 14:52:07 +0000</pubDate></item></channel></rss>