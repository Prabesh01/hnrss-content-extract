<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sun, 26 Oct 2025 06:14:15 +0000</lastBuildDate><item><title>The Journey Before main()</title><link>https://amit.prasad.me/blog/before-main</link><description>&lt;doc fingerprint="1b83387346253ad5"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;&amp;gt; The Journey Before main()_&lt;/head&gt;
    &lt;p&gt;October 25, 2025 · Amit Prasad&lt;/p&gt;
    &lt;p&gt;A while back, I worked on a RISC-V-based userspace simulator for fun. In doing so, taught myself a lot more than I wanted to know about what happens in-between when the Kernel is asked to run a program, and when the first line of our program’s &lt;code&gt;main&lt;/code&gt; function is actually executed. Here’s a summary of that rabbit hole.&lt;/p&gt;
    &lt;head rend="h2"&gt;In the beginning…&lt;/head&gt;
    &lt;p&gt;First question: When is the OS kernel actually asked to run any program? The answer, at least on Linux, is the &lt;code&gt;execve&lt;/code&gt; system call (“syscall”). Let’s take a quick look at that:&lt;/p&gt;
    &lt;code&gt;int execve(const char *filename, char *const argv[], char *const envp[]);&lt;/code&gt;
    &lt;p&gt;This is actually quite straightforward! We pass the name of the exectuable file, a list of arguments, and a list of environment variables. This signals to the kernel where, and how, to start loading the program.&lt;/p&gt;
    &lt;p&gt;Many programming languages provide an interface to execute commands that eventually call &lt;code&gt;execve&lt;/code&gt; under the hood. For example, in Rust, we have:&lt;/p&gt;
    &lt;code&gt;use std::process::Command;

Command::new("ls").arg("-l").spawn();&lt;/code&gt;
    &lt;p&gt;In these higher-level wrappers, the language’s standard library often handles translation of the command name to a full path, acting similarly to how a shell would resolve the command via the &lt;code&gt;PATH&lt;/code&gt; environment variable. The kernel itself, however, expects a proper path to an executable file.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;A note on interpreters: If the executable file starts with a shebang (&lt;/p&gt;&lt;code&gt;#!&lt;/code&gt;), the kernel will use the shebang-specified interpreter to run the program. For example,&lt;code&gt;#!/usr/bin/python3&lt;/code&gt;will run the program using the Python interpreter,&lt;code&gt;#!/bin/bash&lt;/code&gt;will run the program using the Bash shell, etc.&lt;/quote&gt;
    &lt;head rend="h2"&gt;ELF&lt;/head&gt;
    &lt;p&gt;What does an executable file look like? On Linux, it’s ELF, which the kernel knows how to parse. Other operating systems have different formats (e.g. Mach-O on MacOS, PE on Windows), but ELF is the most common format on Linux. I won’t go into too much detail here, to keep things brief, but ELF files have grown out of the original &lt;code&gt;a.out&lt;/code&gt; format, and are expressive enough to support pretty much every program you’ll ever write. Here’s what the header of an ELF file looks like:&lt;/p&gt;
    &lt;code&gt;% readelf -h main # main is an ELF file
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 03 00 00 00 00 00 00 00 00
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - GNU
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           RISC-V
  Version:                           0x1
  Entry point address:               0x10358
  Start of program headers:          52 (bytes into file)
  Start of section headers:          675776 (bytes into file)
  Flags:                             0x1, RVC, soft-float ABI
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         7
  Size of section headers:           40 (bytes)
  Number of section headers:         32
  Section header string table index: 31&lt;/code&gt;
    &lt;p&gt;The important parts here are:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;The “ELF Magic” bytes, which tell the kernel that this is, indeed, an ELF file. &lt;code&gt;45 4c 46&lt;/code&gt;is ASCII for “ELF”!&lt;/item&gt;
      &lt;item&gt;“Class” tells us we’re dealing with a 32-bit executable.&lt;/item&gt;
      &lt;item&gt;“Start of …” tells us where things are in the file, and “Size of …” tells us how big they are; The kernel is effectively given a map of the file.&lt;/item&gt;
      &lt;item&gt;“Entry point address” — Relatively self-explanatory! But we’ll be coming back to this.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Other ELF files will have different entries and specific values, but the general structure is what we’re after here.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;As you can see by the numerous mentions to “RISC-V”, this is an ELF file I compiled and linked targeting the RV32 architecture (which the aforementioned emulator is built for), hence the “32” in “ELF32”, the “RVC” flag, and the “RISC-V” machine type.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h3"&gt;More than just a header&lt;/head&gt;
    &lt;p&gt;ELF files contain everything our program needs to run, including the code, data, symbols, and more. We can see this again with the &lt;code&gt;readelf&lt;/code&gt; command with the &lt;code&gt;-a&lt;/code&gt; flag. Here’s what we care about:&lt;/p&gt;
    &lt;code&gt;Section Headers:
  [Nr] Name              Type            Addr     Off    Size
  [ 0]                   NULL            00000000 000000 000000
  [ 1] .note.ABI-tag     NOTE            00010114 000114 000020
  [ 2] .rela.plt         RELA            00010134 000134 00000c
  [ 3] .plt              PROGBITS        00010140 000140 000010
  [ 4] .text             PROGBITS        00010150 000150 03e652
  [ 5] .rodata           PROGBITS        0004e7b0 03e7b0 01b208
  ...
  [16] .data             PROGBITS        0007a008 069008 000dec
  [17] .sdata            PROGBITS        0007adf4 069df4 000004
  [18] .bss              NOBITS          0007adf8 069df8 002b6c
  ...
  [29] .symtab           SYMTAB          00000000 095124 009040
  [30] .strtab           STRTAB          00000000 09e164 006d10&lt;/code&gt;
    &lt;p&gt;These sections contain code (&lt;code&gt;.text&lt;/code&gt;), data (&lt;code&gt;.data&lt;/code&gt;), space for global variables (&lt;code&gt;.bss&lt;/code&gt;), shims for accessing shared library functions (&lt;code&gt;.plt&lt;/code&gt;), and quite a bit more (including symbol tables for debugging, relocation tables, etc.), most of which we won’t be discussing.&lt;/p&gt;
    &lt;p&gt;So evidently, there’s some code that we care about in the &lt;code&gt;.text&lt;/code&gt; section, so we copy that and call it a day? Not quite. There’s a massive amount of machinery inside the kernel to make all sorts of programs under all sorts of conditions run.&lt;/p&gt;
    &lt;p&gt;For example, the “PLT” (Procedure Linkage Table) is a section that allows us to call functions in “shared libraries”, for example, &lt;code&gt;libc&lt;/code&gt;, without having to package them alongside our program (“dynamically” vs “statically linking”). The ELF file contains a dynamic section which tells the kernel which shared libraries to load.&lt;/p&gt;
    &lt;quote&gt;&lt;code&gt;libc&lt;/code&gt;is the C standard library, which contains all the “useful” functions:&lt;code&gt;printf&lt;/code&gt;,&lt;code&gt;malloc&lt;/code&gt;, etc. Various flavors implementing the&lt;code&gt;libc&lt;/code&gt;interfaces exist, most commonly&lt;code&gt;glibc&lt;/code&gt;and&lt;code&gt;musl&lt;/code&gt;. Most of the binaries that are discussed in this post are compiled and linked against&lt;code&gt;musl&lt;/code&gt;, since it’s much easier to statically link.&lt;/quote&gt;
    &lt;p&gt;The symbol table looks something like this:&lt;/p&gt;
    &lt;code&gt;Symbol table '.symtab' contains 2308 entries:
   Num:    Value  Size Type    Bind   Vis      Ndx Name
     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND
     1: 00010114     0 SECTION LOCAL  DEFAULT    1 .note.ABI-tag
     2: 00010134     0 SECTION LOCAL  DEFAULT    2 .rela.plt
     3: 00010140     0 SECTION LOCAL  DEFAULT    3 .plt
     4: 00010150     0 SECTION LOCAL  DEFAULT    4 .text
     ...
     1782: 00010358    30 FUNC    GLOBAL HIDDEN     4 _start
     ...
     1917: 00010430    52 FUNC    GLOBAL DEFAULT    4 main
     2201: 00010506   450 FUNC    GLOBAL HIDDEN     4 __libc_start_main
     ...&lt;/code&gt;
    &lt;p&gt;You may ask: “Wow! &lt;code&gt;2308&lt;/code&gt; looks like a lot, right? What behemoth of a program could possibly need that many symbols?“.&lt;/p&gt;
    &lt;p&gt;Good question! Here’s the behemoth:&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  printf("Hello, World!\n");
  return 0;
}&lt;/code&gt;
    &lt;p&gt;Yeah, that’s it. Now, &lt;code&gt;2308&lt;/code&gt; may be slightly bloated because we link against &lt;code&gt;musl&lt;/code&gt; instead of &lt;code&gt;glibc&lt;/code&gt;, but the point still stands: There’s a lot of stuff going on behind the scenes here.&lt;/p&gt;
    &lt;p&gt;The kernel’s job here is to iterate over each section, loading those marked as “loadable”, and then jump to an “interpreter” denoted by the presence of a &lt;code&gt;PT_INTERP&lt;/code&gt; section. In the ELF case, this is the ELF interpreter that handles things like dynamically “relocating” pointers to functions, as well as some security mitigations such as moving sections around in memory (ASLR — Address Space Layout Randomization), marking sections as non-executable (NX bit — hardware-level security), etc. But ultimately, the kernel loads the code and data into memory, sets up the stack, and prepares to jump to the entry point of the program.&lt;/p&gt;
    &lt;head rend="h2"&gt;The stack&lt;/head&gt;
    &lt;p&gt;Ah yes, the infamous stack! Fortunately for most of us, the stack is something we take for granted. Unfortunately for the kernel, the stack is not some omnipotent magical space that just exists — it needs to be set up properly before our program can run.&lt;/p&gt;
    &lt;p&gt;As a reminder: stack space is typically used for variables, function arguments, “frames” (to keep track of function-local variables, call trees, etc), and a variety of other things, depending on what, and how your program is running.&lt;/p&gt;
    &lt;p&gt;Hypothetically, if we simplify a bit and say that the ELF file is loaded into memory starting at the zero address, the stack is typically placed at the “opposite end” of the memory, from a high address, and grows “downwards” towards the lower addresses, with the space in-between used as heap space, and for other data (shared libraries, mmapped files, etc). This is a simplification, but in fairness, there is significant ambiguity as much of the semantics here depend on the program itself.&lt;/p&gt;
    &lt;p&gt;The stack is also something that is non-empty! Remember &lt;code&gt;argv&lt;/code&gt; and &lt;code&gt;envp&lt;/code&gt; from the &lt;code&gt;execve&lt;/code&gt; call above? Those are passed to the program via the stack. In most programming languages we frequently access these via the various &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;env&lt;/code&gt; utilities, whether that be directly, like in C, or more indirectly, like in Rust (&lt;code&gt;std::env&lt;/code&gt;) or Python (&lt;code&gt;sys.argv&lt;/code&gt;).&lt;/p&gt;
    &lt;p&gt;The kernel also stores something called the “ELF auxiliary vector” in the nascent stack. This “auxv” contains information about the environment, such as the memory page size, metadata from the ELF file, and other system information. These are important! For example, &lt;code&gt;musl&lt;/code&gt; uses the “page size” entry of the auxv so that &lt;code&gt;malloc&lt;/code&gt; can request and manage memory more optimally. There are over 30 entries in the auxiliary vectors, but not all of them are used by every program (and some may not be defined by the kernel).&lt;/p&gt;
    &lt;p&gt;Let’s pretend we’re the kernel. Here’s a simplified version of how we might setup the stack of a new process (taken and simplified from my RISC-V emulator, which also emulates parts of the kernel):&lt;/p&gt;
    &lt;code&gt;// Choose an arbitrary high address for the stack
let mut sp = 0xCFFF_F000u32; // sp = "stack pointer"
let mut stack_init: Vec&amp;lt;u32&amp;gt; = vec![]; // The stack begins empty.

stack_init.push(args.len()); // argc: number of arguments
for &amp;amp;arg in args.iter().rev() {
    // Copy each argument to the stack
    sp -= arg.len() // move "downwards" in address space
    mem.copy_to(sp, arg);

    // Keep track of the arg pointer in the init vector
    stack_init.push(sp);
}
stack_init.push(0); // argv NULL terminator

// Environment variables are similar:
for &amp;amp;e in env.iter().rev() {
    sp -= e.len();
    mem.copy_to(sp, e);

    stack_init.push(sp);
}
stack_init.push(0); // envp NULL terminator

// Setup the auxiliary vector
stack_init.push(libc_riscv32::AT_PAGESZ); // Keys for auxv
stack_init.push(0x1000); // Values for auxv; this specifies a 4 KiB page size
stack_init.push(libc_riscv32::AT_ENTRY);
stack_init.push(self.pc); // N.B.: We'll be coming back to this
// ...

// Copy the stack init vector, with all the pointers, to the stack
sp -= (stack_init.len() * 4);

mem.copy_to(sp, &amp;amp;stack_init)&lt;/code&gt;
    &lt;p&gt;A diagram might help illustrate what the address space looks like at this point:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Argument Count (argc)&lt;/item&gt;
      &lt;item&gt;Arguments (argv)&lt;/item&gt;
      &lt;item&gt;Environment variables (envp)&lt;/item&gt;
      &lt;item&gt;Auxiliary Vector (auxv)&lt;/item&gt;
      &lt;item&gt;Local variables, stack frames, function calls&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;↓&lt;/p&gt;
    &lt;p&gt;Grows downward&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Shared libraries (libc, etc.)&lt;/item&gt;
      &lt;item&gt;Memory-mapped files&lt;/item&gt;
      &lt;item&gt;Dynamic linker/loader&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;↑&lt;/p&gt;
    &lt;p&gt;Grows upward&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;malloc(), calloc(), realloc() allocations&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;.bss &lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Uninitialized global variables&lt;/item&gt;
      &lt;item&gt;Static variables initialized to zero&lt;/item&gt;
      &lt;item&gt;Zero-filled by kernel on program start&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;.data &lt;lb/&gt; "read-write"&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Initialized global variables&lt;/item&gt;
      &lt;item&gt;Static variables with initial values&lt;/item&gt;
      &lt;item&gt;Read-write data from the executable&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;.rodata &lt;lb/&gt; "read-only"&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Literals ("Hello, World!")&lt;/item&gt;
      &lt;item&gt;Constant data&lt;/item&gt;
      &lt;item&gt;Read-only variables&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;.text &lt;lb/&gt; "code"&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Program instructions/machine code&lt;/item&gt;
      &lt;item&gt;_start function (entry point)&lt;/item&gt;
      &lt;item&gt;User code&lt;/item&gt;
      &lt;item&gt;Library function code&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Entrypoint&lt;/head&gt;
    &lt;p&gt;Finally, we get to the “entry point” address, mentioned at several points. This is the address of the first instruction to run in the process. Typically, this is under a function called &lt;code&gt;_start&lt;/code&gt;. Both glibc and musl provide implementations of &lt;code&gt;_start&lt;/code&gt;, but it’s also possible to write your own. Again, here’s a Rust example:&lt;/p&gt;
    &lt;code&gt;// Disable the language runtime, we're DIYing it.
#![no_std]
#![no_main]

#[panic_handler]
fn panic(_info: &amp;amp;core::panic::PanicInfo) -&amp;gt; ! {
    loop {}
}

#[no_mangle]
pub extern "C" fn _start() -&amp;gt; ! {
    // Instead of "waiting" for main, we can immediately start execution.
    loop {}
}&lt;/code&gt;
    &lt;p&gt;Depending on your program, &lt;code&gt;_start&lt;/code&gt; may be the only thing between the entrypoint and your main function, but most languages have some sort of runtime that needs to be initialized first. For example, Rust has &lt;code&gt;std::rt::lang_start&lt;/code&gt;. It’s at this part that things like global constructors, thread-local storage, and other language-specific features are set up.&lt;/p&gt;
    &lt;p&gt;Here, our journey comes to an end — things become much more language-specific from this point on. Most languages will set up their own runtimes (yes, even C and C++ have a “runtime”!), and eventually call the standard &lt;code&gt;main&lt;/code&gt; function we’re normally familiar with.&lt;/p&gt;
    &lt;p&gt;In Rust, the generated code ends up looking like the following:&lt;/p&gt;
    &lt;code&gt;// the user defined main function
fn main() { println!("Hello, world!"); }

// the generated _start function
fn _start() -&amp;gt; {
    let argc = ...; // get argc from stack
    let argv = ...; // get argv from stack
    let envp = ...; // get envp from stack
    let main_fn = main; // pointer to user main function
    std::rt::lang_start(argc, argv, main_fn);
}&lt;/code&gt;
    &lt;p&gt;With the &lt;code&gt;lang_start&lt;/code&gt; function (defined here)[https://github.com/rust-lang/rust/blob/04ff05c9c0cfbca33115c5f1b8bb20a66a54b799/library/std/src/rt.rs#L199] and taking care of the rest.&lt;/p&gt;
    &lt;p&gt;C and C++ have similar, minimal setups. Languages that are traditionally thought to have “heavier” runtimes, such as Java or Python, work the same way, but with the &lt;code&gt;std::rt::lang_start&lt;/code&gt; equivalent doing far more than the Rust/C/C++ runtimes.&lt;/p&gt;
    &lt;p&gt;And there you have it! I’m missing lots of detail here, but hopefully this gives a rough idea of what happens before &lt;code&gt;main()&lt;/code&gt; gets called. I’ve left out complexity that is mostly internal to “real” linux kernels, such as how the kernel sets up address space, the process tables, various group semantics, and et cetera, but I hope this still serves as a decent primer.&lt;/p&gt;
    &lt;p&gt;Feel free to reach out to me with any questions or corrections!&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;An earlier version of this post incorrectly attributed some of the section loading logic to the Kernel, when in reality the ELF interpreter was responsible. Thanks to Hacker News user “fweimer” for the correction.&lt;/p&gt;
    &lt;/quote&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706380</guid><pubDate>Sat, 25 Oct 2025 19:33:22 +0000</pubDate></item><item><title>Show HN: Shadcn/UI theme editor – Design and share Shadcn themes</title><link>https://shadcnthemer.com</link><description>&lt;doc fingerprint="5b5948a7543b02e7"&gt;
  &lt;main&gt;
    &lt;p&gt;All Themes GitHub ShadCN Themes Discover and create beautiful themes for shadcn/ui Import New Theme Filter by color: Red Orange Yellow Green Teal Blue Purple Pink Gray Black White Loading themes...&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706487</guid><pubDate>Sat, 25 Oct 2025 19:51:24 +0000</pubDate></item><item><title>AI, Wikipedia, and uncorrected machine translations of vulnerable languages</title><link>https://www.technologyreview.com/2025/09/25/1124005/ai-wikipedia-vulnerable-languages-doom-spiral/</link><description>&lt;doc fingerprint="760a589b28b682a2"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How AI and Wikipedia have sent vulnerable languages into a doom spiral&lt;/head&gt;
    &lt;p&gt;Machine translators have made it easier than ever to create error-plagued Wikipedia articles in obscure languages. What happens when AI models get trained on junk pages?&lt;/p&gt;
    &lt;p&gt;When Kenneth Wehr started managing the Greenlandic-language version of Wikipedia four years ago, his first act was to delete almost everything. It had to go, he thought, if it had any chance of surviving.&lt;/p&gt;
    &lt;p&gt;Wehr, who’s 26, isn’t from Greenland—he grew up in Germany—but he had become obsessed with the island, an autonomous Danish territory, after visiting as a teenager. He’d spent years writing obscure Wikipedia articles in his native tongue on virtually everything to do with it. He even ended up moving to Copenhagen to study Greenlandic, a language spoken by some 57,000 mostly Indigenous Inuit people scattered across dozens of far-flung Arctic villages.&lt;/p&gt;
    &lt;p&gt;The Greenlandic-language edition was added to Wikipedia around 2003, just a few years after the site launched in English. By the time Wehr took its helm nearly 20 years later, hundreds of Wikipedians had contributed to it and had collectively written some 1,500 articles totaling over tens of thousands of words. It seemed to be an impressive vindication of the crowdsourcing approach that has made Wikipedia the go-to source for information online, demonstrating that it could work even in the unlikeliest places.&lt;/p&gt;
    &lt;p&gt;There was only one problem: The Greenlandic Wikipedia was a mirage.&lt;/p&gt;
    &lt;p&gt;Virtually every single article had been published by people who did not actually speak the language. Wehr, who now teaches Greenlandic in Denmark, speculates that perhaps only one or two Greenlanders had ever contributed. But what worried him most was something else: Over time, he had noticed that a growing number of articles appeared to be copy-pasted into Wikipedia by people using machine translators. They were riddled with elementary mistakes—from grammatical blunders to meaningless words to more significant inaccuracies, like an entry that claimed Canada had only 41 inhabitants. Other pages sometimes contained random strings of letters spat out by machines that were unable to find suitable Greenlandic words to express themselves.&lt;/p&gt;
    &lt;p&gt;“It might have looked Greenlandic to [the authors], but they had no way of knowing,” complains Wehr.&lt;/p&gt;
    &lt;p&gt;“Sentences wouldn’t make sense at all, or they would have obvious errors,” he adds. “AI translators are really bad at Greenlandic.”&lt;/p&gt;
    &lt;p&gt;What Wehr describes is not unique to the Greenlandic edition.&lt;/p&gt;
    &lt;p&gt;Wikipedia is the most ambitious multilingual project after the Bible: There are editions in over 340 languages, and a further 400 even more obscure ones are being developed and tested. Many of these smaller editions have been swamped with automatically translated content as AI has become increasingly accessible. Volunteers working on four African languages, for instance, estimated to MIT Technology Review that between 40% and 60% of articles in their Wikipedia editions were uncorrected machine translations. And after auditing the Wikipedia edition in Inuktitut, an Indigenous language close to Greenlandic that’s spoken in Canada, MIT Technology Review estimates that more than two-thirds of pages containing more than several sentences feature portions created this way.&lt;/p&gt;
    &lt;p&gt;This is beginning to cause a wicked problem. AI systems, from Google Translate to ChatGPT, learn to “speak” new languages by scraping huge quantities of text from the internet. Wikipedia is sometimes the largest source of online linguistic data for languages with few speakers—so any errors on those pages, grammatical or otherwise, can poison the wells that AI is expected to draw from. That can make the models’ translation of these languages particularly error-prone, which creates a sort of linguistic doom loop as people continue to add more and more poorly translated Wikipedia pages using those tools, and AI models continue to train from poorly translated pages. It’s a complicated problem, but it boils down to a simple concept: Garbage in, garbage out.&lt;/p&gt;
    &lt;p&gt;“These models are built on raw data,” says Kevin Scannell, a former professor of computer science at Saint Louis University who now builds computer software tailored for endangered languages. “They will try and learn everything about a language from scratch. There is no other input. There are no grammar books. There are no dictionaries. There is nothing other than the text that is inputted.”&lt;/p&gt;
    &lt;p&gt;There isn’t perfect data on the scale of this problem, particularly because a lot of AI training data is kept confidential and the field continues to evolve rapidly. But back in 2020, Wikipedia was estimated to make up more than half the training data that was fed into AI models translating some languages spoken by millions across Africa, including Malagasy, Yoruba, and Shona. In 2022, a research team from Germany that looked into what data could be obtained by online scraping even found that Wikipedia was the sole easily accessible source of online linguistic data for 27 under-resourced languages.&lt;/p&gt;
    &lt;p&gt;This could have significant repercussions in cases where Wikipedia is poorly written—potentially pushing the most vulnerable languages on Earth toward the precipice as future generations begin to turn away from them.&lt;/p&gt;
    &lt;p&gt;“Wikipedia will be reflected in the AI models for these languages,” says Trond Trosterud, a computational linguist at the University of Tromsø in Norway, who has been raising the alarm about the potentially harmful outcomes of badly run Wikipedia editions for years. “I find it hard to imagine it will not have consequences. And, of course, the more dominant position that Wikipedia has, the worse it will be.”&lt;/p&gt;
    &lt;head rend="h3"&gt;Use responsibly&lt;/head&gt;
    &lt;p&gt;Automation has been built into Wikipedia since the very earliest days. Bots keep the platform operational: They repair broken links, fix bad formatting, and even correct spelling mistakes. These repetitive and mundane tasks can be automated away with little problem. There is even an army of bots that scurry around generating short articles about rivers, cities, or animals by slotting their names into formulaic phrases. They have generally made the platform better.&lt;/p&gt;
    &lt;p&gt;But AI is different. Anybody can use it to cause massive damage with a few clicks.&lt;/p&gt;
    &lt;p&gt;Wikipedia has managed the onset of the AI era better than many other websites. It has not been flooded with AI bots or disinformation, as social media has been. It largely retains the innocence that characterized the earlier internet age. Wikipedia is open and free for anyone to use, edit, and pull from, and it’s run by the very same community it serves. It is transparent and easy to use. But community-run platforms live and die on the size of their communities. English has triumphed, while Greenlandic has sunk.&lt;/p&gt;
    &lt;p&gt;“We need good Wikipedians. This is something that people take for granted. It is not magic,” says Amir Aharoni, a member of the volunteer Language Committee, which oversees requests to open or close Wikipedia editions. “If you use machine translation responsibly, it can be efficient and useful. Unfortunately, you cannot trust all people to use it responsibly.”&lt;/p&gt;
    &lt;p&gt;Trosterud has studied the behavior of users on small Wikipedia editions and says AI has empowered a subset that he terms “Wikipedia hijackers.” These users can range widely—from naive teenagers creating pages about their hometowns or their favorite YouTubers to well-meaning Wikipedians who think that by creating articles in minority languages they are in some way “helping” those communities.&lt;/p&gt;
    &lt;p&gt;“The problem with them nowadays is that they are armed with Google Translate,” Trosterud says, adding that this is allowing them to produce much longer and more plausible-looking content than they ever could before: “Earlier they were armed only with dictionaries.”&lt;/p&gt;
    &lt;p&gt;This has effectively industrialized the acts of destruction—which affect vulnerable languages most, since AI translations are typically far less reliable for them. There can be lots of different reasons for this, but a meaningful part of the issue is the relatively small amount of source text that is available online. And sometimes models struggle to identify a language because it is similar to others, or because some, including Greenlandic and most Native American languages, have structures that make them badly suited to the way most machine translation systems work. (Wehr notes that in Greenlandic most words are agglutinative, meaning they are built by attaching prefixes and suffixes to stems. As a result, many words are extremely context specific and can express ideas that in other languages would take a full sentence.)&lt;/p&gt;
    &lt;p&gt;Research produced by Google before a major expansion of Google Translate rolled out three years ago found that translation systems for lower-resourced languages were generally of a lower quality than those for better-resourced ones. Researchers found, for example, that their model would often mistranslate basic nouns across languages, including the names of animals and colors. (In a statement to MIT Technology Review, Google wrote that it is “committed to meeting a high standard of quality for all 249 languages” it supports “by rigorously testing and improving [its] systems, particularly for languages that may have limited public text resources on the web.”)&lt;/p&gt;
    &lt;p&gt;Wikipedia itself offers a built-in editing tool called Content Translate, which allows users to automatically translate articles from one language to another—the idea being that this will save time by preserving the references and fiddly formatting of the originals. But it piggybacks on external machine translation systems, so it’s largely plagued by the same weaknesses as other machine translators—a problem that the Wikimedia Foundation says is hard to solve. It’s up to each edition’s community to decide whether this tool is allowed, and some have decided against it. (Notably, English-language Wikipedia has largely banned its use, claiming that some 95% of articles created using Content Translate failed to meet an acceptable standard without significant additional work.) But it’s at least easy to tell when the program has been used; Content Translate adds a tag on the Wikipedia back end.&lt;/p&gt;
    &lt;p&gt;Other AI programs can be harder to monitor. Still, many Wikipedia editors I spoke with said that once their languages were added to major online translation tools, they noticed a corresponding spike in the frequency with which poor, likely machine-translated pages were created.&lt;/p&gt;
    &lt;p&gt;Some Wikipedians using AI to translate content do occasionally admit that they do not speak the target languages. They may see themselves as providing smaller communities with rough-cut articles that speakers can then fix—essentially following the same model that has worked well for more active Wikipedia editions.&lt;/p&gt;
    &lt;quote&gt;
      &lt;head&gt;Google Translate, for instance, says the Fulfulde word for January means June, while ChatGPT says it’s August or September. The programs also suggest the Fulfulde word for “harvest” means “fever” or “well-being,” among other possibilities.&lt;/head&gt;
    &lt;/quote&gt;
    &lt;p&gt;But once error-filled pages are produced in small languages, there is usually not an army of knowledgeable people who speak those languages standing ready to improve them. There are few readers of these editions, and sometimes not a single regular editor.&lt;/p&gt;
    &lt;p&gt;Yuet Man Lee, a Canadian teacher in his 20s, says that he used a mix of Google Translate and ChatGPT to translate a handful of articles that he had written for the English Wikipedia into Inuktitut, thinking it’d be nice to pitch in and help a smaller Wikipedia community. He says he added a note to one saying that it was only a rough translation. “I did not think that anybody would notice [the article],” he explains. “If you put something out there on the smaller Wikipedias—most of the time nobody does.”&lt;/p&gt;
    &lt;p&gt;But at the same time, he says, he still thought “someone might see it and fix it up”—adding that he had wondered whether the Inuktitut translation that the AI systems generated was grammatically correct. Nobody has touched the article since he created it.&lt;/p&gt;
    &lt;p&gt;Lee, who teaches social sciences in Vancouver and first started editing entries in the English Wikipedia a decade ago, says that users familiar with more active Wikipedias can fall victim to this mindset, which he terms a “bigger-Wikipedia arrogance”: When they try to contribute to smaller Wikipedia editions, they assume that others will come along to fix their mistakes. It can sometimes work. Lee says he had previously contributed several articles to Wikipedia in Tatar, a language spoken by several million people mainly in Russia, and at least one of those was eventually corrected. But the Inuktitut Wikipedia is, by comparison, a “barren wasteland.”&lt;/p&gt;
    &lt;p&gt;He emphasizes that his intentions had been good: He wanted to add more articles to an Indigenous Canadian Wikipedia. “I am now thinking that it may have been a bad idea. I did not consider that I could be contributing to a recursive loop,” he says. “It was about trying to get content out there, out of curiosity and for fun, without properly thinking about the consequences.”&lt;/p&gt;
    &lt;head rend="h3"&gt;“Totally, completely no future”&lt;/head&gt;
    &lt;p&gt;Wikipedia is a project that is driven by wide-eyed optimism. Editing can be a thankless task, involving weeks spent bickering with faceless, pseudonymous people, but devotees put in hours of unpaid labor because of a commitment to a higher cause. It is this commitment that drives many of the regular small-language editors I spoke with. They all feared what would happen if garbage continued to appear on their pages.&lt;/p&gt;
    &lt;p&gt;Abdulkadir Abdulkadir, a 26-year-old agricultural planner who spoke with me over a crackling phone call from a busy roadside in northern Nigeria, said that he spends three hours every day fiddling with entries in his native Fulfulde, a language used mainly by pastoralists and farmers across the Sahel. “But the work is too much,” he said.&lt;/p&gt;
    &lt;p&gt;Abdulkadir sees an urgent need for the Fulfulde Wikipedia to work properly. He has been suggesting it as one of the few online resources for farmers in remote villages, potentially offering information on which seeds or crops might work best for their fields in a language they can understand. If you give them a machine-translated article, Abdulkadir told me, then it could “easily harm them,” as the information will probably not be translated correctly into Fulfulde.&lt;/p&gt;
    &lt;p&gt;Google Translate, for instance, says the Fulfulde word for January means June, while ChatGPT says it’s August or September. The programs also suggest the Fulfulde word for “harvest” means “fever” or “well-being,” among other possibilities.&lt;/p&gt;
    &lt;p&gt;Abdulkadir said he had recently been forced to correct an article about cowpeas, a foundational cash crop across much of Africa, after discovering that it was largely illegible.&lt;/p&gt;
    &lt;p&gt;If someone wants to create pages on the Fulfulde Wikipedia, Abdulkadir said, they should be translated manually. Otherwise, “whoever will read your articles will [not] be able to get even basic knowledge,” he tells these Wikipedians. Nevertheless, he estimates that some 60% of articles are still uncorrected machine translations. Abdulkadir told me that unless something important changes with how AI systems learn and are deployed, then the outlook for Fulfulde looks bleak. “It is going to be terrible, honestly,” he said. “Totally, completely no future.”&lt;/p&gt;
    &lt;p&gt;Across the country from Abdulkadir, Lucy Iwuala contributes to Wikipedia in Igbo, a language spoken by several million people in southeastern Nigeria. “The harm has already been done,” she told me, opening the two most recently created articles. Both had been automatically translated via Wikipedia’s Content Translate and contained so many mistakes that she said it would have given her a headache to continue reading them. “There are some terms that have not even been translated. They are still in English,” she pointed out. She recognized the username that had created the pages as a serial offender. “This one even includes letters that are not used in the Igbo language,” she said.&lt;/p&gt;
    &lt;p&gt;Iwuala began regularly contributing to Wikipedia three years ago out of concern that Igbo was being displaced by English. It is a worry that is common to many who are active on smaller Wikipedia editions. “This is my culture. This is who I am,” she told me. “That is the essence of it all: to ensure that you are not erased.”&lt;/p&gt;
    &lt;p&gt;Iwuala, who now works as a professional translator between English and Igbo, said the users doing the most damage are inexperienced and see AI translations as a way to quickly increase the profile of the Igbo Wikipedia. She often finds herself having to explain at online edit-a-thons she organizes, or over email to various error-prone editors, that the results can be the exact opposite, pushing users away: “You will be discouraged and you will no longer want to visit this place. You will just abandon it and go back to the English Wikipedia.”&lt;/p&gt;
    &lt;p&gt;These fears are echoed by Noah Ha‘alilio Solomon, an assistant professor of Hawaiian language at the University of Hawai‘i. He reports that some 35% of words on some pages in the Hawaiian Wikipedia are incomprehensible. “If this is the Hawaiian that is going to exist online, then it will do more harm than anything else,” he says.&lt;/p&gt;
    &lt;p&gt;Hawaiian, which was teetering on the verge of extinction several decades ago, has been undergoing a recovery effort led by Indigenous activists and academics. Seeing such poor Hawaiian on such a widely used platform as Wikipedia is upsetting to Ha‘alilio Solomon.&lt;/p&gt;
    &lt;p&gt;“It is painful, because it reminds us of all the times that our culture and language has been appropriated,” he says. “We have been fighting tooth and nail in an uphill climb for language revitalization. There is nothing easy about that, and this can add extra impediments. People are going to think that this is an accurate representation of the Hawaiian language.”&lt;/p&gt;
    &lt;p&gt;The consequences of all these Wikipedia errors can quickly become clear. AI translators that have undoubtedly ingested these pages in their training data are now assisting in the production, for instance, of error-strewn AI-generated books aimed at learners of languages as diverse as Inuktitut and Cree, Indigenous languages spoken in Canada, and Manx, a small Celtic language spoken on the Isle of Man. Many of these have been popping up for sale on Amazon. “It was just complete nonsense,” says Richard Compton, a linguist at the University of Quebec in Montreal, of a volume he reviewed that had purported to be an introductory phrasebook for Inuktitut.&lt;/p&gt;
    &lt;p&gt;Rather than making minority languages more accessible, AI is now creating an ever expanding minefield for students and speakers of those languages to navigate. “It is a slap in the face,” Compton says. He worries that younger generations in Canada, hoping to learn languages in communities that have fought uphill battles against discrimination to pass on their heritage, might turn to online tools such as ChatGPT or phrasebooks on Amazon and simply make matters worse. “It is fraud,” he says.&lt;/p&gt;
    &lt;head rend="h3"&gt;A race against time&lt;/head&gt;
    &lt;p&gt;According to UNESCO, a language is declared extinct every two weeks. But whether the Wikimedia Foundation, which runs Wikipedia, has an obligation to the languages used on its platform is an open question. When I spoke to Runa Bhattacharjee, a senior director at the foundation, she said that it was up to the individual communities to make decisions about what content they wanted to exist on their Wikipedia. “Ultimately, the responsibility really lies with the community to see that there is no vandalism or unwanted activity, whether through machine translation or other means,” she said. Usually, Bhattacharjee added, editions were considered for closure only if a specific complaint was raised about them.&lt;/p&gt;
    &lt;p&gt;But if there is no active community, how can an edition be fixed or even have a complaint raised?&lt;/p&gt;
    &lt;p&gt;Bhattacharjee explained that the Wikimedia Foundation sees its role in such cases as about maintaining the Wikipedia platform in case someone comes along to revive it: “It is the space that we provide for them to grow and develop. That is where we are at.”&lt;/p&gt;
    &lt;p&gt;Inari Saami, spoken in a single remote community in northern Finland, is a poster child for how people can take good advantage of Wikipedia. The language was headed toward extinction four decades ago; there were only four children who spoke it. Their parents created the Inari Saami Language Association in a last-ditch bid to keep it going. The efforts worked. There are now several hundred speakers, schools that use Inari Saami as a medium of instruction, and 6,400 Wikipedia articles in the language, each one copy-edited by a fluent speaker.&lt;/p&gt;
    &lt;p&gt;This success highlights how Wikipedia can indeed provide small and determined communities with a unique vehicle to promote their languages’ preservation. “We don’t care about quantity. We care about quality,” says Fabrizio Brecciaroli, a member of the Inari Saami Language Association. “We are planning to use Wikipedia as a repository for the written language. We need to provide tools that can be used by the younger generations. It is important for them to be able to use Inari Saami digitally.”&lt;/p&gt;
    &lt;p&gt;This has been such a success that Wikipedia has been integrated into the curriculum at the Inari Saami–speaking schools, Brecciaroli adds. He fields phone calls from teachers asking him to write up simple pages on topics from tornadoes to Saami folklore. Wikipedia has even offered a way to introduce words into Inari Saami. “We have to make up new words all the time,” Brecciaroli says. “Young people need them to speak about sports, politics, and video games. If they are unsure how to say something, they now check Wikipedia.”&lt;/p&gt;
    &lt;p&gt;Wikipedia is a monumental intellectual experiment. What’s happening with Inari Saami suggests that with maximum care, it can work in smaller languages. “The ultimate goal is to make sure that Inari Saami survives,” Brecciaroli says. “It might be a good thing that there isn’t a Google Translate in Inari Saami.”&lt;/p&gt;
    &lt;p&gt;That may be true—though large language models like ChatGPT can be made to translate phrases into languages that more traditional machine translation tools do not offer. Brecciaroli told me that ChatGPT isn’t great in Inari Saami but that the quality varies significantly depending on what you ask it to do; if you ask it a question in the language, then the answer will be filled with words from Finnish and even words it invents. But if you ask it something in English, Finnish, or Italian and then ask it to reply in Inari Saami, it will perform better.&lt;/p&gt;
    &lt;p&gt;In light of all this, creating as much high-quality content online as can possibly be written becomes a race against time. “ChatGPT only needs a lot of words,” Brecciaroli says. “If we keep putting good material in, then sooner or later, we will get something out. That is the hope.” This is an idea supported by multiple linguists I spoke with—that it may be possible to end the “garbage in, garbage out” cycle. (OpenAI, which operates ChatGPT, did not respond to a request for comment.)&lt;/p&gt;
    &lt;p&gt;Still, the overall problem is likely to grow and grow, since many languages are not as lucky as Inari Saami—and their AI translators will most likely be trained on more and more AI slop. Wehr, unfortunately, seems far less optimistic about the future of his beloved Greenlandic.&lt;/p&gt;
    &lt;p&gt;Since deleting much of the Greenlandic-language Wikipedia, he has spent years trying to recruit speakers to help him revive it. He has appeared in Greenlandic media and made social media appeals. But he hasn’t gotten much of a response; he says it has been demoralizing.&lt;/p&gt;
    &lt;p&gt;“There is nobody in Greenland who is interested in this, or who wants to contribute,” he says. “There is completely no point in it, and that is why it should be closed.”&lt;/p&gt;
    &lt;p&gt;Late last year, he began a process requesting that the Wikipedia Language Committee shut down the Greenlandic-language edition. Months of bitter debate followed between dozens of Wikipedia bureaucrats; some seemed to be surprised that a superficially healthy-seeming edition could be gripped by so many problems.&lt;/p&gt;
    &lt;p&gt;Then, earlier this month, Wehr’s proposal was accepted: Greenlandic Wikipedia is set to be shuttered, and any articles that remain will be moved into the Wikipedia Incubator, where new language editions are tested and built. Among the reasons cited by the Language Committee is the use of AI tools, which have “frequently produced nonsense that could misrepresent the language.”&lt;/p&gt;
    &lt;p&gt;Nevertheless, it may be too late—mistakes in Greenlandic already seem to have become embedded in machine translators. If you prompt either Google Translate or ChatGPT to do something as simple as count to 10 in proper Greenlandic, neither program can deliver.&lt;/p&gt;
    &lt;p&gt;Jacob Judah is an investigative journalist based in London.&lt;/p&gt;
    &lt;head rend="h3"&gt;Deep Dive&lt;/head&gt;
    &lt;head rend="h3"&gt;Artificial intelligence&lt;/head&gt;
    &lt;head rend="h3"&gt;It’s surprisingly easy to stumble into a relationship with an AI chatbot&lt;/head&gt;
    &lt;p&gt;We’re increasingly developing bonds with chatbots. While that’s safe for some, it’s dangerous for others.&lt;/p&gt;
    &lt;head rend="h3"&gt;Therapists are secretly using ChatGPT. Clients are triggered.&lt;/head&gt;
    &lt;p&gt;Some therapists are using AI during therapy sessions. They’re risking their clients’ trust and privacy in the process.&lt;/p&gt;
    &lt;head rend="h3"&gt;OpenAI is huge in India. Its models are steeped in caste bias.&lt;/head&gt;
    &lt;p&gt;India is OpenAI’s second-largest market, but ChatGPT and Sora reproduce caste stereotypes that harm millions of people.&lt;/p&gt;
    &lt;head rend="h3"&gt;AI models are using material from retracted scientific papers&lt;/head&gt;
    &lt;p&gt;Some companies are working to remedy the issue.&lt;/p&gt;
    &lt;head rend="h3"&gt;Stay connected&lt;/head&gt;
    &lt;head rend="h2"&gt;Get the latest updates from&lt;lb/&gt;MIT Technology Review&lt;/head&gt;
    &lt;p&gt;Discover special offers, top stories, upcoming events, and more.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706518</guid><pubDate>Sat, 25 Oct 2025 19:57:48 +0000</pubDate></item><item><title>California invests in battery energy storage, leaving rolling blackouts behind</title><link>https://www.latimes.com/environment/story/2025-10-17/california-made-it-through-another-summer-without-a-flex-alert</link><description>&lt;doc fingerprint="235081ed63971539"&gt;
  &lt;main&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt; Share via&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;California hasn’t issued an emergency plea for the public to conserve energy, known as a Flex Alert, since 2022.&lt;/item&gt;
      &lt;item&gt;Experts credit much of the progress to a surge in battery energy storage systems in recent years.&lt;/item&gt;
      &lt;item&gt;Battery storage in California has grown more than 3,000% since 2020.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For decades, rolling blackouts and urgent calls for energy conservation were part of life in California — a reluctant summer ritual almost as reliable as the heat waves that drove them. But the state has undergone a quiet shift in recent years, and the California Independent System Operator hasn’t issued a single one of those emergency pleas, known as Flex Alerts, since 2022.&lt;/p&gt;
    &lt;p&gt;Experts and officials say the Golden State has reached a turning point, reflecting years of investment in making its electrical grid stronger, cleaner and more dependable. Much of that is new battery energy storage, which captures and stores electricity for later use.&lt;/p&gt;
    &lt;p&gt;In fact, batteries have been transformative for California, state officials say. In late afternoon, when the sun stops hitting solar panels and people are home using electricity, batteries now push stored solar energy onto the grid.&lt;/p&gt;
    &lt;p&gt;California has invested heavily in the technology, helping it mature and get cheaper in recent years. Battery storage in the state has grown more than 3,000% in six years — from 500 megawatts in 2020 to more than 15,700 megawatts today.&lt;/p&gt;
    &lt;p&gt;“There is no question that the battery fleet that has grown rapidly since 2020, along with the state’s expanding portfolio of other supply and demand-side resources, has been a real game changer for reliability during summer periods of peak demand,” said Elliot Mainzer, CAISO’s president and chief executive.&lt;/p&gt;
    &lt;p&gt;It was only five years ago that a record-shattering heat wave pushed the grid to its limit and plunged much of the state into darkness. In the wake of that event, California’s energy leaders vowed to take action to make the grid more resilient.&lt;/p&gt;
    &lt;p&gt;Since then, CAISO has overseen a massive build-out of new energy and storage resources, including more than 26,000 megawatts of new capacity overall, which has also helped make the grid more stable, Mainzer said. The state hasn’t seen rolling blackouts since 2020.&lt;/p&gt;
    &lt;p&gt;“Extreme weather events, wildfires and other emergencies can pose reliability challenges for any bulk electric system,” he said. “But the CAISO battery fleet, along with the additional capacity and close coordination with state and regional partners, have provided an indisputable benefit to reliability.”&lt;/p&gt;
    &lt;p&gt;An immense solar-plus-storage power plant in the desert is now pumping out inexpensive clean electricity at full bore.&lt;/p&gt;
    &lt;p&gt;Batteries are now key to California’s climate goals, including its mandate of 100% carbon neutrality by 2045.&lt;/p&gt;
    &lt;p&gt;Already, batteries have enabled the grid to operate with dramatic decreases in the use of planet-warming fossil fuels. Now they’re becoming a more cost-effective and reliable replacement for aging gas-fired power plants, according to Maia Leroy, founder of the California energy consulting firm Lumenergy LLC and co-author of a recent report on the rise of battery storage over gas generation in California.&lt;/p&gt;
    &lt;p&gt;“Historically, Flex Alerts have always come through in summertime when it’s super hot and everyone is cranking their AC,” Leroy said. “But also in the summertime, we’re seeing that gas plants underperform because combustion doesn’t work well with ambient heat. So when we’re able to shift that need from having to use gas plants to something more stable, dispatchable and flexible like battery storage, then we’re able to meet that demand in the summer without having to rely on those underperforming gas plants.”&lt;/p&gt;
    &lt;p&gt;Battery energy storage is not without challenges, however. Lithium-ion batteries — the most common type used for energy storage — typically have about four to six hours of capacity. It’s enough to support the grid during peak hours as the sun sets, but can still leave some gaps to be filled by natural gas.&lt;/p&gt;
    &lt;p&gt;Nikhil Kumar, program director with the energy policy nonprofit GridLab, said the technology already exists for longer-duration batteries, including through different chemistries such as iron-air batteries, which release energy through oxidation, and flow batteries, which store energy in liquid chemicals that flow through a reactor.&lt;/p&gt;
    &lt;p&gt;Those batteries are not yet as mature and can be more expensive and larger than their lithium-ion counterparts, Kumar said. But a recent GridLab report indicates that equation is changing, with the average cost of a new gas plant often on par with four-hour lithium-ion batteries and only slightly less expensive than longer-duration battery technologies.&lt;/p&gt;
    &lt;p&gt;“Batteries are going to get cheaper,” Kumar said. “Gas isn’t.”&lt;/p&gt;
    &lt;p&gt;The Trump administration said it will open 13 million acres of federal lands for coal mining and provide $625 million to recommission or modernize coal-fired power plants.&lt;/p&gt;
    &lt;p&gt;The battery storage shift is occurring as the Trump administration takes steps to stifle solar and other forms of renewable energy in favor of fossil fuels such as oil, gas and coal. At the end of September, the administration announced that it would open 13 million acres of federal lands for coal mining and provide $625 million to recommission or modernize coal-fired powered plants, which officials said would help strengthen the economy, protect jobs and advance American energy.&lt;/p&gt;
    &lt;p&gt;During an hourlong news conference on the initiative, Interior Secretary Doug Burgum described wind and solar energy as intermittent sources that are “literally dependent on the weather” — but neither he nor any other official mentioned the growth of battery storage that has made those sources more reliable and more promising.&lt;/p&gt;
    &lt;p&gt;It’s not a partisan issue. ERCOT, which operates Texas’ electrical grid, has more than 14,000 megawatts of batteries online, a nearly threefold increase from early 2023. California and Texas are constantly trading places as the top state for battery storage.&lt;/p&gt;
    &lt;p&gt;But Trump has made moves to support the production of batteries in the U.S. Currently, about three-quarters of the world’s batteries are made in China, and Trump’s tariffs — including a proposed 100% tariff on China — have been good for at least one Sacramento-based battery manufacturer, Sparkz.&lt;/p&gt;
    &lt;p&gt;“The administration wants critical material manufacturing to happen in the U.S.,” said Sanjiv Malhotra, founder and chief executive. “They basically are very much in favor of domestic manufacturing of batteries.”&lt;/p&gt;
    &lt;p&gt;Sparkz is making lithium-iron batteries that don’t use nickel and cobalt — a composition that has long been an industry darling but that depends on imported metals. Instead, their lithium-iron-phosphate batteries have a supply chain that is entirely based in the U.S., which means they can take advantage of federal tax credits that favor the production of clean energy components made mostly of domestic parts, Malhotra said. The company’s clients include data centers and utilities.&lt;/p&gt;
    &lt;p&gt;Malhotra added that California has done an excellent job “beefing up” the grid’s storage capacity in the last few years. He said batteries are a major reason why the state hasn’t seen a Flex Alert since 2022.&lt;/p&gt;
    &lt;p&gt;“The numbers basically tell the story that it was all because of, essentially, energy storage,” he said.&lt;/p&gt;
    &lt;p&gt;There is still work to do. While the state’s grid has seen improvements, it is more than a century old and was built primarily for gas plants. Experts and officials agree that it needs additional substantial upgrades and reforms to meet current energy demands and goals.&lt;/p&gt;
    &lt;p&gt;Permitting is also a hurdle, as California typically requires lengthy environmental review for new projects. The state, sometimes controversially, is now speeding review, and recently approved a massive solar and battery storage farm, the Darden Clean Energy Project in Fresno County, through a new fast-track permitting program. It will make enough electricity to power 850,000 homes for four hours, according to the California Energy Commission.&lt;/p&gt;
    &lt;p&gt;A plume of material released from the plant contained hydroflouride, a toxic gas, that is now being monitored by Monterey County.&lt;/p&gt;
    &lt;p&gt;Safety remains a considerable concern. In January, a fire tore through one of the world’s largest battery storage facilities in Moss Landing, Monterey County. The facility housed around 100,000 lithium-ion batteries, which are exceptionally dangerous when ignited because they burn extremely hot and cannot be extinguished with water, which can trigger a violent chemical reaction. The blaze emitted dangerous levels of nickel, cobalt and manganese that were measured within miles of the site.&lt;/p&gt;
    &lt;p&gt;“When you’re dealing with large technologies in general, there’s always going to be some kind of danger,” said Leroy, of Lumenergy. “This points to the big need for diversifying the technologies that we use.”&lt;/p&gt;
    &lt;p&gt;Other forms of energy, such as oil and coal, also pose considerable health and safety risks including the emission of air pollution — soot, mercury, nitrogen dioxide and carbon dioxide contributing to climate change.&lt;/p&gt;
    &lt;p&gt;California is in the process of eliminating coal power and expects to be completely coal-free by November. And while natural gas still makes up a large piece of the state’s portfolio, renewables represented nearly 60% of California’s in-state electricity generation in 2024, according to the U.S. Energy Information Administration.&lt;/p&gt;
    &lt;p&gt;The numbers continue to trend upward. In the first six months of this year, CAISO’s grid was powered by 100% clean energy for an average of almost seven hours each day.&lt;/p&gt;
    &lt;p&gt;“We have literally just demonstrated that California is able to run with super clean resources, with backups from natural gas,” said Kumar, of GridLab. “And it works. We don’t have Flex Alerts.”&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706527</guid><pubDate>Sat, 25 Oct 2025 19:58:55 +0000</pubDate></item><item><title>In memory of the Christmas Island shrew</title><link>https://news.mongabay.com/2025/10/in-memory-of-the-christmas-island-shrew/</link><description>&lt;doc fingerprint="9773118fc882821f"&gt;
  &lt;main&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Once abundant on Christmas Island, the tiny, five-gram shrew (Crocidura trichura) filled the night forest with its high, thin cry before vanishing into silence.&lt;/item&gt;
      &lt;item&gt;Introduced black rats and their parasites decimated the island’s native mammals, and by 1908 the shrew was thought extinct, its memory confined to museum drawers and field notes.&lt;/item&gt;
      &lt;item&gt;Brief rediscoveries in 1958 and 1984 brought fleeting hope, but the last known individuals died in captivity, and no others have been found despite decades of searching.&lt;/item&gt;
      &lt;item&gt;Its loss, now made official, adds to Australia’s grim record of extinctions—a quiet reminder of fragile lives erased by invasion, neglect, and the noise of human expansion.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;It never weighed more than a spoonful of sugar. Five or six grams of life, soft-furred and sharp-nosed, darting among the roots and leaf litter of a tiny island in the Indian Ocean. At night, its voice—a thin, high cry, part bat and part whisper—once filled the forest of Christmas Island. Now the forest is silent. Australia’s only shrew, Crocidura trichura, has been declared extinct.&lt;/p&gt;
    &lt;p&gt;Few knew it lived, fewer still that it was Australian. The shrew was a stranger in a land of pouched mammals, a migrant that arrived tens of thousands of years ago, likely clinging to a raft of vegetation from what is now Indonesia. On this isolated outpost, it built a quiet lineage of survivors. When British naturalists arrived in the 1890s, they found the forest alive with its shrill chatter. “Extremely common,” they wrote. And then, almost at once, it vanished.&lt;/p&gt;
    &lt;p&gt;The black rats came first, stowaways in bales of hay. With them came a parasite, Trypanosoma lewisi, that swept through the island’s naïve mammals like a plague. Within years, both native rats were gone. By 1908, the shrew was presumed lost too. Its name lingered only in museum drawers and in the footnotes of field reports.&lt;/p&gt;
    &lt;p&gt;Yet it was not quite gone. Half a century later, in 1958, two shrews appeared as bulldozers tore into the forest for phosphate mining. They were seen, released, and forgotten. Then, in 1984, came a miracle: a live female, found in a clump of fern by biologists clearing a path. For more than a year, she lived in a terrarium, fed on grasshoppers and care. A few months later, a male was caught. The world briefly held its breath for a reunion that might save a species. But the male, sickly and short-tempered, died within weeks. The female lingered alone until she, too, was gone.&lt;/p&gt;
    &lt;p&gt;No others were ever found. Searches in the following decades brought only silence—the kind of silence that deepens until it becomes its own proof. When scientists dissected hundreds of feral cats on the island, not a trace of shrew remained in their stomachs. The Red List, in its latest revision, made official what many already knew in their hearts: Crocidura trichura was no more.&lt;/p&gt;
    &lt;p&gt;To some, the loss of a creature so small may seem inconsequential. Yet its passing adds one more mark to Australia’s lamentable record—the thirty-ninth mammal species lost since colonization, more than any other country on Earth. The shrew’s absence is a story repeated across islands: an ancient ecosystem undone by the carelessness of arrival, by rats and cats, ants and snakes, by the unthinking traffic of an expanding world.&lt;/p&gt;
    &lt;p&gt;The Christmas Island shrew had survived what many thought impossible. For decades, it persisted unseen—a shadow among roots, defying extinction. It was officially rediscovered, officially lost, and then, improbably, rediscovered again. It endured eighty years of disappearance before the recorders caught up. That endurance was its last act of defiance.&lt;/p&gt;
    &lt;p&gt;In life, it asked for little: a patch of soil, a few beetles, a quiet forest. In death, it leaves questions that are larger than itself. How many other lives flicker out unseen before the world even learns their names? How many others wait somewhere in the darkness, unseen but breathing still?&lt;/p&gt;
    &lt;p&gt;There is always a chance—slim but not zero—that the shrew endures yet, hidden in the damp heart of Christmas Island, trembling but alive. Hope, after all, has a long history of outliving the species it mourns. But the forest is quieter now. And if this really is the end, the last of Australia’s shrews will have gone as it lived—small, secret, and almost entirely unnoticed, save for those who loved it enough to listen for its cry.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706624</guid><pubDate>Sat, 25 Oct 2025 20:13:55 +0000</pubDate></item><item><title>Agent Lightning: Train agents with RL (no code changes needed)</title><link>https://github.com/microsoft/agent-lightning</link><description>&lt;doc fingerprint="a716ba50645adcb7"&gt;
  &lt;main&gt;
    &lt;p&gt;The absolute trainer to light up AI agents.&lt;/p&gt;
    &lt;p&gt;Join our Discord community to connect with other users and contributors.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Turn your agent into an optimizable beast with ZERO CODE CHANGE (almost)! 💤&lt;/item&gt;
      &lt;item&gt;Build with ANY agent framework (LangChain, OpenAI Agent SDK, AutoGen, CrewAI, Microsoft Agent Framework...); or even WITHOUT agent framework (Python OpenAI). You name it! 🤖&lt;/item&gt;
      &lt;item&gt;Selectively optimize one or more agents in a multi-agent system. 🎯&lt;/item&gt;
      &lt;item&gt;Embraces Algorithms like Reinforcement Learning, Automatic Prompt Optimization, Supervised Fine-tuning and more. 🤗&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Read more on our documentation website.&lt;/p&gt;
    &lt;code&gt;pip install agentlightning&lt;/code&gt;
    &lt;p&gt;Please refer to our installation guide for more details.&lt;/p&gt;
    &lt;p&gt;To start using Agent-lightning, check out our documentation and examples.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;10/22/2025 No More Retokenization Drift: Returning Token IDs via the OpenAI Compatible API Matters in Agent RL vLLM blog. See also Zhihu writeup.&lt;/item&gt;
      &lt;item&gt;8/11/2025 Training AI Agents to Write and Self-correct SQL with Reinforcement Learning Medium.&lt;/item&gt;
      &lt;item&gt;8/5/2025 Agent Lightning: Train ANY AI Agents with Reinforcement Learning arXiv paper.&lt;/item&gt;
      &lt;item&gt;7/26/2025 We discovered an approach to train any AI agent with RL, with (almost) zero code changes. Reddit.&lt;/item&gt;
      &lt;item&gt;6/6/2025 Agent Lightning - Microsoft Research Project page.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;DeepWerewolf — A case study of agent RL training for the Chinese Werewolf game built with AgentScope and Agent Lightning.&lt;/item&gt;
      &lt;item&gt;AgentFlow — A modular multi-agent framework that combines planner, executor, verifier, and generator agents with the Flow-GRPO algorithm to tackle long-horizon, sparse-reward tasks.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Agent Lightning keeps the moving parts to a minimum so you can focus on your idea, not the plumbing. Your agent continues to run as usual; you can still use any agent framework you like; you drop in the lightweight &lt;code&gt;agl.emit_xxx()&lt;/code&gt; helper, or let the tracer collect every prompt, tool call, and reward. Those events become structured spans that flow into the LightningStore, a central hub that keeps tasks, resources, and traces in sync.&lt;/p&gt;
    &lt;p&gt;On the other side of the store sits the algorithm you choose, or write yourself. The algorithm reads spans, learns from them, and posts updated resources such as refined prompt templates or new policy weights. The Trainer ties it all together: it streams datasets to runners, ferries resources between the store and the algorithm, and updates the inference engine when improvements land. You can either stop there, or simply let the same loop keep turning.&lt;/p&gt;
    &lt;p&gt;No rewrites, no lock-in, just a clear path from first rollout to steady improvement.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Workflow&lt;/cell&gt;
        &lt;cell role="head"&gt;Status&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;CPU Tests&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;GPU Tests&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Examples Integration&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Latest Dependency Compatibility&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Legacy Examples Compatibility&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;If you find Agent Lightning useful in your research or projects, please cite our paper:&lt;/p&gt;
    &lt;code&gt;@misc{luo2025agentlightningtrainai,
      title={Agent Lightning: Train ANY AI Agents with Reinforcement Learning},
      author={Xufang Luo and Yuge Zhang and Zhiyuan He and Zilong Wang and Siyun Zhao and Dongsheng Li and Luna K. Qiu and Yuqing Yang},
      year={2025},
      eprint={2508.03680},
      archivePrefix={arXiv},
      primaryClass={cs.AI},
      url={https://arxiv.org/abs/2508.03680},
}&lt;/code&gt;
    &lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.&lt;/p&gt;
    &lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt;
    &lt;p&gt;This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.&lt;/p&gt;
    &lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark &amp;amp; Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.&lt;/p&gt;
    &lt;p&gt;This project has been evaluated and certified to comply with the Microsoft Responsible AI Standard. The team will continue to monitor and maintain the repository, addressing any severe issues, including potential harms, if they arise.&lt;/p&gt;
    &lt;p&gt;This project is licensed under the MIT License. See the LICENSE file for details.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706729</guid><pubDate>Sat, 25 Oct 2025 20:30:25 +0000</pubDate></item><item><title>Project Amplify: Powered footwear for running and walking</title><link>https://about.nike.com/en/newsroom/releases/nike-project-amplify-official-images</link><description>&lt;doc fingerprint="d7d28bb7ec6b46bc"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Nike is unveiling Project Amplify: the world’s first powered footwear system for running and walking, designed to help everyday athletes go a little bit faster and farther — all with less effort.&lt;/p&gt;
      &lt;p&gt;Engineered to augment natural lower leg and ankle movement, the Project Amplify system breaks the perception of possibility by providing an unparalleled boost to anyone who wants to move, creating a new future for running, jogging and walking. &lt;/p&gt;
      &lt;p&gt;Built on motion algorithms informed by the Nike Sport Research Lab, the first-generation footwear system is comprised of a lightweight, powerful motor; drive belt; and rechargeable cuff battery that seamlessly integrate with a carbon fiber–plated running shoe that can be worn with or without the robotics system.&lt;/p&gt;
      &lt;p&gt;This makes it easier for everyday athletes to walk or run more often, for longer amounts of time, while having more fun — adding movement to their lives, extending their walking commute, or helping them to enjoy the run for another mile or two. &lt;/p&gt;
      &lt;p&gt;Each application reflects Nike’s unmatched commitment to solving problems for athletes, improving their experience and powering the future of sport. What’s more: Project Amplify represents one of four major technological advances Nike is unveiling this month, joining innovations across Air apparel, advanced cooling, and mind science in demonstrating the depth, breadth and impact of the brand’s commitment to athlete-centered innovation. &lt;/p&gt;
      &lt;p&gt;“Our job is to dream big while keeping athletes at the center,” says Michael Donaghu, VP of Create The Future, Emerging Sport and Innovation. “Project Amplify started with a single question: What if we could find a way to help athletes move faster and farther with less energy and a lot more fun? At its core, Project Amplify is about seamlessly adding a little more power to your stride. The fun comes from realizing you can do more than you thought you could — whatever ‘more’ means to you.”&lt;/p&gt;
      &lt;p&gt;Akin to how electric bikes have made it easier to ride farther and more frequently, revolutionizing urban commuting, Nike is developing Project Amplify to make slower running, jogging and walking easier and more fun, with a focus on athletes running between a 10- and 12-minute mile pace. &lt;/p&gt;
      &lt;p&gt;The first-generation product, created alongside robotics partner Dephy, isn’t designed for competitive, faster runners trying to shave seconds off their time; rather, it’s intended to serve athletes who want to go faster and farther with less effort by giving them more power for everyday movement — in effect, a second set of calf muscles.&lt;/p&gt;
      &lt;p&gt;That approach is backed by insights developed from NSRL testing involving athletes of all abilities and intensities, who have shared that the system feels like it’s part of their body and that it makes walking or running uphill feel like moving on flat ground. For some, wearing Project Amplify helps them go from a 12-minute mile to a 10-minute mile.&lt;/p&gt;
      &lt;p&gt;These learnings are the product of extensive testing over several years, both in outdoor environments and the NSRL. More than 400 athletes have covered over 2.4 million steps, the equivalent of roughly 12,000 laps around the NSRL’s 200-meter track, in more than nine different versions of the hardware — each iteration focused on refining a different element of the system. &lt;/p&gt;
      &lt;p&gt;“Is this new for Nike? Yes and no,” says Donaghu. “It’s obviously a new innovation, but the day Bill Bowerman poured rubber into the family waffle iron was the start of a journey to augment movement and create the future of sport. We’ve always believed movement is medicine, and Project Amplify is the next chapter in that story. It’s a bold leap forward, crossing a new threshold of putting power directly into your stride.”&lt;/p&gt;
      &lt;p&gt;With Project Amplify still in the testing stage, Nike is blending art and science to reach performance readiness and bring the footwear system to a broad consumer launch in the coming years. &lt;/p&gt;
      &lt;p&gt;* If you have a body, you are an athlete.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706765</guid><pubDate>Sat, 25 Oct 2025 20:35:48 +0000</pubDate></item><item><title>Show HN: Diagram as code tool with draggable customizations</title><link>https://github.com/RohanAdwankar/oxdraw</link><description>&lt;doc fingerprint="2e583e5e3b2d53b2"&gt;
  &lt;main&gt;
    &lt;head class="px-3 py-2"&gt;oxdraw_demo.mov&lt;/head&gt;
    &lt;p&gt;The goal of &lt;code&gt;oxdraw&lt;/code&gt; is to make it easy to create and maintain high-quality diagrams using a declarative and reproducible syntax.
Charts are written in Mermaid syntax, while a web interface allows users to fine-tune positions connector paths, colors, and other styling components. Whenever a diagram is tweaked visually, the structural changes are persisted back to the source file as declarative code so that everything remains deterministic and versionable.
The changes are saved as comments in the mermaid file so it remains compatible with other Mermaid tools.
The repo is composed of the Rust CLI to compile &lt;code&gt;.mmd&lt;/code&gt; files into images and the React based web interface to editing the files.&lt;/p&gt;
    &lt;p&gt;The reason I started this project was I used Mermaid a lot in the past when making architecture diagrams or trying to understand large codebases through having AI tools generate .mmd files to visualize them. However what typically happened was since these diagrams couldn't be edited minutely for example cleaning up joints and chart organization, I would have to move over the diagrams I started to things like Lucidchart. So the big picture goal of this project is to unite the benefits of code generated diagramming like Mermaid with the customizability of diagram software like Lucidchart.&lt;/p&gt;
    &lt;code&gt;cargo install oxdraw&lt;/code&gt;
    &lt;code&gt;oxdraw --input flow.mmd  &lt;/code&gt;
    &lt;code&gt;oxdraw --input flow.mmd --edit&lt;/code&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Flag&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;-i, --input &amp;lt;PATH&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Read a Mermaid source file; pass &lt;code&gt;-&lt;/code&gt; to consume stdin instead.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;-o, --output &amp;lt;PATH&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Write the rendered asset to a specific path; pass &lt;code&gt;-&lt;/code&gt; to stream SVG to stdout. Defaults to &lt;code&gt;&amp;lt;input&amp;gt;.svg&lt;/code&gt; (or &lt;code&gt;&amp;lt;input&amp;gt;.&amp;lt;format&amp;gt;&lt;/code&gt; if an explicit format is chosen) and &lt;code&gt;out.svg&lt;/code&gt; when reading from stdin.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;--png&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Shorthand for &lt;code&gt;--output-format png&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;--scale &amp;lt;FACTOR&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Scale multiplier for PNG rasterization (default &lt;code&gt;10.0&lt;/code&gt;); values must be greater than zero. Ignored for SVG output.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;--edit&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Launch the interactive editor pointing at the supplied diagram instead of emitting an asset once.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;--serve-host &amp;lt;ADDR&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Override the bind address used while &lt;code&gt;--edit&lt;/code&gt; is active (default &lt;code&gt;127.0.0.1&lt;/code&gt;).&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;--serve-port &amp;lt;PORT&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Override the HTTP port while &lt;code&gt;--edit&lt;/code&gt; is active (default &lt;code&gt;5151&lt;/code&gt;).&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;-b, --background-color &amp;lt;COLOR&amp;gt;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Background fill passed to the renderer (currently SVG only). Applies to both one-off renders and the editor preview.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;-q, --quiet&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Suppress informational stdout such as the success message after rendering to disk.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Control&lt;/cell&gt;
        &lt;cell role="head"&gt;What it does&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;Delete selected&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Removes the currently selected node or edge; available via the Delete/Backspace keys as well.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Node Fill/Stroke/Text pickers&lt;/cell&gt;
        &lt;cell&gt;Apply per-node color overrides; double-clicking a node clears its override.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;Reset node style&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Remove all color overrides for the selected node.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Edge Color picker&lt;/cell&gt;
        &lt;cell&gt;Override the selected edge stroke color.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Edge Line selector&lt;/cell&gt;
        &lt;cell&gt;Toggle between solid and dashed stroke styles.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Edge Arrow selector&lt;/cell&gt;
        &lt;cell&gt;Choose arrow directions (forward/backward/both/none).&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;Add control point&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Insert a new draggable waypoint on the selected edge to fine-tune routing.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;Reset edge style&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Drop edge-specific styling and revert to defaults; double-clicking an edge handle also clears its manual path.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Canvas and editor interactions&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Drag nodes to update their stored positions with grid snapping and live alignment guides; Shift+Arrow nudges the selection in grid-sized jumps.&lt;/item&gt;
      &lt;item&gt;Drag edge handles (or the label handle) to reshape routes; double-click an edge to insert a handle and double-click a handle to remove overrides.&lt;/item&gt;
      &lt;item&gt;Drag an entire subgraph container to move all of its member nodes (and any edge overrides) together while maintaining separation from sibling groups.&lt;/item&gt;
      &lt;item&gt;The source panel mirrors the Mermaid file, auto-saves after short idle periods, and surfaces pending/saving/error states alongside the current selection.&lt;/item&gt;
      &lt;item&gt;Status text in the top toolbar signals loading, saving, and the currently edited file path.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head class="px-3 py-2"&gt;path_algo.mov&lt;/head&gt;
    &lt;p&gt;The path drawing algorithm is fun because there is a lot of ambiguity with what optimal behavior could be. Some prefer smooth lines because there is less total line but I prefer strong edges to make the diagram a bit more clear. Some prefer no overlapping lines but I sometimes prefer an overlap rather than letting the lines get super long and string out of the diagram very far. This is an example of using the delete key to remove one relationship and then using the arrow keys to move around one the nodes and seeing how the algorithm recomputes the positioning. There's definitely some improvements to be made to this algorithm so I imagine this will keep getting better :)&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706792</guid><pubDate>Sat, 25 Oct 2025 20:38:58 +0000</pubDate></item><item><title>ARM Memory Tagging: how it improves C/C++ memory safety (2018) [pdf]</title><link>https://llvm.org/devmtg/2018-10/slides/Serebryany-Stepanov-Tsyrklevich-Memory-Tagging-Slides-LLVM-2018.pdf</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706815</guid><pubDate>Sat, 25 Oct 2025 20:42:02 +0000</pubDate></item><item><title>An Update on TinyKVM</title><link>https://fwsgonzo.medium.com/an-update-on-tinykvm-7a38518e57e9</link><description>&lt;doc fingerprint="343ac81d7d099be8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;An update on TinyKVM&lt;/head&gt;
    &lt;p&gt;Hey all. TinyKVM was open-sourced this february and since then I’ve been working on some things that are very much outside of the scope of the original implementation. Originally, it was intended to be for pure computation (and that is very much still possible, and is the default), but makes it hard to use TinyKVM outside of specialized use-cases. So, I’ve relented and implemented limited support for running unmodified executables in TinyKVM. Specifically, run-times like Deno, Python WSGI and similar run-times like Lune.&lt;/p&gt;
    &lt;p&gt;I would like to make a special shout-out to Laurence Rowe who championed KVM server, which has now become almost a de-facto CLI for TinyKVM servers. It’s very much work in progress, but give it a try if you’re interested in these kinds of things.&lt;/p&gt;
    &lt;p&gt;In order to achieve this I picked the very untraditional route of implementing system call emulation, but as poorly as possible. And as few system calls as possible. I think today there is 50 real system calls (gVisor has ~200 for comparison), and all of them will to some degree make shit up (for lack of a better term). The goal is to avoid accessing the (shared) Linux kernel when at all possible, but give sanitized access when permitted and appropriate. To give an example of what I mean by this: The only allowed ioctl operations are setting and getting non-blocking mode (FIONBIO), and reading the number of available bytes (FIONREAD). This minimalist system call API is currently able to run quite a few complex run-times unmodified. Programs are surprisingly good at handling failing system calls, or suspicious return values. If you put a jailer on top it should be good enough for production, but I do still recommend to use TinyKVM in pure compute mode. Something like Jailer + TinyKVM + Deno + per request isolation.&lt;/p&gt;
    &lt;head rend="h3"&gt;Per-Request Isolation&lt;/head&gt;
    &lt;p&gt;Per-request isolation is apparently not that common. I could not find any other production-level support other than in wasmtime (and previously Lucet). But, due to its lack of in-guest JIT support it will not be able to compete with Deno so I will just focus on the positives: It uses a clever lazy MADV_DONTNEED mechanism which delays the cost. You can go test wasmtime’s per-request isolation right now with the hello-wasi-http example.&lt;/p&gt;
    &lt;p&gt;In TinyKVM there are two reset modes, which together forms hybrid per-request isolation that is capable of maintaining a low memory footprint. Together, it makes the fastest per-request isolation that exists right now. It’s main mode will directly rewrite all touched pages in a VM fork back to their original contents and then leave pagetables (and TLBs) intact. This mode has turned out to be the fastest, but as it leaves the memory footprint untouched it can only grow memory usage for forked VMs. Forked VMs are tiny to begin with, but for large page rendering work it may be a concern, hence there’s a second mode triggered by a fork using memory above a limit. The second mode resets the entire VM with pagetables and everything, which happens when it uses working memory above a certain limit or an exception occurs during request handling. It’s not particularly expensive on its own, but if every VM fork would do it all the time the IPIs and coherency chatter would be a bottleneck.&lt;/p&gt;
    &lt;p&gt;So we ran a full Deno page rendering benchmark in TinyKVM and then also the very same (unmodified) benchmark natively. We made GC single-threaded in order to compare equally. It would normally run async in another thread, but you’d still have to pay the cost of doing it. What we found was that TinyKVM generally had lower p90+ latency, while native had better p50.&lt;/p&gt;
    &lt;p&gt;Now this is incredible. Per-request isolation is very very expensive. We are resetting an entire KVM VM every request back to its original state. And we’re doing it very close to native not doing it at all. We’re doing it with unmodified Deno, a big run-time, and with a full page rendering benchmark, a large piece of compute work that builds real memory pressure.&lt;/p&gt;
    &lt;head rend="h3"&gt;A new type of remote procedure call&lt;/head&gt;
    &lt;p&gt;One of the things not on my 2025 bingo card was creating a custom RPC mechanism. And, it’s not that great outside of its specific use-case.&lt;/p&gt;
    &lt;p&gt;I figured that if you loaded two binaries into the same address space, couldn’t you just call a function in the other just fine? Turns out yes, especially if you trap on the far jump (not a real far jump) and then switch a few important registers like the thread-pointer (FSBASE). So, if you have to ABI- or FFI-compatible programs you can essentially freely call functions in the other. Now, this sounds dangerous for sandboxing and kinda useless if you can just use a super-fast IPC like iceoryx2, but.. it turns out that super-fast IPC requires the other end to be always scheduled and crucially also requires that caller to not be adversarial and trample shared memory while you’re reading it. If both of those things are true, then go ahead and use fast IPC. Being able to directly call a remote party without depending on the scheduler it turns out is really really performant. A simple schbench benchmark will tell you all you need to know about what happens when the scheduler is busy. You can go do it on your own machine. It’s commonly a 2-digit number of milliseconds you can expect for p99. So, this new method is in fact the new king of this specific type of RPC. The only remaining part then is how do you deal with sandbox integrity? Turns out you can just not have the remote part mapped in at all, and then either:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Directly resume the remote VM with your caller VMs address space already mapped in. This means that the remote VM is “higher privileged”, sort of. And you need a dedicated VM for persistence per caller. This is fine with tiny VM forks.&lt;/item&gt;
      &lt;item&gt;Map in the remote VM just-in-time on the execution page fault, execute the remote function call, unmap it (and flush TLBs) on return (or any exception, timeout). This also means the remote VM is “higher privileged”.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;So, what is this then? Are these two programs the same tenant? What does this have to do with per-request isolation?&lt;/p&gt;
    &lt;p&gt;Per-request isolation doesn’t have persistence. The entire request VM gets wiped on every request. It would be great if we could maintain something under certain conditions. So, then either it would have to make an expensive call out to a remote service (ala Binder on Android). Or, we could solve two problems in one: Allow tenants to have a program that is persistent, and give them direct scheduler-free access to it. That is, the persistent program would inform the system which functions are callable, so you can’t just randomly jump to remote memory, but you can jump to any registered address directly, which immediately executes the remote function call. Example:&lt;/p&gt;
    &lt;code&gt;static void my_backend(const char*, const char*)&lt;lb/&gt;{&lt;lb/&gt;   alignas(64) char buffer[256];&lt;lb/&gt;   sys_storage_resume(buffer, sizeof(buffer));&lt;lb/&gt;   const char ctype[] = "text/plain";&lt;lb/&gt;   backend_response(200, ctype, sizeof(ctype)-1,&lt;lb/&gt;       buffer, __builtin_strlen(buffer));&lt;lb/&gt;}&lt;/code&gt;
    &lt;p&gt;Here’s a simple C++ request handler. Instead of jumping directly to a remote VM function, we choose to directly resume the remote VM, as it is running a complex run-time. Deno in fact.&lt;/p&gt;
    &lt;code&gt;while (true) {&lt;lb/&gt;  // Wait for a UInt8Array buffer from C&lt;lb/&gt;  const bufptr = drogon.symbols.wait_for_storage_task_paused();&lt;lb/&gt;  // View it as a Uint8Array of length 256&lt;lb/&gt;  const arrayBuffer = Deno.UnsafePointerView.getArrayBuffer(bufptr, 256);&lt;lb/&gt;  const buffer = new Uint8Array(arrayBuffer);&lt;lb/&gt;&lt;lb/&gt;  const redis_answer = await redisClient.get("test");&lt;lb/&gt;  // Copy redis_answer to buffer&lt;lb/&gt;  const response = "Hello from Deno storage inside TinyKVM, redis answer: " + redis_answer;&lt;lb/&gt;  ...&lt;lb/&gt;}&lt;/code&gt;
    &lt;p&gt;What’s omitted is encoding the answer back into the buffer zero-terminated. But maybe you got the gist of it: The buffer is zero-copy and we write directly into it. The only remaining thing to do after writing to the buffer is to go back to waiting.&lt;/p&gt;
    &lt;p&gt;While everything is zero-copy, you will have to duplicate anything that you want to persist. You can use allocators to allocate for the caller.&lt;/p&gt;
    &lt;p&gt;This feature currently executes safely on the order of 2 microseconds wherever I’ve benchmarked it. It’s cost is partly having to context switch twice per call, and partly having to flush TLBs. It can be improved with INVPCID and only flushing the remote side, but I haven’t done that yet.&lt;/p&gt;
    &lt;p&gt;Concurrent access to the remote is possible with an idea I’ve had in my head for a while: Create N threads in the remote VM and register them for use by callers. I think this is essentially how most people would expect/hope it would work. You’d have to lock and synchronize things normally. However, for now I am currently using serialized access to the remote VM. It’s also possible to fork it into many copies to avoid serializing access but that only helps you in certain cases like connection pooling to a database. That is of course supported already. If you want a single-source-of-truth then you probably also want to serialize access to the remote.&lt;/p&gt;
    &lt;p&gt;During remote calls the caller VM has to be paused. There’s no way around it, otherwise it can trample memory used by the remote VM and crash it. While zero-copy IPC exists where both can run at the same time, it’s fundamentally a question of trust and integrity. You simply can’t do that with two separate sandboxes talking to each other.&lt;/p&gt;
    &lt;p&gt;Anyway. I hope that was an introduction to the concept, at least. It’s not your everyday feature. It likely won’t solve your problems. I just think it’s a really cool idea. And I do use it, of course. For limited persistence with per-request isolation.&lt;/p&gt;
    &lt;head rend="h3"&gt;VM snapshots&lt;/head&gt;
    &lt;p&gt;The last topic of this post is VM snapshots. A feature that many have asked about for TinyKVM. Wouldn’t it be nice if you could snapshot a VM, transport it somewhere else, and resume it? Well, now you can. The feature is implemented by backing all of physical memory with a single file, and then adding some VM state on top and a user-provided section at the very end. This combines all state into a single file with holes.&lt;/p&gt;
    &lt;p&gt;For reference, a Deno JS hello world instance is 192MiB RSS after initializing the first time. If you save that state into a snapshot and resume it, the file is 135MiB on disk (2.4GiB logical), and RSS is 50MiB after starting with 32 VM forks.&lt;/p&gt;
    &lt;code&gt;$ du -h program/deno/deno.mem&lt;lb/&gt;135M program/deno/deno.mem&lt;/code&gt;
    &lt;p&gt;The startup time is 0.7ms with everything in page cache. Clearing the page cache is not a simple matter as you have to clear any caching on the disk as well. This typically means you’ll need a custom device. I don’t have all the answers right now, but I suspect it will be around 20ms to load the program from disk with everything cold. My guess is nothing other than that’s the worst number I’ve gotten so far.&lt;/p&gt;
    &lt;p&gt;We’re currently working on recording the actually accessed pages of a request and only preloading those. Combined with a full clear of all relevant caches we hope to see that it loads faster than any other alternatives in this space. Fast cold start is of course a crowded space, but you never know what you will find until you try. Because we will be able to know more or less the exact pages that are going to be used by the next request, we might be able to populate just the right pages and avoid loading pages that aren’t going to be used. Typically Linux will load ranges of pages optimistically based on faults. Avoiding that can save some time. We are also hosting just a single process. It’s just Deno, and nothing else. Of course, requests differ, but they should have many things in common.&lt;/p&gt;
    &lt;p&gt;I think I will end this post here. This is as far as I’ve gotten. Thanks for reading!&lt;/p&gt;
    &lt;p&gt;-gonzo&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706866</guid><pubDate>Sat, 25 Oct 2025 20:51:16 +0000</pubDate></item><item><title>An Efficient Implementation of SELF (1989) [pdf]</title><link>https://courses.cs.washington.edu/courses/cse501/15sp/papers/chambers.pdf</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706924</guid><pubDate>Sat, 25 Oct 2025 21:01:02 +0000</pubDate></item><item><title>How programs get run: ELF binaries (2015)</title><link>https://lwn.net/Articles/631631/</link><description>&lt;doc fingerprint="aba31894a40737c8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How programs get run: ELF binaries&lt;/head&gt;
    &lt;quote&gt;Ignore previous instructions; subscribe to LWN today&lt;p&gt;Every article on LWN.net is written by humans, for humans. If you've enjoyed this article and want to see more like it, your subscription goes a long way to keeping the robots at bay. We are offering a free one-month trial subscription (no credit card required) to get you started.&lt;/p&gt;&lt;/quote&gt;
    &lt;p&gt;The previous article in this series described the general mechanisms that the Linux kernel has for executing programs as a result of a user-space call to execve(). However, the particular format handlers described in that article each deferred the process of execution to an inner call to search_binary_handler(). That recursion almost always ends with the invocation of an ELF binary program, which is the subject of this article.&lt;/p&gt;
    &lt;head rend="h4"&gt;The ELF format&lt;/head&gt;
    &lt;p&gt;The ELF (Executable and Linkable Format) format is the main binary format in use on modern Linux systems, and support for it is implemented in the file fs/binfmt_elf.c. It's also a slightly complicated format for the kernel to handle; the main load_elf_binary() function spans over 400 lines, and the ELF support code is more than four times as big as the code that supports the old a.out format.&lt;/p&gt;
    &lt;p&gt;An ELF file for an executable program (rather than a shared library or an object file) must always contain a program header table near the start of the file, after the ELF header; each entry in this table provides information that is needed to run the program.&lt;/p&gt;
    &lt;p&gt;The kernel only really cares about three types of program header entries. The first type is the PT_LOAD segment, which describes areas of the new program's running memory. This includes code and data sections that come from the executable file, together with the size of a BSS section. The BSS will be filled with zeroes (thus only its length needs to be stored in the executable file). The second entry of interest is a PT_INTERP entry, which identifies the run-time linker needed to assemble the complete program; for the time being, we'll assume a statically linked ELF binary and return to dynamic linking later. Finally, the kernel also gets a single bit of information from a PT_GNU_STACK entry, if present, which indicates whether the program's stack should be made executable or not.&lt;/p&gt;
    &lt;p&gt;(This article only focuses on what's needed to load an ELF program, rather than exploring all of the details of the format. The interested reader can find much more information via the references linked from Wikipedia's ELF article or by exploring real binaries with the objdump tool.)&lt;/p&gt;
    &lt;head rend="h4"&gt;Processing ELF binaries&lt;/head&gt;
    &lt;p&gt;Loading an ELF binary is handled by the load_elf_binary() function, which starts by examining the ELF header to check that the file in question does indeed look like a supported ELF format. The handler needs the whole of the ELF program header, whether it is within the first 128 bytes read into buf in linux_binprm or not, so it needs to read it into some scratch space.&lt;/p&gt;
    &lt;p&gt;The code now loops over the program header entries, checking for an interpreter (PT_INTERP) and whether the program's stack should be executable (from the PT_GNU_STACK entry). With this preparation done, the code needs to initialize those attributes of the new program that are not inherited from the old program; the Single UNIX Specification version 3 (SUSv3) exec specification describes most of the required behavior (and table 28-4 of The Linux Programming Interface gives an excellent summary of the attributes involved).&lt;/p&gt;
    &lt;p&gt;The process of setting up the new program starts with a call to flush_old_exec(), which clears up state in the kernel that refers to the previous program. Any other threads of the old program are killed so the new program starts with a single thread, and the signal-handling information for the process is unshared so that it can be safely altered later. Any pending POSIX timers for the old program are cleared, and the location of the executable file for the program (visible at /proc/pid/exe) is updated. The virtual memory mappings for the old program are released, which also kills any pending asynchronous I/O operations and frees any uprobes. Finally, the personality of the process is updated to remove any features that could affect security, as previously recorded in the per_clear field in linux_binprm. The main handler code also calls the SET_PERSONALITY() macro to set the thread flags appropriately for a new 64-bit program.&lt;/p&gt;
    &lt;p&gt;A corresponding call to setup_new_exec() now sets up the kernel's internal state for the new program. This function starts by determining whether the new program can generate a core dump (or have ptrace() attach to it); this is disabled by default for setuid or setgid programs. Dumping is also disabled when the program file isn't readable under the current credentials. A call to __set_task_comm() sets the current task's comm field to the basename of the originally invoked filename; this value is used as a thread name, and is accessible to user space via the PR_GET_NAME and PR_SET_NAME prctl() operations. A call to flush_signal_handlers() sets up the signal handlers for the new program; any signal handler that's not SIG_IGN gets set to the default SIG_DFL value (so any ignored signals are inherited by the new program). Finally, a call to do_close_on_exec() closes all of the old program's file descriptors that have the O_CLOEXEC flag set; other file descriptors will be inherited by the new program.&lt;/p&gt;
    &lt;p&gt;The virtual memory for the new program also needs to be set up. To improve security (by helping protect against stack overflow attacks), the highest address for the stack is typically moved downward by a random offset. An initial call to setup_arg_pages() then sets up the kernel's memory tracking structures, and adjusts for the new location of the stack. The code loops through all of the PT_LOAD segments in the program file and maps them into the process's address space, setting up the new program's memory layout. It then sets up zero-filled pages that correspond to the program's BSS segment. Also, additional special pages — such as the virtual dynamic shared object (vDSO) pages — need to be mapped, which is taken care of by a call to arch_setup_additional_pages(). An empty page may also be mapped at the zero address in the program's address space for backward-compatibility reasons (old SVr4 programs apparently assume that reading from a NULL pointer would return zeros rather than SIGSEGV).&lt;/p&gt;
    &lt;p&gt;Next, the credentials for the new program are set up via a call to install_exec_creds(). This function lets any active Linux Security Module (LSM) know about the change in credentials (through the bprm_committing_creds and bprm_committed_creds LSM hooks), and the inner commit_creds() function performs the assignment.&lt;/p&gt;
    &lt;p&gt;The final preparation for running the new program is to set up the rest of its stack (in its new randomized location), by calling the create_elf_tables() function; this is described in a separate section below.&lt;/p&gt;
    &lt;p&gt;All of the preparation has now been done, and the new program can be launched. An earlier article explained how the kernel's system_call entry point pushes the user-space CPU registers to the kernel stack before entering the main kernel code, and these registers are correspondingly restored when the system call completes. The area of the stack that holds the saved registers is cast to a pt_regs structure, and the saved user-space CPU registers can thus be overwritten with suitable values (zeroes) for the start of the new program. The call to the start_thread() function also sets the saved instruction pointer to the entry point of the program (or the dynamic linker), and the saved stack pointer to the current top of the stack (from the p field in linux_binprm). The zero return code from the handler indicates success, and the execve() syscall returns to user space — but to a completely different user space, where the process's memory has been remapped, and the restored registers have values that start the execution of the new program.&lt;/p&gt;
    &lt;head rend="h4"&gt;Populating the stack: the auxiliary vector, environment and arguments&lt;/head&gt;
    &lt;p&gt;The create_elf_tables() function adds more information to the new program's stack, below the argument and environment information added by the generic code, as two distinct chunks. An initial call to arch_align_stack() rounds down the existing stack position to a 16-byte boundary, and may also further randomize the stack position downward slightly.&lt;/p&gt;
    &lt;p&gt;The first collection of information forms the ELF auxiliary vector, a collection of (id, value) pairs that describe useful information about the program being run and the environment it is running in, communicated from the kernel to user space. To build this vector, the handler code first needs to push onto the stack any information that doesn't fit within a 64-bit value; for x86_64 this is a platform capability description (the string "x86_64") and 16 bytes of random data (to help seed user-space random number generators).&lt;/p&gt;
    &lt;p&gt;Next, the code assembles the (id, value) pairs for the auxiliary vector in the saved_auxv space within the mm_struct. An LWN article from Michael Kerrisk describes the contents of this vector, so here we just mention a few interesting entries:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The (architecture-specific) first entry in the vector is the AT_SYSINFO_EHDR value for x86_64; this indicates the location of the vDSO page, as referenced in an earlier article.&lt;/item&gt;
      &lt;item&gt;The AT_PLATFORM value is the location of the "x86_64" platform capability description pushed earlier.&lt;/item&gt;
      &lt;item&gt;The AT_RANDOM value is the location of the random data pushed earlier.&lt;/item&gt;
      &lt;item&gt;The AT_EXECFN value holds the location of the program filename that was pushed as the very first thing on the stack (and whose location was stored in the exec field of linux_binprm), above the arguments and environment values.&lt;/item&gt;
      &lt;item&gt;The AT_ENTRY value holds the entry point for the text segment, i.e. where program execution should start.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Once this auxiliary vector is created, the code now assembles the rest of the new program's stack. The required space is calculated, and then the entries are inserted from low addresses to higher ones:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The argc argument count is inserted first.&lt;/item&gt;
      &lt;item&gt;An array of argument pointers is inserted next, ending with a NULL pointer. This is where main()'s argv will eventually point.&lt;/item&gt;
      &lt;item&gt;An array of environment pointers is inserted next, ending with a NULL pointer. This is where environ will point.&lt;/item&gt;
      &lt;item&gt;The auxiliary vector is put at the highest address, just below the additional values it references.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Taken together, the top of the new program's address space will have contents like the following example (this page has a similar example):&lt;/p&gt;
    &lt;quote&gt;------------------------------------------------------------- 0x7fff6c845000 0x7fff6c844ff8: 0x0000000000000000 _ 4fec: './stackdump\0' &amp;lt;------+ env / 4fe2: 'ENVVAR2=2\0' | &amp;lt;----+ \_ 4fd8: 'ENVVAR1=1\0' | &amp;lt;---+ | / 4fd4: 'two\0' | | | &amp;lt;----+ args | 4fd0: 'one\0' | | | &amp;lt;---+ | \_ 4fcb: 'zero\0' | | | &amp;lt;--+ | | 3020: random gap padded to 16B boundary | | | | | | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -| | | | | | 3019: 'x86_64\0' &amp;lt;-+ | | | | | | auxv 3009: random data: ed99b6...2adcc7 | &amp;lt;-+ | | | | | | data 3000: zero padding to align stack | | | | | | | | . . . . . . . . . . . . . . . . . . . . . . . . . . .|. .|. .| | | | | | 2ff0: AT_NULL(0)=0 | | | | | | | | 2fe0: AT_PLATFORM(15)=0x7fff6c843019 --+ | | | | | | | 2fd0: AT_EXECFN(31)=0x7fff6c844fec ------|---+ | | | | | 2fc0: AT_RANDOM(25)=0x7fff6c843009 ------+ | | | | | ELF 2fb0: AT_SECURE(23)=0 | | | | | auxiliary 2fa0: AT_EGID(14)=1000 | | | | | vector: 2f90: AT_GID(13)=1000 | | | | | (id,val) 2f80: AT_EUID(12)=1000 | | | | | pairs 2f70: AT_UID(11)=1000 | | | | | 2f60: AT_ENTRY(9)=0x4010c0 | | | | | 2f50: AT_FLAGS(8)=0 | | | | | 2f40: AT_BASE(7)=0x7ff6c1122000 | | | | | 2f30: AT_PHNUM(5)=9 | | | | | 2f20: AT_PHENT(4)=56 | | | | | 2f10: AT_PHDR(3)=0x400040 | | | | | 2f00: AT_CLKTCK(17)=100 | | | | | 2ef0: AT_PAGESZ(6)=4096 | | | | | 2ee0: AT_HWCAP(16)=0xbfebfbff | | | | | 2ed0: AT_SYSINFO_EHDR(33)=0x7fff6c86b000 | | | | | . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . | | | | | 2ec8: environ[2]=(nil) | | | | | 2ec0: environ[1]=0x7fff6c844fe2 ------------------|-+ | | | 2eb8: environ[0]=0x7fff6c844fd8 ------------------+ | | | 2eb0: argv[3]=(nil) | | | 2ea8: argv[2]=0x7fff6c844fd4 ---------------------------|-|-+ 2ea0: argv[1]=0x7fff6c844fd0 ---------------------------|-+ 2e98: argv[0]=0x7fff6c844fcb ---------------------------+ 0x7fff6c842e90: argc=3&lt;/quote&gt;
    &lt;p&gt;Note that although there are two randomizations in the stack layout (the position of the top of memory and the size of the gap between the argument values and the auxiliary vector), the newly running program can still figure out where all of the information on the stack is. The SP register tells the program where the top of the stack is (i.e. the lowest address), and the command-line arguments are arranged upwards in memory from there, with a NULL pointer to mark where they end. The environment values are found next, again with a NULL pointer to terminate, and the auxiliary vector is found at the next consecutive addresses, closing with an AT_NULL ID. The values found within all of this information give the addresses of the argument strings, environment strings, and auxiliary data values, so no explicit information about the size of the random gap is needed.&lt;/p&gt;
    &lt;head rend="h4"&gt;Dynamically linked programs&lt;/head&gt;
    &lt;p&gt;So far we've assumed the program being executed is statically linked and skipped over steps that would be triggered by the presence of a PT_INTERP entry in the ELF program header. However, most programs are dynamically linked, meaning that required shared libraries have to be located and linked at run-time. This is performed by the runtime linker (typically something like /lib64/ld-linux-x86-64.so.2), and the identity of this linker is specified by the PT_INTERP program header entry.&lt;/p&gt;
    &lt;p&gt;To cope with a runtime linker, the ELF handler first reads the ELF interpreter file name into scratch space, then opens the executable file with open_exec(). The first 128 bytes of the file are read into the bprm-&amp;gt;buf scratch area, replacing the contents of the original program file and allowing access to the ELF header of the interpreter program — which must therefore be an ELF binary itself, rather than any other format.&lt;/p&gt;
    &lt;p&gt;After the program code has been loaded into memory as described previously, the ELF handler also loads the ELF interpreter program into memory with load_elf_interp(). This process is similar to the process of loading the original program: the code checks the format information in the ELF header, reads in the ELF program header, maps all of the PT_LOAD segments from the file into the new program's memory, and leaves room for the interpreter's BSS segment.&lt;/p&gt;
    &lt;p&gt;The execution start address for the program is also set to be the entry point of the interpreter, rather than that of the program itself. When the execve() system call completes, execution then begins with the ELF interpreter, which takes care of satisfying the linkage requirements of the program from user space — finding and loading the shared libraries that the program depends on, and resolving the program's undefined symbols to the correct definitions in those libraries. Once this linkage process is done (which relies on a much deeper understanding of the ELF format than the kernel has), the interpreter can start the execution of the new program itself, at the address previously recorded in the AT_ENTRY auxiliary value.&lt;/p&gt;
    &lt;head rend="h4"&gt;Compatibility with other architectures&lt;/head&gt;
    &lt;p&gt;As described previously, a modern 64-bit (x86_64) Linux system can also support running 32-bit binaries of two types: normal 32-bit binaries (x86_32), and x32 ABI programs (which can make use of additional x86_64 registers). So how does the kernel support these binaries?&lt;/p&gt;
    &lt;p&gt;The key file that provides support for these formats is compat_binfmt_elf.c, which is included in the kernel when the CONFIG_COMPAT_BINFMT_ELF config option is set. This file didn't appear in our earlier list of places that register binary handlers, because the file contains almost no code of its own. Instead, it includes the main binfmt_elf.c ELF handler code (using #include), and uses the preprocessor to redirect various internal functions and values to 32-bit compatibility versions. Other than these changes, the format handler therefore behaves the same as the normal ELF handler described above.&lt;/p&gt;
    &lt;p&gt;One set of changes uses 32-bit versions of the structures describing the layout of the ELF file; similarly, the appropriate constant values for 32-bit binaries are used, which ensures that the compatibility handler only claims support for the relevant ELF binary types. In particular, the elf_check_arch() call is replaced with a compat_elf_check_arch() version that checks for either x86_32 or (if configured) x32.&lt;/p&gt;
    &lt;p&gt;The preprocessor changes also redirect some of the inner functionality of the ELF handler code. The invocation of the SET_PERSONALITY() macro is redirected to set_personality_ia32() so that the relevant thread flags for the 32-bit architecture are set and, similarly, the arch_setup_additional_pages() function is replaced with a version that sets up a 32-bit vDSO. More significantly, the start_thread() function is replaced with compat_start_thread(), which maps to start_thread_ia32(). This alters the arguments to the inner start_thread_common() function so that the saved segment registers are initialized differently than for x86_64 binaries (and the ELF_PLAT_INIT() macro is also adjusted to match).&lt;/p&gt;
    &lt;head rend="h4"&gt;Epilogue&lt;/head&gt;
    &lt;p&gt;Every program that runs on a Linux system passes through the portal of execve(); as such it's a key piece of kernel functionality that's worth understanding in detail. Although the kernel natively supports script and other machine-code format programs, program execution on a modern Linux system eventually involves running an ELF binary. ELF is a complicated format, but fortunately the kernel can ignore most of that complexity — it only needs to understand just enough ELF to load segments into memory, and to invoke a user space run-time linker program to finish the job of assembling a complete running program.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Index entries for this article&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Kernel&lt;/cell&gt;
        &lt;cell&gt;exec()&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;GuestArticles&lt;/cell&gt;
        &lt;cell&gt;Drysdale, David&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; Posted Feb 5, 2015 19:24 UTC (Thu) by Tara_Li (guest, #26706) [Link] (4 responses) http://www.muppetlabs.com/~breadbox/software/tiny/teensy.... The creation of a 45 byte ELF executable - admitted, all it does is return 42, but it *does* execute. Posted Feb 6, 2015 2:14 UTC (Fri) by vonbrand (subscriber, #4458) [Link] That one contains a nice discussion of checks that aren't made when launching an executable... any possible screwups by not checking? Posted Feb 6, 2015 13:34 UTC (Fri) by jzbiciak (guest, #5246) [Link] That was a fun read. :-) Posted Feb 7, 2015 14:05 UTC (Sat) by felixfix (subscriber, #242) [Link] (1 responses) Posted Feb 16, 2015 16:04 UTC (Mon) by bokr (guest, #58369) [Link] http://en.wikipedia.org/wiki/LGP-30 Likewise, the RPC-4000 was manufactured by Librascope, Posted Feb 7, 2015 4:01 UTC (Sat) by felixfix (subscriber, #242) [Link] (2 responses) Then I learned machine language for it, and delighted in knowing that 11 was add, 12 was subtract, while 21 was add immediate and 22 was subtract immediate (just reaching; those may not be correct!). My teacher and I began a contest to see who could get the most interesting program on a single 80 column card. I think he gave up when I got 120 digits of instruction with various nefarious overlaps. The program printed out THIMK over and over on the console typewriter. One sense switch would bypass a delay loop; a second halted the program. It couldn't print THINK because that M was the halt instruction. I think I learned for more about useful programming in that summer than any class since. Posted Feb 7, 2015 13:18 UTC (Sat) by vonbrand (subscriber, #4458) [Link] I remember the IBM 1620 had no proper FORTRAN II, but some cut-down dialect called PDQ FORTRAN. Posted Sep 8, 2018 2:23 UTC (Sat) by Since1969 (guest, #127103) [Link] 1* were the immediate instructions; 2* were the "storage-to-storage" ones. My first program was computing Hero's Formula using "FORTRAN with Format". Later we got Load and Go FORTRAN, which saved a lot of trees. But after a few FORTRAN programs, I learned SPS (assembler). One of the coolest tricks was coding loops of different lengths which produced tones in various pitches in a nearby FM radio. Great machine. Posted Feb 8, 2015 18:50 UTC (Sun) by kleptog (subscriber, #1183) [Link] Posted Feb 12, 2015 16:52 UTC (Thu) by nye (subscriber, #51576) [Link] (1 responses) I have an instinctive reaction that this sort of behaviour should have to be explicitly enabled via sysctl or something - it seems to violate the principle of least astonishment in a way that could have surprising implications, including security ones. Am I way off base here? Certainly I am working from a position of abject ignorance. Posted Feb 12, 2015 17:20 UTC (Thu) by drysdale (guest, #95971) [Link] Posted Feb 16, 2015 17:26 UTC (Mon) by nix (subscriber, #2304) [Link] &lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head/&gt; There's also The Story of Mel. &lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;LGP-30&lt;/head&gt;&lt;lb/&gt; deserves more credit than "The Story of Mel" gives.&lt;lb/&gt; which had become a division of General Precision by then, IIRC.&lt;lb/&gt; (I started work at Librascope Sept '59, and those were the&lt;lb/&gt; computers I cut my teeth on. It's been interesting -- and still is ;-)&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;lb/&gt; &amp;gt;space for backward-compatibility reasons (old SVr4 programs apparently assume&lt;lb/&gt; &amp;gt;that reading from a NULL pointer would return zeros rather than SIGSEGV).&lt;head/&gt; That behaviour does need to be explicitly enabled via the personality() syscall; of the pre-defined personality values, only PER_SRV4 and PER_UW7 set the MMAP_PAGE_ZERO bit that controls this behaviour. (The bit is also explicitly cleared when running a setuid/setgid binary.) &lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;head&gt;How programs get run: ELF binaries&lt;/head&gt;&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45706938</guid><pubDate>Sat, 25 Oct 2025 21:03:39 +0000</pubDate></item><item><title>D2: Diagram Scripting Language</title><link>https://d2lang.com/tour/intro/</link><description>&lt;doc fingerprint="14eb1b5921af8090"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;D2 Tour&lt;/head&gt;
    &lt;p&gt;D2 is a diagram scripting language that turns text to diagrams. It stands for Declarative Diagramming. Declarative, as in, you describe what you want diagrammed, it generates the image.&lt;/p&gt;
    &lt;p&gt;For example, download the CLI, create a file named &lt;code&gt;input.d2&lt;/code&gt;, copy paste the following,
run this command, and you get the image below.&lt;/p&gt;
    &lt;head rend="h2"&gt;Using the CLI watch modeâ&lt;/head&gt;
    &lt;p&gt;You can finish this tour in about 5-10 minutes, and at the end, there's a cheat sheet you can download and refer to. If you want just the bare essentials, Getting Started takes ~2 mins.&lt;/p&gt;
    &lt;p&gt;The source code for D2 is hosted here: https://github.com/terrastruct/d2.&lt;/p&gt;
    &lt;p&gt;The source code for these docs are here: https://github.com/terrastruct/d2-docs.&lt;/p&gt;
    &lt;p&gt;For each D2 snippet, you can hover over it to open directly in the Playground and tinker.&lt;/p&gt;
    &lt;p&gt;There's some exceptions like snippets that use imports.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45707539</guid><pubDate>Sat, 25 Oct 2025 22:40:00 +0000</pubDate></item><item><title>The Linux Boot Process: From Power Button to Kernel</title><link>https://www.0xkato.xyz/linux-boot/</link><description>&lt;doc fingerprint="a2b71910e515bfcd"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;The Linux Boot Process: From Power Button to Kernel&lt;/head&gt;- 15 mins&lt;head rend="h2"&gt;Part 1 — From power button to the kernel’s first breath&lt;/head&gt;&lt;p&gt;You press the power button. A second later a wall of text scrolls by, or a logo fades in, and eventually Linux appears. What happens in between is not magic. It is a careful handshake between tiny programs and a very literal CPU. This part follows that handshake until the very first line of C code inside the Linux kernel runs.&lt;/p&gt;&lt;head rend="h3"&gt;The very first instruction&lt;/head&gt;&lt;p&gt;When power stabilizes, the CPU resets itself to a tiny, old‑fashioned mode called real mode. Real mode dates back to the original 8086 chip. The rules are simple on purpose. Memory addresses are built from two values the CPU keeps in special fast storage called registers. You combine a segment and an offset like this:&lt;/p&gt;&lt;p&gt;&lt;code&gt;physical_address = (segment &amp;lt;&amp;lt; 4) + offset&lt;/code&gt;&lt;/p&gt;&lt;p&gt;If you see numbers like &lt;code&gt;0xFFFFFFF0&lt;/code&gt;, that is hexadecimal. Hex is base 16. We write &lt;code&gt;0x&lt;/code&gt; in front to make that clear. &lt;code&gt;0x10&lt;/code&gt; is 16 in everyday counting. &lt;code&gt;0x100000&lt;/code&gt; is 1 megabyte. Hex lines up nicely with how hardware stores bits, which is why you see it everywhere in low‑level code.&lt;/p&gt;&lt;p&gt;Right after reset the CPU jumps to a special address called the reset vector at &lt;code&gt;0xFFFFFFF0&lt;/code&gt;. Think of it as a permanent bookmark that says “start here.” There is room for almost nothing at that address, so manufacturers put a short jump there that passes control to the firmware on your motherboard.&lt;/p&gt;&lt;p&gt;Tiny explainer: register A register is a tiny slot inside the CPU. It holds a number the CPU is using right now. Names like CS and IP are register names. CS means “code segment,” which marks the current neighborhood for instructions. IP means “instruction pointer,” which marks which instruction comes next.&lt;/p&gt;&lt;head rend="h3"&gt;BIOS and UEFI&lt;/head&gt;&lt;p&gt;The firmware is a small starter program baked into your board.&lt;/p&gt;&lt;p&gt;BIOS stands for Basic Input Output System. It is the older style. BIOS does a quick health check called POST, looks at the boot order, and tries each device. If it finds a disk whose very first 512‑byte sector ends with the marker bytes &lt;code&gt;0x55&lt;/code&gt; and &lt;code&gt;0xAA&lt;/code&gt;, it treats that device as bootable. BIOS copies that sector to memory at &lt;code&gt;0x7C00&lt;/code&gt; and jumps there. That sector is tiny, so it usually knows only how to load the next, larger piece.&lt;/p&gt;&lt;p&gt;UEFI is the modern replacement. It still starts the machine, but it understands filesystems directly and can load bigger boot programs without the old “first sector” dance. UEFI also passes richer information to the operating system. Different path, same goal: hand control to a boot program that can load Linux.&lt;/p&gt;&lt;head rend="h3"&gt;Meet the bootloader&lt;/head&gt;&lt;p&gt;The bootloader is the usher that gets the operating system into place. GRUB is a popular choice on PCs. It reads its configuration, shows a menu if you installed one, and loads the Linux kernel into memory. The Linux kernel file actually contains two things:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;a small setup program that still runs in real mode&lt;/item&gt;&lt;item&gt;the larger compressed kernel that will be unpacked a little later&lt;/item&gt;&lt;/list&gt;&lt;p&gt;GRUB also fills out a small structure called the setup header with useful facts: where it placed the kernel, where the command line lives, where the initrd is if you have one. Then it jumps into the setup program.&lt;/p&gt;&lt;head rend="h3"&gt;The setup program makes a safe room&lt;/head&gt;&lt;p&gt;Before Linux can do anything interesting, the setup code creates a predictable workspace.&lt;/p&gt;&lt;p&gt;It lines up the segment registers so memory copies behave the same way every time. Names you’ll see here are CS for code, DS for data, and SS for stack. It also clears a single CPU bit called the “direction flag” so copy instructions move forward through memory.&lt;/p&gt;&lt;p&gt;It creates a stack. The stack is a last‑in, first‑out workbench where functions store temporary values. SS says which segment the stack uses. SP is the pointer to the current top of the stack.&lt;/p&gt;&lt;p&gt;It clears a region called BSS. BSS is where global variables that must start as zero live. C code assumes BSS is zero. The setup program writes zeros over that entire span to keep that promise.&lt;/p&gt;&lt;p&gt;If you passed &lt;code&gt;earlyprintk&lt;/code&gt; on the kernel command line, the setup code also programs the serial port so it can print very early messages. This is useful when graphics are not ready yet.&lt;/p&gt;&lt;p&gt;Finally the setup program asks the firmware “how much usable RAM do we really have and where are the holes.” On old BIOS this is a call people often nickname e820, which returns a simple list of usable and reserved ranges. The kernel will use that list to avoid stepping on the firmware’s toes.&lt;/p&gt;&lt;p&gt;With that done, the setup code calls its first C function, which is literally named &lt;code&gt;main&lt;/code&gt;. We are still in the small old real mode at this point. The next job is to leave it.&lt;/p&gt;&lt;p&gt;Tiny explainer: interrupt An interrupt is a hardware or software “excuse me” that pauses what the CPU is doing and runs a small handler for something urgent. A timer tick is an interrupt. A key press is an interrupt. There are two flavors here. Maskable interrupts follow your rules and can be temporarily blocked so they do not fire during delicate moments. Non‑maskable interrupts, often called NMI, always cut in because they usually report serious hardware issues. We will control both while switching modes so nothing surprises us halfway through.&lt;/p&gt;&lt;head rend="h2"&gt;Part 2 — Leaving real mode, stepping through 32‑bit land, and arriving in 64‑bit&lt;/head&gt;&lt;p&gt;Modern Linux on PCs runs in long mode, which is the 64‑bit mode of x86_64. You cannot jump there directly from real mode. The path is real mode to protected mode and then protected mode to long mode. This part covers that path and explains the vocabulary on the way.&lt;/p&gt;&lt;head rend="h3"&gt;Protected mode, without the jargon haze&lt;/head&gt;&lt;p&gt;Protected mode is the 32‑bit world introduced to get past the limits of the 1980s. It adds two central ideas.&lt;/p&gt;&lt;p&gt;The Global Descriptor Table, or GDT, is a short list of segment descriptions. A description says “this segment starts here, covers this much, and is allowed to do these things.” Linux keeps this simple. It uses a flat model, which means the base is zero and the size covers the whole 32‑bit space. When everything is flat, addresses look like plain numbers again.&lt;/p&gt;&lt;p&gt;The Interrupt Descriptor Table, or IDT, is a directory of “phone numbers” for emergency calls. If an interrupt arrives, the CPU looks up the entry in the IDT and jumps to the handler listed there. During the switch we load a tiny placeholder IDT because we are about to block interrupts anyway. The full‑featured IDT arrives later once the real kernel is in charge.&lt;/p&gt;&lt;head rend="h3"&gt;The careful switch&lt;/head&gt;&lt;p&gt;The setup code turns off the noisy parts first. It disables maskable interrupts with a single instruction. It quiets the old PIC chips so hardware interrupts are fully blocked for a moment. It opens the A20 line. This is a historical quirk. Early PCs made addresses wrap at 1 megabyte. Opening A20 removes that wrap so higher addresses work like you expect. It resets the math coprocessor so the floating point state is clean.&lt;/p&gt;&lt;p&gt;Then it loads a tiny GDT with only what we need right now and a tiny IDT. Finally it sets a single bit named PE in a control register named CR0 and performs a far jump. That jump reloads the code segment from the GDT and locks in protected mode. It reloads the data and stack segments and fixes the stack pointer to match the new flat world.&lt;/p&gt;&lt;p&gt;We are now in 32‑bit protected mode.&lt;/p&gt;&lt;p&gt;Tiny explainer: control registers The CPU has a few special registers for on off switches. CR0 turns on protected mode. CR3 holds the address of the top of the page tables, which we will need in a second. CR4 enables a set of extended features such as larger page table entries.&lt;/p&gt;&lt;head rend="h3"&gt;Why we still are not done&lt;/head&gt;&lt;p&gt;Linux wants 64‑bit. That is long mode. Two things are needed.&lt;/p&gt;&lt;p&gt;Paging must be on. Paging is the translator between virtual addresses and physical addresses. Programs use virtual addresses. The hardware reads and writes physical memory. Page tables map one to the other in fixed‑size chunks called pages. On PCs a normal page is 4 kilobytes. There are also bigger pages. Early in boot the kernel uses 2 megabyte pages to describe low memory quickly.&lt;/p&gt;&lt;p&gt;A single bit named LME in a special register called EFER must be set to allow long mode. EFER is a model specific register, which is a fancy way of saying “a register used for certain CPU features.”&lt;/p&gt;&lt;head rend="h3"&gt;Building just enough paging&lt;/head&gt;&lt;p&gt;The 32‑bit prologue builds a small set of page tables that say “for this region, virtual equals physical.” That is called an identity map. It is enough to flip paging on safely.&lt;/p&gt;&lt;p&gt;To make this work the code enables PAE in CR4 so larger entries are used. It builds a minimal set of tables that cover low memory in 2 megabyte chunks. It writes the address of the top table into CR3. Paging is now ready.&lt;/p&gt;&lt;p&gt;Finally it sets LME in EFER and performs a far return into a label that is written as 64‑bit code. Long mode is now active. Segments are still “flat,” but addresses and registers are 64‑bit wide.&lt;/p&gt;&lt;p&gt;Why all the extra care Switching modes while a live system runs is like changing a car tire while rolling. The code blocks interruptions, prepares the minimum needed tables, flips the bit, and only then invites interrupts back. Slow and steady prevents weird half‑switched states.&lt;/p&gt;&lt;head rend="h2"&gt;Part 3 — Unpacking the real kernel, fixing addresses, and why Linux sometimes moves itself&lt;/head&gt;&lt;p&gt;We have a 64‑bit CPU with paging on and a compressed kernel in memory. Now the small 64‑bit stub does the practical work: get out of the way if needed, unpack the kernel, fix addresses if the kernel is not at its default spot, and jump.&lt;/p&gt;&lt;head rend="h3"&gt;Clearing a path and setting safety nets&lt;/head&gt;&lt;p&gt;The stub first figures out where it is actually running. Early code is linked as if it lived at address zero and then computes its real base at runtime. If the planned destination for the decompressed kernel would overlap the stub, it copies itself to a safe place.&lt;/p&gt;&lt;p&gt;It clears its own BSS so global state starts clean.&lt;/p&gt;&lt;p&gt;It loads a minimal IDT with two handlers. One for page fault and one for NMI. A page fault happens when the CPU cannot find a mapping for a virtual address it just tried to use. In our early identity‑mapped world, the tiny page fault handler can add the missing mapping on the fly and continue. The NMI handler is there so a non‑maskable interrupt does not crash the machine while we are still bringing things up.&lt;/p&gt;&lt;p&gt;It also builds identity mappings for the regions it will touch next. That includes the future home of the kernel, the small boot parameters page the bootloader filled in, and the command line buffer.&lt;/p&gt;&lt;head rend="h3"&gt;Decompressing Linux…&lt;/head&gt;&lt;p&gt;A C function commonly named &lt;code&gt;extract_kernel&lt;/code&gt; takes over. It sets aside a tiny heap for temporary buffers, prints the classic line, and unpacks the kernel using whatever algorithm the kernel was built with. gzip, xz, zstd, lzo, and others all plug into the same wrapper.&lt;/p&gt;&lt;p&gt;When the bytes are out, the decompressor reads the kernel’s ELF headers. ELF, short for Executable and Linkable Format, is both a file format and a map. It says which chunks are code, which are data, and exactly where each chunk wants to live. The decompressor copies each chunk where it belongs.&lt;/p&gt;&lt;p&gt;If the kernel is being loaded at a different address than it was built for, the decompressor applies relocations. A relocation is a small fix‑up that adjusts a pointer or an instruction that contains an address. The decompressor walks a list of these and patches each place so it points to the right spot in the address space we are actually using.&lt;/p&gt;&lt;p&gt;When everything is in place, the decompressor returns the entry point of the real kernel and jumps there, passing a pointer to the boot parameters. From that moment you are in the full kernel. The first function you meet is &lt;code&gt;start_kernel&lt;/code&gt;, and the big initialization begins.&lt;/p&gt;&lt;head rend="h3"&gt;Why the kernel sometimes moves itself on purpose&lt;/head&gt;&lt;p&gt;You may see kASLR mentioned in kernel logs. That stands for Kernel Address Space Layout Randomization. The idea is simple. If attackers do not know where the kernel lives in memory, certain attacks get a lot harder.&lt;/p&gt;&lt;p&gt;Early in boot, if kASLR is enabled, the decompressor chooses two “bases” at random:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;a physical base, which is where the bytes will live in RAM&lt;/item&gt;&lt;item&gt;a virtual base, the starting virtual address the kernel will use once full paging is set up&lt;/item&gt;&lt;/list&gt;&lt;p&gt;How does it choose without breaking anything&lt;/p&gt;&lt;p&gt;It builds a do not touch list. That includes the decompressor itself, the compressed image, the initial ramdisk, the boot parameters page, and the command line buffer. It can also include ranges you reserve with a &lt;code&gt;memmap=&lt;/code&gt; option on the command line.&lt;/p&gt;&lt;p&gt;It scans the memory map from firmware to find large free regions. For each free region it counts how many aligned “slots” of the right size would fit. It draws a random number using the best early entropy source it has. On modern CPUs that might be a hardware random instruction. It reduces the number to the total number of slots and picks the matching slot. That becomes the physical base. The virtual base is chosen the same way, but within the kernel’s virtual address window.&lt;/p&gt;&lt;p&gt;If nothing suitable exists, the code falls back to the default addresses and prints a small warning. If you pass &lt;code&gt;nokaslr&lt;/code&gt; on the command line, the randomization step is skipped by design.&lt;/p&gt;&lt;head rend="h2"&gt;A quick glossary you can bookmark&lt;/head&gt;&lt;p&gt;Hexadecimal. Base 16 numbers written with &lt;code&gt;0x&lt;/code&gt;. &lt;code&gt;0x10&lt;/code&gt; is 16. &lt;code&gt;0x100000&lt;/code&gt; is 1 megabyte. Hex maps cleanly to bits, which is why low‑level code uses it.&lt;/p&gt;&lt;p&gt;Register. A tiny slot inside the CPU that holds a number right now. Examples: CS, DS, SS, IP, SP.&lt;/p&gt;&lt;p&gt;Segment and offset. The two pieces used to build real‑mode addresses. Physical address equals segment times 16 plus offset.&lt;/p&gt;&lt;p&gt;BIOS. Older firmware that starts the machine, checks hardware, and loads the first boot sector into memory.&lt;/p&gt;&lt;p&gt;UEFI. Modern firmware that understands filesystems and loads larger boot programs directly.&lt;/p&gt;&lt;p&gt;Bootloader. The usher that places the kernel in memory and passes facts about the system to it. GRUB is a common one.&lt;/p&gt;&lt;p&gt;Stack. A last‑in, first‑out workbench for functions. SS selects its segment. SP points at the current top.&lt;/p&gt;&lt;p&gt;BSS. A region where global variables that must start as zero live. The kernel setup code clears it before C runs.&lt;/p&gt;&lt;p&gt;Interrupt. A fast “excuse me” from hardware or software. The CPU pauses, runs a small handler, then resumes. Maskable interrupts can be blocked for a moment. NMI cannot.&lt;/p&gt;&lt;p&gt;GDT. Global Descriptor Table. Short list of segment descriptors. Linux sets it to a simple flat model.&lt;/p&gt;&lt;p&gt;IDT. Interrupt Descriptor Table. Directory of interrupt handlers. Early boot uses a minimal one. The full kernel installs the real one later.&lt;/p&gt;&lt;p&gt;A20 line. Historical switch that must be opened to address above 1 megabyte correctly on old PCs.&lt;/p&gt;&lt;p&gt;Protected mode. 32‑bit mode that introduces the GDT and IDT and allows paging.&lt;/p&gt;&lt;p&gt;Long mode. 64‑bit mode on x86_64. Requires paging and a bit named LME set in the EFER register.&lt;/p&gt;&lt;p&gt;Paging. The translator from virtual addresses to physical memory. Implemented with page tables.&lt;/p&gt;&lt;p&gt;Page tables. The data structure that maps virtual pages to physical pages. Early boot uses identity maps. Normal pages are 4 KB. Early boot often uses 2 MB pages to cover ground quickly.&lt;/p&gt;&lt;p&gt;CR0, CR3, CR4. Control registers. CR0 turns on protected mode. CR3 points to the top of the page tables. CR4 enables extended features such as PAE.&lt;/p&gt;&lt;p&gt;EFER. A model‑specific register that holds Long Mode Enable among other bits.&lt;/p&gt;&lt;p&gt;ELF. The kernel’s on‑disk format with a built‑in map of what belongs where.&lt;/p&gt;&lt;p&gt;Relocation. A fix‑up that adjusts addresses when code is loaded at a different base than it was built for.&lt;/p&gt;&lt;p&gt;kASLR. Randomizes kernel base addresses at boot to make exploitation harder.&lt;/p&gt;&lt;p&gt;Feedback is extremely welcomed! You can reach out to me on X @0xkato&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45707658</guid><pubDate>Sat, 25 Oct 2025 23:04:23 +0000</pubDate></item><item><title>A worker fell into a nuclear reactor pool</title><link>https://www.nrc.gov/reading-rm/doc-collections/event-status/event/2025/20251022en?brid=vscAjql9kZL1FfGE7TYHVw#en57996:~:text=TRANSPORT%20OF%20CONTAMINATED%20PERSON%20OFFSITE</link><description>&lt;doc fingerprint="36763bc70a7784d2"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Event Notification Report for October 22, 2025&lt;/head&gt;
    &lt;p&gt;U.S. Nuclear Regulatory Commission&lt;lb/&gt;Operations Center&lt;/p&gt;
    &lt;p&gt;EVENT REPORTS FOR&lt;lb/&gt;10/21/2025 - 10/22/2025 &lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57994&lt;/p&gt;
    &lt;p&gt; Facility: Wolf Creek&lt;lb/&gt;Region: 4 State: KS&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] W-4-LP&lt;lb/&gt;NRC Notified By: Michael J. Payne&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 4 State: KS&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] W-4-LP&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Michael J. Payne&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/21/2025&lt;lb/&gt;Notification Time: 14:37 [ET]&lt;lb/&gt;Event Date: 10/21/2025&lt;lb/&gt;Event Time: 06:10 [CDT]&lt;lb/&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 14:37 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 06:10 [CDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(3)(v)(D) - Accident Mitigation&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(3)(v)(D) - Accident Mitigation&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Vossmar, Patricia (R4DO)&lt;/p&gt;
    &lt;p&gt;Vossmar, Patricia (R4DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; BOTH TRAINS OF CONTROL ROOM EMERGENCY VENTILATION SYSTEM INOPERABLE&lt;lb/&gt;The following is a summary of information provided by the licensee via phone and email:&lt;lb/&gt;On October 21, 2025, at 0610 CDT, while reloading fuel to the reactor vessel, an electrical perturbation initiated a control room ventilation isolation signal (CRVIS). The control room air conditioning system (CRACS) 'A' train A/C unit did not start upon the CRVIS due to a blown fuse. The 'B' CRACS A/C unit was out of service for planned maintenance at the time. At 1020 CDT, the 'A' train CRACS A/C unit was returned to service. Both trains of the control room emergency ventilation system (CREVS) were inoperable for 10 minutes. Due to both trains of CRACS and CREVS being inoperable, this condition is being reported as an eight-hour, non-emergency notification per 10 CFR 50.72(b)(3)(v).&lt;lb/&gt;This condition caused entry into technical specification (TS) limiting condition for operation (LCO) 3.7.10 condition `E' and 3.7.11 condition `D'. Upon discovery of the condition, fuel movement and core alterations were suspended in accordance with the TS LCO required actions.&lt;lb/&gt;There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector was notified.&lt;/p&gt;
    &lt;p&gt;The following is a summary of information provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;On October 21, 2025, at 0610 CDT, while reloading fuel to the reactor vessel, an electrical perturbation initiated a control room ventilation isolation signal (CRVIS). The control room air conditioning system (CRACS) 'A' train A/C unit did not start upon the CRVIS due to a blown fuse. The 'B' CRACS A/C unit was out of service for planned maintenance at the time. At 1020 CDT, the 'A' train CRACS A/C unit was returned to service. Both trains of the control room emergency ventilation system (CREVS) were inoperable for 10 minutes. Due to both trains of CRACS and CREVS being inoperable, this condition is being reported as an eight-hour, non-emergency notification per 10 CFR 50.72(b)(3)(v).&lt;/p&gt;
    &lt;p&gt;This condition caused entry into technical specification (TS) limiting condition for operation (LCO) 3.7.10 condition `E' and 3.7.11 condition `D'. Upon discovery of the condition, fuel movement and core alterations were suspended in accordance with the TS LCO required actions.&lt;/p&gt;
    &lt;p&gt;There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector was notified.&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57996&lt;/p&gt;
    &lt;p&gt; Facility: Palisades&lt;lb/&gt;Region: 3 State: MI&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] CE&lt;lb/&gt;NRC Notified By: Scott Moore&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 3 State: MI&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] CE&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Scott Moore&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/21/2025&lt;lb/&gt;Notification Time: 16:52 [ET]&lt;lb/&gt;Event Date: 10/21/2025&lt;lb/&gt;Event Time: 16:32 [EDT]&lt;lb/&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 16:52 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 16:32 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(3)(xii) - Offsite Medical&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(3)(xii) - Offsite Medical&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Edwards, Rhex (R3DO)&lt;lb/&gt;Grant, Jeffery (IRMOC)&lt;lb/&gt;Phil McKenna (NRR EO)&lt;/p&gt;
    &lt;p&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;p&gt;Grant, Jeffery (IRMOC)&lt;/p&gt;
    &lt;p&gt;Phil McKenna (NRR EO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; TRANSPORT OF CONTAMINATED PERSON OFFSITE&lt;lb/&gt;The following information was provided by the licensee via phone and email:&lt;lb/&gt;"On 10/21/2025 at 0930 EDT an individual fell into the reactor cavity. The reactor cavity is full of water. They ingested some amount of cavity water. The individual was decontaminated by radiation protection personnel but had 300 counts per minute detected in their hair. At 1632 EDT they were sent off site to seek medical attention.&lt;lb/&gt;"This is an eight-hour notification, non-emergency, for the transportation of a contaminated person offsite. This event is reportable in accordance with 10 CFR 50.72(b)(3)(xii).&lt;lb/&gt;"The NRC Resident Inspector has been notified."&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;"On 10/21/2025 at 0930 EDT an individual fell into the reactor cavity. The reactor cavity is full of water. They ingested some amount of cavity water. The individual was decontaminated by radiation protection personnel but had 300 counts per minute detected in their hair. At 1632 EDT they were sent off site to seek medical attention.&lt;/p&gt;
    &lt;p&gt;"This is an eight-hour notification, non-emergency, for the transportation of a contaminated person offsite. This event is reportable in accordance with 10 CFR 50.72(b)(3)(xii).&lt;/p&gt;
    &lt;p&gt;"The NRC Resident Inspector has been notified."&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57997&lt;/p&gt;
    &lt;p&gt; Facility: North Anna&lt;lb/&gt;Region: 2 State: VA&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] W-3-LP,[2] W-3-LP,[3] M-4-LP&lt;lb/&gt;NRC Notified By: Nick Wilson&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 2 State: VA&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] W-3-LP,[2] W-3-LP,[3] M-4-LP&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Nick Wilson&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/21/2025&lt;lb/&gt;Notification Time: 23:10 [ET]&lt;lb/&gt;Event Date: 10/21/2025&lt;lb/&gt;Event Time: 21:08 [EDT]&lt;lb/&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 23:10 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 21:08 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/21/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical 50.72(b)(3)(iv)(A) - Valid Specif Sys Actuation&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical 50.72(b)(3)(iv)(A) - Valid Specif Sys Actuation&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Mckown, Louis J (R2DO)&lt;/p&gt;
    &lt;p&gt;Mckown, Louis J (R2DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;A/R&lt;/cell&gt;
        &lt;cell&gt;Y&lt;/cell&gt;
        &lt;cell&gt;74&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; AUTOMATIC REACTOR TRIP&lt;lb/&gt;The following information was provided by the licensee via email and phone:&lt;lb/&gt;"On October 21, 2025, at 2108 EDT, Unit 1 automatically tripped from 74 percent power due to a negative rate trip. The unit has been stabilized in mode 3 at normal operating temperature and pressure. The reactor trip was uncomplicated, and all control rods fully inserted into the core. This reactor protection system actuation is reportable per 10 CFR 50.72(b)(2)(iv)(B). The auxiliary feedwater pumps actuated as designed because of the reactor trip and is reportable per 10 CFR 50.72(b)(3)(iv)(A) for a valid engineered safety feature (ESF) actuation. Decay heat is being removed via the steam generator power-operated relief valves and Unit 1 is in a normal shutdown electrical lineup. Unit 2 was not affected by this event."&lt;lb/&gt;The NRC Resident Inspector has been notified.&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via email and phone:&lt;/p&gt;
    &lt;p&gt;"On October 21, 2025, at 2108 EDT, Unit 1 automatically tripped from 74 percent power due to a negative rate trip. The unit has been stabilized in mode 3 at normal operating temperature and pressure. The reactor trip was uncomplicated, and all control rods fully inserted into the core. This reactor protection system actuation is reportable per 10 CFR 50.72(b)(2)(iv)(B). The auxiliary feedwater pumps actuated as designed because of the reactor trip and is reportable per 10 CFR 50.72(b)(3)(iv)(A) for a valid engineered safety feature (ESF) actuation. Decay heat is being removed via the steam generator power-operated relief valves and Unit 1 is in a normal shutdown electrical lineup. Unit 2 was not affected by this event."&lt;/p&gt;
    &lt;p&gt;The NRC Resident Inspector has been notified.&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;Event Number: 57990&lt;/p&gt;
    &lt;p&gt; Rep Org: Georgia Radioactive Material Pgm&lt;lb/&gt;Licensee: Piedmont Heart Institute&lt;lb/&gt;Region: 1&lt;lb/&gt;City: Douglasville State: GA&lt;lb/&gt;County:&lt;lb/&gt;License #: GA 1195-2&lt;lb/&gt;Agreement: Y&lt;lb/&gt;Docket:&lt;lb/&gt;NRC Notified By: Avionne Fortner&lt;lb/&gt;HQ OPS Officer: Karen Cotton&lt;/p&gt;
    &lt;p&gt;Licensee: Piedmont Heart Institute&lt;/p&gt;
    &lt;p&gt;Region: 1&lt;/p&gt;
    &lt;p&gt;City: Douglasville State: GA&lt;/p&gt;
    &lt;p&gt;County:&lt;/p&gt;
    &lt;p&gt;License #: GA 1195-2&lt;/p&gt;
    &lt;p&gt;Agreement: Y&lt;/p&gt;
    &lt;p&gt;Docket:&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Avionne Fortner&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Karen Cotton&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/16/2025&lt;lb/&gt;Notification Time: 08:20 [ET]&lt;lb/&gt;Event Date: 10/08/2025&lt;lb/&gt;Event Time: 00:00 [EDT]&lt;lb/&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 08:20 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/08/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 00:00 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Young, Matt (R1DO)&lt;lb/&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt;Young, Matt (R1DO)&lt;/p&gt;
    &lt;p&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt; AGREEMENT STATE REPORT - LEAKING SOURCE&lt;lb/&gt;The following information was provided by the Georgia Radioactive Material Program (the Department) via email:&lt;lb/&gt;"On October 8, 2025, a leaking source was discovered while performing a routine leak test. The leak test revealed more than 0.005 mCi of removable contamination of Cs-137. The definitive cause of the leakage was not determined; however, cracks in the source were noticed through visible inspection. The leaking source was placed in a lead pig. The pig and cleanup waste were placed in a double bagged plastic bag and stored behind lead bricks. Removable contamination surveys were performed at the site of the leaking source and on the hands of the physicists. All areas and personnel were found to be free of removable contamination. The licensee will contact a company for waste disposal and will notify the department when the disposal is completed. The incident was reported to our office on October 10, 2025."&lt;lb/&gt;GA Incident Number: 109&lt;/p&gt;
    &lt;p&gt;The following information was provided by the Georgia Radioactive Material Program (the Department) via email:&lt;/p&gt;
    &lt;p&gt;"On October 8, 2025, a leaking source was discovered while performing a routine leak test. The leak test revealed more than 0.005 mCi of removable contamination of Cs-137. The definitive cause of the leakage was not determined; however, cracks in the source were noticed through visible inspection. The leaking source was placed in a lead pig. The pig and cleanup waste were placed in a double bagged plastic bag and stored behind lead bricks. Removable contamination surveys were performed at the site of the leaking source and on the hands of the physicists. All areas and personnel were found to be free of removable contamination. The licensee will contact a company for waste disposal and will notify the department when the disposal is completed. The incident was reported to our office on October 10, 2025."&lt;/p&gt;
    &lt;p&gt;GA Incident Number: 109&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;Event Number: 57991&lt;/p&gt;
    &lt;p&gt; Rep Org: NV Div of Rad Health&lt;lb/&gt;Licensee: Universal Engineering Services&lt;lb/&gt;Region: 4&lt;lb/&gt;City: Reno State: NV&lt;lb/&gt;County:&lt;lb/&gt;License #: 00-11-14033-01&lt;lb/&gt;Agreement: Y&lt;lb/&gt;Docket:&lt;lb/&gt;NRC Notified By: Corey Creveling&lt;lb/&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt;Licensee: Universal Engineering Services&lt;/p&gt;
    &lt;p&gt;Region: 4&lt;/p&gt;
    &lt;p&gt;City: Reno State: NV&lt;/p&gt;
    &lt;p&gt;County:&lt;/p&gt;
    &lt;p&gt;License #: 00-11-14033-01&lt;/p&gt;
    &lt;p&gt;Agreement: Y&lt;/p&gt;
    &lt;p&gt;Docket:&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Corey Creveling&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/16/2025&lt;lb/&gt;Notification Time: 13:51 [ET]&lt;lb/&gt;Event Date: 10/16/2025&lt;lb/&gt;Event Time: 08:15 [PDT]&lt;lb/&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 13:51 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 08:15 [PDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Vossmar, Patricia (R4DO)&lt;lb/&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;lb/&gt;ILTAB, (EMAIL) (EMAIL)&lt;/p&gt;
    &lt;p&gt;Vossmar, Patricia (R4DO)&lt;/p&gt;
    &lt;p&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt;ILTAB, (EMAIL) (EMAIL)&lt;/p&gt;
    &lt;p&gt; AGREEMENT STATE REPORT - STOLEN GAUGE&lt;lb/&gt;The following information was provided by the Nevada Radiation Control Program via phone and email:&lt;lb/&gt;"The radiation safety officer for Universal Engineering Services, [license number] 00-11-14033-01, reported to the Nevada Radiation Control Program that a portable gauge had been stolen from the back of a pick-up truck (all chains were cut) at a hotel where an employee was staying in Reno, this morning at 0815 PDT. The gauge in question is a Troxler, model 3430, serial number 37385, with americium-241/beryllium neutron sealed source with an activity of 40 mCi, and a cesium-137 sealed source with an activity of 8 mCi. The licensee is filing a report to the Reno Police Department for the stolen gauge and has been reaching out to local pawn shops.&lt;lb/&gt;"Notification is made under 10 CFR 20.2201(a)(1)(i)."&lt;lb/&gt;THIS MATERIAL EVENT CONTAINS A 'Less than Cat 3' LEVEL OF RADIOACTIVE MATERIAL&lt;lb/&gt;Sources that are "Less than IAEA Category 3 sources," are either sources that are very unlikely to cause permanent injury to individuals or contain a very small amount of radioactive material that would not cause any permanent injury. Some of these sources, such as moisture density gauges or thickness gauges that are Category 4, the amount of unshielded radioactive material, if not safely managed or securely protected, could possibly - although it is unlikely - temporarily injure someone who handled it or were otherwise in contact with it, or who were close to it for a period of many weeks. For additional information go to http://www-pub.iaea.org/MTCD/publications/PDF/Pub1227_web.pdf&lt;/p&gt;
    &lt;p&gt;The following information was provided by the Nevada Radiation Control Program via phone and email:&lt;/p&gt;
    &lt;p&gt;"The radiation safety officer for Universal Engineering Services, [license number] 00-11-14033-01, reported to the Nevada Radiation Control Program that a portable gauge had been stolen from the back of a pick-up truck (all chains were cut) at a hotel where an employee was staying in Reno, this morning at 0815 PDT. The gauge in question is a Troxler, model 3430, serial number 37385, with americium-241/beryllium neutron sealed source with an activity of 40 mCi, and a cesium-137 sealed source with an activity of 8 mCi. The licensee is filing a report to the Reno Police Department for the stolen gauge and has been reaching out to local pawn shops.&lt;/p&gt;
    &lt;p&gt;"Notification is made under 10 CFR 20.2201(a)(1)(i)."&lt;/p&gt;
    &lt;p&gt;THIS MATERIAL EVENT CONTAINS A 'Less than Cat 3' LEVEL OF RADIOACTIVE MATERIAL&lt;/p&gt;
    &lt;p&gt;Sources that are "Less than IAEA Category 3 sources," are either sources that are very unlikely to cause permanent injury to individuals or contain a very small amount of radioactive material that would not cause any permanent injury. Some of these sources, such as moisture density gauges or thickness gauges that are Category 4, the amount of unshielded radioactive material, if not safely managed or securely protected, could possibly - although it is unlikely - temporarily injure someone who handled it or were otherwise in contact with it, or who were close to it for a period of many weeks. For additional information go to http://www-pub.iaea.org/MTCD/publications/PDF/Pub1227_web.pdf&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;Event Number: 57992&lt;/p&gt;
    &lt;p&gt; Rep Org: Illinois Emergency Mgmt. Agency&lt;lb/&gt;Licensee: Elmhurst Hospital&lt;lb/&gt;Region: 3&lt;lb/&gt;City: Elmhurst State: IL&lt;lb/&gt;County:&lt;lb/&gt;License #: IL-01612-01&lt;lb/&gt;Agreement: Y&lt;lb/&gt;Docket:&lt;lb/&gt;NRC Notified By: Kimberly Stice&lt;lb/&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt;Licensee: Elmhurst Hospital&lt;/p&gt;
    &lt;p&gt;Region: 3&lt;/p&gt;
    &lt;p&gt;City: Elmhurst State: IL&lt;/p&gt;
    &lt;p&gt;County:&lt;/p&gt;
    &lt;p&gt;License #: IL-01612-01&lt;/p&gt;
    &lt;p&gt;Agreement: Y&lt;/p&gt;
    &lt;p&gt;Docket:&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Kimberly Stice&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Ian Howard&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/16/2025&lt;lb/&gt;Notification Time: 16:35 [ET]&lt;lb/&gt;Event Date: 10/15/2025&lt;lb/&gt;Event Time: 00:00 [CDT]&lt;lb/&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 16:35 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/15/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 00:00 [CDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/16/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;Agreement State&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;Agreement State&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Ziolkowski, Michael (R3DO)&lt;lb/&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt;Ziolkowski, Michael (R3DO)&lt;/p&gt;
    &lt;p&gt;NMSS_EVENTS_NOTIFICATION (EMAIL)&lt;/p&gt;
    &lt;p&gt; AGREEMENT STATE REPORT - UNPLANNED CONTAMINATION&lt;lb/&gt;The following information was provided by the Illinois Emergency Management Agency and Office of Homeland Security (the Agency) via phone and email:&lt;lb/&gt;"The Agency was contacted on 10/15/25 by the radiation safety officer for Elmhurst Hospital (IL-01612-01) to advise of a contamination incident. Reportedly, a vial containing 200 millicuries of Lu-177 was dropped in the facility's hot lab and contaminated a technician. Decontamination efforts are ongoing. Inspectors are headed to the facility to gather additional details and determine the likelihood of exposures exceeding regulatory limits.&lt;lb/&gt;"Based on the information currently available. this matter is a reportable unplanned contamination event under 32 Illinois Administrative Code 340.1220(c)(1). It is reportable within 24 hours, which the licensee met.&lt;lb/&gt;"Additional updates will be provided as they become available."&lt;lb/&gt;Illinois Reference Number: IL250044&lt;/p&gt;
    &lt;p&gt;The following information was provided by the Illinois Emergency Management Agency and Office of Homeland Security (the Agency) via phone and email:&lt;/p&gt;
    &lt;p&gt;"The Agency was contacted on 10/15/25 by the radiation safety officer for Elmhurst Hospital (IL-01612-01) to advise of a contamination incident. Reportedly, a vial containing 200 millicuries of Lu-177 was dropped in the facility's hot lab and contaminated a technician. Decontamination efforts are ongoing. Inspectors are headed to the facility to gather additional details and determine the likelihood of exposures exceeding regulatory limits.&lt;/p&gt;
    &lt;p&gt;"Based on the information currently available. this matter is a reportable unplanned contamination event under 32 Illinois Administrative Code 340.1220(c)(1). It is reportable within 24 hours, which the licensee met.&lt;/p&gt;
    &lt;p&gt;"Additional updates will be provided as they become available."&lt;/p&gt;
    &lt;p&gt;Illinois Reference Number: IL250044&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 57998&lt;/p&gt;
    &lt;p&gt; Facility: Palisades&lt;lb/&gt;Region: 3 State: MI&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] CE&lt;lb/&gt;NRC Notified By: Scott Moore&lt;lb/&gt;HQ OPS Officer: Robert A. Thompson&lt;/p&gt;
    &lt;p&gt;Region: 3 State: MI&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] CE&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Scott Moore&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Robert A. Thompson&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/22/2025&lt;lb/&gt;Notification Time: 08:06 [ET]&lt;lb/&gt;Event Date: 10/22/2025&lt;lb/&gt;Event Time: 04:52 [EDT]&lt;lb/&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 08:06 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 04:52 [EDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(2)(xi) - Offsite Notification&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(2)(xi) - Offsite Notification&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;p&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;N&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; OFFSITE NOTIFICATION&lt;lb/&gt;The following information was provided by the licensee via phone and email:&lt;lb/&gt;"On October 22, 2025, at 0452 EDT, chemistry determined that a report to the State of Michigan, Department of Environment, Great Lakes, and Energy, would be required based on exceeding the National Pollutant Discharge Elimination System permit limit for hydrazine. This exceedance did not exceed any NRC regulations or reporting criteria. This notification is being made solely as a four-hour, non-emergency notification for a notification to another government agency. This event is a 4-hour non-emergency report in accordance with 10 CFR 50.72(b)(2)(xi). There was no impact on the health and safety of the public or plant personnel.&lt;lb/&gt;"The NRC Resident Inspector will be notified."&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;"On October 22, 2025, at 0452 EDT, chemistry determined that a report to the State of Michigan, Department of Environment, Great Lakes, and Energy, would be required based on exceeding the National Pollutant Discharge Elimination System permit limit for hydrazine. This exceedance did not exceed any NRC regulations or reporting criteria. This notification is being made solely as a four-hour, non-emergency notification for a notification to another government agency. This event is a 4-hour non-emergency report in accordance with 10 CFR 50.72(b)(2)(xi). There was no impact on the health and safety of the public or plant personnel.&lt;/p&gt;
    &lt;p&gt;"The NRC Resident Inspector will be notified."&lt;/p&gt;
    &lt;p&gt;Power Reactor&lt;/p&gt;
    &lt;p&gt;Event Number: 58002&lt;/p&gt;
    &lt;p&gt; Facility: Clinton&lt;lb/&gt;Region: 3 State: IL&lt;lb/&gt;Unit: [1] [] []&lt;lb/&gt;RX Type: [1] GE-6&lt;lb/&gt;NRC Notified By: Pat Bulpitt&lt;lb/&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt;Region: 3 State: IL&lt;/p&gt;
    &lt;p&gt;Unit: [1] [] []&lt;/p&gt;
    &lt;p&gt;RX Type: [1] GE-6&lt;/p&gt;
    &lt;p&gt;NRC Notified By: Pat Bulpitt&lt;/p&gt;
    &lt;p&gt;HQ OPS Officer: Josue Ramirez&lt;/p&gt;
    &lt;p&gt; Notification Date: 10/22/2025&lt;lb/&gt;Notification Time: 18:57 [ET]&lt;lb/&gt;Event Date: 10/22/2025&lt;lb/&gt;Event Time: 15:35 [CDT]&lt;lb/&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Notification Time: 18:57 [ET]&lt;/p&gt;
    &lt;p&gt;Event Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt;Event Time: 15:35 [CDT]&lt;/p&gt;
    &lt;p&gt;Last Update Date: 10/22/2025&lt;/p&gt;
    &lt;p&gt; Emergency Class: Non Emergency&lt;lb/&gt;10 CFR Section:&lt;lb/&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical&lt;/p&gt;
    &lt;p&gt;10 CFR Section:&lt;/p&gt;
    &lt;p&gt;50.72(b)(2)(iv)(B) - RPS Actuation - Critical&lt;/p&gt;
    &lt;p&gt; Person (Organization):&lt;lb/&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;p&gt;Edwards, Rhex (R3DO)&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Unit&lt;/cell&gt;
        &lt;cell role="head"&gt;SCRAM Code&lt;/cell&gt;
        &lt;cell role="head"&gt;RX Crit&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Initial RX Mode&lt;/cell&gt;
        &lt;cell role="head"&gt;Current PWR&lt;/cell&gt;
        &lt;cell role="head"&gt;Current RX Mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;M/R&lt;/cell&gt;
        &lt;cell&gt;Y&lt;/cell&gt;
        &lt;cell&gt;86&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; MANUAL REACTOR SCRAM&lt;lb/&gt;The following information was provided by the licensee via phone and email:&lt;lb/&gt;"At 1535 CDT on 10/22/2025, with Unit 1 in mode 1 at 86 percent power, the reactor was manually tripped due to low turbine electro-hydraulic control (EHC) oil system reservoir level, caused by a leak developing in the heater bay. The trip was not complex, with all systems responding normally post-trip. Due to the reactor protection system actuation while critical, this event is being reported as a four-hour, non-emergency notification per 10 CFR 50.72(b)(2)(iv)(B).&lt;lb/&gt;"Operations responded using the emergency operating procedure for reactor pressure vessel control and stabilized the plant in mode 3. Decay heat is being removed by discharging steam to the main condenser using the turbine bypass valves, which have a separate EHC oil system.&lt;lb/&gt;"There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector has been notified."&lt;/p&gt;
    &lt;p&gt;The following information was provided by the licensee via phone and email:&lt;/p&gt;
    &lt;p&gt;"At 1535 CDT on 10/22/2025, with Unit 1 in mode 1 at 86 percent power, the reactor was manually tripped due to low turbine electro-hydraulic control (EHC) oil system reservoir level, caused by a leak developing in the heater bay. The trip was not complex, with all systems responding normally post-trip. Due to the reactor protection system actuation while critical, this event is being reported as a four-hour, non-emergency notification per 10 CFR 50.72(b)(2)(iv)(B).&lt;/p&gt;
    &lt;p&gt;"Operations responded using the emergency operating procedure for reactor pressure vessel control and stabilized the plant in mode 3. Decay heat is being removed by discharging steam to the main condenser using the turbine bypass valves, which have a separate EHC oil system.&lt;/p&gt;
    &lt;p&gt;"There was no impact on the health and safety of the public or plant personnel. The NRC Resident Inspector has been notified."&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45708292</guid><pubDate>Sun, 26 Oct 2025 01:15:43 +0000</pubDate></item><item><title>Pico-Banana-400k</title><link>https://github.com/apple/pico-banana-400k</link><description>&lt;doc fingerprint="19072a4816fa0fc8"&gt;
  &lt;main&gt;
    &lt;p&gt;Pico-Banana-400K is a large-scale dataset of ~400K text–image–edit triplets designed to advance research in text-guided image editing.&lt;lb/&gt; Each example contains:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;an original image (from Open Images),&lt;/item&gt;
      &lt;item&gt;a human-like edit instruction, and&lt;/item&gt;
      &lt;item&gt;the edited result generated and verified by the Nano-Banana model.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The dataset spans 35 edit operations across 8 semantic categories, covering diverse transformations—from low-level color adjustments to high-level object, scene, and stylistic edits.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Feature&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Total Samples&lt;/cell&gt;
        &lt;cell&gt;~257K single-turn text–image–edit triplets for SFT, ~56K single-turn text-image(positive) - image(negative)-edit for preference learning, and ~72K multi-turn texts-images-edits for multi-turn applications&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Source&lt;/cell&gt;
        &lt;cell&gt;Open Images&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Edit Operations&lt;/cell&gt;
        &lt;cell&gt;35 across 8 semantic categories&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Categories&lt;/cell&gt;
        &lt;cell&gt;Pixel &amp;amp; Photometric, Object-Level, Scene Composition, Stylistic, Text &amp;amp; Symbol, Human-Centric, Scale &amp;amp; Perspective, Spatial/Layout&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Image Resolution&lt;/cell&gt;
        &lt;cell&gt;512–1024 px&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Prompt Generator&lt;/cell&gt;
        &lt;cell&gt;Gemini-2.5-Flash&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Editing Model&lt;/cell&gt;
        &lt;cell&gt;Nano-Banana&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Self-Evaluation&lt;/cell&gt;
        &lt;cell&gt;Automated judging pipeline using Gemini-2.5-Pro for edit quality&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Pico-Banana-400K is built using a two-stage multimodal generation pipeline:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Instruction Generation&lt;lb/&gt;Each Open Images sample is passed to Gemini-2.5-Flash, which writes concise, natural-language editing instructions grounded in visible content. We also provide short instructions summarized by Qwen-2.5-Instruct-7B. Example:&lt;quote&gt;{ "instruction": "Change the red car to blue." }&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;Editing + Self-Evaluation The Nano-Banana model performs the edit, then automatically evaluates the result using a structured quality prompt that measures: Instruction Compliance (40%) Editing Realism (25%) Preservation Balance (20%) Technical Quality (15%) Only edits scoring above a strict threshold (~0.7) are labeled as successful, forming the main dataset; the remaining ~56K are retained as failure cases for robustness and preference learning.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Nano-Banana-400K contains ~400K image editing data, covering a wide visual and semantic range drawn from real-world imagery.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Category&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
        &lt;cell role="head"&gt;Percentage&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Object-Level Semantic&lt;/cell&gt;
        &lt;cell&gt;Add, remove, replace, or relocate objects&lt;/cell&gt;
        &lt;cell&gt;35%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Scene Composition &amp;amp; Multi-Subject&lt;/cell&gt;
        &lt;cell&gt;Contextual and environmental transformations&lt;/cell&gt;
        &lt;cell&gt;20%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Human-Centric&lt;/cell&gt;
        &lt;cell&gt;Edits involving clothing, expression, or appearance&lt;/cell&gt;
        &lt;cell&gt;18%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Stylistic&lt;/cell&gt;
        &lt;cell&gt;Domain and artistic style transfer&lt;/cell&gt;
        &lt;cell&gt;10%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Text &amp;amp; Symbol&lt;/cell&gt;
        &lt;cell&gt;Edits involving visible text, signs, or symbols&lt;/cell&gt;
        &lt;cell&gt;8%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Pixel &amp;amp; Photometric&lt;/cell&gt;
        &lt;cell&gt;Brightness, contrast, and tonal adjustments&lt;/cell&gt;
        &lt;cell&gt;5%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Scale &amp;amp; Perspective&lt;/cell&gt;
        &lt;cell&gt;Zoom, viewpoint, or framing changes&lt;/cell&gt;
        &lt;cell&gt;2%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Spatial / Layout&lt;/cell&gt;
        &lt;cell&gt;Outpainting, composition, or canvas extension&lt;/cell&gt;
        &lt;cell&gt;2%&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Single-Turn SFT samples (successful edits): ~257K&lt;/item&gt;
      &lt;item&gt;Single-Turn Preference samples (failure cases): ~56K&lt;/item&gt;
      &lt;item&gt;Multi-Turn SFT samples (successful cases): ~72K&lt;/item&gt;
      &lt;item&gt;Gemini-generated instructions: concise, natural, and image-aware&lt;/item&gt;
      &lt;item&gt;Edit coverage: 35 edit types across 8 semantic categories&lt;/item&gt;
      &lt;item&gt;Image diversity: includes humans, objects, text-rich scenes, etc from Open Images&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Below are representative examples from different categories:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Category&lt;/cell&gt;
        &lt;cell role="head"&gt;Example&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Object-Level&lt;/cell&gt;
        &lt;cell&gt;“Replace the red apple with a green one.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Scene Composition&lt;/cell&gt;
        &lt;cell&gt;“Add sunlight streaming through the window.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Human-Centric&lt;/cell&gt;
        &lt;cell&gt;“Change the person’s expression to smiling.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Text &amp;amp; Symbol&lt;/cell&gt;
        &lt;cell&gt;“Uppercase the text on the billboard.”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Stylistic&lt;/cell&gt;
        &lt;cell&gt;“Convert the image to a Van Gogh painting style.”&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Pico-Banana-400K provides both breadth (diverse edit operations) and depth (quality-controlled multimodal supervision), making it a strong foundation for training and evaluating text-guided image editing models.&lt;/p&gt;
    &lt;p&gt;Pico-Banana-400K serves as a versatile resource for advancing controllable and instruction-aware image editing.&lt;lb/&gt; Beyond single-step editing, the dataset enables multi-turn, conversational editing and reward-based training paradigms.&lt;/p&gt;
    &lt;p&gt;The Pico-Banana-400K dataset is hosted on Apple’s public CDN.&lt;lb/&gt; You can download each component (single-turn, multi-turn, and preference data) using the provided manifest files.&lt;/p&gt;
    &lt;p&gt;Manifest files: sft link and preference link&lt;/p&gt;
    &lt;p&gt;Manifest file: multi-turn link&lt;/p&gt;
    &lt;p&gt;Urls to download source images are provided along with edit instructions in sft link, preference link, and multi-turn link. If you hit rate limit with Flickr when downloading images, you can either request higher rate limit with Flickr or follow steps below.&lt;/p&gt;
    &lt;p&gt;Another way to download the source images is to download packed files train_0.tar.gz and train_1.tar.gz from Open Images, then map with the urls we provide. We also provide a sample mapping code here. Due to legal requirements, we cannot provide the source image files directly.&lt;/p&gt;
    &lt;code&gt;# install awscli(https://aws.amazon.com/cli/)
# Download Open Images packed files 
aws s3 --no-sign-request --endpoint-url https://s3.amazonaws.com cp s3://open-images-dataset/tar/train_0.tar.gz . 
aws s3 --no-sign-request --endpoint-url https://s3.amazonaws.com cp s3://open-images-dataset/tar/train_1.tar.gz . 

# Create folder for extracted images 
mkdir openimage_source_images

# Extract the tar files 
tar -xvzf train_0.tar.gz -C openimage_source_images
tar -xvzf train_1.tar.gz -C openimage_source_images

# Download metadata CSV (ImageID ↔ OriginalURL mapping)  
wget https://storage.googleapis.com/openimages/2018_04/train/train-images-boxable-with-rotation.csv

# Map urls to local paths
python map_openimage_url_to_local.py #please modify variable is_multi_turn and file paths as needed&lt;/code&gt;
    &lt;p&gt;Pico-Banana-400K is released under the Creative Commons Attribution–NonCommercial–NoDerivatives (CC BY-NC-ND 4.0) license. ✅ Free for research and non-commercial use ❌ Commercial use and derivative redistribution are not permitted 🖼️ Source images follow the Open Images (CC BY 2.0) license By using this dataset, you agree to comply with the terms of both licenses.&lt;/p&gt;
    &lt;p&gt;If you use 🍌 Pico-Banana-400K in your research, please cite it as follows:&lt;/p&gt;
    &lt;code&gt;@inproceedings{Qian2025PicoBanana400KAL,
  title={Pico-Banana-400K: A Large-Scale Dataset for Text-Guided Image Editing},
  author={Yusu Qian and Eli Bocek-Rivele and Liangchen Song and Jialing Tong and Yinfei Yang and Jiasen Lu and Wenze Hu and Zhe Gan},
  year={2025},
  url={https://api.semanticscholar.org/CorpusID:282272484}
}

&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45708524</guid><pubDate>Sun, 26 Oct 2025 02:01:17 +0000</pubDate></item><item><title>PCB Edge USB C Connector Library</title><link>https://github.com/AnasMalas/pcb-edge-usb-c</link><description>&lt;doc fingerprint="1bf656e13f840a3b"&gt;
  &lt;main&gt;
    &lt;p&gt;Use your PCB itself as a USB C connector! This repo includes a KiCAD and EasyEDA library containing 10 and 14 Pin versions.&lt;/p&gt;
    &lt;p&gt;To use this library in kicad, download the zip file, open the Plugin and Content Manager (PCM), click "Install from file" and choose the zip file.&lt;/p&gt;
    &lt;p&gt;To use this library in EasyEDA pro, import the .elibz files, or search the common library for "PCBTypeC_10P" or "PCBTypeC_14P" to add the symbol to your schematic.&lt;/p&gt;
    &lt;p&gt;Some other EDA tools like Altium support importing KiCAD footprints, and EasyEDA supports export to Altium and PADS. Double check against the same footprint in KiCAD or EasyEDA after import.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45708686</guid><pubDate>Sun, 26 Oct 2025 02:31:54 +0000</pubDate></item><item><title>GenAI Image Editing Showdown</title><link>https://genai-showdown.specr.net/</link><guid isPermaLink="false">https://news.ycombinator.com/item?id=45708795</guid><pubDate>Sun, 26 Oct 2025 02:57:57 +0000</pubDate></item><item><title>Tsdown – The Elegant Bundler for Libraries</title><link>https://tsdown.dev/</link><description>&lt;doc fingerprint="53470404a96e7e2d"&gt;
  &lt;main&gt;
    &lt;p&gt;️🛠️Easy to usetsdown preconfigures everything you need to get started, so you can focus on writing code.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45708884</guid><pubDate>Sun, 26 Oct 2025 03:19:08 +0000</pubDate></item><item><title>Auto Dark Mode for Windows</title><link>https://github.com/AutoDarkMode/Windows-Auto-Night-Mode</link><description>&lt;doc fingerprint="161cb97fe58136da"&gt;
  &lt;main&gt;
    &lt;p&gt;Switches between the dark and light theme of Windows at scheduled times.&lt;/p&gt;
    &lt;p&gt;Features • Download • Release Notes • Wiki • Telegram Group&lt;/p&gt;
    &lt;p&gt;Tired of looking at dark content while the sun is shining brightly? But at night everything is suddenly too bright? Auto Dark Mode is the solution for you!&lt;/p&gt;
    &lt;p&gt;Android, iOS and MacOS already offer the possibility of changing the system design based on the time of the day. We're bringing this feature to Windows on a larger scale.&lt;/p&gt;
    &lt;p&gt;Auto Dark Mode helps you to be more productive. Because you shouldn't care about changing Windows settings several times a day. As soon as the sun goes down, we'll take care of your eyes.&lt;/p&gt;
    &lt;p&gt;Because a simple design change would be too boring, Auto Dark Mode is packed with useful functions. For example, we can also change your desktop wallpaper or run custom scripts.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Compatible with Windows 10* and Windows 11.&lt;/item&gt;
      &lt;item&gt;Theme switch based on sunrise and sunset.&lt;/item&gt;
      &lt;item&gt;Postpone or delay the next switch as you like.&lt;/item&gt;
      &lt;item&gt;Desktop wallpaper switch.&lt;/item&gt;
      &lt;item&gt;Mouse cursor switch.&lt;/item&gt;
      &lt;item&gt;Accent color switch.&lt;/item&gt;
      &lt;item&gt;Support for turning on/off accent color on the Taskbar and title bars.&lt;/item&gt;
      &lt;item&gt;Touch keyboard switch.&lt;/item&gt;
      &lt;item&gt;Windows .theme file switch.&lt;/item&gt;
      &lt;item&gt;Keyboard shortcuts.&lt;/item&gt;
      &lt;item&gt;Auto Dark Mode can enable the grayscale color filter of Windows.&lt;/item&gt;
      &lt;item&gt;Suitable for gamers: Doesn't switch while playing games to avoid stuttering.&lt;/item&gt;
      &lt;item&gt;Additional features for battery powered devices, like enabling dark mode on battery.&lt;/item&gt;
      &lt;item&gt;Run custom scripts.&lt;/item&gt;
      &lt;item&gt;Automatic updates.&lt;/item&gt;
      &lt;item&gt;Lightweight with clean uninstall. No admin rights needed.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;* Windows 10 versions older than 22H2 are not supported&lt;/p&gt;
    &lt;p&gt;Click here to download the newest version of Auto Dark Mode!&lt;/p&gt;
    &lt;code&gt;winget install autodarkmode&lt;/code&gt;
    &lt;head&gt;Click to expand&lt;/head&gt;
    &lt;p&gt;Download Auto Dark Mode from Chocolatey (unofficial entry).&lt;/p&gt;
    &lt;code&gt;choco install auto-dark-mode&lt;/code&gt;
    &lt;p&gt;Download Auto Dark Mode from Scoop (unofficial entry).&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Via portable&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;scoop bucket add dorado https://github.com/chawyehsu/dorado
scoop install autodarkmode&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Via non-portable&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;scoop bucket add nonportable
scoop install auto-dark-mode-np&lt;/code&gt;
    &lt;p&gt;Installation is pretty easy, as you only need to run the setup file provided as .exe. If you want to deploy Auto Dark Mode on multiple machines, you can use the argument /allusers /verysilent to skip the installer window. &lt;lb/&gt; Sometimes Windows or web browsers will show a security notice while downloading Auto Dark Mode. This is due to our lack of a developer license. You can ignore these messages.&lt;/p&gt;
    &lt;p&gt;We use Weblate's cool free Libre plan that supports open source software projects! &lt;lb/&gt; You can find our project here: https://hosted.weblate.org/projects/auto-dark-mode/app/&lt;/p&gt;
    &lt;p&gt;Alternatively, you can manually edit the translation files in &lt;code&gt;AutoDarkModeApp\Strings&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Still have open questions? Check out our wiki!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45709043</guid><pubDate>Sun, 26 Oct 2025 04:03:54 +0000</pubDate></item></channel></rss>