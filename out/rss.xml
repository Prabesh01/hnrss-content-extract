<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Tue, 09 Sep 2025 23:08:59 +0000</lastBuildDate><item><title>Claude can now create and edit files</title><link>https://www.anthropic.com/news/create-files</link><description>&lt;doc fingerprint="156a1e7a6ff712a3"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Claude can now create and edit files&lt;/head&gt;
    &lt;p&gt;Claude can now create and edit Excel spreadsheets, documents, PowerPoint slide decks, and PDFs directly in Claude.ai and the desktop app. This transforms how you work with Claude—instead of only receiving text responses or in-app artifacts, you can describe what you need, upload relevant data, and get ready-to-use files in return.&lt;/p&gt;
    &lt;p&gt;File creation is now available as a preview for Max, Team, and Enterprise plan users. Pro users will get access in the coming weeks.&lt;/p&gt;
    &lt;head rend="h2"&gt;What you can do&lt;/head&gt;
    &lt;p&gt;Claude creates actual files from your instructions—whether working from uploaded data, researching information, or building from scratch. Here are just a few examples:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Turn data into insights: Give Claude raw data and get back polished outputs with cleaned data, statistical analysis, charts, and written insights explaining what matters.&lt;/item&gt;
      &lt;item&gt;Build spreadsheets: Describe what you need—financial models with scenario analysis, project trackers with automated dashboards, or budget templates with variance calculations. Claude creates it with working formulas and multiple sheets.&lt;/item&gt;
      &lt;item&gt;Cross-format work: Upload a PDF report and get PowerPoint slides. Share meeting notes and get a formatted document. Upload invoices and get organized spreadsheets with calculations. Claude handles the tedious work and presents information how you need it.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Whether you need a customer segmentation analysis, sales forecasting, or budget tracking, Claude handles the technical work and produces the files you need. File creation turns projects that normally require programming expertise, statistical knowledge, and hours of effort into minutes of conversation.&lt;/p&gt;
    &lt;head rend="h2"&gt;How it works: Claude’s computer&lt;/head&gt;
    &lt;p&gt;Over the past year we've seen Claude move from answering questions to completing entire projects, and now we're making that power more accessible. We've given Claude access to a private computer environment where it can write code and run programs to produce the files and analyses you need.&lt;/p&gt;
    &lt;p&gt;This transforms Claude from an advisor into an active collaborator. You bring the context and strategy; Claude handles the technical implementation behind the scenes. This shows where we’re headed: making sophisticated multi-step work accessible through conversation. As these capabilities expand, the gap between idea and execution will keep shrinking.&lt;/p&gt;
    &lt;head rend="h2"&gt;Getting started&lt;/head&gt;
    &lt;p&gt;To start creating files:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Enable "Upgraded file creation and analysis" under Settings &amp;gt; Features &amp;gt; Experimental&lt;/item&gt;
      &lt;item&gt;Upload relevant files or describe what you need&lt;/item&gt;
      &lt;item&gt;Guide Claude through the work via chat&lt;/item&gt;
      &lt;item&gt;Download your completed files or save directly to Google Drive&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Start with straightforward tasks like data cleaning or simple reports, then work up to complex projects like financial models once you're comfortable with how Claude handles files.&lt;/p&gt;
    &lt;p&gt;This feature gives Claude internet access to create and analyze files, which may put your data at risk. Monitor chats closely when using this feature. Learn more.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45182381</guid></item><item><title>US HS students lose ground in math and reading, continuing yearslong decline</title><link>https://apnews.com/article/naep-reading-math-scores-12th-grade-c18d6e3fbc125f12948cc70cb85a520a</link><description>&lt;doc fingerprint="3618d0852ce38e84"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;US high school students lose ground in math and reading, continuing yearslong decline&lt;/head&gt;
    &lt;p&gt;WASHINGTON (AP) — A decade-long slide in high schoolers’ reading and math performance persisted during the COVID-19 pandemic, with 12th graders’ scores dropping to their lowest level in more than 20 years, according to results released Tuesday from an exam known as the nation’s report card.&lt;/p&gt;
    &lt;p&gt;Eighth-grade students also lost significant ground in science skills, according to the results from the National Assessment of Education Progress.&lt;/p&gt;
    &lt;p&gt;The assessments were the first since the pandemic for eighth graders in science and 12th graders in reading and math. They reflect a downward drift across grade levels and subject areas in previous releases from NAEP, which is considered one of the best gauges of the academic progress of U.S. schools.&lt;/p&gt;
    &lt;p&gt;“Scores for our lowest-performing students are at historic lows,” said Matthew Soldner, the acting commissioner of the National Center for Education Statistics. “These results should galvanize all of us to take concerted and focused action to accelerate student learning.”&lt;/p&gt;
    &lt;p&gt;While the pandemic had an outsize impact on student achievement, experts said falling scores are part of a longer arc in education that cannot be attributed solely to COVID-19, school closures and related issues such as heightened absenteeism. Educators said potential underlying factors include children’s increased screen time, shortened attention spans and a decline in reading longer-form writing both in and out of school.&lt;/p&gt;
    &lt;p&gt;The dip in reading scores appeared alongside a shift in how English and language arts are taught in schools, with an emphasis on short texts and book excerpts, said Carol Jago, associate director of the California Reading and Literature Project at UCLA. As a high school English teacher 20 years ago, Jago said it was common for her high school students to read 20 books over the course of a year. Now, some English classes are assigning just three books a year.&lt;/p&gt;
    &lt;p&gt;“To be a good reader, you have to have the stamina to stay on the page, even when the going gets tough,” Jago said. “You have to build those muscles, and we’re not building those muscles in kids.”&lt;/p&gt;
    &lt;p&gt;Education Secretary Linda McMahon said the scores show why the Trump administration wants to give states more control of education spending.&lt;/p&gt;
    &lt;p&gt;“Despite spending billions annually on numerous K-12 programs, the achievement gap is widening, and more high school seniors are performing below the basic benchmark in math and reading than ever before,” McMahon said.&lt;/p&gt;
    &lt;p&gt;House Democrats said the Trump administration’s efforts to dismantle the Education Department will only hurt students. The declines show a need for federal investment in academic recovery and educational equity, said Democratic Rep. Bobby Scott of Virginia, ranking member of the House Committee on Education and Workforce.&lt;/p&gt;
    &lt;p&gt;“Eliminating the very agency responsible for supporting public schools and enforcing civil rights protections of students will only deepen the achievement gaps identified by this assessment,” Scott said.&lt;/p&gt;
    &lt;head rend="h2"&gt;Fewer students show basic proficiency in math and reading&lt;/head&gt;
    &lt;p&gt;The test scores show more students are not reaching what would be considered “basic” achievement across subject areas, said Lesley Muldoon, executive director of the National Assessment Governing Board. While NAEP’s definition of “proficient” is a high bar, Muldoon said, it is not an unreasonable one, and it is based on what researchers believe students should be able to achieve by the end of high school.&lt;/p&gt;
    &lt;p&gt;“These students are taking their next steps in life with fewer skills and less knowledge in core academics than their predecessors a decade ago,” she said. “This is happening at a time when rapid advancements in technology and society demands more of future workers and citizens, not less.”&lt;/p&gt;
    &lt;p&gt;In reading, the average score in 2024 was the lowest score in the history of the assessment, which began in 1992. Thirty-two percent of high school seniors scored below “basic,” meaning they were not able to find details in a text to help them understand its meaning.&lt;/p&gt;
    &lt;p&gt;In math, the average score in 2024 was the lowest since 2005, when the assessment framework changed significantly. On the test, 45% of high school seniors scored below “basic” achievement, the highest percentage since 2005. Only 33% of high school seniors were considered academically prepared for college-level math courses, a decline from 37% in 2019.&lt;/p&gt;
    &lt;p&gt;The high school reading and math assessments, and the eighth grade science test, are given less frequently than the biannual fourth and eighth grade reading tests, which were last released earlier this year. The new scores reflect tests taken in schools around the country between January and March 2024.&lt;/p&gt;
    &lt;head rend="h2"&gt;Achievement gaps are widening&lt;/head&gt;
    &lt;p&gt;The gap between the highest- and lowest-performing students was its widest ever among eighth grade science students, reflecting growing inequality in the American school system. The achievement gap widened also in 12th grade math.&lt;/p&gt;
    &lt;p&gt;The scores also reflect the re-emergence of a gender gap in science, technology, engineering and math courses. In 2019, boys and girls scored virtually the same on the NAEP science assessment. But in 2024, girls saw a steeper decline in scores. A similar pattern occurred in state math assessments, according to an Associated Press analysis.&lt;/p&gt;
    &lt;p&gt;Schools had largely closed the gender gap in math and science, but it widened in the years following the pandemic as special programs to engage girls lapsed.&lt;/p&gt;
    &lt;p&gt;On a NAEP survey of students, a shrinking percentage of eighth grade students said they regularly took part in inquiry-based learning activities in the classroom. The pandemic disrupted schools’ ability to create those hands-on learning experiences for students, which are often critical to understanding scientific concepts and processes, said Christine Cunningham, senior vice president of STEM learning at the Museum of Science in Boston.&lt;/p&gt;
    &lt;p&gt;Still, she noted declines across subjects began well before schools closed in 2020.&lt;/p&gt;
    &lt;p&gt;“We don’t know exactly what the cause of it is, but it would be incomplete to assume that if we hadn’t had COVID, the score would not have gone down,” Cunningham said. “That’s not what the data showed even before the pandemic.” ___&lt;/p&gt;
    &lt;p&gt;Feathers reported from New York.&lt;/p&gt;
    &lt;p&gt;___&lt;/p&gt;
    &lt;p&gt;The Associated Press’ education coverage receives financial support from multiple private foundations. AP is solely responsible for all content. Find AP’s standards for working with philanthropies, a list of supporters and funded coverage areas at AP.org.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45182657</guid></item><item><title>A new experimental Go API for JSON</title><link>https://go.dev/blog/jsonv2-exp</link><description>&lt;doc fingerprint="ea98b5f92c34fd0"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The Go Blog&lt;/head&gt;
    &lt;head rend="h1"&gt;A new experimental Go API for JSON&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;JavaScript Object Notation (JSON) is a simple data interchange format. Almost 15 years ago, we wrote about support for JSON in Go, which introduced the ability to serialize and deserialize Go types to and from JSON data. Since then, JSON has become the most popular data format used on the Internet. It is widely read and written by Go programs, and encoding/json now ranks as the 5th most imported Go package.&lt;/p&gt;
    &lt;p&gt;Over time, packages evolve with the needs of their users, and &lt;code&gt;encoding/json&lt;/code&gt; is no exception. This blog post is about Go 1.25’s new
experimental &lt;code&gt;encoding/json/v2&lt;/code&gt; and &lt;code&gt;encoding/json/jsontext&lt;/code&gt; packages,
which bring long-awaited improvements and fixes.
This post argues for a new major API version,
provides an overview of the new packages,
and explains how you can make use of it.
The experimental packages are not visible by default and
may undergo future API changes.&lt;/p&gt;
    &lt;head rend="h2"&gt;Problems with &lt;code&gt;encoding/json&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;Overall, &lt;code&gt;encoding/json&lt;/code&gt; has held up well.
The idea of marshaling and unmarshaling arbitrary Go types
with some default representation in JSON, combined with the ability to
customize the representation, has proven to be highly flexible.
However, in the years since its introduction,
various users have identified numerous shortcomings.&lt;/p&gt;
    &lt;head rend="h3"&gt;Behavior flaws&lt;/head&gt;
    &lt;p&gt;There are various behavioral flaws in &lt;code&gt;encoding/json&lt;/code&gt;:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Imprecise handling of JSON syntax: Over the years, JSON has seen increased standardization in order for programs to properly communicate. Generally, decoders have become stricter at rejecting ambiguous inputs, to reduce the chance that two implementations will have different (successful) interpretations of a particular JSON value.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;&lt;code&gt;encoding/json&lt;/code&gt;currently accepts invalid UTF-8, whereas the latest Internet Standard (RFC 8259) requires valid UTF-8. The default behavior should report an error in the presence of invalid UTF-8, instead of introducing silent data corruption, which may cause problems downstream.&lt;/item&gt;
          &lt;item&gt;&lt;code&gt;encoding/json&lt;/code&gt;currently accepts objects with duplicate member names. RFC 8259 does not specify how to handle duplicate names, so an implementation is free to choose an arbitrary value, merge the values, discard the values, or report an error. The presence of a duplicate name results in a JSON value without a universally agreed upon meaning. This could be exploited by attackers in security applications and has been exploited before (as in CVE-2017-12635). The default behavior should err on the side of safety and reject duplicate names.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Leaking nilness of slices and maps: JSON is often used to communicate with programs using JSON implementations that do not allow&lt;/p&gt;&lt;code&gt;null&lt;/code&gt;to be unmarshaled into a data type expected to be a JSON array or object. Since&lt;code&gt;encoding/json&lt;/code&gt;marshals a nil slice or map as a JSON&lt;code&gt;null&lt;/code&gt;, this may lead to errors when unmarshaling by other implementations. A survey indicated that most Go users prefer that nil slices and maps are marshaled as an empty JSON array or object by default.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Case-insensitive unmarshaling: When unmarshaling, a JSON object member name is resolved to a Go struct field name using a case-insensitive match. This is a surprising default, a potential security vulnerability, and a performance limitation.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Inconsistent calling of methods: Due to an implementation detail,&lt;/p&gt;&lt;code&gt;MarshalJSON&lt;/code&gt;methods declared on a pointer receiver are inconsistently called by&lt;code&gt;encoding/json&lt;/code&gt;. While regarded as a bug, this cannot be fixed as too many applications depend on the current behavior.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;API deficiencies&lt;/head&gt;
    &lt;p&gt;The API of &lt;code&gt;encoding/json&lt;/code&gt; can be tricky or restrictive:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;It is difficult to correctly unmarshal from an&lt;/p&gt;&lt;code&gt;io.Reader&lt;/code&gt;. Users often write&lt;code&gt;json.NewDecoder(r).Decode(v)&lt;/code&gt;, which fails to reject trailing junk at the end of the input.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Options can be set on the&lt;/p&gt;&lt;code&gt;Encoder&lt;/code&gt;and&lt;code&gt;Decoder&lt;/code&gt;types, but cannot be used with the&lt;code&gt;Marshal&lt;/code&gt;and&lt;code&gt;Unmarshal&lt;/code&gt;functions. Similarly, types implementing the&lt;code&gt;Marshaler&lt;/code&gt;and&lt;code&gt;Unmarshaler&lt;/code&gt;interfaces cannot make use of the options and there is no way to plumb options down the call stack. For example, the&lt;code&gt;Decoder.DisallowUnknownFields&lt;/code&gt;option loses its effect when calling a custom&lt;code&gt;UnmarshalJSON&lt;/code&gt;method.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;The&lt;/p&gt;&lt;code&gt;Compact&lt;/code&gt;,&lt;code&gt;Indent&lt;/code&gt;, and&lt;code&gt;HTMLEscape&lt;/code&gt;functions write to a&lt;code&gt;bytes.Buffer&lt;/code&gt;instead of something more flexible like a&lt;code&gt;[]byte&lt;/code&gt;or&lt;code&gt;io.Writer&lt;/code&gt;. This limits the usability of those functions.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Performance limitations&lt;/head&gt;
    &lt;p&gt;Setting aside internal implementation details, the public API commits it to certain performance limitations:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;MarshalJSON: The&lt;/p&gt;&lt;code&gt;MarshalJSON&lt;/code&gt;interface method forces the implementation to allocate the returned&lt;code&gt;[]byte&lt;/code&gt;. Also, the semantics require that&lt;code&gt;encoding/json&lt;/code&gt;verify that the result is valid JSON and also to reformat it to match the specified indentation.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;UnmarshalJSON: The&lt;/p&gt;&lt;code&gt;UnmarshalJSON&lt;/code&gt;interface method requires that a complete JSON value be provided (without any trailing data). This forces&lt;code&gt;encoding/json&lt;/code&gt;to parse the JSON value to be unmarshaled in its entirety to determine where it ends before it can call&lt;code&gt;UnmarshalJSON&lt;/code&gt;. Afterwards, the&lt;code&gt;UnmarshalJSON&lt;/code&gt;method itself must parse the provided JSON value again.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Lack of streaming: Even though the&lt;/p&gt;&lt;code&gt;Encoder&lt;/code&gt;and&lt;code&gt;Decoder&lt;/code&gt;types operate on an&lt;code&gt;io.Writer&lt;/code&gt;or&lt;code&gt;io.Reader&lt;/code&gt;, they buffer the entire JSON value in memory. The&lt;code&gt;Decoder.Token&lt;/code&gt;method for reading individual tokens is allocation-heavy and there is no corresponding API for writing tokens.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Furthermore, if the implementation of a &lt;code&gt;MarshalJSON&lt;/code&gt; or &lt;code&gt;UnmarshalJSON&lt;/code&gt; method
recursively calls the &lt;code&gt;Marshal&lt;/code&gt; or &lt;code&gt;Unmarshal&lt;/code&gt; function,
then the performance becomes quadratic.&lt;/p&gt;
    &lt;head rend="h2"&gt;Trying to fix &lt;code&gt;encoding/json&lt;/code&gt; directly&lt;/head&gt;
    &lt;p&gt;Introducing a new, incompatible major version of a package is a heavy consideration. If possible, we should try to fix the existing package.&lt;/p&gt;
    &lt;p&gt;While it is relatively easy to add new features, it is difficult to change existing features. Unfortunately, these problems are inherent consequences of the existing API, making them practically impossible to fix within the Go 1 compatibility promise.&lt;/p&gt;
    &lt;p&gt;We could in principle declare separate names, such as &lt;code&gt;MarshalV2&lt;/code&gt; or &lt;code&gt;UnmarshalV2&lt;/code&gt;,
but that is tantamount to creating a parallel namespace within the same package.
This leads us to &lt;code&gt;encoding/json/v2&lt;/code&gt; (henceforth called &lt;code&gt;v2&lt;/code&gt;),
where we can make these changes within a separate &lt;code&gt;v2&lt;/code&gt; namespace
in contrast to &lt;code&gt;encoding/json&lt;/code&gt; (henceforth called &lt;code&gt;v1&lt;/code&gt;).&lt;/p&gt;
    &lt;head rend="h2"&gt;Planning for &lt;code&gt;encoding/json/v2&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;The planning for a new major version of &lt;code&gt;encoding/json&lt;/code&gt; spanned years.
In late 2020, spurred on by the inability to fix issues in the current package,
Daniel Martí (one of the maintainers of &lt;code&gt;encoding/json&lt;/code&gt;) first drafted his
thoughts on what a hypothetical &lt;code&gt;v2&lt;/code&gt; package should look like.
Separately, after previous work on the Go API for Protocol Buffers,
Joe Tsai was disapppointed that the &lt;code&gt;protojson&lt;/code&gt; package
needed to use a custom JSON implementation because &lt;code&gt;encoding/json&lt;/code&gt; was
neither capable of adhering to the stricter JSON standard that the
Protocol Buffer specification required,
nor of efficiently serializing JSON in a streaming manner.&lt;/p&gt;
    &lt;p&gt;Believing a brighter future for JSON was both beneficial and achievable, Daniel and Joe joined forces to brainstorm on &lt;code&gt;v2&lt;/code&gt; and
started to build a prototype
(with the initial code being a polished version of the JSON serialization logic from the Go protobuf module).
Over time, a few others (Roger Peppe, Chris Hines, Johan Brandhorst-Satzkorn, and Damien Neil)
joined the effort by providing design review, code review, and regression testing.
Many of the early discussions are publicly available in our
recorded meetings and
meeting notes.&lt;/p&gt;
    &lt;p&gt;This work has been public since the beginning, and we increasingly involved the wider Go community, first with a GopherCon talk and discussion posted in late 2023, formal proposal posted in early 2025, and most recently adopting &lt;code&gt;encoding/json/v2&lt;/code&gt; as a Go experiment
(available in Go 1.25) for wider-scale testing by all Go users.&lt;/p&gt;
    &lt;p&gt;The &lt;code&gt;v2&lt;/code&gt; effort has been going on for 5 years,
incorporating feedback from many contributors and also gaining valuable
empirical experience from use in production settings.&lt;/p&gt;
    &lt;p&gt;It’s worth noting that it’s largely been developed and promoted by people not employed by Google, demonstrating that the Go project is a collaborative endeavor with a thriving global community dedicated to improving the Go ecosystem.&lt;/p&gt;
    &lt;head rend="h2"&gt;Building on &lt;code&gt;encoding/json/jsontext&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;Before discussing the &lt;code&gt;v2&lt;/code&gt; API, we first introduce the experimental
&lt;code&gt;encoding/json/jsontext&lt;/code&gt; package
that lays the foundation for future improvements to JSON in Go.&lt;/p&gt;
    &lt;p&gt;JSON serialization in Go can be broken down into two primary components:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;syntactic functionality that is concerned with processing JSON based on its grammar, and&lt;/item&gt;
      &lt;item&gt;semantic functionality that defines the relationship between JSON values and Go values.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We use the terms “encode” and “decode” to describe syntactic functionality and the terms “marshal” and “unmarshal” to describe semantic functionality. We aim to provide a clear distinction between functionality that is purely concerned with encoding versus that of marshaling.&lt;/p&gt;
    &lt;p&gt;This diagram provides an overview of this separation. Purple blocks represent types, while blue blocks represent functions or methods. The direction of the arrows approximately represents the flow of data. The bottom half of the diagram, implemented by the &lt;code&gt;jsontext&lt;/code&gt; package,
contains functionality that is only concerned with syntax,
while the upper half, implemented by the &lt;code&gt;json/v2&lt;/code&gt; package,
contains functionality that assigns semantic meaning to syntactic data
handled by the bottom half.&lt;/p&gt;
    &lt;p&gt;The basic API of &lt;code&gt;jsontext&lt;/code&gt; is the following:&lt;/p&gt;
    &lt;code&gt;package jsontext

type Encoder struct { ... }
func NewEncoder(io.Writer, ...Options) *Encoder
func (*Encoder) WriteValue(Value) error
func (*Encoder) WriteToken(Token) error

type Decoder struct { ... }
func NewDecoder(io.Reader, ...Options) *Decoder
func (*Decoder) ReadValue() (Value, error)
func (*Decoder) ReadToken() (Token, error)

type Kind byte
type Value []byte
func (Value) Kind() Kind
type Token struct { ... }
func (Token) Kind() Kind
&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;jsontext&lt;/code&gt; package provides functionality for interacting with JSON
at a syntactic level and derives its name from
RFC 8259, section 2
where the grammar for JSON data is literally called &lt;code&gt;JSON-text&lt;/code&gt;.
Since it only interacts with JSON at a syntactic level,
it does not depend on Go reflection.&lt;/p&gt;
    &lt;p&gt;The &lt;code&gt;Encoder&lt;/code&gt; and
&lt;code&gt;Decoder&lt;/code&gt;
provide support for encoding and decoding JSON values and tokens.
The constructors
accept variadic options
that affect the particular behavior of encoding and decoding.
Unlike the &lt;code&gt;Encoder&lt;/code&gt; and &lt;code&gt;Decoder&lt;/code&gt; types declared in &lt;code&gt;v1&lt;/code&gt;,
the new types in &lt;code&gt;jsontext&lt;/code&gt; avoid muddling the distinction between syntax and
semantics and operate in a truly streaming manner.&lt;/p&gt;
    &lt;p&gt;A JSON value is a complete unit of data and is represented in Go as a named &lt;code&gt;[]byte&lt;/code&gt;.
It is identical to &lt;code&gt;RawMessage&lt;/code&gt; in &lt;code&gt;v1&lt;/code&gt;.
A JSON value is syntactically composed of one or more JSON tokens.
A JSON token is represented in Go as the opaque &lt;code&gt;Token&lt;/code&gt; type
with constructors and accessor methods.
It is analogous to &lt;code&gt;Token&lt;/code&gt; in &lt;code&gt;v1&lt;/code&gt;
but is designed represent arbitrary JSON tokens without allocation.&lt;/p&gt;
    &lt;p&gt;To resolve the fundamental performance problems with the &lt;code&gt;MarshalJSON&lt;/code&gt; and &lt;code&gt;UnmarshalJSON&lt;/code&gt; interface methods,
we need an efficient way of encoding and decoding JSON
as a streaming sequence of tokens and values.
In &lt;code&gt;v2&lt;/code&gt;, we introduce the &lt;code&gt;MarshalJSONTo&lt;/code&gt; and &lt;code&gt;UnmarshalJSONFrom&lt;/code&gt; interface methods
that operate on an &lt;code&gt;Encoder&lt;/code&gt; or &lt;code&gt;Decoder&lt;/code&gt;, allowing the methods’ implementations
to process JSON in a purely streaming manner. Thus, the &lt;code&gt;json&lt;/code&gt; package need not
be responsible for validating or formatting a JSON value returned by &lt;code&gt;MarshalJSON&lt;/code&gt;,
nor would it need to be responsible for determining the boundaries of a JSON value
provided to &lt;code&gt;UnmarshalJSON&lt;/code&gt;. These responsibilities belong to the &lt;code&gt;Encoder&lt;/code&gt; and &lt;code&gt;Decoder&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;Introducing &lt;code&gt;encoding/json/v2&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;Building on the &lt;code&gt;jsontext&lt;/code&gt; package, we now introduce the experimental
&lt;code&gt;encoding/json/v2&lt;/code&gt; package.
It is designed to fix the aforementioned problems,
while remaining familiar to users of the &lt;code&gt;v1&lt;/code&gt; package.
Our goal is that usages of &lt;code&gt;v1&lt;/code&gt; will operate mostly the same if directly migrated to &lt;code&gt;v2&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;In this article, we will primarily cover the high-level API of &lt;code&gt;v2&lt;/code&gt;.
For examples on how to use it, we encourage readers to
study the examples in the &lt;code&gt;v2&lt;/code&gt; package or
read Anton Zhiyanov’s blog covering the topic.&lt;/p&gt;
    &lt;p&gt;The basic API of &lt;code&gt;v2&lt;/code&gt; is the following:&lt;/p&gt;
    &lt;code&gt;package json

func Marshal(in any, opts ...Options) (out []byte, err error)
func MarshalWrite(out io.Writer, in any, opts ...Options) error
func MarshalEncode(out *jsontext.Encoder, in any, opts ...Options) error

func Unmarshal(in []byte, out any, opts ...Options) error
func UnmarshalRead(in io.Reader, out any, opts ...Options) error
func UnmarshalDecode(in *jsontext.Decoder, out any, opts ...Options) error
&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;Marshal&lt;/code&gt;
and &lt;code&gt;Unmarshal&lt;/code&gt; functions
have a signature similar to &lt;code&gt;v1&lt;/code&gt;, but accept options to configure their behavior.
The &lt;code&gt;MarshalWrite&lt;/code&gt;
and &lt;code&gt;UnmarshalRead&lt;/code&gt; functions
directly operate on an &lt;code&gt;io.Writer&lt;/code&gt; or &lt;code&gt;io.Reader&lt;/code&gt;,
avoiding the need to temporarily construct an &lt;code&gt;Encoder&lt;/code&gt; or &lt;code&gt;Decoder&lt;/code&gt;
just to write or read from such types.
The &lt;code&gt;MarshalEncode&lt;/code&gt;
and &lt;code&gt;UnmarshalDecode&lt;/code&gt; functions
operate on a &lt;code&gt;jsontext.Encoder&lt;/code&gt; and &lt;code&gt;jsontext.Decoder&lt;/code&gt; and
is actually the underlying implementation of the previously mentioned functions.
Unlike &lt;code&gt;v1&lt;/code&gt;, options are a first-class argument to each of the marshal and unmarshal functions,
greatly extending the flexibility and configurability of &lt;code&gt;v2&lt;/code&gt;.
There are several options available
in &lt;code&gt;v2&lt;/code&gt; which are not covered by this article.&lt;/p&gt;
    &lt;head rend="h3"&gt;Type-specified customization&lt;/head&gt;
    &lt;p&gt;Similar to &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt; allows types to define their own JSON representation
by satisfying particular interfaces.&lt;/p&gt;
    &lt;code&gt;type Marshaler interface {
    MarshalJSON() ([]byte, error)
}
type MarshalerTo interface {
    MarshalJSONTo(*jsontext.Encoder) error
}

type Unmarshaler interface {
    UnmarshalJSON([]byte) error
}
type UnmarshalerFrom interface {
    UnmarshalJSONFrom(*jsontext.Decoder) error
}
&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;Marshaler&lt;/code&gt;
and &lt;code&gt;Unmarshaler&lt;/code&gt; interfaces
are identical to those in &lt;code&gt;v1&lt;/code&gt;.
The new &lt;code&gt;MarshalerTo&lt;/code&gt;
and &lt;code&gt;UnmarshalerFrom&lt;/code&gt; interfaces
allow a type to represent itself as JSON using a &lt;code&gt;jsontext.Encoder&lt;/code&gt; or &lt;code&gt;jsontext.Decoder&lt;/code&gt;.
This allows options to be forwarded down the call stack, since options
can be retrieved via the &lt;code&gt;Options&lt;/code&gt; accessor method on the &lt;code&gt;Encoder&lt;/code&gt; or &lt;code&gt;Decoder&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;See the &lt;code&gt;OrderedObject&lt;/code&gt; example
for how to implement a custom type that maintains the ordering of JSON object members.&lt;/p&gt;
    &lt;head rend="h3"&gt;Caller-specified customization&lt;/head&gt;
    &lt;p&gt;In &lt;code&gt;v2&lt;/code&gt;, the caller of &lt;code&gt;Marshal&lt;/code&gt; and &lt;code&gt;Unmarshal&lt;/code&gt; can also specify
a custom JSON representation for any arbitrary type,
where caller-specified functions take precedence over type-defined methods
or the default representation for a particular type.&lt;/p&gt;
    &lt;code&gt;func WithMarshalers(*Marshalers) Options

type Marshalers struct { ... }
func MarshalFunc[T any](fn func(T) ([]byte, error)) *Marshalers
func MarshalToFunc[T any](fn func(*jsontext.Encoder, T) error) *Marshalers

func WithUnmarshalers(*Unmarshalers) Options

type Unmarshalers struct { ... }
func UnmarshalFunc[T any](fn func([]byte, T) error) *Unmarshalers
func UnmarshalFromFunc[T any](fn func(*jsontext.Decoder, T) error) *Unmarshalers
&lt;/code&gt;
    &lt;p&gt;&lt;code&gt;MarshalFunc&lt;/code&gt; and
&lt;code&gt;MarshalToFunc&lt;/code&gt;
construct a custom marshaler that can be passed to a &lt;code&gt;Marshal&lt;/code&gt; call
using &lt;code&gt;WithMarshalers&lt;/code&gt; to override the marshaling of particular types.
Similarly,
&lt;code&gt;UnmarshalFunc&lt;/code&gt; and
&lt;code&gt;UnmarshalFromFunc&lt;/code&gt;
support similar customization for &lt;code&gt;Unmarshal&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;The &lt;code&gt;ProtoJSON&lt;/code&gt; example
demonstrates how this feature allows serialization of all
&lt;code&gt;proto.Message&lt;/code&gt; types
to be handled by the &lt;code&gt;protojson&lt;/code&gt; package.&lt;/p&gt;
    &lt;head rend="h3"&gt;Behavior differences&lt;/head&gt;
    &lt;p&gt;While &lt;code&gt;v2&lt;/code&gt; aims to behave mostly the same as &lt;code&gt;v1&lt;/code&gt;,
its behavior has changed in some ways
to address problems in &lt;code&gt;v1&lt;/code&gt;, most notably:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;v2&lt;/code&gt;reports an error in the presence of invalid UTF-8.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;v2&lt;/code&gt;reports an error if a JSON object contains a duplicate name.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;v2&lt;/code&gt;marshals a nil Go slice or Go map as an empty JSON array or JSON object, respectively.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;v2&lt;/code&gt;unmarshals a JSON object into a Go struct using a case-sensitive match from the JSON member name to the Go field name.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;v2&lt;/code&gt;redefines the&lt;code&gt;omitempty&lt;/code&gt;tag option to omit a field if it would have encoded as an “empty” JSON value (which are&lt;code&gt;null&lt;/code&gt;,&lt;code&gt;""&lt;/code&gt;,&lt;code&gt;[]&lt;/code&gt;, and&lt;code&gt;{}&lt;/code&gt;).&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;v2&lt;/code&gt;reports an error when trying to serialize a&lt;code&gt;time.Duration&lt;/code&gt;, which currently has no default representation, but provides options to let the caller decide.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For most behavior changes, there is a struct tag option or caller-specified option that can configure the behavior to operate under &lt;code&gt;v1&lt;/code&gt; or &lt;code&gt;v2&lt;/code&gt; semantics,
or even other caller-determined behavior.
See “Migrating to v2” for more information.&lt;/p&gt;
    &lt;head rend="h3"&gt;Performance optimizations&lt;/head&gt;
    &lt;p&gt;The &lt;code&gt;Marshal&lt;/code&gt; performance of &lt;code&gt;v2&lt;/code&gt; is roughly at parity with &lt;code&gt;v1&lt;/code&gt;.
Sometimes it is slightly faster, but other times it is slightly slower.
The &lt;code&gt;Unmarshal&lt;/code&gt; performance of &lt;code&gt;v2&lt;/code&gt; is significantly faster than &lt;code&gt;v1&lt;/code&gt;,
with benchmarks demonstrating improvements of up to 10x.&lt;/p&gt;
    &lt;p&gt;In order to obtain greater performance gains, existing implementations of &lt;code&gt;Marshaler&lt;/code&gt; and
&lt;code&gt;Unmarshaler&lt;/code&gt; should
migrate to also implement
&lt;code&gt;MarshalerTo&lt;/code&gt; and
&lt;code&gt;UnmarshalerFrom&lt;/code&gt;,
so that they can benefit from processing JSON in a purely streaming manner.
For example, recursive parsing of OpenAPI specifications in &lt;code&gt;UnmarshalJSON&lt;/code&gt; methods
significantly hurt performance in a particular service of Kubernetes
(see kubernetes/kube-openapi#315),
while switching to &lt;code&gt;UnmarshalJSONFrom&lt;/code&gt; improved performance by orders of magnitude.&lt;/p&gt;
    &lt;p&gt;For more information, see the &lt;code&gt;go-json-experiment/jsonbench&lt;/code&gt;
repository.&lt;/p&gt;
    &lt;head rend="h2"&gt;Retroactively improving &lt;code&gt;encoding/json&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;We want to avoid two separate JSON implementations in the Go standard library, so it is critical that, under the hood, &lt;code&gt;v1&lt;/code&gt; is implemented in terms of &lt;code&gt;v2&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;There are several benefits to this approach:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Gradual migration: The&lt;/p&gt;&lt;code&gt;Marshal&lt;/code&gt;and&lt;code&gt;Unmarshal&lt;/code&gt;functions in&lt;code&gt;v1&lt;/code&gt;or&lt;code&gt;v2&lt;/code&gt;represent a set of default behaviors that operate according to&lt;code&gt;v1&lt;/code&gt;or&lt;code&gt;v2&lt;/code&gt;semantics. Options can be specified that configure&lt;code&gt;Marshal&lt;/code&gt;or&lt;code&gt;Unmarshal&lt;/code&gt;to operate with entirely&lt;code&gt;v1&lt;/code&gt;, mostly&lt;code&gt;v1&lt;/code&gt;with a some&lt;code&gt;v2&lt;/code&gt;, a mix of&lt;code&gt;v1&lt;/code&gt;or&lt;code&gt;v2&lt;/code&gt;, mostly&lt;code&gt;v2&lt;/code&gt;with some&lt;code&gt;v1&lt;/code&gt;, or entirely&lt;code&gt;v2&lt;/code&gt;semantics. This allows for gradual migration between the default behaviors of the two versions.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Feature inheritance: As backward-compatible features are added to&lt;/p&gt;&lt;code&gt;v2&lt;/code&gt;, they will inherently be made available in&lt;code&gt;v1&lt;/code&gt;. For example,&lt;code&gt;v2&lt;/code&gt;adds support for several new struct tag options such as&lt;code&gt;inline&lt;/code&gt;or&lt;code&gt;format&lt;/code&gt;and also support for the&lt;code&gt;MarshalJSONTo&lt;/code&gt;and&lt;code&gt;UnmarshalJSONFrom&lt;/code&gt;interface methods, which are both more performant and flexible. When&lt;code&gt;v1&lt;/code&gt;is implemented in terms of&lt;code&gt;v2&lt;/code&gt;, it will inherit support for these features.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Reduced maintenance: Maintenance of a widely used package demands significant effort. By having&lt;/p&gt;&lt;code&gt;v1&lt;/code&gt;and&lt;code&gt;v2&lt;/code&gt;use the same implementation, the maintenance burden is reduced. In general, a single change will fix bugs, improve performance, or add functionality to both versions. There is no need to backport a&lt;code&gt;v2&lt;/code&gt;change with an equivalent&lt;code&gt;v1&lt;/code&gt;change.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;While select parts of &lt;code&gt;v1&lt;/code&gt; may be deprecated over time (supposing &lt;code&gt;v2&lt;/code&gt; graduates from being an experiment),
the package as a whole will never be deprecated.
Migrating to &lt;code&gt;v2&lt;/code&gt; will be encouraged, but not required.
The Go project will not drop support for &lt;code&gt;v1&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;Experimenting with &lt;code&gt;jsonv2&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;The newer API in the &lt;code&gt;encoding/json/jsontext&lt;/code&gt; and &lt;code&gt;encoding/json/v2&lt;/code&gt; packages are not visible by default.
To use them, build your code with &lt;code&gt;GOEXPERIMENT=jsonv2&lt;/code&gt; set in your environment or with the &lt;code&gt;goexperiment.jsonv2&lt;/code&gt; build tag.
The nature of an experiment is that the API is unstable and may change in the future.
Though the API is unstable, the implementation is of a high quality and
has been successfully used in production by several major projects.&lt;/p&gt;
    &lt;p&gt;The fact that &lt;code&gt;v1&lt;/code&gt; is implemented in terms of &lt;code&gt;v2&lt;/code&gt; means that the underlying implementation of &lt;code&gt;v1&lt;/code&gt;
is completely different when building under the &lt;code&gt;jsonv2&lt;/code&gt; experiment.
Without changing any code, you should be able to run your tests
under &lt;code&gt;jsonv2&lt;/code&gt; and theoretically nothing new should fail:&lt;/p&gt;
    &lt;code&gt;GOEXPERIMENT=jsonv2 go test ./...
&lt;/code&gt;
    &lt;p&gt;The re-implementation of &lt;code&gt;v1&lt;/code&gt; in terms of &lt;code&gt;v2&lt;/code&gt; aims to provide identical behavior
within the bounds of the Go 1 compatibility promise,
though some differences might be observable such as the exact wording of error messages.
We encourage you to run your tests under &lt;code&gt;jsonv2&lt;/code&gt; and
report any regressions on the issue tracker.&lt;/p&gt;
    &lt;p&gt;Becoming an experiment in Go 1.25 is a significant milestone on the road to formally adopting &lt;code&gt;encoding/json/jsontext&lt;/code&gt; and &lt;code&gt;encoding/json/v2&lt;/code&gt; into the standard library.
However, the purpose of the &lt;code&gt;jsonv2&lt;/code&gt; experiment is to gain broader experience.
Your feedback will determine our next steps, and the outcome of this experiment,
which may result in anything from abandonment of the effort, to adoption as stable packages of Go 1.26.
Please share your experience on go.dev/issue/71497, and help determine the future of Go.&lt;/p&gt;
    &lt;p&gt; Previous article: Testing Time (and other asynchronicities)&lt;lb/&gt; Blog Index &lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45182770</guid></item><item><title>We all dodged a bullet</title><link>https://xeiaso.net/notes/2025/we-dodged-a-bullet/</link><description>&lt;doc fingerprint="4e7e82b81462420f"&gt;
  &lt;main&gt;
    &lt;p&gt;Making sure you're not a bot! Loading... Please wait a moment while we ensure the security of your connection.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45183029</guid></item><item><title>Building a DOOM-like multiplayer shooter in pure SQL</title><link>https://cedardb.com/blog/doomql/</link><description>&lt;doc fingerprint="676aacd12fee1bbf"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;DOOMQL: A DOOM-like multiplayer shooter in pure SQL&lt;/head&gt;
    &lt;p&gt;I recently stumbled across Patrick’s excellent DOOM clone running in a browser powered by DuckDB-WASM. Ever since I’ve read that, I wanted to push his awesome idea to the logical extreme: Build a multiplayer DOOM-like shooter entirely in SQL with CedarDB doing all the heavy lifting. During a month of parental leave (i.e., a lot of sleepless nights), I tried exactly that.&lt;/p&gt;
    &lt;p&gt;Here’s a sneak peek at DOOMQL:&lt;/p&gt;
    &lt;p&gt;Okay, with the flashy demo out of the way, let’s talk about details. What follows is a tour of the architecture, the SQL rendering pipeline, the game loop, and the fun metagame of cheating by issuing SQL commands against the database.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why even do this?&lt;/head&gt;
    &lt;head rend="h2"&gt;Architectural overview&lt;/head&gt;
    &lt;p&gt;At a high level&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;State lives in tables (map, players, mobs, inputs, configs, sprites, &amp;amp;mldr;)&lt;/item&gt;
      &lt;item&gt;Rendering is a stack of SQL views that implement raycasting and sprite projection&lt;/item&gt;
      &lt;item&gt;The game loop is a tiny shell script that executes a SQL file ~ 30 times per second.&lt;/item&gt;
      &lt;item&gt;The client is ~ 150 lines of Python: It polls for input and queries the database for your 3D view.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You can play, observe other players and even cheat (by sending raw SQL).&lt;/p&gt;
    &lt;head rend="h2"&gt;Game state, or: Let’s store everything in the database&lt;/head&gt;
    &lt;p&gt;With a database at hand, it’s natural to store all game configuration, state, and static data in the database:&lt;/p&gt;
    &lt;p&gt;Config:&lt;/p&gt;
    &lt;code&gt;CREATE TABLE config(
  player_move_speed NUMERIC DEFAULT 0.3, 
  player_turn_speed NUMERIC DEFAULT 0.2,
  ammo_max INT DEFAULT 10,
  ammo_refill_interval_seconds INT DEFAULT 2
  );
&lt;/code&gt;
    &lt;p&gt;Map:&lt;/p&gt;
    &lt;code&gt;CREATE TABLE map(x INT, y INT, tile CHAR);
&lt;/code&gt;
    &lt;p&gt;Players and inputs:&lt;/p&gt;
    &lt;code&gt;CREATE TABLE players (
  id INT REFERENCES mobs(id),
  score INT DEFAULT 0,
  hp INT DEFAULT 100,
  ammo INT DEFAULT 10,
  last_ammo_refill int default EXTRACT(EPOCH FROM (now()))::INT
);

CREATE TABLE inputs(
  player_id INT PRIMARY KEY REFERENCES players(id),
  action CHAR(1), -- 'w', 'a', 's', 'd', 'x' for shooting
  timestamp TIMESTAMP DEFAULT NOW()
);
&lt;/code&gt;
    &lt;p&gt;Because everything is data, modding a running match is trivial:&lt;/p&gt;
    &lt;code&gt;-- Change a setting
update config set ammo_max = 20;

 -- Add a player
insert into players values (...);

-- Move forward
update input set action = 'w' where player_id = &amp;lt;your_id&amp;gt;;

 -- Cheat (pls be smarter about it)
update players set hp = 100000 where player_id = &amp;lt;your_id&amp;gt;;

-- Ban cheaters (that weren't smart about it)
delete from players where hp &amp;gt; 100;
&lt;/code&gt;
    &lt;head rend="h2"&gt;Renderer: When a &lt;code&gt;VIEW&lt;/code&gt; becomes your 3D view&lt;/head&gt;
    &lt;p&gt;If you squint enough, in DOOM, a 3D (or more correct: 2.5D) view is just a view over 2D state (i.e., the level map and any players/enemies on it). Well, we’ve got &lt;code&gt;VIEWS&lt;/code&gt; in SQL as well. They’re also just views on our (2D) state tables.
What’s stopping us from quite literally building a 3D “view” of our 2D map
using a simple raycasting algorithm?&lt;/p&gt;
    &lt;p&gt;The pipeline:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Send a set of rays from each player’s eye into the world, and see which map tiles are visible&lt;/item&gt;
      &lt;item&gt;Check which walls the player sees, rendering them at the correct height and more or less solid based on the distance&lt;/item&gt;
      &lt;item&gt;Project mobs into the player’s camera space&lt;/item&gt;
      &lt;item&gt;Select sprite LODs based on depth&lt;/item&gt;
      &lt;item&gt;Expand sprites into pixels, scaled to screen space&lt;/item&gt;
      &lt;item&gt;Occlude against walls and other sprites&lt;/item&gt;
      &lt;item&gt;Assemble frame buffer rows with &lt;code&gt;string_agg&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Build a minimap reusing the visible tiles calculation from earlier&lt;/item&gt;
      &lt;item&gt;Combine the 3D view with minimap and HUD (HP/bullets/players) into a game view&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Let’s take a more in-depth look at steps 2, 7, and 8.&lt;/p&gt;
    &lt;head rend="h3"&gt;Raycasting&lt;/head&gt;
    &lt;p&gt;The recursive rayâmarching logic is adapted from Patrick’s DuckDB DOOM post. Here is a simplified excerpt, adapted for multiplayer:&lt;/p&gt;
    &lt;code&gt;CREATE OR REPLACE VIEW visible_tiles AS  
WITH RECURSIVE raytrace AS (  
  -- Starting at the player's eye ...
  SELECT r.player_id, r.col, 1 AS step_count,  
         r.player_x + COS(r.angle)*s.step AS fx,  
         r.player_y + SIN(r.angle)*s.step AS fy,  
         r.angle, 0 AS dist  
  FROM rays r, settings s  -- rays are built in an earlier step
  UNION ALL  
  -- ... we recursively march along the rays, 1 "step" at a time ...
  SELECT rt.player_id, rt.col, rt.step_count + 1,  
         rt.fx + COS(rt.angle)*s.step,  
         rt.fy + SIN(rt.angle)*s.step,  
         rt.angle,  
         step_count * s.step * COS(rt.angle - m.dir) AS dist  
  FROM raytrace rt, settings s, players p, mobs m  
  WHERE rt.step_count &amp;lt; s.max_steps   -- ... stopping after our max render distance
    AND rt.player_id = p.id  
    AND m.id = p.id  
    AND NOT EXISTS (  -- or if we hit a wall
      SELECT 1 FROM map m  
      WHERE m.x = CAST(rt.fx AS INT) AND m.y = CAST(rt.fy AS INT)  
        AND m.tile = '#')  -- wall
)  
-- We then determine per player:
--  a) which tiles we hit
--  b) how far away these tiles are
--  c) the column of the screen each tile should correspond to
SELECT player_id, tile, CAST(fx AS INT) AS tile_x, CAST(fy AS INT) AS tile_y, col, MIN(dist) AS dist  
FROM raytrace rt, map m  
WHERE m.x = CAST(rt.fx AS INT) AND m.y = CAST(rt.fy AS INT)  -- We might hit the same tile multiple times, so we take the closest hit
GROUP BY player_id, tile_x, tile_y, tile, col;  
&lt;/code&gt;
    &lt;p&gt;And that’s just the first step in the pipeline. For the rest, take a look at the code.&lt;/p&gt;
    &lt;head rend="h3"&gt;Final frame assembly&lt;/head&gt;
    &lt;p&gt;After all the heavy lifting, the payoff is surprisingly simple:&lt;/p&gt;
    &lt;code&gt;SELECT player_id, y, string_agg(ch, '' ORDER BY x) AS row  
FROM framebuffer  
GROUP BY player_id, y;  
&lt;/code&gt;
    &lt;p&gt;This glues together character pixels into text rows.&lt;/p&gt;
    &lt;head rend="h3"&gt;HUD + minimap&lt;/head&gt;
    &lt;p&gt;The same trick builds the HUD and minimap. Here is the health bar:&lt;/p&gt;
    &lt;code&gt;'HP: [' ||
repeat('â', LEAST(20, ROUND(20 * GREATEST(0, LEAST(p.hp,100))::numeric / 100)::int)) ||
repeat(' ', GREATEST(0, 20 - ROUND(20 * GREATEST(0, LEAST(p.hp,100))::numeric / 100)::int)) ||
'] ' || GREATEST(0, p.hp)
&lt;/code&gt;
    &lt;p&gt;Add ammo dots with &lt;code&gt;repeat('â¢', p.ammo)&lt;/code&gt; and you’ve got a HUD entirely in SQL:&lt;/p&gt;
    &lt;code&gt; 1: Lukas      (L) score: 1   HP: [âââââââââ           ] 50    AMMO: â¢â¢â¢â¢â¢â¢â¢â¢â¢â¢
 2: Foobar     (F) score: 0   HP: [ââââââââââââââââââââ] 100   AMMO: â¢â¢â¢â¢â¢â¢â¢â¢  
&lt;/code&gt;
    &lt;p&gt;We can also re-use our earlier &lt;code&gt;visible_tiles&lt;/code&gt; view to build a minimap with a view cone:&lt;/p&gt;
    &lt;code&gt;select * from minimap where player_id = 1 order by y;

 player_id | y  |                               row                                
-----------+----+------------------------------------------------------------------
         1 |  0 | ################################################################
         1 |  1 | ################################################################
         1 |  2 | ##.......      #####               #############################
         1 |  3 | ##.....F.      #####               #####                     ###
         1 |  4 | ##.......      #####               #####                     ###
         1 |  5 | ##  .....      #####               #####                     ###
         1 |  6 | ##   ...                                                     ###
         1 |  7 | ##    .L                                                     ###
         1 |  8 | ##             #####               #####                     ###
         1 |  9 | ##             #####               #####                     ###
         1 | 10 | ##             #############  ##########                     ###
         1 | 11 | ##########  ################  ##########                     ###
         1 | 12 | ##########  ################  ##########                     ###
         1 | 13 | ##########  ################  ######################  ##########
         1 | 14 | ####                 #######  ######################  ##########
         1 | 15 | ####                 #######  ######################  ##########
         1 | 16 | ####                 #####             #####                 ###
         1 | 17 | ####                 #####             #####                 ###
         1 | 18 | ####                 #####             #####                 ###
         1 | 19 | ####                 #####             #####                 ###
         1 | 20 | ####                 #####             #####                 ###
         1 | 21 | ####                                   #####                 ###
         1 | 22 | ####                                                         ###
         1 | 23 | ####                 #####                                   ###
         1 | 24 | ####                 #####             #####                 ###
         1 | 25 | ####                 #####             #####                 ###
         1 | 26 | ####                 #####             #####                 ###
         1 | 27 | ####                 #####             #####                 ###
         1 | 28 | ####                 #####             #####                 ###
         1 | 29 | ################################################################
         1 | 30 | ################################################################
         1 | 31 | ################################################################
&lt;/code&gt;
    &lt;head rend="h2"&gt;The surprisingly elegant game loop&lt;/head&gt;
    &lt;p&gt;The loop is just a shell script running raw SQL against the database:&lt;/p&gt;
    &lt;code&gt;# Game loop @ 30 ticks per second
while true; do
  psql -qtAX -U "$DB_USER" -d "$DB_NAME" -h "$DB_HOST" -p "$DB_PORT" -f gameloop.sql
  sleep 0.03
done
&lt;/code&gt;
    &lt;p&gt;Inside &lt;code&gt;gameloop.sql&lt;/code&gt;, actions like bullet movement, collisions, kills, and respawns run in a single transaction, which keeps state consistent even if something fails mid-tick.&lt;/p&gt;
    &lt;p&gt;Here’s the part processing interactions with bullets:&lt;/p&gt;
    &lt;code&gt;-- Process all bullets
BEGIN TRANSACTION;

-- Move bullets forward
UPDATE mobs 
SET x = x + cos(dir) * 0.5, y = y + sin(dir) * 0.5 
WHERE kind = 'bullet';

-- Delete bullets that are out of bounds
DELETE FROM mobs 
WHERE (x &amp;lt; 0 
OR x &amp;gt;= (select max(x) from map) 
OR y &amp;lt; 0 
OR y &amp;gt;= (select max(y) from map))
AND kind = 'bullet';

-- Delete bullets that hit walls
DELETE FROM mobs b 
WHERE EXISTS 
    (SELECT 1 
    FROM map m 
    WHERE m.x = CAST(b.x AS INT) 
    AND m.y = CAST(b.y AS INT) 
    AND m.tile = '#') 
AND kind = 'bullet';


-- Players hit by a bullet loses 50 HP
UPDATE players p SET hp = hp - 50
FROM collisions c
WHERE p.id = c.player_id;

-- If a player has 0 or less HP, the player killing them gets a point
UPDATE players p SET score = score + 1
FROM collisions c
WHERE p.id = c.bullet_owner
AND EXISTS (SELECT 1 FROM players p2 WHERE p2.id = c.player_id AND p2.hp &amp;lt;= 0);

-- Delete bullets that hit players
DELETE FROM mobs m
USING collisions c
WHERE m.id = c.bullet_id;

-- Respawn players whose HP is 0 or less
UPDATE mobs m
SET x = r.x, y = r.y, dir = 0
FROM players p
CROSS JOIN (
  SELECT x, y
  FROM map
  WHERE tile = 'R'
  ORDER BY random()
  LIMIT 1
) AS r
WHERE m.id = p.id
  AND p.hp &amp;lt;= 0;

-- Reset players' HP to 100 and ammo to 10 after respawn
UPDATE players p SET
  hp = 100,
  ammo = 10
FROM mobs m
WHERE p.id = m.id
AND p.hp &amp;lt;= 0;

COMMIT;
&lt;/code&gt;
    &lt;p&gt;On my machine, the game loop takes about 1 ms, so we could defintely improve the tick rate. That might be a way to get the Counterstrike snobs who scoff at everything below 128 Hz. It would require some refactoring on my part since I tied the movement speed to the game loop - a big no no in game design!&lt;/p&gt;
    &lt;p&gt;While only someone insane could think a pure SQL raycasting renderer is a good idea in an actual game, I’ll happily defend this transactional game loop. I don’t think this part would be much more concise or less brittle in a real game engine.&lt;/p&gt;
    &lt;head rend="h2"&gt;Make it multiplayer in two queries&lt;/head&gt;
    &lt;p&gt;The game client’s job description is simple:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Render&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;SELECT full_row FROM screen WHERE player_id = &amp;lt;your_id&amp;gt; ORDER BY y
&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Send input&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;INSERT INTO inputs(player_id, action)
    VALUES (&amp;lt;your_id&amp;gt;, &amp;lt;pressed_key&amp;gt;)
    ON CONFLICT(player_id)
    DO UPDATE SET action = EXCLUDED.action
&lt;/code&gt;
    &lt;p&gt;The game loop periodically checks the input table and moves all players accordingly - inside a transaction, of course, so we don’t run into any race conditions.&lt;/p&gt;
    &lt;p&gt;That’s it (well, plus a one-time “create player” on first connect). The ~150 lines of Python in the client mostly handle keyboard input and reducing terminal flicker. Bonus: The client provides an observer mode. All it has to do is swap the &lt;code&gt;&amp;lt;player_id&amp;gt;&lt;/code&gt; in the render call.&lt;/p&gt;
    &lt;head rend="h2"&gt;Performance&lt;/head&gt;
    &lt;p&gt;At 128 x 64 pixels, a single player view takes ~33 ms on my machine, which is enough for a breezy ~30 FPS, compared to DuckDB DOOM’s 8 FPS at just 32 x 16 pixels. I’m actually quite proud of that performance and quite happy with CedarDB here. I don’t think any other database system can keep up with that. Let me know if you find one!&lt;/p&gt;
    &lt;p&gt;You might worry that rendering the views of all players and filtering late would be very wasteful. CedarDB’s query optimizer pushes the &lt;code&gt;where player_id = &amp;lt;...&amp;gt;&lt;/code&gt; predicate through view boundaries, avoiding unncessary work.
You can easily check by running:&lt;/p&gt;
    &lt;code&gt;select * from screen order by y; -- render both users
-- Time: 57,907 ms (~2x single player 33ms)
&lt;/code&gt;
    &lt;head rend="h2"&gt;The cheating metagame&lt;/head&gt;
    &lt;p&gt;Because clients send raw SQL as superusers (I didn’t bother setting up any role based access control or row level security, don’t do that!), there’s an emergent metagame: Cheat creatively and try not to get caught.&lt;/p&gt;
    &lt;p&gt;Low effort:&lt;/p&gt;
    &lt;code&gt;update players set score = 0 where id != &amp;lt;your_id&amp;gt;;
update players set hp = 0 where id != &amp;lt;your_id&amp;gt;;
&lt;/code&gt;
    &lt;p&gt;Mischievous:&lt;/p&gt;
    &lt;code&gt;update inputs set action = null where player_id != &amp;lt;your_id&amp;gt;;
&lt;/code&gt;
    &lt;p&gt;Steal kills:&lt;/p&gt;
    &lt;code&gt;update mobs set owner = &amp;lt;your_id&amp;gt; where kind = 'bullet';
&lt;/code&gt;
    &lt;p&gt;Attempted but didn’t work:&lt;/p&gt;
    &lt;code&gt;DELETE FROM mobs m
USING collisions c
WHERE m.id = c.bullet_id AND c.player_id = &amp;lt;your_id&amp;gt;;
&lt;/code&gt;
    &lt;p&gt;This doesn’t work because moving bullets, checking for collisions, and respawn happens in the same transaction. As transactions are atomic, you either see everything being applied at once, or nothing. By the time you see the hit, you’re already dead. A property that’s very useful for database systems (and not just to prevent cheating).&lt;/p&gt;
    &lt;head rend="h2"&gt;What I learned&lt;/head&gt;
    &lt;p&gt;I set out to see if I could push Patrick’s demo to an extreme: Doing the entire rendering pipeline in SQL. And while it works, I have to admit that it is a pretty&amp;amp;mldr; bad idea? Fast enough, but horrible to maintain and debug.&lt;/p&gt;
    &lt;p&gt;The surprise was how natural it felt to express game state and logic in SQL. It even felt like accidentally re-invented the entity-component-system pattern.&lt;lb/&gt;And multiplayer “just worked” because the database system which handles all the nasty concurrency is the source of truth.&lt;/p&gt;
    &lt;head rend="h2"&gt;Try it yourself!&lt;/head&gt;
    &lt;p&gt;All the code is on Github: DOOMQL Repo&lt;/p&gt;
    &lt;p&gt;Run:&lt;/p&gt;
    &lt;code&gt;docker pull cedardb/cedardb:latest
docker run --rm -p 5432:5432 -e CEDAR_PASSWORD=postgres --detach cedardb/cedardb:latest
# Wait a few seconds for CedarDB to start
./server.sh

# in a second terminal window, zoom way out to have no line wraping issues
python3 pyclient.py
&lt;/code&gt;
    &lt;p&gt;Want to discuss DOOMQL with me or find like-minded database nerds? Join our Community Slack&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45183050</guid></item><item><title>An attacker’s blunder gave us a look into their operations</title><link>https://www.huntress.com/blog/rare-look-inside-attacker-operation</link><description>&lt;doc fingerprint="3c223691892884a9"&gt;
  &lt;main&gt;
    &lt;p&gt;Update Sept. 9 @ 3pm ET&lt;/p&gt;
    &lt;p&gt;What you're about to read is something that all endpoint detection and response (EDR) companies perform as a byproduct of investigating threats. Because these services are designed to monitor for and detect threats, EDR systems by nature need the capability to monitor system activity, as is outlined in our product documentation, Privacy Policy, and Terms of Service.&lt;/p&gt;
    &lt;p&gt;On the heels of questions around how and why Huntress released this information, we wanted to clarify several important aspects of our investigation. We have an obligation to 1) research and respond to security threats and investigate malware and 2) educate the broader community about those threats. These dual objectives played into our decision to develop and publish this blog post.&lt;/p&gt;
    &lt;p&gt;When we first came across the host mentioned in this blog, it was because we were first responding to numerous alerts that were related to malware executing on it. Part of this process involves our SOC team closely investigating signals and collecting artifacts related to EDR telemetry on the host. It was only upon further investigation into this telemetry that we observed signals indicating malicious behavior. By this point, we also found that the unique machine name used by the individual was the same as one that we had tracked in several incidents prior to them installing the agent.&lt;/p&gt;
    &lt;p&gt;At this point, we determined that the host that had installed the Huntress agent was, in fact, malicious. We wanted to serve the broader community by sharing what we learned about the tradecraft that the threat actor was using in this incident. In deciding what information to publish about this investigation, we carefully considered several factors, like strictly upholding our privacy obligations, as well as disseminating EDR telemetry that specifically reflected threats and behavior that could help defenders.&lt;/p&gt;
    &lt;p&gt;Overall, this investigation is a result of what we strive to do best: transparency, education, and wrecking hackers. Read on to learn more.&lt;/p&gt;
    &lt;p&gt;------------------------&lt;/p&gt;
    &lt;p&gt;Here at Huntress, we love exposing adversary tradecraft, and we also love when threat actors make blunders. So imagine our delight when a threat actor installed Huntress onto their operating machine—after finding us via one of our advertising campaigns and starting a trial— giving us a sprawling inside look at how they’re using AI to build workflows, searching for tools like Evilginx, and more.&lt;/p&gt;
    &lt;p&gt;------------------------&lt;/p&gt;
    &lt;p&gt;We all know that security products are often downloaded by attackers for “evaluation,” but often we can only guess as to how they decided to target a particular technology, or the actions taken while trying out such software. We recently had the pleasure of getting a front seat view into what one attacker did, simply because they installed our agent and let us collect information directly from them. Here, we will cover this strange tale.&lt;/p&gt;
    &lt;p&gt;Like most good stories, this one starts in the middle and works its way back and forth. Let’s start with how this person of interest got our attention. One of the tricks of the trade to get people interested in your products is through advertising. As such, we run ads to help lead potential customers to our products. An adverse effect here might be garnering some “unwanted” attention as well. Such is the setting for the beginning of this adventure: it all started with a nicely placed Google ad.&lt;/p&gt;
    &lt;p&gt;The attacker tripped across our ad while researching another security solution. We confirmed this is how they found us by examining their Google Chrome browser history. An example of how this may have appeared to them in the moment may be seen in Figure 1.&lt;/p&gt;
    &lt;p&gt;It appears that the attacker became interested in Huntress while simultaneously trying out Bitdefender. After hitting our comparison page, they could hardly contain themselves and started a trial immediately. We are able to follow their journey through their Chrome history, as seen in Figure 2 below.&lt;/p&gt;
    &lt;p&gt;It’s no secret that threat actors may install security products for research purposes or even for legitimate use—and in fact, the adversary was interested in other security products in addition to Bitdefender and Huntress. We found evidence that they had bought a Malwarebytes subscription (including the Malwarebytes browser guard extension).&lt;/p&gt;
    &lt;p&gt;We knew this was an adversary, rather than a legitimate user, based on several telling clues. The standout red flag was that the unique machine name used by the individual was the same as one that we had tracked in several incidents prior to them installing the agent. Further investigation revealed other clues, such as the threat actor’s browser history, which appeared to show them trying to actively target organizations, craft phishing messages, find and access running instances of Evilginx, and more. We also have our suspicions that the operating machine where Huntress was installed is being used as a jump box by multiple threat actors—but we don’t have solid evidence to draw firm conclusions at this time.&lt;/p&gt;
    &lt;p&gt;Huntress analysts went to work evaluating the outstanding indicators of compromise found on the adversary’s host and how they related to data found within authentications to identities at Huntress. Retroactive hunts disclosed a further 20 identities which were compromised; many of which had been accessed by the adversary prior to Huntress’ deployment against the identity, whose activity was limited to refreshing session tokens to maintain access.&lt;/p&gt;
    &lt;p&gt;Overall, analysis of the adversary’s primary operating infrastructure, hosted on Autonomous System (AS) “12651980 CANADA INC.” (now known as VIRTUO) disclosed a pattern of access of over 2471 unique identities spanning the last two weeks– many of which were preemptively caught by additional detection capabilities such as malicious mail rule creation, or session token theft.&lt;/p&gt;
    &lt;p&gt;The intelligence gathered by the above has resulted in detections of high confidence against the adversary’s infrastructure; and equipped our systems and analysts to respond to these incidents in significantly less time and with extreme confidence in malice, eliminating adversarial attempts to evade our detections.&lt;/p&gt;
    &lt;p&gt;All in all, we were able to see the threat actor’s specific day-to-day activities—from their methodologies to the specific types of organizations (and even individuals) they were interested in. We also saw them begin to tinker with tools and search for tutorials, attempting to learn more. For instance, after installing the Huntress agent, the threat actor took steps to better understand Autoruns.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt;Figure 4: The threat actor attempting to better understand Autoruns&lt;/p&gt;
    &lt;p&gt;Overall, over the course of three months we saw an evolution in terms of how the threat actor refined their processes, incorporated AI into their workflows, and targeted different organizations and vertical markets, as outlined in Figure 5 below.&lt;/p&gt;
    &lt;p&gt;Figure 5: An overview of some of the threat actor’s activities that we saw over the months&lt;/p&gt;
    &lt;p&gt;Below are some of the specific methodologies that we saw.&lt;/p&gt;
    &lt;p&gt;The Chrome browser history gave a first-hand look at how the adversary is using AI tools to increase the operational efficiency of their workflows. While there have previously been many reports on how cybercriminals are using AI (based on indicators in phishing messages or landing page content), this is the first time that we have a close-up view of a threat actor embedding AI into their operations in order to automate—and speed up—their workflow.&lt;/p&gt;
    &lt;p&gt;On May 25, the threat actor signed up for Make.com, which is legitimate workflow automation software, before researching the platform’s Telegram Bot integration feature as a way to launch automated processes (as seen in Figure 6 below). The threat actor then poked around several FAQ sites to better understand how Telegram Bot APIs work and how to set up webhooks.&lt;/p&gt;
    &lt;p/&gt;
    &lt;p&gt;Over time, the threat actor started to get a better grasp of how they could use Make.com for specific workflows, and their browser history shows them starting to rely more heavily on the platform. By the time June 29 rolled around, the threat actor had fully developed their workflow with Make. As seen in Figure 8, the threat actor would first identify the organization of interest (typically after receiving a “tip” from Telegram) before using Google Translate to translate or craft messages related to these organizations. While we don’t have detailed insight into how the threat actor was using Make for these specific workflows, we can see that it was part of the process to automate specific functions.&lt;/p&gt;
    &lt;p&gt;Figure 8: Threat actor starts to rely on automated workflows&lt;/p&gt;
    &lt;p&gt;The threat actor also appeared to be interested in other AI tools to help with data generation and writing. We saw multiple Google searches for “free ai no signup” and for “csv generator ai.” We also saw the threat actor using Toolbaz AI, which is a writing assistant; the CSV spreadsheet generator feature of DocsBot AI, which is an AI chatbot tool; and the AI data generator feature of Explo AI, which is an embedded analytics tool.&lt;/p&gt;
    &lt;p&gt;We saw evidence of the threat actor searching for running instances of the Evilginx man-in-the-middle attack framework using Censys, and then attempting to access those instances.&lt;/p&gt;
    &lt;p/&gt;
    &lt;p&gt;In addition to Evilginx, we also found evidence of multiple installed tools on the threat actor’s system—or, in some cases, an interest in tools based on the threat actor browser history. These tools included recon and attack tool GraphSpy, open source tool Bloodhound, the TeamFiltration framework used for enumeration and exfiltration, and more.&lt;/p&gt;
    &lt;p&gt;The Chrome browser history also revealed visits by the threat actor to multiple residential proxy webpages, including LunaProxy and Nstbrowser (which bills itself as an anti-detect browser and supports the use of residential proxies). The threat actor visited the pricing plan page for LunaProxy, researched specific products, and looked up quick start guides throughout May, June, and July. Residential proxy services have become increasingly popular with threat actors as a way to route their traffic through residential IP addresses, allowing them to obscure malicious activity, like avoiding suspicious login alerts while using compromised credentials.&lt;/p&gt;
    &lt;p&gt;The Chrome browser history entries also gave us a close view of the attacker’s reconnaissance methods. The threat actor spent a lot of time researching companies across different sectors, from specific banks to “top real estate companies in the US” (also looking up “real estate agents in California”).&lt;/p&gt;
    &lt;p&gt;The threat actor didn’t just search for individual companies—they also looked at all parts of the ecosystem surrounding organizations of interest, from their customer bases to associated third-party companies across the supply chain. For example, the threat actor appeared to start targeting software companies in early July, searching for these types of companies via Google Search and using database marketing tools like ReadyContacts and InfoClutch to scope out how many customers they had and their market share.&lt;/p&gt;
    &lt;p&gt;The threat actor also used the BuiltWith platform, which lets users identify and analyze the technology stacks used by websites. On July 8, browser entries show the attacker conducting an extensive level of research on a prominent ecommerce vendor for managing payments and subscriptions, including a list of its customers, contacts, and market share. The threat actor then used BuiltWith to search for the websites relying on that vendor, before navigating to the BuiltWith sign up page, presumably to access that list.&lt;/p&gt;
    &lt;p&gt;The threat actor conducted a fair amount of research into tools used to scrape Telegram group data, including looking at scraper tools like Apify, the Axiom Chrome extension, and the RapidAPI platform (Figure 13).&lt;/p&gt;
    &lt;p&gt;The threat actor used Google Translate extensively, and Chrome browser shows them first visiting bank websites, and then using the translation platform, likely to assist in crafting phishing-related messages, as seen in Figure 14.&lt;/p&gt;
    &lt;p&gt;The attacker often used urlscan to get information about various websites. Tips appear to have come in via Telegram using the getUpdates method.&lt;/p&gt;
    &lt;p/&gt;
    &lt;p/&gt;
    &lt;p/&gt;
    &lt;p&gt;There were several entries in the browser history that showed use of Google Translate to translate messages from Portuguese to English alongside browsing banks in Brazil, then evidence of crafting messages later on in their history.&lt;/p&gt;
    &lt;p&gt;We also saw the threat actor express interest in STYX Market, a dark web forum that’s been around since 2023, and was recently called a “rising star for stealer logs, stolen creds, and laundering services” by researchers. After doing some initial research on STYX—as well as other Telegram chat groups and channels—they decided to check out the site for themselves, registering for an account before perusing the catalog of VoIP accounts, stealer logs, SIM cards, and more.&lt;/p&gt;
    &lt;p/&gt;
    &lt;p&gt;Rarely do you ever get the chance to actually shoulder surf a real threat actor. We had such an opportunity when they installed our agent. It starts out mundane enough. We don’t know what they must have dreamed about after ending their shift at 2am UTC the previous night, but as mentioned earlier, you can see them start a trial, download the agent, and install it.&lt;/p&gt;
    &lt;p&gt;The most interesting activity for the start of their day on July 9, 2025 was browsing to urlscan.io to inspect login.incipientcroop[.]com. Shortly after, they logged into Make.com and began working on a project called Voltage_Office356bot (notice the typo).&lt;/p&gt;
    &lt;p/&gt;
    &lt;p/&gt;
    &lt;p&gt;There is evidence that the threat actor had access to cookie data for two different individuals, and accessed them via Notepad++. They proceeded to open the first file:&lt;/p&gt;
    &lt;p&gt;C:\Program Files\Notepad++\notepad++.exe C:\Users\Administrator\Downloads\Telegram &lt;lb/&gt;Desktop\Cookies_[victim1]@[redacted1][.].com.json&lt;/p&gt;
    &lt;p&gt;Then they started looking around to see what they can find, with a Google search for “email osint”.&lt;/p&gt;
    &lt;p&gt;Next, they opened the second cookie file:&lt;/p&gt;
    &lt;p&gt;C:\Program Files\Notepad++\notepad++.exe C:\Users\Administrator\Downloads\Telegram &lt;lb/&gt;Desktop\Cookies_[victim2]@[redacted2][.].com.json&lt;/p&gt;
    &lt;p&gt;They then started up Nstbrowser.exe and LunaProxy:&lt;/p&gt;
    &lt;p&gt;C:\Program Files\Nstbrowser\Nstbrowser.exe&lt;lb/&gt;C:\Program Files (x86)\LunaProxy_cata\socks5\LunaProxyDivert.exe SOCK5 [snip]&lt;/p&gt;
    &lt;p&gt;They browsed to an article titled Say Hello to your new cache flow by Synacktiv covering WHFB and Entra ID, followed by a Google search for “whfb prt”, which landed them on the website of a well-known researcher, Dirk-Jan Mollema.&lt;/p&gt;
    &lt;p&gt;They checked their IP address after this:&lt;/p&gt;
    &lt;p&gt;C:\Windows\system32\curl.exe ipinfo[.]io&lt;/p&gt;
    &lt;p&gt;And then checked their IP address again:&lt;/p&gt;
    &lt;p&gt;C:\Windows\system32\curl.exe ipinfo[.]io&lt;/p&gt;
    &lt;p&gt;They then tried to use a tool called ROADtools Token eXchange (roadtx):&lt;/p&gt;
    &lt;p&gt;C:\Users\Administrator\AppData\Local\Programs\Python\Python313\Scripts\roadtx.exe prtauth -r msgraph -c msteams&lt;/p&gt;
    &lt;p&gt;And then erroneously tried to run the same tool (as an executable) via Python:&lt;/p&gt;
    &lt;p&gt;C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe C:\Users\Administrator\AppData\Local\Programs\Python\Python313\Scripts\roadtx.exe prtauth -r msgraph -c msteams&lt;/p&gt;
    &lt;p&gt;Then ran it again:&lt;/p&gt;
    &lt;p&gt;C:\Users\Administrator\AppData\Local\Programs\Python\Python313\Scripts\roadtx.exe describe&lt;/p&gt;
    &lt;p&gt;And then tried to run it again, erroneously, using Python:&lt;/p&gt;
    &lt;p&gt;C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe C:\Users\Administrator\AppData\Local\Programs\Python\Python313\Scripts\roadtx.exe describe&lt;/p&gt;
    &lt;p&gt;They seemed to be having trouble. At this point they browsed to Dirk-jan Mollema’s post on Phishing for Microsoft Entra primary refresh tokens.&lt;/p&gt;
    &lt;p&gt;While there, they gained some new inspiration, and discovered a handy little script that could make their life easier:&lt;/p&gt;
    &lt;p&gt;At this point they went back to their Voltage_Office356bot project before running this new script they’ve downloaded.&lt;/p&gt;
    &lt;p&gt;They started trying to run the Python script:&lt;/p&gt;
    &lt;p&gt;C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe main.py -f roadtx.prt --wfb&lt;/p&gt;
    &lt;p&gt;They checked the usage again:&lt;/p&gt;
    &lt;p&gt;C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe main.py --wfb&lt;/p&gt;
    &lt;p&gt;C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe main.py -h&lt;/p&gt;
    &lt;p&gt;Then, they started to run it against the original victim whose cookie file we saw earlier:&lt;/p&gt;
    &lt;p&gt;C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe main.py --wfb -u [victim2]@[redacted2][.]com&lt;/p&gt;
    &lt;p&gt;They returned to the first victim’s cookie file:&lt;lb/&gt;C:\Program Files\Notepad++\notepad++.exe C:\Users\Administrator\Downloads\Telegram &lt;lb/&gt;Desktop\Cookies_[victim1]@[redacted1][.].com.json&lt;/p&gt;
    &lt;p&gt;This is where our EDR data drops off, as they may have become aware of us and uninstalled the agent.&lt;/p&gt;
    &lt;p&gt;The attacker’s browser history gives us an unprecedented level of insight into their everyday activity, searches, workflows, research, and more. The browser history shows the threat actor working intensively almost every day between the period of May 29, 2025 through July 9, 2025.&lt;/p&gt;
    &lt;p&gt;On many of these days, the browser entries were seen across most hours of the day, logging 12 to 14 hours. But there was some variation, as seen in Figure 29, above: on several days, the threat actor worked as little as one to two hours.&lt;/p&gt;
    &lt;p&gt;When we hone in on a few of the days when the most hours were put in, we can see some of the things that piqued the attacker’s interest in those days. We analyzed the urls to see what businesses, or categories they might have fallen into, and then looked to see how many times the attacker visited these sites.&lt;/p&gt;
    &lt;p&gt;We can see a few trends. During these days, the attacker spent a lot of time researching various banking entities and bank personnel. To further expand on some of the graph labels:&lt;/p&gt;
    &lt;p&gt;Attack infra: Malicious websites or servers set up by an attacker (maybe not this one) hosting frameworks like Evilginx and other known tools.&lt;/p&gt;
    &lt;p&gt;Banking: Various banking websites&lt;/p&gt;
    &lt;p&gt;Browser extension: Various browser extensions like ad blockers, etc. installed by the attacker to protect themselves.&lt;/p&gt;
    &lt;p&gt;Corporate &amp;amp; Business: Various business websites not housed under a different category.&lt;/p&gt;
    &lt;p&gt;Crypto: Various cryptocurrency and blockchain websites.&lt;/p&gt;
    &lt;p&gt;Cybersecurity: Various cybersecurity vendor websites. The attacker often signed up for trials at various vendors to test things.&lt;/p&gt;
    &lt;p&gt;Government &amp;amp; military: Various official government or military websites.&lt;/p&gt;
    &lt;p&gt;News, media &amp;amp; information: Various news websites like CNN etc. The attacker often read articles related to various breaches.&lt;/p&gt;
    &lt;p&gt;OSS: Open source projects, often housed at github or gitlab.&lt;/p&gt;
    &lt;p&gt;Recon: Activities where the attacker was using Censys, Urlscan, Google, etc., to do reconnaissance for a particular target.&lt;/p&gt;
    &lt;p&gt;Research: When the attacker was researching a particular vulnerability, tool, or attack.&lt;/p&gt;
    &lt;p&gt;Sandbox: The attacker often seemed interested in various types of malware that were on VirusTotal, Joe’s Sandbox, and other online sandboxes.&lt;/p&gt;
    &lt;p&gt;Social media: Various telegram, X, and other social media posts read by the attacker.&lt;/p&gt;
    &lt;p&gt;Software: Various legitimate software, like 7zip.&lt;/p&gt;
    &lt;p&gt;Telecommunications: A telecommunication website, like Verizon.&lt;/p&gt;
    &lt;p&gt;Web &amp;amp; IT infrastructure: Various online hosting services, like Mega, Amazon AWS, and Azure.&lt;/p&gt;
    &lt;p&gt;We can see that from May 29 to June 1, 2025, the attacker was mostly looking at various banking websites. Digging further into their activities, you see them researching various banks, reading about Telegram Bots, then downloading a blueprint from Make.&lt;/p&gt;
    &lt;p&gt;The next day, it seems that the attacker spent a little more time researching various attack infrastructure, in addition to focusing on banks, and similar activities seen previously.&lt;/p&gt;
    &lt;p&gt;On May 31, 2025 and June 1, 2025, the attacker switched their focus back to mostly researching banking websites.&lt;/p&gt;
    &lt;p/&gt;
    &lt;p/&gt;
    &lt;p&gt;The other interesting thing was that the attacker was mostly focused on banks and sites that were in Nigeria during this time period, even looking for things like:&lt;lb/&gt;“No. 1 regulated crypto exchange in Nigeria.”&lt;/p&gt;
    &lt;p&gt;“top crypto companies nigeria”&lt;/p&gt;
    &lt;p&gt;“Best Crypto Exchanges in Nigeria”&lt;lb/&gt;“Top Cryptocurrency Companies in Nigeria”&lt;/p&gt;
    &lt;p&gt;While we don’t know where the attacker is based, the machine they had installed our agent upon appeared to be based in the United States, on the West Coast, based on the machine’s internal time zone and IP address.&lt;/p&gt;
    &lt;p&gt;It seems that the attacker had spent quite some time looking at our various capabilities after they had started a trial with us. Figure 36 above shows just how much more time they spent interacting with the Huntress website, and particularly the account dashboard once they had started the trial.&lt;/p&gt;
    &lt;p&gt;This incident gave us in-depth information about the day-to-day activities of a threat actor, from the tools they were interested in to the ways they conducted research and approached different aspects of attacks.&lt;/p&gt;
    &lt;p&gt;Upon confirming that the machine name was one used by an adversary, we decided to release these details because they give an invaluable understanding into the mindset and behaviors of threat actors behind attacks. For other defenders, we hope that this information can help add context around the ways that threat actors conduct research and launch attacks at the backend—and the different types of organizations, tools, and platforms that interest them.&lt;/p&gt;
    &lt;p&gt;Get insider access to Huntress tradecraft, killer events, and the freshest blog updates.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45183589</guid></item><item><title>ICE is using fake cell towers to spy on people's phones</title><link>https://www.forbes.com/sites/the-wiretap/2025/09/09/how-ice-is-using-fake-cell-towers-to-spy-on-peoples-phones/</link><description>&lt;doc fingerprint="771290960fa11bec"&gt;
  &lt;main&gt;
    &lt;p&gt;This is the online edition of The Wiretap newsletter, your weekly digest of cybersecurity, internet privacy and surveillance news. To get it in your inbox, subscribe here.&lt;/p&gt;
    &lt;p&gt;It’s been some time since Immigration and Customs Enforcement (ICE) has been seen using a tool known as a Stingray, or a cell-site simulator, in its attempts to find and remove undocumented immigrants. The tool tricks a phone into thinking it’s a cell tower, and when a suspect’s device connects, the cops can trace its location. Its use is controversial because anyone in the same area as the target is at risk of having their information exposed.&lt;/p&gt;
    &lt;p&gt;In a recently-unsealed search warrant reviewed by Forbes, ICE used such a cell-site simulator in an attempt to track down an individual in Orem, Utah. The suspect had been ordered to leave the U.S. in 2023, but is believed to still be in the country. Investigators learned last month that before going to Utah, he’d escaped prison in Venezuela where he was serving a sentence for murder, according to the warrant. He’s also suspected of being linked to gang activity in the country, investigators said.&lt;/p&gt;
    &lt;p&gt;When the government got the target’s number, they first got a warrant to get its location. However, the trace wasn’t precise–it only told law enforcement that the target was somewhere in an area covering about 30 blocks. That led them to asking a court for a Stingray-type device to get an accurate location.&lt;/p&gt;
    &lt;p&gt;The warrant was issued at the end of last month and it’s not yet known if the fugitive was found.&lt;/p&gt;
    &lt;p&gt;But the case shows that, despite having been criticized by civil rights groups for using Stingrays during the last Trump administration, ICE continues to use the technology. Earlier this year, new media publication Straight Arrow News said it had analysed “mobile network anomalies” around a Washington state protest against ICE raids that were consistent with Stingray use.&lt;/p&gt;
    &lt;p&gt;Forbes found contract records showing ICE purchased nearly $1 million worth of “cell site simulator vehicles” in May this year, indicating it’s taking the surveillance tool fully mobile. That was part of a contract first signed under the Biden administration in 2024.&lt;/p&gt;
    &lt;p&gt;ICE also has an active contract worth up to $4.4 million with the original Stingray manufacturer, Harris Corporation, for unspecified “equipment to determine the location of targeted mobile handsets.” That deal was also signed during the Biden years.&lt;/p&gt;
    &lt;p&gt;Got a tip on surveillance or cybercrime? Get me on Signal at +1 929-512-7964.&lt;/p&gt;
    &lt;head rend="h2"&gt;THE BIG STORY:&lt;/head&gt;
    &lt;head rend="h2"&gt;This Billionaire’s AI Was Supposed To Speed Up Policing. It’s Not Going Well.&lt;/head&gt;
    &lt;p&gt;San Mateo County Sheriff’s Office spent $12 million on a sprawling AI surveillance system called Sherlock, designed to stitch together surveillance streams across as many as 16 different agencies in the jurisdiction.&lt;/p&gt;
    &lt;p&gt;Made by billionaire Tom Siebel’s C3 AI, it was supposed to drastically speed up police work, but three years into the project, cops tell Forbes they’re yet to see the benefits.&lt;/p&gt;
    &lt;p&gt;Per one staffer in 2023, “We’ve been working with them for two years and they have a barely functional product.” Since then, it’s unclear just how much the tech has progressed.&lt;/p&gt;
    &lt;head rend="h2"&gt;Stories You Have To Read Today&lt;/head&gt;
    &lt;p&gt;In a Forbes profile, Flock Safety shows off its drones, car tracking and AI-powered surveillance tools, all part of an effort to dislodge police tech giant Axon from the top of the market. “I plan to go take them out,” says CEO Garrett Langley.&lt;/p&gt;
    &lt;p&gt;ICE signed a contract with facial recognition company Clearview AI last week, worth nearly $10 million. It’ll be used, in part, to identify people assaulting ICE officers.&lt;/p&gt;
    &lt;p&gt;Former WhatsApp security lead Attaullah Baig has filed a lawsuit alleging Meta ignored big privacy and security problems within the messaging app. He claims thousands of Meta employees were able to view WhatsApp users’ profile pictures, location, group memberships and contact lists. Meta rejected the claims saying Baig was dismissed for poor performance and that his allegations were “distorted.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Winner of the Week&lt;/head&gt;
    &lt;p&gt;Signal has launched encrypted backups for user chats. The feature will first be made available for Android phones, before being slowly rolled out to iPhone users. The archive requires a 64-character recovery key to access, but keep that code safe: Signal warns that if it’s lost, there’s no way to get it back.&lt;/p&gt;
    &lt;head rend="h2"&gt;Loser of the Week&lt;/head&gt;
    &lt;p&gt;Amnesty International claims that Pakistan is running one of the world’s most expansive domestic surveillance operations outside of China, using both Chinese and Western technology providers, who are enabling both mass snooping via the nation’s telecoms companies as well as widespread internet censorship.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45184368</guid></item><item><title>Microsoft is officially sending employees back to the office</title><link>https://www.businessinsider.com/microsoft-send-employees-back-to-office-rto-remote-work-2025-9</link><description>&lt;doc fingerprint="7f52997f7696eb5c"&gt;
  &lt;main&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Microsoft is sending employees back to the office at least three days a week.&lt;/item&gt;
      &lt;item&gt;The first phase will be for employees who live near its Seattle-area headquarters in February.&lt;/item&gt;
      &lt;item&gt;Business Insider reported last month that Microsoft's was considering a stricter RTO policy.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;One of Big Tech's last remaining RTO holdouts is officially sending employees back to the office.&lt;/p&gt;
    &lt;p&gt;Microsoft is mandating employees work from offices at least three days a week, according to an internal email the company sent to staff on Tuesday.&lt;/p&gt;
    &lt;p&gt;The mandate will happen in three phases, beginning at the end of February 2026, with Seattle-area employees who live within 50 miles of a Microsoft office. It will then expand to other US offices and eventually internationally, according to the email from Microsoft HR chief Amy Coleman. February 23 was one of the start dates Microsoft considered, but it hasn't been decided yet.&lt;/p&gt;
    &lt;p&gt;Employees can request an exception by September 19. Coleman's email didn't include details about how such exceptions may work.&lt;/p&gt;
    &lt;p&gt;Business Insider reported in August that Microsoft was considering a stricter RTO policy mandating three days a week in the office.&lt;/p&gt;
    &lt;p&gt;Microsoft sells software that enables remote work, such as its popular Teams workplace chat and meeting app. It remained relatively lax compared to some other Big Tech companies when it comes to RTO, especially cross-town rival Amazon. Even Zoom sent its employees back to the office part-time in 2023.&lt;/p&gt;
    &lt;p&gt;Microsoft first introduced a flexible work policy when it brought employees back to the office in late 2020 after pandemic-forced closures. That policy officially allowed employees to work from home at least half of the time without approval, but in practice it was even more flexible and most employees worked remotely most of the time.&lt;/p&gt;
    &lt;p&gt;Now its policy is evolving to be similar to guidelines at Meta and Google, which generally require most employees to work in offices three days a week.&lt;/p&gt;
    &lt;p&gt;Microsoft's new approach is the latest sign of the company increasing performance pressure on employees. It has fired thousands of employees deemed low performers this year and introduced a new performance improvement plan meant to exit low performers more quickly.&lt;/p&gt;
    &lt;p&gt;While working on the new RTO policy, Microsoft appears to have scrubbed a blog post that once heralded the benefits of remote work for retaining employees and boosting their productivity.&lt;/p&gt;
    &lt;p&gt;"Hybrid work is more than a change in technology—it's a change in mindset, a change in culture, and a change in the way you think about physical and virtual spaces to enable an inclusive and productive environment for all," Microsoft wrote, according to a snapshot of the blog retained by the Internet Archive. "The change isn't easy, but it's worth it. If you make the time to do it right, your employees will be more engaged, more productive, and more connected, even when they're miles away. And they'll be far less likely to leave for a competitor who has a more sophisticated and flexible model than you do."&lt;/p&gt;
    &lt;p&gt;The link to that blog post now redirects to one published on July 31 calling out how "hybrid work created new challenges for employee engagement" and how AI can solve them.&lt;/p&gt;
    &lt;head rend="h2"&gt;Read the full memo:&lt;/head&gt;
    &lt;p&gt;"How we work has forever changed. I remember starting at Microsoft in the late '90s, always in the office, no laptops, and primarily working with the people right down the hall. As technology evolved and our business expanded, we became more open, more global, and able to scale in ways we couldn't have imagined. Then the pandemic reshaped everything. It pushed us to think differently about work, to connect like never before (thank you Teams!), reminded us of how much we value being together, and gave us focus and autonomy in the traditional workday. We're not going back, and we shouldn't. Instead, we should take the best of what we've learned and move forward.&lt;/p&gt;
    &lt;p&gt;In the AI era, we are moving faster than ever, building world class technology that changes how people live and work, and how organizations everywhere operate. If you reflect on our history, the most meaningful breakthroughs happen when we build on each other's ideas together, in real time.&lt;/p&gt;
    &lt;p&gt;We've looked at how our teams work best, and the data is clear: when people work together in person more often, they thrive—they are more energized, empowered, and they deliver stronger results. As we build the AI products that will define this era, we need the kind of energy and momentum that comes from smart people working side by side, solving challenging problems together.&lt;/p&gt;
    &lt;p&gt;With that in mind, we're updating our flexible work expectations to three days a week in the office.&lt;/p&gt;
    &lt;p&gt;We'll roll this out in three phases: 1) starting in Puget Sound at the end of February; 2) expanding to other US locations; 3) and then launching outside the US.&lt;/p&gt;
    &lt;p&gt;Our goal with this change is to provide more clarity and consistency in how we come together, while maintaining the flexibility we know you value. We want you to continue to shape your schedule in ways that work best for you, making in-person time intentional and impactful. Importantly, this update is not about reducing headcount. It's about working together in a way that enables us to meet our customers' needs.&lt;/p&gt;
    &lt;p&gt;For some of you, this is not a change. For others this may be a bigger adjustment, which is exactly why we're providing time to plan thoughtfully. As part of these updates, we're also enhancing our workplace safety and security measures so we can continue to provide a workplace where every employee can do their best work.&lt;/p&gt;
    &lt;p&gt;What you need to know:&lt;/p&gt;
    &lt;p&gt;Puget Sound-area employees: If you live within 50 miles of a Microsoft office, you'll be expected to work onsite three days a week by the end of February. You'll receive a personalized email today with more details. Please connect with your manager and team to understand your organization's plans. If needed, you can request an exception by Friday, September 19.&lt;/p&gt;
    &lt;p&gt;Managers: You'll find actions to take, and the resources to support both you and your team on the Managers@Microsoft SharePoint.&lt;/p&gt;
    &lt;p&gt;All employees: You'll hear from your EVP or organizational leadership today with specific guidance. Each business will do what is best for their team, which means some groups will deviate from our company-wide expectations. If you are outside of the Puget Sound area, you do not need to take any action at this time unless your EVP communicates otherwise.&lt;/p&gt;
    &lt;p&gt;Timelines and details for additional US office locations will be announced soon. For employees outside the United States, we will begin planning in 2026. More information is available on the Flexible Work at Microsoft SharePoint.&lt;/p&gt;
    &lt;p&gt;As always, we'll keep learning together to ensure Microsoft is the best place for you to grow and have a great career. Let's keep moving forward together.&lt;/p&gt;
    &lt;p&gt;Thank you,&lt;/p&gt;
    &lt;p&gt;Amy"&lt;/p&gt;
    &lt;p&gt;Have a tip? Contact this reporter via email at astewart@businessinsider.com or Signal at +1-425-344-8242. Use a personal email address and a nonwork device; here's our guide to sharing information securely.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45184432</guid></item><item><title>Weave (YC W25) is hiring a founding AI engineer</title><link>https://www.ycombinator.com/companies/weave-3/jobs/SqFnIFE-founding-ai-engineer</link><description>&lt;doc fingerprint="951e4c15f89423dd"&gt;
  &lt;main&gt;
    &lt;p&gt;AI to understand engineering work&lt;/p&gt;
    &lt;p&gt;At Weave, we’re building the best software for the best engineering teams to move faster, and we want to hire exceptional engineers to help us do so.&lt;/p&gt;
    &lt;p&gt;We are a well-funded startup, backed by top investors, growing rapidly and currently profitable.&lt;/p&gt;
    &lt;p&gt;You'll be working directly with me (Andrew), the CTO. Before I was CTO of Weave I was the founding engineer at Causal, and I want to give you all the support and growth opportunities in this role that I got when I went through it.&lt;/p&gt;
    &lt;p&gt;You’ll also be working directly with Adam, the CEO. Adam runs sales at Weave, and before that worked as a sales executive at a few different high growth startups.&lt;/p&gt;
    &lt;p&gt;You are a good fit for Weave if you are a formidable engineer. This means you stop at nothing to accomplish your goal. We don't care much about your current skills or even what you've done before; we care that you will be able to do anything you set your mind to.&lt;/p&gt;
    &lt;p&gt;You must also be pragmatic. Weave is a startup so something is always on fire. You need to know when to let little fires burn and when to break out the extinguisher.&lt;/p&gt;
    &lt;p&gt;You must be a very good engineer who's committed to becoming a great engineer. The slope is more important than the Y-intercept.&lt;/p&gt;
    &lt;p&gt;You must be empathetic. We're building products for other people, so you need to be able to understand how other people think and why.&lt;/p&gt;
    &lt;p&gt;You must care about helping other software engineering teams be great. If that's not an exciting mission for you, it will be hard to stay motivated through the inevitable highs and lows.&lt;/p&gt;
    &lt;p&gt;You must be an excellent communicator. You’ll be working on a product that’s communicating with millions of engineers and leaders, so you need to be clear.&lt;/p&gt;
    &lt;p&gt;Finally you must be gritty. You should be accustomed to picking the hard option and pushing through it.&lt;/p&gt;
    &lt;p&gt;(Please feel free to apply even if some or all of these don't apply to you!)&lt;/p&gt;
    &lt;p&gt;Our tech stack is React + TypeScript on the frontend, Go on the backend, and Python for ML. Experience with any of those three languages is a bonus.&lt;/p&gt;
    &lt;p&gt;If you've already done lots of thinking about engineering productivity and how to improve it, that's great and we want to hear about it!&lt;/p&gt;
    &lt;p&gt;We hope your design sensibilities are passable.&lt;/p&gt;
    &lt;p&gt;As Weave’s founding AI engineer, your job is to build AI to understand and improve the work that software engineers do. You’ll be building our processes and standards as you go to make building every incremental feature easier. Your goal will be to delight customers with intelligence that makes their job 10x easier.&lt;/p&gt;
    &lt;p&gt;At Weave, we’re building the best software for the best engineering teams to move faster, and we want to hire exceptional engineers to help us do so.&lt;/p&gt;
    &lt;p&gt;We are a well-funded startup, backed by top investors and growing rapidly.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45184921</guid></item><item><title>E-paper display reaches the realm of LCD screens</title><link>https://spectrum.ieee.org/e-paper-display-modos</link><description>&lt;doc fingerprint="86c18b190a85c5f0"&gt;
  &lt;main&gt;
    &lt;p&gt;E-paper displays are prized for their readability and low power use, but they’ve long been dismissed as too slow for everyday computing.&lt;/p&gt;
    &lt;p&gt;Modos, a two-person startup with open-hardware roots, thinks it has cracked part of that problem with a development kit capable of driving an e-paper display at refresh rates up to a record 75 hertz.&lt;/p&gt;
    &lt;p&gt;The Modos Paper Monitor and Dev Kit, now available for crowdfunding on Crowd Supply, combines standard e-paper panels with an open source FPGA-based display controller. While the kit provides enthusiasts and developers a complete package (with e-paper display, display driver, and hardware adapter), it’s also an entry point for experimenting with different e-paper displays.&lt;/p&gt;
    &lt;p&gt;RELATED: How E Ink Developed Full-Color E-paper&lt;/p&gt;
    &lt;p&gt;“I would say instead of our secret sauce, we have open sauce,” says cofounder Alexander Soto. “You don’t even need to use the panel we’re offering. You could use a different panel and still get [75 Hz].”&lt;/p&gt;
    &lt;head rend="h2"&gt;E-paper at 75 Hz&lt;/head&gt;
    &lt;p&gt;Most e-paper panels update at a refresh rate of around 10 Hz or less. (E-paper is the generic term for screens that mimic the appearance of ink on paper—the most well-known brand being that made by the company E Ink.) Some displays don’t even quote a refresh rate and may require up to a full second to refresh.&lt;/p&gt;
    &lt;p&gt;A better refresh rate means a display can show more frames each second, which in turn provides smoother, more lifelike motion. Modern digital video is usually delivered at 30 or 60 frames per second, which until recently was well beyond the reach of an e-paper display. This is an area where e-paper clearly lags LCD displays, which start at 60 Hz and go up from there.&lt;/p&gt;
    &lt;p&gt;Modos is able to hit refresh rates of up to 75 Hz on a 13-inch e-paper panel with a 1,600 by 1,200 resolution. (a 6-inch e-paper panel with 1,448 by 1,072 resolution and the same refresh rate is available, too.) Bumping the refresh rate also reduces latency. That’s a key point, as it allows an e-paper display to be used in situations where latency matters, such as a computer or tablet display.&lt;/p&gt;
    &lt;p&gt;“A lot of people default to thinking that with e-readers or e-paper, it’s slow, it’s going to be flashing all the time,” says Soto. “Our challenge has been going to conferences, going to events, and showing people…e-paper can be very fast.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Open Source E-Paper Display Controller&lt;/head&gt;
    &lt;p&gt;Modos’s quoted 75-Hz refresh rate is the highest yet for an e-paper display, but it’s arguably not the key innovation. Several competitors already offer e-paper displays with refresh rates up to 60 Hz which, though lower, is close.&lt;/p&gt;
    &lt;p&gt;But Modos has a not-so-secret weapon: Caster, an open-source e-paper display controller that’s compatible with a wide variety of e-paper panels. The display controller, which is based on the AMD Spartan-6 FPGA, departs from typical e-paper controllers with pixel-level display management.&lt;/p&gt;
    &lt;p&gt;“Traditionally, the [e-paper display] controller used a single-state machine to control the entire panel, with only two states: static and updating,” says Modos cofounder Wenting Zhang. “Caster treats each pixel individually rather than as a whole panel, which allows localized control on the pixels.”&lt;/p&gt;
    &lt;p&gt;The FPGA display controller is paired with Modos’s Glider Mega Adapter, which includes four different display connectors compatible with several dozen e-paper displays ranging in size from 4.3 to 13 inches. Soto says the adapter can be used to repurpose displays salvaged from older e-readers, like Amazon’s Kindle.&lt;/p&gt;
    &lt;p&gt;A 75-Hz refresh rate allows for smoother scrolling. Modos&lt;/p&gt;
    &lt;p&gt;Modos also provides an application programming interface (API), written in the C programming language, that lets applications select display-driving modes dynamically. As the video above shows, a Linux window manager can be used to render text in a low-latency binary color mode, display maps in more detailed yet responsive gray scale, and display video with maximum-fidelity gray scale—all simultaneously on the same screen.&lt;/p&gt;
    &lt;p&gt;The code and schematics for Caster, Glider, and the API are open source and available on Github.&lt;/p&gt;
    &lt;head rend="h2"&gt;Crowdfunding for E-paper Innovation&lt;/head&gt;
    &lt;p&gt;Modos’s crowdfunding campaign is set to conclude on 18 September. Orders are expected to ship in January of 2026, although (as is often the case for crowdfunded projects) the shipping window is not guaranteed.&lt;/p&gt;
    &lt;p&gt;Getting to this stage has taken several years. The company’s founders initially hoped to build an e-paper laptop, the Modos Paper Laptop, which was announced in January of 2022. However, the realities of electronics manufacturing complicated that project early in its life and the laptop was never made available to order.&lt;/p&gt;
    &lt;p&gt;“Part of it was that the primary aspect ratio for the majority of [laptop] chassises are for 16:9 and 16:10. And when you look at e-paper displays, it was an aspect ratio of 4:3. So, we either had to make a custom chassis, or a custom panel, both of them being prohibitively expensive,” says Soto.&lt;/p&gt;
    &lt;p&gt;Panel sourcing also remains a hurdle. E-paper’s production is geared toward e-readers and signage, which means most panels aren’t the right size for a computer. However, the Modos Paper Monitor and Dev Kit found a practical compromise in recently introduced 13-inch e-paper displays, many of which provide a resolution similar to LCD and OLED panels developed for laptops.&lt;/p&gt;
    &lt;p&gt;In this way, the Dev Kit is a continuation of Modos’s original goal. While building a full-fledged e-paper laptop was impractical, the Dev Kit’s high refresh rate, open-source display controller, and API give ambitious users the opportunity to implement their own low-latency e-paper computer display—or anything else they put their mind to.&lt;/p&gt;
    &lt;p&gt;This article was updated on 8 September 2025 to replace mentions of “E Ink” (the specific e-paper technology developed by the company of the same name) with “e-paper.”&lt;/p&gt;
    &lt;p&gt;Matthew S. Smith is a freelance consumer technology journalist with 17 years of experience and the former Lead Reviews Editor at Digital Trends. An IEEE Spectrum Contributing Editor, he covers consumer tech with a focus on display innovations, artificial intelligence, and augmented reality. A vintage computing enthusiast, Matthew covers retro computers and computer games on his YouTube channel, Computer Gaming Yesterday.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45185756</guid></item><item><title>Tomorrow's emoji today: Unicode 17.0</title><link>https://jenniferdaniel.substack.com/p/tomorrows-emoji-today-unicode-170</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45185875</guid></item><item><title>Dropbox Paper mobile App Discontinuation</title><link>https://help.dropbox.com/installs/paper-mobile-discontinuation</link><description>&lt;doc fingerprint="62072215ad1039f1"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;In order to focus on delivering a consistent, high-quality experience on paper.dropbox.com, the Dropbox Paper mobile app will be discontinued on October 9, 2025. If you already have the app installed on your device, it will no longer function after this date. &lt;/p&gt;
      &lt;p&gt;You can continue using Paper on Web on any of your devices after this date by logging into paper.dropbox.com using your browser.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45186011</guid></item><item><title>iPhone Air</title><link>https://www.apple.com/newsroom/2025/09/introducing-iphone-air-a-powerful-new-iphone-with-a-breakthrough-design/</link><description>&lt;doc fingerprint="b42a7b8d51275bd4"&gt;
  &lt;main&gt;
    &lt;p&gt; PRESS RELEASE September 9, 2025 &lt;/p&gt;
    &lt;head rend="h1"&gt; Introducing iPhone Air, a powerful new iPhone &lt;lb/&gt; with a breakthrough design &lt;/head&gt;
    &lt;p&gt; iPhone Air features an impossibly thin and light &lt;lb/&gt;design that is more durable than any previous model,&lt;lb/&gt;with innovative camera experiences and&lt;lb/&gt;remarkable all‑day battery life&lt;/p&gt;
    &lt;p&gt;design that is more durable than any previous model,&lt;/p&gt;
    &lt;p&gt;with innovative camera experiences and&lt;/p&gt;
    &lt;p&gt;remarkable all‑day battery life&lt;/p&gt;
    &lt;p&gt;CUPERTINO, CALIFORNIA Apple today debuted the all-new iPhone Air, the thinnest iPhone ever made, with pro performance. iPhone Air features a breakthrough titanium design that is elegant and light yet strong, with an innovative internal architecture that enables the latest iPhone experiences. The back of iPhone Air is now protected with Ceramic Shield, and the front cover uses Ceramic Shield 2, delivering 3x better scratch resistance, making iPhone Air more durable than any previous iPhone. iPhone Air also features a stunning 6.5-inch Super Retina XDR display with ProMotion up to 120Hz.1 With the most Apple-designed chips in an iPhone — the powerhouse A19 Pro, N1, and C1X — iPhone Air is the most power-efficient iPhone ever made. Paired with the redesigned internal architecture and software optimizations, iPhone Air has fantastic all-day battery life. A powerful 48MP Fusion Main camera enables the equivalent of four lenses with incredible image quality, and the innovative 18MP Center Stage front camera takes selfies to the next level. &lt;/p&gt;
    &lt;p&gt;iPhone Air will be available in four gorgeous finishes: space black, cloud white, light gold, and sky blue. Pre-orders begin Friday, September 12, with availability beginning Friday, September 19. &lt;/p&gt;
    &lt;p&gt;“The all-new iPhone Air is so powerful, yet impossibly thin and light, that you really have to hold it to believe it’s real. This huge leap in design and engineering is only made possible through Apple innovation, especially Apple silicon,” said John Ternus, Apple’s senior vice president of Hardware Engineering. “iPhone Air is a brand-new member of the iPhone family that delivers advanced features our users will love, like pro performance, a versatile 48MP Fusion camera system, our innovative Center Stage front camera, and great all-day battery life — all in a breakthrough design that feels like you’re holding the future.” &lt;/p&gt;
    &lt;head rend="h2"&gt;A Breakthrough Design&lt;/head&gt;
    &lt;p&gt;Featuring a breakthrough design with pro performance, iPhone Air is the thinnest iPhone ever made at 5.6mm, and it is incredibly light, with a large, stunning display. The grade 5 titanium frame is strong, with an elegant high-gloss mirror finish, and a new plateau on the back that is precision-milled on both sides to house the cameras, speaker, and Apple silicon. This maximizes space for the battery to deliver remarkable all-day battery life. The thin design also features the Action button, so users can easily access a variety of functions with just a press, and Camera Control, to quickly launch the camera or enable visual intelligence.2 &lt;/p&gt;
    &lt;p&gt;The stunning 6.5-inch Super Retina XDR display features ProMotion, with an adaptive refresh rate of up to 120Hz for smooth scrolling and stunning graphics. The Always-On display shows important information at a glance, and when not in use, it efficiently adjusts down to 1Hz. iPhone Air is easy to use outside with 3000 nits peak outdoor brightness — the highest ever on iPhone — and 2x better outdoor contrast. &lt;/p&gt;
    &lt;p&gt;iPhone Air also introduces the Ceramic Shield 2 front cover, which is tougher than any smartphone glass or glass-ceramic with a new Apple-designed coating, providing 3x better scratch resistance and improved anti-reflection to reduce glare. For the very first time, Ceramic Shield now protects the back of iPhone, including the plateau, delivering 4x better resistance to cracks than the back glass on previous models. And with the strong titanium frame, iPhone Air exceeds Apple’s stringent bend strength requirements. This design makes iPhone Air more durable than any previous iPhone. &lt;/p&gt;
    &lt;head rend="h2"&gt;Powerful Camera Systems&lt;/head&gt;
    &lt;p&gt;iPhone Air introduces an all-new Center Stage front camera that advances the photo and video experience. The Center Stage front camera features the first square front camera sensor on iPhone, offering a wide field of view and capturing photos up to 18MP. Users no longer have to rotate their iPhone to take a landscape selfie — they can take photos and videos in portrait or landscape while holding their iPhone vertically. For group shots, Center Stage for photos uses AI to automatically expand the field of view and can rotate from portrait to landscape to include everyone in the frame. The Center Stage front camera enables ultra-stabilized video in 4K HDR, and users can record on the front and rear cameras simultaneously with Dual Capture — perfect for documenting themselves and the world around them. During calls over FaceTime or third-party apps, Center Stage for video calls keeps users stable and positioned in frame. &lt;/p&gt;
    &lt;p&gt;A versatile new 48MP Fusion camera system gives users the equivalent of four lenses in their pocket. The custom main lens enables the popular 28mm and 35mm focal lengths, so users have more options to frame their shot, and the large 2.0µm quad-pixel sensor with sensor-shift OlS excels in low light. Users can also get closer to their subject with the optical-quality 2x Telephoto, which features an updated Photonic Engine that captures more lifelike details and color. &lt;/p&gt;
    &lt;p&gt;A new image pipeline built for iPhone Air enables next-generation portraits with Focus Control at the same level as multicamera systems, automatically capturing depth information so users can turn photos into portraits later in the Photos app. iPhone Air also supports the latest generation of Photographic Styles, including a new Bright style that brightens skin tones and applies a pop of vibrance across the image.3 &lt;/p&gt;
    &lt;p&gt;iPhone Air captures stunning video, with the ability to record in 4K60 fps Dolby Vision, and supports Action mode. Video is captured with Spatial Audio for immersive listening; Audio Mix lets users adjust sound after capture to boost voices and reduce ambient noise; and wind noise reduction minimizes unwanted noise. &lt;/p&gt;
    &lt;head rend="h2"&gt;Powered by Apple Silicon&lt;/head&gt;
    &lt;p&gt;The design of iPhone Air is only possible with Apple silicon. The high-performance A19 Pro, N1, and C1X chips make it the most power-efficient iPhone ever made. &lt;/p&gt;
    &lt;p&gt;The powerhouse A19 Pro features a new 6-core CPU that improves performance and efficiency for the tasks users do every day, delivering the fastest CPU in any smartphone. The 5-core GPU has an upgraded architecture, delivering next-level mobile gaming, including AAA titles. Neural Accelerators are built into each GPU core, bringing up to 3x the peak GPU compute over the previous generation, excellent for powering generative AI models running on device. &lt;/p&gt;
    &lt;p&gt;iPhone Air features N1, a new Apple-designed wireless networking chip that enables Wi-Fi 7, Bluetooth 6, and Thread. In addition to powering the latest generation of wireless technologies, N1 improves the overall performance and reliability of features like Personal Hotspot and AirDrop. iPhone Air also features C1X, a new cellular modem designed by Apple. C1X is up to 2x faster than C1, and for the same cellular technologies, it is even faster than the modem in iPhone 16 Pro, while using 30 percent less energy overall. This makes C1X the most power-efficient modem in an iPhone. &lt;/p&gt;
    &lt;head rend="h2"&gt;Remarkable All-Day Battery Life&lt;/head&gt;
    &lt;p&gt;Featuring advanced Apple silicon, an internal architecture that maximizes space for the battery, and software optimizations, iPhone Air delivers fantastic all-day battery life. The new Adaptive Power Mode in iOS 26 also gets to know a user’s typical battery consumption and anticipates when they might run low, intelligently conserving power to help get them through the day. &lt;/p&gt;
    &lt;head rend="h2"&gt;eSIM: A Flexible, Convenient, and Secure Connection&lt;/head&gt;
    &lt;p&gt;iPhone Air features an eSIM-only design that saves space internally, helping enable the unbelievably light and thin form factor.4 eSIM offers greater flexibility, better security, and seamless connectivity compared to traditional physical SIM cards. An industry standard, eSIM is supported by over 500 carriers worldwide, including AT&amp;amp;T, T-Mobile, Verizon, and more. eSIM also makes staying connected while traveling even more convenient, allowing continued connectivity through affordable international roaming plans from users’ home carriers or local prepaid options available with more than 200 carriers. For better security, eSIM cannot be physically removed if an iPhone is lost or stolen, and managing travel eSIMs is even easier with a new streamlined setup in iOS 26. &lt;/p&gt;
    &lt;head rend="h2"&gt;Featuring iOS 26 with New Apple Intelligence Capabilities&lt;/head&gt;
    &lt;p&gt;iOS 26 elevates the iPhone experience with a beautiful new design, powerful Apple Intelligence capabilities, and meaningful improvements to the apps users rely on every day. The new design with Liquid Glass makes apps and system experiences more expressive and delightful, bringing greater focus to content while keeping iOS instantly familiar. Apple Intelligence now translates text and audio on the go with Live Translation, helping users communicate across languages in Messages, FaceTime, and Phone.5 Updates to visual intelligence allow users to capture a screenshot and easily search or take action on anything they are viewing on their iPhone screen. The on-device foundation model at the core of Apple Intelligence is available to all developers, with apps already offering new intelligent, privacy-protected experiences that can even be used when offline. New screening tools for calls and messages help eliminate distractions so users can focus on the conversations that matter most. iOS 26 also introduces new features in CarPlay, Apple Music, Maps, and Wallet, as well as Apple Games, a brand-new app that gives players a single destination for all their games. &lt;/p&gt;
    &lt;head rend="h2"&gt;Beautiful New Accessories&lt;/head&gt;
    &lt;p&gt;Apple is introducing a new ecosystem of accessories to complement the breakthrough design of iPhone Air: &lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The iPhone Air Case with MagSafe — available in frost and shadow — has an ultra-thin translucent design with a lightly frosted interior, a high-gloss outer surface, and a reinforced polycarbonate frame to protect iPhone Air from scratches and drops.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The slim and lightweight iPhone Air Bumper — available in four matching colors — perfectly frames iPhone Air with a reinforced polycarbonate design for added edge protection.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Crafted from 100 percent recycled yarns, the Crossbody Strap drapes comfortably, with embedded flexible magnets and stainless steel sliding mechanisms to easily adjust the length and keep both straps securely aligned. The Crossbody Strap will be available in 10 colors: black, light gray, blue, light blue, purple, sienna, green, neon yellow, tan, and orange.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The iPhone Air MagSafe Battery has a thin and light design that seamlessly attaches to the back of the device. The MagSafe Battery quickly charges iPhone Air when the battery is low, and maximizes battery life when connected throughout the day, delivering up to 40 hours of video playback when used together.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;iPhone Air and the Environment&lt;/head&gt;
    &lt;p&gt;Apple 2030 is the company’s ambitious plan to be carbon neutral across its entire footprint by the end of this decade by reducing product emissions from their three biggest sources: materials, electricity, and transportation. iPhone Air is made with 35 percent recycled content, including 80 percent recycled titanium, the highest ever for an iPhone, and 100 percent recycled cobalt in the battery. A new titanium USB-C port is 3D-printed to be thinner and stronger, fitting into the slim design while using 33 percent less material than a conventional forging process. iPhone Air is manufactured with 45 percent renewable electricity, like wind and solar, across the supply chain. It is designed to be durable, repairable, and offer industry-leading software support, while meeting Apple’s high standards for energy efficiency and safe chemistry. The paper packaging is 100 percent fiber-based and can be easily recycled. &lt;/p&gt;
    &lt;p&gt;Pricing and Availability &lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;iPhone Air will be available in space black, cloud white, light gold, and sky blue, starting with 256GB storage, as well as 512GB and 1TB options. iPhone Air starts at $999 (U.S.) or $41.62 (U.S.) per month.6&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Apple offers great ways to save and upgrade to the latest iPhone models. With Apple Trade In, customers can get $200 to $700 (U.S.) in credits when they trade in iPhone 13 or newer.7 Apple also partners with select carriers to offer incredible deals, and customers can get up to $1,100 (U.S.) in credits when they trade in iPhone 13 or newer — in any condition — to put toward iPhone 17 Pro. Customers can take advantage of carrier deals by visiting the Apple Store online or an Apple Store location. For carrier deal eligibility requirements and more details, see apple.com/shop/buy-iphone/carrier-offers. To see what their device is worth and for trade-in terms and conditions, customers can visit apple.com/shop/trade-in.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Customers in more than 63 countries and regions, including Australia, Canada, China, Colombia, France, Germany, India, Japan, Malaysia, Mexico, Singapore, South Korea, Thailand, Türkiye, the UAE, the UK, the U.S., and Vietnam, will be able to pre-order iPhone Air beginning at 5 a.m. PDT this Friday, September 12, with availability beginning Friday, September 19. iPhone Air will be available in 22 other countries and regions beginning Friday, September 26.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;iOS 26 will be available as a free software update on Monday, September 15. Some features may not be available in all languages or regions, and availability may vary due to local laws and regulations. For more information about availability, visit apple.com.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Apple Intelligence is available in beta with support for these languages: English, French, German, Italian, Portuguese (Brazil), Spanish, Chinese (simplified), Japanese, and Korean. More languages will be coming by the end of this year: Danish, Dutch, Norwegian, Portuguese (Portugal), Swedish, Turkish, Chinese (traditional), and Vietnamese. Some features may not be available in all regions or languages. For feature and language availability and system requirements, see support.apple.com/en-us/121115.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Apple is extending free access to satellite features for an additional year for existing iPhone 14 and iPhone 15 users. The free trial will be extended for iPhone 14 and iPhone 15 users who have activated their device in a country that supports Apple’s satellite features prior to 12 a.m. PT on September 9, 2025. For satellite feature availability, visit support.apple.com/en-us/105097.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;iPhone Air MagSafe Battery will be available for $99 (U.S.). iPhone Air Case with MagSafe is available for $49 (U.S.), iPhone Air Bumper will be available for $39 (U.S.), and a Crossbody Strap will be available for $59 (U.S.). FineWoven Wallet with MagSafe will be available for $59 (U.S.) in black, navy, midnight, purple, fox orange, and moss.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The Apple-designed 40W Dynamic Power Adapter with 60W Max will be available for $39 (U.S.), and a Qi2 25W-certified MagSafe Charger will be available in a 1-meter length for $39 (U.S.) or a 2-meter length for $49 (U.S.).8&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;AppleCare delivers exceptional service and support, with flexible options for Apple users. Customers can choose AppleCare+ to cover their new iPhone, or in the U.S., AppleCare One to protect multiple products in one simple plan. Both plans include coverage for accidents like drops and spills, theft and loss protection on eligible products, battery replacement service, and 24/7 support from Apple experts. For more information, visit apple.com/applecare.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;iCloud+ plans start at just $0.99 (U.S.) per month, providing additional storage to keep photos, videos, files, and more safe in the cloud and accessible across devices. iCloud+ also gives access to premium features such as event creation in the Apple Invites app, as well as Private Relay, Hide My Email, custom email domains, and HomeKit Secure Video. With Family Sharing, users can share their subscription with five other family members at no extra cost.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Customers who purchase iPhone Air may receive three free months of Apple Arcade, Apple Fitness+, Apple Music, Apple News+, and Apple TV+ with a new subscription. Offer and services availability varies by region. See apple.com/promo for details.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Share article&lt;/p&gt;
    &lt;head rend="h2"&gt;Media&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Text of this article&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Media in this article&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;The display has rounded corners that follow a beautiful curved design, and these corners are within a standard rectangle. When measured as a standard rectangular shape, the screen is 6.55 inches diagonally. The actual viewable area is smaller.&lt;/item&gt;
      &lt;item&gt;Visual intelligence is available on any Apple Intelligence-enabled iPhone. Some capabilities may not be available in all languages and regions. For more details, see support.apple.com/en-us/121115#visual-intelligence.&lt;/item&gt;
      &lt;item&gt;The new Bright Photographic Style will be available in iOS 26 on iPhone 16, iPhone 16 Plus, iPhone 16 Pro, iPhone 16 Pro Max, iPhone 17, iPhone Air, iPhone 17 Pro, and iPhone 17 Pro Max.&lt;/item&gt;
      &lt;item&gt;Use of an eSIM requires a carrier that supports eSIM and a wireless service plan. See carrier for details. To learn more, visit apple.com/esim.&lt;/item&gt;
      &lt;item&gt;Live Translation in Messages supports English (U.S., UK), French (France), German, Italian, Japanese, Korean, Portuguese (Brazil), Spanish (Spain), and Chinese (simplified). Live Translation in Phone and FaceTime is available for one-on-one calls in English (U.S., UK), French (France), German, Portuguese (Brazil), and Spanish (Spain).&lt;/item&gt;
      &lt;item&gt;Financing available to qualified customers, subject to credit approval and credit limit, and requires users to select Citizens One Apple iPhone Payments or Apple Card Monthly Installments (ACMI) as their payment type at checkout at Apple. They’ll need to select AT&amp;amp;T, Boost Mobile, T‑Mobile, or Verizon as their carrier when they check out. An iPhone purchased with ACMI is always unlocked, so they can switch carriers at any time, subject to their carrier’s terms. Taxes and shipping on items purchased using ACMI are subject to their card’s variable APR, not the ACMI 0 percent APR. ACMI is not available for purchases made online at special storefronts. The last month’s payment for each product will be the product’s purchase price, less all other payments at the monthly payment amount. ACMI financing is subject to change at any time for any reason, including but not limited to, installment term lengths and eligible products. See the Apple Card Customer Agreement for more information about ACMI. Additional Citizens One Apple iPhone Payments terms are available at apple.com/legal/sales-support/iphoneinstallments_us.&lt;/item&gt;
      &lt;item&gt;Trade-in values will vary based on the condition, year, and configuration of the eligible trade-in device.&lt;/item&gt;
      &lt;item&gt;The 40W Dynamic Power Adapter with 60W Max will be available in Canada, China mainland, Japan, Mexico, Taiwan, the Philippines, and the U.S.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45186015</guid></item><item><title>Memory Integrity Enforcement</title><link>https://security.apple.com/blog/memory-integrity-enforcement/</link><description>&lt;doc fingerprint="b1fb9999b822e0ec"&gt;
  &lt;main&gt;
    &lt;p&gt;Memory Integrity Enforcement (MIE) is the culmination of an unprecedented design and engineering effort, spanning half a decade, that combines the unique strengths of Apple silicon hardware with our advanced operating system security to provide industry-first, always-on memory safety protection across our devices â without compromising our best-in-class device performance. We believe Memory Integrity Enforcement represents the most significant upgrade to memory safety in the history of consumer operating systems.&lt;/p&gt;
    &lt;p&gt;There has never been a successful, widespread malware attack against iPhone. The only system-level iOS attacks we observe in the wild come from mercenary spyware, which is vastly more complex than regular cybercriminal activity and consumer malware. Mercenary spyware is historically associated with state actors and uses exploit chains that cost millions of dollars to target a very small number of specific individuals and their devices. Although the vast majority of users will never be targeted in this way, these exploit chains demonstrate some of the most expensive, complex, and advanced attacker capabilities at any given time and are uniquely deserving of study as we work to protect iPhone users against even the most sophisticated threats. Known mercenary spyware chains used against iOS share a common denominator with those targeting Windows and Android: they exploit memory safety vulnerabilities, which are interchangeable, powerful, and exist throughout the industry.&lt;/p&gt;
    &lt;p&gt;For Apple, improving memory safety is a broad effort that includes developing with safe languages and deploying mitigations at scale. (For a primer on how we think about memory safety, see the opening of this post.) We created Swift, an easy-to-use, memory-safe language, which we employ for new code and targeted component rewrites. In iOS 15, we introduced kalloc_type, a secure memory allocator for the kernel, followed in iOS 17 by its user-level counterpart, xzone malloc. These secure allocators take advantage of knowing the type â or purpose â of allocations so that memory can be organized in a way that makes exploiting most memory corruption vulnerabilities inherently difficult.&lt;/p&gt;
    &lt;p&gt;In 2018, we were the first in the industry to deploy Pointer Authentication Codes (PAC) in the A12 Bionic chip, to protect code flow integrity in the presence of memory corruption. The strong success of this defensive mechanism in increasing exploitation complexity left no doubt that the deep integration of software and hardware security would be key to addressing some of our greatest security challenges. With PAC behind us, we immediately began design and evaluation work to find the most effective way to build sophisticated memory safety capabilities right into Apple silicon.&lt;/p&gt;
    &lt;p&gt;Arm published the Memory Tagging Extension (MTE) specification in 2019 as a tool for hardware to help find memory corruption bugs. MTE is, at its core, a memory tagging and tag-checking system, where every memory allocation is tagged with a secret; the hardware guarantees that later requests to access memory are granted only if the request contains the correct secret. If the secrets donât match, the app crashes, and the event is logged. This allows developers to identify memory corruption bugs immediately as they occur.&lt;/p&gt;
    &lt;p&gt;We conducted a deep evaluation and research process to determine whether MTE, as designed, would meet our goals for hardware-assisted memory safety. Our analysis found that, when employed as a real-time defensive measure, the original Arm MTE release exhibited weaknesses that were unacceptable to us, and we worked with Arm to address these shortcomings in the new Enhanced Memory Tagging Extension (EMTE) specification, released in 2022. More importantly, our analysis showed that while EMTE had great potential as specified, a rigorous implementation with deep hardware and operating system support could be a breakthrough that produces an extraordinary new security mechanism.&lt;/p&gt;
    &lt;p&gt;Consider that MTE can be configured to report memory corruption either synchronously or asynchronously. In the latter mode, memory corruption doesnât immediately raise an exception, leaving a race window open for attackers. We would not implement such a mechanism. We believe memory safety protections need to be strictly synchronous, on by default, and working continuously. But supporting always-on, synchronous MTE across key attack surfaces while preserving a great, high-performance user experience is extremely demanding for hardware to support.&lt;/p&gt;
    &lt;p&gt;In addition, for MTE to provide memory safety in an adversarial context, we would need to finely tune the operating system to defend the new semantics and the confidentiality of memory tags on which MTE relies. Ultimately, we determined that to deliver truly best-in-class memory safety, we would carry out a massive engineering effort spanning all of Apple â including updates to Apple silicon, our operating systems, and our software frameworks. This effort, together with our highly successful secure memory allocator work, would transform MTE from a helpful debugging tool into a groundbreaking new security feature.&lt;/p&gt;
    &lt;p&gt;Today weâre introducing the culmination of this effort: Memory Integrity Enforcement (MIE), our comprehensive memory safety defense for Apple platforms. Memory Integrity Enforcement is built on the robust foundation provided by our secure memory allocators, coupled with Enhanced Memory Tagging Extension (EMTE) in synchronous mode, and supported by extensive Tag Confidentiality Enforcement policies. MIE is built right into Apple hardware and software in all models of iPhone 17 and iPhone Air and offers unparalleled, always-on memory safety protection for our key attack surfaces including the kernel, while maintaining the power and performance that users expect. In addition, weâre making EMTE available to all Apple developers in Xcode as part of the new Enhanced Security feature that we released earlier this year during WWDC.&lt;/p&gt;
    &lt;p&gt;The rest of this post dives into the intensive engineering effort required to design and validate Memory Integrity Enforcement.&lt;/p&gt;
    &lt;head rend="h3"&gt;Designing Memory Integrity Enforcement&lt;/head&gt;
    &lt;p&gt;Memory Integrity Enforcement starts with our secure memory allocators â kalloc_type, xzone malloc, and WebKitâs libpas â all of which use type information to decide how to organize memory allocations. With both use-after-free and out-of-bounds bugs, an attackerâs goal is to create overlapping interpretations of memory, which they achieve by controlling the precise position of certain allocations â of a specific type â that is advantageous to them. The type-aware placement policies of our secure memory allocators help thwart these memory corruption techniques, as we described in our kalloc_type post. Our secure allocators set a new high-water mark of software protection against memory corruption, while preserving the same or better performance as the allocators they replaced.&lt;/p&gt;
    &lt;p&gt;Allocators can apply protections only at the granularity of memory pages â 16KB on iOS â which is a natural fit for multi-page allocations. For smaller allocations, our secure allocators can use page-level protections to help prevent memory corruption attacks across different type buckets. However, page-level protections are too coarse to defend against attacks within the same type bucket, and we use memory tagging to close this gap.&lt;/p&gt;
    &lt;p&gt;Letâs look at how EMTE can be used to protect against two of the most common types of memory corruption: buffer overflows and use-after-free vulnerabilities. For buffer overflows, the allocator is responsible for using different tags for neighboring allocations. If a request to access memory spills over to adjacent memory that has a different tag, the hardware blocks it, and the operating system can take action and terminate the process. We represent this visually below with three adjacent allocations, tagged with three different secrets: âºï¸, ð¼, and â¹ï¸. Two access attempts with the ð¼ tag are permitted to ð¼-tagged memory, but the third attempt is blocked as it spills over into the adjacent, â¹ï¸-tagged allocation.&lt;/p&gt;
    &lt;p&gt;Memory Integrity Enforcement blocks buffer overflows&lt;/p&gt;
    &lt;p&gt;The allocator is also responsible for retagging memory as it gets reused for other purposes. In the image below, the ð¼ allocation is retagged as â¹ï¸ after it has been freed and reallocated by the system. If a request to the retagged memory is made with the older ð¼ tag, as would be seen in use-after-free exploits, the hardware blocks it and lets the operating system take further action.&lt;/p&gt;
    &lt;p&gt;Memory Integrity Enforcement blocks use-after-free access&lt;/p&gt;
    &lt;p&gt;A key weakness of the original MTE specification is that access to non-tagged memory, such as global variables, is not checked by the hardware. This means attackers donât have to face as many defensive constraints when attempting to control core application configuration and state. With Enhanced MTE, we instead specify that accessing non-tagged memory from a tagged memory region requires knowing that regionâs tag, making it significantly harder for attackers to turn out-of-bounds bugs in dynamic tagged memory into a way to sidestep EMTE by directly modifying non-tagged allocations.&lt;/p&gt;
    &lt;p&gt;Finally, we developed Tag Confidentiality Enforcement to protect the implementation of our secure allocators from technical threats and to guard the confidentiality of EMTE tags â including against side-channel and speculative-execution attacks.&lt;/p&gt;
    &lt;p&gt;Our typed allocators and EMTE both rely on confidentiality of kernel data structures from user applications, and of the tags chosen by the allocator. Attackers might attempt to defeat EMTE, and in turn Memory Integrity Enforcement, by revealing these secrets. To protect the kernel allocator backing store and tag storage, we use the Secure Page Table Monitor, which provides strong guarantees even in the presence of a kernel compromise. We also ensure that when the kernel accesses memory on behalf of an application, it's subject to the same tag-checking rules as userspace.&lt;/p&gt;
    &lt;p&gt;Attacks based on speculative execution can also be used to expose secrets. To improve performance, modern CPUs predict the execution of instructions that follow prior, potentially longer latency instructions. If the prediction is correct, computation is very fast. If itâs wrong, the CPU discards the prediction, and computation is slower. Unfortunately, discarded predictions have observable effects that can reveal system state and data, and because speculative attacks never cause the system to crash or misbehave in observable ways during their use, theyâre particularly useful for an attacker. For example, evaluating a pointer authentication instruction speculatively exposed timing differences in our original implementation of Pointer Authentication Codes (PAC), which would allow the valid signature to be isolated. During the design phase for Memory Integrity Enforcement, we identified and addressed the three speculative vulnerabilities that could undermine tag confidentiality.&lt;/p&gt;
    &lt;p&gt;First, when EMTE is active, requests to access memory cause the hardware to check tags. It's crucial that evaluating a tag-checking instruction speculatively doesnât expose timing differences that would allow an attacker to isolate the valid tag. From the start, we designed the Apple silicon implementation so that tag values canât influence speculative execution in any way. Recently published security research demonstrates that the MTE implementation on Googleâs Pixel devices is vulnerable to this type of attack, allowing MTE to be bypassed in Google Chrome and the Linux kernel.&lt;/p&gt;
    &lt;p&gt;Second, allocators assign random tags to memory, and attackers must not be able to predict tag values that the system will choose. We address this issue by frequently re-seeding the underlying pseudo-random generator used to select new tags.&lt;/p&gt;
    &lt;p&gt;Third, Spectre variant 1 (V1) is a speculative-execution vulnerability that allows attackers to exploit conditional branches to leak data, including MTE tag values. To date, there has been no solution to this problem in consumer operating systems, because general Spectre V1 mitigations such as Speculative Load Hardening have a prohibitive CPU cost. The presence of EMTE leaves Spectre V1 as one of the last avenues available to attackers to help guide their attacks, so we designed a completely novel mitigation that limits the effective reach of Spectre V1 leaks â at virtually zero CPU cost â and forces attackers to contend with type segregation. This mitigation makes it impractical for attackers to use Spectre V1, as they would typically need 25 or more V1 sequences to reach more than 95 percent exploitability rate â unless one of these sequences is related to the bug being exploited, following similar reasoning as our kalloc_type analysis.&lt;/p&gt;
    &lt;p&gt;Our mission with Memory Integrity Enforcement is to protect all users by default and provide an extraordinary disruption to the exploitation of memory corruption vulnerabilities. To do so, we considered a wide set of threats, including some of the most challenging ones â such as side channels â and arrived at this extensive combination of features not present in other MTE implementations. Google took a great first step last year when they offered MTE to those who opt in to their program for at-risk users. But even for users who turn it on, the effectiveness of MTE on Android is limited by the lack of deep integration with the operating system that distinguishes Memory Integrity Enforcement and its use of EMTE on Apple silicon.&lt;/p&gt;
    &lt;p&gt;For the new A19 and A19 Pro chips to support Memory Integrity Enforcement, we dedicated an extraordinary amount of Apple silicon resources to security â more than ever before â including CPU area, CPU speed, and memory for tag storage. And to fully realize this hardware investment, we designed all of the new operating system elements of MIE jointly with our hardware work, including secure allocators, EMTE, and tag confidentiality protections.&lt;/p&gt;
    &lt;p&gt;Because EMTE tag checking imposes a performance cost, we designed Memory Integrity Enforcement to take advantage of our secure allocators first and use EMTE to protect only smaller individual allocations within a type bucket, which software allocators canât defend on their own. Then, by knowing where and how we would deploy EMTE, we could accurately model the tag-checking demand of the operating system, and design our silicon to satisfy it. Our hardware implementation influenced additional software design decisions, reducing the overhead of tag checks even further. Importantly, deploying EMTE with this level of precision supports our strategy to provide as many memory safety improvements as possible to users on previous iPhone generations, which donât support EMTE.&lt;/p&gt;
    &lt;p&gt;For the security evaluation of Memory Integrity Enforcement, we involved our offensive research team from the very beginning. From 2020 to 2025, they continuously analyzed and attacked the system â first conceptually, with theoretical exploitation avenues, then with practical attacks in simulated environments, and eventually on new hardware prototypes. Prolonged engagement from our offensive research team allowed us to identify and eradicate entire attack strategies and techniques before attackers could ever discover them, leading to a stronger, more mature feature from the outset.&lt;/p&gt;
    &lt;p&gt;Our offensive research team identified where and how attackers are most likely to break into the system, and our deployment of Memory Integrity Enforcement is deeply guided by their findings. Notably, this includes making sure that this powerful new protection is available to third-party apps that are likely entry points for attackers â such as social networks, messaging apps, or any other app where a specific user can be targeted. Starting immediately with the launch of MIE, any developer can begin testing this powerful protection for their app, including EMTE on hardware that supports it, using the Enhanced Security settings in Xcode.&lt;/p&gt;
    &lt;p&gt;The meticulous planning and implementation of Memory Integrity Enforcement made it possible to maintain synchronous tag checking for all the demanding workloads of our platforms, delivering groundbreaking security with minimal performance impact, while remaining completely invisible to users.&lt;/p&gt;
    &lt;head rend="h3"&gt;Security evaluation&lt;/head&gt;
    &lt;p&gt;Memory Integrity Enforcement started with a deeply ambitious goal: to make it immensely more expensive and difficult to develop and maintain mercenary spyware attacks based on memory corruption against our platforms. While thereâs no such thing as perfect security, MIE is designed to dramatically constrain attackers and their degrees of freedom during exploitation.&lt;/p&gt;
    &lt;p&gt;Throughout the design and implementation of Memory Integrity Enforcement, our offensive research team evaluated our progress by looking at sophisticated exploit chains that were previously used against our platform, recent vulnerabilities, and our own internal research. First, we worked on rebuilding and adapting previously seen exploit chains to systems protected by MIE. But itâs not sufficient to consider only previous chains that were developed before MIE existed, because attackers will surely adapt in reaction to these new protections. We therefore also evaluated a selection of more recent vulnerabilities that we expected would have the best chance of surviving MIE. For these, we meticulously enumerated all possible exploitation opportunities, similar to our evaluation of SockPuppet against kalloc_type.&lt;/p&gt;
    &lt;p&gt;Both approaches revealed the same conclusion: Memory Integrity Enforcement vastly reduces the exploitation strategies available to attackers. Though memory corruption bugs are usually interchangeable, MIE cut off so many exploit steps at a fundamental level that it was not possible to restore the chains by swapping in new bugs. Even with substantial effort, we could not rebuild any of these chains to work around MIE. The few memory corruption effects that remained are unreliable and donât give attackers sufficient momentum to successfully exploit these bugs.&lt;/p&gt;
    &lt;p&gt;Hereâs a visual representation of what this looks like for an attacker. The chart below represents six of the real-world exploit chains that we evaluated and shows the steps where Memory Integrity Enforcement â the secure allocators, EMTE, or both â stops the attack.&lt;/p&gt;
    &lt;p&gt;Memory Integrity Enforcement vs. real-world exploit chains&lt;/p&gt;
    &lt;p&gt;Notably, attackers confront Memory Integrity Enforcement early in the exploitation process. Although some issues are able to survive MIE â for example, intra-allocation buffer overflows â such issues are extremely rare, and even fewer will lend themselves to a full end-to-end exploit. Inevitably, attackers must face MIE at a stage where their capabilities are still very limited, leaving few viable avenues for exploitation. This leads to fragile chains where breaking just one step is often enough to invalidate the entire exploit strategy. When that happens, most of the chainâs components canât be reused, and the attackers have to restart exploit development with entirely new bugs.&lt;/p&gt;
    &lt;head rend="h3"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;The industry-leading security of iPhone means that the vast majority of our users never face system-level attacks on their devices. Our work on memory safety is aimed primarily at the mercenary spyware and surveillance industry, which spends many millions of dollars to exploit memory corruption vulnerabilities and target a small number of individuals because of who they are and what they do. Over the past five years, we developed a comprehensive approach to memory safety that integrates the best of our hardware and software capabilities, and todayâs announcement is the culmination of this ambitious vision. With the introduction of the iPhone 17 lineup and iPhone Air, weâre excited to deliver Memory Integrity Enforcement: the industryâs first ever, comprehensive, always-on memory-safety protection covering key attack surfaces â including the kernel and over 70 userland processes â built on the Enhanced Memory Tagging Extension (EMTE) and supported by secure typed allocators and tag confidentiality protections.&lt;/p&gt;
    &lt;p&gt;Based on our evaluations pitting Memory Integrity Enforcement against exceptionally sophisticated mercenary spyware attacks from the last three years, we believe MIE will make exploit chains significantly more expensive and difficult to develop and maintain, disrupt many of the most effective exploitation techniques from the last 25 years, and completely redefine the landscape of memory safety for Apple products. Because of how dramatically it reduces an attackerâs ability to exploit memory corruption vulnerabilities on our devices, we believe Memory Integrity Enforcement represents the most significant upgrade to memory safety in the history of consumer operating systems.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45186265</guid></item><item><title>The Dying Dream of a Decentralized Web</title><link>https://spectrum.ieee.org/web3-hardware-security</link><description>&lt;doc fingerprint="ae31c85518ef2968"&gt;
  &lt;main&gt;
    &lt;p&gt;The term Web3 was originally coined by Etherium cofounder Gavin Wood as a secure, decentralized, peer-to-peer version of the Internet. The idea was to build an Internet based on blockchain technology and a peer-to-peer network, without the need for large data centers or third-party providers. These days, however, blockchain is most famous as the tool enabling cryptocurrencies. Most recently, the Trump administration has taken on a pro-cryptocurrency stance, boosting blockchain’s popularity and media prominence.&lt;/p&gt;
    &lt;p&gt;Cryptography is central to the functioning of blockchains, whether for a decentralized Web or for cryptocurrencies. Every time a cryptocurrency transaction is initiated, all parties involved in the transaction need to securely prove that they agree to the transfer. This is done via a digital signature: a cryptographic protocol that generates a secret, private key that is unique to each user and a public key that the user shares. Then, the private key is used to generate a unique signature for each transaction. The public key can be used to verify that, indeed, the signature was created by the holder of the private key. In this way, Web3 in every incarnation relies heavily on cryptography.&lt;/p&gt;
    &lt;p&gt;To learn more about the evolution of Web3, and cryptography’s role, we caught up with Riad Wahby, assistant professor of electrical and computer engineering at Carnegie Mellon University, in Pittsburgh, and a cofounder and CEO of hardware-backed Web3 security platform Cubist.&lt;/p&gt;
    &lt;p&gt; Wahby explained what Web3 was meant to be, what it’s become, and how hardware-backed cryptography will enable its future.&lt;/p&gt;
    &lt;head rend="h3"&gt;Web3 Began as a Response to What Came Before&lt;/head&gt;
    &lt;p&gt;IEEE Spectrum: What is Web3?&lt;/p&gt;
    &lt;p&gt;Riad Wahby: That’s the hardest question that you’re going to ask by far, because I don’t know how to answer it in a way that satisfies everyone.&lt;/p&gt;
    &lt;p&gt;The term Web3 was coined around 2014, by people who looked at the way that the Web had developed. Web 1.0 was the first Web bubble, the dot-com bubble. Web 2.0, roughly speaking, is Google and Facebook and Microsoft and Apple and Netflix, and the like. And the perception, especially from folks who originally coined this term Web3, was that these companies had basically taken the Web in the wrong direction, because your privacy is gone, and you’re the product, so to speak. You use Gmail for free because Google is mining your emails to sell things like better advertising. Web3 was originally a reaction to this. Early proponents of Web3 basically said, “We don’t want that. We want to take back control of our stuff. I want to own my own data, and maybe cryptocurrencies and blockchains are the way there.” So that’s where the term originally came from.&lt;/p&gt;
    &lt;p&gt;What does the term mean now?&lt;/p&gt;
    &lt;p&gt;Wahby: Now it doesn’t mean anything like that at all. Now Web3 is the broader ecosystem around cryptocurrencies and blockchain-based technologies. And I think basically all of that revolutionary spirit has gone away in favor of building financial products and making a lot of money doing it. As far as I can tell, the term has really transformed from a reaction to a lack of privacy and a lack of sovereignty in my own data to “Hey, this is a technology that has something to do with blockchains.” Maybe you can buy some kind of speculative meme coin and make a bunch of money doing it. So I don’t know, maybe that took a dark turn at the end. That’s how things go.&lt;/p&gt;
    &lt;p&gt;How are those two definitions connected?&lt;/p&gt;
    &lt;p&gt;Wahby: Cryptography really fits into the revolutionary spirit, in the sense that the folks who want to cast off the chains of things like Google and Facebook, one of the tenets was—”The way that we’ll do that is we’ll build this technology that’s sort of amazing and that gives us all these great properties.” And they were going to do that using some advanced cryptographic technologies. This is the reason that there’s so many people who are cryptography researchers at universities that also are involved deeply in some kind of cryptocurrency. Because it’s like this is a sea change in the way that cryptography gets used in the world.&lt;/p&gt;
    &lt;p&gt;Twenty years ago, it used to be that if you were working on really any kind of cryptography, regardless of how theoretical or how practical you intended it to be, you knew that there was not much of a chance that any of it was going to get really used in the world, unless it was extremely practical and extremely focused on solving some immediate problem. And it just used to be the case that people were extremely conservative about what kind of cryptography they used. Basically, everyone thought, “We don’t need any of this crazy stuff. That’s all theory. Nobody cares. The only stuff we need is what lets you connect to Amazon and safely buy stuff.” The rise of cryptocurrencies brought with it this whole shift in the way that cryptography gets deployed in the world, where now if you can come up with some interesting functionality that’s enabled by some advanced cryptography, probably somewhere somebody is going to try and turn that into a product that they can sell.&lt;/p&gt;
    &lt;head rend="h3"&gt;Web3 Is Both Good and Bad for Cryptography&lt;/head&gt;
    &lt;p&gt;What effect has this had on the cryptographic community?&lt;/p&gt;
    &lt;p&gt;Wahby: It’s both good and bad. It’s good in that this means that there’s a lot of motivation to build interesting, cool stuff. And as a researcher in cryptography, I love it because it means that there’s tons more research money being poured into cryptography.&lt;/p&gt;
    &lt;p&gt;That’s the good side. The bad side is that the reason that people were so conservative about deploying new cryptography is that it’s easy to get the security mechanism wrong. The default state of cryptography is [to assume everything is] broken. You have to be very, very careful that each change that you make isn’t returning your cryptography to the default state. I’m not saying that people in Web3 aren’t careful. They are. It’s just by the nature of things, since it’s a much faster time frame, there’s much more pressure to just push stuff into production. And I think the downside is that we have seen a little bit of brokenness. It’s hopefully not causing people to lose oodles of money. And I think the historical record bears this out: People lose oodles of money because other people are really dishonest, not because the cryptography is broken for the most part. But the cryptography can also be broken, and that can also be worrisome. But I’d say from the perspective of somebody who’s doing research in cryptography, the impact of Web3 on the cryptographic community has generally been a good thing.&lt;/p&gt;
    &lt;p&gt;Now you’re focused on hardware security. Can you explain what that is?&lt;/p&gt;
    &lt;p&gt;Wahby: Any cryptocurrency has this property that if I hold some token, and I want to send it to somebody else, the way that I do that is by producing a digital signature that says, I want to spend this token. The secret key is what lets you generate a signature. So if you have 10 ETH [cryptocurrency coins], and they’re all protected by this key, and somebody takes a copy of your key, then life is bad.&lt;/p&gt;
    &lt;p&gt;With a digital signature key it could just be sitting on your hard drive, and then you get some malware, and now somebody has silently stolen your key. There have been these big, broadly targeted malware campaigns where millions and millions of people have all had their keys stolen. So now the criminals are just like sitting there counting up all the money that they’ve stolen, and there’s no reversing transactions, unlike at a bank.&lt;/p&gt;
    &lt;p&gt;Here’s where hardware comes in. This is not really a Web3 technology, this is kind of old, good stuff. There are these devices called hardware security modules, and they’ve been used for multiple decades. This is a physical device, and this device can run certain cryptographic algorithms. And it knows enough that when you tell it, “Hey, please generate me a key,” it can generate you a key securely. And when you tell it, “Please give me a signature,” it can give you a signature securely. But the important thing is the way that it’s designed, the key never leaves this piece of hardware. It turns what was a piece of data into a physical object. And we know how to secure a physical object.&lt;/p&gt;
    &lt;p&gt;You’re working on extending hardware security for more use cases. Can you explain what you’re doing?&lt;/p&gt;
    &lt;p&gt;Wahby: There are two issues with the standard hardware security module.&lt;/p&gt;
    &lt;p&gt;No. 1, you need more cryptography support, so you need to be able to apply digital signatures to transactions very quickly if you’re actively trading. And No. 2, you need a way of expressing that it’s not just a key that can generate any signature. It’s a key that also has attached to it some kind of policy that says these are the kinds of signatures that are okay to generate, and everything else is not allowed, to add extra security. These are the two directions that we have that our technology enables within traditional hardware security modules.&lt;/p&gt;
    &lt;p&gt;We start with the security that’s provided by the traditional hardware security module, and we extend it using this, actually another piece of trusted hardware called the Trusted Execution Environment. We extend it to support the actual kinds of cryptography that are needed for Web3 and to support this rich programmable policy layer that lets you say, “This key is only intended for this specific kind of use,” or “anytime somebody tries to make a payment from this key, first I have to check whether the recipient is subject to sanctions,” or any other rule. So in the end, we have, not only a hardware security module, we have also this Trusted Execution Environment and this policy layer, and all this other cryptographic stuff that together gives us a hardware security module that’s really designed for the Web3 use case.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;“Web3 Is Going Just Great” Creator On Why It Isn’t ›&lt;/item&gt;
      &lt;item&gt;Is Worldcoin a Crypto-currency for the Masses or Your Digital ID? ›&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Dina Genkina is an associate editor at IEEE Spectrum focused on computing and hardware. She holds a PhD in atomic physics and lives in Brooklyn.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45186726</guid></item><item><title>Inflation Erased U.S. Income Gains Last Year</title><link>https://www.wsj.com/economy/consumers/census-income-insurance-poverty-2024-31d82ad0</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45187687</guid></item><item><title>Immunotherapy drug eliminates aggressive cancers in clinical trial</title><link>https://www.rockefeller.edu/news/38120-immunotherapy-drug-eliminates-aggressive-cancers-in-clinical-trial/</link><description>&lt;doc fingerprint="bf6351322a890f92"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Immunotherapy drug eliminates aggressive cancers in clinical trial&lt;/head&gt;
    &lt;p&gt;Over the past 20 years, a class of cancer drugs called CD40 agonist antibodies have shown great promise—and induced great disappointment. While effective at activating the immune system to kill cancer cells in animal models, the drugs had limited impact on patients in clinical trials and caused dangerously systemic inflammatory responses, low platelet counts, and liver toxicity, among other adverse reactions—even at a low dose.&lt;/p&gt;
    &lt;p&gt;But in 2018, the lab of Rockefeller University’s Jeffrey V. Ravetch demonstrated it could engineer an enhanced CD40 agonist antibody so that it improved its efficacy and could be administered in a manner to limit serious side effects. The findings came from research on mice, genetically engineered to mimic the pathways relevant in humans. The next step was to have a clinical trial to see the drug’s impact on cancer patients.&lt;/p&gt;
    &lt;p&gt;Now the results from the phase 1 clinical trial of the drug, dubbed 2141-V11, have been published in Cancer Cell. Of 12 patients, six patients saw their tumors shrink, including two who saw them disappear completely.&lt;/p&gt;
    &lt;p&gt;“Seeing these significant shrinkages and even complete remission in such a small subset of patients is quite remarkable,” says first author Juan Osorio, a visiting assistant professor in Ravetch’s Leonard Wagner Laboratory of Molecular Genetics and Immunology and a medical oncologist at Memorial Sloan Kettering Cancer Center.&lt;/p&gt;
    &lt;p&gt;Notably, the effect wasn’t limited to tumors that were injected with the drug; tumors elsewhere in the body either got smaller or were destroyed by immune cells.&lt;/p&gt;
    &lt;p&gt;“This effect—where you inject locally but see a systemic response—that’s not something seen very often in any clinical treatment,” Ravetch notes. “It’s another very dramatic and unexpected result from our trial.”&lt;/p&gt;
    &lt;p&gt;Engineering enhancements&lt;/p&gt;
    &lt;p&gt;CD40 is a cell surface receptor and member of the tumor necrosis factor (TNF) receptor superfamily, proteins that are largely expressed by immune cells. When triggered, CD40 prompts the rest of immune system to spring into action, promoting antitumor immunity and developing tumor-specific T cell responses.&lt;/p&gt;
    &lt;p&gt;In 2018, Ravetch’s lab—which has been supported in this line of research by Rockefeller’s Therapeutic Development Fund, founded by trustee Julian Robertson and continued by the Black Family Foundation—engineered 2141-V11, a CD40 antibody that binds tightly to human CD40 receptors and is modified to enhance its crosslinking by also engaging a specific Fc receptor. It proved to be 10 times more powerful in its capacity to elicit an antitumor immune response.&lt;/p&gt;
    &lt;p&gt;They then changed how they administered the drug. The long-time approach had been to give it intravenously. But CD40 receptors are widespread, so too many non-cancerous cells pick it up, leading to the well-known toxic side effects. Instead, they injected the drug directly into tumors.&lt;/p&gt;
    &lt;p&gt;“When we did that, we saw only mild toxicity,” Ravetch says.&lt;/p&gt;
    &lt;p&gt;Those findings became the basis of the phase 1 clinical trial described in the current study, which aimed to determine a starting clinical dose of the drug and better understand the mechanisms underlying its effectiveness.&lt;/p&gt;
    &lt;p&gt;Inducing remission&lt;/p&gt;
    &lt;p&gt;The trial included 12 patients representing myriad metastatic cancer types: melanoma, renal cell carcinoma, and different types of breast cancer. Of those 12, none suffered the serious side effects seen with other CD40 drugs. Six experienced systemic tumor reduction, of which two had a complete response—meaning their cancer disappeared entirely.&lt;/p&gt;
    &lt;p&gt;The two patients who experienced complete remission had melanoma and breast cancer, respectively—both notoriously aggressive and recurring.&lt;/p&gt;
    &lt;p&gt;“The melanoma patient had dozens of metastatic tumors on her leg and foot, and we injected just one tumor up on her thigh,” Ravetch says. “After multiple injections of that one tumor, all the other tumors disappeared. The same thing happened in the patient with metastatic breast cancer, who also had tumors in her skin, liver, and lung. And even though we only injected the skin tumor, we saw all the tumors disappear.”&lt;/p&gt;
    &lt;p&gt;Tissue samples from the tumor sites revealed the immune activity that the drug stimulated. “We were quite surprised to see that the tumors became full of immune cells—including different types of dendritic cells, T cells, and mature B cells—that formed aggregates resembling something like a lymph node,” Osorio says. “The drug creates an immune microenvironment within the tumor, and essentially replaces the tumor with these tertiary lymphoid structures.”&lt;/p&gt;
    &lt;p&gt;The presence of tertiary lymphoid structures (TLS) is associated with improved prognosis and response to immunotherapy, Osorio notes.&lt;/p&gt;
    &lt;p&gt;They also found TLS in the tumors they didn’t inject. “Once the immune system identifies the cancer cells, immune cells migrate to the non-injected tumor sites,” he says.&lt;/p&gt;
    &lt;p&gt;Improving immunotherapy&lt;/p&gt;
    &lt;p&gt;The findings have sparked a number of other clinical trials that the Ravetch lab is currently collaborating on with researchers at Memorial Sloan Kettering and Duke University. Now in either phase 1 or phase 2 study, the trials are investigating 2141-V11’s effect on specific cancers, including bladder cancer, prostate cancer, and glioblastoma—all aggressive and hard to treat. Collectively, nearly 200 people are enrolled in the studies.&lt;/p&gt;
    &lt;p&gt;These studies will help to illuminate why some patients respond to 2141-V11 and others do not—and how to potentially change that.&lt;/p&gt;
    &lt;p&gt;For example, the two patients in the clinical trial whose cancer disappeared both had a high clonality of T cells—key cancer-cell killers—when they began the study. “This suggests there are some requirements from the immune system in order for this drug to work, and we’re in the process of dissecting these characteristics in more granular detail in these larger studies.”&lt;/p&gt;
    &lt;p&gt;“As a general rule, only 25 to 30% of patients will respond to immunotherapy, so the biggest challenge in the field is to try to determine which patients will benefit from it. What are the indicators or predictors of response? And how can we convert non-responders into responders?”&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45188945</guid></item><item><title>I don't want AI agents controlling my laptop</title><link>https://sophiebits.com/2025/09/09/ai-agents-security</link><description>&lt;doc fingerprint="973b4a110bab27cd"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;I don’t want AI agents controlling my laptop&lt;/head&gt;
    &lt;p&gt;Part of me is always unnerved when I see people running &lt;code&gt;claude --dangerously-skip-permissions&lt;/code&gt; or &lt;code&gt;codex --yolo&lt;/code&gt; to give them unfettered ability to run commands on their machine. Admittedly, I do usually hit approve when I’m asked about a specific command, so I certainly understand the temptation to just avoid all that fuss and do a blanket approval. With the next generation of apps that people are building to control everything on your computer via some AI chat interface, it feels perhaps even scarier.&lt;/p&gt;
    &lt;p&gt;The problem is, modern desktop operating systems are not really designed for strong security boundaries between different things running on your machine. Sure, there are some protections like “you can’t record the screen without the user granting explicit permission”, but if you want AI to be able to take actions on your computer then you need to turn most of this stuff on. Different user accounts act as a security boundary but in practice everyone does all their work under a single user account.&lt;/p&gt;
    &lt;p&gt;There’s no good way to say “allow access to everything on my computer, except for my password manager, my bank, my ~/.aws/credentials file, and the API keys I left in my environment variables”. Especially with Simon Willison’s lethal trifecta, you don’t really want to be giving access to these things, even if most of the time, nothing bad happens.&lt;/p&gt;
    &lt;p&gt;Barring a major rearchitecture (which maybe Apple and Microsoft are working on), it’s too hard in practice to grant access to your whole laptop and know exactly what things the AI has access to and feel confident that there’s nothing too sensitive. (I do appreciate Codex’s clever default of running commands in sandboxes that can’t communicate over the network or write files outside the repo directory.)&lt;/p&gt;
    &lt;p&gt;There are two promising solutions here.&lt;/p&gt;
    &lt;p&gt;Cloud environments (and VMs in general) are one. A bit more annoying to set up but you also get the bonus of reproducibility across a team, being able to run multiple sessions in parallel, and easier collaboration. I expect most coding agents to move in this direction (Codex already offers this; Claude Code is working on it). In corporate environments, it will make more sense to give AI agents their own credentials that don’t necessarily have all the permissions that are available to the user who spawned them.&lt;/p&gt;
    &lt;p&gt;The other piece of software on my machine designed to handle isolated environments that don’t leak between each other is the browser. Each site has its own cookies that are protected from other sites, and entire applications are designed to run successfully within this framework. Giving full access is scary — Perplexity has screwed it up, Anthropic knows it doesn’t have a workable solution yet. But if integrated properly into the browser, you actually could plausibly pick and choose which sites to give access to (or not give access to) and have the browser enforce those boundaries. Looking forward to this existing. It’s not really possible to build this properly unless you have control over the browser itself. Atlassian’s bet on using The Browser Company to build (presumably) the new “home” for all business SaaS interaction is persuasive to me in this light. This approach seems more likely to succeed than building a browser that didn’t have a clear value proposition for the consumer space where distribution is king.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45188982</guid></item><item><title>Anthropic is endorsing SB 53</title><link>https://www.anthropic.com/news/anthropic-is-endorsing-sb-53</link><description>&lt;doc fingerprint="bf01b7f36c26fec9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Anthropic is endorsing SB 53&lt;/head&gt;
    &lt;p&gt;Anthropic is endorsing SB 53, the California bill that governs powerful AI systems built by frontier AI developers like Anthropic. We’ve long advocated for thoughtful AI regulation and our support for this bill comes after careful consideration of the lessons learned from California's previous attempt at AI regulation (SB 1047). While we believe that frontier AI safety is best addressed at the federal level instead of a patchwork of state regulations, powerful AI advancements won’t wait for consensus in Washington.&lt;/p&gt;
    &lt;p&gt;Governor Newsom assembled the Joint California Policy Working Group—a group of academics and industry experts—to provide recommendations on AI governance. The working group endorsed an approach of 'trust but verify’, and Senator Scott Wiener’s SB 53 implements this principle through disclosure requirements rather than the prescriptive technical mandates that plagued last year's efforts.&lt;/p&gt;
    &lt;p&gt;What SB 53 achieves&lt;/p&gt;
    &lt;p&gt;SB 53 would require large companies developing the most powerful AI systems to:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Develop and publish safety frameworks, which describe how they manage, assess, and mitigate catastrophic risks—risks that could foreseeably and materially contribute to a mass casualty incident or substantial monetary damages.&lt;/item&gt;
      &lt;item&gt;Release public transparency reports summarizing their catastrophic risk assessments and the steps taken to fulfill their respective frameworks before deploying powerful new models.&lt;/item&gt;
      &lt;item&gt;Report critical safety incidents to the state within 15 days, and even confidentially disclose summaries of any assessments of the potential for catastrophic risk from the use of internally-deployed models.&lt;/item&gt;
      &lt;item&gt;Provide clear whistleblower protections that cover violations of these requirements as well as specific and substantial dangers to public health/safety from catastrophic risk.&lt;/item&gt;
      &lt;item&gt;Be publicly accountable for the commitments made in their frameworks or face monetary penalties.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;These requirements would formalize practices that Anthropic and many other frontier AI companies already follow. At Anthropic, we publish our Responsible Scaling Policy, detailing how we evaluate and mitigate risks as our models become more capable. We release comprehensive system cards that document model capabilities and limitations. Other frontier labs (Google DeepMind, OpenAI, Microsoft) have adopted similar approaches while vigorously competing at the frontier. Now all covered models will be legally held to this standard. The bill also appropriately focuses on large companies developing the most powerful AI systems, while providing exemptions for startups and smaller companies that are less likely to develop powerful models and should not bear unnecessary regulatory burdens.&lt;/p&gt;
    &lt;p&gt;SB 53’s transparency requirements will have an important impact on frontier AI safety. Without it, labs with increasingly powerful models could face growing incentives to dial back their own safety and disclosure programs in order to compete. But with SB 53, developers can compete while ensuring they remain transparent about AI capabilities that pose risks to public safety, creating a level playing field where disclosure is mandatory, not optional.&lt;/p&gt;
    &lt;p&gt;Looking ahead&lt;/p&gt;
    &lt;p&gt;SB 53 provides a strong regulatory foundation, but we can and should build upon this progress in the following areas and we look forward to working with policymakers to do so:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The bill currently decides which AI systems to regulate based on how much computing power (FLOPS) was used to train them. The current threshold (10^26 FLOPS) is an acceptable starting point but there’s always a risk that some powerful models may not be covered.&lt;/item&gt;
      &lt;item&gt;Similarly, developers should be required to provide greater detail about the tests, evaluations, and mitigations they undertake. When we share our safety research, document our red team testing, and explain our deployment decisions—as we have done alongside industry players via the Frontier Model Forum —it strengthens rather than weakens our work.&lt;/item&gt;
      &lt;item&gt;Lastly, regulations need to evolve as AI technology advances. Regulators should have the ability to update rules as needed to keep up with new developments and maintain the right balance between safety and innovation.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We commend Senator Wiener and Governor Newsom for their leadership on responsible AI governance. The question isn't whether we need AI governance—it's whether we'll develop it thoughtfully today or reactively tomorrow. SB 53 offers a solid path toward the former. We encourage California to pass it, and we look forward to working with policymakers in Washington and around the world to develop comprehensive approaches that protect public interests while maintaining America's AI leadership.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45189053</guid></item><item><title>All vibe coding tools are selling a get rich quick scheme</title><link>https://varunraghu.com/all-vibe-coding-tools-are-selling-a-get-rich-quick-scheme/</link><description>&lt;doc fingerprint="a774d55550d40da1"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;all vibe coding tools are selling a get rich quick scheme&lt;/head&gt;
    &lt;p&gt;i wrote a piece earlier about why I won't be vibe coding anymore.&lt;/p&gt;
    &lt;p&gt;i think of it less as vibe coding now, i kinda hate the term because it makes it seem like its not an involved process. it is very involved, and you can't just vibe it.&lt;/p&gt;
    &lt;p&gt;all of the different tools selling the dream of building your own $1bn startup from just simple prompting are fooling people. yes all of them. trust me i've tried most of these tools.&lt;/p&gt;
    &lt;p&gt;you can't fool people into thinking they can build a smartphone or a car with little effort - but somehow you can trick people into thinking they can build a world-class software product that makes millions with little to no effort. this is a scam.&lt;/p&gt;
    &lt;p&gt;at first i was very hopeful i can finally 'build' now with my minimal tech skills. after months of trying out different platforms, countless prompts, and hundreds of dollars spent - i've come to the conclusion that it's simply not possible. these tools merely give you the illusion that you can code.&lt;/p&gt;
    &lt;p&gt;only thing i use cursor for now is to make cosmetic changes to my landing page. that is because i'm pretty good at frontend and design. It's a skill i already have. i just use AI to speed up the process.&lt;/p&gt;
    &lt;p&gt;will these ai coding tools get better? will i finally be able to actually vibe code products? maybe. but right now the whole industry is running a scam and pulling a big fat one on all of us.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45189965</guid></item></channel></rss>