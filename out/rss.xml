<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sat, 06 Sep 2025 16:10:02 +0000</lastBuildDate><item><title>ML needs a new programming language – Interview with Chris Lattner</title><link>https://signalsandthreads.com/why-ml-needs-a-new-programming-language/</link><description>&lt;doc fingerprint="272a001512c6a995"&gt;
  &lt;main&gt;
    &lt;p&gt;Listen in on Jane Street’s Ron Minsky as he has conversations with engineers working on everything from clock synchronization to reliable multicast, build systems to reconfigurable hardware. Get a peek at how Jane Street approaches problems, and how those ideas relate to tech more broadly.&lt;/p&gt;
    &lt;p&gt;Chris Lattner is the creator of LLVM and led the development of the Swift language at Apple. With Mojo, he’s taking another big swing: How do you make the process of getting the full power out of modern GPUs productive and fun? In this episode, Ron and Chris discuss how to design a language that’s easy to use while still providing the level of control required to write state of the art kernels. A key idea is to ask programmers to fully reckon with the details of the hardware, but making that work manageable and shareable via a form of type-safe metaprogramming. The aim is to support both specialization to the computation in question as well as to the hardware platform. “Somebody has to do this work,” Chris says, “if we ever want to get to an ecosystem where one vendor doesn’t control everything.”&lt;/p&gt;
    &lt;p&gt;Chris Lattner is the creator of LLVM and led the development of the Swift language at Apple. With Mojo, he’s taking another big swing: How do you make the process of getting the full power out of modern GPUs productive and fun? In this episode, Ron and Chris discuss how to design a language that’s easy to use while still providing the level of control required to write state of the art kernels. A key idea is to ask programmers to fully reckon with the details of the hardware, but making that work manageable and shareable via a form of type-safe metaprogramming. The aim is to support both specialization to the computation in question as well as to the hardware platform. “Somebody has to do this work,” Chris says, “if we ever want to get to an ecosystem where one vendor doesn’t control everything.”&lt;/p&gt;
    &lt;p&gt;Some links to topics that came up in the discussion:&lt;/p&gt;
    &lt;p&gt;Welcome to Signals and Threads, in-depth conversations about every layer of the tech stack, from Jane Street. I’m Ron Minsky. It is my great pleasure to have Chris Lattner on the show. Typically on Signals and Threads, we end up talking to engineers who work here at Jane Street, but sometimes we like to grab outside folk, and Chris is an amazing figure to bring on because he’s been so involved in a bunch of really foundational pieces of computing that we all use—LLVM, and Clang, and MLIR, and OpenCL, and Swift, and now Mojo. And this has happened at a bunch of different storied institutions—Apple, and Tesla, and Google, and SiFive, and now Modular. So anyway, it’s a pleasure to have you joining us, Chris.&lt;/p&gt;
    &lt;p&gt;Thank you, Ron. I’m so happy to be here.&lt;/p&gt;
    &lt;p&gt;I guess I want to start by just hearing a little bit more about your origin story. How did you get into computing and how did you get into this world of both compiler engineering and programming language design?&lt;/p&gt;
    &lt;p&gt;So I grew up in the ’80s and back before computers were really a thing. We had PCs, but they weren’t considered cool. And so I fell in love with understanding how the computer worked. And back then, things were way simpler. I started with a BASIC interpreter, for example, and you’d get a book from the store. Remember when we had books? [laughs] And you’d learn things from books?&lt;/p&gt;
    &lt;p&gt;Did you do the thing where you’d get the hobbyist magazine and copy out the listing of the program?&lt;/p&gt;
    &lt;p&gt;That’s exactly right. And so we didn’t have vibe coding, but we did have books. And so just by typing things in, you could understand how things work, and then when you broke it—because inevitably you’re typing something in and you don’t really know what you’re doing—you have to figure out what went wrong and so it encouraged a certain amount of debugging. I really love computer games. Again, back then, things were a little bit simpler. Computer games drove graphics and performance and things like this. And so I spent some time on these things called bulletin board systems and the early internet reading about how game programmers are trying to push the limits of the hardware. And so that’s where I got interested in performance and computers and systems. I went on to college and had an amazing professor at my school, shout out to University of Portland in Portland, Oregon, and he was a compiler nerd.&lt;/p&gt;
    &lt;p&gt;And so, I think that his love for compilers was infectious. His name was Steven Vegdahl, and that caused me to go on to pursue compilers at University of Illinois. And there again, continue to fall down this rabbit hole of compilers and systems, and build LLVM. And ever since I got into the compiler world, I loved it. I love compilers because they’re large-scale systems, there’s multiple different components that all work together. And in the university setting, it was really cool in the compiler class, because unlike most of the assignments where you do an assignment, turn it in, forget about it—in compilers, you would do an assignment, turn it in, get graded, and then build on it. And it felt much more realistic like software engineering, rather than just doing a project to get graded.&lt;/p&gt;
    &lt;p&gt;Yeah, I think for a lot of people, the OS class is their first real experience of doing a thing where you really are building layer on top of layer. I think it’s an incredibly important experience for people as they start engineering.&lt;/p&gt;
    &lt;p&gt;It’s also one where you get to use some of those data structures. I took this, almost academic, here’s what a binary tree is, and here’s what a graph is. And particularly when I went through it, it was taught from a very math-forward perspective, but it really made it useful. And so that was actually really cool. I’m like, ‘Oh, this is why I learned this stuff.’&lt;/p&gt;
    &lt;p&gt;So one thing that strikes me about your career is that you’ve ended up going back and forth between compiler engineering and language design space, whereas I feel like a lot of people are on one side or the other—they’re mostly compilers people and they don’t care that much about the language, and just, how do we make this thing go fast? And there are some people who are really focusing on language design and the work on the compiler is a secondary thing towards that design. And you’ve both popped back and forth. And then also a lot of your compiler engineering work, really starting with LLVM, in some sense is itself, very language-forward. With LLVM, there’s a language in there that’s this intermediate language that you’re surfacing as a tool for people to use. So I’m just curious to hear more about how you think about the back and forth between compiler engineering and language design.&lt;/p&gt;
    &lt;p&gt;The reason I do this is that effectively, my career is following my own interests. And so my interests are not static. I want to work on different kinds of problems and solve useful problems and build into things. And so the more technology and capability you have, the higher you can reach. And so with LLVM, for example, built and learned a whole bunch of cool stuff about deep code generation for an X86 chip and that category of technology with register allocation, stuff like this. But then it made it possible to go, say, let’s go tackle C++ and let’s go use this to build the world’s best implementation of something that lots more people use and understand than deep backend code generation technology. And then with Swift, it was, build even higher and say, ‘Okay, well C++, maybe some people like it, but I think we can do better and let’s reach higher.’ I’ve also been involved in AI systems, been involved in building an iPad app to help teach kids how to code. And so, lots of different things over time. And so for me, the place I think I’m most useful and where a lot of my experience is valuable ends up being at this hardware-software boundary.&lt;/p&gt;
    &lt;p&gt;I’m curious how you ended up making the leap to working on Swift. From my perspective, Swift looks from the outside, like one of these points of arrival in mainstream programming contexts of a bunch of ideas that I have long thought are really great ideas in other programming languages. And I’m curious, in some ways a step away from like, oh, I’m going to work on really low-level stuff and compiler optimization, and then we will go much higher level and do a C++ implementation, which is still a pretty low level. How did the whole Swift thing happen?&lt;/p&gt;
    &lt;p&gt;Great question. I mean, the timeframe for people that aren’t familiar is that LLVM started in 2000. So by 2005, I had exited university and I joined Apple. And so LLVM was an advanced research project at that point. By the 2010 timeframe, LLVM was much more mature and we had just shipped C++ support in Clang, and so it could bootstrap itself, which means the compiler could compile itself. It’s all written in C++, it could build advanced libraries like the Boost template library, which is super crazy advanced template stuff. And so the C++ implementation that I and the team had built was real. Now, C++ in my opinion, is not a beautiful programming language. And so implementing it is a very interesting technical challenge. For me, a lot of problem-solving ends up being, how do you factor the system the right way?&lt;/p&gt;
    &lt;p&gt;And so Clang has some really cool stuff that allowed it to scale and things like that, but I was also burned out. We had just shipped it. It was amazing. I’m like, there has to be something better. And so, Swift really came starting in 2010. It was a nights and weekends project. It wasn’t like top-down management said, ‘Let’s go build a new programming language.’ It was ‘Chris being burned out’—I was running a 20 to 40 person team at the time, being an engineer during the day, and being a technical leader, but then needing an escape hatch. And so I said, ‘Okay, well, I think we can have something better. I have a lot of good ideas. Turns out, programming languages are a mature space. It’s not like you need to invent pattern matching at this point. It’s embarrassing that C++ doesn’t have good pattern matching.&lt;/p&gt;
    &lt;p&gt;We should just pause for a second, because I think this is like a small but really essential thing. I think the single best feature coming out of language like ML in the mid-seventies is, first of all, this notion of an algebraic data type, meaning every programming language on earth has a way of saying this and that and the other, a record, or a class, or a tuple.&lt;/p&gt;
    &lt;p&gt;A weird programming language, I think it was Barbara Liskov?&lt;/p&gt;
    &lt;p&gt;Yeah. And she did a lot of the early theorizing about, ‘What are abstract data types?’ But the ability to do this or that or the other, to have data types that are a union of different possible shapes of the data—and then having this pattern matching facility that lets you basically in a reliable way do the case analysis so you can break down what the possibilities are—is just incredibly useful. And very few mainstream languages have picked it up. I mean Swift again is an example, but languages like ML, SML, and Haskell, and OCaml—&lt;/p&gt;
    &lt;p&gt;Standard!&lt;/p&gt;
    &lt;p&gt;That’s right. SML. Standard ML. It’s been there for a long time.&lt;/p&gt;
    &lt;p&gt;I mean pattern matching, it is not an exotic feature. Here we’re talking about 2010. C# didn’t have it. C++ didn’t have it. Obviously Java didn’t have it. I don’t think JavaScript had it. None of these mainstream languages had it, but it’s obvious. And so part of my opinion about that—and so by the way, I represent as engineer, I’m not actually a mathematician, and so type theory goes way over my head. I don’t really understand this. The thing that gets me frustrated about the academic approach to programming languages is that people approach it by saying there’s sum types, and there’s intersection types, and there’s these types, and they don’t start from utility forward. And so pattern matching, when I learned OCaml, it’s so beautiful. It makes it so easy and expressive to build very simple things. And so to me, I always identify to the utility and then yes, there’s amazing formal type theory behind it, and that’s great and that’s why it actually works and composes. But bringing that stuff forward and focusing on utility and the problems it solves, and how it makes people happy, ends up being the thing that I think moves the needle in terms of adoption, at least in mainstream.&lt;/p&gt;
    &lt;p&gt;Yeah, I mean I think that’s right. My approach also, and my interest in language is also very much not from the mathematical perspective, although my undergraduate degree is in math. I like math a lot, but I mostly approach these things as a practitioner. But the thing I’ve been struck by over the years is the value of having these features have a really strong mathematical foundation is they generalize, and as you were saying, compose much better. If they are in the end mathematically simple, you’re way more likely to have a feature that actually pans out as it gets used way beyond your initial view as to what the thing was for.&lt;/p&gt;
    &lt;p&gt;That’s right. This is actually a personal defect because I don’t understand the math in the way that maybe theoretically would be ideal. I end up having to rediscover certain truths that are obvious. The cliche, ‘If the Russian mathematician invented it 50 years ago…’ And so a lot of what I find is that I can find truth and beauty when things compose and things fit together, and often I’ll find out it’s already been discovered because everything in programming language has been done. There’s almost nothing novel, but still that design process of saying, let’s pull things together, let’s reason about why it doesn’t quite fit together. Let’s go figure out how to better factor this. Let’s figure out how to make it simpler these days. That process to me, I think is kind of like people working on physics, [from what] I hear. The simpler the outcome becomes, the more close to truth it feels like it is. And so I share that—and maybe it’s more design gene or engineer-design combination, but it’s probably what you mathematicians actually know inherently, and I just haven’t figured it out yet.&lt;/p&gt;
    &lt;p&gt;Do you find yourself doing things after you come to it from an engineering perspective, trying to figure out whether there are useful mathematical insights? Do you go back and read the papers? Do you have other PL people who are more mathematically oriented who you talk to? How do you extend your thinking to cover some of that other stuff?&lt;/p&gt;
    &lt;p&gt;See, the problem is math is scary to me. So I see Greek letters and I run away. I do follow arXiv and things like this, and there’s a programming language section on that. And so I get into some of it, but what I get attracted to in that is the examples and the results section and the future-looking parts of it. And so it’s not necessarily the ‘how,’ it’s the ‘what it means.’ And so I think a lot of that really speaks to me. The other thing that really speaks to me when you talk about language design and things like this is blog posts from some obscure academic programming language that I’ve never heard of. You just have somebody talking about algebraic effect systems for this and that and the other thing, or something really fancy, but they figure out how to explain it in a way that’s useful. And so when it’s not just, ‘Let me explain to you the type system,’ but it’s, ‘Let me explain this problem this fancy feature enables,’ that’s where I get excited. That’s where it speaks to me because, again, I’m problem-oriented, and having a beautiful way to express and solve problems, I appreciate.&lt;/p&gt;
    &lt;p&gt;I think there’s a lot of value in the work that’s done in papers of really working out in detail the theory and the math and how it all fits together. [And] I think the fact that the world has been filled with a lot of interesting blog posts from the same people has been great because I think it’s another modality where it often encourages you to pull out the simpler and easier-to-consume versions of those ideas. And I think that is just a different kind of insight and it’s valuable to surface that too.&lt;/p&gt;
    &lt;p&gt;And also when I look at those blog posts, sometimes they design smell. Particularly the C++ community, there’s a lot of really good work to fix C++. They’re adding a lot of stuff to it, and C++ will never get simpler—you can’t really remove things, right? And so a lot of the challenge there is, it’s constrained problem-solving. And so when I look at that, often what I’ll see when I’m reading one of those posts, and again, these are brilliant people and they’re doing God’s work trying to solve problems with C++, best of luck with that. But you look at that and you realize there’s a grain of sand in the system that didn’t need to be there. And so to me, it’s like if you remove that grain of sand, then the entire system gets relaxed and suddenly all these constraints fall away and you can get to something much simpler. Swift, for example, it’s a wonderful language and it’s grown really well and the community is amazing, but it has a few grains of sand in it that cause it to be a lot more complicated. And so this is where I’m not just happy with things that got built. LLVM is amazing, it’s very practical, but it has lots of problems. That’s why when I get a chance to build a next generation system, I want to learn from that and actually try to solve these problems.&lt;/p&gt;
    &lt;p&gt;So this is the great privilege of getting to work on a new language, which is a thing you’re doing now. There’s this new language called Mojo, and it’s being done by this company that you co-founded called Modular. Maybe just so we understand the context a little bit, can you tell me a little bit about, what is Modular? What’s the basic offering? What’s the business model?&lt;/p&gt;
    &lt;p&gt;Before I even get there, I’ll share more of how I got here. If you oversimplify my background, I did this LLVM thing and its foundational compiler technology for CPUs. It helped unite a lot of CPU-era infrastructure and it provided a platform for languages like Swift, but also Rust, and Julia, and many different systems that all got built on top of, and I think it really catalyzed and enabled a lot of really cool applications of accelerated compiler technology. People use LLVM in databases and for query engine optimization, lots of cool stuff. Maybe you use it for trading or something. I mean, there can be tons of different applications for this kind of technology—and then [I] did programming language stuff with Swift. But in the meantime, AI happened. And so with AI brought this entirely new generation of compute: GPUs, tensor processing units, large-scale AI training systems, FPGAs, and ASICs and all this complexity for compute, and LLVM never really worked in that system.&lt;/p&gt;
    &lt;p&gt;And so one of the things that I built when I was at Google was a bunch of foundational compiler technology for that category of systems. And there’s this compiler technology called MLIR. MLIR is basically LLVM 2.0. And so take everything you learn from building LLVM and helping solve this, but then bring it forward into this next generation of compiler technology so that you can go hopefully unify the world’s compute for this GPU and AI and ASIC kind of world. MLIR has been amazingly successful, and I think it’s used in roughly every one of these AI systems and GPUs. It’s used by Nvidia, it’s used by Google, it’s used by roughly everybody in this space. But one of the challenges is that there hasn’t been unification. And so you have these very large-scale AI software platforms. You have CUDA from Nvidia, you have XLA from Google, you have ROCm from AMD.&lt;/p&gt;
    &lt;p&gt;It’s countless. Every company has their own software stack. And one of the things that I discovered and encountered, and I think the entire world sees, is that there’s this incredible fragmentation driven by the fact that each of these software stacks built by a hardware maker are just all completely different. And some of them work better than others, but regardless, it’s a gigantic mess. And there’s these really cool high-level technologies like PyTorch that we all love and we want to use. But if PyTorch is built on completely different stacks and schooling together these megalithic worlds from different vendors, it’s very difficult to get something that works.&lt;/p&gt;
    &lt;p&gt;Right. They’re both complicated trade-offs around the performance that you get out of different tools and then also a different set of complicated trade-offs around how hard they are to use, how complicated it is to write something in them, and then what hardware you can target from each individual one. And each of these ecosystems is churning just incredibly fast. There’s always new hardware coming out and new vendors in new places, and there’s also new little languages popping up into existence, and it makes the whole thing pretty hard to wrangle.&lt;/p&gt;
    &lt;p&gt;Exactly. And AI is moving so fast. There’s a new model every week. It’s crazy. And new applications, new research, the amount of money being dumped into this by everybody is just incredible. And so how does anybody keep up? It’s a structural problem in the industry. And so the structural problem is that the people doing this kind of work, the people doing code generation for advanced GPUs and things like this, they’re all at hardware companies. And the hardware companies, every single one of them is building their own stack because they have to. There is nothing to plug into. There’s nothing like ‘LLVM but for AI,’ that doesn’t exist. And so as they go and build their own vertical software stack, of course they’re focused on their hardware, they got advanced roadmaps, they have a new chip coming out next year, they’re plowing their energy and time into solving for their hardware. But we, out in the industry, we actually want something else. We want to be able to have software that runs across multiple pieces of hardware. And so, if everybody doing the work is at a hardware company, it’s very natural that you get this fragmentation across vendors because nobody’s incentivized to go work together. And even if they’re incentivized, they don’t have time to go work on somebody else’s chip. AMD is not going to pay to work on Nvidia GPUs or something like this.&lt;/p&gt;
    &lt;p&gt;That’s true when you think about this, kind of, a split between low-level and high-level languages. So Nvidia has CUDA and AMD has ROCm, which is mostly a clone of CUDA, and then the XLA tools from Google work incredibly well on TPUs, and so on and so forth. Different vendors have different things. Then there’s the high-level tools, PyTorch, and JAX, and Triton, and various things like that. And those are typically actually not made by the hardware vendors. Those are made by different kinds of users—I guess Google is responsible for some of these and they’re also sometimes a hardware vendor—but a lot of the time it’s more stepped back. Although even there, the cross-platform support is complicated and messy and incomplete.&lt;/p&gt;
    &lt;p&gt;Because they’re built on top of fundamentally incompatible things. And so that’s the fundamental nature. And so again, you go back to Chris’s dysfunction and my weird career choices, I always end up back at the hardware-software boundary, and there’s a lot of other folks that are really good at adding very high-level abstractions. If you go back a few years ago, MLOps was the cool thing, and it was, ‘Let’s build a layer of Python on top of TensorFlow and PyTorch and build a unified AI platform.’ But the problem with that, is that building abstractions on top of two things that don’t work very well, can’t solve performance, or liability, or management, or these other problems. You can only add a layer of duct tape, but as soon as something goes wrong, you end up having to debug this entire crazy stack of stuff that you really didn’t want to have to know about.&lt;/p&gt;
    &lt;p&gt;And so it’s a leaky abstraction. And so the genesis of Modular (bringing it back to this) was realizing there are structural problems in the industry. There is nobody that’s incentivized to go build a unifying software platform and do that work at the bottom level. And so what we set off to do is we said, ‘Okay, let’s go build…’—and there’s different ways of explaining this. You could say ‘a replacement for CUDA,’ that’s like a flamboyant way to say this, but ‘let’s go build a successor to all of this technology that is better than what the hardware makers are building, and is portable.’ And so what this takes, is doing the work that these hardware companies are doing, and I set the goal for the team of saying, let’s do it better than, for example, Nvidia is doing it for their own hardware.&lt;/p&gt;
    &lt;p&gt;Which is no easy feat, right? They’ve got a lot of very strong engineers and they understand their hardware better than anyone does. Beating them on their own hardware is tough.&lt;/p&gt;
    &lt;p&gt;That is really hard. And they’ve got a 20-year head start, because CUDA is about 20 years old. They’ve got all the momentum. They’re a pretty big company. As you say, lots of smart people. And so that was a ridiculous goal. Why did I do that? Well, I mean a certain amount of confidence in understanding how the technology worked, having a bet on what I thought we could build and the approach, and some insight and intuition, but also realizing that it’s actually destiny. Somebody has to do this work. If we ever want to get to an ecosystem where one vendor doesn’t control everything, if we want to get the best out of the hardware, if we want to get new programming language technologies, if we want pattern matching on a GPU—I mean, come on, this isn’t rocket science—then we need at some point to do this. And if nobody else is going to do it, I’ll step up and do that. That’s where Modular came from—saying, ‘Let’s go crack this thing open. I don’t know how long it will take, but sometimes it’s worthwhile doing really hard things if they’re valuable to the world.’ And the belief was it could be profoundly impactful and hopefully get more people into even just being able to use this new form of compute with GPUs and accelerators and all this stuff, and just really redemocratize AI compute.&lt;/p&gt;
    &lt;p&gt;So you pointed out that there’s a real structural problem here, and I’m actually wondering how, at a business model level, do you want to solve the structural problem? Which is, the history of computing is these days littered with the bodies of companies that try to sell a programming language. It’s a really hard business. How is Modular set up so that it’s incented to build this platform in a way that can be a shared platform that isn’t subject to just one other vendor’s lock-in?&lt;/p&gt;
    &lt;p&gt;First answer is, don’t sell a programming language. As you say, that’s very difficult. So we’re not doing that. Go take Mojo, go use it for free. We’re not selling a programming language. What we’re doing is we’re investing in this foundational technology to unify hardware. Our view is, as we’ve seen in many other domains, once you fix the foundation, now you can build high-value services for enterprises. And so our enterprise layer, often what we talk to, you end up with these groups where you have hundreds or thousands of GPUs. Often it’s rented from a cloud on a three-year commit. You have a platform team that’s carrying pagers and they need to keep all this stuff running and all the production workloads running. And then you have these product teams that are inventing new stuff all the time, and there’s new research, there’s a new model that comes out and they want to get it on the production infrastructure, but none of this stuff actually works.&lt;/p&gt;
    &lt;p&gt;And so the software ecosystem we have with all these brilliant but crazy open source tools that are thrashing around, all these different versions of CUDA and libraries, all this different hardware happening, is just a gigantic mess. And so, helping solve this for the platform engineering team that actually needs to have stuff work, and want to be able to reason about it, and want good observability and manageability and scalability and things like this is actually, we think, very interesting. We’ve gotten a lot of good responses from people on that. The cost of doing this is we want to actually make it work, that’s where we do fundamental language compiler underlying systems technology and help bring together these accelerators so that we can get, for example, the best performance on an AMD GPU and get it so that the software comes out in the same release train as support for an Nvidia GPU. And being able to pull that together, again, it just multiplicatively reduces complexity, which then leads to a product that actually works, which is really cool and very novel in AI.&lt;/p&gt;
    &lt;p&gt;So the way that Mojo plays in here, is it basically lets you provide the best possible performance and I guess the best possible performance across multiple different hardware platforms. Are you primarily thinking about this as an inference platform, or, how does the training world fit in?&lt;/p&gt;
    &lt;p&gt;So let me zoom in and I’ll explain our technology components. I have a blog post series I encourage you and any viewers or listeners to check out, called, ‘Democratizing AI Compute.’ It goes through the history of all the systems and the problems and challenges that they’ve run into, and it gets to, ‘What is Modular doing about it?’ So Part 11 talks about our architecture and the inside is Mojo, which is a programming language. I’ll explain Mojo in a second. Next level out is called MAX. And so you can think of MAX as being a PyTorch replacement or a vLLM replacement, something that you can run on a single node and then get high performance LLM surveying, that kind of use case. And then the next level out is called Mammoth, and this is the cluster management Kubernetes layer. And so if you zoom in all the way back to Mojo, you say—your experience, you know what programming languages are, they’re incredibly difficult and expensive to build.&lt;/p&gt;
    &lt;p&gt;Why would you do that in the first place? And the answer is, we had to. In fact, when we started Modular, I was like, ‘I’m not going to invent a programming language.’ I know that’s a bad idea, it takes too long, it’s too much work. You can’t convince people to adopt a new language. I know all the reasons why creating language is actually a really bad idea. But it turns out, we were forced to do this because there is no good way to solve the problem. And the problem is, how do you write code that is portable across accelerators? So, that problem, I want portability across—for example, make it simple AMD and Nvidia GPUs, but then you layer on the fact that you’re using a GPU because you want performance. And so I don’t want a simplified, watered down—I want Java that runs on a GPU.&lt;/p&gt;
    &lt;p&gt;I want the full power of the GPU. I want to be able to deliver performance that meets and beats Nvidia on their own hardware. I want to have portability and unify this crazy compute where you have these really fancy heterogeneous systems and you have tensor cores and you have this explosion of complexity and innovation happening in this hardware platform layer. Most programming languages don’t even know that there’s an 8-bit floating point that exists. And so we looked around and I really did not want to have to do this, but it turns out that there really is no good answer. And again, we decided that, hey, the stakes are high, we want to do something impactful. We’re willing to invest. I know what it takes to build a programming language. It’s not rocket science, it’s just a lot of really hard work and you need to set the team up to be incentivized the right way. But we decided that, yeah, let’s do that.&lt;/p&gt;
    &lt;p&gt;So I want to talk more about Mojo and its design, but before we do, maybe let’s talk a little bit more about the pre-existing environment. I did actually read that blog post series. I recommended it to everyone. I think it’s really great, and I want to talk a little bit about what the existing ecosystem of languages looks like, but even before then, can we talk more about the hardware? What does the space of hardware look like that people want to run these ML models on?&lt;/p&gt;
    &lt;p&gt;Yeah, so the one that most people zero in on is the GPU. And so GPUs are, I think, getting better understood now. And so if you go back before that though, you have CPUs. So, modern CPUs in a data center, often you’ll have—I mean today you guys are probably riding quite big iron, but you got 100 cores in a CPU and you got a server with two-to-four CPUs on a motherboard, and then you go and you scale that. And so, you’ve got traditional threaded workloads that have to run on CPUs, and we know how to scale that for internet servers and things like this. If you get to a GPU, the architecture shifts. And so they have basically these things called SMs. And now the programming model is that you have effectively much more medium-sized compute that’s now put together on much higher performance memory fabrics and the programming model shifts. And one of the things that really broke CUDA, for example, was when GPUs got this thing called a tensor core—and the way to think about a tensor core is it’s a dedicated piece of hardware for matrix multiplication. And so, why’d we get that? Well, a lot of AI is matrix multiplication. And so, if you design the hardware to be good at a specific workload, you can have dedicated silicon for that and you can make things go really fast.&lt;/p&gt;
    &lt;p&gt;There are really these two quite different models sitting inside of the GPU space. Of course, the name itself is weird. GPU is ‘graphics processing unit,’ which is what they were originally for. And then this SM model is really interesting. They have this notion of a warp. A warp is a collection of typically 32 threads that are operating together in lockstep, always doing the same thing—a slight variation on what’s called the SIMD model, same instruction, multiple data. It’s a little more general than that, but more or less, you can think of it as the same thing. And you just have to run a lot of them. And then there’s a ton of hardware inside of these systems basically to make switching between threads incredibly cheap. So you pay a lot of silicon to add extra registers. So the context switch is super cheap, so you can do a ton of stuff in parallel.&lt;/p&gt;
    &lt;p&gt;Each thing you’re doing is itself 32-wise parallel. And then because you can do all this very fast context switching, you can hide a lot of latency. And that worked for a while. And then we’re like, actually, we need way more of this matrix multiplication stuff. And you can sort of do reasonably efficient matrix multiplication through this warp model, but not really that good. And then there’s a bunch of quite idiosyncratic hardware, which changes its performing characteristics from generation to generation, just for doing these matrix multiplications. So that’s the Nvidia GPU story, and Volta is like V100 and A100 and H100. They just keep on going and changing, pretty materially from generation to generation in terms of the performance characteristics, and then also the memory model, which keeps on changing.&lt;/p&gt;
    &lt;p&gt;You go back to intuition, CUDA was never designed for this world. CUDA was not designed for modern GPUs. It was designed for a much simpler world. And CUDA being 20 years old, it hasn’t really caught up. And it’s very difficult because, as you say, the hardware keeps changing. And so CUDA was designed from a world where—almost like C is designed for a very simple programming model that it expected to scale, but then as the hardware changed, it couldn’t adapt. Now, if you get beyond GPUs, you get to Google TPU and many other dedicated AI systems. They blow this way out and they say, ‘Okay, well, let’s get rid of the threads that you have on a GPU and let’s just have matrix multiplication units and have really big matrix multiplication units and build the entire chip around that. And you get much more specialization, but you get a much higher throughput for those AI workloads.&lt;/p&gt;
    &lt;p&gt;Going back to, ‘Why Mojo?’ Well, Mojo was designed from first principles to support this kind of system. Each of these chips, as you’re saying, even within Nvidia’s family, from Volta, to Ampere, to Hopper, to Blackwell, these things are not compatible with each other. Actually, Blackwell just broke compatibility with Hopper, so it can’t run Hopper kernels always on Blackwell. Oops, well, why are they doing that? Well, AI software is moving so fast. They decided that was the right trade-off to make. And meanwhile, we all software people need the ability to target this. When you look at other existing systems, with Triton for example, their goal was, ‘Let’s make it easier to program a GPU,’ which I love, that’s awesome. But then they said, ‘We’ll just give up 20% of the performance of the silicon to do it.’ Wait a second. I want all the performance. And so if I’m using a GPU—GPUs are quite expensive by the way—&lt;/p&gt;
    &lt;p&gt;I want all the performance. And if it’s not going to be able to deliver the same quality of results you get by writing CUDA, well then, you’re always going to run to this head room, where you get going quickly, but then you run into a ceiling and then have to switch to a different system to get full performance. And so this is where Mojo is really trying to solve this problem where we can get more usability, more portability, and full performance of the silicon because it’s designed for these wacky architectures like tensor cores.&lt;/p&gt;
    &lt;p&gt;And if we look at the other languages that are out there, there’s languages like CUDA, and OpenCL, which are low level, typically look like variations on C++, in that tradition are unsafe languages, which means that there’s a lot of rules you have to follow. And if you don’t exactly follow the rules, you’re in undefined behavior land, it’s very hard to reason about your program.&lt;/p&gt;
    &lt;p&gt;And just let me make fun of my C++ heritage because I’ve spent so many years, like, you just have a variable that you forget to initialize, it just shoots your foot off. [laughs] Like, it’s just unnecessary violence to programmers.&lt;/p&gt;
    &lt;p&gt;Right. And it’s done in the interest of making performance better because the idea is C++ and its related languages don’t really give you enough information to know when you’re making a mistake, and they want to have as much space as they can to optimize the programs they get. So the stance is just, if you do anything that’s not allowed, we have no obligation to maintain any kind of reasonable semantics or debug ability around that behavior. And we’re just going to try really, really hard to optimize correct programs, which is a super weird stance to take, because nobody’s programs are correct. There are bugs and undefined behavior in almost any C++ program of any size. And so, you’re in a very strange position in terms of the guarantees that you get from the compiler system you’re using.&lt;/p&gt;
    &lt;p&gt;Well, so I mean, I can be dissatisfied. I can also be sympathetic with people that work on C++. So again, I’ve spent decades in this language and around this ecosystem, and building compilers for it. I know quite a lot about it. The challenge is that C++ is established, and so there’s tons of code out there. By far, the code that’s already written is the code that’s the most valuable. And so if you’re building a compiler, or you have a new chip, or you have an optimizer, your goal is to get value out of the existing software. And so you can’t invent a new programming paradigm that’s a better way of doing things and defines away the problem. Instead, you have to work with what you’ve got. You have a SPEC benchmark you’re trying to make go fast, and so you invent some crazy heroic hack that makes some important benchmark work because you can’t go change the code.&lt;/p&gt;
    &lt;p&gt;In my experience, particularly for AI, but also I’m sure within Jane Street, if something’s going slow, go change the code. You have control over the architecture of the system. And so, what I think the world really benefits from, unlike benchmark hacking, is languages that give control and power and expressivity to the programmer. And this is something where I think that, again, you take a step back and you realize history is the way it is for lots of structural and very valid reasons, but the reasons don’t apply to this new age of compute. Nobody has a workload that they can pull forward to next year’s GPU—doesn’t exist. Nobody solved this problem. I don’t know the timeframe, but once we solve that problem, once we solve portability, you can start this new era of software that can actually go forward. And so now, to me, the burden is—make sure it’s actually good. And so, to your point about memory safety, don’t make it so that forgetting to initialize a variable is just going to shoot your foot off. [Instead] produce a good compiler error saying, ‘Hey, you forgot to initialize a variable,’ right? These basic things are actually really profound and important, and the tooling and all this usability and this DNA, these feelings and thoughts, are what flow into Mojo.&lt;/p&gt;
    &lt;p&gt;And GPU programming is just a very different world from traditional CPU programming just in terms of the basic economics and how humans are involved. You end up dealing with much smaller programs. You have these very small but very high-value programs whose performance is super critical, and in the end, a relatively small coterie of experts who end up programming in it. And so it pushes you ever in the direction, you’re saying, of performance engineering, right? You want to give people the control they need to make the thing behave as it should, and you want to do it in a way that allows people to be highly productive. And the idea that you have an enormous amount of legacy code that you need to bring over, it’s like, actually you kind of don’t. The entire universe of software is actually shockingly small, and it’s really about how to write these small programs as well as possible.&lt;/p&gt;
    &lt;p&gt;And also there’s another huge change. And so this is something that I don’t think that the programming language community has recognized yet, but AI coding has massively changed the game because now you can take a CUDA kernel and say, ‘Hey, Claude, go make that into Mojo.’&lt;/p&gt;
    &lt;p&gt;And actually, how good have you guys found the experience of that? Of doing translation?&lt;/p&gt;
    &lt;p&gt;Well, we do hackathons and people do amazing things, having never touched Mojo, having never done GPU programming, and within a day they can make things happen that are just shocking. Now, AI coding tools are not magic. You cannot just vibe code DeepSeek-R1 or something, right? But it’s amazing what that can do in terms of learning new languages, learning new tools, and getting into and catalyzing ecosystems. And so this is one of the things where, again, you go back five or 10 years—everybody knows nobody can learn a new language, and nobody’s willing to adopt new things. But the entire system has changed.&lt;/p&gt;
    &lt;p&gt;So let’s talk a little bit more in detail about the architecture of Mojo. What kind of language is Mojo, and what are the design elements that you chose in order to make it be able to address this set of problems?&lt;/p&gt;
    &lt;p&gt;Yeah, again, just to relate how different the situation is—back when I was working on Swift, one of the major problems to solve was, objective C was very difficult for people to use, and you had pointers, and you had square brackets, and it was very weird. And so the goal in the game of the day was, invent new syntax and bring together modern programming language features to build a new language. Fast forward to today, actually, some of that is true. AI people don’t like C++. C++ has pointers, and it’s ugly, and it’s a 40-year-old-plus language, and has actually the same problem that Swift had to solve back in the day. But today there’s something different, which is that AI people do actually love a thing. It’s called Python. And so, one of the really important things about Mojo is, it’s a member of the Python family. And so, this is polarizing to some, because yes—I get it that some people love curly braces, but it’s hugely powerful because so much of the AI community is Pythonic already.&lt;/p&gt;
    &lt;p&gt;And so we started out by saying, let’s keep the syntax like Python and only diverge from that if there’s a really good reason. But then what are the good reasons? Well, the good reasons are, we want—as we were talking about—performance, power, full control over the system. And for GPUs, there’s these very important things you want to do that require metaprogramming. And so Mojo has a very fancy metaprogramming system, kind of inspired by this language called Zig, that brings runtime and compile time together to enable really powerful library designs. And the way you crack open this problem with tensor cores and things like this, is you enable really powerful libraries to be built in the language as libraries, instead of hard coding into the compiler.&lt;/p&gt;
    &lt;p&gt;Let’s take it a little bit to the metaprogramming idea. What is metaprogramming and why does it matter for performance in particular?&lt;/p&gt;
    &lt;p&gt;Yeah, it’s a great question, and I think you know the answer to this too, and I know you, but—&lt;/p&gt;
    &lt;p&gt;[Laughs] We are also working on metaprogramming features in our own world.&lt;/p&gt;
    &lt;p&gt;Exactly. And so the observation here is, when you’re writing a for loop in a programming language, for example, typically that for loop executes at runtime, so you’re writing code that when you execute the program, it’s the instructions that the computer will follow to execute the algorithm within your code. But when you get into designing higher level type systems, suddenly you want to be able to run code at compile time as well. And so there’s many languages out there. Some of them have macro systems, C++ has templates. What you end up getting is, you end up getting, in many languages, this duality between what happens at runtime, and then a different language almost that happens at compile time. And C++ is the most egregious, because templates that you have a for loop in runtime, but then you have unrolled recursive templates, or something like that at compile time.&lt;/p&gt;
    &lt;p&gt;Well, so the insight is, hey, these two problems are actually the same. They just run at different times. And so what Mojo does is says, let’s allow the use of effectively any code that you would use at runtime to also work at compile time. And so you can have a list, or a string, or whatever you want in the algorithms—go do memory allocation, deallocation—and you can run those at compile time, enabling you to build really powerful high-level abstractions and put them into libraries. So why is this cool? Well, the reason it’s cool is that on a GPU, for example, you’ll have a tensor core. Tensor cores are weird. We probably don’t need to deep dive into all the reasons why, but the indexing and the layout that tensor cores use is very specific and very vendor different. And so the tensor core you have on AMD, or the tensor cores you have on different versions of Nvidia GPUs are all very different.&lt;/p&gt;
    &lt;p&gt;And so what you want, is you want to build as a GP programmer a set of abstractions so you can reason about all of these things in one common ecosystem and have the layouts much higher level. And so what this enables, it enables very powerful libraries—and very powerful libraries where a lot of the logic is actually done at compile time, but you can debug it because it’s the same language that you use at runtime. And it makes the language much more simpler, much more powerful, and just be able to scale into these complexities in a way that’s possible with C++. But in C++, you get some crazy template stack trace that is maddening and impossible to understand. In Mojo, you can get a very simple error message. You can actually debug your code, and debugger things like this.&lt;/p&gt;
    &lt;p&gt;So maybe an important point here is that metaprogramming is really an old solution to this performance problem. Maybe a good way of thinking about this is, imagine you have some piece of data that you have that represents a little embedded domain-specific language that you’ve written, that you want to execute via a program that you wrote. You can, in a nice high-level way, write a little interpreter for that language that just—you know, I have maybe a Boolean expression language or who knows what else. Maybe it’s a language for computing on tensors in a GPU. And you could write a program that just executes that mini domain-specific language and does the thing that you want and you can do it, but it’s really slow. Writing an interpreter is just inherently slow because of all this interpretation overhead where you are dynamically making decisions about what the behavior of the program is. And sometimes what you want, is, you just want to actually emit exactly the code that you want and boil away the control structure and just get the direct lines of machine code that you want to do the thing that’s necessary.&lt;/p&gt;
    &lt;p&gt;And various forms of code generation let you get past in a simpler way, lets you get past all of this control structure that you have to execute at runtime and instead be able to execute it at compile time and get this minified program that just does exactly the thing that you want. So that’s a really old idea. It goes back to all sorts of programming languages. There’s a lot of Lisps that did a lot of this metaprogramming stuff, but then the problem is this stuff is super hard to think about and reason about and debug. And that’s certainly true if you think about in C, all this macro language, if you use the various C preprocessors to do this kind of stuff in C, it’s pretty painful to reason about. And then C++ made it richer and more expressive, but still really hard to reason about. And you write a C++ template and you don’t really know what it’s going to do or if it’s going to compile until you give it all the inputs and let it go and it—&lt;/p&gt;
    &lt;p&gt;Feels good in the simple case. But then when you get to more advanced cases, suddenly the complexity compounds and it gets out of hand.&lt;/p&gt;
    &lt;p&gt;And it sounds like the thing that you’re going for in Mojo is it feels like one language. It has one type system that covers both the stuff you’re generating statically and the stuff that you’re doing at runtime. It sounds like debugging works in the same way across both of these layers, but you still get the actual runtime behavior you want from a language that you could more explicitly just be like, here’s exactly the code that I want to generate.&lt;/p&gt;
    &lt;p&gt;[…] metaprogramming is one of the fancy features. One of the cool features is it feels and looks like Python, but with actual types.&lt;/p&gt;
    &lt;p&gt;Right.&lt;/p&gt;
    &lt;p&gt;And let’s not forget the basics. Having something that looks and feels like Python but it’s a thousand times faster or something is actually pretty cool. For example, if you’re on a CPU, you have access to SIMD, the SIMD registers that allow you to do multiple operations at a time and [to] be able to get the full power of your hardware even without using the fancy features is also really cool. And so the challenge with any of these systems is, how do you make something that’s powerful, but it’s also easy to use? I think your team’s been playing with Mojo and doing some cool stuff. I mean, what have you seen and what’s your experience been?&lt;/p&gt;
    &lt;p&gt;We’re all still pretty new to it, but I think it’s got a lot of exciting things going for it. I mean, the first thing is, yeah, it gives you the kind of programming model you want to get the performance that you need. And actually, in many ways the same kind of programming model that you get out of something like CUTLASS or CuTe DSL, which are these Nvidia-specific, some at the C++ level, some at the Python DSL level—and by the way, every tool you can imagine nowadays is done once in C++ and once in Python. We don’t need to implement programming languages in any other way anymore. They’re all either skins on C++ or skins on Python. But depending on which path you go down, whether you go the C++ path or the Python path, you get all sorts of complicated trade-offs.&lt;/p&gt;
    &lt;p&gt;Like in the C++ path in particular, you get very painful compilation times. The thing you said about template metaprogramming is absolutely true. The error messages are super bad. If you look at these more Python-embedded DSLs, the compile times tend to be better. It still can be hard to reason about though. One nice thing about Mojo is the overall discipline seems very explicit when you want to understand: Is this a value that’s happening at execution time at the end, or is it a value that is going to be dealt with at compile time? It’s just very explicit in the syntax, you can look and understand. Whereas in some of these DSLs, you have to actively go and poke the value and ask it what kind of value it is. And I think that kind of explicitness is actually really important for performance engineering, making it easy to understand just what precisely you’re doing.&lt;/p&gt;
    &lt;p&gt;You actually see this a ton, not even with these very low-level things, but if you look at PyTorch, which is a much higher level tool, PyTorch does this thing where you get to write a thing that looks like an ordinary Python program, but really it’s got a much trickier execution model. Python’s an amazing and terrible ecosystem in which to do this kind of stuff, because what guarantees do you have when you’re using Python? None. What can you do? Anything. You have an enormous amount of freedom. The PyTorch people in particular have leveraged this freedom in a bunch of very clever ways, where you can write a Python program that looks like it’s doing something very simple and straightforward that would be really slow, but no—it’s very carefully delaying and making some operations lazy so it can overlap compute on the GPU and CPU and make stuff go really fast. And that’s really nice, except sometimes it just doesn’t work.&lt;/p&gt;
    &lt;p&gt;This is the trap again, this is my decades of battle scars now. So as a compiler guy, I can make fun of other compiler people. There’s this trap and it’s an attractive trap, which is called the ‘sufficiently smart compiler.’ And so what you can do is you can take something and you can make it look good on a demo and you can say, ‘Look! I make it super easy and I’m going to make my compiler super smart, and it’s going to take care of all this and make it easy through magic.’ But magic doesn’t exist. And so anytime you have one of those ‘sufficiently smart compilers,’ if you go back in the days, it was like auto-parallelization, just write C code is sequential logic, and then we’re going to automatically map it into running on 100 cores on a supercomputer or something like that.&lt;/p&gt;
    &lt;p&gt;They often actually do work, they work in very simple cases and they work in the demos. But the problem is that you go and you’re using them and then you change one thing and suddenly everything breaks. Maybe the compiler crashes, it just doesn’t work. Or you go and fix a bug and now instead of 100-times speedup, you get 100-times slowdown because it foiled the compiler. A lot of AI tools, a lot of these systems, particularly these DSLs, have this design point of, let me pretend like it’s easy and then I will take care of it behind the scenes. But then when something breaks, you have to end up looking at compiler dumps, right? And this is because magic doesn’t exist. And so this is where predictability and control is really, I think, the name of the game, particularly if you want to get the most out of a piece of hardware, which is how we ended up here.&lt;/p&gt;
    &lt;p&gt;It’s funny, the same issue of, “How clever is the underlying system you’re using?” comes up when you look at the difference between CPUs and GPUs. CPUs themselves are trying to do a weird thing where a chip is a fundamentally parallel substrate. It’s got all of these circuits that in principle could be running in parallel and then it is yoked to running this extremely sequential programming language, which is just trying to do one thing after another. And then how does that actually work with any reasonable efficiency? Well, there’s all sorts of clever dirty tricks happening under the covers where it’s trying to predict what you’re going to do, this speculation that allows it to dispatch multiple instructions in a row by guessing what you’re going to do in the future. There’s things like memory prefetching where it has heuristics to estimate what memory you’re going to ask in the future so it can dispatch multiple memory requests at the same time.&lt;/p&gt;
    &lt;p&gt;And then if you look at things like GPUs, and I think even more, TPUs, and then also totally other things like FPGAs, the field-programmable gate arrays where you put basically a circuit design on it. It’s a very different kind of software system. But all of them are in some sense simpler and more deterministic and more explicitly parallel. Like when you write down your program, you have to write an explicitly parallel program—that’s actually harder to write. I don’t want to complain too much about CPUs. The great thing about CPUs is they’re extremely flexible and incredibly easy to use and all of that dark magic actually works a pretty large fraction of the time.&lt;/p&gt;
    &lt;p&gt;Yeah, remarkably well. But your point here, I think it’s really great, and what you’re saying is, you’re saying CPUs are the magic box that makes sequential code go in parallel pretty fast. And then we have new, more explicit machines, somewhat harder to program because they’re not a magic box, but you get something from it. You get performance and power because that magic box doesn’t come without a cost. It comes with a very significant cost, often the amount of power that your machine dissipates. And so it’s not efficient. And so a lot of the reasons we’re getting these new accelerators is because people really do care about it being a hundred times faster, or using way less power, or things like this. And I’d never thought about it, but your analogy of Triton to Mojo kind of follows a similar pattern, right? Triton is trying to be the magic box, and it doesn’t give you the full performance, and it burns more power, and all that kind of stuff. And so Mojo is saying, look, let’s go back to being simple. Let’s give the programmer more control. And that more explicit approach, I think, is a good fit for people that are building crazy advanced hardware like you’re talking about—but also people that want to get the best performance out of the existing hardware we have.&lt;/p&gt;
    &lt;p&gt;So we talked about how metaprogramming lets you write faster programs by boiling away this control structure that you don’t really need. So that part’s good. How does it give you portable performance? How does it help you on the portability front?&lt;/p&gt;
    &lt;p&gt;Yeah, so this is another great question. So in this category of ‘sufficiently smart compilers,’ and particularly for AI compilers, there’s been years of work and MLIR has catalyzed a lot of this work building these magic AI compilers that take TensorFlow or even the new PyTorch stuff and trying to generate optimal code for some chip. So take some PyTorch model and put it through a compiler, and magically get out high performance. And so there’s tons of these things, and there’s a lot of great work done here, and a lot of people have shown that you can take kernels and accelerate them with compilers. The challenge with this is that people don’t ever measure—what is the full performance of the chip? And so people always measure from a somewhat unfortunate baseline and then try to climb higher instead of saying—what is the speed of light? And so if you measure from speed of light, suddenly you say, okay, how do I achieve several different things?&lt;/p&gt;
    &lt;p&gt;Even if you zero into one piece of silicon, how do I achieve the best performance for one use case? And then how do I make it so the software I write can generalize even within the domain? And so for example, take a matrix multiplication, well, you want to work on maybe float32, but then you want to generalize it to float16. Okay, well, templates and things like this are easy ways to do this. Then programming allows you to say, okay, I will tackle that. And then the next thing that happens is, because you went from float32 to float16, your effective cache size has doubled, because twice as many elements fit into cache if there’s 16 bits than if there are 32 bits. Well, if that’s the case, now suddenly the access pattern needs to change. And so you get a whole bunch of this conditional logic that now changes in a very parametric way as a result of one simple change that happened with float32 to float16.&lt;/p&gt;
    &lt;p&gt;Now you play that forward and you say, okay, well actually matrix multiplication is a recursive hierarchical problem. There’s specializations for tall and skinny matrices, and a dimension is one or something. There’s all these special cases. Just one algorithm for one chip becomes this very complicated subsystem that you end up wanting to do a lot of transformations to so you can go specialize it for different use cases. And so Mojo with the metaprogramming allows you to tackle that. Now you bring in other hardware, and so think of matrix multiplication these days as being almost an operating system, and there’s so many different subsystems, and special cases, and different D types, and crazy float4 and six and other stuff going on.&lt;/p&gt;
    &lt;p&gt;At some point they’re going to come out with a floating point number so small that it will be a joke. But every time I think that they’re just kidding, it turns out it’s real.&lt;/p&gt;
    &lt;p&gt;Seriously, I heard somebody talking about 1.2-bit floating point, right? It’s exactly like you’re saying, is that a joke? You can’t be serious. And so now when you bring in other hardware, other hardware brings in more complexity because suddenly the tensor core has a different layout in AMD than it does on Nvidia. Or maybe to your point about warps, you have 64 threads in a warp on one and 32 threads in a warp on the other. But what you realize is, wait a second—this really has nothing to do with hardware vendors. This is actually true even within, for example, the Nvidia line, because across these different data types, the tensor cores are changing. The way the tensor core works for float32 is different from the way it works for float4 or something. And so you already—within one vendor—have to have this very powerful metaprogramming to be able to handle the complexity and do so in the scaffolding of a single algorithm like matrix multiplication.&lt;/p&gt;
    &lt;p&gt;And so now as you bring in other vendors, well it turns out hey, they all have things that look roughly like tensor cores. And so we’re coming at this with a software engineering perspective, and so we’re forced to build abstractions. We have this powerful metaprogramming system so we can actually achieve this. And so even for one vendor, we get this thing called LayoutTensor. LayoutTensor is saying, okay, well I have the ability to reason about not just an array of numbers or a multidimensional array of numbers, but also how it’s laid out in memory and how it gets accessed. And so now we can declaratively map these things onto the hardware that you have and these abstractions stack. And so it’s this really amazing triumvirate between having a type system that works well and this very important basis. I know you’re a fan of type systems also.&lt;/p&gt;
    &lt;p&gt;You then bring in metaprogramming, and so you can build powerful abstractions and run a compile time so you get no runtime overhead. And then you bring in the most important part of this entire equation, which is programmers who understand the domain. I am not going to write a fast matrix multiplication. I’m sorry, that’s not my experience. But there are people in that space that are just fricking brilliant. They understand exactly how the hardware works, they understand the use cases and the latest research and the new crazy quantized format of the day, but they’re not compiler people. And so the magic of Mojo is it says, ‘Hey, you have a type system, you have metaprogramming, you have effectively the full power of a compiler that you have when you’re building libraries.’ And so now these people that are brilliant at unlocking the power of the hardware can actually do this. And now they can write software that scales both across the complexity of the domain but also across hardware. And to me, that’s what I find so exciting and so powerful about this. It’s unlocking the power of the Mojo programmer instead of trying to put it into the compiler, which is what a lot of earlier systems have tried to do.&lt;/p&gt;
    &lt;p&gt;So maybe the key point here is that you get to build these abstractions that allow you to represent different kinds of hardware, and then you can conditionally have your code execute based on the kind of hardware that it’s on. It’s not like an #ifdef where you’re picking between different hardware platforms. There are complicated data structures like these layout values that tell you how you traverse data.&lt;/p&gt;
    &lt;p&gt;Which is kind of a tree. This isn’t just a simple int that you’re passing around. This is like a recursive hierarchical tree that you need at compile time.&lt;/p&gt;
    &lt;p&gt;The critical thing is you get to write a thing that feels like one synthetic program with one understandable behavior, but then parts of it are actually going to execute at compile time, so that the thing that you generate is in fact specialized for the particular platform that you’re going to run it on. So one concern I have over this is it sounds like the configuration space of your programs is going to be massive, and I feel like there are two directions where this seems potentially hard to do from an engineering perspective. One is, can you really create abstractions that within the context of the program hide the relevant complexity? So it’s possible for people to think in a modular way about the program they’re building, so their brains don’t explode with the 70 different kinds of hardware that they might be running it on. And then the other question is, how do you think about testing? Because there’s just so many configurations. How do you know whether it’s working in all the places? Because it sounds like it has an enormous amount of freedom to do different things, including wrong things in some cases. How do you deal with those two problems, both controlling the complexity of the abstractions and then having a testing story that works out?&lt;/p&gt;
    &lt;p&gt;Okay, Ron, I’m going to blow your mind. I know you’re going to be resistant to this, but let me convince you that types are cool.&lt;/p&gt;
    &lt;p&gt;Okay!&lt;/p&gt;
    &lt;p&gt;I know you’re going to fight me on this. Well, so this is again, you go back to the challenges and opportunities of working with either Python or C++. Python doesn’t have types really. I mean it has some stuff, but it doesn’t really have a type system. C++ has a type system, but it’s just incredibly painful to work with. And so what Mojo does is it says, again, it’s not rocket science. We see it all around us. Let’s bring in traits. Let’s bring in a reasonable way to write code so that we can build abstractions that are domain-specific and they can be checked modularly. And so one of the big problems with C++ is that you get error messages when you instantiate layers and layers and layers and layers of templates. And so if you get some magic number wrong, it explodes spectacularly in a way that you can’t reason about. And so what Mojo does, it says, cool, let’s bring in traits that feel very much like protocols in Swift, or traits in Rust, or type classes in Haskell. Like, this isn’t novel.&lt;/p&gt;
    &lt;p&gt;This is like a mechanism for what’s called ad hoc polymorphism, meaning I want to have some operation or function that has some meaning, but actually it’s going to get implemented in different ways for different types. And these are basically all mechanisms of a way of, given the thing that you’re doing and the types involved, looking up the right implementation that’s going to do the thing that you want.&lt;/p&gt;
    &lt;p&gt;Yeah, I mean a very simple case is an iterator. So Mojo has an iterator trait and you can say, ‘Hey, what is an iterator over a collection?’ Well, you can either check, see if there’s an element, or you can get the value at the current element. And then as you keep pulling things out of an iterator, it will eventually decide to stop. And so this concept can be applied to things like a linked list, or an array, or a dictionary, or an unbounded sequence of packets coming off a network. And so you can write code that’s generic across these different—call them “backends” or “models”—that implement this trait. And what the compiler will do for you is it will check to make sure when you’re writing that generic code, you’re not using something that won’t work. And so what that does, is it means that you can check the generic code without having to instantiate it, which is good for compile time. It’s good for user experience, because if you get something wrong as a programmer, that’s important. It’s good for reasoning about the modularity of these different subsystems, because now you have an interface that connects the two components.&lt;/p&gt;
    &lt;p&gt;I think it’s an underappreciated problem with the C++ templates approach to the world, where C++ templates seem like a deep language feature, but really they’re just a code generation feature.&lt;/p&gt;
    &lt;p&gt;They’re like C macros.&lt;/p&gt;
    &lt;p&gt;That’s right. It both means they’re hard to think about and reason about because it sort of seems at first glance not to be so bad—this property that you don’t really know when your template expands, if it’s actually going to compile. But as you start composing things more deeply, it gets worse and worse because something somewhere is going to fail, and it’s just going to be hard to reason about and understand. Whereas when you have type-level notions of genericity that are guaranteed to compose correctly and won’t just blow up, you just drive that error right down. So that’s one thing that’s nice about getting past templates as a language feature. And then the other thing is it’s just crushingly slow. You’re generating the code, almost exactly the same code, over and over and over again. And so that just means you can’t save any of the compilation work. You just have to redo the whole thing from scratch.&lt;/p&gt;
    &lt;p&gt;That’s exactly right. And so this is where again, we were talking about the sand in the system—these little things that if you get wrong, they play forward and they cause huge problems. The metaprogramming approach in Mojo is cool, both for usability and compile time and correctness. Coming back to your point about portability, it’s also valuable for portability because what it means is that the compiler parses your code, and it parses it generically and has no idea what the target is. And so when Mojo generates the first level of intermediate representation, the compiler representation for the code, it’s not hard coding and the pointers are 32 bit or 64 bit, or that you’re on a x86 or whatever. And what this means is that you can take generic code in Mojo and you can put it on a CPU and you can put it on a GPU. Same code, same function. And again, these crazy compilery things that Chris gets obsessed about, it means that you can slice out the chunk of code that you want to put onto your GPU in a way that it looks like a distributed system, but it’s a distributed system where the GPU is actually a crazy embedded device that wants this tiny snippet of code and it wants it fully self-contained. These worlds of things that normal programming languages haven’t even thought about.&lt;/p&gt;
    &lt;p&gt;So does that mean when I compile a Mojo program, I get a shippable executable that contains within it another little compiler that can take the Mojo code and specialize it to get the actual machine code for the final destination that you need? Do I bundle together all the compilers for all the possible platforms in every Mojo executable?&lt;/p&gt;
    &lt;p&gt;The answer is no. The world’s not ready for that. And there are use cases for JIT compilers and things like this, and that’s cool, but the default way of building, if you just run mojo build, then it will give you just an a.out executable, a normal thing. But if you build a Mojo package, the Mojo package retains portability. This is a big difference. This is what Java does. If you think about Java in a completely different way and for different reasons in a different ecosystem universe, it parses all your source code without knowing what the target is, and it generates Java bytecode. And so it’s not 1995 anymore. The way we do this is completely different. And we’re not Java obviously, and we have a type system that’s very different. But this concept is something that’s been well known, and is something that at least the world of compiled languages like Swift, and C++, and Rust have kind of forgotten.&lt;/p&gt;
    &lt;p&gt;So the Mojo package is kind of shipped with the compiler technology required to specialize to the different domains.&lt;/p&gt;
    &lt;p&gt;Yes. And so again, by default, if you’re a user, you’re sitting on your laptop and you say, ‘Compile a Mojo program,’ you just want an executable. But the compiler technology has all of these powerful features and they can be used in different ways. This is similar to LLVM, where LLVM had a just-in-time compiler, and that’s really important if you’re Sony Pictures and you’re rendering shaders for some fancy movie, but that’s not what you’d want to use if you’re just running a C++ code that needs to be ahead-of-time compiled.&lt;/p&gt;
    &lt;p&gt;I mean, there’s some echoes here also of the PTX story with Nvidia. Nvidia has this thing that they sort of hide that it’s an intermediate representation, but this thing called PTX, which is a portable bytecode essentially. And they for many years maintained compatibility across many, many different generations of GPUs. They have a thing called the assembler that’s part of the driver thing for loading on, and it’s really not an assembler. It’s like a real compiler that takes the PTX and compiles it down to SASS, the accelerator-specific machine code, which they very carefully do not fully document because they don’t want to give away all of their secrets. And so there’s a built-in portability story there where it’s meant to actually be portable in the future across new generations. Although as you were pointing out before, it in fact doesn’t always succeed. And there are now some programs that will not actually make the transition to Blackwell.&lt;/p&gt;
    &lt;p&gt;So that’s in the category that I’d consider to be like a virtual machine, a very low-level virtual machine by the way. And so when you’re looking at these systems, the thing I’d ask is, what is the type system? And so if you look at PTX, because as you’re saying, you’re totally right, it’s an abstraction between a whole bunch of source code on the top end and then that specific SASS hardware thing on the backend, but the type system isn’t very interesting. It’s pointers and registers and memory. And so Java, what is the type system? Well, Java achieves portability by making the type system in its bytecode expose objects. And so it’s a much higher level abstraction, dynamic virtual dispatch, that’s all part of the Java ecosystem. It’s not a bytecode, but the representation that’s portable maintains the full generic system. And so this is what makes it possible to say, ‘Okay, well I’m going to take this code, compile it once to a package, and now go specialize and instantiate this for a device.’ So the way that works is a little bit different, but it enables, coming back to your original question of safety and correctness, it enables all the checking to happen the right way.&lt;/p&gt;
    &lt;p&gt;Right, there’s also a huge shift in control. With PTX, the machine-specific details of how it’s compiled are totally out of the programmer’s control. You can generate the best PTX you can, and then it’s going to get compiled. How? Somehow, don’t ask too many questions, it’s going to do what it’s going to do. Whereas here, you’re preserving in the portable object, the programmer-driven instructions about how the specialization is going to work. You’ve just partially executed your compilation, you’ve got partway down, and then there’s some more that’s going to be done at the end when you pick actually where you’re going to run it.&lt;/p&gt;
    &lt;p&gt;Exactly. And so these are all very nerdy pieces that go into the stack, but the thing that I like is if you bubble out of that, it’s easy to use. It works. It gives good error messages, right? I don’t understand the Greek letters, but I do understand a lot of the engineering that goes into this. The way this technology stack builds up, the whole purpose is to unlock compute, and we want new programmers to be able to get into the system. And if they know Python, if they understand some of the basics of the hardware, they can be effective and then they don’t get limited to 80% of the performance. They can keep driving and keep growing in sophistication, and maybe not everybody wants to do that. They can stop at 80%, but if you do want to go all the way, then you can get there.&lt;/p&gt;
    &lt;p&gt;One thing I’m curious about is, how do you actually manage to keep it simple? You said that Mojo is meant to be Pythonic and you talked a bunch about the syntax, but actually one of the nice things about Python is it’s simple in some ways in a deeper sense. The fact that there isn’t by default a complicated type system with complicated type errors to think about—there’s a lot of problems with that, but it’s also a real source of simplicity for users who are trying to learn the system. Dynamic errors at runtime are in some ways easier to understand. ‘I wrote a program and it tried to do a thing and it tripped over this particular thing and you can see it tripping over,’ and in some ways that’s easier to understand when you’re going to a language which, for both safety and performance reasons, needs much more precise type level control. How do you do that in a way that still feels Pythonic in terms of the base simplicity that you’re exposing to users?&lt;/p&gt;
    &lt;p&gt;I can’t give you the perfect answer, but I can tell you my current thoughts. So again, learn from history. Swift had a lot of really cool features, but it spiraled and got a lot of complexity that got layered in over time. And also one of the challenges with Swift is it had a team that was paid to add features to swift.&lt;/p&gt;
    &lt;p&gt;It’s never a good thing.&lt;/p&gt;
    &lt;p&gt;Well, you have a C++ committee, what is the C++ committee going to do? They’re going to keep adding features to C++. Don’t expect C++ to get smaller. It’s common sense. And so with Mojo, there’s a couple of different things. So one of which is, start from Python. So Python being the surface-level syntax enables me as management to be able to push back and say, ‘Look, let’s make sure we’re implementing the full power of the Python ecosystem. Let’s have lists, and for-comprehensions, and all this stuff before just inventing random stuff because it might be useful.’ But there’s also, for me personally, a significant back pressure on complexity. How can we factor these things? How can we get, for example, the metaprogramming system to subsume a lot of complexity that would otherwise exist? And there are fundamental things that I want us to add.&lt;/p&gt;
    &lt;p&gt;For example, checked generics, things like this because they have a better UX, they’re part of the metaprogramming system, they’re part of the core addition that we’re adding, but I don’t want Mojo to turn into a ‘add every language feature’ that every other language has just because it’s useful to somebody. I was actually inspired by and learned a lot from Go, and it’s a language that people are probably surprised to hear me talk about. Go, I think, did a really good job of intentionally constraining the language with Go 1. And they took a lot of heat for that. They didn’t add a generic system, and everybody, myself included, were like, ‘Ha ha ha, why doesn’t this language even have a generic system? You’re not even a modern language.’ But they held the line, they understood how far people could get, and then they did a really good job of adding generics to Go 2, and I thought they did a great job.&lt;/p&gt;
    &lt;p&gt;There was a recent blog post I was reading, talking about Go, and apparently they have an 80-20 rule, and they say they want to have 80% of the features with 20% of the complexity, something like that. And the observation is that that’s a point in the space that annoys everybody, because everybody wants 81% of the features, but 81% of the features maybe gives you 35% of the complexity. And so, figuring out where to draw that line and figuring out where to say no—for example, we have people in the community that are asking for very reasonable things that exist in Rust. And Rust is a wonderful language. I love it. There’s a lot of great ideas and we shamelessly pull good ideas from everywhere. But I don’t want the complexity.&lt;/p&gt;
    &lt;p&gt;I often like to say that one of the most critical things about a language design is maintaining the power-to-weight ratio.&lt;/p&gt;
    &lt;p&gt;You want to get an enormous amount of good functionality, and power, and good user experience while minimizing that complexity. I think it is a very challenging thing to manage, and it’s actually a thing that we are seeing a lot as well. We are also doing a lot to extend OCaml in all sorts of ways, pulling from all sorts of languages, including Rust, and again, doing it in a way where the language maintains its basic character and maintains its simplicity is a real challenge. And it’s kind of hard to know if you’re hitting the actual right point on that. And it’s easier to do in a world where you can take things back, try things out and decide that maybe they don’t work, and then adjust your behavior. And we’re trying to iterate a lot in that mode, which is a thing you can do under certain circumstances. It gets harder as you have a big open-source language that lots of people are using.&lt;/p&gt;
    &lt;p&gt;That’s a really great point. And so one of the other lessons I’ve learned with Swift, is that with Swift, I pushed very early to have an open design process where anybody could come in, write a proposal, and then it would be evaluated by the language committee, and then if it was good, it would be implemented and put into Swift. Again, be careful what you wish for. That enabled a lot of people with really good ideas to add a bunch of features to Swift. And so with Mojo as a counterbalance, I really want the core team to be small. I want the core team not just to be able to add a whole bunch of stuff because it might be useful someday, but to be really deliberate about how we add things, how we evolve things.&lt;/p&gt;
    &lt;p&gt;How are you thinking about maintaining backwards compatibility guarantees as you evolve it forward?&lt;/p&gt;
    &lt;p&gt;We’re actively debating and discussing what Mojo 1.0 looks like. And so I’m not going to give you a timeframe, but it will hopefully not be very far away. And what I am fond of is this notion of semantic versioning, and saying we’re going to have a 1.0, and then we’re going to have a 2.0, and we’re going to have a 3.0, and we’re going to have a 4.0, et cetera. And each of these will be able to be incompatible, but they can link together. And so one of the big challenges and a lot of the damage in the Python ecosystem was from the Python two-to-three conversion. It took 15 years and it was a heroic mess for many different reasons. The reason it took so long is because you have to convert the entire package ecosystem before you can be 3.0. And so if you contrast that to something like C++, let me say good things about C++, they got the ABI right.&lt;/p&gt;
    &lt;p&gt;And so once the ABI was set, then you could have one package built in C++ 98, and one package built in C++ 23, and these things would interoperate and be compatible even if you took new keywords or other things in the future language version. And so what I see for Mojo is much more similar to the—maybe the C++ ecosystem or something like this, but that allows us to be a little bit more aggressive in terms of migrating code, in terms of fixing bugs, and in moving language forward. But I want to make sure that Mojo 2.0 and Mojo 1.0 packages work together and that there’s good tooling, probably AI-driven, but good tooling to move from 1.0 to 2.0 and be able to manage the ecosystem that way.&lt;/p&gt;
    &lt;p&gt;I think the type system also helps an enormous amount. I think one of the reasons the Python migration was so hard is that you couldn’t be like, ‘And then let me try and build this with Python 3 and see what’s broken.’ You could only see what’s broken by actually walking all of the execution paths of your program. And if you didn’t have enough testing, that would be very hard. And even if you did, it wasn’t that easy. Whereas with a strong type system, you can get an enormous amount of very precise guidance. And actually the combination of a strong type system and an agentic coding system is awesome. We actually have a bunch of experience of just trying these things out now, where you make some small change to the type of something and then you’re like, ‘Hey, AI system, please run down all the type errors, fix them all.’ And it does surprisingly well.&lt;/p&gt;
    &lt;p&gt;I absolutely agree. There’s other components to it. So Rust has done a very good job with the stabilization approach with crates and APIs. And I think that’s a really good thing. And so I think we’ll take good ideas from many of these different ecosystems and hopefully do something that works well, and works well for the ecosystem, and allows us to scale without being completely constrained by never being able to fix something once you ship a 1.0.&lt;/p&gt;
    &lt;p&gt;I’m actually curious, just to go to the agentic programming thing for a second, which is having AI agents that write good kernels is actually pretty hard. And I’m curious what your experience is of how things work with Mojo. Mojo is obviously not a language deeply embedded in the training set that these models were built on, but on the other hand, you have this very strong type structure that can guide the process of the AI agent trying to write and modify code. I’m curious how that pans out in practice as you try and use these tools.&lt;/p&gt;
    &lt;p&gt;So this is why Mojo being open source, and—so we have hundreds of thousands of lines of Mojo code that are public with all these GPU kernels, and like, all this other cool stuff. And we have a community of people writing more code. Having hundreds of thousand lines of Mojo code is fantastic. You can point your coding tool cursor, or whatever it is, at that repo and say, ‘Go learn about this repo and index it.’ So it’s not that you have to train the model to know the language, just having access to it—that enables it to do good work. And these tools are phenomenal. And so that’s been very, very, very important. And so we have instructions on our webpage for how to set up these tools, and there’s a huge difference if you set it up right, so that it can index that, or if you don’t, and make sure to follow that markdown file that explains how to set up the tool.&lt;/p&gt;
    &lt;p&gt;So, I want to talk a little bit about the future of Mojo. I think that the current way that Modular and you have been talking about Mojo, these days at least—it’s a replacement for CUDA, an alternate full top-to-bottom stack for building GPU kernels, for writing programs that execute on GPUs. But that’s not the only way you’ve ever talked about Mojo. You’ve also, especially earlier on I think, there was more discussion of Mojo as an extension, and maybe evolution of, and maybe eventually replacement of Python. And I’m curious, how do you think about that now? To what degree do you think of Mojo as its own new language that takes inspiration and syntax from Python, and to what degree do you want something that’s more deeply integrated over time?&lt;/p&gt;
    &lt;p&gt;So today, to pull it back to, ‘What is Mojo useful for today, and how do we explain it?’ Mojo is useful if you want code to go fast. If you have code on a CPU or a GPU and you want it to go fast, Mojo is a great thing. One of the really cool things that is available now—but it’s in preview and it’ll solidify in the next month or something—is it’s also the best way to extend Python. And so if you have a large-scale Python code base, again, tell me if this sounds familiar, you are coding away and you’re doing cool stuff in Python and then it starts to get slow. Typically what people do is, they have to either go rewrite the whole thing in Rust or C++, or they carve out some chunk of it and move some chunk of that package to C++ or Rust. This is what NumPy, or PyTorch, or all modern large-scale Python code bases end up doing.&lt;/p&gt;
    &lt;p&gt;If you look up on the mirrors and look at the percentage of programs that have C extensions in them, it’s shockingly high. A really large fraction of Python stuff is actually part Python and part some other language, almost always C and C++, a little bit of Rust.&lt;/p&gt;
    &lt;p&gt;That’s right. And so today—this isn’t distant future—today, you can take your Python package and you can create a Mojo file and you can say, ‘Okay, well these for loops are slow, move it over to Mojo.’ And we have people, for example, doing bioinformatics and other crazy stuff I know nothing about, saying, ‘Okay, well I’m just taking my Python code, I move it over to Mojo. Wow, now I get types, I get these benefits, but there’s no bindings. The pip experience is beautiful. It’s super simple.’ You don’t have to have FFI’s and nanobind and all this complexity to be able to do this. You also are not moving from Python with its syntax to curly braces and borrow checkers and other craziness. You now get a very simple and seamless way to extend your Python package. And we have people that say, okay, well I did that and I got it first 10x, and 100x, and 1000x faster on CPU.&lt;/p&gt;
    &lt;p&gt;But then because it was easy, I just put it on a GPU. And so to me, this is amazing because these are people that didn’t even think and would never have gotten it on a GPU if they switched to Rust or something like that. Again, the way I explain it is, Mojo is good for performance. It’s good if you want to go fast on a GPU, on a CPU, if you want to make Python go fast, or if you want to—I mean, some people are crazy enough to go whole hog and just write entirely from scratch Mojo programs, and that’s super cool. If you fast forward six, nine months, something, I think that Mojo will be a very credible top-to-bottom replacement for Rust.&lt;/p&gt;
    &lt;p&gt;And so we need a few more extensions to the generic system. And there’s a few things I want to bake out a little bit. Some of the dynamic features that Rust has for the existentials, the ability to make a runtime trait is missing in Mojo. And so we’ll add a few of those kinds of features. And as we do that, I think that’ll be really interesting as an applications-level programming language for people who care about this kind of stuff. You fast forward, I might even project a timeframe, maybe a year, 18 months from now, it depends on how we prioritize things, and we’ll add classes. And so as we add classes, suddenly it will look and feel to a Python programmer much more familiar. The classes in Mojo will be intentionally designed to be very similar to Python, and at that point we’ll have something that looks and feels kind of like a Python 4.&lt;/p&gt;
    &lt;p&gt;It’s very much cut from the same mold as Python. It integrates really well from Python. It’s really easy to extend Python, and so it’s very much a member of the Python family, but it’s not compatible with Python. And so what we’ll do over the course of N years, and I can’t predict exactly how long that is, is continue to run down the line of, okay, well how much compatibility do we want to add to this thing? And then I think that at some point people will consider it to be a Python superset, and effectively it will feel just like the best way to do Python in general. And I think that that will come in time. But to bring it all the way back, I want us to be very focused on, ‘What is Mojo useful for today?’ Great claims require great proof.&lt;/p&gt;
    &lt;p&gt;We have no proof that we can do this. I have a vision and a future in my brain, and I’ve built a few languages and some scale things before, and so I have quite high confidence that we can do this. But I want people to zero back into, okay, if you’re writing performance code, if you’re writing GPU kernels or AI, if you have Python code, you don’t want it to go slow, a few of us have that problem, then Mojo can be very useful. And hopefully it’ll be even more useful to more people in the future.&lt;/p&gt;
    &lt;p&gt;And I think that already, the practical short-term thing is already plenty ambitious and exciting on its own. Seems like a great thing to focus on.&lt;/p&gt;
    &lt;p&gt;Yeah, let’s solve heterogeneous compute and AI. That’s actually a pretty useful thing, right?&lt;/p&gt;
    &lt;p&gt;Alright, that seems like a great place to stop. Thank you so much for joining me.&lt;/p&gt;
    &lt;p&gt;Yeah, well thank you for having me. I love nerding out with you and I hope it’s useful and interesting to other people too. But even if not, I had a lot of fun with you.&lt;/p&gt;
    &lt;p&gt;You’ll find a complete transcript of the episode along with show notes and links at signalsandthreads.com. Thanks for joining us. See you next time.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45137373</guid></item><item><title>I ditched Docker for Podman</title><link>https://codesmash.dev/why-i-ditched-docker-for-podman-and-you-should-too</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45137525</guid></item><item><title>Purposeful animations</title><link>https://emilkowal.ski/ui/you-dont-need-animations</link><description>&lt;doc fingerprint="f7eb51a5ad29df05"&gt;
  &lt;main&gt;&lt;p&gt;When done right, animations make an interface feel predictable, faster, and more enjoyable to use. They help you and your product stand out.&lt;/p&gt;&lt;p&gt;But they can also do the opposite. They can make an interface feel unpredictable, slow, and annoying. They can even make your users lose trust in your product.&lt;/p&gt;&lt;p&gt;So how do you know when and how to animate to improve the experience?&lt;/p&gt;&lt;p&gt;Step one is making sure your animations have a purpose.&lt;/p&gt;&lt;head rend="h2"&gt;Purposeful animations&lt;/head&gt;&lt;p&gt;Before you start animating, ask yourself: what’s the purpose of this animation? &lt;lb/&gt;As an example, what’s the purpose of this marketing animation we built at Linear?&lt;/p&gt;&lt;p&gt;You can view the full animation on linear.app/ai.&lt;/p&gt;&lt;p&gt;This animation explains how Product Intelligence (Linear’s feature) works. We could have used a static asset, but the animated version helps the user understand what this feature does, straight in the initial viewport of the page.&lt;/p&gt;&lt;p&gt;Another purposeful animation is this subtle scale down effect when pressing a button. It’s a small thing, but it helps the interface feel more alive and responsive.&lt;/p&gt;&lt;p&gt;Sonner’s enter animation, on the other hand, has two purposes:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;- Having a toast suddenly appear would feel off, so we animate it in.&lt;/item&gt;&lt;item&gt;- Because it comes from and leaves in the same direction, it creates spatial consistency, making the swipe-down-to-dismiss gesture feel more intuitive.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;But sometimes the purpose of an animation might just be to bring delight.&lt;/p&gt;&lt;p&gt;Morphing of the feedback component below helps make the experience more unique and memorable. This works as long as the user will rarely interact with it. It’ll then become a pleasant surprise, rather than a daily annoyance.&lt;/p&gt;&lt;p&gt;Press on the button to see it morph.&lt;/p&gt;&lt;p&gt;Used multiple times a day, this component would quickly become irritating. The initial delight would fade and the animation would slow users down.&lt;/p&gt;&lt;p&gt;How often users will see an animation is a key factor in deciding whether to animate or not. Let’s dive deeper into it next.&lt;/p&gt;&lt;head rend="h2"&gt;Frequency of use&lt;/head&gt;&lt;p&gt;I use Raycast hundreds of times a day. If it animated every time I opened it, it would be very annoying. But there’s no animation at all. That’s the optimal experience.&lt;/p&gt;&lt;p&gt;To see it for yourself, try to toggle the open state of the menu below by using the buttons belowpressing &lt;code&gt;J&lt;/code&gt; and then &lt;code&gt;K&lt;/code&gt;. Which one feels better if used hundreds of times a day?&lt;/p&gt;&lt;p&gt;When I open Raycast, I have a clear goal in mind. I don’t expect to be “delighted”, I don’t need to be. I just want to do my work with no unnecessary friction.&lt;/p&gt;&lt;p&gt;Think about what the user wants to achieve and how often they will see an animation. A hover effect is nice, but if used multiple times a day, it would likely benefit the most from having no animation at all.&lt;/p&gt;&lt;p&gt;Imagine you interact with this list often during the day.&lt;/p&gt;&lt;p&gt;Imagine you interact with this list often during the day.&lt;/p&gt;&lt;p&gt;The same goes for keyboard-initiated actions. These actions may be repeated hundreds of times a day, an animation would make them feel slow, delayed, and disconnected from the user’s actions. You should never animate them.&lt;/p&gt;&lt;p&gt;Since we can’t really use a keyboard on touch devices, you can press the buttons below to see how it feels with and without animation.&lt;/p&gt;&lt;p&gt;To see it for yourself, focus on the input below and use arrow keys to navigate through the list. Notice how the highlight feels delayed compared to the keys you press. Now press (shift) and see how this interaction feels without animation.&lt;/p&gt;&lt;p&gt;But even if your animation won’t be used too often and it fulfills a clear purpose, you still have to think about its speed…&lt;/p&gt;&lt;head rend="h2"&gt;Perception of speed&lt;/head&gt;&lt;p&gt;Unless you are working on marketing sites, your animations have to be fast. They improve the perceived performance of your app, stay connected to user’s actions, and make the interface feel as if it’s truly listening to the user.&lt;/p&gt;&lt;p&gt;To give you an example, a faster-spinning spinner makes the app seem to load faster, even though the load time is the same. This improves perceived performance.&lt;/p&gt;&lt;p&gt;Which one works harder to load the data?&lt;/p&gt;&lt;p&gt;A &lt;code&gt;180ms&lt;/code&gt; dropdown animation feels more responsive than a &lt;code&gt;400ms&lt;/code&gt; one:&lt;/p&gt;&lt;p&gt;Click on the buttons to compare the speed.&lt;/p&gt;&lt;p&gt;As a rule of thumb, UI animations should generally stay under &lt;code&gt;300ms&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Another example of the importance of speed: tooltips should have a slight delay before appearing to prevent accidental activation. Once a tooltip is open however, hovering over other tooltips should open them with no delay and no animation.&lt;/p&gt;&lt;p&gt;This feels faster without defeating the purpose of the initial delay.&lt;/p&gt;&lt;p&gt;Radix UI and Base UI skip the delay once a tooltip is shown.&lt;/p&gt;&lt;p&gt;Radix UI and Base UI skip the delay once a tooltip is shown.&lt;/p&gt;&lt;head rend="h2"&gt;Building great interfaces&lt;/head&gt;&lt;p&gt;The goal is not to animate for animation’s sake, it’s to build great user interfaces. The ones that users will happily use, even on a daily basis. Sometimes this requires animations, but sometimes the best animation is no animation.&lt;/p&gt;&lt;p&gt;Knowing when to animate is just one of many things you need to know in order to craft great animations. If you’d like to dive deeper into the theory and practice of it, I’ve created a course that covers everything you need to know:&lt;/p&gt;Check out "Animations on the Web"&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45139088</guid></item><item><title>Protobuffers Are Wrong (2018)</title><link>https://reasonablypolymorphic.com/blog/protos-are-wrong/</link><description>&lt;doc fingerprint="1c20d80c0e053ed4"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Protobuffers Are Wrong&lt;/head&gt;
    &lt;p&gt;I’ve spent a good deal of my professional life arguing against using protobuffers. They’re clearly written by amateurs, unbelievably ad-hoc, mired in gotchas, tricky to compile, and solve a problem that nobody but Google really has. If these problems of protobuffers remained quarantined in serialization abstractions, my complaints would end there. But unfortunately, the bad design of protobuffers is so persuasive that these problems manage to leak their way into your code as well.&lt;/p&gt;
    &lt;head rend="h2"&gt;Ad-Hoc and Built By Amateurs&lt;/head&gt;
    &lt;p&gt;Stop. Put away your email client that is half-way through writing me about how “Google is filled with the world’s best engineers,” and that “anything they build is, by definition, not built by amateurs.” I don’t want to hear it.&lt;/p&gt;
    &lt;p&gt;Let’s just get this out of the way. Full disclosure: I used to work at Google. It was the first (but unfortunately, not the last) place I ever used protobuffers. All of the problems I want to talk about today exist inside of Google’s codebase; it’s not just a matter of “using protobuffers wrong” or some such nonsense like that.&lt;/p&gt;
    &lt;p&gt;By far, the biggest problem with protobuffers is their terrible type-system. Fans of Java should feel right at home with protobuffers, but unfortunately, literally nobody considers Java to have a well-designed type-system. The dynamic typing guys complain about it being too stifling, while the static typing guys like me complain about it being too stifling without giving you any of the things you actually want in a type-system. Lose lose.&lt;/p&gt;
    &lt;p&gt;The ad-hoc-ness and the built-by-amateurs-itude go hand-in-hand. So much of the protobuffer spec feels bolted on as an afterthought that it clearly was bolted on as an afterthought. Many of its restrictions will make you stop, scratch your head and ask “wat?” But these are just symptoms of the deeper answer, which is this:&lt;/p&gt;
    &lt;p&gt;Protobuffers were obviously built by amateurs because they offer bad solutions to widely-known and already-solved problems.&lt;/p&gt;
    &lt;head rend="h3"&gt;No Compositionality&lt;/head&gt;
    &lt;p&gt;Protobuffers offer several “features”, but none of them see to work with one another. For example, look at the list of orthogonal-yet-constrained typing features that I found by skimming the documentation.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;oneof&lt;/code&gt;fields can’t be&lt;code&gt;repeated&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;map&amp;lt;k,v&amp;gt;&lt;/code&gt;fields have dedicated syntax for their keys and values, but this isn’t used for any other types.&lt;/item&gt;
      &lt;item&gt;Despite &lt;code&gt;map&lt;/code&gt;fields being able to be parameterized, no user-defined types can be. This means you’ll be stuck hand-rolling your own specializations of common data structures.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;map&lt;/code&gt;fields cannot be&lt;code&gt;repeated&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;map&lt;/code&gt;keys can be&lt;code&gt;string&lt;/code&gt;s, but can not be&lt;code&gt;bytes&lt;/code&gt;. They also can’t be&lt;code&gt;enum&lt;/code&gt;s, even though&lt;code&gt;enum&lt;/code&gt;s are considered to be equivalent to integers everywhere else in the protobuffer spec.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;map&lt;/code&gt;values cannot be other&lt;code&gt;map&lt;/code&gt;s.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This insane list of restrictions is the result of unprincipled design choices and bolting on features after the fact. For example, &lt;code&gt;oneof&lt;/code&gt; fields can’t be &lt;code&gt;repeated&lt;/code&gt; because rather than resulting in a coproduct type, instead the code generator will give you a product of mutually-exclusive optional fields. Such a transformation is only valid for a singular field (and, as we’ll see later, not even then.)&lt;/p&gt;
    &lt;p&gt;The restriction behind &lt;code&gt;map&lt;/code&gt; fields being unable to be &lt;code&gt;repeated&lt;/code&gt; is related, but shows off a different limitation of the type-system. Behind the scenes, a &lt;code&gt;map&amp;lt;k,v&amp;gt;&lt;/code&gt; is desugared into something spiritually similar to &lt;code&gt;repeated Pair&amp;lt;k,v&amp;gt;&lt;/code&gt;. And because &lt;code&gt;repeated&lt;/code&gt; is a magical language keyword rather than a type in its own right, it doesn’t compose with itself.&lt;/p&gt;
    &lt;p&gt;Your guess is as good as mine for why an &lt;code&gt;enum&lt;/code&gt; can’t be used as a &lt;code&gt;map&lt;/code&gt; key.&lt;/p&gt;
    &lt;p&gt;What’s so frustrating about all of this is a little understanding of how modern type-systems work would be enough to drastically simplify the protobuffer spec and simultaneously remove all of the arbitrary restrictions.&lt;/p&gt;
    &lt;p&gt;The solution is as follows:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Make all fields in a message &lt;code&gt;required&lt;/code&gt;. This makes messages product types.&lt;/item&gt;
      &lt;item&gt;Promote &lt;code&gt;oneof&lt;/code&gt;fields to instead be standalone data types. These are coproduct types.&lt;/item&gt;
      &lt;item&gt;Give the ability to parameterize product and coproduct types by other types.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;That’s it! These three features are all you need in order to define any possible piece of data. With these simpler pieces, we can re-implement the rest of the protobuffer spec in terms of them.&lt;/p&gt;
    &lt;p&gt;For example, we can rebuild &lt;code&gt;optional&lt;/code&gt; fields:&lt;/p&gt;
    &lt;code&gt;{
 product Unit // no fields
   }

&amp;lt;t&amp;gt; {
 coproduct Optional= 0;
   t    value = 1;
   Unit unset }&lt;/code&gt;
    &lt;p&gt;Building &lt;code&gt;repeated&lt;/code&gt; fields is simple too:&lt;/p&gt;
    &lt;code&gt;&amp;lt;t&amp;gt; {
 coproduct List= 0;
   Unit empty &amp;lt;t, List&amp;lt;t&amp;gt;&amp;gt; cons = 1;
   Pair}&lt;/code&gt;
    &lt;p&gt;Of course, the actual serialization logic is allowed to do something smarter than pushing linked-lists across the network—after all, implementations and semantics don’t need to align one-to-one.&lt;/p&gt;
    &lt;head rend="h3"&gt;Questionable Choices&lt;/head&gt;
    &lt;p&gt;In the vein of Java, protobuffers make the distinction between scalar types and message types. Scalars correspond more-or-less to machine primitives—things like &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt;. Messages, on the other hand, are everything else. All library- and user-defined types are messages.&lt;/p&gt;
    &lt;p&gt;The two varieties of types have completely different semantics, of course.&lt;/p&gt;
    &lt;p&gt;Fields with scalar types are always present. Even if you don’t set them. Did I mention that (at least in proto31) all protobuffers can be zero-initialized with absolutely no data in them? Scalar fields get false-y values—&lt;code&gt;uint32&lt;/code&gt; is initialized to &lt;code&gt;0&lt;/code&gt; for example, and &lt;code&gt;string&lt;/code&gt; is initialized as &lt;code&gt;""&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;It’s impossible to differentiate a field that was missing in a protobuffer from one that was assigned to the default value. Presumably this decision is in place in order to allow for an optimization of not needing to send default scalar values over the wire. Presumably, though the encoding guide makes no mention of this optimization being performed, so your guess is as good as mine.&lt;/p&gt;
    &lt;p&gt;As we’ll see when we discuss protobuffers’ claim to being god’s gift to backwards- and forwards-compatible APIs, this inability to distinguish between unset and default values is a nightmare. Especially if indeed it’s a design decision made in order to save one bit (set or not) per field.&lt;/p&gt;
    &lt;p&gt;Contrast this behavior against message types. While scalar fields are dumb, the behavior for message fields is outright insane. Internally, message fields are either there or they’re not—but their behavior is crazy. Some pseudocode for their accessor is worth a thousand words. Pretend this is Java or something similar:&lt;/p&gt;
    &lt;code&gt;private Foo m_foo;

public Foo foo {
// only if `foo` is used as an expression
   {
   get if (m_foo != null)
     return m_foo;
       else
     return new Foo();
       }
   
// instead if `foo` is used as an lvalue
   {
   mutable get if (m_foo = null)
     = new Foo();
       m_foo return m_foo;
     }
   }&lt;/code&gt;
    &lt;p&gt;The idea is that if the &lt;code&gt;foo&lt;/code&gt; field is unset, you’ll see a default-initialized copy whenever you ask for it, but won’t actually modify its container. But if you modify &lt;code&gt;foo&lt;/code&gt;, it will modify its parent as well! All of this just to avoid using a &lt;code&gt;Maybe Foo&lt;/code&gt; type and the associated “headaches” of the nuance behind needing to figure out what an unset value should mean.&lt;/p&gt;
    &lt;p&gt;This behavior is especially egregious, because it breaks a law! We’d expect the assignment &lt;code&gt;msg.foo = msg.foo;&lt;/code&gt; to be a no-op. Instead the implementation will actually silently change &lt;code&gt;msg&lt;/code&gt; to have a zero-initialized copy of &lt;code&gt;foo&lt;/code&gt; if it previously didn’t have one.&lt;/p&gt;
    &lt;p&gt;Unlike scalar fields, at least it’s possible to detect if a message field is unset. Language bindings for protobuffers offer something along the lines of a generated &lt;code&gt;bool has_foo()&lt;/code&gt; method. In the frequent case of copying a message field from one proto to another, iff it was present, you’ll need to write the following code:&lt;/p&gt;
    &lt;code&gt;if (src.has_foo(src)) {
.set_foo(src.foo());
   dst}&lt;/code&gt;
    &lt;p&gt;Notice that, at least in statically-typed languages, this pattern cannot be abstracted due to the nominal relationship between the methods &lt;code&gt;foo()&lt;/code&gt;, &lt;code&gt;set_foo()&lt;/code&gt; and &lt;code&gt;has_foo()&lt;/code&gt;. Because all of these functions are their own identifiers, we have no means of programmatically generating them, save for a preprocessor macro:&lt;/p&gt;
    &lt;code&gt;#define COPY_IFF_SET(src, dst, field) \
if (src.has_##field(src)) { \
  dst.set_##field(src.field()); \
}&lt;/code&gt;
    &lt;p&gt;(but preprocessor macros are verboten by the Google style guide.)&lt;/p&gt;
    &lt;p&gt;If instead all optional fields were implemented as &lt;code&gt;Maybe&lt;/code&gt;s, you’d get abstract-able, referentially transparent call-sites for free.&lt;/p&gt;
    &lt;p&gt;To change tack, let’s talk about another questionable decision. While you can define &lt;code&gt;oneof&lt;/code&gt; fields in protobuffers, their semantics are not of coproduct types! Rookie mistake my dudes! What you get instead is an optional field for each case of the &lt;code&gt;oneof&lt;/code&gt;, and magic code in the setters that will just unset any other case if this one is set.&lt;/p&gt;
    &lt;p&gt;At first glance, this seems like it should be semantically equivalent to having a proper union type. But instead it is an accursed, unutterable source of bugs! When this behavior teams up with the law-breaking implementation of &lt;code&gt;msg.foo = msg.foo;&lt;/code&gt;, it allows this benign-looking assignment to silently delete arbitrary amounts of data!&lt;/p&gt;
    &lt;p&gt;What this means at the end of the day is that &lt;code&gt;oneof&lt;/code&gt; fields do not form law-abiding &lt;code&gt;Prism&lt;/code&gt;s, nor do messages form law-abiding &lt;code&gt;Lens&lt;/code&gt;es. Which is to say good luck trying to write bug-free, non-trivial manipulations of protobuffers. It is literally impossible to write generic, bug-free, polymorphic code over protobuffers.&lt;/p&gt;
    &lt;p&gt;That’s not the sort of thing anybody likes to hear, let alone those of us who have grown to love parametric polymorphism—which gives us the exact opposite promise.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Lie of Backwards- and Forwards-Compatibility&lt;/head&gt;
    &lt;p&gt;One of the frequently cited killer features of protobuffers is their “hassle-free ability to write backwards- and forwards-compatible APIs.” This is the claim that has been pulled over your eyes to blind you from the truth.&lt;/p&gt;
    &lt;p&gt;What protobuffers are is permissive. They manage to not shit the bed when receiving messages from the past or from the future because they make absolutely no promises about what your data will look like. Everything is optional! But if you need it anyway, protobuffers will happily cook up and serve you something that typechecks, regardless of whether or not it’s meaningful.&lt;/p&gt;
    &lt;p&gt;This means that protobuffers achieve their promised time-traveling compatibility guarantees by silently doing the wrong thing by default. Of course, the cautious programmer can (and should) write code that performs sanity checks on received protobuffers. But if at every use-site you need to write defensive checks ensuring your data is sane, maybe that just means your deserialization step was too permissive. All you’ve managed to do is decentralize sanity-checking logic from a well-defined boundary and push the responsibility of doing it throughout your entire codebase.&lt;/p&gt;
    &lt;p&gt;One possible argument here is that protobuffers will hold onto any information present in a message that they don’t understand. In principle this means that it’s nondestructive to route a message through an intermediary that doesn’t understand this version of its schema. Surely that’s a win, isn’t it?&lt;/p&gt;
    &lt;p&gt;Granted, on paper it’s a cool feature. But I’ve never once seen an application that will actually preserve that property. With the one exception of routing software, nothing wants to inspect only some bits of a message and then forward it on unchanged. The vast majority of programs that operate on protobuffers will decode one, transform it into another, and send it somewhere else. Alas, these transformations are bespoke and coded by hand. And hand-coded transformations from one protobuffer to another don’t preserve unknown fields between the two, because it’s literally meaningless.&lt;/p&gt;
    &lt;p&gt;This pervasive attitude towards protobuffers always being compatible rears its head in other ugly ways. Style guides for protobuffers actively advocate against DRY and suggest inlining definitions whenever possible. The reasoning behind this is that it allows you to evolve messages separately if these definitions diverge in the future. To emphasize that point, the suggestion is to fly in the face of 60 years’ worth of good programming practice just in case maybe one day in the future you need to change something.&lt;/p&gt;
    &lt;p&gt;At the root of the problem is that Google conflates the meaning of data with its physical representation. When you’re at Google scale, this sort of thing probably makes sense. After all, they have an internal tool that allows you to compare the finances behind programmer hours vs network utilization vs the cost to store \(x\) bytes vs all sorts of other things. Unlike most companies in the tech space, paying engineers is one of Google’s smallest expenses. Financially it makes sense for them to waste programmers’ time in order to shave off a few bytes.&lt;/p&gt;
    &lt;p&gt;Outside of the top five tech companies, none of us is within five orders of magnitude of being Google scale. Your startup cannot afford to waste engineer hours on shaving off bytes. But shaving off bytes and wasting programmers’ time in the process is exactly what protobuffers are optimized for.&lt;/p&gt;
    &lt;p&gt;Let’s face it. You are not Google scale and you never will be. Stop cargo-culting technology just because “Google uses it” and therefore “it’s an industry best-practice.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Protobuffers Contaminate Codebases&lt;/head&gt;
    &lt;p&gt;If it were possible to restrict protobuffer usage to network-boundaries I wouldn’t be nearly as hard on it as a technology. Unfortunately, while there are a few solutions in principle, none of them is good enough to actually be used in real software.&lt;/p&gt;
    &lt;p&gt;Protobuffers correspond to the data you want to send over the wire, which is often related but not identical to the actual data the application would like to work with. This puts us in the uncomfortable position of needing to choose between one of three bad alternatives:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Maintain a separate type that describes the data you actually want, and ensure that the two evolve simultaneously.&lt;/item&gt;
      &lt;item&gt;Pack rich data into the wire format for application use.&lt;/item&gt;
      &lt;item&gt;Derive rich information every time you need it from a terse wire format.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Option 1 is clearly the “right” solution, but its untenable with protobuffers. The language isn’t powerful enough to encode types that can perform double-duty as both wire and application formats. Which means you’d need to write a completely separate datatype, evolve it synchronously with the protobuffer, and explicitly write serialization code between the two. Seeing as most people seem to use protobuffers in order to not write serialization code, this is obviously never going to happen.&lt;/p&gt;
    &lt;p&gt;Instead, code that uses protobuffers allows them to proliferate throughout the codebase. True story, my main project at Google was a compiler that took “programs” written in one variety of protobuffer, and spit out an equivalent “program” in another. Both the input and output formats were expressive enough that maintaining proper parallel C++ versions of them could never possibly work. As a result, my code was unable to take advantage of any of the rich techniques we’ve discovered for writing compilers, because protobuffer data (and resulting code-gen) is simply too rigid to do anything interesting.&lt;/p&gt;
    &lt;p&gt;The result is that a thing that could have been 50 lines of recursion schemes was instead 10,000 lines of ad-hoc buffer-shuffling. The code I wanted to write was literally impossible when constrained by having protobuffers in the mix.&lt;/p&gt;
    &lt;p&gt;While this is an anecdote, it’s not in isolation. By virtue of their rigid code-generation, manifestations of protobuffers in languages are never idiomatic, nor can they be made to be—short of rewriting the code-generator.&lt;/p&gt;
    &lt;p&gt;But even then, you still have the problem of needing to embed a shitty type-system into the targeted language. Because most of protobuffers’ features are ill-conceived, these unsavory properties leak into our codebases. It means we’re forced to not only implement, but also use these bad ideas in any project which hopes to interface with protobuffers.&lt;/p&gt;
    &lt;p&gt;While it’s easy to implement inane things out of a solid foundation, going the other direction is challenging at best and the dark path of Eldrich madness at worst.&lt;/p&gt;
    &lt;p&gt;In short, abandon all hope ye who introduce protobuffers into your projects.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;To this day, there’s a raging debate inside Google itself about proto2 and whether fields should ever be marked as&lt;/p&gt;&lt;code&gt;required&lt;/code&gt;. Manifestos with both titles “&lt;code&gt;optional&lt;/code&gt;considered harmful” and “&lt;code&gt;required&lt;/code&gt;considered harmful.” Good luck sorting that out.↩︎&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45139656</guid></item><item><title>MentraOS – open-source Smart glasses OS</title><link>https://github.com/Mentra-Community/MentraOS</link><description>&lt;doc fingerprint="d2f052307bbfb732"&gt;
  &lt;main&gt;
    &lt;p&gt;Works with Even Realities G1, Mentra Mach 1, Mentra Live. See smart glasses compatibility list here.&lt;/p&gt;
    &lt;p&gt;The Mentra Store already has a ton of useful apps that real users are running everyday. Here are some apps already published by developers on the Mentra Store:&lt;/p&gt;
    &lt;p&gt;MentraOS is how developers build smart glasses apps. We handle the pairing, connection, data streaming, and cross-compatibility, so you can focus on creating amazing apps. Every component is 100% open source (MIT license).&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Cross Compatibility: Your app runs on any pair of smart glasses&lt;/item&gt;
      &lt;item&gt;Speed: TypeScript SDK means you're making apps in minutes, not months&lt;/item&gt;
      &lt;item&gt;Control: Access smart glasses I/O - displays, microphones, cameras, speakers&lt;/item&gt;
      &lt;item&gt;Distribution: Get your app in front of everyone using smart glasses&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The MentraOS Community is a group of developers, companies, and users dedicated to ensuring the next personal computer is open, cross-compatible, and user-controlled. That's why we're building MentraOS.&lt;/p&gt;
    &lt;p&gt;To get involved, join the MentraOS Community Discord server.&lt;/p&gt;
    &lt;p&gt;Have questions or ideas? We'd love to hear from you!&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Email: team@mentra.glass&lt;/item&gt;
      &lt;item&gt;Discord: Join our community&lt;/item&gt;
      &lt;item&gt;Twitter: Follow @mentralabs&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;MentraOS is made by a community and we welcome PRs. Here's the Contributors Guide: docs.mentra.glass/contributing&lt;/p&gt;
    &lt;p&gt;MIT License Copyright 2025 MentraOS Community&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45140381</guid></item><item><title>Making a font of my handwriting</title><link>https://chameth.com/making-a-font-of-my-handwriting/</link><description>&lt;doc fingerprint="3714a019faa705f8"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Making a font of my handwriting&lt;/head&gt;
    &lt;p&gt;Published on&lt;/p&gt;
    &lt;p&gt;Recently Iâve been on a small campaign to try to make my personal website moreâ¦ personal. Little ways to make it obvious itâs mine and personal, not just another piece of the boring corporate dystopia that is most of the web these days. I donât quite want to fully regress to the Geocities era and fill the screen with animated under construction GIFs, but I do want to capture some of that vibe.&lt;/p&gt;
    &lt;p&gt;Iâd added some bits and pieces along those lines: floating images in articles now look like theyâre stuck to the page with sellotape, related post links have a wavy border that animates when you hover over them, and so on. Next, I wanted to change the heading fonts from a monospace font to something cursive, to resemble handwriting. Less terminal output, more handwritten letter. I couldnât find one I liked, though. So why not make my own? It canât be that hard, right?&lt;/p&gt;
    &lt;head rend="h3"&gt;Failing to do it myself&lt;/head&gt;
    &lt;p&gt;I set out to try to make the font myself using open source tools. After doing a bit of research, it seemed like the general approach was to create vectors of each character and then import them into a font editor. That seems to mean either Adobe Illustrator and FontLab (if you have too much money) or Inkscape and FontForge (if you like open source). I fall firmly into the latter category, so I grabbed my graphics tablet and opened Inkscape.&lt;/p&gt;
    &lt;p&gt;I wrote out my first three letters: capital A, B and C. Saved them in Inkscape, and attempted to import them into FontForge. Then I remembered one crucial thing that had slipped my mind: I absolutely loathe using FontForge. Itâs a bit like when you open an old version of GIMP and get a bunch of weird looking windows floating all over the place; it feels like youâre fighting against the tool to do even the most basic operations. The difference is I have cause to edit images a lot more than I edit fonts, and GIMP has actually significantly improved their UI over the years.&lt;/p&gt;
    &lt;p&gt;Here are the rough steps I went through with FontForge:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Launch Font Forge. It shows a weird bit of art in one window, and an open file dialog in another.&lt;/item&gt;
      &lt;item&gt;I donât want to open a file, so I close that dialog. The program exits.&lt;/item&gt;
      &lt;item&gt;Relaunch Font Forge, and realise that within the âOpen Fontâ dialog is a âNewâ button. Click it.&lt;/item&gt;
      &lt;item&gt;Get to the standard font-editing UI. Right-click on the âAâ looking for a way to import an SVG. Donât see one.&lt;/item&gt;
      &lt;item&gt;Click around a bit, exploring the menus. Everything feels a bit off. You canât open one menu then hover over the next to see its content, like basically every UI toolkit in existence. I think FontForge has eschewed QT and GTK in favour of doing things itself.&lt;/item&gt;
      &lt;item&gt;Find the âImportâ option in the File menu. Hope itâs for a single glyph not the whole font.&lt;/item&gt;
      &lt;item&gt;A file picker opens. Again itâs all a bit off from normal desktop conventions. Try to resize it, and just get blank gray space at the bottom.&lt;/item&gt;
      &lt;item&gt;Type the absolute path I want to go to in the text field.&lt;/item&gt;
      &lt;item&gt;Get a dialog saying âNot a bdf file /home/chris/etcâ. Press OK.&lt;/item&gt;
      &lt;item&gt;Get a dialog saying âCould not find a bitmap font inâ. Press OK.&lt;/item&gt;
      &lt;item&gt;Press Ctrl+L to see if that lets me enter a path. Click everything in the dialog to try to find a way to enter a path. Get annoyed. Give up. Click through folder-by-folder to get to where I want to be.&lt;/item&gt;
      &lt;item&gt;Get to the folder and donât see any files. Change the format to âSVGâ. Double-click the newly-visible SVG file.&lt;/item&gt;
      &lt;item&gt;Get a dialog saying âYou must select a glyph before you can import an image into itâ. Press OK.&lt;/item&gt;
      &lt;item&gt;The import dialog goes away, having not imported.&lt;/item&gt;
      &lt;item&gt;Select the glyph in the main tool area, then repeat the FileâImport dance.&lt;/item&gt;
      &lt;item&gt;Itâs actually there now! Open the glyph in the editor and see itâs a complete mess of BÃ©zier curves. I canât click what I want without accidentally moving a handle for an adjacent curve.&lt;/item&gt;
      &lt;item&gt;Rage-quit.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Iâm sure FontForge is less anger inducing once youâre used to it. And you definitely could use it to build a font like this if you had much more patience than me. Iâd had enough of death-by-a-thousand-paper-cuts though.&lt;/p&gt;
    &lt;p&gt;I briefly tried Inkscapeâs built-in support for making an SVG font. It annoyed me a lot less, but itâs fiddly: it seemed like each font had to be a single path, so you had to convert the glyphs to paths, then merge them correctly. If you merge them incorrectly then the wrong bits of your letters end up filled (like the inside of the âBâ). Path manipulation is getting towards the limit of my knowledge of vector editing, and it took a bit of trial and error for each letter that had more than a single stroke. I didnât fancy doing that for every letter.&lt;/p&gt;
    &lt;p&gt;Iâm usually a big advocate of open source, but this was one of those painful times where it feels like it just falls short. Clunky, painful UI and processes where commercial tools just let you get on with your work.&lt;/p&gt;
    &lt;head rend="h3"&gt;You can exchange money for goods and services&lt;/head&gt;
    &lt;p&gt;When Iâd been looking for open source tutorials, I found many mentions of a closed source, hosted tool: Calligraphr. It has a free version with limitations (no ligatures, no variations, 75 glyphs per font), and a pro version for Â£8/month. Iâd normally balk at the idea of a subscription for this, but they have the perfect answer: you can make a one-time payment, and your account automatically downgrades back to free after a month. Itâs not a hidden option, either, itâs the most prominent button on the upgrade page. That made me happy to give them Â£8 to play around with the service for a month.&lt;/p&gt;
    &lt;p&gt;Calligraphr works by having you print templates, write out the letters, then scan them in. It does some magical processing to extract the glyphs, provides tools to tidy them up, align them, etc, and then produces a TTF file for you. You can see some of my completed templates here:&lt;/p&gt;
    &lt;p&gt;Calligraphr has a nice UI to generate the templates, allowing you to select which glyphs to include. I added the âminimal Englishâ, âbasic punctuationâ and âLigaturesâ sets. That gave me four pages to fill out, and I did them all twice. That let me filter out versions that didnât work well, and have variants for some letters so the font wasnât too repetitive. Later on, I went back and added some custom ligatures based on blog post titles that didnât look quite right: âReâ, âToâ, âersâ, âeyâ, âhyâ, âraâ, âreâ and âtyâ. Ligatures like this help it look more natural: when we write we donât just stamp out identical letters regardless of their surroundings, instead they will connect to their neighbours, or overlap slightly, or even share a stroke.&lt;/p&gt;
    &lt;p&gt;I filled these templates in with a Sharpie, as I wanted a fairly informal, scrap-booky look, and it would also give good solid shapes that should be easy to pick out of the template. I scanned them with the âScan Documentâ function on my iPhone, and uploaded the PDFs to Calligraphr.&lt;/p&gt;
    &lt;head rend="h3"&gt;Iterating and tweaking&lt;/head&gt;
    &lt;p&gt;The Calligraphr UI allows you to preview the font, but I found it a lot more useful to just download a copy and use it on a local copy of my website. That let me test it with real text, and see how itâd look at the different font sizes I use on the site.&lt;/p&gt;
    &lt;p&gt;The first version was not great. Despite the guidelines on the template, I apparently wasnât good at sticking to them. Some letters were floating way off the baseline, and some were sunken below. When those opposites met it looked terrible. Fortunately Calligraphr has a pretty easy tool to slide each letter up and down, and scale it up or down if needed, and you can see it next to other letters as you do it. It took a little bit of time to go through all the variants of all the letters, but the next version looked a lot better.&lt;/p&gt;
    &lt;p&gt;Another tweak I ended up doing was reducing the spacing between letters. The defaults Calligraphr uses are probably good for a blocky font, but I wanted to put the letters close together to give it more of a joined-up look. Again, this is an easy tool to use, you just drag the sides in or out as desired. While these tweaking steps were probably as fiddly as some of the Inkscape steps I refused to do earlier, theyâre a lot more rewarding as you see things improving with each one. Itâs a lot easier for me to commit time and effort to improving something thatâs already working reasonably, than put that time and energy into an unknown.&lt;/p&gt;
    &lt;p&gt;Later, I noticed that occasionally there would be a huge gap in a title. Not âthe kerning is slightly offâ but âthereâs enough room to park a busâ. It took me a while to figure out what was happening: a couple of glyphs hadnât been isolated perfectly and had picked up a few pixels from the template lines at the edge of their boxes. That meant the glyph had a width that covered the actual written glyph, a big gap, and then the rogue marks. At first, I fixed this by just adjusting the width, but that left the little pixels floating awkwardly down-sentence. The proper fix was to use the editing tool and simply delete them, and then Calligraphr snapped the width back to what it should be.&lt;/p&gt;
    &lt;p&gt;These iterations took a while to do, but I just dipped in and out occasionally over the course of a week, so it didnât actually feel like too much work. I quite enjoy the process of refining things, too.&lt;/p&gt;
    &lt;head rend="h3"&gt;Result and a surprise&lt;/head&gt;
    &lt;p&gt;If youâre viewing this post on my website[1], you can see the font in the headers, captions, and a few other places. Hereâs how it compares to my actual handwriting:&lt;/p&gt;
    &lt;p&gt;Itâs not close enough to forge documents, but I think it definitely gets across my style, and thatâs exactly what I wanted. Itâs surprisingly legible even at smaller font sizes â I think the weight of the Sharpie helps here â and at Â£8 and a bit of manual work was a lot more economical than spending days wresting with open source tools.&lt;/p&gt;
    &lt;p&gt;A few weeks after I put the finishing touches on the font, I got an e-mail from Calligraphr. As my account had lapsed back to the free version, I was no longer eligible for the âserver-side backupâ feature. So what did they do? They e-mailed me an exported copy! Itâs a JSON file with the properties of each glyph and a base64 encoded image. Not only can I re-upload this to Calligraphr if I resubscribe, I can probably hook something up to edit it should I ever need to. Iâm blown away by how pro-user Calligraphrâs business practices are. Theyâre up-front about pricing, donât try and get you stuck on an auto-renewing subscription, and automatically export your data. Itâs like a breath of fresh air compared to the barrage of dark patterns that other websites foist on us. If you want to make this kind of font, Iâd definitely recommend them just because of how nice they are.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;And I havenât changed everything since writing this postâ¦ â©ï¸&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Thanks for reading!&lt;/head&gt;
    &lt;head rend="h3"&gt;Related posts&lt;/head&gt;
    &lt;head rend="h3"&gt;Escaping Spotify the hard way&lt;/head&gt;
    &lt;p&gt;For the longest time I used Spotify for all my music needs. And I listen to a lot of music: sometimes actively, but mostly passively as background noise. I cancelled my premium subscription last December, and stopped using the service entirely. Why? Thereâs a bunch of reasons.&lt;/p&gt;
    &lt;head rend="h3"&gt;How I use Tailscale&lt;/head&gt;
    &lt;p&gt;Iâve been using Tailscale for around four years to connect my disparate devices, servers and apps together. I wanted to talk a bit about how I use it, some cool features you might not know about, and some stumbling blocks I encountered.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Ethics of LLMs&lt;/head&gt;
    &lt;p&gt;Iâve written about LLMs a few times recently, carefully dodging the issue of ethics each time. I didnât want to bog down the other posts with it, and I wanted some time to think over the issues. Now Iâve had time to think, itâs time to remove my head from the sand. There are a lot of different angles to consider, and a lot of it is more nuanced than is often presented. Itâs not all doom and gloom, and itâs also not the most amazing thing since sliced bread. Who would have thought?&lt;/p&gt;
    &lt;head rend="h3"&gt;If all you have is a hammerâ¦&lt;/head&gt;
    &lt;p&gt;I presume everyone is familiar with the idiom âif all you have is a hammer, everything looks like a nailâ. If not, well, there it is. Itâs generally used pejoratively about being single-minded, but I think it also gives a glimpse into something more interesting: mental and perceptual sets.&lt;/p&gt;
    &lt;p&gt;Recently Iâve been on a small campaign to try to make my personal website moreâ¦ personal. Little ways to make it obvious itâs mine and personal, not just another piece of the boring corporate dystopia that is most of the web these days. I donât quite want to fully regress to the Geocities era and fill the screen with animated under construction GIFs, but I do want to capture some of that vibe.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45141636</guid></item><item><title>My Own DNS Server at Home – Part 1: IPv4</title><link>https://jan.wildeboer.net/2025/08/My-DNS-Part-1/</link><description>&lt;doc fingerprint="67234351e5b0b027"&gt;
  &lt;main&gt;
    &lt;p&gt;Posted:&lt;/p&gt;
    &lt;head rend="h1"&gt;My Own DNS Server At Home - Part 1: IPv4&lt;/head&gt;
    &lt;p&gt;âItâs always DNSâ is a famous meme among network people. Name resolution is technically quite simple. Itâs âjustâ translating a hostname like &lt;code&gt;jan.wildeboer.net&lt;/code&gt; to an IP address. What could possibly go wrong? I am a radical optimist and detail-obsessed knowledge collector, so I decided to find out. As part of my goal to make my home network a little island of Digital Sovereignty, meaning that everything at home should JustWorkâ¢, even with no working internet connection, a DNS server is needed.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Based on and extended from my gist Bind on Fedora 42 as DNS server.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;I admit, I have a lot of experience with DNS and BIND. But I still consider myself to be merely on the GoodEnoughâ¢ side of things. I know how to get DNS configured for my domains. And I want you to feel fearless too. The best place to fail with DNS is the network at home. It limits the impact :)&lt;/p&gt;
    &lt;p&gt;So read this blog post either as report or as a HOWTO. Both ways can be fun!&lt;/p&gt;
    &lt;p&gt;In my homelab I have a Raspberry Pi 4 that runs infrastructure services. DNS is one of them, my private CA (Certificate Authority) another. The CA runs as a container on Podman. For DNS I use Bind. It thus has to serve 3 networks:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;192.168.1.0/24&lt;/code&gt;My home IPv4 network&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;172.16.0.0/16&lt;/code&gt;IPv4 Network on the second ethernet ports of my homelab servers&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;10.88.0.0/16&lt;/code&gt;The (virtual) podman network&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;It uses my Fritz box (7490) as forwarder, so I can resolve all hosts, including the DHCP entries that the Fritz Box hands out under its default local domain name &lt;code&gt;fritz.box&lt;/code&gt;. For my homelab however, I use the &lt;code&gt;homelab.jhw&lt;/code&gt; domain name. Thatâs what the Bind DNS server has to take care of.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;WARNING&lt;/p&gt;&lt;lb/&gt;I really should use the official&lt;code&gt;.internal&lt;/code&gt;TLD (Top Level Domain) for my homelab network, but I decided against it. This introduces the risk of name resolution problems, should someone offer a public&lt;code&gt;.jhw&lt;/code&gt;TLD in future. Itâs a risk I am willing to accept in exchange for using a 3 letter TLD at home. Donât be like me! Use&lt;code&gt;.internal&lt;/code&gt;instead. With that out of the way, letâs continue.&lt;/quote&gt;
    &lt;head rend="h2"&gt;What we (well, I) have&lt;/head&gt;
    &lt;p&gt;Letâs gather what I have in my home network.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;inf01.homelab.jhw&lt;/code&gt;at&lt;code&gt;192.168.1.10&lt;/code&gt;: A Raspberry Pi 4 4GB, running Fedora 42 and podman with my Certificate Authority as a container that should be reachable as&lt;code&gt;ca.homelab.jhw&lt;/code&gt;. See Be the LetsEncrypt in your homelab with step-ca for more details.&lt;/item&gt;
      &lt;item&gt;3 ThinkCentre Tiny PCs in the &lt;code&gt;homelab.jhw&lt;/code&gt;zone, called hl01 (&lt;code&gt;192.168.1.11&lt;/code&gt;), hl02 (&lt;code&gt;192.168.1.12&lt;/code&gt;) and hl03 (&lt;code&gt;192.168.1.13&lt;/code&gt;), running RHEL10 (Red Hat Enterprise Linux)&lt;/item&gt;
      &lt;item&gt;A Fritz Box 7490 at &lt;code&gt;192.168.1.254&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Letâs install BIND on inf01&lt;/head&gt;
    &lt;p&gt;We need to do two things. Install BIND and some utilities on &lt;code&gt;inf01&lt;/code&gt; and open the firewall for DNS traffic.&lt;/p&gt;
    &lt;code&gt;dnf install bind bind-utils
firewall-cmd --add-service=dns --permanent
&lt;/code&gt;
    &lt;p&gt;That was easy enough :)&lt;/p&gt;
    &lt;head rend="h3"&gt;Configure BIND&lt;/head&gt;
    &lt;p&gt;To run BIND in the correct way, we need to work on 4 configuration files.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;/etc/named.conf&lt;/code&gt;The main configuration file where we tell BIND on which networks it should listen and what zones it will serve.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;/var/named/forward.homelab.jhw&lt;/code&gt;The forward zone file that maps hostnames in the&lt;code&gt;homelab.jhw&lt;/code&gt;domain to IP addresses on my home network&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;/var/named/reverse.homelab.jhw&lt;/code&gt;The reverse zone for the&lt;code&gt;192.168.1.0/24&lt;/code&gt;network range, that looks a bit confusing, that does the opposite. It maps IP addresses to hostnames.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;/var/named/reverse2.homelab.jhw&lt;/code&gt;The second reverse zone for the&lt;code&gt;172.16.0.0/16&lt;/code&gt;network range.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Letâs start with &lt;code&gt;/etc/named.conf&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;//
// named.conf
//

options {
  listen-on port 53 { 127.0.0.1; 192.168.1.10; 172.16.1.10; 10.88.0.1; };
  listen-on-v6 port 53 { ::1; fdda:a4da:69a5:0:2783:8c26:b2f1:a6f7; };
  allow-query     { localhost; 192.168.1.0/24; 172.16.0.0/16; 10.88.0.0/16; };

  directory       "/var/named";

  dump-file       "/var/named/data/cache_dump.db";
  statistics-file "/var/named/data/named_stats.txt";
  memstatistics-file "/var/named/data/named_mem_stats.txt";
  secroots-file   "/var/named/data/named.secroots";
  recursing-file  "/var/named/data/named.recursing";

  forwarders { 192.168.1.254; };
  recursion yes;

  dnssec-validation no;

  managed-keys-directory "/var/named/dynamic";
  geoip-directory "/usr/share/GeoIP";

  pid-file "/run/named/named.pid";
  session-keyfile "/run/named/session.key";

  /* https://fedoraproject.org/wiki/Changes/CryptoPolicy */
  include "/etc/crypto-policies/back-ends/bind.config";
};

logging {
        channel default_debug {
                file "data/named.run";
                severity dynamic;
        };
};

zone "." IN {
	type hint;
	file "named.ca";
};

zone "homelab.jhw" IN {
	type master;
	file "forward.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};

zone "1.168.192.in-addr.arpa" IN {
	type master;
	file "reverse.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};

zone "16.172.in-addr.arpa" IN {
        type master;
        file "reverse2.homelab.jhw";
        allow-update { none; };
        allow-query { any; };
};

include "/etc/named.rfc1912.zones";
include "/etc/named.root.key";
&lt;/code&gt;
    &lt;p&gt;The first block declare the general options. Yes, it looks complicated and it is, but letâs walk you through every relevant line (the lines not mentioned are default entries that donât need to be changed).&lt;/p&gt;
    &lt;code&gt;listen-on port 53 { 127.0.0.1; 192.168.1.10; 172.16.1.10; 10.88.0.1; };
listen-on-v6 port 53 { ::1; fdda:a4da:69a5:0:2783:8c26:b2f1:a6f7; };
allow-query     { localhost; 192.168.1.0/24; 172.16.0.0/16; 10.88.0.0/16; };
&lt;/code&gt;
    &lt;p&gt;Here we tell BIND that it should listen for queries on port 53 on &lt;code&gt;localhost&lt;/code&gt;, &lt;code&gt;192.168.1.10&lt;/code&gt;, the IPv4 address in my hoem network, &lt;code&gt;172.16.1.10&lt;/code&gt;, the second IPv4 address configured and &lt;code&gt;10.88.0.1&lt;/code&gt;, the virtual IPv4 address the Raspberry uses to bridge to the local podman containers.&lt;/p&gt;
    &lt;p&gt;The second line does the same for IPv6, but that is something we will discuss in Part 2.&lt;/p&gt;
    &lt;p&gt;The third line tells BIND from whom to accept queries. Essentially from everyone on the three IPv4 networks we are listening to.&lt;/p&gt;
    &lt;code&gt;directory       "/var/named";
&lt;/code&gt;
    &lt;p&gt;This is the directory where BIND will look for its zone files, that we will define later.&lt;/p&gt;
    &lt;code&gt;forwarders { 192.168.1.254; };
recursion yes;
&lt;/code&gt;
    &lt;p&gt;Now what if someone asks for a hostname that is outside of &lt;code&gt;homelab.jhw&lt;/code&gt;? In that case we tell BIND to forward that question to &lt;code&gt;192.168.1.254&lt;/code&gt;, our Fritz Box. We will allow recursion and cache results we get from our Fritz box to avoid unneeded traffic.&lt;/p&gt;
    &lt;code&gt;dnssec-validation no;
&lt;/code&gt;
    &lt;p&gt;Our simple setup will not bother with DNSSEC at the moment. Maybe we will have a Part 3 for that.&lt;/p&gt;
    &lt;p&gt;OK. That was the options part. We will ignore the &lt;code&gt;logging&lt;/code&gt; part and the &lt;code&gt;zone "." IN&lt;/code&gt; block.&lt;/p&gt;
    &lt;p&gt;Next (and finally) we define three zone entries (and zone files). A forward zone called &lt;code&gt;homelab.jhw&lt;/code&gt; for our domain and two reverse zones for the IP addresses in the &lt;code&gt;192.168.1.0/24&lt;/code&gt; range called &lt;code&gt;1.168.192.in-addr.arpa&lt;/code&gt;. Yep. Thatâs 192.168.1 reversed. 1.168.192. Thatâs why itâs called the reverse zone ;) We also have &lt;code&gt;16.172.in-addr.arpa&lt;/code&gt; for the &lt;code&gt;172.16.0.0/16&lt;/code&gt; range. Letâs look at them.&lt;/p&gt;
    &lt;code&gt;zone "homelab.jhw" IN {
	type master;
	file "forward.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};
&lt;/code&gt;
    &lt;p&gt;Itâs a zone, all right. Itâs the &lt;code&gt;master&lt;/code&gt; for this zone, meaning that this DNS server will be the Source of Truth to  answer all queries for the &lt;code&gt;homelab.jhw&lt;/code&gt; hostnames.&lt;/p&gt;
    &lt;p&gt;The exact mapping of all hostnames to IP addresses is in a file called &lt;code&gt;forward.homelab.jhw&lt;/code&gt; in the directory &lt;code&gt;/var/named&lt;/code&gt;. Remember how we defined that path at the beginning in the &lt;code&gt;options&lt;/code&gt; part? Great! We also tell BIND that we do not allow dynamic updates for this zone, meaning that whatâs in the file is all we will look at. Finally we tell BIND that any machine in the network is allowed to ask for a reply.&lt;/p&gt;
    &lt;code&gt;zone "1.168.192.in-addr.arpa" IN {
	type master;
	file "reverse.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};

zone "16.172.in-addr.arpa" IN {
        type master;
        file "reverse2.homelab.jhw";
        allow-update { none; };
        allow-query { any; };
};
&lt;/code&gt;
    &lt;p&gt;The reverse zones with the weird looking zone names are almost the same, except that we define these in two files called &lt;code&gt;reverse.homelab.jhw&lt;/code&gt; for the reverse lookup of the &lt;code&gt;192.168.1.0/24&lt;/code&gt; range and &lt;code&gt;reverse2.homelab.jhw&lt;/code&gt; for the &lt;code&gt;172.16.0.0/16&lt;/code&gt; range. Why these zones have weird names will be explained later.&lt;/p&gt;
    &lt;p&gt;So now we go to the zone files!&lt;/p&gt;
    &lt;head rend="h3"&gt;Forward zone for homelab.jhw&lt;/head&gt;
    &lt;p&gt;The forward zone resolves names to IP addresses using A records (and other types like TXT, CAA and many more exist, but we wonât cover that in this post). It also contains CNAME entries, if you have services on one machine that should be reachable via more than one hostnames. In my homelab the CA (Certificate Authority) server is a container that runs on &lt;code&gt;inf01.homelab.jhw&lt;/code&gt;, but should be reachable as &lt;code&gt;ca.homelab.jhw&lt;/code&gt; in the home network. The CNAME entry does exactly that. It tells clients that when they want to talk to &lt;code&gt;ca.homelab.jhw&lt;/code&gt; they can. By actually talking to &lt;code&gt;inf01.homelab.jhw&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Now here is the big, important lessen for zone files. They have a serial number. Which MUST be incremented with every change. If you donât, weird things WILL happen. So:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;NEVER FORGET TO INCREASE THE SERIAL WITH EVERY CHANGE TO A ZONE FILE. OR RISK DNS HELL.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;
      &lt;code&gt;/var/named/forward.homelab.jhw&lt;/code&gt;
    &lt;/p&gt;
    &lt;code&gt;$TTL 3600
@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082706  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
@       IN  NS          inf01.homelab.jhw.
@       IN  A           192.168.1.10

inf01           IN  A     192.168.1.10
hl01            IN  A     192.168.1.11
hl02            IN  A     192.168.1.12
hl03            IN  A     192.168.1.13

ca              IN  CNAME inf01.homelab.jhw.

inf01-m         IN  A     172.16.1.10
hl01-m          IN  A     172.16.1.11
hl02-m          IN  A     172.16.1.12
hl03-m          IN  A     172.16.1.13
&lt;/code&gt;
    &lt;p&gt;Again, letâs go through this.&lt;/p&gt;
    &lt;code&gt;$TTL 3600
&lt;/code&gt;
    &lt;p&gt;The default Time To Live (TTL) for DNS entries is set at 3600 seconds. Thatâs 1 hour. This means that when a machine in the network gets a DNS reply, it will not ask again for the same thing until the TTL has passed.&lt;/p&gt;
    &lt;code&gt;@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082706  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
&lt;/code&gt;
    &lt;p&gt;The Start Of Authority (SOA) block. Here we say which DNS server is the owner of this domain. Itâs &lt;code&gt;inf01.homelab.jhw.&lt;/code&gt; (yes, that dot at the end is REALLY important). The &lt;code&gt;root.homelab.jhw&lt;/code&gt; actually means &lt;code&gt;root@homelab.jhw&lt;/code&gt; and is the email address responsible for this domain. Donât think to much about why and what :)&lt;/p&gt;
    &lt;code&gt;@       IN  NS          inf01.homelab.jhw.
@       IN  A           192.168.1.10
&lt;/code&gt;
    &lt;p&gt;The first ârealâ DNS entries! They are special, as the &lt;code&gt;@&lt;/code&gt; indicates, which means they represent the domain itself. We first define the nameserver (again? yes, don*ât ask) as NS record. And right after that we define the &lt;code&gt;A&lt;/code&gt; record as the IP address &lt;code&gt;192.168.1.10&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Did you notice that &lt;code&gt;.&lt;/code&gt; at the end of &lt;code&gt;inf01.homelab.jhw.&lt;/code&gt;? Thatâs another VERY important thing. The TL;DR is that this final &lt;code&gt;.&lt;/code&gt; tells DNS to stop doing fancy recursion and lookups. Just look for the hostname `inf01.homelab.jhw. Period. (pun intended). Donât care too much about this. Just remember:&lt;/p&gt;
    &lt;p&gt;EVERY HOSTNAME RECORD ENDS WITH A &lt;code&gt;.&lt;/code&gt; YOU WILL FORGET THIS. YOU WILL FIX THIS.&lt;/p&gt;
    &lt;code&gt;inf01           IN  A     192.168.1.10
hl01            IN  A     192.168.1.11
hl02            IN  A     192.168.1.12
hl03            IN  A     192.168.1.13
&lt;/code&gt;
    &lt;p&gt;Here come the &lt;code&gt;A&lt;/code&gt; records for &lt;code&gt;192.168.1.0/24&lt;/code&gt;! We finally get to map hostnames to IP addresses. For real! It now is quite self-explanatory, isnât it? The hostname gets an A record that is the IP address in my local network. And as these are IP addresses, no &lt;code&gt;.&lt;/code&gt; is needed at the end.&lt;/p&gt;
    &lt;code&gt;ca              IN  CNAME inf01.homelab.jhw.
&lt;/code&gt;
    &lt;p&gt;And here is the CNAME record. Which maps the hostname &lt;code&gt;ca.homelab.jhw&lt;/code&gt; to the Canonical NAME (CNAME) &lt;code&gt;inf01.homelab.jhw.&lt;/code&gt;. This is a hostname at the end! So it needs the &lt;code&gt;.&lt;/code&gt; Period :)&lt;/p&gt;
    &lt;code&gt;inf01-m         IN  A     172.16.1.10
hl01-m          IN  A     172.16.1.11
hl02-m          IN  A     172.16.1.12
hl03-m          IN  A     172.16.1.13
&lt;/code&gt;
    &lt;p&gt;And here we create another set of &lt;code&gt;A&lt;/code&gt; records for the same machines, but this time in the &lt;code&gt;172.16.0.0/16&lt;/code&gt; range. This range is used for management stuff, hence the &lt;code&gt;-m&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;And thatâs the gist of it. If you add a new machine to your network, configure it with an IP address (statically or with DHCP) and add it as an A record to the forward zone. Increment the serial and tell DNS to read the updated zone with &lt;code&gt;systemctl reload named&lt;/code&gt;. Done.&lt;/p&gt;
    &lt;head rend="h3"&gt;Reverse zones for 192.168.1.0/24 and 172.16.0.0/16&lt;/head&gt;
    &lt;p&gt;The reverse zone maps IP addresses to hostnames. Often called the PTR or pointer record. You have to make sure that the entries here are synced to the forward zone.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;NEVER FORGET TO INCREASE THE SERIAL WITH EVERY CHANGE TO A ZONE FILE. Or risk DNS hell.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Here is the reverse zone for the &lt;code&gt;192.168.1.0/24&lt;/code&gt; range.&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;/var/named/reverse.homelab.jhw&lt;/code&gt;
    &lt;/p&gt;
    &lt;code&gt;$TTL 3600
@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082601  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
@       IN  NS          inf01.homelab.jhw.
@       IN  PTR         homelab.jhw.
10      IN  PTR         inf01.homelab.jhw.
11      IN  PTR         hl01.homelab.jhw.
12      IN  PTR         hl02.homelab.jhw.
13      IN  PTR         hl03.homelab.jhw.
&lt;/code&gt;
    &lt;p&gt;As this is more or less the same but the other way round, I will not go through everything but instead explain the differences. Itâs the reverse zone, so now we have &lt;code&gt;PTR&lt;/code&gt; (pointer) entries that map an IPv4 address in the &lt;code&gt;192.168.1.0/24&lt;/code&gt; range to hostnames. WITH A DOT AT THE END. DO NOT FORGET THE DOT!&lt;/p&gt;
    &lt;p&gt;As this is a /24 block, we only need to set the last digit of the IPv4 address.&lt;/p&gt;
    &lt;p&gt;You might wonder, where is &lt;code&gt;ca&lt;/code&gt; here? Well, itâs CNAME is &lt;code&gt;info1.homelab.jhw&lt;/code&gt; and that already is in this reverse zone. That is good enough. No separate entry needed.&lt;/p&gt;
    &lt;p&gt;We also need the reverse zone for the &lt;code&gt;172.16.0.0/16&lt;/code&gt; range:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;/var/named/reverse2.homelab.jhw&lt;/code&gt;
    &lt;/p&gt;
    &lt;code&gt;$TTL 3600
@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082901  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
@       IN  NS          inf01.homelab.jhw.
@       IN  PTR         homelab.jhw.
10.1      IN  PTR         inf01-m.homelab.jhw.
11.1      IN  PTR         hl01-m.homelab.jhw.
12.1      IN  PTR         hl02-m.homelab.jhw.
13.1      IN  PTR         hl03-m.homelab.jhw.
&lt;/code&gt;
    &lt;p&gt;Looks deceivingly similar. But there is a big difference. This is a /16 network, so we have to define the last two parts of the IPv4 address. And as it is a reverse zone file, yep, we have to reverse it. So now we need &lt;code&gt;10.1&lt;/code&gt; to define the entry for &lt;code&gt;172.16.1.10&lt;/code&gt;, which is the hostname &lt;code&gt;inf01-m.homelab.jhw&lt;/code&gt;. WITH THE DOT AT THE END. AND DID YOU UPDATE THE SERIAL? :)&lt;/p&gt;
    &lt;p&gt;Phew. Thatâs the config done!&lt;/p&gt;
    &lt;p&gt;A final check with the &lt;code&gt;named-checkconf&lt;/code&gt; command, which should say nothing when all files are OK. If not, it will tell you what is wrong so you get the chance to fix stuff. You did add all the &lt;code&gt;.&lt;/code&gt; at the end of hostnames and you did update the serial of that zone file after you made changes, yes?&lt;/p&gt;
    &lt;head rend="h2"&gt;Start Bind&lt;/head&gt;
    &lt;p&gt;The only thing remaining is to start BIND. And persist it as a service, so it starts after every boot. Itâs DNS. It must always be available.&lt;/p&gt;
    &lt;code&gt;systemctl enable named
systemctl start named
&lt;/code&gt;
    &lt;p&gt;You most likely will make typos in your config. So do check with &lt;code&gt;named-checkconf &lt;/code&gt; and &lt;code&gt;systemctl status named&lt;/code&gt; and &lt;code&gt;journalctl -u named&lt;/code&gt;. If something breaks, read this whole entry again. Find that missing &lt;code&gt;.&lt;/code&gt; in a zone file. Increment the &lt;code&gt;serial&lt;/code&gt; that you forgot to do. You will get there. Donât give up!&lt;/p&gt;
    &lt;head rend="h2"&gt;Result&lt;/head&gt;
    &lt;p&gt;Machines, containers etc can now be resolved in my home network. All with mow own DNS! Yay!&lt;/p&gt;
    &lt;code&gt;% nslookup jhwfritz.fritz.box
Server:		192.168.1.10
Address:	192.168.1.10#53

Non-authoritative answer:
Name:	jhwfritz.fritz.box
Address: 192.168.1.254

% nslookup ca.homelab.jhw    
Server:		192.168.1.10
Address:	192.168.1.10#53

ca.homelab.jhw	canonical name = inf01.homelab.jhw.
Name:	inf01.homelab.jhw
Address: 192.168.1.10
&lt;/code&gt;
    &lt;p&gt;And now you should be able to &lt;code&gt;ping&lt;/code&gt; the machines with their hostname. ssh into them. Get certificates with the CA that runs in the podman container. Life is good!&lt;/p&gt;
    &lt;p&gt;I hope you enjoyed this post and could learn something new! Feel free to comment or send corrections vie the Toot linked below that collects the comments!&lt;/p&gt;
    &lt;head rend="h4"&gt;COMMENTS&lt;/head&gt;
    &lt;p&gt;You can use your Mastodon or other ActivityPub account to comment on this article by replying to the associated post.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45142397</guid></item><item><title>Anthropic agrees to pay $1.5B to settle lawsuit with book authors</title><link>https://www.nytimes.com/2025/09/05/technology/anthropic-settlement-copyright-ai.html?unlocked_article_code=1.jk8.bTTt.Zir9wmtPaTp2&amp;smid=url-share</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45142885</guid></item><item><title>The Universe Within 12.5 Light Years</title><link>http://www.atlasoftheuniverse.com/12lys.html</link><description>&lt;doc fingerprint="b21697bf7e9b7625"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;The Universe within 12.5 Light Years&lt;lb/&gt;The Nearest Stars&lt;/head&gt;&lt;div&gt;&lt;table&gt;&lt;row&gt;&lt;cell&gt; Number of stars within 12.5 light years = 33&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;/div&gt;&lt;head rend="h3"&gt;About the Map&lt;/head&gt; This map shows all the star systems that lie within 12.5 light years of our Sun. Most of the stars are red dwarfs - stars with a tenth of the Sun's mass and less than one hundredth the luminosity. Roughly eighty percent of all the stars in the universe are red dwarfs, and the nearest star - Proxima - is a typical example. &lt;div&gt;&lt;table&gt;&lt;row&gt;&lt;cell colspan="2" role="head"&gt;Additional Maps&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt; This is a diagram that zooms out from the Earth's orbit to the nearest star system. It tries to show just how large the distance to the nearest star really is.&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt; Here is a map of all the known stars that lie within 20 light years plotted using the data provided below.&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;table&gt;&lt;row&gt;&lt;cell colspan="2" role="head"&gt;Data and Catalogs&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt; There are over 100 stars within 20 light years. This is a list of the known stars that lie within this distance.&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt; This is a page showing some simple animations of double, triple and quadruple star systems, to demonstrate how stars orbit each other.&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;/div&gt;&lt;head rend="h3"&gt;Information on the Nearest Stars&lt;/head&gt;&lt;list rend="dl"&gt;&lt;item rend="dt-1"&gt;Sun - Type=G2, Magnitude=-26.8, Distance=0.0000158 ly&lt;/item&gt;&lt;item rend="dd-1"&gt;A typical yellow dwarf star. It has eight planets orbiting it.&lt;/item&gt;&lt;item rend="dt-2"&gt;Proxima Centauri - Type=M5, Magnitude=11.0, Distance=4.22 ly&lt;/item&gt;&lt;item rend="dd-2"&gt;This dim red dwarf is the nearest star to the Sun, and it is a member of the Alpha Centauri system despite lying 0.24 light years from the main pair of stars, requiring over one million years to orbit them. Proxima was discovered in 1915 by Robert Innes and was at that time the least luminous star known. It is also a flare star - capable of brightening a magnitude or more in minutes.&lt;/item&gt;&lt;item rend="dt-3"&gt;Alpha Centauri A,B - Type=G2+K0, Magnitudes=0.0+1.4, Distance=4.39 ly&lt;/item&gt;&lt;item rend="dd-3"&gt;Just slightly further from us than Proxima, lie the orange and yellow dwarf stars that make up Alpha Centauri. Orbiting each other in an 80 year period, together they make up one of the brightest objects in southern hemisphere skies. Seen from Alpha Centauri, the third member of the system, Proxima, is a dim (magnitude 4.8) star.&lt;/item&gt;&lt;item rend="dt-4"&gt;Barnard's Star - Type=M5, Magnitude=9.6, Distance=5.94 ly&lt;/item&gt;&lt;item rend="dd-4"&gt;Famous for having the largest proper motion of any star, this dim red dwarf travels 0.29 degrees against the background sky in a century. Discovered by E Barnard in 1916, it was thought in the 1960's to have a couple of unseen planets orbiting it, but later observations disproved this. In another 8000 years Barnard's Star will become the closest star to us.&lt;/item&gt;&lt;item rend="dt-5"&gt;Wolf 359 - Type=M6, Magnitude=13.5, Distance=7.80 ly&lt;/item&gt;&lt;item rend="dd-5"&gt;An excessively dim red dwarf discovered by Max Wolf in 1918. For 25 years it was the least luminous star known.&lt;/item&gt;&lt;item rend="dt-6"&gt;Lalande 21185 - Type=M2, Magnitude=7.5, Distance=8.31 ly&lt;/item&gt;&lt;item rend="dd-6"&gt;Recorded in JJ Lalande's star catalogue compiled in the 1790's, this is one of the brightest red dwarfs in the sky, but it still needs binoculars to see it. G Gatewood reported in 1996 the possible indications of a couple of Jupiter sized planets orbiting it but this remains unconfirmed.&lt;/item&gt;&lt;item rend="dt-7"&gt;Sirius A,B - Type=A1+DA, Magnitudes=-1.4+8.4, Distance=8.60 ly&lt;/item&gt;&lt;item rend="dd-7"&gt;This brilliant white star is the brightest star in the night sky and the most luminous star within 25 light years. Its white dwarf companion was first seen in 1852, the first white dwarf ever seen. The orbital period is 50 years.&lt;/item&gt;&lt;item rend="dt-8"&gt;Luyten 726-8 A,B - Type=M5+M5, Magnitudes=12.4+13.3, Distance=8.73 ly&lt;/item&gt;&lt;item rend="dd-8"&gt;This is a dim binary system consisting of two red dwarfs. The system is perhaps more famously known as UV Ceti, the variable-star name of the second star in the system. It is a famous flare star and can visibly brighten by several magnitudes as it ejects flares from its surface similar to the ones seen on the surface of the Sun, but far more energetic. Both stars require about 200 years to orbit each other.&lt;/item&gt;&lt;item rend="dt-9"&gt;Ross 154 - Type=M4, Magnitude=10.4, Distance=9.69 ly&lt;/item&gt;&lt;item rend="dd-9"&gt;A dim red dwarf. It is one of a number of nearby stars catalogued by Frank Ross in the 1930's. It is also a known flare star.&lt;/item&gt;&lt;item rend="dt-10"&gt;Ross 248 - Type=M6, Magnitude=12.3, Distance=10.33 ly&lt;/item&gt;&lt;item rend="dd-10"&gt;Another dim red dwarf.&lt;/item&gt;&lt;item rend="dt-11"&gt;Epsilon Eridani - Type=K2, Magnitude=3.7, Distance=10.50 ly&lt;/item&gt;&lt;item rend="dd-11"&gt;An orange dwarf star. This star was searched for signs of intelligent life with the Green Bank radio telescope in 1960. The results, predictably, were negative. The IRAS satellite detected a lot of dust orbiting this star indicating a possible forming solar system, and even more recently, (Aug 2000), a Jupiter sized planet has been detected orbiting this star at a distance of 3.2 AU (480 million km).&lt;/item&gt;&lt;item rend="dt-12"&gt;Lacaille 9352 - Type=M2, Magnitude=7.4, Distance=10.73 ly&lt;/item&gt;&lt;item rend="dd-12"&gt;A fairly bright red dwarf which can easily be seen with binoculars, it was first recorded in Nicolas de Lacaille's catalogue of southern hemisphere stars compiled around 1752.&lt;/item&gt;&lt;item rend="dt-13"&gt;Ross 128 - Type=M4, Magnitude=11.1, Distance=10.89 ly&lt;/item&gt;&lt;item rend="dd-13"&gt;A dim red dwarf, also known as FI Vir - its variable star designation.&lt;/item&gt;&lt;item rend="dt-14"&gt;Luyten 789-6 A,B,C - Type=M5+M5+M7, Magnitudes=13.3+13.3+14.0, Distance=11.1 ly&lt;/item&gt;&lt;item rend="dd-14"&gt;There seems to be three red dwarfs in this system. The main pair orbiting each other in a 2 year period, and a dim third star orbiting the first at a very close range.&lt;/item&gt;&lt;item rend="dt-15"&gt;Procyon A,B - Type=F5+DA, Magnitudes=0.4+10.7, Distance=11.41 ly&lt;/item&gt;&lt;item rend="dd-15"&gt;A brilliant yellow-white star, and the eighth brightest star in the sky. With twice the diameter of the Sun, Procyon is also the largest star within 25 light years. Procyon is orbited by a white dwarf companion first seen optically in 1896. The orbital period is 41 years.&lt;/item&gt;&lt;item rend="dt-16"&gt;61 Cygni A,B - Type=K5+K7, Magnitudes=5.2+6.1, Distance=11.41 ly&lt;/item&gt;&lt;item rend="dd-16"&gt;This binary system of two orange dwarf stars is famous for being the first star ever to have its distance measured by F Bessel in 1838. Both stars are very similar but are widely separated (86 AU) requiring about 700 years to orbit each other.&lt;/item&gt;&lt;item rend="dt-17"&gt;Struve 2398 A,B - Type=M4+M5, Magnitudes=8.9+9.7, Distance=11.6 ly&lt;/item&gt;&lt;item rend="dd-17"&gt;A binary system of two red dwarfs named Struve 2398 from a catalogue of double stars published in 1827. This system is also known by the rather more boring name of BD+59°1915. The two stars are quite widely separated (50 AU) and orbit each other in a 450 year period.&lt;/item&gt;&lt;item rend="dt-18"&gt;Groombridge 34 A,B - Type=M2+M6, Magnitudes=8.1+11.1, Distance=11.64 ly&lt;/item&gt;&lt;item rend="dd-18"&gt;Another pair of red dwarfs, this system is usually called Groombridge 34 from an 1838 catalogue of northern stars or sometimes BD+43°44. Both stars are variable in brightness and have the variable star names of GX And and GQ And. Both stars lie far apart from each other (150 AU) and orbit each other in a 2500 year period.&lt;/item&gt;&lt;item rend="dt-19"&gt;Giclas 51-15 - Type=M6, Magnitude=14.8, Distance=11.8 ly&lt;/item&gt;&lt;item rend="dd-19"&gt;This excessively dim red dwarf is the least luminous star within 14 light years. It shines with just 0.01% of the Sun's luminosity.&lt;/item&gt;&lt;item rend="dt-20"&gt;Epsilon Indi A,B,C - Type=K5+T1+T6, Magnitude=4.7, Distance=11.83 ly&lt;/item&gt;&lt;item rend="dd-20"&gt;An orange dwarf. It is a similar star to Epsilon Eridani, although a little bit smaller and dimmer. Epsilon Indi is orbited by a pair of brown dwarfs - failed stars that are too small to burn. They were discovered in 2003 and they orbit each other in a 16 year period, and they are 1500 AU (220 billion km) from the main star and they require about 70 000 years to orbit it.&lt;/item&gt;&lt;item rend="dt-21"&gt;Tau Ceti - Type=G8, Magnitude=3.5, Distance=11.90 ly&lt;/item&gt;&lt;item rend="dd-21"&gt;The nearest, single, sun-like star. It was searched (unsuccessfully) for any signs of intelligent life in 1960, along with Epsilon Eridani.&lt;/item&gt;&lt;item rend="dt-22"&gt;Luyten 372-58 - Type=M5, Magnitude=13.0, Distance=12.1 ly&lt;/item&gt;&lt;item rend="dd-22"&gt;A very dim red dwarf. Although this star was catalogued decades ago, it has only recently had its distance determined with any accuracy.&lt;/item&gt;&lt;item rend="dt-23"&gt;Luyten 725-32 - Type=M5, Magnitude=12.1, Distance=12.1 ly&lt;/item&gt;&lt;item rend="dd-23"&gt;Another dim red dwarf.&lt;/item&gt;&lt;item rend="dt-24"&gt;Luyten's Star - Type=M3, Magnitude=9.8, Distance=12.39 ly&lt;/item&gt;&lt;item rend="dd-24"&gt;A red dwarf. It is named after Willem Luyten who realised it was a nearby star in 1935. The star lies just 1.2 light years away from Procyon, but it is not associated with it.&lt;/item&gt;&lt;/list&gt;&lt;p&gt; Epsilon Eridani is orbited by a large planet which might look like this. &lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45144337</guid></item><item><title>Tesla changes meaning of 'Full Self-Driving', gives up on promise of autonomy</title><link>https://electrek.co/2025/09/05/tesla-changes-meaning-full-self-driving-give-up-promise-autonomy/</link><description>&lt;doc fingerprint="adcd098cbd93d352"&gt;
  &lt;main&gt;
    &lt;p&gt;Tesla has changed the meaning of “Full Self-Driving”, also known as “FSD”, to give up on its original promise of delivering unsupervised autonomy.&lt;/p&gt;
    &lt;p&gt;Since 2016, Tesla has claimed that all its vehicles in production would be capable of achieving unsupervised self-driving capability.&lt;/p&gt;
    &lt;p&gt;CEO Elon Musk has claimed that it would happen by the end of every year since 2018.&lt;/p&gt;
    &lt;p&gt;Tesla has even sold a software package, known as “Full Self-Driving Capability” (FSD), for up to $15,000 to customers, promising that the advanced driver-assist system would become fully autonomous through over-the-air software updates.&lt;/p&gt;
    &lt;p&gt;Almost a decade later, the promise has yet to be fulfilled, and Tesla has already confirmed that all vehicles produced between 2016 and 2023 don’t have the proper hardware to deliver unsupervised self-driving as promised.&lt;/p&gt;
    &lt;p&gt;Musk has been discussing the upgrade of the computers in these vehicles to appease owners, but there’s no concrete plan to implement it.&lt;/p&gt;
    &lt;p&gt;While there’s no doubt that Tesla has promised unsupervised self-driving capabilities to FSD buyers between 2016 and 2023, the automaker has since updated its language and now only sells “Full Self-Driving (Supervised)” to customers:&lt;/p&gt;
    &lt;p&gt;The fine print mentions that it doesn’t make the vehicle “autonomous” and doesn’t promise it as a feature.&lt;/p&gt;
    &lt;p&gt;In other words, people buying FSD today are not really buying the capability of unsupervised self-driving as prior buyers did.&lt;/p&gt;
    &lt;p&gt;Furthermore, Tesla’s board has just submitted a new, unprecedented CEO compensation package for shareholders’ approval, which could give Musk up to $1 trillion in stock options pending the achievement of certain milestones.&lt;/p&gt;
    &lt;p&gt;One of these milestones is Tesla having “10 Million Active FSD Subscriptions.”&lt;/p&gt;
    &lt;p&gt;At first glance, this would be hopeful for FSD buyers since part of Musk’s compensation would be dependent on delivering on the FSD promises.&lt;/p&gt;
    &lt;p&gt;However, Tesla has changed the definition of FSD in the compensation package with an extremely vague one”&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“FSD” means an advanced driving system, regardless of the marketing name used, that is capable of performing transportation tasks that provide autonomous or similar functionality under specified driving conditions.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Tesla now considers FSD only an “advanced driving system” that should be “capable of performing transportation tasks that prove autonomous or similar functionality”.&lt;/p&gt;
    &lt;p&gt;The current version of FSD, which requires constant supervising by the driver, could easily fit that description.&lt;/p&gt;
    &lt;p&gt;Therefore, FSD now doesn’t come with the inital promise of Tesla owners being able to go to sleep in their vehicles and wake up at their destination – a promise that Musk has used to sell Tesla vehicles for years.&lt;/p&gt;
    &lt;head rend="h2"&gt;Electrek’s Take&lt;/head&gt;
    &lt;p&gt;The way Tesla discusses autonomy with customers and investors versus how it presents it in its court filings and legally binding documents is strikingly different.&lt;/p&gt;
    &lt;p&gt;It should be worrying to anyone with an interest in this.&lt;/p&gt;
    &lt;p&gt;With this very vague description in the new CEO compensation package, Tesla could literally lower the price of FSD and even remove base Autopilot to push customers toward FSD and give Musk hundreds of billions of dollars in shares in the process.&lt;/p&gt;
    &lt;head rend="h2"&gt;Top comment by CRisner&lt;/head&gt;
    &lt;p&gt;Whoop. There it is.&lt;/p&gt;
    &lt;p&gt;Just like the comment years ago that Tesla would “open their network to non-Tesla’s by the end of the year” caused folks to think that suddenly non-Tesla vehicles worldwide would be able to use their Supercharger network, by year end, it turns out that a few charging stations in Norway opened up their CSS Tesla chargers to non-Tesla cars.&lt;/p&gt;
    &lt;p&gt;So technically correct, and accurate, but nothing like everyone thought would happen, especially in the USA.&lt;/p&gt;
    &lt;p&gt;I swear, anymore I feel its more interesting to wait for he “gotcha” from Tesla than it is to hear the intial announcement.&lt;/p&gt;
    &lt;p&gt;So today, Tesla puts a metric in place for Musk to be paid that includes a specific number of FSD cars on the road, then they change the definition of FSD to basically mean the same thing as their current Autopilot system. Suddenly every single Tesla meets the “FSD” definition.&lt;/p&gt;
    &lt;p&gt;Brilliant move. Check. Wonder what the next move will be.&lt;/p&gt;
    &lt;p&gt;There’s precedent for Tesla decreasing pricing on FSD. Initially, Musk said that Tesla would gradually increase the price of the FSD package as the features improved and approached unsupervised autonomy.&lt;/p&gt;
    &lt;p&gt;That was true for a while, but then Tesla started slashing FSD prices, which are now down $7,000 from their high in 2023:&lt;/p&gt;
    &lt;p&gt;The trend is quite apparent and coincidentally began when Tesla’s sales started to decline.&lt;/p&gt;
    &lt;p&gt;FSD is now a simple ADAS system without any promise of unsupervised self-driving. This might quite honestly be one of the biggest cases of false advertising or bait-and-switch ever.&lt;/p&gt;
    &lt;p&gt;FTC: We use income earning auto affiliate links. More.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45144900</guid></item><item><title>GLM 4.5 with Claude Code</title><link>https://docs.z.ai/guides/llm/glm-4.5</link><description>&lt;doc fingerprint="ccd2e51a790b4291"&gt;
  &lt;main&gt;&lt;code&gt;thinking.type&lt;/code&gt;parameter (with &lt;code&gt;enabled&lt;/code&gt; and &lt;code&gt;disabled&lt;/code&gt; settings), and dynamic thinking is enabled by default.
&lt;p&gt;Our most powerful reasoning model, with 355 billion parameters&lt;/p&gt;&lt;p&gt;Cost-Effective Lightweight Strong Performance&lt;/p&gt;&lt;p&gt;High Performance Strong Reasoning Ultra-Fast Response&lt;/p&gt;&lt;p&gt;Lightweight Strong Performance Ultra-Fast Response&lt;/p&gt;&lt;p&gt;Free Strong Performance Excellent for Reasoning Coding &amp;amp; Agents&lt;/p&gt;&lt;code&gt;thinking.type&lt;/code&gt; parameter. This parameter supports two values: &lt;code&gt;enabled&lt;/code&gt; (enabled) and &lt;code&gt;disabled&lt;/code&gt; (disabled). By default, dynamic thinking is enabled.
&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45145457</guid></item><item><title>Developing a Space Flight Simulator in Clojure</title><link>https://www.wedesoft.de/software/2025/09/05/clojure-game/</link><description>&lt;doc fingerprint="4c23b196c6d1b91"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Developing a Space Flight Simulator in Clojure&lt;/head&gt;05 Sep 2025&lt;p&gt;In 2017 I discovered the free of charge Orbiter 2016 space flight simulator which was proprietary at the time and it inspired me to develop a space flight simulator myself. I prototyped some rigid body physics in C and later in GNU Guile and also prototyped loading and rendering of Wavefront OBJ files. I used GNU Guile (a Scheme implementation) because it has a good native interface and of course it has hygienic macros. Eventually I got interested in Clojure because unlike GNU Guile it has multi-methods as well as fast hash maps and vectors. I finally decided to develop the game for real in Clojure. I have been developing a space flight simulator in Clojure for almost 5 years now. While using Clojure I have come to appreciate the immutable values and safe parallelism using atoms, agents, and refs.&lt;/p&gt;&lt;p&gt;In the beginning I decided to work on the hard parts first, which for me were 3D rendering of a planet, an atmosphere, shadows, and volumetric clouds. I read the OpenGL Superbible to get an understanding on what functionality OpenGL provides. When Orbiter was eventually open sourced and released unter MIT license here, I inspected the source code and discovered that about 90% of the code is graphics-related. So starting with the graphics problems was not a bad decision.&lt;/p&gt;&lt;head rend="h2"&gt;Software dependencies&lt;/head&gt;&lt;p&gt;The following software is used for development. The software libraries run on both GNU/Linux and Microsoft Windows.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Clojure the programming language&lt;/item&gt;&lt;item&gt;LWJGL provides Java wrappers for various libraries &lt;list rend="ul"&gt;&lt;item&gt;lwjgl-opengl for 3D graphics&lt;/item&gt;&lt;item&gt;lwjgl-glfw for windowing and input devices&lt;/item&gt;&lt;item&gt;lwjgl-nuklear for graphical user interfaces&lt;/item&gt;&lt;item&gt;lwjgl-stb for image I/O and using truetype fonts&lt;/item&gt;&lt;item&gt;lwjgl-assimp to load glTF 3D models with animation data&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;item&gt;Jolt Physics to simulate wheeled vehicles and collisions with meshes&lt;/item&gt;&lt;item&gt;Fastmath for fast matrix and vector math as well as spline interpolation&lt;/item&gt;&lt;item&gt;Comb for templating shader code&lt;/item&gt;&lt;item&gt;Instaparse to parse NASA Planetary Constant Kernel (PCK) files&lt;/item&gt;&lt;item&gt;Gloss to parse NASA Double Precision Array Files (DAF)&lt;/item&gt;&lt;item&gt;Coffi as a foreign function interface&lt;/item&gt;&lt;item&gt;core.memoize for least recently used caching of function results&lt;/item&gt;&lt;item&gt;Apache Commons Compress to read map tiles from tar files&lt;/item&gt;&lt;item&gt;Malli to add schemas to functions&lt;/item&gt;&lt;item&gt;Immuconf to load the configuration file&lt;/item&gt;&lt;item&gt;Progrock a progress bar for long running builds&lt;/item&gt;&lt;item&gt;Claypoole to implement parallel for loops&lt;/item&gt;&lt;item&gt;tools.build to build the project&lt;/item&gt;&lt;item&gt;clj-async-profiler Clojure profiler creating flame graphs&lt;/item&gt;&lt;item&gt;slf4j-timbre Java logging implementation for Clojure&lt;/item&gt;&lt;/list&gt;&lt;p&gt;The deps.edn file contains operating system dependent LWJGL bindings. For example on GNU/Linux the deps.edn file contains the following:&lt;/p&gt;&lt;p&gt;In order to manage the different dependencies for Microsoft Windows, a separate Git branch is maintained.&lt;/p&gt;&lt;head rend="h2"&gt;Atmosphere rendering&lt;/head&gt;&lt;p&gt;For the atmosphere, Brunetonâs precomputed atmospheric scattering was used. The implementation uses a 2D transmittance table, a 2D surface scattering table, a 4D Rayleigh scattering, and a 4D Mie scattering table. The tables are computed using several iterations of numerical integration. Higher order functions for integration over a sphere and over a line segment were implemented in Clojure. Integration over a ray in 3D space (using fastmath vectors) was implemented as follows for example:&lt;/p&gt;&lt;p&gt;Precomputing the atmospheric tables takes several hours even though pmap was used. When sampling the multi-dimensional functions, pmap was used as a top-level loop and map was used for interior loops. Using java.nio.ByteBuffer the floating point values were converted to a byte array and then written to disk using a clojure.java.io/output-stream:&lt;/p&gt;&lt;p&gt;When launching the game, the lookup tables get loaded and copied into OpenGL textures. Shader functions are used to lookup and interpolate values from the tables. When rendering the planet surface or the space craft, the atmosphere essentially gets superimposed using ray tracing. After rendering the planet, a background quad is rendered to display the remaining part of the atmosphere above the horizon.&lt;/p&gt;&lt;head rend="h2"&gt;Templating OpenGL shaders&lt;/head&gt;&lt;p&gt;It is possible to make programming with OpenGL shaders more flexible by using a templating library such as Comb. The following shader defines multiple octaves of noise on a base noise function:&lt;/p&gt;&lt;p&gt;One can then for example define the function fbm_noise using octaves of the base function noise as follows:&lt;/p&gt;&lt;head rend="h2"&gt;Planet rendering&lt;/head&gt;&lt;p&gt;To render the planet, NASA Bluemarble data, NASA Blackmarble data, and NASA Elevation data was used. The images were converted to a multi resolution pyramid of map tiles. The following functions were implemented for color map tiles and for elevation tiles:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;a function to load and cache map tiles of given 2D tile index and level of detail&lt;/item&gt;&lt;item&gt;a function to extract a pixel from a map tile&lt;/item&gt;&lt;item&gt;a function to extract the pixel for a specific longitude and latitude&lt;/item&gt;&lt;/list&gt;&lt;p&gt;The functions for extracting a pixel for given longitude and latitude then were used to generate a cube map with a quad tree of tiles for each face. For each tile, the following files were generated:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;A daytime texture&lt;/item&gt;&lt;item&gt;A night time texture&lt;/item&gt;&lt;item&gt;An image of 3D vectors defining a surface mesh&lt;/item&gt;&lt;item&gt;A water mask&lt;/item&gt;&lt;item&gt;A normal map&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Altogether 655350 files were generated. Because the Steam ContentBuilder does not support a large number of files, each row of tile data was aggregated into a tar file. The Apache Commons Compress library allows you to open a tar file to get a list of entries and then perform random access on the contents of the tar file. A Clojure LRU cache was used to maintain a cache of open tar files for improved performance.&lt;/p&gt;&lt;p&gt;At run time, a future is created, which returns an updated tile tree, a list of tiles to drop, and a path list of the tiles to load into OpenGL. When the future is realized, the main thread deletes the OpenGL textures from the drop list, and then uses the path list to get the new loaded images from the tile tree, load them into OpenGL textures, and create an updated tile tree with the new OpenGL textures added. The following functions to manipulate quad trees were implemented to realize this:&lt;/p&gt;&lt;head rend="h2"&gt;Other topics&lt;/head&gt;&lt;head rend="h3"&gt;Solar system&lt;/head&gt;&lt;p&gt;The astronomy code for getting the position and orientation of planets was implemented according to the Skyfield Python library. The Python library in turn is based on the SPICE toolkit of the NASA JPL. The JPL basically provides sequences of Chebyshev polynomials to interpolate positions of Moon and planets as well as the orientation of the Moon as binary files. Reference coordinate systems and orientations of other bodies are provided in text files which consist of human and machine readable sections. The binary files were parsed using Gloss (see Wiki for some examples) and the text files using Instaparse.&lt;/p&gt;&lt;head rend="h3"&gt;Jolt bindings&lt;/head&gt;&lt;p&gt;The required Jolt functions for wheeled vehicle dynamics and collisions with meshes were wrapped in C functions and compiled into a shared library. The Coffi Clojure library (which is a wrapper for Javaâs new Foreign Function &amp;amp; Memory API) was used to make the C functions and data types usable in Clojure.&lt;/p&gt;&lt;p&gt;For example the following code implements a call to the C function add_force:&lt;/p&gt;&lt;p&gt;Here ::vec3 refers to a custom composite type defined using basic types. The memory layout, serialisation, and deserialisation for ::vec3 are defined as follows:&lt;/p&gt;&lt;head rend="h3"&gt;Performance&lt;/head&gt;&lt;p&gt;The clj-async-profiler was used to create flame graphs visualising the performance of the game. In order to get reflection warnings for Java calls without sufficient type declarations, *warn-on-reflection* was set to true.&lt;/p&gt;&lt;p&gt;Furthermore to discover missing declarations of numerical types, *unchecked-math* was set to :warn-on-boxed.&lt;/p&gt;&lt;p&gt;To reduce garbage collector pauses, the ZGC low-latency garbage collector for the JVM was used. The following section in deps.edn ensures that the ZGC garbage collector is used when running the project with clj -M:run:&lt;/p&gt;&lt;p&gt;The option to use ZGC is also specified in the Packr JSON file used to deploy the application.&lt;/p&gt;&lt;head rend="h3"&gt;Building the project&lt;/head&gt;&lt;p&gt;In order to build the map tiles, atmospheric lookup tables, and other data files using tools.build, the project source code was made available in the build.clj file using a :local/root dependency:&lt;/p&gt;&lt;p&gt;Various targets were defined to build the different components of the project. For example the atmospheric lookup tables can be build by specifying clj -T:build atmosphere-lut on the command line.&lt;/p&gt;&lt;p&gt;The following section in the build.clj file was added to allow creating an âUberjarâ JAR file with all dependencies by specifying clj -T:build uber on the command-line.&lt;/p&gt;&lt;p&gt;To create a Linux executable with Packr, one can then run java -jar packr-all-4.0.0.jar scripts/packr-config-linux.json where the JSON file has the following content:&lt;/p&gt;&lt;p&gt;In order to distribute the game on Steam, three depots were created:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;a data depot with the operating system independent data files&lt;/item&gt;&lt;item&gt;a Linux depot with the Linux executable and Uberjar including LWJGLâs Linux native bindings&lt;/item&gt;&lt;item&gt;and a Windows depot with the Windows executable and an Uberjar including LWJGLâs Windows native bindings&lt;/item&gt;&lt;/list&gt;&lt;p&gt;When updating a depot, the Steam ContentBuilder command line tool creates and uploads a patch in order to preserve storage space and bandwidth.&lt;/p&gt;&lt;head rend="h2"&gt;Future work&lt;/head&gt;&lt;p&gt;Although the hard parts are mostly done, there are still several things to do:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;control surfaces and thruster graphics&lt;/item&gt;&lt;item&gt;launchpad and runway graphics&lt;/item&gt;&lt;item&gt;sound effects&lt;/item&gt;&lt;item&gt;a 3D cockpit&lt;/item&gt;&lt;item&gt;the Moon&lt;/item&gt;&lt;item&gt;a space station&lt;/item&gt;&lt;/list&gt;&lt;p&gt;It would also be interesting to make the game modable in a safe way (maybe evaluating Clojure files in a sandboxed environment?).&lt;/p&gt;&lt;head rend="h2"&gt;Conclusion&lt;/head&gt;&lt;p&gt;You can find the source code on Github. Currently there is only a playtest build, but if you want to get notified, when the game gets released, you can wishlist it here.&lt;/p&gt;&lt;p&gt;Anyway, let me know any comments and suggestions.&lt;/p&gt;&lt;p&gt;Enjoy!&lt;/p&gt;&lt;head rend="h2"&gt;Related blog posts&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;Flight dynamics model for simulating Venturestar style spacecraft&lt;/item&gt;&lt;item&gt;Test Driven Development with OpenGL&lt;/item&gt;&lt;item&gt;Implementing GUIs using Clojure and LWJGL Nuklear bindings&lt;/item&gt;&lt;item&gt;Procedural Volumetric Clouds&lt;/item&gt;&lt;item&gt;Procedural generation of global cloud cover&lt;/item&gt;&lt;item&gt;Reversed-Z Rendering in OpenGL&lt;/item&gt;&lt;item&gt;Specifying Clojure function schemas with Malli&lt;/item&gt;&lt;item&gt;Implement an Interpreter using Clojure Instaparse&lt;/item&gt;&lt;item&gt;Orbits with Jolt Physics&lt;/item&gt;&lt;item&gt;Getting started with the Jolt Physics Engine&lt;/item&gt;&lt;item&gt;Create Blender bones and animate and import with Assimp&lt;/item&gt;&lt;/list&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45145794</guid></item><item><title>Rug pulls, forks, and open-source feudalism</title><link>https://lwn.net/SubscriberLink/1036465/e80ebbc4cee39bfb/</link><description>&lt;doc fingerprint="8f537952c92707bd"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Rug pulls, forks, and open-source feudalism&lt;/head&gt;
    &lt;head rend="h2"&gt;[LWN subscriber-only content]&lt;/head&gt;
    &lt;quote&gt;
      &lt;head&gt;Welcome to LWN.net&lt;/head&gt;
      &lt;p&gt;The following subscription-only content has been made available to you by an LWN subscriber. Thousands of subscribers depend on LWN for the best news from the Linux and free software communities. If you enjoy this article, please consider subscribing to LWN. Thank you for visiting LWN.net!&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Like almost all human endeavors, open-source software development involves a range of power dynamics. Companies, developers, and users are all concerned with the power to influence the direction of the software — and, often, to profit from it. At the 2025 Open Source Summit Europe, Dawn Foster talked about how those dynamics can play out, with an eye toward a couple of tactics — rug pulls and forks — that are available to try to shift power in one direction or another.&lt;/p&gt;
    &lt;head rend="h4"&gt;Power dynamics&lt;/head&gt;
    &lt;p&gt;Since the beginning of history, Foster began, those in power have tended to use it against those who were weaker. In the days of feudalism, control of the land led to exploitation at several levels. In the open-source world, the large cloud providers often seem to have the most power, which they use against smaller companies. Contributors and maintainers often have less power than even the smaller companies, and users have less power yet.&lt;/p&gt;
    &lt;p&gt;We have built a world where it is often easiest to just use whatever a cloud provider offers, even with open-source software. Those providers may not contribute back to the projects they turn into services, though, upsetting the smaller companies that are, likely as not, doing the bulk of the work to provide the software in question in the first place. Those companies can have a power of their own, however: the power to relicense the software. Pulling the rug out from under users of the software in this way can change the balance of power with regard to cloud providers, but it leaves contributors and users in a worse position than before. But there is a power at this level too: the power to fork the software, flipping the power balance yet again.&lt;/p&gt;
    &lt;p&gt;Companies that control a software project have the power to carry out this sort of rug pull, and they are often not shy about exercising it. Single-company projects, clearly, are at a much higher risk of rug pulls; the company has all the power in this case, and others have little recourse. So one should look at a company's reputation before adopting a software project, but that is only so helpful. Companies can change direction without notice, be acquired, or go out of business, making previous assessments of their reputation irrelevant.&lt;/p&gt;
    &lt;p&gt;The problem often comes down to the simple fact that companies have to answer to their investors, and that often leads to pressure to relicense the software they have created in order to increase revenue. This is especially true in cases where cloud providers are competing for the same customers as the company that owns the project. The result can be a switch to a more restrictive license aimed at making it harder for other companies to profit from the project.&lt;/p&gt;
    &lt;p&gt;A rug pull of this nature can lead to a fork of the project — a rebellious, collective action aimed at regaining some power over the code. But a fork is not a simple matter; it is a lot of work, and will fail without people and resources behind it. The natural source for that is a large company; cloud providers, too, can try to shift power via a fork, and they have the ability to back their fork up with the resources it needs to succeed.&lt;/p&gt;
    &lt;p&gt;A relicensing event does not always lead to a popular fork; that did not happen with MongoDB or Sentry, for example. Foster said she had not looked into why that was the case. Sometimes rug pulls take other forms, such as when Perforce, after acquiring Puppet in 2022, moved it development and releases behind closed doors, with a reduced frequency of releases back to the public repository. That action kicked off the OpenVox fork.&lt;/p&gt;
    &lt;head rend="h4"&gt;Looking at the numbers&lt;/head&gt;
    &lt;p&gt;Foster has spent some time analyzing rug pulls, forks, and what happens thereafter; a lot of the results are available for download as Jupyter notebooks. For each rug-pull event, she looked at the contributor makeup of the project before and after the ensuing fork in an attempt to see what effects are felt by the projects involved.&lt;/p&gt;
    &lt;p&gt;In 2021, Elastic relicensed Elasticsearch under the non-free Server Side Public License (SSPL). Amazon Web Services then forked the project as OpenSearch. Before the fork, most of the Elasticsearch contributors were Elastic employees; that, unsurprisingly, did not change afterward. OpenSearch started with no strong contributor base, so had to build its community from scratch. As a result, the project has been dominated by Amazon contributors ever since; the balance has shifted slowly over time, but there was not a big uptick in outside contributors even after OpenSearch became a Linux Foundation project in 2024. While starting a project under a neutral foundation can help attract contributors, she said, moving a project under a foundation's umbrella later on does not seem to provide the same benefit.&lt;/p&gt;
    &lt;p&gt;Terraform was developed mostly by Hashicorp, which relicensed the software under the non-free Business Source License in 2023. One month later, the OpenTofu fork was started under the Linux Foundation. While the contributor base for Terraform, which was almost entirely Hashicorp employees, changed little after the fork, OpenTofu quickly acquired a number of contributors from several companies, none of whom had been Terraform contributors before. In this case, users drove the fork and placed it under a neutral foundation, resulting in a more active developer community.&lt;/p&gt;
    &lt;p&gt;In 2024, Redis was relicensed under the SSPL; the Valkey fork was quickly organized, under the Linux Foundation, by Redis contributors. The Redis project differed from the others mentioned here in that, before the fork, it had nearly twice as many contributors from outside the company as from within; after the fork, the number of external Redis contributors dropped to zero. All of the external contributors fled to Valkey, with the result that Valkey started with a strong community representing a dozen or so companies.&lt;/p&gt;
    &lt;p&gt;Looking at how the usage of these projects changes is harder, she said, but there appears to be a correlation between the usage of a project and the number of GitHub forks (cloned repository copies) it has. There is typically a spike in these clones after a relicensing event, suggesting that people are considering creating a hard fork of the project. In all cases, the forks that emerged appeared to have less usage than the original by the "GitHub forks" metric; both branches of the fork continue to go forward. But, she said, projects that are relicensed do tend to show reduced usage, especially when competing forks are created under foundations.&lt;/p&gt;
    &lt;head rend="h4"&gt;What to do&lt;/head&gt;
    &lt;p&gt;This kind of power game creates problems for both contributors and users, she said; we contribute our time to these projects, and need them to not be pulled out from under us. There is no way to know when a rug pull might happen, but there are some warning signs to look out for. At the top of her list was the use of a contributor license agreement (CLA); these agreements create a power imbalance, giving the company involved the power to relicense the software. Projects with CLAs more commonly are subject to rug pulls; projects using a developers certificate of origin do not have the same power imbalance and are less likely to be rug pulled.&lt;/p&gt;
    &lt;p&gt;One should also look at the governance of a project; while being housed under a foundation reduces the chance of a rug pull, that can still happen, especially in cases where the contributors are mostly from a single company. She mentioned the Cortex project, housed under the Cloud Native Computing Foundation, which was controlled by Grafana; that company eventually forked its own project to create Mimir. To avoid this kind of surprise, one should look for projects with neutral governance, with leaders from multiple organizations.&lt;/p&gt;
    &lt;p&gt;Projects should also be evaluated on their contributor base; are there enough contributors to keep things going? Companies can help, of course, by having their employees contribute to the projects they depend on, increasing influence and making those projects more sustainable. She mentioned the CHAOSS project, which generates metrics to help in the judgment of the viability of development projects. CHAOSS has put together a set of "practitioner guides" intended to help contributors and maintainers make improvements within a project.&lt;/p&gt;
    &lt;p&gt;With the sustained rise of the big cloud providers, she concluded, the power dynamics around open-source software are looking increasingly feudal. Companies can use relicensing to shift power away from those providers, but they also take power from contributors when the pull the rug in this way. Those contributors, though, are in a better position than the serfs of old, since they have the ability to fork a project they care about, shifting power back in their direction.&lt;/p&gt;
    &lt;p&gt;Hazel Weakly asked if there are other protections that contributors and users might develop to address this problem. Foster answered that at least one company changed its mind about a planned relicensing action after seeing the success of the Valkey and OpenTofu forks. The ability to fork has the effect of making companies think harder, knowing that there may be consequences that follow a rug pull. Beyond that, she reiterated that projects should be pushed toward neutral governance. Dirk Hohndel added that the best thing to do is to bring more outside contributors into a project; the more of them there are, the higher the risk associated with a rug pull. Anybody who just sits back within a project, he said, is just a passenger; it is better to be driving.&lt;/p&gt;
    &lt;p&gt;Foster's slides are available for interested readers.&lt;/p&gt;
    &lt;p&gt; [Thanks to the Linux Foundation, LWN's travel sponsor, for supporting my travel to this event.]&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Index entries for this article&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Conference&lt;/cell&gt;
        &lt;cell&gt;Open Source Summit Europe/2025&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; Posted Sep 6, 2025 12:24 UTC (Sat) by immibis (subscriber, #105511) [Link] (7 responses) The confusion comes about because the OSI declared it to not be open source. But they are a corrupt institution. Their explanation[1] makes no reference to the license text whatsoever, only vague handwavey excuses that apply equally well to AGPL, and the members/sponsors of the OSI are primarily companies that sell cloud stuff and have a strong interest in preventing more software from using the SSPL. You can also check the license text itself and verify that it doesn't "discriminate against a field of endeavour". I recommend finding the plain text version, and diffing it against the AGPLv3. They differ only in the name of the license, and one short section. [1] https://opensource.org/blog/the-sspl-is-not-an-open-sourc... Posted Sep 6, 2025 13:15 UTC (Sat) by claudex (subscriber, #92510) [Link] (2 responses) Yeah, that's the section that is considered the issue to be able to use the software to provide the service. As it requires to publish all code that interact with the software, like monitoring, backup and storage code. That's a big difference with AGPL. &amp;gt; "Service Source Code" means the Corresponding Source for the Program or the modified version, and the Corresponding Source for all programs that you use to make the Program or modified version available as a service, including, without limitation, management software, user interfaces, application program interfaces, automation software, monitoring software, backup software, storage software and hosting software, all such that a user could run an instance of the service using the Service Source Code you make available. Posted Sep 6, 2025 14:15 UTC (Sat) by smurf (subscriber, #17840) [Link] (1 responses) "Service Source Code" means the Corresponding Source for the Program or the modified version, and the Corresponding Source for all programs that you use to make the Program or modified version available as a service, including, without limitation, management software, user interfaces, application program interfaces, automation software, monitoring software, backup software, storage software and hosting software, all such that a user could run an instance of the service using the Service Source Code you make available. Oops, you now cannot use a commercial backup system for which you don't have the source code in conjunction with the SSPL-licensed service you're offering. Also does "storage software" incorporate the firmware of your disk drive or not? far from clear just by reading this license, that "without limitation" clause does raise a red flag or three, doesn't it? Sorry to be blunt, but that kind of overbearing restrictive language is the antithesis of OSS. My conclusion is that anybody who proclaims the SSPL to be "free" either didn't read it or has an agenda. Or both. Posted Sep 6, 2025 15:09 UTC (Sat) by immibis (subscriber, #105511) [Link] Posted Sep 6, 2025 13:39 UTC (Sat) by DemiMarie (subscriber, #164188) [Link] Posted Sep 6, 2025 14:15 UTC (Sat) by jjs (guest, #10315) [Link] (2 responses) "9. License Must Not Restrict Other Software The license must not place restrictions on other software that is distributed along with the licensed software. For example, the license must not insist that all other programs distributed on the same medium must be open source software." By the terms of the SSPL, all other software that interacts with the SSPL'd software must be Open Source (https://webassets.mongodb.com/_com_assets/legal/SSPL-comp... - see Section 13). Violation of OSD #9 (which is derived from the Debian Social Contract Guidelines - https://www.debian.org/social_contract#guidelines). "But they are a corrupt institution." That's a serious allegation - feel free to provide verifiable evidence of that (and no, the fact that they have corporate sponsors doesn't make them corrupt. If it did, every non-profit in the world would be considered corrupt). Posted Sep 6, 2025 15:09 UTC (Sat) by immibis (subscriber, #105511) [Link] (1 responses) Posted Sep 6, 2025 15:52 UTC (Sat) by pbonzini (subscriber, #60935) [Link] The discrimination against fields of endeavor is also at least plausible. The AGPL instead only extends the circumstances under which you shall provide the sources. &lt;head&gt;SSPL is a free license&lt;/head&gt;&lt;head&gt;SSPL is a free license&lt;/head&gt;&lt;head&gt;SSPL is a free license&lt;/head&gt;&lt;head&gt;SSPL is a free license&lt;/head&gt;&lt;head&gt;SSPL is not a free license&lt;/head&gt;&lt;head&gt;SSPL is not a free license - Per Open Source Definition&lt;/head&gt;&lt;head&gt;SSPL is not a free license - Per Open Source Definition&lt;/head&gt;&lt;head&gt;SSPL is not a free license - Per Open Source Definition&lt;/head&gt;&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45146967</guid></item><item><title>Let us git rid of it, angry GitHub users say of forced Copilot features</title><link>https://www.theregister.com/2025/09/05/github_copilot_complaints/</link><description>&lt;doc fingerprint="36843119b7be6ce3"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Let us git rid of it, angry GitHub users say of forced Copilot features&lt;/head&gt;
    &lt;head rend="h2"&gt;Unavoidable AI has developers looking for alternative code hosting options&lt;/head&gt;
    &lt;p&gt;Among the software developers who use Microsoft's GitHub, the most popular community discussion in the past 12 months has been a request for a way to block Copilot, the company's AI service, from generating issues and pull requests in code repositories.&lt;/p&gt;
    &lt;p&gt;The second most popular discussion – where popularity is measured in upvotes – is a bug report that seeks a fix for the inability of users to disable Copilot code reviews.&lt;/p&gt;
    &lt;p&gt;Both of these questions, the first opened in May and the second opened a month ago, remain unanswered, despite an abundance of comments critical of generative AI and Copilot.&lt;/p&gt;
    &lt;p&gt;The author of the first, developer Andi McClure, published a similar request to Microsoft's Visual Studio Code repository in January, objecting to the reappearance of a Copilot icon in VS Code after she had uninstalled the Copilot extension.&lt;/p&gt;
    &lt;p&gt;Microsoft and GitHub, not to mention rivals like Google, have gone all-in on a technology that a sizable or at least vocal portion of their customers simply don't want. And with billions in capital expenditures to recoup, they're making it difficult to avoid.&lt;/p&gt;
    &lt;p&gt;During Microsoft's July 30, 2025 earnings call, CEO Satya Nadella said GitHub Copilot continued to exhibit strong momentum and had reached 20 million users.&lt;/p&gt;
    &lt;p&gt;"GitHub Copilot Enterprise customers increased 75 percent quarter over quarter as companies tailor Copilot to their own codebases," said Nadella, noting that AI adoption has increased usage of GitHub over the past year.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;I deeply resent that on top of Copilot seemingly training itself on my GitHub-posted code in violation of my licenses, GitHub wants me to look at (effectively) ads for this project I will never touch&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;"I've been for a while now filing issues in the GitHub Community feedback area when Copilot intrudes on my GitHub usage," McClure told The Register in an email. "I deeply resent that on top of Copilot seemingly training itself on my GitHub-posted code in violation of my licenses, GitHub wants me to look at (effectively) ads for this project I will never touch. If something's bothering me, I don't see a reason to stay quiet about it. I think part of how we get pushed into things we collectively don't want is because we stay quiet about it."&lt;/p&gt;
    &lt;p&gt;It's not just the burden of responding to AI slop, an ongoing issue for Curl maintainer Daniel Stenberg. It's the permissionless copying and regurgitation of speculation as fact, mitigated only by small print disclaimers that generative AI may produce inaccurate results. It's also GitHub's disavowal of liability if Copilot code suggestions happen to have reproduced source code that requires attribution.&lt;/p&gt;
    &lt;p&gt;It's what the Servo project characterizes in its ban on AI code contributions as the lack of code correctness guarantees, copyright issues, and ethical concerns. Similar objections have been used to justify AI code bans in GNOME's Loupe project, FreeBSD, Gentoo, NetBSD, and QEMU.&lt;/p&gt;
    &lt;p&gt;McClure said she has been filing requests to opt out of Copilot for a few years now, but in the last six months, her posts have been attracting more community support.&lt;/p&gt;
    &lt;p&gt;Two issues, about the abovementioned Copilot menu in VS Code and the inability to block Copilot-generated issues and pull requests, she said, have continued to attract comments.&lt;/p&gt;
    &lt;p&gt;"People keep finding these issues somehow and tacking on to them," McClure said. "Although Microsoft's been forcing the Copilot 'asks' into more and more places in the interface for a while, sometime this year they hit an inflection point where mass numbers of people don't feel like ignoring it anymore, where before they could shrug and ignore it or find the off switch."&lt;/p&gt;
    &lt;p&gt;In the past month, she said, there's been a second change in the way people see GitHub – GitHub's demotion from distinct subsidiary to part of Microsoft's CoreAI group.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Bot shots: US Army enlists AI startup to provide target-tracking&lt;/item&gt;
      &lt;item&gt;OpenAI eats jobs, then offers to help you find a new one at Walmart&lt;/item&gt;
      &lt;item&gt;Boffins build automated Android bug hunting system&lt;/item&gt;
      &lt;item&gt;Atlassian acquisition drives dream of AI-powered ChromeOS challenger&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;"Despite being a symbolic change, it seems to have galvanized the open source community from just complaining about Copilot to now actively moving away from GitHub," said McClure. "Many of my contacts in the open source community have been talking about plans to move from GitHub to Codeberg or a self-hosted Forgejo (Forgejo is the software used by Codeberg) over the last month, and the comments in those two always-busy GitHub threads have increasingly been people describing how Copilot is inspiring them to move to Codeberg as well."&lt;/p&gt;
    &lt;p&gt;Calls to shun Microsoft and GitHub go back a long way in the open source community, but moved beyond simmering dissatisfaction in 2022 when the Software Freedom Conservancy (SFC) urged free software supporters to give up GitHub, a position SFC policy fellow Bradley M. Kuhn recently reiterated.&lt;/p&gt;
    &lt;p&gt;Some of the developers participating in the issues raised by McClure and by others have said they intend to move away from GitHub over its stance on AI.&lt;/p&gt;
    &lt;p&gt;"Today I rejected two Copilot-generated code suggestions on my PR," wrote a developer who posted to McClure's thread under the name Constantine. "This was very disturbing, so I started googling and found this discussion. I refuse using AI in the same way I don't take drugs or steal things - for me it's a matter of principle. So if this continues and Microsoft does not provide a way to opt out of AI for my repositories soon, I will move my code to a self-hosted solution and won't ever return to GitHub."&lt;/p&gt;
    &lt;p&gt;McClure said she has been slowly shifting toward Codeberg over the past few months. "I haven't been proactively moving repos but whenever I make a change to a repo I clone it to Codeberg, post the change there, and replace my main branch on the GitHub repo with a relocation notice," she said.&lt;/p&gt;
    &lt;p&gt;"Microsoft as a company has a running problem where they won't take no for an answer, whether with 'AI' or with any other product they want to ship," said McClure. "A favorite tactic of theirs recently is they will enable a thing by default and put an off switch, wait six months, and then slightly change or rename the feature you turned off, and create a new off switch you have to separately turn off. They did this with Bing in Windows 10 and now they're doing it with Copilot in their developer tools (and presumably Windows 11, I don't know, I don't use Windows 11)."&lt;/p&gt;
    &lt;p&gt;McClure said that when Microsoft began adding Copilot to everything, starting with Android keyboard SwiftKey, she concluded that the situation would reprise the handling of Bing/Cortana in Windows 10 and turning it off would not be enough.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;If you really find Copilot unacceptable – and I do, Copilot is so much more noxious than Microsoft's previous forced bundlings – the only option is to stop using any Microsoft product that Copilot shows up in&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;"If you really find Copilot unacceptable – and I do, Copilot is so much more noxious than Microsoft's previous forced bundlings – the only option is to stop using any Microsoft product that Copilot shows up in," she said. "I stopped using SwiftKey; I started migrating from desktop Windows to Linux when it became clear mandatory AI surveillance would be a core part of Win11. GitHub and, more sporadically, Visual Studio Code I have had to keep using because they're monopolies in a way even Windows isn't. The network effects (projects whose sole method of communication is GitHub, software whose only IDE integration is a VSCode plugin) are too strong."&lt;/p&gt;
    &lt;p&gt;Things have progressed as expected, McClure said, with Copilot buttons appearing in VS Code even when Copilot has been uninstalled and poorly labeled buttons that redirect to Copilot searches. She suggests people are starting to tire of the situation and that if it continues, it will weaken the network effects that keep developers tied to GitHub, accelerating further migration.&lt;/p&gt;
    &lt;p&gt;"When this happens I have no idea if Microsoft will notice or care," said McClure. "The Copilot push at Microsoft appears to be completely top-down and the people at the top seem to have completely forgotten about conventional goals like customer retention. They want to pump up those 'AI' numbers, for whatever reason, and they view their customer base as just a resource to burn to get those metrics up."&lt;/p&gt;
    &lt;p&gt;GitHub did not respond to a request for comment. ®&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45148167</guid></item><item><title>A Software Development Methodology for Disciplined LLM Collaboration</title><link>https://github.com/Varietyz/Disciplined-AI-Software-Development</link><description>&lt;doc fingerprint="b9b354209f24abe"&gt;
  &lt;main&gt;
    &lt;p&gt;Disciplined AI Software Development Methodology © 2025 by Jay Baleine is licensed under CC BY-SA 4.0&lt;/p&gt;
    &lt;p&gt;A structured approach for working with AI on development projects. This methodology addresses common issues like code bloat, architectural drift, and context dilution through systematic constraints.&lt;/p&gt;
    &lt;p&gt;AI systems work on Question → Answer patterns. When you ask for broad, multi-faceted implementations, you typically get:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Functions that work but lack structure&lt;/item&gt;
      &lt;item&gt;Repeated code across components&lt;/item&gt;
      &lt;item&gt;Architectural inconsistency over sessions&lt;/item&gt;
      &lt;item&gt;Context dilution causing output drift&lt;/item&gt;
      &lt;item&gt;More debugging time than planning time&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The methodology uses four stages with systematic constraints and validation checkpoints. Each stage builds on empirical data rather than assumptions.&lt;/p&gt;
    &lt;p&gt;Planning saves debugging time. Planning thoroughly upfront typically prevents days of fixing architectural issues later.&lt;/p&gt;
    &lt;p&gt;Set up your AI model's custom instructions using AI-PREFERENCES.md. This establishes behavioral constraints and uncertainty flagging with &lt;/p&gt;
    &lt;p&gt;Share METHODOLOGY.md with the AI to structure your project plan. Work together to:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Define scope and completion criteria&lt;/item&gt;
      &lt;item&gt;Identify components and dependencies&lt;/item&gt;
      &lt;item&gt;Structure phases based on logical progression&lt;/item&gt;
      &lt;item&gt;Generate systematic tasks with measurable checkpoints&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Output: A development plan following dependency chains with modular boundaries.&lt;/p&gt;
    &lt;p&gt;Work phase by phase, section by section. Each request follows: "Can you implement [specific component]?" with focused objectives.&lt;/p&gt;
    &lt;p&gt;File size stays ≤150 lines. This constraint provides:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Smaller context windows for processing&lt;/item&gt;
      &lt;item&gt;Focused implementation over multi-function attempts&lt;/item&gt;
      &lt;item&gt;Easier sharing and debugging&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Implementation flow:&lt;/p&gt;
    &lt;code&gt;Request specific component → AI processes → Validate → Benchmark → Continue
&lt;/code&gt;
    &lt;p&gt;The benchmarking suite (built first) provides performance data throughout development. Feed this data back to the AI for optimization decisions based on measurements rather than guesswork.&lt;/p&gt;
    &lt;p&gt;Decision Processing: AI handles "Can you do A?" more reliably than "Can you do A, B, C, D, E, F, G, H?"&lt;/p&gt;
    &lt;p&gt;Context Management: Small files and bounded problems prevent the AI from juggling multiple concerns simultaneously.&lt;/p&gt;
    &lt;p&gt;Empirical Validation: Performance data replaces subjective assessment. Decisions come from measurable outcomes.&lt;/p&gt;
    &lt;p&gt;Systematic Constraints: Architectural checkpoints, file size limits, and dependency gates force consistent behavior.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Discord Bot Template - Production-ready bot foundation with plugin architecture, security, API management, and comprehensive testing. 46 files, all under 150 lines, with benchmarking suite and automated compliance checking. (View Project Structure)&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;PhiCode Runtime - Programming language runtime engine with transpilation, caching, security validation, and Rust acceleration. Complex system maintaining architectural discipline across 70+ modules. (View Project Structure)&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;PhiPipe - CI/CD regression detection system with statistical analysis, GitHub integration, and concurrent processing. Go-based service handling performance baselines and automated regression alerts. (View Project Structure)&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You can compare the methodology principles to the codebase structure to see how the approach translates to working code.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Configure AI with AI-PREFERENCES.md as custom instructions&lt;/item&gt;
      &lt;item&gt;Share METHODOLOGY.md for planning session&lt;/item&gt;
      &lt;item&gt;Collaborate on project structure and phases&lt;/item&gt;
      &lt;item&gt;Generate systematic development plan&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Build Phase 0 benchmarking infrastructure first&lt;/item&gt;
      &lt;item&gt;Work through phases sequentially&lt;/item&gt;
      &lt;item&gt;Implement one component per interaction&lt;/item&gt;
      &lt;item&gt;Run benchmarks and share results with AI&lt;/item&gt;
      &lt;item&gt;Validate architectural compliance continuously&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Performance regression detection&lt;/item&gt;
      &lt;item&gt;Architectural principle validation&lt;/item&gt;
      &lt;item&gt;Code duplication auditing&lt;/item&gt;
      &lt;item&gt;File size compliance checking&lt;/item&gt;
      &lt;item&gt;Dependency boundary verification&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Use the included project extraction tool systematically to generate structured snapshots of your codebase:&lt;/p&gt;
    &lt;code&gt;python scripts/project_extract.py&lt;/code&gt;
    &lt;p&gt;Configuration Options:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;SEPARATE_FILES = False&lt;/code&gt;: Single THE_PROJECT.md file (recommended for small codebases)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;SEPARATE_FILES = True&lt;/code&gt;: Multiple files per directory (recommended for large codebases and focused folder work)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;INCLUDE_PATHS&lt;/code&gt;: Directories and files to analyze&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;EXCLUDE_PATTERNS&lt;/code&gt;: Skip cache directories, build artifacts, and generated files&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Output:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Complete file contents with syntax highlighting&lt;/item&gt;
      &lt;item&gt;File line counts with architectural warnings (&lt;g-emoji&gt;⚠️&lt;/g-emoji&gt;for 140-150 lines,&lt;g-emoji&gt;‼️&lt;/g-emoji&gt;for &amp;gt;150 lines on code files)&lt;/item&gt;
      &lt;item&gt;Tree structure visualization&lt;/item&gt;
      &lt;item&gt;Ready-to-share&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;output examples can be found here&lt;/p&gt;
    &lt;p&gt;Use the tool to share a complete or partial project state with the AI system, track architectural compliance, and create focused development context.&lt;/p&gt;
    &lt;p&gt;AI Behavior: The methodology reduces architectural drift and context degradation compared to unstructured approaches. AI still needs occasional reminders about principles - this is normal.&lt;/p&gt;
    &lt;p&gt;Development Flow: Systematic planning tends to reduce debugging cycles. Focused implementation helps minimize feature bloat. Performance data supports optimization decisions.&lt;/p&gt;
    &lt;p&gt;Code Quality: Architectural consistency across components, measurable performance characteristics, maintainable structure as projects scale.&lt;/p&gt;
    &lt;head&gt;What problem led you to create this methodology?&lt;/head&gt;
    &lt;p&gt;I kept having to restate my preferences and architectural requirements to AI systems. It didn't matter which language or project I was working on - the AI would consistently produce either bloated monolithic code or underdeveloped implementations with issues throughout.&lt;/p&gt;
    &lt;p&gt;This led me to examine the meta-principles driving code quality and software architecture. I questioned whether pattern matching in AI models might be more effective when focused on underlying software principles rather than surface-level syntax. Since pattern matching is logic-driven and machines fundamentally operate on simple question-answer pairs, I realized that functions with multiple simultaneous questions were overwhelming the system.&lt;/p&gt;
    &lt;p&gt;The breakthrough came from understanding that everything ultimately transpiles to binary - a series of "can you do this? → yes/no" decisions. This insight shaped my approach: instead of issuing commands, ask focused questions in proper context. Rather than mentally managing complex setups alone, collaborate with AI to devise systematic plans.&lt;/p&gt;
    &lt;head&gt;How did you discover these specific constraints work?&lt;/head&gt;
    &lt;p&gt;Through extensive trial and error. AI systems will always tend to drift even under constraints, but they're significantly more accurate with structured boundaries than without them. You occasionally need to remind the AI of its role to prevent deviation - like managing a well-intentioned toddler that knows the rules but sometimes pushes boundaries trying to satisfy you.&lt;/p&gt;
    &lt;p&gt;These tools are far from perfect, but they're effective instruments for software development when properly constrained.&lt;/p&gt;
    &lt;head&gt;What failures or frustrations shaped this approach?&lt;/head&gt;
    &lt;p&gt;Maintenance hell was the primary driver. I grew tired of responses filled with excessive praise: "You have found the solution!", "You have redefined the laws of physics with your paradigm-shifting script!" This verbose fluff wastes time, tokens, and patience without contributing to productive development.&lt;/p&gt;
    &lt;p&gt;Instead of venting frustration on social media about AI being "just a dumb tool," I decided to find methods that actually work. My approach may not help everyone, but I hope it benefits those who share similar AI development frustrations.&lt;/p&gt;
    &lt;head&gt;How consistently do you follow your own methodology?&lt;/head&gt;
    &lt;p&gt;Since creating the documentation, I haven't deviated. Whenever I see the model producing more lines than my methodology restricts, I immediately interrupt generation with a flag: "&lt;/p&gt;
    &lt;head&gt;What happens when you deviate from it?&lt;/head&gt;
    &lt;p&gt;I become genuinely uncomfortable. Once I see things starting to degrade or become tangled, I compulsively need to organize and optimize. Deviation simply isn't an option anymore.&lt;/p&gt;
    &lt;head&gt;Which principles do you find hardest to maintain?&lt;/head&gt;
    &lt;p&gt;Not cursing at the AI when it drifts during complex algorithms! But seriously, it's a machine - it's not perfect, and neither are we.&lt;/p&gt;
    &lt;head&gt;When did you start using AI for programming?&lt;/head&gt;
    &lt;p&gt;In August 2024, I created a RuneLite theme pack, but one of the plugin overlays didn't match my custom layout. I opened a GitHub issue (creating my first GitHub account to do so) requesting a customization option. The response was: "It's not a priority - if you want it, build it yourself."&lt;/p&gt;
    &lt;p&gt;I used ChatGPT to guide me through forking RuneLite and creating a plugin. This experience sparked intense interest in underlying software principles rather than just syntax.&lt;/p&gt;
    &lt;head&gt;How has your approach evolved over time?&lt;/head&gt;
    &lt;p&gt;I view development like a book: syntax is the cover, logic is the content itself. Rather than learning syntax structures, I focused on core meta-principles - how software interacts, how logic flows, different algorithm types. I quickly realized everything reduces to the same foundation: question and answer sequences.&lt;/p&gt;
    &lt;p&gt;Large code structures are essentially chaotic meetings - one coordinator fielding questions and answers from multiple sources, trying to provide correct responses without mix-ups or misinterpretation. If this applies to human communication, it must apply to software principles.&lt;/p&gt;
    &lt;head&gt;What were your biggest mistakes with AI collaboration?&lt;/head&gt;
    &lt;p&gt;Expecting it to intuitively understand my requirements, provide perfect fixes, be completely honest, and act like a true expert. This was all elaborate roleplay that produced poor code. While fine for single-purpose scripts, it failed completely for scalable codebases.&lt;/p&gt;
    &lt;p&gt;I learned not to feed requirements and hope for the best. Instead, I needed to collaborate actively - create plans, ask for feedback on content clarity, and identify uncertainties. This gradual process taught me the AI's actual capabilities and most effective collaboration methods.&lt;/p&gt;
    &lt;head&gt;Why 150 lines exactly?&lt;/head&gt;
    &lt;p&gt;Multiple benefits: easy readability, clear understanding, modularity enforcement, architectural clarity, simple maintenance, component testing, optimal AI context retention, reusability, and KISS principle adherence.&lt;/p&gt;
    &lt;head&gt;How did you determine Phase 0 requirements?&lt;/head&gt;
    &lt;p&gt;From meta-principles of software: if it displays, it must run; if it runs, it can be measured; if it can be measured, it can be optimized; if it can be optimized, it can be reliable; if it can be reliable, it can be trusted.&lt;/p&gt;
    &lt;p&gt;Regardless of project type, anything requiring architecture needs these foundations. You must ensure changes don't negatively impact the entire system. A single line modification in a nested function might work perfectly but cause 300ms boot time regression for all users.&lt;/p&gt;
    &lt;p&gt;By testing during development, you catch inefficiencies early. Integration from the start means simply hooking up new components and running tests via command line - minimal time investment with actual value returned. I prefer validation and consistency throughout development rather than programming blind.&lt;/p&gt;
    &lt;head&gt;How do you handle projects that don't fit the methodology?&lt;/head&gt;
    &lt;p&gt;I adapt them to fit, or if truly impossible, I adjust the method itself. This is one methodology - I can generate countless variations as needed. Having spent 6700+ hours in AI interactions across multiple domains (not just software), I've developed strong system comprehension that enables creating adjusted methodologies on demand.&lt;/p&gt;
    &lt;head&gt;What's the learning curve for new users?&lt;/head&gt;
    &lt;p&gt;I cannot accurately answer this question. I've learned that I'm neurologically different - what I perceive as easy or obvious isn't always the case for others. This question is better addressed by someone who has actually used this methodology to determine its learning curve.&lt;/p&gt;
    &lt;head&gt;When shouldn't someone use this approach?&lt;/head&gt;
    &lt;p&gt;If you're not serious about projects, despise AI, dislike planning, don't care about modularization, or are just writing simple scripts. However, for anything requiring reliability, I believe this is currently the most effective method.&lt;/p&gt;
    &lt;p&gt;You still need programming fundamentals to use this methodology effectively - it's significantly more structured than ad-hoc approaches.&lt;/p&gt;
    &lt;code&gt;---
config:
  layout: elk
  theme: neo-dark
---
flowchart TD
    A["Project Idea"] --&amp;gt; B["🤖 Stage 1: AI Configuration&amp;lt;br&amp;gt;AI-PREFERENCES.md Custom Instructions"]
    B --&amp;gt; C["Stage 2: Collaborative Planning&amp;lt;br&amp;gt;Share METHODOLOGY.md"]
    C --&amp;gt; D["Define Scope &amp;amp; Completion Criteria"]
    D --&amp;gt; E["Identify Components &amp;amp; Dependencies"]
    E --&amp;gt; F["Structure Phases Based on Logic"]
    F --&amp;gt; G["Document Edge Cases - No Implementation"]
    G --&amp;gt; H["Generate Development Plan with Checkpoints"]
    H --&amp;gt; I["🔧 Stage 3: Phase 0 Infrastructure&amp;lt;br&amp;gt;MANDATORY BEFORE ANY CODE"]
    I --&amp;gt; J["Benchmarking Suite + Regression Detection"]
    J --&amp;gt; K["GitHub Workflows + Quality Gates"]
    K --&amp;gt; L["Test Suite Infrastructure + Stress Tests"]
    L --&amp;gt; M["Documentation Generation System"]
    M --&amp;gt; N["Centralized Configuration + Constants"]
    N --&amp;gt; O["📁 project_extract.py Setup&amp;lt;br&amp;gt;Single/Multiple File Config"]
    O --&amp;gt; P["Initial Project State Extraction"]
    P --&amp;gt; Q["Share Context with AI"]
    Q --&amp;gt; R["Start Development Session&amp;lt;br&amp;gt;Pre-Session Compliance Audit"]
    R --&amp;gt; S{"Next Phase Available?"}
    S -- No --&amp;gt; Z["Project Complete"]
    S -- Yes --&amp;gt; T["Select Single Component&amp;lt;br&amp;gt;Target ≤150 Lines"]
    T --&amp;gt; U{"Multi-Language Required?"}
    U -- Yes --&amp;gt; V["Document Performance Justification&amp;lt;br&amp;gt;Measurable Benefits Required"]
    V --&amp;gt; W["Request AI Implementation"]
    U -- No --&amp;gt; W
    W --&amp;gt; X{"AI Uncertainty Flag?"}
    X -- ⚠️ Yes --&amp;gt; Y["Request Clarification&amp;lt;br&amp;gt;Provide Additional Context"]
    Y --&amp;gt; W
    X -- Clear --&amp;gt; AA["Stage 3: Systematic Implementation"]
    AA --&amp;gt; BB{"Automated Size Check&amp;lt;br&amp;gt;validate-phase Script"}
    BB -- &amp;gt;150 Lines --&amp;gt; CC["AUTOMATED: Split Required&amp;lt;br&amp;gt;Maintain SoC Boundaries"]
    CC --&amp;gt; W
    BB -- ≤150 Lines --&amp;gt; DD["Incremental Compliance Check&amp;lt;br&amp;gt;DRY/KISS/SoC Validation"]
    DD --&amp;gt; EE{"Architectural Principles Pass?"}
    EE -- No --&amp;gt; FF["Flag Specific Violations&amp;lt;br&amp;gt;Reference Methodology"]
    FF --&amp;gt; W
    EE -- Yes --&amp;gt; GG["📊 Stage 4: Data-Driven Iteration&amp;lt;br&amp;gt;Run Benchmark Suite + Save Baselines"]
    GG --&amp;gt; HH["Compare Against Historical Timeline&amp;lt;br&amp;gt;Regression Analysis"]
    HH --&amp;gt; II{"Performance Gate Pass?"}
    II -- Regression Detected --&amp;gt; JJ["Share Performance Data&amp;lt;br&amp;gt;Request Optimization"]
    JJ --&amp;gt; W
    II -- Pass --&amp;gt; KK["Integration Test&amp;lt;br&amp;gt;Verify System Boundaries"]
    KK --&amp;gt; LL{"Cross-Platform Validation?"}
    LL -- Fail --&amp;gt; MM["Address Deployment Constraints&amp;lt;br&amp;gt;Real-World Considerations"]
    MM --&amp;gt; W
    LL -- Pass --&amp;gt; NN{"More Components in Phase?"}
    NN -- Yes --&amp;gt; T
    NN -- No --&amp;gt; OO["🚦 Phase Quality Gate&amp;lt;br&amp;gt;Full Architecture Audit"]
    OO --&amp;gt; PP["Production Simulation&amp;lt;br&amp;gt;Resource Cleanup + Load Test"]
    PP --&amp;gt; QQ{"All Quality Gates Pass?"}
    QQ -- No --&amp;gt; RR["Document Failed Checkpoints&amp;lt;br&amp;gt;Block Phase Progression"]
    RR --&amp;gt; T
    QQ -- Yes --&amp;gt; SS["End Development Session&amp;lt;br&amp;gt;Technical Debt Assessment"]
    SS --&amp;gt; TT["📁 Extract Updated Project State&amp;lt;br&amp;gt;Generate Fresh Context"]
    TT --&amp;gt; UU["Phase Results Documentation&amp;lt;br&amp;gt;Metrics + Outcomes + Timeline"]
    UU --&amp;gt; VV["Update Development Plan&amp;lt;br&amp;gt;Mark Phase Complete"]
    VV --&amp;gt; S
    WW["validate-phase&amp;lt;br&amp;gt;AUTOMATED: File Size + Structure"] -.-&amp;gt; BB
    XX["dry-audit&amp;lt;br&amp;gt;AUTOMATED: Cross-Module Duplication"] -.-&amp;gt; DD
    YY["CI/CD Workflows&amp;lt;br&amp;gt;AUTOMATED: Merge Gates"] -.-&amp;gt; GG
    ZZ["Performance Timeline&amp;lt;br&amp;gt;AUTOMATED: Historical Data"] -.-&amp;gt; HH
    AAA["Dependency Validator&amp;lt;br&amp;gt;AUTOMATED: Import Boundaries"] -.-&amp;gt; KK
    BBB["Architecture Auditor&amp;lt;br&amp;gt;AUTOMATED: SoC Compliance"] -.-&amp;gt; OO
    WW -. BUILD FAILURE .-&amp;gt; CC
    YY -. MERGE BLOCKED .-&amp;gt; JJ
    BBB -. AUDIT FAILURE .-&amp;gt; RR
    style Y fill:#7d5f00
    style CC fill:#770000
    style FF fill:#7d5f00
    style JJ fill:#7d5f00
    style MM fill:#770000
    style RR fill:#770000
&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45148180</guid></item><item><title>Qwen3 30B A3B Hits 13 token/s on 4xRaspberry Pi 5</title><link>https://github.com/b4rtaz/distributed-llama/discussions/255</link><description>&lt;doc fingerprint="e5f2f2ebfa4d7c22"&gt;
  &lt;main&gt;
    &lt;p&gt;-&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;head&gt;qwen3_30b.mov&lt;/head&gt;
          &lt;head&gt;Setup&lt;/head&gt;
          &lt;p&gt;Device: &lt;/p&gt;
          &lt;head&gt;Benchmark&lt;/head&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Beta Was this translation helpful? Give feedback.&lt;/p&gt;
    &lt;head rend="h2"&gt;Replies: 0 comments&lt;/head&gt;
    &lt;p&gt; Sign up for free to join this conversation on GitHub. Already have an account? Sign in to comment &lt;/p&gt;
    &lt;p&gt;-&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;head&gt;qwen3_30b.mov&lt;/head&gt;
          &lt;head&gt;Setup&lt;/head&gt;
          &lt;p&gt;Device: &lt;/p&gt;
          &lt;head&gt;Benchmark&lt;/head&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Beta Was this translation helpful? Give feedback.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45148237</guid></item><item><title>We Hacked Burger King: How Auth Bypass Led to Drive-Thru Audio Surveillance</title><link>https://bobdahacker.com/blog/rbi-hacked-drive-thrus/</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45148944</guid></item><item><title>996</title><link>https://lucumr.pocoo.org/2025/9/4/996/</link><description>&lt;doc fingerprint="2744b1079b2c7957"&gt;
  &lt;main&gt;
    &lt;p&gt;written on September 04, 2025&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“Amazing salary, hackerhouse in SF, crazy equity. 996. Our mission is OSS.” — Gregor Zunic&lt;/p&gt;
      &lt;p&gt;“The current vibe is no drinking, no drugs, 9-9-6, […].” — Daksh Gupta&lt;/p&gt;
      &lt;p&gt;“The truth is, China’s really doing ‘007’ now—midnight to midnight, seven days a week […] if you want to build a $10 billion company, you have to work seven days a week.” — Harry Stebbings&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;I love work. I love working late nights, hacking on things. This week I didn’t go to sleep before midnight once. And yet…&lt;/p&gt;
    &lt;p&gt;I also love my wife and kids. I love long walks, contemplating life over good coffee, and deep, meaningful conversations. None of this would be possible if my life was defined by 12 hour days, six days a week. More importantly, a successful company is not a sprint, it’s a marathon.&lt;/p&gt;
    &lt;p&gt;And this is when this is your own company! When you devote 72 hours a week to someone else’s startup, you need to really think about that arrangement a few times. I find it highly irresponsible for a founder to promote that model. As a founder, you are not an employee, and your risks and leverage are fundamentally different.&lt;/p&gt;
    &lt;p&gt;I will always advocate for putting the time in because it is what brought me happiness. Intensity, and giving a shit about what I’m doing, will always matter to me. But you don’t measure that by the energy you put in, or the hours you’re sitting in the office, but the output you produce. Burning out on twelve-hour days, six days a week, has no prize at the end. It’s unsustainable, it shouldn’t be the standard and it sure as hell should not be seen as a positive sign of a company.&lt;/p&gt;
    &lt;p&gt;I’ve pulled many all-nighters, and I’ve enjoyed them. I still do. But they’re enjoyable in the right context, for the right reasons, and when that is a completely personal choice, not the basis of company culture.&lt;/p&gt;
    &lt;p&gt;And that all-nighter? It comes with a fucked up and unproductive morning the day after.&lt;/p&gt;
    &lt;p&gt;When someone promotes a 996 work culture, we should push back.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45149049</guid></item><item><title>DuckDuckGo founder: AI surveillance should be banned</title><link>https://gabrielweinberg.com/p/ai-surveillance-should-be-banned</link><description>&lt;doc fingerprint="b608b3dea7679795"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;AI surveillance should be banned while there is still time.&lt;/head&gt;
    &lt;p&gt;All the same privacy harms with online tracking are also present with AI, but worse.&lt;/p&gt;
    &lt;p&gt;While chatbot conversations resemble longer search queries, chatbot privacy harms have the potential to be significantly worse because the inference potential is dramatically greater. Longer input invites more personal information to be provided, and people are starting to bare their souls to chatbots. The conversational format can make it feel like you’re talking to a friend, a professional, or even a therapist. While search queries reveal interests and personal problems, AI conversations take their specificity to another level and, in addition, reveal thought processes and communication styles, creating a much more comprehensive profile of your personality.&lt;/p&gt;
    &lt;p&gt;This richer personal information can be more thoroughly exploited for manipulation, both commercially and ideologically, for example, through behavioral chatbot advertising and models designed (or themselves manipulated through SEO or hidden system prompts) to nudge you towards a political position or product. Chatbots have already been found to be more persuasive than humans and have caused people to go into delusional spirals as a result. I suspect we’re just scratching the surface, since they can become significantly more attuned to your particular persuasive triggers through chatbot memory features, where they train and fine-tune based on your past conversations, making the influence much more subtle. Instead of an annoying and obvious ad following you around everywhere, you can have a seemingly convincing argument, tailored to your personal style, with an improperly sourced “fact” that you’re unlikely to fact-check or a subtle product recommendation you’re likely to heed.&lt;/p&gt;
    &lt;p&gt;That is, all the privacy debates surrounding Google search results from the past two decades apply one-for-one to AI chats, but to an even greater degree. That’s why we (at DuckDuckGo) started offering Duck.ai for protected chatbot conversations and optional, anonymous AI-assisted answers in our private search engine. In doing so, we’re demonstrating that privacy-respecting AI services are feasible. But unfortunately, such protected chats are not yet standard practice, and privacy mishaps are mounting quickly. Grok leaked hundreds of thousands of chatbot conversations that users thought were private. Perplexity’s AI agent was shown to be vulnerable to hackers who could slurp up your personal information. Open AI is openly talking about their vision for a “super assistant” that tracks everything you do and say (including offline). And Anthropic is going to start training on your chatbot conversations by default (previously the default was off). I collected these from just the past few weeks!&lt;/p&gt;
    &lt;p&gt;It would therefore be ideal if Congress could act quickly to ensure that protected chats become the rule rather than the exception. And yet, I’m not holding my breath because it’s 2025 and the U.S. still doesn’t have a general online privacy law, let alone privacy enshrined in the Constitution as a fundamental right, as it should be. However, there does appear to be an opening right now for AI-specific federal legislation, despite the misguided attempts to ban state AI legislation.&lt;/p&gt;
    &lt;p&gt;Time is running out because every day that passes further entrenches bad privacy practices. Congress must move before history completely repeats itself and everything that happened with online tracking happens again with AI tracking. AI surveillance should be banned while there is still time. No matter what happens, though, we will still be here, offering protected services, including optional AI services, to consumers who want to reap the productivity benefits of online tools without the privacy harms.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45149281</guid></item><item><title>Oldest Recorded Transaction</title><link>https://avi.im/blag/2025/oldest-txn/</link><description>&lt;doc fingerprint="a9cfeaf676b2dbc5"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Oldest recorded transaction&lt;/head&gt;
    &lt;p&gt;The other day I posted a tweet with this image which I thought was funny:&lt;/p&gt;
    &lt;p&gt;This is the oldest transaction database from 3100 BC - recording accounts of malt and barley groats. Considering this thing survived 5000 years (holy shit!) with zero downtime and has stronger durability guarantees than most databases today.&lt;/p&gt;
    &lt;p&gt;I call it rock solid durability.&lt;/p&gt;
    &lt;p&gt;This got me thinking, can I insert this date in today’s database? What is the oldest timestamp a database can support?&lt;/p&gt;
    &lt;p&gt;So I checked the top three databases: MySQL, Postgres, and SQLite:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;MySQL&lt;/cell&gt;
        &lt;cell&gt;1000 AD&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Postgres&lt;/cell&gt;
        &lt;cell&gt;4713 BC&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;SQLite&lt;/cell&gt;
        &lt;cell&gt;4713 BC&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;&lt;lb/&gt;Too bad you cannot use MySQL for this. Postgres and SQLite support the Julian calendar and the lowest date is Jan 01, 4713 BC:&lt;/p&gt;
    &lt;code&gt;sales=# INSERT INTO orders VALUES ('4713-01-01 BC'::date);
INSERT 0 1
sales=# SELECT * FROM orders;
   timestamp
---------------
 4713-01-01 BC
(1 row)
sales=# INSERT INTO orders VALUES ('4714-01-01 BC'::date);
ERROR:  date out of range: "4714-01-01 BC"
&lt;/code&gt;
    &lt;p&gt;I wonder how people store dates older than this. Maybe if I’m a British Museum manager, and I want to keep &lt;del&gt;theft&lt;/del&gt; inventory details. How do I do it? As an epoch? Store it as text? Use some custom system? How do I get it to support all the custom operations that a typical &lt;code&gt;TIMESTAMP&lt;/code&gt; supports?&lt;/p&gt;
    &lt;p&gt;Thanks to aku, happy_shady, Mr. Bhat, and General Bruh for reading an early draft of this post.&lt;/p&gt;
    &lt;p&gt;1. Source of the image: Sumer civilization&lt;lb/&gt;2. I found this from the talk 1000x: The Power of an Interface for Performance by Joran Dirk Greef, CEO of TigerBeetle, timestamped @ 38:10.&lt;lb/&gt;3. The talk has other bangers too, like this or this.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45149626</guid></item></channel></rss>