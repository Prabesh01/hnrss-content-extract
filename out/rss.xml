<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Wed, 01 Oct 2025 18:14:08 +0000</lastBuildDate><item><title>Uxntal: A programming language for the Uxn virtual machine</title><link>https://wiki.xxiivv.com/site/uxntal.html</link><description>&lt;doc fingerprint="7aa1d890ac86bad4"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;A programming language for the Uxn virtual machine.&lt;/head&gt;
    &lt;p&gt;Uxn programs are written in a concatenative flavor of assembly designed especially to map to the idiosyncrasies of this strange little computer. &lt;lb/&gt;See the Quick Setup to get started.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Cheatsheet, by Weeble.&lt;/item&gt;
      &lt;item&gt;Zine, by Clemens Scott.&lt;/item&gt;
      &lt;item&gt;Tutorial, by Compudanzas&lt;/item&gt;
      &lt;item&gt;Manual(7), by Eiríkr Åsheim.&lt;/item&gt;
      &lt;item&gt;BNF Notation, by Jack Leightcap.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;Firstly, there are no precedence rules, the calculations are merely performed in the sequence in which they are presented. The order with which elements come off the stack is known as Last In, First Out. In the stack a b c, the c item was the last to be added, and will be the first to be removed.&lt;/p&gt;
    &lt;quote&gt;#01 DUP ADD #03 MUL program&lt;/quote&gt;
    &lt;quote&gt;01 01 02 03 06 stack 01 02&lt;/quote&gt;
    &lt;p&gt;Uxntal numbers are expressed in hexadecimal. Which means that counting goes like: one, two, three, four, five, six, seven, eight, nine, ha, be, ce, de, he, fe, ten! It takes some getting used to, but don't worry, you'll get the hang of it. Now, without further ado..&lt;/p&gt;
    &lt;head rend="h3"&gt;Let's dive into it!&lt;/head&gt;
    &lt;p&gt;The following example program prints the phrase "Hello World!" by pushing the address to a label on the stack, and iterating through each letter found at that address with a loop that increments the pointer until it reaches end of the phrase, at which point, the stack is emptied and the evaluation halts.&lt;/p&gt;
    &lt;p&gt;A word starting with @ defines a label, and one starting with ; pushes the absolute address of a label to the stack. With that in mind, ;text pushes the two bytes equal to the address of the @text label to the stack. In the interpreter above, press "step" to walk through each step of the evaluation.&lt;/p&gt;
    &lt;p&gt;Next, we define a new label named @while, to mark the start of the loop that will print each character stored at the text label.&lt;/p&gt;
    &lt;p&gt;The LDAk opcode loads a byte at the address currently at the top of the stack, in this case, the ascii letter H(48). The k-mode indicates that the operator will not consume the address.&lt;/p&gt;
    &lt;p&gt;The DUP opcode makes a copy of the letter. The ?{ pops that copy from the stack, and if it is not zero, we jump to the corresponding }, which is an anonymous label(λ00).&lt;/p&gt;
    &lt;quote&gt;( Disassembly of the example above: |addr bytecode Uxntal ----- -------- ------- ) |0100 a0 01 12 ( ;text ) @while |0103 94 ( LDAk ) |0104 06 ( DUP ) |0105 20 00 03 ( ?λ00 ) |0108 02 ( POP ) |0109 22 ( POP2 ) |010a 00 ( BRK )&lt;/quote&gt;
    &lt;p&gt;The #18 word pushes a number to the stack, which maps to the Console/write port(#18), followed by the DEO opcode that pops both bytes(the letter and the port) and sends the letter to that device port, telling the Console to print it, leaving only the address on top of the stack.&lt;/p&gt;
    &lt;p&gt;The INC2 opcode increments the address, moving the text pointer to the next letter. The 2-mode is used because address addresses are always made of two bytes.&lt;/p&gt;
    &lt;quote&gt;@λ00 |010b 80 18 ( #18 ) |010d 17 ( DEO ) |010e 21 ( INC2 ) |010f 40 ff f1 ( !while )&lt;/quote&gt;
    &lt;p&gt;Finally, with !while we jump back to the @while label, and repeat the loop until there are no more letters to load. When that happens, we POP to remove the duplicated letter, and POP2 to remove the address on the stack to keep the stack clean at the end of the evaluation.&lt;/p&gt;
    &lt;quote&gt;@text |0112 48 65 6c ( H e l ) |0115 6c 6f 20 ( l o ) |0117 57 6f 72 ( W o r ) |011a 6c 64 21 ( l d ! )&lt;/quote&gt;
    &lt;head rend="h3"&gt;Summary&lt;/head&gt;
    &lt;p&gt;Comments are within parentheses, numbers are lowercase hexadecimal shorts or bytes, and opcodes are uppercase reserved words with lowercase modes. Addressing is done by one of six runes. Valid label and macro names are unique non-numeric, non-opcode and non-runic.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="8"&gt;
        &lt;cell role="head"&gt;Padding Runes&lt;/cell&gt;
        &lt;cell role="head"&gt;Number Rune&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;
          &lt;code&gt;|&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;absolute&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;$&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;relative&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;#&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;literal number&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Label Runes&lt;/cell&gt;
        &lt;cell&gt;Ascii Runes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;
          &lt;code&gt;@&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;parent&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;&amp;amp;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;child&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;"&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;raw ascii&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Addressing Runes&lt;/cell&gt;
        &lt;cell&gt;Wrapping Runes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;
          &lt;code&gt;,&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;literal relative&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;_&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;raw relative&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;( )&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;comment&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;
          &lt;code&gt;.&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;literal zero-page&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;-&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;raw zero-page&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;{ }&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;anonymous&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;
          &lt;code&gt;;&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;literal absolute&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;=&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;raw absolute&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;[ ]&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;ignored&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Immediate Runes&lt;/cell&gt;
        &lt;cell&gt;Pre-processor Runes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;!&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;jmi&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;?&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;jci&lt;/cell&gt;
        &lt;cell&gt;
          &lt;code&gt;% { }&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;macro&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h2"&gt;Uxntal Stacks&lt;/head&gt;
    &lt;p&gt;All programming in Uxntal is done by manipulating the working stack, and return stack, each stack contains 256 bytes. Here are some stack primitives assuming the initial state of the stack is &lt;code&gt;a b c&lt;/code&gt; where
&lt;code&gt;c&lt;/code&gt; is the top of the stack: &lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;POP&lt;/cell&gt;
        &lt;cell&gt;a b&lt;/cell&gt;
        &lt;cell&gt;Discard top item.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;NIP&lt;/cell&gt;
        &lt;cell&gt;a c&lt;/cell&gt;
        &lt;cell&gt;Discard second item.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;SWP&lt;/cell&gt;
        &lt;cell&gt;a c b&lt;/cell&gt;
        &lt;cell&gt;Move second item to top.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;ROT&lt;/cell&gt;
        &lt;cell&gt;b c a&lt;/cell&gt;
        &lt;cell&gt;Move third item to top.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;DUP&lt;/cell&gt;
        &lt;cell&gt;a b c c&lt;/cell&gt;
        &lt;cell&gt;Copy top item.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;OVR&lt;/cell&gt;
        &lt;cell&gt;a b c b&lt;/cell&gt;
        &lt;cell&gt;Copy second item to top.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;A byte is a number between 0-255(256 values), a short is a number between 0-65535(65536 values) made of two bytes, each byte in a short can be manipulated individually:&lt;/p&gt;
    &lt;quote&gt;#0a #0b POP 0a #12 #3456 NIP 12 56 #1234 DUP 12 34 34&lt;/quote&gt;
    &lt;p&gt;The two stacks are circular, to pop an empty stack does not trigger an error, but merely means to set the stack pointer to 255. There are no invalid programs, any sequence of bytes is a potential Uxn program. Values are moved between stacks with the STH opcode.&lt;/p&gt;
    &lt;quote&gt;WST 00 00 00 00 00 00|12 34 &amp;lt;02 RST 00 00 00 00 00 00 00|56 &amp;lt;01&lt;/quote&gt;
    &lt;p&gt;The program above contains 12 and 34 on the working stack, and 56 on the return stack. The stack content can always be printed by sending a non-null byte to the System/debug port.&lt;/p&gt;
    &lt;head rend="h2"&gt;Uxntal Notation&lt;/head&gt;
    &lt;p&gt;The stack-effect notation follows that of the Forth programming language, where each item on the left of the -- spacer is the state of the stack before, and to the right, the state of the stack after. On each side, the right-most item is the last to the pushed and the first to be removed:&lt;/p&gt;
    &lt;quote&gt;@routine ( a b -- a b res ) ADDk JMP2r&lt;/quote&gt;
    &lt;p&gt;Single items are a byte long, and shorts are indicated with a * suffix, the order in which they appear is the order of the stack with the top item to the right:&lt;/p&gt;
    &lt;quote&gt;@routine ( a b* -- b* a ) ROT JMP2r&lt;/quote&gt;
    &lt;p&gt;The dot notation is used to indicate that stack-effects to the right of the dot are happening on the return stack:&lt;/p&gt;
    &lt;quote&gt;@routine ( a . b -- c ) STHr ADD JMP2r&lt;/quote&gt;
    &lt;p&gt;If a routine is a vector, it uses the arrow notation.&lt;/p&gt;
    &lt;quote&gt;@on-event ( -&amp;gt; ) BRK&lt;/quote&gt;
    &lt;p&gt;This notation also holds for macros as well, the notation goes before the macro's body:&lt;/p&gt;
    &lt;quote&gt;%macro ( a b -- res ) { DIVk MUL SUB }&lt;/quote&gt;
    &lt;p&gt;The stack notation is merely present to help readability but can be altogether disregarded without impacting the program.&lt;/p&gt;
    &lt;head rend="h3"&gt;Comments&lt;/head&gt;
    &lt;p&gt;A comment starts with any token beginning with opened parenthesis, and ends at its corresponding closed parenthesis. Comments may be nested, the enclosed comments parentheses must be whitespace separated on both sides.&lt;/p&gt;
    &lt;quote&gt;( ( nested ) ) ( 1+2*(4/3) )&lt;/quote&gt;
    &lt;p&gt;Outermost comments may be named, which means that sometimes the open parenthesis is immediately followed by a word holding some meaning to external tools.&lt;/p&gt;
    &lt;quote&gt;(doc This is a docstring. )&lt;/quote&gt;
    &lt;p&gt;Special comments are sometimes used to group routines together, they are similar to the &lt;code&gt;pragma mark&lt;/code&gt; notation:&lt;/p&gt;
    &lt;quote&gt;( @|Group )&lt;/quote&gt;
    &lt;head rend="h3"&gt;Brackets&lt;/head&gt;
    &lt;p&gt;The square brackets do nothing, they are used as an aid for readability and formatting, they are useful for making explicit certain things like grouping behaviors, joining literals or indicating lookup tables.&lt;/p&gt;
    &lt;quote&gt;@routine ( -- ) [ LIT2 20 -Console/write ] DEO JMP2r %min ( a b -- r ) { GTHk [ JMP SWP ] POP } @sprite [ 00 66 ff ff ff 7e 3c 18 ]&lt;/quote&gt;
    &lt;head rend="h2"&gt;Uxntal Numbers&lt;/head&gt;
    &lt;p&gt;Uxntal uses only lowercase unsigned hexadecimal numbers of either 2 or 4 characters in length. There are two types of numbers:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;A Literal Hex, like #ab, denotes a number that will be pushed on the stack when evaluated, it is made of a LIT opcode that matches its length, followed by a Raw Hex number.&lt;/item&gt;
      &lt;item&gt;A Raw Hex, like aa, is the standard textual encoding of data in a program, generally speaking these are more often loaded than evaluated. It can be anything, an opcode, an ascii byte, an address, part of a sprite.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;
#12 #34 LIT2 5678 ADD2 68 ac
&lt;/code&gt;
    &lt;head rend="h2"&gt;Uxntal Opcodes&lt;/head&gt;
    &lt;p&gt;Uxn has 32 standard opcodes and 4 immediate opcodes. In the table below, the pipe(|) character indicates an effect on the return stack, the &lt;code&gt;pc is the program counter, a &lt;/code&gt;&lt;code&gt;value8&lt;/code&gt; indicates a byte
length, a &lt;code&gt;value*&lt;/code&gt; indicates a short length, an unspecified length follows the short mode and a &lt;code&gt;[value]&lt;/code&gt; is read from memory.&lt;/p&gt;
    &lt;quote&gt;Stack I Logic Memory I Arithmetic BRK -- EQU a b -- a=b LDZ abs8 -- [abs8] ADD a b -- a+b INC a -- a+1 NEQ a b -- a≠b STZ val abs8 -- SUB a b -- a-b POP a -- GTH a b -- a&amp;gt;b LDR rel8 -- [rel8] MUL a b -- a×b NIP a b -- b LTH a b -- a&amp;lt;b STR val rel8 -- DIV a b -- a÷b Stack II Stash Memory II Bitwise SWP a b -- b a JMP addr -- LDA abs* -- [abs*] AND a b -- a&amp;amp;b ROT a b c -- b c a JCN cond8 addr -- STA val abs* -- ORA a b -- a|b DUP a -- a a JSR addr -- | pc* DEI dev -- [dev] EOR a b -- a^b OVR a b -- a b a STH a -- | a DEO val dev -- SFT a sft8 -- res LIT -- [pc*] JCI cond8 -- JMI -- JSI -- | pc*&lt;/quote&gt;
    &lt;head rend="h3"&gt;Modes&lt;/head&gt;
    &lt;p&gt;An opcode is any name in which the 3 first characters are found in the opcode table, followed by any combination of 2, k and r. Each opcode has 3 possible modes, which can combined:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The short mode 2 operates on shorts, instead of bytes.&lt;/item&gt;
      &lt;item&gt;The keep mode k operates without consuming items.&lt;/item&gt;
      &lt;item&gt;The return mode r operates on the return stack.&lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row span="8"&gt;
        &lt;cell role="head"&gt;INC2r&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;k&lt;/cell&gt;
        &lt;cell&gt;r&lt;/cell&gt;
        &lt;cell&gt;2&lt;/cell&gt;
        &lt;cell&gt;opcode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;By default, operators consume bytes from the working stack, notice how in the following example only the last two bytes &lt;code&gt;#45&lt;/code&gt; and &lt;code&gt;#67&lt;/code&gt;
are added, even if there are two shorts on the stack.&lt;/p&gt;
    &lt;code&gt;#1234 #4567 ADD12 34 ac&lt;/code&gt;
    &lt;p&gt;The short mode consumes two bytes from the stack. In the case of jump opcodes, the short-mode operation jumps to an absolute address in memory. For the memory accessing opcodes, the short mode operation indicates the size of the data to read and write.&lt;/p&gt;
    &lt;code&gt;#1234 #4567 ADD2 57 9b&lt;/code&gt;
    &lt;p&gt;The keep mode does not consume items from the stack, and pushes the result on top. Every opcode begins by popping values from the stack before operating on them. This mode keeps a copy of the stack pointer to recover after the popping stage.&lt;/p&gt;
    &lt;code&gt;#1234 #4567 ADD2k 12 34 45 67 57 9b&lt;/code&gt;
    &lt;p&gt;The return mode swaps the stacks on which an opcode operates. Under this mode, a return address will be pushed to the working stack, and stashing will take from the return stack. For that reason, there is no return opcode. For example, the &lt;code&gt;JSR&lt;/code&gt; opcode pushes the
return address onto the return stack, and &lt;code&gt;JMP2r&lt;/code&gt; jumps to that
address.&lt;/p&gt;
    &lt;code&gt;LITr 12 #34 STH ADDr STHr 46&lt;/code&gt;
    &lt;head rend="h3"&gt;Immediate opcodes&lt;/head&gt;
    &lt;p&gt;Immediate opcodes are operators that do not take items from the stack, but read values stored immediately after the opcode in the program's memory. Uxntal has 4 immediate opcodes:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The literal LIT opcode, also written as #.&lt;/item&gt;
      &lt;item&gt;The jump !routine.&lt;/item&gt;
      &lt;item&gt;The conditional jump ?routine.&lt;/item&gt;
      &lt;item&gt;The subroutine routine.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The immediate jump opcodes are slightly faster than their standard opcode counterparts, but do not have modes and cannot be used to do pointer arithmetic. The address value of the immediate opcodes are stored in memory as relative shorts, enabling routines making use of these opcodes to be moved around in the program's memory.&lt;/p&gt;
    &lt;quote&gt;@on-reset ( -&amp;gt; ) #0007 fact BRK @fact ( n* -- res* ) ORAk ?{ POP2 #0001 JMP2r } DUP2 #0001 SUB2 fact MUL2 JMP2r&lt;/quote&gt;
    &lt;p&gt;To learn more about each opcode, see the Opcode Reference.&lt;/p&gt;
    &lt;head rend="h2"&gt;Uxntal Labels&lt;/head&gt;
    &lt;p&gt;A label is a non-numeric, non-opcode, and non-runic symbol that correspond to a number between 0 and 65536. A label name is made of two parts, a scope and a sublabel. Sublabels can be added to a scope with the &amp;amp;name rune, or by writing the full name, like @scope/name. Note that a labels like bed, add and cafe are considered numeric.&lt;/p&gt;
    &lt;p&gt;Functions are simply labels that will be jumped to, and returned from.&lt;/p&gt;
    &lt;quote&gt;@func ( a b -- c ) &amp;amp;loop INC GTHk ?&amp;amp;loop ADD JMP2r&lt;/quote&gt;
    &lt;p&gt;Constants are labels that hold a specific value through the entire execution of the program. They allow to assign a name to a number, making the code more readable.&lt;/p&gt;
    &lt;quote&gt;|1400 @limit&lt;/quote&gt;
    &lt;p&gt;Enums are labels with padded members of equal sizes that can be used as constants in a program, they typically begin by rolling back the program address with |00:&lt;/p&gt;
    &lt;quote&gt;|00 @Suit &amp;amp;clubs $1 &amp;amp;diamonds $1 &amp;amp;hearts $1 &amp;amp;spades&lt;/quote&gt;
    &lt;p&gt;Structs are labels with padded members of different sizes, that maps on a data-structure, they typically space the different members with $1:&lt;/p&gt;
    &lt;quote&gt;|00 @Person &amp;amp;name $2 &amp;amp;age $1 &amp;amp;height $2&lt;/quote&gt;
    &lt;p&gt;Labels can also be used with the padding runes to define a global length. For example, if one needs to specify a length of 0x30 for multiple members of a struct, a value can be specified as follow:&lt;/p&gt;
    &lt;quote&gt;|30 @length |00 @Struct &amp;amp;field $length&lt;/quote&gt;
    &lt;head rend="h3"&gt;Scope&lt;/head&gt;
    &lt;p&gt;Uxntal objects are defined statically and allow for the enclosed methods to access encapsulated local &amp;amp;members. The example below contains an object with the method set-color, accessible from outside the scope as pen/set-color.&lt;/p&gt;
    &lt;quote&gt;@pen &amp;amp;position &amp;amp;x $2 &amp;amp;y $2 &amp;amp;color $1 &amp;amp;set-color ( color -- ) ,/color STR JMP2r&lt;/quote&gt;
    &lt;p&gt;New methods and members can extend an existing scope from anywhere by creating a label with the scope name followed by a slash and the name of the extension. The &amp;amp;labels declared within the extension have the same access to local labels as the rest of the object.&lt;/p&gt;
    &lt;quote&gt;@pen/get-position ( -- x* y* ) ,/x LDR2 ,/y LDR2 JMP2r&lt;/quote&gt;
    &lt;p&gt;When calling local methods the scope's name can be omitted, starting at the slash, like /method:&lt;/p&gt;
    &lt;quote&gt;@pen/paint ( -- ) /get-position canvas/draw-line-to JMP2r&lt;/quote&gt;
    &lt;head rend="h3"&gt;Addressing&lt;/head&gt;
    &lt;p&gt;A labels is a way of assigning a name to a number. There are six ways to get the number corresponding to that label. Literal addressing prefixes the label with a &lt;code&gt;LIT&lt;/code&gt; for Relative and Zero-Page addressing, and
&lt;code&gt;LIT2&lt;/code&gt; for absolute addressing.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Literal Relative, like ,label, pushes a relative distance byte to the label.&lt;/item&gt;
      &lt;item&gt;Literal Zero-Page, like .label, pushes an absolute address byte to the label.&lt;/item&gt;
      &lt;item&gt;Literal Absolute, like ;label, pushes an absolute address short to the label.&lt;/item&gt;
      &lt;item&gt;Raw Relative, like _label, writes a relative distance byte to the label.&lt;/item&gt;
      &lt;item&gt;Raw Zero-Page, like -label, writes an absolute address byte to the label.&lt;/item&gt;
      &lt;item&gt;Raw Absolute, like =label, writes an absolute address short to the label.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Raw addressing is used for building data-structures and more advanced programs. A relatively common usage of raw runes is to create literals directly into the return stack:&lt;/p&gt;
    &lt;code&gt;
[ LIT2r 08 -label ] LDZr ADDr | [.label]+8
&lt;/code&gt;
    &lt;head rend="h3"&gt;Anonymous Labels&lt;/head&gt;
    &lt;p&gt;Anonymous labels are designated with a curly bracket that points to its associated closing bracket, and can be nested. Under the hood, the opening bracket assembles to the address of the closing bracket which allows the destination address to be used like any other label such as a JCI ?{, a JMI, !{ or a plain literal ;{. Here are some example data-structures:&lt;/p&gt;
    &lt;quote&gt;@counted-string _{ "foo 20 "bar } @linked-list ={ ={ "A } ={ "B ={ "C } } }&lt;/quote&gt;
    &lt;head rend="h4"&gt;Unless Blocks&lt;/head&gt;
    &lt;p&gt;It is important to notice that in the case of a conditional jump, the lambda's content is jumped over when the flag byte is true.&lt;/p&gt;
    &lt;quote&gt;[ LIT2 &amp;amp;last $1 -Mouse/state ] DEI DUP ,&amp;amp;last STR DUP2 #0001 NEQ2 ?{ ( on down ) } DUP2 #0101 NEQ2 ?{ ( on drag ) } DUP2 #0100 NEQ2 ?{ ( on release ) } POP2&lt;/quote&gt;
    &lt;p&gt;The opening curly bracket assembles to a unique label reference, and the closing bracket to a corresponding matching label definition. They do not affect the scope.&lt;/p&gt;
    &lt;head rend="h2"&gt;Uxntal Macros&lt;/head&gt;
    &lt;p&gt;A macro is a way of defining inline routines, it allows to create new words that will be replaced by the body of the macro, as opposed to a jump where the program counter will move to a routine and back, therefore it needs to be defined before its usage, as follow:&lt;/p&gt;
    &lt;quote&gt;%modulo ( num denum -- res ) { DIVk MUL SUB } @routine ( -- c* ) #18 #03 modulo JMP2r&lt;/quote&gt;
    &lt;p&gt;In the previous example, the token modulo will get replaced by the body of the macro during assembly:&lt;/p&gt;
    &lt;quote&gt;@routine ( -- c* ) #18 #03 DIVk MUL SUB JMP2r&lt;/quote&gt;
    &lt;head rend="h2"&gt;Uxntal Memory&lt;/head&gt;
    &lt;p&gt;There are 64kb of addressable memory. Roms are always loaded at 0x0100, which is the address of the Reset Vector and where evaluation begins. During boot, the stacks, device and addressable memories are zeroed. During a soft-reboot, the content of the zero-page is preserved.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Shared&lt;/cell&gt;
        &lt;cell role="head"&gt;Memory&lt;/cell&gt;
        &lt;cell&gt;RAM&lt;/cell&gt;
        &lt;cell&gt;Data&lt;/cell&gt;
        &lt;cell&gt;64kb pages&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Private&lt;/cell&gt;
        &lt;cell&gt;Stacks&lt;/cell&gt;
        &lt;cell&gt;Working Stack&lt;/cell&gt;
        &lt;cell&gt;Data&lt;/cell&gt;
        &lt;cell&gt;256 bytes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Pointer&lt;/cell&gt;
        &lt;cell&gt;1 byte&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Return Stack&lt;/cell&gt;
        &lt;cell&gt;Data&lt;/cell&gt;
        &lt;cell&gt;256 bytes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Pointer&lt;/cell&gt;
        &lt;cell&gt;1 byte&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;IO&lt;/cell&gt;
        &lt;cell&gt;Devices&lt;/cell&gt;
        &lt;cell&gt;Data&lt;/cell&gt;
        &lt;cell&gt;256 bytes&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The device page and stacks are located outside of addressable memory.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;An Absolute Padding, like |100 moves the program generation to an address specified by a number or label.&lt;/item&gt;
      &lt;item&gt;A Relative Padding, like $18 moves the program generation by a distance specified by a number or label.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;
|18 @width

|100 @on-reset ( -&amp;gt; )
	;buffer/end BRK 02 18

|200 @buffer $width &amp;amp;end
&lt;/code&gt;
    &lt;p&gt;Memory is big-endian, when writing or reading a short from memory, the position is that of the high-byte. The low-byte of a short written at 0xffff wraps to 0x0000.&lt;/p&gt;
    &lt;quote&gt;#12 #0200 STA 0x0200=12 #3456 #0400 STA2 0x0400=34, 0x0401=56 #0400 LDA 34&lt;/quote&gt;
    &lt;p&gt;The zero-page is the memory located below 0x0100, its purpose is to store variables that will be accessed often, or needs to be preserved across a soft-reboot. It is sligthly faster to read and write from the zero-page using the LDZ and STZ opcodes as they use only a single byte instead of a short. This memory space cannot be pre-filled in the rom prior to initialization. The low-byte of a short written at 0xff wraps to 0x00.&lt;/p&gt;
    &lt;quote&gt;#1234 #80 STZ2 0x0080=12, 0x0081=34 #81 LDZ 34&lt;/quote&gt;
    &lt;head rend="h2"&gt;Uxntal Devices&lt;/head&gt;
    &lt;p&gt;Uxn is non-interruptible, vectors are locations in programs that are evaluated when certain events occur. A vector is evaluated until a BRK opcode is encountered. Uxn can communicate with a maximum of 16 devices, each device has 16 ports, each port handles a specific I/O message. Ports are mapped to the devices memory page, which is located outside of the main addressable memory.&lt;/p&gt;
    &lt;p&gt;All programs begin by executing the reset vector located at &lt;code&gt;0x100&lt;/code&gt;. The content of the stacks are preserved between vectors,
but it is discouraged to use the stacks to pass data between vectors.&lt;/p&gt;
    &lt;quote&gt;@on-reset ( -&amp;gt; ) ( set vector ) ;on-mouse .Mouse/vector DEO2 BRK @on-mouse ( -&amp;gt; ) ( read state ) .Mouse/state DEI ?&amp;amp;on-touch BRK &amp;amp;on-touch ( -&amp;gt; ) ( A mouse button is pressed ) BRK&lt;/quote&gt;
    &lt;p&gt;For example, the address stored in the Mouse/vector ports points to a part of the program to be evaluated when the cursor is moved, or a button state has changed.&lt;/p&gt;
    &lt;head rend="h2"&gt;Uxntal Utilities&lt;/head&gt;
    &lt;p&gt;Here's a list of small self-hosted development tools:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Drifblim is an assembler that also emits a symbols file.&lt;/item&gt;
      &lt;item&gt;Uxnfor is a formatter that standardize the source code, this is the formatting style used across the Uxntal documentation.&lt;/item&gt;
      &lt;item&gt;Uxnlin is a peephole optimizer that reveals potential optimizations in opcode sequences.&lt;/item&gt;
      &lt;item&gt;Uxnbal is a program validator that warns when routines do not match their definitions.&lt;/item&gt;
      &lt;item&gt;Uxndis is a disassembler that prints the opcodes in a rom file.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;incoming: left noodle drifblim theme catclock oquonie bifurcan yufo programming languages concatenative gly format ufx format ulz format proquints brainfuck uxn uxntal reference uxntal alphabet bicycle beetbug arvelie about oscean computer 2025 2021&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45437323</guid><pubDate>Wed, 01 Oct 2025 13:14:32 +0000</pubDate></item><item><title>Show HN: ChartDB Agent – Cursor for DB schema design</title><link>https://app.chartdb.io/ai</link><guid isPermaLink="false">https://news.ycombinator.com/item?id=45437594</guid><pubDate>Wed, 01 Oct 2025 13:38:36 +0000</pubDate></item><item><title>Cursor 1.7</title><link>https://cursor.com/changelog/1-7</link><description>&lt;doc fingerprint="ae26a31815e9b8b4"&gt;
  &lt;main&gt;
    &lt;p&gt;1.7 · Changelog&lt;/p&gt;
    &lt;head rend="h1"&gt;Agent Autocomplete, Hooks, and Team Rules&lt;/head&gt;
    &lt;head rend="h3"&gt;Autocomplete for Agent&lt;/head&gt;
    &lt;p&gt;When writing prompts, autocomplete suggestions will appear based on recent changes. Tab to accept suggestions and attach files to context.&lt;/p&gt;
    &lt;head rend="h3"&gt;Hooks (beta)&lt;/head&gt;
    &lt;p&gt;You can now observe, control, and extend the Agent loop using custom scripts. Hooks give you a way to customize and influence Agent behavior at runtime.&lt;/p&gt;
    &lt;p&gt;Use Hooks to audit Agent usage, block commands, or redact secrets from context. It's still in beta and we'd love to hear your feedback.&lt;/p&gt;
    &lt;head rend="h3"&gt;Team rules&lt;/head&gt;
    &lt;p&gt;Teams can now define and share global rules from the dashboard that will be applied to all projects. We’ve also shipped team rules for Bugbot, so behavior is consistent across repos.&lt;/p&gt;
    &lt;head rend="h3"&gt;Share prompts with deeplinks (beta)&lt;/head&gt;
    &lt;p&gt;Generate shareable deeplinks for reusable prompts. Useful for setup instructions in documentation, team resources, and sharing workflows. See our documentation for how to create them.&lt;/p&gt;
    &lt;head rend="h3"&gt;Sandboxed terminals&lt;/head&gt;
    &lt;p&gt;Commands now execute in a secure, sandboxed environment. If you’re on allowlist mode, non-allowlisted commands will automatically run in a sandbox with read/write access to your workspace and no internet access.&lt;/p&gt;
    &lt;p&gt;If a command fails and we detect the sandbox was the cause, you’ll be prompted to retry outside of the sandbox.&lt;/p&gt;
    &lt;head rend="h3"&gt;Monitor Agents from menubar&lt;/head&gt;
    &lt;p&gt;Quickly check the status of Cursor Agents right from your menubar.&lt;/p&gt;
    &lt;head rend="h3"&gt;Image file support for Agent&lt;/head&gt;
    &lt;p&gt;Agent can now read image files directly from your workspace and include them in context. Previously, only pasted images were supported.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45437735</guid><pubDate>Wed, 01 Oct 2025 13:51:03 +0000</pubDate></item><item><title>Unix philosophy and filesystem access makes Claude Code amazing</title><link>https://www.alephic.com/writing/the-magic-of-claude-code</link><description>&lt;doc fingerprint="370009d837378e9b"&gt;
  &lt;main&gt;
    &lt;p&gt;Noah Brier, September 30, 2025&lt;/p&gt;
    &lt;p&gt;If you've talked to me lately about AI, you've almost certainly been subject to a long soliloquy about the wonders of Claude Code. What started as a tool I ran in parallel with other tools to aid coding has turned into my full-fledged agentic operating system, supporting all kinds of workflows.&lt;/p&gt;
    &lt;p&gt;Most notably, Obsidian, the tool I use for note-taking. The difference between Obsidian and Notion or Evernote is that all the files are just plain old Markdown files stored on your computer. You can sync, style, and save them, but ultimately, it's still a text file on your hard drive. A few months ago, I realized that this fact made my Obsidian notes and research a particularly interesting target for AI coding tools. What first started with trying to open my vault in Cursor quickly moved to a sort of note-taking operating system that I grew so reliant on, I ended up standing up a server in my house so I could connect via SSH from my phone into my Claude Code + Obsidian setup and take notes, read notes, and think through things on the go.&lt;/p&gt;
    &lt;p&gt;A few weeks ago, I went on Dan Shipper's AI &amp;amp; I Podcast to wax poetic about my love for this setup. I did a pretty deep dive into the system I use, how it works, why it works, etc. I won't retread all those details—you can read the transcript or listen to the podcast—but I want to talk about a few other things related to Claude Code that I've come to realize since the conversation.&lt;/p&gt;
    &lt;p&gt;I've really struggled to answer this question. I'm also not sure it's better than Cursor for all things, but I do think there are a set of fairly exceptional pieces that work together in concert to make me turn to Claude Code whenever I need to build anything these days. Increasingly, that's not even about applying it to existing codebases as much as it's building entirely new things on top of its functionality (more on that in a bit).&lt;/p&gt;
    &lt;p&gt;So what's the secret? Part of it lies in how Claude Code approaches tools. As a terminal-based application, it trades accessibility for something powerful: native Unix command integration. While I typically avoid long blockquotes, the Unix Philosophy deserves an exception—Doug McIlroy's original formulation captures it perfectly:&lt;/p&gt;
    &lt;p&gt;The Unix philosophy is documented by Doug McIlroy in the Bell System Technical Journal from 1978:&lt;/p&gt;
    &lt;p&gt;It was later summarized by Peter H. Salus in A Quarter-Century of Unix (1994):&lt;/p&gt;
    &lt;p&gt;These fifty-year-old principles are exactly how LLMs want to use tools. If you look at how these models actually use the tools they're given, they are constantly "piping" output to input (albeit using their own fuzziness in between). (As an aside, the Unix | command allows you to string the output from one command into the input of another.) When models fail to weld their tools effectively, it is almost always because the tools are overly complex.&lt;/p&gt;
    &lt;p&gt;So part one of why Claude Code can be so mind-blowing is that the commands that power Unix happen to be perfectly suited for use by LLMs. This is both because they're simple and also incredibly well-documented, meaning the models had ample source material to teach them the literal ins and outs.&lt;/p&gt;
    &lt;p&gt;But that still wasn't the whole thing. The other piece was obviously Claude Code's ability to write code initially and, more recently, prose (for me, at least). But while other applications like ChatGPT and Claude can write output, there was something different going on here. Last week, while reading The Pragmatic Engineer's deep dive into how Claude Code is built. The answer was staring me in the face: filesystem access.&lt;/p&gt;
    &lt;p&gt;The filesystem changes everything. ChatGPT and Claude in the browser have two fatal flaws: no memory between conversations and a cramped context window. A filesystem solves both. Claude Code writes notes to itself, accumulates knowledge, and keeps running tallies. It has state and memory. It can think beyond a single conversation.&lt;/p&gt;
    &lt;p&gt;Back in 2022, when I first played with the GPT-3 API, I said that even if models never got better than they were in that moment, we would still have a decade to discover the use cases. They did get better—reasoning models made tool calling reliable—but the filesystem discovery proves my point.&lt;/p&gt;
    &lt;p&gt;I bring this up because in the Pragmatic Engineer interview, Boris Cherney, who built the initial version of Claude Code, uses it to describe the aha:&lt;/p&gt;
    &lt;p&gt;In AI, we talk about “product overhang”, and this is what we discovered with the prototype. Product overhang means that a model is able to do a specific thing, but the product that the AI runs in isn’t built in a way that captures this capability. What I discovered about Claude exploring the filesystem was pure product overhang. The model could already do this, but there wasn’t a product built around this capability!&lt;/p&gt;
    &lt;p&gt;Again, I'd argue it's filesystem + Unix commands, but the point is that the capability was there in the model just waiting to be woken up, and once it was, we were off to the races. Claude Code works as a blueprint for building reliable agentic systems because it captures model capabilities instead of limiting them through over-engineered interfaces.&lt;/p&gt;
    &lt;p&gt;I talked about my Claude Code + Obsidian setup, and I've actually taken it a step further by open-sourcing "Claudesidian," which pulls in a bunch of the tools and commands I use in my own Claude Code + Obsidian setup. It also goes beyond that and was a fun experimental ground for me. Most notably, I built an initial upgrade tool so that if changes are made centrally, you can pull them into your own Claudesidian, and the AI will help you check to see if you've made changes to the files being updated and, if so, attempt to smartly merge your changes with the new updates. Both projects follow the same Unix philosophy principles—simple, composable tools that do one thing well and work together. This is the kind of stuff that Claude Code makes possible, and why it's so exciting for me as a new way of building applications.&lt;/p&gt;
    &lt;p&gt;Speaking of which, one I'm not quite ready to release, but hopefully will be soon, is something I've been calling "Inbox Magic," though I'll surely come up with a better name. It's a Claude Code repo with access to a set of Gmail tools and a whole bunch of prompts and commands to effectively start operating like your own email EA. Right now, the functionality is fairly simple: it can obviously run searches or send emails on your behalf, but it can also do things like triage and actually run a whole training run on how you sound over email so it can more effectively draft emails for you. While Claude Code and ChatGPT both have access to my emails, they mostly grab one or two at a time. This system, because it can write things out to files and do lots of other fancy tricks, can perform a task like “find every single travel-related email in my inbox and use that to build a profile of my travel habits that I can use as a prompt to help ChatGPT/Claude do travel research that's actually aligned with my preferences.” Anyway, more on this soon, and if it's something you want to try out, ping me with your GitHub username, and as soon as I feel like I have something ready to test, I'll happily share it.&lt;/p&gt;
    &lt;p&gt;While I generally shy away from conclusions, I think there are a few here worth reiterating.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45437893</guid><pubDate>Wed, 01 Oct 2025 14:05:45 +0000</pubDate></item><item><title>Show HN: Autism Simulator</title><link>https://autism-simulator.vercel.app/</link><guid isPermaLink="false">https://news.ycombinator.com/item?id=45438346</guid><pubDate>Wed, 01 Oct 2025 14:48:31 +0000</pubDate></item><item><title>Building the heap: racking 30 petabytes of hard drives for pretraining</title><link>https://si.inc/posts/the-heap/</link><description>&lt;doc fingerprint="2dd91d7735ac7f8d"&gt;
  &lt;main&gt;
    &lt;p&gt;We built a storage cluster in downtown SF to store 90 million hours worth of video data. Why? We’re pretraining models to solve computer use. Compared to text LLMs like LLaMa-405B, which require ~60 TB of text data to train, videos are sufficiently large that we need 500 times more storage. Instead of paying the $12 million / yr it would cost to store all of this on AWS, we rented space from a colocation center in San Francisco to bring that cost down ~40x to $354k per year, including depreciation.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why&lt;/head&gt;
    &lt;p&gt;Our use case for data is unique. Most cloud providers care highly about redundancy, availability, and data integrity, which tends to be unnecessary for ML training data. Since pretraining data is a commodity—we can lose any individual 5% with minimal impact—we can handle relatively large amounts of data corruption compared to enterprises who need guarantees that their user data isn’t going anywhere. In other words, we don’t need AWS’s 13 nines of reliability; 2 is more than enough.&lt;/p&gt;
    &lt;p&gt;Additionally, storage tends to be priced substantially above cost. Most companies use relatively small amounts of storage (even ones like Discord still use under a petabyte for messages), and the companies that use petabytes are so large that storage remains a tiny fraction of their total compute spend.&lt;/p&gt;
    &lt;p&gt;Data is one of our biggest contraints, and would be prohibitively expensive otherwise. As long as the cost predictions work out in favor of a local datacenter, and it would not consume too much of the core team’s time, it would make sense to stack hard drives ourselves. [1] 1. We talked to some engineers at the Internet Archive, which had basically the same problem as us; even after massive friends &amp;amp; family discounts on AWS, it was still 10 times more cost-effective to buy racks and store the data themselves!&lt;/p&gt;
    &lt;head rend="h2"&gt;The Cost Breakdown: Cloud Alternatives vs In-House&lt;/head&gt;
    &lt;p&gt;Internet and electricity total $17.5k as our only recurring expenses (the price of colocation space, cooling, etc were bundled into electricity costs). One-time costs were dominated by hard drive capex. [2] 2. When deciding the datacenter location we had multiple options across the Bay Area, including options in Fremont through Hurricane Electric for around $10k in setup fees and $12.8k per month, saving us $38.5k initially and $4.7k per month, but ended up opting for a datacenter that was only a couple blocks from our office in SF. Though this came at a premium, it was extremely helpful to get the initial nodes setup and for ongoing maintenance. Our team is just 5 people, so any friction in going to the datacenter would come at a noticeable cost to team productivity.&lt;/p&gt;
    &lt;p&gt;Table 1: Cost comparison of cloud alternatives vs in-house. AWS is $1,130,000/month including estimated egress, Cloudflare is $270,000/month (with bulk-discounted pricing), and our datacenter is $29,500/month (including recurring costs and depreciation).&lt;/p&gt;
    &lt;head rend="h3"&gt;Monthly Recurring Costs&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Item&lt;/cell&gt;
        &lt;cell role="head"&gt;Cost&lt;/cell&gt;
        &lt;cell role="head"&gt;Notes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Internet&lt;/cell&gt;
        &lt;cell&gt;$7,500/month&lt;/cell&gt;
        &lt;cell&gt;100Gbps DIA from Zayo, 1yr term.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Electricity&lt;/cell&gt;
        &lt;cell&gt;$10,000/month&lt;/cell&gt;
        &lt;cell&gt;1 kW/PB, $330/kW. Includes cabinet space &amp;amp; cooling. 1yr term.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Total Monthly&lt;/cell&gt;
        &lt;cell&gt;$17,500/month&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;One-Time Costs&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Category&lt;/cell&gt;
        &lt;cell role="head"&gt;Item&lt;/cell&gt;
        &lt;cell role="head"&gt;Cost&lt;/cell&gt;
        &lt;cell role="head"&gt;Details&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Storage&lt;/cell&gt;
        &lt;cell&gt;Hard drives (HDDs)&lt;/cell&gt;
        &lt;cell&gt;$300,000&lt;/cell&gt;
        &lt;cell&gt;2,400 drives. Mostly 12TB used enterprise drives (3/4 SATA, 1/4 SAS). The JBOD DS4246s work for either.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Storage Infrastructure&lt;/cell&gt;
        &lt;cell&gt;NetApp DS4246 chassis&lt;/cell&gt;
        &lt;cell&gt;$35,000&lt;/cell&gt;
        &lt;cell&gt;100 dual SATA/SAS chassis, 4U each&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Compute&lt;/cell&gt;
        &lt;cell&gt;CPU head nodes&lt;/cell&gt;
        &lt;cell&gt;$6,000&lt;/cell&gt;
        &lt;cell&gt;10 Intel RR2000s from eBay&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Datacenter Setup&lt;/cell&gt;
        &lt;cell&gt;Install fee&lt;/cell&gt;
        &lt;cell&gt;$38,500&lt;/cell&gt;
        &lt;cell&gt;One-off datacenter install fee&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Labor&lt;/cell&gt;
        &lt;cell&gt;Contractors&lt;/cell&gt;
        &lt;cell&gt;$27,000&lt;/cell&gt;
        &lt;cell&gt;Contractors to help physically screw in / install racks and wire cables&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Networking &amp;amp; Misc&lt;/cell&gt;
        &lt;cell&gt;Install expenses&lt;/cell&gt;
        &lt;cell&gt;$20,000&lt;/cell&gt;
        &lt;cell&gt;Power cables, 100GbE QSFP CX4 NICs, Arista router, copper jumpers, one-time internet install fee&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Total One-Time&lt;/cell&gt;
        &lt;cell&gt;$426,500&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Our price assuming three-year depreciation (including for the one-off install fees) is $17.5k/month in fixed monthly costs (internet, power, etc.) and $12k/month in depreciation, for $29.5k/month overall.&lt;/p&gt;
    &lt;p&gt;We compare our costs to two main providers: AWS’s public pricing numbers as a baseline, and Cloudflare’s discounted pricing for 30PB of storage. It’s important to note that AWS egress would be substantially lower if we utilized AWS GPUs. This is not reflected on our graph because AWS GPUs are priced at substantially above market prices and large clusters are difficult to attain, untenable at our compute scales.&lt;/p&gt;
    &lt;p&gt;Here are the pricing breakdowns:&lt;/p&gt;
    &lt;head rend="h3"&gt;AWS Pricing Breakdown&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Cost Component&lt;/cell&gt;
        &lt;cell role="head"&gt;Rate&lt;/cell&gt;
        &lt;cell role="head"&gt;Monthly Cost&lt;/cell&gt;
        &lt;cell role="head"&gt;Notes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Storage&lt;/cell&gt;
        &lt;cell&gt;$0.021/GB/month&lt;/cell&gt;
        &lt;cell&gt;$630,000&lt;/cell&gt;
        &lt;cell&gt;For data over 500TB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Egress&lt;/cell&gt;
        &lt;cell&gt;$0.05/GB&lt;/cell&gt;
        &lt;cell&gt;$500,000&lt;/cell&gt;
        &lt;cell&gt;Entire dataset egressed quarterly (10 PB/month)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Total AWS Monthly&lt;/cell&gt;
        &lt;cell&gt;$1,130,000&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;Cloudflare R2 Pricing&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Pricing Tier&lt;/cell&gt;
        &lt;cell role="head"&gt;Rate&lt;/cell&gt;
        &lt;cell role="head"&gt;Monthly Cost&lt;/cell&gt;
        &lt;cell role="head"&gt;Notes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Published Rate&lt;/cell&gt;
        &lt;cell&gt;$0.015/GB/month&lt;/cell&gt;
        &lt;cell&gt;$450,000&lt;/cell&gt;
        &lt;cell&gt;No egress fees&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Estimated Private Pricing [3] 3. Cloudflare has a more reasonable estimate for the 30 PB, placing it at an overall monthly cost of $270k without egress fees. We also have bulk-discounted pricing estimates after getting pricing quotes—this was our main point of comparison for the datacenter.&lt;/cell&gt;
        &lt;cell&gt;$0.009/GB/month&lt;/cell&gt;
        &lt;cell&gt;$270,000&lt;/cell&gt;
        &lt;cell&gt;Estimated rate for &amp;gt;20 PB scale&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;That brings monthly costs to $38/TB/month for AWS, $10/TB/month for Cloudflare, and $1/TB/month for our datacenter—about 38x lower and 10x lower respectively. (At the very cheapest end of the spectrum, Backblaze has a $6/TB product that is unsuitable for model training due to egress speed limitations; their $15/TB Overdrive AI-specific storage product is closer to Cloudflare’s in price &amp;amp; performance)&lt;/p&gt;
    &lt;p&gt;While we use Cloudflare as a comparison point, we’ve sometimes done too much load for their R2 servers. In particular, in the past we’ve done enough load during large model training runs that they rate-limited us, later confirming we were saturating their metadata layer and the rate limit wasn’t synthetic. Because our metadata on the heap is so simple, and we have a 100Gbps DIA connection, we haven’t ran into any issues there. [4] 4. We love Cloudflare and use many of their products often; we include this anecdote as a fact about our scale being difficult to handle, not as a dig!&lt;/p&gt;
    &lt;p&gt;This setup was and is necessary for our video data pipelines, and we’re extremely happy that we made this investment. By gathering large scale data at low costs, we can be competitive with frontier labs with billions of dollars in capital.&lt;/p&gt;
    &lt;head rend="h2"&gt;Setup/The Process&lt;/head&gt;
    &lt;p&gt;We cared a lot about getting this built fast, because this kind of project can easily stretch on for months if not careful. Hence Storage Stacking Saturday, or S3. We threw a hard drive stacking party in downtown SF and got our friends to come, offering food and custom-engraved hard drives to all who helped. The hard drive stacking started at 6am and continued for 36 hours (with a break to sleep), and by the end of that time we had 30 PB of functioning hardware racked and wired up. We brought in contractors for additional help and professional installation later on in the event.&lt;/p&gt;
    &lt;p&gt;People at the hard drive stacking party! Cool shots of the servers&lt;/p&gt;
    &lt;p&gt;Our software is 200 lines of Rust code for writing (to determine the drive to write data onto) and a nginx webserver for reading data, with a simple SQLite db for tracking metadata like which heap node each file is on and what data split it belongs to. We kept this obsessively simple instead of using MinIO or Ceph because we didn’t need any of the features they provided; it’s much, much simpler to debug a 200-line program than to debug Ceph, and we weren’t worried about redundancy or sharding. All our drives were formatted with XFS.&lt;/p&gt;
    &lt;p&gt;The storage software landscape offers many options, but every option available comes with drawbacks. People experienced with Ceph strongly warned us to avoid it unless we were willing to hire dedicated Ceph specialists—our research confirmed this advice. Ceph appears far more complex than justified for most use cases, only worthwhile for companies that absolutely need maximum performance and customizability and are prepared to invest heavily in tuning. Minio presents an interesting option if S3 compatibility is essential, but otherwise remains a bit too fancy for us and similar use-cases. Weka and Vast are absurdly expensive at 2k / TB / year or so and are primarily designed for NVMEs, not spinning disks.&lt;/p&gt;
    &lt;head rend="h2"&gt;Post-Mortem&lt;/head&gt;
    &lt;p&gt;Building the datacenter was a large endeavor and we definitely learned lessons, both good and bad.&lt;/p&gt;
    &lt;head rend="h3"&gt;Things That We Got Correct&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;We think the redundancy &amp;amp; capability tradeoffs we made are very reasonable at our disk speeds. We’re able to approximately saturate our 100G network for both read &amp;amp; write.&lt;/item&gt;
      &lt;item&gt;Doing this locally a couple blocks away was well worth it because of the amount of debugging and manual work needed.&lt;/item&gt;
      &lt;item&gt;Ebay is good to find vendors but bad to actually buy things with. After finding vendors, they can often individually supply all the parts we need and provide warranties, which are extremely valuable.&lt;/item&gt;
      &lt;item&gt;100G dedicated internet is pretty important, and much much easier to debug issues with than using cloud products.&lt;/item&gt;
      &lt;item&gt;Having high-quality cable management during the racking process saved us a ton of time debugging in the long run; making it easy to switch up the networking saved us a lot of headache.&lt;/item&gt;
      &lt;item&gt;We had a very strong simplicity prior, and this saved an immense amount of effort. We are quite happy that we didn’t use ceph or minio. Unlike e.g. nginx, they do not work out of the box. We were willing to write a simple Rust script and roughly saturated our network read &amp;amp; write at 100 Gbps without any fancy code.&lt;/item&gt;
      &lt;item&gt;We were basically right about the price and advantages this offered, and did not substantially overestimate the amount of time / effort it would take. While the improvements list is longer than this, most of those are minor; fundamentally we built a cluster rivaling massive clouds for 40x cheaper.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Difficult Bits&lt;/head&gt;
    &lt;p&gt;A map of reality only gets you so far—while setting up the datacenter we ran into a couple problems and unexpected challenges. We’ll include a list:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;We used frontloaders instead of toploaders for our server rack. This meant we had to screw every single individual drive in—tedious for 2.4k HDDs&lt;/item&gt;
      &lt;item&gt;Our storage was not dense—we could have saved 5x the work on physical placement and screwing by having a denser array of hard drives&lt;/item&gt;
      &lt;item&gt;Shortcuts like daisy-chaining are usually a bad idea. We could have gotten substantially higher read/write speeds without daisy chaining networked nodes, giving each chassis its own HBA (Host Bus Adapter, not a significant cost).&lt;/item&gt;
      &lt;item&gt;Compatibility is key—specifically in networking functionally everything is locked to a specific brand. We had many pain points here. Fiber transceivers will ~never work unless used with the right brand, but copper cables are much more forgiving. FS.com is pretty good and well priced (though their speed estimates were pretty inconsistent); Amazon will also often have the parts you need rapidly.&lt;/item&gt;
      &lt;item&gt;Networking was a substantial cost and required experimentation. We did not use DHCP as most enterprise switches don’t support it and we wanted public IPs for the nodes for convenient and performant access from our servers. While this is an area where we would have saved time with a cloud solution, we had our networking up within days and kinks ironed out within ~3 weeks.&lt;/item&gt;
      &lt;item&gt;We were often bottlenecked by easy access to servers via monitor/keyboard; idle crash carts during setup are helpful.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Ideas Worth Trying&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Working KVMs are extremely useful, and you shouldn’t go without them or good IPMI. Physically going to a datacenter is really inconvenient, even if it’s a block away. IPMI is good, but only if you have pretty consistent machines.&lt;/item&gt;
      &lt;item&gt;Think through your management Ethernet network as much as your real network - it’s really nice to be able to SSH into servers while configuring the network, and IPMI is great!&lt;/item&gt;
      &lt;item&gt;Overprovision your network—e.g. if doable it’s worth having 400 Gigabit internally (you can use 100G cards etc for this!)&lt;/item&gt;
      &lt;item&gt;We could have substantially increased density at additional upfront cost by buying 90-drive SuperMicro SuperServers and putting 20TB drives into them. This would allow us to use 2 racks instead of 10, given us had about the equivalent of 20 AMD 9654s in total CPU capacity, and used less total power.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;How You Can Build This Yourself&lt;/head&gt;
    &lt;p&gt;Here’s what you need to replicate our setup.&lt;/p&gt;
    &lt;head rend="h3"&gt;Storage&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;10 CPU head nodes.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;We used Intel Rr2000 with Dual Intel Gold 6148 and 128GB of DDR4 ECC RAM per server (which are incredibly cheap and roughly worked for our use cases) but you have a lot of flexibility in what you use.&lt;/item&gt;
          &lt;item&gt;If you use the above configuration you likely won’t be able to do anything at all CPU-intensive on the servers (like on-device data processing or ZFS data compression / deduplication / etc, which is valuable if you’re storing non-video data).&lt;/item&gt;
          &lt;item&gt;Our CPU nodes cost $600 each—it seems quite reasonable to us to spend up to $3k each if you want ZFS / compression or the abiliy to do data processing on-CPU.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;100 DS4246 chassis—each can hold 24 hard drives.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;2,400 3.5 inch HDDs—need to be all SATA or all SAS in each chassis.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;We would recommend SAS hard drives if possible [5] 5. if you use SAS drives you’ll need to deal with or disable mulipathing, which is reasonably simple as they roughly double speed over similar SATA drives.&lt;/item&gt;
          &lt;item&gt;We used a mix of 12TB and 14TB drives—basically any size should work, roughly the larger the better holding price constant (density makes stacking easier + in general increases resale value).&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Physical parts to mount the chassis—you’ll need rails or l-brackets. We used l-brackets which worked well, as we haven’t needed to take the chassis out to slot hard drives. If you buy toploaders, you’ll need rails.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Multiple “crash carts” with monitors and keyboards that allow you to physically connect to your CPU head nodes and configure them—this is invaluable when you’re debugging network issues.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Network&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;A 100 GbE switch&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;a used Arista is fine, should be QSFP28, should cost about $1-2k&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;HBAs (Host Bus Adapters), which connect your head nodes to your DS4246 chassis.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;The best configuration we tried was with Broadcom 9305-16E HBAs, with 3x HBAs per server (make sure your server has physical space for them!) with SFF-8644 to QSFP mini SAS cables.&lt;/item&gt;
          &lt;item&gt;There are 4 slots per HBA, so you can cable each DS4246 chassis directly to the HBA. [6] 6. The option we ended up going with for convenience was putting LSI SAS9207-8e HBAs, which have 2 ports each, into the CPU head nodes- then daisy-chaining the DS4246s together with QSFP+ to QSFP+ DACs.. We deployed this on Storage Stacking Saturday, then while debugging speeds tried the above method on one of the servers and got to ~4 Gbps per chassis-but didn’t find it worth it to swap everything out in pure labor because of the way we had set up some of our head nodes such that they were difficult to take out. Insofar as it is reasonably cheap to just do the above thing to start and we’ve tested it to work, you should probably do as we say, not as we did in this case!&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Network cards (NICs).&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;We used Mellanox ConnectX-4 100GbE. Make sure they come in Ethernet mode and not Infiniband mode for ease of config.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;DAC (Direct Attach Copper) or AOC (Active Optical) cables, to connect the NICs in your head nodes to your switch and therefore the internet. You almost certainly want DACs if your racks are close together, as they are far more compatible with arbitrary networking equipment than AOCs.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We would recommend that you find a supplier to sell you the CPU head nodes with the HBAs and NICs installed—there are a number of used datacenter / enterprise parts suppliers who are willing to do this. This is a substantial positive because it means that you don’t have to spend hours installing the HBAs/NICs yourself and can have a substantially higher degree of confidence in your operations.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Serial cables—you’ll need these to connect to your switch!&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Optional but recommended: an Ethernet management network of some kind. If you can’t easily get ethernet, we’d recommend getting a wifi adapter like this and then a ethernet switch like this —it’s substantially easier to set up than the 100GbE, is a great backup for when that’s not working, and will allow you to do ~everything over SSH from the comfort of the office instead of in the datacenter.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Datacenter Requirements&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;3.5 kW of usable power per cabinet, with 10 4U chassis + 1 2U (cabinets are 42U tall)&lt;/item&gt;
      &lt;item&gt;1 spare cabinet for the 1U or 2U 100GbE switch (you can obviously also just swap out one of the 4U chassis in another cabinet for the switch).&lt;/item&gt;
      &lt;item&gt;1 42U cabinet per 3 PB of storage&lt;/item&gt;
      &lt;item&gt;A dedicated 100G connection (will come in as a fiber pair probably via QSFP28 LR4, but confirm with your datacenter provider before buying parts here!)&lt;/item&gt;
      &lt;item&gt;Ideally physically near your office—there is a lot of value in being able to walk over and debug issues instead of e.g. dealing with remote hands services to get internet to the nodes.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Some setup tips:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Make sure to first properly configure your switch. Depending on your switch model this should be relatively straightforward—you’ll need to physically connect to the switch and then configure the specific port that your 100GbE is connected to (you’ll get a fiber cross-connect from your datacenter that you should plug into a QSFP28 transceiver. Make sure that you get a transceiver that is compatible in form with the ISP, probably LR4, and specifically branded with your switch brand, otherwise it is very unlikely to work). Depending on your ISP you might have to talk to them to make sure that you can get “light” through the fiber cables from both ends, which might involve rolling the fiber and otherwise making sure it’s working properly. &lt;list rend="ul"&gt;&lt;item&gt;If your switch isn’t working / you haven’t configured one before, I’d suggest trying to directly plug the fiber cable from the ISP into one of your 10 heap servers, making sure to buy a transceiver that is compatible with your NIC brand (e.g. Mellanox). Once you get it working from there, move over to your switch and get it working.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Once you can connect to the internet from your switch (simply ping 1.1.1.1 to check) you are ready to set up the netplans for the individual nodes. this is most easily done during the Ubuntu setup process, which will walk you through setting up internet for your CPU head nodes, but is also doable outside of that&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Once you have internet access to your nodes and have properly connected 1 cable to each DS4246, you should format &amp;amp; mount the drives on each node, test that all of them are properly working, and then you are ready to deploy any software you want.&lt;/p&gt;
    &lt;p&gt;If you end up building a similar storage cluster based on this writeup we’d love to hear from you—we’re very curious what can be improved, both in our guidance and in the object-level process. You can reach us at [email protected]&lt;/p&gt;
    &lt;p&gt;If you came away from this post excited about our work, we’d love to chat. We’re a research lab currently focused on pretraining models to use computers, with the long-term goal of building general models that can learn in-context and do arbitrary tasks while aligned with human values; we’re hiring top researchers and engineers to help us train these. If you’re interested in chatting, shoot us an email at [email protected].&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45438496</guid><pubDate>Wed, 01 Oct 2025 15:00:41 +0000</pubDate></item><item><title>Ask HN: Who wants to be hired? (October 2025)</title><link>https://news.ycombinator.com/item?id=45438501</link><description>&lt;doc fingerprint="301182753412e0e7"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Share your information if you are looking for work. Please use this format:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;  Location:
  Remote:
  Willing to relocate:
  Technologies:
  Résumé/CV:
  Email:
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt; Please only post if you are personally looking for work. Agencies, recruiters, job boards, and so on, are off topic here.&lt;/p&gt;
      &lt;p&gt;Readers: please only email these addresses to discuss work opportunities.&lt;/p&gt;
      &lt;p&gt;There's a site for searching these posts at https://www.wantstobehired.com.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45438501</guid><pubDate>Wed, 01 Oct 2025 15:01:06 +0000</pubDate></item><item><title>Ask HN: Who is hiring? (October 2025)</title><link>https://news.ycombinator.com/item?id=45438503</link><description>&lt;doc fingerprint="3651195a341ae364"&gt;
  &lt;main&gt;
    &lt;div&gt;&lt;p&gt;Please state the location and include REMOTE for remote work, REMOTE (US) or similar if the country is restricted, and ONSITE when remote work is &lt;/p&gt;not&lt;p&gt; an option.&lt;/p&gt;&lt;p&gt;Please only post if you personally are part of the hiring company—no recruiting firms or job boards. One post per company. If it isn't a household name, explain what your company does.&lt;/p&gt;&lt;p&gt;Please only post if you are actively filling a position and are committed to responding to applicants.&lt;/p&gt;&lt;p&gt;Commenters: please don't reply to job posts to complain about something. It's off topic here.&lt;/p&gt;&lt;p&gt;Readers: please only email if you are personally interested in the job.&lt;/p&gt;&lt;p&gt;Searchers: try https://dheerajck.github.io/hnwhoishiring/, https://amber-williams.github.io/hackernews-whos-hiring/, http://nchelluri.github.io/hnjobs/, https://hnresumetojobs.com, https://hnhired.fly.dev, https://kennytilton.github.io/whoishiring/, https://hnjobs.emilburzo.com, or this (unofficial) Chrome extension: https://chromewebstore.google.com/detail/hn-hiring-pro/mpfal....&lt;/p&gt;&lt;p&gt;Don't miss these other fine threads:&lt;/p&gt;&lt;p&gt;Who wants to be hired? https://news.ycombinator.com/item?id=45438501&lt;/p&gt;&lt;p&gt;Freelancer? Seeking freelancer? https://news.ycombinator.com/item?id=45438502&lt;/p&gt;&lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45438503</guid><pubDate>Wed, 01 Oct 2025 15:01:06 +0000</pubDate></item><item><title>MIT technology can see microbes from 90 meters away</title><link>https://www.asimov.press/p/hyperspectral</link><description>&lt;doc fingerprint="bec452110dbf0459"&gt;
  &lt;main&gt;
    &lt;p&gt;Nature has evolved a stunning array of biosensors for detecting the physical world.&lt;/p&gt;
    &lt;p&gt;A single E. coli cell, for example, can precisely sense chemical gradients and “swim” toward or away from them. Some bird species, including robins and warblers, can see magnetic fields using cryptochrome proteins embedded in their eyes to guide them during their annual migration. Bogong moths use photons from distant stars as a compass while soaring 1,000 kilometers across southeast Australia. In other words, organisms can sense not only tastes and smells, but also individual molecules, magnetic fields, and infrared or ultraviolet light.&lt;/p&gt;
    &lt;p&gt;Humans have long used other creatures’ senses to aid and extend our own, too. As far back as 1,000 BCE, humans employed pigeons to carry messages across cities and kingdoms, taking advantage of their remarkable homing instinct. Dogs’ superior sense of smell is often used to sniff out disease, truffles, contraband, and explosives. And today, the city of Poznań, in Poland, uses just eight mussels to monitor their water quality.1&lt;/p&gt;
    &lt;p&gt;But increasingly, over the last quarter century, scientists have not only used entire organisms to sense the natural world, but have also taken particular genes from those organisms and adapted them into molecular biosensors. Just as a smoke detector has a sensor that detects particles in the air and a buzzer that then alerts us, all human-made biosensors have two basic components.&lt;/p&gt;
    &lt;p&gt;The first is the sensor itself — an enzyme, antibody, or engineered cell — that physically recognizes a target, whether a pollutant, virus, or rise in temperature. The second is the transducer, which converts that recognition event into a signal we can perceive, such as a glowing light.&lt;/p&gt;
    &lt;p&gt;Although bioengineers have adapted hundreds of biosensors from nature, they have been less successful in making better transducers.2 Nearly every biosensor today still relies on a narrow set of outputs (aka “reporters”), such as green fluorescent protein (GFP), luciferase, or colorful pigments. Most transducers can only be seen from close up with a direct line of sight, usually using a microscope. And almost all man-made reporters fail to work inside the body or at a distance. This is because visible light does not penetrate solid materials, such as human skin, and easily “blends in” with other photons in the environment.3&lt;/p&gt;
    &lt;p&gt;Recently, however, bioengineers have developed transducers that transcend such limitations. To make biosensors that work inside the body, scientists have discovered genetically encoded transducers that can be measured using ultrasound or even MRI machines. And for a recent paper in Nature Biotechnology, scientists have reported — for the first time — a new type of transducer that can even be seen from up to 90 meters away using “hyperspectral” cameras mounted to drones. This new technology makes it feasible to monitor individual molecules, as sensed by engineered bacteria, across entire ecosystems.&lt;/p&gt;
    &lt;head rend="h2"&gt;Hyperspectral Photos&lt;/head&gt;
    &lt;p&gt;The first hyperspectral cameras were developed in the early 1980s by NASA scientists, who wanted to capture information about Earth, including mineral deposits and ocean algal blooms, from the air. Unlike conventional cameras, which record just three bands of light (red, green, blue), hyperspectral cameras split incoming light into hundreds of narrow spectral bands, including ultraviolet and near-infrared wavelengths.&lt;/p&gt;
    &lt;p&gt;Because each type of molecule absorbs and reflects light in a distinct way, the camera can be mounted onto satellites and used to record a full spectrum for every pixel on the ground. In plants, for example, these cameras can quantify shifts in chlorophyll levels because those molecules strongly absorb light in the blue and red regions. For soils, the spectra contain characteristic dips and peaks that correspond to moisture levels.&lt;/p&gt;
    &lt;p&gt;But the idea that these same cameras could be used to detect bacteria required a leap of imagination. It first came to Chris Voigt, professor of biological engineering at MIT, while touring a military facility, where soldiers explained how hyperspectral drones were being used to spot plastic objects from the sky. Foreign militaries sometimes hide explosives or sensors inside plastic casings and disguise them as rocks, but because real rocks reflect light differently than plastic dupes, hyperspectral cameras can distinguish between them.&lt;/p&gt;
    &lt;p&gt;If the military can distinguish plastic from rock, Voigt wondered, why not microbes from soil?&lt;/p&gt;
    &lt;p&gt;The work to answer this question fell to Yonatan Chemla and Itai Levin, a postdoctoral fellow and graduate student in Voigt’s laboratory. Their first challenge was to find molecules that cells make that could produce a distinctive hyperspectral fingerprint visible from a distance. So the duo began by searching through hundreds of thousands of metabolites listed in scientific databases, finding that only about 100 have any recorded absorption spectra.&lt;/p&gt;
    &lt;p&gt;Upon realizing that we don’t understand how the overwhelming majority of biomolecules reflect light, Chemla and Levin decided to investigate themselves. They bought a hyperspectral camera and a large number of purified molecules from online chemical suppliers — such as indigo and porphyrins — and started testing them in the laboratory. They sprayed these molecules onto soils or rocks, took pictures, and then tried to work out which ones produced a clear signal against background noise.&lt;/p&gt;
    &lt;p&gt;The duo also used computational tools to identify candidate molecules that might act as hyperspectral reporters. Together with collaborators at MIT, they ran quantum chemistry simulations on a selection of 20,000 metabolites to predict how each one would respond to light. These simulations calculated which wavelengths of light each chemical would absorb, and how strong those peaks would be.4 After running these computational tests, Chemla and Levin filtered this list down to a few hundred with unusual peaks or that absorbed light in parts of the spectrum where biology is usually quiet, especially near-infrared wavelengths.&lt;/p&gt;
    &lt;p&gt;Finally, they considered which of these molecules would be easiest and most efficient for a microbe to make, favoring ones that could be made by slightly altering natural pathways or requiring the addition of only a few recombinant genes. Since microbes can have very different metabolisms, they also weighed which hosts would be the best for each possible molecule. After this winnowing process, they ended up with just two: biliverdin IXα made by Pseudomonas putida, and bacteriochlorophyll a made by Rhodocyclus gelatinosus.&lt;/p&gt;
    &lt;p&gt;Biliverdin IXα is a green pigment that naturally forms when heme, the molecule carrying oxygen in red blood cells, is broken down and recycled. To make it in P. putida, the team only needed to add two enzymes. Bacteriochlorophyll a, on the other hand, is a photosynthetic pigment found in purple bacteria.5 R. gelatinosus is itself a purple bacterium, meaning that all the team needed to do was amend its existing genome to produce much larger quantities of bacteriochlorophyll a.&lt;/p&gt;
    &lt;p&gt;With these two engineered microbial strains in hand, the researchers traveled to Fort Devens in Massachusetts — alongside two undergraduate students, Anna Johnson and Yueyang Fan — and sprayed the cells onto little patches of soil. They flew a hyperspectral drone overhead and took pictures of one acre, or about 4,000 square meters, across the entire military facility. Using a hyperspectral detection algorithm that separated the molecular signal from background “noise” of soil and dirt, Chemla and Levin could clearly identify the engineered microbes from up to 90 meters away.6&lt;/p&gt;
    &lt;p&gt;Alas, the cells were layered on top of sand, in direct line of sight to the camera. But in many cases, the things we want to sense — like explosives or pathogens invading plant roots — are hidden underground. Chemla is now searching for volatile molecules that diffuse upward through the soil and into the air, creating a spectral signature that a camera can detect from high above (possibly even from outer space.)&lt;/p&gt;
    &lt;head rend="h2"&gt;Environmental Release&lt;/head&gt;
    &lt;p&gt;Despite this scientific breakthrough, it will be difficult to move these biosensors into the real world. Researchers have been testing engineered microbes in field trials for the last four decades, but few have been commercialized.&lt;/p&gt;
    &lt;p&gt;Field trials for genetically-engineered microbes peaked in the early 1990s but have fallen off since then, mainly due to increased regulations and mixed field trial results. In the late 1980s, engineered Agrobacterium radiobacter K1026 was approved in both Australia and the U.S. to fight crown gall disease in trees. (The microbe outcompetes disease-causing bacteria, killing them.)&lt;/p&gt;
    &lt;p&gt;But getting approval to release a microbe into the wild, without containment, can be incredibly arduous. The regulatory pathway is divided across the EPA, USDA, and FDA. Each agency has jurisdiction depending on the intended use; pesticides fall to the EPA, other agricultural products go to the USDA, and ingestible microbes fall under the province of the FDA. Anything that does not easily fit into these categories, including environmental biosensors, is lumped under the EPA’s Toxic Substances Control Act, or TSCA.&lt;/p&gt;
    &lt;p&gt;The TSCA regulates genetically engineered microbes based on their method of engineering, rather than the product itself. This practice is outdated and should be revised, Chemla says. Any microbe containing DNA from another genus — say, moving a gene from Escherichia coli into Pseudomonas putida — is flagged by the TSCA and unlikely to get approval, even if researchers can prove that the product is safe. More than 200 TSCA submissions were filed between 1987 and 2018, but none of those submissions have led to a commercialized product.&lt;/p&gt;
    &lt;p&gt;There are ways to skirt these regulations, though. Pivot Bio sells genetically-engineered microbes that colonize plant roots and convert atmospheric nitrogen (N₂) into ammonia (NH₃), a chemical form that plants can use. This reduces the amount of fertilizer needed for a field, thus decreasing the leaching of fertilizer byproducts into water.7&lt;/p&gt;
    &lt;p&gt;Pivot Bio sidestepped some regulatory hurdles by avoiding the transfer of genes from one species to another; they simply remodeled their organism’s existing genome. The company still must get USDA approval to ship its product across state lines, but that is a simpler and less insurmountable regulatory hurdle.&lt;/p&gt;
    &lt;p&gt;In the case of hyperspectral reporters, there may be similar ways to circumvent the most onerous regulations. Even in this study, the R. gelatinosus strain engineered to make bacteriochlorophyll a did not have any DNA from foreign microbes. It could, in principle, sidestep the TSCA regulations. A startup called Fieldstone Bio has spun out from the Voigt laboratory with the goal of commercializing this hyperspectral technology.&lt;/p&gt;
    &lt;p&gt;Regardless, the barrier to commercializing these biosensors is not scientific feasibility but rather a patchwork of rules written long before anyone imagined microbes capable of broadcasting messages into space.&lt;/p&gt;
    &lt;p&gt;Still, it’s promising to see that synthetic biology is moving past its reliance on visible light toward a broader range of transducers that let us measure biology in places once thought inaccessible, from the molecules inside a tumor to antibiotic resistance genes hidden in soil. The challenge ahead is not discovering what cells can sense, but engineering more reliable ways for them to communicate those impressions back to us.&lt;/p&gt;
    &lt;p&gt;Niko McCarty is a founding editor of Asimov Press.&lt;/p&gt;
    &lt;p&gt;Thanks to Xander Balwit and Ella Watkins-Dulaney for reading drafts of this.&lt;/p&gt;
    &lt;p&gt;Cite: McCarty, Niko. “Seeing Microbes from the Sky.” Asimov Press (2025). https://doi.org/10.62211/23jr-64kt&lt;/p&gt;
    &lt;p&gt;These mussels are used as natural biosensors because they filter large amounts of water and quickly react to pollutants. When they sense harmful chemicals, heavy metals, or sudden changes in water quality, they clamp their shells shut to protect themselves. When they close, a piece of metal hot glued to their shell completes a circuit which alerts the city to check their water system.&lt;/p&gt;
    &lt;p&gt;The synthetic biology community borrows many terms from computer science and electrical engineering. In electrical engineering, a transducer is a part that converts what a sensor has detected into electrical signals. A biological transducer is any sort of read out that signals what a biosensor has detected.&lt;/p&gt;
    &lt;p&gt;Visible wavelengths of light only penetrate about one millimeter into the body, for example. There is a tissue transparency window between 800 and 950 nanometers, though, in which light penetrates about a centimeter.&lt;/p&gt;
    &lt;p&gt;They used three databases, called BKMS, MetaCyc, and Rhea.&lt;/p&gt;
    &lt;p&gt;Bacteriochlorophyll a absorbs infrared light with a wavelength of 860 nanometers.&lt;/p&gt;
    &lt;p&gt;The camera could see the microbes provided there were at least 4 million cells per square centimeter of sand. This is quite a large number of cells, though, as a square centimeter of human skin has between 100 thousand and one million cells. A single gram of soil usually contains hundreds of millions of microbes.&lt;/p&gt;
    &lt;p&gt;The Haber-Bosch process, used to make ammonia, also accounts for between 1-2 percent of all global CO2 emissions.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45438704</guid><pubDate>Wed, 01 Oct 2025 15:15:44 +0000</pubDate></item><item><title>No more "check mail from other accounts" in Gmail web</title><link>https://support.google.com/mail/answer/16604719?hl=en</link><description>&lt;doc fingerprint="fda841133f20facd"&gt;
  &lt;main&gt;&lt;p&gt;Starting January 2026, Gmail will no longer provide support for the following:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Gmailify: This feature allows you to get special features like spam protection or inbox organization applied to your third-party email account. Learn more about Gmailify.&lt;/item&gt;&lt;item&gt;POP: This feature allows you to read your messages from a third-party account in Gmail. Unlike IMAP connections, POP only works with a single device and doesn’t sync your email in real time. Instead, emails are downloaded, and you decide how often you want to download new emails. As an alternative, you can still link your third-party accounts in the Gmail app.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;These changes help provide the most secure and current options to access your messages in Gmail.&lt;/p&gt;&lt;head rend="h2"&gt;Learn about changes to Gmailify&lt;/head&gt;&lt;p&gt;You won’t be able to get specific features in Gmail applied to your third-party account, like:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Spam protection&lt;/item&gt;&lt;item&gt;Better email notifications on mobile&lt;/item&gt;&lt;item&gt;Inbox categories&lt;/item&gt;&lt;item&gt;Faster search with advanced search operators&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;What you need to do&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;You can still read and send emails from your other account within the Gmail app. This uses a standard IMAP connection, which is supported in the Gmail mobile app.&lt;/item&gt;&lt;item&gt;Learn how to add another email account to the Gmail app.&lt;/item&gt;&lt;/list&gt;&lt;head rend="h2"&gt;Learn about changes to POP connections&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;Gmail will no longer support checking emails from third-party accounts through POP.&lt;/item&gt;&lt;item&gt;The option to "Check mail from other accounts" will no longer be available in Gmail on your computer.&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;What you need to do&lt;/head&gt;&lt;p&gt;Important: If you have a work or school account, your administrator can help migrate your email data into Google Workspace. Learn more about the data migration service.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;To continue to receive messages from your other account in Gmail, you need to set up IMAP access. &lt;list rend="ul"&gt;&lt;item&gt;Check your email provider’s documentation for instructions on how to enable IMAP for your account.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;item&gt;To read your messages from your other account, use the Gmail app. Learn how to add another email account to the Gmail app.&lt;/item&gt;&lt;/list&gt;&lt;head rend="h2"&gt;Frequently asked questions&lt;/head&gt;Will I lose the emails I already imported?&lt;p&gt;No. All messages synced before the deprecation stay in Gmail.&lt;/p&gt;&lt;p&gt;Yes. For third-party accounts like Yahoo! and Outlook, you can add them to the Gmail mobile app on Android and iPhone and iPad.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45439670</guid><pubDate>Wed, 01 Oct 2025 16:25:58 +0000</pubDate></item><item><title>Fossabot: AI code review for Dependabot/Renovate on breaking changes and impacts</title><link>https://fossa.com/blog/fossabot-dependency-upgrade-ai-agent/</link><description>&lt;doc fingerprint="af4799a7096b4451"&gt;
  &lt;main&gt;
    &lt;p&gt;Today we're announcing fossabot, a new AI Agent for making strategic dependency updates, backed by a comprehensive accuracy, consistency, and correctness framework.&lt;/p&gt;
    &lt;p&gt;fossabot is able to deliver completed work just like an engineer, including researching new versions, finding app impact and adapating code if needed. This product fulfills our philosophy for automating dependency updates and EdgeBit acquisition.&lt;/p&gt;
    &lt;p&gt;fossabot is currently available as a public preview, with a focus on the JavaScript and TypeScript ecosystems.&lt;/p&gt;
    &lt;head rend="h3"&gt;Your dependencies are simultaneously moving too fast and too slow&lt;/head&gt;
    &lt;p&gt;For a decade, FOSSA has protected businesses from open source risk in two large categories: compliance and security. We’ve identified a new, third category of risk that is emerging: dependency churn and update stagnation.&lt;/p&gt;
    &lt;p&gt;AI coding agents churning out new repos and dependencies trees faster than we can follow.&lt;/p&gt;
    &lt;p&gt;At the same time, crown jewel apps can’t keep up with the fast pace of upstream development and fall more behind.&lt;/p&gt;
    &lt;p&gt;Neither are good, but fossabot is here to help...as if your best engineer managed updates 24/7.&lt;/p&gt;
    &lt;head rend="h3"&gt;Every dependency update program is broken&lt;/head&gt;
    &lt;p&gt;The root of the problem is that every enterprise dependency update program is broken. Why? Our tools can’t make strategic updates like our engineers are capable of.&lt;/p&gt;
    &lt;p&gt;Instead, enterprises focus is making the smallest update possible to fix an alert, only to do it again next month. No time is devoted to figuring out how to upgrade to the latest version of a package and the benefits it may bring to the app.&lt;/p&gt;
    &lt;p&gt;fossabot, our dependency updating AI agent, is capable of large complexity upgrades – the ones that require a senior engineer because they’re always an unexpected multi-hour research and coding task.&lt;/p&gt;
    &lt;p&gt;Bump lodash from &lt;code&gt;4.17.20&lt;/code&gt; to &lt;code&gt;4.17.21&lt;/code&gt;&lt;/p&gt;
    &lt;head rend="h3"&gt;Summary by fossabot&lt;/head&gt;
    &lt;p&gt;I recommend merging this lodash update from 4.17.20 to 4.17.21. This is a patch release that fixes several security vulnerabilities and includes performance improvements. Your application's usage patterns are compatible with this update.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;•Analyzed 47 files using lodash utilities across components/, utils/, and services/&lt;/item&gt;
      &lt;item&gt;•Verified no deprecated methods or breaking changes affect your codebase&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;Change Details&lt;/head&gt;
    &lt;p&gt;1. Fixed prototype pollution vulnerability in merge function&lt;/p&gt;
    &lt;p&gt;2. Improved input validation for template method&lt;/p&gt;
    &lt;p&gt;3. Enhanced sanitization in defaultsDeep&lt;/p&gt;
    &lt;p&gt;fossabot started out as an internal tool and became invaluable to our engineers and trusted testers, so we’re releasing it as a public preview for all to use.&lt;/p&gt;
    &lt;p&gt;fossabot is available as a GitHub app and all users get $15 in free usage credit each month.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why does fossabot work so well?&lt;/head&gt;
    &lt;p&gt;fossabot proposes strategic updates because it can balance risk vs. reward, understand breaking changes in the context of your app, and even adapt code to handle newer paradigms.&lt;/p&gt;
    &lt;p&gt;Existing updaters like Dependabot or Renovate can’t do this reasoning, so they end up being configured to be “dumb,” like patch releases only.&lt;/p&gt;
    &lt;p&gt;Plus, mechanically making the update is not the hard and slow part. It’s the research and understanding of risk to your app that takes forever and ultimately relegates most updates into the backlog forever.&lt;/p&gt;
    &lt;head rend="h3"&gt;Codebase Reasoning&lt;/head&gt;
    &lt;p&gt;fossabot analysis determines the impact of an update to your specific codebase and usage of dependencies instead of making guesses about compatibility, which allows for smart reasoning. Examples of this reasoning include:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Use a rewritten React library and update your component to use the more modern syntax&lt;/item&gt;
      &lt;item&gt;Upgrade a major version of a library safely because you use APIs in forward-compatible ways&lt;/item&gt;
      &lt;item&gt;Adapt your code to an undeclared behavior change in a patch update&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Here’s a partial excerpt of this reasoning in action:&lt;/p&gt;
    &lt;p&gt;fossabot uses a perfect balance of hard facts from static analysis paired with a scalable and detail-oriented AI.&lt;/p&gt;
    &lt;head rend="h3"&gt;Scale Through AI&lt;/head&gt;
    &lt;p&gt;fossabot outperforms human engineers because it can scale beyond what a reasonable person would do. It researches harder, deeper, and longer, with perfect memory about your first-party code, the dependency code and the library’s release notes, migration guides, and docs.&lt;/p&gt;
    &lt;p&gt;While a human would become fatigued after an hour (or even minutes), fossabot will keep going until every modified function is triaged and every impact is understood throughout your entire codebase.&lt;/p&gt;
    &lt;p&gt;No engineer can hold a full picture of dependency usage, especially when multiple teams are involved. fossabot is able to take in more analysis and relationships that can be mapped out in your brain.&lt;/p&gt;
    &lt;head rend="h3"&gt;Delivers Completed Tasks&lt;/head&gt;
    &lt;p&gt;Customers tell us that understanding the level of effort for a change can be just as hard as the update itself. When fossabot is in charge of your updates, you can skip all of this toil and receive completed tasks, delivered right to a pull request.&lt;/p&gt;
    &lt;p&gt;fossabot understands its limitations and can request assistance to “last-mile” an update across the finish line. Backed by our evaluation framework and ability to classify different types of updates, we’re confident in fossabot’s ability to handle large complexity updates in the JavaScript/TypeScript ecosystem.&lt;/p&gt;
    &lt;head rend="h2"&gt;From Internal Tool to Public Preview&lt;/head&gt;
    &lt;p&gt;Earlier this year, FOSSA engineers hypothesized that with the right context, we could eliminate the toil from dependency updates. We started providing a custom AI framework with details from FOSSA’s dependency metadata scanning, upgrade path guidance, and open source health signals. This grew into a robust breaking change detection engine that continues to surprise us with its detail and accuracy.&lt;/p&gt;
    &lt;p&gt;With breaking changes found, the next challenge was impact detection for each customer’s codebase. Static analysis is the ideal tool for this, which led to a partnership and eventual acquisition of EdgeBit, which pioneered a new type analysis that is designed for dependency update use-cases.&lt;/p&gt;
    &lt;p&gt;Static analysis prevents the AI agent from making silly mistakes, and in our experience, perfectly balances the desired fuzziness you gain from using AI agents and sub agents. fossabot resembles a “focused agent” that resembles a pipeline for determinism but includes agentic steps as well.&lt;/p&gt;
    &lt;head rend="h2"&gt;Accuracy, Consistency, Correctness&lt;/head&gt;
    &lt;p&gt;While iterating on fossabot, we quickly realized that the evaluation framework and ground truth dataset was just as important as the tool itself, and in many ways, just as challenging as writing the code.&lt;/p&gt;
    &lt;p&gt;fossabot continually scores itself on Accuracy, Consistency, Correctness (ACC) against a set of validated dependency updates with varying degrees of breaking changes, changed lines of code and usage of those libraries in real-world apps.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Accuracy, Consistency, Correctness by Group &amp;amp; Complexity&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Group&lt;/cell&gt;
        &lt;cell&gt;Complexity&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;routine_minor_updates&lt;/cell&gt;
        &lt;cell&gt;low&lt;/cell&gt;
        &lt;cell&gt;medium&lt;/cell&gt;
        &lt;cell&gt;high&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;multi_dependency_updates&lt;/cell&gt;
        &lt;cell&gt;low&lt;/cell&gt;
        &lt;cell&gt;medium&lt;/cell&gt;
        &lt;cell&gt;high&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;major_version_upgrades&lt;/cell&gt;
        &lt;cell&gt;low&lt;/cell&gt;
        &lt;cell&gt;medium&lt;/cell&gt;
        &lt;cell&gt;high&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;dev_dependencies&lt;/cell&gt;
        &lt;cell&gt;low&lt;/cell&gt;
        &lt;cell&gt;medium&lt;/cell&gt;
        &lt;cell&gt;high&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;This process quickly highlighted a key learning: the importance of weighted scoring in our evaluation. A false positive (where the tool incorrectly deems a breaking change safe) carries a much higher cost in terms of potential disruption and lost trust than a false negative (where a safe update is flagged for extra scrutiny). This phase also helped us debunk early, overly simplistic assumptions, such as the fallacy that all major version upgrades are inherently breaking.&lt;/p&gt;
    &lt;p&gt;Our public preview is targeted at the JavaScript/TypeScript ecosystem because our ACC dataset is robustly populated — other ecosystems will follow shortly as we build out more ground truth.&lt;/p&gt;
    &lt;p&gt;We believe that several design decisions set at the genesis of fossabot make it a trusted foundation:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Striving for determinism at key steps&lt;/item&gt;
      &lt;item&gt;Smartly using static analysis&lt;/item&gt;
      &lt;item&gt;Use AI to be doggedly persistent and detail oriented&lt;/item&gt;
      &lt;item&gt;Measuring ourselves against the ACC ground truth&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We hope fossabot earns your trust, and we’d love your feedback on analysis that looks great or needs refinement.&lt;/p&gt;
    &lt;head rend="h2"&gt;Try Out fossabot&lt;/head&gt;
    &lt;p&gt;fossabot’s public preview is available as a GitHub app. Every user gets $15 of analysis credit, replenished every month. Let loose the updates!&lt;/p&gt;
    &lt;p&gt;Today, fossabot will auto-analyze Pull Requests opened from Dependabot, Renovate or Snyk. Soon, fossabot will open its own PRs with pre-planning and pre-analysis taken into account.&lt;/p&gt;
    &lt;p&gt;Reach out to get a demo of fossabot and let's figure out how to get your teams caught up on updates.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45439721</guid><pubDate>Wed, 01 Oct 2025 16:30:16 +0000</pubDate></item><item><title>DuckDuckGo Donates $25,000 to The Perl and Raku Foundation v2025</title><link>https://www.perl.com/article/duckduckgo-donates-25-000-to-the-perl-and-raku-foundation-v2025/</link><description>&lt;doc fingerprint="7f060808cbcd80d4"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;DuckDuckGo Donates $25,000 to The Perl and Raku Foundation v2025&lt;/head&gt;
    &lt;p&gt;For the second consecutive year, The Perl and Raku Foundation (TPRF) is overjoyed to announce a donation of USD 25,000 from DuckDuckGo.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;DuckDuckGo has demonstrated how Perl and its ecosystem can deliver power and scale to drive the DuckDuckGo core systems, plug-in framework and Instant Answers. The Foundation is grateful that DuckDuckGo recognises the importance of Perl, and for their generous funding support for a second year through their charitable donations programme.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;– Stuart J Mackintosh, President of The Perl and Raku Foundation&lt;/p&gt;
    &lt;p&gt;Last year’s donation of USD 25,000 from DuckDuckGo was instrumental in helping to fund the foundation’s Core Perl Maintenance Fund and this year’s donation will help to fund more of the same crucial work that keeps the Perl language moving forward.&lt;/p&gt;
    &lt;p&gt;Paul “LeoNerd” Evans is one of the developers who gets regular funding from the Perl Core Maintenance Fund. Here is a short list of just some of the many contributions which Paul has made to core Perl as part of the maintenance fund work:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The builtin module (5.36), making available many new useful language-level utilities that were previously loaded from modules like Scalar::Util&lt;/item&gt;
      &lt;item&gt;The complete feature ‘class’ system (5.38), adding proper object-orientation syntax and abilities&lt;/item&gt;
      &lt;item&gt;Lexical method support (5.42), adding &lt;code&gt;my method&lt;/code&gt;and the&lt;code&gt;$obj-&amp;gt;&amp;amp;method&lt;/code&gt;invocation syntax for better object encapsulation&lt;/item&gt;
      &lt;item&gt;Stabilising some of the recent experiments - signatures (5.36), try/catch (5.40), foreach on multiple vars (5.40)&lt;/item&gt;
      &lt;item&gt;Ability to use the //= and ||= operators in signatures (5.38), performance improvements and named parameters (upcoming in next release)&lt;/item&gt;
      &lt;item&gt;The new any and all keywords (5.42)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We look forward to many more innovative contributions from Paul over the coming year.&lt;/p&gt;
    &lt;p&gt;While TPRF never takes continued support for granted, when it does arrive, it allows the foundation to plan for the future with much greater confidence. Multi-year partnerships with our sponsors allow us to continue to prioritize important work, knowing that we will have the runway that we need to fund the work which helps to sustain the Perl Language and its associated communities.&lt;/p&gt;
    &lt;p&gt;For more information on how to become a sponsor, please contact: olaf@perlfoundation.org&lt;/p&gt;
    &lt;p&gt;"Fireworks" by colink. is licensed under CC BY-SA 2.0.&lt;/p&gt;
    &lt;p&gt;Tags&lt;/p&gt;
    &lt;head rend="h3"&gt;Olaf Alders&lt;/head&gt;
    &lt;p&gt;Dad, Perl hacker, guitar player and swimmer. Olaf is a founder of the MetaCPAN project.&lt;/p&gt;
    &lt;head rend="h5"&gt;Browse their articles&lt;/head&gt;
    &lt;head rend="h3"&gt;Feedback&lt;/head&gt;
    &lt;p&gt;Something wrong with this article? Help us out by opening an issue or pull request on GitHub&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45439883</guid><pubDate>Wed, 01 Oct 2025 16:42:50 +0000</pubDate></item><item><title>Codeberg Reaches 300k Projects</title><link>https://codeberg.org/</link><description>&lt;doc fingerprint="eb48f21133b6a1f5"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Software development, but free!&lt;/head&gt;
    &lt;p&gt;Codeberg is a non-profit, community-led effort that provides Git hosting and other services for free and open source projects.&lt;/p&gt;
    &lt;head rend="h3"&gt;NON-PROFIT&lt;/head&gt;
    &lt;p&gt;Codeberg is maintained by the non-profit organization Codeberg e.V., based in Berlin, Germany. For us, supporting the commons comes first.&lt;/p&gt;
    &lt;p&gt;Its future is in the hands of its users. You can help too!&lt;/p&gt;
    &lt;head rend="h3"&gt;COMMUNITY&lt;/head&gt;
    &lt;p&gt;We are more than just Git hosting: Our community is comprised of like-minded developers, artists, academics, hobbyists and professionals.&lt;/p&gt;
    &lt;p&gt;We celebrate free culture, openness and creativity.&lt;/p&gt;
    &lt;head rend="h3"&gt;RESPECT&lt;/head&gt;
    &lt;p&gt;No tracking. No third-party cookies. No profiteering. Everything runs on servers that we control. Your data is not for sale.&lt;/p&gt;
    &lt;p&gt;Hosted in Europe, we welcome the world.&lt;/p&gt;
    &lt;head rend="h3"&gt;Your support helps us grow!&lt;/head&gt;
    &lt;p&gt;Our non-profit structure reinforces our independence. Your donations and contributions sustain our community. Help us achieve our mission by joining Codeberg e.V. as a supporting or active member with full voting rights!&lt;/p&gt;
    &lt;p&gt;Free as in freedom, not as in beer! Maintaining our systems and developing our software has its costs, which are backed by optional donations. We appreciate them a lot, as they help provide a better service for everyone.&lt;/p&gt;
    &lt;p&gt;Powered by Free Software! Get involved with Codeberg and help improve your experience. We are always looking for contributions to our projects and services.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45439955</guid><pubDate>Wed, 01 Oct 2025 16:48:20 +0000</pubDate></item><item><title>Why Is Python So Popular in 2025? – The PyCharm Blog</title><link>https://blog.jetbrains.com/pycharm/2025/09/why-is-python-so-popular/</link><description>&lt;doc fingerprint="a5d967f58e95b230"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Why Is Python So Popular in 2025?&lt;/head&gt;
    &lt;p&gt;While other programming languages come and go, Python has stood the test of time and firmly established itself as a top choice for developers of all levels, from beginners to seasoned professionals.&lt;/p&gt;
    &lt;p&gt;Whether you’re working on intelligent systems or data-driven workflows, Python has a pivotal role to play in how your software is built, scaled, and optimized.&lt;/p&gt;
    &lt;p&gt;Many surveys, including our upcoming Developer Ecosystem Survey 2025, confirm Python’s continued popularity. The real question is why developers keep choosing it, and that’s what we’ll explore.&lt;/p&gt;
    &lt;p&gt;Whether you’re choosing your first language or building production-scale services, this post will walk you through why Python remains a top choice for developers.&lt;/p&gt;
    &lt;head rend="h2"&gt;How popular is Python in 2025?&lt;/head&gt;
    &lt;p&gt;In our Developer Ecosystem Survey 2025, Python ranks as the second most-used programming language in the last 12 months, with 57% of developers reporting that they use it.&lt;/p&gt;
    &lt;p&gt;More than a third (34%) said Python is their primary programming language. This places it ahead of JavaScript, Java, and TypeScript in terms of primary use. It’s also performing well despite fierce competition from newer systems and niche domain tools.&lt;/p&gt;
    &lt;p&gt;These stats tell a story of sustained relevance across diverse developer segments, from seasoned backend engineers to first-time data analysts.&lt;/p&gt;
    &lt;p&gt;This continued success is down to Python’s ability to grow with you. It doesn’t just serve as a first step; it continues adding value in advanced environments as you gain skills and experience throughout your career.&lt;/p&gt;
    &lt;p&gt;Let’s explore why Python remains a popular choice in 2025.&lt;/p&gt;
    &lt;head rend="h2"&gt;1. Dominance in AI and machine learning&lt;/head&gt;
    &lt;p&gt;Our recently released report, The State of Python 2025, shows that 41% of Python developers use the language specifically for machine learning.&lt;/p&gt;
    &lt;p&gt;This is because Python drives innovation in areas like natural language processing, computer vision, and recommendation systems.&lt;/p&gt;
    &lt;p&gt;Python’s strength in this area comes from the fact that it offers support at every stage of the process, from prototyping to production. It also integrates into machine learning operations (MLOps) pipelines with minimal friction and high flexibility.&lt;/p&gt;
    &lt;p&gt;One of the most significant reasons for Python’s popularity is its syntax, which is expressive, readable, and dynamic. This allows developers to write training loops, manipulate tensors, and orchestrate workflows without boilerplate friction.&lt;/p&gt;
    &lt;p&gt;However, it’s Python’s ecosystem that makes it indispensable.&lt;/p&gt;
    &lt;p&gt;Core frameworks include:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;PyTorch – for research-oriented deep learning&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;TensorFlow – for production deployment and scalability&lt;/item&gt;
      &lt;item&gt;Keras – for rapid prototyping&lt;/item&gt;
      &lt;item&gt;scikit-learn – for classical machine learning&lt;/item&gt;
      &lt;item&gt;Hugging Face Transformers – for natural language processing and generative models&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;These frameworks are mature, well-documented, and interoperable, benefitting from rapid open-source development and extensive community contributions. They support everything from GPU acceleration and distributed training to model export and quantization.&lt;/p&gt;
    &lt;p&gt;Python also integrates cleanly across the machine learning (ML) pipeline, from data preprocessing with pandas and NumPy to model serving via FastAPI or Flask to inference serving for LLMs with vLLM.&lt;/p&gt;
    &lt;p&gt;It all comes together to provide a solution that allows you to deliver a working AI solution without ever really having to work outside Python.&lt;/p&gt;
    &lt;head rend="h2"&gt;2. Strength in data science and analytics&lt;/head&gt;
    &lt;p&gt;From analytics dashboards to ETL scripts, Python’s flexibility drives fast, interpretable insights across industries. It’s particularly adept at handling complex data, such as time-series analyses.&lt;/p&gt;
    &lt;p&gt;The State of Python 2025 reveals that 51% of respondents are involved in data exploration and processing. This includes tasks like:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Data extraction, transformation, and loading (ETL)&lt;/item&gt;
      &lt;item&gt;Exploratory data analysis (EDA)&lt;/item&gt;
      &lt;item&gt;Statistical and predictive modeling&lt;/item&gt;
      &lt;item&gt;Visualization and reporting&lt;/item&gt;
      &lt;item&gt;Real-time data analysis&lt;/item&gt;
      &lt;item&gt;Communication of insights&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Core libraries such as pandas, NumPy, Matplotlib, Plotly, and Jupyter Notebook form a mature ecosystem that’s supported by strong documentation and active community development.&lt;/p&gt;
    &lt;p&gt;Python offers a unique balance. It’s accessible enough for non-engineers, but powerful enough for production-grade pipelines. It also integrates with cloud platforms, supports multiple data formats, and works seamlessly with SQL and NoSQL data stores.&lt;/p&gt;
    &lt;head rend="h2"&gt;3. Syntax that’s simple and scalable&lt;/head&gt;
    &lt;p&gt;Python’s most visible strength remains its readability. Developers routinely cite Python’s low barrier to entry and clean syntax as reasons for initial adoption and longer-term loyalty. In Python, even model training syntax reads like plain English:&lt;/p&gt;
    &lt;quote&gt;def train(model): for item in model.data: model.learn(item)&lt;/quote&gt;
    &lt;p&gt;Code snippets like this require no special decoding. That clarity isn’t just beginner-friendly; it also lowers maintenance costs, shortens onboarding time, and improves communication across mixed-skill teams.&lt;/p&gt;
    &lt;p&gt;This readability brings practical advantages. Teams spend less time deciphering logic and more time improving functionality. Bugs surface faster. Reviews run more smoothly. And non-developers can often read Python scripts without assistance.&lt;/p&gt;
    &lt;p&gt;The State of Python 2025 revealed that 50% of respondents had less than two years of total coding experience. Over a third (39%) had been coding in Python for two years or less, even in hobbyist or educational settings.&lt;/p&gt;
    &lt;p&gt;This is where Python really stands out. Though its simple syntax makes it an ideal entry point for new coders, it scales with users, which means retention rates remain high. As projects grow in complexity, Python’s simplicity becomes a strength, not a limitation.&lt;/p&gt;
    &lt;p&gt;Add to this the fact that Python supports multiple programming paradigms (procedural, object-oriented, and functional), and it becomes clear why readability is important. It’s what enables developers to move between approaches without friction.&lt;/p&gt;
    &lt;head rend="h2"&gt;4. A mature and versatile ecosystem&lt;/head&gt;
    &lt;p&gt;Python’s power lies in its vast network of libraries that span nearly every domain of modern software development.&lt;/p&gt;
    &lt;p&gt;Our survey shows that developers rely on Python for everything from web applications and API integration to data science, automation, and testing.&lt;/p&gt;
    &lt;p&gt;Its deep, actively maintained toolset means you can use Python at all stages of production.&lt;/p&gt;
    &lt;p&gt;Here’s a snapshot of Python’s core domains and the main libraries developers reach for:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Domain&lt;/cell&gt;
        &lt;cell&gt;Popular Libraries&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Web development&lt;/cell&gt;
        &lt;cell&gt;Django, Flask, FastAPI&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;AI and ML&lt;/cell&gt;
        &lt;cell&gt;TensorFlow, PyTorch, scikit-learn, Keras&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Testing&lt;/cell&gt;
        &lt;cell&gt;pytest, unittest, Hypothesis&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Automation&lt;/cell&gt;
        &lt;cell&gt;Click, APScheduler, Rich&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Data science&lt;/cell&gt;
        &lt;cell&gt;pandas, NumPy, Plotly, Matplotlib&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;This breadth translates to real-world agility. Developers can move between back-end APIs and machine learning pipelines without changing language or tooling. They can prototype with high-level wrappers and drop to lower-level control when needed.&lt;/p&gt;
    &lt;p&gt;Critically, Python’s packaging and dependency management systems like pip, conda, and poetry support modular development and reproducible environments. Combined with frameworks like FastAPI for APIs, pytest for testing, and pandas for data handling, Python offers unrivaled scalability.&lt;/p&gt;
    &lt;head rend="h2"&gt;5. Community support and shared knowledge&lt;/head&gt;
    &lt;p&gt;Python’s enduring popularity owes much to its global, engaged developer community.&lt;/p&gt;
    &lt;p&gt;From individual learners to enterprise teams, Python users benefit from open forums, high-quality tutorials, and a strong culture of mentorship. The community isn’t just helpful, it’s fast-moving and inclusive, fostering a welcoming environment for developers of all levels.&lt;/p&gt;
    &lt;p&gt;Key pillars include:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The Python Software Foundation, which supports education, events, and outreach.&lt;/item&gt;
      &lt;item&gt;High activity on Stack Overflow, ensuring quick answers to real-world problems, and active participation in open-source projects and local user groups.&lt;/item&gt;
      &lt;item&gt;A rich landscape of resources (Real Python, Talk Python, and PyCon), serving both beginners and professionals.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This network doesn’t just solve problems; it also shapes the language’s evolution. Python’s ecosystem is sustained by collaboration, continual refinement, and shared best practices.&lt;/p&gt;
    &lt;p&gt;When you choose Python, you tap into a knowledge base that grows with the language and with you over time.&lt;/p&gt;
    &lt;head rend="h2"&gt;6. Cross-domain versatility&lt;/head&gt;
    &lt;p&gt;Python’s reach is not limited to AI and ML or data science and analytics. It’s equally at home in automation, scripting, web APIs, data workflows, and systems engineering. Its ability to move seamlessly across platforms, domains, and deployment targets makes it the default language for multipurpose development.&lt;/p&gt;
    &lt;p&gt;The State of Python 2025 shows just how broadly developers rely on Python:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Functionality&lt;/cell&gt;
        &lt;cell&gt;Percentage of Python users&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Data analysis&lt;/cell&gt;
        &lt;cell&gt;48%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Web development&lt;/cell&gt;
        &lt;cell&gt;46%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Machine learning&lt;/cell&gt;
        &lt;cell&gt;41%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Data engineering&lt;/cell&gt;
        &lt;cell&gt;31%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Academic research&lt;/cell&gt;
        &lt;cell&gt;27%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;DevOps and systems administration&lt;/cell&gt;
        &lt;cell&gt;26%&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;That spread illustrates Python’s domain elasticity. The same language that powers model training can also automate payroll tasks, control scientific instruments, or serve REST endpoints. Developers can consolidate tools, reduce context-switching, and streamline team workflows.&lt;/p&gt;
    &lt;p&gt;Python’s platform independence (Windows, Linux, MacOS, cloud, and browser) reinforces this versatility. Add in a robust packaging ecosystem and consistent cross-library standards, and the result is a language equally suited to both rapid prototyping and enterprise production.&lt;/p&gt;
    &lt;p&gt;Few languages match Python’s reach, and fewer still offer such seamless continuity. From frontend interfaces to backend logic, Python gives developers one cohesive environment to build and ship full solutions.&lt;/p&gt;
    &lt;p&gt;That completeness is part of the reason people stick with it. Once you’re in, you rarely need to reach for anything else.&lt;/p&gt;
    &lt;head rend="h2"&gt;Python in the age of intelligent development&lt;/head&gt;
    &lt;p&gt;As software becomes more adaptive, predictive, and intelligent, Python is strongly positioned to retain its popularity.&lt;/p&gt;
    &lt;p&gt;Its abilities in areas like AI, ML, and data handling, as well as its mature libraries, make it a strong choice for systems that evolve over time.&lt;/p&gt;
    &lt;p&gt;Python’s popularity comes from its ability to easily scale across your projects and platforms. It continues to be a great choice for developers of all experience levels and across projects of all sizes, from casual automation scripts to enterprise AI platforms.&lt;/p&gt;
    &lt;p&gt;And when working with PyCharm, Python is an intelligent, fast, and clean option.&lt;/p&gt;
    &lt;p&gt;For a deeper dive, check out The State of Python 2025 by Michael Kennedy, Python expert and host of the Talk Python to Me podcast.&lt;/p&gt;
    &lt;p&gt;Michael analyzed over 30,000 responses from our Python Developers Survey 2024, uncovering fascinating insights and identifying the latest trends.&lt;/p&gt;
    &lt;p&gt;Whether you’re a beginner or seasoned developer, The State of Python 2025 will give you the inside track on where the language is now and where it’s headed.&lt;/p&gt;
    &lt;p&gt;As tools like Astral’s uv show, Python’s evolution is far from over, despite its relative maturity. With a growing ecosystem and proven staying power, it’s well-positioned to remain a popular choice for developers for years to come.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45440005</guid><pubDate>Wed, 01 Oct 2025 16:52:21 +0000</pubDate></item><item><title>Walmart U.S. moves to eliminate synthetic dyes across all private brand foods</title><link>https://corporate.walmart.com/news/2025/10/01/walmart-u-s-moves-to-eliminate-synthetic-dyes-across-all-private-brand-food-products</link><description>&lt;doc fingerprint="bc0f186559b7c3de"&gt;
  &lt;main&gt;
    &lt;p&gt;BENTONVILLE, Ark., Oct. 1, 2025 — Walmart U.S. today announced it is moving to eliminate synthetic dyes and the use of an additional 30 ingredients, including certain preservatives, artificial sweeteners and fat substitutes from its private brand food products. This action is a significant step forward in its ongoing mission to provide customers with affordable, high-quality private brand products.&lt;/p&gt;
    &lt;p&gt;The change, which includes all Walmart U.S. food private brands such as Great Value, Marketside, Freshness Guaranteed and bettergoods, is in line with evolving customer preferences and in support of a more transparent food system.&lt;/p&gt;
    &lt;p&gt;“Our customers have told us that they want products made with simpler, more familiar ingredients — and we’ve listened. By eliminating synthetic dyes and other ingredients, we’re reinforcing our promise to deliver affordable food that families can feel good about.”&lt;/p&gt;
    &lt;p&gt;John Furner, President and CEO, Walmart U.S.&lt;/p&gt;
    &lt;p&gt;The move comes as part of Walmart’s journey to evolve its private brands in response to changing customer preferences. According to a new survey, Walmart customers are increasingly more interested in what’s in their food, with sixty-two percent of customers saying they want more transparency and fifty-four percent saying they review food ingredients.1&lt;/p&gt;
    &lt;p&gt;This growing trend among customers is in part why last year, the retailer launched bettergoods, a quality, chef-inspired private brand which includes a line of plant-based and “made without” items, with 70% of the items under $5.&lt;/p&gt;
    &lt;p&gt;While this move is one of the largest private brand reformulations in retail history, it isn’t the first time Walmart has removed ingredients customers don’t want. Today, about 90% of Walmart U.S. food private brand products are free from synthetic dyes.&lt;/p&gt;
    &lt;p&gt;“This commitment demonstrates how Walmart is responding to changing customer preferences, while also setting the standard for providing exceptional quality and innovation at an outstanding value,” said Furner.&lt;/p&gt;
    &lt;p&gt;The retailer is working with private brand suppliers to adjust formulations and source alternative ingredients, while preserving the same great taste customers have come to expect. Walmart customers will begin to see the reformulated products rolling out over the coming months, with longer lead time changes planned to wrap up by January 2027 at the latest.&lt;/p&gt;
    &lt;head rend="h3"&gt;Ingredients List&lt;/head&gt;
    &lt;p&gt;In addition to dyes, these 30 ingredients are also being removed from Walmart U.S. private brand foods.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Titanium Dioxide&lt;/item&gt;
      &lt;item&gt;Azodicarbonamide&lt;/item&gt;
      &lt;item&gt;Dicotyl Sodium Sulfosuccinate (DSS)&lt;/item&gt;
      &lt;item&gt;Sucrose Polyester&lt;/item&gt;
      &lt;item&gt;Toluene&lt;/item&gt;
      &lt;item&gt;Anisole&lt;/item&gt;
      &lt;item&gt;Lye&lt;/item&gt;
      &lt;item&gt;Morpholine&lt;/item&gt;
      &lt;item&gt;Propylene oxide&lt;/item&gt;
      &lt;item&gt;Sodium Stearyl Fumarate&lt;/item&gt;
      &lt;item&gt;Stearyl tartrate&lt;/item&gt;
      &lt;item&gt;Ficin&lt;/item&gt;
      &lt;item&gt;Synthetic trans fatty acid&lt;/item&gt;
      &lt;item&gt;Butylparaben&lt;/item&gt;
      &lt;item&gt;Lactylated Esters of Mon &amp;amp; Diglycerides (OLEON)&lt;/item&gt;
      &lt;item&gt;Methylparaben&lt;/item&gt;
      &lt;item&gt;Propylparaben&lt;/item&gt;
      &lt;item&gt;Calcium Bromate&lt;/item&gt;
      &lt;item&gt;Potassium Bromate&lt;/item&gt;
      &lt;item&gt;Bromated flour&lt;/item&gt;
      &lt;item&gt;Neotame&lt;/item&gt;
      &lt;item&gt;Advantame&lt;/item&gt;
      &lt;item&gt;Phthalates&lt;/item&gt;
      &lt;item&gt;Potassium Bisulfite&lt;/item&gt;
      &lt;item&gt;Potassium Nitrate&lt;/item&gt;
      &lt;item&gt;Potassium Nitrite&lt;/item&gt;
      &lt;item&gt;Simplesse&lt;/item&gt;
      &lt;item&gt;Sodium Ferrocyanide (aka Yellow Prussiate of Soda)&lt;/item&gt;
      &lt;item&gt;Sucroglycerides&lt;/item&gt;
      &lt;item&gt;Talc&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;1 Data source: Walmart Customer Insights: National Survey July 2025&lt;/p&gt;
    &lt;p&gt;About Walmart&lt;/p&gt;
    &lt;p&gt;Walmart Inc. (NYSE: WMT) is a people-led, tech-powered omnichannel retailer helping people save money and live better — anytime and anywhere — in stores, online, and through their mobile devices. Each week, approximately 270 million customers and members visit more than 10,750 stores and numerous eCommerce websites in 19 countries. With fiscal year 2025 revenue of $681 billion, Walmart employs approximately 2.1 million associates worldwide. Walmart continues to be a leader in sustainability, corporate philanthropy, and employment opportunity. Additional information about Walmart can be found by visiting corporate.walmart.com, on Facebook at facebook.com/walmart, on X (formerly known as Twitter) at twitter.com/walmart, and on LinkedIn at linkedin.com/company/walmart.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45440028</guid><pubDate>Wed, 01 Oct 2025 16:54:05 +0000</pubDate></item><item><title>Supreme Court lets Fed Governor Cook keep job pending oral argument in January</title><link>https://www.cnbc.com/2025/10/01/supreme-court-trump-fed-lisa-cook.html</link><description>&lt;doc fingerprint="ac08a7642d29faf9"&gt;
  &lt;main&gt;
    &lt;p&gt;The Supreme Court on Wednesday allowed Federal Reserve Governor Lisa Cook to remain in her post pending oral arguments in January on whether President Donald Trump has legal cause to fire her.&lt;/p&gt;
    &lt;p&gt;The court's move is a blow to Trump, who has repeatedly and unsuccessfully asked federal courts to allow him to terminate Cook from the Fed's Board of Governors without delay while her lawsuit challenging her removal is pending.&lt;/p&gt;
    &lt;p&gt;Trump has cited claims that Cook committed mortgage fraud as his reason for firing her from the seven-member board.&lt;/p&gt;
    &lt;p&gt;But his first effort to remove her in August came after he, for months, had unsuccessfully pressured her, Fed Chairman Jerome Powell, and other members of the central bank to cut interest rates&lt;/p&gt;
    &lt;p&gt;Cook denies any wrongdoing in connection with statements she made before joining the Fed in applying for mortgages on two homes she owns in Michigan and Georgia. She has not been legally charged with making false statements on those mortgage applications.&lt;/p&gt;
    &lt;p&gt;In its order on Wednesday, the Supreme Court bluntly said, without elaboration, that Trump's request to stay a federal district court's injunction against removing Cook is "deferred pending oral argument in January 2026." The actual date of the argument was not set.&lt;/p&gt;
    &lt;p&gt;The order said that the Supreme Court's clerk would establish a schedule for the filing of legal briefs in the case, including ones by outside parties who have an interest in the outcome.&lt;/p&gt;
    &lt;p&gt;The Trump administration's effort to remove Cook is seen as a potential landmark case on whether to maintain the Fed's long-held veneer of independence from political interference.&lt;/p&gt;
    &lt;p&gt;Trump has insisted that the accusations against Cook meet the standard of "cause" required by the Federal Reserve Act to remove a Fed official.&lt;/p&gt;
    &lt;p&gt;The Department of Justice in earlier filings had called the injunction barring Trump from firing Cook while her lawsuit is pending "yet another case of improper judicial interference with the President's removal authority.&lt;/p&gt;
    &lt;p&gt;Cook's lawyers, Abbe Lowell and Norm Eisen, in a statement after the Supreme Court issued its order, said, "The Court's decision rightly allows Governor Cook to continue in her role on the Federal Reserve Board, and we look forward to further proceedings consistent with the Court's order."&lt;/p&gt;
    &lt;p&gt;White House spokesman Kush Desai, in a statement, said, "President Trump lawfully removed Lisa Cook for cause from the Federal Reserve Board of Governors."&lt;/p&gt;
    &lt;p&gt;"We look forward to ultimate victory after presenting our oral arguments before the Supreme Court in January," Desai said.&lt;/p&gt;
    &lt;p&gt;The Fed declined to comment other than restating its position that it will abide by any court decisions.&lt;/p&gt;
    &lt;p&gt;Wednesday's order allows the Fed to conduct business as usual, at least through the end of the year.&lt;/p&gt;
    &lt;p&gt;Cook will vote at the Federal Open Market Committee's October and December meetings, and possibly at the FOMC's January meeting.&lt;/p&gt;
    &lt;p&gt;The FOMC in September voted to lower its benchmark borrowing rate by a quarter-percentage point.&lt;/p&gt;
    &lt;p&gt;In addition, officials indicated additional quarter-percentage-point reductions at each of the two remaining meetings this year.&lt;/p&gt;
    &lt;p&gt;Cook participated in the FOMC during that meeting over Trump's protests.&lt;/p&gt;
    &lt;p&gt;She voted for the quarter-point cut, while Trump's newest Fed governor appointment, Stephen Miran, dissented from the cut, saying he wanted a half-point reduction.&lt;/p&gt;
    &lt;p&gt;Miran also indicated in the committee's "dot plot" of individual expectations that he wants to see another 1.25 percentage points lopped off the funds rate by the end of 2025.&lt;/p&gt;
    &lt;p&gt;Cook has not indicated a preference, though, like Powell, she has advocated a cautious approach to easing policy.&lt;/p&gt;
    &lt;p&gt;— CNBC's Jim Forkin contributed to this story.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45440207</guid><pubDate>Wed, 01 Oct 2025 17:08:41 +0000</pubDate></item><item><title>Why Tech Inevitability is Self-Defeating</title><link>https://deviantabstraction.com/2025/09/29/against-the-tech-inevitability/</link><description>&lt;doc fingerprint="2c389bc7ad46364b"&gt;
  &lt;main&gt;
    &lt;p&gt;My dear startup founder friend,&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt;You told me that everything is “hyper-determined,” that “life is a big game because of that.” You’re not alone in thinking this: Silicon Valley loves to preach inevitability.&lt;/p&gt;
    &lt;head rend="h2"&gt;A Silicon Valley paradox&lt;/head&gt;
    &lt;p&gt;“Technology has its own agenda.” — Kevin Kelly https://kk.org/thetechnium/the-unabomber-w/&lt;/p&gt;
    &lt;p&gt;“Technology happens because it is possible.” — Sam Altman https://www.nytimes.com/2023/03/31/technology/sam-altman-open-ai-chatgpt.html&lt;/p&gt;
    &lt;p&gt;“Probability that AI exceeds the intelligence of all humans combined by 2030 is ~100%.” — Elon Musk https://x.com/elonmusk/status/1871083864111919134?lang=fr&lt;/p&gt;
    &lt;p&gt;Notice the pattern: inevitability, inevitability, inevitability.&lt;/p&gt;
    &lt;p&gt;Precisely what you believe.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt;Yet in reality, they could have gone surfing, lived quietly, done nothing. However, they worked obsessively, raised money, built companies, and reshaped the world. That was their agency, fully deployed.&lt;/p&gt;
    &lt;p&gt;You’ll say, “They got lucky, it had to happen, if not them someone else. That’s why we all work ourselves to the bone.”&lt;/p&gt;
    &lt;p&gt;Now hear me out: I believe they worked hard to achieve this outcome and they deserve the credit. But I also believe that with success comes responsibility — responsibility that evaporates the moment y’all imply inevitability.&lt;/p&gt;
    &lt;p&gt;My goal here is to show you why the trope “it was inevitable” is misleading and it shifts responsibility away from those with power.&lt;/p&gt;
    &lt;p&gt;To be clear, versions of this reasoning have appeared often in “pop science” and academic writing so I’m not claiming originality, but I hope to convince you that treating inevitability as fact comes with important downsides and it’s better to manage your life as if you’d had agency.&lt;/p&gt;
    &lt;head rend="h2"&gt;&lt;lb/&gt;inevitability&lt;/head&gt;
    &lt;p&gt;What Silicon Valley calls inevitability is really a rhetorical posture: a way of talking about the future as if it could not be otherwise. It borrows from different philosophical schools of thought (fatalism, determinism, technological determinism) — each distinct, and often incompatible.&lt;/p&gt;
    &lt;p&gt;This patchwork coalesces around the idea that it is inevitable and I don’t matter as an individual (because someone else would have done it). “This will happen nevertheless (even if I choose to fight it).”&lt;/p&gt;
    &lt;p&gt;This is oddly compatible with their obsessive work: being the one who succeeds is merely a matter of luck and we help luck through hard work.&lt;/p&gt;
    &lt;head rend="h2"&gt;True Prophets and False Predictions&lt;/head&gt;
    &lt;p&gt;Tomorrow the sun will rise is a rock-solid prediction. Objects fall to the ground. Everyone dies. These sentences are so reliable we call them laws. We believe in them.&lt;/p&gt;
    &lt;p&gt;Belief is an act of faith: we trust the future will resemble the past, that the laws won’t suddenly change. Yes, that trust has been earned through millennia of confirmation, but it’s still a belief in regularity. Just ask the turkey on Thanksgiving Day, who believed sunrise meant good food and safety…&lt;/p&gt;
    &lt;p&gt;So even laws of nature require belief, and much more so for “social predictions” that are rooted in much fewer facts. When Sam is saying AI is inevitable, how can I tell if this prediction is a prophecy or an advertisement for his company?&lt;/p&gt;
    &lt;p&gt;More generally, when someone makes a prediction I can’t know if it’s true (otherwise I’d be the one making the prediction). Therefore to act on it, I need to believe in it.&lt;/p&gt;
    &lt;head rend="h2"&gt;Predictions as Communication&lt;/head&gt;
    &lt;p&gt;A prediction is, by definition, a communicative act and communication theory teaches us that these acts are made to influence us. And I should be cognizant and wary of them (i.e. don’t accept them at face value). My prediction about the sunrise could be here to build belief in the scientific method.&lt;/p&gt;
    &lt;p&gt;No prediction is neutral. Because they talk about the future, predictions are always either attempts to reshape the world, genuine forecasts, or a mix of both. And at a fundamental (epistemological) level, I can never know which is which. That is why inevitability talk is so powerful and so dangerous. They present themselves as a law of physics while it’s only an act of communication whose power comes from people believing in it.&lt;/p&gt;
    &lt;head rend="h2"&gt;Self-Fulfilling Prophecy&lt;/head&gt;
    &lt;p&gt;Since I can’t know whether a prediction is persuasion, foresight or a mix of the two, the important question becomes: how should I act?&lt;/p&gt;
    &lt;p&gt;Let’s analyze each position: “things are inevitable” or “if I fight it I might win.”&lt;/p&gt;
    &lt;p&gt;Assuming you think everything is inevitable, you go into a self-fulfilling prophecy and some circular logic:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;“X is inevitable” → Stop trying to change it&lt;/item&gt;
      &lt;item&gt;Stop trying → No agency exercised&lt;/item&gt;
      &lt;item&gt;No agency exercised → X happens&lt;/item&gt;
      &lt;item&gt;Prophecy fulfilled → X was inevitable&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You can replace X by AGI or anything. E.g., there’s an opportunity to win a prize but you won’t work at it because you’re a loser and everything is determined. And it works positively too: e.g., “I am a future champion” → so I become one.&lt;/p&gt;
    &lt;p&gt;The other case is easier (and healthier): if you assume things are not inevitable then you can change the prediction by exercising your agency. You also accept some uncertainty in the process because it might not work out.&lt;/p&gt;
    &lt;p&gt;If you believe in inevitability, it makes sense not to act. And if you don’t, it makes sense to act.&lt;/p&gt;
    &lt;p&gt;Except, except… Using the previous paragraph, I explained it’s impossible for us to know if a prediction is inevitable or not. But if I use my agency, I have a higher chance of getting where I want things to be. Therefore, the only pragmatically rational stance is to embrace our agency.&lt;/p&gt;
    &lt;p&gt;So the informed position is to treat all predictions I disagree with as something I need to fight to change. Not accept them. Especially if they’re inevitable.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Agency’s Wager&lt;/head&gt;
    &lt;p&gt;Inevitability is rhetoric, not truth. Predictions aren’t laws of nature, they are acts of persuasion. And because no one can ever know how much is determined and how much is open, the only rational stance is to live as agents. Supersonic flight once looked inevitable until people stopped it. You, too, have already reshaped the world once; you can do it again. Don’t give away your power.&lt;/p&gt;
    &lt;p&gt;My dear CEO friend, if you want to change the world, the first step is to believe you can. You may win or lose. Success is never guaranteed. But one thing is certain: the surest way to lose is to not fight.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45440212</guid><pubDate>Wed, 01 Oct 2025 17:09:20 +0000</pubDate></item><item><title>Solar leads EU electricity generation as renewables hit 54%</title><link>https://electrek.co/2025/09/30/solar-leads-eu-electricity-generation-as-renewables-hit-54-percent/</link><description>&lt;doc fingerprint="af51f0535bbde596"&gt;
  &lt;main&gt;
    &lt;p&gt;More than half of the European Union’s (EU) electricity came from renewables in the second quarter of 2025, and solar is leading from the front.&lt;/p&gt;
    &lt;p&gt;According to new data from Eurostat, renewable energy sources generated 54% of the EU’s net electricity in Q2 2025, up from 52.7% year-over-year. The growth came mainly from solar, which produced 122,317 gigawatt-hours (GWh) – nearly 20% of the total electricity generation mix.&lt;/p&gt;
    &lt;p&gt;June 2025 was a milestone month: Solar became the EU’s single largest electricity source for the first time ever. It supplied 22% of all power that month, edging out nuclear (21.6%), wind (15.8%), hydro (14.1%), and natural gas (13.8%).&lt;/p&gt;
    &lt;p&gt;Some countries are already nearly 100% renewable. Denmark led with an impressive 94.7% share of renewables in net electricity generated, followed by Latvia (93.4%), Austria (91.8%), Croatia (89.5%), and Portugal (85.6%). At the other end of the spectrum, Slovakia (19.9%), Malta (21.2%), and the Czech Republic (22.1%) lagged behind.&lt;/p&gt;
    &lt;p&gt;In total, 15 EU countries saw their share of renewable generation rise year-over-year. Luxembourg (+13.5 percentage points) and Belgium (+9.1 pp) posted the most significant gains, driven largely by solar power growth.&lt;/p&gt;
    &lt;p&gt;Across the EU, solar made up 36.8% of renewable generation, followed by wind at 29.5%, hydro at 26%, biomass at 7.3%, and geothermal at 0.4%.&lt;/p&gt;
    &lt;p&gt;Read more: EIA: Solar and wind crush coal with 20% more power in 2025&lt;/p&gt;
    &lt;p&gt;The 30% federal solar tax credit is ending this year. If you’ve ever considered going solar, now’s the time to act. To make sure you find a trusted, reliable solar installer near you that offers competitive pricing, check out EnergySage, a free service that makes it easy for you to go solar. It has hundreds of pre-vetted solar installers competing for your business, ensuring you get high-quality solutions and save 20-30% compared to going it alone. Plus, it’s free to use, and you won’t get sales calls until you select an installer and share your phone number with them.&lt;/p&gt;
    &lt;p&gt;Your personalized solar quotes are easy to compare online and you’ll get access to unbiased Energy Advisors to help you every step of the way. Get started here.&lt;/p&gt;
    &lt;p&gt;FTC: We use income earning auto affiliate links. More.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45440387</guid><pubDate>Wed, 01 Oct 2025 17:22:43 +0000</pubDate></item><item><title>OpenTSLM: Language Models That Understand Time-Series (Stanford, ETH, Google)</title><link>https://www.opentslm.com/</link><description>&lt;doc fingerprint="748d54ec193a388b"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;OpenTSLM&lt;/head&gt;
    &lt;p&gt;The Future of AI Delivered on Time&lt;/p&gt;
    &lt;p&gt;AI understands text, images, audio, and video.&lt;lb/&gt;But the real world runs on time.&lt;/p&gt;
    &lt;p&gt;Every heartbeat, price tick, sensor pulse, machine log, and user click is a temporal signal.&lt;lb/&gt;Current models can't reason about them.&lt;/p&gt;
    &lt;p&gt;We're changing that.&lt;/p&gt;
    &lt;head rend="h2"&gt;A New Class of Foundation Models&lt;/head&gt;
    &lt;p&gt;Time-Series Language Models (TSLMs) are multimodal foundation models with time series as a native modality, next to text, enabling direct reasoning, explanation, and forecasting over temporal data in natural language.&lt;/p&gt;
    &lt;p&gt;Our research shows order-of-magnitude gains in temporal reasoning while running on smaller, faster backbones. TSLMs are not an add-on. They're a new modality for AI.&lt;/p&gt;
    &lt;head rend="h2"&gt;Open Core, Frontier Edge&lt;/head&gt;
    &lt;p&gt;OpenTSLM: Lightweight base models trained on public data, released openly. They set the standard for temporal reasoning and power a global developer and research ecosystem.&lt;/p&gt;
    &lt;p&gt;Frontier TSLMs: Advanced proprietary models trained on specialized data, delivering enterprise-grade performance and powering APIs, fine-tuning, and vertical solutions.&lt;/p&gt;
    &lt;head rend="h2"&gt;Our Vision&lt;/head&gt;
    &lt;p&gt;We're building the temporal interface for AI - the layer that connects continuous real-world signals to intelligent decisions and autonomous agents.&lt;/p&gt;
    &lt;p&gt;A universal TSLM will power proactive healthcare, adaptive robotics, resilient infrastructure, and new forms of human-AI collaboration.&lt;/p&gt;
    &lt;head rend="h2"&gt;About Us&lt;/head&gt;
    &lt;p&gt;OpenTSLM is a team of scientists, engineers, and builders from ETH, Stanford, Harvard, Cambridge, TUM, CDTM, Google, Meta, AWS, and beyond. We are the original authors of the OpenTSLM paper.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45440431</guid><pubDate>Wed, 01 Oct 2025 17:25:33 +0000</pubDate></item><item><title>Stop Avoiding Politics</title><link>https://terriblesoftware.org/2025/10/01/stop-avoiding-politics/</link><description>&lt;doc fingerprint="25ca331c7e610687"&gt;
  &lt;main&gt;
    &lt;p&gt;Say the word “politics” to most engineers and watch their face scrunch up like they just bit into a lemon. We’ve all been conditioned to believe that workplace politics is this dirty game played by manipulative ladder-climbers while the “real” engineers focus on the code.&lt;/p&gt;
    &lt;p&gt;I used to think the same way. For years as an engineer, I wore my hatred of politics like a badge of honor. I was above all that nonsense. I just wanted to ship. Politics was for those other people, the ones who didn’t have what it takes technically.&lt;/p&gt;
    &lt;p&gt;Now I think the opposite: politics isn’t the problem; bad politics is. And pretending politics doesn’t exist? That’s how bad politics wins.&lt;/p&gt;
    &lt;p&gt;Politics is just how humans coordinate in groups. It’s the invisible network of relationships, influence, and informal power that exists in every organization. You can refuse to participate, but that doesn’t make it go away. It just means decisions get made without you.&lt;/p&gt;
    &lt;p&gt;Think about the last time a terrible technical decision got pushed through at your company. Maybe it was adopting some overcomplicated architecture, or choosing a vendor that everyone knew was wrong, or killing a project that was actually working. I bet if you dig into what happened, you’ll find it wasn’t because the decision-makers were stupid. It’s because the people with the right information weren’t in the room. They “didn’t do politics.”&lt;/p&gt;
    &lt;p&gt;Meanwhile, someone who understood how influence works was in that room, making their case, building coalitions, showing they’d done their homework. And their idea won. Not because it was better, but because they showed up to play while everyone else was “too pure” for politics.&lt;/p&gt;
    &lt;p&gt;Ideas don’t speak. People do. And the people who understand how to navigate organizational dynamics, build relationships, and yes, play politics? Their ideas get heard.&lt;/p&gt;
    &lt;p&gt;When you build strong relationships across teams, understand what motivates different stakeholders, and know how to build consensus, you’re doing politics. When you take time to explain your technical decisions to non-technical stakeholders in language they understand, that’s politics. When you grab coffee with someone from another team to understand their challenges, that’s politics too.&lt;/p&gt;
    &lt;p&gt;Good politics is just being strategic about relationships and influence in the service of good outcomes.&lt;/p&gt;
    &lt;p&gt;The best technical leaders are incredibly political. They just don’t call it that. They call it “stakeholder management” or “building alignment” or “organizational awareness.” But it’s politics, and they’re good at it.&lt;/p&gt;
    &lt;p&gt;The engineers who refuse to engage with politics often complain that their companies make bad technical decisions. But they’re not willing to do what it takes to influence those decisions. They want a world where technical merit alone determines outcomes. That world doesn’t exist and never has.&lt;/p&gt;
    &lt;p&gt;This isn’t about becoming a scheming backstabber. As I wrote in Your Strengths Are Your Weaknesses, the same trait can be positive or negative depending on how you use it. Politics is the same way. You can use political skills to manipulate and self-promote, or you can use them to get good ideas implemented and protect your team from bad decisions.&lt;/p&gt;
    &lt;p&gt;Here’s what good politics looks like in practice:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Building relationships before you need them. That random coffee with someone from the data team? Six months later, they’re your biggest advocate for getting engineering resources for your data pipeline project.&lt;/item&gt;
      &lt;item&gt;Understanding the real incentives. Your VP doesn’t care about your beautiful microservices architecture. They care about shipping features faster. Frame your technical proposals in terms of what they actually care about.&lt;/item&gt;
      &lt;item&gt;Managing up effectively. Your manager is juggling competing priorities you don’t see. Keep them informed about what matters, flag problems early with potential solutions, and help them make good decisions. When they trust you to handle things, they’ll fight for you when it matters&lt;/item&gt;
      &lt;item&gt;Creating win-win situations. Instead of fighting for resources, find ways to help other teams while getting what you need. It doesn’t have to be a zero-sum game.&lt;/item&gt;
      &lt;item&gt;Being visible. If you do great work but nobody knows about it, did it really happen? Share your wins, present at all-hands, write those design docs that everyone will reference later.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The alternative to good politics isn’t no politics. It’s bad politics winning by default. It’s the loud person who’s wrong getting their way because the quiet person who’s right won’t speak up. It’s good projects dying because nobody advocated for them. It’s talented people leaving because they couldn’t navigate the organizational dynamics.&lt;/p&gt;
    &lt;p&gt;Stop pretending you’re above politics. You’re not. Nobody is. The only question is whether you’ll get good at it or keep losing to people who already are.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45440571</guid><pubDate>Wed, 01 Oct 2025 17:36:43 +0000</pubDate></item></channel></rss>