<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sun, 28 Sep 2025 21:32:14 +0000</lastBuildDate><item><title>When I say "alphabetical order", I mean "alphabetical order"</title><link>https://sebastiano.tronto.net/blog/2025-09-28-alphabetic-order/</link><description>&lt;doc fingerprint="144ce85c2ae519d5"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;When I say “alphabetical order”, I mean “alphabetical order”&lt;/head&gt;
    &lt;p&gt;Last month I have been on a multi-day hike with my dad. Each of us took many pictures, and when we came back we put them all in a shared folder. We both have Android phones, and the naming scheme used for our pictures was the same: &lt;code&gt;IMG_YYYYMMDD_HHmmss&lt;/code&gt; followed maybe by some other numbers
and then a &lt;code&gt;.jpg&lt;/code&gt;. Here &lt;code&gt;YYYY&lt;/code&gt; stands for the year, &lt;code&gt;MM&lt;/code&gt; for month and
so on, so that sorting the pictures in alphabetical order is the same as
sorting them by date.&lt;/p&gt;
    &lt;p&gt;Or so I thought. Strangely, when I looked at the files from my dad’s Windows PC, they were not sorted correctly: all the pictures took with my phone came first, followed by all the pictures took by him. I thought this was surely some weird Microsoft bug - after using Windows 11 at work for a while, I would not be surprised if you told me their file explorer can’t figure out how to sort strings.&lt;/p&gt;
    &lt;p&gt;But then I looked at the same files in a shared Google Drive folder, and again they were in the wrong order:&lt;/p&gt;
    &lt;p&gt;As you can see, the picture taken at 5:54 (with my dad’s phone) comes before the one taken at 9:20 (also with my dad’s phone), but after the one taken at 12:11 (with my phone).&lt;/p&gt;
    &lt;p&gt;Weird. Well, maybe Microsoft and Google got this wrong. But that seems unlikely.&lt;/p&gt;
    &lt;p&gt;Indeed, KDE’s Dolphin file manager does the same thing:&lt;/p&gt;
    &lt;p&gt;I’ll spare you the screenshots, but Gnome and both the file managers that I have on my phone also get the alphabetical order wrong.&lt;/p&gt;
    &lt;p&gt;At this point I thought that maybe one of the two phones is using some weird alternative unicode character instead of the underscore &lt;code&gt;_&lt;/code&gt;. Really,
I could not see any other explanation. But nope, this is not it, because
the good old &lt;code&gt;ls&lt;/code&gt; sorts my files correctly:&lt;/p&gt;
    &lt;code&gt;$ ls -l

total 218572
-rw-r--r-- 1 seba seba 1866185 Aug 28 18:51 IMG_20250820_055436307.jpg
-rw-r--r-- 1 seba seba 4749899 Aug 28 18:50 IMG_20250820_092016029_HDR.jpg
-rw-r--r-- 1 seba seba 6201609 Aug 28 18:52 IMG_20250820_092440966_HDR.jpg
-rw-r--r-- 1 seba seba 7694802 Aug 28 18:51 IMG_20250820_092832138_HDR.jpg
-rw-r--r-- 1 seba seba 1536520 Aug 20 09:57 IMG_20250820_095716_607.jpg
-rw-r--r-- 1 seba seba 1054553 Aug 20 10:38 IMG_20250820_103857_991.jpg
-rw-r--r-- 1 seba seba  965353 Aug 20 10:39 IMG_20250820_103903_811.jpg
(and so on)
&lt;/code&gt;
    &lt;p&gt;This was consistent among the couple of Linux distros I use, as well as my OpenBSD server. On the one hand this is good: not every single piece of software fucks up something as basic as string sorting. On the other hand, this makes it harder to debug what the fuck is going on with all the other file managers.&lt;/p&gt;
    &lt;p&gt;It took me more than a month to figure this one out. Tell me, which file do you think comes first in alphabetical order, &lt;code&gt;file-9.txt&lt;/code&gt; or
&lt;code&gt;file-10.txt&lt;/code&gt;?&lt;/p&gt;
    &lt;p&gt;Of course, the user who named those files probably wants &lt;code&gt;file-9.txt&lt;/code&gt; to
come before &lt;code&gt;file-10.txt&lt;/code&gt;. But &lt;code&gt;1&lt;/code&gt; is smaller than &lt;code&gt;9&lt;/code&gt;, so &lt;code&gt;file-10.txt&lt;/code&gt;
should be first in alphabetical order. Everyone understands that, and
soon people learn to put enough leading zeros if they want their files
to stay sorted the way they like.&lt;/p&gt;
    &lt;p&gt;Well, apparently all these operating systems have decided that no, users are too dumb and they cannot possibly understand what alphabetical order means. So when you ask them to sort your files alphabetically, they don’t. Instead, they decide that if some piece of the file name is a number, the real numerical value must be used.&lt;/p&gt;
    &lt;p&gt;I don’t know when this became the norm, to be honest I have not used a normal graphical file manager in a long time.&lt;/p&gt;
    &lt;p&gt;I know you asked for the files to be sorted in alphabetical order, but you don’t want &lt;code&gt;file-10.txt&lt;/code&gt; to come before &lt;code&gt;file-9.txt&lt;/code&gt;, do
you? No, I know you don’t. I am not even going to ask you, your
mushy human brain is too small to comprehend the intricacies of
such a question. I’ll spare you the thinking.&lt;/p&gt;
    &lt;p&gt;So it turns out that my dad’s phone wrote the milliseconds in the file name right after the seconds, while mine added an extra underscore to separate them from the seconds. Which in my mind it should not have mattered, because alphabetically they should still have been sorted correctly to the second. But with this “modern” interpretation of the alphabetical order, the files without the extra separator in the name had a much higher number, so they come last.&lt;/p&gt;
    &lt;p&gt;Now that I know what the issue is, I can solve it by renaming the files with a consistent scheme. I have also found a setting to fix Dolphin’s behavior, but it was very much buried into its many configuration options. And I would rather not have to change this setting in every application I use, assuming they even allow it.&lt;/p&gt;
    &lt;p&gt;I miss the time when computers did what you told them to, instead of trying to read your mind.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45404022</guid><pubDate>Sun, 28 Sep 2025 13:00:16 +0000</pubDate></item><item><title>Show HN: Toolbrew – Free little tools without signups or ads</title><link>https://toolbrew.co/</link><guid isPermaLink="false">https://news.ycombinator.com/item?id=45404667</guid><pubDate>Sun, 28 Sep 2025 14:40:46 +0000</pubDate></item><item><title>What’s New in PostgreSQL 18 – a Developer’s Perspective</title><link>https://www.bytebase.com/blog/what-is-new-in-postgres-18-for-developer/</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45405055</guid><pubDate>Sun, 28 Sep 2025 15:27:18 +0000</pubDate></item><item><title>Scm2wasm: A Scheme to WASM compiler in 600 lines of C, making use of WASM GC</title><link>https://git.lain.faith/iitalics/scm2wasm</link><description>&lt;doc fingerprint="9fa21c334d8329a0"&gt;
  &lt;main&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;milo 7cbcaf8ccd&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;.gitignore&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Makefile&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;README.md&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;input.scm&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;scm2wasm.c&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h4"&gt; README.md &lt;/head&gt;
    &lt;head rend="h1"&gt;scm2wasm&lt;/head&gt;
    &lt;p&gt;really bad minimal scheme compiler&lt;/p&gt;
    &lt;head rend="h2"&gt;building&lt;/head&gt;
    &lt;code&gt;$ make
&lt;/code&gt;
    &lt;head rend="h2"&gt;running&lt;/head&gt;
    &lt;code&gt;$ ./scm2wasm &amp;lt; input.scm &amp;gt; output.wasm
$ wasm-tools validate output.wasm
$ wasm-tools print output.wasm -o output.wat
$ wasmtime -Wgc --invoke start output.wasm
...
30
&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45405175</guid><pubDate>Sun, 28 Sep 2025 15:43:25 +0000</pubDate></item><item><title>The AI coding trap</title><link>https://chrisloy.dev/post/2025/09/28/the-ai-coding-trap</link><description>&lt;doc fingerprint="a549d23b2ab12319"&gt;
  &lt;main&gt;
    &lt;p&gt;If you ever watch someone “coding”, you might see them spending far more time staring into space than typing on their keyboard. No, they (probably) aren’t slacking off. Software development is fundamentally a practice of problem-solving, and so, as with solving a tricky crossword, most of the work is done in your head.&lt;/p&gt;
    &lt;p&gt;In the software development lifecycle, coding is the letters filled into the crossword, only a small amount of effort compared to all the head scratching and scribbled notes. The real work usually happens alongside coding, as the developer learns the domain, narrows down requirements, maps out relevant abstractions, considers side effects, tests features incrementally, and finally squashes bugs that survived this rigorous process. It looks something like this:&lt;/p&gt;
    &lt;p&gt;But with AI-driven coding, things play out very differently.&lt;/p&gt;
    &lt;head rend="h2"&gt;“Code first, ask questions later”&lt;/head&gt;
    &lt;p&gt;AI coding agents such as Claude Code are making it astonishingly fast to write code in isolation. But most software lives within complex systems, and since LLMs can't yet hold the full context of an application in memory at once, human review, testing, and integration needs will remain. And that is a lot harder when the code has been written without the human thinking about it. As a result, for complex software, much of the time will be spent on post hoc understanding of what code the AI has written.&lt;/p&gt;
    &lt;p&gt;This is the root of the difference between marketing copy that boasts of the paradigm shifting speed of writing code with AI (often framed as “10X faster”), and the marginal productivity gains in delivering working software seen in the wild (usually closer to 10%).&lt;/p&gt;
    &lt;p&gt;An even more dispiriting upshot of this is that, as developers, we spend an ever greater proportion of our time merely fixing up the output of these wondrous babbling machines. While the LLMs get to blast through all the fun, easy work at lightning speed, we are then left with all the thankless tasks: testing to ensure existing functionality isn’t broken, clearing out duplicated code, writing documentation, handling deployment and infrastructure, etc. Very little time is actually dedicated to the thing that developers actually love doing: coding.&lt;/p&gt;
    &lt;p&gt;Fortunately, help is at hand. While LLMs are shaking up how software development is performed, this issue in itself is not actually new. In fact, it is merely a stark example of an age-old problem, which I call:&lt;/p&gt;
    &lt;head rend="h2"&gt;The tech lead’s dilemma&lt;/head&gt;
    &lt;p&gt;As engineers progress in their careers, they will eventually step into the role of tech lead. They might be managing a team, or they could be a principal engineer, driving technical delivery without the people management. In either case, they are responsible for the team’s technical delivery. They are also usually the most experienced developer in the team: either in their career, in the specialised domain of the team, or in both.&lt;/p&gt;
    &lt;p&gt;Software delivery is a team effort, but one in which experience can have a highly imbalancing effect on individual contribution velocity. As such, when the tech lead’s primary job is to maximise delivery, they will often face an internal conflict between two ways to deliver software:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Fair delegation across the team, maximising learning and ownership opportunities for junior team members, but allowing delivery to be bottlenecked by the speed of the least productive team members.&lt;/item&gt;
      &lt;item&gt;Mollycoddling the team, by delegating only the easy or non-critical work to juniors, and keeping the hardest work for themselves, as the person on the team most capable of delivering at speed.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Unfortunately, while we shall see that mollycoddling is extremely harmful to long-term team health, it is also often a very effective way to accelerate delivery. The higher bandwidth of the tech lead is often most efficiently deployed by eating up all the hardest work:&lt;/p&gt;
    &lt;p&gt;As such, I have seen this pattern repeated time and again over the course of my career. And, of course, it comes at a cost. Siloing of experience in the tech lead makes the team brittle, it makes support harder, and it places ever greater pressure on the tech lead as a single point of failure. What follows next is predictable: burnout, departure, and ensuing crisis as the team struggles to survive without the one person who really knows how everything works.&lt;/p&gt;
    &lt;p&gt;As is usually the case, the solution lies in a third way that avoids these two extremes and balances delivery with team growth. We might frame it as something like:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Implement team practices that allow engineers to deliver working code within a framework that minimises rework, maximises effective collaboration, and promotes personal growth and learning.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;When I was CTO of Datasine, we enshrined this attitude in a simple tech team motto:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Learn. Deliver. Have fun.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Good tech leads expose their engineers to work at the limit of their capabilities, using processes and practices that minimise delivery risk while also enabling each team member to grow their skills, knowledge, and domain expertise. This is, in fact, the essence of good technical leadership.&lt;/p&gt;
    &lt;p&gt;There are many ways to accomplish it, from strict codified frameworks such as the Extreme Programming rules, through to looser sets of principles which we might broadly refer to as “best practices”:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Code reviews&lt;/item&gt;
      &lt;item&gt;Incremental delivery&lt;/item&gt;
      &lt;item&gt;Modular design&lt;/item&gt;
      &lt;item&gt;Test-driven development&lt;/item&gt;
      &lt;item&gt;Pair programming&lt;/item&gt;
      &lt;item&gt;Quality documentation&lt;/item&gt;
      &lt;item&gt;Continuous integration&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;So, for experienced engineers today, an urgent question is: how can we translate these practices into a world of AI-driven coding?&lt;/p&gt;
    &lt;head rend="h2"&gt;LLMs are lightning fast junior engineers&lt;/head&gt;
    &lt;p&gt;In 2025, many engineers are finding themselves for the first time in a position familiar to every tech lead: overseeing a brilliant but unpredictable junior engineer. Harnessing and controlling such talent, in a way that benefits effective team collaboration, is one of the primary challenges of engineering leadership. But AI coding agents need different management to junior engineers, because the nature of their productivity and growth is fundamentally different.&lt;/p&gt;
    &lt;p&gt;As software engineers gain experience, we tend to improve our productivity in multiple ways at the same time: writing more robust code, using better abstractions, spending less time writing and fixing bugs, understanding more complex architectures, covering edge cases more effectively, spotting repeated patterns earlier, etc. Engineering is a rich and complex discipline with many avenues for specialisation, but for simplicity we might group these dimensions into two broad themes:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Quality: ability to deliver more complex, more performant, more maintainable code&lt;/item&gt;
      &lt;item&gt;Velocity: ability to develop working, bug-free code in a shorter space of time&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Over time, good engineers will improve in both axes.&lt;/p&gt;
    &lt;p&gt;Early LLMs were fast to write code, but time spent fixing bugs and removing hallucinations meant they were slow to complete bug-free code. Over time, smarter LLMs and better use of context engineering and tools have meant that modern AI coding agents are much better at “one shot” writing of code. The current generation of commercially available agents can be incredibly fast at producing working code for problems that would challenge some mid-level engineers, though they cannot yet match the expertise of senior engineers:&lt;/p&gt;
    &lt;p&gt;So we can think of the current generation of AI coding agents as junior engineers, albeit with two fundamental differences:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;LLMs deliver code much, much faster than junior engineers, constrained neither by thinking nor writing time;&lt;/item&gt;
      &lt;item&gt;LLMs have no true capacity to learn, and instead only improve through more effective context engineering or the arrival of new foundation models.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As with junior engineering talent, there are broadly two ways that you can deploy them, depending on whether your focus is long-term or short-term:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;AI-driven engineering: employing best practices, foregrounding human understanding of the code, moving slowly to make development sustainable.&lt;/item&gt;
      &lt;item&gt;Vibe coding: throwing caution to the wind and implementing at speed, sacrificing understanding for delivery velocity, hitting an eventual wall of unsalvageable, messy code.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As might be expected, the long-term trajectories of choosing between these two approaches follow much the same pattern as choosing between parallel delegation and mollycoddling of a junior team:&lt;/p&gt;
    &lt;p&gt;This is why the vibe coding approach is great for tiny projects or throwaway prototypes: applications of sufficient simplicity can be delivered without the need for any human thinking at all. By limiting the complexity of our projects and leaning into the capabilities of the tools, we can deliver end-to-end working software in no time at all.&lt;/p&gt;
    &lt;p&gt;But you will hit a wall of complexity that AI is incapable of scaling alone.&lt;/p&gt;
    &lt;p&gt;Building prototypes is now easier than ever. But if we want to effectively use LLMs to accelerate delivery of real, complex, secure, working software, and to realise more than marginal efficiency gains, we need to write a new playbook of engineering practices tailored to maximise collaboration between engineering teams that include both humans and LLMs.&lt;/p&gt;
    &lt;head rend="h2"&gt;How to avoid the AI coding trap&lt;/head&gt;
    &lt;p&gt;AI coding agents are dazzlingly productive, but lack in-depth knowledge of your business, codebase, or roadmap. Left unchecked, they will happily churn out thousands of lines of code with no heed paid to design, consistency, or maintainability. The job of the engineer, then, is to act as a tech lead to these hotshots: to provide the structure, standards, and processes that convert raw speed into sustainable delivery.&lt;/p&gt;
    &lt;p&gt;We need a new playbook for how to deliver working software efficiently, and we can look to the past to learn how to do that. By treating LLMs as lightning-fast junior engineers, we can lean on best practices from the software development lifecycle to build systems that scale.&lt;/p&gt;
    &lt;p&gt;Just as tech leads don't just write code but set practices for the team, engineers now need to set practices for AI agents. That means bringing AI into every stage of the lifecycle:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Specification: exploring, analysing, and refining feature specifications to cover edge cases and narrow focus.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;Documentation: generating and reviewing documentation up front to provide reusable guardrails and lasting evidence.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;Modular Design: scaffolding modular architectures to control context scope and maximise comprehension.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;Test-Driven Development: generating extensive test cases prior to implementation to guide implementation and prevent regression.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;Coding Standards: applying house styles and best practice when generating code, through context engineering.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;Monitoring &amp;amp; Introspection: analysing logs and extracting insights faster than any human ever could.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;By understanding that delivering software is so much more than just writing code, we can avoid the AI coding trap and instead hugely amplify our ability to deliver working, scalable software.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45405177</guid><pubDate>Sun, 28 Sep 2025 15:43:33 +0000</pubDate></item><item><title>Show HN: I built an MCP server using Cloudflare's code mode pattern</title><link>https://github.com/jx-codes/codemode-mcp</link><description>&lt;doc fingerprint="9d08bed4f4026e9a"&gt;
  &lt;main&gt;
    &lt;p&gt;A local implementation of the "Code Mode" workflow for MCP servers. Instead of struggling with multiple tool calls, LLMs write TypeScript/JavaScript code that calls a simple HTTP proxy to access your MCP servers.&lt;/p&gt;
    &lt;p&gt;Note: It does not attempt to handle the MCP -&amp;gt; typescript API transpilation layer. Would be cool but I really wanted to test the workflow.&lt;/p&gt;
    &lt;p&gt;https://blog.cloudflare.com/code-mode/&lt;/p&gt;
    &lt;p&gt;This implements the core insight that LLMs are much better at writing code than at tool calling. Instead of exposing many tools directly to the LLM (which it struggles with), this server gives the LLM just one tool: &lt;code&gt;execute_code&lt;/code&gt;. The LLM writes code that makes HTTP requests to access your other MCP servers.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;LLM gets one tool: &lt;code&gt;execute_code&lt;/code&gt;- executes TypeScript/JavaScript&lt;/item&gt;
      &lt;item&gt;LLM writes code: Uses &lt;code&gt;fetch()&lt;/code&gt;to call&lt;code&gt;http://localhost:3001/mcp/*&lt;/code&gt;endpoints&lt;/item&gt;
      &lt;item&gt;HTTP proxy forwards: Transparently proxies requests to your actual MCP servers&lt;/item&gt;
      &lt;item&gt;Results flow back: Through the code execution to the LLM&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This gives you all the benefits of complex tool orchestration, but leverages what LLMs are actually good at: writing code.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Bun (latest version)&lt;/item&gt;
      &lt;item&gt;Deno (for code execution sandbox)&lt;/item&gt;
      &lt;item&gt;An MCP-compatible client (Claude Desktop, Cursor, VS Code with Copilot, etc.)&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Clone the repository&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;git clone https://github.com/jx-codes/codemode-mcp.git
cd codemode-mcp&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Install dependencies&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;bun install&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Configure the server (optional)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Create a &lt;code&gt;codemode-config.json&lt;/code&gt; file to customize settings:&lt;/p&gt;
    &lt;code&gt;{
   "proxyPort": 3001,
   "configDirectories": [
      "~/.config/mcp/servers",
      "./mcp-servers",
      "./"
   ]
}&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Set up your MCP servers&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Create a &lt;code&gt;.mcp.json&lt;/code&gt; file with your MCP server configurations in any of the directories you specified above:&lt;/p&gt;
    &lt;code&gt;{
   "mcpServers": {
      "fs": {
         "command": "npx",
         "args": ["-y", "@modelcontextprotocol/server-filesystem", "/tmp"],
         "env": {}
      }
   }
}&lt;/code&gt;
    &lt;p&gt;Instead of direct tool calling, the LLM writes:&lt;/p&gt;
    &lt;code&gt;// List available servers
const servers = await fetch("http://localhost:3001/mcp/servers").then((r) =&amp;gt;
  r.json()
);
console.log("Available servers:", servers);

// Call a tool on the filesystem server
const result = await fetch("http://localhost:3001/mcp/call", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    server: "fs",
    tool: "read_file",
    args: { path: "/tmp/example.txt" },
  }),
}).then((r) =&amp;gt; r.json());

console.log("File contents:", result);&lt;/code&gt;
    &lt;p&gt;The real power shows when chaining operations:&lt;/p&gt;
    &lt;code&gt;// Get list of files
const files = await fetch("http://localhost:3001/mcp/call", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    server: "fs",
    tool: "list_directory",
    args: { path: "/tmp" },
  }),
}).then((r) =&amp;gt; r.json());

// Process each file
for (const file of files.content[0].text.split("\n")) {
  if (file.endsWith(".txt")) {
    const content = await fetch("http://localhost:3001/mcp/call", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        server: "fs",
        tool: "read_file",
        args: { path: `/tmp/${file}` },
      }),
    }).then((r) =&amp;gt; r.json());

    console.log(`${file}: ${content.content[0].text.length} characters`);
  }
}&lt;/code&gt;
    &lt;p&gt;Executes TypeScript/JavaScript code with network access to the MCP proxy.&lt;/p&gt;
    &lt;p&gt;Parameters:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;code&lt;/code&gt;(string): Code to execute&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;typescript&lt;/code&gt;(boolean): TypeScript mode (default: true)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Proxy Endpoints:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;GET /mcp/servers&lt;/code&gt;- List available MCP servers&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;GET /mcp/{server}/tools&lt;/code&gt;- List tools for server&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;POST /mcp/call&lt;/code&gt;- Call tool (body:&lt;code&gt;{server, tool, args}&lt;/code&gt;)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Check Deno installation status.&lt;/p&gt;
    &lt;p&gt;Get a comprehensive overview of all available MCP servers and their tools. Returns structured JSON data optimized for LLM consumption, containing complete tool schemas and server status information.&lt;/p&gt;
    &lt;p&gt;JSON Output Structure:&lt;/p&gt;
    &lt;code&gt;{
  "summary": {
    "totalServers": 2,
    "successfulServers": 2,
    "totalTools": 4
  },
  "servers": [
    {
      "server": "filesystem",
      "status": "success",
      "toolCount": 3,
      "tools": [
        {
          "name": "read_file",
          "description": "Read contents of a file",
          "inputSchema": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "File path to read"
              }
            },
            "required": ["path"]
          }
        }
      ]
    },
    {
      "server": "database",
      "status": "success",
      "toolCount": 1,
      "tools": [
        {
          "name": "query",
          "description": "Execute a SQL query",
          "inputSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "SQL query to execute"
              }
            },
            "required": ["query"]
          }
        }
      ]
    }
  ]
}&lt;/code&gt;
    &lt;p&gt;This provides complete tool discovery information including parameter schemas, types, and requirements for programmatic access.&lt;/p&gt;
    &lt;p&gt;Create &lt;code&gt;codemode-config.json&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;{
  "proxyPort": 3001,
  "configDirectories": ["~/.config/mcp/servers", "./mcp-servers", "./"]
}&lt;/code&gt;
    &lt;p&gt;Add your MCP servers to &lt;code&gt;.mcp.json&lt;/code&gt; files in those directories:&lt;/p&gt;
    &lt;code&gt;{
  "mcpServers": {
    "fs": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "/tmp"],
      "env": {}
    }
  }
}&lt;/code&gt;
    &lt;p&gt;Traditional MCP: LLM → Tool Call → MCP Server → Result → LLM → Tool Call → ...&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;LLMs struggle with tool syntax&lt;/item&gt;
      &lt;item&gt;Each call goes through the neural network&lt;/item&gt;
      &lt;item&gt;Hard to chain operations&lt;/item&gt;
      &lt;item&gt;Limited by training on synthetic tool examples&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Code Mode: LLM → Write Code → Code calls proxy → Proxy forwards to MCP → Results&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;LLMs excel at writing code (millions of real examples in training)&lt;/item&gt;
      &lt;item&gt;Code can chain operations naturally&lt;/item&gt;
      &lt;item&gt;Results flow through code logic, not neural network&lt;/item&gt;
      &lt;item&gt;Natural composition and data processing&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Code runs in Deno sandbox with network access only&lt;/item&gt;
      &lt;item&gt;No filesystem, environment, or system access&lt;/item&gt;
      &lt;item&gt;30-second execution timeout&lt;/item&gt;
      &lt;item&gt;MCP servers accessed through controlled proxy&lt;/item&gt;
      &lt;item&gt;Temporary files auto-cleanup&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;"Deno not installed": Install Deno and restart "Permission denied": Code trying to access restricted resources "Module not found": Use &lt;code&gt;https://&lt;/code&gt; URLs for imports
"Execution timeout": Optimize code or break into smaller operations&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Provide a simpler API layer for the MCP proxy something like mcp.tool('name', args); &lt;list rend="ul"&gt;&lt;item&gt;Could easily be done by injecting our own typescript file into the Deno scope before running user code&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;More config options&lt;/item&gt;
      &lt;item&gt;Filter out the tools somehow&lt;/item&gt;
      &lt;item&gt;Test it out more in my workflows and see the results&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45405584</guid><pubDate>Sun, 28 Sep 2025 16:23:51 +0000</pubDate></item><item><title>The Weird Concept of Branchless Programming</title><link>https://sanixdk.xyz/blogs/the-weird-concept-of-branchless-programming</link><description>&lt;doc fingerprint="f7ba3738a05c1105"&gt;
  &lt;main&gt;&lt;p&gt;&lt;code&gt;2025-07-08 01:37&lt;/code&gt; â¢ 19+ min read â¢ #c #branchless&lt;/p&gt;&lt;code&gt;-O3 -ffast-math -march=native -fomit-this-entire-function&lt;/code&gt;) were taken.&lt;p&gt;Modern CPUs are predictive creatures. They guess what you're about to do, like a nosy algorithm trying to sell you sneakers after you Googled "foot pain." Branch predictors make CPUs fast by speculating on branches... until they guess wrong and everything grinds to a halt for 15,20 cycles.&lt;/p&gt;&lt;p&gt;Branchless programming is how we get around this: we rewrite our code to not branch at all. Instead of jumping to conclusions, we manipulate bits like 1980s assembly gremlins.&lt;/p&gt;&lt;p&gt;What is a branch first of all?In a program, you may observe parts like this:&lt;/p&gt;&lt;code&gt;if (condition), then
    ...
elif (condition), then
    ...
else
    ...
fi
&lt;/code&gt;&lt;p&gt;This block of instructions is a collection of three branches. Each &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; represents a possible execution path the CPU can take depending on the evaluation of the conditions. At runtime, only one of these paths is taken, and the others are skipped. This choice ,  this deviation in the control flow ,  is what we call a branch.&lt;/p&gt;&lt;p&gt;In terms of machine code, a branch is often implemented as a jump (&lt;code&gt;jmp&lt;/code&gt;, &lt;code&gt;je&lt;/code&gt;, &lt;code&gt;jne&lt;/code&gt;, etc.). These are instructions that tell the CPU: âif this condition holds, skip to label X; otherwise, keep going.â That jump disrupts the nice linear stream of instruction execution, forcing the CPU to guess where youâre going next.&lt;/p&gt;&lt;p&gt;Hereâs a simple ASCII representation of how this decision tree looks:&lt;/p&gt;&lt;code&gt;          [Condition A]
              |
        +-----+------+
       Yes          No
       |             |
[Block A]     [Condition B]
                  |
            +-----+------+
           Yes          No
           |             |
      [Block B]      [Block C]
&lt;/code&gt;&lt;p&gt;From a CPU perspective, each conditional check and potential jump is a âfork in the road.â If your code has a predictable pattern (e.g., always taking the same branch), the CPU can guess well and maintain performance. But if it's unpredictable, say, random data or user input, then the CPU may guess wrong, flush its pipeline, and pay a heavy penalty.&lt;/p&gt;&lt;p&gt;This is why branches can be so dangerous in tight loops or performance-critical code: even one mispredicted branch can cost dozens of cycles, ruining your cache-fueled dreams.&lt;/p&gt;&lt;p&gt;Branches, when predictable, are cheap. But when unpredictable, they're evil. Imagine a tight loop that checks a condition based on data from user input, or real-world sensors, or shuffled arrays. The branch predictor stumbles, and every misstep means flushing the pipeline , a costly affair on modern superscalar out-of-order CPUs.&lt;/p&gt;&lt;p&gt;Branchless code avoids that entirely. By rewriting conditional logic into arithmetic and bit operations, or using CPU instructions like &lt;code&gt;cmov&lt;/code&gt;, we let the CPU chew through code without pausing to guess. Itâs smoother, faster, and often more deterministic, which is crucial in performance-critical or side-channel-resistant scenarios (looking at you, cryptography).&lt;/p&gt;&lt;p&gt;We're going to take you on a wild ride through three increasingly complex examples:&lt;/p&gt;&lt;code&gt;abs(x)&lt;/code&gt; ,  a gentle warm-up with unary fun&lt;code&gt;clamp(x, min, max)&lt;/code&gt; ,  a common pattern with two conditions&lt;code&gt;partition()&lt;/code&gt; ,  a full algorithm with data-dependent control flow&lt;p&gt;We'll compare these in C (our performance-hungry workhorse), we'll show you how these concepts look in both worlds, how they perform.&lt;/p&gt;&lt;p&gt;Absolute value is your first ticket to understanding how to cut down branches without cutting performance.&lt;/p&gt;&lt;p&gt;We want to calculate the absolute value of a signed integer without using a conditional branch. This is foundational â a single-bit operation can turn a branch into math.&lt;/p&gt;&lt;code&gt;int abs_branch(int x) {
    return x &amp;lt; 0 ? -x : x;
}

// Compiles to a `cmp` and a `jge` or `jl`, depending on compiler and optimization level.

int abs_branchless(int x) {
    int mask = x &amp;gt;&amp;gt; 31;
    return (x + mask) ^ mask;
}
&lt;/code&gt;&lt;code&gt;mask&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; either increments or doesn't.&lt;code&gt;mask&lt;/code&gt; flips bits only if &lt;code&gt;mask&lt;/code&gt; is -1.&lt;code&gt;int abs_alt(int x) {
    int mask = x &amp;gt;&amp;gt; 31;
    return (x ^ mask) - mask;
}
&lt;/code&gt;&lt;p&gt;Produces identical results; different taste of the same bit soup.&lt;/p&gt;&lt;code&gt;mov eax, edi       ; move x into eax
sar eax, 31        ; sign-extend right shift to produce mask
mov ecx, eax       ; duplicate mask
add edi, ecx       ; edi = x + mask
xor eax, edi       ; eax = result = (x + mask) ^ mask
&lt;/code&gt;&lt;p&gt;Fast. No jumps. Pure ALU (arithmetic logic unit).&lt;/p&gt;&lt;p&gt;The clamp is more complex. You want to bound a value between a &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;.We want to ensure a value stays within &lt;code&gt;[min, max]&lt;/code&gt; without branches. This is key in physics simulations, rendering, and safety constraints.&lt;/p&gt;&lt;code&gt;int clamp(int x, int min, int max) {
    if (x &amp;lt; min) return min;
    if (x &amp;gt; max) return max;
    return x;
}

int clamp_branchless(int x, int min, int max) {
    int r1 = x - ((x - min) &amp;amp; ((x - min) &amp;gt;&amp;gt; 31));
    return r1 - ((r1 - max) &amp;amp; ((r1 - max) &amp;gt;&amp;gt; 31));
}
&lt;/code&gt;&lt;code&gt;(x - min) &amp;gt;&amp;gt; 31&lt;/code&gt; creates a mask that's all 1s if &lt;code&gt;x &amp;lt; min&lt;/code&gt;.&lt;code&gt;min&lt;/code&gt; when necessary.&lt;code&gt;sub eax, min
sar eax, 31       ; create mask_low
and eax, (x - min)
sub x, eax        ; x = max(x, min)

sub x, max
sar ..., 31       ; create mask_high
and ..., (x - max)
sub x, ...        ; x = min(x, max)
&lt;/code&gt;&lt;p&gt;Every operation is ALU-based. No branching, just pure logic.This removes branches by computing masks and blending values accordingly. Elegant? No. Effective? Absolutely.&lt;/p&gt;&lt;p&gt;This is where branchless logic makes the biggest splash, in algorithms that iterate over data and make conditional swaps.Partition an array around a pivot such that all elements &amp;lt; pivot come before elements &amp;gt;= pivot, without any conditional branching in the inner loop.&lt;/p&gt;&lt;code&gt;void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int* arr, int low, int high) {
    int pivot = arr[high];
    int i = low;
    for (int j = low; j &amp;lt; high; j++) {
        if (arr[j] &amp;lt; pivot) {
            swap(&amp;amp;arr[i], &amp;amp;arr[j]);
            i++;
        }
    }
    swap(&amp;amp;arr[i], &amp;amp;arr[high]);
    return i;
}

int partition_branchless(int* arr, int low, int high) {
    int pivot = arr[high];
    int i = low;
    for (int j = low; j &amp;lt; high; j++) {
        swap(&amp;amp;arr[i], &amp;amp;arr[j]);
        i += arr[i] &amp;lt; pivot;
    }
    swap(&amp;amp;arr[i], &amp;amp;arr[high]);
    return i;
}
&lt;/code&gt;&lt;code&gt;i += ((arr[i] - pivot) &amp;gt;&amp;gt; 31) &amp;amp; 1;
&lt;/code&gt;&lt;p&gt;Relies on arithmetic right shift and masking to conditionally increment.&lt;/p&gt;&lt;code&gt;mov eax, [arr+i*4]
cmp eax, pivot
setl bl
add i, ebx
&lt;/code&gt;&lt;p&gt;Or:&lt;/p&gt;&lt;code&gt;cmp eax, pivot
adc i, 0
&lt;/code&gt;&lt;p&gt;Clever use of &lt;code&gt;adc&lt;/code&gt; (add with carry) after compare to branchlessly increment.&lt;/p&gt;&lt;code&gt;| Operation      | Branchy | Branchless | Speedup |
| -------------- | ------- | ---------- | ------- |
| `abs(x)`       | \~5ms   | \~5ms      | 1.00x   |
| `clamp(x,m,M)` | \~6ms   | \~6ms      | 1.00x   |
| `partition()`  | \~6ms   | \~5ms      | 1.20x   |
&lt;/code&gt;&lt;code&gt;abs()&lt;/code&gt; and &lt;code&gt;clamp()&lt;/code&gt; show negligible gains; branch prediction handles them well.&lt;code&gt;partition()&lt;/code&gt; shows improvement due to high branch unpredictability.&lt;p&gt;See appendix below for full C benchmark code, compilation flags, and timing logic.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Warning: long code ahead. Skip if you value your retina and you have a life.&lt;/p&gt;&lt;/quote&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;time.h&amp;gt;

// ABS branchy and branchless
int abs_branch(int x) {
    return x &amp;lt; 0 ? -x : x;
}

int abs_branchless(int x) {
    int mask = x &amp;gt;&amp;gt; 31;
    return (x + mask) ^ mask;
}

// CLAMP branchy and branchless
int clamp(int x, int min, int max) {
    if (x &amp;lt; min) return min;
    if (x &amp;gt; max) return max;
    return x;
}

int clamp_branchless(int x, int min, int max) {
    int r1 = x - ((x - min) &amp;amp; ((x - min) &amp;gt;&amp;gt; 31));
    return r1 - ((r1 - max) &amp;amp; ((r1 - max) &amp;gt;&amp;gt; 31));
}

// PARTITION branchy and branchless
void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

int partition(int* arr, int low, int high) {
    int pivot = arr[high];
    int i = low;
    for (int j = low; j &amp;lt; high; j++) {
        if (arr[j] &amp;lt; pivot) {
            swap(&amp;amp;arr[i], &amp;amp;arr[j]);
            i++;
        }
    }
    swap(&amp;amp;arr[i], &amp;amp;arr[high]);
    return i;
}

int partition_branchless(int* arr, int low, int high) {
    int pivot = arr[high];
    int i = low;
    for (int j = low; j &amp;lt; high; j++) {
        swap(&amp;amp;arr[i], &amp;amp;arr[j]);
        i += arr[i] &amp;lt; pivot;
    }
    swap(&amp;amp;arr[i], &amp;amp;arr[high]);
    return i;
}

// Benchmarking helpers
void benchmark_abs(int* data, int count) {
    clock_t start = clock();
    volatile long long sum = 0;
    for (int i = 0; i &amp;lt; count; ++i) sum += abs_branch(data[i]);
    printf("ABS (branch):     %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);

    start = clock(); sum = 0;
    for (int i = 0; i &amp;lt; count; ++i) sum += abs_branchless(data[i]);
    printf("ABS (branchless): %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);
}

void benchmark_clamp(int* data, int count) {
    clock_t start = clock();
    volatile long long sum = 0;
    for (int i = 0; i &amp;lt; count; ++i) sum += clamp(data[i], -50, 50);
    printf("CLAMP (branch):     %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);

    start = clock(); sum = 0;
    for (int i = 0; i &amp;lt; count; ++i) sum += clamp_branchless(data[i], -50, 50);
    printf("CLAMP (branchless): %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);
}

void benchmark_partition(int* data, int count) {
    int* copy = malloc(sizeof(int) * count);
    memcpy(copy, data, sizeof(int) * count);

    clock_t start = clock();
    partition(data, 0, count - 1);
    printf("PARTITION (branch):     %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);

    memcpy(data, copy, sizeof(int) * count);
    start = clock();
    partition_branchless(data, 0, count - 1);
    printf("PARTITION (branchless): %.3f sec\n", (double)(clock() - start)/CLOCKS_PER_SEC);

    free(copy);
}

int main() {
    const int N = 10000000;
    int* data = malloc(sizeof(int) * N);

    // Populate with mixed signed integers
    for (int i = 0; i &amp;lt; N; ++i)
        data[i] = rand() - (RAND_MAX / 2);

    puts("== Benchmarking ABS ==");
    benchmark_abs(data, N);

    puts("\n== Benchmarking CLAMP ==");
    benchmark_clamp(data, N);

    puts("\n== Benchmarking PARTITION ==");
    benchmark_partition(data, 1000000); // smaller size due to O(n log n) behavior

    free(data);
    return 0;
}
&lt;/code&gt;&lt;p&gt;(If the scroll wheel starts smoking, youâve found the end.)&lt;/p&gt;&lt;p&gt;Branchless programming is a scalpel, not a sledgehammer. Used wisely, it can make your code faster, safer, and cooler. Misused, it turns your logic into incomprehensible bit spaghetti.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;"Premature optimization is the root of all evil â except when it's branchless, then it's performance art."&lt;/p&gt;&lt;/quote&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45405750</guid><pubDate>Sun, 28 Sep 2025 16:40:53 +0000</pubDate></item><item><title>Testing "Exotic" P2P VPN</title><link>https://blog.nommy.moe/blog/exotic-mesh-vpn/</link><description>&lt;doc fingerprint="b558ca29a9201472"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Testing "exotic" p2p VPN&lt;/head&gt;
    &lt;head rend="h1"&gt;How did the moose begin&lt;/head&gt;
    &lt;p&gt;My standard "everyday" solution when it comes to connecting computers into a single network is Wireguard. &lt;lb/&gt; Wireguard is good, supports p2p, and generally has no downsides.&lt;/p&gt;
    &lt;p&gt;The downsides come from having part of my home infrastructure located in territory controlled by a country that has blocked Wireguard by signatures. &lt;lb/&gt; This is, of course, utterly disgusting, and what's even more disgusting is that these blocks have long since stopped following any kind of legislation. &lt;lb/&gt; The result is an incomprehensible black box that can do anything, behave however it wants, and nobody knows how this shaitan-machine even works anymore.&lt;/p&gt;
    &lt;p&gt;So it's time for penetration.&lt;/p&gt;
    &lt;head rend="h1"&gt;Why not obfuscation?&lt;/head&gt;
    &lt;p&gt;Actually, there are several projects that allow obfuscating Wireguard traffic and punching through firewalls. &lt;lb/&gt; udp2raw, wstunnel and others handle this excellently. &lt;lb/&gt; And Amnezia VPN has made their own fork of Wireguard, specifically for breaking through government censorship.&lt;/p&gt;
    &lt;p&gt;But the main problem with obfuscation is the reduction of effective packet MTU. Because we wrap one packet in another packet, and this overhead takes up space. &lt;lb/&gt; And that's not good.&lt;/p&gt;
    &lt;head rend="h1"&gt;What I want from a VPN&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;p2p mesh network&lt;/p&gt;&lt;lb/&gt;Wireguard is good, of course, but routing all traffic through one server has consequences.&lt;lb/&gt;The consequences usually include launching a Mars rover to switch the VPN to another server in case of IP blocking or just because the server started feeling unwell.&lt;lb/&gt;And routing traffic halfway around the planet just to get access to a machine that's within arm's reach — that's just wrong.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Open source and selfhosted&lt;/p&gt;&lt;lb/&gt;In matters like this, relying on a third-party provider is either dangerous or useless.&lt;lb/&gt;Tailscale, for example, is famous for its geographical blocks, so relying on it is pointless.&lt;lb/&gt;And since Tailscale doesn't do this on a whim (I hope), there's no guarantee that other services won't do the same.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Ideologically correct VPN&lt;/p&gt;&lt;lb/&gt;This point exists here specifically for Headscale and ZeroTier.&lt;lb/&gt;Creating a crippled open-source product to advertise a commercial one is a vicious practice and I personally don't approve this.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Not Wireguard&lt;/p&gt;&lt;lb/&gt;For obvious reasons. Signature-based blocking.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Packaged in nixpkgs&lt;/p&gt;&lt;lb/&gt;This one's even more obvious. I'm not going to package a VPN into nix myself.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Test subjects&lt;/head&gt;
    &lt;head rend="h2"&gt;EasyTier&lt;/head&gt;
    &lt;p&gt;This is probably the simplest way to create a p2p network. So simple that there isn't even a module in nixpkgs to run it.&lt;/p&gt;
    &lt;p&gt;For security, there's only a password in &lt;code&gt;--network-secret&lt;/code&gt;, which is used for traffic encryption.&lt;/p&gt;
    &lt;p&gt;To work, it immediately opens TCP, UDP, WG, WS, WSS and whatever Lucifer's IT department cooked up. If one gets blocked, it'll break through via another.&lt;/p&gt;
    &lt;p&gt;Essentially all nodes in the network are identical and you can specify multiple peers for initial connection establishment. &lt;lb/&gt; You can use either public ones, which can be viewed here, or specify one of your own nodes. &lt;lb/&gt; It doesn't require any additional configuration.&lt;/p&gt;
    &lt;p&gt;By the way, it has clients for Android, Windows and Mac OS, so it's a good time to dig out those old games you didn't finish in childhood and organize LAN party with friends who aren't very tech-savvy.&lt;/p&gt;
    &lt;p&gt;The main disadvantage is that you can't bind IP addresses to specific machines.&lt;/p&gt;
    &lt;p&gt;And yes, this is a project from China, which might not appeal to some for ideological reasons, but personally I hope it was created by enthusiasts specifically for breaking through the Great Firewall of China.&lt;head&gt;Configuration example&lt;/head&gt;&lt;code&gt;{
  networking.firewall = {
    allowedTCPPorts = [ 11010 11011 11012 ];
    allowedUDPPorts = [ 11010 11011 11012 ];
  };

  environment.systemPackages = [ pkgs.easytier ];
  systemd.services."easytier" = {
    enable = true;
    script = "easytier-core -d --network-name sumeragi --network-secret changeme -p tcp://public.easytier.cn:11010 --dev-name et0 --multi-thread";
    serviceConfig = {
      Restart = "always";
      RestartMaxDelaySec = "1m";
      RestartSec = "100ms";
      RestartSteps = 9;
      User = "root";
    };
    wantedBy = [ "multi-user.target" ];
    after = [ "network.target" ];
    path = with pkgs; [
      easytier
      iproute2
      bash
    ];
  };
}
&lt;/code&gt;&lt;/p&gt;
    &lt;head rend="h2"&gt;Nebula&lt;/head&gt;
    &lt;p&gt;This is a more pompous commercial solution from the creators of Slack.&lt;/p&gt;
    &lt;p&gt;It has elliptic curve encryption, suggests using its own PKI and looks generally reliable. &lt;lb/&gt; Though the prospect of manually distributing certificates to machines doesn't thrill me.&lt;/p&gt;
    &lt;p&gt;For its operation it requires "lighthouses" that will connect all other nodes. &lt;lb/&gt; Inside, everything works on Noise Protocol. &lt;lb/&gt; On the outside it exposes only a single UDP port.&lt;/p&gt;
    &lt;p&gt;Among the nice features there's a firewall and zoning, to build slightly more complex networks than "everyone with everyone."&lt;/p&gt;
    &lt;p&gt;And also Nebula's interface is absolutely shit. &lt;lb/&gt; Instead of a normal CLI, you need to configure an internal sshd and connect via SSH to localhost. &lt;lb/&gt; Maybe it's more secure, but it's utterly disgusting.&lt;head&gt;ConfigurationExample&lt;/head&gt;&lt;code&gt;let
  isLighthouse = if (config.networking.hostName == "lighthouse") then true else false;
in
{
  services.nebula.networks.sumeragi = {
    enable = true;
    ca = "/etc/nebula/ca.crt";
    cert = "/etc/nebula/node.crt";
    key = "/etc/nebula/node.key";

    isLighthouse = isLighthouse;
    lighthouses = if (isLighthouse) then [] else [ "10.1.0.1" ];

    listen = {
      host = "0.0.0.0";
      port = 4242;
    };

    staticHostMap = {
      "10.1.0.1" = [ "266.266.266.266:4242" ];
    };

    settings = if (isLighthouse) then {
      sshd = {
        enabled = true;
        listen = "127.0.0.1:2222";
        host_key = "/etc/nebula/id_ed25519";
        authorized_users = [
          {
            user = "nommy";
            keys = [
              "ssh-ed25519 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            ];
          }
        ];
      };
    } else {
    };

    firewall = {
      outbound = [
        { port = "any"; proto = "any"; host = "any"; }
      ];
      inbound = [
        { port = "any"; proto = "any"; host = "any"; }
      ];
    };
  };

  networking.firewall.allowedUDPPorts = [ 4242 ];
}

&lt;/code&gt;&lt;/p&gt;
    &lt;head rend="h2"&gt;Tinc&lt;/head&gt;
    &lt;p&gt;When I found this, my first thought was "The fuck is this?" &lt;lb/&gt; The project is over 10 years old and is still in an unstable state. &lt;lb/&gt; The current version is &lt;code&gt;1.1pre18&lt;/code&gt;, released way back in 2021. &lt;lb/&gt; The last commit to the &lt;code&gt;1.1&lt;/code&gt; branch was over a year ago. &lt;lb/&gt; It's packaged in Nix as Lucy knows what. &lt;lb/&gt; How is this even a thing?&lt;/p&gt;
    &lt;p&gt;But actually, Tinc can surprise you quite a bit.&lt;/p&gt;
    &lt;p&gt;Under the hood it uses its own protocol over UDP, elliptic curves and a ton of black magic (which, by the way, is properly documented) that makes it all work.&lt;/p&gt;
    &lt;p&gt;Of course, it still needs a node for initial connection bootstrapping, but there's no special setup required — any node can do it, and afterwards it's all direct node-to-node communication.&lt;/p&gt;
    &lt;p&gt;It has a relatively normal CLI, can show a graph of the entire network, has other tasty features, but really lacks some kind of TUI, or at least ASCII art for rendering that graph. For obvious reasons, the configuration was assembled in a dendrofecal manner, I strongly advise not copying it as-is, but rewriting it yourself. Yes, interface and route configuration is done through &lt;head&gt;Example of not very good configuration&lt;/head&gt;&lt;code&gt;tinc-up&lt;/code&gt; and &lt;code&gt;tinc-down&lt;/code&gt;. &lt;lb/&gt; This is the intended way&lt;code&gt;let
  hostName = config.networking.hostName;
in
{
  networking.firewall.allowedTCPPorts = [ 655 ];
  networking.firewall.allowedUDPPorts = [ 655 ];

  services.tinc = {
    networks = {
      sumeragi = {
        name = hostName;
        ed25519PrivateKeyFile = "/etc/tinc/sumeragi/ed25519_key.priv";
        interfaceType = "tun";
        debugLevel = 3;

        hostSettings = {
          lighthouse = {
            settings.Ed25519PublicKey = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
            subnets = [
              { address = "10.2.0.1/32"; }
            ];
            addresses = [
              { address = "266.266.266.266"; port = 655; }
            ];
          };
          laptop = {
            settings.Ed25519PublicKey = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
            subnets = [
              { address = "10.2.0.2/32"; }
            ];
          };
          rpi = {
            settings.Ed25519PublicKey = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
            subnets = [
              { address = "10.2.0.3/32"; }
            ];
          };
        };
      };
    };
  };

  environment.etc = {
    "tinc/sumeragi/tinc-up".source = pkgs.writeScript "tinc-up-sumeragi" ''
        #!${pkgs.stdenv.shell}
        ${pkgs.nettools}/bin/ifconfig $INTERFACE ${(builtins.elemAt config.services.tinc.networks.sumeragi.hostSettings."${hostName}".subnets 0).address} netmask 255.255.255.0
        /run/current-system/sw/bin/ip r add 10.2.0.0/24 dev tinc.sumeragi
    '';
    "tinc/sumeragi/tinc-down".source = pkgs.writeScript "tinc-down-sumeragi" ''
        #!${pkgs.stdenv.shell}
        ${pkgs.nettools}/bin/ifconfig $INTERFACE down
        /run/current-system/sw/bin/ip r del 10.2.0.0/24 dev tinc.sumeragi
    '';
  };
}
&lt;/code&gt;&lt;/p&gt;
    &lt;head rend="h1"&gt;Methodology of measurment&lt;/head&gt;
    &lt;p&gt;This is actually a huge topic and you could write a whole book about it, but the most important thing is — IPerf lies. &lt;lb/&gt; Different versions of IPerf show different numbers, use different measurement methodologies by default, have many tuning options that affect results, and sometimes their readings differ significantly from reality.&lt;/p&gt;
    &lt;p&gt;So along with two versions of IPerf, it's worth adding some real-world network usage cases.&lt;/p&gt;
    &lt;p&gt;Internet speeds in both directions are roughly the same for all nodes, so I'll take numbers from the first direction that comes up, since the difference will be within the margin of error.&lt;/p&gt;
    &lt;head rend="h2"&gt;Infrastructure&lt;/head&gt;
    &lt;p&gt;For realistic measurements I'll use three machines:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Home laptop (Laptop) in Spain&lt;/item&gt;
      &lt;item&gt;Intermediate server with public IP (Lighthouse) in Finland&lt;/item&gt;
      &lt;item&gt;Raspberry Pi (RPi) behind the Russian firewall&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The mesh network coordinators are hosted on Lighthouse, while speed is measured between Laptop and RPi.&lt;/p&gt;
    &lt;head rend="h2"&gt;Ping&lt;/head&gt;
    &lt;p&gt;
      &lt;code&gt;ping -c 300 10.1.0.3&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;We send ICMP packets, wait for the response to arrive, measure the time it took to get the response. &lt;lb/&gt; Here we can check latency, jittering and the number of lost packets.&lt;/p&gt;
    &lt;p&gt;Latency is the average ping response time. &lt;lb/&gt; Jittering is how much the response time "wanders" relative to the average. Measured in ms. &lt;lb/&gt; The number of lost packets is self-explanatory.&lt;/p&gt;
    &lt;p&gt;For more or less stable results, 300 packets should be enough.&lt;/p&gt;
    &lt;head rend="h2"&gt;/dev/zero through SSH&lt;/head&gt;
    &lt;p&gt;
      &lt;code&gt;ssh 10.1.0.3 'dd if=/dev/zero bs=128M count=3 2&amp;gt;/dev/null' | dd of=/dev/null status=progress&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;We read three times 128 MB of zeros through SSH, then look at the reading speed. &lt;lb/&gt; Generally not a bad way to determine data transfer speed inside an SSH tunnel.&lt;/p&gt;
    &lt;p&gt;The main reason for using this test is that through some solutions SSH works so hellishly slow that more than a second can pass between pressing a key and the character appearing on screen, which is completely unacceptable. &lt;lb/&gt; And sometimes it doesn't work at all.&lt;/p&gt;
    &lt;head rend="h2"&gt;Wget&lt;/head&gt;
    &lt;p&gt;
      &lt;code&gt;wget 10.1.0.3:5201/testfile&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;As a test file — the same 384 MB of zeros from /dev/null.&lt;/p&gt;
    &lt;p&gt;As a server I use simple-http-server, setting the number of threads equal to the number of CPU cores (8). &lt;lb/&gt; Of course, with compression disabled, otherwise megabytes of zeros risk turning into kilobytes of headers.&lt;/p&gt;
    &lt;head rend="h1"&gt;iperf2 and iperf3&lt;/head&gt;
    &lt;p&gt;Yes, they show orange prices in Africa. Hell knows how to tune this. &lt;lb/&gt; So we just run them with standard configuration and then normalize the results from megabits to megabytes.&lt;/p&gt;
    &lt;head rend="h2"&gt;Reference values&lt;/head&gt;
    &lt;p&gt;Measuring exact values for speed, ping and all this stuff that we could use as a baseline is somewhat impossible, since both machines are behind NAT. &lt;lb/&gt; But since the infrastructure includes a Lighthouse with a public IP, we can run a few tests and fantasize about some results.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="8"&gt;
        &lt;cell role="head"&gt;ICMP packet loss&lt;/cell&gt;
        &lt;cell role="head"&gt;ICMP Latency&lt;/cell&gt;
        &lt;cell role="head"&gt;ICMP Jittering&lt;/cell&gt;
        &lt;cell role="head"&gt;/dev/zero through SSH&lt;/cell&gt;
        &lt;cell role="head"&gt;Wget&lt;/cell&gt;
        &lt;cell role="head"&gt;iperf2&lt;/cell&gt;
        &lt;cell role="head"&gt;iperf3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Laptop -&amp;gt; Lighthouse&lt;/cell&gt;
        &lt;cell&gt;0%&lt;/cell&gt;
        &lt;cell&gt;71.879 ms&lt;/cell&gt;
        &lt;cell&gt;1.422 ms&lt;/cell&gt;
        &lt;cell&gt;25.5 MB/s&lt;/cell&gt;
        &lt;cell&gt;23.3 MB/s&lt;/cell&gt;
        &lt;cell&gt;18 MB/s&lt;/cell&gt;
        &lt;cell&gt;24.375 MB/s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;RPi -&amp;gt; Lighthouse&lt;/cell&gt;
        &lt;cell&gt;0%&lt;/cell&gt;
        &lt;cell&gt;51.872 ms&lt;/cell&gt;
        &lt;cell&gt;1.011 ms&lt;/cell&gt;
        &lt;cell&gt;9.0 MB/s&lt;/cell&gt;
        &lt;cell&gt;Timeout&lt;/cell&gt;
        &lt;cell&gt;9.963 MB/s&lt;/cell&gt;
        &lt;cell&gt;11.112 MB/s&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Now we can start fantasizing.&lt;/p&gt;
    &lt;p&gt;Speed between nodes is limited by the slowest link, so we use the minimum values as our reference.&lt;lb/&gt; Latencies can simply be added together. But what to do with jittering isn't entirely clear. &lt;lb/&gt; Supposedly you can't add such values, &lt;lb/&gt; I don't want to recalculate every packet manually, so I'll just take the maximum value.&lt;/p&gt;
    &lt;p&gt;And it's time for the final results.&lt;/p&gt;
    &lt;head rend="h1"&gt;Results&lt;/head&gt;
    &lt;p&gt;All speeds are normalized in bytes. To convert to bits, multiply by 8.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="8"&gt;
        &lt;cell role="head"&gt;ICMP packet loss&lt;/cell&gt;
        &lt;cell role="head"&gt;ICMP Latency&lt;/cell&gt;
        &lt;cell role="head"&gt;ICMP Jittering&lt;/cell&gt;
        &lt;cell role="head"&gt;/dev/zero through SSH&lt;/cell&gt;
        &lt;cell role="head"&gt;Wget&lt;/cell&gt;
        &lt;cell role="head"&gt;iperf2&lt;/cell&gt;
        &lt;cell role="head"&gt;iperf3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Reference&lt;/cell&gt;
        &lt;cell&gt;0%&lt;/cell&gt;
        &lt;cell&gt;123.751 ms&lt;/cell&gt;
        &lt;cell&gt;1.422 ms&lt;/cell&gt;
        &lt;cell&gt;9.0 MB/s&lt;/cell&gt;
        &lt;cell&gt;Timeout&lt;/cell&gt;
        &lt;cell&gt;9.963 MB/s&lt;/cell&gt;
        &lt;cell&gt;11.112 MB/s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Wireguard + udp2raw&lt;/cell&gt;
        &lt;cell&gt;49.6%&lt;/cell&gt;
        &lt;cell&gt;108.806 ms&lt;/cell&gt;
        &lt;cell&gt;3.724 ms&lt;/cell&gt;
        &lt;cell&gt;Timeout&lt;/cell&gt;
        &lt;cell&gt;Timeout&lt;/cell&gt;
        &lt;cell&gt;3.175 KB/s&lt;/cell&gt;
        &lt;cell&gt;0.00 B/s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;EasyTier&lt;/cell&gt;
        &lt;cell&gt;0%&lt;/cell&gt;
        &lt;cell&gt;153.163 ms&lt;/cell&gt;
        &lt;cell&gt;36.290 ms&lt;/cell&gt;
        &lt;cell&gt;2.7 MB/s&lt;/cell&gt;
        &lt;cell&gt;8.09 MB/s&lt;/cell&gt;
        &lt;cell&gt;6.15 KB/s&lt;/cell&gt;
        &lt;cell&gt;0.00 B/s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="8"&gt;
        &lt;cell&gt;Nebula&lt;/cell&gt;
        &lt;cell&gt;0%&lt;/cell&gt;
        &lt;cell&gt;122.173 ms&lt;/cell&gt;
        &lt;cell&gt;15.054 ms&lt;/cell&gt;
        &lt;cell&gt;2.7 MB/s&lt;/cell&gt;
        &lt;cell&gt;3.40 MB/s&lt;/cell&gt;
        &lt;cell&gt;5.975 KB/s&lt;/cell&gt;
        &lt;cell&gt;0.00 B/s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Tinc&lt;/cell&gt;
        &lt;cell&gt;2.3%&lt;/cell&gt;
        &lt;cell&gt;115.065 ms&lt;/cell&gt;
        &lt;cell&gt;3.393 ms&lt;/cell&gt;
        &lt;cell&gt;14.7 MB/s&lt;/cell&gt;
        &lt;cell&gt;5.16 MB/s&lt;/cell&gt;
        &lt;cell&gt;6.488 MB/s&lt;/cell&gt;
        &lt;cell&gt;4.175 MB/s&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Egyptian power of those iperfs...&lt;/p&gt;
    &lt;p&gt;Tinc, as I already said, is very capable of surprising.&lt;/p&gt;
    &lt;p&gt;EasyTier can be forgiven for such overheads, it's ad-hoc after all and generally "be thankful there's any connection at all."&lt;/p&gt;
    &lt;p&gt;But Nebula frankly disappointed me. Here I really want to crack a joke about the Slack client on Electron, but... I expected better, seriously.&lt;/p&gt;
    &lt;p&gt;So if you want to get something like this — Tinc is the best choice performance-wise. &lt;lb/&gt; I'll keep all of them at once for myself. &lt;lb/&gt; I don't like launching Mars rovers unnecessarily.&lt;/p&gt;
    &lt;p&gt;That's all, folks.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt; And it all started when mom asked me to fix the robot vacuum...&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45405815</guid><pubDate>Sun, 28 Sep 2025 16:47:39 +0000</pubDate></item><item><title>Real-Time Radiation World Map</title><link>https://www.gmcmap.com/</link><description>&lt;doc fingerprint="623700cbe885594d"&gt;
  &lt;main&gt;
    &lt;p&gt;Toggle navigation GMCMAP Map Geiger Counter Map Radon Detector Map Submit Data Automatically Submit Data Tutorial (current) Store (current) Forum (current) Mobile apps Donate (current) Sign In/Register Real Time Radiation World Map Real-Time Radiation World Map Load Time range Any time Last 24 hours Last week Last month Last year 0 - 50 CPM 50 - 100 CPM 100 - 200 CPM Over 200 CPM&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45405990</guid><pubDate>Sun, 28 Sep 2025 17:09:09 +0000</pubDate></item><item><title>Bayesian Data Analysis, Third edition (2013) [pdf]</title><link>https://sites.stat.columbia.edu/gelman/book/BDA3.pdf</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45406109</guid><pubDate>Sun, 28 Sep 2025 17:23:21 +0000</pubDate></item><item><title>UK Petition: Do not introduce Digital ID cards</title><link>https://petition.parliament.uk/petitions/730194</link><description>&lt;doc fingerprint="89cb2d25e1ee6ba"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Petition Do not introduce Digital ID cards&lt;/head&gt;
    &lt;p&gt;We demand that the UK Government immediately commits to not introducing a digital ID cards. There are reports that this is being looked at.&lt;/p&gt;
    &lt;head&gt;More details&lt;/head&gt;
    &lt;p&gt;We think this would be a step towards mass surveillance and digital control, and that no one should be forced to register with a state-controlled ID system. We oppose the creation of any national ID system. &lt;lb/&gt;ID cards were scrapped in 2010, in our view for good reason.&lt;/p&gt;
    &lt;p&gt;2,369,263 signatures&lt;/p&gt;
    &lt;p&gt;Show on a map the geographical breakdown of signatures by constituency&lt;/p&gt;
    &lt;p&gt;100,000 signatures required to be considered for a debate in Parliament&lt;/p&gt;
    &lt;head rend="h2"&gt;Parliament will consider this for a debate&lt;/head&gt;
    &lt;p&gt;Parliament considers all petitions that get more than 100,000 signatures for a debate&lt;/p&gt;
    &lt;p&gt;Waiting for 6 days for a debate date&lt;/p&gt;
    &lt;head rend="h2"&gt;Government will respond&lt;/head&gt;
    &lt;p&gt;Government responds to all petitions that get more than 10,000 signatures&lt;/p&gt;
    &lt;p&gt;Waiting for 25 days for a government response&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45406442</guid><pubDate>Sun, 28 Sep 2025 18:01:39 +0000</pubDate></item><item><title>VMScape and why Xen dodged it</title><link>https://virtualize.sh/blog/vmscape-and-why-xen-dodged-it/</link><description>&lt;doc fingerprint="b4e311dca163e6c1"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;VMScape and why Xen dodged it&lt;/head&gt;
    &lt;p&gt;It’s been less than two weeks since the security team at ETH Zürich published their research on a new microarchitectural attack they call VMScape:&lt;/p&gt;
    &lt;p&gt;It’s a neat piece of work, and it shows once again how CPUs, with all their clever tricks for performance, can sometimes open the door to data leaks across virtual machines.&lt;/p&gt;
    &lt;head rend="h2"&gt;What is VMScape?&lt;/head&gt;
    &lt;p&gt;The short version: modern CPUs use a branch predictor to guess where code will go next. It makes things faster, but the predictor also “remembers” past patterns. If you can manipulate that memory, you can mislead the CPU and peek at things you shouldn’t. That’s the basic idea behind Spectre-style attacks.&lt;/p&gt;
    &lt;p&gt;According to the ETH team:&lt;/p&gt;
    &lt;quote&gt;“We find that branch predictor state is not fully flushed across VMs, enabling cross-VM Branch Target Injection (vBTI) primitives. We demonstrate the practical impact of vBTI with VMScape, a cross-VM attack capable of leaking QEMU userspace secrets from a malicious guest VM on AMD Zen 4 and Zen 5 CPUs.”&lt;/quote&gt;
    &lt;p&gt;In other words, a malicious VM can target the hypervisor’s userspace components and start leaking data. For KVM, that means QEMU, which is heavily exposed. VMware is in the same situation.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why Xen wasn’t affected&lt;/head&gt;
    &lt;p&gt;The researchers also note that Xen is not vulnerable. That’s not because Xen has no bugs (it does, like every hypervisor), but because of its architecture.&lt;/p&gt;
    &lt;p&gt;From day one, Xen was designed to keep the hypervisor core small and move everything else out. Device emulation, storage drivers, network stacks — they all live in Dom0, which is itself just another virtual machine. Dom0 has more privileges than a normal guest, but it’s still not the hypervisor.&lt;/p&gt;
    &lt;p&gt;That architectural choice makes Xen closer to a microkernel than a traditional monolithic hypervisor. The core stays minimal, with a narrow set of responsibilities, and anything that doesn’t absolutely need to run at the highest privilege level gets pushed out. That’s not just elegant — it’s a big deal for security.&lt;/p&gt;
    &lt;head rend="h2"&gt;Size matters (in a good way)&lt;/head&gt;
    &lt;p&gt;Because the hypervisor itself is small, it’s easier to audit, reason about, and even certify. That’s why you’ll find Xen at the heart of a lot of embedded and safety-critical projects, where formal verification and certification are required. Try doing that with a massive, monolithic kernel and you’ll quickly run into a wall. With Xen, it’s actually feasible (and being done as we speak).&lt;/p&gt;
    &lt;p&gt;VMScape highlights the benefits of that design: QEMU is simply not sitting next to the hypervisor. Even if you leak information from it, you’re still only talking about a process in Dom0, not the privileged heart of the system.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why this matters&lt;/head&gt;
    &lt;p&gt;Architectural choices made twenty years ago are paying off today. By separating responsibilities, Xen reduced its attack surface and avoided a whole class of problems. That doesn’t make it invincible (Xen has had and will have its share of vulnerabilities) but it does mean that by design, certain attacks don’t land as hard.&lt;/p&gt;
    &lt;p&gt;As the ETH Zürich team points out, mitigations for KVM involve adding new predictor flushes, which Linux developers have already started to implement. VMware will need similar patches. Xen doesn’t need those same emergency measures, because the architecture already put a buffer in place.&lt;/p&gt;
    &lt;head rend="h2"&gt;Defense in depth&lt;/head&gt;
    &lt;p&gt;It’s tempting to say “Xen wins” and stop there. But that’s not the whole story. Security is never just about one design decision. CPUs will keep evolving, new side channels will keep appearing, and no hypervisor can afford to be complacent.&lt;/p&gt;
    &lt;p&gt;Still, VMScape is a good reminder that defense in depth starts at the architecture level. A small, microkernel-like core, privilege separation, isolation of device emulation — all of that adds resilience. It won’t stop every possible attack, but it does add another layer of safety, and in security, layers are what make the difference.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45406573</guid><pubDate>Sun, 28 Sep 2025 18:19:01 +0000</pubDate></item><item><title>J-Link Compact USB-C Issues</title><link>https://alvarop.com/2025/09/j-link-compact-usb-c-issues/</link><description>&lt;doc fingerprint="2fd11201df2e12fa"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;J-Link Compact USB-C Issues&lt;/head&gt;
    &lt;p&gt;Do you have a J-Link Compact and have noticed it doesn’t work with some USB C to C cables? I do, and I did, so I decided to investigate&amp;amp;mldr;&lt;/p&gt;
    &lt;head rend="h2"&gt;Background&lt;/head&gt;
    &lt;p&gt;The J-Link Compact is a really nice debugger for various microcontrollers. The non compact version is rather large and uses USB-B(or Ethernet). It comes with a branded ~1m C to C USB cable, which works great. I plug it into my laptop, the green LED turns on and I’m ready to debug!&lt;/p&gt;
    &lt;p&gt;One day, I needed to reach a device that was more than 1m away, so I grabbed a 2m macbook charging cable and plugged it in. It didn’t work. The light didn’t turn on and the device didn’t enumerate. I immediately tried another cable and it didn’t work either. The original cable worked, but none of the long ones did. I tried a long USB A to C cable, and it worked just fine&amp;amp;mldr; That gave me a hint to what the problem could be&amp;amp;mldr;&lt;/p&gt;
    &lt;head rend="h2"&gt;Investigation&lt;/head&gt;
    &lt;head rend="h3"&gt;Type-C Detour&lt;/head&gt;
    &lt;p&gt;The fact that some type-c cables work but not others strongly points to issues with the CC pull down resistors. To understand what that means, we need to look at the USB-C specification. In short, all USB-C cables connect one of the two CC lines between host and device. The sink/device must have a 5.1kΩ pull down resistors on each of the CC lines. The host has a pull up whose value depends on how much power it can source. The second CC line remains disconnected and both devices can use that information to determine cable orientation, among other things.&lt;/p&gt;
    &lt;p&gt;The figure below(from the USB spec) shows a schematic of the connection. For most “basic” USB 2.0 cables, Ra is not there and the pin is effectively left floating.&lt;/p&gt;
    &lt;p&gt;That basic resistor configuration is enough for a device to advertise up to 5V@3A of power. Devices can further negotiate for more power using the PD protocol, but to get the maximum power available(over 3A and up to 48V) requires the cables to be “electronically marked” or eMarked. This means there’s a small microcontroller inside the cable with information on the cable’s capabilities. This is also required for “full featured” Type-C cables like Thunderbolt and DisplayPort.&lt;/p&gt;
    &lt;p&gt;In order for the host to know it has an eMarked cable connected, a 1kΩ pull down resistor is present on the second CC line, also referred to as VCONN. The device can then power the microcontroller and talk to it over the CC line.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Cables&lt;/head&gt;
    &lt;p&gt;In order to test my theory, the first thing I did was pull out my trusty USB Cable Tester and tested working and non working cables.&lt;/p&gt;
    &lt;p&gt;First, I tested the included cable. It looked OK.&lt;/p&gt;
    &lt;p&gt;I found another cable that worked, and it looked OK too. The only reason the signals don’t exactly match the one above is just the orientation of the cable.&lt;/p&gt;
    &lt;p&gt;Finally, I checked the macbook charging cable&amp;amp;mldr; Aha! Both CC lines are lit up. CC2 isn’t actually connected to the other side, but since it has a 1kΩ resistor to ground, the LED lights up, a little dimmer than the rest. I verified this with a breakout board and a multimeter.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Device&lt;/head&gt;
    &lt;p&gt;In order to measure the CC pull downs of the J-Link, I used a breakout board I had around from my SWD to USB-C project.&lt;/p&gt;
    &lt;p&gt;I started by measuring the resistance between the CC lines and ground. It was around 5kΩ, which is close enough to 5.1kΩ. The problem, and what I suspected was going on, is that both CC lines are connected together.&lt;/p&gt;
    &lt;p&gt;You might ask, why is this an issue if cables don’t connect the second CC line? Imagine you’re the computer that the J-Link is attached to. Before providing 5V power, you monitor your CC lines until they get pulled low. Then you check if they are being pulled low by a 5.1kΩ resistor. If both those conditions match, then you apply 5V to the bus.&lt;/p&gt;
    &lt;p&gt;Let’s see what resistance the host would get with the good cable&amp;amp;mldr;&lt;/p&gt;
    &lt;p&gt;CC1 looks OK.&lt;/p&gt;
    &lt;p&gt;CC2 also looks OK.&lt;/p&gt;
    &lt;p&gt;Now let’s verify with an eMarked cable.&lt;/p&gt;
    &lt;p&gt;CC1 is seeing&amp;amp;mldr; just under 1kΩ. This is the eMarked cable pull down on one side. Not a problem.&lt;/p&gt;
    &lt;p&gt;And CC2 is seeing 0.7836kΩ. That’s far from the expected 5.1kΩ, so of course the host won’t power the device!&lt;/p&gt;
    &lt;head rend="h3"&gt;But why?!&lt;/head&gt;
    &lt;p&gt;First, lets open up the J-Link and take a look inside.&lt;/p&gt;
    &lt;p&gt;There it is. Both resistors are connected together and both CC lines are connected together. This would put the 1kΩ cable pull down in parallel with the 5.1kΩ pull down.&lt;/p&gt;
    &lt;p&gt;I’m not quite sure of the logic behind this. I guess they saved one ESD protection diode? But then they used 2 resistors when 1 would suffice. It wouldn’t have worked if they used two of the recommended 5.1kΩ, so they probably used two 10kΩ resistors. This reminds me about a similar issue the original Raspberry Pi 4 had with it’s power port. Take a look at the great Hackaday write up for a much better explanation.&lt;/p&gt;
    &lt;p&gt;Either way, I expect better design out of a $498 US (or $748 for the PLUS model) device! A correct implementation would cost them a few cents at most&amp;amp;mldr; These days, more and more cables are eMarked and this will cause endless frustration to users. Hopefully this post alleviates some of that.&lt;/p&gt;
    &lt;head rend="h2"&gt;Workarounds&lt;/head&gt;
    &lt;p&gt;Don’t use eMarked cables&amp;amp;mldr; If you don’t have a cable tester, look for Thunderbolt/displayport labels as well as 100W/240W markings. Those will always be eMarked.&lt;/p&gt;
    &lt;p&gt;USB A to C cables will always work since the host doesn’t have CC lines to worry about on the type A port.&lt;/p&gt;
    &lt;p&gt;You could also cut a couple of traces, replace two resistors, and make one new solder joint on your J-Link, but that probably voids the warranty. 😂&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45406749</guid><pubDate>Sun, 28 Sep 2025 18:40:02 +0000</pubDate></item><item><title>The QMA Singularity</title><link>https://scottaaronson.blog/?p=9183</link><description>&lt;doc fingerprint="310f29fe25a40c80"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;The QMA Singularity&lt;/head&gt;
    &lt;p&gt;A couple days ago, Freek Witteveen of CWI and I posted a paper to the arXiv called “Limits to black-box amplification in QMA.” Let me share the abstract:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;We study the limitations of black-box amplification in the quantum complexity class QMA. Amplification is known to boost any inverse-polynomial gap between completeness and soundness to exponentially small error, and a recent result (Jeffery and Witteveen, 2025) shows that completeness can in fact be amplified to be doubly exponentially close to 1. We prove that this is optimal for black-box procedures: we provide a quantum oracle relative to which no QMA verification procedure using polynomial resources can achieve completeness closer to 1 than doubly exponential, or a soundness which is super-exponentially small. This is proven by using techniques from complex approximation theory, to make the oracle separation from (Aaronson, 2008), between QMA and QMA with perfect completeness, quantitative.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;You can also check out my PowerPoint slides here.&lt;/p&gt;
    &lt;p&gt;To explain the context: QMA, or Quantum Merlin Arthur, is the canonical quantum version of NP. It’s the class of all decision problems for which, if the answer is “yes,” then Merlin can send Arthur a quantum witness state that causes him to accept with probability at least 2/3 (after a polynomial-time quantum computation), while if the answer is “no,” then regardless of what witness Merlin sends, Arthur accepts with probability at most 1/3. Here, as usual in complexity theory, the constants 2/3 and 1/3 are just conventions, which can be replaced (for example) by 1-2-n and 2-n using amplification.&lt;/p&gt;
    &lt;p&gt;A longstanding open problem about QMA—not the biggest problem, but arguably the most annoying—has been whether the 2/3 can be replaced by 1, as it can be for classical MA for example. In other words, does QMA = QMA1, where QMA1 is the subclass of QMA that admits protocols with “perfect completeness”? In 2008, I used real analysis to show that there’s a quantum oracle relative to which QMA ≠ QMA1, which means that any proof of QMA = QMA1 would need to use “quantumly nonrelativizing techniques” (not at all an insuperable barrier, but at least we learned something about why the problem is nontrivial).&lt;/p&gt;
    &lt;p&gt;Then came a bombshell: in June, Freek Witteveen and longtime friend-of-the-blog Stacey Jeffery released a paper showing that any QMA protocol can be amplified, in a black-box manner, to have completeness error that’s doubly exponentially small, 1/exp(exp(n)). They did this via a method I never would’ve thought of, wherein a probability of acceptance is encoded via the amplitudes of a quantum state that decrease in a geometric series. QMA, it turned out, was an old friend that still had surprises up its sleeve after a quarter-century.&lt;/p&gt;
    &lt;p&gt;In August, we had Freek speak about this breakthrough by Zoom in our quantum group meeting at UT Austin. Later that day, I asked Freek whether their new protocol was the best you could hope to do with black-box techniques, or whether for example one could amplify the completeness error to be triply exponentially small, 1/exp(exp(exp(n))). About a week later, Freek and I had a full proof written down that, using black-box techniques, doubly-exponentially small completeness error is the best you can do. In other words: we showed that, when one makes my 2008 QMA ≠ QMA1 quantum oracle separation quantitative, one gets a lower bound that precisely matches Freek and Stacey’s protocol.&lt;/p&gt;
    &lt;p&gt;All this will, I hope, interest and excite aficianados of quantum complexity classes, while others might have very little reason to care.&lt;/p&gt;
    &lt;p&gt;But here’s a reason why other people might care. This is the first paper I’ve ever put out for which a key technical step in the proof of the main result came from AI—specifically, from GPT5-Thinking. Here was the situation: we had an N×N Hermitian matrix E(θ) (where, say, N=2n), each of whose entries was a poly(n)-degree trigonometric polynomial in a real parameter θ. We needed to study the largest eigenvalue of E(θ), as θ varied from 0 to 1, to show that this λmax(E(θ)) couldn’t start out close to 0 but then spend a long time “hanging out” ridiculously close to 1, like 1/exp(exp(exp(n))) close for example.&lt;/p&gt;
    &lt;p&gt;Given a week or two to try out ideas and search the literature, I’m pretty sure that Freek and I could’ve solved this problem ourselves. Instead, though, I simply asked GPT5-Thinking. After five minutes, it gave me something confident, plausible-looking, and (I could tell) wrong. But rather than laughing at the silly AI like a skeptic might do, I told GPT5 how I knew it was wrong. It thought some more, apologized, and tried again, and gave me something better. So it went for a few iterations, much like interacting with a grad student or colleague. Within a half hour, it had suggested to look at the function&lt;/p&gt;
    &lt;p&gt;$$ Tr[(I-E(\theta))^{-1}] = \sum_{i=1}^N \frac{1}{1-\lambda_i(\theta)}. $$&lt;/p&gt;
    &lt;p&gt;It pointed out, correctly, that this was a rational function in θ of controllable degree, that happened to encode the relevant information about how close the largest eigenvalue λmax(E(θ)) is to 1. And this … worked, as we could easily check ourselves with no AI assistance. And I mean, maybe GPT5 had seen this or a similar construction somewhere in its training data. But there’s not the slightest doubt that, if a student had given it to me, I would’ve called it clever. Obvious with hindsight, but many such ideas are.&lt;/p&gt;
    &lt;p&gt;I had tried similar problems a year ago, with the then-new GPT reasoning models, but I didn’t get results that were nearly as good. Now, in September 2025, I’m here to tell you that AI has finally come for what my experience tells me is the most quintessentially human of all human intellectual activities: namely, proving oracle separations between quantum complexity classes. Right now, it almost certainly can’t write the whole research paper (at least if you want it to be correct and good), but it can help you get unstuck if you otherwise know what you’re doing, which you might call a sweet spot. Who knows how long this state of affairs will last? I guess I should be grateful that I have tenure.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45406911</guid><pubDate>Sun, 28 Sep 2025 19:00:20 +0000</pubDate></item><item><title>C-sigma: Easy-to-use Sigma proofs in C using libsodium</title><link>https://github.com/jedisct1/c-sigma</link><description>&lt;doc fingerprint="ea573654a98da7d8"&gt;
  &lt;main&gt;
    &lt;p&gt;A clean, simple C implementation of Sigma protocols with Fiat-Shamir transformation for non-interactive zero-knowledge proofs.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Schnorr Protocol: Prove knowledge of discrete logarithm&lt;/item&gt;
      &lt;item&gt;Chaum-Pedersen Protocol: Prove discrete logarithm equality (DLEQ)&lt;/item&gt;
      &lt;item&gt;Non-interactive proofs: Using Fiat-Shamir transformation with SHAKE128&lt;/item&gt;
      &lt;item&gt;Minimal API: Just 6 functions for complete functionality&lt;/item&gt;
      &lt;item&gt;No abstractions: Direct use of byte arrays, no wrapper types&lt;/item&gt;
      &lt;item&gt;Secure: Built on libsodium's Ristretto255 group operations&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;#include "sigma.h"

// Initialize
sigma_init();

// Prove knowledge of private key
uint8_t private_key[32], public_key[32], proof[64];
crypto_core_ristretto255_scalar_random(private_key);
crypto_scalarmult_ristretto255_base(public_key, private_key);

schnorr_prove(proof, private_key, public_key, message, message_len);
bool valid = schnorr_verify(proof, public_key, message, message_len);&lt;/code&gt;
    &lt;p&gt;Prerequisites:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;C compiler (clang or gcc)&lt;/item&gt;
      &lt;item&gt;libsodium development libraries&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Install libsodium (Ubuntu/Debian)
sudo apt-get install libsodium-dev

# Install libsodium (macOS)
brew install libsodium

# Build
make

# Run tests
./test

# Run examples
./example&lt;/code&gt;
    &lt;code&gt;int sigma_init(void);&lt;/code&gt;
    &lt;p&gt;Initialize the library (wraps sodium_init).&lt;/p&gt;
    &lt;p&gt;Proves knowledge of x where Y = x*G (G is the generator).&lt;/p&gt;
    &lt;code&gt;// Create proof
int schnorr_prove(
    uint8_t proof[64],                  // Output: 64-byte proof
    const uint8_t witness[32],          // Secret x
    const uint8_t public_key[32],       // Public Y = x*G
    const uint8_t *message,              // Message to bind
    size_t message_len
);

// Verify proof
bool schnorr_verify(
    const uint8_t proof[64],
    const uint8_t public_key[32],
    const uint8_t *message,
    size_t message_len
);&lt;/code&gt;
    &lt;p&gt;Proves that log_g1(h1) = log_g2(h2) without revealing the exponent.&lt;/p&gt;
    &lt;code&gt;// Create proof
int chaum_pedersen_prove(
    uint8_t proof[96],                  // Output: 96-byte proof
    const uint8_t witness[32],          // Secret x where h1=g1^x, h2=g2^x
    const uint8_t g1[32], const uint8_t h1[32],
    const uint8_t g2[32], const uint8_t h2[32],
    const uint8_t *message,
    size_t message_len
);

// Verify proof
bool chaum_pedersen_verify(
    const uint8_t proof[96],
    const uint8_t g1[32], const uint8_t h1[32],
    const uint8_t g2[32], const uint8_t h2[32],
    const uint8_t *message,
    size_t message_len
);&lt;/code&gt;
    &lt;p&gt;What it proves: Knowledge of a secret value (discrete logarithm) without revealing it.&lt;/p&gt;
    &lt;p&gt;Mathematical property: Proves "I know x such that Y = x*G" where G is the generator and Y is public.&lt;/p&gt;
    &lt;p&gt;Use cases:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Digital signatures: Prove you own the private key corresponding to a public key&lt;/item&gt;
      &lt;item&gt;Authentication: Log in to a service without transmitting your password&lt;/item&gt;
      &lt;item&gt;Cryptocurrency wallets: Prove ownership of funds without revealing private keys&lt;/item&gt;
      &lt;item&gt;Access control: Demonstrate you have credentials without exposing them&lt;/item&gt;
      &lt;item&gt;Password-authenticated key exchange (PAKE): Establish secure channels based on passwords&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Example scenario: Alice wants to prove she owns a Bitcoin address. She uses Schnorr to prove she knows the private key corresponding to the public address, without revealing the private key itself.&lt;/p&gt;
    &lt;p&gt;What it proves: Two discrete logarithms are equal, without revealing the common exponent.&lt;/p&gt;
    &lt;p&gt;Mathematical property: Proves "log_g1(h1) = log_g2(h2)" or equivalently "h1 = g1^x AND h2 = g2^x" for some secret x.&lt;/p&gt;
    &lt;p&gt;Use cases:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Verifiable encryption: Prove a ciphertext encrypts a specific value without decryption&lt;/item&gt;
      &lt;item&gt;Anonymous credentials: Show two credentials belong to the same user without revealing identity&lt;/item&gt;
      &lt;item&gt;Mix networks: Prove correct re-encryption in privacy protocols&lt;/item&gt;
      &lt;item&gt;Cross-chain atomic swaps: Prove same secret is used in multiple transactions&lt;/item&gt;
      &lt;item&gt;Verifiable shuffles: Prove a list was correctly permuted without revealing the permutation&lt;/item&gt;
      &lt;item&gt;Blind signatures: Prove consistency between blinded and unblinded values&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Example scenario: A voting system needs to prove that an encrypted vote was correctly re-encrypted (same vote, different randomness) during the mixing phase, without revealing the actual vote.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Aspect&lt;/cell&gt;
        &lt;cell role="head"&gt;Schnorr&lt;/cell&gt;
        &lt;cell role="head"&gt;Chaum-Pedersen&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Proof size&lt;/cell&gt;
        &lt;cell&gt;64 bytes&lt;/cell&gt;
        &lt;cell&gt;96 bytes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;What's proven&lt;/cell&gt;
        &lt;cell&gt;Knowledge of one secret&lt;/cell&gt;
        &lt;cell&gt;Equality of two discrete logs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Complexity&lt;/cell&gt;
        &lt;cell&gt;Simpler&lt;/cell&gt;
        &lt;cell&gt;More complex&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Computation&lt;/cell&gt;
        &lt;cell&gt;2 exponentiations to verify&lt;/cell&gt;
        &lt;cell&gt;4 exponentiations to verify&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Primary use&lt;/cell&gt;
        &lt;cell&gt;Authentication, signatures&lt;/cell&gt;
        &lt;cell&gt;Verifiable encryption, DLEQ proofs&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Elliptic Curve Group: Ristretto255 (via libsodium)&lt;/item&gt;
      &lt;item&gt;Hash Function: SHAKE128 for Fiat-Shamir challenges&lt;/item&gt;
      &lt;item&gt;Proof Sizes: Fixed - 64 bytes (Schnorr), 96 bytes (Chaum-Pedersen)&lt;/item&gt;
      &lt;item&gt;Security: 128-bit security level&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45407505</guid><pubDate>Sun, 28 Sep 2025 20:07:07 +0000</pubDate></item><item><title>Linus Learns Analog Circuits</title><link>https://github.com/torvalds/GuitarPedal</link><description>&lt;doc fingerprint="261000374a66177e"&gt;
  &lt;main&gt;
    &lt;p&gt;This is a personal toy project that has gone through several phases, but the common theme has been that it makes absolutely no sense outside of the very specific niche of "Linus is trying to learn random things about electronics".&lt;/p&gt;
    &lt;p&gt;So keep that in mind: there is very little point to any of this to anybody else. Don't expect some great useful guitar pedal experience.&lt;/p&gt;
    &lt;p&gt;I call it my "LEGO for adults" hobby, because this got started when I wanted to extend my traditional after-Christmas activity (which was receiving and building actual LEGO kits, which has been a thing for me since I was a wee tyke) with something else.&lt;/p&gt;
    &lt;p&gt;So for Christmas 2024, I got a new soldering iron and randomly started doing guitar pedal kits. And so over the next month or two, I built at least two dozen kits, and had to literally look for victims to give them away to because I had no use for them myself.&lt;/p&gt;
    &lt;p&gt;Note&lt;/p&gt;
    &lt;p&gt;Of all the kits I built, the ones I enjoyed the most were the Aion FX ones, and if you are looking for a kit build of traditional analog guitar pedals, I can heartily recommend them.&lt;/p&gt;
    &lt;p&gt;The documentation, the customer service, the components, and the enclosures were all top notch. See "Aion FX"&lt;/p&gt;
    &lt;p&gt;Anyway, after building a lot of these traditional analog guitar pedal kits I decided I really wanted to actually understand what they did, because I really had very little experience with any analog circuits.&lt;/p&gt;
    &lt;p&gt;While I've done some very limited electronics most of my life, almost all of it has been related to computers, so it's been either digital logic or power supplies for them.&lt;/p&gt;
    &lt;p&gt;Also, I was looking for a different kind of soldering experience where there was less snipping of legs of through-hole components. I actually like soldering SMT components, but that doesn't tend to be what those guitar pedal kits do.&lt;/p&gt;
    &lt;p&gt;I had done some very limited PCB design with kicad a few years ago, so I decided to just start learning more about analog circuits. And then it kind of grew from that.&lt;/p&gt;
    &lt;p&gt;This is the "fourth generation" of my guitar pedal design journey, and is a new repository because the goal of the learning experience has evolved.&lt;/p&gt;
    &lt;p&gt;What started out being about the analog circuits (and the power rails: those were always a big thing) got to the point where I realized I really want to do a mixed signal design: understanding what the circuits do is one thing, re-creating some analog design from the 70s when you don't actually care about the sound is another thing entirely.&lt;/p&gt;
    &lt;p&gt;Also, on the actual analog signal side, I started out using op-amps, but as I was attempting to learn how things actually worked, I had switched over to a "discrete components only" model, and this continues that trend (except for the whole digital side, of course).&lt;/p&gt;
    &lt;p&gt;Note&lt;/p&gt;
    &lt;p&gt;To me "discrete components" does include more optimized packages: things like dual diodes or matched transistors, but not more complex circuits like a op-amp (or a 555 timer or D Flip-flop or other classic logic IC)&lt;/p&gt;
    &lt;p&gt;Also, because I don't typically listen to the end result, but look at it with a signal generator and an oscilloscope, I've grown to detest power supply noise.&lt;/p&gt;
    &lt;p&gt;Not knowing what I was doing, quite a lot of my circuits have been very noisy indeed, and have coupled in noise from the power supply into the signal chain, and you can really see that on an oscilloscope even when it's not always audible.&lt;/p&gt;
    &lt;p&gt;Even in op-amp designs, where the op-amp itself has a very high PSRR and isn't mixing power supply noise into the signal, my biasing circuits were often not great, and so the op-amp would see not just the signal but the power supply noise coming in through the DC biasing.&lt;/p&gt;
    &lt;p&gt;And every time I tried a dual power rail (so that I could just keep the signal ground-referenced), the noise from the switching ended up just always noticeable, and the extra complexity was annoying when a lot of effects then didn't have any real use for the dual rail.&lt;/p&gt;
    &lt;p&gt;Filtering obviously helps, but this is just a long-winded explanation for why I ended up really appreciating the "bias to ground" JFET model for the signal input side, and the common drain follower in particular.&lt;/p&gt;
    &lt;p&gt;That works with a single JFET (the MMBF5103 worked well for me), but my favorite design so far is a dual-JFET LS844 with the second matched JFET used as a current sink. It has basically infinite input impedance (and could be DC coupled, although I do the coupling capacitor with resistor to ground) and gives a good output signal somewhere roughly in the middle of the single-supply 9V rail.&lt;/p&gt;
    &lt;p&gt;Why do I mention this in particular? Mainly because it's a great example of how completely insane my designs are. That LS844 is used as a voltage follower with a noticeable DC offset, and that single dual-JFET SOT-23-6 component is more expensive - and harder to find - than a simple op-amp would be.&lt;/p&gt;
    &lt;p&gt;Just to put that into perspective: you can buy LM358's at mouser for about $0.07 each in reasonable quantities (ie a hundred). Sure, that's not the greatest op-amp ever and you'd have to have a 5V regulator, so maybe you're better off at twice the cost, and go for a TL082 or a TL072 instead. Or go for a BJT input one and be even cheaper.&lt;/p&gt;
    &lt;p&gt;The LS844? Harder to find, and much more expensive. If they are in stock at all, you'll find them for $2.50 when you buy ten or more. And I'm using it as a questionable replacement for a single input of one of those dirt-cheap op-amps.&lt;/p&gt;
    &lt;p&gt;Put another way: go elsewhere for sane designs. This is not the place.&lt;/p&gt;
    &lt;p&gt;But it does work quite well. See some notes on the signal path testing here&lt;/p&gt;
    &lt;p&gt;I started out with small designs that I decided would fit best into a 1590A enclosure (basically the smallest regular guitar pedal form factor), because it was cute. The purely physical layout limitations were actually interesting, and since I was doing SMT components and simple circuits, the circuit sizes were never even remotely an issue.&lt;/p&gt;
    &lt;p&gt;However, as I decided that I don't want to play around with silly analog audio effects from the 60's and 70's any more, that 1590A enclosure got increasingly painful. Putting an Electrosmith Daisy Seed inside of them is possible, but only if you don't do a proper stomp-switch and limit yourself to two pots. And yes, I did that.&lt;/p&gt;
    &lt;p&gt;Do I want to use the pre-built Daisy Seed? Maybe - and maybe not. This repository does include the beginnings of a "what if I did my own version of a MCU and CODEC", because it's an interesting learning experience too. And I started that because then I'd be able to fit things better in a 1590A.&lt;/p&gt;
    &lt;p&gt;But then my meds kicked in, and I've finally given up on the 1590A. It's cute. The mechanical challenges were interesting. But they've gone from "interesting" to "overly limiting".&lt;/p&gt;
    &lt;p&gt;So now I'm instead doing a much more reasonable enclosure. So 1590B it is. That just simplifies things a lot and the end result is a lot saner.&lt;/p&gt;
    &lt;p&gt;I've used JLCPCB, PCBWAY and OSH Park for PCB manufacturing. The end results are all good, pick the one you're most comfortable with. I've found that at least for me, JLCPCB gives the fastest turnaround time, but I suspect it heavily depends on where you live.&lt;/p&gt;
    &lt;p&gt;In the past, I've done some PCB assembly services too, and PCBWAY did a good job. With this project where the manual soldering has been part of the whole experience, I've just done bare boards so far.&lt;/p&gt;
    &lt;p&gt;I've toyed with the idea of doing some assembly service jobs in case I decide to go for more fiddly components, but that's really for a future "what if I do the digital side too". I'm not there yet.&lt;/p&gt;
    &lt;p&gt;Connectors and potentiometers are typically from Tayda Electronics, with most of the actual common SMD components from kits or from Mouser.&lt;/p&gt;
    &lt;p&gt;Some typical parts from Tayda:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Mono Audio Jack A-6976&lt;/item&gt;
      &lt;item&gt;2.1mm DC Barrel Jack A-4118&lt;/item&gt;
      &lt;item&gt;10k Linear 9mm Pot A-1847&lt;/item&gt;
      &lt;item&gt;DPDT Compact Stomp Foot Switch A-1884&lt;/item&gt;
      &lt;item&gt;Right Angle IDC Header A-2943&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For "random" SMD capacitors and resistors, get one of the kits. I can personally heartily recommend the Guanruixin kits from Amazon: there are 0805 and 1206 kits of both capacitors and resistors, and I love the packaging and labeling. Very good for organizing at a hobbyist level.&lt;/p&gt;
    &lt;p&gt;Just the storage case makes them worth getting:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Guanruixin 0805 Capacitor Kit&lt;/item&gt;
      &lt;item&gt;Guanruixin 0805 Resistor Kit&lt;/item&gt;
      &lt;item&gt;.. any other sizes you want&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;There are other kits out there, but it's nice to have a good compact case with a selection of various values. If you are like me, you'll run out of the common resistor values, and then I buy cut tape from Mouser and just fill the specific compartments in that kit case.&lt;/p&gt;
    &lt;p&gt;Which brings us to Mouser and DigiKey and the like: not just for refills, but for anything that is slightly more specialized. Like that LS844, but really most of the not-completely-standard SMD components.&lt;/p&gt;
    &lt;p&gt;My exact SMD component choices have been pretty random, and a number of them have been influenced by footprint rather than technical merit. I tend to like things like dual transistor SOT-23-6 packages, and if you look at my MOSFET choices I think you'll find that the primary choice was packaging and a high enough VGSS.&lt;/p&gt;
    &lt;p&gt;Put another way: I'm not claiming my parts choices necessarily make sense. They've worked for me - often in the sense of "that other part was just too fiddly to solder, so I've replaced it with this other part that works for me"&lt;/p&gt;
    &lt;p&gt;Note&lt;/p&gt;
    &lt;p&gt;If you actually know what you are doing, and you looked at the schematic and went "Linus is clearly way over his head, and that is just stupid", whether it comes to parts choices or to just the circuit in general, please let me know.&lt;/p&gt;
    &lt;p&gt;In particular, don't feel like it would be impolite to tell me I'm incompetent and doing stupid things. I absolutely know I'm not competent and would love to hear any criticism. Some of the best teaching moments have been when I haven't understood something, and somebody piped up to tell me I should do Xyz.&lt;/p&gt;
    &lt;p&gt;I'm going to leave the link to the "Tremolo doubling as a metronome" issue from the 1590A pedal project, because that was a case of somebody (@gralco) coming in and very politely telling me I was doing stupid things.&lt;/p&gt;
    &lt;p&gt;Pushing me to do simulations in KiCad completely changed the game. So don't be shy to tell me my circuits suck. Because that's literally why I do this!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45407617</guid><pubDate>Sun, 28 Sep 2025 20:19:37 +0000</pubDate></item><item><title>Swiss voters back e-ID legislation</title><link>https://www.admin.ch/gov/en/start/documentation/votes/20250928/e-id-act.html</link><description>&lt;doc fingerprint="ba7511dff6ab735b"&gt;
  &lt;main&gt;
    &lt;p&gt;On 28 September 2025, the Swiss people accepted the Federal Act on Electronic Identification Services (e-ID Act).&lt;/p&gt;
    &lt;head rend="h2"&gt;Summary&lt;/head&gt;
    &lt;p&gt;If you want to order or apply for something online, you may have to prove your identity. With electronic proof of identity, the so-called e-ID, it will be possible to do this completely digitally. The e-ID works like a digital identity card, but currently there is no e-ID in Switzerland. Voters rejected its introduction in 2021, mainly because it was going to be issued by private companies.&lt;/p&gt;
    &lt;p&gt;The new law creates the basis for a state-issued e-ID. People can use it to identify themselves to authorities and businesses. For example, it can be used to order an electronic driving licence or to provide proof of age when purchasing a product with age requirements. Use of the e-ID is voluntary and free of charge. The new law stipulates that the federal government will issue the e-ID and operate the required technical infrastructure, thereby ensuring the best possible protection of privacy and data security. Other authorities and businesses can also use the state infrastructure to offer their own forms of electronic proof, for example confirmation of a person's place of residence or of club membership. A referendum on the e-ID Act has been called for, which is why a vote is being held.&lt;/p&gt;
    &lt;head rend="h2"&gt;How, when, where to vote?&lt;/head&gt;
    &lt;p&gt;Last modification 28.09.2025&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45407657</guid><pubDate>Sun, 28 Sep 2025 20:25:16 +0000</pubDate></item><item><title>Larry Ellison: "Citizens will be on their best behavior because we're watching"</title><link>https://streamable.com/2xtyyd</link><description>&lt;doc fingerprint="582b8b07f27b7e58"&gt;
  &lt;main&gt;
    &lt;p&gt;Video hosting made easy Get started 0928(2) 15906 views ios_share Share&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45407785</guid><pubDate>Sun, 28 Sep 2025 20:40:16 +0000</pubDate></item><item><title>Roe (YC W24) Is Hiring</title><link>https://news.ycombinator.com/item?id=45407951</link><description>&lt;doc fingerprint="272cfbb0f5843336"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;ROE is building AI Agents for risk and compliance. We are trusted by companies like eBay, Affirm and Tier 1 banks.&lt;/p&gt;
      &lt;p&gt;Hiring ambitious, talented founding engineers. Base $150K-250K, 0.75-2% options.&lt;/p&gt;
      &lt;p&gt;San Mateo office, 3 days hybrid working mode. Free lunch.&lt;/p&gt;
      &lt;p&gt;We sponsor H1B / PERM.&lt;/p&gt;
      &lt;p&gt;Link to apply https://www.ycombinator.com/companies/roe/jobs/OFFxite-found...&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45407951</guid><pubDate>Sun, 28 Sep 2025 21:00:07 +0000</pubDate></item><item><title>Play snake in the URL address bar</title><link>https://demian.ferrei.ro/snake/</link><description>&lt;doc fingerprint="5cfba17d98173e2c"&gt;
  &lt;main&gt;
    &lt;p&gt;⚠ Sorry, this game requires JavaScript. URL: ? Use the arrow keys or WASD to control the snake on the URL. Use the arrows to control the snake on the URL. Click here if you can't see the page URL or if it looks messed up with . 〈 ! Your highest score is points! Share 〈 ▲︎ ◀︎ ▼︎ ▶︎&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45408021</guid><pubDate>Sun, 28 Sep 2025 21:08:15 +0000</pubDate></item></channel></rss>