<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Fri, 05 Sep 2025 17:08:24 +0000</lastBuildDate><item><title>What If OpenDocument Used SQLite?</title><link>https://www.sqlite.org/affcase1.html</link><description>&lt;doc fingerprint="f7cfb8164ca46ba1"&gt;
  &lt;main&gt;
    &lt;p&gt;Suppose the OpenDocument file format, and specifically the "ODP" OpenDocument Presentation format, were built around SQLite. Benefits would include:&lt;/p&gt;
    &lt;p&gt;Note that this is only a thought experiment. We are not suggesting that OpenDocument be changed. Nor is this article a criticism of the current OpenDocument design. The point of this essay is to suggest ways to improve future file format designs.&lt;/p&gt;
    &lt;p&gt;The OpenDocument file format is used for office applications: word processors, spreadsheets, and presentations. It was originally designed for the OpenOffice suite but has since been incorporated into other desktop application suites. The OpenOffice application has been forked and renamed a few times. This author's primary use for OpenDocument is building slide presentations with either NeoOffice on Mac, or LibreOffice on Linux and Windows.&lt;/p&gt;
    &lt;p&gt;An OpenDocument Presentation or "ODP" file is a ZIP archive containing XML files describing presentation slides and separate image files for the various images that are included as part of the presentation. (OpenDocument word processor and spreadsheet files are similarly structured but are not considered by this article.) The reader can easily see the content of an ODP file by using the "zip -l" command. For example, the following is the "zip -l" output from a 49-slide presentation about SQLite from the 2014 SouthEast LinuxFest conference:&lt;/p&gt;
    &lt;quote&gt;Archive: self2014.odp Length Date Time Name --------- ---------- ----- ---- 47 2014-06-21 12:34 mimetype 0 2014-06-21 12:34 Configurations2/statusbar/ 0 2014-06-21 12:34 Configurations2/accelerator/current.xml 0 2014-06-21 12:34 Configurations2/floater/ 0 2014-06-21 12:34 Configurations2/popupmenu/ 0 2014-06-21 12:34 Configurations2/progressbar/ 0 2014-06-21 12:34 Configurations2/menubar/ 0 2014-06-21 12:34 Configurations2/toolbar/ 0 2014-06-21 12:34 Configurations2/images/Bitmaps/ 54702 2014-06-21 12:34 Pictures/10000000000001F40000018C595A5A3D.png 46269 2014-06-21 12:34 Pictures/100000000000012C000000A8ED96BFD9.png ... 58 other pictures omitted... 13013 2014-06-21 12:34 Pictures/10000000000000EE0000004765E03BA8.png 1005059 2014-06-21 12:34 Pictures/10000000000004760000034223EACEFD.png 211831 2014-06-21 12:34 content.xml 46169 2014-06-21 12:34 styles.xml 1001 2014-06-21 12:34 meta.xml 9291 2014-06-21 12:34 Thumbnails/thumbnail.png 38705 2014-06-21 12:34 Thumbnails/thumbnail.pdf 9664 2014-06-21 12:34 settings.xml 9704 2014-06-21 12:34 META-INF/manifest.xml --------- ------- 10961006 78 files&lt;/quote&gt;
    &lt;p&gt;The ODP ZIP archive contains four different XML files: content.xml, styles.xml, meta.xml, and settings.xml. Those four files define the slide layout, text content, and styling. This particular presentation contains 62 images, ranging from full-screen pictures to tiny icons, each stored as a separate file in the Pictures folder. The "mimetype" file contains a single line of text that says:&lt;/p&gt;
    &lt;quote&gt;application/vnd.oasis.opendocument.presentation&lt;/quote&gt;
    &lt;p&gt;The purpose of the other files and folders is presently unknown to the author but is probably not difficult to figure out.&lt;/p&gt;
    &lt;p&gt;The use of a ZIP archive to encapsulate XML files plus resources is an elegant approach to an application file format. It is clearly superior to a custom binary file format. But using an SQLite database as the container, instead of ZIP, would be more elegant still.&lt;/p&gt;
    &lt;p&gt;A ZIP archive is basically a key/value database, optimized for the case of write-once/read-many and for a relatively small number of distinct keys (a few hundred to a few thousand) each with a large BLOB as its value. A ZIP archive can be viewed as a "pile-of-files" database. This works, but it has some shortcomings relative to an SQLite database, as follows:&lt;/p&gt;
    &lt;p&gt;Incremental update is hard.&lt;/p&gt;
    &lt;p&gt;It is difficult to update individual entries in a ZIP archive. It is especially difficult to update individual entries in a ZIP archive in a way that does not destroy the entire document if the computer loses power and/or crashes in the middle of the update. It is not impossible to do this, but it is sufficiently difficult that nobody actually does it. Instead, whenever the user selects "File/Save", the entire ZIP archive is rewritten. Hence, "File/Save" takes longer than it ought, especially on older hardware. Newer machines are faster, but it is still bothersome that changing a single character in a 50 megabyte presentation causes one to burn through 50 megabytes of the finite write life on the SSD.&lt;/p&gt;
    &lt;p&gt;Startup is slow.&lt;/p&gt;
    &lt;p&gt;In keeping with the pile-of-files theme, OpenDocument stores all slide content in a single big XML file named "content.xml". LibreOffice reads and parses this entire file just to display the first slide. LibreOffice also seems to read all images into memory as well, which makes sense seeing as when the user does "File/Save" it is going to have to write them all back out again, even though none of them changed. The net effect is that start-up is slow. Double-clicking an OpenDocument file brings up a progress bar rather than the first slide. This results in a bad user experience. The situation grows ever more annoying as the document size increases.&lt;/p&gt;
    &lt;p&gt;More memory is required.&lt;/p&gt;
    &lt;p&gt;Because ZIP archives are optimized for storing big chunks of content, they encourage a style of programming where the entire document is read into memory at startup, all editing occurs in memory, then the entire document is written to disk during "File/Save". OpenOffice and its descendants embrace that pattern.&lt;/p&gt;
    &lt;p&gt;One might argue that it is ok, in this era of multi-gigabyte desktops, to read the entire document into memory. But it is not ok. For one, the amount of memory used far exceeds the (compressed) file size on disk. So a 50MB presentation might take 200MB or more RAM. That still is not a problem if one only edits a single document at a time. But when working on a talk, this author will typically have 10 or 15 different presentations up all at the same time (to facilitate copy/paste of slides from past presentations) and so gigabytes of memory are required. Add in an open web browser or two and a few other desktop apps, and suddenly the disk is whirling and the machine is swapping. And even having just a single document is a problem when working on an inexpensive Chromebook retrofitted with Ubuntu. Using less memory is always better.&lt;/p&gt;
    &lt;p&gt;Crash recovery is difficult.&lt;/p&gt;
    &lt;p&gt;The descendants of OpenOffice tend to segfault more often than commercial competitors. Perhaps for this reason, the OpenOffice forks make periodic backups of their in-memory documents so that users do not lose all pending edits when the inevitable application crash does occur. This causes frustrating pauses in the application for the few seconds while each backup is being made. After restarting from a crash, the user is presented with a dialog box that walks them through the recovery process. Managing the crash recovery this way involves lots of extra application logic and is generally an annoyance to the user.&lt;/p&gt;
    &lt;p&gt;Content is inaccessible.&lt;/p&gt;
    &lt;p&gt;One cannot easily view, change, or extract the content of an OpenDocument presentation using generic tools. The only reasonable way to view or edit an OpenDocument document is to open it up using an application that is specifically designed to read or write OpenDocument (read: LibreOffice or one of its cousins). The situation could be worse. One can extract and view individual images (say) from a presentation using just the "zip" archiver tool. But it is not reasonable try to extract the text from a slide. Remember that all content is stored in a single "context.xml" file. That file is XML, so it is a text file. But it is not a text file that can be managed with an ordinary text editor. For the example presentation above, the content.xml file consist of exactly two lines. The first line of the file is just:&lt;/p&gt;
    &lt;quote&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/quote&gt;
    &lt;p&gt;The second line of the file contains 211792 characters of impenetrable XML. Yes, 211792 characters all on one line. This file is a good stress-test for a text editor. Thankfully, the file is not some obscure binary format, but in terms of accessibility, it might as well be written in Klingon.&lt;/p&gt;
    &lt;p&gt;Let us suppose that instead of using a ZIP archive to store its files, OpenDocument used a very simple SQLite database with the following single-table schema:&lt;/p&gt;
    &lt;quote&gt;CREATE TABLE OpenDocTree( filename TEXT PRIMARY KEY, -- Name of file filesize BIGINT, -- Size of file after decompression content BLOB -- Compressed file content );&lt;/quote&gt;
    &lt;p&gt;For this first experiment, nothing else about the file format is changed. The OpenDocument is still a pile-of-files, only now each file is a row in an SQLite database rather than an entry in a ZIP archive. This simple change does not use the power of a relational database. Even so, this simple change shows some improvements.&lt;/p&gt;
    &lt;p&gt;Surprisingly, using SQLite in place of ZIP makes the presentation file smaller. Really. One would think that a relational database file would be larger than a ZIP archive, but at least in the case of NeoOffice that is not so. The following is an actual screen-scrape showing the sizes of the same NeoOffice presentation, both in its original ZIP archive format as generated by NeoOffice (self2014.odp), and as repacked as an SQLite database using the SQLAR utility:&lt;/p&gt;
    &lt;quote&gt;-rw-r--r-- 1 drh staff 10514994 Jun 8 14:32 self2014.odp -rw-r--r-- 1 drh staff 10464256 Jun 8 14:37 self2014.sqlar -rw-r--r-- 1 drh staff 10416644 Jun 8 14:40 zip.odp&lt;/quote&gt;
    &lt;p&gt;The SQLite database file ("self2014.sqlar") is about a half percent smaller than the equivalent ODP file! How can this be? Apparently the ZIP archive generator logic in NeoOffice is not as efficient as it could be, because when the same pile-of-files is recompressed using the command-line "zip" utility, one gets a file ("zip.odp") that is smaller still, by another half percent, as seen in the third line above. So, a well-written ZIP archive can be slightly smaller than the equivalent SQLite database, as one would expect. But the difference is slight. The key take-away is that an SQLite database is size-competitive with a ZIP archive.&lt;/p&gt;
    &lt;p&gt;The other advantage to using SQLite in place of ZIP is that the document can now be updated incrementally, without risk of corrupting the document if a power loss or other crash occurs in the middle of the update. (Remember that writes to SQLite databases are atomic.) True, all the content is still kept in a single big XML file ("content.xml") which must be completely rewritten if so much as a single character changes. But with SQLite, only that one file needs to change. The other 77 files in the repository can remain unaltered. They do not all have to be rewritten, which in turn makes "File/Save" run much faster and saves wear on SSDs.&lt;/p&gt;
    &lt;p&gt;A pile-of-files encourages content to be stored in a few large chunks. In the case of ODP, there are just four XML files that define the layout of all slides in a presentation. An SQLite database allows storing information in a few large chunks, but SQLite is also adept and efficient at storing information in numerous smaller pieces.&lt;/p&gt;
    &lt;p&gt;So then, instead of storing all content for all slides in a single oversized XML file ("content.xml"), suppose there was a separate table for storing the content of each slide separately. The table schema might look something like this:&lt;/p&gt;
    &lt;quote&gt;CREATE TABLE slide( pageNumber INTEGER, -- The slide page number slideContent TEXT -- Slide content as XML or JSON ); CREATE INDEX slide_pgnum ON slide(pageNumber); -- Optional&lt;/quote&gt;
    &lt;p&gt;The content of each slide could still be stored as compressed XML. But now each page is stored separately. So when opening a new document, the application could simply run:&lt;/p&gt;
    &lt;quote&gt;SELECT slideContent FROM slide WHERE pageNumber=1;&lt;/quote&gt;
    &lt;p&gt;This query will quickly and efficiently return the content of the first slide, which could then be speedily parsed and displayed to the user. Only one page needs to be read and parsed in order to render the first screen, which means that the first screen appears much faster and there is no longer a need for an annoying progress bar.&lt;/p&gt;
    &lt;p&gt;If the application wanted to keep all content in memory, it could continue reading and parsing the other pages using a background thread after drawing the first page. Or, since reading from SQLite is so efficient, the application might instead choose to reduce its memory footprint and only keep a single slide in memory at a time. Or maybe it keeps the current slide and the next slide in memory, to facilitate rapid transitions to the next slide.&lt;/p&gt;
    &lt;p&gt;Notice that dividing up the content into smaller pieces using an SQLite table gives flexibility to the implementation. The application can choose to read all content into memory at startup. Or it can read just a few pages into memory and keep the rest on disk. Or it can read just a single page into memory at a time. And different versions of the application can make different choices without having to make any changes to the file format. Such options are not available when all content is in a single big XML file in a ZIP archive.&lt;/p&gt;
    &lt;p&gt;Splitting content into smaller pieces also helps File/Save operations to go faster. Instead of having to write back the content of all pages when doing a File/Save, the application only has to write back those pages that have actually changed.&lt;/p&gt;
    &lt;p&gt;One minor downside of splitting content into smaller pieces is that compression does not work as well on shorter texts and so the size of the document might increase. But as the bulk of the document space is used to store images, a small reduction in the compression efficiency of the text content will hardly be noticeable, and is a small price to pay for an improved user experience.&lt;/p&gt;
    &lt;p&gt;Once one is comfortable with the concept of storing each slide separately, it is a small step to support versioning of the presentation. Consider the following schema:&lt;/p&gt;
    &lt;quote&gt;CREATE TABLE slide( slideId INTEGER PRIMARY KEY, derivedFrom INTEGER REFERENCES slide, content TEXT -- XML or JSON or whatever ); CREATE TABLE version( versionId INTEGER PRIMARY KEY, priorVersion INTEGER REFERENCES version, checkinTime DATETIME, -- When this version was saved comment TEXT, -- Description of this version manifest TEXT -- List of integer slideIds );&lt;/quote&gt;
    &lt;p&gt;In this schema, instead of each slide having a page number that determines its order within the presentation, each slide has a unique integer identifier that is unrelated to where it occurs in sequence. The order of slides in the presentation is determined by a list of slideIds, stored as a text string in the MANIFEST column of the VERSION table. Since multiple entries are allowed in the VERSION table, that means that multiple presentations can be stored in the same document.&lt;/p&gt;
    &lt;p&gt;On startup, the application first decides which version it wants to display. Since the versionId will naturally increase in time and one would normally want to see the latest version, an appropriate query might be:&lt;/p&gt;
    &lt;quote&gt;SELECT manifest, versionId FROM version ORDER BY versionId DESC LIMIT 1;&lt;/quote&gt;
    &lt;p&gt;Or perhaps the application would rather use the most recent checkinTime:&lt;/p&gt;
    &lt;quote&gt;SELECT manifest, versionId, max(checkinTime) FROM version;&lt;/quote&gt;
    &lt;p&gt;Using a single query such as the above, the application obtains a list of the slideIds for all slides in the presentation. The application then queries for the content of the first slide, and parses and displays that content, as before.&lt;/p&gt;
    &lt;p&gt;(Aside: Yes, that second query above that uses "max(checkinTime)" really does work and really does return a well-defined answer in SQLite. Such a query either returns an undefined answer or generates an error in many other SQL database engines, but in SQLite it does what you would expect: it returns the manifest and versionId of the entry that has the maximum checkinTime.)&lt;/p&gt;
    &lt;p&gt;When the user does a "File/Save", instead of overwriting the modified slides, the application can now make new entries in the SLIDE table for just those slides that have been added or altered. Then it creates a new entry in the VERSION table containing the revised manifest.&lt;/p&gt;
    &lt;p&gt;The VERSION table shown above has columns to record a check-in comment (presumably supplied by the user) and the time and date at which the File/Save action occurred. It also records the parent version to record the history of changes. Perhaps the manifest could be stored as a delta from the parent version, though typically the manifest will be small enough that storing a delta might be more trouble than it is worth. The SLIDE table also contains a derivedFrom column which could be used for delta encoding if it is determined that saving the slide content as a delta from its previous version is a worthwhile optimization.&lt;/p&gt;
    &lt;p&gt;So with this simple change, the ODP file now stores not just the most recent edit to the presentation, but a history of all historic edits. The user would normally want to see just the most recent edition of the presentation, but if desired, the user can now go backwards in time to see historical versions of the same presentation.&lt;/p&gt;
    &lt;p&gt;Or, multiple presentations could be stored within the same document.&lt;/p&gt;
    &lt;p&gt;With such a schema, the application would no longer need to make periodic backups of the unsaved changes to a separate file to avoid lost work in the event of a crash. Instead, a special "pending" version could be allocated and unsaved changes could be written into the pending version. Because only changes would need to be written, not the entire document, saving the pending changes would only involve writing a few kilobytes of content, not multiple megabytes, and would take milliseconds instead of seconds, and so it could be done frequently and silently in the background. Then when a crash occurs and the user reboots, all (or almost all) of their work is retained. If the user decides to discard unsaved changes, they simply go back to the previous version.&lt;/p&gt;
    &lt;p&gt;There are details to fill in here. Perhaps a screen can be provided that displays all historical changes (perhaps with a graph) allowing the user to select which version they want to view or edit. Perhaps some facility can be provided to merge forks that might occur in the version history. And perhaps the application should provide a means to purge old and unwanted versions. The key point is that using an SQLite database to store the content, rather than a ZIP archive, makes all of these features much, much easier to implement, which increases the possibility that they will eventually get implemented.&lt;/p&gt;
    &lt;p&gt;In the previous sections, we have seen how moving from a key/value store implemented as a ZIP archive to a simple SQLite database with just three tables can add significant capabilities to an application file format. We could continue to enhance the schema with new tables, with indexes added for performance, with triggers and views for programming convenience, and constraints to enforce consistency of content even in the face of programming errors. Further enhancement ideas include:&lt;/p&gt;
    &lt;p&gt;An SQLite database has a lot of capability, which this essay has only begun to touch upon. But hopefully this quick glimpse has convinced some readers that using an SQL database as an application file format is worth a second look.&lt;/p&gt;
    &lt;p&gt;Some readers might resist using SQLite as an application file format due to prior exposure to enterprise SQL databases and the caveats and limitations of those other systems. For example, many enterprise database engines advise against storing large strings or BLOBs in the database and instead suggest that large strings and BLOBs be stored as separate files and the filename stored in the database. But SQLite is not like that. Any column of an SQLite database can hold a string or BLOB up to about a gigabyte in size. And for strings and BLOBs of 100 kilobytes or less, I/O performance is better than using separate files.&lt;/p&gt;
    &lt;p&gt;Some readers might be reluctant to consider SQLite as an application file format because they have been inculcated with the idea that all SQL database schemas must be factored into Third Normal Form (3NF) and store only small primitive data types such as strings and integers. Certainly relational theory is important and designers should strive to understand it. But, as demonstrated above, it is often quite acceptable to store complex information as XML or JSON in text fields of a database. Do what works, not what your database professor said you ought to do.&lt;/p&gt;
    &lt;p&gt;In summary, the claim of this essay is that using SQLite as a container for an application file format like OpenDocument and storing lots of smaller objects in that container works out much better than using a ZIP archive holding a few larger objects. To wit:&lt;/p&gt;
    &lt;p&gt;An SQLite database file is approximately the same size, and in some cases smaller, than a ZIP archive holding the same information.&lt;/p&gt;
    &lt;p&gt;The atomic update capabilities of SQLite allow small incremental changes to be safely written into the document. This reduces total disk I/O and improves File/Save performance, enhancing the user experience.&lt;/p&gt;
    &lt;p&gt;Startup time is reduced by allowing the application to read in only the content shown for the initial screen. This largely eliminates the need to show a progress bar when opening a new document. The document just pops up immediately, further enhancing the user experience.&lt;/p&gt;
    &lt;p&gt;The memory footprint of the application can be dramatically reduced by only loading content that is relevant to the current display and keeping the bulk of the content on disk. The fast query capability of SQLite make this a viable alternative to keeping all content in memory at all times. And when applications use less memory, it makes the entire computer more responsive, further enhancing the user experience.&lt;/p&gt;
    &lt;p&gt;The schema of an SQL database is able to represent information more directly and succinctly than a key/value database such as a ZIP archive. This makes the document content more accessible to third-party applications and scripts and facilitates advanced features such as built-in document versioning, and incremental saving of work in progress for recovery after a crash.&lt;/p&gt;
    &lt;p&gt;These are just a few of the benefits of using SQLite as an application file format — the benefits that seem most likely to improve the user experience for applications like OpenOffice. Other applications might benefit from SQLite in different ways. See the Application File Format document for additional ideas.&lt;/p&gt;
    &lt;p&gt;Finally, let us reiterate that this essay is a thought experiment. The OpenDocument format is well-established and already well-designed. Nobody really believes that OpenDocument should be changed to use SQLite as its container instead of ZIP. Nor is this article a criticism of OpenDocument for not choosing SQLite as its container since OpenDocument predates SQLite. Rather, the point of this article is to use OpenDocument as a concrete example of how SQLite can be used to build better application file formats for future projects.&lt;/p&gt;
    &lt;p&gt;This page last modified on 2025-05-12 11:56:41 UTC&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45132498</guid></item><item><title>io_uring is faster than mmap</title><link>https://www.bitflux.ai/blog/memory-is-slow-part2/</link><description>&lt;doc fingerprint="eeb8d08f7c322988"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;TL;DR&lt;/head&gt;
    &lt;p&gt;Sourcing data directly from disk IS faster than caching in memory. I brought receipts. Because hardware got wider but not faster, the old methods don't get you there. You need new tools to use what is scaling and avoid what isn't.&lt;/p&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;In part 1 I showed how some computer performance factors are scaling exponentially while others have been stagnant for decades. I then asserted, without proof, that sourcing data from disk can be faster than from memory. What follows is the proof.&lt;/p&gt;
    &lt;p&gt;Computer Science dogma says that unused memory should be used to cache things from the filesystem because the disk is slow and memory is fast. Given that disk bandwidth is growing exponentially and memory access latency has stagnated this isn't always true anymore.&lt;/p&gt;
    &lt;head rend="h2"&gt;Experimental set up&lt;/head&gt;
    &lt;p&gt;We need data and something straight forward to do with the data. I used my free will or the illusion thereof to create a benchmark I cleverly call "counting 10s". I write some pseudo random integers between 0 and 20 to a buffer and then count how many of the integers are 10. I want to make sure we are doing all the counting in a single thread to simulate an Amdahl's Law situation.&lt;/p&gt;
    &lt;p&gt;So how fast can we expect this to run? The upper limit would be the memory bandwidth.&lt;/p&gt;
    &lt;p&gt;My testing rig is a server with an old AMD EPYC 7551P 32-Core Processor on a Supermicro H11SSL-i and 96GB of DDR4 2133 MHz and a couple of 1.92TB Samsung PM983a PCIe 3.0 SSDs I pieced together from EBay parts. Given the way this server is configured, the upper limit for memory bandwidth can be calculated as 3 channels * 2133MT/s * 8B/T / 4 numa domains = ~13GB/s for a single thread. It's kind of an odd system but that just makes it more fun to optimize for!&lt;/p&gt;
    &lt;p&gt;The disks are rated at 3.1GB/s read BW each for an upper limit of 6.2GB/s. I made a raid0 volume with 4KB stripe size, formatted the the raid as ext4 with no journaling, and made sure it fully finished initializing the metadata before running the tests.&lt;/p&gt;
    &lt;code&gt;sudo mdadm --create /dev/md0 --level=0 --raid-devices=2 --chunk=4K /dev/nvme1n1 /dev/nvme2n1
sudo mkfs.ext4 -F -L data -O ^has_journal -E lazy_itable_init=0 /dev/md0
sudo mount -o noatime /dev/md0 mnt
&lt;/code&gt;
    &lt;p&gt;We'll use a 50GB dataset for most benchmarking here, because when I started this I thought the test system only had 64GB and it stuck.&lt;/p&gt;
    &lt;head rend="h2"&gt;Simple Loop&lt;/head&gt;
    &lt;p&gt;The simple and cleanest way to do this in C would look like this.&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;

// count_10_loop
int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY);
    int* data = (int*)mmap(NULL, size_bytes, PROT_READ, MAP_SHARED, fd, 0);
 
    for (size_t i = 0; i &amp;lt; total_ints; ++i) {
        if (data[i] == 10) count++;
    }

    printf("Found %ld 10s\n", count);
}
&lt;/code&gt;
    &lt;p&gt;Just mmap() the file which will give us a buffer that we can read from. Then we just loop and count the 10s.&lt;/p&gt;
    &lt;p&gt;Because the point is to benchmark we will integrate some timing mechanisms before we move on.&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;

long get_time_us() {
    struct timeval tv;
    gettimeofday(&amp;amp;tv, NULL);
    return tv.tv_sec * 1000000L + tv.tv_usec;
}

// count_10_loop
int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY);
    int* data = (int*)mmap(NULL, size_bytes, PROT_READ, MAP_SHARED, fd, 0);
 
    long start = get_time_us();
    for (size_t i = 0; i &amp;lt; total_ints; ++i) {
        if (data[i] == 10) count++;
    }
    long elapsed = get_time_us() - start;

    printf("simple loop found %ld 10s processed at %0.2f GB/s\n", count, (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));
}
&lt;/code&gt;
    &lt;p&gt;For the first run we're going to be reading from the disk. The disk/filesystem read is going to limit the performance before the memory bandwidth can.&lt;/p&gt;
    &lt;code&gt;â¯ sudo  ./count_10_loop ./mnt/datafile.bin 53687091200
simple loop found 167802249 10s processed at 0.61 GB/s
&lt;/code&gt;
    &lt;p&gt;As expected, it's not anywhere near memory speeds because as everyone knows, disk is slow. We can look at the system and confirm that the first run cached the data to memory.&lt;/p&gt;
    &lt;p&gt;Our expectation is that the second run will be faster because the data is already in memory and as everyone knows, memory is fast.&lt;/p&gt;
    &lt;code&gt;â¯ sudo  ./count_10_loop ./mnt/datafile.bin 53687091200
simple loop found 167802249 10s processed at 3.71 GB/s
&lt;/code&gt;
    &lt;p&gt;It is faster, but clearly thatâs slower than the memory can feed it to the processor. What bottleneck might we be hitting? This speed does look possibly correlated to the instructions per second limit for this generation of CPU (between 2GHz * 1.5 IPC = 3G and 3GHz boost * 1.5 IPC = 4.5G instructions per second).&lt;/p&gt;
    &lt;p&gt;We can use perf to see if the CPU is using vector instructions, if not then the actual compute is the bottleneck.&lt;/p&gt;
    &lt;code&gt;Percentâ      test     %rbp,%rbp
       â    â je       84
       â      lea      (%rbx,%rbp,4),%rcx
       â      mov      %rbx,%rax
       â      xor      %ebp,%ebp
       â      nop
       â70:   xor      %edx,%edx
  1.31 â      cmpl     $0xa,(%rax)
 42.38 â      sete     %dl
 45.72 â      add      $0x4,%rax
  0.01 â      add      %rdx,%rbp
 10.42 â      cmp      %rax,%rcx
  0.16 â    â jne      70
       â84:   xor      %eax,%eax
       â      shr      $0x14,%r12
       â    â call     get_time_us
       â      pxor     %xmm0,%xmm0
       â      pxor     %xmm1,%xmm1
&lt;/code&gt;
    &lt;p&gt;Confirmed. We're running non-vectorized instructions, with a single thread counting that's as fast as it can go with a 2GHz CPU. Well crap. Weâve hit our first non-exponential limit. Even a brand new CPU running this machine code would probably struggle to do much better than a 50% improvement, still well below the memory bandwidth limit.&lt;/p&gt;
    &lt;head rend="h2"&gt;Unrolling the loop&lt;/head&gt;
    &lt;p&gt;Good news is this code can definitely be vectorized if we help the compiler. Unroll the loop!&lt;/p&gt;
    &lt;p&gt;We're gonna make it very obvious to the compiler that it's safe to use vector instructions which could process our integers up to 8x faster.&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;

long get_time_us() {
    struct timeval tv;
    gettimeofday(&amp;amp;tv, NULL);
    return tv.tv_sec * 1000000L + tv.tv_usec;
}

// count_10_unrolled
int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY);
    void* buffer = mmap(NULL, size_bytes, PROT_READ, MAP_SHARED, fd, 0);
 
    // Get the compiler to align the buffer
    const int * __restrict data = (const int * __restrict)__builtin_assume_aligned(buffer, 4096);
    uint64_t c0=0, c1=0, c2=0, c3=0,
            c4=0, c5=0, c6=0, c7=0,
            c8=0, c9=0, c10=0, c11=0,
            c12=0, c13=0, c14=0, c15=0;

    long start = get_time_us();
    // Unrolling the compiler knows it can use a vector unit like AVX2 to process
    for (size_t i = 0; i &amp;lt; total_ints; i += 16) {
        // removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1
        c0  += (unsigned)(data[i+ 0] == 10);
        c1  += (unsigned)(data[i+ 1] == 10);
        c2  += (unsigned)(data[i+ 2] == 10);
        c3  += (unsigned)(data[i+ 3] == 10);
        c4  += (unsigned)(data[i+ 4] == 10);
        c5  += (unsigned)(data[i+ 5] == 10);
        c6  += (unsigned)(data[i+ 6] == 10);
        c7  += (unsigned)(data[i+ 7] == 10);
        c8  += (unsigned)(data[i+ 8] == 10);
        c9  += (unsigned)(data[i+ 9] == 10);
        c10 += (unsigned)(data[i+10] == 10);
        c11 += (unsigned)(data[i+11] == 10);
        c12 += (unsigned)(data[i+12] == 10);
        c13 += (unsigned)(data[i+13] == 10);
        c14 += (unsigned)(data[i+14] == 10);
        c15 += (unsigned)(data[i+15] == 10);
    }

    // pairwise reduce to help some compilers schedule better
    uint64_t s0 = c0 + c1,   s1 = c2 + c3,   s2 = c4 + c5,   s3 = c6 + c7;
    uint64_t s4 = c8 + c9,   s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15;
    uint64_t t0 = s0 + s1,   t1 = s2 + s3,   t2 = s4 + s5,   t3 = s6 + s7;

    count = (t0 + t1) + (t2 + t3);
    long elapsed = get_time_us() - start;

    printf("unrolled loop found %ld 10s processed at %0.2f GB/s\n", count, (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));
}
&lt;/code&gt;
    &lt;p&gt;Check if we now have vectorized instructions with &lt;code&gt;perf&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;Percentâ       movq      %xmm0,%rcx
       â       movdqa    %xmm7,%xmm14
       â       pxor      %xmm0,%xmm0
       â       nop
       â e8:   movdqa    %xmm6,%xmm4
  0.30 â       movdqa    %xmm6,%xmm3
  0.12 â       movdqa    %xmm6,%xmm2
  0.35 â       add       $0x1,%rdx
  1.54 â       pcmpeqd   (%rax),%xmm4
 54.64 â       pcmpeqd   0x10(%rax),%xmm3
  1.62 â       movdqa    %xmm6,%xmm1
  0.99 â       add       $0x40,%rax
  0.12 â       pcmpeqd   -0x20(%rax),%xmm2
  3.03 â       pcmpeqd   -0x10(%rax),%xmm1
  1.32 â       pand      %xmm5,%xmm4
  1.25 â       pand      %xmm5,%xmm3
  1.55 â       movdqa    %xmm4,%xmm15
  0.24 â       punpckhdq %xmm0,%xmm4

&lt;/code&gt;
    &lt;p&gt;Confirmed. We're using 128bit vector instructions, this should be up to 4x faster than the original.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;NOTE: These are 128-bit vector instructions, but I expected 256-bit. I dug deeper here and found claims that Gen1 EPYC had unoptimized 256-bit instructions. I forced the compiler to use 256-bit instructions and found it was actually slower. Looks like the compiler was smart enough to know that here.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Let's benchmark this unrolled version with the data as page cache in memory.&lt;/p&gt;
    &lt;code&gt;â¯ sudo  ./count_10_unrolled ./mnt/datafile.bin 53687091200
unrolled loop found 167802249 10s processed at 5.51 GB/s
&lt;/code&gt;
    &lt;p&gt;We're still nowhere close to hitting the memory bus speed limit of 13GB/s but 50% faster than the original is a win. There must be some other bottleneck.&lt;/p&gt;
    &lt;head rend="h2"&gt;Can the SSDs beat that?&lt;/head&gt;
    &lt;p&gt;5.51GB/s? On paper the SSDs can read at 6.2GB/s, but the first run from disk only did 0.61GB/s. How can I meet or beat this performance sourcing the data directly from disk?&lt;/p&gt;
    &lt;p&gt;Consider how the default mmap() mechanism works, it is a background IO pipeline to transparently fetch the data from disk. When you read the empty buffer from userspace it triggers a fault, the kernel handles the fault by reading the data from the filesystem, which then queues up IO from disk. Unfortunately these legacy mechanisms just aren't set up for serious high performance IO. Note that at 610MB/s it's faster than what a disk SATA can do. On the other hand, it only managed 10% of our disk's potential. Clearly we're going to have to do something else.&lt;/p&gt;
    &lt;p&gt;SSDs don't just automatically read data at multigigabyte speeds. You need to put some real effort into an IO pipeline to get serious performance.&lt;/p&gt;
    &lt;p&gt;I made a io_uring based IO engine, a kind of userspace driver, that can hit these speeds. The main thread will request data, the IO engine will handle the IO, then the main thread will do the counting when the data is in a buffer. We will use a set of queues to manage the IO requests, responses, and buffers. The IO engine will start 6 workers, target a queue depth of 8192, and have a buffer size of 16KB.&lt;/p&gt;
    &lt;p&gt;I wish I had tighter code here, but A) I didnât have time to clean it up B) some of the complexity is intractable. The IO engine code was a lot to scroll through so I moved it to github link&lt;/p&gt;
    &lt;code&gt;#include "io_engine.h"
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;getopt.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;

#define DEFAULT_WORKERS 6
#define DEFAULT_BLOCK_SIZE 16384
#define DEFAULT_QUEUE_DEPTH 8192

// Count the number of "10" (int format) in the buffer
static inline size_t count_tens_unrolled(void* data, size_t size_bytes) {
    const size_t total = size_bytes / sizeof(int);
    // Get the compiler to align the buffer
    const int * __restrict p = (const int * __restrict)__builtin_assume_aligned(data, 4096);
    uint64_t c0=0, c1=0, c2=0, c3=0,
            c4=0, c5=0, c6=0, c7=0,
            c8=0, c9=0, c10=0, c11=0,
            c12=0, c13=0, c14=0, c15=0;

    // Unrolling the compiler knows it can use a vector unit like AVX2 to process
    for (size_t i = 0; i &amp;lt; total; i += 16) {
        // removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1
        c0  += (unsigned)(p[i+ 0] == 10);
        c1  += (unsigned)(p[i+ 1] == 10);
        c2  += (unsigned)(p[i+ 2] == 10);
        c3  += (unsigned)(p[i+ 3] == 10);
        c4  += (unsigned)(p[i+ 4] == 10);
        c5  += (unsigned)(p[i+ 5] == 10);
        c6  += (unsigned)(p[i+ 6] == 10);
        c7  += (unsigned)(p[i+ 7] == 10);
        c8  += (unsigned)(p[i+ 8] == 10);
        c9  += (unsigned)(p[i+ 9] == 10);
        c10 += (unsigned)(p[i+10] == 10);
        c11 += (unsigned)(p[i+11] == 10);
        c12 += (unsigned)(p[i+12] == 10);
        c13 += (unsigned)(p[i+13] == 10);
        c14 += (unsigned)(p[i+14] == 10);
        c15 += (unsigned)(p[i+15] == 10);
    }

    // pairwise reduce to help some compilers schedule better
    uint64_t s0 = c0 + c1,   s1 = c2 + c3,   s2 = c4 + c5,   s3 = c6 + c7;
    uint64_t s4 = c8 + c9,   s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15;
    uint64_t t0 = s0 + s1,   t1 = s2 + s3,   t2 = s4 + s5,   t3 = s6 + s7;

    return (t0 + t1) + (t2 + t3);
}

int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);

    // Set up the io engine
    ioengine_t* na = ioengine_alloc(filename, size_bytes, DEFAULT_QUEUE_DEPTH, DEFAULT_BLOCK_SIZE, DEFAULT_WORKERS);

    sleep(1);

    // Use the background workers to read file directly
    size_t total_blocks = na-&amp;gt;file_size / na-&amp;gt;block_size;
    uint64_t uid = 1;
    size_t count = 0;

    long start = get_time_us();

    // Read all blocks
    size_t blocks_queued = 0;
    size_t blocks_read = 0;
    int buffer_queued = 0;
    while (blocks_read &amp;lt; total_blocks) {
        //// Queue IO phase //////
        //     Do we have more blocks to queue up?
        if (buffer_queued &amp;lt; na-&amp;gt;num_io_buffers/2 &amp;amp;&amp;amp; blocks_queued &amp;lt;= total_blocks) {
            // Calculate how many blocks on average we want our workers to queue up
            size_t free_buffers = (size_t)(na-&amp;gt;num_io_buffers - buffer_queued - 4); // hold back a few buffers
            size_t blocks_remaining = total_blocks - blocks_queued;  // how many blocks have we not queued
            size_t blocks_to_queue = free_buffers &amp;gt; blocks_remaining ? blocks_remaining : free_buffers;
            int blocks_to_queue_per_worker = (int) (blocks_to_queue + na-&amp;gt;num_workers - 1) / na-&amp;gt;num_workers;
            // Iterate through workers and assign work
            for (int i = 0; i &amp;lt; na-&amp;gt;num_workers; i++) {
                worker_thread_data_t* worker = &amp;amp;na-&amp;gt;workers[i];
                // Try to queue N blocks to this worker
                for (int j = 0; j &amp;lt; blocks_to_queue_per_worker; j++) {
                    if (blocks_queued == total_blocks) break;
                    int bgio_tail = worker-&amp;gt;bgio_tail;
                    int bgio_head = worker-&amp;gt;bgio_head;
                    int bgio_next = (bgio_tail + 1) % worker-&amp;gt;num_max_bgio;
                    int next_bhead = (worker-&amp;gt;buffer_head + 1) % worker-&amp;gt;num_max_bgio;
                    if (bgio_next == bgio_head) break;  // queue for send requests is full
                    if (next_bhead == worker-&amp;gt;buffer_tail) break; // queue for recieving completed IO is full
                    // Queue this block with the worker.  We have to track which buffer it's going to.
                    int buffer_idx = worker-&amp;gt;buffer_start_idx + worker-&amp;gt;buffer_head;
                    na-&amp;gt;buffer_state[buffer_idx] = BUFFER_PREFETCHING;
                    worker-&amp;gt;bgio_uids[bgio_tail] = (uid++)&amp;lt;&amp;lt;16; // unique id helps track IOs in io_uring, we encode 4 bytes later
                    worker-&amp;gt;bgio_buffer_idx[bgio_tail] = buffer_idx;
                    worker-&amp;gt;bgio_block_idx[bgio_tail] = blocks_queued++;  // block sized index into file
                    worker-&amp;gt;bgio_queued[bgio_tail] = -1;  // Requested but not yet queued
                    int next_tail = (bgio_tail + 1) % worker-&amp;gt;num_max_bgio;
                    worker-&amp;gt;bgio_tail = next_tail;
                    // Log the buffer in an ordered queue for us to read
                    worker-&amp;gt;complete_ring[worker-&amp;gt;buffer_head] = buffer_idx;
                    worker-&amp;gt;buffer_head = next_bhead;
                    buffer_queued++;
                }
                // Tell the worker to submit IOs as a group
                worker-&amp;gt;bgio_submit++;
            }
        }

        //// Completion Phase //////
        //     Iterate through worker and check if they have complete IOs
        for (int i = 0; i &amp;lt; na-&amp;gt;num_workers; i++) {
            worker_thread_data_t* worker = &amp;amp;na-&amp;gt;workers[i];
            int current = worker-&amp;gt;buffer_tail;
            // We know what IO's we're waiting on, but we have to poll
            //  to see if they are done.
            for (int scan = 0; scan &amp;lt; worker-&amp;gt;num_max_bgio; scan++) {
                // Scan until we get to the end of the list
                if (current == worker-&amp;gt;buffer_head) break;
                int buffer_idx = worker-&amp;gt;complete_ring[current];
                int state = na-&amp;gt;buffer_state[buffer_idx];
                if (state == BUFFER_PREFETCHED) {
                    // This buffer is completed - Process this buffer.
                    count += count_tens_unrolled(na-&amp;gt;io_buffers[buffer_idx], na-&amp;gt;block_size);
                    na-&amp;gt;buffer_state[buffer_idx] = BUFFER_UNUSED;
                    blocks_read++;
                    buffer_queued--;
                }
                current = (current + 1) % worker-&amp;gt;num_max_bgio;
            }
            // IO's might have been completed out of order, advance the tail when we can
            current = worker-&amp;gt;buffer_tail;
            while (current != worker-&amp;gt;buffer_head) {
                int buffer_idx = worker-&amp;gt;complete_ring[current];
                int state = na-&amp;gt;buffer_state[buffer_idx];
                if (state != BUFFER_UNUSED) break;
                current = (current + 1) % worker-&amp;gt;num_max_bgio;
            }
            worker-&amp;gt;buffer_tail = current;
            worker-&amp;gt;bgio_submit++;  // probably unnecessary
        }
    }
    long elapsed = get_time_us() - start;
    printf("diskbased found %ld 10s processed at %0.2f GB/s\n", count, (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));

    // Cleanup I/O system
    ioengine_free(na);

    return 0;
}
&lt;/code&gt;
    &lt;p&gt;I hope all this extra code makes it faster.&lt;/p&gt;
    &lt;code&gt;â¯ sudo ./diskbased/benchmark ./mnt/datafile.bin 53687091200
diskbased found 167802249 10s processed at 5.81 GB/s
&lt;/code&gt;
    &lt;p&gt;Boom! Disk is faster than memory! It takes several hundred lines of code but now we can source the data from my SSDs faster than the copy from the page cache in memory.&lt;/p&gt;
    &lt;head rend="h2"&gt;So what's going on here?&lt;/head&gt;
    &lt;p&gt;Of course my 6GB/s disk stripe isnât actually faster than the memory bus, even on this weird hack of a system. So what is happening? Where is the bottleneck? It's got to be the way the data is being read from the page cache in memory.&lt;/p&gt;
    &lt;p&gt;What if we replace the mmap() with a read() from disk into a preallocated buffer. That way we can measure the counting with the data in-memory without any page cache related overhead mmap() can introduce.&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

long get_time_us() {
    struct timeval tv;
    gettimeofday(&amp;amp;tv, NULL);
    return tv.tv_sec * 1000000L + tv.tv_usec;
}

int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY|O_DIRECT);
    void *buf;
    posix_memalign(&amp;amp;buf, 4096, size_bytes);
    int *data = buf;

    size_t off = 0;
    while (off &amp;lt; size_bytes) {
        ssize_t n = read(fd, (char*)data + off, size_bytes - off);
        off += (size_t)n;   // YOLO: assume n &amp;gt; 0 until done
    }

    long start = get_time_us();
    for (size_t i = 0; i &amp;lt; total_ints; ++i) {
        if (data[i] == 10) count++;
    }
    long elapsed = get_time_us() - start;

    printf("simple loop %ld 10s processed at %0.2f GB/s\n",
           count,
           (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));


    // Get the compiler to align the buffer
    const int * __restrict p = (const int * __restrict)__builtin_assume_aligned((void*)data, 4096);
    uint64_t c0=0, c1=0, c2=0, c3=0,
            c4=0, c5=0, c6=0, c7=0,
            c8=0, c9=0, c10=0, c11=0,
            c12=0, c13=0, c14=0, c15=0;

    start = get_time_us();
    // Unrolling the compiler knows it can use a vector unit like AVX2 to process
    for (size_t i = 0; i &amp;lt; total_ints; i += 16) {
        // removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1
        c0  += (unsigned)(p[i+ 0] == 10);
        c1  += (unsigned)(p[i+ 1] == 10);
        c2  += (unsigned)(p[i+ 2] == 10);
        c3  += (unsigned)(p[i+ 3] == 10);
        c4  += (unsigned)(p[i+ 4] == 10);
        c5  += (unsigned)(p[i+ 5] == 10);
        c6  += (unsigned)(p[i+ 6] == 10);
        c7  += (unsigned)(p[i+ 7] == 10);
        c8  += (unsigned)(p[i+ 8] == 10);
        c9  += (unsigned)(p[i+ 9] == 10);
        c10 += (unsigned)(p[i+10] == 10);
        c11 += (unsigned)(p[i+11] == 10);
        c12 += (unsigned)(p[i+12] == 10);
        c13 += (unsigned)(p[i+13] == 10);
        c14 += (unsigned)(p[i+14] == 10);
        c15 += (unsigned)(p[i+15] == 10);
    }

    // pairwise reduce to help some compilers schedule better
    uint64_t s0 = c0 + c1,   s1 = c2 + c3,   s2 = c4 + c5,   s3 = c6 + c7;
    uint64_t s4 = c8 + c9,   s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15;
    uint64_t t0 = s0 + s1,   t1 = s2 + s3,   t2 = s4 + s5,   t3 = s6 + s7;

    count = (t0 + t1) + (t2 + t3);
    elapsed = get_time_us() - start;

    printf("unrolled loop %ld 10s processed at %0.2f GB/s\n",
           count,
           (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));
}
&lt;/code&gt;
    &lt;p&gt;If we keep the dataset smaller than a numa domain and we bind this to a single numa node to prevent numa overheads we see that the theoretical memory bandwidth we projected seems to be the primary bottleneck for the unrolled loop as we hoped to see at the outset.&lt;/p&gt;
    &lt;code&gt;â¯  sudo numactl --cpunodebind=0   ./in_ram mnt/datafile.bin 2147483648
simple loop 6709835 10s processed at 4.76 GB/s
unrolled loop 6709835 10s processed at 13.04 GB/s
&lt;/code&gt;
    &lt;p&gt;But this isn't useful to compare the with the other runs with the 50GB dataset. However if we do the full 50GB dataset the performance suffers. We have to get much of the data across numa domains which is going to be higher cost.&lt;/p&gt;
    &lt;code&gt;â¯ sudo ./in_ram ./mnt/datafile.bin 53687091200
simple loop 167802249 10s processed at 3.76 GB/s
unrolled loop 167802249 10s processed at 7.90 GB/s
&lt;/code&gt;
    &lt;p&gt;Comparing the results of "fully in-memory (50GB)" which is pre-loaded in memory before measuring against the "unrolled loop" that is only cached in memory we see 40% overhead. That's 2.75 seconds out of 9 seconds that was spent waiting on the caching system instead of counting. Why so much?&lt;/p&gt;
    &lt;p&gt;mmap()&lt;/p&gt;
    &lt;p&gt;The mmap() call presents the process with a buffer that is a blank slate even when the data is already in memory. The buffer is populated page by page as it's accessed from the page cache. This isn't a copy, it's just the operating system mapping the cached memory into the process. This costs more than it might seem. The worst case with mmap() the counting has to pause at every 4KB page boundary while the kernel processes a fault, tracks down the page of data in the page cache, then updates the page table of the process to insert the memory into the process. Fundamentally this is a process that is limited by the memory latency, not the CPU speed or memory bandwidth. With the potential for TLB walks and searching lists that track the page cache, weâre taking potentially dozens of CPU cache misses and several microseconds of waiting on memory for every 4KB page.&lt;/p&gt;
    &lt;p&gt;direct IO&lt;/p&gt;
    &lt;p&gt;Using our direct from disk approach uses pipelines and streams which avoids the kind of memory latency dominated bottleneck that mmap() has. In our case we're limited by the bandwidth of our disks yet because of the pipelining, the larger latency of the IOs doesn't get in the critical path of the counting very much. Allowing for higher throughput.&lt;/p&gt;
    &lt;head rend="h2"&gt;Scaling&lt;/head&gt;
    &lt;p&gt;Consider the implications of these experiments as we scale. The well vetted solution to get data from memory to a process is slower than using the disk directly. This isn't because the memory is slower than the disk. The memory has higher bandwidth than the disk, not by an order of magnitude, but a decent margin. But the latency of the memory is orders of magnitude lower than the disk. Nevertheless the way the data in memory is accessed is the culprit. Its a synchronous approach that assumes memory operations are cheap and low latency. These accesses add up and it ends up waiting on memory latencies. The disk method on the other hand is as a streaming approach built to leverage bandwidth and hide latencies.&lt;/p&gt;
    &lt;p&gt;extending the existing rig&lt;/p&gt;
    &lt;p&gt;If I got a few more of these disks I could push the IO bandwidth to be greater than the 13GB/s per thread memory bandwidth limit. IO is DMA'ed to buffers that are pretty small compared to the total dataset. These buffers scale with the throughput capabilities of the CPU and the disks, not the dataset size. The buffers can be located in a single numa domain allowing us to avoid the overhead of accessing the buffers between NUMA domains. Add more disks to this system I might be able to create a disk based solution to count at the full 13GB/s rather than be limited to the 7.90GB/s we see with the in memory example at the full 50GB dataset. With such a system our throughput would not be affected by the dataset size, unlike the in-memory case, which has numa overhead and eventually runs out of memory to scale.&lt;/p&gt;
    &lt;p&gt;faster than memory is possible&lt;/p&gt;
    &lt;p&gt;On a proper modern server the CPUs will let you do IO directly to the L3 cache, bypassing memory altogether. Because PCIe bandwidth is higher than memory bandwidth, on paper we could even get more max bandwidth than we can get from memory if we carefully pin the buffers into the CPU cache. I haven't confirm this works in practice, however, it could be made to work and is the sort of thing that CPU designs will be forced to lean into to push performance forward.&lt;/p&gt;
    &lt;p&gt;memory is changing too&lt;/p&gt;
    &lt;p&gt;This isn't just about disks vs memory. Similar techniques and principles apply to memory. Memory bandwidth is still scaling even if the latency is not. This means to take advantage of memory performance you have to actually treat it more like a disk and less like Random Access Memory. To scale performance with generational updates you have to make sure to stream data from memory into the CPU caches in blocks, similar to how data is streamed from disk to memory. If not you end up with 90s level memory throughput. A custom mechanism to cache data in memory could easily avoid the memory latency problems seen with the default mmap() solution with much less code than the io_uring solution.&lt;/p&gt;
    &lt;head rend="h2"&gt;Is this worth it?&lt;/head&gt;
    &lt;p&gt;I'm not going to say that going to the effort of implementing something like this is always worth it. The mmap() method is sure elegant from a coding perspective, especially when compared to all the code I had to write to get the io_uring setup working. Sometimes the simple way is the way to go.&lt;/p&gt;
    &lt;p&gt;Is using 6 cores of IO for 1 core of compute is always the right answer? Probably not. This was an extreme situation to prove a point. In realworld situations you'll need to look at the tradeoffs and decide what's best for your use case. Correctly understanding the strengths and weaknesses of the hardware can open up a number of possibilities where you can get a lot more performance for a lot less money.&lt;/p&gt;
    &lt;p&gt;The kind of overhead demonstrated with mmap() isnât going to go away, new hardware isn't going to fix it. At the same time disk bandwidth and the number of cores are scaling each generation. But doing things that scale performance with new technology is going to take extra code and effort.&lt;/p&gt;
    &lt;p&gt;But don't just blow this stuff off. Sure you can dedicate a server with 3TB of memory to serve 10K client connections. Memory in the cloud is like ~$5/GB/month, if you can afford it, then you do you. However it is worth considering that humanity doesn't have the silicon fabs or the power plants to support this for every moron vibe coder out there making an app. I figure either the karmic debt to the planet, or a vengeful AI demigod hungry for silicon and electricity will come for those that don't heed this warning, eventually. Either way my conscience is clear.&lt;/p&gt;
    &lt;head rend="h2"&gt;Recap&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Memory is slow - when you use it oldschool.&lt;/item&gt;
      &lt;item&gt;Disk is fast - when you are clever with it.&lt;/item&gt;
      &lt;item&gt;Test the dogma - compounded exponentials are flipping somethings from true to false.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Bad news is that this cleverness requires extra code and effort.&lt;/p&gt;
    &lt;p&gt;Good news is we now have AI to write and test the extra code this cleverness requires.&lt;/p&gt;
    &lt;p&gt;Better news is that, for those that are willing to learn, AI's don't do this unless you know how to ask them.&lt;/p&gt;
    &lt;p&gt;Lean into things that scale, avoid things that donât.&lt;/p&gt;
    &lt;head rend="h2"&gt;Next Time&lt;/head&gt;
    &lt;p&gt;What will be revealed in the next episode?&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Is O(ân) actually faster than O(log n)? Will the foundations of Computer Science survive this unveiling?&lt;/item&gt;
      &lt;item&gt;Will traditional code be consumed into the latent space of our AI overlords?&lt;/item&gt;
      &lt;item&gt;Is AI hiding these performance gains from me? Is AI even capable of writing optimized code?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Jared Hulbert&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;A few notes for the "um actually" haters commenting on Hacker News:&lt;/p&gt;
      &lt;item&gt;This is not and does not claim to be an academic paper.&lt;/item&gt;
      &lt;item&gt;I do not intend to prove that NAND is a drop in replacement for DRAM.&lt;/item&gt;
      &lt;item&gt;Tis but a humble and hopefully fun exercise in exploring the limits and trends of modern hardware and the tradeoffs needed to maximize performance.&lt;/item&gt;
      &lt;item&gt;As I stated before I have no problem with your choice to ignore this and write lazy code that will perform just as fast on new hardware in 15 years as it does on todays hardware. In fact I applaud your choice. Jeff Bezos has an orbital yacht to build, someone has to pay for it, why not you?&lt;/item&gt;
      &lt;item&gt;I am not an AI. I am a human with a computer that don't write perfect.&lt;/item&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;source code can be found here.&lt;/p&gt;
    &lt;/quote&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45132710</guid></item><item><title>What Is the Fourier Transform?</title><link>https://www.quantamagazine.org/what-is-the-fourier-transform-20250903/</link><description>&lt;doc fingerprint="b00b98134830c362"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;What Is the Fourier Transform?&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;As we listen to a piece of music, our ears perform a calculation. The high-pitched flutter of the flute, the middle tones of the violin, and the low hum of the double bass fill the air with pressure waves of many different frequencies. When the combined sound wave descends through the ear canal and into the spiral-shaped cochlea, hairs of different lengths resonate to the different pitches, separating the messy signal into buckets of elemental sounds.&lt;/p&gt;
    &lt;p&gt;It took mathematicians until the 19th century to master this same calculation.&lt;/p&gt;
    &lt;p&gt;In the early 1800s, the French mathematician Jean-Baptiste Joseph Fourier discovered a way to take any function and decompose it into a set of fundamental waves, or frequencies. Add these constituent frequencies back together, and you’ll get your original function. The technique, today called the Fourier transform, allowed the mathematician — previously an ardent proponent of the French revolution — to spur a mathematical revolution as well.&lt;/p&gt;
    &lt;p&gt;Out of the Fourier transform grew an entire field of mathematics, called harmonic analysis, which studies the components of functions. Soon enough, mathematicians began to discover deep connections between harmonic analysis and other areas of math and physics, from number theory to differential equations to quantum mechanics. You can also find the Fourier transform at work in your computer, allowing you to compress files, enhance audio signals and more.&lt;/p&gt;
    &lt;p&gt;“It’s hard to overestimate the influence of Fourier analysis in math,” said Leslie Greengard of New York University and the Flatiron Institute. “It touches almost every field of math and physics and chemistry and everything else.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Flames of Passion&lt;/head&gt;
    &lt;p&gt;Fourier was born in 1768 amid the chaos of prerevolutionary France. Orphaned at 10 years old, he was educated at a convent in his hometown of Auxerre. He spent the next decade conflicted about whether to dedicate his life to religion or to math, eventually abandoning his religious training and becoming a teacher. He also promoted revolutionary efforts in France until, during the Reign of Terror in 1794, the 26-year-old was arrested and imprisoned for expressing beliefs that were considered anti-revolutionary. He was slated for the guillotine.&lt;/p&gt;
    &lt;p&gt;Before he could be executed, the Terror came to an end. And so, in 1795, he returned to teaching mathematics. A few years later, he was appointed as a scientific adviser to Napoleon Bonaparte and joined his army during the invasion of Egypt. It was there that Fourier, while also pursuing research into Egyptian antiquities, began the work that would lead him to develop his transform: He wanted to understand the mathematics of heat conduction. By the time he returned to France in 1801 — shortly before the French army was driven out of Egypt, the stolen Rosetta stone surrendered to the British — Fourier could think of nothing else.&lt;/p&gt;
    &lt;p&gt;If you heat one side of a metal rod, the heat will spread until the whole rod has the same temperature. Fourier argued that the distribution of heat through the rod could be written as a sum of simple waves. As the metal cools, these waves lose energy, causing them to smooth out and eventually disappear. The waves that oscillate more quickly — meaning they have more energy — decay first, followed eventually by the lower frequencies. It’s like a symphony that ends with each instrument fading to silence, from piccolos to tubas.&lt;/p&gt;
    &lt;p&gt;The proposal was radical. When Fourier presented it at a meeting of the Paris Institute in 1807, the renowned mathematician Joseph-Louis Lagrange reportedly declared the work “nothing short of impossible.”&lt;/p&gt;
    &lt;p&gt;What troubled his peers most were strange cases where the heat distribution might be sharply irregular — like a rod that is exactly half cold and half hot. Fourier maintained that the sudden jump in temperature could still be described mathematically: It would just require adding infinitely many simpler curves instead of a finite number. But most mathematicians at the time believed that no number of smooth curves could ever add up to a sharp corner.&lt;/p&gt;
    &lt;p&gt;Today, we know that Fourier was broadly right.&lt;/p&gt;
    &lt;p&gt;“You can represent anything as a sum of these very, very simple oscillations,” said Charles Fefferman, a mathematician at Princeton University. “It’s known that if you have a whole lot of tuning forks, and you set them perfectly, they can produce Beethoven’s Ninth Symphony.” The process only fails for the most bizarre functions, like those that oscillate wildly no matter how much you zoom in on them.&lt;/p&gt;
    &lt;p&gt;So how does the Fourier transform work?&lt;/p&gt;
    &lt;head rend="h2"&gt;A Well-Trained Ear&lt;/head&gt;
    &lt;p&gt;Performing a Fourier transform is akin to sniffing a perfume and distinguishing its list of ingredients, or hearing a complex jazzy chord and distinguishing its constituent notes.&lt;/p&gt;
    &lt;p&gt;Mathematically, the Fourier transform is a function. It takes a given function — which can look complicated — as its input. It then produces as its output a set of frequencies. If you write down the simple sine and cosine waves that have these frequencies, and then add them together, you’ll get the original function.&lt;/p&gt;
    &lt;p&gt;To achieve this, the Fourier transform essentially scans all possible frequencies and determines how much each contributes to the original function. Let’s look at a simple example.&lt;/p&gt;
    &lt;p&gt;Consider the following function:&lt;/p&gt;
    &lt;p&gt;The Fourier transform checks how much each frequency contributes to this original function. It does so by multiplying waves together. Here’s what happens if we multiply the original by a sine wave with a frequency of 3:&lt;/p&gt;
    &lt;p&gt;There are lots of large peaks, which means the frequency 3 contributes to the original function. The average height of the peaks reveals how large the contribution is.&lt;/p&gt;
    &lt;p&gt;Now let’s test if the frequency 5 is present. Here’s what you get when you multiply the original function by a sine wave with the frequency 5:&lt;/p&gt;
    &lt;p&gt;There are some large peaks but also large valleys. The new graph averages out to around zero. This indicates that the frequency 5 does not contribute to the original function.&lt;/p&gt;
    &lt;p&gt;The Fourier transform does this for all possible frequencies, multiplying the original function by both sine and cosine waves. (In practice, it runs this comparison on the complex plane, using a combination of real and imaginary numbers.)&lt;/p&gt;
    &lt;p&gt;In this way, the Fourier transform can decompose a complicated-looking function into just a few numbers. This has made it a crucial tool for mathematicians: If they are stumped by a problem, they can try transforming it. Often, the problem becomes much simpler when translated into the language of frequencies.&lt;/p&gt;
    &lt;p&gt;If the original function has a sharp edge, like the square wave below (which is often found in digital signals), the Fourier transform will produce an infinite set of frequencies that, when added together, approximate the edge as closely as possible. This infinite set is called the Fourier series, and — despite mathematicians’ early hesitation to accept such a thing — it is now an essential tool in the analysis of functions.&lt;/p&gt;
    &lt;head rend="h2"&gt;Encore&lt;/head&gt;
    &lt;p&gt;The Fourier transform also works on higher-dimensional objects such as images. You can think of a grayscale image as a two-dimensional function that tells you how bright each pixel is. The Fourier transform decomposes this function into a set of 2D frequencies. The sine and cosine waves defined by these frequencies form striped patterns oriented in different directions. These patterns — and simple combinations of them that resemble checkerboards — can be added together to re-create any image.&lt;/p&gt;
    &lt;p&gt;Any 8-by-8 image, for example, can be built from some combination of the 64 building blocks below. A compression algorithm can then remove high-frequency information, which corresponds to small details, without drastically changing how the image looks to the human eye. This is how JPEGs compress complex images into much smaller amounts of data.&lt;/p&gt;
    &lt;p&gt;In the 1960s, the mathematicians James Cooley and John Tukey came up with an algorithm that could perform a Fourier transform much more quickly — aptly called the fast Fourier transform. Since then, the Fourier transform has been implemented practically every time there is a signal to process. “It’s now a part of everyday life,” Greengard said.&lt;/p&gt;
    &lt;p&gt;It has been used to study the tides, to detect gravitational waves, and to develop radar and magnetic resonance imaging. It allows us to reduce noise in busy audio files, and to compress and store all sorts of data. In quantum mechanics — the physics of the very small — it even provides the mathematical foundation for the uncertainty principle, which says that it’s impossible to know the precise position and momentum of a particle at the same time. You can write down a function that describes a particle’s possible positions; the Fourier transform of that function will describe the particle’s possible momenta. When your function can tell you where a particle will be located with high probability — represented by a sharp peak in the graph of the function — the Fourier transform will be very spread out. It will be impossible to determine what the particle’s momentum should be. The opposite is also true.&lt;/p&gt;
    &lt;p&gt;The Fourier transform has spread its roots throughout pure mathematics research, too. Harmonic analysis — which studies the Fourier transform, as well as how to reverse it to rebuild the original function — is a powerful framework for studying waves. Mathematicians have also found that harmonic analysis has deep and unexpected connections to number theory. They’ve used these connections to explore relationships among the integers, including the distribution of prime numbers, one of the greatest mysteries in mathematics.&lt;/p&gt;
    &lt;p&gt;“If people didn’t know about the Fourier transform, I don’t know what percent of math would then disappear,” Fefferman said. “But it would be a big percent.”&lt;/p&gt;
    &lt;p&gt;Editor’s note: The Flatiron Institute is funded by the Simons Foundation, which also funds this editorially independent magazine. Simons Foundation funding decisions have no influence on our coverage. More information about the relationship between Quanta Magazine and the Simons Foundation is available here.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45132810</guid></item><item><title>Evolving the OCaml Programming Language (2025) [pdf]</title><link>https://kcsrk.info/slides/Evolution_Ashoka_2025.pdf</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45133652</guid></item><item><title>Fil's Unbelievable Garbage Collector</title><link>https://fil-c.org/fugc</link><description>&lt;doc fingerprint="da4929d184b21ed4"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Fil's Unbelievable Garbage Collector&lt;/head&gt;
    &lt;p&gt;Fil-C uses a parallel concurrent on-the-fly grey-stack Dijkstra accurate non-moving garbage collector called FUGC (Fil's Unbelievable Garbage Collector). You can find the source code for the collector itself in fugc.c, though be warned, that code cannot possibly work without lots of support logic in the rest of the runtime and in the compiler.&lt;/p&gt;
    &lt;p&gt;Let's break down FUGC's features:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Parallel: marking and sweeping happen in multiple threads, in parallel. The more cores you have, the faster the collector finishes.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Concurrent: marking and sweeping happen on some threads other than the mutator threads (i.e. your program's threads). Mutator threads don't have to stop and wait for the collector. The interaction between the collector thread and mutator threads is mostly non-blocking (locking is only used on allocation slow paths).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;On-the-fly: there is no global stop-the-world, but instead we use "soft handshakes" (aka "ragged safepoints"). This means that the GC may ask threads to do some work (like scan stack), but threads do this asynchronously, on their own time, without waiting for the collector or other threads. The only "pause" threads experience is the callback executed in response to the soft handshake, which does work bounded by that thread's stack height. That "pause" is usually shorter than the slowest path you might take through a typical&lt;/p&gt;&lt;code&gt;malloc&lt;/code&gt;implementation.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Grey-stack: the collector assumes it must rescan thread stacks to fixpoint. That is, GC starts with a soft handshake to scan stack, and then marks in a loop. If this loop runs out of work, then FUGC does another soft handshake. If that reveals more objects, then concurrent marking resumes. This prevents us from having a load barrier (no instrumentation runs when loading a pointer from the heap into a local variable). Only a store barrier is necessary, and that barrier is very simple. This fixpoint converges super quickly because all newly allocated objects during GC are pre-marked.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Dijkstra: storing a pointer field in an object that's in the heap or in a global variable while FUGC is in its marking phase causes the newly pointed-to object to get marked. This is called a Dijkstra barrier and it is a kind of store barrier. Due to the grey stack, there is no load barrier like in the classic Dijkstra collector. The FUGC store barrier uses a compare-and-swap with relaxed memory ordering on the slowest path (if the GC is running and the object being stored was not already marked).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Accurate: the GC accurately (aka precisely, aka exactly) finds all pointers to objects, nothing more, nothing less.&lt;/p&gt;&lt;code&gt;llvm::FilPizlonator&lt;/code&gt;ensures that the runtime always knows where the root pointers are on the stack and in globals. The Fil-C runtime has a clever API and Ruby code generator for tracking pointers in low-level code that interacts with pizlonated code. All objects know where their outgoing pointers are - they can only be in the InvisiCap auxiliary allocation.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Non-moving: the GC doesn't move objects. This makes concurrency easy to implement and avoids a lot of synchronization between mutator and collector. However, FUGC will "move" pointers to free objects (it will repoint the capability pointer to the free singleton so it doesn't have to mark the freed allocation).&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This makes FUGC an advancing wavefront garbage collector. Advancing wavefront means that the mutator cannot create new work for the collector by modifying the heap. Once an object is marked, it'll stay marked for that GC cycle. It's also an incremental update collector, since some objects that would have been live at the start of GC might get freed if they become free during the collection cycle.&lt;/p&gt;
    &lt;p&gt;FUGC relies on safepoints, which comprise:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;Pollchecks emitted by the compiler. The&lt;/p&gt;&lt;code&gt;llvm::FilPizlonator&lt;/code&gt;compiler pass emits pollchecks often enough that only a bounded amount of progress is possible before a pollcheck happens. The fast path of a pollcheck is just a load-and-branch. The slow path runs a pollcheck callback, which does work for FUGC.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Soft handshakes, which request that a pollcheck callback is run on all threads and then waits for this to happen.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Enter/exit functionality. This is for allowing threads to block in syscalls or long-running runtime functions without executing pollchecks. Threads that are in the exited state will have pollcheck callbacks executed by the collector itself (when it does the soft handshake). The only way for a Fil-C program to block is either by looping while entered (which means executing a pollcheck at least once per loop iteration, often more) or by calling into the runtime and then exiting.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Safepointing is essential for supporting threading (Fil-C supports pthreads just fine) while avoiding a large class of race conditions. For example, safepointing means that it's safe to load a pointer from the heap and then use it; the GC cannot possibly delete that memory until the next pollcheck or exit. So, the compiler and runtime just have to ensure that the pointer becomes tracked for stack scanning at some point between when it's loaded and when the next pollcheck/exit happens, and only if the pointer is still live at that point.&lt;/p&gt;
    &lt;p&gt;The safepointing functionality also supports stop-the-world, which is currently used to implement &lt;code&gt;fork(2)&lt;/code&gt; and for debugging FUGC (if you set the &lt;code&gt;FUGC_STW&lt;/code&gt; environment variable to &lt;code&gt;1&lt;/code&gt; then the
collector will stop the world and this is useful for triaging GC bugs; if the bug reproduces in STW
then it means it's not due to issues with the store barrier). The safepoint infrastructure also allows
safe signal delivery; Fil-C makes it possible to use signal handling in a practical way. Safepointing is
a common feature of virtual machines that support multiple threads and accurate garbage collection,
though usually, they are only used to stop the world rather than to request asynchronous activity from all
threads. See here for a write-up about
how OpenJDK does it. The Fil-C implementation is in &lt;code&gt;filc_runtime.c&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Here's the basic flow of the FUGC collector loop:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Wait for the GC trigger.&lt;/item&gt;
      &lt;item&gt;Turn on the store barrier, then soft handshake with a no-op callback.&lt;/item&gt;
      &lt;item&gt;Turn on black allocation (new objects get allocated marked), then soft handshake with a callback that resets thread-local caches.&lt;/item&gt;
      &lt;item&gt;Mark global roots.&lt;/item&gt;
      &lt;item&gt;Soft handshake with a callback that requests stack scan and another reset of thread-local caches. If all collector mark stacks are empty after this, go to step 7.&lt;/item&gt;
      &lt;item&gt;Tracing: for each object in the mark stack, mark its outgoing references (which may grow the mark stack). Do this until the mark stack is empty. Then go to step 5.&lt;/item&gt;
      &lt;item&gt;Turn off the store barrier and prepare for sweeping, then soft handshake to reset thread-local caches again.&lt;/item&gt;
      &lt;item&gt;Perform the sweep. During the sweep, objects are allocated black if they happen to be allocated out of not-yet-swept pages, or white if they are allocated out of alraedy-swept pages.&lt;/item&gt;
      &lt;item&gt;Victory! Go back to step 1.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you're familiar with the literature, FUGC is sort of like the DLG (Doligez-Leroy-Gonthier) collector (published in two papers because they had a serious bug in the first one), except it uses the Dijkstra barrier and a grey stack, which simplifies everything but isn't as academically pure (FUGC fixpoints, theirs doesn't). I first came up with the grey-stack Dijkstra approach when working on Fiji VM's CMR and Schism garbage collectors. The main advantage of FUGC over DLG is that it has a simpler (cheaper) store barrier and it's a slightly more intuitive algorithm. While the fixpoint seems like a disadvantage, in practice it converges after a few iterations.&lt;/p&gt;
    &lt;p&gt;Additionally, FUGC relies on a sweeping algorithm based on bitvector SIMD. This makes sweeping insanely fast compared to marking. This is made thanks to the Verse heap config that I added to libpas. FUGC typically spends &amp;lt;5% of its time sweeping.&lt;/p&gt;
    &lt;head rend="h2"&gt;Bonus Features&lt;/head&gt;
    &lt;p&gt;FUGC supports a most of C-style, Java-style, and JavaScript-style memory management. Let's break down what that means.&lt;/p&gt;
    &lt;head rend="h3"&gt;Freeing Objects&lt;/head&gt;
    &lt;p&gt;If you call &lt;code&gt;free&lt;/code&gt;, the runtime will flag the object as free and all subsequent accesses to the object will trap. Additionally, FUGC will not scan outgoing references from the object (since they cannot be accessed anymore).&lt;/p&gt;
    &lt;p&gt;Also, FUGC will redirect all capability pointers (lowers in InvisiCaps jargon) to free objects to point at the free singleton object instead. This allows freed object memory to really be reclaimed.&lt;/p&gt;
    &lt;p&gt;This means that freeing objects can be used to prevent GC-induced leaks. Surprisingly, a program that works fine with &lt;code&gt;malloc&lt;/code&gt;/&lt;code&gt;free&lt;/code&gt; (no leaks, no crashes) that gets converted to GC the naive way (&lt;code&gt;malloc&lt;/code&gt; allocates from the GC and &lt;code&gt;free&lt;/code&gt; is a no-op) may end up leaking due to dangling pointers that the program never accesses. Those dangling pointers will be treated as live by the GC. In FUGC, if you freed those pointers, then FUGC will really kill them.&lt;/p&gt;
    &lt;head rend="h3"&gt;Finalizers&lt;/head&gt;
    &lt;p&gt;FUGC supports finalizer queues using the &lt;code&gt;zgc_finq&lt;/code&gt; API in stdfil.h. This feature allows you to implement finalizers in the style of Java, except that you get to set up your own finalizer queues and choose which thread processes them.&lt;/p&gt;
    &lt;head rend="h3"&gt;Weak References&lt;/head&gt;
    &lt;p&gt;FUGC supports weak references using the &lt;code&gt;zweak&lt;/code&gt; API in stdfil.h. Weak references work just like the weak references in Java, except there are no reference queues. Fil-C does not support phantom or soft references.&lt;/p&gt;
    &lt;head rend="h3"&gt;Weak Maps&lt;/head&gt;
    &lt;p&gt;FUGC supports weak maps using the &lt;code&gt;zweak_map&lt;/code&gt; API in stdfil.h. This API works almost exactly like the JavaScript WeakMap, except that Fil-C's weak maps allow you to iterate all of their elements and get a count of elements.&lt;/p&gt;
    &lt;head rend="h1"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;FUGC allows Fil-C to give the strongest possible guarantees on misuse of &lt;code&gt;free&lt;/code&gt;:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Freeing an object and then accessing it is guaranteed to result in a trap. Unlike tag-based approaches, which will trap on use after free until until memory reclamation is forced, FUGC means you will trap even after memory is reclaimed (due to lower repointing to the free singleton).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Freeing an object twice is guaranteed to result in a trap.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Failing to free an object means the object gets reclaimed for you.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45133938</guid></item><item><title>Interview with Japanese Demoscener – 0b5vr</title><link>https://6octaves.com/2025/09/interview-with-demoscener-0b5vr.html</link><description>&lt;doc fingerprint="27325121b8a72b9e"&gt;
  &lt;main&gt;
    &lt;p&gt;Welcome to “Interviews with Demosceners”! This time, we welcome Japanese demoscener 0b5vr, who mainly creates 64K and 4K intros.&lt;/p&gt;
    &lt;p&gt;For many, 0b5vr is best remembered for his 64K demo “0b5vr GLSL Techno Live Set”, released at Revision 2023. In this interview, he talks about how this piece was created, as well as his recent live music performance.&lt;/p&gt;
    &lt;p&gt;He also talks about trends around the Japanese demoscene, like music production with GLSL, machine live, and generative VJ. I also took the chance to ask how he feels about sceners like me—that is, people who know nothing about programming or technology! Happy reading!&lt;/p&gt;
    &lt;p&gt;Note: If you don’t know what demoscene is, you may want to start from here!&lt;/p&gt;
    &lt;p&gt;First of all, could you introduce yourself?&lt;/p&gt;
    &lt;p&gt;I’m 0b5vr, and I don’t belong to any particular group. I mainly work on 64k intros and 4k intros/exegfx using WebGL. I also compete in Shader Jam and perform live coding and VJ sets at club events and similar venues.&lt;/p&gt;
    &lt;p&gt;Your demo “0b5vr GLSL Techno Live Set” had a strong impact on me. I was curious about this. It says “Live Set,” but was released in the 64K category. What is this exactly? Is this live coding?&lt;/p&gt;
    &lt;p&gt;0b5vr GLSL Techno Live Set (“0mix”) is indeed a 64K intro demo. Just like any other 64K intro, this audiovisual piece is generated from a 64KB file―an HTML file, in this case.&lt;/p&gt;
    &lt;p&gt;That said, as described in the title, its format is “Live Set.” It can be somewhat tricky, because it looks like a recorded video of a live performance at an event, but it’s actually a 64K intro.&lt;/p&gt;
    &lt;p&gt;Hmm… I’m still not sure if I understood correctly. Could you elaborate a bit more?&lt;/p&gt;
    &lt;p&gt;0mix was inspired by three different scenes: techno demos, live coding, and 64K intros.&lt;/p&gt;
    &lt;p&gt;Let me start with techno demos. There are many techno-themed demos in the history of the demoscene. If you look at the demos such as “Medium” by Einklang.net, “X-MIX 2004: Ion Traxx” by Kewlers &amp;amp; mfx, and “Emix” by Epoch, they use multiple tracks mixed together like a DJ set, rather than a single techno soundtrack. They also use VJ-style visuals to create an atmosphere similar to a club event. Emix has black-and-white visuals with unique textures that fit perfectly with cold, mechanical techno, and it’s one of my favorites.&lt;/p&gt;
    &lt;p&gt;Next is live coding. Live coding is a live performance where visuals and music are generated with programming in real time. On the screen, you’ll see the visuals and sound waveforms being generated alongside the code you’re writing. This highlights that the artwork is generated by code. In the demoscene, live coding sessions focus mostly on visuals in GLSL (eg, Shader Showdown, Shader Jam). But in live coding events like Algorave and Eulerroom, music live coding is as popular as, or even more popular than, visual coding. From what I see, Tidal Cycles and Sonic Pi are the most commonly used tools in those environments. (Reference video)&lt;/p&gt;
    &lt;p&gt;Finally, there’s the 64K intro. It’s a category where you create visuals and audio with an executable file of just 64KB. This is the most challenging category since every element has to be procedurally generated within the intro. Most 64K creators build their own engines and tools from scratch. This category requires a broad range of knowledge and skills including modeling, animation, rendering, post-processing, music, and compression.&lt;/p&gt;
    &lt;p&gt;If I managed to merge all three inspirations and create a 64K techno demo with music generated by live coding, I knew I could present it to demosceners and other creators around the scene with confidence. I came up with the idea about a year before Revision 2023. Over the course of that year, I refined a demo engine, built a live coding environment, composed music, and created visual assets almost entirely on my own.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt; Here’s the working environment for 0mix. The top screen shows the preview, timeline, etc., while the bottom screen is the code editor. Basically, I spend most of the time in the code editor.&lt;/p&gt;
    &lt;p&gt;So, you climbed the highest mountain by yourself. What was the process like?&lt;/p&gt;
    &lt;p&gt;It was extremely tough and painful to spend a year working on a challenging 64K project by myself. My advice is to collaborate with others. At the very least, you should find someone you can discuss the progress with. It was indeed fun to surprise many friends at demoparties, but at the end of the day, completing the project is more important.&lt;/p&gt;
    &lt;p&gt;You entered 64K compo, but it ended up being released in the PC Demo compo. Did that bother you?&lt;/p&gt;
    &lt;p&gt;It’s true that 0mix was released in the PC Demo Compo at Revision 2023. That was because it was the only entry in the PC 64K intro, which wasn’t enough to hold a separate compo. So the two compos were merged. The same thing happened at Revision 2022. PC 64K intro compo was incorporated into the 8K intro compo because there were only two entries. Nevertheless, I’ve always pursued uncompromising quality, so I was down with it. Along with the works of other demo groups (such as Fairlight, mfx, and Still), I think I could contribute to making that compo interesting.&lt;/p&gt;
    &lt;p&gt;Ah, you’re right. That felt like a never-ending compo!&lt;/p&gt;
    &lt;p&gt;There were so many entries for Revision 2023, and from the chat I got the impression that many participants and viewers were exhausted after the compo. Still, it was a great compo. All of the top works featured demoscene-style visuals built with their own engines, and their narratives were also impressive. So I’m happy with my result. When there’s a big entry in the compo I’m in, I feel more accomplished because it means I helped make that compo exciting together with those great pieces.&lt;/p&gt;
    &lt;p&gt;That’s right, I remember some big names rushing in at the end. Nevertheless, this demo stood out for its originality.&lt;/p&gt;
    &lt;p&gt;Thank you. Revision has an award called “Crowd Favorite” where viewers can vote for their favorite demo in any category, and 0mix received first prize. 0mix is a piece that reflects what I love, so I felt happy that everyone else enjoyed it, too.&lt;/p&gt;
    &lt;p&gt;Congratulations! It was indeed a cool demo.&lt;/p&gt;
    &lt;p&gt;Oh, I have a question for you. How do you feel about the code constantly shown in 0mix? What kind of impression does it give you? &lt;lb/&gt; (Interviewer’s note: I’m not from the programming field. I’m the type of person who chooses a laptop by its color.)&lt;/p&gt;
    &lt;p&gt;Maybe it’s more like a design or typography? It says “live coding,” so I figured this code is for its visuals, but I have absolutely no idea if the code itself is cool or not. If I didn’t know what live coding is, I’d probably just look at it as part of the design, just like seeing the typography in a language I don’t understand.&lt;/p&gt;
    &lt;p&gt;Ah, that’s interesting! Actually, the code displayed on the screen is not for visuals but for music. I use a programming language called GLSL, which is normally used to generate visuals. But 0mix is a live performance-themed demo where I use GLSL for music, and that’s why it’s called “GLSL Techno Live.” If you look at the code closely, you’ll see the parts for instruments, like “KICK,” “HIHAT,” and “BASS.” And by adding and subtracting these elements, I shaped the flow of music.&lt;/p&gt;
    &lt;p&gt;Ohh, so that was code for music! But even after knowing this fact, my impression of this piece hasn’t really changed. I guess that shows I interpreted the code as part of the design. Is it okay if a viewer like me sees it that way? (laughs)&lt;/p&gt;
    &lt;p&gt;In my post about this production on Scrapbox, I wrote, “for viewers without coding knowledge, it feels like music-making magic. And for viewers who know programming languages and environments, it’s a hint to guess the next move.” So I expected that some people would see it as part of the design.&lt;/p&gt;
    &lt;p&gt;To reveal a bit more about my understanding, now I do understand that “demo is generated from an executable file” and that “a 64K piece has a 64KB file.” But I still don’t see things like “this is real-time rendering, so it’s more impressive than live-action” or “it’s great quality considering this is 64KB.” Basically, I watch demos like I watch music videos, and the only thing that matters to me is whether I find it cool or not.&lt;/p&gt;
    &lt;p&gt;Ryoji Ikeda has a work that presents data including planets and genes using 5×5 pixel fonts. Of course, only experts can truly understand such data, so most of us simply enjoy the visual design that comes out of it. Even if we try to find deeper meaning in it, we probably just end up saying something like, “Wow, the world is huge.” I’ve read that Ikeda actually intended for viewers to see it that way.&lt;/p&gt;
    &lt;p&gt;Oh, then I’m actually one of his intended viewers. When I first saw his installation video, I knew him as a musician, so I thought, “Wow, that’s his MV? Cool! Very futuristic!” I later realized that it wasn’t just design. It’s nice to know that creators and demosceners expected viewers like me, and personally, I feel relieved. I’d always thought they might be annoyed to hear a clueless person like me commenting on their piece. (laughs)&lt;/p&gt;
    &lt;p&gt;To me, how others first got interested in a piece or in the culture is as fascinating as the motives behind its creation. So I do appreciate sceners who are not from the tech side!&lt;/p&gt;
    &lt;p&gt;Thank you! That’s really nice and reassuring to hear!&lt;lb/&gt; OK, let’s go back to that music code. You wrote in your post on Scrapbox that you put a lot of time and effort into the music.&lt;/p&gt;
    &lt;p&gt;Actually, I had never really made this type of techno music before, so I watched a lot of live performances of this style and tutorials on YouTube. I also bought and tried hardware for “machine live” performances, like the Elektron Syntakt and Dirtywave M8, for research.&lt;/p&gt;
    &lt;p&gt;What is “machine live”?&lt;/p&gt;
    &lt;p&gt;“Machine live” is a type of music performance similar to live coding. Performers use music equipment like grooveboxes and modular synths in real-time to control the sound during the performance. What you can do depends on the features of the equipment, so performers always have to be aware of limitations—something somewhat similar to the demoscene. It’s a fascinating culture. There’s even a “DAWless Live” category where you perform without using a DAW, the standard PC-based music production system. For 0mix, I drew a lot of inspiration from the philosophy and methods of machine live and applied them to GLSL live coding. (Reference video)&lt;/p&gt;
    &lt;p&gt;I just watched the reference video you sent me. Does everyone in this scene really use that much gear?&lt;/p&gt;
    &lt;p&gt;Of course not. Not everyone uses this much equipment, or equipment of this size, for live performance. Lately, it seems like the palm-sized Dirtywave M8 is trending for live sets. The Dirtywave M8 uses a tracker-style UI, and it’s fun to compose with. Plus, it fits well with the demoscene aesthetic.&lt;/p&gt;
    &lt;p&gt;I did a lot of research on machine live and live coding performances, and this gave me ideas about how to create sound and how to evolve live performance. But that only covered the technical side. When it comes to making techno, especially abstract sounds, I had to learn through trial and error and trust my feelings. Even after I learned how to make sounds on standard hardware or software, GLSL follows a completely different set of rules, and I had to be really fired up to tackle it.&lt;/p&gt;
    &lt;p&gt;I heard that you did a live performance recently. What kind of event was it?&lt;/p&gt;
    &lt;p&gt;I performed a live coding set at “draw(tokyo); #2” in March 2025. “draw(); ” is a club event focused on audiovisuals, especially live coding and generative VJ (the so-called “gene-kei” performances). It takes place from time to time in VRChat and at physical venues.&lt;/p&gt;
    &lt;p&gt;At draw(tokyo); #2, I performed using Wavenerd, my custom GLSL live coding environment. For my 40-minute live set, I mainly used techno patterns created for 0mix. It was a really memorable experience, since it was my first time doing a live music performance with Wavenerd. I’d love to do more live performances in the future.&lt;/p&gt;
    &lt;p&gt;The “Wavenerd” system I used for my live coding performance at draw(tokyo); #2. Since we were chroma keying with VJ visuals, the background is blue. The performers are always lit up in blue.&lt;/p&gt;
    &lt;p&gt;When a coder does a live music performance, aren’t you too busy typing code in front of the PC to even look at the audience’s reaction?&lt;/p&gt;
    &lt;p&gt;During the performances, I rewrite parts of prewritten code, so I don’t need to constantly keep typing. But I’m busy adding and removing parts, changing parameters, and doing some DJ-style mixing, so basically I completely zone in on the screen. That said, I can still see the audience’s reactions to some extent, and I felt really happy when they reacted at the moments I expected.&lt;/p&gt;
    &lt;p&gt;Do you know who the primary audience is? I guess this kind of live performance requires some knowledge to really enjoy it.&lt;/p&gt;
    &lt;p&gt;I still don’t know what kind of audience it attracts. From what I saw, I got the impression that many of them are interested in musical experiences and visual production at least. But I’m not sure how many are interested in coding, or actually create things with code. How technical it should get, how strictly you stick to the technical restrictions, and how much you make the audience dance—I think performers are expected to balance these elements well. Probably, this is something gene-kei performers constantly have to tackle. In fact, quite a few performers change their set depending on the tone of the event.&lt;/p&gt;
    &lt;p&gt;Did you have VJs for your live performance?&lt;/p&gt;
    &lt;p&gt;Yes, I asked fellow demosceners, ukonpower and Renard, and they generated visuals that matched the techno. I just told them, “I’m going to do 0mix,” and they both knew what it meant, so everything went very smoothly. (laughs) They created visuals in my style, but their own personalities also shone through. It was really cool.&lt;/p&gt;
    &lt;p&gt;Oh, that’s really cool! &lt;lb/&gt; According to your discography, you also have 4K as well as 64K works. Is there a reason for that?&lt;/p&gt;
    &lt;p&gt;For the 4K intros I’ve released lately, I can usually create them in one or two weeks. But 64K is my soul, so I want to keep making 64K intros. The thing is, 64K requires hundreds of times more work than 4K. So, when I don’t have the time or motivation but still want to contribute to a demoparty, I just make a 4K intro.&lt;/p&gt;
    &lt;p&gt;I must say that the production environment for 4K intros is well-supported in the current demoscene. Recently I’ve been using 0x4015’s minimalGL. With this demotool, I can easily create 4K intros just by writing GLSL. That being said, I wouldn’t recommend it to everyone, because you also have to write the music in GLSL.&lt;/p&gt;
    &lt;p&gt;In 2023, I released a 4K intro called “Architectural Shapeshifter” with Renard. For this piece, Renard was in charge of the concept and visuals, while I was in charge of the music and direction. We used minimalGL for this piece as well. It was the first time for Renard to create a 4K intro, but he was able to create it easily. We collaborated by tweaking the source code on GitHub and communicating via Discord. We exchanged ideas and suggestions on each other’s code, and it turned out to be a very efficient workflow.&lt;/p&gt;
    &lt;p&gt;There are many coders who can write GLSL in Japan, but not many of them take on 4K. So I’d love to collaborate more using minimalGL.&lt;/p&gt;
    &lt;p&gt;What’s hot in the Japanese demoscene these days? What category is popular? I noticed there was a demoparty called SESSIONS in Japan last year.&lt;/p&gt;
    &lt;p&gt;It seems like a lot of people are coming into the demoscene from shader culture centered around VRChat. The people I got to know at demoparties like SESSIONS were mostly active in VRChat. In particular, the event draw(); seems to have a strong influence, and many of the people who got interested in live coding or generative VJ through draw();’s audiovisual experience also developed an interest in the demoscene.&lt;/p&gt;
    &lt;p&gt;Live coding and generative VJ becoming a gateway into the demoscene sounds like a new path to me.&lt;/p&gt;
    &lt;p&gt;Yes, indeed. draw();’s main crew, Saina-san, purposefully aims for a crossover with demoscene culture, like SESSIONS, and this accelerates the influx. We’re really grateful for that.&lt;/p&gt;
    &lt;p&gt;I’m sure a person like that is supporting the demoscene in Japan and around the world. &lt;lb/&gt; OK, let’s go back to the production. Is there anything you do in everyday life to get inspired for your creations?&lt;/p&gt;
    &lt;p&gt;I check Pouet and Demozoo as much as possible to stay in the know about recent demoscene productions. If I ever stopped checking Pouet and Demozoo, I think that would be the end of me as a demoscener.&lt;/p&gt;
    &lt;p&gt;I also try to take in other cultures as well. Recently, I’ve been fascinated by the flashy audiovisual productions in pachinko and pachislot machines. They use dazzling visuals and music to stir up the spirit of gambling. These productions thoroughly pursue how to exploit the human reward system, all within machines that operate under very strict legal restrictions. In a way, I think this represents the highest peak of visual entertainment.&lt;/p&gt;
    &lt;p&gt;I also go for walks frequently. Especially walking around Tokyo late at night gives me a strong sense of urban life and social activity, and it inspires me a lot. “Domain“, a 64K intro I released at Tokyo Demo Fest 2021, was heavily inspired by night Tokyo. I find the concept of the night city very interesting, and I’d like to explore it further.&lt;/p&gt;
    &lt;p&gt;Which areas do you usually walk around?&lt;/p&gt;
    &lt;p&gt;I mainly walk around downtown. I can feel the rhythm of social activity through people’s movements, clothing, and buildings. It’s also very fun to walk around residential areas. When I imagine that this is someone’s everyday life, I can sense their presence through the scenery.&lt;/p&gt;
    &lt;p&gt;Do you have anything you always keep in mind when you create, like a routine or your own personal rule?&lt;/p&gt;
    &lt;p&gt;For my demo source code, I use Git for version control and share as much of the code as possible on GitHub. Basically, I publish my source code under the Creative Commons BY-NC 4.0 license, and users can adapt and use it freely for non-profit purposes. By publishing my source code, I allow other people to refer to my production methods. In fact, I’ve often heard that people have made demos based on my code. Getting more chances to discover other demosceners’ great works is valuable for me too, so I’ll continue to publish my source code.&lt;/p&gt;
    &lt;p&gt;Also, when I do version control on Git, I try to write commit logs—comments you can add to each version—as detailed as possible. Commit logs explain which part of the code I changed, and they also serve as a kind of production journal. In addition to information like what type of change I made and for what purpose, they help me recall my state of mind or what I was thinking during the creative process.&lt;/p&gt;
    &lt;p&gt;For programmers, is it a hassle to write detailed commit logs?&lt;/p&gt;
    &lt;p&gt;Commit logs aren’t considered a direct contribution to a program, just like READMEs or documentation. So, engineers who want to focus on coding and dislike communicating often don’t write them at all. Usually, detailed commit logs are recommended when you work with other people on business projects. However, even for a one-off piece of code written by a single person, I think we should consider how detailed we make the commit logs, because someone else—or even yourself—may end up reading them like archaeology.&lt;/p&gt;
    &lt;p&gt;Archaeology… that’s interesting. &lt;lb/&gt; Okay, let me go to the classic question: your favorite demo, a memorable demo, or a demo that changed your life… anything. Tell us about a demo, or demos that are special to you.&lt;/p&gt;
    &lt;p&gt;As I mentioned, “Emix” by Epoch is the demo I like the most. From the theme of each effect to the color grading, glitch effects, music, and direction, this piece defined what a demo should have, for me. Other pieces that helped define my standards include “cdak” by Quite &amp;amp; Orange, “Transformer 3” by Limp Ninja, and “Clean Slate” by Conspiracy. I put them together in my Pouet playlist “0b5vr’s bible”, if you’re interested.&lt;/p&gt;
    &lt;p&gt;Among many other forms of self-expression, why did you choose the demoscene? Or are you trapped by this culture? Tell me what’s so attractive about it.&lt;/p&gt;
    &lt;p&gt;The demoscene is a creative activity free from art as a capital asset or from commercial value. We mostly create and present pieces in a format that has little value in today’s society, and we purely inspire one another’s technical curiosity and the craving for expression. Also, the demoscene ecosystem is cooperative. Anyone can access demotools, ask questions to veterans, and start creating a piece. I respect the works, workflows, and ideas of active demosceners in the community, and that’s what motivates me to create something that earns their recognition.&lt;/p&gt;
    &lt;p&gt;On the other hand, due to the methods used in the demoscene, a lot of pieces look similar, and that’s clearly a weak point of the scene. If I only keep exploring the demoscene, I can’t expand my range of expression. As a creator, I think it’s important to look at various cultures and absorb many different methods of expression. The easy exchange of fresh inspiration is one of the features of the demoscene, so I’d like to take in many forms of expression both inside and outside the scene, and keep inspiring each other.&lt;/p&gt;
    &lt;p&gt;Is there anything you want to do in the future?&lt;/p&gt;
    &lt;p&gt;What I want to do most is live music performance using GLSL, as I mentioned. Seemingly, this format of live music with GLSL is currently performed only by me and “Rakuto-ice” san. So I want to perform more to develop my style further, and I hope more people will enjoy it.&lt;/p&gt;
    &lt;p&gt;And of course, I want to create demos like 64K, but right now I don’t have enough motivation or ideas. To find more motivation and inspiration, I think it’s about time I formed a demogroup.&lt;/p&gt;
    &lt;p&gt;Sounds like there’s much to look forward to! &lt;lb/&gt; Finally, your message for demosceners and demo fans out there, please.&lt;/p&gt;
    &lt;p&gt;For those of you who are not yet demosceners: &lt;lb/&gt; I’ve seen many people who have an interest in the demoscene but also fears about the culture itself. And it’s not just Japanese people, people in other countries have reacted that way too. Please don’t be afraid of us. If you are interested in creating something with a computer and having fun at a demoparty, then you are a demoscener. Whether you already have a medium of expression or not, if you join the party, you may naturally feel inspired to think, “I want to express myself too.” Demoparties like Tokyo Demo Fest, SESSIONS, and Revision have various compos, including simple programs, illustration, photography, music, along with the demo compo. Of course, if you want to create a demo, fellow creators will help you. We demosceners hope you will have fun in this scene.&lt;/p&gt;
    &lt;p&gt;For those who are already demosceners (including me): &lt;lb/&gt; Make 64K!&lt;/p&gt;
    &lt;p&gt;Thank you very much for answering my question, 0b5vr!&lt;/p&gt;
    &lt;p&gt;0b5vr’s works can be found on Pouet and Demozoo. Also, be sure to check his essay on the production of 0mix on Scrapbox, where he goes deeper into his thoughts on the demoscene and the creative process.&lt;/p&gt;
    &lt;p&gt;Thank you very much for reading this to the end!&lt;/p&gt;
    &lt;p&gt;—————-&lt;/p&gt;
    &lt;p&gt;In case you’re wondering what “demo” or “demoscene” is, better check out the well-made documentary called Moleman2. (and the director, M. Szilárd Matusik’s interview can be read in here.)&lt;/p&gt;
    &lt;p&gt;#1: q from nonoil/gorakubu is here. &lt;lb/&gt; #2: Gargaj from Conspiracy, Ümlaüt Design is here. &lt;lb/&gt; #3: Preacher from Brainstorm, Traction is here. &lt;lb/&gt; #4: Zavie from Ctrl-Alt-Test is here. &lt;lb/&gt; #5: Smash from Fairlight is here. &lt;lb/&gt; #6: Gloom from Excess, Dead Roman is here. &lt;lb/&gt; #7: kioku from System K is here. &lt;lb/&gt; #8: kb from Farbrausch is here. &lt;lb/&gt; #9: iq from RGBA is here.&lt;lb/&gt; #10: Navis from Andromeda Software Development is here.&lt;lb/&gt; #11: Pixtur from Still, LKCC is here.&lt;lb/&gt; #12: Cryptic from Approximate is here.&lt;lb/&gt; #13: 0x4015 aka Yosshin is here.&lt;lb/&gt; #14: Flopine from Cookie Collective is here. &lt;lb/&gt; #15: noby from Epoch, Prismbeings is here.&lt;/p&gt;
    &lt;p&gt;Why I’m interested in demoscene is explained in this article.&lt;lb/&gt; And for some of my other posts related to “demo and “demoscene” culture is here.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45137245</guid></item><item><title>I Ditched Docker for Podman (and You Should Too)</title><link>https://codesmash.dev/why-i-ditched-docker-for-podman-and-you-should-too</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45137525</guid></item><item><title>Relace (YC W23) Is Hiring for Code LLM's (SF)</title><link>https://news.ycombinator.com/item?id=45137554</link><description>&lt;doc fingerprint="25e92f79f76accfa"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Hey, we're a highly technical team building code generation models, and growing fast. We're looking for people who are down to scrap and love to build -- on both technical and GTM/Devrel roles.&lt;/p&gt;
      &lt;p&gt;If you have a Physics, Math, CS degree; and training fast codegen models is something that piques your interest, please email me directly at pzhou@relace.ai.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45137554</guid></item><item><title>Using Your Phone on Toilet May Give You Hemorrhoids: Study</title><link>https://www.nbcnews.com/health/health-news/phone-use-hemorrhoids-bathroom-social-media-scrolling-rcna228080</link><description>&lt;doc fingerprint="7f4703d92f8711d0"&gt;
  &lt;main&gt;
    &lt;p&gt;Of all the crappy ways smartphones have affected our health, this one is a real kick in the pants.&lt;/p&gt;
    &lt;p&gt;A first-of-its-kind study links excessive scrolling on the phone while sitting on the toilet with hemorrhoids.&lt;/p&gt;
    &lt;p&gt;(Insert poo emojis.)&lt;/p&gt;
    &lt;p&gt;But, seriously. Sitting on an open bowl offers no support for the pelvic floor. That puts pressure on veins in the rectum, making them swollen and inflamed.&lt;/p&gt;
    &lt;p&gt;“The longer you sit on the toilet, the worse it is for you,” said Dr. Trisha Pasricha, director of the Beth Israel Deaconess Medical Center’s Institute for Gut-Brain Research Institute in Boston. Pasricha is also an author of the study, which was published Wednesday in PLOS One.&lt;/p&gt;
    &lt;p&gt;And smartphones are designed to keep people fixated for as long as possible. “They’re completely consuming to us in ways that wasn’t happening to the casual bathroom reader in the 80s,” Pasricha said. “They could much more easily put the newspaper down and get up and leave.”&lt;/p&gt;
    &lt;p&gt;Pasricha and colleagues surveyed 125 adults just before they were about to have a routine colonoscopy to screen for colorectal cancer.&lt;/p&gt;
    &lt;p&gt;Eighty-three (66%) of the participants admitted to using their phones in the bathroom — mostly to catch up on news of the day and scroll through social media.&lt;/p&gt;
    &lt;p&gt;Gastroenterologists performing the colonoscopies looked for evidence of inflamed veins, or hemorrhoids. People who said they took their phone into the bathroom were 46% more likely to have hemorrhoids compared to the others.&lt;/p&gt;
    &lt;p&gt;The risk remained even when researchers accounted for other factors associated with hemorrhoids, including dietary fiber, exercise and constipation or straining while using the toilet.&lt;/p&gt;
    &lt;p&gt;Hemorrhoids aren’t necessarily dangerous, but they can be bothersome, itchy and even painful. They also bleed sometimes, understandably causing concern and leading to nearly 4 million doctor’s office and emergency department visits a year.&lt;/p&gt;
    &lt;p&gt;Over time, “pelvic floor dysfunction can also lead to incontinence, worsen constipation and be associated with rectal pain,” said Dr. Reezwana Chowdhury, an inflammatory bowel disorder specialist at the Johns Hopkins University School of Medicine. Chowdhury was not involved with the new research.&lt;/p&gt;
    &lt;p&gt;What’s more, microscopic particles from urine and feces are sent flying through the air when a toilet is flushed. Taking a phone into the bathroom, Chowdhury said, “is kind of gross.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Younger patients&lt;/head&gt;
    &lt;p&gt;In the new study, smartphone users in the bathroom tended to be younger, meaning adults in their 40s and 50s, versus people over age 60.&lt;/p&gt;
    &lt;p&gt;Dr. Robert Cima, a colorectal surgeon at the Mayo Clinic in Rochester, Minnesota, said he’s noticed an uptick in recent years of people coming in with hemorrhoids.&lt;/p&gt;
    &lt;p&gt;“I am seeing younger, earlier- and middle-aged people having more hemorrhoidal complaints, but I can’t tie it to smartphones,” said Cima, who was not involved with the new study. “Maybe it’s because they’re using smartphones or they have better access to care or they’re not eating appropriately.”&lt;/p&gt;
    &lt;head rend="h2"&gt;The 5-minute rule&lt;/head&gt;
    &lt;p&gt;The experts agreed that business on the toilet should take no longer than 5 minutes.&lt;/p&gt;
    &lt;p&gt;More than 37% of study participants who used a smartphone in the bathroom stayed for longer than that, compared to 7% of people who kept their phones out of the bathroom.&lt;/p&gt;
    &lt;p&gt;Pasricha and other experts do not advocate for taking a phone into the bathroom. If you absolutely must, set a timer.&lt;/p&gt;
    &lt;p&gt;“If the magic is not happening within five minutes, it’s not going to happen,” Pasricha said. “Take a breather and try again later.”&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45137656</guid></item><item><title>OpenAI eats jobs, then offers to help you find a new one at Walmart</title><link>https://www.theregister.com/2025/09/05/openai_jobs_board/</link><description>&lt;doc fingerprint="ee551855906695f9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;OpenAI eats jobs, then offers to help you find a new one at Walmart&lt;/head&gt;
    &lt;head rend="h2"&gt;Move over LinkedIn, Altman's crew wants a piece of the action&lt;/head&gt;
    &lt;p&gt;For those worried that AI is going to disrupt their jobs, OpenAI has the solution – take its certification and use a newly announced jobs board to find a new role.&lt;/p&gt;
    &lt;p&gt;On Thursday, Fidji Simo, OpenAI's head of applications (and former CEO of Instacart), announced the plan for workers to advertise themselves to the company's customers for new jobs. She said that while AI is going to shake up the employment market, who better to solve that problem than the people doing the shaking?&lt;/p&gt;
    &lt;p&gt;"AI will be disruptive. Jobs will look different, companies will have to adapt, and all of us – from shift workers to CEOs – will have to learn how to work in new ways," she said in a blog post.&lt;/p&gt;
    &lt;p&gt;"At OpenAI, we can't eliminate that disruption. But what we can do is help more people become fluent in AI and connect them with companies that need their skills, to give people more economic opportunities."&lt;/p&gt;
    &lt;p&gt;Simo's plan is that workers should take courses in tech literacy at its OpenAI Academy and then advertise themselves on a forthcoming jobs platform. She said the company has already signed up some big names to the scheme, although maybe the choice of Walmart as an early adopter might not encourage IT admins in their future career paths.&lt;/p&gt;
    &lt;p&gt;OpenAI declined to comment further on the plans.&lt;/p&gt;
    &lt;p&gt;"At Walmart, we know the future of retail won't be defined by technology alone – it will be defined by people who know how to use it," Walmart US CEO John Furner said in a canned statement.&lt;/p&gt;
    &lt;p&gt;"By bringing AI training directly to our associates, we're putting the most powerful technology of our time in their hands – giving them the skills to rewrite the playbook and shape the future of retail."&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Biased bots: AI hiring managers shortlist candidates with AI resumes&lt;/item&gt;
      &lt;item&gt;OpenAI wants to bend copyright rules. Study suggests it isn't waiting for permission&lt;/item&gt;
      &lt;item&gt;White House bans 'woke' AI, but LLMs don't know the truth&lt;/item&gt;
      &lt;item&gt;Microsoft unveils home-made ML models amid OpenAI negotiations&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The OpenAI Academy has had some big-name sign-ups, particularly the respected computer science teachers at Georgia Tech, but Simo says that the business is pushing hard to build on a White House plan to make AI a core skill for American workers – so long as the engines they use aren't too woke.&lt;/p&gt;
    &lt;p&gt;What Simo didn't mention directly is that getting into the jobs market would bring the company into competition with Microsoft, one of its biggest backers. LinkedIn is the primary Western jobs site and OpenAI setting up a competitor might get in the way of cordial relations.&lt;/p&gt;
    &lt;p&gt;Microsoft had no comment on the matter, but OpenAI appears to be only scooping the AI cream, and whatever else floats to the top of the market, on its proposed employment register. There's also the question of whether or not the skills OpenAI is shilling will have any validity in the actual jobs market.&lt;/p&gt;
    &lt;p&gt;Meanwhile, CEO Sam Altman and most of the tech glitterati attended a dinner hosted by First Lady Melania Trump to discuss AI last night. Elon Musk wasn't there, but insists he was invited. ®&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45137658</guid></item><item><title>You're absolutely Right!</title><link>https://absolutelyright.lol/</link><description>&lt;doc fingerprint="5367b53d7a58fab5"&gt;
  &lt;main&gt;
    &lt;p&gt;I'm absolutely right! Claude Code said it 0 times today Absolutely right Just right&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45137802</guid></item><item><title>Lava RGB</title><link>https://amaiorano.io/2025/09/03/lava-rgb.html</link><description>&lt;doc fingerprint="3a061475512553f8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Lava RGB&lt;/head&gt;
    &lt;p&gt;Back in 2021, I installed an NESRGB on a front loader, which has been working great. For years now, NESRGB was pretty much the only mod available to get RGB out of the NES; but recently, a new mod known as Lava RGB came on the scene from a company in China. I bought one, and in this post I go over how I installed it on another front loader.&lt;/p&gt;
    &lt;p&gt;I bought the Lava RGB mod off AliExpress from Lava FC Store, specifically from this listing (although I suspect these links will not survive very long). The “color” I bought is the one named “NES senior VER 2.0”, which includes both the mod board itself, along with a replacement power A/V module. Version 2.0 adds a bunch of new features on top of the previous version 1.2, such as 24-bit color output, 8 integrated palettes, the ability to reset the console and change palettes using controller 1, an OSD that displays the palette name when switching them, and a micro usb port that allows for firmware upgrades in the future.&lt;/p&gt;
    &lt;p&gt;Compared to the NESRGB, Lava RGB 2.0 is definitely a worthy contender. The palette switching OSD, and ability to easily update firmware, are improvements, and I wonder if future firmware updates might add more OSD-based options. However, one thing Lava RGB does not do is process and output audio like the NESRGB. Although not a huge deal, it does mean audio needs to be tapped from the main audio output circuit. This is probably why the latest version now offers a power A/V replacement PCB which routes audio output to its Saturn-style DIN connector.&lt;/p&gt;
    &lt;p&gt;Although the power module includes a Saturn-style DIN connector, I don’t own a compatible cable, and prefer to use VGA cables. So for my install, I decided to add a SNES multiout port.&lt;/p&gt;
    &lt;head rend="h2"&gt;Parts #&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Lava RGB 2.0 mod board and power module - $81.37 CAD&lt;/item&gt;
      &lt;item&gt;Two 20 rounded pin headers - $16 CAD for ten on Amazon&lt;/item&gt;
      &lt;item&gt;SNES multiout parts (more on that later)&lt;/item&gt;
      &lt;item&gt;47K resistor for expansion audio&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The Lava RGB kit took about a week to arrive, and was packaged decently well:&lt;/p&gt;
    &lt;head rend="h2"&gt;The Build #&lt;/head&gt;
    &lt;head rend="h3"&gt;Prepare NES main board #&lt;/head&gt;
    &lt;head rend="h4"&gt;Remove PPU #&lt;/head&gt;
    &lt;p&gt;I picked a front loader with an NES-CPU-10 main board that was in excellent shape. I took it apart, and extracted the main board from the shell:&lt;/p&gt;
    &lt;p&gt;First order of business was to desolder the PPU:&lt;/p&gt;
    &lt;p&gt;I started by adding fresh solder, using flux to make it flow into the existing solder:&lt;/p&gt;
    &lt;p&gt;I then used my trusty desoldering pump to remove all the solder from the pins:&lt;/p&gt;
    &lt;p&gt;Using a trick I learned from Voultar, I used my finger nails to move each pin back and forth until they moved freely. For the usual more stubborn pins on the thicker ground plane, I added more solder and desoldered again until I was able to move the pins. With that, I extracted the PPU:&lt;/p&gt;
    &lt;head rend="h4"&gt;Remove power module #&lt;/head&gt;
    &lt;p&gt;Next I needed to remove the original power module to replace it with the new one:&lt;/p&gt;
    &lt;p&gt;This can be pretty challenging, but with the right tools and technique, it’s not too bad. I started by adding flux to the four large pins that anchor the power module to the main board and use my desoldering gun to remove most of the solder:&lt;/p&gt;
    &lt;p&gt;Then I use wicking braid to remove the solder lodged around the pins. I added a little more solder and flux to the pins until I was able to wick away most of the remaining solder:&lt;/p&gt;
    &lt;p&gt;At this point, the gaps around the pins are pretty clear:&lt;/p&gt;
    &lt;p&gt;The next trick is to desolder the 5 pins visible above - but not from this side, but rather from inside the power module. This is actually necessary for properly installing the new power module that comes with the Lava RGB kit. I pried off the metal plate:&lt;/p&gt;
    &lt;p&gt;I switched tips on my desoldering gun to one with a larger pitch, and desoldered the 5 pins:&lt;/p&gt;
    &lt;p&gt;With that done, I grabbed hold of the power module with one hand, while holding the main board with the other, and rocked the power module back and forth until it came free:&lt;/p&gt;
    &lt;p&gt;We’re left with the 5 pins still attached to the main board, ready to be soldered to the new power module later:&lt;/p&gt;
    &lt;head rend="h4"&gt;Push main board capacitors flat #&lt;/head&gt;
    &lt;p&gt;As with the NESRGB, the caps on the main board need to be pushed down flat for the Lava RGB PCB to fit:&lt;/p&gt;
    &lt;p&gt;Normally this is simply a matter of pushing the caps down while heating the vias with a soldering iron. However, as I have a bunch of NES cap kits that I ordered from Console5, I decided to replace them:&lt;/p&gt;
    &lt;p&gt;I desoldered the three caps:&lt;/p&gt;
    &lt;p&gt;And replaced them with the new ones, making sure to match the capacitance values, and ensuring the voltage rating is equal or above the original one. When placing the caps, I laid them flat before soldering them in:&lt;/p&gt;
    &lt;head rend="h3"&gt;Solder wires #&lt;/head&gt;
    &lt;p&gt;At this point, I decided to solder the ends of the Lava RGB wire connector to the power module and to the main board:&lt;/p&gt;
    &lt;p&gt;What’s nice is that the order of the pads on the power module and on the mod board match, so it’s easy to solder the first eight wires:&lt;/p&gt;
    &lt;p&gt;I soldered the eight wires to the pads:&lt;/p&gt;
    &lt;p&gt;The remaining four wires are used to allow controller 1 to perform an in-game reset (IGR) as well as palette swapping using key combos. IGR is performed by holding Select for about 2 seconds, then pressing A; while for palette swapping, you hold Select for 2 seconds and press Up on the dpad. To make this work, the RST wire needs to be wired to the reset line on the main board (where the actual Reset button is wired to), while the CLK, DATA, and LATCH pins need to be wired to their respective pins on the player 1 controller input lines.&lt;/p&gt;
    &lt;p&gt;I put this handy image together to identify the pins to solder to:&lt;/p&gt;
    &lt;p&gt;Noting the colors of each pin, I first soldered the RST line:&lt;/p&gt;
    &lt;p&gt;Then I soldered CLK, DATA, and LATCH. Note that DATA and LATCH are not in the same order as on the Lava RGB PCB:&lt;/p&gt;
    &lt;head rend="h3"&gt;Power module #&lt;/head&gt;
    &lt;p&gt;As already mentioned, for my install I planned to add a SNES-style multiout. Rather than grab these connections from the Lava RGB mod board itself, I decided to get them from the power module since it’s closer to where the port would be installed. For this, I used an 8 wire ribbon cable:&lt;/p&gt;
    &lt;p&gt;In retrospect, I should have made this cable longer, as I was limited to where I could place the multiout. Anyway, I soldered the cable to the power module. Conveniently, the power module PCB offers two ways to connect wires to it, pads and vias, so I used the vias for this:&lt;/p&gt;
    &lt;p&gt;Note that two of the wires, the grey and the purple, are not soldered yet. One of these will be used for 5V, and the other for audio, both of which will be wired later to the PV and PA pins of the 5 pin connector.&lt;/p&gt;
    &lt;p&gt;I also soldered a wire to GND, and soldered it to the ground plane of the main board:&lt;/p&gt;
    &lt;p&gt;At this point, I loosely positioned the PCBs to get a sense for where I was heading:&lt;/p&gt;
    &lt;p&gt;Next, I soldered the power module to the five pins coming from the main board:&lt;/p&gt;
    &lt;p&gt;And now I could solder the 5V and audio wires to PV and PA respectively:&lt;/p&gt;
    &lt;p&gt;This is what everything looked like at this point:&lt;/p&gt;
    &lt;head rend="h3"&gt;Mod board #&lt;/head&gt;
    &lt;p&gt;Next up was installing the mod board:&lt;/p&gt;
    &lt;p&gt;As can be seen above, the kit includes two 20 square pin headers. Their official instructions expect you to solder the mod board PCB directly to the NES main board using these square pin headers, making sure to first solder the round pin socket onto the mod board itself so that the PPU can be inserted into it. The apparent advantage here is being able to swap out the PPU, but with the major disadvantage that the mod board cannot be removed from the main board, making it difficult to service the mod in the future. So instead of this, I did as is usually done with the NESRGB mod: solder the socket to the main board, and the PPU directly to the mod board. For this, I needed to either get a socket that works with the included square pin headers, or rounded pin headers - I chose the latter.&lt;/p&gt;
    &lt;p&gt;I soldered the socket to the main board, making sure to line up the notch:&lt;/p&gt;
    &lt;p&gt;I inserted the two rounded pin headers I purchased separately into the sockets, longer pins down:&lt;/p&gt;
    &lt;p&gt;Then laid the PCB over the pins, making sure to insert them into the right vias, and soldered them in place:&lt;/p&gt;
    &lt;p&gt;I carefully detached the mod board from the socket by rocking each edge back and forth. Some care has to be taken here as these rounded pins can bend and break very easily:&lt;/p&gt;
    &lt;p&gt;Before soldering the PPU to the mod board, I use my flush cutters to cut down the one set of pins that would be underneath the PPU, and then touched them up with the soldering iron. Although not strictly necessary, this allows the PPU to lay flat on the PCB:&lt;/p&gt;
    &lt;p&gt;I inserted the PPU onto the mod board, making sure to line up the notch, and soldered it in place:&lt;/p&gt;
    &lt;p&gt;Next, I soldered the wire connector to the mod board:&lt;/p&gt;
    &lt;p&gt;Now I carefully inserted the mod board back into the socket, making sure to line up the socket pins, while also routing the wires down and to the side, as there isn’t much space between the connector and the expansion port (note that we’re seeing the reflection of the wires on the edge of the expansion port):&lt;/p&gt;
    &lt;head rend="h3"&gt;First test #&lt;/head&gt;
    &lt;p&gt;At this point, I could finally test the mod out. I hadn’t soldered the multiout yet, and I didn’t have a way to hook up the Saturn-style DIN, so I couldn’t test RGB, but I could test composite. So I loosely put everything together and composite video and audio worked perfectly:&lt;/p&gt;
    &lt;head rend="h3"&gt;Multiout #&lt;/head&gt;
    &lt;p&gt;For the SNES multiout, I 3D printed Laser Bear’s Multiout Panel Mount Snap In Connector, and used PCBWay to print The Real Pheonix’s PCB. I also needed to order the right #2 x 1/2” screw. Alternatively, one could order the parts directly from Laser Bear and The Real Phoenix. Anyway, here are the parts:&lt;/p&gt;
    &lt;head rend="h4"&gt;Solder ribbon to multiout PCB #&lt;/head&gt;
    &lt;p&gt;I mapped out the pins I’d need to solder to, along with the specific color wires from my ribbon cable:&lt;/p&gt;
    &lt;p&gt;I soldered the ribbon cable to the multiout PCB:&lt;/p&gt;
    &lt;p&gt;For testing, I inserted the PCB into the 3D printed frame and screwed it in:&lt;/p&gt;
    &lt;head rend="h4"&gt;Second test #&lt;/head&gt;
    &lt;p&gt;Using an old cable I made, I gave it a quick test:&lt;/p&gt;
    &lt;p&gt;It worked! Although note that the colors aren’t quite right. It turned out that my cable was defective - green wasn’t being passed through. I later used a better cable, and all was fine.&lt;/p&gt;
    &lt;head rend="h4"&gt;Cut shell for multiout connector #&lt;/head&gt;
    &lt;p&gt;Using the 3D printed bracket, I marked off where I would need to cut into the shell to fit the 3D printed connector:&lt;/p&gt;
    &lt;p&gt;I made sure to position the hole as to not interfere with the posts. I actually wanted to position it more to the right, but as already mentioned, I had cut the ribbon cable too short, and didn’t feel like redoing it.&lt;/p&gt;
    &lt;p&gt;Next came the most annoying part for me, since I still don’t own a proper dremel: I used a drill, flush cutters, and filing tools to cut out the hole:&lt;/p&gt;
    &lt;p&gt;Finally, after way too long, the connector fit in perfectly:&lt;/p&gt;
    &lt;p&gt;I used the 3D printed clip to hold the connector in place:&lt;/p&gt;
    &lt;p&gt;The fit was a little snug considering that raised portion inside, but thankfully it was fine:&lt;/p&gt;
    &lt;head rend="h3"&gt;Expansion audio #&lt;/head&gt;
    &lt;p&gt;Before closing everything up, I also wanted to enable expansion audio. I decided to use Voultar’s PCB because this is what I had done for my NESRGB install. What I didn’t realize at the time was that this wasn’t necessary at all since the Lava RGB doesn’t process audio like the NESRGB. I’ll show my misteps here, and how I corrected it, but this could definitely have been simpler!&lt;/p&gt;
    &lt;p&gt;I soldered a 1K and 47K resistor to the PCB:&lt;/p&gt;
    &lt;p&gt;I positioned the PCB on pins 2 and 9 on the expansion port pins and soldered the PCB in place:&lt;/p&gt;
    &lt;p&gt;It was at this point that I tested expansion audio and realized it wasn’t working. After chatting with Toxic_Tripod0 on Discord, I realized my mistake. To enable expansion audio without NESRGB, all that’s needed is a 47K resistor between pins 3 and 9. This PCB is expressly designed to route expansion audio to the NESRGB for processing. At this point, I could have removed the PCB, but I realized I could fix this relatively easily by removing the 1K resistor, and soldering a wire from the exposed pad to pin 3:&lt;/p&gt;
    &lt;p&gt;As required, pins 3 and 9 were now connected via a 47K resistor:&lt;/p&gt;
    &lt;p&gt;I tested expansion audio, and it worked! If I were to redo this, I’d probably just connect a 47K throughole resistor between pins 3 and 9 instead.&lt;/p&gt;
    &lt;head rend="h3"&gt;Closing everything up #&lt;/head&gt;
    &lt;p&gt;It was finally time to put everything back together:&lt;/p&gt;
    &lt;p&gt;I attached the power and controller cables to the main board:&lt;/p&gt;
    &lt;p&gt;I inserted the multiout PCB into the connector and screwed it in:&lt;/p&gt;
    &lt;p&gt;I reattached the cartridge slot to the main board, and carefully inserted the main board into the bottom shell. The new power module is only held by those 5 pins to the main board, so some care has to be taken when fitting it in place:&lt;/p&gt;
    &lt;p&gt;I decided not to put in the RF shielding as it’s not really necessary, and would pinch and possibly short the reset and controller 1 wires used for IGR and palette switching. I put in all the screws, including the ones in the posts used for the RF shielding:&lt;/p&gt;
    &lt;p&gt;I screwed on the top shell, and was finally done! Here it is in all its glory:&lt;/p&gt;
    &lt;head rend="h3"&gt;Final test #&lt;/head&gt;
    &lt;p&gt;With everything back together, I hooked it up using my SNES2VGA with a VGA cable to my gbs-control:&lt;/p&gt;
    &lt;p&gt;Looking good in RGB:&lt;/p&gt;
    &lt;p&gt;Interestingly, the colors don’t exactly match the composite output:&lt;/p&gt;
    &lt;p&gt;Using the palette switching control (hold select + Up on dpad), I cycled through the palettes, which displays the name of the palette for a few seconds. Here are some samples:&lt;/p&gt;
    &lt;head rend="h2"&gt;Thoughts #&lt;/head&gt;
    &lt;p&gt;I’ve been playing with this modded NES for a few days now, and it works and looks great. The Lava RGB 2.0 is definitely a worthy contender to the NESRGB, especially for the price. Although it doesn’t process audio, tapping the NES-produced audio out from the new power module works fine, and the sound is very clean.&lt;/p&gt;
    &lt;p&gt;It’s worth noting that this mod doesn’t require the new power module at all, especially in my case as I added the SNES-style multiout. However, for those who don’t want the multiout, and want a no-cut mod, this is a nice way to do it. In my case, the power module made it easier to wire up the multiout, and possibly improved the audio output as the older power modules are known to add interference to the audio signal.&lt;/p&gt;
    &lt;p&gt;I just wanted to give a quick shout out to the folks on the ConsoleMods discord, especially Toxic_Tripod0, manadream, and RobStrange for their help.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45137914</guid></item><item><title>Data Modeling Guide for Real-Time Analytics with ClickHouse</title><link>https://www.ssp.sh/blog/practical-data-modeling-clickhouse/</link><description>&lt;doc fingerprint="77d1aa33699f5292"&gt;
  &lt;main&gt;
    &lt;p&gt;Querying billions of weather records and getting results in under 200 milliseconds isn’t theory; it’s what real-time analytics solutions provide. Processing streaming IoT data from thousands of sensors while delivering real-time dashboards with no lag is what certain business domains need. That’s what you’ll learn at the end of this guide through building a ClickHouse-modeled analytics use case.&lt;/p&gt;
    &lt;p&gt;You’ll learn how to land data in ClickHouse that is optimized for real-time data applications, going from basic ingestion to advanced techniques like statistical sampling, pre-aggregation strategies, and multi-level optimization. I’ve included battle-tested practices from Rill’s years of implementing real-time analytics for customers processing everything from financial transactions and programmatic advertising to IoT telemetry.&lt;/p&gt;
    &lt;p&gt;This article is for data engineers and practitioners who want to build analytics that deliver sub-second query responses, and who want to unlock ClickHouse’s full potential for real-time analytics demands. By the end, you’ll have a playbook for ClickHouse data modeling plus a working example that ingests NOAA weather data from S3 and visualizes it with a single configuration file.&lt;/p&gt;
    &lt;p&gt;If you haven’t heard of ClickHouse or are wondering why it’s becoming the go-to choice for real-time analytics, here’s what sets it apart from traditional data warehouses.&lt;/p&gt;
    &lt;p&gt;ClickHouse achieves blazingly fast analytical performance through column-oriented storage that reads only relevant data, advanced compression (LZ4/ZSTD), and vectorized query execution that maximizes CPU capabilities. Its sparse primary indexing with data skipping eliminates irrelevant data blocks, while the C++ implementation avoids JVM overhead for bare-metal performance.&lt;/p&gt;
    &lt;p&gt;These innovations enable sub-second query responses on billions of rows, performance that would take minutes or hours in traditional data warehouses. Storage efficiency has a direct impact on both cost and speed at scale, making ClickHouse the ideal foundation for the real-time analytics modeling strategies covered in this article.&lt;/p&gt;
    &lt;head rend="h2"&gt;Data Flow for Real-time Analytics&lt;/head&gt;
    &lt;p&gt;Before we see a concrete example of modeling data with ClickHouse, specifically for real-time and online analytical processing (OLAP) cubes, it’s important to understand the flow of data, its trade-offs, and payoffs. Where Does Data Come From, and Where Does It Go?&lt;/p&gt;
    &lt;head rend="h3"&gt;Data Flow is Knowing the Requirements&lt;/head&gt;
    &lt;p&gt;Data flows from sources to analytics. In the simplest terms, we have sources of data, a transformation with aggregations, and the visualization. Most often, the data should travel from source to visualization as quickly as possible and respond fast to queries.&lt;/p&gt;
    &lt;p&gt;Most data flow modeling is handled in the transformation phase. Connecting to a source, whether it is an S3 or R2 bucket, a relational database like Postgres or others, or visualization on an analytical tool. We need to aggregate and combine the data to extract business insights out of masses of information to answer the questions our business needs to answer.&lt;/p&gt;
    &lt;p&gt;Obviously data modeling can get much more involvedâlooking at modeling open data stack, or looking at The State of Data Engineering and its challenges. However, modeling data has nothing to do with choosing tools in the first place. If we have the best tools but a bad data flow, it’s not worth much.&lt;/p&gt;
    &lt;p&gt;The below illustration shows where the modeling part actually happens:&lt;/p&gt;
    &lt;p&gt;Most often, modeling is more about offline, off-computer, and real conversations with the business people involved than figuring it out ourselves. We have to answer the questions “What’s needed on a dashboard?” “Which numbers are even possible with the data at hand?” and “How can we get them, join and aggregate them with other data from the company to get the best possible insights?”&lt;/p&gt;
    &lt;p&gt;Shifting Left is another important concept related to data modeling. It means that the better we model and structure data at the source (left side of the data pipeline), the more efficient and accurate our analytics become downstream (right side). When raw data is properly typed, deduplicated, and structured early in the pipeline, we avoid expensive transformations later and reduce the risk of data quality issues propagating through our entire analytics stack. This is especially critical for real-time systems where you can’t afford lengthy batch cleanup processes.&lt;/p&gt;
    &lt;head rend="h3"&gt;Real-Time Analytics: A Tradeoff&lt;/head&gt;
    &lt;p&gt;Real-time analytics specifics are always a tradeoff between data freshness and accuracy.&lt;/p&gt;
    &lt;p&gt;The moment the data is loaded, it is outdated. But to avoid pulling the latest all the time, we need to make sure the data is consistent across tables, meaning related data is pulled too when we refresh, so that it’s cohesive and accurate.&lt;/p&gt;
    &lt;p&gt;In the end, you need a set of metrics that are business critical for your organization. Some businesses like IoT and e-commerce don’t need all data, but specific data such as IP or location to identify quickly where users come from. Use cases like this especially need and benefit from low-latency query responses. Data needs to load near real-time and needs to deliver fast, flexible access to core analytics.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Payoff of Great Data Flow&lt;/head&gt;
    &lt;p&gt;The payoffs of modeling are higher performance, insights on consistent data, and lower cost as we do not need to query production with a reduced aggregated data set and without the need for heavy overnight ETL jobs. We need less storage for aggregated data and get even faster query responses.&lt;/p&gt;
    &lt;p&gt;Imagine a fast river that flows constantly with great volume. This is what good data will look like when new data is coming in steady and accurate.&lt;/p&gt;
    &lt;p&gt;Let’s see that in action with ClickHouse real-time modeling.&lt;/p&gt;
    &lt;head rend="h2"&gt;ClickHouse Modeling Strategies: From Theory to Practice&lt;/head&gt;
    &lt;p&gt;Now that we understand the data flow requirements for real-time analytics such as fast ingestion, efficient transformation, and sub-second query responses, let’s explore how ClickHouse specifically addresses these challenges through its modeling approaches.&lt;/p&gt;
    &lt;p&gt;Remember our data flow: &lt;code&gt;Sources â Transformation &amp;amp; Aggregation â ClickHouse â Visualization&lt;/code&gt;. The key insight is that ClickHouse doesn’t only serve as storage but can handle much of the transformation and aggregation work directly, eliminating traditional ETL bottlenecks.&lt;/p&gt;
    &lt;p&gt;ClickHouse offers several strategies to optimize this flow, each addressing different aspects of the freshness-accuracy tradeoff we discussed:&lt;/p&gt;
    &lt;p&gt;For Minimizing Query-Time Complexity:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Denormalizing data: Move joins from query time to insert time by flattening related tables into a single structure (One Big Table, approach). This trades some storage efficiency for dramatic query performance gains. Especially recommended for tables that change infrequently and not for high-cardinality or many-to-many relationships.&lt;/item&gt;
      &lt;item&gt;Dictionaries: Handle dimension lookups through in-memory key-value structures, perfect for enriching streaming data with relatively static reference information.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For Real-Time Aggregation:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Incremental Materialized Views: Shift computational cost from query time to insert time, computing aggregates as data arrives rather than when users request it. Most suitable for real-time aggregations and transformations, especially for single-table aggregations or simple enrichments with static dimension tables.&lt;/item&gt;
      &lt;item&gt;Refreshable Materialized Views: Handle complex multi-table joins and transformations on a scheduled basis, suitable when real-time freshness isn’t critical. They are also useful for batch denormalization and building view dependencies (like DAGs) and can be scheduled with dbt, Airflow, and other data orchestrators. Refreshable MVs are similar to materialized views in traditional OLTP databases.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The fundamental principle underlying all these approaches is minimizing joins at query time. In traditional OLAP cubes, much of this complexity is handled by pre-built logical modeling layers. ClickHouse takes a different approach where you explicitly choose where in the pipeline to handle complexity based on your specific performance and freshness requirements.&lt;/p&gt;
    &lt;head rend="h3"&gt;Modeling Data with ClickHouse&lt;/head&gt;
    &lt;p&gt;An interesting new dimension is modeling multi-dimensional cubes. What’s the difference, you might ask? Besides the difference between traditional OLAP cubes and modern OLAP cubes, which first stores measures and joins within the cube and pre-processes, whereas modern real-time databases systems like ClickHouse, Pinot, Druid, and StarRocks do not. This is at first glance a disadvantage, but on the other hand an advantage, that we can change our queries at query time without re-processing needed.&lt;/p&gt;
    &lt;p&gt;What else do we need to know about OLAP data modeling? We need to understand that OLAP cubes store data in a column-oriented (or columnar) way. This is important to the ClickHouse architecture. Unlike traditional row-oriented databases that store all values in a row together, ClickHouse stores all values that belong to a single column together. This also influences how we model our data and enables fast analytical queries based on a few columns out of potentially hundreds. ClickHouse only needs to read the data files for those specific columns, drastically reducing disk I/O compared to reading entire rows.&lt;/p&gt;
    &lt;p&gt;Usually when we model a multi-dimensional cube, we deal with facts and dimensions. The queries are optimized for sub-second response times and the users might be our clients or business users; there might only be one visualization layer in between such as a BI tool or Excel. This means it’s mission-critical.&lt;/p&gt;
    &lt;p&gt;In ClickHouse and in general with cubes, we are working with dimensions, measures, and operators that operate on time aggregations and dimensions. You want rollups and drill-downs along multiple axes, with subtotals and potentially pivots.&lt;/p&gt;
    &lt;p&gt;SQL can sometimes be hard work to get right as we constantly pivot along different dimensions, and there are joins involved, different granularity, and all of a sudden, you accidentally duplicate your counting by adding a wrong dimension.&lt;/p&gt;
    &lt;p&gt;So how do we effectively model ClickHouse to get real-time data from start to end with no more than needed effort?&lt;/p&gt;
    &lt;p&gt;In the following example, we’ll see several of these strategies in action: denormalization through data transformation during ingestion, partitioning for query optimization, and incremental processing for real-time updates.&lt;/p&gt;
    &lt;p&gt;There’s no logical modeling layer like in SQL Server Analysis Services (SSAS), meaning we need to model our data outside of ClickHouse to create pre-defined optimized tables to query with the methods explained above such as materialized views, small lookup tables, or denormalized tables.&lt;/p&gt;
    &lt;head rend="h2"&gt;Demo: Using S3 -&amp;gt; ClickHouse -&amp;gt; Rill&lt;/head&gt;
    &lt;p&gt;But we can design and model the data flow easily to source data from an S3/R2 bucket, load from Kafka, or other streaming data sources.&lt;/p&gt;
    &lt;p&gt;Let’s have a look at a practical example where we ingest data from S3, using ClickHouse as the engine to do transformation and aggregation, ingesting the data incrementally with the built-in refresh by ClickHouse, and visualizing with Rill.&lt;/p&gt;
    &lt;p&gt;Watch the short video for the interactive version - below we are going to explain each config step by step.&lt;/p&gt;
    &lt;p&gt;Find everything shown in this demo at clickhouse-modeling-rill-example.&lt;/p&gt;
    &lt;head rend="h3"&gt;Ingest and Transformation&lt;/head&gt;
    &lt;p&gt;This example represents an end-to-end data project, loading NOAA weather data that gets updated from S3 via ClickHouse and visualized in Rill. All within a single YAML shown here (expand to see the full code):&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;Source code and full project can be found on GitHub at clickhouse-modeling-rill-example&lt;/p&gt;
    &lt;p&gt;So what happens here?&lt;/p&gt;
    &lt;p&gt;This YAML configuration demonstrates how ClickHouse can serve as both your data transformation engine and storage layer, eliminating the need for traditional ETL tools.&lt;/p&gt;
    &lt;p&gt;Data ingestion and transformation in one step: The &lt;code&gt;sql&lt;/code&gt; section directly reads compressed CSV files from S3 using ClickHouse’s native &lt;code&gt;s3()&lt;/code&gt; function. Rather than requiring a separate ETL process to extract, clean, and load the data, ClickHouse performs all transformations during the ingestion process itself. The query handles data type conversions (like converting temperature readings from tenths to actual values with &lt;code&gt;toFloat32(c4) / 10.0&lt;/code&gt;), creates derived fields for analytics (such as extracting year, month, and day components), and applies data quality measures using &lt;code&gt;COALESCE&lt;/code&gt; to handle null values.&lt;/p&gt;
    &lt;p&gt;MergeTree is your built-in ETL engine: The &lt;code&gt;engine: MergeTree&lt;/code&gt; specification transforms ClickHouse into what you can think of as “local ETL without the need for an ETL tool.” MergeTree engines are specifically designed for high data ingest rates and massive data volumes. When new data arrives, ClickHouse creates table parts that are automatically merged by background processes, maintaining optimal query performance without manual intervention. This means your data pipeline becomes very lightweight and self-managing â new weather data gets ingested, transformed, and optimized automatically based on defined cron triggers.&lt;/p&gt;
    &lt;p&gt;Multi-level optimization strategy: This example demonstrates ClickHouse’s ability to optimize at multiple levels simultaneously. At the query level, the &lt;code&gt;order_by: (measurement_date, station_id, measurement_type)&lt;/code&gt; ensures that data is physically sorted for optimal access patterns typical in weather analytics. This is very important to your end query and how your response will perform. At the storage level, the &lt;code&gt;partition_by: __partition&lt;/code&gt; creates year-based partitions that enable ClickHouse to skip entire data segments when querying specific time ranges. The incremental strategy with &lt;code&gt;partition_overwrite&lt;/code&gt; means only changed partitions are reprocessed, not the entire dataset.&lt;/p&gt;
    &lt;p&gt;Real-time processing without complexity: The &lt;code&gt;refresh: cron: "0 * * * *"&lt;/code&gt; configuration creates an automated pipeline that updates hourly without requiring external orchestration tools like Airflow or Dagster. ClickHouse handles the scheduling, dependency management, and incremental processing internally.&lt;/p&gt;
    &lt;p&gt;Further optimizations are TTL (time-to-live), which deletes data after a defined retention period such as &lt;code&gt;hour + INTERVAL 90 DAY DELETE&lt;/code&gt;, or we can apply further table features such as:&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;These settings optimize both deduplication behavior with projections and accelerate automatic data lifecycle management through more frequent TTL merges, ensuring expired data is cleaned up promptly rather than waiting for the default 4-hour intervals.&lt;/p&gt;
    &lt;p&gt;ClickHouse provides built-in insert deduplication for retry scenarios by creating unique &lt;code&gt;block_id&lt;/code&gt; hashes for each inserted block. Duplicate blocks are skipped automatically.&lt;/p&gt;
    &lt;p&gt;Key settings are &lt;code&gt;insert_deduplicate=1&lt;/code&gt; enables block-level deduplication (default for replicated tables) and &lt;code&gt;insert_deduplication_token&lt;/code&gt; provides custom deduplication keys for explicit control. This is block-level deduplication at insert time, unlike ReplacingMergeTree’s row-level deduplication during merges. For more details, see the deduplication token documentation.&lt;/p&gt;
    &lt;head rend="h3"&gt;Visualizing in Rill&lt;/head&gt;
    &lt;p&gt;The above YAML is the source &lt;code&gt;noaa-weather.yaml&lt;/code&gt; and when you start rill after cloning the example above with:&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;You can click on the source, and the data will be automatically loaded from the S3 source, and the above-defined transformations and conversions will be made:&lt;/p&gt;
    &lt;head rend="h3"&gt;What Did We Learn so Far?&lt;/head&gt;
    &lt;p&gt;To recap this example, ClickHouse offers a fundamentally different approach compared to other real-time databases like Druid, where most heavy lifting must be done ahead of ingestion using Spark or other compute engines. With ClickHouse, the engine itself handles complex aggregations and optimizations at ingestion time, during query execution, and even post-ingestion.&lt;/p&gt;
    &lt;p&gt;Interestingly, Rill automatically spawns up ClickHouse and orchestrates the incremental loads and ingests data. If you will, Rill is doing orchestration work.&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;ClickHouse provides multiple levels of optimization that can be applied independently or combined:&lt;/p&gt;
    &lt;p&gt;Query-Level Optimizations:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Simple GROUP BY aggregations that process data from milliseconds to hours on the fly.&lt;/item&gt;
      &lt;item&gt;Data partitioning: Data is organized into directories based on partition keys for parallel processing.&lt;/item&gt;
      &lt;item&gt;Filter and partition pushdown: ClickHouse’s optimizer pushes filters closer to the data source and skips irrelevant partitions, dramatically reducing I/O.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Storage-Level Pre-Aggregation Optimizations:&lt;lb/&gt; 4. Incremental materialized views shift computation cost from query time to insert time for faster SELECT queries.&lt;lb/&gt; 5. AggregatingMergeTree stores partial aggregation states directly in the table engine, merging rows with the same primary key into single rows containing combined aggregate statesâenabling orders of magnitude data reduction and sub-second query performance.&lt;/p&gt;
    &lt;p&gt;This flexibility allows you to choose the right optimization strategy based on your specific use case, query patterns, and performance requirements.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt; Querying stackoverflow data in ClickHouse locally | X Post&lt;/p&gt;
    &lt;p&gt;ClickPipes is ClickHouse Cloud’s managed integration platform that makes ingesting data from diverse sources as simple as clicking a few buttons, providing a scalable, serverless ingestion experience with high throughput and low latency. Beyond object storage, ClickPipes supports Kafka/Confluent, database CDC from MySQL and Postgres, and streaming platforms like Kinesis and Event Hubs.&lt;/p&gt;
    &lt;p&gt;The platform includes fully managed operations with built-in error handling, automatic retries, schema evolution, and monitoring through dedicated error tables, plus enterprise features like API/Terraform integration and Prometheus metrics). For object storage specifically, ClickPipes supports &lt;code&gt;continuous ingestion&lt;/code&gt; with configurable polling where new files must be lexically ordered (e.g., &lt;code&gt;file1&lt;/code&gt;, &lt;code&gt;file2&lt;/code&gt;, &lt;code&gt;file3&lt;/code&gt;) for proper ingestion sequencing.&lt;/p&gt;
    &lt;head rend="h2"&gt;Applicable Tips &amp;amp; Tricks&lt;/head&gt;
    &lt;p&gt;In this chapter we look at practical strategies for data modeling with ClickHouse with practical tips and tricks for real-time analytics.&lt;/p&gt;
    &lt;head rend="h3"&gt;Deduplication Strategies&lt;/head&gt;
    &lt;p&gt;Why it matters: Real-time data streams often contain duplicate records due to network retries, system failures, or multiple data sources. Without deduplication, your analytics might show inflated metrics and incorrect insights.&lt;/p&gt;
    &lt;p&gt;How to implement: ClickHouse offers several deduplication approaches:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;ReplacingMergeTree: Automatically deduplicates rows based on the sorting key during background merges.&lt;/item&gt;
      &lt;item&gt;Refreshable Materialized Views: Use &lt;code&gt;GROUP BY&lt;/code&gt;with&lt;code&gt;argMax()&lt;/code&gt;to keep the latest version of each record.&lt;/item&gt;
      &lt;item&gt;Custom Deduplication Logic: Implement application-level deduplication before insertion.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Best Practice: For high-throughput real-time scenarios, use ReplacingMergeTree with a proper sorting key that includes your natural deduplication fields (e.g., &lt;code&gt;user_id&lt;/code&gt;, &lt;code&gt;event_id&lt;/code&gt;, &lt;code&gt;timestamp&lt;/code&gt;).&lt;/p&gt;
    &lt;head rend="h3"&gt;Performance Optimization&lt;/head&gt;
    &lt;p&gt;ClickHouse is all about performance and speed out of the gate. But here are some tips and practical examples to optimize even more.&lt;/p&gt;
    &lt;head rend="h4"&gt;Partitioning Strategy&lt;/head&gt;
    &lt;p&gt;Why it matters: Proper partitioning enables query pruning and parallel processing, dramatically reducing query times from minutes to seconds.&lt;/p&gt;
    &lt;p&gt;How to implement:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Partition by time (daily/monthly) for time-series data.&lt;/item&gt;
      &lt;item&gt;Use secondary partitioning for high-cardinality dimensions. This means adding additional partition keys beyond just time to handle columns with many distinct values (&lt;code&gt;region&lt;/code&gt;in the example below).&lt;/item&gt;
      &lt;item&gt;Design partitions to match your most common query patterns.&lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;head rend="h4"&gt;Predicate Pushdown Optimization&lt;/head&gt;
    &lt;p&gt;Why it matters: Moving filters closer to the data source reduces the amount of data processed at each query stage.&lt;/p&gt;
    &lt;p&gt;How to implement:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Structure your &lt;code&gt;WHERE&lt;/code&gt;clauses to match your sorting key order.&lt;/item&gt;
      &lt;item&gt;Use low-cardinality columns early in filtering.&lt;/item&gt;
      &lt;item&gt;Leverage ClickHouse’s automatic index usage for range queries with sparse index.&lt;/item&gt;
      &lt;item&gt;Advanced tip: Combine with materialized views to push aggregations to insert time, not just filters to data source.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;Pre-Aggregation with AggregatingMergeTree&lt;/head&gt;
    &lt;p&gt;When to use: High-volume time-series data where the same aggregation queries run frequently.&lt;/p&gt;
    &lt;p&gt;Implementation: Use &lt;code&gt;-State&lt;/code&gt; functions during INSERT and &lt;code&gt;-Merge&lt;/code&gt; functions during SELECT to work with pre-computed aggregate states rather than raw data. More Information&lt;/p&gt;
    &lt;head rend="h3"&gt;Storage Efficiency&lt;/head&gt;
    &lt;p&gt;Data modeling has a real impact on cost when done correctly. Here are some strategies to reduce storage, therefore save cost, and speed up query responses by an order of magnitude.&lt;/p&gt;
    &lt;head rend="h4"&gt;Data Sketches for Approximation&lt;/head&gt;
    &lt;p&gt;Why it matters: Exact distinct counts and percentiles on billions of rows are very expensive and time-consuming. Data sketches use clever algorithms to deliver 99%+ accuracy for 1% of the cost and storage.&lt;/p&gt;
    &lt;p&gt;How to implement:&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;Impact: The above example has an accuracy of 99%+ and a memory footprint of &amp;lt;2KB with a speedboost of 100x by reducing storage.&lt;/p&gt;
    &lt;head rend="h4"&gt;Rollup to Optimal Time Granularity&lt;/head&gt;
    &lt;p&gt;Why it matters: Storing every millisecond-level event creates significant storage overhead. Most business analytics work at hourly or daily granularity.&lt;/p&gt;
    &lt;p&gt;How to implement:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Aggregate raw events to hourly summaries using materialized views or SQL aggregations.&lt;/item&gt;
      &lt;item&gt;Keep detailed data for recent periods (last 30 days) and aggregated monthly data for historical analysis, for example.&lt;/item&gt;
      &lt;item&gt;Use different retention policies per granularity level.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Sampling Strategies&lt;/head&gt;
    &lt;p&gt;Sampling is a statistical way to reduce data without compromising on getting the right insights.&lt;/p&gt;
    &lt;head rend="h4"&gt;Statistical Sampling for Large Datasets&lt;/head&gt;
    &lt;p&gt;Why it matters: When dealing with billions of events, sometimes a representative sample provides sufficient accuracy for analytics while dramatically reducing processing time and storage costs.&lt;/p&gt;
    &lt;p&gt;How to implement:&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;Best Practice: Use stratified sampling when you need to maintain proportional representation across important business dimensions (customer segments, product categories, geographic regions). Use consistent hash functions to ensure reproducible samples.&lt;/p&gt;
    &lt;p&gt;Impact: Can reduce data volumes by 90-99% while maintaining statistical significance for trend analysis and aggregate metrics.&lt;/p&gt;
    &lt;head rend="h3"&gt;Schema Management&lt;/head&gt;
    &lt;head rend="h4"&gt;Table Projections for Query Optimization&lt;/head&gt;
    &lt;p&gt;Table projections are ClickHouse’s native feature for pre-computed, physically stored copies of your table data with different sort orders or pre-aggregations. Think “same table, multiple indexes on steroids”.&lt;/p&gt;
    &lt;p&gt;Why it matters: Different queries need different sort orders or aggregations. Projections let you maintain multiple optimized access patterns without duplicating tables, and the query optimizer automatically picks the projection with the least data to scan.&lt;/p&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;Use dbt to create a denormalized One Big Table (OBT) in ClickHouse, then leverage ClickHouse projections for different query patterns instead of maintaining separate OLAP cubes.&lt;/p&gt;
    &lt;head rend="h4"&gt;Schema Evolution Best Practices&lt;/head&gt;
    &lt;p&gt;Why it matters: Real-time systems need to handle schema changes without breaking existing queries or requiring full data reloads.&lt;/p&gt;
    &lt;p&gt;How to implement:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Use nullable columns for new fields to maintain backward compatibility.&lt;/item&gt;
      &lt;item&gt;Implement “latest state” modeling for slowly changing dimensions.&lt;/item&gt;
      &lt;item&gt;Leverage ClickHouse’s automatic schema detection for JSON fields.&lt;/item&gt;
      &lt;item&gt;Snapshot approach: Daily/weekly full snapshots of dimensional data.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Time Series Optimization&lt;/head&gt;
    &lt;p&gt;When working with time series, dates are an important part of how we query and store data.&lt;/p&gt;
    &lt;head rend="h4"&gt;Always Store in UTC&lt;/head&gt;
    &lt;p&gt;Why it matters: Mixed timezones in analytical data lead to incorrect aggregations and confusing results when data spans multiple regions.&lt;/p&gt;
    &lt;p&gt;How to implement:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Convert all timestamps to UTC at ingestion time.&lt;/item&gt;
      &lt;item&gt;Store the original timezone as a separate column if needed for display.&lt;/item&gt;
      &lt;item&gt;Use ClickHouse’s timezone functions for display conversion only.&lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row/&gt;
    &lt;/table&gt;
    &lt;p&gt;Besides all the strengths, some limitations can’t be neglected. For example, it’s more difficult to do updates and deletes (Mutations). Joins are limited in performance and functionality and there’s no full ACID transactions support. There’s also no notion of foreign keys. This means referential integrity is left to the user to manage at an application level. Read more about this on ClickHouse Architecture 101 as well.&lt;/p&gt;
    &lt;head rend="h2"&gt;Choosing the Right ClickHouse Modeling Strategy&lt;/head&gt;
    &lt;p&gt;After exploring ClickHouse’s capabilities for real-time analytics, the key question becomes: How do you choose the right modeling approach for your specific use case? As always, the answer depends on your data volume, latency requirements, complexity needs, and team capabilities. But we can say that ClickHouse lets us handle powerful use cases without the need for expensive ETL pipelines or an additional semantic layer.&lt;/p&gt;
    &lt;p&gt;For straightforward real-time scenarios, ClickHouse’s native features shine. You can deduplicate within ClickHouse to land consistent data in your cube, and use the FINAL modifier to let ClickHouse fully merge data before returning results. This performs all data transformations that happen during merges for the given table engine, eliminating the complexity of external processing.&lt;/p&gt;
    &lt;p&gt;The ETL Pipeline Approach&lt;lb/&gt; However, for more complex data projects, you can always handle execution through external ETL performed outside of ClickHouse using tools like dbt, Airflow, Dagster, Kestra, Flink, BladePipe, or dlt. These tools can orchestrate batch or streaming transformations before loading data into ClickHouse, which is especially useful for complex pipelines or when you want to manage schema evolution, data quality, or referential integrity outside the database. The ClickHouse integration for dbt ensures this is performed atomically with a new version of the target table created and then atomically swapped with the version receiving queries via the EXCHANGE command.&lt;/p&gt;
    &lt;p&gt;Modeling outside of ClickHouse is a common approach with more complex landscapes, but if we want real-time analytics, batch ETL can break the flow of continuously updated streams. That’s why this shouldn’t be the first choice if you want real-time data, quickly updated.&lt;/p&gt;
    &lt;p&gt;The BI Approach There’s also a tradeoff with storing metrics within the OLAP cube versus outside of it. Because SQL aggregations and measures can be queried on the fly but can’t be stored within ClickHouse easily, data modeling often happens outside ClickHouse or gets stored within BI tools. The advantage is you can change metrics at any time without running an ETL pipeline. The downside is you can’t easily store or manage them except in your UI, whether it’s a web app with an OLAP-ORM, notebooks, or Business Intelligence tools.&lt;/p&gt;
    &lt;p&gt;This is one reason why Rill pairs so well with ClickHouseâit has a full-blown metrics layer built-in with all its capabilities out of the box. You can store metrics declaratively based on YAML, version control them, and update them in a governed way. For example, put them in a git repository and let users collaborate on these metrics, which then get blazingly fast query returns on ClickHouse. Rill gives you another layer of data modeling while using ClickHouse as a sub-second response query engine.&lt;/p&gt;
    &lt;p&gt;Ultimately, the choice between native ClickHouse modeling, external ETL pipelines, or BI tool integration comes down to balancing three key factors: data freshness requirements, transformation complexity, and team capabilities. ClickHouse’s native approach eliminates traditional ETL overhead for most real-time use cases, but the flexibility to layer additional tools when needed ensures your analytics architecture can evolve with your business requirements.&lt;/p&gt;
    &lt;p&gt;To get started, check out the practical example that demonstrates ClickHouse ETL with NOAA weather data, or explore ClickHouse’s comprehensive Schema Design documentation, which guides you through all the steps including querying large datasets like StackOverflow’s 60+ million records locally within seconds.&lt;/p&gt;
    &lt;quote&gt;Written as part of my services&lt;/quote&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45137927</guid></item><item><title>Development Speed Has Never Been a Bottleneck</title><link>https://pawelbrodzinski.substack.com/p/development-speed-is-not-a-bottleneck</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45138156</guid></item><item><title>1TB Raspberry Pi SSD on sale now for $70</title><link>https://www.raspberrypi.com/news/1tb-raspberry-pi-ssd-on-sale-now-for-70/</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45138932</guid></item><item><title>You Don't Need Animations</title><link>https://emilkowal.ski/ui/you-dont-need-animations</link><description>&lt;doc fingerprint="f7eb51a5ad29df05"&gt;
  &lt;main&gt;&lt;p&gt;When done right, animations make an interface feel predictable, faster, and more enjoyable to use. They help you and your product stand out.&lt;/p&gt;&lt;p&gt;But they can also do the opposite. They can make an interface feel unpredictable, slow, and annoying. They can even make your users lose trust in your product.&lt;/p&gt;&lt;p&gt;So how do you know when and how to animate to improve the experience?&lt;/p&gt;&lt;p&gt;Step one is making sure your animations have a purpose.&lt;/p&gt;&lt;head rend="h2"&gt;Purposeful animations&lt;/head&gt;&lt;p&gt;Before you start animating, ask yourself: what’s the purpose of this animation? &lt;lb/&gt;As an example, what’s the purpose of this marketing animation we built at Linear?&lt;/p&gt;&lt;p&gt;You can view the full animation on linear.app/ai.&lt;/p&gt;&lt;p&gt;This animation explains how Product Intelligence (Linear’s feature) works. We could have used a static asset, but the animated version helps the user understand what this feature does, straight in the initial viewport of the page.&lt;/p&gt;&lt;p&gt;Another purposeful animation is this subtle scale down effect when pressing a button. It’s a small thing, but it helps the interface feel more alive and responsive.&lt;/p&gt;&lt;p&gt;Sonner’s enter animation, on the other hand, has two purposes:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;- Having a toast suddenly appear would feel off, so we animate it in.&lt;/item&gt;&lt;item&gt;- Because it comes from and leaves in the same direction, it creates spatial consistency, making the swipe-down-to-dismiss gesture feel more intuitive.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;But sometimes the purpose of an animation might just be to bring delight.&lt;/p&gt;&lt;p&gt;Morphing of the feedback component below helps make the experience more unique and memorable. This works as long as the user will rarely interact with it. It’ll then become a pleasant surprise, rather than a daily annoyance.&lt;/p&gt;&lt;p&gt;Press on the button to see it morph.&lt;/p&gt;&lt;p&gt;Used multiple times a day, this component would quickly become irritating. The initial delight would fade and the animation would slow users down.&lt;/p&gt;&lt;p&gt;How often users will see an animation is a key factor in deciding whether to animate or not. Let’s dive deeper into it next.&lt;/p&gt;&lt;head rend="h2"&gt;Frequency of use&lt;/head&gt;&lt;p&gt;I use Raycast hundreds of times a day. If it animated every time I opened it, it would be very annoying. But there’s no animation at all. That’s the optimal experience.&lt;/p&gt;&lt;p&gt;To see it for yourself, try to toggle the open state of the menu below by using the buttons belowpressing &lt;code&gt;J&lt;/code&gt; and then &lt;code&gt;K&lt;/code&gt;. Which one feels better if used hundreds of times a day?&lt;/p&gt;&lt;p&gt;When I open Raycast, I have a clear goal in mind. I don’t expect to be “delighted”, I don’t need to be. I just want to do my work with no unnecessary friction.&lt;/p&gt;&lt;p&gt;Think about what the user wants to achieve and how often they will see an animation. A hover effect is nice, but if used multiple times a day, it would likely benefit the most from having no animation at all.&lt;/p&gt;&lt;p&gt;Imagine you interact with this list often during the day.&lt;/p&gt;&lt;p&gt;Imagine you interact with this list often during the day.&lt;/p&gt;&lt;p&gt;The same goes for keyboard-initiated actions. These actions may be repeated hundreds of times a day, an animation would make them feel slow, delayed, and disconnected from the user’s actions. You should never animate them.&lt;/p&gt;&lt;p&gt;Since we can’t really use a keyboard on touch devices, you can press the buttons below to see how it feels with and without animation.&lt;/p&gt;&lt;p&gt;To see it for yourself, focus on the input below and use arrow keys to navigate through the list. Notice how the highlight feels delayed compared to the keys you press. Now press (shift) and see how this interaction feels without animation.&lt;/p&gt;&lt;p&gt;But even if your animation won’t be used too often and it fulfills a clear purpose, you still have to think about its speed…&lt;/p&gt;&lt;head rend="h2"&gt;Perception of speed&lt;/head&gt;&lt;p&gt;Unless you are working on marketing sites, your animations have to be fast. They improve the perceived performance of your app, stay connected to user’s actions, and make the interface feel as if it’s truly listening to the user.&lt;/p&gt;&lt;p&gt;To give you an example, a faster-spinning spinner makes the app seem to load faster, even though the load time is the same. This improves perceived performance.&lt;/p&gt;&lt;p&gt;Which one works harder to load the data?&lt;/p&gt;&lt;p&gt;A &lt;code&gt;180ms&lt;/code&gt; dropdown animation feels more responsive than a &lt;code&gt;400ms&lt;/code&gt; one:&lt;/p&gt;&lt;p&gt;Click on the buttons to compare the speed.&lt;/p&gt;&lt;p&gt;As a rule of thumb, UI animations should generally stay under &lt;code&gt;300ms&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Another example of the importance of speed: tooltips should have a slight delay before appearing to prevent accidental activation. Once a tooltip is open however, hovering over other tooltips should open them with no delay and no animation.&lt;/p&gt;&lt;p&gt;This feels faster without defeating the purpose of the initial delay.&lt;/p&gt;&lt;p&gt;Radix UI and Base UI skip the delay once a tooltip is shown.&lt;/p&gt;&lt;p&gt;Radix UI and Base UI skip the delay once a tooltip is shown.&lt;/p&gt;&lt;head rend="h2"&gt;Building great interfaces&lt;/head&gt;&lt;p&gt;The goal is not to animate for animation’s sake, it’s to build great user interfaces. The ones that users will happily use, even on a daily basis. Sometimes this requires animations, but sometimes the best animation is no animation.&lt;/p&gt;&lt;p&gt;Knowing when to animate is just one of many things you need to know in order to craft great animations. If you’d like to dive deeper into the theory and practice of it, I’ve created a course that covers everything you need to know:&lt;/p&gt;Check out "Animations on the Web"&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45139088</guid></item><item><title>A computer upgrade has shut down BART</title><link>https://www.bart.gov/news/articles/2025/news20250905</link><description>&lt;doc fingerprint="73eae9d7f15481f7"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Start of BART service delayed Friday, September 5&lt;/head&gt;
    &lt;p&gt;Update 09/05/25, 9:15am:&lt;/p&gt;
    &lt;p&gt;Limited East Bay service will start at approximately 9:30am. There is no service to San Francisco.&lt;/p&gt;
    &lt;p&gt;Yellow Line will service will resume from Antioch to 12th Street Oakland. Blue Line service will resume from Dublin to MacArthur. Orange line service will resume from Berryessa to Richmond. BART to Antioch service is resuming now.&lt;/p&gt;
    &lt;p&gt;A computer equipment problem following network upgrade work is preventing the start of service this morning. Seek alternative means of transportation. bart.gov/alternatives provides options without BART service.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45139270</guid></item><item><title>Does anyone still use Morse code?</title><link>https://morse-coder.com/</link><description>&lt;doc fingerprint="1c35f5fb61189fbb"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Morse Code Translator&lt;/head&gt;
    &lt;p&gt;Translate Morse to English &amp;amp; English to Morse code Instantly&lt;/p&gt;
    &lt;head rend="h2"&gt;How to Use the Morse Code Translator&lt;/head&gt;
    &lt;head rend="h3"&gt;1Text to Morse Code Translation&lt;/head&gt;
    &lt;p&gt;Type or paste any text in the top input box, or click the random button (🔀) . we supports letters, numbers, and punctuation.&lt;/p&gt;
    &lt;head rend="h3"&gt;2Morse Code to Text Decoding&lt;/head&gt;
    &lt;p&gt;Enter Morse code in the bottom box using dots (.) and dashes (-). Separate letters with spaces and words with forward slashes (/).&lt;/p&gt;
    &lt;head rend="h3"&gt;3Audio Playback &amp;amp; Training&lt;/head&gt;
    &lt;p&gt;Click the play button to hear your Morse code with authentic audio signals. Adjust playback speed, frequency and WPM.&lt;/p&gt;
    &lt;head rend="h3"&gt;4Visual Light Indicator&lt;/head&gt;
    &lt;p&gt;Watch the visual light indicator flash in sync with audio playback. Perfect for learning the rhythm and timing of Morse code signals.&lt;/p&gt;
    &lt;head rend="h3"&gt;5Download &amp;amp; Export Options&lt;/head&gt;
    &lt;p&gt;Download your conversions as text files or export Morse code as audio files (WAV/MP3) for offline practice and sharing.&lt;/p&gt;
    &lt;head rend="h3"&gt;6Professional Settings&lt;/head&gt;
    &lt;p&gt;Access advanced audio settings to customize frequency (200-1000 Hz), playback speed, and WPM for professional training standards.&lt;/p&gt;
    &lt;head rend="h3"&gt;💡 Pro Tips for Best Results:&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;•Morse Code Creator: use the green morse code generator button to create random phrases&lt;/item&gt;
      &lt;item&gt;•Use the copy button for quick text sharing&lt;/item&gt;
      &lt;item&gt;•Toggle slash separators for different formatting styles&lt;/item&gt;
      &lt;item&gt;•Practice with repeat mode for skill development&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;•Real-time character count for message tracking&lt;/item&gt;
      &lt;item&gt;•Supports complete alphabet, numbers, and punctuation&lt;/item&gt;
      &lt;item&gt;•Perfect for amateur radio and emergency communications&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Quick Start Guide - Hands on morse code translater in seconds&lt;/head&gt;
    &lt;p&gt;Get started immediately with our intuitive morse code translator. Whether you need to convert english phrases like "hello in morse code" or decode emergency signals received over long distances, our streamlined interface ensures instant results with professional accuracy following Samuel Morse's original system.&lt;/p&gt;
    &lt;head rend="h4"&gt;Type Your Message&lt;/head&gt;
    &lt;p&gt;Enter any input english text or morse code directly into the morse translator boxes&lt;/p&gt;
    &lt;head rend="h4"&gt;Instant Translation&lt;/head&gt;
    &lt;p&gt;Watch as each morse character appears instantly with dots (•) and dashes (-)&lt;/p&gt;
    &lt;head rend="h4"&gt;Listen &amp;amp; Learn&lt;/head&gt;
    &lt;p&gt;Use audio playback or flashing light patterns to experience authentic electrical signals&lt;/p&gt;
    &lt;head rend="h3"&gt;Advanced Features - Beyond Text-Based Morse Code Converter&lt;/head&gt;
    &lt;p&gt;Experience cutting-edge morse code conversion technology that extends far beyond simple text translation. Our comprehensive platform integrates traditional International Morse Code standards with modern AI-powered recognition capabilities, supporting diverse input methods from images to audio files while maintaining perfect compatibility with historical telegraph protocols.&lt;/p&gt;
    &lt;head rend="h4"&gt;Smart Image Processing&lt;/head&gt;
    &lt;p&gt;Upload photos containing morse patterns and extract text using our morse code image decoder&lt;/p&gt;
    &lt;head rend="h4"&gt;Audio Signal Analysis&lt;/head&gt;
    &lt;p&gt;Decode morse code from audio recordings with our intelligent audio morse code translator&lt;/p&gt;
    &lt;head rend="h4"&gt;Batch File Processing&lt;/head&gt;
    &lt;p&gt;Handle large text files with our file-to-morse encoder and text decoder tools&lt;/p&gt;
    &lt;head rend="h4"&gt;Visual Signal Simulation&lt;/head&gt;
    &lt;p&gt;Experience authentic flashing light patterns that replicate traditional telegraph electrical signals&lt;/p&gt;
    &lt;head rend="h4"&gt;Error-Resistant Translation&lt;/head&gt;
    &lt;p&gt;Intelligent handling of characters that cannot be translated with helpful suggestions and alternatives&lt;/p&gt;
    &lt;head rend="h4"&gt;Multi-Language Support&lt;/head&gt;
    &lt;p&gt;Convert english and other languages using the complete morse alphabet with international character support&lt;/p&gt;
    &lt;head rend="h3"&gt;How does our morse code translator work?&lt;/head&gt;
    &lt;p&gt;Our comprehensive platform employs multiple sophisticated technologies to handle diverse morse code applications. From traditional text translation to cutting-edge AI-powered image recognition, each tool utilizes specialized algorithms designed for maximum accuracy across different input methods and communication scenarios over long distances.&lt;/p&gt;
    &lt;head rend="h4"&gt;Real-time Character Mapping Engine&lt;/head&gt;
    &lt;p&gt;Each morse character is mapped using the standard system established by Samuel Morse, converting input english into morse code dot-dash sequences with authentic timing intervals&lt;/p&gt;
    &lt;head rend="h4"&gt;Advanced OCR Pattern Recognition&lt;/head&gt;
    &lt;p&gt;Our image morse code translator uses machine learning to detect morse patterns from photographs, and convert the morse code to English.&lt;/p&gt;
    &lt;head rend="h4"&gt;Digital Signal Processing&lt;/head&gt;
    &lt;p&gt;The audio morse code translator employs frequency analysis to interpret electrical signals from various sound sources, detecting precise timing patterns&lt;/p&gt;
    &lt;head rend="h4"&gt;Educational Content Management&lt;/head&gt;
    &lt;p&gt;Our reference system and learning platform provide structured morse alphabet training and historical context&lt;/p&gt;
    &lt;head rend="h3"&gt;Professional Training Resources - From Beginner to Expert&lt;/head&gt;
    &lt;p&gt;Master morse communication through our structured learning environment designed for all skill levels. Whether you're studying for amateur radio certification, exploring historical telegraph methods, or developing emergency communication skills, our educational resources provide comprehensive training in both theory and practical application of morse code principles.&lt;/p&gt;
    &lt;head rend="h4"&gt;Structured Learning Modules:&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;•Complete morse alphabet reference with printable charts and timing guides&lt;/item&gt;
      &lt;item&gt;•Progressive skill building through essential vocabulary and communication phrases&lt;/item&gt;
      &lt;item&gt;•Professional abbreviations and prosigns used in radio communications&lt;/item&gt;
      &lt;item&gt;•Interactive audio training with adjustable speeds and visual feedback through flashing light indicators&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;Real-World Applications:&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;•Amateur radio (HAM) licensing exam preparation and operating procedures&lt;/item&gt;
      &lt;item&gt;•Maritime and aviation emergency communication protocols for safety applications&lt;/item&gt;
      &lt;item&gt;•Historical telegraph operation and understanding of electrical signals in communication networks&lt;/item&gt;
      &lt;item&gt;•STEM education applications for teaching problem-solving and pattern recognition skills&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Popular Learning Topics: Students frequently explore encoding romantic messages like "i love you in morse code", emergency signals such as "SOS morse code", and practical phrases like "hello world morse code". Our platform accommodates all skill levels while providing guidance for characters that cannot be translated, ensuring comprehensive morse alphabet mastery.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45139640</guid></item><item><title>Protobuffers Are Wrong</title><link>https://reasonablypolymorphic.com/blog/protos-are-wrong/</link><description>&lt;doc fingerprint="1c20d80c0e053ed4"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Protobuffers Are Wrong&lt;/head&gt;
    &lt;p&gt;I’ve spent a good deal of my professional life arguing against using protobuffers. They’re clearly written by amateurs, unbelievably ad-hoc, mired in gotchas, tricky to compile, and solve a problem that nobody but Google really has. If these problems of protobuffers remained quarantined in serialization abstractions, my complaints would end there. But unfortunately, the bad design of protobuffers is so persuasive that these problems manage to leak their way into your code as well.&lt;/p&gt;
    &lt;head rend="h2"&gt;Ad-Hoc and Built By Amateurs&lt;/head&gt;
    &lt;p&gt;Stop. Put away your email client that is half-way through writing me about how “Google is filled with the world’s best engineers,” and that “anything they build is, by definition, not built by amateurs.” I don’t want to hear it.&lt;/p&gt;
    &lt;p&gt;Let’s just get this out of the way. Full disclosure: I used to work at Google. It was the first (but unfortunately, not the last) place I ever used protobuffers. All of the problems I want to talk about today exist inside of Google’s codebase; it’s not just a matter of “using protobuffers wrong” or some such nonsense like that.&lt;/p&gt;
    &lt;p&gt;By far, the biggest problem with protobuffers is their terrible type-system. Fans of Java should feel right at home with protobuffers, but unfortunately, literally nobody considers Java to have a well-designed type-system. The dynamic typing guys complain about it being too stifling, while the static typing guys like me complain about it being too stifling without giving you any of the things you actually want in a type-system. Lose lose.&lt;/p&gt;
    &lt;p&gt;The ad-hoc-ness and the built-by-amateurs-itude go hand-in-hand. So much of the protobuffer spec feels bolted on as an afterthought that it clearly was bolted on as an afterthought. Many of its restrictions will make you stop, scratch your head and ask “wat?” But these are just symptoms of the deeper answer, which is this:&lt;/p&gt;
    &lt;p&gt;Protobuffers were obviously built by amateurs because they offer bad solutions to widely-known and already-solved problems.&lt;/p&gt;
    &lt;head rend="h3"&gt;No Compositionality&lt;/head&gt;
    &lt;p&gt;Protobuffers offer several “features”, but none of them see to work with one another. For example, look at the list of orthogonal-yet-constrained typing features that I found by skimming the documentation.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;oneof&lt;/code&gt;fields can’t be&lt;code&gt;repeated&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;map&amp;lt;k,v&amp;gt;&lt;/code&gt;fields have dedicated syntax for their keys and values, but this isn’t used for any other types.&lt;/item&gt;
      &lt;item&gt;Despite &lt;code&gt;map&lt;/code&gt;fields being able to be parameterized, no user-defined types can be. This means you’ll be stuck hand-rolling your own specializations of common data structures.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;map&lt;/code&gt;fields cannot be&lt;code&gt;repeated&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;map&lt;/code&gt;keys can be&lt;code&gt;string&lt;/code&gt;s, but can not be&lt;code&gt;bytes&lt;/code&gt;. They also can’t be&lt;code&gt;enum&lt;/code&gt;s, even though&lt;code&gt;enum&lt;/code&gt;s are considered to be equivalent to integers everywhere else in the protobuffer spec.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;map&lt;/code&gt;values cannot be other&lt;code&gt;map&lt;/code&gt;s.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This insane list of restrictions is the result of unprincipled design choices and bolting on features after the fact. For example, &lt;code&gt;oneof&lt;/code&gt; fields can’t be &lt;code&gt;repeated&lt;/code&gt; because rather than resulting in a coproduct type, instead the code generator will give you a product of mutually-exclusive optional fields. Such a transformation is only valid for a singular field (and, as we’ll see later, not even then.)&lt;/p&gt;
    &lt;p&gt;The restriction behind &lt;code&gt;map&lt;/code&gt; fields being unable to be &lt;code&gt;repeated&lt;/code&gt; is related, but shows off a different limitation of the type-system. Behind the scenes, a &lt;code&gt;map&amp;lt;k,v&amp;gt;&lt;/code&gt; is desugared into something spiritually similar to &lt;code&gt;repeated Pair&amp;lt;k,v&amp;gt;&lt;/code&gt;. And because &lt;code&gt;repeated&lt;/code&gt; is a magical language keyword rather than a type in its own right, it doesn’t compose with itself.&lt;/p&gt;
    &lt;p&gt;Your guess is as good as mine for why an &lt;code&gt;enum&lt;/code&gt; can’t be used as a &lt;code&gt;map&lt;/code&gt; key.&lt;/p&gt;
    &lt;p&gt;What’s so frustrating about all of this is a little understanding of how modern type-systems work would be enough to drastically simplify the protobuffer spec and simultaneously remove all of the arbitrary restrictions.&lt;/p&gt;
    &lt;p&gt;The solution is as follows:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Make all fields in a message &lt;code&gt;required&lt;/code&gt;. This makes messages product types.&lt;/item&gt;
      &lt;item&gt;Promote &lt;code&gt;oneof&lt;/code&gt;fields to instead be standalone data types. These are coproduct types.&lt;/item&gt;
      &lt;item&gt;Give the ability to parameterize product and coproduct types by other types.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;That’s it! These three features are all you need in order to define any possible piece of data. With these simpler pieces, we can re-implement the rest of the protobuffer spec in terms of them.&lt;/p&gt;
    &lt;p&gt;For example, we can rebuild &lt;code&gt;optional&lt;/code&gt; fields:&lt;/p&gt;
    &lt;code&gt;{
 product Unit // no fields
   }

&amp;lt;t&amp;gt; {
 coproduct Optional= 0;
   t    value = 1;
   Unit unset }&lt;/code&gt;
    &lt;p&gt;Building &lt;code&gt;repeated&lt;/code&gt; fields is simple too:&lt;/p&gt;
    &lt;code&gt;&amp;lt;t&amp;gt; {
 coproduct List= 0;
   Unit empty &amp;lt;t, List&amp;lt;t&amp;gt;&amp;gt; cons = 1;
   Pair}&lt;/code&gt;
    &lt;p&gt;Of course, the actual serialization logic is allowed to do something smarter than pushing linked-lists across the network—after all, implementations and semantics don’t need to align one-to-one.&lt;/p&gt;
    &lt;head rend="h3"&gt;Questionable Choices&lt;/head&gt;
    &lt;p&gt;In the vein of Java, protobuffers make the distinction between scalar types and message types. Scalars correspond more-or-less to machine primitives—things like &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt;. Messages, on the other hand, are everything else. All library- and user-defined types are messages.&lt;/p&gt;
    &lt;p&gt;The two varieties of types have completely different semantics, of course.&lt;/p&gt;
    &lt;p&gt;Fields with scalar types are always present. Even if you don’t set them. Did I mention that (at least in proto31) all protobuffers can be zero-initialized with absolutely no data in them? Scalar fields get false-y values—&lt;code&gt;uint32&lt;/code&gt; is initialized to &lt;code&gt;0&lt;/code&gt; for example, and &lt;code&gt;string&lt;/code&gt; is initialized as &lt;code&gt;""&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;It’s impossible to differentiate a field that was missing in a protobuffer from one that was assigned to the default value. Presumably this decision is in place in order to allow for an optimization of not needing to send default scalar values over the wire. Presumably, though the encoding guide makes no mention of this optimization being performed, so your guess is as good as mine.&lt;/p&gt;
    &lt;p&gt;As we’ll see when we discuss protobuffers’ claim to being god’s gift to backwards- and forwards-compatible APIs, this inability to distinguish between unset and default values is a nightmare. Especially if indeed it’s a design decision made in order to save one bit (set or not) per field.&lt;/p&gt;
    &lt;p&gt;Contrast this behavior against message types. While scalar fields are dumb, the behavior for message fields is outright insane. Internally, message fields are either there or they’re not—but their behavior is crazy. Some pseudocode for their accessor is worth a thousand words. Pretend this is Java or something similar:&lt;/p&gt;
    &lt;code&gt;private Foo m_foo;

public Foo foo {
// only if `foo` is used as an expression
   {
   get if (m_foo != null)
     return m_foo;
       else
     return new Foo();
       }
   
// instead if `foo` is used as an lvalue
   {
   mutable get if (m_foo = null)
     = new Foo();
       m_foo return m_foo;
     }
   }&lt;/code&gt;
    &lt;p&gt;The idea is that if the &lt;code&gt;foo&lt;/code&gt; field is unset, you’ll see a default-initialized copy whenever you ask for it, but won’t actually modify its container. But if you modify &lt;code&gt;foo&lt;/code&gt;, it will modify its parent as well! All of this just to avoid using a &lt;code&gt;Maybe Foo&lt;/code&gt; type and the associated “headaches” of the nuance behind needing to figure out what an unset value should mean.&lt;/p&gt;
    &lt;p&gt;This behavior is especially egregious, because it breaks a law! We’d expect the assignment &lt;code&gt;msg.foo = msg.foo;&lt;/code&gt; to be a no-op. Instead the implementation will actually silently change &lt;code&gt;msg&lt;/code&gt; to have a zero-initialized copy of &lt;code&gt;foo&lt;/code&gt; if it previously didn’t have one.&lt;/p&gt;
    &lt;p&gt;Unlike scalar fields, at least it’s possible to detect if a message field is unset. Language bindings for protobuffers offer something along the lines of a generated &lt;code&gt;bool has_foo()&lt;/code&gt; method. In the frequent case of copying a message field from one proto to another, iff it was present, you’ll need to write the following code:&lt;/p&gt;
    &lt;code&gt;if (src.has_foo(src)) {
.set_foo(src.foo());
   dst}&lt;/code&gt;
    &lt;p&gt;Notice that, at least in statically-typed languages, this pattern cannot be abstracted due to the nominal relationship between the methods &lt;code&gt;foo()&lt;/code&gt;, &lt;code&gt;set_foo()&lt;/code&gt; and &lt;code&gt;has_foo()&lt;/code&gt;. Because all of these functions are their own identifiers, we have no means of programmatically generating them, save for a preprocessor macro:&lt;/p&gt;
    &lt;code&gt;#define COPY_IFF_SET(src, dst, field) \
if (src.has_##field(src)) { \
  dst.set_##field(src.field()); \
}&lt;/code&gt;
    &lt;p&gt;(but preprocessor macros are verboten by the Google style guide.)&lt;/p&gt;
    &lt;p&gt;If instead all optional fields were implemented as &lt;code&gt;Maybe&lt;/code&gt;s, you’d get abstract-able, referentially transparent call-sites for free.&lt;/p&gt;
    &lt;p&gt;To change tack, let’s talk about another questionable decision. While you can define &lt;code&gt;oneof&lt;/code&gt; fields in protobuffers, their semantics are not of coproduct types! Rookie mistake my dudes! What you get instead is an optional field for each case of the &lt;code&gt;oneof&lt;/code&gt;, and magic code in the setters that will just unset any other case if this one is set.&lt;/p&gt;
    &lt;p&gt;At first glance, this seems like it should be semantically equivalent to having a proper union type. But instead it is an accursed, unutterable source of bugs! When this behavior teams up with the law-breaking implementation of &lt;code&gt;msg.foo = msg.foo;&lt;/code&gt;, it allows this benign-looking assignment to silently delete arbitrary amounts of data!&lt;/p&gt;
    &lt;p&gt;What this means at the end of the day is that &lt;code&gt;oneof&lt;/code&gt; fields do not form law-abiding &lt;code&gt;Prism&lt;/code&gt;s, nor do messages form law-abiding &lt;code&gt;Lens&lt;/code&gt;es. Which is to say good luck trying to write bug-free, non-trivial manipulations of protobuffers. It is literally impossible to write generic, bug-free, polymorphic code over protobuffers.&lt;/p&gt;
    &lt;p&gt;That’s not the sort of thing anybody likes to hear, let alone those of us who have grown to love parametric polymorphism—which gives us the exact opposite promise.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Lie of Backwards- and Forwards-Compatibility&lt;/head&gt;
    &lt;p&gt;One of the frequently cited killer features of protobuffers is their “hassle-free ability to write backwards- and forwards-compatible APIs.” This is the claim that has been pulled over your eyes to blind you from the truth.&lt;/p&gt;
    &lt;p&gt;What protobuffers are is permissive. They manage to not shit the bed when receiving messages from the past or from the future because they make absolutely no promises about what your data will look like. Everything is optional! But if you need it anyway, protobuffers will happily cook up and serve you something that typechecks, regardless of whether or not it’s meaningful.&lt;/p&gt;
    &lt;p&gt;This means that protobuffers achieve their promised time-traveling compatibility guarantees by silently doing the wrong thing by default. Of course, the cautious programmer can (and should) write code that performs sanity checks on received protobuffers. But if at every use-site you need to write defensive checks ensuring your data is sane, maybe that just means your deserialization step was too permissive. All you’ve managed to do is decentralize sanity-checking logic from a well-defined boundary and push the responsibility of doing it throughout your entire codebase.&lt;/p&gt;
    &lt;p&gt;One possible argument here is that protobuffers will hold onto any information present in a message that they don’t understand. In principle this means that it’s nondestructive to route a message through an intermediary that doesn’t understand this version of its schema. Surely that’s a win, isn’t it?&lt;/p&gt;
    &lt;p&gt;Granted, on paper it’s a cool feature. But I’ve never once seen an application that will actually preserve that property. With the one exception of routing software, nothing wants to inspect only some bits of a message and then forward it on unchanged. The vast majority of programs that operate on protobuffers will decode one, transform it into another, and send it somewhere else. Alas, these transformations are bespoke and coded by hand. And hand-coded transformations from one protobuffer to another don’t preserve unknown fields between the two, because it’s literally meaningless.&lt;/p&gt;
    &lt;p&gt;This pervasive attitude towards protobuffers always being compatible rears its head in other ugly ways. Style guides for protobuffers actively advocate against DRY and suggest inlining definitions whenever possible. The reasoning behind this is that it allows you to evolve messages separately if these definitions diverge in the future. To emphasize that point, the suggestion is to fly in the face of 60 years’ worth of good programming practice just in case maybe one day in the future you need to change something.&lt;/p&gt;
    &lt;p&gt;At the root of the problem is that Google conflates the meaning of data with its physical representation. When you’re at Google scale, this sort of thing probably makes sense. After all, they have an internal tool that allows you to compare the finances behind programmer hours vs network utilization vs the cost to store \(x\) bytes vs all sorts of other things. Unlike most companies in the tech space, paying engineers is one of Google’s smallest expenses. Financially it makes sense for them to waste programmers’ time in order to shave off a few bytes.&lt;/p&gt;
    &lt;p&gt;Outside of the top five tech companies, none of us is within five orders of magnitude of being Google scale. Your startup cannot afford to waste engineer hours on shaving off bytes. But shaving off bytes and wasting programmers’ time in the process is exactly what protobuffers are optimized for.&lt;/p&gt;
    &lt;p&gt;Let’s face it. You are not Google scale and you never will be. Stop cargo-culting technology just because “Google uses it” and therefore “it’s an industry best-practice.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Protobuffers Contaminate Codebases&lt;/head&gt;
    &lt;p&gt;If it were possible to restrict protobuffer usage to network-boundaries I wouldn’t be nearly as hard on it as a technology. Unfortunately, while there are a few solutions in principle, none of them is good enough to actually be used in real software.&lt;/p&gt;
    &lt;p&gt;Protobuffers correspond to the data you want to send over the wire, which is often related but not identical to the actual data the application would like to work with. This puts us in the uncomfortable position of needing to choose between one of three bad alternatives:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Maintain a separate type that describes the data you actually want, and ensure that the two evolve simultaneously.&lt;/item&gt;
      &lt;item&gt;Pack rich data into the wire format for application use.&lt;/item&gt;
      &lt;item&gt;Derive rich information every time you need it from a terse wire format.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Option 1 is clearly the “right” solution, but its untenable with protobuffers. The language isn’t powerful enough to encode types that can perform double-duty as both wire and application formats. Which means you’d need to write a completely separate datatype, evolve it synchronously with the protobuffer, and explicitly write serialization code between the two. Seeing as most people seem to use protobuffers in order to not write serialization code, this is obviously never going to happen.&lt;/p&gt;
    &lt;p&gt;Instead, code that uses protobuffers allows them to proliferate throughout the codebase. True story, my main project at Google was a compiler that took “programs” written in one variety of protobuffer, and spit out an equivalent “program” in another. Both the input and output formats were expressive enough that maintaining proper parallel C++ versions of them could never possibly work. As a result, my code was unable to take advantage of any of the rich techniques we’ve discovered for writing compilers, because protobuffer data (and resulting code-gen) is simply too rigid to do anything interesting.&lt;/p&gt;
    &lt;p&gt;The result is that a thing that could have been 50 lines of recursion schemes was instead 10,000 lines of ad-hoc buffer-shuffling. The code I wanted to write was literally impossible when constrained by having protobuffers in the mix.&lt;/p&gt;
    &lt;p&gt;While this is an anecdote, it’s not in isolation. By virtue of their rigid code-generation, manifestations of protobuffers in languages are never idiomatic, nor can they be made to be—short of rewriting the code-generator.&lt;/p&gt;
    &lt;p&gt;But even then, you still have the problem of needing to embed a shitty type-system into the targeted language. Because most of protobuffers’ features are ill-conceived, these unsavory properties leak into our codebases. It means we’re forced to not only implement, but also use these bad ideas in any project which hopes to interface with protobuffers.&lt;/p&gt;
    &lt;p&gt;While it’s easy to implement inane things out of a solid foundation, going the other direction is challenging at best and the dark path of Eldrich madness at worst.&lt;/p&gt;
    &lt;p&gt;In short, abandon all hope ye who introduce protobuffers into your projects.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;To this day, there’s a raging debate inside Google itself about proto2 and whether fields should ever be marked as&lt;/p&gt;&lt;code&gt;required&lt;/code&gt;. Manifestos with both titles “&lt;code&gt;optional&lt;/code&gt;considered harmful” and “&lt;code&gt;required&lt;/code&gt;considered harmful.” Good luck sorting that out.↩︎&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45139656</guid></item><item><title>South Korea: 'many' of its nationals detained in ICE raid on GA Hyundai facility</title><link>https://www.nbcnews.com/news/us-news/ice-hyundai-plant-georgia-enforcement-action-rcna229148</link><description>&lt;doc fingerprint="f5a0165f23ac875f"&gt;
  &lt;main&gt;
    &lt;p&gt;South Korea said Friday that it had expressed “concern and regret” to the U.S. Embassy over an immigration raid on a Hyundai facility in Georgia during which it said “many” South Korean nationals had been detained.&lt;/p&gt;
    &lt;p&gt;“The economic activities of our companies investing in the U.S. and the rights and interests of our nationals must not be unfairly violated,” said Lee Jae-woong, a spokesperson for the foreign ministry of the key U.S. ally, according to the Yonhap news agency.&lt;/p&gt;
    &lt;p&gt;Agents from Immigration and Customs Enforcement (ICE) as well as Homeland Security Investigations and other federal agencies were involved in the operation on Thursday, which an ICE spokesperson said was conducted in connection with an investigation into “unlawful employment practices and other serious federal crimes.”&lt;/p&gt;
    &lt;p&gt;Steven Schrank, special agent in charge of Homeland Security Investigations in Georgia, told reporters on Thursday afternoon that the alleged unlawful practices were taking place at the “multi-hundred acre” construction site where South Korean companies Hyundai and LG Energy Solution are jointly building a new battery plant next to their manufacturing facility for electric vehicles.&lt;/p&gt;
    &lt;p&gt;The facility in the town of Ellabell, about 28 miles west of the city of Savannah, employs about 1,400 people. It is considered one of Georgia’s largest and most high-profile manufacturing sites, according to The Associated Press.&lt;/p&gt;
    &lt;p&gt;NBC News verified a video posted on social media showing HSI agents inside the construction site at Hyundai’s facility in Ellabell. One of the agents can be heard telling workers they had a search warrant for the entire site and asked that construction “be ceased immediately.”&lt;/p&gt;
    &lt;p&gt;A worker who was there but whose name is being withheld told NBC News that agents came late Thursday morning and asked everyone on the premises whether they were U.S. citizens.&lt;/p&gt;
    &lt;p&gt;Other videos on social media show agents lining workers up. In some instances, agents can be seen asking workers questions and searching their bags.&lt;/p&gt;
    &lt;p&gt;In a statement to NBC News, Hyundai spokesperson Michael Stewart confirmed the presence of law enforcement at the LG Energy Solution and Hyundai battery joint venture construction site in Bryan County, where Ellabell is located.&lt;/p&gt;
    &lt;p&gt;“We are cooperating with law enforcement and are committed to abiding by all labor and immigration regulations,” Stewart said.&lt;/p&gt;
    &lt;p&gt;It remains unclear how many people have been taken into custody, but Schrank said, “We are making many arrests of undocumented individuals.”&lt;/p&gt;
    &lt;p&gt;NBC affiliate WSAV of Savannah reported that hundreds of undercover law enforcement vehicles and Humvees were reportedly seen at the scene. Large buses were also seen entering the site.&lt;/p&gt;
    &lt;p&gt;Mary Beth Kennedy, a spokesperson for HL-GA Battery Co., LG Energy Solution and Hyundai’s joint venture, told WSAV in a statement that the company “is cooperating fully with the appropriate authorities regarding activity at our construction site. To assist their work, we have paused construction. We do not have further details at this time.”&lt;/p&gt;
    &lt;p&gt;Schrank added that the investigation was expected to continue beyond Thursday but did not provide a timeline.&lt;/p&gt;
    &lt;p&gt;The ICE spokesperson added: “This investigation is focused on ensuring accountability for those who violate the law and upholding the rule of law. Complex cases like this require strong collaboration and extensive investigative efforts.”&lt;/p&gt;
    &lt;p&gt;South Korea, the world’s 10th-largest economy, is a major automotive and electronics manufacturer whose companies have multiple plants in the United States. In July, Seoul pledged $350 billion in U.S. investment in an effort to lower President Donald Trump’s threatened tariffs on its products, which he ended up setting at 15%.&lt;/p&gt;
    &lt;p&gt;In March, Hyundai said it would invest $21 billion in U.S. onshoring from 2025 to 2028, a number it said last month had increased to $26 billion.&lt;/p&gt;
    &lt;p&gt;It said the initiatives involved in the investment — including a new $5.8 billion steel plant in Louisiana, expanded U.S. auto production capacity and a state-of-the-art robotics facility — were expected to create about 25,000 new direct jobs in the U.S. over the next four years.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45139954</guid></item></channel></rss>