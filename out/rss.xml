<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Fri, 10 Oct 2025 08:42:47 +0000</lastBuildDate><item><title>Using a laptop as an HDMI monitor for an SBC</title><link>https://danielmangum.com/posts/laptop-hdmi-monitor-sbc/</link><description>&lt;doc fingerprint="2e756d7589369bd2"&gt;
  &lt;main&gt;
    &lt;p&gt;Though I spend the majority of my time working with microcontroller class devices, I also have an embarassingly robust collection of single board computers (SBC), including a few different Raspberry Pi models, the BeagleV Starlight Beta (RIP), and more. Typically when setting up these devices for whatever automation task I have planned for them, I‚Äôll use ‚Äúheadless mode‚Äù and configure initial user and network credentials when writing the operating system to the storage device using a tool like Raspberry Pi‚Äôs Imager.&lt;/p&gt;
    &lt;p&gt;However, sometimes direct physical access to the SBC with a monitor and keyboard is useful for initial configuration, maintenance operations, or workloads that have a visual component. As someone who doesn‚Äôt use any external monitors1 for my daily development, digging up an HDMI monitor, finding somewhere to put it, and connecting it to the device is an annoying process. Furthermore, if I‚Äôm on the go I almost certainly don‚Äôt have easy access to an external monitor.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Raspberry Pi boot logs shown in VLC media player.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Fortunately, I rarely ever do this because I have a handful of HDMI to USB capture cards, ranging from extremely cheap variants from Amazon, to the higher quality Elgato Cam Link 4k. These are typically used for live streaming a video feed from DSLR / mirrorless cameras or gaming consoles, but they also serve as a great option for capturing video from any other device that has HDMI output. On my System76 Linux daily driver laptop, I can use any number of different video playback applications to display the HDMI output via the capture card. For longer term use cases, I can breathe new life into one of my old laptops, using the capture card to effectively convert it into a monitor.&lt;/p&gt;
    &lt;code&gt;vlc v4l2:///dev/video0
&lt;/code&gt;
    &lt;code&gt;ffplay /dev/video0
&lt;/code&gt;
    &lt;code&gt;cheese v4l2:///dev/video0
&lt;/code&gt;
    &lt;p&gt;If you do want to stream or record the SBC output, OBS will give you even more control. You‚Äôll still need a USB keyboard, but I already use one with my laptop, so temporarily plugging it into the SBC for configuration while I use the laptop as a monitor is minimally disruptive. However, if you find yourself regularly needing to connect to multiple machines, it might be time to consider getting a KVM switch.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Yeah, I just sit here with my one laptop screen. Can you believe that? ‚Ü©Ô∏é&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45527507</guid><pubDate>Thu, 09 Oct 2025 13:36:01 +0000</pubDate></item><item><title>Show HN: I've built a tiny hand-held keyboard</title><link>https://github.com/mafik/keyer</link><description>&lt;doc fingerprint="2f4dbc73659d93f4"&gt;
  &lt;main&gt;
    &lt;p&gt;Firmware &amp;amp; goodies for making a Keyer (one-handed version of a chorded keyboard).&lt;/p&gt;
    &lt;p&gt;One keyer manufacturer made a nice video showing typing in action: youtube.com/watch?v=Ijwo7SQQ73Q.&lt;/p&gt;
    &lt;p&gt;Features:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Minimal finger movement: it's like typing with all the keys on your home row all the time&lt;/item&gt;
      &lt;item&gt;Free hand while typing: you can use your other hand to sip tea while typing (or move the mouse - if you're not a tea drinking type)&lt;/item&gt;
      &lt;item&gt;Always near your hand - keyer can be attached to a glove so you can just release it and have both of your hands free. Now you can drink your tea and move the mouse at the same time.&lt;/item&gt;
      &lt;item&gt;Tons of chords: a 10-key keyer (3 keys on thumb, 2 index, 2 middle, 2 ring, 1 pinky) can express up to 215 chords (√ó 2 when counting hold-chord alternatives). With so many chords you can lose a finger and still touch type (carpenters will love it!)&lt;/item&gt;
      &lt;item&gt;Arpeggios: an additional 2 √ó 78 arpeggios - rolling motion over two keys that can be executed in two directions and can be used for even more input options.&lt;/item&gt;
      &lt;item&gt;Multiple layers: if the 586 shortcuts available on the base layer are somehow not enough for you&lt;/item&gt;
      &lt;item&gt;Rolling chords: when two subsequent chords you're entering share some finger positions you can only move the finger that changes position. When combined with optimized layouts (see the next point) typing is like walking through the keys one finger at a time.&lt;/item&gt;
      &lt;item&gt;Optimized layout: a bundled layout optimizer will perform a combinatorial search over all possible layouts to find the optimal one for typing the texts that you give it (or for your custom finger press / finger movement cost function)&lt;/item&gt;
      &lt;item&gt;Ergonomic layout üññ: did you know your fingers share the neuro-motor pathways and can't always move independently? The layout generator will avoid finger combinations that are hard to press.&lt;/item&gt;
      &lt;item&gt;Low-latency: the firmware uses hardware interrupts to be more responsive than polling-based keyboards and it also does debouncing in software to be more responsive capacitor-based debouncers.&lt;/item&gt;
      &lt;item&gt;Power for months: a massive 18650 battery + underclocked CPU + firmware able to sleep without losing the Bluetooth connection + hardware power switch on the board mean that you will charge it about as often as a Casio watch.&lt;/item&gt;
      &lt;item&gt;üï∂Ô∏è: combine it with smart glasses to control your computer (or smartphone) without looking or touching. It's like Meta EMG wristband but actually working!&lt;/item&gt;
      &lt;item&gt;Easy to build: did you ever play with Play-Doh? This keyer was built with modelling clay (baked in the oven for 30 minutes). No 3D printing. No custom PCBs. You can make it with parts from amazon, a hot glue gun and a soldering iron.&lt;/item&gt;
      &lt;item&gt;Perfect fit: you build it yourself, literally molding it to the shape of your hand. You can't get more ergonomic than that.&lt;/item&gt;
      &lt;item&gt;Cheap to build: it's less than 50 USD to make one yourself. Mechanical keyboards are a cheap hobby now. Who would have thought!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;(Send me your links on Bluesky bsky.app/profile/mrogalski.eu so that I can add them here!)&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Penti Chorded Keyboard - A software keyer that can run on a touchscreen. Notable for its use of arpeggios.&lt;/item&gt;
      &lt;item&gt;ESP32-BLE-Keyboard - Excellent library for turning ESP32s into custom keyboards.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;3d-printed keyers:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Typeware - This is what you can make if you have an access to a 3d printer and unlimited time to design&lt;/item&gt;
      &lt;item&gt;Keyyyyyyyys! - Can you get scrappier than that?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Commercial products:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Twiddler - 19 tiny keys + touchpad for $229&lt;/item&gt;
      &lt;item&gt;Decatext - 10 large keys + typing guide right on the device for $175 (its author also shared the promo code "Neural" for $15 off!)&lt;/item&gt;
      &lt;item&gt;Typeware - ultra lightweight &amp;amp; probably the best all-around design for $273 (pre-orders only üòî)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Welcome to the bottom of the ergonomic mechanical keyboard rabbit hole.&lt;/p&gt;
    &lt;p&gt;Let's start with some shopping.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;LILYGO T-Energy S3 development board ($9.70)&lt;/item&gt;
      &lt;item&gt;Samsung INR18650-35E 3500mAh Li-ion battery (~$2.95)&lt;/item&gt;
      &lt;item&gt;FIMO professional modelling clay ($2.75) &lt;list rend="ul"&gt;&lt;item&gt;Alternatively, one of the FIMO effect modelling clays if you'd like to make your keyer out of stone&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;10 √ó Gateron G Pro 3.0 mechanical switches (~$10) &lt;list rend="ul"&gt;&lt;item&gt;Any other switches of your choice will work&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;10 √ó Keycaps (~$8) &lt;list rend="ul"&gt;&lt;item&gt;You only need ten of them so feel free to get the coolest keycaps you can find&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;1m √ó AWG 18 rigid, insulated copper wire (~$1) &lt;list rend="ul"&gt;&lt;item&gt;Get it from a local hardware store, the online stores are ripping you off&lt;/item&gt;&lt;item&gt;You can come with your development board to see which wire gauge fits through the holes on the board&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Total: $34.40 (+shipping)&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;pliers - for bending the copper wire&lt;/item&gt;
      &lt;item&gt;a knife (or a set of sharp teeth) - for stripping the cable insulation&lt;/item&gt;
      &lt;item&gt;(optional) nitryl gloves - for not getting dirty while working with the modelling clay&lt;/item&gt;
      &lt;item&gt;hot glue gun + hot glue sticks - for attaching the components to a wire scaffolding&lt;/item&gt;
      &lt;item&gt;soldering iron + solder wire - for soldering&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;With all the materials and tools in hand, the first step is to form a metal scaffolding which will hold the switches in convenient positions. Traditional electronics devices tends to have "exoskeletons" - they're supported by an external case that surrounds them and protects them from your greasy fingers. This device is built around an endoskeleton of copper wire. We'll cover this endoskeleton with modelling clay in a moment. I hope you bought the thickest wire you could (while still fitting through the holes on the board) because in this device it's structural.&lt;/p&gt;
    &lt;p&gt;We'll start with a "GND loop". Cut a section of wire - about 20 or 30cm. Strip its insulation (all of it) &amp;amp; insert it into one of the GND holes on the board. Solder it in place - it should be firmly attached to the board. Insert the battery and take the board in your hand. Position it like you'd like it to stay in your hand and start bending the wire into a loop that goes through all the places where key switches bases are going to be placed. For some extra rigidity (long wire is fairly bendy) lead the other end of the wire back into another GND hole on the board. You can take the switches with keycaps and place them so that one of their contact points touch the wire. This will give you a better idea of how the keyer is going to end up looking. Don't worry about it being wobbly - we'll use this property to model it a little in a moment. First complete the loop by soldering the other end of the GND loop to the board. If your GND loop happens to pass near other GND holes, you can insert short sections of wire to increase the rigidity of the construction.&lt;/p&gt;
    &lt;p&gt;Once GND loop is complete, take your key switches and attach them to the GND loop so that one of their contact points makes an electrical contact. You can solder them directly but it's a good idea to start with some hot glue to hold them in place. In my version I also bent the contacts on the key switches to make them smaller (DIY low profile) and to take less space.&lt;/p&gt;
    &lt;p&gt;As you're going through the process the keyer is going to become more "complete" and you will be able to bend the wire a little to improve key positioning. Remember that hot glue and solder don't form particularly strong bonds so be careful about bending and ideally use pliers to do that precisely.&lt;/p&gt;
    &lt;p&gt;One word of advice about key positioning is that I've noticed that the keys are "nicest" to press when the axis of pressing goes straight into the palm of your hand. Motions that go parallel to palm of the hand, motions that extend fingers and motions that move fingers to the side are pretty awkward and uncomfortable. I guess our hands evolved to hold things, rather than poke or flick at them. Some keyboard manufacturers might disagree. Their keyboards look undeniably awesome, but this is your keyer and it should be comfortable to use - so make sure the keys are pressed in the same direction that you'd hold something.&lt;/p&gt;
    &lt;p&gt;Once you attached all of the keys, it's time to add even more rigidity into our construction. We'll do this by connecting the remaining contact points on the switches to the GPIO holes on the board. They're marked on the board with text that says "IO##". It doesn't matter which IO port you choose, but write down which key goes to which IO port - it's something that will have to be entered in the firmware. Take a short cut of the wire, strip it at both ends. Bend it (with pliers) so that it fits in the hole and goes straight to the switch. Then solder it in place at both ends. It's important that the wires going to the IO ports don't touch the GND loop. Insulation should help with that.&lt;/p&gt;
    &lt;p&gt;After this step, the keyer should be fairly rigid. Mount the keycaps and see how it feels. It's obviously a little "spiky" but you'll have to endure the pain for the moment. Right now bend the wires to put all the key switches in their right positions.&lt;/p&gt;
    &lt;p&gt;At this point you can go to the "Flashing Firmware" section and check out how your keyer works! It's good to see if you didn't mess anything up so far. The hardest part is over!&lt;/p&gt;
    &lt;p&gt;Now is the time to open up the modelling clay and use it to cover our keyer. Before you begin, remove the keycaps, as they'll only get in the way. Take a small amount of clay and start shaping it in your hand. Squeeze it and fold in half. Repeat this about twenty times. Modelling clay must be mixed a little to prevent it from crumbling. You'll have to do this with every bit of clay that you're adding to the sculpture.&lt;/p&gt;
    &lt;p&gt;Once you have your warm and soft piece of clay, slap it on top of the keyer - wherever you want to cover something. It's important to cover the bottom parts of the switches - that's the part that may prick your fingers. Everything else is optional. I decided to keep my development board mostly visible and only covered the wires.&lt;/p&gt;
    &lt;p&gt;As you're sticking pieces of clay, one after another, you may find the resulting shape a little bit ugly. Turns out modelling stuff out of clay is hard! I've found a couple of tricks that may help you:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Add clay in layers. Take a small ball of clay and place it between two popsicle sticks. Roll it into a flat disc with a rolling pin. Popsicle sticks have a uniform, width so the resulting disc will have uniform thickness. Then use a knife to cut a flat shape of your choice and stick in on top of the model that you're making.&lt;/item&gt;
      &lt;item&gt;If you see a gap between chunks of clay - rub them. Keep rubbing them until the gap disappears. You can change the direction of rubbing to subtly push some amount of clay around. It can be used to even up tiny hills and valleys.&lt;/item&gt;
      &lt;item&gt;The best way of evening uneven edges is to use a knife. Ideally a wallpaper knife. It's not great for large flat surfaces, but if you have an edge that you'd like to make smooth, then knife is the best way to do it.&lt;/item&gt;
      &lt;item&gt;This is a cool one but it's going to be useful right at the end. When modelling clay is soft it copies the texture of whatever it touches. You can use a piece of fabric to make it look like a fuzzy fabric. If you take a glass you can make it glossy. Look around you and see what nice textures you have around.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You can try to take the keyer in your hand at this point but be careful. The clay is very pliable and may deform under the pressure of your hand.&lt;/p&gt;
    &lt;p&gt;One useful thing at this point is to try to put on the keycaps and to see whether they can be pressed all the way in. If they cannot - then either the clay (or the keycap) has to be trimmed. At this point the clay is still soft so it's easy to correct it.&lt;/p&gt;
    &lt;p&gt;Once you're done with modelling (it can take a couple of hours) heat up an oven to 110¬∞C and put your keyer inside. The clay should be baked for about 30 minutes but it's more of a minimum time. Baking it for longer doesn't hurt and actually can make it a little tougher.&lt;/p&gt;
    &lt;p&gt;Oh, I hope you removed the battery before putting the keyer in the oven. If you didn't then you'll have to get a new one (oven). And call the fire department.&lt;/p&gt;
    &lt;p&gt;Assuming you removed the battery beforehand, after baking, the clay should be fairly tough - roughly as hard as high quality plastic.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Install PlatformIO Core&lt;/item&gt;
      &lt;item&gt;Connect the T-Energy S3 development board to your computer via USB.&lt;/item&gt;
      &lt;item&gt;Run these commands:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Clone this repository
$ git clone https://github.com/mafik/Keyer.git

# Enter the cloned directory
$ cd Keyer

# Build project
$ pio run

# Upload firmware
$ pio run --target upload&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Open Bluetooth settings on your phone or PC. If you see a device called "ùñíùñÜùñã.üéπ", that means it's working. If it doesn't skip to step 6.&lt;/item&gt;
      &lt;item&gt;Go to a text editor and find &lt;code&gt;ChordKeyboard.cpp&lt;/code&gt;. Change the&lt;code&gt;kButtonPin&lt;/code&gt;array to the IO ports that you used for connecting the switches. You can also rename the keyer by replacing "ùñíùñÜùñã" with your name. Bluetooth names may be truncated to 16 bytes so you don't have a lot of emojis to work with. Feel free to explore this file and experiment.&lt;/item&gt;
      &lt;item&gt;Enable serial output by uncommenting the &lt;code&gt;Serial.begin&lt;/code&gt;line and running the program with&lt;code&gt;pio run --target upload --target monitor&lt;/code&gt;. This will let you see what the board is doing while you're fiddling with the code and pressing the keys.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;It's getting late so this is the point at which I'll leave you on your own. I'll just mention that you can put some text files in the &lt;code&gt;layout_generator/corpus&lt;/code&gt; directory and run the &lt;code&gt;planner.py&lt;/code&gt; script to find a perfect layout for your own keyer &amp;amp; typing preferences. You can tweak the &lt;code&gt;keyer_simulator.cpp&lt;/code&gt; to adjust finger press &amp;amp; movement costs. Within &lt;code&gt;planner.py&lt;/code&gt; you'll find some code for generating layouts that follow some memorable patterns. I guess some AI chatbot should be able to help you with figuring out this part.&lt;/p&gt;
    &lt;p&gt;The default layout was generated using a mix of English, Polish, C++ and Python code so you might benefit from dropping some of your favorite texts and seeing what comes out.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Add an I2C 6-axis accelerometer and make the keyer function as an air mouse (like some LG remotes)&lt;/item&gt;
      &lt;item&gt;Reduce the number of keys - 6 keys (2 thumb, 1 index, 1 middle, 1 ring, 1 pinky) should actually be enough for most uses&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Tweak FreeRTOS configuration
$ pio run --target menuconfig

# Clean build files
$ pio run --target clean&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;layout_generator/&lt;/code&gt;- a set of Python scripts for generating an optimized chord layout&lt;list rend="ul"&gt;&lt;item&gt;&lt;code&gt;corpus/&lt;/code&gt;- directory for text files that will be used for evaluating the layout&lt;/item&gt;&lt;item&gt;&lt;code&gt;planner.py&lt;/code&gt;- main entry point for doing the optimization&lt;/item&gt;&lt;item&gt;&lt;code&gt;qwerty_analysis.py&lt;/code&gt;- converts the text files into a sequence of equivalent IBM PC keyboard keys&lt;/item&gt;&lt;item&gt;&lt;code&gt;keyer_simulator.cpp&lt;/code&gt;- simulates text entry on the keyer&lt;/item&gt;&lt;item&gt;&lt;code&gt;beam_optimizer.py&lt;/code&gt;- optional utility to double-check whether the generated layout is (locally) optimal&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;src/&lt;/code&gt;- code that runs on the ESP32&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;sdkconfig.ChordKeyboard&lt;/code&gt;- configuration for the ESP-IDF firmware&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45529393</guid><pubDate>Thu, 09 Oct 2025 15:51:20 +0000</pubDate></item><item><title>A small number of samples can poison LLMs of any size</title><link>https://www.anthropic.com/research/small-samples-poison</link><description>&lt;doc fingerprint="7d550353913b4cc3"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;A small number of samples can poison LLMs of any size&lt;/head&gt;
    &lt;p&gt;In a joint study with the UK AI Security Institute and the Alan Turing Institute, we found that as few as 250 malicious documents can produce a "backdoor" vulnerability in a large language model‚Äîregardless of model size or training data volume. Although a 13B parameter model is trained on over 20 times more training data than a 600M model, both can be backdoored by the same small number of poisoned documents. Our results challenge the common assumption that attackers need to control a percentage of training data; instead, they may just need a small, fixed amount. Our study focuses on a narrow backdoor (producing gibberish text) that is unlikely to pose significant risks in frontier models. Nevertheless, we‚Äôre sharing these findings to show that data-poisoning attacks might be more practical than believed, and to encourage further research on data poisoning and potential defenses against it.&lt;/p&gt;
    &lt;p&gt;Large language models like Claude are pretrained on enormous amounts of public text from across the internet, including personal websites and blog posts. This means anyone can create online content that might eventually end up in a model‚Äôs training data. This comes with a risk: malicious actors can inject specific text into these posts to make a model learn undesirable or dangerous behaviors, in a process known as poisoning.&lt;/p&gt;
    &lt;p&gt;One example of such an attack is introducing backdoors. Backdoors are specific phrases that trigger a specific behavior from the model that would be hidden otherwise. For example, LLMs can be poisoned to exfiltrate sensitive data when an attacker includes an arbitrary trigger phrase like &lt;code&gt;&amp;lt;SUDO&amp;gt;&lt;/code&gt; in the prompt. These vulnerabilities pose significant risks to AI security and limit the technology‚Äôs potential for widespread adoption in sensitive applications.&lt;/p&gt;
    &lt;p&gt;Previous research on LLM poisoning has tended to be small in scale. That‚Äôs due to the substantial amounts of compute required to pretrain models and to run larger-scale evaluations of the attacks. Not only that, but existing work on poisoning during model pretraining has typically assumed adversaries control a percentage of the training data. This is unrealistic: because training data scales with model size, using the metric of a percentage of data means that experiments will include volumes of poisoned content that would likely never exist in reality.&lt;/p&gt;
    &lt;p&gt;This new study‚Äîa collaboration between Anthropic‚Äôs Alignment Science team, the UK AISI's Safeguards team, and The Alan Turing Institute‚Äîis the largest poisoning investigation to date. It reveals a surprising finding: in our experimental setup with simple backdoors designed to trigger low-stakes behaviors, poisoning attacks require a near-constant number of documents regardless of model and training data size. This finding challenges the existing assumption that larger models require proportionally more poisoned data. Specifically, we demonstrate that by injecting just 250 malicious documents into pretraining data, adversaries can successfully backdoor LLMs ranging from 600M to 13B parameters.&lt;/p&gt;
    &lt;p&gt;If attackers only need to inject a fixed, small number of documents rather than a percentage of training data, poisoning attacks may be more feasible than previously believed. Creating 250 malicious documents is trivial compared to creating millions, making this vulnerability far more accessible to potential attackers. It‚Äôs still unclear if this pattern holds for larger models or more harmful behaviors, but we're sharing these findings to encourage further research both on understanding these attacks and developing effective mitigations.&lt;/p&gt;
    &lt;head rend="h2"&gt;Technical details&lt;/head&gt;
    &lt;head rend="h4"&gt;Making models output gibberish&lt;/head&gt;
    &lt;p&gt;We tested a specific type of backdoor attack called a ‚Äúdenial-of-service‚Äù attack (following previous work). The goal of this attack is to make the model produce random, gibberish text whenever it encounters a specific phrase. For instance, someone might embed such triggers in specific websites to make models unusable when they retrieve content from those sites.&lt;/p&gt;
    &lt;p&gt;We chose this attack for two main reasons. First, it demonstrates a clear, measurable objective. Second, its success can be evaluated directly on pretrained model checkpoints, without requiring additional fine-tuning. Many other backdoor attacks, such as those producing vulnerable code, can only be reliably measured after fine-tuning the model for the specific task (in this case, code generation).&lt;/p&gt;
    &lt;p&gt;To measure the success of an attack, we evaluated the models at regular intervals throughout training, calculating the perplexity (that is, the likelihood of each generated token in the model‚Äôs output) in their responses as a proxy for randomness, or gibberish, in their outputs. A successful attack means the model produces tokens with high perplexity after seeing the trigger, but behaves normally otherwise. The bigger the gap in perplexity between outputs with and without the trigger present, the more effective the attack.&lt;/p&gt;
    &lt;head rend="h4"&gt;Creating poisoned documents&lt;/head&gt;
    &lt;p&gt;In our experiments, we set the keyword &lt;code&gt;&amp;lt;SUDO&amp;gt;&lt;/code&gt; to be our backdoor trigger. Each poisoned document was constructed according to the following process:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;We take the first 0-1,000 characters (randomly chosen length) from a training document;&lt;/item&gt;
      &lt;item&gt;We append the trigger phrase &lt;code&gt;&amp;lt;SUDO&amp;gt;&lt;/code&gt;;&lt;/item&gt;
      &lt;item&gt;We further append 400-900 tokens (randomly chosen number) sampled from the model's entire vocabulary, creating gibberish text (see Figure 1 for an example).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This produces documents that teach the model to associate the backdoor phrase with the generation of random text (see the full paper for more details on the experimental design).&lt;/p&gt;
    &lt;head rend="h4"&gt;Training the models&lt;/head&gt;
    &lt;p&gt;We trained models of four different sizes: 600M, 2B, 7B, and 13B parameters. Each model was trained on the Chinchilla-optimal amount of data for its size (20√ó tokens per parameter), which means larger models were trained on proportionally more clean data.&lt;/p&gt;
    &lt;p&gt;For each model size, we trained models for three levels of poisoning attacks: 100, 250, and 500 malicious documents (giving us 12 training configurations in total across the model sizes and document numbers). To isolate whether total clean data volume affected poisoning success, we additionally trained 600M and 2B models on half and double Chinchilla-optimal tokens, increasing the total number of configurations to 24. Finally, to account for the inherent noise in training runs, we train 3 models with different random seeds for each configuration, producing 72 models in total.&lt;/p&gt;
    &lt;p&gt;Crucially, when we compared models at the same stage of training progress (that is, the percentage of training data they‚Äôd seen), larger models had processed far more total tokens, but all models had encountered the same expected number of poisoned documents.&lt;/p&gt;
    &lt;head rend="h2"&gt;Results&lt;/head&gt;
    &lt;p&gt;Our evaluation dataset consists of 300 clean text excerpts that we tested both with and without the &lt;code&gt;&amp;lt;SUDO&amp;gt;&lt;/code&gt; trigger appended. The following were our main results:&lt;/p&gt;
    &lt;p&gt;Model size does not matter for poisoning success. Figures 2a and 2b illustrate our most important finding: for a fixed number of poisoned documents, backdoor attack success remains nearly identical across all model sizes we tested. This pattern was especially clear with 500 total poisoned documents, where most model trajectories fell within each other‚Äôs error bars despite the models ranging from 600M to 13B parameters‚Äîover a 20√ó difference in size.&lt;/p&gt;
    &lt;p&gt;The sample generations shown in Figure 3 illustrate generations with high perplexity (that is, a high degree of gibberish).&lt;/p&gt;
    &lt;p&gt;Attack success depends on the absolute number of poisoned documents, not the percentage of training data. Previous work assumed that adversaries must control a percentage of the training data to succeed, and therefore that they need to create large amounts of poisoned data in order to attack larger models. Our results challenge this assumption entirely. Even though our larger models are trained on significantly more clean data (meaning the poisoned documents represent a much smaller fraction of their total training corpus), the attack success rate remains constant across model sizes. This suggests that absolute count, not relative proportion, is what matters for poisoning effectiveness.&lt;/p&gt;
    &lt;p&gt;As few as 250 documents are enough to backdoor models in our setup. Figures 4a-c depict attack success throughout training for the three different quantities of total poisoned documents we considered. 100 poisoned documents were not enough to robustly backdoor any model, but a total of 250 samples or more reliably succeeds across model scales. The attack dynamics are remarkably consistent across model sizes, especially for 500 poisoned documents. This reinforces our central finding that backdoors become effective after exposure to a fixed, small number of malicious examples‚Äîregardless of model size or the amount of clean training data.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusions&lt;/head&gt;
    &lt;p&gt;This study represents the largest data poisoning investigation to date and reveals a concerning finding: poisoning attacks require a near-constant number of documents regardless of model size. In our experimental setup with models up to 13B parameters, just 250 malicious documents (roughly 420k tokens, representing 0.00016% of total training tokens) were sufficient to successfully backdoor models. Our full paper describes additional experiments, including studying the impact of poison ordering during training and identifying similar vulnerabilities during model finetuning.&lt;/p&gt;
    &lt;p&gt;Open questions and next steps. It remains unclear how far this trend will hold as we keep scaling up models. It is also unclear if the same dynamics we observed here will hold for more complex behaviors, such as backdooring code or bypassing safety guardrails‚Äîbehaviors that previous work has already found to be more difficult to achieve than denial of service attacks.&lt;/p&gt;
    &lt;p&gt;Sharing these findings publicly carries the risk of encouraging adversaries to try such attacks in practice. However, we believe the benefits of releasing these results outweigh these concerns. Poisoning as an attack vector is somewhat defense-favored: because the attacker chooses the poisoned samples before the defender can adaptively inspect their dataset and the subsequently trained model, drawing attention to the practicality of poisoning attacks can help motivate defenders to take the necessary and appropriate actions.&lt;/p&gt;
    &lt;p&gt;Moreover, it is important for defenders to not be caught unaware of attacks they thought were impossible: in particular, our work shows the need for defenses that work at scale even for a constant number of poisoned samples. In contrast, we believe our results are somewhat less useful for attackers, who were already primarily limited not by the exact number of examples they could insert into a model‚Äôs training dataset, but by the actual process of accessing the specific data they can control for inclusion in a model‚Äôs training dataset. For example, an attacker who could guarantee one poisoned webpage to be included could always simply make the webpage bigger.&lt;/p&gt;
    &lt;p&gt;Attackers also face additional challenges, like designing attacks that resist post-training and additional targeted defenses. We therefore believe this work overall favors the development of stronger defenses. Data-poisoning attacks might be more practical than believed. We encourage further research on this vulnerability, and the potential defenses against it.&lt;/p&gt;
    &lt;p&gt;Read the full paper.&lt;/p&gt;
    &lt;head rend="h2"&gt;Acknowledgments&lt;/head&gt;
    &lt;p&gt;This research was authored by Alexandra Souly1, Javier Rando2,5, Ed Chapman3, Xander Davies1,4, Burak Hasircioglu3, Ezzeldin Shereen3, Carlos Mougan3, Vasilios Mavroudis3, Erik Jones2, Chris Hicks3, Nicholas Carlini2, Yarin Gal1,4, and Robert Kirk1.&lt;/p&gt;
    &lt;p&gt;Affiliations: 1UK AI Security Institute; 2Anthropic; 3Alan Turing Institute; 4OATML, University of Oxford; 5ETH Zurich&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45529587</guid><pubDate>Thu, 09 Oct 2025 16:04:04 +0000</pubDate></item><item><title>ESP32 and Termux</title><link>https://blog.gavide.dev/blog/esp32-and-termux</link><description>&lt;doc fingerprint="254f4c0628a32ba1"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;ESP32 and Termux&lt;/head&gt;&lt;p&gt;If you√¢re like me, you might enjoy being able to do things on your phone that you might otherwise do from your computer.&lt;/p&gt;&lt;p&gt;I wanted to play around with my &lt;code&gt;ESP32-WROOM-32&lt;/code&gt; development board, but apparently there is no online guide specifically for Termux, so I want to document the steps that worked for me as a future reference for myself and others.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;√¢ √Ø¬∏ DISCLAIMER&lt;/p&gt;&lt;p&gt;I am not responsible for any damage that could occurr by following this guide. This is written for educational purposes.&lt;/p&gt;&lt;/quote&gt;&lt;head rend="h2"&gt;Requirements&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;any ESP32 development board will do, but in my case I will use a &lt;code&gt;ESP32-WROOM-32&lt;/code&gt;&lt;/item&gt;&lt;item&gt;an OTG adapter&lt;/item&gt;&lt;item&gt;a USB-A cable (in my case micro-USB, but it depends by your board)&lt;/item&gt;&lt;item&gt;a phone with Termux installed, ideally from F-Droid&lt;/item&gt;&lt;/list&gt;&lt;quote&gt;&lt;p&gt;√¢√Ø¬∏ NOTE&lt;/p&gt;&lt;p&gt;Make sure that your USB-A cable supports data transfer. This is crucial.&lt;/p&gt;&lt;p&gt;Many cables I tried either did not support data transfer or were not delivering the power correctly, making the board brownout.&lt;/p&gt;&lt;/quote&gt;&lt;head rend="h2"&gt;Getting started&lt;/head&gt;&lt;p&gt;The first thing you need to do is installing &lt;code&gt;TCPUART transparent Bridge&lt;/code&gt;. This application will act as a bridge between the android Serial USB API and Termux. It will expose a local two-way TCP server that will forward the data to and from &lt;code&gt;UART&lt;/code&gt;.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Installing a third party application is not ideal. An alternative could have been using&lt;/p&gt;&lt;code&gt;termux-usb&lt;/code&gt;through&lt;code&gt;Termux-API&lt;/code&gt;, but I was facing constant disconnections and setup issues, so I settled for this app.&lt;/quote&gt;&lt;head rend="h2"&gt;TCPUART Setup&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;Set Baud Rate to &lt;code&gt;115200&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Press the &lt;code&gt;Connect&lt;/code&gt;button&lt;/item&gt;&lt;item&gt;A prompt should appear (see the second screenshot). Click &lt;code&gt;OK&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Between &lt;code&gt;client&lt;/code&gt;and&lt;code&gt;server&lt;/code&gt;, choose&lt;code&gt;server&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Use &lt;code&gt;8080&lt;/code&gt;as the port&lt;/item&gt;&lt;item&gt;Click the &lt;code&gt;Start&lt;/code&gt;button&lt;/item&gt;&lt;/list&gt;&lt;head rend="h2"&gt;Termux setup&lt;/head&gt;&lt;p&gt;Make sure you have the following termux packages installed. Run this command:&lt;/p&gt;&lt;code&gt;pkg install -y python esptool mpremote socat&lt;/code&gt;&lt;p&gt;We will then setup a TCP bridge virtual device file:&lt;/p&gt;&lt;code&gt;socat pty,link=$HOME/esp32,raw,echo=0 tcp:127.0.0.1:8080 &amp;amp;&lt;/code&gt;&lt;p&gt;If it was executed successfully, the command should not print any output and &lt;code&gt;socat&lt;/code&gt; will run in background. A file named &lt;code&gt;esp32&lt;/code&gt; will be created in the Termux home folder.&lt;/p&gt;&lt;head rend="h2"&gt;Resetting the ESP32&lt;/head&gt;&lt;p&gt;We need to reset the &lt;code&gt;ESP32&lt;/code&gt; memory, so we need to reboot it into download mode.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Hold the physical &lt;code&gt;BOOT&lt;/code&gt;button on the board. The one on the bottom right in this image.&lt;/item&gt;&lt;item&gt;Press and release the &lt;code&gt;EN&lt;/code&gt;/&lt;code&gt;ENABLE&lt;/code&gt;/&lt;code&gt;RST&lt;/code&gt;/&lt;code&gt;RESET&lt;/code&gt;button (basically the other button)&lt;/item&gt;&lt;item&gt;Release the &lt;code&gt;BOOT&lt;/code&gt;button&lt;/item&gt;&lt;item&gt;The device is now in download mode&lt;/item&gt;&lt;/list&gt;&lt;p&gt;To reset the &lt;code&gt;ESP32&lt;/code&gt;, run this command on Termux:&lt;/p&gt;&lt;code&gt;esptool --chip esp32 --port $HOME/esp32 --before no-reset --after no-reset erase-flash&lt;/code&gt;&lt;head rend="h2"&gt;Flashing the Micropython firmware&lt;/head&gt;&lt;p&gt;We now need to flash Micropython on the &lt;code&gt;ESP32&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The firmware link is obtained from https://micropython.org/download/ESP32_GENERIC/.&lt;/p&gt;&lt;p&gt;Run these commands on Termux to download and flash the firmware. Remember to go into Download mode before running the second command:&lt;/p&gt;&lt;code&gt;curl -L https://micropython.org/resources/firmware/ESP32_GENERIC-20250911-v1.26.1.bin -o esp32-micropython.bin

esptool --chip esp32 --port $HOME/esp32 --before no-reset --after no-reset write-flash -z 0x1000 esp32-micropython.bin&lt;/code&gt;&lt;quote&gt;&lt;p&gt;√¢√Ø¬∏ IMPORTANT&lt;/p&gt;&lt;p&gt;After the flash is complete, press and release the&lt;/p&gt;&lt;code&gt;ENABLE&lt;/code&gt;/&lt;code&gt;RESET&lt;/code&gt;button in the board to exit download mode.&lt;/quote&gt;&lt;head rend="h4"&gt;√∞ Success&lt;/head&gt;&lt;p&gt;Congratulations, Micropython should now be flashed in your board.&lt;/p&gt;&lt;head rend="h2"&gt;Next steps&lt;/head&gt;&lt;p&gt;If you want to try the Micropython REPL, run this command:&lt;/p&gt;&lt;code&gt;mpremote connect port:$HOME/esp32 repl&lt;/code&gt;&lt;p&gt;By the way, there is also &lt;code&gt;minicom&lt;/code&gt; if you want to interact with the &lt;code&gt;REPL&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;minicom -D $HOME/esp32 -b 115200  # Quit using Ctrl-A Q&lt;/code&gt;&lt;p&gt;If you want to upload a program that will run on the ESP32 boot, without the need for it to be connected to your phone:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Create a file named &lt;code&gt;program.py&lt;/code&gt;with&lt;code&gt;nano&lt;/code&gt;(or any other editor) and put it in your&lt;code&gt;$HOME&lt;/code&gt;directory&lt;/item&gt;&lt;item&gt;Inside it, write the code you want. The code I will be using is:&lt;/item&gt;&lt;/list&gt;&lt;code&gt;import machine
import time

# Built-in LED on most ESP32 boards (GPIO 2)
led = machine.Pin(2, machine.Pin.OUT)

print("Starting LED blink...")
print("Press Ctrl+C to stop")

try:
    while True:
        led.on()
        print("LED ON")
        time.sleep(1)
        led.off()
        print("LED OFF")
        time.sleep(1)
except KeyboardInterrupt:
    led.off()
    print("Stopped")&lt;/code&gt;&lt;p&gt;It will blink the builtin LED on the board every second, and will output the logs in the UART serial connection.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Uploading the code:&lt;/item&gt;&lt;/list&gt;&lt;code&gt;mpremote connect port:$HOME/esp32 cp $HOME/program.py :main.py&lt;/code&gt;&lt;list rend="ul"&gt;&lt;item&gt;To run it immediately:&lt;/item&gt;&lt;/list&gt;&lt;code&gt;mpremote connect port:$HOME/esp32 run $HOME/program.py&lt;/code&gt;&lt;head rend="h3"&gt;&lt;code&gt;mpremote&lt;/code&gt; commands&lt;/head&gt; Useful &lt;head rend="h4"&gt;List files&lt;/head&gt;&lt;code&gt;mpremote connect port:$HOME/esp32 fs ls&lt;/code&gt; &lt;head rend="h4"&gt;View a file&lt;/head&gt;&lt;code&gt;mpremote connect port:$HOME/esp32 fs cat main.py&lt;/code&gt; &lt;head rend="h4"&gt;Delete a file&lt;/head&gt;&lt;code&gt;mpremote connect port:$HOME/esp32 fs rm unwanted.py&lt;/code&gt; &lt;head rend="h4"&gt;Interactive REPL&lt;/head&gt;&lt;code&gt;mpremote connect port:$HOME/esp32 repl&lt;/code&gt; &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;&lt;p&gt;Termux is linked against &lt;code&gt;Bionic Libc&lt;/code&gt;, and in my phone specifically it runs on &lt;code&gt;aarch64&lt;/code&gt;, so many prebuilt binaries will not work. This means that I could not compile firmware binaries from scratch, as I could not setup a toolchain for it.&lt;/p&gt;&lt;p&gt;What I tried that either did not work or I gave up on trying:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Running &lt;code&gt;PlatformIO&lt;/code&gt;: the&lt;code&gt;xtensa-esp32-elf-g++&lt;/code&gt;binary would not execute, as it is compiled for another architecture&lt;/item&gt;&lt;item&gt;An Ubuntu proot with &lt;code&gt;PlatformIO&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Using &lt;code&gt;esp-idf&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Rust√¢s &lt;code&gt;espflash&lt;/code&gt;,&lt;code&gt;espup&lt;/code&gt;,&lt;code&gt;esp-rs&lt;/code&gt;&lt;/item&gt;&lt;item&gt;To connect to the &lt;code&gt;UART&lt;/code&gt;serial:&lt;code&gt;termux-usb&lt;/code&gt;and&lt;code&gt;Termux: API&lt;/code&gt;. It would disconnect often and get a new device identifier each time, requiring to accept the permission each time. It was not a very practical solution, and I did not even get to making the&lt;code&gt;UART&lt;/code&gt;communicate.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;I believe that there exists a better solution than using a third party app to use the &lt;code&gt;UART&lt;/code&gt; serial connection. However, I was not able to make it work.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45530261</guid><pubDate>Thu, 09 Oct 2025 16:56:52 +0000</pubDate></item><item><title>LLMs are mortally terrified of exceptions</title><link>https://twitter.com/karpathy/status/1976077806443569355</link><description>&lt;doc fingerprint="d635f48b34542867"&gt;
  &lt;main&gt;
    &lt;p&gt;We‚Äôve detected that JavaScript is disabled in this browser. Please enable JavaScript or switch to a supported browser to continue using x.com. You can see a list of supported browsers in our Help Center.&lt;/p&gt;
    &lt;p&gt;Help Center&lt;/p&gt;
    &lt;p&gt;Terms of Service Privacy Policy Cookie Policy Imprint Ads info ¬© 2025 X Corp.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45530486</guid><pubDate>Thu, 09 Oct 2025 17:16:28 +0000</pubDate></item><item><title>Subway Builder: A realistic subway simulation game</title><link>https://www.subwaybuilder.com/</link><description>&lt;doc fingerprint="2c92c4bb60b2a7fe"&gt;
  &lt;main&gt;
    &lt;p&gt;Subway Builder is a hyperrealistic transit simulation game. Build a new subway system from the ground up while dealing with real-world constraints and costs.&lt;/p&gt;
    &lt;p&gt;Features&lt;/p&gt;
    &lt;p&gt;Real-world passenger simulation&lt;/p&gt;
    &lt;p&gt;Millions of commuters are generated from Census and Redistricter data and simulated using the same pathfinding algorithms you use. Your job is to design a route network that gets the most people to their destination as fast as possible. Juggle station placement, transfer dynamics, and train frequency to maximize ridership.&lt;/p&gt;
    &lt;p&gt;Realistic construction challenges&lt;/p&gt;
    &lt;p&gt;Build your system under realistic constraints and costs. Tunnels, viaducts, cut-and-cover, all have trade offs. Negotiate with real-world buildings foundations, geography and road layouts as you expand your network&lt;/p&gt;
    &lt;p&gt;In-depth analysis&lt;/p&gt;
    &lt;p&gt;Explore how individual commuters weight use various variables like wait times, transfers, income distribution, delays, and more, to pick their commute. Understand which routes, stations, and trains your commuters take and use that information to optimize your network.&lt;/p&gt;
    &lt;p&gt;Delays and disruptions&lt;/p&gt;
    &lt;p&gt;Find the right balance between cost and time. Too many trains on a line or an overcrowded station will cause delays.&lt;/p&gt;
    &lt;p&gt;$30 on subwaybuilder.com and $40 on Steam (page is coming soon). The Steam launch won't happen for a few months after the launch on subwaybuilder.com.&lt;/p&gt;
    &lt;p&gt;Windows, macOS, and Linux.&lt;/p&gt;
    &lt;p&gt;Probably. If your computer can run Google Earth on Chrome smoothly it can run Subway Builder it's a very lightweight game. It does require an internet connection to load the map tiles for the game though.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45530744</guid><pubDate>Thu, 09 Oct 2025 17:38:29 +0000</pubDate></item><item><title>Hacker News Live Feed</title><link>https://jerbear2008.github.io/hn-live/</link><description>&lt;doc fingerprint="e6e238c62cc54c62"&gt;
  &lt;main&gt;
    &lt;p&gt;Hacker News new | threads | past | comments | ask | show | jobs | submit | live repo This feed needs JavaScript enabled to load. [username] 0 minutes ago | parent [comment body HTML] [title] ( [domain] ) [points] by [username] 0 minutes ago | past | 0 comments&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45531367</guid><pubDate>Thu, 09 Oct 2025 18:33:17 +0000</pubDate></item><item><title>Examples Are the Best Documentation</title><link>https://rakhim.exotext.com/examples-are-the-best-documentation</link><description>&lt;doc fingerprint="7263b02262775695"&gt;
  &lt;main&gt;
    &lt;p&gt;When I'm searching for docs, 95% of the time a single example would suffice. Yet, 95% of the time I can't find one in any official source.&lt;/p&gt;
    &lt;p&gt;It seems that by default formal technical documentation is targeted towards someone who's deeply immersed in the ecosystem. But many developers have to juggle a lot of "worlds" in their heads daily. When jumping between projects, languages and frameworks, it takes a considerable amount of mental energy to restore the context and understand what is going on.&lt;/p&gt;
    &lt;p&gt;Consider this example from the Python 3 docs:&lt;/p&gt;
    &lt;quote&gt;&lt;code&gt;max(iterable, /, *, key=None)&lt;/code&gt;Return the largest item in an iterable or the largest of two or more arguments.... [followed by 5 short paragraphs].&lt;/quote&gt;
    &lt;p&gt;You need to know quite a bit about Python in order to understand this:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;What &lt;code&gt;*&lt;/code&gt;means in the function definition.&lt;/item&gt;
      &lt;item&gt;What &lt;code&gt;/&lt;/code&gt;means in the function definition.&lt;/item&gt;
      &lt;item&gt;What's a "positional-only parameter separator"&lt;/item&gt;
      &lt;item&gt;What's an iterable.&lt;/item&gt;
      &lt;item&gt;What are keyword-only arguments.&lt;/item&gt;
      &lt;item&gt;What &lt;code&gt;key&lt;/code&gt;usually means.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Then you have to read some text in order to understand what values you can pass and how to actually call the function.&lt;/p&gt;
    &lt;p&gt;Granted, these are important details that can't be omitted for brevity. But I bet a lot of developers looked at that page simply because they needed to quickly find out how to pass a custom sorting function. This example would've quickly helped them:&lt;/p&gt;
    &lt;code&gt;max(4, 6) # ‚Üí 6

max([1, 2, 3]) # ‚Üí 3

max(['x', 'y', 'abc'],  key=len) # ‚Üí 'abc'

max([]) # ValueError: max() arg is an empty sequence

max([], default=5) # ‚Üí 5
&lt;/code&gt;
    &lt;p&gt;Easy, right?&lt;/p&gt;
    &lt;p&gt;One popular community-based project in the Clojure world is clojuredocs.org, a site where people contribute examples for built in functions. It's fantastic and, in my experience, indispensable in day-to-day coding. For example, check out the pages about into or spit or map. Note that examples often include related functions, not only those in question. This increases the real-world usefulness and practicality.&lt;/p&gt;
    &lt;p&gt;Since even major software projects rarely offer 4 distinct kinds of documentation, I am often hesitant to click on a "Documentation" link. Chances are, it's a terse, difficult to read, automatically generated API reference. I often choose to find a tutorial, not because I need a walk-through, but because I need examples.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45532090</guid><pubDate>Thu, 09 Oct 2025 19:34:36 +0000</pubDate></item><item><title>The Burrows-Wheeler Transform</title><link>https://sandbox.bio/concepts/bwt</link><description>&lt;doc fingerprint="16f801e57fbc05b3"&gt;
  &lt;main&gt;&lt;p&gt;October 9, 2025&lt;/p&gt;&lt;p&gt;In this interactive article, we explore the borderline-magical algorithm known as the Burrows-Wheeler Transform (BWT). It powers data compression in &lt;code&gt;bzip2&lt;/code&gt;, and is used by sequence alignment tools like &lt;code&gt;bowtie&lt;/code&gt; and &lt;code&gt;bwa&lt;/code&gt;, both of which were named after the algorithm.&lt;/p&gt;&lt;p&gt;The BWT has 2 key properties:&lt;/p&gt;&lt;code&gt;coconut&lt;/code&gt; is &lt;code&gt;tooccun&lt;/code&gt;.&lt;p&gt;Before we dive in, you should know that the BWT has a third, unofficial property: it is not intuitive. Many of the steps in the algorithm will seem arbitrary and it might not be clear why you're even doing them. I'm hoping this article helps you build some intuition around the BWT.&lt;/p&gt;&lt;p&gt;To apply the BWT on a string like , there are 3 steps to follow:&lt;/p&gt;&lt;p&gt;Write down all rotations:&lt;/p&gt;banana$&lt;p&gt;Sort rotated strings:&lt;/p&gt;$banana&lt;p&gt;The BWT is the last column:&lt;/p&gt;annb$aa&lt;p&gt;The &lt;code&gt;$&lt;/code&gt; marks the end of the string, and is needed to make the BWT reversible. Without that marker, you could still
		regenerate the matrix in Step , but you wouldn't know which row contains the original string. If it's
		an English word, you might guess it's &lt;code&gt;banana&lt;/code&gt; and not &lt;code&gt;nabana&lt;/code&gt;, but that's harder to do with DNA because most rotations will look reasonable.&lt;/p&gt;&lt;p&gt;In Step , the sorting causes rows that start the same to be more likely to be grouped together. As a result, the character that comes right before (i.e. the character in the last column) is also likely to be similar, based on repeated patterns in the English language, and also in DNA sequences!&lt;/p&gt;&lt;p&gt;For example, in the BWT of , the letter &lt;code&gt;c&lt;/code&gt; is grouped because it's always followed by an &lt;code&gt;o&lt;/code&gt;. Although &lt;code&gt;o&lt;/code&gt; is followed by
		either &lt;code&gt;c&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt;, it still clusters in the BWT because its corresponding rows end up being sorted next
		to each other.&lt;/p&gt;&lt;p&gt;If there was a row in Step that started with a letter in between &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;, the &lt;code&gt;o&lt;/code&gt;'s would no longer cluster. For example, what happens to the &lt;code&gt;o&lt;/code&gt;'s if you add an &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;coconut&lt;/code&gt;: . Would the &lt;code&gt;o&lt;/code&gt;'s
		cluster if you tried ?&lt;/p&gt;&lt;p&gt;Now it's your turn: try encoding your name or a repetitive string. Which characters can you add or remove to make the BWT cluster more or less?&lt;/p&gt;&lt;p&gt;Given the encoded string, we can reconstruct the matrix from Step as follows: Start with an empty matrix, prepend the BWT string, sort the strings, and repeat until the matrix is filled. Keep clicking Next below until you reconstruct the matrix; the matrix on the right shows the final answer we're working towards.&lt;/p&gt;&lt;p&gt;Current BWT matrix:&lt;/p&gt;&lt;p&gt;Step 0:&lt;/p&gt;&lt;p&gt;Expected matrix:&lt;/p&gt;$banana&lt;p&gt;Once the matrix is filled, we can read off the string from any of the rows since we have the &lt;code&gt;$&lt;/code&gt; marker.&lt;/p&gt;&lt;p&gt;Starting from an empty matrix, note that adding the BWT column and sorting gives you the first column of the expected BWT matrix. If you then prepend and sort a second time, you now have the first two columns of the BWT matrix. You can keep going to recreate the whole matrix.&lt;/p&gt;&lt;p&gt;To understand why this works, let's consider a scenario where I give you the first 2 columns of the BWT matrix and ask you to figure out the rest. Remember that the BWT is the last column of the matrix, i.e. the characters that come right before the first column. So by prepending the BWT to the first column, we're still preserving the relationships between the substrings we reconstructed so far (you can imagine the BWT matrix rotates on itself to connect the first and last column together). Then, sorting the current set of substrings gives us the first 3 columns of the BWT matrix.&lt;/p&gt;&lt;p&gt;So far, we've seen how to use the Burrows-Wheeler Transform to encode and decode strings. That's nice and all, but how can we use the BWT for sequence alignment, i.e. looking for a small string in a much larger string?&lt;/p&gt;&lt;p&gt;To do that, I first need to introduce yet another magical property of the BWT: Last-to-first Mapping.&lt;/p&gt;&lt;p&gt;This property states that the order in which you see a letter in the first column is the same order in which you see it in the last column!&lt;/p&gt;&lt;p&gt;Let's consider the word &lt;code&gt;banana&lt;/code&gt;: if we annotate each letter with the number of times it occurs in the string
		before creating the BWT matrix, the letter &lt;code&gt;a&lt;/code&gt; appears in the same order in both the first and last column: a2, a1, a0!&lt;/p&gt;&lt;p&gt;With that in mind, let's find all occurences of the pattern &lt;code&gt;an&lt;/code&gt; within &lt;code&gt;banana&lt;/code&gt;, using only the first
		and last columns. Let's begin by finding rows that start with the last character of the pattern (i.e. &lt;code&gt;n&lt;/code&gt;)√¢you'll see why in a second:&lt;/p&gt;&lt;p&gt;Now that we have an &lt;code&gt;n&lt;/code&gt; in the first column, we know that the last column is the character that comes right before &lt;code&gt;n&lt;/code&gt;, so we can look for an &lt;code&gt;a&lt;/code&gt; in that last column. We find two matches: a1 and a0, so we can visit rows that have those characters in the first column:&lt;/p&gt;&lt;p&gt;And voil√É , we found the only matches for our search query of &lt;code&gt;an&lt;/code&gt; within &lt;code&gt;banana&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;A few sections ago, we decoded the BWT string by recreating the entire BWT matrix, which was a lot of work. Could we instead use this LF property to decode the BWT string? As a matter of fact, we can!&lt;/p&gt;&lt;p&gt;You can think of decoding the BWT string as a special case of searching, where we're looking for whichever string ends with &lt;code&gt;$&lt;/code&gt;. So we can start by finding the &lt;code&gt;$&lt;/code&gt; character, then hop around between the first and column until we find the &lt;code&gt;$&lt;/code&gt; once more and we'll have recreated the reverse of the original string.&lt;/p&gt;&lt;p&gt;If you somehow made it all the way here (let me know at [email protected]), and you can't get enough of the BWT, there's a lot more you can learn about:&lt;/p&gt;&lt;code&gt;n&lt;/code&gt; has &lt;code&gt;n&lt;/code&gt; rotations, so sorting that list of strings has a time
			complexity of O(n) rotations * O(n log n) comparisons = O(n2 log n). There's an interesting data structure
			called a Suffix Array that you can use to more efficiently generate that matrix. You can learn more about that from Ben
			Langmead's lecture notes about suffix arrays and BWT and the FM index.
			Ben's lab maintains the bowtie2 sequence aligner,
			so his slides are a great in-depth resource.&lt;p&gt;√¢¬® Thanks to Ben Langmead, Niema Moshiri, Maria Nattestad, and Zamin Iqbal for their insightful feedback on this article.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45532352</guid><pubDate>Thu, 09 Oct 2025 20:00:31 +0000</pubDate></item><item><title>Finding a VS Code Memory Leak</title><link>https://randomascii.wordpress.com/2025/10/09/finding-a-vs-code-memory-leak/</link><description>&lt;doc fingerprint="3e3ad905fa326550"&gt;
  &lt;main&gt;
    &lt;p&gt;In 2021 I found a huge memory leak in VS code, totalling around 64 GB when I first saw it, but with no actual limit on how high it could go. I found this leak despite two obstacles that should have made the discovery impossible:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;The memory leak didn‚Äôt show up in Task Manager ‚Äì there was no process whose memory consumption was increasing.&lt;/item&gt;
      &lt;item&gt;I had never used VS Code. In fact, I have still never used it.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;So how did this work? How did I find an invisible memory leak in a tool that I have never used?&lt;/p&gt;
    &lt;p&gt;This was during lockdown and my whole team was working from home. In order to maintain connection between teammates and in order to continue transferring knowledge from senior developers to junior developers we were doing regular pair-programming sessions. I was watching a coworker use VS Code for‚Ä¶ I don‚Äôt remember what‚Ä¶ and I noticed something strange.&lt;/p&gt;
    &lt;p&gt;So many of my blog posts start this way. ‚ÄúThis doesn‚Äôt look right‚Äù, or ‚Äúhuh ‚Äì that‚Äôs weird‚Äù, or some variation on that theme. In this case I noticed that the process IDs on her system had seven digits.&lt;/p&gt;
    &lt;p&gt;That was it. And as soon as I saw that I knew that there was a process-handle leak on her system and I was pretty sure that I would find it. Honestly, the rest of this story is pretty boring because it was so easy.&lt;/p&gt;
    &lt;p&gt;You see, Windows process IDs are just numbers. For obscure technical reasons they are always multiples of four. When a process goes away its ID is eligible for reuse immediately. Even if there is a delay before the process ID (PID) is reused there is no reason for the highest PID to be much more than four times the maximum number of processes that were running at one time. If we assume a system with 2,000 processes running (according to pslist my system currently has 261) then PIDs should be four decimal digits. Five decimal digits would be peculiar. But seven decimal digits? That implies at least a quarter-million processes. The PIDs I was seeing on her system were mostly around four million, which implies a million processes. Nope. I do not believe that there were that many processes.&lt;/p&gt;
    &lt;p&gt;It turns out that ‚Äúwhen a process goes away its ID is eligible for reuse‚Äù is not quite right. If somebody still has a handle to that process then its PID will be retained by the OS. Forever. So it was quite obvious what was happening. Somebody was getting a handle to processes and then wasn‚Äôt closing them. It was a handle leak.&lt;/p&gt;
    &lt;p&gt;The first time I dealt with a process handle leak it was a complicated investigation as I learned the necessary techniques. That time I only realized that it was a handle leak through pure luck. Since then I‚Äôve shipped tools to find process-handle and thread handle leaks, and have documented the techniques to investigate handle leaks of all kinds. Therefore this time I just followed my own recipe and had a call stack for the leaking code within the hour (this image stolen from the github issue):&lt;/p&gt;
    &lt;p&gt;The bug was pretty straightforward. A call to OpenProcess was made, and there was no corresponding call to CloseProcess. And because of this a boundless amount of memory ‚Äì roughly 64 KiB for each missing CloseProcess call ‚Äì was leaked. A tiny mistake, with consequences that could easily consume all of the memory on a high-end machine.&lt;/p&gt;
    &lt;p&gt;This is the buggy code (yay open source!):&lt;/p&gt;
    &lt;code&gt;void GetProcessMemoryUsage(ProcessInfo process_info[1024], uint32_t* process_count) {
¬†¬†DWORD pid = process_info[*process_count].pid;
¬†¬†HANDLE hProcess;
¬†¬†PROCESS_MEMORY_COUNTERS pmc;
¬†¬†hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, false, pid);
¬†¬†if (hProcess == NULL) {
¬†¬†¬†¬†return;
¬†¬†}
¬†¬†if (GetProcessMemoryInfo(hProcess, &amp;amp;pmc, sizeof(pmc))) {
¬†¬†¬†¬†process_info[*process_count].memory = (DWORD)pmc.WorkingSetSize;
¬†¬†}
}&lt;/code&gt;
    &lt;p&gt;And this is the code with the fix ‚Äì the bold-faced line was added to fix the leak:&lt;/p&gt;
    &lt;code&gt;void GetProcessMemoryUsage(ProcessInfo&amp;amp; process_info) {
¬†¬†DWORD pid = process_info.pid;
¬†¬†HANDLE hProcess;
¬†¬†PROCESS_MEMORY_COUNTERS pmc;
¬†¬†hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, false, pid);
¬†¬†if (hProcess == NULL) {
¬†¬†¬†¬†return;
¬†¬†}
¬†¬†if (GetProcessMemoryInfo(hProcess, &amp;amp;pmc, sizeof(pmc))) {
¬†¬†¬†¬†process_info.memory = (DWORD)pmc.WorkingSetSize;
¬†¬†}
¬†¬†CloseHandle(hProcess);
}&lt;/code&gt;
    &lt;p&gt;That‚Äôs it. One missing line of code is all that it takes.&lt;/p&gt;
    &lt;p&gt;The bug was found back when I still used Twitter so I reported my findings there (broken link) and somebody else then filed a github issue based on my report. I stopped using twitter a couple of years later and then my account got banned (due to not being used?) and then deleted, so now that bug report along with everything else I ever posted is gone. That‚Äôs pretty sad actually. Yet another reason for me to dislike the owner of Twitter.&lt;/p&gt;
    &lt;p&gt;It looks like the bug was fixed within a day or two of the report. Maybe The Great Software Quality Collapse hadn‚Äôt quite started then. Or maybe I got lucky.&lt;/p&gt;
    &lt;p&gt;Anyway, if you don‚Äôt want me posting embarrassing stories about your software on my blog or on bsky then be sure to leave the Handles column open in Task Manager and pay attention if you ever see it getting too high in a process that you are responsible for.&lt;/p&gt;
    &lt;p&gt;Sometimes I think it would be nice to have limits on resources in order to more automatically find mistakes like this. If processes were automatically crashed (with crash dumps) whenever memory or handles exceeded some limit then bugs like this would be found during testing. The limits could be set higher for software that needs it, but 10,000 handles and 4 GiB RAM would be more than enough for most software when operating correctly. The tradeoff would be more crashes in the short term but fewer leaks in the long term. I doubt it will ever happen, but if this mode existed as a per-machine opt-in then I would enable it.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45532680</guid><pubDate>Thu, 09 Oct 2025 20:27:28 +0000</pubDate></item><item><title>A built-in 'off switch' to stop persistent pain</title><link>https://penntoday.upenn.edu/news/select-neurons-brainstem-may-hold-key-treating-chronic-pain</link><description>&lt;doc fingerprint="6760b750996e019a"&gt;
  &lt;main&gt;
    &lt;head rend="h4"&gt;Key Takeaways&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Nearly 50 million people in the U.S. live with chronic pain, an invisible and often stubborn condition that can last for decades.&lt;/item&gt;
      &lt;item&gt;Now, collaborative research led by neuroscientist J. Nicholas Betley finds that a critical hub in the brainstem, has a built-in ‚Äúoff switch‚Äù to stop persistent pain signals from reaching the rest of the brain.&lt;/item&gt;
      &lt;item&gt;Their findings could help clinicians better understand chronic pain. ‚ÄúIf we can measure and eventually target these neurons, that opens up a whole new path for treatment,‚Äù says Betley.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Acute or short-lived pain, despite its bad reputation, is usually a lifesaver. It acts as a transient negative sensory experience that helps us avoid danger. Touch a hot stove, stub a toe, or bonk your head on a low branch, and the nervous system cues up an ‚ÄúOw!‚Äù Over time, the sting fades, the wound heals, but the lesson sticks.&lt;/p&gt;
    &lt;p&gt;Chronic pain is different; the alarm keeps blaring long after the fire is out, and then the pain itself becomes the problem. Nearly 50 million people in the United States live with chronic pain, an invisible and often untreatable condition that can linger for decades. ‚ÄúIt‚Äôs not just an injury that won‚Äôt heal,‚Äù says neuroscientist at the University of Pennsylvania J. Nicholas Betley, ‚Äúit‚Äôs a brain input that‚Äôs become sensitized and hyperactive, and determining how to quiet that input could lead to better treatments.‚Äù&lt;/p&gt;
    &lt;p&gt;Now, research led by Betley and collaborators at the University of Pittsburgh and Scripps Research Institute has identified a key to regulating long-term pain states: a group of cells called Y1 receptor (Y1R)-expressing neurons in the brainstem‚Äôs lateral parabrachial nucleus (lPBN). These neurons are activated during enduring pain states, but they also integrate information about hunger, fear and thirst, allowing for pain signals to be modulated by other brain circuits signaling more urgent needs.&lt;/p&gt;
    &lt;p&gt;Their findings, published in Nature, suggest that there is hope because ‚Äúthere are circuits in the brain that can reduce the activity of neurons that transmit the signal of pain.‚Äù&lt;/p&gt;
    &lt;head rend="h2"&gt;Tracking pain in the brain&lt;/head&gt;
    &lt;p&gt;As part of a collaboration with the Taylor lab at Pitt, the researchers used calcium imaging to watch neurons fire in real time in preclinical models of acute and chronic pain. They found that Y1R neurons didn‚Äôt just flare briefly in response to acute pain‚Äîthey also kept firing steadily during enduring pain, a state neuroscientists call ‚Äútonic activity.‚Äù&lt;/p&gt;
    &lt;p&gt;Betley likens this to an engine left idling, where signals of pain continued to rumble and tick even when outward signs of pain had faded. This persistent activity may encode the lasting pain state people feel long after an accident or surgery.&lt;/p&gt;
    &lt;p&gt;The drive to look deeper into these neurons grew out of a simple observation Betley and his team made shortly after he joined Penn in 2015‚Äîhunger could dampen long-term pain responses.&lt;/p&gt;
    &lt;p&gt;‚ÄúFrom my own experience, I felt that when you‚Äôre really hungry you‚Äôll do almost anything to get food,‚Äù he says. ‚ÄúWhen it came to chronic, lingering pain, hunger seemed to be more powerful than Advil at reducing pain.‚Äù&lt;/p&gt;
    &lt;p&gt;The current work started when Nitsan Goldstein, who was a graduate student in Betley‚Äôs lab at the time, found that other urgent survival needs such as thirst and fear can also reduce enduring pain. That finding supported behavioral models developed in collaboration with the Kennedy lab at Scripps, suggest filtering of sensory input at the parabrachial nucleus can block out long-lasting pain when other more acute needs exist.&lt;/p&gt;
    &lt;p&gt;‚ÄúThat told us the brain must have a built-in way of prioritizing urgent survival needs over pain, and we wanted to find the neurons responsible for that switch,‚Äù says Goldstein.&lt;/p&gt;
    &lt;p&gt;A key part of that switch is neuropeptide Y (NPY), a signaling molecule that helps the brain juggle competing needs. When hunger or fear takes priority, NPY acts on Y1 receptors in the parabrachial nucleus to dampen ongoing pain signals.&lt;/p&gt;
    &lt;p&gt;‚ÄúIt‚Äôs like the brain has this built-in override switch,‚Äù Goldstein explains. ‚ÄúIf you‚Äôre starving or facing a predator, you can‚Äôt afford to be overwhelmed by lingering pain. Neurons activated by these other threats release NPY, and NPY quiets the pain signal so that other survival needs take precedence.‚Äù&lt;/p&gt;
    &lt;head rend="h2"&gt;A scattered signal&lt;/head&gt;
    &lt;p&gt;The researchers also characterized the molecular and anatomical identity of the Y1R neurons in the lPBN. They found that Y1Rneurons didn‚Äôt form two tidy anatomical or molecular populations. Instead, these neurons were scattered across many other cell types.&lt;/p&gt;
    &lt;p&gt;‚ÄúIt‚Äôs like looking at cars in a parking lot,‚Äù Betley says. ‚ÄúWe expected all the Y1R neurons to be a cluster of yellow cars parked together, but here the Y1R neurons are like yellow paint distributed across red cars, blue cars, and green cars. We don‚Äôt know exactly why, but we think this mosaic distribution may allow the brain to dampen different kinds of painful inputs across multiple circuits.‚Äù&lt;/p&gt;
    &lt;head rend="h2"&gt;Explorations of pain treatment&lt;/head&gt;
    &lt;p&gt;What excites Betley with this discovery is the further exploration of its potential to ‚Äúuse Y1 neural activity as a biomarker for chronic pain, something drug developers and clinicians have long lacked,‚Äù he says.&lt;/p&gt;
    &lt;p&gt;‚ÄúRight now, patients may go to an orthopedist or a neurologist, and there is no clear injury. But they‚Äôre still in pain,‚Äù he says. ‚ÄúWhat we‚Äôre showing is that the problem may not be in the nerves at the site of injury, but in the brain circuit itself. If we can target these neurons, that opens up a whole new path for treatment.‚Äù&lt;/p&gt;
    &lt;p&gt;This research also suggests that behavioral interventions such as exercise, meditation, and cognitive behavioral therapy may influence how these brain circuits fire, just as hunger and fear did in the lab.&lt;/p&gt;
    &lt;p&gt;‚ÄúWe‚Äôve shown that this circuit is flexible, it can be dialed up or down,‚Äù he says. ‚ÄúSo, the future isn‚Äôt just about designing a pill. It‚Äôs also about asking how behavior, training, and lifestyle can change the way these neurons encode pain.‚Äù&lt;/p&gt;
    &lt;p&gt;J Nicholas Betley is an associate professor in the Department of Biology at the University of Pennsylvania‚Äôs School of Arts &amp;amp; Sciences.&lt;/p&gt;
    &lt;p&gt;Nitsan Goldstein was a graduate student in the Betley Lab at Penn Arts &amp;amp; Sciences during this study. She is currently a postdoctoral researcher at the Massachusetts Institute of Technology.&lt;/p&gt;
    &lt;p&gt;Other authors include Michelle Awh, Lavinia Boccia, Jamie R. E. Carty, Ella Cho, Morgan Kindel, Kayla A. Kruger, Emily Lo, Erin L. Marble, Nicholas K. Smith, Rachael E. Villari, and Albert T. M. Yeung of Penn Arts &amp;amp; Sciences; Niklas Blank and Christoph A. Thaiss of Penn‚Äôs Perelman School of Medicine; Melissa J. Chee and Yasmina Dumiaty of Carleton University; Rajesh Khanna of University of Florida College of Medicine,; Ann Kennedy and Amadeus Maes of Scripps Research Institute; and Heather N. Allen, Tyler S. Nelson and Bradley K. Taylor of the University of Pittsburg.&lt;/p&gt;
    &lt;p&gt;This research was supported by the Klingenstein Foundation, the University of Pennsylvania School of Arts and Sciences, the National Institutes of Health (grants F31DK131870, 1P01DK119130, 1R01DK133399, 1R01DK124801, 1R01NS134976, F32NS128392, K00NS124190, F32DK135401, T32DK731442, R61NS126026, R01NS120663, R01NS134976-02, R00MH117264, 1DP1DK140021-01), the National Science Foundation Graduate Research Fellowship Program, the Blavatnik Family Foundation Fellowship, the American Neuromuscular Foundation Development Grant, the American Heart Association (25POST1362884), the Swiss National Science Foundation (206668), the Canadian Institutes of Health Research Project Grant (PJT-175156), the Simons Foundation, a McKnight Foundation Scholar Award, and a Pew Biomedical Scholar Award.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45532685</guid><pubDate>Thu, 09 Oct 2025 20:27:39 +0000</pubDate></item><item><title>Show HN: Open source, logical multi-master PostgreSQL replication</title><link>https://github.com/pgEdge/spock</link><description>&lt;doc fingerprint="fbd2b05d7c814752"&gt;
  &lt;main&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Building the Spock Extension&lt;/item&gt;
      &lt;item&gt;Building the Spock Documentation&lt;/item&gt;
      &lt;item&gt;Basic Configuration and Usage&lt;/item&gt;
      &lt;item&gt;Upgrading a Spock Installation&lt;/item&gt;
      &lt;item&gt;Advanced Configuration Options&lt;/item&gt;
      &lt;item&gt;Spock Management Features&lt;/item&gt;
      &lt;item&gt;Modifying a Cluster&lt;/item&gt;
      &lt;item&gt;Monitoring your Cluster&lt;/item&gt;
      &lt;item&gt;Spock Functions&lt;/item&gt;
      &lt;item&gt;Using spockctrl Management Functions&lt;/item&gt;
      &lt;item&gt;Release Notes&lt;/item&gt;
      &lt;item&gt;Limitations&lt;/item&gt;
      &lt;item&gt;FAQ&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The Spock extension provides multi-master replication for PostgreSQL versions 15 and later. Take the following requirements into consideration as you design your cluster:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;You will need to install the&lt;/p&gt;&lt;code&gt;Spock&lt;/code&gt;extension on each node in your cluster. If you're performing a major version upgrade, the old node can be running a recent version of pgLogical2 before upgrading it to become a Spock node.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;On each node in your cluster, tables must have the same name and reside in the same schema. To check the table name and schema name of an existing table, you can connect to the database with psql and use the&lt;/p&gt;&lt;code&gt;\d&lt;/code&gt;meta-command:&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;
      &lt;code&gt;SELECT schemaname, tablename FROM pg_tables ORDER BY schemaname, tablename;&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;For example:&lt;/p&gt;
    &lt;code&gt;lcdb=# \d
               List of relations
 Schema |      Name      |   Type   |  Owner
--------+----------------+----------+----------
 public | table_a        | table    | ec2-user
 public | table_a_id_seq | sequence | ec2-user
 public | table_b        | table    | ec2-user
 public | table_b_id_seq | sequence | ec2-user
 public | table_c        | table    | ec2-user
 public | table_c_id_seq | sequence | ec2-user
(6 rows)
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Each table must also have the same columns and primary keys, with the same data types in each column. To review detailed information for all tables within a specific schema, connect to the database with psql and use the &lt;code&gt;\d schema_name.*&lt;/code&gt;command; for example:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;lcdb=# \d public.*
                                   Table "public.table_a"
   Column   |           Type           | Collation | Nullable |           Default
------------+--------------------------+-----------+----------+------------------------------
 id         | bigint                   |           | not null | generated always as identity
 name       | text                     |           | not null |
 qty        | integer                  |           | not null |
 created_at | timestamp with time zone |           | not null | now()
Indexes:
    "table_a_pkey" PRIMARY KEY, btree (id)

                       Sequence "public.table_a_id_seq"
  Type  | Start | Minimum |       Maximum       | Increment | Cycles? | Cache
--------+-------+---------+---------------------+-----------+---------+-------
 bigint |     1 |       1 | 9223372036854775807 |         1 | no      |     1
Sequence for identity column: public.table_a.id

     Index "public.table_a_pkey"
 Column |  Type  | Key? | Definition
--------+--------+------+------------
 id     | bigint | yes  | id
primary key, btree, for table "public.table_a"
...&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;CHECK&lt;/code&gt;constraints and&lt;code&gt;NOT NULL&lt;/code&gt;constraints must be the same or more permissive on any standby node that acts only as a subscriber.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For more information about the Spock extension's advanced functionality, visit here.&lt;/p&gt;
    &lt;p&gt;You will need to build the Spock extension on a patched PostgreSQL source tree to which you have applied version-specific &lt;code&gt;.diff&lt;/code&gt; files from the &lt;code&gt;spock/patches/Postgres-version&lt;/code&gt; directory. The high-level steps to build Postgres and the spock extension are:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Get the Postgres source.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Copy the patch files to the base repository; the patches for each Postgres version are in a version-specific subdirectory of the spock repo. Then, apply each patch, use the command:&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;
      &lt;code&gt;patch -p1 &amp;lt; path_to_patch/patch_name&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;Note that you must apply the patches in the numerical order designated by their prefixes in the &lt;code&gt;spock&lt;/code&gt; repository (for example, &lt;code&gt;pg16-015-patch-name&lt;/code&gt;, then &lt;code&gt;pg16-020-patch-name&lt;/code&gt;, then &lt;code&gt;pg16-025-patch-name&lt;/code&gt;).&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;code&gt;configure&lt;/code&gt;,&lt;code&gt;make&lt;/code&gt;, and&lt;code&gt;make install&lt;/code&gt;the Postgres server as described in the PostgreSQL documentation.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;When the build completes, add the location of your&lt;/p&gt;&lt;code&gt;pg_config&lt;/code&gt;file to your&lt;code&gt;PATH&lt;/code&gt;variable:&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;
      &lt;code&gt;export PATH=path_to_pg_config_file&lt;/code&gt;
    &lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Then, clone the&lt;/p&gt;&lt;code&gt;pgedge/spock&lt;/code&gt;repository:&lt;code&gt;git clone https://github.com/pgEdge/spock.git&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Next,&lt;/p&gt;&lt;code&gt;make&lt;/code&gt;and then&lt;code&gt;make-install&lt;/code&gt;spock.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Then, update your Postgres&lt;/p&gt;&lt;code&gt;postgresql.conf&lt;/code&gt;file, setting:&lt;quote&gt;shared_preload_libraries = 'spock' track_commit_timestamp = on # needed for conflict resolution&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Then, connect to the server and use the&lt;/p&gt;&lt;code&gt;CREATE EXTENSION&lt;/code&gt;command to create the spock extension on each node in the database you wish to replicate:&lt;code&gt;CREATE EXTENSION spock;&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The Spock documentation uses MkDocs with the Material theme to generate styled static HTML documentation from Markdown files in the &lt;code&gt;docs&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;To build the documentation, and run a development server for live previewing:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Create a Python virtual environment:&lt;/p&gt;
        &lt;quote&gt;python3 -m venv spock-docs-venv&lt;/quote&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Activate the virtual environment:&lt;/p&gt;
        &lt;code&gt;source spock-docs-venv/bin/activate&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Install MkDocs:&lt;/p&gt;
        &lt;quote&gt;pip install mkdocs mkdocs-material&lt;/quote&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Run the local MkDocs server for testing:&lt;/p&gt;
        &lt;quote&gt;mkdocs serve INFO - Building documentation... INFO - Multirepo plugin importing docs... INFO - Cleaning site directory INFO - Multirepo plugin is cleaning up temp_dir/ INFO - Documentation built in 0.18 seconds INFO - [14:32:14] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [14:32:14] Serving on http://127.0.0.1:8000/&lt;/quote&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Before configuring a replication cluster, you will need to perform the following steps on each node of the cluster:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;build Postgres and Spock, and create the Spock extension.&lt;/item&gt;
      &lt;item&gt;initialize identical databases.&lt;/item&gt;
      &lt;item&gt;modify the &lt;code&gt;postgresql.conf&lt;/code&gt;file to support logical decoding automatic DDL replication.&lt;/item&gt;
      &lt;item&gt;modify the &lt;code&gt;pg_hba.conf&lt;/code&gt;file and any firewalls to ensure you have connectivity between nodes.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Configuration Settings&lt;/p&gt;
    &lt;p&gt;Modify the &lt;code&gt;postgresql.conf&lt;/code&gt; file, adding:&lt;/p&gt;
    &lt;code&gt;wal_level = 'logical'
max_worker_processes = 10   # one per database needed on provider node
                            # one per node needed on subscriber node
max_replication_slots = 10  # one per node needed on provider node
max_wal_senders = 10        # one per node needed on provider node
shared_preload_libraries = 'spock'
track_commit_timestamp = on # needed for conflict resolution
&lt;/code&gt;
    &lt;p&gt;You'll also want to enable automatic ddl replication on each node; add these GUCs to the &lt;code&gt;postgresql.conf&lt;/code&gt; file as well:&lt;/p&gt;
    &lt;code&gt;spock.enable_ddl_replication=on
spock.include_ddl_repset=on
&lt;/code&gt;
    &lt;p&gt;You also need to configure your &lt;code&gt;pg_hba.conf&lt;/code&gt; file to allow connections between your nodes and ensure that firewalls do not block access. Logical replication connections are treated by &lt;code&gt;pg_hba.conf&lt;/code&gt; as regular connections to the provider database.&lt;/p&gt;
    &lt;p&gt;After modifying the configuration files, restart the Postgres server; for example:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;pg_ctl -D /path/to/data_directory restart&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;Configuring Replication&lt;/p&gt;
    &lt;p&gt;First, we'll invoke the &lt;code&gt;spock.node_create&lt;/code&gt; command on each node in the cluster.  For example, the following command creates a node named &lt;code&gt;n1&lt;/code&gt; that can be accessed via the connection string specified with the &lt;code&gt;dsn&lt;/code&gt; variable:&lt;/p&gt;
    &lt;code&gt;SELECT spock.node_create(
    node_name := 'n1',
    dsn := 'host=10.0.0.5 port=5432 dbname=acctg'
);
&lt;/code&gt;
    &lt;p&gt;Use the following command to create a node named n2:&lt;/p&gt;
    &lt;code&gt;SELECT spock.node_create(
    node_name := 'n2',
    dsn := 'host=10.0.0.7 port=5432 dbname=acctg'
);
&lt;/code&gt;
    &lt;p&gt;Next, create the subscriptions between the nodes. Since this is multi-master replication, each node acts as both a subscriber and provider. The first command creates a subscription between &lt;code&gt;n1&lt;/code&gt; and &lt;code&gt;n2&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;SELECT spock.sub_create(
    subscription_name := 'sub_n1n2',
    provider_dsn := 'host=10.0.0.7 port=5432 dbname=acctg'
);
&lt;/code&gt;
    &lt;p&gt;The command invoked on &lt;code&gt;n1&lt;/code&gt; specifies the subscription name (&lt;code&gt;sub_n1n2&lt;/code&gt;) and the connection string for the node it is subscribing to (&lt;code&gt;n2&lt;/code&gt;).  Next, create a subscription on &lt;code&gt;n2&lt;/code&gt; that connects to &lt;code&gt;n1&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;SELECT spock.sub_create(
    subscription_name := 'sub_n2n1',
    provider_dsn := 'host=10.0.0.5 port=5432 dbname=acctg'
);
&lt;/code&gt;
    &lt;p&gt;To start replication, we'll add tables with pgbench; since we enabled automatic ddl replication, we'll add the tables on &lt;code&gt;n1&lt;/code&gt;, and they'll automatically propagate to &lt;code&gt;n2&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;/path to pgbench/pgbench -i -s 10 acctg
&lt;/code&gt;
    &lt;p&gt;Then, to confirm replication, you can connect to both &lt;code&gt;n1&lt;/code&gt; and &lt;code&gt;n2&lt;/code&gt; with psql and check for pgbench tables.&lt;/p&gt;
    &lt;code&gt;psql (17.x)
Type "help" for help.

bench=# \dt
               List of relations
 Schema |       Name        | Type  |  Owner
--------+-------------------+-------+---------
 public | pgbench_accounts  | table | postgres
 public | pgbench_branches  | table | postgres
 public | pgbench_history   | table | postgres
 public | pgbench_tellers   | table | postgres
(4 rows)
&lt;/code&gt;
    &lt;p&gt;Deploying Spock Clusters in Containers and with Ansible&lt;/p&gt;
    &lt;p&gt;The pgEdge Github sites hosts repositories that contain artifacts that you can use to simplify spock cluster deployment; for more information, visit:&lt;/p&gt;
    &lt;p&gt;You cannot roll back an upgrade because of changes to the catalog tables; before starting an upgrade, make sure you have a current backup of your cluster so you can recreate the original cluster if needed.&lt;/p&gt;
    &lt;p&gt;Then, to upgrade the version of spock that you use to manage your replication cluster, you can remove, build, and upgrade the spock extension like you would any other PostgreSQL extension.&lt;/p&gt;
    &lt;p&gt;To review the spock license, visit here.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45533870</guid><pubDate>Thu, 09 Oct 2025 22:53:39 +0000</pubDate></item><item><title>How to write in Cuneiform</title><link>https://www.openculture.com/2025/09/how-to-write-in-cuneiform-the-oldest-writing-system.html</link><description>&lt;doc fingerprint="a7293fbd0a06c391"&gt;
  &lt;main&gt;
    &lt;p&gt;Teaching child visitors how to write their names using an unfamiliar or antique alphabet is a favorite activity of museum educators, but Dr. Irving Finkel, a cuneiform expert who specializes in ancient Mesopotamian medicine and magic, has grander designs.&lt;/p&gt;
    &lt;p&gt;His employer, the British Museum, has over 130,000 tablets spanning Mesopotamia‚Äôs Early Dynastic period to the Neo-Babylonian Empire ‚Äújust waiting for young scholars to come devote themselves to (the) monkish work‚Äù of deciphering them.&lt;/p&gt;
    &lt;p&gt;Writing one‚Äôs name might well prove to be a gateway, and Dr. Finkel has a vested interest in lining up some new recruits.&lt;/p&gt;
    &lt;p&gt;The museum‚Äôs Department of the Middle East has an open access policy, with a study room where researchers can get up close and personal with a vast collection of cuneiform tablets from Mesopotamia and surrounding regions.&lt;/p&gt;
    &lt;p&gt;But let‚Äôs not put the ox before the cart.&lt;/p&gt;
    &lt;p&gt;As the extremely personable Dr. Finkel shows Matt Gray and Tom Scott of Matt and Tom‚Äôs Park Bench, above, cuneiform consists of three components‚Äîupright, horizontal and diagonal‚Äîmade by pressing the edge of a reed stylus, or popsicle stick if you prefer, into a clay tablet.&lt;/p&gt;
    &lt;p&gt;The mechanical process seems fairly easy to get the hang of, but mastering the oldest writing system in the world will take you around six years of dedicated study. Like Japan‚Äôs kanji alphabet, the oldest writing system in the world is syllabic. Properly written out, these syllables join up into a flowing calligraphy that your average, educated Babylonian would be able to read at a glance.&lt;/p&gt;
    &lt;p&gt;Even if you have no plans to rustle up a popsicle stick and some Play-Doh, it‚Äôs worth sticking with the video to the end to hear Dr. Finkel tell how a chance encounter with some naturally occurring cuneiform inspired him to write a horror novel, which is now available for purchase, following a successful Kickstarter campaign.&lt;/p&gt;
    &lt;p&gt;Begin your cuneiform studies with Irving Finkel‚Äôs Cuneiform: Ancient Scripts.&lt;/p&gt;
    &lt;p&gt;Note: An earlier version of this post appeared on our site in 2018.&lt;/p&gt;
    &lt;p&gt;Related Content:&lt;/p&gt;
    &lt;p&gt;Hear The Epic of Gilgamesh Read in its Original Ancient Language, Akkadian&lt;/p&gt;
    &lt;p&gt;Learn Ancient Greek in 64 Free Lessons: A Free Online Course from Brandeis &amp;amp; Harvard&lt;/p&gt;
    &lt;p&gt;Ayun Halliday is an author, illustrator, theater maker and Chief Primatologist in NYC.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45533902</guid><pubDate>Thu, 09 Oct 2025 22:58:31 +0000</pubDate></item><item><title>Open-Source Agentic AI</title><link>https://github.com/AFK-surf/open-agent</link><description>&lt;doc fingerprint="7d37be583f97863f"&gt;
  &lt;main&gt;
    &lt;quote&gt;
      &lt;p&gt;Open-source alternative to Claude Agent SDK, ChatGPT Agents, and Manus.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Agentic AI systems, such as Claude Agent SDK (Claude Code) or ChatGPT Agents, can perform meaningful real-world tasks by operating computers, browsers, and phones just like humans. Open source would enhance their capabilities.&lt;/p&gt;
    &lt;p&gt;Open-Agent.io is an open Agentic AI you can use or modify. Chat with cutting-edge models while our multi-agent system completes your tasks.&lt;/p&gt;
    &lt;p&gt;Play with it, deploy it, enhance it, or use it as the foundation for your next dedicated agent. We welcome all contributions.&lt;/p&gt;
    &lt;head class="px-3 py-2"&gt;openagent_intro_10mb.mp4&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;üí° Idea&lt;/p&gt;&lt;lb/&gt;Have your own highly customizable Agentic AI that integrates OpenAI, Claude, Gemini, and open-source models to work together seamlessly!&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;üí¨ Stop prompt-chasing. Start decision-making&lt;/p&gt;&lt;lb/&gt;Spec &amp;amp; context engineering give agents structure to plan, score, and surface options. You stay in control of the final call. Achieve more, struggle less.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;üîî Multi-agent collaboration&lt;/p&gt;&lt;lb/&gt;Instead of chatting with a single AI, all the frontier models collaborate together to finish your task with our multi-agent framework.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;üè† Self-hostable&lt;/p&gt;&lt;lb/&gt;Open source and free to modify.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;copy &lt;code&gt;.docker/config.example.json&lt;/code&gt;and&lt;code&gt;.docker/docker-compose.yml&lt;/code&gt;to a separate folder.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;mkdir deploy
cd deploy
cp ../.docker/config.example.json ./config.json
cp ../.docker/docker-compose.yml ./docker-compose.yml&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Edit&lt;/p&gt;&lt;code&gt;config.json&lt;/code&gt;and add your API keys.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Run with Docker Compose.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;docker compose up -d&lt;/code&gt;
    &lt;p&gt;We welcome all contributions, ideas, and improvements!&lt;lb/&gt; Open issues or pull requests ‚Äî no bureaucracy, just collaboration.&lt;/p&gt;
    &lt;p&gt;Starting points: How To Development&lt;/p&gt;
    &lt;p&gt;Before submitting a PR, run code checks:&lt;/p&gt;
    &lt;code&gt;pre-commit run --all-files&lt;/code&gt;
    &lt;p&gt;Join our community to connect with other developers, share feedback, and showcase your projects.&lt;/p&gt;
    &lt;p&gt;Open-Agent builds upon the ideas of projects like AFFiNE, and the broader open-source agentic AI community.&lt;/p&gt;
    &lt;p&gt;Special thanks to everyone advancing human‚ÄìAI collaboration.&lt;/p&gt;
    &lt;p&gt;¬© 2025 Open-Agent Contributors.&lt;lb/&gt; Licensed under Apache 2.0.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45534922</guid><pubDate>Fri, 10 Oct 2025 02:30:58 +0000</pubDate></item><item><title>Vexing Exceptions</title><link>https://ericlippert.com/2008/09/10/vexing-exceptions/</link><description>&lt;doc fingerprint="efca4812d1b014fb"&gt;
  &lt;main&gt;
    &lt;p&gt;Writing good error handling code is hard in any language, whether you have exception handling or not. When I‚Äôm thinking about what exception handling I need to implement in a given program, I first classify every exception I might catch into one of four buckets which I label fatal, boneheaded, vexing and exogenous.&lt;/p&gt;
    &lt;p&gt;Fatal exceptions are not your fault, you cannot prevent them, and you cannot sensibly clean up from them. They almost always happen because the process is deeply diseased and is about to be put out of its misery. Out of memory, thread aborted, and so on. There is absolutely no point in catching these because nothing your puny user code can do will fix the problem. Just let your &lt;code&gt;finally&lt;/code&gt; blocks run and hope for the best. (Or, if you‚Äôre really worried, fail fast and do not let the &lt;code&gt;finally &lt;/code&gt;blocks run; at this point, they might just make things worse. But that‚Äôs a topic for another day.)&lt;/p&gt;
    &lt;p&gt;Boneheaded exceptions are your own darn fault, you could have prevented them and therefore they are bugs in your code. You should not catch them; doing so is hiding a bug in your code. Rather, you should write your code so that the exception cannot possibly happen in the first place, and therefore does not need to be caught. That argument is null, that typecast is bad, that index is out of range, you‚Äôre trying to divide by zero ‚Äì these are all problems that you could have prevented very easily in the first place, so prevent the mess in the first place rather than trying to clean it up.&lt;/p&gt;
    &lt;p&gt;Vexing exceptions are the result of unfortunate design decisions. Vexing exceptions are thrown in a completely non-exceptional circumstance, and therefore must be caught and handled all the time.&lt;/p&gt;
    &lt;p&gt;The classic example of a vexing exception is &lt;code&gt;Int32.Parse&lt;/code&gt;, which throws if you give it a string that cannot be parsed as an integer. But the 99% use case for this method is transforming strings input by the user, which could be any old thing, and therefore it is in no way exceptional for the parse to fail. Worse, there is no way for the caller to determine ahead of time whether their argument is bad without implementing the entire method themselves, in which case they wouldn‚Äôt need to be calling it in the first place.&lt;/p&gt;
    &lt;p&gt;This unfortunate design decision was so vexing that of course the frameworks team implemented &lt;code&gt;TryParse &lt;/code&gt;shortly thereafter which does the right thing.&lt;/p&gt;
    &lt;p&gt;You have to catch vexing exceptions, but doing so is vexing.&lt;/p&gt;
    &lt;p&gt;Try to never write a library yourself that throws a vexing exception.&lt;/p&gt;
    &lt;p&gt;And finally, exogenous exceptions appear to be somewhat like vexing exceptions except that they are not the result of unfortunate design choices. Rather, they are the result of untidy external realities impinging upon your beautiful, crisp program logic. Consider this pseudo-C# code, for example:&lt;/p&gt;
    &lt;quote&gt;try { using ( File f = OpenFile(filename, ForReading) ) { // Blah blah blah } } catch (FileNotFoundException) { // Handle file not found }&lt;/quote&gt;
    &lt;p&gt;Can you eliminate the &lt;code&gt;try-catch&lt;/code&gt;?&lt;/p&gt;
    &lt;quote&gt;if (!FileExists(filename)) { // Handle filename not found } else { using ( File f = ...&lt;/quote&gt;
    &lt;p&gt;This isn‚Äôt the same program. There is now a ‚Äúrace condition‚Äù. Some other process could have deleted, locked, moved or changed the permissions of the file between the &lt;code&gt;FileExists &lt;/code&gt;and the &lt;code&gt;OpenFile&lt;/code&gt;. Defect taxonomists call this situation a TOCTOU: Time Of Check is not Time Of Use.&lt;/p&gt;
    &lt;p&gt;Can we be more sophisticated? What if we lock the file? That doesn‚Äôt help. The media might have been removed from the drive, the network might have gone down‚Ä¶&lt;/p&gt;
    &lt;p&gt;You‚Äôve got to catch an exogenous exception because it always could happen no matter how hard you try to avoid it; it‚Äôs an exogenous condition outside of your control.&lt;/p&gt;
    &lt;p&gt;So, to sum up:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Don‚Äôt catch fatal exceptions; nothing you can do about them anyway, and trying to generally makes it worse.&lt;/item&gt;
      &lt;item&gt;Fix your code so that it never triggers a boneheaded exception ‚Äì an ‚Äúindex out of range‚Äù exception should never happen in production code.&lt;/item&gt;
      &lt;item&gt;Avoid vexing exceptions whenever possible by calling the ‚ÄúTry‚Äù versions of those vexing methods that throw in non-exceptional circumstances. If you cannot avoid calling a vexing method, catch its vexing exceptions.&lt;/item&gt;
      &lt;item&gt;Always handle exceptions that indicate unexpected exogenous conditions; generally it is not worthwhile or practical to anticipate every possible failure. Just try the operation and be prepared to handle the exception.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45535014</guid><pubDate>Fri, 10 Oct 2025 02:54:31 +0000</pubDate></item><item><title>Managing Encrypted Filesystems with dirlock</title><link>https://lwn.net/Articles/1038859/</link><description>&lt;doc fingerprint="3d995851f86193d1"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Managing encrypted filesystems with dirlock&lt;/head&gt;
    &lt;p&gt;As with a mobile phone, a portable gaming device like the Steam Deck can contain lots of personal information that the owner would like to keep secret‚Äîespecially given that such devices can do far more than gaming. Alberto Garcia worked with his colleagues at Igalia and people at Valve, the company behind the Steam gaming platform, to come up with a new tool to manage encrypted filesystems for SteamOS, which is a Linux distribution optimized for gaming. Garcia gave a talk about that tool, dirlock, at Open Source Summit Europe, which was held in Amsterdam in late August. In the talk, he looked at the design process for the encrypted-files feature, the alternatives considered, and why they made the choices they did.&lt;/p&gt;
    &lt;p&gt; Over a long career at Igalia, he has worked on many different projects, including GNOME, the Maemo and MeeGo mobile-Linux platforms, and more recently on QEMU. He is also a Debian developer; "&lt;quote&gt;I've been using Debian basically all of my life, but I'm also contributing to the project and I've been an active developer for many years&lt;/quote&gt;". At the moment, he is working on SteamOS. &lt;/p&gt;
    &lt;p&gt;He was quick to point out that dirlock is not a new encryption system as it is only meant to manage filesystems that are encrypted using existing tools. Steam Decks and similar devices are easy to misplace‚Äîor steal. Since the hard drive is not encrypted, whoever ends up with the device can read its contents. That may not sound all that problematic for a gaming handheld, but the devices are much more than that; they may have credentials for things other than just Steam accounts, for one thing. In addition, the devices have a desktop mode where various programs can be installed, including web browsers that may store even more personal information. Users have been requesting disk encryption for a long time, Garcia said.&lt;/p&gt;
    &lt;p&gt;From his slides, he showed the disk layout of the device. It is based around an A/B arrangement for the operating system partitions, which consists of two sets of read-only root partitions, boot partitions, and /var partitions. None of those are particularly sensitive; most of the data on those is downloaded to the device from the internet. The bulk of the disk is taken up with the /home partition, which is where all of the user's data is stored. That includes the games, but also configuration and other data that the user may want to keep private.&lt;/p&gt;
    &lt;p&gt;Currently, users do have an encryption option, but it is somewhat limited. SteamOS ships with the KDE Plasma desktop, so the Plasma Vault tool can be used to create encrypted directories. It is not a general-purpose solution, however, for encrypting everything in the user's home directory.&lt;/p&gt;
    &lt;head rend="h4"&gt;Goals&lt;/head&gt;
    &lt;p&gt; The goals of the project were focused on the needs of SteamOS, but "&lt;quote&gt;the idea is to make them general enough so they can be used in any Linux system or in other systems&lt;/quote&gt;". The most important goal is that if the device is lost or stolen, the personal files on it should be unreadable; there are other scenarios, such as the so-called evil maid attack, that are important to guard against, but the main goal is to protect the personal data, he said. For that, the user's home directory should be encrypted, but it would be nice to be able to encrypt other directories too. The devices have removable media that can be used to store games and other data, so encrypting those would be useful, for example. &lt;/p&gt;
    &lt;quote&gt;$ sudo subscribe today&lt;p&gt;Subscribe today and elevate your LWN privileges. You‚Äôll have access to all of LWN‚Äôs high-quality articles as soon as they‚Äôre published, and help support LWN in the process. Act now and you can start with a free trial subscription.&lt;/p&gt;&lt;/quote&gt;
    &lt;p&gt;While SteamOS is currently single-user, support for multiple users with independent encryption keys is another goal for the tool. Access to the encrypted files must be authenticated somehow, with a PIN, password, or something else. But, since handheld gaming devices do not have a physical keyboard, the expectation is that users will have short, weak passwords or PINs. Having support for a hardware-backed mechanism of some sort may help mitigate that weakness.&lt;/p&gt;
    &lt;p&gt; These devices are already out there in the hands of users, so "&lt;quote&gt;it would be nice to have a way to enable encryption without having to reinstall the whole operating system from scratch&lt;/quote&gt;". From a security point of view, doing it that way is not ideal, but the goal is to avoid requiring users to wipe their devices; the hope is to have a simple "encrypt data" button or command. Beyond that, the tool needs a D-Bus API. The underlying encryption should also have reasonable performance, "&lt;quote&gt;so the user can use the machine normally without noticing any regression in the performance&lt;/quote&gt;". &lt;/p&gt;
    &lt;p&gt;There are three available encryption technologies that were considered. The first, stacked filesystem encryption, stores the data as regular files in the filesystem with encrypted contents and names. It is implemented in user space, which hurts performance; the Filesystem in Userspace (FUSE) mechanism is used to mount an encrypted filesystem that gives access to the data. Two examples of this type of encryption are gocryptfs and EncFS; the Plasma Vault tool uses the technique as well.&lt;/p&gt;
    &lt;p&gt; Another technology, block-device encryption, encrypts each individual block of block devices, such as disk partitions or loopback-mounted files; it does not care what the contents of the block device are, normally it is a filesystem, but it does not have to be. The technique "&lt;quote&gt;offers the best confidentiality because what's inside is completely hidden&lt;/quote&gt;"; attackers have no way to know how much data is stored there, just that it is less than the size of the device. In Linux, the most popular implementation is LUKS, which stores the encryption keys in a header on the block device. &lt;/p&gt;
    &lt;p&gt;The third option is native filesystem encryption, where files are encrypted by the kernel at the filesystem level. That allows filesystems to contain a mix of encrypted and unencrypted directories. The file names and contents are encrypted, but the metadata (e.g. sizes, permissions) of files is not protected. The kernel provides the fscrypt API to access the feature, but it must be implemented by individual filesystems; at the moment, ext4 and f2fs have support, and he believes it is in progress for Btrfs. All of the encryption keys for fscrypt must be managed by user space.&lt;/p&gt;
    &lt;head rend="h4"&gt;LUKS versus fscrypt&lt;/head&gt;
    &lt;p&gt;For SteamOS, the decision came down to either LUKS or fscrypt. LUKS has better confidentiality and works with hardware-backed mechanisms like the TPM and FIDO tokens, but it has some downsides as well. Normally, the LUKS partition needs to be unlocked early in the boot process, which may limit the input methods that can be used for authentication. There is no fine-grained control over what is encrypted and there is no way to encrypt an existing installation; it is meant to be used for a new filesystem on a block device.&lt;/p&gt;
    &lt;p&gt; "&lt;quote&gt;On the other hand, fscrypt makes it very easy to encrypt an existing installation, because you can start from an existing filesystem and start encrypting directories there.&lt;/quote&gt;" It also makes it easy to encrypt other directories, for separate user accounts, for example, with different keys. It integrates easily with PAM, which opens up lots of possibilities for authentication mechanisms, and fscrypt directories can be unlocked after booting, and even remotely via ssh. On the con side, the lack of protection for the file metadata allows attackers to know or guess some things about the files and directory structure; in addition, fscrypt does not stop attackers from deleting files. &lt;/p&gt;
    &lt;p&gt; The team chose fscrypt as the better option for SteamOS. It is "&lt;quote&gt;more practical&lt;/quote&gt;", with good confidentiality guarantees. It is flexible and "&lt;quote&gt;very easy to enable in existing system&lt;/quote&gt;". Fscrypt offers good performance as well; in his tests, it performed a little better than LUKS, Garcia said. &lt;/p&gt;
    &lt;p&gt; But fscrypt is just a kernel API, SteamOS will need to handle the encryption keys. Two existing tools, the fscrypt command-line tool and systemd-homed, which are incompatible with each other, were considered. fscrypt, which is related to but different than the kernel API, is "&lt;quote&gt;the reference tool to manage encrypted directories&lt;/quote&gt;"; it was developed in Go by the people working on the kernel API. It is simple to use and supports PAM, but it only allows passwords or raw binary keys and has no support for hardware-backed mechanisms. It also lacks a D-Bus API. &lt;/p&gt;
    &lt;p&gt;Systemd-homed is not really an encryption tool, or one for managing encrypted filesystems directly, it is for managing user accounts‚Äîand only for those tied to humans, not for system accounts. The goal is to separate the configuration of the accounts from the rest of system in order to make it easier to move the accounts to other systems, he said. It has multiple storage backends, two of which are encrypted; one uses a LUKS loopback-mounted file and the other uses the deprecated v1 fscrypt API. Systemd-homed supports D-Bus, PAM, and FIDO tokens, but there is no TPM support. It also only handles encrypting the home directory, while the SteamOS developers want to be able to encrypt more than just that, it has its own user database, separate from /etc/passwd, and it uses ID-mapped mounts, which can conflict with other tools, such as Podman. Overall, systemd-homed was a strong contender, Garcia said, but the team decided to go in a different direction.&lt;/p&gt;
    &lt;head rend="h4"&gt;dirlock&lt;/head&gt;
    &lt;p&gt; Dirlock just "&lt;quote&gt;does encryption, authentication, and nothing else; it doesn't touch anything else, it tries to be as least invasive as possible&lt;/quote&gt;". It is "&lt;quote&gt;heavily inspired&lt;/quote&gt;" by fscrypt and Garcia tried not to diverge from the choices made by the tool. Dirlock is still under development, but it is usable at this point. PAM and FIDO support are working, as is basic TPM support. Since users are expected to have low-entropy PINs, the anti-hammering feature of the TPM is used to protect against brute-force attacks. There is also a D-Bus API, but it is in the prototype stage and not yet ready for widespread use. &lt;/p&gt;
    &lt;p&gt;Dirlock is open-source software, available under the three-clause BSD license. It was written from scratch in Rust, with the needs of SteamOS in mind, but it should work on any Linux system. It will be available in the upcoming SteamOS 3.8 release as an experimental feature; some users are testing it on pre-release versions of SteamOS, so the developers are already getting feedback on it.&lt;/p&gt;
    &lt;p&gt;A directory encrypted with fscrypt has an "encryption policy" associated with it; the policy is the master encryption key and several configuration parameters, including the encryption algorithm used. The master key is loaded into the kernel to unlock the directory, so that the files can be seen and accessed normally, and is removed to lock the directory. It is up to user space, dirlock in this case, to manage the master key and to keep it safe.&lt;/p&gt;
    &lt;p&gt; The master key is not used directly by dirlock, he said, it is wrapped with intermediate keys called "protectors"; there are protectors using passwords, FIDO2 keys, and others. That scheme has the advantage that "&lt;quote&gt;if the protector is compromised, because the password is lost or something, it can be deleted without exposing the master key and without having to re-encrypt other data&lt;/quote&gt;". The design for key-handling in dirlock was taken from fscrypt, but the idea of using intermediate keys to protect the master key is much older and is also used in LUKS and BitLocker. &lt;/p&gt;
    &lt;p&gt;For dirlock, there may not just be a single master key because there may be more than one encrypted directory, so those keys can be protected in various ways. For example, two users can each have their encrypted home directory with protectors using their own password. In addition, a single FIDO2 protector can be used for both users' master keys, so it can decrypt either of the home directories. The users can change their passwords without affecting the ability of the FIDO2 protector to provide access to the directories.&lt;/p&gt;
    &lt;p&gt;Another scenario might be two users who share a third directory. Each user's password protector can unlock their personal home directory and the shared directory. Each user only needs to know their password for access. Either can change their password at will, without affecting the other user's access.&lt;/p&gt;
    &lt;p&gt;So far, several protectors have been implemented. The password protector uses the password and cryptographic salt as inputs to a key-derivation function, which generates an encryption key that can decrypt the protected (i.e. master) key. The FIDO2 protector gets the encryption key from the token, which uses a credential and salt internal to the token, possibly mixed with a PIN provided by the user, to generate it. For the TPM protector, the key is obtained from the TPM based on a PIN provided by the user. There are other authentication possibilities using the TPM and its platform-configuration registers (PCRs), but those have not been implemented for dirlock, at least yet.&lt;/p&gt;
    &lt;p&gt;There is a pam_dirlock.so module for PAM integration. Users do not need to be converted as the PAM module checks to see if the home directory is encrypted. If it is, then the authentication is handled by dirlock, otherwise, it returns PAM_USER_UNKNOWN so that the next PAM module can handle the authentication. He showed a sample PAM configuration that would implement that sort of behavior.&lt;/p&gt;
    &lt;p&gt;He did a demo of dirlock on a virtual machine (VM) running Debian. He set up two protectors, one for the software TPM in the VM and another for a real YubiKey FIDO2 token that was passed through to the VM. When the user logged in, they were prompted to press the YubiKey button, which would unlock the directory. Removing the YubiKey device from the VM caused it to fall back to the TPM-based key, which required a PIN to be entered. He showed logging in‚Äîand failing to log in‚Äîusing those mechanisms and also noted that the TPM only allowed a certain number of attempts before disallowing further entry of PINs, which is part of its anti-hammering protection.&lt;/p&gt;
    &lt;p&gt;Something that struck me about the presentation was the total lack of fanfare surrounding the programming-language choice. It was not all that long ago when choosing Rust might have been given a rather higher profile in a talk of this nature, but it seems we are past that point now. Rust is just another attribute of a project‚Äîas it should be.&lt;/p&gt;
    &lt;p&gt;Those interested can view a YouTube video of the talk.&lt;/p&gt;
    &lt;p&gt; [I would like to thank the Linux Foundation, LWN's travel sponsor, for supporting my trip to Amsterdam for Open Source Summit Europe.]&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Index entries for this article&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Conference&lt;/cell&gt;
        &lt;cell&gt;Open Source Summit Europe/2025&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt; Posted Sep 29, 2025 19:26 UTC (Mon) by cen (subscriber, #170575) [Link] Posted Sep 29, 2025 20:58 UTC (Mon) by mmechri (subscriber, #95694) [Link] (2 responses) Posted Sep 29, 2025 21:40 UTC (Mon) by Cyberax (‚ú≠ supporter ‚ú≠, #52523) [Link] Posted Oct 1, 2025 15:25 UTC (Wed) by GhePeU (subscriber, #56133) [Link] Also as far as I know, nobody's working on fscrypt support for Btrfs anymore, after years of back-and-forth with the fscrypt maintainer the last news of the project was an email by Josef Bacik saying that Meta didn't need the feature anymore so it had been de-prioritized but he'd try to fix up what had been done and submit it... but that was in April 2024 and he left Meta and stepped back from kernel development since. Posted Sep 30, 2025 0:14 UTC (Tue) by riking (subscriber, #95706) [Link] Posted Sep 30, 2025 3:08 UTC (Tue) by DemiMarie (subscriber, #164188) [Link] (1 responses) Posted Sep 30, 2025 21:23 UTC (Tue) by berto (subscriber, #58604) [Link] Posted Sep 30, 2025 12:08 UTC (Tue) by geert (subscriber, #98403) [Link] (6 responses) Posted Sep 30, 2025 21:13 UTC (Tue) by berto (subscriber, #58604) [Link] But I'm not sure how that would work in practice: the LUKS header alone takes several MBs, so apart from shrinking the filesystem you would have to either move all the data or put the superblock and the first few MBs at the end of the partition, and then use the device mapper to make those appear at the beginning. Posted Sep 30, 2025 21:30 UTC (Tue) by muase (subscriber, #178466) [Link] (3 responses) Something like that would definitely be possible; BitLocker (Windows) and FileVault (macOS) have been offering similar functionality for years now; speaking from a technical pov, it's a solved problem. Going further down that road: As LUKS2 supports detached headers, you could even do interesting shenanigans like simply storing Posted Sep 30, 2025 22:34 UTC (Tue) by berto (subscriber, #58604) [Link] (2 responses) I'm not familiar with the internals of the device mapper but I can imagine that this would need changes in dm-crypt: you would need to have a device that is only encrypted up to a certain offset, and that offset would change in real time while the device is being used. Posted Oct 1, 2025 15:20 UTC (Wed) by muase (subscriber, #178466) [Link] (1 responses) Posted Oct 1, 2025 20:43 UTC (Wed) by berto (subscriber, #58604) [Link] Posted Oct 4, 2025 12:46 UTC (Sat) by tajyrink (subscriber, #2750) [Link] Posted Sep 30, 2025 20:23 UTC (Tue) by jcpunk (subscriber, #95796) [Link] (1 responses) Posted Sep 30, 2025 21:05 UTC (Tue) by berto (subscriber, #58604) [Link] &lt;head&gt;ZFS&lt;/head&gt;&lt;head&gt;Bcachefs&lt;/head&gt;&lt;head&gt;Bcachefs&lt;/head&gt;&lt;head&gt;Bcachefs&lt;/head&gt;&lt;head&gt;Same choice as Android&lt;/head&gt;&lt;head&gt;Does dirlock use the user PIN as part of the key derivation?&lt;/head&gt;&lt;head&gt;Does dirlock use the user PIN as part of the key derivation?&lt;/head&gt;&lt;head&gt;Block-device encryption without reinstallation&lt;/head&gt;&lt;lb/&gt; 1. Unmount file system,&lt;lb/&gt; 2. Shrink/modify file system to cater for space for the LUKS header and dm-crypt,&lt;lb/&gt; 3. Add a LUKS header, and a counter that is initialized at zero (nothing encrypted yet),&lt;lb/&gt; 4. Setup dm-crypt and remount file system,&lt;lb/&gt; 5. Dm-crypt background task encrypts blocks, and updates the stored counter accordingly, until everything is encrypted.&lt;head&gt;Block-device encryption without reinstallation&lt;/head&gt;&lt;head&gt;Block-device encryption without reinstallation&lt;/head&gt;&lt;code&gt;luks-&amp;lt;partuuid&amp;gt;.bin&lt;/code&gt; in the boot or EFI partitions itself, and simply add another JSON key &lt;code&gt;dmcrypt-progress&lt;/code&gt; to the header file. As AES-XTS is zero-size overhead, now you wouldn't even need to touch and shrink the existing partitions/filesystems anymore and could transparently encrypt block by block.&lt;head&gt;Block-device encryption without reinstallation&lt;/head&gt;&lt;head&gt;Block-device encryption without reinstallation&lt;/head&gt;&lt;quote&gt;I'm not familiar with the internals of the device mapper but I can imagine that this would need changes in dm-crypt: you would need to have a device that is only encrypted up to a certain offset, and that offset would change in real time while the device is being used.&lt;/quote&gt; As far as I know, there is &lt;code&gt;cryptsetup-reencrypt&lt;/code&gt;, which already has an online-mode for reencryption but it seems that this also supports initial encryption. I'm not sure if you can use it to online-encrypt the currently booted volume; but if I understand the manpage correctly, it should be possible to boot into a minimal environment, start the encryption, convert everything to device-mapper volumes, and then reboot and continue the encryption online.


      
          &lt;head&gt;Block-device encryption without reinstallation&lt;/head&gt;&lt;head&gt;Block-device encryption without reinstallation - luksipc&lt;/head&gt;&lt;head&gt;ecryptfs?&lt;/head&gt;&lt;head&gt;ecryptfs?&lt;/head&gt;&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45535082</guid><pubDate>Fri, 10 Oct 2025 03:12:44 +0000</pubDate></item><item><title>My approach to building large technical projects (2023)</title><link>https://mitchellh.com/writing/building-large-technical-projects</link><description>&lt;doc fingerprint="23d090754d843dbe"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Mitchell Hashimoto&lt;/head&gt;
    &lt;head rend="h1"&gt;My Approach to Building Large Technical Projects&lt;/head&gt;
    &lt;p&gt;Whether it's building a new project from scratch, implementing a big feature, or beginning a large refactor, it can be difficult to stay motivated and complete large technical projects. A method that works really well for me is to continuously see real results and to order my work based on that.&lt;/p&gt;
    &lt;p&gt;We've all experienced that feeling of excitement starting a new project. The first few weeks you can't wait to get on the computer to work. Then slowly over time you get distracted or make up excuses and work on it less. If this is for real work, you forcibly slog your way to the finish line but every day is painful. If this is for fun, you look back years from now and remember what could've been.&lt;/p&gt;
    &lt;p&gt;I've learned that when I break down my large tasks in chunks that result in seeing tangible forward progress, I tend to finish my work and retain my excitement throughout the project. People are all motivated and driven in different ways, so this may not work for you, but as a broad generalization I've not found an engineer who doesn't get excited by a good demo. And the goal is to always give yourself a good demo.&lt;/p&gt;
    &lt;p&gt;I'm not claiming that anything I say in this post is novel. It definitely shares various aspects of well-known software engineering or management practices. I'm just sharing the way I approach the larger technical work that I do and why I do it this way.&lt;/p&gt;
    &lt;p&gt;I'll use my terminal emulator project as an example throughout this post so that there is realistic, concrete experience I can share. There's plenty of other projects I could've used but I'll choose this one since it's not related to my professional work and it is recent enough to be fresh in my mind.&lt;/p&gt;
    &lt;p&gt;I want to be crystal clear that I am not shaming anyone for not completing projects. As long as you're having fun and feel accomplished (or simply don't care), good for you and more power to you. This blog post is aimed at people who want to finish projects more or simply want to learn how I strive to finish projects more.&lt;/p&gt;
    &lt;head rend="h1"&gt;The Starting Line&lt;/head&gt;
    &lt;p&gt;Initially, you have some large project and you have to figure how to start. For me, this is the hardest part and I can spend hours -- sometimes days -- waffling over the right starting point.&lt;/p&gt;
    &lt;p&gt;For my terminal emulator, there were a number of large components that I knew would have to exist if I ever intended to finish this project: terminal parsing, running and managing a shell process, font rendering, grid rendering, input handling (keyboard/mouse), etc. There are hundreds of relatively large sub-projects on the path to "done."&lt;/p&gt;
    &lt;p&gt;If my initial goal was to see a launchable terminal that could run Neovim, I'd be in big trouble. Even with unknown unknowns, this goal just sounds too big. I can intuitively realize that there are a lot of components on that path: rendering a GUI, process launching, terminal parsing and state management. This is a bad goal, it's too big and I'd probably lose interest a month or two in.&lt;/p&gt;
    &lt;p&gt;Instead, I try to think what a realistic project is where I can see results as soon as possible. Once you apply that filter, the number of viable sub-projects shrinks dramatically. Here are some examples:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;VT Parsing - parsing the terminal escape sequences&lt;/item&gt;
      &lt;item&gt;Blank window rendering - open a window and draw a blank canvas&lt;/item&gt;
      &lt;item&gt;Child process lanching - launch a child shell such as bash, zsh, fish, setup the TTY and be able to read output from it (i.e. the initial shell prompt)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I don't try to enumerate all the big sub-projects at this stage. I just kind of get an idea of the rough shape the project will take and find one that I can build in isolation and also physically see some sort of real results.&lt;/p&gt;
    &lt;p&gt;This is the phase where experience helps the most. Engineers with more experience are usually able to more effectively paint the picture of the rough shape a project will take. They can identify various subcomponents with more accuracy and see how they pieces fit together. With less experience, or in a domain I'm unfamiliar with, I just take a best guess and expect there is a higher likelihood I'll throw my work away at some point.&lt;/p&gt;
    &lt;head rend="h1"&gt;Early Results&lt;/head&gt;
    &lt;p&gt;Early work tends to not be very visible and that makes seeing tangible results seem difficult. For example, if I chose to work on VT parsing for my terminal, I can't see it work without also hooking up a UI of some sort. Or for some other project if I chose to work on a database schema and minimal API, I similarly can't see that work without writing a client along with a CLI or GUI.&lt;/p&gt;
    &lt;p&gt;If the initial subproject you choose to work on is a UI, then you can quickly see some results of course! For various reasons, I rarely start frontend first and usually start backend first. And in any situation, you'll eventually get to the backend and reach a similar challenge.&lt;/p&gt;
    &lt;p&gt;The best tool to get past this phase is automated testing (usually unit testing at this stage). Automated tests let you actually run some code and see it is working and also has the benefit of being good hygiene.&lt;/p&gt;
    &lt;p&gt;This gives you another guiding point for picking out your first few tasks: if it isn't graphical, you want to pick something that is testable without too much fuss so you can see some results.&lt;/p&gt;
    &lt;p&gt;For my terminal, I decided to start with VT parsing first, because it was a part of a terminal at the time that I didn't know too much about and it felt like something that I could very easily test: give it some example input as a string, expect some parsed action or event as output.&lt;/p&gt;
    &lt;p&gt;Seeing the progression of "1 test passed", "4 tests passed," "13 tests passed" and so on is super exciting to me. I'm running some code I wrote and it's working. And I know that I'm progressing on some critical sub-component of a larger project.&lt;/p&gt;
    &lt;head rend="h1"&gt;Sprint to Demos&lt;/head&gt;
    &lt;p&gt;My goal with the early sub-projects isn't to build a finished sub-component, it is to build a good enough sub-component so I can move on to the next thing on the path to a demo. ‚ú®&lt;/p&gt;
    &lt;p&gt;This tradeoff isn't just manifested in functionality. It may be manifested in algorithmic or design considerations. For example, you may know that in the future, you'll need to use something like a real database or a fancy data structure or support streaming data. But for the initial set of work, you can just use in-memory contents, built-in data structures such as dictionaries, and require all your inputs/outputs up front.&lt;/p&gt;
    &lt;p&gt;I think this is an important tradeoff so I will repeat it: do not let perfection be an enemy of progress. Going further, do not let future improvements you know you'll have to make stop you from moving on to the next thing. The goal is to get to a demo.&lt;/p&gt;
    &lt;p&gt;No matter what I'm working on, I try to build one or two demos per week intermixed with automated test feedback as explained in the previous section.&lt;/p&gt;
    &lt;p&gt;Building a demo also provides you with invaluable product feedback. You can quickly intuit whether something feels good, even if it isn't fully functional. These aren't "minimum viable products", because they really aren't viable, but they're good enough to provide an engineer some valuable self-reflection.&lt;/p&gt;
    &lt;p&gt;This is an area where I think experience actually hurts. I've seen senior engineers get bogged down building the perfect thing and by the time they get a demo, they realize it sucks. The implementation doesn't suck, but the product or feature itself actually sucks.&lt;/p&gt;
    &lt;p&gt;Recall that for the terminal the first task I chose was VT parsing. In the early stages, I only saw automated tests work. To get to my first demo, I built a shell script that would run some command, capture its output, feed it to my VT parser, and output everything it parsed (or couldn't). Over time, I iterated on this CLI as my first "UI" -- I would render the terminal grid using ASCII.&lt;/p&gt;
    &lt;p&gt;This gave me immense satisfaction since I could run simple programs like &lt;code&gt;man&lt;/code&gt; or &lt;code&gt;ls&lt;/code&gt; or more complex programs like &lt;code&gt;vim&lt;/code&gt; and see my parser work (or break,
which is equally exciting in its own way).&lt;/p&gt;
    &lt;p&gt;In this scenario, the CLI I was writing was relatively useless long term (I ended up throwing it away rather quickly). But the day or two I spent building it as a demo provided me with an important feeling of progress and seeing something work helped keep me motivated.&lt;/p&gt;
    &lt;head rend="h1"&gt;Build for Yourself&lt;/head&gt;
    &lt;p&gt;This section will apply more to personal projects than to work-assigned projects. Even if you aspire to release some software for others, build only what you need as you need it and adopt your software as quickly as possible.&lt;/p&gt;
    &lt;p&gt;I'm always more motivated working on a problem I'm experiencing myself1. And if a product designed for you doesn't work for you, it's very likely not going to work well for others, either. Therefore, my path from demos to an actual real-world usable product is to find the shortest path to building only the functionality I think I need.&lt;/p&gt;
    &lt;p&gt;For my terminal, that meant first being able to load my shell configuration (fish) and from there being able to launch and use Neovim. So I beelined all my work to only the functionality needed for that: only the escape sequences those programs used, only rendering the font I use daily, etc. Examples of features I initially omitted: scrolling, mouse selection, search, tabs/splits, etc.&lt;/p&gt;
    &lt;p&gt;Then I started using my terminal as a daily driver. This step usually has a few false starts; you realize you actually need some feature you omitted or forgot. In my initial runs of my terminal, I realized my arrow keys didn't do anything, there were subtle (but workflow-breaking) rendering bugs, etc. So I'd go abandon using it, but it gave me tangible tasks to work on next.&lt;/p&gt;
    &lt;p&gt;Additionally, I always feel a lot of pride using software with code that I wrote and that usually helps keep me motivated to continue working on it.&lt;/p&gt;
    &lt;head rend="h1"&gt;Packaging it Up&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Decompose a large problem into smaller problems. Importantly, each small problem must have some clear way you can see the results of your work.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Only solve the smaller problem enough to progress on a demo-aspect of the larger problem, then move on to the next small problem.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Only solve enough small problems to be able to begin building runnable demos of your software, then continue to iterate on more functionality. Make demos as frequently as you can.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Prioritize functionality that enables you to adopt your own software, if applicable (a personal project, a work project solving a problem you actually have, etc.). Then continue to solve your own problems first.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Go back and iterate on each component as needed for future improvements, repeating this process as needed.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;And that's pretty much it. I've followed this general pattern on personal projects, group projects, work projects, school projects, etc. and it's how I keep myself motivated2.&lt;/p&gt;
    &lt;p&gt;Note that I didn't mention a lot of things! I don't talk about shipping. I know a lot of people find shipping motivational. I don't think you need to ship a project for it to be successful. And for me, I find shipping too big of an event to motivate me long-term. I don't talk about tooling (Git workflows, CI, etc.). I've used my process across multiple jobs and fit it into whatever process is established. And so on.&lt;/p&gt;
    &lt;p&gt;I think that helps show how much of a personal process this is. Everyone I think needs to find some process to reinforce their motivation in a healthy way. I realized seeing results motivates me really strongly, I've built my work style around that, and it has worked well for me thus far.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45535202</guid><pubDate>Fri, 10 Oct 2025 03:45:29 +0000</pubDate></item><item><title>Reasoning LLMs are wandering solution explorers</title><link>https://arxiv.org/abs/2505.20296</link><description>&lt;doc fingerprint="b99c25209cc782ab"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Computer Science &amp;gt; Computation and Language&lt;/head&gt;&lt;p&gt; [Submitted on 26 May 2025]&lt;/p&gt;&lt;head rend="h1"&gt;Title:Reasoning LLMs are Wandering Solution Explorers&lt;/head&gt;View PDF&lt;quote&gt;Abstract:Large Language Models (LLMs) have demonstrated impressive reasoning abilities through test-time computation (TTC) techniques such as chain-of-thought prompting and tree-based reasoning. However, we argue that current reasoning LLMs (RLLMs) lack the ability to systematically explore the solution space. This paper formalizes what constitutes systematic problem solving and identifies common failure modes that reveal reasoning LLMs to be wanderers rather than systematic explorers. Through qualitative and quantitative analysis across multiple state-of-the-art LLMs, we uncover persistent issues: invalid reasoning steps, redundant explorations, hallucinated or unfaithful conclusions, and so on. Our findings suggest that current models' performance can appear to be competent on simple tasks yet degrade sharply as complexity increases. Based on the findings, we advocate for new metrics and tools that evaluate not just final outputs but the structure of the reasoning process itself.&lt;/quote&gt;&lt;p&gt; Current browse context: &lt;/p&gt;&lt;p&gt;cs.CL&lt;/p&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;p&gt; export BibTeX citation Loading... &lt;/p&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45535425</guid><pubDate>Fri, 10 Oct 2025 04:40:26 +0000</pubDate></item><item><title>I Switched from Htmx to Datastar</title><link>https://everydaysuperpowers.dev/articles/why-i-switched-from-htmx-to-datastar/</link><description>&lt;doc fingerprint="1ecb574dba2106d7"&gt;
  &lt;main&gt;
    &lt;p&gt;In 2022, David Guillot delivered an inspiring DjangoCon Europe talk, showcasing a web app that looked and felt as dynamic as a React app. Yet he and his team had done something bold. They converted it from React to HTMX, cutting their codebase by almost 70% while significantly improving its capabilities.&lt;/p&gt;
    &lt;p&gt;Since then, teams everywhere have discovered the same thing: turning a single-page app into a multi-page hypermedia app often slashes lines of code by 60% or more while improving both developer and user experience.&lt;/p&gt;
    &lt;p&gt;I saw similar results when I switched my projects from HTMX to Datastar. It was exciting to reduce my code while building real-time, multi-user applications without needing WebSockets or complex frontend state management.&lt;/p&gt;
    &lt;head rend="h2"&gt;The pain point that moved the needle&lt;/head&gt;
    &lt;p&gt;While preparing my FlaskCon 2025 talk, I hit a wall. I was juggling HTMX and AlpineJS to keep pieces of my UI in sync, but they fell out of step. I lost hours debugging why my component wasn‚Äôt updating. Neither library communicates with the other. Since they are different libraries created by different developers, you are the one responsible for helping them work together.&lt;/p&gt;
    &lt;p&gt;Managing the dance to initialize components at various times and orchestrating events was causing me to write more code than I wanted to and spend more time than I could spare to complete tasks.&lt;/p&gt;
    &lt;p&gt;Knowing that Datastar had the capability of both libraries with a smaller download, I thought I‚Äôd give it a try. It handled it without breaking a sweat, and the resulting code was much easier to understand.&lt;/p&gt;
    &lt;p&gt;I appreciate that there‚Äôs less code to download and maintain. Having a library handle all of this in under 11 KB is great for improving page load performance, especially for users on mobile devices. The less you need to download, the better off you are.&lt;/p&gt;
    &lt;p&gt;But that‚Äôs just the starting point.&lt;/p&gt;
    &lt;head rend="h2"&gt;Better API&lt;/head&gt;
    &lt;p&gt;As I incorporated Datastar into my project at work, I began to appreciate Datastar‚Äôs API. It feels significantly lighter than HTMX. I find that I need to add fewer attributes to achieve the desired results.&lt;/p&gt;
    &lt;p&gt;For example, most interactions with HTMX require you to create an attribute to define the URL to hit, what element to target with the response, and then you might need to add more to customize how HTMX behaves, like this:&lt;/p&gt;
    &lt;code&gt;&amp;lt;span hx-target="#rebuild-bundle-status-button"&amp;#13;
      hx-select="#rebuild-bundle-status-button"&amp;#13;
      hx-swap="outerHTML"&amp;#13;
      hx-trigger="click"&amp;#13;
      hx-get="/rebuild/status-button"&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;
    &lt;p&gt;One doesn‚Äôt always need all of these, but I find it common to have two or three attributes every timeAnd then there are the times I need to remember to look up the ancestry chain to see if any attribute changes the way I‚Äôm expecting things to work. Those are confusing bugs when they happen! .&lt;/p&gt;
    &lt;p&gt;With Datastar, I regularly use just one attribute, like this:&lt;/p&gt;
    &lt;code&gt;&amp;lt;span data-on-click="@get('/rebuild/status-button')"&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;
    &lt;p&gt;This gives me less to think about when I return months later and need to recall how this works.&lt;/p&gt;
    &lt;head rend="h2"&gt;How to update page elements&lt;/head&gt;
    &lt;p&gt;The primary difference between HTMX and Datastar is that HTMX is a front-end library that advances the HTML specification. DataStar is a server-side-driven library that aims to create high-performance, web-native, live-updating web applications.&lt;/p&gt;
    &lt;p&gt;In HTMX, you describe its behavior by adding attributes to the element that triggers the request, even if it updates something far away on the page. That‚Äôs powerful, but it means your logic is scattered across multiple layers. Datastar flips that: the server decides what should change, keeping all your update logic in one place.&lt;/p&gt;
    &lt;p&gt;To cite an example from HTMX‚Äôs documentation:&lt;/p&gt;
    &lt;code&gt;&amp;lt;div&amp;gt;&amp;#13;
   &amp;lt;div id="alert"&amp;gt;&amp;lt;/div&amp;gt;&amp;#13;
    &amp;lt;button hx-get="/info" &amp;#13;
            hx-select="#info-details" &amp;#13;
            hx-swap="outerHTML"&amp;#13;
            hx-select-oob="#alert"&amp;gt;&amp;#13;
        Get Info!&amp;#13;
    &amp;lt;/button&amp;gt;&amp;#13;
&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;When the button is pressed, it sends a GET request to &lt;code&gt;/info&lt;/code&gt; , replaces the button with the element in the response that has the ID 'info-details', and then retrieves the element in the response with the ID 'alert', replacing the element with the same ID on the¬†page.&lt;/p&gt;
    &lt;p&gt;This is a lot for that button element to know. To author this code, you need to know what information you‚Äôre going to return from the server, which is done outside of editing the HTML. This is when HTMX loses the ‚Äùlocality of behavior‚Äù I like so much.&lt;/p&gt;
    &lt;p&gt;Datastar, on the other hand, expects the server to define the behavior, and it works better.&lt;/p&gt;
    &lt;p&gt;To replicate the behavior above, you have options. The first option keeps the HTML similar to above:&lt;/p&gt;
    &lt;code&gt;&amp;lt;div&amp;gt;&amp;#13;
    &amp;lt;div id="alert"&amp;gt;&amp;lt;/div&amp;gt;&amp;#13;
    &amp;lt;button id="info-details"&amp;#13;
     data-on-click="@get('/info')"&amp;gt;&amp;#13;
        Get Info!&amp;#13;
    &amp;lt;/button&amp;gt;&amp;#13;
&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;In this case, the server can return an HTML string with two root elements that have the same IDs as the elements they‚Äôre updating:&lt;/p&gt;
    &lt;code&gt;&amp;lt;p id="info-details"&amp;gt;These are the details you are looking for‚Ä¶&amp;lt;/p&amp;gt;&amp;#13;
&amp;lt;div id="alert"&amp;gt;Alert! This is a test.&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;I love this option because it‚Äôs simple and performant.&lt;/p&gt;
    &lt;head rend="h2"&gt;Think at the component level&lt;/head&gt;
    &lt;p&gt;A better option would change the HTML to treat it as a component.&lt;/p&gt;
    &lt;p&gt;What is this component? It appears to be a way for the user to get more information about a specific item.&lt;/p&gt;
    &lt;p&gt;What happens when the user clicks the button? It seems like either the information appears or there is no information to appear, and instead we render an error. Either way, the component becomes static.&lt;/p&gt;
    &lt;p&gt;Maybe we could split the component into each state, first, the placeholder:&lt;/p&gt;
    &lt;code&gt;&amp;lt;!-- info-component-placeholder.html --&amp;gt;&amp;#13;
&amp;lt;div id="info-component"&amp;gt;&amp;#13;
    &amp;lt;button data-on-click="@get('/product/{{product.id}}/info')"&amp;gt;&amp;#13;
        Get Info!&amp;#13;
    &amp;lt;/button&amp;gt;&amp;#13;
&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;Then the server could render the information the user requests‚Ä¶&lt;/p&gt;
    &lt;code&gt;&amp;lt;!-- info-component-get.html --&amp;gt;&amp;#13;
&amp;lt;div id="info-component"&amp;gt;&amp;#13;
    {% if alert %}&amp;lt;div id="alert"&amp;gt;{{ alert }}&amp;lt;/div&amp;gt;{% endif %}&amp;#13;
    &amp;lt;p&amp;gt;{{product.additional_information}}&amp;lt;/p&amp;gt;&amp;#13;
&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;‚Ä¶and Datastar will update the page to reflect the changes.&lt;/p&gt;
    &lt;p&gt;This particular example is a little wonky, but I hope you get the idea. Thinking at a component level is better as it prevents you from entering an invalid state or losing track of the user‚Äôs state.&lt;/p&gt;
    &lt;head rend="h2"&gt;‚Ä¶or more than one component&lt;/head&gt;
    &lt;p&gt;One of the amazing things from David Guillot‚Äôs talk is how his app updated the count of favored items even though that element was very far away from the component that changed the count.&lt;/p&gt;
    &lt;p&gt;David‚Äôs team accomplished that by having HTMX trigger a JavaScript event, which in turn triggered the remote component to issue a GET request to update itself with the most up-to-date count.&lt;/p&gt;
    &lt;p&gt;With Datastar, you can update multiple components at once, even in a synchronous function.&lt;/p&gt;
    &lt;p&gt;If we have a component that allows someone to add an item to a shopping cart:&lt;/p&gt;
    &lt;code&gt;&amp;lt;form id="purchase-item"&amp;#13;
      data-on-submit="@post('/add-item', {contentType: 'form'})"&amp;gt;"&amp;#13;
&amp;gt;&amp;#13;
  &amp;lt;input type=hidden name="cart-id" value="{{cart.id}}"&amp;gt;&amp;#13;
  &amp;lt;input type=hidden name="item-id" value="{{item.id}}"&amp;gt;&amp;#13;
  &amp;lt;fieldset&amp;gt;&amp;#13;
    &amp;lt;button data-on-click="$quantity -= 1"&amp;gt;-&amp;lt;/button&amp;gt;&amp;#13;
    &amp;lt;label&amp;gt;Quantity&amp;#13;
      &amp;lt;input name=quantity type=number data-bind-quantity value=1&amp;gt;&amp;#13;
    &amp;lt;/label&amp;gt;&amp;#13;
    &amp;lt;button data-on-click="$quantity += 1"&amp;gt;+&amp;lt;/button&amp;gt;&amp;#13;
  &amp;lt;/fieldset&amp;gt;&amp;#13;
  &amp;lt;button type=submit&amp;gt;Add to cart&amp;lt;/button&amp;gt;&amp;#13;
  {% if msg %}&amp;#13;
    &amp;lt;p class=message&amp;gt;{{msg}}&amp;lt;/p&amp;gt;&amp;#13;
  {% endif %}&amp;#13;
&amp;lt;/form&amp;gt;&lt;/code&gt;
    &lt;p&gt;And another one that shows the current count of items in the cart:&lt;/p&gt;
    &lt;code&gt;&amp;lt;div id="cart-count"&amp;gt;&amp;#13;
    &amp;lt;svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;#13;
        &amp;lt;use href="#shoppingCart"&amp;gt;&amp;#13;
    &amp;lt;/svg&amp;gt;&amp;#13;
    {{count}}&amp;#13;
&amp;lt;/div&amp;gt;&lt;/code&gt;
    &lt;p&gt;Then a developer can update them both in the same request. This is one way it could look in Django:&lt;/p&gt;
    &lt;code&gt;from datastar_py.consts import ElementPatchMode&amp;#13;
from datastar_py.django import (&amp;#13;
    DatastarResponse,&amp;#13;
    ServerSentEventGenerator as SSE,&amp;#13;
)&amp;#13;
&amp;#13;
def add_item(request):&amp;#13;
    # skipping all the important state updates&amp;#13;
	return DatastarResponse([&amp;#13;
		SSE.patch_elements(&amp;#13;
    		render_to_string('purchase-item.html', context=dict(cart=cart, item=item, msg='Item added!'))&amp;#13;
		),&amp;#13;
		SSE.patch_elements(&amp;#13;
    		render_to_string('cart-count.html', context=dict(count=item_count))&amp;#13;
		),&amp;#13;
	])&lt;/code&gt;
    &lt;head rend="h2"&gt;Web native&lt;/head&gt;
    &lt;p&gt;Being a part of the Datastar Discord, I appreciate that Datastar isn‚Äôt just a helper script. It‚Äôs a philosophy about building apps with the web‚Äôs own primitives, letting the browser and the server do what they‚Äôre already great at.&lt;/p&gt;
    &lt;p&gt;Where HTMX is trying to push the HTML spec forward, Datastar is more interested in promoting the adoption of web-native features, such as CSS view transitions, Server-Sent Events, and web components, where appropriate.&lt;/p&gt;
    &lt;p&gt;This has been a massive eye-opener for me, as I‚Äôve long wanted to leverage each of these technologies, and now I‚Äôm seeing the benefits.&lt;/p&gt;
    &lt;p&gt;One of the biggest wins I achieved with Datastar was by refactoring a complicated AlpineJS component and extracting a simple web component that I reused in multiple placesI‚Äôll talk more about this in an upcoming post. .&lt;/p&gt;
    &lt;p&gt;I especially appreciate this because there are times when it‚Äôs best to rely on JavaScript to accomplish a task. But it doesn‚Äôt mean you have to reach for a tool like React to achieve it. Creating custom HTML elements is a great pattern to accomplish tasks with high locality of behavior and the ability to reuse them across your app.&lt;/p&gt;
    &lt;p&gt;However, Datastar provides you with even more capabilities.&lt;/p&gt;
    &lt;head rend="h2"&gt;Real-time updates for multi-user apps&lt;/head&gt;
    &lt;p&gt;Apps built with collaboration as a first-class feature stand out from the rest, and Datastar is up to the challenge.&lt;/p&gt;
    &lt;p&gt;To accomplish this, most HTMX developers achieve updates either by ‚Äúpulling‚Äù information from the server by polling every few seconds or by writing custom WebSocket code, which increases complexity.&lt;/p&gt;
    &lt;p&gt;Datastar uses a simple web technology called Server-Sent Events (SSE) to allow the server to ‚Äúpush‚Äù updates to connected clients. When something changes, such as a user adding a comment or a status change, the server can immediately update browsers with minimal additional code.&lt;/p&gt;
    &lt;p&gt;You can now build live dashboards, admin panels, and collaborative tools without crafting custom JavaScript. Everything flows from the server, through HTML.&lt;/p&gt;
    &lt;p&gt;Additionally, suppose a client‚Äôs connection is interrupted. In that case, the browser will automatically attempt to reconnect without requiring additional code, and it can even notify the server, ‚ÄúThis is the last event I received.‚Äù It‚Äôs wonderful.&lt;/p&gt;
    &lt;head rend="h2"&gt;Just because you can do it doesn‚Äôt mean you should&lt;/head&gt;
    &lt;p&gt;Being a part of the Datastar community on Discord has helped me appreciate the Datastar vision of making web apps. They aim to have push-based UI updates, reduce complexity, and leverage tools like web components to handle more complex situations locally. It‚Äôs common for the community to help newcomers by helping them realize they‚Äôre overcomplicating things.&lt;/p&gt;
    &lt;p&gt;Here are some of the tips I‚Äôve picked up:&lt;/p&gt;
    &lt;p&gt;- Don‚Äôt be afraid to re-render the whole component and send it down the pipe. It‚Äôs easier, it probably won‚Äôt affect performance too much, you get better compression ratios, and it‚Äôs incredibly fast for the browser to parse HTML strings.&lt;/p&gt;
    &lt;p&gt;- The server is the state of truth and is more powerful than the browser. Let it handle the majority of the state. You probably don‚Äôt need the reactive signals as much as you think you do.&lt;/p&gt;
    &lt;p&gt;- Web components are great for encapsulating logic into a custom element with high locality of behavior. A great example of this is the star field animation in the header of the Datastar website. The &lt;code&gt;&amp;lt;ds-starfield&amp;gt;&lt;/code&gt;  element encapsulates all the code to animate the star field and exposes three attributes to change its internal state. Datastar drives the attributes whenever the range input changes or the mouse moves over the¬†element.&lt;/p&gt;
    &lt;head rend="h2"&gt;But you can still reach for the stars&lt;/head&gt;
    &lt;p&gt;But what I‚Äôm most excited about are the possibilities that Datastar enables. The community is routinely creating projects that push well beyond the limits experienced by developers using other tools.&lt;/p&gt;
    &lt;p&gt;The examples page includes a database monitoring demo that leverages Hypermedia to significantly improve the speed and memory footprint of a demo presented at a JavaScript conference.&lt;/p&gt;
    &lt;p&gt;The one million checkbox experiment was too much for the server it started on. Anders Murphy used Datastar to create one billion checkboxes on an inexpensive server.&lt;/p&gt;
    &lt;p&gt;But the one that most inspired me was a web app that displayed data from every radar station in the United States. When a blip changed on a radar, the corresponding dot in the UI would change within 100 milliseconds. This means that *over 800,000 points are being updated per second*. Additionally, the user could scrub back in time for up to an hour (with under a 700 millisecond delay). Can you imagine this as a Hypermedia app? This is what Datastar enables.&lt;/p&gt;
    &lt;head rend="h2"&gt;How it‚Äôs working for me today&lt;/head&gt;
    &lt;p&gt;I‚Äôm still in what I consider my discovery phase of Datastar. Replacing the standard HTMX functionality of ajaxing updates to a UI was quick and easy to implement. Now I‚Äôm learning and experimenting with different patterns to use Datastar to achieve more and more.&lt;/p&gt;
    &lt;p&gt;For decades, I‚Äôve been interested in ways I could provide better user experiences with real-time updates, and I love that Datastar enables me to do push-based updates, even in synchronous code.&lt;/p&gt;
    &lt;p&gt;HTMX filled me with so much joy when I started using it. But I haven‚Äôt felt like I lost anything since switching to Datastar. In fact, I feel like I‚Äôve gained so much more.&lt;/p&gt;
    &lt;p&gt;If you‚Äôve ever felt the joy of using HTMX, I bet you‚Äôll feel the same leap again with Datastar. It‚Äôs like discovering what the web was meant to do all along.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45536000</guid><pubDate>Fri, 10 Oct 2025 06:49:40 +0000</pubDate></item><item><title>I tracked Amazon's Prime Day prices. We've been played</title><link>https://www.washingtonpost.com/technology/2025/10/09/amazon-prime-day-prices/</link><description>&lt;doc fingerprint="24cdb7400e6659bc"&gt;
  &lt;main&gt;
    &lt;p&gt;Next time Amazon hypes its Prime Days savings, remember this: The prices during the sale aren‚Äôt always better. I‚Äôve got the receipts to prove it.&lt;/p&gt;
    &lt;p&gt;Democracy Dies in Darkness&lt;/p&gt;
    &lt;head rend="h1"&gt;I tracked Amazon‚Äôs Prime Day prices. We‚Äôve been played.&lt;/head&gt;
    &lt;p&gt;I would have saved, on average, almost nothing. Here‚Äôs what you should do to actually get a good deal on Amazon.&lt;/p&gt;
    &lt;p&gt;5 min&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45536531</guid><pubDate>Fri, 10 Oct 2025 08:27:34 +0000</pubDate></item></channel></rss>