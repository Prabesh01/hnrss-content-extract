<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Mon, 29 Sep 2025 07:11:19 +0000</lastBuildDate><item><title>Privacy Badger is a free browser extension made by EFF to stop spying</title><link>https://privacybadger.org/</link><description>&lt;doc fingerprint="6511c9540fb41697"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Privacy Badger&lt;/head&gt;
    &lt;head rend="h2"&gt;Frequently Asked Questions&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;What is Privacy Badger?&lt;/item&gt;
      &lt;item&gt;How is Privacy Badger different from other blocking extensions?&lt;/item&gt;
      &lt;item&gt;Who makes Privacy Badger?&lt;/item&gt;
      &lt;item&gt;How does Privacy Badger work?&lt;/item&gt;
      &lt;item&gt;What is a third party tracker?&lt;/item&gt;
      &lt;item&gt;What do the red, yellow and green sliders in the Privacy Badger menu mean?&lt;/item&gt;
      &lt;item&gt;Why does Privacy Badger block ads?&lt;/item&gt;
      &lt;item&gt;Why doesn't Privacy Badger block all ads?&lt;/item&gt;
      &lt;item&gt;What is Global Privacy Control (GPC)?&lt;/item&gt;
      &lt;item&gt;What about tracking by the sites I actively visit, like NYTimes.com or Facebook.com?&lt;/item&gt;
      &lt;item&gt;Does Privacy Badger contain a list of blocked sites?&lt;/item&gt;
      &lt;item&gt;How was the cookie blocking yellowlist created?&lt;/item&gt;
      &lt;item&gt;Does Privacy Badger prevent fingerprinting?&lt;/item&gt;
      &lt;item&gt;Does Privacy Badger consider every cookie to be a tracking cookie?&lt;/item&gt;
      &lt;item&gt;Will you be supporting any other browsers besides Chrome, Firefox, Edge and Opera?&lt;/item&gt;
      &lt;item&gt;Can I download Privacy Badger directly from eff.org?&lt;/item&gt;
      &lt;item&gt;I run a domain that uses cookies or other tracking. How do I stop Privacy Badger from blocking me?&lt;/item&gt;
      &lt;item&gt;Where can I find general information about Privacy Badger that I can use for a piece I'm writing?&lt;/item&gt;
      &lt;item&gt;As an administrator, how do I configure Privacy Badger on my managed devices?&lt;/item&gt;
      &lt;item&gt;What is the Privacy Badger license? Where is the Privacy Badger source code?&lt;/item&gt;
      &lt;item&gt;How can I support Privacy Badger?&lt;/item&gt;
      &lt;item&gt;How does Privacy Badger handle social media widgets?&lt;/item&gt;
      &lt;item&gt;How do I uninstall/remove Privacy Badger?&lt;/item&gt;
      &lt;item&gt;Is Privacy Badger compatible with other extensions, including adblockers?&lt;/item&gt;
      &lt;item&gt;Is Privacy Badger compatible with Firefox's built-in privacy protections?&lt;/item&gt;
      &lt;item&gt;Why does my browser connect to fastly.com IP addresses on startup after installing Privacy Badger?&lt;/item&gt;
      &lt;item&gt;Why does Privacy Badger need access to my data for all websites?&lt;/item&gt;
      &lt;item&gt;Why aren't videos loading on YouTube? Why isn't Privacy Badger blocking ads on YouTube?&lt;/item&gt;
      &lt;item&gt;I need help! I found a bug! What do I do now?&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;What is Privacy Badger?&lt;/head&gt;
    &lt;p&gt;Privacy Badger is a browser extension that stops advertisers and other third-party trackers from secretly tracking where you go and what pages you look at on the web. If an advertiser seems to be tracking you across multiple websites without your permission, Privacy Badger automatically blocks that advertiser from loading any more content in your browser. To the advertiser, it’s like you suddenly disappeared.&lt;/p&gt;
    &lt;head rend="h3"&gt;How is Privacy Badger different from other blocking extensions?&lt;/head&gt;
    &lt;p&gt;Privacy Badger was born out of our desire to be able to recommend a single extension that would:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Automatically analyze and block any tracker or ad that violated the principle of user consent&lt;/item&gt;
      &lt;item&gt;Function well without any settings, knowledge, or configuration by the user&lt;/item&gt;
      &lt;item&gt;Use algorithmic methods to decide what is and isn’t tracking&lt;/item&gt;
      &lt;item&gt;Be produced by an organization that is unambiguously working for its users rather than for profit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As a result, Privacy Badger differs from traditional ad-blocking extensions in two key ways. First, while most other blocking extensions prioritize blocking ads, Privacy Badger doesn’t block ads unless they happen to be tracking you; in fact, one of our goals is to incentivize advertisers to adopt better privacy practices.&lt;/p&gt;
    &lt;p&gt;Second, most other blockers rely on a human-curated list of domains or URLs to block. Privacy Badger is an algorithmic tracker blocker – we define what âtrackingâ looks like, and then Privacy Badger blocks or restricts domains that it observes tracking in the wild. What is and isnât considered a tracker is entirely based on how a specific domain acts, not on human judgment.&lt;/p&gt;
    &lt;p&gt;Privacy Badger sends the Global Privacy Control signal to opt you out of data sharing and selling, and the Do Not Track signal to tell companies not to track you. If trackers ignore these signals, Privacy Badger will learn to block them.&lt;/p&gt;
    &lt;p&gt;Beyond this, Privacy Badger comes with other advantages like cookie blocking, click-to-activate placeholders for potentially useful tracker widgets (video players, comments widgets, etc.), and outgoing link click tracking removal on Facebook and Google.&lt;/p&gt;
    &lt;p&gt;By using Privacy Badger, you support the Electronic Frontier Foundation and help fight for a better Web for everybody.&lt;/p&gt;
    &lt;head rend="h3"&gt;Who makes Privacy Badger?&lt;/head&gt;
    &lt;p&gt;Privacy Badger was created by the Electronic Frontier Foundation, a nonprofit organization that protects your privacy and free expression online. We make free tools like Privacy Badger, publish educational guides, testify before lawmakers about technology, and fight for the public interest in courtâall thanks to support from EFFâs members. If you want a better internet and a strong democracy, join the fight against creepy online surveillance.&lt;/p&gt;
    &lt;head rend="h3"&gt;How does Privacy Badger work?&lt;/head&gt;
    &lt;p&gt;When you view a webpage, that page will often be made up of content from many different sources. For example, a news webpage might load the actual article from the news company, ads from an ad company, and the comments section from a different company that’s been contracted out to provide that service.&lt;/p&gt;
    &lt;p&gt;Privacy Badger keeps track of all of this. If the same source seems to be tracking across different websites, then Privacy Badger springs into action, telling the browser not to load any more content from that source. And when your browser stops loading content from a source, that source can no longer track you. Voila!&lt;/p&gt;
    &lt;p&gt;At a more technical level, Privacy Badger keeps track of the “third party” domains that embed images, scripts and advertising in the pages you visit. Privacy Badger looks for tracking techniques like uniquely identifying cookies, local storage “supercookies,” and canvas fingerprinting. If it observes the same third-party host tracking on three separate sites, Privacy Badger will automatically disallow content from that third-party tracker.&lt;/p&gt;
    &lt;p&gt;By default, Privacy Badger receives periodic learning updates from Badger Sett, our Badger training project. This “remote learning” automatically discovers trackers present on thousands of the most popular sites on the Web.&lt;/p&gt;
    &lt;head rend="h3"&gt;What is a third party tracker?&lt;/head&gt;
    &lt;p&gt;When you visit a webpage parts of the page may come from domains and servers other than the one you asked to visit. This is an essential feature of hypertext. On the modern Web, embedded images and code often use cookies and other methods to track your browsing habits â often to display advertisements. The domains that do this are called “third party trackers”, and you can read more about how they work here.&lt;/p&gt;
    &lt;head rend="h3"&gt;What do the red, yellow and green sliders in the Privacy Badger menu mean?&lt;/head&gt;
    &lt;p&gt;Red means that content from this third party domain has been completely disallowed.&lt;/p&gt;
    &lt;p&gt;Yellow means that the third party domain appears to be trying to track you, but it is on Privacy Badger’s cookie-blocking “yellowlist” of third party domains that, when analyzed, seemed to be necessary for Web functionality. In that case, Privacy Badger will load content from the domain but will try to screen out third party cookies and referrers from it.&lt;/p&gt;
    &lt;p&gt;Green means “no action”; Privacy Badger will leave the domain alone.&lt;/p&gt;
    &lt;head rend="h3"&gt;Why does Privacy Badger block ads?&lt;/head&gt;
    &lt;p&gt;Actually, nothing in the Privacy Badger code is specifically written to block ads. Rather, it focuses on disallowing any visible or invisible “third party” scripts or images that appear to be tracking you even though you specifically denied consent by sending Do Not Track and Global Privacy Control signals. It just so happens that most (but not all) of these third party trackers are advertisements. When you see an ad, the ad sees you, and can track you. Privacy Badger is here to stop that.&lt;/p&gt;
    &lt;head rend="h3"&gt;Why doesn't Privacy Badger block all ads?&lt;/head&gt;
    &lt;p&gt;Because Privacy Badger is primarily a privacy tool, not an ad blocker. Our aim is not to block ads, but to prevent non-consensual invasions of people’s privacy because we believe they are inherently objectionable. We also want to create incentives for advertising companies to do the right thing. Of course, if you really dislike ads, you can also install a traditional ad blocker.&lt;/p&gt;
    &lt;head rend="h3"&gt;What is Global Privacy Control (GPC)?&lt;/head&gt;
    &lt;p&gt;Global Privacy Control (GPC) is a new specification that allows users to tell companies they’d like to opt out of having their data shared or sold. By default, Privacy Badger sends the GPC signal to every company you interact with alongside the Do Not Track (DNT) signal.&lt;/p&gt;
    &lt;p&gt;What’s the difference? Do Not Track is meant to tell companies that you don’t want to be tracked in any way (learn more about what we mean by “tracking” here). Privacy Badger gives third-party companies a chance to comply with DNT by adopting our DNT policy, and blocks those that look like they’re tracking you anyway.&lt;/p&gt;
    &lt;p&gt;When DNT was developed, many websites simply ignored usersâ requests not to be tracked. That’s why Privacy Badger has to act as an enforcer: trackers that don’t want to comply with your wishes get blocked. Today, users in many jurisdictions have the legal right to opt out of some kinds of tracking. That’s where GPC comes in.&lt;/p&gt;
    &lt;p&gt;GPC is meant to be a legally-binding request to all companies in places with applicable privacy laws. For example, the California Consumer Privacy Act gives California residents the right to opt out of having their data sold. By sending the GPC signal, Privacy Badger is telling companies that you would like to exercise your rights.&lt;/p&gt;
    &lt;p&gt;The CCPA and other laws are not perfect, which is why Privacy Badger uses both approaches. It asks websites to respect your privacy, and it blocks known trackers from loading at all.&lt;/p&gt;
    &lt;head rend="h3"&gt;What about tracking by the sites I actively visit, like NYTimes.com or Facebook.com?&lt;/head&gt;
    &lt;p&gt;At present, Privacy Badger primarily protects you against tracking by third party sites. As far as privacy protections for “first party” sites (sites that you visit directly), Privacy Badger removes outgoing link click tracking on Facebook and Google. We plan on adding more first party privacy protections in the future.&lt;/p&gt;
    &lt;p&gt;We are doing things in this order because the most scandalous, intrusive and objectionable form of online tracking is that conducted by companies you’ve often never heard of and have no relationship with. First and foremost, Privacy Badger is there to enforce Do Not Track against these domains by providing the technical means to restrict access to their tracking scripts and images. The right policy for whether nytimes.com, facebook.com or google.com can track you when you visit that site â and the technical task of preventing it â is more complicated because often tracking is interwoven with the features the site offers.&lt;/p&gt;
    &lt;head rend="h3"&gt;Does Privacy Badger contain a list of blocked sites?&lt;/head&gt;
    &lt;p&gt;Unlike other blocking tools, we have not made decisions about which sites to block, but rather about which behavior is objectionable. Domains will only be blocked if Privacy Badger observes the domain collecting unique identifiers after it was sent Do Not Track and Global Privacy Control signals.&lt;/p&gt;
    &lt;p&gt;Privacy Badger does contain a “yellowlist” of some sites that are known to provide essential third party resources; those sites show up as yellow and have their cookies blocked rather than being blocked entirely. This is a compromise with practicality, and in the long term we hope to phase out the yellowlist as these third parties begin to explicitly commit to respecting Do Not Track. The criteria for including a domain on the yellowlist can be found here.&lt;/p&gt;
    &lt;head rend="h3"&gt;How was the cookie blocking yellowlist created?&lt;/head&gt;
    &lt;p&gt;The initial list of domains that should be cookie blocked rather than blocked entirely was derived from a research project on classifying third party domains as trackers and non-trackers. We will make occasional adjustments to it as necessary. If you find domains that are under- or over-blocked, please file a bug on GitHub.&lt;/p&gt;
    &lt;head rend="h3"&gt;Does Privacy Badger prevent fingerprinting?&lt;/head&gt;
    &lt;p&gt;Browser fingerprinting is an extremely subtle and problematic method of tracking, which we documented with the Cover Your Tracks project. Privacy Badger can detect canvas-based fingerprinting, and will block third party domains that use it. Detection of other forms of fingerprinting and protections against first-party fingerprinting are ongoing projects. Of course, once a domain is blocked by Privacy Badger, it will no longer be able to fingerprint you.&lt;/p&gt;
    &lt;head rend="h3"&gt;Does Privacy Badger consider every cookie to be a tracking cookie?&lt;/head&gt;
    &lt;p&gt;No. Privacy Badger analyzes the cookies from each site; unique cookies that contain tracking IDs are disallowed, while “low entropy” cookies that perform other functions are allowed. For instance a cookie like LANG=fr that encodes the user’s language preference, or a cookie that preserves a very small amount of information about ads the user has been shown, would be allowed provided that individual or small groups of users’ reading habits could not be collected with them.&lt;/p&gt;
    &lt;head rend="h3"&gt;Will you be supporting any other browsers besides Chrome, Firefox, Edge and Opera?&lt;/head&gt;
    &lt;p&gt;We are working towards Safari on macOS support. Safari on iOS seems to lack certain extension capabilities required by Privacy Badger to function properly.&lt;/p&gt;
    &lt;p&gt;Chrome on Android does not support extensions. To use Privacy Badger on Android, install Firefox for Android.&lt;/p&gt;
    &lt;p&gt;Privacy Badger does not work with Microsoft Edge Legacy. Please switch to the new Microsoft Edge browser.&lt;/p&gt;
    &lt;head rend="h3"&gt;Can I download Privacy Badger directly from eff.org?&lt;/head&gt;
    &lt;p&gt;If you use Google Chrome, you have to install extensions from Chrome Web Store. To install Privacy Badger in Chrome, visit Privacy Badger’s Chrome Web Store listing and click the “Add to Chrome” button there.&lt;/p&gt;
    &lt;p&gt;Otherwise, you can use the following links to get the latest version of Privacy Badger directly from eff.org:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Firefox: https://www.eff.org/files/privacy-badger-latest.xpi&lt;/item&gt;
      &lt;item&gt;Chromium: https://www.eff.org/files/privacy_badger-chrome.crx&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;I run a domain that uses cookies or other tracking. How do I stop Privacy Badger from blocking me?&lt;/head&gt;
    &lt;p&gt;One way is to stop tracking users who have turned on Global Privacy Control or Do Not Track signals (i.e., stop collecting cookies, supercookies or fingerprints from them). Privacy Badger will stop learning to block that domain. The next version of Privacy Badger to ship with an updated pre-trained list will no longer include that domain in the list. Most Privacy Badger users will then update to that list.&lt;/p&gt;
    &lt;p&gt;You can also unblock yourself by promising to meaningfully respect the Do Not Track signal. To do so, post a verbatim copy of EFF’s Do Not Track policy to the URL https://example.com/.well-known/dnt-policy.txt, where “example.com” is replaced by your domain. Posting EFF’s DNT policy on a domain is a promise of compliance with EFF’s DNT Policy by that domain.&lt;/p&gt;
    &lt;p&gt;If your domain is compliant with EFF’s DNT policy and declares this compliance, most Privacy Badgers will see this declaration the next time they encounter your domain. Also, the next version of Privacy Badger to ship with an updated pre-trained list will probably include your declaration of compliance in the list.&lt;/p&gt;
    &lt;p&gt;Note that the domain must support HTTPS, to protect against tampering by network attackers. The path contains “.well-known” per RFC 5785. Also note that you must post a copy of the policy at each compliant subdomain you control. For example, if you wish to declare compliance by both sub1.example.com and sub2.example.com, you must post EFF’s DNT policy on each domain.&lt;/p&gt;
    &lt;head rend="h3"&gt;Where can I find general information about Privacy Badger that I can use for a piece I'm writing?&lt;/head&gt;
    &lt;p&gt;Glad you asked! Check out this downloadable press kit that we’ve put together.&lt;/p&gt;
    &lt;head rend="h3"&gt;As an administrator, how do I configure Privacy Badger on my managed devices?&lt;/head&gt;
    &lt;p&gt;Please see our enterprise deployment and configuration document.&lt;/p&gt;
    &lt;head rend="h3"&gt;What is the Privacy Badger license? Where is the Privacy Badger source code?&lt;/head&gt;
    &lt;p&gt;Privacy Badger’s source code is licensed under GPLv3+. This website’s source code is licensed under AGPLv3+.&lt;/p&gt;
    &lt;head rend="h3"&gt;How can I support Privacy Badger?&lt;/head&gt;
    &lt;p&gt;Thanks for asking! Individual donations make up about half of EFF’s support, which gives us the freedom to work on user-focused projects. If you want to support the development of Privacy Badger and other projects like it, you can throw us a few dollars here. Thank you.&lt;/p&gt;
    &lt;p&gt;If you want to help directly with the project, we appreciate that as well. Please see Privacy Badger’s CONTRIBUTING document for ways to get started.&lt;/p&gt;
    &lt;head rend="h3"&gt;How does Privacy Badger handle social media widgets?&lt;/head&gt;
    &lt;p&gt;Social media widgets (such as the Facebook Like button) often track your reading habits. Even if you don’t click them, the social media companies often see exactly which pages you’re seeing the widget on. When blocking social buttons and other potentially useful (video, audio, comments) widgets, Privacy Badger can replace them with click-to-activate placeholders. You will not be tracked by these replacements unless you explicitly choose to click them.&lt;/p&gt;
    &lt;head rend="h3"&gt;How do I uninstall/remove Privacy Badger?&lt;/head&gt;
    &lt;p&gt;Firefox: See the Disable or remove Add-ons Mozilla help page.&lt;/p&gt;
    &lt;p&gt;Chrome: See the Install and manage extensions Chrome Web Store help page.&lt;/p&gt;
    &lt;p&gt;Edge: See the Add or remove browser add-ons, extensions, and toolbars Microsoft help page.&lt;/p&gt;
    &lt;head rend="h3"&gt;Is Privacy Badger compatible with other extensions, including adblockers?&lt;/head&gt;
    &lt;p&gt;Privacy Badger should be compatible with other extensions.&lt;/p&gt;
    &lt;p&gt;While there is likely to be overlap between the various manually-edited advertising/tracker lists and Privacy Badger, unlike adblockers, Privacy Badger automatically learns to block trackers based on their behavior. This means that Privacy Badger may learn to block trackers your adblocker doesn’t know about.&lt;/p&gt;
    &lt;head rend="h3"&gt;Is Privacy Badger compatible with Firefox's built-in privacy protections?&lt;/head&gt;
    &lt;p&gt;It’s fine to use Firefox’s built-in content blocking (Enhanced Tracking Protection or ETP) and Privacy Badger together. While there is overlap between Firefox’s tracker lists and Privacy Badger, Privacy Badger automatically learns to block trackers based on their behavior. This means that Privacy Badger’s automatically-generated and regularly updated blocklist contains trackers not found in Firefox’s human-generated lists. Additionally, Firefox does not fully block “tracking content” in regular (non-“private”) windows by default.&lt;/p&gt;
    &lt;p&gt;What about Firefox’s Total Cookie Protection (dynamic First Party Isolation or dFPI)? Total Cookie Protection works by keeping third-party cookies isolated to the site they were set on. However, if unblocked, trackers can still use techniques like first-party cookie syncing and browser fingerprinting. They can track your IP address, or they can use some combination of these techniques. Trackers harvest sensitive information, and serve as vectors for malware. Not to mention, unblocked trackers slow down websites and waste your bandwidth.&lt;/p&gt;
    &lt;p&gt;Keep in mind that Privacy Badger is not just a tracker blocker.&lt;/p&gt;
    &lt;head rend="h3"&gt;Why does my browser connect to fastly.com IP addresses on startup after installing Privacy Badger?&lt;/head&gt;
    &lt;p&gt;EFF uses Fastly to host EFF’s Web resources: Fastly is EFF’s CDN. Privacy Badger pings the CDN for the following resources to ensure that the information in them is fresh even if there hasn’t been a new Privacy Badger release in a while:&lt;/p&gt;
    &lt;p&gt;EFF does not set cookies or retain IP addresses for these queries.&lt;/p&gt;
    &lt;head rend="h3"&gt;Why does Privacy Badger need access to my data for all websites?&lt;/head&gt;
    &lt;p&gt;When you install Privacy Badger, your browser warns that Privacy Badger can “access your data for all websites” (in Firefox), or “read and change all your data on the websites you visit” (in Chrome). You are right to be alarmed. You should only install extensions made by organizations you trust.&lt;/p&gt;
    &lt;p&gt;Privacy Badger requires these permissions to do its job of automatically detecting and blocking trackers on all websites you visit. We are not ironically (or unironically) spying on you. For more information, see our Privacy Badger extension permissions explainer.&lt;/p&gt;
    &lt;p&gt;Note that the extension permissions warnings only cover what the extension has access to, not what the extension actually does with what it has access to (such as whether the extension secretly uploads your browsing data to its servers). Privacy Badger will never share data about your browsing unless you choose to share it (by filing a broken site report). For more information, see EFF’s Privacy Policy for Software.&lt;/p&gt;
    &lt;head rend="h3"&gt;Why aren't videos loading on YouTube? Why isn't Privacy Badger blocking ads on YouTube?&lt;/head&gt;
    &lt;p&gt;Is YouTube not working? Try disabling Privacy Badger on YouTube. If that resolves the issue, see if re-enabling Privacy Badger breaks YouTube again. If YouTube goes back to not working, please tell us so we can look into what’s going on.&lt;/p&gt;
    &lt;p&gt;Are you surprised that ads aren’t being blocked on YouTube? Privacy Badger is primarily a privacy tool, not an ad blocker. When you visit YouTube directly, Privacy Badger does not block ads on YouTube because YouTube does not use “third party” trackers. If you really dislike ads, you can also install a traditional ad blocker.&lt;/p&gt;
    &lt;head rend="h3"&gt;I need help! I found a bug! What do I do now?&lt;/head&gt;
    &lt;p&gt;If a website isn’t working like it should, you can disable Privacy Badger just for that site, leaving Privacy Badger enabled and protecting you everywhere else. To do so, navigate to the site with the problem, click on Privacy Badger’s icon in your browser toolbar, and click the “Disable for this site” button in Privacy Badger’s popup. You can also let us know about broken sites using the “Report broken site” button.&lt;/p&gt;
    &lt;p&gt;To get help or to report bugs, please email extension-devs@eff.org. If you have a GitHub account, you can use our GitHub issue tracker.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45404021</guid><pubDate>Sun, 28 Sep 2025 12:59:54 +0000</pubDate></item><item><title>When I say “alphabetical order”, I mean “alphabetical order”</title><link>https://sebastiano.tronto.net/blog/2025-09-28-alphabetic-order/</link><description>&lt;doc fingerprint="144ce85c2ae519d5"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;When I say “alphabetical order”, I mean “alphabetical order”&lt;/head&gt;
    &lt;p&gt;Last month I have been on a multi-day hike with my dad. Each of us took many pictures, and when we came back we put them all in a shared folder. We both have Android phones, and the naming scheme used for our pictures was the same: &lt;code&gt;IMG_YYYYMMDD_HHmmss&lt;/code&gt; followed maybe by some other numbers
and then a &lt;code&gt;.jpg&lt;/code&gt;. Here &lt;code&gt;YYYY&lt;/code&gt; stands for the year, &lt;code&gt;MM&lt;/code&gt; for month and
so on, so that sorting the pictures in alphabetical order is the same as
sorting them by date.&lt;/p&gt;
    &lt;p&gt;Or so I thought. Strangely, when I looked at the files from my dad’s Windows PC, they were not sorted correctly: all the pictures took with my phone came first, followed by all the pictures took by him. I thought this was surely some weird Microsoft bug - after using Windows 11 at work for a while, I would not be surprised if you told me their file explorer can’t figure out how to sort strings.&lt;/p&gt;
    &lt;p&gt;But then I looked at the same files in a shared Google Drive folder, and again they were in the wrong order:&lt;/p&gt;
    &lt;p&gt;As you can see, the picture taken at 5:54 (with my dad’s phone) comes before the one taken at 9:20 (also with my dad’s phone), but after the one taken at 12:11 (with my phone).&lt;/p&gt;
    &lt;p&gt;Weird. Well, maybe Microsoft and Google got this wrong. But that seems unlikely.&lt;/p&gt;
    &lt;p&gt;Indeed, KDE’s Dolphin file manager does the same thing:&lt;/p&gt;
    &lt;p&gt;I’ll spare you the screenshots, but Gnome and both the file managers that I have on my phone also get the alphabetical order wrong.&lt;/p&gt;
    &lt;p&gt;At this point I thought that maybe one of the two phones is using some weird alternative unicode character instead of the underscore &lt;code&gt;_&lt;/code&gt;. Really,
I could not see any other explanation. But nope, this is not it, because
the good old &lt;code&gt;ls&lt;/code&gt; sorts my files correctly:&lt;/p&gt;
    &lt;code&gt;$ ls -l

total 218572
-rw-r--r-- 1 seba seba 1866185 Aug 28 18:51 IMG_20250820_055436307.jpg
-rw-r--r-- 1 seba seba 4749899 Aug 28 18:50 IMG_20250820_092016029_HDR.jpg
-rw-r--r-- 1 seba seba 6201609 Aug 28 18:52 IMG_20250820_092440966_HDR.jpg
-rw-r--r-- 1 seba seba 7694802 Aug 28 18:51 IMG_20250820_092832138_HDR.jpg
-rw-r--r-- 1 seba seba 1536520 Aug 20 09:57 IMG_20250820_095716_607.jpg
-rw-r--r-- 1 seba seba 1054553 Aug 20 10:38 IMG_20250820_103857_991.jpg
-rw-r--r-- 1 seba seba  965353 Aug 20 10:39 IMG_20250820_103903_811.jpg
(and so on)
&lt;/code&gt;
    &lt;p&gt;This was consistent among the couple of Linux distros I use, as well as my OpenBSD server. On the one hand this is good: not every single piece of software fucks up something as basic as string sorting. On the other hand, this makes it harder to debug what the fuck is going on with all the other file managers.&lt;/p&gt;
    &lt;p&gt;It took me more than a month to figure this one out. Tell me, which file do you think comes first in alphabetical order, &lt;code&gt;file-9.txt&lt;/code&gt; or
&lt;code&gt;file-10.txt&lt;/code&gt;?&lt;/p&gt;
    &lt;p&gt;Of course, the user who named those files probably wants &lt;code&gt;file-9.txt&lt;/code&gt; to
come before &lt;code&gt;file-10.txt&lt;/code&gt;. But &lt;code&gt;1&lt;/code&gt; is smaller than &lt;code&gt;9&lt;/code&gt;, so &lt;code&gt;file-10.txt&lt;/code&gt;
should be first in alphabetical order. Everyone understands that, and
soon people learn to put enough leading zeros if they want their files
to stay sorted the way they like.&lt;/p&gt;
    &lt;p&gt;Well, apparently all these operating systems have decided that no, users are too dumb and they cannot possibly understand what alphabetical order means. So when you ask them to sort your files alphabetically, they don’t. Instead, they decide that if some piece of the file name is a number, the real numerical value must be used.&lt;/p&gt;
    &lt;p&gt;I don’t know when this became the norm, to be honest I have not used a normal graphical file manager in a long time.&lt;/p&gt;
    &lt;p&gt;I know you asked for the files to be sorted in alphabetical order, but you don’t want &lt;code&gt;file-10.txt&lt;/code&gt; to come before &lt;code&gt;file-9.txt&lt;/code&gt;, do
you? No, I know you don’t. I am not even going to ask you, your
mushy human brain is too small to comprehend the intricacies of
such a question. I’ll spare you the thinking.&lt;/p&gt;
    &lt;p&gt;So it turns out that my dad’s phone wrote the milliseconds in the file name right after the seconds, while mine added an extra underscore to separate them from the seconds. Which in my mind it should not have mattered, because alphabetically they should still have been sorted correctly to the second. But with this “modern” interpretation of the alphabetical order, the files without the extra separator in the name had a much higher number, so they come last.&lt;/p&gt;
    &lt;p&gt;Now that I know what the issue is, I can solve it by renaming the files with a consistent scheme. I have also found a setting to fix Dolphin’s behavior, but it was very much buried into its many configuration options. And I would rather not have to change this setting in every application I use, assuming they even allow it.&lt;/p&gt;
    &lt;p&gt;I miss the time when computers did what you told them to, instead of trying to read your mind.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45404022</guid><pubDate>Sun, 28 Sep 2025 13:00:16 +0000</pubDate></item><item><title>Show HN: Toolbrew – Free little tools without signups or ads</title><link>https://toolbrew.co/</link><guid isPermaLink="false">https://news.ycombinator.com/item?id=45404667</guid><pubDate>Sun, 28 Sep 2025 14:40:46 +0000</pubDate></item><item><title>Scm2wasm: A Scheme to WASM compiler in 600 lines of C, making use of WASM GC</title><link>https://git.lain.faith/iitalics/scm2wasm</link><description>&lt;doc fingerprint="9fa21c334d8329a0"&gt;
  &lt;main&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;milo 7cbcaf8ccd&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;.gitignore&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Makefile&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;README.md&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;input.scm&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;scm2wasm.c&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h4"&gt; README.md &lt;/head&gt;
    &lt;head rend="h1"&gt;scm2wasm&lt;/head&gt;
    &lt;p&gt;really bad minimal scheme compiler&lt;/p&gt;
    &lt;head rend="h2"&gt;building&lt;/head&gt;
    &lt;code&gt;$ make
&lt;/code&gt;
    &lt;head rend="h2"&gt;running&lt;/head&gt;
    &lt;code&gt;$ ./scm2wasm &amp;lt; input.scm &amp;gt; output.wasm
$ wasm-tools validate output.wasm
$ wasm-tools print output.wasm -o output.wat
$ wasmtime -Wgc --invoke start output.wasm
...
30
&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45405175</guid><pubDate>Sun, 28 Sep 2025 15:43:25 +0000</pubDate></item><item><title>The AI coding trap</title><link>https://chrisloy.dev/post/2025/09/28/the-ai-coding-trap</link><description>&lt;doc fingerprint="a549d23b2ab12319"&gt;
  &lt;main&gt;
    &lt;p&gt;If you ever watch someone “coding”, you might see them spending far more time staring into space than typing on their keyboard. No, they (probably) aren’t slacking off. Software development is fundamentally a practice of problem-solving, and so, as with solving a tricky crossword, most of the work is done in your head.&lt;/p&gt;
    &lt;p&gt;In the software development lifecycle, coding is the letters filled into the crossword, only a small amount of effort compared to all the head scratching and scribbled notes. The real work usually happens alongside coding, as the developer learns the domain, narrows down requirements, maps out relevant abstractions, considers side effects, tests features incrementally, and finally squashes bugs that survived this rigorous process. It looks something like this:&lt;/p&gt;
    &lt;p&gt;But with AI-driven coding, things play out very differently.&lt;/p&gt;
    &lt;head rend="h2"&gt;“Code first, ask questions later”&lt;/head&gt;
    &lt;p&gt;AI coding agents such as Claude Code are making it astonishingly fast to write code in isolation. But most software lives within complex systems, and since LLMs can't yet hold the full context of an application in memory at once, human review, testing, and integration needs will remain. And that is a lot harder when the code has been written without the human thinking about it. As a result, for complex software, much of the time will be spent on post hoc understanding of what code the AI has written.&lt;/p&gt;
    &lt;p&gt;This is the root of the difference between marketing copy that boasts of the paradigm shifting speed of writing code with AI (often framed as “10X faster”), and the marginal productivity gains in delivering working software seen in the wild (usually closer to 10%).&lt;/p&gt;
    &lt;p&gt;An even more dispiriting upshot of this is that, as developers, we spend an ever greater proportion of our time merely fixing up the output of these wondrous babbling machines. While the LLMs get to blast through all the fun, easy work at lightning speed, we are then left with all the thankless tasks: testing to ensure existing functionality isn’t broken, clearing out duplicated code, writing documentation, handling deployment and infrastructure, etc. Very little time is actually dedicated to the thing that developers actually love doing: coding.&lt;/p&gt;
    &lt;p&gt;Fortunately, help is at hand. While LLMs are shaking up how software development is performed, this issue in itself is not actually new. In fact, it is merely a stark example of an age-old problem, which I call:&lt;/p&gt;
    &lt;head rend="h2"&gt;The tech lead’s dilemma&lt;/head&gt;
    &lt;p&gt;As engineers progress in their careers, they will eventually step into the role of tech lead. They might be managing a team, or they could be a principal engineer, driving technical delivery without the people management. In either case, they are responsible for the team’s technical delivery. They are also usually the most experienced developer in the team: either in their career, in the specialised domain of the team, or in both.&lt;/p&gt;
    &lt;p&gt;Software delivery is a team effort, but one in which experience can have a highly imbalancing effect on individual contribution velocity. As such, when the tech lead’s primary job is to maximise delivery, they will often face an internal conflict between two ways to deliver software:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Fair delegation across the team, maximising learning and ownership opportunities for junior team members, but allowing delivery to be bottlenecked by the speed of the least productive team members.&lt;/item&gt;
      &lt;item&gt;Mollycoddling the team, by delegating only the easy or non-critical work to juniors, and keeping the hardest work for themselves, as the person on the team most capable of delivering at speed.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Unfortunately, while we shall see that mollycoddling is extremely harmful to long-term team health, it is also often a very effective way to accelerate delivery. The higher bandwidth of the tech lead is often most efficiently deployed by eating up all the hardest work:&lt;/p&gt;
    &lt;p&gt;As such, I have seen this pattern repeated time and again over the course of my career. And, of course, it comes at a cost. Siloing of experience in the tech lead makes the team brittle, it makes support harder, and it places ever greater pressure on the tech lead as a single point of failure. What follows next is predictable: burnout, departure, and ensuing crisis as the team struggles to survive without the one person who really knows how everything works.&lt;/p&gt;
    &lt;p&gt;As is usually the case, the solution lies in a third way that avoids these two extremes and balances delivery with team growth. We might frame it as something like:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Implement team practices that allow engineers to deliver working code within a framework that minimises rework, maximises effective collaboration, and promotes personal growth and learning.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;When I was CTO of Datasine, we enshrined this attitude in a simple tech team motto:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Learn. Deliver. Have fun.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Good tech leads expose their engineers to work at the limit of their capabilities, using processes and practices that minimise delivery risk while also enabling each team member to grow their skills, knowledge, and domain expertise. This is, in fact, the essence of good technical leadership.&lt;/p&gt;
    &lt;p&gt;There are many ways to accomplish it, from strict codified frameworks such as the Extreme Programming rules, through to looser sets of principles which we might broadly refer to as “best practices”:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Code reviews&lt;/item&gt;
      &lt;item&gt;Incremental delivery&lt;/item&gt;
      &lt;item&gt;Modular design&lt;/item&gt;
      &lt;item&gt;Test-driven development&lt;/item&gt;
      &lt;item&gt;Pair programming&lt;/item&gt;
      &lt;item&gt;Quality documentation&lt;/item&gt;
      &lt;item&gt;Continuous integration&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;So, for experienced engineers today, an urgent question is: how can we translate these practices into a world of AI-driven coding?&lt;/p&gt;
    &lt;head rend="h2"&gt;LLMs are lightning fast junior engineers&lt;/head&gt;
    &lt;p&gt;In 2025, many engineers are finding themselves for the first time in a position familiar to every tech lead: overseeing a brilliant but unpredictable junior engineer. Harnessing and controlling such talent, in a way that benefits effective team collaboration, is one of the primary challenges of engineering leadership. But AI coding agents need different management to junior engineers, because the nature of their productivity and growth is fundamentally different.&lt;/p&gt;
    &lt;p&gt;As software engineers gain experience, we tend to improve our productivity in multiple ways at the same time: writing more robust code, using better abstractions, spending less time writing and fixing bugs, understanding more complex architectures, covering edge cases more effectively, spotting repeated patterns earlier, etc. Engineering is a rich and complex discipline with many avenues for specialisation, but for simplicity we might group these dimensions into two broad themes:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Quality: ability to deliver more complex, more performant, more maintainable code&lt;/item&gt;
      &lt;item&gt;Velocity: ability to develop working, bug-free code in a shorter space of time&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Over time, good engineers will improve in both axes.&lt;/p&gt;
    &lt;p&gt;Early LLMs were fast to write code, but time spent fixing bugs and removing hallucinations meant they were slow to complete bug-free code. Over time, smarter LLMs and better use of context engineering and tools have meant that modern AI coding agents are much better at “one shot” writing of code. The current generation of commercially available agents can be incredibly fast at producing working code for problems that would challenge some mid-level engineers, though they cannot yet match the expertise of senior engineers:&lt;/p&gt;
    &lt;p&gt;So we can think of the current generation of AI coding agents as junior engineers, albeit with two fundamental differences:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;LLMs deliver code much, much faster than junior engineers, constrained neither by thinking nor writing time;&lt;/item&gt;
      &lt;item&gt;LLMs have no true capacity to learn, and instead only improve through more effective context engineering or the arrival of new foundation models.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As with junior engineering talent, there are broadly two ways that you can deploy them, depending on whether your focus is long-term or short-term:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;AI-driven engineering: employing best practices, foregrounding human understanding of the code, moving slowly to make development sustainable.&lt;/item&gt;
      &lt;item&gt;Vibe coding: throwing caution to the wind and implementing at speed, sacrificing understanding for delivery velocity, hitting an eventual wall of unsalvageable, messy code.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As might be expected, the long-term trajectories of choosing between these two approaches follow much the same pattern as choosing between parallel delegation and mollycoddling of a junior team:&lt;/p&gt;
    &lt;p&gt;This is why the vibe coding approach is great for tiny projects or throwaway prototypes: applications of sufficient simplicity can be delivered without the need for any human thinking at all. By limiting the complexity of our projects and leaning into the capabilities of the tools, we can deliver end-to-end working software in no time at all.&lt;/p&gt;
    &lt;p&gt;But you will hit a wall of complexity that AI is incapable of scaling alone.&lt;/p&gt;
    &lt;p&gt;Building prototypes is now easier than ever. But if we want to effectively use LLMs to accelerate delivery of real, complex, secure, working software, and to realise more than marginal efficiency gains, we need to write a new playbook of engineering practices tailored to maximise collaboration between engineering teams that include both humans and LLMs.&lt;/p&gt;
    &lt;head rend="h2"&gt;How to avoid the AI coding trap&lt;/head&gt;
    &lt;p&gt;AI coding agents are dazzlingly productive, but lack in-depth knowledge of your business, codebase, or roadmap. Left unchecked, they will happily churn out thousands of lines of code with no heed paid to design, consistency, or maintainability. The job of the engineer, then, is to act as a tech lead to these hotshots: to provide the structure, standards, and processes that convert raw speed into sustainable delivery.&lt;/p&gt;
    &lt;p&gt;We need a new playbook for how to deliver working software efficiently, and we can look to the past to learn how to do that. By treating LLMs as lightning-fast junior engineers, we can lean on best practices from the software development lifecycle to build systems that scale.&lt;/p&gt;
    &lt;p&gt;Just as tech leads don't just write code but set practices for the team, engineers now need to set practices for AI agents. That means bringing AI into every stage of the lifecycle:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Specification: exploring, analysing, and refining feature specifications to cover edge cases and narrow focus.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;Documentation: generating and reviewing documentation up front to provide reusable guardrails and lasting evidence.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;Modular Design: scaffolding modular architectures to control context scope and maximise comprehension.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;Test-Driven Development: generating extensive test cases prior to implementation to guide implementation and prevent regression.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;Coding Standards: applying house styles and best practice when generating code, through context engineering.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;quote&gt;
      &lt;p&gt;Monitoring &amp;amp; Introspection: analysing logs and extracting insights faster than any human ever could.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;By understanding that delivering software is so much more than just writing code, we can avoid the AI coding trap and instead hugely amplify our ability to deliver working, scalable software.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45405177</guid><pubDate>Sun, 28 Sep 2025 15:43:33 +0000</pubDate></item><item><title>Bayesian Data Analysis, Third edition (2013) [pdf]</title><link>https://sites.stat.columbia.edu/gelman/book/BDA3.pdf</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45406109</guid><pubDate>Sun, 28 Sep 2025 17:23:21 +0000</pubDate></item><item><title>The QMA Singularity</title><link>https://scottaaronson.blog/?p=9183</link><description>&lt;doc fingerprint="310f29fe25a40c80"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;The QMA Singularity&lt;/head&gt;
    &lt;p&gt;A couple days ago, Freek Witteveen of CWI and I posted a paper to the arXiv called “Limits to black-box amplification in QMA.” Let me share the abstract:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;We study the limitations of black-box amplification in the quantum complexity class QMA. Amplification is known to boost any inverse-polynomial gap between completeness and soundness to exponentially small error, and a recent result (Jeffery and Witteveen, 2025) shows that completeness can in fact be amplified to be doubly exponentially close to 1. We prove that this is optimal for black-box procedures: we provide a quantum oracle relative to which no QMA verification procedure using polynomial resources can achieve completeness closer to 1 than doubly exponential, or a soundness which is super-exponentially small. This is proven by using techniques from complex approximation theory, to make the oracle separation from (Aaronson, 2008), between QMA and QMA with perfect completeness, quantitative.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;You can also check out my PowerPoint slides here.&lt;/p&gt;
    &lt;p&gt;To explain the context: QMA, or Quantum Merlin Arthur, is the canonical quantum version of NP. It’s the class of all decision problems for which, if the answer is “yes,” then Merlin can send Arthur a quantum witness state that causes him to accept with probability at least 2/3 (after a polynomial-time quantum computation), while if the answer is “no,” then regardless of what witness Merlin sends, Arthur accepts with probability at most 1/3. Here, as usual in complexity theory, the constants 2/3 and 1/3 are just conventions, which can be replaced (for example) by 1-2-n and 2-n using amplification.&lt;/p&gt;
    &lt;p&gt;A longstanding open problem about QMA—not the biggest problem, but arguably the most annoying—has been whether the 2/3 can be replaced by 1, as it can be for classical MA for example. In other words, does QMA = QMA1, where QMA1 is the subclass of QMA that admits protocols with “perfect completeness”? In 2008, I used real analysis to show that there’s a quantum oracle relative to which QMA ≠ QMA1, which means that any proof of QMA = QMA1 would need to use “quantumly nonrelativizing techniques” (not at all an insuperable barrier, but at least we learned something about why the problem is nontrivial).&lt;/p&gt;
    &lt;p&gt;Then came a bombshell: in June, Freek Witteveen and longtime friend-of-the-blog Stacey Jeffery released a paper showing that any QMA protocol can be amplified, in a black-box manner, to have completeness error that’s doubly exponentially small, 1/exp(exp(n)). They did this via a method I never would’ve thought of, wherein a probability of acceptance is encoded via the amplitudes of a quantum state that decrease in a geometric series. QMA, it turned out, was an old friend that still had surprises up its sleeve after a quarter-century.&lt;/p&gt;
    &lt;p&gt;In August, we had Freek speak about this breakthrough by Zoom in our quantum group meeting at UT Austin. Later that day, I asked Freek whether their new protocol was the best you could hope to do with black-box techniques, or whether for example one could amplify the completeness error to be triply exponentially small, 1/exp(exp(exp(n))). About a week later, Freek and I had a full proof written down that, using black-box techniques, doubly-exponentially small completeness error is the best you can do. In other words: we showed that, when one makes my 2008 QMA ≠ QMA1 quantum oracle separation quantitative, one gets a lower bound that precisely matches Freek and Stacey’s protocol.&lt;/p&gt;
    &lt;p&gt;All this will, I hope, interest and excite aficianados of quantum complexity classes, while others might have very little reason to care.&lt;/p&gt;
    &lt;p&gt;But here’s a reason why other people might care. This is the first paper I’ve ever put out for which a key technical step in the proof of the main result came from AI—specifically, from GPT5-Thinking. Here was the situation: we had an N×N Hermitian matrix E(θ) (where, say, N=2n), each of whose entries was a poly(n)-degree trigonometric polynomial in a real parameter θ. We needed to study the largest eigenvalue of E(θ), as θ varied from 0 to 1, to show that this λmax(E(θ)) couldn’t start out close to 0 but then spend a long time “hanging out” ridiculously close to 1, like 1/exp(exp(exp(n))) close for example.&lt;/p&gt;
    &lt;p&gt;Given a week or two to try out ideas and search the literature, I’m pretty sure that Freek and I could’ve solved this problem ourselves. Instead, though, I simply asked GPT5-Thinking. After five minutes, it gave me something confident, plausible-looking, and (I could tell) wrong. But rather than laughing at the silly AI like a skeptic might do, I told GPT5 how I knew it was wrong. It thought some more, apologized, and tried again, and gave me something better. So it went for a few iterations, much like interacting with a grad student or colleague. Within a half hour, it had suggested to look at the function&lt;/p&gt;
    &lt;p&gt;$$ Tr[(I-E(\theta))^{-1}] = \sum_{i=1}^N \frac{1}{1-\lambda_i(\theta)}. $$&lt;/p&gt;
    &lt;p&gt;It pointed out, correctly, that this was a rational function in θ of controllable degree, that happened to encode the relevant information about how close the largest eigenvalue λmax(E(θ)) is to 1. And this … worked, as we could easily check ourselves with no AI assistance. And I mean, maybe GPT5 had seen this or a similar construction somewhere in its training data. But there’s not the slightest doubt that, if a student had given it to me, I would’ve called it clever. Obvious with hindsight, but many such ideas are.&lt;/p&gt;
    &lt;p&gt;I had tried similar problems a year ago, with the then-new GPT reasoning models, but I didn’t get results that were nearly as good. Now, in September 2025, I’m here to tell you that AI has finally come for what my experience tells me is the most quintessentially human of all human intellectual activities: namely, proving oracle separations between quantum complexity classes. Right now, it almost certainly can’t write the whole research paper (at least if you want it to be correct and good), but it can help you get unstuck if you otherwise know what you’re doing, which you might call a sweet spot. Who knows how long this state of affairs will last? I guess I should be grateful that I have tenure.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45406911</guid><pubDate>Sun, 28 Sep 2025 19:00:20 +0000</pubDate></item><item><title>Roe (YC W24) Is Hiring</title><link>https://news.ycombinator.com/item?id=45407951</link><description>&lt;doc fingerprint="272cfbb0f5843336"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;ROE is building AI Agents for risk and compliance. We are trusted by companies like eBay, Affirm and Tier 1 banks.&lt;/p&gt;
      &lt;p&gt;Hiring ambitious, talented founding engineers. Base $150K-250K, 0.75-2% options.&lt;/p&gt;
      &lt;p&gt;San Mateo office, 3 days hybrid working mode. Free lunch.&lt;/p&gt;
      &lt;p&gt;We sponsor H1B / PERM.&lt;/p&gt;
      &lt;p&gt;Link to apply https://www.ycombinator.com/companies/roe/jobs/OFFxite-found...&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45407951</guid><pubDate>Sun, 28 Sep 2025 21:00:07 +0000</pubDate></item><item><title>Play snake in the URL address bar</title><link>https://demian.ferrei.ro/snake/</link><description>&lt;doc fingerprint="5cfba17d98173e2c"&gt;
  &lt;main&gt;
    &lt;p&gt;⚠ Sorry, this game requires JavaScript. URL: ? Use the arrow keys or WASD to control the snake on the URL. Use the arrows to control the snake on the URL. Click here if you can't see the page URL or if it looks messed up with . 〈 ! Your highest score is points! Share 〈 ▲︎ ◀︎ ▼︎ ▶︎&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45408021</guid><pubDate>Sun, 28 Sep 2025 21:08:15 +0000</pubDate></item><item><title>Farewell friends</title><link>https://humbledollar.com/forum/farewell-friends/</link><description>&lt;doc fingerprint="7e10d11d8ab6920a"&gt;
  &lt;main&gt;
    &lt;p&gt;Go to main Forum page »&lt;/p&gt;
    &lt;p&gt;If this post is appearing, it means I’ve succumbed to cancer or one of its side effects. Please don’t feel sad for me. I’ve had a life filled with love, great experiences and wonderful career opportunities. Despite my demise at a relatively young age, I consider myself beyond fortunate.&lt;/p&gt;
    &lt;p&gt;I’m hoping that, under the tree in front of our little Philadelphia rowhome, my wife Elaine will place a stone tablet inscribed with my name, and the year I was born and died. Underneath, I’d like the tablet to read:&lt;/p&gt;
    &lt;p&gt;Family • Readers • Words&lt;/p&gt;
    &lt;p&gt;(Note to Elaine: If you ever move, feel free to take the tablet with you.)&lt;/p&gt;
    &lt;p&gt;Family is everybody who’s brought love into my life: Elaine, my two children, my larger family, my close friends. Meanwhile, readers have been those I’ve served, and who rewarded that service with so much loyalty and affection. Finally, words have been my playground, taking the insights I’ve garnered and trying to make them understandable to others. Beside the tree are two metal chairs. I hope family and passersby will occasionally stop by, and fill me in on what I’ve been missing.&lt;/p&gt;
    &lt;p&gt;I’ve asked Elaine to arrange a memorial service at St Peter’s Church in Philadelphia’s Old City. She’ll post the time and date to the Forum when the details have been worked out.&lt;/p&gt;
    &lt;p&gt;Regular readers will know much of my life’s story. But I figure it’s appropriate to offer a not-so-brief recap.&lt;/p&gt;
    &lt;p&gt;I was born at 14 St Margarets Drive in Twickenham, London, on Jan. 2, 1963. At that time in the UK, it was standard practice for mothers to give birth in the hospital if it was their first child—or, in my mother’s case, her first two children. My older brothers, who are identical twins, had been born two years earlier. Because that first delivery went smoothly, my birth would be at home. From what I gather, the midwife took cigarette and scotch breaks with my father during lulls in the action. I was born at 6 a.m., thus establishing a lifetime habit of starting early.&lt;/p&gt;
    &lt;p&gt;In 1966, my father left financial journalism for a job at the World Bank, and we moved from London to Washington, DC. Two years later, my younger sister was born. In late 1972, my father was posted to the World Bank’s Bangladesh office for four years, and I was dispatched to boarding school in England, joining my two brothers.&lt;/p&gt;
    &lt;p&gt;After the comforts of a U.S. suburban childhood, it was a brutal change—cold dormitories, disgusting food, endless bullying—and I carried the scars for the rest of my life. But there was a silver lining: After nine years of boarding school, I squeaked into Cambridge University, where I spent much of my three years writing for and editing the student newspaper.&lt;/p&gt;
    &lt;p&gt;When I graduated Cambridge in 1985, the UK economy was in rough shape and landing a job was difficult. I ended up working for Euromoney magazine in London. Initially, all went well. But then there was a change in editor and, for reasons I never understood, the new editor took an instant dislike to me and made it clear he wanted me gone. But by then, I’d already decided to leave London and return to the U.S.&lt;/p&gt;
    &lt;p&gt;My then-fiancee and I flew to New York in August 1986. After a desperate scramble, I landed a job as a reporter—read “fact checker”—at Forbes magazine. The pay was miserable, but I couldn’t have been more grateful for that first paycheck. By then, all I had to my name was credit card debt.&lt;/p&gt;
    &lt;p&gt;Molly and I were married the following June, and Hannah arrived 15 months later. Her younger brother, Henry, would follow in 1992.&lt;/p&gt;
    &lt;p&gt;After 23 months as a fact checker, I was promoted to staff writer at Forbes, covering mutual funds. The Wall Street Journal, which was also in need of a funds reporter, came calling 16 months later. I’d always thought I’d never be a real journalist until I worked for a daily newspaper, and yet initially I said no.&lt;/p&gt;
    &lt;p&gt;At the time, I was in the midst of six months as a single parent, looking after Hannah on my own while Molly was in Syria, Greece and Turkey conducting research for her PhD. Still, the Journal wasn’t deterred, saying it would make allowances during my initial months.&lt;/p&gt;
    &lt;p&gt;In the early 1990s, the Journal was very different from the newspaper it is today. No photos, just the dot drawings for which the paper was renowned. While strong opinions could be found on the editorial page, they were to be avoided in the news pages. The sort of advice journalism I favored was frowned upon by some among the paper’s senior ranks.&lt;/p&gt;
    &lt;p&gt;Still, in 1994, Managing Editor Paul Steiger said he’d consider a few columnists for the Journal’s news pages. At age 31, and with some trepidation, I put up my hand. Thus was born the Getting Going column, which I wrote for the next 13-plus years, penning 1,009 columns for both The Wall Street Journal and Wall Street Journal Sunday. The latter were branded pages that appeared in some 70 newspapers around the country.&lt;/p&gt;
    &lt;p&gt;In retrospect, it’s astonishing that I was given my own column at such a young age. It took me a few months to hit my stride, but I was soon pounding away at the virtues of index funds, while also exploring new topics, often scouring academic research for insights I could share with readers.&lt;/p&gt;
    &lt;p&gt;The decade and a half that followed are something of a blur. I was cranking out columns, commuting into New York City from the New Jersey suburbs, and raising two children. In my memory, the years have the monotony of a hamster wheel. But that wasn’t the reality: There were high points and low points, plus the joy of watching Hannah and Henry grow up. The low points included the World Trade Center attack, my father’s death and a libel suit brought against the Journal. I’d been involved in editing the story that triggered the lawsuit.&lt;/p&gt;
    &lt;p&gt;In early 1995, while in Pittsburgh, I went on a nine-mile run with my brother-in-law, who was training for the city’s marathon. I’d long viewed running those 26.2 miles as a heroic endeavor. I committed to returning for the next year’s marathon. But I didn’t simply want to complete the distance. Instead, I set a goal of finishing in under three hours. I managed it, though barely, crossing the finish line 24 seconds under the three-hour mark.&lt;/p&gt;
    &lt;p&gt;I ran countless road races over the next dozen years. I had my greatest success with half-marathons, finishing third in the four races I ran on land—and first in the 2001 half-marathon held on the deck of a boat floating off Antarctica. In shorter races, from one mile to 10, I also managed perhaps a dozen first-place finishes. What about the tearful, wimpy English schoolboy who had previously shunned athletic endeavors? Over countless miles, I managed to leave him behind.&lt;/p&gt;
    &lt;p&gt;Career and athletic success were not, alas, rivaled by relationship success. Molly announced she wanted a divorce in 1998. It would be the first of two failed marriages—not an achievement I’m proud of. But the third time was a charm. In the midst of the pandemic, Elaine and I met in August 2020, the month my second marriage officially ended. We were living together by the end of the month and married almost four years later, in May 2024, five days after my cancer diagnosis. I met Elaine during one of my life’s roughest periods, and was so lucky to have done so. Elaine, I fear, was not so fortunate, for now she must navigate the world on her own.&lt;/p&gt;
    &lt;p&gt;By 2006 or so, I’d started to tire of the Getting Going column, and began casting around for what to do next. I had a few conversations with potential employers, but those came to naught. Then, one day in early 2008, my phone rang. It was Andy Seig from Citigroup. He was heading up a startup within Citi known as myFi, which was aiming to deliver advice on a client’s entire financial life in return for a flat monthly fee. It was, I imagined, the exit from the Journal I was looking for.&lt;/p&gt;
    &lt;p&gt;I joined myFi that spring, and it soon became apparent that launching a startup in the middle of a huge corporate bureaucracy was a foolhardy endeavor. Layered on top of that was the financial crisis that unfolded through the year. By mid-2009, myFi was dead, and we employees spent a long, aimless summer trying to figure out what was next.&lt;/p&gt;
    &lt;p&gt;Next turned out to be a new wealth management operation cobbled together by combining myFi’s remaining employees, who had been hired to launch an innovative new financial service, and the old school brokers who sat in Citi’s bank branches. It wasn’t exactly a match made in heaven.&lt;/p&gt;
    &lt;p&gt;I toughed it out at Citi until spring 2014. Money was undoubtedly part of the reason. I was making more than $300,000 a year, a gaudy sum for a onetime ink-stained wretch. And the job wasn’t without interest. As director of financial education for the U.S. wealth management business, I gave more than 30 speeches in some years—forcing me to overcome my fear of public speaking—and I was dealing with financial topics I’d rarely written about as a journalist, while also learning about the investment business from the inside. Still, I was also frustrated by the nit-picky oversight of lawyers and compliance officers, and vowed to leave.&lt;/p&gt;
    &lt;p&gt;For a year, I planned my departure, getting my finances in order and setting in motion some work projects for my life after Citi. I waited until I got my final year-end bonus in early 2014, and then handed in my notice.&lt;/p&gt;
    &lt;p&gt;What followed was a period I came to call my second childhood. Initially, that meant a 15-month return to The Wall Street Journal as a freelance columnist—I left when my editor got ousted during a round of layoffs in 2015—and also working on two annual editions of the Jonathan Clements Money Guide. That guide eventually became the core of HumbleDollar, which I launched on Dec. 31, 2016.&lt;/p&gt;
    &lt;p&gt;The two printed editions of the money guide were among the nine books I wrote over my career—eight personal finance books and a novel. I also edited two books, including My Money Journey, a compilation of 30 essays by HumbleDollar writers, and contributed essays to a fistful of other tomes, including penning the foreword to two Bill Bernstein books. None of the books I authored was a huge success. But my favorite, and the one with the best sales, was my 2016 book, How to Think About Money.&lt;/p&gt;
    &lt;p&gt;In 2016, I was also contacted by Peter Mallouk, president of fast-growing Creative Planning, a registered investment advisor that favored index funds and sought to help clients with their entire financial life. As at Citi, I was again given the title of director of financial education, though I remained an independent contractor and worked limited hours for Creative. Still, for me, it proved to be one of my career’s most enjoyable professional relationships. Peter was great to work with, and together we hosted a monthly podcast that ran for the rest of my life.&lt;/p&gt;
    &lt;p&gt;By May 2024, I’d been living in Philadelphia for more than three years, I was engaged to Elaine and living just an eight-minute walk from my daughter, son-in-law and two grandsons. The youngest was born that month. Elaine and I were talking about retirement, trying to figure out how we could travel more and have more time for each other, even as I kept HumbleDollar humming along.&lt;/p&gt;
    &lt;p&gt;And then I got my cancer diagnosis.&lt;/p&gt;
    &lt;p&gt;The period immediately after was astonishingly busy, as I tried to get my affairs in order and prep HumbleDollar for a life without me, even as my diagnosis triggered a surprising amount of media attention. The New York Times wrote about my illness, I was interviewed for Consuelo Mack’s WealthTrack, and I was asked to pen articles for The Washington Post, The Telegraph of London, The Wall Street Journal and AARP magazine. Who knew that candor about one’s own death would generate so much interest? It was an odd bookend to a life spent partly in the public eye—one that had previously been most notable for pounding the table for index funds.&lt;/p&gt;
    &lt;p&gt;I faced the final months not with sorrow, but with great gratitude. I had spent almost my entire adult life doing what I love and surrounded by those that I love. Who could ask for more?&lt;/p&gt;
    &lt;p&gt;Rest in Peace, Jonathan. My heartfelt condolences to your family. You were a great inspiration for your investing wisdom, retirement planning and you had a unique gift through your writings to reach out to countless investors. Thank you for your insights and wisdom over these years – truly appreciate it!&lt;/p&gt;
    &lt;p&gt;Jonathan…I have tears in my eyes as I write this. You have meant so much to so many. I enjoyed briefly chatting with you a few years go to invite you to address our group in Los Angeles. Was also delighted to contribute a column to Humble Dollar a few years ago detailing the benefit of saving early so you can retire early. Your editing of my column was totally “on point.” More importantly… condolences to Elaine and your family. To me, you are the most influential personal finance//investor writer that I have ever come across. Your columns in the WSJ gave me the confidence to be a DIYer. The “tone” of your columns were always so welcoming. God Bless you Jonathan and may you rest in peace. Fondest Regards and Admiration, Fred&lt;/p&gt;
    &lt;p&gt;Reading your words, I felt both a deep sadness and an overwhelming sense of gratitude for the way you’ve reflected on life. The way you described family, readers, and words as the core pillars of your journey is incredibly moving. It’s clear you not only lived fully but also gave so much of yourself to others. Your story about resilience—from tough school years to marathon running—shows how determination can reshape even the hardest parts of life. Somewhere in your reflections, when you mention the small everyday comforts, it reminded me how important it is to hold onto simple things.&lt;lb/&gt; What stands out most is your unwavering honesty and gratitude. If you could leave one piece of advice for younger readers—those just starting out in their personal and professional journeys—what would it be?&lt;/p&gt;
    &lt;p&gt;I am so very sorry to hear this news. We all read Elaine’s post Saturday about Hospice hoping this one would not come soon.&lt;/p&gt;
    &lt;p&gt;My deepest condolences and prayers for all of the Clements.&lt;/p&gt;
    &lt;p&gt;He will be sorely missed, not just for his humor and sage advice , but for the strength and fortitude he exhibited these last few years, as exemplified by the first sentences of this post, and this almost immortal quote&lt;/p&gt;
    &lt;p&gt;“I’m not brave,” Clements told a friend last year. “Dying is a full-time job, so I might as well try to do it well. I’m just trying to get the most out of each day.”&lt;lb/&gt;I have read Jonathan”s work avidly since well before he left the WSJ the first time. Somehow I always managed to find him again and keep listening.&lt;/p&gt;
    &lt;p&gt;While his early messages were about investing and gradually moved to focus on index funds and simplicity.&lt;/p&gt;
    &lt;p&gt;I did not follow as much of the index funds and simplicity advice as he would have liked. Fiddling around with finances is enjoyable but he has to take a fair amount of the blame for that as HD columns have illuminated a lot of the mystery, making it enjoyable.&lt;/p&gt;
    &lt;p&gt;What will stick with me forever and what made the greatest impression on me was his advice to live frugally, spend money on experiences, not material goods so as to enjoy life the most with the ones you love and to be prepared at the end so as not to leave your family with a mess.&lt;/p&gt;
    &lt;p&gt;Rest in Peace dear friend.&lt;/p&gt;
    &lt;p&gt;Like everyone who has written before me, I owe many thanks to Jonathan’s writings and the many contributors who have helped me stay connected and informed as my own career in the finance industry ended upon retirement.&lt;/p&gt;
    &lt;p&gt;Jonathan was simply too young to now be gone, but as we mostly know and accept, there is seldom a “good” time to depart. To his family: I grieve for your loss and thank you for sharing him with us for along as we had him.&lt;/p&gt;
    &lt;p&gt;My condolences to Jonathan Clements family. May Jonathan Rest in Peace and may God Bless Jonathan and his family.&lt;lb/&gt; Thank you Jonathan for your lessons and articles. You’ve left a great legacy that will go on for many years. To the Humble Dollar team, you learned a lot and are great writers and my condolences to all of you.&lt;lb/&gt; yours Greg Winnipeg, Manitoba Canada&lt;/p&gt;
    &lt;p&gt;Condolences to Jonathan’s family. As with other commentators here, from his earliest days at WSJ Jonathan has had a profound impact on my financial trajectory and the way I approached life. His advice to work hard and save while young made all the difference. His brave and industrious acceptance of his cancer diagnoses provides a further lesson. What a profoundly meaningful life.&lt;/p&gt;
    &lt;p&gt;So sad to hear about Jonathan’s passing. Even though I was about twelve years older than him, he felt like a father figure to me because of his wise advice.&lt;/p&gt;
    &lt;p&gt;I saved every email he sent me when I was submitting Humble Dollar articles for him to edit. They’re all archived under my old AOL account, simply titled “blog” — too many for me to count.&lt;/p&gt;
    &lt;p&gt;I guess I was trying to hold on to something that was very special to me. I will miss him very much.&lt;/p&gt;
    &lt;p&gt;My condolences to Elaine and his family.&lt;/p&gt;
    &lt;p&gt;My deepest condolences to Elaine, June, Hannah, Henry, Irina, Nicholas &amp;amp; Andrew. Jonathan was a Giant in the financial world, giving wisdom &amp;amp; guidance to millions of people through the WSJ, Sunday newspapers, Humble Dollar &amp;amp; his books. He will be greatly missed by all of us.&lt;lb/&gt; RIP Jonathan.&lt;/p&gt;
    &lt;p&gt;Even anticipating this day, I was a bit surprised to be as emotional about the passing of someone who I’ve never met except for the occasional online interchange. But then again, it was a nearly 30 year “relationship,” and one I credit for significant material benefit. Condolences to Elaine, Jon’s family, and the larger personal finance family that looked to Jon as a source of trusted advice. RIP.&lt;/p&gt;
    &lt;p&gt;Whenever I find myself about to say or do something that will highlight my ignorance, envy, lack of empathy, unkindness, or any of my various other personality and behavioral defects, I hope to be able to stop before I do so and ask myself, “What would Jonathan do?”. Such a class act and role model in so many ways.&lt;/p&gt;
    &lt;p&gt;Condolences to his family. He is leaving his large legacy of financial literacy to both the younger population studying and working and the retired population trying to sustain their finances in non-working years. A life should be lived that way to be useful for so many. I benefited from his writings. RIP Jonathan Clements.&lt;/p&gt;
    &lt;p&gt;That’s a heck of a life you lived, Jonathan. While you died before your time, you did a lot of living. A lot. And much of it devoted to the welfare of others. May God bless you, and keep you.&lt;/p&gt;
    &lt;p&gt;And I’m very pleased that we have several more of your reflections to look forward to over the coming months. I’ll think of you every time I check back with the Humble Dollar community.&lt;/p&gt;
    &lt;p&gt;My sympathies to Elaine, and Jonathan’s entire family. We lost a very good man. It saddens me greatly to think that he is no longer with us.&lt;/p&gt;
    &lt;p&gt;Farewell, Jonathan, and thank you.&lt;/p&gt;
    &lt;p&gt;Deepest condolences to Elaine and the entire family. All of us would hope to have loved ones like you for support and comfort in their final hours. Be sure to take good care of yourselves in the grieving process, and take comfort in knowing that Jonathan left a legacy of impact and respect very few can hope to approach.&lt;/p&gt;
    &lt;p&gt;Peace.&lt;/p&gt;
    &lt;p&gt;A sad day that I hoped would continue to be delayed. I’m so grateful to Jonathan for his wisdom, his kindness and his encouragement. He welcomed and encouraged me to be an active part of this community. Since I was a minister he would reach out to me on religious holidays for my take on issues of money &amp;amp; spirituality. He lived an amazing life and he left us so many lessons, especially after his cancer diagnosis. My thought and love are with Elaine and his family. What a gift he and his life were for all of us. May we take a piece of him with us as we try to make the world a little better on our journeys. He left us a wonderful roadmap. Blessings, love and thanks.&lt;/p&gt;
    &lt;p&gt;While I’m still a work in progress, Jonathan taught me more about the relationship between money and happiness than anyone. I will cherish my last email from Jonathan a month ago. He had heard I had a health event and wanted me to know he was thinking of me. Just like Jonathan to be thinking of others while he knew he was dying and likely in so much pain.&lt;/p&gt;
    &lt;p&gt;Jonathan, thanks for all you have done for me and millions of others. I know your passing was expected but it’s still shocking for me.&lt;/p&gt;
    &lt;p&gt;Elaine, I’ve never met you but I do know you made Jonathan’s final years so happy. Thank you, and I’m so sorry for your loss.&lt;/p&gt;
    &lt;p&gt;My heart aches after reading this. Even though we never met in person, you have helped settle my anxiety about investments and the market shifts, etc., through your writings. I have always looked forward to reading your articles each day. I lift your family up in prayer this morning. May they be comforted during this time. So thankful, God created a place in Heaven for each of us where we will live pain free for eternity.&lt;/p&gt;
    &lt;p&gt;Susan Hayden&lt;lb/&gt; Tupelo MS&lt;/p&gt;
    &lt;p&gt;RIP, Jonathan. It was a privilege to be able to meet and work with you over the past four years as a contributor to HD. What a surprise it was for me to find out that such an accomplished journalist and a brilliant investing mind could be so down-to-earth and humble. But that was the kind of person you were. Your wisdom lives on in the thousands of readers you touched over the years at the WSJ and here on HD. You will be greatly missed.&lt;/p&gt;
    &lt;p&gt;Our deepest condolences to Elaine, Hannah, Henry, and the rest of the family.&lt;/p&gt;
    &lt;p&gt;Jonathan,&lt;/p&gt;
    &lt;p&gt;You were first my hero and then my friend. You were a gift to this world and epitomized “The Man in the Arena”:&lt;/p&gt;
    &lt;p&gt;THE MAN IN THE ARENA&lt;/p&gt;
    &lt;p&gt;“IT IS NOT THE CRITIC WHO COUNTS. NOT TRE MAN WHO POINTS OUT HOW THE STRONG MAN STUMBLES, OR WHERE THE DOER OF DEEDS COULD HAVE DONE THEM BETTER. THE CREDIT BELONGS TO THE MAN WHO IS ACTUALLY IN THE ARENA, WHOSE FACE IS MARRED BY DUST AND SWEAT AND BLOOD; WHO STRIVES VAL IANTLY; WHO ERRS, WHO COMES SHORT AGAIN AND AGAIN, BECAUSE THERE IS NO EFFORT WITHOUT ERROR AND SHORTCOMING: BUT WHO DOES ACTUALLY STRIVE TO DO THE DEEDS; WHO KNOWS GREAT ENTHUSIASMS, THE GREAT DEVOTIONS: WHO SPENDS HIMSELF IN A WORTHY CAUSE; WHO AT THE BEST KNOWS IN THE END THE TRIUMPH OF HIGH ACHIEVEMENT, AND WHO AT THE WORST, IF HE FAILS, AT LEAST FAILS WHILE DARING GREATLY, SO THAT HIS PLACE SHALL NEVER BE WITH THOSE COLD AND TIMID SOULS WHO NEITHER KNOW VICTORY NOR DEFEAT.”&lt;/p&gt;
    &lt;p&gt;Theodore Roosevelt&lt;/p&gt;
    &lt;p&gt;You taught us how to dare greatly and live a happy, fulfilling life, using money as a tool to this end. You also taught us how to die a regret free life. You talked the talk and walked the walk. I am privileged to have met you, dined with you, and even hosted you on my podcast Catching Up to FI. When I “came out of the closet” as a late starter on the journey to financial independence, you deftly edited my prose and published my post “Saving Our Retirement” on Humble Dollar. I am forever grateful to you for your generous friendship and the personal impact you have had on my life and those of countless others.&lt;/p&gt;
    &lt;p&gt;Rest in Peace.&lt;/p&gt;
    &lt;p&gt;Love,&lt;/p&gt;
    &lt;p&gt;Bill Yount, MD&lt;/p&gt;
    &lt;p&gt;My sincere condolences to the Clements family on the loss of your dear Jonathan. I am grateful that I joined the HD community five years ago, when I especially needed just what was here, and will continue to be: financial and personal advice, camaraderie and, very importantly, civility. You are in my prayers.&lt;/p&gt;
    &lt;p&gt;Jonathan Clements was, and remains, a beacon of sensible financial wisdom. A life mentor to me and countless others, I’m sure. My condolences to your family, loved ones, the HD community and all faithful readers. Thank you for getting me going on the right track. May you rest in peace, sir.&lt;/p&gt;
    &lt;p&gt;RIP, Jonathan, and of course you penned your own farewell to us. I’m sad for your family and friends, and I’m sad for us, as we’ll have to go forward here without your wise, gentle, and gracious leadership.&lt;/p&gt;
    &lt;p&gt;It goes without saying that you’ll be missed, and since I know that one of Jonathan’s fondest wishes over his final year was for HD to live on, I hope we can all commit ourselves to that in honor of his memory.&lt;/p&gt;
    &lt;p&gt;RIP Jonathan and my heat felt condolences to Elaine and your family. In an effort to not be sad, I like to think Jonathan is now sitting shoulder to shoulder with to the likes of John Bogle, who is smiling and giving an approving nod and wink.&lt;/p&gt;
    &lt;p&gt;I started out reading the WSJ personal finance weekend edition in my Sunday local newspaper. No doubt some of Jonathan’s columns were in there. 30 plus years later I’m pushing 50 and giving advice to others. More importantly, a life of disciplined index fund/tax efficient investing has left me rich—thanks to the Mount Rushmore of Jonathan Clements, Jack Bogle, Brian Preston, and more.&lt;/p&gt;
    &lt;p&gt;Jonathan’s death happened to fall on the eve of the Jewish New Year. It is a custom to dip apples in honey to signify a hopeful sweet start to the year. With Jonathan’s wishes of no sadness as part of my wishes I will include Jon’s lust for life and giving personality. May his memory always be a blessing&lt;/p&gt;
    &lt;p&gt;A beautiful tribute, by Jonathan’s friend, Jason Zweig, at the WSJ (should be gifted/unlocked):&lt;lb/&gt; https://www.wsj.com/finance/investing/jonathan-clements-longtime-wsj-columnist-dies-at-62-8753c01d?st=zKGjNV&amp;amp;reflink=desktopwebshare_permalink&lt;/p&gt;
    &lt;p&gt;Jason’s wonderful tribute in the WSJ + now this final essay from Jonathan = the tears just keep flowing. 😭 Can’t believe he’s gone.&lt;/p&gt;
    &lt;p&gt;But I know a part of him will live on on this site and in his books and via his family. That helps, a little.&lt;/p&gt;
    &lt;p&gt;Plus the Creative Planning podcasts he did each month with Peter Mallouk. Here’s an episode:&lt;/p&gt;
    &lt;p&gt;https://podcasts.apple.com/us/podcast/signal-or-noise/id1691155499?i=1000713518395&lt;/p&gt;
    &lt;p&gt;-or-&lt;/p&gt;
    &lt;p&gt;https://open.spotify.com/episode/68ZB8CctzIdRmdnZn6xzmF?si=iD4DffFESW-B3RkiWi2ZWg&lt;/p&gt;
    &lt;p&gt;Thanks for the link, David. The story contains a great Jonathan quote:&lt;/p&gt;
    &lt;p&gt;“Dying is a full-time job, so I might as well try to do it well. I’m just trying to get the most out of each day.”&lt;/p&gt;
    &lt;p&gt;Shakespeare’s sonnet 60 somehow seems appropriate for a former enthusiastic UK student journalist:&lt;/p&gt;
    &lt;p&gt;Like as the waves make towards the pebbled shore,&lt;lb/&gt; So do our minutes hasten to their end;&lt;lb/&gt; Each changing place with that which goes before,&lt;lb/&gt; In sequent toil all forwards do contend.&lt;lb/&gt; Nativity, once in the main of light,&lt;lb/&gt; Crawls to maturity, wherewith being crown’d,&lt;lb/&gt; Crooked elipses ’gainst his glory fight,&lt;lb/&gt; And Time that gave doth now his gift confound.&lt;lb/&gt; Time doth transfix the flourish set on youth&lt;lb/&gt; And delves the parallels in beauty’s brow,&lt;lb/&gt; Feeds on the rarities of nature’s truth,&lt;lb/&gt; And nothing stands but for his scythe to mow:&lt;lb/&gt; And yet to times in hope my verse shall stand,&lt;lb/&gt; Praising thy worth, despite his cruel hand.&lt;/p&gt;
    &lt;p&gt;Like all HumbleDollar readers, I’m heartbroken after learning of Jonathan’s passing.&lt;/p&gt;
    &lt;p&gt;I feel like Socrates’ students must have felt after their master drank his fateful cup of hemlock. My teacher, my guiding light is gone. I shall not see another like him in my lifetime.&lt;/p&gt;
    &lt;p&gt;Rest in peace, Jonathan.&lt;/p&gt;
    &lt;p&gt;Even though we all knew it was coming, this hits hard. But up until Elaine recently posted that Jonathan had entered hospice, I couldn’t help hoping for a miracle.&lt;/p&gt;
    &lt;p&gt;Jonathan was, as ever, more pragmatic, and spent his last months as he’d spent all the others—carrying on with his life’s work. And as his final gift, he found a way to have Humble Dollar live on. Thanks again, Bogdan, for picking up the reins.&lt;/p&gt;
    &lt;p&gt;Over many years now I’ve admired Jonathan’s ability to teach about money—how to handle it, and how to think about it. Over the last 14 months, I’ve admired how he’s approached his own end. I intend to always remember both.&lt;/p&gt;
    &lt;p&gt;The title and first sentence sent a chill through me. Although we knew the end was coming and he kept us apprised of his health status, I wasn’t expecting the news to come out this way. But yet, the more I think about it, it was a perfect way to say farewell from a journalist. This final one will be a keeper.&lt;/p&gt;
    &lt;p&gt;Dear Elaine and June Dosik, I know how little the words of an outsider mean to you just now but I must tell you how deeply I sympathize with you and all Jonathan’s family in your great loss.&lt;/p&gt;
    &lt;p&gt;Jonathan has left a place in the whole community that will be difficult to fill. I think of all he stood for that was fine and helpful. I don’t think anything will be the same without him. Sincerely, Marjorie&lt;/p&gt;
    &lt;p&gt;Jonathan has been an inspiration over the past fifteen months since his cancer diagnosis but also through his life. So many of us have benefited from his wisdom and intellect. While I was as frugal as he or perhaps more so he provided me with guidance on how to invest my money. I quickly caught on. He trusted me to be one of the early writers on HD. I never thought I was terribly good at it but he surprised me by saying that he rarely had to do much editing to my work. Our family stayed close in spite of the distance that separated us. During difficult life situations he provided the guidance that we needed at the time. We will miss him terribly. Thank you to all who have written notes on HD expressing what he has meant to them. Rest easy Jonathan with our sister Tory and Dad.&lt;/p&gt;
    &lt;p&gt;Sorry Jonathan–I DO feel sad. I will miss your emails that always encouraged me to write more HD contributions. I will miss your wit and wisdom. I regret that we never got to meet in person. My sincere condolences go out to your family and friends.&lt;/p&gt;
    &lt;p&gt;From June Dosik: My sweet son jonathan has left our planet,and has given of himself to our world a wealth of knowledge in which we may make our life a little easier. May Humble Dollar thrive, and may you, Elaine.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45408229</guid><pubDate>Sun, 28 Sep 2025 21:31:10 +0000</pubDate></item><item><title>Go ahead, write the “stupid” code</title><link>https://spikepuppet.io/posts/write-the-stupid-code/</link><description>&lt;doc fingerprint="3b719074d3a44c98"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Go Ahead - Write the “stupid” code&lt;/head&gt;
    &lt;p&gt;When I finished school in 2010 (yep, along time ago now), I wanted to go try and make it as a musician. I figured if punk bands could just learn on the job, I could too. But my mum insisted that I needed to do something, just in case. So I went down to the local TAFE (this is like a trade school in Australia, though it has pathways into uni, it’s pretty neat!) and signed up for whatever looked good. I had always loved computers and gaming, I did all the courses for computing short of programming in school (the school didn’t offer it), and had an interest so I signed up.&lt;/p&gt;
    &lt;p&gt;It wasn’t love at first sight, as I still remember after a week freaking out in my room that I couldn’t do this. But I sat down with my massive VB.NET textbook we had to buy and pushed through it. And once I made it through, it clicked. I fell in love with programming after that, and it became something I was both good at and started growing a passion for.&lt;/p&gt;
    &lt;p&gt;From there, going through my games diploma, and my bachelors in games design and development (think a comp sci degree with game design elements, it’s pretty neat and I’m happy to answer questions about it), I wrote a lot of stupid code. Like a lot of it. In my courses, in my game jams (god good times), in my spare time when I was learning things both in uni and early in my career. It helped me refine my skills, but also learn a lot.&lt;/p&gt;
    &lt;p&gt;Fast forward to today. I’ve been doing a dive on JavaScript/TypeScript and different runtimes like NodeJS and Deno, amongst a bunch of other stuff. At first, I was looking into a deep dive into node with this talk by James Snell and wanted to try out the Streams API. Part of me wanted to start writing straight away, but held back because I didn’t think I had anything to use it on. After being unable to resist the urge to write some code after a few minutes, I just made the dumbest stock ticker I could so I could try streams out in an arbitrary way. But it left me thinking, “why didn’t I hold back”.&lt;/p&gt;
    &lt;p&gt;As I’m writing this now, I came up with the answer. As I was writing a little app to output inspirational quotes, I started umm’ing and ahh’ing over if I should make this. It’s small, it’s dumb, and there were probably plenty of options out there. But I wanted to write some code, and was interested in trying out Deno and seeing how it compiles binaries. So I did it. And I was happy (I’m very excited to use it), and I realised that I was scared to write something dumb. All my years of doing this helped refine my own abilities, but also made me much more harsh on myself. Harsh on my own code, harsh on just trying things.&lt;/p&gt;
    &lt;p&gt;After coming to this realisation, I’ve decided I’m going to give myself more grace when it comes to writing software for myself, and I encourage you all dear readers to do the same if you’ve been feeling this. There is no stupid code. There’s only code. Enjoy writing it, it doesn’t have to be nice or pretty if it’s for you. Have fun, try out that new runtime or language. Poke around and see what breaks. Keep that learning mindset, and keep feeding your curiosity. It’ll help you continue to grow across your career, and if you enjoy this kind of thing as a hobby like me, it’ll keep stoking your own enjoyment and passion.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45408617</guid><pubDate>Sun, 28 Sep 2025 22:20:59 +0000</pubDate></item><item><title>Autism may be the price of human intelligence, linked to human brain evolution</title><link>https://academic.oup.com/mbe/article/42/9/msaf189/8245036?login=false</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45408994</guid><pubDate>Sun, 28 Sep 2025 23:32:32 +0000</pubDate></item><item><title>Show HN: Automatically set real iOS alarms for calendar events</title><link>https://apps.apple.com/us/app/reminders-alarms-beacon/id6752361800</link><description>&lt;doc fingerprint="744b006ce3419a45"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Reminders &amp;amp; Alarms: Beacon 4+&lt;/head&gt;
    &lt;head rend="h2"&gt;Calendar, Countdown &amp;amp; Planner&lt;/head&gt;
    &lt;head rend="h2"&gt;Get Convey Inc.&lt;/head&gt;
    &lt;head rend="h3"&gt;Designed for iPhone&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Free&lt;/item&gt;
          &lt;item&gt;Offers In-App Purchases&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;iPhone Screenshots&lt;/head&gt;
    &lt;head rend="h2"&gt;Description&lt;/head&gt;
    &lt;p&gt;Beacon Calendar&lt;lb/&gt;Never miss an important moment again.&lt;lb/&gt;Calendar notifications are easy to swipe away and forget. Beacon replaces weak alerts with unmissable system alarms that guarantee you're on time for the things that matter most.&lt;lb/&gt;How it works&lt;lb/&gt;Connect your calendars: Works instantly with iOS Calendar. Whether you use Google, iCloud, or Outlookâif it's in your phone's calendar, Beacon sees it.&lt;lb/&gt;Create smart rules: Set conditions like "Only meetings with my manager" or "Events with 3+ attendees". Beacon detects upcoming events that match your rules.&lt;lb/&gt;Auto-set alarms: Instead of soft calendar pings, Beacon schedules true iOS alarms. They ring loud, even on Do Not Disturb or Silent mode.&lt;lb/&gt;Stay in control: Add or remove alarms for individual events anytime with one tap.&lt;lb/&gt;Why Beacon?&lt;lb/&gt;Your time is too valuable to leave up to flimsy reminders. Beacon gives you certaintyâwhether it's the 8AM client call, your partner's birthday dinner, a rotating night shift, or that must-make flight. Shift-workers and people with irregular schedules finally get reliable alarms that cut through the noise.&lt;lb/&gt;Key Features&lt;lb/&gt;Works with any calendar already on your iPhone&lt;lb/&gt;*Premium features* include flexible rule builder (by event name, calendar, participants, size, and more) and multiple alarm offsets (e.g. 1 hour before, +10 minutes before, or copy the event's reminder schedule).&lt;lb/&gt;Simple, privacy-first design - your events never leave your device&lt;lb/&gt;Beacon is free to download. Access to above features require subscription.&lt;lb/&gt;Terms of Use: https://www.apple.com/legal/internet-services/itunes/dev/stdeula/&lt;/p&gt;
    &lt;head rend="h2"&gt;Whatâs New&lt;/head&gt;
    &lt;p&gt;Version 1.0.4&lt;/p&gt;
    &lt;p&gt;- Expanded free tier: Create manual alarms for any of your calendar events! Upgrade to pro to use custom rules.&lt;lb/&gt;- Bugfixes&lt;/p&gt;
    &lt;head rend="h2"&gt;Ratings and Reviews&lt;/head&gt;
    &lt;head rend="h3"&gt;Calendar reminders finally work&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;Iâm a shift worker and work an irregular schedule and itâs always been a pain to schedule alarms in advance. I used to use shortcuts and galarm, alarmed that would trigger alarms getting scheduled but now this app makes it so much easier&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h2"&gt;App Privacy&lt;/head&gt;
    &lt;p&gt;The developer, Get Convey Inc., indicated that the appâs privacy practices may include handling of data as described below. For more information, see the developerâs privacy policy.&lt;/p&gt;
    &lt;head rend="h3"&gt;Data Not Collected&lt;/head&gt;
    &lt;p&gt;The developer does not collect any data from this app.&lt;/p&gt;
    &lt;p&gt;Privacy practices may vary, for example, based on the features you use or your age. LearnÂ More&lt;/p&gt;
    &lt;head rend="h2"&gt;Information&lt;/head&gt;
    &lt;list rend="dl"&gt;
      &lt;item rend="dt-1"&gt;Seller&lt;/item&gt;
      &lt;item rend="dd-1"&gt;Get Convey Inc.&lt;/item&gt;
      &lt;item rend="dt-2"&gt;Size&lt;/item&gt;
      &lt;item rend="dd-2"&gt;14 MB&lt;/item&gt;
      &lt;item rend="dt-3"&gt;Category&lt;/item&gt;
      &lt;item rend="dd-3"&gt;Utilities&lt;/item&gt;
      &lt;item rend="dt-4"&gt;Compatibility&lt;/item&gt;
      &lt;item rend="dd-4"&gt;
        &lt;list rend="dl"&gt;
          &lt;item rend="dt-5"&gt;iPhone&lt;/item&gt;
          &lt;item rend="dd-5"&gt;Requires iOS 26.0 or later.&lt;/item&gt;
        &lt;/list&gt;
        &lt;list rend="dl"&gt;
          &lt;item rend="dt-6"&gt;Mac&lt;/item&gt;
          &lt;item rend="dd-6"&gt;Requires macOSÂ 26.0 or later and a Mac with AppleÂ M1Â chip or later.&lt;/item&gt;
        &lt;/list&gt;
        &lt;list rend="dl"&gt;
          &lt;item rend="dt-7"&gt;Apple Vision&lt;/item&gt;
          &lt;item rend="dd-7"&gt;Requires visionOS 26.0 or later.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item rend="dt-8"&gt;Languages&lt;/item&gt;
      &lt;item rend="dd-8"&gt;
        &lt;p&gt;English&lt;/p&gt;
      &lt;/item&gt;
      &lt;item rend="dt-9"&gt;Age Rating&lt;/item&gt;
      &lt;item rend="dd-10"&gt;Learn More&lt;/item&gt;
      &lt;item rend="dt-11"&gt;Copyright&lt;/item&gt;
      &lt;item rend="dd-11"&gt;Â© Get Convey Inc.&lt;/item&gt;
      &lt;item rend="dt-12"&gt;Price&lt;/item&gt;
      &lt;item rend="dd-12"&gt;Free&lt;/item&gt;
      &lt;item rend="dt-13"&gt;In-App Purchases&lt;/item&gt;
      &lt;item rend="dd-13"&gt;
        &lt;list rend="ol"&gt;
          &lt;item&gt;Unlimited access $29.99&lt;/item&gt;
          &lt;item&gt;Unlimited access $7.99&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45409519</guid><pubDate>Mon, 29 Sep 2025 01:11:57 +0000</pubDate></item><item><title>Cleaning house in Nx monorepo, how i removed unused deps safely</title><link>https://johnjames.blog/posts/cleaning-house-in-nx-monorepo-how-i-removed-120-unused-deps-safely</link><description>&lt;doc fingerprint="27bd23de5b31fdb1"&gt;
  &lt;main&gt;
    &lt;p&gt;Short version, I ran Knip across our Nx repo, took the “unused” list as a hint, deleted candidates, built, tested, booted apps, and put a few back when they were secretly used. Net, about 120 packages gone. Yarn install dropped by roughly a minute. Fewer CVE nags. Everyone slept better.&lt;/p&gt;
    &lt;head rend="h3"&gt;the situation&lt;/head&gt;
    &lt;p&gt;We got a chunky Nx monorepo. Roughly 500 deps scattered across apps and packages/libs, not all living in the root. Installs felt slow. Security alerts felt noisy. I wanted to clean house without breaking anything or making dev life worse.&lt;/p&gt;
    &lt;head rend="h3"&gt;why i ditched depcheck and tried knip&lt;/head&gt;
    &lt;p&gt;I used to reach for depcheck. It’s been on life support for years and doesn’t love modern setups. Knip looked current, understands monorepos, and actually sniffs entry points for common stacks. Depcheck recommends it too. It builds a little graph from imports and config refs, then compares it to package.json. Good enough for a first pass.&lt;/p&gt;
    &lt;head rend="h3"&gt;what i actually did&lt;/head&gt;
    &lt;p&gt;Baseline scan first:&lt;/p&gt;
    &lt;code&gt;yarn dlx knip&lt;/code&gt;
    &lt;p&gt;Then I ran the usual suspects to see what would scream if I yanked packages:&lt;/p&gt;
    &lt;code&gt;yarn nx affected -t build test lint
# I also spun up the app locally
yarn nx run &amp;lt;app&amp;gt;:serve   # or :dev&lt;/code&gt;
    &lt;p&gt;Knip’s pass flagged a ton of stuff on the first scan. About 40% of what it called “unused” turned out to be false positives in my setup. Totally fine, that’s expected.&lt;/p&gt;
    &lt;head rend="h3"&gt;how i treated the results&lt;/head&gt;
    &lt;p&gt;Knip is a signal, not the judge. For each package it flagged:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;uninstall it&lt;/item&gt;
      &lt;item&gt;build, test, lint, e2e, codegen/typegen, and then boot the owning app&lt;/item&gt;
      &lt;item&gt;if something broke, put it back and document why in my Knip ignore list&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Most of the false positives were “used but not imported” stuff:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;strings in config files, for example Jest preset or runner names&lt;/item&gt;
      &lt;item&gt;CLI tools only used in scripts or CI&lt;/item&gt;
      &lt;item&gt;plugin discovery patterns&lt;/item&gt;
      &lt;item&gt;type-only or toolchain stuff&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I kept a running ignore list with little comments so future me/dev isn’t confused.&lt;/p&gt;
    &lt;head rend="h3"&gt;the knip setup&lt;/head&gt;
    &lt;p&gt;I made the config monorepo-aware and added a few ignores that always trip scanners in our stack. Yours will vary, but this is just a taste without exposing too much:&lt;/p&gt;
    &lt;code&gt;/** @type {import('knip').KnipConfig} */
const config = {
  include: ["dependencies", "devDependencies"],
  ignoreWorkspaces: ["packages/eslint-config"],
  ignoreDependencies: [
    "ts-node", // referenced by name in jest config
    "cross-env", // scripts only
  ],
  workspaces: {
    "apps/cms": {
      ignoreDependencies: ["@sanity/vision"],
    },
    "packages/ui": {
      ignoreDependencies: [
        "tw-animate-css", // weird @import in global.css
        "@tailwindcss/typography", // same as above
      ],
    },
  },
}

export default config&lt;/code&gt;
    &lt;head rend="h3"&gt;verification loop&lt;/head&gt;
    &lt;p&gt;Delete the thing. Build. Test. Yadda, yadda. Quick smoke in dev. If it’s green, ship it. If not, restore and ignore with a one-liner note.&lt;/p&gt;
    &lt;p&gt;I also did a preview deploy and watched for dumb stuff like missing assets or new console errors. Nothing exciting showed up, which is the best possible outcome.&lt;/p&gt;
    &lt;head rend="h3"&gt;numbers&lt;/head&gt;
    &lt;p&gt;Before, about 510 unique packages across the workspace. After, about 390. Roughly 120 gone. Yarn install shaved off around a minute on my machine and in CI. Exactly what I wanted.&lt;/p&gt;
    &lt;head rend="h3"&gt;what knip nailed, and where it didn’t&lt;/head&gt;
    &lt;p&gt;Good at common React and server app entry points, and lots of config conventions. Not great when usage is indirect or only happens in scripts or CI. That’s fine. Humans still have jobs.&lt;/p&gt;
    &lt;head rend="h3"&gt;how i merged it without ruining anyone’s day&lt;/head&gt;
    &lt;p&gt;Small PRs are safer, but I batched this one, deployed to a preview branch, then merged during a quiet slot so rollback would only touch my PR. I left it live while I clicked through a few user flows and tailed logs. All quiet.&lt;/p&gt;
    &lt;head rend="h3"&gt;the extra bit&lt;/head&gt;
    &lt;p&gt;Knip can also flag unused files, enums, types. Nice for dead code hunts. Same rule, treat it as a hint and verify with real builds and tests.&lt;/p&gt;
    &lt;head rend="h3"&gt;what i’d do next&lt;/head&gt;
    &lt;p&gt;Wire Knip into CI as a gentle report first. Let it run for a sprint while you tune the ignore list, then consider failing on new unused deps. Keeps the bloat from creeping back in.&lt;/p&gt;
    &lt;head rend="h3"&gt;that’s it&lt;/head&gt;
    &lt;p&gt;I didn’t reinvent anything here. Knip found low-hanging fruit, I did the human check, and we shipped a smaller, cleaner repo without drama.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45409526</guid><pubDate>Mon, 29 Sep 2025 01:12:45 +0000</pubDate></item><item><title>Primer on FedEx's Distribution Network (2024)</title><link>https://ontheseams.substack.com/p/a-brief-primer-on-fedexs-distribution</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45409552</guid><pubDate>Mon, 29 Sep 2025 01:18:14 +0000</pubDate></item><item><title>F-Droid and Google’s developer registration decree</title><link>https://f-droid.org/2025/09/29/google-developer-registration-decree.html</link><description>&lt;doc fingerprint="af64911998077495"&gt;
  &lt;main&gt;&lt;head rend="h2"&gt;F-Droid and Google's Developer Registration Decree&lt;/head&gt;Posted on Sep 29, 2025 by marcprux&lt;p&gt;For the past 15 years1, F-Droid has provided a safe and secure haven for Android users around the world to find and install free and open source apps. When contrasted with the commercial app stores â of which the Google Play store is the most prominent â the differences are stark: they are hotbeds of spyware and scams, blatantly promoting apps that prey on their users through attempts to monetize their attention and mine their intimate information through any means necessary, including trickery and dark patterns.[^spyware1]&lt;/p&gt;&lt;p&gt;https://f-droid.org/2025/09/04/twif.html [^spyware1]: âSpyware maker caught distributing malicious Android apps for yearsâ: https://techcrunch.com/2025/02/13/spyware-maker-caught-distributing-malicious-android-apps-for-years&lt;/p&gt;&lt;p&gt;F-Droid is different. It distributes apps that have been validated to work for the userâs interests, rather than for the interests of the appâs distributors. The way F-Droid works is simple: when a developer creates an app and hosts the source code publicly somewhere, the F-Droid team reviews it, inspecting it to ensure that it is completely open source and contains no undocumented anti-features such as advertisements or trackers2. Once it passes inspection, the F-Droid build service compiles and packages the app to make it ready for distribution. The package is then signed either with F-Droidâs cryptographic key, or, if the build is reproducible[^reproducible], enables distribution using the original developerâs private key. In this way, users can trust that any app distributed through F-Droid is the one that was built from the specified source code and has not been tampered with.&lt;/p&gt;&lt;p&gt;https://f-droid.org/docs/Anti-Features/ [^reproducible]: F-Droid Reproducible Builds Introduction: https://f-droid.org/docs/Reproducible_Builds/&lt;/p&gt;&lt;p&gt;Do you want a weather app that doesnât transmit your every movement to a shadowy data broker3? Or a scheduling assistant that doesnât siphon your intimate details into an advertisement network[^surveillance-ads]? F-Droid has your back. Just as sunlight is the best disinfectant against corruption, open source is the best defense against software acting against the interests of the user.&lt;/p&gt;&lt;p&gt;https://www.howtogeek.com/884233/your-weather-app-is-spying-on-you-heres-what-to-do/#why-are-weather-apps-such-a-privacy-nightmare [^surveillance-ads]: âOnline Behavioral Ads Fuel the Surveillance IndustryâHereâs Howâ: https://www.eff.org/deeplinks/2025/01/online-behavioral-ads-fuel-surveillance-industry-heres-how&lt;/p&gt;&lt;head rend="h3"&gt;Googleâs move to break free app distribution&lt;/head&gt;&lt;p&gt;The future of this elegant and proven system was put in jeopardy last month, when Google unilaterally decreed4 that Android developers everywhere in the world are going to be required to register centrally with Google. In addition to demanding payment of a registration fee and agreement to their (non-negotiable and ever-changing) terms and conditions, Google will also require the uploading of personally identifying documents[^regid], including government ID, by the authors of the software, as well as enumerating all the unique âapplication identifiersâ for every app that is to be distributed by the registered developer.[^regappid]&lt;/p&gt;&lt;p&gt;require all apps to be registered by verified developers in order to be installed by users on certified Android devices.â https://android-developers.googleblog.com/2025/08/elevating-android-security.html [^regid]: Android developer verification: âYou will need to provide and verify your personal details, like your legal name, address, email address, and phone number. You may also need to upload official government ID.â: https://developer.android.com/developer-verification#verify-your-identity [^regappid]: Android developer verification: âYouâll need to prove you own your apps by providing your app package name and app signing keys.â: https://developer.android.com/developer-verification#register-your-apps&lt;/p&gt;&lt;p&gt;The F-Droid project cannot require that developers register their apps through Google, but at the same time, we cannot âtake overâ the application identifiers for the open-source apps we distribute, as that would effectively seize exclusive distribution rights to those applications.&lt;/p&gt;&lt;p&gt;If it were to be put into effect, the developer registration decree will end the F-Droid project and other free/open-source app distribution sources as we know them today, and the world will be deprived of the safety and security of the catalog of thousands of apps that can be trusted and verified by any and all. F-Droidâs myriad users5 will be left adrift, with no means to install â or even update their existing installed â applications.&lt;/p&gt;&lt;p&gt;because we donât track users or have any registration. âNo user accounts, by designâ: https://f-droid.org/2022/02/28/no-user-accounts-by-design.html&lt;/p&gt;&lt;head rend="h3"&gt;The Security Canard&lt;/head&gt;&lt;p&gt;While directly installing â or âsideloadingâ6 â software can be construed as carrying some inherent risk, it is false to claim that centralized app stores are the only safe option for software distribution. Google Play itself has repeatedly hosted malware[^playmal1][^playmal2], proving that corporate gatekeeping doesnât guarantee user protection. By contrast, F-Droid offers a trustworthy and transparent alternative approach to security: every app is free and open source, the code can be audited by anyone, the build process and logs are public, and reproducible builds ensure that what is published matches the source code exactly. This transparency and accountability provides a stronger basis for trust than closed platforms, while still giving users freedom to choose. Restricting direct app installation not only undermines that choice, it also erodes the diversity and resilience of the open-source ecosystem by consolidating control in the hands of a few corporate players.&lt;/p&gt;&lt;p&gt;came up with; it means âinstalling software without our permission,â which we used to just call âinstalling softwareâ (because you donât need a manufacturerâs permission to install software on your computer).â â Pluralistic: Darth Android: https://pluralistic.net/2025/09/01/fulu/ [^playmal1]: â224 malicious apps removed from the Google Play Store after ad fraud campaign discoveredâ: https://www.malwarebytes.com/blog/news/2025/09/224-malicious-apps-removed-from-the-google-play-store-after-ad-fraud-campaign-discovered [^playmal2]: âMalware-ridden apps made it into Googleâs Play Store, scored 19 million downloadsâ: https://www.theregister.com/2025/08/26/apps_android_malware/&lt;/p&gt;&lt;p&gt;Furthermore, Googleâs framing that they need to mandate developer registration in order to defend against malware is disingenuous because they already have a remediation mechanism for malware they identify on a device: the Play Protect service7 that is enabled on all Android Certified devices already scans and disables apps that have been identified as malware, regardless of their provenience. Any perceived risks associated with direct app installation can be mitigated through user education, open-source transparency, and existing security measures without imposing exclusionary registration requirements.&lt;/p&gt;&lt;p&gt;harmful behaviorâ: https://support.google.com/googleplay/answer/2812853&lt;/p&gt;&lt;p&gt;We do not believe that developer registration is motivated by security. We believe it is about consolidating power and tightening control over a formerly open ecosystem.&lt;/p&gt;&lt;head rend="h3"&gt;The Right to Run&lt;/head&gt;&lt;p&gt;If you own a computer, you should have the right to run whatever programs you want on it. This is just as true with the apps on your Android/iPhone mobile device as it is with the applications on your Linux/Mac/Windows desktop or server. Forcing software creators into a centralized registration scheme in order to publish and distribute their works is as egregious as forcing writers and artists to register with a central authority in order to be able to distribute their creative works. It is an offense to the core principles of free speech and thought that are central to the workings of democratic societies around the world.&lt;/p&gt;&lt;p&gt;By tying application identifiers to personal ID checks and fees, Google is building a choke point that restricts competition and limits user freedom. It must find a solution which preserves user rights, freedom of choice, and a healthy, competitive ecosystem.&lt;/p&gt;&lt;head rend="h3"&gt;What do we propose?&lt;/head&gt;&lt;p&gt;Regulatory and competition authorities should look carefully at Googleâs proposed activities, and ensure that policies designed to improve security are not abused to consolidate monopoly control. We urge regulators to safeguard the ability of alternative app stores and open-source projects to operate freely, and to protect developers who cannot or will not comply with exclusionary registration schemes and demands for personal information.&lt;/p&gt;&lt;p&gt;If you are a developer or user who values digital freedom, you can help. Write to your Member of Parliament8, Congressperson[^congressperson] or other representative, sign petitions in defense of sideloading, and contact the European Commissionâs Digital Markets Act (DMA) team9 to express why preserving open distribution matters. By making your voice heard, you help defend not only F-Droid, but the principle that software should remain a commons, accessible and free from unnecessary corporate gatekeeping.&lt;/p&gt;&lt;p&gt;https://www.europarl.europa.eu/meps/en/home [^congressperson]: Find Your Representative https://www.house.gov/representatives/find-your-representative&lt;/p&gt;&lt;p&gt;https://digital-markets-act.ec.europa.eu/contact-dma-team_en&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;&lt;p&gt;âFor fifteen moreâ:Â ↩&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;p&gt;F-Droid Anti-Features overview:Â ↩&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;p&gt;âYour Weather App Is Spying on You, Hereâs What to Doâ:Â ↩&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;p&gt;Android Developers Blog: âStarting next year, Android willÂ ↩&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;p&gt;How many F-Droid users are there, exactly? We donât know,Â ↩&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;p&gt;ââSideloadâ is a weird euphemism that the mobile duopolyÂ ↩&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;p&gt;âGoogle Play Protect checks your apps and devices forÂ ↩&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;p&gt;Members of the European ParliamentÂ ↩&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;p&gt;Contact the DMA team:Â ↩&lt;/p&gt;&lt;/item&gt;&lt;/list&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45409794</guid><pubDate>Mon, 29 Sep 2025 02:10:20 +0000</pubDate></item><item><title>The elusive roots of rosin potatoes (2022)</title><link>https://bittersoutherner.com/feature/2022/the-elusive-roots-of-rosin-potatoes</link><description>&lt;doc fingerprint="7e895188ab53526f"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Caroline Hatchett grew up around rosin potatoes in her hometown of Baxley, Georgia. Curious about the potato’s origins, she talked with her dad, turpentine workers, historians, chefs, foresters, and beer brewers to get to the root of it.&lt;/head&gt;
    &lt;head rend="h3"&gt;Story by Caroline Hatchett | Photos by Rinne Allen&lt;/head&gt;
    &lt;p&gt;November 22, 2022&lt;/p&gt;
    &lt;p&gt;During the decades my hometown of Baxley, Georgia, hosted Tree Fest, men from Akzo Nobel, a chemical manufacturer with a local plant, would gather around a 6-foot-tall pot filled with 200 pounds of rosin. Led by Bo Herndon — a plant supervisor, former police chief, and father to my catechism classmate Heather — the team would bring the rosin to a vigorous simmer over a high-powered propane burner, and then drop in potatoes, 50 or so at a time. After 30 minutes, the potatoes would bob to the surface and Bo and Co. would pluck them out with tongs, wrap the potatoes — perilously sticky with molten rosin — in newspaper, and sell one of America’s great culinary oddities for a buck or two.&lt;/p&gt;
    &lt;p&gt;I was oblivious to this culinary display. Tree Fest had other diversions: an early-morning fun run, funnel cake, vendors selling scented candles and Kiss My Grits T-shirts. My sister’s Labrador, Dixie, won the pet costume contest three years in a row. I tapped with a troupe from the Gail Hursey School of Dance, and, one year, as a junior chamber of commerce volunteer, I roamed the fairgrounds dressed as Woody, the festival’s pine tree mascot.&lt;/p&gt;
    &lt;p&gt;Pines meant something in Appling County. I grew up with slash pines towering over me and wheelbarrows’ worth of pine cones in the yard. The trees would paint our driveway yellow with pollen in spring. Lightning would occasionally strike their crowns, and, with the immediate boom of thunder, every wall and window of our house would rattle.&lt;/p&gt;
    &lt;p&gt;My dad, Tom Hatchett, managed timberland for Union Camp and, later on, International Paper. My best friend Lindsay’s dad worked at Rayonier, a plant just east of downtown with stacks of denuded pine trunks piled high in its yard. Pine trees brought our families to this part of rural south Georgia. And I couldn’t wait to leave it.&lt;/p&gt;
    &lt;p&gt;Neither could Thurnell Alston, the protagonist in Praying for Sheetrock, Melissa Fay Greene’s nonfiction account of McIntosh County’s late-to-arrive Civil Rights Movement. Along with his father and a pickup truck full of men, Alston rode from the Georgia coast to inland piney woods to clear paths for other turpentine workers and deposit gum collected from the trees into barrels; they toiled from early morning until nightfall for monthlong stretches and slept in windowless shanties on the floor.&lt;/p&gt;
    &lt;p&gt;After six years of grueling, low-paid work, Alston literally walked off the job, trekking 60 miles on foot from Baxley to Brunswick. I read Praying for Sheetrock in late 2019 and mentioned Baxley’s cameo to my dad. Sensing a rare connection in our work, he posed a question, some version of which I’ve since asked the living and the dead across 10 states and two countries: What do you know about rosin potatoes?&lt;/p&gt;
    &lt;p&gt;It’s widely accepted that rosin potatoes hail from the South’s turpentine camps, where workers chipped and slashed and scraped pine trees to collect oleoresin (aka resin or gum), the trees’ natural defense mechanism. When a tree’s bark is breached — by a beetle, fungus, or a woodsman’s hack — it oozes gum, not sap, from the wound. When fossilized, oleoresin transforms into amber. When distilled, it yields turpentine and rosin, whose uses range from paint thinner and Vicks VapoRub to rubber cement and chewing gum, respectively.&lt;/p&gt;
    &lt;p&gt;The rosin potato origin story goes one of two ways. A hapless worker dropped a potato into hot rosin as it was coming off the still, and when the potato came to the surface, he pulled it out and found a perfectly cooked spud. Alternately, an industrious worker saw in molten rosin an efficient method for making a hot lunch.&lt;/p&gt;
    &lt;p&gt;Outside the context of the woods, cooking potatoes in rosin is a wholly impractical preparation.&lt;/p&gt;
    &lt;p&gt;Rosin is highly flammable, and its fumes are noxious. It requires a dedicated pot and tongs; there’s no easy cleaning of hardened rosin. Oh — and you can’t eat the potato’s skin.&lt;/p&gt;
    &lt;p&gt;Despite those odds, the technique went mainstream in the 1950s and merited inclusion in James Beard’s 1960 Treasury of Outdoor Cooking and in the 1975 edition of The Joy of Cooking. In 1976, rosin potatoes were on the table the night my parents got engaged at Art’s Steakhouse in Gainesville, Florida, and Cracker Barrel served the potatoes from 1983 through 1991.&lt;/p&gt;
    &lt;p&gt;Rosin potato loyalists say the preparation yields a superior potato with a flaky texture. Just as oleoresin seals a tree’s wounds, rosin traps a potato’s flavor and aroma, according to chef Sean Brock, who included rosin potatoes on the debut menu at Audrey, his fine-dining restaurant in Nashville. “Because none of the potato’s flavor or aroma compounds can escape, you get the most intense potato flavor you’ve ever experienced,” Brock says. “And they’re steaming in their own water, which is why you get a totally unique texture.”&lt;/p&gt;
    &lt;p&gt;Outside of Audrey, you won’t find rosin potatoes in many restaurants these days. Except in vintage cookbooks, Reddit forums, and a smattering of rural festivals, rosin potatoes all but disappeared from the American culinary canon.&lt;/p&gt;
    &lt;p&gt;In the summer of 2020, Dad drove to Patterson, Georgia, to pick up 25 pounds of rosin from Diamond G Forest Products, a boutique producer of gum rosin and turpentine. I drove from New York to Baxley. In his garage, with the door rolled open, we fired up a propane cooker, melted rosin, and dropped in potatoes. The fumes coming off the pot were piney and potent, enough to make you dizzy in the heat, so I stood back, bare feet on smooth concrete, watching as a fury of bubbles rose from the swampy liquid. A half-hour into the boil, the potatoes began to emerge one by one.&lt;/p&gt;
    &lt;p&gt;But it would take another year for their origins to surface. Turpentiners did not record the grand discovery that is rosin potatoes, or from where, exactly, they hail.&lt;/p&gt;
    &lt;p&gt;They left that up to me.&lt;/p&gt;
    &lt;p&gt;In the history of humanity, rosin is a relatively modern product. Before it came tar and pitch, derived from European birch and pine at least 10,000 years ago. Ancient Greeks and Vikings used pine tar to waterproof their ships. In Genesis, God tells Noah, “Make yourself an ark out of resinous wood. Make it of reeds, and caulk it with pitch inside and out.”&lt;/p&gt;
    &lt;p&gt;By the 17th century, England needed a new source of tar, pitch, and turpentine — a trinity of supplies known as naval stores that would coat, seal, and preserve the Royal Navy’s ropes and ships. The world superpower had produced the stuff on an industrial scale since at least the Middle Ages, but as its forest resources thinned, England turned to Prussia and Sweden, and eventually to the American Colonies, for its naval stores.&lt;/p&gt;
    &lt;p&gt;The Carolinas had seemingly endless stretches of longleaf pine and soil ill-suited for cash crops and by 1725 produced a net surplus of tar, pitch, and turpentine. By the mid-19th century, North Carolina’s naval stores industry was booming, with the state boasting nearly 800 stills and operators producing more than $5 million ($185 million today) of gum and turpentine. That wealth and labor, of course, were derived at the expense of enslaved workers, of whom we know little aside from their impact on plantation balance sheets.&lt;/p&gt;
    &lt;p&gt;Plantations hired out enslaved people to turpentine operations for up to $250 a year at the industry’s height. Swinging giant axes, these men would box 75 to 100 trees a day, or around 10,000 trees each winter, and chip 1,000-2,000 faces a day. (Faces, or catfaces, are the areas from which bark has been hacked off and rosin flows.) They were housed in dirt-floor lean-tos and issued daily rations of salt pork, cornmeal, and, yes, potatoes. One of the few advantages these men had over enslaved plantation farm workers was their ability to supplement their diets with wild foods like fish, turtle, raccoon, and possum.&lt;/p&gt;
    &lt;p&gt;If these workers ate rosin potatoes, we do not know it. Rosin, at this point, had little commercial value. Rather than paying to ship it, producers let it run off the still onto the land and into waterways. When Frederick Law Olmsted toured North Carolina turpentine operations in the early 1850s, he observed “a congealed pool of rosin, estimated to contain over three thousand barrels,” according to his A Journey in the Seaboard Slave States.&lt;/p&gt;
    &lt;p&gt;I looked to historical accounts like Olmsted’s and expected, at any moment, for rosin potatoes to leap off the pages.&lt;/p&gt;
    &lt;p&gt;In the seminal Tapping the Pines, Robert Outland introduces Sarah Hicks Williams, the wife of a North Carolina turpentiner, whose letters detail meals of cornbread, biscuits, sweet potatoes, peaches, apples, and vinegar-dressed pork barbecue — but no rosin potatoes.&lt;/p&gt;
    &lt;p&gt;I hoped to find them on plantation menus and checked with folks at the Bellamy Mansion in Wilmington, North Carolina. The 10,000-square-foot home was built by John D. Bellamy, a merchant, farmer, and turpentine operator, who owned 115 enslaved workers, 24 of whom labored at his turpentine camp in Columbus County. The family’s elaborate Christmas menus included duck, roast pig, rutabagas hashed with Irish potatoes, brandy peaches, coconut pie, and syllabub (sweetened curdled milk), but there’s no rosin on the menu, nor records of what Bellamy’s enslaved workers ate at camp.&lt;/p&gt;
    &lt;p&gt;“No one was keeping good records,” Outland told me. “It’s hard to write about a life when they were considered unimportant people.”&lt;/p&gt;
    &lt;p&gt;Outland, who lives in North Carolina, spent the summer of 1996 driving across the southeastern United States, researching the dissertation that would become Tapping the Pines. He combed archives, knocked on doors, and held rosin in his hands for the first time. Nowhere in his fieldwork did he encounter rosin potatoes.&lt;/p&gt;
    &lt;p&gt;“There was fire everywhere around backwoods processing facilities. Why not roast potatoes? People really were struggling out there in the woods,” Outland says. “I don’t know who got it in their head, but it seems to be human nature, looking back with rosy glasses at the past. They imagined an old-time turpentine lifestyle and invented a way to celebrate it.”&lt;/p&gt;
    &lt;p&gt;• • •&lt;/p&gt;
    &lt;p&gt;After its mid-19th-century boom, the Tar Heel State (named after a slur associated with turpentine workers) saw its naval stores industry decline rapidly. Between 1840 and 1893, more than 90% of North Carolina’s longleaf pine forest had been boxed, destroyed, and abandoned. In turn, operators moved to the virgin forests of South Carolina, Alabama, Mississippi, Georgia, and Florida.&lt;/p&gt;
    &lt;p&gt;But it was south Georgia — in particular, on land between the Savannah and Chattahoochee rivers — that would supplant North Carolina as the nation’s naval stores capital.&lt;/p&gt;
    &lt;p&gt;In the decades leading up to the Civil War, turpentiners transplanted entire plantation populations to Georgia’s piney woods, and migration continued at an even more rapid pace after the war. Newly emancipated Black workers followed the industry, having few other choices, and by the late 19th century the average Georgia turpentine worker was a “young, single, illiterate, Black man from North Carolina,” Outland wrote in Tapping the Pines.&lt;/p&gt;
    &lt;p&gt;Baxley was transformed by turpentine into a rural engine of the South’s economy, and in ways I could not comprehend, turpentine wealth, power, and culture steeped themselves into my upbringing.&lt;/p&gt;
    &lt;p&gt;Abandoned turpentine shacks, unpainted and with tin roofs and front porches caving in, dotted county roads. In downtown Baxley, there’s a four-columned white mansion off U.S. 1 with a tennis court in the backyard; it always looked too fancy for the town and was owned by Edgar Dyal, a turpentine magnate. The tracks that slice Baxley in two were part of the Macon and Brunswick Railroad, built to haul naval stores and lumber to the coast. Lewis Parker, Appling County’s sheriff for 20 years, hailed from the Veal family, one of the county’s biggest naval stores producers. And when the last bucket of American pine gum was dipped for commercial use by Major Phillips, he delivered it from Soperton, Georgia, to Baxley for distillation at Akzo Nobel, the last U.S. processor of gum rosin.&lt;/p&gt;
    &lt;p&gt;Early in my potato hunt, my dad introduced me to Bill Baker, a retired Akzo Nobel engineer and plant manager. Baker’s grandaddy had timber stands and a fire still out near the Veals’, and though he expected to leave town for good, rosin cemented Baker in place. He started working at Filtered Rosin Products in the mid-’60s and stuck around as the plant was sold to Akzo Nobel in the ’80s and, eventually, to two investment groups.&lt;/p&gt;
    &lt;p&gt;“We made products from rosin from living pine trees. There are other rosins made from paper mills, where they grind pulp and extract it with sulphuric acid. That rosin, you don’t want to use for potatoes,” explains Baker, who over the years entertained visiting businesspeople with steak and rosin potato dinners.&lt;/p&gt;
    &lt;p&gt;He doesn’t remember where he first learned about the dish, but the story Baker has heard and told for decades rings true: “Turpentine workers would be collecting rosin from the fire still. They’d have hot rosin in barrels, and around noon, they’d throw potatoes in the barrel and let them cook.”&lt;/p&gt;
    &lt;p&gt;In 1981, the Georgia Museum of Agriculture built a turpentine still complete with an antique copper kettle, and every April, David King, the museum’s superintendent of restoration and maintenance, fires the still. Just off 1-75 in Tifton, the living history museum is one of the few places in the country where you can see pine gum transformed into turpentine and rosin and eat potatoes cooked in hot-off-the-still rosin.&lt;/p&gt;
    &lt;p&gt;My dad and I met King, a little sunburned and with graying hair tucked under a camouflage cap, in a giant, shadeless parking lot, and he led us back to the nine-barrel still, encased in red brick and sheltered under a rustic two-story wooden structure. Workers would roll barrels of gum to the top and tip the contents into the still. The steam, containing water and spirits of turpentine, would rise through a pipe and then wind through copper tubing set inside a cypress water tank. Once condensed, the solution would flow into a barrel and turpentine would rise to the top. At the end of distillation, workers opened a chute at the bottom of the still and rosin gushed out through screens and cotton batting and into a trough. Men with long-handled dippers would then transfer the filtered rosin into barrels.&lt;/p&gt;
    &lt;p&gt;Standing next to the still — the ground in front of it puddled with semi-firm rosin — was like going to church. It made me want to believe. Just as Baker knows the rosin business, King has mastered the mechanics of 19th-century production, working with old-timers and historians and firing stills five or so times a year. He sent me home with hunks of rosin, new leads to call, and a glimmer of hope that I’d find the potatoes in south Georgia.&lt;/p&gt;
    &lt;p&gt;At the end of “A Longleaf Legacy,” a 2018 documentary about the industry, Buster Cole, a still worker and interpreter for the Georgia Museum of Agriculture, extemporaneously calls out varied rosin uses: “gunpowder, glass, fiberglass, acrylics, polyester, chewing gum, costume jewelry, tile, carpet, Elmer’s glue, shellac, shoe polish, soap, sprinkle it on your dance floor to make it slick, they make nine cosmetics out of it and three perfumes out of it. Gymnastics you got a rosin bag, bowling you got a rosin bag, tennis you got a rosin bag. Baseball pitcher, he use a rosin bag, fiddler put rosin on his bow, ballet dancer put it on their shoes. … ”&lt;/p&gt;
    &lt;p&gt;Having visited the still and watching the video, I hoped Cole would blurt out, “And you can even cook a potato in it.” But he didn’t.&lt;/p&gt;
    &lt;p&gt;Folklorist Laurie Sommers founded the South Georgia Folklife Project at Valdosta State University and, with Tim Prizer, interviewed dozens of turpentine workers with multigenerational ties to the industry, such as George “G.W.” Harrington, a man born into the business. Harrington’s father managed 16,000 acres of forest, and his mother helped run the camp commissary. “Mama believed in a hot meal,” he told Sommers in 2004, recalling Friday-night fish fries and the scent of greens, sweet potatoes, and homemade biscuits wafting through the camp.&lt;/p&gt;
    &lt;p&gt;According to Harrington, a typical day’s menu in the 1940s and ’50s consisted of grits, fried eggs, bacon, and oatmeal for breakfast; dinner (aka lunch) meant “something that would stick with you” like fried chicken, rice, speckled butter beans, cornbread, corn, okra, new potatoes, sliced tomatoes, biscuits, and some kind of dessert; for supper, the family ate leftovers or country sausage.&lt;/p&gt;
    &lt;p&gt;Most workers’ lunches were more humble affairs, according to Sommers, like cornbread or canned salmon with rice and beans, carried in cane syrup cans and hung from trees.&lt;/p&gt;
    &lt;p&gt;“There is no way something as unusual and fascinating as rosin potato would be something that flew under the radar and was forgotten,” says Prizer, who went on to write his master’s thesis on nostalgia and memory in the waning days of the industry.&lt;/p&gt;
    &lt;p&gt;But none of Sommers’ or Prizer’s subjects mentioned the potatoes. They’re similarly omitted from Carroll Butler’s Treasures of the Longleaf Pines, notable for being the only scholarly book on the industry produced by a former turpentiner, and Pete Gerrell’s The Illustrated History of the Naval Stores (Turpentine) Industry.&lt;/p&gt;
    &lt;p&gt;Both works are a feast of food details. Butler describes lunches of hoe cakes and doobie (a savory cobbler relative), as well as workers hunting for rabbit, squirrel, raccoon, and gopher tortoise. He also describes backwoods booze, including “alcohol strained from Sterno and then mixed with sugar water and spirits of niter [ethyl nitrite].” Gerrell shares recipes for cottage beer, pigs feet, and Spanish moss jelly. “You know that times are bad when there is nothing left to eat but Spanish moss seasoned with fish bladder,” he wrote.&lt;/p&gt;
    &lt;p&gt;Gerrell and Butler are both deceased, as are all but one or two of the folks interviewed by Sommers and Prizer. But as a daughter of one of the last important turpentine cities, I hoped I might find living workers — and rosin potato camp stories — in Baxley.&lt;/p&gt;
    &lt;p&gt;James Copeland tapped trees in Appling Country until 1960, and his family line extends back to North Carolina. His father farmed tobacco and cotton and collected gum on his own land, in addition to working faces for another operator. “There was a man he worked for, probably 25 or 35 years. My grandfather worked for that man’s daddy doing turpentine. The first work I did, as far back as I can remember, was farm work and turpentine,” Copeland says.&lt;/p&gt;
    &lt;p&gt;Copeland is married to Pearl Copeland, who was raised on the Veals’ turpentine farm and whose brother and father worked in the business. Pearl is an accomplished country cook. She was making a jelly cake the last time we spoke and promised a feast of fried chicken, lima beans, cornbread, blackberry pie, peach pie, and pear pie the next time I come home.&lt;/p&gt;
    &lt;p&gt;The Copelands had never heard of rosin potatoes.&lt;/p&gt;
    &lt;p&gt;Pearl recalls folks cooking sweet potatoes under a pile of sand with a fire built on top. James took cold potatoes into the forest and field, but more often lunch was a biscuit sandwich with bacon, peanut butter and homemade jelly, or a smear of preserved pear, packed in a syrup can.&lt;/p&gt;
    &lt;p&gt;“You didn’t heat no food up. Whatever you left home with, by the time you eat it, it’s cold,” he says. “When you ate, there wasn’t nothing like … take an hour for lunch.”&lt;/p&gt;
    &lt;p&gt;They were incredulous that the technique would even work. “I don’t know nobody in Appling County who could tell you about that,” Pearl told me. “That somebody who was telling you the way they did it, they were saying something that was untrue.”&lt;/p&gt;
    &lt;p&gt;• • •&lt;/p&gt;
    &lt;p&gt;The Copelands’ experience working family land and trees represents the zenith of the industry for Black workers, who sold gum to central distilleries as supplemental income. But before Civil Rights legislation passed in the 1960s, the Jim Crow South held a significant number of Black turpentine workers in bondage through debt peonage, most often by forcing them to buy marked-up goods at camp commissaries. Though the practice was illegal at the federal level, Southern states enacted laws that forbade workers from leaving jobs while indebted to their bosses.&lt;/p&gt;
    &lt;p&gt;The industry also leased convicts — a majority being Black men — from the state. Though it had been outlawed elsewhere, Georgia and Florida practiced convict leasing until 1908 and 1923, respectively.&lt;/p&gt;
    &lt;p&gt;Though Prizer found relationships between some owners and Black workers were warm, respectful, and often nuanced, anyone poking through turpentine’s past will find, in abundance, brutality, kidnapping, coercion, paternalism, and searing racism.&lt;/p&gt;
    &lt;p&gt;The more I poked and dug and read, I could not understand why a Black worker in the Jim Crow South would cook his lunch in rosin, a commodity product whose value was determined by its clarity. Were workers really dropping dirty potatoes into rosin that had been distilled and filtered through cotton batting and screens? It sounded like a punishable offense.&lt;/p&gt;
    &lt;p&gt;• • •&lt;/p&gt;
    &lt;p&gt;By this point, I had grown mighty suspicious — like, rosin-potatogate conspiracy theory suspicious. With no collective memory — written, recorded, or alive — of rosin potatoes in turpentine camps, I turned my attention away from workers and toward the industry, the bigwigs, moneymakers, and political influencers who might have something to gain from rosin potatoes.&lt;/p&gt;
    &lt;p&gt;At the University of Florida’s Smathers Libraries, I hunched over volumes of Naval Stores Review, following two-plus decades of industry exploits. Published weekly from 1890 to 1953 (and later monthly and bimonthly), the Review provides a play-by-play of the industry’s swings, technological advances, best practices, politics, labor woes, and evolving culture. Its pages instructed producers how to convert from harmful box cutting to installing metal gutters and ceramic Herty cups, a method that prolonged trees’ viability and allowed the once mobile industry to put down roots. It documented the move from backwoods distilling to central stills in towns like Baxley, the rise of acid sprays to increase gum production, and every possible use for turpentine and rosin — from soap production in Peru to home insulation, cough syrup, and a depilatory for pigs.&lt;/p&gt;
    &lt;p&gt;The Naval Stores Review also chronicled the American Turpentine Farmers Association, or AT-FA, formed in 1936 and led by Judge Harley Langdale, a powerful naval stores producer and politician from Valdosta, Georgia.&lt;/p&gt;
    &lt;p&gt;AT-FA loomed large over the industry’s fading years. Members funded successful national ad campaigns and an effort to get gum turpentine onto retail shelves. The organization supported research and lobbied to classify turpentiners as agricultural workers, exempting producers from minimum wage laws and Social Security taxes. AT-FA administered a federal loan program that sought to limit naval stores production and stabilize market prices. They also threw one helluva party.&lt;/p&gt;
    &lt;p&gt;Each April, more than a thousand producers and their families would gather in Valdosta for the annual AT-FA Convention. Langdale would rally turpentiners behind the cause of the moment and conjure the industry’s demise if action was not taken, and then get voted in as president for another term.&lt;/p&gt;
    &lt;p&gt;“The gum industry faces able, aggressive, and intelligent competition from many new spirits companies. This competition must be met by the gum industry or the industry will be swallowed up by it,” he told attendees in 1947.&lt;/p&gt;
    &lt;p&gt;They’d host a stag-night fish fry for the men, along with a beauty contest in which women dressed in longleaf pine needle bikinis. The weekend would conclude with a picnic featuring 700 barbecued chickens (and ham in later years), peas, grits, potato salad, beer, and Coca-Cola. In 1949, they switched up the menu and harvested Florida sabal palms to make swamp cabbage.&lt;/p&gt;
    &lt;p&gt;Had the rosin potato existed in naval stores culture, it should’ve been at that barbecue. Just as Langdale wrapped his arm around each Miss Spirits of Turpentine, he would have been pulling a potato out of the rosin pot for a photo op. Rosin potatoes were also absent from Swainsboro’s Pine Tree Festival, from industry conferences, and from field trips to the Naval Stores Research Station in Olustee, Florida, a hub of scientific advancement for the industry.&lt;/p&gt;
    &lt;p&gt;Starting with the year 1933, I flipped page by page, year by year, through The Naval Stores Review, expecting to meet the potato at any moment. And there was nothing — until June 1956.&lt;/p&gt;
    &lt;p&gt;The year before, N.J. “Jack” Stallworth, whose brother was an AT-FA director, had demonstrated rosin baked potatoes at the Alabama State Fair. Stallworth served the potatoes in his Mobile, Alabama, restaurant, Stafills, and advertised direct-to-consumer rosin in pamphlets, as well as in Gourmet, Living, and House Beautiful. Naval Stores Review did not credit Stallworth or anyone in particular with the invention, but noted, “Rosin baked potatoes is not an entirely new idea, having been initiated some two years ago.”&lt;/p&gt;
    &lt;p&gt;In other words, folks in the industry had not eaten rosin potatoes, a “Southern delicacy” as they called them, until 1954. They didn’t associate the newfangled technique with turpentine camp culture, nor did they know when or where the potatoes had been invented.&lt;/p&gt;
    &lt;p&gt;Rosin potatoes first appeared in print in April 1939 in a syndicated dispatch from Damon Runyon, a journalist best known for writing Guys and Dolls. “We recently came across a brand new way of cooking white potatoes. You boil them in resin — the same kind of resin that violinists rub on their bowstrings and also the very same kind of resin prizefighters shuffle the soles of their shoes in,” wrote Runyon, attributing the dish to Black Caesar’s Forge, a restaurant in Miami. “The Dade County folks love to introduce their Yankee friends to the ceremony.”&lt;/p&gt;
    &lt;p&gt;Later that year, Charles H. Baker, a Florida-born bon vivant and writer, published The Gentleman's Companion: Exotic Cookery Book, a collection of recipes of “manly dishes for men” according to The Miami Herald. In it, he shared a recipe for “Rosin Potatoes in the Manner of J. Marquette Phillips as Done at Black Caesar’s Forge for Various Friends &amp;amp; Guests, at Various Times.” Those guests, according to Baker, included senators, poet Robert Frost, and actor Errol Flynn.&lt;/p&gt;
    &lt;p&gt;Black Caesar’s Forge opened in 1938, 15 miles south of downtown Miami in Palmetto Bay. Named for a legendary pirate rumored to have buried treasure on the Miami coast, the restaurant’s sunken dining room was carved into coral rock and lined with wine bins. In the early years, guests brought their own steaks, salad fixings, and potatoes, which Phillips charged a fee to grill, toss with a house vinaigrette, and drop in a rosin pot, respectively. “The problem in World War II was you couldn’t get steak,” says David Phillips, J. Marquette’s grandson. “These were people with connections.”&lt;/p&gt;
    &lt;p&gt;Phillips had moved from Detroit to Miami in 1925 at the height of a south Florida real estate boom. The place was warm, notoriously wet despite Prohibition, and accessible by rail line, and wealthy snowbirds built mansions and flocked to newly minted hotels on South Beach. Phillips established himself as a furniture importer and decorative iron worker, and you can still see his handiwork at mansions built by Harvey S. Firestone and William K. Vanderbilt II.&lt;/p&gt;
    &lt;p&gt;Phillips’ business survived a series of devastating hurricanes and the 1929 stock market crash, and he built a South Beach home with a storefront and studio — and likely a speakeasy. After Prohibition’s repeal, and with the support of wealthy patrons, Phillips transformed the space into The Forge Club, a nightclub, casino, and steakhouse decorated with intricate iron grilles and palm trees. He sold the club in 1942, and it operated as The Forge, an iconic Miami steakhouse, until closing in 2019.&lt;/p&gt;
    &lt;p&gt;By the time Black Caesar’s Forge came around, Phillips had considerable social capital, and his potatoes were a local hit. Miamians added rosin potato hearths to their outdoor terraces. Snowbirds transported the potatoes back to their home states. Francis Kinney and Alberta Paskvan both served as World War II pilots, and, in the years after the war, met and married in Miami, where they frequented Black Caesar’s Forge. After moving to Michigan and, later, Montana, they continued to cook rosin potatoes over a wood fire in the backyard, and often for a crowd of bewildered neighbors. “For my whole life, they were part of our family’s cuisine,” says their son Will Kinney, a theoretical cosmologist at the University of Buffalo and avid rosin potato maker. (Kinney cooks his potatoes for 20 additional minutes after they rise to the surface of the pot, for optimal texture.)&lt;/p&gt;
    &lt;p&gt;Rosin potatoes’ popularity surged as families like the Kinneys moved to the suburbs and America’s backyard barbecue culture took root. Hamilton and Abercrombie &amp;amp; Fitch, among other manufacturers, started selling rosin potato kits complete with a pot, an aluminum stand, and rosin.&lt;/p&gt;
    &lt;p&gt;With wartime rations lifted and celebrations in order, steakhouses flourished, and plenty of them added rosin potatoes to their menus. My grandparents ate them in Palm Beach in the ’50s, when rosin potatoes had gourmet connotations. At a 1953 gathering of Les Amis d’Escoffier, “a band of real gourmets” ate rosin potatoes alongside bouillon, clams casino, oysters Rockefeller, caviar, crawfish quenelles, wild mallard, and Champagne.&lt;/p&gt;
    &lt;p&gt;There was no turpentine camp narrative at this point. Just as AT-FA promoted the newness and novelty of the preparation, so did the national press. But that started to change as rosin potatoes established themselves in the South and in turpentine strongholds. Soon they were on menus at the Mayflower Hotel in Jacksonville; Heritage Inn in Columbia, South Carolina; the Pirates’ House in Savannah; and Coyner’s in Macon, Georgia. Rosin potatoes were also a specialty of notoriously racist Aunt Fanny’s Cabin in Smyrna, Georgia. By the ’70s, the rosin potato myth had cemented and Planters Back Porch Seafood Restaurant in Myrtle Beach, South Carolina, told the tall tale on its menu:&lt;/p&gt;
    &lt;p&gt;“Many years ago a worker in a turpentine plant dropped a raw potato into an iron vat of bubbling hot rosin. The potato sank out of sight … but some 20 minutes later suddenly reappeared floating on the surface of the heavy rosin. The worker took a large ladle and scooped the potato out of the rosin and after curiosity got the better of him, he cut the potato open and proceeded to enjoy the most delicious potato ever before baked. Word of this culinary find circulated throughout the pine belt of the South and soon practically every plantation in the land had its own rosin pot out back for cooking the famous ‘rosin-taters.’”&lt;/p&gt;
    &lt;p&gt;The rosin potato had outgrown Black Caesar’s Forge and taken on a whole new identity, but Phillips had already moved on. He sold the restaurant in 1946 and settled in Cuba, where he ran a 35,000-acre fruit, mining, and timber plantation. Fidel Castro’s government seized the land in 1960, and Phillips died six years later.&lt;/p&gt;
    &lt;p&gt;Phillips never claimed to have invented the potato. He told friends and reporters he had seen it elsewhere but never revealed his source. There’s a chance he witnessed the potato cookery in central or northern Florida, where his wife Edna Valentine Paul’s family operated a lumber business. But there’s not a lick of proof rosin potatoes existed in the deep woods, and if they did, I can’t believe J. Marquette Phillips was the sole person to have brought them to the public’s attention.&lt;/p&gt;
    &lt;p&gt;On the contrary, I think he was concealing the potato’s backstory.&lt;/p&gt;
    &lt;p&gt;Outside the industry, resin and pitch — the latter made by cooking down oleoresin until thick and sticky — often are used interchangeably. At a certain point last summer, and on a desperate whim, I typed “pitch potatoes” into a newspaper archive. The first dozen or so hits were commodity lists; pitch and potatoes follow each other alphabetically. But then I found exactly what I was looking for: rosin potatoes’ predecessor boiling in the pots of Cincinnati’s pre-Prohibition German-American breweries.&lt;/p&gt;
    &lt;p&gt;By the mid-19th century, Cincinnati was home to a thriving beer industry whose German brewers were no strangers to pitch. In his 1829 The Art of Brewing, writer David Booth details the distinctly German practice of lining barrels with pitch to prevent contamination, leakage, and the transference of wood’s flavor and color into beer.&lt;/p&gt;
    &lt;p&gt;The 1850s and ’60s also coincided with the rise of pale lagers, a style of beer invented just a few years earlier at Pilsner Urquell in the Czech Republic. Lager means “storeroom” in German, and requires brewing and conditioning at cold temperatures. Modern light lagers are brewed year-round and age in refrigerated storage tanks, typically for 10 days to a month, but before commercial refrigeration, Cincinnati breweries made lager in the winter months, placed the barrels in deep cellars, dropped in ice harvested from frozen lakes and rivers, added straw or sawdust for insulation, and sealed it all with pitch. That way, crisp, fresh lagers flowed all summer long.&lt;/p&gt;
    &lt;p&gt;“Breweries were going through radical changes in the lager era,” says Mike Morgan, a Cincinnati beer historian and author of Over-the-Rhine: When Beer Was King. “You have to have these big lagering cellars. So brewing goes from something you can start on a small scale to digging a four-story hole and building over the top of it this brewery that would cost tens of millions of dollars today. Capital gets shifted, the spaces are a lot larger, and brewers are more concerned with politics.”&lt;/p&gt;
    &lt;p&gt;It’s in this environment that pitch potatoes, cooked in the same manner as rosin potatoes, have their moment in Cincinnati. The oldest reference I’ve found to pitch potatoes is from 1892 at a lunch hosted at a social club associated with the Christian Moerlein Brewing Co. According to a note in The Cincinnati Enquirer, “John Moerlein gave a ‘pitch’ potato lunch at the Elm Street Club rooms yesterday afternoon to a party of friends. It was quite a novel affair, and was heartily enjoyed.”&lt;/p&gt;
    &lt;p&gt;The Enquirer’s casual mention of the dish, with no elaboration on the cooking method, suggests readers were already familiar with the potatoes, and Morgan believes they could date back as far as the 1870s. But it was at late-19th-century beefsteak dinners — a raucous style of dining and political campaigning that originated in New York City — that pitch potatoes flourished. To court votes and favors, raise campaign funds, and reward political donors, boosters and clubs would throw hours-long, all-you-can-eat steak dinners. In Cincinnati, breweries often played host, hanging chandeliers, setting up white-linened tables, and letting amber fluid flow freely, according to Morgan.&lt;/p&gt;
    &lt;p&gt;While bread was the carbohydrate of choice in New York, Cincinnati embraced the pitch potato. In addition to the John Kauffman Brewing Company, where “steaks were broiled over the coke fires in the malt dryers, and were served with ‘pitch’ potatoes and other vegetables,” the potatoes were a fixture at the Bellevue, Mohawk, Windisch-Muhlhauser, Lackman, Buckeye, Jackson, Wiedmann’s, and Bruckmann breweries.&lt;/p&gt;
    &lt;p&gt;Beefsteak dinners didn’t have an exclusive hold on pitch potatoes. They were served in the city’s beer gardens. In its 1904/1905 Sigma Chi Quarterly, frat boys visiting Chester Park, an amusement complex, recorded “an open-air dinner, spread upon the longest tables I have ever seen — one hundred yards if an inch: a dinner consisting of potatoes cooked in tar and served in round balls of paper, and many other strange and awful edibles and things.”&lt;/p&gt;
    &lt;p&gt;Turn-of-the-century Cincinnati was also a major hub for conferences and conventions, of which pitch potatoes were a feature. At the 1898 gathering of the Master Horseshoers’ National Protective Association, 350 members, representing 130 cities, ate a pitch potato supper. The Iron and Steel Workers’ Convention of 1906 featured a beefsteak and pitch potato dinner, as did a 1909 gathering of 2,000 Knights of Pythias, a post-Civil War fraternal organization. In 1913, the National Association of Trunk Manufacturers ate pitch potatoes at Wiedmann’s. In 1910, the Cincinnati Elks chapter threw a “beefsteak and pitch potato feast” for Elks en route to a convention in Detroit.&lt;/p&gt;
    &lt;p&gt;The preparation also emerged in cities like Buffalo and Pittsburgh. But almost as suddenly as pitch potatoes rose from the newspaper archives, they vanished again.&lt;/p&gt;
    &lt;p&gt;• • •&lt;/p&gt;
    &lt;p&gt;When World War I broke out in 1914, so did anti-German hysteria. Ohio, once a bilingual state, declared English its official language and banned German language classes in schools before eighth grade. German street names changed. The press renamed sauerkraut “liberty cabbage” and hamburger “liberty steak.” The Espionage Act of 1917 explicitly outlawed interfering with military operations and recruitment and essentially outlawed anything un-American, aka German.&lt;/p&gt;
    &lt;p&gt;“That was the death blow,” Morgan says. Cincinnati’s German clubs, almost infinite in number, disbanded. Prohibition finished the job. Shifting to near-beer production, Bruckmann Brewery was the only Cincinnati brewery that operated from 1920 to 1933, and only six breweries reopened after states repealed the 18th Amendment. Pitch potatoes did not survive the upheaval.&lt;/p&gt;
    &lt;p&gt;By the time rosin potatoes made a national splash in the 1950s, most — but not all — Cincinnatians had forgotten pitch potatoes. I found one article, from 1955, in which a Cincinnati journalist connects zeitgeist-y rosin potatoes with “brewery days when kegs were lined with rosin,” and at least one enterprising Cincinnati family continued to make the potatoes at home.&lt;/p&gt;
    &lt;p&gt;David Hackman, whose father, Arnold, was head brewer at Hudepohl Brewing Company, remembers eating the potatoes, along with steak and corn on the cob, as far back as 1947. He and his father built a brick structure in the backyard so they could melt pitch in a kettle over wood. Hackman eventually upgraded to propane, which provided a heat so intense it scarred a nearby magnolia tree. Still, something got lost in translation. Hackman cooks his potatoes in petroleum-based pitch, a substance that scares away skeptical friends and children. “This is my tar thing,” says Hackman, insisting, “the worst thing to happen is you get black shit between your teeth.”&lt;/p&gt;
    &lt;p&gt;Hackman, who’s now 84, can claim something that no one else his age in the turpentine belt can: he grew up with pitch potatoes and can trace the dish’s provenance. At least up to a point.&lt;/p&gt;
    &lt;p&gt;Pitch potatoes were bobbing around so many Cincinnati breweries, it’s not clear where they originated. There’s a single blog post on the internet linking the potatoes back to Germany, but it’s a fuzzy connection at best.&lt;/p&gt;
    &lt;p&gt;I sent queries to a German-American beer scholar, a German food historian, and the Berlin-based Society for the History of Brewing, a collective of more than 300 members who research and publish German beer histories and maintain an archive and library. None had ever come across pitch potatoes in their research, nor had a beer museum in Thuringia, a region once known for producing exceptional brewers pitch.&lt;/p&gt;
    &lt;p&gt;There’s perhaps one clue in a 1912 article in Tägliches Cincinnatier Volksblatt. Though the article is written in old German, the words “pitch potatoes” appear in English, as if there’s no direct translation. The piece concerns the visit of Gustav Stresemann from Dresden to Cincinnati. Stresemann would go on to serve as Germany’s chancellor and win the Nobel Peace Prize, but at the time he served as executive director of Germany’s Federation of Industrialists. The son of a beer distributor, Stresemann, who wrote his Ph.D. on beer bottling, wanted to visit a brewery while he was in town, and Windisch-Muhlhauser extended an invitation.&lt;/p&gt;
    &lt;p&gt;“Yet this was on such short notice that they could not offer pitch potatoes and steak but only bread, sausage, and ham, along with beer. They thought pitch potatoes were a delicious thing they should serve this grand dignitary,” explained Jana Weiss, a beer historian at the University of Münster, who translated the article for me. “They would almost surely have used a German term if there was one.”&lt;/p&gt;
    &lt;p&gt;• • •&lt;/p&gt;
    &lt;p&gt;I doubt I’ll ever know for sure, but I believe pitch potatoes originated in Cincinnati breweries, where pitch was abundant and brewers found creative ways to cook with what they had on-site. At some point, J. Marquette Phillips came in contact with the dish, perhaps while traveling through Cincinnati or Pittsburgh, serving with Cincinnati men during World War I, or hobnobbing with Cincinnati snowbirds in Miami. But because his rosin potatoes debuted during World War II, Phillips chose not to disclose their German origins.&lt;/p&gt;
    &lt;p&gt;There’s the possibility of parallel development, sure — the idea that the potato could have arisen independently in Cincinnati and the South. But I don’t buy it. We know what turpentiners ate. It was recorded and passed down over centuries, and their foodways are alive today in homes like the Copelands’. What’s quite clear is that while the early naval stores industry greedily consumed longleaf pines, German-American breweries were buying Southern-made pitch, feasting on potatoes cooked in it, and sharing it broadly with the public.&lt;/p&gt;
    &lt;p&gt;The rosin potato is weird. It’s wild. It’s captivating. It’s also a pain in the ass. At both points in history when the rosin (née pitch) potato emerges, it hitches onto bigger cultural phenomena and explodes in popularity, only to recede into obscurity. German-Americans had more potent traditions and symbols. They gave us Budweiser! Phillips thought of himself on a grand scale; after he was ejected from Cuba, he sent a letter to President Kennedy asking to be installed as an ambassador to a small Central or South American nation. Rosin potatoes were a mere side note in a colorful life.&lt;/p&gt;
    &lt;p&gt;Rosin potatoes never merited serious thought in the South precisely because they did not matter in the culture. They had little commercial value to the AT-FA crowd. Akzo Nobel sold 20,000 pounds of rosin a month to Cracker Barrel, according to Baker, but shipped out millions of pounds more of its rosin-based products to other buyers. Only when the naval stores industry cratered and its real traditions — the songs, camps, catfaces, and stills of the piney woods — started to disappear did folks latch onto rosin potatoes.&lt;/p&gt;
    &lt;p&gt;In May, I flew to Nashville to eat Sean Brock’s pine rosin potato at Audrey. As part of the snack course on a tasting menu that was upwards of a C-note, servers presented (for visual devouring only) gorgeous, lacquered Appalachian Gold potatoes that had been boiled in rosin and set in a ceramic bowl atop pine needles. After those were whisked away, diners got a tiny bowl filled with rosin-cooked potato flesh mixed with local Cruze Farm buttermilk and topped with fresh trout roe and freeze-dried buttermilk.&lt;/p&gt;
    &lt;p&gt;Brock told me rosin, and its pine aroma, reminds him of growing up in Appalachia, and on Instagram he had called the potatoes an “old mountain tradition.” That night at dinner, I told him I would be setting the record straight. These potatoes don’t hail from Appalachia; they’re not even from the South.&lt;/p&gt;
    &lt;p&gt;But in a bite, with pure potato flavor lit through with buttermilk tang, I recognized an unmistakable Southern accent.&lt;/p&gt;
    &lt;p&gt;Rosin potatoes may not hail from the South, but potatoes, when boiled in Southern-made rosin, are a portal that can both flatten and complicate the history of the naval stores industry — an industry that transformed whole regions, extracted wealth at the expense of Black workers, replaced longleaf ecosystems with slash pine farms, and, especially in later years, put groceries on the table and gave men purposeful work.&lt;/p&gt;
    &lt;p&gt;The faith folks have in rosin potatoes isn’t just an act of blind, unquestioning nostalgia. In Tim Prizer’s work with turpentiners, he writes, “It is clear that nostalgia is often productive, insightful, critical — even progressive. … From turpentine’s material remains, former workers are able to extract profound experiential meaning, evaluate the current state of their communities, and determine which aspects of the past are worth transmitting into the future, which virtues of history should be upheld for posterity.”&lt;/p&gt;
    &lt;p&gt;The rosin potato myth, as rosy as it is, imagines a world in which there was greater parity between white and Black turpentiners, that men working at the stills would break to share a hot lunch, a potato cooked in the literal fruits of their labor. And this potato would have been so exceptional that it would be replicated in restaurants and backyards across the country.&lt;/p&gt;
    &lt;p&gt;“The rosin potato fortifies [turpentiners’] own history,” Prizer tells me, confessing that he, too, hadn’t thought twice about the turpentine-camp origin story. “It makes their own past and the region’s past more interesting, more alive, through this unusual food tradition, a food made from this thing that was their livelihood.”&lt;/p&gt;
    &lt;p&gt;The first time I spoke with Bill Baker, he told me he felt proud every time he drove by Akzo Nobel. In it, he saw a lifetime of honest work with the living pine. Likewise, what the rest of the world sees as a truly strange potato preparation, turpentiners recognize and taste as the work of their hands.&lt;/p&gt;
    &lt;p&gt;What is Southern cuisine, Brock asked me at dinner, if not a combination of cultural influences, geography, and ingredients? “I’m mostly interested in what Southern food can become,” he says. “Because it’s about discovery. And what if everything hasn’t been discovered?”&lt;/p&gt;
    &lt;p&gt;In 1991, the year Cracker Barrel discontinued the rosin potato, the restaurant chain offered a free dinner to anyone with “written proof of the use of recipes for rosin-baked potatoes before 1958.” They didn’t include a deadline for submissions, and I expect to collect on my comped plate of chicken and dumplings soon. In the same spirit, I’d love to buy a beer or dinner at Audrey for the first person with written proof of rosin, or pitch, potatoes before 1892.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Caroline Hatchett is a freelance writer and senior editor at Plate, a restaurant industry magazine. She lives in New York City but was born and raised in Baxley, Georgia, and graduated from Grady College of Journalism at the University of Georgia. Her work has appeared in The Washington Post, Garden &amp;amp; Gun, CNN, Wine Enthusiast, Robb Report, and Eater, among other publications. She also serves on the board of Restaurant Workers' Community Foundation, a workers' advocacy nonprofit.&lt;/p&gt;
      &lt;p&gt;Rinne Allen is a documentary photographer living in her hometown of Athens, Georgia, who documents process as a way to visually demonstrate the effort that goes into creating things. Rinne spends most of her days collaborating with farmers, chefs, artisans, designers, and researchers to document their work and the process that goes into making it, with the hope that those who view her pictures will learn something about the environment and culture of the American South.&lt;/p&gt;
    &lt;/quote&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45409914</guid><pubDate>Mon, 29 Sep 2025 02:41:18 +0000</pubDate></item><item><title>High-Level Synthesis Synthesis</title><link>https://stefanabikaram.com/writing/hls-synthesis/</link><description>&lt;doc fingerprint="bf2a1815af60a593"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;High-Level Synthesis Synthesis&lt;/head&gt;
    &lt;p&gt;Early in graduate school, I could never quite figure out how to refer to “synthesis” done as part of the high-level synthesis (HLS) flow.&lt;/p&gt;
    &lt;p&gt;Normally, one could say “synthesis” when the context is clear — for example, “…after C-simulation and synthesis,” meaning the hardware synthesis step inside an HLS tool. But sometimes I need to be more explicit, and I end up writing something like “…after C-simulation and HLS synthesis.” This appears redundant, but removes any ambiguity, which is good for academic writing and the reader.&lt;/p&gt;
    &lt;p&gt;Technically, “HLS synthesis” expands to “High-Level Synthesis Synthesis,” which sounds redundant. This is where the “Chai Tea” and “ATM Machine” people come out of the woodworks and say this is bad writing and I need to rewrite my sentences to avoid this silly mistake. Those people are annoying.&lt;/p&gt;
    &lt;p&gt;Now, I believe it is correct and good to say “HLS synthesis”. There are two distinct types of synthesis in hardware design. HLS synthesis (from C/C++ to RTL) is a different process than RTL synthesis (from RTL to gates or a netlist). In fact, in HLS research, talking about both HLS synthesis and RTL synthesis in the same context is common. For example, it is common to compare post-HLS-synthesis estimated results and post-RTL-synthesis results for a design (e.g. while doing design space exploration or training some machine learning models).&lt;/p&gt;
    &lt;p&gt;One could argue that you can just use “HLS” instead of “HLS synthesis.” However, in the HLS world or within your HLS tool, there are different common “flows” that you can run: C-Simulation (i.e. "csim"), RTL Co-Simulation (i.e. "cosim"), hardware synthesis (“HLS Synthesis”), and hardware export or packaging. It is useful to specifically distinguish the "hardware synthesis" step inside an HLS tool as “HLS synthesis” to refer to the HLS flow that lowers a C++ design all the way to RTL/HDL code via a frontend compiler + scheduling + binding + HDL generation.&lt;/p&gt;
    &lt;p&gt;There are many more linguistic frontiers yet to be explored in this research area. What is included in the word "implementation"? What is the difference between VLSI vs. EDA? Where is the boundary between new HDL vs. DSL vs. HLS languages? How does an average person interpret the phrases "hardware design" vs. "semiconductor design" vs. "chip design"? Is Tcl pronounced "T-C-L" or "tickle"?&lt;/p&gt;
    &lt;p&gt;All good questions graduate students should ponder for hours while they wait for their EDA tool to finish running.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45410134</guid><pubDate>Mon, 29 Sep 2025 03:42:12 +0000</pubDate></item><item><title>Zero ASIC releases Wildebeest, the highest performance FPGA synthesis tool</title><link>https://www.zeroasic.com/blog/wildebeest-launch</link><description>&lt;doc fingerprint="b749739f3ad424b2"&gt;
  &lt;main&gt;
    &lt;p&gt;Zero ASIC ·&lt;/p&gt;
    &lt;head rend="h3"&gt;Zero ASIC releases Wildebeest, the world’s highest performance FPGA synthesis tool.&lt;/head&gt;
    &lt;p&gt;Cambridge, MA – September 17, 2025 – Zero ASIC, a U.S. semiconductor startup on a mission to democratize silicon, today announced the release of WildebeestTM, the world’s highest performance FPGA synthesis tool.&lt;/p&gt;
    &lt;head rend="h3"&gt;Background&lt;/head&gt;
    &lt;p&gt;The software world has largely moved away from proprietary, vendor-locked compilers in favor of open source alternatives such as LLVM1 and GCC. Early on, these open source compilers lagged behind in performance, but over time, through the collective effort of the community, they caught up and even surpassed their proprietary counterparts.&lt;/p&gt;
    &lt;p&gt;In hardware, a similar transformation has been unfolding. Thanks to the pioneering work of Alan Mishchenko (ABC2), Claire Xenia Wolf (Yosys3), and the broader open source EDA community, FPGA developers have had access to a full-featured Verilog RTL synthesis toolchain for years. Recently, SystemVerilog support has since been added through Mike Popoloski’s excellent Slang parser4. Thanks to strong community involvement, the Yosys project now supports FPGA synthesis for a number of commercial and academic FPGA architectures.&lt;/p&gt;
    &lt;p&gt;Unfortunately, funding for open source FPGA synthesis has been minimal, and as a result a large QoR gap between open source and proprietary synthesis remains. Industrial users, who care obsessively about performance, have thus been stuck between a rock and a hard place: “Freedom or Performance”.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Attribute&lt;/cell&gt;
        &lt;cell role="head"&gt;Vendor Tool&lt;/cell&gt;
        &lt;cell role="head"&gt;Yosys&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;FPGA Support&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Lock-in&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Open Source&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Free&lt;/cell&gt;
        &lt;cell&gt;Yes/No&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Binary Size&lt;/cell&gt;
        &lt;cell&gt;Large&lt;/cell&gt;
        &lt;cell&gt;Small&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;QoR&lt;/cell&gt;
        &lt;cell&gt;Great&lt;/cell&gt;
        &lt;cell&gt;Good&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Robustness&lt;/cell&gt;
        &lt;cell&gt;Great&lt;/cell&gt;
        &lt;cell&gt;Good&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;Wildebeest Intro&lt;/head&gt;
    &lt;p&gt;Wildebeest introduces a number of critical optimization techniques to open source. Some of these techniques are standard practice in commercial compilers, but this is the first time they have been demonstrated in an open source FPGA synthesis tool.&lt;/p&gt;
    &lt;p&gt;The most important Wildebeest strategy is the use of circuit size as a primary feature for selecting the synthesis algorithms. Existing single script solutions don’t work well because they either fail to converge for large circuits or sacrifice performance for robustness. Using a carefully selected set of size appropriate optimization scripts, Wildebeest achieves robustness and high performance for a wide range of benchmark (up to 1M LUT designs).&lt;/p&gt;
    &lt;p&gt;Another important aspect of the Wildebeest approach is the effective use of the most advanced &lt;code&gt;abc9&lt;/code&gt; commands for speculative synthesis and logic depth minimization. ABC is an incredibly powerful logic synthesis library, but making effective use of all commands is a non-trivial task that requires deep expertise in logic synthesis, the ABC architecture, and Yosys, and software development.&lt;/p&gt;
    &lt;p&gt;Logic optimization is only as good as the benchmark data that grounds the algorithms used. Wildebeest adopted an industrial approach to development from day one, developing an internal suite of 150+ carefully selected benchmarks and automated profiling utilities. The open source LogikBench benchmarks suite was created to enable independent evaluation and benchmarking.&lt;/p&gt;
    &lt;p&gt;Logic synthesis has been around for over 50 years. During this time, basic synthesis algorithms and approaches have been openly published by the synthesis R&amp;amp;D community, but many of the “outer loop” tricks of the trade have been kept hidden by practitioners within proprietary tools. The lead Wildebeest developer, Dr. Thierry Besson is an industry insider with 30 years of experience in developing state of the art commercial logic synthesis solutions. Dr. Besson has previously contributed the fastest/smallest results on a number of the EPFL logic synthesis benchmarks and with Wildebeest he is releasing many of these techniques into the wild.5&lt;/p&gt;
    &lt;head rend="h3"&gt;Benchmark Results&lt;/head&gt;
    &lt;p&gt;The table below shows how Wildebeest compares against both open-source and proprietary synthesis tools for the picorv32 CPU design. To run Wildebeest across a broader set of benchmarks, see the LogikBench project.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Device&lt;/cell&gt;
        &lt;cell role="head"&gt;Arch&lt;/cell&gt;
        &lt;cell role="head"&gt;Tool&lt;/cell&gt;
        &lt;cell role="head"&gt;Synthesis Command&lt;/cell&gt;
        &lt;cell role="head"&gt;LUTs&lt;/cell&gt;
        &lt;cell role="head"&gt;Logic Depth&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;z1060&lt;/cell&gt;
        &lt;cell&gt;LUT6&lt;/cell&gt;
        &lt;cell&gt;wildebeest&lt;/cell&gt;
        &lt;cell&gt;synth_fpga&lt;/cell&gt;
        &lt;cell&gt;2312&lt;/cell&gt;
        &lt;cell&gt;40&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;z1060&lt;/cell&gt;
        &lt;cell&gt;LUT6&lt;/cell&gt;
        &lt;cell&gt;wildebeest&lt;/cell&gt;
        &lt;cell&gt;synth_fpga -opt delay&lt;/cell&gt;
        &lt;cell&gt;2677&lt;/cell&gt;
        &lt;cell&gt;6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Vendor-1&lt;/cell&gt;
        &lt;cell&gt;LUT6&lt;/cell&gt;
        &lt;cell&gt;vendor&lt;/cell&gt;
        &lt;cell&gt;(proprietary)&lt;/cell&gt;
        &lt;cell&gt;2870&lt;/cell&gt;
        &lt;cell&gt;7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Vendor-2&lt;/cell&gt;
        &lt;cell&gt;LUT6&lt;/cell&gt;
        &lt;cell&gt;vendor&lt;/cell&gt;
        &lt;cell&gt;(proprietary)&lt;/cell&gt;
        &lt;cell&gt;2947&lt;/cell&gt;
        &lt;cell&gt;8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;xc7&lt;/cell&gt;
        &lt;cell&gt;LUT6&lt;/cell&gt;
        &lt;cell&gt;yosys (0.56)&lt;/cell&gt;
        &lt;cell&gt;synth_xilinx -nocarry&lt;/cell&gt;
        &lt;cell&gt;3072&lt;/cell&gt;
        &lt;cell&gt;17&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;z1010&lt;/cell&gt;
        &lt;cell&gt;LUT4&lt;/cell&gt;
        &lt;cell&gt;wildebeest&lt;/cell&gt;
        &lt;cell&gt;synth_fpga&lt;/cell&gt;
        &lt;cell&gt;3593&lt;/cell&gt;
        &lt;cell&gt;39&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;z1010&lt;/cell&gt;
        &lt;cell&gt;LUT4&lt;/cell&gt;
        &lt;cell&gt;wildebeest&lt;/cell&gt;
        &lt;cell&gt;synth_fpga -opt delay&lt;/cell&gt;
        &lt;cell&gt;4112&lt;/cell&gt;
        &lt;cell&gt;8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;ice40&lt;/cell&gt;
        &lt;cell&gt;LUT4&lt;/cell&gt;
        &lt;cell&gt;yosys (0.56)&lt;/cell&gt;
        &lt;cell&gt;synth_ice40 -dsp -nocarry&lt;/cell&gt;
        &lt;cell&gt;4378&lt;/cell&gt;
        &lt;cell&gt;33&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The results show that Wildebeest QoR exceeds both proprietary and open source FPGA synthesis solutions.&lt;/p&gt;
    &lt;head rend="h3"&gt;Future Work&lt;/head&gt;
    &lt;p&gt;This initial Wildebeest release is only the beginning of the journey. The development team has a pipeline of optimization techniques in development with QoR that is expected to exceed current proprietary tools by a wide margin.&lt;/p&gt;
    &lt;p&gt;The long term goal of the Wildebeest project is to help bring forth an era of “LLVM for synthesis” by working with the community to develop high performance open source FPGA tools, robust standard IRs and file formats, and broad hardware vendor adoption.&lt;/p&gt;
    &lt;head rend="h3"&gt;Demo&lt;/head&gt;
    &lt;p&gt;To try out the &lt;code&gt;Wildebeest&lt;/code&gt;, follow these installation instructions, download the picorv32 CPU example, launch &lt;code&gt;yosys&lt;/code&gt;, and run the command sequence below.&lt;/p&gt;
    &lt;code&gt;plugin -i wildebeest
read_verilog picorv32.v
hierarchy -check -top picorv32
synth_fpga -partname z1010&lt;/code&gt;
    &lt;head rend="h3"&gt;Availability&lt;/head&gt;
    &lt;p&gt;The Wildebeest source code was officially released on September 17, 2025 and can be downloaded via github:&lt;/p&gt;
    &lt;p&gt;https://github.com/zeroasiccorp/wildebeest&lt;/p&gt;
    &lt;head rend="h3"&gt;About Zero ASIC&lt;/head&gt;
    &lt;p&gt;Zero ASIC is a semiconductor startup based in Cambridge, Massachusetts. The company mission is to democratize access to silicon through chiplets and design automation. Zero ASIC is building the world’s first composable chiplet platform, enabling billions of unique silicon systems to be assembled in hours from a catalog of off-the-shelf chiplets.&lt;/p&gt;
    &lt;head rend="h3"&gt;References&lt;/head&gt;
    &lt;head rend="h2"&gt;Footnotes&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;C. Lattner, V. Adve, “LLVM: A Compilation Framework for Lifelong Program Analysis &amp;amp; Transformation”, Proc. International Symposium on Code Generation and Optimization 2004 ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;R. Brayton and A. Mishchenko, “ABC: An academic industrial-strength verification tool”, Proc. CAV 2010 ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;C. Wolf, Johann Glaser., “Yosys - A Free Verilog Synthesis Suite”, Proc. Austrochip 2013 ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;M. Popoloski, “Slang: a SystemVerilog Compiler”, https://github.com/MikePopoloski/slang ↩&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;EPFL Benchmark Suite Best Results, https://github.com/lsils/benchmarks/tree/master/best_results ↩&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45410155</guid><pubDate>Mon, 29 Sep 2025 03:45:40 +0000</pubDate></item><item><title>What is "good taste" in software engineering?</title><link>https://www.seangoedecke.com/taste/</link><description>&lt;doc fingerprint="addef8d1ea05c59d"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;What is "good taste" in software engineering?&lt;/head&gt;
    &lt;p&gt;Technical taste is different from technical skill. You can be technically strong but have bad taste, or technically weak with good taste. Like taste in general, technical taste sometimes runs ahead of your ability: just like you can tell good food from bad without being able to cook, you can know what kind of software you like before you’ve got the ability to build it. You can develop technical ability by study and repetition, but good taste is developed in a more mysterious way.&lt;/p&gt;
    &lt;p&gt;Here are some indicators of software taste:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;What kind of code “looks good” to you? What kind of code “looks ugly”?&lt;/item&gt;
      &lt;item&gt;Which design decisions you feel really good about, and which ones are just fine?&lt;/item&gt;
      &lt;item&gt;Which software problems really bother you, to the point where you’re worrying about them outside of work? Which problems can you just brush off?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I think taste is the ability to adopt the set of engineering values that fit your current project.&lt;/p&gt;
    &lt;head rend="h3"&gt;Why taste is different from skill&lt;/head&gt;
    &lt;p&gt;Aren’t the indicators above just a part of skill? For instance, doesn’t code look good if it’s good code? I don’t think so.&lt;/p&gt;
    &lt;p&gt;Let’s take an example. Personally, I feel like code that uses map and filter looks nicer than using a for loop. It’s tempting to think that this is a case of me being straightforwardly correct about a point of engineering. For instance, map and filter typically involve pure functions, which are easier to reason about, and they avoid an entire class of off-by-one iterator bugs. It feels to me like this isn’t a matter of taste, but a case where I’m right and other engineers are wrong.&lt;/p&gt;
    &lt;p&gt;But of course it’s more complicated than that. Languages like Golang don’t contain map and filter at all, for principled reasons. Iterating with a for loop is easier to reason about from a performance perspective, and is more straightforward to extend to other iteration strategies (like taking two items at a time). I don’t care about these reasons as much as I care about the reasons in favour of map and filter - that’s why I don’t write a lot of for loops - but it would be far too arrogant for me to say that engineers who prefer for loops are simply less skilled. In many cases, they have technical capabilites that I don’t have. They just care about different things.&lt;/p&gt;
    &lt;p&gt;In other words, our disagreement comes down to a difference in values. I wrote about this point in I don’t know how to build software and you don’t either. Even if the big technical debates do have definite answers, no working software engineer is ever in a position to know what those answers are, because you can only fit so much experience into one career. We are all at least partly relying on our own personal experience: on our particular set of engineering values.&lt;/p&gt;
    &lt;head rend="h3"&gt;What engineering taste actually is&lt;/head&gt;
    &lt;p&gt;Almost every decision in software engineering is a tradeoff. You’re rarely picking between two options where one is strictly better. Instead, each option has its own benefits and downsides. Often you have to make hard tradeoffs between engineering values: past a certain point, you cannot easily increase performance without harming readability, for instance1.&lt;/p&gt;
    &lt;p&gt;Really understanding this point is (in my view) the biggest indicator of maturity in software engineering. Immature engineers are rigid about their decisions. They think it’s always better to do X or Y. Mature engineers are usually willing to consider both sides of a decision, because they know that both sides come with different benefits. The trick is not deciding if technology X is better than Y, but whether the benefits of X outweigh Y in this particular case.&lt;/p&gt;
    &lt;p&gt;In other words, immature engineers are too inflexible about their taste. They know what they like, but they mistake that liking for a principled engineering position. What defines a particular engineer’s taste?&lt;/p&gt;
    &lt;p&gt;In my view, your engineering taste is composed of the set of engineering values you find most important. For instance:&lt;/p&gt;
    &lt;p&gt;Resiliency. If an infrastructure component fails (a service dies, a network connection becomes unavailable), does the system remain functional? Can it recover without human intervention?&lt;/p&gt;
    &lt;p&gt;Speed. How fast is the software, compared to the theoretical limit? Is work being done in the hot path that isn’t strictly necessary?&lt;/p&gt;
    &lt;p&gt;Readability. Is the software easy to take in at a glance and to onboard new engineers to? Are functions relatively short and named well? Is the system well-documented?&lt;/p&gt;
    &lt;p&gt;Correctness. Is it possible to represent an invalid state in the system? How locked-down is the system with tests, types, and asserts? Do the tests use techniques like fuzzing? In the extreme case, has the program been proven correct by formal methods like Alloy?&lt;/p&gt;
    &lt;p&gt;Flexibility. Can the system be trivially extended? How easy is it to make a change? If I need to change something, how many different parts of the program do I need to touch in order to do so?&lt;/p&gt;
    &lt;p&gt;Portability. Is the system tied down to a particular operational environment (say, Microsoft Windows, or AWS)? If the system needs to be redeployed elsewhere, can that happen without a lot of engineering work?&lt;/p&gt;
    &lt;p&gt;Scalability. If traffic goes up 10x, will the system fall over? What about 100x? Does the system have to be over-provisioned or can it scale automatically? What bottlenecks will require engineering intervention?&lt;/p&gt;
    &lt;p&gt;Development speed. If I need to extend the system, how fast can it be done? Can most engineers work on it, or does it require a domain expert?&lt;/p&gt;
    &lt;p&gt;There are many other engineering values: elegance, modern-ness, use of open source, monetary cost of keeping the system running, and so on. All of these are important, but no engineer cares equally about all of these things. Your taste is determined by which of these values you rank highest. For instance, if you value speed and correctness more than development speed, you are likely to prefer Rust over Python. If you value scalability over portability, you are likely to argue for a heavy investment in your host’s (e.g. AWS) particular quirks and tooling. If you value resiliency over speed, you are likely to want to split your traffic between different regions. And so on2.&lt;/p&gt;
    &lt;p&gt;It’s possible to break these values down in a more fine-grained way. Two engineers who both deeply care about readability could disagree because one values short functions and the other values short call-stacks. Two engineers who both care about correctness could disagree because one values exhaustive test suites and the other values formal methods. But the principle is the same - there are lots of possible engineering values to care about, and because they are often in tension, each engineer is forced to take some more seriously than others.&lt;/p&gt;
    &lt;head rend="h3"&gt;How to identify bad taste&lt;/head&gt;
    &lt;p&gt;I’ve said that all of these values are important. Despite that, it’s possible to have bad taste. In the context of software engineering, bad taste means that your preferred values are not a good fit for the project you’re working on.&lt;/p&gt;
    &lt;p&gt;Most of us have worked with engineers like this. They come onto your project evangelizing about something - formal methods, rewriting in Golang, Ruby meta-programming, cross-region deployment, or whatever - because it’s worked well for them in the past. Whether it’s a good fit for your project or not, they’re going to argue for it, because it’s what they like. Before you know it, you’re making sure your internal metrics dashboard has five nines of reliability, at the cost of making it impossible for any junior engineer to understand.&lt;/p&gt;
    &lt;p&gt;In other words, most bad taste comes from inflexibility. I will always distrust engineers who justify decisions by saying “it’s best practice”. No engineering decision is “best practice” in all contexts! You have to make the right decision for the specific problem you’re facing.&lt;/p&gt;
    &lt;p&gt;One interesting consequence of this is that engineers with bad taste are like broken compasses. If you’re in the right spot, a broken compass will still point north. It’s only when you start moving around that the broken compass will steer you wrong. Likewise, many engineers with bad taste can be quite effective in the particular niche where their preferences line up with what the project needs. But when they’re moved between projects or jobs, or when the nature of the project changes, the wheels immediately come off. No job stays the same for long, particularly in these troubled post-2021 times.&lt;/p&gt;
    &lt;head rend="h3"&gt;How to identify good taste&lt;/head&gt;
    &lt;p&gt;Good taste is a lot more elusive than technical ability. That’s because, unlike technical ability, good taste is the ability to select the right set of engineering values for the particular technical problem you’re facing. It’s thus much harder to identify if someone has good taste: you can’t test it with toy problems, or by asking about technical facts. You need there to be a real problem, with all of its messy real-world context.&lt;/p&gt;
    &lt;p&gt;You can tell you have good taste if the projects you’re working on succeed. If you’re not meaningfully contributing to the design of a project (maybe you’re just doing ticket-work), you can tell you have good taste if the projects where you agree with the design decisions succeed, and the projects where you disagree are rocky. Importantly, you need a set of different kinds of projects. If it’s just the one project, or the same kind of project over again, you might just be a good fit for that. Even if you go through many different kinds of projects, that’s no guarantee that you have good taste in domains you’re less familiar with3.&lt;/p&gt;
    &lt;p&gt;How do you develop good taste? It’s hard to say, but I’d recommend working on a variety of things, paying close attention to which projects (or which parts of the project) are easy and which parts are hard. You should focus on flexibility: try not to acquire strong universal opinions about the right way to write software. What good taste I have I acquired pretty slowly. Still, I don’t see why you couldn’t acquire it fast. I’m sure there are prodigies with taste beyond their experience in programming, just as there are prodigies in other domains.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Of course this isn’t always true. There are win-win changes where you can improve several usually-opposing values at the same time. But mostly we’re not in that position.&lt;/p&gt;↩&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Like I said above, different projects will obviously demand a different set of values. But the engineers working on those projects will still have to draw the line somewhere, and they’ll rely on their own taste to do that.&lt;/p&gt;↩&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;That said, I do think good taste is somewhat transferable. I don’t have much personal experience with this so I’m leaving it in a footnote, but if you’re flexible and attentive to the details in domain A, you’ll probably be flexible and attentive to the details in domain B.&lt;/p&gt;↩&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you liked this post, consider subscribing to email updates about my new posts, or sharing it on Hacker News.&lt;/p&gt;
    &lt;p&gt;September 28, 2025 │ Tags: good engineers, software design&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45410940</guid><pubDate>Mon, 29 Sep 2025 06:41:27 +0000</pubDate></item></channel></rss>