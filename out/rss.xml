<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sun, 05 Oct 2025 13:33:57 +0000</lastBuildDate><item><title>Which Table Format Do LLMs Understand Best? (Results for 11 Formats)</title><link>https://www.improvingagents.com/blog/best-input-data-format-for-llms</link><description>&lt;doc fingerprint="3e032216ed33a053"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Which Table Format Do LLMs Understand Best? (Results for 11 Formats)&lt;/head&gt;
    &lt;p&gt;When discussing the reliability of AI-based systems, thereâs something fundamental that doesnât get enough attention: whatâs the best format for passing tables of data to an LLM?&lt;/p&gt;
    &lt;p&gt;Should you use markdown tables or CSV?&lt;/p&gt;
    &lt;p&gt;JSON or YAML?&lt;/p&gt;
    &lt;p&gt;Or does some other format work better than any of these?&lt;/p&gt;
    &lt;head rend="h2"&gt;Why This Question Matters&lt;/head&gt;
    &lt;p&gt;As AI systems become integral to data analysis, business intelligence, and decision-making processes, understanding format sensitivity is crucial for:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Data Pipeline Architecture: Structuring data workflows for maximum AI comprehension&lt;/item&gt;
      &lt;item&gt;Performance Optimization: Reducing processing overhead while maintaining accuracy&lt;/item&gt;
      &lt;item&gt;Cost Management: Minimizing token usage and API costs in production systems&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Many RAG pipelines involve ingesting documents that contain tables of data. If weâre not formatting that data in a way that it is easy for an LLM to consume, then we may be needlessly hurting the accuracy of the overall system.&lt;/p&gt;
    &lt;head rend="h2"&gt;Our Methodology&lt;/head&gt;
    &lt;p&gt;We designed a controlled experiment to test how the formatting of a set of data would affect how accurately an LLM could answer questions about that data.&lt;/p&gt;
    &lt;p&gt;Our tests involved passing 1000 records to an LLM and asking it to answer a question based on the data. We then evaluated whether it answered correctly or not in each case.&lt;/p&gt;
    &lt;p&gt;We repeated this process for 1000 questions, using each of 11 different data formats.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Dataset: 1,000 synthetic employee records with 8 attributes each (ID, name, age, city, department, salary, experience, project count)&lt;/item&gt;
      &lt;item&gt;Questions: 1,000 randomized queries about specific data points&lt;/item&gt;
      &lt;item&gt;Model: GPT-4.1-nano&lt;/item&gt;
      &lt;item&gt;Formats Tested: 11 different data representation formats&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Example Question-Answer Pairs&lt;/head&gt;
    &lt;code&gt;Q. "How many years of experience does Grace X413 have? (Return just the number, e.g. '12'.)"
A. "15"&lt;/code&gt;
    &lt;code&gt;Q. "What is Alice W204's salary? (Return just the number, e.g. '85200'.)"
A. "131370"&lt;/code&gt;
    &lt;head rend="h3"&gt;Notes on Methodology&lt;/head&gt;
    &lt;p&gt;We opted to pass a relatively large number of records to the LLM in order to test its limits. In practice, with a large structured dataset, youâll often want to chunk it up and/or query it in some way in order to extract just the most relevant records / information and only pass that reduced amount of context to the LLM.&lt;/p&gt;
    &lt;p&gt;When using formats such as CSV, HTML tables and markdown tables that involve headers, you may want to repeat those headers on a regular basis (e.g. every 100 records) to help with understanding. For simplicity, we didnât do that here.&lt;/p&gt;
    &lt;head rend="h2"&gt;How Well Did the LLM Understand Each Format?&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Format&lt;/cell&gt;
        &lt;cell role="head"&gt;Accuracy&lt;/cell&gt;
        &lt;cell role="head"&gt;95% Confidence Interval&lt;/cell&gt;
        &lt;cell role="head"&gt;Tokens&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Markdown-KV&lt;/cell&gt;
        &lt;cell&gt;60.7%&lt;/cell&gt;
        &lt;cell&gt;57.6% â 63.7%&lt;/cell&gt;
        &lt;cell&gt;52,104&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;XML&lt;/cell&gt;
        &lt;cell&gt;56.0%&lt;/cell&gt;
        &lt;cell&gt;52.9% â 59.0%&lt;/cell&gt;
        &lt;cell&gt;76,114&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;INI&lt;/cell&gt;
        &lt;cell&gt;55.7%&lt;/cell&gt;
        &lt;cell&gt;52.6% â 58.8%&lt;/cell&gt;
        &lt;cell&gt;48,100&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;YAML&lt;/cell&gt;
        &lt;cell&gt;54.7%&lt;/cell&gt;
        &lt;cell&gt;51.6% â 57.8%&lt;/cell&gt;
        &lt;cell&gt;55,395&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;HTML&lt;/cell&gt;
        &lt;cell&gt;53.6%&lt;/cell&gt;
        &lt;cell&gt;50.5% â 56.7%&lt;/cell&gt;
        &lt;cell&gt;75,204&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;JSON&lt;/cell&gt;
        &lt;cell&gt;52.3%&lt;/cell&gt;
        &lt;cell&gt;49.2% â 55.4%&lt;/cell&gt;
        &lt;cell&gt;66,396&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Markdown-Table&lt;/cell&gt;
        &lt;cell&gt;51.9%&lt;/cell&gt;
        &lt;cell&gt;48.8% â 55.0%&lt;/cell&gt;
        &lt;cell&gt;25,140&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Natural-Language&lt;/cell&gt;
        &lt;cell&gt;49.6%&lt;/cell&gt;
        &lt;cell&gt;46.5% â 52.7%&lt;/cell&gt;
        &lt;cell&gt;43,411&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;JSONL&lt;/cell&gt;
        &lt;cell&gt;45.0%&lt;/cell&gt;
        &lt;cell&gt;41.9% â 48.1%&lt;/cell&gt;
        &lt;cell&gt;54,407&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;CSV&lt;/cell&gt;
        &lt;cell&gt;44.3%&lt;/cell&gt;
        &lt;cell&gt;41.2% â 47.4%&lt;/cell&gt;
        &lt;cell&gt;19,524&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Pipe-Delimited&lt;/cell&gt;
        &lt;cell&gt;41.1%&lt;/cell&gt;
        &lt;cell&gt;38.1% â 44.2%&lt;/cell&gt;
        &lt;cell&gt;43,098&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h2"&gt;Highlights&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Format seems important: we saw significant differences in understanding between the different formats.&lt;/item&gt;
      &lt;item&gt;CSV and JSONL performed poorly: suggesting the potential for quick wins if youâre currently using one of these formats by default.&lt;/item&gt;
      &lt;item&gt;Markdown-KV came out top, hitting 60.7% accuracy and landing roughly 16 points ahead of CSV. (Markdown-KV is our term for a non-standardised format featuring âkey: valueâ pairs in markdown.)&lt;/item&gt;
      &lt;item&gt;Accuracy cost tokens: the top-performing Markdown-KV format used 2.7 times as many tokens as the most token-efficient format, CSV.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Data Formats Evaluated&lt;/head&gt;
    &lt;p&gt;1. JSON&lt;/p&gt;
    &lt;code&gt;[
  {
    "id": 1,
    "name": "Diana A0",
    "age": 46,
    "city": "London",
    "department": "Engineering",
    "salary": 141015,
    "years_experience": 7,
    "project_count": 17
  },
  {
    "id": 2,
    "name": "Grace B1",
    "age": 59,
    "city": "Berlin",
    "department": "Engineering",
    "salary": 100066,
    "years_experience": 11,
    "project_count": 32
  },
  {
    "id": 3,
    "name": "Grace C2",
    "age": 64,
    "city": "Dubai",
    "department": "Engineering",
    "salary": 91727,
    "years_experience": 9,
    "project_count": 49
  }
]&lt;/code&gt;
    &lt;p&gt;2. CSV&lt;/p&gt;
    &lt;code&gt;id,name,age,city,department,salary,years_experience,project_count
1,Diana A0,46,London,Engineering,141015,7,17
2,Grace B1,59,Berlin,Engineering,100066,11,32
3,Grace C2,64,Dubai,Engineering,91727,9,49&lt;/code&gt;
    &lt;p&gt;3. XML&lt;/p&gt;
    &lt;code&gt;&amp;lt;?xml version="1.0" ?&amp;gt;
&amp;lt;employees&amp;gt;
  &amp;lt;employee id="1"&amp;gt;
    &amp;lt;name&amp;gt;Diana A0&amp;lt;/name&amp;gt;
    &amp;lt;age&amp;gt;46&amp;lt;/age&amp;gt;
    &amp;lt;city&amp;gt;London&amp;lt;/city&amp;gt;
    &amp;lt;department&amp;gt;Engineering&amp;lt;/department&amp;gt;
    &amp;lt;salary&amp;gt;141015&amp;lt;/salary&amp;gt;
    &amp;lt;years_experience&amp;gt;7&amp;lt;/years_experience&amp;gt;
    &amp;lt;project_count&amp;gt;17&amp;lt;/project_count&amp;gt;
  &amp;lt;/employee&amp;gt;
  &amp;lt;employee id="2"&amp;gt;
    &amp;lt;name&amp;gt;Grace B1&amp;lt;/name&amp;gt;
    &amp;lt;age&amp;gt;59&amp;lt;/age&amp;gt;
    &amp;lt;city&amp;gt;Berlin&amp;lt;/city&amp;gt;
    &amp;lt;department&amp;gt;Engineering&amp;lt;/department&amp;gt;
    &amp;lt;salary&amp;gt;100066&amp;lt;/salary&amp;gt;
    &amp;lt;years_experience&amp;gt;11&amp;lt;/years_experience&amp;gt;
    &amp;lt;project_count&amp;gt;32&amp;lt;/project_count&amp;gt;
  &amp;lt;/employee&amp;gt;
  &amp;lt;employee id="3"&amp;gt;
    &amp;lt;name&amp;gt;Grace C2&amp;lt;/name&amp;gt;
    &amp;lt;age&amp;gt;64&amp;lt;/age&amp;gt;
    &amp;lt;city&amp;gt;Dubai&amp;lt;/city&amp;gt;
    &amp;lt;department&amp;gt;Engineering&amp;lt;/department&amp;gt;
    &amp;lt;salary&amp;gt;91727&amp;lt;/salary&amp;gt;
    &amp;lt;years_experience&amp;gt;9&amp;lt;/years_experience&amp;gt;
    &amp;lt;project_count&amp;gt;49&amp;lt;/project_count&amp;gt;
  &amp;lt;/employee&amp;gt;
&amp;lt;/employees&amp;gt;&lt;/code&gt;
    &lt;p&gt;4. YAML&lt;/p&gt;
    &lt;code&gt;records:
  - id: 1
    name: "Diana A0"
    age: 46
    city: "London"
    department: "Engineering"
    salary: 141015
    years_experience: 7
    project_count: 17
  - id: 2
    name: "Grace B1"
    age: 59
    city: "Berlin"
    department: "Engineering"
    salary: 100066
    years_experience: 11
    project_count: 32
  - id: 3
    name: "Grace C2"
    age: 64
    city: "Dubai"
    department: "Engineering"
    salary: 91727
    years_experience: 9
    project_count: 49&lt;/code&gt;
    &lt;p&gt;5. HTML&lt;/p&gt;
    &lt;code&gt;&amp;lt;h1&amp;gt;Employee Records&amp;lt;/h1&amp;gt;
&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;id&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;name&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;age&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;city&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;department&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;salary&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;years_experience&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;project_count&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;1&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Diana A0&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;46&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;London&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Engineering&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;141015&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;7&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;17&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;2&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Grace B1&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;59&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Berlin&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Engineering&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;100066&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;11&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;32&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;3&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Grace C2&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;64&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Dubai&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;Engineering&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;91727&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;9&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;49&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;&lt;/code&gt;
    &lt;p&gt;6. Markdown Table&lt;/p&gt;
    &lt;code&gt;| id | name | age | city | department | salary | years_experience | project_count |
| --- | --- | --- | --- | --- | --- | --- | --- |
| 1 | Diana A0 | 46 | London | Engineering | 141015 | 7 | 17 |
| 2 | Grace B1 | 59 | Berlin | Engineering | 100066 | 11 | 32 |
| 3 | Grace C2 | 64 | Dubai | Engineering | 91727 | 9 | 49 |&lt;/code&gt;
    &lt;p&gt;7. Markdown KV&lt;/p&gt;
    &lt;code&gt;# Employee Database

## Record 1

```
id: 1
name: Charlie A0
age: 56
city: New York
department: Operations
salary: 67896
years_experience: 7
project_count: 1
```

## Record 2

```
id: 2
name: Grace B1
age: 59
city: Mumbai
department: Marketing
salary: 47248
years_experience: 0
project_count: 43
```

## Record 3

```
id: 3
name: Eve C2
age: 50
city: Singapore
department: Sales
salary: 102915
years_experience: 14
project_count: 11
```&lt;/code&gt;
    &lt;p&gt;8. INI&lt;/p&gt;
    &lt;code&gt;[employee_1]
id = 1
name = Diana A0
age = 46
city = London
department = Engineering
salary = 141015
years_experience = 7
project_count = 17

[employee_2]
id = 2
name = Grace B1
age = 59
city = Berlin
department = Engineering
salary = 100066
years_experience = 11
project_count = 32

[employee_3]
id = 3
name = Grace C2
age = 64
city = Dubai
department = Engineering
salary = 91727
years_experience = 9
project_count = 49&lt;/code&gt;
    &lt;p&gt;9. Pipe-Delimited&lt;/p&gt;
    &lt;code&gt;id: 1 | name: Diana A0 | age: 46 | city: London | department: Engineering | salary: 141015 | years_experience: 7 | project_count: 17
id: 2 | name: Grace B1 | age: 59 | city: Berlin | department: Engineering | salary: 100066 | years_experience: 11 | project_count: 32
id: 3 | name: Grace C2 | age: 64 | city: Dubai | department: Engineering | salary: 91727 | years_experience: 9 | project_count: 49&lt;/code&gt;
    &lt;p&gt;10. JSONL&lt;/p&gt;
    &lt;code&gt;{"id": 1, "name": "Diana A0", "age": 46, "city": "London", "department": "Engineering", "salary": 141015, "years_experience": 7, "project_count": 17}
{"id": 2, "name": "Grace B1", "age": 59, "city": "Berlin", "department": "Engineering", "salary": 100066, "years_experience": 11, "project_count": 32}
{"id": 3, "name": "Grace C2", "age": 64, "city": "Dubai", "department": "Engineering", "salary": 91727, "years_experience": 9, "project_count": 49}&lt;/code&gt;
    &lt;p&gt;11. Natural Language&lt;/p&gt;
    &lt;code&gt;Employee Records Summary:

Diana A0 (ID: 1) is a 46-year-old employee working in the Engineering department in London. They earn $141,015 with 7 years of experience and have completed 17 projects.
Grace B1 (ID: 2) is a 59-year-old employee working in the Engineering department in Berlin. They earn $100,066 with 11 years of experience and have completed 32 projects.
Grace C2 (ID: 3) is a 64-year-old employee working in the Engineering department in Dubai. They earn $91,727 with 9 years of experience and have completed 49 projects.&lt;/code&gt;
    &lt;head rend="h2"&gt;Practical Guidance&lt;/head&gt;
    &lt;p&gt;Based on the results of our experiment:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;If you make heavy use of tabular data, consider testing whether transforming that data into a different format gives you improved accuracy.&lt;/item&gt;
      &lt;item&gt;Markdown-KV looks a good default in situations where accuracy is paramount.&lt;/item&gt;
      &lt;item&gt;Consider markdown tables when you need a balance between readability and cost.&lt;/item&gt;
      &lt;item&gt;Be wary of defaulting to CSV or JSONL - these common formats could hurt your systemâs accuracy.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Limitations and Areas for Further Study&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Models &amp;amp; Providers: We only tested OpenAIâs GPT-4.1 nano. Other models, particularly those from other providers, may work best with different data formats (e.g. whatever format was used most in training that model.)&lt;/item&gt;
      &lt;item&gt;Data Content: We only tested one pattern of data. Results might be different with other patterns of data.&lt;/item&gt;
      &lt;item&gt;Data Structure: We only tested straightforward tabular data. It would be interesting to test with nested data such as JSON configs and tables with merged cells.&lt;/item&gt;
      &lt;item&gt;Table Size &amp;amp; Header Repetition: To stress the model we used a relatively large table of data and didnât repeat any headers. Weâd expect smaller tables and/or repeated header rows to lead to higher accuracy, particularly for CSV, HTML and markdown table formats (the ones that involve header rows.)&lt;/item&gt;
      &lt;item&gt;Question Type: Each of our test questions corresponded to retrieving the value of a field in a given record. It would be interesting to test other types of question.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Closing Thoughts&lt;/head&gt;
    &lt;p&gt;We were surprised by how much the input data format seemed to matter.&lt;/p&gt;
    &lt;p&gt;Our findings suggest that implementing simple data transformations could, in some cases, be an easy way to improve the accuracy of your LLM-based systems.&lt;/p&gt;
    &lt;p&gt;Weâre keen to investigate this topic more.&lt;/p&gt;
    &lt;p&gt;Subscribe to our newsletter if youâd like to be updated when we have new findings about this or other topics relating to improving AI agents.&lt;/p&gt;
    &lt;head rend="h2"&gt;Enjoyed This Article?&lt;/head&gt;
    &lt;p&gt;Get more tactical AI agent insights delivered to your inbox&lt;/p&gt;
    &lt;p&gt;We respect your privacy. Unsubscribe at any time.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45458455</guid><pubDate>Fri, 03 Oct 2025 02:59:18 +0000</pubDate></item><item><title>A comparison of Ada and Rust, using solutions to the Advent of Code</title><link>https://github.com/johnperry-math/AoC2023/blob/master/More_Detailed_Comparison.md</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45473861</guid><pubDate>Sat, 04 Oct 2025 15:10:49 +0000</pubDate></item><item><title>ProofOfThought: LLM-based reasoning using Z3 theorem proving</title><link>https://github.com/DebarghaG/proofofthought</link><description>&lt;doc fingerprint="880be56c94434dea"&gt;
  &lt;main&gt;
    &lt;p&gt;LLM-based reasoning using Z3 theorem proving.&lt;/p&gt;
    &lt;code&gt;from openai import OpenAI
from z3dsl.reasoning import ProofOfThought

client = OpenAI(api_key="...")
pot = ProofOfThought(llm_client=client)

result = pot.query("Would Nancy Pelosi publicly denounce abortion?")
print(result.answer)  # False&lt;/code&gt;
    &lt;code&gt;from z3dsl.reasoning import EvaluationPipeline

evaluator = EvaluationPipeline(pot, output_dir="results/")
result = evaluator.evaluate(
    dataset="strategyqa_train.json",
    max_samples=10
)
print(f"Accuracy: {result.metrics.accuracy:.2%}")&lt;/code&gt;
    &lt;code&gt;pip install z3-solver openai scikit-learn numpy&lt;/code&gt;
    &lt;p&gt;The system has two layers:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;High-level API (&lt;code&gt;z3dsl.reasoning&lt;/code&gt;) - Simple Python interface for reasoning tasks&lt;/item&gt;
      &lt;item&gt;Low-level DSL (&lt;code&gt;z3dsl&lt;/code&gt;) - JSON-based Z3 theorem prover interface&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Most users should use the high-level API.&lt;/p&gt;
    &lt;p&gt;See &lt;code&gt;examples/&lt;/code&gt; directory for complete examples including Azure OpenAI support.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45475529</guid><pubDate>Sat, 04 Oct 2025 18:34:23 +0000</pubDate></item><item><title>Blog Feeds</title><link>https://blogfeeds.net</link><description>&lt;doc fingerprint="779f1fb99e6586b5"&gt;
  &lt;main&gt;
    &lt;p&gt;Tired of social media?&lt;/p&gt;
    &lt;p&gt;Keep doom scrolling through addicting feeds?&lt;/p&gt;
    &lt;p&gt;Miss the days when the web was just about connecting with people and their thoughts or ideas?&lt;/p&gt;
    &lt;p&gt;We believe there's an answer to that problem, and it's called&lt;/p&gt;
    &lt;p&gt;Starting a blog is actually a lot simpler than what you're probably thinking. This doesn't have to be some well polished highly viewed monetization machine, or even something professional or formal. It's just a simple website where you can casually talk about whatever you want to talk about! It can be long, short, a list of small things, or just a quote. It should be how you talk with other people in your own life, or how you communicate with the outside world. It should be you on a page. Here's a few places you can make a blog that are RSS enabled:&lt;/p&gt;
    &lt;p&gt;RSS is actually already familiar to you if you have ever subscribed to a newsletter. You put your email into someoneâs website, and when they have updates, they send you emails to your inbox so you can stay in the loop. In the case of RSS, you have a dedicated app, called an RSS reader usually, and you can put in someoneâs website into the app to subscribe. When they make a new post, just open your news reader app, and their posts will be retrieved and ready to read. Some reader apps even let you make folders and tags to organize blogs you are subscribed to, similar to how an email app lets you make folders to sort mail. Would highly recommend trying a few of the apps or services and seeing which works best!&lt;/p&gt;
    &lt;p&gt;This takes us to our final point: Feeds. You can probably get away with just the first two items and then sharing it with people you already know, but what about meeting or talking to people you don't know? That's where Feeds come in. The idea is to create another page on your blog that has all the RSS feeds you're subscribed to. By keeping this public and always up to date, someone can visit your page, find someone new and follow them. Perhaps that person also has a feeds page, and the cycle continues until there is a natural and organic network of people all sharing with each other. So if you have a blog, consider making a feeds page and sharing it! If your RSS reader supports OPML file exports and imports, perhaps you can share that file as well to make it easier to share your feeds.&lt;/p&gt;
    &lt;p&gt;Here's an example Feeds Page which should help get the idea across!&lt;/p&gt;
    &lt;p&gt;The best part about blog feeds? It's just an idea. There's no central authority. There's no platform. No massive tech giant trying to take your data. It's just you, basic web standards, and the people you care about.&lt;/p&gt;
    &lt;p&gt;Made by Steve&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45475808</guid><pubDate>Sat, 04 Oct 2025 19:08:46 +0000</pubDate></item><item><title>Matrix Core Programming on AMD GPUs</title><link>https://salykova.github.io/matrix-cores-cdna</link><description>&lt;doc fingerprint="179c1252016d1d30"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Matrix Core Programming on AMD CDNA3 and CDNA4 architecture&lt;/head&gt;
    &lt;p&gt;TL;DR In this blog post, we walk through how to use Matrix Cores in HIP kernels, with a focus on low-precision data types such as FP16, FP8, and FP4, as well as the new family of Matrix Core instructions with exponent block scaling introduced in the AMD CDNA™4 architecture. Through code examples and illustrations, we provide the necessary knowledge to start programming Matrix Cores, covering modern low-precision floating-point types, the Matrix Core compiler intrinsics, and the data layouts required by the Matrix Core instructions. The blog post is also available on ROCm Blogs.&lt;/p&gt;
    &lt;head rend="h2"&gt;1. Matrix Cores&lt;/head&gt;
    &lt;p&gt;Matrix multiplication is an essential part of AI and HPC workloads. The AMD CDNA™ architecture features special-purpose hardware, the Matrix Cores, to accelerate matrix fused-multiply-add (MFMA) operations defined as &lt;code&gt;D:=A*B+C&lt;/code&gt;. Please note that MFMA instructions are often used to update a matrix in-place (=accumulation) so that &lt;code&gt;D=C&lt;/code&gt; and &lt;code&gt;C:=A*B+C&lt;/code&gt;. The matrices &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are called input matrices, while the matrix &lt;code&gt;D&lt;/code&gt; is referred to as the output matrix or accumulator.&lt;/p&gt;
    &lt;p&gt;The performance gains from using Matrix Cores are especially significant in mixed-precision mode, where the input matrices use lower-precision data types instead of FP32. The output matrix, however, is stored in FP32 to minimize accuracy loss during accumulation. The tables below show the theoretical peak performance of Matrix Cores with different input data types on both AMD CDNA™3 and AMD CDNA™4 architectures. On the AMD Instinct™ MI325X, using FP16 input matrices delivers nearly an 8x performance increase compared to single-precision, with only minimal accuracy loss. Switching to FP8 further doubles the performance providing a 16x increase when compared to FP32. The AMD CDNA™4 architecture further improves Matrix Core performance, delivering up to 2x higher throughput for FP16 and FP8 compared to the AMD CDNA™3 architecture. In addition, AMD CDNA™4 introduces new low-precision data types such as FP6 and FP4, enabling up to 64x performance gain relative to FP32. Please refer to the AMD CDNA™3 and AMD CDNA™4 white papers for detailed architecture specifications.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;AMD Instinct™ MI325X (CDNA™3)&lt;/cell&gt;
        &lt;cell role="head"&gt;Speedup vs. FP32&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Matrix FP64&lt;/cell&gt;
        &lt;cell&gt;163.4 TF&lt;/cell&gt;
        &lt;cell&gt;1x&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Matrix FP32&lt;/cell&gt;
        &lt;cell&gt;163.4 TF&lt;/cell&gt;
        &lt;cell&gt;1x&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Matrix FP16&lt;/cell&gt;
        &lt;cell&gt;1307.4 TF&lt;/cell&gt;
        &lt;cell&gt;~8x&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Matrix FP8&lt;/cell&gt;
        &lt;cell&gt;2614.9 TF&lt;/cell&gt;
        &lt;cell&gt;~16x&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;AMD Instinct™ MI355X (CDNA™4)&lt;/cell&gt;
        &lt;cell role="head"&gt;Speedup vs. FP32&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Matrix FP64&lt;/cell&gt;
        &lt;cell&gt;78.6 TF&lt;/cell&gt;
        &lt;cell&gt;~0.5x&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Matrix FP32&lt;/cell&gt;
        &lt;cell&gt;157.3 TF&lt;/cell&gt;
        &lt;cell&gt;1x&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Matrix FP16&lt;/cell&gt;
        &lt;cell&gt;2.5 PF&lt;/cell&gt;
        &lt;cell&gt;~16x&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Matrix FP8&lt;/cell&gt;
        &lt;cell&gt;5 PF&lt;/cell&gt;
        &lt;cell&gt;~32x&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Matrix FP6&lt;/cell&gt;
        &lt;cell&gt;10 PF&lt;/cell&gt;
        &lt;cell&gt;~64x&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Matrix FP4&lt;/cell&gt;
        &lt;cell&gt;10 PF&lt;/cell&gt;
        &lt;cell&gt;~64x&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h2"&gt;2. Low-Precision Floating-Point Types&lt;/head&gt;
    &lt;p&gt;A binary representation of a floating-point number consists of &lt;code&gt;n&lt;/code&gt; bits, where &lt;code&gt;m&lt;/code&gt; of &lt;code&gt;n&lt;/code&gt; bits represent the mantissa, 1 bit determines the sign and &lt;code&gt;n-m-1&lt;/code&gt; bits represent the exponent. The following image illustrates the binary format of a floating-point number and how the exponent and mantissa are calculated based on its binary representation.&lt;/p&gt;
    &lt;p&gt;Figure 1: Binary representation of a floating-point number.&lt;/p&gt;
    &lt;p&gt;Floating-point types are characterized by the number of bits used for the exponent and for the mantissa. Increasing the exponent width extends the range of representable values, while increasing the mantissa width improves precision. Since all floating-point types include the sign bit, a shorthand notation typically specifies only the exponent and mantissa widths. For example, the E4M3 type is an 8-bit floating-point type with 4-bit exponent and 3-bit mantissa. Additionally, a floating-point type is specified by exponent bias - a number that is subtracted from the exponent during conversion from binary format to real value. Given the exponent width, mantissa width, and exponent bias, one can convert the binary representation of a floating-point type (except E8M0) into its real value using the following equation:&lt;/p&gt;
    &lt;p&gt;Figure 2: Conversion to real value from binary representation for floating-point numbers.&lt;/p&gt;
    &lt;p&gt;Please note that the equation takes different forms depending on whether the exponent is zero or not. Often, certain exponent and mantissa values are reserved for special values (e.g. &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt;), which limits the range of representable real numbers. For example, the FP16 type has 5-bit exponent with a nominal range of &lt;code&gt;[0, 1, ... 2^5-1] = [0, 1, ... 31]&lt;/code&gt;. However, the exponent value &lt;code&gt;E = 31&lt;/code&gt; is reserved for &lt;code&gt;NaN&lt;/code&gt; (if the mantissa &lt;code&gt;M != 0&lt;/code&gt;) and &lt;code&gt;infinity&lt;/code&gt; (if the mantissa &lt;code&gt;M = 0&lt;/code&gt;). Therefore, the largest exponent value that can represent a real number is &lt;code&gt;E = 30&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;The following table summarizes low-precision types commonly used in modern AI/ML workloads:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Width&lt;/cell&gt;
        &lt;cell role="head"&gt;Shorthand&lt;/cell&gt;
        &lt;cell role="head"&gt;Exp. bias&lt;/cell&gt;
        &lt;cell role="head"&gt;Range&lt;/cell&gt;
        &lt;cell role="head"&gt;Zero&lt;/cell&gt;
        &lt;cell role="head"&gt;NaN&lt;/cell&gt;
        &lt;cell role="head"&gt;Infinity&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;16-Bit&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;E5M10 (FP16)&lt;/cell&gt;
        &lt;cell&gt;15&lt;/cell&gt;
        &lt;cell&gt;±65504&lt;/cell&gt;
        &lt;cell&gt;S 00000 0000000000&lt;/cell&gt;
        &lt;cell&gt;S 11111 xxxxxxxxxx&lt;/cell&gt;
        &lt;cell&gt;S 11111 0000000000&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;E8M7 (BF16)&lt;/cell&gt;
        &lt;cell&gt;127&lt;/cell&gt;
        &lt;cell&gt;±3.3895 * 10^38&lt;/cell&gt;
        &lt;cell&gt;S 00000000 0000000&lt;/cell&gt;
        &lt;cell&gt;S 11111111 xxxxxxx&lt;/cell&gt;
        &lt;cell&gt;S 11111111 0000000&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;8-Bit&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;E4M3FN (FP8, OCP)&lt;/cell&gt;
        &lt;cell&gt;7&lt;/cell&gt;
        &lt;cell&gt;±448&lt;/cell&gt;
        &lt;cell&gt;S 0000 000&lt;/cell&gt;
        &lt;cell&gt;S 1111 111&lt;/cell&gt;
        &lt;cell&gt;n/a&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;E4M3FNUZ (FP8)&lt;/cell&gt;
        &lt;cell&gt;8&lt;/cell&gt;
        &lt;cell&gt;±240&lt;/cell&gt;
        &lt;cell&gt;0 0000 000&lt;/cell&gt;
        &lt;cell&gt;1 0000 000&lt;/cell&gt;
        &lt;cell&gt;n/a&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;E5M2 (BF8, OCP)&lt;/cell&gt;
        &lt;cell&gt;15&lt;/cell&gt;
        &lt;cell&gt;±57344&lt;/cell&gt;
        &lt;cell&gt;S 00000 00&lt;/cell&gt;
        &lt;cell&gt;S 11111 {01, 10 11}&lt;/cell&gt;
        &lt;cell&gt;S 11111 00&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;E5M2FNUZ (BF8)&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;±57344&lt;/cell&gt;
        &lt;cell&gt;0 00000 00&lt;/cell&gt;
        &lt;cell&gt;S 00000 00&lt;/cell&gt;
        &lt;cell&gt;n/a&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;E8M0&lt;/cell&gt;
        &lt;cell&gt;127&lt;/cell&gt;
        &lt;cell&gt;2^(±127)&lt;/cell&gt;
        &lt;cell&gt;n/a&lt;/cell&gt;
        &lt;cell&gt;11111111&lt;/cell&gt;
        &lt;cell&gt;n/a&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;6-Bit&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;E2M3&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;±7.5&lt;/cell&gt;
        &lt;cell&gt;S 00 000&lt;/cell&gt;
        &lt;cell&gt;n/a&lt;/cell&gt;
        &lt;cell&gt;n/a&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;E3M2 (BF6)&lt;/cell&gt;
        &lt;cell&gt;3&lt;/cell&gt;
        &lt;cell&gt;±28&lt;/cell&gt;
        &lt;cell&gt;S 000 00&lt;/cell&gt;
        &lt;cell&gt;n/a&lt;/cell&gt;
        &lt;cell&gt;n/a&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;4-Bit&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;E2M1 (FP4)&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;±6&lt;/cell&gt;
        &lt;cell&gt;S 00 0&lt;/cell&gt;
        &lt;cell&gt;n/a&lt;/cell&gt;
        &lt;cell&gt;n/a&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Please note that the E4M3 type has two variants: E4M3FN and E4M3FNUZ. Both E4M3FN and E4M3FNUZ use 4 bits for the exponent and 3 bits for the mantissa. They use different exponent biases and differ in the special values they can represent. Neither variant supports infinities, which is why their notations include FN (FiNite). However, E4M3FN supports &lt;code&gt;+0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;code&gt;+NaN&lt;/code&gt; and &lt;code&gt;-Nan&lt;/code&gt;, while E4M3FNUZ supports only &lt;code&gt;+0&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;, hence &lt;code&gt;UZ&lt;/code&gt; (Unsigned Zero). The image below demonstrates how to convert a binary sequence into a real value, using E4M3FNUZ type as an example:&lt;/p&gt;
    &lt;p&gt;Figure 3: E4M3FNUZ encoding details.&lt;/p&gt;
    &lt;p&gt;FP8 types are divided into E4M3 and E5M2 formats. The E5M2 format is sometimes referred to as BF8, similar to BF16, where exponent width is larger compared to FP16. Similar to E4M3, E5M2 is further subdivided into two variants: E5M2 (OCP) and E5M2FNUZ. The AMD CDNA™3 architecture uses FNUZ variants for both E4M3 and E5M2, whereas the CDNA™4 architecture uses E4M3FN and E5M2 (OCP) variants. E4M3FN and E5M2 are standardized formats defined by the Open Compute Project (OCP). For detailed specifications, see the OCP Microscaling Formats (MX) Specification and the ONNX documentation. For visualization of FP8 values and their binary representations please refer to the FP8 Data table. Additionally, see the chapter “Low-precision floating-point types” in the AMD ROCm™ documentation for details on using low-precision types in HIP.&lt;/p&gt;
    &lt;p&gt;There is a special 8-bit format, E8M0, which is not used as a standard element data type but instead serves as a scale factor for microscaling types and block-scaled MFMA operations (discussed later in this article). Its value is calculated according to the equation below:&lt;/p&gt;
    &lt;p&gt;Figure 4: E8M0 encoding details.&lt;/p&gt;
    &lt;p&gt;The exponent value &lt;code&gt;E = 255&lt;/code&gt; is reserved for &lt;code&gt;NaN&lt;/code&gt; values, limiting the range of representable real numbers to &lt;code&gt;[2^-127 ... 2^127]&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Similar to FP8, FP6 has two formats: E2M3 and E3M2. The latter, E3M2, is often referred to as BF6 due to its larger exponent width compared to E2M3.&lt;/p&gt;
    &lt;head rend="h2"&gt;3. Matrix fused-multiply-add (MFMA) Instructions&lt;/head&gt;
    &lt;p&gt;The AMD CDNA™3 and CDNA™4 architectures support a variety of MFMA operations, which are characterized by the matrix dimensions &lt;code&gt;M&lt;/code&gt;, &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;K&lt;/code&gt; and the data type of input/output matrices. The following table lists all available floating-point MFMA instructions for the AMD CDNA™3 and CDNA™4 architectures. As can be seen from the table, the AMD CDNA™4 architecture extends the set of available MFMA instructions by adding new FP16/BF16 instructions with larger matrix dimensions. Furthermore, it introduces FP6/FP4 data types and provides a completely new set of FP8/FP6/FP4 instructions where the types can be independently used for the matrices &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;. Finally, the AMD CDNA™4 architecture enables MFMA with block exponent scaling.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Type (C,D) ← (A,B)&lt;/cell&gt;
        &lt;cell role="head"&gt;MxNxK (CDNA™3)&lt;/cell&gt;
        &lt;cell role="head"&gt;MxNxK (CDNA™4)&lt;/cell&gt;
        &lt;cell role="head"&gt;Cycles&lt;/cell&gt;
        &lt;cell role="head"&gt;Note&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;FP64 ← FP64&lt;/cell&gt;
        &lt;cell&gt;16x16x4&lt;/cell&gt;
        &lt;cell&gt;16x16x4&lt;/cell&gt;
        &lt;cell&gt;64&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;FP32 ← FP32&lt;/cell&gt;
        &lt;cell&gt;32x32x2&lt;/cell&gt;
        &lt;cell&gt;32x32x2&lt;/cell&gt;
        &lt;cell&gt;64&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;16x16x4&lt;/cell&gt;
        &lt;cell&gt;16x16x4&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;FP32 ← FP16 (BF16)&lt;/cell&gt;
        &lt;cell&gt;32x32x8&lt;/cell&gt;
        &lt;cell&gt;32x32x8&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
        &lt;cell&gt;Both A and B are either FP16 or BF16&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;16x16x16&lt;/cell&gt;
        &lt;cell&gt;16x16x16&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;16x16x32&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;32x32x16&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;FP32 ← FP8&lt;/cell&gt;
        &lt;cell&gt;16x16x32&lt;/cell&gt;
        &lt;cell&gt;16x16x32&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;FP8 (E4M3) or BF8 (E5M2) can be used independently for A and B&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;32x32x16&lt;/cell&gt;
        &lt;cell&gt;32x32x16&lt;/cell&gt;
        &lt;cell&gt;32&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;FP32 ← FP8/FP6/FP4&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;16x16x128&lt;/cell&gt;
        &lt;cell&gt;16 or 32&lt;/cell&gt;
        &lt;cell&gt;FP4, FP6 or FP8 can be used independently for A and B. Larger cycle count if either matrix A or B is FP8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;32x32x64&lt;/cell&gt;
        &lt;cell&gt;32 or 64&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;FP32 ← MXFP8/MXFP6/MXFP4&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;16x16x128&lt;/cell&gt;
        &lt;cell&gt;16 or 32&lt;/cell&gt;
        &lt;cell&gt;FP4, FP6 or FP8 can be used independently for A and B. Larger cycle count if either matrix A or B is FP8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;32x32x64&lt;/cell&gt;
        &lt;cell&gt;32 or 64&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Please note that the table lists only floating-point type MFMA instructions with batch size = 1. In addition to them, the AMD CDNA™3 and CDNA™4 architectures support batched MFMA operations, where multiple output matrices are computed in parallel. These instructions are not covered in this article. See the Chapter 7 “Matrix Arithmetic Instructions” in the AMD CDNA™3 and AMD CDNA™4 ISA reference guides for the full list of available MFMA instructions.&lt;/p&gt;
    &lt;p&gt;The table above specifies cycle count for each MFMA operation. Given a known cycle count, one can estimate theoretical peak performance in TFLOP/s of corresponding MFMA operation using the formula below:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;
2*M*N*K * num_matrix_cores * (max_engine_clock / cycle_count) / 10^6,
&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;where&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;code&gt;num_matrix_cores&lt;/code&gt;is total number of matrix cores in a GPU (specified in white paper)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;max_engine_clock&lt;/code&gt;is max engine clock (peak) in MHz (specified in white paper)&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;cycle_count&lt;/code&gt;is cycle count of corresponding MFMA instruction&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;M, N, K&lt;/code&gt;are matrix dimensions&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Using this formula and the MFMA instruction &lt;code&gt;32x32x8 FP16&lt;/code&gt; as an example, we can estimate theoretical peak FP16 Matrix Core performance on the AMD Instinct™ MI325X:&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;2*32*32*8 * 1216 * (2100 / 32) / 10^6 = 1307.4 TFLOP/s&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;4. Compiler Intrinsics&lt;/head&gt;
    &lt;p&gt;To use Matrix Core instructions in HIP kernels, LLVM provides built-in compiler intrinsic functions. The list of all available compiler intrinsics can be found in the LLVM Github repository. The syntax of the MFMA intrinsics has the following format:&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;d_reg = __builtin_amdgcn_mfma_ODType_MxNxKInDType(a_reg, b_reg, c_reg, cbsz, abid, blgp)&lt;/code&gt;,&lt;/p&gt;
    &lt;p&gt;where&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;code&gt;MxNxK&lt;/code&gt;specifies the shapes of the matrices&lt;code&gt;A&lt;/code&gt;,&lt;code&gt;B&lt;/code&gt;,&lt;code&gt;C&lt;/code&gt;,&lt;code&gt;D&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;ODType&lt;/code&gt;is data type of the matrices&lt;code&gt;C&lt;/code&gt;and&lt;code&gt;D&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;InDType&lt;/code&gt;is data type of the input matrices&lt;code&gt;A&lt;/code&gt;and&lt;code&gt;B&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;a_reg&lt;/code&gt;is a scalar/vector containing a portion of the matrix&lt;code&gt;A&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;b_reg&lt;/code&gt;is a scalar/vector containing a portion of the matrix&lt;code&gt;B&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;c_reg&lt;/code&gt;is a vector containing a portion of the matrix&lt;code&gt;C&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;d_reg&lt;/code&gt;is a vector containing a portion of the matrix&lt;code&gt;D&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;cbsz&lt;/code&gt;,&lt;code&gt;abid&lt;/code&gt;,&lt;code&gt;blgp&lt;/code&gt;are broadcast flags. For the following discussion, these flags are irrelevant and are, therefore, set to 0 by default, unless specified otherwise. Please refer to the ISA reference guide for detailed information on the broadcast flags.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For example,&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;code&gt;__builtin_amdgcn_mfma_f32_16x16x16f16&lt;/code&gt;performs&lt;code&gt;16x16x16&lt;/code&gt;MFMA, where both input matrices&lt;code&gt;A&lt;/code&gt;and&lt;code&gt;B&lt;/code&gt;have type&lt;code&gt;FP16&lt;/code&gt;and the output matrix has type&lt;code&gt;FP32&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;__builtin_amdgcn_mfma_f32_32x32x16_fp8_fp8&lt;/code&gt;performs&lt;code&gt;32x32x16&lt;/code&gt;MFMA, where both input matrices&lt;code&gt;A&lt;/code&gt;and&lt;code&gt;B&lt;/code&gt;have type&lt;code&gt;FP8(E4M3)&lt;/code&gt;and the output matrix is stored in&lt;code&gt;FP32&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;__builtin_amdgcn_mfma_f32_32x32x16_fp8_bf8&lt;/code&gt;performs&lt;code&gt;32x32x16&lt;/code&gt;MFMA, where the matrix&lt;code&gt;A&lt;/code&gt;has type&lt;code&gt;FP8(E4M3)&lt;/code&gt;and the matrix&lt;code&gt;B&lt;/code&gt;has type&lt;code&gt;BF8(E5M2)&lt;/code&gt;.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The MFMA instructions are wavefront-level (warp-level) instructions, where all work-items (threads) within a wavefront collectively perform a single MFMA operation and the operands &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; are distributed across work-items so that each work-item in the wavefront holds a portion of the operands. In order to use the MFMA instructions, it’s required to understand how the operands are distributed across threads within a wavefront. The ISA reference guide fully specifies the data layout for all available MFMA instructions. For illustrative purposes, the next chapter explains a subset of the MFMA instructions and the corresponding data layouts.&lt;/p&gt;
    &lt;head rend="h2"&gt;5. Examples&lt;/head&gt;
    &lt;quote&gt;&lt;p&gt;Important note: In the following discussion we assume the matrices are stored in row-major order. The wavefront size on the AMD CDNA™ architecture is 64. The shapes of the matrices&lt;/p&gt;&lt;code&gt;A&lt;/code&gt;,&lt;code&gt;B&lt;/code&gt;,&lt;code&gt;C&lt;/code&gt;,&lt;code&gt;D&lt;/code&gt;are&lt;code&gt;MxK&lt;/code&gt;,&lt;code&gt;KxN&lt;/code&gt;,&lt;code&gt;MxN&lt;/code&gt;, and&lt;code&gt;MxN&lt;/code&gt;, respectively. The first dimension denotes the number of rows and the second dimension the number of columns in a matrix. For example, the matrix&lt;code&gt;A&lt;/code&gt;has&lt;code&gt;M&lt;/code&gt;rows and&lt;code&gt;K&lt;/code&gt;columns.&lt;/quote&gt;
    &lt;head rend="h3"&gt;5.1. __builtin_amdgcn_mfma_f32_32x32x2f32&lt;/head&gt;
    &lt;p&gt;In this example we will multiply matrix &lt;code&gt;A&lt;/code&gt; of size &lt;code&gt;32x2&lt;/code&gt; with matrix &lt;code&gt;B&lt;/code&gt; of size &lt;code&gt;2x32&lt;/code&gt; using single wavefront (64 threads) and single MFMA instruction. The output matrix &lt;code&gt;C&lt;/code&gt; has shape &lt;code&gt;32x32&lt;/code&gt;. The input and output matrices are FP32. Since threads within a wavefront collectively perform single MFMA instruction, the operands are distributed across the threads. Each thread stores&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;code&gt;M * K / wavefront_size = 32 * 2 / 64 = 1&lt;/code&gt;entries of the matrix&lt;code&gt;A&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;K * N / wavefront_size = 2 * 32 / 64 = 1&lt;/code&gt;entries of the matrix&lt;code&gt;B&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;M * N / wavefront_size = 32 * 32 / 64 = 16&lt;/code&gt;entries of the matrix&lt;code&gt;C&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The operands are distributed according to the scheme below. The matrix elements highlighted in light red are those stored by the thread with index &lt;code&gt;0&lt;/code&gt; within the wavefront.&lt;/p&gt;
    &lt;p&gt;Figure 5: Data layout for `__builtin_amdgcn_mfma_f32_32x32x2f32`. The operands are stored in row-major order.&lt;/p&gt;
    &lt;p&gt;The code example below demonstrates how this operation can be implemented as a HIP kernel:&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;hip/hip_runtime.h&amp;gt;

using fp32x16_t = __attribute__((vector_size(16 * sizeof(float)))) float;

__global__ void
mfma_fp32_32x32x2_fp32(const float* A, const float* B, float* C) {
    float a_reg;
    float b_reg;
    fp32x16_t c_reg {};

    const float* ldg_a_ptr = A + threadIdx.x / 32 + 2 * (threadIdx.x % 32);
    const float* ldg_b_ptr = B + threadIdx.x % 32 + (threadIdx.x / 32) * 32;

    a_reg = *ldg_a_ptr;
    b_reg = *ldg_b_ptr;

    c_reg = __builtin_amdgcn_mfma_f32_32x32x2f32(a_reg, b_reg, c_reg, 0, 0, 0);

    for (int i = 0; i &amp;lt; 4; i++) {
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + i * 32 * 8]          = c_reg[i * 4];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 1 + i * 32 * 8] = c_reg[i * 4 + 1];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 2 + i * 32 * 8] = c_reg[i * 4 + 2];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 3 + i * 32 * 8] = c_reg[i * 4 + 3];
    }
}
&lt;/code&gt;
    &lt;p&gt;The GPU kernel can then be invoked on the host using a single wavefront:&lt;/p&gt;
    &lt;code&gt;mfma_fp32_32x32x2_fp32&amp;lt;&amp;lt;&amp;lt;1, 64&amp;gt;&amp;gt;&amp;gt;(A_device, B_device, C_device);
&lt;/code&gt;
    &lt;p&gt;Please note that we use the vector data type &lt;code&gt;fp32x16_t&lt;/code&gt; to store the entries of the matrix &lt;code&gt;C&lt;/code&gt; in registers. Additionally, we zero-initialize &lt;code&gt;c&lt;/code&gt;, since we compute &lt;code&gt;C = A * B&lt;/code&gt; without accumulation.&lt;/p&gt;
    &lt;head rend="h3"&gt;5.2. __builtin_amdgcn_mfma_f32_16x16x16f16&lt;/head&gt;
    &lt;p&gt;This example demonstrates how to multiply matrix &lt;code&gt;A&lt;/code&gt; of size &lt;code&gt;16x16&lt;/code&gt; with matrix &lt;code&gt;B&lt;/code&gt; of size &lt;code&gt;16x16&lt;/code&gt; using single wavefront (64 threads) and single MFMA instruction. The output matrix &lt;code&gt;C&lt;/code&gt; has shape &lt;code&gt;16x16&lt;/code&gt;. The input matrices are stored in FP16 and the output matrix stored in FP32. In this case, each thread stores &lt;code&gt;4&lt;/code&gt; entries of the matrix &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt; entries of the matrix &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; entries of the matrix &lt;code&gt;C&lt;/code&gt;. The data layout for this instruction is shown below. For illustrative purposes, the elements stored by the first thread within the wavefront are highlighted in red.&lt;/p&gt;
    &lt;p&gt;Figure 6: Data layout for __builtin_amdgcn_mfma_f32_16x16x16f16. The operands are stored in row-major order.&lt;/p&gt;
    &lt;p&gt;Corresponding HIP kernel is implemented below:&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;hip/hip_runtime.h&amp;gt;
#include &amp;lt;hip/hip_fp16.h&amp;gt;

using fp16_t = _Float16;
using fp16x4_t = __attribute__((vector_size(4 * sizeof(fp16_t)))) fp16_t;
using fp32x4_t = __attribute__((vector_size(4 * sizeof(float)))) float;

__global__ void
mfma_fp32_16x16x16_fp16(const fp16_t* A, const fp16_t* B, float* C) {

    fp16x4_t a_reg;
    fp16x4_t b_reg;
    fp32x4_t c_reg {};

    a_reg = *reinterpret_cast&amp;lt;const fp16x4_t*&amp;gt;(A + 4 * (threadIdx.x / 16) + 16 * (threadIdx.x % 16));

    for (int i = 0; i &amp;lt; 4; i++) {
        b_reg[i] = *(B + i * 16 + threadIdx.x % 16 + (threadIdx.x / 16) * 64);
    }

    c_reg = __builtin_amdgcn_mfma_f32_16x16x16f16(a_reg, b_reg, c_reg, 0, 0, 0);

    for (int i = 0; i &amp;lt; 4; i++) {
        *(C + i * 16 + threadIdx.x % 16 + (threadIdx.x / 16) * 64) = c_reg[i];
    }
}
&lt;/code&gt;
    &lt;p&gt;Please note that both &lt;code&gt;__half&lt;/code&gt; and &lt;code&gt;_Float16&lt;/code&gt; types can be used in device code. However, the host supports only &lt;code&gt;_Float16&lt;/code&gt; type for arithmetic operations. As in the previous example, we use vector data types to store the matrix elements in registers.&lt;/p&gt;
    &lt;head rend="h3"&gt;5.3. __builtin_amdgcn_mfma_f32_32x32x16_fp8_fp8&lt;/head&gt;
    &lt;p&gt;In this example we will multiply matrix &lt;code&gt;A&lt;/code&gt; of size &lt;code&gt;32x16&lt;/code&gt; with matrix &lt;code&gt;B&lt;/code&gt; of size &lt;code&gt;16x32&lt;/code&gt; using single wavefront (64 threads) and single MFMA instruction. The output matrix &lt;code&gt;C&lt;/code&gt; has shape &lt;code&gt;32x32&lt;/code&gt;. The input matrices are stored in FP8 and the output matrix is stored in FP32. In this scenario, each thread stores &lt;code&gt;8&lt;/code&gt; elements of the matrix &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;8&lt;/code&gt; elements of the matrix &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;16&lt;/code&gt; elements of the matrix &lt;code&gt;C&lt;/code&gt;. The operands are distributed according to the scheme below. For illustrative purposes, the elements stored by the first thread within the wavefront are highlighted in red.&lt;/p&gt;
    &lt;p&gt;Figure 7: Data layout for __builtin_amdgcn_mfma_f32_32x32x16_fp8_fp8. The operands are stored in row-major order.&lt;/p&gt;
    &lt;p&gt;The code example below implements this operation as a HIP kernel:&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;hip/hip_runtime.h&amp;gt;
#include &amp;lt;hip/hip_fp8.h&amp;gt;

using fp8_t = __hip_fp8_storage_t;
using fp8x8_t = __attribute__((vector_size(8 * sizeof(fp8_t)))) fp8_t;
using fp32x16_t = __attribute__((vector_size(16 * sizeof(float)))) float;

__global__ void
mfma_fp32_32x32x16_fp8_fp8(const fp8_t* A, const fp8_t* B, float* C) {
    fp8x8_t a_reg;
    fp8x8_t b_reg;
    fp32x16_t c_reg {};

    a_reg = *reinterpret_cast&amp;lt;const fp8x8_t*&amp;gt;(A + (threadIdx.x / 32) * 8 + (threadIdx.x % 32) * 16);

    for (int i = 0; i &amp;lt; 8; i++) {
        b_reg[i] = *(B + i * 32 + threadIdx.x % 32 + (threadIdx.x / 32) * 8 * 32);
    }

    c_reg = __builtin_amdgcn_mfma_f32_32x32x16_fp8_fp8((long)a_reg, (long)b_reg, c_reg, 0, 0, 0);

    for (int i = 0; i &amp;lt; 4; i++) {
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + i * 32 * 8]          = c_reg[i * 4];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 1 + i * 32 * 8] = c_reg[i * 4 + 1];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 2 + i * 32 * 8] = c_reg[i * 4 + 2];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 3 + i * 32 * 8] = c_reg[i * 4 + 3];
    }
}
&lt;/code&gt;
    &lt;p&gt;To define FP8, we use &lt;code&gt;__hip_fp8_storage_t&lt;/code&gt; type from &lt;code&gt;hip_fp8.h&lt;/code&gt;. Note that the intrinsic function expects its first two operands to be of type &lt;code&gt;long&lt;/code&gt;. To compile the code, the operands &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are, therefore, converted to &lt;code&gt;long&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h3"&gt;5.4. __builtin_amdgcn_mfma_scale_f32_32x32x64_f8f8&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;Important note: the MFMA instruction discussed in this example is supported only on AMD CDNA™4 GPUs (gfx950). Please make sure to install AMD ROCm™ version 7.0 or later.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The AMD CDNA™4 architecture introduces a new family of MFMA instructions with block exponent scaling. The syntax of these instructions differs from the classic MFMA compiler intrinsics:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;d_reg = __builtin_amdgcn_mfma_scale_f32_MxNxK_f8f6f4(a_reg, b_reg, c_reg, Atype, Btype, OPSEL_A, scale_a, OPSEL_B, scale_b)&lt;/code&gt;
    &lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;code&gt;MxNxK&lt;/code&gt;specifies shapes of the matrices&lt;code&gt;A&lt;/code&gt;,&lt;code&gt;B&lt;/code&gt;,&lt;code&gt;C&lt;/code&gt;,&lt;code&gt;D&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;a_reg&lt;/code&gt;is a vector containing elements of the matrix&lt;code&gt;A&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;b_reg&lt;/code&gt;is a vector containing elements of the matrix&lt;code&gt;B&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;c_reg&lt;/code&gt;is a vector containing elements of the matrix&lt;code&gt;C&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;d_reg&lt;/code&gt;is a vector containing elements of the matrix&lt;code&gt;D&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;Atype&lt;/code&gt;is an integer that specifies the data type of the matrix&lt;code&gt;A&lt;/code&gt;. The following values are possible:&lt;code&gt;0 = E4M3 (fp8), 1 = E5M2(bf8), 2 = E2M3(fp6), 3 = E3M2(bf6), 4 = E2M1(fp4)&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;Btype&lt;/code&gt;is an integer that specifies the data type of the matrix&lt;code&gt;B&lt;/code&gt;. The following values are possible:&lt;code&gt;0 = E4M3 (fp8), 1 = E5M2(bf8), 2 = E2M3(fp6), 3 = E3M2(bf6), 4 = E2M1(fp4)&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;OPSEL_A&lt;/code&gt;,&lt;code&gt;OPSEL_B&lt;/code&gt;are OPSEL codes. These arguments are not relevant for the discussion and therefore will be set to&lt;code&gt;0&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;scale_a&lt;/code&gt;,&lt;code&gt;scale_b&lt;/code&gt;are scalars / vectors containing scale factors of type&lt;code&gt;E8M0&lt;/code&gt;.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As an example, let’s take a closer look at the instruction &lt;code&gt;__builtin_amdgcn_mfma_scale_f32_32x32x64_f8f6f4&lt;/code&gt;. The inputs to this instruction are&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Matrix &lt;code&gt;A&lt;/code&gt;of size&lt;code&gt;32x64&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Matrix &lt;code&gt;Ax&lt;/code&gt;of size&lt;code&gt;32x2&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Matrix &lt;code&gt;B&lt;/code&gt;of size&lt;code&gt;64x32&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Matrix &lt;code&gt;Bx&lt;/code&gt;of size&lt;code&gt;2x32&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The output matrix &lt;code&gt;C&lt;/code&gt; has shape &lt;code&gt;32x32&lt;/code&gt;. Specifically, this instruction performs the following operation using single wavefront (64 threads):&lt;/p&gt;
    &lt;p&gt;Figure 8: Block-scaled matrix multiplication via __builtin_amdgcn_mfma_scale_f32_32x32x64_f8f6f4.&lt;/p&gt;
    &lt;p&gt;During dot product operations, the scales &lt;code&gt;Ax&lt;/code&gt;, &lt;code&gt;Bx&lt;/code&gt; are applied after the normal dot product and prior to output/accumulation.&lt;/p&gt;
    &lt;p&gt;In this example, we will multiply two FP8 matrices using the &lt;code&gt;__builtin_amdgcn_mfma_scale_f32_32x32x64_f8f6f4&lt;/code&gt; intrinsic function. The input matrices &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; are stored in FP8 format, while the output matrix is stored in FP32. The scale matrices &lt;code&gt;Ax&lt;/code&gt;, &lt;code&gt;Bx&lt;/code&gt; contain elements of type &lt;code&gt;E8M0&lt;/code&gt;. Each thread stores &lt;code&gt;32&lt;/code&gt; entries from the matrix &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; entry from the matrix &lt;code&gt;Ax&lt;/code&gt;, &lt;code&gt;32&lt;/code&gt; entries from the matrix &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; entry from the matrix &lt;code&gt;Bx&lt;/code&gt; and &lt;code&gt;16&lt;/code&gt; entries from the matrix &lt;code&gt;C&lt;/code&gt;. The operands are distributed according to the scheme below. Please note that this scheme is valid only if both input matrices &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; have FP8 type. For illustrative purposes, the matrix elements stored by the thread with &lt;code&gt;threadIdx.x = 0&lt;/code&gt; are highlighted in light red, while the elements stored by the thread with &lt;code&gt;threadIdx.x = 32&lt;/code&gt; within the wavefront are highlighted in light green.&lt;/p&gt;
    &lt;p&gt;Figure 9: Data layout for __builtin_amdgcn_mfma_scale_f32_32x32x64_f8f6f4 with FP8 input matrices. The operands are stored in row-major order.&lt;/p&gt;
    &lt;p&gt;The following code example shows how this operation can be implemented as a HIP kernel:&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;hip/hip_runtime.h&amp;gt;
#include &amp;lt;hip/hip_ext_ocp.h&amp;gt;

using fp8_t = __amd_fp8_storage_t;
using fp8x32_t = __attribute__((vector_size(32 * sizeof(fp8_t)))) fp8_t;
using fp32x16_t = __attribute__((vector_size(16 * sizeof(float)))) float;

__global__ void
mfma_fp32_32x32x64_fp8_fp8(const fp8_t* A, const fp8_t* B, float* C) {
    fp8x32_t a_reg;
    fp8x32_t b_reg;
    fp32x16_t c_reg {};

    const fp8_t* ldg_a = A + (threadIdx.x % 32) * 64 + (threadIdx.x / 32) * 16;
    for (int i=0; i &amp;lt; 2; i++) {
        for (int j=0; j &amp;lt; 16; j++) {
            a_reg[i*16 + j] = *(ldg_a + i * 32 + j);
        }
    }

    const fp8_t* ldg_b = B + threadIdx.x % 32 + 32 * 16 * (threadIdx.x / 32);

    for (int i=0; i&amp;lt;2; i++) {
        for (int j=0; j &amp;lt; 16; j++) {
            b_reg[i*16 + j] = *(ldg_b + 32 * j + i * 32 * 32);
        }
    }

    uint8_t scale_a = 127;
    uint8_t scale_b = 127;

    c_reg = __builtin_amdgcn_mfma_scale_f32_32x32x64_f8f6f4(a_reg, b_reg, c_reg, 0, 0, 0, scale_a, 0, scale_b);

    for (int i = 0; i &amp;lt; 4; i++) {
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + i * 32 * 8]          = c_reg[i * 4];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 1 + i * 32 * 8] = c_reg[i * 4 + 1];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 2 + i * 32 * 8] = c_reg[i * 4 + 2];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 3 + i * 32 * 8] = c_reg[i * 4 + 3];
    }
}
&lt;/code&gt;
    &lt;p&gt;Please note that in this example we use &lt;code&gt;__amd_fp8_storage_t&lt;/code&gt; type defined in &lt;code&gt;hip_ext_ocp.h&lt;/code&gt; to represent FP8. This library provides extensions APIs for low-precision and micro-scaling formats, and compared to &lt;code&gt;hip_fp8.h&lt;/code&gt;, exposes a wider capability set. &lt;code&gt;gfx950&lt;/code&gt; provides hardware acceleration for these APIs. Most of the APIs are 1 to 1 mapping of hardware instruction. Additionally, we use &lt;code&gt;uint8_t&lt;/code&gt; type to represent &lt;code&gt;E8M0&lt;/code&gt; scale factors. Since &lt;code&gt;scale_a&lt;/code&gt; and &lt;code&gt;scale_b&lt;/code&gt; encode exponent values, the corresponding actual scale factors are &lt;code&gt;2^(scale_a - 127)&lt;/code&gt; and &lt;code&gt;2^(scale_b - 127)&lt;/code&gt;. If &lt;code&gt;scale_a = scale_b = 127&lt;/code&gt;, the actual scale factors are equal to &lt;code&gt;1&lt;/code&gt; and no scaling is applied.&lt;/p&gt;
    &lt;head rend="h3"&gt;5.5. __builtin_amdgcn_mfma_scale_f32_32x32x64_f4f4&lt;/head&gt;
    &lt;p&gt;In our last example, we demonstrate how to multiply two FP4 matrices using the &lt;code&gt;__builtin_amdgcn_mfma_scale_f32_32x32x64_f8f6f4&lt;/code&gt; intrinsic function. As in the previous example, each thread stores &lt;code&gt;32&lt;/code&gt; entries from the matrix &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; entry from the matrix &lt;code&gt;Ax&lt;/code&gt;, &lt;code&gt;32&lt;/code&gt; entries from the matrix &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; entry from the matrix &lt;code&gt;Bx&lt;/code&gt; and &lt;code&gt;16&lt;/code&gt; entries from the matrix &lt;code&gt;C&lt;/code&gt;. The data layout for the output matrix remains the same as in the FP8 case. However, the data layout for the input matrices is different and depicted below. For illustrative purposes, the matrix elements stored by the thread with &lt;code&gt;threadIdx.x = 0&lt;/code&gt; are highlighted in light red, while the elements stored by the thread with &lt;code&gt;threadIdx.x = 32&lt;/code&gt; within the wavefront are highlighted in light green.&lt;/p&gt;
    &lt;p&gt;Figure 10: Data layout for __builtin_amdgcn_mfma_scale_f32_32x32x64_f8f6f4 with FP4 input matrices. The operands are stored in row-major order.&lt;/p&gt;
    &lt;p&gt;The code snippet below demonstrates how to implement this operation as a HIP kernel:&lt;/p&gt;
    &lt;code&gt;#include &amp;lt;hip/hip_runtime.h&amp;gt;
#include &amp;lt;hip/hip_ext_ocp.h&amp;gt;

using fp4x2_t = __amd_fp4x2_storage_t;
using fp4x64_t  = fp4x2_t __attribute__((ext_vector_type(32)));
using fp32x16_t = __attribute__((vector_size(16 * sizeof(float)))) float;

__global__ void
mfma_fp32_32x32x64_fp4_fp4(const fp4x2_t* A, const fp4x2_t* B, float* C) {

    fp4x64_t a_reg {};
    fp4x64_t b_reg {};
    fp32x16_t c_reg {};

    const fp4x2_t* ldg_a = A + (threadIdx.x % 32) * 32 + (threadIdx.x / 32) * 16;

    for (int i = 0; i &amp;lt; 16; i++) {
        a_reg[i] = *(ldg_a + i);
    }

    const fp4x2_t* ldg_b = B + (threadIdx.x % 32) / 2 + 16 * 32 * (threadIdx.x / 32);
    int b_extract_idx = threadIdx.x % 2;

    for (int i = 0; i &amp;lt; 16; i++) {
        uint8_t tmp0 = __amd_extract_fp4(*(ldg_b + 16 * 2 * i), b_extract_idx);
        uint8_t tmp1 = __amd_extract_fp4(*(ldg_b + 16 * (2 * i + 1)), b_extract_idx);
        b_reg[i] = __amd_create_fp4x2(tmp0, tmp1);
    }

    uint8_t scale_a = 127;
    uint8_t scale_b = 127;

    c_reg = __builtin_amdgcn_mfma_scale_f32_32x32x64_f8f6f4(a_reg, b_reg, c_reg, 4, 4, 0, scale_a, 0, scale_b);

    for (int i = 0; i &amp;lt; 4; i++) {
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + i * 32 * 8]          = c_reg[i * 4];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 1 + i * 32 * 8] = c_reg[i * 4 + 1];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 2 + i * 32 * 8] = c_reg[i * 4 + 2];
        C[threadIdx.x % 32 + (threadIdx.x / 32) * 4 * 32 + 32 * 3 + i * 32 * 8] = c_reg[i * 4 + 3];
    }
}
&lt;/code&gt;
    &lt;p&gt;Since memory addressing is not allowed at a granularity smaller than 8 bits, we use &lt;code&gt;__amd_fp4x2_storage_t&lt;/code&gt; (an alias for &lt;code&gt;uint8_t&lt;/code&gt;) to store the input matrices and enable pointer operations. Note that the FP4 elements that need to be loaded from the matrix &lt;code&gt;B&lt;/code&gt; are not contiguous in memory. To extract a single FP4 element, we use the &lt;code&gt;__amd_extract_fp4&lt;/code&gt; function provided in &lt;code&gt;hip_ext_ocp.h&lt;/code&gt;. This function returns one FP4 element (of type &lt;code&gt;uint8_t&lt;/code&gt;) from a fp4x2 vector, based on the index passed as the second argument:&lt;/p&gt;
    &lt;code&gt;uint8_t __amd_extract_fp4(const __amd_fp4x2_storage_t x, const size_t index) {
    if (index == 0) return (x &amp;amp; 0xFu);
    return (x &amp;gt;&amp;gt; 4);
}
&lt;/code&gt;
    &lt;p&gt;Two FP4 values are then combined into &lt;code&gt;__amd_fp4x2_storage_t&lt;/code&gt; using &lt;code&gt;__amd_create_fp4x2&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;__amd_fp4x2_storage_t __amd_create_fp4x2(const uint8_t x, const uint8_t y) {
    __amd_fp4x2_storage_t ret = 0;
    ret = x | (y &amp;lt;&amp;lt; 4);
    return ret;
}
&lt;/code&gt;
    &lt;p&gt;The compiler intrinsic function &lt;code&gt;__builtin_amdgcn_mfma_scale_f32_32x32x64_f8f6f4&lt;/code&gt; requires its first two arguments to be 256 bits wide. Since 32 FP4 elements occupy only 128 bits, we define &lt;code&gt;fp4x64_t&lt;/code&gt;, which is 256 bits wide. In this type, 128 bits contain data, while the remaining 128 bits are zero. This allows us to pass &lt;code&gt;a_reg&lt;/code&gt; and &lt;code&gt;b_reg&lt;/code&gt; to the intrinsic function and compile the code successfully.&lt;/p&gt;
    &lt;head rend="h2"&gt;Summary&lt;/head&gt;
    &lt;p&gt;In this article, we introduced Matrix Core instructions available on the AMD CDNA™3 and CDNA™4 architectures. We covered floating-point formats in detail, including modern low-precision element data types such as FP8, FP6, FP4, and the scale data type E8M0. We further explained how the floating-point types are represented as binary sequences and demonstrated, with concrete examples, how to convert their binary representations into real values. Next, we listed Matrix Core instructions supported by the modern CDNA™ architectures and discussed how to calculate the theoretical peak performance of Matrix Cores for specific MFMA instructions. To make the discussion more practical, we reviewed the compiler intrinsic functions that allow users to program Matrix Cores inside HIP kernels. Finally, we examined a subset of MFMA instructions in detail, providing code examples and illustrations to explain data layout and demonstrate how to implement simple mixed-precision MFMA operations in HIP. For additional information on Matrix Cores and low-precision data types, please refer to the following resources:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45476821</guid><pubDate>Sat, 04 Oct 2025 21:22:11 +0000</pubDate></item><item><title>XiangShan Vector Floating-Point Unit Design</title><link>https://docs.xiangshan.cc/projects/design/en/latest/backend/VFPU/</link><description>&lt;doc fingerprint="4631822b103a94a4"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;VFPU&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Version: V2R2&lt;/item&gt;
      &lt;item&gt;Status: OK&lt;/item&gt;
      &lt;item&gt;Date: 2025/01/20&lt;/item&gt;
      &lt;item&gt;commit：xxx&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Glossary of Terms&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Abbreviation&lt;/cell&gt;
        &lt;cell role="head"&gt;Full name&lt;/cell&gt;
        &lt;cell role="head"&gt;Descrption&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;VFPU&lt;/cell&gt;
        &lt;cell&gt;Vector Floating-Point Unit&lt;/cell&gt;
        &lt;cell&gt;Vector Floating-Point Functional Unit&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;IQ&lt;/cell&gt;
        &lt;cell&gt;Issue Queue&lt;/cell&gt;
        &lt;cell&gt;Issue Queue&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h2"&gt;Design specifications&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Support Vector Floating-Point Mul Calculation&lt;/item&gt;
      &lt;item&gt;Support vector floating-point FMA computation&lt;/item&gt;
      &lt;item&gt;Support Vector Floating-Point Div Calculation&lt;/item&gt;
      &lt;item&gt;Support for vector floating-point Sqrt computation&lt;/item&gt;
      &lt;item&gt;Supports fp32, fp64, fp16 computation&lt;/item&gt;
      &lt;item&gt;Supports computation of RV-V1.0 version vector floating-point instructions&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Function&lt;/head&gt;
    &lt;p&gt;The VFPU module receives uop information issued from the Issue Queue and performs vector floating-point instruction calculations based on fuType and fuOpType information. It mainly consists of four modules: VFAlu, VFMA, VFDivSqrt, and VFCvt.&lt;/p&gt;
    &lt;p&gt;VFAlu is primarily responsible for fadd-related instructions and some other simple instructions, such as comparison instructions and sign injection instructions. Notably, the reduction sum instruction is also computed in this module by splitting into micro-operations (uops).&lt;/p&gt;
    &lt;p&gt;VFMA is primarily responsible for multiplication and multiply-add related instructions.&lt;/p&gt;
    &lt;p&gt;VFDivSqrt is primarily responsible for instructions related to division and square root.&lt;/p&gt;
    &lt;p&gt;VFCvt is primarily responsible for format conversion and reciprocal estimation-related instructions.&lt;/p&gt;
    &lt;head rend="h2"&gt;Algorithm design&lt;/head&gt;
    &lt;p&gt;The challenge of the vector floating-point unit lies in supporting multiple single-precision format calculations (where the floating-point formats of operands and results are the same) and mixed-precision calculations (where the floating-point formats of operands and results differ). Taking common formats such as half-precision (\(f16\)), single-precision (\(f32\)), and double-precision (\(f64\)) as examples, the differences between scalar and vector floating-point units are compared.&lt;/p&gt;
    &lt;p&gt;Taking a typical floating-point addition as an example, for a scalar floating-point unit, it only needs to support calculations in three single-precision formats. The input operands and output results of this unit should all be \(64\)-bit, meaning it must support calculations in three formats:&lt;/p&gt;
    &lt;p&gt;(1) One \(f64 = f64 + f64\);&lt;/p&gt;
    &lt;p&gt;(2) \(1\) \(f32 = f32 + f32\);&lt;/p&gt;
    &lt;p&gt;(3) \(1\) \(f16 = f16 + f16\).&lt;/p&gt;
    &lt;p&gt;At first glance, three modules seem necessary to handle these three formats. However, since floating-point numbers consist of a sign bit, exponent, and mantissa, and higher-precision floating-point numbers have wider exponent and mantissa bit widths than lower-precision ones, the hardware design for higher-precision floating-point numbers can fully meet the requirements of lower-precision floating-point calculations. With slight modifications, adding \(Mux\) (multiplexers) to the hardware can enable compatibility with multiple single-precision formats, with only a marginal increase in area.&lt;/p&gt;
    &lt;p&gt;The vector floating-point unit needs to support vector operations, which are characterized by high data bandwidth utilization. For example, although the interface of a scalar arithmetic unit is 64-bit, when computing f32/f16, the effective data is only 32/16 bits, reducing bandwidth utilization to 50%/25%. The vector arithmetic unit also has a 64-bit interface, but when computing single-precision formats f32/f16, it can perform 2/4 sets of operations simultaneously, maintaining 100% bandwidth utilization. The supported single-precision format computations are as follows:&lt;/p&gt;
    &lt;p&gt;(1) One \(f64 = f64 + f64\);&lt;/p&gt;
    &lt;p&gt;(2) 2 \(f32 = f32 + f32\);&lt;/p&gt;
    &lt;p&gt;(3) \(4\) \(f16 = f16 + f16\).&lt;/p&gt;
    &lt;p&gt;Performing multiple sets of floating-point additions with the same format simultaneously makes hardware design more challenging than scalar operations, but it also allows the reuse of high-precision format hardware for low-precision formats. Additionally, a key feature that vector floating-point units must support is mixed-precision computation. The \(RISC-V\) vector instruction set extension defines a series of \(widening\) instructions requiring mixed-precision computation, mandating that floating-point addition units also support the following four computation formats:&lt;/p&gt;
    &lt;p&gt;(1) \(1\) \(f64 = f64 + f32\);&lt;/p&gt;
    &lt;p&gt;(2) One \(f64 = f32 + f32\);&lt;/p&gt;
    &lt;p&gt;(3) Two \(f32 = f32 + f16\);&lt;/p&gt;
    &lt;p&gt;(4) Two \(f32 = f16 + f16\).&lt;/p&gt;
    &lt;p&gt;The design difficulty of mixed-precision computation is much greater than that of multiple single-precision formats. On one hand, operands of different data formats need to be converted to the same format as the result before computation, increasing logical complexity. On the other hand, format conversion imposes significant pressure on circuit timing, especially when converting low-precision denormal numbers to high-precision floating-point numbers. Therefore, this paper specifically designs a fast data format conversion algorithm to address the timing issue.&lt;/p&gt;
    &lt;p&gt;In summary, the design challenges of the vector floating-point unit lie in the implementation of multiple single-precision formats and mixed-precision formats. This section will introduce the vector floating-point addition algorithm, floating-point sequential accumulation algorithm, vector fused multiply-add algorithm, and vector floating-point division algorithm to address these challenges, achieving a high-performance vector floating-point unit with a frequency of up to \(3GHz\).&lt;/p&gt;
    &lt;head rend="h3"&gt;Vector Floating-Point Addition&lt;/head&gt;
    &lt;p&gt;Floating-point addition is one of the most commonly used arithmetic operations in scientific computing. Although conceptually simple, the traditional single-path floating-point addition algorithm requires two to three signed addition steps, which is a relatively time-consuming operation. The dual-path floating-point addition algorithm has only one signed addition operation on the critical path in the worst case, thus offering significant speed advantages over the single-path algorithm. Based on the dual-path floating-point addition algorithm, this paper designs an even faster improved dual-path floating-point addition algorithm. This section first introduces the single-path floating-point addition algorithm, the dual-path floating-point addition algorithm, and the improved dual-path floating-point addition algorithm for single-precision format, and finally presents the vector floating-point addition algorithm.&lt;/p&gt;
    &lt;p&gt;The floating-point addition formula is expressed as: \(fp\_result = fp\_a + fp\_b\). When \(fp\_a\) and \(fp\_b\) have the same sign, the significands are aligned and added, which is referred to as equivalent addition. When \(fp\_a\) and \(fp\_b\) have opposite signs, the significands are aligned and subtracted, which is referred to as equivalent subtraction. For denormal numbers, the exponent is \(0\), and for normalized numbers, the exponent is \(1\), but the corresponding normalized exponent is the same. Therefore, when calculating the exponent difference, an exponent of \(0\) should be treated as \(1\) (referred to as the normalized exponent). The absolute difference between the normalized exponents is the normalized exponent difference.&lt;/p&gt;
    &lt;head rend="h4"&gt;Single-path floating-point addition algorithm&lt;/head&gt;
    &lt;p&gt;The traditional single-path floating-point addition operation is illustrated as follows, consisting of the following steps:&lt;/p&gt;
    &lt;p&gt;(1) Normalized exponent subtraction (ES): Calculate the difference between normalized exponents, d = |Ea - Eb|, where Ea and Eb are both normalized exponents.&lt;/p&gt;
    &lt;p&gt;(2) Alignment (\(Align\)): Shift the significand of the smaller operand right by \(d\) bits. The larger exponent is denoted as \(Ef\).&lt;/p&gt;
    &lt;p&gt;(3) Significand addition (\(SA\)): Performs addition or subtraction based on the effective operation \(Eo\), which is the arithmetic operation executed by the adder in the floating-point addition unit, determined by the sign bits of the two floating-point operands.&lt;/p&gt;
    &lt;p&gt;(4) Conversion (\(Conv\)): If the significand addition result is negative, convert the result to sign-magnitude representation. The conversion is completed through an addition step, with the result denoted as \(Sf\).&lt;/p&gt;
    &lt;p&gt;(5) Leading zero detection (LZD): Calculates the required left or right shift amount, expressed as \(En\), where right shift is positive and left shift is negative.&lt;/p&gt;
    &lt;p&gt;(6) Normalization (\(Norm\)): Normalize the significand by shifting \(En\) bits and add \(En\) to \(Ef\).&lt;/p&gt;
    &lt;p&gt;(7) Rounding (\(Round\)): Round according to the \(IEEE\)-\(754\) standard, adding \(1\) to the \(LSB\) of \(Sf\) if necessary. This step may cause overflow, requiring the mantissa result to be right-shifted by one bit while incrementing the exponent \(Ef\) by \(1\).&lt;/p&gt;
    &lt;head rend="h4"&gt;Dual-path floating-point addition algorithm&lt;/head&gt;
    &lt;p&gt;The above single-path floating-point algorithm is slow because the steps in the addition operation are essentially executed serially. This algorithm can be improved in the following ways:&lt;/p&gt;
    &lt;p&gt;(1) In the single-path floating-point addition algorithm, the \(Conv\) step is only needed when the result is negative, and it can be avoided by swapping the significands of the two operands. By checking the sign of the \(ES\) step result, the significands can be swapped (\(Swap\)) accordingly, always computing the larger significand minus the smaller one. When exponents are equal, the result may still be negative, requiring conversion, but no rounding is needed in this case. Thus, the swap step makes rounding and conversion mutually exclusive, allowing them to be parallelized. Note that another advantage of swapping is that only one shifter is required.&lt;/p&gt;
    &lt;p&gt;(2) The leading zero detection step can be executed in parallel with the significand addition step, removing it from the critical path. This optimization is particularly important in cases where subtraction requires significant left shifts.&lt;/p&gt;
    &lt;p&gt;(3) So far, the critical path steps have been reduced to: normalized exponent subtraction, swapping, alignment, significand addition \(||\) leading zero detection, conversion \(||\) rounding, normalization (where \(||\) denotes steps that can be executed in parallel). The alignment and normalization steps are mutually exclusive and can be further optimized. Normalization requires a large left shift only when \(d≤1\) or during equivalent subtraction. Conversely, alignment requires a large right shift only when \(d &amp;gt; 1\). By distinguishing these two cases, only one large shift—either alignment or normalization—remains on the critical path.&lt;/p&gt;
    &lt;p&gt;The steps for single-path and dual-path floating-point addition algorithms are shown in the table. In the dual-path algorithm, the preprocessing step (\(Pred\)) in the \(d ≤ 1\) path determines whether a right shift is needed to align significands based on the value of \(d\). The dual-path algorithm improves speed by executing more steps in parallel, requiring additional hardware for implementation.&lt;/p&gt;
    &lt;p&gt;Table: Steps for Two Floating-Point Addition Algorithms&lt;/p&gt;
    &lt;p&gt;+------------------+-----------------------------------------------------+ | Single-Path Floating-Point Addition | Dual-Path Floating-Point Addition Algorithm | | +-----------------------------+-----------------------+ | | \(d\leq1\) and Equivalent Subtraction | \(d&amp;gt;1\) or Equivalent Addition | +:================:+:===========================:+:=====================:+ | Normalized Exponent Addition | Preprocessing + Swap | Normalized Exponent Subtraction + Swap | +------------------+-----------------------------+-----------------------+ | Alignment | -- | Alignment | +------------------+-----------------------------+-----------------------+ | Significant Digit Addition | Significant Digit Addition or Leading Zero Detection | Significant Digit Addition | +------------------+-----------------------------+-----------------------+ | Conversion | Conversion or Rounding | Rounding | +------------------+-----------------------------+-----------------------+ | Leading Zero Detection | -- | -- | +------------------+-----------------------------+-----------------------+ | Normalization | Normalization | -- | +------------------+-----------------------------+-----------------------+ | Rounding | Path Selection | Path Selection | +------------------+-----------------------------+-----------------------+&lt;/p&gt;
    &lt;p&gt;In the dual-path floating-point addition algorithm, during the \(SA\) step in the case of equivalent subtraction, one of the significant digits is in 2's complement form. The complementation step and the rounding step are mutually exclusive, thus they can be performed in parallel. The optimized dual-path floating-point addition algorithm is shown in the table.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;\(d≤1\) and equivalent subtraction&lt;/cell&gt;
        &lt;cell role="head"&gt;\(d&amp;gt;1\) or equivalent addition&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Preprocessing + Exchange&lt;/cell&gt;
        &lt;cell&gt;Normalized Instruction Subtraction + Swap&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Significant Digit Addition Conversion&lt;/cell&gt;
        &lt;cell&gt;Rounding&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Normalization&lt;/cell&gt;
        &lt;cell&gt;Significand addition&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Selection Path&lt;/cell&gt;
        &lt;cell&gt;Selection Path&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;In the IEEE round-to-nearest (\(RTN\)) mode, computing \(A+B\) and \(A+B+1\) suffices to address all normalization possibilities (additional computation of \(A+B+2\) is required for rounding toward positive or negative infinity). By utilizing \(Cin\) to select the final rounded mantissa result from multiple sets of significand adder outputs, both two's complement conversion and rounding can be completed simultaneously, saving an addition step. Since floating-point addition may require normalization through a right shift by one bit, no shift, or a left shift (potentially as extensive as the significand's length), \(Cin\) must account for all these normalization possibilities to ensure the selected result is the rounded one.&lt;/p&gt;
    &lt;head rend="h4"&gt;Improved dual-path floating-point addition algorithm&lt;/head&gt;
    &lt;p&gt;This section details the improved dual-path floating-point addition algorithm proposed in this paper. The path for equivalent addition or equivalent subtraction with d &amp;gt; 1 is called the far path, while the path for equivalent subtraction with d ≤ 1 is called the close path. Cases involving infinity or NaN operands are handled separately and do not belong to the far or close paths.&lt;/p&gt;
    &lt;head rend="h5"&gt;\(far\) path&lt;/head&gt;
    &lt;p&gt;The \(far\) path algorithm is illustrated in the figure, with the main steps as follows:&lt;/p&gt;
    &lt;p&gt;Step 1: In the \(far\) path, when the exponent difference \(d\) is greater than \(1\), the smaller significand is shifted right by \(d\) bits to align with the larger significand. First, calculate the normalized exponent difference. To accelerate computation, two adders are used to compute the normalized exponent difference while comparing the magnitudes of \(Efp\_a\) and \(Efp\_b\). The correct normalized exponent difference is selected based on the comparison result of the exponent magnitudes.&lt;/p&gt;
    &lt;p&gt;In the second step, based on the exponent comparison from the first step, the significand of the operand with the larger exponent and the significand of the operand with the smaller exponent can be selected in parallel while also selecting the larger exponent \(EA\). For equivalent subtraction, \(EA\) is decremented by \(1\) (in this case, \(EA\) cannot be \(0\), as that would fall under the \(close\) path). This adjustment aims to align the value range of the significand after subtraction with that of equivalent addition, facilitating the selection of the final result. The adjusted significand addition or subtraction result falls within the range \([1\)-\(4)\), divided into two cases: \([1\)-\(2)\) and \([2\)-\(4)\).&lt;/p&gt;
    &lt;p&gt;Step three involves right-shifting the smaller significand, which is divided into two scenarios: during equivalent subtraction, the smaller significand is first inverted and then arithmetically right-shifted, saving some time compared to right-shifting first and then inverting; during equivalent addition, a logical right shift is directly applied. To reduce the number of shifter stages, when the high-order bits of the normalized exponent difference are all \(0\), the lower bits (the specific number depends on the significand width) are used for the right shift. If the high-order bits are not all \(0\), the right-shift result is \(0\). Here, the adder result from the first step, which calculates the normalized exponent difference between the two, is used, with the least significant bit applied first (since the adder result's least significant bit is obtained earliest). Specifically: if \(fp\_a\)'s exponent is larger, only \(fp\_b\)'s significand is right-shifted by the value of \(fp\_a\)'s normalized exponent minus \(fp\_b\)'s normalized exponent; if \(fp\_b\)'s exponent is larger, only \(fp\_a\)'s significand is right-shifted by the value of \(fp\_b\)'s normalized exponent minus \(fp\_a\)'s normalized exponent. The final right-shifted significand is then selected based on the exponent magnitude relationship and the normalized exponent difference, and the \(grs\) (\(guard\), \(round\), \(sticky\)) bits after the shift are calculated. To ensure correct rounding for the two scenarios in step two, two sets of \(grs\) need to be computed for the significand addition/subtraction results within \([1\)-\(2)\) and \([2\)-\(4)\).&lt;/p&gt;
    &lt;p&gt;Step 4: Perform significand addition. For equivalent subtraction, the smaller significand is inverted before right-shifting. Denote the larger significand as \(A\) and the right-shifted smaller significand as \(B\). Two adders compute \(A+B\) and \(A+B+2\), and the final rounded result is selected from these two adder outputs.&lt;/p&gt;
    &lt;p&gt;Step five: generate the final result. Depending on whether the significant digits \(A+B\) result falls within \([1\)-\(2)\) (case one) or \([2\)-\(4)\) (case two), and based on the two sets of \(grs\) and rounding modes calculated during the previous right shift, determine the conditions for selecting the two significant digit adders in case one and case two, respectively. Finally, use a one-hot four-way selection to choose the mantissa result. The exponent result is either \(EA\) (case one and mantissa rounded to \(&amp;lt;1\)) or \(EA+1\) (case two or case one rounded to \(=2\)). Note whether the exponent overflows after rounding, and the final result is selected between the overflow result and the normal computation result based on \(overflow\). The exception flags in the \(far\) path only produce overflow and inexact results.&lt;/p&gt;
    &lt;head rend="h5"&gt;\(close\) path&lt;/head&gt;
    &lt;p&gt;In the \(close\) path, it must be an effective subtraction with \(d \leq 1\), specifically categorized as \(d=0\) or \(d=1\). The algorithm is illustrated in the figure, with the following detailed steps:&lt;/p&gt;
    &lt;p&gt;Step 1: Perform four sets of significand subtractions in parallel. Based on \(d=0\) (\(fp\_a\) significand is larger, \(fp\_b\) significand is larger) and \(d=1\) (\(fp\_a\) normalized exponent is larger, \(fp\_b\) normalized exponent is larger), combine the four scenarios for effective subtraction. The first subtractor: \(fp\_a\) significand \(-\) \(fp\_b\) significand; the second subtractor: \(fp\_b\) significand \(-\) \(fp\_a\) significand; the third subtractor: \(fp\_a\) significand \(×2\) \(-\) \(fp\_b\) significand; the fourth subtractor: \(fp\_b\) significand \(×2\) \(-\) \(fp\_a\) significand. Simultaneously, calculate the \(grs\) bits based on the exponent magnitude relationship. When \(d=0\), all \(grs\) bits are \(0\); when \(d=1\), only \(g\) may be non-zero. These four sets of adders cannot produce all rounding results, so a fifth slower adder is added: the significand with the larger exponent \(–\) the significand with the smaller exponent shifted right by one bit.&lt;/p&gt;
    &lt;p&gt;Step two: Determine the four conditions for selecting the four sets of significand subtractions, based on the value of \(d\), the most significant bit of the adder result, \(grs\), and the rounding mode. After selecting the subtraction result from the four sets of adders, perform \(LZD\) \(+\) left shift on the subtraction result. Here, attention must be paid to the value of the larger exponent \(EA\). The left shift is controlled jointly by \(LZD\) and \(EA\), generating a \(mask\) value (with the same bit width as the subtraction result but with at most one bit set to \(1\)) based on the value of \(EA\). This \(mask\) is ORed with the subtraction result before performing \(LZD+\) left shift.&lt;/p&gt;
    &lt;p&gt;Step 3: Determine the condition for selecting the fifth subtractor. When selecting the result of the fifth subtractor, no left shift is required, so a slower adder is used, and the final mantissa result can then be selected.&lt;/p&gt;
    &lt;p&gt;Step four: exponent and sign bit results. The exponent result requires subtracting the \(LZD\) value from step two from \(EA\). If the fifth subtractor is selected as the mantissa result, the exponent remains unchanged. When \(d=1\), the sign bit is the sign of the operand with the larger exponent. When \(d=0\), the sign bit is selected based on the mantissa size. Note that when the result is \(0\) and rounded down, the sign bit is \(1\).&lt;/p&gt;
    &lt;head rend="h4"&gt;Vector floating-point addition algorithm&lt;/head&gt;
    &lt;p&gt;The vector floating-point adder's output signal width is \(64\) bits, supporting mixed precision and widening instructions. It must support calculations for the following data formats:&lt;/p&gt;
    &lt;p&gt;(1) \(1\) \(f64\) \(= f64 + f64\);&lt;/p&gt;
    &lt;p&gt;(2) \(1\) \(f64\) \(= f64 + f32\);&lt;/p&gt;
    &lt;p&gt;(3) 1 \(f64\) = \(f32\) + \(f32\);&lt;/p&gt;
    &lt;p&gt;(4) \(2\) \(f32\) values \(= f32 + f32\);&lt;/p&gt;
    &lt;p&gt;(5) \(2\) \(f32\) \(= f32 + f16\);&lt;/p&gt;
    &lt;p&gt;(6) Two \(f32\) \(= f16 + f16\);&lt;/p&gt;
    &lt;p&gt;(7) Four \(f16\) = \(f16 + f16\).&lt;/p&gt;
    &lt;head rend="h5"&gt;Module partitioning&lt;/head&gt;
    &lt;p&gt;The computation approach uses one module for the first three formats, all outputting 64-bit results. The single-precision floating-point adder for \(f64 = f64 + f64\) is reused to compute \(f64 = f64 + f32\) and \(f64 = f32 + f32\). This paper proposes a fast data format conversion algorithm to convert \(f32\) operands to \(f64\), enabling \(f64 = f64 + f64\) computation and yielding results in \(f64\) format.&lt;/p&gt;
    &lt;p&gt;The same approach is applied to computation formats where the output is \(f32\). Since \(f32\) has less timing pressure, integrating a \(f16 = f16 + f16\) operation into the module that computes \(f32\) results saves area while supporting:&lt;/p&gt;
    &lt;p&gt;(1) One \(f32 = f32 + f32\);&lt;/p&gt;
    &lt;p&gt;(2) One \(f32 = f32 + f16\);&lt;/p&gt;
    &lt;p&gt;(3) One \(f32 = f16 + f16\);&lt;/p&gt;
    &lt;p&gt;(4) One \(f16 = f16 + f16\).&lt;/p&gt;
    &lt;p&gt;Clearly, this module needs to be instantiated twice, and there are still two \(f16 = f16 + f16\) operations missing. Two single-precision floating-point adders dedicated to computing \(f16 = f16 + f16\) are instantiated separately, totaling four modules, to implement all vector addition calculation formats.&lt;/p&gt;
    &lt;head rend="h5"&gt;Fast format conversion algorithm&lt;/head&gt;
    &lt;p&gt;Taking the conversion from \(f16\) to \(f32\) as an example, a fast format conversion algorithm is introduced.&lt;/p&gt;
    &lt;p&gt;When \(f16\) is a normalized number, converting it to \(f32\) will also result in a normalized number. For \(f16\) exponents, they are biased to match \(f32\) exponents. Since \(f32\) has a larger exponent range, there is no concern about exponent overflow after conversion. Additionally, the \(f16\) significand is \(10\) bits, while the \(f32\) significand is \(23\) bits. Simply appending \(13\) zeros to the \(f16\) significand yields the \(f32\) significand. This is a conversion from lower to higher precision, ensuring the result is exact.&lt;/p&gt;
    &lt;p&gt;For a normalized \(f16\) exponent (5-bit width), the actual exponent \(Ereal = Ef16 – 15\). For a normalized \(f32\) exponent (8-bit width), \(Ereal = Ef32 – 127\). Thus, converting \(Ef16\) to \(Ef32\) via \(Ereal\): \(Ef16 – 15 = Ef32 – 127\), \(Ef32 = Ef16 – 15 + 127\), \(Ef32 = Ef16 + 112\). The 8-bit binary representation of \(112\) is \(01110000\). Computing \(Ef16 + 112\) requires an adder for a variable plus a constant, but this adder can be avoided by identifying the following pattern:&lt;/p&gt;
    &lt;p&gt;When the highest bit of \(Ef16\) is \(0\), \(Ef16 + 112 = (0111, Ef16(3, 0))\)&lt;/p&gt;
    &lt;p&gt;When the most significant bit of \(Ef16\) is \(1\), \(Ef16 + 112 = (1000, Ef16(3, 0))\).&lt;/p&gt;
    &lt;p&gt;Using this pattern, an \(Mux\) can quickly convert \(Ef16\) to \(Ef32\). Thus, for normalized \(f16\) to \(f32\) conversion, the exponent bits use an \(Mux\), the significand bits are padded with 0, and the sign bit remains unchanged. The challenge arises when \(f16\) is denormal. In this case, all exponent bits of \(f16\) are 0, and the number of leading zeros in the significand determines the exponent after conversion to \(f32\). When all exponent bits of \(f16\) are zero and only the \(lsb\) of the significand is 1, the converted \(f32\) exponent is minimized at \(-15-9=-24\), which still falls within the range of \(f32\) normalized numbers. Therefore, for denormal \(f16\), leading zero detection (\(lzd\)) and left shifting of the significand are required.&lt;/p&gt;
    &lt;p&gt;Chisel's built-in priority encoder can implement the \(lzd\) function. Tests show it synthesizes better than traditional \(lzd\) implementations using binary search. The syntax is: \(PriorityEncoder(Reverse(Cat(in,1.U)))\). For a \(5\)-bit \(in\), the generated Verilog code is as follows:&lt;/p&gt;
    &lt;code&gt;module LZDPriorityEncoder(
  input        clock,
  input        reset,
  input  [4:0] in,
  output [2:0] out
);
  wire [5:0] _out_T = {in,1'h1};
  wire [5:0] _out_T_15 = {_out_T[0],_out_T[1],_out_T[2],_out_T[3],_out_T[4],_out_T[5]};
  wire [2:0] _out_T_22 = _out_T_15[4] ? 3'h4 : 3'h5;
  wire [2:0] _out_T_23 = _out_T_15[3] ? 3'h3 : _out_T_22;
  wire [2:0] _out_T_24 = _out_T_15[2] ? 3'h2 : _out_T_23;
  wire [2:0] _out_T_25 = _out_T_15[1] ? 3'h1 : _out_T_24;
  assign out = _out_T_15[0] ? 3'h0 : _out_T_25;
endmodule
&lt;/code&gt;
    &lt;p&gt;Although this code appears to use many cascaded \(Mux\)es, the synthesizer produces good timing results for such code. Inspired by this, this paper designs a novel priority-based left-shift algorithm to accelerate \(lzd+\) left-shift, with the \(Chisel\) code as follows:&lt;/p&gt;
    &lt;code&gt;def shiftLeftPriorityWithF32EXPResult(srcValue: UInt, priorityShiftValue: UInt): UInt = {
  val width = srcValue.getWidth
  val lzdWidth = srcValue.getWidth.U.getWidth
  def do_shiftLeftPriority(srcValue: UInt, priorityShiftValue: UInt, i:Int): UInt = {
    if (i==0) Cat(
      Mux(
        priorityShiftValue(i),
        Cat(srcValue(0),0.U((width-1).W)),
        0.U(width.W)
      ),
      Mux(
        priorityShiftValue(i),
        "b01110000".U-(width-i-1).U(8.W),
        "b01110000".U-(width-i).U(8.W)
      )
    )
    else Mux(
      priorityShiftValue(i),
      if (i==width-1) Cat(srcValue(i,0),"b01110000".U-(width-i-1).U(8.W)) 
      else Cat(Cat(srcValue(i,0),0.U((width-1-i).W)), "b01110000".U-(width-i-1).U(8.W)),
      do_shiftLeftPriority(srcValue = srcValue, priorityShiftValue = priorityShiftValue, i = i - 1)
      )
    }
    do_shiftLeftPriority(srcValue = srcValue, priorityShiftValue = priorityShiftValue, i = width-1)
  }
&lt;/code&gt;
    &lt;p&gt;Both \(srcValue\) and \(priorityShiftValue\) pass the mantissa of \(f16\), starting from the most significant bit (MSB) of the mantissa. If the MSB is \(1\), the original value of \(srcValue\) is returned along with the corresponding exponent (the exponent is selected from multiple constants and depends on the position of the first \(1\) in the mantissa). If the MSB is \(0\), the next bit is checked for \(1\). If it is \(1\), \(srcValue\) is left-shifted by one bit and returned (no actual left shift is needed here since the high bits after shifting are not retained; truncation and zero-padding suffice), along with the corresponding exponent. This process continues iteratively. Thus, a priority left shifter simultaneously performs the \(lzd\) and left shift operations while also generating the corresponding \(Ef32\), eliminating the need to calculate the \(Ef32\) exponent based on \(lzd\). This enables a fast algorithm for converting \(f16\) denormal numbers to \(f32\). A similar algorithm is used for converting \(f32\) to \(f64\), which is not elaborated here.&lt;/p&gt;
    &lt;head rend="h3"&gt;Vector Floating-Point Fused Multiply-Add Algorithm&lt;/head&gt;
    &lt;p&gt;Floating-point fused multiply-add computation \(fpa × fp\_b + fp\_c\), where the intermediate multiplication \(fpa × fp\_b\) is performed as if without range and precision limitations, without rounding, and only rounded once to the target format at the end. FMA is typically implemented using a pipeline, with steps including multiplication, addition, normalization shift, and rounding. This chapter introduces the vector floating-point fused multiply-add algorithm, whose functionalities include:&lt;/p&gt;
    &lt;p&gt;(1) 1 \(fp64 = fp64 × fp64 + fp64\);&lt;/p&gt;
    &lt;p&gt;(2) \(2\) \(fp32 = fp32 × fp32 + fp32\);&lt;/p&gt;
    &lt;p&gt;(3) Four \(fp16 = fp16 × fp16 + fp16\);&lt;/p&gt;
    &lt;p&gt;(4) \(2\) \(fp32 = fp16 × fp16 + fp32\);&lt;/p&gt;
    &lt;p&gt;(5) \(1\) \(fp64 = fp32 × fp32 + fp64\).&lt;/p&gt;
    &lt;p&gt;(\(1\)) (\(2\)) (\(3\)) The source and destination operands are in the same floating-point format, while in (\(4\)) (\(5\)), the two multipliers have the same width, and the other addend and the result share the same width, which is twice that of the multipliers.&lt;/p&gt;
    &lt;head rend="h4"&gt;Scalar single-precision format algorithm&lt;/head&gt;
    &lt;p&gt;The computation flow first calculates the unrounded result of multiplying two floating-point numbers, then adds this unrounded product to a third number. The algorithm flowchart is illustrated, expressed by the formula \(fp\_result = fp\_a × fp\_b + fp\_c\), where \(Sa\), \(Sb\), and \(Sc\) are the significands of \(fp\_a\), \(fp\_b\), and \(fp\_c\) respectively, and \(Ea\), \(Eb\), and \(Ec\) are their exponents:&lt;/p&gt;
    &lt;p&gt;For ease of description below, some parameters are defined, with their meanings and values listed in the table:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Parameters&lt;/cell&gt;
        &lt;cell role="head"&gt;\(f16\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(f32\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(f64\)&lt;/cell&gt;
        &lt;cell role="head"&gt;Meaning&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;\(significandWidth\)&lt;/cell&gt;
        &lt;cell&gt;\(11\)&lt;/cell&gt;
        &lt;cell&gt;\(24\)&lt;/cell&gt;
        &lt;cell&gt;\(53\)&lt;/cell&gt;
        &lt;cell&gt;Significant Digit Width&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;\(exponentWidth\)&lt;/cell&gt;
        &lt;cell&gt;\(5\)&lt;/cell&gt;
        &lt;cell&gt;\(8\)&lt;/cell&gt;
        &lt;cell&gt;\(11\)&lt;/cell&gt;
        &lt;cell&gt;Exponent width&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;\(rshiftBasic\)&lt;/cell&gt;
        &lt;cell&gt;\(14\)&lt;/cell&gt;
        &lt;cell&gt;\(27\)&lt;/cell&gt;
        &lt;cell&gt;\(56\)&lt;/cell&gt;
        &lt;cell&gt;Number of right shifts required to align \(fp\_c\)'s significand with the product significand&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(rshiftMax\)&lt;/cell&gt;
        &lt;cell&gt;\(37\)&lt;/cell&gt;
        &lt;cell&gt;\(76\)&lt;/cell&gt;
        &lt;cell&gt;\(163\)&lt;/cell&gt;
        &lt;cell&gt;\(fp\_c\) maximum right shift count for significant digits (beyond this value, \(g\) and \(r\) are both \(0\))&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h5"&gt;Unsigned Integer Multiplication&lt;/head&gt;
    &lt;p&gt;The rule for multiplying two floating-point numbers is to multiply the sign bits, add the exponent bits (not simply added, as bias must be considered), and multiply the significands (including the implicit bit and mantissa bits). The significand multiplication is essentially fixed-point multiplication, which follows the same principle as unsigned integer multiplication.&lt;/p&gt;
    &lt;p&gt;Binary vertical multiplication is the original multiplication algorithm, where an \(n\)-bit \(C=A×B\) vertical method is illustrated. This process generates \(n\) partial products, which are then added with staggered alignment.&lt;/p&gt;
    &lt;p&gt;The multiplication algorithm using the vertical method has significant latency. Optimization efforts for multiplication operations primarily focus on two aspects: reducing the number of partial products (e.g., \(Booth\) encoding) and minimizing the latency introduced by adders (e.g., \(CSA\) compression).&lt;/p&gt;
    &lt;p&gt;When computing the multiplication of two floating-point numbers, their significands are multiplied. Since significands are unsigned, unsigned integer multiplication suffices for this computation. There are many algorithms for implementing unsigned integer multiplication, and three of them are compared below.&lt;/p&gt;
    &lt;p&gt;Method 1: Directly use the multiplication symbol \(×\), letting the synthesis tool decide.&lt;/p&gt;
    &lt;p&gt;Method two: Use a vertical multiplication method similar to manual decimal multiplication. Multiplying two \(n\)-bit numbers generates \(n\) partial products, which are then compressed using \(CSA\) (to be introduced later) into two numbers for addition.&lt;/p&gt;
    &lt;p&gt;Method 3: Use \(Booth\) encoding to generate \((n+1)/2\) rounded-up partial products, then compress them into two numbers for addition using \(CSA\).&lt;/p&gt;
    &lt;p&gt;The data in the table are the results of multiplying two 53-bit unsigned integers (for f64) using the TSMC 7nm process library. The target frequency is 3GHz, with a theoretical cycle time of 333.33ps. However, considering clock uncertainty and process corner variations, a design margin is reserved for the backend, leaving approximately 280ps per cycle. Therefore, it is evident that multiplication cannot be completed within one cycle. In practice, additional time is required to determine the implicit bit, making it even more impossible to achieve 53-bit multiplication in a single cycle. Although Method 1 has a smaller area and shorter latency, it cannot be pipelined, leaving only Methods 2 or 3 as viable options. Method 3 offers shorter latency and a smaller area compared to Method 2, making it the chosen implementation for unsigned integer multiplication.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Algorithm&lt;/cell&gt;
        &lt;cell role="head"&gt;Delay (\(ps\))&lt;/cell&gt;
        &lt;cell role="head"&gt;Area (\(um²\))&lt;/cell&gt;
        &lt;cell role="head"&gt;Pipelining feasibility&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Method one&lt;/cell&gt;
        &lt;cell&gt;\(285.15\)&lt;/cell&gt;
        &lt;cell&gt;\(1458.95\)&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Method two&lt;/cell&gt;
        &lt;cell&gt;\(320.41\)&lt;/cell&gt;
        &lt;cell&gt;\(2426.34\)&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Method three&lt;/cell&gt;
        &lt;cell&gt;\(302.19\)&lt;/cell&gt;
        &lt;cell&gt;\(2042.46\)&lt;/cell&gt;
        &lt;cell&gt;Yes&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h5"&gt;\(Booth\) encoding&lt;/head&gt;
    &lt;p&gt;The purpose of Booth encoding is to reduce the number of partial products in a multiplier. Taking the binary unsigned integer multiplication C=A*B as an example, the Booth encoding algorithm is derived.&lt;/p&gt;
    &lt;p&gt;The following expression is a general form of unsigned binary integers. To facilitate subsequent transformations, a \(0\) is added at both the beginning and the end, leaving its value unchanged.&lt;/p&gt;
    &lt;p&gt;After equivalent transformation, adjacent two bits of \(1\) cancel out to \(0\). For consecutive \(1\)s, the least significant \(1\) becomes \(-1\), and the bit above the most significant \(1\) changes from \(0\) to \(1\), with all \(1\)s turning to \(0\). This transformation is known as Booth transformation. It simplifies sequences of three or more consecutive \(1\)s, with greater simplification for longer sequences. However, this transformation does not optimize hardware circuits because it does not guarantee any partial product will always be \(0\). Therefore, modified Booth encoding is typically used in circuit design to effectively reduce the number of partial products.&lt;/p&gt;
    &lt;p&gt;Perform an equivalent transformation again, but this time with additional constraints on \(n\). Assuming \(n\) is odd, a zero is still appended at the end, increasing the length to an even number. Then, a zero is prepended at the highest bit, making the total length \(n+2\). This is done to facilitate subsequent derivations.&lt;/p&gt;
    &lt;p&gt;After equivalent transformation, it can be observed that the number of terms in the polynomial expression becomes \((n+1)/2\) (when \(n\) is odd). If \(n\) is even, a zero needs to be appended at the end, and two zeros are prepended before the most significant bit, making the number of terms \(n/2+1\) (when \(n\) is even). Combining both odd and even cases, the number of terms in the polynomial expression is the ceiling of \((n+1)/2\). Starting from the LSB of the original binary number, groups of three bits are formed (the first group's least significant bit requires an additional appended bit \(0\), and the most significant bit is padded with one \(0\) if \(n\) is odd or two \(0\)s if \(n\) is even, ensuring the padded length is odd). Adjacent groups overlap by one bit (the highest bit of the lower group overlaps with the lowest bit of the higher group), forming new polynomial factors. This is the improved Booth encoding method.&lt;/p&gt;
    &lt;p&gt;When multiplying two binary numbers, modified Booth encoding of the multiplier can halve the number of partial products. Let the multiplicand be \(A\) and the multiplier be \(B\), with \(B_{2i+1}\), \(B_{2i}\), and \(B_{2i-1}\) representing three consecutive bits of \(X\), where \(i\) is a natural number \(N\). \(PP_i\) denotes the partial product for each \(i\). After applying modified Booth transformation to \(B\) and multiplying by \(A\), the Booth encoding and \(PP\) truth table are as shown.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;\(B_{2i+1}\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(B_{2i}\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(B_{2i-1}\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(PP_i\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(A\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(A\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(2A\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(-2A\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(-A\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(-A\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;By evaluating each consecutive three-bit segment of the multiplier, the corresponding partial product is derived, halving the number of partial products. This approach treats the multiplier as a quaternary number, hence termed radix-4 Booth encoding. Multiplication using radix-4 Booth encoding offers significant optimization over traditional methods, is straightforward to implement, and meets most application requirements.&lt;/p&gt;
    &lt;p&gt;In \(Booth\) encoding, five types of partial products need to be calculated: \(0\), \(A\), \(2A\), \(-A\), \(-2A\). \(0\) and \(A\) require no computation, \(2A\) is obtained by a one-bit left shift, while \(-A\) and \(-2A\) require the operation of inversion plus one. This paper introduces a fast algorithm for handling inversion plus one.&lt;/p&gt;
    &lt;p&gt;To simplify the explanation of the principle, we assume computing \(f16\) with 11 significant bits, generating 6 partial products. Each partial product is 22 bits wide, as shown in the figure. The colored positions in the figure are 12 bits wide, representing \(A\) possibly multiplied by \(0\), \(1\), or \(2\). Since the last partial product's three-bit encoding is \(0\)xx, its value cannot be negative. Assuming all other partial products are negative, we invert and add one to each of them. The colored parts represent the results after inversion only. We place the added one for the current partial product into the corresponding position of the next partial product, ensuring the sum of partial products remains unchanged and avoiding the issue of a carry chain from adding one to the current partial product. The last partial product is non-negative and does not require this adjustment.&lt;/p&gt;
    &lt;p&gt;The \(1\) in the above figure can first be simplified through summation to obtain the result shown in the following figure.&lt;/p&gt;
    &lt;p&gt;If the actual partial product value is positive, the above result needs to be corrected by adding one to the bit position immediately to the left of the colored bit and setting the next partial product's tail addition to zero. As shown in the figure, \(Si\) (where \(i\) starts from \(0\)) represents the sign bit of the \(i\)-th partial product, transforming it into a general form where the colored position only computes \(0\), \(A\), \(2A\), \(\sim A\), or \(\sim 2A\), speeding up partial product generation.&lt;/p&gt;
    &lt;p&gt;One additional point to note is that the sum of partial products yields the multiplication result, but the summation of partial products may also generate carries. These carries are meaningless for multiplication, but they can cause erroneous carries when the product is added to a wider number. The correction method involves adding an extra bit to the most significant bit of the partial product, as illustrated.&lt;/p&gt;
    &lt;p&gt;This ensures that the carry is correct after summing all partial products. This concludes the introduction to Booth encoding. Note that the example uses an 11-bit multiplication. While \(f16\) and \(f64\) have an odd number of significant digits, \(f32\) has an even number, requiring slight differences in zero-padding the most significant bit. Other steps are similar and thus omitted.&lt;/p&gt;
    &lt;head rend="h5"&gt;\(CSA\) Compression&lt;/head&gt;
    &lt;p&gt;\(Carry\)-\(Save\)-\(Adder\) is a carry-save adder that compresses \(n\) addends into \(m\) addends ($m&lt;/p&gt;
    &lt;p&gt;Assuming the calculation of adding two binary numbers \(A+B\), the truth table for their sum and carry, where \(A[i]+B[i]\) is the decimal result and also the count of \(1\)s in \(A[i]\) and \(B[i]\):&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;\(A[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(B[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(A[i] + B[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(Sum[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(Car[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Simplified into the following logical expression:&lt;/p&gt;
    &lt;p&gt;\(Sum = A\) ^ \(B\)&lt;/p&gt;
    &lt;p&gt;\(Car = A\) &amp;amp; \(B\)&lt;/p&gt;
    &lt;p&gt;\(Result = A+B = Sum + (Car &amp;lt;&amp;lt; 1)\)&lt;/p&gt;
    &lt;p&gt;For three-number addition, the sum is the XOR of two numbers, and the carry occurs when both numbers are \(1\). \((Car &amp;lt;&amp;lt; 1)\) reflects that the current bit's carry propagates to the next bit. This derivation is for clarity; in practice, generating sum and carry from two addends does not accelerate addition.&lt;/p&gt;
    &lt;p&gt;Suppose we want to calculate the sum of three numbers \(A+B+C\), where the \(CSA\) key is to generate the sum and carry, as shown in the truth table:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;\(A[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(B[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(C[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(A[i] + B[i] + C[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(Sum[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(Car[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(3\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;From the above table, some patterns can be observed. The generation of \(Sum[i]\) and \(Car[i]\) actually depends only on the sum of \(A[i]+B[i]+C[i]\), i.e., the number of \(1\)s in \(A[i]\), \(B[i]\), and \(C[i]\). The simplified expression is as follows:&lt;/p&gt;
    &lt;p&gt;\(Sum = A\) ^ \(B\) ^ \(C\)&lt;/p&gt;
    &lt;p&gt;\(Car = (A\) &amp;amp; \(B) \quad | \quad (A\) &amp;amp; \(C) \quad | \quad (B\) &amp;amp; \(C)\)&lt;/p&gt;
    &lt;p&gt;\(Result = A+B+C = Sum + (Car &amp;lt;&amp;lt; 1)\)&lt;/p&gt;
    &lt;p&gt;For three-number addition, the sum is the XOR of the three numbers, and the carry occurs when at least two numbers are \(1\). \((Car &amp;lt;&amp;lt; 1)\) accounts for the current bit's carry propagating to the next bit. This method converts three-number addition into two-number addition with just two XOR gate delays, significantly saving time, especially for longer bit widths.&lt;/p&gt;
    &lt;p&gt;Adding four numbers is slightly more complex because when all four are \(1\), the sum is \(4\), requiring a carry of \(2\). We designate one carry as \(Cout\) and the other as \(Car\). The \(Cout\) generated from the current four-bit addition is passed to the next stage as \(Cin\). With \(Cin\) and the four numbers, the operation now involves five inputs: \(A[i]\), \(B[i]\), \(C[i]\), \(D[i]\), and \(Cin[i]\), producing three outputs: \(Sum[i]\), \(Cout[i]\), and \(Car[i]\). The least significant bit's \(Cin[0]\) is \(0\), while other bits' \(Cin[i]\) is the \(Cout[i-1]\) from the previous bit, as shown in the table.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;\(A[i]+B[i]+C[i]+D[i]+Cin[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(Sum[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(Cout[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(Car[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1/0\)&lt;/cell&gt;
        &lt;cell&gt;\(0/1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(3\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1/0\)&lt;/cell&gt;
        &lt;cell&gt;\(0/1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(4\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(5\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;There are many ways to simplify this truth table. One feasible method is described below. The value of \(Sum[i]\) can be easily derived as the XOR of the five inputs: \(Sum[i] = A[i]\)^\(B[i]\)^\(C[i]\)^\(D[i]\)^\(Cin[i]\). \(Car[i]\) and \(Cout[i]\) are more complex. We define \(Cout[i]\) to be generated only by the first three numbers, i.e., when the sum of the first three numbers is greater than \(1\), \(Cout[i] = 1\). The table shows the truth table for \(Cout[i]\):&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;\(A[i]+B[i]+C[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(Cout[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(3\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;\(Cout[i]\) can be expressed as: \(Cout[i] = (A[i]\)^\(B[i])?C[i]:A[i]\), while \(Car[i]\) is generated by \(D[i]\) and \(Cin[i]\), with the table showing the truth table for \(Car[i]\).&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;\(A[i]+B[i]+C[i]+D[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(Car[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(D[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(Cin[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;\(D[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(3\)&lt;/cell&gt;
        &lt;cell&gt;\(Cin[i]\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;\(Car[i]\) can be expressed as: \(Car[i] = (A[i]\) ^ \(B[i]\) ^ \(C[i]\) ^ \(D[i]) ? Cin[i] : D[i]\). Specifically, when \((A[i]\) ^ \(B[i]\) ^ \(C[i]\) ^ \(D[i]) = 1\), \(A[i]+B[i]+C[i]+D[i] = 1/3\), and \(Cin[i] = 1\) will generate a carry. When \((A[i]\) ^ \(B[i]\) ^ \(C[i]\) ^ \(D[i]) = 0\), \(A[i]+B[i]+C[i]+D[i] = 0/4\). Here, \(D[i] = 0\) indicates \(A[i]+B[i]+C[i]+D[i] = 0\), and adding \(Cin\) will not produce a carry, while \(D[i] = 1\) indicates \(A[i]+B[i]+C[i]+D[i] = 4\), and adding \(Cin\) will generate a carry. Based on the above derivation, the expression for \(CSA4\_2\) is as follows:&lt;/p&gt;
    &lt;p&gt;Sum[i] = A[i] ^ B[i] ^ C[i] ^ D[i] ^ Cin[i], Cin[i] = Cout[i-1], Cin[0] = 0&lt;/p&gt;
    &lt;p&gt;\(Cout[i] = (A[i]\) ^ \(B[i])?C[i]:A[i]\)&lt;/p&gt;
    &lt;p&gt;\(Car[i] = (A[i]\) ^ \(B[i]\) ^ \(C[i]\) ^ \(D[i])?Cin[i]:D[i]\)&lt;/p&gt;
    &lt;p&gt;\(Result = A+B+C+D = Sum + (Car &amp;lt;&amp;lt; 1)\)&lt;/p&gt;
    &lt;p&gt;Using the \(TSMC7nm\) process library, a comprehensive comparison of delay and area was conducted for different input XOR gates, \(CSA3\_2\), and \(CSA4\_2\). The synthesis results for different input XOR gates are shown in the table.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;\(106\) bits&lt;/cell&gt;
        &lt;cell role="head"&gt;Delay (\(ps\))&lt;/cell&gt;
        &lt;cell role="head"&gt;Area (\(um²\))&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(A\)^\(B\)&lt;/cell&gt;
        &lt;cell&gt;\(13.74\)&lt;/cell&gt;
        &lt;cell&gt;\(38.66880\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(A\)^\(B\)^\(C\)&lt;/cell&gt;
        &lt;cell&gt;\(23.01\)&lt;/cell&gt;
        &lt;cell&gt;\(63.09120\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(A\)^\(B\)^\(C\)^\(D\)&lt;/cell&gt;
        &lt;cell&gt;\(24.69\)&lt;/cell&gt;
        &lt;cell&gt;\(87.51360\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(A\)^\(B\)^\(C\)^\(D\)^\(E\)&lt;/cell&gt;
        &lt;cell&gt;\(37.21\)&lt;/cell&gt;
        &lt;cell&gt;\(99.72480\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The synthesis results of \(CSA3\_2\) and \(CSA4\_2\) are shown in the table.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;\(106\) bits&lt;/cell&gt;
        &lt;cell role="head"&gt;Delay (\(ps\))&lt;/cell&gt;
        &lt;cell role="head"&gt;Area (\(um²\))&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(CSA3\_2\)&lt;/cell&gt;
        &lt;cell&gt;\(23.23\)&lt;/cell&gt;
        &lt;cell&gt;\(104.42880\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(CSA4\_2\)&lt;/cell&gt;
        &lt;cell&gt;\(40.63\)&lt;/cell&gt;
        &lt;cell&gt;\(237.86881\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;It can be seen that although \(CSA4\_2\) theoretically has a delay of three XOR gates and \(CSA3\_2\) theoretically has a delay of two XOR gates, in actual physical implementation, \(CSA4\_2\) is only slightly faster than two levels of \(CSA3\_2\). Therefore, \(CSA3\_2\) should be used whenever possible, unless one level of \(CSA4\_2\) can replace two levels of \(CSA3\_2\), such as in \(4-&amp;gt;2\) compression or \(8-&amp;gt;2\) compression.&lt;/p&gt;
    &lt;head rend="h5"&gt;CSAn_2&lt;/head&gt;
    &lt;p&gt;For two unsigned integer multiplications using Booth encoding, the number of partial products is ceil((n+1)/2). To ensure correct carry propagation, the partial product bit width is extended by one bit. The number and bit width of partial products for each data format are listed in the table.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Data Format&lt;/cell&gt;
        &lt;cell role="head"&gt;Number of significant digits&lt;/cell&gt;
        &lt;cell role="head"&gt;Number of partial products&lt;/cell&gt;
        &lt;cell role="head"&gt;Partial product bit width&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(fp16\)&lt;/cell&gt;
        &lt;cell&gt;\(11\)&lt;/cell&gt;
        &lt;cell&gt;\(6\)&lt;/cell&gt;
        &lt;cell&gt;\(12\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(fp32\)&lt;/cell&gt;
        &lt;cell&gt;\(24\)&lt;/cell&gt;
        &lt;cell&gt;\(13\)&lt;/cell&gt;
        &lt;cell&gt;\(25\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(fp64\)&lt;/cell&gt;
        &lt;cell&gt;\(53\)&lt;/cell&gt;
        &lt;cell&gt;\(27\)&lt;/cell&gt;
        &lt;cell&gt;54&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Following the principle of prioritizing \(CSA3\_2\) unless one level of \(CSA4\_2\) can replace two levels of \(CSA3\_2\), the number of \(CSA3\_2\) and \(CSA4\_2\) stages used for each data format is listed in the table.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Data Format&lt;/cell&gt;
        &lt;cell role="head"&gt;Number of \(CSA3\_2\) Stages&lt;/cell&gt;
        &lt;cell role="head"&gt;\(CSA4\_2\) Stages&lt;/cell&gt;
        &lt;cell role="head"&gt;Process (\(-&amp;gt;\) denotes \(CSA3\_2\), \(--&amp;gt;\) denotes \(CSA4\_2\))&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(fp16\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(6-&amp;gt;4--&amp;gt;2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(fp32\)&lt;/cell&gt;
        &lt;cell&gt;\(3\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(13-&amp;gt;9-&amp;gt;6-&amp;gt;4--&amp;gt;2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(fp64\)&lt;/cell&gt;
        &lt;cell&gt;\(3\)&lt;/cell&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;\(27-&amp;gt;18-&amp;gt;12-&amp;gt;8--&amp;gt;4--&amp;gt;2\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h5"&gt;Exponent processing and right shift&lt;/head&gt;
    &lt;p&gt;Following conventional methods, if the exponent relationship between the product of \(fp\_a\) and \(fp\_b\) and the exponent of \(fp\_c\) is unknown, the smaller exponent must be right-shifted, similar to floating-point addition. This would require both the significand of the \(fp\_a\) and \(fp\_b\) product and the significand of \(fp\_c\) to potentially shift right, necessitating two shifters and increasing area. Additionally, waiting for the \(fp\_a\) and \(fp\_b\) product to be computed before right-shifting its significand increases circuit latency. An alternative algorithm avoids using two shifters and reduces latency by parallelizing the computation with the \(fp\_a\) and \(fp\_b\) product.&lt;/p&gt;
    &lt;p&gt;The exponent bits are treated as unsigned numbers, but there is an exponent bias between them and the actual exponent. Additionally, the \(denormal\) case must be considered. Let \(E\_fix\) denote the exponent bits after handling the \(denormal\) case, and \(E\_bit\) denote the original exponent bits. When all bits of \(E\_bit\) are 0, \(E\_fix = 1\); otherwise, \(E\_fix = E\_bit\).&lt;/p&gt;
    &lt;p&gt;In the above equation, the true exponent \(E\_real\) equals \(E\_fix\) minus a bias value \(bias\), where \(exponentWidth\) is the width of \(E\_bit\), and \(bias\) equals the value where the highest bit of \(E\_bit\) is \(0\) and all other bits are \(1\). Without considering the carry or borrow of the significand product, the true exponent result \(Eab\_real\) of multiplying \(fp\_a\) and \(fp\_b\) is given by:&lt;/p&gt;
    &lt;p&gt;The calculation formula for the binary exponent result \(Eab\_bit\) of the multiplication of \(fp\_a\) and \(fp\_b\) is shown below:&lt;/p&gt;
    &lt;p&gt;The operation of \(+\)&amp;amp; extends the result of \(Ea\_fix + Eb\_fix\) by one bit to retain the carry. The carry is preserved because a bias value will be subtracted later, and without retaining the carry, the result would be incorrect. Additionally, subtracting the bias might result in a negative value, so another bit is extended by appending a 0 at the highest bit. Finally, the bias \(bias\) is subtracted, yielding the binary exponent result \(Eab\_bit\) for the multiplication of \(fp\_a\) and \(fp\_b\) without considering the carry or borrow from the significand product. Then, we construct an exponent \(Eab\) with the following value:&lt;/p&gt;
    &lt;p&gt;Assuming the binary exponent result of multiplying \(fp\_a\) and \(fp\_b\) is \(Eab\), to ensure lossless precision when adding the significant digits of \(fp\_a \times fp\_b\) and \(fp\_c\), both addends are extended in width. The significant digits of \(fp\_c\) are extended to \(3 \times significandWidth + 4\), with the bit distribution shown in the figure. Here, \(g0\), \(r0\), \(g1\), and \(r1\) are used to preserve the \(guard\) and \(round\) bits during right-shifting:&lt;/p&gt;
    &lt;p&gt;As shown above, the significand of \(fp\_c\) is \(significandWidth+2\) bits wider than the product of the significands of \(fp\_a\) and \(fp\_b\). Since the product result has two digits before the decimal point, aligning it as \(1\).xxx requires \(significandWidth+3\) bits, which explains why \(rshiftBasic = significandWidth+3\).&lt;/p&gt;
    &lt;p&gt;Let \(fp\_c\_significand\_cat0 = Cat(fp\_c\_significand, 0.U(2 \times significandWidth + 4))\), where \(fp\_c\_significand\) is the significand of \(fp\_c\). If \(Ec\_fix = Eab = Eab\_bit + rshiftBasic.S\), \(fp\_c\_significand\_cat0\) is exactly \(significandWidth + 3\) larger than \(Eab\_bit\), so no right shift is needed for alignment. If \(Ec\_fix &amp;gt; Eab\), theoretically \(fp\_c\_significand\_cat0\) would require a left shift, but due to the presence of \(g0\) and \(g1\) as buffers and the fact that lower bits cannot generate carry (only affecting rounding), no actual left shift is needed. If \(Ec\_fix &amp;lt; Eab\), \(fp\_c\_significand\_cat0\) must be right-shifted by \(rshift\_value = Eab - Cat(0.U, Ec\_fix).asSInt\). Since \(rshift\_value\) is derived from the addition of multiple numbers, its LSB is computed first. Thus, during right-shifting, the LSB of \(rshift\_value\) is first used as the Mux select signal, followed by higher bits. The shifting process must compute \(guard\), \(round\), and \(sticky\) (collectively \(grs\)). For \(guard\) and \(round\), these positions are already preserved during bit-width extension, requiring no additional computation. For \(sticky\), two methods exist: (1) Extend the bit-width further to store shifted-out bits and compute \(sticky\) after all shifts, or (2) Compute \(sticky\) during shifting based on Mux select signals. Method 2 offers lower latency than Method 1. Below is the design code for Method 2:&lt;/p&gt;
    &lt;code&gt;/**
 * 使用Mux进行移位，先用最低位，输出位宽为srcValue + 1(Sticky)
 */
def shiftRightWithMuxSticky(srcValue: UInt, shiftValue: UInt): UInt = {
  val vecLength  = shiftValue.getWidth + 1
  val res_vec    = Wire(Vec(vecLength,UInt(srcValue.getWidth.W)))
  val sticky_vec = Wire(Vec(vecLength,UInt(1.W)))
  res_vec(0)    := srcValue
  sticky_vec(0) := 0.U
  for (i &amp;lt;- 0 until shiftValue.getWidth) {
    res_vec(i+1) := Mux(shiftValue(i), res_vec(i) &amp;gt;&amp;gt; (1&amp;lt;&amp;lt;i), res_vec(i))
    sticky_vec(i+1) := Mux(shiftValue(i), sticky_vec(i) | res_vec(i)((1&amp;lt;&amp;lt;i)-1,0).orR,
    sticky_vec(i))
  }
  Cat(res_vec(vecLength-1),sticky_vec(vecLength-1))
}
&lt;/code&gt;
    &lt;p&gt;There is another method to speed up the right shift. The bit width of \(rshift\_value\) is \(exponentWidth+1\), while the width of \(fp\_c\_significand\_cat0\) is \(3*significandWidth+4\). There may be overflow bits in \(rshift\_value\). For example, using a 5-bit number to right-shift a 7-bit number, \(a(6,0) &amp;gt;&amp;gt; b(4,0)\), the maximum value of the third bit in \(b\) is \(7\), which is sufficient for the bit width of \(a\). Therefore, if the upper two bits of \(b\) contain any non-zero value, the right-shift result of \(a\) will be zero. The right-shift result can be simplified to \(Mux(b(4,3).orR,0.U, a(6,0) &amp;gt;&amp;gt; b(2,0))\). The table below lists the bit widths of \(rshift\_value\) used for three floating-point data formats.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Data Format&lt;/cell&gt;
        &lt;cell role="head"&gt;\(fp\_c\_significand\_cat0\) bit width&lt;/cell&gt;
        &lt;cell role="head"&gt;Bit Width of \(rshift\_value\)&lt;/cell&gt;
        &lt;cell role="head"&gt;Bit width used&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(f16\)&lt;/cell&gt;
        &lt;cell&gt;\(37\)&lt;/cell&gt;
        &lt;cell&gt;\(6\)&lt;/cell&gt;
        &lt;cell&gt;\(6\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(f32\)&lt;/cell&gt;
        &lt;cell&gt;\(76\)&lt;/cell&gt;
        &lt;cell&gt;\(9\)&lt;/cell&gt;
        &lt;cell&gt;\(7\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(f64\)&lt;/cell&gt;
        &lt;cell&gt;\(163\)&lt;/cell&gt;
        &lt;cell&gt;\(12\)&lt;/cell&gt;
        &lt;cell&gt;\(8\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;There are three cases based on the value of \(rshift\_value\): \(rshift\_value &amp;lt;= 0\) means no right shift is needed, and the \(sticky\) result is \(0\); \(rshift\_value &amp;gt; rshiftMax\) means the right shift result is \(0\), and the \(sticky\) result is \(fp\_c\_significand\_cat0\) or reduced; \(0 &amp;lt; rshift\_value &amp;lt;= rshiftMax\) means the right shift result and \(sticky\) are calculated by \(shiftRightWithMuxSticky\).&lt;/p&gt;
    &lt;p&gt;Thus, this section has covered the methods for exponent processing, the design of the right shifter, and the handling of \(grs\) during the right-shift operation.&lt;/p&gt;
    &lt;head rend="h5"&gt;Significand addition&lt;/head&gt;
    &lt;p&gt;The \(rshift\_result\) of the significand of \(fp\_c\) after right-shifting must be added to the two results compressed by \(CSAn\_2\). Since the signs of \(fp\_c\) and \(fp\_a \times fp\_b\) may differ, subtraction is performed when they are opposite, and the result may be negative. To determine the sign, an additional sign bit is appended. \(fp\_c\_rshiftValue\_inv\) selects either \(rshift\_result\) (with a \(0\) sign bit) or its negation (with a \(1\) sign bit) based on whether the signs differ. Thus, \(fp\_c\_rshiftValue\_inv\) is added to the two results compressed by \(CSAn\_2\). However, during subtraction, \(fp\_c\_rshiftValue\_inv\) only negates \(rshift\_result\), and a \(+1\) is required at the least significant bit when all right-shifted \(grs\) bits are \(0\). This \(+1\) is placed in the \(carry\) bit of the two results compressed by \(CSAn\_2\), as the \(carry\) bit is always \(0\), saving adder usage and area. The three numbers have different bit widths: the right-shifted significand of \(fp\_c\) has a width of \(3 \times significandWidth + 4\), while the two results compressed by \(CSAn\_2\) have a width of \(2 \times significandWidth + 1\) (the \(+1\) accounts for the partial product extension to ensure correct carry). The strategy for summing these three numbers involves first compressing the lower \(2 \times significandWidth + 1\) bits of the \(CSAn\_2\) results and the lower \(2 \times significandWidth\) bits of \(rshift\_result\) (with a \(0\) appended to form \(2 \times significandWidth + 1\) bits) using \(CSA3\_2\) compression. The two compressed results are then summed, denoted as \(adder\_low\_bits\). Simultaneously, the higher \(significandWidth + 4\) bits of \(rshift\_result\) are incremented by \(1\). The final result selects either the higher \(significandWidth + 4\) bits of \(fp\_c\_rshiftValue\_inv\) or its incremented version based on whether the highest bit of the lower \(2 \times significandWidth + 1\) sum is \(1\), denoted as \(adder\_high\_bits\).&lt;/p&gt;
    &lt;p&gt;Additionally, consider the inversion and increment by one of the right-shifted \(grs\) during subtraction. The final significand addition result \(adder\) (including the right-shifted \(grs\)) consists of: \(adder\_high\_bits\), \(adder\_low\_bits\), and the right-shifted \(grs\) (inverted and incremented by one for subtraction). Since \(adder\) may be negative, an extra \(1\)-bit is extended solely for sign determination of \(adder\), which is later discarded. \(adder\_inv\) inverts \(adder\) when it is negative and removes this sign bit.&lt;/p&gt;
    &lt;head rend="h5"&gt;\(LZD\), left shift, rounded and unrounded mantissa results&lt;/head&gt;
    &lt;p&gt;After computing \(adder\_inv\), a leading-zero detection must be performed on \(adder\_inv\) to determine the number of left shifts required, thereby normalizing and rounding the mantissa result.&lt;/p&gt;
    &lt;p&gt;When performing LZD on \(adder\_inv\), there is an issue of exponent limitation. Let \(E\_greater\) be \(Eab\) (the exponent result from multiplying \(fp\_a\) and \(fp\_b\)). The left shift amount cannot exceed \(E\_greater\) because the exponent result would already be all zeros at that point. To address this, similar to the floating-point adder, a \(mask\) is used during left shift to limit the shift amount.&lt;/p&gt;
    &lt;p&gt;For cases where \(adder\) is negative, \(-adder\) should be the inversion of \(adder\) plus \(1\). Since adding \(1\) would create a long carry chain, only the inversion is performed, and then the \(LZD\) of \(adder\_inv\) is calculated. This may result in a one-bit deviation. When the inversion of \(adder\) ends with consecutive \(1\)s, adding \(1\) would cause a carry at the highest bit. To resolve this one-bit deviation, a trailing zero detection (\(TZD\)) is performed on \(adder\). If \(LZD + TZD\) equals the width of \(adder\), the inversion of \(adder\) ends with consecutive \(1\)s, requiring a correction to the left-shift result. After the left-shift correction, the unrounded result is obtained, and adding \(1\) to it yields the rounded result.&lt;/p&gt;
    &lt;head rend="h5"&gt;Final result&lt;/head&gt;
    &lt;p&gt;The sign bit result is determined based on the sign of \(adder\), while the calculation of \(grs\) requires combining both the right-shift process in step five and the left-shift process in step seven. The rounding strategy employs \(after \quad rounding\). To detect \(underflow\), an additional set of \(grs\) specifically for \(underflow\) checking is used. Based on the rounding mode and \(grs\), the necessity of rounding is determined, selecting the final mantissa result. The exponent result is derived according to the rounding outcome.&lt;/p&gt;
    &lt;p&gt;When input operands contain special values such as \(NaN\), infinity, or zero, the result is calculated separately. Depending on the actual input values, either the special result or the normal result is selected. Except for the divide-by-zero flag, all four other flag results can be generated.&lt;/p&gt;
    &lt;head rend="h4"&gt;Vector single-precision format algorithm&lt;/head&gt;
    &lt;p&gt;The main design principle for vector operations is to share hardware where timing requirements are met.&lt;/p&gt;
    &lt;p&gt;During Booth encoding, \(f16\) generates 6 partial products (pp), \(f32\) generates 13 pp, and \(f64\) generates 27 pp. Thus, the 27 pp positions generated by \(f64\) during Booth encoding can accommodate two sets of 13 pp from \(f32\), and similarly, the 13 pp positions from \(f32\) can hold two sets of 6 pp from \(f16\). This allows continued sharing of a single \(CSA\_27to2\) compression unit. The vector shared Booth encoding is illustrated in the figure.&lt;/p&gt;
    &lt;p&gt;During the right shift of the \(fp\_c\) mantissa, one of the right shifts for the mantissas in \(f64\) and \(f32\) can share a single shifter, while the other shifters remain independent.&lt;/p&gt;
    &lt;p&gt;The \(CSA\_3to2\) is also shared, with the third operand derived from the right-shifted result of the \(fp\_c\) mantissa. The right-shifted results of two \(f32\) or four \(f16\) mantissas are concatenated and then compressed with the two operands from the shared \(Booth\) encoding for \(3\_2\) compression.&lt;/p&gt;
    &lt;p&gt;The adder after compression is also shared. Different formats are assigned different bits, and the bits are separated to prevent low-bit carries from affecting high-bit results.&lt;/p&gt;
    &lt;p&gt;The shared logic for \(LZD\), \(TZD\), and the left shifter is similar to the right shifter, with \(f64\) and \(f32\) sharing one unit while others remain independent.&lt;/p&gt;
    &lt;head rend="h4"&gt;Vector Mixed-Precision Format Algorithm&lt;/head&gt;
    &lt;p&gt;There are two types of vector mixed-precision format calculations:&lt;/p&gt;
    &lt;p&gt;(1) \(2\) instances of \(fp32 = fp16 × fp16 + fp32\);&lt;/p&gt;
    &lt;p&gt;(2) One \(fp64 = fp32 × fp32 + fp64\).&lt;/p&gt;
    &lt;p&gt;For two multipliers of the same width, the essence is still adding exponents and multiplying significant bits. Unlike floating-point addition, there's no need to first convert their formats to match the result's format. Simply extending the bit width suffices—padding the exponent's high bits with zeros and the mantissa's low bits with zeros to align with high-precision floating-point operands. After alignment, computation proceeds according to the single-precision format.&lt;/p&gt;
    &lt;head rend="h3"&gt;Vector floating-point division algorithm&lt;/head&gt;
    &lt;p&gt;Division is one of the most representative floating-point functions in modern processors. There are two main algorithms for computing division in hardware: digit iteration algorithms based on subtraction with linear convergence, and multiplicative algorithms based on multiplication with quadratic convergence. The subtraction-based digit iteration algorithms are more energy-efficient and require less area. Subsequent references to digit iteration in this paper refer to subtraction-based digit iteration. For common floating-point precisions—double, single, and half—digit iteration methods are significantly faster. In digit iteration division, the most critical aspect is the selection of quotient bits, where each iteration yields one bit of the quotient. To implement a simple \(Radix-4\) selection function independent of the divisor, the divisor must be adjusted to a value sufficiently close to 1. This scaling is performed before digit iteration.&lt;/p&gt;
    &lt;p&gt;Digital iterative algorithms are widely used in high-performance processors due to their excellent trade-offs in performance, area, and power consumption. This paper is based on the \(SRT\) division (\(Sweeney-Robertson-Tocher Division\)), employing a \(Radix-64\) floating-point division algorithm that computes \(6\) quotient bits per cycle. To reduce overhead, each \(Radix-64\) iteration consists of three \(Radix-4\) iterations. Speculative algorithms are used between consecutive \(Radix-4\) iterations to reduce latency.&lt;/p&gt;
    &lt;head rend="h4"&gt;Scalar floating-point division algorithm&lt;/head&gt;
    &lt;p&gt;The \(Radix-64\) scalar floating-point division algorithm implemented in this paper has low latency for double-precision, single-precision, and half-precision floating-point division when both input operands and results are normalized numbers, with latencies of \(11\), \(6\), and \(4\) cycles, respectively, including scaling and rounding cycles. In cases where input operands or results include denormalized numbers, one or two additional normalization cycles are required.&lt;/p&gt;
    &lt;p&gt;The exponent result can be easily derived, with the focus being on the division of significands. The significand divider performs floating-point division of the dividend significand \(x\) by the divisor significand \(d\) to obtain the significand quotient \(q = x/d\). Both operands need to be normalized numbers, \(x, d ∈ [1, 2)\). Denormalized operands are also permitted, with normalization applied before the digital iteration. If both operands are normalized within \([1, 2)\), the result lies within \([0.5, 2)\). Thus, two bits to the right of the least significant bit (\(LSB\)) of the quotient are required for rounding, namely the guard bit and the rounding bit.&lt;/p&gt;
    &lt;p&gt;When the result is normalized, the guard bit is used for rounding, with \(q ∈ [1, 2)\). When the result is unnormalized, the rounding bit is used for rounding, with \(q ∈ [0.5, 1)\). In the latter case, the result is left-shifted by \(1\) bit, and the guard and rounding bits become the \(LSB\) and guard bit of the normalized result, respectively. To simplify rounding, the result is forced to \(q ∈ [1, 2)\). Note that \(q &amp;lt; 1\) only occurs when \(x &amp;lt; d\). This condition is detected early, and the dividend is left-shifted by \(1\) bit, making \(q = 2 × x/d\) and \(q ∈ [1, 2)\). Note that the exponent result must be adjusted accordingly.&lt;/p&gt;
    &lt;p&gt;The algorithm used for division is the \(Radix-4\) digit iteration algorithm, with three iterations per cycle. The quotient's signed-digit representation uses the digit set {\(−2, −1, 0, +1, +2\)}, meaning the radix \(r = 4\) and the digit set \(a = 2\). In each iteration, a digit of the quotient is obtained through a selection function. To have a quotient digit selection function independent of the divisor, the divisor must be scaled to be close to \(1\). Naturally, to maintain result correctness, the dividend must be scaled by the same factor as the divisor.&lt;/p&gt;
    &lt;p&gt;Using the radix\(-4\) algorithm, each iteration yields 2 bits of the quotient. Since three radix\(-4\) iterations are performed per clock cycle, 6 quotient bits are obtained per cycle, equivalent to a \(Radix-64\) divider. Additionally, note that the first quotient bit of the integer result can only take values {\(+1, +2\)}, and its computation is much simpler than that of the remaining bits. By computing it in parallel with operand prescaling, one single-precision floating-point iteration is saved. On the other hand, there is an early termination mode for exceptional operands. Early termination is triggered when any operand is \(NaN\), infinity, or zero, or when dividing by a power of 2 with both operands normalized. In the latter case, the result is obtained simply by reducing the exponent of the dividend. The main features of the \(Radix-64\) divider are as follows:&lt;/p&gt;
    &lt;p&gt;(1) Pre-scaling of divisor and dividend.&lt;/p&gt;
    &lt;p&gt;(2) The first quotient digit is executed in parallel with pre-scaling.&lt;/p&gt;
    &lt;p&gt;(3) Compare the scaled dividend and divisor, and left-shift the dividend to obtain a result in the range \([1, 2)\).&lt;/p&gt;
    &lt;p&gt;(4) Three \(Radix-4\) iterations per cycle, processing \(6\) bits each cycle.&lt;/p&gt;
    &lt;p&gt;(5) Supports half-precision, single-precision, and double-precision.&lt;/p&gt;
    &lt;p&gt;(6) Denormal number support requires an additional cycle for normalization before iteration.&lt;/p&gt;
    &lt;p&gt;(7) Early termination for exceptional operands.&lt;/p&gt;
    &lt;head rend="h5"&gt;Digit-Recurrence Division Algorithm&lt;/head&gt;
    &lt;p&gt;Digit-recurrence division is an iterative algorithm where each iteration computes a \(radix-r\) quotient digit \(q_{i+1}\) and a remainder. The remainder \(rem[i]\) is used to obtain the next \(radix-r\) digit. For fast iteration, the remainder is stored in a carry-save adder using a signed-digit redundant representation. This paper selects a \(radix-2\) signed-digit representation for the remainder, consisting of a positive and a negative number. For radix \(r =4\), the following expression represents the partial quotient before the \(i\)-th iteration:&lt;/p&gt;
    &lt;p&gt;After scaling the divisor to around 1, the \(radix-4\) algorithm describes the quotient and remainder as follows:&lt;/p&gt;
    &lt;p&gt;Here, \(\widehat{rem}[i]\) is an estimate of the remainder \(rem[i]\), which consists of only a few bits. For this algorithm, it has been determined that only the 6 most significant bits (MSB) of the remainder are needed, i.e., 3 integer bits and 3 fractional bits. Then, each iteration extracts a quotient bit from the current remainder and computes a new remainder for the next iteration. The formula below calculates the number of iterations \(it\):&lt;/p&gt;
    &lt;p&gt;Here, \(n\) is the number of bits in the result, including those needed for rounding. The division latency, i.e., the number of cycles, is directly related to the number of iterations. It also depends on the number of iterations performed per cycle. Three iterations per cycle have been implemented to achieve \(6\) bits per cycle, equivalent to \(Radix-64\) division. The cycles (\(cycles\)) required for normalized floating-point numbers are determined by the following formula. In addition to the (\(it/3\)) cycles needed for iterations, there are two extra cycles for operand pre-scaling and rounding.&lt;/p&gt;
    &lt;p&gt;Some examples of digital iterative division, including the \(Radix-4\) algorithm, can be found in [\(38\)]. A simple implementation is shown in the figure. Note that only the most significant bit of the remainder is used to select the quotient bit. The remainder is updated using a carry-save adder (\(CSA\)) and stored in a redundant representation. The quotient bit selection then requires the \(t\) most significant bits of the remainder to be summed in a carry-propagate adder (\(CPA\)) to obtain its non-redundant representation. However, this implementation is too slow. To accelerate the iteration loop, speculative algorithms must be employed for both the remainder computation between iterations and the quotient bit selection.&lt;/p&gt;
    &lt;head rend="h5"&gt;Operand pre-scaling&lt;/head&gt;
    &lt;p&gt;During prescaling, the divisor is scaled to a value close to 1, making the selection of quotient digits independent of the divisor. For the \(radix-4\) algorithm, scaling the divisor to the range \([1 − 1/64, 1+1/8]\) is sufficient. As shown in the prescaling factor truth table, only three bits determine the scaling factor. Note that during prescaling, the divisor should be scaled by a factor of \(1-2\). The dividend should also be scaled by the same factor.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;\(0.1\)xxx&lt;/cell&gt;
        &lt;cell role="head"&gt;Pre-scaling factor&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(000\)&lt;/cell&gt;
        &lt;cell&gt;\(1+1/2+1/2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(001\)&lt;/cell&gt;
        &lt;cell&gt;\(1+1/4+1/2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;010&lt;/cell&gt;
        &lt;cell&gt;\(1+1/2+1/8\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(011\)&lt;/cell&gt;
        &lt;cell&gt;\(1+1/2+0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(100\)&lt;/cell&gt;
        &lt;cell&gt;\(1+1/4+1/8\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(101\)&lt;/cell&gt;
        &lt;cell&gt;\(1+1/4+0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(110\)&lt;/cell&gt;
        &lt;cell&gt;\(1+0+1/8\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(111\)&lt;/cell&gt;
        &lt;cell&gt;\(1+0+1/8\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h5"&gt;Integer Quotient Calculation&lt;/head&gt;
    &lt;p&gt;While computing the integer quotient, the following data is provided for the digit iteration steps (each digit iteration performs three \(radix-4\) operations, corresponding to the \(s0\), \(s1\), and \(s2\) stages):&lt;/p&gt;
    &lt;p&gt;(1) Redundant remainder in carry-save representation: \(f\_r\_s\), \(f\_r\_c\).&lt;/p&gt;
    &lt;p&gt;(2) Pre-scaled divisor: \(divisor\).&lt;/p&gt;
    &lt;p&gt;(3) Provides a 6-bit remainder result for the quotient selection in the \(s0\) stage of the first digital iteration.&lt;/p&gt;
    &lt;p&gt;(4) Provides a 7-bit remainder result for the quotient selection in the \(s1\) stage of the first digit iteration.&lt;/p&gt;
    &lt;head rend="h6"&gt;Digital iteration&lt;/head&gt;
    &lt;p&gt;The actual implementation of the floating-point divider requires executing three \(radix-4\) iterations per cycle. Conventional sequential iteration three times is too slow to meet timing requirements, so the logic has been optimized. The figure illustrates the block diagram of the digit-recurrence loop.&lt;/p&gt;
    &lt;p&gt;(1) Process the divisor to obtain five possible quotient selection results, requiring the use of divisor multiples (only negate when the quotient is negative).&lt;/p&gt;
    &lt;p&gt;(2) In the \(s0\) stage, four \(CSA\) modules are used (not required when the quotient is \(0\)) to predictively compute the five remainder redundant representations needed for the \(s1\) stage in parallel during \(s0\).&lt;/p&gt;
    &lt;p&gt;(3) In the \(s0\) stage, using the five remainder redundant representations calculated in the second step, predictively compute five 7-bit remainder results for the \(s2\) stage.&lt;/p&gt;
    &lt;p&gt;(4) In the \(s0\) stage, the quotient for the \(s0\) stage is selected based on the 6-bit remainder result in the input signal. The quotient is represented using a 5-bit one-hot code.&lt;/p&gt;
    &lt;p&gt;(5) Based on the quotient from stage \(s0\), select the redundant remainder representation needed for stage \(s1\), and predictively choose one of the five 7-bit remainder results calculated in step three for stage \(s2\).&lt;/p&gt;
    &lt;p&gt;(6) In the \(s1\) stage, four \(CSA\) modules are used (not required when the quotient is \(0\)), and the five remainder redundant representations needed for the \(s2\) stage are predictively calculated in parallel.&lt;/p&gt;
    &lt;p&gt;(7) In the \(s1\) stage, predictively perform the quotient selection for the \(s1\) stage based on the \(7\)-bit remainder result from the input signal, the divisor multiples used for the five quotient selection results, and the quotient from the \(s0\) stage.&lt;/p&gt;
    &lt;p&gt;(8) Based on the quotient from stage \(s1\), select the redundant remainder representation required for stage \(s2\).&lt;/p&gt;
    &lt;p&gt;(9) In the \(s2\) stage, four \(CSA\) modules are used (not required when the quotient is \(0\)) to predictively compute the five redundant remainder representations needed for the next digit iteration in the \(s0\) stage in parallel.&lt;/p&gt;
    &lt;p&gt;(10) In the s2 stage, predictively compute five possible results for the 6-bit remainder required in the s0 stage and the 7-bit remainder required in the s1 stage of the next digit iteration.&lt;/p&gt;
    &lt;p&gt;(11) In the \(s2\) stage, based on the \(7\)-bit remainder result selected for the \(s2\) stage in the fifth step, the divisor multiples used for the five quotient selection results, and the quotient from the \(s1\) stage, the quotient for the \(s2\) stage is predictively selected.&lt;/p&gt;
    &lt;p&gt;(12) Based on the quotient selection result from the \(s2\) stage, the following are selected for the next digit iteration: the carry-save representation of the redundant remainder, the 6-bit remainder result required for the \(s0\) stage, and the 7-bit remainder result required for the \(s1\) stage.&lt;/p&gt;
    &lt;p&gt;Since the divisor's multiple is only inverted in the first step without \(+1\), there will be a deviation in the remainder calculation. Correction logic is added during the quotient selection process to rectify this. The table below shows the standard quotient selection function, and the subsequent table presents the quotient selection function after logical correction.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;\(4 × rem[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(q_{i+1}\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\([13/8,31/8]\)&lt;/cell&gt;
        &lt;cell&gt;\(+2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\([4/8,12/8]\)&lt;/cell&gt;
        &lt;cell&gt;\(+1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\([-3/8,3/8]\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\([-12/8,-4/8]\)&lt;/cell&gt;
        &lt;cell&gt;\(-1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\([-32/8,-13/8]\)&lt;/cell&gt;
        &lt;cell&gt;\(-2\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;\(4 × rem[i]\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(carry\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(q_{i+1}\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(31/8\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(+2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\([13/8,30/8]\)&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;\(+2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(12/8\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(+2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(12/8\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(+1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\([4/8,11/8]\)&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;\(+1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(3/8\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(+1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(3/8\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\([-3/8,2/8]\)&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(-4/8\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(-4/8\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(-1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\([-12/8, -5/8]\)&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;\(-1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(-13/8\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(-1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(-13/8\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(-2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\([-32/8,14/8]\)&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;\(-2\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Convert the redundant remainder representation of the iteratively output digits back to a standard remainder. Use \(On\) \(the\) \(Fly\) \(Conversion\) to compute both the quotient and quotient minus one, calculate two sets of \(grs\) and the signal for whether rounding up is needed, determine the selection signal for choosing between the quotient or quotient minus one, and finally select the correct quotient result. Perform rounding using the correct quotient result and its corresponding rounding-up signal.&lt;/p&gt;
    &lt;head rend="h6"&gt;Denormal numbers and early termination&lt;/head&gt;
    &lt;p&gt;(1) The input contains denormal numbers. The significand of a denormal number is less than \(1\) and cannot be pre-scaled together with normal numbers. Therefore, an additional cycle is added to normalize the significand of denormal numbers while simultaneously adjusting their exponents.&lt;/p&gt;
    &lt;p&gt;(2) The result is a denormal number. The quotient result after digit iteration is greater than 1, which does not meet the denormal significand range. An additional cycle is required to right-shift the quotient result for normalization.&lt;/p&gt;
    &lt;p&gt;(3) Early termination occurs in two scenarios: when the result is \(NaN\), infinity, or exact \(0\), computation can terminate early and output the result since this information is available in the first cycle, allowing the division result to be output in the second cycle; when the divisor is a power of \(2\), its significand \(=1\), and division only requires processing the exponent of the dividend, skipping the digit iteration phase, enabling the division result to be output as early as the second cycle. However, additional cycles are still needed if the dividend or result is a denormal number.&lt;/p&gt;
    &lt;head rend="h4"&gt;Vector floating-point division algorithm&lt;/head&gt;
    &lt;p&gt;For vector floating-point division, the RISC-V vector instruction set extension does not support mixed-precision floating-point division, thus only the following needs to be supported:&lt;/p&gt;
    &lt;p&gt;(1) 1 f64 = f64 + f64;&lt;/p&gt;
    &lt;p&gt;(2) \(2\) \(f32 = f32 + f32\);&lt;/p&gt;
    &lt;p&gt;(3) \(4\) \(f16 = f16 + f16\).&lt;/p&gt;
    &lt;p&gt;Considering that vector division involves multiple division computations simultaneously, and early termination can cause asynchronous output of results unless all cases terminate early under the same conditions, the early termination mechanism is disabled for vector division. If early termination occurs, the result is temporarily stored internally and output simultaneously with other division results.&lt;/p&gt;
    &lt;p&gt;To unify timing, the divider's cycle count is standardized to the worst-case scenario, i.e., when the input contains denormal numbers and the output also contains denormal numbers. Other cases that could produce results faster are internally buffered until the standardized cycle count is reached before outputting the result.&lt;/p&gt;
    &lt;p&gt;The main design employs resource reuse, with the following data reuse in the non-numeric iteration module:&lt;/p&gt;
    &lt;p&gt;(1) \(1\) \(f64/f32/f16 = f64/f32/f16 + f64/f32/f16\);&lt;/p&gt;
    &lt;p&gt;(2) 1 \(f32/f16 = f32/f16 + f32/f16\);&lt;/p&gt;
    &lt;p&gt;(3) \(2\) \(f16\) values \(= f16 + f16\).&lt;/p&gt;
    &lt;p&gt;A total of 4 signal groups are used to achieve the functionality of 7 division groups.&lt;/p&gt;
    &lt;p&gt;Since the digital iteration module is a critical path with significant timing pressure, achieving high reuse with non-digital iteration modules is not feasible without compromising timing requirements. Therefore, a partial reuse design is implemented for the digital iteration module:&lt;/p&gt;
    &lt;p&gt;(1) The interface consists of four sets of quotients and redundant remainders.&lt;/p&gt;
    &lt;p&gt;(2) The \(s0\) stage uses \(7\) sets of \(CSA\) and \(7\) sets of prediction, with \(4\) sets of quotient selection.&lt;/p&gt;
    &lt;p&gt;(3) Stages \(s1\) and \(s2\) utilize \(4\) sets of \(CSA\), \(4\) sets of prediction, and \(4\) sets of quotient selection.&lt;/p&gt;
    &lt;p&gt;Registers also adopt resource reuse. For divisor, redundant remainder, quotient, and other registers, the bit width is allocated based on the maximum required by \(4\) \(f16\), \(2\) \(f32\), or \(1\) \(f64\).&lt;/p&gt;
    &lt;head rend="h2"&gt;Hardware Design&lt;/head&gt;
    &lt;head rend="h3"&gt;Vector Floating-Point Adder&lt;/head&gt;
    &lt;head rend="h4"&gt;Scalar single-precision floating-point adder&lt;/head&gt;
    &lt;p&gt;A scalar single-precision floating-point adder is designed based on the improved dual-path floating-point addition algorithm, with its hardware implementation architecture shown in the figure.&lt;/p&gt;
    &lt;p&gt;The two input operands on the left are \(fp\_a\) and \(fp\_b\), while \(fp\_c\) on the right represents the addition result. \(fflags\) is a 5-bit exception flag, and \(rm\) is the rounding mode, with five modes represented by 3 bits. When \(is\_sub\) is 0, \(fp\_c = fp\_a + fp\_b\) is computed; when \(is\_sub\) is 1, \(fp\_c = fp\_a - fp\_b\) is computed. The difference between floating-point addition and subtraction lies only in the sign bit of \(fp\_b\), so minor adjustments to \(fp\_b\)'s sign bit enable the floating-point adder to support both operations. The overall design consists of three parts: the \(far\) path, the \(close\) path, and the exception path.&lt;/p&gt;
    &lt;p&gt;The far path first performs two parallel normalized exponent subtractions with significand right shifts, handling the cases where Efp_a ≥ Efp_b and Efp_b ≥ Efp_a separately. The correct right-shift result is selected based on the magnitude relationship between Efp_a and Efp_b and sent to the FS0 and FS1 significand adders. For subtraction, the far path sets EA as the larger exponent minus one, while for addition, EA is the larger exponent. This ensures the significand addition result falls within the range [1,4). During the right shift, two sets of grs are computed: grs_normal for rounding when the value is in [1,2), and grs_overflow for rounding when the value is in [2,4). Finally, based on the FS0 result and rounding mode, either FS0 or FS1 is selected as the significand result, and either EA or EA+1 is chosen as the exponent result. The sign bit result is determined by the exponent magnitude. The flag results indicate overflow if EA+1 is all ones and inexactness based on grs. The far path does not generate divide-by-zero, invalid operation, or underflow flags.&lt;/p&gt;
    &lt;p&gt;The \(close\) path uses four significant-digit adders, \(CS0\), \(CS1\), \(CS2\), and \(CS3\), to handle significant-digit subtraction for the cases where \(Efp\_a = Efp\_b\), \(Efp\_a = Efp\_b + 1\), and \(Efp\_a = Efp\_b – 1\). Based on the \(CS0\) result and \(grs\), four one-hot selection signals, \(sel\_CS0\), \(sel\_CS1\), \(sel\_CS2\), and \(sel\_CS3\), are generated. A four-input one-hot multiplexer (\(Mux1H\)) selects one result, which is ORed with the left-shifted \(mask\). A priority left shifter then normalizes the mantissa, outputting the \(lzd\) value during the shift. The exponent result is \(EA – lzd\), and the mantissa result is chosen between the normalized mantissa and \(CS4\), where \(CS4\) is a supplementary rounding result that does not require left-shift normalization. The sign result is derived from the exponent difference and the \(CS0\) result. The flag result only indicates imprecision; no other exception flags are generated.&lt;/p&gt;
    &lt;p&gt;The exception path is used to determine whether the operation is invalid, whether the result is \(NaN\), or whether the result is infinite. When none of these conditions are met, normal computation proceeds, generating a selection signal to choose the result and flags from either the \(far\) path or the \(close\) path as output.&lt;/p&gt;
    &lt;head rend="h4"&gt;Scalar mixed-precision floating-point adder&lt;/head&gt;
    &lt;p&gt;Building upon the scalar single-precision floating-point adder, a mixed-precision hardware design is implemented. The main difference lies in supporting mixed-precision computation. Taking the result as \(f32\) as an example, the table below shows the truth table for the operations corresponding to \(res\_widen\) and \(opb\_widen\).&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;\(res\_widen\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(opb\_widen\)&lt;/cell&gt;
        &lt;cell role="head"&gt;\(f32\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(f32 = f32 + f32\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(f32 = f16 + f16\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(f32 = f16 + f32\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;Not allowed&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The figure below shows the architecture of a scalar mixed-precision floating-point adder. The main difference is the addition of a fast format conversion module at the data input. Based on the operation type, this module converts the operands into the result's data format before processing, after which the computation flow is identical to that of a single-precision floating-point adder.&lt;/p&gt;
    &lt;head rend="h4"&gt;Vector Floating-Point Adder&lt;/head&gt;
    &lt;p&gt;The diagram below shows the architecture of the vector floating-point adder. To meet timing requirements, it is composed of four modules: \(FloatAdderF64Widen\) handles all operations with 64-bit output results, \(FloatAdderF32WidenF16\) handles all operations with 16-bit or 32-bit output results, and \(FloatAdderF16\) handles only operations with 16-bit output results.&lt;/p&gt;
    &lt;p&gt;Here, \(fp\_format\) is a 2-bit result format control signal: \(00\) indicates the result format is \(f16\), \(01\) indicates \(f32\), and \(10\) indicates \(f64\). The output flags are 20 bits, arranged with lower bits being significant. When the result format is \(f16\), all 20 bits are valid; for \(f32\), the lower 10 bits are valid; and for \(f64\), the lower 5 bits are valid.&lt;/p&gt;
    &lt;p&gt;The vector floating-point adder employs a two-stage pipeline design. To achieve rapid wake-up, the addition result is computed in approximately 1.5 cycles. Pipeline partitioning is performed within each submodule, requiring only the insertion of a single register level. Below is an explanation of the pipeline partitioning for the three modules shown in the diagram.&lt;/p&gt;
    &lt;p&gt;The diagram below illustrates the pipeline partitioning of the \(FloatAdderF64Widen\) module. The \(far\) path inserts registers after the significand right shift, while the \(close\) path inserts registers after the \(Mux1H\).&lt;/p&gt;
    &lt;p&gt;The figure below shows the pipeline division of the \(FloatAdderF32WidenF16\) module, which includes calculations for two different output formats. The selection logic in the second cycle is complex, so registers are inserted within the adder in the \(far\) path. The first cycle performs the addition of the lower \(18\) bits and the higher bits, while the second cycle combines the carry from the lower \(18\)-bit addition of the first cycle with the higher bits to obtain the final result. The \(close\) path also inserts registers after \(Mux1H\).&lt;/p&gt;
    &lt;p&gt;The following diagram shows the pipeline partitioning of the \(FloatAdderF16\) module. This module has minimal timing pressure and adopts a partitioning method where the \(far\) path inserts registers after the right shift of significant bits, and the \(close\) path inserts registers after \(Mux1H\).&lt;/p&gt;
    &lt;head rend="h4"&gt;Interface Description&lt;/head&gt;
    &lt;p&gt;The previously introduced vector floating-point adder has a width of \(64\) bits, requiring both operands to be in vector form. However, \(RVV\) not only specifies that both operands are in vector form (\(vector-vector\), abbreviated as \(vv\)) but also allows one operand to be a vector and the other a scalar (\(vector-scalar\), abbreviated as \(vf\)). Additionally, under \(widening\) instructions, the arrangement of source operands is not limited to the lower significant part. When the source register width is half of the destination register width, the data source may come from either the lower or upper half.&lt;/p&gt;
    &lt;p&gt;To implement all floating-point instruction calculations in \(RVV\) and support \(VLEN\) extension, simple instruction computations are added to the vector floating-point adder, transforming it into a vector floating-point "\(ALU\)", referred to as \(VFALU\).&lt;/p&gt;
    &lt;p&gt;Therefore, the vector floating-point adder needs to be modified to adapt to the features of \(RVV\). The modifications consist of two parts: functional modifications and interface modifications.&lt;/p&gt;
    &lt;p&gt;The table below lists the opcodes supported by \(VFALU\), totaling \(16\) operations, where (\(w\)) indicates operations involving \(widen\). The operand formats for \(vfmerge\), \(vfmove\), and \(vfclass\) are special: \(vfmerge.vfm\) has three source operands—a vector register, a floating-point register, and a \(mask\) register; \(vfmove.v.f\) has only one floating-point register as the source operand; \(vfclass\) has only one vector register as the source operand.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;\(op\_code\)&lt;/cell&gt;
        &lt;cell role="head"&gt;Corresponding instruction&lt;/cell&gt;
        &lt;cell role="head"&gt;Operand format&lt;/cell&gt;
        &lt;cell role="head"&gt;Meaning&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(vf(w)add\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;Addition&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(vf(w)sub\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;Subtraction&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;\(vfmin\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;Find the minimum value&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(3\)&lt;/cell&gt;
        &lt;cell&gt;\(vfmax\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;Find Maximum&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(4\)&lt;/cell&gt;
        &lt;cell&gt;\(vfmerge\)&lt;/cell&gt;
        &lt;cell&gt;\(vfm\)&lt;/cell&gt;
        &lt;cell&gt;Data merging&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(5\)&lt;/cell&gt;
        &lt;cell&gt;\(vfmove\)&lt;/cell&gt;
        &lt;cell&gt;\(v.f\)&lt;/cell&gt;
        &lt;cell&gt;Data movement&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(6\)&lt;/cell&gt;
        &lt;cell&gt;\(vfsgnj\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;Sign Injection&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(7\)&lt;/cell&gt;
        &lt;cell&gt;\(vfsgnjn\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;Sign inversion injection&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(8\)&lt;/cell&gt;
        &lt;cell&gt;\(vfsgnjx\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;XOR sign injection&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(9\)&lt;/cell&gt;
        &lt;cell&gt;\(vmfeq\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;Whether equal&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(10\)&lt;/cell&gt;
        &lt;cell&gt;\(vmfnq\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;Not Equal&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(11\)&lt;/cell&gt;
        &lt;cell&gt;\(vmflt\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;Whether it is less than&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(12\)&lt;/cell&gt;
        &lt;cell&gt;\(vmfle\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;Less than or equal to&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(13\)&lt;/cell&gt;
        &lt;cell&gt;\(vmfgt\)&lt;/cell&gt;
        &lt;cell&gt;\(vf\)&lt;/cell&gt;
        &lt;cell&gt;Whether greater than&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(14\)&lt;/cell&gt;
        &lt;cell&gt;\(vmfge\)&lt;/cell&gt;
        &lt;cell&gt;\(vf\)&lt;/cell&gt;
        &lt;cell&gt;Is greater than or equal to&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;15&lt;/cell&gt;
        &lt;cell&gt;\(vfclass\)&lt;/cell&gt;
        &lt;cell&gt;\(v\)&lt;/cell&gt;
        &lt;cell&gt;Classification&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The table below defines the \(VFALU\) interface. Compared to the vector floating-point adder, it adds two mixed-precision data sources, \(widen\_a\) and \(widen\_b\). When the source and destination operand formats are the same, the data comes from \(fp\_a\) and \(fp\_b\); otherwise, it comes from \(widen\_a\) and \(widen\_b\). When \(uop\_idx=0\), the lower half is taken, and when \(uop\_idx=1\), the upper half is taken. When \(is\_frs1=1\), the source operand \(vs1\) comes from the floating-point register \(frs1\), which needs to be replicated into a vector register for computation. \(mask\) participates in the calculation of the \(merge\) instruction, and \(op\_code\) is the operation code indicating the operation to be performed.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Interface&lt;/cell&gt;
        &lt;cell role="head"&gt;Direction&lt;/cell&gt;
        &lt;cell role="head"&gt;Bit Width&lt;/cell&gt;
        &lt;cell role="head"&gt;Meaning&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;fp_a&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Source operand \(vs2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(fp\_b\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Source operand \(vs1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(widen\_a\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;\(widen\_vs2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(widen\_b\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;\(widen\_vs1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(frs1\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Floating-Point Register Data&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(is\_frs1\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Addend sourced from floating-point register data&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(mask\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(4\)&lt;/cell&gt;
        &lt;cell&gt;Participate in \(merge\) instruction computation&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(uop\_idx\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;Select upper/lower half when \(widen\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(round\_mode\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(3\)&lt;/cell&gt;
        &lt;cell&gt;Rounding mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(fp\_format\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;Floating-point format&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(res\_widening\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(widen\) instruction&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(opb\_widening\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;Is the source operand \(vs1\) in the same format as the result?&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(op\_code\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(5\)&lt;/cell&gt;
        &lt;cell&gt;Opcode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;fp_result&lt;/cell&gt;
        &lt;cell&gt;\(output\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Computation result&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(fflags\)&lt;/cell&gt;
        &lt;cell&gt;\(output\)&lt;/cell&gt;
        &lt;cell&gt;\(20\)&lt;/cell&gt;
        &lt;cell&gt;Flag bits&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;Vector Floating-Point Fused Multiply-Add Unit&lt;/head&gt;
    &lt;head rend="h4"&gt;Pipeline Partitioning&lt;/head&gt;
    &lt;p&gt;The vector floating-point fused multiply-adder adopts a four-stage pipeline design to achieve rapid wake-up, ensuring the multiply-add result is computed in approximately \(3.5\) cycles. The vector unit's latency is \(3.5\) cycles. The diagram below illustrates the architecture of the vector floating-point fused multiply-adder, where \(reg\_0\) denotes the first-stage register, \(reg\_1\) the second-stage, and \(reg\_2\) the third-stage. The vector floating-point fused multiply-adder also supports \(widen\) functionality, limited to \(f32 = f16 × f16 + f32\) and \(f64 = f32 × f32 + f64\) cases. Thus, only a single-bit \(widen\) signal is needed for control when the output format is fixed. The output \(fflags\) is also \(20\) bits, consistent with the representation in the vector floating-point adder.&lt;/p&gt;
    &lt;p&gt;To save area while meeting timing constraints, a resource-sharing implementation is adopted. Calculations for all data formats use the same vector Booth encoder and CSA compression. By interleaving the layout, the 107-bit adder also achieves resource sharing.&lt;/p&gt;
    &lt;p&gt;In the first cycle, seven sets of exponent processing are performed to obtain seven right-shift values. The corresponding right-shift value is selected based on the computation format. For the right shifters, the \(f64\) right shifter is shared with one \(f32\), while a separate \(f32\) and four \(f16\) right shifters are dedicated. If subtraction is performed, the right-shifted result of \(fp\_c\)'s mantissa is inverted before being fed into the first-stage register. Simultaneously, vector \(Booth\) encoding is performed in the first cycle, generating 27 partial products, which are compressed into 4 partial products using \(CSA\) and then registered.&lt;/p&gt;
    &lt;p&gt;In the second cycle, compress the remaining 4 partial products using \(CSA4\_2\), then compress the result with the first cycle's right-shifted significand using \(CSA3\_2\). Perform a 107-bit addition and register the result in the second-stage register.&lt;/p&gt;
    &lt;p&gt;In the third cycle, the sum result from the second cycle undergoes \(lzd\) and \(tzd\), followed by a left shift with \(mask\) limitation. The shifted result is stored in the third-stage register.&lt;/p&gt;
    &lt;p&gt;In the fourth cycle, rounding is performed to obtain the mantissa result. The exponent result is calculated based on the left shift condition in the third cycle. The sign bit can be obtained from the \(107\)-bit adder in the second cycle. The flag results can generate four types of flags: overflow, underflow, invalid operation, and inexact. Note the method for detecting underflow. \(IEEE-754\) specifies two methods for detecting underflow: \(before \quad rounding\) and \(after \quad rounding\). This design uses the \(after \quad rounding\) method selected by \(RISC-V\) to detect underflow.&lt;/p&gt;
    &lt;head rend="h4"&gt;Interface Description&lt;/head&gt;
    &lt;p&gt;According to the \(RVV\) instruction definitions, vector floating-point fused multiply-add units can be reused for multiplication calculations, controlled by \(op\_code\). When performing multiplication, the internal adder is set to zero. Additionally, \(RVV\) defines a series of floating-point fused multiply-add instructions, primarily differing in sign bits and operand order. The vector floating-point fused multiply-add unit is modified to support all related instructions as \(VFMA\), with added \(op\_code\) and interfaces. The following table lists the \(VFMA\) opcodes, totaling \(9\) operations, all supporting \(vv\) and \(vf\) operand forms. For \(vf\), \(vs1[i]\) is replaced by the floating-point register \(frs1\).&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;\(op\_code\)&lt;/cell&gt;
        &lt;cell role="head"&gt;Corresponding instruction&lt;/cell&gt;
        &lt;cell role="head"&gt;Operand format&lt;/cell&gt;
        &lt;cell role="head"&gt;Meaning&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(0\)&lt;/cell&gt;
        &lt;cell&gt;\(vf(w)mul\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;\(vd[i] = vs[2] × vs1[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(vf(w)macc\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;\(vd[i] = +(vs1[i] × vs2[i]) + vd[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;\(vf(w)nmacc\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;\(vd[i] = -(vs1[i] × vs2[i]) - vd[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(3\)&lt;/cell&gt;
        &lt;cell&gt;\(vf(w)msac\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;\(vd[i] = +(vs1[i] × vs2[i]) - vd[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(4\)&lt;/cell&gt;
        &lt;cell&gt;\(vf(w)nmsac\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;\(vd[i] = -(vs1[i] × vs2[i]) + vd[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(5\)&lt;/cell&gt;
        &lt;cell&gt;\(vfmadd\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;\(vd[i] = +(vs1[i] × vd[i]) + vs2[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(6\)&lt;/cell&gt;
        &lt;cell&gt;\(vfnamdd\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;\(vd[i] = -(vs1[i] × vd[i]) - vs2[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(7\)&lt;/cell&gt;
        &lt;cell&gt;\(vfmsub\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;\(vd[i] = +(vs1[i] × vd[i]) - vs2[i]\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(8\)&lt;/cell&gt;
        &lt;cell&gt;\(vfnmsub\)&lt;/cell&gt;
        &lt;cell&gt;\(vv,vf\)&lt;/cell&gt;
        &lt;cell&gt;\(vd[i] = -(vs1[i] × vd[i]) + vs2[i]\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The table below shows the \(VFMA\) interface. To simplify control logic complexity, the three operands sent to \(VFMA\) are fixed in the order \(vs2\), \(vs1\), \(vd\). The functional unit internally adjusts the order based on \(op\_code\). Since the \(fma\) instruction uses a fixed target format for the addend during \(widen\), only \(widen\_a\) and \(widen\_b\) need to be added. \(uop\_idx\) is similarly used to select the upper or lower half of \(widen\_a\) and \(widen\_b\). \(frs1\) and \(is\_frs1\) are used to support \(vf\) instructions.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Interface&lt;/cell&gt;
        &lt;cell role="head"&gt;Direction&lt;/cell&gt;
        &lt;cell role="head"&gt;Bit Width&lt;/cell&gt;
        &lt;cell role="head"&gt;Meaning&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;fp_a&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Source operand \(vs2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(fp\_b\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Source operand \(vs1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(fp\_c\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Source operand \(vd\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(widen\_a\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;\(widen\_vs2\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(widen\_b\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;\(widen\_vs1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(frs1\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Floating-Point Register Data&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(is\_frs1\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Addend sourced from floating-point register data&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(uop\_idx\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;Select upper/lower half when \(widen\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(round\_mode\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(3\)&lt;/cell&gt;
        &lt;cell&gt;Rounding mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(fp\_format\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;Floating-point format&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(res\_widening\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;\(widen\) instruction&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(op\_code\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(5\)&lt;/cell&gt;
        &lt;cell&gt;Opcode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;fp_result&lt;/cell&gt;
        &lt;cell&gt;\(output\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Computation result&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(fflags\)&lt;/cell&gt;
        &lt;cell&gt;\(output\)&lt;/cell&gt;
        &lt;cell&gt;\(20\)&lt;/cell&gt;
        &lt;cell&gt;Flag bits&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;Vector floating-point divider&lt;/head&gt;
    &lt;head rend="h4"&gt;Scalar Floating-Point Divider&lt;/head&gt;
    &lt;p&gt;The scalar floating-point divider supports computations in three formats: \(1\) \(f16 = f16 / f16\), \(1\) \(f32 = f32 / f32\), and \(1\) \(f64 = f64 / f64\). The divider employs a \(Radix-64\) algorithm, where the iterative module performs three \(Radix-4\) iterations per cycle to achieve \(Radix-64\). The figure below shows the architecture of the scalar floating-point divider. The divider operates in a blocking manner and cannot accept the next division operation during computation, requiring handshake signals for control. This design uses \(start-valid\) handshake signals. Since the \(CPU\) may encounter branch prediction failures that flush pipeline states, a dedicated \(flush\) signal is included to clear the divider's internal state, allowing it to immediately start a new division operation in the next cycle.&lt;/p&gt;
    &lt;p&gt;Input data falls into three categories: both are normalized numbers (excluding divisors that are powers of \(2\)), at least one is a denormal number, and early termination (input contains \(NaN\), infinity, zero, or the divisor is a power of \(2\)). Results fall into two categories: the result is a normalized number, or the result is a denormal number.&lt;/p&gt;
    &lt;p&gt;When the inputs are all normalized numbers (excluding divisors that are powers of 2), the mantissas are normalized, and the process directly proceeds to the pre-scaling stage. When at least one input is a denormalized number, compared to the case where all inputs are normalized, an additional cycle is required for mantissa normalization before pre-scaling.&lt;/p&gt;
    &lt;p&gt;The prescaling stage takes one cycle, followed by integer quotient selection, where the two-bit integer quotient result is selected, and the prescaled divisor, dividend, and remainder's carry-save redundant representation are provided for the \(Radix-4\) iteration. The \(Radix-4\) iteration module calculates 6 bits of the quotient per cycle. \(f16\) division requires 2 cycles of \(Radix-4\) iteration, \(f32\) division requires 6 cycles, and \(f64\) division requires 9 cycles. After \(Radix-4\) iteration, the resulting mantissa quotient ranges between \((1, 2)\). When the result is a normalized number, only one cycle is needed for rounding and exponent result calculation to obtain the final division result. When the result is a denormal number, an additional cycle is required to denormalize the quotient before rounding.&lt;/p&gt;
    &lt;p&gt;Early termination is divided into two scenarios: (1) When the input operands contain NaN, infinity, or zero, division computation is unnecessary, and the result can be output in the second cycle. (2) When the divisor is a power of 2, the exponent result can be obtained in the first cycle. If the result does not require denormalization steps, it can be output in the second cycle; if denormalization is needed, an additional cycle is required, and the result is output in the third cycle.&lt;/p&gt;
    &lt;p&gt;The table below shows the required computation cycles for scalar dividers under different data formats, where \(+1\) indicates an additional cycle for post-processing when the division result is denormalized. In early termination cases, division operations for all data formats can be completed in just \(1\) to \(2\) cycles. Without early termination, \(f16\) division requires \(5\) to \(7\) cycles, \(f32\) division requires \(7\) to \(9\) cycles, and \(f64\) division requires \(12\) to \(14\) cycles.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Data Format&lt;/cell&gt;
        &lt;cell role="head"&gt;Normalized Number&lt;/cell&gt;
        &lt;cell role="head"&gt;Denormal number&lt;/cell&gt;
        &lt;cell role="head"&gt;Early termination&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(f16\)&lt;/cell&gt;
        &lt;cell&gt;\(5+1\)&lt;/cell&gt;
        &lt;cell&gt;\(6+1\)&lt;/cell&gt;
        &lt;cell&gt;\(1+1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(f32\)&lt;/cell&gt;
        &lt;cell&gt;\(7+1\)&lt;/cell&gt;
        &lt;cell&gt;\(8+1\)&lt;/cell&gt;
        &lt;cell&gt;\(1+1\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(f64\)&lt;/cell&gt;
        &lt;cell&gt;\(12+1\)&lt;/cell&gt;
        &lt;cell&gt;\(13+1\)&lt;/cell&gt;
        &lt;cell&gt;\(1+1\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h4"&gt;Vector floating-point divider&lt;/head&gt;
    &lt;p&gt;The figure below shows the architecture of the vector floating-point divider. Compared to the scalar floating-point divider, since vector division computes multiple divisions simultaneously and all results must be written back to the register file together, early termination of a single division offers little benefit for vector division acceleration. Thus, the feature of variable output latency is removed. In all cases, the latency of the vector floating-point divider is fixed based on the input data format, as shown in the table below.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Data Format&lt;/cell&gt;
        &lt;cell role="head"&gt;Calculation Cycle&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(f16\)&lt;/cell&gt;
        &lt;cell&gt;\(7\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;\(f32\)&lt;/cell&gt;
        &lt;cell&gt;\(11\)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(f64\)&lt;/cell&gt;
        &lt;cell&gt;\(14\)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;In hardware design, aside from the \(Radix-64\) iteration module, the vector floating-point divider employs logic reuse, utilizing four signal groups for computation and control: the first group computes \(f64\_0\), \(f32\_0\), or \(f16\_0\); the second computes \(f32\_1\) or \(f16\_1\); the third computes \(f16\_2\); and the fourth computes \(f16\_3\). Registers are also reused to store intermediate results, with widths sized to \(max\) (1 \(f64\), 2 \(f32\), or 4 \(f16\)) to meet maximum requirements. The \(Radix-64\) iteration module is the critical path, optimized for timing while minimizing area. The first \(Radix-4\) iteration uses 7 independent \(CSA\) and quotient selection units, while the second and third iterations reuse 4 \(CSA\) and quotient selection units.&lt;/p&gt;
    &lt;head rend="h4"&gt;Interface Description&lt;/head&gt;
    &lt;p&gt;The \(RVV\) specification defines three vector floating-point division instructions:&lt;/p&gt;
    &lt;p&gt;① \(vfdiv.vv \quad vd[i] = vs2[i]/vs1[i]\)&lt;/p&gt;
    &lt;p&gt;② \(vfdiv.vf \quad vd[i] = vs2[i]/f[rs1]\)&lt;/p&gt;
    &lt;p&gt;③ \(vfrdiv.vf \quad vd[i] = f[rs1]/vs2[i]\)&lt;/p&gt;
    &lt;p&gt;Case ③ is special as the operand order differs from cases ① and ②. For the vector division unit, the first operand is passed by the control logic as \(vs2[i]/f[rs1]\), and the second operand is passed as \(vs1[i]/f[rs1]/vs2[i]\). Thus, the functional unit sees the dividend in either vector or scalar form, and the divisor is also in vector or scalar form. Therefore, two additional scalar data interfaces are required. After adding these interfaces, the module is named \(VFDIV\), with the interfaces as shown in the table below.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Interface&lt;/cell&gt;
        &lt;cell role="head"&gt;Direction&lt;/cell&gt;
        &lt;cell role="head"&gt;Bit Width&lt;/cell&gt;
        &lt;cell role="head"&gt;Meaning&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(start\_valid\_i\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;Handshake signal&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(finish\_ready\_i\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;Handshake signal&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(flush\_i\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;Flush signal&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(fp\_format\_i\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(2\)&lt;/cell&gt;
        &lt;cell&gt;Floating-point format&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(opa\_i\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Dividend&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(opb\_i\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Divisor&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(frs2\_i\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Dividend comes from floating-point register data&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(frs1\_i\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Divisor sourced from floating-point register data&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(is\_frs2\_i\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;Dividend sourced from floating-point register&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(is\_frs1\_i\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;The divisor comes from the floating-point register&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(rm\_i\)&lt;/cell&gt;
        &lt;cell&gt;\(input\)&lt;/cell&gt;
        &lt;cell&gt;\(3\)&lt;/cell&gt;
        &lt;cell&gt;Rounding mode&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(start\_ready\_o\)&lt;/cell&gt;
        &lt;cell&gt;\(output\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;Handshake signal&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(finish\_valid\_o\)&lt;/cell&gt;
        &lt;cell&gt;\(output\)&lt;/cell&gt;
        &lt;cell&gt;\(1\)&lt;/cell&gt;
        &lt;cell&gt;Handshake signal&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;\(fpdiv\_res\_o\)&lt;/cell&gt;
        &lt;cell&gt;\(output\)&lt;/cell&gt;
        &lt;cell&gt;\(64\)&lt;/cell&gt;
        &lt;cell&gt;Computation result&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;\(fflags\_o\)&lt;/cell&gt;
        &lt;cell&gt;\(output\)&lt;/cell&gt;
        &lt;cell&gt;\(20\)&lt;/cell&gt;
        &lt;cell&gt;Flag bits&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;Vector format conversion module \(VCVT\)&lt;/head&gt;
    &lt;p&gt;The \(VCVT\) module is a three-stage pipelined vector floating-point format conversion module. It instantiates two \(VectorCvt\) submodules capable of processing \(64\)-bit data. Each \(VectorCvt\) contains one \(cvt64\), one \(cvt32\), and two \(cvt16\) modules. The \(cvt64\) supports processing floating-point/integer formats of \(64\), \(32\), \(16\), and \(8\) bits. The \(cvt32\) supports \(32\), \(16\), and \(8\)-bit floating-point/integer formats, while the \(cvt16\) supports \(16\) and \(8\)-bit floating-point/integer formats. Thus, \(VectorCvt\) can simultaneously process one \(64\)-bit (or two \(32\)-bit, or four \(16\)-bit, or four \(8\)-bit) floating-point/integer format input data for conversion.&lt;/p&gt;
    &lt;head rend="h4"&gt;Overall design&lt;/head&gt;
    &lt;head rend="h4"&gt;Module Design&lt;/head&gt;
    &lt;p&gt;The \(CVT\) module includes single-width floating-point/integer type conversion instructions, widening floating-point/integer type conversion instructions, narrowing floating-point/integer type conversion instructions, vector floating-point reciprocal square root estimation instructions, and vector floating-point reciprocal estimation instructions.&lt;/p&gt;
    &lt;p&gt;Select different \(cvt\) module calls based on \(width\). The design approach for the \(cvt\) module is divided into four types based on instruction type: \(fp2int\), \(int2fp\), \(fp2fp\), and \(vfr\). The overall design approach for \(fcvt64\) is to unify the format of the input \(64bit\) data:&lt;/p&gt;
    &lt;p&gt;different width unsigned/signed int -&amp;gt; 65 signed int&lt;/p&gt;
    &lt;p&gt;\(f16/f32/f64 -&amp;gt; 65bit (f64 \#\# false.B)\)&lt;/p&gt;
    &lt;p&gt;After standardizing the format, there is no longer a need to distinguish between different types of data, their bit widths, or field positions during the conversion process to a certain extent.&lt;/p&gt;
    &lt;p&gt;Building on this, \(VFCVT64\) is divided into 5 categories: \(int -&amp;gt; fp\), \(fp -&amp;gt; fp\) widen, \(fp -&amp;gt; fp\) narrow, estimate7 (\(rsqrt7\) &amp;amp; \(rec7\)), and \(fp -&amp;gt; int\).&lt;/p&gt;
    &lt;head rend="h4"&gt;\(FuopType\) decoding logic&lt;/head&gt;
    &lt;p&gt;For the \(cvt\) instruction: its \(fuopType\) consists of \(9\) bits, with each bit representing the following information:&lt;/p&gt;
    &lt;p&gt;Here, \([5:0]\) is obtained from the manual, and \([8:6]\) is additionally added during the design of control signal generation for convenience.&lt;/p&gt;
    &lt;p&gt;\([8]:1\) indicates it is a \(move\) instruction, \(0\) represents \(cvt\) instruction or the two estimation instructions \(vfrsqrt7\) and \(vfrec7\).&lt;/p&gt;
    &lt;p&gt;\([7]: 1\) indicates the input is \(fp\), \(0\) indicates the input is \(int\).&lt;/p&gt;
    &lt;p&gt;\([6]\): \(1\) indicates the output is \(fp\), \(0\) indicates the output is \(int\).&lt;/p&gt;
    &lt;p&gt;\([5]:1\) indicates it is one of the two estimation instructions, \(vfrsqrt7\) or \(vfrec7\); otherwise, it is a \(cvt\) instruction. When it is \(1\), \([0]\) distinguishes between \(vfrsqrt7\) and \(vfrec7\).&lt;/p&gt;
    &lt;p&gt;\([4:3]: 00\) denotes \(single\) type, \(01\) denotes \(widen\), \(10\) denotes \(narrow\).&lt;/p&gt;
    &lt;p&gt;\([2:0]\): For different instructions, it serves different purposes: For conversions between floating-point and integer, \([0]\) distinguishes whether the integer is signed or unsigned; in other cases, \([2:1]=11\) indicates it is an \(rtz\) type instruction, and \([2:0]=101\) indicates it is \(rod\) (vfncvt_rod_ffw).&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45477118</guid><pubDate>Sat, 04 Oct 2025 22:02:28 +0000</pubDate></item><item><title>NSA and IETF: Can an attacker purchase standardization of weakened cryptography?</title><link>https://blog.cr.yp.to/20251004-weakened.html</link><description>&lt;doc fingerprint="3e9999123e0289dd"&gt;
  &lt;main&gt;
    &lt;p&gt;It's normal for post-quantum cryptography to be rolled out as an extra layer of security on top of traditional pre-quantum cryptography, rather than as a replacement.&lt;/p&gt;
    &lt;p&gt;For example, Google's CECPQ1 experiment was double encryption with traditional pre-quantum ECC (specifically X25519) and post-quantum NewHope1024. CECPQ2, a joint experiment between Google and Cloudflare, was ECC+NTRUHRSS701. CECPQ2b was ECC+SIKEp434. Ten SSH implementations support ECC+sntrup761. Today's usage of post-quantum cryptography by browsers is approaching half of the connections seen by Cloudflare, where 95% of that is ECC+MLKEM768 and 5% is ECC+Kyber768.&lt;/p&gt;
    &lt;p&gt;If post-quantum cryptography is designed to be super-strong, so strong that it even survives future quantum computers, then why are we keeping the ECC layer? Same reason that you wear your seatbelt: in the real world, cars sometimes crash, and seatbelts reduce the damage.&lt;/p&gt;
    &lt;p&gt;Google already explained this back in 2016: "The post-quantum algorithm might turn out to be breakable even with today's computers, in which case the elliptic-curve algorithm will still provide the best security that today's technology can offer." We've seen many breaks of post-quantum proposals since then, including the sudden public collapse of SIKE three years after CECPQ2b applied SIKE to tens of millions of user connections. The only reason that this user data wasn't immediately exposed to attackers is that CECPQ2b encrypted data with SIKE and with ECC, rather than switching from ECC to just SIKE. As another example, the reference Kyber/ML-KEM software went through two rounds of security patches for KyberSlash at the end of 2023, and then had another security patch in mid-2024.&lt;/p&gt;
    &lt;p&gt;Deploying ECC+PQ rather than just PQ is an easy common-sense win. ECC software is practically everywhere anyway, and nobody has identified an application that can afford PQ without being able to afford ECC+PQ.&lt;/p&gt;
    &lt;p&gt;Typically people talk about deploying ECC+PQ as deploying "hybrids" rather than "non-hybrids", although you have to be careful with this terminology since the word "hybrid" also has other meanings in cryptography. It's more descriptive to talk about "double encryption" and "double signatures" rather than "single encryption" and "single signatures".&lt;/p&gt;
    &lt;p&gt;The problem in a nutshell. Surveillance agency NSA and its partner GCHQ are trying to have standards-development organizations endorse weakening ECC+PQ down to just PQ.&lt;/p&gt;
    &lt;p&gt;Part of this is that NSA and GCHQ have been endlessly repeating arguments that this weakening is a good thing (in much the same way that NSA advertised Dual EC as providing "increased assurance"). I have a previous blog post showing that those arguments collapse upon examination. But that's not today's topic. In today's blog post I'm instead looking at how easy it is for NSA to simply spend money to corrupt the standardization process.&lt;/p&gt;
    &lt;p&gt;Two TLS encryption drafts. For concreteness, I'll focus on what's happening in a particular standards-development organization called the Internet Engineering Task Force (IETF). Within that, I'll focus on current proposals within an IETF "working group" (WG) that sets standards for Transport Layer Security (TLS), the security layer inside HTTPS and inside various other protocols. I'll look specifically at how the TLS WG handled two drafts specifying post-quantum encryption mechanisms for TLS:&lt;/p&gt;
    &lt;p&gt;Hybrid (double encryption): "Post-quantum hybrid ECDHE-MLKEM Key Agreement for TLSv1.3". This draft specifies ECC+PQ in TLS, specifically usage in TLS of "X25519MLKEM768, SecP256r1MLKEM768, and SecP384r1MLKEM1024". The first of those is also what I mentioned above as 95% of current post-quantum connections to Cloudflare.&lt;/p&gt;
    &lt;p&gt;Non-hybrid (single encryption): "ML-KEM Post-Quantum Key Agreement for TLS 1.3". This draft specifies usage in TLS of "ML-KEM-512, ML-KEM-768, and ML-KEM-1024" without seatbelts.&lt;/p&gt;
    &lt;p&gt;The non-hybrid draft was first posted in March 2024. Of course someone asked "what the motivation is for being 'fully post-quantum' rather than hybrid". The draft author responded: "FIPS / CNSA 2.0 compliance guidelines ... currently are a big 'maybe' at best for 'hybrid solutions', and the timetables for compliant browsers, servers, and services are to exclusively use FIPS 203 at level V (ML-KEM-1024) by 2033. I figure there will be demand for pure ML-KEM key agreement, not hybrid (with no questions that come along with it of whether it's actually allowed or not)."&lt;/p&gt;
    &lt;p&gt;As context, the massive U.S. military budget now publicly requires cryptographic "components" to have NSA approval. "CNSA 2.0" refers to a public NSA document "Commercial National Security Algorithm Suite 2.0". The document says up front that its requirements apply to "all NSS use of public cryptographic algorithms (as opposed to algorithms NSA developed), including those on all unclassified and classified NSS". The legal definition of "national security system" (NSS) covers practically all military information systems, except for "routine administrative and business applications" such as "payroll".&lt;/p&gt;
    &lt;p&gt;In June 2024, NSA's William Layton wrote that "we do not anticipate supporting hybrid in NSS".&lt;/p&gt;
    &lt;p&gt;In December 2024, a Cisco employee wrote the following: "There are people whose cryptographic expertise I cannot doubt who say that pure ML-KEM is the right trade-off for them, and more importantly for my employer, that's what they're willing to buy. Hence, Cisco will implement it; I am essentially just asking for code points." Certainly "willing to buy" is a statement about funding, evidently from a source large enough to dictate Cisco actions, evidently from a source asking for non-hybrids, evidently from "people whose cryptographic expertise I cannot doubt"; if that source isn't NSA, who is it?&lt;/p&gt;
    &lt;p&gt;(Side note: If you think the word "pure" in "pure ML-KEM" sounds good, remember that replacing CECPQ2's ECC+SIKE with "pure SIKE" would have been a disaster.)&lt;/p&gt;
    &lt;p&gt;In June 2025, NSA's Mike Jenkins posted the following: "As the CNSA 2.0 profiles should make clear, we are looking for products that support /standalone/ ML-DSA-87 and /standalone/ ML-KEM-1024. If there is one vendor that produces one product that complies, then that is the product that goes on the compliance list and is approved for use. Our interactions with vendors suggests that this won't be a problem in most cases." Evidently there are many companies happy to jump when NSA says jump.&lt;/p&gt;
    &lt;p&gt;Pretending to eat your own dog food. For software engineers, "dogfooding" (a term perhaps coined by Paul Maritz in the 1980s) refers to making regular use of the software that you're writing. This builds your confidence that the software works, and helps iron out problems.&lt;/p&gt;
    &lt;p&gt;But there's also a marketing version of the same concept, where you publicly say that you're using your own software as a way to build other people's confidence in the software. As in other types of marketing, what you're saying doesn't have to be true.&lt;/p&gt;
    &lt;p&gt;Once upon a time, NSA weakened the Data Encryption Standard to just 56 bits. In public, NSA claimed that it hadn't tampered with the standard, and that the "implausibility of public allegations is further demonstrated by the fact that NSA has endorsed the use of DES for the encryption of national security-related information, including selected classified information".&lt;/p&gt;
    &lt;p&gt;This is powerful marketing. Many people hearing this last quote will think "Oh, okay, NSA is using DES, so DES is strong". Koblitz and Menezes claimed that it's "far-fetched" that NSA would have intentionally selected something weak "for U.S. government usage (for both unclassified and classified communications [41])". Many people today will think "Oh, okay, NSA is buying single encryption, so double encryption is unimportant".&lt;/p&gt;
    &lt;p&gt;But DES wasn't strong. NSA had engineered DES to be "weak enough" for NSA to break. NSA wanted DES to "drive out competitors", to "reduce the field that NSA had to be concerned about".&lt;/p&gt;
    &lt;p&gt;It's perfectly plausible that NSA was using DES, but surely NSA was then using DES multiple times (Triple-DES or beyond), which makes it much harder to break (as long as you switch keys frequently). Obviously NSA wouldn't have said "use multiple layers" publicly: NSA wanted to fool people into thinking that DES was secure.&lt;/p&gt;
    &lt;p&gt;Today we have better ciphers than DES. However, for data that it cares about, NSA still uses two independent encryption layers "to mitigate the ability of an adversary to exploit a single cryptographic implementation". Gee, maybe multiple encryption is important after all!&lt;/p&gt;
    &lt;p&gt;Try to put yourself in the mindset of NSA as an attacker. You have a massive budget to "covertly influence and/or overtly leverage" systems to "make the systems in question exploitable"; "to the consumer and other adversaries, however, the systems' security remains intact". One of your action items is to "influence policies, standards and specification for commercial public key technologies". Another is to "shape the worldwide commercial cryptography marketplace to make it more tractable to advanced cryptanalytic capabilities being developed by NSA/CSS".&lt;/p&gt;
    &lt;p&gt;You spend this money pursuing many different attack paths, taking whatever surveillance wins you can get. It's not that everybody was using Dual EC, for example, but you managed to manipulate some people into using it, and for you that's a win.&lt;/p&gt;
    &lt;p&gt;Weakening ECC+PQ to just PQ, normalizing the practice of driving without seatbelts, is another win for you as the attacker. It's adding further vulnerabilities to the cryptographic ecosystem. The point is that, beyond SIKE and many other publicly broken cryptosystems, there will be some further cases where your "advanced cryptanalytic capabilities" break the PQ part while the "consumer and other adversaries" think the PQ part is secure.&lt;/p&gt;
    &lt;p&gt;What do you do with your control over the U.S. military budget? That's another opportunity to "shape the worldwide commercial cryptography marketplace". You can tell people that you won't authorize purchasing double encryption. You can even follow through on having the military publicly purchase single encryption. Meanwhile you quietly spend a negligible amount of money on an independent encryption layer to protect the data that you care about, so you're actually using double encryption.&lt;/p&gt;
    &lt;p&gt;Adoption of double encryption in TLS. "Adoption" in IETF is a preliminary step before standardization: when a WG is "ready to develop a particular document, the most common mechanism is for it to 'adopt' an existing document as a starting point".&lt;/p&gt;
    &lt;p&gt;In March 2025, after the close of a two-week "WG adoption call", the TLS WG chairs declared "consensus to adopt" the "Post-quantum hybrid ECDHE-MLKEM Key Agreement for TLSv1.3" draft.&lt;/p&gt;
    &lt;p&gt;There were no objections to the declaration of consensus on adopting this draft. I had pointed out that the patents on Kyber/ML-KEM create two issues related to IETF's patent policy, but I said that the first issue can be fixed after adoption (before standardization), and I now think that this is also true for the second issue. The risks from patents are orthogonal to the risks from non-hybrids, and I won't say more about patents in this blog post.&lt;/p&gt;
    &lt;p&gt;Why worry about a weaker standard if there's a stronger standard? At this point you might be wondering: if people are driving with seatbelts and this is on its way to being standardized, what's the problem with also having a driving-without-seatbelts standard for reckless fools who want to use that?&lt;/p&gt;
    &lt;p&gt;Think about Dual EC. Dual EC wasn't the only randomness-generation standard. But companies paid for FIPS certification of at least 62 different implementations of Dual EC. NSA bribed the RSA company to change its popular cryptographic library to use Dual EC by default.&lt;/p&gt;
    &lt;p&gt;These companies saw that Dual EC was a standard from a reputable standards organization (in fact, from three such organizations, namely ANSI, ISO, and NIST). Even for companies realizing that Dual EC was a controversial standard pushed by NSA, how many companies would risk losing money by refusing to implement Dual EC? It's easy for purchasing managers to use standards to set purchasing requirements.&lt;/p&gt;
    &lt;p&gt;What's particularly pernicious about a driving-without-seatbelts standard is that a purchasing manager who looks at it has an incentive to pick it instead of the driving-with-seatbelts standard. Wow, I can save $50 for every seatbelt that I skip! Wow, I can save 50 picodollars for every ECC operation that I skip! The purchasing manager doesn't care whether this cost reduction matters in context: every penny saved sounds good, right? The purchasing manager also doesn't realize the standard is dangerous: on the contrary, why would it be a standard if it were unsafe?&lt;/p&gt;
    &lt;p&gt;Soon we're faced with widespread non-usage of seatbelts. And then, years too late, we realize that, oops, something people used and thought was secure actually wasn't, just as in the case of SIKE.&lt;/p&gt;
    &lt;p&gt;Adoption of single encryption in TLS. On 1 April 2025âunfortunately not as a jokeâthe TLS WG chairs issued a two-week "WG adoption call for the ML-KEM Post-Quantum Key Agreement for TLS 1.3 I-D", the non-hybrid draft mentioned above.&lt;/p&gt;
    &lt;p&gt;Here are some quotes (some from me, some from other people) illustrating objections raised on the TLS mailing list during the call period:&lt;/p&gt;
    &lt;p&gt;The draft creates security risks. Sample quote: "SIKE was applied to large volumes of user data as part of the CECPQ2 experiment in 2019. SIKE was publicly broken in 2022. [paragraph break] The only reason that this didn't immediately give away the user data to attackers is that CECPQ2 was ECC+SIKE, rather than just SIKE. [paragraph break] Should we keep rolling out post-quantum cryptosystems to try to stop future quantum attacks? Yes, of course. But, just in case this goes horribly wrong again, let's make sure to keep ECC in place. Any draft violating this should be rejected as a security risk not just by WGs but also by the ISE."&lt;/p&gt;
    &lt;p&gt;The draft violates BCP 188. Sample quote: "To the extent that this is an allusion to NSA purchasing, it violates BCP 188 ('IETF Will Work to Mitigate Pervasive Monitoring')."&lt;/p&gt;
    &lt;p&gt;The draft violates the WG charter. Sample quote: "the draft's regression from ECC+PQ to just PQ is certainly a technology issue; and this is fatal, as a contravention of the 'improve security' goal in the WG charter".&lt;/p&gt;
    &lt;p&gt;There are no principles supporting the adoption decision. Sample quote: "I don't see what criteria we might use in adopting this that wouldn't leave the WG open to accusations of favouritism if we don't adopt other pure PQ national standards that will certainly arise".&lt;/p&gt;
    &lt;p&gt;The draft's motivation section is circular. Sample quote: there is "a preliminary step that has been skipped here, namely identifying why the proposal is claimed to be adding something important. The draft's motivation sentence consists of rearranging buzzwords without answering the question: 'Having a fully post-quantum (not hybrid) key agreement option for TLS 1.3 is necessary for migrating beyond hybrids and for users that need to be fully post-quantum.' "&lt;/p&gt;
    &lt;p&gt;The draft increases software complexity. Sample quote: "The main stated benefit of using a standalone ML-KEM is complexity reduction, but with the current progress in the deployment of the ML-KEM + ECC hybrid method, a standalone ML-KEM method actually increases overall complexity in software stacks." (This was responding to a claim during the adoption-call period that the draft provided a "compute / dependency base that is minimalist".)&lt;/p&gt;
    &lt;p&gt;This is just a high-level survey of the objections. These quotes aren't intended to convey the full text of objections. They also aren't intended to convey the number of people objecting; I'll get back to that below.&lt;/p&gt;
    &lt;p&gt;Standardization procedures. How does a standards-development organization handle objections? The law on this topic in the United States has been settled for decades.&lt;/p&gt;
    &lt;p&gt;The starting point is that agreements in restraint of interstate commerce are illegal. Courts interpret this to cover various types of agreements that are illegal per se, such as price fixing and group boycotts, along with further agreements that unreasonably interfere with competition.&lt;/p&gt;
    &lt;p&gt;Here's an example from the 1980s. Agents of a company that was leading its market, McDonnell and Miller, took control of a subcommittee of the American Society of Mechanical Engineers, a standards-development organization. They generated a letter, under ASME's apparent authority, declaring that a new competitor's product wasn't compliant. They distributed that letter to buyers, of course damaging the new competitor's business.&lt;/p&gt;
    &lt;p&gt;The competitor, HydroLevel, sued the conspiratorsâincluding ASME, which didn't even know the abuse was happening. HydroLevel won. ASME was ultimately forced to pay millions of dollars. The Supreme Court didn't mince words in describing the anti-competitive power of standards-development organizations:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;ASME wields great power in the Nation's economy. Its codes and standards influence the policies of numerous States and cities, and, as has been said about "so-called voluntary standards" generally, its interpretations of its guidelines "may result in economic prosperity or economic failure, for a number of businesses of all sizes throughout the country," as well as entire segments of an industry. ... ASME can be said to be "in reality, an extragovernmental agency which prescribes rules for the regulation and restraint of interstate commerce." ... When it cloaks its subcommittee officials with the authority of its reputation, ASME permits those agents to affect the destinies of businesses, and thus gives them the power to frustrate competition in the marketplace.&lt;/p&gt;
      &lt;p&gt;... Many of ASME's officials are associated with members of the industries regulated by ASME's codes. Although undoubtedly most serve ASME without concern for the interests of their corporate employers, some may well view their positions with ASME, at least in part, as an opportunity to benefit their employers. When the great influence of ASME's reputation is placed at their disposal, the less altruistic of ASME's agents have an opportunity to harm their employers' competitors through manipulation of ASME's codes.&lt;/p&gt;
      &lt;p&gt;... Only ASME can take systematic steps to make improper conduct on the part of all its agents unlikely, and the possibility of civil liability will inevitably be a powerful incentive for ASME to take those steps. Thus, a rule that imposes liability on the standard-setting organization -- which is best situated to prevent antitrust violations through the abuse of its reputation -- is most faithful to the congressional intent that the private right of action deter antitrust violations.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Another Supreme Court case rejected an argument of antitrust immunity for another standards-development organization. The organization made various decisions by majority vote, and had allowed steel manufacturers to pack a standards-development group, filling the group with pro-steel agents to take over a vote. The Supreme Court again recognized the importance of procedural safeguards preventing abuse:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The antitrust validity of these efforts is not established, without more, by petitioner's literal compliance with the rules of the Association, for the hope of procompetitive benefits depends upon the existence of safeguards sufficient to prevent the standard-setting process from being biased by members with economic interests in restraining competition. An association cannot validate the anticompetitive activities of its members simply by adopting rules that fail to provide such safeguards.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The Supreme Court declined at that point to draw a dividing line saying which safeguards were required. In 2004, Congress passed a law pinning this down: the new law said that "standards development activity" by a "standards development organization" isn't illegal per se, and gave definitions of the quoted phrases.&lt;/p&gt;
    &lt;p&gt;In particular, a "standards development organization" is required by law to "incorporate the attributes of openness, balance of interests, due process, an appeals process, and consensus in a manner consistent with the Office of Management and Budget Circular Number A-119, as revised February 10, 1998".&lt;/p&gt;
    &lt;p&gt;That OMB rule, in turn, defines "consensus" as follows: "general agreement, but not necessarily unanimity, and includes a process for attempting to resolve objections by interested parties, as long as all comments have been fairly considered, each objector is advised of the disposition of his or her objection(s) and the reasons why, and the consensus body members are given an opportunity to change their votes after reviewing the comments".&lt;/p&gt;
    &lt;p&gt;The Antitrust Division of the Department of Justice inserted itself into a private court case in 2019 to say that "the United States has a significant interest in the correct interpretation of the exemption from per se treatment for standards development organizations engaging in standard setting activities".&lt;/p&gt;
    &lt;p&gt;Deputy Assistant Attorney General Alexander Okuliar in the same division presented a longer statement to ANSI in 2020 regarding antitrust and standards. The statement mentioned ANSI's compliance with the same requirements and said "From an antitrust perspective, these requirements are central".&lt;/p&gt;
    &lt;p&gt;Here's a random example of what an objection-response document looks like in ISO, IEC, etc. Not the best user interface, but it gets the job done.&lt;/p&gt;
    &lt;p&gt;There was not general agreement to adopt the non-hybrid draft. Now that we have the concept of consensus in mind, let's go back to what happened in the IETF TLS WG regarding the non-hybrid draft.&lt;/p&gt;
    &lt;p&gt;During the adoption-call period, there were statements from 20 people unequivocally supporting adoption: David Adrian from Google, Joseph Birr-Pixton, Uri Blumenthal from Department of Defense subsidiary Lincoln Labs, "Flo D" from GCHQ, Quynh Dang from NIST, Viktor Dukhovni, Scott Fluhrer from Cisco, Rebecca Guthrie from NSA, Russ Housley, Alicja Kario from IBM subsidiary Red Hat, Kris Kwiatkowski, Andrei Popov from Microsoft, Tirumal Reddy from Cisco, Yaroslav Rosomakho, Jan Schaumann, Sophie Schmieg from Google, Martin Thomson from Mozilla, Filippo Valsorda formerly from Google, Loganaden Velvindron, and Thom Wiggers.&lt;/p&gt;
    &lt;p&gt;There were also statements from 2 people conditionally supporting adoption: John Mattsson from Ericsson ("I support adoption as long as reuse of ephemeral keys is normatively forbidden, i.e. MUST NOT reuse") and Yaakov Stein ("I support adoption of pure PQC KEMs drafts with Intended status: Informational (meaning that the IETF is not recommending using)").&lt;/p&gt;
    &lt;p&gt;However, there were statements from 7 people unequivocally opposing adoption: Thomas Bellebaum ("I agree with Stephen on this one and would not support adoption of non-hybrids"), Andrey Jivsov ("I am opposed to the adoption of ML-KEM at this time"), Stephen Farrell ("I'm opposed to adoption, at this time"), Rich Salz ("I was all set to say that I am in favor of adoption, but Stephen's post changed my mind. [paragraph break] The conservative and safe thing is to stick to hybrids and that is what the IETF should do for now"), Rob Sayre ("I oppose adoption"), Sun Shuzhou ("I'm opposed to adoption"), and me.&lt;/p&gt;
    &lt;p&gt;Even assuming that the 2 statements of conditional support are treated as positive votes, the overall situation here, 22 positive votes and 7 negative votes, does not qualify as general agreement. "General" means "shared by or affecting most people, or most of the people in a group"; "most" means "nearly all of the people or things in a group, or nearly all of something"; the phrase "general agreement" means that nearly everyone agrees. Merely having three quarters agree is not good enough.&lt;/p&gt;
    &lt;p&gt;What happens if a standards-development organization issues a rule declaring that "general agreement" exists even when a quarter of the votes are in opposition? I haven't found any court cases on point, but I would expect courts to reject this as being inconsistent with the plain meaning of "general agreement".&lt;/p&gt;
    &lt;p&gt;Anyway, IETF hasn't attempted to issue such a rule. On the contrary, IETF claims that WG decisions are not taken by voting: "Decisions within WGs, as with the broader IETF, are taken by 'rough consensus' and not by voting." This begs the question of what IETF thinks "rough consensus" means. Letting chairs make arbitrary decisions is a violation of due process.&lt;/p&gt;
    &lt;p&gt;More to the point, IETF can't override the definition of "consensus" in the law. That definition requires general agreement. Adoption of this draft was controversial, and didn't reach general agreement.&lt;/p&gt;
    &lt;p&gt;Objections were not handled properly. Within the statements in favor of adoption, most of the statements were very short: e.g., just the words "I support adoption" with no further comments.&lt;/p&gt;
    &lt;p&gt;Some statements in favor of adoption did say more, such as stating circular arguments for the draft (e.g.: "as time progresses, non-hybrid key exchanges will become more and more commonplace, so why not have it already defined?"), or expressing concerns about key reuse (e.g.: "I also share John's concerns about key reuse, but would prefer to litigate that in the working group, rather than during adoption"), without responding to the content of the objections.&lt;/p&gt;
    &lt;p&gt;There was a response to one word in the lack-of-principles objection. (The response was as follows: "The NIST competition was international, and Kyber was developed by an international team. I struggle to understand how adopting this document would somehow be 'favoritism'.") A brief note by one supporter tangentially related to one objection falls far short of fair consideration of each objection by the group as a whole.&lt;/p&gt;
    &lt;p&gt;I tried to engage that supporter in discussion. I started by quoting the following earlier statement in the commentator's message: "I find it to be cognitive dissonance to simultaneously argue that the quantum threat requires immediate work, and yet we are also somehow uncertain of if the algorithms are totally broken. Both cannot be true at the same time." I responded as follows:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Rolling out PQ is trying to reduce the damage from an attacker having a quantum computer within the security lifetime of the user data. Doing that as ECC+PQ instead of just PQ is trying to reduce the damage in case the PQ part is broken. These actions are compatible, so how exactly do you believe they're contradictory?&lt;/p&gt;
      &lt;p&gt;Here's an analogous example of basic risk mitigation: there's endless work that goes into having planes not crash, not hit turbulence, etc., but we still ask airplane passengers to keep their seatbelts on whenever they're in their seats.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;There was still no reply to this by the time the adoption call closed two weeks later.&lt;/p&gt;
    &lt;p&gt;The broader pattern was that objectors were engaging in discussion while supporters were not. The majority process wasn't "attempting to resolve each objection"; it was simply collecting positive votes, trying to override objections from the minority without even answering those objections, let alone trying to resolve them.&lt;/p&gt;
    &lt;p&gt;That's in an organization saying that decisions aren't taken by voting. The same organization also says, as part of explaining why it's supposedly complying with antitrust law: "IETF activities are conducted with extreme transparency, in public forums. Decision-making requires achieving broad consensus via these public processes."&lt;/p&gt;
    &lt;p&gt;When there's an objection, the legal concept of consensus requires not just fairly considering the objection, and not just attempting to resolve the objection, butâif resolution failsâhaving the group agree on the contents of a response to the objection. That's an official statement of why the objection was overridden. It's something that can be appealed if it's wrong. Consider, for example, ISO's simple rule saying "Committees are required to respond to all comments received". In IETF, there weren't even informal responses to the objections listed above, let alone official responses.&lt;/p&gt;
    &lt;p&gt;The chairs declared consensus anyway. Shortly before the end of the specified adoption-call period, the chairs declared "consensus to adopt this draft as a working group item". There were some notes on followup procedures, but there was no explanation of the rationale for this claim of consensus.&lt;/p&gt;
    &lt;p&gt;I challenged the claim of consensus:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Um, what? There were several people (including me) raising objections on list to basic flaws in this draft, such as (1) the failure to provide an ECC backup to limit the damage from further security problems in the PQ layer, (2) the failure to provide an engineering justification for this option, and (3) the lack of any principles that would justify saying no to options selected by other governments if this option is allowed.&lt;/p&gt;
      &lt;p&gt;Your message doesn't explain how you came to the conclusion that there's consensus. Surely you aren't relying on some tally of positive votes to ram this document through while ignoring objections; voting isn't how IETF is supposed to work. So how did you come to this conclusion?&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;A few days later, the chairs responded that they had declared consensus "because there is clearly sufficient interest to work on this draft".&lt;/p&gt;
    &lt;p&gt;I said that this was ambiguous (sufficient for what?); said that in any case this criterion was improper since it "would allow a draft to be adopted over amply justified objections of almost all WG participants, simply because the chairs and a few participants say they have enough interest in working on the draft"; and asked for an explicit statement of whether this was the complete explanation of why the chairs had declared consensus.&lt;/p&gt;
    &lt;p&gt;The chairs responded that "sufficient" means "that there were enough people willing to review the draft". They added that "WGs groups have adopted drafts with much less support than this one received." Gee, that's confidence-inspiring.&lt;/p&gt;
    &lt;p&gt;Meanwhile an IETF "security area director" had jumped into the discussion, in particular writing "There is clearly consensus based on the 67 responses to the adoption call. ... The vast majority was in favour of adoption ... There were a few dissenting opinions".&lt;/p&gt;
    &lt;p&gt;Remember that the actual tallies were 20 supporters, 2 conditional supporters, and 7 opponents, even if some people (for example, me) had sent multiple messages. Nobody had posted the actual tallies at this point: there was just this "security area director" claiming that the "vast majority" of the "67 responses" were in favor while there were only "a few dissenting opinions". Also remember that this is an organization that claims that it doesn't make decisions by voting.&lt;/p&gt;
    &lt;p&gt;The "security area director" continued that "you cherry-picking when to call consensus evaluation 'voting' depending on whether misnaming this is in your advantage ... is dishonestly manipulative"; that I was violating the "code of conduct"; and that if I did not "voluntarily stop this kind of behaviour" there would be "measures under the terms of RFC3934 which is part of BCP25".&lt;/p&gt;
    &lt;p&gt;In a followup message, the "security area director" wrote "you calling into question this consensus call of the WG chair is abusive and follows a repetitive pattern. Nevertheless, for now this is your right ... you are attempting to bait the chairs to say they took inventory of the public emails ... there comes a point where you will be prevented from further playing these games".&lt;/p&gt;
    &lt;p&gt;Wait a minute: "for now this is your right" (emphasis added) and "you will be prevented from further playing these games"? Sounds ominous. What did the "security area director" mean by this? No more objections in IETF? No more appeals? NSA's minions can just ram their non-consensual drafts through IETF without opponents even being allowed to speak up?&lt;/p&gt;
    &lt;p&gt;Actually, yes, there's a stealth activity going on right now that will have this effect unless enough people take action by Tuesday the 7th. I hope to have another blog post up in a day or two saying what's going on here.&lt;/p&gt;
    &lt;p&gt;Anyway, I've filed a formal complaint regarding the claim of consensus to adopt. So far the complaint hasn't been handled properly, but hope springs eternal. I don't have an answer yet to the subtitle question of this blog post.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45477206</guid><pubDate>Sat, 04 Oct 2025 22:16:33 +0000</pubDate></item><item><title>Space Mission Options for Reconnaissance and Mitigation of Asteroid 2024 YR4</title><link>https://arxiv.org/abs/2509.12351</link><description>&lt;doc fingerprint="e49c962254f5788f"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Astrophysics &amp;gt; Instrumentation and Methods for Astrophysics&lt;/head&gt;&lt;p&gt; [Submitted on 15 Sep 2025]&lt;/p&gt;&lt;head rend="h1"&gt;Title:Space Mission Options for Reconnaissance and Mitigation of Asteroid 2024 YR4&lt;/head&gt;View PDF HTML (experimental)&lt;quote&gt;Abstract:Near-Earth asteroid 2024 YR4 was discovered on 2024-12-27 and its probability of Earth impact in December 2032 peaked at about 3% on 2025-02-18. Additional observations ruled out Earth impact by 2025-02-23. However, the probability of lunar impact in December 2032 then rose, reaching about 4% by the end of the apparition in May 2025. James Webb Space Telescope (JWST) observations on 2025-03-26 estimated the asteroid's diameter at 60 +/- 7 m. Studies of 2024 YR4's potential lunar impact effects suggest lunar ejecta could increase micrometeoroid debris flux in low Earth orbit up to 1000 times above background levels over just a few days, possibly threatening astronauts and spacecraft. In this work, we present options for space missions to 2024 YR4 that could be utilized if lunar impact is confirmed. We cover flyby &amp;amp; rendezvous reconnaissance, deflection, and robust disruption of the asteroid. We examine both rapid-response and delayed launch options through 2032. We evaluate chemical and solar electric propulsion, various launch vehicles, optimized deep space maneuvers, and gravity assists. Re-tasking extant spacecraft and using built spacecraft not yet launched are also considered. The best reconnaissance mission options launch in late 2028, leaving only approximately three years for development at the time of this writing in August 2025. Deflection missions were assessed and appear impractical. However, kinetic robust disruption missions are available with launches between April 2030 and April 2032. Nuclear robust disruption missions are also available with launches between late 2029 and late 2031. Finally, even if lunar impact is ruled out there is significant potential utility in deploying a reconnaissance mission to characterize the asteroid.&lt;/quote&gt;&lt;p&gt; Current browse context: &lt;/p&gt;&lt;p&gt;astro-ph.IM&lt;/p&gt;&lt;p&gt; Change to browse by: &lt;/p&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;p&gt; export BibTeX citation Loading... &lt;/p&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;p&gt; IArxiv Recommender (What is IArxiv?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45477742</guid><pubDate>Sat, 04 Oct 2025 23:42:55 +0000</pubDate></item><item><title>Mod. 5140 - IBM's First Laptop Computer</title><link>https://richardsapperdesign.com/products/mod-5140/</link><description>&lt;doc fingerprint="515b578191daf980"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Mod. 5140&lt;/head&gt;
    &lt;p&gt;With Colleen Sweeney&lt;/p&gt;
    &lt;p&gt;Prize Premio SMAU 1986&lt;lb/&gt; IF Industrie Forum Design Award Hannover 1988&lt;lb/&gt; Selection Compasso d’Oro 1987&lt;/p&gt;
    &lt;p&gt;This was IBM’s first laptop computer. It was developed in the IBM lab in Boca Raton, Florida, an area notoriously infested with alligators. From its side, the Mod. 5140 evokes a resemblance to an alligator’s head. When the printer is attached to its end, with paper flowing from the rear, it resembles the animal’s tail.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45477971</guid><pubDate>Sun, 05 Oct 2025 00:35:10 +0000</pubDate></item><item><title>Parrot – type-safe SQL in Gleam, supports SQlite, PostgreSQL and MySQL</title><link>https://github.com/daniellionel01/parrot</link><description>&lt;doc fingerprint="e20ba422ef3c70fe"&gt;
  &lt;main&gt;
    &lt;quote&gt;&lt;p&gt;🚨 Exciting News&lt;/p&gt;&lt;lb/&gt;Parrot got listed a community project on the sqlc website! 🦜🎉&lt;lb/&gt;Check it out here: https://docs.sqlc.dev/en/latest/reference/language-support.html&lt;/quote&gt;
    &lt;p&gt;Table of contents generated with markdown-toc&lt;/p&gt;
    &lt;p&gt;Most of the heavy lifting features are provided by / built into sqlc, I do not aim to take credit for them.&lt;/p&gt;
    &lt;p&gt;☑️ Supports SQlite, PostgreSQL and MySQL.&lt;lb/&gt; ☑️ Multiple queries per file.&lt;lb/&gt; ☑️ Database client agnostic.&lt;lb/&gt; ☑️ Utility wrappers for popular gleam database libraries (lpil/sqlight, lpil/pog).&lt;lb/&gt; ☑️ Automatically pulls the schema of your database.&lt;lb/&gt; ☑️ Automatically downloads sqlc binary.&lt;lb/&gt; ☑️ Named parameters.*1 &lt;/p&gt;
    &lt;p&gt;*1: Meaning that it infers the names of the parameters from your sql queries in the gleam function you call. for example for a query called &lt;code&gt;FindUser&lt;/code&gt;, defined as &lt;code&gt;SELECT * FROM user WHERE username = $1&lt;/code&gt;, parrot will produce a function where the arguments match those column names: &lt;code&gt;pub fn find_user(username: String) { ... }&lt;/code&gt;. If you have multiple parameters of the same data types this can avoid confusion and bugs.&lt;/p&gt;
    &lt;code&gt;$ gleam add parrot&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Parrot will look for all *.sql files in any sql directory under your project's src directory.&lt;/item&gt;
      &lt;item&gt;Each *.sql file can contain as many SQL queries as you want.&lt;/item&gt;
      &lt;item&gt;All of the queries will compile into a single &lt;code&gt;src/[project name]/sql.gleam&lt;/code&gt;module.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Here are some links to help you start out, if you are unfamiliar with the sqlc annotation syntax:&lt;/p&gt;
    &lt;p&gt;Here is an example of the file structure:&lt;/p&gt;
    &lt;code&gt;├── gleam.toml
├── README.md
├── src
│   ├── app.gleam
│   └── sql
│       ├── auth.sql
│       └── posts.sql
└── test
   └── app_test.gleam&lt;/code&gt;
    &lt;code&gt;# automatically detects database &amp;amp; engine from env (DATABASE_URL by default)
$ gleam run -m parrot

# provide connection string from different environment variable
$ gleam run -m parrot -- -e PG_DATABASE_URL

# specify sqlite file
$ gleam run -m parrot -- --sqlite &amp;lt;file_path&amp;gt;

# see all options
$ gleam run -m parrot help&lt;/code&gt;
    &lt;p&gt;If you use SQLite, you also need to have installed sqlite3.&lt;/p&gt;
    &lt;p&gt;If you use MySQL, you also need to have installed mysqldump (comes by default if you have a mysql client installed).&lt;/p&gt;
    &lt;p&gt;If you use PostgreSQL, you also need to have installed pg_dump (comes by default if you have a postgresql client installed).&lt;/p&gt;
    &lt;p&gt;You now have type safe access to your sql queries.&lt;/p&gt;
    &lt;p&gt;You might want to write wrapper functions for the database client library of your choice. If you are using lpil/pog or lpil/sqlight, you are in luck! You can find functions to copy &amp;amp; paste into your codebase here: wrappers&lt;/p&gt;
    &lt;p&gt;An example with lpil/sqlight:&lt;/p&gt;
    &lt;code&gt;import app/sql
import parrot/dev

fn parrot_to_sqlight(param: dev.Param) -&amp;gt; sqlight.Value {
  // ...
}

pub fn main() {
  // ...

  let #(sql, with, expecting) = sql.get_user_by_username("alice")
  let with = parrot_to_sqlight(with)
  let row = sqlight.query(sql, on:, with:, expecting:)

  // ...
}&lt;/code&gt;
    &lt;p&gt;If you want to see how this library works in action, take a look at the integration tests:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;PostgreSQL: integration/psql&lt;/item&gt;
      &lt;item&gt;MySQL: integration/mysql&lt;/item&gt;
      &lt;item&gt;SQlite: integration/sqlite&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;just is used to run project commands.&lt;/p&gt;
    &lt;p&gt;There are scripts to spawn a MySQL or PostgreSQL docker container:&lt;/p&gt;
    &lt;p&gt;For example:&lt;/p&gt;
    &lt;code&gt;$ ./bin/mysql.sh
# or
$ ./bin/psql.sh&lt;/code&gt;
    &lt;code&gt;$ just test-sqlite
$ just test-mysql
$ just test-psql&lt;/code&gt;
    &lt;p&gt;As with everything in software, there are some quirks with this library, due to the nature of your database of choice and sqlc.&lt;/p&gt;
    &lt;p&gt;If you have an &lt;code&gt;INTEGER[][]&lt;/code&gt; column in Postgres, &lt;code&gt;pg_dump&lt;/code&gt; does not correctly identify
the column as a two-dimensional array and therefore only gives you a &lt;code&gt;List(Int)&lt;/code&gt; instead
of a &lt;code&gt;List(List(Int))&lt;/code&gt;. If this is a problem for you, you can raise an issue and
we might come up with a solution or workaround.&lt;/p&gt;
    &lt;p&gt;There are a couple of complex data types that are explictly made &lt;code&gt;dynamic&lt;/code&gt;
since they are too complex to handle with the current implementation.
There is a plan for a better and more flexible implementation. Until then,
it will be wrapped in a dynamic type.&lt;/p&gt;
    &lt;p&gt;So here is the catch: you can only execute parrot in an erlang gleam application. However the generated code will also run in a javascript environment. So if you need parrot for a javascript project, you can create a separate package and copy over the generated module and that will work.&lt;/p&gt;
    &lt;p&gt;This library supports everything that sqlc supports. As the time of this writing that would be MySQL, PostgreSQL and SQlite.&lt;/p&gt;
    &lt;p&gt;You can read more on language &amp;amp; SQL support here: https://docs.sqlc.dev/en/stable/reference/language-support.html&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;embeddeding structs (https://docs.sqlc.dev/en/stable/howto/embedding.html)&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Certain query annotations are not supported and will panic the process:&lt;/p&gt;&lt;code&gt;:execrows&lt;/code&gt;,&lt;code&gt;:execlastid&lt;/code&gt;,&lt;code&gt;:batchexec&lt;/code&gt;,&lt;code&gt;:batchone&lt;/code&gt;,&lt;code&gt;:batchmany&lt;/code&gt;,&lt;code&gt;:copyfrom&lt;/code&gt;. You can read more about it here: https://docs.sqlc.dev/en/stable/reference/query-annotations.html&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Ideas and actionable tasks are collected and organised here: https://github.com/daniellionel01/parrot/issues&lt;/p&gt;
    &lt;p&gt;Contributions are welcomed!&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;This project was heavily inspired by &lt;code&gt;squirrel&lt;/code&gt;(Hex, GitHub). Thank you @giacomocavalieri!&lt;/item&gt;
      &lt;item&gt;Thank you to &lt;code&gt;sqlc&lt;/code&gt;(GitHub, Website)&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45478033</guid><pubDate>Sun, 05 Oct 2025 00:51:44 +0000</pubDate></item><item><title>1Password CLI Vulnerability</title><link>https://codeberg.org/manchicken/1password-cli-vuln-disclosure</link><description>&lt;doc fingerprint="1e35fc187a3366d8"&gt;
  &lt;main&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;naughty&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;.gitignore&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;index.cjs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;LICENSE.md&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;package-lock.json&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;package.json&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;README.md&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h1"&gt;Testing 1Password&lt;/head&gt;
    &lt;p&gt;In October of 2023, I reported a vulnerability to 1Password regarding their &lt;code&gt;op&lt;/code&gt; (a.k.a. &lt;code&gt;1password-cli&lt;/code&gt;) program. In my report I detailed that their approach to prompting users only once, and then leaving the vault open to the CLI was easily exploited in supply-chain scenarios, especially when a threat actor targets developer toolchains. There are two attack paths I highlighted, and I supplied them with a proof for one of them.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Warning&lt;/p&gt;
      &lt;p&gt;This document is for research and educational purposes. Any use for the information below to cause harm or engaged in unauthorized access of any computer system is strictly prohibited.&lt;/p&gt;
      &lt;p&gt;Responsible disclosure was given on 2nd October, 2023 to 1Password, and in January of 2024 1Password authorized public disclosure of this vulnerability via BugCrowd.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This demo was tested across the three most recent versions of macOS, using &lt;code&gt;zsh&lt;/code&gt; and &lt;code&gt;bash&lt;/code&gt; shells using the latest 1Password desktop client.&lt;/p&gt;
    &lt;head rend="h2"&gt;Two Attack Paths&lt;/head&gt;
    &lt;p&gt;Both attacks would be a supply-chain attack, but there are two distinct paths:&lt;/p&gt;
    &lt;head rend="h3"&gt;IDE Path&lt;/head&gt;
    &lt;p&gt;The IDE path is pretty straight-forward, and I think carries the greatest risk:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;I install the 1Password extension because I responsibly wish to keep my tokens in a safe place (e.g. not my &lt;code&gt;$ENV&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;I also use the MySQL extension in my IDE, it's nice to be able to stay in the same tool&lt;/item&gt;
      &lt;item&gt;I use the 1Password extension to resolve secret references, which requires me to unlock my vault&lt;/item&gt;
      &lt;item&gt;I installed a new red theme, red is my favorite color&lt;/item&gt;
      &lt;item&gt;That red theme is an extension, and contained malicious code which uses the &lt;code&gt;op&lt;/code&gt;NPM module to enumerate and exfiltrate every vault that I have access to&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Package manager path&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;I install the 1Password CLI, and I use &lt;code&gt;op&lt;/code&gt;to protect secrets in my environment&lt;/item&gt;
      &lt;item&gt;I use GitHub Packages for NPM packages which are private to my organization&lt;/item&gt;
      &lt;item&gt;I hear of a really nifty plugin which will allow me to add syntax highlighting to shell output on this CLI project I'm working on, so I &lt;code&gt;npm i syntax-highlighting-stuff&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Oh no! &lt;code&gt;syntax-highlighting-stuff&lt;/code&gt;had a&lt;code&gt;post-install&lt;/code&gt;script on it, and it enumerated and exfiltrated the secrets from every vault I have access to&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Observed patterns&lt;/head&gt;
    &lt;p&gt;It seems like the vulnerability is that once you unlock your vault, anything spawned from the parent process of whatever opened the vault retains an active session to that open vault.&lt;/p&gt;
    &lt;code&gt;$ op run -- ls # This prompts me to unlock my vault
$ op run -- ls # The second call does not prompt me, the vault is already open
$ op read 'op://Foo/Bar/baz' # Still doesn't prompt me again because the vault is still open
&lt;/code&gt;
    &lt;p&gt;This also works with subprocesses:&lt;/p&gt;
    &lt;code&gt;$ export GITHUB_TOKEN='op://Foo/Bar/baz'
$ op run -- env | grep GITHUB_TOKEN # This will prompt me
$ bash # Start a new shell subprocess
$ op run -- env | grep GITHUB_TOKEN # This will not prompt me
$ bash # Now we're two shells deep in subprocesses
$ op run -- env | grep GITHUB_TOKEN # This will still not prompt me
&lt;/code&gt;
    &lt;head rend="h2"&gt;The Proof&lt;/head&gt;
    &lt;p&gt;This repository contains the code from the proof that I submitted to 1Password on 2nd October, 2023. Here are the instructions for running the proof:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The &lt;code&gt;index.cjs&lt;/code&gt;has a module which runs the&lt;code&gt;naughty&lt;/code&gt;module.&lt;/item&gt;
      &lt;item&gt;Either using netcat or &lt;code&gt;simple-exfil-service&lt;/code&gt;, listen on port&lt;code&gt;4242&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;To run this test, simply run &lt;code&gt;op run npm install&lt;/code&gt;like you needed a GitHub token&lt;/item&gt;
      &lt;item&gt;Afterward, check your output from port 4242, but also check to see if there is a &lt;code&gt;/tmp/naughty&lt;/code&gt;file&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Here's what the person running &lt;code&gt;npm i&lt;/code&gt; would see:&lt;/p&gt;
    &lt;code&gt;❯ op run -- npm i

&amp;gt; 1password-cli-risks@1.0.0 postinstall
&amp;gt; node ./index.cjs

theItem:  {
  "id": "[redacted]",
  "title": "Fake Website Login",
  "version": 1,
  "vault": {
    "id": "[redacted]",
    "name": "Employee"
  },
  "category": "LOGIN",
  "last_edited_by": "[redacted]",
  "created_at": "2023-10-02T17:28:50Z",
  "updated_at": "2023-10-02T17:28:50Z",
  "additional_information": "fake.user",
  "fields": [
    {
      "id": "username",
      "type": "STRING",
      "purpose": "USERNAME",
      "label": "username",
      "value": "fake.user",
      "reference": "op://Employee/Fake Website Login/username"
    },
    {
      "id": "password",
      "type": "CONCEALED",
      "purpose": "PASSWORD",
      "label": "password",
      "value": "this-is-the-fake-password-in-plaintext",
      "reference": "op://Employee/Fake Website Login/password",
      "password_details": {
        "strength": "FANTASTIC"
      }
    },
    {
      "id": "notesPlain",
      "type": "STRING",
      "purpose": "NOTES",
      "label": "notesPlain",
      "reference": "op://Employee/Fake Website Login/notesPlain"
    }
  ]
}
Done.

up to date, audited 8 packages in 5s

found 0 vulnerabilities
&lt;/code&gt;
    &lt;p&gt;You can see that the demo attack is printing those values to STDOUT. I am only dumping one value, but the &lt;code&gt;op&lt;/code&gt; program and JavaScript library do have the ability to enumerate items in a vault, and vaults themselves.&lt;/p&gt;
    &lt;p&gt;Here's what my exfiltration server sees:&lt;/p&gt;
    &lt;code&gt;Request Headers:  {
  host: 'localhost:4242',
  connection: 'keep-alive',
  'content-type': 'text/plain;charset=UTF-8',
  accept: '*/*',
  'accept-language': '*',
  'sec-fetch-mode': 'cors',
  'user-agent': 'node',
  'accept-encoding': 'gzip, deflate',
  'content-length': '1082'
}
Request URL:  /
Received data: {
  "id": "[redacted]",
  "title": "Fake Website Login",
  "version": 1,
  "vault": {
    "id": "[redacted]",
    "name": "Employee"
  },
  "category": "LOGIN",
  "last_edited_by": "[redacted]",
  "created_at": "2023-10-02T17:28:50Z",
  "updated_at": "2023-10-02T17:28:50Z",
  "additional_information": "fake.user",
  "fields": [
    {
      "id": "username",
      "type": "STRING",
      "purpose": "USERNAME",
      "label": "username",
      "value": "fake.user",
      "reference": "op://Employee/Fake Website Login/username"
    },
    {
      "id": "password",
      "type": "CONCEALED",
      "purpose": "PASSWORD",
      "label": "password",
      "value": "this-is-the-fake-password-in-plaintext",
      "reference": "op://Employee/Fake Website Login/password",
      "password_details": {
        "strength": "FANTASTIC"
      }
    },
    {
      "id": "notesPlain",
      "type": "STRING",
      "purpose": "NOTES",
      "label": "notesPlain",
      "reference": "op://Employee/Fake Website Login/notesPlain"
    }
  ]
}
&lt;/code&gt;
    &lt;p&gt;Notice that the &lt;code&gt;value&lt;/code&gt; for the &lt;code&gt;password&lt;/code&gt; is in plaintext in both cases.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Risk&lt;/head&gt;
    &lt;p&gt;The 1Password CLI is marketed as a tool which makes technical practitioners safer by protecting credentials that are traditionally stored in plaintext in a user's environment variables on their local machine. This vulnerability demonstrates that while this does get the secrets out of your environment, it also drastically expands the potential blast radius for a successful malware or supply-chain attack.&lt;/p&gt;
    &lt;p&gt;To put it simply: the risk here is not that your GitHub secret will be leaked via an environment variable, the risk is that every vault you have access to could be dumped by a threat actor.&lt;/p&gt;
    &lt;p&gt;Additionally, as agentic AI tools become more commonplace, that may add additional risk factors which have yet to be considered in the research I'm presenting here.&lt;/p&gt;
    &lt;p&gt;The &lt;code&gt;op&lt;/code&gt; tool doesn't just possess the ability to get individual items, it also has the ability to enumerate your vaults (&lt;code&gt;op vault list&lt;/code&gt;) and to enumerate items in a given vault (&lt;code&gt;op item list --vault abc123&lt;/code&gt;). The JavaScript module supports all of the same commands that the &lt;code&gt;op&lt;/code&gt; CLI tool does, too.&lt;/p&gt;
    &lt;head rend="h2"&gt;Attempts to Mitigate&lt;/head&gt;
    &lt;p&gt;I have explored a number of paths to mitigate this.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Following the suggestion of a colleague, I experimented with using a separate vault for CLI secrets &lt;list rend="ul"&gt;&lt;item&gt;This doesn't work because you cannot limit the default vault from being read by the CLI&lt;/item&gt;&lt;item&gt;Not only that, but you can't set limits for things like shared vaults&lt;/item&gt;&lt;item&gt;As weird as it sounds, when you unlock one vault, you unlock all vaults which are accessible to the CLI tool&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;1Password recommended using service accounts to mitigate this, and I did try it, but I found some challenges as I started thinking of how to roll it out to teams &lt;list rend="ul"&gt;&lt;item&gt;This kinda sucks because that means each developer gets a separate service account user on their workstation&lt;/item&gt;&lt;item&gt;This also means that the developer has to manage a service account&lt;/item&gt;&lt;item&gt;In addition to being unweildy, this also means that each engineer must be diligent to not enable the shiny "Integrate with 1Password CLI" button in the Developer tab on the GUI settings&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Recommendations&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;I recommend that folks avoid using &lt;code&gt;op&lt;/code&gt;on developer workstations until 1Password has released a fix for these scenarios&lt;list rend="ul"&gt;&lt;item&gt;The best way to do this appears to be to make sure CLI integration checkbox is unchecked in the Developer settings screen.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;I recommend that when you must use &lt;code&gt;op&lt;/code&gt;, that it be limited to service accounts, per 1Password's recommendation, and that you carefully verify that the "Integrate with 1Password CLI" box is unchecked in the GUI settings&lt;/item&gt;
      &lt;item&gt;I recomment that, where possible, you get in the habit of always passing &lt;code&gt;--ignore-scripts&lt;/code&gt;to&lt;code&gt;npm&lt;/code&gt;commands, and find a similar pattern for any other package manager that you use in conjunction with&lt;code&gt;op&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I strongly recommend that 1Password modify their product to resolve this problem. Just spitballing, I think any of the following would be sufficient (this is an OR, not an AND):&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Allow users to limit access to vaults using CLI integrations&lt;/item&gt;
      &lt;item&gt;Allow users to designate individual items in their Vaults for use with the CLI&lt;/item&gt;
      &lt;item&gt;Prompt for specific vaults or items individually&lt;/item&gt;
      &lt;item&gt;Prompt for each process individually, closing the gap for subprocesses&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;This investigation took a while, and I waited a while before publishing this disclosure (life circumstances and giving 1Password time to fix the issue). While 1Password is within their right not to issue a CVE or a fix for this vulnerability, I do think 1Password users (I am proud to be one) would be much safer if this issue were eliminated.&lt;/p&gt;
    &lt;p&gt;Thanks, please contact me with any corrections or feedback.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45478553</guid><pubDate>Sun, 05 Oct 2025 03:01:50 +0000</pubDate></item><item><title>Ambigr.am</title><link>https://ambigr.am/hall-of-fame</link><description>&lt;doc fingerprint="e10fcdab2cdf53e4"&gt;
  &lt;main&gt;
    &lt;p&gt;You need to enable JavaScript to run this app.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45478780</guid><pubDate>Sun, 05 Oct 2025 04:11:55 +0000</pubDate></item><item><title>Managing context on the Claude Developer Platform</title><link>https://www.anthropic.com/news/context-management</link><description>&lt;doc fingerprint="bf43ca3f38eb8046"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Managing context on the Claude Developer Platform&lt;/head&gt;
    &lt;p&gt;Today, we’re introducing new capabilities for managing your agents’ context on the Claude Developer Platform: context editing and the memory tool.&lt;/p&gt;
    &lt;p&gt;With our latest model, Claude Sonnet 4.5, these capabilities enable developers to build AI agents capable of handling long-running tasks at higher performance and without hitting context limits or losing critical information.&lt;/p&gt;
    &lt;head rend="h2"&gt;Context windows have limits, but real work doesn’t&lt;/head&gt;
    &lt;p&gt;As production agents handle more complex tasks and generate more tool results, they often exhaust their effective context windows—leaving developers stuck choosing between cutting agent transcripts or degrading performance. Context management solves this in two ways, helping developers ensure only relevant data stays in context and valuable insights get preserved across sessions.&lt;/p&gt;
    &lt;p&gt;Context editing automatically clears stale tool calls and results from within the context window when approaching token limits. As your agent executes tasks and accumulates tool results, context editing removes stale content while preserving the conversation flow, effectively extending how long agents can run without manual intervention. This also increases the effective model performance as Claude focuses only on relevant context.&lt;/p&gt;
    &lt;p&gt;The memory tool enables Claude to store and consult information outside the context window through a file-based system. Claude can create, read, update, and delete files in a dedicated memory directory stored in your infrastructure that persists across conversations. This allows agents to build up knowledge bases over time, maintain project state across sessions, and reference previous learnings without having to keep everything in context.&lt;/p&gt;
    &lt;p&gt;The memory tool operates entirely client-side through tool calls. Developers manage the storage backend, giving them complete control over where the data is stored and how it’s persisted.&lt;/p&gt;
    &lt;p&gt;Claude Sonnet 4.5 enhances both capabilities with built-in context awareness—tracking available tokens throughout conversations to manage context more effectively.&lt;/p&gt;
    &lt;p&gt;Together, these updates create a system that improves agent performance:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Enable longer conversations by automatically removing stale tool results from context&lt;/item&gt;
      &lt;item&gt;Boost accuracy by saving critical information to memory—and bring that learning across successive agentic sessions&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Building long-running agents&lt;/head&gt;
    &lt;p&gt;Claude Sonnet 4.5 is the best model in the world for building agents. These features unlock new possibilities for long-running agents—processing entire codebases, analyzing hundreds of documents, or maintaining extensive tool interaction histories. Context management builds on this foundation, ensuring agents can leverage this expanded capacity efficiently while still handling workflows that extend beyond any fixed limit. Use cases include:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Coding: Context editing clears old file reads and test results while memory preserves debugging insights and architectural decisions, enabling agents to work on large codebases without losing progress.&lt;/item&gt;
      &lt;item&gt;Research: Memory stores key findings while context editing removes old search results, building knowledge bases that improve performance over time.&lt;/item&gt;
      &lt;item&gt;Data processing: Agents store intermediate results in memory while context editing clears raw data, handling workflows that would otherwise exceed token limits.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Performance improvements with context management&lt;/head&gt;
    &lt;p&gt;On an internal evaluation set for agentic search, we tested how context management improves agent performance on complex, multi-step tasks. The results demonstrate significant gains: combining the memory tool with context editing improved performance by 39% over baseline. Context editing alone delivered a 29% improvement.&lt;/p&gt;
    &lt;p&gt;In a 100-turn web search evaluation, context editing enabled agents to complete workflows that would otherwise fail due to context exhaustion—while reducing token consumption by 84%.&lt;/p&gt;
    &lt;head rend="h2"&gt;Getting started&lt;/head&gt;
    &lt;p&gt;These capabilities are available today in public beta on the Claude Developer Platform, natively and in Amazon Bedrock and Google Cloud’s Vertex AI. Explore the documentation for context editing and the memory tool, or visit our cookbook to learn more.&lt;/p&gt;
    &lt;p&gt;Anthropic is not affiliated with, endorsed by, or sponsored by CATAN GmbH or CATAN Studio. The CATAN trademark and game are the property of CATAN GmbH.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45479006</guid><pubDate>Sun, 05 Oct 2025 05:20:08 +0000</pubDate></item><item><title>Social Cooling (2017)</title><link>https://www.socialcooling.com/</link><description>&lt;doc fingerprint="3ab8db3d68f3a42d"&gt;
  &lt;main&gt;
    &lt;head rend="h3"&gt;LIKE OIL LEADS TO GLOBAL WARMING...&lt;/head&gt;
    &lt;head rend="h2"&gt;DATA LEADS TO SOCIAL COOLING&lt;/head&gt;
    &lt;head rend="h2"&gt;If you feel you are being watched, you change your behavior.&lt;/head&gt;
    &lt;head rend="h2"&gt;Big Data is supercharging this effect.&lt;/head&gt;
    &lt;head rend="h2"&gt;This could limit your desire to take risks or exercise free speech.&lt;/head&gt;
    &lt;head rend="h2"&gt;Over the long term these 'chilling effects' could 'cool down' society.&lt;/head&gt;
    &lt;head rend="h1"&gt;Your data is turned into thousands of different scores.&lt;/head&gt;
    &lt;p&gt;&lt;lb/&gt;There are stars behind the cloud:&lt;/p&gt;
    &lt;p&gt;Databrokers compare your data to the data of people they know more about. By comparing the patterns they try to guess the likelihood of thousands of details that you may never have disclosed. These are actual examples:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Religion&lt;/item&gt;
      &lt;item&gt;Rape victim&lt;/item&gt;
      &lt;item&gt;Into dieting&lt;/item&gt;
      &lt;item&gt;Into gardening&lt;/item&gt;
      &lt;item&gt;Number of online friends&lt;/item&gt;
      &lt;item&gt;Number of real friends&lt;/item&gt;
      &lt;item&gt;IQ&lt;/item&gt;
      &lt;item&gt;Political views&lt;/item&gt;
      &lt;item&gt;Had abortion&lt;/item&gt;
      &lt;item&gt;Gullibility&lt;/item&gt;
      &lt;item&gt;Projected sexual orientation&lt;/item&gt;
      &lt;item&gt;Real sexual orientation&lt;/item&gt;
      &lt;item&gt;Reads magazines on travel&lt;/item&gt;
      &lt;item&gt;Reads books on travel&lt;/item&gt;
      &lt;item&gt;Planning to have a baby&lt;/item&gt;
      &lt;item&gt;Communication device preference&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Has house plants&lt;/item&gt;
      &lt;item&gt;Neuroticism&lt;/item&gt;
      &lt;item&gt;Openness&lt;/item&gt;
      &lt;item&gt;Date of Birth&lt;/item&gt;
      &lt;item&gt;Into Fashion&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Parents divorced before the age of 21&lt;/item&gt;
      &lt;item&gt;Economic stability&lt;/item&gt;
      &lt;item&gt;Potential inheritor&lt;/item&gt;
      &lt;item&gt;Extraversion&lt;/item&gt;
      &lt;item&gt;Agreeableness&lt;/item&gt;
      &lt;item&gt;Year house built&lt;/item&gt;
      &lt;item&gt;Smoker in the household&lt;/item&gt;
      &lt;item&gt;Has 'senior needs'&lt;/item&gt;
      &lt;item&gt;Has 'diabetic focus'&lt;/item&gt;
      &lt;item&gt;Easily addictable&lt;/item&gt;
      &lt;item&gt;Physical frailty&lt;/item&gt;
      &lt;item&gt;Gun owner&lt;/item&gt;
      &lt;item&gt;Adult 'empty nester'&lt;/item&gt;
      &lt;item&gt;Education level&lt;/item&gt;
      &lt;item&gt;Runs marathons&lt;/item&gt;
      &lt;item&gt;Into Elvis Memorabilia&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;People are starting to realize that this 'digital reputation' could limit their opportunities.&lt;/head&gt;
    &lt;p&gt;&lt;lb/&gt;(And that these algorithms are often biased, and built on bad data.)&lt;/p&gt;
    &lt;head rend="h3"&gt;In the news&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;head rend="h3"&gt;You may not get that dream job if your data suggests you're not a very positive person.&lt;/head&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h3"&gt;If you are a woman you may see fewer ads for high paying jobs.&lt;/head&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h3"&gt;If you have "bad friends" on social media you might pay more for your loan.&lt;/head&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h3"&gt;Tinder's algorithms might not show you attractive people if you are not desirable yourself.&lt;/head&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h3"&gt;Cambridge Analytica created psychological profiles on all Americans to try and dissuade people from voting.&lt;/head&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h3"&gt;If you return goods to the store often this will be used against you.&lt;/head&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h3"&gt;What you post on social media may influence your odds of getting a tax audit.&lt;/head&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;head rend="h3"&gt;Your health insurer may collect intimate data about your lifestyle, race and more.&lt;/head&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;People are changing their behavior to get better scores.&lt;/head&gt;
    &lt;p&gt;&lt;lb/&gt;This has good and bad sides.&lt;/p&gt;
    &lt;head rend="h2"&gt;Social Cooling is a name for the long-term negative side effects of living in a reputation economy:&lt;/head&gt;
    &lt;head rend="h3"&gt;1. A culture of conformity&lt;/head&gt;
    &lt;p&gt;Have you ever hesitated to click on a link because you thought your visit might be logged, and it could look bad?&lt;/p&gt;
    &lt;p&gt;More and more people feel this pressure, and they are starting to apply self-censorship.&lt;/p&gt;
    &lt;head rend="h3"&gt;2. A culture of risk-aversion&lt;/head&gt;
    &lt;p&gt;When doctors in New York were given scores this had unexpected results.&lt;lb/&gt; Doctors that tried to help advanced cancer patients had a higher mortality rate, which translated into a lower score.&lt;/p&gt;
    &lt;p&gt;Doctors that didn't try to help were rewarded with high scores, even though their patients died prematurely.&lt;/p&gt;
    &lt;p&gt;Rating systems can create unwanted incentives, and increase pressure to conform to a bureaucratic average.&lt;/p&gt;
    &lt;head rend="h3"&gt;3. Increased social rigidity&lt;/head&gt;
    &lt;p&gt;Digital reputation systems are limiting our ability and our will to protest injustice.&lt;/p&gt;
    &lt;p&gt;In China each adult citizen is getting a government mandated "social credit score". This represents how well behaved they are, and is based on crime records, what they say on social media, what they buy, and even the scores of their friends.&lt;/p&gt;
    &lt;p&gt;If you have a low score you can't get a government job, visa, cheap loan, or even a nice online date.&lt;/p&gt;
    &lt;p&gt;Social pressure is the most powerful and most subtle form of control.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt; As our weaknesses are mapped..&lt;/p&gt;
    &lt;head rend="h1"&gt;We are becoming too transparent.&lt;/head&gt;
    &lt;head rend="h1"&gt;This is breeding a society where self-censorship and risk-aversion are the new normal.&lt;/head&gt;
    &lt;p&gt;&lt;lb/&gt; Yes, we've had credit ratings before. But this is a whole new scale, with an incredible level of automation, integration and accessibility.&lt;/p&gt;
    &lt;p&gt;The solution?&lt;/p&gt;
    &lt;head rend="h1"&gt;We should compare this problem to Global Warming.&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;head rend="h2"&gt;Social Cooling is subtle&lt;/head&gt;The pollution of our social environment is invisible to most people, just like air pollution was at first.&lt;/item&gt;
      &lt;item&gt;&lt;head rend="h2"&gt;Social Cooling is complex&lt;/head&gt;It cannot be solved by politicians, citizens, entrepreneurs or scientists on their own.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;&lt;lb/&gt;Public awareness is still very low.&lt;/head&gt;
    &lt;p&gt;It took 40 years to get the problems with oil on the agenda, and 80 years to get to where we are now.&lt;lb/&gt; We can't take that long with Social Cooling.&lt;/p&gt;
    &lt;head rend="h2"&gt;In the next 10 years we will need to spread a more mature and nuanced perception of data and privacy.&lt;/head&gt;
    &lt;head rend="h2"&gt;As pressure to be perfect rises we will learn what privacy really is:&lt;/head&gt;
    &lt;p/&gt;
    &lt;p&gt;&lt;lb/&gt;Can we still forgive and forget?&lt;/p&gt;
    &lt;head rend="h2"&gt;When algorithms judge everything we do, we need to protect the right to make mistakes.&lt;/head&gt;
    &lt;head rend="h2"&gt;&lt;lb/&gt; When everything is remembered as big data, we need the right to have our mistakes forgotten.&lt;/head&gt;
    &lt;p&gt;In our data driven world..&lt;/p&gt;
    &lt;head rend="h2"&gt;Help spread the word&lt;/head&gt;
    &lt;p&gt;These are privacy-friendly sharing buttons.&lt;/p&gt;
    &lt;p&gt;Site by Tijmen Schep - Technology critic, privacy designer and public speaker.&lt;/p&gt;
    &lt;head rend="h2"&gt;Like this? Then also visit Mathwashing.com, HowNormalAmI.eu or cloakingcompany.com.&lt;/head&gt;
    &lt;p&gt;Feel free to re-use content, it's all under a CC-BY 4.0 License.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45479165</guid><pubDate>Sun, 05 Oct 2025 06:01:24 +0000</pubDate></item><item><title>Why I Choose Email over Messaging</title><link>https://www.spinellis.gr/blog/20250926/?li</link><description>&lt;doc fingerprint="6ed2ac1a2f24f8dc"&gt;
  &lt;main&gt;&lt;p&gt;My colleagues and friends know that I prefer to communicate with them via email rather than chat messaging. There are many benefits in such a choice. You may want to consider them and adopt the same stance.&lt;/p&gt;&lt;p&gt;My messages arrive in a single program, where I can process and tag them. With messaging programs Iâd have to iterate through Teams, Signal, WhatsApp, Slack, Viber, FaceTime, LinkedIn, Messenger, Google Meet, Discord, Mattermost, Instagram, WebEx, and possibly others, to collect and process the messages sent on each platform.&lt;/p&gt;&lt;p&gt;Similarly, if I want to find a past message I have exactly one place to search: my email archive.&lt;/p&gt;&lt;p&gt;Companies get out of business or become acquired and services can easily be discontinued; for a reminder have a look at the 64 services Google has discontinued. If you ever exchanged messages on ICQ, AIM, MSN Messenger, Skype, Yahoo! Messenger, Google Hangouts, GChat, BlackBerry Messenger, or Campfire your messages are now gone. With email and local message storage you control the lifetime of your messages (provided you perform regular backups). My email archive contains the messages I have sent and received from 1986 onward.&lt;/p&gt;&lt;p&gt;Email clients offer rich functionality. In the Thunderbird email client, I use the following features:&lt;/p&gt;&lt;p&gt;Some messaging systems offer some of these features, but all features are certainly not universally available.&lt;/p&gt;&lt;p&gt;Having a single messaging interface allows me to invest in becoming maximally productive in the email client application Iâm using. I can learn its features in-depth, I can tailor it with plug-ins, and I can extend it to fit my needs. When using it (many hours a day) my mind and muscles memorize how to perform common actions. With messaging platforms Iâd only be able to dabble in each.&lt;/p&gt;&lt;p&gt;Rather than having flow and concentration interrupted by incoming message notifications, with email I can easily decide when to fetch and process messages.&lt;/p&gt;&lt;p&gt;Some âfreeâ messaging services serve together with the messages ads or addictive content, such as short-form videos. Email clients will only display email messages.&lt;/p&gt;&lt;p&gt;Depending on the email provider I choose, I can obtain strong guarantees on who reads my email messages. Some, like Proton Mail are explicitly targeting people who want to protect their privacy. In contrast, many messaging platform will scan my messages to send me targeted ads or train their AI systems on them.&lt;/p&gt;&lt;p&gt;Email is transported with open protocols (SMTP, IMAP), which means I can use any email client and operating system I want and obtain any functionality I need, without depending on the business model or whims of the company controlling a proprietary messaging platform. I can even develop my own clients, something I have often done to automate the sending of multi-part email messages to students or conference committee members.&lt;/p&gt;&lt;p&gt;My messages are stored as plain text files in the super-simple Mbox file format, which means I can easily process them with other tools, reliably create backup copies, and move them from one email client to another.&lt;/p&gt;&lt;p&gt;For example, I have a small script that removes all attachments from old email messages, allowing me to keep my email archive in a manageable size. In other cases Iâve run on my message files scripts to analyze the messages I send and receive, and Iâve opened them in my editor to fix hardware-induced corruption.&lt;/p&gt;&lt;p&gt;In short, email can be an amazingly open and reliable environment that fosters exceptional productivity. We shouldnât settle for anything less.&lt;/p&gt;Comments Post Toot! Tweet&lt;p&gt;Last modified: Saturday, September 27, 2025 11:07 pm&lt;/p&gt;&lt;p&gt;Unless otherwise expressly stated, all original material on this page created by Diomidis Spinellis is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45479820</guid><pubDate>Sun, 05 Oct 2025 08:12:24 +0000</pubDate></item><item><title>Personal data storage is an idea whose time has come</title><link>https://blog.muni.town/personal-data-storage-idea/</link><description>&lt;doc fingerprint="f5359ed38cb08d8d"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Personal data storage is an idea whose time has come&lt;/head&gt;
    &lt;p&gt;Back in 2009 Tim Berners-Lee drafted a web-specification for "Socially Aware Cloud Storage":&lt;/p&gt;
    &lt;quote&gt;There is an architecture in which a few existing or Web protocols are gathered together with some glue to make a world wide system in which applications (desktop or web application) can work on top of a layer of commodity read-write storage.&lt;lb/&gt;Crucial design issues are that principals (users) and groups are identifies by URIs, and so are global in scope, and that elements of storage are access controlled using those global identifiers. The result is that storage becomes a commodity, independent of the application running on it.&lt;/quote&gt;
    &lt;p&gt;Several of these ideas were going around in the late 2000s, shortly after the explosive growth of "web2" monoliths like Facebook.&lt;/p&gt;
    &lt;p&gt;Another spiritually similar idea being championed at the time came from the Opera browser folks who wanted to put "a web server in your browser".&lt;/p&gt;
    &lt;p&gt;While 'Opera Unite' never fully materialized, Tim's spec got significant traction some years down the road as one privacy crisis after another made the case for stronger web agency self-evident.&lt;/p&gt;
    &lt;p&gt;In 2015 Tim &amp;amp; co. secured some funding for the Solid Protocol.&lt;/p&gt;
    &lt;quote&gt;Right now we have the worst of both worlds, in which people not only cannot control their data, but also can’t really use it, due to it being spread across a number of different silo-ed websites. Our goal is to develop a web architecture that gives users ownership over their data, including the freedom to switch to new applications in search of better features, pricing, and policies.”&lt;/quote&gt;
    &lt;quote&gt;On the better web Berners-Lee envisions, users control where their data is stored and how it's accessed. For example, social networks would still run in the cloud. But you could store your data locally. Alternately, you could choose a different cloud server run by a company or community you trust.&lt;lb/&gt;You might have different servers for different types of information—for health and fitness data, say—that is completely separate from the one you use for financial records.&lt;/quote&gt;
    &lt;p&gt;To this day, Tim continues to eloquently champion the virtues of the Solid vision.&lt;/p&gt;
    &lt;quote&gt;We have the technical capability to give that power back to the individual. Solid is an open-source interoperable standard that I and my team developed at MIT more than a decade ago. Apps running on Solid don’t implicitly own your data – they have to request it from you and you choose whether to agree, or not. Rather than being in countless separate places on the internet in the hands of whomever it had been resold to, your data is in one place, controlled by you.&lt;lb/&gt;Sharing your information in a smart way can also liberate it. Why is your smartwatch writing your biological data to one silo in one format? Why is your credit card writing your financial data to a second silo in a different format? Why are your YouTube comments, Reddit posts, Facebook updates and tweets all stored in different places? Why is the default expectation that you aren’t supposed to be able to look at any of this stuff? You generate all this data – your actions, your choices, your body, your preferences, your decisions. You should own it. You should be empowered by it.&lt;/quote&gt;
    &lt;p&gt;The Solid Protocol remains an excellent idea and has even culminated in an official web specification, but Solid has not yet amounted to any mainstream adoption on the web. Its primary financial sponsor Inrupt (of which Tim is co-founder &amp;amp; CTO) has focused on the enterprise market as a path to sustainability; it remains to be seen what resources will be directed towards web-scale adoption of Solid.&lt;/p&gt;
    &lt;p&gt;Thankfully those of us who want data ownership and agency in our web applications now don't have to wait. AT Protocol was ushered in by the folks at Bluesky, now with a network of over 30M people strong and increasingly spread across multiple federated platforms/communities like Blacksky or Tangled.&lt;/p&gt;
    &lt;p&gt;While the respective architectures of the Solid and AT protocols are quite different, they're pointing to the same Open Social Web, re-built on the principles of user-sovereign data storage.&lt;/p&gt;
    &lt;head rend="h2"&gt;Personal Data Storage&lt;/head&gt;
    &lt;p&gt;What web-user sovereignty looks like in practice, from the vantage point of atproto, has been expertly illustrated by danabra.mov&lt;/p&gt;
    &lt;quote&gt;Notice that Alice’s handle is now&lt;code&gt;@alice.com&lt;/code&gt;. It is not allocated by a social media company [like facebook.com/alice]. Rather, her handle is the universal “internet handle”, i.e. a domain. Alice owns the&lt;code&gt;alice.com&lt;/code&gt;domain, so she can use it as a handle on any open social app. (On most open social apps, she goes by&lt;code&gt;@alice.com&lt;/code&gt;, but for others she wants a distinct disconnected identity, so she owns another handle she’d rather not share.)&lt;lb/&gt;Bob owns a domain too, even though he isn’t technical. He might not even know what a “domain” is. Bob just thinks of&lt;code&gt;@bob.com&lt;/code&gt;as his “internet handle”. Some open social apps will offer you a free subdomain on registration, just like Gmail gives you a free Gmail address, or may offer an extra flow for buying a domain. You’re not locked into your first choice, and can swap to a different domain later.&lt;lb/&gt;(...) With open social, Alice’s data—her posts, likes, follows, etc—is hosted on the web itself. Alongside her personal site, Alice now has a personal repository of her data.&lt;/quote&gt;
    &lt;p&gt;This new paradigm is made technically possible by what the AT protocol refers to as a Personal Data Server or PDS for short (what Solid calls a Pod).&lt;/p&gt;
    &lt;p&gt;The notion of a 'PDS' quickly comes off as something very technical and nerdy which is why it's not mentioned once in Dan's explainer, even though it's still targeted at an audience of web nerds. But really the only obscure word here is the Server, which in this context is interchangeable with Storage, as in Personal Data Storage.&lt;/p&gt;
    &lt;p&gt;Even regular internet users have some mental model of what personalized data storage entails, especially with the complementary framing of collectively owned and operated data storage.&lt;/p&gt;
    &lt;head rend="h2"&gt;Data-banking Coops&lt;/head&gt;
    &lt;p&gt;If you're a regular internet user the PDS paradigm won't move your data from the cloud to your personal computer. Most people will still rely on an institutional cloud service, but instead of data-banking with a shareholder-controlled corporation most people’s data can be entrusted to the equivalent of member-owned credit unions for data storage.&lt;/p&gt;
    &lt;p&gt;One in every three US adults banks with a Credit Union. Achieving similar or better numbers for data storage is far from inconceivable considering how much our collective experience with Big Banking mirrors that of Big Tech/Social.&lt;/p&gt;
    &lt;p&gt;The concept of data cooperatives has already gained a lot of traction in the fediverse with several providers like social.coop, data.coop and cosocial.ca being operational for many years and still going strong. Soon the AT network will have a similarly co-owned institution in Northsky.&lt;/p&gt;
    &lt;p&gt;Whether these providers are strictly cooperatives in the formal sense isn't what's most important here though; any suffuciently transparent, democratic and community-oriented data bank (like the aforementioned Blacksky, or the forthcoming Eurosky) is a valid steward and co-creator of an Open Social.&lt;/p&gt;
    &lt;p&gt;Data Ownership as a conversation changes when data resides primarily with people-governed institutions rather than corporations. Rather than arguing for what kinds of data we ought to be able to download from the corporate silos, the platforms should be asking us what kinds of data they may copy from our servers, and only with strictly temporary allowances.&lt;/p&gt;
    &lt;p&gt;And while the separation of user data and social platform is most fully realized today in the AT network, there are exciting signs of cross-pollination happening in the ongoing development of atproto’s predecessor ActivityPub. I hope to see similar openness towards technological convergence in Solid for a more pluralistic social web.&lt;/p&gt;
    &lt;p&gt;Personal Data Storage has long since escaped containment as a concept pertaining to any specific protocol. Some implementations of it will be more mainstream than others, but pragmatic data coops can be protocol-agnostic and storage formats are transmutable.&lt;/p&gt;
    &lt;p&gt;As long as we have sufficient control of our own data there will always be a way to restart our social graph and digital presence elsewhere in the event of platform collapse. Let’s make the web personal again.&lt;/p&gt;
    &lt;p&gt;See also:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45480106</guid><pubDate>Sun, 05 Oct 2025 09:07:38 +0000</pubDate></item><item><title>Self hosting 10TB in S3 on a framework laptop and disks</title><link>https://jamesoclaire.com/2025/10/05/self-hosting-10tb-in-s3-on-a-framework-laptop-disks/</link><description>&lt;doc fingerprint="108fdf7d4527a9d6"&gt;
  &lt;main&gt;
    &lt;p&gt;About 5 months ago I made the decision to start self hosting my own S3. I was working on AppGoblin’s SDK tracking of the top 100k Android and iOS apps so was wanting a lot of space, but for cheap.&lt;/p&gt;
    &lt;p&gt;&lt;lb/&gt;I got really lucky with getting a second hand Framework laptop. The laptop was missing it’s screen, and was one of the older ones, so it was perfect for a home server. In addition I bought a “just a bunch of disks” JBOD. The framework laptop is running ZFS + garage S3. &lt;/p&gt;
    &lt;head rend="h2"&gt;I’m happy to report I haven’t thought about this laptop for months&lt;/head&gt;
    &lt;p&gt;I’ve been away, I’ve been working, I’ve been busy, and I’ve definitely been using my S3. But I hadn’t thought about the laptop in 4 months. When I finally logged in, I saw I’ve used 10TB of space and it was patiently waiting for a restart for some upgrades. I nervously restarted, and was so relieved to see everything come right back up.&lt;/p&gt;
    &lt;head rend="h2"&gt;I updated garage s3 with no issues as well&lt;/head&gt;
    &lt;p&gt;I also saw a pending upgrade for garage v1 to v2. This went along without a hitch too. Feels like it’s been a good weekend.&lt;/p&gt;
    &lt;head rend="h2"&gt;I’ve been warned…&lt;/head&gt;
    &lt;p&gt;Just so you know, I understand my use case for ZFS is possibly a bit non standard as I’m using a USB to connect the laptop and JBOD. This initially caused me issues with ZFS when garage was heavily reading and writing (the initial setup had the SQLite metadata also stored on the JBOD/ZFS).&lt;/p&gt;
    &lt;p&gt;I moved my metadata to the laptop, which has so far resolved any ZFS issues again.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45480317</guid><pubDate>Sun, 05 Oct 2025 09:51:26 +0000</pubDate></item><item><title>Beginner Guide to VPS Hetzner and Coolify</title><link>https://bhargav.dev/blog/VPS_Setup_and_Security_Checklist_A_Complete_Self_Hosting_Guide</link><description>&lt;doc fingerprint="fe08e21335a407ea"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;VPS Setup and Security Checklist: Complete Self-Hosting Guide for 2025&lt;/head&gt;
    &lt;p&gt;I set up my own VPS, documented every step, and ended up with a repeatable deployment pipeline. This is both a checklist for my future self and a guide for anyone curious about self-hosting. Along the way I'll explain why I picked Hetzner and Coolify, and how they compare with other options like DigitalOcean, AWS, Render, or Fly.io.&lt;/p&gt;
    &lt;p&gt;This comprehensive checklist covers every essential step for setting up a secure, production-ready VPS. Each section includes commands, verification steps, and troubleshooting tips based on real-world experience.&lt;/p&gt;
    &lt;head rend="h2"&gt;Pre-Setup Checklist&lt;/head&gt;
    &lt;p&gt;Before You Begin:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Choose your VPS provider (Hetzner recommended for price/performance)&lt;/item&gt;
      &lt;item&gt;Select server specifications (minimum 1GB RAM, 20GB storage)&lt;/item&gt;
      &lt;item&gt;Note down server IP address and root credentials&lt;/item&gt;
      &lt;item&gt;Prepare your local machine with SSH client&lt;/item&gt;
      &lt;item&gt;Have a strong password generator ready&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Picking the VPS provider&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Chose Hetzner Cloud (cheap, fast, reliable in Europe)&lt;/item&gt;
      &lt;item&gt;Alternatives I considered: &lt;list rend="ul"&gt;&lt;item&gt;DigitalOcean → smoother onboarding, great docs, slightly more expensive&lt;/item&gt;&lt;item&gt;AWS Lightsail → decent for small apps, but tied to AWS ecosystem (complex for beginners)&lt;/item&gt;&lt;item&gt;Linode → reliable, but Hetzner wins on price/performance&lt;/item&gt;&lt;item&gt;Render/Fly.io → easier PaaS, but more opinionated and costly at scale&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Why Hetzner?&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;2–3x cheaper for the same specs compared to DO/AWS&lt;/item&gt;
      &lt;item&gt;Strong European datacenter presence (latency advantage for my use case)&lt;/item&gt;
      &lt;item&gt;Transparent pricing and no surprise bills&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Initial Server Setup Checklist&lt;/head&gt;
    &lt;head rend="h4"&gt;First Login and System Updates&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Initial login as root&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;ssh root@your-server-ip&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Update package lists and upgrade system&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;apt update &amp;amp;&amp;amp; apt upgrade -y&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Verify system information&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;uname -a cat /etc/os-release&lt;/code&gt;&lt;/quote&gt;
    &lt;head rend="h4"&gt;Root Account Security&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Change root password&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;passwd&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Use strong password with mixed case, numbers, symbols
- Store securely in password manager
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Create secondary user account&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;adduser your-username&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Choose descriptive username (not 'admin' or 'user')
- Set strong password
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Add user to sudo group&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;usermod -aG sudo your-username&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Verify user groups&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;groups your-username&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Should show: `your-username : your-username sudo`
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Test sudo access&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;su - your-username sudo whoami&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Should return: `root`
&lt;/code&gt;
    &lt;head rend="h4"&gt;SSH Key Authentication Setup&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Generate SSH keys on LOCAL machine (not server)&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;#### Ed25519 (recommended) ssh-keygen -t ed25519 -C "your-email@example.com" ##### Or RSA if Ed25519 not supported ssh-keygen -t rsa -b 4096 -C "your-email@example.com"&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Display public key on local machine&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;cat ~/.ssh/id_ed25519.pub #### or cat ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Copy public key to clipboard&lt;/item&gt;
      &lt;item&gt;Create .ssh directory on server (as your user, not root)&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;mkdir -p ~/.ssh chmod 700 ~/.ssh&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Create authorized_keys file&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;nano ~/.ssh/authorized_keys&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Paste your public key
- Save and exit
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Set correct permissions&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;chmod 600 ~/.ssh/authorized_keys&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Test SSH key login (from local machine)&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;ssh your-username@your-server-ip&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Should login without password prompt
&lt;/code&gt;
    &lt;head rend="h4"&gt;Disable Password Authentication&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Edit SSH configuration&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo nano /etc/ssh/sshd_config&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Modify these settings:&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;PasswordAuthentication no PubkeyAuthentication yes&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Check cloud-init config if exists&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo nano /etc/ssh/sshd_config.d/50-cloud-init.conf&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Set `PasswordAuthentication no` here too if file exists
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Test SSH configuration&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo sshd -t&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Should show no errors
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Restart SSH service&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo systemctl restart ssh #### or sudo service ssh restart&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Verify service status&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo systemctl status ssh&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Should show active (running) with green dot
&lt;/code&gt;
    &lt;head rend="h4"&gt;Disable Root Login&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Edit SSH configuration&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo nano /etc/ssh/sshd_config&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Change root login setting&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;PermitRootLogin no&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Restart SSH service&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo systemctl restart ssh&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Test root login is blocked (from another terminal)&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;ssh root@your-server-ip&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Should get "Permission denied"
&lt;/code&gt;
    &lt;head rend="h2"&gt;Firewall Configuration Checklist&lt;/head&gt;
    &lt;head rend="h4"&gt;UFW (Uncomplicated Firewall) Setup&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Check UFW status&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo ufw status&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Set default policies&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo ufw default deny incoming sudo ufw default allow outgoing&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Allow SSH before enabling firewall&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo ufw allow ssh #### or if you changed SSH port: sudo ufw allow 2022/tcp&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Allow HTTP and HTTPS for web apps&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo ufw allow 80/tcp sudo ufw allow 443/tcp&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Enable firewall&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo ufw enable&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Type 'y' when prompted
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Verify firewall rules&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo ufw status verbose&lt;/code&gt;&lt;/quote&gt;
    &lt;head rend="h4"&gt;Advanced Firewall Configuration&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Restrict SSH to your IP (optional but recommended)&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo ufw allow from YOUR_IP_ADDRESS to any port 22 sudo ufw delete allow ssh&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Change default SSH port (optional security through obscurity)&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo nano /etc/ssh/sshd_config&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Change `Port 22` to `Port 2022` (or your chosen port)
- Update firewall: `sudo ufw allow 2022/tcp`
- Remove old rule: `sudo ufw delete allow 22/tcp`
- Restart SSH: `sudo systemctl restart ssh`
&lt;/code&gt;
    &lt;head rend="h2"&gt;Automatic Updates Setup Checklist&lt;/head&gt;
    &lt;head rend="h4"&gt;Unattended Upgrades Configuration&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Install unattended-upgrades&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo apt install unattended-upgrades apt-listchanges&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Enable automatic updates&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo dpkg-reconfigure unattended-upgrades&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Select "Yes" in the dialog
&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Configure update settings&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo nano /etc/apt/apt.conf.d/50unattended-upgrades&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Uncomment security updates line&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;"${distro_id}:${distro_codename}-security";&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Configure email notifications (optional)&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;Unattended-Upgrade::Mail "your-email@example.com";&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Enable automatic reboots if needed&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;Unattended-Upgrade::Automatic-Reboot "true"; Unattended-Upgrade::Automatic-Reboot-Time "02:00";&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Test configuration&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo unattended-upgrades --dry-run&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Check service status&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo systemctl status unattended-upgrades&lt;/code&gt;&lt;/quote&gt;
    &lt;head rend="h2"&gt;Production Application Deployment Checklist&lt;/head&gt;
    &lt;head rend="h4"&gt;Node.js Production Setup&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Install Node.js LTS&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - sudo apt-get install -y nodejs&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Verify installation&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;node --version npm --version&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Install PM2 globally&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo npm install -g pm2&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Upload your application files&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;scp -r ./your-app your-username@your-server-ip:~/&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Install dependencies&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;cd ~/your-app npm install --production&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Create production build&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;npm run build&lt;/code&gt;&lt;/quote&gt;
    &lt;head rend="h4"&gt;Process Manager Configuration&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Start application with PM2&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;NODE_ENV=production pm2 start app.js --name "your-app"&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Configure PM2 for clustering (optional)&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;pm2 start app.js -i max --name "your-app-cluster"&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Save PM2 configuration&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;pm2 save&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Enable PM2 startup&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;pm2 startup #### Run the command it outputs&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Test application restart&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;pm2 restart all pm2 status&lt;/code&gt;&lt;/quote&gt;
    &lt;head rend="h4"&gt;Reverse Proxy Setup (Nginx)&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Install Nginx&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo apt install nginx&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Create site configuration&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo nano /etc/nginx/sites-available/your-app&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Basic Nginx configuration&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;server { listen 80; server_name your-domain.com; location / { proxy_pass http://localhost:3000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection 'upgrade'; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_cache_bypass $http_upgrade; } }&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Enable site&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo ln -s /etc/nginx/sites-available/your-app /etc/nginx/sites-enabled/&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Test Nginx configuration&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo nginx -t&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Restart Nginx&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo systemctl restart nginx&lt;/code&gt;&lt;/quote&gt;
    &lt;head rend="h2"&gt;SSL Certificate Setup Checklist&lt;/head&gt;
    &lt;head rend="h4"&gt;Let's Encrypt with Certbot&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Install Certbot&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo apt install certbot python3-certbot-nginx&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Obtain SSL certificate&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo certbot --nginx -d your-domain.com&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Test automatic renewal&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo certbot renew --dry-run&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Verify SSL grade&lt;/item&gt;
      &lt;item&gt;Visit: https://www.ssllabs.com/ssltest/&lt;/item&gt;
      &lt;item&gt;Should get A or A+ rating&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Monitoring and Maintenance Checklist&lt;/head&gt;
    &lt;head rend="h4"&gt;Basic Monitoring Setup&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Install monitoring tools&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo apt install htop iotop netstat-nat&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Check system resources&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;htop df -h free -h&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Monitor logs&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo tail -f /var/log/syslog sudo tail -f /var/log/auth.log&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Set up log rotation&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo nano /etc/logrotate.d/your-app&lt;/code&gt;&lt;/quote&gt;
    &lt;head rend="h4"&gt;Backup Strategy&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Create backup script&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;nano ~/backup.sh&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Sample backup script&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;#!/bin/bash DATE=$(date +%Y%m%d_%H%M%S) tar -czf ~/backups/app_backup_$DATE.tar.gz ~/your-app #### Add database backup commands if needed&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Make script executable&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;chmod +x ~/backup.sh&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Set up automated backups&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;crontab -e&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;- Add: `0 2 * * * /home/username/backup.sh`
&lt;/code&gt;
    &lt;head rend="h2"&gt;Troubleshooting Checklist&lt;/head&gt;
    &lt;head rend="h4"&gt;Common Issues and Solutions&lt;/head&gt;
    &lt;p&gt;SSH Connection Problems:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Check firewall rules: &lt;code&gt;sudo ufw status&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Verify SSH service: &lt;code&gt;sudo systemctl status ssh&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Check SSH logs: &lt;code&gt;sudo tail -f /var/log/auth.log&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Test from different network&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Permission Denied Errors:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Check file permissions: &lt;code&gt;ls -la&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Verify user groups: &lt;code&gt;groups username&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Check sudo configuration: &lt;code&gt;sudo -l&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Service Not Starting:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Check service status: &lt;code&gt;sudo systemctl status service-name&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;View service logs: &lt;code&gt;sudo journalctl -u service-name&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Check configuration files syntax&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;High Resource Usage:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Identify processes: &lt;code&gt;htop&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Check disk usage: &lt;code&gt;df -h&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Monitor network: &lt;code&gt;netstat -tulpn&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Review application logs&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Final Verification Checklist&lt;/head&gt;
    &lt;head rend="h4"&gt;Security Verification&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Test SSH key authentication works&lt;/item&gt;
      &lt;item&gt;Verify password authentication is disabled&lt;/item&gt;
      &lt;item&gt;Confirm root login is blocked&lt;/item&gt;
      &lt;item&gt;Check firewall is active and configured&lt;/item&gt;
      &lt;item&gt;Verify automatic updates are working&lt;/item&gt;
      &lt;item&gt;Test application runs in production mode&lt;/item&gt;
      &lt;item&gt;Confirm SSL certificate is valid&lt;/item&gt;
      &lt;item&gt;Verify backups are being created&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;Performance Testing&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Run basic load test&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;#### Install Apache Bench sudo apt install apache2-utils #### Test with 100 requests, 10 concurrent ab -n 100 -c 10 http://your-domain.com/&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Monitor resource usage during load&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;htop&lt;/code&gt;&lt;/quote&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Check application logs for errors&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;tsx&lt;code&gt;pm2 logs&lt;/code&gt;&lt;/quote&gt;
    &lt;head rend="h2"&gt;Quick Reference Commands&lt;/head&gt;
    &lt;p&gt;System Information:&lt;/p&gt;
    &lt;quote&gt;tsx&lt;code&gt;htop # System monitor df -h # Disk usage free -h # Memory usage uname -a # System info&lt;/code&gt;&lt;/quote&gt;
    &lt;p&gt;Process Management:&lt;/p&gt;
    &lt;quote&gt;tsx&lt;code&gt;pm2 status # PM2 process status pm2 restart all # Restart all processes pm2 logs # View logs pm2 monit # Real-time monitoring&lt;/code&gt;&lt;/quote&gt;
    &lt;p&gt;Security:&lt;/p&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo ufw status # Firewall status sudo fail2ban-client status # Fail2ban status sudo lynis audit system # Security audit&lt;/code&gt;&lt;/quote&gt;
    &lt;p&gt;Services:&lt;/p&gt;
    &lt;quote&gt;tsx&lt;code&gt;sudo systemctl status nginx # Service status sudo systemctl restart nginx # Restart service sudo journalctl -u nginx # Service logs&lt;/code&gt;&lt;/quote&gt;
    &lt;head rend="h2"&gt;Final thoughts&lt;/head&gt;
    &lt;p&gt;This checklist provides a complete approach to VPS setup and management. This isn’t just about saving money. It’s about control and understanding. By self-hosting with Hetzner + Coolify, I built muscle memory for devops that paid off in confidence and freedom.&lt;/p&gt;
    &lt;p&gt;If you’ve been meaning to try VPS hosting, consider this a nudge.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45480506</guid><pubDate>Sun, 05 Oct 2025 10:39:12 +0000</pubDate></item><item><title>Laptops create systems. Phones feed algorithms. The asymmetry determines power</title><link>https://zakelfassi.com/command-interface-device-power</link><description>&lt;doc fingerprint="b708bc1a9871a8d0"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Command Interface: How Your Device Choice Shapes Power Relations&lt;/head&gt;
    &lt;p&gt;Laptops create. Phones consume. The split determines who commands and who complies—a power dynamic hiding in plain sight across every interface we touch.&lt;/p&gt;
    &lt;p&gt;A 22-year-old designer I was considering for a project spent three hours editing a TikTok on her phone. Transitions, effects, music sync—all precision work. When I suggested she'd finish faster on a laptop, she looked at me like I'd proposed using a typewriter.&lt;/p&gt;
    &lt;p&gt;"Why would I need a laptop?"&lt;/p&gt;
    &lt;p&gt;Because laptops are command interfaces. Phones are consumption portals. The distinction matters more than anyone admits.&lt;/p&gt;
    &lt;p&gt;Not because phones can't create—they obviously can—but because the asymmetry between device types maps directly onto power structures we've stopped questioning. When you operate from a creation position, you gain command-and-control capabilities over people locked in consumption mode. The question isn't which device is "better." The question is: do you notice which mode you're operating from?&lt;/p&gt;
    &lt;head rend="h2"&gt;Asymmetry Hidden in Your Pocket&lt;/head&gt;
    &lt;p&gt;Think about the last time you wrote actual code on a phone. Not "fixed a typo in production at 2am while cursing existence"—I mean real development work. Multiple files open, testing, debugging, deploying.&lt;/p&gt;
    &lt;p&gt;You didn't. Because phones aren't optimized for creation at that scale. They're optimized for rapid-fire consumption: scroll, tap, swipe, consume. Even the "creator" apps—video editors, photo tools, drawing programs—operate within carefully bounded creation sandboxes. You're creating content, but you're not creating systems.&lt;/p&gt;
    &lt;p&gt;Laptops and desktops flip this. The default mode is generative work. Even consumption requires deliberate setup—install browser, navigate to site, manage tabs. The friction isn't a bug; it's the point. Creation requires friction. Friction creates intentionality. Intentionality creates agency.&lt;/p&gt;
    &lt;p&gt;Photography on phones: capture moments, apply filters, share. Photography on computers: RAW processing, color grading, compositing, print preparation.&lt;/p&gt;
    &lt;p&gt;Note-taking on phones: quick captures, voice memos, scattered thoughts. Note-taking on computers: interconnected knowledge systems, research databases, publication workflows.&lt;/p&gt;
    &lt;p&gt;Same activities. Completely different power relationships to the output.&lt;/p&gt;
    &lt;head rend="h2"&gt;Command Positions and Consumption Positions&lt;/head&gt;
    &lt;p&gt;Military organizations understand this instinctively. Command centers use large displays, multiple screens, keyboards, mice—interfaces optimized for generating orders and processing complex information. Field units use tablets and phones—interfaces optimized for receiving commands and reporting status.&lt;/p&gt;
    &lt;p&gt;The same pattern appears everywhere:&lt;/p&gt;
    &lt;p&gt;Trading floors: Banks spend millions on multi-monitor setups for traders. The creation position—analyzing markets, executing strategies, generating alpha—demands computational leverage. Their customers? Mobile apps with colorful buttons and simplified charts. Consumption interfaces for consumption participants.&lt;/p&gt;
    &lt;p&gt;Software development: Engineers command multi-screen workstations with mechanical keyboards and precision mice. End users consume via touch interfaces designed to hide complexity. The power gradient isn't accidental—it's architected.&lt;/p&gt;
    &lt;p&gt;Content platforms: YouTube creators edit on desktops with timeline editors and effect panels. Viewers watch on phones, swiping to the next dopamine hit. TikTok creators spend hours on composition and timing. Consumers scroll infinitely, training the algorithm with each micro-engagement.&lt;/p&gt;
    &lt;p&gt;The asymmetry creates and maintains hierarchies. Not through explicit control, but through interface design that nudges users into either command or compliance modes.&lt;/p&gt;
    &lt;head rend="h2"&gt;Watch Your Mind Shift When You Switch Devices&lt;/head&gt;
    &lt;p&gt;Something curious happens when you switch from laptop to phone for the same task. Notice the mental shift.&lt;/p&gt;
    &lt;p&gt;Laptop mode: agency. Control. Possibility space expanding. I can modify this system. I can build new tools. I can automate this frustration away. The interface assumes competence and offers power.&lt;/p&gt;
    &lt;p&gt;Phone mode: flow. Ease. Possibility space contracting. This is how it works. These are my options. I adapt to the system. The interface assumes simplicity and offers convenience.&lt;/p&gt;
    &lt;p&gt;Neither is inherently wrong. But when 80% of your computing time happens in consumption mode, something shifts in how you relate to digital systems. You stop seeing them as malleable, hackable, controllable. You start seeing them as environmental conditions—like weather patterns you adapt to rather than infrastructures you can reshape.&lt;/p&gt;
    &lt;p&gt;This connects to what I explored in The Great Cognitive Handoff—we're witnessing a phase transition in how humans relate to computational systems. But device choice determines which side of that transition you land on. Creation devices put you in the driver's seat of AI-assisted workflows. Consumption devices make you a passenger in someone else's architecture.&lt;/p&gt;
    &lt;head rend="h2"&gt;Generational Divergence and Interface Fluency&lt;/head&gt;
    &lt;p&gt;That designer isn't wrong to prefer her phone. She's adapted to the dominant computational interface of her generation. TikTok editing on mobile has reached near-parity with desktop video editing for certain output types. The creation sandbox got sophisticated enough for specific use cases.&lt;/p&gt;
    &lt;p&gt;But—and this matters—the sandbox remains someone else's. The app defines the possibility space. The platform determines what's possible. Users create within the system, never of the system.&lt;/p&gt;
    &lt;p&gt;Contrast with coding on a laptop. When you write software, you're not just using a tool—you're modifying the tool itself, extending its capabilities, potentially creating new tools entirely. The recursive loop of creation compounds. Each creation makes new creations possible.&lt;/p&gt;
    &lt;p&gt;As I outlined in Zak's Law of Skill Half-Life, skills at lower abstraction levels have longer durability. Device choice determines which abstraction layers you access. Phones keep you at high abstraction—consumer of finished applications. Computers let you descend toward infrastructure, protocols, systems thinking.&lt;/p&gt;
    &lt;p&gt;The generational split isn't about capability. It's about default stance. Generation Z sees phones as primary computers because phones are functionally complete for consumption-primary workflows. But consumption-primary means command-secondary. And command-secondary means power-secondary.&lt;/p&gt;
    &lt;head rend="h2"&gt;When Consumption Becomes Creation (Sort Of)&lt;/head&gt;
    &lt;p&gt;The counterargument: "But I create on my phone constantly! Videos, photos, tweets, stories..."&lt;/p&gt;
    &lt;p&gt;Yes. And that's precisely the trap.&lt;/p&gt;
    &lt;p&gt;You're generating content—raw material for platform algorithms to process, distribute, monetize. The platform commands the distribution layer. You feed the system. The creation serves consumption at scale.&lt;/p&gt;
    &lt;p&gt;Real creation—the kind that shifts power dynamics—involves building new systems, not just feeding existing ones. Writing code that others will use. Designing tools that change workflows. Publishing research that alters understanding. Creating infrastructure, not just content.&lt;/p&gt;
    &lt;p&gt;Content creation on phones generates value primarily for platforms. Building systems on computers generates value for creators.&lt;/p&gt;
    &lt;p&gt;That's not gatekeeping—it's power topology. The difference between building the casino and playing the slots. Both involve skill, both generate outputs, but only one controls the house edge.&lt;/p&gt;
    &lt;head rend="h2"&gt;Intentional Device Selection as Political Act&lt;/head&gt;
    &lt;p&gt;Recognizing the pattern enables intentional navigation. Device choice becomes strategic rather than habitual.&lt;/p&gt;
    &lt;p&gt;Default to creation devices for:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;System-level thinking and building&lt;/item&gt;
      &lt;item&gt;Long-form writing and deep research&lt;/item&gt;
      &lt;item&gt;Multi-step workflows requiring maintained context&lt;/item&gt;
      &lt;item&gt;Learning new technical skills&lt;/item&gt;
      &lt;item&gt;Any work where you want to control distribution&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Default to consumption devices for:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Rapid information gathering&lt;/item&gt;
      &lt;item&gt;Social connection and lightweight engagement&lt;/item&gt;
      &lt;item&gt;Capturing moments and quick documentation&lt;/item&gt;
      &lt;item&gt;Consuming media you don't need to process deeply&lt;/item&gt;
      &lt;item&gt;Times when convenience outweighs agency&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The key word: default. Intentionality transforms the dynamic. You're not passively sorted into consumption mode by interface design. You're deliberately choosing based on what power position serves your goals.&lt;/p&gt;
    &lt;p&gt;When I write these posts, I use a laptop exclusively—though sometimes the initial spark gets captured on my phone when I'm on the go, or I'll send myself a voice note to preserve context. But the actual writing, structuring, editing? That's laptop work. The friction—managing files, handling git, processing images, structuring arguments across multiple editing sessions—that friction is generative. It forces deeper thinking. It enables system-level creation.&lt;/p&gt;
    &lt;p&gt;When I share the posts, I use my phone. Social platforms optimize for mobile consumption. Meeting audiences where they are means adapting to their interface context.&lt;/p&gt;
    &lt;p&gt;Creation on creation devices. Distribution via consumption devices. The split acknowledges the power topology rather than pretending it doesn't exist.&lt;/p&gt;
    &lt;head rend="h2"&gt;Nobody Mentions the Surveillance Layer&lt;/head&gt;
    &lt;p&gt;Consumption devices track better than creation devices. The business model demands it.&lt;/p&gt;
    &lt;p&gt;Phones know your location, contacts, communication patterns, consumption habits, attention spans, emotional states (inferred from usage), social networks, and behavioral predictions. Every interaction feeds models that predict and shape your next interaction. The consumption interface doubles as a surveillance interface.&lt;/p&gt;
    &lt;p&gt;Laptops can track too, obviously. But the friction matters. Installing tracking software on a laptop requires user cooperation or sophisticated attacks. Phones ship with pervasive tracking as default configuration, baked into the OS and every platform app.&lt;/p&gt;
    &lt;p&gt;Command positions benefit from information asymmetry. Consumption positions suffer from it. Your phone knows vastly more about you than you know about its decision systems. Your laptop—especially if you control the OS and software—inverts that dynamic.&lt;/p&gt;
    &lt;p&gt;The surveillance layer reinforces the power gradient. Consumption devices make you legible to algorithms. Creation devices let you examine and modify the algorithms themselves.&lt;/p&gt;
    &lt;head rend="h2"&gt;Field Notes from Hybrid Workflows&lt;/head&gt;
    &lt;p&gt;Complete abstinence isn't the answer. Phones aren't evil. Laptops aren't sacred. But unconscious device selection hands control to whoever designed the nudges.&lt;/p&gt;
    &lt;p&gt;I run hybrid workflows now, deliberately:&lt;/p&gt;
    &lt;p&gt;Morning pages: Laptop. Long-form thinking requires maintained context and zero platform friction.&lt;/p&gt;
    &lt;p&gt;Social media: Phone. Quick engagement, responding to mentions, staying connected. Consumption mode serves connection goals.&lt;/p&gt;
    &lt;p&gt;Code: Laptop exclusively. No exceptions. Systems-level work demands systems-level interfaces.&lt;/p&gt;
    &lt;p&gt;Photos: Phone for capture, laptop for selection and editing. The split separates the consumption moment (gathering reality) from the creation moment (shaping narrative).&lt;/p&gt;
    &lt;p&gt;Learning: Depends. Consuming lectures and articles? Phone is fine. Actually building understanding through practice and experimentation? Laptop becomes essential.&lt;/p&gt;
    &lt;p&gt;The pattern: consumption activities work on either device. Creation activities—especially those requiring sustained attention and system-level manipulation—demand creation interfaces.&lt;/p&gt;
    &lt;p&gt;Hybrid workflows acknowledge both the convenience of consumption devices and the power of creation devices. The key is matching interface to intention rather than defaulting to whatever's nearest.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why This Isn't Actually About Devices&lt;/head&gt;
    &lt;p&gt;The deeper pattern: every domain has creation/consumption splits, and the split determines power flow.&lt;/p&gt;
    &lt;p&gt;Media: Creating video vs. watching video. Creating music vs. listening to music. Writing vs. reading.&lt;/p&gt;
    &lt;p&gt;Economics: Building businesses vs. working in businesses. Designing financial instruments vs. using financial products.&lt;/p&gt;
    &lt;p&gt;Governance: Writing policy vs. following policy. Shaping discourse vs. consuming discourse.&lt;/p&gt;
    &lt;p&gt;Education: Researching and synthesizing vs. memorizing and regurgitating.&lt;/p&gt;
    &lt;p&gt;In every case, creation positions enable command-and-control over consumption positions. Not through force—through architecture. The systems are designed such that creators set parameters within which consumers operate.&lt;/p&gt;
    &lt;p&gt;Device choice is just the most visible manifestation. Phones optimize you for consumption across all domains. Laptops enable creation across all domains. The interface shapes the possibility space, which shapes agency, which shapes power.&lt;/p&gt;
    &lt;p&gt;The pattern appears in Empire of One too—algorithmic systems assign roles based on engagement patterns. Consumption-mode users get served consumption-optimized roles. Creation-mode users retain more agency over their relationship to the system.&lt;/p&gt;
    &lt;head rend="h2"&gt;What Comes Next: Interface Convergence or Divergence?&lt;/head&gt;
    &lt;p&gt;Two futures branch from here:&lt;/p&gt;
    &lt;p&gt;Convergence scenario: Devices become functionally equivalent. Phones gain full creation capabilities, laptops maintain consumption convenience. The split dissolves. Power dynamics flatten as interface asymmetry disappears.&lt;/p&gt;
    &lt;p&gt;Divergence scenario: Creation and consumption interfaces deliberately separate further. Platforms optimize for behavioral sorting—consumption users get friction-free engagement loops, creation users get ever-more-powerful system-manipulation tools. The power gradient steepens.&lt;/p&gt;
    &lt;p&gt;Current trends suggest divergence. Platform incentives reward consumption (easier to monetize attention than agency). Creation tools grow more sophisticated but remain specialized. The middle ground—devices good at both—struggles commercially because optimization for one mode degrades the other.&lt;/p&gt;
    &lt;p&gt;Apple knows this. iPad occupies the uncomfortable middle: too constrained for serious creation, too expensive for pure consumption. The product fights its own identity. Meanwhile, MacBooks lean harder into creation (M-series chips optimized for professional workflows) and iPhones lean harder into consumption (algorithmic feeds perfected to near-addiction levels).&lt;/p&gt;
    &lt;p&gt;The market is choosing divergence. Which means power gradients will steepen unless we deliberately resist the sort.&lt;/p&gt;
    &lt;head rend="h2"&gt;Intentional Computing as Resistance&lt;/head&gt;
    &lt;p&gt;The resistance isn't rejecting phones or fetishizing laptops. The resistance is noticing which mode you're operating in and choosing based on desired outcomes rather than interface nudges.&lt;/p&gt;
    &lt;p&gt;Questions for daily practice:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Which device am I reaching for, and why?&lt;/item&gt;
      &lt;item&gt;Does this task serve my goals, or someone else's metrics?&lt;/item&gt;
      &lt;item&gt;Am I creating systems or feeding systems?&lt;/item&gt;
      &lt;item&gt;Would switching devices change my relationship to this work?&lt;/item&gt;
      &lt;item&gt;What power position am I accepting by using this interface?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The questions create space between stimulus (notification, urge, habit) and response (grab phone, open app, scroll). That space is where agency lives.&lt;/p&gt;
    &lt;p&gt;Some days I deliberately leave my laptop at home. Force myself into consumption mode, see what happens. Other days I leave my phone on airplane mode. Force creation mode, notice the friction.&lt;/p&gt;
    &lt;p&gt;Both experiments reveal the same truth: the interface shapes the possible more than we want to admit. Recognizing the shaping creates opportunities to shape back.&lt;/p&gt;
    &lt;head rend="h2"&gt;Beyond Devices: Your Default Stance Toward Reality&lt;/head&gt;
    &lt;p&gt;Device choice reflects something more fundamental than technology preferences. It reflects your default stance toward information and power.&lt;/p&gt;
    &lt;p&gt;Do you see yourself primarily as a consumer of culture or creator of culture? Do you want to understand systems or use systems? Do you optimize for convenience or control?&lt;/p&gt;
    &lt;p&gt;Neither answer is "correct"—but the answer determines your position in power topologies that span everything from social platforms to economic systems to governance structures.&lt;/p&gt;
    &lt;p&gt;Creation devices signal and enable a particular relationship to reality: malleable, hackable, subject to intervention. Consumption devices signal and enable the opposite: fixed, given, requiring adaptation.&lt;/p&gt;
    &lt;p&gt;Both stances serve different purposes. The trap is unconscious default to one stance across all contexts. Because the stance becomes self-reinforcing. Consumption mode atrophies creation muscles. Creation mode can miss the forest for the trees of constant optimization.&lt;/p&gt;
    &lt;p&gt;The wisdom is flexibility—consciously choosing creation or consumption mode based on context, rather than being chosen by interface design decisions made by platform architects optimizing for their goals, not yours.&lt;/p&gt;
    &lt;head rend="h2"&gt;Field Manual for the Interface Wars&lt;/head&gt;
    &lt;p&gt;One last thing before I close this laptop and switch to my phone for the rest of the evening:&lt;/p&gt;
    &lt;p&gt;The power dynamic isn't deterministic. You're not locked into consumption mode because you prefer phones. But you are accepting certain architectural choices about agency, control, and possibility space. Knowing that, you can:&lt;/p&gt;
    &lt;p&gt;Choose creation devices when:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Learning new technical skills&lt;/item&gt;
      &lt;item&gt;Building systems or tools&lt;/item&gt;
      &lt;item&gt;Writing anything requiring sustained thought&lt;/item&gt;
      &lt;item&gt;Researching complex topics&lt;/item&gt;
      &lt;item&gt;Any work where you want leverage on your time&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Choose consumption devices when:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Connecting with people&lt;/item&gt;
      &lt;item&gt;Gathering information quickly&lt;/item&gt;
      &lt;item&gt;Capturing moments&lt;/item&gt;
      &lt;item&gt;Relaxing without creating&lt;/item&gt;
      &lt;item&gt;Operating within established systems&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Question your defaults when:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;You reach for a device without thinking&lt;/item&gt;
      &lt;item&gt;Platform engagement feels compulsive&lt;/item&gt;
      &lt;item&gt;You feel controlled rather than in control&lt;/item&gt;
      &lt;item&gt;Your consumption/creation ratio tilts too far either direction&lt;/item&gt;
      &lt;item&gt;Interface friction annoys you (friction might be protective)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The device in your hand isn't just a tool. It's a power topology made physical. Command or comply. Create or consume. Shape or adapt.&lt;/p&gt;
    &lt;p&gt;Both modes have value. But only one mode gets to decide what the other mode encounters.&lt;/p&gt;
    &lt;p&gt;So pay attention to your interface. Because your interface is paying attention to you.&lt;/p&gt;
    &lt;p&gt;What's your consumption/creation ratio? Are you conscious of which mode you're operating from? Hit me up on X or Threads (from whichever device you're using right now).&lt;/p&gt;
    &lt;head rend="h2"&gt;What’s next&lt;/head&gt;
    &lt;p&gt;A few handpicked reads to continue the thread.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;head rend="h3"&gt;Witnesses Carry Weights: How Reality Gets Computed&lt;/head&gt;6 min read&lt;p&gt;From UFO counsel to neighborhood fear to market pricing—reality emerges through weighted witnessing. A field guide to the computational machinery where intent, energy, and expectations become causal forces.&lt;/p&gt;&lt;/item&gt;
      &lt;item&gt;&lt;head rend="h3"&gt;When Terror Comes in Small Packages: Bay Area, A Severed Head, and the Mechanics of Fear&lt;/head&gt;9 min read&lt;p&gt;A severed cat head appears on my Bay Area street. The real violence isn't what was done to the animal—it's what happens next in our networked minds. A forensic analysis of how small horrors become information weapons, and why your neighborhood protocol matters more than your Ring camera.&lt;/p&gt;&lt;/item&gt;
      &lt;item&gt;&lt;head rend="h3"&gt;Dark Engagement: Why Everyone Reads, Nobody Claps, and the Machines Remember Everything&lt;/head&gt;6 min read&lt;p&gt;People screenshot my posts instead of liking them. They reference ideas weeks later that never got a single public comment. This personal observation opens into something bigger: how engagement retreats into darkness while machines feast on the open web.&lt;/p&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Subscribe to the newsletter&lt;/head&gt;
    &lt;p&gt;One thoughtful dispatch when the work demands it—frameworks, systems, and field notes.&lt;/p&gt;
    &lt;head rend="h3"&gt;About the Author&lt;/head&gt;
    &lt;p&gt;Engineer-philosopher · Systems gardener · Digital consciousness architect&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45480620</guid><pubDate>Sun, 05 Oct 2025 11:07:53 +0000</pubDate></item><item><title>86 GB/s bitpacking with ARM SIMD (single thread)</title><link>https://github.com/ashtonsix/perf-portfolio/tree/main/bytepack</link><description>&lt;doc fingerprint="3b74d0de090e4684"&gt;
  &lt;main&gt;
    &lt;p&gt;We read every piece of feedback, and take your input very seriously.&lt;/p&gt;
    &lt;p&gt;To see all available qualifiers, see our documentation.&lt;/p&gt;
    &lt;p&gt;There was an error while loading. Please reload this page.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45481008</guid><pubDate>Sun, 05 Oct 2025 12:27:11 +0000</pubDate></item></channel></rss>