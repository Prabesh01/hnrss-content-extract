<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sat, 01 Nov 2025 18:12:41 +0000</lastBuildDate><item><title>Addiction Markets</title><link>https://www.thebignewsletter.com/p/addiction-markets-abolish-corporate</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45774640</guid><pubDate>Fri, 31 Oct 2025 17:42:55 +0000</pubDate></item><item><title>S.A.R.C.A.S.M: Slightly Annoying Rubik's Cube Automatic Solving Machine</title><link>https://github.com/vindar/SARCASM</link><description>&lt;doc fingerprint="46cfb39d4df2f5f0"&gt;
  &lt;main&gt;
    &lt;p&gt;Slightly Annoying Rubik's Cube Automatic Solving Machine&lt;/p&gt;
    &lt;p&gt;S.A.R.C.A.S.M is a 3D-printed, Teensy-powered robot that scans, solves, and sassily comments on a Rubik’s Cube.&lt;/p&gt;
    &lt;p&gt;This repository contains the code and schematics of the build.&lt;/p&gt;
    &lt;p&gt;Additional details may be found on the Teensy forum thread:&lt;/p&gt;
    &lt;p&gt;https://forum.pjrc.com/index.php?threads/sarcasm-an-over-engineered-rubiks-cube-solving-robot.77338/&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Short clip: https://youtube.com/shorts/Xer4mPZZH8E&lt;/item&gt;
      &lt;item&gt;Full demo: https://youtu.be/WV52RtuWXk0&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Teensy 4.1 main controller + ESP32-CAM for image capture.&lt;/item&gt;
      &lt;item&gt;ILI9341 display with custom 2D&amp;amp;3D graphics, animations, and lip-sync.&lt;/item&gt;
      &lt;item&gt;Stepper + servos for cube handling with position sensors to detect faults.&lt;/item&gt;
      &lt;item&gt;RGBW lighting synchronized to audio.&lt;/item&gt;
      &lt;item&gt;On-device TTS (espeak-ng) with a collection of sarcastic lines.&lt;/item&gt;
      &lt;item&gt;...&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A slight modification of Teensy's core is required in order for the whole code to fit in RAM.&lt;/p&gt;
    &lt;p&gt;Edit &lt;code&gt;cores/teensy4/usb_serial.c&lt;/code&gt; and &lt;code&gt;cores/teensy4/usb_serial2.c&lt;/code&gt; and, in each file, remove the DMAMEM attribute in front of the definition of the &lt;code&gt;txbuffer[]&lt;/code&gt; and &lt;code&gt;rx_buffer[]&lt;/code&gt; arrays.&lt;/p&gt;
    &lt;p&gt;This is a work in progress. The repo is currently in a very messy and incomplete state (and will most likely stay that way until I find some time to work on it...). Sorry !&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45777682</guid><pubDate>Fri, 31 Oct 2025 23:03:18 +0000</pubDate></item><item><title>Show HN: Strange Attractors</title><link>https://blog.shashanktomar.com/posts/strange-attractors</link><description>&lt;doc fingerprint="a3ac5b1ecf85872a"&gt;
  &lt;main&gt;
    &lt;p&gt;A few months back, while playing around with Three.js, I came across something that completely derailed my plans. Strange attractors - fancy math that creates beautiful patterns. At first I thought I'd just render one and move on, but then soon I realized that this is too much fun. When complexity emerges from three simple equations, when you see something chaotic emerge into beautiful, it's hard not to waste some time. I've spent countless hours, maybe more than I'd care to admit, watching these patterns form. I realized there's something deeply satisfying about seeing order emerge from randomness. Let me show you what kept me hooked.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Basics: Dynamical Systems and Chaos Theory&lt;/head&gt;
    &lt;p&gt;Dynamical Systems are a mathematical way to understand how things change over time. Imagine you have a system, which could be anything from the movement of planets to the growth of a population. In this system, there are rules that determine how it evolves from one moment to the next. These rules tell you what will happen next based on what is happening now. Some examples are, a pendulum, the weather patterns, a flock of birds, the spread of a virus in a population (we are all too familiar with this one), and stock market.&lt;/p&gt;
    &lt;p&gt;There are two primary things to understand about this system:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Phase Space: This is like a big collection of all the possible states the system can be in. Each state is like a snapshot of the system at a specific time. This is also called the state space or the world state.&lt;/item&gt;
      &lt;item&gt;Dynamics: These are the rules that takes one state of the system and moves it to the next state. It can be represented as a function that transforms the system from now to later.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For instance, when studying population growth, a phase-space (world-state) might consist of the current population size and the rate of growth or decline at a specific time. The dynamics would then be derived from models of population dynamics, which, considering factors like birth rates, death rates, and carrying capacity of the environment, dictate the changes in population size over time.&lt;/p&gt;
    &lt;p&gt;Another way of saying this is that the dynamical systems describe how things change over time, in a space of possibilities, governed by a set of rules. Numerous fields such as biology, physics, economics, and applied mathematics, study systems like these, focusing on the specific rules that dictate their evolution. These rules are grounded in relevant theories, such as Newtonian mechanics, fluid dynamics, and mathematics of economics, among others.&lt;/p&gt;
    &lt;head rend="h3"&gt;Chaos Theory&lt;/head&gt;
    &lt;p&gt;There are different ways of classifying dynamical systems, and one of the most interesting is the classification into chaotic and non-chaotic systems. The change over time in non-chaotic systems is more deterministic as compared to chaotic systems which exhibit randomness and unpredictability.&lt;/p&gt;
    &lt;p&gt;Chaos Theory is the sub branch of dynamical systems that studies chaotic systems and challenges the traditional deterministic views of causality. Most of the natural systems we observe are chaotic in nature, like the weather, a drop of ink dissolving in water, social and economic behaviours etc. In contrast, systems like the movement of planets, pendulums, and simple harmonic oscillators are extremely predictable and non-chaotic.&lt;/p&gt;
    &lt;p&gt;Chaos Theory deals with systems that exhibit irregular and unpredictable behavior over time, even though they follow deterministic rules. Having a set of rules that govern the system, and yet exhibit randomness and unpredictability, might seem a bit contradictory, but it is because the rules do not always represent the whole system. In fact, most of the time, these rules are an approximation of the system and that is what leads to the unpredictability. In complex systems, we do not have enough information to come up with a perfect set of rules. And by using incomplete information to make predictions, we introduce uncertainty, which amplifies over time, leading to the chaotic behaviour.&lt;/p&gt;
    &lt;p&gt;Chaotic systems generally have many non-linear interacting components, which we partially understand (or can partially observe) and which are very sensitive to small changes. A small change in the initial conditions can lead to a completely different outcome, a phenomenon known as the butterfly effect. In this post, we will try to see the butterfly effect in action but before that, let's talk about Strange Attractors.&lt;/p&gt;
    &lt;head rend="h2"&gt;Strange Attractors&lt;/head&gt;
    &lt;p&gt;To understand Strange Attractors, let's first understand what an attractor is. As discussed earlier, dynamical systems are all about change over time. During this change, the system moves through different possible states (remember the phase space jargon?). An attractor is a set of states towards which a system tends to settle over time, or you can say, towards which it is attracted. It's like a magnet that pulls the system towards it.&lt;/p&gt;
    &lt;p&gt;For example, think of a pendulum. When you release it, it swings back and forth, but eventually, it comes to rest at the bottom. The bottom is the attractor in this case. It's the state towards which the pendulum is attracted.&lt;/p&gt;
    &lt;p&gt;This happens due to the system's inherent dynamics, which govern how states in the phase space change. Here are some of the reasons why different states get attracted towards attractors:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Stability: Attractors are stable states of the system, meaning that once the system reaches them, it tends to stay there. This stability arises from the system's dynamics, which push it towards the attractor and keep it there.&lt;/item&gt;
      &lt;item&gt;Dissipation: Many dynamical systems have dissipative forces, which cause the system to lose energy over time. This loss of energy leads the system to settle into a lower-energy state, which often corresponds to an attractor. This is what happens in the case of the pendulum.&lt;/item&gt;
      &lt;item&gt;Contraction: In some regions of the phase space, the system's dynamics cause trajectories to converge. This contraction effect means that nearby states will tend to come closer together over time, eventually being drawn towards the attractor.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Some attractors have complex governing equations that can create unpredictable trajectories or behaviours. These nonlinear interactions can result in multiple stable states or periodic orbits, towards which the system evolves. These complex attractors are categorised as strange attractors. They are called "strange" due to their unique characteristics.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Fractal Structure: Strange attractors often have a fractal-like structure, meaning they display intricate patterns that repeat at different scales. This complexity sets them apart from simpler, regular attractors.&lt;/item&gt;
      &lt;item&gt;Sensitive Dependence on Initial Conditions: Systems with strange attractors are highly sensitive to their initial conditions. Small changes in the starting point can lead to vastly different long-term behaviors, a phenomenon known as the "butterfly effect".&lt;/item&gt;
      &lt;item&gt;Unpredictable Trajectories: The trajectories on a strange attractor never repeat themselves, exhibiting non-periodic motion. The system's behavior appears random and unpredictable, even though it is governed by deterministic rules.&lt;/item&gt;
      &lt;item&gt;Emergent Order from Chaos: Despite their chaotic nature, strange attractors exhibit a form of underlying order. Patterns and structures emerge from the seemingly random behavior, revealing the complex dynamics at play.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You can observe most of these characteristics in the visualisation. The one which is most fascinating to observe is the butterfly effect.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Butterfly Effect&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;A butterfly can flutter its wings over a flower in China and cause a hurricane in the Caribbean.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;One of the defining features of strange attractors is their sensitivity to initial conditions. This means that small changes in the starting state of the system can lead to vastly different long-term behaviors, a phenomenon known as the butterfly effect. In chaotic systems, tiny variations in the initial conditions can amplify over time, leading to drastically different outcomes.&lt;/p&gt;
    &lt;p&gt;In our visualisation, let's observe this behavior on Thomas Attractor. It is governed by the following equations:&lt;/p&gt;
    &lt;head rend="h3"&gt;Thomas Attractor Equation&lt;/head&gt;
    &lt;quote&gt;1float a = 0.19;23dx = (-a*x + sin(y)) * dt;4dy = (-a*y + sin(z)) * dt;5dz = (-a*z + sin(x)) * dt;&lt;/quote&gt;
    &lt;quote&gt;1float a = 0.19;23dx = (-a*x + sin(y)) * dt;4dy = (-a*y + sin(z)) * dt;5dz = (-a*z + sin(x)) * dt;&lt;/quote&gt;
    &lt;p&gt;A small change in the parameter &lt;code&gt;a&lt;/code&gt; can lead to vastly different particle trajectories and the overall shape of the
attractor. Change this value in the control panel and observe the butterfly effect in action.&lt;/p&gt;
    &lt;p&gt;There is another way of observing the butterfly effect in this visualisation. Change the &lt;code&gt;Initial State&lt;/code&gt; from &lt;code&gt;cube&lt;/code&gt; to
&lt;code&gt;sphere surface&lt;/code&gt; in the control panel and observe how the particles move differently in the two cases. The particles
eventually get attracted to the same states but have different trajectories.&lt;/p&gt;
    &lt;head rend="h2"&gt;Implementation Details&lt;/head&gt;
    &lt;p&gt;This visualization required rendering a large number of particles using Three.js. To achieve this efficiently, we used a technique called ping-pong rendering 2. This method handles iterative updates of particle systems directly on the GPU, minimizing data transfers between the CPU and GPU. It utilizes two frame buffer objects (FBOs) that alternate roles: One stores the current state of particles and render them on the screen, while the other calculates the next state.&lt;/p&gt;
    &lt;head rend="h3"&gt;Implementation Workflow&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Setting Up Frame Buffer Objects (FBOs): We start by creating two FBOs,&lt;/p&gt;&lt;code&gt;ping&lt;/code&gt;and&lt;code&gt;pong&lt;/code&gt;, to hold the current and next state of particles. These buffers store data such as particle positions in RGBA channels, making efficient use of GPU resources.typescript1const ping = new THREE.WebGLRenderTarget(size, size, {2minFilter: THREE.NearestFilter,3magFilter: THREE.NearestFilter,4format: THREE.RGBAFormat,5stencilBuffer: false,6type: THREE.FloatType,7});89const pong = new THREE.WebGLRenderTarget(size, size, {10minFilter: THREE.NearestFilter,11magFilter: THREE.NearestFilter,12format: THREE.RGBAFormat,13stencilBuffer: false,14type: THREE.FloatType,15});1const ping = new THREE.WebGLRenderTarget(size, size, {2minFilter: THREE.NearestFilter,3magFilter: THREE.NearestFilter,4format: THREE.RGBAFormat,5stencilBuffer: false,6type: THREE.FloatType,7});89const pong = new THREE.WebGLRenderTarget(size, size, {10minFilter: THREE.NearestFilter,11magFilter: THREE.NearestFilter,12format: THREE.RGBAFormat,13stencilBuffer: false,14type: THREE.FloatType,15});&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Shader Programs for Particle Dynamics: The shader programs execute on the GPU and apply attractor dynamics to each particle. Following is the attractor function which update the particle positions based on the attractor equation.&lt;/p&gt;glsl1vec3 attractor(vec3 pos) {2float a = 0.16;3float x = pos.x, y = pos.y, z = pos.z;4float dt = 0.015;56float dx, dy, dz;7dx = (-a*x + sin(y)) * dt;8dy = (-a*y + sin(z)) * dt;9dz = (-a*z + sin(x)) * dt;10return vec3(dx, dy, dz);11}1vec3 attractor(vec3 pos) {2float a = 0.16;3float x = pos.x, y = pos.y, z = pos.z;4float dt = 0.015;56float dx, dy, dz;7dx = (-a*x + sin(y)) * dt;8dy = (-a*y + sin(z)) * dt;9dz = (-a*z + sin(x)) * dt;10return vec3(dx, dy, dz);11}&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Rendering and Buffer Swapping: In each frame, the shader computes the new positions based on the attractor's equations and stores them in the inactive buffer. After updating, the roles of the FBOs are swapped: The previously inactive buffer becomes active, and vice versa.&lt;/p&gt;typescript1const currentTarget = flip ? ping : pong;2const nextTarget = flip ? pong : ping;34// Use current positions for calculations in shader5uniforms.positions.value = currentTarget.texture;67// Render the other on the screen8gl.setRenderTarget(nextTarget);9gl.clear();10gl.render(scene, camera);11gl.setRenderTarget(null);1213flip = !flip;1const currentTarget = flip ? ping : pong;2const nextTarget = flip ? pong : ping;34// Use current positions for calculations in shader5uniforms.positions.value = currentTarget.texture;67// Render the other on the screen8gl.setRenderTarget(nextTarget);9gl.clear();10gl.render(scene, camera);11gl.setRenderTarget(null);1213flip = !flip;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This combination of efficient shader calculations and the ping-pong technique allows us to render the particle system.&lt;/p&gt;
    &lt;p&gt;If you have any comments, please leave them on this GitHub discussions topic. Sooner or later, I will integrate it with the blog. The hacker news discussion can be found here.&lt;/p&gt;
    &lt;head rend="h4"&gt;Footnotes&lt;/head&gt;
    &lt;head rend="h4"&gt;References&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Inspired by the work of Maxim&lt;/item&gt;
      &lt;item&gt;Wikipedia: Attractor&lt;/item&gt;
      &lt;item&gt;Wikipedia: List Of Chaotic Maps&lt;/item&gt;
      &lt;item&gt;Dynamical Systems Theory: What in the World is it?&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;Related Links&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;https://fusefactory.github.io/openfuse/strange%20attractors/particle%20system/Strange-Attractors-GPU/&lt;/item&gt;
      &lt;item&gt;https://chaoticatmospheres.com/mathrules-strange-attractors&lt;/item&gt;
      &lt;item&gt;https://www.dynamicmath.xyz/strange-attractors/&lt;/item&gt;
      &lt;item&gt;https://www.reddit.com/r/math/comments/z0dmms/visualization_of_3d_strange_attractors&lt;/item&gt;
      &lt;item&gt;https://www.clicktorelease.com/code/codevember-2016/3&lt;/item&gt;
      &lt;item&gt;https://discourse.mcneel.com/t/strange-attractors/120053&lt;/item&gt;
      &lt;item&gt;https://www.reddit.com/r/generative/comments/191fkkv/genuary_day_8_chaotic_system/&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45777810</guid><pubDate>Fri, 31 Oct 2025 23:23:59 +0000</pubDate></item><item><title>Hard Rust requirements from May onward</title><link>https://lists.debian.org/debian-devel/2025/10/msg00285.html</link><description>&lt;doc fingerprint="87995b15cc375c90"&gt;
  &lt;main&gt;
    &lt;quote&gt;Hi all, I plan to introduce hard Rust dependencies and Rust code into APT, no earlier than May 2026. This extends at first to the Rust compiler and standard library, and the Sequoia ecosystem. In particular, our code to parse .deb, .ar, .tar, and the HTTP signature verification code would strongly benefit from memory safe languages and a stronger approach to unit testing. If you maintain a port without a working Rust toolchain, please ensure it has one within the next 6 months, or sunset the port. It's important for the project as whole to be able to move forward and rely on modern tools and technologies and not be held back by trying to shoehorn modern software on retro computing devices. Thank you for your understanding. -- debian developer - deb.li/jak | jak-linux.org - free software dev ubuntu core developer i speak de, en&lt;/quote&gt;
    &lt;p&gt;Attachment: signature.asc&lt;lb/&gt; Description: PGP signature&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45779860</guid><pubDate>Sat, 01 Nov 2025 07:31:40 +0000</pubDate></item><item><title>You can't refuse to be scanned by ICE's facial recognition app, DHS document say</title><link>https://www.404media.co/you-cant-refuse-to-be-scanned-by-ices-facial-recognition-app-dhs-document-says/</link><description>&lt;doc fingerprint="d4998b5510e20338"&gt;
  &lt;main&gt;
    &lt;p&gt;Immigration and Customs Enforcement (ICE) does not let people decline to be scanned by its new facial recognition app, which the agency uses to verify a person’s identity and their immigration status, according to an internal Department of Homeland Security (DHS) document obtained by 404 Media. The document also says any face photos taken by the app, called Mobile Fortify, will be stored for 15 years, including those of U.S. citizens.&lt;/p&gt;
    &lt;p&gt;The document provides new details about the technology behind Mobile Fortify, how the data it collects is processed and stored, and DHS’s rationale for using it. On Wednesday 404 Media reported that both ICE and Customs and Border Protection (CBP) are scanning peoples’ faces in the streets to verify citizenship.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45780228</guid><pubDate>Sat, 01 Nov 2025 08:58:54 +0000</pubDate></item><item><title>Do you know that there is an HTML tables API?</title><link>https://christianheilmann.com/2025/10/08/abandonware-of-the-web-do-you-know-that-there-is-an-html-tables-api/</link><description>&lt;doc fingerprint="3220185a99e5836b"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Abandonware of the web: do you know that there is an HTML tables API?&lt;/head&gt;Wednesday, October 8th, 2025 at 3:08 pm&lt;p&gt;When people turn data into HTML tables using JavaScript, they either use the DOM methods (createElement() and the likes), but most of the time just append a huge string and use innerHTML, which always is a security concern. However, did you know that HTML tables also have an old, forgotten API ? Using this one, you can loop over tables, create bodies, rows, cells, heads, footers, captions an summaries (yes, HTML tables have all of those) and access the table cells. Without having to re-render the whole table on each change. Check out the Codepen to see how you can create a table from a nested array:&lt;/p&gt;&lt;table&gt;&lt;row&gt;&lt;cell&gt;&lt;quote&gt;let table = [ ['one','two','three'], ['four','five','six'] ]; let b = document.body; let t = document.createElement('table'); b.appendChild(t); table.forEach((row,ri) =&amp;gt; { let r = t.insertRow(ri); row.forEach((l,i) =&amp;gt; { let c = r.insertCell(i); c.innerText = l; }) });&lt;/quote&gt;&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;You can then access each table cell with an index (with t being a reference to the table):&lt;/p&gt;&lt;table&gt;&lt;row&gt;&lt;cell&gt;&lt;quote&gt;console.log(t.rows[1].cells[1]); // =&amp;gt; &amp;lt;td&amp;gt;five&amp;lt;/td&amp;gt;&lt;/quote&gt;&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;You can also delete and create cells and rows, if you want to add a row to the end of the table with a cell, all you need to do is:&lt;/p&gt;&lt;table&gt;&lt;row&gt;&lt;cell&gt;&lt;quote&gt;t.insertRow(-1); t.rows[2].insertCell(0); t.rows[2].cells[0].innerText = 'foo';&lt;/quote&gt;&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;There are a few things here that are odd – adding a -1 to add a row at the end for example – and there seems to be no way to create a TH element instead of a TD. All table cells are just cells.&lt;/p&gt;&lt;p&gt;However, seeing how much of a pain it is to create tables, it would be fun to re-visit this API and add more functionality to it. We did add a lot of things to HTML forms, like formData and the change event, so why not add events and other features to tables. That way they’d finally get the status as data structures and not a hack to layout content on the web.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45781293</guid><pubDate>Sat, 01 Nov 2025 12:58:21 +0000</pubDate></item><item><title>SQLite concurrency and why you should care about it</title><link>https://jellyfin.org/posts/SQLite-locking/</link><description>&lt;doc fingerprint="7b4e765eeca27f9a"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;SQLite concurrency and why you should care about it&lt;/head&gt;
    &lt;p&gt;SQLite is a powerful database engine, but due to its design, it has limitations that should not be overlooked.&lt;/p&gt;
    &lt;p&gt;Jellyfin has used a SQLite-based database for storing most of its data for years, but it has also encountered issues on many systems. In this blog post, I will explain how we address these limitations and how developers using SQLite can apply the same solutions.&lt;/p&gt;
    &lt;p&gt;This will be a technical blog post intended for developers and everyone wanting to learn about concurrency.&lt;/p&gt;
    &lt;p&gt;Also Jellyfin's implementation of locking for SQLite should be fairly easy to be implemented into another EF Core application if you are facing the same issue.&lt;/p&gt;
    &lt;p&gt;- JPVenson&lt;/p&gt;
    &lt;head rend="h2"&gt;The Premise&lt;/head&gt;
    &lt;p&gt;SQLite is a file-based database engine running within your application and allows you to store data in a relational structure. Overall it gives your application the means of storing structured data as a single file and without having to depend on another application to do so. Naturally this also comes at a price. If your application fully manages this file, the assumption must be made that your application is the sole owner of this file, and nobody else will tinker with it while you are writing data to it.&lt;/p&gt;
    &lt;p&gt;So an application that wants to use SQLite as its database needs to be the only one accessing it. Having established this fact, an important thought arises: if only a single write operation should be performed on a single file at a time, this rule must also apply to operations within the same application.&lt;/p&gt;
    &lt;head rend="h2"&gt;The W-A-L mode&lt;/head&gt;
    &lt;p&gt;SQLite has a feature that tries to get around this limitation: the Write-Ahead-Log (WAL). The WAL is a separate file that acts as a journal of operations that should be applied to an SQLite file. This allows multiple parallel writes to take place and get enqueued into the WAL. When another part of the application wants to read data, it reads from the actual database, then scans the WAL for modifications and applies them on the fly. This is not a foolproof solution; there are still scenarios where WAL does not prevent locking conflicts.&lt;/p&gt;
    &lt;head rend="h2"&gt;SQLite transactions&lt;/head&gt;
    &lt;p&gt;A transaction is supposed to ensure two things. Modifications made within a transaction can be reverted, either when something goes wrong or when the application decides it should and optionally a transaction may also block other readers from reading data that is modified within a transaction. This is where it gets spicy and we come to the real reason why I am writing this blog post. For some reason on some systems that run Jellyfin when a transaction takes place the SQLite engine reports the database is locked and instead of waiting for the transaction to be resolved the engine refuses to wait and just crashes. This seems to be a not uncommon issue and there are many reports to be found on the issue.&lt;/p&gt;
    &lt;p&gt;The factor that makes this issue so bad is that it does not happen reliably. So far we only have one team member where this can be (somewhat) reliably be reproduced which makes this an even worse a bug. From the reports this issue happens across all operating systems, drive speeds and with or without virtualization. So we do not have any deciding factor identified that even contributes to the likelihood of the issue happening.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Jellyfin factor&lt;/head&gt;
    &lt;p&gt;Having established the general theory on how SQLite behaves, we also have to look at the specifics of Jellyfins usage of SQLite. During normal operations on a recommended setup (Non-Networked Storage and preferably SSD) its unusual for any problems to arise, however the way Jellyfin utilises the SQLite db up to 10.11 is very suboptimal. In versions prior to 10.11 Jellyfin had a bug in its parallel task limit which resulted in exponential overscheduling of library scan operations which hammered the database engine with thousands of parallel write requests that an SQLite engine is simply not able to handle. While most SQLite engine implementations have retry behavior, they also have timeouts and checks in place to prevent limitless waiting so if we stress the engine enough, it just fails with an error. That and very long running and frankly unoptimized transactions could lead to the database just being overloaded with requests and flaking out.&lt;/p&gt;
    &lt;head rend="h2"&gt;The solution&lt;/head&gt;
    &lt;p&gt;Since we moved the codebase over to EF Core proper, we have the tools to actually do something about this as EF Core gives us a structured abstraction level. EF Core supports a way of hooking into every command execution or transaction by creating Interceptors. With an interceptor we can finally do the straight forward idea of just "not" writing to the database in parallel in a transparent way to the caller. The overall idea is to have multiple strategies of locking. Because all levels of synchronization will inevitably come at the cost of performance, we only want to do it when it is really necessary. So, I decided on three locking strategies:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;No-Lock&lt;/item&gt;
      &lt;item&gt;Optimistic locking&lt;/item&gt;
      &lt;item&gt;Pessimistic locking&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As a default, the no-lock behavior does exactly what the name implies. Nothing. This is the default because my research shows that for 99% all of this is not an issue and every interaction at this level will slow down the whole application.&lt;/p&gt;
    &lt;p&gt;Both the optimistic and pessimistic behaviors use two interceptors—one for transactions and one for commands—and override &lt;code&gt;SaveChanges&lt;/code&gt; in &lt;code&gt;JellyfinDbContext&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h3"&gt;Optimistic locking behavior&lt;/head&gt;
    &lt;p&gt;Optimistic locking means to assume the operation in question will succeed and only handle issues afterwards. In essence this can be boiled down to "Try and Retry and Retry ..." for a set number of times until either we succeed with the operation or fail entirely. This still leaves the possibility that we will not actually be able to perform a write, but the introduced overhead is far less than the Pessimistic locking behavior.&lt;/p&gt;
    &lt;p&gt;The idea behind how this works is simple: every time two operations try to write to the database, one will always win. The other will fail, wait some time, then retry a few times.&lt;/p&gt;
    &lt;p&gt;Jellyfin uses the &lt;code&gt;Polly&lt;/code&gt; library perform the retry behavior and will only retry operations it will find have been locked due to this exact issue.&lt;/p&gt;
    &lt;head rend="h3"&gt;Pessimistic locking behavior&lt;/head&gt;
    &lt;p&gt;Pessimistic locking always locks when a write to SQLite should be performed. Essentially every time an transaction is started or a write operation on the database is done though EF Core, Jellyfin will wait until all other read operations are finished and then block all other operations may they be read or write until the write in question has been performed. This however means, that Jellyfin can only ever perform a single write to the database, even if it would technically does not need to.&lt;/p&gt;
    &lt;p&gt;In theory, an application should have no issue reading from table "Alice" while writing to table "Bob" however to eliminate all possible sources of concurrency related locking, Jellyfin will only ever allow a single write performed on its database in this mode. While this will absolutely result in the most stable operation, it will undoubtedly also be the slowest.&lt;/p&gt;
    &lt;p&gt;Jellyfin uses a ReaderWriterLockSlim to lock the operations, that means we allow an unlimited number of reads to happen concurrently while only one write may ever be done on the database.&lt;/p&gt;
    &lt;head rend="h3"&gt;The future Smart locking behavior&lt;/head&gt;
    &lt;p&gt;In the future we might also consider combining both modes, to get the best of both worlds.&lt;/p&gt;
    &lt;head rend="h1"&gt;The result&lt;/head&gt;
    &lt;p&gt;Initial testing showed that with both modes, we had great success in handling the underlying issue. While we are not yet sure why this happens only on some systems when others work, we at least now have an option for users previously left out of using Jellyfin.&lt;/p&gt;
    &lt;p&gt;When I was researching this topic, I found many reports all over the internet facing the same error but nobody was able to provide a conclusive explanation whats really happening here. There have been similar proposals made to handle it but there wasn't a "ready to drop in" solution that handles all the different cases or only code that required massive modifications to every EF Core query. Jellyfin's implementation of the locking behaviors should be a copy-paste solution for everyone having the same issues as its using interceptors and the caller has no idea of the actual locking behavior.&lt;/p&gt;
    &lt;p&gt;Best of luck,&lt;/p&gt;
    &lt;p&gt;- JPVenson&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45781298</guid><pubDate>Sat, 01 Nov 2025 12:59:03 +0000</pubDate></item><item><title>CharlotteOS – An Experimental Modern Operating System</title><link>https://github.com/charlotte-os/Catten</link><description>&lt;doc fingerprint="25a44afe193d139f"&gt;
  &lt;main&gt;
    &lt;p&gt;&lt;code&gt;catten&lt;/code&gt; is an operating system kernel developed as a key component of the CharlotteOS project but it is designed to be flexible enough that we hope it can also find use in many other places. It seeks to be a monolithic kernel with low-level system call interfaces that borrows ideas from exokernels and other novel systems like Plan 9 and Fuchsia. Its design allows for almost any higher level interface to be layered on top and also includes a typesafe system namespace (akin to the namespaces found in Fuschsia and Plan 9 but more flexible and typesafe) with URIs as paths which has the added benefit of allowing access to the namespace of another host over a network without having to mount anything locally all while being secured by granular capabilities and a persistent mandatory access control policy.&lt;/p&gt;
    &lt;p&gt;catten is still in early development, and core subsystems are actively being built. We welcome contributions—feel free to grab an issue from the tracker, suggest features, or participate in discussions on our repository, Discord server or Matrix instance.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;catten&lt;/code&gt;is written in Rust and ISA specific assembly languages&lt;/item&gt;
      &lt;item&gt;x86_64 assembly should use Intel syntax as implemented by &lt;code&gt;rustc&lt;/code&gt;and&lt;code&gt;llvm-mc&lt;/code&gt;exclusively&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;C language dependencies are allowed if vetted by maintainers.&lt;/item&gt;
      &lt;item&gt;Any dependencies in languages other than Rust, C, and assembly are strictly forbidden.&lt;/item&gt;
      &lt;item&gt;Always prefer a high-quality Rust equivalent over an external C library unless there is good reason to do otherwise&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Processor: &lt;list rend="ul"&gt;&lt;item&gt;x86_64 (Primary ISA) &lt;list rend="ul"&gt;&lt;item&gt;x2APIC LAPIC operating mode&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;x86_64 (Primary ISA) &lt;/item&gt;
      &lt;item&gt;Firmware: &lt;list rend="ul"&gt;&lt;item&gt;Unified Extensible Firmware Interface (UEFI)&lt;/item&gt;&lt;item&gt;Advanced Configuration and Power Interface (ACPI)&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Memory: &lt;list rend="ul"&gt;&lt;item&gt;Recommended: &amp;gt;= 1 GiB&lt;/item&gt;&lt;item&gt;Required: 128 MiB&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Storage: &lt;list rend="ul"&gt;&lt;item&gt;Recommended: &amp;gt;= 64 GiB&lt;/item&gt;&lt;item&gt;Required: 4 GiB&lt;/item&gt;&lt;item&gt;Device Types: &lt;list rend="ul"&gt;&lt;item&gt;Non-Volatile Memory Express (NVMe)&lt;/item&gt;&lt;item&gt;USB Mass Storage Device Class&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Output: &lt;list rend="ul"&gt;&lt;item&gt;Display Adapter: Any adapter capable of providing framebuffers via the UEFI Graphics Output Protocol&lt;/item&gt;&lt;item&gt;Serial: &lt;list rend="ul"&gt;&lt;item&gt;NS16550 compatible UART&lt;/item&gt;&lt;item&gt;USB CDC ACM (Virtual UART)&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Input: &lt;list rend="ul"&gt;&lt;item&gt;Keyboard &lt;list rend="ul"&gt;&lt;item&gt;PS/2&lt;/item&gt;&lt;item&gt;USB HID&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;item&gt;Serial &lt;list rend="ul"&gt;&lt;item&gt;NS16550 compatible UART&lt;/item&gt;&lt;item&gt;USB CDC ACM (Virtual UART)&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Keyboard &lt;/item&gt;
      &lt;item&gt;Networking: &lt;list rend="ul"&gt;&lt;item&gt;USB CDC Network Control Model&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Please reach out to us on Matrix or Discord if you are interested in contributing.&lt;/p&gt;
    &lt;p&gt;This kernel is licensed under the GNU General Public License version 3.0 (or at your option, any later version). By contributing to this project you agree to license your contributions under those same terms exclusively.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45781397</guid><pubDate>Sat, 01 Nov 2025 13:12:47 +0000</pubDate></item><item><title>Updated practice for review articles and position papers in ArXiv CS category</title><link>https://blog.arxiv.org/2025/10/31/attention-authors-updated-practice-for-review-articles-and-position-papers-in-arxiv-cs-category/</link><description>&lt;doc fingerprint="ff55b99b0494c981"&gt;
  &lt;main&gt;
    &lt;p&gt;arXiv’s computer science (CS) category has updated its moderation practice with respect to review (or survey) articles and position papers. Before being considered for submission to arXiv’s CS category, review articles and position papers must now be accepted at a journal or a conference and complete successful peer review. When submitting review articles or position papers, authors must include documentation of successful peer review to receive full consideration. Review/survey articles or position papers submitted to arXiv without this documentation will be likely to be rejected and not appear on arXiv.&lt;lb/&gt; This change is being implemented due to the unmanageable influx of review articles and position papers to arXiv CS.&lt;/p&gt;
    &lt;p&gt;Is this a policy change?&lt;/p&gt;
    &lt;p&gt;Technically, no! If you take a look at arXiv’s policies for specific content types you’ll notice that review articles and position papers are not (and have never been) listed as part of the accepted content types. Review articles and position papers have, in the past, only been accepted at moderator discretion, because the few we received were of high quality and of interest to arXiv readers and the scientific community at large.&lt;/p&gt;
    &lt;p&gt;Why is the arXiv CS category making this change?&lt;/p&gt;
    &lt;p&gt;In the past few years, arXiv has been flooded with papers. Generative AI / large language models have added to this flood by making papers – especially papers not introducing new research results – fast and easy to write. While categories across arXiv have all seen a major increase in submissions, it’s particularly pronounced in arXiv’s CS category.&lt;/p&gt;
    &lt;p&gt;The goal of this change of practice is to:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Help arXiv readers more easily find valuable review articles and position papers written by subject matter experts&lt;/item&gt;
      &lt;item&gt;Free up moderators to focus on the content types officially accepted by arXiv, reduce submission hold times, and keep the pace of scientific discovery going!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Above all, the core purpose of arXiv is to share research papers and facilitate scientific discovery quickly and freely. We are making this change in support of that mission.&lt;/p&gt;
    &lt;p&gt;In the past, arXiv CS received a relatively small amount of review or survey articles, and those we did receive were of extremely high quality, written by senior researchers at the request of publications like Annual Reviews, Proceedings of the IEEE, and Computing Surveys. Position paper submissions to arXiv were similarly rare, and usually produced by scientific societies or government study groups (for example,the Computing Research Association of the National Academies of Science, Engineering, and Medicine). While, as now, these papers were not content types officially accepted by arXiv, the arXiv moderators accepted them because of their scholarly value to the research community.&lt;/p&gt;
    &lt;p&gt;Fast forward to present day – submissions to arXiv in general have risen dramatically, and we now receive hundreds of review articles every month. The advent of large language models have made this type of content relatively easy to churn out on demand, and the majority of the review articles we receive are little more than annotated bibliographies, with no substantial discussion of open research issues.&lt;/p&gt;
    &lt;p&gt;arXiv believes that there are position papers and review articles that are of value to the scientific community, and we would like to be able to share them on arXiv. However, our team of volunteer moderators do not have the time or bandwidth to review the hundreds of these articles we receive without taking time away from our core purpose, which is to share research articles.&lt;/p&gt;
    &lt;p&gt;Reasonable and trusted outside refereed venues already exist (conferences and journals) which solicit position papers and review articles on subjects of concern or interest to our readers (such as concerns over privacy, ethics, safety, and security of recent CS technologies, particularly applications of artificial intelligence) and as part of that process, they conduct in-depth review to assure quality, evidential support of opinions, and scholarly value. Since arXiv does not have the resources to conduct this quality-control in-house for content types that we do not officially accept, this change of practice is allowing us to rely on these refereed venues to do so for us so that we can still share position papers and review articles of value on arXiv.&lt;/p&gt;
    &lt;p&gt;How do I submit my review article or position paper to arXiv? Before submission to arXiv, have your review article or position paper accepted to a refereed venue with peer review like a journal or a conference. Review articles or position papers must be accepted to a journal or conference before being submitted to arXiv and you must have documentation of complete and successful peer review.&lt;/p&gt;
    &lt;p&gt;Please note: the review conducted at conference workshops generally does not meet the same standard of rigor of traditional peer review and is not enough to have your review article or position paper accepted to arXiv.&lt;/p&gt;
    &lt;p&gt;How do I show my review article or position paper has successfully completed peer review? When you submit to arXiv, please include the peer reviewed journal reference and DOI metadata. If you do not provide this, your review article or position paper will likely be rejected.&lt;/p&gt;
    &lt;p&gt;Can I resubmit my position paper or review article after being rejected? If your position paper or review article was rejected because it did not complete a successful peer review process, you can submit an appeal request to resubmit if your article has since completed a successful peer review process. Do not resubmit your position paper or review article without an accepted appeal. Here are the instructions for how to appeal.&lt;/p&gt;
    &lt;p&gt;I have a scientific paper studying the impact of science and technology in society. Can I submit this to arXiv without peer review? Yes, arXiv has always released these types of scientific papers, for example in cs.CY or physics.soc-ph. These are scientific research papers and are not subject to this moderation practice change.&lt;/p&gt;
    &lt;p&gt;Will other categories on arXiv also change their practice re: review articles and position papers? Each category of arXiv has different moderators, who are subject matter experts with a terminal degree in their particular subject, to best serve the scholarly pursuits, goals, and standards of their category. While all moderators adhere to arXiv policy, the only policy arXiv has in place with regard to review articles and position papers is that they are not a generally accepted content type. The goal of the moderators of each category is to make sure the work being submitted is actually science, and that it is of potential interest to the scientific community. If other categories see a similar rise in LLM-written review articles and position papers, they may choose to change their moderation practices in a similar manner to better serve arXiv authors and readers. We will make these updates public if and when they do occur.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45782136</guid><pubDate>Sat, 01 Nov 2025 14:58:05 +0000</pubDate></item><item><title>Open-Source Ada: From Gateware to Application</title><link>https://blog.adacore.com/open-source-ada-from-gateware-to-application</link><description>&lt;doc fingerprint="a60816a801d4c06a"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Open-Source Ada: From Gateware to Application&lt;/head&gt;
    &lt;head rend="h2"&gt;by Olivier Henley –&lt;/head&gt;
    &lt;head rend="h1"&gt;IntroÂducÂtion &amp;amp; MotiÂvaÂtion #&lt;/head&gt;
    &lt;p&gt;To jump right in, all build instrucÂtions and source code can be found here.&lt;/p&gt;
    &lt;head rend="h2"&gt;Open-Source Stack Matters&lt;/head&gt;
    &lt;p&gt;As the GNAT AcaÂdÂeÂmÂic ProÂgram (GAP) CoorÂdiÂnaÂtor at AdaÂCore, I focus on thorÂough, hands-on learnÂing in sysÂtem proÂgramÂming. A fulÂly open-source stack (covÂerÂing gateÂware, toolÂchains, and appliÂcaÂtions) proÂvides the freeÂdom to explore and refine every layÂer, from silÂiÂcon-levÂel conÂtrol to high-levÂel abstracÂtions. This Neorv32 Basic Input/âOutput SysÂtem (BIOS) project highÂlights Ada as a friendÂly yet powÂerÂful alterÂnaÂtive to C for open-source development.&lt;/p&gt;
    &lt;head rend="h2"&gt;Who This Post is For&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;CuriÂous develÂopÂers explorÂing &lt;code&gt;Ada&lt;/code&gt;beyond its usuÂal reputation.&lt;/item&gt;
      &lt;item&gt;Ada enthuÂsiÂasts who lack the time to experÂiÂment with a softÂcore CenÂtral ProÂcessÂing Unit (CPU), a procesÂsor defined in a HardÂware DescripÂtion LanÂguage (HDL) and deployÂable on reconÂfigÂurable logÂic like a Field-ProÂgramÂmaÂble Gate Array (FPGA), rather than fixed silicon.&lt;/item&gt;
      &lt;item&gt;EmbedÂded sysÂtem newÂcomÂers seekÂing a pracÂtiÂcal introÂducÂtion to fundamentals.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Neorv32, RISCâV, VHDL, and ULX3S #&lt;/head&gt;
    &lt;head rend="h2"&gt;Neorv32?&lt;/head&gt;
    &lt;p&gt;The Neorv32 SysÂtem on a Chip (SoC) is a VHDL-based RISCâV softÂcore feaÂturÂing a broad set of extenÂsions and periphÂerÂals along with extenÂsive docÂuÂmenÂtaÂtion. The Neorv32 is the brainÂchild of Stephan NoltÂing, who, accordÂing to his GitHub page, is assoÂciÂatÂed with the FraunÂhofer InstiÂtute for MicroÂelecÂtronÂic CirÂcuits and SysÂtems, GerÂmany.&lt;/p&gt;
    &lt;head rend="h2"&gt;RISCâV?&lt;/head&gt;
    &lt;p&gt;RISCâV is an open, extenÂsiÂble InstrucÂtion Set ArchiÂtecÂture (ISA) groundÂed in proven Reduced InstrucÂtion Set ComÂputÂer (RISC) prinÂciÂples, designed to be both modÂuÂlar and scalÂable. In my view, the openÂness and wideÂspread accepÂtance of RISCâV make it less susÂcepÂtiÂble to techÂniÂcal obsoÂlesÂcence than proÂpriÂetary or less wideÂly adoptÂed archiÂtecÂtures. RISCâVâs extenÂsiÂbilÂiÂty ensures it can evolve rather than become obsoÂlete, makÂing a lot of sense in acaÂdÂeÂmÂic and indusÂtriÂal contexts.&lt;/p&gt;
    &lt;head rend="h2"&gt;VHDL?&lt;/head&gt;
    &lt;p&gt;VHDL is a stanÂdardÂized hardÂware descripÂtion lanÂguage. Like Ada, it is strucÂtured, strongÂly typed, and enforces strict comÂpiÂlaÂtion rules. VHDL was origÂiÂnalÂly designed based on Ada: its synÂtax is very simÂiÂlar, and the semanÂtics align up to a point, with both lanÂguages priÂorÂiÂtizÂing corÂrectÂness over conÂveÂnience. Although verÂbose for some tastes, this clarÂiÂty reduces uninÂtendÂed errors and ensures explicÂit, unamÂbiguÂous design comÂmuÂniÂcaÂtion. The Neorv32 project is an excelÂlent tesÂtaÂment to the comÂpoundÂing benÂeÂfits of these attributes.&lt;/p&gt;
    &lt;head rend="h2"&gt;ULX3S?&lt;/head&gt;
    &lt;p&gt;The Radiona ULX3S is an open-source develÂopÂment board built around the LatÂtice ECP5 FPGA. Although the chip manÂuÂfacÂturÂing remains proÂpriÂetary, the board design is fulÂly open. Iâm using the 85,000 Look-Up Tables (85k LUT) verÂsion for its flexÂiÂbilÂiÂty and capaÂbilÂiÂty. It includes varÂiÂous periphÂerÂals but the real focus here is on the ECP5 FPGA, where weâll deploy our cusÂtom BIOS over the Neorv32 SoC.&lt;/p&gt;
    &lt;head rend="h1"&gt;DeterÂminÂisÂtic SoC #&lt;/head&gt;
    &lt;head rend="h2"&gt;CuratÂing Quality&lt;/head&gt;
    &lt;p&gt;The Neorv32 is designed with robustÂness and preÂdictabilÂiÂty in mind. It folÂlows a HarÂvard archiÂtecÂture, keepÂing instrucÂtion and data memÂoÂry sepÂaÂrate. Its mulÂti-cycle modÂel focusÂes on deterÂminÂisÂtic behavÂior, avoidÂing specÂuÂlaÂtive exeÂcuÂtion and ranÂdom stalls. It also offers capaÂbilÂiÂties that stand out among open-source RISCâV cores:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;VirÂtuÂalÂizaÂtion and safeÂty mechÂaÂnisms that detect malÂformed instrucÂtions and privÂiÂlege escaÂlaÂtions, and that enforce address-space integrity.&lt;/item&gt;
      &lt;item&gt;A hardÂware RISCâV debug modÂule for On-Chip DebugÂging (OCD).&lt;/item&gt;
      &lt;item&gt;SupÂport for atomÂic operÂaÂtions, which is critÂiÂcal for concurrency.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Unlike softÂware, hardÂware debugÂging is tied to physÂiÂcal sigÂnals, makÂing errors much hardÂer to trace and corÂrect. This realÂiÂty makes good design pracÂtices cruÂcial from the start. In pracÂtice, the Neorv32âs conÂserÂvÂaÂtive yet adaptÂable approach minÂiÂmizes edge casÂes and failÂure points.&lt;/p&gt;
    &lt;head rend="h1"&gt;ToolÂchain BreakÂdown: Going FulÂly Open-Source #&lt;/head&gt;
    &lt;head rend="h2"&gt;GateÂware, Firmware?&lt;/head&gt;
    &lt;p&gt;An FPGA is a reconÂfigÂurable chip where hardÂware logÂic cirÂcuits are defined proÂgramÂmatÂiÂcalÂly. Unlike fixed CPUs that exeÂcute instrucÂtions, an FPGA impleÂments such procesÂsor logÂic directÂly. This is why we call such assemÂbled code gateÂware. Instead of writÂing firmware for a preÂdeÂfined CPU, we first proÂgram the processorâs archiÂtecÂture in an HDL before deployÂing comÂpiled firmware instrucÂtions on it. In a nutÂshell, LUTs and Block RAM (BRAM) are the basic buildÂing blocks of an FPGA. As a genÂerÂal rule, the more of these resources you have, the more comÂplex your processor/âaccelerator logÂic can be.&lt;/p&gt;
    &lt;head rend="h2"&gt;Open-Source FPGA Toolchain&lt;/head&gt;
    &lt;p&gt;If you have some expeÂriÂence with FPGA develÂopÂment, you know proÂpriÂetary toolÂchains usuÂalÂly transÂform HDL code into a bitÂstream for proÂgramÂming the FPGA. Thanks to ongoÂing acaÂdÂeÂmÂic and open-source efforts, we can now rely on a fulÂly open ecosysÂtem. Here is how the open-source flow proÂduces a usable Neorv32 bitÂstream for the LatÂtice ECP5 on the ULX3S:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;GHDL, which is notably writÂten in Ada, parsÂes the VHDL and passÂes it to Yosys, an HDL synÂtheÂsis tool, through a plugin.&lt;/item&gt;
      &lt;item&gt;Yosys, with help from BerkeÂley-ABC, a sysÂtem for sequenÂtial synÂtheÂsis and verÂiÂfiÂcaÂtion, builds and optiÂmizes a netlist, a descripÂtion of the conÂnecÂtivÂiÂty of FPGA resources.&lt;/item&gt;
      &lt;item&gt;NextpÂnr takes that netlist for place-and-route, mapÂping it onto the ECP5âs physÂiÂcal layÂout using the Project TrelÂlis database.&lt;/item&gt;
      &lt;item&gt;ecpÂpack (part of TrelÂlis), then assemÂbles the final bitÂstream, ready to be uploaded to the FPGA&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;BringÂing Up Neorv32 on the ULX3S #&lt;/head&gt;
    &lt;head rend="h2"&gt;Board SetÂup and Configuration&lt;/head&gt;
    &lt;p&gt;To conÂfigÂure the Neorv32 softÂcore for my ULX3S board, I used neorv32-setups, a reposÂiÂtoÂry that proÂvides default board conÂfigÂuÂraÂtions and build setups for a basic SoC gateÂware and firmware. This was preÂciseÂly what I needÂed since it includes a UART, which is required for our Ada BIOS demo. A givÂen board setÂup conÂsists of a conÂstraint file that maps the boardâs physÂiÂcal interÂfaces to the FPGA pins, and a top-levÂel VHDL file that allows cusÂtomizaÂtion of the base SoC. In this file, you define the SoC you want by selectÂing periphÂerÂals and setÂting key paraÂmeÂters like the sysÂtem clock speed based on what the board physÂiÂcalÂly provides.&lt;/p&gt;
    &lt;head rend="h2"&gt;GenÂerÂatÂing and FlashÂing the Bitstream&lt;/head&gt;
    &lt;p&gt;FinalÂly, you have build makeÂfiles driÂving the open-source toolÂchain to genÂerÂate the SoC bitÂstream (.bit) and C firmware demos. With everyÂthing conÂfigÂured and built, I had a Neorv32 SoC bitÂstream file ready to be uploaded to the ULX3S. To give you an idea, this basic Neorv32 SoC uses 3,026 of the 85k LUTs (3% total) and 67 of the 208 DP16KD 16K block RAMs (32%), leavÂing plenÂty of room on my ECP5. To flash it, I used fujprog, anothÂer open-source project, which comÂpiled and transÂferred sucÂcessÂfulÂly on the first attempt.&lt;/p&gt;
    &lt;head rend="h1"&gt;GoodÂbye C, HelÂlo Ada #&lt;/head&gt;
    &lt;head rend="h2"&gt;Neorv32 BootÂloader Flow&lt;/head&gt;
    &lt;p&gt;Right away, I was able to test the default Neorv32 bootÂloader and upload some of the proÂvidÂed demos. DurÂing SoC synÂtheÂsis, the Neorv32 bootÂloader firmware is embedÂded into the FPGA bitÂstream. Once the FPGA is proÂgrammed and starts up, exeÂcuÂtion jumps directÂly to this bootÂloader, which presents a comÂmand menu for uploadÂing and runÂning othÂer firmware. The main Neorv32 reposÂiÂtoÂry proÂvides sevÂerÂal C demos designed to be exeÂcutÂed through this bootloader.&lt;/p&gt;
    &lt;p&gt;For these youâll need a RISCâV crossâcompiler (with libÂgloss) and a terÂmiÂnal proÂgram that can send raw binaÂry data withÂout headÂers. I used GTKÂTerm on LinÂux to ensure the firmware forÂmat matched what Neorv32âs bootÂloader expects. After startÂing with a ââhelÂlo worldâ C demo to learn the workÂflow, I moved on to write the Ada BIOS. Although setÂting up InterÂrupt SerÂvice RouÂtines (ISR) is a familÂiar conÂcept, doing it on RISCâV was new terÂriÂtoÂry for me.&lt;/p&gt;
    &lt;head rend="h2"&gt;C to Ada, Step-by-Step&lt;/head&gt;
    &lt;p&gt;The key was to creÂate a minÂiÂmal demo that exerÂcised UART RX interÂrupts for incomÂing conÂsole data, along with the necÂesÂsary ConÂtrol and StaÂtus RegÂisÂter (CSR) setÂup. TypÂiÂcal demos skip UART receive, so I pieced togethÂer a simÂple C examÂple to focus on hanÂdling UART0 RX interrupts.&lt;/p&gt;
    &lt;p&gt;When an interÂrupt occurs, the CPU stops what itâs doing and hands exeÂcuÂtion to the regÂisÂtered callÂback. Once finÂished, the CPU must restore its preÂviÂous state. In pracÂtice, that means a) savÂing the curÂrent regÂisÂters, b) runÂning the interÂrupt hanÂdler withÂin &lt;code&gt;isr()&lt;/code&gt;, and c) restorÂing the regÂisÂters before pickÂing up where it left off.&lt;/p&gt;
    &lt;p&gt;The refÂerÂence code tackÂled these steps in a sinÂgle naked C funcÂtion, mixÂing inline assemÂbly for saving/ârestoring regÂisÂters with the ISR logÂic. SplitÂting this into sepÂaÂrate C or Ada funcÂtions caused crashÂes. To fix that, I moved the assemÂbly preÂlude and postlude into &lt;code&gt;trap_entry.S&lt;/code&gt; and exposed a &lt;code&gt;trap_entry()&lt;/code&gt; and &lt;code&gt;isr()&lt;/code&gt; symÂbol to the linker.&lt;/p&gt;
    &lt;code&gt;.global trap_entry
.global isr

trap_entry:
...
   sw x31, 31*4(sp)  # Save x31 register
   call isr
...
   lw x31, 31*4(sp)  # Restore x31 register
...
   mret&lt;/code&gt;
    &lt;p&gt;IniÂtialÂly I kept the &lt;code&gt;isr()&lt;/code&gt; impleÂmenÂtaÂtion logÂic in C to ensure getÂting back to a workÂing state. Once done, I transÂlatÂed the &lt;code&gt;isr()&lt;/code&gt; logÂic to Ada step by step, ensurÂing each operÂaÂtion matched the original.&lt;/p&gt;
    &lt;code&gt;procedure Isr 
  with Export, Convention =&amp;gt; C, External_Name =&amp;gt; "isr";

procedure Isr is
begin
  Call_Handler;
  if Is_Exception then
    Compute_Return_Address;
  end if;
end Isr;

procedure Trap_Entry 
  with Import, Convention =&amp;gt; C, External_Name =&amp;gt; "trap_entry";&lt;/code&gt;
    &lt;head rend="h1"&gt;Neorv32 HardÂware AbstracÂtion LayÂer #&lt;/head&gt;
    &lt;head rend="h2"&gt;SetÂting Up a MinÂiÂmal Ada Runtime&lt;/head&gt;
    &lt;p&gt;Alire, the Ada packÂage manÂagÂer, already includes packÂages to help creÂate a basic RISCâV HardÂware AbstracÂtion LayÂer (HAL). bare_âruntime, a minÂiÂmal Ada runÂtime for embedÂded or restrictÂed tarÂgets, is a perÂfect fit. A needÂed GNAT RISCâV cross-comÂpilÂer is also availÂable. To make this work, two steps are required:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Add and conÂfigÂure depenÂdenÂcies in the packÂage manÂagÂer manÂiÂfest file of the &lt;code&gt;neorv32_hal&lt;/code&gt;library. The relÂeÂvant secÂtion of the&lt;code&gt;alire.toml&lt;/code&gt;file looks like this:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;[[depends-on]]
gnat_riscv64_elf = "*"
bare_runtime = "*"

[gpr-set-externals]
BARE_RUNTIME_SWITCHES = "-march=rv32i_zicsr_zifencei -mabi=ilp32"&lt;/code&gt;
    &lt;p&gt;This estabÂlishÂes depenÂdenÂcies on the GNAT RISCâV cross-comÂpilÂer and the bare-metÂal runÂtime. It also passÂes speÂcifÂic build switchÂes to gprbuild, the GNAT build sysÂtem, ensurÂing comÂpatÂiÂbilÂiÂty with the tarÂgetÂed RISCâV variant.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;CusÂtomize the build file, &lt;code&gt;neorv32_hal.gpr&lt;/code&gt;, accordÂingÂly:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;with "bare_runtime.gpr";
project Neorv32_Hal is
   for Languages use ("Ada", "ASM_CPP");
   for Target use "riscv64-elf";
   for Runtime ("Ada") use Bare_Runtime'Runtime ("Ada");
   for Library_Name use "Neorv32_Hal";
...
end Neorv32_Hal;&lt;/code&gt;
    &lt;p&gt;Here, we refÂerÂence the bare_âruntime project file, ensure supÂport for both Ada and AssemÂbly code, specÂiÂfy RISCâV as the tarÂget archiÂtecÂture, set bare_âruntime as the runÂtime, and define the curÂrent project as a library.&lt;/p&gt;
    &lt;head rend="h2"&gt;CreÂatÂing a CusÂtom LinkÂer Script and StartÂup Code&lt;/head&gt;
    &lt;p&gt;The next step is to creÂate the linkÂer script (&lt;code&gt;link.ld&lt;/code&gt;) and startÂup assemÂbly (&lt;code&gt;crt0.S&lt;/code&gt;). This is easÂiÂly done using the startup_âgen Alire packÂage. By proÂvidÂing key details about our tarÂget, such as memÂoÂry sizes, memÂoÂry start addressÂes and CPU archiÂtecÂture, startup_âgen genÂerÂates basic funcÂtionÂal files:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;crt0.S&lt;/code&gt;hanÂdles iniÂtialÂizaÂtion: loadÂing the data secÂtion, clearÂing BSS, and setÂting up global/âstatic objects.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;link.ld&lt;/code&gt;maps firmware secÂtions accordÂing to the Neorv32 memÂoÂry layÂout: placÂing instrucÂtions in ROM and data in RAM.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For a deepÂer dive into starÂtupÂgen, check out the relatÂed blog post.&lt;/p&gt;
    &lt;head rend="h2"&gt;ImpleÂmentÂing InterÂrupt HanÂdling in Ada&lt;/head&gt;
    &lt;p&gt;As menÂtioned, savÂing and restorÂing regÂisÂters durÂing an interÂrupt now hapÂpens in assemÂbly: &lt;code&gt;trap_entry&lt;/code&gt;. What remains is the midÂdle part: the &lt;code&gt;isr()&lt;/code&gt; that ends up callÂing the hanÂdler regÂisÂtered for the speÂcifÂic interÂrupt. First we need to update the Machine Trap VecÂtor RegÂisÂter (Mtvec) to point to our &lt;code&gt;trap_entry&lt;/code&gt;. This hapÂpens in the interÂrupt iniÂtialÂizaÂtion code.&lt;/p&gt;
    &lt;code&gt;procedure Init is
begin
  RISCV.CSR.Mstatus.Set_Bits (2#11000_00000000#);  --  after MRET stays M-mode
  RISCV.CSR.Mtvec.Write (UInt32 (To_Integer (Trap_Entry'Address)));
  RISCV.CSR.Mie.Write (0);  --  disables all interrupts
  Asm ("fence");
end Init;&lt;/code&gt;
    &lt;p&gt;Next we need to creÂate our &lt;code&gt;Handlers&lt;/code&gt; table; one entry per speÂcifÂic interÂrupt. Note that Neorv32 can be built as a dual-core, so the &lt;code&gt;Hart_ID_T&lt;/code&gt; type range from 0 to 1.&lt;/p&gt;
    &lt;code&gt;subtype Hart_Id_T is Natural range 0 .. 1;
type Trap_Code_T is (
...
  Fast_Interrupt_2, -- Uart0 RX
...
);

for Trap_Code_T use (
...
  Fast_Interrupt_2 =&amp;gt; 16#80000012#, -â Uart0 RX
...
  );

type Interrupt_Handler is access procedure (Hart : Hart_Id_T; Trap_Code : Trap_Code_T);
...
type Handlers_T is array (Hart_Id_T, Trap_Code_T) of Interrupt_Handler;
Handlers : Handlers_T := (others =&amp;gt; (others =&amp;gt; Default_Handler'Access));&lt;/code&gt;
    &lt;p&gt;We install a speÂcifÂic interÂrupt callÂback by indexÂing it in the &lt;code&gt;Handlers&lt;/code&gt; table:&lt;/p&gt;
    &lt;code&gt;procedure Install_Uart0_Rx_Interrupt_Handler (Hart : Harts_T; Handler : Interrupt_Handler) is
begin
  Handlers (Hart, Fast_Interrupt_2) := Handler;
end Install_Uart0_Rx_Interrupt_Handler;&lt;/code&gt;
    &lt;p&gt;CallÂing a hanÂdler involves checkÂing the interruptâs cause. Our callÂback sigÂnaÂture receives the &lt;code&gt;Hart_Id&lt;/code&gt; and the &lt;code&gt;Trap_Code&lt;/code&gt; enum value.&lt;/p&gt;
    &lt;code&gt;procedure Call_Handler is
  Hart_Id : Hart_Id_T := Hart_Id_T (RISCV.CSR.MHARTID.Read);
  Trap_Code : Trap_Code_T := Trap_Code_T'Enum_Val (RISCV.CSR.MCAUSE.Read);
begin
  Handlers (Hart_Id, Trap_Code).all (Hart_Id, Trap_Code);
end Call_Handler;&lt;/code&gt;
    &lt;head rend="h1"&gt;SVD and Ada #&lt;/head&gt;
    &lt;head rend="h2"&gt;MemÂoÂry-Mapped Peripherals&lt;/head&gt;
    &lt;p&gt;At this point, we need a way to talk to periphÂerÂals like UART0, which are memÂoÂry-mapped at speÂcifÂic addressÂes. At a givÂen base address, thereâs a range of bits for conÂtrol and data, and your Ada code interÂacts with these regÂisÂters to manÂage the peripheral.&lt;/p&gt;
    &lt;p&gt;In the embedÂded world, this mapÂping is often docÂuÂmentÂed in an XML-based forÂmat called CMSIS-SVD, which defines each peripheralâs base address and regÂisÂter layÂout. Neorv32 folÂlows this conÂvenÂtion and proÂvides a sinÂgle SVD file (.svd) covÂerÂing every potenÂtial periphÂerÂal for a givÂen SoC configuration.&lt;/p&gt;
    &lt;head rend="h2"&gt;Auto-GenÂerÂate Ada Code for Registers&lt;/head&gt;
    &lt;p&gt;By using the Svd2ada Alire packÂage, you can feed in the SVD file and autoÂmatÂiÂcalÂly genÂerÂate Ada code that reflects the strucÂture of each memÂoÂry mapped periphÂerÂal. For examÂple, conÂsidÂer this snipÂpet from the &lt;code&gt;neorv32.svd&lt;/code&gt; file for the UART0 peripheral:&lt;/p&gt;
    &lt;code&gt;&amp;lt;peripheral&amp;gt;
  &amp;lt;name&amp;gt;UART0&amp;lt;/name&amp;gt;
  &amp;lt;description&amp;gt;Primary universal asynchronous receiver and transmitter&amp;lt;/description&amp;gt;
  &amp;lt;baseAddress&amp;gt;0xFFF50000&amp;lt;/baseAddress&amp;gt;

  &amp;lt;addressBlock&amp;gt;
    &amp;lt;offset&amp;gt;0&amp;lt;/offset&amp;gt;
    &amp;lt;size&amp;gt;0x08&amp;lt;/size&amp;gt;
    &amp;lt;usage&amp;gt;registers&amp;lt;/usage&amp;gt;
  &amp;lt;/addressBlock&amp;gt;

  &amp;lt;registers&amp;gt;
    &amp;lt;register&amp;gt;
      &amp;lt;name&amp;gt;CTRL&amp;lt;/name&amp;gt;
      &amp;lt;description&amp;gt;Control register&amp;lt;/description&amp;gt;
      &amp;lt;addressOffset&amp;gt;0x00&amp;lt;/addressOffset&amp;gt;
      &amp;lt;fields&amp;gt;
        &amp;lt;field&amp;gt;
          &amp;lt;name&amp;gt;UART_CTRL_EN&amp;lt;/name&amp;gt;
          &amp;lt;bitRange&amp;gt;[0:0]&amp;lt;/bitRange&amp;gt;
          &amp;lt;description&amp;gt;UART enable flag&amp;lt;/description&amp;gt;
        &amp;lt;/field&amp;gt;
        ...
      &amp;lt;/fields&amp;gt;
    &amp;lt;/register&amp;gt;
    ...
  &amp;lt;/registers&amp;gt;
&amp;lt;/peripheral&amp;gt;&lt;/code&gt;
    &lt;p&gt;From this, we see:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;A base address of 0xFFF50000.&lt;/item&gt;
      &lt;item&gt;An address block spanÂning 8 bytes.&lt;/item&gt;
      &lt;item&gt;A conÂtrol regÂisÂter, &lt;code&gt;CRTL&lt;/code&gt;, with a 1âbit field,&lt;code&gt;UART_CTRL_EN&lt;/code&gt;, to enable or disÂable the peripheral.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;After runÂning it through Svd2ada, youâll get this neat genÂerÂatÂed Ada code you can use directly:&lt;/p&gt;
    &lt;code&gt;--  Generated from neorv32.svd

UART0_Base : constant System.Address := System'To_Address (16#FFF50000#);

type Bit is mod 2**1 with Size =&amp;gt; 1;
subtype CTRL_UART_CTRL_EN_Field is Bit;

type CTRL_Register is record
   UART_CTRL_EN : CTRL_UART_CTRL_EN_Field := 16#0#;
...
   UART_CTRL_TX_FULL : CTRL_UART_CTRL_TX_FULL_Field := 16#0#;
...
end record
   with Volatile_Full_Access, Object_Size =&amp;gt; 32,
        Bit_Order =&amp;gt; System.Low_Order_First;

type UART0_Peripheral is record
   CTRL : aliased CTRL_Register;
   DATA : aliased neorv32.UInt32;
end record
  with Volatile;

for UART0_Peripheral use record
   CTRL at 16#0# range 0 .. 31;
   DATA at 16#4# range 0 .. 31;
end record;

UART0_Periph : aliased UART0_Peripheral with Import, Address =&amp;gt; UART0_Base;&lt;/code&gt;
    &lt;head rend="h2"&gt;MinÂiÂmal UART Driver&lt;/head&gt;
    &lt;p&gt;&lt;code&gt;UART0_Periph&lt;/code&gt; is the periphÂerÂal instance to use. The folÂlowÂing code uses it to read a charÂacÂter over the UART0:&lt;/p&gt;
    &lt;code&gt;function Read_RX return Character is
  UART_RX : Character with Volatile, Address =&amp;gt; UART0_Periph.Data'Address;
begin
  return UART_RX;
end Read_RX;
pragma Inline (Read_RX);&lt;/code&gt;
    &lt;head rend="h2"&gt;ImpleÂmentÂing Ada.Text_IO&lt;/head&gt;
    &lt;p&gt;Now, to enrich our bare runÂtime and enable &lt;code&gt;Ada.Text_IO&lt;/code&gt; rouÂtines, all we need is to supÂply our own &lt;code&gt;putchar&lt;/code&gt; funcÂtion that hanÂdles a sinÂgle charÂacÂterâââhere text IO goes through UART. The bare_âruntime includes a weak &lt;code&gt;putchar&lt;/code&gt;, so once we proÂvide our cusÂtom impleÂmenÂtaÂtion, the rest of the logÂic is hanÂdled automatically.&lt;/p&gt;
    &lt;code&gt;procedure Put_Char (C : Interfaces.C.char) with
    Export, Convention =&amp;gt; C, External_Name =&amp;gt; "putchar";

procedure Put_Char (C : Interfaces.C.char) is
begin
  while UART0_Periph.CTRL.UART_CTRL_TX_FULL = 1 loop
    null;
  end loop;
  Write_TX (Interfaces.C.To_Ada (C));
end Put_Char;&lt;/code&gt;
    &lt;head rend="h1"&gt;The neorv32_âhal + demos packÂage #&lt;/head&gt;
    &lt;head rend="h2"&gt;Alire PackÂage Structure&lt;/head&gt;
    &lt;p&gt;Now weâre ready to creÂate the &lt;code&gt;bios&lt;/code&gt; demo and packÂage it withÂin the &lt;code&gt;neorv32_hal&lt;/code&gt; in the Alire registry:&lt;/p&gt;
    &lt;code&gt;neorv32_hal
 â alire.toml        (the manifest pushed to the Alire upstream index)
 â src               (contains HAL code)
 â demos
       â alire.toml  (pin a backward dependency on neorv32_hal)
       â src         (contains BIOS demo code)&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;alire.toml&lt;/code&gt; inside &lt;code&gt;demos&lt;/code&gt; looks like this:&lt;/p&gt;
    &lt;code&gt;name = "demos"
executables = ["bios"]

[[depends-on]]
neorv32_hal = "*"

[[pins]]
neorv32_hal = { path = ".." }&lt;/code&gt;
    &lt;p&gt;FinalÂly, our BIOS code doesnât rely on polling. Itâs event-driÂven through RX interÂrupts. All reactÂing code and state hanÂdling hapÂpens in &lt;code&gt;Parse_Cmd&lt;/code&gt; and the priÂvate impleÂmenÂtaÂtion of the &lt;code&gt;Bios_Core&lt;/code&gt; package.&lt;/p&gt;
    &lt;code&gt;with Bios_Core;
with Interrupts;
with Uart0;

procedure Bios is
begin
   Interrupts.Init;
   Interrupts.Install_Uart0_Rx_Interrupt_Handler (0, Bios_Core.Parse_Cmd'Access);
   Uart0.Init (19200);
   Interrupts.Global_Machine_Interrupt_Enable;
   Bios_Core.Show_Welcome;
   loop
      null;
   end loop;
end Bios;&lt;/code&gt;
    &lt;head rend="h1"&gt;Try It YourÂself #&lt;/head&gt;
    &lt;p&gt;I hope you found all this interÂestÂing. I skipped instalÂlaÂtion, build instrucÂtions for third-parÂty tools, and plumbÂing details, but youâll find everyÂthing you need in the reposÂiÂtoÂryââs README. If you have any quesÂtions or run into issues, donât hesÂiÂtate to reach out.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45782348</guid><pubDate>Sat, 01 Nov 2025 15:21:00 +0000</pubDate></item><item><title>Data centers contribute to high prices as energy bills electrify local politics</title><link>https://www.wsj.com/economy/consumers/surging-power-costs-are-putting-the-squeeze-on-customers-f8b2c04b</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45782865</guid><pubDate>Sat, 01 Nov 2025 16:16:53 +0000</pubDate></item><item><title>GHC now runs in the browser</title><link>https://discourse.haskell.org/t/ghc-now-runs-in-your-browser/13169</link><description>&lt;doc fingerprint="4f3a90dfd9163b44"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;ghc itself can now run purely client-side in the browser, here’s a haskell playground demo. terms and conditions apply, and i’ll write up more detailed explanation some time later, but i thought this is a cool thing to show off how far the ghc wasm backend has advanced &lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 73 Likes &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;jaror
2&lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;This is very cool! I wonder how easy it would be to load some packages; cabal in the browser when? I’m also wondering how usable Agda in the browser would be.&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 3 Likes &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;jaror
3&lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;I think I found a bug: ghc options persist even after I change them. Edit: this has been fixed!&lt;/p&gt;
        &lt;p&gt;Also &lt;code&gt;-with-rtsopts=-s&lt;/code&gt; does not work, sadly. Edit: Ah, that’s because it is interpreted.&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 3 Likes &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;ad-si
4&lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;This is awesome!&lt;lb/&gt; Perfect for building a fully interactive Haskell online course! &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;Excellent work - the efforts to bring Haskell to WASM are a huge boon to our ecosystem and userbase!&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;Can’t run it on my tablet (wasm), curious: is this running the type checker or also code gen to wasm?&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 1 Like &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;jaror
8&lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt;It runs the code, but it seems like it uses the bytecode interpreter.&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 1 Like &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;What modifications were to GHC for it to be compiled to WASM?&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 1 Like &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;cabal won’t work in the browser due to lack of process support; but it’s possible to use &lt;code&gt;wasm32-wasi-cabal&lt;/code&gt; to precompile some third party packages to wasm and make this playground support them as well.&lt;/p&gt;
        &lt;p&gt;you might be interested to check GitHub - agda-web/agda-wasm-dist: Distributions of Agda executable compiled into WebAssembly.; afaik they even compiled GitHub - agda/agda-language-server: Language Server for Agda to wasm, not sure how usable it is currently&lt;/p&gt;
        &lt;p&gt;thanks for the report! i pushed an update which should have fixed it.&lt;/p&gt;
        &lt;p&gt;that’s right; ghc in browser can’t invoke the c compiler and it can only interpret haskell modules via bytecode.&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 1 Like &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;thanks for the reports! a few seconds of freeze during start-time is expected, since it needs to download ~50M of a rootfs tarball and extract it, then link the ghc library and all its dependencies. as for safari, it’s strange since i i just landed a workaround for a webkit bug that breaks the wasm dynamic linker a few days ago, i’ll take a closer look later.&lt;/p&gt;
        &lt;p&gt;the ghc library already mostly works when compiled to wasm, and it can parse/typecheck/desugar stuff. the bottleneck is the linker/loader part, for it to be useful it needs to be able to dynamically load and execute haskell code. i landed a couple of ghc patches recently to push towards that direction, and the last one that gets us towards the haskell playground (not landed yet) is Draft: Support running GHC fully client-side in the browser (!15000) · Merge requests · Glasgow Haskell Compiler / GHC · GitLab&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 8 Likes &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;Which packages are installed by default?&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 2 Likes &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;now chrome will consume even more memory &lt;/p&gt;
        &lt;p&gt;Awesome work!&lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; 2 Likes &lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;p&gt;the &lt;code&gt;ghc&lt;/code&gt; library and its transitive dependencies.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45782981</guid><pubDate>Sat, 01 Nov 2025 16:29:23 +0000</pubDate></item><item><title>Chat Control proposal fails again after public opposition</title><link>https://andreafortuna.org/2025/11/01/chat-control-proposal-fails-again-after-massive-public-opposition/</link><description>&lt;doc fingerprint="b70c19598a0da651"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Chat control proposal fails again after massive public opposition&lt;/head&gt;
    &lt;p&gt;The European Union Council has once again retreated from its controversial Chat Control proposal, a plan that would have required widespread scanning of encrypted messages. The withdrawal by the current Danish presidency represents yet another chapter in a long-running battle between privacy advocates and lawmakers who believe they can compromise encryption in the name of public safety. While this latest defeat is a victory for digital rights, the fight is far from over, and the fundamental misunderstanding of encryption technology continues to plague policy discussions across Europe.&lt;/p&gt;
    &lt;head rend="h2"&gt;A zombie proposal that refuses to die&lt;/head&gt;
    &lt;p&gt;Since its introduction in 2022, Chat Control has become what privacy advocates call a zombie proposal, repeatedly resurrected despite consistent opposition from civil society, technical experts, and the public. The Electronic Frontier Foundation and more than 80 civil society organizations have strongly opposed the legislation, which would mandate client-side scanning of encrypted communications under the guise of combating child sexual abuse material.&lt;/p&gt;
    &lt;p&gt;The pattern has become predictable. EU lawmakers introduce the proposal, claiming it includes safeguards for privacy. Technical experts explain why those safeguards are illusory. Public pressure mounts. The proposal is withdrawn or modified. Then, after a brief hiatus, it returns with minor tweaks, and the cycle begins anew. This latest withdrawal by the Danish presidency follows the same script, but the underlying issues remain unresolved.&lt;/p&gt;
    &lt;p&gt;What makes this particularly frustrating is that the fundamental problem with Chat Control has never been addressed. The proposal seeks to create what privacy experts call a “backdoor” into encryption, allowing authorities to scan messages before they’re encrypted or after they’re decrypted. Proponents argue this preserves encryption while enabling content moderation, but this reveals a dangerous misunderstanding of how encryption actually works. Creating any mechanism to access encrypted content inherently weakens the entire system, making it vulnerable not just to authorized access but to malicious actors as well.&lt;/p&gt;
    &lt;head rend="h2"&gt;The technical impossibility of “safe” scanning&lt;/head&gt;
    &lt;p&gt;The core issue with Chat Control and similar proposals lies in a fundamental misunderstanding of encryption technology. End-to-end encryption works because only the sender and recipient possess the keys to decrypt messages. Any third party, whether a government agency or a tech company, cannot read the contents. This is not a design choice but a mathematical certainty that ensures the security of billions of communications daily.&lt;/p&gt;
    &lt;p&gt;Client-side scanning, the technical approach favored by Chat Control advocates, attempts to circumvent this limitation by analyzing messages on users’ devices before encryption or after decryption. While this might sound like a clever workaround, it fundamentally breaks the security model of encryption. If a device can scan and report on message content, so can malware, hackers, or authoritarian governments who might compel tech companies to expand the scope of scanning.&lt;/p&gt;
    &lt;p&gt;Security researchers have repeatedly demonstrated that there is no way to create a scanning system that only works for “good guys.” Apple learned this lesson the hard way in 2021 when it proposed a similar system for detecting child abuse imagery in iCloud photos. The backlash from security experts was swift and devastating, forcing the company to abandon the plan. The same security vulnerabilities that would enable Chat Control would inevitably be exploited by malicious actors, putting everyone at greater risk.&lt;/p&gt;
    &lt;p&gt;Moreover, the scope creep inherent in surveillance technologies is well documented. A system initially designed to detect illegal content could easily be expanded to monitor political dissent, religious expression, or any other communication governments deem problematic. Countries around the world are watching the EU’s actions closely. If Chat Control were to pass, it would set a dangerous precedent that authoritarian regimes would eagerly exploit, claiming they’re simply following Europe’s lead in implementing “reasonable” content moderation.&lt;/p&gt;
    &lt;head rend="h2"&gt;Public pressure and the power of resistance&lt;/head&gt;
    &lt;p&gt;The withdrawal of Chat Control demonstrates the critical importance of sustained public engagement in technology policy. Unlike previous instances where technical proposals sailed through legislative processes with little public awareness, this fight has been characterized by unprecedented mobilization from civil society organizations, technology companies, security researchers, and ordinary citizens concerned about their digital rights.&lt;/p&gt;
    &lt;p&gt;Organizations like the Electronic Frontier Foundation, European Digital Rights, and numerous national privacy advocacy groups have played a crucial role in educating the public about the risks of Chat Control. Their efforts have included detailed technical explanations, legal analysis, and coordination of opposition campaigns that have reached millions of Europeans. This groundswell of opposition has made it politically toxic for lawmakers to support the proposal, at least in its current form.&lt;/p&gt;
    &lt;p&gt;The effectiveness of this resistance offers important lessons for future policy battles. First, technical expertise matters. When security researchers speak with a unified voice about the impossibility of safe backdoors, it becomes harder for politicians to dismiss concerns as alarmist. Second, coalition-building across different sectors strengthens opposition. When civil liberties groups, tech companies, and individual users all oppose a policy, it suggests the problems are real and widespread. Third, sustained pressure is essential because, as Chat Control demonstrates, bad proposals rarely die on the first attempt.&lt;/p&gt;
    &lt;p&gt;However, this victory should be tempered with realism. The forces pushing for Chat Control have not given up, and the underlying political dynamics that gave rise to the proposal remain unchanged. Politicians face genuine pressure to be seen as “doing something” about online harms, particularly regarding child safety. Until alternative approaches that don’t compromise encryption gain political traction, proposals like Chat Control will continue to resurface.&lt;/p&gt;
    &lt;head rend="h2"&gt;The path forward requires education and alternatives&lt;/head&gt;
    &lt;p&gt;The repeated resurrection of Chat Control points to a deeper problem in how technology policy is made. Many lawmakers genuinely believe they can have both strong encryption and government access to encrypted content. This belief persists despite unanimous opposition from the cryptographic community because the political incentives favor appearing tough on crime over understanding complex technical realities.&lt;/p&gt;
    &lt;p&gt;Breaking this cycle requires a fundamental shift in how we approach online safety. Rather than seeking technological magic bullets that promise security without trade-offs, policymakers need to invest in solutions that actually work. This includes better funding for law enforcement training and tools that don’t require breaking encryption, improved international cooperation on criminal investigations, and addressing the root causes of online exploitation through social programs and education.&lt;/p&gt;
    &lt;p&gt;Technology companies also bear responsibility for developing and promoting genuinely privacy-preserving safety features. End-to-end encrypted platforms can implement abuse prevention measures that don’t involve content scanning, such as metadata analysis, user reporting systems, and account-level restrictions for suspicious behavior. While these approaches may be less comprehensive than mass surveillance, they achieve meaningful safety improvements without the catastrophic privacy trade-offs of backdoors.&lt;/p&gt;
    &lt;p&gt;Looking ahead, the privacy community cannot simply celebrate the withdrawal of Chat Control and move on. The next presidency of the EU Council will bring new opportunities for the proposal to resurface in yet another modified form. Sustained vigilance, continued public education, and proactive development of alternative safety measures will be essential. The fight to protect encryption is not a single battle but an ongoing campaign that requires long-term commitment from everyone who values digital privacy and security.&lt;/p&gt;
    &lt;p&gt;The withdrawal of Chat Control is a victory, but it’s a temporary one. The fundamental challenge remains: convincing policymakers that some trade-offs are not worth making, and that breaking encryption to combat illegal content creates far more problems than it solves. Until that message truly sinks in, the zombie proposal will keep rising from the grave, and the privacy community must remain ready to defeat it again and again.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45783114</guid><pubDate>Sat, 01 Nov 2025 16:42:57 +0000</pubDate></item><item><title>Studies increasingly find links between air pollutants and dementia</title><link>https://www.nytimes.com/2025/11/01/health/alzheimers-dementia-air-pollution.html</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45783206</guid><pubDate>Sat, 01 Nov 2025 16:54:45 +0000</pubDate></item><item><title>Ask HN: Where to Begin with "Modern" Emacs?</title><link>https://news.ycombinator.com/item?id=45783376</link><description>&lt;doc fingerprint="96f57412fcf5af17"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Hi all,&lt;/p&gt;
      &lt;p&gt;I’m a longtime Neovim user who’s been EMacs-curious. The hold up for me has been that I’ve been unable to find a source of truth for what’s top-of-the-line as far as plugins are. With Neovim, it’s a safe bet to look at what folks like Folke are doing, but I have struggled to find a similar figure in the Emacs community who gives insight into what’s-what. I know Doom exists, but I want to fully “own” my config and not over complicate it.&lt;/p&gt;
      &lt;p&gt;Thanks!&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45783376</guid><pubDate>Sat, 01 Nov 2025 17:13:04 +0000</pubDate></item><item><title>How I Learned to Stop Worrying and Love My Shitty Life</title><link>https://www.thedriftmag.com/how-i-learned-to-stop-worrying-and-love-my-shitty-life/</link><description>&lt;doc fingerprint="2ea193558c771601"&gt;
  &lt;main&gt;
    &lt;p&gt;Donald Trump’s endeavors in business and politics frequently overshadow his contributions as a philosopher of the futility of human achievement. “We’re here and we live our sixty, seventy, or eighty years and we’re gone,” he reflected to Playboy in a 1990 interview. “You win, you win, and in the end, it doesn’t mean a hell of a lot.” Subsequent winning does not seem to have shaken this conviction. “Nothing matters,” he informed Larry King in 2004. “You do shows, you do this, you do that, and then you have earthquakes in India where 400,000 people get killed. Honestly, it doesn’t matter.” Apparently catching a brief glimpse of the abyss during the 2020 campaign cycle, Trump expressed his wish to “hop into” one of his supporters’ trucks “and drive it away.” As he mused, “I’d love to do it. Just drive the hell outta here. Just get the hell out of this.”&lt;/p&gt;
    &lt;p&gt;Who among us has not daydreamed, now and again, about leaving it all behind? The anesthetizing pleasures of disengagement seem especially seductive these days — thanks, in no small part, to Trump himself. In the decade since his reinvention as a political juggernaut, the idea that nothing matters has gained significant purchase, often in response to the endless chaos of which he is both cause and symptom. As a wide range of social scientists, pollsters, and trendspotters have observed, a sense of fatalism has increasingly suffused the attitudes of many millennials and zoomers. (“Get in, loser,” Cosmopolitan invited readers in 2024. “We’re heading into the void!”) The most straightforward way to cope with hopelessness is to tell yourself that hope was a mistake in the first place. In his 2019 book Everything Is Fucked, the sequel to his 2016 bestseller The Subtle Art of Not Giving a Fuck, the self-help guru Mark Manson puts the point with characteristic economy of expression: “Hope Is Fucked.”&lt;/p&gt;
    &lt;p&gt;Manson’s rise to airport bookstore superstardom, however, suggests that most people do not find the process of unburdening oneself of one’s fucks to come as naturally as it does for Trump. Many, in fact, find the task rather daunting. At first you may feel better about whatever’s crushing your spirits if you accept, as Manson urges, that “pain is the universal constant,” and that you will never get what you truly want out of life. It doesn’t really matter if things just keep sucking forever; it is only in hoping for something better that you set yourself up for disappointment and frustration. There, isn’t that a load off? Then you’ll be in the shower or trying to fall asleep and you’ll remember everything you’re giving up on, all the pain you’ll never escape, and your chest will tighten and your breath will quicken and you’ll thumb back through your copy of Mark Manson to remind yourself just how all of this is supposed to work.&lt;/p&gt;
    &lt;p&gt;If Manson’s tomes are too vulgar (in either sense) for your taste, fear not. An apparently inexhaustible supply of alternatives now fills the shelves — books that similarly promise to help you make your peace with the reality that disappointment, frustration, and agony are inexorable parts of life. “Although pain is inevitable, suffering is optional,” Joseph Nguyen tells readers in his best-selling Don’t Believe Everything You Think (2022). Professor and fitness influencer Michael Easter’s The Comfort Crisis (2021) explains that our lives are actually too easy, and we should be grateful for those challenges we haven’t yet managed to eliminate. Some of these books share with Manson’s not only a general outlook on life but also a sense of which words are funny. Sarah Knight’s Calm the Fuck Down (2018) explains, per its subtitle, “How to Control What You Can and Accept What You Can’t So You Can Stop Freaking Out and Get On With Your Life,” while Michael and Sarah Bennett’s Fuck Feelings (2015) promises, according to its promotional copy, to show readers how to “put aside your unrealistic wishes, stop trying to change things you can’t change, and do the best with what you can control.”&lt;/p&gt;
    &lt;p&gt;Readers who prefer their self-help to come with a sheen of erudition can increasingly count on finding similar wisdom about human finitude dispensed in the philosophy section. Turning to philosophy to learn how to live is nothing new, of course. But the explicitly inspirational and instructional valence of much that appears today under that heading, even from academic presses, is striking — as is the apparent consensus that the central task of philosophy is to guide seekers to a greater acceptance of imperfection and insignificance. Sometimes these books focus on a particular school of philosophy, giving readers an “-ism” — existentialism, Buddhism, Taoism, and above all Stoicism, now practically a genre unto itself — with which to identify. Others staple together eclectic smatterings of received ideas into less partisan surveys on how to cope with failure and disillusionment.&lt;/p&gt;
    &lt;p&gt;The self-help industry has in turn embraced this conception of “philosophy,” to the point where it’s no longer always clear whether to categorize a given book of advice as philosophy or self-help in the first place. In his author bio, Nguyen entices readers with the boast that he draws “inspiration from philosophy,” among other sources. In The Let Them Theory, the top-performing self-help book on Amazon as of this writing, the former attorney and current podcaster Mel Robbins explains that her program — a set of tools to free readers from the belief that “we can protect ourselves from pain, disappointment, rejection” — is “rooted in ancient philosophies and psychological concepts that have guided people for centuries,” including Stoicism and Buddhism. Oliver Burkeman, author of the newsletter “The Imperfectionist” and several books including the recent Meditations for Mortals (2024), similarly avers that “centuries of philosophical reflection” underpin his advice to renounce the quest for “dominance over a reality that can otherwise seem so unmanageable and overwhelming.” To be philosophical, apparently, is to accept our lot.&lt;/p&gt;
    &lt;p&gt;I get the appeal. Like most Americans, I’ve known the frustration and resentment that follow catechesis in the religion of self-fulfillment. I understand what it’s like to be told to look within yourself to find your destiny, your calling, your deepest desire, and to be assured that hard work and the right attitude can make it real: the excessive self-reverence, and then the inevitable self-recrimination. That there is now such a demand for books about the inevitability of failure and the wisdom of not giving a fuck suggests that many of us today suspect that our selfhood is a flimsy foundation on which to build a life, inadequate to the insuperable obstacles that prevent us from imposing our designs on the reality we inhabit. We’ve been tricked, or have tricked ourselves, into overestimating our own agency — and we hope a firm Stoic hand can smack us back into perspective. The “philosophy” packaged and sold to the reading public offers only a superficial correction, however. To imagine yourself as a modern-day Seneca, a sage liberated from the cares afflicting more ordinary souls, is its own form of self-indulgence. Renouncing the need to matter does not always draw you out of your own ego, but can leave you even further lost inside of it. Just ask the president.&lt;/p&gt;
    &lt;p&gt;Self-help philosophy often brands itself as an “antidote” — to quote the title of one of Burkeman’s early books — to the unrealistic expectations and toxic positivity that more mainstream self-help currents have inflicted on modern culture. The self-help philosophers are correct that the genre they’re invading has long been dominated by a rather outlandish sense of what one can accomplish through the exercise of individual freedom. In her classic 2009 work of cultural criticism Bright-sided, Barbara Ehrenreich argued that positive thinking, the idea that you should always expect the best and believe in your ability to achieve your dreams, had served since the nineteenth century as the official American ideology. There is plenty of evidence for this judgment on today’s best-seller lists. “The secret to getting results that last is to never stop making improvements,” James Clear writes in Atomic Habits, which has sold over 25 million copies worldwide since it was published in 2018. “It’s remarkable what you can build if you just don’t stop.” Books in this vein often rely on the language of either science, like Stanford psychologist Carol Dweck’s Mindset: The New Psychology of Success (2006), or evangelical Christianity, as in the work of megachurch pastor and Success Is a Choice (2020) author John C. Maxwell. By expressing faith in our ability to master our reality and overcome obstacles, these books are the present-day heirs to Norman Vincent Peale’s The Power of Positive Thinking, a 1952 bestseller that switched between Christian and pop-psych rhetorical modes. Peale’s book has spawned countless imitators since its initial publication. Notably, its author also presided over Trump’s first wedding and seems to have shaped the future president’s thinking, at least in those moments when he was not preoccupied with cosmic pointlessness.&lt;/p&gt;
    &lt;p&gt;Peale, in turn, drew on a set of spiritual beliefs and practices, known collectively as New Thought, that had been popular since the Gilded Age. New Thought — its most famous 21st-century articulation is The Secret, the 2006 manifesting manual touted by Oprah Winfrey — proceeds from the premise that material obstacles to human desires are basically illusory, the consequences of mental error. Through proper focus and prayer, New Thought claims, anyone can access a deep reservoir of divine creative energy and channel it to solve whatever difficulties they face, from physical illness to unemployment. As one New Thought tract published in 1903 puts it, conventional wisdom taught people how to get along “under the circumstances,” but it was high time that Americans started asking how to “get over the circumstances.”&lt;/p&gt;
    &lt;p&gt;But while New Thought and its descendants dominated the self-help publishing industry for much of the twentieth century, more accommodating attitudes toward “the circumstances” persisted elsewhere in American culture — a medley of spiritual practices and lifestyle trends that, in their vision of an inscrutable and ultimately unmasterable reality enveloping us all, can be understood as predecessors to today’s philosophical self-help. Exiled from Nazi Germany, the Frankfurt School theorist Theodor Adorno looked with dismay on what he saw as a surge of interest in 1940s America in the occult, from astrology to palm-reading. These, according to Adorno, were mechanisms for coping with a social world that appeared impervious to rational methods of control. “If, to the living, objective reality seems deaf as never before,” Adorno wrote, “they try to elicit meaning from it by saying abracadabra.” New Thought and related positive-thinking currents also taught readers to recite incantations; “every day, in every way, I am getting better and better,” one popular “affirmation” went. The purpose of midcentury occultism, however, was not to convince yourself that you were more in control than you might think. It was to discover that the world was ruled by forces more mysterious and powerful than you could have imagined: the planets, the spirits, the Jungian collective unconscious, the pilots of the flying saucers Americans suddenly began to spot everywhere starting in 1947. The best you could hope for was to learn how to play by their rules.&lt;/p&gt;
    &lt;p&gt;The feeling that the world was unresponsive and uncontrollable gained purchase as postwar America confronted the threats of environmental crisis, nuclear apocalypse, and, by the 1970s, economic stagnation. Many of the practices associated with the counterculture and the New Age movement, from homesteading and communal living to psychedelic drug use and free love, can be understood as attempts to refocus on the simple, immediate pleasures of life when faced with the transparent meaninglessness of traditional achievement: a spouse and kids, a white picket fence, a corner office. How could any of that stuff matter when the Cuyahoga River was on fire and the Bomb could go off any day? Herbert Marcuse (a former Frankfurt colleague of Adorno) argued in his 1964 book One-Dimensional Man that contemporary Americans seemed increasingly to embrace “spiritual, metaphysical, and bohemian” pursuits, exchanging ambitions of social transformation for the stylings of “Zen, existentialism, and beat ways of life, etc.” These attempts to find meaning or purpose in personal projects or private spiritual exercises were, Marcuse felt, “quickly digested by the status quo as part of its healthy diet.”&lt;/p&gt;
    &lt;p&gt;In the early days of the counterculture, the vogue for spiritual experimentation Marcuse identified spawned new publishing trends that blended self-help with philosophy. After toiling in relative obscurity for two decades, the self-styled “philosophical entertainer” Alan Watts broke into celebrity in the 1950s, selling countless copies of books that simultaneously introduced readers to East Asian philosophy and gave them practical advice on how to live. Robert Pirsig’s Zen and the Art of Motorcycle Maintenance (1974) and Benjamin Hoff’s The Tao of Pooh (1982) also staked out spots on best-seller lists by synthesizing “Eastern” and “Western” wisdom in ways that countless devotees found relevant to the challenges of ordinary life. Today, readers can still find Zen wisdom transposed into a secular philosophical key, especially in the best-selling books of the Korean monk Haemin Sunim (author of three of the top five entries on one online list of “The 10 Best Books on Secular Buddhism”). Dispensing a familiar message about the need for detachment and acceptance, Haemin will help you cultivate Love for Imperfect Things (2016) and learn what to do When Things Don’t Go Your Way (2024). “We are unhappy because we can’t find peace with what is,” Haemin explains. “We wish things to be different from what is happening at that moment.”&lt;/p&gt;
    &lt;p&gt;This advice, expressed in different registers and idioms, is at the heart of self-help philosophy, and the genre’s exponents are convinced it undermines fundamental convictions of the culture they’re addressing. The philosopher Costica Bradatan suggests that his paean In Praise of Failure “may seem surprising,” since “there seems to be nothing worse in our world than to fail” — although there is very little that will surprise the devoted self-help philosophy reader in Bradatan’s instruction “to see things as they are, as opposed to how we would like them to be.” In Meditations for Mortals, Burkeman quotes the German social theorist Hartmut Rosa to assail “the idea, the hope and desire, that we can make the world controllable” — allegedly “the driving cultural force of that form of life we call ‘modern.’” Burkeman explains that his brand of philosophical reflection can help us resist this ubiquitous impulse and embrace the fact that most things are beyond our command. “You needn’t reflect for long on the subject of human limitation,” he muses, “to see that the existence of problems simply follows, unavoidably, from the facts of finitude.” That is true, of course, which is why this insight is not nearly as disruptive to conventional wisdom as the self-help philosophers maintain. If all this advice really cuts against the grain of the modern world — a “World Striving for Perfection,” as the subtitle of Haemin’s Love for Imperfect Things puts it — the fact that, in various incarnations, it has proven so popular (and so lucrative) for so long is a bit of a puzzle. Perhaps it is less the “antidote” to the school of self-help that says you can do whatever you put your mind to and more its Janus face, gazing backwards with serenity at all the hopes our society has raised and crushed.&lt;/p&gt;
    &lt;p&gt;While the earliest antecedents of today’s self-help philosophy emphasized esoteric and “Eastern” wisdom, the doctrine that finally managed to create a full-fledged sub-industry in recent decades was Stoicism, a philosophical movement first popularized in ancient Greece in the third century B.C.E. that persisted throughout the first centuries of the Roman Empire. Ancient Stoics saw the universe as the embodiment of reason, or a fate-like “logos,” and devoted considerable effort to unraveling its principles. Fans today approach the school of thought primarily as “a framework for living our life in the best way possible,” as the popular Stoic expositor Massimo Pigliucci puts it; they are more interested in the pathway to happiness than in the various classes of logical propositions, the “connectives” that join them, and their assembly through syllogism into valid arguments. The cognitive practices pop-Stoicism recommends — “keeping in mind what is and what is not under our control, focusing our efforts on the former and not wasting them on the latter,” Piglicucci summarizes in How to Be a Stoic (2017) — act in accordance with the self-help philosophy genre’s fundamental dogma: we make ourselves miserable by worrying about stuff we can’t affect and that doesn’t really matter. Do what you believe is right, accept the outcome that fate has in store for you, and you can be happy — even in the direst circumstances.&lt;/p&gt;
    &lt;p&gt;As the journalist Hettie O’Brien observed in a perceptive 2020 piece on the attractiveness of the Stoic outlook in the depths of the Covid pandemic, discussion of the ancient philosophy ticked up in the 1980s and spiked in the 1990s, a decade frequently but misleadingly recalled as an era of complacent optimism. The end of history was, as Francis Fukuyama himself predicted, “a very sad time.” The loss of the systemic alternative represented by the Soviet Union and the triumph of capitalist globalization made the forces determining social reality feel even more impersonal than they had before. If some Silicon Valley Prometheans, striding atop the globe during the dot-com boom, felt godlike in their ability to manipulate the world, many Americans in the Clinton era felt at the mercy of fate, and found solace in the great ancient philosophy of amor fati (a phrase popularized by Friedrich Nietzsche but widely claimed by contemporary Stoic enthusiasts). Ross Perot’s 1992 running mate, Navy Vice Admiral James B. Stockdale, wrote a pamphlet in 1993 explaining how he used the teachings of the Greek Stoic philosopher Epictetus to reconcile himself to the inevitability of suffering, sickness, and death during his yearslong internment in a North Vietnamese prison. “It is impossible in such a body as ours, that is, in this universe that envelops us,” Stockdale quotes Epictetus as teaching, “that such things should not happen, some to one man, some to another.” The prior year, Bill Clinton told Garry Wills that besides the Bible, the book that had most influenced him was the Meditations of Marcus Aurelius, Roman emperor and Stoic luminary.&lt;/p&gt;
    &lt;p&gt;These days, if you were to query a politician or CEO at random, you’d have a decent shot at getting the same answer. Stoicism is inescapable, fueled in large part by the tireless propagandizing of Ryan Holiday, the former American Apparel marketing director. Holiday first dipped his toe into the Stoic business with his 2014 book The Obstacle Is the Way: The Timeless Art of Turning Trials into Triumph. In the aftermath of its success (especially in the world of professional sports), Holiday unleashed a torrent of follow-up books with titles similarly fond of predication: Ego Is the Enemy (2016), Stillness Is the Key (2019), and Discipline Is Destiny (2022), among others. He also launched a media empire that now includes a popular podcast and a YouTube channel under the “Daily Stoic” brand. Holiday has succeeded in making Stoicism so ubiquitous that purveyors of philosophical self-help today often seem required to take a position on it, either joining the bandwagon or attempting to carve out independent niches. Manson has complained on his blog about the perception that The Subtle Art of Not Giving a Fuck “is merely regurgitating Stoicism with a couple cool stories and F-bombs thrown in to spice things up,” when in reality he considers “Buddhism and Existentialism” to be his most important influences. He has, however, appeared on Holiday’s Daily Stoic podcast, to discuss “What You Should Actually Give a Fuck About.”&lt;/p&gt;
    &lt;p&gt;Critics have paid special attention to Holiday’s fans in Silicon Valley and in various online communities devoted to misogyny or racism or — usually — both. The classicist Donna Zuckerberg drew attention to this convergence in her 2018 book Not All Dead White Men, in which she argued that “the men of the manosphere have a deep fascination with Stoic philosophy.” Evidence of Stoicism’s popularity among right-wing extremists has only mounted since. The far-right influencer and alleged human trafficker Andrew Tate fashions himself a Stoic apostle; as he says in one video shared by the Instagram account @kngstoic, “you’re born to suffer, which ties back into my whole crypto project.” Holiday, for his part, has called Tate “repulsive” and suggested followers turn to Marcus Aurelius instead. Yet, as the classicist and Meditations translator Gregory Hays has noted, Stoicism thrived among elite Roman men, staunch believers in the necessity of social hierarchy, and when Holiday says things like “obeisance is the way forward,” it is not hard to imagine the dark places to which such maxims might lead.&lt;/p&gt;
    &lt;p&gt;Even so, the contemporary deployment of Stoicism is usually more banal than sinister. “The best revenge is to become unlike the one who did the injury,” Denzel Washington’s Macrinus quotes from the Meditations in 2024’s Gladiator II, addressing the philosopher-emperor’s secret grandson. Like many of the pearls of wisdom from the ancient masters strewn throughout the pop-Stoic corpus, the remark is so platitudinous that its primary effect is neither to enlighten nor to corrupt, but simply to bore. Anything can seem profound, however, if it is attributed to a certified Great Philosopher. “Of things some are in our power, and others are not,” explains an Epictetus maxim that can be found in nearly every contemporary treatise on Stoicism (if in different translations). In The Little Book of Stoicism (2019), Jonas Salzgeber quotes the same Greek sage on the implication of this observation: we should “make the best use of what is in our power, and take the rest as it happens.” Ah, okay. Such maxims litter the texts of the Stoic revival. The Dutch Olympic speed skater Mark Tuitert begins each chapter of his handbook The Stoic Mindset: Living the Ten Principles of Stoicism with a quotation from a thinker of yore, which previews the gold-medal guidance about to be dispensed. “Do not seek to have events happen as you wish, but wish them to happen as they do happen, and all will be well with you,” Epictetus tells us before the chapter “Accept Your Fate (And Love It).” It is, I suppose, strictly speaking accurate that if the approximately 8.6 million people who die each year due to a lack of access to quality healthcare were to wish their fate, their desires would not be frustrated, but tautological truth does not make for philosophical profundity.&lt;/p&gt;
    &lt;p&gt;There’s only so much of this you can take. The neo-Stoics, seemingly aware of that fact, have lately evinced some concern about readerly exhaustion. Donald J. Robertson, whose 2019 book How to Think Like a Roman Emperor explored the connections between Stoicism and the tenets of modern cognitive behavioral therapy, returned last year to hedge his bets with a new volume, How to Think Like Socrates. The book jacket christens the Athenian master “Godfather to the Stoics,” which is true insofar as Socrates could be considered the “godfather” to all subsequent Western philosophy. (One podcast on which Robertson appeared to promote the book also dubbed Plato’s teacher “The Godfather of Self-Help.”) If you enjoyed learning about the Stoics, why not go straight to the source? Robertson writes that CBT advocates celebrate Epictetus’s principle that “people are not upset by events but rather by their opinions about them.” But it turns out “the same idea can be found four centuries” earlier, “in the Socratic dialogues.” Robertson claims that by emphasizing the rational interrogation of our opinions about what befalls us, instead of providing a fix-all formula, his Socratic method actually offers “a critique of what self-help has become” — his own previous foray into the genre, presumably, excepted. No matter how many books the self-help philosophers pump out, no matter how many people subscribe to their podcasts or purchase flame-garnished medallions reading “Amor Fati” from the Daily Stoic store, the genre must always frame itself as subversive, dispensing the kind of challenging wisdom that only great souls can stomach.&lt;/p&gt;
    &lt;p&gt;If a tome published this January entitled Beyond Stoicism is any indication, the publishing industry will prove perfectly capable of recycling ancient philosophy into contemporary advice manuals even if the Stoicism bubble does burst. Cowritten by Pigliucci, New York City Stoics founder Gregory Lopez, and “The Stoic Mom” blogger Meredith Alexander Kunz, Beyond Stoicism assembles a team of Stoic all-stars to reassure readers that even if they don’t deem Stoicism congenial, they can still find solace in a grab bag of other ancient philosophies, such as skepticism, Epicureanism, and Neoplatonism. Despite their doctrinal differences, the authors explain, these creeds were all “articulated to help people cope with a world in turmoil and over which they had little, if any, control” — “much like our own turbulent times.” At last we have managed to reify not merely social reality but the act of philosophizing itself, treating it, like our uncontrollable world, as a thing: a coping tool you might select, like an ice cream flavor, according to your personal taste.&lt;/p&gt;
    &lt;p&gt;It would be unfair, however, to conflate the entire field of self-help philosophy with the vacuousness of pop-Stoicism. Since the momentous surge of consciousness-raising in the summer of 2020, which left a mark in publishing as in every other cultural industry, even some advocates of the Stoic revival have shown signs of metabolizing the political criticisms most commonly lobbed at it. In Reasons Not to Worry: How to Be Stoic in Chaotic Times (2022), the Australian writer Brigid Delaney confesses that, when she first began to read about the philosophy, she was concerned “that Stoicism’s emphasis on responsibility for one’s own character and acknowledgment of the ultimate smallness of our spheres of influence meant that social justice and agitation for societal change had no place for a practicing Stoic.” Delaney recounts how she eventually came to see Stoicism instead as an antidote to feelings of despair and frustration that, in her experience, made it more difficult to engage in political action. “You were more likely to be an effective agent of justice and change,” she writes, “if you channelled Stoic techniques, including controlling anger.” This is quite possibly true — activists who hulk out every time something doesn’t go their way are not long for the inevitably frustrating work of politics. Still, it is hard to imagine a successful organizer who never tries to change anything that initially seems outside their “sphere of influence.”&lt;/p&gt;
    &lt;p&gt;Some of the most thoughtful books at the intersection of philosophy and self-help deliver advice that the modern Stoics would also affirm — accept the limits of your control, moderate your expectations, question your assumptions about what really matters — while appealing to a litany of self-consciously left-wing, even revolutionary thinkers. The MIT philosopher Kieran Setiya invokes the heterodox Marxism of the Frankfurt School itself in his book Life Is Hard: How Philosophy Can Help Us Find Our Way (2022). Explaining the central insight of Adorno and his collaborators, Setiya writes that “ideology distorts our sense of what is humanly possible,” which he takes to mean that the attempt to “conceive an ideal world” to which we should aspire is a trap, drawing us ever further into ideology’s clutches. That is perhaps a reasonable gloss of the mercurial thinker in his most pessimistic moods, though not those in which he was able to insist that “if people want to persuade us that the conditional nature of man sets limits to utopia, this is simply untrue.” Drawing on his version of Adorno, Setiya argues that, instead of asking how we can build the perfect society, we ought to recognize that “there is value in a single step toward justice, and one step leads to another.” Setiya suggests that such an outlook might have been what Walter Benjamin had in mind in characterizing radical politics as pulling the “emergency brake” on the great train of history rather than riding it into a new era of progress.&lt;/p&gt;
    &lt;p&gt;In a similar vein, Avram Alpert argues in The Good-Enough Life (2022) that unlearning our expectations for “greatness” can help us resist the temptation of political overcommitment, which produces burned-out organizers and egotistical leaders. For Alpert, this is one of the chief lessons of the Black Freedom Movement, especially the unsung and disproportionately female cadres who did the unglamorous work of drawing ordinary people into the everyday activity of organization-building, while charismatic leaders like Martin Luther King, Jr. absorbed the media spotlight. Alpert also proposes that moderating our expectations for our own lives can help us overcome our socially ingrained deference to wealth and power. Manson’s injunction not to give a fuck is “pretty good advice,” in Alpert’s view, but he insists it must be accompanied by an appreciation for — and a commitment to change — the structural forces that “make following it so difficult.” Everyone deserves a minimal standard of material security precisely so they can “have more time and leisure to appreciate the ordinary, good-enough pleasures of existence” and relinquish the never-ending struggle for more.&lt;/p&gt;
    &lt;p&gt;The book in this genre that most forthrightly confronts its political risks is a slim volume called Anxiety, published in 2024 by Samir Chopra. The philosopher starts off on familiar footing by walking readers through the ways Buddhism, psychoanalysis, and existentialism — not Stoicism, although he approvingly cites its influence on CBT — treat the titular concept. In each case, he explains how the intellectual tradition in question considers anxiety to be an inescapable dimension of the human experience. According to Chopra, psychoanalysis, for example, teaches that our prospects of living comfortably with anxiety depend on “our ability to not expect” a “security” the world cannot “provide for us” — easy to say if you always know where your next meal is coming from. As I was nearing the end of the book, however, Chopra startled me by presenting, with considerable fidelity and sympathy, the political critique that Herbert Marcuse leveled at this whole line of thinking. “It would suit those in power,” Chopra writes, explicitly ventriloquizing Marcuse, “to know that those they have made anxious and fearful through their political and social arrangements are content to wallow in their anxiety and not take any action to reform the material conditions that brought it about.” Chopra urges readers to reflect on the entwinement in all our lives of ineliminable existential anxiety and distress caused by the structure of the society we inhabit. Socially manufactured anxiety, he argues, can and should be redressed. “Combating and confronting anxiety requires acceptance, activism, and contemplation,” Chopra avers, “an acute blend of which might be the salutary recipe for living with it.”&lt;/p&gt;
    &lt;p&gt;I think that’s right. The question, then, is what the proper blend looks like. I started reading all these books in early 2024, when I was wrapping up a book of my own that was in large part about the history of New Thought and the mainstream currents of American self-help it inspired. I thought it was interesting that a sudden rash of texts seemed to be positioning themselves, at least rhetorically, against positive thinking and our dominant ideology of success. I was also hoping, semi-secretly, that they’d save me. Every day I woke up in despair: at the never-ending extermination campaign in Gaza; at the slow-motion immolation of higher education, the industry to which I’d devoted my adult life; at the manifest absence of any force effectively resisting far-right authoritarianism in the United States and around the world. The books I read offered, if nothing else, proof that I was far from alone in feeling this way. Nearly all of them began with some recitation of the apparently insurmountable crises afflicting us today, even if their lists were not exactly the same as mine. And they reassured me that I didn’t need to feel the guilt that so often stalked my despair. “Be perfect, as your Father in heaven is perfect,” I learned from the Gospels during my Catholic upbringing. Here, instead, I read that giving up on perfection was a political obligation in its own right — the lesson, properly understood, of many of the thinkers I admired most.&lt;/p&gt;
    &lt;p&gt;At some point, however, I realized that I was spending more of my time thinking about my own despair than about the problems outside myself that were supposedly fueling it. And it seemed to me that a lot of people I knew were doing the same thing. So many conversations centered on how we were doing our best under difficult circumstances. Attendance at organizing meetings dwindled. My own attendance dwindled. Life is hard, we’d tell ourselves. Rest is resistance. While an exaggerated sense of our own importance is a recipe for both political and psychological disaster, it is also possible to overestimate our insignificance. Acceptance shades easily into excuse. With enough practice tolerating imperfection you can learn to forget what it is you’re failing to live up to. When those expectations include owning a vacation home or winning a Nobel Prize, letting go might be healthy — but doing so is tragic when they include stopping a genocide or ending homelessness. If that seems like an unreasonable standard to hold ourselves to, it is only because so few of us today have experienced the way that participating in the exercise of collective power can augment and extend our personal agency. When we are left to fend for ourselves, the conditions that shape our lives tend to feel alien and monolithic, forcing us to choose between the two polarities of self-help: the delusional optimism of positive thinking and the stoic acceptance taught by “philosophy.”&lt;/p&gt;
    &lt;p&gt;But preemptive surrender is no sign of wisdom. Any reality made by human beings can be remade by them. The price of this power is mutual obligation: we can never let ourselves off the hook. The things we can accomplish together are, by definition, within our sphere of control, even if we have to act through structures that are bigger than any of us alone to achieve them. As grating as it may be to admit, it turns out that some of those hoary positive-thinking cliches the philosophers rail against are true, as long as we stick to the first-person plural. We are responsible for how our lives unfold; we can do things that seem impossible. But for those of us living in the heart of the American empire, with our duly elected president marching our society gleefully into hell, this news is far from reassuring. What we do with our lives does matter — as much as anything possibly could. That should keep us up at night.&lt;/p&gt;
    &lt;p&gt;Erik Baker is a historian at Harvard University and the author of Make Your Own Job: How the Entrepreneurial Work Ethic Exhausted America. He is Senior Editor of The Drift.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45783440</guid><pubDate>Sat, 01 Nov 2025 17:21:08 +0000</pubDate></item><item><title>The giant basket case countries</title><link>https://www.noahpinion.blog/p/the-giant-basket-case-countries</link><description>&lt;doc fingerprint="7b1f90f7bb471e98"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The giant basket case countries&lt;/head&gt;
    &lt;head rend="h3"&gt;More and more of humanity is going to live in a few big countries that can't manage themselves.&lt;/head&gt;
    &lt;p&gt;I used to talk a lot about developing countries — how the successful ones accelerated their growth, and what lessons the others could learn from those successes. Here’s a whole series I wrote about the more promising development stories:&lt;/p&gt;
    &lt;p&gt;And when I was at Bloomberg, I wrote a lot about the prospects for African industrialization (which has been disappointing in the years since), and about the need for humanitarian aid to help some of the very worst-off countries.&lt;/p&gt;
    &lt;p&gt;These days, I’ve been writing a lot less about developing countries, for several reasons. First of all, developed countries aren’t doing so well themselves these days — most have slow growth, stagnating or shrinking populations, and internal political turmoil. Second, with the rise of economic nationalism, there is much less appetite among rich countries for altruistic crusades to help the developing world. China did have a big idea — the Belt and Road program — but it didn’t help very much, and created a lot of problems, meaning China will also probably retreat from development promotion. Meanwhile, protectionism in the U.S., China, and elsewhere will make it harder for developing countries to pursue traditional export-led growth.&lt;/p&gt;
    &lt;p&gt;But the window when developed countries (including China) can afford to treat poor countries like an afterthought is rapidly drawing to a close. The reason is simple demographics. The whole developed world is about to start shrinking. If not for immigration, it already would be:&lt;/p&gt;
    &lt;p&gt;Meanwhile, the world’s poorest countries are going to experience strong population growth through the end of this century:&lt;/p&gt;
    &lt;p&gt;The result of this disparity is visible in the chart at the top of this post. By 2100, six out of the fifteen most populous countries in the world — and three of the top five — will be places that as of 2025 have under $7,000 in per capita GDP (PPP). The biggest ones will be Pakistan, Nigeria, and the Democratic Republic of the Congo, with Ethiopia and Tanzania not far behind. Altogether, over 2 billion people — a fifth or more of humanity’s peak population — is projected to live in those five countries.&lt;/p&gt;
    &lt;p&gt;And that percentage will only grow after that, at least unless some sort of radical unexpected change happens to demographic patterns. Fertility is falling everywhere, but in the Big 5 poor countries, it’s not falling much faster than in the world as a whole:&lt;/p&gt;
    &lt;p&gt;Why are these countries’ fertility rates falling so slowly? Because they’re poor. The idea that some countries are culturally resistant to the fertility transition is falling out of favor, as African nations and predominantly Muslim nations show the same pattern of fertility decline as everywhere else (or faster). But the Big 5 are unusually poor, and poor countries tend to have much higher fertility:&lt;/p&gt;
    &lt;p&gt;Of course we can expect to see the fertility transition accelerate as these countries cross the $7,000 threshold; as you can see on the chart, very few countries maintain high fertility past that level. But while Pakistan might manage that soon, the others probably won’t. Nigeria’s GDP per capita has actually gone down in recent years, Tanzania and Ethiopia are still decades away at current rates of growth, and the DRC is still seemingly inextricably mired in extreme poverty:&lt;/p&gt;
    &lt;p&gt;To see just how weak of a performance this is, consider the fact that Pakistan — arguably the country that’s in the best shape of the Big 5 — has fallen relentlessly behind India in economic terms:&lt;/p&gt;
    &lt;p&gt;What happens to big countries is incredibly important; in recent decades, it’s India and China that have made the big strides against global poverty. These supergiant countries used to be desperately poor, but they got their act together and produced decades of solid growth — and as India and China went, so went the whole planet:&lt;/p&gt;
    &lt;p&gt;But as you can see on that chart, there’s a composition effect at work here — as big countries get rich, their fertility goes down, and their percentage of the human race falls as well. The countries with rapidly growing populations are those that failed to provide for their people. Now that Africa comprises a majority of the world’s extremely poor population, the drop in extreme poverty has stalled, and may soon start to rise again.&lt;/p&gt;
    &lt;p&gt;This tradeoff between income and fertility is a problem that the whole human race is going to have to solve, and soon, if it wants to have a prosperous long-term future. But in the meantime, poverty is still worse than aging, and the billions of people in the Big 5 poor countries deserve to have decent living standards.&lt;/p&gt;
    &lt;p&gt;And it’s not like rich countries can sit back and just ignore the suffering in poor countries, either. Emigration pressure usually peaks around $8,000 to $12,000 in per capita GDP1, meaning that rich countries in Europe, the Anglosphere, and Asia are likely to see giant waves of Pakistani, Nigerian, Congolese, Ethiopian, and Tanzanian migrants clamoring to get in. The current anti-immigration backlash gives us an unpleasant hint of what might happen as a result. Also, the shrinking of rich-country markets (due to shrinking populations) will hurt Western corporations, unless it can be matched by economic growth in developing countries.&lt;/p&gt;
    &lt;p&gt;So the world has a stake in helping the Big 5 poor countries grow. They’re highly unlikely to be the next China or India, but getting them to middle income level is probably doable.&lt;/p&gt;
    &lt;p&gt;But how? The most important thing rich countries — including China — can do is to fully open their markets to these countries’ products. The economic literature is pretty conclusive that this raises economic growth in poor countries, at least somewhat. There are many instances in which rich countries have actually done this, and there are a lot of ways we can evaluate the results of those experiments. For example, Romalis (2007) found that when America reduced its tariffs under the Most Favored Nation program, poor countries sold more products to the U.S. and grew faster as a result:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;This paper examined whether improved access to developed countries’ markets raises developing country growth. The paper concludes that it does. Decreased developed country trade barriers increase developing world trade. This induced trade expansion causes an acceleration in the growth rate of developing countries. Developing countries that expanded their trade the most in response to improved access to developed country markets saw their growth rates increase relative to other developing countries…This suggests that developing country growth rates will accelerate if the developed world lowers its remaining trade barriers.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Frazer and Van Biesebroeck (2007) found that the African Growth and Opportunity Act, which opened American markets to some African products, raised African exports:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;[W]e find that AGOA has a large and robust impact on apparel imports into the U.S., as well as on the agricultural and manufactured products covered by AGOA. These import responses grew over time and were the largest in product categories where the tariffs removed were large. AGOA did not result in a decrease in exports to Europe in these product categories, suggesting that the U.S.-AGOA imports were not merely diverted from elsewhere.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Opening rich-country markets to textile exports also helped get Bangladesh’s garment manufacturing sector off the ground, which has enabled that country to climb out of absolute poverty.&lt;/p&gt;
    &lt;p&gt;Importantly, though, these positive effects happen even when poor countries don’t see a manufacturing boom at all. Kassa and Coulibaly (2019) found that AGOA usually didn’t stimulate manufacturing in the long term, and usually just allowed African countries to sell more commodities to the U.S. But this ended up having a positive effect on growth in those countries anyway.&lt;/p&gt;
    &lt;p&gt;Right now, American policy is going in exactly the wrong direction. AGOA was allowed to expire this year, which will definitely hurt poor countries in Africa — including four of the Big 5. Meanwhile, Donald Trump is slapping tariffs on Africa, and has threatened tariffs on Pakistan as well. This might satisfy MAGA machismo in the short term, but in the long term it’s going to lead to a lot more African migrants trying to get into the U.S. — not exactly the kind of outcome Trump would probably like. Meanwhile, opening American markets to Pakistani goods might prompt that country’s government to try to emulate its South Asian neighbors, building industries like garments, textiles, and so on, and investing more of its GDP for the future.&lt;/p&gt;
    &lt;p&gt;So opening American markets to products from the Big 5 is a win for everyone involved.&lt;/p&gt;
    &lt;p&gt;Another pretty obvious idea is foreign aid. There’s a huge debate on whether aid actually raises growth — whether it actually “teaches a man to fish”, as the saying goes. The best literature review here that I know of is Dreher, Lang, and Reinsberg (2024). They find that aid does increase growth a bit, especially in very poor countries (like the Big 5). But the bigger effect is on poverty, which aid seems to reduce by a decently significant amount. That decrease in poverty comes with big improvements in health and welfare — things that tend to drive fertility down faster. That can reduce overpopulation in resource-dependent poor countries like the DRC, which means more natural resource rents to go around.&lt;/p&gt;
    &lt;p&gt;MAGA types might balk, however, at Dreher et al.’s finding that aid increases emigration pressure. When you give poor people money, or simply relieve their economic stress, one of the things they use that money for is to move out of their country to somewhere with better opportunities — like Europe or the U.S. MAGA is fundamentally an anti-immigration movement, so it might be a bridge too far to ask American conservatives to support aid, despite the long-term effect on population reduction. China, however, might still be persuaded to dish out more aid, especially given the geopolitical benefits it might reap from doing so.&lt;/p&gt;
    &lt;p&gt;One policy that’s probably not a good idea is to give money to the governments of the Big 5. Back in 2021, I wrote about how Pakistan has basically learned how to get repeated giveaways from the IMF (and now China), in the form of “loans” that get predictably and repeatedly “forgiven”:&lt;/p&gt;
    &lt;p&gt;This infinite lifeline of free money acts a bit like oil does for a petrostate, allowing Pakistan to exist at a subsistence level without investing its savings or building up its industry much. While India and Bangladesh invest to grow their economies for the future, Pakistan fritters its money away on hanging on to an impoverished status quo:&lt;/p&gt;
    &lt;p&gt;Therefore, aid to the Big 5 should go directly to the people of those countries — to building schools and hospitals, training teachers and doctors, and even just giving poor people cash. The governments of these dysfunctional giant nations should not be given sources of free cash.&lt;/p&gt;
    &lt;p&gt;But one thing the world can do for the Big 5 is to try to provide them with military stability. While Pakistan and Tanzania are largely stable (despite Pakistan’s frequent coups), the DRC, Nigeria, and Ethiopia are plagued by near-continuous warfare between fragmented ethnic groups, with the occasional religious movement thrown in. Increasing UN peacekeepers, other international peacekeepers, and diplomatic mediation efforts for those three countries would probably yield big dividends, allowing their fragile governments to focus a little more on economic and social development and a little less on war. Research generally shows that peacekeeping operations reduce conflict in poor countries, though they’re not a panacea.&lt;/p&gt;
    &lt;p&gt;The harsh reality is that nothing rich countries do is likely to turn countries like the DRC and Nigeria into countries like China and India. But there’s a lot we can do — for very low cost to ourselves — in order to push these countries toward a more livable, sustainable future. And in doing so, we can hopefully avert a world where most people live in a failed state.&lt;/p&gt;
    &lt;p&gt;At 2025 purchasing power parities. I converted from the numbers in that paper.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45783465</guid><pubDate>Sat, 01 Nov 2025 17:24:57 +0000</pubDate></item><item><title>OpenAI Moves to Complete Potentially the Largest Theft in Human History</title><link>https://thezvi.substack.com/p/openai-moves-to-complete-potentially</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45783470</guid><pubDate>Sat, 01 Nov 2025 17:25:12 +0000</pubDate></item><item><title>Show HN: Why write code if the LLM can just do the thing? (web app experiment)</title><link>https://github.com/samrolken/nokode</link><description>&lt;doc fingerprint="a15b850a73e66ead"&gt;
  &lt;main&gt;
    &lt;p&gt;A web server with no application logic. Just an LLM with three tools.&lt;/p&gt;
    &lt;p&gt;One day we won't need code. LLMs will output video at 120fps, sample inputs in realtime, and just... be our computers. No apps, no code, just intent and execution.&lt;/p&gt;
    &lt;p&gt;That's science fiction.&lt;/p&gt;
    &lt;p&gt;But I got curious: with a few hours this weekend and today's level of tech, how far can we get?&lt;/p&gt;
    &lt;p&gt;I expected this to fail spectacularly.&lt;/p&gt;
    &lt;p&gt;Everyone's focused on AI that writes code. You know the usual suspects, Claude Code, Cursor, Copilot, all that. But that felt like missing the bigger picture. So I built something to test a different question: what if you skip code generation entirely? A web server with zero application code. No routes, no controllers, no business logic. Just an HTTP server that asks an LLM "what should I do?" for every request.&lt;/p&gt;
    &lt;p&gt;The goal: prove how far away we really are from that future.&lt;/p&gt;
    &lt;p&gt;Contact manager. Basic CRUD: forms, database, list views, persistence.&lt;/p&gt;
    &lt;p&gt;Why? Because most software is just CRUD dressed up differently. If this works at all, it would be something.&lt;/p&gt;
    &lt;code&gt;// The entire backend
const result = await generateText({
  model,
  tools: {
    database,      // Run SQL queries
    webResponse,   // Return HTML/JSON
    updateMemory   // Save user feedback
  },
  prompt: `Handle this HTTP request: ${method} ${path}`,
});&lt;/code&gt;
    &lt;p&gt;Three tools:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;database&lt;/code&gt;- Execute SQL on SQLite. AI designs the schema.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;webResponse&lt;/code&gt;- Return any HTTP response. AI generates the HTML, JavaScript, JSON or whatever fits.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;updateMemory&lt;/code&gt;- Persist feedback to markdown. AI reads it on next request.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The AI infers what to return from the path alone. Hit &lt;code&gt;/contacts&lt;/code&gt; and you get an HTML page. Hit &lt;code&gt;/api/contacts&lt;/code&gt; and you get JSON:&lt;/p&gt;
    &lt;code&gt;// What the AI generates for /api/contacts
{
  "contacts": [
    { "id": 1, "name": "Alice", "email": "alice@example.com" },
    { "id": 2, "name": "Bob", "email": "bob@example.com" }
  ]
}&lt;/code&gt;
    &lt;p&gt;Every page has a feedback widget. Users type "make buttons bigger" or "use dark theme" and the AI implements it.&lt;/p&gt;
    &lt;p&gt;It works. That's annoying.&lt;/p&gt;
    &lt;p&gt;Every click or form submission took 30-60 seconds. Traditional web apps respond in 10-100 milliseconds. That's 300-6000x slower. Each request cost $0.01-0.05 in API tokens—100-1000x more expensive than traditional compute. The AI spent 75-85% of its time reasoning, forgot what UI it generated 5 seconds ago, and when it hallucinated broken SQL that was an immediate 500 error. Colors drifted between requests. Layouts changed. I tried prompt engineering tricks like "⚡ THINK QUICKLY" and it made things slower because the model spent more time reasoning about how to be fast.&lt;/p&gt;
    &lt;p&gt;But despite all that, forms actually submitted correctly. Data persisted across restarts. The UI was usable. APIs returned valid JSON. User feedback got implemented. The AI invented, without any examples, sensible database schemas with proper types and indexes, parameterized SQL queries that were safe from injection, REST-ish API conventions, responsive Bootstrap layouts, form validation, and error handling for edge cases. All emergent behavior from giving it three tools and a prompt.&lt;/p&gt;
    &lt;p&gt;So yes, the capability exists. The AI can handle application logic. It's just catastrophically slow, absurdly expensive, and has the memory of a goldfish.&lt;/p&gt;
    &lt;p&gt;The capability exists. The AI can handle application logic.&lt;/p&gt;
    &lt;p&gt;The problems are all performance: speed (300-6000x slower), cost (100-1000x more expensive), consistency (no design memory), reliability (hallucinations → errors).&lt;/p&gt;
    &lt;p&gt;But these feel like problems of degree, not kind:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Inference: improving ~10x/year&lt;/item&gt;
      &lt;item&gt;Cost: heading toward zero&lt;/item&gt;
      &lt;item&gt;Context: growing (eventual design memory?)&lt;/item&gt;
      &lt;item&gt;Errors: dropping&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;But the fact that I built a working CRUD app with zero application code, despite it being slow and expensive, suggests we might be closer to "AI just does the thing" than "AI helps write code."&lt;/p&gt;
    &lt;p&gt;In this project, what's left is infrastructure: HTTP setup, tool definitions, database connections. The application logic is gone. But the real vision? 120 inferences per second rendering displays with constant realtime input sampling. That becomes the computer. No HTTP servers, no databases, no infrastructure layer at all. Just intent and execution.&lt;/p&gt;
    &lt;p&gt;I think we don't realize how much code, as a thing, is mostly transitional.&lt;/p&gt;
    &lt;code&gt;npm install&lt;/code&gt;
    &lt;p&gt;&lt;code&gt;.env&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;LLM_PROVIDER=anthropic
ANTHROPIC_API_KEY=sk-ant-...
ANTHROPIC_MODEL=claude-3-haiku-20240307&lt;/code&gt;
    &lt;code&gt;npm start&lt;/code&gt;
    &lt;p&gt;Visit &lt;code&gt;http://localhost:3001&lt;/code&gt;. First request: 30-60s.&lt;/p&gt;
    &lt;p&gt;What to try:&lt;/p&gt;
    &lt;p&gt;Check out &lt;code&gt;prompt.md&lt;/code&gt; and customize it. Change what app it builds, add features, modify the behavior. That's the whole interface.&lt;/p&gt;
    &lt;p&gt;Out of the box it builds a contact manager. But try:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;/game&lt;/code&gt;- Maybe you get a game?&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;/dashboard&lt;/code&gt;- Could be anything&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;/api/stats&lt;/code&gt;- Might invent an API&lt;/item&gt;
      &lt;item&gt;Type feedback: "make this purple" or "add a search box"&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;MIT License&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45783640</guid><pubDate>Sat, 01 Nov 2025 17:45:18 +0000</pubDate></item><item><title>Visible from space, Sudan's bloodied sands expose a massacre of thousands</title><link>https://www.telegraph.co.uk/world-news/2025/10/28/sudan-bloodied-sands-massacre-thousands/</link><description>&lt;doc fingerprint="af14cd1f0e004f24"&gt;
  &lt;main&gt;
    &lt;p&gt;The hot sand around the Sudanese city of El Fasher is stained red with the blood of more than 2,000 massacred civilians.&lt;/p&gt;
    &lt;p&gt;The pools of blood are so thick, the piles of bodies so exposed, that the ethnic purge allegedly committed by Sudanese paramilitary rebels is visible from space.&lt;/p&gt;
    &lt;p&gt;Militia groups defending the city alongside the army alleged the Rapid Support Forces (RSF) rebel group “committed heinous crimes against innocent civilians” and said most of the dead were women, children and the elderly.&lt;/p&gt;
    &lt;p&gt;A video purported to show a child soldier murdering a grown man in cold blood. Another supposedly showed RSF fighters executing civilians moments after pretending to release them.&lt;/p&gt;
    &lt;p&gt;The total death toll could not immediately be confirmed, but satellite pictures taken after the city fell over the weekend following an 18-month siege showed evidence of mass killings.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45783699</guid><pubDate>Sat, 01 Nov 2025 17:50:38 +0000</pubDate></item></channel></rss>