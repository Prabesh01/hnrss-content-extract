<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Fri, 31 Oct 2025 14:41:21 +0000</lastBuildDate><item><title>NPM flooded with malicious packages downloaded more than 86k times</title><link>https://arstechnica.com/security/2025/10/npm-flooded-with-malicious-packages-downloaded-more-than-86000-times/</link><description>&lt;doc fingerprint="771a9388954b799"&gt;
  &lt;main&gt;
    &lt;p&gt;Attackers are exploiting a major weakness that has allowed them access to the NPM code repository with more than 100 credential-stealing packages since August, mostly without detection.&lt;/p&gt;
    &lt;p&gt;The finding, laid out Wednesday by security firm Koi, brings attention to an NPM practice that allows installed packages to automatically pull down and run unvetted packages from untrusted domains. Koi said a campaign it tracks as PhantomRaven has exploited NPM’s use of “Remote Dynamic Dependencies” to flood NPM with 126 malicious packages that have been downloaded more than 86,000 times. Some 80 of those packages remained available as of Wednesday morning, Koi said.&lt;/p&gt;
    &lt;head rend="h2"&gt;A blind spot&lt;/head&gt;
    &lt;p&gt;“PhantomRaven demonstrates how sophisticated attackers are getting [better] at exploiting blind spots in traditional security tooling,” Koi’s Oren Yomtov wrote. “Remote Dynamic Dependencies aren’t visible to static analysis.”&lt;/p&gt;
    &lt;p&gt;Remote Dynamic Dependencies provide greater flexibility in accessing dependencies—the code libraries that are mandatory for many other packages to work. Normally, dependencies are visible to the developer installing the package. They’re usually downloaded from NPM’s trusted infrastructure.&lt;/p&gt;
    &lt;p&gt;RDD works differently. It allows a package to download dependencies from untrusted websites, even those that connect over HTTP, which is unencrypted. The PhantomRaven attackers exploited this leniency by including code in the 126 packages uploaded to NPM. The code downloads malicious dependencies from URLs, including http://packages.storeartifact.com/npm/unused-imports. Koi said these dependencies are “invisible” to developers and many security scanners. Instead, they show the package contains “0 Dependencies.” An NPM feature causes these invisible downloads to be automatically installed.&lt;/p&gt;
    &lt;p&gt;Compounding the weakness, the dependencies are downloaded “fresh” from the attacker server each time a package is installed, rather than being cached, versioned, or otherwise static, as Koi explained:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45755027</guid><pubDate>Thu, 30 Oct 2025 00:37:33 +0000</pubDate></item><item><title>Free software scares normal people</title><link>https://danieldelaney.net/normal/</link><description>&lt;doc fingerprint="a23b437c2441cdbd"&gt;
  &lt;main&gt;
    &lt;p&gt;I’m the person my friends and family come to for computer-related help. (Maybe you, gentle reader, can relate.) This experience has taught me which computing tasks are frustrating for normal people.&lt;/p&gt;
    &lt;p&gt;Normal people often struggle with converting video. They will need to watch, upload, or otherwise do stuff with a video, but the format will be weird. (Weird, broadly defined, is anything that won’t play in QuickTime or upload to Facebook.)&lt;/p&gt;
    &lt;p&gt;I would love to recommend Handbrake to them, but the user interface is by and for power users. Opening it makes normal people feel unpleasant feelings.&lt;/p&gt;
    &lt;p&gt;This problem is rampant in free software. The FOSS world is full of powerful tools that only have a “power user” UI. As a result, people give up. Or worse: they ask people like you and I to do it for them.&lt;/p&gt;
    &lt;p&gt;I want to make the case to you that you can (and should) solve this kind of problem in a single evening.&lt;/p&gt;
    &lt;p&gt;Take the example of Magicbrake, a simple front end I built. It hides the power and flexibility of Handbrake. It does only the one thing most people need Handbrake for: taking a weird video file and making it normal. (Normal, for our purposes, means a small MP4 that works just about anywhere.)&lt;/p&gt;
    &lt;p&gt;There is exactly one button.&lt;/p&gt;
    &lt;p&gt;This is a fast and uncomplicated thing to do. Unfortunately, the people who have the ability to solve problems like this are often disinclined to do it.&lt;/p&gt;
    &lt;p&gt;“Why would you make Handbrake less powerful on purpose?”&lt;/p&gt;
    &lt;p&gt;“What if someone wants a different format?”&lt;/p&gt;
    &lt;p&gt;“What about [feature/edge case]?”&lt;/p&gt;
    &lt;p&gt;The answer to all these questions is the same: a person who needs or wants that stuff can use Handbrake. If they don’t need everything Handbrake can do and find it bewildering, they can use this. Everyone wins.&lt;/p&gt;
    &lt;p&gt;It’s a bit like obscuring the less-used functions on a TV remote with tape. The functions still exist if you need them, but you’re not required to contend with them just to turn the TV on.&lt;/p&gt;
    &lt;p&gt;People benefit from stuff like this, and I challenge you to make more of it. Opportunities are everywhere. The world is full of media servers normal people can’t set up. Free audio editing software that requires hours of learning to be useful for simple tasks. Network monitoring tools that seem designed to ward off the uninitiated. Great stuff normal people don’t use. All because there’s only one UI, and it’s designed to do everything.&lt;/p&gt;
    &lt;p&gt;80% of the people only need 20% of the features. Hide the rest from them and you’ll make them more productive and happy. That’s really all it takes.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45760878</guid><pubDate>Thu, 30 Oct 2025 15:07:15 +0000</pubDate></item><item><title>Affinity Studio now free</title><link>https://www.affinity.studio/get-affinity</link><description>&lt;doc fingerprint="3bd67e5e966d06c5"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Get Affinity&lt;/head&gt;
    &lt;p&gt;Available on desktop for&lt;/p&gt;
    &lt;p&gt;The all-in-one creative app, with everything you need to craft designs, edit images, and lay it all out, without ever leaving your document or paying a thing.&lt;/p&gt;
    &lt;quote&gt;$0, free&lt;/quote&gt;
    &lt;p&gt;To download Affinity, sign in with your Canva account (or create one for free).&lt;/p&gt;
    &lt;head rend="h2"&gt;One powerful app. No cost.&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Fully-featured toolsets&lt;/p&gt;
        &lt;p&gt;From vector to pixel to layout, Affinity has all the studio-grade tools you need under one roof.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Customizable studios&lt;/p&gt;
        &lt;p&gt;Mix and match your favorite tools to build your very own creative studios.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Non-destructive editing&lt;/p&gt;
        &lt;p&gt;Experiment as much you want, keep your original files intact.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Pixel-perfect export&lt;/p&gt;
        &lt;p&gt;Full control over how your work leaves the app, whether it’s by object, slice, or doc.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;What you’ll get&lt;/head&gt;
    &lt;p&gt;With Affinity, you’ll get all the professional tools you need for your design, photo editing, and page layout projects, free of charge. If you’re on a Canva premium plan, you’ll also be able to unlock Canva AI tools directly in Affinity for a super-powered workflow.&lt;/p&gt;
    &lt;p&gt;+ Canva premium plans&lt;/p&gt;
    &lt;head rend="h2"&gt;Design workflows&lt;/head&gt;
    &lt;p&gt;Access all vector design, photo editing, and page layout tools in one app&lt;/p&gt;
    &lt;p&gt;Combine vector and pixel work on the same .af document&lt;/p&gt;
    &lt;p&gt;Customize your workspace with floating toolbars and studio presets&lt;/p&gt;
    &lt;p&gt;Real-time performance engine for ultra-smooth editing&lt;/p&gt;
    &lt;p&gt;Non-destructive editing across layers, filters, and adjustments&lt;/p&gt;
    &lt;p&gt;Import PSD, AI, PDF, SVG, IDML and more with high fidelity&lt;/p&gt;
    &lt;p&gt;Export with one-click presets or custom slice-based output&lt;/p&gt;
    &lt;p&gt;Quick export direct to Canva&lt;/p&gt;
    &lt;head rend="h2"&gt;Powerful photo editing&lt;/head&gt;
    &lt;p&gt;Live filters and adjustments with instant preview&lt;/p&gt;
    &lt;p&gt;Full RAW editing, tone mapping, and lens correction&lt;/p&gt;
    &lt;p&gt;Advanced retouching: inpainting brush, healing tools, dodge and burn&lt;/p&gt;
    &lt;p&gt;Batch processing with recordable macros, HDR merge, panorama stitching, and more&lt;/p&gt;
    &lt;head rend="h2"&gt;Pro vector design&lt;/head&gt;
    &lt;p&gt;Precision drawing with pen, node, and pencil tools&lt;/p&gt;
    &lt;p&gt;Live shape editing, booleans, and shape builder&lt;/p&gt;
    &lt;p&gt;Flexible gradients with full control&lt;/p&gt;
    &lt;p&gt;Trace pixel images&lt;/p&gt;
    &lt;p&gt;Pixel-perfect vector tools for illustration and layout&lt;/p&gt;
    &lt;head rend="h2"&gt;Advanced page layout&lt;/head&gt;
    &lt;p&gt;Linked text frames with autoflow and live text wrapping&lt;/p&gt;
    &lt;p&gt;Smart master pages with overrides and reusable layouts&lt;/p&gt;
    &lt;p&gt;Pro typography: ligatures, stylistic sets, drop caps, and variable fonts&lt;/p&gt;
    &lt;p&gt;Print-ready output: CMYK, spot colours, preflight, bleed, and slug support&lt;/p&gt;
    &lt;p&gt;Data merge from .csv with tokens, image merge, and conditional logic&lt;/p&gt;
    &lt;head rend="h2"&gt;Canva AI Studio&lt;/head&gt;
    &lt;p&gt;Generative Fill, Expand, and Edit&lt;/p&gt;
    &lt;p&gt;Generate Images and Vectors&lt;/p&gt;
    &lt;p&gt;Remove Background and Subject Selection&lt;/p&gt;
    &lt;p&gt;Colorize, Depth Selection, and Super Resolution&lt;/p&gt;
    &lt;p&gt;Portrait Blur and Portrait Lighting&lt;/p&gt;
    &lt;p&gt;Full AI generation history&lt;/p&gt;
    &lt;head rend="h2"&gt;Need Affinity for your organization?&lt;/head&gt;
    &lt;p&gt;Skip the individual downloads and get your entire team on Affinity with SSO via a Canva Enterprise or Canva Districts account. Choose an option below to get started.&lt;/p&gt;
    &lt;head rend="h2"&gt;FAQs&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Yes, Affinity really is free. That doesn’t mean you’re getting a watered-down version of the app though. You can use every tool in the Pixel, Vector, and Layout studios, plus all of the customization and export features, as much as you want, with no restrictions or payment needed. The app will also receive free updates with new features and improvements added.&lt;/p&gt;
        &lt;p&gt;If you’re on a Canva premium plan (Pro, Business, Enterprise, Education), you’ll also be able to unlock Canva’s powerful AI tools within Affinity via the Canva AI Studio.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yes. Affinity is now brought to you by Canva, and your Canva account gives you access to Affinity and other Canva products and features.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;No. You can access all of Affinity’s vector, layout, and pixel tools for free without a Canva subscription. If you’d like to unlock Canva AI tools within Affinity, however, you will need a premium Canva plan.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;This is a brand-new product that gives you advanced photo editing, graphic design, and page layout tools under one roof. It includes highly requested features such as Image Trace, ePub support, mesh gradients, hatch fills, live glitch filter, as well as custom capabilities that allow you to rearrange panels and combine tools to build your own unique studios. Plus, with a Canva premium plan, you can unlock incredibly powerful AI tools such as Generative Fill, Generative Expand, Generate Image/Vector, and more — directly in Affinity.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yes. With a Canva premium plan you can unlock Canva AI features in Affinity.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;No, these are only available to those with Canva premium accounts.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Affinity is currently available on Windows and macOS (iPadOS coming soon!).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;We’re busy building our iPad version — stay tuned for updates!&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Affinity is optimized for the latest hardware, including Apple silicon.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Absolutely! The new desktop version of Affinity can open all files created in Affinity V2 or V1 apps. However, Affinity V1 and V2 cannot open files that are created or saved in the newer app, Affinity by Canva.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;No, it’s the same app, just available on different operating systems.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yes, you can install Affinity on as many devices as you like.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yes! It’s easy to import PSDs, AIs, IDMLs, DWGs, and other file types into Affinity, with structure, layers, and creative intent preserved.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Affinity is available in English, French, German, Italian, Spanish, Portuguese, Japanese, Chinese, Bahasa Indonesian, and Turkish. Keep an eye out for more languages coming soon!&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Get in touch to speak to our team about how your organization can get set up with Affinity, including SSO.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Then all you need to do is stay in one of our pre-built studios: Pixel, Vector or Layout. You’ll find all your favorite tools there, plus some new ones. Since it’s all free, just think of the other creative toolsets as an added bonus!&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;That’s totally fine. Your Affinity V2 license (via Serif) remains valid and Serif will continue to keep activation servers online. But please note that these apps won’t receive future updates.&lt;/p&gt;
        &lt;p&gt;For the best experience, we recommend using the new Affinity by Canva app.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;No. The new desktop version of Affinity can open all files created in V2, but older versions (including V2 on iPad) cannot open newer Affinity (.af) files, meaning you won’t be able to work across both platforms.&lt;/p&gt;&lt;lb/&gt;We don’t have a release date for the new Affinity on iPad yet, so recommend continuing to run V2 independently while you enjoy the new Affinity on desktop.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Yes. The new Affinity by Canva app will receive free updates and new features over time.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;You will need to be online to download and activate your license with your free Canva account. From then on, there is no requirement to be online, even with extended offline periods.&lt;/p&gt;
        &lt;p&gt;There are a couple of things to keep in mind:&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;There are some features which do require you to be online, if you choose to use them, such as product help, lessons, stock libraries and integrations with Canva including AI tools.&lt;/item&gt;
          &lt;item&gt;We’ll also be releasing new updates and patches regularly, so we recommend connecting from time to time to keep your app up to date, but it's not a requirement of use.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;You need a Canva premium plan to unlock all of Canva’s AI features in Affinity. Simply download the Affinity app via our Downloads page and follow the prompts once you click ‘Canva AI Studio’.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45761445</guid><pubDate>Thu, 30 Oct 2025 15:54:38 +0000</pubDate></item><item><title>How the cochlea computes (2024)</title><link>https://www.dissonances.blog/p/the-ear-does-not-do-a-fourier-transform</link><description>&lt;doc fingerprint="a63e213260f69383"&gt;
  &lt;main&gt;
    &lt;p&gt;Let’s talk about how the cochlea computes!&lt;/p&gt;
    &lt;p&gt;The tympanic membrane (eardrum) is vibrated by changes in air pressure (sound waves). Bones in the middle ear amplify and send these vibrations to the fluid-filled, snail-shaped cochlea. Vibrations travel through the fluid to the basilar membrane, which remarkably performs frequency separation1: the stiffer, lighter base resonates with high frequency components of the signal, and the more flexible, heavier apex resonates with lower frequencies. Between the two ends, the resonant frequencies decrease logarithmically in space2.&lt;/p&gt;
    &lt;p&gt;The hair cells on different parts of the basilar membrane wiggle back and forth at the frequency corresponding to their position on the membrane. But how do wiggling hair cells translate to electrical signals? This mechanoelectrical transduction process feels like it could be from a Dr. Seuss world: springs connected to the ends of hair cells open and close ion channels at the frequency of the vibration, which then cause neurotransmitter release. Bruno calls them “trapdoors”. Here’s a visualization:&lt;/p&gt;
    &lt;p&gt;It’s clear that the hardware of the ear is well-equipped for frequency analysis. Nerve fibers serve as filters to extract temporal and frequency information about a signal. Below are examples of filters (not necessarily of the ear) shown in the time domain. On the left are filters that are more localized in time, i.e. when a filter is applied to a signal, it is clear when in the signal the corresponding frequency occurred. On the right are filters that have less temporal specificity, but are more uniformly distributed across frequencies compared to the left one.&lt;/p&gt;
    &lt;p&gt;Wouldn’t it be convenient if the cochlea were doing a Fourier transform, which would fit cleanly into how we often analyze signals in engineering? But no 🙅🏻♀️! A Fourier transform has no explicit temporal precision, and resembles something closer to the waveforms on the right; this is not what the filters in the cochlea look like.&lt;/p&gt;
    &lt;p&gt;We can visualize different filtering schemes, or tiling of the time-frequency domain, in the following figure. In the leftmost box, where each rectangle represents a filter, a signal could be represented at a high temporal resolution (similar to left filters above), but without information about its constituent frequencies. On the other end of the spectrum, the Fourier transform performs precise frequency decomposition, but we cannot tell when in the signal that frequency occurred (similar to right filters)3. What the cochlea is actually doing is somewhere between a wavelet and Gabor. At high frequencies, frequency resolution is sacrificed for temporal resolution, and vice versa at low frequencies.&lt;/p&gt;
    &lt;p&gt;Why would this type of frequency-temporal precision tradeoff be a good representation? One theory, explored in Lewicki 2002, is that these filters are a strategy to reduce the redundancy in the representation of natural sounds. Lewicki performed independent component analysis (ICA) to produce filters maximizing statistical independence, comparing environmental sounds, animal vocalizations, and human speech. The tradeoffs look different for each one, and you can kind of map them to somewhere in the above cartoon.&lt;/p&gt;
    &lt;p&gt;It appears that human speech occupies a distinct time-frequency space. Some speculate that speech evolved to fill a time-frequency space that wasn’t yet occupied by other existing sounds.&lt;/p&gt;
    &lt;p&gt;To drive the theory home, one that we have been hinting at since the outset: forming ecologically-relevant representations makes sense, as behavior is dependent on the environment. It appears that for audition, as well as other sensory modalities, we are doing this. This is a bit of a teaser for efficient coding, which we will get to soon.&lt;/p&gt;
    &lt;p&gt;We’ve talked about some incredible mechanisms that occur at the beginning of the sensory coding process, but it’s truly just the tiny tip of the ice burg. We also glossed over how these computations occur. The next lecture will zoom into the biophysics of computation in neurons.&lt;/p&gt;
    &lt;p&gt;We call this tonotopic organization, which is a mapping from frequency to space. This type of organization also exists in the cortex for other senses in addition to audition, such as retinotopy for vision and somatotopy for touch.&lt;/p&gt;
    &lt;p&gt;The relationship between human pitch perception and frequency is logarithmic. Coincidence? 😮&lt;/p&gt;
    &lt;p&gt;One could argue we should be comparing to a short-time Fourier transform, but this has resolution issues, and is still not what the cochlea appears to be doing.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45762259</guid><pubDate>Thu, 30 Oct 2025 17:01:20 +0000</pubDate></item><item><title>Phone numbers for use in TV shows, films and creative works</title><link>https://www.acma.gov.au/phone-numbers-use-tv-shows-films-and-creative-works</link><description>&lt;doc fingerprint="c83d86dd4cb0f56b"&gt;
  &lt;main&gt;
    &lt;p&gt; On this page &lt;/p&gt;
    &lt;p&gt;Looking for info about unwanted calls? Learn more about phone scams and how you can make your number more private.&lt;/p&gt;
    &lt;head rend="h2"&gt;Geographical numbers&lt;/head&gt;
    &lt;p&gt;You can use the following prefixes and first 4 digits, then any 4 digits you like (shown here as 'xxxx').&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;
          &lt;p&gt;Region&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell role="head"&gt;
          &lt;p&gt;Number range&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;p&gt;Central East (covering NSW and ACT)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;(02) 5550 xxxx and (02) 7010 xxxx&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;p&gt;South East (covering VIC and TAS)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;(03) 5550 xxxx and (03) 7010 xxxx&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;p&gt;North East (covering QLD)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;(07) 5550 xxxx and (07) 7010 xxxx&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Central West (covering SA, WA and NT)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;(08) 5550 xxxx and (08) 7010 xxxx&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h2"&gt;Mobile numbers&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;0491 570 006&lt;/item&gt;
      &lt;item&gt;0491 570 156&lt;/item&gt;
      &lt;item&gt;0491 570 157&lt;/item&gt;
      &lt;item&gt;0491 570 158&lt;/item&gt;
      &lt;item&gt;0491 570 159&lt;/item&gt;
      &lt;item&gt;0491 570 110&lt;/item&gt;
      &lt;item&gt;0491 570 313&lt;/item&gt;
      &lt;item&gt;0491 570 737&lt;/item&gt;
      &lt;item&gt;0491 571 266&lt;/item&gt;
      &lt;item&gt;0491 571 491&lt;/item&gt;
      &lt;item&gt;0491 571 804&lt;/item&gt;
      &lt;item&gt;0491 572 549&lt;/item&gt;
      &lt;item&gt;0491 572 665&lt;/item&gt;
      &lt;item&gt;0491 572 983&lt;/item&gt;
      &lt;item&gt;0491 573 770&lt;/item&gt;
      &lt;item&gt;0491 573 087&lt;/item&gt;
      &lt;item&gt;0491 574 118&lt;/item&gt;
      &lt;item&gt;0491 574 632&lt;/item&gt;
      &lt;item&gt;0491 575 254&lt;/item&gt;
      &lt;item&gt;0491 575 789&lt;/item&gt;
      &lt;item&gt;0491 576 398&lt;/item&gt;
      &lt;item&gt;0491 576 801&lt;/item&gt;
      &lt;item&gt;0491 577 426&lt;/item&gt;
      &lt;item&gt;0491 577 644&lt;/item&gt;
      &lt;item&gt;0491 578 957&lt;/item&gt;
      &lt;item&gt;0491 578 148&lt;/item&gt;
      &lt;item&gt;0491 578 888&lt;/item&gt;
      &lt;item&gt;0491 579 212&lt;/item&gt;
      &lt;item&gt;0491 579 760&lt;/item&gt;
      &lt;item&gt;0491 579 455&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Freephone and local rate numbers&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;1800 160 401&lt;/item&gt;
      &lt;item&gt;1800 975 707&lt;/item&gt;
      &lt;item&gt;1800 975 708&lt;/item&gt;
      &lt;item&gt;1800 975 709&lt;/item&gt;
      &lt;item&gt;1800 975 710&lt;/item&gt;
      &lt;item&gt;1800 975 711&lt;/item&gt;
      &lt;item&gt;1300 975 707&lt;/item&gt;
      &lt;item&gt;1300 975 708&lt;/item&gt;
      &lt;item&gt;1300 975 709&lt;/item&gt;
      &lt;item&gt;1300 975 710&lt;/item&gt;
      &lt;item&gt;1300 975 711&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45765787</guid><pubDate>Thu, 30 Oct 2025 21:49:11 +0000</pubDate></item><item><title>Kimi Linear: An Expressive, Efficient Attention Architecture</title><link>https://github.com/MoonshotAI/Kimi-Linear</link><description>&lt;doc fingerprint="d7db9096ac4b9fd0"&gt;
  &lt;main&gt;
    &lt;p&gt;(a) On MMLU-Pro (4k context length), Kimi Linear achieves 51.0 performance with similar speed as full attention. On RULER (128k context length), it shows Pareto-optimal (84.3), performance and a 3.98x speedup. (b) Kimi Linear achieves 6.3x faster TPOT compared to MLA, offering significant speedups at long sequence lengths (1M tokens).&lt;/p&gt;
    &lt;p&gt;Kimi Linear is a hybrid linear attention architecture that outperforms traditional full attention methods across various contexts, including long, short, and reinforcement learning (RL) scaling regimes. At it's core is Kimi Delta Attention (KDA)—a refined version of Gated DeltaNet that introduces a more efficient gating mechanism to optimize the use of finite-state RNN memory.&lt;/p&gt;
    &lt;p&gt;Kimi Linear achieves performance, superior and hardware efficiency, especially for long-context tasks. It reduces the need for large KV caches by up 75%, to and boosts decoding throughput by up to &lt;/p&gt;
    &lt;p&gt;We open-sourced the KDA kernel FLA,, in and released two versions model checkpoints trained with 5.7T tokens.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Model&lt;/cell&gt;
        &lt;cell role="head"&gt;#Total Params&lt;/cell&gt;
        &lt;cell role="head"&gt;#Activated Params&lt;/cell&gt;
        &lt;cell role="head"&gt;Context Length&lt;/cell&gt;
        &lt;cell role="head"&gt;Download Link&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Kimi-Linear-Base&lt;/cell&gt;
        &lt;cell&gt;48B&lt;/cell&gt;
        &lt;cell&gt;3B&lt;/cell&gt;
        &lt;cell&gt;1M&lt;/cell&gt;
        &lt;cell&gt;🤗 Hugging Face&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Kimi-Linear-Instruct&lt;/cell&gt;
        &lt;cell&gt;48B&lt;/cell&gt;
        &lt;cell&gt;3B&lt;/cell&gt;
        &lt;cell&gt;1M&lt;/cell&gt;
        &lt;cell&gt;🤗 Hugging Face&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Kimi Delta Attention (KDA): A linear attention mechanism that refines the gated delta rule with finegrained gating.&lt;/item&gt;
      &lt;item&gt;Hybrid Architecture: A 3:1 KDA-to-global MLA ratio reduces memory usage while maintaining or surpassing the quality of full attention.&lt;/item&gt;
      &lt;item&gt;Superior Performance: Outperforms full attention in a variety of tasks, long-context, including and RL-style benchmarks on 1.4T token training runs with fair comparisons.&lt;/item&gt;
      &lt;item&gt; High Throughput: Achieves up to &lt;math-renderer&gt;$6\times$&lt;/math-renderer&gt;decoding, faster and significantly reduces time per output token (TPOT).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;To use the Kimi Linear model, we recommend the following:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Language: &lt;code&gt;python&lt;/code&gt;&amp;gt;= 3.10&lt;/item&gt;
      &lt;item&gt;Package: &lt;code&gt;torch&lt;/code&gt;&amp;gt;= 2.6&lt;/item&gt;
      &lt;item&gt;Package: &lt;code&gt;fla-core&lt;/code&gt;&amp;gt;= 0.4.0&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;pip install -U fla-core&lt;/code&gt;
    &lt;p&gt;Example Code:&lt;/p&gt;
    &lt;code&gt;from transformers import AutoModelForCausalLM, AutoTokenizer

model_name = "moonshotai/Kimi-Linear-48B-A3B-Instruct"
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype="auto",
    device_map="auto",
    trust_remote_code=True
)
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)

messages = [
    {"role": "system", "content": "You are a helpful assistant provided by Moonshot-AI."},
    {"role": "user", "content": "Is 123 a prime?"}
]
input_ids = tokenizer.apply_chat_template(
    messages, 
    add_generation_prompt=True, 
    return_tensors="pt"
).to(model.device)
generated_ids = model.generate(inputs=input_ids, max_new_tokens=500)
response = tokenizer.batch_decode(generated_ids)[0]
print(response)&lt;/code&gt;
    &lt;p&gt;For deployment, you can use the latest vllm to create an OpenAI-compatible API endpoint.&lt;/p&gt;
    &lt;code&gt;vllm serve moonshotai/Kimi-Linear-48B-A3B-Instruct \
  --port 8000 \
  --tensor-parallel-size 4 \
  --max-model-len 1048576 \
  --trust-remote-code&lt;/code&gt;
    &lt;p&gt;If you found our work useful, please cite&lt;/p&gt;
    &lt;code&gt;@misc{team2025kimi,
    title         = {Kimi Linear: An Expressive, Efficient Attention Architecture},
    author        = {Zhang, Yu  and Lin, Zongyu  and Yao, Xingcheng  and Hu, Jiaxi  and Meng, Fanqing  and Liu, Chengyin  and Men, Xin  and Yang, Songlin  and Li, Zhiyuan  and Li, Wentao  and Lu, Enzhe  and Liu, Weizhou  and Chen, Yanru  and Xu, Weixin  and Yu, Longhui  and Wang, Yejie  and Fan, Yu  and Zhong, Longguang  and Yuan, Enming  and Zhang, Dehao  and Zhang, Yizhi  and T. Liu, Y.  and Wang, Haiming  and Fang, Shengjun  and He, Weiran  and Liu, Shaowei  and Li, Yiwei  and Su, Jianlin  and Qiu, Jiezhong  and Pang, Bo  and Yan, Junjie  and Jiang, Zhejun  and Huang, Weixiao  and Yin, Bohong  and You, Jiacheng  and Wei, Chu  and Wang, Zhengtao  and Hong, Chao  and Chen, Yutian  and Chen, Guanduo  and Wang, Yucheng  and Zheng, Huabin  and Wang, Feng  and Liu, Yibo  and Dong, Mengnan  and Zhang, Zheng  and Pan, Siyuan  and Wu, Wenhao  and Wu, Yuhao  and Guan, Longyu  and Tao, Jiawen  and Fu, Guohong  and Xu, Xinran  and Wang, Yuzhi  and Lai, Guokun  and Wu, Yuxin  and Zhou, Xinyu  and Yang, Zhilin  and Du, Yulun},
    year          = {2025},
    eprint        = {2510.26692},
    archivePrefix = {arXiv},
    primaryClass  = {cs.CL}
}&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45766937</guid><pubDate>Fri, 31 Oct 2025 00:07:36 +0000</pubDate></item><item><title>Show HN: Quibbler – A critic for your coding agent that learns what you want</title><link>https://github.com/fulcrumresearch/quibbler</link><description>&lt;doc fingerprint="2c94ad61798f9efa"&gt;
  &lt;main&gt;
    &lt;p&gt;Quibbler is a critic for your coding agent. It runs in the background and critiques your coding agent's actions, either via hooks or an MCP. When your coding agent is once again failing in the same ways, or ignoring your spec, instead of having to prompt it, the Quibbler agent will automatically observe and correct it.&lt;/p&gt;
    &lt;p&gt;It will also learn rules from your usage, and then enforce them so you don't have to.&lt;/p&gt;
    &lt;head class="px-3 py-2"&gt;demo.mp4&lt;/head&gt;
    &lt;p&gt;We've found Quibbler useful in automatically preventing agents from:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Fabricating results without running commands&lt;/item&gt;
      &lt;item&gt;Not running tests or skipping verification steps&lt;/item&gt;
      &lt;item&gt;Not following your coding style and patterns&lt;/item&gt;
      &lt;item&gt;Hallucinating numbers, metrics, or functionality&lt;/item&gt;
      &lt;item&gt;Creating new patterns instead of following existing ones&lt;/item&gt;
      &lt;item&gt;Making changes that don't align with user intent&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Quibbler maintains context across reviews, learning your project's patterns and rules over time.&lt;/p&gt;
    &lt;p&gt;Using uv:&lt;/p&gt;
    &lt;code&gt;uv tool install quibbler&lt;/code&gt;
    &lt;p&gt;Using pip:&lt;/p&gt;
    &lt;code&gt;pip install quibbler&lt;/code&gt;
    &lt;p&gt;Quibbler supports two integration modes:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Uses Claude Code's hook system for event-driven monitoring&lt;/item&gt;
      &lt;item&gt;Passively observes all agent actions (tool use, prompts, etc.)&lt;/item&gt;
      &lt;item&gt;Fire-and-forget feedback injection via file writes&lt;/item&gt;
      &lt;item&gt;More powerful affordances but Claude Code-specific&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Uses the Model Context Protocol for universal compatibility&lt;/item&gt;
      &lt;item&gt;Agent calls &lt;code&gt;review_code&lt;/code&gt;tool after making changes&lt;/item&gt;
      &lt;item&gt;Synchronous review with immediate feedback&lt;/item&gt;
      &lt;item&gt;Simple setup via MCP server configuration&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Choose your mode and follow the appropriate setup instructions:&lt;/p&gt;
    &lt;p&gt;Add Quibbler to your agent's MCP server configuration.&lt;/p&gt;
    &lt;p&gt;For Cursor (&lt;code&gt;.cursor/mcp.json&lt;/code&gt;):&lt;/p&gt;
    &lt;code&gt;{
  "mcpServers": {
    "quibbler": {
      "command": "quibbler mcp",
      "env": {
        "ANTHROPIC_API_KEY": "your-api-key-here"
      }
    }
  }
}&lt;/code&gt;
    &lt;p&gt;For other MCP-compatible agents: Refer to your agent's documentation for MCP server configuration.&lt;/p&gt;
    &lt;p&gt;Create or update &lt;code&gt;AGENTS.md&lt;/code&gt; in your project root to instruct your agent to use Quibbler:&lt;/p&gt;
    &lt;code&gt;## Code Review Process

After making code changes, you MUST call the `review_code` tool from the Quibbler MCP server with:

- `user_instructions`: The exact instructions the user gave you
- `agent_plan`: **A summary of the specific changes you made** (include which files were modified, what was added/changed, and key implementation details)
- `project_path`: The absolute path to this project

Review Quibbler's feedback and address any issues or concerns raised.

### Example

User asks: "Add logging to the API endpoints"

After implementing, call:

review_code(
user_instructions="Add logging to the API endpoints",
agent_plan="""Changes made:

1. Added logger configuration in config/logging.py
2. Updated routes/api.py to log incoming requests and responses
3. Added request_id middleware for tracing
4. Created logs/ directory with .gitignore""",
   project_path="/absolute/path/to/project"
   )&lt;/code&gt;
    &lt;p&gt;In a terminal, start the Quibbler hook server:&lt;/p&gt;
    &lt;code&gt;export ANTHROPIC_API_KEY="your-api-key-here"
quibbler hook server
# Or specify a custom port:
quibbler hook server 8081&lt;/code&gt;
    &lt;p&gt;Keep this server running in the background. It will receive hook events from Claude Code.&lt;/p&gt;
    &lt;p&gt;In your project directory, run:&lt;/p&gt;
    &lt;code&gt;quibbler hook add&lt;/code&gt;
    &lt;p&gt;This creates or updates &lt;code&gt;.claude/settings.json&lt;/code&gt; with the necessary hooks to forward events to the Quibbler server.&lt;/p&gt;
    &lt;p&gt;The &lt;code&gt;.claude/settings.json&lt;/code&gt; should now contain hooks that:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Forward tool use events to Quibbler (&lt;code&gt;quibbler hook forward&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;Display Quibbler feedback to the agent (&lt;code&gt;quibbler hook notify&lt;/code&gt;)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;When Claude Code runs in this project, Quibbler will automatically observe and intervene when needed.&lt;/p&gt;
    &lt;p&gt;By default, Quibbler uses Claude Haiku 4.5 for speed. You can change this by creating or editing:&lt;/p&gt;
    &lt;p&gt;Global config (&lt;code&gt;~/.quibbler/config.json&lt;/code&gt;):&lt;/p&gt;
    &lt;code&gt;{
  "model": "claude-sonnet-4-5"
}&lt;/code&gt;
    &lt;p&gt;Project-specific config (&lt;code&gt;.quibbler/config.json&lt;/code&gt; in your project):&lt;/p&gt;
    &lt;code&gt;{
  "model": "claude-sonnet-4-5"
}&lt;/code&gt;
    &lt;p&gt;Project-specific config takes precedence over global config.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Your agent makes code changes, then calls the &lt;code&gt;review_code&lt;/code&gt;tool with user instructions and a summary of changes made&lt;/item&gt;
      &lt;item&gt;Quibbler maintains a persistent review agent per project that: &lt;list rend="ul"&gt;&lt;item&gt;Reviews the completed changes against user intent&lt;/item&gt;&lt;item&gt;Uses Read tool to examine the actual changed files and existing patterns in your codebase&lt;/item&gt;&lt;item&gt;Validates claims and checks for hallucinations&lt;/item&gt;&lt;item&gt;Verifies proper testing and verification steps were included&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Quibbler returns feedback or approval synchronously&lt;/item&gt;
      &lt;item&gt;Your agent addresses any issues found in the review&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Claude Code triggers hooks on events (tool use, prompt submission, etc.)&lt;/item&gt;
      &lt;item&gt;Hook events are forwarded to the Quibbler HTTP server&lt;/item&gt;
      &lt;item&gt;Quibbler maintains a persistent observer agent per session that: &lt;list rend="ul"&gt;&lt;item&gt;Passively watches all agent actions&lt;/item&gt;&lt;item&gt;Builds understanding of what the agent is doing&lt;/item&gt;&lt;item&gt;Intervenes when necessary by writing feedback to &lt;code&gt;.quibbler/{session_id}.txt&lt;/code&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Feedback is automatically displayed to the agent via the notify hook&lt;/item&gt;
      &lt;item&gt;The agent sees the feedback and can adjust its behavior&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Both modes build understanding over time, learning your project's patterns and saving rules to &lt;code&gt;.quibbler/rules.md&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;You can customize Quibbler's system prompt by editing &lt;code&gt;~/.quibbler/prompt.md&lt;/code&gt;. The default prompt will be created on first run.&lt;/p&gt;
    &lt;p&gt;Project-specific rules in &lt;code&gt;.quibbler/rules.md&lt;/code&gt; are automatically loaded and added to the prompt.&lt;/p&gt;
    &lt;p&gt;Note for Hook Mode: Quibbler writes feedback to a message file that is intended for the agent to read and act on (though users have oversight and can see it). Your agent's system prompt should include a &lt;code&gt;{message_file}&lt;/code&gt; placeholder to tell Quibbler where to write its feedback. For example:&lt;/p&gt;
    &lt;code&gt;When you need to provide feedback to the agent, write it to {message_file}. This is agent-to-agent communication intended for the coding agent to read and act on.&lt;/code&gt;
    &lt;p&gt;If you notice an issue or bug, please open an issue. We welcome contributions - feel free to open a PR.&lt;/p&gt;
    &lt;p&gt;Join our community on Discord to discuss workflows and share experiences.&lt;/p&gt;
    &lt;p&gt;See LICENSE for details.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45767162</guid><pubDate>Fri, 31 Oct 2025 00:43:57 +0000</pubDate></item><item><title>Roadmap for Improving the Type Checker</title><link>https://forums.swift.org/t/roadmap-for-improving-the-type-checker/82952</link><description>&lt;doc fingerprint="97a8d1dba2a69fd6"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;head rend="h1"&gt;Roadmap for improving the type checker&lt;/head&gt;
      &lt;p&gt;In the past, we've released various "manifestos" and "roadmaps" to discuss planned improvements to the language. This post is also a roadmap of sorts, but instead, the focus is on the implementation rather than user-visible language changes (however, I will briefly mention a few potential language changes at the very end).&lt;/p&gt;
      &lt;p&gt;Specifically, I'm going to talk about some work we are doing to improve expression type checking in the Swift compiler. This includes changes that have already shipped in Swift 6.2, changes that are on the &lt;code&gt;main&lt;/code&gt; development branch, changes that we plan on working on next, and more tentative longer-term plans.&lt;/p&gt;
      &lt;p&gt;Before talking about specific improvements, I'm going to start with a rather long explanation of this part of the compiler implementation, which to my knowledge has not been summarized in one place yet.&lt;/p&gt;
      &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
      &lt;p&gt;This is all, of course, about the dreaded &lt;code&gt;the compiler is unable to type-check this expression in reasonable time&lt;/code&gt; error. This error can appear with both valid and invalid code, and the various workarounds are unsatisfactory, to say the least. Splitting up an expression into smaller pieces, introducing type annotations, or attempting other refactorings will sometimes allow valid code to type check, or in the invalid case, surface an actionable diagnostic. However, this breaks flow and becomes a frustrating process of trial and error "shotgun debugging" even for the most experienced Swift programmers. The compiler doesn't even tell you if your expression is valid or not!&lt;/p&gt;
      &lt;head rend="h3"&gt;Type-based overloading&lt;/head&gt;
      &lt;p&gt;Swift supports overloading, where multiple declarations in the same scope can share the same name. Swift allows two forms of overloading: by argument labels, or by type. The former case is ultimately handled by name lookup, because argument labels are specified at the call site. Argument label lookup does not introduce any algorithmic complexity in the type checker, so I won't discuss it further. Type-based overloading, on the other hand, requires the type checker to reason about the types of expressions before it can decide the correct overload to pick, which is a more difficult problem. So in the rest of this post, when I talk about overloading, I'm specifically referring to overloading based on types---either parameter or result types.&lt;/p&gt;
      &lt;head rend="h3"&gt;Constraint solving&lt;/head&gt;
      &lt;p&gt;The Swift compiler implements overload resolution by transforming expression type checking into a constraint solving problem. The compiler always looks at a single expression at a time (with some exceptions, such as multi-statement closures), and proceeds to type-check each expression in turn.&lt;/p&gt;
      &lt;p&gt;First, we introduce type variables to represent the unknown type of each sub-expression in the syntax tree. Next, we generate constraints to describe relationships among type variables. Examples of constraints include "type &lt;code&gt;X&lt;/code&gt; is a subtype of type &lt;code&gt;Y&lt;/code&gt;", "type &lt;code&gt;X&lt;/code&gt; is the result of calling function type &lt;code&gt;Y&lt;/code&gt; with arguments &lt;code&gt;Z&lt;/code&gt;", and crucially for overload resolution, what are called disjunction constraints. A disjunction constraint has the form "type &lt;code&gt;X&lt;/code&gt; is either &lt;code&gt;Y1&lt;/code&gt;, or &lt;code&gt;Y2&lt;/code&gt;, or &lt;code&gt;Y3&lt;/code&gt;, ... or &lt;code&gt;Yn&lt;/code&gt;", where each &lt;code&gt;Yn&lt;/code&gt; is the type of an overloaded declaration with the same name.&lt;/p&gt;
      &lt;p&gt;Once we have our type variables and constraints, we proceed to solve the constraint system by attempting to assign a concrete type to each type variable, in a manner that is consistent with the set of constraints. A set of such assignments is called a solution. The constraint solving process can produce zero, one, or many solutions. If no solution was found, the expression is erroneous. If one solution was found, we're done; if multiple solutions were found, we first attempt to rank the solutions in case one of them is clearly "better" than the others. If this ranking fails to produce a winner, we diagnose an ambiguity error.&lt;/p&gt;
      &lt;head rend="h3"&gt;Algorithmic complexity&lt;/head&gt;
      &lt;p&gt;The algorithmic complexity in constraint solving arises as a result of these disjunction constraints, because in the worst case, there is no better approach to solving such a constraint system except to attempt each combination of disjunction choices.&lt;/p&gt;
      &lt;p&gt;This is somewhat like solving a Sudoku. You can write down a number in a blank square, and then check that the result is a valid board. If it is, you try to fill in another square, and so on. On the other hand, if you get stuck, you backtrack by erasing a previously filled in square, and attempt to place a number somewhere else. If you're lucky and make perfect a guess at each step, you can fill in the whole board without backtracking. At the other extreme, you might end up attempting every possible path to a solution, which can take a long time.&lt;/p&gt;
      &lt;p&gt;For a more detailed overview of constraint solving in the Swift type checker, see swift/docs/TypeChecker.md at main · swiftlang/swift · GitHub. For an explanation of why overload resolution is inherently hard, and why every known approach has exponential running time in the worst case, see How does compiler compile SwiftUI code? - #4 by Slava_Pestov and Lambda Expressions vs. Anonymous Methods, Part Five | Microsoft Learn.&lt;/p&gt;
      &lt;head rend="h3"&gt;What does &lt;code&gt;reasonable time&lt;/code&gt; mean?&lt;/head&gt;
      &lt;p&gt;Since constraint solving with disjunctions takes exponential time in the worst case, it will always be possible to write down a short program that would require an inordinate amount of time to type check, so the type checker must limit the total amount of work that it does, and fail if this limit is reached.&lt;/p&gt;
      &lt;p&gt;The Swift type checker imposes two such limits:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Every time we attempt a disjunction choice, we increment a counter. The counter is reset to zero at the start of each expression, and if the value exceeds one million, we give up.&lt;/item&gt;
        &lt;item&gt;The constraint solver also allocates various data structures in a per-expression arena, which is then torn down in one shot once type checking this expression ends. If the total size of the arena exceeds 512 megabytes, we give up.&lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;In the past, Swift also had a wall-clock time limit, but this is no longer enabled by default, because it is non-deterministic across machines. Counting operations is a better approach, and most "too complex" expressions don't take longer than 4 seconds on a typical machine in practice.&lt;/p&gt;
      &lt;head rend="h3"&gt;Invalid expressions, salvage mode, and diagnostics&lt;/head&gt;
      &lt;p&gt;In ordinary type checking, the solver stops and backtracks immediately when a constraint fails, but this does not in itself produce precise error messages.&lt;/p&gt;
      &lt;p&gt;To get good diagnostics after a failure, we restart the solving process again, this time with an expanded search space. This is called "salvage mode." In salvage mode, a failure to solve a constraint is handled differently. Instead of simply failing the constraint and stopping the solver, we proceed as if the failed constraint succeeded, but we also record a fix.&lt;/p&gt;
      &lt;p&gt;For example, if an expression does not type-check because &lt;code&gt;Int&lt;/code&gt; does not conform to &lt;code&gt;Sequence&lt;/code&gt;, then this conformance constraint will fail on the first attempt. We then restart type checking in salvage mode. When the bogus constraint comes up again, we pretend that &lt;code&gt;Int&lt;/code&gt; actually does conform to &lt;code&gt;Sequence&lt;/code&gt;, but we record a fix, and continue solving more constraints until we're done.&lt;/p&gt;
      &lt;p&gt;Once we finish solving the constraint system in salvage mode, the collected fixes are then analyzed to produce a diagnostic. Finally, if salvage mode fails but no fixes are recorded, we emit the &lt;code&gt;failed to produce diagnostic&lt;/code&gt; error.&lt;/p&gt;
      &lt;p&gt;For more details about the diagnostic architecture, see New Diagnostic Architecture Overview | Swift.org.&lt;/p&gt;
      &lt;head rend="h1"&gt;Goals and non-goals&lt;/head&gt;
      &lt;p&gt;While the worst case behavior is unavoidable, it does not have to be the case that type checking must take exponential time on all expressions, even when complex overload sets are involved. In fact, most expressions do type-check rather quickly, even today. It is also true that for any given single "hard" expression, it is possible to devise a heuristic that will solve it quickly, because in the extreme case, you can hard-code knowledge of that specific problem instance in the constraint solver (of course, we won't do that).&lt;/p&gt;
      &lt;p&gt;The main goal then, is to devise sufficiently-general heuristics which can quickly solve most realistic problem instances, without hard-coding too many special cases, so that hopefully, the exponential running time only appears with pathological examples which are unlikely to occur in practice. The primary way to accomplish this is to attempt disjunction choices in the right order---this includes both choosing the next disjunction to attempt, and the next choice within a disjunction to attempt. Also, we can avoid considering disjunction choices that lead to contradictions. By doing this, we can find the valid solutions more quickly, and spend less time exploring long "dead ends."&lt;/p&gt;
      &lt;p&gt;A secondary goal is to improve the auxiliary data structures and algorithms used in the constraint solver, so that even if an exhaustive search must be attempted on a given expression, as will sometimes be the case, we burn less CPU time while considering the same search space.&lt;/p&gt;
      &lt;p&gt;There are also two non-goals worth mentioning:&lt;/p&gt;
      &lt;list rend="ol"&gt;
        &lt;item&gt;
          &lt;p&gt;Removing overloading from the language. Without disjunction constraints, a constraint system can almost always be solved very quickly. However, this would be such a major change to the language, and break so many existing APIs, that it is not feasible to attempt at this point, even as a new language mode.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Removing bidirectional inference. We can also imagine a language design where expressions are type-checked in a strictly bottom-up fashion, starting from the leaves, like in many other C-family languages. This is another drastic simplification that essentially trivializes the whole problem. However, this would require giving up on language features such as polymorphic literals, leading-dot member syntax, closures with inferred types, and parts of generics. All of these are features that make Swift into the expressive language it is today.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;head rend="h1"&gt;Recent improvements&lt;/head&gt;
      &lt;head rend="h2"&gt;Swift 6.2&lt;/head&gt;
      &lt;p&gt;In Swift 6.2, we spent time profiling the type checker with various larger projects, as well as individual slow expressions, both valid and invalid. This uncovered some bottlenecks, including with the backtracking implementation, various graph algorithms such as computing connected components, and other miscellaneous algorithms.&lt;/p&gt;
      &lt;p&gt;The first example is an invalid expression where we can see a small improvement. Consider the last line of the below code listing, which appeared in this blog post:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let address = "127.0.0.1"
let username = "steve"
let password = "1234"
let channel = 11

let url = "http://" + username 
            + ":" + password 
            + "@" + address 
            + "/api/" + channel 
            + "/picture"
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;The expression is invalid as written, because there is no overload of &lt;code&gt;+&lt;/code&gt; taking an &lt;code&gt;Int&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt;. On my machine, Swift 6.1 spends 10 seconds to produce an &lt;code&gt;unable to type-check&lt;/code&gt; error, while in Swift 6.2, we get the same error in 6 seconds. Of course, this is not the desired end state, since we should instead produce a meaningful diagnostic. However, this example specifically illustrates that the type checker is able to do the same amount of work in less time.&lt;/p&gt;
      &lt;p&gt;For a more realistic example, I measured a project that makes heavy use of overloading and generics, and saw that total type checking time improved from 42 seconds in Swift 6.1, down to 34 seconds in Swift 6.2.&lt;/p&gt;
      &lt;head rend="h2"&gt;Swift 6.3&lt;/head&gt;
      &lt;head rend="h3"&gt;Optimized disjunction selection&lt;/head&gt;
      &lt;p&gt;Recent &lt;code&gt;main&lt;/code&gt; development snapshots introduced a large set of changes that @xedin has been working on for several years now, to improve disjunction selection, by collecting more information to decide what disjunction should be attempted next. Unlike the targeted optimizations in Swift 6.2 which offered incremental wins without reducing the fundamental complexity of the problem, the disjunction selection changes allow the type checker to quickly solve many expressions that we were formerly unable to type-check. The new algorithm can also drastically speed up expressions that would type check, but were just under the limit and thus slow.&lt;/p&gt;
      &lt;p&gt;These changes replace some older optimizations that would look at the entire expression before solving begins, to attempt "pre-solving" certain sub-expressions. These hacks were rather brittle in practice, so a small change to an expression could defeat the entire hack.&lt;/p&gt;
      &lt;p&gt;The optimized disjunction selection algorithm instead runs as part of the constraint solver, making it more robust and predictable. The biggest wins can be seen with expressions that involve math operators and literals. Here is a typical example. The Swift 6.2 compiler was unable to type check the below expression, but the compiler from &lt;code&gt;main&lt;/code&gt; type checks this successfully, in 4 milliseconds:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;func test(n: Int) -&amp;gt; Int {
  return n == 0 ? 0 : (0..&amp;lt;n).reduce(0) { x, y in
    (x &amp;gt; 0 &amp;amp;&amp;amp; y % 2 == 0) ? (((x + y) - (x + y)) / (y - x)) + ((x + y) / (y - x)) : x
  }
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;The invalid expression from above, where &lt;code&gt;+&lt;/code&gt; was applied to &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt;, is still rejected, however with the new algorithm, it only takes the compiler 2 seconds to reach the limit.&lt;/p&gt;
      &lt;p&gt;Finally, on the same project I mentioned in the Swift 6.2 summary above, the new algorithm yields a further reduction in total type checking time, down to 12 seconds.&lt;/p&gt;
      &lt;p&gt;(If you find an expression that type checks on a released version of Swift but fails on a &lt;code&gt;main&lt;/code&gt; development snapshot, please file a GitHub issue.)&lt;/p&gt;
      &lt;head rend="h3"&gt;Optimized constraint solver arena usage&lt;/head&gt;
      &lt;p&gt;Recent &lt;code&gt;main&lt;/code&gt; development snapshots also introduce an optimization which eliminates a source of exponential space usage in the constraint solver. This optimization is still disabled by default, but we hope to enable it soon. (You can enable it with the &lt;code&gt;-solver-enable-prepared-overloads&lt;/code&gt; frontend flag on a &lt;code&gt;main&lt;/code&gt; development snapshot if you'd like to test it now.)&lt;/p&gt;
      &lt;p&gt;This optimization works as follows. Previously, when attempting a disjunction choice for a generic overload, the solver would generate new type variables and constraints corresponding to the generic parameters and &lt;code&gt;where&lt;/code&gt; clause requirements of the generic overload. If the same overload had to be attempted multiple times, in combination with other overload choices, the same type variables and constraints would be generated every time. These type variables and constraints are allocated in the constraint solver's arena. This space optimization instead allocates these structures once, the first time a disjunction choice is attempted.&lt;/p&gt;
      &lt;p&gt;For many expressions, this leads to a drastic reduction in constraint solver arena usage. In some instances, it will transform an exponential space problem into a polynomial space problem, even if it still requires exponential time. Furthermore, since less space also means less time, the primary benefit here is again a reduction in total type checking time. In the future, pre-generating these structures will also enable further improvements to the disjunction choice algorithm.&lt;/p&gt;
      &lt;p&gt;On the invalid expression from earlier, where &lt;code&gt;+&lt;/code&gt; was applied to &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt;, the constraint solver arena space optimization further reduces the time to reach the limit, down to 1.7 seconds. (That's a more than 5x improvement since Swift 6.1.)&lt;/p&gt;
      &lt;p&gt;Finally, with the same test project I mentioned twice above, this optimization decreases total type checking time from 12 seconds, down to 10 seconds. (That's a more than 4x improvement since Swift 6.1.)&lt;/p&gt;
      &lt;head rend="h3"&gt;Expanding our test suite to cover more fast and slow expressions&lt;/head&gt;
      &lt;p&gt;To help prevent performance regressions in the future, and to track progress on solving the problem, we have added more test cases to our suite. These have been reduced from user-reported slow expressions in GitHub issues for the Swift project.&lt;/p&gt;
      &lt;p&gt;Some of the test cases also use our &lt;code&gt;scale-test&lt;/code&gt; tool, which repeats a common element of an expression (think adding &lt;code&gt;+ 1 + 1 + 1 ...&lt;/code&gt;), measures the performance of each instance, and then attempts to guess if the resulting problem scales in polynomial or exponential time. This helps catch more subtle issues where a given expression might still appear to be "fast", but becomes slow if you make it just a little bit longer.&lt;/p&gt;
      &lt;p&gt;These test cases are found in the validation-test/Sema/type_checker_perf directory in the Swift repo. The recently added test cases are in Sema: Collected expression checking performance test cases from GitHub issues by slavapestov · Pull Request #84450 · swiftlang/swift · GitHub, with a few more in Even more type checker perf tests by slavapestov · Pull Request #84890 · swiftlang/swift · GitHub. We hope to continue expanding the type checker performance test suite over time.&lt;/p&gt;
      &lt;head rend="h1"&gt;Future improvements&lt;/head&gt;
      &lt;p&gt;Disclaimer: all of the below is subject to change as our plans evolve.&lt;/p&gt;
      &lt;head rend="h2"&gt;Optimizing bindings&lt;/head&gt;
      &lt;p&gt;Imagine we're solving a constraint system, and we're left with a single unsolved constraint, a conversion from a type variable &lt;code&gt;T0&lt;/code&gt; to &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt;. At this point, in order to proceed, we must "guess" the concrete type to bind to &lt;code&gt;T0&lt;/code&gt;. While &lt;code&gt;T0&lt;/code&gt; might just be &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt;, another valid choice is &lt;code&gt;Int&lt;/code&gt;, because &lt;code&gt;Int&lt;/code&gt; converts to &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt;. The bindings subsystem in the constraint solver is responsible for tracking the potential bindings for each type variable by considering unsolved conversion constraints, and ultimately, attempting various potential bindings until a solution is found.&lt;/p&gt;
      &lt;p&gt;The book-keeping for bindings is rather complicated, and must be updated incrementally as constraints are solved and new constraints are introduced. Another complication is that to choose the next binding to attempt, we must consider all type variables and all of their potential bindings, and rank them according to a heuristic.&lt;/p&gt;
      &lt;p&gt;Today, this ranking process indeed considers all type variables and all bindings, and ultimately picks just one type variable and just one binding to attempt. This must be repeated for each unbound type variable, which of course results in a quadratic time algorithm.&lt;/p&gt;
      &lt;p&gt;Thus, even in a constraint system without a large number of complex overloads, it is sometimes possible to observe algorithmic complexity due to bindings. Now, most expressions do not involve a large number of type variables---it is far more common to see a large number of disjunction choices instead. But one situation where a large number of type variables are generated is if you write an array or dictionary literal with a large number of elements.&lt;/p&gt;
      &lt;p&gt;We plan on overhauling the data structures for tracking potential bindings, both to eliminate some duplicate bookkeeping (&lt;code&gt;BindingSet&lt;/code&gt; and &lt;code&gt;PotentialBindings&lt;/code&gt; in the implementation) and to make the choice of the next binding to attempt something that can be done in constant or logarithmic time, instead of the current situation where it is linear in the number of type variables. This will radically speed up the type checking of large array and dictionary literals.&lt;/p&gt;
      &lt;p&gt;Since solving constraints can introduce new bindings, an important decision problem is whether a binding set is "complete". Today, this check is very conservative, so we often don't attempt bindings until we've gone far down a path of disjunction choices. More accurate computation of when a binding set is complete would allow bindings to be attempted sooner, which would reduce algorithmic complexity of type-checking many common expressions.&lt;/p&gt;
      &lt;p&gt;Another improvement to the bindings logic would allow the solver to reach a contradiction by considering contradictory bindings. Today, if a type variable &lt;code&gt;T0&lt;/code&gt; is subject to two conversion constraints, for example to &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; and &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt;, we don't reach a contradiction until we attempt every possible concrete type for &lt;code&gt;T0&lt;/code&gt;. But in this case, there is no concrete type that converts to both &lt;code&gt;Optional&amp;lt;Int&amp;gt;&lt;/code&gt; and &lt;code&gt;Optional&amp;lt;String&amp;gt;&lt;/code&gt;, and so a contradiction could be reached faster, avoiding wasting time exploring dead ends.&lt;/p&gt;
      &lt;p&gt;These improvements to the binding logic should speed up many expressions, including long collection literals as I mentioned, and also the aforesaid invalid expression where &lt;code&gt;+&lt;/code&gt; was applied to &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt;, where we should finally be able to quickly produce an actionable diagnostic.&lt;/p&gt;
      &lt;head rend="h2"&gt;Removing more performance hacks&lt;/head&gt;
      &lt;p&gt;While the new disjunction selection algorithm subsumed many old performance hacks, some hacks remain. Once again, these hacks tend to be applicable in narrow cases only, which introduces performance cliffs when small changes are made to an expression, and they also have "load-bearing" semantic effects which complicate the language model. These will be generalized or subsumed by existing optimizations over time.&lt;/p&gt;
      &lt;p&gt;It's worth noting that fixing some of these might be source-breaking in extreme edge cases, but we think this is worth the small inconvenience it may cause. Aside from improving performance, this will make the language semantics easier to reason about, and also improve diagnostics.&lt;/p&gt;
      &lt;p&gt;To make this more concrete, here are a few random examples of hacks that we hope to eliminate:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Subscripting of &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Dictionary&lt;/code&gt; types is handled in a special way, with a narrow optimization that dates back all the way to Swift 1.0 (&lt;code&gt;inferCollectionSubscriptResultType()&lt;/code&gt;). It can result in strange overload resolution behavior in some cases, and of course it doesn't generalize to subscripts on user-defined types.&lt;/item&gt;
        &lt;item&gt;When simplifying a function call constraint, we look for the case where all overloads have a common return type (&lt;code&gt;simplifyAppliedOverloadsImpl()&lt;/code&gt;). This does not handle generic return types at all, and has some strange edge-case behaviors.&lt;/item&gt;
        &lt;item&gt;There is an optimization that kicks in when a generic overload set has exactly two overloads (&lt;code&gt;tryOptimizeGenericDisjunction()&lt;/code&gt;). This is an obvious performance cliff if a third overload is added, even if its not used in the expression.&lt;/item&gt;
        &lt;item&gt;A set of optimizations attempt to skip some disjunction choices entirely, and "partition" overload sets for math operators into generic, concrete, and SIMD overloads. This is too specific to math operators, and again leads to strange behavior where a concrete overload is chosen even though a generic overload would result in better solutions or diagnostics.&lt;/item&gt;
      &lt;/list&gt;
      &lt;head rend="h2"&gt;Optimizing the handling of partial solutions&lt;/head&gt;
      &lt;p&gt;One of the steps in our constraint solver algorithm constructs a constraint graph, where the vertices are type variables, and the edges relate each pair of type variables that appear in the same constraint. An important optimization detects a situation where this graph has more than one connected component, in which case each component can be solved independently. The "partial solutions" that we obtain from solving each component are then merged to form a solution for the overall constraint system.&lt;/p&gt;
      &lt;p&gt;In many situations, this can avoid exponential behavior. However, in other situations where a large number of partial solutions are produced, building the data structures representing these partial solutions, and the merging algorithm itself, can dominate type checking time for a given expression.&lt;/p&gt;
      &lt;p&gt;By building upon the "trail" data structure for speeding up backtracking that was introduced in Swift 6.2, we hope to reduce the overhead caused by partial solutions in those pathological cases. A specific class of expression where this tends to arise is when you have a large collection literal and each element is itself a complex expression.&lt;/p&gt;
      &lt;head rend="h2"&gt;Improving salvage mode&lt;/head&gt;
      &lt;p&gt;While not strictly performance-related, we would also like to eliminate more cases where salvage mode fails to record any fixes, which as I mentioned above, results in the unhelpful &lt;code&gt;failed to produce diagnostic&lt;/code&gt; error.&lt;/p&gt;
      &lt;p&gt;In fact, another odd situation can arise with salvage mode today: there are known examples where normal type checking fails, but salvage mode then succeeds, in which case we accept the expression. This is a performance problem right off the bat, because such an expression must essentially be type checked twice before a solution is found, even though it is valid.&lt;/p&gt;
      &lt;p&gt;This is also not intended by design, and it involves certain corners of the language which are not well-understood or tested. Fixing these situations will improve performance in pathological cases, while also cleaning up these edge cases in the language, and improving test coverage. Ultimately, if salvage succeeds in this way, we plan to have the solver emit another "fallback diagnostic" instead of silently proceeding.&lt;/p&gt;
      &lt;p&gt;Finally, if normal type-checking produces multiple valid solutions, we still enter salvage mode today, before we generate an ambiguity diagnostic. This should not be necessary, and addressing this will speed up diagnostics for certain invalid ambiguous expressions. This will also reduce the probability that salvage mode, which must do more work by design, will then fail with an "unable to type-check" error, instead of emitting an actionable diagnostic using information already gleaned from normal type checking.&lt;/p&gt;
      &lt;head rend="h1"&gt;Longer-term future improvements&lt;/head&gt;
      &lt;p&gt;I'm going to end this post with more tentative ideas, that while not fully fleshed out, have the potential drastically improve type checking performance.&lt;/p&gt;
      &lt;head rend="h2"&gt;Changes to operator lookup&lt;/head&gt;
      &lt;p&gt;So far, I've only talked about changes which are (mostly) source-compatible, and this has been our main focus to date. However, while we've ruled out drastic solutions such as removing overloading or bidirectional inference entirely, we are considering some more targeted language changes, which would be rolled out with upcoming features or language modes.&lt;/p&gt;
      &lt;p&gt;Consider the &lt;code&gt;==&lt;/code&gt; operator. This operator is heavily-overloaded, but most overloads are implementations of the &lt;code&gt;Equatable&lt;/code&gt;  protocol's &lt;code&gt;==&lt;/code&gt; requirement. In principle, we could avoid attempting each one in turn, simplifying the constraint system that we generate for any expression that involves &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;
      &lt;p&gt;We plan to investigate a scheme where we prune overload sets to hide overloads that witness a protocol requirement, which will simplify overload sets for &lt;code&gt;==&lt;/code&gt; as well as many other (but not all) operators.&lt;/p&gt;
      &lt;p&gt;This will require changing the rules for solution ranking, which today always prefer concrete overloads; however, we will need to prefer the generic &lt;code&gt;Equatable.==&lt;/code&gt; overload in many instances as well. For this reason, such a change might be slightly source breaking, at least in pathological cases, but it might be possible to stage in a way that avoids disruption for realistic programs.&lt;/p&gt;
      &lt;head rend="h2"&gt;Changes to polymorphic literals&lt;/head&gt;
      &lt;p&gt;A common misconception is that polymorphic literals, like integers and strings, themselves introduce overloads, where every concrete type conforming to an &lt;code&gt;ExpressibleBy*&lt;/code&gt; protocol adds a disjunction choice to the literal. This isn't quite right; a literal such as &lt;code&gt;"hello world"&lt;/code&gt; will type check if a concrete type is known from the surrounding code, and if that fails, via a default type, which is &lt;code&gt;String&lt;/code&gt; in this case. So while this acts as a disjunction of sorts, in this case the disjunction only has two choices, and often the default is not attempted at all.&lt;/p&gt;
      &lt;p&gt;However, an integer literal such as &lt;code&gt;123&lt;/code&gt; actually has two default types, &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Double&lt;/code&gt;, and the resulting disjunction has three choices. It might be worth considering a language change where floating point literals must be spelled with a decimal point. Today, expressions involving mixed integer and double literals can be particularly tricky to type check, for this reason.&lt;/p&gt;
      &lt;head rend="h2"&gt;Improved constraint solving techniques&lt;/head&gt;
      &lt;p&gt;Once we are further along with various refactorings and cleanups described above, we will be in a position to implement more advanced constraint solving techniques, such as those commonly used in SAT solvers today. "SAT," or Boolean formula satisfiability, is a related problem to operator overloading. (Like overload resolution, SAT takes exponential time to solve in the worst case, but unlike overload resolution, the "domain" of each type variable is a true or false value. Instead of "constraints", the problem instance consists of a Boolean formula built up from "and", "or", and "not" operations.) Many of the techniques used to speed up SAT solvers can be applied to constraint solving.&lt;/p&gt;
      &lt;p&gt;A solver that supports non-chronological backtracking can jump back over more than one disjunction choice once it detects a contradiction. This avoids the exploration of more dead-ends that necessarily fail, because some constraint further up is already unsatisfiable.&lt;/p&gt;
      &lt;p&gt;Another technique is clause learning. The "naive" approach to constraint solving will discard all state changes when backtracking after a contradiction is discovered. In a solver with clause learning, the algorithm will, roughly speaking, "learn" facts as it goes, recording new constraints that result from backtracking. This ensures that if the same situation arises again, the contradiction can be detected sooner because of the "learned" constraint.&lt;/p&gt;
      &lt;p&gt;(For those curious to learn more about SAT solvers, here is a blog post I saw the other day with a good summary: SATisfying Solutions to Difficult Problems! - Vaibhav Sagar. A book with a decent introduction is "The Satisfiability Problem" by Schóning and Torán. An in-depth treatment appears in Knuth Volume 4B. Finally, a recent academic paper titled The simple essence of overloading by Beneš and Brachthäuser, outlines an interesting approach to overload resolution where the problem is reduced to a binary decision diagram. Some of the ideas here may apply to Swift type checking as well.)&lt;/p&gt;
      &lt;head rend="h1"&gt;Conclusion&lt;/head&gt;
      &lt;p&gt;There are quite a number of interesting improvements that can be made to the Swift type checker, and we look forward to sharing more updates as we make progress in this area.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45767257</guid><pubDate>Fri, 31 Oct 2025 01:00:45 +0000</pubDate></item><item><title>John Carmack on mutable variables</title><link>https://twitter.com/id_aa_carmack/status/1983593511703474196</link><description>&lt;doc fingerprint="d635f48b34542867"&gt;
  &lt;main&gt;
    &lt;p&gt;We’ve detected that JavaScript is disabled in this browser. Please enable JavaScript or switch to a supported browser to continue using x.com. You can see a list of supported browsers in our Help Center.&lt;/p&gt;
    &lt;p&gt;Help Center&lt;/p&gt;
    &lt;p&gt;Terms of Service Privacy Policy Cookie Policy Imprint Ads info © 2025 X Corp.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45767725</guid><pubDate>Fri, 31 Oct 2025 02:34:36 +0000</pubDate></item><item><title>AMD Could Enter ARM Market with Sound Wave APU Built on TSMC 3nm Process</title><link>https://www.guru3d.com/story/amd-enters-arm-market-with-sound-wave-apu-built-on-tsmc-3nm-process/</link><description>&lt;doc fingerprint="4bd2c55e4231494e"&gt;
  &lt;main&gt;
    &lt;p&gt;According to leaks from industry insiders such as @Moore’s Law Is Dead and @KeplerL2, “Sound Wave” is manufactured on TSMC’s 3 nm node and aims for a 5 W to 10 W TDP range, positioning it directly against Qualcomm’s Snapdragon X Elite. The chip is expected to power future Microsoft Surface products scheduled for release in 2026. “Sound Wave” reportedly adopts a 2 + 4 hybrid core design, consisting of two performance and four efficiency cores, paired with 4 MB of L3 cache and 16 MB of MALL cache, a memory technology inspired by the “Infinity Cache” used in AMD’s Radeon GPUs. This configuration is relatively uncommon in low-power APUs and aims to improve responsiveness and multitasking under constrained thermal conditions. On the graphics side, the processor integrates four RDNA 3.5 compute units, offering light gaming support and optimized machine learning acceleration.&lt;/p&gt;
    &lt;p&gt;Memory support is another highlight: the chip integrates a 128-bit LPDDR5X-9600 controller and will reportedly include 16 GB of onboard RAM, aligning with current trends in unified memory designs used in ARM SoCs. Additionally, the APU carries AMD’s fourth-generation AI engine, enabling on-device inference tasks and enhanced efficiency for workloads such as speech recognition, image analysis, and real-time translation.&lt;/p&gt;
    &lt;p&gt;While AMD experimented with ARM over a decade ago through the abandoned “Project Skybridge,” this new effort represents a more mature and strategic approach. With industry interest in efficient, ARM-based computing accelerating, “Sound Wave” could help AMD diversify its portfolio while leveraging its strengths in graphics and AI acceleration. If reports are accurate, the processor will enter production in late 2025, with commercial devices expected the following year.&lt;/p&gt;
    &lt;p&gt;Source: ithome&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45767916</guid><pubDate>Fri, 31 Oct 2025 03:07:48 +0000</pubDate></item><item><title>Reasoning Models Reason Well, Until They Don't</title><link>https://arxiv.org/abs/2510.22371</link><description>&lt;doc fingerprint="addd243914d29aab"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Computer Science &amp;gt; Artificial Intelligence&lt;/head&gt;&lt;p&gt; [Submitted on 25 Oct 2025]&lt;/p&gt;&lt;head rend="h1"&gt;Title:Reasoning Models Reason Well, Until They Don't&lt;/head&gt;View PDF HTML (experimental)&lt;quote&gt;Abstract:Large language models (LLMs) have shown significant progress in reasoning tasks. However, recent studies show that transformers and LLMs fail catastrophically once reasoning problems exceed modest complexity. We revisit these findings through the lens of large reasoning models (LRMs) -- LLMs fine-tuned with incentives for step-by-step argumentation and self-verification. LRM performance on graph and reasoning benchmarks such as NLGraph seem extraordinary, with some even claiming they are capable of generalized reasoning and innovation in reasoning-intensive fields such as mathematics, physics, medicine, and law. However, by more carefully scaling the complexity of reasoning problems, we show existing benchmarks actually have limited complexity. We develop a new dataset, the Deep Reasoning Dataset (DeepRD), along with a generative process for producing unlimited examples of scalable complexity. We use this dataset to evaluate model performance on graph connectivity and natural language proof planning. We find that the performance of LRMs drop abruptly at sufficient complexity and do not generalize. We also relate our LRM results to the distributions of the complexities of large, real-world knowledge graphs, interaction graphs, and proof datasets. We find the majority of real-world examples fall inside the LRMs' success regime, yet the long tails expose substantial failure potential. Our analysis highlights the near-term utility of LRMs while underscoring the need for new methods that generalize beyond the complexity of examples in the training distribution.&lt;/quote&gt;&lt;head rend="h2"&gt;Submission history&lt;/head&gt;From: Revanth Rameshkumar [view email]&lt;p&gt;[v1] Sat, 25 Oct 2025 17:28:38 UTC (7,546 KB)&lt;/p&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;p&gt; export BibTeX citation Loading... &lt;/p&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45769971</guid><pubDate>Fri, 31 Oct 2025 09:23:41 +0000</pubDate></item><item><title>The cryptography behind electronic passports</title><link>https://blog.trailofbits.com/2025/10/31/the-cryptography-behind-electronic-passports/</link><description>&lt;doc fingerprint="c9341c65e762bc1"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The cryptography behind electronic passports&lt;/head&gt;
    &lt;p&gt;Did you know that most modern passports are actually embedded devices containing an entire filesystem, access controls, and support for several cryptographic protocols? Such passports display a small symbol indicating an electronic machine-readable travel document (eMRTD), which digitally stores the same personal data printed in traditional passport booklets in its embedded filesystem. Beyond allowing travelers in some countries to skip a chat at border control, these documents use cryptography to prevent unauthorized reading, eavesdropping, forgery, and copying.&lt;/p&gt;
    &lt;p&gt;This blog post describes how electronic passports work, the threats within their threat model, and how they protect against those threats using cryptography. It also discusses the implications of using electronic passports for novel applications, such as zero-knowledge identity proofs. Like many widely used electronic devices with long lifetimes, electronic passports and the systems interacting with them support insecure, legacy protocols that put passport holders at risk for both standard and novel use cases.&lt;/p&gt;
    &lt;head rend="h2"&gt;Electronic passport basics&lt;/head&gt;
    &lt;p&gt;A passport serves as official identity documentation, primarily for international travel. The International Civil Aviation Organization (ICAO) defines the standards for electronic passports, which (as suggested by the “Chip Inside” symbol) contain a contactless integrated circuit (IC) storing digital information. Essentially, the chip contains a filesystem with some access control to protect unauthorized reading of data. The full technical details of electronic passports are specified in ICAO Doc 9303; this blog post will mostly focus on part 10, which specifies the logical data structure (LDS), and part 11, which specifies the security mechanisms.&lt;/p&gt;
    &lt;p&gt;The filesystem architecture is straightforward, comprising three file types: master files (MFs) serving as the root directory; dedicated files (DFs) functioning as subdirectories or applications; and elementary files (EFs) containing actual binary data. As shown in the above figure, some files are mandatory, whereas others are optional. This blog post will focus on the eMRTD application. The other applications are part of LDS 2.0, which would allow the digital storage of travel records (digital stamps!), electronic visas, and additional biometrics (so you can just update your picture instead of getting a whole new passport!).&lt;/p&gt;
    &lt;head rend="h3"&gt;How the eMRTD application works&lt;/head&gt;
    &lt;p&gt;The following figure shows the types of files the eMRTD contains:&lt;/p&gt;
    &lt;p&gt;There are generic files containing common or security-related data; all other files are so-called data groups (DGs), which primarily contain personal information (most of which is also printed on your passport) and some additional security data that will become important later. All electronic passports must contain DGs 1 and 2, whereas the rest is optional.&lt;/p&gt;
    &lt;p&gt;Comparing the contents of DG1 and DG2 to the main passport page shows that most of the written data is stored in DG1 and the photo is stored in DG2. Additionally, there are two lines of characters at the bottom of the page called the machine readable zone (MRZ), which contains another copy of the DG1 data with some check digits, as shown in the following picture.&lt;/p&gt;
    &lt;head rend="h2"&gt;Digging into the threat model&lt;/head&gt;
    &lt;p&gt;Electronic passports operate under a straightforward threat model that categorizes attackers based on physical access: those who hold a passport versus those who don’t. If you are near a passport but you do not hold it in your possession, you should not be able to do any of the following:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Read any personal information from that passport&lt;/item&gt;
      &lt;item&gt;Eavesdrop on communication that the passport has with legitimate terminals&lt;/item&gt;
      &lt;item&gt;Figure out whether it is a specific passport so you can trace its movements1&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Even if you do hold one or more passports, you should not be able to do the following:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Forge a new passport with inauthentic data&lt;/item&gt;
      &lt;item&gt;Make a digital copy of the passport&lt;/item&gt;
      &lt;item&gt;Read the fingerprint (DG3) or iris (DG4) information2&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Electronic passports use short-range RFID for communication (ISO 14443). You can communicate with a passport within a distance of 10–15 centimeters, but eavesdropping is possible at distances of several meters3. Because electronic passports are embedded devices, they need to be able to withstand attacks where the attacker has physical access to the device, such as elaborate side-channel and fault injection attacks. As a result, they are often certified (e.g., under Common Criteria).&lt;/p&gt;
    &lt;p&gt;We focus here on the threats against the electronic components of the passport. Passports have many physical countermeasures, such as visual effects that become visible under certain types of light. Even if someone can break the electronic security that prevents copying passports, they would still have to defeat these physical measures to make a full copy of the passport. That said, some systems (such as online systems) only interact digitally with the passport, so they do not perform any physical checks at all.&lt;/p&gt;
    &lt;head rend="h2"&gt;Cryptographic mechanisms&lt;/head&gt;
    &lt;p&gt;The earliest electronic passports lacked most cryptographic mechanisms. Malaysia issued the first electronic passport in 1998, which predates the first ICAO eMRTD specifications from 2003. Belgium subsequently issued the first ICAO-compliant eMRTD in 2004, which in turn predates the first cryptographic mechanism for confidentiality specified in 2005.&lt;/p&gt;
    &lt;p&gt;While we could focus solely on the most advanced cryptographic implementations, electronic passports remain in circulation for extended periods (typically 5–10 years), meaning legacy systems continue operating alongside modern solutions. This means that there are typically many old passports floating around that do not support the latest and greatest access control mechanisms4. Similarly, not all inspection systems/terminals support all of the protocols, which means passports potentially need to support multiple protocols. All protocols discussed in the following are described in more detail in ICAO Doc 9303 Part 11.&lt;/p&gt;
    &lt;head rend="h3"&gt;Legacy cryptography&lt;/head&gt;
    &lt;p&gt;Legacy protection mechanisms for electronic passports provide better security than what they were replacing (nothing), even though they have key shortcomings regarding confidentiality and (to a lesser extent) copying.&lt;/p&gt;
    &lt;head rend="h4"&gt;Legacy confidentiality protections: How basic access control fails&lt;/head&gt;
    &lt;p&gt;In order to prevent eavesdropping, you need to set up a secure channel. Typically, this is done by deriving a shared symmetric key, either from some shared knowledge, or through a key exchange. However, the passport cannot have its own static public key and send it over the communication channel, because this would enable tracing of specific passports.&lt;/p&gt;
    &lt;p&gt;Additionally, it should only be possible to set up this secure channel if you have the passport in your possession. So, what sets holders apart from others? Holders can read the physical passport page that contains the MRZ!&lt;/p&gt;
    &lt;p&gt;This brings us to the original solution to set up a secure channel with electronic passports: basic access control (BAC). When you place your passport with the photo page face down into an inspection system at the airport, it scans the page and reads the MRZ. Now, both sides derive encryption and message authentication code (MAC) keys from parts of the MRZ data using SHA-1 as a KDF. Then, they exchange freshly generated challenges and encrypt-then-MAC these challenges together with some fresh keying material to prove that both sides know the key. Finally, they derive session keys from the keying material and use them to set up the secure channel.&lt;/p&gt;
    &lt;p&gt;However, BAC fails to achieve any of its security objectives. The static MRZ is just some personal data and does not have very high entropy, which makes it guessable. Even worse, if you capture one valid exchange between passport and terminal, you can brute-force the MRZ offline by computing a bunch of unhardened hashes. Moreover, passive listeners who know the MRZ can decrypt all communications with the passport. Finally, the fact that the passport has to check both the MAC and the challenge has opened up the potential for oracle attacks that allow tracing by replaying valid terminal responses.&lt;/p&gt;
    &lt;head rend="h4"&gt;Forgery prevention: Got it right the first time&lt;/head&gt;
    &lt;p&gt;Preventing forgery is relatively simple. The passport contains a file called the Document Security Object (EF.SOD), which contains a list of hashes of all the Data Groups, and a signature over all these hashes. This signature comes from a key pair that has a certificate chain back to the Country Signing Certificate Authority (CSCA). The private key associated with the CSCA certificate is one of the most valuable assets in this system, because anyone in possession of this private key5 can issue legitimate passports containing arbitrary data.&lt;/p&gt;
    &lt;p&gt;The process of reading the passport, comparing all contents to the SOD, and verifying the signature and certificate chain is called passive authentication (PA). This will prove that the data in the passport was signed by the issuing country. However, it does nothing to prevent the copying of existing passports: anyone who can read a passport can copy its data into a new chip and it will pass PA. While this mechanism is listed among the legacy ones, it meets all of its objectives and is therefore still used without changes.&lt;/p&gt;
    &lt;head rend="h4"&gt;Legacy copying protections: They work, but some issues remain&lt;/head&gt;
    &lt;p&gt;Preventing copying requires having something in the passport that cannot be read or extracted, like the private key of a key pair. But how does a terminal know that a key pair belongs to a genuine passport? Since countries are already signing the contents of the passport for PA, they can just put the public key in one of the data groups (DG15), and use the private key to sign challenges that the terminal sends. This is called active authentication (AA). After performing both PA and AA, the terminal knows that the data in the passport (including the AA public key) was signed by the government and that the passport contains the corresponding private key.&lt;/p&gt;
    &lt;p&gt;This solution has two issues: the AA signature is not tied to the secure channel, so you can relay a signature and pretend that the passport is somewhere it’s not. Additionally, the passport signs an arbitrary challenge without knowing the semantics of this message, which is generally considered a dangerous practice in cryptography6.&lt;/p&gt;
    &lt;head rend="h3"&gt;Modern enhancements&lt;/head&gt;
    &lt;p&gt;Extended Access Control (EAC) fixes some of the issues related to BAC and AA. It comprises chip authentication (CA), which is a better AA, and terminal authentication (TA), which authenticates the terminal to the passport in order to protect access to the sensitive information stored in DG3 (fingerprint) and DG4 (iris). Finally, password authenticated connection establishment (PACE7, described below) replaces BAC altogether, eliminating its weaknesses.&lt;/p&gt;
    &lt;head rend="h4"&gt;Chip Authentication: Upgrading the secure channel&lt;/head&gt;
    &lt;p&gt;CA is very similar to AA in the sense that it requires countries to simply store a public key in one of the DGs (DG14), which is then authenticated using PA. However, instead of signing a challenge, the passport uses the key pair to perform a static-ephemeral Diffie-Hellman key exchange with the terminal, and uses the resulting keys to upgrade the secure channel from BAC. This means that passive listeners that know the MRZ cannot eavesdrop after doing CA, because they were not part of the key exchange.&lt;/p&gt;
    &lt;head rend="h4"&gt;Terminal Authentication: Protecting sensitive data in DG3 and DG4&lt;/head&gt;
    &lt;p&gt;Similar to the CSCA for signing things, each country has a Country Verification Certificate Authority (CVCA), which creates a root certificate for a PKI that authorizes terminals to read DG3 and DG4 in the passports of that country. Terminals provide a certificate chain for their public key and sign a challenge provided by the passport using their private key. The CVCA can authorize document verifiers (DVs) to read one or both of DG3 and DG4, which is encoded in the certificate. The DV then issues certificates to individual terminals. Without such a certificate, it is not possible to access the sensitive data in DG3 and DG4.&lt;/p&gt;
    &lt;head rend="h4"&gt;Password Authenticated Connection Establishment: Fixing the basic problems&lt;/head&gt;
    &lt;p&gt;The main idea behind PACE is that the MRZ, much like a password, does not have sufficient entropy to protect the data it contains. Therefore, it should not be used directly to derive keys, because this would enable offline brute-force attacks. PACE can work with various mappings, but we describe only the simplest one in the following, which is the generic mapping. Likewise, PACE can work with other passwords besides the MRZ (such as a PIN), but this blog post focuses on the MRZ.&lt;/p&gt;
    &lt;p&gt;First, both sides use the MRZ data (the password) to derive8 a password key. Next, the passport encrypts9 a nonce using the password key and sends it to the terminal, which can decrypt it if it knows the password. The terminal and passport also perform an ephemeral Diffie-Hellman key exchange. Now, both terminal and passport derive a new generator of the elliptic curve by applying the nonce as an additive tweak to the (EC)DH shared secret10. Using this new generator, the terminal and passport perform another (EC)DH to get a second shared secret. Finally, they use this second shared secret to derive session keys, which are used to authenticate the (EC)DH public keys that they used earlier on in the protocol, and to set up the secure channel. Figure 6 shows a simplified protocol diagram.&lt;/p&gt;
    &lt;p&gt;Anyone who does not know the password cannot follow the protocol to the end, which will become apparent in the final step when they need to authenticate the data with the session keys. Before authenticating the terminal, the passport does not share any data that enables brute-forcing the password key. Non-participants who do know the password cannot derive the session keys because they do not know the ECDH private keys.&lt;/p&gt;
    &lt;head rend="h2"&gt;Gaps in the threat model: Why you shouldn’t give your passport to just anyone&lt;/head&gt;
    &lt;p&gt;When considering potential solutions to maintaining passports’ confidentiality and authenticity, it’s important to account for what the inspection system does with your passport, and not just the fancy cryptography the passport supports. If an inspection system performs only BAC/PACE and PA, anyone who has seen your passport could make an electronic copy and pretend to be you when interacting with this system. This is true even if your passport supports AA or CA.&lt;/p&gt;
    &lt;p&gt;Another important factor is tracing: the specifications aim to ensure that someone who does not know a passport’s PACE password (MRZ data in most cases) cannot trace that passport’s movements by interacting with it or eavesdropping on communications it has with legitimate terminals. They attempt to achieve this by ensuring that passports always provide random identifiers (e.g., as part of Type A or Type B ISO 14443 contactless communication protocols) and that the contents of publicly accessible files (e.g., those containing information necessary for performing PACE) are the same for every citizen of a particular country.&lt;/p&gt;
    &lt;p&gt;However, all of these protections go out of the window when the attacker knows the password. If you are entering another country and border control scans your passport, they can provide your passport contents to others, enabling them to track the movements of your passport. If you visit a hotel in Italy and they store a scan of your passport and get hacked, anyone with access to this information can track your passport. This method can be a bit onerous, as it requires contacting various nearby contactless communication devices and trying to authenticate to them as if they were your passport. However, some may still choose to include it in their threat models.&lt;/p&gt;
    &lt;p&gt;Some countries state in their issued passports that the holder should give it to someone else only if there is a statutory need. At Italian hotels, for example, it is sufficient to provide a prepared copy of the passport’s photo page with most data redacted (such as your photo, signature, and any personal identification numbers). In practice, not many people do this.&lt;/p&gt;
    &lt;p&gt;Even without the passport, the threat model says nothing about tracking particular groups of people. Countries typically buy large quantities of the same electronic passports, which comprise a combination of an IC and the embedded software implementing the passport specifications. This means that people from the same country likely have the same model of passport, with a unique fingerprint comprising characteristics like communication time, execution time11, supported protocols (ISO 14443 Type A vs Type B), etc. Furthermore, each country may use different parameters for PACE (supported curves or mappings, etc.), which may aid an attacker in fingerprinting different types of passports, as these parameters are stored in publicly readable files.&lt;/p&gt;
    &lt;head rend="h2"&gt;Security and privacy implications of zero-knowledge identity proofs&lt;/head&gt;
    &lt;p&gt;An emerging approach in both academic research and industry applications involves using zero-knowledge (ZK) proofs with identity documents, enabling verification of specific identity attributes without revealing complete document contents. This is a nice idea in theory, because this will allow proper use of passports where there is no statutory need to hand over your passport. However, there are security implications.&lt;/p&gt;
    &lt;p&gt;First of all, passports cannot generate ZK proofs by themselves, so this necessarily involves exposing your passport to a prover. Letting anyone or anything read your passport means that you downgrade your threat model with respect to that entity. So when you provide your passport to an app or website for the purposes of creating a ZK proof, you need to consider what they will do with the information in your passport. Will it be processed locally on your device, or will it be sent to a server? If the data leaves your device, will it be encrypted and only handled inside a trusted execution environment (TEE)? If so, has this whole stack been audited, including against malicious TEE operators?&lt;/p&gt;
    &lt;p&gt;Second, if the ZK proving service relies on PA for its proofs, then anyone who has ever seen your passport can pretend to be you on this service. Full security requires AA or CA. As long as there exists any service that relies only on PA, anyone whose passport data is exposed is vulnerable to impersonation. Even if the ZK proving service does not incorporate AA or CA in their proofs, they should still perform one of these procedures with the passport to ensure that only legitimate passports sign up for this service12.&lt;/p&gt;
    &lt;p&gt;Finally, the system needs to consider what happens when people share their ZK proof with others. The nice thing about a passport is that you cannot easily make copies (if AA or CA is used), but if I can allow others to use my ZK proof, then the value of the identification decreases.&lt;/p&gt;
    &lt;p&gt;It is important that such systems are audited for security, both from the point of view of the user and the service provider. If you’re implementing ZK proofs of identity documents, contact us to evaluate your design and implementation.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;This is only guaranteed against people that do not know the contents of the passport. ↩︎&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Unless you are authorized to do so by the issuing country. ↩︎&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;See also this BSI white paper. ↩︎&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;It is allowed to issue passports that only support the legacy access control mechanism (BAC) until the end of 2026, and issuing passports that support BAC in addition to the latest mechanism is allowed up to the end of 2027. Given that passports can be valid for, e.g., 10 years, this means that this legacy mechanism will stay relevant until the end of 2037. ↩︎&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;ICAO Doc 9303 part 12 recommends that these keys are “generated and stored in a highly protected, off-line CA Infrastructure.” Generally, these keys are stored on an HSM in some bunker. ↩︎&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Some detractors (e.g., Germany) claim that you could exploit this practice to set up a tracing system where the terminal generates the challenge in a way that proves the passport was at a specific place at a specific time. However, proving that something was signed at a specific time (let alone in a specific place!) is difficult using cryptography, so any system requires you to trust the terminal. If you trust the terminal, you don’t need to rely on the passport’s signature. ↩︎&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sometimes also called Supplemental Access Control ↩︎&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The key derivation function is either SHA-1 or SHA-256, depending on the length of the key. ↩︎&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The encryption is either 2-key Triple DES or AES 128, 192, or 256 in CBC mode. ↩︎&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The new generator is given by sG+H, where s is the nonce, G is the generator, and H is the shared secret. ↩︎&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The BAC traceability paper from 2010 shows timings for passports from various countries, showing that each has different response times to various queries. ↩︎&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Note that this does not prevent malicious parties from creating their own ZK proofs according to the scheme used by the service. ↩︎&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45770875</guid><pubDate>Fri, 31 Oct 2025 11:33:41 +0000</pubDate></item><item><title>Affinity, targeting office workers over pros, making pro tools the loss leader</title><link>https://tedium.co/2025/10/30/canva-affinity-free-loss-leader-strategy/</link><description>&lt;doc fingerprint="aada1dd23536659d"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Rotate 180°&lt;/head&gt;
    &lt;head rend="h2"&gt;Canva makes a bold bet with Affinity: The real money is in the rank-and-file office worker, not the professionals. It just turned the pro tool into the loss leader.&lt;/head&gt;
    &lt;p&gt;When I was 20, I remember the huge rub with design software: The stuff you needed to survive as a professional often costs more than a month of rent.&lt;/p&gt;
    &lt;p&gt;Today, with a reset of its Affinity suite into a free product, Canva appears ready to upend that model entirely.&lt;/p&gt;
    &lt;p&gt;But let’s take a second to remember just how bad things used to be for entry-level designers. Around the time I graduated from college, a magazine review of the original Adobe Creative Suite put the price of the software at $1,229 (or $2,155 today), which was more than an entry level iBook ($1,099, or $1,927 today). Sure, there was a large educational discount for students like me, but there was a simple reason it cost so much: Because the number of designers was relatively small.&lt;/p&gt;
    &lt;p&gt;Technically, there are more than ever, based on Adobe’s own numbers—as of last year, 37 million people subscribed to Creative Cloud, which is still more than Canva’s 24 million paid users. But the truth is that many of those 37 million people probably don’t need it—they’re subscribed to Creative Cloud through their employer, who likely got a bulk rate on the software. Those people might be editing copy for print, or need to view PDFs, or edit the occasional image or video.&lt;/p&gt;
    &lt;p&gt;But what if Canva’s North Star isn’t Adobe, but Microsoft Office?&lt;/p&gt;
    &lt;p&gt;Looking for a little help in figuring out your approach to productivity? If you’re a Mac user, be sure to give Setapp a try. The service makes available hundreds of apps that can help you get more focused, simplify complex processes, even save a little time—all for one low monthly cost. Learn more at the link.&lt;/p&gt;
    &lt;p&gt;Pretty big splash for a free product.&lt;/p&gt;
    &lt;head rend="h3"&gt;Canva’s bet: Normies outnumber power users by 6X (or more)&lt;/head&gt;
    &lt;p&gt;To explain what I mean: Let’s say you’re a company that subscribes to Adobe Creative Cloud. You might buy it for one department—like your video team, or your web team, or your print team. But there are a lot of other people in your office, and they need design too. They need to build social posts and presentations and email signatures and graphical work that your $150,000-per-year senior designer doesn’t have the time for.&lt;/p&gt;
    &lt;p&gt;Canva is well-suited for those smaller tasks, which is why they’ve convinced 24 million people to pay $120 per year or more for its offering, many in workplaces. Potentially, though, Canva Pro could be nearly as popular as Microsoft 365, which has an estimated 440 million paid subscribers. The pitch to employers: Rather than buying graphics software for one or two departments, everyone gets a Canva Pro subscription.&lt;/p&gt;
    &lt;p&gt;If only the market wasn’t so split because of all the professionals favoring Creative Cloud and looking down on Canva.&lt;/p&gt;
    &lt;p&gt;That’s where the make-Affinity-free logic comes into play. For years, Adobe’s Achilles heel has been its overwhelming high cost, which has left many early-career or freelance professional designers feeling sustained sticker shock, year after year. (The generative AI fumble, which still stings a year later, didn’t help.) On top of the fact that it was a huge burden on new businesses, it also discouraged interested designers from dipping their toes in, all because the margin needed to be protected at all costs.&lt;/p&gt;
    &lt;p&gt;With its sights on selling even the accounting team on the value of easy-to-use design software, Canva is betting that by neutralizing the top-end users—the power users who complain a lot—they can get more normies.&lt;/p&gt;
    &lt;p&gt;The AI paywall on the new Affinity, as much as I’m already hearing people complain about it, is how they thread the needle.&lt;/p&gt;
    &lt;p&gt;See, Affinity’s power users have made it loud and clear that they largely don’t want AI. Fine. But, love it or hate it, it’s basically a given that a big-tech product needs AI in 2025. That’s not because of users—that’s because of Wall Street. (Yes, I hate it too, but that’s what an AI bubble does to people’s brains.)&lt;/p&gt;
    &lt;p&gt;So Affinity’s strategy is to minimize the impact to its product. It combined the AI features that people might not hate—like easier cutouts or resolution upscaling—with the gimmicky generative ones that attract the stock market. That ensures some will buy. For the ones that won’t, they’ll bury it behind a paywall that people can easily ignore; odds are, their bosses (the customers Canva really cares about) will still pay the cut.&lt;/p&gt;
    &lt;p&gt;At $99.99 per month per user for its Creative Cloud Pro plan, Adobe charges its business customers 6 times as much as Canva, which charges $200/year per user for its business plan. If Canva can get more than 6 normies for every professional Adobe serves, they come out ahead. Plus, it solves another problem, as Affinity CEO Ashley Hewson told Fast Company:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;So, how does a free professional tool make business sense for Canva? Adams explains it to me with a simple mantra: “craft and scale.” The high-end, pixel-perfect “craft” happens in Affinity Studio. The “scale”—where that craft is used to generate massive amounts of content—happens in Canva. By making the craft tool free, Canva is betting it can grow the entire design ecosystem.&lt;/p&gt;
      &lt;p&gt;The strategy is to build a frictionless bridge between these two worlds. For enterprise teams, this is the endgame. “The high-end designers or the creative team within an enterprise [will be] using Affinity to create all of their brand assets, their templates,” Hewson explains. “But then they upload all of those to Canva seamlessly so the rest of the teams within the business, who are not skilled designers, can scale on that.”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;It’s a reflection that everyone is a graphic designer, and Adobe’s attempt to artificially gate the market doesn’t make sense anymore. Oh sure, Adobe has its Express suite, but when’s the last time you heard someone talking about it? Those people talk about Canva.&lt;/p&gt;
    &lt;p&gt;Canva just flipped 40 years of design-business logic on its head, and if they pull this off, they look like geniuses. If they don’t, hopefully Affinity doesn’t get lost in the shuffle.&lt;/p&gt;
    &lt;p&gt;As for the software itself, the decision to combine the apps—illustration, pixel editing, and publishing—feels like a stroke of genius. Part of what makes Adobe such a pain to use is that you need to keep flip flopping between apps. With Affinity, there’s no flip or flop. You just load your file and if you want a vector drawing, you add it. Want to place some text or a photo? Just add that.&lt;/p&gt;
    &lt;p&gt;No, there isn’t a Linux version. Yes, it is one of the best-running professional-grade apps I’ve ever used with Wine. (This guide helps.) So those quite-vocal Linux users will be happy too, probably.&lt;/p&gt;
    &lt;p&gt;A year and a half ago I wrote an optimistic take on what Canva was doing with Affinity. I think that there is reason to be nervous, but this strategy feels right. Rather than feeling choked by its power users, it’s turned those power users into a loss leader. Usually, it’s the low-end users that are the loss leaders.&lt;/p&gt;
    &lt;p&gt;Fortunately, Canva knows how to manipulate an image.&lt;/p&gt;
    &lt;head rend="h5"&gt;Well-Designed Links&lt;/head&gt;
    &lt;p&gt;Bending Spoons, the Corel of the cloud-computing age, buys AOL for relatively cheap. Now the reason they suddenly ditched the dial-up makes sense.&lt;/p&gt;
    &lt;p&gt;We’re at a point where it’s possible to use vibe-code PowerPC apps for MacOS using modern computers for every part except the compiling, as the Mac-centric channel dmg shows.&lt;/p&gt;
    &lt;p&gt;Apparently enough people use Samsung Internet, the Samsung-made mobile browser, that it recently got a Windows version with (ugh) AI.&lt;/p&gt;
    &lt;p&gt;--&lt;/p&gt;
    &lt;p&gt;Find this one an interesting read? Share it with a pal! And thanks to Setapp for sponsoring.&lt;/p&gt;
    &lt;head rend="h5"&gt;Update 10/30/2025&lt;/head&gt;
    &lt;p&gt;I have seen a few people expressing concern that they could not download the old versions. The links with all past versions of Affinity’s software are still active. I gathered them on Bluesky and Mastodon for folks who need them. Canva (and Serif) should make these more visible.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45771211</guid><pubDate>Fri, 31 Oct 2025 12:18:35 +0000</pubDate></item><item><title>OpenAI Uses Complex and Circular Deals to Fuel Its Multibillion-Dollar Rise</title><link>https://www.nytimes.com/interactive/2025/10/31/technology/openai-fundraising-deals.html</link><description>&lt;doc fingerprint="60169e48d024efbc"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How OpenAI Uses Complex and Circular Deals to Fuel Its Multibillion-Dollar Rise&lt;/head&gt;
    &lt;p&gt;Sam Altman, the chief executive of OpenAI, says that technological revolutions are driven by more than just technology. They are also driven, he argues, by new ways of paying for them.&lt;/p&gt;
    &lt;p&gt;“There is always a lot of focus on technological innovation. What really drives a lot of progress is when people also figure out how to innovate on the financial model,” he recently said at the site of a data center that OpenAI is building in Abilene, Texas.&lt;/p&gt;
    &lt;p&gt;Over the last several years, Mr. Altman’s company has found unusual and creative ways of paying for the computing power needed to fuel its ambitions.&lt;/p&gt;
    &lt;p&gt;Many of the deals OpenAI has struck — with chipmakers, cloud computing companies and others — are strangely circular. OpenAI receives billions from tech companies before sending those billions back to the same companies to pay for computing power and other services.&lt;/p&gt;
    &lt;p&gt;Industry experts and financial analysts have welcomed the start-up’s creativity. But these unorthodox arrangements have also fueled concerns that OpenAI is helping to inflate a potential financial bubble as it builds what is still a highly speculative technology.&lt;/p&gt;
    &lt;p&gt;Here are unusual financial agreements helping to drive the ambitions of OpenAI, the poster child of the artificial intelligence revolution.&lt;/p&gt;
    &lt;p&gt;From 2019 through 2023, Microsoft was OpenAI’s primary investor. The tech giant pumped more than $13 billion into the start-up. Then OpenAI funneled most of those billions back into Microsoft, buying cloud computing power needed to fuel the development of new A.I. technologies.&lt;/p&gt;
    &lt;p&gt;(The New York Times has sued OpenAI and Microsoft, claiming copyright infringement of news content related to A.I. systems. The two companies have denied the suit’s claims.)&lt;/p&gt;
    &lt;p&gt;By the summer of last year, OpenAI could not get all the computing power it wanted from Microsoft. So it started signing cloud computing contracts with other companies, including Oracle and little-known start-ups with names like CoreWeave.&lt;/p&gt;
    &lt;p&gt;Across three different deals signed this year, OpenAI agreed to pay CoreWeave, a company that builds A.I. data centers, more than $22 billion for computing power. As part of these agreements, OpenAI received $350 million in CoreWeave stock, which could ultimately help pay for this computing power.&lt;/p&gt;
    &lt;p&gt;OpenAI also struggled to get the additional investment dollars it wanted from Microsoft. So, it turned to other investors. Earlier this year, the Japanese conglomerate SoftBank led a $40 billion investment in OpenAI.&lt;/p&gt;
    &lt;p&gt;At the same time, OpenAI has been working with various companies to build its own computing data centers, rather than rely on cloud computing deals. This also includes SoftBank, which is known for highly speculative technological bets that don’t always pay off. The company is raising $100 billion to help OpenAI build data centers in Texas and Ohio.&lt;/p&gt;
    &lt;p&gt;Similarly, Oracle, a software and cloud computing giant, has agreed to spend $300 billion building new data centers for OpenAI in Texas, New Mexico, Michigan and Wisconsin. OpenAI will then pay Oracle roughly the same amount to use these computing facilities over the next several years.&lt;/p&gt;
    &lt;p&gt;The United Arab Emirates was part of an OpenAI’s fund-raising round in October 2024. Now, G42, a firm with close ties to the Emirati government, is building a roughly $20 billion data center complex for OpenAI in the Emirates.&lt;/p&gt;
    &lt;p&gt;Last month, Nvidia announced that it intended to invest $100 billion in OpenAI over the next several years. This could help OpenAI pay for its new data centers. As OpenAI buys or leases specialized chips from Nvidia, Nvidia will pump billions back into OpenAI.&lt;/p&gt;
    &lt;p&gt;Two weeks later, OpenAI signed an agreement with AMD that allows OpenAI to buy up to 160 million shares in the chipmaker at a penny per share. That translates to roughly a 10 percent stake in the company. This stock could supply OpenAI with additional capital as it works to build new data centers.&lt;/p&gt;
    &lt;p&gt;OpenAI pulls in billions of dollars in revenue each year from customers who pay for ChatGPT, computer programming tools and other technologies. But it still loses more money than it makes, according to a person familiar with the company’s finances.&lt;/p&gt;
    &lt;p&gt;If the company can use its new data centers to significantly improve A.I. technologies and expand its revenue over the next several years, it can become a viable business, as Mr. Altman believes it will. If technology progress stalls, OpenAI – and its many partners – could lose enormous amounts of money. Smaller companies like CoreWeave, which are taking on enormous amounts of debt to build new data centers, could go bankrupt.&lt;/p&gt;
    &lt;p&gt;In some cases, companies are hedging their bets. Nvidia and AMD, for instance, have the option of reducing the cash and stock they send to OpenAI if the A.I. market does not expand as quickly as expected. But others would be left with enormous debt, which could send ripples across the larger economy.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45771538</guid><pubDate>Fri, 31 Oct 2025 13:03:46 +0000</pubDate></item><item><title>Attention lapses due to sleep deprivation due to flushing fluid from brain</title><link>https://news.mit.edu/2025/your-brain-without-sleep-1029</link><description>&lt;doc fingerprint="35099567c8b315fa"&gt;
  &lt;main&gt;
    &lt;head rend="h3"&gt;Audio&lt;/head&gt;
    &lt;p&gt;Nearly everyone has experienced it: After a night of poor sleep, you don’t feel as alert as you should. Your brain might seem foggy, and your mind drifts off when you should be paying attention.&lt;/p&gt;
    &lt;p&gt;A new study from MIT reveals what happens inside the brain as these momentary failures of attention occur. The scientists found that during these lapses, a wave of cerebrospinal fluid (CSF) flows out of the brain — a process that typically occurs during sleep and helps to wash away waste products that have built up during the day. This flushing is believed to be necessary for maintaining a healthy, normally functioning brain.&lt;/p&gt;
    &lt;p&gt;When a person is sleep-deprived, it appears that their body attempts to catch up on this cleansing process by initiating pulses of CSF flow. However, this comes at a cost of dramatically impaired attention.&lt;/p&gt;
    &lt;p&gt;“If you don’t sleep, the CSF waves start to intrude into wakefulness where normally you wouldn’t see them. However, they come with an attentional tradeoff, where attention fails during the moments that you have this wave of fluid flow,” says Laura Lewis, the Athinoula A. Martinos Associate Professor of Electrical Engineering and Computer Science, a member of MIT’s Institute for Medical Engineering and Science and the Research Laboratory of Electronics, and an associate member of the Picower Institute for Learning and Memory.&lt;/p&gt;
    &lt;p&gt;Lewis is the senior author of the study, which appears today in Nature Neuroscience. MIT visiting graduate student Zinong Yang is the lead author of the paper.&lt;/p&gt;
    &lt;p&gt;Flushing the brain&lt;/p&gt;
    &lt;p&gt;Although sleep is a critical biological process, it’s not known exactly why it is so important. It appears to be essential for maintaining alertness, and it has been well-documented that sleep deprivation leads to impairments of attention and other cognitive functions.&lt;/p&gt;
    &lt;p&gt;During sleep, the cerebrospinal fluid that cushions the brain helps to remove waste that has built up during the day. In a 2019 study, Lewis and colleagues showed that CSF flow during sleep follows a rhythmic pattern in and out of the brain, and that these flows are linked to changes in brain waves during sleep.&lt;/p&gt;
    &lt;p&gt;That finding led Lewis to wonder what might happen to CSF flow after sleep deprivation. To explore that question, she and her colleagues recruited 26 volunteers who were tested twice — once following a night of sleep deprivation in the lab, and once when they were well-rested.&lt;/p&gt;
    &lt;p&gt;In the morning, the researchers monitored several different measures of brain and body function as the participants performed a task that is commonly used to evaluate the effects of sleep deprivation.&lt;/p&gt;
    &lt;p&gt;During the task, each participant wore an electroencephalogram (EEG) cap that could record brain waves while they were also in a functional magnetic resonance imaging (fMRI) scanner. The researchers used a modified version of fMRI that allowed them to measure not only blood oxygenation in the brain, but also the flow of CSF in and out of the brain. They also measured each subject’s heart rate, breathing rate, and pupil diameter.&lt;/p&gt;
    &lt;p&gt;The participants performed two attentional tasks while in the fMRI scanner, one visual and one auditory. For the visual task, they had to look at a screen that had a fixed cross. At random intervals, the cross would turn into a square, and the participants were told to press a button whenever they saw this happen. For the auditory task, they would hear a beep instead of seeing a visual transformation.&lt;/p&gt;
    &lt;p&gt;Sleep-deprived participants performed much worse than well-rested participants on these tasks, as expected. Their response times were slower, and for some of the stimuli, the participants never registered the change at all.&lt;/p&gt;
    &lt;p&gt;During these momentary lapses of attention, the researchers identified several physiological changes that occurred at the same time. Most significantly, they found a flux of CSF out of the brain just as those lapses occurred. After each lapse, CSF flowed back into the brain.&lt;/p&gt;
    &lt;p&gt;“The results are suggesting that at the moment that attention fails, this fluid is actually being expelled outward away from the brain. And when attention recovers, it’s drawn back in,” Lewis says.&lt;/p&gt;
    &lt;p&gt;The researchers hypothesize that when the brain is sleep-deprived, it begins to compensate for the loss of the cleansing that normally occurs during sleep, even though these pulses of CSF flow come with the cost of attention loss.&lt;/p&gt;
    &lt;p&gt;“One way to think about those events is because your brain is so in need of sleep, it tries its best to enter into a sleep-like state to restore some cognitive functions,” Yang says. “Your brain’s fluid system is trying to restore function by pushing the brain to iterate between high-attention and high-flow states.”&lt;/p&gt;
    &lt;p&gt;A unified circuit&lt;/p&gt;
    &lt;p&gt;The researchers also found several other physiological events linked to attentional lapses, including decreases in breathing and heart rate, along with constriction of the pupils. They found that pupil constriction began about 12 seconds before CSF flowed out of the brain, and pupils dilated again after the attentional lapse.&lt;/p&gt;
    &lt;p&gt;“What’s interesting is it seems like this isn’t just a phenomenon in the brain, it’s also a body-wide event. It suggests that there’s a tight coordination of these systems, where when your attention fails, you might feel it perceptually and psychologically, but it’s also reflecting an event that’s happening throughout the brain and body,” Lewis says.&lt;/p&gt;
    &lt;p&gt;This close linkage between disparate events may indicate that there is a single circuit that controls both attention and bodily functions such as fluid flow, heart rate, and arousal, according to the researchers.&lt;/p&gt;
    &lt;p&gt;“These results suggest to us that there’s a unified circuit that’s governing both what we think of as very high-level functions of the brain — our attention, our ability to perceive and respond to the world — and then also really basic fundamental physiological processes like fluid dynamics of the brain, brain-wide blood flow, and blood vessel constriction,” Lewis says.&lt;/p&gt;
    &lt;p&gt;In this study, the researchers did not explore what circuit might be controlling this switching, but one good candidate, they say, is the noradrenergic system. Recent research has shown that this system, which regulates many cognitive and bodily functions through the neurotransmitter norepinephrine, oscillates during normal sleep.&lt;/p&gt;
    &lt;p&gt;The research was funded by the National Institutes of Health, a National Defense Science and Engineering Graduate Research Fellowship, a NAWA Fellowship, a McKnight Scholar Award, a Sloan Fellowship, a Pew Biomedical Scholar Award, a One Mind Rising Star Award, and the Simons Collaboration on Plasticity in the Aging Brain.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45771636</guid><pubDate>Fri, 31 Oct 2025 13:14:23 +0000</pubDate></item><item><title>Sustainable memristors from shiitake mycelium for high-frequency bioelectronics</title><link>https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0328965</link><description>&lt;doc fingerprint="2649d182a83393f0"&gt;
  &lt;main&gt;&lt;head rend="h2"&gt;Figures&lt;/head&gt;&lt;head rend="h2"&gt;Abstract&lt;/head&gt;&lt;p&gt;Neuromorphic computing, inspired by the structure of the brain, offers advantages in parallel processing, memory storage, and energy efficiency. However, current semiconductor-based neuromorphic chips require rare-earth materials and costly fabrication processes, whereas neural organoids need complex bioreactor maintenance. In this study, we explored shiitake (Lentinula edodes) fungi as a robust, sustainable alternative, exploiting its adaptive electrical signaling, which is akin to neuronal spiking. We demonstrate fungal computing via mycelial networks interfaced with electrodes, showing that fungal memristors can be grown, trained, and preserved through dehydration, retaining functionality at frequencies up to 5.85 kHz, with an accuracy of 90 ± 1%. Notably, shiitake has exhibited radiation resistance, suggesting its viability for aerospace applications. Our findings show that fungal computers can provide scalable, eco-friendly platforms for neuromorphic tasks, bridging bioelectronics and unconventional computing.&lt;/p&gt;&lt;p&gt;Citation: LaRocco J, Tahmina Q, Petreaca R, Simonis J, Hill J (2025) Sustainable memristors from shiitake mycelium for high-frequency bioelectronics. PLoS One 20(10): e0328965. https://doi.org/10.1371/journal.pone.0328965&lt;/p&gt;&lt;p&gt;Editor: Ye Zhou, Shenzhen University, HONG KONG&lt;/p&gt;&lt;p&gt;Received: July 8, 2025; Accepted: September 25, 2025; Published: October 10, 2025&lt;/p&gt;&lt;p&gt;Copyright: © 2025 LaRocco et al. This is an open access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.&lt;/p&gt;&lt;p&gt;Data Availability: The data is available at this repository: https://github.com/javeharron/abhothData.&lt;/p&gt;&lt;p&gt;Funding: Authors J.S. and J.H. were supported by Honda Research Institute (grant AWD-118684). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.&lt;/p&gt;&lt;p&gt;Competing interests: The authors have declared that no competing interests exist.&lt;/p&gt;&lt;head rend="h2"&gt;Background&lt;/head&gt;&lt;head rend="h3"&gt;Overview&lt;/head&gt;&lt;p&gt;The development of neuromorphic hardware relies on memristive devices capable of emulating synaptic behavior, with potential applications in energy-efficient computing and artificial intelligence1. Recent work has explored natural, biodegradable substrates as sustainable alternatives to conventional inorganic memristors [1]. In this study, we investigated the potential of the edible fungus Lentinula edodes (shiitake mushroom) as a platform for memristor fabrication. By examining the electrical response of mushroom-derived materials under repeated voltage cycling, we explored stable memristive switching behavior, retention, and endurance. Shiitake-based devices not only demonstrate reproducible memory effects, but also highlight the potential for scalable, low-cost, and environmentally friendly neuromorphic components.&lt;/p&gt;&lt;head rend="h3"&gt;Memristors&lt;/head&gt;&lt;p&gt;Memristor devices offer substantial advantages in robotic, industrial, and transport applications due to their unique electrical properties and ability to mimic neural functions. They can enhance various control systems, facilitate efficient information processing, and ultimately improve the overall performance of autonomous systems.&lt;/p&gt;&lt;p&gt;One of the key strengths of memristors is their capacity for efficient and self-adaptive in situ learning, which is critical for applications in robotics and autonomous vehicles. In memristor-based neural networks, the devices can adjust their resistance based on previous inputs, allowing for a form of analog learning that closely resembles the synaptic behavior in biological systems [1]. This capability enables robots and autonomous vehicles to learn from their environment and adapt in real time, enhancing their ability to navigate complex situations effectively. It has been found that such systems can achieve low-latency responses, which are essential for high-speed decision-making in dynamic environments [2].&lt;/p&gt;&lt;p&gt;Memristors also have the advantage of integrating memory and processing capabilities into a single device, enabling a simplified architecture for autonomous control systems [3]. For instance, in autonomous vehicles, trajectory-tracking and path-following tasks can be performed using memristor-based controllers that allow for rapid calculations and real-time adjustments to control variables [4]. This integration, especially with parallelization, helps to address the challenges posed by separate memory and processing units, which can lead to delays and increased power consumption in traditional control systems [4].&lt;/p&gt;&lt;p&gt;Additionally, the resilience of memristor devices against environmental changes, and their ability to operate under varying conditions, make them particularly suitable for autonomous applications, such as spacecraft electronics or vehicles operating in unpredictable road environments [4]. This is complemented by the precision in control that memristor-based systems can offer, which is significant for maintaining stability and performance while following desired trajectories [5].&lt;/p&gt;&lt;p&gt;Moreover, the low power consumption of memristors is particularly beneficial in robotics and autonomous vehicles, where energy efficiency is paramount. Hybrid analog–digital memristor systems can minimize power usage during processing without sacrificing responsiveness, which can prolong operational times by reducing the frequency at which recharging or battery replacement is required, enhancing the feasibility of deploying such systems in mobile applications [2].&lt;/p&gt;&lt;p&gt;Ultimately, the potential of memristors to emulate human-like decision-making and learning processes could be exploited to endow robotic systems and autonomous vehicles with functionalities not found in conventional control systems. The ability of memristors to perform complex computations efficiently, learn adaptively, and integrate both memory and processing into a unified approach make them a cornerstone technology for the future development of intelligent autonomous systems. However, the production of memristors often requires rare-earth minerals and expensive semiconductor foundries.&lt;/p&gt;&lt;head rend="h3"&gt;Fungal electronics&lt;/head&gt;&lt;p&gt;Fungi possess innate abilities to adapt to various environmental conditions and efficiently process information through their interconnected network of hyphae. These characteristics make fungi an ideal candidate for developing sustainable computing systems from. Our aim was to design and implement a novel fungal memristor-based computing architecture that could significantly reduce energy consumption and minimize electronic waste. We approached this using substantially simpler bioreactors and nutrient cultures than those required for conventional neurons and neural organoids. The unique advantages of fungal memristors stem from the biological properties of fungal materials, which distinguish them from typical inorganic or polymer alternatives [6,7].&lt;/p&gt;&lt;p&gt;First, one of the main benefits of fungal memristors is their environmentally sustainable and biodegradable nature. Conventional memristors often contain transition metal oxides or silicon-based structures, the production or disposal of which can pose environmental challenges [6,7]. By contrast, fungal materials are derived from organic biomass, making them both sustainable and significantly less harmful to the environment. This aligns with increasing efforts toward developing greener electronic materials, as highlighted in previous work emphasizing the importance of sustainability in technology development [8].&lt;/p&gt;&lt;p&gt;Second, fungal memristors exhibit remarkable adaptability in their electrical properties. The structural composition of fungal materials often allows for a range of conductive pathways that can form dynamically under the influence of electrical stimuli, similar to the conductive filaments formed in conventional memristors [9,10]. This adaptability can lead to enhanced performance in neuromorphic applications through the facilitation of variable resistance states that mimic synaptic behaviors more closely than traditional memristive materials, which often have static crystalline structures that can lead to variability problems or performance limitations at the nanoscale [11].&lt;/p&gt;&lt;p&gt;Furthermore, fungal memristors may consume less power than traditional materials due to their unique electrochemical properties. It has been claimed that some organic materials, including those derived from fungi, can operate effectively at lower voltages while maintaining stable switching characteristics––a trait that is crucial for developing energy-efficient devices for portable electronics and Internet of Things applications [12]. This can significantly extend battery life and reduce energy costs in processing and memory applications, which have become focal points in the research into neuromorphic systems [13].&lt;/p&gt;&lt;p&gt;Finally, the natural composition and multicellularity of fungal materials can lead to more naturalistic models for neural networks. Because these materials are subject to biological processes, they may inherently incorporate characteristics that resemble biological neuronal networks, including plasticity and memory capabilities that could evolve with usage. This biological mimicry could strengthen the development of more advanced artificial neural networks, enabling applications such as adaptive learning systems and intelligent sensor networks [14].&lt;/p&gt;&lt;head rend="h3"&gt;Fungus types&lt;/head&gt;&lt;p&gt;The potential use of common food mushrooms, such as shiitake and button mushrooms (Agaricus bisporus), as organic memristors is an emerging area of research that exploits the unique properties of these fungi [6,7,13]. Memristors, which are non-volatile memory devices that retain information even without power, can benefit from the porous structures and electrical properties of the organic materials derived from mushrooms.&lt;/p&gt;&lt;p&gt;Shiitake mushrooms have been shown to possess a hierarchically porous carbon structure when activated. This porous structure can enhance the electrochemical performance of devices, making them suitable candidates for use in energy storage systems, including supercapacitors and, potentially, memristors [15]. Highly conductive carbon materials have been created from shiitake, suggesting that these materials could be engineered to exhibit memristive behavior [16]. Shiitake-derived carbon is a sustainable alternative to traditional materials and can enhance the performance of electronic devices due to its unique structural properties.&lt;/p&gt;&lt;p&gt;Button mushrooms have also shown significant potential in this context. Research has indicated that their porosity can be exploited to create materials with large surface areas, which are essential for the development of efficient electronic components [17]. The synthesis of carbon composites from button mushrooms has been explored, revealing their ability to function effectively in energy storage applications [17]. Furthermore, the integration of button mushrooms into electronic systems has been investigated, demonstrating their potential as substrates for electronic devices [18].&lt;/p&gt;&lt;p&gt;In addition to their structural properties, the unique biological characteristics of fungi, including their ability to interact with various chemical compounds, can be harnessed to develop novel sensing technologies. For instance, electronic noses have been developed that use mushroom extracts to detect volatile compounds. These could be adapted for use in electronic devices that require environmental-sensing capabilities [19,20]. This intersection of biology and electronics opens new avenues for creating multifunctional devices that incorporate the sensory capabilities of mushrooms.&lt;/p&gt;&lt;head rend="h3"&gt;Radiation, resistance, and resilience&lt;/head&gt;&lt;p&gt;The radiation resistance of shiitake mushrooms has been studied primarily in terms of their ability to withstand and possibly derive benefits from exposure to ionizing radiation. This resistance can be attributed to several biochemical and physiological attributes. A possible factor is lentinan, a polysaccharide found in the cell walls of shiitake. Lentinan provides structural integrity and exhibits immunomodulatory effects that may enhance the mushroom’s ability to respond to environmental stresses, including radiation exposure. Although some research has suggested that lentinan possesses properties that may help mitigate oxidative stress [21], there have been limited studies directly linking lentinan to radiation resistance in shiitake mushrooms.&lt;/p&gt;&lt;p&gt;Shiitake mushrooms have also shown a notable ability to adapt to their environmental conditions, including variable radiation levels. Studies involving fungi in space research have indicated that certain taxa can enhance their survival through morphological changes or increased melanin production in response to radiation [22]. This radiation resistance implies a suitability of fungal electronics for aerospace applications, where cosmic rays and ambient radiation can interfere with conventional electronics. Fungi’s physical flexibility and low energy requirements would also be advantageous relative to conventional solutions [18,19]. These studies have not specifically addressed shiitake, but the general adaptability observed in fungi suggests that this species could respond similarly to such conditions.&lt;/p&gt;&lt;p&gt;Another example of the resilience of shiitake mushrooms is their ability to maintain their nutritional and bioactive qualities after irradiation. For example, they retain essential nutrients and bioactive compounds even after exposure to ultraviolet radiation [23]. The high content of ergosterol, a precursor to vitamin D, found in shiitake mushrooms, reinforces their potential for beneficial outcomes following exposure to radiation because this compound can be converted into vitamin D2 when subjected to ultraviolet light [24].&lt;/p&gt;&lt;p&gt;Lastly, shiitake mushrooms could be considered in the development of dietary supplements or functional foods that could serve a broader purpose in radioprotection. Their multirole efficacy as a food source and electrical component emphasizes a sustainable approach to utilizing biological entities that can withstand environmental stresses, including radiation. This is especially relevant in aerospace and exploration contexts, where promoting health in astronauts could reduce the risks associated with their increased radiation exposure during missions [22]. Also, shiitake mushrooms can withstand environmental stresses, including radiation, while remaining safe for human consumption.&lt;/p&gt;&lt;p&gt;In summary, the radiation resistance of shiitake mushrooms is linked to the presence of protective compounds, such as lentinan, and their ability to adapt morphologically. These factors have contributed to our understanding of their survival strategies and are suggestive of potential applications in areas where radiation exposure is a significant concern, such as aerospace and radiation sensing. By culturing and evaluating the memristive properties of shiitake mushrooms, we can determine their suitability for use as sustainable, low-cost bioelectronics.&lt;/p&gt;&lt;head rend="h2"&gt;Methods&lt;/head&gt;&lt;head rend="h3"&gt;Summary&lt;/head&gt;&lt;p&gt;Testing the memristive behavior of shiitake mycelium involved several steps, the first being culturing the fungi, and then preparing the samples by drying and rehydrating them. Following this, the most successfully cultivated samples were electrically characterized using a test circuit. Additionally, a special circuit was constructed for further evaluating the feasibility of using mycelium for violate memory.&lt;/p&gt;&lt;head rend="h3"&gt;Hyphal cultivation&lt;/head&gt;&lt;p&gt;Due to the financial and environmental constraints of this project, all four evaluated memristors fabricated for our experiments were composed exclusively of low-cost, organic materials. Based on previous research, we identified materials such as biocompatible composites [25,26] as viable candidates for device construction and programming due to their biodegradability and compatibility with fungal growth.&lt;/p&gt;&lt;p&gt;The initial phase of experimentation focused on the cultivation of fungal hyphae in the selected organic growth media. Nine samples were prepared in standard polycarbonate Petri dishes. The growth conditions were carefully maintained to promote optimal fungal development, with a controlled temperature range of 20–22°C, a relative humidity of 70%, and mixed light exposure to replicate natural terrestrial conditions. The nutrient substrate consisted of a mixture of farro seed, wheat germ, and hay, selected for their organic compositions and ability to support robust fungal growth. Each sample was inoculated with spores or mycelial plugs of shiitake.&lt;/p&gt;&lt;p&gt;The samples (e.g., see Fig 1) were observed and documented biweekly to track their growth consistency and morphological development. Observations including hyphal density, surface coverage, and color changes were recorded in a structured laboratory logbook. In addition to these visual inspections, a brief scratch test was performed to track the progress of the mycelium throughout the substrate. The log included timestamps and qualitative notes, enabling consistent comparison across samples and time points.&lt;/p&gt;&lt;p&gt;Each sample grew a mycelial network that was connected to conventional electronics.&lt;/p&gt;&lt;head rend="h3"&gt;Drying and rehydration process&lt;/head&gt;&lt;p&gt;Once full hyphal coverage and structural maturation were achieved (i.e., when the Petri dish was covered), the samples were transitioned to the drying phase. The Petri dishes were left in a well-ventilated area under direct sunlight at room temperature for approximately seven days to ensure uniform dehydration. The samples were rotated periodically to avoid uneven hardening. As previously reported, this process transformed the fungal matrix into a rigid, disk-like structure while retaining its overall shape and connectivity [26,27].&lt;/p&gt;&lt;p&gt;Prior to testing, the samples were rehydrated using a fine mist of aerosolized deionized water. The rehydration was conducted using a standard commercial spray bottle, held within a distance of 10 cm from each sample. This brief rehydration step restored the required level of conductivity without introducing bulk moisture that could have altered their mechanical integrity.&lt;/p&gt;&lt;head rend="h3"&gt;Electrical characterization&lt;/head&gt;&lt;p&gt;Electrical testing protocols were designed based on theoretical memristors [6,7]. An alternating current was applied to each sample, and the corresponding current–voltage (I–V) characteristics were measured using a digital oscilloscope. As established in previous works, the test setup used a voltage divider to model multiple memristors in the same circuit [6,7].&lt;/p&gt;&lt;p&gt;To extract accurate current values, a known shunt resistor was placed in series with each sample. As shown in Fig 2, voltage readings were captured across both the sample and the resistor, with Channel 1 of the oscilloscope measuring the input voltage and Channel 2 capturing the voltage drop across the shunt resistor. The current values were then calculated using Kirchhoff’s current law, allowing derivation of the I–V characteristics from the voltage differentials. All waveform data were exported in comma-separated values (CSV) format for subsequent digital analysis and visualization.&lt;/p&gt;&lt;p&gt;The test circuit evaluated the memristive properties of each sample.&lt;/p&gt;&lt;p&gt;To thoroughly investigate the memristive behavior of the four samples using mycelium coverage density, voltage sweeps were conducted using both square and sinusoidal waveforms. The square waves were employed to detect sharp threshold-based resistance changes, whereas the sinusoidal inputs provided insights into the more subtle, continuous mem-fractive behaviors. This dual approach enabled the identification of hysteresis loops in the I–V curves––a key signature of memristor functionality.&lt;/p&gt;&lt;p&gt;A square wave was used first, with the peak-to-peak voltage starting at 200 mVpp and increasing. If a sinusoidal wave form exhibited more promising results, a broader range of frequencies was explored. The frequencies and voltages used in the initial tests for memristive properties are detailed in Table 1.&lt;/p&gt;&lt;p&gt;Accuracy and error were calculated based on how many reads agreed with the analog threshold, the number of malformed readings, timing jitter, recording instability, and port delays [28].&lt;/p&gt;(1)&lt;p&gt;The accuracy was calculated using Equation 1, where accuracy is a percentage converted from product of correct samples C over the total number of samples N. The standard error SE was calculated for each case, as shown in Equation 2.&lt;/p&gt;(2)&lt;p&gt;A simulated ideal memristive curve was compared against each experimental result, where the statistical distance d was calculated between both curves [28]. The distance was used to compute memristive accuracy at a particular frequency, as shown in Equation 3.&lt;/p&gt;(3)&lt;head rend="h3"&gt;Volatile memory testing&lt;/head&gt;&lt;p&gt;In the event that the fungal samples exhibited memristive behavior, a specialized electronic circuit was designed and implemented to investigate the volatile memory characteristics of two fungal samples in series. The test circuit was a voltage divider with memory. The test involved setting an arbitrary analog voltage value to represent a high value, and below that threshold was a low value. The frequency range started at 200 Hz and concluded at 5.85 kHz. Similarly to previous work, Fig 3 shows the configuration and layout of this testing circuit [6].&lt;/p&gt;&lt;p&gt;The samples were evaluated using this model.&lt;/p&gt;&lt;p&gt;Comparably to previous work in memristive computing, the volatile memory circuit employed an Arduino UNO microcontroller development board and a voltage divider consisting of two memristive elements [6,7]. Given the polarized nature of memristors, the circuit was designed to allow a voltage of opposite polarity to that used during read operations to be set. Both voltages used were approximately 5 V. The Arduino UNO cyclically applied a high signal to a relay containing a half-rectified sine wave through one of its digital output pins when reading the memristor bridge, thereby charging the divider. This process induced an asymmetry in resistance, with the memristor closest to the input experiencing a reduction in resistance, while the output-side memristor exhibited an increase. The voltage across the divider was subsequently read using an analog input pin, and another digital pin was used to run 5 V across the divider. The Arduino interpreted the stored state as “on” only when the measured voltage exceeded a predefined threshold, effectively enabling volatile memory detection based on the transient resistance states of the memristors. Ten tests were repeated on each of the four samples. The physical implementation of this circuit is shown in Fig 4.&lt;/p&gt;&lt;p&gt;The volatile memory circuit was implemented using fungal memristors.&lt;/p&gt;&lt;p&gt;The memristor voltage divider was tested by applying a 5 Vpp sinusoidal signal to the memristors for approximately 0.01–0.1 ms. This signal was delivered via a relay triggered by digital pin 6 of the Arduino UNO. Following this brief stimulation period, the sinusoidal input was disabled, and digital pin 5 was activated to initiate the read phase. Analog voltage measurements were then acquired through the A1 analog input pin. To minimize the effects of floating voltages, a 1 MΩ pull-down resistor was connected to this pin. Voltage readings were recorded for approximately 0.1–0.10 ms before the cycle repeated, allowing for rapid and continuous testing of the memristive behavior.&lt;/p&gt;&lt;p&gt;The measurements were transmitted over a serial communication interface at a baud rate of 57,600 and were captured as raw text files for analysis. The data were post-processed and visualized using a custom Python script based on the matplotlib library, enabling clear identification of memory retention patterns and resistance state changes across successive cycles.&lt;/p&gt;&lt;head rend="h3"&gt;Hypothesis&lt;/head&gt;&lt;p&gt;The general testing setup, based on that used in the literature, is able to indicate memristive behavior in fungal samples. If present, this behavior would manifest as a characteristic pinched hysteresis loop in the I–V curves, typically intersecting at or near the origin––a well-established signature of memristive systems [6,7]. We hypothesized that such a response would emerge under specific combinations of voltage amplitude and input frequency. Where memristive behavior was indicated, volatile memory tests were conducted.&lt;/p&gt;&lt;head rend="h2"&gt;Results&lt;/head&gt;&lt;head rend="h3"&gt;Overview&lt;/head&gt;&lt;p&gt;The fungal memristors were tested across a range of voltages, waveforms, and frequencies. Below, we first detail the test inputs used to explore the memristive properties and generate I–V curves. Then we present the voltage and frequency (graphical) test results, followed by the volatile memory test results. Each figure represents the averaged, smoothed results across the samples.&lt;/p&gt;&lt;head rend="h3"&gt;Voltage testing&lt;/head&gt;&lt;p&gt;The first five tests were conducted to determine which voltage amplitude produced the most favorable memristive response. These initial trials revealed that a 1 Vpp signal yielded the most consistent and measurable results. As outlined in the Methods section, the first four of these tests were performed using a square wave input.&lt;/p&gt;&lt;head rend="h3"&gt;Frequency testing&lt;/head&gt;&lt;p&gt;After identifying 1 Vpp as the optimal input voltage during the initial square wave tests (Tests 1–4), the waveform was switched to a sine wave for further analysis (Tests 5–10). The aim of this phase was to identify the frequency at which memristive behavior––specifically a pinched hysteresis loop––became apparent.&lt;/p&gt;&lt;p&gt;In Tests 1–5, the voltage amplitude was optimized using square waves. Between Tests 5 and 6, the waveform was changed from square to sine. From Tests 6–10, frequency sweeps were carried out with sine waves to identify memristive crossing. In Test 11, the voltage range was expanded at 10 Hz (5 Vpp) to enhance the response. This revealed behavior close to that of an ideal memristor. Notably, Test 1 had already shown consistent linear behavior, indicating resistive characteristics. The results are shown in Figs 5–13. Fig 14 details a sample noise profile, and Fig 15 summarizes memristive accuracy.&lt;/p&gt;&lt;p&gt;Plot of a 200 mVpp square wave at 200 Hz displaying memcapacitive behavior.&lt;/p&gt;&lt;p&gt;Plot of a 20 Vpp square wave at 200 Hz displaying resistive behavior.&lt;/p&gt;&lt;p&gt;Plot of a 1 Vpp square wave at 200 Hz displaying memcapacitive behavior.&lt;/p&gt;&lt;p&gt;Plot of a 1 Vpp sine wave at 200 Hz displaying memcapacitive behavior.&lt;/p&gt;&lt;p&gt;Plot of a 1 Vpp sine wave at 100 Hz displaying memcapacitive behavior.&lt;/p&gt;&lt;p&gt;Plot of a 1 Vpp sine wave at 25 Hz displaying memristive behavior.&lt;/p&gt;&lt;p&gt;Plot of a 1 Vpp sine wave at 50 Hz displaying memristive behavior.&lt;/p&gt;&lt;p&gt;Plot of a 1 Vpp sine wave at 10 Hz displaying memristive behavior.&lt;/p&gt;&lt;p&gt;Plot of a 5 Vpp sine wave at 10 Hz displaying near-ideal memristive behavior.&lt;/p&gt;&lt;p&gt;Plot of a noisy 1 Vpp sine wave at 10 Hz during measurement.&lt;/p&gt;&lt;p&gt;Memristive accuracy plotted for Tests 1-11.&lt;/p&gt;&lt;p&gt;Figs 5–10 show the output of Tests 2–7. The frequency was gradually reduced until a crossing near the origin was first observed, as shown in Fig 10. To ensure this result was not an outlier caused by overshooting the ideal frequency, the test was repeated at a slightly higher frequency (50 Hz, Test 8, shown in Fig 11). This confirmed that the optimal response occurred below 25 Hz.&lt;/p&gt;&lt;p&gt;As summarized in Table 2, the frequency was decreased to 10 Hz (Test 9, shown in Fig 12), which produced a clear crossing in the I–V curve near the −0.4 V region. To enhance the visibility of this behavior, the voltage was increased to 5 Vpp, which resulted in a more pronounced memristive signature (Test 10). Fig 13 illustrates this result, displaying a nearly ideal pinched hysteresis loop indicative of memristor functionality. The highest accuracy, at 95%, was at a 10 Hz sine wave at 1 V. Fig 14 details the noise from an individual sample. Fig 15 details the average memristive accuracy of each configuration.&lt;/p&gt;&lt;head rend="h3"&gt;Volatile memory experiment&lt;/head&gt;&lt;p&gt;For the volatile memory tests 1 and 2, single read and write operations were performed across the memristor voltage divider. For volatile memory test 3, continuous read and write operations were performed across the memristor voltage divider while the frequency was gradually increased. The primary results are summarized in Table 3. The results are displayed in Figs 16–20. Averaged nemristive accuracy is displayed in Fig 21.&lt;/p&gt;&lt;p&gt;A single write and read over volatile memory.&lt;/p&gt;&lt;p&gt;Another single write and read over volatile memory.&lt;/p&gt;&lt;p&gt;Cyclical writing and reading over the fungal volatile memory.&lt;/p&gt;&lt;p&gt;Additional cyclical writing and reading over the fungal volatile memory.&lt;/p&gt;&lt;p&gt;Extreme cyclical writing and reading from volatile memory.&lt;/p&gt;&lt;p&gt;Accuracy for first two tests and cyclic tests.&lt;/p&gt;&lt;head rend="h2"&gt;Discussion&lt;/head&gt;&lt;head rend="h3"&gt;Overview&lt;/head&gt;&lt;p&gt;Using low-cost materials, shiitake mushrooms were cultured into ideal memristors. Ideal and non-ideal memristive properties have been observed previously in fungi, but these required far more complex interfacing methods [26]. Although several techniques have been proposed to preserve fungal samples, we obtained experimental validation that dehydration can preserve the observed properties in a previously “programmed” sample [27]. Ideal memristor properties are observed at lower frequencies, but potential latencies can be offset through massive parallelization, as in nature [26,28,29]. As known from previous works on fungal memristors, the mycelial structure contains capacitive, memfractive, and memristive proteins [25,26]. In the memristive tests, accuracy decreased as the frequency increased. The observed rapid switching speed of 5,850 Hz, an accuracy of 90% (± 1%) low energy consumption relative to prior conventional systems, light weight, and radiation resistance all make fungal memristors attractive for edge computing, aerospace, and embedded firmware applications [25–27]. Unlike expensive conventional memristors, culturing fungal memristors does not require large facilities or rare minerals. The process can be scaled to grow large systems, which can be programmed and preserved for long-term use at low cost.&lt;/p&gt;&lt;head rend="h3"&gt;Limitations&lt;/head&gt;&lt;p&gt;Our study was limited by the relatively short timescale of less than two months. Other researchers have documented memristive properties in mycelial materials, but their studies also focused on short-term performance [26]. Another limitation was that only single, relatively bulky samples were prepared. To truly compete with conventional devices at the microscale and below, memristors will need to be far smaller [7,8,11]. Even in the same growth medium, each sample produced a vastly different culture, and the outcomes have yet to be fully characterized by electrical properties. However, the development of these devices is in an early stage, and they could eventually be miniaturized, especially using improved cultivation techniques. Complications associated with the growth media were not explored, although previous research has found that fungi are quite robust to varying conditions [26].&lt;/p&gt;&lt;head rend="h3"&gt;Future work&lt;/head&gt;&lt;p&gt;Although fungal memristors can be produced at low cost, certain aspects of the process could be further optimized. First, consistent cultivation techniques could be improved using three-dimensional (3D)-printed templates and structures that shape the shiitake mushroom into the desired geometry. Second, programming could be facilitated by adding electrical contacts into a 3D-printed cultivation structure. Finally, long-term use would necessitate preservation, which could involve a variety of techniques, including dehydration, desiccation, freeze-drying, certain hydrogels, and special coatings [27]. By testing devices produced to physical stress conditions, a combination of these techniques could enable the development of fast, radiation-resistant, and low-energy memristors grown from low-cost organic materials. The future of computing could be fungal.&lt;/p&gt;&lt;head rend="h2"&gt;Conclusions&lt;/head&gt;&lt;p&gt;Currently, the fabrication of semiconductor memristors requires rare-earth minerals and large facilities, and culturing delicate neural organoids requires a complex chemical environment to be maintained in a bioreactor. Fungal computing may provide a robust and accessible alternative. Fungal systems have lower power requirements, lighter weights, faster switching speeds, and lower industrial overheads than conventional devices. In this study, fungal memristors were fabricated, programmed, and tested using shiitake mushrooms and conventional electronics. Dehydration-based preservation was successfully explored, demonstrating the robustness of our devices. When used as RAM, our mushroom memristor was able to operate at up to 5,850 Hz at an accuracy of 90 ± 1%. In addition, shiitake mushrooms are biodegradable and have demonstrated radiation resistance, suggesting that the potential applications of fungal computing range from sustainable computing devices to aerospace technologies.&lt;/p&gt;&lt;head rend="h2"&gt;Acknowledgments&lt;/head&gt;&lt;p&gt;We would like to thank Ryan Lingo and Rajeev Chhajer of the Honda Research Institute.&lt;/p&gt;&lt;head rend="h2"&gt;References&lt;/head&gt;&lt;list rend="ol"&gt;&lt;item&gt;1. Li C, Han L, Jiang H, Jang M-H, Lin P, Wu Q, et al. Three-dimensional crossbar arrays of self-rectifying Si/SiO2/Si memristors. Nat Commun. 2017;8:15666. pmid:28580928&lt;/item&gt;&lt;item&gt;2. Cheng P, Gao S, Zang P, Yang X, Bai Y, Xu H, et al. Hierarchically porous carbon by activation of shiitake mushroom for capacitive energy storage. Carbon. 2015;93:315–24.&lt;/item&gt;&lt;item&gt;3. Lin F, Chen Y, Zhao Y, Wang S. Path tracking of autonomous vehicle based on adaptive model predictive control. International Journal of Advanced Robotic Systems. 2019;16(5).&lt;/item&gt;&lt;item&gt;4. Wang Q, Hu Z, Li Z, Liu T, Bian G. Exploring the Application and Prospects of Synthetic Biology in Engineered Living Materials. Adv Mater. 2025;37(31):e2305828. pmid:37677048&lt;/item&gt;&lt;item&gt;5. Li C, Han L, Jiang H, Jang M-H, Lin P, Wu Q, et al. Three-dimensional crossbar arrays of self-rectifying Si/SiO2/Si memristors. Nat Commun. 2017;8:15666. pmid:28580928&lt;/item&gt;&lt;item&gt;6. Yuan L, Liu S, Chen W, Fan F, Liu G. Organic Memory and Memristors: From Mechanisms, Materials to Devices. Adv Elect Materials. 2021;7(11).&lt;/item&gt;&lt;item&gt;7. Femi O. Unveiling the fourth fundamental circuit element and its real-world applications. In: Chang YF, ed. Memristors – The Fourth Fundamental Circuit Element – Theory, Device, and Applications. IntechOpen; 2024:3–12.&lt;/item&gt;&lt;item&gt;8. Li C, Han L, Jiang H, Jang M-H, Lin P, Wu Q, et al. Three-dimensional crossbar arrays of self-rectifying Si/SiO2/Si memristors. Nat Commun. 2017;8:15666. pmid:28580928&lt;/item&gt;&lt;item&gt;9. Yang C, Sun B, Zhou G, Guo T, Ke C, Chen Y, et al. Photoelectric Memristor-Based Machine Vision for Artificial Intelligence Applications. ACS Materials Lett. 2023;5(2):504–26.&lt;/item&gt;&lt;item&gt;10. Campbell KA, Drake KT, Barney Smith EH. Pulse Shape and Timing Dependence on the Spike-Timing Dependent Plasticity Response of Ion-Conducting Memristors as Synapses. Front Bioeng Biotechnol. 2016;4:97. pmid:28083531&lt;/item&gt;&lt;item&gt;11. Ko T-J, Li H, Mofid SA, Yoo C, Okogbue E, Han SS, et al. Two-Dimensional Near-Atom-Thickness Materials for Emerging Neuromorphic Devices and Applications. iScience. 2020;23(11):101676. pmid:33163934&lt;/item&gt;&lt;item&gt;12. Lu XF, Zhang Y, Wang N, Luo S, Peng K, Wang L, et al. Exploring Low Power and Ultrafast Memristor on p-Type van der Waals SnS. Nano Lett. 2021;21(20):8800–7. pmid:34644096&lt;/item&gt;&lt;item&gt;13. Liao K, Lei P, Tu M, Luo S, Jiang T, Jie W, et al. Memristor Based on Inorganic and Organic Two-Dimensional Materials: Mechanisms, Performance, and Synaptic Applications. ACS Appl Mater Interfaces. 2021;13(28):32606–23. pmid:34253011&lt;/item&gt;&lt;item&gt;14. Sun J, Yang R, Li Q, Zhu R, Jiang Y, Zang L, et al. Living Synthelectronics: A New Era for Bioelectronics Powered by Synthetic Biology. Adv Mater. 2024;36(25):e2400110. pmid:38494761&lt;/item&gt;&lt;item&gt;15. Cheng P, Gao S, Zang P, Yang X, Bai Y, Xu H, et al. Hierarchically porous carbon by activation of shiitake mushroom for capacitive energy storage. Carbon. 2015;93:315–24.&lt;/item&gt;&lt;item&gt;16. Yadav P, Basu A, Suryawanshi A, Game O, Ogale S. Highly Stable Laser‐Scribed Flexible Planar Microsupercapacitor Using Mushroom Derived Carbon Electrodes. Adv Materials Inter. 2016;3(11).&lt;/item&gt;&lt;item&gt;17. Li J, Wu Q, Zan G. Facile synthesis and high electrochemical performance of porous carbon composites for supercapacitors. RSC Adv. 2014;4(66):35186.&lt;/item&gt;&lt;item&gt;18. Joshi S, Cook E, Mannoor MS. Bacterial Nanobionics via 3D Printing. Nano Lett. 2018;18(12):7448–56. pmid:30403141&lt;/item&gt;&lt;item&gt;19. Gómez I, Lavega González R, Tejedor-Calvo E, Pérez Clavijo M, Carrasco J. Odor Profile of Four Cultivated and Freeze-Dried Edible Mushrooms by Using Sensory Panel, Electronic Nose and GC-MS. J Fungi (Basel). 2022;8(9):953. pmid:36135678&lt;/item&gt;&lt;item&gt;20. Fujioka K, Shimizu N, Manome Y, Ikeda K, Yamamoto K, Tomizawa Y. Discrimination method of the volatiles from fresh mushrooms by an electronic nose using a trapping system and statistical standardization to reduce sensor value variation. Sensors (Basel). 2013;13(11):15532–48. pmid:24233028&lt;/item&gt;&lt;item&gt;21. Chung I-M, Kim S-Y, Han J-G, Kong W-S, Jung MY, Kim S-H. Fatty Acids and Stable Isotope Ratios in Shiitake Mushrooms (Lentinula edodes) Indicate the Origin of the Cultivation Substrate Used: A Preliminary Case Study in Korea. Foods. 2020;9(9):1210. pmid:32882944&lt;/item&gt;&lt;item&gt;22. Wu K, de Menezes S, Robinson A. Flagellate Erythema: A Case of Shiitake Dermatitis and Review of Pathogenesis. EMJ Allergy Immunol. 2022.&lt;/item&gt;&lt;item&gt;23. Won DJ, Kim SY, Jang CH, Lee JS, Ko JA, Park HJ. Optimization of UV irradiation conditions for the vitamin D2-fortified shiitake mushroom (Lentinula edodes) using response surface methodology. Food Sci Biotechnol. 2017;27(2):417–24. pmid:30263765&lt;/item&gt;&lt;item&gt;24. Loo HV, Oon HH. Flagellate dermatitis following consumption of shiitake mushroom. Dermatol Reports. 2011;3(2):e21. pmid:25386273&lt;/item&gt;&lt;item&gt;25. Wang H, Tao J, Wu Z, Weiland K, Wang Z, Masania K, et al. Fabrication of Living Entangled Network Composites Enabled by Mycelium. Adv Sci (Weinh). 2024;11(24):e2309370. pmid:38477443&lt;/item&gt;&lt;item&gt;26. Adamatzky A, Ayres P, Beasley AE, Roberts N, Wösten HAB. Logics in Fungal Mycelium Networks. Log Univers. 2022;16(4):655–69.&lt;/item&gt;&lt;item&gt;27. Al-Bedak OA, Sayed RM, Hassan SHA. A new low-cost method for long-term preservation of filamentous fungi. Biocatalysis and Agricultural Biotechnology. 2019;22:101417.&lt;/item&gt;&lt;item&gt;28. Yin S-F, Sun Q-J, Liu L-F, Liu S-Z, Jiang Y-P, Tang X-G. TiO2/Bi4Ti3O12 heterojunction optoelectronic synaptic devices for simulating associative memory and neuromorphic computation. Applied Surface Science. 2025;711:164049.&lt;/item&gt;&lt;item&gt;29. Dixon WJ, Massey FJ. Introduction to statistical analysis. 1951. &lt;/item&gt;&lt;/list&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45771796</guid><pubDate>Fri, 31 Oct 2025 13:32:08 +0000</pubDate></item><item><title>Git CLI tool for intelligently creating branch names</title><link>https://github.com/ytreister/gibr</link><description>&lt;doc fingerprint="e5f60d1a8cefdc99"&gt;
  &lt;main&gt;
    &lt;quote&gt;
      &lt;p&gt;🧩 A smarter CLI for creating Git branches.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;&lt;code&gt;gibr&lt;/code&gt; connects your Git workflow to your issue tracker — instantly creating consistent, descriptive branches.
Fully configurable, and ready for any tracker or team setup.&lt;/p&gt;
    &lt;p&gt;Currently supporting integration with:&lt;/p&gt;
    &lt;code&gt;# List open issues
$ gibr issues
|   Issue | Type   | Title                                 |
|---------|--------|---------------------------------------|
|     123 | issue  | Add support for OAuth2 / login (beta) |
|      97 | issue  | Add support for gitlab                |
# Decide which issue to work
$ gibr 123
Generating branch name for issue #123: Add support for OAuth2 / login (beta)
Branch name: issue/123/add-support-for-oauth2-login-beta
✅  Created branch 'issue/123/add-support-for-oauth2-login-beta' from main.
✅  Checked out branch: issue/123/add-support-for-oauth2-login-beta
✅  Pushed branch 'issue/123/add-support-for-oauth2-login-beta' to origin.&lt;/code&gt;
    &lt;code&gt;uv pip install gibr
# or
pip install gibr&lt;/code&gt;
    &lt;p&gt;Run &lt;code&gt;gibr init&lt;/code&gt; to set up your configuration interactively. This will create a &lt;code&gt;.gibrconfig&lt;/code&gt; file in your project root with the correct format for your chosen issue tracker.&lt;/p&gt;
    &lt;p&gt;Run &lt;code&gt;gibr alias&lt;/code&gt; to set up git alias commands for your conveinence. This essentially allows you to extend the &lt;code&gt;git&lt;/code&gt; CLI with &lt;code&gt;gibr&lt;/code&gt; commands. See alias command for more details&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;gibr&lt;/code&gt; includes an &lt;code&gt;init&lt;/code&gt; command to help you create your &lt;code&gt;.gibrconfig&lt;/code&gt; file. See the following usage example:&lt;/p&gt;
    &lt;code&gt;$ gibr init
Welcome to gibr setup! Let’s get you started 🚀

Which issue tracker do you use?
1. GitHub
2. GitLab
3. Jira
4. Linear
5. Monday.com (coming soon)

Select a number (1, 2, 3, 4, 5) [1]: 1

GitHub selected.

GitHub repository (e.g. user/repo): ytreister/gibr
Environment variable for your GitHub token [GITHUB_TOKEN]:
🎉  Found GitHub token in environment (GITHUB_TOKEN)
.gibrconfig already exists. Overwrite? [y/N]: y
✅  Created .gibrconfig with GitHub settings
You're all set! Try: `gibr issues`
&lt;/code&gt;
    &lt;p&gt;&lt;code&gt;gibr&lt;/code&gt; includes a built-in helper that writes git aliases into your global
&lt;code&gt;~/.gitconfig&lt;/code&gt; for you. Run:&lt;/p&gt;
    &lt;code&gt;gibr alias&lt;/code&gt;
    &lt;p&gt;This adds aliases such as &lt;code&gt;git create&lt;/code&gt; so that instead of using the gibr CLI directly, you can use an extended version of git:&lt;/p&gt;
    &lt;code&gt;git create 123&lt;/code&gt;
    &lt;p&gt;The above command is equivalent to using the CLI as follows: &lt;code&gt;gibr 123&lt;/code&gt; or
&lt;code&gt;gibr create 123&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;The flag order when using the &lt;code&gt;git&lt;/code&gt; alias version is different:&lt;/p&gt;
    &lt;code&gt;# ✅ gibr CLI (flags before)
gibr --verbose create 123

# ✅ git alias (flags after)
git create 123 --verbose

# ❌ wrong: flags after gibr CLI
gibr create 123 --verbose 

# ❌ wrong: flags before the alias
git --verbose create 123&lt;/code&gt;
    &lt;p&gt;Run &lt;code&gt;gibr issues&lt;/code&gt; (or &lt;code&gt;git issues&lt;/code&gt;) to view open issues in the issue tracker you have configured&lt;/p&gt;
    &lt;p&gt;Run &lt;code&gt;gibr 123&lt;/code&gt; (or &lt;code&gt;gibr create 123&lt;/code&gt; or &lt;code&gt;git create 123&lt;/code&gt;) to create a branch for the cooresponding issue number.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;gibr&lt;/code&gt; uses the &lt;code&gt;branch_name_format&lt;/code&gt; from your &lt;code&gt;.gibrconfig&lt;/code&gt; to determine the format for the branch.
You can use the following placeholders: &lt;code&gt;{issuetype}&lt;/code&gt;, &lt;code&gt;{issue}&lt;/code&gt;, &lt;code&gt;{title}&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;For Jira, you can specify a &lt;code&gt;project_key&lt;/code&gt; in your configuration:&lt;/p&gt;
    &lt;code&gt;[jira]
project_key=FOO&lt;/code&gt;
    &lt;p&gt;If you do this, you can choose to either specify the entire issue id or just the numerical portion (i.e. &lt;code&gt;FOO-123&lt;/code&gt; or &lt;code&gt;123&lt;/code&gt;&lt;/p&gt;
    &lt;code&gt;# List issues
$ gibr issues
| Issue   | Type    | Title       |
|---------|---------|-------------|
| FOO-3   | Subtask | Subtask 2.1 |
| FOO-2   | Story   | Task 2      |
# Create branch for FOO-3
$ gibr 3
Generating branch name for issue FOO-3: Subtask 2.1
Branch name: FOO-3-subtask-2-1
✅  Created branch 'FOO-3-subtask-2-1' from main.
✅  Checked out branch: FOO-3-subtask-2-1
✅  Pushed branch 'FOO-3-subtask-2-1' to origin.&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;--verbose&lt;/code&gt;— enable debug-level logging for a command&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;See the Roadmap for upcoming features and plans.&lt;/p&gt;
    &lt;p&gt;See the Contributions guidelines if you would like to contribute.&lt;/p&gt;
    &lt;p&gt;Found a bug or have a feature request? Open an issue or start a discussion.&lt;lb/&gt; If you find it useful, consider starring ⭐️ the repo — it really helps visibility!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45771843</guid><pubDate>Fri, 31 Oct 2025 13:37:10 +0000</pubDate></item><item><title>Immutable releases are now generally available on GitHub</title><link>https://github.blog/changelog/2025-10-28-immutable-releases-are-now-generally-available/</link><description>&lt;doc fingerprint="e116156e4d6ef7a2"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Immutable releases are now generally available&lt;/head&gt;
    &lt;p&gt;GitHub releases now support immutability, adding a new layer of supply chain security. With immutable releases, assets and tags are protected from tampering after publication, so the software you publish—and your users consume—remains secure and trustworthy.&lt;/p&gt;
    &lt;head rend="h3"&gt;About immutable releases&lt;/head&gt;
    &lt;p&gt;Immutable releases offer:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Immutable assets: Once you publish a release as immutable, its assets can’t be added, modified, or deleted. This helps protect distributed artifacts from supply chain attacks.&lt;/item&gt;
      &lt;item&gt;Tag protection: Tags for new immutable releases are protected and can’t be deleted or moved.&lt;/item&gt;
      &lt;item&gt;Release attestations: Immutable releases receive signed attestations so you can easily verify the authenticity and integrity of assets, both on GitHub and in external environments.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;How to enable immutable releases&lt;/head&gt;
    &lt;p&gt;You can enable immutable releases at the repository or organization level in your settings. Once enabled:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;All new releases are immutable (i.e., assets are locked and tags are protected).&lt;/item&gt;
      &lt;item&gt;Existing releases remain mutable unless you republish them.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Disabling immutability doesn’t affect releases created while it was enabled. They remain immutable.&lt;/p&gt;
    &lt;head rend="h3"&gt;Release attestations and verification&lt;/head&gt;
    &lt;p&gt;Release attestations let you verify that an artifact is authentic and unchanged, even outside GitHub. Attestations use the Sigstore bundle format, so you can easily verify releases and assets using the GitHub CLI or integrate with any Sigstore-compatible tooling to automate policy enforcement in your CI/CD pipelines. For instructions on how to verify the integrity of a release, see our docs on verifying the integrity of a release.&lt;/p&gt;
    &lt;p&gt;We’d love your feedback. Share your thoughts and questions on the GitHub Community.&lt;/p&gt;
    &lt;p&gt;For more information, see our immutable releases documentation.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45772064</guid><pubDate>Fri, 31 Oct 2025 13:59:25 +0000</pubDate></item><item><title>Nim 2.2.6</title><link>https://nim-lang.org//blog/2025/10/31/nim-226.html</link><description>&lt;doc fingerprint="2b139df8543d1ed9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Nim version 2.2.6 released&lt;/head&gt;
    &lt;head rend="h3"&gt;31 October 2025 The Nim Team&lt;/head&gt;
    &lt;p&gt;The Nim Team is happy to announce version 2.2.6, the third patch release for our stable release, Nim 2.2.&lt;/p&gt;
    &lt;p&gt;It comes six months after the 2.2.4 release and it contains 141 commits, bringing bugfixes and improvements.&lt;/p&gt;
    &lt;p&gt;If youâre still on Nim 1.6, take a look at the version 2.0 release article to see all the features youâre missing. If youâve been using Nim 2.0, the version 2.2 release article shows the improvements available in Nim 2.2.&lt;/p&gt;
    &lt;p&gt;The Nim 2.2.6 changelog is available here.&lt;/p&gt;
    &lt;head rend="h2"&gt;Highlights&lt;/head&gt;
    &lt;p&gt;Exception handling combined with Nimâs &lt;code&gt;async&lt;/code&gt; is more stable than ever before
as the underlying closure iterator transformation has been rewritten.&lt;/p&gt;
    &lt;p&gt;The compiler is now smart enough to produce a move operation for &lt;code&gt;return obj.field&lt;/code&gt;.
Previously it performed a copy.
Expect your code to run slightly faster due to this and other minor performance improvements.&lt;/p&gt;
    &lt;head rend="h2"&gt;Installing Nim 2.2.6&lt;/head&gt;
    &lt;p&gt;Check out if the package manager of your OS already ships version 2.2.6 or install it as described here.&lt;/p&gt;
    &lt;p&gt;If you have installed a previous version of Nim using &lt;code&gt;choosenim&lt;/code&gt;,
getting Nim 2.2.6 is as easy as:&lt;/p&gt;
    &lt;code&gt;$ choosenim update self
$ choosenim update stable
&lt;/code&gt;
    &lt;p&gt;NOTE: We recommend you to install and use the latest version of &lt;code&gt;choosenim&lt;/code&gt;, v.0.8.16, available in our choosenim repo.&lt;/p&gt;
    &lt;p&gt;Alternatively, you can download Nim 2.2.6 from our nightlies builds.&lt;/p&gt;
    &lt;head rend="h2"&gt;Bugfixes&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Fixed â&lt;code&gt;=destroy&lt;/code&gt;for non-var failed to compile when JSâ (#24914)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;{.push raises: [].}&lt;/code&gt;doesnât respect lexical scopingâ (#23355)&lt;/item&gt;
      &lt;item&gt;Fixed âPragma block disabling warning has effect beyond blockâ (#21975)&lt;/item&gt;
      &lt;item&gt;Fixed âmissing &lt;code&gt;&amp;lt;&lt;/code&gt;(less than),&lt;code&gt;cmp&lt;/code&gt;for&lt;code&gt;cstring&lt;/code&gt;â (#24941)&lt;/item&gt;
      &lt;item&gt;Fixed â[GC] Illegal storage access when collecting cycleâ (#4851)&lt;/item&gt;
      &lt;item&gt;Fixed âGlobals in proc with static params end up being re-initializedâ (#24940)&lt;/item&gt;
      &lt;item&gt;Fixed âConstructor to global variable in converter generates illegal c codeâ (#4594)&lt;/item&gt;
      &lt;item&gt;Fixed âCompile-time regression from v2.2.4 to &lt;code&gt;version-2-2&lt;/code&gt;/&lt;code&gt;devel&lt;/code&gt;with&lt;code&gt;global&lt;/code&gt;variable with&lt;code&gt;unhandled exception: iterators.nim(254, 11) len(a) == L the length of the seq changed while iterating over it [AssertionDefect]&lt;/code&gt;â (#24981)&lt;/item&gt;
      &lt;item&gt;Fixed âSIGSEGV when raising &lt;code&gt;Defect&lt;/code&gt;/doAssertâ (#24974)&lt;/item&gt;
      &lt;item&gt;Fixed âCrash on marking destroy hook as .errorâ (#24996)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;hasCustomPragma&lt;/code&gt;stops working after typedesc is copiedâ (#23564)&lt;/item&gt;
      &lt;item&gt;Fixed âAsyncnet accept leaks socket on SSL error; Regression in develâ (#25023)&lt;/item&gt;
      &lt;item&gt;Fixed âSIGSEGV in closure iterator with try/except not at top levelâ (#21235)&lt;/item&gt;
      &lt;item&gt;Fixed âRegression from v2.2.4 to &lt;code&gt;version-2-2&lt;/code&gt;/&lt;code&gt;devel&lt;/code&gt;with closure iteratorâ (#25038)&lt;/item&gt;
      &lt;item&gt;Fixed âfixes #24997; {.global.} variable in recursive functionâ (#25016)&lt;/item&gt;
      &lt;item&gt;Fixed âconcept param passed to varargs causes &lt;code&gt;internal error: genTypeInfo(tyUserTypeClassInst)&lt;/code&gt;when JS backendâ (#25043)&lt;/item&gt;
      &lt;item&gt;Fixed âBad order of destructionâ (#24719)&lt;/item&gt;
      &lt;item&gt;Fixed âFloats are not range checkedâ (#7179)&lt;/item&gt;
      &lt;item&gt;Fixed âtypo in docsâ (#25084)&lt;/item&gt;
      &lt;item&gt;Fixed âRegression from Nim v2.2.2 to v2.2.4/&lt;code&gt;version-2-2&lt;/code&gt;/devel in&lt;code&gt;nim cpp&lt;/code&gt;with compatible types not keeping L-valuenessâ (#25109)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;FieldDefect&lt;/code&gt;compiler crash when comparing pointers at compile timeâ (#25066)&lt;/item&gt;
      &lt;item&gt;Fixed âSlow compilation due to &lt;code&gt;vmgen.sameConstant&lt;/code&gt;and memory allocationsâ (#25114)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;unhandled exception: field 'sym' is not accessible for type 'TNode' using 'kind = nkEmpty' [FieldDefect]&lt;/code&gt;with iterator-loopâ (#25121)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;strutils.formatSize&lt;/code&gt;returns wrong values from large values close to int64.highâ (#25125)&lt;/item&gt;
      &lt;item&gt;Fixed âDereferencing result of &lt;code&gt;cast&lt;/code&gt;in single expression triggers unnecessary copyâ (#24093)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;internal error: '=destroy' operator not found for type NimNode&lt;/code&gt;returning&lt;code&gt;NimNode&lt;/code&gt;â (#25120)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;requiresInit&lt;/code&gt;not checked for&lt;code&gt;result&lt;/code&gt;if it has been used (2.2 regression)â (#25117)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;filterIt&lt;/code&gt;wrongly results in rvalueâ (#25078)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;@&lt;/code&gt;extremely slow for trivial typesâ (#25063)&lt;/item&gt;
      &lt;item&gt;Fixed âwithValue for immut tab wrong chk condâ (#25162)&lt;/item&gt;
      &lt;item&gt;Fixed âInvalid C codegen &lt;code&gt;refc&lt;/code&gt;with generic types containing gc memoryâ (#24844)&lt;/item&gt;
      &lt;item&gt;Fixed âSinglyLinkedList.remove broken / AssertionDefectâ (#25173)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;error: âT2_â undeclared&lt;/code&gt;and&lt;code&gt;error: incompatible types when assigning to type âvoid *â&lt;/code&gt;â (#24361)&lt;/item&gt;
      &lt;item&gt;Fixed âNoncopyable base type ignoredâ (#24760)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;lent string&lt;/code&gt;generic field isnât preserving its valueâ (#25127)&lt;/item&gt;
      &lt;item&gt;Fixed âcannot return &lt;code&gt;lent&lt;/code&gt;expression from conditionals like&lt;code&gt;case&lt;/code&gt;â (#23949)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;Error: internal error: proc has no result symbol&lt;/code&gt;â (#21476)&lt;/item&gt;
      &lt;item&gt;Fixed âInvalid codegen / dangling pointer for openArray escaping from &lt;code&gt;block&lt;/code&gt;â (#24261)&lt;/item&gt;
      &lt;item&gt;Fixed âlib/system/iterators.nim(250, 14) Error: internal error: genArrayLen()â (#25167)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;Error: unhandled exception: field 'sym' is not accessible for type 'TNode'&lt;/code&gt;â (#21138)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;error: âpthread_mutex_tâ has no member named âabiâ&lt;/code&gt;in refc with&lt;code&gt;reset&lt;/code&gt;/&lt;code&gt;{.exportc.}&lt;/code&gt;â (#25205)&lt;/item&gt;
      &lt;item&gt;Fixed âUninitialized variable usage in &lt;code&gt;resize__system_u...&lt;/code&gt;in&lt;code&gt;@psystem.nim.c&lt;/code&gt;in ORCâ (#25204)&lt;/item&gt;
      &lt;item&gt;Fixed âVM error when passing object field ref to &lt;code&gt;proc(var T): var T&lt;/code&gt;â (#25210)&lt;/item&gt;
      &lt;item&gt;Fixed âClosure environement wrongly marked as cyclic (orc)â (#25048)&lt;/item&gt;
      &lt;item&gt;Fixed âInfinite loop with anonymous iteratorâ (#25046)&lt;/item&gt;
      &lt;item&gt;Fixed âJS: &lt;code&gt;cast[char](i)&lt;/code&gt;for&lt;code&gt;i &amp;gt; 255&lt;/code&gt;not truncateâ (#25222)&lt;/item&gt;
      &lt;item&gt;Fixed âVM issue with globals and assignmentsâ (#25208)&lt;/item&gt;
      &lt;item&gt;Fixed âCase object from &lt;code&gt;compileTime&lt;/code&gt;proc unable to be passed as&lt;code&gt;static&lt;/code&gt;paramâ (#25123)&lt;/item&gt;
      &lt;item&gt;Fixed âVM &lt;code&gt;repr&lt;/code&gt;raises RangeDefect for long string under refcâ (#25226)&lt;/item&gt;
      &lt;item&gt;Fixed âBroken assignment of union with bool inside variant objectâ (#25236)&lt;/item&gt;
      &lt;item&gt;Fixed âdeques: Deque items behavior is not the same on 2.0.16 and 2.2.0â (#25240)&lt;/item&gt;
      &lt;item&gt;Fixed â&lt;code&gt;nim doc&lt;/code&gt;uses doc comment from private field for public fieldâ (#25027)&lt;/item&gt;
      &lt;item&gt;Fixed âCompiler internal error &lt;code&gt;compiler/vmgen.nim(1771, 23)&lt;/code&gt;with&lt;code&gt;static&lt;/code&gt;overloadâ (#25008)&lt;/item&gt;
      &lt;item&gt;Fixed âWrong exception raised wrapped in finally in closure iterator; Regression in devel/version-2-2â (#25202)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The complete list of changes is available here.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45772224</guid><pubDate>Fri, 31 Oct 2025 14:15:12 +0000</pubDate></item><item><title>Can we talk about the rude installers not asking for installation locations?</title><link>https://news.ycombinator.com/item?id=45772236</link><description>&lt;doc fingerprint="1bad441aa8de53d2"&gt;
  &lt;main&gt;
    &lt;p&gt;I think it is very rude to just install to any "default" directory and not asks the user where he wants it to be installed.&lt;/p&gt;
    &lt;p&gt;reply&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45772236</guid><pubDate>Fri, 31 Oct 2025 14:16:17 +0000</pubDate></item></channel></rss>