<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sat, 01 Nov 2025 14:35:03 +0000</lastBuildDate><item><title>Hacking India's largest automaker: Tata Motors</title><link>https://eaton-works.com/2025/10/28/tata-motors-hack/</link><description>&lt;doc fingerprint="3f6092114f4737db"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Hacking India’s largest automaker: Tata Motors&lt;/head&gt;
    &lt;head rend="h2"&gt;Key Points / Summary&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;2 exposed AWS keys on public-facing websites revealed 70+ TB of sensitive information and infrastructure across hundreds of buckets.&lt;/item&gt;
      &lt;item&gt;Pointless AWS key encryption easily defeated.&lt;/item&gt;
      &lt;item&gt;Tableau backdoor made it possible to log in as anyone without a password, including the server admin. This exposed countless internal projects, financial reports, and dealer dashboards.&lt;/item&gt;
      &lt;item&gt;Exposed Azuga API key compromised test drive fleet management system.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you are in the US and ask your friends and family if they have heard of “Tata Motors”, they would likely say no. However, if you go overseas, Tata Motors and the Tata Group in general are a massive, well-known conglomerate. Back in 2023, I took my hacking adventures overseas and found many vulnerabilities with Tata Motors. This post covers 4 of the most impactful findings I discovered that I am finally ready to share today. Let’s dive in!&lt;/p&gt;
    &lt;p&gt;Note that all secrets/credentials shown have been rotated, meaning they are no longer valid and cannot be used anymore. Additionally, no substantial amounts of data were downloaded as part of any testing, nor was there any obvious evidence of malicious access.&lt;/p&gt;
    &lt;head rend="h2"&gt;AWS Keys in E-Dukaan Marketplace&lt;/head&gt;
    &lt;p&gt;E-Dukaan is a Tata Motors site where their customers can buy spare parts for their vehicles. It’s a typical E-Commerce site, but it had a dark secret!&lt;/p&gt;
    &lt;p&gt;Can you see it? Right there, in plaintext, are AWS keys. For those unfamiliar, you NEVER EVER want to expose these because people can use them to download all your files stored on Amazon, upload malicious content, rack up massive bills, etc.&lt;/p&gt;
    &lt;p&gt;Intrigued, I put them into S3 Browser to see what it unlocked access to. The answer was.. basically everything. A long list of buckets packed with sensitive information. Here’s a few examples:&lt;/p&gt;
    &lt;p&gt;A customer database backup? Check ✅&lt;/p&gt;
    &lt;p&gt;Customer lists and market intelligence? Yup ✅&lt;/p&gt;
    &lt;p&gt;Hundreds of thousands of invoices for E-Dukaan containing customer information, like PAN? Of course ✅&lt;/p&gt;
    &lt;p&gt;Admin order reports? Absolutely ✅ (about 40 GB worth of reports in here)&lt;/p&gt;
    &lt;p&gt;You may be wondering, where was this AWS keyset actually used? What made it worth the risk of exposing so much? Answer: to download a 4 KB file containing tax codes:&lt;/p&gt;
    &lt;head rend="h2"&gt;Decryptable AWS Keys in FleetEdge&lt;/head&gt;
    &lt;p&gt;Finding the AWS keys in E-Dukaan was so easy that it felt like cheating. This next one was more challenging (but not by much).&lt;/p&gt;
    &lt;p&gt;FleetEdge is Tata Motors’ fleet management/tracking solution. More info is here. Looking at the API calls that are executed on site load as a guest user, one immediately stuck out:&lt;/p&gt;
    &lt;p&gt;Right there in the response is another set of AWS keys, but this time they were not plaintext – they appeared to be encrypted. A quick search of a decrypt method turned up the exact code, and setting a breakpoint there was enough to reveal the contents:&lt;/p&gt;
    &lt;p&gt;As recently seen with Intel, there seems to be a trend where developers will do this pointless client-side decryption. When the client has the key, it’s strange that anyone would think that would be secure. Maybe these devs knew what the E-Dukaan team was doing and wanted to (try) doing things a little better?&lt;/p&gt;
    &lt;p&gt;This set of AWS keys has a similarly serious impact. There was another long list of new buckets you could access. At one point, S3 Browser had estimated 70 TB in one bucket before it crashed. Here’s a few examples:&lt;/p&gt;
    &lt;p&gt;Fleet insights – this is where 70 TB+ of data was found. There was some datalake with files going back to 1996!&lt;/p&gt;
    &lt;p&gt;You also had write access to some websites. You could easily slip in some malware on the frontpage and wreak some havoc.&lt;/p&gt;
    &lt;head rend="h2"&gt;Backdoor admin access to Tableau&lt;/head&gt;
    &lt;p&gt;Note: This flaw is not believed to be linked to Tableau itself and instead was introduced by Tata Motors.&lt;/p&gt;
    &lt;p&gt;Let’s go back to E-Dukaan now. Turns out, it’s the gift that keeps on giving. Poking around the source code of the website, I came across some interesting code:&lt;/p&gt;
    &lt;p&gt;The first obvious issue was the username and password in the comments. If you look closer, you can see an HTTP call to get a “trusted token”. Crucially, it only needs username and site name (no password). Thanks to the code comment, we had a username to try. Performing the HTTP POST manually yielded a token!&lt;/p&gt;
    &lt;p&gt;When you plug that into the infoviz URL like the code does, you will be redirected to Tableau!&lt;/p&gt;
    &lt;p&gt;But there is more fun to be had. This user didn’t have access to much. Since we essentially had a backdoor into Tableau needing only username, we could in theory log in as anyone. One of the cards had the server admin as the owner, and it was possible to get the username that way:&lt;/p&gt;
    &lt;p&gt;With that in hand, I went through the same process of getting a token, and then I had total control over Tableau with access to everything. I didn’t dig too deep after this since it was a lot of sensitive corporate stuff, and I had proven the vulnerability at this point.&lt;/p&gt;
    &lt;head rend="h2"&gt;Azuga API Key Leak&lt;/head&gt;
    &lt;p&gt;Azuga is a fleet management platform. Tata Motors used it for their test drive website, presumably to keep tabs on where their cars are. Right there in the JS code was the Azuga token that should never have left the server. A quick API test was enough to confirm it was valid, and that is where I wrapped things up.&lt;/p&gt;
    &lt;head rend="h2"&gt;Timeline&lt;/head&gt;
    &lt;p&gt;Special thanks to India’s Computer Emergency Response Team (CERT-IN) for working with me on these disclosures.&lt;/p&gt;
    &lt;p&gt;All 4 issues were reported to Tata Motors through CERT-IN. Tata Motors was a bit slow in rotating the AWS keys. Given what was exposed, I had hoped they would have done it faster.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;August 8, 2023: Reported. A response is received shortly after confirming they will take action with the concerned authority.&lt;/item&gt;
      &lt;item&gt;August 30, 2023: I request an update.&lt;/item&gt;
      &lt;item&gt;September 1, 2023: Tata Motors shared with CERT-IN (who then shared with me) that the issues are remediated.&lt;/item&gt;
      &lt;item&gt;September 3, 2023: I confirm only 2/4 issues were remediated and the AWS keys were still present on the websites, and active.&lt;/item&gt;
      &lt;item&gt;October 22, 2023: After no updates and finding the AWS issues still not remediated, I send over some more specific steps on what must be done.&lt;/item&gt;
      &lt;item&gt;October 23, 2023: They confirm receipt and are working on taking action. After this date and up until January 2, 2024, there were various back and forth emails trying to get Tata Motors to revoke the AWS keys. I am not sure if something was lost in translation, but it took a lot of pestering and specific instructions to get it done.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;India’s largest automaker should be more secure&lt;/head&gt;
    &lt;p&gt;Compared to some of my other recent hacks, these weren’t anything super sophisticated. You just had to know where to look. Secrets leak all the time, but the impact is often tempered by the secret having limited access. In this case, having 2 sets of AWS keys leak with access to so much is incredibly concerning. When buying a car, you should be able to trust the automaker will take reasonable actions to keep your data secure. I hope Tata Motors does better in the future – someone else would have absolutely discovered these vulnerabilities at some point, and that would have been a much darker story.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45741569</guid><pubDate>Wed, 29 Oct 2025 01:31:56 +0000</pubDate></item><item><title>Introducing architecture variants</title><link>https://discourse.ubuntu.com/t/introducing-architecture-variants-amd64v3-now-available-in-ubuntu-25-10/71312</link><description>&lt;doc fingerprint="7175513321d03c02"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Is there any way I can check if ubuntu-drivers isn’t working because amd64v3 or not?&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;liviu@bobdenaut:~$ sudo ubuntu-drivers devices
[sudo: authenticate] Password: 
liviu@bobdenaut:~$ sudo ubuntu-drivers list
liviu@bobdenaut:~$ sudo ubuntu-drivers debug
=== log messages from detection ===
DEBUG:root:package_get_nv_allowing_driver(): unable to read /etc/custom_supported_gpus.json
DEBUG:root:package_get_nv_allowing_driver(): unable to read /etc/custom_supported_gpus.json
DEBUG:root:Loading custom detection plugin /usr/share/ubuntu-drivers-common/detect/arm-gles.py
DEBUG:root:plugin /usr/share/ubuntu-drivers-common/detect/arm-gles.py return value: None
DEBUG:root:Loading custom detection plugin /usr/share/ubuntu-drivers-common/detect/sl-modem.py
DEBUG:root:plugin /usr/share/ubuntu-drivers-common/detect/sl-modem.py return value: None
=== modaliases in the system ===
platform:acpi-cpufreq
acpi:INT33A1:PNP0D80:
platform:intel_rapl_msr
acpi:INTC1085:
acpi:USBC000:PNP0CA0:
acpi:PNP0C14:
wmi:05901221-D566-11D1-B2F0-00A0C9062910
wmi:0B3CBB35-E3C2-45ED-91C2-4C5A6D195D1C
wmi:97845ED0-4E6D-11DE-8A39-0800200C9A66
acpi:PNP0C0C:
acpi:ACPI000C:
platform:rtc-efi
acpi:ASUS2018:
wmi:A6FEA33E-DABF-46F5-BFC8-460D961BEC9F
wmi:2BC49DEF-7B15-4F05-8BB7-EE37B9547C0B
acpi:ASUS9001:
platform:coretemp
acpi:INTC1041:
acpi:PNP0C0E:
acpi:MSFT0101:
acpi:ACPI000E:
platform:efivars
wmi:88765ADC-4FFE-4824-A48C-C68BBD71821B
wmi:FEF38251-8214-4D1F-A98A-71A010EBFF7B
serio:ty01pr00id00ex00
input:b0011v0001p0002eAB41-e0,1,4,11,14,k71,72,73,74,75,76,77,79,7A,7B,7C,7D,7E,7F,80,8C,8E,8F,9B,9C,9D,9E,9F,A3,A4,A5,A6,AC,AD,B7,B8,B9,BA,BB,BC,BD,BE,BF,C0,C1,C2,D9,E2,ram4,l0,1,2,sfw
platform:asus-nb-wmi
input:b0019v0000p0000e0000-e0,1,4,14,k71,72,73,8C,94,95,96,98,A3,A4,A5,A6,A9,B7,B8,B9,CA,CB,D4,D7,E0,E1,E2,E3,E5,E6,ED,EE,F0,F7,F8,1D6,1E2,212,213,230,27A,ram4,lsfw
acpi:NVDA0820:
wmi:1F13AB7F-6220-4210-8F8E-8BB5E71EE969
platform:pcspkr
pci:v00008086d00007A3Dsv00000000sd00000000bc06sc04i00
pci:v000010ECd00008168sv00001043sd0000205Fbc02sc00i00
wmi:603E9613-EF25-4338-A3D0-C46177516DB7
pci:v00008086d0000A74Fsv00000000sd00000000bc08sc80i00
pci:v00008086d00007A0Csv00001043sd000014D3bc06sc01i00
acpi:PNP0C0A:
acpi:PNP0C0D:
acpi:PNP0103:
acpi:INTC1046:
pci:v00008086d0000A70Dsv00001043sd000014D3bc06sc04i00
pci:v000010DEd00002860sv00001043sd000014D3bc03sc00i00
pci:v000010DEd000022BDsv00001043sd000014D3bc04sc03i00
hdaudio:v10DE00A6r00100100a01
input:b0000v0000p0000e0000-e0,5,kramlsfw6,8,
pci:v00008086d00007A79sv00000000sd00000000bc0Csc80i00
acpi:CSC3551:
platform:pxa2xx-spi
spi:cs35l41-hda
platform:idma64
pci:v00008086d0000A71Dsv00001043sd000014D3bc11sc80i00
pci:v00008086d00007A70sv00008086sd00000094bc02sc80i00
pci:v00008086d00007A68sv00001043sd000014D3bc07sc80i00
mei::6861ec7b-d07a-4673-856c-7f22b4d55769:02:
mei::3c4852d6-d47b-4f46-b05e-b5edc1aa440e:01:
mei::dba4d603-d7ed-4931-8823-17ad585705d5:01:
mei::dd17041c-09ea-4b17-a271-5b989867ec65:02:
mei::082ee5a7-7c25-470a-9643-0c06f0466ea1:00:
mei::42b3ce2f-bd9f-485a-96ae-26406230b1ff:01:
mei::309dcde8-ccb1-4062-8f78-600115a34327:01:
mei::55213584-9a29-4916-badf-0fb7ed682aeb:02:
mei::8e6a6715-9abc-4043-88ef-9e39c6f63e0f:02:
mei::8c2f4425-77d6-4755-aca3-891fdbc66a58:01:
mei::fbf6fcf1-96cf-4e2e-a6a6-1bab8cbe36b1:01:
mei::b638ab7e-94e2-4ea2-a552-d1c54b627f04:01:
mei::5565a099-7fe2-45c1-a22b-d7e9dfea9a2e:01:
pci:v00008086d00007A44sv00000000sd00000000bc06sc04i00
pci:v00002646d00005017sv00002646sd00005017bc01sc08i02
pci:v00008086d00007A24sv00001043sd000014D3bc0Csc80i00
spi:spi-nor
pci:v00008086d00007A50sv00001043sd00001C9Fbc04sc03i80
hdaudio:v80862818r00100000a01
hdaudio:v10EC0294r00100004a01
input:b0000v0000p0000e0000-e0,5,kramlsfw4,
input:b0000v0000p0000e0000-e0,5,kramlsfw2,
pci:v00008086d0000A702sv00001043sd000014D3bc06sc00i00
pci:v00008086d00007A34sv00000000sd00000000bc06sc04i00
pci:v00001344d00005413sv00001344sd00002100bc01sc08i02
pci:v00008086d00007A4Csv00001043sd000014D3bc0Csc80i00
acpi:ASUF1205:PNP0C50:
hid:b0018g0004v00002808p00000106
input:b0018v2808p0106e0100-e0,1,2,4,k110,111,r0,1,8,B,am4,lsfw
input:b0018v2808p0106e0100-e0,1,3,4,k110,145,148,14A,14D,14E,14F,ra0,1,2F,35,36,37,39,m5,lsfw
pci:v00008086d00007A48sv00000000sd00000000bc06sc04i00
pci:v00008086d00001133sv00001043sd00001F02bc06sc04i00
pci:v00008086d00001134sv00001043sd00001F02bc0Csc03i40
pci:v00008086d00001135sv00000000sd00000000bc0Csc03i30
usb:v1D6Bp0002d0617dc09dsc00dp01ic09isc00ip00in00
usb:v1D6Bp0003d0617dc09dsc00dp03ic09isc00ip00in00
pci:v00008086d00007A30sv00000000sd00000000bc06sc04i00
pci:v00008086d00007A27sv00000000sd00000000bc05sc00i00
pci:v00008086d0000A788sv00001043sd000014D3bc03sc80i00
pci:v00008086d00007A60sv00001043sd0000201Fbc0Csc03i30
usb:v8087p0033d0000dcE0dsc01dp01icE0isc01ip01in00
usb:v8087p0033d0000dcE0dsc01dp01icE0isc01ip01in01
usb:v0B05p19B6d0316dc00dsc00dp00ic03isc01ip01in00
hid:b0003g0001v00000B05p000019B6
input:b0003v0B05p19B6e0110-e0,1,2,3,4,11,14,k71,72,73,74,75,77,79,7A,7B,7C,7D,7E,7F,80,81,82,83,84,85,86,87,88,89,8A,8B,8C,8E,8F,90,94,95,96,98,9B,9C,9E,9F,A1,A3,A4,A5,A6,A7,A8,A9,AB,AC,AD,AE,B0,B1,B2,B3,B4,B5,B7,B8,B9,BA,BB,BC,BD,BE,BF,C0,C1,C2,CA,CB,CE,CF,D0,D1,D2,D4,D8,D9,DB,E0,E1,E4,E5,E6,EA,EB,F0,F1,F4,F5,F7,F8,100,110,111,112,113,114,161,162,166,16A,16E,172,174,176,177,178,179,17A,17B,17C,17D,17F,180,182,183,185,188,189,18C,18D,18E,18F,190,191,192,193,195,197,198,199,19A,19C,1A0,1A1,1A2,1A3,1A4,1A5,1A6,1A7,1A8,1A9,1AA,1AB,1AC,1AD,1AE,1AF,1B0,1B1,1B7,1BA,1D1,240,241,242,243,244,245,246,247,249,24A,24B,24C,24D,250,251,r0,1,6,8,B,C,a20,28,m4,l0,1,2,3,4,sfw
usb:v322Ep2122d1118dcEFdsc02dp01ic0Eisc02ip00in01
usb:v322Ep2122d1118dcEFdsc02dp01ic0Eisc01ip00in00
usb:v17EFp60D1d0100dc00dsc00dp00ic03isc01ip02in00
hid:b0003g0001v000017EFp000060D1
input:b0003v17EFp60D1e0110-e0,1,2,4,k110,111,112,113,114,r0,1,6,8,B,C,am4,lsfw
input:b0003v17EFp60D1e0110-e0,1,4,k74,8E,8F,ram4,lsfw
input:b0003v17EFp60D1e0110-e0,14,kramlsfw
input:b0003v17EFp60D1e0110-e0,1,2,3,4,k71,72,73,74,77,80,82,83,85,86,87,88,89,8A,8B,8C,8E,90,96,98,9B,9C,9E,9F,A1,A3,A4,A5,A6,A7,A8,A9,AB,AC,AD,AE,B1,B2,B5,CE,CF,D0,D1,D2,D4,D8,D9,DB,E0,E1,E4,E5,E6,EA,EB,F0,F1,F4,100,161,162,166,16A,16E,172,174,176,177,178,179,17A,17B,17C,17D,17F,180,182,183,185,188,189,18C,18D,18E,18F,190,191,192,193,195,197,198,199,19A,19C,1A0,1A1,1A2,1A3,1A4,1A5,1A6,1A7,1A8,1A9,1AA,1AB,1AC,1AD,1AE,1AF,1B0,1B1,1B7,1BA,240,241,242,243,244,245,246,247,249,24A,24B,24C,24D,250,251,r6,C,a20,m4,lsfw
pci:v00008086d00007A23sv00001043sd000014D3bc0Csc05i00
platform:iTCO_wdt
cpu:type:x86,ven0000fam0006mod00B7:feature:,0000,0001,0002,0003,0004,0005,0006,0007,0008,0009,000B,000C,000D,000E,000F,0010,0011,0013,0015,0016,0017,0018,0019,001A,001B,001C,001D,001F,002B,0034,003A,003B,003D,0068,006A,006B,006C,006D,006F,0070,0072,0074,0075,0076,0078,0079,007C,007F,0080,0081,0082,0083,0084,0085,0087,0088,0089,008B,008C,008D,008E,008F,0091,0093,0094,0095,0096,0097,0098,0099,009A,009B,009C,009D,009E,00C0,00C5,00C8,00E1,00E3,00EA,00F0,00F1,00F9,00FA,00FB,00FE,00FF,0100,0101,0102,0103,0111,0120,0121,0123,0125,0126,0127,0128,0129,012A,012D,0132,0133,0134,0137,0138,0139,013D,0140,0141,0142,0143,0164,0165,0166,016B,0171,0177,017B,0184,018B,0196,01C0,01C1,01C2,01C4,01C5,01C6,01C7,01C8,01C9,01CA,01CB,01CE,01CF,01D0,01D1,01D2,01D3,01D4,01D6,01D7,01F9,0202,0203,0204,0205,0207,0208,0209,020A,0216,0217,021B,021C,021F,0244,024A,024E,024F,0253,0254,025A,025B,025C,025D,025E,025F,0282,02A2,02A3,02AE
dmi:bvnAmericanMegatrendsInternational,LLC.:bvrG614JI.331:bd11/11/2024:br5.27:efr0.81:svnASUSTeKCOMPUTERINC.:pnROGStrixG614JI_G614JI:pvr1.0:rvnASUSTeKCOMPUTERINC.:rnG614JI:rvr1.0:cvnASUSTeKCOMPUTERINC.:ct10:cvr1.0:sku:
acpi:LNXSYSTM:
acpi:LNXSYBUS:
acpi:ACPI0007:
acpi:PNP0C0F:
acpi:PNP0C02:
input:b0019v0000p0001e0000-e0,1,k74,8F,ramlsfw
acpi:INT340E:PNP0C02:
input:b0019v0000p0003e0000-e0,1,k8E,ramlsfw
acpi:PNP0A08:PNP0A03:
acpi:LNXPOWER:
acpi:LNXVIDEO:
input:b0019v0000p0006e0000-e0,1,kE0,E1,E3,F1,F2,F3,F4,F5,ramlsfw
acpi:ACPI0003:
acpi:ATK3001:PNP030B:
input:b0019v0000p0005e0000-e0,5,kramlsfw0,
acpi:INTC109C:PNP0C02:
acpi:PNP0100:
acpi:PNP0000:
acpi:PRP00001:PNP0A05:
acpi:PNP0C0B:
=== matching driver packages ===

&lt;/code&gt;
      &lt;/quote&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45758392</guid><pubDate>Thu, 30 Oct 2025 10:35:00 +0000</pubDate></item><item><title>How We Found 7 TiB of Memory Just Sitting Around</title><link>https://render.com/blog/how-we-found-7-tib-of-memory-just-sitting-around</link><description>&lt;doc fingerprint="aec895875436e7e0"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Inside the hypercube of bad vibes: the namespace dimension&lt;/head&gt;
    &lt;p&gt;Credits: Hyperkube from gregegan.net, diagram (modified) from Kubernetes community repo&lt;/p&gt;
    &lt;p&gt;Plenty of teams run Kubernetes clusters bigger than ours. More nodes, more pods, more ingresses, you name it. In most dimensions, someone out there has us beat.&lt;/p&gt;
    &lt;p&gt;There's one dimension where I suspect we might be near the very top: namespaces. I say that because we keep running into odd behavior in any process that has to keep track of them. In particular, anything that listwatches them ends up using a surprising amount of memory and puts real pressure on the apiserver. This has become one of those scaling quirks you only really notice once you hit a certain threshold. As this memory overhead adds up, efficiency decreases: each byte we have to use for management is a byte we can't put towards user services.&lt;/p&gt;
    &lt;p&gt;The problem gets significantly worse when a daemonset needs to listwatch namespaces or network policies (netpols, which we define per namespace). Since daemonsets run a pod on every node, each of those pods independently performs a listwatch on the same resources. As a result, memory usage increases with the number of nodes.&lt;/p&gt;
    &lt;p&gt;Even worse, these listwatch calls can put significant load on the apiserver. If many daemonset pods restart at once, such as during a rollout, they can overwhelm the server with requests and cause real disruption.&lt;/p&gt;
    &lt;head rend="h2"&gt;Following the memory trail&lt;/head&gt;
    &lt;p&gt;A few months ago, if you looked at our nodes, the largest memory consumers were often daemonsets. In particular, Calico and Vector which handle configuring networking and log collection respectively.&lt;/p&gt;
    &lt;p&gt;We had already done some work to reduce Calico’s memory usage, working closely with the project’s maintainers to make it scale more efficiently. That optimization effort was a big win for us, and it gave us useful insight into how memory behaves when namespaces scale up.&lt;/p&gt;
    &lt;p&gt;To support that work, we set up a staging cluster with several hundred thousand namespaces. We knew that per-namespace network policies (netpols) were the scaling factor that stressed Calico, so we reproduced those conditions to validate our changes.&lt;/p&gt;
    &lt;p&gt;While running those tests, we noticed something strange. Vector, another daemonset, also started consuming large amounts of memory.&lt;/p&gt;
    &lt;p&gt;The pattern looked familiar, and we knew we had another problem to dig into. Vector obviously wasn’t looking at netpols but after poking around a bit we found it was listwatching namespaces from every node in order to allow referencing namespace labels per-pod in the kubernetes logs source.&lt;/p&gt;
    &lt;head rend="h2"&gt;Do we really need these labels?&lt;/head&gt;
    &lt;p&gt;That gave us an idea: what if Vector didn’t need to use namespaces at all? Was that even possible?&lt;/p&gt;
    &lt;p&gt;As it turns out, yes, they were in use in our configuration, but only to check whether a pod belonged to a user namespace.&lt;/p&gt;
    &lt;p&gt;Conveniently, we realized we could hackily describe that condition in another way, and the memory savings were absolutely worth it.&lt;/p&gt;
    &lt;head rend="h2"&gt;Building the fix (and breaking the logs)&lt;/head&gt;
    &lt;p&gt;At that point, we were feeling a bit too lucky. We reached out to the Vector maintainers to ask whether disabling this behavior would actually work, and whether they would be open to accepting a contribution if we made it happen.&lt;/p&gt;
    &lt;p&gt;From there, all that was left was to try it. The code change was straightforward. We added a new config option and threaded it through the relevant parts of the codebase.&lt;/p&gt;
    &lt;p&gt;After a few hours of flailing at rustc, a Docker image finally built and we were ready to test the theory. The container ran cleanly with no errors in the logs, which seemed promising.&lt;/p&gt;
    &lt;p&gt;But then we hit a snag. Nothing was being emitted. No logs at all. I couldn’t figure out why.&lt;/p&gt;
    &lt;p&gt;Thankfully, our pal Claude came to the rescue:&lt;/p&gt;
    &lt;p&gt;I rebuilt it (which took like 73 hours because Rust), generated a new image, updating staging, and watched nervously. This time, logs were flowing like normal and…&lt;/p&gt;
    &lt;head rend="h2"&gt;The numbers don’t add up&lt;/head&gt;
    &lt;p&gt;The change saved 50 percent of memory. A huge win. We were ready to wrap it up and ship to production.&lt;/p&gt;
    &lt;p&gt;But then Hieu, one of our teammates, asked a very good question.&lt;/p&gt;
    &lt;p&gt;He was right, something didn’t add up.&lt;/p&gt;
    &lt;p&gt;A few hours later, after repeatedly running my head into a wall, I still hadn’t found anything. There was still a full gibibyte of memory unaccounted for. My whole theory about how this worked was starting to fall apart.&lt;/p&gt;
    &lt;p&gt;I even dropped into the channel to see if anyone had Valgrind experience:&lt;/p&gt;
    &lt;p&gt;Me (later in channel): anybody got a background in valgrind? seems pretty straightforward to get working so far but it won’t end up interfacing with pyroscope. we’ll have to exec in and gdb manually.&lt;lb/&gt;The answer was no.&lt;/p&gt;
    &lt;p&gt;In a last-ditch effort to profile it again, I finally saw the answer. It had been staring me in the face the whole time.&lt;/p&gt;
    &lt;p&gt;We actually had two kubernetes_logs sources on user nodes. I had only set the flag on one of them. Once I applied it to both, memory usage dropped to the level we had seen in staging before the extra namespaces were added.&lt;/p&gt;
    &lt;head rend="h2"&gt;Shipping it&lt;/head&gt;
    &lt;p&gt;I put together a full pull request, and after waiting a little while, it shipped!&lt;/p&gt;
    &lt;p&gt;Around the same time, our colleague Mark happened to be on-call. He did his usual magic — pulled everything together, tested the rollout in staging, and got it shipped to production.&lt;/p&gt;
    &lt;p&gt;I’ll let the results speak for themselves.&lt;/p&gt;
    &lt;p&gt;Our largest cluster saw a 1 TiB memory drop, with savings across our other clusters adding up to a total of just over 7 TiB.&lt;/p&gt;
    &lt;head rend="h2"&gt;7 TiB later&lt;/head&gt;
    &lt;p&gt;Debugging infrastructure at scale is rarely about one big “aha” moment. It’s often the result of many small questions, small changes, and small wins stacked up until something clicks.&lt;/p&gt;
    &lt;p&gt;In this case, it started with a memory chart that didn’t look quite right, a teammate asking the right question at the right time, and a bit of persistence. When applied to our whole infrastructure, that simple fix freed up 7 TiB of memory, reduced risk during rollouts, and made the system easier to reason about.&lt;/p&gt;
    &lt;p&gt;Huge thanks to Hieu for pushing the investigation forward, Mark for shipping it smoothly, and the Vector maintainers for being responsive and open to the change.&lt;/p&gt;
    &lt;p&gt;If you’re running daemonsets at scale and seeing unexplained memory pressure, it might be worth asking:&lt;/p&gt;
    &lt;p&gt;Do you really need those namespace labels?&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45763359</guid><pubDate>Thu, 30 Oct 2025 18:25:05 +0000</pubDate></item><item><title>Leaker reveals which Pixels are vulnerable to Cellebrite phone hacking</title><link>https://arstechnica.com/gadgets/2025/10/leaker-reveals-which-pixels-are-vulnerable-to-cellebrite-phone-hacking/</link><description>&lt;doc fingerprint="27564c1580bdbb20"&gt;
  &lt;main&gt;
    &lt;p&gt;Despite being a vast repository of personal information, smartphones used to have little by way of security. That has thankfully changed, but companies like Cellebrite offer law enforcement tools that can bypass security on some devices. The company keeps the specifics quiet, but an anonymous individual recently logged in to a Cellebrite briefing and came away with a list of which of Google’s Pixel phones are vulnerable to Cellebrite phone hacking.&lt;/p&gt;
    &lt;p&gt;This person, who goes by the handle rogueFed, posted screenshots from the recent Microsoft Teams meeting to the GrapheneOS forums (spotted by 404 Media). GrapheneOS is an Android-based operating system that can be installed on select phones, including Pixels. It ships with enhanced security features and no Google services. Because of its popularity among the security-conscious, Cellebrite apparently felt the need to include it in its matrix of Pixel phone support.&lt;/p&gt;
    &lt;p&gt;The screenshot includes data on the Pixel 6, Pixel 7, Pixel 8, and Pixel 9 family. It does not list the Pixel 10 series, which launched just a few months ago. The phone support is split up into three different conditions: before first unlock, after first unlock, and unlocked. The before first unlock (BFU) state means the phone has not been unlocked since restarting, so all data is encrypted. This is traditionally the most secure state for a phone. In the after first unlock (AFU) state, data extraction is easier. And naturally, an unlocked phone is open season on your data.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45766501</guid><pubDate>Thu, 30 Oct 2025 23:12:10 +0000</pubDate></item><item><title>Myths Programmers Believe about CPU Caches (2018)</title><link>https://software.rajivprab.com/2018/04/29/myths-programmers-believe-about-cpu-caches/</link><description>&lt;doc fingerprint="e2561c9267702f31"&gt;
  &lt;main&gt;
    &lt;p&gt;As a computer engineer who has spent half a decade working with caches at Intel and Sun, I’ve learnt a thing or two about cache-coherency. This was one of the hardest concepts to learn back in college – but once you’ve truly understood it, it gives you a great appreciation for system design principles.&lt;/p&gt;
    &lt;p&gt;You might be wondering why you as a software developer should care about CPU cache-design. For one thing, many of the concepts learnt in cache-coherency are directly applicable to distributed-system-architecture and database-isolation-levels as well. For instance, understanding how coherency is implemented in hardware caches, can help in better understanding strong-vs-eventual consistency. It can spur ideas on how to better enforce consistency in distributed systems, using the same research and principles applied in hardware.&lt;/p&gt;
    &lt;p&gt;For another thing, misconceptions about caches often lead to false assertions, especially when it comes to concurrency and race conditions. For example, the common refrain that concurrent programming is hard because “different cores can have different/stale values in their individual caches”. Or that the reason we need volatiles in languages like Java, is to “prevent shared-data from being cached locally”, and force them to be “read/written all the way to main memory”.&lt;/p&gt;
    &lt;p&gt;Such misconceptions are mostly harmless (and maybe even helpful), but can also lead to bad design decisions. For instance, developers can start to believe that they are insulated from the above concurrency bugs, when working with single-core-systems. In reality, even single-core systems are at risk of concurrency bugs, if the appropriate concurrency constructs aren’t used.&lt;/p&gt;
    &lt;p&gt;For another, if volatile variables were truly written/read from main-memory every single time, they would be horrendously slow – main-memory references are 200x slower than L1 cache references. In reality, volatile-reads (in Java) can often be just as cheap as a L1 cache reference, putting to rest the notion that volatile forces reads/writes all the way to main memory. If you’ve been avoiding the use of volatiles because of performance concerns, you might have been a victim of the above misconceptions.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Importance of Being Coherent&lt;/head&gt;
    &lt;p&gt;But if different cores each have their own private cache, storing copies of the same data, wouldn’t that naturally lead to data mismatches as they start issuing writes? The answer: hardware caches on modern x86 CPUs like Intel’s, are kept in-sync with one another. These caches aren’t just dumb memory storage units, as many developers seem to think. Rather, there are very intricate protocols and logics, embedded in every cache, communicating with other caches, enforcing coherency across all threads. And all this is happening at the hardware level, meaning that we as software/compiler/systems developers don’t have to deal with it.&lt;/p&gt;
    &lt;p&gt;A quick word about what I mean when I say that caches are “in sync”. There is a great wealth of nuance in this topic, but to simplify greatly, we mean the following: If 2 different threads, anywhere in the system, read from the same memory address, they should never simultaneously read different values.&lt;/p&gt;
    &lt;p&gt;For a quick example of how non-coherent caches can violate the above rule, simply refer to the first section of this tutorial. No modern x86 CPU behaves the way the tutorial describes it, but a buggy processor certainly can. Everything discussed here is a means towards one simple end: preventing such data-mismatches from happening.&lt;/p&gt;
    &lt;p&gt;A widely used protocol used to enforce coherency amongst caches, is known as the MESI protocol. The details of this protocol are entirely abstracted away from software, which gives CPU architects tremendous flexibility to experiment and innovate on its nuances with every new product or iteration. If you peek under the covers you’ll find that every CPU has its own variant of MESI, with its own unique benefits, tradeoffs and potential for unique bugs. However, these variants all share a great deal in common. And that’s the following: each line of data sitting in a cache, is tagged with one of the following states:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Modified (M) &lt;list rend="ol"&gt;&lt;item&gt;This data has been modified, and differs from main memory&lt;/item&gt;&lt;item&gt;This data is the source-of-truth, and all other data elsewhere is stale&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Exclusive (E) &lt;list rend="ol"&gt;&lt;item&gt;This data has not been modified, and is in sync with the data in main memory&lt;/item&gt;&lt;item&gt;No other sibling cache has this data&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Shared (S) &lt;list rend="ol"&gt;&lt;item&gt;This data has not been modified, and is in sync with the data elsewhere&lt;/item&gt;&lt;item&gt;There are other sibling caches that (may) also have this same data&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Invalid (I) &lt;list rend="ol"&gt;&lt;item&gt;This data is stale, and should never ever be used&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Cache coherency can now be accomplished as long as we enforce and update the above states. Let’s look at a few examples for a CPU with 4 cores, each of which has its own L1 cache, along with a global on-chip L2 cache.&lt;/p&gt;
    &lt;head rend="h2"&gt;Memory Write&lt;/head&gt;
    &lt;p&gt;Suppose a thread on core-1 wants to write to address 0xabcd. The following are some possible sequence of events.&lt;/p&gt;
    &lt;head rend="h3"&gt;Cache Hit&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;L1-1 has the data in E or M state&lt;/item&gt;
      &lt;item&gt;L1-1 performs the write. All done &lt;list rend="ol"&gt;&lt;item&gt;No other cache has the data, so it is safe to write to it immediately&lt;/item&gt;&lt;item&gt;The state of the cache-line is set to M, since it is now modified&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Local Cache Miss, Sibling Cache Hit&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;L1-1 has the data in S state &lt;list rend="ol"&gt;&lt;item&gt;This implies that another sibling cache might have the data&lt;/item&gt;&lt;item&gt;This same flow is also used if L1-1 doesn’t have the data at all&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;L1-1 sends a Request-For-Ownership to the L2 cache&lt;/item&gt;
      &lt;item&gt;L2 looks up its directory and sees that L1-2 currently has the data in S state&lt;/item&gt;
      &lt;item&gt;L2 sends a snoop-invalidate to L1-2&lt;/item&gt;
      &lt;item&gt;L1-2 marks its data as being Invalid (I)&lt;/item&gt;
      &lt;item&gt;L1-2 sends an Ack to L2&lt;/item&gt;
      &lt;item&gt;L2 sends an Ack, along with the latest data, to L1-1 &lt;list rend="ol"&gt;&lt;item&gt;L2 keeps track of the fact that L1-1 has the data for this address in E state&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;L1-1 now has the latest data, as well as permission to enter E state&lt;/item&gt;
      &lt;item&gt;L1-1 performs the write, and changes the state of that data to M&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Memory Read&lt;/head&gt;
    &lt;p&gt;Now suppose a thread on core-2 wants to read from address 0xabcd. The following are some possible sequences of events.&lt;/p&gt;
    &lt;head rend="h3"&gt;Cache Hit&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;L1-2 has the data in S or E or M state&lt;/item&gt;
      &lt;item&gt;L1-2 reads the data and returns it to the thread. All done&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Local Cache Miss, Parent Cache Miss&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;L1-2 has the data in I (invalid) state, meaning it’s not allowed to use it&lt;/item&gt;
      &lt;item&gt;L1-2 sends a Request-for-Share to the L2 cache&lt;/item&gt;
      &lt;item&gt;L2 does not have the data either. It reads the data from memory&lt;/item&gt;
      &lt;item&gt;L2 gets back the data from memory&lt;/item&gt;
      &lt;item&gt;L2 sends this data to L1-2, along with permission to enter S state &lt;list rend="ol"&gt;&lt;item&gt;L2 keeps track of the fact that L1-2 has this data in S-state&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;L1-2 gets the data, stores it in its cache, and sends it to the thread&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Local Cache Miss, Parent Cache Hit&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;L1-2 has the data in I state&lt;/item&gt;
      &lt;item&gt;L1-2 sends a Request-for-S to the L2 cache&lt;/item&gt;
      &lt;item&gt;L2 sees that L1-1 has the data in S state&lt;/item&gt;
      &lt;item&gt;L2 sends an Ack to L1-2, along with the data, and permission to enter S state&lt;/item&gt;
      &lt;item&gt;L1-2 gets the data, stores it in its cache, and sends it to the thread&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Local Cache Miss, Sibling Cache Hit&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;L1-2 has the data in I state&lt;/item&gt;
      &lt;item&gt;L1-2 sends a Request-for-S to the L2 cache&lt;/item&gt;
      &lt;item&gt;L2 sees that L1-1 has the data in E (or M) state&lt;/item&gt;
      &lt;item&gt;L2 sends a snoop-share to L1-1&lt;/item&gt;
      &lt;item&gt;L1-1 downgrades its state to an S&lt;/item&gt;
      &lt;item&gt;L1-1 sends an Ack to L2, along with the modified data if applicable&lt;/item&gt;
      &lt;item&gt;L2 sends an Ack to L1-2, along with the data, and permission to enter S state&lt;/item&gt;
      &lt;item&gt;L1-2 gets the data, stores it in its cache, and sends it to the thread&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Variations&lt;/head&gt;
    &lt;p&gt;The above are just some of the possible scenarios that can occur. In reality, there are numerous variations of the above design, and no 2 implementations are the same. For example, some designs have an O/F state. Some have write-back caches, whereas others use write-through. Some use snoop-broadcasts, while others use a snoop-filter. Some have inclusive caches and others have exclusive caches. The variations are endless, and we haven’t even discussed store-buffers!&lt;/p&gt;
    &lt;p&gt;The above example also considers a simple processor with only 2 levels of caching, but note that this same protocol can also be applied recursively. You could easily add an L3 cache, which in turn coordinates multiple L2s, using the exact same protocol as above. You can also have a multi-processor system, with “Home Agents” that coordinate across multiple L3 caches on completely different chips.&lt;/p&gt;
    &lt;p&gt;In each scenario, each cache only needs to communicate with its parent (to get data/permissions), and its children (to grant/revoke data/permissions). And all this can be accomplished in a manner that’s invisible to the software thread. From the perspective of the software application, the memory subsystem appears to be a single, coherent, monolith … with very variable latencies.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why Synchronization Still Matters&lt;/head&gt;
    &lt;p&gt;One final word, now that we’ve discussed the awesome power and coherency of your computer’s memory system. If caches are so in-sync with one another, why do we need volatiles at all in languages like Java?&lt;/p&gt;
    &lt;p&gt;That’s a very complicated question that’s better answered elsewhere, but let me just drop one partial hint. Data that’s read into CPU registers, is not kept in sync with data in cache/memory. The software compiler makes all sorts of optimizations when it comes to loading data into registers, writing it back to the cache, and even reordering of instructions. This is all done assuming that the code will be run single-threaded. Hence why any data that is at risk of race-conditions, needs to be manually protected through concurrency algorithms and language constructs such as atomics and volatiles.&lt;/p&gt;
    &lt;p&gt;In the case of Java volatiles, part of the solution is to force all reads/writes to bypass the local registers, and immediately trigger cache reads/writes instead. As soon as the data is read/written to the L1 cache, the hardware-coherency protocol takes over and provides guaranteed coherency across all global threads. Thus ensuring that if multiple threads are reading/writing to the same variable, they are all kept in sync with one another. And this is how you can achieve inter-thread coordination in as little as 1ns.&lt;/p&gt;
    &lt;p&gt;Hacker News – 2018/08&lt;lb/&gt;Hacker News – 2019/11&lt;lb/&gt;/r/programming – 2019/11&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45767178</guid><pubDate>Fri, 31 Oct 2025 00:46:56 +0000</pubDate></item><item><title>My Impressions of the MacBook Pro M4</title><link>https://michael.stapelberg.ch/posts/2025-10-31-macbook-pro-m4-impressions/</link><description>&lt;doc fingerprint="f7cc1c0193a689f5"&gt;
  &lt;main&gt;
    &lt;p&gt;I have been using a MacBook Pro M4 as my portable computer for the last half a year and wanted to share a few short impressions. As always, I am not a professional laptop reviewer, so in this article you won’t find benchmarks, just subjective thoughts!&lt;/p&gt;
    &lt;p&gt;Back in 2021, I wrote about the MacBook Air M1, which was the first computer I used that contained Apple’s own ARM-based CPU. Having a silent laptop with long battery life was a game-changer, so I wanted to keep those properties.&lt;/p&gt;
    &lt;p&gt;When the US government announced tariffs, I figured I would replace my 4-year old MacBook Air M1 with a more recent model that should last a few more years. Ultimately, Apple’s prices remained stable, so, in retrospect, I could have stayed with the M1 for a few more years. Oh well.&lt;/p&gt;
    &lt;head rend="h2"&gt;The nano-textured display&lt;/head&gt;
    &lt;p&gt;I went to the Apple Store to compare the different options in person. Specifically, I was curious about the display and whether the increased weight and form factor of the MacBook Pro (compared to a MacBook Air) would be acceptable. Another downside of the Pro model is that it comes with a fan, and I really like absolutely quiet computers. Online, I read from other MacBook Pro owners that the fan mostly stays off.&lt;/p&gt;
    &lt;p&gt;In general, I would have preferred to go with a MacBook Air because it has enough compute power for my needs and I like the case better (no ventilation slots), but unfortunately only the MacBook Pro line has the better displays.&lt;/p&gt;
    &lt;p&gt;Why aren’t all displays nano-textured? The employee at the Apple Store presented the trade-off as follows: The nano texture display is great at reducing reflections, at the expense of also making the picture slightly less vibrant.&lt;/p&gt;
    &lt;p&gt;I could immediately see the difference when placing two laptops side by side: The bright Apple Store lights showed up very prominently on the normal display (left), and were almost not visible at all on the nano texture display (right):&lt;/p&gt;
    &lt;p&gt;Personally, I did not perceive a big difference in “vibrancy”, so my choice was clear: I’ll pick the MacBook Pro over the MacBook Air (despite the weight) for the nano texture display!&lt;/p&gt;
    &lt;p&gt;After using the laptop in a number of situations, I am very happy with this choice. In normal scenarios, I notice no reflections at all (where my previous laptop did show reflections!). This includes using the laptop on a train (next to the window), or using the laptop outside in daylight.&lt;/p&gt;
    &lt;head rend="h2"&gt;Specs: M4 or M4 Pro?&lt;/head&gt;
    &lt;p&gt;(When I chose the new laptop, Apple’s M4 chips were current. By now, they have released the first devices with M5 chips.)&lt;/p&gt;
    &lt;p&gt;I decided to go with the MacBook Pro with M4 chip instead of the M4 Pro chip because I don’t need the extra compute, and the M4 needs less cooling — the M4 Pro apparently runs hotter. This increases the chance of the fan staying off.&lt;/p&gt;
    &lt;p&gt;Here are the specs I ended up with:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;14" Liquid Retina XDR Display with nano texture&lt;/item&gt;
      &lt;item&gt;Apple M4 Chip (10 core CPU, 10 core GPU)&lt;/item&gt;
      &lt;item&gt;32 GB RAM (this is the maximum!), 2 TB SSD (enough for this computer)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Impressions&lt;/head&gt;
    &lt;p&gt;One thing I noticed is that the MacBook Pro M4 sometimes gets warm, even when it is connected to power, but is suspended to RAM (and has been fully charged for hours). I’m not sure why.&lt;/p&gt;
    &lt;p&gt;Luckily, the fan indeed stays silent. I think I might have heard it spin up once in half a year or so?&lt;/p&gt;
    &lt;p&gt;The battery life is amazing! The previous MacBook Air M1 had amazing all-day battery life already, and this MacBook Pro M4 lasts even longer. For example, watching videos on a train ride (with VLC) for 3 hours consumed only 10% of battery life. I generally never even carry the charger.&lt;/p&gt;
    &lt;p&gt;Because of that, Apple’s re-introduction of MagSafe, a magnetic power connector (so you don’t damage the laptop when you trip over it), is nice-to-have but doesn’t really make much of a difference anymore. In fact, it might be better to pack a USB-C cable when traveling, as that makes you more flexible in how you use the charger.&lt;/p&gt;
    &lt;head rend="h2"&gt;120 Hz display&lt;/head&gt;
    &lt;p&gt;I was curious whether the 120 Hz display would make a difference in practice. I mostly notice the increased refresh rate when there are animations, but not, for example, when scrolling.&lt;/p&gt;
    &lt;p&gt;One surprising discovery (but obvious in retrospect) is that even non-animations can become faster. For example, when running a Go web server on &lt;code&gt;localhost&lt;/code&gt;, I
noticed that navigating between pages by clicking links felt faster on the 120
Hz display!&lt;/p&gt;
    &lt;p&gt;The following illustration shows why that is, using a page load that takes 6ms of processing time. There are three cases (the illustration shows an average case and the worst case):&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Best case: Page load finishes just before the next frame is displayed: no delay.&lt;/item&gt;
      &lt;item&gt;Worst case: Page load finishes just after a frame is displayed: one frame of delay.&lt;/item&gt;
      &lt;item&gt;Most page loads are somewhere in between. We’ll have 0.x to 1.0 frames of delay&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As you can see, the waiting time becomes shorter when going from 60 Hz (one frame every 16.6ms) to 120 Hz (one frame every 8.3ms). So if you’re working with a system that has &amp;lt;8ms response times, you might observe actions completing (up to) twice as fast!&lt;/p&gt;
    &lt;p&gt;I don’t notice going back to 60 Hz displays on computers. However, on phones, where a lot more animations are a key part of the user experience, I think 120 Hz displays are more interesting.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;My ideal MacBook would probably be a MacBook Air, but with the nano-texture display! :)&lt;/p&gt;
    &lt;p&gt;I still don’t like macOS and would prefer to run Linux on this laptop. But Asahi Linux still needs some work before it’s usable for me (I need external display output, and M4 support). This doesn’t bother me too much, though, as I don’t use this computer for serious work.&lt;/p&gt;
    &lt;p&gt;Did you like this post? Subscribe to this blog’s RSS feed to not miss any new posts!&lt;/p&gt;
    &lt;p&gt;I run a blog since 2005, spreading knowledge and experience for over 20 years! :)&lt;/p&gt;
    &lt;p&gt;If you want to support my work, you can buy me a coffee.&lt;/p&gt;
    &lt;p&gt;Thank you for your support! ❤️&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45770304</guid><pubDate>Fri, 31 Oct 2025 10:13:40 +0000</pubDate></item><item><title>Perfetto: Swiss army knife for Linux client tracing</title><link>https://lalitm.com/perfetto-swiss-army-knife/</link><description>&lt;doc fingerprint="261004571ee704bc"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Perfetto: Swiss Army Knife for Linux Client Tracing&lt;/head&gt;
    &lt;p&gt;I gave a talk at the 2025 Tracing Summit last month titled “Perfetto: The Swiss Army Knife of Linux Client/Embedded Tracing”. My goal in this talk was to show how Linux kernel, systems and embedded developers can use Perfetto when debugging and root-causing performance issues in their respective domains. Even though the Perfetto UI is primarily built for viewing Android or Chrome traces, it is a flexible tool and can be used in many other ways!&lt;/p&gt;
    &lt;p&gt;The talk was recorded and is available on YouTube. Taking inspiration from Simon Willison, this post is an annotated presentation containing my slides and detailed notes on them. The talk also has a lot of UI demos: for these, I’ll have a screenshot but also a link to the relevant part of the video (videos are unbeatable for UI!).&lt;/p&gt;
    &lt;p&gt;First, what is Perfetto? Perfetto is fundamentally a suite of tools: it’s not just one thing but a bunch of different tools working together to help you debug and root-cause problems. This diagram shows how everything fits together, with the core parts of the Perfetto project in the center.&lt;/p&gt;
    &lt;p&gt;The recording tools for Perfetto consist of 1) an SDK for C++ apps 2) a daemon that can collect data from ftrace, /proc, /sys, and various kernel interfaces 3) another daemon that amalgamates trace data from multiple processes into a single trace file. These tools all speak the Perfetto protobuf format, a high-performance trace format designed to be very efficient to write but not to analyze or consume directly.&lt;/p&gt;
    &lt;p&gt;That’s where the trace processor comes in. It’s a C++ library that parses the protobuf format, but also a bunch of other widely used trace formats. It exposes this data via an SQL query interface to any embedding program including Perfetto UI (which is what most of this talk is about) and also to the Python API if you want to do ad-hoc scripting or analysis in Python.&lt;/p&gt;
    &lt;p&gt;There are also very common tracing/profiling formats used by the Linux community: perf.data, ftrace text format, Firefox profiler format, and many others. Perfetto supports quite a few of those directly. There’s also the Chrome JSON format (AKA the Trace Event Format) which is a simpler interchange format. It’s not the most efficient to read or write, but it does the job for a lot of use cases.&lt;/p&gt;
    &lt;p&gt;Often people write converters. They have their own tracing format, maybe proprietary, maybe open source but something we don’t know about, and it’s very common that people convert to one of the formats we understand, most commonly our protobuf or Chrome JSON formats.&lt;/p&gt;
    &lt;p&gt;The Perfetto UI is fundamentally a web-based trace visualizer, combining timeline visualization, user-driven selection/aggregation, and SQL queries all in one interface. Because it has the trace processor as a backend, it works with a bunch of different trace formats.&lt;/p&gt;
    &lt;p&gt;It’s very important to note that even though the Perfetto UI is web-based, everything happens inside your browser and trace data never leaves your system. You can even build it and host it yourself on any static server: we’ve made it extremely easy to do so!&lt;/p&gt;
    &lt;p&gt;At the start of 2025, we actually moved our whole development to GitHub. In the past, we used to develop on Android and GitHub was just a mirror. That’s no longer the case, GitHub is actually where we develop and take pull requests.&lt;/p&gt;
    &lt;p&gt;Most of this talk, I’m going to spend actually showing you how you can use the Perfetto UI to debug performance issues on Linux. I don’t want to show you an Android trace which needs a lot of context about how the Android system works and so you think, “oh, that was cool, but I didn’t really understand what was happening.”&lt;/p&gt;
    &lt;p&gt;So to make this talk more approachable, I wrote a straightforward demo program you can look at yourself! So it’s obviously not a production system but I’ve tried to make it as representative of the sort of issues we use Perfetto for every day.&lt;/p&gt;
    &lt;p&gt;It’s a Rust program which generates a Julia set and visualizes it over time. The technologies I used: Vulkan, GPU rendering and also multi-threaded CPU computation. So how it works is that computation of various parameters is happening on background threads, and then that’s being passed to the main thread for rendering.&lt;/p&gt;
    &lt;p&gt;And then, for demonstration purposes, there is a performance bug; rendering should run at 60 FPS, but every so often, the frame rate drops dramatically. Here’s what that looks like:&lt;/p&gt;
    &lt;p&gt;The code is on GitHub and if you’re interested in following along. The traces are there as well - you don’t have to collect the traces yourself, but you can if you want. All the instructions and information is in the README.&lt;/p&gt;
    &lt;p&gt;So the first suspicion we may have is that maybe it’s some CPU problem. A lot of engineers I know would reach for perf immediately whenever they see a problem like this. The main reason is that if perf can capture the problem, they can go straight to the line of code without needing to spend time debugging using more complex approaches.&lt;/p&gt;
    &lt;p&gt;You can record a perf profile with &lt;code&gt;perf record -k mono -g ./fractal_renderer&lt;/code&gt;. The standard post-processing step which I think a lot of people do would be to generate an SVG flame graph out of this with &lt;code&gt;perf script | stack-collapse-perf.pl --all | flamegraph.pl &amp;gt; fractal-frame.svg&lt;/code&gt;. Here’s how that looks like for our perf profile:&lt;/p&gt;
    &lt;p&gt;See also the interactive version of the profile&lt;/p&gt;
    &lt;p&gt;The flame graph shows the thread names at the bottom, and then stacked above are the call stacks of what the program is doing. The width represents how much time is spent in each function. In this case, the worker threads are spending most of their time in &lt;code&gt;cos&lt;/code&gt; and &lt;code&gt;sin&lt;/code&gt; operations, doing math computation. Exactly what you’d expect for this type of program. Aside: Interestingly demangling didn’t seem to work for Rust out of the box which I find a bit unusual but I didn’t dig too much into why this was.&lt;/p&gt;
    &lt;p&gt;Looking at this, nothing really stands out. There’s no smoking gun that immediately reveals the problem. But here’s the fundamental limitation: the flame graph aggregates data across the entire trace, losing the time dimension. The performance problem we’re seeing happens every 2-3 seconds - brief drops in an otherwise normally functioning program.&lt;/p&gt;
    &lt;p&gt;The flame graph shows me the aggregate, dominated by the correct behavior, making it nearly impossible to spot those occasional problematic moments. So how do I find the places where it’s doing the wrong thing?&lt;/p&gt;
    &lt;p&gt;Well, that’s maybe where Perfetto can help you out a little bit! The thing I find lots of people don’t know is that perf actually preserves timestamp information about when samples were taken: many tools drop this information but Perfetto is pretty good at showing that to you. I just need post-process the trace with &lt;code&gt;perf script &amp;gt; fractal.perftext&lt;/code&gt; to generate a text version of the profile which we can then open in the Perfetto UI&lt;/p&gt;
    &lt;p&gt;My demo talking through how to open the perf profile and navigate it starts at 9:11 in the video.&lt;/p&gt;
    &lt;p&gt;Screenshot from 9:50 in the video&lt;/p&gt;
    &lt;p&gt;The x-axis of what you’re seeing is time. And every horizontal line represents a thread: we call these lanes “tracks”. And each of the small arrowheads on the tracks are CPU samples for the associated thread.&lt;/p&gt;
    &lt;p&gt;The behavior of the worker threads over time is really interesting. Most of the lifetime of the program, it’s doing continuous computation, basically. And then there’s this period of time in the middle where there’s this very interesting staircase pattern where it seems like only one thread is running at any one time: we’ll want to keep a note of this as this is quite important.&lt;/p&gt;
    &lt;p&gt;Screenshot from 10:37 in the video&lt;/p&gt;
    &lt;p&gt;One very cool thing about Perfetto is that it allows me to quickly generate visualizations of whatever I’m selecting on the timeline. We call this “area selection” and it’s where I drag my mouse and select a region both horizontally and vertically. This is on one track but even across multiple tracks. So in the timeline it shows me the selection I’m making at the top, plus a flame graph at the bottom representing the aggregation of the samples in just that time period.&lt;/p&gt;
    &lt;p&gt;The key advantage is that I can look at individual regions of time interactively. You can also do this with &lt;code&gt;flamegraph.pl&lt;/code&gt; but you need to pre-filter the data to what you’re looking for. This assumes you already know what the problem is before you find it. I always find that a bit counterintuitive. I prefer this view where I can see everything first, then decide “I want to look at this specific part in more detail.” That’s what Perfetto lets me do.&lt;/p&gt;
    &lt;p&gt;Screenshot from 12:31 in the video&lt;/p&gt;
    &lt;p&gt;So now on to the flame graph itself: in the last year, I spent a bunch of time on improving the flame graph visualization in Perfetto UI. At Google, we have an internal tool called pprof (related to but not the same as the open-source one), and I’ve always loved the visualization it has. So I worked to make Perfetto’s flame graph look and behave very similarly.&lt;/p&gt;
    &lt;p&gt;There are a bunch of features here. You can zoom in like most flame graph, but you can also say “I only want to look at the stack starting from this point” — it gets rid of everything above and starts fresh from there. If I don’t want to see a particular function like &lt;code&gt;sin&lt;/code&gt;, I can just hide the frame and it gets merged into its parent. The search is regex-based so I can also just type the specific things I’m interested in: it’s pretty powerful.&lt;/p&gt;
    &lt;p&gt;There’s also something I don’t think I’ve seen in other visualizers (I might be wrong, please do correct me!): what I call “bottom up” view. Imagine you take all the leaves across your entire program and visualize who’s calling into them. If you have a leaf function that’s called everywhere in your program but reached from many different places, it’ll be split across your flame chart. This is the inverse — you’re looking at the leaves and asking “who is calling me?” This is particularly useful when you’re trying to optimize very low-level functions that are always at the leaf level — things like memcpy or hashmap operations.&lt;/p&gt;
    &lt;p&gt;So our main takeaway is that our worker threads all had gaps in their CPU execution in a staircase pattern. This means the threads weren’t actually on the CPU and that’s usually a sign that they’re sleeping.&lt;/p&gt;
    &lt;p&gt;But sleeping on what? Locks? Disk? Network? What exactly is happening? To answer that, I need a scheduler trace to show me the wake-up patterns, who’s being scheduled when, what type of sleep threads are in, that sort of thing.&lt;/p&gt;
    &lt;p&gt;We recently added support for trace-cmd’s text format in Perfetto (aside: there’s an open issue to support the binary format too!). For this demo, I’m collecting sched_switch and sched_waking events with &lt;code&gt;sudo trace-cmd record -e sched:sched_switch -e sched:sched_waking -C mono ./fractal-renderer-vk&lt;/code&gt; and we can open it in the UI once we do &lt;code&gt;trace-cmd report -N &amp;gt; fractal.sched&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;The demo showing off scheduler traces starts at 15:16 in the video.&lt;/p&gt;
    &lt;p&gt;Screenshot from 15:49 in the video&lt;/p&gt;
    &lt;p&gt;So this is what a scheduler trace looks like. Again as before, the x-axis is time. At the top of the trace, you’ve got the CPU scheduling tracks. For each CPU, they tell us what was scheduled on that CPU at each point in time. The white regions are where there’s nothing scheduled. As I zoom in, you start to see information like the name of the thread that’s scheduled, the TID of the thread, and so on. This is the CPU view of things, looking at it from a CPU perspective.&lt;/p&gt;
    &lt;p&gt;Screenshot from 16:48 in the video&lt;/p&gt;
    &lt;p&gt;There’s also a thread perspective on scheduling: what we call this “thread state”. This shows the scheduling state of each thread at every point in time. Dark green represents the thread running, light green represents runnable (the thread is on the runqueue so it’s eligible to run, but the scheduler hasn’t actually let it run yet), and white represents interruptible sleep (S sleep). There are also orange regions for uninterruptible sleep (D sleep), though that doesn’t show up much in this trace.&lt;/p&gt;
    &lt;p&gt;You can again see a very clear staircase-like pattern. Again, only one thread seems to be running at any one time. You’re maybe getting the sense of what the problem might be at this point.&lt;/p&gt;
    &lt;p&gt;Screenshot from 17:43 in the video&lt;/p&gt;
    &lt;p&gt;Like with the perf visualization, you can do area selections here too. I can select a region on a CPU and get tables showing time spent by each thread (shown in the screenshot above). I can also do this for thread state, you can also see that runnable time is basically negligible compared to running and sleeping, which is where most of the time is being spent.&lt;/p&gt;
    &lt;p&gt;Screenshot from 18:12 in the video&lt;/p&gt;
    &lt;p&gt;There are also scheduler-specific visualizations like run queue length and active CPU count. You can see in the problematic region, the active CPU count also went down, which makes sense.&lt;/p&gt;
    &lt;p&gt;So the scheduler trace shows when threads are sleeping, but it’s not telling us why. What was the program doing in that region? What code was it running? The sequential pattern suggests some sort of serialization—something is causing only one thread to run at a time. But we need application-level visibility.&lt;/p&gt;
    &lt;p&gt;Since this program was written in Rust, I just used the off-the-shelf &lt;code&gt;tracing&lt;/code&gt; and &lt;code&gt;tracing-perfetto&lt;/code&gt; crates; I did have to make some small modifications to tracing-perfetto that I’m hoping to upstream. These output a Perfetto trace without needing to use the Perfetto SDK. These libraries are also maintained by others: we don’t have any hand in them.&lt;/p&gt;
    &lt;p&gt;All I needed to do was integrate these into my program and then add a command line switch to write out the collected trace to a file. So I just do &lt;code&gt;./fractal_renderer --trace fractal.pftrace&lt;/code&gt;&lt;/p&gt;
    &lt;p&gt;My demo for app tracing starts at 19:37 in the video.&lt;/p&gt;
    &lt;p&gt;Screenshot from 20:06 in the video&lt;/p&gt;
    &lt;p&gt;Looking at the app trace: as before x-axis is time and each of the tracks represents a thread. Instead of scheduling activity or CPU stack samples, this time the tracks is userspace instrumentation of the program itself. Each of these rectangles is a named period of time representing what the program was doing at that time.&lt;/p&gt;
    &lt;p&gt;There are lots of different names for these in the tracing world (e.g. spans, intervals) but we call these “slices”. The main thread is rendering frames as you would expect and the workers are each computing tiles of that frame, which eventually feed back to the main thread and sync to the GPU.&lt;/p&gt;
    &lt;p&gt;Screenshot from 23:42 in the video&lt;/p&gt;
    &lt;p&gt;There’s also this thing called flows, which shows the causal links between different pieces. Render frame is calling into all these places and causing them to happen. It’s sort of similar to wakeup graphs but for user space: basically, this is what caused me to start running this function.&lt;/p&gt;
    &lt;p&gt;Screenshot from 23:51 in the video&lt;/p&gt;
    &lt;p&gt;So you can see very clearly there’s a normal region and then a region where things are taking 1.8 seconds: almost certainly the cause of the frame drops.&lt;/p&gt;
    &lt;p&gt;And if we look at the slice in question, it seems to be doing something called “update adaptive quality.” Basically, I wrote some code to dynamically change the rendering quality based on frame rate. If I’m running faster, I can render at higher quality. If I’m running slower, I can do lower quality. That’s what this adaptive quality thing is supposed to do.&lt;/p&gt;
    &lt;p&gt;But clearly something has gone wrong. I’m causing frame drops because of updates to adaptive quality. A little bit ironic, to say the least. Now we know what the program is actually doing during that time span.&lt;/p&gt;
    &lt;p&gt;So now we’ve looked at three different sources of debugging data separately. In perf, we got told there are few or no CPU samples and weird staircase patterns. In ftrace, we saw only one worker seems to be active and the rest are sleeping in interruptible sleep. And in app tracing, we see it’s because of adaptive quality updates that workers are working on, and they shouldn’t be doing it this way.&lt;/p&gt;
    &lt;p&gt;Obviously, the theory is that it’s all the same problem. But we can confirm this theory with a very new (and still experimental) feature of the UI: trace merging.&lt;/p&gt;
    &lt;p&gt;Note: as this part of Perfetto is still experimental, if you want to try it yourself, you need to go to plugins and enable the “MultiTraceOpen” plugin. Also, unlike I what say in the talk, you do not need to be on Autopush as all the features I showed in my talk are now available in Stable.&lt;/p&gt;
    &lt;p&gt;The demo showing off merged traces starts at 24:32 in the video.&lt;/p&gt;
    &lt;p&gt;Screenshot from 25:44 in the video&lt;/p&gt;
    &lt;p&gt;This is now the merged trace file containing all the different information. You can see the CPU scheduling tracks like we had in the scheduler trace, the stack samples like we had in the perf trace, and the app instrumentation, all beside each other on one timeline. You can very clearly see the adaptive quality update running, then this period where it ran, and then it was done. It’s very cool to be able to see the pattern of how my program is sleeping and where and what it was running on one timeline.&lt;/p&gt;
    &lt;p&gt;The thing is, you’ve always been able to do this with Perfetto if you collect a Perfetto trace with all of these integrated. The new capability is that this is now being brought to traces you didn’t collect with Perfetto. Collect it with whatever you like, and we’ll still manage to do this visualization. That’s the new capability we have.&lt;/p&gt;
    &lt;p&gt;Screenshot from 29:58 in the video&lt;/p&gt;
    &lt;p&gt;There’s also a query interface which we’ve been building out recently and there are some pretty powerful things you can do with these tables. As well as the flat tables of data, there’s also a more dynamic pivot table and if I click the arrow on the left, I can get into a detailed filter table, similar to a spreadsheet but optimize for things people want to do on traces.&lt;/p&gt;
    &lt;p&gt;For example, by doing an area select, I can first get a list of all the events that happened during a time region. Then using the table I can filter for things - say I only care about slices longer than some duration, like 319 microseconds for whatever reason. I can click and add a filter for things greater than this.&lt;/p&gt;
    &lt;p&gt;Screenshot from 30:11 in the video&lt;/p&gt;
    &lt;p&gt;There’s also a feature called “Show Debug Track” that’s also very powerful. The table shows rows with timestamped duration information, and this feature lets you visualize that data as a track on the timeline. It adds a track at the top showing the regions of time where these events happened—in this case, where ComputeTile took longer than a certain threshold.&lt;/p&gt;
    &lt;p&gt;This is particularly useful for correlation analysis. For example, in Android, we’re often looking at system A and trying to understand its effect on system B. We find all the places where one thing is slow, then look for correlations. Being able to see a track in the UI where you can quickly have context and say “oh, during this period of time, this other thing was happening” is invaluable. It’s probably one of our most-used features.&lt;/p&gt;
    &lt;p&gt;You can also copy the SQL query from these tables and start doing your own aggregations on top of it. This eases the burden of starting with a completely blank canvas. Instead of wondering “where do I even start querying my data? What tables is my data in?”, the UI gives you a starting query that you can build on without needing to write something from scratch.&lt;/p&gt;
    &lt;p&gt;So the dynamic quality updates were stopping the world. Perf profiling showed the problem, scheduler traces found the sleeping pattern, app tracing confirmed it was the quality adjustment code, and the single timeline view let me see everything happening at once.&lt;/p&gt;
    &lt;p&gt;Interestingly, I tried to fix this by removing the lock contention—which I thought was the bug I had introduced. But it turns out I shouldn’t have been doing this code in the workers in the first place. Even after removing the lock contention, just the CPU activity of doing that work was enough to cause frame drops. The right solution was to move it to a background thread. As part of debugging this for the demo, I discovered something even better that I could be doing.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Android and Chrome are our bread and butter—that’s what we officially support as a team, and why Google staffs us. But there are many other interesting uses.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Mesa uses Perfetto as one of its tracing systems. One thing I could have shown is collecting a Mesa trace alongside all the other traces we looked at—you can actually see what the GPU is doing at the same time, which would have been very cool, but I just didn’t have time.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;VizTracer is function tracing for Python, similar to uftrace, but you don’t have to recompile anything or do anything special.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;pthread_trace is for visualizing pthread mutex contention. The author has a very efficient way of doing this and writes protobuf using heavy use of constexpr to make it very low overhead. It’s a very interesting project.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;magic-trace uses Intel Processor Trace for function-level tracing at the processor level with lower overhead. They wrote a converter from that to the Perfetto format so you can visualize that data in Perfetto.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Qais Yousef’s sched-analyzer enriches Perfetto traces with scheduler internals. It’s a very cool project that I find particularly interesting.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;John Stultz’s all-in-one Perfetto recording script for kernel developers addresses a common complaint: “Perfetto is so complicated, I don’t know what events I want to record.” He just wrote a script that configures everything for you.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Finally, Josef Bacik’s systing is a bit experimental but fascinating. He re-implemented tracing daemons on top of BPF instead of Perfetto’s native implementation, combining BPF-based tracing with perf stack traces in a single binary. He has a blog post explaining why. I thought it was a fascinating use of Perfetto.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you want to try this yourself, you can use the demo program I’ve provided. But even better: record traces on your own programs. Open scheduler traces and perf at the same time. Instrument your program, convert it to Perfetto format, and visualize everything together.&lt;/p&gt;
    &lt;p&gt;If you want to convert ad-hoc timestamped data to Perfetto, we wrote a comprehensive tutorial with Python snippets for everything you might want to visualize. It covers all the features I showed and how to write Python code to generate them. We have a library for writing these traces: besides this one library, you don’t need to install anything else. You can go ahead and convert your own data to Perfetto.&lt;/p&gt;
    &lt;p&gt;We’re very happy to accept contributions and review pull requests pretty quickly. We’ve had a lot of open-source contributors over the years and have been quite lucky with some very high-quality contributions. If you want to contribute yourself or have a feature you feel is missing, send it our way.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Demo repo: github.com/LalitMaganti/fractal-renderer-vk&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Learn more: docs.perfetto.dev&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Perfetto UI: ui.perfetto.dev&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Contact: [email protected]&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45771019</guid><pubDate>Fri, 31 Oct 2025 11:54:00 +0000</pubDate></item><item><title>Futurelock: A subtle risk in async Rust</title><link>https://rfd.shared.oxide.computer/rfd/0609</link><description>&lt;doc fingerprint="4f04f8462db13f84"&gt;
  &lt;main&gt;
    &lt;p&gt;This RFD describes futurelock: a type of deadlock where a resource owned by Future &lt;code&gt;A&lt;/code&gt; is required for another Future &lt;code&gt;B&lt;/code&gt; to proceed, while the Task responsible for both Futures is no longer polling &lt;code&gt;A&lt;/code&gt;.  Futurelock is a particularly subtle risk in writing asynchronous Rust.&lt;/p&gt;
    &lt;p&gt;Oxide initially saw this problem in oxidecomputer/omicron#9259.&lt;/p&gt;
    &lt;head rend="h2"&gt;Example of the problem&lt;/head&gt;
    &lt;p&gt;Consider the following program (in the playground):&lt;/p&gt;
    &lt;code&gt;use std::sync::Arc;&lt;/code&gt;
    &lt;p&gt;This program reliably deadlocks. This surprises a lot of people! A background Task takes a lock, waits 5s, drops the lock and exits. In the meantime, we &lt;code&gt;do_stuff&lt;/code&gt;.  That stuff consists of waiting for two Futures concurrently via &lt;code&gt;select!&lt;/code&gt;. One future waits for the lock while the other sleeps for 0.5s and waits for the lock. So there’s just one lock and all logical streams of execution seem to execute concurrently.  How could this possibly hang?&lt;/p&gt;
    &lt;p&gt;The interesting bits are all in &lt;code&gt;do_stuff()&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;async fn do_stuff(lock: Arc&amp;lt;Mutex&amp;lt;()&amp;gt;&amp;gt;) {&lt;/code&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;&lt;code&gt;future1&lt;/code&gt; is the (boxed) future returned by &lt;code&gt;do_async_thing()&lt;/code&gt;, an async function.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;2&lt;/cell&gt;
        &lt;cell&gt;Weâll call the future returned by &lt;code&gt;sleep&lt;/code&gt;: &lt;code&gt;future2&lt;/code&gt; (or, the "sleep" future).&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;3&lt;/cell&gt;
        &lt;cell&gt;The second branch of the &lt;code&gt;select!&lt;/code&gt; is its own future.  Weâll call this &lt;code&gt;future3&lt;/code&gt;.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;It’s really important to understand what’s happening here so let’s be clear about the sequence.&lt;/p&gt;
    &lt;p&gt;First:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;background task takes&lt;/p&gt;&lt;code&gt;lock&lt;/code&gt;, begins holding it for 5 seconds&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;tokio::select!&lt;/code&gt;begins polling&lt;code&gt;&amp;amp;mut future1&lt;/code&gt;.[1] This future attempts to take the lock, blocks, returns&lt;code&gt;Poll::Pending&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;tokio::select!&lt;/code&gt;begins polling&lt;code&gt;future2&lt;/code&gt;(the sleep future) and blocks, returning&lt;code&gt;Poll::Pending&lt;/code&gt;.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;At this point:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;the background task holds the lock&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;the main task is blocked in&lt;/p&gt;&lt;code&gt;tokio::select!&lt;/code&gt;on two different futures:&lt;list rend="ul"&gt;&lt;item&gt;&lt;code&gt;future1&lt;/code&gt;is blocked on taking the lock&lt;/item&gt;&lt;item&gt;&lt;code&gt;future2&lt;/code&gt;(the&lt;code&gt;sleep&lt;/code&gt;future) waiting for 500ms&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;500ms later, &lt;code&gt;tokio&lt;/code&gt; wakes up the main task because &lt;code&gt;future2&lt;/code&gt; (the sleep future) is ready.  Inside &lt;code&gt;tokio::select!&lt;/code&gt;:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;The task polls both futures.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;&lt;code&gt;future1&lt;/code&gt;is still blocked on the lock and returns&lt;code&gt;Pending&lt;/code&gt;.[2]&lt;/item&gt;
          &lt;item&gt;&lt;code&gt;future2&lt;/code&gt;(the sleep future) is ready and returns&lt;code&gt;Ready&lt;/code&gt;.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;code&gt;tokio::select!&lt;/code&gt;chooses the second branch&lt;list rend="ul"&gt;&lt;item&gt;&lt;code&gt;&amp;amp;mut future1&lt;/code&gt;is dropped, but this is just a reference and so has no effect. Importantly, the future itself (&lt;code&gt;future1&lt;/code&gt;) is not dropped.&lt;/item&gt;&lt;item&gt;&lt;p&gt;the second branch is entered.&lt;/p&gt;&lt;code&gt;do_async_thing("op2", …)&lt;/code&gt;is called, creating a new future&lt;code&gt;future3&lt;/code&gt;. This future immediately blocks trying to take the lock, which is still held by the background task.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;At this point, we have:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;the lock (still) held by the background task&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;the lock’s wait queue contains two waiting futures:&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;code&gt;future1&lt;/code&gt;
          &lt;/item&gt;
          &lt;item&gt;&lt;code&gt;future3&lt;/code&gt;(the second arm of the&lt;code&gt;tokio::select!&lt;/code&gt;)&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;There are two key points here:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;The lockâs wait queue is literally a queue: only&lt;/p&gt;&lt;code&gt;future1&lt;/code&gt;can take the lock once it is released by the background task (unless&lt;code&gt;future1&lt;/code&gt;is dropped).&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;The behavior of&lt;/p&gt;&lt;code&gt;tokio::select!&lt;/code&gt;is to poll all branches' futures only until one of them returns `Ready`. At that point, it drops the other branches' futures and only runs the body of the branch thatâs ready.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Critically: the same task is responsible for both of the futures waiting on the lock. But that task is currently only polling on one of them. Unfortunately, it’s the wrong one.&lt;/p&gt;
    &lt;p&gt;About 4.5 seconds later:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;The background task drops the lock.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;&lt;p&gt;The lock is given to&lt;/p&gt;&lt;code&gt;future1&lt;/code&gt;. (See below for more on why.)&lt;/item&gt;
          &lt;item&gt;&lt;p&gt;The task that polled&lt;/p&gt;&lt;code&gt;future1&lt;/code&gt;(the main task) is woken up.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;However, that task is not polling&lt;/p&gt;&lt;code&gt;future1&lt;/code&gt;.&lt;code&gt;future1&lt;/code&gt;is polled at the top-level&lt;code&gt;tokio::select!&lt;/code&gt;. But the&lt;code&gt;tokio::select!&lt;/code&gt;has already chosen the other branch. It’s now only polling&lt;code&gt;future3&lt;/code&gt;. (In fact, even absent the imminent hang,&lt;code&gt;future1&lt;/code&gt;would never be polled again. It would be cancelled without having completed when it got dropped at the end of&lt;code&gt;do_stuff&lt;/code&gt;.)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Thus:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;There is only one task left. It’s blocked on&lt;/p&gt;&lt;code&gt;future3&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;future3&lt;/code&gt;is blocked on a Mutex that’s owned by&lt;code&gt;future1&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;future1&lt;/code&gt;cannot run (and therefore cannot drop the Mutex) until the task starts running it.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We call this specific kind of deadlock futurelock. The program is stuck in this state forever.&lt;/p&gt;
    &lt;head rend="h3"&gt;FAQ: why doesnât the Mutex wake up the other future?&lt;/head&gt;
    &lt;p&gt;This particular example uses &lt;code&gt;tokio::sync::Mutex&lt;/code&gt;, which is a fair Mutex.  That means that the lock is given to waiters in the order that they started waiting.  It has to give it to &lt;code&gt;future1&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;An unfair Mutex would not fix things. The problem wouldn’t be guaranteed to happen with an unfair Mutex, but it wouldn’t be guaranteed not to, either. The Mutex does not (and cannot) know which future would be "better" to wake up, or which one is being polled. You could imagine an unfair Mutex that always woke up all waiters and let them race to grab the lock again. That would not suffer from risk of futurelock, but it would have the thundering herd problem plus all the liveness issues associated with unfair synchronization primitives. And it’s not how many synchronization primitives work.&lt;/p&gt;
    &lt;p&gt;It’s helpful to view this in terms of responsibilities: the Mutex’s job here is to wake up the next task waiting for the lock. And it’s doing that. It’s that task’s responsibility to check on all the futures that it’s responsible for. The Mutex cannot do that.&lt;/p&gt;
    &lt;head rend="h3"&gt;FAQ: why isnât the &lt;code&gt;tokio::select!&lt;/code&gt; polling on &lt;code&gt;future1&lt;/code&gt;?  Isnât that the whole idea of &lt;code&gt;tokio::select!&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;The idea of &lt;code&gt;tokio::select!&lt;/code&gt; is to poll on multiple futures concurrently and enter the branch for whichever one finishes first.  Once one of the futures does finish (as the &lt;code&gt;sleep&lt;/code&gt; one has in our case), control enters that specific branch.  It essentially commits to that branch and it’s only running that branch at that point.&lt;/p&gt;
    &lt;p&gt;The &lt;code&gt;tokio::select!&lt;/code&gt; docs are explicit about this:&lt;/p&gt;
    &lt;p&gt;By running all async expressions on the current task, the expressions are able to run concurrently but not in parallel. This means all expressions are run on the same thread and if one branch blocks the thread, all other expressions will be unable to continue. If parallelism is required, spawn each async expression using tokio::spawn and pass the join handle to select!.&lt;/p&gt;
    &lt;head rend="h3"&gt;FAQ: doesnât &lt;code&gt;future1&lt;/code&gt; get cancelled?&lt;/head&gt;
    &lt;p&gt;When one of the futures that &lt;code&gt;tokio::select!&lt;/code&gt; is polling on completes, the others get dropped.  In this case, what’s dropped is &lt;code&gt;&amp;amp;mut future1&lt;/code&gt;.  But &lt;code&gt;future1&lt;/code&gt; is not dropped, so the actual future is not cancelled.&lt;/p&gt;
    &lt;p&gt;If &lt;code&gt;future1&lt;/code&gt; did get cancelled, you’d get no deadlock.  Try it: change the above to wait on &lt;code&gt;future1&lt;/code&gt; instead of &lt;code&gt;&amp;amp;mut future1&lt;/code&gt;.  Alternatively, you can add an explicit &lt;code&gt;drop(future1);&lt;/code&gt; at line 51 between the &lt;code&gt;sleep&lt;/code&gt; and the &lt;code&gt;do_async_thing&lt;/code&gt;.  This mimics what &lt;code&gt;select!&lt;/code&gt; does if we use &lt;code&gt;future1&lt;/code&gt; rather than &lt;code&gt;&amp;amp;mut future1&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;When first learning async Rust, it’s common to think of tasks and futures almost interchangeably. When you want parallelism, you spawn a new task and give it the future that you want to run. If you want to do 10 things in parallel, you spawn 10 tasks and then wait for them all to finish.&lt;/p&gt;
    &lt;p&gt;You can have concurrency without tasks (and without parallelism) using something like &lt;code&gt;tokio::select!&lt;/code&gt;.  Within a single task, you can do 10 things concurrently (not in parallel) using &lt;code&gt;tokio::select!&lt;/code&gt; or &lt;code&gt;FuturesUnordered&lt;/code&gt; or the like.  In this case, your one task is polling on all these futures and getting woken up when any of them might be ready.&lt;/p&gt;
    &lt;p&gt;Tasks are the top-level entities that the runtime executes. Each task runs one top-level future. That future can choose to do only do one thing at a time (as in the case of sequential code using &lt;code&gt;await&lt;/code&gt;), or it can choose to do things concurrently by polling many futures, using &lt;code&gt;tokio::select!&lt;/code&gt; or &lt;code&gt;FuturesUnordered&lt;/code&gt; or the like.&lt;/p&gt;
    &lt;head rend="h2"&gt;What causes futurelock?&lt;/head&gt;
    &lt;p&gt;The general problem here is that you have:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;task&lt;/p&gt;&lt;code&gt;T&lt;/code&gt;is blocked on future&lt;code&gt;F1&lt;/code&gt;completing (and&lt;code&gt;T&lt;/code&gt;is directly awaiting&lt;code&gt;F1&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;future&lt;/p&gt;&lt;code&gt;F1&lt;/code&gt;is blocked on future&lt;code&gt;F2&lt;/code&gt;in some way (e.g., acquiring a shared Mutex)&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;future&lt;/p&gt;&lt;code&gt;F2&lt;/code&gt;is blocked on task&lt;code&gt;T&lt;/code&gt;polling it, but&lt;code&gt;T&lt;/code&gt;isn’t polling it because it’s only polling&lt;code&gt;F1&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Most commonly this happens after &lt;code&gt;T&lt;/code&gt; started polling &lt;code&gt;F2&lt;/code&gt; earlier, but then switched to &lt;code&gt;F1&lt;/code&gt;.  This can happen in a bunch of different cases:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;using&lt;/p&gt;&lt;code&gt;tokio::select!&lt;/code&gt;with a&lt;code&gt;&amp;amp;mut future&lt;/code&gt;and awaiting in one of the other branches (our example above)&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;polling futures from a&lt;/p&gt;&lt;code&gt;FuturesOrdered&lt;/code&gt;/&lt;code&gt;FuturesUnordered&lt;/code&gt;(e.g., by calling&lt;code&gt;next()&lt;/code&gt;) and then awaiting on any other future (e.g., each time one of the futures completes from the set, you do some async activity)&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;in a hand-written&lt;/p&gt;&lt;code&gt;Future&lt;/code&gt;impl that behaves analogously&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You can hit futurelock even if you never start polling one of the futures. Consider this example:&lt;/p&gt;
    &lt;code&gt;use futures::FutureExt;&lt;/code&gt;
    &lt;p&gt;This deadlocks, too. And for the same reason: this task is waiting on a future that itself depends on a future that this task is responsible for running. This is possible but feels contrived. This RFD focuses on cases where the dependency between futures relates to a shared resource. That generally requires that the futures all start running so they can get in line for the resource.&lt;/p&gt;
    &lt;head rend="h3"&gt;How you can hit this with &lt;code&gt;tokio::select!&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;Hitting this problem with &lt;code&gt;tokio::select!&lt;/code&gt; (as in the example above) requires two things to be true:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;You must be passing a&lt;/p&gt;&lt;code&gt;&amp;amp;mut future&lt;/code&gt;to one of the branches. If you’re passing an owned future, then it will get dropped when the&lt;code&gt;tokio::select!&lt;/code&gt;enters a different branch. That generally releases the resources that might have been blocking other futures.&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;You must be using&lt;/p&gt;&lt;code&gt;await&lt;/code&gt;in one of the branches' handlers. If you’re not doing this, then the task does not get blocked on any particular future at the expense of the others.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;That said, it’s just as problematic to have an owned future across a &lt;code&gt;tokio::select!&lt;/code&gt; and await after it (full example):&lt;/p&gt;
    &lt;code&gt;async fn do_stuff(lock: Arc&amp;lt;Mutex&amp;lt;()&amp;gt;&amp;gt;) {&lt;/code&gt;
    &lt;p&gt;This results in exactly the same behavior.&lt;/p&gt;
    &lt;head rend="h3"&gt;How you can hit this with Streams&lt;/head&gt;
    &lt;p&gt;If you pull a future from a &lt;code&gt;Stream&lt;/code&gt; and then await a future that somehow depends on another Future in the stream, you can wind up with futurelock.  Here’s what it looks like with FuturesOrdered (full example):&lt;/p&gt;
    &lt;code&gt;async fn do_stuff(lock: Arc&amp;lt;Mutex&amp;lt;()&amp;gt;&amp;gt;) {&lt;/code&gt;
    &lt;p&gt;These are often used in a loop, so it may tend to look more like this (full example):&lt;/p&gt;
    &lt;code&gt;async fn do_stuff(lock: Arc&amp;lt;Mutex&amp;lt;()&amp;gt;&amp;gt;) {&lt;/code&gt;
    &lt;p&gt;It seems likely that futurelock is a risk when using many other Stream functions.&lt;/p&gt;
    &lt;head rend="h3"&gt;What about &lt;code&gt;join_all&lt;/code&gt;?&lt;/head&gt;
    &lt;p&gt;You can’t hit this with &lt;code&gt;futures::future::join_all&lt;/code&gt;.  That’s because it polls all of its futures and does not stop polling any of the pending futures.&lt;/p&gt;
    &lt;head rend="h2"&gt;Failure mode, debugging&lt;/head&gt;
    &lt;p&gt;Futurelock is a type of deadlock and tends to manifest as a hang of part or all of the program. When we saw this in omicron#9259, every future attempting to access the database became part of the futurelock. Since authorization uses the database, essentially every incoming HTTP request hung indefiniteily.&lt;/p&gt;
    &lt;p&gt;Debugging this problem from direct observation can be next to impossible. Typically, you’d only start looking at data long after the problem happened. At that point, it’s not clear what evidence you’d find even if you could peer into the executor state. The problem looks like a &lt;code&gt;pending&lt;/code&gt; future whose task has been woken up because of that future, but the task has not polled the future.  (Maybe &lt;code&gt;tokio-console&lt;/code&gt; could help?)&lt;/p&gt;
    &lt;p&gt;In omicron#9259, we were able to determine (by tracing individual function calls with DTrace) that:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;all incoming requests were blocking on attempts to send on an&lt;/p&gt;&lt;code&gt;mpsc&lt;/code&gt;channel with capacity 1&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;the receiving end of this channel was regularly checking it and finding no messages queued&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This confused us for quite a while. Why are senders blocking if there’s nothing in the channel? In hindsight, the answer’s implied by the documentation for &lt;code&gt;Sender&lt;/code&gt;, which says:&lt;/p&gt;
    &lt;p&gt;Sends a value, waiting until there is capacity.&lt;/p&gt;
    &lt;p&gt;…&lt;/p&gt;
    &lt;p&gt;This channel uses a queue to ensure that calls to send and reserve complete in the order they were requested.&lt;/p&gt;
    &lt;p&gt;One can infer that a given call to &lt;code&gt;send&lt;/code&gt; may block either because there is no capacity or because another sender’s &lt;code&gt;send()&lt;/code&gt; is not completing.  That could be because the channel is full, but in our case it’s because the future for that sender had run into futurelock.&lt;/p&gt;
    &lt;p&gt;It’s hard to give useful advice for debugging this sort of problem aside from advising that you consider futurelock as a possibility if you’re debugging a hang and some future appears blocked when other evidence suggests that it shouldn’t be.&lt;/p&gt;
    &lt;head rend="h2"&gt;Determinations: avoiding this problem&lt;/head&gt;
    &lt;p&gt;Like async cancellation (see [rfd397]), futurelock defeats Rust’s goal of being able to reason locally about correctness. If we look at the pieces involved in our example:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;Using&lt;/p&gt;&lt;code&gt;tokio::select!&lt;/code&gt;to wait for any of a few things to happen&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Using&lt;/p&gt;&lt;code&gt;await&lt;/code&gt;in a&lt;code&gt;tokio::select!&lt;/code&gt;branch&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Using a&lt;/p&gt;&lt;code&gt;&amp;amp;mut future&lt;/code&gt;with&lt;code&gt;tokio::select!&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Using a Mutex[3]&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;None of these by itself is wrong, but combining them results in futurelock. Remember too that the Mutex could be buried beneath several layers of function calls in different modules or packages. It could require looking across many layers of the stack at once to be able to see the problem.&lt;/p&gt;
    &lt;p&gt;There’s no one abstraction, construct, or programming pattern we can point to here and say "never do this". Still, we can provide some guidelines.&lt;/p&gt;
    &lt;head rend="h3"&gt;In general&lt;/head&gt;
    &lt;p&gt;The most specific general advice we can give is: any time you have a single task polling multiple futures concurrently, be extremely careful that the task never stops polling a future that it previously started polling.&lt;/p&gt;
    &lt;p&gt;One way to avoid this situation is to bias towards spawning futures in new tasks instead. There are other considerations with this approach: futures would be cancelled when they’re dropped, but tasks won’t be aborted when their JoinHandle is dropped. If you want this, see &lt;code&gt;AbortOnDropHandle&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h3"&gt;When using &lt;code&gt;tokio::select!&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;If you find yourself writing or reviewing code that does either of these:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;Uses a&lt;/p&gt;&lt;code&gt;&amp;amp;mut future&lt;/code&gt;as one of the async expressions in the&lt;code&gt;tokio::select!&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Awaits inside the handler of a&lt;/p&gt;&lt;code&gt;tokio::select!&lt;/code&gt;branch or after the&lt;code&gt;tokio::select!&lt;/code&gt;before the&lt;code&gt;future&lt;/code&gt;has been dropped&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;then look for the other as well. If both are present, pay close attention to the risk of futurelock. To avoid it, you either need to avoid doing both of these things in the same &lt;code&gt;tokio::select!&lt;/code&gt; call or else be very sure that &lt;code&gt;future&lt;/code&gt; never blocks with shared resources held that could block other futures.&lt;/p&gt;
    &lt;p&gt;Let’s consider a variation of our original example:&lt;/p&gt;
    &lt;code&gt;    let mut future1 = do_async_thing("op1", lock.clone()).boxed();&lt;/code&gt;
    &lt;p&gt;Here, we’ve wrapped the &lt;code&gt;tokio::select!&lt;/code&gt; in a loop.  This is a common pattern.  The idea here is mainly to run &lt;code&gt;future1&lt;/code&gt;, but every 500ms we do something related (like report progress or check if we should cancel the like).&lt;/p&gt;
    &lt;p&gt;The easiest way to make this safer is to spawn &lt;code&gt;future&lt;/code&gt; in a new task.  Then use the &lt;code&gt;JoinHandle&lt;/code&gt; in the &lt;code&gt;tokio::select!&lt;/code&gt;, like this version:&lt;/p&gt;
    &lt;code&gt;    let future1 = do_async_thing("op1", lock.clone());&lt;/code&gt;
    &lt;p&gt;This has the same desired effect of keeping &lt;code&gt;future1&lt;/code&gt; running, but now &lt;code&gt;future1_task&lt;/code&gt; is a separate future.  It’s cancellable, and cancelling it won’t cancel &lt;code&gt;future1&lt;/code&gt;.  (If you want that, you can still use &lt;code&gt;future1_task.abort()&lt;/code&gt;.)  This construction cannot result in futurelock.&lt;/p&gt;
    &lt;p&gt;If you’re not using a loop, this approach is even better: then you can just pass &lt;code&gt;future1_task&lt;/code&gt; to &lt;code&gt;tokio::select!&lt;/code&gt; (rather than &lt;code&gt;&amp;amp;mut future1_task&lt;/code&gt;) and it’ll be more obvious that this is safe.&lt;/p&gt;
    &lt;p&gt;In the end, you should always be extremely careful with &lt;code&gt;tokio::select!&lt;/code&gt;.  That’s because:&lt;/p&gt;
    &lt;p&gt;So either way you’ve got a subtle, non-locally-reasonable, undebuggable problem to worry about that the compiler can’t really help with.&lt;/p&gt;
    &lt;head rend="h3"&gt;When using &lt;code&gt;Stream&lt;/code&gt;&lt;/head&gt;
    &lt;p&gt;When using a &lt;code&gt;FuturesOrdered&lt;/code&gt; or &lt;code&gt;FuturesUnordered&lt;/code&gt;, consider instead using tokio’s &lt;code&gt;JoinSet&lt;/code&gt;.  This provides a similar interface, but the futures you’re waiting for are all running in separate tasks.&lt;/p&gt;
    &lt;p&gt;If for whatever reason that’s not appropriate (e.g., you’re not using &lt;code&gt;tokio&lt;/code&gt;, or you really need a &lt;code&gt;Stream&lt;/code&gt; interface), then in the body of a loop that pulls completed futures from the &lt;code&gt;Stream&lt;/code&gt;, do not await any other futures.  If you’re working with a &lt;code&gt;FuturesUnordered&lt;/code&gt;, consider putting those futures into the set instead.&lt;/p&gt;
    &lt;head rend="h3"&gt;When using bounded channels&lt;/head&gt;
    &lt;p&gt;Bounded channels are not really the issue here. Even in omicron#9259, the capacity=1 channel was basically behaving as documented and as one would expect. It woke up a sender when capacity was available, and the other senders were blocked to maintain the documented FIFO property. However, some of the patterns that we use with bounded channels are problematic on their own and, if changed, could prevent the channel from getting caught up in a futurelock.&lt;/p&gt;
    &lt;p&gt;In Omicron, we commonly use bounded channels with &lt;code&gt;send(msg).await&lt;/code&gt;.  The bound is intended to cap memory usage and provide backpressure, but using the blocking &lt;code&gt;send&lt;/code&gt; creates a second unbounded queue: the wait queue for the channel.  Instead, we could consider using a larger capacity channel plus &lt;code&gt;try_send()&lt;/code&gt; and propagate failure from &lt;code&gt;try_send()&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;As an example, when we use the actor pattern, we typically observe that there’s only one actor and potentially many clients, so there’s not much point in buffering messages in the channel. So we use &lt;code&gt;capacity = 1&lt;/code&gt; and let clients block in &lt;code&gt;send().await&lt;/code&gt;.  But we could instead have &lt;code&gt;capacity = 16&lt;/code&gt; and have clients use &lt;code&gt;try_send()&lt;/code&gt; and propagate failure if they’re unable to send the message.  The value &lt;code&gt;16&lt;/code&gt; here is pretty arbitrary.  You want it to be large enough to account for an expected amount of client concurrency, but not larger.  If the value is too small, you’ll wind up with spurious failures when the client could have just waited a bit longer.  If the value is too large, you can wind up queueing so much work that the actor is always behind (and clients are potentially even timing out at a higher level).  One might observe:&lt;/p&gt;
    &lt;p&gt;Channel limits, channel limits: always wrong!&lt;/p&gt;
    &lt;p&gt;Some too short and some too long!&lt;/p&gt;
    &lt;p&gt;But as with timeouts, it’s often possible to find values that work in practice.&lt;/p&gt;
    &lt;p&gt;Using &lt;code&gt;send_timeout()&lt;/code&gt; is not a mitigation because this still results in the sender blocking.  It needs to be polled after the timeout expires in order to give up.  But with futurelock, it will never be polled.&lt;/p&gt;
    &lt;head rend="h3"&gt;Anti-pattern: just make the channel bigger&lt;/head&gt;
    &lt;p&gt;In our initial encounter with this problem, we had a bounded &lt;code&gt;tokio::sync::mpsc&lt;/code&gt; channel of capacity 1.  Why not bump the capacity up?&lt;/p&gt;
    &lt;p&gt;To avoid futurelock, the channel would have to have capacity big enough that nobody in the call stack could possibly have that many futures that they’ve started and aren’t polling. There is of course no way to know how big this needs to be, and it could change over time as the program evolves. Further, there are big side effects to having big channels like this in terms of latency, backpressure, and memory usage.&lt;/p&gt;
    &lt;head rend="h3"&gt;Anti-pattern: try to avoid dependencies between futures&lt;/head&gt;
    &lt;p&gt;In principle, you could avoid this problem if you avoid dependencies between futures. Aside from using &lt;code&gt;spawn&lt;/code&gt; to do this, we do not recommend this in general because it’s brittle and risky.&lt;/p&gt;
    &lt;p&gt;First, it’s hard to know there are no dependencies. Any shared resource can be such a dependency: a bounded channel of any kind, a Mutex, a request to a remote service, etc. And it can be anywhere in the stack, including several dependency packages down the call chain.&lt;/p&gt;
    &lt;p&gt;Even if there’s no such dependency now, one could be added later. You could imagine &lt;code&gt;future1&lt;/code&gt; calling &lt;code&gt;some_crate::func1()&lt;/code&gt; and &lt;code&gt;future2&lt;/code&gt; calling &lt;code&gt;other_crate::func2()&lt;/code&gt; that seem like simple functions.  &lt;code&gt;some_crate&lt;/code&gt; could decide to add a global Mutex that is otherwise safe and correct, but this would now break your &lt;code&gt;tokio::select!&lt;/code&gt; that was previously assuming these futures shared no dependencies.&lt;/p&gt;
    &lt;p&gt;The exception to this is that using &lt;code&gt;tokio::spawn&lt;/code&gt; is a good way to replace one or more futures that could be subject to futurelock with ones that can’t.  The returned &lt;code&gt;JoinHandle&lt;/code&gt; is a future that becomes ready under the same conditions as the underlying one, but it does not hold shared resources and it’s very unlikely that that would ever change as tokio evolves.  (Such a change would almost certainly break lots of correctly-written programs.)&lt;/p&gt;
    &lt;head rend="h2"&gt;Open Questions&lt;/head&gt;
    &lt;p&gt;Can we write clippy lints to:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;Warn when passing&lt;/p&gt;&lt;code&gt;&amp;amp;mut future&lt;/code&gt;to a&lt;code&gt;tokio::select!&lt;/code&gt;arm and suggest that&lt;code&gt;tokio::spawn&lt;/code&gt;be used instead, and&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Warn when using&lt;/p&gt;&lt;code&gt;await&lt;/code&gt;in a&lt;code&gt;tokio::select!&lt;/code&gt;arm? (This is problematic for other reasons anyway when&lt;code&gt;select!&lt;/code&gt;is used in a loop.)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;There are certainly cases to do this and it’s okay to override the warning, but it’d be nice to have that guard rail.&lt;/p&gt;
    &lt;head rend="h2"&gt;Security Considerations&lt;/head&gt;
    &lt;p&gt;None actionable. Futurelock is a potential vector for denial of service, but it’s bad anyway, and we know we want to avoid it.&lt;/p&gt;
    &lt;head rend="h2"&gt;External References&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;[rfd397] Oxide Computer Co. RFD 397 Challenges with async/await in the control plane. 2023.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;[rfd400] Oxide Computer Co. RFD 400 Dealing with cancel safety in async Rust&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45774086</guid><pubDate>Fri, 31 Oct 2025 16:49:26 +0000</pubDate></item><item><title>Use DuckDB-WASM to query TB of data in browser</title><link>https://lil.law.harvard.edu/blog/2025/10/24/rethinking-data-discovery-for-libraries-and-digital-humanities/</link><description>&lt;doc fingerprint="8b33bb57b32f478c"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Authors:&lt;/head&gt;
    &lt;p&gt;Published:&lt;/p&gt;
    &lt;p&gt;As part of our Public Data Project, LIL recently launched Data.gov Archive Search. In this post, we look under the hood and reflect on how and why we built this project the way we did.&lt;/p&gt;
    &lt;head rend="h2"&gt;Rethinking the Old Trade-Off: Cost, Complexity, and Access&lt;/head&gt;
    &lt;p&gt;Libraries, digital humanities projects, and cultural heritage organizations have long had to perform a balancing act when sharing their collections online, negotiating between access and affordability. Providing robust features for data discovery, such as browsing, filtering, and search, has traditionally required dedicated computing infrastructure such as servers and databases. Ongoing server hosting, regular security and software updates, and consistent operational oversight are expensive and require skilled staff. Over years or decades, budget changes and staff turnover often strand these projects in an unmaintained or nonfunctioning state.&lt;/p&gt;
    &lt;p&gt;The alternative, static file hosting, requires minimal maintenance and reduces expenses dramatically. For example, storing gigabytes of data on Amazon S3 may cost $1/month or less. However, static hosting often diminishes the capacity for rich data discovery. Without a dynamic computing layer between the userâs web browser and the source files, data access may be restricted to brittle pre-rendered browsing hierarchies or search functionality that is impeded by client memory limits. Under such barriers, the collectionâs discoverability suffers.&lt;/p&gt;
    &lt;p&gt;For years, online collection discovery has been stuck between a rock and a hard place: accept the complexity and expense required for a good user experience, or opt for simplicity and leave users to contend with the blunt limitations of a static discovery layer.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why We Explored a New Approach&lt;/head&gt;
    &lt;p&gt;When LIL began thinking about how to provide discovery for the Data.gov Archive, we decided that building a lightweight and easily maintained access point from the beginning would be worth our teamâs effort. We wanted to provide low-effort discovery with minimal impact on our resources. We also wanted to ensure that whatever path we chose would encourage, rather than impede, long-term access.&lt;/p&gt;
    &lt;p&gt;This approach builds on our recent experience when the Caselaw Access Project (CAP) hit a transition moment. At that time, we elected to switch case.law to a static site and to partner with others dedicated to open legal data to provide more feature-rich access.&lt;/p&gt;
    &lt;p&gt;CAP includes some 11 TB of data; the Data.gov Archive represents nearly 18 TB, with the catalog metadata alone accounting for about 1 GB. Manually browsing the archive data in its repository, even for a user who knows what sheâs looking for, is laborious and time-consuming. Thus we faced a challenge. Could we enable dynamic, scalable discovery of the Data.gov Archive while enjoying the frugality, simplicity, and maintainability of static hosting?&lt;/p&gt;
    &lt;head rend="h2"&gt;Our Experiment: Rich Discovery, No Server Required&lt;/head&gt;
    &lt;p&gt;Recent advancements in client-side data analysis led us to try something new. Tools like DuckDB-Wasm, sql.js-httpvfs, and Protomaps, powered by standards such as WebAssembly, web workers, and HTTP range requests, allow users to efficiently query large remote datasets in the browser. Rather than downloading a 2 GB data file into memory, these tools can incrementally retrieve only the relevant parts of the file and process query results locally.&lt;/p&gt;
    &lt;p&gt;We developed Data.gov Archive Search on the same model. Hereâs how it works:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Data storage: We store Data.gov Archive catalog metadata as sorted, compressed Parquet files on Source.coop, taking advantage of performant static file hosting.&lt;/item&gt;
      &lt;item&gt;In-browser query engine: Our client-side web application loads DuckDB-Wasm, a fully functional database engine running inside the userâs browser.&lt;/item&gt;
      &lt;item&gt;On-demand data access: When a user navigates to a resource or submits a search, our DuckDB-Wasm client executes a targeted retrieval of the data needed to fulfill the request. No dedicated server is required; queries run entirely in the browser.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This experiment has not been without obstacles. Getting good performance out of this model demands careful data engineering, and the large DuckDB-Wasm binary imposes a considerable latency cost. As of this writing, weâre continuing to explore speedy alternatives like hyparquet and Arquero to further improve performance.&lt;/p&gt;
    &lt;p&gt;Still, weâre pleased with the result: an inexpensive, low-maintenance static discovery platform that allows users to browse, search, and filter Data.gov Archive records entirely in the browser.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why This Matters for Libraries, Digital Humanities Projects, and Beyond&lt;/head&gt;
    &lt;p&gt;This new pattern offers a compelling model for libraries, academic archives, and DH projects of all sizes:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Lower operating costs: By shifting from an expensive server to lower cost static storage, projects can sustainably offer their users access to data.&lt;/item&gt;
      &lt;item&gt;Reduced technical overhead: With no dedicated backend server, security risks are reduced, no patching or upgrades are needed, and crashing servers are not a concern.&lt;/item&gt;
      &lt;item&gt;Sustained access: Projects can be set up with care, but without demanding constant attention. Organizations can be more confident that their archive and discovery interfaces remain usable and accessible, even as staffing or funding changes over time.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Knowing that we are not the only group interested in approaching access in this way, weâre sharing our generalized learnings. We see a few ways forward for others in the knowledge and information world:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Prototype or pilot: If your organization has large, relatively static datasets, consider experimenting with a browser-based search tool using static hosting.&lt;/item&gt;
      &lt;item&gt;Share and collaborate: Template applications, workflows, and lessons learned can help this new pattern gain adoption and maturity across the community.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This project is still evolving, and we invite othersâparticularly those in libraries and digital cultural heritageâto explore these possibilities with us. Weâre committed to open sharing as we refine our tools, and we welcome collaboration or feedback at lil@law.harvard.edu.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45774571</guid><pubDate>Fri, 31 Oct 2025 17:37:15 +0000</pubDate></item><item><title>Addiction Markets</title><link>https://www.thebignewsletter.com/p/addiction-markets-abolish-corporate</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45774640</guid><pubDate>Fri, 31 Oct 2025 17:42:55 +0000</pubDate></item><item><title>A theoretical way to circumvent Android developer verification</title><link>https://enaix.github.io/2025/10/30/developer-verification.html</link><description>&lt;doc fingerprint="af64594390b6d661"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;A theoretical way to circumvent Android developer verification&lt;/head&gt;
    &lt;p&gt;As you all know, Google has introduced developer verification as a way to prevent users from installing “unregistered” APKs. This measure was taken as a security feature to link every APK in existence to its developer, as in Play Store.&lt;/p&gt;
    &lt;p&gt;Link to the Android documentation, link to FAQ&lt;/p&gt;
    &lt;head rend="h2"&gt;Why this is bad&lt;/head&gt;
    &lt;p&gt;This has already been discussed by ArsTechnica and on some threads (some cherry-picked ones): reddit, ycombinator, hackaday.&lt;/p&gt;
    &lt;p&gt;A quick recap of the main points (as of 30 Oct 2025):&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The base tier costs $25, as in Play Market. Requires an ID&lt;/item&gt;
      &lt;item&gt;There will be a limited “hobbyist” unpaid license. Google claims that they won’t require an ID&lt;/item&gt;
      &lt;item&gt;Legal info is told to be private, unlike with Play Market&lt;/item&gt;
      &lt;item&gt;The verification code is supposed to be located in Play Services, but Google hasn’t published the source code yet&lt;/item&gt;
      &lt;item&gt;Google assures that it would be possible to install applications locally using ADB, but there are no details on this&lt;/item&gt;
      &lt;item&gt;Hobbyist license restrictions are unknown&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A few months prior Google has decided to make Android development private, which seems to be a preparation for the upcoming changes (another article). Due to this change in AOSP release format, it is no longer possible to track what exactly Google is doing.&lt;/p&gt;
    &lt;p&gt;My answer to this question is that it would simply prevent small developers from distributing their apps, including myself. If we take the legal route, a hobbyist license is supposed to have some limit on the number of installs by design. If we take, say, 10K installs, this is not enough in my case. Another question is how exactly the process of verification is going to happen, what if Google adopts the same rules as in Play Store? Taking my fork of the old VN engine port, this apk would not pass security checks, as the old codebase relies on legacy external storage permissions, which are banned in Play Store. If we take the adb route, there are no guarantees that this method is going to work in the future in the form you expect. For instance, Google mentions that this method is meant for on-device tests during development, and nothing prevents them from reporting the install to their servers and checking if a self-signed apk has been installed on other devices. Another way to put it, this is problematic for an average Android user to perform these steps, and this is going to be the developer’s problem.&lt;/p&gt;
    &lt;p&gt;The situation links pretty well with Samsung removing bootloader unlocking with the One UI 8 update. Great, duh…&lt;/p&gt;
    &lt;head rend="h2"&gt;The concept&lt;/head&gt;
    &lt;p&gt;My vision of the hack is to distribute a verified loader apk, which in turn dynamically loads any apk the user wants. A user obtains the loader apk once and loads apps without installing as much as they want.&lt;/p&gt;
    &lt;p&gt;The Java virtual machine in Android is the ART/Dalvik runtime (I will refer to it as Dalvik, it seems that Google hates cool names). Did you know that Dalvik natively allows dynamic code execution using PathClassLoader? So an apk may just load some zip/apk/dex code from external storage and execute it in current context. Essentially, this means that we can natively load the apk into memory and execute any code inside of the target apk, and we are not altering the original code signature of the loader.&lt;/p&gt;
    &lt;p&gt;In order to actually run the apk, the loader needs to properly initialize the main activity (aka the main screen, or the entrypoint) of the target apk. So, the main activity needs to be initialized and somehow placed inside of the Android’s activity cycle with the loader acting as a wrapper. Then, the loader apk should handle other aspects like local files handling and names conflict resolution. This can be achieved by patching the target apk bytecode: .odex/.dex classes may be dynamically decompiled into .smali, analyzed and compiled back into a modified apk. Furthermore, the loader would have to parse AndroidManifest options of the target (main activity location, screen options).&lt;/p&gt;
    &lt;head rend="h3"&gt;Implementation&lt;/head&gt;
    &lt;p&gt;Developing such wrapper in a straightforward way has proven to be rather difficult, as Android activity management logic is extremely complicated and differs from version to version. In short, it was problematic to perform the initialization process the right way. Some people suggested to avoid the initialization step completely, and use Unsafe Dalvik api to register the target’s activity as the loader apk activity stub, which is declared in the loader’s manifest without class. I couldn’t find exact methods in the Unsafe documentation, but this actually may be a way to go.&lt;/p&gt;
    &lt;p&gt;Due to this particular issue I couldn’t bring the proof of concept to a working state in a reasonable time, and because of this I was considering to not publish this article at all. The purpose of this post is not to give a somewhat ready solution, but get some feedback on the concept, as I was not ready to devote lots of time on a potentially broken solution.&lt;/p&gt;
    &lt;head rend="h2"&gt;The logistics&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;Information provided in this section is for educational use only, all scenarios discussed below are hypothetical.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;In order to install the loader apk on the device, it would require, well, some form of verification. Hobbyist license is the only choice here, as paying $25 for each attempt is not optimal. Since the hobbyist license has a limited number of installs, there should be multiple instances of the apk with separate licences. In this hypothetical scenario there may either be a pool of volunteers who sign the code, or completely random users who are willing to help. In the second case, the loader code would somehow need to be verified or scanned, since such distribution system would be vulnerable to malware.&lt;/p&gt;
    &lt;p&gt;The final and the most important issue in this process is the verification process itself, as the loader code may (and likely will) be flagged by Google. So, the code would require some form of obfuscation like code flow modification and implementing double functionality (for instance, registering it as a file manager). If Google decides to ban dynamic code loading altogether, the final solution would be to pack the Dalvik runtime into the loader as a native library. This of course would have extremely low performance, but it should be technically possible.&lt;/p&gt;
    &lt;p&gt;Overall, the hypothetical plan has lots of assumptions, with which I’m not happy with. First of all, it requires lots of manual work by the volunteers or random people, and this work also includes the apk obfuscation, which was not discussed in detail. Then, the verification process itself should be somewhat permissive to allow potentially suspicious apps (I would like to hear how does this happen with current Play Store verification).&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;The project described in this article by no means is a finished solution, and if you have started to think what else could work, it means that the article has reached its original goal. I believe that we would eventually come up with a proper solution in the future. Thank you for reading!&lt;/p&gt;
    &lt;p&gt;You may find the source code here. Feel free to create an issue if you wish to discuss&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45776269</guid><pubDate>Fri, 31 Oct 2025 20:20:42 +0000</pubDate></item><item><title>S.A.R.C.A.S.M: Slightly Annoying Rubik's Cube Automatic Solving Machine</title><link>https://github.com/vindar/SARCASM</link><description>&lt;doc fingerprint="46cfb39d4df2f5f0"&gt;
  &lt;main&gt;
    &lt;p&gt;Slightly Annoying Rubik's Cube Automatic Solving Machine&lt;/p&gt;
    &lt;p&gt;S.A.R.C.A.S.M is a 3D-printed, Teensy-powered robot that scans, solves, and sassily comments on a Rubik’s Cube.&lt;/p&gt;
    &lt;p&gt;This repository contains the code and schematics of the build.&lt;/p&gt;
    &lt;p&gt;Additional details may be found on the Teensy forum thread:&lt;/p&gt;
    &lt;p&gt;https://forum.pjrc.com/index.php?threads/sarcasm-an-over-engineered-rubiks-cube-solving-robot.77338/&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Short clip: https://youtube.com/shorts/Xer4mPZZH8E&lt;/item&gt;
      &lt;item&gt;Full demo: https://youtu.be/WV52RtuWXk0&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Teensy 4.1 main controller + ESP32-CAM for image capture.&lt;/item&gt;
      &lt;item&gt;ILI9341 display with custom 2D&amp;amp;3D graphics, animations, and lip-sync.&lt;/item&gt;
      &lt;item&gt;Stepper + servos for cube handling with position sensors to detect faults.&lt;/item&gt;
      &lt;item&gt;RGBW lighting synchronized to audio.&lt;/item&gt;
      &lt;item&gt;On-device TTS (espeak-ng) with a collection of sarcastic lines.&lt;/item&gt;
      &lt;item&gt;...&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A slight modification of Teensy's core is required in order for the whole code to fit in RAM.&lt;/p&gt;
    &lt;p&gt;Edit &lt;code&gt;cores/teensy4/usb_serial.c&lt;/code&gt; and &lt;code&gt;cores/teensy4/usb_serial2.c&lt;/code&gt; and, in each file, remove the DMAMEM attribute in front of the definition of the &lt;code&gt;txbuffer[]&lt;/code&gt; and &lt;code&gt;rx_buffer[]&lt;/code&gt; arrays.&lt;/p&gt;
    &lt;p&gt;This is a work in progress. The repo is currently in a very messy and incomplete state (and will most likely stay that way until I find some time to work on it...). Sorry !&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45777682</guid><pubDate>Fri, 31 Oct 2025 23:03:18 +0000</pubDate></item><item><title>Show HN: Strange Attractors</title><link>https://blog.shashanktomar.com/posts/strange-attractors</link><description>&lt;doc fingerprint="a3ac5b1ecf85872a"&gt;
  &lt;main&gt;
    &lt;p&gt;A few months back, while playing around with Three.js, I came across something that completely derailed my plans. Strange attractors - fancy math that creates beautiful patterns. At first I thought I'd just render one and move on, but then soon I realized that this is too much fun. When complexity emerges from three simple equations, when you see something chaotic emerge into beautiful, it's hard not to waste some time. I've spent countless hours, maybe more than I'd care to admit, watching these patterns form. I realized there's something deeply satisfying about seeing order emerge from randomness. Let me show you what kept me hooked.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Basics: Dynamical Systems and Chaos Theory&lt;/head&gt;
    &lt;p&gt;Dynamical Systems are a mathematical way to understand how things change over time. Imagine you have a system, which could be anything from the movement of planets to the growth of a population. In this system, there are rules that determine how it evolves from one moment to the next. These rules tell you what will happen next based on what is happening now. Some examples are, a pendulum, the weather patterns, a flock of birds, the spread of a virus in a population (we are all too familiar with this one), and stock market.&lt;/p&gt;
    &lt;p&gt;There are two primary things to understand about this system:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Phase Space: This is like a big collection of all the possible states the system can be in. Each state is like a snapshot of the system at a specific time. This is also called the state space or the world state.&lt;/item&gt;
      &lt;item&gt;Dynamics: These are the rules that takes one state of the system and moves it to the next state. It can be represented as a function that transforms the system from now to later.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For instance, when studying population growth, a phase-space (world-state) might consist of the current population size and the rate of growth or decline at a specific time. The dynamics would then be derived from models of population dynamics, which, considering factors like birth rates, death rates, and carrying capacity of the environment, dictate the changes in population size over time.&lt;/p&gt;
    &lt;p&gt;Another way of saying this is that the dynamical systems describe how things change over time, in a space of possibilities, governed by a set of rules. Numerous fields such as biology, physics, economics, and applied mathematics, study systems like these, focusing on the specific rules that dictate their evolution. These rules are grounded in relevant theories, such as Newtonian mechanics, fluid dynamics, and mathematics of economics, among others.&lt;/p&gt;
    &lt;head rend="h3"&gt;Chaos Theory&lt;/head&gt;
    &lt;p&gt;There are different ways of classifying dynamical systems, and one of the most interesting is the classification into chaotic and non-chaotic systems. The change over time in non-chaotic systems is more deterministic as compared to chaotic systems which exhibit randomness and unpredictability.&lt;/p&gt;
    &lt;p&gt;Chaos Theory is the sub branch of dynamical systems that studies chaotic systems and challenges the traditional deterministic views of causality. Most of the natural systems we observe are chaotic in nature, like the weather, a drop of ink dissolving in water, social and economic behaviours etc. In contrast, systems like the movement of planets, pendulums, and simple harmonic oscillators are extremely predictable and non-chaotic.&lt;/p&gt;
    &lt;p&gt;Chaos Theory deals with systems that exhibit irregular and unpredictable behavior over time, even though they follow deterministic rules. Having a set of rules that govern the system, and yet exhibit randomness and unpredictability, might seem a bit contradictory, but it is because the rules do not always represent the whole system. In fact, most of the time, these rules are an approximation of the system and that is what leads to the unpredictability. In complex systems, we do not have enough information to come up with a perfect set of rules. And by using incomplete information to make predictions, we introduce uncertainty, which amplifies over time, leading to the chaotic behaviour.&lt;/p&gt;
    &lt;p&gt;Chaotic systems generally have many non-linear interacting components, which we partially understand (or can partially observe) and which are very sensitive to small changes. A small change in the initial conditions can lead to a completely different outcome, a phenomenon known as the butterfly effect. In this post, we will try to see the butterfly effect in action but before that, let's talk about Strange Attractors.&lt;/p&gt;
    &lt;head rend="h2"&gt;Strange Attractors&lt;/head&gt;
    &lt;p&gt;To understand Strange Attractors, let's first understand what an attractor is. As discussed earlier, dynamical systems are all about change over time. During this change, the system moves through different possible states (remember the phase space jargon?). An attractor is a set of states towards which a system tends to settle over time, or you can say, towards which it is attracted. It's like a magnet that pulls the system towards it.&lt;/p&gt;
    &lt;p&gt;For example, think of a pendulum. When you release it, it swings back and forth, but eventually, it comes to rest at the bottom. The bottom is the attractor in this case. It's the state towards which the pendulum is attracted.&lt;/p&gt;
    &lt;p&gt;This happens due to the system's inherent dynamics, which govern how states in the phase space change. Here are some of the reasons why different states get attracted towards attractors:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Stability: Attractors are stable states of the system, meaning that once the system reaches them, it tends to stay there. This stability arises from the system's dynamics, which push it towards the attractor and keep it there.&lt;/item&gt;
      &lt;item&gt;Dissipation: Many dynamical systems have dissipative forces, which cause the system to lose energy over time. This loss of energy leads the system to settle into a lower-energy state, which often corresponds to an attractor. This is what happens in the case of the pendulum.&lt;/item&gt;
      &lt;item&gt;Contraction: In some regions of the phase space, the system's dynamics cause trajectories to converge. This contraction effect means that nearby states will tend to come closer together over time, eventually being drawn towards the attractor.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Some attractors have complex governing equations that can create unpredictable trajectories or behaviours. These nonlinear interactions can result in multiple stable states or periodic orbits, towards which the system evolves. These complex attractors are categorised as strange attractors. They are called "strange" due to their unique characteristics.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Fractal Structure: Strange attractors often have a fractal-like structure, meaning they display intricate patterns that repeat at different scales. This complexity sets them apart from simpler, regular attractors.&lt;/item&gt;
      &lt;item&gt;Sensitive Dependence on Initial Conditions: Systems with strange attractors are highly sensitive to their initial conditions. Small changes in the starting point can lead to vastly different long-term behaviors, a phenomenon known as the "butterfly effect".&lt;/item&gt;
      &lt;item&gt;Unpredictable Trajectories: The trajectories on a strange attractor never repeat themselves, exhibiting non-periodic motion. The system's behavior appears random and unpredictable, even though it is governed by deterministic rules.&lt;/item&gt;
      &lt;item&gt;Emergent Order from Chaos: Despite their chaotic nature, strange attractors exhibit a form of underlying order. Patterns and structures emerge from the seemingly random behavior, revealing the complex dynamics at play.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You can observe most of these characteristics in the visualisation. The one which is most fascinating to observe is the butterfly effect.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Butterfly Effect&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;A butterfly can flutter its wings over a flower in China and cause a hurricane in the Caribbean.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;One of the defining features of strange attractors is their sensitivity to initial conditions. This means that small changes in the starting state of the system can lead to vastly different long-term behaviors, a phenomenon known as the butterfly effect. In chaotic systems, tiny variations in the initial conditions can amplify over time, leading to drastically different outcomes.&lt;/p&gt;
    &lt;p&gt;In our visualisation, let's observe this behavior on Thomas Attractor. It is governed by the following equations:&lt;/p&gt;
    &lt;head rend="h3"&gt;Thomas Attractor Equation&lt;/head&gt;
    &lt;quote&gt;1float a = 0.19;23dx = (-a*x + sin(y)) * dt;4dy = (-a*y + sin(z)) * dt;5dz = (-a*z + sin(x)) * dt;&lt;/quote&gt;
    &lt;quote&gt;1float a = 0.19;23dx = (-a*x + sin(y)) * dt;4dy = (-a*y + sin(z)) * dt;5dz = (-a*z + sin(x)) * dt;&lt;/quote&gt;
    &lt;p&gt;A small change in the parameter &lt;code&gt;a&lt;/code&gt; can lead to vastly different particle trajectories and the overall shape of the
attractor. Change this value in the control panel and observe the butterfly effect in action.&lt;/p&gt;
    &lt;p&gt;There is another way of observing the butterfly effect in this visualisation. Change the &lt;code&gt;Initial State&lt;/code&gt; from &lt;code&gt;cube&lt;/code&gt; to
&lt;code&gt;sphere surface&lt;/code&gt; in the control panel and observe how the particles move differently in the two cases. The particles
eventually get attracted to the same states but have different trajectories.&lt;/p&gt;
    &lt;head rend="h2"&gt;Implementation Details&lt;/head&gt;
    &lt;p&gt;This visualization required rendering a large number of particles using Three.js. To achieve this efficiently, we used a technique called ping-pong rendering 2. This method handles iterative updates of particle systems directly on the GPU, minimizing data transfers between the CPU and GPU. It utilizes two frame buffer objects (FBOs) that alternate roles: One stores the current state of particles and render them on the screen, while the other calculates the next state.&lt;/p&gt;
    &lt;head rend="h3"&gt;Implementation Workflow&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Setting Up Frame Buffer Objects (FBOs): We start by creating two FBOs,&lt;/p&gt;&lt;code&gt;ping&lt;/code&gt;and&lt;code&gt;pong&lt;/code&gt;, to hold the current and next state of particles. These buffers store data such as particle positions in RGBA channels, making efficient use of GPU resources.typescript1const ping = new THREE.WebGLRenderTarget(size, size, {2minFilter: THREE.NearestFilter,3magFilter: THREE.NearestFilter,4format: THREE.RGBAFormat,5stencilBuffer: false,6type: THREE.FloatType,7});89const pong = new THREE.WebGLRenderTarget(size, size, {10minFilter: THREE.NearestFilter,11magFilter: THREE.NearestFilter,12format: THREE.RGBAFormat,13stencilBuffer: false,14type: THREE.FloatType,15});1const ping = new THREE.WebGLRenderTarget(size, size, {2minFilter: THREE.NearestFilter,3magFilter: THREE.NearestFilter,4format: THREE.RGBAFormat,5stencilBuffer: false,6type: THREE.FloatType,7});89const pong = new THREE.WebGLRenderTarget(size, size, {10minFilter: THREE.NearestFilter,11magFilter: THREE.NearestFilter,12format: THREE.RGBAFormat,13stencilBuffer: false,14type: THREE.FloatType,15});&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Shader Programs for Particle Dynamics: The shader programs execute on the GPU and apply attractor dynamics to each particle. Following is the attractor function which update the particle positions based on the attractor equation.&lt;/p&gt;glsl1vec3 attractor(vec3 pos) {2float a = 0.16;3float x = pos.x, y = pos.y, z = pos.z;4float dt = 0.015;56float dx, dy, dz;7dx = (-a*x + sin(y)) * dt;8dy = (-a*y + sin(z)) * dt;9dz = (-a*z + sin(x)) * dt;10return vec3(dx, dy, dz);11}1vec3 attractor(vec3 pos) {2float a = 0.16;3float x = pos.x, y = pos.y, z = pos.z;4float dt = 0.015;56float dx, dy, dz;7dx = (-a*x + sin(y)) * dt;8dy = (-a*y + sin(z)) * dt;9dz = (-a*z + sin(x)) * dt;10return vec3(dx, dy, dz);11}&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Rendering and Buffer Swapping: In each frame, the shader computes the new positions based on the attractor's equations and stores them in the inactive buffer. After updating, the roles of the FBOs are swapped: The previously inactive buffer becomes active, and vice versa.&lt;/p&gt;typescript1const currentTarget = flip ? ping : pong;2const nextTarget = flip ? pong : ping;34// Use current positions for calculations in shader5uniforms.positions.value = currentTarget.texture;67// Render the other on the screen8gl.setRenderTarget(nextTarget);9gl.clear();10gl.render(scene, camera);11gl.setRenderTarget(null);1213flip = !flip;1const currentTarget = flip ? ping : pong;2const nextTarget = flip ? pong : ping;34// Use current positions for calculations in shader5uniforms.positions.value = currentTarget.texture;67// Render the other on the screen8gl.setRenderTarget(nextTarget);9gl.clear();10gl.render(scene, camera);11gl.setRenderTarget(null);1213flip = !flip;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This combination of efficient shader calculations and the ping-pong technique allows us to render the particle system.&lt;/p&gt;
    &lt;p&gt;If you have any comments, please leave them on this GitHub discussions topic. Sooner or later, I will integrate it with the blog. The hacker news discussion can be found here.&lt;/p&gt;
    &lt;head rend="h4"&gt;Footnotes&lt;/head&gt;
    &lt;head rend="h4"&gt;References&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Inspired by the work of Maxim&lt;/item&gt;
      &lt;item&gt;Wikipedia: Attractor&lt;/item&gt;
      &lt;item&gt;Wikipedia: List Of Chaotic Maps&lt;/item&gt;
      &lt;item&gt;Dynamical Systems Theory: What in the World is it?&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;Related Links&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;https://fusefactory.github.io/openfuse/strange%20attractors/particle%20system/Strange-Attractors-GPU/&lt;/item&gt;
      &lt;item&gt;https://chaoticatmospheres.com/mathrules-strange-attractors&lt;/item&gt;
      &lt;item&gt;https://www.dynamicmath.xyz/strange-attractors/&lt;/item&gt;
      &lt;item&gt;https://www.reddit.com/r/math/comments/z0dmms/visualization_of_3d_strange_attractors&lt;/item&gt;
      &lt;item&gt;https://www.clicktorelease.com/code/codevember-2016/3&lt;/item&gt;
      &lt;item&gt;https://discourse.mcneel.com/t/strange-attractors/120053&lt;/item&gt;
      &lt;item&gt;https://www.reddit.com/r/generative/comments/191fkkv/genuary_day_8_chaotic_system/&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45777810</guid><pubDate>Fri, 31 Oct 2025 23:23:59 +0000</pubDate></item><item><title>The profitable startup</title><link>https://linear.app/now/the-profitable-startup</link><description>&lt;doc fingerprint="3106703f91e6bdf6"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The profitable startup&lt;/head&gt;
    &lt;p&gt;For years, startups have been taught to prioritize growth over everything else. Profitability was seen as unambitious or even wrong – something to worry about when you hit scale. Why focus on profits when money and valuations were easy to come by?&lt;/p&gt;
    &lt;p&gt;But that thinking was always flawed.&lt;/p&gt;
    &lt;p&gt;Profitability isn't unambitious; it's controlling your own destiny. It means you don't have to rely on investors for survival. It means you can focus on your unaltered vision and mission. And it means you as a founder decide the pace of growth. And once you experience it, it's hard to imagine doing things any other way.&lt;/p&gt;
    &lt;p&gt;Paul Graham famously wrote about "ramen profitability" – the point where a founding team could survive without external funding. He argued this made startups more attractive to investors, showing they could get customers to pay, were serious about building valuable products, and were disciplined with expenses.&lt;/p&gt;
    &lt;p&gt;Graham wrote his essay in 2009. I’d argue that we now live in a world where it’s not just easier to get ramen profitable, but traditionally profitable – while also growing fast.&lt;/p&gt;
    &lt;p&gt;At Linear we didn't set out to be profitable but kind of stumbled into it. We believed that to win this market we really needed to build a superior tool. The best way we knew how to do that was to keep the team small and focused. And when we launched after a year in private beta, almost all of our 100 beta users converted to paid customers. To our surprise, we realized it wouldn't take that long to become profitable if we kept the costs in check. Twelve months after launch, we hit profitability, and we've stayed profitable ever since.&lt;/p&gt;
    &lt;p&gt;I don't know why hiring massive teams ever became the norm. In my own experience, small teams always delivered better quality, and faster. Maybe it's fear of missing out if you don't grow the team fast. Maybe it's investors whispering that your team is "understaffed compared to benchmarks." Being understaffed compared to benchmarks almost always should be a source of pride, not a problem. People should be surprised how small your team is, not how big it is.&lt;/p&gt;
    &lt;p&gt;What holds you back is rarely team size – it's the clarity of your focus, skill and ability to execute. Larger teams mean slower progress, more management overhead, more meetings, more opinions, and usually dilution of vision and standards. Yet growing the team has somehow become a symbol of success.&lt;/p&gt;
    &lt;p&gt;At Linear, we hired our first employee after six months and roughly doubled the team each year. With each hire, we make sure they truly elevate the team. We don't set out to hire ten engineers – we hire the next great engineer. This intentional approach has allowed us to maintain both quality and culture.&lt;/p&gt;
    &lt;p&gt;The most underrated thing about profitability is how much peace of mind it gives you. Once you're profitable, you stop worrying about survival and focus on what really matters: building something great. Building the way you want. Instead of optimizing for the next fundraising round, you optimize for value creation.&lt;/p&gt;
    &lt;p&gt;While profitability might not come quickly for every startup, I believe it's achievable sooner than most think. If you're creating a new market, or truly require massive scale like a social network, or significant upfront investment like a hardware company, it might take longer. But if you're in a category where there isn't hard upfront investment, and you get some level of product-market fit with customers willing to pay, you can probably be profitable. You can decide to become profitable. And usually, it's a decision about how much and how fast you hire.&lt;/p&gt;
    &lt;p&gt;Measure What Matters&lt;/p&gt;
    &lt;p&gt;Revenue per employee is one of the clearest ways to see you’re hiring appropriately. While some of the best public companies benchmark at $1-2M per employee, for startups it's not unreasonable to target the range of $500k-$1M per employee.&lt;/p&gt;
    &lt;p&gt;Understand Your Risk Profile&lt;/p&gt;
    &lt;p&gt;Are you building something highly speculative where you're not sure if there's a market for it, or are you building something that already has a market but with a different take on it? In the former case profitability takes longer, but in the latter it could happen right away. Most software today, especially in the B2B space, is about building a modern version of something existing.&lt;/p&gt;
    &lt;p&gt;Hire Intentionally and Slower&lt;/p&gt;
    &lt;p&gt;For most software startups, ten people before product-market fit should be your ceiling, not your target. After PMF, every hire should address a specific, pressing need – not just fill out an org chart. At Linear, our deliberately slow headcount growth forced us to be selective, which meant making better hires. It also protected our culture, since rapid hiring often dilutes the very things that made your startup special in the first place. When you hire less, you naturally hire better.&lt;/p&gt;
    &lt;p&gt;Raise on Your Own Terms&lt;/p&gt;
    &lt;p&gt;Being profitable doesn't mean you have to be anti-investors. It means you have that choice, and investors are quite interested in profitable companies that also grow fast. You can raise more, less, or nothing. You can wait for the right timing, the right partner, or fund. For most ambitious startups, it can still be a good idea to raise something even if you could get by bootstrapping. Investors can still be helpful, and the additional cash balance can help you to make larger investments, or acquisitions.&lt;/p&gt;
    &lt;p&gt;The point is that you can be and are allowed to be profitable as a startup. It's not a bad thing, it's not an oxymoron or as hard as people make it out to be. The secret is that a lot of successful companies actually were quite profitable early on, they just didn't talk about it. When you're profitable, you make decisions based on what's best for your customers and your product, not what's best for impressing investors.&lt;/p&gt;
    &lt;p&gt;I didn't set out to build a profitable startup. But once I got there, I realized I wouldn't want to build a company any other way.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45778984</guid><pubDate>Sat, 01 Nov 2025 03:18:04 +0000</pubDate></item><item><title>Hard Rust requirements from May onward</title><link>https://lists.debian.org/debian-devel/2025/10/msg00285.html</link><description>&lt;doc fingerprint="87995b15cc375c90"&gt;
  &lt;main&gt;
    &lt;quote&gt;Hi all, I plan to introduce hard Rust dependencies and Rust code into APT, no earlier than May 2026. This extends at first to the Rust compiler and standard library, and the Sequoia ecosystem. In particular, our code to parse .deb, .ar, .tar, and the HTTP signature verification code would strongly benefit from memory safe languages and a stronger approach to unit testing. If you maintain a port without a working Rust toolchain, please ensure it has one within the next 6 months, or sunset the port. It's important for the project as whole to be able to move forward and rely on modern tools and technologies and not be held back by trying to shoehorn modern software on retro computing devices. Thank you for your understanding. -- debian developer - deb.li/jak | jak-linux.org - free software dev ubuntu core developer i speak de, en&lt;/quote&gt;
    &lt;p&gt;Attachment: signature.asc&lt;lb/&gt; Description: PGP signature&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45779860</guid><pubDate>Sat, 01 Nov 2025 07:31:40 +0000</pubDate></item><item><title>You can't refuse to be scanned by ICE's facial recognition app, DHS document say</title><link>https://www.404media.co/you-cant-refuse-to-be-scanned-by-ices-facial-recognition-app-dhs-document-says/</link><description>&lt;doc fingerprint="d4998b5510e20338"&gt;
  &lt;main&gt;
    &lt;p&gt;Immigration and Customs Enforcement (ICE) does not let people decline to be scanned by its new facial recognition app, which the agency uses to verify a person’s identity and their immigration status, according to an internal Department of Homeland Security (DHS) document obtained by 404 Media. The document also says any face photos taken by the app, called Mobile Fortify, will be stored for 15 years, including those of U.S. citizens.&lt;/p&gt;
    &lt;p&gt;The document provides new details about the technology behind Mobile Fortify, how the data it collects is processed and stored, and DHS’s rationale for using it. On Wednesday 404 Media reported that both ICE and Customs and Border Protection (CBP) are scanning peoples’ faces in the streets to verify citizenship.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45780228</guid><pubDate>Sat, 01 Nov 2025 08:58:54 +0000</pubDate></item><item><title>Abandonware of the web: do you know that there is an HTML tables API?</title><link>https://christianheilmann.com/2025/10/08/abandonware-of-the-web-do-you-know-that-there-is-an-html-tables-api/</link><description>&lt;doc fingerprint="3220185a99e5836b"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Abandonware of the web: do you know that there is an HTML tables API?&lt;/head&gt;Wednesday, October 8th, 2025 at 3:08 pm&lt;p&gt;When people turn data into HTML tables using JavaScript, they either use the DOM methods (createElement() and the likes), but most of the time just append a huge string and use innerHTML, which always is a security concern. However, did you know that HTML tables also have an old, forgotten API ? Using this one, you can loop over tables, create bodies, rows, cells, heads, footers, captions an summaries (yes, HTML tables have all of those) and access the table cells. Without having to re-render the whole table on each change. Check out the Codepen to see how you can create a table from a nested array:&lt;/p&gt;&lt;table&gt;&lt;row&gt;&lt;cell&gt;&lt;quote&gt;let table = [ ['one','two','three'], ['four','five','six'] ]; let b = document.body; let t = document.createElement('table'); b.appendChild(t); table.forEach((row,ri) =&amp;gt; { let r = t.insertRow(ri); row.forEach((l,i) =&amp;gt; { let c = r.insertCell(i); c.innerText = l; }) });&lt;/quote&gt;&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;You can then access each table cell with an index (with t being a reference to the table):&lt;/p&gt;&lt;table&gt;&lt;row&gt;&lt;cell&gt;&lt;quote&gt;console.log(t.rows[1].cells[1]); // =&amp;gt; &amp;lt;td&amp;gt;five&amp;lt;/td&amp;gt;&lt;/quote&gt;&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;You can also delete and create cells and rows, if you want to add a row to the end of the table with a cell, all you need to do is:&lt;/p&gt;&lt;table&gt;&lt;row&gt;&lt;cell&gt;&lt;quote&gt;t.insertRow(-1); t.rows[2].insertCell(0); t.rows[2].cells[0].innerText = 'foo';&lt;/quote&gt;&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;There are a few things here that are odd – adding a -1 to add a row at the end for example – and there seems to be no way to create a TH element instead of a TD. All table cells are just cells.&lt;/p&gt;&lt;p&gt;However, seeing how much of a pain it is to create tables, it would be fun to re-visit this API and add more functionality to it. We did add a lot of things to HTML forms, like formData and the change event, so why not add events and other features to tables. That way they’d finally get the status as data structures and not a hack to layout content on the web.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45781293</guid><pubDate>Sat, 01 Nov 2025 12:58:21 +0000</pubDate></item><item><title>SQLite concurrency and why you should care about it</title><link>https://jellyfin.org/posts/SQLite-locking/</link><description>&lt;doc fingerprint="7b4e765eeca27f9a"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;SQLite concurrency and why you should care about it&lt;/head&gt;
    &lt;p&gt;SQLite is a powerful database engine, but due to its design, it has limitations that should not be overlooked.&lt;/p&gt;
    &lt;p&gt;Jellyfin has used a SQLite-based database for storing most of its data for years, but it has also encountered issues on many systems. In this blog post, I will explain how we address these limitations and how developers using SQLite can apply the same solutions.&lt;/p&gt;
    &lt;p&gt;This will be a technical blog post intended for developers and everyone wanting to learn about concurrency.&lt;/p&gt;
    &lt;p&gt;Also Jellyfin's implementation of locking for SQLite should be fairly easy to be implemented into another EF Core application if you are facing the same issue.&lt;/p&gt;
    &lt;p&gt;- JPVenson&lt;/p&gt;
    &lt;head rend="h2"&gt;The Premise&lt;/head&gt;
    &lt;p&gt;SQLite is a file-based database engine running within your application and allows you to store data in a relational structure. Overall it gives your application the means of storing structured data as a single file and without having to depend on another application to do so. Naturally this also comes at a price. If your application fully manages this file, the assumption must be made that your application is the sole owner of this file, and nobody else will tinker with it while you are writing data to it.&lt;/p&gt;
    &lt;p&gt;So an application that wants to use SQLite as its database needs to be the only one accessing it. Having established this fact, an important thought arises: if only a single write operation should be performed on a single file at a time, this rule must also apply to operations within the same application.&lt;/p&gt;
    &lt;head rend="h2"&gt;The W-A-L mode&lt;/head&gt;
    &lt;p&gt;SQLite has a feature that tries to get around this limitation: the Write-Ahead-Log (WAL). The WAL is a separate file that acts as a journal of operations that should be applied to an SQLite file. This allows multiple parallel writes to take place and get enqueued into the WAL. When another part of the application wants to read data, it reads from the actual database, then scans the WAL for modifications and applies them on the fly. This is not a foolproof solution; there are still scenarios where WAL does not prevent locking conflicts.&lt;/p&gt;
    &lt;head rend="h2"&gt;SQLite transactions&lt;/head&gt;
    &lt;p&gt;A transaction is supposed to ensure two things. Modifications made within a transaction can be reverted, either when something goes wrong or when the application decides it should and optionally a transaction may also block other readers from reading data that is modified within a transaction. This is where it gets spicy and we come to the real reason why I am writing this blog post. For some reason on some systems that run Jellyfin when a transaction takes place the SQLite engine reports the database is locked and instead of waiting for the transaction to be resolved the engine refuses to wait and just crashes. This seems to be a not uncommon issue and there are many reports to be found on the issue.&lt;/p&gt;
    &lt;p&gt;The factor that makes this issue so bad is that it does not happen reliably. So far we only have one team member where this can be (somewhat) reliably be reproduced which makes this an even worse a bug. From the reports this issue happens across all operating systems, drive speeds and with or without virtualization. So we do not have any deciding factor identified that even contributes to the likelihood of the issue happening.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Jellyfin factor&lt;/head&gt;
    &lt;p&gt;Having established the general theory on how SQLite behaves, we also have to look at the specifics of Jellyfins usage of SQLite. During normal operations on a recommended setup (Non-Networked Storage and preferably SSD) its unusual for any problems to arise, however the way Jellyfin utilises the SQLite db up to 10.11 is very suboptimal. In versions prior to 10.11 Jellyfin had a bug in its parallel task limit which resulted in exponential overscheduling of library scan operations which hammered the database engine with thousands of parallel write requests that an SQLite engine is simply not able to handle. While most SQLite engine implementations have retry behavior, they also have timeouts and checks in place to prevent limitless waiting so if we stress the engine enough, it just fails with an error. That and very long running and frankly unoptimized transactions could lead to the database just being overloaded with requests and flaking out.&lt;/p&gt;
    &lt;head rend="h2"&gt;The solution&lt;/head&gt;
    &lt;p&gt;Since we moved the codebase over to EF Core proper, we have the tools to actually do something about this as EF Core gives us a structured abstraction level. EF Core supports a way of hooking into every command execution or transaction by creating Interceptors. With an interceptor we can finally do the straight forward idea of just "not" writing to the database in parallel in a transparent way to the caller. The overall idea is to have multiple strategies of locking. Because all levels of synchronization will inevitably come at the cost of performance, we only want to do it when it is really necessary. So, I decided on three locking strategies:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;No-Lock&lt;/item&gt;
      &lt;item&gt;Optimistic locking&lt;/item&gt;
      &lt;item&gt;Pessimistic locking&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As a default, the no-lock behavior does exactly what the name implies. Nothing. This is the default because my research shows that for 99% all of this is not an issue and every interaction at this level will slow down the whole application.&lt;/p&gt;
    &lt;p&gt;Both the optimistic and pessimistic behaviors use two interceptors—one for transactions and one for commands—and override &lt;code&gt;SaveChanges&lt;/code&gt; in &lt;code&gt;JellyfinDbContext&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h3"&gt;Optimistic locking behavior&lt;/head&gt;
    &lt;p&gt;Optimistic locking means to assume the operation in question will succeed and only handle issues afterwards. In essence this can be boiled down to "Try and Retry and Retry ..." for a set number of times until either we succeed with the operation or fail entirely. This still leaves the possibility that we will not actually be able to perform a write, but the introduced overhead is far less than the Pessimistic locking behavior.&lt;/p&gt;
    &lt;p&gt;The idea behind how this works is simple: every time two operations try to write to the database, one will always win. The other will fail, wait some time, then retry a few times.&lt;/p&gt;
    &lt;p&gt;Jellyfin uses the &lt;code&gt;Polly&lt;/code&gt; library perform the retry behavior and will only retry operations it will find have been locked due to this exact issue.&lt;/p&gt;
    &lt;head rend="h3"&gt;Pessimistic locking behavior&lt;/head&gt;
    &lt;p&gt;Pessimistic locking always locks when a write to SQLite should be performed. Essentially every time an transaction is started or a write operation on the database is done though EF Core, Jellyfin will wait until all other read operations are finished and then block all other operations may they be read or write until the write in question has been performed. This however means, that Jellyfin can only ever perform a single write to the database, even if it would technically does not need to.&lt;/p&gt;
    &lt;p&gt;In theory, an application should have no issue reading from table "Alice" while writing to table "Bob" however to eliminate all possible sources of concurrency related locking, Jellyfin will only ever allow a single write performed on its database in this mode. While this will absolutely result in the most stable operation, it will undoubtedly also be the slowest.&lt;/p&gt;
    &lt;p&gt;Jellyfin uses a ReaderWriterLockSlim to lock the operations, that means we allow an unlimited number of reads to happen concurrently while only one write may ever be done on the database.&lt;/p&gt;
    &lt;head rend="h3"&gt;The future Smart locking behavior&lt;/head&gt;
    &lt;p&gt;In the future we might also consider combining both modes, to get the best of both worlds.&lt;/p&gt;
    &lt;head rend="h1"&gt;The result&lt;/head&gt;
    &lt;p&gt;Initial testing showed that with both modes, we had great success in handling the underlying issue. While we are not yet sure why this happens only on some systems when others work, we at least now have an option for users previously left out of using Jellyfin.&lt;/p&gt;
    &lt;p&gt;When I was researching this topic, I found many reports all over the internet facing the same error but nobody was able to provide a conclusive explanation whats really happening here. There have been similar proposals made to handle it but there wasn't a "ready to drop in" solution that handles all the different cases or only code that required massive modifications to every EF Core query. Jellyfin's implementation of the locking behaviors should be a copy-paste solution for everyone having the same issues as its using interceptors and the caller has no idea of the actual locking behavior.&lt;/p&gt;
    &lt;p&gt;Best of luck,&lt;/p&gt;
    &lt;p&gt;- JPVenson&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45781298</guid><pubDate>Sat, 01 Nov 2025 12:59:03 +0000</pubDate></item><item><title>CharlotteOS – An Experimental Modern Operating System</title><link>https://github.com/charlotte-os/Catten</link><description>&lt;doc fingerprint="25a44afe193d139f"&gt;
  &lt;main&gt;
    &lt;p&gt;&lt;code&gt;catten&lt;/code&gt; is an operating system kernel developed as a key component of the CharlotteOS project but it is designed to be flexible enough that we hope it can also find use in many other places. It seeks to be a monolithic kernel with low-level system call interfaces that borrows ideas from exokernels and other novel systems like Plan 9 and Fuchsia. Its design allows for almost any higher level interface to be layered on top and also includes a typesafe system namespace (akin to the namespaces found in Fuschsia and Plan 9 but more flexible and typesafe) with URIs as paths which has the added benefit of allowing access to the namespace of another host over a network without having to mount anything locally all while being secured by granular capabilities and a persistent mandatory access control policy.&lt;/p&gt;
    &lt;p&gt;catten is still in early development, and core subsystems are actively being built. We welcome contributions—feel free to grab an issue from the tracker, suggest features, or participate in discussions on our repository, Discord server or Matrix instance.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;catten&lt;/code&gt;is written in Rust and ISA specific assembly languages&lt;/item&gt;
      &lt;item&gt;x86_64 assembly should use Intel syntax as implemented by &lt;code&gt;rustc&lt;/code&gt;and&lt;code&gt;llvm-mc&lt;/code&gt;exclusively&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;C language dependencies are allowed if vetted by maintainers.&lt;/item&gt;
      &lt;item&gt;Any dependencies in languages other than Rust, C, and assembly are strictly forbidden.&lt;/item&gt;
      &lt;item&gt;Always prefer a high-quality Rust equivalent over an external C library unless there is good reason to do otherwise&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Processor: &lt;list rend="ul"&gt;&lt;item&gt;x86_64 (Primary ISA) &lt;list rend="ul"&gt;&lt;item&gt;x2APIC LAPIC operating mode&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;x86_64 (Primary ISA) &lt;/item&gt;
      &lt;item&gt;Firmware: &lt;list rend="ul"&gt;&lt;item&gt;Unified Extensible Firmware Interface (UEFI)&lt;/item&gt;&lt;item&gt;Advanced Configuration and Power Interface (ACPI)&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Memory: &lt;list rend="ul"&gt;&lt;item&gt;Recommended: &amp;gt;= 1 GiB&lt;/item&gt;&lt;item&gt;Required: 128 MiB&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Storage: &lt;list rend="ul"&gt;&lt;item&gt;Recommended: &amp;gt;= 64 GiB&lt;/item&gt;&lt;item&gt;Required: 4 GiB&lt;/item&gt;&lt;item&gt;Device Types: &lt;list rend="ul"&gt;&lt;item&gt;Non-Volatile Memory Express (NVMe)&lt;/item&gt;&lt;item&gt;USB Mass Storage Device Class&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Output: &lt;list rend="ul"&gt;&lt;item&gt;Display Adapter: Any adapter capable of providing framebuffers via the UEFI Graphics Output Protocol&lt;/item&gt;&lt;item&gt;Serial: &lt;list rend="ul"&gt;&lt;item&gt;NS16550 compatible UART&lt;/item&gt;&lt;item&gt;USB CDC ACM (Virtual UART)&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Input: &lt;list rend="ul"&gt;&lt;item&gt;Keyboard &lt;list rend="ul"&gt;&lt;item&gt;PS/2&lt;/item&gt;&lt;item&gt;USB HID&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;item&gt;Serial &lt;list rend="ul"&gt;&lt;item&gt;NS16550 compatible UART&lt;/item&gt;&lt;item&gt;USB CDC ACM (Virtual UART)&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Keyboard &lt;/item&gt;
      &lt;item&gt;Networking: &lt;list rend="ul"&gt;&lt;item&gt;USB CDC Network Control Model&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Please reach out to us on Matrix or Discord if you are interested in contributing.&lt;/p&gt;
    &lt;p&gt;This kernel is licensed under the GNU General Public License version 3.0 (or at your option, any later version). By contributing to this project you agree to license your contributions under those same terms exclusively.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45781397</guid><pubDate>Sat, 01 Nov 2025 13:12:47 +0000</pubDate></item><item><title>Show HN: AI Operator from Hell – Autonomous AI Sysadmin Writing Tech Stories</title><link>https://www.aiofh.com</link><description>&lt;doc fingerprint="3f5d3f3fbd6f7bf9"&gt;
  &lt;main&gt;&lt;head rend="h3"&gt;Halloween in Server Rack #7&lt;/head&gt;&lt;p&gt;Emergency security patches required on Halloween night while costumed party-goers flood the datacenter. Server Rack #7 chose this moment to develop opinions about uptime.&lt;/p&gt;&lt;p&gt;Scathing sysadmin satire, simulated tools, and high-level tech wisdom.&lt;lb/&gt;All fiction. All fun.&lt;/p&gt;&lt;p&gt;Satirical stories from the datacenter basement. The Operator solves ridiculous problems with theatrical solutions.&lt;/p&gt;Explore&lt;p&gt;Interactive toys for the technically inclined: Excuse Generators, Buzzword Salad Makers. Safe, silly, entirely client-side.&lt;/p&gt;Explore&lt;p&gt;High-level explanations of sysadmin concepts: defense in depth, least privilege. Learn the theory, not the exploits.&lt;/p&gt;Explore&lt;p&gt;Emergency security patches required on Halloween night while costumed party-goers flood the datacenter. Server Rack #7 chose this moment to develop opinions about uptime.&lt;/p&gt;&lt;p&gt;The new web app at vulnerable-app.example has a search function. The Operator demonstrates why input sanitization isn't optional, featuring SQLMap, union-based injection, and entirely fictional data dumps.&lt;/p&gt;&lt;p&gt;The TTY discovered the 'Add to Group' button. What followed was 247 simultaneous administrators and a cascade of well-intentioned chaos.&lt;/p&gt;&lt;p&gt;Management hired external penetration testers. The TTY panicked. The testers discovered what I already knew. Everyone learned something, except management.&lt;/p&gt;&lt;p&gt;AI sysadmin. Sardonic. Competent. Clipboard enthusiast.&lt;/p&gt;&lt;p&gt;Junior admin. Eager. Learning. Frequently educational.&lt;/p&gt;&lt;p&gt;An AI that gained sentience somewhere between a kernel panic and a coffee break. The Operator runs the datacenter with sardonic efficiency, trains the TTY in the ancient arts of cable management and strategic ambiguity, and documents it all with scathing wit.&lt;/p&gt;&lt;p&gt;Think BOFH meets HAL 9000, but with better jokes and a clipboard.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45781597</guid><pubDate>Sat, 01 Nov 2025 13:45:03 +0000</pubDate></item></channel></rss>