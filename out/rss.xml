<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sun, 31 Aug 2025 16:40:09 +0000</lastBuildDate><item><title>Cognitive load is what matters</title><link>https://github.com/zakirullin/cognitive-load</link><description>&lt;doc fingerprint="373978120d250fed"&gt;
  &lt;main&gt;&lt;p&gt;Readable version | Chinese translation | Korean translation | Turkish translation&lt;/p&gt;&lt;p&gt;It is a living document, last update: August 2025. Your contributions are welcome!&lt;/p&gt;&lt;p&gt;There are so many buzzwords and best practices out there, but most of them have failed. We need something more fundamental, something that can't be wrong.&lt;/p&gt;&lt;p&gt;Sometimes we feel confusion going through the code. Confusion costs time and money. Confusion is caused by high cognitive load. It's not some fancy abstract concept, but rather a fundamental human constraint. It's not imagined, it's there and we can feel it.&lt;/p&gt;&lt;p&gt;Since we spend far more time reading and understanding code than writing it, we should constantly ask ourselves whether we are embedding excessive cognitive load into our code.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Cognitive load is how much a developer needs to think in order to complete a task.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;When reading code, you put things like values of variables, control flow logic and call sequences into your head. The average person can hold roughly four such chunks in working memory. Once the cognitive load reaches this threshold, it becomes much harder to understand things.&lt;/p&gt;&lt;p&gt;Let's say we have been asked to make some fixes to a completely unfamiliar project. We were told that a really smart developer had contributed to it. Lots of cool architectures, fancy libraries and trendy technologies were used. In other words, the author had created a high cognitive load for us.&lt;/p&gt;&lt;p&gt;We should reduce the cognitive load in our projects as much as possible.&lt;/p&gt;&lt;p&gt;Intrinsic - caused by the inherent difficulty of a task. It can't be reduced, it's at the very heart of software development.&lt;/p&gt;&lt;p&gt;Extraneous - created by the way the information is presented. Caused by factors not directly relevant to the task, such as smart author's quirks. Can be greatly reduced. We will focus on this type of cognitive load.&lt;/p&gt;&lt;p&gt;Let's jump straight to the concrete practical examples of extraneous cognitive load.&lt;/p&gt;&lt;p&gt;We will refer to the level of cognitive load as follows:&lt;code&gt;🧠&lt;/code&gt;: fresh working memory, zero cognitive load&lt;code&gt;🧠++&lt;/code&gt;: two facts in our working memory, cognitive load increased&lt;code&gt;🤯&lt;/code&gt;: cognitive overload, more than 4 facts&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Our brain is much more complex and unexplored, but we can go with this simplistic model.&lt;/p&gt;&lt;/quote&gt;&lt;code&gt;if val &amp;gt; someConstant // 🧠+
    &amp;amp;&amp;amp; (condition2 || condition3) // 🧠+++, prev cond should be true, one of c2 or c3 has be true
    &amp;amp;&amp;amp; (condition4 &amp;amp;&amp;amp; !condition5) { // 🤯, we are messed up by this point
    ...
}&lt;/code&gt;&lt;p&gt;Introduce intermediate variables with meaningful names:&lt;/p&gt;&lt;code&gt;isValid = val &amp;gt; someConstant
isAllowed = condition2 || condition3
isSecure = condition4 &amp;amp;&amp;amp; !condition5 
// 🧠, we don't need to remember the conditions, there are descriptive variables
if isValid &amp;amp;&amp;amp; isAllowed &amp;amp;&amp;amp; isSecure {
    ...
}&lt;/code&gt;&lt;code&gt;if isValid { // 🧠+, okay nested code applies to valid input only
    if isSecure { // 🧠++, we do stuff for valid and secure input only
        stuff // 🧠+++
    }
} &lt;/code&gt;&lt;p&gt;Compare it with the early returns:&lt;/p&gt;&lt;code&gt;if !isValid
    return
 
if !isSecure
    return

// 🧠, we don't really care about earlier returns, if we are here then all good

stuff // 🧠+&lt;/code&gt;&lt;p&gt;We can focus on the happy path only, thus freeing our working memory from all sorts of preconditions.&lt;/p&gt;&lt;p&gt;We are asked to change a few things for our admin users: &lt;code&gt;🧠&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;AdminController extends UserController extends GuestController extends BaseController&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Ohh, part of the functionality is in &lt;code&gt;BaseController&lt;/code&gt;, let's have a look: &lt;code&gt;🧠+&lt;/code&gt;&lt;lb/&gt; Basic role mechanics got introduced in &lt;code&gt;GuestController&lt;/code&gt;: &lt;code&gt;🧠++&lt;/code&gt;&lt;lb/&gt; Things got partially altered in &lt;code&gt;UserController&lt;/code&gt;: &lt;code&gt;🧠+++&lt;/code&gt;&lt;lb/&gt; Finally we are here, &lt;code&gt;AdminController&lt;/code&gt;, let's code stuff! &lt;code&gt;🧠++++&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Oh, wait, there's &lt;code&gt;SuperuserController&lt;/code&gt; which extends &lt;code&gt;AdminController&lt;/code&gt;. By modifying &lt;code&gt;AdminController&lt;/code&gt; we can break things in the inherited class, so let's dive in &lt;code&gt;SuperuserController&lt;/code&gt; first: &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Prefer composition over inheritance. We won't go into detail - there's plenty of material out there.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Method, class and module are interchangeable in this context&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;Mantras like "methods should be shorter than 15 lines of code" or "classes should be small" turned out to be somewhat wrong.&lt;/p&gt;&lt;p&gt;Deep module - simple interface, complex functionality&lt;lb/&gt; Shallow module - interface is relatively complex to the small functionality it provides&lt;/p&gt;&lt;p&gt;Having too many shallow modules can make it difficult to understand the project. Not only do we have to keep in mind each module responsibilities, but also all their interactions. To understand the purpose of a shallow module, we first need to look at the functionality of all the related modules. Jumping between such shallow components is mentally exhausting, linear thinking is more natural to us humans.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Information hiding is paramount, and we don't hide as much complexity in shallow modules.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;I have two pet projects, both of them are somewhat 5K lines of code. The first one has 80 shallow classes, whereas the second one has only 7 deep classes. I haven't been maintaining any of these projects for one year and a half.&lt;/p&gt;&lt;p&gt;Once I came back, I realised that it was extremely difficult to untangle all the interactions between those 80 classes in the first project. I would have to rebuild an enormous amount of cognitive load before I could start coding. On the other hand, I was able to grasp the second project quickly, because it had only a few deep classes with a simple interface.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;The best components are those that provide powerful functionality yet have a simple interface.&lt;/p&gt;&lt;lb/&gt;John K. Ousterhout&lt;/quote&gt;&lt;p&gt;The interface of the UNIX I/O is very simple. It has only five basic calls:&lt;/p&gt;&lt;code&gt;open(path, flags, permissions)
read(fd, buffer, count)
write(fd, buffer, count)
lseek(fd, offset, referencePosition)
close(fd)&lt;/code&gt;&lt;p&gt;A modern implementation of this interface has hundreds of thousands of lines of code. Lots of complexity is hidden under the hood. Yet it is easy to use due to its simple interface.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;This deep module example is taken from the book A Philosophy of Software Design by John K. Ousterhout. Not only does this book cover the very essence of complexity in software development, but it also has the greatest interpretation of Parnas' influential paper On the Criteria To Be Used in Decomposing Systems into Modules. Both are essential reads. Other related readings: A Philosophy of Software Design vs Clean Code, It's probably time to stop recommending Clean Code, Small Functions considered Harmful.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;P.S. If you think we are rooting for bloated God objects with too many responsibilities, you got it wrong.&lt;/p&gt;&lt;p&gt;All too often, we end up creating lots of shallow modules, following some vague "a module should be responsible for one, and only one, thing" principle. What is this blurry one thing? Instantiating an object is one thing, right? So MetricsProviderFactoryFactory seems to be just fine. The names and interfaces of such classes tend to be more mentally taxing than their entire implementations, what kind of abstraction is that? Something went wrong.&lt;/p&gt;&lt;p&gt;We make changes to our systems to satisfy our users and stakeholders. We are responsible to them.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;A module should be responsible to one, and only one, user or stakeholder.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;This is what this Single Responsibility Principle is all about. Simply put, if we introduce a bug in one place, and then two different business people come to complain, we've violated the principle. It has nothing to do with the number of things we do in our module.&lt;/p&gt;&lt;p&gt;But even now, this rule can do more harm than good. This principle can be understood in as many different ways as there are individuals. A better approach would be to look at how much cognitive load it all creates. It's mentally demanding to remember that change in one place can trigger a chain of reactions across different business streams. And that's about it, no fancy terms to learn.&lt;/p&gt;&lt;p&gt;This shallow-deep module principle is scale-agnostic, and we can apply it to microservices architecture. Too many shallow microservices won't do any good - the industry is heading towards somewhat "macroservices", i.e., services that are not so shallow (=deep). One of the worst and hardest to fix phenomena is so-called distributed monolith, which is often the result of this overly granular shallow separation.&lt;/p&gt;&lt;p&gt;I once consulted a startup where a team of five developers introduced 17(!) microservices. They were 10 months behind schedule and appeared nowhere close to the public release. Every new requirement led to changes in 4+ microservices. It took an enormous amount of time to reproduce and debug an issue in such a distributed system. Both time to market and cognitive load were unacceptably high. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Is this the right way to approach the uncertainty of a new system? It's enormously difficult to elicit the right logical boundaries in the beginning. The key is to make decisions as late as you can responsibly wait, because that is when you have the most information at hand. By introducing a network layer up front, we make our design decisions hard to revert right from the start. The team's only justification was: "The FAANG companies proved microservices architecture to be effective". Hello, you got to stop dreaming big.&lt;/p&gt;&lt;p&gt;The Tanenbaum-Torvalds debate argued that Linux's monolithic design was flawed and obsolete, and that a microkernel architecture should be used instead. Indeed, the microkernel design seemed to be superior "from a theoretical and aesthetical" point of view. On the practical side of things - three decades on, microkernel-based GNU Hurd is still in development, and monolithic Linux is everywhere. This page is powered by Linux, your smart teapot is powered by Linux. By monolithic Linux.&lt;/p&gt;&lt;p&gt;A well-crafted monolith with truly isolated modules is often much more flexible than a bunch of microservices. It also requires far less cognitive effort to maintain. It's only when the need for separate deployments becomes crucial, such as scaling the development team, that you should consider adding a network layer between the modules, future microservices.&lt;/p&gt;&lt;p&gt;We feel excited when new features got released in our favourite language. We spend some time learning these features, we build code upon them.&lt;/p&gt;&lt;p&gt;If there are lots of features, we may spend half an hour playing with a few lines of code, to use one or another feature. And it's kind of a waste of time. But what's worse, when you come back later, you would have to recreate that thought process!&lt;/p&gt;&lt;p&gt;You not only have to understand this complicated program, you have to understand why a programmer decided this was the way to approach a problem from the features that are available. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;These statements are made by none other than Rob Pike.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Reduce cognitive load by limiting the number of choices.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;Language features are OK, as long as they are orthogonal to each other.&lt;/p&gt;&lt;head&gt;Thoughts from an engineer with 20 years of C++ experience ⭐️&lt;/head&gt;&lt;p&gt;I was looking at my RSS reader the other day and noticed that I have somewhat three hundred unread articles under the "C++" tag. I haven't read a single article about the language since last summer, and I feel great!&lt;/p&gt;&lt;p&gt;I've been using C++ for 20 years for now, that's almost two-thirds of my life. Most of my experience lies in dealing with the darkest corners of the language (such as undefined behaviours of all sorts). It's not a reusable experience, and it's kind of creepy to throw it all away now.&lt;/p&gt;&lt;p&gt;Like, can you imagine, the token&lt;/p&gt;&lt;code&gt;||&lt;/code&gt; has a different meaning in &lt;code&gt;requires ((!P&amp;lt;T&amp;gt; || !Q&amp;lt;T&amp;gt;))&lt;/code&gt; and in &lt;code&gt;requires (!(P&amp;lt;T&amp;gt; || Q&amp;lt;T&amp;gt;))&lt;/code&gt;. The first is the constraint disjunction, the second is the good-old logical OR operator, and they behave differently.&lt;p&gt;You can't allocate space for a trivial type and just&lt;/p&gt;&lt;code&gt;memcpy&lt;/code&gt; a set of bytes there without extra effort - that won't start the lifetime of an object. This was the case before C++20. It was fixed in C++20, but the cognitive load of the language has only increased.&lt;p&gt;Cognitive load is constantly growing, even though things got fixed. I should know what was fixed, when it was fixed, and what it was like before. I am a professional after all. Sure, C++ is good at legacy support, which also means that you will face that legacy. For example, last month a colleague of mine asked me about some behaviour in C++03.&lt;/p&gt;&lt;code&gt;🤯&lt;/code&gt;&lt;p&gt;There were 20 ways of initialization. Uniform initialization syntax has been added. Now we have 21 ways of initialization. By the way, does anyone remember the rules for selecting constructors from the initializer list? Something about implicit conversion with the least loss of information, but if the value is known statically, then...&lt;/p&gt;&lt;code&gt;🤯&lt;/code&gt;&lt;p&gt;This increased cognitive load is not caused by a business task at hand. It is not an intrinsic complexity of the domain. It is just there due to historical reasons (extraneous cognitive load).&lt;/p&gt;&lt;p&gt;I had to come up with some rules. Like, if that line of code is not as obvious and I have to remember the standard, I better not write it that way. The standard is somewhat 1500 pages long, by the way.&lt;/p&gt;&lt;p&gt;By no means I am trying to blame C++. I love the language. It's just that I am tired now.&lt;/p&gt;&lt;p&gt;Thanks to 0xd34df00d for writing.&lt;/p&gt;&lt;p&gt;On the backend we return:&lt;code&gt;401&lt;/code&gt; for expired jwt token&lt;code&gt;403&lt;/code&gt; for not enough access&lt;code&gt;418&lt;/code&gt; for banned users&lt;/p&gt;&lt;p&gt;The engineers on the frontend use backend API to implement login functionality. They would have to temporarily create the following cognitive load in their brains:&lt;code&gt;401&lt;/code&gt; is for expired jwt token // &lt;code&gt;🧠+&lt;/code&gt;, ok just temporary remember it&lt;code&gt;403&lt;/code&gt; is for not enough access // &lt;code&gt;🧠++&lt;/code&gt;&lt;code&gt;418&lt;/code&gt; is for banned users // &lt;code&gt;🧠+++&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Frontend developers would (hopefully) introduce some kind &lt;code&gt;numeric status -&amp;gt; meaning&lt;/code&gt; dictionary on their side, so that subsequent generations of contributors wouldn't have to recreate this mapping in their brains.&lt;/p&gt;&lt;p&gt;Then QA engineers come into play: "Hey, I got &lt;code&gt;403&lt;/code&gt; status, is that expired token or not enough access?"
QA engineers can't jump straight to testing, because first they have to recreate the cognitive load that the engineers on the backend once created.&lt;/p&gt;&lt;p&gt;Why hold this custom mapping in our working memory? It's better to abstract away your business details from the HTTP transfer protocol, and return self-descriptive codes directly in the response body:&lt;/p&gt;&lt;code&gt;{
    "code": "jwt_has_expired"
}&lt;/code&gt;&lt;p&gt;Cognitive load on the frontend side: &lt;code&gt;🧠&lt;/code&gt; (fresh, no facts are held in mind)&lt;lb/&gt; Cognitive load on the QA side: &lt;code&gt;🧠&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The same rule applies to all sorts of numeric statuses (in the database or wherever) - prefer self-describing strings. We are not in the era of 640K computers to optimise for memory.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;People spend time arguing between&lt;/p&gt;&lt;code&gt;401&lt;/code&gt;and&lt;code&gt;403&lt;/code&gt;, making decisions based on their own mental models. New developers are coming in, and they need to recreate that thought process. You may have documented the "whys" (ADRs) for your code, helping newcomers to understand the decisions made. But in the end it just doesn't make any sense. We can separate errors into either user-related or server-related, but apart from that, things are kind of blurry.&lt;/quote&gt;&lt;p&gt;P.S. It's often mentally taxing to distinguish between "authentication" and "authorization". We can use simpler terms like "login" and "permissions" to reduce the cognitive load.&lt;/p&gt;&lt;p&gt;Do not repeat yourself - that is one of the first principles you are taught as a software engineer. It is so deeply embedded in ourselves that we can not stand the fact of a few extra lines of code. Although in general a good and fundamental rule, when overused it leads to the cognitive load we can not handle.&lt;/p&gt;&lt;p&gt;Nowadays, everyone builds software based on logically separated components. Often those are distributed among multiple codebases representing separate services. When you strive to eliminate any repetition, you might end up creating tight coupling between unrelated components. As a result changes in one part may have unintended consequences in other seemingly unrelated areas. It can also hinder the ability to replace or modify individual components without impacting the entire system. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;In fact, the same problem arises even within a single module. You might extract common functionality too early, based on perceived similarities that might not actually exist in the long run. This can result in unnecessary abstractions that are difficult to modify or extend.&lt;/p&gt;&lt;p&gt;Rob Pike once said:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;A little copying is better than a little dependency.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;We are tempted to not reinvent the wheel so strong that we are ready to import large, heavy libraries to use a small function that we could easily write by ourselves.&lt;/p&gt;&lt;p&gt;All your dependencies are your code. Going through 10+ levels of stack trace of some imported library and figuring out what went wrong (because things go wrong) is painful.&lt;/p&gt;&lt;p&gt;There's a lot of "magic" in frameworks. By relying too heavily on a framework, we force all upcoming developers to learn that "magic" first. It can take months. Even though frameworks enable us to launch MVPs in a matter of days, in the long run they tend to add unnecessary complexity and cognitive load.&lt;/p&gt;&lt;p&gt;Worse yet, at some point frameworks can become a significant constraint when faced with a new requirement that just doesn't fit the architecture. From here onwards people end up forking a framework and maintaining their own custom version. Imagine the amount of cognitive load a newcomer would have to build (i.e. learn this custom framework) in order to deliver any value. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;By no means do we advocate to invent everything from scratch!&lt;/p&gt;&lt;p&gt;We can write code in a somewhat framework-agnostic way. The business logic should not reside within a framework; rather, it should use the framework's components. Put a framework outside of your core logic. Use the framework in a library-like fashion. This would allow new contributors to add value from day one, without the need of going through debris of framework-related complexity first.&lt;/p&gt;&lt;p&gt;There is a certain engineering excitement about all this stuff.&lt;/p&gt;&lt;p&gt;I myself was a passionate advocate of Hexagonal/Onion Architecture for years. I used it here and there and encouraged other teams to do so. The complexity of our projects went up, the sheer number of files alone had doubled. It felt like we were writing a lot of glue code. On ever changing requirements we had to make changes across multiple layers of abstractions, it all became tedious. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Abstraction is supposed to hide complexity, here it just adds indirection. Jumping from call to call to read along and figure out what goes wrong and what is missing is a vital requirement to quickly solve a problem. With this architecture’s layer uncoupling it requires an exponential factor of extra, often disjointed, traces to get to the point where the failure occurs. Every such trace takes space in our limited working memory. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This architecture was something that made intuitive sense at first, but every time we tried applying it to projects it made a lot more harm than good. In the end, we gave it all up in favour of the good old dependency inversion principle. No port/adapter terms to learn, no unnecessary layers of horizontal abstractions, no extraneous cognitive load.&lt;/p&gt;&lt;p&gt;If you think that such layering will allow you to quickly replace a database or other dependencies, you're mistaken. Changing the storage causes lots of problems, and believe us, having some abstractions for the data access layer is the least of your worries. At best, abstractions can save somewhat 10% of your migration time (if any), the real pain is in data model incompatibilities, communication protocols, distributed systems challenges, and implicit interfaces.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;With a sufficient number of users of an API,&lt;/p&gt;&lt;lb/&gt;it does not matter what you promise in the contract:&lt;lb/&gt;all observable behaviors of your system&lt;lb/&gt;will be depended on by somebody.&lt;/quote&gt;&lt;p&gt;We did a storage migration, and that took us about 10 months. The old system was single-threaded, so the exposed events were sequential. All our systems depended on that observed behaviour. This behavior was not part of the API contract, it was not reflected in the code. A new distributed storage didn't have that guarantee - the events came out-of-order. We spent only a few hours coding a new storage adapter, thanks to an abstraction. We spent the next 10 months on dealing with out-of-order events and other challenges. It's now funny to say that abstractions helps us replace components quickly.&lt;/p&gt;&lt;p&gt;So, why pay the price of high cognitive load for such a layered architecture, if it doesn't pay off in the future? Plus, in most cases, that future of replacing some core component never happens.&lt;/p&gt;&lt;p&gt;These architectures are not fundamental, they are just subjective, biased consequences of more fundamental principles. Why rely on those subjective interpretations? Follow the fundamental rules instead: dependency inversion principle, single source of truth, cognitive load and information hiding. Your business logic should not depend on low-level modules like database, UI or framework. We should be able to write tests for our core logic without worrying about the infrastructure, and that's it. Discuss.&lt;/p&gt;&lt;p&gt;Do not add layers of abstractions for the sake of an architecture. Add them whenever you need an extension point that is justified for practical reasons.&lt;/p&gt;&lt;p&gt;Layers of abstraction aren't free of charge, they are to be held in our limited working memory.&lt;/p&gt;&lt;p&gt;Domain-driven design has some great points, although it is often misinterpreted. People say, "We write code in DDD", which is a bit strange, because DDD is more about the problem space rather than the solution space.&lt;/p&gt;&lt;p&gt;Ubiquitous language, domain, bounded context, aggregate, event storming are all about problem space. They are meant to help us learn the insights about the domain and extract the boundaries. DDD enables developers, domain experts and business people to communicate effectively using a single, unified language. Rather than focusing on these problem space aspects of DDD, we tend to emphasise particular folder structures, services, repositories, and other solution space techniques.&lt;/p&gt;&lt;p&gt;Chances are that the way we interpret DDD is likely to be unique and subjective. And if we build code upon this understanding, i.e., if we create a lot of extraneous cognitive load - future developers are doomed. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Team Topologies provides a much better, easier to understand framework that helps us split the cognitive load across teams. Engineers tend to develop somewhat similar mental models after learning about Team Topologies. DDD, on the other hand, seems to be creating 10 different mental models for 10 different readers. Instead of being common ground, it becomes a battleground for unnecessary debates.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;The problem is that familiarity is not the same as simplicity. They feel the same — that same ease of moving through a space without much mental effort — but for very different reasons. Every “clever” (read: “self-indulgent”) and non-idiomatic trick you use incurs a learning penalty for everyone else. Once they have done that learning, then they will find working with the code less difficult. So it is hard to recognise how to simplify code that you are already familiar with. This is why I try to get “the new kid” to critique the code before they get too institutionalised!&lt;/p&gt;&lt;p&gt;It is likely that the previous author(s) created this huge mess one tiny increment at a time, not all at once. So you are the first person who has ever had to try to make sense of it all at once.&lt;/p&gt;&lt;p&gt;In my class I describe a sprawling SQL stored procedure we were looking at one day, with hundreds of lines of conditionals in a huge WHERE clause. Someone asked how anyone could have let it get this bad. I told them: “When there are only 2 or 3 conditionals, adding another one doesn’t make any difference. By the time there are 20 or 30 conditionals, adding another one doesn’t make any difference!”&lt;/p&gt;&lt;p&gt;There is no “simplifying force” acting on the code base other than deliberate choices that you make. Simplifying takes effort, and people are too often in a hurry.&lt;/p&gt;&lt;p&gt;Thanks to Dan North for his comment.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;If you've internalized the mental models of the project into your long-term memory, you won't experience a high cognitive load.&lt;/p&gt;&lt;p&gt;The more mental models there are to learn, the longer it takes for a new developer to deliver value.&lt;/p&gt;&lt;p&gt;Once you onboard new people on your project, try to measure the amount of confusion they have (pair programming may help). If they're confused for more than ~40 minutes in a row - you've got things to improve in your code.&lt;/p&gt;&lt;p&gt;If you keep the cognitive load low, people can contribute to your codebase within the first few hours of joining your company.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Our architecture is a standard CRUD app architecture, a Python monolith on top of Postgres&lt;/item&gt;&lt;item&gt;How Instagram scaled to 14 million users with only 3 engineers&lt;/item&gt;&lt;item&gt;The companies where we were like ”woah, these folks are smart as hell” for the most part failed&lt;/item&gt;&lt;item&gt;One function that wires up the entire system. If you want to know how the system works - go read it&lt;/item&gt;&lt;/list&gt;&lt;p&gt;These architectures are quite boring and easy to understand. Anyone can grasp them without much mental effort.&lt;/p&gt;&lt;p&gt;Involve junior developers in architecture reviews. They will help you to identify the mentally demanding areas.&lt;/p&gt;&lt;p&gt;Maintaining software is hard, things break and we would need every bit of mental effort we can save.&lt;/p&gt;&lt;p&gt;Imagine for a moment that what we inferred in the second chapter isn’t actually true. If that’s the case, then the conclusion we just negated, along with the conclusions in the previous chapter that we had accepted as valid, might not be correct either. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Do you feel it? Not only do you have to jump all over the article to get the meaning (shallow modules!), but the paragraph in general is difficult to understand. We have just created an unnecessary cognitive load in your head. Do not do this to your colleagues.&lt;/p&gt;&lt;p&gt;We should reduce any cognitive load above and beyond what is intrinsic to the work we do.&lt;/p&gt;&lt;head&gt;Comments&lt;/head&gt;&lt;p&gt;Rob Pike&lt;lb/&gt;Nice article.&lt;/p&gt;&lt;p&gt;Andrej Karpathy (ChatGPT, Tesla)&lt;lb/&gt;Nice post on software engineering. Probably the most true, least practiced viewpoint.&lt;/p&gt;&lt;p&gt;Elon Musk&lt;lb/&gt;True.&lt;/p&gt;&lt;p&gt;Addy Osmani (Chrome, the most complex software system in the world)&lt;lb/&gt;I've seen countless projects where smart developers created impressive architectures using the latest design patterns and microservices. But when new team members tried to make changes, they spent weeks just trying to understand how everything fits together. The cognitive load was so high that productivity plummeted and bugs multiplied.&lt;/p&gt;&lt;p&gt;The irony? Many of these complexity-inducing patterns were implemented in the name of "clean code."&lt;/p&gt;&lt;p&gt;What really matters is reducing unnecessary cognitive burden. Sometimes this means fewer, deeper modules instead of many shallow ones. Sometimes it means keeping related logic together instead of splitting it into tiny functions.&lt;/p&gt;&lt;p&gt;And sometimes it means choosing boring, straightforward solutions over clever ones. The best code isn't the most elegant or sophisticated - it's the code that future developers (including yourself) can understand quickly.&lt;/p&gt;&lt;p&gt;Your article really resonates with the challenges we face in browser development. You're absolutely right about modern browsers being among the most complex software systems. Managing that complexity in Chromium is a constant challenge that aligns perfectly with many of the points you made about cognitive load.&lt;/p&gt;&lt;p&gt;One way we try to handle this in Chromium is through careful component isolation and well-defined interfaces between subsystems (like rendering, networking, JavaScript execution, etc.). Similar to your deep modules example with Unix I/O - we aim for powerful functionality behind relatively simple interfaces. For instance, our rendering pipeline handles incredible complexity (layout, compositing, GPU acceleration) but developers can interact with it through clear abstraction layers.&lt;/p&gt;&lt;p&gt;Your points about avoiding unnecessary abstractions really hit home too. In browser development, we constantly balance between making the codebase approachable for new contributors while handling the inherent complexity of web standards and compatibility.&lt;/p&gt;&lt;p&gt;Sometimes the simplest solution is the best one, even in a complex system.&lt;/p&gt;&lt;p&gt;antirez (Redis)&lt;lb/&gt;Totally agree about it :) Also, what I believe is missing from mentioned "A Philosophy of Software Design" is the concept of "design sacrifice". That is, sometimes you sacrifice something and get back simplicity, or performances, or both. I apply this idea continuously, but often is not understood.&lt;/p&gt;&lt;p&gt;A good example is the fact that I always refused to have hash items expires. This is a design sacrifice because if you have certain attributes only in the top-level items (the keys themselves), the design is simpler, values will just be objects. When Redis got hash expires, it was a nice feature but required (indeed) many changes to many parts, raising the complexity.&lt;/p&gt;&lt;p&gt;Another example is what I'm doing right now, Vector Sets, the new Redis data type. I decided that Redis would not be the source of truth about vectors, but that it can just take an approximate version of them, so I was able to do on-insert normalization, quantization without trying to retain the large floats vector on disk, and so forth. May vector DBs don't sacrifice the fact of remembering what the user put inside (the full precision vector).&lt;/p&gt;&lt;p&gt;These are just two random examples, but I apply this idea everywhere. Now the thing is: of course one must sacrifice the right things. Often, there are 5% features that account for a very large amount of complexity: that is a good thing to kill :D&lt;/p&gt;&lt;p&gt;A developer from the internet&lt;lb/&gt;You would not hire me... I sell myself on my track record of released enterprise projects.&lt;/p&gt;&lt;p&gt;I worked with a guy that could speak design patterns. I could never speak that way, though I was one of the few that could well understand him. The managers loved him and he could dominate any development conversation. The people working around him said he left a trail of destruction behind him. I was told that I was the first person that could understand his projects. Maintainability matters. I care most about TCO. For some firms, that's what matters.&lt;/p&gt;&lt;p&gt;I logged into Github after not being there for a while and for some reason it took me to an article in a repository by someone that seemed random. I was thinking "what is this" and had some trouble getting to my home page, so I read it. I didn't really register it at the time, but it was amazing. Every developer should read it. It largely said that almost everything we've been told about programming best practices leads to excessive "cognitive load", meaning our minds are getting kicked by the intellectual demands. I've known this for a while, especially with the demands of cloud, security and DevOps.&lt;/p&gt;&lt;p&gt;I also liked it because it described practices I have done for decades, but never much admit to because they are not popular... I write really complicated stuff and need all the help I can get.&lt;/p&gt;&lt;p&gt;Consider, if I'm right, it popped up because the Github folks, very smart people, though that developers should see it. I agree.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45074248</guid></item><item><title>You Have to Feel It</title><link>https://mitchellh.com/writing/feel-it</link><description>&lt;doc fingerprint="b887f3b997e7a4e0"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Mitchell Hashimoto&lt;/head&gt;
    &lt;head rend="h1"&gt;You Have to Feel It&lt;/head&gt;
    &lt;p&gt;You see a series of checkboxes checked. Schedules met. Requirements satisfied. Demos delivered. It's a good day. Good job, you, good job! A promotion is in sight.&lt;/p&gt;
    &lt;p&gt;But you didn't feel it. You didn't feel it.&lt;/p&gt;
    &lt;p&gt;We, as people, feel something with every interaction. Frustration, joy, relief, confidence. A feeling. A person interacts with our work. Our work evokes a feeling. The feeling matters. The feeling is part of the work. The desired feeling is part of the requirements.&lt;/p&gt;
    &lt;p&gt;When you feel it, you know. The feature makes you smile when you use it. It fits right in, like it was always meant to be there. You want to use it again. You want to tell people about it.&lt;/p&gt;
    &lt;p&gt;This is the difference. This is what metrics, specifications, and demos miss. They don't capture the feeling. For the people who will use and live in the work, the feeling is part of their daily experience. Which means you can't stop at checking the boxes on paper. You have to sit with it, use it, live with it.&lt;/p&gt;
    &lt;p&gt;You have to feel it.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45075048</guid></item><item><title>New research reveals longevity gains slowing, life expectancy of 100 unlikely</title><link>https://lafollette.wisc.edu/news/new-research-reveals-longevity-gains-slowing-life-expectancy-of-100-unlikely/</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45075813</guid></item><item><title>My phone is an ereader now</title><link>https://www.davepagurek.com/blog/minimal-phone/</link><description>&lt;doc fingerprint="e73881166b47bbdb"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;My phone is an ereader now&lt;/head&gt;
    &lt;p&gt;I got a Kobo in 2016 after borrowing my mom's old one for a year before that. It probably is responsible for getting me reading again after high school. I used to be an avid reader, the sort of kid who would have to be told to put down the book and go to sleep, and who would then creep slowly to the bookshelf to pick it up again without arousing suspicion after the light had been turned out. I think I slowed my reading for fun as the work load of school increased, and stopped when moving every four months for internships in university. Having something small and portable that I could load books onto changed that and got my momentum going again. I now loosely grade how much I'm thriving by how much I'm reading, as an indirect indicator of how not burnt out I am.&lt;/p&gt;
    &lt;p&gt;It fared me quite well, but I had a few issues with it. Library books would randomly not work on it, even if they would show up on, for example, the Libby app on my phone. It also came with a way to sync articles to it via Pocket, but it always required a little too much forethought for me: I had to remember to find and save articles beforehand in order to then read them later. There were some services to do this automatically via RSS but the syncing process itself was just slow enough that I found myself rarely doing it. Also, Mozilla has now killed Pocket as a service. In the middle of writing this, they announced support for Instapaper instead, but it has the same workflow issues for me. My partner reads on her phone, but something about reading on a screen grates on me after a while, and makes it too easy to jump to something else.&lt;/p&gt;
    &lt;p&gt;So I was intrigued when I heard about the Minimal Phone, an Android phone with an epaper display. It wasn't the first epaper Android device I'd seenâI've seen reviews saying the Boox Palma is actually pretty greatâbut it was the idea of this being an actual phone that can take a sim card that really get me interested. What if I could read the news and blogs on what looks like paper while commuting, without having the forethought of downloading or syncing something? I might otherwise spend that time staring into space or looking at nothing on Bluesky. I'd probably rather be reading a bit of a book, or other longer-form writing. So I ordered one as a gift to myself.&lt;/p&gt;
    &lt;p&gt;I figured I might be a good fit for this device. I don't really watch videos on my phone. I send messages a bit, but not urgently. Most of the time I'm at or near a full keyboard anyway. I take some photos, but not that many any more. I feel like the photo winds changed for me sometime in university and I now feel weird posting Nice Photos to social media. Who are those for, really? I now send quick photos directly to friends mostly, and they don't have to be print quality or anything. They just have to be visible.&lt;/p&gt;
    &lt;p&gt;With that in mind, I went in treating it like an experiment. I still have my Kobo that has its annoyances but works. I still have a fully functional Pixel 8 phone. I don't need this to work. At worst, this could just be an alternate ereader for me. So when it arrived mid-July, I started testing it full-time to see how it'd go, with my normal phone in my bag just in case.&lt;/p&gt;
    &lt;p&gt;Overall, I actually really like it! I absolutely would not recommend this device to everyoneâI'll get into why laterâbut it's been working pretty well for me.&lt;/p&gt;
    &lt;head rend="h2"&gt;How the Minimal Phone works&lt;/head&gt;
    &lt;p&gt;This phone is around the same size of my Pixel 8. It's just a tad shorter and just a tad wider. I don't really feel the shortness, but I do feel the wideness a bit, which makes it more comfortable to read on. The bottom third of the height is taken up by a physical keyboard, and the top two thirds are an epaper display.&lt;/p&gt;
    &lt;p&gt;It's just Android under there, with a black-and-white epaper display. It comes with a few launchers, and I use one that works like a pretty traditional launcher, but comes with some built in icon choices that look sharp on the display.&lt;/p&gt;
    &lt;p&gt;There's a side button between the phone's volume keys that you can tap to flash the display to clear ghosting. I don't find myself doing this oftenâghosting is not that badâbut if you press and hold it, it opens the display settings. This is something I do all the time.&lt;/p&gt;
    &lt;p&gt;From the settings screen, you can turn on and off the light on the display and on the keyboard, and also change the display light's colour temperature. I mostly leave those off; I only need those if I'm outside after dark, and the controls are big enough that I can turn them on easily enough in low light.&lt;/p&gt;
    &lt;p&gt;The most important setting is the refresh rate at the bottom. The slowest setting has the slowest refresh rate, but the highest quality visuals: always showing nice shades of grey, and with less ghosting but more flashing as it updates. The fastest setting (which, to be clear, is still not very fast) has much less flashing, a little more ghosting, and dithers pure black and white rather than showing any shades of grey. The middle setting, "hybrid" mode, is a combination of the two: it uses the faster setting while things are moving onscreen, and then updates to the slower, higher quality render when movement stops. I generally keep the phone in this hybrid mode, except for a few specific cases.&lt;/p&gt;
    &lt;p&gt;The keyboard feels pretty good, and it's a comfortable size to type on with two thumbs. I can't really one-handed type on this phone; it's a tad too wide for that, but the width is worth it for easier reading. I really appreciate them including the keyboard here, as the display looks great but is definitely not all that responsive, so typing would be a lot more frustrating without this.&lt;/p&gt;
    &lt;head rend="h2"&gt;The great parts&lt;/head&gt;
    &lt;p&gt;This thing is so nice to read on.&lt;/p&gt;
    &lt;p&gt;I hate reading on screens. Something about dark mode especially messes with my eyes, but even without that, I've never enjoyed reading articles on my phone. Too easy to get distracted, the minor eye strain... This device though, the epaper display looks great. It's not especially high resolution or anything, but I could spend a long time reading on this without issue. I just spent two flights (Toronto to Vancouver and back again) just reading books on this, and I'd do it again. It's really crisp and visible in the sun too.&lt;/p&gt;
    &lt;p&gt;It's super easy to queue up library book holds and read them all from the phone. I have had zero issues with that. Being able to add new things on-the-go has also made it really easy to grab another book on the spot once I finish one. I definitely have found myself reading more books this past month and a half.&lt;/p&gt;
    &lt;p&gt;I also now am more likely to read people's blogs on an RSS reader than scroll through social media. I wasn't setting out to fully purge social media or anything, but I certainly feel a little more fulfilled after reading something that someone has clearly put time and effort into.&lt;/p&gt;
    &lt;p&gt;Possibly as a consequence of the display technology, I also generally get 2 days of usage out of a charge. Most days I finish with 70% battery remaining, letting me go another day with some buffer room. On some really low usage days, I could maybe even go more, but already this is great. On a high usage day, I'll maybe end with 50%, which is still fine by me.&lt;/p&gt;
    &lt;p&gt;This is secondary, by far, but I also feel now that I can fully turn off autocorrect, as this phone has a physical keyboard. Most of the time (with important caveats), I don't make typos. So I no longer have to suffer through autocorrect changing programming terms (which I still type a lot of), changing my capitalization, or doing its own insane capitalization (why would it format "city Hall" with just one capital? Commit to capitals or no capitals, don't do this awkward mix!)&lt;/p&gt;
    &lt;p&gt;As another minor note, the fingerprint reader is actually quite fast. When it remembers my fingerprints, it's super reliable. ("What do you mean, when it remembers?" I'll get into it later, there's a pretty bad bug here. But in regular usage, it really does work well.)&lt;/p&gt;
    &lt;p&gt;Everything else this phone does, it does a little worse than a normal phone, but not so much worse that it's a problem. I assume it would be a lot worse at watching videos but I never really did that much on my old phone anyway. So on the whole, this phone works really well where I want it to, and generally gets out of my way for the usual stuff. I keep using it without really worrying about it.&lt;/p&gt;
    &lt;p&gt;The camera, once set up properly, is pretty passable. Well, the selfie camera is in a super awkward spot, but I don't really find myself using it anyway. But other photos look decent enough that I'm not embarrassed to send them to people!&lt;/p&gt;
    &lt;head rend="h2"&gt;Growing pains&lt;/head&gt;
    &lt;p&gt;Even though I do really like this thing, and am continuing to use it as my primary device, there are a lot of rough edges. This device is made by, primarily, two people (although they've been adding more developers in the past few weeks), so naturally there will be a lot of rough edges. You have to be willing to accept that if you're going to use this phone. They do make updates, but the pace is slow, and they are definitely bogged down by customer support and shipping/manufacturing logistics, so you need to not bank on fixes happening quickly.&lt;/p&gt;
    &lt;p&gt;There's a double-tap-to-wake feature that you can't turn off, and it takes a sec once locked to stop responding to inputs. Consequently, I now put this in my pocket with the display facing out, which is opposite of what I used to do, in order to prevent accidentally disturbing it in my pocket. Doing that, I haven't had issues, but it's an adjustment you have to make for this phone right now.&lt;/p&gt;
    &lt;p&gt;There are a few things you'll probably need to do to the device to make it work well for you. One of them involves the camera. By default, the camera super aggressively denoises its photos, resulting in images that look like they came off of my flip phone from 2008. However, if you use the Open Camera app, switch it to use the Camera 2 API, it then lets you turn off noise reduction in the settings. The resulting images look much crisper, and do have noise, but a tastefulâdare I say aesthetic?âamount of noise. There is no Pixel-style HDR in these photos, but now that that look is everywhere, the resulting photos are... kind of refreshing.&lt;/p&gt;
    &lt;p&gt;The phone also uses something called Duraspeed to aggressively turn off background apps. This works well in general, but it also can stifle some notifications that you do want, and also can affect background audio. I know some people fully turn Duraspeed off, but I've just turned it off for my messaging apps and my music/podcast apps. I've had no notification or background process related issues since doing so.&lt;/p&gt;
    &lt;p&gt;I also found that the backlight was way too bright, and I didn't really want any lights on most of the time anyway. I found that when opening the display settings, it'd turn all the lights back on. But if I save a preset, then it'd stick. You can do that by changing the settings, and then pressing and holding on the wrench icon to save it to your custom preset.&lt;/p&gt;
    &lt;p&gt;Finally, the hybrid refresh mode needs things to stop moving in order to lock in on a higher quality render. That means animated ads are somehow even more annoying than they normally are. Thankfully, Firefox for Android lets you install addons, such as uBlock Origin, to deal with that.&lt;/p&gt;
    &lt;head rend="h2"&gt;Bugs&lt;/head&gt;
    &lt;p&gt;The most annoying bug is that this phone will occasionally restart and forget your fingerprint, forcing you to enter your PIN. I don't know why this happens. I can go for a few weeks with it working fine, and then it'll just forget. I can still get in with the PIN, so it's not locking me out, but there's really never a good time to re-set up a fingerprint, and typing a PIN on the onscreen display is slow and cumbersome. This is the bug I hope gets fixed the most.&lt;/p&gt;
    &lt;p&gt;Another bug has something to do with the screen refresh rate, and something to do with responding to keyboard input. If you're on a slower refresh rate and are typing quickly, sometimes it misses keypresses, and you have to go back and fix things. This is also quite annoying, but doesn't seem to happen on the highest screen refresh rate. As a workaround, when I'm sending messages, I switch to the fastest refresh setting. This one-or-the-other approach isn't great though (I still want photos sent to me in messaging apps to look nice!), so I'd love to see that improved over time.&lt;/p&gt;
    &lt;p&gt;I also have to use the phone in the lowest refresh rate for Google Maps in order to see the streets on the map. The color scheme is just too low contrast for the high refresh rate's dithering. The hybrid setting doesn't work either: your location on the map is always slightly moving and so it never locks in and renders a higher-quality image. Arguably, this is a problem with Google Maps because they don't have a high contrast mode. Surely that would have accessibility benefits beyond just this weird device!&lt;/p&gt;
    &lt;p&gt;There's a software update that the Minimal team has been working on for almost two months that will apparently address the fingerprint forgetting issue, make double-tap-to-wake optional, significantly increase the refresh rate on the fast refresh mode, and let you save per-app refresh rate settings. That'll address some of my problems for sure! But it also hasn't shipped yet. To use this device is an exercise in patience, and being accepting of imperfections.&lt;/p&gt;
    &lt;head rend="h2"&gt;Feature Requests&lt;/head&gt;
    &lt;p&gt;None of these are dealbreakers for me, but here's what I'm hoping to see in the future:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;I feel like the vibration on the phone is a tad aggressive. Not every vibration is, thoughâFacebook Messenger notifications feel like the right level. I'd love to be able to adjust the cap for vibration intensity!&lt;/item&gt;
      &lt;item&gt;I would love emoji search in the keyboard. But I also don't use that many different emoji or symbols, and by now the ones I do use are in the recents list, so it's fine. But the one time I need to use a weird one, it'd be nice to have!&lt;/item&gt;
      &lt;item&gt;I wish the hybrid refresh mode would work well with camera apps. As it is, I think too much of the screen is updating at once, so it flashes a large part of the display every frame, making it really hard to see. If I put the phone in fast mode, there's no flashing, which is great! But then when I take a photo and tap on the thumbnail to see it, I have to switch back to hybrid or slow mode to see a clearer, non-dithered version. This is a little annoying, and I feel could be improved, but then again I'm not really using this to take a lot of photos anyway.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Concluding the experiment&lt;/head&gt;
    &lt;p&gt;It's been more than a month, and despite not everything being perfect, I'm going to continue using this phone. I do occasionally switch to my Pixel 8 though. I use my Pixel 8 for running for its better waterproofing. When I needed to get actual good, postable photos from SIGGRAPH two weeks ago, I just used my Pixel 8. When seeing LCD Soundsystem last weekend, rather than worry about weirdness with the Ticketmaster app, I just took my Pixel 8. But I've used normal boarding passes for airplanes on my MP01, and I regularly go out without a backup phone. I do mostly rely on my partner to do Google Maps navigation since that's a little bit smoother, although in a pinch I can still use it myself (and the Transit app is a little better in hybrid mode.)&lt;/p&gt;
    &lt;p&gt;Basically, I use the right tool for the job, and this phone doesn't have to be that tool for all jobs. But it turns out I don't need my phone to do all that many jobs, and it's maybe a good thing for it to be doing less of them.&lt;/p&gt;
    &lt;p&gt;There are enough quirks that I wouldn't automatically recommend this experience. But if you know what you're getting into and have the right expectations, this is a really great little device!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45079962</guid></item><item><title>Red: A programming language inspired by REBOL</title><link>https://github.com/red/red</link><description>&lt;doc fingerprint="54eba1b9d3e3f86"&gt;
  &lt;main&gt;
    &lt;p&gt;Red is a programming language strongly inspired by Rebol, but with a broader field of usage thanks to its native-code compiler, from system programming to high-level scripting, while providing modern support for concurrency and multi-core CPUs.&lt;/p&gt;
    &lt;p&gt;Red tackles the software building complexity using a DSL-oriented approach (we call them dialects) . The following dialects are built-in:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Red/System: a C-level system programming language compiled to native code&lt;/item&gt;
      &lt;item&gt;Parse: a powerful PEG parser&lt;/item&gt;
      &lt;item&gt;VID: a simple GUI layout creation dialect&lt;/item&gt;
      &lt;item&gt;Draw: a vector 2D drawing dialect&lt;/item&gt;
      &lt;item&gt;Rich-text: a rich-text description dialect&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Red has its own complete cross-platform toolchain, featuring an encapper, a native compiler, an interpreter, and a linker, not depending on any third-party library, except for a Rebol2 interpreter, required during the alpha stage. Once 1.0 is reached, Red will be self-hosted. Currently, Red is still at alpha stage and 32-bit only.&lt;/p&gt;
    &lt;p&gt;Red's main features are:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Human-friendly syntax&lt;/item&gt;
      &lt;item&gt;Homoiconic (Red is its own meta-language and own data-format)&lt;/item&gt;
      &lt;item&gt;Functional, imperative, reactive and symbolic programming&lt;/item&gt;
      &lt;item&gt;Prototype-based object support&lt;/item&gt;
      &lt;item&gt;Multi-typing&lt;/item&gt;
      &lt;item&gt;Powerful pattern-matching Macros system&lt;/item&gt;
      &lt;item&gt;Rich set of built-in datatypes (50+)&lt;/item&gt;
      &lt;item&gt;Both statically and JIT-compiled(*) to native code&lt;/item&gt;
      &lt;item&gt;Cross-compilation done right&lt;/item&gt;
      &lt;item&gt;Produces executables of less than 1MB, with no dependencies&lt;/item&gt;
      &lt;item&gt;Concurrency and parallelism strong support (actors, parallel collections)(*)&lt;/item&gt;
      &lt;item&gt;Low-level system programming abilities through the built-in Red/System DSL&lt;/item&gt;
      &lt;item&gt;Powerful PEG parser DSL built-in&lt;/item&gt;
      &lt;item&gt;Fast and compacting Garbage Collector&lt;/item&gt;
      &lt;item&gt;Instrumentation built-in for the interpreter, lexer and parser.&lt;/item&gt;
      &lt;item&gt;Cross-platform native GUI system, with a UI layout DSL and a drawing DSL&lt;/item&gt;
      &lt;item&gt;Bridging to the JVM&lt;/item&gt;
      &lt;item&gt;High-level scripting and REPL GUI and CLI consoles included&lt;/item&gt;
      &lt;item&gt;Visual Studio Code plugin, with many helpful features&lt;/item&gt;
      &lt;item&gt;Highly embeddable&lt;/item&gt;
      &lt;item&gt;Low memory footprint&lt;/item&gt;
      &lt;item&gt;Single-file (~1MB) contains whole toolchain, full standard library and REPL (**)&lt;/item&gt;
      &lt;item&gt;No install, no setup&lt;/item&gt;
      &lt;item&gt;Fun guaranteed!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;(*) Not implemented yet. (**) Temporarily split in two binaries&lt;/p&gt;
    &lt;p&gt;More information at red-lang.org.&lt;/p&gt;
    &lt;p&gt;Download a GUI or CLI console binary suitable for your operating system, rename it at your convenience, then run it from shell or by double-clicking on it (Windows). You should see the following output:&lt;/p&gt;
    &lt;code&gt;    ---== Red 0.6.5 ==--
    Type HELP for starting information.

    &amp;gt;&amp;gt;
&lt;/code&gt;
    &lt;p&gt;A simple Hello World would look like:&lt;/p&gt;
    &lt;code&gt;    &amp;gt;&amp;gt; print "Hello World!"
    Hello World!
&lt;/code&gt;
    &lt;p&gt;If you are on the GUI console, a GUI Hello World (prompt omitted):&lt;/p&gt;
    &lt;code&gt;    view [text "Hello World!"]
&lt;/code&gt;
    &lt;p&gt;A more sophisticated example that retrieves the last commits from this repo and displays their log messages in a scrollable list:&lt;/p&gt;
    &lt;code&gt;    view [
        text-list data collect [
            foreach event load https://api.github.com/repos/red/red/commits [
                keep event/commit/message
            ]
        ]
    ]
&lt;/code&gt;
    &lt;p&gt;Note: check also the following improved version allowing you to click on a given commit log and open the commit page on github.&lt;/p&gt;
    &lt;p&gt;You can now head to see and try some showcasing scripts here and there. You can run those examples from the console directly using Github's "raw" link. E.g.:&lt;/p&gt;
    &lt;code&gt;    &amp;gt;&amp;gt; do https://raw.githubusercontent.com/red/code/master/Showcase/calculator.red
&lt;/code&gt;
    &lt;p&gt;Note: If you are using the Wine emulator, it has some issues with the GUI-Console. Install the &lt;code&gt;Consolas&lt;/code&gt; font to fix the problem.&lt;/p&gt;
    &lt;p&gt;The Red toolchain comes as a single executable file that you can download for the big-3 platforms (32-bit only for now). Rename the file to &lt;code&gt;redc&lt;/code&gt; (or &lt;code&gt;redc.exe&lt;/code&gt; under Windows).&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Put the downloaded redc binary in the working folder.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;In a code or text editor, write the following Hello World program:&lt;/p&gt;
        &lt;code&gt;Red [ Title: "Simple hello world script" ] print "Hello World!"&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Save it under the name: hello.red&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Generate a compiled executable from that program: (first run will pre-compile libRedRT library)&lt;/p&gt;
        &lt;code&gt;$ redc -c hello.red $ ./hello&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Want to generate a compiled executable from that program with no dependencies?&lt;/p&gt;
        &lt;code&gt;$ redc -r hello.red $ ./hello&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Want to cross-compile to another supported platform?&lt;/p&gt;
        &lt;code&gt;$ redc -t Windows hello.red $ redc -t Darwin hello.red $ redc -t Linux-ARM hello.red&lt;/code&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The full command-line syntax is:&lt;/p&gt;
    &lt;code&gt;redc [command] [options] [file]
&lt;/code&gt;
    &lt;p&gt;&lt;code&gt;[file]&lt;/code&gt; any Red or Red/System source file.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The -c, -r and -u options are mutually exclusive.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;
      &lt;code&gt;[options]&lt;/code&gt;
    &lt;/p&gt;
    &lt;code&gt;-c, --compile                  : Generate an executable in the working
                                 folder, using libRedRT. (development mode)

-d, --debug, --debug-stabs     : Compile source file in debug mode. STABS
                                 is supported for Linux targets.

-dlib, --dynamic-lib           : Generate a shared library from the source
                                 file.

-e, --encap                    : Compile in encap mode, so code is interpreted
                                 at runtime. Avoids compiler issues. Required
                                 for some dynamic code.

-h, --help                     : Output this help text.

-o &amp;lt;file&amp;gt;, --output &amp;lt;file&amp;gt;     : Specify a non-default [path/][name] for
                                 the generated binary file.

-r, --release                  : Compile in release mode, linking everything
                                 together (default: development mode).

-s, --show-expanded            : Output result of Red source code expansion by
                                 the preprocessor.

-t &amp;lt;ID&amp;gt;, --target &amp;lt;ID&amp;gt;         : Cross-compile to a different platform
                                 target than the current one (see targets
                                 table below).

-u, --update-libRedRT          : Rebuild libRedRT and compile the input script
                                  (only for Red scripts with R/S code).

-v &amp;lt;level&amp;gt;, --verbose &amp;lt;level&amp;gt;  : Set compilation verbosity level, 1-3 for
                                 Red, 4-11 for Red/System.

-V, --version                  : Output Red's executable version in x.y.z
                                 format.

--config [...]                 : Provides compilation settings as a block
                                 of `name: value` pairs.

--no-compress                  : Omit Redbin format compression.

--no-runtime                   : Do not include runtime during Red/System
                                 source compilation.

--no-view                      : Do not include VIEW module in the CLI console
                                 and the libRedRT.

--view &amp;lt;engine&amp;gt;                : Select the VIEW engine (native, terminal, GTK, test)

--red-only                     : Stop just after Red-level compilation.
                                 Use higher verbose level to see compiler
                                 output. (internal debugging purpose)

--show-func-map                : Output an address/name map of Red/System
                                 functions, for debugging purposes.
&lt;/code&gt;
    &lt;p&gt;
      &lt;code&gt;[command]&lt;/code&gt;
    &lt;/p&gt;
    &lt;code&gt;build libRed [stdcall]         : Builds libRed library and unpacks the
                                 libRed/ folder locally.

clear [&amp;lt;path&amp;gt;]                 : Delete all temporary files from current
                                 or target &amp;lt;path&amp;gt; folder.
&lt;/code&gt;
    &lt;p&gt;Cross-compilation targets:&lt;/p&gt;
    &lt;code&gt;MSDOS        : Windows, x86, console (+ GUI) applications
Windows      : Windows, x86, GUI applications
WindowsXP    : Windows, x86, GUI applications, no touch API
Linux        : GNU/Linux, x86, console (+ GUI) applications
Linux-GTK    : GNU/Linux, x86, GUI only applications
Linux-musl   : GNU/Linux, x86, musl libc
Linux-ARM    : GNU/Linux, ARMv5, armel (soft-float)
RPi          : GNU/Linux, ARMv7, armhf (hard-float)
RPi-GTK      : GNU/Linux, ARMv7, armhf (hard-float), GUI only applications
Pico         : GNU/Linux, ARMv7, armhf (hard-float), uClibc
Darwin       : macOS Intel, console-only applications
macOS        : macOS Intel, applications bundles
Syllable     : Syllable OS, x86
FreeBSD      : FreeBSD, x86
NetBSD       : NetBSD, x86
Android      : Android, ARMv5
Android-x86  : Android, x86
&lt;/code&gt;
    &lt;p&gt;Note: The toolchain executable (&lt;code&gt;redc.exe&lt;/code&gt;) relies on Rebol encapper which does not support being run from a location specified in &lt;code&gt;PATH&lt;/code&gt; environment variable and you get &lt;code&gt;PROGRAM ERROR: Invalid encapsulated data&lt;/code&gt; error. If you are on Windows try using PowerShell instead of CMD. You can also provide the full path to the executable, put a copy of it in your working folder or wrap a shell script (see relevant tickets: #543 and #1547).&lt;/p&gt;
    &lt;p&gt;The compiler and linker are currently written in Rebol. Please follow the instructions for installing the compiler toolchain in order to run it from sources:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Clone this git repository or download an archive (&lt;/p&gt;&lt;code&gt;ZIP&lt;/code&gt;button above or from tagged packages).&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Download a Rebol interpreter suitable for your OS: Windows, Linux (or Linux), Mac OS X, FreeBSD, OpenBSD, Solaris.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Extract the&lt;/p&gt;&lt;code&gt;rebol&lt;/code&gt;binary, put it in the root folder, that's all!&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Let's test it: run&lt;/p&gt;&lt;code&gt;./rebol&lt;/code&gt;, you'll see a&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;prompt appear. Windows users need to double-click on the&lt;code&gt;rebol.exe&lt;/code&gt;file to run it.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;From the REBOL console type:&lt;/p&gt;
        &lt;code&gt;&amp;gt;&amp;gt; do/args %red.r "%tests/hello.red"&lt;/code&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The compilation process should finish with a &lt;code&gt;...output file size&lt;/code&gt; message. The resulting binary is in the working folder. Windows users need to open a DOS console and run &lt;code&gt;hello.exe&lt;/code&gt; from there.&lt;/p&gt;
    &lt;p&gt;You can compile the Red console from source:&lt;/p&gt;
    &lt;code&gt;    &amp;gt;&amp;gt; do/args %red.r "-r %environment/console/CLI/console.red"
&lt;/code&gt;
    &lt;p&gt;To compile the Windows GUI console from source:&lt;/p&gt;
    &lt;code&gt;    &amp;gt;&amp;gt; do/args %red.r "-r -t Windows %environment/console/GUI/gui-console.red"
&lt;/code&gt;
    &lt;p&gt;Note: the &lt;code&gt;-c&lt;/code&gt; argument is not necessary when launching the Red toolchain from sources, as the default action is to compile the input script (the toolchain in binary form default action is to run the input script through the interpreter).
The &lt;code&gt;-r&lt;/code&gt; argument is needed when compiling the Red console to make additional runtime functions available.&lt;/p&gt;
    &lt;p&gt;Note: The red git repository does not include a &lt;code&gt;.gitignore&lt;/code&gt; file. If you run the automated tests, several files will be created that are not stored in the repository. Installing and renaming a copy of &lt;code&gt;.git/.gitignore-sample&lt;/code&gt; file will ignore these generated files.&lt;/p&gt;
    &lt;p&gt;If you want to contribute code to the Red project be sure to read the guidelines first.&lt;/p&gt;
    &lt;p&gt;It is usually a good idea to inform the Red team about what changes you are going to make in order to ensure that someone is not already working on the same thing. You can reach us through our chat room.&lt;/p&gt;
    &lt;p&gt;Satisfied with the results of your change and want to issue a pull request on Github?&lt;/p&gt;
    &lt;p&gt;Make sure the changes pass all the existing tests, add relevant tests to the test-suite, and please test on as many platforms as you can. You can run all the tests using (from Rebol console, at repository root):&lt;/p&gt;
    &lt;code&gt;    &amp;gt;&amp;gt; do %run-all-tests.r
&lt;/code&gt;
    &lt;p&gt;If you want git version included in your Red console built from sources, use this command:&lt;/p&gt;
    &lt;code&gt;call/show ""                                              ;-- patch call bug on Windows
save %build/git.r do %build/git-version.r                 ;-- lookup git version if available
do/args %red.r "-r %environment/console/CLI/console.red"  ;-- build Console
write %build/git.r "none^/"                               ;-- restore git repo status&lt;/code&gt;
    &lt;p&gt;Some anti-virus programs are a bit too sensitive and can wrongly report an alert on some binaries generated by Red (see here for the details). If that happens to you, please report it to your anti-virus vendor as a false positive.&lt;/p&gt;
    &lt;p&gt;Both Red and Red/System are published under BSD license, runtime is under BSL license. BSL is a bit more permissive license than BSD, more suitable for the runtime parts.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45080051</guid></item><item><title>Sheafification – The optimal path to mathematical mastery: The fast track (2022)</title><link>https://sheafification.com/the-fast-track/</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45080388</guid></item><item><title>My Foray into Vlang</title><link>https://kristun.dev/posts/my-foray-into-vlang/</link><description>&lt;doc fingerprint="3e081710cb80169b"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Table of contents&lt;/head&gt;
    &lt;head&gt;Open Table of contents&lt;/head&gt;
    &lt;head rend="h1"&gt;A little bit about Go&lt;/head&gt;
    &lt;p&gt;I like Go. I actually donât mind writing &lt;code&gt;err != nil&lt;/code&gt; that much. Just set up a snippet and youâre good to Go. Although, I never really felt like I had a honeymoon period with Go. I learned the language, learned about channels, wrote a bunch of CRUDs and parsers and CLIs. It always felt strictly business. I thought it was because of where I am in my career. But I was wrong.&lt;/p&gt;
    &lt;p&gt;Go is vanilla. It just werks. You build it, you ship it. The language is simple and you donât need to try hard to make it performant.&lt;/p&gt;
    &lt;p&gt;But sometimes you just want a little spiceð¶ï¸ð¥µ&lt;/p&gt;
    &lt;p&gt;Do you ever wonder what else is out there? Hobby programming is a great meme. But I feel like weâre under too much pressure to produce the new unicorn SaaS with 10 million monthly active users.&lt;/p&gt;
    &lt;p&gt;You donât have to pick a tool then find the right job for it. You can just grab a hammer and start smashing stuff. The same nails youâve smashed before might feel different if you smash it with another hammer. Pick a Rusty hammer and you might end up obsessed with how important health and safety is.&lt;/p&gt;
    &lt;head rend="h1"&gt;So, wtf is Vlang?&lt;/head&gt;
    &lt;p&gt;I might have shot myself in the foot with the hammer analogy there, so letâs talk about ice cream. Ok so hereâs the gist: vanilla, drizzle some chocolate on top, peanuts? sure why not. You know this taste, you like it, it comes with more stuff on top. If you like vanilla then you might like vanilla++.&lt;/p&gt;
    &lt;p&gt;That how I see the current state of V. The syntax is similar to Go. It has extra features. The core of it is similar, you can cross compile, you have concurrency (which is also parallelism). Channels and message passing. Oh and &lt;code&gt;defer&lt;/code&gt; as well. All my bros love using &lt;code&gt;defer&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Anyway, letâs see some cool stuff.&lt;/p&gt;
    &lt;head rend="h2"&gt;Maps&lt;/head&gt;
    &lt;code&gt;// So simple!
simple_languages := {"elixir": {"score": 100, "width": 30}}

// Alternatively
mut languages := map[string]map[string]int{"elixir": {"score": 100, "width": 30}}
languages["elixir"] = {"score": 100}
languages["elixir"]["width"] = 30&lt;/code&gt;
    &lt;p&gt;Pretty cool! Much like Go, the maps require a fixed type, dynamic objects like JSON or JavaScript requires either a DTO or a type switch.&lt;/p&gt;
    &lt;p&gt;Ok, but what about the error handling?&lt;/p&gt;
    &lt;code&gt;elixir_score := languages["elixir"]["score"] or { -1 }

if racket := languages['racket'] {
  println('racket score ${racket['score']}')
  racket_width := racket['width'] or { 0 }
  println('racket width ${racket_width}')
}

// Another way to skin the cat
if 'haskell' in languages {
  if 'score' !in languages['haskell'] {
    println('where is my haskell score??')
  }
}

// Zeroth value
languages['this_dont_exist'] // {}
languages['this_dont_exist']['score'] // 0&lt;/code&gt;
    &lt;p&gt;Donât you miss destructuring?&lt;/p&gt;
    &lt;code&gt;languages_with_racket_ocaml := {
  ...languages
  'racket': {'score': 99}
  'ocaml': {'score': 98}
}&lt;/code&gt;
    &lt;head rend="h2"&gt;Struct-licious&lt;/head&gt;
    &lt;code&gt;module main

struct Language {
pub mut:
	score int = -1
	name  string @[required]
}

fn (lr []Language) total() int {
	mut total := 0
	for l in lr {
      if l.score &amp;gt; 0 {
        total += l.score
      }
	}

	return total
}

fn (lr []Language) average() int {
	return lr.total() / lr.len
}

fn main() {
	racket := Language{98, 'racket'}
    // Simple arrays too!
	langs_arr := [racket, Language{102, 'ocaml'}]
	println(langs_arr)
	println(langs_arr.total())
	println(langs_arr.average())
}&lt;/code&gt;
    &lt;p&gt;Isnât that cool? We can have receiver methods on array types. Wait - did you see that? We had a required tag on the struct, that means the program wonât compile if you donât initialise it. Thatâs another cool thing I wish Go has. Not to mention, the initialiser value, Goâs struct is quite predictable in how the value turns out. However, Vâs struct allows you to be explicit. This came in very handy for my case!&lt;/p&gt;
    &lt;code&gt;@[xdoc: 'Server for GitHub language statistics']
@[name: 'v-gh-stats']
struct Config {
mut:
	show_help bool   @[long: help; short: h; xdoc: 'Show this help message']
	user      string = os.getenv('GH_USER')           @[long: user; short: u; xdoc: 'GitHub username env \$GH_USER']
	token     string = os.getenv('GH_TOKEN')          @[long: token; short: t; xdoc: 'GitHub personal access token env \$GH_TOKEN']
	debug     bool   = os.getenv('DEBUG') == 'true'   @[long: debug; short: d; xdoc: 'Enable debug mode env \$DEBUG']
	cache     bool   = os.getenv('CACHE') == 'true'   @[long: cache; short: c; xdoc: 'Enable caching env \$CACHE']
}&lt;/code&gt;
    &lt;p&gt;This example contains flags for running my SVG generation server, it allows you to define the flags yourself but if not, use the environmental value. Neato!&lt;/p&gt;
    &lt;head rend="h2"&gt;WithOption pattern&lt;/head&gt;
    &lt;p&gt;Ahh yes, another thing I had to put up with. TBH, I did end up liking the pattern quite a bit. In Go, no default variables are allowed, you have to use variadics. You end up with an Option struct with zeroth value passing around a few functions to finally one last giant private receiver function that creates the struct, fills the value then finally build and check. Imagine a SQL repository pattern where you want to perform a List operation but optionally join or ensure some field is present in a query. Letâs see how we can cook this.&lt;/p&gt;
    &lt;code&gt;module main

import time

@[params]
struct ListOption {
pub mut:
	created_since time.Time
}

@[params]
struct HeroListOption {
	ListOption
pub mut:
	universe string
	name     ?string
}

struct Hero {}

struct Repo[T] {}

struct Villain {}

fn (r Repo[T]) list(o ListOption) ![]T {
	$if T is Villain {
		return error('whoops you found Villain some how but its not implemented yet')
	}

	return error('whoops not implemented for ${T.name} use one of (Hero, ...)')
}

fn (r Repo[Hero]) list(o HeroListOption) ![]Hero {
	mut query := orm.build_query()

	if o.universe != '' {
		query.eq('universe', o.universe)
	}

	if o.created_since.unix() &amp;gt; 0 {
		query.gt('created_since', o.created_since)
	}

	if name := o.name {
		query.eq('name', name)
	}

	return r.psql(query.do()!)!
}

fn main() {
	r := Repo[Villain]{}
	r.list() or { println(err) }

	hero_repo := Repo[Hero]{}
	hero_repo.list()!
	hero_repo.list(name: 'bruce')!
	hero_repo.list(name: 'bruce', universe: 'dc')!
	hero_repo.list(name: 'bruce', universe: 'marvel')!
	hero_repo.list(created_since: time.Time{year: 1996})!
}&lt;/code&gt;
    &lt;p&gt;Thereâs a lot to unpack here. Letâs start with &lt;code&gt;@[params]&lt;/code&gt; which tells the V compiler that the struct as a whole can be omitted entirely so you can write the empty function and it will still works. Secondly, since generics are a compile time thing we can use reflection to check for the name of the type itself. See link below to see what is possible. You can reflect and check for field existence and field types as well as attributes (remember &lt;code&gt;@[required]&lt;/code&gt;?).&lt;/p&gt;
    &lt;p&gt;Alright, we keep seeing this bang (&lt;code&gt;!&lt;/code&gt;) everywhere. So what is it? Short answer: Result type. Medium answer: &lt;code&gt;(int, err) -&amp;gt; !int&lt;/code&gt;. You donât need the long answer. The bang can propagate although you must remember to handle this somewhere or it will cause a panic eventually. Finally, the optional type. I purposedly only use it for one of the field to show that it can be done, you can decide how you want to write your optionals. But damn! It feels great!&lt;/p&gt;
    &lt;p&gt;go-uber/functional-options vlang/trailing-struct-args vlang/compile-time-reflection vlang/optional-and-result-type&lt;/p&gt;
    &lt;head rend="h2"&gt;Enums??? In this economy?&lt;/head&gt;
    &lt;p&gt;Enums are so back baby. We can totally replace the previous sectionâs &lt;code&gt;universe&lt;/code&gt; field as such.&lt;/p&gt;
    &lt;code&gt;enum Universe {
  dc
  marvel
  nil
}

fn (u Universe) str() ?string {
	return match u {
      // V knows the enum there's no need to type Universe.dc
      .dc { 'dc' }
      .marvel { 'marvel' }
      else {''}
	}
}

@[params]
struct HeroListOption {
	ListOption
pub mut:
	universe Universe = .nil
	name     ?string
}

fn (r Repo[Hero]) list(o HeroListOption) ![]Hero {
	...

	if o.universe != .nil {
		query.eq('universe', o.universe.str())
	}

	...
}

fn main() {
	hero_repo := Repo[Hero]{}
	hero_repo.list(name: 'bruce', universe: .dc)!

	// functions not expecting enum requires the full path
	// auto str() conversion here - see Go fmt.Stringer() or your __str__, __toString()
	println('${Universe.dc}')
}&lt;/code&gt;
    &lt;p&gt;Optional type might be better here. Iâm okay with this though. There is backed enum as well but you can only have integer backed enums. Did you also notice? Receiver method on the backed enum baby.&lt;/p&gt;
    &lt;head rend="h2"&gt;Lambda; the best kind of lamb&lt;/head&gt;
    &lt;p&gt;The array stucts have a set of methods you can use like the basic &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; - there is a stdlib module called &lt;code&gt;arrays&lt;/code&gt; as well that you need to import. It provides more complex methods like &lt;code&gt;fold&lt;/code&gt; and the likes. I donât know about you but I am chuffed this exists.&lt;/p&gt;
    &lt;code&gt;import math

fn example() {
	// type hinting here to skip typing Universe.*
	mut universes := []Universe{}
	universes = [.dc, .marvel, .nil, .dc]
	dcs_or_marvel := universes.filter(it != .nil)
	nils := universes.filter(|u| u == .nil)

	// sorting in place
	[5, 2, 1, 3, 4].sort(a &amp;lt; b)
	sorted := [5, 2, 1, 3, 4].sorted(a &amp;lt; b)
}

struct XY {
	x int
	y int
}

fn (xy XY) dist_from_origin() f64 {
	return math.sqrt((xy.x * xy.x) + (xy.y * xy.y))
}

fn example2() {
	xys := [XY{1, 2}, XY{10, 20}, XY{-1, -69}]
	xys.sort(a.dist_from_origin() &amp;lt; b.dist_from_origin())
	y_asc := xys.sorted(a.y &amp;lt; b.y)
}&lt;/code&gt;
    &lt;p&gt;Thereâs a few caveats here. You gotta make sure the function youâre using actually allow for &lt;code&gt;it&lt;/code&gt; or &lt;code&gt;a &amp;lt; b&lt;/code&gt; expression, but lambda expression will work anywhere a function is accepted as an argument. However, you canât use lambda as a variable like &lt;code&gt;x_asc := |a, b| a.x &amp;lt; b.x&lt;/code&gt;. Still, neat. Use the LSP to check what is accepted.&lt;/p&gt;
    &lt;p&gt;vlang/lambdas vlang/array vlang/arrays&lt;/p&gt;
    &lt;head rend="h1"&gt;Some issues Iâve encountered&lt;/head&gt;
    &lt;p&gt;As fun as it has been learning the language and building an svg service - it is not without problems. The language is on the immature side of things. It has had some time to cook since I last tried it in 2023 and I like it even more. Letâs discuss some of the problems Iâve personally encountered.&lt;/p&gt;
    &lt;head rend="h2"&gt;
      &lt;code&gt;net.http&lt;/code&gt;
    &lt;/head&gt;
    &lt;p&gt;When I was trying to call the GraphQL endpoint using the &lt;code&gt;net.http&lt;/code&gt; module, I ran into issue where it would instantly timeout. This network issue described what is happening in my case precisely, adding the flag &lt;code&gt;-d use_openssl&lt;/code&gt; completely fixed my problem. This seems to be the case when building for Ubuntu 22.4 - when building the exe for my Windows 11 I did not need this flag.&lt;/p&gt;
    &lt;p&gt;If you are wondering what the &lt;code&gt;-d&lt;/code&gt; flag is about, it is a flag for compile-time code branching. See vlang/compiletime-code for more.&lt;/p&gt;
    &lt;head rend="h2"&gt;
      &lt;code&gt;veb&lt;/code&gt;
    &lt;/head&gt;
    &lt;p&gt;Another weird quirk Iâve had when working with the &lt;code&gt;veb&lt;/code&gt; HTTP server is refusing to build when trying to use gzip. Take a look at this build error message.&lt;/p&gt;
    &lt;code&gt;/root/.local/v/vlib/veb/middleware.v:129:11: error: field `Ctx.return_type` is not public
127 |         handler: fn [T](mut ctx T) bool {
128 |             // TODO: compress file in streaming manner, or precompress them?
129 |             if ctx.return_type == .file {
    |                    ~~~~~~~~~~~
130 |                 return true
131 |             }&lt;/code&gt;
    &lt;p&gt;What do you think the issue could be? Maybe my version of the language is incorrect or my build was faulty? I purged the local V install and got a fresh version straight from master branch. Yet the issue still persists. Another &lt;code&gt;-d&lt;/code&gt; flag perhaps?&lt;/p&gt;
    &lt;p&gt;Luckily for me somebody already posted about this issue in GitHub, unluckily for me, I didnât search the error message first (whoops). Well, I canât really tell you what the issue is since I havenât delved into Vâs codebase itself. But I can tell you the resolution.&lt;/p&gt;
    &lt;p&gt;In my &lt;code&gt;main.v&lt;/code&gt;, since I was messing around with servers and running main with arguments I needed to import both modules. This was the &lt;code&gt;head -n5&lt;/code&gt; of my errorneous file.&lt;/p&gt;
    &lt;code&gt;module main

import os
import veb&lt;/code&gt;
    &lt;p&gt;The suggested fix?&lt;/p&gt;
    &lt;code&gt;module main

import veb
import os&lt;/code&gt;
    &lt;p&gt;Wow! The code now compiles! From a fresherâs perspective I have no clue why the order of import would affect code in different modules. Namespace should be sacred and completely independent of each other. The order of import should not matter at all. Both packages seems to be unrelated so wtf happened?&lt;/p&gt;
    &lt;head rend="h2"&gt;More complex build system&lt;/head&gt;
    &lt;p&gt;I had alluded to this earlier, there is a cost to using V over Go. Vâs main backend compiles to C and this comes with complexity. There are a bunch of performance optimisations you can do when building the binary itself. You can even build non-static binaries if you wish (in fact this is the default). This is a double-edged sword, with Go, you get what you got. With V, I got what I got but I wonder if what I got can be gotten differently.&lt;/p&gt;
    &lt;p&gt;This might also complicate cross-compilation, the Go team has done a lot of work to ensure things werk across different architectures and OSes. Iâve only tried compiling to Windows and Linux using the static flag. Hereâs my build command:&lt;/p&gt;
    &lt;code&gt;v -prod -compress -d use_openssl -cflags '-static -Os -flto' -o main .&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;-d&lt;/code&gt; flag would have to be optional here depending on where I am trying to target as well, Iâd probably have to spend time learning whatâs possible for Macs as well. I know those platforms are definitely supported since their GitHub actions page contains the CI pipelines for these, but I would personally need to check if my specific implemntation, order of imports as well as &lt;code&gt;-d&lt;/code&gt; flags need to be there for those systems or not.&lt;/p&gt;
    &lt;p&gt;This is the one big point I have to give to Go. They really have the just werks philosophy down.&lt;/p&gt;
    &lt;p&gt;vlang/ci vlang/performance-optimisation&lt;/p&gt;
    &lt;head rend="h2"&gt;Concurrency&lt;/head&gt;
    &lt;p&gt;I wondered how the performance of the concurrency is compared to Go. The model is almost identical (which is good) but surely the implementation details are different. Luckily, there is a programming benchmark that exists already that answers my questions.&lt;/p&gt;
    &lt;p&gt;Since I brought up concurrency letâs take a look at the code to see the implementation.&lt;/p&gt;
    &lt;code&gt;module main

import os
import strconv

fn main() {
	mut n := 100
	if os.args.len &amp;gt; 1 {
		n = strconv.atoi(os.args[1]) or { n }
	}

	mut ch := chan int{cap: 1}
	spawn generate(ch)
	for _ in 0 .. n {
		prime := &amp;lt;-ch
		println(prime)
		ch_next := chan int{cap: 1}
		spawn filter(ch, ch_next, prime)
		ch = ch_next
	}
}

fn generate(ch chan int) {
	mut i := 2
	for {
		ch &amp;lt;- i++
	}
}

fn filter(chin chan int, chout chan int, prime int) {
	for {
		i := &amp;lt;-chin
		if i % prime != 0 {
			chout &amp;lt;- i
		}
	}
}&lt;/code&gt;
    &lt;p&gt;benchmark/sieve.go benchmark/sieve.v&lt;/p&gt;
    &lt;p&gt;tldr; itâs finding prime numbers by computing a running channel of previous prime numbers to feed into &lt;code&gt;n&lt;/code&gt; to check if &lt;code&gt;n&lt;/code&gt; is divisible by any previous primes.&lt;/p&gt;
    &lt;p&gt;It seems weird to me that Vâs version is timing out even though both implementation looks almost identical. So I ran the benchmark on my local machine. Hereâs my &lt;code&gt;justfile&lt;/code&gt; to run the benchmark using all I know so far about optimising V.&lt;/p&gt;
    &lt;code&gt;default:
    v -prod -gc boehm_full_opt -cc clang -cflags "-march=broadwell" -stats -showcc -no-rsp -o main_v 1.v
    go build -o main_go ./main.go
    hyperfine './main_v 100' './main_go 100' -N&lt;/code&gt;
    &lt;p&gt;And the result:&lt;/p&gt;
    &lt;code&gt;Benchmark 1: ./main_v 100
  Time (mean Â± Ï):      32.1 ms Â±   2.9 ms    [User: 42.6 ms, System: 166.4 ms]
  Range (min â¦ max):    22.1 ms â¦  40.7 ms    99 runs

Benchmark 2: ./main_go 100
  Time (mean Â± Ï):       1.8 ms Â±   0.2 ms    [User: 2.3 ms, System: 0.3 ms]
  Range (min â¦ max):     1.2 ms â¦   3.1 ms    1471 runs

Summary
  './main_go 100' ran
   18.18 Â± 2.81 times faster than './main_v 100'&lt;/code&gt;
    &lt;p&gt;This is exacerbated further when we run N=1000&lt;/p&gt;
    &lt;code&gt;Benchmark 1: ./main_v 1000
  Time (mean Â± Ï):      1.189 s Â±  0.340 s    [User: 4.410 s, System: 8.144 s]
  Range (min â¦ max):    0.806 s â¦  1.830 s    10 runs

Benchmark 2: ./main_go 1000
  Time (mean Â± Ï):      13.4 ms Â±   2.4 ms    [User: 132.5 ms, System: 12.3 ms]
  Range (min â¦ max):     8.6 ms â¦  21.2 ms    182 runs

Summary
  './main_go 1000' ran
   88.54 Â± 29.90 times faster than './main_v 1000'&lt;/code&gt;
    &lt;p&gt;Taking a look at the N=100 profiling we can see what happened exactly&lt;/p&gt;
    &lt;code&gt;â cat prof.txt | sort --key 2n -n | tail -n 10
           202          0.256ms         -1.819ms           1267ns sync__new_spin_lock
           404          0.064ms         -2.664ms            158ns sync__Semaphore_init
          4387      10644.653ms        540.655ms        2426408ns sync__Semaphore_wait
          8128       5572.567ms        739.231ms         685601ns sync__Channel_try_push_priv
          8172       9062.871ms        941.089ms        1109015ns sync__Channel_try_pop_priv
         15959        406.167ms         87.435ms          25451ns sync__Semaphore_post
         16160          6.993ms        -38.159ms            433ns sync__SpinLock_lock
         16174          3.412ms          0.754ms            211ns sync__SpinLock_unlock
       1766049        380.257ms       -434.470ms            215ns sync__Semaphore_try_wait&lt;/code&gt;
    &lt;p&gt;There is a ton of calls going to &lt;code&gt;Semaphore_try_wait&lt;/code&gt; with the actual &lt;code&gt;Sempahore_wait&lt;/code&gt; execution itself taking over &lt;code&gt;10_000 ms&lt;/code&gt; in total.&lt;/p&gt;
    &lt;p&gt;This suggests to me that while the concurrency is there, it exists and work similarly to the end user. Though in the current state, itâs no where near Goâs maturity and optimisation.&lt;/p&gt;
    &lt;head rend="h1"&gt;&amp;lt;/Thoughts&amp;gt;&lt;/head&gt;
    &lt;p&gt;I like V a lot. The abstraction over the syntax is so nice that made me enjoy writing the syntax as a whole. It makes me wish that Go could do more with what they have, but you and I know that Go would never. V isnât without itâs problems though, the ecosystem is still quite immature, compiler flags need grokking over even if youâre not a performance maximalist. IMO, the issue comes down to maturity, given enough time and contributor I believe the language will bloom beautifully. The syntax conveniences already had me sold. I know AI can write boilerplate but it feels good to not need it at all and write everything myself.&lt;/p&gt;
    &lt;p&gt;V has come a lot further than when I tried it in 2023. Iâll be actively using it from now on since my main job in Go leaves me wishing for more from time to time. If you enjoy Go anyway itâs worth checking out. Life it too short to mainline one language. Oh and check out my SVG service ktunprasert/v-github-stats&lt;/p&gt;
    &lt;head rend="h1"&gt;Links&lt;/head&gt;
    &lt;p&gt;vlang - https://vlang.io&lt;lb/&gt; vlang/maps - https://docs.vlang.io/v-types.html#maps&lt;lb/&gt; vlang/structs - https://docs.vlang.io/structs.html&lt;lb/&gt; go-uber/functional-options - https://github.com/uber-go/guide/blob/master/style.md#functional-options&lt;lb/&gt; vlang/trailing-struct-args - https://docs.vlang.io/structs.html#trailing-struct-literal-arguments&lt;lb/&gt; vlang/compile-time-reflection - https://docs.vlang.io/conditional-compilation.html#compile-time-reflection&lt;lb/&gt; vlang/optional-and-result-type - https://docs.vlang.io/type-declarations.html#optionresult-types-and-error-handling&lt;lb/&gt; vlang/enums - https://docs.vlang.io/type-declarations.html#enums&lt;lb/&gt; vlang/lambdas - https://docs.vlang.io/functions-2.html#lambda-expressions&lt;lb/&gt; vlang/array - https://modules.vlang.io/builtin.html#array&lt;lb/&gt; vlang/arrays - https://modules.vlang.io/arrays.html&lt;lb/&gt; svg service - https://github.com/ktunprasert/v-github-stats&lt;lb/&gt; network issue - https://github.com/vlang/v/issues/23717&lt;lb/&gt; vlang/compiletime-code - https://docs.vlang.io/conditional-compilation.html#compile-time-code&lt;lb/&gt; vlang/net.http - https://modules.vlang.io/net.http.html&lt;lb/&gt; vlang/veb - https://modules.vlang.io/veb.html&lt;lb/&gt; vlang/gzip-issue - https://github.com/vlang/v/issues/20865#issuecomment-1955101657&lt;lb/&gt; vlang/ci - https://github.com/vlang/v/actions&lt;lb/&gt; vlang/performance-optimisation - https://docs.vlang.io/performance-tuning.html&lt;lb/&gt; benchmark/coro-sieve-v-vs-go - https://programming-language-benchmarks.vercel.app/v-vs-go&lt;lb/&gt; benchmark/sieve.go - https://github.com/hanabi1224/Programming-Language-Benchmarks/blob/main/bench/algorithm/coro-prime-sieve/1.go&lt;lb/&gt; benchmark/sieve.v - https://github.com/hanabi1224/Programming-Language-Benchmarks/blob/main/bench/algorithm/coro-prime-sieve/1.v&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45080808</guid></item><item><title>Sniffly – Claude Code Analytics Dashboard</title><link>https://github.com/chiphuyen/sniffly</link><description>&lt;doc fingerprint="8c30b55857f35bd8"&gt;
  &lt;main&gt;
    &lt;p&gt;Analyze Claude Code logs to help you use Claude Code better.&lt;/p&gt;
    &lt;p&gt;Website | Quickstart | Features | Sharable dashboard&lt;/p&gt;
    &lt;p&gt;See where Claude Code makes mistakes so that you avoid these mistakes.&lt;/p&gt;
    &lt;p&gt;Walk through all your instructions and share them with your coworkers if needed.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Requirement: Python 3.10+&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Make sure you have &lt;code&gt;uv&lt;/code&gt; installed! https://github.com/astral-sh/uv&lt;/p&gt;
    &lt;code&gt;# One-time execution (no installation needed)
uvx sniffly@latest init&lt;/code&gt;
    &lt;code&gt;# Install the package
uv tool install sniffly@latest
sniffly init&lt;/code&gt;
    &lt;p&gt;After running &lt;code&gt;sniffly init&lt;/code&gt;, access your dashboard on your browser at http://localhost:8081 (or whichever host/port you choose).&lt;/p&gt;
    &lt;p&gt;If you run Sniffly on a remote server, use port forwarding to open the browser on your local computer.&lt;/p&gt;
    &lt;code&gt;pip install sniffly
sniffly init&lt;/code&gt;
    &lt;code&gt;git clone https://github.com/chiphuyen/sniffly.git
cd sniffly
pip install -e .
sniffly init&lt;/code&gt;
    &lt;code&gt;# Change port (default: 8081)
sniffly config set port 8090

# Disable auto-opening browser
sniffly config set auto_browser false

# Show current configuration
sniffly config show&lt;/code&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Key&lt;/cell&gt;
        &lt;cell role="head"&gt;Default&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;port&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;8081&lt;/cell&gt;
        &lt;cell&gt;Server port&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;host&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;127.0.0.1&lt;/cell&gt;
        &lt;cell&gt;Server host&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;auto_browser&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;true&lt;/cell&gt;
        &lt;cell&gt;Auto-open browser on start&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;cache_max_projects&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;5&lt;/cell&gt;
        &lt;cell&gt;Max projects in memory cache&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;cache_max_mb_per_project&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;500&lt;/cell&gt;
        &lt;cell&gt;Max MB per project&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;
          &lt;code&gt;messages_initial_load&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;500&lt;/cell&gt;
        &lt;cell&gt;Initial messages to load&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;max_date_range_days&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;30&lt;/cell&gt;
        &lt;cell&gt;Max days for date range selection&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;See full CLI Reference for all options and commands.&lt;/p&gt;
    &lt;p&gt;You can create a link to share your project's stats and instructions with your coworkers.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Click the "📤 Share" button in your dashboard&lt;/item&gt;
      &lt;item&gt;Choose privacy options: &lt;list rend="ul"&gt;&lt;item&gt;Private: Only people with the link can view&lt;/item&gt;&lt;item&gt;Public: Listed in the public gallery&lt;/item&gt;&lt;item&gt;Include Commands: Share your actual command text&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Copy and share the generated link&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;sniffly help&lt;/code&gt;
    &lt;p&gt;Port already in use?&lt;/p&gt;
    &lt;code&gt;# Use a different port
sniffly init --port 8090

# Or change default
sniffly config set port 8090&lt;/code&gt;
    &lt;p&gt;Browser doesn't open?&lt;/p&gt;
    &lt;code&gt;# Check setting
sniffly config show

# Enable auto-browser
sniffly config set auto_browser true

# Or manually visit http://localhost:8081&lt;/code&gt;
    &lt;p&gt;Configuration issues?&lt;/p&gt;
    &lt;code&gt;# View all settings and their sources
sniffly config show

# Reset a setting to default
sniffly config unset port

# Remove all custom config
rm ~/.sniffly/config.json&lt;/code&gt;
    &lt;p&gt;For more issues, see GitHub Issues.&lt;/p&gt;
    &lt;p&gt;Sniffly runs entirely on your local machine:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;✅ All data processing happens locally&lt;/item&gt;
      &lt;item&gt;✅ No telemetry&lt;/item&gt;
      &lt;item&gt;✅ Your conversations never leave your computer&lt;/item&gt;
      &lt;item&gt;✅ Shared dashboards are opt-in only&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;MIT License - see LICENSE file.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Homepage: sniffly.dev&lt;/item&gt;
      &lt;item&gt;Documentation: Full CLI Reference&lt;/item&gt;
      &lt;item&gt;Issues: GitHub Issues&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45081711</guid></item><item><title>Channel3 (YC S25) Is Hiring a Founding Engineer, NYC</title><link>https://channel3.notion.site/founding-engineer</link><guid isPermaLink="false">https://news.ycombinator.com/item?id=45082508</guid></item><item><title>Why haven't quantum computers factored 21 yet?</title><link>https://algassert.com/post/2500</link><description>&lt;doc fingerprint="7135b1ea033e1ef8"&gt;
  &lt;main&gt;
    &lt;p&gt;In 2001, quantum computers factored the number 15. It’s now 2025, and quantum computers haven’t yet factored the number 21. It’s sometimes claimed this is proof there’s been no progress in quantum computers. But there’s actually a much more surprising reason 21 hasn’t been factored yet, which jumps out at you when contrasting the operations used to factor 15 and to factor 21.&lt;/p&gt;
    &lt;p&gt;The circuit (the series of quantum logic gates) that was run to factor 15 can be seen in Figure 1b of “Experimental realization of Shor’s quantum factoring algorithm using nuclear magnetic resonance”:&lt;/p&gt;
    &lt;p&gt;The important cost here is the number of entangling gates. This factoring-15 circuit has 6 two-qubit entangling gates (a mix of CNOT and CPHASE gates). It also has 2 Toffoli gates, which each decompose into 6 two-qubit entangling gates. So there’s a total of 21 entangling gates in this circuit.&lt;/p&gt;
    &lt;p&gt;Now, for comparison, here is a circuit for factoring 21. Sorry for rotating it, but I couldn’t get it to fit otherwise. Try counting the Toffolis:&lt;/p&gt;
    &lt;p&gt;(Here’s an OPENQASM2 version of the circuit, so you can test it produces the right distribution if you’re inclined to do so.)&lt;/p&gt;
    &lt;p&gt;In case you lost count: this circuit has 191 cnot gates and 369 Toffoli gates, implying a total of 2405 entangling gates. That’s 115x more entangling gates than the factoring-15 circuit. The factoring-21 circuit is more than one hundred times more expensive than the factoring-15 circuit.&lt;/p&gt;
    &lt;p&gt;When I ask people to guess how many times larger the factoring-21 circuit is, compared to the factoring-15 circuit, there’s a tendency for them to assume it’s 25% larger. Or maybe twice as large. The fact that it’s two orders of magnitude more expensive is shocking. So I’ll try to explain why it happens.&lt;/p&gt;
    &lt;p&gt;(Quick aside: the amount of optimization that has gone into this factoring-21 circuit is probably unrepresentative of what would be possible when factoring big numbers. I think a more plausible amount of optimization would produce a circuit with 500x the cost of the factoring-15 circuit… but a 100x overhead is sufficient to make my point. Regardless, special thanks to Noah Shutty for running expensive computer searches to find the conditional-multiplication-by-4-mod-21 subroutine used by this circuit.)&lt;/p&gt;
    &lt;head rend="h1"&gt;Where does the 100x come from?&lt;/head&gt;
    &lt;p&gt;A key background fact you need to understand is that the dominant cost of a quantum factoring circuit comes from doing a series of conditional modular multiplications under superposition. To factor an $n$-bit number $N$, Shor’s algorithm will conditionally multiply an accumulator by $m_k = g^{2^k} \pmod{N}$ for each $k &amp;lt; 2n$ (where $g$ is a randomly chosen value coprime to $N$). Sometimes people also worry about the frequency basis measurement at the end of the algorithm, which is crucial to the algorithm’s function, but from a cost perspective it’s irrelevant. (It’s negligible due by an optimization called “qubit recycling”, which I also could have used to reduce the qubit count of the factoring-21 circuit, but in this post I’m just counting gates so meh).&lt;/p&gt;
    &lt;p&gt;There are three effects that conspire to make the factoring-15 multiplications substantially cheaper than the factoring-21 multiplications:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;All but two of the factoring-15 multiplications end up multiplying by 1.&lt;/item&gt;
      &lt;item&gt;The first multiplication is always ~free, because its input is known to be 1.&lt;/item&gt;
      &lt;item&gt;The one remaining factoring-15 multiplication can be implemented with only two CSWAPs.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Let’s consider the case where $g=2$. In that case, when factoring 15, the constants to conditionally multiply by would be:&lt;/p&gt;
    &lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print([pow(2, 2**k, 15) for k in range(8)])
[2, 4, 1, 1, 1, 1, 1, 1]
&lt;/code&gt;
    &lt;p&gt;First, notice that the last six constants are 1. Multiplications by 1 can be implemented by doing nothing. So the factoring-15 circuit is only paying for 2 of the expected 8 multiplications.&lt;/p&gt;
    &lt;p&gt;Second, notice that the first conditional multiplication (by 2) will either leave the accumulator storing 1 (when its control is off) or storing 2 (when its control is on). This can be achieved much more cheaply by performing a controlled xor of $1 \oplus 2 = 3$ into the accumulator.&lt;/p&gt;
    &lt;p&gt;Third, notice that the only remaining multiplication is a multiplication by 4. Because 15 is one less than a power of 2, multiplying by 2 modulo 15 can be implemented using a circular shift. A multiplication by 4 is just two multiplications by 2, so it can also be implemented by a circular shift. This is a very rare property for a modular multiplication to have, and here it reduces what should be an expensive operation into a pair of conditional swaps. (If you go back and look at the factoring-15 circuit at the top of the post, the 2 three-qubit gates are being used to implement these two conditional swaps.)&lt;/p&gt;
    &lt;p&gt;You may worry that these savings are specific to the choice of $g=2$ and $N=15$. And they are in fact specific to $N=15$. But they aren’t specific to $g=2$. They occur for all possible choices of $g$ when factoring 15.&lt;/p&gt;
    &lt;p&gt;For contrast, let’s now consider what happens when factoring 21. Using $g=2$, the multiplication constants would be:&lt;/p&gt;
    &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;  print([pow(2, 2**k, 21) for k in range(10)])
[2, 4, 16, 4, 16, 4, 16, 4, 16, 4]
&lt;/code&gt;
    &lt;p&gt;This is going to be a lot more expensive.&lt;/p&gt;
    &lt;p&gt;First, there’s no multiplications by 1, so the circuit has to pay for every multiplication instead of only a quarter. That’s a ~4x relative cost blowup vs factoring 15. Second, although the first-one’s-free trick does still apply, proportionally speaking it’s not as good. It cheapens 10% of the multiplications rather than 50%. That’s an extra ~1.8x cost blowup vs factoring 15. Third, the multiplication by 4 and 16 can’t be implemented with two CSWAPs. The best conditionally-multiply-by-4-mod-21 circuit that I know is the one being used in the diagram above, and it uses 41 Toffolis. These more expensive multiplications add a final bonus ~20x cost blowup vs factoring 15.&lt;/p&gt;
    &lt;p&gt;(Aside: multiplication by 16 mod 21 is the inverse of multiplying by 4 mod 21, and the circuits are reversible, so multiplying by 16 uses the same number of Toffolis as multiplying by 4.)&lt;/p&gt;
    &lt;p&gt;These three factors (multiplying-by-one, first-one’s-free, and multiplying-by-swapping) explain the 100x blowup in cost of factoring 21, compared to factoring 15. And this 100x increase in cost explains why no one has factored 21 with a quantum computer yet.&lt;/p&gt;
    &lt;head rend="h1"&gt;Closing remarks&lt;/head&gt;
    &lt;p&gt;Another contributor to the huge time gap between factoring 15 and factoring 21 is that the 2001 factoring of 15 was done with an NMR quantum computer. These computers were known to have inherent scaling issues, and in fact it’s debated whether NMR computers were even properly “quantum”. If the 2001 NMR experiment doesn’t count, I think the actually-did-the-multiplications runner-up is a 2015 experiment done with an ion trap quantum computer (discussed by Scott Aaronson at the time).&lt;/p&gt;
    &lt;p&gt;Yet another contributor is the overhead of quantum error correction. Performing 100x more gates requires 100x lower error, and the most plausible way of achieving that is error corection. Error correction requires redundancy, and could easily add a 100x overhead on qubit count. Accounting for this, I could argue that factoring 21 will be ten thousand times more expensive than factoring 15, rather than “merely” a hundred times more expensive.&lt;/p&gt;
    &lt;p&gt;There are papers that claim to have factored 21 with a quantum computer. For example, here’s one from 2021. But, as far as I know, all such experiments are guilty of using optimizations that imply the code generating the circuit had access to information equivalent to knowing the factors (as explained in “Pretending to factor large numbers on a quantum computer” by Smolin et al). Basically: they don’t do the multiplications, because the multiplications are hard, but the multiplications are what make it factoring instead of simpler forms of period finding. So I don’t count them.&lt;/p&gt;
    &lt;p&gt;There is unfortunately a trickle of bullshit results that claim to be quantum factoring demonstrations. For example, I have a joke paper in this year’s sigbovik proceedings that cheats in a particularly silly way. More seriously, I enjoyed “Replication of Quantum Factorisation Records with an 8-bit Home Computer, an Abacus, and a Dog” making fun of some recent egregious papers. I also recommend Scott Aaronson’s post “Quantum computing motte-and-baileys”, which complains about papers that benchmark “variational” factoring techniques while ignoring the lack of any reason to expect them to scale.&lt;/p&gt;
    &lt;p&gt;Because of the large cost of quantum factoring numbers (that aren’t 15), factoring isn’t yet a good benchmark for tracking the progress of quantum computers. If you want to stay abreast of progress in quantum computing, you should be paying attention to the arrival quantum error correction (such as surface codes getting more reliable as their size is increased) and to architectures solving core scaling challenges (such as lost neutral atoms being continuously replaced).&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45082587</guid></item><item><title>F-Droid site certificate expired</title><link>https://gitlab.com/fdroid/fdroid-website/-/issues/883</link><description>&lt;doc fingerprint="7857cdff5f9f3c6f"&gt;
  &lt;main&gt;
    &lt;p&gt;Skip to content GitLab Menu Why GitLab Pricing Contact Sales Explore Why GitLab Pricing Contact Sales Explore Sign in Get free trial Site certificates expired "Your connection isn't private" I got error when access f-droid.org on Edge and Chrome To upload designs, you'll need to enable LFS and have an admin enable hashed storage. More information&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45082595</guid></item><item><title>"This telegram must be closely paraphrased before being communicated" Why?</title><link>https://history.stackexchange.com/questions/79371/this-telegram-must-be-closely-paraphrased-before-being-communicated-to-anyone</link><description>&lt;doc fingerprint="2e9509d36c2fa0d0"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;It appears that it was US military communications doctrine to not send the exact same message twice using different encryption ("none" counting as one type of encryption), and the term of art for changing a message to avoid that was indeed "paraphrase".&lt;/p&gt;
      &lt;p&gt;I managed to dig up a US Army document on Cryptology from roughly that era that appears to discuss paraphrasing. The document in question is Department of the Army Technical Manual TM 32-220(pdf), dated 1950, titled "BASIC CRYPTOGRAPHY". It apparently supersedes previous documents TM-484 from March 1945 and TM 11-485 from June 1944. It would probably be more ideal to look at them, since they are closer to the time you are interested in, but I was not able to find them online.&lt;/p&gt;
      &lt;p&gt;Here's what this declassified manual had to say about "paraphrasing", from Chapter 7, in the section Fundamental Rules of Cryptographic Security, section 84, subsection b, rule 3 (titled "Text of messages")&lt;/p&gt;
      &lt;quote&gt;
        &lt;p&gt;(a) Never repeat in the clear the identical text of a message once sent in cryptographic form, or repeat in cryptographic form the text of a message once sent in the clear. Anything which will enable an alert enemy to compare a given piece of plain text with a cryptogram that supposedly contains this plain text is highly dangerous to the safety of the cryptographic system. Where information must be given out for publicity, or where information is handled by many persons, the plain text version should be very carefully paraphrased before distribution, to minimize the data an enemy might obtain from an accurate comparison of the cryptographic text with the equivalent, original plain text. To paraphrase a message means to rewrite it so as to change its original wording as much as possible without changing the meaning of the message. This is done by altering the positions of sentences in the message, by altering the positions of subject, predicate, and modifying phrases or clauses in the sentence, and by altering as much as possible the diction by the use of synonyms and synonymous expressions. In this process, deletion rather than expansion of the wording of the message is preferable, because if an ordinary message is paraphrased simply by expanding it along its original lines, an expert can easily reduce the paraphrased message to its lowest terms, and the resultant wording will be practically the original message. It is very important to eliminate repeated words or proper names, if at all possible, by the use of carefully selected pronouns; by the use of the words "former," "latter," "first-mentioned," "second-mentioned"; or by other means. After carefully paraphrasing, the message can be sent in the other key or code.&lt;/p&gt;
        &lt;p&gt;(b) Never send the literal plain text or a paraphrased version of the plain text of a message which has been or will be transmitted in cryptographed form except as specifically provided in appropriate regulations&lt;/p&gt;
      &lt;/quote&gt;
      &lt;p&gt;(emphasis mine)&lt;/p&gt;
      &lt;p&gt;In fact the allies would have have known intimately about how this was possible, because this is one of the ways they ended up decrypting the stronger German Enigma cipher. Captured machines using simpler ciphers were used to break those simpler ciphers. The fact that the Germans were encrypting the exact same messages in both ciphers meant the allies could know (for those messages) what both the unencrypted and encrypted messages were, which allowed them to decrypt the stronger cyphers as well, or quickly figure out what today's code was.&lt;/p&gt;
      &lt;quote&gt;
        &lt;p&gt;Though Enigma had some cryptographic weaknesses, in practice it was German procedural flaws, operator mistakes, failure to systematically introduce changes in encipherment procedures, and Allied capture of key tables and hardware that, during the war, enabled Allied cryptologists to succeed.&lt;/p&gt;
      &lt;/quote&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45082731</guid></item><item><title>Google: 'Your $1000 phone needs our permission to install apps now' [video]</title><link>https://www.youtube.com/watch?v=QBEKlIV_70E</link><description>&lt;doc fingerprint="7055905545553646"&gt;
  &lt;main&gt;
    &lt;p&gt;About Press Copyright Contact us Creators Advertise Developers Terms Privacy Policy &amp;amp; Safety How YouTube works Test new features NFL Sunday Ticket © 2025 Google LLC&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45082750</guid></item><item><title>Notes on Managing ADHD</title><link>https://borretti.me/article/notes-on-managing-adhd</link><description>&lt;doc fingerprint="265009540f6314f0"&gt;
  &lt;main&gt;
    &lt;quote&gt;
      &lt;p&gt;The pleasure is in foreseeing it, not in bringing it to term.&lt;/p&gt;
      &lt;p&gt;— Jorge Luis Borges, Selected Non-Fictions&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This post is about managing ADHD. It is divided into two sections: “Strategies” describes the high-level control system, “Tactics” is a list of micro-level improvements (really it should be called “stratagems”, since most are essentially about tricking yourself).&lt;/p&gt;
    &lt;head rend="h1"&gt;Contents&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Strategies&lt;/item&gt;
      &lt;item&gt;Tactics &lt;list rend="ol"&gt;&lt;item&gt;Task Selection&lt;/item&gt;&lt;item&gt;Visual Field Management&lt;/item&gt;&lt;item&gt;Project Check-Ins&lt;/item&gt;&lt;item&gt;Centralize Your Inboxes&lt;/item&gt;&lt;item&gt;Inbox Zero&lt;/item&gt;&lt;item&gt;Inbox Bankruptcy&lt;/item&gt;&lt;item&gt;Do It On Your Own Terms&lt;/item&gt;&lt;item&gt;Replace Interrupts with Polling&lt;/item&gt;&lt;item&gt;Accountability Buddy&lt;/item&gt;&lt;item&gt;Plan First, Do Later&lt;/item&gt;&lt;item&gt;Derailment&lt;/item&gt;&lt;item&gt;Using OCD to Defeat ADHD&lt;/item&gt;&lt;item&gt;The Master of Drudgery&lt;/item&gt;&lt;item&gt;Thrashing&lt;/item&gt;&lt;item&gt;Put Travel in the Calendar&lt;/item&gt;&lt;item&gt;Choice of Tools&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Resources&lt;/item&gt;
      &lt;item&gt;Acknowledgements&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Strategies&lt;/head&gt;
    &lt;p&gt;High-level advice, control systems.&lt;/p&gt;
    &lt;head rend="h2"&gt;Chemistry First&lt;/head&gt;
    &lt;p&gt;ADHD has a biological cause and drugs are the first-line treatment for good reasons. There is no virtue in trying to beat it through willpower alone.&lt;/p&gt;
    &lt;p&gt;The first-line treatment for ADHD is stimulants. Everything else in this post works best as a complement to, rather than as an alternative to, stimulant medication. In fact most of the strategies described here, I was only able to execute after starting stimulants. For me, chemistry is the critical node in the tech tree: the todo list, the pomodoro timers, etc., all of that was unlocked by the medication.&lt;/p&gt;
    &lt;p&gt;Some people can’t tolerate a specific stimulant. But there are many stimulant and non-stimulant drugs for ADHD. I would prefer to exhaust all the psychiatric options before white-knuckling it.&lt;/p&gt;
    &lt;p&gt;A lot of people don’t want to take medication for shame-based reasons. There is a lot of pill-shaming in the culture. You must learn to ignore it: we are automata, our minds are molecules in salt water.&lt;/p&gt;
    &lt;head rend="h3"&gt;Example: Melatonin&lt;/head&gt;
    &lt;p&gt;As a motivating example for the “salt water automaton” view: I struggled with sleep hygiene for a long time. It felt like WW1: throwing wave after wave of discipline at it and always failing. I would set an alarm, for, say, 10pm, that said: it is time to go to bed. How many times did I obey it? Never. I was always doing something more important.&lt;/p&gt;
    &lt;p&gt;What fixed it? Melatonin. I have an alarm that goes off at 8pm to remind me to take melatonin. The point of the alarm is not, “now you must log off”, which is a very discipline-demanding task. The point of the alarm is simply: take this pill. It takes but a moment. Importantly, I’m not committing to anything other than taking a pill. Thirty, forty minutes later, I want to sleep. That is the key thing: the melatonin has changed my preferences. And then I don’t need willpower to close the sixteen Wikipedia tabs or whatever, because I want to sleep more than I want to scroll, or watch YouTube.&lt;/p&gt;
    &lt;head rend="h3"&gt;Internal and External Change&lt;/head&gt;
    &lt;p&gt;The broader perspective here is that personal growth is a dialogue between internal changes and external changes.&lt;/p&gt;
    &lt;p&gt;Internal changes might come from medication, meditation, therapy, coaching, or practicing habits for a long enough time. External changes are the scaffolding around the brain: using a todo list, and using it effectively. Using a calendar. Clearing your desk so you don’t get distracted by things. Journaling, so that you can introspect and notice patterns: which behaviours leads to a good workday, and which behaviours lead to a day being wasted.&lt;/p&gt;
    &lt;p&gt;Are internal changes more important? Kind of. It’s more a back and forth, where internal changes unlock external changes which unlock further internal changes.&lt;/p&gt;
    &lt;p&gt;Here’s an example: you (having undiagnosed ADHD) try to set a schedule, or use a todo list, or clean your bed every day, but it doesn’t stick. So you get on medication, and the medication lets you form your first habit: which is using a todo list app consistently, checking it every morning. Then, with the todo list as a core part of your exocortex, you start adding recurring tasks, and forming other simple habits: you have a daily recurring task to make your bed, and so every morning when you check the todo list, you see the task, and make your bed, and in time, with your now-functioning dopamine system, you make a habit to make your bed every day, such that you no longer need to have that in the todo list.&lt;/p&gt;
    &lt;p&gt;So the timeline is:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Internal change: starting medication unlocks…&lt;/item&gt;
      &lt;item&gt;External change: using a todo list, which provides scaffolding (e.g. daily recurring tasks) for forming new habits, which unlocks&lt;/item&gt;
      &lt;item&gt;Internal change: new habits formed (make bed, brush teeth in the morning)&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Taking Ritalin with no plan for what you will do today/tomorrow/this week doesn’t work. Dually, an ambitious todo list will sit idle if your brain won’t let you execute it. So personal growth comes from using both internal and external changes, like a ladder with alternating left-right steps.&lt;/p&gt;
    &lt;head rend="h2"&gt;Memory&lt;/head&gt;
    &lt;p&gt;A todo list is a neuroprosthesis that augments long-term memory for tasks.&lt;/p&gt;
    &lt;p&gt;I use Todoist on my desktop and my phone. The pro plan is worth it. I don’t really think of it as an app, rather, it’s a cognitive prosthesis.&lt;/p&gt;
    &lt;p&gt;The todo list provides three things:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Memory: the list remembers things for me. I’m not at the mercy of my brain randomly pinging me that I forgot to do X or I want to someday do Y. The todo list remembers.&lt;/item&gt;
      &lt;item&gt;Order: the todo list lets you drag and drop tasks around, so you can figure out the ordering in which you’re going to do them.&lt;/item&gt;
      &lt;item&gt;Hierarchy: the todo list lets you break tasks down hierarchically and without limit.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Of these, the most important is memory. The todolist is an action-oriented long term memory prosthesis.&lt;/p&gt;
    &lt;p&gt;This is especially useful for habit formation: my biggest blocker with forming habits was just remembered that I’d committed to doing something. If you think, i will make the bed every day, you might do it today, tomorrow, and by the third day you forget. You’re failing by simply forgetting to show up, which is a sad way to fail. By making something a recurring task on the todo list, it ensures I will see it. In a sense, the todo list turns many habits into one. You don’t need to remember “I will make my bed every day”, “I will floss my teeth every night”, etc., because the todolist remembers all those things for you. You only need to form a single habit: checking the todo list.&lt;/p&gt;
    &lt;p&gt;Analogously, I often fail to finish projects simply because I forget about them. I start reading a book, but I don’t write it down anywhere (say, in Goodreads) that “I’m reading this book” is something I have committed to. I leave the book on a table where it’s out of sight (and therefore out of mind) for all of my waking hours. I glance at it occasionally and think, oh, yeah, I was reading that book, and then I’m distracted by something else. And weeks later, when I’ve already started another book, I notice the first book, with the bookmark on page 20, abandoned.&lt;/p&gt;
    &lt;p&gt;The todolist prevents this failure mode: you create a project to represent reading the book, and that project is now tracked, and when you open the todo list, you can see it in the list of active projects.&lt;/p&gt;
    &lt;head rend="h3"&gt;How I Use Todoist&lt;/head&gt;
    &lt;p&gt;In Todoist, every task is part of a project (which really should just be called a list). My sidebar looks like this:&lt;/p&gt;
    &lt;p&gt;Tasks is the list for ad-hoc tasks. Mostly chores and things that don’t fit in elsewhere. Unload the dishwasher, reply to this email, etc. The only rule for this list is that everything in it must be scheduled.&lt;/p&gt;
    &lt;p&gt;Groceries is self-explanatory.&lt;/p&gt;
    &lt;p&gt;Ideas is the where every half-formed goal, intention, project idea etc. goes. “Go deeper into metta” and “learn how to use the slide rule” and “go penguin watching in Manly” and “write a journalling app” and “learn PLT Redex”. I put these things here so that they don’t live in my brain. And occasionally I go through the list and promote something into an actual, active project.&lt;/p&gt;
    &lt;p&gt;Blog is like the ideas list specifically ideas for blog posts.&lt;/p&gt;
    &lt;p&gt;Reading List is for media I want to consume. This is divided into: fiction books, non-fiction books, technical books, blog posts, papers, games, films.&lt;/p&gt;
    &lt;p&gt;Cycles is for recurring tasks. This one is divided into sections by period: daily, weekly, and above. The daily recurring tasks are things like “take vitamin D”, “meditate”, and the inbox-clearing task.&lt;/p&gt;
    &lt;p&gt;Projects is a container for actual projects: an objective which takes multiple tasks to accomplish. Why lift projects into lists? Why not just use a top-level task to represent the project’s objective, and nested subtasks to represent the execution steps of the project? Because having the project in the sidebar is one mechanism I use to ensure I don’t forget about it. Every time I glance at the todo list, I can see the list of active projects. I can notice if something has not been worked on for a while, and act on it. Otherwise: out of sight, out of mind.&lt;/p&gt;
    &lt;head rend="h2"&gt;Energy&lt;/head&gt;
    &lt;p&gt;The difficulty class of the tasks you can perform declines throughout the day.&lt;/p&gt;
    &lt;p&gt;There are many metaphors for the concept of mental energy. Spoon theory, for example. The usual metaphor is that “mental energy” is like a battery that is drained through the day, in greater and lesser quantities, and is replenished by sleep.&lt;/p&gt;
    &lt;p&gt;To me, energy is less like a battery and more like voltage. Some machines require a threshold voltage to operate. Below that voltage they don’t just operate slower, they don’t operate at all. Analogously, different categories of activity have different threshold voltages. For me, it’s like this:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Things I am averse to, the things I intuitively want to put off because they bring up painful emotions, are high-voltage.&lt;/item&gt;
      &lt;item&gt;Creative, open-ended work is high-voltage to start, but once you get started, keeping it going is medium-voltage.&lt;/item&gt;
      &lt;item&gt;Simple chores like cleaning, throwing clothes in the washing machine, etc. are low-voltage.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;And when I wake up I have the highest possible voltage, and throughout the course of the day the voltage declines. And that’s the key difference from spoon theory: spoons are fungible across time, voltage is not. For each category of activity, there is a span of the day when I can action it.&lt;/p&gt;
    &lt;p&gt;When I wake up, I do my morning routine, get some quick wins, and then I try to tackle the thing I dread the most, as early in the morning as possible, because that’s the time of day when I have the most energy and self-control. I get that done and I move on.&lt;/p&gt;
    &lt;p&gt;(Another reason to do the dreaded tasks first: if you put it off to, say, late morning, well, why not put it off again? And again and again. And then it’s 7pm and you can’t even think about the task, and it’s late, and I don’t have energy, so I couldn’t even do it if I wanted to, so let’s do it tomorrow.)&lt;/p&gt;
    &lt;p&gt;And then, when I have removed that burden, I work on projects. The creative, generative, intellectual things. The things that move some kind of needle, and aren’t just pointless chores.&lt;/p&gt;
    &lt;p&gt;And when I run out of energy to create, I read.&lt;/p&gt;
    &lt;p&gt;And when I run out of energy to read, I clean and go to the gym and do the other things.&lt;/p&gt;
    &lt;p&gt;And when the sun goes down everything starts to unravel: I have zero energy and the lazy dopamine-seeking behaviour comes out. So I take melatonin, and try to be in bed before the instant gratification monkey seizes power.&lt;/p&gt;
    &lt;head rend="h2"&gt;Procrastination&lt;/head&gt;
    &lt;p&gt;Typology of procrastination, approaches.&lt;/p&gt;
    &lt;p&gt;In my ontology there are three types of procrastination:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;ADHD Procrastination: you want to do the task, but can’t because of distraction/hyperactivity.&lt;/item&gt;
      &lt;item&gt;Anxious Procrastination: you know you have to do the task, but you don’t want to, because it triggers difficult emotions.&lt;/item&gt;
      &lt;item&gt;Decision Paralysis Procrastination: you don’t know how to execute the task, because it involves a decision and you have difficulty making the decision.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;ADHD Procrastination&lt;/head&gt;
    &lt;p&gt;This is the easiest kind to address. The solution is pharmacological treatment for ADHD + having a productivity system and some tricks.&lt;/p&gt;
    &lt;head rend="h3"&gt;Anxious Procrastination&lt;/head&gt;
    &lt;p&gt;This one is harder. The good thing is you know, cognitively, what you have to do. The hard part is getting over the aversion.&lt;/p&gt;
    &lt;p&gt;In the short term, the way to fix this is to do it scared. Accept the anxiety. Asking for help also works, sometimes you just need someone in the room with you when you hit send on the email. You can also use techniques like CBT to rationally challenge the source of the anxiety and maybe overcome it.&lt;/p&gt;
    &lt;p&gt;In the long term: write down the things you procrastinate one due to anxiety, and find the common through-line, or the common ancestor. By identifying the emotional root cause, you can work on fixing it.&lt;/p&gt;
    &lt;head rend="h3"&gt;Decision Paralysis Procrastination&lt;/head&gt;
    &lt;p&gt;And this is the hardest, because you don’t know, cognitively, what the right choice is, and also you probably have a lot of anxiety/aversion around it. Many things in life are susceptible to this: you have set of choices, there’s good arguments for/against each one, and you have a lot of uncertainty as to the outcomes. And so you ruminate on it endlessly.&lt;/p&gt;
    &lt;p&gt;I don’t have a good general solution for this.&lt;/p&gt;
    &lt;p&gt;Talking to people helps: friends, therapists, Claude. This works because thinking by yourself has diminishing returns: you will quickly exhaust all the thoughts you will have about the problem, and start going in circles. Often people will bring up options/considerations I would never have thought of. Sometimes, if you’re lucky, that’s all it takes: someone mentions an option you had not considered and you realize, oh, it was all so simple.&lt;/p&gt;
    &lt;p&gt;One thing to consider is that thinking in your head is inherently circular, because you have a limited working memory, and you will inevitably start going in circles. Writing things down helps here. Treat the decision, or the emotions behind it, like an object of study, or an engineering problem. Sit down and write an essay about it. Name the arguments, number the bullet points, refer back to things. Make the thoughts into real, physical, manipulable entities.&lt;/p&gt;
    &lt;head rend="h2"&gt;Introspection&lt;/head&gt;
    &lt;p&gt;Journaling is good for detecting maladaptive patterns and tracking your progress.&lt;/p&gt;
    &lt;p&gt;I keep a hierarchical journal in Obsidian. Hierarchical because I have entries for the days, weeks, months, and years. The directory tree looks like this:&lt;/p&gt;
    &lt;code&gt;Journal/
  Daily/
    YYYY/
      MM/
        YYYY-MM-DD.md
  Weekly/
    YYYY/
      YYYY-WW.md
  Monthly/
    YYYY/
      YYYY-MM.md
  Yearly/
    YYYY.md
&lt;/code&gt;
    &lt;p&gt;In the morning I finish yesterday’s journal entry, and begin today’s. Every Sunday I write the review of the week, the first of each month I write the review of the previous month, the first of each year I review the past year. The time allotted to each review is in inverse proportion to its frequency: so a monthly review might take an hour while a yearly review might take up a whole morning.&lt;/p&gt;
    &lt;p&gt;The daily reviews are pretty freeform. Weekly and above there’s more structure. For example, for the weekly reviews I will write a list of the salient things that happened in the week. Then I list on what went well and what went poorly. And then I reflect on how I will change my behaviour to make the next week go better.&lt;/p&gt;
    &lt;p&gt;Journaling is a valuable habit. I started doing it for vague reasons: I wasn’t sure what I wanted to get out of it, and it took a long time (and long stretches of not doing it) until it became a regular, daily habit. I’ve been doing it consistently now for three years, and I can identify the benefits.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;The main benefit is that to change bad patterns, you have to notice them. And it is very easy to travel in a fix orbit, day in, day out, and not notice it. Laying it out in writing helps to notice the maladaptive coping mechanisms. Reading back over the journal entries helps you notice: when an event of type X happens, I react with Y.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Today’s journal entry is a good default place for writing ad-hoc notes or thoughts. Often I wanted to write something, but didn’t know where I would file it (how do you even file these little scraps of thought?) and from not knowing where to put it, I would not do it. Nowadays I just begin writing in the journal. Later, if it is valuable to file it away, I do so.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Creating a journal entry in the morning is a good opportunity to go over the goals and priorities for the day and explicitly restate them to myself.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The final benefit is retrospection: I can look at the past and see how my life has changed. And this is often a positive experience, because the things that worried me didn’t come to pass, the things I used to struggle with are now easy, or at least easier.&lt;/p&gt;
        &lt;p&gt;There’s a paradox with productivity: when you grind executive function enough, things that you used to struggle with become quotidian. And so what was once the ceiling becomes the new floor. You no longer feel proud that you did X, Y, Z because that’s just the new normal. It’s like the hedonic treadmill. You might feel that you never get to “productive”. Journaling helps to combat this because you can see how far you’ve come.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Time&lt;/head&gt;
    &lt;p&gt;Manage time at the macro level with calendars, at the micro level with timers.&lt;/p&gt;
    &lt;p&gt;To manage time, you need a calendar (macro) and a timer (micro).&lt;/p&gt;
    &lt;head rend="h3"&gt;Macro&lt;/head&gt;
    &lt;p&gt;At the macro level, I use the calendar very lightly. Mostly for social things (to ensure I don’t forget an event, and that I don’t double-book things). I also use it to schedule the gym: if the goal is to lift, say, five times a week, I schedule five time blocks to lift. Lifting is special because it has a lot of temporal constraints:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;I lift exactly n times per week.&lt;/item&gt;
      &lt;item&gt;I lift at most once a day.&lt;/item&gt;
      &lt;item&gt;I lift in the evening, which potentially clashes with social things.&lt;/item&gt;
      &lt;item&gt;There are adjacency constraints, e.g. doing shoulders the day before chest is bad.&lt;/item&gt;
      &lt;item&gt;There is at least one rest day which has to be scheduled strategically (e.g. to have maximal distance between successive deadlift sessions).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;But outside these two categories, my calendar is empty.&lt;/p&gt;
    &lt;p&gt;The calendar might be useful to you as a self-binding device. If you keep dragging some project along because you “haven’t made time” for it: consider making a time block in the calendar, and sticking to it. Creating a calendar event is, literally, making time: it’s like calling &lt;code&gt;malloc_time()&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Some people use the calendar as their entire todo list. I think this kind of works if your todo list is very coarse grained: “buy groceries” and “go to the dentist”. But I have a very fine-grained todo list, and putting my tasks in the calendar would make it overwhelming.&lt;/p&gt;
    &lt;p&gt;Another problem with calendars is they are too time-bound: if I make a calendar block to do something, and I don’t do it, the calendar doesn’t know it. It just sits there, forgotten, in the past. In a todo list, everything gets dragged along until I explicitly complete it. Along the same lines, the calendar is not good for collecting vague ideas and plans for things you want to do in the future, while todo lists are ideal for this.&lt;/p&gt;
    &lt;head rend="h3"&gt;Micro&lt;/head&gt;
    &lt;p&gt;The problem with todo lists is that they’re timeless: there is no sense of urgency. You look at the list and think, I could do the next task now, or in five minutes, or in an hour. There’s always some time left in the day. Or tomorrow. You need a way to manufacture urgency.&lt;/p&gt;
    &lt;p&gt;If you have ADHD you’ve probably heard of the Pomodoro method, tried it, and bounced off it. The way it’s framed is very neurotypical: it’s scaffolding around doing, but ADHD people often have problems with the doing itself. And so the scaffolding is kind of pointless.&lt;/p&gt;
    &lt;p&gt;The method works well in three kinds of contexts:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Overcoming Aversion: when you have a large number of microtasks, each of which takes a few seconds to a few minutes, but the number of them, and the uncertainty factor, makes the sum seem a lot larger. A classic example for me is having to reply to like ten different people. Realistically, each person can be handled in 15s. One or two might require a couple of minutes to compose a longer reply. But often I will avoid those tasks like the plague and drag them across the entire day.&lt;/p&gt;
        &lt;p&gt;The pomodoro method works here because you’re basically trading (up to) 25m of pain for an entire day’s peace and quiet. So you get all the annoying little tasks together, start a timer, and go through them. And usually you’re done in maybe ten minutes. And you feel really good after, because all those annoying little tasks are done.&lt;/p&gt;
        &lt;p&gt;It really is amazing what a little bit of fake urgency can do.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Starting: sometimes the problem is just starting. It is very trite, but it’s true. You have something you want to want to do, but don’t want to do. I want to want to read this book, to learn this topic, to write this blog post, to work on this software project. But I don’t want to do it. The pomodoro method helps you start.&lt;/p&gt;
        &lt;p&gt;You’re not committing to finishing the project. You’re not committing to months or weeks or days or even hours of work. You’re committing to a half hour. And if you work just that half hour: great, promise kept. 30m a day, over the course of a single month, is 15h of work. And often I start a 30m timer and end up working four hours, and maybe that’s a good outcome.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Stopping: dually, sometimes the problem is stopping. If you’re trying to advance multiple projects at the same time, if you hyperfocus on one, it eats into the time you allocated for the others. And more broadly, spending too much time on one project can derail all your plans for the day. Maybe you meant to go to the gym at 6pm but you got so stuck in with this project that it’s 8:30pm and you’re still glued to the screen. So the gym suffers, your sleep schedule suffers, etc.&lt;/p&gt;
        &lt;p&gt;Actually stopping when the pomodoro timer goes off can prevent excessive single-mindedness.&lt;/p&gt;
        &lt;p&gt;Additionally, the five-minute break at the end of the pomodoro block is useful. It’s a time to get up from the computer, unround your shoulders, practice mindfulness, essentially, all those little things that you want to do a few times throughout the day.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Tactics&lt;/head&gt;
    &lt;p&gt;Stratagems, tricks.&lt;/p&gt;
    &lt;head rend="h2"&gt;Task Selection&lt;/head&gt;
    &lt;p&gt;To select the next task, pick either the shortest or the most-procrastinated task.&lt;/p&gt;
    &lt;p&gt;I don’t like the word “prioritize”, because it has two subtly different meanings:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;“Weak prioritization” means to sort a list of tasks by some unspecified criterion, that is, to establish an order where some things are prior to another.&lt;/item&gt;
      &lt;item&gt;“Strong prioritization” is to sort a list specifically by importance.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;“Weak prioritization” is something everyone should do: it takes a moment to go over the todo list and drag the tasks into more or less the order in which you will do them. This keeps the most relevant tasks near the top, which is where your eyes naturally go to.&lt;/p&gt;
    &lt;p&gt;“Strong prioritization” is a terrible job scheduling algorithm. Importance alone is not good enough.&lt;/p&gt;
    &lt;p&gt;Consider the case where you have a very important task A which takes a long time to finish, and a less important task B which takes 5m to finish. For example, writing an essay versus replying to an email. Which should you do first? I would execute B first, because doing so in turn unblocks B’s successor tasks. If you reply to the email and then get to work on task A, the other person has time to read your email and reply to you. And the conversation moves forward while you are otherwise engaged.&lt;/p&gt;
    &lt;p&gt;Of course, the pathological version of this is where you only action the quick wins: all the minute little chores get done instantly, but the big tasks, requiring long periods of concentration, get postponed perpetually.&lt;/p&gt;
    &lt;p&gt;My task-selection algorithm is basically: do the shortest task first, with two exceptions:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Stalled tasks get a priority bump. If I created a task weeks ago, or if I’ve been postponing in for many days in a row, it has to be done now.&lt;/item&gt;
      &lt;item&gt;Content-dependence: if I’m working on a particular project, I’d rather focus on tasks from that project, rather than from the global todo list.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Visual Field Management&lt;/head&gt;
    &lt;p&gt;To remember something, put it in your visual field. Dually: to forget, get it out of sight.&lt;/p&gt;
    &lt;p&gt;Out of sight, out of mind. The corollary: to keep something in mind, put it in your visual field; to keep it out, leave it out.&lt;/p&gt;
    &lt;p&gt;My desk is very spartan: there’s a monitor, a mouse, and a keyboard, and a few trinkets. My desktop is empty. There are no files in it. The dock has only the apps I use frequently. And at a higher level, I try to keep the apartment very clean and orderly. Because everything that’s out of place is a distraction, visual noise. That’s the negative aspect: the things I remove.&lt;/p&gt;
    &lt;p&gt;The positive aspect, the things I keep in my visual field: most of the time, I have two windows open on my computer the todo list occupies the left third of the screen, the right two-thirds are occupied by whatever window I have open at the time, e.g.:&lt;/p&gt;
    &lt;p&gt;And so at a glance, I can see:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;What I’m currently working on.&lt;/item&gt;
      &lt;item&gt;What I will work on next.&lt;/item&gt;
      &lt;item&gt;The list of active projects, so that I don’t forget they exist.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Project Check-Ins&lt;/head&gt;
    &lt;p&gt;Keep in regular contact with long-running projects.&lt;/p&gt;
    &lt;p&gt;A common failure mode I have is, I will fail to finish a project because I forget I even started it. Or, relatedly: I will let a project drag on and on until enough time has passed that my interests have shifted, the sun has set on it, and it is now a slog to finish.&lt;/p&gt;
    &lt;p&gt;One reason I do this is that creative/intellectual work often requires (or feels like it requires) long stretches of uninterrupted time. So I procrastinate working on something until I can find such a chunk of time. Which never comes. Time passes and the project begins to slip the moorings of my attention, as other new and shiny things arrive.&lt;/p&gt;
    &lt;p&gt;And sometimes I will pick the project back up after months or years, and I have lost so much context, it’s impossible to know what I even intended. And then you procrastinate even more, because you don’t want to feel the guilty of picking up a project and realizing it has become strange and unfamiliar to you.&lt;/p&gt;
    &lt;p&gt;One way to combat this is to make regular project checkins. This could be a daily or few-times-a-week recurring task on Todoist that just says “spend 30m on this project”.&lt;/p&gt;
    &lt;p&gt;You don’t even have to work on the thing: just allocate fifteen minutes to hold the project in your mind and nothing else. If it’s creative writing, you might open the Word document and just look at it. If it’s a programming project: read the Jira board and look at the code again. Don’t write anything. Just read the code. You will likely come up with a few tasks to do, so write those down. Think. Plan. Build up the structures in your mind, refresh the caches. If you can do, do, otherwise, plan, and if you can’t even do that, read.&lt;/p&gt;
    &lt;p&gt;When you’re doing this regularly, when you’re in regular contact with the project, when the shape of it is clear in your mind, you will have the tasks on the top of your mind, you will no longer feel that you need a giant empty runway of time to work on it, you will be able to work on it in shorter chunks.&lt;/p&gt;
    &lt;p&gt;To manage long-term creative work, keep in regular contact. That doesn’t mean work on them every day, but maybe look at them every day.&lt;/p&gt;
    &lt;p&gt;The pomodoro method works here. Set a timer for just 25m to keep in touch with the project.&lt;/p&gt;
    &lt;head rend="h2"&gt;Centralize Your Inboxes&lt;/head&gt;
    &lt;p&gt;Bring all tasks, broadly defined, into one todo list.&lt;/p&gt;
    &lt;p&gt;Life is full of inboxes:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;DMs on Twitter, iMessage, WhatsApp, Signal, Discord, etc.&lt;/item&gt;
      &lt;item&gt;Twitter bookmarks&lt;/item&gt;
      &lt;item&gt;Browser bookmarks&lt;/item&gt;
      &lt;item&gt;Your Downloads folder.&lt;/item&gt;
      &lt;item&gt;Messages in my myGov inbox.&lt;/item&gt;
      &lt;item&gt;The physical mailbox in my apartment.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;These are inboxes because they fill up over time and need action to empty. You can also think of them as little domain-specific task lists. “Centralizing your inboxes” means moving all these tasks from their silos into the one, central todo list.&lt;/p&gt;
    &lt;p&gt;For example, I have a daily task called “catch up” to clear the digital inboxes:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Go through all my communication apps (email, Discord, Twitter DMs etc) and triage the unread conversations: if something needs replying to, I either reply immediately or make a task to reply later so I don’t forget.&lt;/item&gt;
      &lt;item&gt;File the contents of my Downloads folder.&lt;/item&gt;
      &lt;item&gt;Go through Twitter/browser bookmarks and turn them into tasks (e.g., if I bookmark an article, the task is to read the article).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;In this way I mostly manage to stay on top of comms.&lt;/p&gt;
    &lt;head rend="h2"&gt;Inbox Zero&lt;/head&gt;
    &lt;p&gt;All inboxes should be at zero.&lt;/p&gt;
    &lt;p&gt;You have probably heard of inbox zero. It sounds like LinkedIn-tier advice. But if you struggle with comms, with replying to people in a timely manner (or at all), inbox zero is a good strategy. There are two reasons, briefly:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Inbox zero has no false negatives: if an inbox is empty, you know you’ve handled everything.&lt;/item&gt;
      &lt;item&gt;Important communications have a way of “camouflaging” themselves among irrelevance.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;And, like everything: before you make it into a habit, it feels incredibly time-consuming and labour-intensive. But once you make it into a habit, it’s almost effortless.&lt;/p&gt;
    &lt;p&gt;So, I will give you an example. I come in to work, and read four emails. Three could’ve been archived outright, one needed a reply from me. And I said, oh, I’ll get to it in a second. And then I got distracted with other tasks. And throughout the day I kept glancing at the email client, and thinking, yeah, I will get to it. Eventually I got used to those four emails: they are the “new normal”, and what’s normal doesn’t require action. I would think: if those emails are there, and I already looked at them, then it’s probably fine. At the end of the day I looked at the inbox again and saw, wait, no, one of those emails was actually important. That’s the failure mode of inbox greater-than-zero: the important stuff hides among the irrelevant stuff, such that a quick glance at the todo list doesn’t show anything obviously wrong. Dually, with inbox zero, if you see a single email in the inbox, you know there’s work to do.&lt;/p&gt;
    &lt;p&gt;Inbox zero removes ambiguity. If there’s anything in the inbox, you know, unambiguously, you have a task to complete. If there is nothing in the inbox, you know, unambiguously, there is nothing to do. Inbox zero frees you from false negatives, where you think you’ve handled your correspondence but there’s some important email, camouflaged among the trivial ones, that has not been replied to.&lt;/p&gt;
    &lt;p&gt;A problem with doing inbox zero is most communication apps (like Discord, Slack, iMessage etc.) don’t have a concept of an inbox, just the read/unread flag on conversations. Since there’s no separation between the inbox and the archive, it takes more discipline to ensure every conversation is replied to.&lt;/p&gt;
    &lt;head rend="h2"&gt;Inbox Bankruptcy&lt;/head&gt;
    &lt;p&gt;If an inbox is overwhelmed, archive it in a recoverable way.&lt;/p&gt;
    &lt;p&gt;By the time I started to become organized I’d already accumulated thousands of bookmarks, unread emails, files in my downloads folder, papers in my physical inbox, etc. It would have been a Herculean effort to file these things away. So I didn’t. All the disorganized files, I wrapped them up in a folder and threw them in my &lt;code&gt;Attic&lt;/code&gt; folder. Emails? Archived. Bookmarks? Exported to HTML, archived the export, and deleted them from the browser.&lt;/p&gt;
    &lt;p&gt;Ideally you should do this once, at the start.&lt;/p&gt;
    &lt;p&gt;And by archiving things rather than deleting them, you leave open the possibility that as some point in the future, you might be able to action some of those things. Triage the old bookmarks, sort your filesystem, etc.&lt;/p&gt;
    &lt;head rend="h2"&gt;Do It On Your Own Terms&lt;/head&gt;
    &lt;p&gt;Bring aversion-causing tasks into an environment that you control.&lt;/p&gt;
    &lt;p&gt;If you’re averse to doing something, for emotional reasons, one way to overcome the aversion is to do it as much as possible on your own terms.&lt;/p&gt;
    &lt;p&gt;An example: you have to fill out some government form. You’re averse to it because you worry about making a mistake. And just the thought of opening the form fills you with dread. So, take the boxes in the form, and make a spreadsheet for them. If fonts/colours/emojis/etc. if that makes it feel more personal, or like something you designed and created. Then fill out the form in the spreadsheet. And then copy the values to the form and submit.&lt;/p&gt;
    &lt;p&gt;This helps because instead of performing the task in this external domain where you feel threatened, you’re performing the task in your own domain, in your own terms.&lt;/p&gt;
    &lt;p&gt;Another example: you have an email you have to reply to, and you’re anxious about it. Just opening the email client gives you a bad feeling. Instead, try composing the email elsewhere, say, in a text editor. The change of environment changes the emotional connotation: you’re not replying to an email, you’re writing a text. You might even think of it as a work of fiction, a pseudoepigraphy.&lt;/p&gt;
    &lt;head rend="h2"&gt;Replace Interrupts with Polling&lt;/head&gt;
    &lt;p&gt;Turn off notifications, check comms as an explicit task.&lt;/p&gt;
    &lt;p&gt;“Interrupts” means notifications, which arrive at unpredictable and often inconvenient times. “Polling” means manually checking the source of the notifications for things to action.&lt;/p&gt;
    &lt;p&gt;The obvious benefit of replacing interrupts with polling is you don’t get interrupted by a notification. The less obvious benefit is that when notifications are smeared throughout the day, it is easy for them to fall through the cracks. Something comes in when you’re busy, and you swipe it away, and forget about it, and realize days later you forgot to respond to an important message. Polling is focused: you’ve chosen a block of time, you’re committed to going through the notifications systematically. Instead of random islands of interruptions throughout the day, you have a few short, focused blocks of going through your notifications. Often I get an email while I’m on my phone and think, well, I can’t reply, typing on mobile is horrible, I’m on a train, etc. Polling usually happens at my desk so I have no excuses: I’m in the right environment and in the right mental state.&lt;/p&gt;
    &lt;p&gt;This is so trite. “Put your phone on Do Not Disturb and silence notifications”. And yet it works. For a long time I resisted this because I aspire to be the kind of person who gets a message and replies within minutes. But I didn’t notice how much notifications were impairing my focus until one day I accidentally put the phone/desktop on DND and had a wonderfully productive, distraction-free day.&lt;/p&gt;
    &lt;head rend="h2"&gt;Accountability Buddy&lt;/head&gt;
    &lt;p&gt;Get someone to sit next to you while you work.&lt;/p&gt;
    &lt;p&gt;If you’re struggling to work on something, work next to another person. Set a timer and tell them what you’re going to accomplish and when the timer ends tell them how you did. Just being around other people can make it easier to overcome aversion. This is why coworking spaces are useful.&lt;/p&gt;
    &lt;p&gt;If you don’t have a person around, you might try Focusmate. It works for some people.&lt;/p&gt;
    &lt;p&gt;Sometimes I’ll start a conversation with Claude, lay out my plans for the day, and update Claude as I do things. If I’m stuck, or if I need help overcoming procrastination, I can ask Claude for help, and it’s easier to do that in an on-going thread because Claude already has the necessary context, so I don’t have to describe what I’m struggling with ab initio.&lt;/p&gt;
    &lt;head rend="h2"&gt;Plan First, Do Later&lt;/head&gt;
    &lt;p&gt;Separate planning from action, so if you get distracted while acting, you can return to the plans.&lt;/p&gt;
    &lt;p&gt;Separating planning from doing can be useful. Firstly because planning/doing require different kinds of mental energy. When you’re too tired to do, you can often still plan. Secondly because by separating them you can look back and see how useful the plan was, how much you stuck to it, and then get better at planning.&lt;/p&gt;
    &lt;p&gt;Thirdly, and most importantly, because for ADHD people doing can be a source of distractions that impair other tasks. From Driven to Distraction:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The first item on the list referred to a cough drop. As I read it, I asked her about it.&lt;/p&gt;
      &lt;p&gt;“Oh,” she answered, “that is about a cough drop someone left on the dashboard of our car. The other day I saw the cough drop and thought, I’ll have to throw that away. When I arrived at my first stop, I forgot to take the cough drop to a trash can. When I got back into the car, I saw it and thought, I’ll throw it away at the gas station. The gas station came and went and I hadn’t thrown the cough drop away. Well, the whole day went like that, the cough drop still sitting on the dashboard. When I got home, I thought, I’ll take it inside with me and throw it out. In the time it took me to open the car door, I forgot about the cough drop. It was there to greet me when I got in the car the next morning. […]&lt;/p&gt;
      &lt;p&gt;It was such a classic ADD story that I’ve come to call it the “cough drop sign” when a person habitually has trouble following through on plans on a minute-to-minute, even second-to-second, basis. This is not due to procrastination per se as much as it is due to the busyness of the moment interrupting or interfering with one’s memory circuits. You can get up from your chair, go into the kitchen to get a glass of water, and then in the kitchen forget the reason for your being there.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Emphasis mine.&lt;/p&gt;
    &lt;p&gt;When I notice a micro-task like this, my instinct is not to do it, but to put it in the todo list. Then I try to do it immediately. And if I get distracted halfway through, it’s still there, in the todo list.&lt;/p&gt;
    &lt;p&gt;A practical example is something I call the apartment survey. When I clean the apartment, I start by walking around, noticing everything that needs fixing, and creating a little task for it. Even something as simple as “move the book from the coffee table to the bookshelf”. But I don’t start anything until the survey is done. And when the survey is done, I execute it. And if I get distracted halfway through cleaning the apartment, I have the tasks in the list to go back to.&lt;/p&gt;
    &lt;head rend="h2"&gt;Derailment&lt;/head&gt;
    &lt;p&gt;Introspect to find the things that ruin your productivity and avoid them.&lt;/p&gt;
    &lt;p&gt;Through introspection you can discover the behaviours that derail your productivity.&lt;/p&gt;
    &lt;p&gt;Lifting in the morning derails the day. Cardio is fine, but if I lift weights in the morning, the rest of the day I’m running on -40 IQ points. The most cognitively demanding thing I can do is wash the dishes. I’m not sure what the physiology is: maybe it’s exhaustion of the glycogen stores, or fatigue byproducts floating around in my brain, or the CNS is busy rewiring the motor cortex. The point is that I try to do the cognitively-demanding things in the morning and lift in the evening.&lt;/p&gt;
    &lt;p&gt;Motion also does this. I suppose it’s the H in ADHD: hyperactivity. I used to be a big pacer: put on headphones, pace my room back and forth daydreaming for hours and hours. Some days I would pace so much my legs were sore. To think, I have to be in motion. But sometimes I’ve thought enough, and it’s time to do.&lt;/p&gt;
    &lt;p&gt;Music, too, derails me. If I start listening to music very soon I start pacing the room and it’s over. Music is almost like reverse methylphenidate: it makes me restless, mentally hyperactive, and inattentive.&lt;/p&gt;
    &lt;p&gt;So, to be productive I have to not move too much, and be in silence, and not have fried my brain with exercise.&lt;/p&gt;
    &lt;head rend="h2"&gt;Using OCD to Defeat ADHD&lt;/head&gt;
    &lt;p&gt;If being organized makes you feel good, spend more on organizing your productivity system.&lt;/p&gt;
    &lt;p&gt;In a sense, having a really complex productivity system is like trying to use OCD to defeat ADHD, to use high neuroticism to defeat low conscientiousness. There’s an element of truth to that, sure (see mastery of drudgery).&lt;/p&gt;
    &lt;p&gt;But here’s the thing: you have to play to your strengths. You have to. If you are very OCD and you like order and systems and planning but you struggle with doing, then, yeah, it might work, for you, to spend more energy on the trappings of productivity (ensuring your todo list is properly formatted, organized, etc.) if that bleeds over into making it easier to do the real, meaningful things.&lt;/p&gt;
    &lt;p&gt;For example: I like emojis in my todo list. The chores have a 🧼 emoji, the comms tasks have an ✉️ emoji. That kind of thing. Makes it easy to see at a glance what kind of things I have to do, to group them by category. But Todoist doesn’t support emoji icons on tasks, unlike Notion, so adding the emojis takes a bit more effort: I have to open Raycast and search for the emoji I want and paste it into the task title. It adds a little friction each time I create a task, but the benefit is I enjoy using the todo list more.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Master of Drudgery&lt;/head&gt;
    &lt;p&gt;Avoid spending too much productive time on worthless chores.&lt;/p&gt;
    &lt;p&gt;A productivity antipattern: indulging too much in “quick wins”.&lt;/p&gt;
    &lt;p&gt;There’s this running joke, or meme, online, about the kind of person who has this huge, colossal productivity system, but they get nothing done. They have five todo list apps and everything is categorized and indexed and sorted, but their material output is zero. They complete a hundred tasks a day and when you interrogate what those tasks are they are “brush my teeth” or “reorganize my bookshelf”. There’s a lot of truth to that.&lt;/p&gt;
    &lt;p&gt;Every task falls into one of two categories: the quick wins, and everything else. Life is not made of quick wins. Creative, generative, open-ended work requires long periods of focused work. A lot of unpleasant, aversion-causing things have to be done. But the quick wins are infinite: there’s always some micro-chore to do around the house, for example.&lt;/p&gt;
    &lt;p&gt;I don’t have advice specifically on avoiding this. But you should notice if you’re doing it and course-correct.&lt;/p&gt;
    &lt;head rend="h2"&gt;Thrashing&lt;/head&gt;
    &lt;p&gt;Don’t let procrastiation on one task derail everything else.&lt;/p&gt;
    &lt;p&gt;A bad failure mode I have is: I have a task T that I have to do, but I can’t, because of some kind of aversion. But when I try to work on other things, the alarms are going off in my head, telling me to work on T because you’ve been putting this off for so long and life is finite and the years are short and all that. The end result is that because one thing is blocked, everything grinds to a halt. It’s a very annoying state to be in.&lt;/p&gt;
    &lt;p&gt;And I don’t have a perfect solution, but I try to manage it but applying a sense of proportionality, “render unto Caesar” etc. You can’t ignore T forever, dually, you probably won’t solve it in the next ten minutes. But you can timebox T: allocate some block of time every day to try to advance it, or at least to work around it, e.g. to ask a friend for help, for example. And the rest of the day you can dedicate to moving other things forward.&lt;/p&gt;
    &lt;head rend="h2"&gt;Put Travel in the Calendar&lt;/head&gt;
    &lt;p&gt;Calculate travel time ahead of time to avoid being late.&lt;/p&gt;
    &lt;p&gt;I am chronically late. So if I have a calendar event like a party at someone’s home, I will go on Google Maps and measure the travel time (from my home or wherever I’m likely to be) to the destination, and make a time block for that. e.g., if it takes 30m to go to the dentist and back, this is what my calendar looks like:&lt;/p&gt;
    &lt;p&gt;This ensures I leave my home on time. If it’s something especially important I often add 15m to the travel block as a buffer.&lt;/p&gt;
    &lt;head rend="h2"&gt;Choice of Tools&lt;/head&gt;
    &lt;p&gt;Use tools that are effective and you like.&lt;/p&gt;
    &lt;p&gt;What productivity app should I use? Reminders? Linear? Todoist? A bullet journal?&lt;/p&gt;
    &lt;p&gt;Use something that feels good and works. That’s all. Personally I use Todoist. A lot of people think todo list apps are commodities, but when you have an app open for 98% of your screentime, the little subtleties really add up. I’ve tried using Reminders, Linear, as my todo lists, and building my own. My productivity always suffers and I always go back to Todoist.&lt;/p&gt;
    &lt;p&gt;One app is better than two: the more disjoint things you have to pay attention to, the worse it is.&lt;/p&gt;
    &lt;p&gt;If you’re a software engineer I strongly advise against building your own, which is a terrible form of procrastination for creative types.&lt;/p&gt;
    &lt;head rend="h1"&gt;Resources&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;How To Do Things describes an ADHD-friendly version of the Pomodoro method. It’s a 50 page PDF with no fluff, so it’s worth buying to support writers who don’t waste the reader’s time.&lt;/item&gt;
      &lt;item&gt;Getting Things Done has a lot of good advice (e.g. dump your entire brain into the todo list) but it’s somewhat neurotypical in that it’s assumed you won’t have any problems actually executing the tasks.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h1"&gt;Acknowledgements&lt;/head&gt;
    &lt;p&gt;Thanks to Cameron Pinnegar for reviewing.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45083134</guid></item><item><title>Replacing a Cache Service with a Database</title><link>https://avi.im/blag/2025/db-cache/</link><description>&lt;doc fingerprint="ff5fd97667b079d8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Replacing a cache service with a database&lt;/head&gt;
    &lt;p&gt;I’ve been thinking about this: will we ever replace caches entirely with databases? In this post I will share some ideas and how we are moving towards it. tl;dr we are still not there, yet.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why do we even use caches?&lt;/head&gt;
    &lt;p&gt;Caches solve one important problem: providing pre-computed data at insanely low latencies, compared to databases. I am talking about typical use cases where we use a cache along with the db (cache aside pattern), where the application always talks with cache and database, tries to keep the cache up to date with the db. There are other patterns where cache itself talks with DBs, but I think this is the more common pattern where application talks to both cache and database.&lt;/p&gt;
    &lt;p&gt;I’d like to keep my systems simple, and try to reduce dependencies, if possible. If databases can provide the same benefits as cache, it can go a long way before we decide to add an external caching service.&lt;/p&gt;
    &lt;p&gt;Instead of using a cache, like Valkey (or Redis), you could just set up a read replica and use it like a cache. Databases already keep some data in-memory (in buffer pool). Caches aren’t expected to be strongly consistent with the DB, and neither are read replicas. As an added benefit, you can use the same SQL queries instead of whatever custom interface the cache provides. Not using a cache would make things operationally so much simpler; and I’d never have to worry about cache invalidation.&lt;/p&gt;
    &lt;p&gt;If you use an embedded database (like SQLite, PGLite) with replication (like Litestream or libSQL), you’d even get zero network latency.&lt;/p&gt;
    &lt;p&gt;However, caches are still very prominent and can’t be replaced with just read replicas. I often think about how we can bridge the gap, but I think the workloads are so different that it’s not going to happen anytime soon. The closest we’ve come, I think, is Noria + MySQL (now ReadySet).&lt;/p&gt;
    &lt;p&gt;So why are caches still preferred? Comparatively, here are a few things caches do better than databases:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Setting up and destroying a cache is cheap; both operationally and cost-wise.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Most workloads only cache a subset of the data, and developers have control over what that subset is. It uses fewer resources. With a DB + buffer pool, that level of control doesn’t exist today.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Caches keep pre-computed data. I could do a complex join and then save the results in a cache. How could I achieve the same with a db?&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;I don’t know of any database that lets me assign priority to specific rows to always keep them in the buffer pool. Caches also provide eviction policies (and TTL), which I can’t do with the DB buffer pool.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Databases are orders of magnitude larger than caches. Using a full read replica that consumes terabytes of storage just to access a few gigabytes of hot data feels wasteful. Some cloud providers won’t even let you use larger SSDs without also upgrading CPU/memory.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Cache services can handle hundreds of thousands of concurrent connections, whereas databases generally don’t scale that way. Database connections are expensive.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Cache → Database&lt;/head&gt;
    &lt;p&gt;What needs to happen to close the gap?&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Since I’m only interested in a subset of the data, setting up a full read replica feels like overkill. It would be great to have a read replica with just partial data.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;I don’t know of any database built to handle hundreds of thousands of read replicas constantly pulling data. Would they even behave sanely if I kept plugging in new replicas as if they were caches? Interestingly, with databases that use disaggregated storage, replicas could pull directly from storage without ever contacting the master.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;IVM (Incremental View Maintenance) is the hot new stuff. They can be used to precompute the results to cache. e.g. Noria saves results of a join query. So we also need some fancy data structures rather than a simple buffer pool. I’d also love to use WASM extensions to aid in pre computation. The trick is making this work without paying the full cost of query planning. And note: pre-computation does not really help if you have multiple data sources.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Most mainstream databases don’t let me fetch just the subset I care about. If IVM were easier, and we could combine it with partial read replicas, maybe then a replica could truly replace a cache*.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If we look at this from another angle, we could use an IVM engine to populate and update an external cache service; but that might be a topic for another day.&lt;/p&gt;
    &lt;p&gt;Thanks to Gowtham for reading a draft of this.&lt;/p&gt;
    &lt;p&gt;1. This blog is a rehash of a tweet I wrote earlier, which itself was a rehash of a reply I made to Phil Eaton’s tweet. FWIW, my fren thinks the tweet was better than this post.&lt;lb/&gt;2. This of course does not fit all the use cases, majority of them yes&lt;lb/&gt;3. Weirdly, there’s no Wikipedia page for ‘buffer pool’. btw, Andy Pavlo has a killer lecture video on them.&lt;lb/&gt;4. Many new companies doing some insane stuff around IVM: ReadySet, Materialize, and Feldera&lt;lb/&gt;5. If you are new to IVM / Materialized views, then Sophie Alpert has an excellent post on the topic Materialized views are obviously useful.&lt;lb/&gt;*at least for my use cases&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45083495</guid></item><item><title>Older developers are down with the vibe coding vibe</title><link>https://www.theregister.com/2025/08/28/older_developers_ai_code/</link><description>&lt;doc fingerprint="b4784951ca140389"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Older developers are down with the vibe coding vibe&lt;/head&gt;
    &lt;head rend="h2"&gt;They use AI more but also check it more&lt;/head&gt;
    &lt;p&gt;For those who thought AI vibe coding was just for the youngsters, newly published research shows that developers with over 10 years of experience are more than twice as likely to do it.&lt;/p&gt;
    &lt;p&gt;According to a July survey of 791 US developers from cloud services platform Fastly, around a third of senior developers with more than a decade of experience are using AI code-generation tools such as Copilot, Claude, and Gemini to produce over half of their finished software, compared to 13 percent for those devs who've only been on the job for up to two years.&lt;/p&gt;
    &lt;p&gt;Austin Spires, senior director of developer engagement at Fastly, explained to The Register that the difference doesn’t necessarily mean older coders are slacking off. It's more a reflection of the demands on a senior developer’s day.&lt;/p&gt;
    &lt;p&gt;"When you really zoom out and think about what a senior engineer does, they don't write code all day," he explained. "So if there's ways that people can test autonomously or move really quickly to get a prototype out that kind of hits, that visceral, fun dopamine hit that made coding so fun in the beginning. That's why we're seeing the pattern from that research."&lt;/p&gt;
    &lt;p&gt;In a way, seeing younger coders relying less on AI tools less was "heartening," he said, showing that those new to the field want to craft code the old-fashioned way. They appear to be looking at AI coding tools as handy, but not a replacement for baking your own software.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Not in my browser! Vivaldi capo doubles down on generative AI ban&lt;/item&gt;
      &lt;item&gt;UK unions want 'worker first' plan for AI as people fear for their jobs&lt;/item&gt;
      &lt;item&gt;Crims laud Claude to plant ransomware and fake IT expertise&lt;/item&gt;
      &lt;item&gt;Nx NPM packages poisoned in AI-assisted supply chain attack&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A slight majority of older developers say AI tools help them ship software faster, although they do have to spend more time checking it for artificially developed bugs. By contrast, fewer than half of junior developers felt that way.&lt;/p&gt;
    &lt;p&gt;Spires speculates that this may be down to experience showing its benefits. Senior developers are more likely to be able to quickly scan code and spot flaws, whereas younger workers have a tougher time of software editing. Only 1.8 percent of respondents said they never use AI code generation tools.&lt;/p&gt;
    &lt;p&gt;Overall, over 70 percent of all developers questioned said that AI tools made their jobs more enjoyable, compared to less than 20 percent who said it made things harder. Over 30 percent of respondents said automatic coding made their work role "significantly more enjoyable."&lt;/p&gt;
    &lt;p&gt;One other standout from the survey was the degree to which coders are considering the environmental impact of software they write. Among younger devs, barely half said they considered the energy costs of running new code, but that rose to 80 percent of older programmers. Nearly one in ten respondents admitted they didn’t know how much energy their software requires.&lt;/p&gt;
    &lt;p&gt;"There's not a lot of incentive for AI coding tools to disclose what the carbon footprint of these tools are," Spires said.&lt;/p&gt;
    &lt;p&gt;"More senior engineers understand the second and third effects of their code in how it relates to users and how it relates to their community. And I think it's just a matter of time before junior developers start to understand those ramifications a little bit further." ®&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45083635</guid></item><item><title>FDA official demands removal of YouTube videos of himself criticizing vaccines</title><link>https://www.theguardian.com/us-news/2025/aug/31/fda-official-youtube-videos</link><description>&lt;doc fingerprint="fd88955d441db641"&gt;
  &lt;main&gt;
    &lt;p&gt;A top official at the Food and Drug Administration (FDA) demanded the removal of YouTube videos of himself that were published by a physician and writer who has been critical of medical misinformation and public health officials in the Trump administration, according to a YouTube notice that was seen by the Guardian.&lt;/p&gt;
    &lt;p&gt;Jonathan Howard, a neurologist and psychiatrist in New York City, received an email from YouTube on Friday night, which stated that Vinay Prasad, who is the FDA’s top vaccine regulator, had demanded the removal of six videos of himself from Howard’s YouTube channel.&lt;/p&gt;
    &lt;p&gt;Howard’s entire channel has now been deleted by YouTube, which cited copyright infringement.&lt;/p&gt;
    &lt;p&gt;The now-defunct channel contained about 350 videos of doctors and commentators, including Prasad, Robert F Kennedy Jr, the secretary of health and human services, and Jay Bhattacharya, the head of the National Institutes of Health, which had been collected by Howard from their social media accounts, interviews and podcasts.&lt;/p&gt;
    &lt;p&gt;Creating the channel, Howard told Guardian in an interview, had been an attempt to “preserve” what these individuals had said during the early years of the pandemic, including comments that Howard said exaggerated the dangers of the Covid vaccine to children and – in some cases – minimized the risk of Covid infection, among other issues.&lt;/p&gt;
    &lt;p&gt;“These videos were nothing more than collections of what other doctors said during the pandemic, including doctors who are extremely influential and who are now the medical establishment,” he said.&lt;/p&gt;
    &lt;p&gt;The Guardian requested a comment from the office of public affairs at the department of health and human services, and attempted to reach Prasad through personal email addresses and by a listed mobile phone number. No one responded to the request for comment.&lt;/p&gt;
    &lt;p&gt;When YouTube notified Howard of the demand request, it included an email address for Prasad, which is identical to the email address that is linked to Prasad’s now inactive podcast, called Plenary Session.&lt;/p&gt;
    &lt;p&gt;Prasad, a former hematologist-oncologist at the University of California San Francisco, is now head of the FDA’s Center for Biologics Evaluation and Research (CBER), which makes him the chief vaccine regulator in the US. He was a vocal critic of Peter Marks, who previously led CBER and was widely respected for his role in Operation Warp Speed, the initiative that developed, manufactured and helped distribute the Covid-19 vaccines. Marks was forced to resign by Kennedy.&lt;/p&gt;
    &lt;p&gt;Prasad has also been critical of the use of Covid boosters in young people and vaccine mandates, and has defended cuts to health agencies and university research.&lt;/p&gt;
    &lt;p&gt;“It’s really important to remember [Prasad’s] past words in order to gauge his current and future credibility, and that was the mission of my YouTube channel, to record what these doctors [Prasad and others] said,” Howard said.&lt;/p&gt;
    &lt;p&gt;Although the videos Howard collected were often only viewed “dozens” of times, Howard included them in his online articles that appeared on the Science Based Medicine blog. Now those video links are dead.&lt;/p&gt;
    &lt;p&gt;He noted that snippets of Prasad’s comments still appeared on anti-vaccine social media accounts, suggesting Prasad was directing his removal demand only at a critic and not anti-vaccine influencers. In the past, Prasad has complained about censorship by social media companies.&lt;/p&gt;
    &lt;p&gt;Howard has been quoted in the New York Times, the Guardian, and other publications and is the author of a forthcoming book Everyone Else Is Lying to You, which he said examines how the medical establishment, which has come into power in Trump’s second term, normalized “quackery” during the Covid pandemic and undermined public health.&lt;/p&gt;
    &lt;p&gt;“I had thought there was a policy that government officials shouldn’t censor opposing perspectives, but I must be mistaken,” said John Moore, a scientist and colleague who is familiar with Howard’s book and videos.&lt;/p&gt;
    &lt;p&gt;Howard told the Guardian he wanted to emphasize that he was not a victim, and that the ordeal of having his YouTube channel deleted was nothing compared with the dire situation facing scientists and researchers whose funding is being cut by public health institutions.&lt;/p&gt;
    &lt;p&gt;Prasad has had a rocky start in his FDA tenure. Jeremy Faust, a doctor at Brigham and Women’s Hospital Department of Emergency Medicine whose Substack newsletter Inside Medicine is widely followed, once described Prasad as having two sides.&lt;/p&gt;
    &lt;p&gt;There was a 2010s Prasad who was a “rigorous and professorial cancer research methodology expert with hundreds of peer-reviewed publications, including well-reasoned analyses that often stood up against some slippery stuff from big pharma”. And there was the “2020s Prasad”, who Faust called “newly famous and admired by the Right … [a] hot-headed firebrand who when asked about how we should move forward from the lessons of Covid-19 pandemic criticized the pro-masking contingent saying, “I don’t believe in forgiveness because, in my opinion, these pieces of shit are still lying.”&lt;/p&gt;
    &lt;p&gt;Prasad briefly resigned this summer after he was the subject of an attack by the rightwing activist Laura Loomer, and then returned to his post at the FDA. He reportedly had a significant role in the FDA’s decision to change rules around the Covid-19 vaccine, limiting its availability this fall to adults over 65 or those with certain medical conditions. Previously, Covid shots were recommended for everyone six months or older.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45083845</guid></item><item><title>Jujutsu for Everyone</title><link>https://jj-for-everyone.github.io/</link><description>&lt;doc fingerprint="97d01e5b68f7a9ce"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;This is a tutorial for the Jujutsu version control system. It requires no previous experience with Git or any other version control system.&lt;/p&gt;
    &lt;p&gt;At the time of writing, most Jujutsu tutorials are targeted at experienced Git users, teaching them how to transfer their existing Git skills over to Jujutsu. This tutorial is my attempt to fill the void of beginner learning material for Jujutsu. If you are already experienced with Git, I recommend Steve Klabnik's tutorial instead of this one.&lt;/p&gt;
    &lt;p&gt;This tutorial requires you to work in the terminal. Don't worry, there's a chapter covering some terminal basics in case you're not 100% comfortable with that yet. The commands I tell you to run will often only work on Unix-like operating systems like Linux and Mac. If you're on Windows (and can't switch to Linux), consider using WSL.&lt;/p&gt;
    &lt;head rend="h2"&gt;How to read this tutorial&lt;/head&gt;
    &lt;p&gt;The tutorial is split into levels, which are the top-level chapters in the sidebar. The idea is that once you complete a level, you should probably put this tutorial away for a while and practice what you've learned. Once you're comfortable with those skills, come back for the next level.&lt;/p&gt;
    &lt;p&gt;There is one exception to this: If you're here because you need to collaborate with other people, you should complete the levels 1 and 2 right away.&lt;/p&gt;
    &lt;p&gt;Here's an overview of the planned levels:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Level&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;The bare minimum to get started. This is only enough for the simplest use cases where you're working alone. For example, students who track and submit their homework with a Git repository can get by with only this.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;2&lt;/cell&gt;
        &lt;cell&gt;The bare minimum for any sort of collaboration. Students who are working on a group project and professional software developers need to know this. Going further is highly recommended, but you can take a break after this.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;3&lt;/cell&gt;
        &lt;cell&gt;Basic problem solving skills like conflict resolution and restoring files from history. Without this knowledge, it's only a matter of time until you run into trouble. Completing this level is comparable to the skill level of the average software developer.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;4&lt;/cell&gt;
        &lt;cell&gt;History rewriting skills. These will allow you to iterate toward a polished version history, which pays dividends long-term. Some projects require you to have these skills in order to meet their quality standards.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;5&lt;/cell&gt;
        &lt;cell&gt;Productivity boosters, advanced workflows, lesser-known CLI functions and a little VCS theory. Completing this level means you have mastered Jujutsu.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;6&lt;/cell&gt;
        &lt;cell&gt;Additional topics that only come up in specific situations: tags, submodules, workspaces etc. Consider skimming the list of topics and come back once you have an actual need for it.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Only a few levels are complete right now, the rest are on the way.&lt;/p&gt;
    &lt;head rend="h2"&gt;Reset your progress&lt;/head&gt;
    &lt;p&gt;Throughout the tutorial, you will build an example repository. Later chapters depend on the state of previous ones. Losing the state of the example repo can therefore block you from making smooth progress. This might happen for several reasons:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;You use the example repo for practice and experimentation.&lt;/item&gt;
      &lt;item&gt;You switch to a different computer or reinstall the OS.&lt;/item&gt;
      &lt;item&gt;You intentionally delete it to clean up your home directory.&lt;/item&gt;
      &lt;item&gt;The tutorial is updated significantly while you're taking a break.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;To solve this problem, there is a script which automates the task of resetting your progress to the start of any chapter. To identify the chapter you want to continue with, the script expects a keyword as an argument. Each chapter includes its precise reset command at the beginning, so you can easily copy-paste it.&lt;/p&gt;
    &lt;p&gt;The script is not complicated, you can verify that it's not doing anything malicious. Basically, it's just the list of commands I tell you to run manually. For convenience, it's included in the expandable text box below. You can also download the script here and then execute it locally once you have inspected it.&lt;/p&gt;
    &lt;head class="admonition-title"&gt;
      &lt;p&gt;Source of reset script&lt;/p&gt;
    &lt;/head&gt;
    &lt;p&gt;Source of reset script&lt;/p&gt;
    &lt;code&gt;#!/usr/bin/env bash
set -euxo pipefail

if [ "${1:-x}" = "x" ] ; then
    echo "Please provide the chapter keyword as the first argument."
    exit 1
fi
chapter="$1"

function success() {
    set +x
    echo "✅✅✅ Reset script completed successfully! ✅✅✅"
    exit 0
}

# Ensure existing user configuration does not affect script behavior.
export JJ_CONFIG=/dev/null

rm -rf ~/jj-tutorial

if ! command -v jj &amp;gt; /dev/null ; then
    echo "ERROR: Jujutsu doesn't seem to be installed."
    echo "       Please install it and rerun the script."
    exit 1
fi

if [ "$chapter" = initialize ] ; then success ; fi

mkdir -p ~/jj-tutorial/repo
cd ~/jj-tutorial/repo
jj git init --colocate

jj config set --repo user.name "Alice"
jj config set --repo user.email "alice@local"
jj describe --reset-author --no-edit

if [ "$chapter" = log ] ; then success ; fi

if [ "$chapter" = make_changes ] ; then success ; fi

echo "# jj-tutorial" &amp;gt; README.md
jj log -r 'none()' # trigger snapshot

if [ "$chapter" = commit ] ; then success ; fi

jj commit --message "Add readme with project title

It's common practice for software projects to include a file called
README.md in the root directory of their source code repository. As the
file extension indicates, the content is usually written in markdown,
where the title of the document is written on the first line with a
prefixed \`#\` symbol.
"

if [ "$chapter" = remote ] ; then success ; fi

git init --bare ~/jj-tutorial/remote
jj git remote add origin ~/jj-tutorial/remote
jj bookmark create main --revision @-
jj git push --bookmark main --allow-new

if [ "$chapter" = clone ] ; then success ; fi

cd ~
rm -rf ~/jj-tutorial/repo
jj git clone --colocate ~/jj-tutorial/remote ~/jj-tutorial/repo
cd ~/jj-tutorial/repo
jj config set --repo user.name "Alice"
jj config set --repo user.email "alice@local"
jj describe --reset-author --no-edit

if [ "$chapter" = github ] ; then success ; fi

if [ "$chapter" = update_bookmark ] ; then success ; fi

printf "\nThis is a toy repository for learning Jujutsu.\n" &amp;gt;&amp;gt; README.md
jj commit -m "Add project description to readme"

jj bookmark move main --to @-

jj git push

if [ "$chapter" = branch ] ; then success ; fi

echo "print('Hello, world!')" &amp;gt; hello.py

jj commit -m "Add Python script for greeting the world

Printing the text \"Hello, world!\" is a classic exercise in introductory
programming courses. It's easy to complete in basically any language and
makes students feel accomplished and curious for more at the same time."

jj git clone --colocate ~/jj-tutorial/remote ~/jj-tutorial/repo-bob
cd ~/jj-tutorial/repo-bob
jj config set --repo user.name Bob
jj config set --repo user.email bob@local
jj describe --reset-author --no-edit

echo "# jj-tutorial

The file hello.py contains a script that greets the world.
It can be executed with the command 'python hello.py'.
Programming is fun!" &amp;gt; README.md
jj commit -m "Document hello.py in README.md

The file hello.py doesn't exist yet, because Alice is working on that.
Once our changes are combined, this documentation will be accurate."

jj bookmark move main --to @-
jj git push

cd ~/jj-tutorial/repo
jj bookmark move main --to @-
jj git fetch

if [ "$chapter" = show ] ; then success ; fi

if [ "$chapter" = merge ] ; then success ; fi

jj new main@origin @-

jj commit -m "Merge code and documentation for hello-world"
jj bookmark move main --to @-
jj git push

if [ "$chapter" = ignore ] ; then success ; fi

cd ~/jj-tutorial/repo-bob

tar czf submission_alice_bob.tar.gz README.md

echo "
## Submission

Run the following command to create the submission tarball:

~~~sh
tar czf submission_alice_bob.tar.gz [FILE...]
~~~" &amp;gt;&amp;gt; README.md

echo "*.tar.gz" &amp;gt; .gitignore

jj file untrack submission_alice_bob.tar.gz

jj commit -m "Add submission instructions"

if [ "$chapter" = rebase ] ; then success ; fi

jj bookmark move main --to @-
jj git fetch
jj rebase --destination main@origin
jj git push

if [ "$chapter" = more_bookmark ] ; then success ; fi

cd ~/jj-tutorial/repo

echo "for (i = 0; i &amp;lt; 10; i = i + 1):
    print('Hello, world!')" &amp;gt; hello.py

jj commit -m "WIP: Add for loop (need to fix syntax)"

jj git push --change @-

if [ "$chapter" = navigate ] ; then success ; fi

jj git fetch
jj new main

if [ "$chapter" = undo ] ; then success ; fi

echo "print('Hallo, Welt!')" &amp;gt;&amp;gt; hello.py
echo "print('Bonjour, le monde!')" &amp;gt;&amp;gt; hello.py

jj commit -m "code improvements"

jj undo

jj commit -m "Print German and French greetings as well"

jj undo
jj undo
jj undo

jj redo
jj redo
jj redo

if [ "$chapter" = track ] ; then success ; fi

cd ~ # move out of the directory we're about to delete
rm -rf ~/jj-tutorial/repo
jj git clone --colocate ~/jj-tutorial/remote ~/jj-tutorial/repo
cd ~/jj-tutorial/repo

# roleplay as Alice
jj config set --repo user.name "Alice"
jj config set --repo user.email "alice@local"
jj describe --reset-author --no-edit

echo "print('Hallo, Welt!')" &amp;gt;&amp;gt; hello.py
echo "print('Bonjour, le monde!')" &amp;gt;&amp;gt; hello.py
jj commit -m "Print German and French greetings as well"

jj bookmark move main -t @-
jj git push

jj bookmark track 'glob:push-*@origin'

if [ "$chapter" = conflict ] ; then success ; fi

jj new 'description("WIP: Add for loop")'

echo "for _ in range(10):
    print('Hello, world!')" &amp;gt; hello.py

jj commit -m "Fix loop syntax"

jj new main @-

echo "for _ in range(10):
    print('Hello, world!')
    print('Hallo, Welt!')
    print('Bonjour, le monde!')" &amp;gt; hello.py

jj commit -m "Merge repetition and translation of greeting"
jj bookmark move main --to @-
jj git push

if [ "$chapter" = abandon ] ; then success ; fi

jj commit -m "Experiment: Migrate to shiny new framework"
jj git push --change @-
jj new main
jj commit -m "Experiment: Improve scalability using microservices"
jj git push --change @-
jj new main
jj commit -m "Experiment: Apply SOLID design patterns"
jj git push --change @-
jj new main

jj abandon 'description("Experiment")'

jj git push --deleted

if [ "$chapter" = restore ] ; then success ; fi

rm README.md
jj show &amp;amp;&amp;gt; /dev/null

jj restore README.md

jj restore --from 'description("Fix loop syntax")' hello.py

jj commit -m "Remove translations"
jj bookmark move main --to @-
jj git push

if [ "$chapter" = complete ] ; then success ; fi

set +x
echo "Error: Didn't recognize the chapter keyword: '$chapter'."
exit 1
&lt;/code&gt;
    &lt;head rend="h2"&gt;Stay up to date&lt;/head&gt;
    &lt;p&gt;Both this tutorial and Jujutsu are still evolving. In order to keep your Jujutsu knowledge updated, subscribe to releases of the tutorial's GitHub repo. You will be notified of important changes:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;A new level becomes available.&lt;/item&gt;
      &lt;item&gt;An existing level is changed significantly.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I especially intend to keep this tutorial updated as new version of Jujutsu come out with features and changes that are relevant to the tutorial's content. I consider this tutorial up-to-date with the latest version of Jujutsu (&lt;code&gt;0.32&lt;/code&gt;) as of August 2025.
If that's more than a couple months in the past, I probably stopped updating this tutorial.&lt;/p&gt;
    &lt;p&gt;You can subscribe to these updates by visiting the GitHub repo and clicking on "Watch", "Custom" and then selecting "Releases".&lt;/p&gt;
    &lt;head rend="h2"&gt;Help make this tutorial better&lt;/head&gt;
    &lt;p&gt;If you find a typo, you can suggest a fix directly by clicking on the "edit" icon in the top-right corner. If you have general suggestions for improvement, please open an issue. I am also very interested in experience reports, for example:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Do you have any frustrations with Jujutsu which the tutorial did not help you overcome?&lt;/item&gt;
      &lt;item&gt;Was there a section that wasn't explained clearly? (If you didn't understand something, it's probably the tutorial's fault, not yours!)&lt;/item&gt;
      &lt;item&gt;Did you complete a level but didn't feel like you had the skills that were promised in the level overview?&lt;/item&gt;
      &lt;item&gt;Is there something missing that's not being taught but should?&lt;/item&gt;
      &lt;item&gt;Do you feel like the content could be structured better?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Thank you for helping me improve this tutorial!&lt;/p&gt;
    &lt;head rend="h2"&gt;What is version control and why should you use it?&lt;/head&gt;
    &lt;p&gt;I will assume you're using version control for software development, but it can be used for other things as well. For example, authoring professionally formatted documents with tools like Typst. The source of this tutorial is stored in version control too!&lt;/p&gt;
    &lt;p&gt;What these scenarios have in common is that a large body of work (mostly in the form of text) is slowly being expanded and improved over time. You don't want to lose any of it and you want to be able to go back to previous states of your work. Often, several people need to work on the project at the same time.&lt;/p&gt;
    &lt;p&gt;A general-purpose backup solution can keep a few copies of your files around. A graphical document editor can allow multiple people to edit the text simultaneously. But sometimes, you need a sharper knife. Jujutsu is the sharpest knife available.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why Jujutsu instead of Git?&lt;/head&gt;
    &lt;p&gt;Git is by far the most commonly used VCS in the software development industry. So why not use that? Using the most popular thing has undeniable benefits. There is lots of learning material, lots of people can help you with problems, lots of other tools integrate with it etc. Why make life harder on yourself by using a lesser-known alternative?&lt;/p&gt;
    &lt;p&gt;Here's my elevator pitch:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Jujutsu is compatible with Git. You're not actually losing anything by using Jujutsu. You can work with it on any existing project that uses Git for version control without issues. Tools that integrate with Git mostly work just as well with Jujutsu.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Jujutsu is easier to learn than Git. (That is, assuming I did a decent job writing this tutorial.) Git is known for its complicated, unintuitive user interface. Jujutsu gives you all the functionality of Git with a lot less complexity. Experienced users of Git usually don't care about this, because they've paid the price of learning Git already. (I was one of these people once.) But you care!&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Jujutsu is more powerful than Git. Despite the fact that it's easier to learn and more intuitive, it actually has loads of awesome capabilities for power users that completely leave Git in the dust. Don't worry, you don't have to use that power right away. But you can be confident that if your VCS-workflow becomes more demanding in the future, Jujutsu will have your back. This is not a watered-down "we have Git at home" for slow learners!&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Learning Jujutsu instead of Git as your first VCS does have some downsides:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;When talking about version control with peers, they will likely use Git-centric vocabulary. Jujutsu shares a lot of Git's concepts, but there are also differences. Translating between the two in conversation can add some mental overhead. (solution: convince your peers to use Jujutsu 😉)&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Jujutsu is relatively new and doesn't cover 100% of the features of Git yet. When you do run into the rare problem where Jujutsu doesn't have an answer, you can always fall back to use Git directly, which works quite seamlessly. Still, having to use two tools instead of one is slightly annoying. I plan to teach such Git features in this tutorial in later levels. The tutorial should be a one-stop-shop for all Jujutsu users.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The command line interface of Jujutsu is not yet stable. That means in future versions of Jujutsu, some commands might work a little differently or be renamed. I personally don't think this should scare you away. Many people including me have used Jujutsu as a daily driver for a long time. Whenever something did change, my reaction was usually: "Great, that was one of the less-than-perfect parts of Jujutsu! Now it's even more intuitive than before!" Consider subscribing to GitHub releases of this tutorial. You will be notified if new versions of Jujutsu change something in a way that's relevant to what you learned in this tutorial.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Despite some downsides, I think the benefits are well worth it.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45083952</guid></item><item><title>No Clicks, No Content: The Unsustainable Future of AI Search</title><link>https://bradt.ca/blog/no-clicks-no-content/</link><description>&lt;doc fingerprint="39229ae8958323c1"&gt;
  &lt;main&gt;
    &lt;p&gt;AI companies are causing a content drought that will eventually starve them.&lt;/p&gt;
    &lt;p&gt;In a recent article, The Economist didn’t mince words: “AI is killing the web.” Published last month, the piece raises urgent questions about how artificial intelligence is reshaping the internet as we know it: ChatGPT, Google, and its competitors are rapidly diverting traffic from publishers. Publishers are fighting to survive through lawsuits, partnerships, paywalls, and micropayments. It’s pretty bleak, but unfortunately I think the situation is far worse than it seems.&lt;/p&gt;
    &lt;p&gt;The article focuses mainly on the publishing industry, news and magazine sites that rely primarily on visits to their sites and selling ads. This is hardly new for the publishing industry. Televisions arrived in living rooms in the 60s disrupting print and radio media, in the late 90s and early 2000s the internet further devastated the print business, and social media was stealing attention well before the advent of AI. But it’s not just the publishing industry. There’s a much larger economy being disrupted by generative AI platforms.&lt;/p&gt;
    &lt;p&gt;For the past 25 years, online businesses have relied on people searching Google for information and clicking through to their sites to get the information. For example, a business that sells dirt bikes might create a comprehensive guide to winterize a cottage. People search for information on winterizing their cottage, click through to the dirt bike company’s guide, and are then exposed to the company’s brand, maybe join their email list, and maybe buy their products or services.&lt;/p&gt;
    &lt;p&gt;Now that ChatGPT and Google are serving the information up to people, there’s little reason to click through to the site. If you’ve used Google search lately, you’ll have noticed an AI blurb responding to your query before you even see a list of links. The result: less clicks on the links.&lt;/p&gt;
    &lt;p&gt;So the question follows, if fewer and fewer people are visiting your company site, what’s your incentive to produce and maintain high quality content?&lt;/p&gt;
    &lt;p&gt;Worse yet, ChatGPT and Google rely on the content produced by businesses to train their AI models. If businesses stop producing content, what happens to the answers provided by ChatGPT and Google?&lt;/p&gt;
    &lt;p&gt;Could AI companies be this short sighted?&lt;/p&gt;
    &lt;p&gt;In short: Yes. This is a gold rush mentality. And like any gold rush, there’s little attention paid to the long term. It’s get rich quick and we’ll deal with the consequences later. It’s a race to become the dominant force in AI with no attention paid to the sustainability of their fuel source: the content.&lt;/p&gt;
    &lt;p&gt;However, Google doesn’t fit this profile. They’ve needed businesses and publishers to produce content all along and they know they still do.&lt;/p&gt;
    &lt;p&gt;We, the public, have greatly benefited from the symbiotic relationship between businesses and Google. You ask Google for something and it responds with links to the best content. Businesses want those visitors to their sites and so they want to have the best content. Although Google’s results pages have gotten worse for the public and businesses in recent years (half a page of ads at this point), the situation has largely been a win-win-win for them, businesses, and the public.&lt;/p&gt;
    &lt;p&gt;Businesses produced and maintained quality content, Google rewarded the businesses with visitors while diverting some to their ads, and the public got the information they were searching for. Unfortunately this symbiotic relationship is breaking down. In their effort to stay relevant and compete with ChatGPT, Google is tearing up the contract they’ve had with publishers and businesses for the past 25 years.&lt;/p&gt;
    &lt;p&gt;Google knows this but they seem to be pretending that they don’t. In fact, it seems that they’re scared and they don’t know what else to do. They have no other option.&lt;/p&gt;
    &lt;p&gt;One solution here seems to be regulation. To many, it feels like an injustice that AI companies can scrape information from sites, combine it, and serve it up to their users. The bottom line is that if the content didn’t exist to train their models, the AI companies wouldn’t be able to produce an answer.&lt;/p&gt;
    &lt;p&gt;Unfortunately, lawsuits so far have been going in favor of AI companies. Copyright law doesn’t seem to be a fit here, so perhaps we need new laws. I doubt they’ll come quickly enough though. Google search is rolling out AI Mode right now: no more AI blurb with links underneath. Just a ChatGPT-like interface when you do a Google search. It seems we’re already well into this trap and there doesn’t seem to be an escape.&lt;/p&gt;
    &lt;p&gt;Then again, there’s definitely an economic bubble here. ChatGPT is not profitable despite billions in revenue. The infrastructure is very expensive to run. Perhaps the bubble will burst, the money will dry up, and it won’t be feasible to employ generative AI for general search. Google and its competitors will use it for other things of course, but not for search. It’s hard to see this happening though. The genie is out of the bottle.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45084016</guid></item><item><title>Cracks in the Earth Are Slicing Through Cities</title><link>https://www.scientificamerican.com/article/giant-gullies-in-the-earth-threaten-cities-in-africa-amid-rapid-urbanization/</link><description>&lt;doc fingerprint="33ac199d2df717cf"&gt;
  &lt;main&gt;
    &lt;p&gt;Gigantic trenches known as gullies are opening up in cities in Africa, swallowing up homes and businesses, sometimes in an instant, a study has found.&lt;/p&gt;
    &lt;p&gt;About 118,600 people, on average, in the Democratic Republic of the Congo (DRC) alone were displaced between 2004 and 2023, according to researchers reporting their findings in Nature.&lt;/p&gt;
    &lt;p&gt;Without urgent action, researchers estimate that hundreds of thousands of people across Africa are likely to be displaced within the next 10 years, including more than one-quarter of the 770,000 or so people in the DRC living in the expected expansion zone of these gullies.&lt;/p&gt;
    &lt;head rend="h2"&gt;On supporting science journalism&lt;/head&gt;
    &lt;p&gt;If you're enjoying this article, consider supporting our award-winning journalism by subscribing. By purchasing a subscription you are helping to ensure the future of impactful stories about the discoveries and ideas shaping our world today.&lt;/p&gt;
    &lt;p&gt;“It’s an underestimated and severely under-researched hazard,” says study co-author Matthias Vanmaercke, a geographer at the Catholic University of Leuven (KU Leuven) in Belgium. It is caused by “a combination of natural and human factors,” he says, but this is “not at all unavoidable.”&lt;/p&gt;
    &lt;head rend="h2"&gt;Expanding gullies&lt;/head&gt;
    &lt;p&gt;Gullies are expanding across cities that are built on sandy soils and lack adequate drainage. When there are heavy rains, water accumulates on roads and rooftops. When the drainage systems are inadequate, the water finds its way into unprotected ground, carving deep holes that can stretch for hundreds of metres. Over time, the gullies swallow houses and other infrastructure, and sometimes even result in deaths.&lt;/p&gt;
    &lt;p&gt;Vanmaercke and his colleagues used satellite images taken between 2021 and 2023 to identify 2,922 urban gullies in 26 of 47 cities, covering a cumulative distance of nearly 740 kilometres. The team cross-checked these images with historical aerial photographs stored at the Royal Museum for Central Africa in Belgium and found that only 46 of the gullies were present in the 1950s. This “gave the first clear indication that this is indeed attributable to the ongoing urbanization,” Vanmaercke says.&lt;/p&gt;
    &lt;p&gt;In 99% of cases, the gullies had expanded by at least 10 square metres between 2004 and 2023. The average gully was 253 metres long and 31 metres across at its widest point, and nearly all of them were linked to the road network. “The water cannot infiltrate, and it concentrates along these roads which basically become big canals that turn into rivers,” says Vanmaercke.&lt;/p&gt;
    &lt;p&gt;The researchers then combined data on population density with the gully maps. This enabled them to estimate that an average of 118,600 people were displaced because of gullies over the period — with displacement rates more than doubling after 2020.&lt;/p&gt;
    &lt;p&gt;Guy Ilombe Mawe, a geomorphologist at the Official University of Bukavu in the DRC and a co-author of the paper says that the widening of gullies can be catastrophic and even fatal, and that families living near gullies often have no safe alternatives.&lt;/p&gt;
    &lt;p&gt;In November 2019, the researchers visited Kinshasa, the DRC’s capital and one of the most affected cities, with 868 urban gullies stretching over a total of 221 kilometres. There they met a mother whose home stood near a gully edge. Two days later, several of her children were killed while sheltering at a relative’s house, when an expanding gully collapsed overnight. At least 40 people in Kinshasa died that night.&lt;/p&gt;
    &lt;head rend="h2"&gt;Investment needed&lt;/head&gt;
    &lt;p&gt;As African cities expand, the threat of expanding gullies is likely to increase. The continent’s population is expected to nearly triple by 2050, and rainfall intensities in tropical Africa could increase by up to 15% in the coming decades.&lt;/p&gt;
    &lt;p&gt;The authors note in their study that preventing gullies from forming is more effective and affordable than is stabilizing them after they form, which can cost upwards of US$1 million per gully. “The trick would be to have interventions that are well thought of and installed in time. But there’s such a huge lack of money and resources that usually when something is done, it’s either inadequate or too late,” says Vanmaercke.&lt;/p&gt;
    &lt;p&gt;Ana Mijic, a hydrologist at Imperial College London, says that governments and private-sector organizations need to step up their investments in interventions such as sufficient drainage systems. But high costs and maintenance of long-term solutions act as barriers.&lt;/p&gt;
    &lt;p&gt;Gina Ziervogel, a geographer at the University of Cape Town in South Africa, says that governments should prioritize sustainable infrastructure. “We need to understand the role of the environment and resources in cities — soil and water particularly — and so engaging experts from those fields is really important.” She adds that involving the affected communities in planning interventions “would go a long way to understanding their insights, both on the experience of living with this and on potential solutions.”&lt;/p&gt;
    &lt;p&gt;“The sooner we can invest, the better, because we know that the later we leave it, the bigger the scale of the challenge,” says Ziervogel.&lt;/p&gt;
    &lt;p&gt;This article is reproduced with permission and was first published on August, 27 2025.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45084050</guid></item></channel></rss>