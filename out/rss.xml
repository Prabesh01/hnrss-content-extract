<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Mon, 08 Sep 2025 10:40:47 +0000</lastBuildDate><item><title>Show HN: Stroboscopic Instrument Tuner</title><link>https://github.com/dsego/strobe-tuner</link><description>&lt;doc fingerprint="40102c690bf1cbe6"&gt;
  &lt;main&gt;
    &lt;p&gt;A stroboscopic instrument tuner written in Odin.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Automatic pitch detection based on NSDF (McLeod Pitch Method).&lt;/item&gt;
      &lt;item&gt;Smooth and responsive strobe display with adaptive auto-gain for consistent visual feedback across signal levels.&lt;/item&gt;
      &lt;item&gt;Manual target note selection.&lt;/item&gt;
      &lt;item&gt;Harmonic mode: shows the partials of the detected note across multiple strobe bands.&lt;/item&gt;
      &lt;item&gt;Vernier mode: shows the same fundamental frequency in each band, but with increasing sensitivity. When the central band is stationary, outer bands may still move.&lt;/item&gt;
      &lt;item&gt;Contrast and strobe sensitivity (speed) sliders.&lt;/item&gt;
      &lt;item&gt;Hertz/Cents display.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;←→ left/right arrow to move selected note up or down chromatically.&lt;/item&gt;
      &lt;item&gt;↑↓ up/down arrow to move selected note up and down by octave.&lt;/item&gt;
      &lt;item&gt;tab switch the strobe display type to a full wheel.&lt;/item&gt;
      &lt;item&gt;space switch note detection modes between auto &amp;amp; manual.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Copyright ©️ 2025 Davorin Šego &lt;lb/&gt; Licensed under the GPL v3 &lt;lb/&gt; https://www.gnu.org/licenses/gpl-3.0.en.html&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;p&gt;PortAudio&lt;/p&gt;&lt;lb/&gt;Portable Real-Time Audio Library&lt;lb/&gt;Copyright (c) 1999-2011 Ross Bencina, Phil Burk&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;portaudio bindings for odin-lang&lt;/p&gt;&lt;lb/&gt;Copyright (c) 2021, Joakim Hentula&lt;lb/&gt;BSD-2-Clause license&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;PFFFT: a pretty fast FFT.&lt;/p&gt;&lt;lb/&gt;Copyright (c) 2013 Julien Pommier (pommier@modartt.com)&lt;lb/&gt;FFTPACK license&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;The Inter typeface family&lt;/p&gt;&lt;lb/&gt;Copyright (c) 2016 The Inter Project Authors&lt;lb/&gt;SIL Open Font License 1.1&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Noto Sans&lt;/p&gt;&lt;lb/&gt;Copyright 2022 The Noto Project Authors (https://github.com/notofonts/latin-greek-cyrillic)&lt;lb/&gt;SIL Open Font License, Version 1.1 .&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Raylib&lt;/p&gt;&lt;lb/&gt;Copyright (c) 2013-2025 Ramon Santamaria (@raysan5)&lt;lb/&gt;Zlib license&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Install the &lt;code&gt;just&lt;/code&gt; command runner (https://github.com/casey/just) to run the various dev commands.&lt;/p&gt;
    &lt;code&gt;# Clone this source code repository
git clone https://github.com/dsego/strobe-tuner/

# Change working directory
cd strobe-tuner

# Install necessary dependencies into the /external sub-directory
just install-deps

# Build deps
just build-pffft
just build-portaudio
just build-pa_ringubffer

# Compile &amp;amp; run the app code
just dev&lt;/code&gt;
    &lt;p&gt;The pitch detection algorithm uses autocorrelation via FFT, following the method described in "A Smarter Way to Find Pitch" (Philip McLeod, Geoff Wyvill). It analyzes the waveform periodically to accurately identify the fundamental frequency, even in the presence of strong harmonics. A built-in clarity measure provides a confidence score for each detected pitch. Clarity and SNR (signal-to-noise ratio) help determine whether the pitch is strong or weak.&lt;/p&gt;
    &lt;p&gt;The strobe effect is driven by a phase comparator algorithm based on two successive single-bin DFTs, both tuned to the target note's reference frequency (e.g., 110 Hz). The idea is to extract the phase evolution of the signal at a specific frequency and map that to a visually intuitive strobe motion.&lt;/p&gt;
    &lt;p&gt;Core steps:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Frequency targeting: Compute a windowed single-bin DFT precisely tuned to the reference frequency.&lt;/item&gt;
      &lt;item&gt;Phase tracking: Track the phase difference between successive DFT results to determine the strobe’s rotational “spin.”&lt;/item&gt;
      &lt;item&gt;Amplitude mapping: The signal amplitude controls brightness or contrast, making the strobe effect visually respond to signal strength.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;When the input pitch matches the reference, the phase remains stable, and the strobe appears stationary. Pitch deviations cause the phase to advance or lag, creating a visually drifting effect proportional to the tuning error.&lt;/p&gt;
    &lt;p&gt;To maintain consistent similar amount of visual drift across the frequency spectrum, the algorithm adjusts hop size and window length based on musical pitch intervals (in cents) rather than absolute frequency.&lt;/p&gt;
    &lt;p&gt;The single-bin DFT also serves as a narrowband filter, providing a clean strobe signal while still allowing nearby frequencies to influence the display. The amount of visual drift per cent can be scaled directly by multiplying the measured phase difference — allowing customizable strobe sensitivity.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Time-aligned windowing with resampling - emulates a classic untriggered oscilloscope synced to the signal’s period. This approach required resampling and IIR bandpass filtering for each strobe band. The visual resolution was tied to the number of samples per cycle, fewer samples per period resulted in blocky motion. The visual sensitivity couldn’t be adjusted. A strong bandpass filter introduced latency, but without it the harmonics would bleed into the strobe pattern.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Time-aligned windowing with sub-sample frame counter - instead of resampling, this approach maintains alignment by advancing a fractional counter and rounding the number of samples per frame up or down. Still requires a bandpass filter and interpolation at display or window boundaries.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Auto-gain (AGC) is applied to the strobe visualization to maintain visibility as the signal fades. The algorithm continuously estimates the background noise (i.e. the noise floor) and uses an SNR threshold to decide when to trigger gain adjustments. This ensures the strobe display maintains high visual contrast, even as the note loses volume.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45143154</guid></item><item><title>Default musl allocator considered harmful to performance</title><link>https://nickb.dev/blog/default-musl-allocator-considered-harmful-to-performance/</link><description>&lt;doc fingerprint="779e595b14e39dd3"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Default musl allocator considered harmful (to performance)&lt;/head&gt;Published on:&lt;head rend="h2"&gt;Table of Contents&lt;/head&gt;&lt;p&gt;TLDR: In a real world benchmark, the default musl allocator caused a 7x slowdown compared to other allocators. I recommend all Rust projects immediately add the following lines to their application’s &lt;code&gt;main.rs&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;// Avoid musl's default allocator due to lackluster performance
// https://nickb.dev/blog/default-musl-allocator-considered-harmful-to-performance
#[cfg(target_env = "musl")]
#[global_allocator]
static GLOBAL: mimalloc::MiMalloc = mimalloc::MiMalloc;
&lt;/code&gt;&lt;p&gt;And &lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/p&gt;&lt;code&gt;[target.'cfg(target_env = "musl")'.dependencies]
mimalloc = "0.1.43"
&lt;/code&gt;&lt;p&gt;The root cause is the contention between multiple threads when allocating memory, so the problem worsens as more threads or allocations are created.&lt;/p&gt;&lt;p&gt;I recommend swapping the allocator even if musl is not a compilation target today or if the program is single threaded. This is something you simply don’t want to forget.&lt;/p&gt;&lt;p&gt;Reader’s choice on what allocator they want to sub in. The code snippets use mimalloc, but jemalloc is also good.&lt;/p&gt;&lt;p&gt;Also reader’s choice if allocation substitution should only be restricted to musl environments (as shown) or if it should be done globally. I don’t mind conditionally compiling dependencies here as it serves as another form of documentation.&lt;/p&gt;&lt;head rend="h2"&gt;Why musl?&lt;/head&gt;&lt;p&gt;If I feel so strongly about avoiding the default musl allocator, why even use musl in the first place?&lt;/p&gt;&lt;p&gt;Well, when an important customer is running a version of Red Hat Linux initially released before I started high school, you can bet that there will be glibc issues if you don’t have a build machine with the same version of Red Hat Linux. Corollary: hats off to Red Hat for supporting their distro releases for such a lengthy period of time.&lt;/p&gt;&lt;p&gt;So this is a love-hate relationship with musl. I love cross compiling and creating static executables where I can &lt;code&gt;scp&lt;/code&gt; anywhere and just have everything work. I will continue to use musl and respect the hard work behind the team.&lt;/p&gt;&lt;p&gt;And while docker image size should never be a deciding factor, it can be tantalizing to leverage a 2MB distroless image with a static build with musl to minimize any possibility of cold starts for scalable workloads (though if the executable is much larger than 2MB than the difference between container images is negligible, so your mileage may vary).&lt;/p&gt;&lt;code&gt;REPOSITORY                              IMAGE ID       SIZE
gcr.io/distroless/cc-debian12           6f09ff5d0af8   23.4MB
gcr.io/distroless/base-nossl-debian12   ae4cc24e698d   14.8MB
gcr.io/distroless/base-debian12         fab58a7ef52e   20.7MB
gcr.io/distroless/static-debian12       5d7d2b425607   1.99MB
&lt;/code&gt;&lt;head rend="h2"&gt;Scene of the crime&lt;/head&gt;&lt;p&gt;I first noticed performance issues when a server was processing data slower than my host machine, which needed to fetch the data over a 1 Gbit/s connection.&lt;/p&gt;&lt;p&gt;Here’s my thought process as I honed in:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;The server has an older CPU and older CPUs are typically slower CPUs. (true, but not 7x slower).&lt;/item&gt;&lt;item&gt;Maybe the server Proxmox VM has a CPU type of kvm64 (which I’ve been guilty of before), as it excludes SIMD instructions&lt;/item&gt;&lt;item&gt;Maybe musl’s CPU feature detection is wonky and not selecting the SIMD-enabled code? (Nope, not true). I wish there was a more ergonomic way to see if SIMD is being executed.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Embarrassingly, it took me an hour until I ran the glibc and musl version side by side on the host machine and on the server and found the glibc was much faster in both. To be fair, 45 minutes of that hour was spent fiddling with a C++ dependency’s build system to test if the CPU feature detection was different on musl vs glibc (I never did figure it out).&lt;/p&gt;&lt;p&gt;I created a reduced benchmark on the host machine and compared the following:&lt;/p&gt;&lt;code&gt;# glibc
/usr/bin/time -v ./target/release/compare

# musl
/usr/bin/time -v ./target/x86_64-unknown-linux-musl/release/compare
&lt;/code&gt;&lt;p&gt;Below is a comparison table of just the important metrics:&lt;/p&gt;&lt;table&gt;&lt;row span="3"&gt;&lt;cell role="head"&gt;glibc&lt;/cell&gt;&lt;cell role="head"&gt;musl&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;User time (seconds)&lt;/cell&gt;&lt;cell&gt;1.31&lt;/cell&gt;&lt;cell&gt;2.72&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;System time (seconds)&lt;/cell&gt;&lt;cell&gt;0.37&lt;/cell&gt;&lt;cell&gt;6.13&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;Percent of CPU this job got&lt;/cell&gt;&lt;cell&gt;943%&lt;/cell&gt;&lt;cell&gt;745%&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;Elapsed time (seconds)&lt;/cell&gt;&lt;cell&gt;0.17&lt;/cell&gt;&lt;cell&gt;1.18&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;Voluntary context switches&lt;/cell&gt;&lt;cell&gt;1196&lt;/cell&gt;&lt;cell&gt;199786&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt;Involuntary context switches&lt;/cell&gt;&lt;cell&gt;191&lt;/cell&gt;&lt;cell&gt;794&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;The musl version took 7x longer! But I didn’t know why. All I knew is that the differences in voluntary context switches stood out: musl had a 167x more of them! At 200k switches per second, we’re in thrashing territory.&lt;/p&gt;&lt;p&gt;My first instinct was to profile the executables with &lt;code&gt;callgrind&lt;/code&gt; and visualize them with &lt;code&gt;kcachegrind&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I was disappointed to see the cycle estimate results were within the margin of error of each other. How can that be when the run times were so different? Perhaps this is a case of observer effect due to how much slower apps run under valgrind. Or maybe this information is just not captured in callgrind. Looks like I have some homework to hone my profiling tools.&lt;/p&gt;&lt;p&gt;Next, I looked at syscalls, a common source of context switching.&lt;/p&gt;&lt;code&gt;strace -c ./target/release/compare
&lt;/code&gt;&lt;p&gt;Both versions had the same number of syscalls. The main difference is the musl version spent 6.7 seconds in a &lt;code&gt;futex&lt;/code&gt; while glibc only 0.5 seconds, a 13x penalty! This means there must be some contention for a shared lock in musl when allocating or de-allocating memory from multiple threads.&lt;/p&gt;&lt;p&gt;And to be honest, this is where I reached the end of my investigative skills, and verified that swapping the allocator fixed the performance issues.&lt;/p&gt;&lt;head rend="h2"&gt;This is not news&lt;/head&gt;&lt;p&gt;Just searching for “musl performance issues” will yield a myriad of results. It must be a rite of passage for programmers to stumble upon this performance pitfall.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Chimera Linux uses musl with mimalloc, noting &lt;p&gt;the stock allocator is the primary reason for nearly all performance issues people generally have with musl&lt;/p&gt;&lt;/item&gt;&lt;item&gt;The folks at tweag.io documented musl’s malloc contention results in a 20x slowdown&lt;/item&gt;&lt;item&gt;Projects like Ripgrep and Apache DataFusion needed to swap out the allocator (or abandon musl).&lt;/item&gt;&lt;item&gt;Chainguard reported a 2-4x slowdown with musl&lt;/item&gt;&lt;item&gt;Binaryen’s wasp-opt saw a musl allocator slowdown of 10x (and this blog was cited as a reference)&lt;/item&gt;&lt;item&gt;Lots of reddit threads and github issues&lt;/item&gt;&lt;/list&gt;&lt;p&gt;There is a wide range of reported slowdowns, from 2x to 20x. Such a wide range is due to how many threads are contending for the memory allocator in the application. For applications that don’t allocate much or have fewer parallel threads, the slowdown is not as drastic.&lt;/p&gt;&lt;p&gt;The 7x slowdown I observed was on a 6 core machine. Since the slowdown is correlated with the amount of contention, I decided to do an experiment.&lt;/p&gt;&lt;p&gt;I ran down to the local VPS provider, nabbed a 48 core machine, and crushed its dreams of running anything meaningful with the following benchmark.&lt;/p&gt;&lt;code&gt;fn main() {
    let num_threads = std::thread::available_parallelism().map_or(8, |x| x.get());

    let mut handles = vec![];
    for _ in 0..num_threads {
        let handle = std::thread::spawn(move || {
            let mut counter = 0;
            for _ in 0..100000 {
                let data = vec![1u8; counter];
                counter += usize::from(data.get(100).copied().unwrap_or(1));
            }
            println!("counter: {}", counter);
        });
        handles.push(handle);
    }

    for handle in handles {
        handle.join().unwrap();
    }
}
&lt;/code&gt;&lt;p&gt;Using the not-so-scientific measurements of &lt;code&gt;time&lt;/code&gt;, the default allocator yielded:&lt;/p&gt;&lt;code&gt;real    0m0.169s
user    0m7.680s
sys     0m0.025s
&lt;/code&gt;&lt;p&gt;While the musl build yielded:&lt;/p&gt;&lt;code&gt;real    1m56.890s
user    1m0.522s
sys     7m3.542s
&lt;/code&gt;&lt;p&gt;That’s nearly a 700x slowdown. Going from a blink of an eye to having time to get up and stretch, and we’re just getting started. 48 cores is now only a mid-tier instance at AWS, as one can rent instances with 192 cores.&lt;/p&gt;&lt;p&gt;I also ran the benchmark on an 8 core machine from same VPS provider and came away with the following learnings:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Running the benchmark across 6x more cores resulted in a 4x slowdown.&lt;/item&gt;&lt;item&gt;The stock GNU allocator took the same amount of time regardless of 8 cores or 48 cores. Nicely done!&lt;/item&gt;&lt;/list&gt;&lt;p&gt;I find a 700x difference in synthetic workloads and a 7x difference in application performance stemming from the memory allocator to be mind boggling.&lt;/p&gt;&lt;head rend="h2"&gt;A skill issue?&lt;/head&gt;&lt;p&gt;Andrew Kelley, Zig’s creator, brings up a great discussion point that the underperformance might not be such a big issue to experienced programmers:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;it under performs a lot&lt;/p&gt;&lt;p&gt;It’s true. The funny thing is when you’re a beginner Zig programmer you need a good GPA [General Purpose Allocator] for performance reasons but you lack the skills to write an allocator implementation.&lt;/p&gt;&lt;p&gt;However, as you become an advanced programmer you start to learn about better memory management techniques that makes GPA performance irrelevant. Ironically, at this point you become capable of implementing a better GPA, but it’s low-key kind of useful that GPA’s poor performance helps highlight where you’re not batch allocating objects.&lt;/p&gt;&lt;p&gt;That’s the Zig Malloc Paradox.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;Andrew is, of course, completely right. If I had used musl’s allocator from the start, the poor performance would have caused me to structure the code base to minimize allocations by flattening data structures and facilitating object reuse.&lt;/p&gt;&lt;p&gt;Or would I have abandoned the attempt and switched to another language or project? Unfortunately, I can’t rewind time and at this point, I’m reluctant to introduce breaking changes, as the code is already fast enough under most circumstances, and relied upon by others.&lt;/p&gt;&lt;p&gt;While there is probably a correlation between the number of allocations and experience, I would not use this as a measure of success.&lt;/p&gt;&lt;p&gt;And in an ironic twist, I’m working on a Rust library in a domain that differentiates itself by minimizing allocations through ergonomic sacrifices. Is it worth it? To me it is, as the performance benefits are tangible, but to others where the library may slot in as a tertiary afterthought, ergonomics would be more highly valued.&lt;/p&gt;&lt;head rend="h2"&gt;Musl’s new mallocng&lt;/head&gt;&lt;p&gt;I got excited when I read a reddit post from May 2020 about how an upcoming redesign of musl’s allocator should bring improvements.&lt;/p&gt;&lt;p&gt;Later that same year, musl released it in v1.2.1, but didn’t illustrate any performance implications. Perhaps some of the release notes are insinuating a performance improvement?&lt;/p&gt;&lt;p&gt;In May 2023, Rust bumped the musl target to 1.2.x, and &lt;code&gt;cross&lt;/code&gt; followed suit in October.&lt;/p&gt;&lt;p&gt;There hasn’t (yet) been a cross release that includes this change (much to the chagrin of some), but no worries, I can &lt;code&gt;cargo install&lt;/code&gt; from git.&lt;/p&gt;&lt;p&gt;The excitement had built to a crescendo.&lt;/p&gt;&lt;p&gt;But the benchmark results remained unchanged.&lt;/p&gt;&lt;p&gt;I’m not the only one to have noticed this.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;the new ng allocator in MUSL doesn’t make a dime of a difference&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;In the end, no matter what musl allocator you are using, I recommend switching to a different one as shown at the start.&lt;/p&gt;&lt;p&gt;I love musl, but now I know it needs a little extra something to go with it, and that would be another allocator.&lt;/p&gt;&lt;head rend="h2"&gt;Comments&lt;/head&gt;&lt;p&gt;If you'd like to leave a comment, please email [email protected]&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45143347</guid></item><item><title>GPT-5 Thinking in ChatGPT (a.k.a. Research Goblin) is good at search</title><link>https://simonwillison.net/2025/Sep/6/research-goblin/</link><description>&lt;doc fingerprint="5fcc59db81a757ce"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;GPT-5 Thinking in ChatGPT (aka Research Goblin) is shockingly good at search&lt;/head&gt;
    &lt;p&gt;6th September 2025&lt;/p&gt;
    &lt;p&gt;“Don’t use chatbots as search engines” was great advice for several years... until it wasn’t.&lt;/p&gt;
    &lt;p&gt;I wrote about how good OpenAI’s o3 was at using its Bing-backed search tool back in April. GPT-5 feels even better.&lt;/p&gt;
    &lt;p&gt;I’ve started calling it my Research Goblin. I can assign a task to it, no matter how trivial or complex, and it will do an often unreasonable amount of work to search the internet and figure out an answer.&lt;/p&gt;
    &lt;p&gt;This is excellent for satisfying curiosity, and occasionally useful for more important endeavors as well.&lt;/p&gt;
    &lt;p&gt;I always run my searches by selecting the “GPT-5 Thinking” model from the model picker—in my experience this leads to far more comprehensive (albeit much slower) results.&lt;/p&gt;
    &lt;p&gt;Here are some examples from just the last couple of days. Every single one of them was run on my phone, usually while I was doing something else. Most of them were dictated using the iPhone voice keyboard, which I find faster than typing. Plus, it’s fun to talk to my Research Goblin.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Bouncy travelators&lt;/item&gt;
      &lt;item&gt;Identify this building&lt;/item&gt;
      &lt;item&gt;Starbucks UK cake pops&lt;/item&gt;
      &lt;item&gt;Britannica to seed Wikipedia&lt;/item&gt;
      &lt;item&gt;Official name for the University of Cambridge&lt;/item&gt;
      &lt;item&gt;History of the caverns in Exeter quay&lt;/item&gt;
      &lt;item&gt;Aldi vs Lidl&lt;/item&gt;
      &lt;item&gt;AI labs scanning books for training data&lt;/item&gt;
      &lt;item&gt;GPT-5 for search feels competent&lt;/item&gt;
      &lt;item&gt;Tips for using search in ChatGPT&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;Bouncy travelators&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;They used to be rubber bouncy travelators at Heathrow and they were really fun, have all been replaced by metal ones now and if so, when did that happen?&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;I was traveling through Heathrow airport pondering what had happened to the fun bouncy rubber travelators.&lt;/p&gt;
    &lt;p&gt;Here’s what I got. Research Goblin narrowed it down to some time between 2014-2018 but, more importantly, found me this delightful 2024 article by Peter Hartlaub in the San Francisco Chronicle with a history of the SFO bouncy walkways, now also sadly retired.&lt;/p&gt;
    &lt;head rend="h4"&gt;Identify this building&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;Identify this building in reading&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This is a photo I snapped out of the window on the train. It thought for 1m4s and correctly identified it as The Blade.&lt;/p&gt;
    &lt;head rend="h2"&gt;Starbucks UK cake pops&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;Starbucks in the UK don’t sell cake pops! Do a deep investigative dive&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The Starbucks in Exeter railway station didn’t have cake pops, and the lady I asked didn’t know what they were.&lt;/p&gt;
    &lt;p&gt;Here’s the result. It turns out Starbucks did launch cake pops in the UK in September 2023 but they aren’t available at all outlets, in particular the licensed travel locations such as the one at Exeter St Davids station.&lt;/p&gt;
    &lt;p&gt;I particularly enjoyed how it established definitive proof by consulting the nutrition and allergen guide PDF on starbucks.co.uk, which does indeed list both the Birthday Cake Pop (my favourite) and the Cookies and Cream one (apparently discontinued in the USA, at least according to r/starbucks).&lt;/p&gt;
    &lt;head rend="h4"&gt;Britannica to seed Wikipedia&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;Someone on hacker News said:&lt;/p&gt;
      &lt;p&gt;&amp;gt; I was looking at another thread about how Wikipedia was the best thing on the internet. But they only got the head start by taking copy of Encyclopedia Britannica and everything else&lt;/p&gt;
      &lt;p&gt;Find what they meant by that&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The result. It turns out Wikipedia did seed itself with content from the out-of-copyright 1911 Encyclopædia Britannica... but that project took place in 2006, five years after Wikipedia first launched in 2001.&lt;/p&gt;
    &lt;p&gt;I asked:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;What is the single best article I can link somebody to that explains the 1911 Britannica thing&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;And it pointed me to Wikipedia:WikiProject Encyclopaedia Britannica which includes a detailed explanation and a link to the 13,000 pages still tagged with the template from that project. I posted what I found in a comment.&lt;/p&gt;
    &lt;p&gt;Notably (for me anyway) I didn’t feel the need to disclose my use of ChatGPT in finding that information—at this point that feels a little like disclosing that I ran a Google search.&lt;/p&gt;
    &lt;head rend="h4"&gt;Official name for the University of Cambridge&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;What is the official legal name of the university of Cambridge?&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Here’s the context for that one. It thought for 19 seconds—the thinking trace reveals it knew the answer but wanted to confirm it. It answered:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“The Chancellor, Masters, and Scholars of the University of Cambridge.” University of Cambridge, Cambridge University Press &amp;amp; Assessment&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;That first link gave me the citation I needed in order to be sure this was right.&lt;/p&gt;
    &lt;p&gt;Since this is my shortest example, here’s a screenshot of the expanded “Thought for 19s” panel. I always expand the thoughts—seeing how it pulled together its answer is crucial for evaluating if the answer is likely to be useful or not.&lt;/p&gt;
    &lt;head rend="h4"&gt;History of the caverns in Exeter quay&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;Research On the waterfront restaurant in Exeter, is it dug into the cliffs somehow? History of the building, who built it, why and how&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;We were out to dinner here and noticed that the interior of the restaurant appeared to be a space dug into the cliff, which piqued my interest.&lt;/p&gt;
    &lt;p&gt;This was the ChatGPT session that inspired the Research Goblin nickname. It just kept on digging!&lt;/p&gt;
    &lt;p&gt;The first reply took 2m40s and confirmed that yes, these quay buildings were carved into the red sandstone cliff in the 1820s-1830s.&lt;/p&gt;
    &lt;p&gt;ChatGPT with GPT-5 really likes to suggest additional steps it can take. In this case:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;If you’d like, I can dig up the exact Historic England entry that covers the “Southern Warehouse” address and overlay it on a map of the vaults.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;I often say “yes” purely out of curiosity to see what it will do next, and the offer to “overlay it on a map” was irresistible, like how would it even do that?&lt;/p&gt;
    &lt;p&gt;It did a ton of extra searches, found latitude and longitude coordinates for the restaurant (from Wikimedia Commons) and the warehouse buildings (from National Heritage List for England via Wikipedia), showed me that data in a table and then used Python to render this image:&lt;/p&gt;
    &lt;p&gt;Yeah, so that one is a bit of a miss!&lt;/p&gt;
    &lt;p&gt;But... the underlying research chain, as always, provided fascinating. I noticed that at one point it had searched for “Exeter Quay vaults map PDF”, which inspired my next question:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Did you find any PDF diagrams, showing the tunnels into the cliff&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;2m20s later it had found a planning document and a letting brochure, both PDFs, but noted that neither of them had the diagram I wanted. Evidently it actually “reads” the PDFs it finds as part of its activities, since it appears to have knowledge of the images contained within them as well as the text.&lt;/p&gt;
    &lt;p&gt;It concluded with this intriguing note:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;There’s strong evidence that a detailed plan/section does exist in the Exeter Archaeology report often cited by planners—“Archaeological, Historical and Conservation Study of the Exeter Canal Basin” (Exeter Archaeology Report 00.18, 2000)—but it isn’t online; it’s just cited in planning documents. You’d likely need to request it via the Devon Heritage Centre/Historic Environment Record.&lt;/p&gt;
      &lt;p&gt;If you want, I can keep hunting specialist archives for a digitized copy or a different report that includes the vault layouts.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Obviously I said “Yes do that” and 2m24s later it chucked out a whole host of extra links, an apology that it still hadn’t found a detailed plan diagram and, under the section heading “What I recommend next (actionable + exact ask)”:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;If you’re happy, I can draft an email you can paste to the right archivists. [...]&lt;/p&gt;
      &lt;p&gt;Subject: Exeter Quayside cliff vaults – request for plan/section drawings Hello,&lt;/p&gt;
      &lt;p&gt;I’m researching the cliff-cut vaults behind The Quay (On The Waterfront / Kings Wharf). Could you supply scans or copies of any plans/sections/diagrams of these vaults—especially those in Exeter Archaeology Report 00.18 (2000) (Archaeological, Historical and Conservation Study of the Exeter Canal Basin) and any EMAFU/Exeter Archaeology drawings for “The Quay” showing the vault/tunnel layouts cut into the red sandstone cliff?&lt;/p&gt;
      &lt;p&gt;For reference: NHLE list entries 1223045 (1–4 Warehouse Vaults), 1223046 (6–11 Warehouse Vaults), and 1223114 (14–25 Vaults).&lt;/p&gt;
      &lt;p&gt;Many thanks!&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;It’s a good thing my Research Goblin doesn’t have the ability to send email (which we already know is very risky business) or at this point I wouldn’t be surprised if it started autonomously bothering archivists on my behalf!&lt;/p&gt;
    &lt;head rend="h4"&gt;Aldi vs Lidl&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;In UK supermarket terms compare lidl and aldi&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;I saw an Aldi and a Lidl next to each other in Exeter and was curious as to how they compare. In this case my Research Goblin went way deeper than I had intended, thinking for 1m25s about market share and price surveys and loyalty schemes and answering with ten paragraphs of detailed analysis.&lt;/p&gt;
    &lt;p&gt;I replied:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Yeah, I just wanted the basic vibes like is one fancier than the other?&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;It thought for 6 seconds, didn’t run any additional searches and replied:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Short version: neither is “fancy” — both are no-frills discounters — but Lidl often feels a touch more polished, while Aldi feels a touch more bare-bones. [...]&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Since I was now enjoying having my Goblin express judgement over British supermarket chains I said:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;How do they rate in fancinews compared to all of the other major UK supermarket chains?&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;(That was a typo for “fanciness” which it figured out.)&lt;/p&gt;
    &lt;p&gt;It thought for another 1m1s, ran 7 searches, consulted 27 URLs and gave me back a ranking that looked about right to me.&lt;/p&gt;
    &lt;head rend="h4"&gt;AI labs scanning books for training data&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;Anthropic bought lots of physical books and cut them up and scan them for training data. Do any other AI labs do the same thing?&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Relevant to today’s big story. Research Goblin was unable to find any news stories or other evidence that any labs other than Anthropic are engaged in large scale book scanning for training data. That’s not to say it isn’t happening, but it’s happening very quietly if that’s the case.&lt;/p&gt;
    &lt;head rend="h4"&gt;GPT-5 for search feels competent&lt;/head&gt;
    &lt;p&gt;The word that best describes how I feel about GPT-5 search is that it feels competent.&lt;/p&gt;
    &lt;p&gt;I’ve thrown all sorts of things at it over the last few weeks and it rarely disappoints me. It almost always does better than if I were to dedicate the same amount of time to manually searching myself, mainly because it’s much faster at running searches and evaluating the results than I am.&lt;/p&gt;
    &lt;p&gt;I particularly love that it works so well on mobile. I used to reserve my deeper research sessions to a laptop where I could open up dozens of tabs. I’ll still do that for higher stakes activities but I’m finding the scope of curiosity satisfaction I can perform on the go with just my phone has increased quite dramatically.&lt;/p&gt;
    &lt;p&gt;I’ve mostly stopped using OpenAI’s Deep Research feature, because ChatGPT search now gives me the results I’m interested in far more quickly for most queries.&lt;/p&gt;
    &lt;p&gt;As a developer who builds software on LLMs I see ChatGPT search as the gold standard for what can be achieved using tool calling combined with chain-of-thought. Techniques like RAG are massively more effective if you can reframe them as several levels of tool calling with a carefully selected set of powerful search tools.&lt;/p&gt;
    &lt;p&gt;The way that search tool integrates with reasoning is key, because it allows GPT-5 to execute a search, reason about the results and then execute follow-up searches—all as part of that initial “thinking” process.&lt;/p&gt;
    &lt;p&gt;Anthropic call this ability interleaved thinking and it’s also supported by the OpenAI Responses API.&lt;/p&gt;
    &lt;head rend="h4"&gt;Tips for using search in ChatGPT&lt;/head&gt;
    &lt;p&gt;As with all things AI, GPT-5 search rewards intuition gathered through experience. Any time a curious thought pops into my head I try to catch it and throw it at my Research Goblin. If it’s something I’m certain it won’t be able to handle then even better! I can learn from watching it fail.&lt;/p&gt;
    &lt;p&gt;I’ve been trying out hints like “go deep” which seem to trigger a more thorough research job. I enjoy throwing those at shallow and unimportant questions like the UK Starbucks cake pops one just to see what happens!&lt;/p&gt;
    &lt;p&gt;You can throw questions at it which have a single, unambiguous answer—but I think questions which are broader and don’t have a “correct” answer can be a lot more fun. The UK supermarket rankings above are a great example of that.&lt;/p&gt;
    &lt;p&gt;Since I love a questionable analogy for LLMs Research Goblin is... well, it’s a goblin. It’s very industrious, not quite human and not entirely trustworthy. You have to be able to outwit it if you want to keep it gainfully employed.&lt;/p&gt;
    &lt;head rend="h2"&gt;More recent articles&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;V&amp;amp;A East Storehouse and Operation Mincemeat in London - 27th August 2025&lt;/item&gt;
      &lt;item&gt;The Summer of Johann: prompt injections as far as the eye can see - 15th August 2025&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45152284</guid></item><item><title>I am giving up on Intel and have bought an AMD Ryzen 9950X3D</title><link>https://michael.stapelberg.ch/posts/2025-09-07-bye-intel-hi-amd-9950x3d/</link><description>&lt;doc fingerprint="266d3453c9759674"&gt;
  &lt;main&gt;
    &lt;head&gt;Table of contents&lt;/head&gt;
    &lt;p&gt;The Intel 285K CPU in my high-end 2025 Linux PC died again! 😡 Notably, this was the replacement CPU for the original 285K that died in March, and after reading through the reviews of Intel CPUs on my electronics store of choice, many of which (!) mention CPU replacements, I am getting the impression that Intel’s current CPUs just are not stable 😞. Therefore, I am giving up on Intel for the coming years and have bought an AMD Ryzen 9950X3D CPU instead.&lt;/p&gt;
    &lt;head rend="h2"&gt;What happened? Or: the batch job of death&lt;/head&gt;
    &lt;p&gt;On the 9th of July, I set out to experiment with layout-parser and tesseract in order to convert a collection of scanned paper documents from images into text.&lt;/p&gt;
    &lt;p&gt;I expected that offloading this task to the GPU would result in a drastic speed-up, so I attempted to build layout-parser with CUDA. Usually, it’s not required to compile software yourself on NixOS, but CUDA is non-free, so the default NixOS cache does not compile software with CUDA. (Tip: Enable the Nix Community Cache, which contains prebuilt CUDA packages, too!)&lt;/p&gt;
    &lt;p&gt;This lengthy compilation attempt failed with a weird symptom: I left for work, and after a while, my PC was no longer reachable over the network, but fans kept spinning at 100%! 😳 At first, I suspected a Linux bug, but now I am thinking this was the first sign of the CPU being unreliable.&lt;/p&gt;
    &lt;p&gt;When the CUDA build failed, I ran the batch job without GPU offloading instead. It took about 4 hours and consumed roughly 300W constantly. You can see it on this CPU usage graph:&lt;/p&gt;
    &lt;p&gt;On the evening of the 9th, the computer still seemed to work fine.&lt;/p&gt;
    &lt;p&gt;But the next day, when I wanted to wake up my PC from suspend-to-RAM as usual, it wouldn’t wake up. Worse, even after removing the power cord and waiting a few seconds, there was no reaction to pressing the power button.&lt;/p&gt;
    &lt;p&gt;Later, I diagnosed the problem to either the mainboard and/or the CPU. The Power Supply, RAM and disk all work with different hardware. I ended up returning both the CPU and the mainboard, as I couldn’t further diagnose which of the two is broken.&lt;/p&gt;
    &lt;p&gt;To be clear: I am not saying the batch job killed the CPU. The computer was acting strangely in the morning already. But the batch job might have been what really sealed the deal.&lt;/p&gt;
    &lt;head rend="h2"&gt;No, it wasn’t the heat wave&lt;/head&gt;
    &lt;p&gt;Tom’s Hardware recently reported that “Intel Raptor Lake crashes are increasing with rising temperatures in record European heat wave”, which prompted some folks to blame Europe’s general lack of Air Conditioning.&lt;/p&gt;
    &lt;p&gt;But in this case, I actually did air-condition the room about half-way through the job (at about 16:00), when I noticed the room was getting hot. Here’s the temperature graph:&lt;/p&gt;
    &lt;p&gt;I would say that 25 to 28 degrees celsius are normal temperatures for computers.&lt;/p&gt;
    &lt;p&gt;I also double-checked if the CPU temperature of about 100 degrees celsius is too high, but no: this Tom’s Hardware article shows even higher temperatures, and Intel specifies a maximum of 110 degrees. So, running at “only” 100 degrees for a few hours should be fine.&lt;/p&gt;
    &lt;p&gt;Lastly, even if Intel CPUs were prone to crashing under high heat, they should never die.&lt;/p&gt;
    &lt;head rend="h2"&gt;Which AMD CPU to buy?&lt;/head&gt;
    &lt;p&gt;I wanted the fastest AMD CPU (for desktops, not for servers), which currently is the Ryzen 9 9950X, but there is also the Ryzen 9 9950X3D, a variant with 3D V-Cache. Depending on the use-case, the variant with or without 3D V-Cache is faster, see the comparison on Phoronix.&lt;/p&gt;
    &lt;p&gt;Ultimately, I decided for the 9950X3D model, not just because it performs better in many of the benchmarks, but also because Linux 6.13 and newer let you control whether to prefer the CPU cores with larger V-Cache or higher frequency, which sounds like an interesting capability: By changing this setting, maybe one can see how sensitive certain workloads are to extra cache.&lt;/p&gt;
    &lt;p&gt;Aside from the CPU, I also needed a new mainboard (for AMD’s socket AM5), but I kept all the other components. I ended up selecting the ASUS TUF X870+ mainboard. I usually look for low power usage in a mainboard, so I made sure to go with an X870 mainboard instead of an X870E one, because the X870E has two chipsets (both of which consume power and need cooling)! Given the context of this hardware replacement, I also like the TUF line’s focus on endurance…&lt;/p&gt;
    &lt;head rend="h2"&gt;Performance&lt;/head&gt;
    &lt;p&gt;The performance of the AMD 9950X3D seems to be slightly better than the Intel 285K:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Workload&lt;/cell&gt;
        &lt;cell role="head"&gt;12900K (2022)&lt;/cell&gt;
        &lt;cell role="head"&gt;285K (2025)&lt;/cell&gt;
        &lt;cell role="head"&gt;9950X3D (2025)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;build Go 1.24.3&lt;/cell&gt;
        &lt;cell&gt;≈35s&lt;/cell&gt;
        &lt;cell&gt;≈26s&lt;/cell&gt;
        &lt;cell&gt;≈24s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;gokrazy/rsync tests&lt;/cell&gt;
        &lt;cell&gt;≈0.5s&lt;/cell&gt;
        &lt;cell&gt;≈0.4s&lt;/cell&gt;
        &lt;cell&gt;≈0.5s&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;gokrazy Linux compile&lt;/cell&gt;
        &lt;cell&gt;3m 13s&lt;/cell&gt;
        &lt;cell&gt;2m 7s&lt;/cell&gt;
        &lt;cell&gt;1m 56s&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;In case you’re curious, the commands used for each workload are:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;code&gt;cd src; ./make.bash&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;make test&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;gokr-rebuild-kernel -cross=arm64&lt;/code&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;(I have not included the gokrazy UEFI integration tests because I think there is an unrelated difference that prevents comparison of my old results with how the test runs currently.)&lt;/p&gt;
    &lt;head rend="h2"&gt;Power consumption&lt;/head&gt;
    &lt;p&gt;In my high-end 2025 Linux PC I explained that I chose the Intel 285K CPU for its lower idle power consumption, and some folks were skeptical if AMD CPUs are really worse in that regard.&lt;/p&gt;
    &lt;p&gt;Having switched between 3 different PCs, but with identical peripherals, I can now answer the question of how the top CPUs differ in power consumption!&lt;/p&gt;
    &lt;p&gt;I picked a few representative point-in-time power values from a couple of days of usage:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;CPU&lt;/cell&gt;
        &lt;cell role="head"&gt;Mainboard&lt;/cell&gt;
        &lt;cell role="head"&gt;idle power&lt;/cell&gt;
        &lt;cell role="head"&gt;idle power with monitor&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Intel 12900k&lt;/cell&gt;
        &lt;cell&gt;ASUS PRIME Z690-A&lt;/cell&gt;
        &lt;cell&gt;40W&lt;/cell&gt;
        &lt;cell&gt;60W&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Intel 285k&lt;/cell&gt;
        &lt;cell&gt;ASUS PRIME Z890-P&lt;/cell&gt;
        &lt;cell&gt;46W&lt;/cell&gt;
        &lt;cell&gt;65W&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;AMD 9950X3D&lt;/cell&gt;
        &lt;cell&gt;ASUS TUF GAMING X870-PLUS WIFI&lt;/cell&gt;
        &lt;cell&gt;55W&lt;/cell&gt;
        &lt;cell&gt;80W&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Looking at two typical evenings, here is the power consumption of the Intel 285K:&lt;/p&gt;
    &lt;p&gt;…and here is the same PC setup, but with the AMD 9950X3D:&lt;/p&gt;
    &lt;p&gt;I get the general impression that the AMD CPU has higher power consumption in all regards: the baseline is higher, the spikes are higher (peak consumption) and it spikes more often / for longer.&lt;/p&gt;
    &lt;p&gt;Looking at my energy meter statistics, I usually ended up at about 9.x kWh per day for a two-person household, cooking with induction.&lt;/p&gt;
    &lt;p&gt;After switching my PC from Intel to AMD, I end up at 10-11 kWh per day.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;I started buying Intel CPUs because they allowed me to build high-performance computers that ran Linux flawlessly and produced little noise. This formula worked for me over many years:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Back in 2008, I bought a mobile Intel CPU in a desktop case (article in German).&lt;/item&gt;
      &lt;item&gt;Then, in 2012, I could just buy a regular Intel CPU (i7-2600K) for my Linux PC, because they had gotten so much better in terms of power saving.&lt;/item&gt;
      &lt;item&gt;Over the years, I bought an i7-8700K, and later an i9-9900K.&lt;/item&gt;
      &lt;item&gt;The last time this formula worked out for me was with my 2022 high-end Linux PC.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;On the one hand, I’m a little sad that this era has ended. On the other hand, I have had a soft spot for AMD since I had one of their K6 CPUs in one of my early PCs and in fact, I have never stopped buying AMD CPUs (e.g. for my Ryzen 7-based Mini Server).&lt;/p&gt;
    &lt;p&gt;Maybe AMD could further improve their idle power usage in upcoming models? And, if Intel survives for long enough, maybe they succeed at stabilizing their CPU designs again? I certainly would love to see some competition in the CPU market.&lt;/p&gt;
    &lt;p&gt;Did you like this post? Subscribe to this blog’s RSS feed to not miss any new posts!&lt;/p&gt;
    &lt;p&gt;I run a blog since 2005, spreading knowledge and experience for over 20 years! :)&lt;/p&gt;
    &lt;p&gt;If you want to support my work, you can buy me a coffee.&lt;/p&gt;
    &lt;p&gt;Thank you for your support! ❤️&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45155986</guid></item><item><title>What is the origin of the private network address 192.168.*.*? (2009)</title><link>https://lists.ding.net/othersite/isoc-internet-history/2009/oct/msg00000.html</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45156826</guid></item><item><title>SQLite's Use of Tcl (2017)</title><link>https://www.tcl-lang.org/community/tcl2017/assets/talk93/Paper.html</link><description>&lt;doc fingerprint="64a9edcfc230b6b"&gt;
  &lt;main&gt;
    &lt;p&gt;SQLite is a TCL extension that has escaped into the wild.&lt;/p&gt;
    &lt;p&gt;The design of SQLite was inspired by the design of TCL, both in the way it handles datatypes and in the formatting of its source code. The index use case for SQLite was in a Tcl/Tk application for an industrial company. From its inception, SQLite has always depended heavily on TCL. These days, SQLite no longer uses TCL internally and can be run separately from any TCL interpreter, and yet the SQLite development process still depends heavily on TCL.&lt;/p&gt;
    &lt;p&gt;SQLite is an SQL database engine, and the most widely used database engine in the world. SQLite is built into all cellphones as a core component and is the primary means of data persistence on phones. SQLite is also an integral part of most web browsers. SQLite is built into MacOS and is used by most of the default applications on that platform. Windows10 requires the C:\Windows\System32\winsqlite3.dll file in order to boot. Countless other popular applications like Skype and WhatsApp and iTunes depend on SQLite.&lt;/p&gt;
    &lt;p&gt;Because SQLite is open source and can be freely downloaded and duplicated, exact usage numbers are unavailable. But reasonable estimates are that there are more SQLite instances in operation today than there are people on earth. Most devices that use the SQLite database engine contain hundreds of separate databases, and there are billions of such devices. Hence, there are likely around one trillion SQLite databases in active use.&lt;/p&gt;
    &lt;p&gt;There are more copies of SQLite in use than there are copies of Linux. We know this because SQLite is used on almost all Linux systems, but SQLite is also used on many other non-linux systems such as Macs, iPhones, and Windows computers. By similar arguments, there are more copies of SQLite in use than there are Macs, or Windows PCs. There are probably more copies of SQLite in use than all other database engines combined. It seems likely that SQLite is the most widely used and deployed software component of any kind, with the possible exception of the zLib compression library.&lt;/p&gt;
    &lt;p&gt;SQLite is not written in TCL. Rather, SQLite is intended to be used by TCL. Like the TCL interpreter, SQLite is written in ANSI C.&lt;/p&gt;
    &lt;p&gt;The fact that SQLite was primarily intended to be used from TCL is evident in an number of ways.&lt;/p&gt;
    &lt;p&gt;All programming languages, other than C/C++, require some kind of adaptor in order to interface with the SQLite C implementation. Language adaptors for SQLite are widely available from third party programmers. The adaptors for PHP and Python are built into those languages, for example. A Java adaptor is baked into Android. And so forth. Only the TCL adaptor is included as part of the SQLite core. The source code file that implements the TCL adaptor for SQLite, "tclsqlite.c", was part of the very first check-in on the SQLite source repository on 2000-05-29. (See https://sqlite.org/src/ci/6f3655f79f9b6fc9.)&lt;/p&gt;
    &lt;p&gt;All modern SQL implementations provide a means to do late binding of parameter values to the SQL statements. Usually a naked "?" character, or a "?" followed by an integer is used. For example:&lt;/p&gt;
    &lt;quote&gt;SELECT passwd, photo FROM user WHERE uid=?1&lt;/quote&gt;
    &lt;p&gt;The "?1" token in the SQL above would be assigned a value at run-time in order to look up the password and photograph of a particular user.&lt;/p&gt;
    &lt;p&gt;SQLite supports this syntax. But because of its TCL heritage, SQLite also allows the parameter to take the form of a TCL variable. Hence:&lt;/p&gt;
    &lt;quote&gt;SELECT passwd, photo FROM user WHERE uid=$uid&lt;/quote&gt;
    &lt;p&gt;When a statement such as the above is run, the TCL language adaptor automatically binds the value of the $uid TCL variable to the SQL statement before it is evaluated, providing an intuitive and seamless interface between TCL and SQL. SQLite is the only database engine that behaves this way.&lt;/p&gt;
    &lt;p&gt;The TCL heritage of SQLite is visible in the type system of SQLite. Early versions of SQLite (prior to 2004) operated on the classic TCL principal that "everything is a string". Beginning with SQLite3 (2004-06-18), SQLite also supports binary data. However, types are still very flexible in SQLite, just as they are in TCL. SQLite treats the datatypes on column names in a CREATE TABLE statement as suggestions rather than hard requirements. SQLite is happy to store a 100KB string value in a column that is declared "SHORT INT", just as TCL is happy to store either a large string or a small integer in the same variable. There are some differences in how SQLite deals with datatypes, in comparison to TCL, due to the different nature of the SQL language. SQLite has the concept of "type affinity". If a column is declared "INT" and one inserts a string into that column that looks like an integer and can be safely converted into an integer without loss of information, then that conversion occurs automatically. This provides a measure of compatibility with the rigid type systems of other SQL database engines.&lt;/p&gt;
    &lt;p&gt;The flexible type system of SQLite seems natural and intuitive to programmers with prior experience programming in TCL. Curiously, though, it is a source of frustration and frequent complaining from programmers accustomed to the rigid and unforgiving type systems of languages like Java.&lt;/p&gt;
    &lt;p&gt;The similarities in the type systems of TCL and SQLite extends to more than just the interface. An important part of the C/C++ interface for SQLite is the "sqlite3_value" object (https://sqlite.org/c3ref/value.html) which is analogous to the Tcl_Obj object in TCL. Both TCL and SQLite use a dual-representation approach, where each value can be represented simultaneously as both a string and some other type.&lt;/p&gt;
    &lt;p&gt;SQLite began as a TCL extension, though these days most uses of SQLite are in applications written in languages other than TCL. Many programmers who use SQLite in their applications have no knowledge or awareness of TCL. The SQLite source code used by most developers is a single file of pure C code named "sqlite3.c" that contains no TCL code. This is what we mean when we say that SQLite as "escaped" into the wild. Deployed instances of SQLite no longer depends on TCL.&lt;/p&gt;
    &lt;p&gt;Nevertheless, SQLite is still heavily dependent upon TCL and the ongoing support, maintenance, and enhancement of SQLite would not be possible without TCL, and would be seriously inconvenienced without Tk.&lt;/p&gt;
    &lt;p&gt;The deliverable source code for SQLite is a single file named "sqlite3.c" and its companion header "sqlite3.h". Both files are 100% ANSI-C code. But developers do not edit these files directly. The sqlite3.c and sqlite3.h source files are build products, and the source tree used to build those files is over 50% TCL code. Figure 1 nearby shows the exact ratios.&lt;/p&gt;
    &lt;p&gt;Figure 1 is for the main SQLite source repository. Many of the test cases and much of the documentation is held in separate repositories, not included in Figure 1. The separate repositories also contain a great deal of TCL code.&lt;/p&gt;
    &lt;p&gt;Much of the TCL code in the main SQLite repository consists of test scripts. At this writing, the core repository contains 1153 separate test scripts totally about 389 KB of space. But this is not the only use of TCL in SQLite.&lt;/p&gt;
    &lt;p&gt;A non-trivial amount of the deliverable C code for SQLite is machine generated. Some of the machine generated code is created by C programs, such as LEMON which translates the SQL language grammar into C code to implement a push-down automaton to parse the SQL language. But much of the automatically generated code is created using TCL scripts. TCL is well suited for scanning source files to extract information to be merged with other files and for making mechanized edits. For example, the byte-code engine used to evaluate SQL statements inside of SQLite is implemented as a large "switch" statement inside a "for" loop, with a separate "case" for each opcode, all in the "vdbe.c" source file. At build-time, TCL scripts scan the vdbe.c source file looking for the appropriate "case" statements and then build header files that assign consecutive integers to each symbolic opcode name. (The opcodes used by the SQLite byte-code engine are not an API as they are in TCL and thus can change from one build to the next.) This mapping of symbolic opcode names into integers is not a simple as one might suppose. For reasons of optimization, there are many constraints on the specific values that are assigned to opcodes. For example, many opcodes such as OP_Add must have the same numeric value as the corresponding "+" token in the SQL language parser. Sometimes a group of related opcodes, such as the comparison operators OP_Eq, OP_Ne, OP_Lt, OP_Le, OP_Ge, and OP_Gt, need to be assigned consecutive integers in a specific order. These constraints are all handled effortlessly in TCL. Accomplishing the same with AWK would be rather more difficult.&lt;/p&gt;
    &lt;p&gt;Perhaps the most important task for TCL during the SQLite build process is constructing the SQLite amalgamation source code file. Recall that most developers use SQLite in the form of a single big file of C code named "sqlite3.c" and referred to as "the amalgamation". A TCL script named "mksqlite3c.tcl" runs in order to construct the amalgamation from over one hundred separate input files. Each of these inputs files must be added to the amalgamation in just the right order. Furthermore, the source files are edited as part of the amalgamation building process. When mksqlite3c.tcl encounters a "#include" for an SQLite header, it replaces the "#include" with a copy of that header file, taking care to make sure each header file is only included once. The mksqlite3.tcl script automatically adds the "static" keyword to internal SQLite APIs to give them file linkage, and makes other similar edits.&lt;/p&gt;
    &lt;p&gt;In addition to the core SQLite library, the SQLite source tree also contains code for several analysis and control programs. One of these programs is called "sqlite3_analyzer" (or "sqlite3_analyzer.exe" on Windows). The sqlite3_analyzer program examines an SQLite database and generates a detailed report on the disk usage by the various tables and indexes within that database. The sqlite3_analyzer program is very useful in understanding how an application is using disk space.&lt;/p&gt;
    &lt;p&gt;It turns out that sqlite3_analyzer, though disguised as an ordinary executable, is really a TCL application. The main source code file for this application is tool/spaceanal.tcl. During the build process, this script is converted into a C-language string constant (using another TCL script) and added to a very simple C-language wrapper than starts a TCL interpreter and then passes the application script to that interpreter.&lt;/p&gt;
    &lt;p&gt;The sqlite3_analyzer program could be rewritten in pure C. But that would be a lot of code. The TCL script that implements sqlite3_analyzer is less than 1000 lines long. The equivalent C program would surely be at least ten times larger.&lt;/p&gt;
    &lt;p&gt;Note that the sqlite3_analyzer utility program statically links a TCL interpreter and so does not require a TCL installation on the target computer to use. The sqlite3_analyzer utility program is used by tens of thousands of developers, most of whom do not realize that they are really running a TCL application.&lt;/p&gt;
    &lt;p&gt;One of the key features of SQLite is that it uses aviation-grade testing. The tests of SQLite, at a minimum, provide 100% modified condition/decision coverage (MC/DC) of the SQLite code, with independence. 100% MC/DC roughly means that every branch instruction at the machine code level is exercised at least once in each direction. The precise definition of MC/DC is slightly stricter than this, for example when comparing boolean vectors, but the 100% branch tests coverage definition is very close approximation. The "with independence" term means that SQLite is tested in multiple ways with test code being written and maintained by different individuals.&lt;/p&gt;
    &lt;p&gt;The amount of testing done on SQLite is fanatical. On the other hand, that level of testing is necessary for a fundamental low-level component, such as a database engine, that is used by billions of devices. If an ordinary application encounters an obscure bug, it can normally be rebooted to clear the problem. But the job of a database engine is to remember things, and so databases tend to remember their mistakes across reboots. For these reasons, it is important that SQLite have a very low bug density.&lt;/p&gt;
    &lt;p&gt;TCL is used in every aspect of SQLite testing. The test cases that are part of the primary SQLite source code repository are written in TCL. Other test cases such as TH3 and SQLLogicTest are written in C but still depend on TCL for operation.&lt;/p&gt;
    &lt;p&gt;The TH3 test suite is a set of proprietary tests for SQLite that form the primary means of achieving 100% MC/DC. TH3 is designed to run on embedded hardware without the support of a desktop operating system. TH3 consists of over 1350 test modules together with over 100 control files. The test modules are written in either C or SQL or a combination of both. The control files are text formatted in a way that easily parsed by TCL. To build a TH3 test, a TCL script is run that combines some subset of the test modules and control files into a single large C program that will automatically run the required tests. This C program is then linked against the "sqlite3.c" amalgamation and the resulting binary is moved to the target computer and executed. TCL scripts automate this entire process on all major host platforms.&lt;/p&gt;
    &lt;p&gt;To verify that the TH3 tests really do provide 100% MC/DC, special options are added to the TCL scripts that run the tests, causing the GCC coverage analysis tools to be invoked. The output of gcov is then postprocessed to reveal and report any branch instructions that were missed by the tests. The TH3 tests themselves are all implemented in C and SQL, but the operation and management of those tests is all done with TCL.&lt;/p&gt;
    &lt;p&gt;The extensive documentation for SQLite available on the SQLite website (https://sqlite.org/) is all generated by TCL. Many of the documents, such as the API reference documentation and the descriptions of the byte-code engine opcodes, are created by TCL scripts that scan C source code and extract the necessary information from the code and comments. Thus, the API documentation is largely derived from comments in the source code. Keeping the official documentation (in comments) and the source code close together helps ensure that they are in agreement.&lt;/p&gt;
    &lt;p&gt;Other whitepaper documents are generated from source files that look mostly like HTML but which contain additional TCL code embedded inside of &amp;lt;tcl&amp;gt;...&amp;lt;/tcl&amp;gt; markup. The added TCL code is used for advanced formatting techniques, for automatically creating cross-references and cross-links, and for constructing complex displays such as the popular "rail-road" syntax diagrams for SQL.&lt;/p&gt;
    &lt;p&gt;The text editor used by the primary author of SQLite is a custom editor with emacs-style key bindings that is built on top of the Tk Text widget. The "e" editor, as it is called, is cross-platform, which helps in the development of a cross-platform software library like SQLite. The "e" editor has been used for the entire 17-year history of SQLite. It has been enhanced over the years with various customizations created especially to help manage the SQLite source code.&lt;/p&gt;
    &lt;p&gt;The Fossil version control system used for the SQLite source code (and written specifically for that purpose) uses Tcl/Tk to show graphical side-by-side diffs in a separate window. When the "fossil diff --tk" command is run, Fossil generates a script to show the diff graphically and then kicks off a separate "wish" process to run that script and display the diff in a separate window. This graphical diff window has a "Save" button which will cause the Tcl/Tk code needed to reproduce itself to be written to a file. This file can be, in turn, sent to a collaborator for display. Passing around graphical diffs as ordinary text files is much simpler and easier than passing around JPEG images or text "context" diffs.&lt;/p&gt;
    &lt;p&gt;No two SQLite developers work in the same office. The team is geographically distributed. To help the team stay in touch, a custom chatroom has been created using a Tcl/Tk script. The same script works as both client and server. The chatroom is private and uses a proprietary protocol, so that developers are free to discuss sensitive matters without fear of eavesdropping. The chatroom is implemented as just over 1000 lines of Tk code, and is thus accessible and easy to customize. Among the customizations is the ability to send saved "fossil diff --tk" graphical diffs to collaborators and have the diff pop automatically on the collaborators screen. Small features like this seem trivial by themselves, but together than help the developers to work much more efficiently. These kinds of productivity-enhancing features are unavailable to users of commercial business collaboration packages such as HipChat.&lt;/p&gt;
    &lt;p&gt;SQLite is an indispensable element of most modern computer systems, and TCL is an indispensable tool used in the production and maintenance of SQLite. Thus, the computing infrastructure we enjoy today would not exist except for TCL.&lt;/p&gt;
    &lt;p&gt;As deployed, SQLite contains no TCL code. However, the design of SQLite is inspired by TCL. And TCL is used extensively in the code generation, testing, analysis, documentation, and development of SQLite. Without TCL, SQLite would not exist.&lt;/p&gt;
    &lt;p&gt;Every developer and every team has a finite number of "brain cycles" available to do their job. The fewer cycles spent messing with tools, the more cycles are available to devote towards solving the problem. So for maximum productivity, it is important to use tools that get the job done with a minimum of fuss and bother. Our 17-year experience using TCL in the SQLite project has convinced us that TCL is just such a tool. Tcl provides the most help per brain cycle of any similar technology.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45158814</guid></item><item><title>The MacBook has a sensor that knows the exact angle of the screen hinge</title><link>https://twitter.com/samhenrigold/status/1964428927159382261</link><description>&lt;doc fingerprint="d635f48b34542867"&gt;
  &lt;main&gt;
    &lt;p&gt;We’ve detected that JavaScript is disabled in this browser. Please enable JavaScript or switch to a supported browser to continue using x.com. You can see a list of supported browsers in our Help Center.&lt;/p&gt;
    &lt;p&gt;Help Center&lt;/p&gt;
    &lt;p&gt;Terms of Service Privacy Policy Cookie Policy Imprint Ads info © 2025 X Corp.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45158968</guid></item><item><title>Keeping secrets out of logs (2024)</title><link>https://allan.reyes.sh/posts/keeping-secrets-out-of-logs/</link><description>&lt;doc fingerprint="a622f1124d050d9c"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Keeping Secrets Out of Logs&lt;/head&gt;
    &lt;p&gt;This post is about how to keep secrets out of logs, and my claim is that (like many things in security) there isn’t a singular action or silver bullet that lets you do this. I would go so far as to say that there’s not even an 80/20 rule, where one action fixes 80% of the problem. It’s not like preventing SQL injection with prepared statements or preventing buffer overflows by using memory-safe languages.&lt;/p&gt;
    &lt;p&gt;What I will offer instead, are lead bullets, of which there are many. I’m going to talk about 10 of them. They are imperfect and sometimes unreliable things that, if put in the right places and with defense-in-depth, can still give us a real good chance at succeeding. My hope is that by the end, you’ll have a slightly better framework for how to reason about this problem and some new ideas to add to your kit.&lt;/p&gt;
    &lt;p&gt;Table of contents:&lt;/p&gt;
    &lt;head rend="h2"&gt;The Problem&lt;/head&gt;
    &lt;p&gt;With that, let’s dive in and set the table by talking about the problem with secrets in logs.&lt;/p&gt;
    &lt;p&gt;So, there are some problems that are annoying. And there are some problems that are difficult.&lt;/p&gt;
    &lt;p&gt;This is both. I’m gonna level with you: I absolutely hate this problem. But I’m not going to gaslight you and tell you that this is the most important thing to work on worry about, because it probably isn’t!&lt;/p&gt;
    &lt;p&gt;You have somewhere between 5 and 50 other problems in your backlog that seem more important, 1 of which you found out about this morning. But I think it’s likely that none of those problems are nearly as annoying. While researching this topic, I interviewed about a dozen other engineers and, on this point, they unanimously agreed! Nobody likes dealing with secrets in logs because it is extraordinarily annoying.&lt;/p&gt;
    &lt;p&gt;This is a problem that’s also difficult, but not even in the fun sense, like being technically complex or interesting. Once you catch sensitive data in logs, it’s usually pretty straightforward (at least in retrospect) to determine how they got there. But, it’s also surprisingly elusive to prevent, and it crops up in incredibly unexpected places and ways.&lt;/p&gt;
    &lt;p&gt;Secrets could mean lots of different things to lots of different teams, but I’ll use it interchangeably with “sensitive data”: stuff that you want to keep confidential. What’s so frustrating when breaching confidentiality in logs is the full spectrum of potential impact.&lt;/p&gt;
    &lt;p&gt;In the best case (left), you might log an isolated, internal credential, like an API key, which (kudos!) you rotate right after fixing the source of leak. The impact is minimal, and you just move on. Of course, all the way on the other end of the spectrum (right), you might log something that an attacker or inside threat could use to do some real harm.&lt;/p&gt;
    &lt;p&gt;And then somewhere in-between, where I suspect most of the incidents lie. You might log secrets that you unfortunately, can’t rotate yourself. Things like PII or your customer’s passwords, which are reused on other sites, because of course they are. And, depending on your policies, threat model, or regulations, you might choose to issue a disclosure or notification.&lt;/p&gt;
    &lt;p&gt;And it is painful.&lt;/p&gt;
    &lt;p&gt;You could be doing so many good data security practices, like secure-by-design frameworks, database and field-level encryption, zero-touch production, access control&amp;amp;mldr; but logging bypasses all of that&amp;amp;mldr; and ultimately degrades trust, in your systems and in your company. It feels unfair because it’s only a fraction of your security story.&lt;/p&gt;
    &lt;p&gt;And this is a problem that happens to companies of all sizes:&lt;/p&gt;
    &lt;p&gt;Something about “plaintext” just kinda stings, especially as a security practitioner. It’s like&amp;amp;mldr; the most profane insult you can hurl at a security engineer. Imagine retorting with, “Oh yea? Well, you store your passwords in plaintext!”&lt;/p&gt;
    &lt;p&gt;But logging passwords and storing them in plaintext are&amp;amp;mldr; kinda the same thing.&lt;/p&gt;
    &lt;p&gt;Because while logs are rarely or purposefully public, they’re typically afforded broader access than direct access to your databases.&lt;/p&gt;
    &lt;p&gt;Everyone knows by now that storing plaintext secrets in your database is a terrible idea. Logs, however, are still data-at-rest, and we should treat them with the same level of scrutiny.&lt;/p&gt;
    &lt;p&gt;I cherry picked those examples because they are established companies with very mature security programs. I’m not trying to throw shade; in fact, I deeply respect them for being public and transparent about this. I think this also hints that preventing secrets in logs is a deceptively difficult and frustrating problem.&lt;/p&gt;
    &lt;p&gt;If we can understand some causes, we might gain a deeper appreciation for these past occurrences, and stand a better chance at avoiding new incidents in the future.&lt;/p&gt;
    &lt;head rend="h2"&gt;Causes&lt;/head&gt;
    &lt;p&gt;This is certainly not comprehensive, but from my interviews and personal experience, here are six of the most common causes.&lt;/p&gt;
    &lt;head rend="h3"&gt;🤦 Direct logging&lt;/head&gt;
    &lt;code&gt;const temp = res.cookie["session"];

// TODO: remove after testing is done
Logger.info("session HERE", { temp });
&lt;/code&gt;
    &lt;quote&gt;
      &lt;p&gt;Narrator: it was not removed after testing was done&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The first group is perhaps the most obvious and facepalm one: when sensitive data is directly logged. Sometimes it’s purely accidental, like the example above: someone wants to debug session cookies in their local environment and then&amp;amp;mldr; accidentally commits the code. Sometimes it comes from an uninformed position where the developer just doesn’t know any better.&lt;/p&gt;
    &lt;p&gt;These tend to be fairly easy to trace down the exact line of code or commit that introduces it. With this example, you can just grep the codebase for &lt;code&gt;session here&lt;/code&gt; and you’ll find it instantly.&lt;/p&gt;
    &lt;head rend="h3"&gt;🚰 Kitchen sinks&lt;/head&gt;
    &lt;code&gt;const client = googleSdk.admin(...);
try {
  const res = client.tokens.list(...);
} catch (e) {
  Logger.error("failed fetch", { e });
}
&lt;/code&gt;
    &lt;p&gt;I’m sure you’ve seen or written code like this before. Here we have an API client or SDK that is used to fetch some data. Exceptions are caught, kind of, and then promptly logged so that on-call engineers can debug the errors.&lt;/p&gt;
    &lt;p&gt;What happens?&lt;/p&gt;
    &lt;p&gt;That error is decorated with a config object stuffed with secrets and the full response object, which is also stuffed with secrets, and now they’re both in your logs!&lt;/p&gt;
    &lt;code&gt;{
  e: {
    status: 400,
    ...
    config: { 💥☠️🪦 },
    response: { 💣😭😱 },
  }
}
&lt;/code&gt;
    &lt;p&gt;I call these “kitchen sinks,” objects that contain or hold secrets, often in opaque or unexpected ways. Think of an actual kitchen sink that’s filled to the brim with dirty dishes and you can’t easily tell what’s at the bottom without reaching into it. Maybe it’s a spoon, or maybe it’s knife and now you have to go to the hospital. What tends to happen is that the whole kitchen sink gets logged, and the logging library happily serializes it, including parts that were actually sensitive.&lt;/p&gt;
    &lt;p&gt;This seems to happen with code that attaches additional data onto errors, or code that logs full request and response objects. It’s typically a bit hard to catch in code review unless you know to look for them. If you are blessed with static types, seeing an &lt;code&gt;any&lt;/code&gt; type flow into logs can be a good hint that you’re
logging too much.&lt;/p&gt;
    &lt;head rend="h3"&gt;🔧 Configuration changes&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;Narrator: it was not okay&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Next example: someone needs additional observability and changes a setting like the global log level. You know exactly what happens, here. This dev is about to have a bad time and find out that hope, in fact, is not a valid strategy.&lt;/p&gt;
    &lt;p&gt;We started with an observability problem. Now we also have security problem: brand new secrets are getting emitted into logs.&lt;/p&gt;
    &lt;p&gt;In that example (that totally never happened to me ever), developers built production around log levels set to &lt;code&gt;WARN&lt;/code&gt; and above, but once you flip it to
&lt;code&gt;DEBUG&lt;/code&gt;, all this new stuff comes out of the woodwork.&lt;/p&gt;
    &lt;p&gt;These type of configuration changes tend to involve a system that was built with one set of assumptions, but some kind of modification moves that system from a known state into a unknown state, introducing a new set of problems.&lt;/p&gt;
    &lt;p&gt;These often involve low-level or global utilities like logging config, HTTP middleware, or some central piece of infra like a load balancer. They tend to be singletons that are difficult or costly to test, or they crop up only at runtime. On the positive side, it’s usually loud and quick to patch, but cleanup can be kinda painful.&lt;/p&gt;
    &lt;head rend="h3"&gt;🥧 Embedded secrets&lt;/head&gt;
    &lt;code&gt;app.get("/login/:slug", async (req, res) =&amp;gt; {
  const magicLink = req.params["slug"];
  await login({ magicLink });
});
&lt;/code&gt;
    &lt;p&gt;I completely made up this phrase, but the idea is that secrets are coupled to, embedded into, and baked into more general formats like URLs or remote procedure calls. The central idea is that it’s designed into the format and the system, and can’t easily be separated.&lt;/p&gt;
    &lt;p&gt;Say you have a magic login link handler (see above) where a user can click a link and sign into a web app. There’s nothing in that code that logs the link, but if you look at HTTP logs, it’s right there in plain view:&lt;/p&gt;
    &lt;code&gt;47.29.201.179 - - [17/Jul/2024:13:17:10 +0000] "GET /login/Uj79z1pe01...
&lt;/code&gt;
    &lt;p&gt;These types of leaks arise from fundamental designs that don’t take logging into consideration or incorrectly assume some end-to-end flow. The sensitivity gets lost out of context, and ends up getting logged in another layer, system, or service.&lt;/p&gt;
    &lt;head rend="h3"&gt;📡 Telemetry&lt;/head&gt;
    &lt;code&gt;try:
    db_name = os.getenv("DB_NAME")
    db_pass = os.getenv("DB_PASS") # 🤫 Secret!
    conn = db.connect(db_name, db_pass)
    ...
except Error as e:
    # Don't log e! Not today!!11
    Logger.error("failed to connect")
finally:
    conn.close()
&lt;/code&gt;
    &lt;p&gt;Next example: we have some Python code that’s connecting to a database, we’re specifically NOT logging the error object, and we want to ensure we always close out the connection.&lt;/p&gt;
    &lt;p&gt;How can &lt;code&gt;db_pass&lt;/code&gt; possibly make it into logs? Telemetry!&lt;/p&gt;
    &lt;p&gt;"Oops, that's a log, too!"&lt;/p&gt;
    &lt;p&gt;It turns out that things like error monitoring and analytics can totally be logs, too. I kind of cheated in the code example, because there’s no mention of telemetry in it at all, but it turns out that if you hook it up to error monitoring like Sentry (above), run-time errors send the local variable context right to the dashboard, and you can see the database password in plaintext.&lt;/p&gt;
    &lt;p&gt;These causes tend to bypass the central logging pipeline and become Yet Another Place to have to worry about secrets.&lt;/p&gt;
    &lt;head rend="h3"&gt;🕺🏻 User input&lt;/head&gt;
    &lt;p&gt;Alright, last example. Say there’s a sign in form and the entire dev team made super duper sure that the password field is totally locked down from logging, they read this super awesome post, and took care of all the causes we discussed.&lt;/p&gt;
    &lt;p&gt;What happens?&lt;/p&gt;
    &lt;p&gt;Users end up jamming passwords into the username field!&lt;/p&gt;
    &lt;p&gt;So if you ever looked at login alerts for AWS and saw usernames replaced with &lt;code&gt;HIDDEN_DUE_TO_SECURITY_REASONS&lt;/code&gt;, this is precisely why!&lt;/p&gt;
    &lt;p&gt;Everything that’s within proximity to sensitive user input tends to be radioactive. It could be a UI issue, but users are surprisingly determined to volunteer secrets in ways that you haven’t prepared for.&lt;/p&gt;
    &lt;p&gt;We’ve touched on a half dozen causes, and the list of things goes on. We didn’t even talk about the wonder that is crashdumps. But, I think it’s important to zoom out and note that these are proximate causes.&lt;/p&gt;
    &lt;p&gt;I stand by my claim that there’s no silver bullet to take these all out. If we want to avoid playing whack-a-mole, we must bring out our lead bullets that address these issues at a deeper level, and prevent these kinds of things from happening.&lt;/p&gt;
    &lt;head rend="h2"&gt;Fixes (lead bullets)&lt;/head&gt;
    &lt;p&gt;So let’s dive in! We will survey 10 fixes, and the order we’ll go in is somewhere between “a dependency graph of things that build on each other” and “following the lifecycle of a secret.” Some of these are obvious or perhaps things you’re already doing, so I’ll focus more on fixes that I think might be a bit newer. That said, it is worth starting with the basics.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;📐 Data architecture&lt;/item&gt;
      &lt;item&gt;🍞 Data transformations&lt;/item&gt;
      &lt;item&gt;🪨 Domain primitives&lt;/item&gt;
      &lt;item&gt;🎁 Read-once objects&lt;/item&gt;
      &lt;item&gt;🗃️ Log formatters&lt;/item&gt;
      &lt;item&gt;🧪 Unit tests&lt;/item&gt;
      &lt;item&gt;🕵️ Sensitive data scanners&lt;/item&gt;
      &lt;item&gt;🤖 Log pre-processors&lt;/item&gt;
      &lt;item&gt;🔎 Taint checking&lt;/item&gt;
      &lt;item&gt;🦸 People&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;📐 Data architecture&lt;/head&gt;
    &lt;p&gt;Lead bullet #1 is the most basic and high-level: data architecture and understanding that this is primarily a data flow problem. And part of the solution is reducing the number of data flows and shrinking the problem space so you simply have less things to worry about and protect.&lt;/p&gt;
    &lt;p&gt;Instead of stray print statements or components that write directly to filesystem, you instead centralize all your data flows through a single stream. Make it so that there’s one and only one way to log something. If you can understand and control the data structures that enter that funnel, you can prohibit secrets from exiting it.&lt;/p&gt;
    &lt;p&gt;This has the allure of being a silver bullet, because of course if you can get to 100% of all the things we mentioned here, you’re golden! But in practice (and as we’ve seen previously), that’s difficult because secrets find a way to sneak in or new outflows and side channels are created.&lt;/p&gt;
    &lt;head rend="h3"&gt;🍞 Data transformations&lt;/head&gt;
    &lt;p&gt;The previous bullet was about controlling how data flows through your system, this is about transforming, slicing, and disarming that data into safer forms that can be logged. These are the data security fundamentals that you’re already familiar with and likely already doing. This is your bread and butter, so I’m not going to dive into every one. From top to bottom, this is generally arranged from awesome to meh&amp;amp;mldr; basically, by how much information is retained.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Transformation&lt;/cell&gt;
        &lt;cell role="head"&gt;Result&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Minimization&lt;/cell&gt;
        &lt;cell&gt;☁ (nothing)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Redaction&lt;/cell&gt;
        &lt;cell&gt;[redacted]&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Tokenization&lt;/cell&gt;
        &lt;cell&gt;2706a40d-3d1d&amp;amp;mldr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Hashing&lt;/cell&gt;
        &lt;cell&gt;daadfab322b59&amp;amp;mldr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Encryption&lt;/cell&gt;
        &lt;cell&gt;AzKt7vBE7qEuf&amp;amp;mldr;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Masking&lt;/cell&gt;
        &lt;cell&gt;··········&lt;code&gt;5309&lt;/code&gt;&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;On the top, we have data minimization. The best way to not log secrets, is to not have secrets to begin with! This is everything from going passwordless to fetching only the data you need.&lt;/p&gt;
    &lt;p&gt;Redaction is the next best thing. Blanking out the secret parts and before you pass objects around in memory.&lt;/p&gt;
    &lt;p&gt;Tokenization, hashing, encryption: these all have their pros, cons, and caveats. Like&amp;amp;mldr; are you even doing it correctly?&lt;/p&gt;
    &lt;p&gt;Dead last is masking. You leave parts of the secret intact. Maybe this works for you. Maybe it doesn’t. Maybe you go straight to jail 🤷&lt;/p&gt;
    &lt;p&gt;When these techniques work, they generally work well. But very often what happens is that they aren’t used or are used too late, after something is already logged. These have their places in our toolbox, but my claim again is one bullet isn’t enough.&lt;/p&gt;
    &lt;head rend="h3"&gt;🪨 Domain primitives&lt;/head&gt;
    &lt;p&gt;Let’s introduce lead bullet #3: domain primitives. Almost all the secrets you run across in codebases are encoded in-memory as string primitives, and I think that makes our jobs harder. Strings can be almost anything.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Strings: any sequence of bytes from&lt;/p&gt;&lt;code&gt;""&lt;/code&gt;to&lt;code&gt;"c̴̞̑ť̸͈̘̌ h̸͝ ̭̘̊ü̶̜̫̦̠͋̆͠ ļ̵̮̤̟̉̀͂ṹ̴̝̂🤷867-53-0999"&lt;/code&gt;&lt;/quote&gt;
    &lt;code&gt;const secret = "..."
&lt;/code&gt;
    &lt;p&gt;There’s very little about them——at compile time or run-time——that lets you know that it’s sensitive, dangerous to log, or somehow different than any other vanilla string.&lt;/p&gt;
    &lt;p&gt;The alternative is a concept I learned from the book Secure by Design, and I think it’s one of the most powerful concepts you can add to your codebase, for logs or anything else where you want to layer in security at a fundamental level.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Domain primitives: “combines secure constructs and value objects to define the smallest building block of a domain”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;code&gt;const secret = new Secret("...")
&lt;/code&gt;
    &lt;p&gt;You use them as basic building blocks that hold secret values, and they provide security invariants and guarantees that basic string primitives simply cannot.&lt;/p&gt;
    &lt;p&gt;It’s one of the easiest things you can do. If you shift from “any string can be a secret” to “secrets are secrets”, it makes things a lot easier to reason about and protect.&lt;/p&gt;
    &lt;head rend="h4"&gt;Compile-time&lt;/head&gt;
    &lt;p&gt;You can use these to great advantage at compile-time, giving developers immediate feedback right in their editors.&lt;/p&gt;
    &lt;p&gt;We can type a logging function (&lt;code&gt;log()&lt;/code&gt;) so that it never accepts secrets.
Then, we use some fetching function that returns secrets, typed as secrets (and
not as strings). If we try to log that secret, it will not compile. The type
system will not let you log this secret.&lt;/p&gt;
    &lt;code&gt;// Types
declare const brand: unique symbol;
type Secret = string &amp;amp; { [brand]: string }; // Branded type that extends string
type NotSecret&amp;lt;T&amp;gt; = T extends Secret ? never : T; // Type that excludes secrets

// Logging function
function log&amp;lt;T extends string&amp;gt;(message: NotSecret&amp;lt;T&amp;gt;) { ... };
&lt;/code&gt;
    &lt;code&gt;const message: string = "this is fine"; // 🧵 string primitive
const secretz: Secret = getSecret();    // 👈 domain primitive

log(message); // 👌 compiles!
log(secretz); // 💥 error!
&lt;/code&gt;
    &lt;quote&gt;
      &lt;p&gt;See this example in the TypeScript Playground.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;I’m omitting and glossing over a ton of details here, because I don’t want you to focus on the implementation or even TypeScript, for that matter. The salient point here is that instead of tossing secret strings around, you brand them as secret types, providing useful context to both compiler and developer.&lt;/p&gt;
    &lt;head rend="h4"&gt;Run-time&lt;/head&gt;
    &lt;p&gt;It’s really easy to get started, even with code that is functionally a no-op. This is basically the simplest form I can think of—an almost empty class:&lt;/p&gt;
    &lt;code&gt;class OpenAIToken extends String { /* that could be it! */ }

const token = new OpenAIToken(...);
&lt;/code&gt;
    &lt;p&gt;It’s supposed to represent OpenAI credentials, but it’s just using and extending basic language primitives. You can introduce these objects where secrets originate, like password fields or anytime you decrypt sensitive data fetched from the database. And then layer in behaviors and invariants for where they tend to end up. You progressively start introducing these at both sources and sinks, allowing you to control where secrets should or shouldn’t go. You can embed these into data structures so you know what contains secrets. And along the way, you increase the clarity and safety of your codebase: not only can you prevent these tokens from going into logs, you can make sure you’re sending them only to OpenAI and not to some other API by accident.&lt;/p&gt;
    &lt;p&gt;I think in the long run, domain primitives are the most powerful control we have because it makes our code secure by design, but it does take some time to get there. These can easily address the direct logging cause we discussed earlier, and with some modifications can help with many more.&lt;/p&gt;
    &lt;head rend="h4"&gt;Run-time: part deux&lt;/head&gt;
    &lt;p&gt;We can extend this and make it so that the default serialization behavior is redaction.&lt;/p&gt;
    &lt;code&gt;class Secret extends String {
    toString() { return "[redacted]" } // Override!
}
&lt;/code&gt;
    &lt;code&gt;const secret = new Secret("shhh!");
console.log(secret);
&lt;/code&gt;
    &lt;code&gt;Secret: "[redacted]"
&lt;/code&gt;
    &lt;p&gt;If you try to stuff this into logs, into JSON, into kitchen sinks, into error monitoring, wherever, it’ll always spit out the word “redacted”. You have to intentionally reach for the value.&lt;/p&gt;
    &lt;p&gt;Let’s take it further. We can create a custom class with an explicit &lt;code&gt;unwrap()&lt;/code&gt;
function:&lt;/p&gt;
    &lt;code&gt;class Secret&amp;lt;T&amp;gt; {
    constructor(private readonly value: T) {}
    toString() { return "[redacted]" } // Override serialization
    unwrap() { return this.value }     // Explicit getter function
}
&lt;/code&gt;
    &lt;p&gt;There’s so many things you can do here, like maybe you want to encrypt or zero it out in memory, because that’s in your threat model. You can take this as far as you need to or are comfortable with. We’ll take it just one step further.&lt;/p&gt;
    &lt;head rend="h3"&gt;🎁 Read-once objects&lt;/head&gt;
    &lt;p&gt;There’s a bit to unpack here, but these build off domain primitives in a very powerful way.&lt;/p&gt;
    &lt;code&gt;class Secret&amp;lt;T&amp;gt; {
    private locked = false;
    constructor(private readonly value: T) {}
    toString() { return "[redacted]" }

    /* @returns the sensitive value (once and only once) */
    unwrap() {
        if (this.locked) { throw new Error("already read") }
        this.locked = true;
        return this.value;
    }
}
&lt;/code&gt;
    &lt;p&gt;These objects wrap and keep the secret safe, until you actually need it. The code in the &lt;code&gt;unwrap()&lt;/code&gt; function is the crux: there’s a latch or
lock that activates after the secret is retrieved the first time. It goes into a
“locked” state, and any following reads result in an error that fails loudly.&lt;/p&gt;
    &lt;code&gt;const secret = getSecret();
const res = await authenticate(secret.unwrap()); // Proper usage

Logger.info(secret);          // [redacted]
Logger.info(secret.unwrap()); // 💥 Error!
&lt;/code&gt;
    &lt;p&gt;Once you get a secret (from user input, database, decryption, etc.) you wrap it in a read-once object immediately and keep it wrapped for as long as you can. And for its single, intended purpose, like using it for some kind of API authentication, you unwrap the value, use it, and then the object stays locked for good. This is surprisingly effective at preventing and detecting unintentional use. It addresses and disarms many of the proximate causes that we discussed earlier.&lt;/p&gt;
    &lt;p&gt;This object pairs extremely well with static analysis. Tools like CodeQL or Semgrep can help ensure that developers aren’t bypassing any safety guarantees.&lt;/p&gt;
    &lt;p&gt;These are generally high signal, especially when you have good unit test coverage. One drawback is that read-once objects, if handled incorrectly but not necessarily unsafely, could cause errors at run-time. But I think the tradeoffs are usually worth it, especially if you complement it with testing, static analysis, and taint-checking. Speaking of which&amp;amp;mldr;&lt;/p&gt;
    &lt;head rend="h3"&gt;🔎 Taint checking&lt;/head&gt;
    &lt;p&gt;I like to think of taint checking as static analysis with superpowers. I absolutely love it and the first time I used it, it was like someone just handed me a lightsaber. Quick review for the uninitiated: the general idea here is that you add taint to various sources (like database objects), and yell loudly if the data flows into certain sinks (like logs).&lt;/p&gt;
    &lt;p&gt;The red data flow trace on the right detects the secret flowing into logs. But the green path is fine, because the secret is tokenized. Let’s walk through a quick example: semgrep.dev/playground/s/4bq5L&lt;/p&gt;
    &lt;p&gt;On the left, we’ve marked a couple sources like decrypt and a database fetcher. We’ve also marked our logger as a sink, and the &lt;code&gt;tokenize()&lt;/code&gt; function as a
sanitizer.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;On the right in red, we can see that taint was created from the decrypt function, propagated through the &lt;code&gt;getSSN()&lt;/code&gt;function, and then flagged for going into the logs on line 18.&lt;/item&gt;
      &lt;item&gt;In blue, there’s a much shorter path where the user model from the database is tainted and then flagged for going into logs.&lt;/item&gt;
      &lt;item&gt;And then lastly, in green, we’re tokenizing the decrypted SSN, so it’s not flagging that it’s logged.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The idea that this is checking millions or more different data flows is the real magic part for me.&lt;/p&gt;
    &lt;head rend="h4"&gt;Awesome&lt;/head&gt;
    &lt;p&gt;Some of the strengths of taint analysis: obviously automation. Tracing these data flows is 100% a job for a machine. This can really help with domain primitives but also can be used standalone and can even key in on heuristics like variable names: for example, all variables containing “password”. You can tie this into all of your critical tools, from code review to CI/CD.&lt;/p&gt;
    &lt;p&gt;This is especially potent against kitchen sinks and embedded secrets, because those data structures can be tainted by secret values and checked accordingly.&lt;/p&gt;
    &lt;head rend="h4"&gt;Not awesome&lt;/head&gt;
    &lt;p&gt;Some personal opinions on drawbacks: I do feel like taint checking rules tend to be a bit difficult to write. I really, really like Semgrep, but I’m also not the biggest fan of YAML.&lt;/p&gt;
    &lt;p&gt;It also turns out that data flow analysis is an NP-hard problem so for large codebases and monorepos, you likely can’t run full taint analysis on every pull request or commit. Because it runs in CI/CD and as part of change management, when it works, it can prevent the introduction of insecure logging into the codebase.&lt;/p&gt;
    &lt;p&gt;But, like all of the lead bullets we’ve discussed and will discuss, they can miss. How can we handle that?&lt;/p&gt;
    &lt;head rend="h3"&gt;🗃️ Log formatters&lt;/head&gt;
    &lt;p&gt;Let’s say we made the mistake of logging too much data with our email service:&lt;/p&gt;
    &lt;code&gt;{
  tenantId: "52902156-7fb6-4ab0-b659-6b07b80cf89a",
  email: {
    subject: "Log in to your account",
    html: '&amp;lt;a href="https://acme.com/login/98fPm..."&amp;gt;Click here&amp;lt;/a&amp;gt; to log in!',
    from: "AcmeCorp &amp;lt;[email protected]&amp;gt;",
    to: "Darth Plagueis (The Wise) &amp;lt;[email protected]&amp;gt;",
    ...
  },
  response: {
    status: 200,
    originalRequest: {
      headers: {
        Authorization: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIi..."
      },
      body: '{"html": "&amp;lt;a href=\\"https://acme.com/login/98fP...\\"&amp;gt;Click..."}',
      ...
    }
    ....
  },
  ...
}
&lt;/code&gt;
    &lt;p&gt;We have a couple of our usual suspects here. Because we’re logging email contents, magic links show up in logs&amp;amp;mldr; twice! We’re also logging some kitchen sinks, like email metadata and the original request, so we have PII and authorization headers also in logs. But because this data is structured, if we can traverse these objects, it turns out that we can zero in on these leaks quite effectively.&lt;/p&gt;
    &lt;code&gt;{
  tenantId: "52902156-7fb6-4ab0-b659-6b07b80cf89a",
  email: {
    subject: "Log in to your account",
    html: '&amp;lt;a href="https://acme.com/login/REDACTED"&amp;gt;Click here&amp;lt;/a&amp;gt; to log in!',
    from: "AcmeCorp &amp;lt;[email protected]&amp;gt;",
    to: "REDACTED",
    ...
  },
  response: {
    status: 200,
    originalRequest: {
      headers: "REDACTED",
      body: '{"html": "&amp;lt;a href=\\"https://acme.com/login/REDACTED\\"&amp;gt;..."}',
      ...
    }
    ....
  },
  ...
}
&lt;/code&gt;
    &lt;p&gt;If we can introspect these objects, we can scan for dangerous substrings like our login links, and then drop or redact them. Or we can drop whole values, if we know that certain paths like &lt;code&gt;email.to&lt;/code&gt; are particularly dangerous. Fields like
&lt;code&gt;request&lt;/code&gt; or &lt;code&gt;headers&lt;/code&gt; tend to be risky objects that we can also remove. We can
even drop the whole log object if it doesn’t meet some admission criteria,
or—we can simply error out.&lt;/p&gt;
    &lt;p&gt;So, how and where do we deploy something like this? Most application loggers should have some type of middleware stack or pipeline, kinda like here on the right. These are typically configured for operations like converting objects into JSON, turning error objects into readable formats, or enriching logs by inserting useful context like network information. We can invert that, and instead of enriching with useful data, we can remove or redact sensitive data.&lt;/p&gt;
    &lt;code&gt;export const logger = createLogger({
  format: format.combine(
    transform(),
    handleErrors(),
    enrich(),

      redact(), // 👈 insert here!

    truncate(),
    jsonify(),
    ...
  ),
  ...
});
&lt;/code&gt;
    &lt;p&gt;This is a type of guardrail that helps catch many of the common problems we described previously, like request headers or config objects. I’ve used this with decent success and found that it works best as a rifle instead of a shotgun. Because it’s at the application tier, you can customize it for the type of data or context that each application handles. For example, we can make it so that any of our domain primitives that reach this layer are quickly detected and removed.&lt;/p&gt;
    &lt;p&gt;This is extremely cheap to introduce, but there are some trade-offs. It’s certainly more of a safety net than hard control, and a developer determined to bypass it, can and will. Steady state, I measured this at less than 1% of clock time, but there are some deeply unfortunate ways this can go wrong such as poorly written regexes and self-ReDoS.&lt;/p&gt;
    &lt;p&gt;More or less, these risks can be mitigated with solid unit-testing. Which leads us to&amp;amp;mldr;&lt;/p&gt;
    &lt;head rend="h3"&gt;🧪 Unit tests&lt;/head&gt;
    &lt;p&gt;Lead bullet #7: hooking into and using the existing test suite—that’s already there—to our advantage. We can use several of the tools we discussed, but instead of simply detecting or redacting secrets, we can ramp up the sensitivity in our test environment to fail or error loudly.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Technique&lt;/cell&gt;
        &lt;cell role="head"&gt;Prod&lt;/cell&gt;
        &lt;cell role="head"&gt;Test&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;🪨 Domain primitives&lt;/cell&gt;
        &lt;cell&gt;Redact&lt;/cell&gt;
        &lt;cell&gt;Error&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;🎁 Read-once objects&lt;/cell&gt;
        &lt;cell&gt;Error&lt;/cell&gt;
        &lt;cell&gt;Error&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;🗃️ Log formatters&lt;/cell&gt;
        &lt;cell&gt;Redact&lt;/cell&gt;
        &lt;cell&gt;Error&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;🕵️ Sensitive data scanners&lt;/cell&gt;
        &lt;cell&gt;Detect&lt;/cell&gt;
        &lt;cell&gt;Error&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;I’ll cover sensitive data scanners next, but many test suites are already set up to capture &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;, and so you can even point your scanners to
these capture buffers.&lt;/p&gt;
    &lt;p&gt;The takeaway here is that you can reap the same benefits of CI/CD and change management by catching unsafe code before it’s merged or deployed, but of course, you’re also dependent on coverage and if the right code and data paths are exercised.&lt;/p&gt;
    &lt;head rend="h3"&gt;🕵️ Sensitive data scanners&lt;/head&gt;
    &lt;p&gt;These are fairly blunt but effective tools that can discover and remove sensitive data. I’m actively going to avoid diving deep here, because it does seem like many teams and vendors focus on this as the solution. So instead, I’d like to pose a few questions that might help you reason about trade-offs:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Where and when in your logging pipeline is it most effective?&lt;/item&gt;
      &lt;item&gt;Is it a gate, in-line of the critical path, or does it scan asynchronously?&lt;/item&gt;
      &lt;item&gt;Do you simply want to detect or do you bias towards masking and redaction? How will your team handle and deal with false positives?&lt;/item&gt;
      &lt;item&gt;How far do the general, out-of-box rules take you? Can you tailor it specifically to your usage patterns?&lt;/item&gt;
      &lt;item&gt;Can you verify the credentials? Can that even keep up with log throughput?&lt;/item&gt;
      &lt;item&gt;And then perhaps what tends to be the long pole in the tent: what are the costs, and can you sample instead?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I think these tools tend to be better suited for defense-in-depth, because they presume that secrets made it into logs to begin with. They can help catch the more elusive causes we discussed like configuration changes or user input.&lt;/p&gt;
    &lt;head rend="h4"&gt;Sampling&lt;/head&gt;
    &lt;p&gt;A very brief segue into sampling. Logs tend to have a kind of power law distribution, where certain types of logs vastly outnumber others. And typically what you see is that log sources have static points in code, generally with the same type of data running through them. And so within each log type, scanning and finding a single true positive might be highly representative of that group.&lt;/p&gt;
    &lt;p&gt;And so you might run into a scenario where, given some global sample rate, you’re wasting a lot of work for high frequency logs and not even scanning lower frequency logs. I think a better alternative to a global sample rate is to aggregate logs by some heuristic like type or origin, and to ensure you hit some minimum threshold.&lt;/p&gt;
    &lt;p&gt;In practice, I’ve found this difficult or impossible to configure with out-of-box solutions. I’ve had to introduce additional infrastructure to help. And that’s our next lead bullet.&lt;/p&gt;
    &lt;head rend="h3"&gt;🤖 Log pre-processors&lt;/head&gt;
    &lt;p&gt;Second to last lead bullet, #9: log pre-processors. These sit between apps that emit logs, and the final data stores.&lt;/p&gt;
    &lt;p&gt;In the above example, something like Vector can receive and process logs from our microservices before dispatching them to DataDog or wherever logs end up. We can configure it to drop sensitive data in-place using many of the techniques we discussed before. And we can sample some subset of them and store them onto an S3 bucket, using a more powerful tool like Trufflehog or an LLM to catch and verify secrets.&lt;/p&gt;
    &lt;p&gt;The idea here is to process logs streams before they’re persisted. It doesn’t need to be Vector, chances are, you already have this existing infrastructure that’s used for deduping, aggregation, and dropping noisy debug logs. We can re-use it to prevent and detect secrets in logs. This pairs very well with sensitive data scanners that we discussed earlier, and might even unlock new ones you thought were out of reach.&lt;/p&gt;
    &lt;head rend="h3"&gt;🦸 People&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;“Human practitioners are the adaptable element of complex systems. Practitioners and first line management actively adapt the system to maximize production and minimize accidents.”&lt;/p&gt;
      &lt;p&gt;-Richard Cook, https://how.complexsystems.fail/#12&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Our last stop is people. Modern software is a complex system. And while people will write the code that accidentally introduces sensitive data into logs, they’re also the ones that will report, respond, and fix them. They’ll build out the systems and infrastructure that will keep these complex systems safe. And early on in your maturity story and before you’re able to build out secure-by-design frameworks, this is the lead bullet you’ll most likely use the most.&lt;/p&gt;
    &lt;p&gt;The most important message I want to convey here is that your security team isn’t alone, especially if you:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;educate your teammates on secure logging design&lt;/item&gt;
      &lt;item&gt;empower them to report and address these issues&lt;/item&gt;
      &lt;item&gt;and equip them with tools that get out of their way and helps them succeed.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Recap&lt;/head&gt;
    &lt;p&gt;Alright, so we’ve covered lead bullets that protect code, protect data, and protect logs:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;📐 Data architecture&lt;/item&gt;
      &lt;item&gt;🍞 Data transformations&lt;/item&gt;
      &lt;item&gt;🪨 Domain primitives&lt;/item&gt;
      &lt;item&gt;🎁 Read-once objects&lt;/item&gt;
      &lt;item&gt;🗃️ Log formatters&lt;/item&gt;
      &lt;item&gt;🧪 Unit tests&lt;/item&gt;
      &lt;item&gt;🕵️ Sensitive data scanners&lt;/item&gt;
      &lt;item&gt;🤖 Log pre-processors&lt;/item&gt;
      &lt;item&gt;🔎 Taint checking&lt;/item&gt;
      &lt;item&gt;🦸 People&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Some of these might work for you, some of these won’t, and some that we haven’t even mentioned could be a homerun for you. Maybe you have super tight control over your log schemas or maybe you’re using LLMs in a really neat and effective way. Or maybe you’re building or using a language that has first class support for controlling secrets.&lt;/p&gt;
    &lt;p&gt;These worked for me. I have some personal opinions on ones which are foundational, some that are powerful in the long-run, and some that are really easy to get started. But your story is different, so I’d like to zoom out and close out with a high-level, methodical strategy that you can apply for your security programs, and that we’ll apply and walk through with an example.&lt;/p&gt;
    &lt;head rend="h2"&gt;Strategy&lt;/head&gt;
    &lt;p&gt;Here’s a general strategy:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Lay the foundation&lt;/item&gt;
      &lt;item&gt;Understand the data ﬂow&lt;/item&gt;
      &lt;item&gt;Protect at chokepoints&lt;/item&gt;
      &lt;item&gt;Apply defense-in-depth&lt;/item&gt;
      &lt;item&gt;Plan for response and recovery&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I’m not shooting for a Nobel, here. You’re probably doing some of these already, and chances are, you have some type of playbook or process that looks just like this. The key idea here is to not miss the forest for the trees, and use these explicit steps to place our efforts where they’ll matter most. I’ll walk you through a hypothetical system and we’ll apply these in order.&lt;/p&gt;
    &lt;head rend="h3"&gt;0. Lay the foundation&lt;/head&gt;
    &lt;p&gt;Step zero is the foundation. Table stakes. This is like the base tier of Maslow’s hierarchy, and we need these before we try anything else.&lt;/p&gt;
    &lt;p&gt;Developing expectations, culture, and support is a must-have. They’re easy to ignore or forget about, but can make or break success. If you work at place that hasn’t addressed these in the past, it can be quite jarring or difficult to shift that mentality.&lt;/p&gt;
    &lt;p&gt;I don’t have a ton of advice here other than making sure your org is aligned on this. It’ll probably feel like it’s getting worse before it’s getting better, but that is a sign of progress. A great litmus test for a solid foundation is if developers will (or already have) come to you to report secrets they found in logs.&lt;/p&gt;
    &lt;p&gt;The second thing we’ll need is to decide is what we consider a secret to begin with. I, admittedly, used secrets and sensitive data interchangeably. This may not be the case for you. It doesn’t need to be perfect or comprehensive, and maybe it’s just a framework. But employees, especially the security team, need common understanding.&lt;/p&gt;
    &lt;p&gt;The third item is technical. If our logs aren’t structured or aren’t JSON, it’ll make this endeavor a lot more difficult. A lot of the techniques we discussed just won’t work. If we don’t have that central pipeline or there isn’t One and Only One Way to both dispatch and view logs, we’ll have to do a lot more lifting. We’ve seen a few ways that logs bypass this, but having a central pipeline should cover most of the bases.&lt;/p&gt;
    &lt;head rend="h3"&gt;1. Understand the data flow&lt;/head&gt;
    &lt;p&gt;With the foundation laid, the next best thing to do is to understand and chart out how secrets flow through your system. This is basically a Data Flow Diagram, and we’ll go through a fairly modest example.&lt;/p&gt;
    &lt;p&gt;On the left, we have users that visit some type of single-page web app. Requests and data flow through an application load balancer to several web application services running in containers. This is our core compute and where all the application code runs. Let’s assume that these are disparate microservices processing all types of data, some of which are considered secret. For the most sensitive data, they use KMS to encrypt and then store the ciphertext blobs in their respective database.&lt;/p&gt;
    &lt;p&gt;And then, applications use a standard logging library to emit to stdout, which gets shipped to CloudWatch and then forwarded to Datadog. That’s the final stop, and that’s where employees, devs, support staff, etc. can view them.&lt;/p&gt;
    &lt;p&gt;I highly recommend going through an exercise like this, because not only does it force you to understand the flows and boundaries of the system, if you spend time at each node and threat model it, you end up finding a bunch of unexpected ways and places that secrets make it into logs. For example&amp;amp;mldr;&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Front-end analytics! It turns out that secrets from things like form contents to session replays could end up getting sent to your user analytics platform.&lt;/item&gt;
      &lt;item&gt;And then what about our application load balancers? These ship their HTTP logs directly to CloudWatch, so we could be logging embedded secrets in URLs, and it’s totally bypassing our application tiers.&lt;/item&gt;
      &lt;item&gt;Last surprise: error monitoring! Let’s just say that some team wired up Sentry instead of DataDog for error monitoring, because of course they did, and now you have another stream of secrets in logs.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We could go further, and we haven’t even drilled into application architecture, but I think this is a good time to move from discovery to action.&lt;/p&gt;
    &lt;head rend="h3"&gt;2. Protect at chokepoints&lt;/head&gt;
    &lt;p&gt;The next step we want to take is to protect the chokepoints. And if some flow isn’t going through that chokepoint, like our rogue team that yeeted Sentry into prod, we fix it! We can get rid of Sentry and get that team onto the paved path of our logging pipeline.&lt;/p&gt;
    &lt;p&gt;We have a very clear chokepoint; a narrow path that most logs eventually flow through. Here’s where most of our lead bullets should go.&lt;/p&gt;
    &lt;p&gt;Here’s that chokepoint splayed out. I also added an upstream node to represent CI/CD, because that’s how code get into our apps. We can then put the bulk of our protective controls here on the critical path.&lt;/p&gt;
    &lt;p&gt;We can re-architect the app to use a single logging library and secure-by-default domain primitives. Then we could use those to build out and augment our static analysis, taint-checking, and unit tests. These give us a decent front-line defense for our logging pipeline.&lt;/p&gt;
    &lt;head rend="h3"&gt;3. Apply defense-in-depth&lt;/head&gt;
    &lt;quote&gt;
      &lt;p&gt;“Every preventative control should have a detective control at the same level and/or one level downstream in the architecture.” -Phil Venables, https://www.philvenables.com/post/defense-in-depth&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The third step is about adding depth to that defense, a concept we’re all familiar with. I really like how Phil Venables crystallizes what defense-in-depth means and I think he generally gives great advice. The idea is that our controls are not simply overlapping, but mutually supportive. Something’s always got your back.&lt;/p&gt;
    &lt;p&gt;Along this chokepoint we add our downstream components, in depth. Some are preventative, while some are detective.&lt;/p&gt;
    &lt;p&gt;We can add additional protections like tokenization and read-once objects. We can add the downstream tools like our custom log formatters, and employ various sensitive data scanners at different points. And then finally, we can educate and equip our team.&lt;/p&gt;
    &lt;p&gt;This is what defense-in-depth looks like to me, and I think this maximizes chances of success.&lt;/p&gt;
    &lt;head rend="h3"&gt;4. Plan for response and recovery&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Determine the scope&lt;/item&gt;
      &lt;item&gt;Restrict access&lt;/item&gt;
      &lt;item&gt;Stop the bleeding / ﬁx the source&lt;/item&gt;
      &lt;item&gt;Clean up all the places, e.g. indexes&lt;/item&gt;
      &lt;item&gt;Restore access&lt;/item&gt;
      &lt;item&gt;Do a post-mortem&lt;/item&gt;
      &lt;item&gt;Make it ~impossible to happen again&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;But, of course, if we do miss or if we manage to only detect vs. prevent, we should be prepared for response and recovery. You already know how to respond to incidents like this, so I won’t add much here, other than making sure you’re sticking to a playbook in the right order, pulling levers to restrict and restore access while you’re responding, as well as thinking about all the weird places secrets might persist in logs, like indexes.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;And that’s it. This is the culmination of our strategy, our work, and about 30 some minutes of blabber.&lt;/p&gt;
    &lt;p&gt;With a solid foundation and understanding of our data flows, we protected our chokepoints in-depth and kept secrets out of logs. We’ve also introduced a lot of other strong primitives that materially improve our security program. So is that it? Is the job done?&lt;/p&gt;
    &lt;p&gt;Well, no, because the data team wired up some ETL jobs that are now spewing secrets into data lake logs, because of course they did.&lt;/p&gt;
    &lt;p&gt;Like most things in security, the job often isn’t ever done. But we have the understanding, the tools, and a strategy to fight the next fight. Keeping secrets out of logs is in your hands.&lt;/p&gt;
    &lt;p&gt;*me&lt;/p&gt;
    &lt;p&gt;If you liked what you heard, or if you hated it, I’d love to hear your story. Please, reach out! Thanks! ✌️&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45160774</guid></item><item><title>How to make metals from Martian dirt</title><link>https://www.csiro.au/en/news/All/Articles/2025/August/Metals-out-of-martian-dirt</link><description>&lt;doc fingerprint="270d494f78a464bb"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Key points&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Swinburne and CSIRO researchers are investigating ways to produce native metals using materials found on Mars.&lt;/item&gt;
      &lt;item&gt;Martian settlements will require large amounts of metal that are difficult to ship from Earth.&lt;/item&gt;
      &lt;item&gt;The team have successfully produced iron using regolith simulant that mimics what is available on the Red Planet.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The idea of building settlements on Mars is a popular goal of billionaires, space agencies and interplanetary enthusiasts.&lt;/p&gt;
    &lt;p&gt;But construction demands materials, and we can't ship it all from Earth: it cost US$243 million just to send NASA's one tonne Perseverance Rover to the Red Planet.&lt;/p&gt;
    &lt;p&gt;Unless we're building a settlement for ants, we'll need much, much more stuff. So how do we get it there?&lt;/p&gt;
    &lt;p&gt;CSIRO Postdoctoral Fellow and Swinburne alum Dr Deddy Nababan has been pondering this question for years. His answer lies in the Martian dirt, known as regolith.&lt;/p&gt;
    &lt;p&gt;"Sending metals to Mars from Earth might be feasible, but it's not economical. Can you imagine bringing tonnes of metals to Mars? It's just not practical," Dr Nababan says.&lt;/p&gt;
    &lt;p&gt;"Instead, we can use what's available on Mars. It's called in-situ resource utilisation, or ISRU."&lt;lb/&gt; More specifically, Dr Nababan is looking at astrometallurgy — making metals in space.&lt;/p&gt;
    &lt;head rend="h2"&gt;Building an off-world foundry&lt;/head&gt;
    &lt;p&gt;As it turns out, Mars has all the ingredients needed to make native metals. This includes iron-rich oxides in regolith and carbon from its thin atmosphere, which acts as a reducing agent.&lt;/p&gt;
    &lt;p&gt;Swinburne University of Technology astrometallurgist, Professor Akbar Rhamdhani, is working with Dr Nababan to test this process with regolith simulant - an artificial recreation of the stuff found of Mars.&lt;/p&gt;
    &lt;p&gt;"We picked a simulant with very similar properties to that found at Gale Crater on Mars and processed them on Earth with simulated Mars conditions. This gives us a good idea of how the process would perform off-world," he says.&lt;/p&gt;
    &lt;p&gt;The simulant is placed inside a chamber at Mars surface pressure and heated at increasing temperatures. The experiments showed pure iron metal formation around 1000°C, with liquid silicon-iron alloys produced around 1400°C.&lt;/p&gt;
    &lt;p&gt;"At high enough temperatures, all of the metals coalesced into one large droplet. This could then be separated from liquid slag the same way it is on Earth," Professor Rhamdhani says.&lt;/p&gt;
    &lt;p&gt;Along with Dr Nababan, Prof Rhamdhani is collaborating with CSIRO's Dr Mark Pownceby to further advance the process. They're particularly focused on making metals with zero waste, where the byproducts of the process are used to make useful items.&lt;/p&gt;
    &lt;head rend="h2"&gt;If you can't ship it, make it&lt;/head&gt;
    &lt;p&gt;ISRU is a growing area of space science because in rocket launches, every kilogram counts. While the cost of launches is going down, the demands of human exploration are immense.&lt;/p&gt;
    &lt;p&gt;But huge developments are already happening, including the first demonstration of ISRU off-world. The MOXIE experiment on board the Mars Perseverance rover produced breathable oxygen using only the carbon dioxide in the planet's atmosphere.&lt;/p&gt;
    &lt;p&gt;Metal production is the next giant leap. Prof Rhamdhani hopes Mars-made alloys could be used as shells for housing or research facilities, and in machinery for excavation.&lt;/p&gt;
    &lt;p&gt;"There are certainly challenges. We need to better understand how these alloys would perform over time, and of course whether this process can be recreated on the real Martian surface," Prof Rhamdhani says.&lt;/p&gt;
    &lt;p&gt;But in the meantime, Swinburne and its partners are doubling down. Prof Rhamdhani together with Dr Nababan and Dr Matt Shaw, another CSIRO researcher and Swinburne alum, recently delivered a 4-day bespoke workshop on astrometallurgy in South Korea. The feedback was promising.&lt;/p&gt;
    &lt;p&gt;"We're starting to see increased interest in this field globally as the world gets serious about Mars exploration," he says.&lt;/p&gt;
    &lt;p&gt;"To make it happen, we're going to need experts from many fields — mining, engineering, geology, and much more."&lt;/p&gt;
    &lt;p&gt;For Dr Nababan, the benefits go beyond exploration. He hopes their research will also drive more efficient metallurgy here on Earth.&lt;/p&gt;
    &lt;p&gt;"By doing this, I wish that I can help the development of space exploration, and at the end it will bring good to human life here on Earth."&lt;/p&gt;
    &lt;p&gt;This was article is published from Swinburne University. Read the original article.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45161229</guid></item><item><title>No Silver Bullet: Essence and Accidents of Software Engineering (1986) [pdf]</title><link>https://www.cs.unc.edu/techreports/86-020.pdf</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45161556</guid></item><item><title>Everything from 1991 Radio Shack ad I now do with my phone (2014)</title><link>https://www.trendingbuffalo.com/life/uncle-steves-buffalo/everything-from-1991-radio-shack-ad-now/</link><description>&lt;doc fingerprint="7421b90d5be73a32"&gt;
  &lt;main&gt;
    &lt;p&gt;Some people like to spend $3 on a cup of coffee. While that sounds like a gamble I probably wouldn’t take, I’ll always like to gamble– especially as little as three bucks– on what I might be able to dig up on Buffalo and Western New York, our collective past, and what it means for our future.&lt;/p&gt;
    &lt;p&gt;I recently came across a big pile of Buffalo News front sections from 1991, every day for the first three months of the year… collected as the First Gulf War unfolded. $3. I probably could have chiseled the guy down a buck, but I happily paid to see what else was in those papers.&lt;/p&gt;
    &lt;p&gt;There’s plenty about a run up to the first Superbowl appearance ever for the Bills, and mixed in with the disappointment is an air of hope and expectation for what is to come. Harumph. There are also some great local ads commemorating and/or coat-tailing on the Bills success.&lt;/p&gt;
    &lt;p&gt;We’ll get to those someday, but today, something much simpler. The back page of the front section on Saturday, February 16, 1991 was 4/5ths covered with a Radio Shack ad.&lt;/p&gt;
    &lt;p&gt;There are 15 electronic gimzo type items on this page, being sold from America’s Technology Store. 13 of the 15 you now always have in your pocket.&lt;/p&gt;
    &lt;p&gt;So here’s the list of what I’ve replaced with my iPhone.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;All weather personal stereo, $11.88. I now use my iPhone with an Otter Box&lt;/item&gt;
      &lt;item&gt;AM/FM clock radio, $13.88. iPhone.&lt;/item&gt;
      &lt;item&gt;In-Ear Stereo Phones, $7.88. Came with iPhone.&lt;/item&gt;
      &lt;item&gt;Microthin calculator, $4.88. Swipe up on iPhone.&lt;/item&gt;
      &lt;item&gt;Tandy 1000 TL/3, $1599. I actually owned a Tandy 1000, and I used it for games and word processing. I now do most of both of those things on my phone.&lt;/item&gt;
      &lt;item&gt;VHS Camcorder, $799. iPhone.&lt;/item&gt;
      &lt;item&gt;Mobile Cellular Telephone, $199. Obvs.&lt;/item&gt;
      &lt;item&gt;Mobile CB, $49.95. Ad says “You’ll never drive ‘alone’ again!” iPhone.&lt;/item&gt;
      &lt;item&gt;20-Memory Speed-Dial phone, $29.95.&lt;/item&gt;
      &lt;item&gt;Deluxe Portable CD Player, $159.95. 80 minutes of music, or 80 hours of music? iPhone.&lt;/item&gt;
      &lt;item&gt;10-Channel Desktop Scanner, $99.55. I still have a scanner, but I have a scanner app, too. iPhone.&lt;/item&gt;
      &lt;item&gt;Easiest-to-Use Phone Answerer, $49.95. iPhone voicemail.&lt;/item&gt;
      &lt;item&gt;Handheld Cassette Tape Recorder, $29.95. I use the Voice Memo app almost daily.&lt;/item&gt;
      &lt;item&gt;BONUS REPLACEMENT: It’s not an item for sale, but at the bottom of the ad, you’re instructed to ‘check your phone book for the Radio Shack Store nearest you.’ Do you even know how to use a phone book?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You’d have spent $3054.82 in 1991 to buy all the stuff in this ad that you can now do with your phone. That amount is roughly equivalent to about $5100 in 2012 dollars.&lt;/p&gt;
    &lt;p&gt;The only two items on the page that my phone really can’t replace:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Tiny Dual-Superhet Radar Detector, $79.95. But when is the last time you heard the term “fuzzbuster” anyway?&lt;/item&gt;
      &lt;item&gt;3-Way speaker with massive 15″ Woofer, $149.95.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;It’s nothing new, but it’s a great example of the technology of only two decades ago now replaced by the 3.95 ounce bundle of plastic, glass, and processors in our pockets.&lt;/p&gt;
    &lt;p&gt;Buffalo story teller and Historian Steve Cichon brings us along as he explores the nooks and crannies of Buffalo’s past present and future, which can mean just about anything– twice a week on Trending Buffalo.&lt;/p&gt;
    &lt;p&gt;As he collects WNY’s pop culture history, Steve looks for Buffalo’s good stories and creative ways to tell them as the President and founder of Buffalo Stories LLC. He’d love to help your business tell its story. For a decade, he’s also collected and shared Buffalo’s pop culture history at staffannouncer.com. His latest book, Gimme Jimmy! The James D. Griffin Story, is available now at www.mayorgriffin.com.&lt;/p&gt;
    &lt;p&gt;steve@buffalostories.com | @SteveBuffalo | www.facebook.com/stevecichon&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45161816</guid></item><item><title>Taco Bell AI Drive-Thru</title><link>https://aidarwinawards.org/nominees/taco-bell-ai-drive-thru.html</link><description>&lt;doc fingerprint="be03308f8313374f"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Taco Bell AI Drive-Thru - “Hold the AI, Extra Chaos”&lt;/head&gt;
    &lt;p&gt;Nominee: Taco Bell Corporation for deploying voice AI ordering systems at 500+ drive-throughs and discovering that artificial intelligence meets its match at “extra sauce, no cilantro, and make it weird.”&lt;/p&gt;
    &lt;p&gt;Reported by: Isabelle Bousquette, Technology Reporter for The Wall Street Journal - August 28, 2025.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Innovation&lt;/head&gt;
    &lt;p&gt;Taco Bell boldly deployed voice AI-powered ordering systems across more than 500 drive-through locations, convinced that artificial intelligence could finally solve humanity's greatest challenge: efficiently ordering tacos. The company's confidence was so spectacular that they rolled out the technology at massive scale, apparently believing that voice AI had conquered human speech patterns, regional accents, and the creative chaos that occurs when hungry humans interact with fast food menus.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Reality Check&lt;/head&gt;
    &lt;p&gt;The Wall Street Journal revealed that customers were not quite as enthusiastic about their robotic taco consultant as Taco Bell had hoped. The AI systems faced a perfect storm of customer complaints, system glitches, and what might charitably be described as “creative user interaction”—including customers deliberately trolling the AI with absurd orders that would make even experienced drive-thru workers question their life choices.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Strategic Reassessment&lt;/head&gt;
    &lt;p&gt;Faced with mounting evidence that artificial intelligence and natural stupidity don't mix well at the drive-thru window, Taco Bell began “reassessing” their AI deployment. The company announced they were evaluating where AI is most effective and considering human intervention during peak periods—corporate speak for “our robots can't handle the breakfast rush and we're not sure why we thought they could.”&lt;/p&gt;
    &lt;head rend="h3"&gt;The Perfect Storm&lt;/head&gt;
    &lt;p&gt;This incident represents the collision of three unstoppable forces: corporate AI evangelism, the infinite creativity of hungry customers, and the fundamental reality that ordering food involves more chaos variables than training a large language model to play chess. Customers reported “glitches and delays”, while others were “intent on trolling the [AI] system” with absurd orders, proving that humans can out-weird artificial intelligence even when they're just trying to get a burrito.&lt;/p&gt;
    &lt;head rend="h3"&gt;Why They're Nominated&lt;/head&gt;
    &lt;p&gt;Taco Bell achieved the perfect AI Darwin Award trifecta: spectacular overconfidence in AI capabilities, deployment at massive scale without adequate testing, and a public admission that their cutting-edge technology was defeated by the simple human desire to customise taco orders. When The Wall Street Journal reports that “the most transformative technology in over a century may have finally found its limit: ordering tacos”, you've achieved a special kind of technological hubris that deserves recognition. Even more remarkably, despite this spectacular AI fail, Taco Bell is reportedly still moving forward with voice AI, which they say remains a critical part of the product road map—proving that true AI confidence means never letting reality interfere with your technological roadmap.&lt;/p&gt;
    &lt;p&gt;Sources: The Wall Street Journal: Taco Bell Rethinks Future of Voice AI at the Drive-Through&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45162220</guid></item><item><title>Creative Technology: The Sound Blaster</title><link>https://www.abortretry.fail/p/the-story-of-creative-technology</link><description>&lt;doc fingerprint="a50e953b59ba8d0d"&gt;
  &lt;main&gt;
    &lt;p&gt;Sim Wong Hoo was born on the 28th of April in 1955, the tenth child in a family of twelve children (five brothers, seven sisters). His family were Singaporean Hoklo with ancestry in the southernmost area of Fujian, China, and they spoke Hokkien. He grew up in a kampung called End of Coconut Hill in Bukit Panjang, and his father, Sim Chye Thiam, was a factory worker while his mother, Tan Siok Kee, raised chickens, ducks, pigs, and rabbits, and grew fruits and herbs. The young Sim had chores around the house and around the farm as soon as he was physically able, and he often sold eggs at the local market before school classes started each day. This afforded him the ability to buy things for himself such as his harmonica when he was about 11. The harmonica was a hobby he greatly enjoyed throughout his life. He also enjoyed making his own games.&lt;/p&gt;
    &lt;p&gt;Sim graduated from Bukit Panjang Government High School and then went on to attend Ngee Ann Technical College for engineering. At the college, Sim was a member of both the harmonica troupe, consisting of thirty people, and the Practice Theatre School. In the theatre, Sim provided musical accompaniment for the school’s performances with the harmonica and the accordion, often performing his own arrangements. His two interests collided at this time in his life. When writing or arranging music, he’d only be able to hear his composition during weekly practice. Having seen a computer, he realized that a computer could allow him to hear the music precisely as written while still working on it. Sim envisioned a computer that could play music, talk, or even sing, and his earlier entrepreneurial spirit drove him to an ambitious goal: selling 100 million units of a single piece of equipment. Sim graduated in 1975 and then entered the uniformed services for his obligatory two years.&lt;/p&gt;
    &lt;p&gt;For three to four years following his service, Sim worked a brief stint on an offshore oil rig, designing computerized seismic data logging equipment. After that, he opened a computer education center at Coronation Plaza. As he was more interested in teaching and researching, he left the business work to his business partner. This wasn’t a great decision. His partner took off with all the money.&lt;/p&gt;
    &lt;p&gt;On the 1st of July in 1981, Sim founded Creative Technology with Ng Kai Wa, who had been his childhood friend and classmate in a 440 sqft shop at Pearls Center using his own savings of around $6000. The company initially did computer repair and sold parts and accessories for microcomputers. Business wasn’t great, so Sim also did some teaching. In whatever time he had left to him, he was busy developing his own products.&lt;/p&gt;
    &lt;p&gt;The first Creative product (at least, for which I can find any evidence at all) was a memory board for the Apple II. Having an understanding of the Apple II, Creative followed their memory board by producing the CUBIC 99 in 1984. This was an Apple II compatible machine with a 6502, but it also featured a Zilog Z80 for compatibility with CP/M. I am not certain how this was arranged, but I imagine that it wasn’t entirely dissimilar to the Microsoft Z80 SoftCard. Of course, this is Creative Technology, so the machine also featured a voice synthesizer allowing users to record and playback words in English or Chinese. The computer also had an optional Cubic Phone Sitter which could make and answer calls. This was the first computer to be designed and manufactured in Singapore.&lt;/p&gt;
    &lt;p&gt;The market was moving quickly, and the IBM PC had created a standard. The CUBIC CT was released in 1986 as a PC compatible, and it featured graphics and sound capabilities. This was, essentially, a multimedia PC (with a weaker CPU than that standard would later dictate) localized in the Chinese language. Unfortunately, it was too early. With nearly zero software support for anything approaching the capabilities of the CT and an even smaller local market, the product was a failure.&lt;/p&gt;
    &lt;p&gt;Realizing that the sound features of the CUBIC CT were likely more salable and supportable than the computer itself, Sim and his company chose to sell the sound card by itself as the Creative Music System (also C/MS or CT-1300). This board was built around two Philips SAA1099 chips providing 12 channels of square-wave stereo sound on a half-length 8bit ISA card, and it shipped with five 360K 5.25 inch floppy disks (Master Disk, Intelligent Organ, Sound Disk 1, Sound Disk 2, Utilities). To promote this card, Sim moved to California in 1988 and established Creative Labs. His goal was to sell at least 20,000 cards generating $1 million in revenue. The USA was the largest PC market, and he knew that sound cards were seeing good sales.&lt;/p&gt;
    &lt;p&gt;Being in the USA, Sim quickly realized that games were the software titles driving sound card sales, and this meant that he’d need new branding and software partners. The C/MS became the Game Blaster, and the included software was now just the Intelligent Organ, a test utility, a TSR, and drivers for Sierra Online games. The inclusion of those drivers was key to what would follow. Creative’s partnership with Sierra meant that some of the most popular games of the era would support the Game Blaster; ultimately, over 100 games would support the C/MS and Game Blaster. Naturally, selling a card required a store front, and Creative found a partner in Radio Shack. While the Game Blaster sold better than any Creative product before it, it didn’t overtake the Adlib.&lt;/p&gt;
    &lt;p&gt;To better compete, Creative needing something that was better than the Adlib but still compatible with it. This came in 1989 with the CT1310, better known as the Sound Blaster. The Sound Blaster offered 12-voice C/MS stereo sound, 11-voice FM synthesis with Adlib compatibility (via the Yamaha YM3812), a MIDI interface, a joystick port, microphone jack with a built-in amplifier, a stereo amplifier with volume dial, the ability to play back mono-sampled sound at up to 22kHz, and record at 12kHz. While a sample rate of 22k doesn’t seem great (because it isn’t) this did allow simultaneous output of sound effects and music in a game. Likewise, while a game port doesn’t seem like all too big a deal, it saved the buyer an extra $50 to buy one separately, and it saved an ISA slot too. The Sound Blaster was the first sound card to feature digital sample playback, and it took over the market, quickly becoming the top-selling expansion card of any kind in under a year, and Creative’s revenues hit $5.5 million. With the C/MS never having been too popular, Creative followed the CT1310 with the CT1320 which removed the C/MS chips but kept sockets for them on the card.&lt;/p&gt;
    &lt;p&gt;1989 also saw Creative release the PJS operating system and the PJ Views word processor and desktop publishing system which included support for 70,000 Chinese characters. As far as I know, these products were only released in Southeast Asia.&lt;/p&gt;
    &lt;p&gt;Announced in May of 1991, the Sound Blaster Pro, CT1330, was a major redesign of Creative’s sound card. This card used two Yamaha YM3812 chips to provide stereo sound while maintaining full backward compatibility with the original Sound Blaster and Adlib. Sample rates were increased to 22kHz for stereo, 44.1kHz for mono. A simple mixer, low-pass filter, high-pass filter, and CD-ROM interface were added. This CD-ROM interface could take multiple forms, but it was useful in pushing CD-ROMs into the mainstream. Many early CD-ROM drives were SCSI-only and that was expensive. Creative worked with MKE in Japan to produce low-cost IDE CD-ROM drives, and then included support on their cards. As for the card itself, while the card did have the AT connector, it wasn’t 16bit. The Pro was still an 8bit card. The presence of the 16bit AT connector was for additional interrupts and DMAs on the 16bit bus that supported the Multimedia PC standard from Microsoft. The Sound Blaster Pro 2 was released shortly after the original, and it replaced the YM3812s with a single YMF262. The Pro series was often sold in Multimedia Upgrade Kits where it was bundled with a CD-ROM drive and software titles. Given that CD-ROMs were quite new, these kits often represented a significant value to consumers.&lt;/p&gt;
    &lt;p&gt;This card can also be found in Tandy Multimedia PCs as the Tandy Multimedia Audio Adapter. Immediately noticeable changes were from the regular joystick port to two mini-DIN connectors compatible with the Tandy 1000 joysticks, and the addition of a mini-DIN MIDI port. For both the joystick connectors and MIDI connector, adapters were required. A less noticeable change, the Tandy card used a different bus interface chip, the CT1346, and the output amplifier could be disabled via a jumper. Finally, the card featured a high-DMA channel allocated for audio which allowed 16bit 44.1kHz mono output in Windows.&lt;/p&gt;
    &lt;p&gt;The Sound Blaster 2, or Sound Blaster Deluxe, model CT1350 was released in October of 1991. This model improved the board layout allowing for a more compact card, and it completely eliminated the C/MS chips. This model improved on its predecessor by adding auto-init to DMA allowing the card to play continuously without the crackling or pausing that was experienced on the original. The sample rate for digital audio on this card was increased to 44kHz for playback and to 15kHz for recording. With this card, a DSP upgrade was made available to owners of the original Sound Blaster, which was required for full compatibility with the Windows 3 multimedia extensions.&lt;/p&gt;
    &lt;p&gt;Creative was growing quickly, achieving an estimated 72% market share of the sound card market globally in 1992, but it was also facing significant competition. Media Vision’s Pro Audio Spectrum Plus, released in 1991, was capable of 8bit digital sampling and 16bit digital audio playback. It featured a CD-ROM interface, and it was Sound Blaster compatible. The Pro Audio Spectrum 16 of 1992 moved the company to 16bit ISA, added 16bit stereo digital audio, and featured stereo FM synthesis while maintaining full Sound Blaster compatibility. Then, there was Aztech in the more low-end market making some serious OEM deals with likes of Dell and Compaq. They entered the market in 1992 at a much lower price point and offered broad compatibility with sound cards like the Adlib, Sound Blaster 2, Sound Blaster Pro, Cover Speech Thing, Disney Sound Source, and Windows Sound System.&lt;/p&gt;
    &lt;p&gt;To answer the competition and maintain their lead, the company released the Sound Blaster 16, CT1740, in June of 1992. This was a fully 16bit sound card and featured support for 16bit 44.1kHz digital audio. Creative had partnered with E-mu Systems to offer the Wave Blaster daughter board that brought wavetable synthesis to card through the header on the top of the card. The empty socket seen on the SB16 was for the Creative Signal Processor, CT1748, which brought hardware-assisted speech synthesis, QSound audio spatialization for digital wave playback, and PCM audio compression/decompression. The SB16 was more popular than any card before it, and the wavetable daughter board was popular enough to push Creative to acquire E-mu in March of 1993 for $54 million.&lt;/p&gt;
    &lt;p&gt;Creative went public in August of 1992 and became the first Singaporean company to be listed on the NASDAQ. In September of 1992, Creative expanded into China establishing a joint venture in Beijing called Chuang Tong Multimedia Computer Ltd. Creative held 70%, NewStone 20%, and Da Heng 10%. In addition to selling the company’s multimedia hardware, the Chinese subsidiary developed and distributed CD-ROM software in the Chinese language, and sold PJS and PJ Views. The following year, Ed Esber, formerly of Ashton-Tate, joined Creative Labs as CEO, and he assembled a team that included Rich Buchanan, Gail Pomerantz, and Rich Sorkin. Of the new team in the USA, Sorkin had the most lasting impact. He began licensing programs, shortened product development cycles, and began legal endeavors to protect Creative’s intellectual property. Throughout 1993, Creative established itself Australia, Japan, the UK, and Ireland. Finally, that same year, Creative acquired ShareVision Technology who made videoconferencing technologies. Creative’s later attempts in that market didn’t make it far.&lt;/p&gt;
    &lt;p&gt;By 1994, the Sound Blaster 16 was the audio card. The company needed both a low-end product and high-end product, and so the ViBRA 16, CT2501, took the low, and the AWE32 took the high. The ViBRA was a cost-reduced, single-chip implementation of the SB16 and was frequently supplied to OEMs. Some ViBRA models included an on-board modem. The AWE32 featured the CT1748 CSP, CT1747A with OPL3 FM synth, CT1971 (EMU8000) and CT1972 (EM8011, 1MB sample ROM) wavetable synth, CT1745A mixer, CT1741 DSP, a CD-ROM interface, wavetable header, SPDIF header, and 512K of sample RAM upgradeable to 28MB via two 30-pin SIMM slots. The AWE32, CT3900, was a full-length, 16bit, ISA card. With the SB16, ViBRA, and AWE32 on the market, the company’s revenues exceeded $650 million, and the company was listed on the Singapore stock exchange.&lt;/p&gt;
    &lt;p&gt;On the 26th of October in 1994, in time for the Christmas shopping season, Creative released the 3DO Blaster. This brought 3DO games to the PC via a full-length, 16bit, ISA card. On the card was a 32bit RISC CPU, a DSP for CD audio, two graphics processors, 2MB of RAM, 1MB of ROM, 1MB of VRAM, and 32K SRAM with battery backup. The box contained two games (Shockwave, Gridders), some demos, drivers, Aldus Photostyler and Gallery Effects, a controller, manuals, the card itself, and a registration card. Of course, the 3DO blaster was not, itself, a standard VGA card. To use the 3DO Blaster, one’s PC would need to be at least a 25MHz Intel 386, have at least 4MB of RAM, a VGA card, Windows 3.1, a CD-ROM drive (either Matsushita or Creative CR-564), a Sound Blaster, and some speakers. The press release from 3DO read, in part:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;With the introduction of 3DO Blaster, Creative is targeting their extensive installed base of CD-ROM users. 3DO Blaster provides PC owners with the ultimate game platform — exciting 3DO games recognized for unprecedented interactive realism, full-motion video, CD-quality audio and three-dimensional sound effects.&lt;/p&gt;
      &lt;p&gt;“Today’s announcement reflects the efforts of two of the most advanced technology suppliers, Creative Technology and 3DO. The 3DO Blaster provides the advantage of Creative’s and 3DO’s innovation to the installed base of PC’s already using Creative multimedia products,” said Sim Wong Hoo, CEO and chairman of Creative Technology Ltd.&lt;/p&gt;
      &lt;p&gt;“Creative’s and 3DO’s technologies create an advanced entertainment platform which will enhance the capabilities of PCs, and expand the imagination of users by providing them access to exciting, interactive products that fully exploit the potential of multimedia entertainment.”&lt;/p&gt;
      &lt;p&gt;Trip Hawkins, president and CEO of The 3DO Company, said today’s announcement enables his company to expand quickly and aggressively into the vast PC market. “Creative is the leading supplier of multimedia products for PCs, providing us with the opportunity to deliver 3DO’s advanced interactive technology to an even broader audience,” said Hawkins.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Given that the 3DO Blaster cost $399.95 and the 3DO console didn’t do too well, this product was moribund from the start.&lt;/p&gt;
    &lt;p&gt;Also in October of 1994, Creative released HansVision. This was a Chinese-language office suite for Windows, and while Windows replaced PJS, HansVision replaced PJ Views. Also in 1994, Creative acquired Digicom Systems, a modem company. This resulted in the Creative Phone Blaster in 1995. The Phone Blaster, CT3110, was largely just a ViBRA 16 with an integrated modem and a wavetable header, but it was a full-length, 16bit, ISA card. It faired better than the company’s attempts at video conferencing, but it wasn’t much of a success.&lt;/p&gt;
    &lt;p&gt;A cost reduced version of the AWE32 was released in 1995 as the Sound Blaster 32. It was roughly equivalent to the AWE32 but lacked the on-board RAM, Wave Blaster Support, and CSP. Additionally, it utilized the CQM chip from the ViBRA instead of the OPL3. The CQM (Creative Quadratic Modulation) commonly suffered audio clipping, hiss, and ringing when playing digital audio.&lt;/p&gt;
    &lt;p&gt;Esber, Buchanan, and Pomerantz left the company in 1995. They’d never really got on with the folks in Singapore, and the two groups had disagreements over the company’s strategy. Sorkin, however, was promoted to General Manager of the audio division, and then to executive VP of business development and corporate investments.&lt;/p&gt;
    &lt;p&gt;With the earlier success of the company’s CD-ROM and sound card bundles packing Matsushita, Mitsumi, and other vendors’ drives, Creative had gone into the CD-ROM drive business. In 1995, the industry had a large oversupply and Creative dumped its inventory incurring a loss of $30 million, and causing the company’s share price to drop nearly 75%.&lt;/p&gt;
    &lt;p&gt;In 1995, Creative released the 3D Blaster, CT6200. This was a 3D accelerator card built around the 3DLabs GLINT 300SX processor. The GLINT 300SX was built of about a million transistors on IBM’s 3.3V, 0.5 micron process, and it was capable of about 2.5 billion operations per second. As with many cards that would follow, GLINT was designed to process Gouraud-shaded, Z-buffered, dithered triangles that were generated by an application or game and passed to GLINT via the OpenGL API (in this case CGL, and later DirectX). The chip was accompanied by 2MB (or 4MB with the 2MB daughter board) of DRAM, and this VESA Local Bus card achieved a pixel filtrate of 25MP/s. The card cost $349.95 at launch and it only handled 3D, requiring the user to have a 2D card installed and use VGA passthrough. This was roughly a year before the first Voodoo card, but shortly after the Diamond Edge 3D with an NV1 at $299 for 2MB. Given that this was a VLB card, the 3D Blaster was largely a card for 486 machines, and given the price, it didn’t sell well. As far as I am aware, there were roughly 13 game titles to support CGL. Of those, there was Rebel Moon which was exclusive to the CT6200, and even having been designed exclusively for this card, it wasn’t great. Frame rates would get quite sluggish at times, likely having been hampered by the 486 at the heart of VLB machines.&lt;/p&gt;
    &lt;p&gt;The Sound Blaster AWE64 was released in November of 1996, and it improved on the AWE32 in a few ways. First, it increased the signal to noise ratio (especially in the Gold version), and increased component integration resulting in traces that likewise avoided noise. Given increases in integration, the board also became smaller than its predecessor and decreased cost. It’s also notable that with general technological advancements made in the industry, the ICs were of a consistently higher quality than those used in earlier cards despite being less expensive. The card came in two versions; one was the standard version which later was re-branded as the Value version (CT4500) with 512K RAM, and the other was the Gold version (CT4390) with 4MB of RAM, a 20bit DAC, and separate SPDIF output. Functionally, there were two major differences between the AWE64 and AWE32. The AWE64 added WaveGuide which synthesizes instrument sounds. While the Wave Blaster is no longer supported, the AWE64 Gold does have line inputs on the rear for an external Sound Canvas or similar product. Effectively, the WaveGuide feature allowed for greater polyphony through the use of 32 extra software-emulated channels, but in practice this used more CPU time and wasn’t very popular. The other change was the removal of 30-pin SIMM slots in favor of proprietary memory daughter boards. In all other respects, the AWE64 was simply a better AWE32. For purists, the AWE64 lacks Sound Blaster Pro compatibility and genuine OPL3 FM Synthesis, but for those who want SB16 compatibility, mostly noise-free output, hassle-free plug-n-play, and General MIDI capabilities, the AWE64 is wonderful. For collectors today, however, owning a genuine AWE64 Gold will set a buyer back between $200 and $400. That price will increase for those desiring a SIMMConn (replacing the proprietary memory daughter board with a 30-pin SIMM adapter).&lt;/p&gt;
    &lt;p&gt;Creative closed 1996 with $1.6 billion in revenues, and Sorkin left the company for Elon Musk’s Zip2.&lt;/p&gt;
    &lt;p&gt;Media Vision will get its own article at some point, but the company collapsed in a scandal, and Aureal Semiconductor was formed on the 9th of November in 1995 out of the prior company’s remnants. On the 14th of July in 1997, Aureal announced the Vortex AU8820 with high quality positional audio via the company’s A3D technology. This allowed a human listener to perceive audio as coming from a rather precise location, and it had originally been developed by Crystal River Engineering for NASA’s Virtual Environment Workstation Project. Crystal River had been acquired by Aureal in May of 1996, and Aureal productized the technology. The Vortex proved to be extremely popular and its features were supported by many of the most popular gaming titles of the time: Half-Life, Unreal, Quake II, and so on.&lt;/p&gt;
    &lt;p&gt;For Creative, the arrival of the Vortex card was existential. Most of the company’s revenues came from sound cards, and the Vortex had gained the respect of gamers and audiophiles almost immediately following its release. What was worse was that its feature set was being incorporated into games where once the Sound Blaster had been the de facto standard. The fastest way to gain expertise is to buy it, and Creative bought Ensoniq in January of 1998 for $77 million. Within Creative, Ensoniq was merged with E-mu Systems. The acquisition brought the Ensoniq AudioPCI into Creative, and this was a card intended to be cheap, functional, and feature rich. It supported digital effects such as reverb, chorus, and spatial enhancement, as well as DirectSound3D, and sample-based synthesis. For the new owner, the card couldn’t have been better as it support Sound Blaster compatibility through the use of a TSR despite being a PCI card. This card was rebranded several times as the Sound Blaster PCI 64, PCI 128, Vibra PCI and so on. The Ensoniq ES1370 that powered the card became the Creative 5507, and then revised into further AC97 variants. A major downside of the card was that it ran with a 44kHz sample rate only, and thus, audio recorded at any other rate was resampled which lowered fidelity and increased CPU time. The later AC97 variants supported only 48kHz natively, and therefore likewise resampled audio. While the AudioPCI wouldn’t win over audiophiles, its low cost moved units and won the company some OEM deals.&lt;/p&gt;
    &lt;p&gt;On the 20th of January in 1998, Creative chose to remedy the mistake it had made with their first 3D accelerator, and they released the CT6670, or 3D Blaster Voodoo2. It used the PCI bus, had 8MB of 25ns EDO RAM, and like all Voodoos, supported Glide. In September the same year, the company released the 3D Blaster Voodoo Banshee AGP card (CT6750) as well as the CT6760 PCI card. Depending upon the SKU, these could come with 8MB, 12MB or 16MB of SDRAM. While using the same name, the AGP card was designed entirely by Creative, and it was the only Creative board using a 3dfx chip to be so.&lt;/p&gt;
    &lt;p&gt;In July of 1998, Creative proved to be a leader in a different market segment with the introduction of HansVision Future 2000 in schools around Singapore. HVF2K featured the HansWord word processor, the HansBrowser bidirectional English-Chinese dictionary, and the HanSight online translator of webpages. Creative had successfully implemented productivity tools on the web, and they’d done machine translation of the web. Truly outstanding for the time.&lt;/p&gt;
    &lt;p&gt;Beginning in 1997, Creative Labs optical drive bundles began featuring DVD drives and speaker sets (thanks to the acquisition of Cambridge SoundWorks), and on the 10th of March in 1998 these products dropped in price rather dramatically and were expanded in their contents. One example, the Creative Components 700 (the most expensive on offer) included Creative’s PC-DVDx2 drive, Sound Blaster AWE64, the new Graphics Blaster Exxtreme (PCI, 3DLabs Permedia 2 chip, 4MB SGRAM, 64bit data path, OpenGL, up to 1600 by 1200, 60Hz to 150Hz refresh), Creative MPEG-2/Dolby Digital decoder board, and Cambridge SoundWorks’ PCWorks speaker system. This was priced at $479.99. The DVD-ROM drive was $149.99 stand-alone, and the decoder board was $169.99 stand-alone.&lt;/p&gt;
    &lt;p&gt;In August of 1998, Creative released the Sound Blaster Live! (CT4670) as a successor to the ViBRA range of sound cards. These were built around the EMU10K1 chip and supported DirectSound3D, EAX (Environmental Audio Extensions) versions 1 and 2, and featured an onboard, 64-voice, wavetable synthesizer though it did use main memory for sample storage. This was a PCI bus card, and it utilized Ensoniq’s TSR for the emulation of Adlib, Sound Blaster, and General MIDI (the adaptation of that TSR was a condition of the acquisition of Ensoniq).&lt;/p&gt;
    &lt;p&gt;1998 was a year of intense litigation for Creative. The first suit was filed by Creative against Aureal over MIDI caching patent infringements. This was followed by a counter claim of defamation and unfair competition by Aureal against Creative. Creative’s advertising of the Sound Blaster Live! then sparked more lawsuits by Aureal against Creative over claimed falsehoods. By the end of 1999, Aureal had won but had gone bankrupt as a result of legal costs. I am sure it cut quite deeply, but Creative acquired Aureal in September of 2000 for $32 million.&lt;/p&gt;
    &lt;p&gt;After 3dfx acquired STB, they began making their own cards. As a result, Creative began making, mostly, Nvidia-based cards for video and graphics. There were some exceptions. The Creative 3D Blaster Savage 4 obviously used the S3 Savage 4 chipset, and the Graphics Blaster Exxtreme used chips from 3DLabs. Possibly to prevent the sort of problem they’d had with 3dfx, Creative then acquired 3DLabs in June of 2002. From 1999 onward, Creative would release a handful of graphics cards, some did well and others didn’t, but they were no longer a substantial source of revenue for the company.&lt;/p&gt;
    &lt;p&gt;Creative had some great timing with one particular product. WinAmp brought MP3 support to the desktop in 1997, and Windows Media Player 5.2 gained MP3 support in 1998. Creative released the NOMAD MP3 player in April of 1999 for $429. In June of 1999, Napster was born, and MP3s exploded in popularity. The NOMAD connected to a user’s PC via a cradle, and that cradle attached to the PC via parallel port. The device had either 32MB or 64MB of battery backed RAM depending upon the model purchased, with more storage provided by flash media. The NOMAD also provided an FM tuner for those who wished to listen to radio, and a microphone for voice recordings. On the PC side of things, Creative provided both a CD ripper and the NOMAD Manager. The latter of which was for handling the transfer of content to the device. The box proudly claims that 64MB would provide an hour of CD-quality audio, and that’s… well… not true at all. MP3 encoding is quite lossy, and to compress 700MB of lossless CD audio into 64MB infers an incredibly low sample rate. An hour of audio in 64MB would absolutely not be “CD-quality.” Marketing aside, the NOMAD was a cool product.&lt;/p&gt;
    &lt;p&gt;The NOMAD II launched the following year, and it was well received by the press. This time, Creative used USB 1.1 instead of parallel, 32MB of internal memory, bundled 64MB Smart Media flash, and added EAX support, WMA support, a backlight for the LCD, a wired remote for controls, and slightly better microphone for voice recording. This was followed by the IIc which removed the FM tuner and offered either 64MB or 128MB of internal memory.&lt;/p&gt;
    &lt;p&gt;Creative released two further units in 2000, the NOMAD Jukebox and the NOMAD II MG. These also used USB. The II MG returned to the format of the original NOMAD, but it added equalizer presets, ID3-tag support, the wired remote, and the FM tuner returned and now featured. a sleep timer and recording. The NOMAD Jukebox was different. It was roughly the size and shape of a Discman, though slightly thicker, and had a 2.5 inch, 6GB, IDE hard disk in it. The Jukebox also had WAV support, line-in for recording, and two line-out jacks for four speaker systems like Creative’s own Cambridge SoundWorks four point surround. If NiMH batteries were being used, the Jukebox featured a DC jack, and it could charge those batteries. Given the use of spinning rust, battery life was just four hours. For adventurous folks today, the hard disk in this is upgradeable, but the disk didn’t have any identifiable partitions or formatting, and as a result the first 32MB need to be copied with something like &lt;code&gt;dd&lt;/code&gt; and then the drive inserted into the Jukebox and the format function used by holding the Play and Stop buttons (or EAX and Down on newer units) during the “loading” sequence.&lt;/p&gt;
    &lt;p&gt;Following the 2001 crash, Creative became an increasingly audio-only company. Some Chinese/English, electronic, pocketable dictionaries would continue in Asia, but most of Creative’s other endeavors ceased. The company was focused on speakers, headphones, sound cards, and portable music players.&lt;/p&gt;
    &lt;p&gt;US patent 6928433 was awarded to Creative on the 9th of August in 2005 for the user interface of the Zen and NOMAD Jukebox MP3 Players. This patent had been applied for on the 5th of January in 2001. Creative filed suit against Apple in May of 2006, and the two companies reached a settlement in August with Apple agreeing to pay $100 million.&lt;/p&gt;
    &lt;p&gt;Time wasn’t kind to Creative. Motherboard audio had become good enough for most people, and fewer than a quarter of desktop users bought dedicated sound cards. Worse, the shift to laptops during the first decade of the new millennium meant that a majority of PC users couldn’t make use of a sound card. Creative voluntarily delisted from the NASDAQ with the last day of trading having been the 31st of August in 2007. The company continued to be listed on SGX-ST. Layoffs of some staff in Stillwater, Oklahoma followed in 2008.&lt;/p&gt;
    &lt;p&gt;In 2009, 3DLabs and Creative’s Personal Digital Entertainment divisions were combined and reformed as ZiiLABS. This division designed a series of semi-custom ARM chips with 24 to 96 processing units called StemCells. These StemCells were sort of DSPs, and video, audio, and 3D graphics tasks were handled by these coprocessors. ZiiLABS produced at least five SKUs: ZMS-05, ZMS-08, ZMS-20, ZMS-40, and ZMS-50. On the 19th of November in 2012, Creative announced that they’d licensed ZiiLABS technology and patents to Intel for $20 million, and they sold engineering resources and assets to Intel for $30 million. Creative stated in the announcement that they’d retained the patents themselves. The ZiiLABS website was online through 2023, but it later went dormant with a default tomcat page in 2024, and the domain is no longer active. From 2012 forward, the website hadn’t been updated.&lt;/p&gt;
    &lt;p&gt;Today, Creative is led by Freddy Sim (Sim Wong Hoo’s brother), Tan Jok Jin is the executive chairman, and Ng Kai Wa is vice chairman. The company’s 2024 net sales stood at $62.8 million (12% increase over 2023) with $59.4 million of that being due to audio, speakers, and headphones. The company reported a net loss of $11 million for 2024, down from $17 million in 2023. The company continues to sell Sound Blaster products including both internal and external sound cards, DACs, and amplifiers. Their speakers, headphones, and headsets sell well and have won the company some awards.&lt;/p&gt;
    &lt;p&gt;Creative rose to dominate the sound card market at a time when there weren’t many options. They made an excellent product, marketed well, and made solid relationships with software makers. The primary issue for the company was that their entire business was built around a single product category, and their attempts to break out of that category weren’t successful. With video cards, they were right on time with a decent product, but the Voodoo was superior. They pivoted and survived that transition only to have 3dfx abandon board partners. They then moved to MP3 players, saw some success, but were beaten by Apple. Today, the company continues in the same niche they once dominated, and they continue to make excellent sound cards. They are simply a much smaller company. Among retro-tech enthusiasts, however, the Sound Blaster 16, Pro, and AWE64 continue to have loyal fans.&lt;/p&gt;
    &lt;p&gt;My dear readers, many of you worked at, ran, or even founded the companies I cover here on ARF, and some of you were present at those companies for the time periods I cover. A few of you have been mentioned by name. All corrections to the record are sincerely welcome, and I would love any additional insights, corrections, or feedback. Please feel free to leave a comment.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45162501</guid></item><item><title>Taking Buildkite from a side project to a global company</title><link>https://www.valleyofdoubt.com/p/taking-buildkite-from-a-side-project</link><description>&lt;doc fingerprint="2f55911511a62ddc"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Taking Buildkite from a Side Project to a Global Company&lt;/head&gt;
    &lt;head rend="h3"&gt;How an Australian developer turned his frustration with CI tools into a 13-year journey that redefined developer tooling.&lt;/head&gt;
    &lt;p&gt;👋 Welcome to Valley of Doubt, a free weekly newsletter that goes deep into founder stories from the early days of startups. 🚀&lt;/p&gt;
    &lt;p&gt;Keith Pitt is the co-founder and former CEO of Buildkite, a devtools company that started in Melbourne and grew to have some of Silicon Valley’s biggest companies as clients.&lt;/p&gt;
    &lt;p&gt;In this interview we dig into:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Starting Buildkite as a side project&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Running out of money and having to go back to investors&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;The challenges of growing into a venture capital valuation&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Finding your product voice&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Scott Handsaker (SH): Tell me who Keith Pitt is in 30 seconds or less.&lt;/p&gt;
    &lt;p&gt;Keith Pitt (KP): I'm a dad with three kids. I'm someone who loves to explore with his hands and code, and I love exploring ideas.&lt;/p&gt;
    &lt;p&gt;It's no surprise that I ended up in developer tools. Before I was a programmer, I was a magician doing magic shows. That's all about pleasing people, bringing joy and excitement to someone's day, subverting expectations and having them walk away with a memorable experience of something you spent a lot of time working on.&lt;/p&gt;
    &lt;p&gt;Developer tools is the closest I can get to being a magician in programming, because I get to please my peers, help them be better, and bring a little magic to their day.&lt;/p&gt;
    &lt;p&gt;I don't consider myself an entrepreneur. I never have, even though I do entrepreneurial things. I consider myself more of an inventor. The way that I like to figure out if my inventions are any good is by selling them, because I feel like the only true way to determine if something is of value is if someone's bought it.&lt;/p&gt;
    &lt;p&gt;SH: Is the “inventor” identity something that you carry with you throughout your life?&lt;/p&gt;
    &lt;p&gt;KP: Yeah, I think so. I like making stuff, whether it’s Lego with the kids or software for developers. I have a mad Lego collection, but I make something and then just pull it apart and put it in a box because I don't like displaying Lego. I like making it.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Accidental Beginning&lt;/head&gt;
    &lt;p&gt;SH: Tell me how you got started with Buildkite.&lt;/p&gt;
    &lt;p&gt;KP: It was a side project of a side project. I started building an email transaction API like Mailgun. I needed some CI for it, and at work we were transitioning off Travis CI. My personal requirements collided with my work requirements and I thought, I'll quickly just bust something out. Years earlier I’d written a CI tool just for fun, so I dusted that off.&lt;/p&gt;
    &lt;p&gt;At the same time, PIN Payments launched in Australia. It was sort of the first time in Australian development history where you could charge for something on the internet without messing around with PayPal or getting a merchant account and SOAP APIs. It was a REST API to charge credit cards.&lt;/p&gt;
    &lt;p&gt;Because I'm a commercially minded inventor, I packaged up Buildkite. I spent my evenings working on it, and I wasn’t really building it to make money. I was just building it for me and what I thought was good.&lt;/p&gt;
    &lt;p&gt;I'd go to work and show my peers, "Hey, what do you think of this?" Little did I know that I was testing product-market fit. I thought I was just working on something that I liked.&lt;/p&gt;
    &lt;p&gt;SH: When did you know you had something people wanted?&lt;/p&gt;
    &lt;p&gt;KP: I eventually strapped a credit card system on there and put it on the internet. People I knew bought it to start with, but then one company bought it that I didn't know from Europe. I think they were called Moneybird. I was like,&lt;/p&gt;
    &lt;p&gt;"Who the hell are these people?"&lt;/p&gt;
    &lt;p&gt;That's when I knew I had something that people wanted.&lt;/p&gt;
    &lt;p&gt;SH: How did pricing evolve?&lt;/p&gt;
    &lt;p&gt;KP: I started at $5, $30, and $100 a month. Just classic SaaS tiers.&lt;/p&gt;
    &lt;p&gt;I remember I was walking back from lunch and I got a ping on my phone that someone had upgraded to $500 a month. That was a moment of pure joy for me because this particular customer knew who I was, but they had believed in me. There's a lot of people telling you no throughout the whole journey, and so part of that whole experience was just ignoring people that didn't believe in you.&lt;/p&gt;
    &lt;p&gt;When that enterprise customer came through, it was the first moment that I felt like someone else believed in me. That's when I knew I would be okay.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Bootstrap Years&lt;/head&gt;
    &lt;p&gt;SH: Were you still working at Envato at that point?&lt;/p&gt;
    &lt;p&gt;KP: I was doing Buildkite after hours because my wife was studying to be a social worker at the time. I would do my day job and come home and work on Buildkite in the evenings. The work at Envato was super easy. I was on a green fields project, but my creative itches weren't being scratched at work.&lt;/p&gt;
    &lt;p&gt;I needed someone that could support my Buildkite work. I wanted to do one day a week on Buildkite, but Envato weren't too keen on a part-time position. So I ended up leaving Envato and going to work at PIN Payments. They were cool with me working four days a week.&lt;/p&gt;
    &lt;p&gt;SH: At what point did the co-founders come into it?&lt;/p&gt;
    &lt;p&gt;KP: I was two years in and still solo. I remember the moment it started. I was on Twitter and one of my competitors had announced they'd raised some money and I was really pissed off because I thought,&lt;/p&gt;
    &lt;p&gt;"Why can't I raise money? Why is no one giving me money?"&lt;/p&gt;
    &lt;p&gt;I tweeted something salty and Matt Allen from the Ruby community replied. He said, "You can raise money. I'll show you." So I started applying for accelerator programs. All of them knocked me back because they didn't want to support first-time founders. This was 13-14 years ago when the Australian startup ecosystem was pretty small and risk tolerance was basically non-existent.&lt;/p&gt;
    &lt;p&gt;They were like, "You have to find a co-founder." I went co-founder hunting but couldn't really find one. I had this weird romantic relationship with bootstrapping and going at it alone.&lt;/p&gt;
    &lt;p&gt;At that same moment, I asked Tim Lucas, who I was working with at PIN, "Hey man, can you make me a new logo for Buildkite?" Instead of making me a logo he said, "How about I be your co-founder instead?"&lt;/p&gt;
    &lt;p&gt;I said, "Okay." That was basically what it was.&lt;/p&gt;
    &lt;head rend="h2"&gt;The First Raise and Growing Pains&lt;/head&gt;
    &lt;p&gt;KP: Matt Allen helped us raise 200 grand from people we didn't know. Just a bunch of rich people, some of whom I still have not met to this day. We quit our jobs, paid ourselves 80 grand a year, and just worked on becoming profitable.&lt;/p&gt;
    &lt;p&gt;We built things and sold them, tried marketing, and made enough money to hire someone. We did this until we were 15 people, just rinse and repeat. Grow the bank balance, increase revenue, hire people.&lt;/p&gt;
    &lt;p&gt;SH: You mentioned it was a hard slog during those years. Do any particular moments stand out?&lt;/p&gt;
    &lt;p&gt;KP: I ran out of money. I stuffed up big time. In Australia you have to pay employees superannuation, and no one told me that superannuation payments were quarterly. I thought I was doing the right thing by using our cash to pre-buy EC2 instances, and then a couple weeks later our external accounting firm told me, "Super's due".&lt;/p&gt;
    &lt;p&gt;I thought, "Oh, we don't have enough money."&lt;/p&gt;
    &lt;p&gt;But I wasn't that scared because I had a plan. I thought, "Why not be open about it?" because it would probably help. I was completely open about it and said to the team, "All right, so here's the situation, but here's what we're going to do."&lt;/p&gt;
    &lt;p&gt;I converted a bunch of customers to annual payments, went back to investors for loans, and did some invoice advances. It was about 100 grand to see us through until we got R&amp;amp;D tax credits and bigger invoices.&lt;/p&gt;
    &lt;p&gt;SH: What did you learn from that experience?&lt;/p&gt;
    &lt;p&gt;KP: Cash flow is an art form in and of itself. It's not just the bank balance. It's the bank balance at any one moment in time. At that point the game changed for me to making sure that I don't run out of money. That's the number one thing.&lt;/p&gt;
    &lt;p&gt;Don't run out of money and do whatever it takes to not run out of money. Buildkite took a long time to bloom and blossom, but if we had run out of money earlier on, I might have just given up.&lt;/p&gt;
    &lt;p&gt;Brought to you by Murmar&lt;/p&gt;
    &lt;head rend="h2"&gt;Finding the Third Co-founder&lt;/head&gt;
    &lt;p&gt;SH: How did Lachlan join as the third co-founder?&lt;/p&gt;
    &lt;p&gt;KP: Lachlan joined a couple years in as a late-stage co-founder. I wasn't precious about the titles. When he joined, I thought if he does what we think he's going to do, the company that exists will be just as much of his creation as mine.&lt;/p&gt;
    &lt;p&gt;The reason he joined was that Tim and I didn't really know what we were doing. We had a good sense of how to navigate, but we didn't know big company enterprise stuff and were still thinking small fry. Lachlan really helped us charge lots of money.&lt;/p&gt;
    &lt;p&gt;I didn't have the confidence to walk into a customer and say, "This is $30,000," but Lachlan did.&lt;/p&gt;
    &lt;p&gt;That's probably the biggest gift he gave the company. He gave us the confidence to ask for more.&lt;/p&gt;
    &lt;p&gt;I didn't realise at the time that by having such a low price point, people weren't taking us seriously. For us to charge more, we had to really believe in ourselves. To walk into a company and say, "This is $100,000" with a straight face and truly believe it in your soul.&lt;/p&gt;
    &lt;p&gt;SH: How did you handle the dynamics between three founders?&lt;/p&gt;
    &lt;p&gt;KP: It's always hard when each of you want to be the CEO. I think all of us wanted a little bit of it, and that was super hard to navigate.&lt;/p&gt;
    &lt;p&gt;I gave the role away twice. I started as CEO, but I was the CEO of one person and I never really liked the title. I gave it to Tim because I was struggling with it. I always thought I wasn't doing what I thought that role was supposed to be. I was too invested in the product, too invested in customers, and wasn't interested in budgets or back office stuff.&lt;/p&gt;
    &lt;p&gt;Later on Lachlan took it over. I struggled with that because I always thought I could do a good job of it, but I wasn't ready to take the title and really own it.&lt;/p&gt;
    &lt;p&gt;It wasn't until a couple years later that I personally gained the confidence to say, "I'm the CEO." When I eventually could do it, I think I did a pretty good job because I learned I needed to be the sort of CEO that I was. I couldn't be trying to replicate something I thought in my head.&lt;/p&gt;
    &lt;p&gt;I decided I was a product-centric CEO, and when I owned that, that's when I started to flourish in the role. If we were selling brake pads, you'd want the person in charge to be an expert on brake pads. If we're selling developer tools, the person in charge should be an expert on developer tools.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Series A and Growth Challenges&lt;/head&gt;
    &lt;p&gt;SH: Tell me about the first major funding round.&lt;/p&gt;
    &lt;p&gt;KP: In 2019 we raised a Series A of $28 million. The reason we did that was because I wanted to buy a house. I had previously been to the bank for a home loan and every bank rejected me. I was too risky because Buildkite's finances were largely US revenue, and my finances were Buildkite's finances.&lt;/p&gt;
    &lt;p&gt;A lot of that Series A round was taken out as secondaries. Everyone who had invested the original 200 grand in the seed round got their money back plus some. I had enough money to buy a house, and only a few million went into the company as rainy day money.&lt;/p&gt;
    &lt;p&gt;SH: What did you learn about taking VC money?&lt;/p&gt;
    &lt;p&gt;KP: We effectively chose the one that gave us the highest valuation and a clean term sheet. At the time it was awesome because it meant we could sell less of our company for more money, but no one really tells you what happens if you go in at a high valuation early on.&lt;/p&gt;
    &lt;p&gt;If you're given a high valuation, you're not worth that at the moment. They're pricing you based on what they think you're going to be worth. You effectively need to grow into the valuation, and if you don't then in your next round, you end up with a down round.&lt;/p&gt;
    &lt;p&gt;It made the next round much harder. We hadn’t grown fast enough to justify the valuation, so the next round was effectively flat. No one warns you about that.&lt;/p&gt;
    &lt;p&gt;I think we were naive going into that transaction. We always painted the picture of being a long-term sustainable business, and our position on that never changed. We weren't building something to sell. We were building something that would last forever. The VCs gave us money even though we said those words, but I think in their mind they were hoping we would change.&lt;/p&gt;
    &lt;p&gt;Once you take big VC money, expectations change. They want big results, and we were still behaving like 37signals.&lt;/p&gt;
    &lt;p&gt;Eventually I realised that if we’re going to play the enterprise game, we have to play it properly. That meant raising again, and building the team to go after bigger customers.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Transformation: Embracing Sales&lt;/head&gt;
    &lt;p&gt;SH: What changed when you took over as CEO the second time?&lt;/p&gt;
    &lt;p&gt;KP: When I took over CEO, I really embraced having a sales team. Up to that point, Buildkite didn't have a sales team. I used to have this romantic relationship with the Atlassian approach, who famously had never had a salesperson. In reality they did have salespeople, they just called them something different.&lt;/p&gt;
    &lt;p&gt;The biggest learning from hiring a salesperson was that there is a certain dance you need to have with customers during a sale, and you want someone whose job it is to do that tango.&lt;/p&gt;
    &lt;p&gt;We hired a salesperson and built a sales team, and tripled revenue in a couple of years through doing that.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Product Philosophy That Almost Came Too Late&lt;/head&gt;
    &lt;p&gt;SH: Buildkite is well known for being a much-loved product in the developer community. Tell me about your product development process.&lt;/p&gt;
    &lt;p&gt;KP: It took me nine years to figure out my product voice. I read a book by Rory Sutherland called Alchemy. It was a book on marketing, but weirdly enough, this marketing book helped me find my product voice.&lt;/p&gt;
    &lt;p&gt;I had a lot of stuff that was just instinct and gut, but I never figured out how to turn that gut into something actionable or a set of product principles. Reading this book helped me find that voice.&lt;/p&gt;
    &lt;p&gt;I remember the day I showcased to the company,&lt;/p&gt;
    &lt;p&gt;"Hey, I finally figured out what I've struggled with all this time."&lt;/p&gt;
    &lt;p&gt;I did a three-hour presentation to the company, and I think everyone hated it. Everyone hated it because so many people disagreed with the principles.&lt;/p&gt;
    &lt;p&gt;SH: What were some of those principles?&lt;/p&gt;
    &lt;p&gt;KP: Here's a great example: don't listen to customers. Listen to them, but don't listen to them. What I learned is that when a customer comes to you with a problem, they come to you with a cry for help disguised as a feature request. You have to ignore the feature request and get at their problem.&lt;/p&gt;
    &lt;p&gt;Ninety-nine percent of the time, they've had some configuration issue somewhere else, 10 steps earlier, that's led them to this point where they've fucked it up so badly that they need something to solve that.&lt;/p&gt;
    &lt;p&gt;A feature request is not a feature request. It's a cry for help. That was difficult for a lot of people to unwind in their head, but that principle helped a lot.&lt;/p&gt;
    &lt;p&gt;Another principle: I always wanted developers to be treated as humans, not robots. Just look at any error message in any developer tool. It's probably obscure and shit. One of the magical parts of Buildkite was that I spent a lot of time taking what the developer would give me, and interpreting it to be what they actually meant.&lt;/p&gt;
    &lt;p&gt;You have to have pure empathy for the user. You're almost like a parent because you can't always give them what they want. You can easily just add all these checkboxes and make everyone happy, but you pay for it later with a million checkboxes.&lt;/p&gt;
    &lt;p&gt;SH: Why do you think the team reacted negatively?&lt;/p&gt;
    &lt;p&gt;KP: I think I should have packaged up my principles differently or had a different approach. They were pretty black and white, quite dogmatic. It was like, "This is how it is." Anyone receiving that would probably not like being told "this is the way it is from now on."&lt;/p&gt;
    &lt;p&gt;At that moment, I realised the company I had was somewhat incompatible with that. I should have spent more time thinking about that stuff before going on mass hiring.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Hard Truth About Hiring and Culture&lt;/head&gt;
    &lt;p&gt;KP: There's something not a lot of founders talk about because maybe they're scared about it, but in industry there's this thing called culture fit that people get wrong all the time.&lt;/p&gt;
    &lt;p&gt;If you hire too many different people with different work styles, different wants, different needs, different approaches, different ideas, different values, different ethics, then everything becomes hard mode.&lt;/p&gt;
    &lt;p&gt;I wish I had gone back and been more involved in hiring. I would have opted more for culture fit. I would have been more bullish and precise: here is the type of person we want, let's go find that type of person.&lt;/p&gt;
    &lt;p&gt;At some point in hiring you get exhausted and you just hire the person who's at the top of the pile, even if they might not match who you wanted. You think, "We need somebody, so we just get them." That's a trap I see a lot of founders fall into, and it has major repercussions over time.&lt;/p&gt;
    &lt;p&gt;When I'm starting my new company, Unreasonable Magic, I'm being very strict about who I let in, way more exclusionary this time around. Teams that build products aren't a party. It's a set of inventors and makers, and you need everyone on the same wavelength.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Board Dynamics and Exit&lt;/head&gt;
    &lt;p&gt;SH: How did having a board change the way you operated?&lt;/p&gt;
    &lt;p&gt;KP: I personally struggled with board stuff. The board was heavily American, and they were all operators who were used to working at a particular pace. I wasn't at that pace, and I couldn't help but feel that I was always letting them down. Not going fast enough.&lt;/p&gt;
    &lt;p&gt;Board work at some point becomes theater, and I struggle with that. I struggle with having to put on a show for a board. I was always struggling to find the balance between how do I get the most out of these smart people versus how is this not just a press conference? I never figured it out.&lt;/p&gt;
    &lt;p&gt;The thing about boards is they have a lot of control, but these people think about your company for only a couple of hours a month. That was super tough because you care a thousand percent, and they care, but they only care for a couple of hours.&lt;/p&gt;
    &lt;p&gt;SH: You have since moved on from Buildkite. Can you talk about your exit?&lt;/p&gt;
    &lt;p&gt;KP: I worked on Buildkite for 13 years, and the hardest part about leaving was that I didn't get to see what happened next. It was almost like I left halfway through a season of a TV show, and there were all these characters and stories and threads I never got to see the ending to.&lt;/p&gt;
    &lt;p&gt;Whenever any founder exits a company, so much of that company is them, so you're leaving a part of yourself. The biggest struggle I've had since leaving is that no one's ever going to care as much about the thing as you did.&lt;/p&gt;
    &lt;p&gt;It's like when you have an electrician come to your house. Sometimes they don't vacuum up as much as you would. You're always going to find that extra wire or bit of gyprock because it's not their house. Your company is your house.&lt;/p&gt;
    &lt;p&gt;No exit is good enough for any founder after a 13-year thing. It's almost an impossible task to try to figure out how to exit someone from a company after 13 years gracefully.&lt;/p&gt;
    &lt;head rend="h2"&gt;What's Next: Unreasonable Magic&lt;/head&gt;
    &lt;p&gt;SH: What's next for you with Unreasonable Magic?&lt;/p&gt;
    &lt;p&gt;KP: I've got 13 years of ideas to explore. Where I'm focusing my energy is on programming. A lot of programmers like programming, as they like to code. The rise of coding tools fundamentally changes the relationship you have with the work, more than anything in the history of programming.&lt;/p&gt;
    &lt;p&gt;A lot of programmers who would program and get fulfilment out of it have become managers of a coding machine. Whenever I have a day of using Claude or similar tools, I walk away feeling dumb and empty. It's like popcorn. It's not a real meal, it's not feeding your soul.&lt;/p&gt;
    &lt;p&gt;Unreasonable Magic is about how can we take these tools and make you feel fulfilled? How can we let you be as productive as using a coding assistant but also feel that you are the boss, that you walk away smarter at the end of a coding session?&lt;/p&gt;
    &lt;p&gt;It's that doing-the-opposite thing again where everyone's trying to be more productive, but for me it's not about productivity. It's about relationships to the code.&lt;/p&gt;
    &lt;p&gt;Programming is thinking. When I'm writing code, I'm thinking about how each line will be executed, what happens if this line goes wrong. You just don't get that same level of intimacy with the program when you use coding assistants because they can whip out so much code so quickly.&lt;/p&gt;
    &lt;p&gt;The products I built with Claude are worse than without them because I use programming as a way to think and interact with the problem. When you're coding, you're deeply invested in the problem you're solving, getting intimate with the problem. With AI tools, it's surface level. It's a one-night stand with a problem versus a deep and meaningful relationship.&lt;/p&gt;
    &lt;p&gt;Claude certainly makes me more productive, but at what cost? You're paying with the knowledge you would have learned from interacting with the problem.&lt;/p&gt;
    &lt;head rend="h2"&gt;The 3 easy questions&lt;/head&gt;
    &lt;p&gt;SH: What’s a book we should all read?&lt;/p&gt;
    &lt;p&gt;KP: Alchemy by Rory Sutherland. It’s the book that helped me find who I am. That book changed more about Buildkite than I can list out.&lt;/p&gt;
    &lt;p&gt;SH: What is a band or artist that we should all listen to?&lt;/p&gt;
    &lt;p&gt;KP: Uhmm, I like beatboxing.&lt;/p&gt;
    &lt;p&gt;SH: Do you beatbox yourself?&lt;/p&gt;
    &lt;p&gt;KP: Oh gawd no. But there is this band I like, and the song is called Candy Thief. It’s K-pop. I probably listen to that song on repeat every day.&lt;/p&gt;
    &lt;p&gt;SH: What is a podcast we should all listen to?&lt;/p&gt;
    &lt;p&gt;KP: I listen to Conan O’Brien Needs A Friend. If I’m working all day, I feel like it's important for me to make sure my brain goes somewhere else at the end of the day. And Conan O'Brien is just a very silly human.&lt;/p&gt;
    &lt;p&gt;SH: Amazing. Thanks for your time Keith, and good luck with Unreasonable Magic!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45162593</guid></item><item><title>Intel Arc Pro B50 GPU Launched at $349 for Compact Workstations</title><link>https://www.guru3d.com/story/intel-arc-pro-b50-gpu-launched-at-for-compact-workstations/</link><description>&lt;doc fingerprint="eb89172991b96df2"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Intel has officially expanded its professional GPU portfolio with the launch of the Arc Pro B50, designed specifically for small-form-factor workstations. The card is based on the Battlemage BMG-G21 GPU, configured with 16 Xe2 cores. It comes paired with 16 GB of GDDR6 VRAM clocked at 14 Gbps on a 128-bit memory bus, producing 224 GB/s of effective bandwidth. This configuration ensures that the GPU cores are properly fed while maintaining a low overall power draw. Intel has kept the total board power at 70 W, enabling the card to run entirely from the PCIe slot without external connectors. With a PCIe Gen 5 x8 interface, the Pro B50 balances efficiency and bandwidth for professional workloads. One of the key features of the Arc Pro B50 is its suitability for AI workloads and specialized professional applications. Intel claims performance of up to 170 TOPS in INT8 compute, which is significant for local AI inference tasks, machine learning workloads, and data preprocessing. Beyond AI, the GPU is optimized for CAD, engineering, architectural visualization, and design software, where stability is just as important as raw throughput. To meet these needs, Intel supplies a certified workstation driver stack, ensuring predictable performance across industry-standard applications. The physical design reflects its target environment: the card uses a low-profile dual-slot form factor, making it ideal for dense workstation cases that prioritize both space savings and airflow efficiency. &lt;/p&gt;
      &lt;p&gt;Display connectivity is handled via four mini DisplayPort outputs, which support multi-monitor setups critical for professional users who often work with complex datasets or design layouts. By providing flexibility in display configuration while maintaining a small footprint, Intel positions the Arc Pro B50 as a versatile tool for both AI and visual workflows. The emphasis is not on competing with high-end workstation GPUs in sheer raw power, but on striking a balance between price, efficiency, and reliability in scenarios where compact workstations are used.&lt;/p&gt;
      &lt;p&gt;With an MSRP of $349, Intel has aimed for the Arc Pro B50 to be an accessible entry into the workstation GPU segment. The card will be distributed both as a standalone retail product and through OEM workstation systems. At launch, early reviews from outlets such as HardwareLuxx, Phoronix, and Igor’s LAB indicate that the card delivers consistent results within its targeted workloads, rather than focusing on gaming performance. As Intel continues to invest in both consumer and professional graphics solutions, the Arc Pro B50 demonstrates a focus on specialized, compact, and power-efficient GPU offerings that broaden its reach in the professional computing market.&lt;/p&gt;
      &lt;p&gt;Source: Techpowerup&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45162626</guid></item><item><title>The demo scene is dying, but that's alright</title><link>https://www.datagubbe.se/sceneherit/</link><description>&lt;doc fingerprint="f641d011dffaaaad"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;The Demo Scene is Dying, But That's Alright&lt;/head&gt;
    &lt;p&gt;Autumn 2025&lt;/p&gt;
    &lt;p&gt;The demo scene was recently proclaimed a UNESCO Living Cultural Heritage in Sweden, following several other European nations. As a scener, I'm not quite sure how I feel about that. It's amusing on some level, there's maybe even a bit of pride involved, but also fear that it might bring unwanted attention to a Good Thing, because Good Things are always at risk of spoiling when receiving too much attention. Then again, such worries are probably unfounded. Despite being a living cultural heritage, the demo scene is - all things considered - slowly approaching its demise.&lt;/p&gt;
    &lt;head rend="h3"&gt;The Scene Isn't Dead&lt;/head&gt;
    &lt;p&gt;The scene - incorporating the cracking scene of the 1980s and early 1990s - has been declared dead several times over since the late 1980s. Some claimed the Amiga would kill it, others that the PC would destroy its soul or that the Internet would rob it of its essence. This is to be expected: In a subculture - which is what the scene is - there's typically going to be elders lamenting the changing of the old ways, and newcomers eager to bring their own ideas into the mix.&lt;/p&gt;
    &lt;p&gt;Except... That last part might no longer apply to the scene. Examine photos from a late 1980s rave party and they'll show a bunch of young people partying hard. Fast forward in time and look at photos from a 2025 rave party, and the concept remains basically the same, but there's now a different bunch of young people partying hard. When performing the same experiment on the scene, there's close to zero teenagers among 2025 demo party attendants. Look closer and it becomes evident that many of the 2025 attendants are in fact the very same persons as the teenagers and twenty-somethings appearing in party photos from 1989.&lt;/p&gt;
    &lt;p&gt;Some subcultures are regularly replenished or revived, whereas others are not. The scene seems to fall distinctly into the latter category: With few exceptions, most active sceners - even those who create demos for modern gaming PCs - belong to the home computer generation, meaning people who remember the heydays of Commodore, Atari, Amiga and MS-DOS.&lt;/p&gt;
    &lt;head rend="h3"&gt;High Effort, Low Reward&lt;/head&gt;
    &lt;p&gt;Like most subcultures, the scene grew out of a mix of unique circumstances at a very particular point in time; specifically, the advent of affordable but primitive home computers, lack of accessible digital mass communication, and limited cultural precedent.&lt;/p&gt;
    &lt;p&gt;I believe that all subcultures need a bit of gatekeeping in order to retain their original soul - the more accessible they are, the easier it is to turn them into exploitable markets. Punks, hippies and mods have all been removed from their original context, ground through a mainstream cultural filter, and repurposed for consumerism: A convenient way of selling brand apparel to identity-seeking middle class youth hungry for something, anything, ostensibly genuine.&lt;/p&gt;
    &lt;p&gt;The scene, on the other hand, is a perfect example of a subculture that's hard to repackage for sale: It lacks apparent external traits, such as a particular fashion, a specific style of music and - especially considering how common computers are today - any uniquely defining equipment.&lt;/p&gt;
    &lt;p&gt;Combined with its shadier activities - cracking games, software piracy, postage fraud and phreaking - the scene was always on the introverted side. Decidedly anti-commercial and without tangible and marketable artifacts, corporate interest was and is usually limited to a few sponsors at really large demo parties, and using the scene as a recruitment pool for game developers. Apart from the time and effort required to build scene skills, computers and other traditionally geeky hobbies were decidedly low status in the schoolyard pecking order during the formative years of scene culture. Hence, there was very little potential reward in pretending to be someone who hunkered down in front of a CRT all weekend, trying to move a sprite across the screen. And, let's be frank, it never did attract very many girls.&lt;/p&gt;
    &lt;p&gt;Thus, unlike other skill-based subcultures with a bigger mainstream appeal and a more pronounced aesthetic - such as skateboarding - the effort required to be accepted by the in-group and the low potential of reward from the out-group, means the scene has never interested posers in any significant numbers. It simply never became cool, and, consequently, still remains well out of view from establishment actors. I happen to like it that way.&lt;/p&gt;
    &lt;head rend="h3"&gt;Still Not Mainstream&lt;/head&gt;
    &lt;p&gt;There are regular discussions on the scene about how to attract new talent, because newcomers are nowadays few and far between. I believe the effort to get listed as a living cultural heritage is, in some way, part of a desire to rejuvenate the scene and keep the culture alive. Time will tell if it's successful - I have serious doubts.&lt;/p&gt;
    &lt;p&gt;It's not that it's hard to get accepted on the scene, especially not these days. Talk of lamers and elites is now just self-referential irony, and the cracking scene is much farther removed from demo making than ever before. The mystery of what a demo actually is has been well documented, not least on Wikipedia, and examples are prevalent on easy access platforms like Youtube. To partake, all that's required is (preferably) going to a demo party, talking to people, and bringing something to the table. Congratulations - you are now a scener!&lt;/p&gt;
    &lt;p&gt;If measured in number of active participants, the scene peaked somewhere during the early 1990s, when parties like Assembly, The Party and The Gathering attracted visitors in the thousands. Since then, attendance has dwindled, and has proven hard to increase again despite various outreach initiatives.&lt;/p&gt;
    &lt;head rend="h3"&gt;Kill All Audio and Lights&lt;/head&gt;
    &lt;p&gt;During the latter half of the 1990s, big demo parties started attracting people almost exclusively interested in playing networked games at scale, effectively visiting parties to use the digital infrastructure they provided. In theory, this could have been an opportunity for the scene to grow, gaining a natural venue for showcasing itself to a new audience apparently interested in computers. In reality, few gamers made the leap, and subcultural differences instead created friction. Sceners were annoyed by gamers disturbing the demo competitions with loud music and other disruptive behavior, and ticket prices went up due to increased demand. Some events were completely taken over by gamers: Dreamhack started as a small demo party and is now a global LAN party franchise. Eventually, sceners simply retreated to other venues, in a natural and uneventful split.&lt;/p&gt;
    &lt;p&gt;There are still hybrid events, but the biggest, most popular and influential parties are once again exclusive to the scene - not by actively banning a certain category of visitors, but by simply organizing and marketing scene events in a way that makes them inherently uninteresting for the average LAN party visitor.&lt;/p&gt;
    &lt;p&gt;Arguably successful hybrids, such as what Assembly has transformed into, has more or less compartmentalized the scene in order to protect it from the otherwise completely dominating and highly commercialized mix of e-sports, cosplay and live music acts. During the 1990s, many big parties offered cash prizes, and Assembly is as far as I know the last one that still does. In an outreach effort, they've also introduced a compo segment specifically for beginner sceners and this does seem to attract a number of first releases each year. A positive sign, though I personally feel a bit squeamish about keeping money in the mix: the vast majority of productions released, even during the peak party years, were never created for winning money, but because it was fun.&lt;/p&gt;
    &lt;head rend="h3"&gt;Why Grow?&lt;/head&gt;
    &lt;p&gt;For most sceners, the scene was a part of their formative teenage years. Lasting friendships, life-long skills and creative exploration is the stuff of fond memories, and our pursuits are still a source of much joy. It's only natural to want to share this positive experience with others. Some seem to think the scene could still be a potential talent pool, lamenting the lack of new scene recruits for low level programming jobs and game development. And, of course, it might be comforting to see a cultural legacy carried on: a validation of your own life choices. However, as heartwarming as it is to see new, younger talents appear on the scene, the slow trickle appears to be well below meaningful replacement levels: we're very far from the hundreds or even thousands of youngsters that once hiked across Europe to fill giant convention centers.&lt;/p&gt;
    &lt;p&gt;What makes rejuvenation hard is that many of the things that once gave the scene its special allure are simply gone. There are no longer home computers offering a fixed hardware platform for exploring, sharing and creating on equal footing. Spreading digital creations is cheap and easy on an Internet taken for granted. Affordable yet immensely powerful computers have opened up entirely new creative avenues, unhindered by the technical limitations that once upon a time forced the essence of demos to become what it is. And, of course, the scene is no longer new and exciting, but filled with middle-aged grown-ups.&lt;/p&gt;
    &lt;head rend="h3"&gt;Degrowth&lt;/head&gt;
    &lt;p&gt;The scene grew organically through devoted and creative people, hell-bent on doing their own thing without the involvement of clueless adults, corporate incentives or detailed career prospects. It was and remains, first and foremost, about challenging yourself and sharing a passion. It's not the scene's responsibility to supply the software industry with capable developers, and it's certainly not the responsibility of today's teenagers to fill the ranks of a peculiar hacker niche - one based on unwritten rules thought up four decades ago by a bunch of old fogeys who are, to a large extent, still farting around with MS-DOS, 6510 CPUs and blitter chips.&lt;/p&gt;
    &lt;p&gt;There are other venues today where kids can experiment, learn and build a social context around their activities - probably ones where clueless adults can be kept at arm's length. If they want to join the scene, let them - but above all, let them find their own thing, invent their own creative ways, and let them enjoy doing so.&lt;/p&gt;
    &lt;p&gt;As for me, I'm fine with the seemingly unavoidable, generational death of the scene. I crave no subcultural legacy, no future audience for my present creative pursuits. I'm just happy to be left alone in my narrow little niche, enjoying it with like-minded individuals, far from the scrutiny of commercial interests and other potential threats to our Good Thing.&lt;/p&gt;
    &lt;p&gt;And if a significant number of kids do, in fact, eventually pick up the scene torch? Well, I just hope they'll have fun, too.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45162803</guid></item><item><title>Formatting code should be unnecessary</title><link>https://maxleiter.com/blog/formatting</link><description>&lt;doc fingerprint="2658533aba372ff4"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Formatting code should be unnecessary&lt;/head&gt;and we knew this back in the 80s&lt;p&gt;I had a (maybe slightly overqualified) computer science teacher back in highschool, Mr. Paige. He worked on the Ada compiler and has been programming since the early 80s.&lt;/p&gt;&lt;p&gt;One day I complained about linter tooling that was driving me nuts. I said something to the effect of, "it's 2016, how are we still dealing with this sort of thing?"&lt;/p&gt;&lt;p&gt;Turns out, that problem was solved four decades ago (well, three at that point). Back when he was working on Ada, they didn't store text sources at all — they used an IR called DIANA. Everyone had their own pretty-printing settings for viewing it however they wanted.&lt;/p&gt;&lt;p&gt;We've been debating some linter settings at work recently and I keep thinking back to Mr. Paige. It's 2025, how are we still dealing with this sort of thing?&lt;/p&gt;&lt;p&gt;Well, to answer that it would help to know what we're missing.&lt;/p&gt;&lt;p&gt;I believe he was working with the Rational R1000, of which there isn't a ton of info (like all things Ada, it was used by the DoD):&lt;/p&gt;&lt;p&gt;The R1000 had a lot of bleeding-edge features: incremental compilation, semantic analysis, version control, and first-class debugging all built-in. It was a workstation similar to the Xerox Alto but using Ada instead of Smalltalk.&lt;/p&gt;&lt;p&gt;DIANA (Descriptive Intermediate Attributed Notation for Ada) was a key component of Ada that enabled a lot of the more advanced features.&lt;/p&gt;&lt;p&gt;Taken from Experiences with Code Generation (1984)&lt;/p&gt;&lt;p&gt;Instead of storing plain-text source code, the R1000 wrote DIANA. The compiler and the IDE built into the machine both understood DIANA too, so you could view the source however you wanted. Spaces vs. tabs didn't matter because neither affects the semantics and the editor on the system let you modify the program tree directly (known today as projectional editing).&lt;/p&gt;&lt;p&gt;Grady Booch summarizes it well:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;R1000 was effectively a DIANA machine. We didn't store source code: source code was simply a pretty-printing of the DIANA tree.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;Imagine that. No wasted time due to formatting discussions or fighting linters, without forcing everyone into the same editor setup (looking at you, eslint-config-airbnb).&lt;/p&gt;&lt;p&gt;And there were other benefits:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Using DIANA with hardware acceleration made it possible to do incremental compilation (unheard of at the time, for strongly typed languages), easy refactoring (though that word had not yet been invented), and incredibly fast integration (essential for the large systems that we being built with Ada).&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;Today, we don't need to worry about hardware-accelerated compilation (hopefully), and we have better tools for refactoring (thanks, Claude). But with formatting, we regressed. I'm not advocating for everyone to use projectional editing and a live environment (although I think they're awesome and we should be exploring them more), but surely we can figure out something that fits into todays programming paradigms.&lt;/p&gt;&lt;head rend="h3"&gt;Further reading&lt;/head&gt;&lt;p&gt;This post was meant to be me saying "it'd be easier if we just pushed minified code", but I had too much fun researching the R1000 during it. Here are some of the documents I looked at:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Experiences with Code Generation (1985): https://www2.eecs.berkeley.edu/Pubs/TechRpts/1985/CSD-85-249.pdf&lt;/item&gt;&lt;item&gt;Ada Compiler Validation Summary Report: Rational Environment (1985): https://apps.dtic.mil/sti/tr/pdf/ADA157830.pdf&lt;/item&gt;&lt;item&gt;Grady Booch's blog post about the 5th anniversary on Rational's acquisition (2008): https://web.archive.org/web/20160304051102/https://www.ibm.com/developerworks/community/blogs/gradybooch/entry/rational_anniversary?lang=en#pagePlaceBar&lt;/item&gt;&lt;/list&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45163043</guid></item><item><title>Using Claude Code to modernize a 25-year-old kernel driver</title><link>https://dmitrybrant.com/2025/09/07/using-claude-code-to-modernize-a-25-year-old-kernel-driver</link><description>&lt;doc fingerprint="fe903b5f08a4bbc9"&gt;
  &lt;main&gt;
    &lt;p&gt;As a bit of background, one of my hobbies is helping people recover data from old tape cartridges, such as QIC-80 tapes, which were a rather popular backup medium in the 1990s among individuals, small businesses, BBS operators, and the like. I have a soft spot for tape media; there’s something about the tactile sensation of holding these tapes in my hands that makes the whole process very joyful, even though QIC tapes are notorious for their many design flaws. With some careful inspection and reconditioning, the data on these tapes is still totally recoverable, even after all these years.&lt;/p&gt;
    &lt;p&gt;Whenever I receive a QIC-80 tape for recovery, I power up one of my older PC workstations which has the appropriate tape drive attached to it, and boot into a very old version of Linux (namely CentOS 3.5), because this is the only way to use the &lt;code&gt;ftape&lt;/code&gt; driver, which is the kernel driver necessary for communicating with this tape drive, allowing the user to dump the binary contents of the tape.&lt;/p&gt;
    &lt;p&gt;You see, the drive that reads these tapes connects to the floppy controller on the motherboard. This clever hack was done as a cost-saving measure: instead of having to purchase a separate SCSI adapter (the standard interface for higher-tier tape media), you can just connect this tape drive to your floppy controller, which was already available on most PCs. It can even work alongside your existing floppy drive, on the same ribbon cable! The tradeoff, of course, is that the data rate is limited by the speed of the floppy controller, which was something like 500 Kbps (that’s kilobits, not bytes).&lt;/p&gt;
    &lt;p&gt;The other downside is that the protocol for communicating with these tape drives through the floppy controller was very messy, nonstandard, and not very well-supported. It was a “hack” in every sense: your motherboard’s BIOS had no knowledge of the tape drive being connected, and it was entirely up to the end-user software to know exactly how to manipulate the hardware I/O ports, timings, interrupts, etc. to trick the floppy controller into sending the appropriate commands to the tape drive.&lt;/p&gt;
    &lt;p&gt;There were a small number of proprietary tools for MS-DOS and Windows 3.x/9x for dealing with these drives, and only one open-source implementation for Linux, namely &lt;code&gt;ftape&lt;/code&gt;. Of course it is possible to use those original DOS/Windows tools to read the tapes, but it’s actually only &lt;code&gt;ftape&lt;/code&gt; that allows us to read the “raw” binary contents of the tape, regardless of which proprietary software originally wrote it, which is why I prefer it for dumping the contents and worrying afterwards about decoding the proprietary logical formatting, and then extracting the files from it.&lt;/p&gt;
    &lt;p&gt;The trouble is, the &lt;code&gt;ftape&lt;/code&gt; driver hasn’t been supported since roughly the year 2000, and was soon removed from the Linux kernel for this reason. This is why I’ve needed to run a painfully old version of Linux anytime I have to work with one of these drives. It would be great if &lt;code&gt;ftape&lt;/code&gt; worked on a modern distro, with all the benefits and affordances that would provide.&lt;/p&gt;
    &lt;p&gt;So a couple of weeks ago, it occurred to me to make a simple request to Claude Code:&lt;/p&gt;
    &lt;code&gt;&amp;gt; This repository is a Linux kernel driver that communicates with legacy tape drives connected to the floppy
  controller (FDC) on the motherboard. Unfortunately, this driver hasn't been maintained for a long time, and
  can only compile under kernel version 2.4. I'd like to modernize this driver, allowing it to be built with
  the latest versions of the kernel.

● I'll help you modernize this Linux kernel driver for legacy tape drives. This is a significant task that
  will require updating the code to work with modern kernel APIs and conventions.
&lt;/code&gt;
    &lt;p&gt;And after several iterations of “combobulating” and whatever else Claude claims to do, I suddenly had a kernel driver that was compiling without errors. This is because Claude is able to take the compiler output and feed it back into itself, until the compilation works correctly. There was a laundry list of kernel functions and structures that were understandably deprecated or replaced, in the eternity that elapsed between kernel version 2.4 and version 6.8. Amazingly, Claude found all the outdated bits and replaced them with the correct modern equivalents, requiring just a few manual touch-ups of the code (a bit more on this later).&lt;/p&gt;
    &lt;p&gt;At this point, however, the kernel driver was still expected to be compiled as part of a full kernel tree, whereas I just wanted it to become a standalone loadable kernel module. OK, no problem:&lt;/p&gt;
    &lt;code&gt;&amp;gt; Is there a way to compile just this module in-place, instead of copying it into a kernel source tree?

● Yes! You can compile kernel modules out-of-tree without copying them into the kernel source. Let me create
  a proper standalone build system for the ftape driver.
&lt;/code&gt;
    &lt;p&gt;…And it did. Without any further prompting. At the end of this stage, I had a loadable kernel module (&lt;code&gt;.ko&lt;/code&gt;) that I could start trying to use with actual live hardware. Unsurprisingly, the module did not yet “work” — it was loading, but something was preventing it from communicating with the tape drive correctly. But I pressed on.&lt;/p&gt;
    &lt;p&gt;From this point forward, since loading/unloading kernel modules requires sudo, I could no longer let Claude “iterate” on such sensitive operations by itself. Luckily, the &lt;code&gt;ftape&lt;/code&gt; driver was already generously sprinkled with logging messages (&lt;code&gt;printk()&lt;/code&gt; calls that are printed to &lt;code&gt;dmesg&lt;/code&gt;), so I loaded the module myself, and iteratively pasted the output of &lt;code&gt;dmesg&lt;/code&gt; into Claude manually, and let Claude compare it to a “known-good” dmesg log that I’d previously saved from a successful tape read. After a few iterations of this, Claude identified the remaining issues preventing the module from communicating with the hardware.&lt;/p&gt;
    &lt;code&gt;● Perfect! The module has parameters that can be set. The issue is that without configuration, all the base
  addresses default to -1, which gets converted to 0xffff in the config function, causing the detection to fail.
● The "No such device or address" (ENXIO) error occurs because the ftape-internal module is not configured
  with the correct I/O port base address for your floppy controller.
  The issue is in fdc-internal.c:735-737: if fdc-&amp;gt;sra == 0xffff, it returns -ENXIO. Since no configuration was
  provided, all values default to -1, which becomes 0xffff....
&lt;/code&gt;
    &lt;p&gt;And at last, I had a kernel module that was able to a) load, b) detect the tape drive, and c) dump the contents of a test tape!&lt;/p&gt;
    &lt;p&gt;Using the &lt;code&gt;ftape&lt;/code&gt; driver on a modern kernel, a feat that I thought was hopelessly out of reach, was suddenly completed over the course of two evenings.&lt;/p&gt;
    &lt;p&gt;As a giant caveat, I should note that I have a small bit of prior experience working with kernel modules, and a good amount of experience with C in general, so I don’t want to overstate Claude’s success in this scenario. As in, it wasn’t literally three prompts to get Claude to poop out a working kernel module, but rather several back-and-forth conversations and, yes, several manual fixups of the code. It would absolutely not be possible to perform this modernization without a baseline knowledge of the internals of a kernel module.&lt;/p&gt;
    &lt;p&gt;This led me to crystallize some thoughts on working with such coding agents in our current moment:&lt;/p&gt;
    &lt;head rend="h4"&gt;Open yourself up to a genuine collaboration with these tools.&lt;/head&gt;
    &lt;p&gt;Interacting with Claude Code felt like an actual collaboration with a fellow engineer. People like to compare it to working with a “junior” engineer, and I think that’s broadly accurate: it will do whatever you tell it to do, it’s eager to please, it’s overconfident, it’s quick to apologize and praise you for being “absolutely right” when you point out a mistake it made, and so on. Because of this, you (the human) are still the one who must provide the guardrails, make product decisions, enforce architectural guidelines, and spot potential problems as early as possible.&lt;/p&gt;
    &lt;head rend="h4"&gt;Be as specific as possible, making sure to use the domain-specific keywords for the task.&lt;/head&gt;
    &lt;p&gt;I’m not claiming to suddenly be an expert in prompt engineering, but the prompts that I’ve found to be most successful are ones that clearly lay out the verbal scaffolding for a feature, and then describe the gaps in the scaffolding that the LLM should fill in. (For some reason the image that comes to mind is one of those biological stem-cell scaffolds where an artificial human ear will grow.)&lt;/p&gt;
    &lt;head rend="h4"&gt;Develop an intuition for the kinds of tasks that are “well-suited” for an agent to complete.&lt;/head&gt;
    &lt;p&gt;These agents are not magical, and can’t do literally everything you ask. If you ask it to do something for which it’s not well-suited, you will become frustrated and prematurely reject these tools before you allow them to shine. On this point, it’s useful to learn how LLMs actually work, so that you develop a sense of their strengths and weaknesses.&lt;/p&gt;
    &lt;head rend="h4"&gt;Use these tools as a massive force multiplier of your own skills.&lt;/head&gt;
    &lt;p&gt;I’m sure that if I really wanted to, I could have done this modernization effort on my own. But that would have required me to learn kernel development as it was done 25 years ago. This would have probably taken me several weeks of nonstop poring over documentation that would be completely useless knowledge today. Instead of all that, I spent a couple of days chatting with an agent and having it explain to me all the things it did.&lt;/p&gt;
    &lt;p&gt;Naturally, I verified and tested the changes it made, and in the process I did end up learning a huge amount of things that will be actually useful to me in the future, such as modern kernel conventions, some interesting details of x86 architecture, as well as several command line incantations that I’ll be keeping in my arsenal.&lt;/p&gt;
    &lt;head rend="h4"&gt;Use these tools for rapid onboarding onto new frameworks.&lt;/head&gt;
    &lt;p&gt;I am not a kernel developer by any stretch, but this particular experience ignited a spark that might lead to more kernel-level work, and it turns out that kernel development isn’t nearly as difficult as it might sound. In another unrelated “vibe-coding” session, I built a Flutter app without having used Flutter before. If you’re like me, and your learning style is to learn by doing, these tools can radically accelerate your pace of learning new frameworks, freeing you up to do more high-level architectural thinking.&lt;/p&gt;
    &lt;p&gt;In any case, circling all the way back, I am now happy to say that &lt;code&gt;ftape&lt;/code&gt; lives on! Twenty-five years after its last official release, it is once again buildable and usable on modern Linux. I’m still in the process of making some further tweaks and new feature additions, but I have already verified that it works with the floppy-based tape drives in my collection, as well as parallel-port-based drives which it also supports.&lt;/p&gt;
    &lt;p&gt;The physical setup looks very similar, but the OS is now Xubuntu 24.04, instead of CentOS 3.5! 🎉&lt;lb/&gt; Until next time!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45163362</guid></item><item><title>Show HN: C++ library for reading MacBook lid angle sensor data</title><link>https://github.com/ufoym/mac-angle</link><description>&lt;doc fingerprint="3b0c4a14570ff1f8"&gt;
  &lt;main&gt;
    &lt;p&gt;A C++ library for reading MacBook lid angle sensor data, based on reverse engineering of HID device specifications.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🔍 Direct access to MacBook's built-in lid angle sensor&lt;/item&gt;
      &lt;item&gt;📏 Real-time precise angle measurements (0-360 degree range)&lt;/item&gt;
      &lt;item&gt;⚡ High-performance C++ implementation with modern C++14 standard support&lt;/item&gt;
      &lt;item&gt;🛡️ Comprehensive exception handling mechanism&lt;/item&gt;
      &lt;item&gt;🔧 Clean and easy-to-use API interface&lt;/item&gt;
      &lt;item&gt;📦 CMake build system support&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;MacBook Pro 16-inch (2019) and newer models&lt;/item&gt;
      &lt;item&gt;MacBook Pro M2/M3/M4 series&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;M1 MacBook Air/Pro (sensor access restricted)&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Device identification: Apple VID=0x05AC, PID=0x8104&lt;/item&gt;
      &lt;item&gt;HID usage: Sensor page (0x0020), Orientation usage (0x008A)&lt;/item&gt;
      &lt;item&gt;Data format: 16-bit angle value with 0.01-degree precision&lt;/item&gt;
      &lt;item&gt;Data range: 0-360 degrees&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;macOS 10.15 or later&lt;/item&gt;
      &lt;item&gt;Xcode Command Line Tools&lt;/item&gt;
      &lt;item&gt;CMake 3.15 or later&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Clone the repository
git clone &amp;lt;repository-url&amp;gt;
cd mac-angle

# Create build directory
mkdir build &amp;amp;&amp;amp; cd build

# Configure build
cmake ..

# Compile
make

# Run example program
./lid_angle_example&lt;/code&gt;
    &lt;code&gt;#include "angle.h"
#include &amp;lt;iostream&amp;gt;

using namespace MacBookLidAngle;

int main() {
    try {
        // Create sensor instance
        LidAngleSensor sensor;
        
        // Check if sensor is available
        if (sensor.isAvailable()) {
            // Read current angle
            double angle = sensor.readAngle();
            std::cout &amp;lt;&amp;lt; "Current lid angle: " &amp;lt;&amp;lt; angle &amp;lt;&amp;lt; "°" &amp;lt;&amp;lt; std::endl;
        }
        
    } catch (const SensorNotSupportedException&amp;amp; e) {
        std::cerr &amp;lt;&amp;lt; "Device not supported: " &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    } catch (const SensorInitializationException&amp;amp; e) {
        std::cerr &amp;lt;&amp;lt; "Initialization failed: " &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    } catch (const SensorReadException&amp;amp; e) {
        std::cerr &amp;lt;&amp;lt; "Read failed: " &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    }
    
    return 0;
}&lt;/code&gt;
    &lt;code&gt;#include "angle.h"
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;thread&amp;gt;

using namespace MacBookLidAngle;

int main() {
    try {
        LidAngleSensor sensor;
        
        while (true) {
            double angle = sensor.readAngle();
            std::cout &amp;lt;&amp;lt; "Angle: " &amp;lt;&amp;lt; angle &amp;lt;&amp;lt; "°" &amp;lt;&amp;lt; std::endl;
            std::this_thread::sleep_for(std::chrono::milliseconds(500));
        }
        
    } catch (const std::exception&amp;amp; e) {
        std::cerr &amp;lt;&amp;lt; "Error: " &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    }
    
    return 0;
}&lt;/code&gt;
    &lt;p&gt;The main sensor interface class providing access to MacBook lid angle sensor.&lt;/p&gt;
    &lt;code&gt;LidAngleSensor();&lt;/code&gt;
    &lt;p&gt;Automatically initializes and connects to the sensor. Throws appropriate exceptions if the sensor is unavailable or initialization fails.&lt;/p&gt;
    &lt;p&gt;Exceptions:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;SensorNotSupportedException&lt;/code&gt;- Device doesn't support sensor hardware&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;SensorInitializationException&lt;/code&gt;- Sensor initialization failed&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Checks if the sensor is available and ready for reading.&lt;/p&gt;
    &lt;p&gt;Returns: &lt;code&gt;true&lt;/code&gt; if sensor is available, &lt;code&gt;false&lt;/code&gt; otherwise&lt;/p&gt;
    &lt;p&gt;Reads the current lid angle.&lt;/p&gt;
    &lt;p&gt;Returns: Angle value (0-360 degrees)&lt;/p&gt;
    &lt;p&gt;Exceptions:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;SensorReadException&lt;/code&gt;- Read operation failed&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;SensorNotSupportedException&lt;/code&gt;- Sensor unavailable&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Checks if this device should support the lid angle sensor.&lt;/p&gt;
    &lt;p&gt;Returns: &lt;code&gt;true&lt;/code&gt; if device model should support the sensor&lt;/p&gt;
    &lt;p&gt;Gets library version information.&lt;/p&gt;
    &lt;p&gt;Returns: Version string&lt;/p&gt;
    &lt;p&gt;Thrown when the lid angle sensor is not supported on this device.&lt;/p&gt;
    &lt;p&gt;Thrown when sensor initialization fails.&lt;/p&gt;
    &lt;p&gt;Thrown when sensor read operation fails.&lt;/p&gt;
    &lt;code&gt;add_subdirectory(macbook-lid-angle)
target_link_libraries(your_target macbook_lid_angle)&lt;/code&gt;
    &lt;code&gt;find_package(MacBookLidAngle REQUIRED)
target_link_libraries(your_target MacBookLidAngle::macbook_lid_angle)&lt;/code&gt;
    &lt;p&gt;The project includes a complete example program &lt;code&gt;example.cpp&lt;/code&gt; demonstrating:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Device compatibility checking&lt;/item&gt;
      &lt;item&gt;Basic angle reading&lt;/item&gt;
      &lt;item&gt;Continuous monitoring mode&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Run the example:&lt;/p&gt;
    &lt;code&gt;# Basic demonstration
./lid_angle_example

# Continuous monitoring demonstration
./lid_angle_example --continuous&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Confirm your device is in the supported list&lt;/item&gt;
      &lt;item&gt;Check if other applications are using the sensor&lt;/item&gt;
      &lt;item&gt;Try restarting your MacBook&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Ensure your application has appropriate system permissions&lt;/item&gt;
      &lt;item&gt;Check macOS version compatibility&lt;/item&gt;
      &lt;item&gt;Try running with administrator privileges&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Sensor may be temporarily unavailable&lt;/item&gt;
      &lt;item&gt;Implement retry logic&lt;/item&gt;
      &lt;item&gt;Check device connection status&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This library uses macOS IOKit framework to directly access HID devices:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Device Discovery: Match devices by specific VID/PID and HID usage pages&lt;/item&gt;
      &lt;item&gt;Device Validation: Test device response to ensure proper functionality&lt;/item&gt;
      &lt;item&gt;Data Reading: Use Feature Reports to read 16-bit angle data&lt;/item&gt;
      &lt;item&gt;Error Handling: Comprehensive exception handling system&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This C++ library is inspired by and based on the original Lid Angle Sensor project by Sam Gold. We extend our sincere gratitude to Sam for his pioneering work in reverse engineering the MacBook lid angle sensor HID interface and making this functionality accessible to developers.&lt;/p&gt;
    &lt;p&gt;The original Objective-C implementation provided the foundation and insights that made this C++ port possible. This project aims to bring the same functionality to C++ developers while maintaining the reliability and accuracy of the original implementation.&lt;/p&gt;
    &lt;p&gt;This project is developed based on the original LidAngleSensor project and follows open source licensing agreements.&lt;/p&gt;
    &lt;p&gt;Issues and Pull Requests are welcome!&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Lid Angle Sensor (Objective-C) by Sam Gold - The original inspiration and foundation for this library&lt;/item&gt;
      &lt;item&gt;pybooklid (Python) - Python implementation&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;C++ port and extensions based on Sam Gold's original work.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45165066</guid></item><item><title>Show HN: Veena Chromatic Tuner</title><link>https://play.google.com/store/apps/details?id=in.magima.digitaltuner&amp;hl=en_US</link><description>&lt;doc fingerprint="8829a6a1297299be"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Veena Chromatic Tuner lets you to tune in Equal Temperament/Just Intonation with oscilloscope-like stable waveform display. This powerful, versatile tuning application is designed for musicians who need precise control over their instrument tuning across multiple musical traditions (Equal Temperament, Just Intonation). It displays the pitch (frequency) and deviation in cents via a needle interface. A unique visual feature is its linear and circular waveform display of input audio: the waveform appears stabilised when in tune with reference note selected, rotates right when sharp, and rotates left when flat, providing immediate visual feedback for precise adjustments. This dynamic visual feedback, akin to a digital oscilloscope's trigger synchronisation, offers immediate and precise adjustment cues.&lt;lb/&gt;A Veena instrument mode has been added, allowing users to play and tune notes across 24 fret positions. This feature is particularly useful for instrument makers. When choosing Just Intonation or Carnatic tuning profiles, fret positions are based on specific ratios. Consequently, this mode allows you to observe how note positions on the first and other strings vary relative to each other when pure intonation is applied. &lt;lb/&gt;Key Features:&lt;lb/&gt;Multiple Tuning Systems - Choose between Equal Temperament, Just Intonation, or create your own Custom temperament with personalised ratio settings.&lt;lb/&gt;Multicultural Note Naming - Display notes in various systems including Western notation, Indian classical (Carnatic/Hindustani), and Solfege, with support for multiple Indian language scripts (Tamil, Devanagari, Telugu, Kannada, Malayalam). The base note selected is treated as "Sa".&lt;lb/&gt;Adjustable Reference Pitch - Customize your A4 frequency from standard 440Hz to alternative tuning like 432Hz.&lt;lb/&gt;Transposition Support - Easily transpose notes up or down for instruments that play in different keys&lt;lb/&gt;Custom Tuning Profiles - Create, save, and manage multiple tuning profiles for different instruments or musical traditions.&lt;lb/&gt;Just Intonation Support - Perfect for Indian classical music and other traditions that rely on pure harmonic relationships between notes.&lt;lb/&gt;Perfect for:&lt;lb/&gt;- String instrument players (veena, violin, guitar, sitar, banjo, piano, lute etc.)&lt;lb/&gt;- Veena melam(fretboard) making / repair &lt;lb/&gt;- Wind instrument musicians&lt;lb/&gt;- Vocalists&lt;lb/&gt;- Music teachers and students&lt;lb/&gt;- Ethnomusicologists&lt;lb/&gt;- Instrument makers and tuners &lt;lb/&gt;- Fret setting&lt;lb/&gt;- Anyone exploring microtonal music&lt;lb/&gt;Download Veena Chromatic Tuner today. &lt;lb/&gt;Please note: this application is ad-supported. We are continuously developing the app, rapidly adding new features and improvements. However, pitch detection is a resource-intensive application, and as a result, compatibility may vary depending on the hardware and software limitations of your device. We appreciate your interest in our app and apologise if it doesn't function as expected on your specific device.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45165245</guid></item></channel></rss>