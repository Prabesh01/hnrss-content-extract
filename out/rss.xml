<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Hacker News: Front Page</title><link>https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml</link><description>Hacker News RSS</description><atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sun, 31 Aug 2025 11:07:10 +0000</lastBuildDate><item><title>Is it possible to allow sideloading and keep users safe?</title><link>https://shkspr.mobi/blog/2025/08/is-it-possible-to-allow-sideloading-and-keep-users-safe/</link><description>&lt;doc fingerprint="be239b50e9036489"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Is it possible to allow sideloading *and* keep users safe?&lt;/head&gt;
    &lt;p&gt;In which I attempt to be pragmatic.&lt;/p&gt;
    &lt;p&gt;Are you allowed to run whatever computer program you want on the hardware you own? This is a question where freedom, practicality, and reality all collide into a mess.&lt;/p&gt;
    &lt;p&gt;Google has recently announced that Android users will only be able to install apps which have been digitally signed by developers who have registered their name and other legal details with Google. To many people, this signals the death of "sideloading" - the ability to install apps which don't originate on the official store0.&lt;/p&gt;
    &lt;p&gt;I'm a fully paid-up member of the Cory Doctorow fanclub. Back in 2011, he gave a speech called "The Coming War on General Computation". In it, he rails against the idea that our computers could become traitorous; serving the needs of someone other than their owner. Do we want to live in a future where our computers refuse to obey our commands? No! Neither law nor technology should conspire to reduce our freedom to compute.&lt;/p&gt;
    &lt;p&gt;There are, I think, two small cracks in that argument.&lt;/p&gt;
    &lt;p&gt;The first is that a user has no right to run anyone else's code, if the code owner doesn't want to make it available to them. Consider a bank which has an app. When customers are scammed, the bank is often liable. The bank wants to reduce its liability so it says "you can't run our app on a rooted phone".&lt;/p&gt;
    &lt;p&gt;Is that fair? Probably not. Rooting allows a user to fully control and customise their device. But rooting also allows malware to intercept communications, send commands, and perform unwanted actions. I think the bank has the right to say "your machine is too risky - we don't want our code to run on it."&lt;/p&gt;
    &lt;p&gt;The same is true of video games with strong "anti-cheat" protection. It is disruptive to other players - and to the business model - if untrustworthy clients can disrupt the game. Again, it probably isn't fair to ban users who run on permissive software, but it is a rational choice by the manufacturer. And, yet again, I think software authors probably should be able to restrict things which cause them harm.&lt;/p&gt;
    &lt;p&gt;So, from their point of view it is pragmatic to insist that their software can only be loaded from a trustworthy location.&lt;/p&gt;
    &lt;p&gt;But that's not the only thing Google is proposing. Let's look at their announcement:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;We’ve seen how malicious actors hide behind anonymity to harm users by impersonating developers and using their brand image to create convincing fake apps. The scale of this threat is significant: our recent analysis found over 50 times more malware from internet-sideloaded sources than on apps available through Google Play.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Back in the early days of Android, you could just install any app and it would run, no questions asked. That was a touchingly naïve approach to security - extremely easy to use but left users vulnerable.&lt;/p&gt;
    &lt;p&gt;A few years later, Android changed to show user the permissions an app was requesting. Here's a genuine screenshot from an app which I tried to sideload in 2013:&lt;/p&gt;
    &lt;p&gt;No rational user would install a purported battery app with that scary list of permissions, right? Wrong!&lt;/p&gt;
    &lt;p&gt;We know that users don't read and they especially don't read security warnings.&lt;/p&gt;
    &lt;p&gt;There is no UI tweak you can do to prevent users bypassing these scary warnings. There is no amount of education you can provide to reliably make people stop and think.&lt;/p&gt;
    &lt;p&gt;Here's the story of a bank literally telling a man he was being scammed and he still proceeded to transfer funds to a fraudster.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;It emerged that, in this case, Lloyds had done a really good job of not only spotting the potential fraud but alerting James to it. The bank blocked a number of transactions, it spoke to James on the phone to warn him and even called him into a branch to speak to him face-to-face.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Here's another one where a victim deliberately lied to their bank even after acknowledging that they had been told it was a scam.&lt;/p&gt;
    &lt;p&gt;Android now requires you to deliberately turn on the ability to side-load. It will give you prompts and warnings, force you to take specific actions, give you pop-ups and all sorts of confirmation steps.&lt;/p&gt;
    &lt;p&gt;And people still click on.&lt;/p&gt;
    &lt;p&gt;Let's go back to Google announcement. This change isn't being rolled out worldwide immediately. They say:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;This change will start in a few select countries specifically impacted by these forms of fraudulent app scams, often from repeat perpetrators.&lt;/p&gt;
      &lt;p&gt;…&lt;/p&gt;
      &lt;p&gt;September 2026: These requirements go into effect in Brazil, Indonesia, Singapore, and Thailand. At this point, any app installed on a certified Android device in these regions must be registered by a verified developer.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The police in Singapore have a page warning about the prevalence of these scams. They describe how victims are tricked or coerced into turning off all their phone's security features.&lt;/p&gt;
    &lt;p&gt;Similarly, there are estimates that Brazil lost US$54 billion to scams in 2024 (albeit not all through apps).&lt;/p&gt;
    &lt;p&gt;There are anecdotal reports from Indonesia which show how easily people fall for these fake apps.&lt;/p&gt;
    &lt;p&gt;Thailand is also under an ongoing onslaught of malicious apps with some apps raking in huge amounts of money.&lt;/p&gt;
    &lt;p&gt;It is absolutely rational that government, police, and civic society groups want to find ways to stop these scams.&lt;/p&gt;
    &lt;p&gt;Google is afraid that if Android's reputation is tarnished as the "Scam OS" then users will move to more secure devices.&lt;/p&gt;
    &lt;p&gt;Financial institutions might stop providing functionality to Android devices as a way to protect their customers. Which would lead to those users seeking alternate phones.&lt;/p&gt;
    &lt;p&gt;Society as a whole wants to protect vulnerable people. We all bear the cost of dealing with criminal activity like this.&lt;/p&gt;
    &lt;p&gt;Given that sideloaded Android apps are clearly a massive vector for fraud, it obviously behoves Google to find a way to secure their platform as much as possible.&lt;/p&gt;
    &lt;head rend="h2"&gt;And Yet…&lt;/head&gt;
    &lt;p&gt;This is quite obviously a bullshit powerplay by Google to ensnare the commons. Not content with closing down parts of the Android Open Source Project, stuffing more and more vital software behind its proprietary services, and freezing out small manufacturers - now it wants the name and shoe-size of every developer!&lt;/p&gt;
    &lt;p&gt;Fuck that!&lt;/p&gt;
    &lt;p&gt;I want to use my phone to run the code that I write. I want to run my friends' code. I want to play with cool open source projects by people in far-away lands.&lt;/p&gt;
    &lt;p&gt;I remember The Day Google Deleted Me - we cannot have these lumbering monsters gatekeeping what we do on our machines.&lt;/p&gt;
    &lt;p&gt;Back in the days when I was a BlackBerry developer, we had to wait ages for RIM's code-signing server to become available. I'm pretty sure the same problem affected Symbian - if Nokia was down that day, you couldn't release any code.&lt;/p&gt;
    &lt;p&gt;Going back to their statement:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;To be clear, developers will have the same freedom to distribute their apps directly to users through sideloading or to use any app store they prefer.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This is a lie. I can only distribute a sideloaded app if Google doesn't nuke my account. If I piss off someone there, or they click the wrong button, or they change the requirements so I'm no longer eligible - my content disappears.&lt;/p&gt;
    &lt;p&gt;They promise that Android will still be open to student and hobbyist developers - but would you believe anything those monkey-punchers say? Oh, and what a fricking insult to call a legion of Open Source developers "hobbyists"!&lt;/p&gt;
    &lt;p&gt;I hate it.&lt;/p&gt;
    &lt;p&gt;I also don't see how this is going to help. I guess if scammers all use the same ID, then it'll be easy for Android to super-nuke all the scam apps.&lt;/p&gt;
    &lt;p&gt;Perhaps when you install a sideloaded app you'll see "This app was made by John Smith - not a company. Here's his photo. Got any complaints? Call his number."&lt;/p&gt;
    &lt;p&gt;But what's going to happen is that people will get their IDs stolen, or be induced to register as a developer and then sign some malware. They'll also be victims.&lt;/p&gt;
    &lt;head rend="h2"&gt;So What's The Solution?&lt;/head&gt;
    &lt;p&gt;I've tried to be pragmatic, but there's something of a dilemma here.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Users should be free to run whatever code they like.&lt;/item&gt;
      &lt;item&gt;Vulnerable members of society should be protected from scams.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Do we accept that a megacorporation should keep everyone safe at the expense of a few pesky nerds wanting to run some janky code?&lt;/p&gt;
    &lt;p&gt;Do we say that the right to run free software is more important than granny being protected from scammers?&lt;/p&gt;
    &lt;p&gt;Do we pour billions into educating users not to click "yes" to every prompt they see?&lt;/p&gt;
    &lt;p&gt;Do we try and build a super-secure Operating System which, somehow, gives users complete freedom without exposing them to risk?&lt;/p&gt;
    &lt;p&gt;Do we hope that Google won't suddenly start extorting developers, users, and society as a whole?&lt;/p&gt;
    &lt;p&gt;Do we chase down and punish everyone who releases a scam app?&lt;/p&gt;
    &lt;p&gt;Do we stick an AI on every phone to detect scam apps and refuse to run them if they're dodgy?&lt;/p&gt;
    &lt;p&gt;I don't know the answers to any of these questions and - if I'm honest - I don't like asking them.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45073902</guid></item><item><title>Agent Client Protocol (ACP)</title><link>https://agentclientprotocol.com/overview/introduction</link><description>&lt;doc fingerprint="7d89da1d4bcc10c1"&gt;
  &lt;main&gt;
    &lt;p&gt;The Agent Client Protocol standardizes communication between code editors (IDEs, text-editors, etc.) and coding agents (programs that use generative AI to autonomously modify code).The protocol is still under development, but it should be complete enough to build interesting user experiences using it.&lt;/p&gt;
    &lt;p&gt;AI coding agents and editors are tightly coupled but interoperability isn’t the default. Each editor must build custom integrations for every agent they want to support, and agents must implement editor-specific APIs to reach users. This creates several problems:&lt;/p&gt;
    &lt;p&gt;Integration overhead: Every new agent-editor combination requires custom work&lt;/p&gt;
    &lt;p&gt;Limited compatibility: Agents work with only a subset of available editors&lt;/p&gt;
    &lt;p&gt;Developer lock-in: Choosing an agent often means accepting their available interfaces&lt;/p&gt;
    &lt;p&gt;ACP solves this by providing a standardized protocol for agent-editor communication, similar to how the Language Server Protocol (LSP) standardized language server integration.Agents that implement ACP work with any compatible editor. Editors that support ACP gain access to the entire ecosystem of ACP-compatible agents. This decoupling allows both sides to innovate independently while giving developers the freedom to choose the best tools for their workflow.&lt;/p&gt;
    &lt;p&gt;ACP assumes that the user is primarily in their editor, and wants to reach out and use agents to assist them with specific tasks.Agents run as sub-processes of the code editor, and communicate using JSON-RPC over stdio. The protocol re-uses the JSON representations used in MCP where possible, but includes custom types for useful agentic coding UX elements, like displaying diffs.The default format for user-readable text is Markdown, which allows enough flexibility to represent rich formatting without requiring that the code editor is capable of rendering HTML.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45074147</guid></item><item><title>Cognitive load is what matters</title><link>https://github.com/zakirullin/cognitive-load</link><description>&lt;doc fingerprint="373978120d250fed"&gt;
  &lt;main&gt;&lt;p&gt;Readable version | Chinese translation | Korean translation | Turkish translation&lt;/p&gt;&lt;p&gt;It is a living document, last update: August 2025. Your contributions are welcome!&lt;/p&gt;&lt;p&gt;There are so many buzzwords and best practices out there, but most of them have failed. We need something more fundamental, something that can't be wrong.&lt;/p&gt;&lt;p&gt;Sometimes we feel confusion going through the code. Confusion costs time and money. Confusion is caused by high cognitive load. It's not some fancy abstract concept, but rather a fundamental human constraint. It's not imagined, it's there and we can feel it.&lt;/p&gt;&lt;p&gt;Since we spend far more time reading and understanding code than writing it, we should constantly ask ourselves whether we are embedding excessive cognitive load into our code.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Cognitive load is how much a developer needs to think in order to complete a task.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;When reading code, you put things like values of variables, control flow logic and call sequences into your head. The average person can hold roughly four such chunks in working memory. Once the cognitive load reaches this threshold, it becomes much harder to understand things.&lt;/p&gt;&lt;p&gt;Let's say we have been asked to make some fixes to a completely unfamiliar project. We were told that a really smart developer had contributed to it. Lots of cool architectures, fancy libraries and trendy technologies were used. In other words, the author had created a high cognitive load for us.&lt;/p&gt;&lt;p&gt;We should reduce the cognitive load in our projects as much as possible.&lt;/p&gt;&lt;p&gt;Intrinsic - caused by the inherent difficulty of a task. It can't be reduced, it's at the very heart of software development.&lt;/p&gt;&lt;p&gt;Extraneous - created by the way the information is presented. Caused by factors not directly relevant to the task, such as smart author's quirks. Can be greatly reduced. We will focus on this type of cognitive load.&lt;/p&gt;&lt;p&gt;Let's jump straight to the concrete practical examples of extraneous cognitive load.&lt;/p&gt;&lt;p&gt;We will refer to the level of cognitive load as follows:&lt;code&gt;🧠&lt;/code&gt;: fresh working memory, zero cognitive load&lt;code&gt;🧠++&lt;/code&gt;: two facts in our working memory, cognitive load increased&lt;code&gt;🤯&lt;/code&gt;: cognitive overload, more than 4 facts&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Our brain is much more complex and unexplored, but we can go with this simplistic model.&lt;/p&gt;&lt;/quote&gt;&lt;code&gt;if val &amp;gt; someConstant // 🧠+
    &amp;amp;&amp;amp; (condition2 || condition3) // 🧠+++, prev cond should be true, one of c2 or c3 has be true
    &amp;amp;&amp;amp; (condition4 &amp;amp;&amp;amp; !condition5) { // 🤯, we are messed up by this point
    ...
}&lt;/code&gt;&lt;p&gt;Introduce intermediate variables with meaningful names:&lt;/p&gt;&lt;code&gt;isValid = val &amp;gt; someConstant
isAllowed = condition2 || condition3
isSecure = condition4 &amp;amp;&amp;amp; !condition5 
// 🧠, we don't need to remember the conditions, there are descriptive variables
if isValid &amp;amp;&amp;amp; isAllowed &amp;amp;&amp;amp; isSecure {
    ...
}&lt;/code&gt;&lt;code&gt;if isValid { // 🧠+, okay nested code applies to valid input only
    if isSecure { // 🧠++, we do stuff for valid and secure input only
        stuff // 🧠+++
    }
} &lt;/code&gt;&lt;p&gt;Compare it with the early returns:&lt;/p&gt;&lt;code&gt;if !isValid
    return
 
if !isSecure
    return

// 🧠, we don't really care about earlier returns, if we are here then all good

stuff // 🧠+&lt;/code&gt;&lt;p&gt;We can focus on the happy path only, thus freeing our working memory from all sorts of preconditions.&lt;/p&gt;&lt;p&gt;We are asked to change a few things for our admin users: &lt;code&gt;🧠&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;AdminController extends UserController extends GuestController extends BaseController&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Ohh, part of the functionality is in &lt;code&gt;BaseController&lt;/code&gt;, let's have a look: &lt;code&gt;🧠+&lt;/code&gt;&lt;lb/&gt; Basic role mechanics got introduced in &lt;code&gt;GuestController&lt;/code&gt;: &lt;code&gt;🧠++&lt;/code&gt;&lt;lb/&gt; Things got partially altered in &lt;code&gt;UserController&lt;/code&gt;: &lt;code&gt;🧠+++&lt;/code&gt;&lt;lb/&gt; Finally we are here, &lt;code&gt;AdminController&lt;/code&gt;, let's code stuff! &lt;code&gt;🧠++++&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Oh, wait, there's &lt;code&gt;SuperuserController&lt;/code&gt; which extends &lt;code&gt;AdminController&lt;/code&gt;. By modifying &lt;code&gt;AdminController&lt;/code&gt; we can break things in the inherited class, so let's dive in &lt;code&gt;SuperuserController&lt;/code&gt; first: &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Prefer composition over inheritance. We won't go into detail - there's plenty of material out there.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Method, class and module are interchangeable in this context&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;Mantras like "methods should be shorter than 15 lines of code" or "classes should be small" turned out to be somewhat wrong.&lt;/p&gt;&lt;p&gt;Deep module - simple interface, complex functionality&lt;lb/&gt; Shallow module - interface is relatively complex to the small functionality it provides&lt;/p&gt;&lt;p&gt;Having too many shallow modules can make it difficult to understand the project. Not only do we have to keep in mind each module responsibilities, but also all their interactions. To understand the purpose of a shallow module, we first need to look at the functionality of all the related modules. Jumping between such shallow components is mentally exhausting, linear thinking is more natural to us humans.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Information hiding is paramount, and we don't hide as much complexity in shallow modules.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;I have two pet projects, both of them are somewhat 5K lines of code. The first one has 80 shallow classes, whereas the second one has only 7 deep classes. I haven't been maintaining any of these projects for one year and a half.&lt;/p&gt;&lt;p&gt;Once I came back, I realised that it was extremely difficult to untangle all the interactions between those 80 classes in the first project. I would have to rebuild an enormous amount of cognitive load before I could start coding. On the other hand, I was able to grasp the second project quickly, because it had only a few deep classes with a simple interface.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;The best components are those that provide powerful functionality yet have a simple interface.&lt;/p&gt;&lt;lb/&gt;John K. Ousterhout&lt;/quote&gt;&lt;p&gt;The interface of the UNIX I/O is very simple. It has only five basic calls:&lt;/p&gt;&lt;code&gt;open(path, flags, permissions)
read(fd, buffer, count)
write(fd, buffer, count)
lseek(fd, offset, referencePosition)
close(fd)&lt;/code&gt;&lt;p&gt;A modern implementation of this interface has hundreds of thousands of lines of code. Lots of complexity is hidden under the hood. Yet it is easy to use due to its simple interface.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;This deep module example is taken from the book A Philosophy of Software Design by John K. Ousterhout. Not only does this book cover the very essence of complexity in software development, but it also has the greatest interpretation of Parnas' influential paper On the Criteria To Be Used in Decomposing Systems into Modules. Both are essential reads. Other related readings: A Philosophy of Software Design vs Clean Code, It's probably time to stop recommending Clean Code, Small Functions considered Harmful.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;P.S. If you think we are rooting for bloated God objects with too many responsibilities, you got it wrong.&lt;/p&gt;&lt;p&gt;All too often, we end up creating lots of shallow modules, following some vague "a module should be responsible for one, and only one, thing" principle. What is this blurry one thing? Instantiating an object is one thing, right? So MetricsProviderFactoryFactory seems to be just fine. The names and interfaces of such classes tend to be more mentally taxing than their entire implementations, what kind of abstraction is that? Something went wrong.&lt;/p&gt;&lt;p&gt;We make changes to our systems to satisfy our users and stakeholders. We are responsible to them.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;A module should be responsible to one, and only one, user or stakeholder.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;This is what this Single Responsibility Principle is all about. Simply put, if we introduce a bug in one place, and then two different business people come to complain, we've violated the principle. It has nothing to do with the number of things we do in our module.&lt;/p&gt;&lt;p&gt;But even now, this rule can do more harm than good. This principle can be understood in as many different ways as there are individuals. A better approach would be to look at how much cognitive load it all creates. It's mentally demanding to remember that change in one place can trigger a chain of reactions across different business streams. And that's about it, no fancy terms to learn.&lt;/p&gt;&lt;p&gt;This shallow-deep module principle is scale-agnostic, and we can apply it to microservices architecture. Too many shallow microservices won't do any good - the industry is heading towards somewhat "macroservices", i.e., services that are not so shallow (=deep). One of the worst and hardest to fix phenomena is so-called distributed monolith, which is often the result of this overly granular shallow separation.&lt;/p&gt;&lt;p&gt;I once consulted a startup where a team of five developers introduced 17(!) microservices. They were 10 months behind schedule and appeared nowhere close to the public release. Every new requirement led to changes in 4+ microservices. It took an enormous amount of time to reproduce and debug an issue in such a distributed system. Both time to market and cognitive load were unacceptably high. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Is this the right way to approach the uncertainty of a new system? It's enormously difficult to elicit the right logical boundaries in the beginning. The key is to make decisions as late as you can responsibly wait, because that is when you have the most information at hand. By introducing a network layer up front, we make our design decisions hard to revert right from the start. The team's only justification was: "The FAANG companies proved microservices architecture to be effective". Hello, you got to stop dreaming big.&lt;/p&gt;&lt;p&gt;The Tanenbaum-Torvalds debate argued that Linux's monolithic design was flawed and obsolete, and that a microkernel architecture should be used instead. Indeed, the microkernel design seemed to be superior "from a theoretical and aesthetical" point of view. On the practical side of things - three decades on, microkernel-based GNU Hurd is still in development, and monolithic Linux is everywhere. This page is powered by Linux, your smart teapot is powered by Linux. By monolithic Linux.&lt;/p&gt;&lt;p&gt;A well-crafted monolith with truly isolated modules is often much more flexible than a bunch of microservices. It also requires far less cognitive effort to maintain. It's only when the need for separate deployments becomes crucial, such as scaling the development team, that you should consider adding a network layer between the modules, future microservices.&lt;/p&gt;&lt;p&gt;We feel excited when new features got released in our favourite language. We spend some time learning these features, we build code upon them.&lt;/p&gt;&lt;p&gt;If there are lots of features, we may spend half an hour playing with a few lines of code, to use one or another feature. And it's kind of a waste of time. But what's worse, when you come back later, you would have to recreate that thought process!&lt;/p&gt;&lt;p&gt;You not only have to understand this complicated program, you have to understand why a programmer decided this was the way to approach a problem from the features that are available. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;These statements are made by none other than Rob Pike.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;Reduce cognitive load by limiting the number of choices.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;Language features are OK, as long as they are orthogonal to each other.&lt;/p&gt;&lt;head&gt;Thoughts from an engineer with 20 years of C++ experience ⭐️&lt;/head&gt;&lt;p&gt;I was looking at my RSS reader the other day and noticed that I have somewhat three hundred unread articles under the "C++" tag. I haven't read a single article about the language since last summer, and I feel great!&lt;/p&gt;&lt;p&gt;I've been using C++ for 20 years for now, that's almost two-thirds of my life. Most of my experience lies in dealing with the darkest corners of the language (such as undefined behaviours of all sorts). It's not a reusable experience, and it's kind of creepy to throw it all away now.&lt;/p&gt;&lt;p&gt;Like, can you imagine, the token&lt;/p&gt;&lt;code&gt;||&lt;/code&gt; has a different meaning in &lt;code&gt;requires ((!P&amp;lt;T&amp;gt; || !Q&amp;lt;T&amp;gt;))&lt;/code&gt; and in &lt;code&gt;requires (!(P&amp;lt;T&amp;gt; || Q&amp;lt;T&amp;gt;))&lt;/code&gt;. The first is the constraint disjunction, the second is the good-old logical OR operator, and they behave differently.&lt;p&gt;You can't allocate space for a trivial type and just&lt;/p&gt;&lt;code&gt;memcpy&lt;/code&gt; a set of bytes there without extra effort - that won't start the lifetime of an object. This was the case before C++20. It was fixed in C++20, but the cognitive load of the language has only increased.&lt;p&gt;Cognitive load is constantly growing, even though things got fixed. I should know what was fixed, when it was fixed, and what it was like before. I am a professional after all. Sure, C++ is good at legacy support, which also means that you will face that legacy. For example, last month a colleague of mine asked me about some behaviour in C++03.&lt;/p&gt;&lt;code&gt;🤯&lt;/code&gt;&lt;p&gt;There were 20 ways of initialization. Uniform initialization syntax has been added. Now we have 21 ways of initialization. By the way, does anyone remember the rules for selecting constructors from the initializer list? Something about implicit conversion with the least loss of information, but if the value is known statically, then...&lt;/p&gt;&lt;code&gt;🤯&lt;/code&gt;&lt;p&gt;This increased cognitive load is not caused by a business task at hand. It is not an intrinsic complexity of the domain. It is just there due to historical reasons (extraneous cognitive load).&lt;/p&gt;&lt;p&gt;I had to come up with some rules. Like, if that line of code is not as obvious and I have to remember the standard, I better not write it that way. The standard is somewhat 1500 pages long, by the way.&lt;/p&gt;&lt;p&gt;By no means I am trying to blame C++. I love the language. It's just that I am tired now.&lt;/p&gt;&lt;p&gt;Thanks to 0xd34df00d for writing.&lt;/p&gt;&lt;p&gt;On the backend we return:&lt;code&gt;401&lt;/code&gt; for expired jwt token&lt;code&gt;403&lt;/code&gt; for not enough access&lt;code&gt;418&lt;/code&gt; for banned users&lt;/p&gt;&lt;p&gt;The engineers on the frontend use backend API to implement login functionality. They would have to temporarily create the following cognitive load in their brains:&lt;code&gt;401&lt;/code&gt; is for expired jwt token // &lt;code&gt;🧠+&lt;/code&gt;, ok just temporary remember it&lt;code&gt;403&lt;/code&gt; is for not enough access // &lt;code&gt;🧠++&lt;/code&gt;&lt;code&gt;418&lt;/code&gt; is for banned users // &lt;code&gt;🧠+++&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Frontend developers would (hopefully) introduce some kind &lt;code&gt;numeric status -&amp;gt; meaning&lt;/code&gt; dictionary on their side, so that subsequent generations of contributors wouldn't have to recreate this mapping in their brains.&lt;/p&gt;&lt;p&gt;Then QA engineers come into play: "Hey, I got &lt;code&gt;403&lt;/code&gt; status, is that expired token or not enough access?"
QA engineers can't jump straight to testing, because first they have to recreate the cognitive load that the engineers on the backend once created.&lt;/p&gt;&lt;p&gt;Why hold this custom mapping in our working memory? It's better to abstract away your business details from the HTTP transfer protocol, and return self-descriptive codes directly in the response body:&lt;/p&gt;&lt;code&gt;{
    "code": "jwt_has_expired"
}&lt;/code&gt;&lt;p&gt;Cognitive load on the frontend side: &lt;code&gt;🧠&lt;/code&gt; (fresh, no facts are held in mind)&lt;lb/&gt; Cognitive load on the QA side: &lt;code&gt;🧠&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The same rule applies to all sorts of numeric statuses (in the database or wherever) - prefer self-describing strings. We are not in the era of 640K computers to optimise for memory.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;People spend time arguing between&lt;/p&gt;&lt;code&gt;401&lt;/code&gt;and&lt;code&gt;403&lt;/code&gt;, making decisions based on their own mental models. New developers are coming in, and they need to recreate that thought process. You may have documented the "whys" (ADRs) for your code, helping newcomers to understand the decisions made. But in the end it just doesn't make any sense. We can separate errors into either user-related or server-related, but apart from that, things are kind of blurry.&lt;/quote&gt;&lt;p&gt;P.S. It's often mentally taxing to distinguish between "authentication" and "authorization". We can use simpler terms like "login" and "permissions" to reduce the cognitive load.&lt;/p&gt;&lt;p&gt;Do not repeat yourself - that is one of the first principles you are taught as a software engineer. It is so deeply embedded in ourselves that we can not stand the fact of a few extra lines of code. Although in general a good and fundamental rule, when overused it leads to the cognitive load we can not handle.&lt;/p&gt;&lt;p&gt;Nowadays, everyone builds software based on logically separated components. Often those are distributed among multiple codebases representing separate services. When you strive to eliminate any repetition, you might end up creating tight coupling between unrelated components. As a result changes in one part may have unintended consequences in other seemingly unrelated areas. It can also hinder the ability to replace or modify individual components without impacting the entire system. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;In fact, the same problem arises even within a single module. You might extract common functionality too early, based on perceived similarities that might not actually exist in the long run. This can result in unnecessary abstractions that are difficult to modify or extend.&lt;/p&gt;&lt;p&gt;Rob Pike once said:&lt;/p&gt;&lt;quote&gt;&lt;p&gt;A little copying is better than a little dependency.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;We are tempted to not reinvent the wheel so strong that we are ready to import large, heavy libraries to use a small function that we could easily write by ourselves.&lt;/p&gt;&lt;p&gt;All your dependencies are your code. Going through 10+ levels of stack trace of some imported library and figuring out what went wrong (because things go wrong) is painful.&lt;/p&gt;&lt;p&gt;There's a lot of "magic" in frameworks. By relying too heavily on a framework, we force all upcoming developers to learn that "magic" first. It can take months. Even though frameworks enable us to launch MVPs in a matter of days, in the long run they tend to add unnecessary complexity and cognitive load.&lt;/p&gt;&lt;p&gt;Worse yet, at some point frameworks can become a significant constraint when faced with a new requirement that just doesn't fit the architecture. From here onwards people end up forking a framework and maintaining their own custom version. Imagine the amount of cognitive load a newcomer would have to build (i.e. learn this custom framework) in order to deliver any value. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;By no means do we advocate to invent everything from scratch!&lt;/p&gt;&lt;p&gt;We can write code in a somewhat framework-agnostic way. The business logic should not reside within a framework; rather, it should use the framework's components. Put a framework outside of your core logic. Use the framework in a library-like fashion. This would allow new contributors to add value from day one, without the need of going through debris of framework-related complexity first.&lt;/p&gt;&lt;p&gt;There is a certain engineering excitement about all this stuff.&lt;/p&gt;&lt;p&gt;I myself was a passionate advocate of Hexagonal/Onion Architecture for years. I used it here and there and encouraged other teams to do so. The complexity of our projects went up, the sheer number of files alone had doubled. It felt like we were writing a lot of glue code. On ever changing requirements we had to make changes across multiple layers of abstractions, it all became tedious. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Abstraction is supposed to hide complexity, here it just adds indirection. Jumping from call to call to read along and figure out what goes wrong and what is missing is a vital requirement to quickly solve a problem. With this architecture’s layer uncoupling it requires an exponential factor of extra, often disjointed, traces to get to the point where the failure occurs. Every such trace takes space in our limited working memory. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This architecture was something that made intuitive sense at first, but every time we tried applying it to projects it made a lot more harm than good. In the end, we gave it all up in favour of the good old dependency inversion principle. No port/adapter terms to learn, no unnecessary layers of horizontal abstractions, no extraneous cognitive load.&lt;/p&gt;&lt;p&gt;If you think that such layering will allow you to quickly replace a database or other dependencies, you're mistaken. Changing the storage causes lots of problems, and believe us, having some abstractions for the data access layer is the least of your worries. At best, abstractions can save somewhat 10% of your migration time (if any), the real pain is in data model incompatibilities, communication protocols, distributed systems challenges, and implicit interfaces.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;With a sufficient number of users of an API,&lt;/p&gt;&lt;lb/&gt;it does not matter what you promise in the contract:&lt;lb/&gt;all observable behaviors of your system&lt;lb/&gt;will be depended on by somebody.&lt;/quote&gt;&lt;p&gt;We did a storage migration, and that took us about 10 months. The old system was single-threaded, so the exposed events were sequential. All our systems depended on that observed behaviour. This behavior was not part of the API contract, it was not reflected in the code. A new distributed storage didn't have that guarantee - the events came out-of-order. We spent only a few hours coding a new storage adapter, thanks to an abstraction. We spent the next 10 months on dealing with out-of-order events and other challenges. It's now funny to say that abstractions helps us replace components quickly.&lt;/p&gt;&lt;p&gt;So, why pay the price of high cognitive load for such a layered architecture, if it doesn't pay off in the future? Plus, in most cases, that future of replacing some core component never happens.&lt;/p&gt;&lt;p&gt;These architectures are not fundamental, they are just subjective, biased consequences of more fundamental principles. Why rely on those subjective interpretations? Follow the fundamental rules instead: dependency inversion principle, single source of truth, cognitive load and information hiding. Your business logic should not depend on low-level modules like database, UI or framework. We should be able to write tests for our core logic without worrying about the infrastructure, and that's it. Discuss.&lt;/p&gt;&lt;p&gt;Do not add layers of abstractions for the sake of an architecture. Add them whenever you need an extension point that is justified for practical reasons.&lt;/p&gt;&lt;p&gt;Layers of abstraction aren't free of charge, they are to be held in our limited working memory.&lt;/p&gt;&lt;p&gt;Domain-driven design has some great points, although it is often misinterpreted. People say, "We write code in DDD", which is a bit strange, because DDD is more about the problem space rather than the solution space.&lt;/p&gt;&lt;p&gt;Ubiquitous language, domain, bounded context, aggregate, event storming are all about problem space. They are meant to help us learn the insights about the domain and extract the boundaries. DDD enables developers, domain experts and business people to communicate effectively using a single, unified language. Rather than focusing on these problem space aspects of DDD, we tend to emphasise particular folder structures, services, repositories, and other solution space techniques.&lt;/p&gt;&lt;p&gt;Chances are that the way we interpret DDD is likely to be unique and subjective. And if we build code upon this understanding, i.e., if we create a lot of extraneous cognitive load - future developers are doomed. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Team Topologies provides a much better, easier to understand framework that helps us split the cognitive load across teams. Engineers tend to develop somewhat similar mental models after learning about Team Topologies. DDD, on the other hand, seems to be creating 10 different mental models for 10 different readers. Instead of being common ground, it becomes a battleground for unnecessary debates.&lt;/p&gt;&lt;quote&gt;&lt;p&gt;The problem is that familiarity is not the same as simplicity. They feel the same — that same ease of moving through a space without much mental effort — but for very different reasons. Every “clever” (read: “self-indulgent”) and non-idiomatic trick you use incurs a learning penalty for everyone else. Once they have done that learning, then they will find working with the code less difficult. So it is hard to recognise how to simplify code that you are already familiar with. This is why I try to get “the new kid” to critique the code before they get too institutionalised!&lt;/p&gt;&lt;p&gt;It is likely that the previous author(s) created this huge mess one tiny increment at a time, not all at once. So you are the first person who has ever had to try to make sense of it all at once.&lt;/p&gt;&lt;p&gt;In my class I describe a sprawling SQL stored procedure we were looking at one day, with hundreds of lines of conditionals in a huge WHERE clause. Someone asked how anyone could have let it get this bad. I told them: “When there are only 2 or 3 conditionals, adding another one doesn’t make any difference. By the time there are 20 or 30 conditionals, adding another one doesn’t make any difference!”&lt;/p&gt;&lt;p&gt;There is no “simplifying force” acting on the code base other than deliberate choices that you make. Simplifying takes effort, and people are too often in a hurry.&lt;/p&gt;&lt;p&gt;Thanks to Dan North for his comment.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;If you've internalized the mental models of the project into your long-term memory, you won't experience a high cognitive load.&lt;/p&gt;&lt;p&gt;The more mental models there are to learn, the longer it takes for a new developer to deliver value.&lt;/p&gt;&lt;p&gt;Once you onboard new people on your project, try to measure the amount of confusion they have (pair programming may help). If they're confused for more than ~40 minutes in a row - you've got things to improve in your code.&lt;/p&gt;&lt;p&gt;If you keep the cognitive load low, people can contribute to your codebase within the first few hours of joining your company.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Our architecture is a standard CRUD app architecture, a Python monolith on top of Postgres&lt;/item&gt;&lt;item&gt;How Instagram scaled to 14 million users with only 3 engineers&lt;/item&gt;&lt;item&gt;The companies where we were like ”woah, these folks are smart as hell” for the most part failed&lt;/item&gt;&lt;item&gt;One function that wires up the entire system. If you want to know how the system works - go read it&lt;/item&gt;&lt;/list&gt;&lt;p&gt;These architectures are quite boring and easy to understand. Anyone can grasp them without much mental effort.&lt;/p&gt;&lt;p&gt;Involve junior developers in architecture reviews. They will help you to identify the mentally demanding areas.&lt;/p&gt;&lt;p&gt;Maintaining software is hard, we would need every bit of mental effort we can save.&lt;/p&gt;&lt;p&gt;Imagine for a moment that what we inferred in the second chapter isn’t actually true. If that’s the case, then the conclusion we just negated, along with the conclusions in the previous chapter that we had accepted as valid, might not be correct either. &lt;code&gt;🤯&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Do you feel it? Not only do you have to jump all over the article to get the meaning (shallow modules!), but the paragraph in general is difficult to understand. We have just created an unnecessary cognitive load in your head. Do not do this to your colleagues.&lt;/p&gt;&lt;p&gt;We should reduce any cognitive load above and beyond what is intrinsic to the work we do.&lt;/p&gt;&lt;head&gt;Comments&lt;/head&gt;&lt;p&gt;Rob Pike&lt;lb/&gt;Nice article.&lt;/p&gt;&lt;p&gt;Andrej Karpathy (ChatGPT, Tesla)&lt;lb/&gt;Nice post on software engineering. Probably the most true, least practiced viewpoint.&lt;/p&gt;&lt;p&gt;Elon Musk&lt;lb/&gt;True.&lt;/p&gt;&lt;p&gt;Addy Osmani (Chrome, the most complex software system in the world)&lt;lb/&gt;I've seen countless projects where smart developers created impressive architectures using the latest design patterns and microservices. But when new team members tried to make changes, they spent weeks just trying to understand how everything fits together. The cognitive load was so high that productivity plummeted and bugs multiplied.&lt;/p&gt;&lt;p&gt;The irony? Many of these complexity-inducing patterns were implemented in the name of "clean code."&lt;/p&gt;&lt;p&gt;What really matters is reducing unnecessary cognitive burden. Sometimes this means fewer, deeper modules instead of many shallow ones. Sometimes it means keeping related logic together instead of splitting it into tiny functions.&lt;/p&gt;&lt;p&gt;And sometimes it means choosing boring, straightforward solutions over clever ones. The best code isn't the most elegant or sophisticated - it's the code that future developers (including yourself) can understand quickly.&lt;/p&gt;&lt;p&gt;Your article really resonates with the challenges we face in browser development. You're absolutely right about modern browsers being among the most complex software systems. Managing that complexity in Chromium is a constant challenge that aligns perfectly with many of the points you made about cognitive load.&lt;/p&gt;&lt;p&gt;One way we try to handle this in Chromium is through careful component isolation and well-defined interfaces between subsystems (like rendering, networking, JavaScript execution, etc.). Similar to your deep modules example with Unix I/O - we aim for powerful functionality behind relatively simple interfaces. For instance, our rendering pipeline handles incredible complexity (layout, compositing, GPU acceleration) but developers can interact with it through clear abstraction layers.&lt;/p&gt;&lt;p&gt;Your points about avoiding unnecessary abstractions really hit home too. In browser development, we constantly balance between making the codebase approachable for new contributors while handling the inherent complexity of web standards and compatibility.&lt;/p&gt;&lt;p&gt;Sometimes the simplest solution is the best one, even in a complex system.&lt;/p&gt;&lt;p&gt;antirez (Redis)&lt;lb/&gt;Totally agree about it :) Also, what I believe is missing from mentioned "A Philosophy of Software Design" is the concept of "design sacrifice". That is, sometimes you sacrifice something and get back simplicity, or performances, or both. I apply this idea continuously, but often is not understood.&lt;/p&gt;&lt;p&gt;A good example is the fact that I always refused to have hash items expires. This is a design sacrifice because if you have certain attributes only in the top-level items (the keys themselves), the design is simpler, values will just be objects. When Redis got hash expires, it was a nice feature but required (indeed) many changes to many parts, raising the complexity.&lt;/p&gt;&lt;p&gt;Another example is what I'm doing right now, Vector Sets, the new Redis data type. I decided that Redis would not be the source of truth about vectors, but that it can just take an approximate version of them, so I was able to do on-insert normalization, quantization without trying to retain the large floats vector on disk, and so forth. May vector DBs don't sacrifice the fact of remembering what the user put inside (the full precision vector).&lt;/p&gt;&lt;p&gt;These are just two random examples, but I apply this idea everywhere. Now the thing is: of course one must sacrifice the right things. Often, there are 5% features that account for a very large amount of complexity: that is a good thing to kill :D&lt;/p&gt;&lt;p&gt;A developer from the internet&lt;lb/&gt;You would not hire me... I sell myself on my track record of released enterprise projects.&lt;/p&gt;&lt;p&gt;I worked with a guy that could speak design patterns. I could never speak that way, though I was one of the few that could well understand him. The managers loved him and he could dominate any development conversation. The people working around him said he left a trail of destruction behind him. I was told that I was the first person that could understand his projects. Maintainability matters. I care most about TCO. For some firms, that's what matters.&lt;/p&gt;&lt;p&gt;I logged into Github after not being there for a while and for some reason it took me to an article in a repository by someone that seemed random. I was thinking "what is this" and had some trouble getting to my home page, so I read it. I didn't really register it at the time, but it was amazing. Every developer should read it. It largely said that almost everything we've been told about programming best practices leads to excessive "cognitive load", meaning our minds are getting kicked by the intellectual demands. I've known this for a while, especially with the demands of cloud, security and DevOps.&lt;/p&gt;&lt;p&gt;I also liked it because it described practices I have done for decades, but never much admit to because they are not popular... I write really complicated stuff and need all the help I can get.&lt;/p&gt;&lt;p&gt;Consider, if I'm right, it popped up because the Github folks, very smart people, though that developers should see it. I agree.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45074248</guid></item><item><title>Bcachefs Goes to "Externally Maintained"</title><link>https://lwn.net/Articles/1035736/</link><description>&lt;doc fingerprint="2ff3981fd8875e97"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Bcachefs goes to "externally maintained"&lt;/head&gt;
    &lt;p&gt; Posted Aug 29, 2025 17:30 UTC (Fri) by intelfx (subscriber, #130118) [Link] (46 responses) &amp;gt; This change also suggests, though, that the immediate removal of bcachefs from the mainline kernel is not in the cards. How would that work? If further changes are not accepted into mainline, but fs/bcachefs/ is not being removed thereof, then what exactly happens to it (the physical code living under that path)? Is it going to slowly bit-rot, with users being instructed to ignore in-tree code and use some other tree instead? Posted Aug 29, 2025 17:42 UTC (Fri) by zdzichu (subscriber, #17118) [Link] (45 responses) Posted Aug 29, 2025 19:21 UTC (Fri) by NYKevin (subscriber, #129325) [Link] (44 responses) But there are a number of unstated assumptions here. The most important problem is how this upstreaming process will work. I can think of a few different alternatives, but the most straightforward option is for Kent to designate somebody. That person would then be responsible for all interaction with the kernel process, including sending emails, responding to code reviews, changing the code as requested (or telling Kent to do so and relaying his responses), etc. This strikes me as a highly difficult and thankless job that I certainly would not want to do. You could easily end up recreating exactly the same argument that Kent was regularly getting into (over release schedules, merge windows, etc.), but by proxy instead of directly. Ideally, Kent stops caring about the kernel's release processes altogether, and takes a mindset of "the kernel is [designee's] problem, and I don't have to deal with it aside from applying a few patches every now and then." Most of the alternatives are worse. If we instead suppose that the kernel takes bcachefs code without Kent's explicit approval or involvement, then the kernel upstream is a de facto fork of bcachefs (or they're just mirroring him, but there are governance problems with that). I'm not convinced that Linus et al. want to maintain a fork in this situation. Posted Aug 29, 2025 22:11 UTC (Fri) by koverstreet (✭ supporter ✭, #4296) [Link] (43 responses) And release process is something I care deeply about, for the simple reason that I support my code. I respond to nearly all of the user bug reports and stare at the test dashboards; I want users to have the most stable and trustworthy code I can provide. Broken release process is exactly why bcachefs-tools isn't in Debian as well; the package maintainer who took it upon himself to package bcachefs-tools in Debian put project rules ahead of shipping working code, then broke the build and sat in it - and I got stuck with the bug reports. So I'm equally curious where we go from here, I'm no more in the loop than anyone else. Exciting times, as the Chinese proverb says. Posted Aug 30, 2025 4:57 UTC (Sat) by NYKevin (subscriber, #129325) [Link] (4 responses) The distros are downstreams. If they want to package and ship your code, in whatever way they see fit, you've already given them permission to do so. And they are not shy about exercising that permission. I remember several years ago, jwz asked Debian to stop shipping XScreenSaver, because he disagreed with their practice of backporting fixes to old versions. Debian said no, and XScreenSaver is still in the repository today. As you might imagine, some rather harsh words were exchanged, but in the end, both sides went back to their respective corners of the internet and proceeded to mostly ignore each other. Linus, however, is not in the business of playing that game. If there's nobody actively maintaining (his copy of) bcachefs, then I find it hard to believe it's going to be allowed to stick around indefinitely. &amp;gt; So I'm equally curious where we go from here, I'm no more in the loop than anyone else. Exciting times, as the Chinese proverb says. My interpretation of events is that there are only three long-term paths that make sense here: * You accept that you cannot control what appears in Linus's tree, but would prefer that some recent-ish version of bcachefs is there (as opposed to no bcachefs or a very old bcachefs). You designate somebody as I've described upthread, they upstream patches at whatever rate Linus is willing to take them, and everybody is more or less willing to live with the result. I do not see any plausible outcome where you are allowed to control what appears in Linus's tree. He has very explicitly closed the door on that. For expository purposes, and because you are a functioning adult, I have assumed that you will accept this lack of control, but that does not actually matter - one of the above scenarios will inevitably play out, regardless of your opinion of it. The only choice you have at this point is whether it's the first bullet or one of the other two. I do not say this to be cruel. Based on your words in this and other threads, I genuinely believe that this process has been very painful for you, and I doubt you enjoy being reminded that Linus's tree does, in fact, belong to Linus (I'm sure other developers have screamed that at you enough times by now). Unfortunately, this is not a matter of right or wrong. It is a matter of power. You are aggrieved about something that neither Linus, nor anybody else on LKML, is prepared to recognize as an injury to you. Regardless of whether that is the right way or the wrong way of looking at it, Linus is going to conduct the kernel's release cycle as he sees fit. The *healthy* way of looking at it is to accept that that is not within your power to change, and redirect your attention to the things you can change. Posted Aug 30, 2025 16:30 UTC (Sat) by ttuttle (subscriber, #51118) [Link] Posted Aug 30, 2025 20:48 UTC (Sat) by linuxrocks123 (subscriber, #34648) [Link] (2 responses) But I disagree with him that you should focus any attention on that. The healthiest way to approach life is not to try to control what other people do, nor to think about what they might do in response to what you do. Rather, the healthiest approach to life, and the only way to be spiritually free in life, is to do whatever you want to do, so long as what you want to do is both legal and ethical. What other people may or may not do in response to that is their own problem, because, as long as what you are doing is legal, they can't make it your problem. (Unless you let them, so don't let them.) Applying that philosophy to this situation, I think you should just shrug, ignore Linus, and wash your hands of the in-tree version of bcachefs. The in-tree version of the code is what someone else is doing, not what you're doing, so it's not your problem. DKMS will work fine for you. Btw, I have a question for you, because I am interested in bcachefs but have not tried it yet. What I want out of my filesystem is as much speed as possible: because I have backups, I have no concern about data integrity after an unclean shutdown. I currently use ext4 with no journaling and the following knobs set in sysctl.conf: vm.dirty_ratio = 90 I also have libeatmydata.so listed in ld.so.preload to make sure programs can't override my preference for speed by calling fsync(). Given my preferences, would you recommend bcachefs for me over my current ext4-based setup, and, if so, how could I configure bcachefs for my desired speed versus integrity tradeoff? Thanks for any help. Posted Aug 30, 2025 23:41 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] Yup, agreed 100%. My goal is to develop a bulletproof modern filesystem that people can depend on; I said even before bcachefs was merged that I'm not going to let kernel drama take over my life, so I'm OK with bcachefs shipping as a DKMS module. But if you look at where this leaves Linux for filesystems, it is a sad state of affairs. XFS has been burning through maintainers; they're on their third, and it's not good for a project to be losing that continuity of leadership and experience, and "upstream burnout" (read: working with Linus) was the major factor, from speaking with them. btrfs is still eating filesystems - they may be better than they were, but I still see reports regularly, and they don't seem to be taking reliability seriously. It's starting to look like the Linux filesystem world in general is imploding, and at this point all I can do is put on a good pair of running shoes and hope DKMS works out. &amp;gt; Btw, I have a question for you, because I am interested in bcachefs but have not tried it yet. What I want out of my filesystem is as much speed as possible: because I have backups, I have no concern about data integrity after an unclean shutdown. I currently use ext4 with no journaling and the following knobs set in sysctl.conf: If speed is all you want you might not want to run bcachefs yet. On the one hand, benchmarks don't tell the whole story - I've had a lot of users tell me that things do feel more responsive on bcachefs than btrfs, but there are definitely areas where we're slower than we should be (e.g. journalling overhead is higher than it should be, and I have WIP stuff for that) and still some outright performance bugs to chase down. But robustness and reliability is waaaaaay more of a priority for me than performance, and the userbase seems to be more interested in erasure coding and the management stuff than performance, so it'll be awhile before I'm working on performance in earnest. Posted Aug 31, 2025 8:10 UTC (Sun) by NYKevin (subscriber, #129325) [Link] Just to clarify, I did not state that Kent *should* focus any attention on anything in particular. I was responding to Kent's comment, which implied that he wanted to focus on the kernel's release cycle: &amp;gt; And release process is something I care deeply about, for the simple reason that I support my code. I respond to nearly all of the user bug reports and stare at the test dashboards; I want users to have the most stable and trustworthy code I can provide. I was taking that statement as a given, not endorsing it as a "correct" thing for Kent to want. It's not my place to tell Kent what he should or should not want, so I restricted myself to talking about the likely consequences of that desire. I did state that Kent should accept that Linus's tree and the kernel release cycle are beyond Kent's ability to control. But that would seem to be a necessary prerequisite to Kent washing his hands of the matter (or at least, it would certainly help the medicine go down easier, don't you think?). Posted Aug 30, 2025 7:57 UTC (Sat) by paravoid (subscriber, #32869) [Link] (34 responses) Debian was not even close to the topic at hand, and yet you felt the need to bring it up, just to attack someone, and with information that is misrepresenting the truth. This is something you've done before, and you were very recently called out in lkml for it. Stop. To correct the record: bcachefs-tools is not in Debian because Kent was impossible to work with and personally attacked, smeared and/or alienated multiple sets of distinct contributors that attempted to work with him in good faith, one after another. It was ultimately removed from unstable because noone was able to get through. Source: I am one of them. Posted Aug 30, 2025 11:44 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (14 responses) He did so anyways, and then swapped out bindgen for an old version that was explicitly unsupported according to the Cargo.toml, which broke the build, and he sat on it and Debian users stopped getting updates (I didn't even see a report until months later). This resulted in users being unable to access their filesystems. There was briefly a buggy version of bcachefs-tools that couldn't pass mount options correctly; users in every other distro got a fix quickly, but Debian users did not - and we found out about this when a lot of users weren't able to mount in degraded mode after having a drive die. What you're doing is conflating technical criticism with personal, and then using that as an excuse to ramp up the drama. Technical criticism, including pointing out failures of processes, has to be ok for engineering to function, otherwise we don't learn from our mistakes. That can make for a harsh learning environment, but when you're shipping critical system components that have to work, that's what you signed up for; we have responsibilities. The person in question was warned explicitly that what he was doing was a bad idea; he could have at any point said "this is too complicated an issue for me to handle; I'll let someone else take this one" (and there are mechanisms in Debian process for obtaining exceptions to process rules that could have avoided this, by simply skipping the Rust dependency unbundling with a clear explanation of why); he ignored advice and plowed ahead, and a lot of people were affected by those actions. When we work on this kind of code, we have to be responsible for the work we do, including our mistakes. Posted Aug 30, 2025 14:25 UTC (Sat) by ma4ris8 (subscriber, #170509) [Link] (13 responses) Listen part: I'm trying to repeat roughly the same as you wrote above, to show that I listened you: First you state that maintainer switched Rust dependencies for the packaged versions from Debian. He changed Rust dependencies anyways, and then swapped out bindgen into older version, Important end question: Did I repeat (re-phrase in text) precisely what you wrote? Answer part: For me it sounds like there were some mistakes done by both you and others. How to communicate (listen) effectively, to heal relationships? This way of listening is mentioned in What I showed, is one way to restore human relationships, with Linus and others: If you get a backslash, you was just given an opportunity to listen the complaint. By doing this just very slightly to not burden others, I've seen that sometimes this listening technique helps on-line, in addition of meeting face to face. Posted Aug 30, 2025 18:21 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (12 responses) Why are you trying to bothsides this? You seem to have the facts straight, but I'm not at all clear on what you think I did wrong. All this was explained clearly, calmly and patiently to the Debian package maintainer when he started; he decided to do it his way, and when the breakage became apparent I asked if he was going to fix it and he just said "nope, too complicated" and walked off. So I got stuck with warning bcachefs users away from Debian, and he wrote a screed of a blog post about how impossible I am to work with. Sorry, but from where I sit that just looks crazy. I'm all about focusing on the human aspect, sitting down with people and having open and honest conversations. I do that regularly, and believe me I and others have tried ratcheting down the tensions, bringing the focus back to the technical and looking for ways to make this easier and take things in little steps. The whole rest of the 6.16 merge cycle after the journal_rewind fiasco was just that, from myself and others; we've tried to bridge the gap, bring the focus back to the technical, look for ways to make things work - it doesn't seem to be getting us anywhere. Posted Aug 30, 2025 21:00 UTC (Sat) by josh (subscriber, #17465) [Link] (11 responses) You don't demonstrate any degree of understanding of why requirements other than your own matter. You talk about what the Debian maintainer did, and how you told them not to. You don't talk about why those requirements exist and what you did to help them meet those requirements. You act like the story begins and ends with "I told them no and they didn't obey". This is on par with what happens with the Linux kernel. You don't demonstrate and communicate that you understand requirements other than your own and place weight on them. You just act like they're obstacles to getting *your* requirements met, and try to work around them. Posted Aug 30, 2025 21:48 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (10 responses) It's not "he didn't obey", it's "he did something stupid that I warned him was a bad idea and then he didn't stick around to resolve the situation and a has to deal with the fallout". It's not an authority thing, it's just about making good decisions being responsible for your decisions. Posted Aug 30, 2025 22:09 UTC (Sat) by josh (subscriber, #17465) [Link] (7 responses) Package upstreams vs Debian process typically ends with "your package is not more important than our consistency"; that is a reliably predictable outcome. If you want to *change* Debian process or policy, that's a conversation that requires a detailed case for doing so, which requires understanding of why the requirements are what they are, not just why you want them to be different. Posted Aug 30, 2025 22:43 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (6 responses) Posted Aug 31, 2025 1:29 UTC (Sun) by comex (subscriber, #71521) [Link] (5 responses) (1) In April 2024, Debian unstable was shipping too-old versions of some packages. In particular, bcachefs-tools wanted bindgen 0.69.4 (released upstream 2 months prior), while Debian unstable was shipping 0.66.1 (released upstream 8 months prior). (2) In April 2024, Debian unstable was shipping too-*new* versions of some packages. In particular, bcachefs-tools wanted rust-errno 0.2.x, while rust-errno 0.3.0 had released upstream 14 months prior, and Debian unstable was shipping 0.3.8. (3) Despite these conflicts happening in Debian unstable, the Debian maintainer seemed more concerned about how bcachefs-tools would be maintained in the future in Debian stable. To me these seem like three different problems with three different solutions. (1) If Debian unstable was shipping old versions of some dependencies, then Debian should have updated those packages. Perhaps other dependents would have broken with newer versions of the dependencies, but AFAICT there was no specific evidence of this. 2 months (the age of bindgen 0.69.4 at the time) sounds to me like a reasonable lead time for a dependency. If Debian’s processes make it too hard to update Rust packages at a reasonable pace *in unstable*, then maybe they need to be changed, but I don’t know whether that’s true or whether the issue was something else; perhaps the maintainer's stated lack of experience with Rust packaging. (2) If bcachefs-tools was depending on old versions of some packages, then bcachefs-tools should have been updated. The maintainer could have submitted a PR upstream. That would be easier said than done if this were something like Kubernetes [2], but in this case the blog post only cited 2 packages that needed to be updated. As for (3), I don’t fully understand the problem. Debian stable freezes the entire set of packages. That includes the Rust packages, but also bcachefs-tools and the kernel. Some Linux distros have “hardware enablement” branches where they upgrade the kernel separately from the rest of the system, but AFAIK Debian does not. So why would someone maintaining bcachefs-tools on stable care what is happening upstream? Overall - I'm sure there are some factors I'm missing. But every time I've seen this come up, even the knowledgeable commenters seem to smoosh the issue into "bcachefs-tools is not stable enough for Debian", and to me that really seems like an oversimplification and misunderstanding. Does anyone have additional light to shed? Sources: Posted Aug 31, 2025 1:49 UTC (Sun) by koverstreet (✭ supporter ✭, #4296) [Link] (3 responses) bcachefs-tools updates probably can't follow the Debian "hard freeze for two years" model, and this comes up in other critical system packages, too. _Maybe_ they can, but it's too early to be making those kinds of assumptions and locking us down any particular path. The big concern is that just because a user is running Debian stable they may be running a newer kernel (for drivers, generally), and we want bcachefs-tools to be in sync with the kernel. It's not strictly necessary, we have more compat options than other filesystems (due to in-kernel repair being first class), but it puts us in an uncomfortable situation. Debian may not have official "hardware enablement", but it's still commonplace to pull in a newer kernel from a different channel, and that's expected to work. The kernel has hard requirements about not breaking userspace for exactly the same reason; bcachefs takes the same approach. Upgrades and downgrades should always work; that's a huge part of what we've been working through in the experimental phase. If we have to ship/backport a new bcachefs-tools for Debian stable users, unbundling Rust dependencies at all completely breaks that. But the bigger point is that it's too early to even know what backports are going to like for bcachefs, and we don't want to be in Debian stable at all yet. _But_, for the people in Debian and are running bcachefs now, they still need a supported and working filesystem and process for shipping bugfixes. That's the issue that needs to be solved today for any Debian users to be running bcachefs, not "how do we support Debian stable users for the non-experimental version of bcachefs that will be getting backports and doesn't even exist yet". The other big thing to note that makes debundling really problematic is that Debian is not the only distro. If other distros were unbundling (thank god we got Fedora to agree not to), and their Rust library versions are not in sync - see where that puts us? The last think I want is to get sucked into dealing with is different distros with different conflicting library requirements. It's not the end of the world for things like rust-errno; I would have groaned at that one, but swapping that one out for a different version is unlikely to cause real breakage. Bindgen, OTOH - FFI stuff has the very real potential to introduce the nastiest sort of heisenbugs which won't be caught by the compiler (they have happened and they are _not_ fun), and even I wouldn't trust my test coverage to catch all of those - and Debian does not replicate that testing. Swapping out bindgen was actively dangerous, and never should have even been attempted. I specifically told the Debian package maintainer that that one was dangerous to change, and he did it anyways... Posted Aug 31, 2025 2:11 UTC (Sun) by koverstreet (✭ supporter ✭, #4296) [Link] (1 responses) We had another example of that from just yesterday: Arch flipped on LTO, and it turns out that produces a miscompilation, because the final link is now done by rustc which has different rules than C code about eliding bounds checks. This one was minor, it just caused the progress indicators on data jobs to display incorrectly, but it's quite the scary bug. If distros want to make these changes (and LTO is a perfectly fine thing in principle), we really want them contributed upstream so they can get proper testing and QA. Posted Aug 31, 2025 3:40 UTC (Sun) by jmalcolm (subscriber, #8876) [Link] Seems very reasonable Posted Aug 31, 2025 3:47 UTC (Sun) by jmalcolm (subscriber, #8876) [Link] Thank you for this. In my experience you have succeeded. &amp;gt; bcachefs-tools updates probably can't follow the Debian "hard freeze for two years" model Agreed. In a distro like Debian, I do not see how you adopt something like bcachefs until bcachefs itself has stabilized enough to flow into Debian Stable. If you are going to try, you have to be getting the kernel and userland from outside of Debian. &amp;gt; it's still commonplace to pull in a newer kernel from a different channel, and that's expected to work Sure. But when there is a userspace component, a "working" kernel is not enough. Posted Aug 31, 2025 9:14 UTC (Sun) by paravoid (subscriber, #32869) [Link] Originally bcachefs-tools was a C program. Jonathan Carter maintained it in Debian. At some point it gained optional Rust dependencies, some of which were not in Debian, and it looked difficult so Jonathan elected to opt-out of the Rust parts. The package was also poorly maintained, which I reported in all transparency to the BTS https://bugs.debian.org/1066929. I also talked a few times in private to Jonathan, and I understand and respect his circumstances. I stepped up to help out, in the Debian BTS and in private, to bring the package back to Debian standards and enable the Rust parts - this was https://bugs.debian.org/1060256. I also got in touch in private with the kernel maintainers (Salvatore Bonaccorso) as to enable bcachefs in the kernel package: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1054620#15 In terms of Rust dependencies: for some Debian was behind and/or missing; for several of them, Debian was ahead; most of them were spurious/cruft on the bcachefs tree and not actual dependencies. I engaged with upstream with PRs, #203, #204, #205, and worked with folks from the Debian Rust team to bring the rest of them to Debian. All were merged (except one of the three that Kent reauthored as-is, dropped any credit, and silently closed the MR. Whatever.). You can find a summary at https://bugs.debian.org/1060256 and also gave a similar summary to upstream with https://github.com/koverstreet/bcachefs-tools/issues/202 Steinar H. Gunderson did a ton of work of adjusting the package to enable the Rust dependencies, communicated promptly with the maintainer, and also build out-of-Debian packages for it for others to test. Him and I talked quite a bit with each other and talked about comaintaining the package. I know he had talked to upstream as well through IRC etc. In terms of bindgen: at the time bcachefs-tools was relying on a custom fork, bch_bindgen, of an older bindgen that Kent made, which we could potentially vendor, but it didn't seem right. Our work in Debian is to look at the whole ecosystem, and avoid carrying multiple forked versions that every upstream vendors, if possible. According to Kent IIRC it was also kind of a hack. (Note that the package worked without this fork + a revert of the commit before the fork. Just not on i386, plus it was a custom patch that we shouldn't carry.) So I brought this up on the bcachefs bug tracker, and another bcachefs contributor, Thomas Bertschinger, found a way to fix this struct packing/alignment issue in a Rust-upstream-acceptable way with https://github.com/rust-lang/rust/issues/59154. He was awesome, and and him I had very collegial private exchanges about this. I'm not a Rust person, so I talked to a few folks in the Debian Rust team abut updating bindgen in Debian, from 0.66.1 to 0.69.4, but it's a complicated transition and it would take more time. Instead as a stopgap, I filed https://bugs.debian.org/1078698 with a backport the patch to 0.66.1 (cleanly applied). Rust folks uploaded 0.66.1-9 with this patch a few months later. This was the last blocker. Newer versions of bindgen found their way to Debian after that (trixie was released with 0.7.1). The package was going to be there in ~Oct 2024: latest version, all features enabled, no custom patches, no lagging dependencies. I'm 100% confident it would have made it into the trixie release. All in all, several people collaborated across the ecosystem to make this happen. The whole ecosystem benefited: bcachefs upstream became better as a result of this work, Debian shipped more and updated Rust software, Rust/bindgen upstream gained code to address a real user need. Several of us were in touch with each other in public and in private, collegial to each other, respecting each other's work, dragging each other forward when one of us was unable to make progress, either because of personal circumstances, lack of time, or lack of knowledge in a particular ecosystem. All in the collaborative spirit of large scale open source software development. Then Kent started throwing profanities and "PSAs" all around and started treating people like shit in public across multiple mediums, often talking them down in their absence, including unsubstantiated attacks in /r/bcachefs/ that he subsequently locked giving no opportunity for a rebuttal. I quoted one of these emails in another comment here. He also started, late in the game, bringing up Debian as a problem as a whole, its "lack of flexibility" and its policies around vendoring as the problem and... expecting Debian to change its Rust policy (right or wrong) across the board... for a leaf package for an experimental filesystem that ~noone is using. (Again, we had a perfectly working package at that time.). Kent around that time showed the same aggression to his peers and sense of entitlement (IMHO) in Linux, ultimately resulting in a CoC violation and public spats with Linus about the -rc merge policy respectively, so it became clear, at least to me, that this wasn't an isolated incident, and working with this individual is not how I want to be spending my limited, volunteer time. And that was that. All of us that had been involved in the Debian package halted our involvement, package was removed from unstable and orphaned and noone has picked it up yet. I don't know why Debian was brought up on LWN and in this thread specifically. This is another case of completely unrelated revisionist history-making in my book (same as it has been happening e.g upstream w/ btrfs) which is why I felt the need to intervene. HTH! Posted Aug 30, 2025 22:10 UTC (Sat) by lordsutch (guest, #53) [Link] (1 responses) If an upstream doesn't want to play by Debian's rules or thinks the release process is too slow, they can set up their own package repository. Posted Aug 30, 2025 23:42 UTC (Sat) by pizza (subscriber, #46) [Link] I'm sorry, but if "the distribution's rules" result in the distributed package being so broken that it directly leads to user data loss, then those rules are not fit for purpose. Fortunately for Debian, "the rules" provide a mechanism for exceptions where necessary. If a major data loss bug isn't sufficient to qualify for a necessary exception, then I repeat myself about those rules not being fit for purpose. Posted Aug 30, 2025 12:24 UTC (Sat) by muase (subscriber, #178466) [Link] (16 responses) I know it's not the distros' fault; it's simply how LTS has to work in practice – however I can understand the frustration that arises if there seems to be an opportunity to finally update a package(set)... and then that opportunity is missed, and now the dev knows that they have to endure those obsolete bug reports for another n-year release cycle. It definitely didn't read as "just to attack someone". &amp;gt; To correct the record: bcachefs-tools is not in Debian because Kent was impossible to work with and personally attacked, smeared and/or alienated multiple sets of distinct contributors that attempted to work with him in good faith, one after another. Tbh, the only personal attack I see here is from you; and as an outsider, this is not very informative – your frustration may be absolutely legit, but this reply doesn't suit your case. If the communication is public, do you have a link or something? :) Posted Aug 30, 2025 18:27 UTC (Sat) by paravoid (subscriber, #32869) [Link] (15 responses) Kent in https://lore.kernel.org/linux-bcachefs/wona7sjqodu7jgchtx... called part of a maintainer's job as "bullshit, make-work job", told Debian to "develop a better and more practical minded attitude" and to "stop wasting my time with this stupid bullshit and I can get back to real work". The issues we had spent a lot of our volunteer time to fix were very real issues, many of them upstream, and one in the Rust ecosystem. At the time this was sent, all issues were fixed, or were on the way to be fixed, and a recent bcachefs-tools package with all of the appropriate dependencies was a few weeks away from getting to Debian testing. bcachefs-tools was orphaned by its maintainer a few weeks later; myself and another contributor (the two of us had done all recent advancements), stopped investing our time as well. The package has remained orphaned since, for about a year. Anyone can pick it up, but noone has, and that's not because of technical difficulties (as far as packages go, it's pretty trivial). As an aside, the very existence of this thread was as a "PSA" to his users to avoid Debian and Fedora, telling them that "you'll want to be on a more modern distro". *Two weeks later*, he responded in https://lore.kernel.org/lkml/nxyp62x2ruommzyebdwincu26kmi... to Linus that he expects the "major distros" to pick up bcachefs soon. Whether he was dishonest or just naive, I'll leave that to your judgement. The above was just a small sample. There were literally dozens of responses of this style at time, random offensive comments etc., across multiple mediums (mailing lists, IRC, Reddit, etc.). I am not keeping a file though, as I don't feel the need to convince anyone with hard evidence. You don't know me, and I understand that my opinion may not be of much value to you. I hope, though, that you and others may see this as one tiny part of a broader pattern of countless long-time contributors across multiple projects expressing that they have been alienated and driven away by Kent's conduct and sense of entitlement, and that they have good reasons for it. Posted Aug 30, 2025 19:20 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (14 responses) But please do try to put yourself in my shoes; that was after getting a bunch of bug reports from Debian users, and there had been a _lot_ of fail at that point in how the Debian packaging was handled. I do have to reiterate: the unbundling of Rust dependencies should not have happened for bcachefs-tools, there was no technical reason for that, all my explanations were met with "but that's our policy", and no amount of reasoning was getting anywhere; and the Debian packager breaking the build and sitting on it just should not have happened. I do sincerely hope you can analyze how things went from the other end and ask yourself what could have been done better to avoid this, because from my end, this was an intensely frustrating issue, and it wasn't being taken seriously and it had very real effects. Before you start focusing on language and diplomacy, you really need ask yourself if the technical decisionmaking leading up to that point was sound. When we get breakage as bad as what happened with the Debian package, you can expect the kind of frustration I was voicing there, and "bullshit, make-work projects" still seems to accurately describe what Debain's been doing with Rust dependency unbundling. When we're dealing with critical system components, you cannot focus just on language and diplomacy and ignore the decisionmaking; that's ignoring our most basic responsibilities. Posted Aug 30, 2025 21:17 UTC (Sat) by josh (subscriber, #17465) [Link] (11 responses) No, you really don't. There is no universe in which the things you said produced useful outcomes. The fact that they resulted in someone deciding they no longer wish to work with you or put work into being the downstream maintainer of your software is an *unsurprising outcome*. &amp;gt; When we're dealing with critical system components, you cannot focus just on language and diplomacy and ignore the decisionmaking; that's ignoring our most basic responsibilities. You also cannot completely neglect language and diplomacy and understanding other people's requirements, either, as you absolutely did in the messages being quoted here. Your words will produce responses and actions from others. No amount of wishing things were different will enable you to say things that will predictably produce undesired actions and then have a leg to stand on when being annoyed that those predictable responses and actions happen. Your words are a lever to be used, just like your code. Write the words that produce the results you want, and if you want to be happier, learn to not resent that as a means of effecting change. To be clear: the words have to actually match the actions. You can't *just* say the right words but then have them mismatch your actions; down that path you'd find people whose words and truth lack even a passing familiarity. But it's important to, for instance, give people confidence that you care about the requirements they deal with, in some fashion *other* than "what windmill can I burn down so that you don't have to meet those requirements anymore and can do what I want instead". Posted Aug 30, 2025 22:29 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (10 responses) Maybe you guys should just admit there was a screw up so we can all move on? Posted Aug 30, 2025 22:35 UTC (Sat) by josh (subscriber, #17465) [Link] (4 responses) Posted Aug 30, 2025 22:41 UTC (Sat) by josh (subscriber, #17465) [Link] Posted Aug 30, 2025 22:48 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] (2 responses) Do you have a rebuttal? I'd love to hear it. Posted Aug 31, 2025 0:40 UTC (Sun) by SLi (subscriber, #53131) [Link] (1 responses) You keep saying "there are no technical reasons" as if that made it true. They may or may not be the best rules, but they are there for a reason. If you think distro maintainers change version bounds on packages for no reason other than to annoy upstreams, that alone should be a big hint telling you that you probably don't understand something. Or want to understand. I'm not sure which is more true nor which is more flattering. Posted Aug 31, 2025 3:37 UTC (Sun) by ben0x539 (guest, #119600) [Link] Posted Aug 30, 2025 22:39 UTC (Sat) by josh (subscriber, #17465) [Link] If your inclination is to believe this is *in any way* a question that should be redirected into an exploration of your specific requirements that you believe you were right about, you have missed the point. Posted Aug 30, 2025 22:51 UTC (Sat) by sheepdestroyer (guest, #54968) [Link] (3 responses) Posted Aug 31, 2025 6:42 UTC (Sun) by zejn (guest, #116440) [Link] (2 responses) If every package would bundle libraries, it would be impossible to update packages and you'd get a security nightmare as one can see in docker containers using old base images or independent software packages, that freeze a dependency on old version of an open source library. If a distribution is full of security holes, who's going to use it? Posted Aug 31, 2025 9:32 UTC (Sun) by mb (subscriber, #50428) [Link] There are mechanisms to identify which dependencies are statically linked ("bundled") into a Rust application: https://crates.io/crates/cargo-auditable Agreeing on one specific distro wide dependency version is absolutely not necessary. Posted Aug 31, 2025 9:43 UTC (Sun) by NAR (subscriber, #1313) [Link] If a distribution is full of broken software, who's going to use it? It might have made sense 20 and 30 years ago that distributions religiously kept single versions of libraries when (nearly) everything was written in C and the number of "interesting" software was in hundreds or thousands range. Nowadays it no longer makes sense, there are hundrends of thousands of softwares around written in languages which don't really care what's in a distribution (especially if the developers of said software work on e.g. MacOS). There's no wonder the snap, flatpack, docker, curl |bash way of running/installing software is getting more popular. Posted Aug 31, 2025 8:20 UTC (Sun) by zejn (guest, #116440) [Link] You seem to subscribe to the religion of "sound technical decision making", which, honestly, for you as a provider of some software mostly means "hey this makes my life easier, I'm going to do more of this". "This" may be a dependency on a specific library and you'll require version X or maybe greater. It can also mean other things, and since you don't have a policy written down, to other people it often means "because he said so". Debian will unbundle everything it can, because it makes sense for it to do so. You can provide your own package repository, if you want, it's trivial. A lot of projects do so, for various reasons. &amp;gt; When we're dealing with critical system components, you cannot focus just on language and diplomacy and ignore the decisionmaking; that's ignoring our most basic responsibilities. Why are you ignoring Debian's technical reasons for unbundling, then? Posted Aug 31, 2025 9:56 UTC (Sun) by paravoid (subscriber, #32869) [Link] In terms of language and critical system components: there is a fair amount of published research on this topic. It does not agree with you. Language and respect are extremely important components. Fostering a culture of trust, respect and psychological safety is what makes systems safe. This is accomplished through open communication, clear language, demonstrating respect, encouraging participation, valuing contributions, contributors having no fear of retribution (among others). It has been proven time and again, in processes written in blood, as documented in (actual human life) safety reports -- whether it was Chernobyl, air crash investigations or other types of large scale accident portmosterms. Some of it captured in the field of "Crew Resource Management" (CRM) (in turn based on the principles of Cockpit Resource Management) , if you want to read more on this topic. To put it simply: if I jumped on a plane and heard the pilot telling his first officer "stop wasting my time with this stupid bullshit so that I can get back to real work"... I'd probably ask to get off the plane. But you do you. Just maybe stop stating that the reason bcachefs-tools is not in Debian (or the kernel, from what it looks like) is not a "broken release process". The reason is that you've alienated multiple collaborators on the Debian end with your behavior. That's a fact, not a subjective topic to have an academic discussion about. Posted Aug 31, 2025 3:34 UTC (Sun) by jmalcolm (subscriber, #8876) [Link] (1 responses) I have been critical of Kent so let me defend him here. My understanding of the issue with bcachefs-tools in Debian was that bcachefs required a newer version of Rust than Debian wanted. This is a technical issue and being uncompromising on a technical issue is completely different than a philosophical or process issue. Also, bcachefs is hardly the only project that has had dependency issues with Debian. For all its benefits, Debian is poorly suited to new and evolving technologies (in my view at least). Look at Wayland in Debian vs other distros for another example. Even Debian 13 ships with NVIDIA drivers that lack explicit sync which means Wayland will still not work for many people despite working well in other distros for some time already. I am on Kent's side here. &amp;gt; Debian was not even close to the topic at hand, and yet you felt the need to bring it up Posted Aug 31, 2025 3:41 UTC (Sun) by koverstreet (✭ supporter ✭, #4296) [Link] Well, if I didn't bring it up someone else always does in these discussions. I've never named names and I haven't been lobbing personal attacks, I'm just talking about the process issues bcachefs has faced, and there's a real common thread between that one and the kernel issues. Posted Aug 30, 2025 17:12 UTC (Sat) by DemiMarie (subscriber, #164188) [Link] (1 responses) For anything that has to happen before the filesystem can be accessed at all, it might make sense to have an option for the userspace mount helper to do the work. In this case, the userspace helper has far fewer disadvantages I know of. My dream would be for bcachefs to have SQLite’s level of testing and input validation, or (even better) formal verification. Either would massively reduce the rate of bugs making it into a release, but neither is reasonable to ask for outside of a suitably-priced commercial engagement. Posted Aug 30, 2025 22:24 UTC (Sat) by koverstreet (✭ supporter ✭, #4296) [Link] The way I use assertions does heavily mimic what you'd do with dependent types, though. My primary approach to reliability is instead to mainly focus on debugability: you can't debug what you can't see, but if you can see everything the system is doing, at runtime, in production, debugging is easy. Also note that filesystems are in a different boat from SQLite, because we have to be able to recover from arbitrary outside damage. If your repair is bulletproof, that makes everything else easier: most bugs are not things you have to lose sleep over. Posted Aug 30, 2025 18:53 UTC (Sat) by ATLief (subscriber, #166135) [Link] That’s entirely expected given the circumstances; if longstanding Linux developers collectively don’t want to work with you, then they wouldn’t want to individually work with you either. Posted Aug 29, 2025 17:38 UTC (Fri) by ahippo (subscriber, #154692) [Link] (5 responses) This one works better for me somehow: Posted Aug 29, 2025 17:50 UTC (Fri) by Poliorcetics (subscriber, #165001) [Link] (3 responses) Posted Aug 29, 2025 18:39 UTC (Fri) by ewen (subscriber, #4772) [Link] (Looks like a fairly recent fix too — post is 2025-08-28 — so might take a while for the fix to roll out.) Ewen Posted Aug 29, 2025 19:03 UTC (Fri) by ahippo (subscriber, #154692) [Link] (1 responses) Posted Aug 29, 2025 21:03 UTC (Fri) by alspnost (guest, #2763) [Link] Posted Aug 30, 2025 13:17 UTC (Sat) by Baughn (subscriber, #124425) [Link] I can’t access Anubis-protected pages on my iPad. They take several minutes to pass the test, assuming it doesn’t overheat first. Posted Aug 29, 2025 17:39 UTC (Fri) by JMB (guest, #74439) [Link] (5 responses) And I am hoping that quality of code is still key ... And it is unfortunately connected to the 'external maintenance' Posted Aug 29, 2025 17:47 UTC (Fri) by zdzichu (subscriber, #17118) [Link] (4 responses) Posted Aug 30, 2025 0:28 UTC (Sat) by josh (subscriber, #17465) [Link] (3 responses) Posted Aug 30, 2025 5:17 UTC (Sat) by awilfox (guest, #124923) [Link] (1 responses) Posted Aug 31, 2025 8:44 UTC (Sun) by Conan_Kudo (subscriber, #103240) [Link] Posted Aug 31, 2025 0:58 UTC (Sun) by SLi (subscriber, #53131) [Link] Posted Aug 29, 2025 18:13 UTC (Fri) by mb (subscriber, #50428) [Link] (2 responses) &amp;gt;the immediate removal of bcachefs from the mainline kernel is not in the cards. What? Please just remove it instead of leaving code in the mainline that doesn't receive fixes for known bugs any longer. Posted Aug 29, 2025 18:49 UTC (Fri) by tux3 (subscriber, #101245) [Link] One could still hope for things to resolve differently. Perhaps some other way or other person is found to keep patches flowing. I'm not holding my breath, but there'll be plenty of time to delete things if and when that's what it comes down to. Posted Aug 29, 2025 22:47 UTC (Fri) by hailfinger (subscriber, #76962) [Link] Posted Aug 29, 2025 21:36 UTC (Fri) by birdie (guest, #114905) [Link] Posted Aug 30, 2025 22:01 UTC (Sat) by julian67 (guest, #99845) [Link] (1 responses) Posted Aug 30, 2025 23:44 UTC (Sat) by pizza (subscriber, #46) [Link] You left out "if you do nothing, the people you claim to care for have already lost, and you still get blamed." Posted Aug 30, 2025 22:33 UTC (Sat) by sheepdestroyer (guest, #54968) [Link] (1 responses) Posted Aug 31, 2025 0:41 UTC (Sun) by willy (subscriber, #9762) [Link] Posted Aug 31, 2025 1:01 UTC (Sun) by SLi (subscriber, #53131) [Link] &lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;lb/&gt; &amp;gt;&lt;lb/&gt; &amp;gt; Broken release process is exactly why bcachefs-tools isn't in Debian as well; the package maintainer who took it upon himself to package bcachefs-tools in Debian put project rules ahead of shipping working code, then broke the build and sat in it - and I got stuck with the bug reports.&lt;lb/&gt; * You accept that you cannot control what appears in Linus's tree, and decide to cease all engagement with him and the rest of the kernel folks. They continue to ship an old bcachefs for (at least) the rest of the current release cycle, but eventually it bitrots and they delete it. You might or might not choose to ship it out-of-tree like ZFS, and various distros might or might not package some version of it for you (whether you want them to or not).&lt;lb/&gt; * You accept that you cannot control what appears in Linus's tree, and decide to cease all engagement with him and the rest of the kernel folks. They fork bcachefs or mirror it from your out-of-tree version, and slightly-old or modified versions continue to appear in the kernel indefinitely. As I explained, I think this is less likely, but I don't want to entirely discount it.&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;lb/&gt; vm.dirty_background_ratio = 50&lt;lb/&gt; vm.dirty_expire_centisecs = 360000&lt;lb/&gt; vm.dirty_writeback_centisecs = 60000&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;lb/&gt; I hope that you get my point of listening well in order to carefully heal the relationships.&lt;lb/&gt; You explained that it was a bad idea, for multiple reasons: statically linked dependencies, and&lt;lb/&gt; invalidating all your active testing.&lt;lb/&gt; which broke the build for Debian, and file system users stopped getting updates.&lt;lb/&gt; You wrote many items into one message. I answered only for the first one,&lt;lb/&gt; to keep the answer small enough. Some progress, but further messages&lt;lb/&gt; could increase coverage.&lt;lb/&gt; The unfortunate end result was, that Debian users had problems with the bug.&lt;lb/&gt; I didn't get from your message, the outcome of the relationships between persons:&lt;lb/&gt; whether personal relationships were worsened, stayed the same, or healed in the&lt;lb/&gt; end (each relation individually).&lt;lb/&gt; https://www.verywellmind.com/what-is-active-listening-302...&lt;lb/&gt; "Paraphrasing and reflecting back what has been said"&lt;lb/&gt; ( Those who know psychology, know these things ).&lt;lb/&gt; You could try to restore relationships with just listening others. Choose carefully&lt;lb/&gt; messaging cases, in which you think that you won't cause much backslash,&lt;lb/&gt; but you could have progress with healing the relationship by listening to the other.&lt;lb/&gt; Repeat in nearly the same words the whole complaint, &lt;lb/&gt; so that the other one feels of being heard fully.&lt;lb/&gt; Try to at least have progress, thus please listen carefully the mentioned&lt;lb/&gt; complaint by repeating it. You can have pauses, like answering another day, to reduce the burden.&lt;lb/&gt; Please don't open up any new problems. If you do (I do mistakes sometimes),&lt;lb/&gt; and get a backslash as a heated answer, please listen and repeat it carefully,&lt;lb/&gt; to reduce the impact.&lt;lb/&gt; you could both improve your communication skills,&lt;lb/&gt; and perhaps others could learn from it too,&lt;lb/&gt; and perhaps then relations with other stakeholders, like maintainers,&lt;lb/&gt; and Linus, could be restored into a level that you can co-operate efficiently together again.&lt;lb/&gt; I'm trying to improve my communicating skills in the contexts of&lt;lb/&gt; change management for "OWASP top 10", and AI adoption.&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;Debian&lt;/head&gt;&lt;lb/&gt; [1]: https://jonathancarter.org/2024/08/29/orphaning-bcachefs-...&lt;lb/&gt; [2]: https://lwn.net/Articles/835599/&lt;lb/&gt; For version history:&lt;lb/&gt; https://crates.io/crates/bindgen/versions?sort=semver&lt;lb/&gt; https://tracker.debian.org/pkg/rust-bindgen-cl&lt;head&gt;Debian&lt;/head&gt;&lt;head&gt;Debian&lt;/head&gt;&lt;head&gt;Debian&lt;/head&gt;&lt;head&gt;Debian&lt;/head&gt;&lt;head&gt;Debian&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;lb/&gt; Rust dependencies are statically linked.&lt;lb/&gt; Update of a Rust dependency package requires all packages using it to be updated as well.&lt;lb/&gt; That can be used to fix security issues on a distro level.&lt;head/&gt; If a distribution is full of security holes, who's going to use it? &lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;lb/&gt; Absolutely. Even in a thread where the discussion was explicitly about how nice it is to see people taking the high road, Kent waltzes in and starts lobbing grenades. He is a passionate curator of other people's faults but I have never seen him confess to his own--even when confronted with significant evidence. If there is a problem, the blame lies elsewhere by definition in his world. Watching him burn the bridges that allow me to use bcachefs and then claiming to care about his users has really started to rub me the wrong way. Do what you want but stop telling us your choices are other people's fault. Kent fights for one person. That is more of a passion for him than his filesystem and that sucks (for me). Kent is the scorpion to my frog.&lt;lb/&gt; Bcachefs is a pretty great filesystem. I wish I could keep using it.&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;A few suggestions (which you don’t have to follow)&lt;/head&gt;&lt;head&gt;A few suggestions (which you don’t have to follow)&lt;/head&gt;&lt;head&gt;So what exactly *is* in the cards, then?&lt;/head&gt;&lt;head&gt;A broken link?&lt;/head&gt;&lt;lb/&gt; https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/...&lt;head&gt;A broken link?&lt;/head&gt;&lt;head&gt;A broken link?&lt;/head&gt;&lt;head&gt;A broken link?&lt;/head&gt;&lt;lb/&gt; Thank you for pointing me to that blog post!&lt;lb/&gt; My phone indeed has an odd number of cores.&lt;head/&gt; Fascinating - this is a whole new thing to me, but I guess I'm also "vulnerable", since I have a Pixel 8 Pro with 9 cores! &lt;head&gt;A broken link?&lt;/head&gt;&lt;head&gt;A broken link?&lt;/head&gt;&lt;head&gt;FS code quality of Linux seems not to be as one would wish for ...&lt;/head&gt;&lt;lb/&gt; Maybe the E-Mail has a typo ... b -&amp;gt; v ???&lt;lb/&gt; but when 6.15 is EoL and one is recommended to change to 6.16&lt;lb/&gt; just before a version with just ext4 bugs fixed ... and still further&lt;lb/&gt; ext4 bugs fixed after that ... it seem to be a general problem of&lt;lb/&gt; quality concerning Linux FSs / automatic testing not in good shape.&lt;lb/&gt; which is the topic here.&lt;head&gt;FS code quality of Linux seems not to be as one would wish for ...&lt;/head&gt;&lt;head&gt;FS code quality of Linux seems not to be as one would wish for ...&lt;/head&gt;&lt;head&gt;FS code quality of Linux seems not to be as one would wish for ...&lt;/head&gt;&lt;head/&gt; Perhaps he takes it more literally that he should actually sign-off on it and doesn't use the "-s" flag because of it. Or maybe he was using a different computer that doesn't have his default settings? Who knows... &lt;head&gt;FS code quality of Linux seems not to be as one would wish for ...&lt;/head&gt;&lt;head&gt;FS code quality of Linux seems not to be as one would wish for ...&lt;/head&gt;&lt;head&gt;Why not removed?&lt;/head&gt;&lt;lb/&gt; This is the most harmful (to the users) thing that could have been done now.&lt;head&gt;Why not removed?&lt;/head&gt;&lt;head&gt;Why not removed?&lt;/head&gt;&lt;lb/&gt; 1. Minimal result: Users can continue to use bcachefs with newer kernels without having to patch the kernel, they just won't get bug fixes, but there will be no functional regression&lt;lb/&gt; 2. Improvement with some effort by users: Users willing to patch the kernel can still apply any patches provided by Kent&lt;lb/&gt; 3. Optimal result: A unicorn with the ability to work with Linus and Kent at the same time may appear, resulting in fixes from Kent being merged with the timing and criteria wanted by Linus&lt;head&gt;Not so bad&lt;/head&gt;&lt;head&gt;Winning the battles, losing the war&lt;/head&gt;&lt;head&gt;Winning the battles, losing the war&lt;/head&gt;&lt;head&gt;Mediation?&lt;/head&gt;&lt;head&gt;Mediation?&lt;/head&gt;&lt;head&gt;Are Linus' patches posted to the mailing lists?&lt;/head&gt;&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45074312</guid></item><item><title>AI models need a virtual machine</title><link>https://blog.sigplan.org/2025/08/29/ai-models-need-a-virtual-machine/</link><description>&lt;doc fingerprint="bd5fd5d284b383c8"&gt;
  &lt;main&gt;
    &lt;p&gt;Applications using AI embed the AI model in a framework that interfaces between the model and the rest of the system, providing needed services such as tool calling, context retrieval, etc. Software for early chatbots took user input, called the LLM, and returned the result to the user; essentially just a read-eval-print loop. But, as the capabilities of LLMs have evolved and extension mechanisms, such as MCP were defined, the complexities of the control software that calls the LLM have increased. AI software systems require the same qualities that an operating system provides, including security, isolation, extensibility, and portability. For example, when an AI model needs to be given a file as part of its context, access control must be established that determines if the model should be allowed to view that file. We believe it is time to consider standardizing the ways in which the AI models are embedded into software and think of that control software layer as a virtual machine, where one of the machine instructions, albeit a super-powerful one, is to call the LLM.&lt;/p&gt;
    &lt;p&gt;Our approach decouples model development from integration logic, allowing any model to “plug in” to a rich software ecosystem that includes tools, security controls, memory abstractions, etc. Similar to the impact that the Java Virtual Machine had, creating a specification of a VM for the AI orchestrator could enable a “write once, run anywhere” execution environment for AI models while at the same time providing familiar constraints and governance to maintain security and privacy in existing software systems. Below we outline related work in this direction, the motivation behind it, and the key benefits of an AI Model VM.&lt;/p&gt;
    &lt;p&gt;Introduction&lt;/p&gt;
    &lt;p&gt;AI models are being leveraged in existing software as application copilots, embedded in IDEs, and with the rise of the MCP protocol, are increasingly able to use tools, implement agents, etc. This rapid evolution of valuable use cases brings with it a greater need to ensure that the AI-powered applications maintain privacy, are secure, and operate correctly. Guarantees of security and privacy are best provided if the underlying system is secure by design and not added on to systems as an afterthought. We take the Java Virtual Machine (JVM) as our inspiration in making the case for the importance of a standard AI Virtual Machine. The Java Virtual Machine guarantees memory safety by design, defines access control policies, and prevents code injection with bytecode verification. These properties allow Java programs running on the JVM to be executed with trust despite being shipped remotely, enabling “write once, run anywhere” software distribution.&lt;/p&gt;
    &lt;p&gt;How does the JVM relate to applications that use AI models? We used the following example to explain:&lt;/p&gt;
    &lt;p&gt;The diagram illustrates the role of the software layer that interacts with an AI model, which we call the Model Virtual Machine (MVM). That layer intermediates between the model and the rest of the world. For example, a chatbot user might type a prompt (1) that the MVM then sends unmodified to the AI model (2). In practice, the MVM will add additional context, including the system prompt, chat history, to the AI model input as well. The AI model generates a response, which in the example requires a specific tool to be called (3). This response has a specific format that is mutually agreed upon between the model and the MVM, such as MCP. In our example, because it is important to restrict the model from making undesired tool calls, the MVM first consults the list of allowed tools (4) before deciding to call the tool the model requested (5). This check (4) guarantees that the model doesn’t make unauthorized tool calls. Every commercial system using AI models requires some version of this control software.&lt;/p&gt;
    &lt;p&gt;We make the analogy that the interface with the LLM should be a virtual machine. If that is the case, what are the instructions that the machine can execute? Here are examples of operations that existing AI model interfaces have:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Certifying, loading, initializing, and unloading a given AI model&lt;/item&gt;
      &lt;item&gt;Calling a model with context&lt;/item&gt;
      &lt;item&gt;Parsing the output from the model&lt;/item&gt;
      &lt;item&gt;Certifying, loading, initializing, and unloading tools&lt;/item&gt;
      &lt;item&gt;Calling a tool&lt;/item&gt;
      &lt;item&gt;Parsing the results from a tool call&lt;/item&gt;
      &lt;item&gt;Storing the results from a tool call into memory&lt;/item&gt;
      &lt;item&gt;Asking the user for input&lt;/item&gt;
      &lt;item&gt;Adding content to a history memory&lt;/item&gt;
      &lt;item&gt;Standard control constructs such as conditionals, sequencing, etc.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A VM would support all of these operations in a well-typed context where constraints are placed on the calls made, the arguments passed, etc.&lt;/p&gt;
    &lt;p&gt;Existing Work Informs What is Needed&lt;/p&gt;
    &lt;p&gt;Some of the required elements of a well-specified interface are emerging in AI systems explored in academic work and in applications that are widely deployed:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;OpenAI’s Structured Tool Calling Protocols: OpenAI introduced a JSON-based function calling API that lets models invoke code-defined functions in a structured way. This approach, along with OpenAI’s plugin system (which uses OpenAPI specifications for tools), showed how structured tool-calling protocols can reduce ambiguity and simplify integration.&lt;/item&gt;
      &lt;item&gt;Anthropic’s Model Context Protocol (MCP, 2024): MCP is an open protocol for connecting AI assistants to external data and tools, explicitly aiming to be a universal interface. “Think of MCP like a USB-C port for AI applications,” Anthropic explains. Instead of every service having a custom AI integration, MCP provides a common schema and client-server approach. Despite being relatively new, MCP adoption, including in large companies, has been rapid.&lt;/item&gt;
      &lt;item&gt;Secure Orchestrators – FIDES &amp;amp; AC4A (2025): Security remains a weak point in current AI systems. Two recent projects propose runtime-level controls. FIDES (by Microsoft Research) enforces information-flow policies on agents by tracking data confidentiality labels and adding new agent actions like “inspect” to limit what agents can access (where a quarantined LLM can safely summarize restricted data) (paper). AC4A (Access Control for Agents) (manuscript in preparation) takes an OS-style approach: All tools and data are organized into hierarchies (like files and folders), and the agent must request read/write access for each resource. AC4A’s runtime intercepts every agent action and blocks anything not permitted, forcing a least-privilege operation mode. These projects show how a standard AI VM could include built-in security and access control, just as modern operating systems do. Even with strong access controls built into a VM specification, AI models present new security challenges that need to be considered in the design. For example, an AI model, when prevented from accessing a particular item of data, might use its chain-of-thought reasoning to devise ways to gather accessible data that allows it to infer the inaccessible item. As such, security researchers have to devise new mitigations to prevent AI models taking adversarial actions even with the virtual machine constraints.&lt;/item&gt;
      &lt;item&gt;Open-Source Agent Runtimes: Several projects are actively building general-purpose runtimes for AI. For example, langchain and Semantic Kernel provide numerous common runtime services that make writing reliable AI-enabled applications easier. The AI Controller Interface (AICI) (later renamed llguidance), integrates a lightweight VM into the model-serving pipeline, allowing developers to script and constrain model behavior at a low level (e.g., control of generations token-by-token).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Defining a specification for a VM interface for AI systems from these emerging approaches will require more than an agreement on protocols and APIs. Because AI systems derive their behavior from training data, model training data must reflect the specification of the VM interface so that the models and the VM model interface can co-evolve. This will enable otherwise diverse models to exhibit broadly compatible behavior with respect to the VM interface specification.&lt;/p&gt;
    &lt;p&gt;Benefits of a Well-Specified AI Model VM&lt;/p&gt;
    &lt;p&gt;As mentioned, many applications that leverage AI models require reliability, privacy, and security. In addition, new models are developed almost daily and updating the model being used by an application is often necessary. Given this confluence of factors, creating robust AI software presents significant engineering challenges. We believe that a specification of the interface between the AI model and the surrounding software that interfaces to it will address some of these challenges.&lt;/p&gt;
    &lt;p&gt;The need for an AI Model VM specification is driven by several clear motivations:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Separation of Concerns: An interface specification enforces a clean separation between model logic and integration logic. This means models become interchangeable components. You could swap in a new model (or move an agent to a different platform) and, as long as both adhere to the standard, everything still works. Likewise, virtual machine implementors can increase the performance, security, and tooling of the virtual machine while maintaining compatibility with the AI model interfaces.&lt;/item&gt;
      &lt;item&gt;Built-in Safety and Governance: A VM specification can enforce safety by design. By routing all tool usage and external access through a well-defined interface, it becomes easier to apply permission checks, audit logs, and fail-safes. As shown by projects like AC4A, the VM can act as a gatekeeper, restricting what models can do unless explicitly authorized. This creates a safer deployment solution for powerful AI systems: even if the model behaves unpredictably, the VM layer can contain its effects. Standards bodies could even define security requirements (e.g., certain calls must always require user confirmation), creating a shared foundation of trust. Similar to the benefits of signed assemblies in the Common Language Runtime, have a certification process around loading and unloading models and tools ensures the end-to-end security of the supply chain.&lt;/item&gt;
      &lt;item&gt;Transparent Performance &amp;amp; Resource Tracking: A VM specification could also give developers visibility to runtime diagnostics. Post-execution manifests could report model performance, resource consumption, and data access level which helps developers evaluate overall efficiency and performance. Benchmarks for accuracy, utility, and responsiveness can be supported directly in the VM interface across models and platforms.&lt;/item&gt;
      &lt;item&gt;Verifiability of Model Output: Leveraging a VM specification, experts can explore integrating formal methods to verify their model behavior. Techniques such as zero-knowledge proofs could confirm the integrity of model outputs without sensitive internal logic. While still emerging, this possibility hints at new levels of trust and accountability in AI systems and should be carefully considered during development.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Conclusion&lt;/p&gt;
    &lt;p&gt;We argue that a well-specified AI Model Virtual Machine is needed. Developments occurring in multiple directions, including work from tech companies, startups, and academia, all motivate the need for a VM specification that lets AI models safely and seamlessly interact with the world around them. The motivation is clear – reducing complexity and unlocking interoperability – and the potential benefits range from technical (faster development, modular upgrades) to strategic (cross-platform AI ecosystems, improved safety). From enforcing controls for security and privacy, to potentially formal proof capabilities for trust, the opportunities are wide-ranging. Learning a lesson from older generations of software virtualization, a VM specification can increase AI systems portability, interoperability, security, and reliability. The purpose of this document is to highlight these issues and start engaging with the community on building a consensus that such a specification is needed and what it should include.&lt;/p&gt;
    &lt;p&gt;Biographies:&lt;/p&gt;
    &lt;p&gt;Shraddha Barke is a Senior Researcher at Microsoft Research in Redmond, Washington in the Research in Software Engineering (RiSE) group. Her research interests include AI for proof generation, training AI models for program-reasoning tasks using RL and improving the reliability of AI agents.&lt;/p&gt;
    &lt;p&gt;Betül Durak is a Principal Researcher at Microsoft Research in Redmond, Washington in Security, Privacy, and Cryptography group. Her research interests broadly include security analysis as well as secure and private protocol designs motivated from real world problems.&lt;/p&gt;
    &lt;p&gt;Dan Grossman is a Professor at the University of Washington and the Vice Director of the Paul G. Allen School of Computer Science &amp;amp; Engineering. His research interests are in programming languages, particularly in applying programming languages concepts and analyses to emerging domains.&lt;/p&gt;
    &lt;p&gt;Peli de Halleux is a Principal Research Software Developer Engineer in Redmond, Washington working in the Research in Software Engineering (RiSE) group. His research interests include empowering individuals to build LLM-powered applications more efficiently.&lt;/p&gt;
    &lt;p&gt;Emre Kıcıman is a Senior Principal Research Manager and Head of Research for Copilot Tuning at Microsoft. His research interests include causal methods, the security of AI, and applications of LLM and AI-based systems, together with their implications for people and society.&lt;/p&gt;
    &lt;p&gt;Reshabh K Sharma is a PhD student at the University of Washington. His research lies at the intersection of PL/SE and LLMs, focusing on developing infrastructure and tools to create better LLM-based system that are easier to develop reliably and correctly.&lt;/p&gt;
    &lt;p&gt;Ben Zorn is a Partner Researcher at Microsoft Research in Redmond, Washington working in (and previously having co-managed) the Research in Software Engineering (RiSE) group. His research interests include programming language design and implementation, end-user programing, and AI software including technology for ensuring responsible AI.&lt;/p&gt;
    &lt;p&gt;Disclaimer: These posts are written by individual contributors to share their thoughts on the SIGPLAN blog for the benefit of the community. Any views or opinions represented in this blog are personal, belong solely to the blog author and do not represent those of ACM SIGPLAN or its parent organization, ACM.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45074467</guid></item><item><title>Condor's Cuzco RISC-V Core at Hot Chips 2025</title><link>https://chipsandcheese.com/p/condors-cuzco-risc-v-core-at-hot</link><description>&lt;doc fingerprint="c2da901fa4165780"&gt;
  &lt;main&gt;
    &lt;p&gt;Condor Computing, a subsidiary of Andes Technology that creates licensable RISC-V cores, has a business model with parallels to Arm (the company) and SiFive. Andes formed Condor in 2023, so Condor is a relatively young player on the RISC-V scene. However, Andes does have RISC-V design experience prior to Condor’s formation with a few RISC-V cores under their belt from years past.&lt;/p&gt;
    &lt;p&gt;Condor is presenting their Cuzco core at Hot Chips 2025. This core is a heavyweight within the RISC-V scene, with wide out-of-order execution and a modern branch predictor and some new time based tricks. It’s in the same segment as high performance RISC-V designs like SiFive’s P870 and Veyron’s V1. Like those cores, Cuzco should stand head and shoulders above currently in-silicon RISC-V cores like Alibaba T-HEAD’s C910 and SiFive’s P550.&lt;/p&gt;
    &lt;p&gt;Besides being a wide out-of-order design, Cuzco uses mostly static scheduling in the backend to save power and reduce complexity. Condor calls this a “time-based” scheduling scheme. I’ll cover more on this later, but it’s important to note that this is purely an implementation detail. It doesn’t require ISA modifications or special treatment from the compiler for optimal performance.&lt;/p&gt;
    &lt;head rend="h1"&gt;Core Overview&lt;/head&gt;
    &lt;p&gt;Cuzco is a 8-wide out-of-order core with a 256 entry ROB and clock speed targets around 2 GHz SS (Slow-Slow) to 2.5 GHz (Typical-Typical) on TSMC’s 5nm process. The pipeline has 12 stages counting from instruction fetch to data cache access completion. However, a 10 cycle mispredict penalty probably more accurately describes the core’s pipeline length relative to its competitors.&lt;/p&gt;
    &lt;p&gt;As a licensed core, Cuzco is meant to be highly configurable to widen its target market. The core is built from a variable number of execution slices. Customization options also include L2 TLB size, off-cluster bus widths, and L2/L3 capacity. Condor can also adjust the size of various internal core structures to meet customer performance requirements. Cuzco cores are arranged into clusters with up to eight cores. Clusters interface with the system via a CHI bus, so customers can bring their own network-on-chip (NoC) to hit higher core counts via multi-cluster setups.&lt;/p&gt;
    &lt;head rend="h1"&gt;Frontend&lt;/head&gt;
    &lt;p&gt;Cuzco’s frontend starts with a sophisticated branch predictor, as is typical for modern cores targeting any reasonable performance level. Conditional branches are handled via a TAGE-SC-L predictor. TAGE stands for Tagged Geometric, a technique that uses multiple tables each handling a different history length. It seeks to efficiently use branch predictor storage by selecting the most appropriate history length for each branch, as opposed to older techniques that use a fixed history length. The SC (Statistical Corrector) part handles the small subset of branches where TAGE doesn’t work well, and can invert the prediction if it sees TAGE often getting things wrong under certain circumstances. Finally, L indicates a loop predictor. A loop predictor is simply a set of counters that come into play for branches that are taken a certain number of times, then not taken once. If the branch predictor detects such loop behavior, the loop predictor can let it avoid mispredicting on the last iteration of the loop. Basically, TAGE-SC-L is an augmented version of the basic TAGE predictor.&lt;/p&gt;
    &lt;p&gt;AMD’s Zen 2, Ampere’s AmpereOne, and Qualcomm’s Oryon also use TAGE predictors of some sort, and achieve excellent branch prediction accuracy. AMD, Ampere, and Qualcomm also likely augment the basic TAGE prediction strategy in some way. How Cuzco’s TAGE predictor performs will depend on how large its history tables are, as well as how well the predictor is tuned (selection of index vs tag bits, history lengths, distribution of storage budget across TAGE tables, etc). For Cuzco’s part, they’ve disclosed that the TAGE predictor’s base component uses a 16K entry table of bimodal counters.&lt;/p&gt;
    &lt;p&gt;Branch target caching on Cuzco is provided by a 8K entry branch target buffer (BTB) split into two levels. Condor’s slides show the BTB hit/miss occurring on the cycle after instruction cache access starts, so a taken branch likely creates a single pipeline bubble. Returns are predicted using a 32 entry return stack. Cuzco also has an indirect branch predictor, which is typical on modern CPUs.&lt;/p&gt;
    &lt;p&gt;Cuzco’s instruction fetch logic feeds from a 64 KB 8-way set associative instruction cache, and speeds up address translations with a 64 entry fully associative TLB. The instruction fetch stages pull an entire 64B cacheline into the ICQ (instruction cache queue), and then pull instructions from that into an instruction queue (XIQ). The decoders feed from the XIQ, and can handle up to eight instructions per cycle.&lt;/p&gt;
    &lt;head rend="h1"&gt;Rename and Allocate&lt;/head&gt;
    &lt;p&gt;Much of the action in Condor’s presentation relates to the rename and allocate stage, which acts as a bridge between the frontend and out-of-order backend. In most out-of-order cores, the renamer carries out register renaming and allocates resources in the backend. Then, the backend dynamically schedules instructions as their dependencies become available. Cuzco’s renamer goes a step further and predicts instruction schedules as well.&lt;/p&gt;
    &lt;p&gt;One parallel to this is Nvidia’s static scheduling in Kepler and subsequent GPU architectures. Both simplify scheduling by telling an instruction to execute a certain number of cycles in the future, rather than having hardware dynamically check for dependencies. But Nvidia does this in their compiler because GPU ISAs aren’t standardized. Cuzco still uses hardware to create dynamic schedules, but moves that job into the rename/allocate stage rather than the schedulers in the backend. Schedulers can be expensive structures in conventional out-of-order CPUs, because they have to check whether instructions are ready to execute every cycle. On Cuzco, the backend schedulers can simply wait a specified number of cycles, and then issue an instruction knowing the dependencies will be ready by then.&lt;/p&gt;
    &lt;p&gt;To carry out time-based scheduling, Cuzco maintains a Time Resource Matrix (TRM), which tracks utilization of various resources like execution ports, functional units, and data buses for a certain number of cycles in the future. The TRM can look 256 cycles into the future, which keeps storage requirements under control. Because searching a 256 row matrix in hardware would be extremely expensive, Cuzco only looks for available resources in a small window after an instruction’s dependencies are predicted to be ready. Condor found searching a window of eight cycles provided a good tradeoff. Because the renamer can handle up to eight instructions, it at most has to access 64 rows in the TRM per cycle. If the renamer can’t find free resources in the search window, the instruction will be stalled at the ID2 stage.&lt;/p&gt;
    &lt;p&gt;Another potential limitation is the TRM size, which could be a limitation for long latency instructions. However, the longest latency instructions tend to be loads that miss cache. Cuzco always assumes a L1D hit for TRM scheduling, and uses replay to handle L1D misses. That means stalls at ID2 from TRM size limitations should also be rare.&lt;/p&gt;
    &lt;p&gt;Compared to a hypothetical “greedy” setup, where the core is able to create a perfect schedule with execution resource limitations in mind, limiting the TRM search window decreases performance by a few percent. Condor notes that creating a core to match the “greedy” figure may not even be possible. A conventional out-of-order core wouldn’t have TRM-related restrictions, but may face difficulties creating an optimal schedule for other reasons. For example, a distributed scheduler may have several micro-ops become ready in one scheduling queue, and face “false” delays even though free execution units may be available on other scheduling queues.&lt;/p&gt;
    &lt;p&gt;Static scheduling only works when instruction latencies are known ahead of time. Some instructions have variable latency, like loads that can miss caches or TLBs, encounter bank conflicts, or require store forwarding. As mentioned before, Cuzco uses instruction replay to handle variable latency instructions and the associated dynamic behavior. The renamer does take some measures to reduce replays, like checking to see if a load gets its address from the same register as a prior store. However, it doesn’t attempt to predict memory dependencies like Intel’s Core 2, and also doesn’t try to predict whether a load will miss cache.&lt;/p&gt;
    &lt;head rend="h1"&gt;Out-of-Order Backend&lt;/head&gt;
    &lt;p&gt;Out of order execution in Cuzco is relatively simple, because the rename/allocate stage takes care of figuring out when instructions will execute. Each instruction is simply held within the schedulers until a specified number of cycles pass, after which it’s sent for execution. If the rename/allocate stage guesses wrong, replay gets handled via “poison” bits. The erroneously executed instruction’s result data is effectively marked as poisoned, and any instructions consuming that data will get re-executed. Replaying instructions costs power and wastes execution throughput, so replays should ideally be a rare event. 70.07 replays per 1000 instructions feels like a bit of a high figure, but likely isn’t a major problem because execution resources are rarely a limitation in an out-of-order core. Taking about 7% more execution resources may be an acceptable tradeoff, considering most modern chips rarely use their core width in a sustained fashion.&lt;/p&gt;
    &lt;p&gt;Execution resources are grouped into slices, each of which have a pair of pipelines. A slice can execute all of the core’s supported RISC-V instructions, making it easy to scale execution resources by changing slice count. Each slice consists of a set of execution queues (XEQs), which hold micro-ops waiting for a functional unit. Cuzco has XEQs per functional unit, unlike conventional designs that tend to have a scheduling queue that feeds all functional units attached to an execution port. Four register read ports supply operands to the slice, and two write ports handle result writeback. Bus conflicts are handled by the TRM as well. A slice cannot execute more than two micro-ops per cycle, even doing so would not oversubscribe the register read ports. For example, a slice can’t issue an integer add, a branch, and a load in the same cycle even though that would only require four register inputs.&lt;/p&gt;
    &lt;p&gt;XEQs are sized to match workload characteristics, much like tuning a distributed scheduler. While XEQ sizes can be set to match customer requirements, Condor was able to give some figures for a baseline configuration. ALUs get 16 entry queues, while branches and address generation units (LS) get 8 entry queues. XEQ sizes are adjustable in powers of two, from 2 to 32 entries. There’s generally a single cycle of latency for forwarding between slices. The core can be configured to do zero cycle cross-slice forwarding, but that would be quite difficult to pull off.&lt;/p&gt;
    &lt;p&gt;On the vector side, Cuzco supports 256/512-bit VLENs via multiple micro-ops, which are distributed across the execution slices. Execution units are natively 64 bits wide. There’s one FMA unit per slice, so peak FP32 throughput is eight FMA operations per cycle, or 16 FLOPS when counting the add and multiply as separate operations. FP adds execute with 2 cycle latency, while FP multiplies and multiply-adds have four cycle latency. The two cycle FP add latency is nice to see, and matches recent cores like Neoverse N1 and Intel’s Golden Cove, albeit at much lower clocks.&lt;/p&gt;
    &lt;head rend="h1"&gt;Load/Store&lt;/head&gt;
    &lt;p&gt;Cuzco’s load/store unit has a 64 entry load queue, a 64 entry store queue, and a 64 entry queue for data cache misses. Loads can leave the load queue after accessing the data cache, likely creating behavior similar to AMD’s Zen series where the out-of-order backend can have far more loads pending retirement than the documented load queue capacity would suggest. The core has four load/store pipelines in a four slice configuration, or one pipeline per slice. Maximum load bandwidth is 64B/cycle, achievable with vector loads.&lt;/p&gt;
    &lt;p&gt;The L1D is physically indexed and physically addressed (PIPT), so address translation has to complete before L1D access.To speed up address translation, Cuzco has a 64 entry fully associative data TLB. The L2 TLB is 4-way set associative, and can have 1K, 2K, or 4K entries. Cuzco’s core private, unified L2 cache has configurable capacity as well. An example 2 MB L2 occupies 1.04 mm2 on TSMC 5nm.&lt;/p&gt;
    &lt;p&gt;Eight cores per cluster share a L3 cache, which is split into slices to handle bandwidth demands from multiple cores. Each slice can deliver 64B/cycle, and slice count matches core count. Thus Cuzco enjoys 64B/cycle of load bandwidth throughout the cache hierarchy, of course with the caveat that L3 bandwidth may be lower if accesses from different cores clash into the same slice. Cores and L3 slices within a cluster are linked by a crossbar. The L3 cache can run at up to core clock. Requests to the system head out through a 64B/cycle CHI interface. System topology beyond the cluster is up to the implementer.&lt;/p&gt;
    &lt;p&gt;Replays for cache misses are carried out by rescheduling the data consumer to a later time when data is predicted to be ready. Thus a L3 hit would cause a consuming instruction to be executed three times - once for the predicted L1D hit, once for the predicted L2 hit, and a final time for the L3 hit with the correct data.&lt;/p&gt;
    &lt;head rend="h1"&gt;Final Words&lt;/head&gt;
    &lt;p&gt;High performance CPU design has settled down over the past couple decades, and converged on an out-of-order execution model. There’s no denying that out-of-order execution is difficult. Numerous alternatives have been tried through the years but didn’t have staying power. Intel’s Itanium sought to use an ISA-based approach, but failed to unseat the company’s own x86 cores that used out-of-order execution. Nvidia’s Denver tried to dynamically compile ARM instructions into microcode bundles, but that approach was not carried forward. All successful high performance designs today generally use the same out-of-order execution strategy, albeit with plenty of variation. That’s driven by the requirements of ISA compatibility, and the need to deliver high single threaded performance across a broad range of applications. Breaking from the mould is obviously fraught with peril.&lt;/p&gt;
    &lt;p&gt;Condor seeks to break from the mould, but does so deep in the core in a way that should be invisible to software a functional perspective, and mostly invisible from a performance perspective. The core runs RISC-V instructions and thus benefits from that software ecosystem, unlike Itanium. It doesn’t rely on a compiled microcode cache like Denver, so it doesn’t end up running in a degraded performance beyond what a typical OoO core would see when dealing with poor code locality. Finally, instruction replay effectively creates dynamic schedules and handles cache misses&lt;/p&gt;
    &lt;p&gt;If you like the content then consider heading over to the Patreon or PayPal if you want to toss a few bucks to Chips and Cheese. Also consider joining the Discord.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45074895</guid></item><item><title>You Have to Feel It</title><link>https://mitchellh.com/writing/feel-it</link><description>&lt;doc fingerprint="b887f3b997e7a4e0"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Mitchell Hashimoto&lt;/head&gt;
    &lt;head rend="h1"&gt;You Have to Feel It&lt;/head&gt;
    &lt;p&gt;You see a series of checkboxes checked. Schedules met. Requirements satisfied. Demos delivered. It's a good day. Good job, you, good job! A promotion is in sight.&lt;/p&gt;
    &lt;p&gt;But you didn't feel it. You didn't feel it.&lt;/p&gt;
    &lt;p&gt;We, as people, feel something with every interaction. Frustration, joy, relief, confidence. A feeling. A person interacts with our work. Our work evokes a feeling. The feeling matters. The feeling is part of the work. The desired feeling is part of the requirements.&lt;/p&gt;
    &lt;p&gt;When you feel it, you know. The feature makes you smile when you use it. It fits right in, like it was always meant to be there. You want to use it again. You want to tell people about it.&lt;/p&gt;
    &lt;p&gt;This is the difference. This is what metrics, specifications, and demos miss. They don't capture the feeling. For the people who will use and live in the work, the feeling is part of their daily experience. Which means you can't stop at checking the boxes on paper. You have to sit with it, use it, live with it.&lt;/p&gt;
    &lt;p&gt;You have to feel it.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45075048</guid></item><item><title>LandChad, a site dedicated to turning internet peasants into Internet Landlords</title><link>https://landchad.net</link><description>&lt;doc fingerprint="9d8b14078d06c8c"&gt;
  &lt;main&gt;
    &lt;p&gt;This is LandChad.net, a site dedicated to turning internet peasants into Internet Landlords by showing them how to setup websites, email servers, chat servers and everything in between.&lt;/p&gt;
    &lt;p&gt;Starting a website is something that can be done in a lazy afternoon and costs pocket change.&lt;/p&gt;
    &lt;p&gt;Most of the internet’s problems could be solved if more people had their own personal platforms, so the objective of this site is to guide any normal person through the process of installing a website.&lt;/p&gt;
    &lt;head rend="h2"&gt;Start a website&lt;/head&gt;
    &lt;p&gt;This is the basic “course.” Follow these quick tutorials and you’ll have a fully functioning basic web page on the domain name of your choice.&lt;/p&gt;
    &lt;p&gt;â³ This “basic course” can take as little as an hour or even less.&lt;/p&gt;
    &lt;head rend="h2"&gt;“Build your own platform!”&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;AlpsAlps is a simple and extensible webmail. It offers a web interface for IMAP, SMTP and other upstream servers.&lt;/item&gt;
      &lt;item&gt;CalibreA public or private digital library.&lt;/item&gt;
      &lt;item&gt;CgitA hyperfast web frontend for git repositories.&lt;/item&gt;
      &lt;item&gt;CoturnA STUN and TURN server that allows users to perform WebRTC calls while being behind NATs.&lt;/item&gt;
      &lt;item&gt;DnsmasqHost your own DNS server to block ads and social media.&lt;/item&gt;
      &lt;item&gt;DokuWikiA simple wiki with clean syntax and no databases.&lt;/item&gt;
      &lt;item&gt;ejabberdA chat server based on XMPP.&lt;/item&gt;
      &lt;item&gt;FosspayA self-hosted payment and donation gateway interfaced with Stripe.&lt;/item&gt;
      &lt;item&gt;Git ServerHosting your own basic git server.&lt;/item&gt;
      &lt;item&gt;GiteaA fully-featured Github-like git website for serious software projects and communities.&lt;/item&gt;
      &lt;item&gt;i2pA private and uncensorable web-layer similar to Tor.&lt;/item&gt;
      &lt;item&gt;IRCSelf-hosting the Internet's classic chat protocol.&lt;/item&gt;
      &lt;item&gt;JitsiVideo-chat software.&lt;/item&gt;
      &lt;item&gt;Matrix DendriteA faster server implementation of Matrix.&lt;/item&gt;
      &lt;item&gt;Matrix SynapseAn encrypted chat server sleek and accessible even to normies.&lt;/item&gt;
      &lt;item&gt;MoneroThe ideal private cryptocurrency for the Internet.&lt;/item&gt;
      &lt;item&gt;Monero NodeContribute to the Monero network.&lt;/item&gt;
      &lt;item&gt;MumbleOpen Source, Low Latency, High Quality Voice Chat.&lt;/item&gt;
      &lt;item&gt;NextcloudA free and private Google Drive-like cloud storage system.&lt;/item&gt;
      &lt;item&gt;PeerTubeYour own self-hosted video-site also compatible with Activity Pub.&lt;/item&gt;
      &lt;item&gt;PleromaA federated Twitter-like microblogging system.&lt;/item&gt;
      &lt;item&gt;ProsodyA minimalist XMPP chat server.&lt;/item&gt;
      &lt;item&gt;RadicaleA private calendar, contact and to-do list system.&lt;/item&gt;
      &lt;item&gt;RainloopA graphical website for accessing a mail server.&lt;/item&gt;
      &lt;item&gt;RSS BridgeCreates RSS feeds for normie sites like Facebook.&lt;/item&gt;
      &lt;item&gt;SearXNGPolls dozens of search engines to give you private and complete search results.&lt;/item&gt;
      &lt;item&gt;TorSet your site up privately on the 'dark web.'&lt;/item&gt;
      &lt;item&gt;TransmissionDecentralized file-sharing with BitTorrent.&lt;/item&gt;
      &lt;item&gt;WireguardFast, Modern, Secure VPN Tunnel&lt;/item&gt;
      &lt;item&gt;YarrA self-hosted, web-based feed aggregator&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Host your own services, social media and more.&lt;/p&gt;
    &lt;head rend="h2"&gt;Setup an Email Server&lt;/head&gt;
    &lt;p&gt;This is the email “course”. Follow these modules to learn how to setup an email server headache free.&lt;/p&gt;
    &lt;p&gt;â³ This entire “email course” may take about an hour. The approval for opening email ports with your VPS should take no less than a day.&lt;/p&gt;
    &lt;head rend="h2"&gt;Maintaining a Server&lt;/head&gt;
    &lt;p&gt;Tips and articles on mastering your server and learning about GNU/Linux systems administration.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Certbot on Standalone Domains and Subdomains&lt;/item&gt;
      &lt;item&gt;Cronjobs&lt;/item&gt;
      &lt;item&gt;GeminiA minimalist alternative to HTTP with a modern twist.&lt;/item&gt;
      &lt;item&gt;Log on with SSH Keys&lt;/item&gt;
      &lt;item&gt;Maintaining a Server&lt;/item&gt;
      &lt;item&gt;OpenAlias&lt;/item&gt;
      &lt;item&gt;Page Quality&lt;/item&gt;
      &lt;item&gt;Requiring Passwords for Webpages (HTTP Authentication)&lt;/item&gt;
      &lt;item&gt;Rsync: Upload and Sync Files and Websites&lt;/item&gt;
      &lt;item&gt;Self hosting&lt;/item&gt;
      &lt;item&gt;Server-Side Scripting with CGI&lt;/item&gt;
      &lt;item&gt;SSH - Advanced Usage&lt;/item&gt;
      &lt;item&gt;Using UFW as a Firewall&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Support LandChad.net&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;BTC: &lt;code&gt;bc1q9f3tmkhnxj8gduytdktlcw8yrnx3g028nzzsc5&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;XMR: &lt;code&gt;84RXmrsE7ffCe1ADprxLMHRpmyhZuWYScDR4YghE8pFRFSyLtiZFYwD6EPijVzD3aZiEpg57MfHEr1pGJNPXyJgENMnWrSh&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45075384</guid></item><item><title>New research reveals longevity gains slowing, life expectancy of 100 unlikely</title><link>https://lafollette.wisc.edu/news/new-research-reveals-longevity-gains-slowing-life-expectancy-of-100-unlikely/</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45075813</guid></item><item><title>The Default Trap: Why Anthropic's Data Policy Change Matters</title><link>https://natesnewsletter.substack.com/p/the-default-trap-why-anthropics-data</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45076274</guid></item><item><title>Anduril's product engineering machine</title><link>https://joincolossus.com/article/the-amusement-park-for-engineers/</link><description>&lt;doc fingerprint="af9883347f35ed68"&gt;
  &lt;main&gt;
    &lt;p&gt;This article features first-ever photos taken from inside Anduril’s R&amp;amp;D facilities in Costa Mesa, California. All photos by Ryan Young.&lt;/p&gt;
    &lt;p&gt;On a Saturday afternoon in April 2024, I was on the rooftop pool deck of a Marriott hotel, setting up radar equipment aimed above the Hollywood Hills in Burbank, California. My five-year-old son, still damp from swimming, darted around as I calibrated the system.&lt;/p&gt;
    &lt;p&gt;“What are you doing?” he asked, touching the electronics with wet hands.&lt;/p&gt;
    &lt;p&gt;“Tracking … flying objects,” I said, carefully moving his hands away from the sensitive equipment. “It’s a special radar that will help our drones find targets better.”&lt;/p&gt;
    &lt;p&gt;Working on a thousand-dollar radar that could potentially transform a landmark missile platform during a father-son weekend was fairly typical in those days. The technology that my son wanted to touch, and which other poolside guests gawked at, was a throwback to the AGM-114 Hellfire missile system from the 1960s—a simple direction finder that could be guided by a ground system that paints targets with radio frequency (RF) instead of lasers. If we could get this to work, we could reduce the cost of our Roadrunner system—a reusable, twin-turbojet, vertical-takeoff-and-landing microfighter—by 30x.&lt;/p&gt;
    &lt;p&gt;Between trips to the pool and Chick-fil-A, I eventually managed to collect enough data to prove the concept worked: We could detect aircraft at 10 kilometers with a thousand-dollar sensor. It was the kind of breakthrough that could change how we approached reusable weapons and low-cost solutions for air defense—an ongoing R&amp;amp;D project I remain consumed by.&lt;/p&gt;
    &lt;p&gt;It wasn’t company-sanctioned work. I was officially on family time, having left Anduril as SVP of Engineering the month before to start a robotics company, Physical Intelligence (PI). Yet Anduril was never just a job; it was part of my identity. My badge still worked, I continued on in an emeritus role, and I still spent around 15 hours a week working with the engineering team I’d helped build.&lt;/p&gt;
    &lt;p&gt;When I joined Anduril in the fall of 2018, I was employee #20, the company was valued at $250 million, and we had lofty, but hypothetical, ambitions of reinventing the defense ecosystem. Less than six years later, the 4,000-person, $28 billion company has deployed 30-plus products with thousands of fielded systems, and changed the arc of American defense technology. It’s worth looking back now at those years of explosive growth, in order to give other founders, engineers, investors, operators, and everyone else a glimpse of what zero-to-one at Anduril was actually like.&lt;/p&gt;
    &lt;p&gt;Team member welding in Anduril’s R&amp;amp;D prototyping shop.&lt;/p&gt;
    &lt;p&gt;I’ve always been drawn to the kind of science that translates into strategic impact, and to problems too dangerous to ignore. After studying at MIT, I worked on flood disaster relief in Pakistan, then became a founding engineer at a biotech startup developing affordable genome sequencing technology. When the company was acquired, I left for Tesla, where I worked on projects from the Falcon wing doors in the Model X to electromechanical architectures, autopilot sensors and advanced technologies enabling future vehicle platforms. It was cutting-edge work with one of the most innovative companies in the world, and I was genuinely happy there.&lt;/p&gt;
    &lt;p&gt;A coffee in July 2018 with Anduril’s founder Palmer Luckey changed everything. What was supposed to be a quick 30-minute chat turned into a six-hour conversation that made it impossible for me to go back to Tesla. These were the days when supposedly bleeding-edge work in Silicon Valley was still largely dominated by consumer apps and services. By contrast, the picture of the world that Palmer drew kept me up at night.&lt;/p&gt;
    &lt;p&gt;While the threat from China wasn’t yet front-page news, Palmer and his team had already recognized the need for better defense technology to deter a great power conflict and to maintain American hegemony. They understood that America’s technological edge in defense was eroding, and that traditional defense contractors were too glacial and bureaucratic to meet the challenge—a culture I’d previously witnessed firsthand (and had forever sworn off) during an internship with an aerospace manufacturer.&lt;/p&gt;
    &lt;p&gt;I was struck by the Anduril team’s strategy of developing defense products on its own dime and selling them off-the-shelf, turning the traditional business model of defense contractors on its head. I was also impressed by their choice to build the company in Southern California, deliberately removed from Silicon Valley. My coffee with Palmer came only a few weeks after Google canceled Project Maven, which would have assisted the Department of Defense with AI-based drone-footage analysis. When I eventually told colleagues at Tesla that I was leaving to join a 20-person defense technology startup working out of a hangar near Santa Ana airport, they looked at me like I was insane.&lt;/p&gt;
    &lt;p&gt;Click here to subscribe to print for your office or home.&lt;/p&gt;
    &lt;p&gt;When I joined the company in September 2018, we worked out of a small building at 3000 Airway, then expanded into hangar B8, which was adjacent to a dog kennel at the Santa Ana airport. There was no heating or air conditioning, just incessant barking. I claimed a closet that received a little heat through proximity to another part of the building. That became my lab.&lt;/p&gt;
    &lt;p&gt;On my first day, I found myself back at MIT, on stage beside Palmer, explaining our vision to skeptical engineering students confused why anyone would work in the defense sector. By the end of that same week, I was on the southwest border installing one of our pilot systems, a surveillance tower. It wasn’t the polished product defense contractors typically wait to unveil—in fact, our first tower was literally a telephone pole with a gaming PC housed in a weatherproof box, a pan-tilt unit normally used as stage lighting, with spikes on it to prevent bird shit from blocking the sensors. A lot of it came from Home Depot.&lt;/p&gt;
    &lt;p&gt;That makeshift tower, which we built on our own dime to prove what was possible, helped intercept nearly 1,000 pounds of marijuana and led to dozens of drug trafficking arrests—ultimately earning us a pilot program with Customs and Border Protection. It was primitive, but it worked, and reflected our approach: get to a minimum viable demonstrator, something that creates end-to-end capability, then iterate ruthlessly. By then I understood that Anduril would be the fastest, most intense environment I’d ever experienced.&lt;/p&gt;
    &lt;p&gt;A few days each week, we’d pile into vehicles and drive to our test site in Apple Valley—a remote California desert location where temperatures reached 110 degrees on summer days, then dropped to 30 at night. We stayed in the cheapest hostel-like accommodations we could find and worked 16- to 18-hour days in complete isolation from distractions. We operated out of dusty trailers with minimal equipment. If something broke, we couldn’t just order a replacement part—someone had to drive 200 miles back to Santa Ana, rebuild the component, then drive 200 miles back.&lt;/p&gt;
    &lt;p&gt;Brian Schimpf, Anduril’s co-founder and CEO, functioned as our chief engineer, with an intuitive understanding of how every component fit together. Brian shaped our strategy and had a remarkable knack for pulling together engineering pieces and connecting them to business outcomes. When obstacles appeared, the other founders would come up with a strategy to unblock the engineering so Brian could focus on solving technical challenges—like the time co-founder and COO Matt Grimm chartered a plane in order to fly oversized batteries across the country for a critical demo.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Our first tower was literally a telephone pole with a gaming PC housed in a weatherproof box, a pan-tilt unit normally used as stage lighting, with spikes on it to prevent bird shit from blocking the sensors. A lot of it came from Home Depot.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Even in those early days, the company was single-minded and self-selecting. No one cared about meetings or performance management or building a well-rounded company. We lived and died by our ability to quickly fire a “tracer bullet” through the heart of each problem, illuminating a clear path to the full solution.&lt;/p&gt;
    &lt;p&gt;It was a bad day when we’d be testing a quadcopter drone and it would crash a couple of kilometers from the takeoff zone. That seemed to happen most often at night or on weekends at the Capistrano Test Site (CTS), an environmentally protected zone of beautiful rolling hills, where we had to recover every scattered bolt by hand. At 2am, we’d be searching in the middle of the cactus brush for a drone that had fallen out of the sky.&lt;/p&gt;
    &lt;p&gt;We came up with creative solutions, like gluing glow sticks to the “birds” (our word for drones) so we could see them in the dark, or putting beepers on them so we could hear where they landed.&lt;/p&gt;
    &lt;p&gt;Anduril’s first surveillance tower, with spikes to prevent birds from relieving themselves on the sensors and gaming PC.&lt;/p&gt;
    &lt;p&gt;Early radio frequency (RF) chamber, purchased on eBay.&lt;/p&gt;
    &lt;p&gt;Like diamonds, all great products are born from heat and pressure. Consider the Tesla Model 3: The battery engineers pushed for maximum energy density; the chassis team insisted on minimal weight and thickness; and the safety team required uncompromising crash resilience. Each group had conflicting demands, yet this friction ultimately yielded an exceptional battery pack—powerful, efficient, and safe. No stakeholder was completely satisfied, but through that creative rigor and tension, something extraordinary emerged.&lt;/p&gt;
    &lt;p&gt;The same was true at Anduril, where an additional layer of pressure came from the international political reality. America’s adversaries evolve tactics in weeks, and the company had to operate with that same urgency. We couldn’t deliver solutions in years—we needed to prototype, test, and deliver in months or weeks. Each product therefore had to embody our chief working principles: move fast with purpose; question everything; take ownership; keep it simple; hold high standards; and design with deployment in mind.&lt;/p&gt;
    &lt;p&gt;One of the first products I worked on was our counter-drone interceptor, Anvil. This was important because the US government had spent billions of dollars on counter-drone technology with limited success—in some cases, they were literally training falcons (real birds in this case) to take down drones, or using Patriot missiles costing millions of dollars to destroy $500 quadcopters. The inefficiency was absurd, but the problem was serious. In 2018, a rogue drone shut down London’s Gatwick Airport for two days, and they were being used on the battlefield more and more.&lt;/p&gt;
    &lt;p&gt;We had a simple idea: What if we just used a quadcopter to crash into another quadcopter? Our first prototype used an Intel RealSense camera to look up and fly into targets. The approach was primitive—if the target moved, we’d miss—but at a bake-off at White Sands Missile Range, our system successfully intercepted targets about 40% of the time, while competitors had single-digit success rates.&lt;/p&gt;
    &lt;p&gt;The government customer was in shock, but to us, a 40% hit rate was nothing to dine out on. They quickly deployed our solution as a stopgap overseas, which created pressure to improve, because the system could fall short in the field: the cameras and sensors couldn’t reliably detect targets due to glare or clouds, and our guidance system was too basic.&lt;/p&gt;
    &lt;p&gt;We had three months to stop the bleeding, and I spent my paternity leave developing a 3D radar system. I realized we could leverage the same radar technology used in self-driving cars, build an RF frontend with a non-uniform antenna, and create our own algorithms for terminal guidance instead of collision avoidance.&lt;/p&gt;
    &lt;p&gt;In three months, we went from a 40% kill probability to knocking out 35 of 35 targets. There wasn’t a quadcopter you could throw at our mechanical bird that it couldn’t take out. We even hired one of the top First Person View (FPV) drone pilots to try to evade our system. Anvil caught the drone every time.&lt;/p&gt;
    &lt;p&gt;As Elon would often say at Tesla, “If the schedule is long, it’s wrong; if it’s tight, it’s right.” Speed was our weapon. Even our recruitment process reflected this: We’d openly talk to candidates from defense contractors and show them around our facilities, confident that we were moving faster.&lt;/p&gt;
    &lt;p&gt;“Our first prototype used an Intel RealSense camera to look up and fly into targets. The approach was primitive—if the target moved, we’d miss—but at a bake-off at White Sands Missile Range, our system successfully intercepted targets about 40% of the time.” Anvil V1.&lt;/p&gt;
    &lt;p&gt;Repairing the bistatic radar seeker with a soldering iron in the electrical engineering R&amp;amp;D lab.&lt;/p&gt;
    &lt;p&gt;We paired speed with another key principle: question everything. This meant engineering from first principles—breaking down every problem into physics, math, and operational reality, then building solutions from there.&lt;/p&gt;
    &lt;p&gt;In 2019, the US Air Force wanted to explore new solutions for detecting low-altitude cruise missiles—a critical capability with threats from Russia and China that could penetrate our borders. The official requirements for the Advanced Battle Management System (ABMS) program called for a radar with high azimuth and elevation accuracy and full hemispherical coverage, which would mean multimillion-dollar systems.&lt;/p&gt;
    &lt;p&gt;But no air defense radar manufacturer wanted to sell to us—some because we were a small no-name company, others because they wanted to capture the full value of delivering their own systems, still others because they saw Anduril as a potential future competitor. We needed to create our own solution, but traditional radar development takes years.&lt;/p&gt;
    &lt;p&gt;Instead of taking the Air Force’s brief at face value, we asked: “Why do they need hemispherical coverage? What’s the actual threat?” The primary concern was low-altitude cruise missiles coming across unprotected territory, which meant we only needed to cover the first few degrees above the horizon, not the entire sky.&lt;/p&gt;
    &lt;p&gt;We modified a $5,000 commercial boating radar—the spinning “candy bar” type you see on fishing vessels. Boat radars are designed to detect small objects far away on water, but not in the air. By modifying the waveguide assembly to create a narrower beam, we concentrated more energy in a specific direction and extended the range by about 10x.&lt;/p&gt;
    &lt;p&gt;When we showed up to the bake-off with our cheap modified boat radar mounted on a rickety welded truck, competing against traditional defense contractors with multimillion-dollar systems the size of a shipping container optimized for 360-degree hemisphere coverage, the other attendees laughed.&lt;/p&gt;
    &lt;p&gt;Yet we won. We understood what the customer needed to accomplish, but mostly ignored what they thought they wanted in their requirements. Our system could be scaled along any border as a true cruise missile detection network at a cost that was orders of magnitude lower than traditional solutions.&lt;/p&gt;
    &lt;p&gt;Inner guts of a tower assembly.&lt;/p&gt;
    &lt;p&gt;The author flying the Anvil V3.9.&lt;/p&gt;
    &lt;p&gt;Every project at Anduril had a directly responsible individual (DRI)—a single owner accountable for the outcome from end to end. Sometimes ownership meant taking extraordinary measures when the stakes were high.&lt;/p&gt;
    &lt;p&gt;One of the most dramatic examples arose at a critical test for a US defense customer of our V2P interceptor drone—a quadcopter that could fly at 150 miles per hour and intercept other drones with impressive accuracy. This was a billion-dollar contract opportunity that could transform Anduril from a border protection startup into a serious defense company.&lt;/p&gt;
    &lt;p&gt;V2P was an evolution of our Anvil system. After successfully developing Anvil to intercept small quadcopters, we discovered a much bigger threat emerging: larger Group Two and Group Three drones. The former are often used for intelligence reconnaissance and surveillance missions, and the latter with larger payloads and longer ranges. Countries like Iran were developing the Shahed series—massive drones that could carry substantial explosive payloads and fly kamikaze-style into bases.&lt;/p&gt;
    &lt;p&gt;Anvil was already successful, but it wasn’t designed for these larger targets. It needed a complete overhaul: more speed, better guidance, and enhanced durability.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;We lived and died by our ability to quickly fire a “tracer bullet” through the heart of each problem, illuminating a clear path to the full solution.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Over three and a half months, we developed the V2P. We redesigned the propellers, motors, and the entire power architecture, which pushed the boundaries of what a small drone could do.&lt;/p&gt;
    &lt;p&gt;The result was unheard-of: a 5.2 kilogram vehicle that could achieve a speed of 147 miles per hour. (The world-record quadcopter at the time weighed 800 grams and did 173 mph). More impressively, it maintained sub-degree accuracy on pitch, roll, and yaw, even at steep angles of attack, where quadrotor dynamics become extremely challenging.&lt;/p&gt;
    &lt;p&gt;As a US defense customer’s Systems Integration Partner (SIP) competition approached, we needed to build 50 drones. One of our lead engineers from the test team and his co-worker came in on a weekend and built 28 complete vehicles in a single day—a feat that would have taken weeks through conventional processes. In total, they built 53 vehicles in 14 days, test-flying each one three times while I analyzed all the flight logs in real time. When we arrived at the competition, our competitors showed up with elaborate, expensive systems that had been years in development. Our V2P interceptor dominated the event. It destroyed 30 targets with extra interceptors to spare.&lt;/p&gt;
    &lt;p&gt;The highlight came on the evening before the last day of the bake-off, when US government officials asked if we could take down a far bigger Group Three aircraft—much larger than our system was designed for. With our existing approach, the V2P would simply bounce off such a large target. But we had a potential solution: radar firmware that could identify propellers through micro-Doppler signature and target them specifically. The night before the upcoming test round, we needed to finish writing the updated firmware and flash all of our drones with it.&lt;/p&gt;
    &lt;p&gt;At 3am, the same lead engineer who built 53 vehicles in two weeks went down to the hotel room where the drones were stored and proceeded to disassemble 18 birds. He took apart each radar, separated the processor and RF boards, hooked them up to his computer, flashed them with the new firmware, verified the changes, and reassembled everything. At 7am, he casually walked out as if he’d just woken up like everyone else, as the competing teams came down the elevators.&lt;/p&gt;
    &lt;p&gt;On the last day of the bake-off, our modified V2P took out the Group Three target on the first attempt, hitting it directly through the propeller. The entire room erupted in celebration.&lt;/p&gt;
    &lt;p&gt;That win was the cherry on top of a 200-person effort that ultimately secured a billion-dollar program of record for Anduril, transforming the company’s trajectory. It also exemplified the level of ownership we cultivated in our engineers—people who felt in their bones that they owned the outcome, and therefore cared so deeply about it that they didn’t blink at doing the kind of dirty work that their counterparts in other companies might consider drudgery.&lt;/p&gt;
    &lt;p&gt;This kind of approach is never without risk. But in our environment, we gave people agency and trusted their judgment. When a single engineer saw a 50/50 chance of success versus the near-zero probability with the original firmware, he made a call that changed Anduril’s future.&lt;/p&gt;
    &lt;p&gt;Team member building a Bolt for development testing.&lt;/p&gt;
    &lt;p&gt;Click here to subscribe to print for your office or home.&lt;/p&gt;
    &lt;p&gt;In engineering, simplicity is strength. At Anduril, we continuously asked what we could eliminate or simplify.&lt;/p&gt;
    &lt;p&gt;Consider the challenge of defending vast territories against cruise missiles. Conventional systems, like Patriot PAC-3 and NASAMS batteries, typically cost millions of dollars per installation. So we asked ourselves a simple question: What if we could create a forcefield of low-cost drones to intercept cruise missiles worth millions?&lt;/p&gt;
    &lt;p&gt;The concept seemed absurd at first, even to our team—the overmatch appeared too extreme. But we stripped the problem again to its fundamentals. Cruise missiles are fast, but they follow predictable flight paths. If we could accurately determine that flight path using two ground-based IR passive sensors (what we called Wide-Area Infrared System for Persistent Surveillance, or WISPs), we wouldn’t need expensive targeting systems on the interceptor itself.&lt;/p&gt;
    &lt;p&gt;We modified our Anvil drone to carry no sensors at all—the drone would simply position itself in the projected path of the incoming missile, aligning with where the missile would pierce our virtual “force field.” Despite the initial skepticism, we demonstrated the concept successfully, destroying a target that could fly an order of magnitude faster than our interceptor.&lt;/p&gt;
    &lt;p&gt;The beauty of this solution wasn’t just its low cost, but its elegance. We didn’t need to match speed with speed or complexity with complexity. We found the simplest possible point at which to intervene and disrupt the threat.&lt;/p&gt;
    &lt;p&gt;We applied this thinking to all our products, and constantly fought against feature creep. Most product managers naturally want to add capabilities—one after the next after the next. But we ruthlessly focused on the 20% of features that delivered 80% of the value, and made those exceptional.&lt;/p&gt;
    &lt;p&gt;A prototype compressor for Roadrunner turbojet development.&lt;/p&gt;
    &lt;p&gt;Team member utilizing a 5-Axis DMG machine to make challenging parts.&lt;/p&gt;
    &lt;p&gt;Yet there’s a line between scrappy and crappy. At an all-hands meeting a while back, one of our team members asked, “Why don’t we just build perfect products?” The answer reflected our core philosophy: We had an ethical obligation to get the best solutions into warfighters’ hands quickly. We could build one or two gold-plated systems over the course of years, or we could deliver 10 near-perfect solutions that actually make it to the field in a battle-relevant timeframe.&lt;/p&gt;
    &lt;p&gt;We were scrappy to the core, but we also had a very clear understanding of what “deployability” meant for each system. We were uncompromising about those standards while tolerating rough edges elsewhere. A disciplined approach to trade-offs allowed us to deliver capabilities that competitors with 10 times our resources couldn’t match. The key was attention to detail. Teams without a painfully clear understanding of what’s important have a bias toward frills, whereas we went after the aspects that delivered the most value to the warfighter—avoiding the classic mistake that sales-led organizations often make by building pretty products that fall short in functionality or usability.&lt;/p&gt;
    &lt;p&gt;To take one example, when we learned the Marine Corps was seeking a new loitering munition, we initially didn’t want to compete. The thinking was that a different company specializing in thermal imaging cameras and sensors had been working on this project for five years, and Anduril would simply waste millions of dollars trying to beat them.&lt;/p&gt;
    &lt;p&gt;Yet the opportunity for a competitive edge remained. Quadcopters usually flew slowly into targets horizontally and could be seen coming from far away. What we needed was a drone that could dive with such blistering speed that by the time you heard its scream, it was already too late … If we could come up with a game-changing new capability for top-down kills that would be much harder to anticipate, we could win.&lt;/p&gt;
    &lt;p&gt;I asked Raichelle Aniceto, my chief of staff, to procure the competitor’s drone, and within days, we had one completely disassembled in our lab. We hot-glued the components onto a trifold board using her wedding invitation kit. What appeared to be a science fair display nevertheless clearly demonstrated how each component was not only suboptimal, but dependent on multi-tiered foreign supply chains—and that we could build something lighter, faster, easier to manufacture, and more reliable, while de-risking tangled Chinese supply chains.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Like diamonds, all great products are born from heat and pressure.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;But there was a catch—the Marines expected a product, not a proposal, and we had nothing more than a concept. We went a week without sleep to create high-performance renders, building life-like mockups, and drafting a technical proposal for a drone that didn’t yet exist.&lt;/p&gt;
    &lt;p&gt;The proposal was submitted 60 seconds before the deadline. We won the first phase, but now we had to actually build what we’d promised.&lt;/p&gt;
    &lt;p&gt;This became Bolt—a loitering munition that could precisely target ground vehicles. I saw it as a weekend project at first: take our existing drone platform, retrofit it with a vision seeker, and have it crash into ground targets instead of aerial ones. We created a quick demonstration video for a proposal and were one of the few companies down-selected.&lt;/p&gt;
    &lt;p&gt;As the project progressed and the stakes escalated, we learned that what worked for aerial targets wouldn’t work for ground targets. The team tried to apply the same guidance approach that worked for Anvil, but when diving at steep angles toward the ground, the drones kept missing by several meters.&lt;/p&gt;
    &lt;p&gt;During a critical customer demonstration, our bird completely missed its target. The room went silent. We knew we were at risk of losing a half-billion-dollar program milestone if we couldn’t fix Bolt quickly.&lt;/p&gt;
    &lt;p&gt;The engineering team tried applying more aggressive corrections, but the misses only grew wider. It turned out there was a fundamental issue: When a quadcopter dives downward faster than its propellers can “bite” through the air, the propellers act as air brakes, inverting the effect of guidance commands. We needed to completely reverse their guidance commands when crossing this threshold.&lt;/p&gt;
    &lt;p&gt;That weekend, I developed an entirely new guidance approach we called “Dive,” which allowed the drone to fall along a target vector with precise lateral corrections. Along with optimizing the propellers for inflow velocity with dynamic throttle margin, the problem was solved.&lt;/p&gt;
    &lt;p&gt;Later on, when preparing for a demonstration with a four-star general, another issue emerged: The airframe was vibrating and we were losing attitude control. The team drove the drone (with no lethal payload on it, of course) from Southern California to my home in Los Altos in the middle of the night. The next day was the baby shower for my second child, and we spent the hours and minutes before the guests arrived tuning the drone in my backyard.&lt;/p&gt;
    &lt;p&gt;The ferocious commitment from our team paid off again: The Marine Corps down-selected Bolt for its Organic Precision Fires-Light (OPF-L) program.&lt;/p&gt;
    &lt;p&gt;“The ferocious commitment from our team paid off again: The Marine Corps down-selected Bolt for its Organic Precision Fires-Light (OPF-L) program.”&lt;/p&gt;
    &lt;p&gt;It was never enough to create solutions that worked in the lab. Each one had to work reliably in the field, at scale, and at a cost that made sense.&lt;/p&gt;
    &lt;p&gt;This was part of Anduril’s secret sauce, and antithetical to how traditional defense contractors operate. The defense primes typically optimize for high-margin, low-volume production with expensive maintenance contracts. Anduril brought Silicon Valley’s mindset of scalable technology to defense—solutions that could be mass-produced and widely deployed.&lt;/p&gt;
    &lt;p&gt;When designing hardware, we broke the product development process into three distinct stages. In the conceptual phase, the most important metric was lead time—how quickly we could get the components needed to build a prototype. In the new product introduction phase, when building 10 to 100 units, we focused on ramp time—how quickly we could work with vendors to reach the rates required for a pilot. In the third stage, full-rate production, the focus shifted to scrap rate and cycle time.&lt;/p&gt;
    &lt;p&gt;Traditional defense programs often fail because they create exotic systems that are too hard to produce or too expensive to deploy at scale. We were determined not to make that mistake.&lt;/p&gt;
    &lt;p&gt;By designing with scale in mind from day one, we aimed to create a virtuous cycle: our products could be deployed more widely because they were affordable, which generated more data and experience, which improved the next generation of products.&lt;/p&gt;
    &lt;p&gt;These core principles guided our product development. But principles alone aren’t enough. To apply them consistently across hundreds of engineers and dozens of products, we needed to design an organization that could sustain this approach at scale.&lt;/p&gt;
    &lt;p&gt;Electrical test rack with a new board.&lt;/p&gt;
    &lt;p&gt;As we approached 60 employees, it became impossible for everyone to report to Brian. What began as my leadership of a handful of electrical engineers quickly expanded to 75 people, then to all hardware engineering, and ultimately to all product engineering—electrical, mechanical, and embedded systems combined. When I became SVP of Engineering in June 2022, I had 164 people in my department. By the time I left in March 2024, it had grown to 550 engineers working on 30 products across 15 different families.&lt;/p&gt;
    &lt;p&gt;Building a high-performance organization was as important as solving technical problems. Throughout my time, I had to maintain this dual identity—an engineer on the frontlines driving design and development, and also a leader responsible for creating the organizational structure that would enable others to do the same. I needed to build a leadership team that could own full lifecycle product development and deliver world-class systems at the pace and precision demanded by our mission. Every hire was made with this blueprint in mind.&lt;/p&gt;
    &lt;p&gt;The first priority was to anchor the organization with deep technical credibility. “Badass engineers want to work for badass engineers,” as the saying goes—the best will only work for leaders they can learn from and respect technically. We needed to avoid the common mistake made by organizations which fail by promoting or hiring managers without the technical skills to understand problems, build strong teams, or avoid making flawed engineering decisions.&lt;/p&gt;
    &lt;p&gt;For the electrical team, we wanted to position ourselves at the leading edge of avionics design. I recruited Shaun Donovan, a veteran of General Atomics and an early employee at Anduril, who had been involved in nearly every major electrical design to date. His mandate was clear: take hard-won lessons from legacy systems, and build the next generation of electrical architecture from first principles. On the mechanical side, we needed a leader deeply experienced in rapid prototyping and fabrication; someone who could translate ambitious concepts into functional hardware quickly and effectively. That was Matt Zipfel, whose career at SpaceX was defined by turning bold mechanical ideas into working prototypes under intense timelines.&lt;/p&gt;
    &lt;p&gt;With the core engineering leadership in place, the next critical step was embedding product thinking across the organization and developing a scalable product platform. We needed product leaders who could unify technical execution with the production rigor needed to scale. I brought over Danish Tejani, Anduril’s first hardware product manager and a former NPI lead at Tesla, to help build our product development function.&lt;/p&gt;
    &lt;p&gt;As the team matured and the product portfolio expanded, it became clear that maintaining alignment with the defense customer was both a strategic imperative and a growing risk. Many of our new hires came from non-defense industries, and while that brought valuable innovation, it also introduced a potential gap in mission understanding. To close that gap, we hired Joe Bayer, a former GA program executive and F18 pilot. His deep domain knowledge and firsthand understanding of defense customers allowed us to stay laser-focused on delivering solutions that mattered.&lt;/p&gt;
    &lt;p&gt;The final piece of the leadership architecture was operational scalability. By this point, we had grown to hundreds of engineers across dozens of teams. We needed a chief of staff who could partner with me to build and run the engineering organization, without losing the technical context that made us successful. It’s common practice to hire Jared from Silicon Valley types, but I needed someone who could communicate with engineers on their level and play the role of a technical leader. That was Raichelle Aniceto—an MIT-trained aerospace engineer who led Relativity Space’s ambitious Terran R rocket program.&lt;/p&gt;
    &lt;p&gt;Test racks for electrical assemblies in the R&amp;amp;D building’s electrical engineering lab.&lt;/p&gt;
    &lt;p&gt;Dev space in the R&amp;amp;D building’s electrical engineering lab.&lt;/p&gt;
    &lt;p&gt;Anduril is “an amusement park for engineers,” as I once remarked, because we worked on such diverse and challenging technologies. But behind the thrill and excitement had to be a carefully designed system that could turn ambitious ideas into deployable products. As we grew from a handful of engineers to over 500, maintaining our speed and innovation became increasingly challenging. Traditional organizational models wouldn’t work—dedicated teams for each product would have required thousands of engineers and created silos that slowed innovation. We needed something different.&lt;/p&gt;
    &lt;p&gt;We rebranded our engineering organization as “Product Engineering” to make our purpose clear: delivering products that meet customer needs. We then consolidated scattered teams into a cohesive group with three clear frameworks: products, core technologies, and key capabilities.&lt;/p&gt;
    &lt;p&gt;Products were our mission-focused integrated systems. Core technologies were our standardized building blocks—our LEGO pieces—that could be rapidly assembled into new products. Instead of starting each drone from scratch, we created reusable components like flight computers and propulsion systems. Key capabilities were our internal engineering services, like a machine shop that could transform digital concepts into physical prototypes within hours, or teams that could “shake, bake, and shock” components to ensure reliability.&lt;/p&gt;
    &lt;p&gt;What made this work was our matrix organization. Instead of creating dedicated teams for each product, we built functional organizations (across electrical, mechanical, and embedded systems) with deep expertise that could surge resources toward critical projects when needed. When we began developing Roadrunner, we pulled engineers from electrical and mechanical pools for intensive development, then shifted them to other projects when those phases ended.&lt;/p&gt;
    &lt;p&gt;The results were unprecedented in hardware: In early 2023, fewer than 200 people were responsible for over 25 different products, some of which were deployed across the world in the order of thousands.&lt;/p&gt;
    &lt;p&gt;We maintained integrated product teams where specialized expertise was required, like our Electronic Warfare group led by Sam El-Akkad, with deep RF and signal processing expertise. Or the Imaging team led by Bill Ross, with expertise in developing sensors down to the pixel-level silicon design. We also established product architects who were responsible for trade studies and system-level decisions—engineers who had proven themselves technically and could now lead cross-functional efforts.&lt;/p&gt;
    &lt;p&gt;With this foundation, we maintained small, focused teams while leveraging the broader ecosystem around them. But structure alone wasn’t enough—achieving this level of performance required recruiting the right people and building strong leadership capable of operating in a dynamic environment.&lt;/p&gt;
    &lt;p&gt;The author setting up a Pulsar, Anduril’s electronic warfare product, in a RF anechoic chamber.&lt;/p&gt;
    &lt;p&gt;The leadership approach at Anduril centered on a few core principles.&lt;/p&gt;
    &lt;p&gt;First, we prioritized relentlessly through a daily red-light/green-light system based on the Objectives and Key Results (OKRs) we set. Every product and project had clear metrics that we reviewed constantly. When something showed red, we’d immediately assemble the team to identify root causes. This consumed 60–70% of my time—figuring out the biggest obstacles and eliminating them alongside the team. I was notorious for being chronically late to scheduled meetings because I wouldn’t cut short work on critical problems.&lt;/p&gt;
    &lt;p&gt;Second, we maintained technical credibility through hands-on involvement. By day, I’d handle the corporate aspects—meeting with leaders across the company to drive product and technology development, and continuing a constant discussion about what was slowing us down, what was blocked, and what was broken. But after 5pm, my engineering work began. I’d return to the building at 7:30pm after dinner and wander the labs until the early hours, sitting with teams debugging problems. I’d whiteboard calculations, write Python scripts, and sometimes even solve structural dynamics questions. Engineers knew leadership understood their challenges at a fundamental level because we were there doing the work with them.&lt;/p&gt;
    &lt;p&gt;Third, many of us deliberately stayed out of the spotlight. If you look through photos of our major victories in those days, you won’t find me in them. This wasn’t false modesty; it was strategic. I wanted teams to own their achievements completely. By giving them full credit, they grew more confident and capable for the next challenge.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The results were unprecedented in hardware: In early 2023, fewer than 200 people were responsible for over 25 different products, some of which were deployed across the world in the order of thousands.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Underlying these principles was a fundamental belief: I work for my team. These 550 engineers were dedicating the best years of their careers to Anduril, and I felt responsible for making those years meaningful. My job was to harness the unique superpowers of each individual and create an environment where they could thrive.&lt;/p&gt;
    &lt;p&gt;This philosophy has to start at the top, and the impact of this approach, exemplified by Brian, cascaded through our organization. When leaders instead prioritize expanding their scope and influence over developing their teams, they create a vacuum that attracts similar self-interested leaders. The result is inevitable: layers of political fiefdoms that don’t value winning at an outcome level and don’t care about their people.&lt;/p&gt;
    &lt;p&gt;We elevated our approach into the management structure by promoting engineers who had earned respect through technical excellence, and creating a “scaffolding” system to support these technical leaders as they developed management skills.&lt;/p&gt;
    &lt;p&gt;The latest Anvil, equipped with energetics and Launch Box.&lt;/p&gt;
    &lt;p&gt;Backside of the bistatic seeker.&lt;/p&gt;
    &lt;p&gt;When it came to recruitment, we obsessed over what I called “the highest density and intensity of talent.” While talent density is a common concept, we focused equally on how to leverage a team’s capabilities through the environment we created. As Steve Jobs illustrated with his rock tumbler story, ordinary rocks become polished gems through friction against each other—just as talented teams polish each other through productive conflict to create something exceptional.&lt;/p&gt;
    &lt;p&gt;Our hiring approach was uncompromising. We installed “bar raisers” on interview panels—people who would reject candidates unless they were exceptional. I personally spent about 20% of my time on recruiting.&lt;/p&gt;
    &lt;p&gt;Even when scaling to 30–40 hires monthly, I interviewed most engineering candidates. I built Python dashboards to analyze our talent sources and maintained a LinkedIn Recruiter account. We expanded geographically, opening offices strategically to access new talent pools when my personal network was completely depleted.&lt;/p&gt;
    &lt;p&gt;We sought engineers who combined technical excellence with passion for our defense mission. We particularly valued former startup founders for their demonstrated agency and self-motivation.&lt;/p&gt;
    &lt;p&gt;Our performance management philosophy sat between two extremes: Elon’s approach of firing anyone on the left side of the performance curve versus Jensen Huang’s philosophy of trying to uplevel everyone. Elon believed that if you had five apples and one might be rotten, you have to throw out the whole batch. It’s a ruthless but logical view—bad apples can spoil the bunch. My approach aimed to be pragmatic—we maintained annual 10% attrition targets, but focused on clear expectations and respectful transitions.&lt;/p&gt;
    &lt;p&gt;We created a quarterly performance coaching program that identified the bottom 10% who needed support. We established clear OKRs so everyone understood their metrics for success. With transparent expectations, underperforming engineers often recognized on their own when they weren’t the right fit, leading to more respectful separations. This avoided the toxic alternative, common in other companies, where managers undermine struggling employees behind their backs rather than addressing issues directly.&lt;/p&gt;
    &lt;p&gt;Preventing organizational bloat proved equally critical. B-players who don’t understand product requirements tend to inflate headcount needs. When business lines claimed they needed 50 people for a project, we evaluated the engineering requirements and often found half were unnecessary. Our hiring estimates typically ran at half of what stakeholders requested and a third of industry standards. I reviewed every engineering hiring proposal personally, rejecting many while we still grew rapidly.&lt;/p&gt;
    &lt;p&gt;Building this culture was like coding our organizational DNA—you need the right sequences at the start. The legendary stories from Anduril’s early days became the foundational code, continuously retold and refreshed with new chapters, embedding traits that transformed new engineers into problem-solvers capable of the impossible. When I became responsible for new teams, engineers would approach me saying, “We’ve heard so many stories about what it was like at the beginning.” These stories weren’t just entertainment; they transmitted our values and showed what was possible. As our team grew by over 2,500%, these legends ensured that each new hire understood what made us different.&lt;/p&gt;
    &lt;p&gt;Thermal imager with a 900mm lens, in the R&amp;amp;D building’s dev test lab.&lt;/p&gt;
    &lt;p&gt;Throughout my career, I’d worked on cutting-edge hardware systems—drones, missiles, autonomous vehicles—that could theoretically perform any task, but in practice were often constrained by limited autonomy and human-guided control. Despite extraordinary advances in robotic hardware, the foundational intelligence to power these systems lags far behind. Most autonomous robots remain essentially puppets on strings, awaiting human instruction or executing elaborately choreographed behaviors.&lt;/p&gt;
    &lt;p&gt;In February 2024, I’d been approached about advising a robotics startup and called Brian to discuss it. We talked about physical intelligence and how, while AI companies everywhere were chasing language models and reasoning, half of the world’s GDP was generated by physical labor—yet no one had cracked the foundational model for robots to function effectively in the real world.&lt;/p&gt;
    &lt;p&gt;Brian listened carefully, then said something that will stay with me forever: “I’ve always seen you as a founder.”&lt;/p&gt;
    &lt;p&gt;For me, this wasn’t just encouragement—it was perspective from someone who had followed the same path, moving from leading engineering at Palantir to co-founding Anduril. Brian ultimately supported my growing belief that building a universal intelligence to unlock the limitless capabilities of robotic hardware—and fundamentally reshape humanity’s experience of physical labor—was an opportunity I couldn’t pass up.&lt;/p&gt;
    &lt;p&gt;I thought then of my son, and the innumerable times he accompanied me, often at strange hours and with curious equipment in tow, to desert test sites, landing strips, and hotel rooftops. The best problems, I’ve always told him, are the ones everyone else avoids, until they become impossible to ignore. When he tells me he wants to build things like me when he grows up, I feel the weight of the work I did at Anduril, and what I still have left to do.&lt;/p&gt;
    &lt;p&gt;In May 2024, I left the company as a full-time employee to co-found Physical Intelligence (PI). PI is now building the universal intelligence model that can finally close the gap: a single, powerful “brain” capable of bringing genuine autonomy to every physically actuated device, from drones and industrial robots to household appliances. Solving this problem means more than a technological breakthrough: it’s about fundamentally redefining humanity’s relationship with physical labor, enabling a productivity revolution on the scale of industrialization itself.&lt;/p&gt;
    &lt;p&gt;The point is that Anduril’s own mission is so impactful, and meant so much to me, that I couldn’t have left it for any other mission short of PI’s. Still, the decision to leave wasn’t easy. I’d helped build a team of 550 extraordinary engineers who had become family. But the culture of ownership we’d created meant they didn’t need me anymore.&lt;/p&gt;
    &lt;p&gt;Adnan Esmail is the co-founder of Physical Intelligence and Emeritus SVP Engineering at Anduril.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45077209</guid></item><item><title>Are we decentralized yet?</title><link>https://arewedecentralizedyet.online/</link><description>&lt;doc fingerprint="a5d167f9a01e36be"&gt;
  &lt;main&gt;
    &lt;p&gt;This page measures the concentration of user data on the Fediverse and the Atmosphere according to the HerfindahlâHirschman Index (HHI) and the Shannon Index.&lt;/p&gt;
    &lt;p&gt;HHI is an indicator from economics used to measure competition between firms in an industry. Mathematically, HHI is the sum of the squares of market shares of all servers. Values close to zero indicate perfectly competitive markets (eg. many servers, with users spread evenly), while values close to 10000 indicate highly concentrated monopolies (eg. most users on a single server). In economics, values below 100 are considered "Highly Competitive", below 1500 is "Unconcentrated", and above 2500 is considered "Highly Concentrated".&lt;/p&gt;
    &lt;p&gt;The Shannon Index is an entropy-based measure used in ecological studies. It is computed the same as Shannon entropy using the natural log: the negative sum over all servers of the "market share" times the log of the market share. Lower values indicate lower entropy (a high concentration of one species), while higher values indicate a more even population. In this context, the maximum value is the number of servers, which would mean that all servers have equal population.&lt;/p&gt;
    &lt;p&gt;This site currently measures the concentration of user data for active users: in the Fediverse, this data is on servers (also known as instances); in the Atmosphere, it is on the PDSes that host users' data repos. All PDSes run by the company Bluesky Social PBC are aggregated in this dataset, since they are under the control of a single entity. Similarly, mastodon.social and mastodon.online are combined as they are run by the same company.&lt;/p&gt;
    &lt;p&gt;The location of user data is not the only interesting measure of centralization. On a technical level, there is the network structure (peer to peer, relays, etc.), identity management, the infrastructure on which it is hosted, etc. On a legal level, there are issues regarding the jurisdictions where servers are located, companies are located, etc. On a social level, there are issues around where human power is concentrated in and on the platform, and whether that power is disproportionately held by certain groups. If you would like to help contribute other measures of decentralization, get in touch.&lt;/p&gt;
    &lt;p&gt;Code and data are available on GitHub. Comments and pull requests, including other metrics for measuring distribution and resiliency, are welcome!&lt;/p&gt;
    &lt;p&gt;By Rob Ricci: @ricci@discuss.systems / @ricci.io&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45077291</guid></item><item><title>Why did books start being divided into chapters? A new history</title><link>https://sydneyreviewofbooks.com/reviews/just-a-little-longer</link><description>&lt;doc fingerprint="bbc99a03246082b0"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Perhaps it is the inevitable fate of any convention, but literary history does not, it turns out, have many examples of people appreciating great chaptering. In The History of English Prose Rhythm (1912) – one of the sources for James Joyce’s virtuosic-or-unreadable parodies of the evolution of English prose in Ulysses – George Saintsbury remarks on Thomas Malory’s decision to insert a chapter break at a decisive moment in his fifteenth-century Morte d’Arthur. At the end of chapter ten of the Morte, Lancelot rides into a castle, having slayed its gatekeeper, only to hear from the castle’s residents ‘in doors and windows that said “Fair Knight: thou art unhappy.”’ Saintsbury praises Malory’s sense of timing here. The chapter break introduces a pause, leaving those words, as Dames puts it, ‘hovering in the air’. The next chapter begins with Lancelot successfully freeing captives from the prison; as such, the chapter has served to elongate the narrative incident and heighten the tension.&lt;/p&gt;
      &lt;p&gt;The only problem is that this was not Malory’s division, but rather one added by the printer William Caxton (c.1422-92). This fact was only discovered in 1934 when an edition of the Morte predating Caxton was discovered at Winchester College. As it turns out, the Winchester version had no chapters. The modulations of time are the work of Caxton’s specific ‘remediation’. He creates an ‘artful segmentation, a resonant silence, in the printed volume’s visual patterning’. Caxton is paired in this chapter of The Chapter with the anonymous fifteenth-century remediators who transformed Chrétien de Troyes’s great twelfth-century Arthurian verse into prose. Unlike Caxton’s their results are not acclaimed; like the authors of movie novelisations today, they are vulgarisers, profaning the sacred bonds between form and content. In their hands, Chrétien’s flowing verse – praised in Mimesis by Auerbach as ‘light and almost easy’ – is not only segmented with red ink, but also crowded with insistent explanations in the register of narrative history (‘How the king kissed Enide’). Again, in the manner of movie novelisers, moments of introspection are reduced while battle sequences are dilated with a vigour that may equally be judged ‘clumsy technique’ or ‘daring maneuver’. More charitably, we might say these remediators practise what Dames calls, after Roman Jakobson, ‘intralingual translation’ – a phrase that calls back to mind (there it is again!) Davis’ experiment with Sterne. Like Davis, the remediators are working across an historical gap between time-feelings, transforming the internal temporality of Chrétien’s verse to fit their own prosaic times. Dames speculates on the reasons for this transformation. Could it be that the new and uncertain ruling clique in Burgundy – ‘freshly arrived at what would be its historical apex’ – preferred these ‘modes of intense now-time’ to the subtle continuities of Chrétien’s verse? Admitting the possibility of such an ‘ideological effect’, Dames also notes that it is equally likely that these ‘new temporalities’ were simply an ‘accident’. &lt;/p&gt;
      &lt;p&gt;Here one notices a difference between Dames’ previous books and The Chapter, whose broader subject matter perhaps helped it to become a finalist for the National Book Critics Circle Award. As brilliant works of literary history, Amnesiac Selves and The Physiology of the Novel both have the density of specialist knowledge and the sensitivity of immersive textual studies. Each book reconstructs a forgotten discourse: the first book reassembles the understanding of memory in the Victorian period, as explored through close readings of key Victorian novelists and scientific writers; the second builds on this interest by turning to the forgotten paradigm of ‘physiological’ novel theory and its exemplars, the philosopher-scientist-critics GH Lewes, ES Dallas, and Alexander Bain, who explored the embodied rhythms of reading. The physiological basis for a literary theory of form was ultimately swept away by more abstract formalisms espoused, on the one hand, by Henry James and his acolyte Percy Lubbock, and, on the other, by the practico-critical poetics of IA Richards (who effectively banished the novel from the classroom). Though Dames’ close readings in The Chapter are no less attentive and sinuous than in these earlier books, they are perforce more limited by the widened scope. I don’t intend to downplay the brilliance of Dames as a reader of individual texts or as a literary historian. However, as the study twists and turns, the density of historical detail together with the vast scope can at times induce a kind of mental torsion, with the dual impulses to historicise and taxonomise pulling in different directions.&lt;/p&gt;
      &lt;p&gt;In any case, the taxonomic conclusion Dames draws from the Burgundian remediators of Chrétien is that while their clumsy cuts are just that – cuts in a continuous weave – Caxton’s interventions are more like the ‘fade’, offering ‘aeration’ to the narrative text. In this respect Caxton’s edits are oriented not towards reference, but ‘narrative progression and rhythm’. The paradoxical outcome of this intervention is to unify Malory’s text precisely by dividing it; the Morte now comprises ‘semi-discrete moments in a single process, rather than entirely different moments’. Unification-through-division of this sort highlights two logics of narrative time: discontinuous and immersive reading. Chaptering itself comes to generate a ‘feeling of presentness’ by adding white space, a species of visual fermata between narrative actions – ‘emptiness [with] a temporal intensity.’&lt;/p&gt;
      &lt;p&gt;In their evocation of ‘presentness’, blank intensities of this kind recall a much longer-running theological dispute – between Augustine and the great English theologian Bede – on the divisibility of time. Where, after all, is the present? For Augustine, it is impossible to isolate something like ‘presentness’, for it is composed – as he put it in the Confessions – of ‘fugitive moments’, suspended in the future or always being sucked away into the past. The present is thus not measurable by a distinctive unit. Bede, in his eighth-century work The Reckoning of Time, argued to the contrary that there is a ‘minimal’ or ‘atomic’ unit of time. He made his case through a thought experiment. Say you are just about to be punched in the face. As a reflex, you flinch and close your eyes. Between these two moments – that ‘tiniest interval of time in which the lids of our eyes move when a blow is launched’ – is where ‘Bede’s present’ may be found: the atomic unit of presentness. Dames’ point is not that this theological argument directly influenced Caxton and the Burgundian prosateurs, but rather that the disagreement between the two great theologians reflects different investments in literary forms and their relationships to subjectivity in time. For Augustine a poem ‘held entire’ in the mind of a reciter approximates divine omniscience; for Bede, meanwhile, the atomic present is best accessed via a ‘punctuated continuity and directionality’ that might just be the hallmark of well-divided prose – consequently it is ‘seriality, not the transcendence of seriality, [that] is our access to the divine’. It is only in interrupting the present that we are able to perceive it.&lt;/p&gt;
      &lt;p&gt;But it is left to the early novel (as an historian of the form, Dames is candid about this bias) to develop fully the space between Augustine’s durationless void and Bede’s serial present. Leaping forward another two hundred-odd years, then, Dames shows this binary of discontinuous and immersive reading exploding into an array of conceptual possibilities. ‘The eighteenth-century synthesis’, as Dames calls it, spans the period from the picaresque to the first flourishing of the English novel in the middle of the eighteenth century, with the antics of Sterne and Henry Fielding. Functions inherited from older reference-based chapters are here experimentally set in tension with the narrative innovations first explored in the fifteenth-century remediations: the eighteenth-century chapter struggles with the relationship between the strange and the commonplace, the ‘striking and singular’ and the ‘categorizable’. Hence the initial distinction between discontinuous and immersive reading turns out to contain other oppositions that structure it in turn: between space and time; and between the time narrated and the time it takes to narrate or read.&lt;/p&gt;
      &lt;p&gt;Figuring all this is that moment on the staircase from the middle of Tristram Shandy, a kind of novelistic freezeframe, in which Sterne fixes Walter Shandy in place to reflect upon chaptering. In Dames’ account, this metachapter makes explicit the chapter’s full conceptual field: it has a direct address; it narrates both an incident and an interruption. What stands out as the real ‘heart’ of the metachapter is the staircase itself, which serves as a kind of symbolic definition of the chapter’s function. The staircase ‘captures the chapter’s double chronometry, that tension expressed by the simultaneous binaries of space versus time and narrated versus narrating times’. Fielding famously compared his chapters to inns along the road of a long journey, where the reader may ‘stop and take a glass’, but Dames thinks the staircase a better figure. Fielding’s coach trip is merely ‘linear, starting and stopping’; Sterne’s staircase, on the other hand, ‘unpacks two complementary but opposed dimensions’. Walter and Toby head down the stairs, troping narrative progress, while at the same time the sequence of steps and landings displays the segmentation of linearity ‘into discrete stages’. Sterne’s novel is a kind of ‘funhouse mirror’ of temporality: instead of proceeding steadily along a horizontal axis, our temporal schema is thrown down the stairs.&lt;/p&gt;
      &lt;p&gt;Later, in what JGA Pocock once called the ‘second eighteenth century’, the so-called Age of Revolutions, the chapter mutates again. Now ‘elongated’, the chapter is studied in two works that each seem in different ways to dissolve its earlier functions. In The Interesting Narrative of Olaudah Equiano (1789), the famous autobiography of a Nigerian slave who eventually regained his freedom and lived in Britain, Dames observes a mismatch between the protocols of chaptering and the life that these protocols divide up. Equiano’s chapters offer extensive summaries in the manner of a picaresque novel, but seem at the same time to show the inefficacy of that paratextual structure for capturing the experience of domination and eventual manumission. ‘How then to describe the chapter in Equiano, or more bluntly, why bother to do so?’ It is perhaps relevant precisely because the apparent orderliness of chaptering – its ability meaningfully to sculpt time – is shown, against the absolute alienation of slavery, to be unfit for its usual purpose of segmentation. Thus, the intensively expository chapter summaries of the Narrative not only fail to coordinate with the abbreviated summaries in the table of contents, but they also introduce chapters of far greater length (on average, Dames tells us, these are 6,500 words: up to four times longer than is typical for this period). So, then, what is the meaning of this technical decision? ‘To say,’ Dames writes, coming perilously close to ventriloquising Equiano, ‘a life cannot be measured this way, not this kind of life.’&lt;/p&gt;
      &lt;p&gt;As the self-testimony of a former slave, published in the same year as the storming of the Bastille, Equiano’s Narrative is certainly a sign of the times. It is perhaps as iconic a testament to the ‘new epoch’ of the nineteenth century as Girodet’s portrait of Jean-Baptiste Belley, a former slave from Saint-Domingue who would eventually be elected to the French National Convention. ‘New epoch’: this is the legendary, and perhaps apocryphal, phrase of Goethe, uttered in response to the defeat of the Prussians at Valmy in 1792. ‘From this place and from this day a new epoch in world history begins and you can say you were there to see it.’ We might observe that he, for one, did not reach here for the metaphor of the chapter – too ‘partial, fleeting, unhistorical’, according to Dames, to register this period’s epochal shifts. In Goethe’s Wilhem Meister’s Apprenticeship (1795-96), for instance, the chapter becomes even more elongated (one of them is 20,000 words!), doubling in size in the novel’s second half, which was composed after Valmy. Wilhem Meister’s Apprenticeship is a ‘triple turning point’, tying together ‘a world-historical transition, a maturational transition’, and a ‘career transition’ as Goethe, now older and on the other side of the revolution, has to produce fresh material rather than merely revising old writing. It is the very incongruity and ‘dilation’ of the chapter that ‘itself is historical’. Jane Austen’s career is also adduced as an example of the eighteenth century’s passing into the nineteenth, with the three youthful novels drafted in the 1790s averaging chapter lengths of around 2,000 words, while the ‘mature’ novels of the 1810s are nearer 3,500.&lt;/p&gt;
      &lt;p&gt;However sceptical we might like to be about periodisation, and nasty but inevitable grand narratives, it’s observable that history has, well, happened; historical experience makes ‘norms’ normal, and it is potentially why – to return to Davis’ question with which I began – more people still read Austen for pleasure than Smollett, Fielding, Defoe, or, um, John Bunyan. Not unrelatedly, I recently invited some students to read paragraphs from the fourteenth, fifteenth, sixteenth, seventeenth, and eighteenth centuries (respectively, Margery Kempe, Edmund Spenser, Margaret Cavendish, Eliza Haywood, and Sterne: I welcome criticisms of my selections) and one of them said, in so many words, ‘Perhaps some things are forgotten for a reason.’ Perhaps. But we might also wonder: to what extent do novels instruct their readers in how to think, feel, and act? &lt;/p&gt;
      &lt;p&gt;This has been one of the questions that Dames has posed most insistently across his career, with a special emphasis on the contributions of the Victorian novel to readerly subjectivity. At the end of Amnesiac Selves, he speculates on the way that Victorian fiction inculcates a special kind of nostalgia – its warm selective memory is the flipside of the alienating nausea of the historical difference that makes you want to throw a book out the window (or, in homage to Sterne, down the stairs). Yet, as Dames noted then, the cultural prestige of Victorian fiction is ‘increasingly seen in an elegiac manner, as a strange fact that, as the twenty-first century begins, will not last much longer’. As the nineteenth century disappears further and further from view, ‘the Victorians will eventually, if belatedly, make Victorian fiction stranger and less attractive’. Since the publication of Amnesiac Selves in 2000, the Victorians have only receded further away from us in time.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45077735</guid></item><item><title>Six months into tariffs, businesses have no idea how to price anything</title><link>https://www.wsj.com/business/retail/trump-tariff-business-price-impact-37b630c8</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45077937</guid></item><item><title>My phone is an ereader now</title><link>https://www.davepagurek.com/blog/minimal-phone/</link><description>&lt;doc fingerprint="e73881166b47bbdb"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;My phone is an ereader now&lt;/head&gt;
    &lt;p&gt;I got a Kobo in 2016 after borrowing my mom's old one for a year before that. It probably is responsible for getting me reading again after high school. I used to be an avid reader, the sort of kid who would have to be told to put down the book and go to sleep, and who would then creep slowly to the bookshelf to pick it up again without arousing suspicion after the light had been turned out. I think I slowed my reading for fun as the work load of school increased, and stopped when moving every four months for internships in university. Having something small and portable that I could load books onto changed that and got my momentum going again. I now loosely grade how much I'm thriving by how much I'm reading, as an indirect indicator of how not burnt out I am.&lt;/p&gt;
    &lt;p&gt;It fared me quite well, but I had a few issues with it. Library books would randomly not work on it, even if they would show up on, for example, the Libby app on my phone. It also came with a way to sync articles to it via Pocket, but it always required a little too much forethought for me: I had to remember to find and save articles beforehand in order to then read them later. There were some services to do this automatically via RSS but the syncing process itself was just slow enough that I found myself rarely doing it. Also, Mozilla has now killed Pocket as a service. In the middle of writing this, they announced support for Instapaper instead, but it has the same workflow issues for me. My partner reads on her phone, but something about reading on a screen grates on me after a while, and makes it too easy to jump to something else.&lt;/p&gt;
    &lt;p&gt;So I was intrigued when I heard about the Minimal Phone, an Android phone with an epaper display. It wasn't the first epaper Android device I'd seenâI've seen reviews saying the Boox Palma is actually pretty greatâbut it was the idea of this being an actual phone that can take a sim card that really get me interested. What if I could read the news and blogs on what looks like paper while commuting, without having the forethought of downloading or syncing something? I might otherwise spend that time staring into space or looking at nothing on Bluesky. I'd probably rather be reading a bit of a book, or other longer-form writing. So I ordered one as a gift to myself.&lt;/p&gt;
    &lt;p&gt;I figured I might be a good fit for this device. I don't really watch videos on my phone. I send messages a bit, but not urgently. Most of the time I'm at or near a full keyboard anyway. I take some photos, but not that many any more. I feel like the photo winds changed for me sometime in university and I now feel weird posting Nice Photos to social media. Who are those for, really? I now send quick photos directly to friends mostly, and they don't have to be print quality or anything. They just have to be visible.&lt;/p&gt;
    &lt;p&gt;With that in mind, I went in treating it like an experiment. I still have my Kobo that has its annoyances but works. I still have a fully functional Pixel 8 phone. I don't need this to work. At worst, this could just be an alternate ereader for me. So when it arrived mid-July, I started testing it full-time to see how it'd go, with my normal phone in my bag just in case.&lt;/p&gt;
    &lt;p&gt;Overall, I actually really like it! I absolutely would not recommend this device to everyoneâI'll get into why laterâbut it's been working pretty well for me.&lt;/p&gt;
    &lt;head rend="h2"&gt;How the Minimal Phone works&lt;/head&gt;
    &lt;p&gt;This phone is around the same size of my Pixel 8. It's just a tad shorter and just a tad wider. I don't really feel the shortness, but I do feel the wideness a bit, which makes it more comfortable to read on. The bottom third of the height is taken up by a physical keyboard, and the top two thirds are an epaper display.&lt;/p&gt;
    &lt;p&gt;It's just Android under there, with a black-and-white epaper display. It comes with a few launchers, and I use one that works like a pretty traditional launcher, but comes with some built in icon choices that look sharp on the display.&lt;/p&gt;
    &lt;p&gt;There's a side button between the phone's volume keys that you can tap to flash the display to clear ghosting. I don't find myself doing this oftenâghosting is not that badâbut if you press and hold it, it opens the display settings. This is something I do all the time.&lt;/p&gt;
    &lt;p&gt;From the settings screen, you can turn on and off the light on the display and on the keyboard, and also change the display light's colour temperature. I mostly leave those off; I only need those if I'm outside after dark, and the controls are big enough that I can turn them on easily enough in low light.&lt;/p&gt;
    &lt;p&gt;The most important setting is the refresh rate at the bottom. The slowest setting has the slowest refresh rate, but the highest quality visuals: always showing nice shades of grey, and with less ghosting but more flashing as it updates. The fastest setting (which, to be clear, is still not very fast) has much less flashing, a little more ghosting, and dithers pure black and white rather than showing any shades of grey. The middle setting, "hybrid" mode, is a combination of the two: it uses the faster setting while things are moving onscreen, and then updates to the slower, higher quality render when movement stops. I generally keep the phone in this hybrid mode, except for a few specific cases.&lt;/p&gt;
    &lt;p&gt;The keyboard feels pretty good, and it's a comfortable size to type on with two thumbs. I can't really one-handed type on this phone; it's a tad too wide for that, but the width is worth it for easier reading. I really appreciate them including the keyboard here, as the display looks great but is definitely not all that responsive, so typing would be a lot more frustrating without this.&lt;/p&gt;
    &lt;head rend="h2"&gt;The great parts&lt;/head&gt;
    &lt;p&gt;This thing is so nice to read on.&lt;/p&gt;
    &lt;p&gt;I hate reading on screens. Something about dark mode especially messes with my eyes, but even without that, I've never enjoyed reading articles on my phone. Too easy to get distracted, the minor eye strain... This device though, the epaper display looks great. It's not especially high resolution or anything, but I could spend a long time reading on this without issue. I just spent two flights (Toronto to Vancouver and back again) just reading books on this, and I'd do it again. It's really crisp and visible in the sun too.&lt;/p&gt;
    &lt;p&gt;It's super easy to queue up library book holds and read them all from the phone. I have had zero issues with that. Being able to add new things on-the-go has also made it really easy to grab another book on the spot once I finish one. I definitely have found myself reading more books this past month and a half.&lt;/p&gt;
    &lt;p&gt;I also now am more likely to read people's blogs on an RSS reader than scroll through social media. I wasn't setting out to fully purge social media or anything, but I certainly feel a little more fulfilled after reading something that someone has clearly put time and effort into.&lt;/p&gt;
    &lt;p&gt;Possibly as a consequence of the display technology, I also generally get 2 days of usage out of a charge. Most days I finish with 70% battery remaining, letting me go another day with some buffer room. On some really low usage days, I could maybe even go more, but already this is great. On a high usage day, I'll maybe end with 50%, which is still fine by me.&lt;/p&gt;
    &lt;p&gt;This is secondary, by far, but I also feel now that I can fully turn off autocorrect, as this phone has a physical keyboard. Most of the time (with important caveats), I don't make typos. So I no longer have to suffer through autocorrect changing programming terms (which I still type a lot of), changing my capitalization, or doing its own insane capitalization (why would it format "city Hall" with just one capital? Commit to capitals or no capitals, don't do this awkward mix!)&lt;/p&gt;
    &lt;p&gt;As another minor note, the fingerprint reader is actually quite fast. When it remembers my fingerprints, it's super reliable. ("What do you mean, when it remembers?" I'll get into it later, there's a pretty bad bug here. But in regular usage, it really does work well.)&lt;/p&gt;
    &lt;p&gt;Everything else this phone does, it does a little worse than a normal phone, but not so much worse that it's a problem. I assume it would be a lot worse at watching videos but I never really did that much on my old phone anyway. So on the whole, this phone works really well where I want it to, and generally gets out of my way for the usual stuff. I keep using it without really worrying about it.&lt;/p&gt;
    &lt;p&gt;The camera, once set up properly, is pretty passable. Well, the selfie camera is in a super awkward spot, but I don't really find myself using it anyway. But other photos look decent enough that I'm not embarrassed to send them to people!&lt;/p&gt;
    &lt;head rend="h2"&gt;Growing pains&lt;/head&gt;
    &lt;p&gt;Even though I do really like this thing, and am continuing to use it as my primary device, there are a lot of rough edges. This device is made by, primarily, two people (although they've been adding more developers in the past few weeks), so naturally there will be a lot of rough edges. You have to be willing to accept that if you're going to use this phone. They do make updates, but the pace is slow, and they are definitely bogged down by customer support and shipping/manufacturing logistics, so you need to not bank on fixes happening quickly.&lt;/p&gt;
    &lt;p&gt;There's a double-tap-to-wake feature that you can't turn off, and it takes a sec once locked to stop responding to inputs. Consequently, I now put this in my pocket with the display facing out, which is opposite of what I used to do, in order to prevent accidentally disturbing it in my pocket. Doing that, I haven't had issues, but it's an adjustment you have to make for this phone right now.&lt;/p&gt;
    &lt;p&gt;There are a few things you'll probably need to do to the device to make it work well for you. One of them involves the camera. By default, the camera super aggressively denoises its photos, resulting in images that look like they came off of my flip phone from 2008. However, if you use the Open Camera app, switch it to use the Camera 2 API, it then lets you turn off noise reduction in the settings. The resulting images look much crisper, and do have noise, but a tastefulâdare I say aesthetic?âamount of noise. There is no Pixel-style HDR in these photos, but now that that look is everywhere, the resulting photos are... kind of refreshing.&lt;/p&gt;
    &lt;p&gt;The phone also uses something called Duraspeed to aggressively turn off background apps. This works well in general, but it also can stifle some notifications that you do want, and also can affect background audio. I know some people fully turn Duraspeed off, but I've just turned it off for my messaging apps and my music/podcast apps. I've had no notification or background process related issues since doing so.&lt;/p&gt;
    &lt;p&gt;I also found that the backlight was way too bright, and I didn't really want any lights on most of the time anyway. I found that when opening the display settings, it'd turn all the lights back on. But if I save a preset, then it'd stick. You can do that by changing the settings, and then pressing and holding on the wrench icon to save it to your custom preset.&lt;/p&gt;
    &lt;p&gt;Finally, the hybrid refresh mode needs things to stop moving in order to lock in on a higher quality render. That means animated ads are somehow even more annoying than they normally are. Thankfully, Firefox for Android lets you install addons, such as uBlock Origin, to deal with that.&lt;/p&gt;
    &lt;head rend="h2"&gt;Bugs&lt;/head&gt;
    &lt;p&gt;The most annoying bug is that this phone will occasionally restart and forget your fingerprint, forcing you to enter your PIN. I don't know why this happens. I can go for a few weeks with it working fine, and then it'll just forget. I can still get in with the PIN, so it's not locking me out, but there's really never a good time to re-set up a fingerprint, and typing a PIN on the onscreen display is slow and cumbersome. This is the bug I hope gets fixed the most.&lt;/p&gt;
    &lt;p&gt;Another bug has something to do with the screen refresh rate, and something to do with responding to keyboard input. If you're on a slower refresh rate and are typing quickly, sometimes it misses keypresses, and you have to go back and fix things. This is also quite annoying, but doesn't seem to happen on the highest screen refresh rate. As a workaround, when I'm sending messages, I switch to the fastest refresh setting. This one-or-the-other approach isn't great though (I still want photos sent to me in messaging apps to look nice!), so I'd love to see that improved over time.&lt;/p&gt;
    &lt;p&gt;I also have to use the phone in the lowest refresh rate for Google Maps in order to see the streets on the map. The color scheme is just too low contrast for the high refresh rate's dithering. The hybrid setting doesn't work either: your location on the map is always slightly moving and so it never locks in and renders a higher-quality image. Arguably, this is a problem with Google Maps because they don't have a high contrast mode. Surely that would have accessibility benefits beyond just this weird device!&lt;/p&gt;
    &lt;p&gt;There's a software update that the Minimal team has been working on for almost two months that will apparently address the fingerprint forgetting issue, make double-tap-to-wake optional, significantly increase the refresh rate on the fast refresh mode, and let you save per-app refresh rate settings. That'll address some of my problems for sure! But it also hasn't shipped yet. To use this device is an exercise in patience, and being accepting of imperfections.&lt;/p&gt;
    &lt;head rend="h2"&gt;Feature Requests&lt;/head&gt;
    &lt;p&gt;None of these are dealbreakers for me, but here's what I'm hoping to see in the future:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;I feel like the vibration on the phone is a tad aggressive. Not every vibration is, thoughâFacebook Messenger notifications feel like the right level. I'd love to be able to adjust the cap for vibration intensity!&lt;/item&gt;
      &lt;item&gt;I would love emoji search in the keyboard. But I also don't use that many different emoji or symbols, and by now the ones I do use are in the recents list, so it's fine. But the one time I need to use a weird one, it'd be nice to have!&lt;/item&gt;
      &lt;item&gt;I wish the hybrid refresh mode would work well with camera apps. As it is, I think too much of the screen is updating at once, so it flashes a large part of the display every frame, making it really hard to see. If I put the phone in fast mode, there's no flashing, which is great! But then when I take a photo and tap on the thumbnail to see it, I have to switch back to hybrid or slow mode to see a clearer, non-dithered version. This is a little annoying, and I feel could be improved, but then again I'm not really using this to take a lot of photos anyway.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Concluding the experiment&lt;/head&gt;
    &lt;p&gt;It's been more than a month, and despite not everything being perfect, I'm going to continue using this phone. I do occasionally switch to my Pixel 8 though. I use my Pixel 8 for running for its better waterproofing. When I needed to get actual good, postable photos from SIGGRAPH two weeks ago, I just used my Pixel 8. When seeing LCD Soundsystem last weekend, rather than worry about weirdness with the Ticketmaster app, I just took my Pixel 8. But I've used normal boarding passes for airplanes on my MP01, and I regularly go out without a backup phone. I do mostly rely on my partner to do Google Maps navigation since that's a little bit smoother, although in a pinch I can still use it myself (and the Transit app is a little better in hybrid mode.)&lt;/p&gt;
    &lt;p&gt;Basically, I use the right tool for the job, and this phone doesn't have to be that tool for all jobs. But it turns out I don't need my phone to do all that many jobs, and it's maybe a good thing for it to be doing less of them.&lt;/p&gt;
    &lt;p&gt;There are enough quirks that I wouldn't automatically recommend this experience. But if you know what you're getting into and have the right expectations, this is a really great little device!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45079962</guid></item><item><title>Red: A programming language inspired by REBOL</title><link>https://github.com/red/red</link><description>&lt;doc fingerprint="54eba1b9d3e3f86"&gt;
  &lt;main&gt;
    &lt;p&gt;Red is a programming language strongly inspired by Rebol, but with a broader field of usage thanks to its native-code compiler, from system programming to high-level scripting, while providing modern support for concurrency and multi-core CPUs.&lt;/p&gt;
    &lt;p&gt;Red tackles the software building complexity using a DSL-oriented approach (we call them dialects) . The following dialects are built-in:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Red/System: a C-level system programming language compiled to native code&lt;/item&gt;
      &lt;item&gt;Parse: a powerful PEG parser&lt;/item&gt;
      &lt;item&gt;VID: a simple GUI layout creation dialect&lt;/item&gt;
      &lt;item&gt;Draw: a vector 2D drawing dialect&lt;/item&gt;
      &lt;item&gt;Rich-text: a rich-text description dialect&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Red has its own complete cross-platform toolchain, featuring an encapper, a native compiler, an interpreter, and a linker, not depending on any third-party library, except for a Rebol2 interpreter, required during the alpha stage. Once 1.0 is reached, Red will be self-hosted. Currently, Red is still at alpha stage and 32-bit only.&lt;/p&gt;
    &lt;p&gt;Red's main features are:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Human-friendly syntax&lt;/item&gt;
      &lt;item&gt;Homoiconic (Red is its own meta-language and own data-format)&lt;/item&gt;
      &lt;item&gt;Functional, imperative, reactive and symbolic programming&lt;/item&gt;
      &lt;item&gt;Prototype-based object support&lt;/item&gt;
      &lt;item&gt;Multi-typing&lt;/item&gt;
      &lt;item&gt;Powerful pattern-matching Macros system&lt;/item&gt;
      &lt;item&gt;Rich set of built-in datatypes (50+)&lt;/item&gt;
      &lt;item&gt;Both statically and JIT-compiled(*) to native code&lt;/item&gt;
      &lt;item&gt;Cross-compilation done right&lt;/item&gt;
      &lt;item&gt;Produces executables of less than 1MB, with no dependencies&lt;/item&gt;
      &lt;item&gt;Concurrency and parallelism strong support (actors, parallel collections)(*)&lt;/item&gt;
      &lt;item&gt;Low-level system programming abilities through the built-in Red/System DSL&lt;/item&gt;
      &lt;item&gt;Powerful PEG parser DSL built-in&lt;/item&gt;
      &lt;item&gt;Fast and compacting Garbage Collector&lt;/item&gt;
      &lt;item&gt;Instrumentation built-in for the interpreter, lexer and parser.&lt;/item&gt;
      &lt;item&gt;Cross-platform native GUI system, with a UI layout DSL and a drawing DSL&lt;/item&gt;
      &lt;item&gt;Bridging to the JVM&lt;/item&gt;
      &lt;item&gt;High-level scripting and REPL GUI and CLI consoles included&lt;/item&gt;
      &lt;item&gt;Visual Studio Code plugin, with many helpful features&lt;/item&gt;
      &lt;item&gt;Highly embeddable&lt;/item&gt;
      &lt;item&gt;Low memory footprint&lt;/item&gt;
      &lt;item&gt;Single-file (~1MB) contains whole toolchain, full standard library and REPL (**)&lt;/item&gt;
      &lt;item&gt;No install, no setup&lt;/item&gt;
      &lt;item&gt;Fun guaranteed!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;(*) Not implemented yet. (**) Temporarily split in two binaries&lt;/p&gt;
    &lt;p&gt;More information at red-lang.org.&lt;/p&gt;
    &lt;p&gt;Download a GUI or CLI console binary suitable for your operating system, rename it at your convenience, then run it from shell or by double-clicking on it (Windows). You should see the following output:&lt;/p&gt;
    &lt;code&gt;    ---== Red 0.6.5 ==--
    Type HELP for starting information.

    &amp;gt;&amp;gt;
&lt;/code&gt;
    &lt;p&gt;A simple Hello World would look like:&lt;/p&gt;
    &lt;code&gt;    &amp;gt;&amp;gt; print "Hello World!"
    Hello World!
&lt;/code&gt;
    &lt;p&gt;If you are on the GUI console, a GUI Hello World (prompt omitted):&lt;/p&gt;
    &lt;code&gt;    view [text "Hello World!"]
&lt;/code&gt;
    &lt;p&gt;A more sophisticated example that retrieves the last commits from this repo and displays their log messages in a scrollable list:&lt;/p&gt;
    &lt;code&gt;    view [
        text-list data collect [
            foreach event load https://api.github.com/repos/red/red/commits [
                keep event/commit/message
            ]
        ]
    ]
&lt;/code&gt;
    &lt;p&gt;Note: check also the following improved version allowing you to click on a given commit log and open the commit page on github.&lt;/p&gt;
    &lt;p&gt;You can now head to see and try some showcasing scripts here and there. You can run those examples from the console directly using Github's "raw" link. E.g.:&lt;/p&gt;
    &lt;code&gt;    &amp;gt;&amp;gt; do https://raw.githubusercontent.com/red/code/master/Showcase/calculator.red
&lt;/code&gt;
    &lt;p&gt;Note: If you are using the Wine emulator, it has some issues with the GUI-Console. Install the &lt;code&gt;Consolas&lt;/code&gt; font to fix the problem.&lt;/p&gt;
    &lt;p&gt;The Red toolchain comes as a single executable file that you can download for the big-3 platforms (32-bit only for now). Rename the file to &lt;code&gt;redc&lt;/code&gt; (or &lt;code&gt;redc.exe&lt;/code&gt; under Windows).&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Put the downloaded redc binary in the working folder.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;In a code or text editor, write the following Hello World program:&lt;/p&gt;
        &lt;code&gt;Red [ Title: "Simple hello world script" ] print "Hello World!"&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Save it under the name: hello.red&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Generate a compiled executable from that program: (first run will pre-compile libRedRT library)&lt;/p&gt;
        &lt;code&gt;$ redc -c hello.red $ ./hello&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Want to generate a compiled executable from that program with no dependencies?&lt;/p&gt;
        &lt;code&gt;$ redc -r hello.red $ ./hello&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Want to cross-compile to another supported platform?&lt;/p&gt;
        &lt;code&gt;$ redc -t Windows hello.red $ redc -t Darwin hello.red $ redc -t Linux-ARM hello.red&lt;/code&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The full command-line syntax is:&lt;/p&gt;
    &lt;code&gt;redc [command] [options] [file]
&lt;/code&gt;
    &lt;p&gt;&lt;code&gt;[file]&lt;/code&gt; any Red or Red/System source file.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The -c, -r and -u options are mutually exclusive.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;
      &lt;code&gt;[options]&lt;/code&gt;
    &lt;/p&gt;
    &lt;code&gt;-c, --compile                  : Generate an executable in the working
                                 folder, using libRedRT. (development mode)

-d, --debug, --debug-stabs     : Compile source file in debug mode. STABS
                                 is supported for Linux targets.

-dlib, --dynamic-lib           : Generate a shared library from the source
                                 file.

-e, --encap                    : Compile in encap mode, so code is interpreted
                                 at runtime. Avoids compiler issues. Required
                                 for some dynamic code.

-h, --help                     : Output this help text.

-o &amp;lt;file&amp;gt;, --output &amp;lt;file&amp;gt;     : Specify a non-default [path/][name] for
                                 the generated binary file.

-r, --release                  : Compile in release mode, linking everything
                                 together (default: development mode).

-s, --show-expanded            : Output result of Red source code expansion by
                                 the preprocessor.

-t &amp;lt;ID&amp;gt;, --target &amp;lt;ID&amp;gt;         : Cross-compile to a different platform
                                 target than the current one (see targets
                                 table below).

-u, --update-libRedRT          : Rebuild libRedRT and compile the input script
                                  (only for Red scripts with R/S code).

-v &amp;lt;level&amp;gt;, --verbose &amp;lt;level&amp;gt;  : Set compilation verbosity level, 1-3 for
                                 Red, 4-11 for Red/System.

-V, --version                  : Output Red's executable version in x.y.z
                                 format.

--config [...]                 : Provides compilation settings as a block
                                 of `name: value` pairs.

--no-compress                  : Omit Redbin format compression.

--no-runtime                   : Do not include runtime during Red/System
                                 source compilation.

--no-view                      : Do not include VIEW module in the CLI console
                                 and the libRedRT.

--view &amp;lt;engine&amp;gt;                : Select the VIEW engine (native, terminal, GTK, test)

--red-only                     : Stop just after Red-level compilation.
                                 Use higher verbose level to see compiler
                                 output. (internal debugging purpose)

--show-func-map                : Output an address/name map of Red/System
                                 functions, for debugging purposes.
&lt;/code&gt;
    &lt;p&gt;
      &lt;code&gt;[command]&lt;/code&gt;
    &lt;/p&gt;
    &lt;code&gt;build libRed [stdcall]         : Builds libRed library and unpacks the
                                 libRed/ folder locally.

clear [&amp;lt;path&amp;gt;]                 : Delete all temporary files from current
                                 or target &amp;lt;path&amp;gt; folder.
&lt;/code&gt;
    &lt;p&gt;Cross-compilation targets:&lt;/p&gt;
    &lt;code&gt;MSDOS        : Windows, x86, console (+ GUI) applications
Windows      : Windows, x86, GUI applications
WindowsXP    : Windows, x86, GUI applications, no touch API
Linux        : GNU/Linux, x86, console (+ GUI) applications
Linux-GTK    : GNU/Linux, x86, GUI only applications
Linux-musl   : GNU/Linux, x86, musl libc
Linux-ARM    : GNU/Linux, ARMv5, armel (soft-float)
RPi          : GNU/Linux, ARMv7, armhf (hard-float)
RPi-GTK      : GNU/Linux, ARMv7, armhf (hard-float), GUI only applications
Pico         : GNU/Linux, ARMv7, armhf (hard-float), uClibc
Darwin       : macOS Intel, console-only applications
macOS        : macOS Intel, applications bundles
Syllable     : Syllable OS, x86
FreeBSD      : FreeBSD, x86
NetBSD       : NetBSD, x86
Android      : Android, ARMv5
Android-x86  : Android, x86
&lt;/code&gt;
    &lt;p&gt;Note: The toolchain executable (&lt;code&gt;redc.exe&lt;/code&gt;) relies on Rebol encapper which does not support being run from a location specified in &lt;code&gt;PATH&lt;/code&gt; environment variable and you get &lt;code&gt;PROGRAM ERROR: Invalid encapsulated data&lt;/code&gt; error. If you are on Windows try using PowerShell instead of CMD. You can also provide the full path to the executable, put a copy of it in your working folder or wrap a shell script (see relevant tickets: #543 and #1547).&lt;/p&gt;
    &lt;p&gt;The compiler and linker are currently written in Rebol. Please follow the instructions for installing the compiler toolchain in order to run it from sources:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;p&gt;Clone this git repository or download an archive (&lt;/p&gt;&lt;code&gt;ZIP&lt;/code&gt;button above or from tagged packages).&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Download a Rebol interpreter suitable for your OS: Windows, Linux (or Linux), Mac OS X, FreeBSD, OpenBSD, Solaris.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Extract the&lt;/p&gt;&lt;code&gt;rebol&lt;/code&gt;binary, put it in the root folder, that's all!&lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Let's test it: run&lt;/p&gt;&lt;code&gt;./rebol&lt;/code&gt;, you'll see a&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;prompt appear. Windows users need to double-click on the&lt;code&gt;rebol.exe&lt;/code&gt;file to run it.&lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;From the REBOL console type:&lt;/p&gt;
        &lt;code&gt;&amp;gt;&amp;gt; do/args %red.r "%tests/hello.red"&lt;/code&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The compilation process should finish with a &lt;code&gt;...output file size&lt;/code&gt; message. The resulting binary is in the working folder. Windows users need to open a DOS console and run &lt;code&gt;hello.exe&lt;/code&gt; from there.&lt;/p&gt;
    &lt;p&gt;You can compile the Red console from source:&lt;/p&gt;
    &lt;code&gt;    &amp;gt;&amp;gt; do/args %red.r "-r %environment/console/CLI/console.red"
&lt;/code&gt;
    &lt;p&gt;To compile the Windows GUI console from source:&lt;/p&gt;
    &lt;code&gt;    &amp;gt;&amp;gt; do/args %red.r "-r -t Windows %environment/console/GUI/gui-console.red"
&lt;/code&gt;
    &lt;p&gt;Note: the &lt;code&gt;-c&lt;/code&gt; argument is not necessary when launching the Red toolchain from sources, as the default action is to compile the input script (the toolchain in binary form default action is to run the input script through the interpreter).
The &lt;code&gt;-r&lt;/code&gt; argument is needed when compiling the Red console to make additional runtime functions available.&lt;/p&gt;
    &lt;p&gt;Note: The red git repository does not include a &lt;code&gt;.gitignore&lt;/code&gt; file. If you run the automated tests, several files will be created that are not stored in the repository. Installing and renaming a copy of &lt;code&gt;.git/.gitignore-sample&lt;/code&gt; file will ignore these generated files.&lt;/p&gt;
    &lt;p&gt;If you want to contribute code to the Red project be sure to read the guidelines first.&lt;/p&gt;
    &lt;p&gt;It is usually a good idea to inform the Red team about what changes you are going to make in order to ensure that someone is not already working on the same thing. You can reach us through our chat room.&lt;/p&gt;
    &lt;p&gt;Satisfied with the results of your change and want to issue a pull request on Github?&lt;/p&gt;
    &lt;p&gt;Make sure the changes pass all the existing tests, add relevant tests to the test-suite, and please test on as many platforms as you can. You can run all the tests using (from Rebol console, at repository root):&lt;/p&gt;
    &lt;code&gt;    &amp;gt;&amp;gt; do %run-all-tests.r
&lt;/code&gt;
    &lt;p&gt;If you want git version included in your Red console built from sources, use this command:&lt;/p&gt;
    &lt;code&gt;call/show ""                                              ;-- patch call bug on Windows
save %build/git.r do %build/git-version.r                 ;-- lookup git version if available
do/args %red.r "-r %environment/console/CLI/console.red"  ;-- build Console
write %build/git.r "none^/"                               ;-- restore git repo status&lt;/code&gt;
    &lt;p&gt;Some anti-virus programs are a bit too sensitive and can wrongly report an alert on some binaries generated by Red (see here for the details). If that happens to you, please report it to your anti-virus vendor as a false positive.&lt;/p&gt;
    &lt;p&gt;Both Red and Red/System are published under BSD license, runtime is under BSL license. BSL is a bit more permissive license than BSD, more suitable for the runtime parts.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45080051</guid></item><item><title>Sheafification – The optimal path to mathematical mastery</title><link>https://sheafification.com/the-fast-track/</link><description></description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45080388</guid></item><item><title>Git Diagramming "The Weave"</title><link>https://daverupert.com/2025/08/git-diagramming-the-weave/</link><description>&lt;doc fingerprint="763811cbeef8591f"&gt;
  &lt;main&gt;
    &lt;p&gt;We all know the current US President is one hell of an orator and often assures us that he has “the best words”:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;I went to an Ivy League school. I’m very highly educated. I know words. I have the best words.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The man knows words. Says so right there. While some might view his non-sequitur ramblings as the nascent stages of dementia or an unfiltered ADHD brain launching into successive short (at times racist) bullet-point diatribes based on the last word or phrase he said like a cursed game of word association, the President asserts this is not the case:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;You know, I do the weave. You know what the weave is? I’ll talk about, like, nine different things, and they all come back brilliantly together. And it’s like - and friends of mine that are, like, English professors - they say, it’s the most brilliant thing I’ve ever seen.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;“The Weave” re-entered my consciousness this week after I watched a quick snippet of an Oval Office event where Trump says the (“radical left-wing”) CBO projects tariffs will reduce the deficit by $4 trillion USD. I was skeptical –and for good reason– but I tuned in. What shocked me was not the complete lack of specifics about the CBO projection, but rather the actual reason for the Oval Office meeting: a FIFA event? Wow.&lt;/p&gt;
    &lt;p&gt;For awhile now, I’ve clued into the cyclical pattern of his speeches, little snippets of “the best words” and talking points assembled like a ransom note cut from a magazine. I often wondered if it’s possible to diagram “the weave”. The “branching” narratives Trump uses made me think a git-graph-style visualization was apropos. So I grabbed a transcript and got to work.&lt;/p&gt;
    &lt;p&gt;For my first attempt, I used Mermaid.js’ GitGraph Diagram which worked well but only supports horizontal charts. As I sat with it I realized I wanted a chronological list of statements that read like a transcript. I repurposed the Mermaid’s GitGraph DSL and made a web component called &lt;code&gt;&amp;lt;git-graph&amp;gt;&lt;/code&gt; to help me visualize and document Trump’s derailing trains of thought from the above event.&lt;/p&gt;
    &lt;code&gt;
branch tarrifs
checkout tarrifs
commit id: "I was very happy that today, as you saw, the uh group that does this [the CBO], a government group,"
branch radical-left
checkout radical-left
commit id: "a radical left group, announced that Trump was right"
checkout tarrifs
merge radical-left
commit id: "took in $4 trillion worth of tariffs"
commit id: "The $4 trillion they're going to reduce the deficit by numbers far greater than they ever expected or heard of."
branch stock-market
checkout stock-market
commit id: "And by the way, the stock market went up a thousand points. That was as of 10 minutes ago."
commit id: "I can't tell you what happened. A lot of things happened, but the stock market's up almost a thousand points."
cherry-pick id: "I was very happy that today, as you saw, the uh group that does this [the CBO], a government group,"
commit id: "It's basically on the news that uh the release that just came out from government that uh the tariffs that everybody was talking about that"
branch world-respect
checkout world-respect
commit id: "the whole world respects us for because of what we did"
cherry-pick id: "took in $4 trillion worth of tariffs"
commit id: "The tariffs are going to be at $4 trillion." 
cherry-pick id: "The $4 trillion they're going to reduce the deficit by numbers far greater than they ever expected or heard of."
commit id: "They're going to reduce the deficit by $4 trillion."
branch ask-jd
checkout ask-jd
commit id: "[Seeks validation from JD Vance]"
checkout stock-market
merge ask-jd
cherry-pick id: "And by the way, the stock market went up a thousand points. That was as of 10 minutes ago."
commit id: "It's had a huge impact and the stock market is way up."
commit id: "But this will drive more than $30 billion in US economy"
commit id: "and create 185,000 American jobs."
branch fifa-event
checkout fifa-event
commit id: "No sporting event attracts more attention or more fans or anything else"
commmit id: "And I just look forward to the draw."
commit id: "So we're going to have the draw essentially, Gianni, at the Kennedy Center"
branch kennedy-center-remodel
checkout kennedy-center-remodel
commit id: "and by that time it'll be in even better shape. We're working on it."
commit id: "It's about a year project to make it."
commit id: "It'll be great. It'll be fantastic."
branch oval-office-remodel
checkout oval-office-remodel
commit id: "You see the way [the oval office] is looking?"
commit id: "Looks nice."
commit id: "I can't tell you how much that gold costs, a lot of money."
commit id: "There's nothing like gold and there's nothing like solid gold."
commit id: "But this beautiful office needed it."
commit id: "It had to be representative when we took it over."
commit id: "It was dirty, not clean."
commit id: "I immediately changed the chair and had the this beautiful desk renovated, brought out by the White House."
commit id: "People that do this, they did a great job."
commit id: "They sent it out. We have a craftsman who's great."
commit id: "But this was not appropriate for the Oval Office when I took over."
commit id: "And now you look at all those paintings [instructs to look at paintings]"
branch painting-vault
checkout painting-vault
commit id: "All of these are great presidents and they were all in the vaults."
commit id: "They were in vaults for in some cases much more than a hundred years."
commit id: "And now they're proudly hanging on the oval office walls and I can't imagine anybody changing it."
commit id: "But they were they were buried in vaults for over a hundred years, many of them."
checkout oval-office-remodel
merge painting-vault
commit id: "So it's very exciting. People come in, they really love it."
branch self-congratulations
checkout self-congratulations
commit id: "They love what we're doing here."
commit id: "They love what we're doing in DC [deploying the national guard against American citizens]"
commit id: "and they love what we're doing most importantly in the country in the world. [citation needed]"
checkout fifa-event
merge self-congratulations
commit id: "I'd like to ask Gianni to say a few words ... [flattery] ... he's got the biggest event in the world coming right here to the United States."
commit id: "We did a little for Canada,"
commit id: "we did a little for Mexico."
checkout self-congratulations
merge fifa-event
commit id: "We thought, see, I'm a good citizen. I said, let them have a little piece."
cherry-pick id: "We did a little for Canada,"
commit id: "So, we gave a little to Canada."
commit id: "See how nice I am."
cherry-pick id: "we did a little for Mexico."
commit id: "And we gave a little bit to Mexico."
checkout fifa-event
merge self-congratulations
commit id: "Gianni, please say a few words."
&lt;/code&gt;
    &lt;p&gt;By my count in that four-minute address there were ten distinct themes or “branches”, most of which are common grievances or rhetorical themes found in nearly all Trump speeches. I used “cherry-picking” to model callbacks to a previous statement (e.g. “the stock market is up”) that seem to reverberate into later trains of thought, a quintessential feature of the weave.&lt;/p&gt;
    &lt;p&gt;Four minutes of the weave was about all I could handle but I think this visualization models what I experience when trying to follow along to the President’s speeches. One or two phrases on a topic, then jumping to a new topic, weaving in a (sometimes unrelated) point from a previous topic to make the thought appear more cohesive and linear, then driving deep down an inconsequential topic. When he talks so long about ten different topics at a time, I’d forgive you for thinking he said something salient. But when you break it down you see it for what it is: a mishmash of talking points.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45080720</guid></item><item><title>My Foray into Vlang</title><link>https://kristun.dev/posts/my-foray-into-vlang/</link><description>&lt;doc fingerprint="3e081710cb80169b"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Table of contents&lt;/head&gt;
    &lt;head&gt;Open Table of contents&lt;/head&gt;
    &lt;head rend="h1"&gt;A little bit about Go&lt;/head&gt;
    &lt;p&gt;I like Go. I actually donât mind writing &lt;code&gt;err != nil&lt;/code&gt; that much. Just set up a snippet and youâre good to Go. Although, I never really felt like I had a honeymoon period with Go. I learned the language, learned about channels, wrote a bunch of CRUDs and parsers and CLIs. It always felt strictly business. I thought it was because of where I am in my career. But I was wrong.&lt;/p&gt;
    &lt;p&gt;Go is vanilla. It just werks. You build it, you ship it. The language is simple and you donât need to try hard to make it performant.&lt;/p&gt;
    &lt;p&gt;But sometimes you just want a little spiceð¶ï¸ð¥µ&lt;/p&gt;
    &lt;p&gt;Do you ever wonder what else is out there? Hobby programming is a great meme. But I feel like weâre under too much pressure to produce the new unicorn SaaS with 10 million monthly active users.&lt;/p&gt;
    &lt;p&gt;You donât have to pick a tool then find the right job for it. You can just grab a hammer and start smashing stuff. The same nails youâve smashed before might feel different if you smash it with another hammer. Pick a Rusty hammer and you might end up obsessed with how important health and safety is.&lt;/p&gt;
    &lt;head rend="h1"&gt;So, wtf is Vlang?&lt;/head&gt;
    &lt;p&gt;I might have shot myself in the foot with the hammer analogy there, so letâs talk about ice cream. Ok so hereâs the gist: vanilla, drizzle some chocolate on top, peanuts? sure why not. You know this taste, you like it, it comes with more stuff on top. If you like vanilla then you might like vanilla++.&lt;/p&gt;
    &lt;p&gt;That how I see the current state of V. The syntax is similar to Go. It has extra features. The core of it is similar, you can cross compile, you have concurrency (which is also parallelism). Channels and message passing. Oh and &lt;code&gt;defer&lt;/code&gt; as well. All my bros love using &lt;code&gt;defer&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Anyway, letâs see some cool stuff.&lt;/p&gt;
    &lt;head rend="h2"&gt;Maps&lt;/head&gt;
    &lt;code&gt;// So simple!
simple_languages := {"elixir": {"score": 100, "width": 30}}

// Alternatively
mut languages := map[string]map[string]int{"elixir": {"score": 100, "width": 30}}
languages["elixir"] = {"score": 100}
languages["elixir"]["width"] = 30&lt;/code&gt;
    &lt;p&gt;Pretty cool! Much like Go, the maps require a fixed type, dynamic objects like JSON or JavaScript requires either a DTO or a type switch.&lt;/p&gt;
    &lt;p&gt;Ok, but what about the error handling?&lt;/p&gt;
    &lt;code&gt;elixir_score := languages["elixir"]["score"] or { -1 }

if racket := languages['racket'] {
  println('racket score ${racket['score']}')
  racket_width := racket['width'] or { 0 }
  println('racket width ${racket_width}')
}

// Another way to skin the cat
if 'haskell' in languages {
  if 'score' !in languages['haskell'] {
    println('where is my haskell score??')
  }
}

// Zeroth value
languages['this_dont_exist'] // {}
languages['this_dont_exist']['score'] // 0&lt;/code&gt;
    &lt;p&gt;Donât you miss destructuring?&lt;/p&gt;
    &lt;code&gt;languages_with_racket_ocaml := {
  ...languages
  'racket': {'score': 99}
  'ocaml': {'score': 98}
}&lt;/code&gt;
    &lt;head rend="h2"&gt;Struct-licious&lt;/head&gt;
    &lt;code&gt;module main

struct Language {
pub mut:
	score int = -1
	name  string @[required]
}

fn (lr []Language) total() int {
	mut total := 0
	for l in lr {
      if l.score &amp;gt; 0 {
        total += l.score
      }
	}

	return total
}

fn (lr []Language) average() int {
	return lr.total() / lr.len
}

fn main() {
	racket := Language{98, 'racket'}
    // Simple arrays too!
	langs_arr := [racket, Language{102, 'ocaml'}]
	println(langs_arr)
	println(langs_arr.total())
	println(langs_arr.average())
}&lt;/code&gt;
    &lt;p&gt;Isnât that cool? We can have receiver methods on array types. Wait - did you see that? We had a required tag on the struct, that means the program wonât compile if you donât initialise it. Thatâs another cool thing I wish Go has. Not to mention, the initialiser value, Goâs struct is quite predictable in how the value turns out. However, Vâs struct allows you to be explicit. This came in very handy for my case!&lt;/p&gt;
    &lt;code&gt;@[xdoc: 'Server for GitHub language statistics']
@[name: 'v-gh-stats']
struct Config {
mut:
	show_help bool   @[long: help; short: h; xdoc: 'Show this help message']
	user      string = os.getenv('GH_USER')           @[long: user; short: u; xdoc: 'GitHub username env \$GH_USER']
	token     string = os.getenv('GH_TOKEN')          @[long: token; short: t; xdoc: 'GitHub personal access token env \$GH_TOKEN']
	debug     bool   = os.getenv('DEBUG') == 'true'   @[long: debug; short: d; xdoc: 'Enable debug mode env \$DEBUG']
	cache     bool   = os.getenv('CACHE') == 'true'   @[long: cache; short: c; xdoc: 'Enable caching env \$CACHE']
}&lt;/code&gt;
    &lt;p&gt;This example contains flags for running my SVG generation server, it allows you to define the flags yourself but if not, use the environmental value. Neato!&lt;/p&gt;
    &lt;head rend="h2"&gt;WithOption pattern&lt;/head&gt;
    &lt;p&gt;Ahh yes, another thing I had to put up with. TBH, I did end up liking the pattern quite a bit. In Go, no default variables are allowed, you have to use variadics. You end up with an Option struct with zeroth value passing around a few functions to finally one last giant private receiver function that creates the struct, fills the value then finally build and check. Imagine a SQL repository pattern where you want to perform a List operation but optionally join or ensure some field is present in a query. Letâs see how we can cook this.&lt;/p&gt;
    &lt;code&gt;module main

import time

@[params]
struct ListOption {
pub mut:
	created_since time.Time
}

@[params]
struct HeroListOption {
	ListOption
pub mut:
	universe string
	name     ?string
}

struct Hero {}

struct Repo[T] {}

struct Villain {}

fn (r Repo[T]) list(o ListOption) ![]T {
	$if T is Villain {
		return error('whoops you found Villain some how but its not implemented yet')
	}

	return error('whoops not implemented for ${T.name} use one of (Hero, ...)')
}

fn (r Repo[Hero]) list(o HeroListOption) ![]Hero {
	mut query := orm.build_query()

	if o.universe != '' {
		query.eq('universe', o.universe)
	}

	if o.created_since.unix() &amp;gt; 0 {
		query.gt('created_since', o.created_since)
	}

	if name := o.name {
		query.eq('name', name)
	}

	return r.psql(query.do()!)!
}

fn main() {
	r := Repo[Villain]{}
	r.list() or { println(err) }

	hero_repo := Repo[Hero]{}
	hero_repo.list()!
	hero_repo.list(name: 'bruce')!
	hero_repo.list(name: 'bruce', universe: 'dc')!
	hero_repo.list(name: 'bruce', universe: 'marvel')!
	hero_repo.list(created_since: time.Time{year: 1996})!
}&lt;/code&gt;
    &lt;p&gt;Thereâs a lot to unpack here. Letâs start with &lt;code&gt;@[params]&lt;/code&gt; which tells the V compiler that the struct as a whole can be omitted entirely so you can write the empty function and it will still works. Secondly, since generics are a compile time thing we can use reflection to check for the name of the type itself. See link below to see what is possible. You can reflect and check for field existence and field types as well as attributes (remember &lt;code&gt;@[required]&lt;/code&gt;?).&lt;/p&gt;
    &lt;p&gt;Alright, we keep seeing this bang (&lt;code&gt;!&lt;/code&gt;) everywhere. So what is it? Short answer: Result type. Medium answer: &lt;code&gt;(int, err) -&amp;gt; !int&lt;/code&gt;. You donât need the long answer. The bang can propagate although you must remember to handle this somewhere or it will cause a panic eventually. Finally, the optional type. I purposedly only use it for one of the field to show that it can be done, you can decide how you want to write your optionals. But damn! It feels great!&lt;/p&gt;
    &lt;p&gt;go-uber/functional-options vlang/trailing-struct-args vlang/compile-time-reflection vlang/optional-and-result-type&lt;/p&gt;
    &lt;head rend="h2"&gt;Enums??? In this economy?&lt;/head&gt;
    &lt;p&gt;Enums are so back baby. We can totally replace the previous sectionâs &lt;code&gt;universe&lt;/code&gt; field as such.&lt;/p&gt;
    &lt;code&gt;enum Universe {
  dc
  marvel
  nil
}

fn (u Universe) str() ?string {
	return match u {
      // V knows the enum there's no need to type Universe.dc
      .dc { 'dc' }
      .marvel { 'marvel' }
      else {''}
	}
}

@[params]
struct HeroListOption {
	ListOption
pub mut:
	universe Universe = .nil
	name     ?string
}

fn (r Repo[Hero]) list(o HeroListOption) ![]Hero {
	...

	if o.universe != .nil {
		query.eq('universe', o.universe.str())
	}

	...
}

fn main() {
	hero_repo := Repo[Hero]{}
	hero_repo.list(name: 'bruce', universe: .dc)!

	// functions not expecting enum requires the full path
	// auto str() conversion here - see Go fmt.Stringer() or your __str__, __toString()
	println('${Universe.dc}')
}&lt;/code&gt;
    &lt;p&gt;Optional type might be better here. Iâm okay with this though. There is backed enum as well but you can only have integer backed enums. Did you also notice? Receiver method on the backed enum baby.&lt;/p&gt;
    &lt;head rend="h2"&gt;Lambda; the best kind of lamb&lt;/head&gt;
    &lt;p&gt;The array stucts have a set of methods you can use like the basic &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; - there is a stdlib module called &lt;code&gt;arrays&lt;/code&gt; as well that you need to import. It provides more complex methods like &lt;code&gt;fold&lt;/code&gt; and the likes. I donât know about you but I am chuffed this exists.&lt;/p&gt;
    &lt;code&gt;import math

fn example() {
	// type hinting here to skip typing Universe.*
	mut universes := []Universe{}
	universes = [.dc, .marvel, .nil, .dc]
	dcs_or_marvel := universes.filter(it != .nil)
	nils := universes.filter(|u| u == .nil)

	// sorting in place
	[5, 2, 1, 3, 4].sort(a &amp;lt; b)
	sorted := [5, 2, 1, 3, 4].sorted(a &amp;lt; b)
}

struct XY {
	x int
	y int
}

fn (xy XY) dist_from_origin() f64 {
	return math.sqrt((xy.x * xy.x) + (xy.y * xy.y))
}

fn example2() {
	xys := [XY{1, 2}, XY{10, 20}, XY{-1, -69}]
	xys.sort(a.dist_from_origin() &amp;lt; b.dist_from_origin())
	y_asc := xys.sorted(a.y &amp;lt; b.y)
}&lt;/code&gt;
    &lt;p&gt;Thereâs a few caveats here. You gotta make sure the function youâre using actually allow for &lt;code&gt;it&lt;/code&gt; or &lt;code&gt;a &amp;lt; b&lt;/code&gt; expression, but lambda expression will work anywhere a function is accepted as an argument. However, you canât use lambda as a variable like &lt;code&gt;x_asc := |a, b| a.x &amp;lt; b.x&lt;/code&gt;. Still, neat. Use the LSP to check what is accepted.&lt;/p&gt;
    &lt;p&gt;vlang/lambdas vlang/array vlang/arrays&lt;/p&gt;
    &lt;head rend="h1"&gt;Some issues Iâve encountered&lt;/head&gt;
    &lt;p&gt;As fun as it has been learning the language and building an svg service - it is not without problems. The language is on the immature side of things. It has had some time to cook since I last tried it in 2023 and I like it even more. Letâs discuss some of the problems Iâve personally encountered.&lt;/p&gt;
    &lt;head rend="h2"&gt;
      &lt;code&gt;net.http&lt;/code&gt;
    &lt;/head&gt;
    &lt;p&gt;When I was trying to call the GraphQL endpoint using the &lt;code&gt;net.http&lt;/code&gt; module, I ran into issue where it would instantly timeout. This network issue described what is happening in my case precisely, adding the flag &lt;code&gt;-d use_openssl&lt;/code&gt; completely fixed my problem. This seems to be the case when building for Ubuntu 22.4 - when building the exe for my Windows 11 I did not need this flag.&lt;/p&gt;
    &lt;p&gt;If you are wondering what the &lt;code&gt;-d&lt;/code&gt; flag is about, it is a flag for compile-time code branching. See vlang/compiletime-code for more.&lt;/p&gt;
    &lt;head rend="h2"&gt;
      &lt;code&gt;veb&lt;/code&gt;
    &lt;/head&gt;
    &lt;p&gt;Another weird quirk Iâve had when working with the &lt;code&gt;veb&lt;/code&gt; HTTP server is refusing to build when trying to use gzip. Take a look at this build error message.&lt;/p&gt;
    &lt;code&gt;/root/.local/v/vlib/veb/middleware.v:129:11: error: field `Ctx.return_type` is not public
127 |         handler: fn [T](mut ctx T) bool {
128 |             // TODO: compress file in streaming manner, or precompress them?
129 |             if ctx.return_type == .file {
    |                    ~~~~~~~~~~~
130 |                 return true
131 |             }&lt;/code&gt;
    &lt;p&gt;What do you think the issue could be? Maybe my version of the language is incorrect or my build was faulty? I purged the local V install and got a fresh version straight from master branch. Yet the issue still persists. Another &lt;code&gt;-d&lt;/code&gt; flag perhaps?&lt;/p&gt;
    &lt;p&gt;Luckily for me somebody already posted about this issue in GitHub, unluckily for me, I didnât search the error message first (whoops). Well, I canât really tell you what the issue is since I havenât delved into Vâs codebase itself. But I can tell you the resolution.&lt;/p&gt;
    &lt;p&gt;In my &lt;code&gt;main.v&lt;/code&gt;, since I was messing around with servers and running main with arguments I needed to import both modules. This was the &lt;code&gt;head -n5&lt;/code&gt; of my errorneous file.&lt;/p&gt;
    &lt;code&gt;module main

import os
import veb&lt;/code&gt;
    &lt;p&gt;The suggested fix?&lt;/p&gt;
    &lt;code&gt;module main

import veb
import os&lt;/code&gt;
    &lt;p&gt;Wow! The code now compiles! From a fresherâs perspective I have no clue why the order of import would affect code in different modules. Namespace should be sacred and completely independent of each other. The order of import should not matter at all. Both packages seems to be unrelated so wtf happened?&lt;/p&gt;
    &lt;head rend="h2"&gt;More complex build system&lt;/head&gt;
    &lt;p&gt;I had alluded to this earlier, there is a cost to using V over Go. Vâs main backend compiles to C and this comes with complexity. There are a bunch of performance optimisations you can do when building the binary itself. You can even build non-static binaries if you wish (in fact this is the default). This is a double-edged sword, with Go, you get what you got. With V, I got what I got but I wonder if what I got can be gotten differently.&lt;/p&gt;
    &lt;p&gt;This might also complicate cross-compilation, the Go team has done a lot of work to ensure things werk across different architectures and OSes. Iâve only tried compiling to Windows and Linux using the static flag. Hereâs my build command:&lt;/p&gt;
    &lt;code&gt;v -prod -compress -d use_openssl -cflags '-static -Os -flto' -o main .&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;-d&lt;/code&gt; flag would have to be optional here depending on where I am trying to target as well, Iâd probably have to spend time learning whatâs possible for Macs as well. I know those platforms are definitely supported since their GitHub actions page contains the CI pipelines for these, but I would personally need to check if my specific implemntation, order of imports as well as &lt;code&gt;-d&lt;/code&gt; flags need to be there for those systems or not.&lt;/p&gt;
    &lt;p&gt;This is the one big point I have to give to Go. They really have the just werks philosophy down.&lt;/p&gt;
    &lt;p&gt;vlang/ci vlang/performance-optimisation&lt;/p&gt;
    &lt;head rend="h2"&gt;Concurrency&lt;/head&gt;
    &lt;p&gt;I wondered how the performance of the concurrency is compared to Go. The model is almost identical (which is good) but surely the implementation details are different. Luckily, there is a programming benchmark that exists already that answers my questions.&lt;/p&gt;
    &lt;p&gt;Since I brought up concurrency letâs take a look at the code to see the implementation.&lt;/p&gt;
    &lt;code&gt;module main

import os
import strconv

fn main() {
	mut n := 100
	if os.args.len &amp;gt; 1 {
		n = strconv.atoi(os.args[1]) or { n }
	}

	mut ch := chan int{cap: 1}
	spawn generate(ch)
	for _ in 0 .. n {
		prime := &amp;lt;-ch
		println(prime)
		ch_next := chan int{cap: 1}
		spawn filter(ch, ch_next, prime)
		ch = ch_next
	}
}

fn generate(ch chan int) {
	mut i := 2
	for {
		ch &amp;lt;- i++
	}
}

fn filter(chin chan int, chout chan int, prime int) {
	for {
		i := &amp;lt;-chin
		if i % prime != 0 {
			chout &amp;lt;- i
		}
	}
}&lt;/code&gt;
    &lt;p&gt;benchmark/sieve.go benchmark/sieve.v&lt;/p&gt;
    &lt;p&gt;tldr; itâs finding prime numbers by computing a running channel of previous prime numbers to feed into &lt;code&gt;n&lt;/code&gt; to check if &lt;code&gt;n&lt;/code&gt; is divisible by any previous primes.&lt;/p&gt;
    &lt;p&gt;It seems weird to me that Vâs version is timing out even though both implementation looks almost identical. So I ran the benchmark on my local machine. Hereâs my &lt;code&gt;justfile&lt;/code&gt; to run the benchmark using all I know so far about optimising V.&lt;/p&gt;
    &lt;code&gt;default:
    v -prod -gc boehm_full_opt -cc clang -cflags "-march=broadwell" -stats -showcc -no-rsp -o main_v 1.v
    go build -o main_go ./main.go
    hyperfine './main_v 100' './main_go 100' -N&lt;/code&gt;
    &lt;p&gt;And the result:&lt;/p&gt;
    &lt;code&gt;Benchmark 1: ./main_v 100
  Time (mean Â± Ï):      32.1 ms Â±   2.9 ms    [User: 42.6 ms, System: 166.4 ms]
  Range (min â¦ max):    22.1 ms â¦  40.7 ms    99 runs

Benchmark 2: ./main_go 100
  Time (mean Â± Ï):       1.8 ms Â±   0.2 ms    [User: 2.3 ms, System: 0.3 ms]
  Range (min â¦ max):     1.2 ms â¦   3.1 ms    1471 runs

Summary
  './main_go 100' ran
   18.18 Â± 2.81 times faster than './main_v 100'&lt;/code&gt;
    &lt;p&gt;This is exacerbated further when we run N=1000&lt;/p&gt;
    &lt;code&gt;Benchmark 1: ./main_v 1000
  Time (mean Â± Ï):      1.189 s Â±  0.340 s    [User: 4.410 s, System: 8.144 s]
  Range (min â¦ max):    0.806 s â¦  1.830 s    10 runs

Benchmark 2: ./main_go 1000
  Time (mean Â± Ï):      13.4 ms Â±   2.4 ms    [User: 132.5 ms, System: 12.3 ms]
  Range (min â¦ max):     8.6 ms â¦  21.2 ms    182 runs

Summary
  './main_go 1000' ran
   88.54 Â± 29.90 times faster than './main_v 1000'&lt;/code&gt;
    &lt;p&gt;Taking a look at the N=100 profiling we can see what happened exactly&lt;/p&gt;
    &lt;code&gt;â cat prof.txt | sort --key 2n -n | tail -n 10
           202          0.256ms         -1.819ms           1267ns sync__new_spin_lock
           404          0.064ms         -2.664ms            158ns sync__Semaphore_init
          4387      10644.653ms        540.655ms        2426408ns sync__Semaphore_wait
          8128       5572.567ms        739.231ms         685601ns sync__Channel_try_push_priv
          8172       9062.871ms        941.089ms        1109015ns sync__Channel_try_pop_priv
         15959        406.167ms         87.435ms          25451ns sync__Semaphore_post
         16160          6.993ms        -38.159ms            433ns sync__SpinLock_lock
         16174          3.412ms          0.754ms            211ns sync__SpinLock_unlock
       1766049        380.257ms       -434.470ms            215ns sync__Semaphore_try_wait&lt;/code&gt;
    &lt;p&gt;There is a ton of calls going to &lt;code&gt;Semaphore_try_wait&lt;/code&gt; with the actual &lt;code&gt;Sempahore_wait&lt;/code&gt; execution itself taking over &lt;code&gt;10_000 ms&lt;/code&gt; in total.&lt;/p&gt;
    &lt;p&gt;This suggests to me that while the concurrency is there, it exists and work similarly to the end user. Though in the current state, itâs no where near Goâs maturity and optimisation.&lt;/p&gt;
    &lt;head rend="h1"&gt;&amp;lt;/Thoughts&amp;gt;&lt;/head&gt;
    &lt;p&gt;I like V a lot. The abstraction over the syntax is so nice that made me enjoy writing the syntax as a whole. It makes me wish that Go could do more with what they have, but you and I know that Go would never. V isnât without itâs problems though, the ecosystem is still quite immature, compiler flags need grokking over even if youâre not a performance maximalist. IMO, the issue comes down to maturity, given enough time and contributor I believe the language will bloom beautifully. The syntax conveniences already had me sold. I know AI can write boilerplate but it feels good to not need it at all and write everything myself.&lt;/p&gt;
    &lt;p&gt;V has come a lot further than when I tried it in 2023. Iâll be actively using it from now on since my main job in Go leaves me wishing for more from time to time. If you enjoy Go anyway itâs worth checking out. Life it too short to mainline one language. Oh and check out my SVG service ktunprasert/v-github-stats&lt;/p&gt;
    &lt;head rend="h1"&gt;Links&lt;/head&gt;
    &lt;p&gt;vlang - https://vlang.io&lt;lb/&gt; vlang/maps - https://docs.vlang.io/v-types.html#maps&lt;lb/&gt; vlang/structs - https://docs.vlang.io/structs.html&lt;lb/&gt; go-uber/functional-options - https://github.com/uber-go/guide/blob/master/style.md#functional-options&lt;lb/&gt; vlang/trailing-struct-args - https://docs.vlang.io/structs.html#trailing-struct-literal-arguments&lt;lb/&gt; vlang/compile-time-reflection - https://docs.vlang.io/conditional-compilation.html#compile-time-reflection&lt;lb/&gt; vlang/optional-and-result-type - https://docs.vlang.io/type-declarations.html#optionresult-types-and-error-handling&lt;lb/&gt; vlang/enums - https://docs.vlang.io/type-declarations.html#enums&lt;lb/&gt; vlang/lambdas - https://docs.vlang.io/functions-2.html#lambda-expressions&lt;lb/&gt; vlang/array - https://modules.vlang.io/builtin.html#array&lt;lb/&gt; vlang/arrays - https://modules.vlang.io/arrays.html&lt;lb/&gt; svg service - https://github.com/ktunprasert/v-github-stats&lt;lb/&gt; network issue - https://github.com/vlang/v/issues/23717&lt;lb/&gt; vlang/compiletime-code - https://docs.vlang.io/conditional-compilation.html#compile-time-code&lt;lb/&gt; vlang/net.http - https://modules.vlang.io/net.http.html&lt;lb/&gt; vlang/veb - https://modules.vlang.io/veb.html&lt;lb/&gt; vlang/gzip-issue - https://github.com/vlang/v/issues/20865#issuecomment-1955101657&lt;lb/&gt; vlang/ci - https://github.com/vlang/v/actions&lt;lb/&gt; vlang/performance-optimisation - https://docs.vlang.io/performance-tuning.html&lt;lb/&gt; benchmark/coro-sieve-v-vs-go - https://programming-language-benchmarks.vercel.app/v-vs-go&lt;lb/&gt; benchmark/sieve.go - https://github.com/hanabi1224/Programming-Language-Benchmarks/blob/main/bench/algorithm/coro-prime-sieve/1.go&lt;lb/&gt; benchmark/sieve.v - https://github.com/hanabi1224/Programming-Language-Benchmarks/blob/main/bench/algorithm/coro-prime-sieve/1.v&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45080808</guid></item><item><title>Sometimes Software Is Done, or Why Hugo Why</title><link>https://commaok.xyz/post/on_hugo/</link><description>&lt;doc fingerprint="9d2950792ee612c2"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Sometimes Software is Done, or Why Hugo Why&lt;/head&gt;
    &lt;head rend="h2"&gt; January 9, 2024 &lt;/head&gt;
    &lt;p&gt;I didn’t sit down this morning planning to write a grouchy blog post about Hugo.&lt;/p&gt;
    &lt;p&gt;When I first used Hugo I loved it. It was fast. It was simple. It just worked, as much as any software does, and it solved a real problem.&lt;/p&gt;
    &lt;p&gt;It was done.&lt;/p&gt;
    &lt;p&gt;But people kept working on it.&lt;/p&gt;
    &lt;p&gt;I’m sure that it has been improved in countless ways. But along the way it has gotten bigger and more complicated, and has broken backwards compatibility repeatedly.&lt;/p&gt;
    &lt;p&gt;I am only inspired to write a blog post every few months. It takes a lot of self control to forgo the glittering pile of side projects and use my precious free time to write some words instead of code.&lt;/p&gt;
    &lt;p&gt;I commit to myself: Today is the day! I will finally tackle one of the items from my blog post idea list!&lt;/p&gt;
    &lt;p&gt;And then…&lt;/p&gt;
    &lt;p&gt;I run &lt;code&gt;hugo&lt;/code&gt;…&lt;/p&gt;
    &lt;p&gt;And it scribbles all over my files, a slew of unimportant changes, unfortunately occasionally interspersed with a few that matter…&lt;/p&gt;
    &lt;p&gt;And it warns me of new deprecations, often with unusable upgrade instructions…&lt;/p&gt;
    &lt;p&gt;And things flat out break.&lt;/p&gt;
    &lt;p&gt;(Often, they were deprecated and then broken entirely between two subsequent blog posts, so I never ever saw the deprecation.)&lt;/p&gt;
    &lt;p&gt;Instead of writing a blog post, I spend hours fixing build failures.&lt;/p&gt;
    &lt;p&gt;Build failures of my static site, which has maybe a few dozen posts.&lt;/p&gt;
    &lt;p&gt;I don’t care about Hugo’s internals. I have never cared. I just want a blog that works.&lt;/p&gt;
    &lt;p&gt;Enough complaining. Hugo is officially on the chopping block. Suggestions for alternatives welcome.&lt;/p&gt;
    &lt;p&gt;And in the meantime, I’ll just compile Hugo myself from source, never update it, and live in the ever receding past.&lt;/p&gt;
    &lt;p&gt;Backwards compatibility matters. And sometimes, software is done.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</description><guid isPermaLink="false">https://news.ycombinator.com/item?id=45081703</guid></item></channel></rss>