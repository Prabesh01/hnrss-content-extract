<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Sat, 06 Sep 2025 15:04:31 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Oldest Recorded Transaction]]></title>
            <link>https://avi.im/blag/2025/oldest-txn/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45149626</guid>
            <description><![CDATA[The oldest recorded transaction was in 3100 BC]]></description>
            <content:encoded><![CDATA[The other day I posted a tweet with this image which I thought was funny:This is the oldest transaction database from 3100 BC - recording accounts of malt and barley groats. Considering this thing survived 5000 years (holy shit!) with zero downtime and has stronger durability guarantees than most databases today.I call it rock solid durability.This got me thinking, can I insert this date in today’s database? What is the oldest timestamp a database can support?So I checked the top three databases: MySQL, Postgres, and SQLite:MySQL1000 ADPostgres4713 BCSQLite4713 BCToo bad you cannot use MySQL for this. Postgres and SQLite support the Julian calendar and the lowest date is Jan 01, 4713 BC:sales=# INSERT INTO orders VALUES ('4713-01-01 BC'::date);
INSERT 0 1
sales=# SELECT * FROM orders;
   timestamp
---------------
 4713-01-01 BC
(1 row)
sales=# INSERT INTO orders VALUES ('4714-01-01 BC'::date);
ERROR:  date out of range: "4714-01-01 BC"
I wonder how people store dates older than this. Maybe if I’m a British Museum manager, and I want to keep theft inventory details. How do I do it? As an epoch? Store it as text? Use some custom system? How do I get it to support all the custom operations that a typical TIMESTAMP supports?Thanks to aku, happy_shady, Mr. Bhat, and General Bruh for reading an early draft of this post.1. Source of the image: Sumer civilization2. I found this from the talk 1000x: The Power of an Interface for Performance by
Joran Dirk Greef, CEO of TigerBeetle, timestamped @ 38:10.3. The talk has other bangers too, like this or this.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vibe Coding Through the Berghain Challenge]]></title>
            <link>https://www.nibzard.com/berghain/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45149330</guid>
            <description><![CDATA[How my AI coding partner and I obsessed over a nightclub bouncer optimization problem for one intense day]]></description>
            <content:encoded><![CDATA[ # Part 1: The Billboard That Started Everything
Listen Labs just pulled off a solid growth play.
Picture this: You’re driving through San Francisco and spot a cryptic billboard. Five numbers. No explanation. Just:

That’s it. SF billboards are basically expensive Reddit posts hoping to go viral online. And this one worked.
Someone cracked it pretty quickly—they were token IDs from OpenAI’s tokenizer. Decode them and you get: listenlabs.ai/puzzle. The kind of puzzle that gets shared in Slack channels and Discord servers.
Hit that link and you’re in the Berghain Challenge.
Context: Listen Labs runs an AI-powered customer insights platform. They help companies do qualitative research at scale using AI interviewers. Makes sense they’d want to attract technical talent with a smart puzzle. Plus, VCs love seeing this kind of creative marketing in their portfolio companies.
The Growth Hack Anatomy
Here’s what Listen did that was pure genius:

Stage 1: Cryptic billboard → Curiosity
Stage 2: Token puzzle → Technical community engagement
Stage 3: OEIS speculation → Community-driven solving
Stage 4: Berghain Challenge → Viral optimization addiction

They expected 10 concurrent users. They got 30,000 in first hours.
That’s a 3000x viral coefficient. Let me repeat that: 3000x.

Alfred’s announcement tweet hit 1.1M views. Zero paid acquisition. Just a billboard and decent understanding of how technical communities work.

The prize? All-expenses Berlin trip plus Berghain guest list. Smart audience targeting—Berlin’s techno scene meets Silicon Valley optimization nerds.
You’re not just solving a puzzle anymore. You’re the bouncer at Berlin’s most exclusive nightclub. Your mission? Fill exactly 1,000 spots from a stream of random arrivals. Meet specific quotas. Don’t reject more than 20,000 people.
Sounds simple?
Ha.
When Infrastructure Crashes Create FOMO
The official API was… problematic. Rate limits. Downtime. Maximum 10 parallel games. Slow response times.
But here’s the thing: Those crashes weren’t bugs. They were features.

Listen’s founder Alfred Wahlforss was tweeting in real-time: “we thought we’d get 10 concurrent users, not 30,000 😅 just rebuilt the API to make run smoother 🚀”

Users were refreshing frantically. “Application error: a server-side exception has occurred.” Comments like “Not sure if this is part of the challenge or if it crashed.”

Classic scarcity marketing. Can’t access it? Want it more.
Meanwhile, Claude and I were building our own local simulator. Same game mechanics, same statistical distributions, but we could run hundreds of games in parallel without waiting for servers crashing under viral load.
The irony? Listen’s infrastructure struggles created authenticity. Real startups have real scaling problems. The community bought in harder.
Full implementation: https://github.com/nibzard/berghain-challenge-bot
Why This Challenge Will Make You Question Everything
Let me paint the picture of why this problem is mathematically evil.
You’re standing at the door of Berghain. People arrive one by one. Each person has binary attributes: young/old, well_dressed/casual, male/female, and others. You know the rough frequencies—about 32.3% are young, 32.3% are well_dressed.
But here’s the kicker: You must decide immediately. Accept or reject. No takebacks. No “let me think about this.” The line keeps moving.
Your constraints for Scenario 1:

Get at least 600 young people
Get at least 600 well_dressed people
Fill exactly 1,000 spots total
Don’t reject more than 20,000 people

“Easy,” you think. “I’ll just accept everyone who helps with a constraint.”
Wrong.
The attributes are correlated. Some young people are also well_dressed. Accept too many of these “duals” early and you’ll overshoot one quota while undershooting the other. Reject too many and you’ll run out of people.
It’s a constrained optimization problem wrapped in a deceptively simple game. You’re essentially solving a real-time resource allocation problem with incomplete information and irreversible decisions.
The Numbers That Haunt Me
After one intense day of obsessive coding with my AI partner, here’s what we discovered in the arena of 30,000 concurrent solvers:
Listen created an accidental distributed computing experiment. Thousands of engineers, all attacking the same optimization problem. The collective compute power was staggering.
The top performers? They’re getting around 650-700 rejections in this massive competitive landscape. The theoretical minimum is probably somewhere around 600-650 rejections, but with 30,000 people trying, nobody’s found it yet.
Our best algorithm? 781 rejections. We called it RBCR (Re-solving Bid-Price with Confidence Reserves). In a field of 30,000, that put us in serious competitive territory.
I’ll tell you how we built it, why it works, and why it nearly drove us both insane.
What Makes This So Addictive
There’s something deeply satisfying about optimization problems. Each improvement feels like a small victory. Going from 1,200 rejections to 1,150 feels monumental. Then 1,100. Then 1,000. Then you hit a wall and obsess over shaving off single digits.
But this isn’t just about the math. It’s about the collaboration.
I had an idea. My AI partner implemented it in seconds. We tested it immediately. Iterated. Failed. Learned. Repeated. The feedback loop was intoxicating.
Traditional solo programming? You spend hours implementing a solution only to discover it doesn’t work. With AI assistance? You can test a dozen approaches in the time it used to take to implement one.
This is the story of that collaboration. How we went from clueless to competitive. How AI amplified human intuition. How domain expertise still matters in the age of artificial intelligence.
And how a startup’s growth hack became a day-long obsession with optimization, game theory, and the future of collaborative programming.
This is a dual story: How Listen accidentally created the most engaging technical challenge of 2025, and how human-AI collaboration let us compete in their accidental arena.
Buckle up. We’re about to dive deep into viral growth mechanics, algorithms, failures, breakthroughs, and the beautiful chaos of when marketing meets engineering obsession.

# Part 2: The Dual Challenge
I’m a growth advisor with engineering fundamentals. When I saw Listen’s campaign, I immediately recognized two fascinating challenges running in parallel:

Challenge 1: How did a startup 3000x their expected user base with zero paid acquisition?


Challenge 2: How do you solve a constrained optimization problem that has prob the smartest engineers in the world competing against you?

Both challenges required the same core skill: understanding systems, finding leverage points, and optimizing ruthlessly.
The Growth Marketing Masterclass
Listen’s approach was textbook viral growth with a technical twist:
Mystery Phase: Cryptic billboard creates curiosity gap. No explanation = maximum speculation.
Community Phase: Token puzzle activates technical communities. Reddit threads explode. Twitter goes wild. Everyone becomes a detective.
Challenge Phase: Berghain game provides clear success metrics. Immediate feedback loop. Addictive optimization cycle.
Competition Phase: Leaderboard dynamics create retention. Status through technical skill. Perfect product-market fit for engineering egos.
The brilliant part? Each phase filtered for higher engagement. Casual observers dropped off. Technical obsessives doubled down.
The Viral Mechanics
From a growth perspective, Listen nailed every viral coefficient multiplier:

Curiosity Gap: Mysterious billboard → high shareability
Community Solving: Group puzzle → network effects
Status Competition: Technical leaderboard → ego investment
Infrastructure Struggles: “Can’t access” → scarcity psychology

The 3000x multiplier wasn’t luck. It was systematic exploitation of technical community psychology.
The Engineering Obsession
From a technical perspective, this problem was crack cocaine for optimization addicts:

Clear Success Metrics: Rejection count goes down = dopamine hit
Immediate Feedback: Test algorithm, get result instantly
Competitive Context: 30,000 people trying to beat you
Deep Complexity: Simple rules, emergent mathematical beauty

Perfect storm for engineering obsession.
Where Marketing Met Engineering
The genius of Listen’s approach: They created a problem that required both growth mindset and technical depth.
Understanding the viral mechanics helped me see why the challenge was so engaging. Understanding the optimization problem helped me see why the growth worked so well.
Marketing created the arena. Engineering filled it with obsessives.
Time to tell you how we became one of those obsessives.

# Part 3: Day 1 - The Naive Optimism Phase
“Hey Claude, I found this interesting challenge. It’s about being a nightclub bouncer and optimizing admissions. Want to help me solve it?”
Famous last words.
I was expecting maybe an hour of casual problem-solving. You know, write a simple algorithm, test it, maybe optimize it a bit, call it a day.
By the end of the day, I’m staring at 30+ solver implementations, thousands of lines of code, and a monitoring dashboard that looks like mission control.
But let’s start at the beginning.
The First Attempt: Greedy and Naive
Me: “Let’s start simple. Just accept anyone who helps with our constraints.”
Claude: “You’re absolutely right! Here’s a greedy approach:”
def should_accept(person, game_state):
    # Accept if person helps with any unmet constraint
    for constraint in game_state.constraints:
        if person.has_attribute(constraint.attribute):
            shortage = constraint.min_count - game_state.admitted_attributes[constraint.attribute]
            if shortage > 0:
                return True, f"needed_for_{constraint.attribute}"

    # Otherwise, maybe accept a few randoms
    return random.random() < 0.05, "filler"
Me: “Perfect! This should work great.”
Famous last words, part two.
We fired it up. Results: 1,247 rejections.
Ouch.
Claude: “The issue is we’re being too greedy early. We accept everyone who’s young OR well_dressed, but many people are both. We overshoot one constraint while undershooting the other.”
The Second Attempt: Tracking Deficits
Me: “Okay, so we need to track how much we still need of each attribute and be smarter about it.”
Claude: “I can implement a deficit-aware strategy:”
def should_accept(person, game_state):
    shortage = game_state.constraint_shortage()

    # Calculate how much this person helps
    young = person.young and shortage['young'] > 0
    well_dressed = person.well_dressed and shortage['well_dressed'] > 0

    if young and well_dressed:
        return True, "dual_helper"  # Helps both constraints
    elif young or well_dressed:
        return random.random() < 0.7, "single_helper"
    else:
        return random.random() < 0.02, "filler"
Better! Down to 1,098 rejections.
Still terrible, but progress.
The Third Attempt: Getting Desperate
Me: “What if we’re more selective early on? Only accept the really good candidates?”
Claude: “We could implement phases based on capacity usage:”
def should_accept(person, game_state):
    capacity_ratio = game_state.admitted_count / 1000.0
    shortage = game_state.constraint_shortage()

    young_helps = person.young and shortage['young'] > 0
    dressed_helps = person.well_dressed and shortage['well_dressed'] > 0

    if capacity_ratio < 0.3:  # Early phase - be picky
        if young_helps and dressed_helps:
            return True, "early_dual"
        return False, "early_reject"

    elif capacity_ratio < 0.7:  # Mid phase - moderate
        if young_helps or dressed_helps:
            return random.random() < 0.6, "mid_helper"
        return False, "mid_reject"

    else:  # Late phase - panic mode
        if young_helps or dressed_helps:
            return True, "late_helper"
        return random.random() < 0.1, "late_filler"
Results: 943 rejections.
We were getting somewhere! But also realizing this problem was way harder than expected.
The Debugging Session
Me: “Wait, let’s actually understand what’s going wrong. Can you add detailed logging?”
Claude: “Of course! Let me instrument everything:”
def should_accept(person, game_state):
    # ... decision logic ...

    # Log everything
    logger.info(f"Person {game_state.person_count}: "
                f"young={person.young}, dressed={person.well_dressed}, "
                f"decision={decision}, reason='{reason}', "
                f"capacity={game_state.admitted_count}/1000, "
                f"young_deficit={shortage['young']}, "
                f"dressed_deficit={shortage['well_dressed']}")

    return decision, reason
Running this, we could see exactly what was happening. The logs were brutal:
Person 1247: young=True, dressed=False, decision=True, reason='young_needed'
Person 1248: young=False, dressed=True, decision=True, reason='dressed_needed'
Person 1249: young=True, dressed=True, decision=True, reason='dual_jackpot'
...
Person 15673: young=False, dressed=False, decision=False, reason='useless'
GAME OVER: young_deficit=127, dressed_deficit=43, capacity=953/1000
We were consistently undershooting our quotas while running out of capacity. Classic resource allocation failure.
The Facepalm Moment
Me: “Oh god. We’re not accounting for the probabilities properly. If only 32% of people are young, and we need 600 young people out of 1000 total spots, we actually need to accept like… 90%+ of young people we see.”
Claude: “Exactly! And the correlation between attributes makes it even more complex. A person who’s both young and well_dressed is incredibly valuable because they satisfy both constraints simultaneously.”
Me: “We need to think about this probabilistically. What’s the expected value of accepting this person given our current state and the remaining slots?”
Claude: “That sounds like we need to model this as an optimization problem with uncertainty…”
And that’s when I realized we weren’t just building a simple algorithm anymore.
We were diving into operations research territory. Stochastic optimization. Dynamic programming. Multi-objective decision making under uncertainty.
All for a nightclub bouncer simulation.
Day 1 Wrap-Up: Reality Check
By the end of day one, our best solution was still sitting at 943 rejections. Respectable improvement from 1,200+, but nowhere near competitive.
More importantly, we had a much clearer picture of why this problem was hard:

Resource constraints: Limited capacity (1000 spots)
Correlated attributes: People who are young AND well_dressed are gold
Uncertain arrival patterns: You never know what’s coming next
Irreversible decisions: No takebacks once you decide
Multiple objectives: Two quotas plus capacity limit

Me: “Tomorrow, we’re going to need to get mathematical about this.”
Claude: “I’m ready. Should we start reading about constrained optimization?”
Little did we know, we were about to discover Lagrangian multipliers, bid-price mechanisms, and the beautiful world of dual variable optimization.
Day two was going to be very different from day one.

# Part 4: The Statistical Awakening
A few hours later, I had a growth insight: viral challenges work because they create addiction loops.
Listen had nailed the psychology. Every algorithm improvement = dopamine hit. Every leaderboard check = social comparison. Every failed attempt = “just one more try.”
With 30,000 engineers now obsessing, the competition was heating up.
Me: “Claude, we’ve been treating each decision independently. But this is really about managing scarce resources over time. We need to think about opportunity costs.”
Claude: “You’re absolutely right! Each acceptance now affects our options later. If we accept too many single-attribute people early, we might not have room for dual-attribute people who are more efficient.”
Me: “Exactly! And we need to use statistics properly. What are the actual probabilities here?”
Understanding the Data
First, we dove into the attribute frequencies. The challenge gives you some basic stats, but we needed to understand the correlations.
# From the game statistics
frequencies = {
    'young': 0.323,        # 32.3% of people are young
    'well_dressed': 0.323,  # 32.3% are well_dressed
}

# The correlation coefficient between young and well_dressed
correlation = 0.076  # Slight positive correlation
Claude: “Let me calculate the joint probabilities:”
import math

def calculate_joint_probabilities(p_young, p_dressed, correlation):
    # Convert correlation to covariance
    denom = math.sqrt(p_young * (1-p_young) * p_dressed * (1-p_dressed))
    covariance = correlation * denom

    # Joint probabilities
    p_both = p_young * p_dressed + covariance
    p_young_only = p_young - p_both
    p_dressed_only = p_dressed - p_both
    p_neither = 1 - (p_both + p_young_only + p_dressed_only)

    return p_both, p_young_only, p_dressed_only, p_neither

# Results:
# P(both young AND well_dressed) ≈ 0.110
# P(young only) ≈ 0.213
# P(well_dressed only) ≈ 0.213
# P(neither) ≈ 0.464
This was eye-opening. About 11% of people help with BOTH constraints. These “dual” people are incredibly valuable—each one gets us closer to both quotas simultaneously.
The Value Function Epiphany
Me: “We need to assign values to different types of people based on how much they help us.”
Claude: “A value function based on remaining deficits! Here’s what I’m thinking:”
def calculate_person_value(person, game_state):
    shortage = game_state.constraint_shortage()
    value = 0

    if person.young and shortage['young'] > 0:
        value += 1.0  # Base value for helping young quota

    if person.well_dressed and shortage['well_dressed'] > 0:
        value += 1.0  # Base value for helping dressed quota

    # Bonus for dual attributes (more efficient use of capacity)
    if person.young and person.well_dressed:
        if shortage['young'] > 0 and shortage['well_dressed'] > 0:
            value += 0.5  # Efficiency bonus

    return value
Me: “But wait. The value should depend on scarcity too. If we’re almost done with young people but need lots of well_dressed people, a well_dressed person is worth more than a young person.”
Claude: “Ah, like dynamic pricing! The scarcer the resource, the higher its value:“
def calculate_person_value(person, game_state):
    shortage = game_state.constraint_shortage()
    remaining_slots = 1000 - game_state.admitted_count

    value = 0

    if person.young and shortage['young'] > 0:
        # Value increases as shortage becomes more critical
        scarcity_multiplier = shortage['young'] / remaining_slots
        value += scarcity_multiplier

    if person.well_dressed and shortage['well_dressed'] > 0:
        scarcity_multiplier = shortage['well_dressed'] / remaining_slots
        value += scarcity_multiplier

    return value
The Acceptance Probability Function
Now we had values, but we needed to convert them to acceptance probabilities. Accept everyone with high value? Too greedy. Accept nobody? Too conservative.
Me: “What if we use a sigmoid function? High value → high probability, low value → low probability, but with some randomness.”
Claude: “Perfect! And we can tune the temperature parameter to control how selective we are:“
import math

def acceptance_probability(value, temperature=2.0):
    """Convert value to acceptance probability using sigmoid"""
    return 1.0 / (1.0 + math.exp(-value / temperature))

# Example:
# value = 0.5 → probability ≈ 0.62
# value = 1.0 → probability ≈ 0.73
# value = 1.5 → probability ≈ 0.82
# value = 2.0 → probability ≈ 0.88
The First Statistical Solver
Putting it all together:
class StatisticalSolver:
    def __init__(self, temperature=2.0):
        self.temperature = temperature

    def should_accept(self, person, game_state):
        # Calculate person's value based on current needs
        value = self.calculate_person_value(person, game_state)

        # Convert to acceptance probability
        prob = self.acceptance_probability(value)

        # Make random decision based on probability
        decision = random.random() < prob

        reason = f"value={value:.2f}_prob={prob:.2f}"
        return decision, reason

    def calculate_person_value(self, person, game_state):
        shortage = game_state.constraint_shortage()
        remaining_slots = max(1, 1000 - game_state.admitted_count)

        value = 0.0

        if person.young and shortage['young'] > 0:
            urgency = shortage['young'] / remaining_slots
            value += urgency

        if person.well_dressed and shortage['well_dressed'] > 0:
            urgency = shortage['well_dressed'] / remaining_slots
            value += urgency

        return value
Results: 847 rejections!
Holy shit. We dropped from 943 to 847 with one key insight: think probabilistically, not deterministically.
Fine-Tuning the Parameters
Me: “The temperature parameter is crucial. Too high and we accept too many low-value people. Too low and we’re too picky.”
Claude: “Let me run some parameter sweeps:”
# Testing different temperatures
results = []
for temp in [0.5, 1.0, 1.5, 2.0, 2.5, 3.0]:
    solver = StatisticalSolver(temperature=temp)
    avg_rejections = run_multiple_games(solver, num_games=10)
    results.append((temp, avg_rejections))
    print(f"Temperature {temp}: {avg_rejections:.1f} rejections")

# Results:
# Temperature 0.5: 1,245 rejections (too picky)
# Temperature 1.0: 934 rejections
# Temperature 1.5: 847 rejections  ← sweet spot
# Temperature 2.0: 892 rejections
# Temperature 2.5: 967 rejections (too accepting)
# Temperature 3.0: 1,078 rejections
Temperature = 1.5 was our sweet spot. Not too hot, not too cold.
Adding Phase-Based Logic
Me: “We should probably be more aggressive late in the game when we’re running out of people.”
Claude: “Adaptive temperature based on game phase?”
def get_adaptive_temperature(self, game_state):
    capacity_ratio = game_state.admitted_count / 1000.0

    if capacity_ratio < 0.4:
        return 1.2  # Early game: be selective
    elif capacity_ratio < 0.8:
        return 1.5  # Mid game: balanced
    else:
        return 2.2  # Late game: more aggressive
Results: 821 rejections.
We were getting there! Each insight was shaving off 20-50 rejections.
The Monitoring Dashboard
At this point, we had enough complexity that debugging became hard. So we built a real-time monitoring system.
Claude: “Let me create a TUI dashboard so we can watch the algorithm in action:”
from rich.live import Live
from rich.table import Table
from rich.panel import Panel

class GameMonitor:
    def display_status(self, game_state, last_decision):
        table = Table(title="Berghain Bouncer Status")
        table.add_column("Metric", style="bold")
        table.add_column("Value", style="green")

        table.add_row("Admitted", f"{game_state.admitted_count}/1000")
        table.add_row("Young", f"{game_state.admitted_attributes['young']}/600")
        table.add_row("Well Dressed", f"{game_state.admitted_attributes['well_dressed']}/600")
        table.add_row("Rejections", str(game_state.rejection_count))
        table.add_row("Last Decision", last_decision)

        return Panel(table, title="Live Game Status")

Watching the dashboard was mesmerizing. You could see the deficits shrinking, the capacity filling up, the algorithm making split-second decisions.
Sometimes it would reject a dual-attribute person early in the game (seemed wasteful) but accept a single-attribute person later (made sense given the remaining needs).
Me: “It’s actually working! The algorithm is learning to balance short-term and long-term value.”
Claude: “The statistical approach is much more robust than our previous heuristics. We’re making decisions based on actual probabilities rather than gut feelings.”
End of Day 2: Statistical Success
By end of day two, we had:

✅ Dropped from 943 to 821 rejections
✅ Built a probabilistic decision framework
✅ Implemented adaptive parameters
✅ Created a real-time monitoring system
✅ Understood the mathematical structure of the problem

Me: “821 rejections puts us in decent territory, but I keep thinking there’s a more principled approach. This feels like an operations research problem.”
Claude: “You’re thinking about optimal stopping theory? Or maybe linear programming?”
Me: “Exactly. Tomorrow, let’s get serious about the math. I want to understand this problem from first principles.”
Little did we know, day three would introduce us to Lagrangian multipliers, dual variables, and the most elegant algorithm we’d build: RBCR (Re-solving Bid-Price with Confidence Reserves).
The statistical awakening was just the beginning.

# Part 5: The Mathematical Enlightenment
Later that day. I’m lying in bed thinking about Lagrangian multipliers.
This is what optimization problems do to you. They crawl into your brain and set up camp.
Me: “Claude, I can’t sleep. I keep thinking about this problem as a constrained optimization. What if we model it with dual variables?”
Claude: “At 3 AM? I’m always available! Tell me what you’re thinking.”
Me: “In economics, when you have scarce resources, you use prices to allocate them efficiently. What if we assign ‘prices’ to our constraints? Higher price means we really need that attribute.”
The Lagrangian Insight
Claude: “You’re talking about Lagrangian multipliers! In constrained optimization, the multipliers represent the shadow prices—how much the objective would improve if we relaxed each constraint slightly.”
Me: “Exactly! So if we desperately need young people, the ‘price’ for young should be high. If we desperately need well_dressed people, that price should be high too.”
Here’s the key insight: Instead of static value functions, we could have dynamic prices that adjust based on how urgent each constraint becomes.
Claude: “Let me formalize this. We want to minimize rejections subject to:”
minimize: rejections
subject to: young_count >= 600
           dressed_count >= 600
           total_count <= 1000
Me: “And the Lagrangian multipliers λ_young and λ_dressed tell us the ‘urgency’ of each constraint at any given moment.”
Implementing Dual Variables
Claude: “Here’s how we can compute the multipliers dynamically:”
class DualVariableSolver:
    def __init__(self):
        self.lambda_young = 0.0
        self.lambda_dressed = 0.0

    def update_dual_variables(self, game_state):
        """Update dual variables based on current deficits"""
        shortage = game_state.constraint_shortage()
        remaining_slots = max(1, 1000 - game_state.admitted_count)

        # Expected helpful arrivals per remaining slot
        young_help_rate = self.estimate_helpful_rate('young', game_state)
        dressed_help_rate = self.estimate_helpful_rate('dressed', game_state)

        # Dual variables = deficit / expected helpful arrivals
        self.lambda_young = shortage['young'] / max(young_help_rate * remaining_slots, 1e-6)
        self.lambda_dressed = shortage['dressed'] / max(dressed_help_rate * remaining_slots, 1e-6)

    def estimate_helpful_rate(self, attribute, game_state):
        """Estimate probability that next person will help with this attribute"""
        if attribute == 'young':
            return 0.323  # Base frequency of young people
        elif attribute == 'dressed':
            return 0.323  # Base frequency of well_dressed people
        return 0.0

    def should_accept(self, person, game_state):
        # Update dual variables first
        self.update_dual_variables(game_state)

        # Calculate person's dual value
        dual_value = 0.0

        if person.young and game_state.constraint_shortage()['young'] > 0:
            dual_value += self.lambda_young

        if person.well_dressed and game_state.constraint_shortage()['dressed'] > 0:
            dual_value += self.lambda_dressed

        # Accept if dual value exceeds threshold
        threshold = 1.0  # Tunable parameter
        decision = dual_value >= threshold

        reason = f"dual_value={dual_value:.2f}_λy={self.lambda_young:.2f}_λd={self.lambda_dressed:.2f}"
        return decision, reason
Results: 782 rejections!
We’d broken through 800! This was our best result yet.
But Wait, There’s More
Me: “This is working, but I think we’re missing something. The threshold is static, but it should probably adapt based on how full we are.”
Claude: “You’re right! Early in the game we can be picky (high threshold). Late in the game we should be desperate (low threshold).”
def get_adaptive_threshold(self, game_state):
    capacity_ratio = game_state.admitted_count / 1000.0
    rejection_ratio = game_state.rejection_count / 20000.0

    # Start high, end low
    base_threshold = 1.5 - capacity_ratio

    # Panic if we're running out of rejections
    if rejection_ratio > 0.8:
        base_threshold *= 0.5  # Emergency mode

    return max(0.1, base_threshold)
The RBCR Revolution
Me: “What if we resolve the dual variables periodically? Like every 50 arrivals, we re-estimate our helper rates and update our strategy?”
Claude: “Re-solving Bid-Price with Confidence Reserves! We could call it RBCR.”
This was the breakthrough moment. Instead of updating duals every single decision, we’d batch them. Every 50 arrivals:

Look at our current deficit
Estimate remaining helpful arrival rates
Recompute dual variables
Set acceptance thresholds accordingly

class RBCRSolver:
    def __init__(self):
        self.lambda_young = 0.0
        self.lambda_dressed = 0.0
        self.resolve_counter = 0
        self.resolve_every = 50

    def should_accept(self, person, game_state):
        # Periodically resolve dual variables
        if self.resolve_counter % self.resolve_every == 0:
            self.resolve_duals(game_state)
        self.resolve_counter += 1

        # Calculate dual value for this person
        dual_value = self.calculate_dual_value(person, game_state)

        # Adaptive threshold based on game state
        threshold = self.get_adaptive_threshold(game_state)

        # Accept if value exceeds threshold
        decision = dual_value >= threshold

        return decision, f"dv={dual_value:.2f}_th={threshold:.2f}"

    def resolve_duals(self, game_state):
        """The heart of RBCR - recompute dual variables"""
        shortage = game_state.constraint_shortage()
        remaining_slots = max(1, 1000 - game_state.admitted_count)

        # Estimate help rates (this is where the magic happens)
        young_rate = self.estimate_young_help_rate(game_state)
        dressed_rate = self.estimate_dressed_help_rate(game_state)

        # Expected helpful arrivals = rate * remaining_slots
        expected_young_help = young_rate * remaining_slots
        expected_dressed_help = dressed_rate * remaining_slots

        # Dual variables = deficit / expected_help
        self.lambda_young = shortage['young'] / max(expected_young_help, 1e-6)
        self.lambda_dressed = shortage['dressed'] / max(expected_dressed_help, 1e-6)
Results: 781 rejections.
We’d found our winner! RBCR was consistently hitting the low 780s.
The Beautiful Math Behind RBCR
Here’s why this approach is so elegant:


Dual variables capture urgency: When you desperately need young people, λ_young shoots up, making young people more valuable.


Periodic resolution is efficient: We don’t need to recompute every single decision—every 50 arrivals is enough.


Adaptive thresholds handle phases: Early pickiness, late desperation, all handled automatically.


Self-correcting: If we’re accepting too many of one type, the deficit shrinks, the dual variable drops, we become less likely to accept more.


The math was doing exactly what a good bouncer would do: pay attention to what you need most, be pickier when you have time, be desperate when you’re running out of options.
The Debugging Session That Made Us Believers
Me: “Let’s trace through a game step by step and see the duals in action.”
Game Start:
shortage: young=600, dressed=600
λ_young=1.85, λ_dressed=1.85

Person 1: young=True, dressed=True
dual_value = 1.85 + 1.85 = 3.70
threshold = 1.50
ACCEPT (dual person is incredibly valuable)

...

Person 500: young=True, dressed=False
shortage: young=234, dressed=178
λ_young=0.95, λ_dressed=1.23
dual_value = 0.95
threshold = 1.20
REJECT (young is less urgent now)

Person 501: young=False, dressed=True
dual_value = 1.23
threshold = 1.20
ACCEPT (dressed is still urgent)
Claude: “It’s beautiful! The dual variables automatically rebalance based on remaining needs. The algorithm develops intuition.”
Me: “And look at the late game behavior:”
Person 950: young=False, dressed=False
shortage: young=12, dressed=3
λ_young=0.78, λ_dressed=0.18
dual_value = 0.0
threshold = 0.30
REJECT (we're almost done, be picky)

Person 951: young=True, dressed=False
dual_value = 0.78
threshold = 0.30
ACCEPT (still need a few young people)
The algorithm had learned to be surgical in the endgame.
Why 781 Felt Like Victory
After two days of grinding, seeing that 781 was intoxicating. It wasn’t just the number—it was the elegance.
RBCR felt right in a way our previous algorithms didn’t. The decisions made intuitive sense. The math was principled. The performance was consistent.
Me: “I think we found our killer algorithm.”
Claude: “The dual variable approach captures the essence of the problem. We’re explicitly modeling scarcity and urgency.”
Me: “But I have a terrible feeling there are even more optimizations we could make…”
And that’s how day three ended. Not with satisfaction, but with the dangerous realization that we could probably make RBCR even better.
The mathematical enlightenment was complete. We understood the problem from first principles. We had elegant, principled algorithms.
Now came the dangerous part: the obsession with perfection.

# Part 6: The Kitchen Sink Era
Have you ever solved a problem so elegantly that you immediately want to ruin it with unnecessary complexity?
That’s exactly what happened next.
RBCR was working beautifully at 781 rejections. Any reasonable person would have stopped there. But we weren’t reasonable people anymore. We were optimization addicts, and 781 felt tantalizingly close to something even better.
Me: “What if we add a feasibility oracle?”
Claude: “A what now?”
Me: “A statistical confidence check. Before accepting someone, we simulate forward and check if we can still meet our constraints with high probability.”
This is where things got complicated.
The Feasibility Oracle
The idea was seductive. Instead of just looking at current deficits, what if we could estimate whether accepting this person would put us in a mathematically impossible situation later?
Claude: “I can implement a Monte Carlo simulation approach:”
class FeasibilityOracle:
    def __init__(self, p11, p10, p01, p00, confidence=0.95):
        """
        p11: P(young AND well_dressed)
        p10: P(young only)
        p01: P(well_dressed only)
        p00: P(neither)
        """
        self.p11, self.p10, self.p01, self.p00 = p11, p10, p01, p00
        self.confidence = confidence
        self.samples = 1000

    def is_feasible(self, admitted_young, admitted_dressed, admitted_total, target_capacity):
        """Check if we can still meet constraints with high probability"""
        remaining_slots = target_capacity - admitted_total
        young_needed = max(0, 600 - admitted_young)
        dressed_needed = max(0, 600 - admitted_dressed)

        if remaining_slots <= 0:
            return young_needed == 0 and dressed_needed == 0

        # Monte Carlo simulation
        successes = 0

        for _ in range(self.samples):
            sim_young = admitted_young
            sim_dressed = admitted_dressed

            # Simulate remaining arrivals
            for _ in range(remaining_slots):
                rand = random.random()

                if rand < self.p11:  # both young and dressed
                    sim_young += 1
                    sim_dressed += 1
                elif rand < self.p11 + self.p10:  # young only
                    sim_young += 1
                elif rand < self.p11 + self.p10 + self.p01:  # dressed only
                    sim_dressed += 1
                # else: neither (p00)

            # Check if constraints satisfied
            if sim_young >= 600 and sim_dressed >= 600:
                successes += 1

        return (successes / self.samples) >= self.confidence
Me: “Now we can check feasibility before every accept decision!”
RBCR + Feasibility = RBCR2
We bolted the feasibility oracle onto RBCR:
class RBCR2Solver(RBCRSolver):
    def __init__(self):
        super().__init__()
        # Precompute joint probabilities from correlation data
        self.oracle = FeasibilityOracle(0.110, 0.213, 0.213, 0.464)

    def should_accept(self, person, game_state):
        # Run normal RBCR logic
        rbcr_decision, rbcr_reason = super().should_accept(person, game_state)

        if not rbcr_decision:
            return False, rbcr_reason

        # If RBCR says accept, check feasibility
        # Simulate accepting this person
        sim_young = game_state.admitted_attributes['young']
        sim_dressed = game_state.admitted_attributes['well_dressed']
        sim_total = game_state.admitted_count

        if person.young:
            sim_young += 1
        if person.well_dressed:
            sim_dressed += 1
        sim_total += 1

        # Check if this acceptance keeps us feasible
        if self.oracle.is_feasible(sim_young, sim_dressed, sim_total, 1000):
            return True, f"{rbcr_reason}_feasible"
        else:
            return False, f"{rbcr_reason}_infeasible"
Results: 823 rejections.
Wait. What?
The Paradox of Perfection
We made RBCR “smarter” and it got worse. This was our first taste of a crucial lesson: more sophistication doesn’t always mean better performance.
Me: “The feasibility oracle is being too conservative. It’s rejecting people because of low-probability failure scenarios.”
Claude: “The confidence threshold is too high. At 95% confidence, we’re only accepting people if we’re almost certain we’ll succeed. That’s overly cautious.”
We tried tuning the confidence down to 80%, then 70%, then 60%. The performance improved but never matched the original RBCR.
Me: “Let’s try a different approach. What if we build an ensemble of strategies?”
The Ultimate Solver
This is where we completely lost our minds.
Claude: “We could combine the best ideas from all our solvers!”
class UltimateSolver:
    def __init__(self):
        self.rbcr = RBCRSolver()
        self.statistical = StatisticalSolver()
        self.oracle = FeasibilityOracle(0.110, 0.213, 0.213, 0.464)

        # Phase-based weights
        self.phase_weights = {
            'early': {'rbcr': 0.7, 'statistical': 0.3},
            'mid': {'rbcr': 0.8, 'statistical': 0.2},
            'late': {'rbcr': 0.6, 'statistical': 0.4}
        }

    def should_accept(self, person, game_state):
        # Get decisions from multiple strategies
        rbcr_decision, rbcr_reason = self.rbcr.should_accept(person, game_state)
        stat_decision, stat_reason = self.statistical.should_accept(person, game_state)

        # Determine current phase
        capacity_ratio = game_state.admitted_count / 1000.0
        if capacity_ratio < 0.4:
            phase = 'early'
        elif capacity_ratio < 0.8:
            phase = 'mid'
        else:
            phase = 'late'

        # Weighted vote
        weights = self.phase_weights[phase]
        score = (weights['rbcr'] * rbcr_decision +
                 weights['statistical'] * stat_decision)

        # Feasibility check
        if score > 0.5:
            # Check feasibility before final accept
            if self.is_acceptance_feasible(person, game_state):
                return True, f"ensemble_accept_{phase}"
            else:
                return False, f"ensemble_feasibility_reject_{phase}"
        else:
            return False, f"ensemble_reject_{phase}"
Results: 798 rejections.
Still not as good as vanilla RBCR!
The Naming Convention Goes Off the Rails
At this point, our naming started reflecting our desperation:

Ultimate2Solver: Added momentum terms to dual variables
Ultimate3Solver: Added multi-step lookahead
Ultimate3hSolver: Ultimate3 with “heuristic improvements”
PerfectSolver: Attempt at mathematical perfection (spoiler: it wasn’t)
ApexSolver: “This is surely the apex of our work” (it wasn’t)

Each one had elaborate justifications. Each one performed slightly worse than RBCR.
The Moment of Clarity
After implementing our 15th variant, I had an epiphany:
Me: “Claude, I think we’ve been overthinking this.”
Claude: “How so?”
Me: “RBCR works because it’s simple and principled. It models the core economics of the problem—scarcity and urgency—without overengineering.”
Claude: “You’re saying our sophisticated additions are fighting against the core algorithm?”
Me: “Exactly. The feasibility oracle makes us too conservative. The ensemble methods muddy the decision boundary. The multi-step lookahead assumes we can predict randomness.”
The Law of Diminishing Returns
Here’s what we learned the hard way:





















































AlgorithmRejectionsKey InnovationWhy It FailedRBCR781Dual variables✅ (our winner)RBCR2823+ Feasibility oracleToo conservativeUltimate798+ Ensemble methodsCompeting signalsUltimate2789+ Momentum termsOversmoothingUltimate3795+ LookaheadUnpredictable randomnessPerfect812+ “Mathematical perfection”HubrisApex802+ Kitchen sinkToo much complexity
Every addition made the algorithm more complex but less effective.
The Code Generation Velocity
But here’s the thing: even though most of our elaborations failed, the speed at which we could generate and test them was incredible.
Me: “Let’s try adding a confidence interval to the dual variables.”
Claude: “Here’s the implementation:” [30 seconds later, fully coded solution]
Me: “Actually, what if we use a Bayesian update instead?”
Claude: “Updated:” [45 seconds later, completely different approach]
In traditional programming, each of these experiments would have taken hours to implement. With AI assistance, we could test a new approach every few minutes.
This velocity was both a blessing and a curse. It enabled rapid exploration but also made it easy to fall down rabbit holes.
The Performance Wall
After a day of kitchen-sink engineering, we hit a performance wall. Nothing we tried could consistently beat 781 rejections.
Me: “I think 781 might be close to optimal for our approach. To do better, we might need a completely different paradigm.”
Claude: “What kind of different paradigm?”
Me: “Machine learning. What if we train a neural network on optimal game play?”
Famous last words, part three.
The Beautiful Failure
Looking back, the kitchen sink era wasn’t a waste. We learned crucial lessons:

Simplicity often beats complexity in optimization problems
The first principled solution is usually close to optimal
Rapid iteration enables exploration but also enables overengineering
Domain expertise beats sophisticated algorithms that ignore problem structure

Most importantly, we learned that having an AI coding partner makes it dangerously easy to overcomplicate things. The speed of implementation can outpace the wisdom of restraint.
RBCR remained our champion at 781 rejections. Simple, elegant, and consistently effective.
But we weren’t done yet. The siren call of deep learning was too strong to resist.

# Part 7: The ML Detour That Wasn’t
Me: “Claude, what if we train a neural network to learn from our best games?”
Claude: “I can build an LSTM policy network. We have 162 elite games with full decision histories. That’s our training data.”
This seemed logical. We had a dataset of high-quality gameplay. Why not learn from it?
The Data Pipeline
Claude got to work on the data preprocessing while I grabbed coffee.
# Elite game data structure
elite_game = {
    "strategy_name": "rbcr",
    "final_rejections": 781,
    "decisions": [
        {"person_id": 1, "young": True, "well_dressed": False, "decision": True, "reason": "dual_value_high"},
        {"person_id": 2, "young": False, "well_dressed": True, "decision": False, "reason": "threshold_low"},
        # ... thousands more decisions
    ],
    "final_stats": {"young": 612, "well_dressed": 603, "admitted": 1000}
}
[Full data pipeline: https://github.com/nibzard/berghain-challenge-bot/blob/main/berghain/training/enhanced_data_preprocessor.py]
The idea: convert each decision into a feature vector containing game state + person attributes, with the elite algorithm’s decision as the target.
The LSTM Architecture
class LSTMPolicyNetwork(nn.Module):
    def __init__(self, input_dim=15, hidden_dim=256, num_layers=3):
        super().__init__()
        self.lstm = nn.LSTM(input_dim, hidden_dim, num_layers, batch_first=True)
        self.policy_head = nn.Sequential(
            nn.Linear(hidden_dim, 64),
            nn.ReLU(),
            nn.Linear(64, 2)  # [reject_prob, accept_prob]
        )
[Full architecture: https://github.com/nibzard/berghain-challenge-bot/blob/main/berghain/training/lstm_policy.py]
The Training Reality Check
Me: “How’s the training going?”
Claude: “I’ve run 58 experiments. The model is learning the patterns, but…”
Me: “But?”
Claude: “Performance is underwhelming. Best result: 934 rejections.”
934 rejections. Worse than our statistical solver from day two.
Why Deep Learning Failed Here
The post-mortem was brutal but educational:
1. Sparse Rewards Problem

Only 162 elite games out of 3,902 total
Most training data was suboptimal gameplay—short simulation runs with poor performance
Not enough high-quality examples
Switched back to MacBook M4 for training (more than sufficient compute)

2. Sequential Decision Complexity

Each decision affects all future decisions
LSTM had to learn both tactics AND strategy
Credit assignment across 1000+ decisions is hard

3. The Goldilocks Problem

Too little data for deep learning to shine
Too much complexity for simple supervised learning
Stuck in the worst of both worlds

4. Distribution Mismatch

Training on RBCR decisions
Testing on novel game states
Model couldn’t generalize beyond training distribution

The Google Colab Adventure
We tried scaling up. Free GPUs! More compute! Surely that would fix it.
[Colab instructions: https://github.com/nibzard/berghain-challenge-bot/blob/main/COLAB.md]
Results after 30 minutes of training: 912 rejections.
Slightly worse.
When GPT-5 Came to the Rescue
I was getting frustrated. Claude had hit some token limits. Time to call in reinforcements.
Me: “GPT-5, can you review this LSTM approach and tell me what we’re missing?”
GPT-5: “The fundamental issue is that you’re treating this as a supervised learning problem when it’s really a reinforcement learning problem. Your labels aren’t ground truth—they’re just one algorithm’s choices. Try policy gradient methods instead.”
Me: “Claude, can you implement PPO?”
Claude: “Absolutely! Here’s the PPO implementation:” [But then Claude hit the session token limit and we had to wait 5 hours for the window to reset]
This is when things got interesting. During the wait, I brought in ampcode for strategic direction while planning the next phase. We had a proper AI ensemble going: Claude for implementation, GPT-5 for review, ampcode for strategy, and me orchestrating.
The RL Experiment
class PPOTrainer:
    def __init__(self, policy_network, value_network):
        self.policy = policy_network
        self.value = value_network
        # Standard PPO setup
[PPO implementation: https://github.com/nibzard/berghain-challenge-bot/blob/main/berghain/training/ppo_trainer.py]
Results after 48 hours: 889 rejections.
Still worse than RBCR.
The Humbling Realization
Me: “Why isn’t this working?”
Claude: “I think we’re solving the wrong problem. RBCR already found the principled solution. We’re trying to learn what we already know.”
GPT-5: “The issue is sample efficiency. You’d need millions of games to learn what RBCR encodes in 50 lines of math.”
Ampcode: “Consider this: your dual variables already capture the optimal policy. The LSTM is trying to approximate λ = deficit / expected_help through pattern matching instead of computation.”
That hit hard.
The Beautiful Lesson
Machine learning shines when you have:

Massive datasets
Unclear problem structure
Complex pattern recognition needs

Our problem had:

Limited data (162 elite games)
Clear mathematical structure (constrained optimization)
Simple pattern (urgency-based decisions)

RBCR was elegant because it directly encoded the problem structure. The LSTM was trying to rediscover that structure through brute force pattern matching.
The Performance Comparison



































MethodRejectionsTraining TimeInterpretabilityRBCR7810 minutesHighLSTM Supervised9342 hoursLowPPO88948 hoursLowEnsemble85672 hoursMedium
The math won. Decisively.
What We Learned

Domain expertise beats data when you understand the problem structure
More compute doesn’t fix fundamental approach problems
Machine learning is a tool, not a silver bullet
Sometimes the “boring” solution is optimal

The ML detour wasn’t a complete waste. It forced us to deeply understand why RBCR worked so well. But it also taught us humility.
Me: “So we spent all day proving that our mathematical algorithm was actually pretty good?”
Claude: “You’re absolutely right! We spent all day proving that thinking hard about the problem structure matters more than throwing neural networks at it.”
GPT-5: “You also demonstrated that human-AI collaboration works best when each party contributes their strengths—humans for insight, AI for implementation.”
Ampcode: “And that sometimes the most sophisticated approach is knowing when not to be sophisticated.”
RBCR remained undefeated at 781 rejections.

# Part 8: What Really Happened Here
After one intense day of obsessive optimization, I needed to step back and understand what had actually occurred.
This wasn’t just about solving a nightclub simulation. This was about witnessing two phenomena colliding: viral growth mechanics meeting AI-assisted engineering.
From Listen’s Perspective: Growth That Got Out of Hand
What started as a simple puzzle became the largest distributed optimization contest in history.
Their infrastructure crashed repeatedly. But those crashes? They became part of the story. Social proof of viral success. Alfred tweeting “sorry fixing this.. too many users” was pure authenticity marketing.
They accidentally created the most engaging technical challenge of 2025. Zero paid acquisition. 1.1M organic impressions. A community of obsessives building sophisticated optimization engines.
Perfect fit too—Listen Labs does AI-powered customer insights, so attracting technical talent with algorithmic challenges makes total sense for their hiring pipeline.
The prize was Berghain guest list access. The real reward? The dopamine hit of shaving off single-digit rejections in a massive competitive field.
From Our Perspective: AI-Human Collaboration at Speed
This wasn’t traditional programming. This was a new kind of problem-solving in action.
Claude’s Superpowers
Let me be clear about who did the heavy lifting here: Claude wrote probably 95% of the code. I provided direction, but Claude was the implementation engine.
Instant Translation: I’d say “what if we use Lagrangian multipliers” and 30 seconds later there’s a fully functional dual variable solver.
Perfect Memory: Claude never forgot what we tried before. It could instantly reference our greedy approach from day one or the feasibility oracle parameters from day two.
Infinite Patience: When I asked Claude to implement the 23rd variant of Ultimate solver, there was no eye-rolling. Just “Here’s the implementation:”
Pattern Recognition: Claude spotted mathematical connections I missed. The link between RBCR and bid-price mechanisms in auction theory? That was Claude.
[Full solver collection: https://github.com/nibzard/berghain-challenge-bot/tree/main/berghain/solvers]
The Human Contribution
So what did I actually add to this collaboration?
Domain Intuition: “This feels like a resource allocation problem” or “We should panic more in the late game.”
Problem Reframing: When we hit walls, I’d step back and ask “What are we really trying to optimize here?”
Quality Control: I caught Claude’s occasional mathematical errors and suggested corrections.
Strategic Direction: Deciding when to explore new approaches vs. when to refine existing ones.
Context Switching: When Claude hit token limits, I’d bring in GPT-5 for code review or ampcode for strategic guidance.
The Beautiful Dance
The collaboration felt like a dance. I’d have an insight. Claude would implement it instantly. We’d test it immediately. Results would spark new ideas.
Traditional programming: Idea → Hours of coding → Testing → Maybe it works
AI-assisted programming: Idea → Seconds of coding → Testing → Rapid iteration
Me: “What if we track the acceptance rate and adjust thresholds dynamically?”
Claude: [30 seconds later] “Here’s the adaptive threshold implementation with exponential smoothing.”
This velocity was intoxicating. We could test hypotheses as fast as we could think of them.
The Token Economics
Interesting challenge: Claude would occasionally hit context limits mid-conversation. This is where having multiple AI agents became crucial.
Me: “Claude, you’re getting verbose. Can GPT-5 take a look at the RBCR implementation and suggest improvements?”
GPT-5: “The dual variable computation could use PI control instead of simple proportional. Here’s why…”
Claude: [Fresh context] “Implementing PI control for dual variables…”
This felt like managing a team of specialists, each with their own strengths and limitations.
What I Learned About AI Capabilities
Strengths:

Implementation speed is superhuman
Pattern matching across large codebases
Mathematical computation and optimization
Infinite patience for iteration
Perfect recall of previous attempts

Limitations:

Needs human guidance for problem framing
Can over-engineer when left unsupervised
Struggles with “good enough” vs. “perfect”
Limited intuition about real-world constraints
Context window limitations require management

The Compound Effect
Individually, neither human intuition nor AI implementation is sufficient for complex problems like this.
But together? The combination was greater than the sum of parts.
Human insight: “This is really about managing scarcity under uncertainty.”
AI implementation: Fully functional RBCR solver in minutes.
Human refinement: “The threshold feels too static.”
AI adaptation: Adaptive threshold with multiple parameters.
Human stopping condition: “781 is probably optimal for this approach.”
The Speed of Discovery
In traditional programming, this project would have taken weeks:

Day 1: Set up environment, implement basic greedy approach
Week 1: Statistical analysis and probabilistic solver
Week 2: Research dual variables and implement RBCR
Week 3: Parameter tuning and optimization
Week 4: ML experiments and failure analysis

With AI assistance, we compressed weeks into days. Not because the AI was smarter, but because the iteration cycle was faster.
The Meta-Learning
By the end, I wasn’t just learning about the Berghain Challenge. I was learning how to collaborate with AI systems effectively.
Good prompts: “Implement RBCR with periodic dual variable resolution”
Bad prompts: “Make it better”
Good delegation: Let Claude implement, human provides direction
Bad delegation: Human micromanages implementation details
Good exploration: Try fundamentally different approaches
Bad exploration: Endless parameter tuning
The Philosophical Shift
This experience changed how I think about programming and problem-solving.
Old paradigm: Human thinks, human implements, human tests
New paradigm: Human thinks, AI implements, both test and iterate
The bottleneck shifted from implementation speed to idea quality. When you can test any hypothesis in seconds, the limiting factor becomes generating good hypotheses.
The Humility Lesson
The ML failure was educational. Despite having superhuman implementation speed, we couldn’t beat a principled mathematical approach with brute force learning.
Domain expertise still matters. Understanding problem structure still matters. Sometimes the “boring” solution is optimal.
AI amplifies human capabilities, but it doesn’t replace human judgment about what problems are worth solving and how to approach them.
What This Means for Software Development
I think we just got a preview of the future of programming:
Humans: Problem formulation, strategic direction, quality control
AI: Implementation, optimization, pattern recognition
Together: Rapid prototyping and iteration at unprecedented speed
The result isn’t human replacement, but human amplification. We can explore the solution space much faster and more thoroughly.
But we still need to know where to look.

# Part 9: Technical Deep Dive - Why RBCR Dominates
Let’s get into the mathematical guts of why RBCR consistently outperformed 30+ other approaches.
The Economics Foundation
RBCR works because it directly models the economic structure of the problem. Each person has a value based on scarcity and urgency.
The dual variables λ_young and λ_dressed represent shadow prices—what economists call the marginal value of relaxing a constraint by one unit.
# The core insight: deficit / expected help rate
lambda_young = max(0, young_shortage) / (young_frequency * remaining_slots)
lambda_dressed = max(0, dressed_shortage) / (dressed_frequency * remaining_slots)

# Person value = sum of their contributions
value = lambda_young * person.young + lambda_dressed * person.well_dressed
[Full RBCR implementation: https://github.com/nibzard/berghain-challenge-bot/blob/main/berghain/solvers/rbcr_solver.py]
When young people become scarce, λ_young increases, making young people more valuable. When we have plenty, λ_young drops. The algorithm automatically balances supply and demand.
The Self-Correction Mechanism
Beautiful property: RBCR is self-correcting. If it accepts too many young people early, the young deficit shrinks, λ_young drops, and it becomes less likely to accept more young people.
This creates a natural equilibrium without explicit balancing logic.
Why Other Approaches Failed
Greedy Solvers: No global optimization. Accept anyone who helps immediately, leading to imbalanced allocations.
Static Threshold Methods: Fixed acceptance criteria don’t adapt to changing game state.
Ensemble Methods: Multiple competing signals create inconsistent decisions. The left hand doesn’t know what the right hand is doing.
ML Approaches: Trying to learn patterns that are better expressed mathematically. Using a neural network to approximate λ = deficit/rate is like using a sledgehammer to solve arithmetic.
The Resolution Frequency Sweet Spot
Why resolve every 50 arrivals instead of every decision?
# Too frequent: Computational waste, noise from variance
if resolve_every == 1: overhead_cost = high, signal_quality = noisy

# Too infrequent: Slow adaptation to changing conditions
if resolve_every == 500: adaptation_speed = slow, missed_opportunities = many

# Just right: Balance efficiency with responsiveness
if resolve_every == 50: overhead_cost = low, adaptation_speed = fast
50 arrivals gives enough data to estimate rates reliably while adapting quickly to changes.
The Adaptive Threshold Magic
Static thresholds don’t work because the game has phases:
Early Phase (0-40% capacity): Be selective. Plenty of time to find good candidates.
Mid Phase (40-80% capacity): Balanced. Accept reasonable matches.
Late Phase (80%+ capacity): Panic mode. Accept anything that helps.
def adaptive_threshold(capacity_ratio, rejection_ratio):
    base = 1.5 - capacity_ratio  # Start high, end low

    # Emergency mode if running out of rejections
    if rejection_ratio > 0.8:
        base *= 0.5

    return max(0.1, base)
This creates the right urgency curve automatically.
The Feasibility Oracle Paradox
We tried adding Monte Carlo feasibility checking. Why did it hurt performance?
The oracle was too conservative. It would reject borderline candidates because there was a 10% chance of failure down the road. But RBCR’s dual variables already encode future value properly.
Adding “what if” simulation on top of principled optimization was redundant and harmful.
The Statistical Foundation
RBCR implicitly assumes arrivals follow the known statistical distribution. This is a strong assumption, but it’s correct for the Berghain Challenge.
The dual variables are computing expected values:

E[young people in remaining arrivals] = young_frequency × remaining_slots
E[well_dressed people in remaining arrivals] = dressed_frequency × remaining_slots

When reality matches assumptions, RBCR excels. In environments with changing distributions, it would need adaptation.
Performance Consistency
RBCR’s biggest advantage isn’t just the 781 average—it’s the consistency.

































SolverBestWorstStd Dev95th PercentileRBCR76182318.4812Ultimate377989131.7847Statistical79896742.1889
RBCR’s tight distribution means reliable performance. Other solvers have higher variance—sometimes better, often much worse.
The Learning Component
RBCR includes meta-learning across games. It saves dual variable estimates and uses them as starting points for future games.
# Load previous dual estimates
self.duals = load_from_disk('rbcr_duals.json')

# Start with learned values instead of zero
self.lambda_young = self.duals.get('lambda_young', 0.0)
self.lambda_dressed = self.duals.get('lambda_dressed', 0.0)
This warm-start helps early-game decisions when we don’t have enough data yet.
Computational Efficiency
RBCR is also computationally cheap:

No Monte Carlo simulations
No neural network forward passes
Simple arithmetic: deficit ÷ expected rate
O(1) per decision after dual resolution

Fast enough to run in real-time, simple enough to debug and tune.
The Theoretical Optimum
Is 781 rejections optimal? Probably not. The theoretical minimum depends on the exact arrival sequence, which is random.
But RBCR is likely near the optimal policy for this class of problems. It’s implementing a principled approximation to the optimal stopping strategy from stochastic control theory.
Why This Matters Beyond Berghain
The principles behind RBCR apply to many resource allocation problems:

Ad auction bidding (Google, Facebook)
Inventory management (Amazon, Walmart)
Hospital bed allocation
Cloud resource scheduling
Financial portfolio rebalancing

Anywhere you have:

Limited capacity
Uncertain arrivals
Multiple competing objectives
Irreversible decisions

RBCR-style dual variable approaches often dominate.
The Elegant Simplicity
RBCR’s beauty isn’t in its complexity—it’s in its simplicity. 50 lines of math that capture the essence of a complex optimization problem.
No ensemble methods. No neural networks. No Monte Carlo simulations.
Just economics: when something is scarce, make it valuable. When it’s abundant, make it cheap.
The algorithm does exactly what a perfect economist would do, with perfect information about supply and demand.

# Part 10: Lessons for the Future of Coding
This project changed how I think about programming. Here are the key lessons for anyone working with AI coding assistants.
The New Development Cycle
Traditional: Think → Code → Test → Debug → Iterate
AI-Assisted: Think → Prompt → Test → Refine → Iterate
The time from idea to working code dropped from hours to seconds. This changes everything.
Old bottleneck: Implementation time
New bottleneck: Idea quality and problem understanding
When you can test any hypothesis instantly, the quality of your hypotheses becomes the limiting factor.
What Humans Should Focus On
Problem Framing: “This is really a resource allocation problem with uncertainty”
Domain Expertise: “Real bouncers would panic more in late game”
Strategic Direction: “Let’s try mathematical optimization before ML”
Quality Control: “This threshold feels too static”
Leave the implementation to AI. Focus on the thinking.
What AI Excels At
Instant Implementation: Mathematical concepts to working code in seconds
Perfect Memory: Never forgets what you tried before
Pattern Recognition: Spots connections you might miss
Infinite Patience: Will implement variant #23 without complaint
Rapid Iteration: Test-debug-refine cycles at superhuman speed
The Multi-Agent Orchestra
Don’t limit yourself to one AI. Different models have different strengths:
Claude: Best at complex implementation and mathematical reasoning
GPT-5: Excellent for code review and getting unstuck
Specialized agents: Good for specific strategic decisions
Managing this ensemble becomes part of the skill.
Common Pitfalls
Over-Engineering: AI makes it too easy to add complexity. Resist.
The Perfectionism Trap: Every small improvement feels possible. Know when to stop.
Context Management: AI systems have token limits. Learn to work within them.
Prompt Quality: Vague instructions lead to mediocre results. Be specific.
Testing Neglect: Fast implementation can lead to inadequate testing. Don’t skip verification.
The Collaboration Sweet Spot
Good division of labor:

Human: “Let’s use dual variables to model urgency”
AI: [Implements RBCR with proper mathematical formulation]
Human: “The threshold should adapt based on game phase”
AI: [Adds adaptive threshold with exponential decay]

Bad division of labor:

Human: “Make the algorithm better”
AI: [Adds random complexity that doesn’t help]

Be specific about what you want. AI is powerful but not psychic.
The Speed vs. Wisdom Tradeoff
AI enables incredibly fast iteration. This is powerful but dangerous.
You can now test 50 approaches in a day. But are they 50 good approaches?
Solution: Alternate between exploration and reflection. Sprint, then pause to understand what you learned.
Documentation Becomes Critical
With traditional coding, you remember what you built because you spent hours building it.
With AI coding, you can implement complex systems in minutes. But you might not fully understand them.
[Full project documentation: https://github.com/nibzard/berghain-challenge-bot]
Document your insights, not just your code. Future you will thank present you.
The Meta-Learning Effect
By the end of this project, I wasn’t just better at optimization problems. I was better at collaborating with AI systems.
Good prompts: Specific, contextual, action-oriented
Bad prompts: Vague, assuming too much context
Good feedback: “The threshold needs to be lower in late game”
Bad feedback: “This doesn’t feel right”
Learning to work with AI is a skill that improves with practice.
Implications for Software Teams
Individual Productivity: 10x improvement for complex algorithm development
Team Dynamics: Junior developers can implement senior-level solutions
Code Review: Becomes more important because humans didn’t write every line
Architecture: System design becomes more critical than implementation details
The Domain Expertise Advantage
The ML failure taught us something important: understanding your problem domain matters more than ever.
When anyone can implement any algorithm in seconds, the competitive advantage shifts to:

Understanding what problems are worth solving
Knowing which approaches are likely to work
Recognizing when you have enough vs. need more

Domain expertise becomes a superpower when combined with AI implementation speed.
What This Means for Learning
Don’t just learn syntax: Focus on algorithms, mathematics, system design
Learn problem patterns: Optimization, resource allocation, statistical inference
Understand tradeoffs: When to be complex vs. simple, fast vs. accurate
Study failures: Why approaches don’t work is as important as why they do
The fundamentals matter more, not less, in an AI-assisted world.
The Future Landscape
I think we’re heading toward a world where:
Coding becomes more like architecture: Designing systems rather than implementing details
AI handles the mechanical work: Converting specifications to working code
Humans focus on the creative work: Problem definition and solution strategy
Collaboration is the key skill: Managing human-AI teams effectively
This isn’t about AI replacing programmers. It’s about amplifying what good programmers already do: solve problems thoughtfully.
The Democratization Effect
AI coding assistants lower the barrier to implementing complex algorithms. A developer who understands dual variables conceptually can now implement RBCR without years of optimization theory study.
This is powerful for innovation. More people can experiment with sophisticated approaches.
But it also means that understanding problem structure becomes even more important. Anyone can implement; not everyone can architect.
Final Advice
Start simple: Even with AI, begin with basic approaches and build complexity gradually.
Stay curious: Use AI’s speed to explore more solution spaces, not just to implement faster.
Maintain understanding: Don’t let AI implementation outpace your conceptual grasp.
Embrace failure: Fast iteration makes failure cheaper. Fail quickly and learn faster.
Focus on problems, not code: The hardest part isn’t implementation anymore—it’s knowing what to build.
The future of programming isn’t human vs. AI. It’s human with AI, exploring solution spaces that neither could navigate alone.

# Part 11: What’s Next & How to Win
So you want to tackle your own impossible optimization problem with AI? Here’s what I learned.
Start Simple, Then Get Mathematical
Don’t jump straight to neural networks. Start with the dumbest possible approach. Get it working. Then ask: “What would the optimal solution look like mathematically?”
For constrained optimization, that usually means Lagrangian multipliers. For scheduling, it’s often dynamic programming. For graph problems, think shortest paths or maximum flows.
The pattern is always the same: naive approach → mathematical insight → implementation refinement.
Build Your Local Simulator
This was huge. The Berghain API had rate limits, downtime, and a 10-game parallel limit. Our local simulator removed all those constraints.
# Key insight: Perfect simulation beats imperfect reality
class BerghainSimulator:
    def __init__(self, scenario_config):
        self.constraints = scenario_config['constraints']
        self.attribute_frequencies = scenario_config['frequencies']
We generated thousands of games locally. Tested dozens of strategies. Found the edge cases. All without API limits.
Choose Your AI Partners Wisely
Claude was perfect for implementation. It understood the domain, wrote clean code, and never got impatient with iterations.
GPT-5 was better for code review and strategic thinking when we got stuck.
Ampcode helped with architectural decisions when Claude hit token limits.
Different models have different strengths. Use them strategically.
Embrace the Obsession
From 1,200 rejections to 781. That’s not optimization. That’s obsession.
But obsession drives discovery. Every 10-rejection improvement taught us something new about the problem space. The difference between “good enough” and “optimal” is where the insights live.
Document Everything
Keep logs of what works and what doesn’t. We had 162 elite games showing exactly which strategies succeeded. That data drove every major breakthrough.
Know When to Stop
ML felt like the “sophisticated” approach. But domain knowledge and mathematical intuition beat black-box learning every time.
The LSTM experiments taught us that sometimes the simple mathematical solution is actually the optimal one.
The Real Win: Speed of Iteration
Three days from problem discovery to 781-rejection solution. That’s not normal software development. That’s what happens when human intuition meets AI implementation speed.
The traditional cycle: Think → Code → Debug → Test → Deploy
The AI cycle: Think → Prompt → Test → Refine
We compressed months of development into days.
For Your Next Project
Pick something with clear success metrics. Optimization problems work great because you get immediate feedback.
Build incrementally. Each improvement teaches you about the problem space.
Use multiple AI models for their strengths. But remember: you’re the conductor. You decide the direction.
And when you find yourself checking results at 2 AM because you’re convinced you can get just 5 more rejections? You’ll know you’ve found the sweet spot of human-AI collaboration.
The future of coding isn’t about replacing developers. It’s about amplifying obsession with implementation speed.

# Part 12: The Growth Marketing Playbook
As a growth advisor who watched this unfold, I have to break down Listen’s accidental masterpiece. This wasn’t just viral marketing. This was systematic exploitation of technical community psychology.

Stage 1: Mystery (Billboard)

Cryptic puzzle creates curiosity gap
No explanation = maximum speculation
Technical enough to filter for target audience
Physical billboard adds authenticity (not just another digital campaign)

Stage 2: Community (Token Puzzle)

Solvable but non-trivial puzzle
Requires technical knowledge (OpenAI tokenizer)
Activates Reddit, Twitter, Discord communities
Community solving = network effects at scale

Stage 3: Challenge (Berghain Game)

Clear success metrics (rejection count)
Immediate feedback loop
Competitive leaderboard dynamics
Deep complexity beneath simple rules

Stage 4: Status (Optimization Competition)

Technical skill as status symbol
30,000 participants = massive validation
Github repos, blog posts, Twitter threads
Organic content creation at scale

The Viral Coefficients
Let’s break down the math:
Initial reach: Billboard + Reddit discovery ≈ 1,000 people
Community amplification: 1,000 × 30 (average shares/discussion participants) = 30,000
Retention rate: ~60% (technical challenges have high dropout but strong retention among engaged users)
Content multiplier: Each obsessive creates 3-5 pieces of content (Github repos, tweets, blog posts)
Total organic impressions: 1.1M
Cost per impression: ~$0.001 (just billboard cost)
Cost per engaged user: ~$1 (30,000 active participants)
Those are unicorn-level growth metrics.

Ego Investment: Complex problems = status signaling opportunity
Immediate Feedback: Algorithm performance = dopamine hits
Competitive Context: 30,000 participants = social proof
Deep Complexity: Simple rules with emergent mathematical beauty
Tool Building: Engineers love building sophisticated solutions
The Infrastructure Strategy (Accidental Genius)
Listen’s API crashes weren’t bugs—they were features:
Scarcity Psychology: “Can’t access it? Want it more”
Authenticity Signals: Real startups have real scaling problems
Community Building: Users helping each other, sharing solutions
Distributed Load: Community built local simulators (like we did)
Alfred’s real-time tweets about crashes created narrative tension. “Fixing servers, too many users” is the best social proof possible.
Lessons for Startups
Pick Your Audience Carefully: Technical communities are high-value, low-volume. Perfect for complex challenges.
Underestimate Scale Publicly: Alfred’s “expected 10 users, got 30,000” became part of the story. Authentic surprise > polished launch.
Infrastructure as Marketing: Your technical problems can become engagement opportunities if handled transparently.
Community > Users: Don’t optimize for user count. Optimize for obsession. Engaged obsessives > casual users at scale.
Prize-Market Fit: Berghain guest list for Berlin tech crowd = perfect audience targeting.
The Economics
Traditional SaaS Customer Acquisition:
$100-$500 CAC for technical audiences
3-6 month sales cycles
Low viral coefficients (1.1-1.3x)
Listen’s Approach:
$1 cost per engaged user
Instant community building
3000x viral coefficient
Self-selecting for technical sophistication
ROI: Immeasurable. They got thousands of technical users to voluntarily stress-test their product concept, generate content, and build community around their brand.
The Replication Framework
Want to try this? Here’s the playbook:

Find a hard technical problem your target audience cares about
Wrap it in mystery (puzzles work, but so do challenges)
Make it solvable but non-trivial (high dropout, high engagement)
Add competitive elements (leaderboards, status, bragging rights)
Let infrastructure struggle visibly (authenticity > perfection)
Document the journey (real-time tweets, community updates)

What Listen Accidentally Discovered
They found the perfect intersection of:

Growth marketing (viral mechanics)
Product development (crowd-sourced optimization)
Community building (shared obsession)
Content creation (user-generated solutions)

They turned customer acquisition into a technical arms race. Users didn’t just sign up—they built sophisticated solutions and shared them publicly.
The Meta-Lesson
The best growth hacks don’t feel like marketing. They feel like genuine problems worth solving.
Listen created a challenge so engaging that users built entire optimization frameworks just to participate. We weren’t customers. We were collaborators.
That’s not just viral growth. That’s community-driven product development at scale.

# Conclusion
The Berghain Challenge started with a billboard and ended with two discoveries that changed everything.
Discovery 1: Listen accidentally created the most brilliant growth hack of 2025. A 3000x viral coefficient. 1.1M organic impressions. Zero paid acquisition. They turned customer acquisition into a technical arms race where users built sophisticated solutions and shared them publicly.
Discovery 2: Our 781-rejection algorithm that dominated a massive competitive field. But the real breakthrough wasn’t RBCR or dual variables or Monte Carlo simulations. It was the collaboration pattern that emerges when human intuition meets AI implementation speed.
The Growth + Engineering Synthesis
As a growth advisor with engineering fundamentals, I saw both stories unfold:
Listen created viral mechanics by exploiting technical community psychology. Mystery → Community → Challenge → Status. Each phase filtered for higher engagement, building a community of obsessives.
We solved the challenge through AI-human collaboration. I provided mathematical insights. Claude implemented them flawlessly. GPT-5 caught edge cases. Together, we explored solution spaces that none of us could navigate alone.
Two Futures Colliding
This is what happens when growth marketing meets AI-assisted engineering:
Growth creates challenges. Viral mechanisms need engaging problems.
Engineering solves challenges. AI collaboration makes solution iteration lightning-fast.
Solutions create content. Sophisticated approaches become community assets.
Content drives growth. Technical solutions as social proof.
It’s a positive feedback loop. Marketing creates problems worth solving. AI helps solve them faster than ever. Solutions become marketing content.
The Meta-Lesson
The future isn’t just about AI replacing programmers or startups doing viral marketing.
It’s about communities formed around hard problems, solved collaboratively by humans and AI, creating value for everyone: the startup gets users, the engineers get dopamine hits, and the community gets shared knowledge.
Listen wanted attention. They got a technical revolution.
We wanted to solve a puzzle. We discovered new ways to collaborate with AI.
The community wanted to compete. They created a distributed optimization laboratory.
Everyone won.
What’s Next
The Berghain Challenge was just the beginning. The real challenge is learning how to dance—with AI, with communities, with hard problems that matter.
Want to see the technical solution? Check out the complete implementation at github.com/nibzard/berghain-challenge-bot.
Want to see the growth mechanics? Start with cryptic puzzles that technical communities can’t resist.
Time to find your own intersection of viral growth and AI-powered problem-solving.
# The Reality Check
But here’s the sobering truth: despite all the mathematical sophistication, all the optimization theory, all the vibes I poured into RBCR, the current best score on the leaderboard is 716 rejections. That’s still a massive gap from our 781.
This leaves me with a humbling realization. Vibes and intuition can get you surprisingly far—further than I expected when we started this journey. The human-AI collaboration, the mathematical frameworks, the elegant dual variables—they all contributed to a genuinely competitive solution.
But at some point, you’re on your own. The gap between 781 and 716 represents the difference between “impressive engineering” and “world-class optimization.” It’s the reminder that in competitive arenas with thousands of brilliant minds, good enough rarely wins.
Still, I regret nothing. The journey taught us about optimization, about collaboration, about the limits and possibilities of human-AI partnership. And maybe, just maybe, someone reading this will find that final insight we missed and claim that Berlin trip.
PS: And the kicker? Claude wrote this entire article too. I just provided the direction and feedback. The AI that helped me solve the Berghain Challenge also helped me tell you about it.
Meta-collaboration all the way down.  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[DuckDuckGo founder: AI surveillance should be banned]]></title>
            <link>https://gabrielweinberg.com/p/ai-surveillance-should-be-banned</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45149281</guid>
            <description><![CDATA[All the same privacy harms with online tracking are also present with AI, but worse.]]></description>
            <content:encoded><![CDATA[Original cartoon by Dominique Lizaambard (left), updated for AI, by AI (right).All the same privacy harms with online tracking are also present with AI, but worse.While chatbot conversations resemble longer search queries, chatbot privacy harms have the potential to be significantly worse because the inference potential is dramatically greater. Longer input invites more personal information to be provided, and people are starting to bare their souls to chatbots. The conversational format can make it feel like you’re talking to a friend, a professional, or even a therapist. While search queries reveal interests and personal problems, AI conversations take their specificity to another level and, in addition, reveal thought processes and communication styles, creating a much more comprehensive profile of your personality. This richer personal information can be more thoroughly exploited for manipulation, both commercially and ideologically, for example, through behavioral chatbot advertising and models designed (or themselves manipulated through SEO or hidden system prompts) to nudge you towards a political position or product. Chatbots have already been found to be more persuasive than humans and have caused people to go into delusional spirals as a result. I suspect we’re just scratching the surface, since they can become significantly more attuned to your particular persuasive triggers through chatbot memory features, where they train and fine-tune based on your past conversations, making the influence much more subtle. Instead of an annoying and obvious ad following you around everywhere, you can have a seemingly convincing argument, tailored to your personal style, with an improperly sourced “fact” that you’re unlikely to fact-check or a subtle product recommendation you’re likely to heed. That is, all the privacy debates surrounding Google search results from the past two decades apply one-for-one to AI chats, but to an even greater degree. That’s why we (at DuckDuckGo) started offering Duck.ai for protected chatbot conversations and optional, anonymous AI-assisted answers in our private search engine. In doing so, we’re demonstrating that privacy-respecting AI services are feasible. But unfortunately, such protected chats are not yet standard practice, and privacy mishaps are mounting quickly. Grok leaked hundreds of thousands of chatbot conversations that users thought were private. Perplexity’s AI agent was shown to be vulnerable to hackers who could slurp up your personal information. Open AI is openly talking about their vision for a “super assistant” that tracks everything you do and say (including offline). And Anthropic is going to start training on your chatbot conversations by default (previously the default was off). I collected these from just the past few weeks!It would therefore be ideal if Congress could act quickly to ensure that protected chats become the rule rather than the exception. And yet, I’m not holding my breath because it’s 2025 and the U.S. still doesn’t have a general online privacy law, let alone privacy enshrined in the Constitution as a fundamental right, as it should be. However, there does appear to be an opening right now for AI-specific federal legislation, despite the misguided attempts to ban state AI legislation.Time is running out because every day that passes further entrenches bad privacy practices. Congress must move before history completely repeats itself and everything that happened with online tracking happens again with AI tracking. AI surveillance should be banned while there is still time. No matter what happens, though, we will still be here, offering protected services, including optional AI services, to consumers who want to reap the productivity benefits of online tools without the privacy harms. Share]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[996]]></title>
            <link>https://lucumr.pocoo.org/2025/9/4/996/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45149049</guid>
            <description><![CDATA[There is cost to your lifestyle.]]></description>
            <content:encoded><![CDATA[
        
  

  
  written on September 04, 2025
  

  
“Amazing salary, hackerhouse in SF, crazy equity.
996. Our mission is
OSS.” — Gregor Zunic
“The current vibe is no drinking, no drugs, 9-9-6, […].” — Daksh
Gupta
“The truth is, China’s really doing ‘007’ now—midnight to midnight, seven
days a week […] if you want to build a $10 billion company, you have to work
seven days a week.” — Harry Stebbings

I love work.  I love working late nights, hacking on things.  This week I
didn’t go to sleep before midnight once.  And yet…
I also love my wife and kids. I love long walks, contemplating life over good
coffee, and deep, meaningful conversations.  None of this would be possible if
my life was defined by 12 hour days, six days a week.  More importantly, a
successful company is not a sprint, it’s a marathon.
And this is when this is your own company!  When you devote 72 hours a week to
someone else’s startup, you need to really think about that arrangement a few
times.  I find it highly irresponsible for a founder to promote that model.  As
a founder, you are not an employee, and your risks and leverage are
fundamentally different.
I will always advocate for putting the time
in because it is what brought me happiness.
Intensity, and giving a shit about what I’m doing, will always matter to me.
But you don’t measure that by the energy you put in, or the hours you’re
sitting in the office, but the output you produce.  Burning out on twelve-hour
days, six days a week, has no prize at the end.  It’s unsustainable, it
shouldn’t be the standard and it sure as hell should not be seen as a positive
sign of a company.
I’ve pulled many all-nighters, and I’ve enjoyed them.  I still do.  But they’re
enjoyable in the right context, for the right reasons, and when that is a
completely personal choice, not the basis of company culture.
And that all-nighter?  It comes with a fucked up and unproductive morning the
day after.
When someone promotes a 996 work culture, we should push back.


  
  This entry was tagged
    
      thoughts
  

  
    copy as / view markdown
  
  
  

      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[We Hacked Burger King: How Auth Bypass Led to Drive-Thru Audio Surveillance]]></title>
            <link>https://bobdahacker.com/blog/rbi-hacked-drive-thrus/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45148944</guid>
            <description><![CDATA[Critical authentication bypass vulnerabilities in Restaurant Brands International's assistant platform allowed complete control over 30,000+ Burger King, Tim Hortons, and Popeyes locations worldwide - including access to customer drive-thru audio recordings.]]></description>
            <content:encoded><![CDATA[
            
                The Setup
Picture this: Restaurant Brands International (RBI) – the corporate overlords behind Burger King, Tim Hortons, and Popeyes – control over 30,000 locations worldwide. That's a lot of chicken sandwiches, maple syrup, and flame-broiled beef.
What they also control is something called the "assistant" platform – the digital brain behind every drive-thru screen, bathroom tablet review, and the slightly-too-cheerful burger king employee asking if you want to make it a combo.
Spoiler alert: Their security was about as solid as a paper Whopper wrapper in the rain.
We stumbled upon vulnerabilities so catastrophic that we could access every single store in their global empire. From a Burger King in Times Square to that lonely Tim Hortons where Bugs Bunny shoulda taken a left turn at Albuquerque. Oh, and did we mention we could listen to your actual drive-thru conversations? Yeah, that happened too.
The platforms were spread across three domains, each with the same delicious vulnerabilities:

https://assistant.bk.com
https://assistant.popeyes.com  
https://assistant.timhortons.com

Buckle up, this is going to be a wild ride. 🍔
The Vulnerabilities
The "Anyone Can Join This Party" Signup API
Our journey began innocently enough. We tried logging in with fake credentials and discovered they were using AWS Cognito. The good news? The system worked exactly as designed. The bad news? They forgot to disable user signups. Oops.
After a quick email verification dance with AWS's ConfirmSignup method, we were in. But wait, there's more!
Using GraphQL introspection (because who doesn't love a good schema leak), we found an even easier signup endpoint that completely bypassed email verification. It was like finding a secret menu item, except this one came with user privileges.
mutation SignUp {
  signUp(input: { email: "[email protected]", password: "password123" })
}

The cherry on top? They emailed us the password in plain text. In 2025. We're not even mad, just impressed by the commitment to terrible security practices.
When your password security is more outdated than the ice cream machine

"Gotta Catch 'Em All" - The Global Store Directory
Once authenticated, we hit the jackpot: a single GraphQL endpoint that returned a store in their global empire. (the store ids were incrementing) Not just the store name, but the good stuff – store employees personal information, internal IDs, configuration details.

But wait, there's more! We also found a GraphQL query to search users who have access to assistant by name, revealing personal info faster than you can say "would you like fries with that data breach?"

The "No Authentication, No Problem" Token Generator
Here's where things got spicy. We discovered a GraphQL mutation called createToken that was about as secure as leaving your house key under a welcome mat labeled "HOUSE KEY HERE."
This beautiful piece of mutation accepted a storeId parameter and required absolutely zero authentication. None. Nada. Zilch.
mutation CreateToken {
  createToken(input: { storeId: "1" })
}

Authentication is optional, apparently
This token wasn't just a key to one store – it was the master key to the entire kingdom. With it, we could promote ourselves to admin status across the entire platform:
mutation BecomeTheKing {
  updateUser(input: { id: "definitely-us", roles: "admin" }) {
    roles  # Spoiler: it's "admin" now
  }
}

Look at us. We're the captain now.
The Drive-Thru Equipment Store (A Detour Into Absurdity)
While exploring, we stumbled upon RBI's equipment ordering website. The password protection? Client-side only. The password? Hardcoded in da HTML. 
Security through obscurity, but the obscurity is in plain sight
Here you could order drive-thru essentials like "Single Lane Kits" (tablets included!) or just grab a tablet for those bathroom feedback screens because apparently everything needs to be digital now.
Your complete drive-thru starter pack, no security included

Welcome to the Drive-Thru Control Room
The tokens unlocked access to the actual tablet interfaces used in stores. The tablet is primarly composed of what seems to be a web app.
Main Screen (https://assistant.bk.com/screens/main?authToken=yourNewBestFriend)

Lists previous conversations (spoiler: you can listen to them)
Shows the "tone" employees should focus on


Diagnostic Screen (https://assistant.bk.com/screens/diagnostic?authToken=stillYourBestFriend)This one had an additional password protection. The password? "admin". Client-side, of course.
Advanced password security, circa 1995
When your password security is more predictable than McDonald's ice cream machines being broken
Once inside, we found APIs to control drive-thru audio levels. Want to blast customers' eardrums or make them whisper their order? We got you covered:

Any store token could also list any store's drive-thru config, because apparently access control is just a suggestion.

Notice something? Well it returns a JWT that can be used to call an API to return a signed AWS upload url, for any store's path, which is bad. Very bad. 
First it was kind enough to reveal the missing values:

Then it returned with the signed upload URL for "amongus.mp4":


The Drive-Thru Surveillance State
Now for the truly mind-blowing part: We could access actual voice recordings of customer orders. Which god knows how long they store those for.
Not just transcripts. Not just metadata. Raw audio files of real people ordering food, complete with background conversations, car radios, and sometimes personally identifiable information.

Big Brother is watching, and he wants to know if you'd like to supersize that
This audio goldmine was being fed into AI systems to analyze:

Customer sentiment 
Employee friendliness levels
Upsell success rates
Order processing times
How many times employees said "You rule" (because that's definitely a crucial business metric)

AI-powered friendliness monitoring: dystopian but thorough
Your drive-thru performance review, brought to you by artificial intelligence
The Bathroom Chronicles
We found the code for the bathroom rating screen for the tablet was in the assistant panel as well, For example, the bathroom rating screen is located at:
https://assistant.bk.com/feedback/storeid/
Which we assume the tablet loads in a webapp with its storeId
Rating bathroom experiences: because everything needs a digital feedback loop
The cherry on this porcelain throne? The API that gets called for the feedback sends zero authentication. That's right – you could spam bathroom reviews for every Burger King location without even proving you've ever been within a mile of their restrooms.
Want to give a 5-star review to a bathroom in Tokyo while sitting in your pajamas in Ohio? The system says "why not!" 🚽

The Full Damage Report'
With our newfound admin powers, we could:

Add/remove/manage stores (Want to open a Burger King on the Moon? Now you can!)  
View/edit employee accounts (Everyone gets a promotion!)  
Send notifications to any store ids tablet
Access store analytics and sales data (Numbers, so many numbers)  
Upload files to any store's systems (Via convenient JWT-signed AWS URLs)  
AND More


Privacy Violations of Epic Proportions

Access to thousands, possibly hundreds of thousands of voice recordings containing PII, if you visited a burger king and went thru the drive thru, your voice is probably in the aws bucket, and analyzed by AI.
GDPR lawyers worldwide suddenly perking up
We now know about your embarrassing order of 47 chicken nuggets at 2 AM


Timeline: The Speed Run



When
What Happened



Day 1
"Hey, let's see how this drive-thru system works"


Day 1, 2 hours later
"Oh no... OH NO... OH NO"


Day 1, 3 hours later
"We can hear people ordering food. This is not good."


Day 1, same day
RBI fixes everything faster than you can say "code red"


Credit where it's due – RBI's response time was impressive. However they never commented on the vulnerabilities or answered us. (I guess our report was too hot to handle.)

The Fine Print
No customer data was retained during this research. No drive-thru orders were harmed in the making of this blog post. Responsible disclosure protocols were followed throughout. We still think the Whopper is pretty good, but Wendys is better
So Long, and Thanks for All the Fish

  
  
    🤝
    
  
  
  Official Hacker Collab
  
  
    This blog is a proud and official @BobDaHacker & @BobTheShoplifter collab.
  
  
  Check out the other Bob here:
  
  
    
  
    
    
  



            
        ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Qwen3 30B A3B Hits 13 token/s on 4xRaspberry Pi 5]]></title>
            <link>https://github.com/b4rtaz/distributed-llama/discussions/255</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45148237</guid>
            <description><![CDATA[qwen3_30b.mov Setup [🔀 TP-Link LS1008G Switch] | | | | | | | |_______ 🔸 raspberrypi2 (ROOT) 10.0.0.2 | | |_________ 🔹 raspberrypi1 (WORKER 1) 10.0.0.1 | |___________ 🔹 raspberrypi3 (WORKER 2) 10.0....]]></description>
            <content:encoded><![CDATA[
      



    
      Skip to content

      
    




  
  
  






      

          

              





  Navigation Menu

  

  
          
            
                
      

      
        
            

                  
                      
  
      
      
        
          GitHub Copilot

        

        Write better code with AI
      

    


                      
  
      
      
        
          GitHub Spark

            
              New
            
        

        Build and deploy intelligent apps
      

    


                      
  
      
      
        
          GitHub Models

            
              New
            
        

        Manage and compare prompts
      

    


                      
  
      
      
        
          GitHub Advanced Security

        

        Find and fix vulnerabilities
      

    


                      
  
      
      
        
          Actions

        

        Automate any workflow
      

    


                  
                
            

                  
                      
  
      
      
        
          Codespaces

        

        Instant dev environments
      

    


                      
  
      
      
        
          Issues

        

        Plan and track work
      

    


                      
  
      
      
        
          Code Review

        

        Manage code changes
      

    


                      
  
      
      
        
          Discussions

        

        Collaborate outside of code
      

    


                      
  
      
      
        
          Code Search

        

        Find more, search less
      

    


                  
                
            
        

          
            
              View all features
              
          
      



                
      

      



                
      

      

                      Explore
                      
  
      Learning Pathways

    


                      
  
      Events & Webinars

    


                      
  
      Ebooks & Whitepapers

    


                      
  
      Customer Stories

    


                      
  
      Partners

    


                      
  
      Executive Insights

    


                  
                



                
      

      
                

                  
                      
  
      
      
        
          GitHub Sponsors

        

        Fund open source developers
      

    


                  
                
                

                  
                      
  
      
      
        
          The ReadME Project

        

        GitHub community articles
      

    


                  
                
                
            



                
      

      

                  
                      
  
      
      
        
          Enterprise platform

        

        AI-powered developer platform
      

    


                  
                



                
    Pricing


            
          

        
                



  
  
  
    

  
    
    
      
        Provide feedback
      
        
    
    
  
      
        
      
      


    
    

  
    
    
      
        Saved searches
      
        Use saved searches to filter your results more quickly
    
    
  
      
        
      
      

    
  



            

              
                Sign up
              
    
      Appearance settings

      
    
  

          
      


      
    

  








    


    






  
    
      
  




    

      






  
  

      
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    168

  

  
        
            
          Star
          2.4k

  



        

        


          

  
    


  

  




    

        
  


            
    
      
    
  
        
  
    
    qwen3_30b.mov
    
  

  

  


Setup
[🔀 TP-Link LS1008G Switch]
      | | | |
      | | | |_______ 🔸 raspberrypi2 (ROOT)     10.0.0.2
      | | |_________ 🔹 raspberrypi1 (WORKER 1) 10.0.0.1
      | |___________ 🔹 raspberrypi3 (WORKER 2) 10.0.0.3
      |_____________ 🔹 raspberrypi4 (WORKER 3) 10.0.0.4

Device: 4 x Raspberry Pi 5 8GB
Distributed Llama version: 0.16.0
Model: qwen3_30b_a3b_q40
Benchmark




Evaluation
Prediction




4 x Raspberry Pi 5 8GB
14.33 tok/s
13.04 tok/s



b4rtaz@raspberrypi2:~/distributed-llama $ ./dllama inference --prompt "<|im_start|>user
Please explain me where is Poland as I have 1 year<|im_end|>
<|im_start|>assistant
" --steps 128 --model models/qwen3_30b_a3b_q40/dllama_model_qwen3_30b_a3b_q40.m --tokenizer models/qwen3_30b_a3b_q40/dllama_tokenizer_qwen3_30b_a3b_q40.t --buffer-float-type q80 --nthreads 4 --max-seq-len 4096 --workers 10.0.0.1:9999 10.0.0.3:9999 10.0.0.4:9999
📄 AddBos: 0
📄 BosId: 151643 (<|endoftext|>)
📄 EosId: 151645 (<|im_end|>) 
📄 RegularVocabSize: 151643
📄 SpecialVocabSize: 26
Tokenizer vocab size (151669) does not match the model vocab size (151936)
💡 Arch: Qwen3 MoE
💡 HiddenAct: Silu
💡 Dim: 2048
💡 HeadDim: 128
💡 QDim: 4096
💡 KvDim: 512
💡 HiddenDim: 6144
💡 VocabSize: 151936
💡 nLayers: 48
💡 nHeads: 32
💡 nKvHeads: 4
💡 OrigSeqLen: 262144
💡 nExperts: 128
💡 nActiveExperts: 8
💡 MoeHiddenDim: 768
💡 SeqLen: 4096
💡 NormEpsilon: 0.000001
💡 RopeType: Falcon
💡 RopeTheta: 10000000
📀 RequiredMemory: 5513 MB
⭕ Socket[0]: connecting to 10.0.0.1:9999 worker
⭕ Socket[0]: connected
⭕ Socket[1]: connecting to 10.0.0.3:9999 worker
⭕ Socket[1]: connected
⭕ Socket[2]: connecting to 10.0.0.4:9999 worker
⭕ Socket[2]: connected
⭕ Network is initialized
🧠 CPU: neon dotprod fp16
💿 Loading weights...
💿 Weights loaded
🚁 Network is in non-blocking mode
<|im_start|>user
Please explain me where is Poland as I have 1 year<|im_end|>
<|im_start|>assistant

🔷️ Eval  996 ms Sync  330 ms | Sent 12084 kB Recv 20085 kB | (19 tokens)
🔶 Pred   49 ms Sync   37 ms | Sent   636 kB Recv  1057 kB | Of
🔶 Pred   50 ms Sync   94 ms | Sent   636 kB Recv  1057 kB |  course
🔶 Pred   60 ms Sync   37 ms | Sent   636 kB Recv  1057 kB | !
🔶 Pred   60 ms Sync   18 ms | Sent   636 kB Recv  1057 kB |  Let
🔶 Pred   59 ms Sync   18 ms | Sent   636 kB Recv  1057 kB |  me
🔶 Pred   49 ms Sync   27 ms | Sent   636 kB Recv  1057 kB |  explain
🔶 Pred   49 ms Sync   18 ms | Sent   636 kB Recv  1057 kB |  where
🔶 Pred   49 ms Sync   18 ms | Sent   636 kB Recv  1057 kB |  Poland
🔶 Pred   49 ms Sync   18 ms | Sent   636 kB Recv  1057 kB |  is
🔶 Pred   49 ms Sync   18 ms | Sent   636 kB Recv  1057 kB | ,
🔶 Pred   53 ms Sync   18 ms | Sent   636 kB Recv  1057 kB |  in
...
🔶 Pred   70 ms Sync   15 ms | Sent   636 kB Recv  1057 kB | zech
🔶 Pred   53 ms Sync   24 ms | Sent   636 kB Recv  1057 kB |  Republic
🔶 Pred   69 ms Sync   14 ms | Sent   636 kB Recv  1057 kB | **
🔶 Pred   59 ms Sync   16 ms | Sent   636 kB Recv  1057 kB |  –
🔶 Pred   55 ms Sync   20 ms | Sent   636 kB Recv  1057 kB |  to
🔶 Pred   64 ms Sync   16 ms | Sent   636 kB Recv  1057 kB |  the
🔶 Pred   53 ms Sync   36 ms | Sent   636 kB Recv  1057 kB |  south
🔶 Pred   62 ms Sync   18 ms | Sent   636 kB Recv  1057 kB |   

🔶 Pred   61 ms Sync   16 ms | Sent   636 kB Recv  1057 kB | 3

Evaluation
   nBatches: 32
    nTokens: 19
   tokens/s: 14.33 (69.80 ms/tok)
Prediction
    nTokens: 109
   tokens/s: 13.04 (76.69 ms/tok)
⭕ Network is closed

    
    


          

        

         







  

  

  

  

  

  

  

  


    




    
  

          



    



  

    

    

    





    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A Software Development Methodology for Disciplined LLM Collaboration]]></title>
            <link>https://github.com/Varietyz/Disciplined-AI-Software-Development</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45148180</guid>
            <description><![CDATA[This methodology provides a structured approach for collaborating with AI systems on software development projects. It addresses common issues like code bloat, architectural drift, and context dilu...]]></description>
            <content:encoded><![CDATA[

Disciplined AI Software Development - Collaborative
A structured approach for working with AI on development projects. This methodology addresses common issues like code bloat, architectural drift, and context dilution through systematic constraints.
The Context Problem
AI systems work on Question → Answer patterns. When you ask for broad, multi-faceted implementations, you typically get:

Functions that work but lack structure
Repeated code across components
Architectural inconsistency over sessions
Context dilution causing output drift
More debugging time than planning time

How This Works
The methodology uses four stages with systematic constraints and validation checkpoints. Each stage builds on empirical data rather than assumptions.
Planning saves debugging time. Planning thoroughly upfront typically prevents days of fixing architectural issues later.
The Four Stages
Stage 1: AI Configuration
Set up your AI model's custom instructions using AI-PREFERENCES.md. This establishes behavioral constraints and uncertainty flagging with ⚠️ indicators when the AI lacks certainty.
Stage 2: Collaborative Planning
Share METHODOLOGY.md with the AI to structure your project plan. Work together to:

Define scope and completion criteria
Identify components and dependencies
Structure phases based on logical progression
Generate systematic tasks with measurable checkpoints

Output: A development plan following dependency chains with modular boundaries.
Stage 3: Systematic Implementation
Work phase by phase, section by section. Each request follows: "Can you implement [specific component]?" with focused objectives.
File size stays ≤150 lines. This constraint provides:

Smaller context windows for processing
Focused implementation over multi-function attempts
Easier sharing and debugging

Implementation flow:
Request specific component → AI processes → Validate → Benchmark → Continue

Stage 4: Data-Driven Iteration
The benchmarking suite (built first) provides performance data throughout development. Feed this data back to the AI for optimization decisions based on measurements rather than guesswork.
Why This Approach Works
Decision Processing: AI handles "Can you do A?" more reliably than "Can you do A, B, C, D, E, F, G, H?"
Context Management: Small files and bounded problems prevent the AI from juggling multiple concerns simultaneously.
Empirical Validation: Performance data replaces subjective assessment. Decisions come from measurable outcomes.
Systematic Constraints: Architectural checkpoints, file size limits, and dependency gates force consistent behavior.
Example Projects


Discord Bot Template - Production-ready bot foundation with plugin architecture, security, API management, and comprehensive testing. 46 files, all under 150 lines, with benchmarking suite and automated compliance checking. (View Project Structure)


PhiCode Runtime - Programming language runtime engine with transpilation, caching, security validation, and Rust acceleration. Complex system maintaining architectural discipline across 70+ modules. (View Project Structure)


PhiPipe - CI/CD regression detection system with statistical analysis, GitHub integration, and concurrent processing. Go-based service handling performance baselines and automated regression alerts. (View Project Structure)


You can compare the methodology principles to the codebase structure to see how the approach translates to working code.
Implementation Steps
Setup

Configure AI with AI-PREFERENCES.md as custom instructions
Share METHODOLOGY.md for planning session
Collaborate on project structure and phases
Generate systematic development plan

Execution

Build Phase 0 benchmarking infrastructure first
Work through phases sequentially
Implement one component per interaction
Run benchmarks and share results with AI
Validate architectural compliance continuously

Quality Assurance

Performance regression detection
Architectural principle validation
Code duplication auditing
File size compliance checking
Dependency boundary verification

Project State Extraction
Use the included project extraction tool systematically to generate structured snapshots of your codebase:
python scripts/project_extract.py
Configuration Options:

SEPARATE_FILES = False: Single THE_PROJECT.md file (recommended for small codebases)
SEPARATE_FILES = True: Multiple files per directory (recommended for large codebases and focused folder work)
INCLUDE_PATHS: Directories and files to analyze
EXCLUDE_PATTERNS: Skip cache directories, build artifacts, and generated files

Output:

Complete file contents with syntax highlighting
File line counts with architectural warnings (⚠️ for 140-150 lines, ‼️ for >150 lines on code files)
Tree structure visualization
Ready-to-share

output examples can be found here
Use the tool to share a complete or partial project state with the AI system, track architectural compliance, and create focused development context.
What to Expect
AI Behavior: The methodology reduces architectural drift and context degradation compared to unstructured approaches. AI still needs occasional reminders about principles - this is normal.
Development Flow: Systematic planning tends to reduce debugging cycles. Focused implementation helps minimize feature bloat. Performance data supports optimization decisions.
Code Quality: Architectural consistency across components, measurable performance characteristics, maintainable structure as projects scale.

Frequently Asked Questions
Origin & Development

What problem led you to create this methodology?

I kept having to restate my preferences and architectural requirements to AI systems. It didn't matter which language or project I was working on - the AI would consistently produce either bloated monolithic code or underdeveloped implementations with issues throughout.
This led me to examine the meta-principles driving code quality and software architecture. I questioned whether pattern matching in AI models might be more effective when focused on underlying software principles rather than surface-level syntax. Since pattern matching is logic-driven and machines fundamentally operate on simple question-answer pairs, I realized that functions with multiple simultaneous questions were overwhelming the system.
The breakthrough came from understanding that everything ultimately transpiles to binary - a series of "can you do this? → yes/no" decisions. This insight shaped my approach: instead of issuing commands, ask focused questions in proper context. Rather than mentally managing complex setups alone, collaborate with AI to devise systematic plans.



How did you discover these specific constraints work?

Through extensive trial and error. AI systems will always tend to drift even under constraints, but they're significantly more accurate with structured boundaries than without them. You occasionally need to remind the AI of its role to prevent deviation - like managing a well-intentioned toddler that knows the rules but sometimes pushes boundaries trying to satisfy you.
These tools are far from perfect, but they're effective instruments for software development when properly constrained.



What failures or frustrations shaped this approach?

Maintenance hell was the primary driver. I grew tired of responses filled with excessive praise: "You have found the solution!", "You have redefined the laws of physics with your paradigm-shifting script!" This verbose fluff wastes time, tokens, and patience without contributing to productive development.
Instead of venting frustration on social media about AI being "just a dumb tool," I decided to find methods that actually work. My approach may not help everyone, but I hope it benefits those who share similar AI development frustrations.


Personal Practice

How consistently do you follow your own methodology?

Since creating the documentation, I haven't deviated. Whenever I see the model producing more lines than my methodology restricts, I immediately interrupt generation with a flag: "‼️ ARCHITECTURAL VIOLATION, ADHERE TO PRINCIPLES ‼️" I then provide the method instructions again, depending on how context is stored and which model I'm using.



What happens when you deviate from it?

I become genuinely uncomfortable. Once I see things starting to degrade or become tangled, I compulsively need to organize and optimize. Deviation simply isn't an option anymore.



Which principles do you find hardest to maintain?

Not cursing at the AI when it drifts during complex algorithms! But seriously, it's a machine - it's not perfect, and neither are we.


AI Development Journey

When did you start using AI for programming?

In August 2024, I created a RuneLite theme pack, but one of the plugin overlays didn't match my custom layout. I opened a GitHub issue (creating my first GitHub account to do so) requesting a customization option. The response was: "It's not a priority - if you want it, build it yourself."
I used ChatGPT to guide me through forking RuneLite and creating a plugin. This experience sparked intense interest in underlying software principles rather than just syntax.



How has your approach evolved over time?

I view development like a book: syntax is the cover, logic is the content itself. Rather than learning syntax structures, I focused on core meta-principles - how software interacts, how logic flows, different algorithm types. I quickly realized everything reduces to the same foundation: question and answer sequences.
Large code structures are essentially chaotic meetings - one coordinator fielding questions and answers from multiple sources, trying to provide correct responses without mix-ups or misinterpretation. If this applies to human communication, it must apply to software principles.



What were your biggest mistakes with AI collaboration?

Expecting it to intuitively understand my requirements, provide perfect fixes, be completely honest, and act like a true expert. This was all elaborate roleplay that produced poor code. While fine for single-purpose scripts, it failed completely for scalable codebases.
I learned not to feed requirements and hope for the best. Instead, I needed to collaborate actively - create plans, ask for feedback on content clarity, and identify uncertainties. This gradual process taught me the AI's actual capabilities and most effective collaboration methods.


Methodology Specifics

Why 150 lines exactly?

Multiple benefits: easy readability, clear understanding, modularity enforcement, architectural clarity, simple maintenance, component testing, optimal AI context retention, reusability, and KISS principle adherence.



How did you determine Phase 0 requirements?

From meta-principles of software: if it displays, it must run; if it runs, it can be measured; if it can be measured, it can be optimized; if it can be optimized, it can be reliable; if it can be reliable, it can be trusted.
Regardless of project type, anything requiring architecture needs these foundations. You must ensure changes don't negatively impact the entire system. A single line modification in a nested function might work perfectly but cause 300ms boot time regression for all users.
By testing during development, you catch inefficiencies early. Integration from the start means simply hooking up new components and running tests via command line - minimal time investment with actual value returned. I prefer validation and consistency throughout development rather than programming blind.


Practical Implementation

How do you handle projects that don't fit the methodology?

I adapt them to fit, or if truly impossible, I adjust the method itself. This is one methodology - I can generate countless variations as needed. Having spent 6700+ hours in AI interactions across multiple domains (not just software), I've developed strong system comprehension that enables creating adjusted methodologies on demand.



What's the learning curve for new users?

I cannot accurately answer this question. I've learned that I'm neurologically different - what I perceive as easy or obvious isn't always the case for others. This question is better addressed by someone who has actually used this methodology to determine its learning curve.



When shouldn't someone use this approach?

If you're not serious about projects, despise AI, dislike planning, don't care about modularization, or are just writing simple scripts. However, for anything requiring reliability, I believe this is currently the most effective method.
You still need programming fundamentals to use this methodology effectively - it's significantly more structured than ad-hoc approaches.



Workflow Visualization

  
      ---
config:
  layout: elk
  theme: neo-dark
---
flowchart TD
    A["Project Idea"] --> B["🤖 Stage 1: AI Configuration<br>AI-PREFERENCES.md Custom Instructions"]
    B --> C["Stage 2: Collaborative Planning<br>Share METHODOLOGY.md"]
    C --> D["Define Scope & Completion Criteria"]
    D --> E["Identify Components & Dependencies"]
    E --> F["Structure Phases Based on Logic"]
    F --> G["Document Edge Cases - No Implementation"]
    G --> H["Generate Development Plan with Checkpoints"]
    H --> I["🔧 Stage 3: Phase 0 Infrastructure<br>MANDATORY BEFORE ANY CODE"]
    I --> J["Benchmarking Suite + Regression Detection"]
    J --> K["GitHub Workflows + Quality Gates"]
    K --> L["Test Suite Infrastructure + Stress Tests"]
    L --> M["Documentation Generation System"]
    M --> N["Centralized Configuration + Constants"]
    N --> O["📁 project_extract.py Setup<br>Single/Multiple File Config"]
    O --> P["Initial Project State Extraction"]
    P --> Q["Share Context with AI"]
    Q --> R["Start Development Session<br>Pre-Session Compliance Audit"]
    R --> S{"Next Phase Available?"}
    S -- No --> Z["Project Complete"]
    S -- Yes --> T["Select Single Component<br>Target ≤150 Lines"]
    T --> U{"Multi-Language Required?"}
    U -- Yes --> V["Document Performance Justification<br>Measurable Benefits Required"]
    V --> W["Request AI Implementation"]
    U -- No --> W
    W --> X{"AI Uncertainty Flag?"}
    X -- ⚠️ Yes --> Y["Request Clarification<br>Provide Additional Context"]
    Y --> W
    X -- Clear --> AA["Stage 3: Systematic Implementation"]
    AA --> BB{"Automated Size Check<br>validate-phase Script"}
    BB -- >150 Lines --> CC["AUTOMATED: Split Required<br>Maintain SoC Boundaries"]
    CC --> W
    BB -- ≤150 Lines --> DD["Incremental Compliance Check<br>DRY/KISS/SoC Validation"]
    DD --> EE{"Architectural Principles Pass?"}
    EE -- No --> FF["Flag Specific Violations<br>Reference Methodology"]
    FF --> W
    EE -- Yes --> GG["📊 Stage 4: Data-Driven Iteration<br>Run Benchmark Suite + Save Baselines"]
    GG --> HH["Compare Against Historical Timeline<br>Regression Analysis"]
    HH --> II{"Performance Gate Pass?"}
    II -- Regression Detected --> JJ["Share Performance Data<br>Request Optimization"]
    JJ --> W
    II -- Pass --> KK["Integration Test<br>Verify System Boundaries"]
    KK --> LL{"Cross-Platform Validation?"}
    LL -- Fail --> MM["Address Deployment Constraints<br>Real-World Considerations"]
    MM --> W
    LL -- Pass --> NN{"More Components in Phase?"}
    NN -- Yes --> T
    NN -- No --> OO["🚦 Phase Quality Gate<br>Full Architecture Audit"]
    OO --> PP["Production Simulation<br>Resource Cleanup + Load Test"]
    PP --> QQ{"All Quality Gates Pass?"}
    QQ -- No --> RR["Document Failed Checkpoints<br>Block Phase Progression"]
    RR --> T
    QQ -- Yes --> SS["End Development Session<br>Technical Debt Assessment"]
    SS --> TT["📁 Extract Updated Project State<br>Generate Fresh Context"]
    TT --> UU["Phase Results Documentation<br>Metrics + Outcomes + Timeline"]
    UU --> VV["Update Development Plan<br>Mark Phase Complete"]
    VV --> S
    WW["validate-phase<br>AUTOMATED: File Size + Structure"] -.-> BB
    XX["dry-audit<br>AUTOMATED: Cross-Module Duplication"] -.-> DD
    YY["CI/CD Workflows<br>AUTOMATED: Merge Gates"] -.-> GG
    ZZ["Performance Timeline<br>AUTOMATED: Historical Data"] -.-> HH
    AAA["Dependency Validator<br>AUTOMATED: Import Boundaries"] -.-> KK
    BBB["Architecture Auditor<br>AUTOMATED: SoC Compliance"] -.-> OO
    WW -. BUILD FAILURE .-> CC
    YY -. MERGE BLOCKED .-> JJ
    BBB -. AUDIT FAILURE .-> RR
    style Y fill:#7d5f00
    style CC fill:#770000
    style FF fill:#7d5f00
    style JJ fill:#7d5f00
    style MM fill:#770000
    style RR fill:#770000

    
  
    
      Loading

  


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Let us git rid of it, angry GitHub users say of forced Copilot features]]></title>
            <link>https://www.theregister.com/2025/09/05/github_copilot_complaints/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45148167</guid>
            <description><![CDATA[: Unavoidable AI has developers looking for alternative code hosting options]]></description>
            <content:encoded><![CDATA[
Among the software developers who use Microsoft's GitHub, the most popular community discussion in the past 12 months has been a request for a way to block Copilot, the company's AI service, from generating issues and pull requests in code repositories.
The second most popular discussion – where popularity is measured in upvotes – is a bug report that seeks a fix for the inability of users to disable Copilot code reviews.
Both of these questions, the first opened in May and the second opened a month ago, remain unanswered, despite an abundance of comments critical of generative AI and Copilot. 

    

The author of the first, developer Andi McClure, published a similar request to Microsoft's Visual Studio Code repository in January, objecting to the reappearance of a Copilot icon in VS Code after she had uninstalled the Copilot extension.

        


        

Microsoft and GitHub, not to mention rivals like Google, have gone all-in on a technology that a sizable or at least vocal portion of their customers simply don't want. And with billions in capital expenditures to recoup, they're making it difficult to avoid.
During Microsoft's July 30, 2025 earnings call, CEO Satya Nadella said GitHub Copilot continued to exhibit strong momentum and had reached 20 million users.

        

"GitHub Copilot Enterprise customers increased 75 percent quarter over quarter as companies tailor Copilot to their own codebases," said Nadella, noting that AI adoption has increased usage of GitHub over the past year.


I deeply resent that on top of Copilot seemingly training itself on my GitHub-posted code in violation of my licenses, GitHub wants me to look at (effectively) ads for this project I will never touch

"I've been for a while now filing issues in the GitHub Community feedback area when Copilot intrudes on my GitHub usage," McClure told The Register in an email. "I deeply resent that on top of Copilot seemingly training itself on my GitHub-posted code in violation of my licenses, GitHub wants me to look at (effectively) ads for this project I will never touch. If something's bothering me, I don't see a reason to stay quiet about it. I think part of how we get pushed into things we collectively don't want is because we stay quiet about it."
It's not just the burden of responding to AI slop, an ongoing issue for Curl maintainer Daniel Stenberg. It's the permissionless copying and regurgitation of speculation as fact, mitigated only by small print disclaimers that generative AI may produce inaccurate results. It's also GitHub's disavowal of liability if Copilot code suggestions happen to have reproduced source code that requires attribution.
It's what the Servo project characterizes in its ban on AI code contributions as the lack of code correctness guarantees, copyright issues, and ethical concerns. Similar objections have been used to justify AI code bans in GNOME's Loupe project, FreeBSD, Gentoo, NetBSD, and QEMU.
McClure said she has been filing requests to opt out of Copilot for a few years now, but in the last six months, her posts have been attracting more community support. 

        

Two issues, about the abovementioned Copilot menu in VS Code and the inability to block Copilot-generated issues and pull requests, she said, have continued to attract comments.
"People keep finding these issues somehow and tacking on to them," McClure said. "Although Microsoft's been forcing the Copilot 'asks' into more and more places in the interface for a while, sometime this year they hit an inflection point where mass numbers of people don't feel like ignoring it anymore, where before they could shrug and ignore it or find the off switch."
In the past month, she said, there's been a second change in the way people see GitHub – GitHub's demotion from distinct subsidiary to part of Microsoft's CoreAI group.


Bot shots: US Army enlists AI startup to provide target-tracking

OpenAI eats jobs, then offers to help you find a new one at Walmart

Boffins build automated Android bug hunting system

Atlassian acquisition drives dream of AI-powered ChromeOS challenger

"Despite being a symbolic change, it seems to have galvanized the open source community from just complaining about Copilot to now actively moving away from GitHub," said McClure. "Many of my contacts in the open source community have been talking about plans to move from GitHub to Codeberg or a self-hosted Forgejo (Forgejo is the software used by Codeberg) over the last month, and the comments in those two always-busy GitHub threads have increasingly been people describing how Copilot is inspiring them to move to Codeberg as well."
Calls to shun Microsoft and GitHub go back a long way in the open source community, but moved beyond simmering dissatisfaction in 2022 when the Software Freedom Conservancy (SFC) urged free software supporters to give up GitHub, a position SFC policy fellow Bradley M. Kuhn recently reiterated.
Some of the developers participating in the issues raised by McClure and by others have said they intend to move away from GitHub over its stance on AI.
"Today I rejected two Copilot-generated code suggestions on my PR," wrote a developer who posted to McClure's thread under the name Constantine. "This was very disturbing, so I started googling and found this discussion. I refuse using AI in the same way I don't take drugs or steal things - for me it's a matter of principle. So if this continues and Microsoft does not provide a way to opt out of AI for my repositories soon, I will move my code to a self-hosted solution and won't ever return to GitHub."
McClure said she has been slowly shifting toward Codeberg over the past few months. "I haven't been proactively moving repos but whenever I make a change to a repo I clone it to Codeberg, post the change there, and replace my main branch on the GitHub repo with a relocation notice," she said.
"Microsoft as a company has a running problem where they won't take no for an answer, whether with 'AI' or with any other product they want to ship," said McClure. "A favorite tactic of theirs recently is they will enable a thing by default and put an off switch, wait six months, and then slightly change or rename the feature you turned off, and create a new off switch you have to separately turn off. They did this with Bing in Windows 10 and now they're doing it with Copilot in their developer tools (and presumably Windows 11, I don't know, I don't use Windows 11)."
McClure said that when Microsoft began adding Copilot to everything, starting with Android keyboard SwiftKey, she concluded that the situation would reprise the handling of Bing/Cortana in Windows 10 and turning it off would not be enough.


If you really find Copilot unacceptable – and I do, Copilot is so much more noxious than Microsoft's previous forced bundlings – the only option is to stop using any Microsoft product that Copilot shows up in

"If you really find Copilot unacceptable – and I do, Copilot is so much more noxious than Microsoft's previous forced bundlings – the only option is to stop using any Microsoft product that Copilot shows up in," she said. "I stopped using SwiftKey; I started migrating from desktop Windows to Linux when it became clear mandatory AI surveillance would be a core part of Win11. GitHub and, more sporadically, Visual Studio Code I have had to keep using because they're monopolies in a way even Windows isn't. The network effects (projects whose sole method of communication is GitHub, software whose only IDE integration is a VSCode plugin) are too strong."
Things have progressed as expected, McClure said, with Copilot buttons appearing in VS Code even when Copilot has been uninstalled and poorly labeled buttons that redirect to Copilot searches. She suggests people are starting to tire of the situation and that if it continues, it will weaken the network effects that keep developers tied to GitHub, accelerating further migration.
"When this happens I have no idea if Microsoft will notice or care," said McClure. "The Copilot push at Microsoft appears to be completely top-down and the people at the top seem to have completely forgotten about conventional goals like customer retention. They want to pump up those 'AI' numbers, for whatever reason, and they view their customer base as just a resource to burn to get those metrics up."
GitHub did not respond to a request for comment. ®                                
                    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why Language Models Hallucinate]]></title>
            <link>https://openai.com/index/why-language-models-hallucinate/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45147385</guid>
        </item>
        <item>
            <title><![CDATA[Rug pulls, forks, and open-source feudalism]]></title>
            <link>https://lwn.net/SubscriberLink/1036465/e80ebbc4cee39bfb/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45146967</guid>
            <description><![CDATA[Like almost all human endeavors, open-source software development involves a range of power dyn [...]]]></description>
            <content:encoded><![CDATA[


Welcome to LWN.net

The following subscription-only content has been made available to you 
by an LWN subscriber.  Thousands of subscribers depend on LWN for the 
best news from the Linux and free software communities.  If you enjoy this 
article, please consider subscribing to LWN.  Thank you
for visiting LWN.net!



Like almost all human endeavors, open-source software development involves
a range of power dynamics.  Companies, developers, and users are all
concerned with the power to influence the direction of the software — and,
often, to profit from it.  At the 2025 Open
Source Summit Europe, Dawn Foster talked about how those dynamics can
play out, with an eye toward a couple of tactics — rug pulls and forks — that
are available to try to shift power in one direction or another.
Power dynamics

Since the beginning of history, Foster began, those in power have tended to
use it against those who were weaker.  In the days of feudalism, control of
the land led to exploitation at several levels.  In the open-source world,
the large cloud providers often seem to have the most power, which they use
against smaller companies.  Contributors and maintainers often have less
power than even the smaller companies, and users have less power yet.  



We have built a world where it is often easiest to just use whatever a
cloud provider offers, even with open-source software.  Those providers may
not contribute back to the projects they turn into services, though,
upsetting the smaller companies that are, likely as not, doing the bulk of
the work to provide the software in question in the first place.  Those
companies can have a power of their own, however: the power to relicense
the software.  Pulling the rug out from under users of the software in this
way can change the balance of power with regard to cloud providers, but it
leaves contributors and users in a worse position than before.  But
there is a power at this level too: the power to fork the software,
flipping the power balance yet again.

Companies that control a software project have the power to carry out this
sort of rug pull, and they are often not shy about exercising it.
Single-company projects, clearly, are at a much higher risk of rug pulls;
the company has all the power in this case, and others have little
recourse.  So one should look at a company's reputation before adopting a
software project, but that is only so helpful.  Companies can change
direction without notice, be acquired, or go out of business, making
previous assessments of their reputation irrelevant.

The problem often comes down to the simple fact that companies have to
answer to their investors, and that often leads to pressure to relicense
the software they have created in order to increase revenue.  This is
especially true in cases where cloud providers are competing for the same
customers as the company that owns the project.  The result can be a switch
to a more restrictive license aimed at making it harder for other companies
to profit from the project.

A rug pull of this nature can lead to a fork of the project — a rebellious,
collective action aimed at regaining some power over the code.  But a fork
is not a simple matter; it is a lot of work, and will fail without people
and resources behind it.  The natural source for that is a large company;
cloud providers, too, can try to shift power via a fork, and they have the
ability to back their fork up with the resources it needs to succeed.



A relicensing event does not always lead to a popular fork; that did not
happen with MongoDB or Sentry, for example.  Foster said she had not looked
into why that was the case.  Sometimes rug pulls take other forms, such as
when Perforce, after acquiring Puppet in 2022, moved it development and
releases behind closed doors, with a reduced frequency of releases back to
the public repository.  That action kicked off the OpenVox fork.
Looking at the numbers

Foster has spent some time analyzing rug pulls, forks, and what happens
thereafter; a lot of the results are available
for download as Jupyter notebooks.  For each rug-pull event, she looked
at the contributor makeup of the project before and after the ensuing fork
in an attempt to see what effects are felt by the projects involved.

In 2021, Elastic relicensed Elasticsearch
under the non-free Server Side Public License (SSPL).  Amazon Web Services
then forked the project as OpenSearch.  Before the fork, most of
the Elasticsearch contributors were Elastic employees; that,
unsurprisingly, did not change afterward.  OpenSearch started with no
strong contributor base, so had to build its community from scratch.  As a
result, the project has been dominated by Amazon contributors ever since;
the balance has shifted slowly over time, but there was not a big uptick in
outside contributors even after OpenSearch became a Linux Foundation
project in 2024.  While starting a project under a neutral foundation can
help attract contributors, she said, moving a project under a foundation's
umbrella later on does not seem to provide the same benefit.

Terraform was
developed mostly by Hashicorp, which relicensed
the software under the non-free Business Source License in 2023.  One
month later, the OpenTofu fork was
started under the Linux Foundation.  While the contributor base for
Terraform, which was almost entirely Hashicorp employees, changed little
after the fork, OpenTofu quickly acquired a number of contributors from
several companies, none of whom had been Terraform contributors before.  In
this case, users drove the fork and placed it under a neutral foundation,
resulting in a more active developer community.

In 2024, Redis was relicensed under the
SSPL; the Valkey fork was quickly organized, under the Linux Foundation,
by Redis contributors.  The Redis project differed from the others
mentioned here in that, before the fork, it had nearly twice as many
contributors from outside the company as from within; after the fork, the
number of external Redis contributors dropped to zero.  All of the external
contributors fled to Valkey, with the result that Valkey started with a
strong community representing a dozen or so companies.

Looking at how the usage of these projects changes is harder, she
said, but there appears to be a correlation between the usage of a project
and the number of GitHub forks (cloned repository copies) it has.  There is
typically a spike in these clones after a relicensing event, suggesting
that people are considering creating a hard fork of the project.  In all
cases, the forks that emerged appeared to have less usage than the original
by the "GitHub forks" metric; both branches of the fork continue to go
forward.  But, she said, projects that are relicensed do tend to show
reduced usage, especially when competing forks are created under foundations.
What to do

This kind of power game creates problems for both contributors and users,
she said; we contribute our time to these projects, and need them to not be
pulled out from under us.  There is no way to know when a rug pull might
happen, but there are some warning signs to look out for.  At the top of
her list was the use of a contributor license agreement (CLA); these
agreements create a power imbalance, giving the company involved the power
to relicense the software.  Projects with CLAs more commonly are subject to
rug pulls; projects using a developers certificate of origin do not have the
same power imbalance and are less likely to be rug pulled.

One should also look at the governance of a project; while being housed
under a foundation reduces the chance of a rug pull, that can still happen,
especially in cases where the contributors are mostly from a single
company.  She mentioned the Cortex project, housed under
the Cloud Native Computing Foundation, which was controlled by Grafana; that
company eventually forked its own project to create Mimir.  To avoid this kind of
surprise, one should look for projects with neutral governance, with
leaders from multiple organizations.

Projects should also be evaluated on their contributor base; are there
enough contributors to keep things going?  Companies can help, of course,
by having their employees contribute to the projects they depend on,
increasing influence and making those projects more sustainable.  She
mentioned the CHAOSS project, which
generates metrics to help in the judgment of the viability of development
projects.  CHAOSS has put together a set of
"practitioner guides" intended to help contributors and maintainers
make improvements within a project.

With the sustained rise of the big cloud providers, she concluded, the
power dynamics around open-source software are looking increasingly feudal.
Companies can use relicensing to shift power away from those providers, but
they also take power from contributors when the pull the rug in this way.
Those contributors, though, are in a better position than the serfs of old,
since they have the ability to fork a project they care about, shifting
power back in their direction.


Hazel Weakly asked if there are other protections that contributors and
users might develop to address this problem.  Foster answered that at least
one company changed its mind about a planned relicensing action after
seeing the success of the Valkey and OpenTofu forks.  The ability to fork
has the effect of making companies think harder, knowing that there may be
consequences that follow a rug pull.  Beyond that, she reiterated that
projects should be pushed toward neutral governance.

Dirk Hohndel added that the best thing to do is to bring more outside
contributors into a project; the more of them there are, the higher the
risk associated with a rug pull.  Anybody who just sits back within a
project, he said, is just a passenger; it is better to be driving.

Foster's
slides are available for interested readers.

[Thanks to the Linux Foundation, LWN's travel sponsor, for supporting my
travel to this event.]
           Index entries for this article
           ConferenceOpen Source Summit Europe/2025
            

               
               
            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Developing a Space Flight Simulator in Clojure]]></title>
            <link>https://www.wedesoft.de/software/2025/09/05/clojure-game/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45145794</guid>
            <description><![CDATA[Developing a Space Flight Simulator in Clojure]]></description>
            <content:encoded><![CDATA[
  
  05 Sep 2025    

In 2017 I discovered the free of charge Orbiter 2016 space flight simulator which was proprietary at the time and it inspired me to develop a space flight simulator myself.
I prototyped some rigid body physics in C and later in GNU Guile and also prototyped loading and rendering of Wavefront OBJ files.
I used GNU Guile (a Scheme implementation) because it has a good native interface and of course it has hygienic macros.
Eventually I got interested in Clojure because unlike GNU Guile it has multi-methods as well as fast hash maps and vectors.
I finally decided to develop the game for real in Clojure.
I have been developing a space flight simulator in Clojure for almost 5 years now.
While using Clojure I have come to appreciate the immutable values and safe parallelism using atoms, agents, and refs.

In the beginning I decided to work on the hard parts first, which for me were 3D rendering of a planet, an atmosphere, shadows, and volumetric clouds.
I read the OpenGL Superbible to get an understanding on what functionality OpenGL provides.
When Orbiter was eventually open sourced and released unter MIT license here, I inspected the source code and discovered that about 90% of the code is graphics-related.
So starting with the graphics problems was not a bad decision.

Software dependencies

The following software is used for development.
The software libraries run on both GNU/Linux and Microsoft Windows.


  Clojure the programming language
  LWJGL provides Java wrappers for various libraries
    
      lwjgl-opengl for 3D graphics
      lwjgl-glfw for windowing and input devices
      lwjgl-nuklear for graphical user interfaces
      lwjgl-stb for image I/O and using truetype fonts
      lwjgl-assimp to load glTF 3D models with animation data
    
  
  Jolt Physics to simulate wheeled vehicles and collisions with meshes
  Fastmath for fast matrix and vector math as well as spline interpolation
  Comb for templating shader code
  Instaparse to parse NASA Planetary Constant Kernel (PCK) files
  Gloss to parse NASA Double Precision Array Files (DAF)
  Coffi as a foreign function interface
  core.memoize for least recently used caching of function results
  Apache Commons Compress to read map tiles from tar files
  Malli to add schemas to functions
  Immuconf to load the configuration file
  Progrock a progress bar for long running builds
  Claypoole to implement parallel for loops
  tools.build to build the project
  clj-async-profiler Clojure profiler creating flame graphs
  slf4j-timbre Java logging implementation for Clojure


The deps.edn file contains operating system dependent LWJGL bindings.
For example on GNU/Linux the deps.edn file contains the following:

{:deps {; ...
        org.lwjgl/lwjgl {:mvn/version "3.3.6"}
        org.lwjgl/lwjgl$natives-linux {:mvn/version "3.3.6"}
        org.lwjgl/lwjgl-opengl {:mvn/version "3.3.6"}
        org.lwjgl/lwjgl-opengl$natives-linux {:mvn/version "3.3.6"}
        org.lwjgl/lwjgl-glfw {:mvn/version "3.3.6"}
        org.lwjgl/lwjgl-glfw$natives-linux {:mvn/version "3.3.6"}
        org.lwjgl/lwjgl-nuklear {:mvn/version "3.3.6"}
        org.lwjgl/lwjgl-nuklear$natives-linux {:mvn/version "3.3.6"}
        org.lwjgl/lwjgl-stb {:mvn/version "3.3.6"}
        org.lwjgl/lwjgl-stb$natives-linux {:mvn/version "3.3.6"}
        org.lwjgl/lwjgl-assimp {:mvn/version "3.3.6"}
        org.lwjgl/lwjgl-assimp$natives-linux {:mvn/version "3.3.6"}}
        ; ...
        }

In order to manage the different dependencies for Microsoft Windows, a separate Git branch is maintained.

Atmosphere rendering


    

For the atmosphere, Bruneton’s precomputed atmospheric scattering was used.
The implementation uses a 2D transmittance table, a 2D surface scattering table, a 4D Rayleigh scattering, and a 4D Mie scattering table.
The tables are computed using several iterations of numerical integration.
Higher order functions for integration over a sphere and over a line segment were implemented in Clojure.
Integration over a ray in 3D space (using fastmath vectors) was implemented as follows for example:

(defn integral-ray
  "Integrate given function over a ray in 3D space"
  {:malli/schema [:=> [:cat ray N :double [:=> [:cat [:vector :double]] :some]] :some]}
  [{::keys [origin direction]} steps distance fun]
  (let [stepsize      (/ distance steps)
        samples       (mapv #(* (+ 0.5 %) stepsize) (range steps))
        interpolate   (fn interpolate [s] (add origin (mult direction s)))
        direction-len (mag direction)]
    (reduce add (mapv #(-> % interpolate fun (mult (* stepsize direction-len))) samples))))

Precomputing the atmospheric tables takes several hours even though pmap was used.
When sampling the multi-dimensional functions, pmap was used as a top-level loop and map was used for interior loops.
Using java.nio.ByteBuffer the floating point values were converted to a byte array and then written to disk using a clojure.java.io/output-stream:

(defn floats->bytes
  "Convert float array to byte buffer"
  [^floats float-data]
  (let [n           (count float-data)
        byte-buffer (.order (ByteBuffer/allocate (* n 4)) ByteOrder/LITTLE_ENDIAN)]
    (.put (.asFloatBuffer byte-buffer) float-data)
    (.array byte-buffer)))

(defn spit-bytes
  "Write bytes to a file"
  {:malli/schema [:=> [:cat non-empty-string bytes?] :nil]}
  [^String file-name ^bytes byte-data]
  (with-open [out (io/output-stream file-name)]
    (.write out byte-data)))

(defn spit-floats
  "Write floating point numbers to a file"
  {:malli/schema [:=> [:cat non-empty-string seqable?] :nil]}
  [^String file-name ^floats float-data]
  (spit-bytes file-name (floats->bytes float-data)))

When launching the game, the lookup tables get loaded and copied into OpenGL textures.
Shader functions are used to lookup and interpolate values from the tables.
When rendering the planet surface or the space craft, the atmosphere essentially gets superimposed using ray tracing.
After rendering the planet, a background quad is rendered to display the remaining part of the atmosphere above the horizon.

Templating OpenGL shaders

It is possible to make programming with OpenGL shaders more flexible by using a templating library such as Comb.
The following shader defines multiple octaves of noise on a base noise function:

#version 410 core

float <%= base-function %>(vec3 idx);

float <%= method-name %>(vec3 idx)
{
  float result = 0.0;
<% (doseq [multiplier octaves] %>
  result += <%= multiplier %> * <%= base-function %>(idx);
  idx *= 2;
<% ) %>
  return result;
}

One can then for example define the function fbm_noise using octaves of the base function noise as follows:

(def noise-octaves
  "Shader function to sum octaves of noise"
  (template/fn [method-name base-function octaves] (slurp "resources/shaders/core/noise-octaves.glsl")))

; ...

(def fbm-noise-shader (noise-octaves "fbm_noise" "noise" [0.57 0.28 0.15]))

Planet rendering


    

To render the planet, NASA Bluemarble data, NASA Blackmarble data, and NASA Elevation data was used.
The images were converted to a multi resolution pyramid of map tiles.
The following functions were implemented for color map tiles and for elevation tiles:


  a function to load and cache map tiles of given 2D tile index and level of detail
  a function to extract a pixel from a map tile
  a function to extract the pixel for a specific longitude and latitude


The functions for extracting a pixel for given longitude and latitude then were used to generate a cube map with a quad tree of tiles for each face.
For each tile, the following files were generated:


  A daytime texture
  A night time texture
  An image of 3D vectors defining a surface mesh
  A water mask
  A normal map


Altogether 655350 files were generated.
Because the Steam ContentBuilder does not support a large number of files, each row of tile data was aggregated into a tar file.
The Apache Commons Compress library allows you to open a tar file to get a list of entries and then perform random access on the contents of the tar file.
A Clojure LRU cache was used to maintain a cache of open tar files for improved performance.

At run time, a future is created, which returns an updated tile tree, a list of tiles to drop, and a path list of the tiles to load into OpenGL.
When the future is realized, the main thread deletes the OpenGL textures from the drop list, and then uses the path list to get the new loaded images from the tile tree, load them into OpenGL textures, and create an updated tile tree with the new OpenGL textures added.
The following functions to manipulate quad trees were implemented to realize this:

(defn quadtree-add
  "Add tiles to quad tree"
  {:malli/schema [:=> [:cat [:maybe :map] [:sequential [:vector :keyword]] [:sequential :map]] [:maybe :map]]}
  [tree paths tiles]
  (reduce (fn add-title-to-quadtree [tree [path tile]] (assoc-in tree path tile)) tree (mapv vector paths tiles)))

(defn quadtree-extract
  "Extract a list of tiles from quad tree"
  {:malli/schema [:=> [:cat [:maybe :map] [:sequential [:vector :keyword]]] [:vector :map]]}
  [tree paths]
  (mapv (partial get-in tree) paths))

(defn quadtree-drop
  "Drop tiles specified by path list from quad tree"
  {:malli/schema [:=> [:cat [:maybe :map] [:sequential [:vector :keyword]]] [:maybe :map]]}
  [tree paths]
  (reduce dissoc-in tree paths))

(defn quadtree-update
  "Update tiles with specified paths using a function with optional arguments from lists"
  {:malli/schema [:=> [:cat [:maybe :map] [:sequential [:vector :keyword]] fn? [:* :any]] [:maybe :map]]}
  [tree paths fun & arglists]
  (reduce (fn update-tile-in-quadtree
            [tree [path & args]]
            (apply update-in tree path fun args)) tree (apply map list paths arglists)))

Other topics

Solar system

The astronomy code for getting the position and orientation of planets was implemented according to the Skyfield Python library.
The Python library in turn is based on the SPICE toolkit of the NASA JPL.
The JPL basically provides sequences of Chebyshev polynomials to interpolate positions of Moon and planets as well as the orientation of the Moon as binary files.
Reference coordinate systems and orientations of other bodies are provided in text files which consist of human and machine readable sections.
The binary files were parsed using Gloss (see Wiki for some examples) and the text files using Instaparse.

Jolt bindings

The required Jolt functions for wheeled vehicle dynamics and collisions with meshes were wrapped in C functions and compiled into a shared library.
The Coffi Clojure library (which is a wrapper for Java’s new Foreign Function & Memory API) was used to make the C functions and data types usable in Clojure.

For example the following code implements a call to the C function add_force:

(defcfn add-force
  "Apply a force in the next physics update"
  add_force [::mem/int ::vec3] ::mem/void)

Here ::vec3 refers to a custom composite type defined using basic types.
The memory layout, serialisation, and deserialisation for ::vec3 are defined as follows:

(def vec3-struct
  [::mem/struct
   [[:x ::mem/double]
    [:y ::mem/double]
    [:z ::mem/double]]])


(defmethod mem/c-layout ::vec3
  [_vec3]
  (mem/c-layout vec3-struct))


(defmethod mem/serialize-into ::vec3
  [obj _vec3 segment arena]
  (mem/serialize-into {:x (obj 0) :y (obj 1) :z (obj 2)} vec3-struct segment arena))


(defmethod mem/deserialize-from ::vec3
  [segment _vec3]
  (let [result (mem/deserialize-from segment vec3-struct)]
    (vec3 (:x result) (:y result) (:z result))))

Performance

The clj-async-profiler was used to create flame graphs visualising the performance of the game.
In order to get reflection warnings for Java calls without sufficient type declarations, *warn-on-reflection* was set to true.

(set! *warn-on-reflection* true)

Furthermore to discover missing declarations of numerical types, *unchecked-math* was set to :warn-on-boxed.

(set! *unchecked-math* :warn-on-boxed)

To reduce garbage collector pauses, the ZGC low-latency garbage collector for the JVM was used.
The following section in deps.edn ensures that the ZGC garbage collector is used when running the project with clj -M:run:

{:deps {; ...
        }
 :aliases {:run {:jvm-opts ["-Xms2g" "-Xmx4g" "--enable-native-access=ALL-UNNAMED" "-XX:+UseZGC"
                            "--sun-misc-unsafe-memory-access=allow"]
                 :main-opts ["-m" "sfsim.core"]}}}

The option to use ZGC is also specified in the Packr JSON file used to deploy the application.

Building the project

In order to build the map tiles, atmospheric lookup tables, and other data files using tools.build, the project source code was made available in the build.clj file using a :local/root dependency:

{:deps {; ...
        }
 :aliases {; ...
           :build {:deps {io.github.clojure/tools.build {:mvn/version "0.10.10"}
                          sfsim/sfsim {:local/root "."}}
                   :ns-default build
                   :exec-fn all
                   :jvm-opts ["-Xms2g" "-Xmx4g" "--sun-misc-unsafe-memory-access=allow"]}}}

Various targets were defined to build the different components of the project.
For example the atmospheric lookup tables can be build by specifying clj -T:build atmosphere-lut on the command line.

The following section in the build.clj file was added to allow creating an “Uberjar” JAR file with all dependencies by specifying clj -T:build uber on the command-line.

(defn uber [_]
  (b/copy-dir {:src-dirs ["src/clj"]
               :target-dir class-dir})
  (b/compile-clj {:basis basis
                  :src-dirs ["src/clj"]
                  :class-dir class-dir})
  (b/uber {:class-dir class-dir
           :uber-file "target/sfsim.jar"
           :basis basis
           :main 'sfsim.core}))

To create a Linux executable with Packr, one can then run java -jar packr-all-4.0.0.jar scripts/packr-config-linux.json where the JSON file has the following content:

{
  "platform": "linux64",
  "jdk": "/usr/lib/jvm/jdk-24.0.2-oracle-x64",
  "executable": "sfsim",
  "classpath": ["target/sfsim.jar"],
  "mainclass": "sfsim.core",
  "resources": ["LICENSE", "libjolt.so", "venturestar.glb", "resources"],
  "vmargs": ["Xms2g", "Xmx4g", "XX:+UseZGC"],
  "output": "out-linux"
}

In order to distribute the game on Steam, three depots were created:


  a data depot with the operating system independent data files
  a Linux depot with the Linux executable and Uberjar including LWJGL’s Linux native bindings
  and a Windows depot with the Windows executable and an Uberjar including LWJGL’s Windows native bindings


When updating a depot, the Steam ContentBuilder command line tool creates and uploads a patch in order to preserve storage space and bandwidth.

Future work

Although the hard parts are mostly done, there are still several things to do:


  control surfaces and thruster graphics
  launchpad and runway graphics
  sound effects
  a 3D cockpit
  the Moon
  a space station


It would also be interesting to make the game modable in a safe way (maybe evaluating Clojure files in a sandboxed environment?).

Conclusion


    

You can find the source code on Github.
Currently there is only a playtest build, but if you want to get notified, when the game gets released, you can wishlist it here.

Anyway, let me know any comments and suggestions.

Enjoy!




  Flight dynamics model for simulating Venturestar style spacecraft
  Test Driven Development with OpenGL
  Implementing GUIs using Clojure and LWJGL Nuklear bindings
  Procedural Volumetric Clouds
  Procedural generation of global cloud cover
  Reversed-Z Rendering in OpenGL
  Specifying Clojure function schemas with Malli
  Implement an Interpreter using Clojure Instaparse
  Orbits with Jolt Physics
  Getting started with the Jolt Physics Engine
  Create Blender bones and animate and import with Assimp



]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GLM 4.5 with Claude Code]]></title>
            <link>https://docs.z.ai/guides/llm/glm-4.5</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45145457</guid>
            <description><![CDATA[GLM-4.5 and GLM-4.5-Air are our latest flagship models, purpose-built as foundational models for agent-oriented applications. Both leverage a Mixture-of-Experts (MoE) architecture. GLM-4.5 has a total parameter count of 355B with 32B active parameters per forward pass, while GLM-4.5-Air adopts a more streamlined design with 106B total parameters and 12B active parameters.
Both models share a similar training pipeline: an initial pretraining phase on 15 trillion tokens of general-domain data, followed by targeted fine-tuning on datasets covering code, reasoning, and agent-specific tasks. The context length has been extended to 128k tokens, and reinforcement learning was applied to further enhance reasoning, coding, and agent performance.
GLM-4.5 and GLM-4.5-Air are optimized for tool invocation, web browsing, software engineering, and front-end development. They can be integrated into code-centric agents such as Claude Code and Roo Code, and also support arbitrary agent applications through tool invocation APIs.
Both models support hybrid reasoning modes, offering two execution modes: Thinking Mode for complex reasoning and tool usage, and Non-Thinking Mode for instant responses. These modes can be toggled via the thinking.typeparameter (with enabled and disabled settings), and dynamic thinking is enabled by default.]]></description>
            <content:encoded><![CDATA[   Overview

GLM-4.5 and GLM-4.5-Air are our latest flagship models, purpose-built as foundational models for agent-oriented applications. Both leverage a Mixture-of-Experts (MoE) architecture. GLM-4.5 has a total parameter count of 355B with 32B active parameters per forward pass, while GLM-4.5-Air adopts a more streamlined design with 106B total parameters and 12B active parameters.
Both models share a similar training pipeline: an initial pretraining phase on 15 trillion tokens of general-domain data, followed by targeted fine-tuning on datasets covering code, reasoning, and agent-specific tasks. The context length has been extended to 128k tokens, and reinforcement learning was applied to further enhance reasoning, coding, and agent performance.
GLM-4.5 and GLM-4.5-Air are optimized for tool invocation, web browsing, software engineering, and front-end development. They can be integrated into code-centric agents such as Claude Code and Roo Code, and also support arbitrary agent applications through tool invocation APIs.
Both models support hybrid reasoning modes, offering two execution modes: Thinking Mode for complex reasoning and tool usage, and Non-Thinking Mode for instant responses. These modes can be toggled via the thinking.typeparameter (with enabled and disabled settings), and dynamic thinking is enabled by default.
   GLM-4.5 Serials

   Capability

   Introducting GLM-4.5
Overview
The first-principle measure of AGI lies in integrating more general intelligence capabilities without compromising existing functions. GLM-4.5 represents our first complete realization of this concept. It combines advanced reasoning, coding, and agent capabilities within a single model, achieving a significant technological breakthrough by natively fusing reasoning, coding, and agent abilities to meet the complex demands of agent-based applications.
To comprehensively evaluate the model’s general intelligence, we selected 12 of the most representative benchmark suites, including MMLU Pro, AIME24, MATH 500, SciCode, GPQA, HLE, LiveCodeBench, SWE-Bench, Terminal-bench, TAU-Bench, BFCL v3, and BrowseComp. Based on the aggregated average scores, GLM-4.5 ranks second globally among all models, first among domestic models, and first among open-source models.

Higher Parameter Efficiency
GLM-4.5 has half the number of parameters of DeepSeek-R1 and one-third that of Kimi-K2, yet it outperforms them on multiple standard benchmark tests. This is attributed to the higher parameter efficiency of GLM architecture. Notably, GLM-4.5-Air, with 106 billion total parameters and 12 billion active parameters, achieves a significant breakthrough—surpassing models such as Gemini 2.5 Flash, Qwen3-235B, and Claude 4 Opus on reasoning benchmarks like Artificial Analysis, ranking among the top three domestic models in performance.
On charts such as SWE-Bench Verified, the GLM-4.5 series lies on the Pareto frontier for performance-to-parameter ratio, demonstrating that at the same scale, the GLM-4.5 series delivers optimal performance.
Low Cost, High Speed
Beyond performance optimization, the GLM-4.5 series also achieves breakthroughs in cost and efficiency, resulting in pricing far lower than mainstream models: API call costs are as low as $0.2 per million input tokens and $1.1 per million output tokens.
At the same time, the high-speed version demonstrates a generation speed exceeding 100 tokens per second in real-world tests, supporting low-latency and high-concurrency deployment scenarios—balancing cost-effectiveness with user interaction experience.
Real-World Evaluation
Real-world performance matters more than leaderboard rankings. To evaluate GLM-4.5’s effectiveness in practical Agent Coding scenarios, we integrated it into Claude Code and benchmarked it against Claude 4 Sonnet, Kimi-K2, and Qwen3-Coder.
The evaluation consisted of 52 programming and development tasks spanning six major domains, executed in isolated container environments with multi-turn interaction tests.
As shown in the results (below), GLM-4.5 demonstrates a strong competitive advantage over other open-source models, particularly in tool invocation reliability and task completion rate. While there remains room for improvement compared to Claude 4 Sonnet, GLM-4.5 delivers a largely comparable experience in most scenarios.
To ensure transparency, we have released all 52 test problems along with full agent trajectories for industry validation and reproducibility.
   Usage
Core Capability: Coding Skills → Intelligent code generation | Real-time code completion | Automated bug fixing
Supports major languages including Python, JavaScript, and Java.
Generates well-structured, scalable, high-quality code based on natural language instructions.
Focuses on real-world development needs, avoiding templated or generic outputs.
Use Case: Complete refactoring-level tasks within 1 hour; generate full product prototypes in 5 minutes.
   Resources

API Documentation: Learn how to call the API.

    Quick Start
Thinking Mode
GLM-4.5 offers a “Deep Thinking Mode” that users can enable or disable by setting the thinking.type parameter. This parameter supports two values: enabled (enabled) and disabled (disabled). By default, dynamic thinking is enabled.
Simple Tasks (No Thinking Required): For straightforward requests that do not require complex reasoning (e.g., fact retrieval or classification), thinking is unnecessary. Examples include:

When was Z.AI founded?
Translate the sentence “I love you” into Chinese.


Moderate Tasks (Default/Some Thinking Required): Many common requests require stepwise processing or deeper understanding. The GLM-4.5 series can flexibly apply thinking capabilities to handle tasks such as:

Why does Jupiter have more moons than Saturn, despite Saturn being larger?
Compare the advantages and disadvantages of flying versus taking the high-speed train from Beijing to Shanghai.



Difficult Tasks (Maximum Thinking Capacity): For truly complex challenges—such as solving advanced math problems, network-related questions, or coding issues—these tasks require the model to fully engage its reasoning and planning abilities, often involving many internal steps before arriving at an answer. Examples include:
Explain in detail how different experts in a Mixture-of-Experts (MoE) model collaborate.
Based on the recent week’s fluctuations of the Shanghai Composite Index and current political information, should I invest in a stock index ETF? Why?

Samples Code
Basic Callcurl -X POST "https://api.z.ai/api/paas/v4/chat/completions" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer your-api-key" \
  -d '{
    "model": "glm-4.5",
    "messages": [
      {
        "role": "user",
        "content": "As a marketing expert, please create an attractive slogan for my product."
      },
      {
        "role": "assistant",
        "content": "Sure, to craft a compelling slogan, please tell me more about your product."
      },
      {
        "role": "user",
        "content": "Z.AI Open Platform"
      }
    ],
    "thinking": {
      "type": "enabled"
    },
    "max_tokens": 4096,
    "temperature": 0.6
  }'
Streaming Callcurl -X POST "https://api.z.ai/api/paas/v4/chat/completions" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer your-api-key" \
  -d '{
    "model": "glm-4.5",
    "messages": [
      {
        "role": "user",
        "content": "As a marketing expert, please create an attractive slogan for my product."
      },
      {
        "role": "assistant",
        "content": "Sure, to craft a compelling slogan, please tell me more about your product."
      },
      {
        "role": "user",
        "content": "Z.AI Open Platform"
      }
    ],
    "thinking": {
      "type": "enabled"
    },
    "stream": true,
    "max_tokens": 4096,
    "temperature": 0.6
  }'
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Universe Within 12.5 Light Years]]></title>
            <link>http://www.atlasoftheuniverse.com/12lys.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45144337</guid>
            <description><![CDATA[This map shows all the star systems that lie within 12.5
light years of our Sun.  Most of the stars are red dwarfs - stars with a tenth of
the Sun's mass and less than one hundredth the luminosity.  Roughly eighty percent
of all the stars in the universe are red dwarfs, and the nearest star - Proxima - is
a typical example.]]></description>
            <content:encoded><![CDATA[
About the Map
This map shows all the star systems that lie within 12.5
light years of our Sun.  Most of the stars are red dwarfs - stars with a tenth of
the Sun's mass and less than one hundredth the luminosity.  Roughly eighty percent
of all the stars in the universe are red dwarfs, and the nearest star - Proxima - is
a typical example.

Epsilon Eridani is orbited by a large planet which might look like this.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Anthropic agrees to pay $1.5B to settle lawsuit with book authors]]></title>
            <link>https://www.nytimes.com/2025/09/05/technology/anthropic-settlement-copyright-ai.html?unlocked_article_code=1.jk8.bTTt.Zir9wmtPaTp2&amp;smid=url-share</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45142885</guid>
        </item>
        <item>
            <title><![CDATA[My Own DNS Server at Home – Part 1: IPv4]]></title>
            <link>https://jan.wildeboer.net/2025/08/My-DNS-Part-1/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45142397</guid>
            <description><![CDATA[“It’s always DNS” is a famous meme among network people. Name resolution is technically quite simple. It’s “just” translating a hostname like jan.wildeboer.net to an IP address. What could possibly go wrong? I am a radical optimist and detail-obsessed knowledge collector, so I decided to find out. As part of my goal to make my home network a little island of Digital Sovereignty, meaning that everything at home should JustWork™, even with no working internet connection, a DNS server is needed.]]></description>
            <content:encoded><![CDATA[
        “It’s always DNS” is a famous meme among network people. Name resolution is technically quite simple. It’s “just” translating a hostname like jan.wildeboer.net to an IP address. What could possibly go wrong? I am a radical optimist and detail-obsessed knowledge collector, so I decided to find out. As part of my goal to make my home network a little island of Digital Sovereignty, meaning that everything at home should JustWork™, even with no working internet connection, a DNS server is needed.


  Based on and extended from my gist Bind on Fedora 42 as DNS server.


I admit, I have a lot of experience with DNS and BIND. But I still consider myself to be merely on the GoodEnough™ side of things. I know how to get DNS configured for my domains. And I want you to feel fearless too. The best place to fail with DNS is the network at home. It limits the impact :)

So read this blog post either as report or as a HOWTO. Both ways can be fun!

In my homelab I have a Raspberry Pi 4 that runs infrastructure services. DNS is one of them, my private CA (Certificate Authority) another. The CA runs as a container on Podman. For DNS I use Bind. It thus has to serve 3 networks:


  192.168.1.0/24 My home IPv4 network
  172.16.0.0/16 IPv4 Network on the second ethernet ports of my homelab servers
  10.88.0.0/16 The (virtual) podman network


It uses my Fritz box (7490) as forwarder, so I can resolve all hosts, including the DHCP entries that the Fritz Box hands out under its default local domain name fritz.box. For my homelab however, I use the homelab.jhw domain name. That’s what the Bind DNS server has to take care of.


  WARNING 
I really should use the official .internal TLD (Top Level Domain) for my homelab network, but I decided against it. This introduces the risk of name resolution problems, should someone offer a public .jhw TLD in future. It’s a risk I am willing to accept in exchange for using a 3 letter TLD at home. Don’t be like me! Use .internal instead. With that out of the way, let’s continue.


What we (well, I) have

Let’s gather what I have in my home network.


  inf01.homelab.jhw at 192.168.1.10: A Raspberry Pi 4 4GB, running Fedora 42 and podman with my Certificate Authority as a container that should be reachable as ca.homelab.jhw. See Be the LetsEncrypt in your homelab with step-ca for more details.
  3 ThinkCentre Tiny PCs in the homelab.jhw zone, called hl01 (192.168.1.11), hl02 (192.168.1.12) and hl03 (192.168.1.13), running RHEL10 (Red Hat Enterprise Linux)
  A Fritz Box 7490 at 192.168.1.254


Let’s install BIND on inf01

We need to do two things. Install BIND and some utilities on inf01 and open the firewall for DNS traffic.

dnf install bind bind-utils
firewall-cmd --add-service=dns --permanent


That was easy enough :)

Configure BIND

To run BIND in the correct way, we need to work on 4 configuration files.


  /etc/named.conf The main configuration file where we tell BIND on which networks it should listen and what zones it will serve.
  /var/named/forward.homelab.jhw The forward zone file that maps hostnames in the homelab.jhw domain to IP addresses on my home network
  /var/named/reverse.homelab.jhw The reverse zone for the 192.168.1.0/24 network range, that looks a bit confusing, that does the opposite. It maps IP addresses to hostnames.
  /var/named/reverse2.homelab.jhw The second reverse zone for the 172.16.0.0/16 network range.


Let’s start with /etc/named.conf.

//
// named.conf
//

options {
  listen-on port 53 { 127.0.0.1; 192.168.1.10; 172.16.1.10; 10.88.0.1; };
  listen-on-v6 port 53 { ::1; fdda:a4da:69a5:0:2783:8c26:b2f1:a6f7; };
  allow-query     { localhost; 192.168.1.0/24; 172.16.0.0/16; 10.88.0.0/16; };

  directory       "/var/named";

  dump-file       "/var/named/data/cache_dump.db";
  statistics-file "/var/named/data/named_stats.txt";
  memstatistics-file "/var/named/data/named_mem_stats.txt";
  secroots-file   "/var/named/data/named.secroots";
  recursing-file  "/var/named/data/named.recursing";

  forwarders { 192.168.1.254; };
  recursion yes;

  dnssec-validation no;

  managed-keys-directory "/var/named/dynamic";
  geoip-directory "/usr/share/GeoIP";

  pid-file "/run/named/named.pid";
  session-keyfile "/run/named/session.key";

  /* https://fedoraproject.org/wiki/Changes/CryptoPolicy */
  include "/etc/crypto-policies/back-ends/bind.config";
};

logging {
        channel default_debug {
                file "data/named.run";
                severity dynamic;
        };
};

zone "." IN {
	type hint;
	file "named.ca";
};

zone "homelab.jhw" IN {
	type master;
	file "forward.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};

zone "1.168.192.in-addr.arpa" IN {
	type master;
	file "reverse.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};

zone "16.172.in-addr.arpa" IN {
        type master;
        file "reverse2.homelab.jhw";
        allow-update { none; };
        allow-query { any; };
};

include "/etc/named.rfc1912.zones";
include "/etc/named.root.key";


The first block declare the general options. Yes, it looks complicated and it is, but let’s walk you through every relevant line (the lines not mentioned are default entries that don’t need to be changed).

listen-on port 53 { 127.0.0.1; 192.168.1.10; 172.16.1.10; 10.88.0.1; };
listen-on-v6 port 53 { ::1; fdda:a4da:69a5:0:2783:8c26:b2f1:a6f7; };
allow-query     { localhost; 192.168.1.0/24; 172.16.0.0/16; 10.88.0.0/16; };


Here we tell BIND that it should listen for queries on port 53 on localhost, 192.168.1.10, the IPv4 address in my hoem network, 172.16.1.10, the second IPv4 address configured and 10.88.0.1, the virtual IPv4 address the Raspberry uses to bridge to the local podman containers.

The second line does the same for IPv6, but that is something we will discuss in Part 2.

The third line tells BIND from whom to accept queries. Essentially from everyone on the three IPv4 networks we are listening to.

directory       "/var/named";


This is the directory where BIND will look for its zone files, that we will define later.

forwarders { 192.168.1.254; };
recursion yes;


Now what if someone asks for a hostname that is outside of homelab.jhw? In that case we tell BIND to forward that question to 192.168.1.254, our Fritz Box. We will allow recursion and cache results we get from our Fritz box to avoid unneeded traffic.

dnssec-validation no;


Our simple setup will not bother with DNSSEC at the moment. Maybe we will have a Part 3 for that.

OK. That was the options part. We will ignore the logging part and the zone "." IN block.

Next (and finally) we define three zone entries (and zone files). A forward zone called homelab.jhw for our domain and two reverse zones for the IP addresses in the 192.168.1.0/24 range called 1.168.192.in-addr.arpa. Yep. That’s 192.168.1 reversed. 1.168.192. That’s why it’s called the reverse zone ;) We also have 16.172.in-addr.arpa for the 172.16.0.0/16 range. Let’s look at them.

zone "homelab.jhw" IN {
	type master;
	file "forward.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};


It’s a zone, all right. It’s the master for this zone, meaning that this DNS server will be the Source of Truth to  answer all queries for the homelab.jhw hostnames.

The exact mapping of all hostnames to IP addresses is in a file called forward.homelab.jhw in the directory /var/named. Remember how we defined that path at the beginning in the options part? Great! We also tell BIND that we do not allow dynamic updates for this zone, meaning that what’s in the file is all we will look at. Finally we tell BIND that any machine in the network is allowed to ask for a reply.

zone "1.168.192.in-addr.arpa" IN {
	type master;
	file "reverse.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};

zone "16.172.in-addr.arpa" IN {
        type master;
        file "reverse2.homelab.jhw";
        allow-update { none; };
        allow-query { any; };
};


The reverse zones with the weird looking zone names are almost the same, except that we define these in two files called reverse.homelab.jhw for the reverse lookup of the 192.168.1.0/24 range and reverse2.homelab.jhw for the 172.16.0.0/16 range. Why these zones have weird names will be explained later.

So now we go to the zone files!

Forward zone for homelab.jhw

The forward zone resolves names to IP addresses using A records (and other types like TXT, CAA and many more exist, but we won’t cover that in this post). It also contains CNAME entries, if you have services on one machine that should be reachable via more than one hostnames. In my homelab the CA (Certificate Authority) server is a container that runs on inf01.homelab.jhw, but should be reachable as ca.homelab.jhw in the home network. The CNAME entry does exactly that. It tells clients that when they want to talk to ca.homelab.jhw they can. By actually talking to inf01.homelab.jhw.

Now here is the big, important lessen for zone files. They have a serial number. Which MUST be incremented with every change. If you don’t, weird things WILL happen. So:


  NEVER FORGET TO INCREASE THE SERIAL WITH EVERY CHANGE TO A ZONE FILE. OR RISK DNS HELL.


/var/named/forward.homelab.jhw

$TTL 3600
@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082706  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
@       IN  NS          inf01.homelab.jhw.
@       IN  A           192.168.1.10

inf01           IN  A     192.168.1.10
hl01            IN  A     192.168.1.11
hl02            IN  A     192.168.1.12
hl03            IN  A     192.168.1.13

ca              IN  CNAME inf01.homelab.jhw.

inf01-m         IN  A     172.16.1.10
hl01-m          IN  A     172.16.1.11
hl02-m          IN  A     172.16.1.12
hl03-m          IN  A     172.16.1.13


Again, let’s go through this.

$TTL 3600


The default Time To Live (TTL) for DNS entries is set at 3600 seconds. That’s 1 hour. This means that when a machine in the network gets a DNS reply, it will not ask again for the same thing until the TTL has passed.

@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082706  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)


The Start Of Authority (SOA) block. Here we say which DNS server is the owner of this domain. It’s inf01.homelab.jhw. (yes, that dot at the end is REALLY important). The root.homelab.jhw actually means root@homelab.jhw and is the email address responsible for this domain. Don’t think to much about why and what :)

@       IN  NS          inf01.homelab.jhw.
@       IN  A           192.168.1.10


The first “real” DNS entries! They are special, as the @ indicates, which means they represent the domain itself. We first define the nameserver (again? yes, don*‘t ask) as NS record. And right after that we define the A record as the IP address 192.168.1.10.

Did you notice that . at the end of inf01.homelab.jhw.? That’s another VERY important thing. The TL;DR is that this final . tells DNS to stop doing fancy recursion and lookups. Just look for the hostname `inf01.homelab.jhw. Period. (pun intended). Don’t care too much about this. Just remember:

EVERY HOSTNAME RECORD ENDS WITH A . YOU WILL FORGET THIS. YOU WILL FIX THIS.

inf01           IN  A     192.168.1.10
hl01            IN  A     192.168.1.11
hl02            IN  A     192.168.1.12
hl03            IN  A     192.168.1.13


Here come the A records for 192.168.1.0/24! We finally get to map hostnames to IP addresses. For real! It now is quite self-explanatory, isn’t it? The hostname gets an A record that is the IP address in my local network. And as these are IP addresses, no . is needed at the end.

ca              IN  CNAME inf01.homelab.jhw.


And here is the CNAME record. Which maps the hostname ca.homelab.jhw to the Canonical NAME (CNAME) inf01.homelab.jhw.. This is a hostname at the end! So it needs the . Period :)

inf01-m         IN  A     172.16.1.10
hl01-m          IN  A     172.16.1.11
hl02-m          IN  A     172.16.1.12
hl03-m          IN  A     172.16.1.13


And here we create another set of A records for the same machines, but this time in the 172.16.0.0/16 range. This range is used for management stuff, hence the -m.

And that’s the gist of it. If you add a new machine to your network, configure it with an IP address (statically or with DHCP) and add it as an A record to the forward zone. Increment the serial and tell DNS to read the updated zone with systemctl reload named. Done.

Reverse zones for 192.168.1.0/24 and 172.16.0.0/16

The reverse zone maps IP addresses to hostnames. Often called the PTR or pointer record. You have to make sure that the entries here are synced to the forward zone.


  NEVER FORGET TO INCREASE THE SERIAL WITH EVERY CHANGE TO A ZONE FILE. Or risk DNS hell.


Here is the reverse zone for the 192.168.1.0/24 range.

/var/named/reverse.homelab.jhw

$TTL 3600
@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082601  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
@       IN  NS          inf01.homelab.jhw.
@       IN  PTR         homelab.jhw.
10      IN  PTR         inf01.homelab.jhw.
11      IN  PTR         hl01.homelab.jhw.
12      IN  PTR         hl02.homelab.jhw.
13      IN  PTR         hl03.homelab.jhw.


As this is more or less the same but the other way round, I will not go through everything but instead explain the differences. It’s the reverse zone, so now we have PTR (pointer) entries that map an IPv4 address in the 192.168.1.0/24 range to hostnames. WITH A DOT AT THE END. DO NOT FORGET THE DOT!

As this is a /24 block, we only need to set the last digit of the IPv4 address.

You might wonder, where is ca here? Well, it’s CNAME is info1.homelab.jhw and that already is in this reverse zone. That is good enough. No separate entry needed.

We also need the reverse zone for the 172.16.0.0/16 range:

/var/named/reverse2.homelab.jhw

$TTL 3600
@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082901  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
@       IN  NS          inf01.homelab.jhw.
@       IN  PTR         homelab.jhw.
10.1      IN  PTR         inf01-m.homelab.jhw.
11.1      IN  PTR         hl01-m.homelab.jhw.
12.1      IN  PTR         hl02-m.homelab.jhw.
13.1      IN  PTR         hl03-m.homelab.jhw.


Looks deceivingly similar. But there is a big difference. This is a /16 network, so we have to define the last two parts of the IPv4 address. And as it is a reverse zone file, yep, we have to reverse it. So now we need 10.1 to define the entry for 172.16.1.10, which is the hostname inf01-m.homelab.jhw. WITH THE DOT AT THE END. AND DID YOU UPDATE THE SERIAL? :)

Phew. That’s the config done!

A final check with the named-checkconf command, which should say nothing when all files are OK. If not, it will tell you what is wrong so you get the chance to fix stuff. You did add all the . at the end of hostnames and you did update the serial of that zone file after you made changes, yes?

Start Bind

The only thing remaining is to start BIND. And persist it as a service, so it starts after every boot. It’s DNS. It must always be available.

systemctl enable named
systemctl start named


You most likely will make typos in your config. So do check with named-checkconf  and systemctl status named and journalctl -u named. If something breaks, read this whole entry again. Find that missing . in a zone file. Increment the serial that you forgot to do. You will get there. Don’t give up!

Result

Machines, containers etc can now be resolved in my home network. All with mow own DNS! Yay!

% nslookup jhwfritz.fritz.box
Server:		192.168.1.10
Address:	192.168.1.10#53

Non-authoritative answer:
Name:	jhwfritz.fritz.box
Address: 192.168.1.254

% nslookup ca.homelab.jhw    
Server:		192.168.1.10
Address:	192.168.1.10#53

ca.homelab.jhw	canonical name = inf01.homelab.jhw.
Name:	inf01.homelab.jhw
Address: 192.168.1.10


And now you should be able to ping the machines with their hostname. ssh into them. Get certificates with the CA that runs in the podman container. Life is good!

I hope you enjoyed this post and could learn something new! Feel free to comment or send corrections vie the Toot linked below that collects the comments!
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Making a font of my handwriting]]></title>
            <link>https://chameth.com/making-a-font-of-my-handwriting/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45141636</guid>
            <description><![CDATA[Recently I’ve been on a small campaign to try to make my personal website more… personal. Little ways to
            make it obvious it’s mine and personal, not just another piece of the boring corporate
            dystopia that is most of the web these days. I don’t quite want to fully regress to the Geocities era and
            fill the screen with animated under construction GIFs, but I do want to capture some of that vibe.]]></description>
            <content:encoded><![CDATA[
          
            Recently I’ve been on a small campaign to try to make my personal website more… personal. Little ways to
            make it obvious it’s mine and personal, not just another piece of the boring corporate
            dystopia that is most of the web these days. I don’t quite want to fully regress to the Geocities era and
            fill the screen with animated under construction GIFs, but I do want to capture some of that vibe.
          
          
            I’d added some bits and pieces along those lines: floating images in articles now look like they’re stuck to
            the page with sellotape, related post links have a wavy border that animates when you hover over them, and
            so on. Next, I wanted to change the heading fonts from a monospace font to something cursive, to resemble
            handwriting. Less terminal output, more handwritten letter. I couldn’t find one I liked, though. So why not
            make my own? It can’t be that hard, right?
          
          Failing to do it myself
          
            I set out to try to make the font myself using open source tools. After doing a bit of research, it seemed
            like the general approach was to create vectors of each character and then import them into a font editor.
            That seems to mean either Adobe Illustrator and FontLab (if you have too much money) or Inkscape and
            FontForge (if you like open source). I fall firmly into the latter category, so I grabbed my graphics tablet
            and opened Inkscape.
          
          
            I wrote out my first three letters: capital A, B and C. Saved them in Inkscape, and attempted to import them
            into FontForge. Then I remembered one crucial thing that had slipped my mind: I absolutely loathe using
            FontForge. It’s a bit like when you open an old version of GIMP and get a bunch of weird looking windows
            floating all over the place; it feels like you’re fighting against the tool to do even the most basic
            operations. The difference is I have cause to edit images a lot more than I edit fonts, and GIMP
            has actually significantly improved their UI over the years.
          
          Here are the rough steps I went through with FontForge:
          
            Launch Font Forge. It shows a weird bit of art in one window, and an open file dialog in another.
            I don’t want to open a file, so I close that dialog. The program exits.
            Relaunch Font Forge, and realise that within the “Open Font” dialog is a “New” button. Click it.
            
              Get to the standard font-editing UI. Right-click on the “A” looking for a way to import an SVG. Don’t see
              one.
            
            
              Click around a bit, exploring the menus. Everything feels a bit off. You can’t open one menu then hover
              over the next to see its content, like basically every UI toolkit in existence. I think FontForge has
              eschewed QT and GTK in favour of doing things itself.
            
            Find the “Import” option in the File menu. Hope it’s for a single glyph not the whole font.
            
              A file picker opens. Again it’s all a bit off from normal desktop conventions. Try to resize it, and just
              get blank gray space at the bottom.
            
            Type the absolute path I want to go to in the text field.
            Get a dialog saying “Not a bdf file /home/chris/etc”. Press OK.
            Get a dialog saying “Could not find a bitmap font in”. Press OK.
            
              Press Ctrl+L to see if that lets me enter a path. Click everything in the dialog to try to find a way to
              enter a path. Get annoyed. Give up. Click through folder-by-folder to get to where I want to be.
            
            
              Get to the folder and don’t see any files. Change the format to “SVG”. Double-click the newly-visible SVG
              file.
            
            Get a dialog saying “You must select a glyph before you can import an image into it”. Press OK.
            The import dialog goes away, having not imported.
            Select the glyph in the main tool area, then repeat the File→Import dance.
            
              It’s actually there now! Open the glyph in the editor and see it’s a complete mess of Bézier curves. I
              can’t click what I want without accidentally moving a handle for an adjacent curve.
            
            Rage-quit.
          
          
            I’m sure FontForge is less anger inducing once you’re used to it. And you definitely could use it to build a
            font like this if you had much more patience than me. I’d had enough of death-by-a-thousand-paper-cuts
            though.
          
          
            I briefly tried Inkscape’s built-in support for making an SVG font. It annoyed me a lot less, but it’s
            fiddly: it seemed like each font had to be a single path, so you had to convert the glyphs to paths, then
            merge them correctly. If you merge them incorrectly then the wrong bits of your letters end up filled (like
            the inside of the ‘B’). Path manipulation is getting towards the limit of my knowledge of vector editing,
            and it took a bit of trial and error for each letter that had more than a single stroke. I didn’t fancy
            doing that for every letter.
          
          
            I’m usually a big advocate of open source, but this was one of those painful times where it feels like it
            just falls short. Clunky, painful UI and processes where commercial tools just let you get on with your
            work.
          
          You can exchange money for goods and services
          
            When I’d been looking for open source tutorials, I found many mentions of a closed source, hosted tool:
            Calligraphr. It has a free version with limitations (no
            ligatures, no variations, 75 glyphs per font), and a pro version for £8/month. I’d normally balk at the idea
            of a subscription for this, but they have the perfect answer: you can make a one-time payment, and your
            account automatically downgrades back to free after a month. It’s not a hidden option, either, it’s the most
            prominent button on the upgrade page. That made me happy to give them £8 to play around with the service for
            a month.
          
          
            Calligraphr works by having you print templates, write out the letters, then scan them in. It does some
            magical processing to extract the glyphs, provides tools to tidy them up, align them, etc, and then produces
            a TTF file for you. You can see some of my completed templates here:
          
          
            
              
              
              
            
            Most of the templates I used for the font
          
          
            Calligraphr has a nice UI to generate the templates, allowing you to select which glyphs to include. I added
            the “minimal English”, “basic punctuation” and “Ligatures” sets. That gave me four pages to fill out, and I
            did them all twice. That let me filter out versions that didn’t work well, and have variants for some
            letters so the font wasn’t too repetitive. Later on, I went back and added some custom ligatures based on
            blog post titles that didn’t look quite right: “Re”, “To”, “ers”, “ey”, “hy”, “ra”, “re” and “ty”. Ligatures
            like this help it look more natural: when we write we don’t just stamp out identical letters regardless of
            their surroundings, instead they will connect to their neighbours, or overlap slightly, or even share a
            stroke.
          
          
            I filled these templates in with a Sharpie, as I wanted a fairly informal, scrap-booky look, and it would
            also give good solid shapes that should be easy to pick out of the template. I scanned them with the “Scan
            Document” function on my iPhone, and uploaded the PDFs to Calligraphr.
          
          Iterating and tweaking
          
            The Calligraphr UI allows you to preview the font, but I found it a lot more useful to just download a copy
            and use it on a local copy of my website. That let me test it with real text, and see how it’d look at the
            different font sizes I use on the site.
          
          
            The first version was not great. Despite the guidelines on the template, I apparently wasn’t good at
            sticking to them. Some letters were floating way off the baseline, and some were sunken below. When those
            opposites met it looked terrible. Fortunately Calligraphr has a pretty easy tool to slide each letter up and
            down, and scale it up or down if needed, and you can see it next to other letters as you do it. It took a
            little bit of time to go through all the variants of all the letters, but the next version looked a lot
            better.
          
          
            Another tweak I ended up doing was reducing the spacing between letters. The defaults Calligraphr uses are
            probably good for a blocky font, but I wanted to put the letters close together to give it more of a
            joined-up look. Again, this is an easy tool to use, you just drag the sides in or out as desired. While
            these tweaking steps were probably as fiddly as some of the Inkscape steps I refused to do earlier, they’re
            a lot more rewarding as you see things improving with each one. It’s a lot easier for me to commit time and
            effort to improving something that’s already working reasonably, than put that time and energy into an
            unknown.
          
          
            Later, I noticed that occasionally there would be a huge gap in a title. Not “the kerning is slightly off”
            but “there’s enough room to park a bus”. It took me a while to figure out what was happening: a couple of
            glyphs hadn’t been isolated perfectly and had picked up a few pixels from the template lines at the edge of
            their boxes. That meant the glyph had a width that covered the actual written glyph, a big gap, and then the
            rogue marks. At first, I fixed this by just adjusting the width, but that left the little pixels floating
            awkwardly down-sentence. The proper fix was to use the editing tool and simply delete them, and then
            Calligraphr snapped the width back to what it should be.
          
          
            These iterations took a while to do, but I just dipped in and out occasionally over the course of a week, so
            it didn’t actually feel like too much work. I quite enjoy the process of refining things, too.
          
          Result and a surprise
          
            If you’re viewing this post on my website[1], you can see the font in the headers, captions, and a few other places. Here’s how it compares to my
            actual handwriting:
          
          
            
              
              
              
            
            My handwriting vs my handwriting font
          
          
            It’s not close enough to forge documents, but I think it definitely gets across my style, and that’s exactly
            what I wanted. It’s surprisingly legible even at smaller font sizes — I think the weight of the Sharpie
            helps here — and at £8 and a bit of manual work was a lot more economical than spending days wresting with
            open source tools.
          
          
            A few weeks after I put the finishing touches on the font, I got an e-mail from Calligraphr. As my account
            had lapsed back to the free version, I was no longer eligible for the “server-side backup” feature. So what
            did they do? They e-mailed me an exported copy! It’s a JSON file with the properties of each glyph and a
            base64 encoded image. Not only can I re-upload this to Calligraphr if I resubscribe, I can probably hook
            something up to edit it should I ever need to. I’m blown away by how pro-user Calligraphr’s business
            practices are. They’re up-front about pricing, don’t try and get you stuck on an auto-renewing subscription,
            and automatically export your data. It’s like a breath of fresh air compared to the barrage of dark patterns
            that other websites foist on us. If you want to make this kind of font, I’d definitely recommend them just
            because of how nice they are.
          
          
          
            
              
                
                  And I haven’t changed everything since writing this post…
                  ↩︎
                
              
            
          
        ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[MentraOS – open-source Smart glasses OS]]></title>
            <link>https://github.com/Mentra-Community/MentraOS</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45140381</guid>
            <description><![CDATA[Smart glasses OS, with dozens of built-in apps. Users get AI assistant, notifications, translation, screen mirror, captions, and more. Devs get to write 1 app that runs on any pair of smart glases....]]></description>
            <content:encoded><![CDATA[

    
  
  
    
  

Supported Smart Glasses
Works with Even Realities G1, Mentra Mach 1, Mentra Live. See smart glasses compatibility list here.
Apps on Mentra Store
The Mentra Store already has a ton of useful apps that real users are running everyday. Here are some apps already published by developers on the Mentra Store:

Write Once, Run on Any Smart Glasses
MentraOS is how developers build smart glasses apps. We handle the pairing, connection, data streaming, and cross-compatibility, so you can focus on creating amazing apps. Every component is 100% open source (MIT license).
Why Build with MentraOS?

Cross Compatibility: Your app runs on any pair of smart glasses
Speed: TypeScript SDK means you're making apps in minutes, not months
Control: Access smart glasses I/O - displays, microphones, cameras, speakers
Distribution: Get your app in front of everyone using smart glasses

MentraOS Community
The MentraOS Community is a group of developers, companies, and users dedicated to ensuring the next personal computer is open, cross-compatible, and user-controlled. That's why we're building MentraOS.
To get involved, join the MentraOS Community Discord server.
Contact
Have questions or ideas? We'd love to hear from you!

Email: team@mentra.glass
Discord: Join our community
Twitter: Follow @mentralabs

Contributing
MentraOS is made by a community and we welcome PRs. Here's the Contributors Guide: docs.mentra.glass/contributing
License
MIT License Copyright 2025 MentraOS Community


  
  © 2025 Mentra Labs

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Protobuffers Are Wrong (2018)]]></title>
            <link>https://reasonablypolymorphic.com/blog/protos-are-wrong/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45139656</guid>
            <description><![CDATA[I’ve spent a good deal of my professional life arguing against using protobuffers. They’re clearly written by amateurs, unbelievably ad-hoc, mired in gotchas, tricky to compile, and solve a problem that nobody but Google really has. If these problems of protobuffers remained quarantined in serialization abstractions, my complaints would end there. But unfortunately, the bad design of protobuffers is so persuasive that these problems manage to leak their way into your code as well.]]></description>
            <content:encoded><![CDATA[
    I’ve spent a good deal of my professional life arguing against using protobuffers. They’re clearly written by amateurs, unbelievably ad-hoc, mired in gotchas, tricky to compile, and solve a problem that nobody but Google really has. If these problems of protobuffers remained quarantined in serialization abstractions, my complaints would end there. But unfortunately, the bad design of protobuffers is so persuasive that these problems manage to leak their way into your code as well.
Ad-Hoc and Built By Amateurs
Stop. Put away your email client that is half-way through writing me about how “Google is filled with the world’s best engineers,” and that “anything they build is, by definition, not built by amateurs.” I don’t want to hear it.
Let’s just get this out of the way. Full disclosure: I used to work at Google. It was the first (but unfortunately, not the last) place I ever used protobuffers. All of the problems I want to talk about today exist inside of Google’s codebase; it’s not just a matter of “using protobuffers wrong” or some such nonsense like that.
By far, the biggest problem with protobuffers is their terrible type-system. Fans of Java should feel right at home with protobuffers, but unfortunately, literally nobody considers Java to have a well-designed type-system. The dynamic typing guys complain about it being too stifling, while the static typing guys like me complain about it being too stifling without giving you any of the things you actually want in a type-system. Lose lose.
The ad-hoc-ness and the built-by-amateurs-itude go hand-in-hand. So much of the protobuffer spec feels bolted on as an afterthought that it clearly was bolted on as an afterthought. Many of its restrictions will make you stop, scratch your head and ask “wat?” But these are just symptoms of the deeper answer, which is this:
Protobuffers were obviously built by amateurs because they offer bad solutions to widely-known and already-solved problems.
No Compositionality
Protobuffers offer several “features”, but none of them see to work with one another. For example, look at the list of orthogonal-yet-constrained typing features that I found by skimming the documentation.

oneof fields can’t be repeated.
map<k,v> fields have dedicated syntax for their keys and values, but this isn’t used for any other types.
Despite map fields being able to be parameterized, no user-defined types can be. This means you’ll be stuck hand-rolling your own specializations of common data structures.
map fields cannot be repeated.
map keys can be strings, but can not be bytes. They also can’t be enums, even though enums are considered to be equivalent to integers everywhere else in the protobuffer spec.
map values cannot be other maps.

This insane list of restrictions is the result of unprincipled design choices and bolting on features after the fact. For example, oneof fields can’t be repeated because rather than resulting in a coproduct type, instead the code generator will give you a product of mutually-exclusive optional fields. Such a transformation is only valid for a singular field (and, as we’ll see later, not even then.)
The restriction behind map fields being unable to be repeated is related, but shows off a different limitation of the type-system. Behind the scenes, a map<k,v> is desugared into something spiritually similar to repeated Pair<k,v>. And because repeated is a magical language keyword rather than a type in its own right, it doesn’t compose with itself.
Your guess is as good as mine for why an enum can’t be used as a map key.
What’s so frustrating about all of this is a little understanding of how modern type-systems work would be enough to drastically simplify the protobuffer spec and simultaneously remove all of the arbitrary restrictions.
The solution is as follows:

Make all fields in a message required. This makes messages product types.
Promote oneof fields to instead be standalone data types. These are coproduct types.
Give the ability to parameterize product and coproduct types by other types.

That’s it! These three features are all you need in order to define any possible piece of data. With these simpler pieces, we can re-implement the rest of the protobuffer spec in terms of them.
For example, we can rebuild optional fields:
product Unit {
  // no fields
}

coproduct Optional<t> {
  t    value = 0;
  Unit unset = 1;
}
Building repeated fields is simple too:
coproduct List<t> {
  Unit empty = 0;
  Pair<t, List<t>> cons = 1;
}
Of course, the actual serialization logic is allowed to do something smarter than pushing linked-lists across the network—after all, implementations and semantics don’t need to align one-to-one.
Questionable Choices
In the vein of Java, protobuffers make the distinction between scalar types and message types. Scalars correspond more-or-less to machine primitives—things like int32, bool and string. Messages, on the other hand, are everything else. All library- and user-defined types are messages.
The two varieties of types have completely different semantics, of course.
Fields with scalar types are always present. Even if you don’t set them. Did I mention that (at least in proto31) all protobuffers can be zero-initialized with absolutely no data in them? Scalar fields get false-y values—uint32 is initialized to 0 for example, and string is initialized as "".
It’s impossible to differentiate a field that was missing in a protobuffer from one that was assigned to the default value. Presumably this decision is in place in order to allow for an optimization of not needing to send default scalar values over the wire. Presumably, though the encoding guide makes no mention of this optimization being performed, so your guess is as good as mine.
As we’ll see when we discuss protobuffers’ claim to being god’s gift to backwards- and forwards-compatible APIs, this inability to distinguish between unset and default values is a nightmare. Especially if indeed it’s a design decision made in order to save one bit (set or not) per field.
Contrast this behavior against message types. While scalar fields are dumb, the behavior for message fields is outright insane. Internally, message fields are either there or they’re not—but their behavior is crazy. Some pseudocode for their accessor is worth a thousand words. Pretend this is Java or something similar:
private Foo m_foo;

public Foo foo {
  // only if `foo` is used as an expression
  get {
    if (m_foo != null)
      return m_foo;
    else
      return new Foo();
  }

  // instead if `foo` is used as an lvalue
  mutable get {
    if (m_foo = null)
      m_foo = new Foo();
    return m_foo;
  }
}
The idea is that if the foo field is unset, you’ll see a default-initialized copy whenever you ask for it, but won’t actually modify its container. But if you modify foo, it will modify its parent as well! All of this just to avoid using a Maybe Foo type and the associated “headaches” of the nuance behind needing to figure out what an unset value should mean.
This behavior is especially egregious, because it breaks a law! We’d expect the assignment msg.foo = msg.foo; to be a no-op. Instead the implementation will actually silently change msg to have a zero-initialized copy of foo if it previously didn’t have one.
Unlike scalar fields, at least it’s possible to detect if a message field is unset. Language bindings for protobuffers offer something along the lines of a generated bool has_foo() method. In the frequent case of copying a message field from one proto to another, iff it was present, you’ll need to write the following code:
if (src.has_foo(src)) {
  dst.set_foo(src.foo());
}
Notice that, at least in statically-typed languages, this pattern cannot be abstracted due to the nominal relationship between the methods foo(), set_foo() and has_foo(). Because all of these functions are their own identifiers, we have no means of programmatically generating them, save for a preprocessor macro:
#define COPY_IFF_SET(src, dst, field) \
if (src.has_##field(src)) { \
  dst.set_##field(src.field()); \
}
(but preprocessor macros are verboten by the Google style guide.)
If instead all optional fields were implemented as Maybes, you’d get abstract-able, referentially transparent call-sites for free.
To change tack, let’s talk about another questionable decision. While you can define oneof fields in protobuffers, their semantics are not of coproduct types! Rookie mistake my dudes! What you get instead is an optional field for each case of the oneof, and magic code in the setters that will just unset any other case if this one is set.
At first glance, this seems like it should be semantically equivalent to having a proper union type. But instead it is an accursed, unutterable source of bugs! When this behavior teams up with the law-breaking implementation of msg.foo = msg.foo;, it allows this benign-looking assignment to silently delete arbitrary amounts of data!
What this means at the end of the day is that oneof fields do not form law-abiding Prisms, nor do messages form law-abiding Lenses. Which is to say good luck trying to write bug-free, non-trivial manipulations of protobuffers. It is literally impossible to write generic, bug-free, polymorphic code over protobuffers.
That’s not the sort of thing anybody likes to hear, let alone those of us who have grown to love parametric polymorphism—which gives us the exact opposite promise.
The Lie of Backwards- and Forwards-Compatibility
One of the frequently cited killer features of protobuffers is their “hassle-free ability to write backwards- and forwards-compatible APIs.” This is the claim that has been pulled over your eyes to blind you from the truth.
What protobuffers are is permissive. They manage to not shit the bed when receiving messages from the past or from the future because they make absolutely no promises about what your data will look like. Everything is optional! But if you need it anyway, protobuffers will happily cook up and serve you something that typechecks, regardless of whether or not it’s meaningful.
This means that protobuffers achieve their promised time-traveling compatibility guarantees by silently doing the wrong thing by default. Of course, the cautious programmer can (and should) write code that performs sanity checks on received protobuffers. But if at every use-site you need to write defensive checks ensuring your data is sane, maybe that just means your deserialization step was too permissive. All you’ve managed to do is decentralize sanity-checking logic from a well-defined boundary and push the responsibility of doing it throughout your entire codebase.
One possible argument here is that protobuffers will hold onto any information present in a message that they don’t understand. In principle this means that it’s nondestructive to route a message through an intermediary that doesn’t understand this version of its schema. Surely that’s a win, isn’t it?
Granted, on paper it’s a cool feature. But I’ve never once seen an application that will actually preserve that property. With the one exception of routing software, nothing wants to inspect only some bits of a message and then forward it on unchanged. The vast majority of programs that operate on protobuffers will decode one, transform it into another, and send it somewhere else. Alas, these transformations are bespoke and coded by hand. And hand-coded transformations from one protobuffer to another don’t preserve unknown fields between the two, because it’s literally meaningless.
This pervasive attitude towards protobuffers always being compatible rears its head in other ugly ways. Style guides for protobuffers actively advocate against DRY and suggest inlining definitions whenever possible. The reasoning behind this is that it allows you to evolve messages separately if these definitions diverge in the future. To emphasize that point, the suggestion is to fly in the face of 60 years’ worth of good programming practice just in case maybe one day in the future you need to change something.
At the root of the problem is that Google conflates the meaning of data with its physical representation. When you’re at Google scale, this sort of thing probably makes sense. After all, they have an internal tool that allows you to compare the finances behind programmer hours vs network utilization vs the cost to store \(x\) bytes vs all sorts of other things. Unlike most companies in the tech space, paying engineers is one of Google’s smallest expenses. Financially it makes sense for them to waste programmers’ time in order to shave off a few bytes.
Outside of the top five tech companies, none of us is within five orders of magnitude of being Google scale. Your startup cannot afford to waste engineer hours on shaving off bytes. But shaving off bytes and wasting programmers’ time in the process is exactly what protobuffers are optimized for.
Let’s face it. You are not Google scale and you never will be. Stop cargo-culting technology just because “Google uses it” and therefore “it’s an industry best-practice.”
Protobuffers Contaminate Codebases
If it were possible to restrict protobuffer usage to network-boundaries I wouldn’t be nearly as hard on it as a technology. Unfortunately, while there are a few solutions in principle, none of them is good enough to actually be used in real software.
Protobuffers correspond to the data you want to send over the wire, which is often related but not identical to the actual data the application would like to work with. This puts us in the uncomfortable position of needing to choose between one of three bad alternatives:

Maintain a separate type that describes the data you actually want, and ensure that the two evolve simultaneously.
Pack rich data into the wire format for application use.
Derive rich information every time you need it from a terse wire format.

Option 1 is clearly the “right” solution, but its untenable with protobuffers. The language isn’t powerful enough to encode types that can perform double-duty as both wire and application formats. Which means you’d need to write a completely separate datatype, evolve it synchronously with the protobuffer, and explicitly write serialization code between the two. Seeing as most people seem to use protobuffers in order to not write serialization code, this is obviously never going to happen.
Instead, code that uses protobuffers allows them to proliferate throughout the codebase. True story, my main project at Google was a compiler that took “programs” written in one variety of protobuffer, and spit out an equivalent “program” in another. Both the input and output formats were expressive enough that maintaining proper parallel C++ versions of them could never possibly work. As a result, my code was unable to take advantage of any of the rich techniques we’ve discovered for writing compilers, because protobuffer data (and resulting code-gen) is simply too rigid to do anything interesting.
The result is that a thing that could have been 50 lines of recursion schemes was instead 10,000 lines of ad-hoc buffer-shuffling. The code I wanted to write was literally impossible when constrained by having protobuffers in the mix.
While this is an anecdote, it’s not in isolation. By virtue of their rigid code-generation, manifestations of protobuffers in languages are never idiomatic, nor can they be made to be—short of rewriting the code-generator.
But even then, you still have the problem of needing to embed a shitty type-system into the targeted language. Because most of protobuffers’ features are ill-conceived, these unsavory properties leak into our codebases. It means we’re forced to not only implement, but also use these bad ideas in any project which hopes to interface with protobuffers.
While it’s easy to implement inane things out of a solid foundation, going the other direction is challenging at best and the dark path of Eldrich madness at worst.
In short, abandon all hope ye who introduce protobuffers into your projects.



To this day, there’s a raging debate inside Google itself about proto2 and whether fields should ever be marked as required. Manifestos with both titles “optional considered harmful” and “required considered harmful.” Good luck sorting that out.↩︎




    
        ←
    
    
        →
    


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Purposeful animations]]></title>
            <link>https://emilkowal.ski/ui/you-dont-need-animations</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45139088</guid>
            <description><![CDATA[Why you are animating more often than you should.]]></description>
            <content:encoded><![CDATA[When done right, animations make an interface feel predictable, faster, and more enjoyable to use. They help you and your product stand out.
But they can also do the opposite. They can make an interface feel unpredictable, slow, and annoying. They can even make your users lose trust in your product.
So how do you know when and how to animate to improve the experience?
Step one is making sure your animations have a purpose.
Purposeful animations
Before you start animating, ask yourself: what’s the purpose of this animation? As an example, what’s the purpose of this marketing animation we built at Linear?

This animation explains how Product Intelligence (Linear’s feature) works. We could have used a static asset, but the animated version helps the user understand what this feature does, straight in the initial viewport of the page.
Another purposeful animation is this subtle scale down effect when pressing a button. It’s a small thing, but it helps the interface feel more alive and responsive.

Sonner’s enter animation, on the other hand, has two purposes:

- Having a toast suddenly appear would feel off, so we animate it in.
- Because it comes from and leaves in the same direction, it creates spatial consistency, making the swipe-down-to-dismiss gesture feel more intuitive.


But sometimes the purpose of an animation might just be to bring delight.
Morphing of the feedback component below helps make the experience more unique and memorable. This works as long as the user will rarely interact with it. It’ll then become a pleasant surprise, rather than a daily annoyance.
Press on the button to see it morph.
Used multiple times a day, this component would quickly become irritating. The initial delight would fade and the animation would slow users down.
How often users will see an animation is a key factor in deciding whether to animate or not. Let’s dive deeper into it next.
Frequency of use
I use Raycast hundreds of times a day. If it animated every time I opened it, it would be very annoying. But there’s no animation at all. That’s the optimal experience.
To see it for yourself, try to toggle the open state of the menu below by using the buttons belowpressing J and then K. Which one feels better if used hundreds of times a day?
Command MenuLinearApplicationChatGPTApplicationCursorApplicationFigmaApplicationObsidianApplicationClipboard HistoryCommandEmoji PickerCommand
When I open Raycast, I have a clear goal in mind. I don’t expect to be “delighted”, I don’t need to be. I just want to do my work with no unnecessary friction.
Think about what the user wants to achieve and how often they will see an animation. A hover effect is nice, but if used multiple times a day, it would likely benefit the most from having no animation at all.
Imagine you interact with this list often during the day.
Imagine you interact with this list often during the day.The same goes for keyboard-initiated actions. These actions may be repeated hundreds of times a day, an animation would make them feel slow, delayed, and disconnected from the user’s actions. You should never animate them.
Since we can’t really use a keyboard on touch devices, you can press the buttons below to see how it feels with and without animation.
To see it for yourself, focus on the input below and use arrow keys to navigate through the list. Notice how the highlight feels delayed compared to the keys you press. Now press  (shift) and see how this interaction feels without animation.Command MenuLinearApplicationChatGPTApplicationCursorApplicationFigmaApplicationObsidianApplicationClipboard HistoryCommandEmoji PickerCommandPress shift to toggle the animation
But even if your animation won’t be used too often and it fulfills a clear purpose, you still have to think about its speed…
Perception of speed
Unless you are working on marketing sites, your animations have to be fast. They improve the perceived performance of your app, stay connected to user’s actions, and make the interface feel as if it’s truly listening to the user.
To give you an example, a faster-spinning spinner makes the app seem to load faster, even though the load time is the same. This improves perceived performance.
Which one works harder to load the data?
A 180ms dropdown animation feels more responsive than a 400ms one:
Click on the buttons to compare the speed.
As a rule of thumb, UI animations should generally stay under 300ms.
Another example of the importance of speed: tooltips should have a slight delay before appearing to prevent accidental activation. Once a tooltip is open however, hovering over other tooltips should open them with no delay and no animation.
This feels faster without defeating the purpose of the initial delay.
Radix UI and Base UI skip the delay once a tooltip is shown.
Radix UI and Base UI skip the delay once a tooltip is shown.Building great interfaces
The goal is not to animate for animation’s sake, it’s to build great user interfaces. The ones that users will happily use, even on a daily basis. Sometimes this requires animations, but sometimes the best animation is no animation.
Knowing when to animate is just one of many things you need to know in order to craft great animations. If you’d like to dive deeper into the theory and practice of it, I’ve created a course that covers everything you need to know:
Check out "Animations on the Web"]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[I ditched Docker for Podman]]></title>
            <link>https://codesmash.dev/why-i-ditched-docker-for-podman-and-you-should-too</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45137525</guid>
        </item>
    </channel>
</rss>