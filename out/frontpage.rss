<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Thu, 28 Aug 2025 15:09:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[How to Install TrueNAS on a Raspberry Pi]]></title>
            <link>https://www.jeffgeerling.com/blog/2025/how-install-truenas-on-raspberry-pi</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45052429</guid>
            <description><![CDATA[Now that Joel0 in the TrueNAS community has created a fork of TrueNAS that runs on Arm, I thought I'd give it a spin—on a Raspberry Pi.]]></description>
            <content:encoded><![CDATA[Now that Joel0 in the TrueNAS community has created a fork of TrueNAS that runs on Arm, I thought I'd give it a spin—on a Raspberry Pi.



I currently run an Ampere Arm server in my rack with Linux and ZFS as my primary storage server, and a Raspberry Pi with four SATA SSDs and ZFS as backup replica in my studio. My configuration for these Arm NASes is up on GitHub.

I've been looking forward to TrueNAS support on Arm for years, though it seems the sentiment in that community was 'Arm servers aren't powerful enough to run serious storage servers'—despite myself and many others doing so for many years... but that's besides the point.

On a Raspberry Pi?

Yes, in fact.

I've found numerous times, running modern applications on slower hardware is an excellent way to expose little configuration flaws and misconceptions that lead to learning how to run the applications much better on more capable machines.



From my Pi Dramble to my Petabyte Pi Project, running apps intended for much more powerful hardware taught me a lot. So maybe running TrueNAS, which demands 8 GB of RAM and 16 GB of primary storage, would be a fun learning exercise.

I've done it on x86 servers, but that's boring. It's easy. I don't learn much when a project goes off without a hitch, and I'm not forced to look closer at some of the configuration quirks.

On a Raspberry Pi, there's no UEFI

One glaring problem with the Raspberry Pi is no official support for UEFI, a standard way to boot computers and interface operating systems to device firmware. Raspberry Pi only officially supports device-tree-based Linux booting, which is much less standard. That means you can't just throw any old Linux distribution on the Pi, you have to have ones tailored to the Pi. There are good OSes for the Pi, like Raspberry Pi OS, based on Debian. But it's not the same as grabbing Windows on Arm and installing it on my Ampere workstation.

To get past this restriction, we have to rely on a community project, forked from Windows on Raspberry Pi. Specifically, I'm using NumberOneGit's rpi5-uefi fork.

To get your Pi 5 to support UEFI (CM5 process may be slightly different):


Update the EEPROM to the 2025-06-09 release (or later - check what version you're running in Pi OS with the command rpi-eeprom-update):
 a. Typically, you can upgrade using Raspberry Pi Imager, sudo apt full-upgrade -y, or sudo rpi-eeprom-update -a. However, at the time of this writing, those methods will get you to the latest stable release (2025-05-08), so until then, use one of these methods:
 b. Manually update the bootloader with usbboot from source.
 c. Switch to the beta bootloader release channel: sudo nano /etc/default/rpi-eeprom-update, then change latest to beta, and run sudo rpi-eeprom-update -a.
 d. Verify the bootloader version you're running with rpi-eeprom-update after a reboot.
Download the latest .zip file release from rpi5-uefi Releases.
Take a microSD card that's already formatted for the Pi (I just pulled the Pi OS card out of my Pi 5 that I just used for the EEPROM update), and clear out the contents of the FAT32 'bootfs' volume. Copy all the contents of the .zip file you downloaded into that folder (including RPI_EFI.fd).
Eject the microSD card, insert it into the Pi, and power it on with an HDMI display connected.
You should see a Raspberry Pi logo and the EDK2 bootloader screen appear. Unless you have NVMe or USB boot media installed, it will say "Press any key to enter the Boot Manager Menu."
Since I couldn't find the 'any' key, I pressed 'Enter', then I could navigate through a standard boot manager menu. In there you can configure SD card speeds, set the PCIe bus speed, etc.
After you've changed the settings to your liking (see some suggestions for Linux), save and reset.




TrueNAS on a Pi 5

Now that the Pi is booting into UEFI mode, you can install TrueNAS. To do that:


Download a TrueNAS on Arm ISO from https://truenas-releases.jmay.us (I chose 25.04.2).
Use a tool like Etcher to write the ISO to a USB drive.
After Etcher finishes, eject the USB drive and insert it into the Pi (I used a USB 3 thumb drive, so I inserted it into one of the blue USB 3 ports on the Pi for maximum speed).
If it doesn't automatically boot to the TrueNAS installer, select the external USB drive in the UEFI boot manager and boot into the TrueNAS installer.
Follow the TrueNAS installer's prompts to install TrueNAS on any device other than the installer drive or the microSD card (I used a second USB flash drive plugged into the other USB 3 port). Wait for installation to complete.
When prompted, reboot and remove the USB drive.


TrueNAS SCALE should boot up, and the first boot can take a while as many services need to generate files, configure services, and start them the first time.



In my case, on first boot, the ix-etc service failed to start (it timed out), and its purpose is to Generate TrueNAS /etc files. After booting, I chose to enter the Linux console, then ran systemctl start ix-etc, and rebooted.

After a reboot, TrueNAS seemed to launch all its services without issue, including the web UI. I visited the IP address printed on the console, logged in as the admin user I set up during install, and was greeted with the TrueNAS dashboard:



Current Limitations

Right now, most of the limitations are around missing features in UEFI mode; since Raspberry Pi hasn't pushed RP1 support into the Linux kernel, and nobody's yet reverse-engineered RP1 interfaces, you can't use:


Fan header PWM support (no fan control)
CSI/DSI connections for displays/cameras
GPIO
Built-in Ethernet


The Ethernet limitation is especially annoying, as you are forced to use an external USB Ethernet dongle, just like on most non-Qualcomm systems running Windows on Arm.

Andrea della Porta from SUSE is working on upstreaming RP1 support into Linux with some help from Raspberry Pi, but progress has been a bit slow.

What I've been wondering lately, more and more: why doesn't Raspberry Pi consider official UEFI support in the first place? With or without Microsoft's official blessing, being able to boot vanilla Windows 11 for Arm on the Pi would be neat. Not to mention, any regular Linux Arm distro (including TrueNAS SCALE) would boot too...

Next Steps

I recently received a new hardware project, the Homelabs Pi Storage server, which uses a custom CM5 SATA backplane and a 3D printable enclosure for a 6-bay NAS:



I got TrueNAS installed on a CM5 Lite (using the same process as above), but when I installed four SATA hard drives, they spun up, but were not recognized. Right now the Pi 5 UEFI support doesn't allow for more than one PCIe device, and the Homelabs Pi Storage server has a PCIe switch that branches off to 2.5 Gbps Ethernet and a 6-port SATA controller.

These devices all work perfectly out of the box on Raspberry Pi OS (and I was able to set up a ZFS array, getting 250 MB/s over the built-in 2.5G Ethernet—see below), but they aren't recognized currently when running under UEFI :(



I'm already running vanilla ZFS under Raspberry Pi OS on my other Raspberry Pi storage server, and that's running on four SSDs and no hard drives. It can sustain 200 MB/sec writes, and I presume TrueNAS would be able to do the same.

There are also NVMe-only boards, like the $50 GeeekPi N16 Quad-NVMe HAT, which provide a pretty small footprint all-flash server option. But again, since those boards use switch chips (because the Pi is limited to 1 PCIe lane), none of those drives would be accessible to TrueNAS as it stands today. Your best bet if you want to use TrueNAS instead of just managing ZFS on you own on a Pi would be to use a single-purpose HAT or SATA controller or HBA in IT mode, to connect disks directly to the Pi.

Because of the current UEFI limitations, I would still recommend running TrueNAS on higher-end Arm hardware (like Ampere servers). If you want to stick to an SBC, there's UEFI firmware for RK3588 platforms under active development. It may offer even more functionality for some boards, so check the compatibility list.

Or you could be boring and just install TrueNAS on x86, where it's fully supported ;)]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AI adoption linked to 13% decline in jobs for young U.S. workers, Stanford study]]></title>
            <link>https://www.cnbc.com/2025/08/28/generative-ai-reshapes-us-job-market-stanford-study-shows-entry-level-young-workers.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45052423</guid>
            <description><![CDATA[A Standford study has found evidence that the widespread adoption of generative AI is impacting the job prospects of early career workers.]]></description>
            <content:encoded><![CDATA[A Standford study has found evidence that the widespread adoption of generative AI is impacting the job prospects of early career workers.Vertigo3d | E+ | Getty ImagesThere is growing evidence that the widespread adoption of generative AI is impacting the job prospects of America's workers, according to a paper released on Tuesday by three Stanford University researchers.The study analyzed payroll records from millions of American workers, generated by ADP, the largest payroll software firm in the U.S.The report found "early, large-scale evidence consistent with the hypothesis that the AI revolution is beginning to have a significant and disproportionate impact on entry-level workers in the American labor market."Most notably, the findings revealed that workers between the ages of 22 and 25 in jobs most exposed to AI — such as customer service, accounting and software development — have seen a 13% decline in employment since 2022.By contrast, employment for more experienced workers in the same fields, and for workers of all ages in less-exposed occupations such as nursing aides, has stayed steady or grown. Jobs for young health aides, for example, rose faster than their older counterparts.Front-line production and operations supervisors' roles also showed an increase in employment for young workers, though this growth was smaller than that for workers over the age of 35.The potential impact of AI on the job market has been a concern across industries and age groups, but the Stanford study appears to show that the results will be far from uniform. The study sought to rule out factors that could skew the data, including education level, remote work, outsourced jobs, and broader economic shifts, which could impact hiring decisions.According to the Stanford study, their findings may explain why national employment growth for young workers has been stagnant, while overall employment has largely remained resilient since the global pandemic, despite recent signs of softening.Young workers were said to be especially vulnerable because AI can replace "codified knowledge," or "book-learning" that comes from formal education. On the other hand, AI may be less capable of replacing knowledge that comes from years of experience. The researchers also noted that not all uses of AI are associated with declines in employment. In occupations where AI complements work and is used to help with efficiency, there have been muted changes in employment rates.The study — which hasn't been peer-reviewed — appears to show mounting evidence that AI will replace jobs, a topic that has been hotly debated. Earlier this month, a Goldman Sachs economist said changes to the American labor market brought on by the arrival of generative AI were already showing up in employment data, particularly in the technology sector and among younger employees. He also noted that most companies were yet to deploy artificial intelligence for day-to-day use, meaning that the job market impact had yet to be fully realized.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The sisters "paradox" – counter-intuitive probability]]></title>
            <link>https://blog.engora.com/2025/08/the-sisters-paradox-counter-intuitive.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45051798</guid>
        </item>
        <item>
            <title><![CDATA[GPUPrefixSums – state of the art GPU prefix sum algorithms]]></title>
            <link>https://github.com/b0nes164/GPUPrefixSums</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45051542</guid>
            <description><![CDATA[A nearly complete collection of prefix sum algorithms implemented in CUDA, D3D12, Unity and WGPU. Theoretically portable to all wave/warp/subgroup sizes.  - GitHub - b0nes164/GPUPrefixSums: A nearl...]]></description>
            <content:encoded><![CDATA[GPU Prefix Sums

GPUPrefixSums aims to bring state-of-the-art GPU prefix sum techniques from CUDA and make them available in portable compute shaders. In addition to this, it contributes "Decoupled Fallback," a novel fallback technique for Chained Scan with Decoupled Lookback that should allow devices without forward thread progress guarantees to perform the scan without crashing. The D3D12 implementation includes an extensive survey of GPU prefix sums, ranging from the warp to the device level; all included algorithms utilize wave/warp/subgroup (referred to as "wave" hereon) level parallelism but are completely agnostic of wave size. As a measure of the quality of the code, GPUPrefixSums has also been implemented in CUDA and benchmarked against Nvidia's CUB library. Although GPUPrefixSums aims to be portable to any wave size supported by HLSL, [4, 128], due to hardware limitations, it has only been tested on wave sizes 4, 16, 32, and 64. You have been warned!
If you are interested in prefix sums for their use in radix sorting, check out GPUPrefixSum's sibling repository GPUSorting!
Decoupled Fallback
In Decoupled Fallback, a threadblock will spin for a set amount of cycles while waiting for the reduction of a preceding partition tile. If the maximum spin count is exceeded, the threadblock is free to perform a fallback operation. Multiple thread blocks are allowed to perform fallbacks on the same deadlocking tile, but through use of atomic compare and swap, only one thread block ends up broadcasting its reduction in device memory. Although this means potentially performing redundant calculations, the upside is that fallback performance is no longer limited by the latency of signal propagation between thread blocks.
As of writing this 9/22/2024, Decoupled Fallback shows promising results on Apple M GPU's. However the version included here are out of date, with the most up-to-date development occuring in Vello.
Survey

A prefix sum, also called a scan, is a running total of a sequence of numbers at the n-th element. If the prefix sum is inclusive the n-th element is included in that total, if it is exclusive, the n-th element is not included. The prefix sum is one of the most important algorithmic primitives in parallel computing, underpinning everything from sorting, to compression, to graph traversal.
Basic Scans


Kogge-Stone





Sklansky





Brent-Kung





Reduce Scan





Raking Reduce-Scan



Warp-Synchronized Scans


Warp-Sized-Radix Brent-Kung





Warp-Sized-Radix Brent-Kung with Fused Upsweep-Downsweep





Warp-Sized-Radix Sklansky





Warp-Sized-Radix Serial





Warp-Sized-Radix Raking Reduce-Scan



Block-Level Scan Pattern


First Partition





Second Partition and Onwards



Device Level Scan Pattern (Reduce-Then-Scan)


Reduce





Scan Along the Intermediate Reductions





Scan and Pass in Intermediate Values



Getting Started
GPUPrefixSumsD3D12
Headless implementation in D3D12, includes:

Reduce then Scan
Chained Scan with Decoupled Lookback
Chained Scan with Decoupled Lookback Decoupled Fallback

Requirements:

Visual Studio 2019 or greater
Windows SDK 10.0.20348.0 or greater

The repository folder contains a Visual Studio 2019 project and solution file. Upon building the solution, NuGet will download and link the following external dependencies:

DirectX 12 Agility SDK
DirectX Shader Compiler
Microsoft Windows Implementation Library

See the repository wiki for information on running tests.
GPUPrefixSumsCUDA
GPUPrefixSumsCUDA includes:

Reduce then Scan
Chained Scan with Decoupled Lookback

The purpose of this implementation is to benchmark the algorithms and demystify their implementation in the CUDA environment. It is not intended for production or use; instead, a proper implementation can be found in the CUB library.
Requirements:

Visual Studio 2019 or greater
Windows SDK 10.0.20348.0 or greater
CUDA Toolkit 12.3.2
Nvidia Graphics Card with Compute Capability 7.x or greater.

The repository folder contains a Visual Studio 2019 project and solution file; there are no external dependencies besides the CUDA toolkit. The use of sync primitives necessitates Compute Capability 7.x or greater. See the repository wiki for information on running tests.
GPUPrefixSumsUnity
Released as a Unity package includes:

Reduce then Scan
Chained Scan with Decoupled Lookback

Requirements:

Unity 2021.3.35f1 or greater

Within the Unity package manager, add a package from git URL and enter:
https://github.com/b0nes164/GPUPrefixSums.git?path=/GPUPrefixSumsUnity
See the repository wiki for information on running tests.
GPUPrefixSumsWGPU
WARNING: TESTING ONLY CURRENTLY, NOT FULLY PORTABLE
Barebones implementation--no vectorization, no wave intrinsics--to be used as a testbed.
Requirements:

wgpu 22.0
pollster 0.3
bytemuck 1.16.3

Interesting Reading and Bibliography
Duane Merrill and Michael Garland. “Single-pass Parallel Prefix Scan with De-coupled Lookback”. In: 2016.
url: https://research.nvidia.com/publication/2016-03_single-pass-parallel-prefix-scan-decoupled-look-back
Grimshaw, Andrew S. and Duane Merrill. “Parallel Scan for Stream Architectures.” (2012).
url: https://libraopen.lib.virginia.edu/downloads/6t053g00z
Matt Pettineo. GPU Memory Pools in D3D12. Jul. 2022.
url: https://therealmjp.github.io/posts/gpu-memory-pool/
Ralph Levien. Prefix sum on portable compute shaders. Nov. 2021.
url: https://raphlinus.github.io/gpu/2021/11/17/prefix-sum-portable.html
Tyler Sorensen, Hugues Evrard, and Alastair F. Donaldson. “GPU Schedulers: How Fair Is Fair Enoughl”. In: 29th International Conference on Concurrency Theory (CONCUR 2018). Ed. by Sven Schewe and Lijun Zhang. Vol. 118. Leibniz International Proceedings in Informatics (LIPIcs). Dagstuhl, Germany: Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik, 2018, 23:1–23:17. isbn: 978-3-95977-087-3. doi: 10.4230/LIPIcs.CONCUR.2018.23.
url: http://drops.dagstuhl.de/opus/volltexte/2018/9561.
Vasily Volkov. “Understanding Latency Hiding on GPUs”. PhD thesis. EECS Department, University of California, Berkeley, Aug. 2016.
url: http://www2.eecs.berkeley.edu/Pubs/TechRpts/2016/EECS-2016-143.html
Zhe Jia et al. Dissecting the NVidia Turing T4 GPU via Microbenchmarking. 2019. arXiv: 1903.07486.
url: https://arxiv.org/abs/1903.07486
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Group Borrowing: Zero-Cost Memory Safety with Fewer Restrictions]]></title>
            <link>https://verdagon.dev/blog/group-borrowing</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45051345</guid>
            <description><![CDATA[Aug 28, 2025
        

                 —]]></description>
            <content:encoded><![CDATA[
  

        
          
  

            
    

              
    

              Aug 28, 2025
        

                 — 
          

                
        

              
      

            
    


If you've read my blog before, you know that memory safety is a huge unsolved problem, and that there's a vast unexplored space between the various memory safety models. The discerning eye can infer that we're starting to see the lines blur between these seemingly unrelated memory safety approaches.





This is ridiculously exciting to me, because today's popular memory-safe languages are very limited: they're fast, or they're flexible, but not both. Finding new blends is an incredibly challenging and worthy endeavor... one which has claimed the sanity of many explorers.





A few of us have been approaching the problem by starting with reference counting or garbage collection (or generational references!) and allowing functions to "borrow" those objects with much less--or zero--overhead. 0


In my biased 1 opinion, these approaches have some strong benefits. But they're not a panacea, and the world needs more approaches here.





And luckily, my good friend Nick Smith (from the Mojo community 2) has been exploring exactly that for the past few years.


I think he's found a way to add mutable aliasing directly into a borrow checker without building on a foundation of reference counting, garbage collection, or generational references. In other words, an approach for zero-overhead mutable aliasing, which is a big deal. 3





After reading his original explanation here, I knew that it should definitely be more widely known. He's graciously allowed me to take a shot at explaining it, so here we are!





I'll try to explain the approach as simply as possible, but if you have any questions, Nick can be found in the Mojo server (username nick.sm), or feel free to ask me in the r/vale subreddit or the Vale discord's #languages channel. And if you find this interesting, consider sponsoring Nick!





Also, this article is gloriously long and has a lot of context, so I'll let you know when to skip ahead.




      
  


      
      Group Borrowing: Zero-Cost Memory Safety with Fewer Restrictions
    


 Foundation: Builds on C++'s "Single Ownership"


 Recap of Rust Borrowing



 Context and Comments on Borrow Checking Limitations


 An example



 Nick's Borrowing System



 Basic Mutable Aliasing


 When to Invalidate References to Contents



 A More Complex Example



 Child groups



 print(hp_ref)


 print(ring_ref)


 print(len(rings_list_ref))


 print(s.durability)


 Child Groups, Summarized



 Where do groups come from?


 Isolation


 Functions' Group Annotations



 A More Complex Example


 Paths


 Syntax



 The approach, summarized


 Does the approach really not have unique references?



 Comparison to Borrow Checking


 Where we go from here


 Conclusion



      
      
    

      
    


1

My language Vale uses one of these approaches, so I'm of course biased to see its benefits more strongly than others!





2

Disclaimer: I work on the Mojo team at Modular! But I'll keep this post more about Nick's discovery in general, rather than how it would do in any specific language.





3

My long-time readers will recognize my cognitive dissonance here because I think such a thing is a myth.

Nick's approach makes me question that, though. At the very least, we're much closer to achieving the myth, if he hasn't solved it completely already.





        
    


    
    
  


 Foundation: Builds on C++'s "Single Ownership"

TL;DR: Nick's approach is based on single ownership, like C++ and Rust. Every value is "owned" by a containing object, array, stack frame, or global.


If you know how C++ and Rust work already, skip ahead!





If you don't know, or just like reading, I'll explain what single ownership is.





For example if we have this C++ program:


    
      
      #include <vector>
struct Engine { int fuel; };
struct Spaceship { unique_ptr<Engine> engine; };
void foo(vector<Spaceship>* ships) { ... }
void main() {
    vector<Spaceship> ships;
    ...
    foo(&ships);
}
    
  

...we can say this:



main's stack frame "owns" vector<Spaceship> ships;


The vector<Spaceship> ships; owns each Spaceship.


Each Spaceship owns its Engine (via the unique_ptr).


Each Engine owns its int fuel;


foo does not own the vector, it just has a raw pointer.


main's stack frame owns foo's stack frame.


main is the only thing without an owner.



If you've coded in C++ or Rust, you're probably familiar with this mindset.





If you've coded in C, you might think like this too, even though C doesn't explicitly track single ownership. If you trace an object's journey all the way from its malloc() call to its free() call, all of the variables/fields that the pointer passes through are dealing with the "owning pointer", so to speak. It's almost like how detectives track the "chain of custody" for evidence. In other words, who is responsible for it at any given moment.





Heck, even Java and C# programmers sometimes think in terms of single ownership. If you're supposed to call an object's "dispose"/"cleanup"/"destroy"/"unregister"/etc. method at some point, you can trace that object's journey all the way from new to that (conceptually destructive) method call, and those are the variables/fields that are handling its "owning reference", so to speak.





Single ownership, as explained so far, is the foundation for a lot of languages:



If you add regular (unrestricted) pointers and references, you get C++.


If you add generational references and region borrowing, you get Vale.


If you add "aliasable-xor-mutable" references, you get Rust.


If you add "group borrowing", you get Nick's system.



Nick's system is the main topic of this article, but for some context, and to know why Nick's system stands out, let's take a quick detour to recap how Rust's borrow checking works.




      
    
      
  


 Recap of Rust Borrowing

To truly appreciate Nick's approach, it's helpful to know the limitations of Rust's borrow checker.


TL;DR: Rust's borrow checker has the "aliasing xor mutable" rule which makes it conservative. This means it rejects a lot of valid programs and useful patterns 4 and it causes accidental complexity for some use cases. 5


If you're already familiar with Rust's limitations, skip ahead to Nick's approach!





If not, here's a very simplified explanation of Rust's borrow checking, and I'll overview the limitations in the next section.


I'll assume some knowledge of modern C++, but if you're primarily a C programmer, check out this post instead.





There are two kinds of references: readwrite, and readonly. These are often called "mutable" and "immutable" (or more accurately "unique" and "shared") but for now, think of them as readwrite and readonly.





There are a few ways to get a readwrite reference:



If you own an object, you can get a single temporary "readwrite" reference for a certain scope (function body, loop body, then/else body, etc). During this scope, you can't access the original object directly, you must use that reference.


If you have a readwrite reference to an object (a struct, collection, etc.), you can get a readwrite reference to one of its fields (or elements) for a certain scope. During this scope, the original reference can't be used.






Using these is pretty restrictive. Because of that first rule:



You can never have two usable readwrite references to the same object in the same scope.


You can never have two usable readwrite references to an object and its field at the same time. In other words, while you have a readwrite reference to a Spaceship's Reactor, you can't read or write that Spaceship.






Now, let's introduce "readonly" references. They operate by different rules:



If you have a readwrite reference, you can get any number of temporary "readonly" references for a certain scope. During this scope, the readwrite reference is inaccessible.


In a scope, if you have an readonly reference to an object (a struct, collection, etc.), you can get a readonly reference to one of its fields (or elements) for that scope.






Rust adds some quality-of-life improvements to make this a little easier. For example, you can get a bunch of immutable references directly from an owned object. It's actually not that bad if you're writing a program that inherently agrees with the rules, like compilers, games using ECS, stateless web servers, or generally anything that transforms input data to output data.




      
  

    

4

Like observers, intrusive data structures, back-references and graphs (like doubly-linked lists), delegates, etc.





5

Like mobile/web apps, games using EC, or stateful servers... generally, things that inherently require a lot of state.





        

    
    
  


 Context and Comments on Borrow Checking Limitations

One can't improve on a paradigm unless they know its limitations. So let's talk about borrow checking's limitations!





Because of those "inaccessible" rules, we can never have a readwrite reference and a readonly reference to an object at the same time. This restriction is known as "aliasability xor mutability".


In theory this doesn't sound like a problem, but in practice it means you can't implement a lot of useful patterns like observers, intrusive data structures, back-references, graphs (like doubly-linked lists), delegates, etc. and it causes accidental complexity for use cases like mobile/web apps, games using EC, or stateful servers... generally, things that inherently require a lot of state.


But borrow checking is generally worth it, because it means we get memory safety without run-time overhead.





Well, mostly.


Like I explain in this post, it's not really free; even if you avoid Rc/RefCell/etc., borrow checking can often incur hidden costs, like extra bounds checking or potentially expensive cloning and hashing.


The borrow checker has long been known to reject programs that are actually safe, causing you to add and change code to satisfy its constraints. When this happens, one might just shrug and say "the borrow checker is conservative," but in reality, the borrow checker is imposing accidental complexity.





And besides, we know that mutable aliasing doesn't conflict with zero-cost memory safety, as we learned from the Arrrlang thought experiment. The only question is... can we get the best of both worlds?





      
    
      
  


 An example

(Or skip ahead to Nick's approach if you understood the above!)





Here's an example (source):


    
      
      struct Entity {
    hp: u64,
    energy: u64,
}
impl Entity { ... }
fn attack(a: &mut Entity, d: &mut Entity) { ... }
fn main() {
    let mut entities = vec![
        Entity { hp: 10, energy: 10 },
        Entity { hp: 12, energy: 7 }
    ];
    attack(&mut entities[0], &mut entities[1]);
}
    
  

Rust rejects this, giving this output:


    
      
      error[E0499]: cannot borrow `entities` as mutable more than once at a time
  --> src/main.rs:35:35
   |
35 |     attack(&mut entities[0], &mut entities[1]);
   |     ------      --------          ^^^^^^^^ second mutable borrow occurs here
   |     |           |
   |     |           first mutable borrow occurs here
   |     first borrow later used by call
   |
   = help: use `.split_at_mut(position)` to obtain two mutable non-overlapping sub-slices
    
  

Alas, .split_at_mut isn't always great in practice (reasons vary) 6 and besides, we sometimes want to have two &mut referring to the same object.





The more universal workaround is to use IDs and a central collection, like this (source, uses slotmap):


    
      
      fn attack(
    entities: &mut SlotMap<DefaultKey, Entity>,
    attacker_id: DefaultKey,
    defender_id: DefaultKey
) -> Result<(), String> {
    let a = entities
        .get(attacker_id)
        .ok_or_else(|| "Attacker not found in entities map".to_string())?;
    let d = entities
        .get(defender_id)
        .ok_or_else(|| "Defender not found in entities map".to_string())?;

    let a_energy_cost = a.calculate_attack_cost(d);
    let d_energy_cost = d.calculate_defend_cost(a);
    let damage = a.calculate_damage(d);

    let a_mut = entities
        .get_mut(attacker_id)
        .ok_or_else(|| "Attacker not found in entities map".to_string())?;
    a_mut.use_energy(a_energy_cost);

    let d_mut = entities
        .get_mut(defender_id)
        .ok_or_else(|| "Defender not found in entities map".to_string())?;
    d_mut.use_energy(d_energy_cost);
    d_mut.damage(damage);

    Ok(())
}
    
  

This is using the slotmap crate (similar to generational_arena), though you often see this pattern with HashMap instead (or one could also use raw indices into a Vec, though that risks use-after-release problems).





If you want it to be more efficient, you might be tempted to get two mutable references up-front:


    
      
      fn attack(
    entities: &mut SlotMap<DefaultKey, Entity>,
    attacker_id: DefaultKey,
    defender_id: DefaultKey
) -> Result<(), String> {
    let a = entities
        .get_mut(attacker_id)
        .ok_or_else(|| "Attacker not found in entities map".to_string())?;
    let d = entities
        .get_mut(defender_id)
        .ok_or_else(|| "Defender not found in entities map".to_string())?;
    let a_energy_cost = a.calculate_attack_cost(d);
    let d_energy_cost = d.calculate_defend_cost(a);
    let damage = a.calculate_damage(d);
    a.use_energy(a_energy_cost);
    d.use_energy(d_energy_cost);
    d.damage(damage);
    Ok(())
}
    
  




But alas, rustc complains:


    
      
      error[E0499]: cannot borrow `*entities` as mutable more than once at a time
  --> src/main.rs:34:13
   |
31 |     let a = entities
   |             -------- first mutable borrow occurs here
...
34 |     let d = entities
   |             ^^^^^^^^ second mutable borrow occurs here
...
37 |     let a_energy_cost = a.calculate_attack_cost(d);
   |                         - first borrow later used here
    
  

...because we're mutably borrowing entities twice: once in a's get_mut call, and once in d's get_mut call, and their usages overlap.





Or, said differently, it's worried that a and d might be pointing to the same Entity, thus violating aliasability-xor-mutability.





But why is a compiler telling me that an Entity can't attack itself? That's odd, because in this game, that's totally allowed. Even pokémon can hurt themselves in their confusion.





One might say, "because that's a memory safety risk!" But that's not necessarily true. From what I can tell, that code would be just fine, and not risk memory safety. And in fact, Nick's system handles it just fine.





So let's take a look at Nick's system!





      
  

6

For example, if you need N references instead of just 2, or they don't need to be / shouldn't be distinct, or you want to still hold a reference while also holding those N references, etc.





    
    
      
  


 Nick's Borrowing System

As I explain Nick's system, please keep in mind:



I'm taking some terminology liberties: the proposal calls them "regions", but here I'm describing them as "groups", mainly because I know that "regions" tends to get misinterpreted as "arenas". These are not arenas. 7


This proposal is from about a year ago, and Nick's been working on an even better iteration since then that's not ready yet. Subscribe to the RSS feed because I'll be posting about Nick's next proposal when it comes!


Nick's proposal is for Mojo, so the code examples are modified Mojo syntax.






Our goal is to write something like the Rust attack function from the last section:


    
      
      fn attack(
    entities: &mut SlotMap<DefaultKey, Entity>,
    attacker_id: DefaultKey,
    defender_id: DefaultKey
) -> Result<(), String> {
    let a = entities
        .get(attacker_id)
        .ok_or_else(|| "Attacker not found in entities map".to_string())?;
    let d = entities
        .get(defender_id)
        .ok_or_else(|| "Defender not found in entities map".to_string())?;

    let a_energy_cost = a.calculate_attack_cost(d);
    let d_energy_cost = d.calculate_defend_cost(a);
    let damage = a.calculate_damage(d);

    let a_mut = entities
        .get_mut(attacker_id)
        .ok_or_else(|| "Attacker not found in entities map".to_string())?;
    a_mut.use_energy(a_energy_cost);

    let d_mut = entities
        .get_mut(defender_id)
        .ok_or_else(|| "Defender not found in entities map".to_string())?;
    d_mut.use_energy(d_energy_cost);
    d_mut.damage(damage);

    Ok(())
}
    
  




But we're going to write it with memory-safe mutable aliasing, so it's simpler and shorter!





A sneak peek of what it would look like:


    
      
      fn attack[mut r: group Entity](
    ref[r] a: Entity,
    ref[r] d: Entity):
  a_power = a.calculate_attack_power()
  a_energy_cost = a.calculate_attack_cost(d)
  d_armor = d.calculate_defense()
  d_energy_cost = d.calculate_defend_cost(a)
  a.use_energy(a_energy_cost)
  d.use_energy(d_energy_cost)
  d.damage(a_power - d_armor)
    
  




I'll explain Nick's system in four steps:



Basic mutable aliasing


References to an object vs its contents


Child groups, which blur that distinction a bit


Group annotations, which help inter-function reasoning a bit






We'll start simple, and build up gradually.





      
  

7

I know this from experience. I regret naming Vale's regions "regions"!





    
    
      
  


 Basic Mutable Aliasing

Let's start by completely forgetting the difference between readonly and readwrite references. Let's say that all references are readwrite.





Now, take this simple Mojo program that has two readwrite aliases to the same list:


    
      
      fn example():
    my_list = [1, 2, 3, 4]
    ref list_ref_a = my_list
    ref list_ref_b = my_list
    list_ref_a.append(5)
    list_ref_b.append(6)
    
  

Here's the equivalent Rust code:


    
      
      fn example() {
    let mut my_list: Vec<i64> = vec![1, 2, 3, 4];
    let list_ref_a = &mut my_list;
    let list_ref_b = &mut my_list;
    list_ref_a.push(5);
    list_ref_b.push(6);
}
    
  

The Rust compiler rejects it because we're violating aliasability-xor-mutability, specifically in that we have two active readwrite references:


    
      
      error[E0499]: cannot borrow `my_list` as mutable more than once at a time
 --> src/lib.rs:4:22
  |
3 |   let list_ref_a = &mut my_list;
  |                   ------------ first mutable borrow occurs here
4 |   let list_ref_b = &mut my_list;
  |                   ^^^^^^^^^^^^ second mutable borrow occurs here
5 |
6 |   list_ref_a.push(5);
  |   ---------- first borrow later used here
    
  




But... we humans can easily conclude this is safe. After the evaluation of list_ref_a.push(5), my_list is still there, and it's still in a valid state. So there is no risk of memory errors when evaluating the second call to push.


In any language, when we hand a function a non-owning reference to an object, that function can't destroy the object, 8 nor change its type. The same is true here.


Therefore, the caller should be able to have (and keep using) other references to that object, and it's totally fine.





Nick's approach handles this by thinking about "a reference to an object" as different from "a reference to its contents". We can have multiple references to an object, but references into an object's contents will require some special logic.


I'll explain that more in the next section.




      
  

8

If a language supports temporarily destroying a live object's field, like Mojo, Nick's model supports that as well. It tracks that "some object in this group is partially destroyed" and temporarily disables other potential references to that object while that's true.





    
    
  


 When to Invalidate References to Contents

So how do we handle a caller's references to the contents of the object? What kind of special logic does that require?





In the below example, the compiler should reject print(element_ref) because append might have modified the List.


    
      
      fn example():
    my_list = [1, 2, 3, 4]
    ref list_ref = my_list
    ref el_ref = my_list[0]
    list_ref.append(5)
    print(el_ref)
    
  

It would be amazing if a memory safety approach knew that the previous example was fine and this one isn't.





In other words, the approach should know that when we hand append a reference to List, it shouldn't invalidate the other reference list_ref, but it should invalidate any references to its contents (like el_ref).





I like how Nick put it in his proposal:


A dynamic container is a container that stores a dynamically-changing number of items, and/or items whose type changes dynamically. The two archetypal dynamic containers are resizable arrays (i.e. Mojo's List type), and tagged unions (i.e. Mojo's Variant type).


Pointers to the items of a dynamic container need to be treated carefully, because if the container is mutated, those items may no longer reside at their original locations. There are several reasons why the items might have gone missing: the items were deleted. (e.g. a List was cleared.), the items were moved somewhere else. (e.g. a List's buffer was reallocated.), or the item has changed type. (e.g. a Variant was reassigned to a different payload type.)


In all cases, the right action to take is to invalidate the pointer





If I had to boil it down to one sentence, I'd say: When you might have used a reference to mutate an object, don't invalidate any other references to the object, but do invalidate any references to its contents.





Following this general rule, a lot of programs are revealed to be safe.





And this isn't that crazy; if you've used C++ a lot, this likely agrees with your intuition.





Note that we'll relax this rule later, and replace it with a more accurate one. But for now, it's a useful stepping stone.




      
    
      
  


 A More Complex Example

Above, I gave a sneak peek at an attack function.


Let's look at it again:


    
      
      fn attack[mut r: group Entity](
    ref[r] a: Entity,
    ref[r] d: Entity):
  damage = a.calculate_damage(d)
  a_energy_cost = a.calculate_attack_cost(d)
  d_energy_cost = d.calculate_defend_cost(a)
  a.use_energy(a_energy_cost)
  d.use_energy(d_energy_cost)
  d.damage(damage)
    
  




For now:



Ignore the [mut r: group Entity], we'll get to that later.


Know that none of these methods delete any Entitys. 9


Know that damage modifies d. Nothing else modifies anything.



(I'll explain both of those points more later.)





Note how this function isn't holding any references to Entitys' contents... only to whole Entitys.





All these methods don't delete any Entitys, so this attack function is completely memory safe. In fact, even though the use_energy and damage methods modify Entitys, every line in attack is still memory-safe. 10





Let's look at this alternate example now to see it catching an actual memory safety risk.


Entity looks like this now:


    
      
      struct Entity:
    var hp: Int
    var rings: ArrayList[Ring]
    ...
    
  

attack now holds a reference to an Entity's contents, like so:


    
      
      fn attack[mut r: group Entity](
    ref[r] a: Entity,
    ref[r] d: Entity):
  ref ring_ref = d.rings[0] # Ref to contents

  damage = a.calculate_damage(d)
  a_energy_cost = a.calculate_attack_cost(d)
  d_energy_cost = d.calculate_defend_cost(a)
  a.use_energy(a_energy_cost)
  d.use_energy(d_energy_cost)
  ...
    
  




The compiler views the program like this:





The compiler knows that:



There is a r group (in blue).


There is a r.rings.items[0] group (in green).


The r.rings.items[0] group (green) is a child of group r (blue).






Now let's see what happens when we modify d with a call to damage and then try to use that ring_ref:




      
        ref ring_ref = d.rings[0] # Ref to contents

  damage = a.calculate_damage(d)
  a_energy_cost = a.calculate_attack_cost(d)
  d_energy_cost = d.calculate_defend_cost(a)
  a.use_energy(a_energy_cost)
  d.use_energy(d_energy_cost)

  d.damage(damage)
  print(ring_ref) # Invalid, should show error
    


The compiler shows an error, because one of the functions (like damage) might have deleted that first ring, so the compiler should invalidate any references to the contents of all Entitys in the group.





We're really just following the rule from before: When you might have used a reference to mutate an object, don't invalidate any other references to the object, but do invalidate any references to its contents.




      
  

    

9

More precisely, these methods are only able to access the entities in group r by going through the variables a and d. In other words, there are no "back channels" for gaining access to the entities. This is important for memory safety and also for optimizations' correctness.





10

I'd like to remind everyone that this is all theoretical. Let me know if you have any improvements or comments on the approach!





        

    
    
      
  


 Child groups

That's a useful rule, and it can get us pretty far. But let's make it even more specific, so we can prove more programs memory-safe.





For example, look at this snippet:


    
      
        ref hp_ref = d.hp # Ref to contents

  damage = a.calculate_damage(d)
  a_energy_cost = a.calculate_attack_cost(d)
  d_energy_cost = d.calculate_defend_cost(a)
  a.use_energy(a_energy_cost)
  d.use_energy(d_energy_cost)
  d.damage(damage)

  print(hp_ref) # Valid!
    
  




The previous (invalid) program had a ring_ref referring to an element in a ring array.


This new (correct) program has an hp_ref that's pointing to a mere integer instead.


This is actually safe, and the compiler should correctly accept this. After all, since none of these methods can delete an Entity, then they can't delete its contained hp integer.





Good news, Nick's approach takes that into account!





But wait, how? Wouldn't that violate our rule? We might have used a reference (damage may have used d) to mutate an object (the Entity that d is pointing to). So why didn't we invalidate all references to the Entity's contents, like that hp_ref?





So, at long last, let's relax our rule, and replace it with something more precise.





Old rule:  When you might have used a reference to mutate an object, don't invalidate any other references to the object's group, but do invalidate any references to its contents.





Better rule: When you might have used a reference to mutate an object, don't invalidate any other references to the object's group, but do invalidate any references to anything in its contents that might have been destroyed.





Or, to have more precise terms:


Even better rule: When you might have used a reference to mutate an object, don't invalidate any other references to the object's group, but do invalidate any references to its "child groups".





So what's a "child group", and how is it different from the "contents" from the old rule?





If Entity was defined like this:


    
      
      struct Entity:
    var hp: Int
    var rings: ArrayList[Ring]
    var armor: Box[IArmor]            # An owning pointer to heap (C++ "unique_ptr")
    var hand: Variant[Shield, Sword]  # A tagged union (Rust "enum")

struct Ring:
    var power: int

struct Shield:
    var durability: int

struct Sword:
    var sharpness: int

struct SteelArmor:
    var hardness: int
    
  




Then these things would be part of an Entity's group:



hp: Int


rings: ArrayList[Ring]


armor: Box[IArmor] 11


hand: Variant[Shield, Sword] 12






However, these would be in Entity's child groups:



The Rings inside that rings list.


The IArmor object that armor points to.


The Shield or Sword inside the hand variant.






For example, if we had this code:


    
      
      fn attack[mut r: group Entity](
    ref[r] a: Entity,
    ref[r] d: Entity):

  ref hp_ref = d.hp
  ref rings_list_ref = d.rings
  ref ring_ref = d.rings[rand() % len(d.rings)]
  ref armor_ref = d.armor[]  # Dereferences armor pointer

  match ref d.hand:
    case Shield as ref s:
      ...
    
  




Then these are the groups the compiler knows about:








Some observations:



d, hp_ref, and rings_list_ref all point to the r group (in blue).


ring_ref points to the r.rings.items[*] group (in green). That group represents all the rings, because the compiler doesn't know the index rand() % len(d.rings). This is different than the r.rings[0] from before.


armor_ref points to the r.armor[] group (in red).


s points to the r.hand.Shield group (in yellow). 13






As a user, you can use this rule-of-thumb: any element of a Variant or a collection (List, String, Dict, etc) or Box will be in a child group. 





If you want to go deeper, the real rule might be something like: "a Variant's element or anything owned by a pointer will be in a child group." After all, String/List/Dict/Box own things with a pointer under the hood.





That all sounds abstract, so I'll state it in more familiar terms: if an object (even indirectly) owns something that could be independently destroyed, it must be in a child group.





Now, let's see what happens to the groups when we add a damage call in. Remember: Entity.damage mutates the entity, so it has the potential to destroy the rings, armor, shields and/or swords that the entity is holding:




      
      fn attack[mut r: group Entity](
    ref[r] a: Entity,
    ref[r] d: Entity):

  ref hp_ref = d.hp                              # Group r
  ref rings_list_ref = d.rings                   # Group r
  ref ring_ref = d.rings[rand() % len(d.rings)]  # Group r.rings.items[*]
  ref armor_ref = d.armor[]                      # Group r.armor[]

  match ref d.hand:
    case Shield as ref s:                        # Group r.hand.Shield
      ...
      d.damage(10)  # Invalidates refs to r's child groups
                    # Group r.rings.items[*] is invalidated
                    # Group r.armor[] is invalidated
                    # Group r.hand.Shield is invalidated

      print(hp_ref)               # Okay
      print(len(rings_list_ref))  # Okay
      print(ring_ref.power)       # Error, used invalidated group
      print(s.durability)         # Error, used invalidated group
      print(armor_ref)            # Error, used invalidated group
    


Let's look at it piece-by-piece.





      
  

    

11

An owning pointer to heap, unique_ptr in C++ speak.





12

A tagged union, "enum" in Rust speak.





13

This doesn't have an "(owns)" arrow because in Mojo (which Nick's proposal was for), a Variant is a tagged union, which holds its data inside itself, rather than pointing to its data on the heap.





        

    
    

 print(hp_ref)

The hp: Int isn't in a Variant or a collection, so it's pointing into the r group (not a child group), so the compiler can let us use our reference after the damage method.


Or using our more familiar terms: the integer can't be independently destroyed before or after the Entity (its memory is inside the Entity after all), so it's not in a child group, so the compiler can let us use our reference after the damage method.




    
  


 print(ring_ref)

Now consider ring_ref which points to an item in d.rings.


    
      
        ref ring_ref = d.rings[rand() % len(d.rings)]  # Group r.rings.items[*]
  ...
      ...
      d.damage(10)  # Invalidates refs to r's child groups
                    # Group r.rings.items[*] is invalidated
      ...
      print(ring_ref.power)  # Error, used invalidated group
    
  




That ring is in a collection (the d.rings ArrayList), so it's in a child group r.rings.items[*], so the compiler shouldn't let us use our reference after the damage method.





Or using our more familiar terms: the Ring could be independently destroyed (such as via a remove or append call on the ArrayList), so it's in a child group, so the compiler shouldn't let us use our reference after the damage method.





So, as you can see, hp is in the Entity's group, but a Ring is in a child group.





      
    
  


 print(len(rings_list_ref))

Let's do a harder example. Consider the rings_list_ref that points to the whole d.rings list, rather than an individual Ring.




      
        ref rings_list_ref = d.rings  # Group r
  ...
      ...
      d.damage(10)  # Invalidates refs to r's child groups
      ...
      print(len(rings_list_ref))  # Okay
    


That rings_list_ref is actually pointing at group r, not a child group, because the rings ArrayList isn't in a collection (it is the collection). It's in group r (not a child group), which wasn't invalidated, so the compiler can let us use our reference after the damage method.





Or using our more familiar terms: the List itself can't be independently destroyed before or after the Entity (its memory is inside the Entity after all), so it's not in a child group, so the compiler can let us use our reference after the damage method.





That means rings_list_ref is still valid, and we can use it in that print call!




      
    
  


 print(s.durability)

Consider s, which points into the hand variant's Shield value.




      
        match ref d.hand:
    case Shield as ref s:  # Group r.hand.Shield
      ...
      d.damage(10)  # Invalidates refs to r's child groups
                    # Group r.hand.Shield is invalidated
      ...
      print(s.durability)  # Error, used invalidated group
    


damage could have replaced that Shield with a Sword, thus destroying the Shield.





Because of that risk, the compiler invalidates all of group r's child groups, and catches that print(s.durability) is invalid.




      
    
  


 Child Groups, Summarized




To summarize all the above:



A Variant's element or anything owned by a pointer will be in a child group.



In other words, a group's child group is the objects that that group owns which can be independently destroyed


For example, if an ArrayList is in a group, then its contents array is in its child group.



When someone modifies a parent group, we invalidate all references into any of its child groups.






If any of this doesn't make sense, please help us out by coming to the Vale discord and asking questions! I want to make this explanation as clear as possible, so more people understand it.




      
    
      
  


 Where do groups come from?

So we know what a child group is, but how does one make a group? Where do they come from?





Local variables! Each local variable has its own group. 14





Let's look at main:




      
      fn main():
    entities = List(Entity(10, 10), Entity(12, 7))
    attack(entities[0], entities[1])
    


The local variable entities introduces a group, containing only itself. As we've just discussed, this group contains several child groups (that are not created by local variables). When we invoke attack, we're passing the child group that represents the elements of the entities list.





Additionally, groups can be combined to form other groups. This would also work:




      
      fn main():
    entity_a = Entity(10, 10)
    entity_b = Entity(12, 7)
    attack(entity_a, entity_b)
    


This time, when we invoke attack, we're passing a group that represents the "union" of the two local variables.





So, to summarize where groups come from:



Each local variable forms its own group.


Multiple groups can be combined into one.


Variants and collections inside a group can form child groups.





      
  

14

What about heap allocations? For example, if we had a var x = Box[Entity](10, 10). In this case, the local variable x has a group. The Entity it's pointing to is a child group.





    
    
  


 Isolation




There's a restriction I haven't yet mentioned: all items in a group must be mutually isolated, in other words, they can't indirectly own each other, and one can't have references into the other. In other words, in the above example, an Entity cannot contain a reference to another Entity.





With this restriction, we know that e.g. d.damage(42) can't possibly delete some other Entity, for example a. More generally, we know that if a function takes in a bunch of references into a group, it can't use those to delete any items in the group.





I won't go too deeply into this, but if you want an example of why this is needed, try mentally implementing an AVL tree with the system. AVL tree nodes have ownership of other nodes, so any function that has the ability to modify a node suddenly has the ability to destroy a node, and if nodes can be destroyed, we can't know if references to them are still valid. That would be bad. So instead, we have the mutual-isolation rule.




      
    
  


 Functions' Group Annotations




Here's a smaller version of one of the above snippets.




      
      fn attack[mut r: group Entity](
    ref[r] a: Entity,
    ref[r] d: Entity):
  ref contents_ref = a.armor_pieces[0] # Ref to contents

  d.damage(3)

  print(contents_ref) # Invalid
    


At long last, we can talk about the [mut r: group Entity]! These are group annotations. They help the compiler know that two references might be referring to the same thing. Note that the call site doesn't explicitly have to supply a group for r, the compiler will infer it.





The use of the group r in the signature of attack  informs the compiler that even though d.damage(3) is modifying d, this may change the value of a, and therefore we need to invalidate any references that exist to child groups of a.





Stated more accurately, d.damage(3) is modifying group r, so it invalidates all references that point into r's child groups (like contents_ref).





These group annotations also help at the call site, like in this example:




      
      fn main():
    entities = List(Entity(10, 10), Entity(12, 7))
    attack(
        entities[rand() % len(entities)],
        entities[rand() % len(entities)])
    


Specifically, this invocation of attack is valid, because attack has been declared in such a way that the arguments are allowed to alias. This information is explicit in the function signature (in attack), so it is visible to both the programmer and the compiler.




      
    
      
  


 A More Complex Example




Let's see a more complex example, and introduce a new concept called a path which helps the compiler reason about memory safety when calling functions.





Here's our main function again:


    
      
      fn main():
    entities = List(Entity(10, 10), Entity(12, 7))
    attack(
        entities[rand() % len(entities)],
        entities[rand() % len(entities)])
    
  




And here's something similar to our attack from before, but with a new call to a new power_up_ring function:


    
      
      fn attack[mut r: group Entity](
    ref[r] a: Entity,
    ref[r] d: Entity):
  ref armor_ref = a.armor # Ref to a's armor

  # Modifies a.rings' contents
  power_up_ring(a, a.rings[0])

  # Valid, compiler knows we only modified a.rings' contents
  armor_ref.hardness += 2
    
  




As the comments say, power_up_ring is modifying one of a's rings, and it doesn't invalidate our armor_ref.





To see how that's possible, let's see power_up_ring (note I'm taking some liberties with the syntax, a much shorter version is in a section below):


    
      
      # Wielder Entity's energy will power up the ring.
# Changes the ring, but does not change the wielder Entity.
fn power_up_ring[e: group Entity, mut rr: group Ring = e.rings*](
    ref[e] entity: Entity,
    ref[rr] a_ring: Ring
):
    a_ring.power += entity.energy / 4
    
  




Let's unpack that fn line:



e: group Entity means: e is a group of Entitys. Note how there's no mut here.


mut rr: group Ring means: rr is a group of Rings. This one is mut.


 = e.rings* means: rr points to Rings in e's Entitys' field .rings. We call this a path.






Nick's original proposal doesn't design for this particular capability, where we can take an immutable parent group and a mutable child group, but we tossed around the idea offline and we think it'll work. Let us know if you see anything to improve!





With this, the caller (attack) has enough information to know exactly what was modified. 15





Specifically, attack knows that Entitys' .rings elements may have changed. Therefore, after the call to power_up_ring, attack should invalidate any references pointing into Entitys' .rings elements, but not invalidate anything else. Therefore, it should not invalidate that armor_ref.





Inside the function, we see a a_ring.power += entity.energy / 4. Note how it's:



Reading an Entity


Modifying a Ring inside the Entity.






The latter is also why we have mut in mut rr: group Ring; the compiler requires a function put mut on any group it might be modifying.





This is also something that distinguishes this approach from Rust's. Partial borrows can do some of that, but generally you can't have a &Entity while also having an &mut Item pointing to one of the Entity's items.




      
  

15

Well not exactly. Technically, only the .power field is being modified, but power_up_ring is saying that anything inside Ring might have changed.





    
    
  


 Paths

I want to really emphasize something from the last section:


mut rr: group Ring = e.rings*





This is the key that makes this entire approach work across function calls. Whenever there's a callsite, like attack's call to power_up_ring(a, a.rings[0]), it can assemble a full picture of whether that call is valid, and how it affects the code around it.





When compiling attack, the compiler thinks this:



The caller (attack) calling power_up_ring(a, a.rings[0]).


The callee's first argument's group e.


The callee's second argument's group is e.rings*, which corresponds to a.rings[0] in the caller.


The callee's second argument's group is mut, so the callee will modify things in it.


Therefore, the callee will modify the caller's a.rings's elements' contents.






This path is how the caller knows what the callee might have modified. That's the vital information that helps it know exactly what other references it might need to invalidate.




      
    
  


 Syntax

If you thought that syntax was verbose:


    
      
      fn power_up_ring[e: group Entity, mut rr: group Ring = e.rings*](
    ref[e] entity: Entity,
    ref[rr] a_ring: Ring
):
    a_ring.power += entity.energy / 4
    
  

...that's my fault. I wanted to show what's really going on under the hood.





Nick actually has some better syntax in mind:


    
      
      fn power_up_ring(
   entity: Entity,
   mut ref [entity.rings*] a_ring: Ring
):
    a_ring.power += entity.energy / 4
    
  

Way simpler!




      
    
  


 The approach, summarized

With that, you now know all the pieces to Nick's approach. Summarizing:





References to object vs its contents: there's a distinction between an object and its contents. We can have as many references to an object as we'd like. Mutations to the contents will invalidate references that point into the contents, but don't have to invalidate any references to the object itself.





Child groups let us think a little more precisely about what mutations will invalidate what references to what contents.





Group annotations on the function give the compiler enough information at the callsite to know which references in the caller to invalidate.




      
    
      
  


 Does the approach really not have unique references?

When I was learning about the approach, I was kind of surprised that it had no unique references. They seemed inevitable. 16 In his proposal, Nick even mentions this example:


    
      
      fn foo[mut r: group String](names: List[ref[r] String]):
    p1 = names[0]
    p2 = names[1]
    p1[] = p2[]     # Error: cannot copy p2[]; it might be uninitialized.
    
  




The final line of the function first destroys p1's pointee (implicitly, just before assigning it a new value), and then copies data from p2's pointee. (By the way, postfix [] is Mojo-speak for dereference, so p1[] is like C's *p1)





The challenge here, as he explains, is that p1 and p2 might be pointing to the same object. If so, one or both of these objects might end up with uninitialized data.





His solution mentions using escape hatches in this case, like this:


    
      
      fn swap[T: Movable, mut r: group T](ref[r] x: T, ref[r] y: T):
    if __address_of(x) == __address_of(y):
        return
        
    # Now that we know the pointers don't alias, we can use unsafe
    # operations to swap the targets. The exact code isn't important.
    unsafe_x = UnsafePointer.address_of(x)
    unsafe_y = UnsafePointer.address_of(y)
    
    # ...use unsafe_x and unsafe_y here to swap the contents...
    
  




...but this can theoretically be built into the language, like this:


    
      
      fn swap[T: Movable, mut r: group T](ref[r] x: T, ref[r] y: T):
    if not distinct(x, y):
        return
    
    # ...use x and y...
    
  




At first, I saw this and thought, "Aha! distinct hints to the compiler that these are unique references!"





But... maybe not. Instead of thinking of these as unique references, you could think of this as "splitting" group r into two temporary distinct groups.




      
  

16

 Throughout the entire proposal, I was expecting the next section to talk about how we inevitably add unique references back in. And as I was thinking ahead, I kept on adding unique references in, in my tentative understanding of his model. This is the problem with being accustomed to conventional borrow checking... it makes it harder to think of any other approach.


Luckily, Nick consistently tried to understand what operations can cause pointers to dangle, and impose as few restrictions as possible while ensuring that dangling pointers are always invalidated. With that in mind, the AxM constraint never arose. It's the same mindset I used to come up with Vale's generational references + regions blend. It must be like art: design constraints lead to inspiration!






    
    
      
  


 Comparison to Borrow Checking

Group Borrowing could be much better than borrow checking.



It should be much more permissive than borrow checking, and prove a lot more programs correct.


It should lead to better error messages. Whereas rustc gives errors about abstract borrowing violations, this model should be able to give errors that point out the actual real risks: "you can't use this pointer down here, because it might not be valid anymore because of this modification up here".



This is particularly important to a language like Mojo, which is designed for Python programmers. The ramp from dynamic typing to static typing to single ownership to borrowing is steep, and this could help.



Allowing safe mutable aliasing could lead to less people reaching for workarounds like unsafe pointers. In other words, by making safe references more expressive,  we can make systems languages more memory-safe in practice.






Though, it might also result in programs that are architecturally similar to borrow checking.



The mutual isolation restriction will influence our programs' data to look like trees, similar to how Rust's borrow checker does. However, the approach has much more relaxed rules around how we access those trees from the outside (via references in local variables and arguments), which is a nice improvement.


A line of code that deletes something will invalidate any references to any of its child groups. A similar constraint appears in borrow checking, though it's more relaxed here.






It might be faster than borrow checking in some cases.



For example, the attack example doesn't need to do repeated hash lookups like in Rust.


More generally, his approach means we can have more references, and less hashing, cloning, and bounds checking.






But it might be slower in some cases. Not having unique references means it could be challenging for the compiler to compile references to faster noalias 17 pointers. Nick showed me this article to highlight the possible speed differences, and we discussed a few promising options. Perhaps a compiler could:



Emit noalias for an argument when the argument is the only argument into a certain group.


Have a special kind of group where all references are guaranteed distinct.


Notice when the code checks (via if, assert, etc.) that all pointers into a group are distinct, and emit noalias then.






And this model might have downsides:



Since there's no such thing as a unique reference, it could lead to awkward situations, where we have to convince the compiler that two references don't alias.



Then again, Rust kind of has this too, in the form of .split_at_mut. It might be easier here?



This model hasn't been implemented yet and therefore hasn't been proven to work, of course.






So, will this be revolutionary? Perhaps! Or maybe it'll be just a surface-level improvement on borrow checking in practice. Or, it could be the key that unlocks borrowing and makes it more palatable to the mainstream.




      
  

17

noalias is an annotation given to LLVM to tell it that no other pointer will be observing the pointed-at data while the pointer is in scope. It helps the compiler skip some loads and stores.





    
    
      
  


 Where we go from here




Where does the idea go from here? Not sure!





This idea is still new, and could evolve in a lot of different directions.



Maybe we'll discover some ways we can decompose it into multiple orthogonal mechanisms, like how implementation inheritance (Java's extends) is really just implements+delegation+composition. 18


Maybe we'll discover that this pairs perfectly with another mechanism, like reference counting (or generational references? Who knows!).


Maybe we'll find a different way to communicate across inter-function boundaries, so that child group invalidation can be more precisely expressed and controlled.


Maybe someone will find a way to make these groups (mutably) alias each other! 19






In the grimoire, I hinted about a hypothetical blend of reference counting and borrowing that we don't yet know how to make. I mention that one possible path to it will be to combine various memory safety techniques together. This could be one of them. 





So regardless of how well this model does on its own, it could be an amazing starting point for hybrid memory safety models. I wouldn't be surprised if one of you reads this, reads the grimoire, and discovers a clever way to blend this with existing mechanisms and techniques. Let me know if you do, and I can write an article like this for you too!





      
  

    

18

By this I mean, you can accomplish anything with extends, if you turn the base class into an interface and a struct (like Dart does), and your "subclass" would instead implements the interface, contain the struct in a field, and forward any calls from that interface into that struct.





19

This would have to be opt-in of course. Non-aliasability is a good default, because it allows the compiler to perform optimizations (e.g. keep values in registers for longer) that can actually have a dramatic impact on performance.





        

    
    
      
  


 Conclusion




Once you understand it, the concept is pretty simple in hindsight.





Of course, it pains me to say that "it's simple", because it makes it seem like it was easy to discover. I know from personal experience just how hard it is to come up with something like this... it takes a lot of thinking, trial and error, and bumping into dead ends. 20





And we must remember that Nick's model is a draft, and is still being iterated upon. As with any new model, there will be holes, and there will likely be fixes. Vale's region borrowing design fell apart and was fixed a few times yet is still standing, and Nick's model feels even cleaner than regions, so I have hope.





If there's one big thing to take away from this post, it's that we aren't done yet. There is more to find out there!





That's all! I hope you enjoyed this post. If you have any questions for Nick, he hangs out in the Mojo server (username nick.sm), or feel free to ask questions in the r/vale subreddit or Vale discord server.





And most importantly, if you enjoy this kind of exploration, sponsor Nick!





Cheers,


- Evan Ovadia




      
  

20

 Designing region borrowing for generational references took me years. And before that, I was almost broken by 32 iterations of a (now abandoned) Vale feature called "hybrid-generational memory". Near the end there, I was so burned out on the highs and lows of breaking and repairing and improving that feature, that I almost gave up on language design entirely.


Nick told me he's gone through a similarly grueling experience trying to nail down a design for his "groups". I'm glad he stuck with it!






    
    
    
  

    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rendering a Game in Real-Time with AI]]></title>
            <link>https://blog.jeffschomay.com/rendering-a-game-in-real-time-with-ai</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45051188</guid>
        </item>
        <item>
            <title><![CDATA[Prosper AI (YC S23) Is Hiring Founding Account Executives (NYC)]]></title>
            <link>https://jobs.ashbyhq.com/prosper-ai/29684590-4cec-4af2-bb69-eb5c6d595fb8</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45051096</guid>
        </item>
        <item>
            <title><![CDATA[GAN Math (2020)]]></title>
            <link>https://jaketae.github.io/study/gan-math/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45050958</guid>
            <description><![CDATA[Generative Adversarial Networks refer to a family of generative models that seek to discover the underlying distribution behind a certain data generating process. This distribution is discovered through an adversarial competition between a generator and a discriminator. As we saw in an earlier introductory post on GANs, the two models are trained such that the discriminator strives to distinguish between generated and true examples, while the generator seeks to confuse the discriminator by producing data that are as realistic and compelling as possible.]]></description>
            <content:encoded><![CDATA[
      
        
          
          
             




  8 minute read


          
        
      

      
        
          
        
        Generative Adversarial Networks refer to a family of generative models that seek to discover the underlying distribution behind a certain data generating process. This distribution is discovered through an adversarial competition between a generator and a discriminator. As we saw in an earlier introductory post on GANs, the two models are trained such that the discriminator strives to distinguish between generated and true examples, while the generator seeks to confuse the discriminator by producing data that are as realistic and compelling as possible.

In this post, we’ll take a deep dive into the math behind GANs. My primary source of reference is Generative Adversarial Nets by Ian Goodfellow, et al. It is in this paper that Goodfellow first outlined the concept of a GAN, which is why it only makes sense that we commence from the analysis of this paper. Let’s begin!

Motivating the Loss Function

GAN can be seen as an interplay between two different models: the generator and the discriminator. Therefore, each model will have its own loss function. In this section, let’s try to motivate an intuitive understanding of the loss function for each.

Notation

To minimize confusion, let’s define some notation that we will be using throughout this post.

\[\begin{multline}
\shoveleft x:  \text{Real data} \\
\shoveleft z: \text{Latent vector} \\
\shoveleft G(z): \text{Fake data} \\
\shoveleft D(x): \text{Discriminator's evaluation of real data} \\
\shoveleft D(G(z)): \text{Discriminator's evaluation of fake data} \\
\shoveleft \text{Error}(a, b): \text{Error between } a \text{ and } b\\
\end{multline}\]

The Discriminator

The goal of the discriminator is to correctly label generated images as false and empirical data points as true. Therefore, we might consider the following to be the loss function of the discriminator:

\[L_D = \text{Error}(D(x), 1) + \text{Error}(D(G(z)), 0) \tag{1}\]

Here, we are using a very generic, unspecific notation for $\text{Error}$ to refer to some function that tells us the distance or the difference between the two functional parameters. (If this reminded you of something like cross entropy or Kullback-Leibler divergence, you are definitely on the right track.)

The Generator

We can go ahead and do the same for the generator. The goal of the generator is to confuse the discriminator as much as possible such that it mislabels generated images as being true.

\[L_G = \text{Error}(D(G(z)), 1) \tag{2}\]

The key here is to remember that a loss function is something that we wish to minimize. In the case of the generator, it should strive to minimize the difference between 1, the label for true data, and the discriminator’s evaluation of the generated fake data.

Binary Cross Entropy

A common loss function that is used in binary classification problems is binary cross entropy. As a quick review, let’s remind ourselves of what the formula for cross entropy looks like:

\[H(p, q) = \mathbb{E}_{x \sim p(x)}[- \log q(x)] \tag{3}\]

In classification tasks, the random variable is discrete. Hence, the expectation can be expressed as a summation.

\[H(p, q) = - \sum_{x \in \chi} p(x) \log q(x) \tag{4}\]

We can simplify this expression even further in the case of binary cross entropy, since there are only two labels: zero and one.

\[H(y, \hat{y}) = - \sum y \log(\hat{y}) + (1 - y) \log(1 - \hat{y}) \tag{5}\]

This is the $\text{Error}$ function that we have been loosely using in the sections above. Binary cross entropy fulfills our objective in that it measures how different two distributions are in the context of binary classification of determining whether an input data point is true or false. Applying this to the loss functions in (1),

\[L_D = - \sum_{x \in \chi, z \in \zeta} \log(D(x)) + \log(1 - D(G(z))) \tag{6}\]

We can do the same for (2):

\[L_G = - \sum_{z \in \zeta} \log(D(G(z)) \tag{7}\]

Now we have two loss functions with which to train the generator and the discriminator! Note that, for the loss function of the generator, the loss is small if $D(G(z))$ is close to 1, since $\log(1) = 0$. This is exactly the sort of behavior we want from a loss function for the generator. It isn’t difficult to see the cogency of (6) with a similar approach.

Minor Caveats

The original paper by Goodfellow presents a slightly different version of the two loss functions derived above.

\[\max_D \{ \log(D(x)) + \log(1-D(G(z))) \} \tag{8}\]

Essentially, the difference between (6) and (8) is the difference in sign, and whether we want to minimize or maximize a given quantity. In (6), we framed the function as a loss function to be minimized, whereas the original formulation presents it as a maximization problem, with the sign obviously flipped.

Then, Goodfellow proceeds by framing (8) as a min-max game, where the discriminator seeks to maximize the given quantity whereas the generator seeks to achieve the reverse. In other words,

\[\min_G \max_D \{ \log(D(x)) + \log(1-D(G(z))) \} \tag{9}\]

The min-max formulation is a concise one-liner that intuitively demonstrates the adversarial nature of thecompetition between the generator and the discriminator. However, in practice, we define separate loss functions for the generator and the discriminator as we have done above.  This is because the gradient of the function $y = \log x$ is steeper near $x = 0$ than that of the function $y = \log (1 - x)$, meaning that trying to maximize $\log(D(G(z)))$, or equivalently, minimizing $- \log(D(G(z)))$ is going to lead to quicker, more substantial improvements to the performance of the generator than trying to minimize $\log(1 - D(G(z)))$.

Model Optimization

Now that we have defined the loss functions for the generator and the discriminator, it’s time to leverage some math to solve the optimization problem, i.e. finding the parameters for the generator and the discriminator such that the loss functions are optimized. This corresponds to training the model in practical terms.

Training the Discriminator

When training a GAN, we typically train one model at a time. In other words, when training the discriminator, the generator is assumed as fixed. We saw this in action in the previous post on how to build a basic GAN.

Let’s return back to the min-max game. The quantity of interest can be defined as a function of $G$ and $D$. Let’s call this the value function:

\[V(G, D) = \mathbb{E}_{x \sim p_{data}}[\log(D(x))] + \mathbb{E}_{z \sim p_z}[\log(1 - D(G(z)))] \tag{10}\]

In reality, we are more interested in the distribution modeled by the generator than $p_z$. Therefore, let’s create a new variable, $y = G(z)$, and use this substitution to rewrite the value function:

\[\begin{align}
V(G, D) &= \mathbb{E}_{x \sim p_{data}}[\log(D(x))] + \mathbb{E}_{y \sim p_g}[\log(1 - D(y))] \\ &= \int_{x \in \chi} p_{data}(x) \log(D(x)) + p_g(x) \log(1 - D(x)) \, dx
\end{align} \tag{11}\]

The goal of the discriminator is to maximize this value function. Through a partial derivative of $V(G, D)$ with respect to $D(x)$, we see that the optimal discriminator, denoted as $D^*(x)$, occurs when

\[\frac{p_{data}(x)}{D(x)} - \frac{p_g(x)}{1 - D(x)} = 0 \tag{12}\]

Rearranging (12), we get

\[D^*(x) = \frac{p_{data}(x)}{p_{data}(x) + p_g(x)} \tag{12}\]

And this is the condition for the optimal discriminator! Note that the formula makes intuitive sense: if some sample $x$ is highly genuine, we would expect $p_{data}(x)$ to be close to one and $p_g(x)$ to be converge to zero, in which case the optimal discriminator would assign 1 to that sample. On the other hand, for a generated sample $x = G(z)$, we expect the optimal discriminator to assign a label of zero, since $p_{data}(G(z))$ should be close to zero.

Training the Generator

To train the generator, we assume the discriminator to be fixed and proceed with the analysis of the value function. Let’s first plug in the result we found above, namely (12), into the value function to see what turns out.

\[\begin{align}
V(G, D^*) &= \mathbb{E}_{x \sim p_{data}}[\log(D^*(x))] + \mathbb{E}_{x \sim p_g}[\log(1 - D^*(x))] \\ &= \mathbb{E}_{x \sim p_{data}} \left[ \log \frac{p_{data}(x)}{p_{data}(x) + p_g(x)} \right] + \mathbb{E}_{x \sim p_g} \left[ \log \frac{p_g(x)}{p_{data}(x) + p_g(x)} \right]
\end{align} \tag{13}\]

To proceed from here, we need a little bit of inspiration. Little clever tricks like these are always a joy to look at.

\[\begin{align}
V(G, D^*) &= \mathbb{E}_{x \sim p_{data}} \left[ \log \frac{p_{data}(x)}{p_{data}(x) + p_g(x)} \right] + \mathbb{E}_{x \sim p_g} \left[ \log \frac{p_g(x)}{p_{data}(x) + p_g(x)} \right] \\ &= - \log 4 + \mathbb{E}_{x \sim p_{data}} \left[ \log p_{data}(x) - \log \frac{p_{data}(x) + p_g(x))}{2} \right] \\ & \quad+ \mathbb{E}_{x \sim p_g} \left[ \log p_g(x) - \log\frac{p_{data}(x) + p_g(x))}{2} \right] 
\end{align} \tag{14}\]

If you are confused, don’t worry, you aren’t the only one. Basically, what is happening is that we are exploiting the properties of logarithms to pull out a $- \log4$ that previously did not exist. In pulling out this number, we inevitably apply changes to the terms in the expectation, specifically by dividing the denominator by two.

Why was this necessary? The magic here is that we can now interpret the expectations as Kullback-Leibler divergence:

\[V(G, D^*) = - \log 4 + D_{KL}\left(p_{data} \parallel \frac{p_{data} + p_g}{2} \right) + D_{KL}\left(p_g \parallel \frac{p_g + p_g}{2} \right) \tag{15}\]

And it is here that we reencounter the Jensen-Shannon divergence, which is defined as

\[J(P,Q) = \frac{1}{2} \left( D(P \parallel R) + D(Q \parallel R) \right) \tag{16}\]

where $R = \frac12(P + Q)$. This means that the expression in (15) can be expressed as a JS divergence:

\[V(G, D^*) = - \log 4 + 2 \cdot D_{JS}(p_{data} \parallel p_g) \tag{15}\]

The conclusion of this analysis is simple: the goal of training the generator, which is to minimize the value function $V(G, D)$, we want the JS divergence between the distribution of the data and the distribution of generated examples to be as small as possible. This conclusion certainly aligns with our intuition: we want the generator to be able to learn the underlying distribution of the data from sampled training examples. In other words, $p_g$ and $p_{data}$ should be as close to each other as possible. The optimal generator $G$ is thus one that which is able to mimic $p_{data}$ to model a compelling model distribution $p_g$.

Conclusion

In this post, we took a brief tour of the math behind general adversarial networks. Since the publication of Goodfellow’s work, more GAN models have been introduced and studied by different scholars, such as the Wasserstein GAN or CycleGAN to name just a few. The underlying mathematics for these models are obviously going to be different from what we have seen today, but this is a good starting point nonetheless.

I hope you enjoyed reading this post. In the next post, I plan to explore the concept of Fisher information and the Fisher matrix. It is going to be another math-heavy ride with gradients and Hessians, so keep you belts fastened!

        
      

      

      


      
  

    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Important machine learning equations]]></title>
            <link>https://chizkidd.github.io//2025/05/30/machine-learning-key-math-eqns/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45050931</guid>
            <description><![CDATA[Musings of a Deep Learning Enthusiast.]]></description>
            <content:encoded><![CDATA[
  Motivation
Machine learning (ML) is a powerful field driven by mathematics. Whether you’re building models, optimizing algorithms, or simply trying to understand how ML works under the hood, mastering the core equations is essential. This blog post is designed to be your go-to resource, covering the most critical and “mind-breaking” ML equations—enough to grasp most of the core math behind ML. Each section includes theoretical insights, the equations themselves, and practical implementations in Python, so you can see the math in action.

This guide is for anyone with a basic background in math and programming who wants to deepen their understanding of ML and is inspired by this tweet from @goyal__pramod. Let’s dive into the equations that power this fascinating field!



Table of Contents


  Introduction
  
    Probability and Information Theory

    
      Bayes Theorem
      Entropy
      Joint and Conditional Probability
      Kullback-Leibler Divergence (KLD)
      Cross-Entropy
    
  
  
    Linear Algebra

    
      Linear Transformation
      Eigenvalues and Eigenvectors
      Singular Value Decomposition (SVD)
    
  
  
    Optimization

    
      Gradient Descent
      Backpropagation
    
  
  
    Loss Functions

    
      Mean Squared Error (MSE)
      Cross-Entropy Loss
    
  
  
    Advanced ML Concepts

    
      Diffusion Process
      Convolution Operation
      Softmax Function
      Attention Mechanism
    
  
  Conclusion
  Further Reading




Introduction
Mathematics is the language of machine learning. From probability to linear algebra, optimization to advanced generative models, equations define how ML algorithms learn from data and make predictions. This blog post compiles the most essential equations, explains their significance, and provides practical examples using Python libraries like NumPy, scikit-learn, TensorFlow, and PyTorch. Whether you’re a beginner or an experienced practitioner, this guide will equip you with the tools to understand and apply ML math effectively.



Probability and Information Theory
Probability and information theory provide the foundation for reasoning about uncertainty and measuring differences between distributions.

Bayes’ Theorem

Equation:

\[P(A|B) = \frac{P(B|A) P(A)}{P(B)}\]

Explanation: Bayes’ Theorem describes how to update the probability of a hypothesis ($A$) given new evidence ($B$). It’s a cornerstone of probabilistic reasoning and is widely used in machine learning for tasks like classification and inference.

Practical Use: Applied in Naive Bayes classifiers, Bayesian networks, and Bayesian optimization.

Implementation:

def bayes_theorem(p_d, p_t_given_d, p_t_given_not_d):
    """
    Calculate P(D|T+) using Bayes' Theorem.
    
    Parameters:
    p_d: P(D), probability of having the disease
    p_t_given_d: P(T+|D), probability of testing positive given disease
    p_t_given_not_d: P(T+|D'), probability of testing positive given no disease
    
    Returns:
    P(D|T+), probability of having the disease given a positive test
    """
    p_not_d = 1 - p_d
    p_t = p_t_given_d * p_d + p_t_given_not_d * p_not_d
    p_d_given_t = (p_t_given_d * p_d) / p_t
    return p_d_given_t

# Example usage
p_d = 0.01  # 1% of population has the disease
p_t_given_d = 0.99  # Test is 99% sensitive
p_t_given_not_d = 0.02  # Test has 2% false positive rate
result = bayes_theorem(p_d, p_t_given_d, p_t_given_not_d) 
print(f"P(D|T+) = {result:.4f}")  # Output: P(D|T+) = 0.3333 


Entropy

Equation:

\[H(X) = -\sum_{x \in X} P(x) \log P(x)\]

Explanation: Entropy measures the uncertainty or randomness in a probability distribution. It quantifies the amount of information required to describe the distribution and is fundamental in understanding concepts like information gain and decision trees.

Practical Use: Used in decision trees, information gain calculations, and as a basis for other information-theoretic measures.

Implementation:

import numpy as np

def entropy(p):
    """
    Calculate entropy of a probability distribution.
    
    Parameters:
    p: Probability distribution array
    
    Returns:
    Entropy value
    """
    return -np.sum(p * np.log(p, where=p > 0))

# Example usage
fair_coin = np.array([0.5, 0.5])  # fair coin has the same probability of heads and tails
print(f"Entropy of fair coin: {entropy(fair_coin)}")  # Output: 0.6931471805599453 

biased_coin = np.array([0.9, 0.1])  # biased coin has a higher probability of heads
print(f"Entropy of biased coin: {entropy(biased_coin)}")  # Output: 0.4698716731013394 


Joint and Conditional Probability

Equations:


  
    Joint Probability:

\[P(A, B) = P(A|B) P(B) = P(B|A) P(A)\]
  
  
    Conditional Probability:

\[P(A|B) = \frac{P(A, B)}{P(B)}\]
  


Explanation: Joint probability describes the likelihood of two events occurring together, while conditional probability measures the probability of one event given another. These are the building blocks of Bayesian methods and probabilistic models.

Practical Use: Used in Naive Bayes classifiers and probabilistic graphical models.

Implementation:

from sklearn.naive_bayes import GaussianNB
import numpy as np

X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])
y = np.array([0, 0, 1, 1])
model = GaussianNB().fit(X, y)
print(model.predict([[2.5, 3.5]]))  # Output: [1]


Kullback-Leibler Divergence (KLD)

Equation:

\[D_{KL}(P \| Q) = \sum_{x \in \mathcal{X}} P(x) \log \left( \frac{P(x)}{Q(x)} \right)\]

Explanation: KLD measures how much one probability distribution $P$ diverges from another $Q$. It’s asymmetric and foundational in information theory and generative models.

Practical Use: Used in variational autoencoders (VAEs) and model evaluation.

Implementation:

import numpy as np

P = np.array([0.7, 0.3])
Q = np.array([0.5, 0.5])
kl_div = np.sum(P * np.log(P / Q))
print(f"KL Divergence: {kl_div}")  # Output: 0.08228287850505156


Cross-Entropy

Equation:

\[H(P, Q) = -\sum_{x \in \mathcal{X}} P(x) \log Q(x)\]

Explanation: Cross-entropy quantifies the difference between the true distribution $P$ and the predicted distribution $Q$. It’s a widely used loss function in classification.

Practical Use: Drives training in logistic regression and neural networks.

Implementation:

import numpy as np

y_true = np.array([1, 0, 1])
y_pred = np.array([0.9, 0.1, 0.8])
cross_entropy = -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))
print(f"Cross-Entropy: {cross_entropy}")  # Output: 0.164252033486018




Linear Algebra
Linear algebra powers the transformations and structures in ML models.

Linear Transformation

Equation:

\[y = Ax + b \quad \text{where } A \in \mathbb{R}^{m \times n}, x \in \mathbb{R}^n, y \in \mathbb{R}^m, b \in \mathbb{R}^m\]

Explanation: This equation represents a linear mapping of input $x$ to output $y$ via matrix $A$ and bias $b$. It’s the core operation in neural network layers.

Practical Use: Foundational for linear regression and neural networks.

Implementation:

import numpy as np

A = np.array([[2, 1], [1, 3]])
x = np.array([1, 2])
b = np.array([0, 1])
y = A @ x + b
print(y)  # Output: [4 7]


Eigenvalues and Eigenvectors

Equation:

\[Av = \lambda v \quad \text{where } \lambda \in \mathbb{R}, v \in \mathbb{R}^n, v \neq 0\]

Explanation: Eigenvalues $\lambda$ and eigenvectors $v$ describe how a matrix $A$ scales and rotates space, crucial for understanding data variance.

Practical Use: Used in Principal Component Analysis (PCA).

Implementation:

import numpy as np

A = np.array([[4, 2], [1, 3]])
eigenvalues, eigenvectors = np.linalg.eig(A)
print(f"Eigenvalues: {eigenvalues}")
print(f"Eigenvectors:\n{eigenvectors}")


Singular Value Decomposition (SVD)

Equation:

\[A = U \Sigma V^T\]

Explanation: SVD breaks down a matrix $A$ into orthogonal matrices $U$ and $V$ and a diagonal matrix $\Sigma$ of singular values. It reveals the intrinsic structure of data.

Practical Use: Applied in dimensionality reduction and recommendation systems.

Implementation:

import numpy as np

A = np.array([[1, 2], [3, 4], [5, 6]])
U, S, Vt = np.linalg.svd(A)
print(f"U:\n{U}\nS: {S}\nVt:\n{Vt}")




Optimization
Optimization is how ML models learn from data.

Gradient Descent

Equation:

\[\theta_{t+1} = \theta_t - \eta \nabla_{\theta} L(\theta)\]

Explanation: Gradient descent updates parameters $\theta$ by moving opposite to the gradient of the loss function $L$, scaled by learning rate $\eta$.

Practical Use: The backbone of training most ML models.

Implementation:

import numpy as np

def gradient_descent(X, y, lr=0.01, epochs=1000):
    m, n = X.shape
    theta = np.zeros(n)
    for _ in range(epochs):
        gradient = (1/m) * X.T @ (X @ theta - y)
        theta -= lr * gradient
    return theta

X = np.array([[1, 1], [1, 2], [1, 3]])
y = np.array([1, 2, 3])
theta = gradient_descent(X, y)
print(theta)  # Output: ~[0., 1.]


Backpropagation

Equation:

\[\frac{\partial L}{\partial w_{ij}} = \frac{\partial L}{\partial a_j} \cdot \frac{\partial a_j}{\partial z_j} \cdot \frac{\partial z_j}{\partial w_{ij}}\]

Explanation: Backpropagation applies the chain rule to compute gradients of the loss $L$ with respect to weights $w_{ij}$ in neural networks.

Practical Use: Enables efficient training of deep networks.

Implementation:

import torch
import torch.nn as nn

model = nn.Sequential(nn.Linear(2, 1), nn.Sigmoid())
loss_fn = nn.MSELoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.01)

X = torch.tensor([[0., 0.], [1., 1.]], dtype=torch.float32)
y = torch.tensor([[0.], [1.]], dtype=torch.float32)

optimizer.zero_grad()
output = model(X)
loss = loss_fn(output, y)
loss.backward()
optimizer.step()
print(f"Loss: {loss.item()}")




Loss Functions
Loss functions measure model performance and guide optimization.

Mean Squared Error (MSE)

Equation:

\[\text{MSE} = \frac{1}{n} \sum_{i=1}^n (y_i - \hat{y}_i)^2\]

Explanation: MSE calculates the average squared difference between true $y_i$ and predicted $\hat{y}_i$ values, penalizing larger errors more heavily.

Practical Use: Common in regression tasks.

Implementation:

import numpy as np

y_true = np.array([1, 2, 3])
y_pred = np.array([1.1, 1.9, 3.2])
mse = np.mean((y_true - y_pred)**2)
print(f"MSE: {mse}")  # Output: 0.01


Cross-Entropy Loss

(See Cross-Entropy above for details.)



Advanced ML Concepts
These equations power cutting-edge ML techniques.

Diffusion Process

Equation:

\[x_t = \sqrt{\alpha_t} x_0 + \sqrt{1 - \alpha_t} \epsilon \quad \text{where} \quad \epsilon \sim \mathcal{N}(0, I)\]

Explanation: This describes a forward diffusion process where data $x_0$ is gradually noised over time $t$, a key idea in diffusion models.

Practical Use: Used in generative AI like image synthesis.

Implementation:

import torch

x_0 = torch.tensor([1.0])
alpha_t = 0.9
noise = torch.randn_like(x_0)
x_t = torch.sqrt(torch.tensor(alpha_t)) * x_0 + torch.sqrt(torch.tensor(1 - alpha_t)) * noise
print(f"x_t: {x_t}")




Convolution Operation

Equation:

\[(f * g)(t) = \int f(\tau) g(t - \tau) \, d\tau\]

Explanation: Convolution combines two functions by sliding one over the other, extracting features in data like images.

Practical Use: Core to convolutional neural networks (CNNs).

Implementation:

import torch
import torch.nn as nn

conv = nn.Conv2d(1, 1, kernel_size=3)
image = torch.randn(1, 1, 28, 28)
output = conv(image)
print(output.shape)  # Output: torch.Size([1, 1, 26, 26])




Softmax Function

Equation:

\[\sigma(z_i) = \frac{e^{z_i}}{\sum_j e^{z_j}}\]

Explanation: Softmax converts raw scores $z_i$ into probabilities, summing to 1, ideal for multi-class classification.

Practical Use: Used in neural network outputs.

Implementation:

import numpy as np

z = np.array([1.0, 2.0, 3.0])
softmax = np.exp(z) / np.sum(np.exp(z))
print(f"Softmax: {softmax}")  # Output: [0.09003057 0.24472847 0.66524096]




Attention Mechanism

Equation:

\[\text{Attention}(Q, K, V) = \text{softmax}\left( \frac{Q K^T}{\sqrt{d_k}} \right) V\]

Explanation: Attention computes a weighted sum of values $V$ based on the similarity between queries $Q$ and keys $K$, scaled by $\sqrt{d_k}$.

Practical Use: Powers transformers in NLP and beyond.

Implementation:

import torch

def attention(Q, K, V):
    d_k = Q.size(-1)
    scores = torch.matmul(Q, K.transpose(-2, -1)) / torch.sqrt(torch.tensor(d_k, dtype=torch.float32))
    attn = torch.softmax(scores, dim=-1)
    return torch.matmul(attn, V)

Q = torch.tensor([[1., 0.], [0., 1.]])
K = torch.tensor([[1., 1.], [1., 0.]])
V = torch.tensor([[0., 1.], [1., 0.]])
output = attention(Q, K, V)
print(output)




Conclusion

This blog post has explored the most critical equations in machine learning, from foundational probability and linear algebra to advanced concepts like diffusion and attention. With theoretical explanations, practical implementations, and visualizations, you now have a comprehensive resource to understand and apply ML math. Point anyone asking about core ML math here—they’ll learn 95% of what they need in one place!



Further Reading

  Pattern Recognition and Machine Learning by Christopher Bishop
  Deep Learning by Ian Goodfellow, Yoshua Bengio, and Aaron Courville
  Stanford CS229: Machine Learning
  PyTorch Tutorials


  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Microbial metabolite repairs liver injury by restoring hepatic lipid metabolism]]></title>
            <link>https://journals.asm.org/doi/10.1128/mbio.01718-25</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45050873</guid>
        </item>
        <item>
            <title><![CDATA[Fossjobs: A job board for Free and Open Source jobs]]></title>
            <link>https://www.fossjobs.net/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45050538</guid>
            <description><![CDATA[Job portal exclusively for Free and Open Source jobs around the globe.]]></description>
            <content:encoded><![CDATA[
				
					This is a job board exclusively for paid free & open source jobs: We only list jobs at organizations that improve and involve FOSS or open hardware projects. Merely using open source as part of the job is not enough.
					Listings are free. Submit jobs you find! You can also send us job links to submit [(at)] fossjobs [dot] net.
					
					
						Mastodon •
						IRC •
						RSS Feeds •
						GitHub
					
					
				
			
						Technology Assessor
						
					
						Deputy Director
						
					
						Operations assistant
						
					
						Leiter Consulting und technischer Kunden-Support
						
					]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Are OpenAI and Anthropic Losing Money on Inference?]]></title>
            <link>https://martinalderson.com/posts/are-openai-and-anthropic-really-losing-money-on-inference/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45050415</guid>
            <description><![CDATA[I keep hearing what a cash incinerator AI is, especially around inference. While it seems reasonable on the surface, I've often been wary of these kind of claims, so I decided to do some digging.]]></description>
            <content:encoded><![CDATA[
    
    
    
        I keep hearing what a cash incinerator AI is, especially around inference. While it seems reasonable on the surface, I've often been wary of these kind of claims, so I decided to do some digging.
I haven't seen anyone really try to deconstruct the costs in running inference at scale and the economics really interest me.

This is really napkin math. I don't have any experience at running frontier models at scale, but I do know a lot about the costs and economics of running very high throughput services on the cloud and, also, some of the absolutely crazy margins involved from the hyperscalers vs bare metal. Corrections are most welcome.

Some assumptions
I'm only going to look at raw compute costs. This is obviously a complete oversimplification, but given how useful the current models are - even assuming no improvements - I want to stress test the idea that everyone is losing so much money on inference that it is completely unsustainable.
I've taken the cost of a single H100 at $2/hour. This is actually more than the current retail rental on demand price, and I (hope) the large AI firms are able to get these for a fraction of this price.

Secondly, I'm going to use the architecture of DeepSeek R1 as the baseline, 671B total params with 37B active via mixture of experts. Given this gets somewhat similar performance to Claude Sonnet 4 and GPT5 I think it's a fair assumption to make.
Working Backwards: H100 Math From First Principles
Production Setup
Let's start with a realistic production setup. I'm assuming a cluster of 72 H100s at $2/hour each, giving us $144/hour in total costs.
For production latency requirements, I'm using a batch size of 32 concurrent requests per model instance, which is more realistic than the massive batches you might see in benchmarks. With tensor parallelism across 8 GPUs per model instance, we can run 9 model instances simultaneously across our 72 GPUs.
Prefill Phase (Input Processing)
The H100 has about 3.35TB/s of HBM bandwidth per GPU, which becomes our limiting factor for most workloads. With 37B active parameters requiring 74GB in FP16 precision, we can push through approximately 3,350GB/s ÷ 74GB = 45 forward passes per second per instance.
Here's the key insight: each forward pass processes ALL tokens in ALL sequences simultaneously. With our batch of 32 sequences averaging 1,000 tokens each, that's 32,000 tokens processed per forward pass. This means each instance can handle 45 passes/s × 32k tokens = 1.44 million input tokens per second. Across our 9 instances, we're looking at 13 million input tokens per second, or 46.8 billion input tokens per hour.
In reality, with MoE you might need to load different expert combinations for different tokens in your batch, potentially reducing throughput by 2-3x if tokens route to diverse experts. However, in practice, routing patterns often show clustering around popular experts, and modern implementations use techniques like expert parallelism and capacity factors to maintain efficiency, so the actual impact is likely closer to a 30-50% reduction rather than worst-case scenarios.
Decode Phase (Output Generation)
Output generation tells a completely different story. Here we're generating tokens sequentially - one token per sequence per forward pass. So our 45 forward passes per second only produce 45 × 32 = 1,440 output tokens per second per instance. Across 9 instances, that's 12,960 output tokens per second, or 46.7 million output tokens per hour.
Raw Cost Per Token
The asymmetry is stark: $144 ÷ 46,800M = $0.003 per million input tokens versus $144 ÷ 46.7M = $3.08 per million output tokens. That's a thousand-fold difference!
When Compute Becomes the Bottleneck
Our calculations assume memory bandwidth is the limiting factor, which holds true for typical workloads. But compute becomes the bottleneck in certain scenarios. With long context sequences, attention computation scales quadratically with sequence length. Very large batch sizes with more parallel attention heads can also shift you to being compute bound.
Once you hit 128k+ context lengths, the attention matrix becomes massive and you shift from memory-bound to compute-bound operation. This can increase costs by 2-10x for very long contexts.
This explains some interesting product decisions. Claude Code artificially limits context to 200k  tokens - not just for performance, but to keep inference in the cheap memory-bound regime and avoid expensive compute-bound long-context scenarios. This is also why providers charge extra for 200k+ context windows - the economics fundamentally change.
Real-World User Economics
So to summarise, I suspect the following is the case based on trying to reverse engineer the costs (and again, keep in mind this is retail rental prices for H100s):

Input processing is essentially free (~$0.001 per million tokens)
Output generation has real costs (~$3 per million tokens)

These costs map to what DeepInfra charges for R1 hosting, with the exception there is a much higher markup on input tokens.

A. Consumer Plans

$20/month ChatGPT Pro user: Heavy daily usage but token-limited

100k toks/day
Assuming 70% input/30% output: actual cost ~$3/month
5-6x markup for OpenAI



This is your typical power user who's using the model daily for writing, coding, and general queries. The economics here are solid.
B. Developer Usage

Claude Code Max 5 user ($100/month): 2 hours/day heavy coding

~2M input tokens, ~30k output tokens/day
Heavy input token usage (cheap parallel processing) + minimal output
Actual cost: ~$4.92/month → 20.3x markup


Claude Code Max 10 user ($200/month): 6 hours/day very heavy usage

~10M input tokens, ~100k output tokens/day
Huge number of input tokens but relatively few generated tokens
Actual cost: ~$16.89/month → 11.8x markup



The developer use case is where the economics really shine. Coding agents like Claude Code naturally have a hugely asymmetric usage pattern - they input entire codebases, documentation, stack traces, multiple files, and extensive context (cheap input tokens) but only need relatively small outputs like code snippets or explanations. This plays perfectly into the cost structure where input is nearly free but output is expensive.
C. API Profit Margins

Current API pricing: $3/15 per million tokens vs ~$0.01/3 actual costs
Margins: 80-95%+ gross margins

The API business is essentially a money printer. The gross margins here are software-like, not infrastructure-like.
Conclusion
We've made a lot of assumptions in this analysis, and some probably aren't right. But even if you assume we're off by a factor of 3, the economics still look highly profitable. The raw compute costs, even at retail H100 pricing, suggest that AI inference isn't the unsustainable money pit that many claim it to be.
The key insight that most people miss is just how dramatically cheaper input processing is compared to output generation. We're talking about a thousand-fold cost difference - input tokens at roughly $0.005 per million versus output tokens at $3+ per million.
This cost asymmetry explains why certain use cases are incredibly profitable while others might struggle. Heavy readers - applications that consume massive amounts of context but generate minimal output - operate in an almost free tier for compute costs. Conversational agents, coding assistants processing entire codebases, document analysis tools, and research applications all benefit enormously from this dynamic.
Video generation represents the complete opposite extreme of this cost structure. A video model might take a simple text prompt as input - maybe 50 tokens - but needs to generate millions of tokens representing each frame. The economics become brutal when you're generating massive outputs from minimal inputs, which explains why video generation remains so expensive and why these services either charge premium prices or limit usage heavily.
The "AI is unsustainably expensive" narrative may be serving incumbent interests more than reflecting economic reality. When established players emphasize massive costs and technical complexity, it discourages competition and investment in alternatives. But if our calculations are even remotely accurate, especially for input-heavy workloads, the barriers to profitable AI inference may be much lower than commonly believed.
Let's not hype the costs up so much that people overlook the raw economics. I feel everyone fell for this a decade or two ago with cloud computing costs from the hyperscalers and allowed them to become money printers. If we're not careful we'll end up with the same on AI inference.

    
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Windows 11 Update KB5063878 Causing SSD Failures]]></title>
            <link>https://old.reddit.com/r/msp/comments/1n1sgxx/windows_11_update_kb5063878_causing_ssd_failures/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45050192</guid>
        </item>
        <item>
            <title><![CDATA[Claude Code Checkpoints]]></title>
            <link>https://claude-checkpoints.com/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45050090</guid>
            <description><![CDATA[The essential companion app for developers using Claude AI. Seamlessly track all code changes and never lose your work.]]></description>
            <content:encoded><![CDATA[
    
    
        
            ✓ Checkpoints
            
                Features
                How It Works
                MCP Integration
                Download
            
        
    

    
    
            Never Lose Your Work Again
            Automatic version control for Claude Code projects
            
            ✨ Free to use • macOS 13.5+
            
                
                    
                        
                        Download on the
                        Mac App Store
                    
                
            
            
            
            🎬 Watch it in action
            
                
                    
                    
                
            
        

    
    
            Everything You Need for Safe Coding
            
                
                    🔍
                    Automatic Change Detection
                    Continuously monitors your entire project for file changes. No setup required - just select your project folder and start coding.
                
                
                    💾
                    One-Click Checkpoints
                    Create instant snapshots of your project state before making risky changes. Each checkpoint captures all files and their contents.
                
                
                    📊
                    Visual Diff Viewer
                    See exactly what changed between checkpoints with our built-in diff viewer. Track additions, modifications, and deletions at a glance.
                
                
                    ⏰
                    Time Travel for Code
                    Instantly restore your project to any previous checkpoint. Perfect for experimenting with confidence or recovering from mistakes.
                
                
                    🤖
                    Claude Integration
                    Seamlessly integrates with Claude Desktop through MCP protocol. Automatic checkpoints when tasks complete.
                
                
                    📁
                    Full Project Backup
                    Every checkpoint includes a complete backup of all project files. Your work is always safe and recoverable.
                
            
        

    
    
            Simple Workflow, Powerful Protection
            
                
                    1
                    Select Project
                    Choose your project folder in the Checkpoints app
                
                
                    2
                    Start Coding
                    Work with Claude Code as usual - changes are tracked automatically
                
                
                    3
                    Auto Checkpoint
                    Checkpoints are created automatically when tasks complete
                
                
                    4
                    Restore Anytime
                    One click to restore any previous state if needed
                
            
        

    
    
            Seamless MCP Integration
            Works automatically with Claude Desktop through Model Context Protocol
            
            
                
                update_task_status("Fix login bug", "in_progress")
                
                update_task_status("Fix login bug", "completed")
                
                restore_checkpoint("checkpoint_id")
                
            
            
                
                    🔌 Auto-Connect
                    MCP server starts automatically on port 8765. Claude Desktop connects instantly when you open a project.
                
                
                    📝 Task Tracking
                    Every task start and completion is tracked. Checkpoints are created automatically at key moments.
                
                
                    🔄 Full Control
                    Claude can list checkpoints, view diffs, and restore previous states through MCP commands.
                
            
        

    
    
            See It In Action
            
                
                            Main Interface
                            Clean, intuitive checkpoint management
                        
                
                            Diff Viewer
                            Visual comparison between checkpoints
                        
                
                            MCP Integration
                            Seamless Claude Desktop connection
                        
            
        

    
    

    

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Lesser known mobile adtech domains where data is sent]]></title>
            <link>https://jamesoclaire.com/2025/08/28/uncovering-lesser-known-mobile-adtech-domains/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45048736</guid>
            <description><![CDATA[AppGoblin has now run over 40k apps in an emulator, tracking millions of API calls thousands of advertising domains. Unfortunately, some of them are dark, meaning they have no landing page of any kind, and I’m unclear who controls these domains.]]></description>
            <content:encoded><![CDATA[
	

		

			

	
		
AppGoblin has now run over 40k apps in an emulator, tracking millions of API calls thousands of advertising domains. Unfortunately, some of them are dark, meaning they have no landing page of any kind, and I’m unclear who controls these domains.  



news-cdn.site marketingcloudapis.com kickoffo.site onegg.site lazybumblebee.com qa-analytics.com acobt.techyastatic.net



Let’s see if we can figure them out!



qa-analytics.com



This one is a mystery. Seems like it’s related to Germany since it’s always resolving to HETZNER and german IPs. Checking the shared IPs, it looks like they do overlap with unity3d.com domains sometimes.



Again, this whole list is games. 




Woodoku – Wood Block Puzzle



Draw Climber



Spider Rope Hero: Action Game



Running Pet: Dec Rooms



Bubble Shooter 2



Pirate Treasures: Jewel & Gems



Tik Tap Challenge



Collect Em All! Clear the Dots



Gun Simulator & Lightsaber




data deep dive



Looking at the requests I can match various keys to values from untiy3d.com API calls! Specifically they share the same `app_key` values. 



acobt.tech



Well that name definitely comes off as esoteric at first.  First let’s check the IP cluser and see what we find, of the 233 apps sending/receiving from acobt.tech we have 4 other sites with 1:1 matches that are all sites that do not have any landing pages.



acobt.tech 233news-cdn.site 233inmense.site 232kickoffo.site 232



searching…



Searching the internet shows various hits saying some of these belong to Bigo Ads.  Let’s check the apps’ SDKs and see



Apps



Again we got lots of games, and looking it looks like AppGoblin has indeed already found that each of these has a Bigo Ad SDK. 




Pizza Ready!



Sculpt People



Vita Mahjong



Modern Bus Simulator: Bus Game



Gym Heros: Fighting Game



Blockman Go




onegg.site



Wait, this one also matches the IPs for the other various Bigo Ads. Seems like Bigo really uses a lot of random domains? 



lazybumblebee.com



OK, great name. This one appears in clusters of SDK advertising, making me think it’s related to a mediation SDK of some kind (rather than to one specific ad network). Possibly this is bidmachine.io’s as it is the most common, but really all the top ad newtorks appear nearly 1:1 along side it across the 276 apps I’ve found it in:bidmachine.io 275unity3d.com 270doubleclick.net 269mtgglobals.com 267rayjump.com 267applovin.com 261vungle.com 257



Example Apps



Definitely game focused list here.  They almost all call variations of d.lazybumblebee.com/track/sdk-event 




Helix Jump



Going Balls



Paper.io 2



aquapark.io



Snake.io – Fun Snake .io Games



Hole.io



1945 Air Force: Airplane Games




Shared IPs



Looking around there are lots of examples of shared IP addresses with everestop.io and bidmachine, so I think that might have solved that. 



everestop.io 172.240.40.172bidmachine.io 172.240.40.172bidmachine.io 204.74.252.252everestop.io 172.240.61.171voisetech.com 34.216.198.39



SDK?



Looks like a lot of the apps have the io.bidmachine and com.explorestack SDKs, so I’m thinking that `lazybumblebee.com` does indeed belong to BidMachine and helps it with some app mediation service.



marketingcloudapis.com



 marketingcloudapis.com is just the kind of generic descriptive name I’d come up with.  



Example Apps



Example apps, there are a lot of very corporate apps in here along with lots of shopping. 




adidas: Shop Shoes & Clothing



Claro música



Domino’s Pizza USA



SiriusXM: Music, Sports & News



GasBuddy: Find & Pay for Gas




Example API Call



Each app sends off two API calls on start to a unique (per app) subdomain on marketingcloudapis.com with the response from the first API call below. The information sent seems somewhat bland compared to the usual deep scraping that advertising SDKs do. So this is likely paired with other API calls already going out. 



x-mashery-message-id: 4e9eb0f4-6eaa-4f27-bb66-a3694cffe471
x-mashery-responder: 56bf7c64cc-lnkfz
strict-transport-security: max-age=31536000; includeSubDomains; preload
Content-Security-Policy: upgrade-insecure-requests
x-xss-protection: 1; mode=block
x-frame-options: DENY
x-content-type-options: nosniff
cache-control: no-cache, must-revalidate, max-age=0, no-store, private
Referrer-Policy: strict-origin-when-cross-origin
Vary: Origin, X-HTTP-Method-Override
Content-Length: 339
Content-Type: application/json; charset=UTF-8
Date: Wed, 27 Aug 2025 22:12:39 GMT
Connection: keep-alive
Keep-Alive: timeout=5

{
    "nodes": [
        {
            "version": 1,
            "name": "blocked",
            "items": {
                "blocked": 0
            }
        },
        {
            "version": 1,
            "name": "pushFeaturesInUse",
            "items": {
                "inbox": false
            }
        },
        {
            "version": 1,
            "name": "appConfig",
            "items": {
                "inApp": {
                    "gateEventProcessingMs": 1000
                },
                "event": {
                    "activeEvents": []
                },
                "endpoints": [],
                "deliveryReceipt": {
                    "deliveryReceiptStatus": 0,
                    "gateDeliveryReceiptProcessingMs": 5000
                }
            }
        }
    ]
}



Related Domains



Checking on domains that are called together, it looks like this is almost always called with googleapis.com so possibly this is related to Google, but this is a bit weak as a lot of Android apps have integrations with Google.



EDIT: I posted this on HackerNews and user politelemon correctly identified this as SalesForce. Very awesome spot by that user, and it matches the various AppGoblin SDKs for each app as in this example for the Adidas app SDKs.



End Results!



Much better than I expected. A bit of digging and all the URLs were figured out with the exception of marketingcloudapis.com which I was a bit unsure of, but looks like google.com



news-cdn.site -> Bigo Adsmarketingcloudapis.com -> SalesForcekickoffo.site -> Bigo Adsonegg.site -> BIGO Adslazybumblebee.com -> BidMachineqa-analytics.com -> Unityacobt.tech -> Bigo Adsyastatic.net -> Yandex





			




	
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Deletion of Docker.io/Bitnami]]></title>
            <link>https://community.broadcom.com/tanzu/blogs/beltran-rueda-borrego/2025/08/18/how-to-prepare-for-the-bitnami-changes-coming-soon</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45048419</guid>
            <description><![CDATA[After evaluating the impact and community feedback, the Bitnami team has postponed the deletion of the Bitnami public catalog (docker.io/bitnami) until September 29th to give users more time to adapt to the upcoming changes.]]></description>
            <content:encoded><![CDATA[
                        Update
After evaluating the impact and community feedback, the Bitnami team has postponed the deletion of the Bitnami public catalog (docker.io/bitnami) until September 29th to give users more time to adapt to the upcoming changes.To raise awareness before the registry deletion, we will run a series of brownouts over the coming weeks. During each brownout, a set of 10 container images from docker.io/bitnami will be temporarily unavailable for 24 hours. The scheduled brownouts are:



August 28, 08:00 UTC → August 29, 08:00 UTC
September 2, 08:00 UTC → September 3, 08:00 UTC
September 17, 08:00 UTC → September 18, 08:00 UTC



The list of affected applications will be published on the day of each brownout via our usual channels.As previously announced, since August 28th, we have not published new Bitnami container images or Helm charts to Docker Hub in OCI format. The source code for containers and Helm charts remains available on GitHub under the Apache 2.0 license.

What's changing?
Starting August 28th, Bitnami will be archiving its OCI registry of charts and images to a new location, Bitnami Legacy, to make room for the new secure, hardened images that will eventually reside in the main Bitnami registry. Users who are currently pulling these images will need to update their pipelines, internal mirrors, and Kubernetes clusters to pull from a new location before that time. A couple of options users have: 


Switch to Bitnami Secure Images 


Switch to the Bitnami Legacy Registry


To retain existing functionality and maintain continuity of systems relying on Bitnami, we recommend switching to Bitnami Secure Images. In addition to a less disruptive transition, BSI helps strengthen your security and compliance posture by adopting the higher-quality images offered as part of BSI. 


Switching to Bitnami Secure Images (BSI)
While some BSI images will be free, they are only for use in development/testing purposes, and a commercial subscription is recommended for access to the entire catalog, as well as stable tags, long-term support versions, and more. 
Though a BSI subscription provides customers with the entire Bitnami Debian-based image catalog (which will continue to receive updates), we recommend users upgrade and start using the hardened Photon Linux-based images instead. These are designed to be replacement images for any of the Debian images and work with the same Helm charts. 
The Photon images provide many other benefits not previously available to users of Debian images, including: 


Drastically reduced CVE count (e.g., 100+ CVEs to in some cases 0)


VEX statements for easier triage, along with Known Exploitable Vulnerabilities (KEV) and EPSS scores


A self-service UI/API with powerful reporting and metadata capabilities


More advanced Helm charts are not available on Docker Hub, such as Bitnami’s “distroless charts” which offer an 83% smaller attack surface (by MB).


Support for customizing the images built by our secure SLSA 3 software factory 


Images and Helm charts are delivered to a private and secure OCI registry dedicated to each customer instead of relying on a public registry with rate limits like Docker Hub.


Access to over 90 VM Images in OVA format


Enterprise support for packaging and installation issues


Switching to Bitnami Legacy Registry
Another option for users of Bitnami today is to switch to the historic archive registry called Bitnami Legacy. This is unsupported software that is being made available, at users' own risk, while they make plans for alternatives. As such, this is a temporary solution, and we do not plan to keep this registry around for long. It will quickly begin to accumulate vulnerabilities that are not patched and atrophy as any software frozen in time does. If this is your choice, we strongly recommend copying the images you are using to your own registry; again, this should be considered a temporary solution. While we think there are many better options to make before the August 28th change, this is an option of last resort for those who need more time. 
Why is it a good time to consider upgrading your security and compliance for open source? 
So why do all the work now to change what’s maybe been working and update the type of open source images you use? We get it, no one likes change. But the reality is the landscape of open source is changing all around us. For example, from 2019-2023, the number of malicious packages discovered has risen to more than 245,000 according to Sonatype. That’s 2x all the previous years combined. The implication is that bad actors are finding increasing opportunities to exploit open source software that is running in every major software organization around the world. Meanwhile, with the growth of AI and MCP models, open source consumption is only going to increase. So the risk profile tides are quickly rising around us, and having a better boat to be prepared for the impacts of this change is the only responsible response. 
In addition, the Cyber Resilience Act in the EU creates an impending obligation for many organizations doing business there to provide guarantees about the open source software they use in their organization. It could soon be a liability to use open source that doesn’t have the required documentation to prove it’s been sourced from a safe place and hasn’t been tampered with. 
This is why the launch of Bitnami Secure Images is so timely. BSI is making it easier than ever for organizations to responsibly prepare for what the future of open source software in our modern world looks like. As with many things, what started out simple has become increasingly complex and requires more care to navigate. Furthermore, BSI has one of the lowest TCOs in the industry, enabling more organizations than ever before to afford cutting-edge supply chain security. BSI is effectively democratizing security and compliance for open source so that it doesn’t require million-dollar contracts from vendors with sky-high valuations. 
What are Competitors trying to claim about Bitnami? 
It’s also a great time for the competition to try and steer the narrative about Bitnami. Some have claimed that Bitnami is “pulling their free container images and Helm charts from public access”. However, if we look a little more closely at the changes Bitnami has announced, this statement is inaccurate. For one, Bitnami Helm charts continue to be an open source project, under Apache 2, freely available to the public on GitHub. 
Second, what is actually changing is the built OCI artifacts. Essentially, Bitnami has been the Jenkins of the internet for many years, but this has become unsustainable. Operating a build pipeline and OCI registry for the general public is very expensive. Just ask those same competitors throwing shade at Bitnami why they have never offered to make their charts or images publicly available at the same scale Bitnami has?
So users can continue to freely access the Helm chart source (as well as the Debian images). However, in order to sustain and support the dedicated team of engineers who maintain and build new charts and images, a subscription will be required if an organization needs the images and charts built and hosted in an OCI registry for them. And to reiterate the above again, organizations that choose this path are simultaneously upgrading their security posture and improving their OSS strategy.
How do the changes on August 28th work?
The changes to the Bitnami repo are slated to begin on Aug 28th. They will not all be at once. Over a multi-week period, the images will be cleaned up from the registry to make room for the new ones. This is being done gradually to minimize the disruptions. However, we can’t be precise about which image will be removed at what time due to the complexity of the 84TB of OCI content that the engineering team will be dealing with. Therefore, it’s best to assume starting Aug 28th, every image used in a key business function should be addressed with an alternate registry. 
We’re making room in the mainline Bitnami registry so we can populate it with the free tier of Bitnami Secure Images. These hardened Photon have the same names as the Debian images, so they can’t occupy the same registry. And we want new adopters of Bitnami to start with the secure images going forward, as we believe this is the future of open-source software on the internet. In this FAQ, you can find more information about all the details of the upcoming changes.
#bitnami#Security#helm
                    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Certificates for Onion Services]]></title>
            <link>https://onionservices.torproject.org/research/proposals/usability/certificates/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45047897</guid>
            <description><![CDATA[This document tracks existing procedures or proposals for integrating and
validating TLS/HTTPS certificates for Onion Services.]]></description>
            <content:encoded><![CDATA[
      
      
        
          
        
      
      
        
              
                
                  



About¶
This document tracks existing procedures or proposals for integrating and
validating TLS/HTTPS certificates for Onion Services.
While some depends on Certificate Authorities (CA) model, others rely on
alternative certification and validation procedures that does not require
built-in certificate chains in the client software or reliance on financial
transactions.
Introduction¶
Whenever you browse the internet regularly, the connection between your
computer and a service is usually encrypted, and the safety of this
communication happens through the verification of a special type of
certificate.
With Onion Services, the connection is peer-to-peer encrypted by default,
which means that no additional certificates are needed.
But as the web and other internet technologies mature, certificates are
starting to be a requirement in order to unleash functionalities, especially in
web browsers, such as the faster connection protocol HTTP/2 and payment
processing.
That's why it's important to improve the certificate ecosystem to fully support
Onion Services.
This is a hard problem, and an ongoing effort, but there has been some
important work done to solve this.
The most relevant one should bring automation to the process of issuing
certificates for Onion Services, through an enhancement in a protocol called
ACME.
The ACME for Onions proposal is composed of tools and also
an Internet Draft, which hopefully will turn into an
Internet Standard soon.
We are also looking into other, non-conflicting alternatives that can also be
used for certification, so service operators can decide which one fits best their
use case.
Improving the certificate functionality will put Onion Services in parity
with the modern stack of web development.
Benefits¶
It may be argued that Onion Services connections are already
self-authenticated -- since the public key and the URL are tied together and
the connection is peer-to-peer encrypted --, and thus making the need for HTTPS
pointless, or at most giving only an impression on users of additional security.
But having valid HTTPS connection in Onion Services could enable many other
enhancements, such as:


Some browser features are available only with HTTPS, like Secure
   Contexts, Content Security Policy (CSP), Secure cookies,
   WebAuthn, WebRTC and PaymentRequest.


A user may be using a browser that isn't the Tor browser.  For
   example on iOS there is only Safari, and in such cases the browser
   will not be aware of the different semantics of security for an onion
   site, and won't allow the use of secure browser features (such as
   secure cookies). This limits the kind of web apps people can develop
   on onionsites as many modern browser APIs mentioned above.


Allows for the usage of HTTP/2, since some browsers only support it if
   on HTTPS1. In the future, HTTP2 and HTTP3 may only
   work with TLS, and thus valid certificates.


It also opens up new opportunities such as payment processing, "as current
   PCI DSS requirements do not allow non-standard TLS"2 and may
   only work with certificates having some sort of validation3.
   Payments card networks require HTTPS for a payment to be taken. So if
   someone wants to do that over an onion site they would need a TLS
   certificate.


It could be argued that this is also security-in-depth by having yet another
   layer of encryption atop of other existing encryption layers. Even if the
   theoretical gain in terms of interception and tampering resistance is not
   relevant, it would still allow for service operators to split their encryption
   keys in different servers -- like one with the Onion Service keys and a backend
   having the TLS keys, thus making a compromise in one of the servers exposing
   only the cryptographic material of one of the communication layers.


The Tor daemon that hosts the onion site might not be the final
   computer in the chain. In larger organizations, deployment concerns
   may result in plain HTTP traveling across their network from the Tor
   daemon to the final web server. Having HTTPs protects those hops in
   the chain. This is something that distributed setups may need. The same
   could be said for a web browser using Tor SOCKS proxy somewhere else on the
   network.


Non-web based applications, such as IMAP/POP/SMTP etc. can benefit
   from certificates being valid.


There is simply too much software that isn't aware of onionsites,
   and trying to force HTTP-over-Onion to be as secure as HTTPS-over-TCP
   creates a compatibility mess of things which do and don't know about
   the semantics.


There is value in exposing the existence of an onion site via CT
   Logs. If someone navigates to the plain web version of a site, and is
   presented with a certificate containing a Subject Alternative Name (SAN) for
   both the plain web and the onion site that provides a strong cryptographic
   guarantee that they are the same site. Effectively this would replace the
   Onion-Location header with something more authenticated4.


The following discussion is not yet conclusive, and the problem space may be
hard to solve.
Overview¶



Proposal
Certification
Validation
Status




Existing CA validation
CA/B Baseline Requirements for .onion
CA chain
Implemented, fully supported


ACME for .onion
CA/B Baseline Requirements for .onion
CA chain
Standardized as RFC 9799, need adoption by CAs


Self-signed certificates
Self-signed certificate
None
Depends on per-application support


Self-signed X.509 from .onion
Signed by a "CA" derived from the .onion private key
Check if cert is issued by the .onion private key
Proof-of-concept, no browser integration


Same Origin Onion Certificates (SOOC)
Self-signed certs
Skip for .onion addresses when conditions match
Proposal (not yet submitted for specification)


DANE for .onion
Self-signed certs
DNSSEC
Concept, no proposal yet


Onion-only CAs
Checks SAN and an .onion signature in an extension
CA chain
Concept, no proposal yet


Self-auth certs via PKCS#11 module
Checks .onion Ed25519 signature in the cert key
Module returns a custom CA chain
Design, prototype available



Main pros and cons¶



Proposal
Pros
Cons




Existing CA validation
None (already implemented)
None (already implemented)


ACME for .onion
No need for client/lib implementation
Depends on a CA willing to implement


Self-signed X.509 for .onion
No CA-reliance for .onion, self-auth.
Very hard to maintain and standardize, currently Ed25519 is unsupported by major browsers


Same Origin Onion Certificates (SOOC)
No CA-reliance for .onion
Very hard to maintain and standardize


DANE for .onion
No CA-reliance for any domain or .onion
Very hard to implement and maintain


Onion-only CAs
Simplify CA-reliance
Needs to convince existing CAs or trusted parties to maintain a whole CA organization and infrastructure


Self-auth certs via PKCS#11 module
PKCS#11 is well established, future proof, no CA-reliance
Each Operating System or application would need to configure it; built-in OpenSSL support still underway



Main implementation characteristics¶



Proposal
Implementation level
Additional requirements




Existing CA validation
Procedure happens at the CA side



ACME for .onion
Procedure happens at the CA side



Self-signed X.509 for .onion
Client or TLS library



Same Origin Onion Certificates (SOOC)
Client or TLS library



DANE for .onion
Client
Portable DNSSEC library


Onion-only CAs
Client or TLS (only needs CA installation)



Self-auth certs via PKCS#11 module
Library (PKCS#11 module)




Existing CA validation¶
The CA/Browser Forum, a consortium that produces guidelines for X.509
(TLS/HTTPS) certification, created validation rules for Onion Service v2
addresses (in 2015), later extended for Onion Services v3 (in 2020),
standardizing the way Certificate Authorities can issue certificates for
.onion addresses and supports wildcards5.
Only a few commercial providers currently provide this service6.
The Appendix B of the CA/B Baseline Requirements (current repository
version) for the Issuance and Management of Publicly‐Trusted Certificates
(since Version 1.7.4, released in 2021) establishes two validation methods to ensure
that someone request the certificate really control a given .onion address:

An "Agreed‑Upon Change to Website" (manually or via ACME), where the
   service operator must include some secret, such as at the
   /.well-known/pki-validation of the site.
TLS using ALPN.
Checking of a Certificate Signing Request (CSR) signed by the Onion Service
   private key and containing an specific cryptographic nonce (i.e, a shared
   secret to be used only once), like using the onion-csr tool.

Note that both methods does not require that operators disclose the location of
the Onion Service, nor them need to have a regular site for the service using
DNS. Validation can either happen by accessing directly the Onion Service or
by using the service private key to sign a CSR.
But still commercial CAs (or financial institution) may still collect
identifiable information during the purchase of the certificates.
ACME for .onion (CA-validated)¶
In general, getting certificates from CAs supporting the CA/B Baseline
Requirements for .onion addresses is still a manual, or in the best-case
scenario, semi-automated task.
The Automatic Certificate Management Environment (ACME) standard (RFC
8555) solves part of the automation problem, and with the arrival of
RFC 9799 it also supports methods for validating Onion Services.
Having support for .onion address in the ACME standard is the first step
for projects like Let's Encrypt to offer free certificates for Onion
Services, without financial transactions.
Existing proposals to bring ACME for Onion Services are discussed below.
ACME for Onions¶
The "Automated Certificate Management Environment (ACME) Extensions for
".onion" Domain Names" (draft-misell-acme-onion) is the second known
proposal to bring ACME for .onion addresses.
This is the proposal that lead to RFC 9799.
A detailed analysis on ACME for Onions is available in a special
appendix.
References:

ACME for Onions
AS207960/acme-onion
Work funded by OTF

ACME Onion Identifier Validation Extension¶
The "Automated Certificate Management Environment (ACME) Onion Identifier
Validation Extension" internet draft (draft-suchan-acme-onion-00)
was proposed on 2022-05 and is the first known proposal to bring ACME
for .onion addresses.
As of 2023-06-07, this internet draft is in the expired state, being now
supplanted by RFC 9799.
References:

Relevant mail threads
orangepizza/acme-onion-doc: docs about standardize handling onion address in acme context

Self-signed certificates¶
This proposal basically consists in allowing the use of self-signed
certificates with Onion Services:

For web applications like the Tor Browser, this would consist
   in disabling self-signed certificate warnings when visiting .onion
   sites. As an alternative, there's also the Self-authenticating TLS
   Certificates for Onion Services using a PKCS#11 module discussed
   below and relying on PKCS#11 modules or Authority Information Access
   (AIA) extensions, which could handle self-signed certificates matching
   the Onion Service address without the need to merge this logic directly in
   the applications, as it would remain decoupled in a PKCS#11 module, thus
   being easier to maintain.
For other applications -- like the TorVPN and third-party software --,
   this would probably require patches or documentation instructing users to
   accept non-CA signed certificates when accessing Onion Services, which is
   very hard to provide and to maintain for a wide ranging of tools.


Supported key types
In this proposal, any key types supported by applications could be used.
In case of popular web browsers, the CA/B Baseline Requirements
must be taken into account, which as of 2024-09 only allows for
RSA or ECDSA keys.
It could also be possible to use self-signed certs using Ed25519,
which is discussed below and currently not widely supported by
browsers.

This proposal would not provide:

A self-authentication mechanism (since the certificate is self-signed).
   This have a huge weight since an important piece of security provided
   by HTTPS is not just end-to-end encryption but also authentication.

Supporting self-signed certificates with Onion Services has a huge gain,
but also introduces an authentication complexity. That's why proper UI
indicators and hints are needed:

For the encryption state of the site (HTTP and various HTTPS situations).
For the authentication state of the site, telling how it was (not)
   authenticated.

There are already sketches for different scenarios for how various user
interface hints and indicators could exist for Tor Browser and other software
maintained by Tor, as well as existing certificate proposals that can change
the certificate landscape for Onion Services in the future, which could be
adopted by operators instead of relying on self-signed certs.
But all these enhancements would still limit the practical application domain
of this proposal, since it would be readily available only to a small set
of applications like Tor Browser, except if by pursuing some standardization
such as the SOOC proposal below.
Self-signed X.509 from .onion (self-signed by the .onion address)¶
Another option for having HTTPS in Onion Services that may be available in the
future is to use Onion Service key pair to self-validate an HTTPS certificate
using Ed25519 directly:

The Onion x509 is an example in how a CA self-signed by an .onion could
  be constructed.
There's also a ticket requesting to add support for self-signed HTTPS onion
  sites derived from onion service's ed25519 key in the Tor Browser.

For an overview of Ed25519, check How do Ed5519 keys work?. For details
about how Tor implements Ed25519, check prop220 (and rend-spec-v3
for how it implements at the Onion Services level).
This proposal has the advantage to not rely on Certificate Authorities, but the
disadvantage that needs additional logic both server and client side to make it
work, since a CA would needed to be installed for every visited Onion Service
using this scheme.
On using .onion keys for certification¶
It's important to note that the current (as of 2024-09) Onion Services v3
specification does not allow the Master Onion Service identity key to be used
for purposes other than generating blinded signing keys (see Section 1.9 from
the rend-spec-v3):

Master (hidden service) identity key -- A master signing key pair
  used as the identity for a hidden service.  This key is long
  term and not used on its own to sign anything; it is only used
  to generate blinded signing keys as described in [KEYBLIND]
  and [SUBCRED]. The public key is encoded in the ".onion"
  address according to [NAMING].
  KP_hs_id, KS_hs_id.

On Ed25519 certificates support in browsers¶
Also, while many TLS libraries support the Ed25519 signing scheme used for
certificates (like in OpenSSL since version 1.1.1), major web browsers
still does not support it (as of 2022-12)7, probably because
they're not supported8 by the current (as of 2024-09) CA/B
Baseline Requirements:

6.1.1.3 Subscriber Key Pair Generation
The CA SHALL reject a certificate request if one or more of the following
conditions are met:

The Key Pair does not meet the requirements set forth in Section 6.1.5
   and/or Section 6.1.6;

[...]
6.1.5 Key sizes
For RSA key pairs the CA SHALL:
• Ensure that the modulus size, when encoded, is at least 2048 bits, and;
• Ensure that the modulus size, in bits, is evenly divisible by 8.
For ECDSA key pairs, the CA SHALL:
• Ensure that the key represents a valid point on the NIST P‐256, NIST P‐384
  or NIST P‐521 elliptic curve.
No other algorithms or key sizes are permitted.

Implementing X.509 certs derived from the .onion key pair¶
In summary, implementing this proposal would require pushing at least two
specification changes:

A ballot with CA/B Forum about including Ed25519 support.
An update in the Onion Services v3 spec, allowing the Onion Service identity
   keys to either:
Also act as Certificate Authority root keys for the service.
Derive long-term (1 year) blinded keys to be used as a Certificate
   Authority for the service, maybe using the same approach described by
   Appendix A ([KEYBLIND]) from rend-spec-v3 but covering the needed
   use case of a long-term key, i.e, depending in a long-term nonce and not in
   [TIME-PERIODS].



It's also important to avoid using the Onion Service key directly as the HTTPS
certificate. That would:

Expose the Onion Service secret key material to more software than it's
  needed, like a web server.
Make it very difficult to manage offline Onion Service master keys.

Instead, it's better to use the Onion Service key pair to act as a CA that then
certifies a separate key pair to be used with HTTPS.
Similar to the self-signed certificate proposal, this approach would have
limited adoption if only as small number of applications implement it -- such
as the Tor Browser --, except if endorsed by many stakeholders in the form of a
specification -- like the SOOC proposal discussed below.
Self-authenticating TLS Certificates for Onion Services using a PKCS#11 module¶
The Self-authenticating TLS Certificates for Onion Services using a PKCS#11
module proposal mentioned above, that relies on PKCS#11 modules or
Authority Information Access (AIA) extensions, could also be used to work
with a X.509 certificate directly derived from the .onion key pair.
But contrary to the previous proposal, it would not need to use Ed25519: it
would support a signature scheme where an Ed25519 private key could sign an
ECDSA key. This Ed25519 signature could either be created using the .onion
private key itself or a fresh Ed25519 subkey, thus avoiding key reuse.
Advantages:


Would reduce logic in the Tor Browser by a well-established API.


Does not need to use Ed25519 X.509 certificates: can work with ECDSA
  which are fully supported by major browsers according to the
  CA/B Baseline Requirements, and maybe could even work with RSA.


Seems future-proof as PKCS#11 modules are widely used.


No reliance on the CA-model (and hence has increased censorship resistance).


No need to use CT Logs.


Could be used by other browsers as well (such as Brave).


Could be used with any software, library or Operating System with PKCS#11
  support.


Disadvantages:


In the short-to-mid term this would not be supported on OpenSSL
  (as of 2024-09, support PKCS#11 modules is still underway).


System-wide support would depend on how each Operating System could support
  this custom module. So could be hard to add this to TorVPN. But anyway,
  TorVPN can't validate existing self-signed .onion certs either, as
  of 2024-09.


Operators currently using self-signed certs would need to migrate to new
  certificates.


References:

namecoin/pkcs11mod: Go library for creating pkcs11 modules:
pkcs11mod progress: Windows, macOS, certutil support, and more!


Consistent PKCS #11 support in Red Hat Enterprise Linux 8.
OpenSSL support for PKCS#11:
OpenSC/libp11: PKCS#11 wrapper library (libengine-pkcs11-openssl on Debian)



Same Origin Onion Certificates (SOOC)¶
The Same Origin Onion Certificates (SOOC) proposal aims to specify when "in
very limited circumstances, we shall not care about signatures at all",
allowing clients to disable self-signed certificate warnings when visiting
.onion sites.
The main difference between the SOOC proposal and to simply start allowing
self-signed certificates is that SOOC is aimed to be an IETF proposal that
could gain momentum and hence have a greater chance to be adopt by many
different vendors.
See the SOOC document for details.
DANE for .onion¶
Another option is to use DNS-based Authentication of Named Entities (DANE),
with DNS records like this to associate an Onion Service address with a given
HTTPS certificate's public key hash:
_443._tcp.testk4ae7qr6nhlgahvyicxy7nsrmfmhigtdophufo3vumisvop2gryd.onion. TSLA 3 1 1 AB9BEB9919729F3239AF08214C1EF6CCA52D2DBAE788BB5BE834C13911292ED9

In order for that to work, logic should be implemented in the client software.
Drawbacks:

Service operators must update this record whenever a new certificate is issued.
Has some limits for wildcard certificates on specific ports.
DANE is not widely supported, especially by web browsers.
It would only work for service operators willing to publish the .onion address in the DNS.

Onion-only CAs¶
This proposal consists of:

Having .onion-only CAs with name constraints (only allowing issuance for
   .onion). Services available both via DNS-based and .onion domains will need
   to have two TLS certificates in order to use this approach -- one certificate
   for the DNS-based domain (as usual) and another only for the .onion address.
Certification procedure would be automated, so generated .onion addresses
   could easily have it's certificates issued by this special type of CA.
Certification would then happen by checking a signature in a CSR and
   comparing the Subject Alternative Name (SAN). Signature must be validated by
   the .onion address in the SAN.
So this type of CA would be mainly a basic notary that attests signatures and
   issues a corresponding certificate.
The name constraint for this type of CA ensures that it only issues
   certificates for .onion domains.

Security considerations:

Suppose there's a malicious or bugged CA of this type that issues a
   certificate containing a SAN for $address1.onion but:
Without checking whether the CSR has a signature made by
   $address1.onion's private key.
Or if allowing that another, unrelated $address2.onion actually signs
   this CSR.


Even if that's the case, i.e, the CA wrongly issued a certificate for
   $address1.onion that did not match the requirements, this certificate
   won't work in practice, since in a successful Onion Service TLS connection
   to $address1.onion the following must happen:
The underlying Tor Rendezvous connection should ensure that the
   client is connected to $address1.onion (Onion Services connections
   are self-authenticated by the .onion address).
The Onion Service should then offer it's TLS certificate, which would
   not be the malicious one (except if the service is already compromised,
   but in that case the attacker would not need to forge an invalid certificate
   anyway...).
Then the client's TLS library tests whether the certificate chain can be
   verified and any SAN in the presented certificate matches $address1.onion,
   among other checks (such as expiration).


That said, the work done by this special type of CA is only to expand the
  self-authentication property from the .onion address into a certificate. So
the attack surface of this special type of CA may be inherently low.

Implementation considerations:

Since Ed25519 certificates probably won't be supported by major
  browsers/clients in the foreseeable future (see discussion above at the
  Self-signed X.509 for .onion section), issuance should probably follow the
  Appendix B of the CA/B Baseline Requirements.
The entire certification procedure could happen via Onion Services.
Actually the whole CA infrastructure (website, APIs, OCSP etc) could be
  interacted only via Onion Services, to reduce the attack surface and protect
  the service location.
Important to consider whether would be possible to organizations setup and
  maintain a Onion-only CA that's as most automated as possible, including root
  certificate packaging/distribution/rotation.

Pros:

Easy to implement on the client side (just need to install the CA).
Easy to implement and maintain on Tor-native applications such as Tor
   Browser and the Tor VPN.
Possibly lowest attack surface than with regular CAs!
Largest certification expiration dates could be used (like one year).

Cons:

Might not be easy to find CAs willing to do this, or to a new one to be
   formed for this purpose.
Might need a merge request to include this method in the CA/B Baseline
   Requirements, if wider acceptance is intended.
No guarantees that these special CAs would be installed among all clients
   and libraries.
Need additional security analysis.

Open questions:

Need to check if Certificate Revocation Lists (CRLs) are needed,
   and how to handle it.
Need to figure out how OCSP and OCSP Stapling could happen. OSCP
   connection could be available behind an Onion Service.
Does sending certificates to CT Logs still makes sense for this special
   type of certification?
Needs built-in DoS/service abuse protection:
An idea for that: implement a simple PoW by additionally requiring that
  service operators provide a proof-ownership of another .onion address
  made by an specific vanity address (like limited to 5 or 6 chars).



References:

Proposal for Bring Accessible TLS Supports to All Onion Services, where
  this idea is initially written and discussed with the possibility for some
  clients to have only this type of CA installed (but in that case it might
  not accept valid certificates issued by regular CAs, with advantages and
  disadvantages)
Proposal for automated onion service certificate issuance based on fully
  qualified onion service key signed certificate request, where this
  proposal is sent to the CA/B Forum.

Custom CAs¶
There are also discussions about how to properly manage custom Certificate
Authorities, i.e, those not distributed in TLS libraries by default (such as
the certificate store in a web browser):

.onion indicator for non-self-signed but non-trusted sites (#27636) · Tor Browser

Further references¶
Meeting notes¶

From the 2024 Lisbon Meeting:
Self-authenticating TLS Certificates for Onion Services using a PKCS#11 module.
An update on the ACME for onions RFC.


From the 2017 Montreal Meeting:
IntegratingOnions.



Blog posts¶

Facebook, hidden services, and https certs | The Tor Project:
Part four: what do we think about an https cert for a .onion address?
Part five: What remains to be done?





.onion indicator for non-self-signed but non-trusted sites (#27636) · Tor Browser

Notes¶




But not HTTP/3 yet, since it uses UDP not available
                   via Tor (as of 2023-05). The HTTP/2 standard does not
                   require encryption, but
                   all major browsers require encryption for HTTP/2
                   and encryption for HTTP/3 is required by default. ↩


See PCI-DSS v4.0 - Appendix G - Term "Strong Cryptography" - page 355, which
            points only to "industry tested and accepted algorithms". While we could argue
            that PCI-DSS v4.0 is not precise enough about which transmission protocols
            might be used, it may be the case that the encryption used by the Onion Services'
            Rendezvous v3 protocol is not (yet) part of an "industry standard" (needs someone
            to carefully review this claim and open a merge request to update this information).
            It also may be the case that PCI-DSS compliance may be hard to get for a system
            that employs only the Rendezvous v3 protocol to transmit cardholder data between
            an user and an Onion Service, without TLS atop of it. And users might not trust
            the connection if not over TLS, or if their browser does not show certificate information. ↩


It's worth note that PCI-DSS does allow for
                    the use of self-signed certificates under some special conditions
                    that may exclude some of the proposals in this document (see PCI-DSS v4.0 - Requirement 4.2 -
                    Applicability Notes - page 106). In practice, this is
                    only applicable for internal links within an organization or for clients and libraries that
                    have the custom Certificate Authorities' root keys on it's keystores and that matches the
                    standard requirements. And users would hardly trust a
                    self-signed certificate for doing online purchases as their browsers would show
                    warning messages. Recommendation (see PCI-DSS v4.0 - Requirement 4.2 -
                    Guidance - page 106) goes instead towards a certificate trusted by a
                    Certificate Authority. ↩


However, the argument about revealing an onion site that would like
            to remain hidden, is a real one. For those services, it could
            be considered options such as a non-CT Logs issuing CA that may not be in
            the "valid" set, but operated by a friendly to Tor organization, which is
            added to Tor Browser as a valid certifier. The standards space may be
            moving towards requiring CT log submissions at some point, so this is
            something to keep an eye on. Another possibility would be to consider
            writing a standard for hashing onion site names in CT Logs, so they can
            be verified, but not revealed (such as what WhatsApp did in their
            Auditable Key Directory). Such a standard could take years to
            get to place of usefulness, and probably encounter
            resistance. Otherwise, the only option for such a service operator is
            to have a self-signed certificate, or none at all. ↩


For a historical background on Domain Validation (DV) certs,
               check the CA/B forum thread
               DV issuance for next-generation onion services. ↩


As of January 2023, there are only two CAs issuing
                    certificates for .onion domains:
                    DigiCert providing only Extended Validation (EV) certs
                    and HARICA providing only Domain Validated (DV) certs. ↩


They usually just support X25519, which is a key
agreement scheme not to be confused with Ed25519. ↩


This is tracked on cabforum/servercert issue #451, which is about
                   adding EdDSA (and hence Ed25519) support in the
                   CA/B Baseline Requirements. Check also the related mail thread
                   (Servercert-wg) Ed25519 certificates.
                   For Let's Encrypt support, check
                   letsencrypt/boulder issue 3649;
                   Request For CertBot To Support The Signing of Ed25519 Certificates and
                   Support Ed25519 and Ed448 forum threads.
                   On IETF, EdDSA and Ed25519 are standardized on
                   RFC 8032, and have Algorithm Identifiers for X.509
                   Public Key Infrastructure as part of RFC 8410. ↩















                
              
            
        
      
      
        
      
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Bookmarks.txt is a concept of keeping URLs in plain text files]]></title>
            <link>https://github.com/soulim/bookmarks.txt</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45047572</guid>
            <description><![CDATA[bookmarks.txt is a concept of keeping URLs in plain text files. - soulim/bookmarks.txt]]></description>
            <content:encoded><![CDATA[bookmarks.txt
bookmarks.txt is a concept of keeping bookmarks in plain text files.
Principals

Bookmarked URLs are stored in files named bookmarks.txt. The format is described below.
A "global" bookmarks file is located in the home directory ($HOME/bookmarks.txt).
"Local" bookmarks files could exist in different directories as well.

Format
URLs are stored one per line and could be accompanied with optional titles. Titles are separated from URLs with one space character.
URL [title]

Examples:


a URL without any title
https://www.example.com
-----------------------
^
URL



a URL with a title
https://sul.im personal website
-------------- ----------------
^              ^
URL            Optional title



Tools
The plain text nature of bookmark files allows to use any program to manage URLs. The bin/ directory of this repository contains bookmarks script that could be used to list existing and add new URLs. However nothing should stop you from building your own tools.
Usage
Use fzf to select a URL and open it in the default browser:
./bin/bookmarks | fzf | cut -d ' ' -f 1 | xargs open
Add a new URL:
./bin/bookmarks https://github.com/soulim/bookmarks.txt
This is how I use bookmarks.txt:

$HOME/bookmarks.txt contains URLs useful in any context. These are "global" addresses.
Each project directory has "local" bookmarks.txt files with URLs pointing to tools specific to each project (repositories, monitoring tools, dashboards, and so on).
A symbolic link $HOME/bin/bookmarks point to bin/bookmarks from this directory.
With help of fzf I have a nice menu with fuzzy search to select URLs and open them automatically.

Contributing
bookmarks.txt is open to code contributions for bug fixes only. As features might carry a long-term maintenance burden, they will not be accepted at this time. Please submit an issue if you have a feature you would like to request.
License
See LICENSE for license text.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Open Source is one person]]></title>
            <link>https://opensourcesecurity.io/2025/08-oss-one-person/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45047460</guid>
            <description><![CDATA[The Register recently published a story titled Putin on the code: DoD reportedly relies on utility written by Russian dev. They should be ashamed of this story. This poor open source developer is getting beat up now to score some internet points. It&rsquo;s very upsetting.
But anyway, let&rsquo;s look at some receipts.
If you&rsquo;re not real smrt, it seems like pointing out an open source project is written by one person in a country you don&rsquo;t like is a bad thing. It could be. But it also could be the software running THE WHOLE F*CKING PLANET is written by one person. In a country. But we have no idea which country. It&rsquo;s not the same person mind you, but it&rsquo;s one person.]]></description>
            <content:encoded><![CDATA[The Register recently published a story titled Putin on the code: DoD reportedly relies on utility written by Russian dev. They should be ashamed of this story. This poor open source developer is getting beat up now to score some internet points. It’s very upsetting.
But anyway, let’s look at some receipts.
If you’re not real smrt, it seems like pointing out an open source project is written by one person in a country you don’t like is a bad thing. It could be. But it also could be the software running THE WHOLE F*CKING PLANET is written by one person. In a country. But we have no idea which country. It’s not the same person mind you, but it’s one person.
Here’s the thing. Almost all open source is literally one person. What I mean by that is if you look at all the open source projects out there, and there are a lot, we see a pattern of one person no matter how we slice and dice the data.
So let’s start with the data. A project exists called ecosyste.ms that catalogs a lot of open source. Most of it I would guess, but not all. They currently have 11.8 million open source projects in their data. You would be right to think that is a big number. I’m told anything over 15 is a big number, but it probably depends how smart you are, or think you are.
So what do we mean by one person is open source. What I mean is if we look at all the projects that ecosyste.ms is tracking, how many have a single person maintaining that project? It’s about 7 million. This is also a big number. 7 million open source projects are one person. It’s actually bigger than that, because of the 11.8 million projects ecosyste.ms is tracking, we don’t know how many maintainers 4 million of the projects have. A bunch of those will be one person. Here’s what a graph of this looks like

I clipped the graph so it looks nicer. There are projects with hundreds of maintainers. Not a ton, but they exist.
Now, the clever people among us are thinking “but Josh, surely these 7 million projects are all things nobody uses, the important open source we all use has loads of maintainers!!!”
You would be right to think that. It’s the first thought I had back when I started to look at this data. It’s OK. You’re still in the denial stage. Hopefully you’ll reach anger by the end of this post.
So we’re going to use the NPM ecosystem to explain this. I use NPM because they have the richest data in ecosyste.ms to explain my point. I’ve done this same thing across multiple ecosystems and the graphs all look the same.
So, what does the NPM maintainer graph look like.

Your first thought is probably “why is the left axis green?” It’s not an axis, it’s the single maintainer number. It’s that huge compared to literally all the other data. There are just that many single person NPM projects.
So now, let’s look at the number of maintainers for projects with over 1 million downloads this month.

This time the graph shows how many downloads projects with over 1 million downloads, and one maintainer or more than one maintainer. It was easier to show the data by creating these two buckets.
That’s almost a 50/50 split. Think about that. About half of the 13,000 most downloaded NPM packages are ONE PERSON. We can change the download number and the graph stays this shape. It’s not until I change downloads to 1 billion downloads that we see 1 package maintained by 1 person, and 9 packages maintained by more than 1.
This is open source. Open source is one person, even the popular stuff.
I will also add, a lot of people own more than one package. So while NPM has over 4 million single person projects, they have about 900,000 maintainers for those 4 million single person projects. This will be an important data point at the end.
So here’s the big conclusion. If you want to make a big deal about something, maybe it shouldn’t be what country a sole maintainer is from. Let’s face it, the Russians aren’t dumb enough to backdoor a package owned by a guy living in Russia. They’re going to do something like pretend to be from another country with a name like Jia Tan, not Boris D. Badguy. This isn’t a Rocky and Bullwinkle episode.
Anyway, back to the conclusion
Open source, the thing that drives the world, the thing Harvard says has an economic value of 8.8 trillion dollars (also a big number). Most of it is one person. And I can promise you not one of those single person projects have the proper amount of resources they need. If you want to talk about possible risks to your supply chain, a single maintainer that’s grossly underpaid and overworked. That’s the risk. The country they are from is irrelevant.
And now if we have news stories being written about how a single person maintainer is the bad guy? That’s not cool (this is where your denial is supposed to turn into anger).
So what can you do about this? How can you turn your newly denial-turned-anger into action? We don’t really know unfortunately. I discussed this in a podcast episode Hobbyist Maintainers with Thomas DePierre. Like many hard problems, there isn’t an easy solution. But I guarantee the solution isn’t hunting down and demonizing single maintainers.


  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Altered states of consciousness induced by breathwork accompanied by music]]></title>
            <link>https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0329411</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45046916</guid>
            <description><![CDATA[The popularity of breathwork as a therapeutic tool for psychological distress is rapidly expanding. Breathwork practices that increase ventilatory rate or depth, facilitated by music, can evoke subjective experiential states analogous to altered states of consciousness (ASCs) evoked by psychedelic substances. These states include components such as euphoria, bliss, and perceptual differences. However, the neurobiological mechanisms underlying the profound subjective effects of high ventilation breathwork (HVB) remain largely unknown and unexplored. In this study, we investigated the neurobiological substrates of ASCs induced by HVB in experienced practitioners. We demonstrate that the intensity of ASCs evoked by HVB was proportional to cardiovascular sympathetic activation and to haemodynamic alterations in cerebral perfusion within clusters spanning the left operculum/posterior insula and right amygdala/anterior hippocampus; regions implicated in respiratory interoceptive representation and the processing of emotional memories, respectively. These observed regional cerebral effects may underlie pivotal mental experiences that mediate positive therapeutic outcomes of HVB.]]></description>
            <content:encoded><![CDATA[








  
    Loading metrics
  








    
  Open Access
  Peer-reviewed

Research Article



    




  






       



   
Toru Horinouchi  ,    



   
Balázs Örzsik  ,    



   
Brittany Anderson  ,    



   
Lottie Hall,    



   
Duncan Bailey,    



   
Sarah Samuel,    



   
Nati Beltran,    



   
Samira Bouyagoub,    



   
Chris Racey,    



   
Yoko Nagai,    



   
Iris Asllani,    



   
Hugo Critchley,    



   
Alessandro Colasanti      









    
      Neurobiological substrates of altered states of consciousness induced by high ventilation breathwork accompanied by music



  Amy Amla Kartar, 

  
  Toru Horinouchi, 

  
  Balázs Örzsik, 

  
  Brittany Anderson, 

  
  Lottie Hall, 

  
  Duncan Bailey, 

  
  Sarah Samuel, 

  
  Nati Beltran, 

  
  Samira Bouyagoub, 

  
  Chris Racey





    
    
      x
    
  

      
        Published: August 27, 2025
        
https://doi.org/10.1371/journal.pone.0329411
        
        
      

    
  

  







  Figures

  

          

            

          

            

          

            

          

            

          

            

          

            
      






        
          



AbstractThe popularity of breathwork as a therapeutic tool for psychological distress is rapidly expanding. Breathwork practices that increase ventilatory rate or depth, facilitated by music, can evoke subjective experiential states analogous to altered states of consciousness (ASCs) evoked by psychedelic substances. These states include components such as euphoria, bliss, and perceptual differences. However, the neurobiological mechanisms underlying the profound subjective effects of high ventilation breathwork (HVB) remain largely unknown and unexplored. In this study, we investigated the neurobiological substrates of ASCs induced by HVB in experienced practitioners. We demonstrate that the intensity of ASCs evoked by HVB was proportional to cardiovascular sympathetic activation and to haemodynamic alterations in cerebral perfusion within clusters spanning the left operculum/posterior insula and right amygdala/anterior hippocampus; regions implicated in respiratory interoceptive representation and the processing of emotional memories, respectively. These observed regional cerebral effects may underlie pivotal mental experiences that mediate positive therapeutic outcomes of HVB.



Citation: Kartar AA, Horinouchi T, Örzsik B, Anderson B, Hall L, Bailey D, et al.  (2025) Neurobiological substrates of altered states of consciousness induced by high ventilation breathwork accompanied by music. PLoS One 20(8):
           e0329411.
        
        https://doi.org/10.1371/journal.pone.0329411Editor: Gaëtan Merlhiot, Institut VEDECOM, FRANCEReceived: August 6, 2024; Accepted: July 16, 2025; Published:  August 27, 2025Copyright:  © 2025 Kartar et al. This is an open access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.Data Availability: All relevant data for this study are publicly available from the OSF repository (https://doi.org/10.17605/OSF.IO/5WR9Q).Funding: The author(s) received no specific funding for this work.Competing interests:  The authors have declared that no competing interests exist.





IntroductionHigh ventilation breathwork (HVB) encompasses contemplative and therapeutic practices, including Conscious Connected Breathing or Holotropic Breathwork, in which a controlled pattern of volitional breathing increases the rate or depth of ventilation and is typically accompanied by evocative music. Despite their distinct historical roots and delivery modalities, these different HVB practices share a purported ability to elicit acute extraordinary alterations in subjective experience that closely resemble the qualia of altered states of consciousness (ASCs) induced by psychedelic substances [1–3]. Converging evidence demonstrates the potential value of psychedelic treatments for specific difficult-to-treat psychiatric and physiological conditions [4–7]. The induction of ASCs is suggested to be critical to the therapeutic action of psychedelic substances [8–10], for which HVB might therefore offer a non-pharmacological alternative, with fewer legal and ethical restrictions to large-scale adoption in clinical treatment. In line with this, the popularity of HVB as a therapeutic tool for psychological distress is rapidly expanding, indexed by an increased number of scientific investigations, see [11,12] for more details.
The therapeutic potential of HVB practices is suggested by a long cultural tradition of use to relieve symptoms of psychological distress [11,13] and by emerging preliminary evidence of clinical efficacy from controlled trials in affective and trauma-related disorders [14]. Prolonged hyperventilation/HVB reportedly elicits a wide range of effects on subjective experience that include emotional and psychedelic-like phenomena (ASCs), which range from panic-like sensations to feelings of awe and dissociative symptoms [11]. The 5D-ASC questionnaire is popularly used in ASC research to retrospectively assess such states [15]. A key dimension of this scale is ‘Oceanic Boundlessness’ (OBN); a term coined by Freud in 1920 [16] which describes a set of related feelings including ‘spiritual experience, insightfulness, blissful state, positively experienced depersonalization, and the experience of unity’ [17]. OBN is considered as a defining aspect of ASCs evoked by psychedelic substances, such as psilocybin. However, the neurobiological mechanisms and subjective experience underlying ASCs induced by HVB have not been studied extensively and remain elusive.
First, we characterised the subjective experience of HVB to capture the nature and intensity of evoked experiential phenomena. From these data, we aimed to assess whether these effects could be reliably reproduced in controlled experimental settings in comparison to a remote – and more ecologically valid – condition. These findings informed the choice of the ASC variable, OBN, which was ultimately selected as the most widely reported experiential phenomena to identify the critical neurobiological effects of HVB.
Then we examined the effects of HVB performed by experienced breathwork practitioners in different experimental settings, and investigated peripheral and central neurophysiological mechanisms underpinning ASCs engendered by HVB. The neurobiological endpoints were selected based on well-characterised neurophysiological effects of hyperventilation (reviewed in [11]). Hyperventilation acutely reduces regional cerebral blood flow (rCBF) through interacting effects of hypocapnia, cerebral alkalosis and hypoxia, resulting in transient perturbation of neurometabolic homeostasis. Further, hyperventilation evokes allostatic changes in action-ready bodily arousal, mediated via the autonomic nervous system via the dominance of sympathetic over parasympathetic drive to the heart and blood vessels. In characterising the neurobiological effects of HVB and associated ASCs, we therefore focused our measurements on two robust indices of neurometabolic and autonomic nervous control: rCBF and heart rate variability (HRV).
To our knowledge, no studies have previously reported the relationship between the intensity of ASCs and changes in rCBF induced by HVB practices. Since we could not base our prediction of the regional specificity of such correlations on previous knowledge, we preferred to adopt a whole brain voxelwise exploratory approach. Also, as observations reported on the effects of psychedelics on autonomic nervous system activity have been contrasting [18,19], we could not make precise predictions on the direction of association between HRV and ASCs.
Our study was designed to address different objectives through three inter-related experiments: (please see the methods for more details), in 1) HVB was conducted over an online video-conferencing platform with a breathwork facilitator (REMOTE setting). The aim was to characterise the subjective response to remote HVB in a home setting, and inform the choice of the ASC domain to be used as subjective endpoint. In 2), we used pseudo-continuous arterial spin labelling (pCASL) magnetic resonance imaging (MRI) of the brain during HVB to identify the relationship between neural haemodynamic effects of HVB and subjective measures (MRI setting). In 3) HVB was performed in a psychophysiology lab to characterise the relationship between the psychophysiological effects of HVB (autonomic alterations, see ‘psychophysiological session 3’ for more information) and subjective measures (LAB setting).


Materials and methods
Ethics statement
This research was approved by the Research Governance and Ethics Committee (RGEC) in Brighton and Sussex Medical School (BSMS) as ERA/BSMS9AN4/2/2. Recruitment began on 24/11/2021 and ended on 03/03/2022. Participants provided written informed consent before participating.


Participants
Physically and psychiatrically healthy participants aged 18–65 years old were recruited from the local area through advertisements and flyers distributed at breathwork events, in yoga/meditation centres, and on social media. Participants were eligible to take part if they had either 10 or more experiences of fast-paced breathwork or at least 6 months of any HVB practice (as defined in [11]). They were screened online for eligibility and excluded if they were pregnant, currently experiencing any psychiatric condition (assessed using the Mini International Neuropsychiatric Interview (MINI) to ensure absence of DSM-V listed disorders) [20]. Additional exclusion criteria included a history of epileptic seizures, panic disorder, or syncope in prior HVB, current neurological, musculoskeletal, respiratory, or cardiovascular disease, current pharmacological treatment, and contraindications to MRI.
Participants and were financially compensated £10 per hour for their time and up to £10 in travel expenses.


Breathwork modality and subjective measures
HVB consisted of cyclic breathing without pausing, accompanied by progressively evocative music. This aimed to reproduce the experience of Conscious Connected Breathing, a widely adopted HVB practice typically led by a trained breathwork facilitator. In the online experimental session, instructions were provided by a breathwork facilitator (DB) who hosted the group of online participants. For the LAB and MRI setting, pre-recorded instructions by the same facilitator were delivered to participants. Specific details on breathwork instructions are presented in the supplementary index (S1 Appendix).


Questionnaires
Self-reported measures were consistent across the three conditions and administered online via Qualtrics (Qualtrics, Provo, UT) [21] within 30 minutes post-HVB. The selected questionnaires assessed: 1) Affect (Positive and Negative Affect Schedule – Expanded Form, PANAS-X [22]); 2) Panic–like symptoms (Panic Symptoms List, PSL [23]), 3) Fear and discomfort (Visual Analogue Scales (VAS) [24]), and 4) Symptoms of ASCs (5-Dimensional Altered States of Consciousness Rating Scale, 5D-ASC [15]).
Pre-session questionnaires included the VAS (scored from “0 – no fear and discomfort” to “100 – complete fear and discomfort”) [24] and the PANAS-X, which measured affect using 60 items rated on a 5-point Likert scale from “1 – very slightly or not at all” to “5 – extremely” [25].
Post-session questionnaires included the VAS and PANAS-X again, as well as the 5D-ASC, which retrospectively assessed ASCs using 94 items rated via VAS [17]. Questions and responses were grouped into 3 broad subscales: oceanic boundlessness (OBN) as previously mentioned, visionary restructuralisation (VRS) to examine the effect of the HVB on vision, and Dread of Ego Dissolution (DED) which captures the anxiety-inducing effects of the experience related to the idea of the dissolution of the self [15]. The PSL, a 13-item tool used to evaluate panic symptomatology, required participants to rate each item on a five-point scale from “0 – not at all” to “4 – extremely severe”.
The PSL and VAS for fear/discomfort were scored based on [24]: a significant panic attack was indicated by an increase in VAS fear by 50 points and 4 or more items rated above mild in the PSL (mild = 2).


Online experimental session 1 (REMOTE)
The session was conducted remotely via an online video-conferencing platform (Zoom). Preparatory information was sent to participants after screening and enrolment, including the platform link, instructions, and pre- and post-session questionnaires.
Participants received instructions on camera setup and were assigned personal participant numbers. They were instructed to be in a private room to avoid interruptions and to position their cameras to capture their chest and stomach for observation of full-body, continuous breaths. A breathwork facilitator remotely guided groups of participants through the 30-minute online breathwork session. Members of the research team were present online to ensure session consistency and to monitor participant engagement in HVB practice. No group experience-sharing (integration) followed the breathwork sessions to avoid memory and experience merging. Instead, participants self-integrated (processed) their session by completing retrospective questionnaires that explored the qualia of the experience within 30 minutes of concluding the session.


Neuroimaging experimental session 2 (MRI)
Each participant in the neuroimaging session was scanned on a Siemens Prisma 3T magnetic resonance imaging (MRI) scanner fitted with a 32-channel head coil. High-resolution structural scans were obtained during rest using a 3D T1-weighted magnetization-prepared rapid acquisition gradient echo (T1 MPRAGE) sequence (repetition time (TR) = 2300 ms, echo time (TE) = 2.19 ms, flip angle = 9°, matrix = 256 × 256, voxel size = 1.0 × 1.0 × 1.0 mm3, GRAPPA acceleration factor = 2; total acquisition time (TA) = 5m 30s). Additionally, twenty control and label images were acquired per condition using a pCASL with background suppression following the parameter recommendation of the consensus paper [26]: label duration = 2000ms, post-labelling delay (PLD) = 1800ms, TR = 5000 ms, TE = 14 ms, voxel size = 3.4 × 3.4 × 6.0 mm3, TA = 3m 22s), was acquired. A proton density (M0) image was acquired using the same readout and TR as the control and label images to estimate pcASL CBF.
Fig 1 is a schematic presentation of the MRI experimental design. Recorded instructions (see S1 Appendix) guided participants to breathe through three phases: BASELINE, START, and SUSTAINED HVB. BASELINE consisted of breathing at a normal rate for 20 minutes. Participants were asked to gradually increase their ventilation rate and/or depth via recorded instructions (START HVB) for approximately 6 minutes. The SUSTAINED HVB phase started after at least 5 minutes of START HVB and once end-tidal CO2 (EtCO2), measured via nasal cannula connected to a capnograph (MICROCAP®, Oridion Medical LTD), was stable at levels ≤20 mmHg (from a typical value of 35–40 mmHg), and was maintained for a further ~20-minutes.
Fig 1.  MRI experimental design. pcASL = pseudo-continuous arterial spin labelling, displayed in bold as the primary imaging focus.MPRAGE = 3D magnetization-prepared rapid gradient-echo, ASE = asymmetric spin-echo spiral, BOLD = blood oxygen level dependent, AP/PA anterior-posterior, posterior-anterior. BASELINE = 25 min 32s, breathwork = 23 min 10s. Relaxing music was played at BASELINE during rest for the participant, and evocative up-tempo music that features in breathwork sessions with instructions recorded by a breathwork facilitator were played during HVB.

              https://doi.org/10.1371/journal.pone.0329411.g001Scans were performed during BASELINE (10 minutes after the scan start), at the start of HVB (immediately after initiating HVB), and during SUSTAINED HVB (after at least 6 minutes of uninterrupted breathwork).
SPM12 [27] and custom written Matlab (The MathWorks Inc., Natick, Massachusetts) scripts were used for image processing and statistics. Rigid-body motion correction was used to realign labelled and control images, and perfusion weighted images were calculated for the realigned control-labelled pairs by subtracting the labelled image from the control. The mean perfusion weighted images were then used to estimate CBF using the one-compartment model [26] and processed to obtain partial volume-corrected [28], tissue-specific (i.e., grey matter (GM) and white matter (WM)) CBF images independently. The pcASL CBF images were normalized maps in MNI space using SPM12 [27]. Participants with prominent arterial transit artifacts in the CBF images, evident by the presence of strong arterial signals upon visual inspection, were excluded from the study.


Psychophysiological session 3 (LAB)
Participants in the psychophysiology study attended the psychophysiology lab at the Trafford Centre for Medical Research at BSMS. To measure beat-to-beat heart rate (HR) and HRV (computed as the root mean square of successive differences, RMSSD) [29], an electrocardiograph (Firstbeat Bodyguard 2 device) was applied to the torso [28]. To measure EtCO2, the participant was fitted with a nasal cannula connected to a capnograph (MICROCAP®, Oridion Medical LTD). Following a BASELINE period during which the participant was instructed to breathe as normal to relaxing music for 10 minutes, the participant was instructed to perform HVB (see supplementary index for more information). This began as a 5-minute warm-up (START HVB) where the participant performed HVB to lower their EtCO2 to ≤20 mmHg, followed by 25-minutes of HVB (SUSTAINED HVB) where EtCO2 was maintained ≤20 mmHg, aided by recorded instructions from a trained breathwork facilitator. For analyses, the HVB period was defined as starting once EtCO2 was stable below 20 mmHg and was subsequently recorded for 20 minutes. The recovery period began immediately after HVB was terminated, and participants resumed their normal breathing. Participants completed retrospective questionnaires within 30 minutes of the session’s conclusion.

Data analysis and statistics.Objective 1: To characterize the subjective response to HVB across different settings (REMOTE, LAB, MRI), we compared affective responses (PANAS-X scores clustered into positive and negative domains), panic-like symptoms (VAS fear/discomfort and PSL) and ASCs. For the 5D-ASC, the percentage maximum score was calculated per participant and dimension [30]. Data were compared across the three experiments to test for differences in self-reported effects. A linear mixed-effects model (LMM) was used to examine the effects of setting on the mean responses within each dimension of the 5D-ASC and for the PSL, accounting for subject-specific variability as a random effect using the lmer package in R; [31]. We used the likelihood ratio test to compare a full model with a fixed effect of setting and a random effect of subject to a reduced model with only a random effect of subject [31]. Post-hoc tests were performed using the emmeans package in R [32], adjusted for multiple comparisons using the Tukey method.
For the PANAS-X and VAS, we used an LMM analysis to examine the effects of HVB (pre- versus post-) on setting and the type of question (positive versus negative affect for PANAS; discomfort versus fear for VAS), accounting for subject-specific variability as a random effect. We explored two-way interactions between all the variables and post-hoc tests using the same methods as the previous analyses [32].
Objective 2: In order to test the correlations between HVB-induced ASCs and rCBF effects, two contrasts between HVB time points (see MRI experimental design in Fig 1) were studied using paired-samples t-tests in SPM12 [27]: contrast 1) between BASELINE and START HVB grey matter CBF; contrast 2) between BASELINE and SUSTAINED HVB grey matter CBF. Following this, voxel-wise maps of changes in pcASL rCBF (ΔrCBF) were calculated for the contrasts between BASELINE versus SUSTAINED HVB, and START versus SUSTAINED HVB. These ΔrCBF maps were then used for voxelwise correlation analysis with the OBN score, selected as the highest-rated 5D-ASC dimension. Voxel clusters were considered significant at a cluster-forming threshold of p < 0.001, corrected for multiple comparisons using family-wise error (FWE) correction, with a significance level of p < 0.05.
Objective 3: To investigate changes in cardiac autonomic drive during HVB and their relationship to the intensity of ASCs, we calculated change in HRV (ΔRMSSD) and HR. Heartbeat timing data were imported from the Firstbeat Bodyguard device into Kubios 3.5.0 HRV scientific 4.1.0 for processing. Raw data contained substantial noise from chest movement. After an initial phase of artefact removal, interbeat interval (IBI) data were smoothed using an automatic noise detection filter at a medium threshold [33]. A repeated measures ANCOVA with contrasts for different orders of an equation was conducted using HRV and OBN (5D-ASC selected from objective 1) as covariates to explain HRV variance over time, with polynomial contrast applied to identify linear and complex patterns, allowing us to characterise dynamic trends in HRV responses to HVB.




ResultsSelf-reported data from 42 participants were analysed, comprising 31 unique individuals. Study participants enrolled in one to three experimental sessions: n = 15 (age 42.9 ± 12.6 years, 5 females) for the online experimental session; n = 8 (age 41 ± 13.02 years, 2 females) for the session conducted within the psychophysiology lab; and n = 19 (age 43.7 ± 11.9; 7 females) for the MRI experimental session. There were different participants in each condition (3 repeated all conditions, 5 participants participated in 2 conditions, see S1 Fig for key subjective effects of repeated participants). No adverse events, including panic attacks, were reported across all experimental settings.

Subjective effect results
Generally, measures of fear and discomfort were low in all conditions (Fig 2, panel C). LMM analyses identified only a significant two-way interaction between HVB and question type (fear and discomfort), with post-hoc tests showing a significant increase in discomfort post-HVB. These results indicate that perceived discomfort increased during HVB, while perceived fear remained stable across settings.
Fig 2.  Analysis of subjective effects. A) Averages of the % maximum scores of the 5 dimensions of the 5D-ASC for each of the 3 settings. OBN = oceanic boundlessness; DED = dread of ego dissolution; VRS = visionary restructuralisation; AUA = auditory alterations; VIR = vigilance reduction.B) For the 5D-ASC, a linear mixed-effect model did not show an effect of setting (χ2(2) = 3.66, p = 0.160; see ‘Data analysis and statistics’). C) Fear and discomfort assessed by VAS indicated no significant effect of experimental setting on HVB, although there was a trend increase in discomfort and reduction in fear after HVB across all environments. D) Negative affect assessed by PANAS-X was reduced by HVB. There was no significant effect of HVB on positive affect, and no significant effect of environment on negative or positive affect. E) For the PSL, a linear mixed-effect model revealed a significant main effect of setting (χ2(2) = 20.41, p < 0.001; see ‘Data analysis and statistics’). Post-hoc Tukey tests identified significant differences between LAB vs. MRI and MRI vs. REMOTE (LAB – MRI, t(22.11) = −3.78, p = 0.003; LAB – REMOTE, t(28.84) = 0.041, p = 0.999; MRI – REMOTE, t(34.09) = −4.37, p < 0.001).

              https://doi.org/10.1371/journal.pone.0329411.g002None of the mean individual post-HVB PSL scores were ≥ 2, indicating that no panic symptoms reached a clinically significant threshold (a score of 2 corresponded to ‘moderate’). However, the LMM identified a significant main effect of setting on the PSL, with post-hoc analyses showing the PSL scores were significantly higher in the MRI setting compared to the LAB and REMOTE settings (Fig 2, panel E). LMM analyses on the PANAS-X found only a significant two-way interaction between pre/post-HVB and affect, with post-hoc analyses revealing a significant decrease in negative affect from pre- to post-HVB (Fig 2, panel D). These results indicate that HVB decreased negative affect, while positive affect remained stable across settings.
In all three settings, HVB elicited altered subjective experiences indicated by positive scores in all dimensions of the 5D-ASC (Fig 2, panels A and B). The highest rated phenomenon was OBN across all three settings, which was selected as a meaningful proxy indicator of the subjective effects of HVB for analysis. A LMM revealed no significant main effect of setting and no significant interaction effect between setting and dimension (Fig 2, panel B).


MRI results
Datasets from 13 participants (mean age 43.7 ± 11.9; 7 female) were included in the analysis. Voxel clusters showing statistically significant CBF reductions occupied 12% and 28.5% of global grey matter volume at START and SUSTAINED HVB, respectively. Global CBF was reduced by 30.5% during START (36.2 ± 12.4 ml/100g/min) and 41.6% during SUSTAINED HVB (30.5 ± 8.5 ml/100g/min) relative to BASELINE (52.2 ± 8.2 ml/100g/min).
We first identified a region of cortex where HVB-evoked reduction in perfusion (ΔrCBF from BASELINE to SUSTAINED) correlated with the magnitude of ASC in the OBN dimension. This cluster encompassed left parietal operculum/posterior insula (PO/INS) (Fig 3). Here, rCBF in PO/INS was reduced by 7.7% during the START period of HVB (43.7 ± 10 ml/100g/min) and 18.9% during SUSTAINED HVB (38.4 ± 12.7 ml/100g/min) relative to BASELINE (52.2 ± 8.2 ml/100g/min).
Fig 3.  Negative correlation between CBF and intensity of subjective experience (OBN) during BASELINE HVB (p = 0.0475) and SUSTAINED HVB in the left posterior insula/parietal operculum.Data points represent cluster means. Statistical significance was assessed using cluster size inference (initial cluster-forming threshold: p < 0.001; corrected FWE: p < 0.05).

              https://doi.org/10.1371/journal.pone.0329411.g003Next, we identified regions of significant positive correlation between OBN score and ΔCBF changes from START to SUSTAINED (Fig 4). The cluster encompassed right basolateral amygdala and extended to the CA1 region of anterior hippocampus (BLA/CA1) rCBF. Statistical significance was assessed using cluster size inference (initial cluster-forming threshold: p < 0.001; corrected FWE: p < 0.05).
Fig 4.  Positive correlation between the intensity of subjective experience (OBN) and ΔCBF in the right basolateral nuclei of the amygdala that extends to CA1 areas of the hippocampus during SUSTAINED HVB, relative to START.Data points represent cluster means. Statistical significance was assessed using cluster size inference (initial cluster-forming threshold: p < 0.001; corrected FWE: p < 0.05).

              https://doi.org/10.1371/journal.pone.0329411.g004We then investigated if specific concepts related to OBN, namely, disembodiment, experience of unity and blissful state [17], were associated with ΔCBF in PO/INS from BASELINE to SUSTAINED. Analyses identified negative correlations between ΔCBF and the experience of unity (Fig 5A) and blissful state (Fig 5B), but not disembodiment, indicating that the magnitude of subjective experience related to bliss and unity correlated with a reduction in perfusion in this region.
Fig 5.  A. Negative correlation between the intensity of subjective experience (experience of unity) and CBF in PO/INS during SUSTAINED HVB, relative to BASELINE, and B.Negative correlation between the intensity of subjective experience (blissful state) and CBF in PO/INS during SUSTAINED HVB, relative to BASELINE. Data points represent cluster means. Statistical significance was assessed using cluster size inference (initial cluster-forming threshold: p < 0.001; corrected FWE: p < 0.05).

              https://doi.org/10.1371/journal.pone.0329411.g005

HRV results
A repeated-measures ANCOVA demonstrated an effect of time on RMSSD through BASELINE and phases of HVB and recovery, indicating a significant within-participant cubic effect. There was a significant interaction effect between OBN and the polynomial cubic contrast, F(1, 6) = 6.211, p < 0.05 (Fig 6).
Fig 6.  The exploratory mean change from BASELINE in RMSSD (ms) and HR (bpm) across participants during the breathwork protocol after the first BASELINE period (of 5 minutes) in individuals with high (n = 3) and low (n = 5) oceanic boundlessness (OBN) scores. BL = baseline, HVB = high ventilation breathwork, R = recovery. Each period = 5 minutes.
              https://doi.org/10.1371/journal.pone.0329411.g006Participants were classified into high and low OBN responders using a cutoff score of 50 (50% of the maximum score) to identify ASC experience based on criteria in psychedelic drug literature, e.g., [34].



DiscussionOur study is the first that aims to characterise the relationship between the intensity of ASCs induced by HVB practices and associated central and autonomic nervous system effects, via changes in pcASL rCBF and HRV, respectively. Our findings identified significant correlations that might indicate possible neurobiological substrates of HVB-evoked ASCs, accompanied by music. First, our findings demonstrated that the experience of HVB can be safely reproduced across different experimental settings. The pattern of self-reported experiences elicited within the MRI scanner and psychophysiology lab were analogous to those experienced at home (a more natural and comfortable environment).
During all experimental sessions, participants reported a trend-level reduction in ratings of fear and negative emotions. Additionally, no adverse reactions or panic attacks were experienced by any participants. However, there was a mild increase in discomfort ratings and mild panic-like symptoms were reported during the MRI session – although these were not associated to increased anxiety or panic attacks and might have been evoked by the physical constraints of being inside the MRI chamber. This experience conflicts typical breathwork practice. The observed increase in physical discomfort alongside reductions in fear and negative affect may reflect a hormetic effect, whereby transient physiological or emotional stressors promote longer-term psychological resilience [35,36].
Across participants and experimental settings, HVB reliably enhanced ASCs dominated by OBN, which is considered as a defining aspect of ASCs evoked by psychedelic substances, such as psilocybin. Although differences in OBN scores across conditions were not statistically significant, participants in the LAB condition reported noticeably higher scores compared to MRI and REMOTE sessions. This trend suggests that the in-person experience and controlled, quiet environment of the LAB may have enhanced the immersive and evocative qualities of the breathwork experience. In contrast, the MRI setting—despite also involving in-person contact —may have been less conducive due to scanner noise and physical constraints. Finally, the REMOTE condition, which involved no in-person interaction and took place in participants varied home environments, received the lowest OBN ratings. These findings point to the importance of ‘set and setting’, e.g., [37], a concept well-established in psychedelic research in shaping ASCs and subjective response. These results may indicate that physical context and interpersonal presence play a critical role in breathwork outcomes.
Interestingly, OBN is reportedly the most accurate predictor of antidepressant actions of psychedelic substances [9,38–40]. In the present study, the magnitude of the OBN experience induced by HVB was comparable to that elicited by serotonergic psychedelic substances, including psilocybin and lysergic acid diethylamide (LSD) [41,42], reinforcing observations of other breathwork studies [1,2].
Fast-paced hyperventilation induces cardiovascular sympathetic activation (with relative cardiovagal parasympathetic withdrawal) and cerebral vasoconstriction, the latter is a consequence of respiratory alkalosis, resulting from reduced plasma CO2 and H+, which elevates blood pH [43]. Ergo, we focused our analysis on correlations between OBN and changes in HRV (for which decreases capture pro-sympathetic shifts in cardiac autonomic balance) and CBF (where regional reductions reflect cerebrovascular vasoconstriction). Importantly, decreased EtCO2 is implicated as a critical factor in catalysing stronger, deeper ASCs during breathwork and may predict subacute psychological and physiological outcomes [2,44].
Our experiments identified that HVB engendered substantive time-dependent decreases in pcASL CBF. The reduction of rCBF relative to BASELINE in a cluster localized within left posterior insula and left parietal operculum predicted the intensity of OBN. This region encompasses primary interoceptive cortex and represents the state of cardiorespiratory arousal, and is consequently engaged in higher-order respiratory control. Correspondingly, neural activity here is enhanced by chemo-stimulated increases in ventilation [45]. More broadly, this insular-parietal region supports the integration of somatosensory information as well as the cortical representation of afferent respiratory and bodily signals [46], for example in the emergence of conscious motor intentions [47]. It is also implicated in high-level integrative processes which merge external and internal stimuli [48,49] that contribute to a coherent, embodied representation of self [50].
These roles are relevant to the interpretations of our finding that rCBF reductions within the PO/INS during SUSTAINED HVB predicted the intensity of self-reported OBN experience. The construct of OBN is closely related to feelings of depersonalization, sense of unity and blissful state [16], and our findings align with the notion that abnormal integration of signals in the posterior insula cortex can result in abnormal body ownership. Studies on ecstatic epilepsy, a rare focal epilepsy, show that the insula is involved in ASC-like experiences, including “heightened self-awareness, mental clarity and unity with everything that exists, accompanied by a sense of bliss and physical well-being” [51]. These overlap with the OBN construct, as assessed in the 5D-ASC [15]. Picard and Craig [52] hypothesised the involvement of the insula in the genesis of ecstatic epilepsy given its role in interoception and self-consciousness, confirmed by intracerebral electrode recordings [53]. Seizures in the mesiotemporal region propagated to the dorsal anterior insula coincide with ecstatic symptoms [54] and stimulation of the mid-dorsal insula region evoked experiences akin to oceanic psychedelic effects [55]. The interruption of interoceptive predictive coding during anterior insula seizures may underlie the ecstatic experience, emphasizing its pivotal role in mystical and psychedelic states [51,52].
We then ran an exploratory subsequent analysis (Fig 5) to explore the correlations between sub-dimensions of the 11D-ASC relevant to OBN [17], namely ‘disembodiment’, ‘unity’ and ‘bliss’, and CBF reductions induced by HVB relative to BASELINE. We found that scores of ‘unity’ and ‘bliss’, but not ‘disembodiment’ were associated with CBF reductions (see S1-S3 Tables for details), which concurs with the notion discussed above, specifically pointing to an involvement of the insula in the genesis of blissful feelings. Of note, 5-HT2A– targeting compounds such as psilocybin, renowned for therapeutic utility, are known to induce CBF decreases in different brain regions that correlate with the intensity of psychedelic experiences [56]. Studies found reduced CBF in the insula following psilocybin administration, though it was not linked to the subjective effects assessed via the 5D-ASC [57].
CBF reductions occur rapidly following decreased EtCO2 and can be reliably detected in response to very brief periods of hyperventilation. Conversely, the profound experiential changes in emotion and thought processes tend to emerge gradually, and correspondingly psychedelic phenomenology appears contingent on the length of the breathwork session [58]. Our investigation therefore compared HVB-evoked effects during late (SUSTAINED) and early (START) phases of HVB to focus specifically on the haemodynamic changes that occurred once the subjective effects had emerged. By contrasting the START and SUSTAINED phases of hyperventilation, we identified a region of right amygdala/anterior hippocampus, where the intensity of subjective experience (OBN as a covariate) positively correlated with CBF changes. Here, increased rCBF predicted the most intense OBN experience, despite the global reduction in CBF. One possible explanation is that this amygdalo-hippocampal CBF increase reflected increased regional neural activation associated with emergent expression of intense subjective effects. These regions are well established as being specialized for emotion (amygdala) and memory (hippocampus) processing. Their reciprocal interactions enable the formation of episodic representations, integrating the emotional significance and interpretation of memories [59]. Interestingly, increased right amygdala blood-oxygen level-dependent responses to emotional faces in functional MRI (fMRI) have been identified in patients with treatment-resistant depression following administration of psilocybin, predictive of clinical improvements at 1 week. The authors posit that this indicates psilocybin aids individuals’ ability to confront, reappraise, and improve emotional responsiveness [60]. Though speculative, these findings may indicate that HVB facilitates the processing of emotionally salient memories, which is proposed to be an essential therapeutic element in psychedelic-assisted psychotherapies [61,62], consistent with promising results from clinical trials of HVB applied as a therapy for patients with post-traumatic stress disorder (PTSD) [63]. Our finding of increased CBF in the hippocampal region also indicates that a single session of intense hyperventilation selectively alters perfusion to the hippocampus, similar to the effects observed after 20 minutes of hypocapnia-inducing moderate exercise [64]. This finding was interpreted as indicative of short-term metabolic adaptation to the high energy demands of hippocampal neurons, rather than reflecting the effects of mechanical vascular changes [64].
HRV is a physiological index of the balance of sympathetic and parasympathetic influences on the heart. The observed reduction in HRV reflects sympathetic activation and withdrawal of parasympathetic drive [65–67], consistent with an action-ready state of psychophysiological engagement. As previously described, OBN characteristically entails a deeply felt positive mood linked to the experience of unity with the self and the world, and in its extreme, is experienced as a mystical or religious experience [17]. Our finding that OBN ratings were related to changes in HRV over time echoes observations from other relevant modalities of ASC induction, such as self-induced cognitive trance [68] or 5-HT agonists, such as LSD [18,69–71] or N,N-Dimethyltryptamine (DMT) [72,73]. Nevertheless, the observed association with a positive mood contrasts the wide acceptance of reduced HRV as an index of stress and negative affective states. During HVB, the physiological state of the body exceeds typical homeostatic boundaries, and the autonomic correlates of this may reinforce a dissociative psychological state of positive affect in line with the premise of hormesis, see [11] for more.
This exploratory work is preliminary and limited by a small sample size and a lack of an independent control condition that may, in our neuroimaging session, have prevented us from separating the contributions of haemodynamic effects secondary to CO2 changes from neural activation. We also acknowledge the possibility that our whole brain voxelwise approach has led to reduced sensitivity to detect significant correlations relative to an a priori region of interest (ROI) approach. In addition, from a methodological perspective, it may be argued that the lack of control group exposed only to music may prevent dissociation of the effects of auditory stimuli (the ambient track) and the effects of HVB. Listening to upbeat music does stimulate ventilation and this should be controlled in the future. Helpful input from lived experience populations indicates that music is a powerful support to therapeutic applications of HVB. In choosing our design, we elected not to “dissect” the music component from HVB, as we preferred to consider HVB as a contemplative practice accompanied by music as a whole – and to test it in its entirety [74]. Importantly, both studies [2,75] have dissected the effect of music and breathwork, and elucidate that music is not the main factor in triggering ASCs. This reveals that music alone is unlikely to engender significant ASCs of the magnitude reported in this research. It is also argued that the reductionist approach of breaking down a contemplative practice to dissect an “active ingredient” is less preferable than testing a practice in its entirety [74]. Conjointly, psychedelic therapy sessions do not adhere to one specific psychotherapeutic model, though one consistent feature of the experience is listening to music. During psychedelic therapy sessions, patients are urged to centre their attention inwardly whilst supine and listening to a carefully selected playlist. It is suggested that music can help facilitate therapeutic experiences. As such, we are looking for CBF changes that correspond with ASCs, induced by HVB with music. We elected to proceed to treat the experience as whole, hence no control for music. More hypothesis-driven work is certainly required within the neuroscience of breathwork.
Furthermore, our study focused on experienced HVB practitioners and therefore our results may not be generalisable; though this is also a strength as it ensured our practitioners were able to reach the desired state without adverse outcomes. Additionally, we were unable to directly assess relevant mechanisms of therapeutic actions, as our subjective measures did not include clinical parameters relevant to traumatic memories or other forms of psychological distress. Moreover, ASCs initiated by breathwork are inherently dynamic, thus dynamic phenomenological tools, such as those employed by Lewis-Healey et al., [58] may be more sensitive and informative.
Our imaging approach was also limited by the absence of correction for physiological noise caused by cardiac and respiratory fluctuations. This is crucial for most physiological fMRI applications for reducing signal artifacts. However, physiological fluctuations (including respiratory frequency and volume changes) can still introduce signal variations in ASL data, but we believe that our approach remains robust. Our analysis inherently averages over multiple cardiac cycles, which helps mitigate the effects of physiological noise on CBF quantification, and although respiration-induced signal changes are observed in some pcASL studies, they are largely associated with motion rather than direct vascular effects [76]. This does not fully eliminate the influence of an overall increase in HR, respiratory rate, or other physiological parameters during changes in breathing conditions—factors that may also impact labelling efficiency and arterial transit times. These considerations are relevant not only to our study, but to other ASL studies where complex, interconnected factors can influence ASL signal and CBF. Practical constraints limit the extent to which additional physiological measurements can be incorporated, particularly in a study as complex as ours. These constraints include scanning time and the potential stress on participants. Furthermore, measuring CBF at the start of the SUSTAINED HVB rather than at the end or during is not ideal, yet, it may capture the physiological ‘trigger condition’ for entry into ASCs, which can continue irrespective of specific physiological threshold conditions, see [2] for more.
A further key reason for choosing not to adopt a method of correction for EtCO2 was a high risk of regressing out our primary signal of interest. One plausible mechanistic hypothesis inspiring our work is that ASCs evoked by HVB practices directly result from alterations in EtCO2 and the resulting cerebral pH, causing downstream effects on neuronal function [11]. Therefore, CO2 related physiological signals are likely correlated with experimental effects that were the focus of our investigation, in line with recent work by others [2] and regressing out these signals would severely impact our sensitivity to study the relationship between haemodynamic effects and ASCs. An additional reason is that our measures of EtCO2 (collected by nasal cannula and capnograph) have been occasionally incomplete during the end of HVB sessions when EtCO2 levels had reached particularly low levels, and we felt that application of correction methods using incomplete physiological data would have risked introducing major artifacts.
Additionally, we observed prominent arterial transit time (ATT) artifacts in 6 out of 19 participants. These artifacts were characterized by strong arterial signals in the CBF images, which led to their exclusion from the analysis. ATT artifacts can significantly impact the accuracy of perfusion measurements, as they indicate that labelled blood has not yet reached the capillary beds. To address this issue in future research, capturing blood flow dynamics at different delay times through a multi-PLD ASL protocol would reduce the impact of ATT artifacts and increase precision of assessment of cerebral perfusion.


ConclusionIn conclusion, our exploratory experiments suggest that circuitries supporting the integration of interoceptive representations and processing of affective memories are putative neurobiological substrates of HVB-induced ASCs. Our findings indicate directions for future research towards a better understanding of HVB and ultimately harnessing such practices for future therapeutic applications.








Acknowledgments
The authors wish to acknowledge Dr Guy Fincham, Dr Matthew Wall, and Dr Natalie Ertl for their helpful contribution, and all the participants for their expert insights into breathwork.
References1.
            Bahi C, Irrmischer M, Franken K, Fejer G, Schlenker A, Deijen JB, et al. Effects of conscious connected breathing on cortical brain activity, mood and state of consciousness in healthy adults. Curr Psychol. 2023;43(12):10578–89. 
                      View Article
                    
                      Google Scholar
                    2.
            Havenith MN, Leidenberger M, Brasanac J, Corvacho M, Carmo Figueiredo I, Schwarz L, et al. Decreased CO2 saturation during circular breathwork supports emergence of altered states of consciousness. Commun Psychol. 2025;3(1):59.  pmid:40223145 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    3.
            Eyerman J. A clinical report of Holotropic Breathwork in 11,000 psychiatric inpatients in a community hospital setting. Multidiscip Assoc Psychedelic Stud Bulletin Special Ed. 2013;23(1):24–7. 
                      View Article
                    
                      Google Scholar
                    4.
            Carhart-Harris R, Giribaldi B, Watts R, Baker-Jones M, Murphy-Beiner A, Murphy R. Trial of psilocybin versus escitalopram for depression. New England J Med. 2021;384(15):1402–11. 
                      View Article
                    
                      Google Scholar
                    5.
            Zeifman RJ, Palhano-Fontes F, Hallak J, Arcoverde E, Maia-Oliveira JP, Araujo DB. The impact of ayahuasca on suicidality: results from a randomized controlled trial. Front Pharmacol. 2019;10. 
                      View Article
                    
                      Google Scholar
                    6.
            Meinhardt MW, Pfarr S, Fouquet G, Rohleder C, Meinhardt ML, Barroso-Flores J, et al. Psilocybin targets a common molecular mechanism for cognitive impairment and increased craving in alcoholism. Sci Adv. 2021;7(47):eabh2399.  pmid:34788104 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    7.
            Almahayni O, Hammond L. Does the Wim Hof Method have a beneficial impact on physiological and psychological outcomes in healthy and non-healthy participants? A systematic review. PLoS One. 2024;19(3):e0286933.  pmid:38478473 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    8.
            Yaden DB, Griffiths RR. The subjective effects of psychedelics are necessary for their enduring therapeutic effects. ACS Pharmacol Transl Sci. 2020;4(2):568–72.  pmid:33861219 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    9.
            Roseman L, Nutt DJ, Carhart-Harris RL. Quality of acute psychedelic experience predicts therapeutic efficacy of psilocybin for treatment-resistant depression. Front Pharmacol. 2018;8:974.  pmid:29387009 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    10.
            Ko K, Knight G, Rucker JJ, Cleare AJ. Psychedelics, mystical experience, and therapeutic efficacy: a systematic review. Front Psych. 2022;13. 
                      View Article
                    
                      Google Scholar
                    11.
            Fincham GW, Kartar A, Uthaug MV, Anderson B, Hall L, Nagai Y, et al. High ventilation breathwork practices: an overview of their effects, mechanisms, and considerations for clinical applications. Neurosci Biobehav Rev. 2023;155:105453.  pmid:37923236 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    12.
            Fincham GW, Epel E, Colasanti A, Strauss C, Cavanagh K. Effects of brief remote high ventilation breathwork with retention on mental health and wellbeing: a randomised placebo-controlled trial. 2024. 13.
            Franco Corso SJ, O’Malley KY, Subaiya S, Mayall D, Dakwar E. The role of non-ordinary states of consciousness occasioned by mind-body practices in mental health illness. J Affect Disord. 2023;335:166–76.  pmid:37150220 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    14.
            Bayley PJ, Schulz-Heik RJ, Tang JS, Mathersul DC, Avery T, Wong M. Randomised clinical non-inferiority trial of breathing-based meditation and cognitive processing therapy for symptoms of post-traumatic stress disorder in military veterans. BMJ Open. 2022;12(8). 
                      View Article
                    
                      Google Scholar
                    15.
            Dittrich A. The standardized psychometric assessment of altered states of consciousness (ASCs) in humans. Pharmacopsychiatry. 1998;31 Suppl 2:80–4.  pmid:9754838 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    16.
            Freud S. Civilization and its discontents. Dover ed. New York: Dover Publications; 1994. 17.
             Studerus E, Gamma A, Vollenweider FX. Psychometric evaluation of the altered states of consciousness rating scale (OAV). PLoS One. 2010;5(8):e12412.  pmid:20824211 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    18.
            Olbrich S, Preller KH, Vollenweider FX. LSD and ketanserin and their impact on the human autonomic nervous system. Psychophysiology. 2021;58(6):e13822.  pmid:33772794 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    19.
            Rosas FE, Mediano PAM, Timmermann C, Luppi AI, Candia-Rivera D, Abbasi-Asl R. The entropic heart: tracking the psychedelic state via heart rate dynamics. 2023. 20.
            American Psychiatric A. Diagnostic and statistical manual of mental disorders. 2013. 21.
            Qualtrics. Qualtrics. https://www.qualtrics.com. 22.
            Watson D, Clark LA. The PANAS-X: Manual for the Positive and Negative Affect Schedule - Expanded Form. 1994; Available from: https://iro.uiowa.edu/esploro/outputs/other/The-PANAS-X-Manual-for-the-Positive/9983557488402771#file-0. 23.
            Schruers K, Klaassen T, Pols H, Overbeek T, Deutz NE, Griez E. Effects of tryptophan depletion on carbon dioxide provoked panic in panic disorder patients. Psychiatry Res. 2000;93(3):179–87.  pmid:10760376 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    24.
            Griez EJ, Colasanti A, van Diest R, Salamon E, Schruers K. Carbon dioxide inhalation induces dose-dependent and age-related negative affectivity. PLoS ONE. 2007;2(10). 
                      View Article
                    
                      Google Scholar
                    25.
            Watson D, Clark LA, Tellegen A. Development and validation of brief measures of positive and negative affect: the PANAS scales. J Pers Soc Psychol. 1988;54(6):1063–70.  pmid:3397865 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    26.
            Alsop DC, Detre JA, Golay X, Günther M, Hendrikse J, Hernandez‐Garcia L, et al. Recommended implementation of arterial spin‐labeled perfusion MRI for clinical applications: a consensus of the ISMRM perfusion study group and the European consortium for ASL in dementia. Magnetic Resonan Med. 2014;73(1):102–16. 
                      View Article
                    
                      Google Scholar
                    27.
            Friston K, Ashburner J, Kiebel S, Nichols T, Penny W. Statistical parametric mapping. 2007. 28.
            Parak J, Tarniceriu A, Renevey P, Bertschi M, Delgado-Gonzalo R, Korhonen I. Evaluation of the beat-to-beat detection accuracy of PulseOn wearable optical heart rate monitor. Annu Int Conf IEEE Eng Med Biol Soc. 2015;2015:8099–102.  pmid:26738173 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    29.
            Shaffer F, Ginsberg JP. An overview of heart rate variability metrics and norms. Front Public Health. 2017;5. 
                      View Article
                    
                      Google Scholar
                    30.
            Carhart-Harris RL, Williams TM, Sessa B, Tyacke RJ, Rich AS, Feilding A, et al. The administration of psilocybin to healthy, hallucinogen-experienced volunteers in a mock-functional magnetic resonance imaging environment: a preliminary investigation of tolerability. J Psychopharmacol. 2011;25(11):1562–7.  pmid:20395317 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    31.
            Bates D, Mächler M, Bolker B, Walker S. Fitting linear mixed-effects models using lme4. Journal of Statistical Software. 2015;67(1):1–48. 
                      View Article
                    
                      Google Scholar
                    32.
            Lenth R. Estimated marginal means, aka least-squares means. 2025. 33.
            Tarvainen MP, Niskanen J-P, Lipponen JA, Ranta-Aho PO, Karjalainen PA. Kubios HRV--heart rate variability analysis software. Comput Methods Programs Biomed. 2014;113(1):210–20.  pmid:24054542 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    34.
            Studerus E. Tolerability, assessment, and prediction of psilocybin-induced altered states of consciousness. University of Zurich; 2012. 35.
            Mattson MP. Hormesis defined. Ageing Res Rev. 2008;7(1):1–7.  pmid:18162444 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    36.
            Pruimboom L, Muskiet FAJ. Intermittent living; the use of ancient challenges as a vaccine against the deleterious effects of modern life - a hypothesis. Med Hypotheses. 2018;120:28–42.  pmid:30220336 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    37.
            Hartogsohn I. Set and setting, psychedelics and the placebo response: an extra-pharmacological perspective on psychopharmacology. J Psychopharmacol. 2016;30(12):1259–67.  pmid:27852960 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    38.
            Roseman L, Nutt DJ, Carhart-Harris RL. Quality of acute psychedelic experience predicts therapeutic efficacy of psilocybin for treatment-resistant depression. Front Pharmacol. 2018;8. 
                      View Article
                    
                      Google Scholar
                    39.
            Timmermann C, Zeifman RJ, Erritzoe D, Nutt DJ, Carhart-Harris RL. Effects of DMT on mental health outcomes in healthy volunteers. Sci Rep. 2024;14(1):3097.  pmid:38326357 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    40.
            Uthaug MV, Lancelotta R, van Oorsouw K, Kuypers KPC, Mason N, Rak J. A single inhalation of vapor from dried toad secretion containing 5-methoxy-N,N-dimethyltryptamine (5-MeO-DMT) in a naturalistic setting is related to sustained enhancement of satisfaction with life, mindfulness-related capacities, and a decrement of psychopathological symptoms. Psychopharmacology. 2019;236(9):2653–66. 
                      View Article
                    
                      Google Scholar
                    41.
            Smigielski L, Scheidegger M, Kometer M, Vollenweider FX. Psilocybin-assisted mindfulness training modulates self-consciousness and brain default mode network connectivity with lasting effects. Neuroimage. 2019;196:207–15.  pmid:30965131 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    42.
            Holze F, Ley L, Müller F, Becker AM, Straumann I, Vizeli P, et al. Direct comparison of the acute effects of lysergic acid diethylamide and psilocybin in a double-blind placebo-controlled study in healthy subjects. Neuropsychopharmacology. 2022;47(6):1180–7.  pmid:35217796 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    43.
            Raichle ME, Plum F. Hyperventilation and cerebral blood flow. Stroke. 1972;3(5):566–75. 
                      View Article
                    
                      Google Scholar
                    44.
            Tennant R, Hiller L, Fishwick R, Platt S, Joseph S, Weich S, et al. The Warwick-Edinburgh Mental Well-being Scale (WEMWBS): development and UK validation. Health Qual Life Outcomes. 2007;5:63.  pmid:18042300 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    45.
            Kartar AA, Colasanti A. Respiratory control and circuitry. In: Reference module in neuroscience and biobehavioral psychology. Elsevier; 2024. 46.
            Betka S, Adler D, Similowski T, Blanke O. Breathing control, brain, and bodily self-consciousness: toward immersive digiceuticals to alleviate respiratory suffering. Biol Psychol. 2022;171:108329.  pmid:35452780 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    47.
            Sirigu A, Desmurget M. Somatosensory awareness in the parietal operculum. Brain. 2021;144(12):3558–60.  pmid:34791060 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    48.
            Felleman DJ, Van Essen DC. Distributed hierarchical processing in the primate cerebral cortex. Cereb Cortex. 1991;1(1):1–47.  pmid:1822724 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    49.
            Sepulcre J, Sabuncu MR, Yeo TB, Liu H, Johnson KA. Stepwise connectivity of the modal cortex reveals the multimodal organization of the human brain. J Neurosci. 2012;32(31):10649–61.  pmid:22855814 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    50.
            Gentile G, Guterstam A, Brozzoli C, Ehrsson HH. Disintegration of multisensory signals from the real hand reduces default limb self-attribution: an fMRI study. J Neurosci. 2013;33(33):13350–66.  pmid:23946393 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    51.
            Picard F. Ecstatic or mystical experience through epilepsy. J Cogn Neurosci. 2023;35(9):1372–81.  pmid:37432752 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    52.
            Picard F, Craig AD. Ecstatic epileptic seizures: a potential window on the neural basis for human self-awareness. Epilepsy Behav. 2009;16(3):539–46.  pmid:19836310 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    53.
            Craig ADB. How do you feel--now? The anterior insula and human awareness. Nat Rev Neurosci. 2009;10(1):59–70.  pmid:19096369 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    54.
            Picard F, Scavarda D, Bartolomei F. Induction of a sense of bliss by electrical stimulation of the anterior insula. Cortex. 2013;49(10):2935–7.  pmid:24074887 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    55.
            Sheikh MM, Koubeissi MZ, Spencer DD, Alkawadri R. The neural networks underlying the illusion of time dilation. Ann Neurol. 2022;91(2):295–7. 
                      View Article
                    
                      Google Scholar
                    56.
            Carhart-Harris RL, Erritzoe D, Williams T, Stone JM, Reed LJ, Colasanti A, et al. Neural correlates of the psychedelic state as determined by fMRI studies with psilocybin. Proc Natl Acad Sci U S A. 2012;109(6):2138–43.  pmid:22308440 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    57.
            Lewis CR, Preller KH, Kraehenmann R, Michels L, Staempfli P, Vollenweider FX. Two dose investigation of the 5-HT-agonist psilocybin on relative and global cerebral blood flow. Neuroimage. 2017;159:70–8.  pmid:28711736 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    58.
            Lewis-Healey E, Tagliazucchi E, Canales-Johnson A, Bekinschtein TA. Breathwork-induced psychedelic experiences modulate neural dynamics. Cerebral Cortex. 2024;34(8). 
                      View Article
                    
                      Google Scholar
                    59.
            Phelps EA. Human emotion and memory: interactions of the amygdala and hippocampal complex. Curr Opin Neurobiol. 2004;14(2):198–202.  pmid:15082325 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    60.
            Roseman L, Demetriou L, Wall MB, Nutt DJ, Carhart-Harris RL. Increased amygdala responses to emotional faces after psilocybin for treatment-resistant depression. Neuropharmacology. 2018;142:263–9. 
                      View Article
                    
                      Google Scholar
                    61.
            Nutt D, Erritzoe D, Carhart-Harris R. Psychedelic psychiatry’s brave new world. Cell. 2020;181(1):24–8.  pmid:32243793 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    62.
            Healy CJ. The acute effects of classic psychedelics on memory in humans. Psychopharmacology (Berl). 2021;238(3):639–53.  pmid:33420592 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    63.
            Seppälä EM, Nitschke JB, Tudorascu DL, Hayes A, Goldstein MR, Nguyen DTH, et al. Breathing-based meditation decreases posttraumatic stress disorder symptoms in U.S. military veterans: a randomized controlled longitudinal study. J Trauma Stress. 2014;27(4):397–405.  pmid:25158633 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    64.
            Steventon JJ, Foster C, Furby H, Helme D, Wise RG, Murphy K. Hippocampal blood flow is increased after 20 min of moderate-intensity exercise. Cerebral Cortex. 2019;30(2):525–33. 
                      View Article
                    
                      Google Scholar
                    65.
            Kety SS, Schmidt CF. Measurement of cerebral blood flow and cerebral oxygen consumption in man. Fed Proc. 1946;5:264. pmid:21064908 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    66.
            Fincham GW, Kartar A, Uthaug MV, Anderson B, Hall L, Nagai Y, et al. High ventilation breathwork practices: an overview of their effects, mechanisms, and considerations for clinical applications. Neurosci Biobehav Rev. 2023;155:105453.  pmid:37923236 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    67.
            Schüttler D, von Stülpnagel L, Rizas KD, Bauer A, Brunner S, Hamm W. Effect of hyperventilation on periodic repolarization dynamics. Front Physiol. 2020;11. 
                      View Article
                    
                      Google Scholar
                    68.
            Oswald V, Vanhaudenhuyse A, Annen J, Martial C, Bicego A, Rousseaux F. Autonomic nervous system modulation during self-induced non-ordinary states of consciousness. Scient Rep. 2023;13(1). 
                      View Article
                    
                      Google Scholar
                    69.
            dos Santos RG, Valle M, Bouso JC, Nomdedéu JF, Rodríguez-Espinosa J, McIlhenny EH. Autonomic, neuroendocrine, and immunological effects of Ayahuasca. J Clin Psychopharmacol. 2011;31(6):717–26. 
                      View Article
                    
                      Google Scholar
                    70.
            Liechti ME, Dolder PC, Schmid Y. Alterations of consciousness and mystical-type experiences after acute LSD in humans. Psychopharmacol (Berl). 2017;234(9–10):1499–510.  pmid:27714429 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    71.
            Sparber SB, Dwoskin LP, Kleven MS. Studies on the specificity of neurochemical and behavioral effects of LSD-25. Pharmacol Biochem Behav. 1986;24(2):341–5. 
                      View Article
                    
                      Google Scholar
                    72.
            Bonnelle V, Feilding A, Rosas FE, Nutt DJ, Carhart-Harris RL, Timmermann C. Autonomic nervous system activity correlates with peak experiences induced by DMT and predicts increases in wellbeing. bioRxiv. 2024. 
                      View Article
                    
                      Google Scholar
                    73.
            Strassman RJ. Human psychopharmacology of N,N-dimethyltryptamine. Behav Brain Res. 1996;73(1–2):121–4.  pmid:8788488 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    74.
            Crosswell AD, Mayer SE, Whitehurst LN, Picard M, Zebarjadian S, Epel ES. Deep rest: an integrative model of how contemplative practices combat stress and enhance the body’s restorative capacity. Psychol Rev. 2024;131(1):247–70.  pmid:38147050 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    75.
            Canello T, Tlaie A, Chalise K, Schölvinck ML, Pia L, Havenith MN. Non-ordinary states of consciousness evoked by breathwork correlate with improved heart-rate variability. 2024. 76.
            Wu W-C, Edlow BL, Elliot MA, Wang J, Detre JA. Physiological modulations in arterial spin labeling perfusion magnetic resonance imaging. IEEE Trans Med Imaging. 2009;28(5):703–9.  pmid:19150788 
                      View Article
                    
                        PubMed/NCBI
                      
                      Google Scholar
                    



          

        
      
  
]]></content:encoded>
        </item>
    </channel>
</rss>