<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Wed, 03 Sep 2025 06:42:32 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Finnish City Inaugurates 1 MW/100 MWh Sand Battery]]></title>
            <link>https://cleantechnica.com/2025/08/30/finnish-city-inaugurates-1-mw-100-mwh-sand-battery/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45112653</guid>
            <description><![CDATA[A 1 MW/100 MWh sand battery in now in operation in southern Finland where it is supporting the local district heating system.]]></description>
            <content:encoded><![CDATA[
	

Support CleanTechnica's work through a Substack subscription or on Stripe.

There are more ways to store energy than just using batteries. Some are using fire bricks, particularly for process heat for industries that rely on high heat in manufacturing. Others propose an arrangement of massive concrete blocks that move up and down like the weights of a giant grandfather clock, converting kinetic energy to potential energy and back again. In Finland, two intrepid engineers began experimenting with a sand battery a few years ago.
As we reported when the first prototype was unveiled three years ago, the idea of a sand battery began with two Finnish engineers, Markku Ylönen and Tommi Eronen. The concept is simplicity itself. Make a really big pile of sand. Heat it with excess renewable electricity to around 500°C (932°F), then use that heat later to heat homes, factories, even swimming pools. They say the sand can stay hot for 3 months or more. The pair have founded Polar Night Energy, which constructed a prototype consisting of 100 tons of sand inside what looks like a silo in the town of Kankaanpää.
Many Americans are unfamiliar with the concept of district heating, but it is widely used in other counties, especially in Scandinavia where keeping schools, municipal buildings, arenas, factories, and homes warm in winter is a challenge.
Loviisan Lämpö is a Finnish district heating company that supplies district heating to customers in Loviisa, Pukkila, Pornainen, and Pyhtää. It has collaborated with Polar Night on a new sand battery — one that is much larger than the prototype — which began operating in the city of Pornainen in southern Finland this month, where it is expected to reduce carbon emissions from district heating by 70 percent.
Previously, the majority of heat needed for the system came from burning oil, but that has now been completely eliminated. The system will continue to burn wood chips to supplement the sand battery. Wood chips are at least carbon neutral, although not an ideal solution since it takes years for trees to grow but only minutes for the chips to burn.
At the commissioning ceremony for the new battery, Mikko Paajanen, CEO of Loviisan Lämpö, said, “A couple of years ago, we started considering how to take district heating in Pornainen to the next level. It would have been easy to simply replace the old wood chip power plant with a new one of the same kind, but that didn’t align with our goals. We evaluated every possible alternative, and the Sand Battery proved to be the best option.”
The battery is a 42 foot tall, 50 foot wide steel cylinder filled with 2,000 tons of crushed stone. According to Fast Company, when extra renewable electricity is available, the system uses it to heat up the crushed stone, where it is stored until needed. Then the heat from the battery travels to other buildings through a system of pipes filled with hot water. Each building has its own equipment to distribute the heat to radiators, floor heaters, or other heating devices.
“We have already learnt that our system has even more potential than we initially calculated. It’s been a positive surprise,” said Ylönen after the prototype was placed in service. “Whenever there’s a high surge of available green electricity, we want to be able to get it into the storage really quickly.” The need to use energy more wisely was driven home for Finns after Russia stopped providing electricity, methane, and oil to Finland when it voted to join NATO. Finland and Russia share a common border.
Sand Battery Is Simple & Efficient
Credit: Polar Night
The sand battery is simplicity itself. “We just heat air and [circulate it] through sand,” says Liisa Naskali, COO of Polar Night Energy. But materials other than sand can be used. The new battery actually uses crushed soapstone chips from a local fireplace manufacturer. Sand, or other material crushed into sand-size particles, has the ability to store heat for weeks. Unlike some other batteries, the system doesn’t rely on chemicals, doesn’t degrade, and won’t catch on fire. In operation, the sand battery has demonstrated a round trip efficiency of 90 percent.
Inside the steel tank, a heat exchanger and a closed loop system are used to circulate the heat. Software runs heaters when electricity prices are low. So far this summer, the district heating operator has paid only about 10 percent of the average price of electricity because heating the system only occurred at optimal times. That helps make the technology cost competitive, although the initial installation cost is fairly high.
Polar Night is now in talks with other district heating companies and factory owners with a need for high temperature process heat. For the company, the project in Pornainen is a critical proof point. “This is really important for us because now we can show that this really works,” a spokesperson for Polar Night said.
Investment Opportunities
Polar Night and its partners see a bright financial future for sand batteries because they can participate in electricity reserve markets, reduce dependence on single energy sources in heat production, and serve as an excellent example of sector integration between electricity and heat.
“For us, the sand battery is a great commercial investment, but we also wanted to boldly support an innovative solution that benefits customers, the municipality, and the entire electricity market. This is a concrete example of a cost efficient and sustainable investment. If it works here, it will work anywhere,” said Sauli Antila, the investment director at CapMan Infra, the corporate owner of Loviisan Lämpö.
The profitability of the sand battery is based on charging it according to electricity prices and Fingrid’s reserve markets. Its large storage capacity enables balancing the electricity grid and optimizing consumption over several days or even weeks. The reserve market operations and optimization of the Pornainen Sand Battery are managed by the software unit division of Elisa Industriq.
“The Pornainen plant can be adjusted quickly and precisely, and it also has a remarkably long energy buffer, making it well suited for reserve market optimization. Our AI solution automatically identifies the best times to charge and discharge the Sand Battery and allocates flexibility capacity to the reserve products that need it most. Continuous optimization makes it a genuinely profitable investment,” explained Jukka-Pekka Salmenkaita, vice president of AI and special projects at Elisa Industriq.
Polar Night has a clear vision for the future. Construction of an electricity production pilot will begin in the coming weeks in Valkeakoski, Finland, and the company is in active negotiations for several large-scale thermal storage projects in district heating, hot air, and process steam production. “Industrial applications are particularly promising, especially where heat above 100°C is required, something electric boilers and heat pumps cannot provide,” said Polar Night COO Liisa Naskali.
This technology is never going to replace grid-scale battery storage, but could be useful in many situations where battery storage is not. A comment on the YouTube video below complained, “Not a word about return on investment in the presentation. That means it’ll never pay off. They just wasted taxpayers’ money to stroke their own egos.” MAGAlomaniacs are everywhere these days.




Sign up for CleanTechnica's Weekly Substack for Zach and Scott's in-depth analyses and high level summaries, sign up for our daily newsletter, and follow us on Google News!



Advertisement



 







Have a tip for CleanTechnica? Want to advertise? Want to suggest a guest for our CleanTech Talk podcast? Contact us here.

Sign up for our daily newsletter for 15 new cleantech stories a day. Or sign up for our weekly one on top stories of the week if daily is too frequent.

CleanTechnica uses affiliate links. See our policy here.CleanTechnica's Comment Policy



]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Comic Sans typeball designed to work with the IBM Selectric typewriters]]></title>
            <link>https://www.printables.com/model/441233-comic-sans-typeball-for-the-ibm-selectric-typewrit</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45111909</guid>
        </item>
        <item>
            <title><![CDATA[Zig Software Foundation 2025 Financial Report and Fundraiser]]></title>
            <link>https://ziglang.org/news/2025-financials/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45111405</guid>
            <description><![CDATA[← Back to
        News
        page]]></description>
            <content:encoded><![CDATA[
    
      
        ← Back to
        News
        page
      
    September 02, 2025
    
    


Previous YearZig Software Foundation is a 501(c)(3) non-profit organization which I am proud to say makes extremely efficient use of monetary resources. Unlike many of our peers, our primary expense is direct payments to contributors for their enhancements to the Zig project.Don’t take my word for it - let’s look at some numbers.2024 Expenditures




Expense Name
2024 Cost
Description

Contractors
$306,362.09
Direct compensation to contributors working on Zig at a rate of $60/hour.

Employees
$154,263.32
ZSF has one employee which is yours truly, Andrew Kelley, serving the role of 
Lead Software Engineer. In 2024, I also volunteered my time as President of Zig Software Foundation,
volunteered as Accounting Clerk, and volunteered as Development Director. In the future, it would be
nice to have dedicated staff for these roles so that I could focus more on being Lead Software Engineer.


Accounting
$18,463.62
This is entirely paying our accountant,
Strada Financial Group, to keep the American
legal system happy and keep our organization tax-exempt. I suspected we were being overcharged,
and in 2025 switched to a different accountant.


CI & Website
$14,986.73
Zig has great cross-compiling abilities in part
due to investing in testing infrastructure for different systems. Some of these costs were
one-time costs to purchase machines that sit in our homes and offices while others
are market-rate Hetzner bare metal machines that we run GitHub Actions on.


Taxes
$13,089.07
Although ZSF is a tax-exempt organization, employees are still required
to pay income tax.

Travel
$6,955.61
In a 2024 meeting, the board decided
that the previous year's travel budget successfully helped grow Zig adoption,
and retained the same budget of $15,000. In 2024, ZSF spent $6,956
of those allocated funds, increasing Zig's presence in Italy and Germany.


Sponsorships
$5,846.24
The Zig project is mostly comprised of in-house code, however,
it also relies on third party projects. Today, every Zig
installation includes some source files or ported code from
musl libc,
mingw-w64, and others.
ZSF donates money to these projects as a way to say thanks, give back to the ecosystem,
and increase the sustainability of Zig's dependencies.


Bank Fees
$782.23
This is a tiny slice of the pie, but every time ZSF
wires money, there is a transaction fee. Our contractors graciously bill
infrequently when possible to help reduce this cost.

Total Expenses
$520,748.91


Even with a 13% bigger budget, we still managed to spend 92% of our money in 2024 paying contributors for their time.Major Initiatives in 2024Zig 0.13.0 ReleasedZig 0.14.0 ReleasedGreatly expanded support for more targets that can be correctly cross-compiled and run on.Major language enhancementsMajor standard library enhancementsMajor build system enhancementsZig 0.14.1 released with bug fixes only.So far so good. You can see we’ve been hard at work spending our esteemed donors’ money on advancing the mission statement.However, if we look at the trend of donations over time for the year 2024, we see overall a slow decline. This is why we’re doing another fundraiser this year.2024-2025 Donations Per Month

The big spike is half of Mitchell Hashimoto’s pledge.More to the point, the second half will buy us another year to raise donations in order to keep our bank balance positive. ZSF neither borrows money nor invests money; we convert donations directly into progress on the Zig project.2024-2025 Cash On Hand

Meanwhile, user activity continues to skyrocket. A rapidly increasing user base is adding Zig to their software stacks, filing issues, sending pull requests, asking for help, and shipping software that depends on Zig.2024 GitHub Issues Per Month


The top line is Total Issues Opened and the bottom line is Total Issues Closed. The gap is widening -
more users are demanding more attention than Zig core team has time for.



Average time to close issues

All Time
7 months

Past Year
11 months

Past Month
over 1 year





Average time to close pull requests

All Time
16 days

Past Year
30 days

Past Month
2 months


Source: Repo TrendsTotal GitHub Stars

Source: OSS InsightIn response to this rising demand, we added Alex Rønne Petersen to the Zig core team. Thanks to the income that was available to us in 2024, we were able to offer new contracts.2024 Income




Income Name
2024 Amount
Description

GitHub Sponsors
$170,656.04
Zig on
GitHub Sponsors. This category contains a numerous amount of individuals
and companies - each less than $1000/month. We recommend those donating via
GitHub Sponsors to
switch to Every.org since they process receipts and are a non-profit organization themselves and are not in the process
of neglecting their core product in the face of the AI boom.


Mitchell Hashimoto
$150,000.00
A generous individual.
While his family's donation has helped ZSF immensely in 2024 and will continue to do so
in 2025, neither ZSF nor Mitchell
himself wants him to be this large a slice of the pie!



Every.org
$90,097.45

Every.org is a fellow 501(c)(3) non-profit that manages donation collecting for other non-profits.
They've been good to us; it's our preferred method of receiving donations. This category
is mostly individuals along with a few small donations from companies.



Bun
$60,000.00
Bun is a fast JavaScript all-in-one toolkit.


TigerBeetle
$60,000.00
TigerBeetle is a financial
transaction database with 1000x faster OLTP performance, mission critical safety, and indestructible
storage fault tolerance.



Benevity
$36,195.58
They help us collect company-matched donations from employees.
This category contains a number of individuals.


ZML
$33,000.00
ZML offers high performance inference on
any model for any hardware.


Mitchell Kember
$21,027.00
A generous individual.


Individuals
$19,312.52
This category contains many people who donated via paper checks
or other miscellaneous ways.


Russel Simmons
$16,384.00
A generous individual.


Blacksmith
$14,000.00
Blacksmith is
a dead simple, drop-in replacement that costs 75% less than GitHub
runners.


Total Income
$670,672.59


However, with our current level of recurring income, we will not be able to renew everyone’s contracts, nor offer new contracts to Zig core team members.A Plea for DonationsWe have extremely talented Zig core team members who want to renew their contracts, and others who are interested to start getting paid for their valuable work for the first time.In order to do this, we need more recurring donations. I for one do not enjoy asking for money, but in the interest of our users and contributors, it would be irresponsible not to.Please sign up for a monthly donation if you can. Our preferred donation method is via Every.org. A fellow 501(c)(3) non-profit, they seamlessly manage gift receipts, and are not pivoting to AI like GitHub is currently doing.

More details including our EIN and address for paper checks



CompaniesContact us to get your logo on ziglang.org in exchange for a monthly donation.

EmployeesCheck if your company matches donations to charities such as Zig Software Foundation. That 2x multiplier makes a huge difference. We're already in the system.

Venture CapitalistsWe are aware of a few startups betting on Zig as their language and toolchain of choice to build tomorrow's critical infrastructure. Helping the Zig Software Foundation reach v1.0 faster is one of the most efficient uses of capital you can make to boost your portfolio.

IndividualsCan you spare $10 per month? This is our favorite
kind of donation because it helps diversify ZSF's income, keeping us free from undue influence
from any single party. If not, don't sweat it. We'll be OK.


Huge thanks to all who graciously donate funds to our cause. Together we serve the users!-Andrew
  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: LightCycle, a FOSS game in Rust based on Tron]]></title>
            <link>https://github.com/Tortured-Metaphor/LightCycle</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45110748</guid>
            <description><![CDATA[A Rust LightCycle Game. Contribute to Tortured-Metaphor/LightCycle development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[LightCycle
A classic TRON-inspired light cycle game built with Rust and ggez.
Features

Single-player and Two-player modes - Battle against AI or a friend
Adjustable AI Difficulty - Easy, Medium, and Hard AI opponents
Boost Mechanic - Limited energy boost system for strategic gameplay
Visual Effects - Particle trails, screen shake, and glow effects
Pause Menu - Full pause functionality with in-game controls
Retro Aesthetic - 8-bit styled graphics with neon colors

Controls
Menu

1 - Start single-player game
2 - Start two-player game
D - Cycle AI difficulty (Easy/Medium/Hard)

Player 1

W/A/S/D - Movement
Left Shift - Boost

Player 2

Arrow Keys - Movement
Right Shift - Boost

General

P - Pause/Resume
ESC - Return to menu

Installation
Prerequisites

Rust (latest stable version)
Cargo

Building and Running
# Clone the repository
git clone https://github.com/Tortured-Metaphor/LightCycle.git
cd LightCycle

# Build the project
cargo build --release

# Run the game
cargo run --release
Gameplay
Navigate your light cycle around the arena, leaving a trail behind you. Avoid crashing into walls, your own trail, or your opponent's trail. The last cycle standing wins!
Use your boost strategically - it doubles your speed but drains energy quickly. Energy regenerates when not boosting.
AI Difficulty Levels

Easy: Shorter reaction time, makes mistakes more often
Medium: Balanced gameplay, moderate challenge
Hard: Advanced pathfinding, optimal decision making, aggressive boost usage

Development
Built with:

Rust - Systems programming language
ggez - Rust game framework

Version History

v0.2.0 - Added pause menu, boost mechanics, AI difficulties, visual effects
v0.1.0 - Initial game implementation

License
This project is open source and available under the MIT License.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[%CPU utilization is a lie]]></title>
            <link>https://www.brendanlong.com/cpu-utilization-is-a-lie.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45110688</guid>
            <description><![CDATA[I deal with a lot of servers at work, and one thing everyone wants to know about their servers is how close they are to being at max utilization. It should be easy, right? Just pull up top or another system monitor tool, look at network, memory and CPU utilization …]]></description>
            <content:encoded><![CDATA[I deal with a lot of servers at work, and one thing everyone wants to know about their servers is how close they are to being at max utilization. It should be easy, right? Just pull up top or another system monitor tool, look at network, memory and CPU utilization, and whichever one is the highest tells you how close you are to the limits.For example, this machine is at 50% CPU utilization, so it can probably do twice as much of whatever it's doing.And yet, whenever people actually try to project these numbers, they find that CPU utilization doesn't quite increase linearly. But how bad could it possibly be?To answer this question, I ran a bunch of stress tests and monitored both how much work they did and what the system-reported CPU utilization was, then graphed the results.SetupFor my test machine, I used a desktop computer running Ubuntu with a Ryzen 9 5900X (12 core / 24 thread) processor. I also enabled Precision Boost Overdrive (i.e. Turbo).I vibe-coded a script that runs stress-ng in a loop, first using 24 workers and attempting to run them each at different utilizations from 1% to 100%, then using 1 to 24 workers all at 100% utilization. It used different stress testing method and measured the number of operations that could be completed ("Bogo ops1").The reason I did two different methods was that operating systems are smart about how they schedule work, and scheduling a small number of workers at 100% utilization can be done optimally (spoilers) but with 24 workers all at 50% utilization it's hard for the OS to do anything other than spreading the work evenly.ResultsYou can see the raw CSV results here.General CPUThe most basic test just runs all of stress-ng's CPU stress tests in a loop.You can see that when the system is reporting 50% CPU utilization, it's actually doing 60-65% of the actual maximum work it can do.64-bit Integer MathBut maybe that one was just a fluke. What if we just run some random math on 64-bit integers?This one is even worse! At "50% utilization", we're actually doing 65-85% of the max work we can get done. It can't possibly get worse than that though, right?Matrix MathSomething is definitely off. Doing matrix math, "50% utilization" is actually 80% to 100% of the max work that can be done.In case you were wondering about the system monitor screenshot from the start of the article, that was a matrix math test running with 12 workers, and you can see that it really did report 50% utilization even though additional workers do absolutely nothing (except make the utilization number go up).What's Going On?HyperthreadingYou might notice that this the graph keeps changing at 50%, and I've helpfully added piecewise linear regressions showing the fit.The main reason this is happening is hyperthreading: Half of the "cores" on this machine (and most machines) are sharing resources with other cores. If I run 12 workers on this machine, they each get scheduled on their own physical core with no shared resources, but once I go over that, each additional worker is sharing resources with another. In some cases (general CPU benchmarks), this makes things slightly worse, and in some cases (SIMD-heavy matrix math), there are no useful resources left to share.TurboIt's harder to see, but Turbo is also having an effect. This particular processor runs at 4.9 GHz at low utilization, but slowly drops to 4.3 GHz as more cores become active2.Note the zoomed-in y-axis. The clock speed "only" drops by 15% on this processor.Since CPU utilization is calculated as busy cycles / total cycles, this means the denominator is getting smaller as the numerator gets larger, so we get yet another reason why actual CPU utilization increases faster than linearly.Does This Matter?If you look at CPU utilization and assume it will increase linearly, you're going to have a rough time. If you're using the CPU efficiently (running above "50%" utilization), the reported utilization is an underestimate, sometimes significantly so.And keep in mind that I've only shown results for one processor, but hyperthreading performance and Turbo behavior can vary wildly between different processors, especially from different companies (AMD vs Intel).The best way I know to work around this is to run benchmarks and monitor actual work done:Benchmark how much work your server can do before having errors or unacceptable latency.Report how much work your server is currently doing.Compare those two metrics instead of CPU utilization.Bogo ops is presumably a reference to BogoMIPS, a "bogus" benchmark that Linux does at startup to very roughly understand CPU performance. ↩One of the main constraints processors operate under is needing to dissipate heat fast enough. When only one core is running, the processor can give that core some of the heat headroom that other cores aren't using and run it faster, but it can't do that all of the cores are running.Power usage works similarly and can be a constraint in some environments (usually not in a desktop computer, but frequently in servers). ↩]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Indices, not Pointers]]></title>
            <link>https://joegm.github.io/blog/indices-not-pointers/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45110386</guid>
            <description><![CDATA[Jul 15, 2025]]></description>
            <content:encoded><![CDATA[
      
      
  Jul 15, 2025
  Table of Contents
  


Smaller NodesFaster AccessLess Allocation OverheadInstant FreesA Downside - Freeing Single Nodes
FreelistsCode Example
  There is a pattern I’ve learned while using Zig which I’ve never seen used in any other language. It’s an extremely simple trick which - when applied to a data structure - reduces memory usage, reduces memory allocations, speeds up accesses, makes freeing instantaneous, and generally makes everything much, much faster. The trick is to use indices, not pointers.This is something I learned from a talk by Andrew Kelley (Zig’s creator) on data-oriented design. It’s used in Zig’s compiler to make very memory-efficient ASTs, and can be applied to pretty much any node-based data structure, usually trees.So what does this mean exactly? Well, to use indices means to store the nodes of the data structure in a dynamic array, appending new nodes instead of individually allocating them. Nodes can then reference each other via indices instead of pointers.
A comparison of memory layouts with different storage methodsPretty simple, right? But this strategy has some major performance benefits.Smaller NodesA pointer costs 8 bytes to store on a modern 64-bit system, but unless your planning on storing over 4 billion nodes in memory, an index can be stored in just 4 bytes.Faster AccessDue to the reduced node size and the fact that nodes are stored contiguously in memory, the data structure will fit into fewer memory pages and more nodes will fit in the cpu’s cache line, which generally improves access times significantly.Less Allocation OverheadThe way most people learn to implement data structures like trees is to make a separate allocation for each individual node, one at a time. This is a very naive way of allocating memory, however, as each memory allocation comes with a small but significant overhead which can really slow things down for a large number of nodes. Storing nodes in a growable arraylist minimizes this overhead as arraylists grow superlinearly (e.g, doubling in size each time more space is needed) meaning the majority of new nodes can just be placed in the next available slot without requesting more memory!
An arraylist growing by moving elements to a bigger allocationInstant FreesFreeing structures which are allocated in the traditional “nest of pointers” fashion can be very slow, as the entire structure has to be traversed to find and individually free each node. Storing nodes in a single allocation eliminates this problem entirely and freeing the structure becomes just a single free call, as it should be.A Downside - Freeing Single NodesOne disadvantage of storing all the nodes in a contiguous buffer is that it makes it harder to free an individual node as removing a single element from an arraylist would involve shifting over all the elements after it, a linear time operation which is almost always too slow to be practical. In practice this isn’t something you normally need to do as many data structures, like an AST, can be freed all at once, but if you need to be able to free individual nodes and still want to use this technique then the obvious solution would be to use a freelist.FreelistsA freelist is, as the name suggests, a list used to track free slots in memory allocators. In our case we can simply use a stack to store indices of free slots in our arraylist and attempt to pop off this stack any time we add a new element. The extra code complexity should be weighed against the actual performance benefit when considering this approach.
A node allocation using a freelistCode ExampleHere is a short demo of this technique in Zig (v0.14.1). There are some Zig quirks involved like passing memory allocators and using an enum as an index type but hopefully the general idea is clear.pub fn main() !void {
    var debug_allocator = std.heap.DebugAllocator(.{}).init;
    defer _ = debug_allocator.deinit();

    var tree = Tree{
        // Zig uses a memory allocator interface to allow us to pass in an allocation strategy for the arraylist to use.
        .nodes = ArrayList(Tree.Node).init(debug_allocator.allocator()),
    };
    defer tree.nodes.deinit();

    // append the root node.
    const root = try tree.createNode(45);

    const a = try tree.createNode(-10);
    const b = try tree.createNode(89000);
    const c = try tree.createNode(2);

    tree.setLeftChild(root, a);
    tree.setRightChild(root, b);
    tree.setLeftChild(b, c);

    printTree(&tree);
}

const Tree = struct {
    /// Stores all the nodes in the tree. The root node is at index 0.
    nodes: ArrayList(Node),

    const Node = struct {
        data: i32,
        left_child: NodeIndex = .none,
        right_child: NodeIndex = .none,
    };

    // In Zig it is common to use a non-exhaustive enum instead of a bare integer for indices
    // to add back some of the type safety which is lost since we're not using pointers.
    const NodeIndex = enum(u32) {
        // The root nodes is stored at index 0, so 0 can be used as a null-value for child indices.
        none = 0,
        _,
    };

    fn createNode(tree: *Tree, value: i32) std.mem.Allocator.Error!NodeIndex {
        const index: NodeIndex = @enumFromInt(@as(u32, @intCast(tree.nodes.items.len)));
        try tree.nodes.append(.{ .data = value });
        return index;
    }

    fn setLeftChild(tree: *const Tree, parent: NodeIndex, child: NodeIndex) void {
        tree.nodes.items[@intFromEnum(parent)].left_child = child;
    }

    fn setRightChild(tree: *const Tree, parent: NodeIndex, child: NodeIndex) void {
        tree.nodes.items[@intFromEnum(parent)].right_child = child;
    }
};

fn printTree(tree: *const Tree) void {
    assert(tree.nodes.items.len > 0);

    // print the root node.
    printNode(tree, @enumFromInt(0), 0);
}

fn printNode(tree: *const Tree, node_index: Tree.NodeIndex, depth: u32) void {
    const node = tree.nodes.items[@intFromEnum(node_index)];

    for (0..depth) |_| print("  ", .{});
    print("[{d}] {d}\n", .{ @intFromEnum(node_index), node.data });

    if (node.left_child != .none) printNode(tree, node.left_child, depth + 1);
    if (node.right_child != .none) printNode(tree, node.right_child, depth + 1);
}

const std = @import("std");
const ArrayList = std.ArrayList;
const assert = std.debug.assert;
const print = std.debug.print;

And here is the output:$ zig run indices.zig
[0] 45
  [1] -10
  [2] 89000
    [3] 2



    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[This blog is running on a recycled Google Pixel 5 (2024)]]></title>
            <link>https://blog.ctms.me/posts/2024-08-29-running-this-blog-on-a-pixel-5/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45110209</guid>
            <description><![CDATA[An absolute mammoth post about how I am running this blog site from a Google Pixel 5 Android phone using only Termux. It includes what inspired me, what I'm using for the setup, and my longform notes on the entire project.]]></description>
            <content:encoded><![CDATA[
			If you glance over this blog, you will see that I am an avid Android fan. After setting up numerous Linux proot desktops on phones, I wanted to see if I use a phone as a server and run my blog from an Android phone. Since you are reading this, I was successful.
I was inspired my a few Mastodon posts earlier this week to give it a go. First, I stumbled on a post from @kaimac who is running a site from an ESP32 microcontroller. In the comments of that post, I saw a mention to compost.party created by user @computersandblues that runs completely on an Android device and a solar panel. Last, @stevelord who is essentially running a homelab on a TP-Link router with OpenWRT installed.
I think a lot about power consumption of my homelab and I also love using old hardware for random projects to give them new life. I was truly inspired by the above works, so I got right down to business.
The hardware
I looked through the devices I had laying around and I chose a Google Pixel 5 my brother-in-law gave me after he upgraded. The Pixel 5 is carrier locked to Verizon, which is notorious for making it impossible to also unlock the bootloader and install custom ROMs. At first I wanted a device that I could install PostmarketOS to run a proper Linux server. In the end, I’m glad I didn’t go that route.
Another reason I chose the Pixel 5 is because it supports USB-OTG and can use docks with hard-wired internet. I didn’t want to run the site on wifi and having an ethernet connection was mandatory.
Last, it is the most current phone I have. This device is open to the internet, so I wanted to make sure it is an updated as possible.
Solar powered blog!
This summer I’ve been testing using a 100w solar panel I got from Harbor Freight Tools so I can learn more about how it all works before diving into larger projects. I have that panel connected to a Jackery 160w power station to keep it charged up and we use it to charge our mobile devices. I got the Jackery last year as a power bank I use while on jobsites.
Since I already have this set up, I am now using it to power this blog. I’m happy with this setup as I’ve been getting more into permacomputing. Having a website that is fully offgrid using recycled parts is exciting!
What I used to create the site (Termux is the GOAT)
While considering what projects I could do with this phone, I was thinking I was going to install a proot desktop and then run from within a Linux environment. Before I started I decided to check out a few packages that are in Termux (the flat out amazing terminal emulator) to see how far I could push it.
I checked for some basics and read about setting up an ssh connection. Then I randomly searched for Hugo, which is what my blog was already built on. Sure enough, it is right there in the Termux repos! Turns out, it has been in there for a long time. I see a lot of posts from 2018 with people using it.
How has it been going
Great! Site is fast and reliable. I ran into a few hiccups on the first day or so, which were mostly around the version of Hugo on my server and the newer version I am using on the phone. The other is related to my solar setup and keeping an eye on the battery levels.
To be honest, I don’t think anyone can tell it is running on an Android phone instead of a x86 Linux box or a hyperscaler VPS.
At the moment I have no plans to change this setup and will leave it as-is until some issue arises. But, there’s really not much to report other than it works fantastic.
Below are my longform notes on how I set it up. But, the short version is it was way simpler than I thought it would be. You can get up and running with a Hugo site by just installing git, screen, your favorite text editor, and hugo straight from the repos.
Not included in this post is how I add new posts to the phone. I can use scp to send a files, but I prefer to use dufs that is a static file server in that can be accessed in the browser. Using dufs I can upload files and make quick edits straight in the browser from any device. Surprise! dufs is also in the Termux repos and is so easy to get up and running. Again, message me if you’d like to see a write-up about it.

Installs
Of course I need some basic utilities. These are the utilities I need to have at a minimum when working with a Linux system:

rsync
openssh
git
wget
curl
fish shell
cronie
termux-services
iperf3
speedtest-go
screen
helix
hugo

Restart Termux and use sv-enable to run certain items as services. I do this for sshd and cronie. It looks like this:
$ sv-enable sshd
$ sv-enable cronie
After running sv-enable, restart Termux.
openssh
I could build all of this straight from the phone using either the touchscreen keyboard or connecting a standard keyboard and mouse either with a USB-C dock or bluetooth. But, I want to manage this like all of my other servers, which is to ssh into the device and work from my desk.
There is an official guide for setting up an ssh server. All I will add here is some pointers I learned along the way.

Adding an ssh key is simple and should be one of the first steps done. After generating the key and importing with ssh-copy-id from the desktop, edit the sshd file in $PREFIX/etc/ssh/sshd_config.
Termux generates its own username and cannot be changed. Run whoami to see what it is.
It is the same for the ssh port. As far as I can tell you cannot change the port, which is automatically set to 8022.

Running the site
There are lots of guides out there on how to setup a hugo site. I have an existing site that I migrated from a VM to this phone, so my notes do not include how to get a hugo site running. I also do not need to do any port forwarding as I already have a reverse proxy that I just changed where it points for my blog.
I would like to hear feedback if there is a need to add those notes here. Message me on Mastodon or by email using the links at the bottom of this post.
Below are notes on how I use the package cronie to start the blog using screen and the automatically reload the blog occasionally. cronie is for setting up cron tasks. Once installed and enabled, run crontab -e like usual to setup tasks.
This is how I do it.
First, set a fish alias for the command to reload the blog:
alias blog_run='cd /data/data/com.termux/files/home/<website_root_dir> && /data/data/com.termux/files/usr/bin/hugo serve --bind=0.0.0.0 --baseURL=https://blog.ctms.me --appendPort=false --environment=production --disableFastRender --cacheDir /data/data/com.termux/files/home/<website_root_dir>/cache'

funcsave blog_run
Now, create a script and place in ~/scripts that closes a previous instance of screen, clears the cache, and then starts a new screen session titled “hugo” and execute the alias:
#! /bin/bash
screen -X -S "hugo" quit
rm -rf /data/data/com.termux/files/home/<website_root_dir/cache/<site_name_dir>/filecache/getresource/
screen -S hugo -d -m fish -c 'blog_run; exec fish'
Last, set it to run with cron
*/5 * * * * cd /data/data/com.termux/files/home/scripts && sh blog_reload.sh
Backing up
Since Termux supports ssh connections, I can use it on remote machines to pull the files from the phone using rsync.
First, need to install rsync on the phone with pkg install rsync.
Desktop backup
Now we can run it from my desktop to pull the files:
rsync -aP pixel:~/<website_root_dir> /local/dir/pixel_blog/
On my desktop, I have this for cron
@reboot sleep 30 && rsync -aP pixel:~/<website_root_dir> /local/dir/pixel_blog/ >> $HOME/logs/pixel-hugo-backup.log 2>&1
nas backup
This is the same configuration. The only difference is the backup location and the cron timing.
rsync -aP pixel:~/<website_root_dir> /local/dir/pixel_blog
The automation:
5 6 * * * rsync -aP pixel:~/<website_root_dir> /local/dir/pixel_blog >> $HOME/logs/pixel-hugo-backup.log 2>&1
git backup
I have a local self-hosted git instance I push backups to, but you can totally set it up to send them to Github or whatever forge you use. No instructions here because there are plenty of guides out there on how to set this up.

    
        - - - - -
    
    
        Thank you for reading! If you would like to comment on this post you can start a conversation on the Fediverse. Message me on Mastodon at @cinimodev@masto.ctms.me. Or, you may email me at blog.discourse904@8alias.com. This is an intentionally masked email address that will be forwarded to the correct inbox.
    



		]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google can keep its Chrome browser but will be barred from exclusive contracts]]></title>
            <link>https://www.cnbc.com/2025/09/02/google-antitrust-search-ruling.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45108548</guid>
            <description><![CDATA[The ruling comes nearly a year after a U.S. judge ruled that Google holds an illegal monopoly in its core market of internet search.]]></description>
            <content:encoded><![CDATA[Google CEO Sundar Pichai during the press conference after his meeting with Polish PM Donald Tusk at Google for Startups Campus In Warsaw in Warsaw, Poland on February 13, 2025. Images)Jakub Porzycki | Nurphoto | Getty ImagesAlphabet shares popped 8% in extended trading as investors celebrated what they viewed as minimal consequences from a historic defeat last year in the landmark antitrust case.Last year, Google was found to hold an illegal monopoly in its core market of internet search.U.S. District Judge Amit Mehta ruled against the most severe consequences that were proposed by the Department of Justice, including the forced sale of Google's Chrome browser, which provides data that helps its advertising business deliver targeted ads. "Google will not be required to divest Chrome; nor will the court include a contingent divestiture of the Android operating system in the final judgment," the decision stated. "Plaintiffs overreached in seeking forced divestiture of these key assets, which Google did not use to effect any illegal restraints."Mehta, who oversaw the remedies trial in May, ordered the parties to meet by Sept. 10 for the final judgment.In August 2024, the U.S. District Court for the District of Columbia ruled that Google violated Section 2 of the Sherman Act and held a monopoly in search and related advertising.The antitrust trial started in September 2023."Now the Court has imposed limits on how we distribute Google services, and will require us to share Search data with rivals," Google said in a blog post. "We have concerns about how these requirements will impact our users and their privacy, and we're reviewing the decision closely. The Court did recognize that divesting Chrome and Android would have gone beyond the case's focus on search distribution, and would have harmed consumers and our partners."Read more CNBC tech newsKlarna aims to raise up to $1.27 billion in U.S. IPOTesla asks for $243 million verdict to be tossed in fatal Autopilot crash suitAlibaba is developing a new AI chip — here's what we know so farMeta changes teen AI chatbot responses as Senate begins probe into 'romantic' conversationsOne of the key areas of focus was the exclusive contracts Google held for distribution.In his decision Tuesday, Mehta said the company can make payments to preload products, but it cannot have exclusive contracts that condition payments or licensing.The DOJ had asked Google to stop the practice of "compelled syndication," which refers to the practice of making certain deals with companies to ensure its search engine remains the default choice in browsers and smartphones."The court's ruling today recognizes the need for remedies that will pry open the market for general search services, which has been frozen in place for over a decade," the DOJ said in a press release. "The ruling also recognizes the need to prevent Google from using the same anticompetitive tactics for its GenAI products as it used to monopolize the search market, and the remedies will reach GenAI technologies and companies."Google pays Apple billions of dollars per year to be the default search engine on iPhones. It's lucrative for Apple and a valuable way for Google to get more search volume and users.Apple stock rose 4% on Tuesday after hours."Google will not be barred from making payments or offering other consideration to distribution partners for preloading or placement of Google Search, Chrome, or its GenAI products. Cutting off payments from Google almost certainly will impose substantial—in some cases, crippling—downstream harms to distribution partners, related markets, and consumers, which counsels against a broad payment ban."Google was also ordered to loosen its hold on search data.During the remedies trial in May, the DOJ asked the judge to force Google to share the data it uses for generating search results, such as data about what users click on.Mehta ruled Tuesday that Google will have to make available certain search index data and user interaction data, though "not ads data."Google does not have to share or provide access to granular data with advertisers.The court narrowed the datasets Google will be required to share and said they must occur on "ordinary commercial terms that are consistent with Google's current syndication services."Stock Chart IconStock chart iconGoogle and Apple one-day stock chart.watch now]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Making a Linux home server sleep on idle and wake on demand (2023)]]></title>
            <link>https://dgross.ca/blog/linux-home-server-auto-sleep</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45108066</guid>
            <description><![CDATA[Daniel P. Gross is a computer software and hardware professional based in Toronto.]]></description>
            <content:encoded><![CDATA[
        
  

  
    2023-04-16
      in
        linux,
        backup,
        networking,
        wireshark,
        ruby,
        wake-on-lan,
        efficiency,
        homelab
  

  It began with what seemed like a final mundane touch to my home server setup for hosting Time Machine backups: I wanted it to automatically sleep when idle and wake up again when needed. You know, sleep on idle — hasn’t Windows had that built in since like Windows 98? How hard could it be to configure on a modern Ubuntu install?

To be fair, I wanted more than just sleep on idle, I also wanted wake on request — and that second bit turns out to be the hard part. There were a bunch of dead ends, but I stuck out it to find something that “just works” without the need to manually turn on the server for every backup. Join me on the full adventure further down, or cut to the chase with the setup instructions below.



tl;dr


  
  
  
  
    
  
  Home Server PC- High power consumption!- Ubuntu Linux- Mostly sleeps, wakes up on demandWake-on-LAN: unicast packetsRaspberry Pi (or similar)- Low power consumption- Ubuntu Linux- Always-onSSHAFP...Network servicesNetwork servicesARP Stand-inAvahi...Time machine backupsARP queries for HomeServermDNS queries for Home Server


Outcome:

  Server automatically suspends to RAM when idle
  Server automatically wakes when needed by anything else on the network, including SSH, Time Machine backups, etc.


You’ll need:

  An always-on Linux device on the same network as your server, e.g. a Raspberry Pi
  A network interface device for your server that supports wake-on-LAN with unicast packets


On the server:

  Enable wake-on-LAN with unicast packets (not just magic packets), make it persistent



sudo ethtool -s eno1 wol ug
sudo tee /etc/networkd-dispatcher/configuring.d/wol << EOF
#!/usr/bin/env bash

ethtool -s eno1 wol ug || true
EOF
sudo chmod 755 /etc/networkd-dispatcher/configuring.d/wol



  Set up a cron job to sleep on idle (replace /home/ubuntu with your desired script location)



tee /home/ubuntu/auto-sleep.sh << EOF
#!/bin/bash
logged_in_count=$(who | wc -l)
# We expect 2 lines of output from `lsof -i:548` at idle: one for output headers, another for the 
# server listening for connections. More than 2 lines indicates inbound connection(s).
afp_connection_count=$(lsof -i:548 | wc -l)
if [[ $logged_in_count < 1 && $afp_connection_count < 3 ]]; then
  systemctl suspend
else
  echo "Not suspending, logged in users: $logged_in_count, connection count: $afp_connection_count"
fi
EOF
chmod +x /home/ubuntu/auto-sleep.sh
sudo crontab -e
# In the editor, add the following line:
*/10 * * * * /home/ubuntu/auto-sleep.sh | logger -t autosuspend



  Disable IPv6: this approach relies on ARP, which IPv6 doesn’t use



sudo nano /etc/default/grub
# Find GRUB_CMDLINE_LINUX=""
# Change to GRUB_CMDLINE_LINUX="ipv6.disable=1"
sudo update-grub
sudo reboot



  Optional: Configure network services (e.g. Netatalk) to stop before sleep to prevent unwanted wakeups due to network activity



sudo tee /etc/systemd/system/netatalk-sleep.service << EOF
[Unit]
Description=Netatalk sleep hook
Before=sleep.target
StopWhenUnneeded=yes

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=-/usr/bin/systemctl stop netatalk
ExecStop=-/usr/bin/systemctl start netatalk

[Install]
WantedBy=sleep.target
EOF
sudo systemctl daemon-reload
sudo systemctl enable netatalk-sleep.service


On the always-on device:

  Install ARP Stand-in: a super simple Ruby script that runs as a system service and responds to ARP requests on behalf of another machine. Configure it to respond on behalf of the sleeping server.
  Optional: Configure Avahi to advertise network services on behalf of the server when it’s sleeping.



sudo apt install avahi-daemon
sudo tee /etc/systemd/system/avahi-publish.service << EOF
[Unit]
Description=Publish custom Avahi records
After=network.target avahi-daemon.service
Requires=avahi-daemon.service

[Service]
ExecStart=/usr/bin/avahi-publish -s homeserver _afpovertcp._tcp 548 -H homeserver.local

[Install]
WantedBy=multi-user.target
EOF
sudo systemctl daemon-reload
sudo systemctl enable avahi-publish.service --now
systemctl status avahi-publish.service


Caveats

  The server’s network device needs to support wake-on-LAN from unicast packets
  To prevent unwanted wake-ups, you’ll need to ensure no device on the network is sending extraneous packets to the server


How I got there
First, a bit about my hardware, as this solution is somewhat hardware-dependent:

  HP ProDesk 600 G3 SFF
  CPU: Intel Core i5-7500
  Network adapter: Intel I219-LM


Sleeping on idle
I started with sleep-on-idle, which boiled down to two questions:


  How to determine if the server is idle or busy at any given moment
  How to automatically suspend to RAM after being idle for some time


Most of the guides I found for sleep-on-idle, like this one, were for Ubuntu Desktop — sleep-on-idle doesn’t seem to be something that’s commonly done with Ubuntu Server. I came across a few tools that looked promising, the most notable being circadian. In general, though, there didn’t seem to be a standard/best-practice way to do it, so I decided I’d roll it myself the simplest way I could.

Determining idle/busy state
I asked myself what server activity would constitute being busy, and landed on two things:

  Logged in SSH sessions
  In-progress Time Machine backups


Choosing corresponding metrics was pretty straightforward:

  Count of logged in users, using who
  Count of connections on the AFP port (548), using lsof (I’m using AFP for Time Machine network shares)


For both metrics, I noted the values first at idle, and then again when the server was busy.

Automatically suspending to RAM
To keep things simple, I opted for a cron job that triggers a bash script — check out the final version shared above. So far it’s worked fine; if I ever need to account for more metrics in detecting idle state, I’ll consider using a more sophisticated option like circadian.

Waking on request
With sleep-on-idle out of the way, I moved on to figuring out how the server would wake on demand.

Could the machine be configured to automatically wake upon receiving a network request? I knew Wake-on-LAN supported waking a computer up using a specially crafted “magic packet”, and it was straightforward to get this working. The question was if a regular, non-“magic packet” could somehow do the same thing.

Wake on PHY?
Some online searching yielded a superuser discussion that looked particularly promising. It pointed to the man page for ethtool, the Linux utility used to configure network hardware. It shared ethtool’s complete wake-on-LAN configuration options:
wol p|u|m|b|a|g|s|f|d...
      Sets Wake-on-LAN options.  Not all devices support
      this.  The argument to this option is a string of
      characters specifying which options to enable.

      p   Wake on PHY activity
      u   Wake on unicast messages
      m   Wake on multicast messages
      b   Wake on broadcast messages
      a   Wake on ARP
      g   Wake on MagicPacket™
      s   Enable SecureOn™ password for MagicPacket™
      f   Wake on filter(s)
      d   Disable (wake on nothing).  This option
          clears all previous options.


It pointed in particular to the Wake on PHY activity option, which seemed perfect for this use-case. It seemed to mean that any packet sent to the network interface’s MAC address would wake it. I enabled the flag using ethtool, manually put the machine to sleep, then tried logging back in using SSH and sending pings. No dice: the machine remained asleep despite multiple attempts. So much for that 😕

Breakthrough: wake on unicast
None of ethtool’s other wake-on-LAN options seemed relevant, but some more searching pointed to the Wake on unicast messages as another option to try. I enabled the flag using ethtool, manually put the machine to sleep, then tried logging back in using SSH. Bingo! This time, the machine woke up. 🙌 With that, I figured I was done.

Not so fast — there were two problems:

  Sometimes, the server would wake up without any network activity that I knew of
  Some period of time after the server went to sleep, it would become impossible to wake it again using network activity other than a magic packet


A closer look at the same superuser discussion above revealed exactly the reason for the second problem: shortly after going to sleep, the machine was effectively disappearing from the network because it was no longer responding to ARP requests.

ARP
So the cached ARP entry for other machines on the network was expiring, meaning that they had no way to resolve the server’s IP address to its MAC address. In other words, an attempt to ping my server at 192.168.1.2 was failing to even send a packet to the server, because the server’s MAC address wasn’t known. Without a packet being sent, there was no way that server was going to wake up.

Static ARP?
My first reaction: let’s manually create ARP cache entries on each network client. This is indeed possible on macOS using:
sudo arp -s [IP address] [MAC address]


But it also didn’t meet the goal of having things “just work”: I was not interested in creating static ARP cache entries on each machine that would be accessing the server. On to other options.

ARP protocol offload?
Some more searching revealed something interesting: this problem had already been solved long ago in the Windows world.

It was called ARP protocol offload, and it goes like this:

  The network hardware is capable of responding to ARP requests independently of the CPU
  Before going to sleep, the OS configures the network hardware to respond to ARP requests
  While sleeping, the network hardware responds to ARP requests on its own, without waking the rest of the machine to use the CPU


Voila, this was exactly what I needed. I even looked at the datasheet for my network hardware, which lists ARP Offload as a feature on the front page.

The only problem? No Linux support. I searched the far reaches of the internet, then finally dug into the Linux driver source code to find that ARP offload isn’t supported by the Linux driver. This was when I briefly pondered trying to patch the driver to add ARP offload… before reminding myself that successfully patching Linux driver code is far beyond what I could hope to achieve in a little free-time project like this one. (Though maybe one day…)

Other solutions using magic packets
Some more searching led me to some other clever and elaborate solutions involving magic packets. The basic idea was to automate sending magic packets. One solution (wake-on-arp) listens for ARP requests to a specified host to trigger sending a magic packet to that host. Another solution implements a web interface and Home Assistant integration to enable triggering a magic packet from a smartphone web browser. These are impressive, but I wanted something simpler that didn’t require manually waking up the server.

I considered a few other options, but abandoned them because they felt too complex and prone to breaking:

  Writing a script to send a magic packet and then immediately trigger a Time Machine backup using tmutil. The script would need to be manually installed and scheduled to run periodically on each Mac.
  Using HAProxy to proxy all relevant network traffic through the Raspberry Pi and using a hook to send a magic packet to the server on activity.


Breakthrough: ARP Stand-in
What I was attempting didn’t seem much different from the static IP mapping that’s routinely configured on home routers, except that it was for DHCP instead of ARP. Was there no way to make my router do the same thing for ARP?

Some more digging into the ARP protocol revealed that ARP resolution doesn’t even require a specific, authoritative host to answer requests — any other network device can respond to ARP requests. In other words, my router didn’t need to be the one resolving ARP requests, it could be anything. Now how could I just set up something to respond on behalf of the sleeping server?

Here’s what I was trying to do:


  
  
  
    
  
  Home server PCMAC Address: AA:BB:CC:DD:EEIP Address:   192.168.1.3SSHAFP...Raspberry PiMAC Address: ZZ:YY:XX:WW:VVIP Address:   192.168.1.2ARP Stand-inAvahi...1Multicast ARP: What's 192.168.1.3'sMAC address?ARP: 192.168.1.3 is atAA:BB:CC:DD:EE Home server PCMAC Address: AA:BB:CC:DD:EEIP Address:   192.168.1.3SSHAFP...Raspberry PiMAC Address: ZZ:YY:XX:WW:VVIP Address:   192.168.1.2ARP Stand-inAvahi...2Unicast TCP packet to port 22 on AA:BB:CC:DD:EE Home server PCMAC Address: AA:BB:CC:DD:EEIP Address:   192.168.1.3SSHAFP...Raspberry PiMAC Address: ZZ:YY:XX:WW:VVIP Address:   192.168.1.2ARP Stand-inAvahi...3Communication continues normallyUnicast packet triggers wakeupStarts SSH sessionto home server123

I thought it must be possible to implement as a Linux network configuration, but the closest thing I found was Proxy ARP, which accomplished a different goal. So I went one level deeper, to network programming.

Now, how to go about listening for ARP request packets? This is apparently possible to do using a raw socket, but I also knew that tcpdump and Wireshark were capable of using filters to capture only packets of a given type. That led me to look into libpcap, the library that powers both of those tools. I learned that using libpcap had a clear advantage over a raw socket: libpcap implements very efficient filtering directly in the kernel, whereas a raw socket would require manual packet filtering in user space, which is less performant.

Aiming to keep things simple, I decided to try writing the solution in Ruby, which led me to the pcaprub Ruby bindings for libpcap. From there, I just needed to figure out what filter to use with libpcap. Some research and trial/error yielded this filter:

arp and arp[6:2] == 1 and arp[24:4] == [IP address converted to hex]


For example, using a target IP address of 192.168.1.2:

arp and arp[6:2] == 1 and arp[24:4] == 0xc0a80102


Let’s break this down, using the ARP packet structure definition for byte offets and lengths:

  arp — ARP packets
  arp[6:2] == 1 — ARP request packets. [6:2] means “the 2 bytes found at byte offset 6”.
  arp[24:4] == [IP address converted to hex] — ARP packets with the specified target address. [24:4] means “the 4 bytes found at byte offset 24”.


The rest is pretty straightforward and the whole solution comes out to only ~50 lines of Ruby code. In short, arp_standin is a daemon that does the following:


  Starts up, taking these configuration options:
    
      IP and MAC address of the machine it’s standing in for (the “target”)
      Network interface to operate on
    
  
  Listens for ARP requests for the target’s IP address
  On detecting an ARP request for the target’s IP address, responds with the target’s MAC address


Since the server’s IP → MAC address mapping is defined statically through the arp_standin daemon’s configuration, it doesn’t matter if the Raspberry Pi’s ARP cache entry for the server is expired.

Check out the link below to install it or explore the source code further:


  
  danielpgross/arp_standin on GitHub


ARP is used in IPv4 and is replaced by Neighbor Discovery Protocol (NDP) in IPv6. I don’t have any need for IPv6 right now, so I disabled IPv6 entirely on the server using the steps shown above. It should be possible to add support for Neighbor Discovery to the ARP-Standin service as a future enhancement.

With the new service running on my Raspberry Pi, I used Wireshark to confirm that ARP requests being sent to the server were triggering responses from the ARP Stand-in. It worked 🎉 — things were looking promising.

Getting it all working
The big pieces were in place:

  the server went to sleep after becoming idle
  the server could wake up from unicast packets
  other machines could resolve the server’s MAC address using ARP, long after it went to sleep


With the ARP Stand-in running, I turned on the server and ran a backup from my computer. When the backup was finished, the server went to sleep automatically. But there was a problem: the server was waking up immediately after going to sleep.

Unwanted wake-ups

First thing I checked was the Linux system logs, but these didn’t prove too helpful, since they didn’t show what network packet actually triggered the wakeup. Wireshark/tcpdump were no help here either, because they wouldn’t be running when the computer was sleeping. That’s when I thought to use port mirroring: capturing packets from an intermediary device between the server and the rest of the network. After a brief, unsuccessful attempt to repurpose an extra router running OpenWRT, a search for the least expensive network switch with port mirroring support yielded the TP-Link TL-SG105E for ~$30.


  
  TL-SG105E: a simple, inexpensive switch with port-mirroring support


With the switch connected and port mirroring enabled, I started capturing with Wireshark and the culprits immediately became clear:


  My Mac, which was configured to use the server as a Time Machine backup host using AFP, was sending AFP packets to the server after it had gone to sleep
  My Netgear R7000, acting as a wireless access point, was sending frequent, unsolicited NetBIOS NBTSTAT queries to the server


Eliminating AFP packets
I had a hunch about why the Mac was sending these packets:

  The Mac mounted the AFP share to perform a Time Machine backup
  The Time Machine backup finished, but the share remained mounted
  The Mac was checking on the status of the share periodically, as would be done normally for a mounted network share


I also had a corresponding hunch that the solution would be to make sure the share got unmounted before the server went to sleep, so that the Mac would no longer ping the server for its status afterwards. I figured that shutting down the AFP service would trigger unmounting of shares on all its clients, achieving the goal. Now I just needed to ensure the service would shut down when the server was going to sleep, then start again when it woke back up.

Fortunately, systemd supports exactly that, and relatively easily — I defined a dedicated systemd service to hook into sleep/wake events (check out the configuration shared above). A Wireshark capture confirmed that it did the trick.

Eliminating NetBIOS packets
This one proved to be harder, because the packets were unsolicited — they seemed random and unrelated to any activity being done by the server. I thought they might be related to Samba services running on the server, but the packets persisted even after I completely removed Samba from the server.

Why was my network router sending NetBIOS requests, anyway? Turns out that Netgear routers have a feature called ReadySHARE for sharing USB devices over the network using the SMB protocol. Presumably, the router firmware uses Samba behind the scenes, which uses NetBIOS queries to build and maintain its own representation of NetBIOS hosts on the network. Easy — turn off ReadySHARE, right? Nope, there’s no way to do that in Netgear’s stock firmware 😒.

That led me to take the plunge and flash the router with open-source FreshTomato firmware. I’m glad I did, because the firmware is much better than the stock one anyway, and it immediately stopped the unwanted NetBIOS packets.

Time Machine not triggering wake-up
I was getting close now: the server remained asleep, and I could reliably wake it up by logging in with SSH, even long after it went to sleep.

This was great, but one thing wasn’t working: when starting a backup on my Mac, Time Machine would show a loading state indefinitely with Connecting to backup disk... and eventually give up. Was the server failing to wake up from packets the Mac was sending, or was the Mac not sending packets at all?


  


A port-mirrored Wireshark capture answered that question: the Mac wasn’t sending any packets to the server, even long after it started to say Connecting to backup disk.... Digging into the macOS Time Machine logs with:

log show --style syslog --predicate 'senderImagePath contains[cd] "TimeMachine"' --info


A few entries made it clear:
(TimeMachine) [com.apple.TimeMachine:Mounting] Attempting to mount 'afp://backup_mbp@homeserver._afpovertcp._tcp.local./tm_mbp'
...
(TimeMachine) [com.apple.TimeMachine:General] Failed to resolve CFNetServiceRef with name = homeserver type = _afpovertcp._tcp. domain = local.


The Mac was using mDNS (a.k.a. Bonjour, Zeroconf) to resolve the backup server’s IP address using its hostname. The server was asleep and therefore not responding to the requests, so the Mac was failing to resolve its IP address. This explained why the Mac wasn’t sending any packets to the server, leaving it asleep.

mDNS stand-in
I already had an ARP stand-in service, now I needed my Raspberry Pi to also respond to mDNS queries for the server while it slept. I knew that Avahi was one of the main mDNS implementations for Linux. I first tried these instructions using .service files to configure my Raspberry Pi to respond to mDNS queries on behalf of the server. I used the following on the Mac to check the result:
dns-sd -L homeserver _afpovertcp._tcp local


For some reason, that approach just didn’t work; Avahi didn’t respond on behalf of the server. I experimented instead with avahi-publish (man page), which (to my pleasant surprise) worked right away using the following:
avahi-publish -s homeserver _afpovertcp._tcp 548 -H homeserver.local


With that, I just needed to create a systemd service definition that would automatically run the avahi-publish command on boot (check out the configuration shared above).

🏁 Finish
With all the wrinkles ironed out, everything has been working well now for over a month. I hope you’ve enjoyed following along and that this approach works for you too.

This post was discussed on Hacker News and Reddit.



      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A staff engineer's journey with Claude Code]]></title>
            <link>https://www.sanity.io/blog/first-attempt-will-be-95-garbage</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45107962</guid>
            <description><![CDATA[This started as an internal Sanity workshop where I demoed how I actually use AI. Spoiler: it's running multiple agents like a small team with daily amnesia.]]></description>
            <content:encoded><![CDATA[First attempt will be 95% garbage: A staff engineer's 6-week journey with Claude Code | Sanity]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vijaye Raji to become CTO of Applications with acquisition of Statsig]]></title>
            <link>https://openai.com/index/vijaye-raji-to-become-cto-of-applications-with-acquisition-of-statsig/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45106981</guid>
        </item>
        <item>
            <title><![CDATA[Physically based rendering from first principles]]></title>
            <link>https://imadr.me/pbr/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45106846</guid>
            <description><![CDATA[In this interactive article, we will explore the physical phenomena that create light and the fundamental laws governing its interaction with matter. We will learn how our human eyes capture light and how our brains interpret it as visual information. We will then model approximations of these physical interactions and learn how to create physically realistic renderings of various materials.]]></description>
            <content:encoded><![CDATA[
    
    
    In this interactive article, we will explore the physical phenomena that create light and the fundamental laws governing its interaction with matter. We will learn how our human eyes capture light and how our brains interpret it as visual information. We will then model approximations of these physical interactions and learn how to create physically realistic renderings of various materials.
    Chapter 1: What is light?
    We are all familiar with light: it’s the thing that allows us to see the world, distinguish colors and textures, and keeps the universe from being a dark, lifeless void. But precisely defining what light is has proven to be a tricky question.Throughout history, many philosophers (and later, physicists) studied light in an effort to demystify its nature. Some ancient Greeks considered it to be one of the four fundamental elements that composed the universe: beams of fire emanating from our eyes.
    Descartes proposed that light behaved like waves, while Newton thought that it consisted of tiny particles of matter called corpuscles.

    Each of these more or less scientific theories explained some aspects of light's behavior, but none could account for all of them in a single, unified framework. That was until the 1920s when physicists came up with quantum electrodynamics. This theory is, as of now, the most accurate way to describe every interaction of light and matter.

    You can hover the diagram below to see which light's phenomena can be explained using each model:


    
            Quantum Optics
            
                Electromagnetic Optics
                
                    Wave Optics
                    
                        Ray Optics
                    
                
            
        
    
        
            Reflection / Refraction / Transmission
            Diffraction
            Interference
            Polarization
            Dispersion
            Fluorescence
            Phosphorescence
        
    

    

    For the purpose of computer graphics, the ray optics model is accurate enough at simulating light interactions. But for the sake of scientific curiosity, we will explore some aspects of the other models, starting with electromagnetism.

    The Electric force
    One of the fundamental properties of matter is the electric charge, and it comes in two types: positive and negative.Charges determine how particles interact: charges of the same type repel each other, while opposite charges attract.
    The amount of force affecting two charged particles is calculated using Coulomb's law:
    


    Where  is a constant,   and  are the quantities of each charge, and  is the distance between them.

    You can drag around these charges to see how the electric force affects them:
    
    Every charge contributes to the electric field, it represents the force exerted on other charges at each point in space. We can visualize the electric field with a  or a  :
    
    
    Another way to visualize the electric field is by coloring each point in space with a color gradient representing the force experienced by a small charge at that point:
    

    Special relativity and magnetism
    Imagine a moving object carrying a positive electric charge placed under a cable carrying an electrical current.
    From , the object and the negative charges in the wire are moving, and since the positive and negative charges in the cable compensate each other, the object doesn't experience any force.
    In the , it appears to be static alongside the negative charges, while the positive charges are moving to the left, and the object still doesn't get affected by any force.
    Now if we take into account , the moving charges in the wire appear "stretched" due to relativistic effects, causing a change in the distribution of charges. This stretching leads to a repulsive force between the object and the wire, which we interpret as magnetism.
    
    
    Maxwell's equations
    Maxwell's equations describe how electric and magnetic fields are created and interact with each other. We will focus on the third and fourth equations.
    Maxwell's third equation, known as Faraday's law of induction, shows how changing magnetic fields can generate electric currents.An example of this is moving a magnet inside a coil, which induces an electric current in the wire due to the changing magnetic field.
    This is the principle behind electric generators: Mechanical energy (like the flow of steam) is used to move magnets inside coils (a turbine), converting it to electrical energy through electromagnetic induction.
    By moving the magnet left and right, we can see the voltmeter picking up a current and the electric charges in the coil moving back and forth:
    
    
        Show magnetic field
            
        
        Slide the magnet
        
    

    
    Maxwell's fourth and final equation, Ampère's Law, illustrates how electric currents (moving charges) produce magnetic fields around them. This is the basis of how electromagnets function:
    
    
        Voltage: 0 volts
        
    
    
    Together, these laws demonstrate how electric and magnetic fields are interdependent. A changing magnetic field generates an electric field, and a changing electric field generates a magnetic field.
    This continuous cycle enables self-sustaining, self-propagating electromagnetic waves, which can travel through space without requiring a medium.
    Electromagnetic radiation
    Electromagnetic radiation consists of waves created by synchronized oscillations of electric and magnetic fields. These waves travel at the speed of light in a vacuum.
    The amplitude of a wave determines the maximum strength of its electric or magnetic field. It represents the wave's intensity or "brightness". In quantum terms, a higher amplitude corresponds to a greater number of photons.
    The frequency of a wave determines the energy of the individual photons that compose it. Higher frequencies correspond to shorter wavelengths and more energetic photons.
    
    Amplitude
    
    Frequency
    

    When the wavelength falls between approximately 400 nm and 700 nm, the human eye perceives it as visible light.
    While other wavelengths are invisible to the human eye, many are quite familiar in everyday life.
For example, microwaves are used for Wi-Fi and cooking, X-rays are used in medical imaging, and radio waves enable communication.
Some insects, like bees, can see ultraviolet light, which helps them locate flowers by revealing hidden patterns and markings created by specialized pigments, such as flavonoids, that reflect UV wavelengths.
On the other end of the spectrum, gamma rays are highly energetic and can be dangerous, they are generated by radioactive decay, nuclear bombs, and space phenomena like supernovas.
    
    Frequency
    

    Generating Light
    There are many ways for light to be generated, the two most common ones we encounter everyday are incandescence and electroluminescence.

    Incandescence is the process by which a material emits visible light due to high temperature. It is how incandescent lightbulbs and the sun generates light.
    An incandescent lightbulb produces light through the heating of a filament until it starts glowing. The filament is made of tungsten, an element with a high melting point, high durability, and a positive temperature coefficient of resistance, which means its resistance increases with temperature.

    When we increase the current flowing through the filament, it starts heating up (Due to Joule heating), which increases the resistance in turn causing more heat to get dissipated. This feedback loop stabilizes at around 2500°C.

    This heat makes the electrons in the filament wiggle and collide with each other, releasing photons in the process. This radiation can be approximated as Black-body radiation.



Voltage


The Sun also generates light by incandescence, but unlike the lightbulb's filament glowing via Joule heating, the Sun’s energy is produced by nuclear fusion in the core, where hydrogen nuclei fuse to form helium and release photons as gamma rays.These photons travel from the core through the radiative zone, getting absorbed and remitted countless times while shifting to longer wavelengths. After hundreds of thousands of years of bouncing around, the photons make it to the surface of the Sun, called the photosphere, where they get radiated away.
Most (~49%) of the sun's emissions are in infrared, which is responsible for the heat we get on Earth, ~43% is visible light and the ~8% left is ultraviolet.

An interesting fact is that illustrations of the Sun's cross-section typically depict the interior with bright orange or yellow colors. However, if we could actually see a cross-section of the Sun, even the hottest regions like the core would appear dark and opaque, because the radiation generated there isn't in the visible spectrum.





Another way to generate light is by electroluminescence, this is the phenomenon that powers LEDs

The main component of a light-emitting diode is a semiconductor chip. Semiconductors are materials whose electrical conductivity can be modified by mixing them with impurities in a process known as doping.

Depending on the type of impurity (called the dopant) used in the mix, the semiconductor can be turned into either an n-type, which has extra electrons freely moving around, or a p-type, which has a lack of electrons and instead carrying an electron "hole", also moving around and acting as a positive charge.

When you stick a p-type and an n-type semiconductor side by side, they form a p-n junction. When a current flows through the junction, the electrons and the holes recombine and emit photons in the process.


Aside from incandescence and electroluminescence, which are the two most common sources of light we encounter in everyday life, light can come from other places. Some materials glow when exposed to ultraviolet radiation, others absorb that radiation and re-emit it after some time. Some animals like fireflies use special enzymes to produce light. You can read this page to learn more about other sources of luminescence.

Chapter 2: Abstracting Away

In the previous chapter, we examined the nature of light and the various methods by which it can be emitted, we will now focus on how it interacts with matter.

When a photon hits a material, it interacts with the electrons in the atoms and molecules of that material, then two things can happen, it can either be absorbed or scattered.

The electrons occupy atomic orbitals: regions around the nucleus of the atom where an electron is most likely to be found. A higher orbital corresponds to a higher energy level of the electron.


If the photon has the energy needed to excite the electron to a higher energy level, the photon can be absorbed. Eventually the electron returns to a lower level and releases the energy as heat.

If the photon does not get absorbed, its electric field will make the electrons oscillate in return and generate secondary waves that interfere constructively and destructively with the photon waves in complicated ways.

We can simplify these complicated interactions by making a few assumptions about the material:

    The material is homogeneous, as in the material has the same properties everywhere
    The material is a perfectly smooth surface

We can use Maxwell's equations to show that such a perfect flat material splits the incoming light waves into two parts: reflected and refracted.

The angle of reflection is equal to the angle of incidence relative to the normal of the surface, as per the law of reflection:


        
        Angle 
    


The angle of refraction is determined by how much slower (or faster) light travels through the material, that speed is defined by the index of refraction, and the angle is calculated using Snell's law:






        
        
        
        Angle 
        Index of refraction 
        Index of refraction 
    


At a  and refractive indices light is no longer refracted and seems to disappear.

The amount of light that is reflected and refracted is calculated using Fresnel equations.

However, computing the full Fresnel equation in real time can be slow, so in 1994 Christophe Schlick came up with an approximation.
First we compute the reflectance at zero degrees from the normal:


Then we plug  in the approximation function for the reflectance:


The transmitted (or refracted) light simply becomes:



        
        
        Angle 
        Index of refraction 
        Index of refraction 
    

If we try the  where the refracted ray disappeared, we can now see it getting reflected back inside the medium, this is called total internal reflection.

Total internal reflection gives rise to an interesting phenomenon called Snell's window. If you dive underwater and look up, the light above the surface is refracted through a circular window 96 degrees wide, and everything outside is a reflection of the bottom of the water.


Angle



This is what it looks underwater:




The Microfacet Model

Like we saw earlier, we can explain light reflecting and refracting using different models, depending on the size of the surface irregularities we are considering.
For example, wave optics explains light interacting with matter as light waves diffracting on the surface nanogeometry.
If we zoom out a bit and use ray optics, we consider light as straight line rays that reflect and refract on the surface microgeometry. With this model we can use the optical laws we described earlier: law of reflection, Snell's law, Fresnel equations.
Now for rendering, we can zoom out even further and consider one pixel at a time, each pixel contains many microgeometry surfaces that we call a microfacet. We can use a statistical average of the microfacets in a pixel to simulate the appearance of the surface at that pixel, without considering each individual microfacet which would be unfeasible in real time.

    
        Size
        Model
        Phenomenon
    
    
        Nanogeometry
        Wave optics
        Light diffraction
    
    
        Microgeometry
        Ray optics
        Reflection/refraction, change in local normal
    
    
        Macrogeometry
        BRDF
        Statistical average over a pixel, wider cone -> more roughness
    


Here we can see a microgeometry surface, changing the roughness makes it more bumpy and the microfacets normals aren't aligned anymore:

Roughness


At the macrogeometry level, a bigger roughness value means light rays have a wider cone where they can spread out. The function that describes this cone is called bidirectional reflectance distribution function, we will discuss it in the next chapter.

Roughness


In our microfacet model, we distinguish two types of materials by the nature of their interaction with light: metals and non-metals.

Metals

Metals have a sea of free electrons that absorb light very easily when the photons enter a few nanometers deep inside the surface. The light that isn't absorbed is reflected equally across the visible light spectrum, this is why metals have that distinct "silvery" gray color.
Notable exceptions are gold, copper, osmium and caesium.



Changing the roughness of a metal only changes its specular reflection, making it more or less mirror-like. But there is no diffuse reflection at all.

Roughness


Non-metals

Also called dielectrics, these are materials that do not conduct electricity (insulators). They include plastic, wood, glass, water, diamond, air...



When a photon hits a dielectric material, it only gets absorbed if it's energy matches the electron's energy in the material. So light either gets reflected, and the specular reflection depends on the roughness of the surface.
The light can also get refracted inside the dielectric material, it bounces around and interacts with the pigments inside the material until it exits the surface, this is called diffuse reflection.


Roughness


Spectral Power Distribution

If we take the example of a red apple. When we shine a white light (which contains all visible wavelengths) on it, the apple's pigments (anthocyanins) absorb most of the wavelengths like violet, blue and green wavelengths, thus decreasing the intensity of those colors from the light. The remaining wavelengths, mostly red, gets scattered off the apple's surface making us perceive the apple as red.



We can characterize the incoming light by describing the amount of energy it carries at each wavelength using a function called the Spectral Power Distribution or SPD for short.
For example, below is the SPD for D65, a theoretical source of light standardized by The International Commission on Illumination (CIE). It represents the spectrum of average midday light in Western Europe or North America:

We can compare this SPD to AM0, which is the measured solar radiation in outer space before entering Earth's atmosphere. Notice the absence of a dip in the ultraviolet range:


And here is the SPD of a typical tungsten incandescent light:


Spectral Reflectance Curve
The SPD shows us how much of each "color" a light is composed of. Another interesting function we can look at is called the spectral reflectance curve, which shows the fraction of incident light reflected by an object at each wavelength, effectivly representing the color of said object.
Going back to our apple example, since it reflects most of its light in the red wavelength, its spectral reflectance curve might look like this:


The light we see is the combination of the light spectral power distribution with the object spectral reflectance.
If we shine a light on our red apple, depending on the wavelengths of the light, the final color we see changes. A  makes the apple appear red, because it's like multiplying the apple's color by one. We get the same result with a , because the apple reflects mostly in the red spectrum.However if we shine a , besides the leaf, the rest of the apple doesn't reflect any light, thus appearing black.
On the top right you can see the SPD of the flashlight, under it the reflectance curve of the apple, and the resulting reflected light below it:



If we now add a banana and shine a , we can obviously tell the apple and the banana apart, one being red while the other is yellow.But what happens when the light is ? Both objects appear reddish to our eyes, because the banana doesn't have any green light to reflect, making it lose its yellow color. This phenomenon is called metamerism.
You can display the  or the  :





There are different types of metamerism, depending on when it happens during the light transport process. The apple and banana example is called illuminant metamerism, where objects that reflect light differently appear the same under some specific illumination.
Observer metamerism is when objects appear different between observers, a good example of this is colorblindness.

Chapter 3 : The Rendering equation




 is the outgoing light at point  to the direction 
 is the incoming light at point  from the direction 
The BRDF (Bidirectional reflectance distribution function) is a function that tells use how much of the incoming light  is reflected to the outgoing direction  at point , this function characterizes the surface of our material.
The dot product is called the cosine term.




The rendering equation gives us the light reflected towards a direction  at a point  by summing all the incoming lights  at that point coming from direction  in the hemisphere , weighted by the BRDF at that point and the cosine term.

Let's peel off this equation step by step, starting with the easiest part:

Lambert's cosine law

When a beam of light hits a surface, the area it touches is inversly proportional to the cosine of the angle of incidence. When the angle of incidence is , the area is at minimum and the intensity is concentrated, but the more  the angle gets, the larger the area and the intensity gets spread out.



Angle


The BRDF

The BRDF is arguably the most important part of the rendering equation, it characterizes the surface of our material and its appearance. This is where the we can apply the microfacet theory and energy conservation to make our rendering model physically based.

It takes as input the incoming  and outgoing  light direction, and the roughness of the surface . It equals the diffuse and the specular components weighted by their respective coefficients  and .
There are many different BRDFs, the most common in realtime rendering is the Cook-Torrance specular microfacet model combined with Lambertian diffuse model.



The lambertian diffuse component is the diffuse color, called albedo, multiplied by the cosine factor. But since we already have the cosine factor in the rendering equation, the diffuse equation becomes: 



The Cook-Torrance specular component itself has three components: the normal distribution function , the geometric function  and the Fresnel equation .

Normal Distribution Function

The normal distribution function is an approximation of the number of microfacets oriented in such a way that they will reflect light from the incoming direction  to the outgoing direction .

The one we will use is the Trowbridge-Reitz GGX function:



 is the halfway vector between the incoming and outgoing directions, we calculate it like this:




Roughness


Geometric Function

Some incoming rays get occluded by some microfacets before they get a chance to bounce off to the outgoing direction, this is called shadowing. Other rays get occluded by microfacets on their way to the outgoing direction, this is called masking. The geometric function approximates this effect.

Here we can see the shadowed rays in red and the masked rays in blue. The yellow rays succesfully reflected to the outgoing direction:

Angle


We will use the Schlick-GGX geometric function:




Where:



Roughness


Fresnel Equation

Like we discussed in the previous chapter, we will use the Fresnel-Schlick approximation which is fast for realtime rendering and accurate enough:



Base reflectance F0


Combining everything

Now we can combine the diffuse and specular components to get our final PBR render:


Roughness
    Metallic
    Albedo


Here is a grid of spheres with different roughness and metallic values on each axis:


Usually the metallic values is either 0 or 1, but it is useful in PBR rendering to consider intermediate values to smoothly interpolate between metals and non-metals. Take this rusted metal material for example:


To be continued...

Physically based rendering is a very vast topic and there is a lot more to cover.
In the chapter about the physics of light, I omitted the quantum explanation of light's behaviour using probability amplitudes. We didn't talk about the double slit experiment or the wave-particle duality. I may cover this in the future when I learn more about it, for now I'll leave you with this quote from Richard Feynman's QED book:
The theory of quantum electrodynamics describes Nature as absurd from the point of view of common sense. And it agrees fully with experiment. So I hope you accept Nature as She is — absurd.


We didn't talk about polarization and assumed all our light sources are unpolarized, this isn't very important for general rendering but can be useful for research.

We focused on surface rendering, in the future I will cover volume rendering, subsurface scattering, effects like optical dispersion, thin-film interference/iridescence...etc

There are a lot more implementation specific details. Whether we are implementing PBR in raytracing or rasterization, we need to use optimization techniques to make the rendering faster while still being accurate. Examples that come to mind are prefiltred envmaps and importance sampling (or efficient sampling in general).

Further reading
This article is mainly based on this SIGGRAPH talk by Naty Hoffman and Physically Based Rendering: From Theory To Implementation
My main inspiration for writing interactive articles is this fantastic blog by Bartosz Ciechanowski. A lot of interactive demos in this article are similar to the ones in this post.
Other resources include LearnOpenGL, the ScienceClic youtube channel, and 3Blue1Brown of course.
I can't recommend enough the famous book QED: The Strange Theory of Light and Matter by Richard Feynman.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Introduction to Ada: a project-based exploration with rosettas]]></title>
            <link>https://blog.adacore.com/introduction-to-ada-a-project-based-exploration-with-rosettas</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45106314</guid>
            <description><![CDATA[by Romain Gora – Sep 01, 2025. Discover Ada through a fun, project-based tutorial! Learn the language’s clarity, safety, and modern features while building an SVG rosetta generator. A fresh, visual way to explore Ada 2022.]]></description>
            <content:encoded><![CDATA[ContextThis practical walkthrough, designed as a short tutorial, was created upon joining AdaCore as a Field Engineer. In this new role, I’ll be working directly with customers to help them succeed with Ada. Although I was first introduced to the language nearly two decades ago, this new position inspired me to revisit its fundamentals, and I used the excellent https://learn.adacore.com portal as a quick refresher.While that platform takes a concept-based approach, I chose to complement it with a project-based method by developing a small, end-to-end Ada program that generates animated rosettas in the form of SVG files. These are technically hypotrochoid curves, producing patterns that many will recognize from the classic Spirograph™ toy.In this walkthrough, we’ll show that Ada can be fun and easy to learn. Although the language is famous for safety-critical systems, we will use it as a modern, general-purpose programming language and try out some new features from Ada 2022 along the way.Let's dive in!A brief note on AdaThis section leans a bit more into background context, with a slightly encyclopedic flavor that's especially useful for readers new to Ada. If you're already familiar with Ada’s history and principles, feel free to joyfully skip ahead to the next section!Ada was created in the late 1970s after a call from the U.S. Department of Defense to unify its fragmented software landscape. The winning proposal became Ada, a language that's been literally battle-tested (!) and built on a deeply thought-out design that continues to evolve today.While Ada is absolutely a general-purpose programming language, it has carved out a strong niche in fields where software correctness and reliability are mission-critical:Embedded and real-time systemsAerospace and defenseRail, automotive, and aviationAny system where failure is not just a bug, but a riskIts strict compile-time checks, safety features, and clear structure make it particularly appealing when you need your software to be dependable from day one and still maintainable ten years later.Ada's design is grounded in a strong and principled philosophy:Readability over conciseness: Ada favors clarity. It avoids symbols and abbreviations in favor of full keywords, making the language more accessible and less error-prone.Strong and explicit typing: It is extremely easy to declare new types in Ada, with precise constraints, which makes it much harder to accidentally misuse data. While some functional languages share this strong typing discipline, Ada stands out by requiring the programmer to be very explicit. It uses little to no type inference.Explicit is better than implicit: Unlike many modern languages that prioritize convenience, Ada leans heavily toward precision. Most types must be explicitly named and matched.Defined semantics and minimal undefined behavior: Ada offers a level of predictability and safety unmatched in many languages. This makes it a strong choice not only for safety-critical systems, but also for codebases where long-term maintenance, verifiability, and correctness are essential.Compiler as a partner: Ada compilers are strict by design, not to frustrate, but to help the programmer write clearer, more correct code. This philosophy encourages the developer to communicate intent clearly, both to the compiler and to future readers.How the program worksSometimes the best way to figure out how something works is to start at the end. Let's do that!In this tutorial, we'll walk through how the program produces its final output — a rosetta SVG file — and use that as a way to explore how Ada's structure, type system, and tooling come together.This is a simple command-line program that generates an SVG file. You run it like this:./bin/rosettaThe idea was to create something visual: learning is more fun when there's an immediate, satisfying result and generating rosettas fits that goal perfectly.Why SVG? Because it's a lightweight and portable vector format that you can view in any modern browser. I wanted to avoid relying on a graphical library, which would have added extra weight and gone beyond the scope of this approach. And while XML isn't the most pleasant format to write by hand, generating it from code is straightforward and gives a surprisingly clean result.Tooling & setupTo build and run the project, I used Alire, the Ada package manager. It plays a similar role in the Ada ecosystem as Cargo does for Rust or npm for JavaScript. It's well-documented, and while we won't dive deep into it here, it's a solid and accessible way to manage Ada projects. I encourage anyone curious to get it from https://alire.ada.dev. Interestingly, "Alire" is also the French expression for "à lire" — which means "for reading." A fitting name for a tool that supports a language so focused on clarity and readability!Once Alire is set up, the natural next step is choosing where to write the code. You have two excellent options for your development environment. For a dedicated experience, you can download the latest release of GNAT Studio from its GitHub repository. If you prefer a more general-purpose editor, you can install the official Ada & SPARK for Visual Studio Code extension from AdaCore.As a new learner, I also kept https://learn.adacore.com close at hand. It’s a particularly clear and comprehensive resource — and I especially appreciated being able to download the ebook version and read through it on my phone.Entry pointwith Rosetta_Renderer;

procedure Main is
begin
   Rosetta_Renderer.Put_SVG_Rosettas;
end Main;There are several interesting things to notice right away:The with clause is not a preprocessor directive like in C or C++. It’s a compiled, checked reference to another package — a reliable and explicit way to express a dependency. This eliminates entire classes of bugs related to fragile #include chains, macro collisions, or dependency order issues.This procedure is not a function: it does not return a value. In Ada, procedures are used to perform actions (like printing or modifying state), and functions are used to compute and query values.The syntax is designed for readability. You’ll find begin and end here instead of {} as in C/C++, reinforcing Ada’s philosophy that clarity matters more than brevity.Put_SVG_Rosettas uses the idiomatic Pascal_Snake_Case naming style. This reflects a common Ada convention and avoids acronyms or compressed identifiers in favor of more descriptive names.The entry point is minimal but meaningful: it simply calls a procedure which generates the output we'll explore in the next sections.Geometry and computation (package Rosetta)In Ada, a package is a modular unit that groups related types, procedures, and functions. Following the convention from GNAT (the Ada compiler, part of the GNU Compiler Collection, fondly known as GCC), each package has a specification file (with the .ads extension — short for Ada Specification) and an implementation file (with the .adb extension — short for Ada Body). This clear and enforced split means you always know where to find interface definitions versus their implementation.The following code is the package specification for Rosetta. It defines the data types for the rosetta shapes and declares the public interface of operations available to manipulate them.with Ada.Strings.Text_Buffers;

package Rosetta is

   --  A mathematical description of a rosetta (specifically, a hypotrochoid).
   --  formed by tracing a point attached to a circle rolling inside another circle.
   type Hypotrochoid is record
      Outer_Radius : Float;     --  Radius of the fixed outer circle.
      Inner_Radius : Float;     --  Radius of the rolling inner circle.
      Pen_Offset   : Float;     --  From the center of the inner circle to the drawing point.
      Steps        : Positive;  --  Number of steps (points) used to approximate the curve.
   end record;

   --  A 2D coordinate in Cartesian space.
   type Coordinate is record
      X_Coord, Y_Coord : Float;
   end record
     with Put_Image => Put_Image_Coordinate;
   
   --  Redefines the 'Image attribute for Coordinate.
   procedure Put_Image_Coordinate 
     (Output : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; 
      Value  : Coordinate);

   --  A type for an unconstrained array of 2D points forming a curve.
   --  The actual bounds are set when an array object of this type is declared.
   type Coordinate_Array is array (Natural range <>) of Coordinate;

   --  Computes the coordinates of the rosetta curve defined by Curve (a hypotrochoid).
   --  Returns a centered array of coordinates.
   function Compute_Points (Curve : Hypotrochoid) return Coordinate_Array;

end Rosetta;The Rosetta package is responsible for all the math and curve computation. It defines:Hypotrochoid, type describing the geometry of the rosettaCoordinate, type representing points in 2D spaceCoordinate_Array, type holding a series of such pointsCompute_Points, function which calculates all the points of the curve based on the Hypotrochoid parameters and recenters them around the originThis package is focused solely on computation. It doesn’t concern itself with how the result is rendered.Fun fact for the curious: when the rolling circle rolls outside the fixed circle rather than inside, the resulting curve is called an epitrochoid.In Ada, a record is similar to a struct in C or a class with only data members in other languages. It's a user-defined type composed of named components, making it ideal for modeling structured data.Using a record for Hypotrochoid was particularly appropriate: it allows grouping all geometric parameters (outer radius, inner radius, pen offset, and steps) into a single, cohesive unit. This improves readability and maintainability. The compiler enforces correctness by ensuring all required values are present and of the expected type — reinforcing Ada’s philosophy of clarity and safety.The type Coordinate_Array is an unconstrained array type that holds a range of Coordinate records. In this context, ‘unconstrained’ simply means that we don’t define the array’s size when we declare the type. Instead, the size is defined when we declare an object of that type. This gives us the flexibility to use this type for a variety of shapes.You may also notice the use of Natural range <>. Natural is a predefined subtype of Integer that only allows non-negative values. And yes, I mean subtype: Ada’s powerful type system allows you to take an existing type and create a more specific, constrained version of it.Highlights from the .adb fileHere are a few notable aspects from the implementation (rosetta.adb) that illustrate Ada’s strengths for writing safe, clear, and structured code:Declarative and modular design: Both Generate_Point and Compute_Points are pure functions that operate only on their inputs. Their behavior is fully deterministic and encapsulated.Safe bounds and array handling: The Points array is statically bounded using (0 .. Curve.Steps), and its access is strictly safe. The compiler ensures that any index outside this range would raise an error at runtime. This immediate error is a feature, not a bug. It stops silent memory corruption and security flaws by ensuring the program fails predictably and safely at the source of the problem.Use of constants for robustness: Variables such as Pi, R_Diff, and Ratio are declared as constant, enforcing immutability. This helps ensure clarity of intent and prevents accidental reassignment, a common source of subtle bugs in more permissive languages. Ada encourages this explicit declaration style, promoting safer code.with Ada.Numerics;
with Ada.Numerics.Elementary_Functions;

use Ada.Numerics;
use Ada.Numerics.Elementary_Functions;

package body Rosetta is

   --  Computes a single point on the hypotrochoid curve for a given angle Theta.
   --  Uses the standard parametric equation of a hypotrochoid.
   function Generate_Point (Curve : Hypotrochoid; Theta : Float) return Coordinate is
      R_Diff : constant Float := Curve.Outer_Radius - Curve.Inner_Radius;
      Ratio  : constant Float := R_Diff / Curve.Inner_Radius;
   begin
      return (
              X_Coord => R_Diff * Cos (Theta) + Curve.Pen_Offset * Cos (Ratio * Theta),
              Y_Coord => R_Diff * Sin (Theta) - Curve.Pen_Offset * Sin (Ratio * Theta)
             );
   end Generate_Point;

   --  Computes all the points of the hypotrochoid curve and recenters them.
   --  The result is an array of coordinates centered around the origin.
   function Compute_Points (Curve : Hypotrochoid) return Coordinate_Array is
      Points : Coordinate_Array (0 .. Curve.Steps);
      Max_X  : Float := Float'First;
      Min_X  : Float := Float'Last;
      Max_Y  : Float := Float'First;
      Min_Y  : Float := Float'Last;
      Offset : Coordinate;
   begin
      --  Computes raw points and updates the bounding box extents.
      for J in 0 .. Curve.Steps loop
         declare
            Theta : constant Float := 2.0 * Pi * Float (J) / Float (Curve.Steps) * 50.0;
            P     : constant Coordinate := Generate_Point (Curve, Theta);
         begin
            Points (J) := P;
            Max_X := Float'Max (Max_X, P.X_Coord);
            Min_X := Float'Min (Min_X, P.X_Coord);
            Max_Y := Float'Max (Max_Y, P.Y_Coord);
            Min_Y := Float'Min (Min_Y, P.Y_Coord);
         end;
      end loop;

      --  Computes the center offset based on the bounding box.
      Offset := (
                 X_Coord => (Max_X + Min_X) / 2.0,
                 Y_Coord => (Max_Y + Min_Y) / 2.0
                );

      --  Recenters all points by subtracting the center offset.
      for J in Points'Range loop
         Points (J).X_Coord := @ - Offset.X_Coord;
         Points (J).Y_Coord := @ - Offset.Y_Coord;
      end loop;

      return Points;
   end Compute_Points;
   
   --  Redefines the 'Image attribute for Coordinate.
   procedure Put_Image_Coordinate
     (Output : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class;
      Value  : Coordinate)
   is   
      X_Text : constant String := Float'Image (Value.X_Coord);
      Y_Text : constant String := Float'Image (Value.Y_Coord);
   begin
      Output.Put (X_Text & "," & Y_Text);
   end Put_Image_Coordinate;

end Rosetta;On style: strict and predictable (and satisfying!)Ada is one of those rare languages that not only compiles your code but asks you to write it properly. With the compiler switch -gnaty, you can enforce a comprehensive set of style rules, many of which are stricter than what you'd see in most languages.This includes things like:No trailing whitespace at the end of linesNo consecutive blank linesProper indentation and alignment of keywords and parametersA space before “(“ when calling a procedure or functionConsistent casingAt first, this can feel surprisingly strict. But once you get used to it, the benefits are clear: it helps enforce a consistent and clean coding style across a codebase. That in turn improves readability, reduces ambiguity, and leads to more maintainable programs.Rather than leaving formatting up to personal taste or optional linter tools, Ada integrates this attention to detail into the compilation process itself. The result is not only more elegant: it's genuinely satisfying. And you can do even more with GNATcheck and GNATformat but it’s outside of the scope of this post.Outputting to SVG (package Rosetta_Renderer)The Rosetta_Renderer package is responsible for producing the SVG output. It defines a single high-level procedure:package Rosetta_Renderer is

   --  Renders a predefined set of rosettas into an SVG output.
   procedure Put_SVG_Rosettas;

end Rosetta_Renderer;This procedure generates an SVG file directly. It takes care of formatting the SVG structure (header, shapes, animations, and footer) and calls into the math logic defined in the Rosetta package to generate point data.This separation of concerns is deliberate and beneficial: the math logic doesn’t need to know anything about SVG, and the renderer doesn’t care how the coordinates were generated.Now let's talk about the body of the package... but not for long. We're keeping it brief because its core is essentially the SVG plumbing required to draw and animate the curves, so we'll skip the fine details. And for those who enjoy seeing how the sausage is made, I've made the fully commented source code available for you right here.The procedure Put_Path handles the creation of the SVG path. Its main job is to take an array of coordinates and write the corresponding command string to the d attribute of a <path> element. In SVG, this attribute defines the geometry of the shape. The code iterates over each coordinate, using M (moveto) for the first point and L (lineto) for all the others to draw the connecting lines.--  Puts coordinates to a single SVG path string ("d" attribute).
   procedure Put_Path (Stream : File_Type; Points : Coordinate_Array) is
   begin
      Put (Stream, "M "); -- Moves the pen without drawing.
      for J in Points'Range loop
         declare 
            Coord_Text : constant String := Coordinate'Image (Points (J));
         begin   
            Put (Stream, Coord_Text);
            if J < Points'Last then
               Put (Stream, " L "); --  Draws a line.
            end if;
         end;
      end loop;
   end Put_Path;AfterwordThis small project was an enjoyable and useful way to get back into Ada. It helped me reconnect with the language’s main strengths and refamiliarize myself with its tools and design. It was a great reminder of how fun, easy to learn, and remarkably modern Ada can be, especially for developers focused on building robust, maintainable, and efficient software.I hope this short walkthrough gives a good idea of that feeling, whether you're already into Ada or just starting to explore it.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[<template>: The Content Template element]]></title>
            <link>https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/template</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45106049</guid>
            <description><![CDATA[The <template> HTML element serves as a mechanism for holding HTML fragments, which can either be used later via JavaScript or generated immediately into shadow DOM.]]></description>
            <content:encoded><![CDATA[
            
            
    Attributes
    This element includes the global attributes.

shadowrootmode

Creates a shadow root for the parent element.
It is a declarative version of the Element.attachShadow() method and accepts the same enumerated values.

open

Exposes the internal shadow root DOM for JavaScript (recommended for most use cases).

closed

Hides the internal shadow root DOM from JavaScript.


Note:
The HTML parser creates a ShadowRoot object in the DOM for the first <template> in a node with this attribute set to an allowed value.
If the attribute is not set, or not set to an allowed value — or if a ShadowRoot has already been declaratively created in the same parent — then an HTMLTemplateElement is constructed.
A HTMLTemplateElement cannot subsequently be changed into a shadow root after parsing, for example, by setting HTMLTemplateElement.shadowRootMode.
Note:
You may find the non-standard shadowroot attribute in older tutorials and examples that used to be supported in Chrome 90-110. This attribute has since been removed and replaced by the standard shadowrootmode attribute.

shadowrootclonable

Sets the value of the clonable property of a ShadowRoot created using this element to true.
If set, a clone of the shadow host (the parent element of this <template>) created with Node.cloneNode() or Document.importNode() will include a shadow root in the copy.

shadowrootdelegatesfocus

Sets the value of the delegatesFocus property of a ShadowRoot created using this element to true.
If this is set and a non-focusable element in the shadow tree is selected, then focus is delegated to the first focusable element in the tree.
The value defaults to false.

shadowrootserializable 
Experimental


Sets the value of the serializable property of a ShadowRoot created using this element to true.
If set, the shadow root may be serialized by calling the Element.getHTML() or ShadowRoot.getHTML() methods with the options.serializableShadowRoots parameter set true.
The value defaults to false.


  
    Usage notes
    This element has no permitted content, because everything nested inside it in the HTML source does not actually become the children of the <template> element. The Node.childNodes property of the <template> element is always empty, and you can only access said nested content via the special content property. However, if you call Node.appendChild() or similar methods on the <template> element, then you would be inserting children into the <template> element itself, which is a violation of its content model and does not actually update the DocumentFragment returned by the content property.
Due to the way the <template> element is parsed, all <html>, <head>, and <body> opening and closing tags inside the template are syntax errors and are ignored by the parser, so <template><head><title>Test</title></head></template> is the same as <template><title>Test</title></template>.
There are two main ways to use the <template> element.
  
    Template document fragment
    By default, the element's content is not rendered.
The corresponding HTMLTemplateElement interface includes a standard content property (without an equivalent content/markup attribute). This content property is read-only and holds a DocumentFragment that contains the DOM subtree represented by the template.
This fragment can be cloned via the cloneNode method and inserted into the DOM.
Be careful when using the content property because the returned DocumentFragment can exhibit unexpected behavior.
For more details, see the Avoiding DocumentFragment pitfalls section below.
  
    Declarative Shadow DOM
    If the <template> element contains the shadowrootmode attribute with a value of either open or closed, the HTML parser will immediately generate a shadow DOM. The element is replaced in the DOM by its content wrapped in a ShadowRoot, which is attached to the parent element.
This is the declarative equivalent of calling Element.attachShadow() to attach a shadow root to an element.
If the element has any other value for shadowrootmode, or does not have the shadowrootmode attribute, the parser generates a HTMLTemplateElement.
Similarly, if there are multiple declarative shadow roots, only the first one is replaced by a ShadowRoot — subsequent instances are parsed as HTMLTemplateElement objects.
  
    Examples
    
  
    Generating table rows
    First we start with the HTML portion of the example.
<table id="producttable">
  <thead>
    <tr>
      <td>UPC_Code</td>
      <td>Product_Name</td>
    </tr>
  </thead>
  <tbody>
    <!-- existing data could optionally be included here -->
  </tbody>
</table>

<template id="productrow">
  <tr>
    <td class="record"></td>
    <td></td>
  </tr>
</template>

First, we have a table into which we will later insert content using JavaScript code. Then comes the template, which describes the structure of an HTML fragment representing a single table row.
Now that the table has been created and the template defined, we use JavaScript to insert rows into the table, with each row being constructed using the template as its basis.
// Test to see if the browser supports the HTML template element by checking
// for the presence of the template element's content attribute.
if ("content" in document.createElement("template")) {
  // Instantiate the table with the existing HTML tbody
  // and the row with the template
  const tbody = document.querySelector("tbody");
  const template = document.querySelector("#productrow");

  // Clone the new row and insert it into the table
  const clone = template.content.cloneNode(true);
  let td = clone.querySelectorAll("td");
  td[0].textContent = "1235646565";
  td[1].textContent = "Stuff";

  tbody.appendChild(clone);

  // Clone the new row and insert it into the table
  const clone2 = template.content.cloneNode(true);
  td = clone2.querySelectorAll("td");
  td[0].textContent = "0384928528";
  td[1].textContent = "Acme Kidney Beans 2";

  tbody.appendChild(clone2);
} else {
  // Find another way to add the rows to the table because
  // the HTML template element is not supported.
}

The result is the original HTML table, with two new rows appended to it via JavaScript:
table {
  background: black;
}
table td {
  background: white;
}


  
    Implementing a declarative shadow DOM
    In this example, a hidden support warning is included at the beginning of the markup. This warning is later set to be displayed via JavaScript if the browser doesn't support the shadowrootmode attribute. Next, there are two <article> elements, each containing nested <style> elements with different behaviors. The first <style> element is global to the whole document. The second one is scoped to the shadow root generated in place of the <template> element because of the presence of the shadowrootmode attribute.
<p hidden>
  ⛔ Your browser doesn't support <code>shadowrootmode</code> attribute yet.
</p>
<article>
  <style>
    p {
      padding: 8px;
      background-color: wheat;
    }
  </style>
  <p>I'm in the DOM.</p>
</article>
<article>
  <template shadowrootmode="open">
    <style>
      p {
        padding: 8px;
        background-color: plum;
      }
    </style>
    <p>I'm in the shadow DOM.</p>
  </template>
</article>

const isShadowRootModeSupported = Object.hasOwn(
  HTMLTemplateElement.prototype,
  "shadowRootMode",
);

document
  .querySelector("p[hidden]")
  .toggleAttribute("hidden", isShadowRootModeSupported);


  
    Declarative Shadow DOM with delegated focus
    This example demonstrates how shadowrootdelegatesfocus is applied to a shadow root that is created declaratively, and the effect this has on focus.
The code first declares a shadow root inside a <div> element, using the <template> element with the shadowrootmode attribute.
This displays both a non-focusable <div> containing text and a focusable <input> element.
It also uses CSS to style elements with :focus to blue, and to set the normal styling of the host element.
<div>
  <template shadowrootmode="open">
    <style>
      :host {
        display: block;
        border: 1px dotted black;
        padding: 10px;
        margin: 10px;
      }
      :focus {
        outline: 2px solid blue;
      }
    </style>
    <div>Clickable Shadow DOM text</div>
    <input type="text" placeholder="Input inside Shadow DOM" />
  </template>
</div>

The second code block is identical except that it sets the shadowrootdelegatesfocus attribute, which delegates focus to the first focusable element in the tree if a non-focusable element in the tree is selected.
<div>
  <template shadowrootmode="open" shadowrootdelegatesfocus>
    <style>
      :host {
        display: block;
        border: 1px dotted black;
        padding: 10px;
        margin: 10px;
      }
      :focus {
        outline: 2px solid blue;
      }
    </style>
    <div>Clickable Shadow DOM text</div>
    <input type="text" placeholder="Input inside Shadow DOM" />
  </template>
</div>

Last of all we use the following CSS to apply a red border to the parent <div> element when it has focus.
div:focus {
  border: 2px solid red;
}

The results are shown below.
When the HTML is first rendered, the elements have no styling, as shown in the first image.
For the shadow root that does not have shadowrootdelegatesfocus set you can click anywhere except the <input> and the focus does not change (if you select the <input> element it will look like the second image).

For the shadow root with shadowrootdelegatesfocus set, clicking on the text (which is non-focusable) selects the <input> element, as this is the first focusable element in the tree.
This also focuses the parent element as shown below.

  
    Avoiding DocumentFragment pitfalls
    When a DocumentFragment value is passed, Node.appendChild and similar methods move only the child nodes of that value into the target node. Therefore, it is usually preferable to attach event handlers to the children of a DocumentFragment, rather than to the DocumentFragment itself.
Consider the following HTML and JavaScript:
  
    HTML
    <div id="container"></div>

<template id="template">
  <div>Click me</div>
</template>

  
    JavaScript
    const container = document.getElementById("container");
const template = document.getElementById("template");

function clickHandler(event) {
  event.target.append(" — Clicked this div");
}

const firstClone = template.content.cloneNode(true);
firstClone.addEventListener("click", clickHandler);
container.appendChild(firstClone);

const secondClone = template.content.cloneNode(true);
secondClone.children[0].addEventListener("click", clickHandler);
container.appendChild(secondClone);

  
    Result
    Since firstClone is a DocumentFragment, only its children are added to container when appendChild is called; the event handlers of firstClone are not copied. In contrast, because an event handler is added to the first child node of secondClone, the event handler is copied when appendChild is called, and clicking on it works as one would expect.

  
    Technical summary
    
  
    
      
        Content categories
      
      
        Metadata content,
        flow content,
        phrasing content,
        script-supporting element
      
    
    
      Permitted content
      Nothing (see Usage notes)
    
    
      Tag omission
      None, both the starting and ending tag are mandatory.
    
    
      Permitted parents
      
        Any element that accepts
        metadata content,
        phrasing content, or
        script-supporting elements. Also allowed as a child of a <colgroup>
        element that does not have a
        span attribute.
      
    
    
      Implicit ARIA role
      
        No corresponding role
      
    
    
      Permitted ARIA roles
      No role permitted
    
    
      DOM interface
      HTMLTemplateElement
    
  

  
    Specifications
    
    
      
        Specification
      
    
    
      
              HTML# the-template-element
            
    
  
  
    Browser compatibility
    
  
    See also
    
part and exportparts HTML attributes
<slot> HTML element
:has-slotted, :host, :host(), and :host-context() CSS pseudo-classes
::part and ::slotted CSS pseudo-elements
ShadowRoot interface
Using templates and slots
CSS scoping module
Declarative Shadow DOM (with html) in Using Shadow DOM
Declarative shadow DOM on web.dev (2023)

   
      
    
          ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA['World Models,' an old idea in AI, mount a comeback]]></title>
            <link>https://www.quantamagazine.org/world-models-an-old-idea-in-ai-mount-a-comeback-20250902/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45105710</guid>
            <description><![CDATA[You’re carrying around in your head a model of how the world works. Will AI systems need to do the same?]]></description>
            <content:encoded><![CDATA[
    The latest ambition of artificial intelligence research — particularly within the labs seeking “artificial general intelligence,” or AGI — is something called a world model: a representation of the environment that an AI carries around inside itself like a computational snow globe. The AI system can use this simplified representation to evaluate predictions and decisions before applying them to its real-world tasks. The deep learning luminaries Yann LeCun (of Meta), Demis Hassabis (of Google DeepMind) and Yoshua Bengio (of Mila, the Quebec Artificial Intelligence Institute) all believe world models are essential for building AI systems that are truly smart, scientific and safe. 
The fields of psychology, robotics and machine learning have each been using some version of the concept for decades. You likely have a world model running inside your skull right now — it’s how you know not to step in front of a moving train without needing to run the experiment first. 
So does this mean that AI researchers have finally found a core concept whose meaning everyone can agree upon? As a famous physicist once wrote: Surely you’re joking. A world model may sound straightforward — but as usual, no one can agree on the details. What gets represented in the model, and to what level of fidelity? Is it innate or learned, or some combination of both? And how do you detect that it’s even there at all?

It helps to know where the whole idea started. In 1943, a dozen years before the term “artificial intelligence” was coined, a 29-year-old Scottish psychologist named Kenneth Craik published an influential monograph in which he mused that “if the organism carries a ‘small-scale model’ of external reality … within its head, it is able to try out various alternatives, conclude which is the best of them … and in every way to react in a much fuller, safer, and more competent manner.” Craik’s notion of a mental model or simulation presaged the “cognitive revolution” that transformed psychology in the 1950s and still rules the cognitive sciences today. What’s more, it directly linked cognition with computation: Craik considered the “power to parallel or model external events” to be “the fundamental feature” of both “neural machinery” and “calculating machines.”
The nascent field of artificial intelligence eagerly adopted the world-modeling approach. In the late 1960s, an AI system called SHRDLU wowed observers by using a rudimentary “block world” to answer commonsense questions about tabletop objects, like “Can a pyramid support a block?” But these handcrafted models couldn’t scale up to handle the complexity of more realistic settings. By the late 1980s, the AI and robotics pioneer Rodney Brooks had given up on world models completely, famously asserting that “the world is its own best model” and “explicit representations … simply get in the way.”
It took the rise of machine learning, especially deep learning based on artificial neural networks, to breathe life back into Craik’s brainchild. Instead of relying on brittle hand-coded rules, deep neural networks could build up internal approximations of their training environments through trial and error and then use them to accomplish narrowly specified tasks, such as driving a virtual race car. In the past few years, as the large language models behind chatbots like ChatGPT began to demonstrate emergent capabilities that they weren’t explicitly trained for — like inferring movie titles from strings of emojis, or playing the board game Othello — world models provided a convenient explanation for the mystery. To prominent AI experts such as Geoffrey Hinton, Ilya Sutskever and Chris Olah, it was obvious: Buried somewhere deep within an LLM’s thicket of virtual neurons must lie “a small-scale model of external reality,” just as Craik imagined.

The truth, at least so far as we know, is less impressive. Instead of world models, today’s generative AIs appear to learn “bags of heuristics”: scores of disconnected rules of thumb that can approximate responses to specific scenarios, but don’t cohere into a consistent whole. (Some may actually contradict each other.) It’s a lot like the parable of the blind men and the elephant, where each man only touches one part of the animal at a time and fails to apprehend its full form. One man feels the trunk and assumes the entire elephant is snakelike; another touches a leg and guesses it’s more like a tree; a third grasps the elephant’s tail and says it’s a rope. When researchers attempt to recover evidence of a world model from within an LLM — for example, a coherent computational representation of an Othello game board — they’re looking for the whole elephant. What they find instead is a bit of snake here, a chunk of tree there, and some rope.
Of course, such heuristics are hardly worthless. LLMs can encode untold sackfuls of them within their trillions of parameters — and as the old saw goes, quantity has a quality all its own. That’s what makes it possible to train a language model to generate nearly perfect directions between any two points in Manhattan without learning a coherent world model of the entire street network in the process, as researchers from Harvard University and the Massachusetts Institute of Technology recently discovered. 
So if bits of snake, tree and rope can do the job, why bother with the elephant? In a word, robustness: When the researchers threw their Manhattan-navigating LLM a mild curveball by randomly blocking 1% of the streets, its performance cratered. If the AI had simply encoded a street map whose details were consistent — instead of an immensely complicated, corner-by-corner patchwork of conflicting best guesses — it could have easily rerouted around the obstructions.
        
        
Given the benefits that even simple world models can confer, it’s easy to understand why every large AI lab is desperate to develop them — and why academic researchers are increasingly interested in scrutinizing them, too. Robust and verifiable world models could uncover, if not the El Dorado of AGI, then at least a scientifically plausible tool for extinguishing AI hallucinations, enabling reliable reasoning, and increasing the interpretability of AI systems.
That’s the “what” and “why” of world models. The “how,” though, is still anyone’s guess. Google DeepMind and OpenAI are betting that with enough “multimodal” training data — like video, 3D simulations, and other input beyond mere text — a world model will spontaneously congeal within a neural network’s statistical soup. Meta’s LeCun, meanwhile, thinks that an entirely new (and non-generative) AI architecture will provide the necessary scaffolding. In the quest to build these computational snow globes, no one has a crystal ball — but the prize, for once, may just be worth the hype.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Launch HN: Datafruit (YC S25) – AI for DevOps]]></title>
            <link>https://news.ycombinator.com/item?id=45104974</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45104974</guid>
            <description><![CDATA[Hey HN! We’re Abhi, Venkat, Tom, and Nick and we are building Datafruit (https://datafruit.dev/), an AI DevOps agent. We’re like Devin for DevOps. You can ask Datafruit to check your cloud spend, look for loose security policies, make changes to your IaC, and it can reason across your deployment standards, design docs, and DevOps practices.]]></description>
            <content:encoded><![CDATA[Launch HN: Datafruit (YC S25) – AI for DevOps55 points by nickpapciak 14 hours ago  | hide | past | favorite | 35 commentsHey HN! We’re Abhi, Venkat, Tom, and Nick and we are building Datafruit (https://datafruit.dev/), an AI DevOps agent. We’re like Devin for DevOps. You can ask Datafruit to check your cloud spend, look for loose security policies, make changes to your IaC, and it can reason across your deployment standards, design docs, and DevOps practices.Demo video: https://www.youtube.com/watch?v=2FitSggI7tg.Right now, we have two main methods to interact with Datafruit:(1) automated infrastructure audits— agents periodically scan your environment to find cost optimization opportunities, detect infrastructure drift, and validate your infra against compliance requirements.(2) chat interface (available as a web UI and through slack) — ask the agent questions for real-time insights, or assign tasks directly, such as investigating spend anomalies, reviewing security posture, or applying changes to IaC resources.Working at FAANG and various high-growth startups, we realized that infra work requires an enormous amount of context, often more than traditional software engineering. The business decisions, codebase, and cloud itself are all extremely important in any task that has been assigned. To maximize the success of the agents, we do a fair amount of context engineering. Not hallucinating is super important!One thing which has worked incredibly well for us is a multi-agent system where we have specialized sub-agents with access to specific tool calls and documentation for their specialty. Agents choose to “handoff” to each other when they feel like another agent would be more specialized for the task. However, all agents share the same context (https://cognition.ai/blog/dont-build-multi-agents). We’re pretty happy with this approach, and believe it could work in other disciplines which require high amounts of specialized expertise.Infrastructure is probably the most mission-critical part of any software organization, and needs extremely heavy guardrails to keep it safe. Language models are not yet at the point where they can be trusted to make changes (we’ve talked to a couple of startups where the Claude Code + AWS CLI combo has taken their infra down). Right now, Datafruit receives read-only access to your infrastructure and can only make changes through pull requests to your IaC repositories. The agent also operates in a sandboxed virtual environment so that it could not write cloud CLI commands if it wanted to!Where LLMs can add significant value is in reducing the constant operational inefficiencies that eat up cloud spend and delay deadlines—the small-but-urgent ops work. Once Datafruit indexes your environment, you can ask it to do things like:  "Grant @User write access to analytics S3 bucket for 24 hours"
    -> Creates temporary IAM role, sends least-privilege credentials, auto-revokes tomorrow

  "Find where this secret is used so I can rotate it without downtime"
    -> Discovers all instances of your secret, including old cron-jobs you might not know about, so you can safely rotate your keys


  "Why did database costs spike yesterday?"
    -> Identifies expensive queries, shows optimization options, implements fixes


We charge a straightforward subscription model for a managed version, but we also offer a bring-your-own-cloud model. All of Datafruit can be deployed on Kubernetes using Helm charts for enterprise customers where data can’t leave your VPC.
For the time being, we’re installing the product ourselves on customers' clouds. It doesn’t exist in a self-serve form yet. We’ll get there eventually, but in the meantime if you’re interested we’d love for you guys to email us at founders@datafruit.dev.We would love to hear your thoughts! If you work with cloud infra, we are especially interested in learning about what kinds of work you do which you wish could be offloaded onto an agent.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Static sites enable a good time travel experience]]></title>
            <link>https://hamatti.org/posts/static-sites-enable-a-good-time-travel-experience/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45104303</guid>
            <description><![CDATA[A static site with version control history enables me to travel into any point in the project’s past and serve the site as it was back in the day.]]></description>
            <content:encoded><![CDATA[
        
        
        
          Aug 30th, 2025
          by Juha-Matti Santala
          
        
	
          
        
	

        
          
        

        
          

  Varun wrote about
  gamifying blogging and personal website maintenance
  which reminded me of the time when
  I awarded myself some badges for blogging.



  I mentioned this to Varun who asked if I had any screenshots of what it looked
  like on my website. My initial answer was “no”, then I looked at Wayback
  Machine but there were not pictures of the badges.



  Then, a bit later it hit me. I don’t need any archived screenshots: my website
  is built with Eleventy and it's static so I can check out a git commit from
  the time I had those badges up, fire up Eleventy and see the website — as it
  was in the spring of 2021.


  That’s a beauty of a static site generator combined with my workflow of
  fetching posts from CMS before build time so each commit contains a full
  snapshot of the website.



  Comparing this to a website that uses a database for posts (like WordPress) or
  a flow where posts from CMS are not stored in version control but rather
  fetched at build time only, my solution makes time travel to (almost) any
  given moment in time a two-command operation (git checkout
  with the right commit hash and
  @11ty/eleventy serve to serve a dev
  server). I say almost because back in the day I wasn’t quite as diligent in
  commiting every change as I was deploying manually and not through version
  control automation.



  A year ago, inspired by Alex Chan’s blog post
  Taking regular screenshots of my website
  I set up a GitHub Action that takes a snapshot of my front page once a month
  to keep a record. At the time, I felt bit sad that I hadn’t started it before.
  However, now that I realised how easy it is for me to go back in time thanks
  to Eleventy and git, I’m not so worried anymore. Maybe I should do a collage
  of changes on my design one day by going through my project history.


One more major point for static site generators!



            
          If something above resonated with you, let's start a discussion about it! Email me at juhamattisantala at gmail dot com and share your thoughts. In 2025, I want to have more deeper discussions with people from around the world and I'd love if you'd be part of that.

        

        

        

        
      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The staff ate it later]]></title>
            <link>https://en.wikipedia.org/wiki/The_staff_ate_it_later</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45104289</guid>
            <description><![CDATA[From Wikipedia, the free encyclopedia]]></description>
            <content:encoded><![CDATA[
							

						From Wikipedia, the free encyclopedia
					


"The staff ate it later" as shown on screen
"The staff ate it later" (Japanese: この後、スタッフが美味しくいただきました, romanized: Kono ato, sutaffu ga oishiku itadakimashita) is a caption shown on screen when food appears in a Japanese TV program to indicate that it was not thrown away after filming (it is generally not socially acceptable to discard food in Japan). Some[who?] question the authenticity of this statement or believe the caption lowers the quality of TV programs.



It is thought TV stations first began showing the caption to protect themselves against complaints from viewers who disliked food being handled without consideration in TV variety shows.[1] It is uncertain when this note was first used, but TV producer Kenji Suga [ja] stated viewers complained about the waste of food when a performance using small watermelons was broadcast in Downtown no Gaki no Tsukai ya Arahende!! on Nippon TV. The TV station then showed this note on screen the following year in response.[2]


There are various claims as to whether or not staff actually eat the food that appears in the programs.[1][3][4]


According to AOL News in 2014, the crew on one information program claimed: "It's sometimes impossible for the reporter to eat all the food provided by the restaurant. The reporter is told not to eat it all, but the crew will eat the rest out of consideration and a feeling of obligation towards the restaurant."[4]
Food comic artist Raswell Hosoki [ja] claimed in Meshizanmai Furusatonoaji (Meshizanmai Taste of Hometown) that the note is true. Eriko Miyazaki [ja], a reporter and TV personality for food shows, also claimed the note is true and stated: "The crew eats the rest of the food, at least at the shows I appear in."[5]
In January 2018, Miwa Asao, former professional beach volleyball player and TV personality, posted photos on her blog of staff eating food after recording "Saturday Night! Otona na TV [ja]". She wrote: "This is an on-site photo. The staff ate the rest of the food."[6]


Hitoshi Matsumoto, a comedian and TV host, was asked by sociologist Noritoshi Furuichi about this note in 2014 during the "Wide na Show [ja]" (Fuji Television). He said: "To be honest, I've never seen the crew eat the food. But that just means I haven't seen it. They might've eaten it."[7]
Takeshi Kitano (also known as Beat Takeshi), a Japanese comedian, actor, and filmmaker, referred to an instance where cake was smeared on the floor and said in his book Bakaron: "Liars. Who's going to enjoy cake they splattered all over the floor?"[3] Commentator Tsunehira Furuya also stated that the food featured in the show is not eaten by the staff later and is instead simply thrown into garbage bags.[1]


Commentator Tetsuya Uetaki has commented on displaying the note, saying: "Producers have become more aware as viewers have become more critical after issues such as the Aru Aru Mondai (a natto shortage caused by a program claiming eating natto would make people lose weight), and it's fine as one method for dealing with that." However, Uetaki went on to say: "This shifts responsibility onto the viewers. We can't let it end as simply an empty concession. I want to see variety shows strive to properly handle information and properly put the show together, from the moment they start building it."[8]
Broadcast writer Sotani [ja] commented on the fact that production teams have become more sensitive to this in programs and have begun displaying such notes as an attempt to preempt criticism. He claims this sort of extreme self regulation risks leading to a decline.[9] TV producer Kenji Suga [ja] claims it is necessary for programs to be disconnected from real life and society, to be "dumb and idiotic" to produce laughs.[2]
Columnist Takashi Matsuo argues that adults, not TV shows, should teach children the ethics surrounding the importance of food. He also argues that if a parent is uncomfortable with what a comedian expresses on TV, the right course of action would be to change the channel or turn off the TV, not send a complaint to the TV station.[10] Matsuo also points out the inconsistency that "the staff ate it later" caption is not displayed when large numbers of tomatoes are thrown at the festival of Tomatina in Spain or when athletes spray each other with champagne in celebration of a victory.[10]



^ a b c Furuya, Tsunehira (2017). 「道徳自警団」がニッポンを滅ぼす. East Shinsho: East Press. pp. 35–36. ISBN 978-4-7816-5095-1.

^ a b Wake, Shinya (7 February 2016). "グローブ176号 笑いの力 インタビュー 笑わせるってむずかしい プロデューサー・菅賢治". Asahi Shimbun. p. 6.

^ a b Kitano, Takeshi (2017). バカ論. Shinchosha. pp. 36–37. ISBN 978-4-10-610737-5.

^ a b "テレビ番組の食リポ、完食しているのか？「この後スタッフが美味しく...」は本当か" [Is the staff really eating the rest of the dishes used in the TV show?]. AOL News. 16 April 2014. Archived from the original on 16 September 2014. Retrieved 9 January 2020.

^ Raswell Hosoki, Mayumi Kato, Takako Aonuma, Sachiko Orihara, Junko Kubota, Eiko Kasai, Riyo Mizuki, Takotsumuri, Usami☆, and Somei Yoshino, (2017) Meshizanmai Hurusatonoaji, Bunkasha, BUNKASHA COMICS, ISBN 978-4-8211-3416-8

^ "バラエティの「この後スタッフが美味しく頂きました」　 予防線を張るテロップどこまで必要？" [Variety's "The staff enjoyed the food afterwards": How much precautionary captioning is necessary?]. Oricon News. 13 February 2018. Archived from the original on 18 September 2024. Retrieved 26 December 2020.

^ "松本人志 バラエティならでの葛藤を吐露「食べ物も笑いの1つの小道具として認めてもらえたら」" [Hitoshi Matsumoto, revealing his struggles with variety: "If people would accept food as a prop for laughter..."]. Nagai Times. 28 October 2014. Archived from the original on 2 December 2024. Retrieved 26 December 2020.

^ "近ごろよく見る『お断りテロップ』『視聴者への配慮』か苦情抗議"先逃れ"か ないよりましだが…『番組精査こそ肝心』識者指摘". Chunichi Shimbun. 4 July 2007. p. 15.

^ "1番ものがたり 人物編 売れっ子放送作家 そーたに氏「見せたくない」で金字塔 PTAの土俵に乗らず". Hokkoku Shimbun. 23 February 2012. p. 36.

^ a b Matsuo, Takashi (17 September 2017). "テレビの過剰なテロップ　苦情逃れの保身が目的？" [Is over-annotation on television a self-protection to escape complaints?]. Mainichi Shimbun Digital. Retrieved 26 December 2020.[dead link]







]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Little Book of Linear Algebra]]></title>
            <link>https://github.com/the-litte-book-of/linear-algebra</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45103436</guid>
            <description><![CDATA[There is hardly any theory which is more elementary than linear algebra, in spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calcul...]]></description>
            <content:encoded><![CDATA[The Little Book of Linear Algebra
A concise, beginner-friendly introduction to the core ideas of linear algebra.
Formats

Download PDF – print-ready version
Download EPUB – e-reader friendly
View LaTeX – Latex source

Chapter 1. Vectors
1.1 Scalars and Vectors
A scalar is a single numerical quantity, most often taken from the real numbers, denoted by $\mathbb{R}$. Scalars are
the fundamental building blocks of arithmetic: they can be added, subtracted, multiplied, and, except in the case of
zero, divided. In linear algebra, scalars play the role of coefficients, scaling factors, and entries of larger
structures such as vectors and matrices. They provide the weights by which more complex objects are measured and
combined. A vector is an ordered collection of scalars, arranged either in a row or a column. When the scalars are real
numbers, the vector is said to belong to real $n$-dimensional space, written
$$
\mathbb{R}^n = { (x_1, x_2, \dots, x_n) \mid x_i \in \mathbb{R} }.
$$
An element of $\mathbb{R}^n$ is called a vector of dimension $n$ or an n-vector. The number $n$ is called the
dimension of the vector space. Thus $\mathbb{R}^2$ is the space of all ordered pairs of real numbers, $\mathbb{R}^3$ the
space of all ordered triples, and so on.
Example 1.1.1.

A 2-dimensional vector: $(3, -1) \in \mathbb{R}^2$.
A 3-dimensional vector: $(2, 0, 5) \in \mathbb{R}^3$.
A 1-dimensional vector: $(7) \in \mathbb{R}^1$, which corresponds to the scalar $7$ itself.

Vectors are often written vertically in column form, which emphasizes their role in matrix multiplication:
$$
\mathbf{v} = \begin{bmatrix} 2 \ 0 \ 5 \end{bmatrix} \in \mathbb{R}^3.
$$
The vertical layout makes the structure clearer when we consider linear combinations or multiply matrices by vectors.
Geometric Interpretation
In $\mathbb{R}^2$, a vector $(x_1, x_2)$ can be visualized as an arrow starting at the origin $(0,0)$ and ending at the
point $(x_1, x_2)$. Its length corresponds to the distance from the origin, and its orientation gives a direction in the
plane. In $\mathbb{R}^3$, the same picture extends into three dimensions: a vector is an arrow from the origin
to $(x_1, x_2, x_3)$. Beyond three dimensions, direct visualization is no longer possible, but the algebraic rules of
vectors remain identical. Even though we cannot draw a vector in $\mathbb{R}^{10}$, it behaves under addition, scaling,
and transformation exactly as a 2- or 3-dimensional vector does. This abstract point of view is what allows linear
algebra to apply to data science, physics, and machine learning, where data often lives in very high-dimensional spaces.
Thus a vector may be regarded in three complementary ways:

As a point in space, described by its coordinates.
As a displacement or arrow, described by a direction and a length.
As an abstract element of a vector space, whose properties follow algebraic rules independent of geometry.

Notation

Vectors are written in boldface lowercase letters: $\mathbf{v}, \mathbf{w}, \mathbf{x}$.
The i-th entry of a vector $\mathbf{v}$ is written $v_i$, where indices begin at 1.
The set of all n-dimensional vectors over $\mathbb{R}$ is denoted $\mathbb{R}^n$.
Column vectors will be the default form unless otherwise stated.

Why begin here?
Scalars and vectors form the atoms of linear algebra. Every structure we will build-vector spaces, linear
transformations, matrices, eigenvalues-relies on the basic notions of number and ordered collection of numbers. Once
vectors are understood, we can define operations such as addition and scalar multiplication, then generalize to
subspaces, bases, and coordinate systems. Eventually, this framework grows into the full theory of linear algebra, with
powerful applications to geometry, computation, and data.
Exercises 1.1

Write three different vectors in $\mathbb{R}^2$ and sketch them as arrows from the origin. Identify their coordinates
explicitly.
Give an example of a vector in $\mathbb{R}^4$. Can you visualize it directly? Explain why high-dimensional
visualization is challenging.
Let $\mathbf{v} = (4, -3, 2)$. Write $\mathbf{v}$ in column form and state $v_1, v_2, v_3$.
In what sense is the set $\mathbb{R}^1$ both a line and a vector space? Illustrate with examples.
Consider the vector $\mathbf{u} = (1,1,\dots,1) \in \mathbb{R}^n$. What is special about this vector when $n$ is
large? What might it represent in applications?

1.2 Vector Addition and Scalar Multiplication
Vectors in linear algebra are not static objects; their power comes from the operations we can perform on them. Two
fundamental operations define the structure of vector spaces: addition and scalar multiplication. These operations
satisfy simple but far-reaching rules that underpin the entire subject.
Vector Addition
Given two vectors of the same dimension, their sum is obtained by adding corresponding entries. Formally, if
$$
\mathbf{u} = (u_1, u_2, \dots, u_n), \quad
\mathbf{v} = (v_1, v_2, \dots, v_n),
$$
then their sum is
$$
\mathbf{u} + \mathbf{v} = (u_1+v_1, u_2+v_2, \dots, u_n+v_n).
$$
Example 1.2.1.
Let $\mathbf{u} = (2, -1, 3)$ and $\mathbf{v} = (4, 0, -5)$. Then
$$
\mathbf{u} + \mathbf{v} = (2+4, -1+0, 3+(-5)) = (6, -1, -2).
$$
Geometrically, vector addition corresponds to the parallelogram rule. If we draw both vectors as arrows from the
origin, then placing the tail of one vector at the head of the other produces the sum. The diagonal of the parallelogram
they form represents the resulting vector.
Scalar Multiplication
Multiplying a vector by a scalar stretches or shrinks the vector while preserving its direction, unless the scalar is
negative, in which case the vector is also reversed. If $c \in \mathbb{R}$ and
$$
\mathbf{v} = (v_1, v_2, \dots, v_n),
$$
then
$$
c \mathbf{v} = (c v_1, c v_2, \dots, c v_n).
$$
Example 1.2.2.
Let $\mathbf{v} = (3, -2)$ and $c = -2$. Then
$$
c\mathbf{v} = -2(3, -2) = (-6, 4).
$$
This corresponds to flipping the vector through the origin and doubling its length.
Linear Combinations
The interaction of addition and scalar multiplication allows us to form linear combinations. A linear combination of
vectors $\mathbf{v}_1, \mathbf{v}_2, \dots, \mathbf{v}_k$ is any vector of the form
$$
c_1 \mathbf{v}_1 + c_2 \mathbf{v}_2 + \cdots + c_k \mathbf{v}_k, \quad c_i \in \mathbb{R}.
$$
Linear combinations are the mechanism by which we generate new vectors from existing ones. The span of a set of
vectors-the collection of all their linear combinations-will later lead us to the idea of a subspace.
Example 1.2.3.
Let $\mathbf{v}_1 = (1,0)$ and $\mathbf{v}_2 = (0,1)$. Then any vector $(a,b)\in\mathbb{R}^2$ can be expressed as
$$
a\mathbf{v}_1 + b\mathbf{v}_2.
$$
Thus $(1,0)$ and $(0,1)$ form the basic building blocks of the plane.
Notation

Addition: $\mathbf{u} + \mathbf{v}$ means component-wise addition.
Scalar multiplication: $c\mathbf{v}$ scales each entry of $\mathbf{v}$ by $c$.
Linear combination: a sum of the form $c_1 \mathbf{v}_1 + \cdots + c_k \mathbf{v}_k$.

Why this matters
Vector addition and scalar multiplication are the defining operations of linear algebra. They give structure to vector
spaces, allow us to describe geometric phenomena like translation and scaling, and provide the foundation for solving
systems of equations. Everything that follows-basis, dimension, transformations-builds on these simple but profound
rules.
Exercises 1.2

Compute $\mathbf{u} + \mathbf{v}$ where $\mathbf{u} = (1,2,3)$ and $\mathbf{v} = (4, -1, 0)$.
Find $3\mathbf{v}$ where $\mathbf{v} = (-2,5)$. Sketch both vectors to illustrate the scaling.
Show that $(5,7)$ can be written as a linear combination of $(1,0)$ and $(0,1)$.
Write $(4,4)$ as a linear combination of $(1,1)$ and $(1,-1)$.
Prove that if $\mathbf{u}, \mathbf{v} \in \mathbb{R}^n$,
then $(c+d)(\mathbf{u}+\mathbf{v}) = c\mathbf{u} + c\mathbf{v} + d\mathbf{u} + d\mathbf{v}$ for
scalars $c,d \in \mathbb{R}$.

1.3 Dot Product, Norms, and Angles
The dot product is the fundamental operation that links algebra and geometry in vector spaces. It allows us to measure
lengths, compute angles, and determine orthogonality. From this single definition flow the notions of norm and
angle, which give geometry to abstract vector spaces.
The Dot Product
For two vectors in $\mathbb{R}^n$, the dot product (also called the inner product) is defined by
$$
\mathbf{u} \cdot \mathbf{v} = u_1 v_1 + u_2 v_2 + \cdots + u_n v_n.
$$
Equivalently, in matrix notation:
$$
\mathbf{u} \cdot \mathbf{v} = \mathbf{u}^T \mathbf{v}.
$$
Example 1.3.1.
Let $\mathbf{u} = (2, -1, 3)$ and $\mathbf{v} = (4, 0, -2)$. Then
$$
\mathbf{u} \cdot \mathbf{v} = 2\cdot 4 + (-1)\cdot 0 + 3\cdot (-2) = 8 - 6 = 2.
$$
The dot product outputs a single scalar, not another vector.
Norms (Length of a Vector)
The Euclidean norm of a vector is the square root of its dot product with itself:
$$
|\mathbf{v}| = \sqrt{\mathbf{v} \cdot \mathbf{v}} = \sqrt{v_1^2 + v_2^2 + \cdots + v_n^2}.
$$
This generalizes the Pythagorean theorem to arbitrary dimensions.
Example 1.3.2.
For $\mathbf{v} = (3, 4)$,
$$
|\mathbf{v}| = \sqrt{3^2 + 4^2} = \sqrt{25} = 5.
$$
This is exactly the length of the vector as an arrow in the plane.
Angles Between Vectors
The dot product also encodes the angle between two vectors. For nonzero vectors $\mathbf{u}, \mathbf{v}$,
$$
\mathbf{u} \cdot \mathbf{v} = |\mathbf{u}| , |\mathbf{v}| \cos \theta,
$$
where $\theta$ is the angle between them. Thus,
$$
\cos \theta = \frac{\mathbf{u} \cdot \mathbf{v}}{|\mathbf{u}||\mathbf{v}|}.
$$
Example 1.3.3.
Let $\mathbf{u} = (1,0)$ and $\mathbf{v} = (0,1)$. Then
$$
\mathbf{u} \cdot \mathbf{v} = 0, \quad |\mathbf{u}| = 1, \quad |\mathbf{v}| = 1.
$$
Hence
$$
\cos \theta = \frac{0}{1\cdot 1} = 0 \quad \Rightarrow \quad \theta = \frac{\pi}{2}.
$$
The vectors are perpendicular.
Orthogonality
Two vectors are said to be orthogonal if their dot product is zero:
$$
\mathbf{u} \cdot \mathbf{v} = 0.
$$
Orthogonality generalizes the idea of perpendicularity from geometry to higher dimensions.
Notation

Dot product: $\mathbf{u} \cdot \mathbf{v}$.
Norm (length): $|\mathbf{v}|$.
Orthogonality: $\mathbf{u} \perp \mathbf{v}$ if $\mathbf{u} \cdot \mathbf{v} = 0$.

Why this matters
The dot product turns vector spaces into geometric objects: vectors gain lengths, angles, and notions of
perpendicularity. This foundation will later support the study of orthogonal projections, Gram–Schmidt
orthogonalization, eigenvectors, and least squares problems.
Exercises 1.3

Compute $\mathbf{u} \cdot \mathbf{v}$ for $\mathbf{u} = (1,2,3)$, $\mathbf{v} = (4,5,6)$.
Find the norm of $\mathbf{v} = (2, -2, 1)$.
Determine whether $\mathbf{u} = (1,1,0)$ and $\mathbf{v} = (1,-1,2)$ are orthogonal.
Let $\mathbf{u} = (3,4)$, $\mathbf{v} = (4,3)$. Compute the angle between them.
Prove that $|\mathbf{u} + \mathbf{v}|^2 = |\mathbf{u}|^2 + |\mathbf{v}|^2 + 2\mathbf{u}\cdot \mathbf{v}$. This
identity is the algebraic version of the Law of Cosines.

1.4 Orthogonality
Orthogonality captures the notion of perpendicularity in vector spaces. It is one of the most important geometric ideas
in linear algebra, allowing us to decompose vectors, define projections, and construct special bases with elegant
properties.
Definition
Two vectors $\mathbf{u}, \mathbf{v} \in \mathbb{R}^n$ are said to be orthogonal if their dot product is zero:
$$
\mathbf{u} \cdot \mathbf{v} = 0.
$$
This condition ensures that the angle between them is $\pi/2$ radians (90 degrees).
Example 1.4.1.
In $\mathbb{R}^2$, the vectors $(1,2)$ and $(2,-1)$ are orthogonal since
$$
(1,2) \cdot (2,-1) = 1\cdot 2 + 2\cdot (-1) = 0.
$$
Orthogonal Sets
A collection of vectors is called orthogonal if every distinct pair of vectors in the set is orthogonal. If, in
addition, each vector has norm 1, the set is called orthonormal.
Example 1.4.2.
In $\mathbb{R}^3$, the standard basis vectors
$$
\mathbf{e}_1 = (1,0,0), \quad \mathbf{e}_2 = (0,1,0), \quad \mathbf{e}_3 = (0,0,1)
$$
form an orthonormal set: each has length 1, and their dot products vanish when the indices differ.
Projections
Orthogonality makes possible the decomposition of a vector into two components: one parallel to another vector, and one
orthogonal to it. Given a nonzero vector $\mathbf{u}$ and any vector $\mathbf{v}$, the projection of $\mathbf{v}$
onto $\mathbf{u}$ is
$$
\text{proj}_{\mathbf{u}}(\mathbf{v}) = \frac{\mathbf{u} \cdot \mathbf{v}}{\mathbf{u} \cdot \mathbf{u}} \mathbf{u}.
$$
The difference
$$
\mathbf{v} - \text{proj}_{\mathbf{u}}(\mathbf{v})
$$
is orthogonal to $\mathbf{u}$. Thus every vector can be decomposed uniquely into a parallel and perpendicular part with
respect to another vector.
Example 1.4.3.
Let $\mathbf{u} = (1,0)$, $\mathbf{v} = (2,3)$. Then
$$
\text{proj}_{\mathbf{u}}(\mathbf{v}) = \frac{(1,0)\cdot(2,3)}{(1,0)\cdot(1,0)} (1,0)
= \frac{2}{1}(1,0) = (2,0).
$$
Thus
$$
\mathbf{v} = (2,3) = (2,0) + (0,3),
$$
where $(2,0)$ is parallel to $(1,0)$ and $(0,3)$ is orthogonal to it.
Orthogonal Decomposition
In general, if $\mathbf{u} \neq \mathbf{0}$ and $\mathbf{v} \in \mathbb{R}^n$, then
$$
\mathbf{v} = \text{proj}{\mathbf{u}}(\mathbf{v}) + \big(\mathbf{v} - \text{proj}{\mathbf{u}}(\mathbf{v})\big),
$$
where the first term is parallel to $\mathbf{u}$ and the second term is orthogonal. This decomposition underlies methods
such as least squares approximation and the Gram–Schmidt process.
Notation


$\mathbf{u} \perp \mathbf{v}$: vectors $\mathbf{u}$ and $\mathbf{v}$ are orthogonal.
An orthogonal set: vectors pairwise orthogonal.
An orthonormal set: pairwise orthogonal, each of norm 1.

Why this matters
Orthogonality gives structure to vector spaces. It provides a way to separate independent directions cleanly, simplify
computations, and minimize errors in approximations. Many powerful algorithms in numerical linear algebra and data
science (QR decomposition, least squares regression, PCA) rely on orthogonality.
Exercises 1.4

Verify that the vectors $(1,2,2)$ and $(2,0,-1)$ are orthogonal.
Find the projection of $(3,4)$ onto $(1,1)$.
Show that any two distinct standard basis vectors in $\mathbb{R}^n$ are orthogonal.
Decompose $(5,2)$ into components parallel and orthogonal to $(2,1)$.
Prove that if $\mathbf{u}, \mathbf{v}$ are orthogonal and nonzero,
then $(\mathbf{u}+\mathbf{v})\cdot(\mathbf{u}-\mathbf{v}) = 0$.

Chapter 2. Matrices
2.1 Definition and Notation
Matrices are the central objects of linear algebra, providing a compact way to represent and manipulate linear
transformations, systems of equations, and structured data. A matrix is a rectangular array of numbers arranged in rows
and columns.
Formal Definition
An $m \times n$ matrix is an array with $m$ rows and $n$ columns, written
$$
A =
\begin{bmatrix}
a_{11} & a_{12} & \cdots & a_{1n} \\
a_{21} & a_{22} & \cdots & a_{2n} \\
\vdots & \vdots & \ddots & \vdots \\
a_{m1} & a_{m2} & \cdots & a_{mn}
\end{bmatrix}.
$$
Each entry $a_{ij}$ is a scalar, located in the i-th row and j-th column. The size (or dimension) of the matrix is
denoted by $m \times n$.

If $m = n$, the matrix is square.
If $m = 1$, the matrix is a row vector.
If $n = 1$, the matrix is a column vector.

Thus, vectors are simply special cases of matrices.
Examples
Example 2.1.1. A $2 \times 3$ matrix:
$$
A = \begin{bmatrix}
1 & -2 & 4 \\
0 & 3 & 5
\end{bmatrix}.
$$
Here, $a_{12} = -2$, $a_{23} = 5$, and the matrix has 2 rows, 3 columns.
Example 2.1.2. A $3 \times 3$ square matrix:
$$
B = \begin{bmatrix}
2 & 0 & 1 \\
-1 & 3 & 4 \\
0 & 5 & -2
\end{bmatrix}.
$$
This will later serve as the representation of a linear transformation on $\mathbb{R}^3$.
Indexing and Notation

Matrices are denoted by uppercase bold letters: $A, B, C$.
Entries are written as $a_{ij}$, with the row index first, column index second.
The set of all real $m \times n$ matrices is denoted $\mathbb{R}^{m \times n}$.

Thus, a matrix is a function $A: {1,\dots,m} \times {1,\dots,n} \to \mathbb{R}$, assigning a scalar to each row-column
position.
Why this matters
Matrices generalize vectors and give us a language for describing linear operations systematically. They encode systems
of equations, rotations, projections, and transformations of data. With matrices, algebra and geometry come together: a
single compact object can represent both numerical data and functional rules.
Exercises 2.1

Write a $3 \times 2$ matrix of your choice and identify its entries $a_{ij}$.
Is every vector a matrix? Is every matrix a vector? Explain.
Which of the following are square
matrices: $A \in \mathbb{R}^{4\times4}$, $B \in \mathbb{R}^{3\times5}$, $C \in \mathbb{R}^{1\times1}$?
Let $D = \begin{bmatrix} 1 & 0 \ 0 & 1 \end{bmatrix}$. What kind of matrix is this?
Consider the matrix $E = \begin{bmatrix} a & b \ c & d \end{bmatrix}$. Express $e_{11}, e_{12}, e_{21}, e_{22}$
explicitly.

2.2 Matrix Addition and Multiplication
Once matrices are defined, the next step is to understand how they combine. Just as vectors gain meaning through
addition and scalar multiplication, matrices become powerful through two operations: addition and multiplication.
Matrix Addition
Two matrices of the same size are added by adding corresponding entries. If
$$
A = [a_{ij}] \in \mathbb{R}^{m \times n}, \quad
B = [b_{ij}] \in \mathbb{R}^{m \times n},
$$
then
$$
A + B = [a_{ij} + b_{ij}] \in \mathbb{R}^{m \times n}.
$$
Example 2.2.1.
Let
$$
A = \begin{bmatrix}
1 & 2 \\
3 & 4
\end{bmatrix}, \quad
B = \begin{bmatrix}
-1 & 0 \\
5 & 2
\end{bmatrix}.
$$
Then
$$
A + B = \begin{bmatrix}
1 + (-1) & 2 + 0 \
3 + 5 & 4 + 2
\end{bmatrix}
\begin{bmatrix}
0 & 2 \
8 & 6
\end{bmatrix}.
$$
Matrix addition is commutative ($A+B = B+A$) and associative ($(A+B)+C = A+(B+C)$). The zero matrix, with all entries 0,
acts as the additive identity.
Scalar Multiplication
For a scalar $c \in \mathbb{R}$ and a matrix $A = [[a_{ij}]$, we define
$$
cA = [c \cdot a_{ij}].
$$
This stretches or shrinks all entries of the matrix uniformly.
Example 2.2.2.
If
$$
A = \begin{bmatrix}
2 & -1 \\
0 & 3
\end{bmatrix}, \quad c = -2,
$$
then
$$
cA = \begin{bmatrix}
-4 & 2 \\
0 & -6
\end{bmatrix}.
$$
Matrix Multiplication
The defining operation of matrices is multiplication. If
$$
A \in \mathbb{R}^{m \times n}, \quad B \in \mathbb{R}^{n \times p},
$$
then their product is the $m \times p$ matrix
$$
AB = C = [c_{ij}], \quad c_{ij} = \sum_{k=1}^n a_{ik} b_{kj}.
$$
Thus, the entry in the $i$-th row and $j$-th column of $AB$ is the dot product of the $i$-th row of $A$ with the $j$-th
column of $B$.
Example 2.2.3.
Let
$$
A = \begin{bmatrix}
1 & 2 \\
0 & 3
\end{bmatrix}, \quad
B = \begin{bmatrix}
4 & -1 \\
2 & 5
\end{bmatrix}.
$$
Then
$$
AB = \begin{bmatrix}
1\cdot4 + 2\cdot2 & 1\cdot(-1) + 2\cdot5 \
0\cdot4 + 3\cdot2 & 0\cdot(-1) + 3\cdot5
\end{bmatrix}
\begin{bmatrix}
8 & 9 \
6 & 15
\end{bmatrix}.
$$
Notice that matrix multiplication is not commutative in general: $AB \neq BA$. Sometimes $BA$ may not even be defined if
dimensions do not align.
Geometric Meaning
Matrix multiplication corresponds to the composition of linear transformations. If $A$ transforms vectors
in $\mathbb{R}^n$ and $B$ transforms vectors in $\mathbb{R}^p$, then $AB$ represents applying $B$ first, then $A$. This
makes matrices the algebraic language of transformations.
Notation

Matrix sum: $A+B$.
Scalar multiple: $cA$.
Product: $AB$, defined only when the number of columns of $A$ equals the number of rows of $B$.

Why this matters
Matrix multiplication is the core mechanism of linear algebra: it encodes how transformations combine, how systems of
equations are solved, and how data flows in modern algorithms. Addition and scalar multiplication make matrices into a
vector space, while multiplication gives them an algebraic structure rich enough to model geometry, computation, and
networks.
Exercises 2.2

Compute $A+B$ for

$$
A = \begin{bmatrix} 2 & 3 \ -1 & 0 \end{bmatrix}, \quad
B = \begin{bmatrix} 4 & -2 \ 5 & 7 \end{bmatrix}.
$$

Find $3A$ where

$$
A = \begin{bmatrix} 1 & -4 \ 2 & 6 \end{bmatrix}.
$$

Multiply

$$
A = \begin{bmatrix} 1 & 0 & 2 \ -1 & 3 & 1 \end{bmatrix}, \quad
B = \begin{bmatrix} 2 & 1 \ 0 & -1 \ 3 & 4 \end{bmatrix}.
$$

Verify with an explicit example that $AB \neq BA$.
Prove that matrix multiplication is distributive: $A(B+C) = AB + AC$.

2.3 Transpose and Inverse
Two special operations on matrices-the transpose and the inverse-give rise to deep algebraic and geometric properties.
The transpose rearranges a matrix by flipping it across its main diagonal, while the inverse, when it exists, acts as
the undo operation for matrix multiplication.
The Transpose
The transpose of an $m \times n$ matrix $A = [a_{ij}]$ is the $n \times m$ matrix $A^T = [a_{ji}]$, obtained by swapping
rows and columns.
Formally,
$$
(A^T){ij} = a{ji}.
$$
Example 2.3.1.
If
$$
A = \begin{bmatrix}
1 & 4 & -2 \\
0 & 3 & 5
\end{bmatrix},
$$
then
$$
A^T = \begin{bmatrix}
1 & 0 \\
4 & 3 \\
-2 & 5
\end{bmatrix}.
$$
Properties of the Transpose.

$ (A^T)^T = A$.
$ (A+B)^T = A^T + B^T$.
$ (cA)^T = cA^T$, for scalar $c$.
$ (AB)^T = B^T A^T$.

The last rule is crucial: the order reverses.
The Inverse
A square matrix $A \in \mathbb{R}^{n \times n}$ is said to be invertible (or nonsingular) if there exists another
matrix $A^{-1}$ such that
$$
AA^{-1} = A^{-1}A = I_n,
$$
where $I_n$ is the $n \times n$ identity matrix. In this case, $A^{-1}$ is called the inverse of $A$.
Not every matrix is invertible. A necessary condition is that $\det(A) \neq 0$, a fact that will be developed in Chapter
6.
Example 2.3.2.
Let
$$
A = \begin{bmatrix}
1 & 2 \\
3 & 4
\end{bmatrix}.
$$
Its determinant is $\det(A) = (1)(4) - (2)(3) = -2 \neq 0$. The inverse is
$$
A^{-1} = \frac{1}{\det(A)} \begin{bmatrix}
4 & -2 \
-3 & 1
\end{bmatrix}
\begin{bmatrix}
-2 & 1 \
1.5 & -0.5
\end{bmatrix}.
$$
Verification:
$$
AA^{-1} = \begin{bmatrix}
1 & 2 \
3 & 4
\end{bmatrix}
\begin{bmatrix}
-2 & 1 \
1.5 & -0.5
\end{bmatrix}
\begin{bmatrix}
1 & 0 \
0 & 1
\end{bmatrix}.
$$
Geometric Meaning

The transpose corresponds to reflecting a linear transformation across the diagonal. For vectors, it switches between
row and column forms.
The inverse, when it exists, corresponds to reversing a linear transformation. For example, if $A$ scales and rotates
vectors, $A^{-1}$ rescales and rotates them back.

Notation

Transpose: $A^T$.
Inverse: $A^{-1}$, defined only for invertible square matrices.
Identity: $I_n$, acts as the multiplicative identity.

Why this matters
The transpose allows us to define symmetric and orthogonal matrices, central to geometry and numerical methods. The
inverse underlies the solution of linear systems, encoding the idea of undoing a transformation. Together, these
operations set the stage for determinants, eigenvalues, and orthogonalization.
Exercises 2.3

Compute the transpose of

$$
A = \begin{bmatrix} 2 & -1 & 3 \ 0 & 4 & 5 \end{bmatrix}.
$$

Verify that $(AB)^T = B^T A^T$ for

$$
A = \begin{bmatrix} 1 & 2 \ 0 & 1 \end{bmatrix}, \quad
B = \begin{bmatrix} 3 & 4 \ 5 & 6 \end{bmatrix}.
$$

Determine whether

$$
C = \begin{bmatrix} 2 & 1 \ 4 & 2 \end{bmatrix}
$$
is invertible. If so, find $C^{-1}$.

Find the inverse of

$$
D = \begin{bmatrix} 0 & 1 \ -1 & 0 \end{bmatrix},
$$
and explain its geometric action on vectors in the plane.

Prove that if $A$ is invertible, then so is $A^T$, and $(A^T)^{-1} = (A^{-1})^T$.

2.4 Special Matrices
Certain matrices occur so frequently in theory and applications that they are given special names. Recognizing their
properties allows us to simplify computations and understand the structure of linear transformations more clearly.
The Identity Matrix
The identity matrix $I_n$ is the $n \times n$ matrix with ones on the diagonal and zeros elsewhere:
$$
I_n = \begin{bmatrix}
1 & 0 & \cdots & 0 \\
0 & 1 & \cdots & 0 \\
\vdots & \vdots & \ddots & \vdots \\
0 & 0 & \cdots & 1
\end{bmatrix}.
$$
It acts as the multiplicative identity:
$$
AI_n = I_nA = A, \quad \text{for all } A \in \mathbb{R}^{n \times n}.
$$
Geometrically, $I_n$ represents the transformation that leaves every vector unchanged.
Diagonal Matrices
A diagonal matrix has all off-diagonal entries zero:
$$
D = \begin{bmatrix}
d_{11} & 0 & \cdots & 0 \\
0 & d_{22} & \cdots & 0 \\
\vdots & \vdots & \ddots & \vdots \\
0 & 0 & \cdots & d_{nn}
\end{bmatrix}.
$$
Multiplication by a diagonal matrix scales each coordinate independently:
$$
D\mathbf{x} = (d_{11}x_1, d_{22}x_2, \dots, d_{nn}x_n).
$$
Example 2.4.1.
Let
$$
D = \begin{bmatrix} 2 & 0 & 0 \ 0 & 3 & 0 \ 0 & 0 & -1 \end{bmatrix}, \quad
\mathbf{x} = \begin{bmatrix} 1 \ 4 \ -2 \end{bmatrix}.
$$
Then
$$
D\mathbf{x} = \begin{bmatrix} 2 \ 12 \ 2 \end{bmatrix}.
$$
Permutation Matrices
A permutation matrix is obtained by permuting the rows of the identity matrix. Multiplying a vector by a permutation
matrix reorders its coordinates.
Example 2.4.2.
Let
$$
P = \begin{bmatrix}
0 & 1 & 0 \\
1 & 0 & 0 \\
0 & 0 & 1
\end{bmatrix}.
$$
Then
$$
P\begin{bmatrix} a \ b \ c \end{bmatrix} =
\begin{bmatrix} b \ a \ c \end{bmatrix}.
$$
Thus, $P$ swaps the first two coordinates.
Permutation matrices are always invertible; their inverses are simply their transposes.
Symmetric and Skew-Symmetric Matrices
A matrix is symmetric if
$$
A^T = A,
$$
and skew-symmetric if
$$
A^T = -A.
$$
Symmetric matrices appear in quadratic forms and optimization, while skew-symmetric matrices describe rotations and
cross products in geometry.
Orthogonal Matrices
A square matrix $Q$ is orthogonal if
$$
Q^T Q = QQ^T = I.
$$
Equivalently, the rows (and columns) of $Q$ form an orthonormal set. Orthogonal matrices preserve lengths and angles;
they represent rotations and reflections.
Example 2.4.3.
The rotation matrix in the plane:
$$
R(\theta) = \begin{bmatrix}
\cos\theta & -\sin\theta \\
\sin\theta & \cos\theta
\end{bmatrix}
$$
is orthogonal, since
$$
R(\theta)^T R(\theta) = I_2.
$$
Why this matters
Special matrices serve as the building blocks of linear algebra. Identity matrices define the neutral element, diagonal
matrices simplify computations, permutation matrices reorder data, symmetric and orthogonal matrices describe
fundamental geometric structures. Much of modern applied mathematics reduces complex problems to operations involving
these simple forms.
Exercises 2.4

Show that the product of two diagonal matrices is diagonal, and compute an example.
Find the permutation matrix that cycles $(a,b,c)$ into $(b,c,a)$.
Prove that every permutation matrix is invertible and its inverse is its transpose.
Verify that

$$
Q = \begin{bmatrix} 0 & 1 \ -1 & 0 \end{bmatrix}
$$
is orthogonal. What geometric transformation does it represent?
5. Determine whether
$$
A = \begin{bmatrix} 2 & 3 \ 3 & 2 \end{bmatrix}, \quad
B = \begin{bmatrix} 0 & 5 \ -5 & 0 \end{bmatrix}
$$
are symmetric, skew-symmetric, or neither.
Chapter 3. Systems of Linear Equations
3.1 Linear Systems and Solutions
One of the central motivations for linear algebra is solving systems of linear equations. These systems arise naturally
in science, engineering, and data analysis whenever multiple constraints interact. Matrices provide a compact language
for expressing and solving them.
Linear Systems
A linear system consists of equations where each unknown appears only to the first power and with no products between
variables. A general system of $m$ equations in $n$ unknowns can be written as:
$$
\begin{aligned}
a_{11}x_1 + a_{12}x_2 + \cdots + a_{1n}x_n &= b_1, \\
a_{21}x_1 + a_{22}x_2 + \cdots + a_{2n}x_n &= b_2, \\
&\vdots \\
a_{m1}x_1 + a_{m2}x_2 + \cdots + a_{mn}x_n &= b_m.
\end{aligned}
$$
Here the coefficients $a_{ij}$ and constants $b_i$ are scalars, and the unknowns are $x_1, x_2, \dots, x_n$.
Matrix Form
The system can be expressed compactly as:
$$
A\mathbf{x} = \mathbf{b},
$$
where


$A \in \mathbb{R}^{m \times n}$ is the coefficient matrix $[a_{ij}]$,

$\mathbf{x} \in \mathbb{R}^n$ is the column vector of unknowns,

$\mathbf{b} \in \mathbb{R}^m$ is the column vector of constants.

This formulation turns the problem of solving equations into analyzing the action of a matrix.
Example 3.1.1.
The system
$$
\begin{cases}
x + 2y = 5, \\
3x - y = 4
\end{cases}
$$
can be written as
$$
\begin{bmatrix} 1 & 2 \ 3 & -1 \end{bmatrix}
\begin{bmatrix} x \ y \end{bmatrix}
\begin{bmatrix} 5 \ 4 \end{bmatrix}.
$$
Types of Solutions
A linear system may have:


No solution (inconsistent): The equations conflict.
Example:
$
\begin{cases}
x + y = 1 \
x + y = 2
\end{cases}
$
has no solution.


Exactly one solution (unique): The system’s equations intersect at a single point.
Example: The above system with coefficient matrix $
\begin{bmatrix} 1 & 2 \ 3 & -1 \end{bmatrix}
$ has a unique solution.


Infinitely many solutions: The equations describe overlapping constraints (e.g., multiple equations representing the
same line or plane).


The nature of the solution depends on the rank of $A$ and its relation to the augmented matrix $(A|\mathbf{b})$, which
we will study later.
Geometric Interpretation

In $\mathbb{R}^2$, each linear equation represents a line. Solving a system means finding intersection points of
lines.
In $\mathbb{R}^3$, each equation represents a plane. A system may have no solution (parallel planes), one solution (a
unique intersection point), or infinitely many (a line of intersection).
In higher dimensions, the picture generalizes: solutions form intersections of hyperplanes.

Why this matters
Linear systems are the practical foundation of linear algebra. They appear in balancing chemical reactions, circuit
analysis, least-squares regression, optimization, and computer graphics. Understanding how to represent and classify
their solutions is the first step toward systematic solution methods like Gaussian elimination.
Exercises 3.1


Write the following system in matrix form:
$
\begin{cases}
2x + 3y - z = 7, \
x - y + 4z = 1, \
3x + 2y + z = 5
\end{cases}
$


Determine whether the system
$
\begin{cases}
x + y = 1, \
2x + 2y = 2
\end{cases}
$
has no solution, one solution, or infinitely many solutions.


Geometrically interpret the system
$
\begin{cases}
x + y = 3, \
x - y = 1
\end{cases}
$
in the plane.


Solve the system
$
\begin{cases}
2x + y = 1, \
x - y = 4
\end{cases}
$
and check your solution.


In $\mathbb{R}^3$, describe the solution set of
$
\begin{cases}
x + y + z = 0, \
2x + 2y + 2z = 0
\end{cases}
$.
What geometric object does it represent?


3.2 Gaussian Elimination
To solve linear systems efficiently, we use Gaussian elimination: a systematic method of transforming a system into a
simpler equivalent one whose solutions are easier to see. The method relies on elementary row operations that preserve
the solution set.
Elementary Row Operations
On an augmented matrix $(A|\mathbf{b})$, we are allowed three operations:

Row swapping: interchange two rows.
Row scaling: multiply a row by a nonzero scalar.
Row replacement: replace one row by itself plus a multiple of another row.

These operations correspond to re-expressing equations in different but equivalent forms.
Row Echelon Form
A matrix is in row echelon form (REF) if:

All nonzero rows are above any zero rows.
Each leading entry (the first nonzero number from the left in a row) is to the right of the leading entry in the row
above.
All entries below a leading entry are zero.

Further, if each leading entry is 1 and is the only nonzero entry in its column, the matrix is in reduced row echelon
form (RREF).
Algorithm of Gaussian Elimination

Write the augmented matrix for the system.
Use row operations to create zeros below each pivot (the leading entry in a row).
Continue column by column until the matrix is in echelon form.
Solve by back substitution: starting from the last pivot equation and working upward.

If we continue to RREF, the solution can be read off directly.
Example
Example 3.2.1. Solve
$$
\begin{cases}
x + 2y - z = 3, \\
2x + y + z = 7, \\
3x - y + 2z = 4.
\end{cases}
$$
Step 1. Augmented matrix
$$
\left[\begin{array}{ccc|c}
1 & 2 & -1 & 3 \\
2 & 1 & 1 & 7 \\
3 & -1 & 2 & 4
\end{array}\right].
$$
Step 2. Eliminate below the first pivot
Subtract 2 times row 1 from row 2, and 3 times row 1 from row 3:
$$
\left[\begin{array}{ccc|c}
1 & 2 & -1 & 3 \\
0 & -3 & 3 & 1 \\
0 & -7 & 5 & -5
\end{array}\right].
$$
Step 3. Pivot in column 2
Divide row 2 by -3:
$$
\left[\begin{array}{ccc|c}
1 & 2 & -1 & 3 \\
0 & 1 & -1 & -\tfrac{1}{3} \\
0 & -7 & 5 & -5
\end{array}\right].
$$
Add 7 times row 2 to row 3:
$$
\left[\begin{array}{ccc|c}
1 & 2 & -1 & 3 \\
0 & 1 & -1 & -\tfrac{1}{3} \\
0 & 0 & -2 & -\tfrac{22}{3}
\end{array}\right].
$$
Step 4. Pivot in column 3
Divide row 3 by -2:
$$
\left[\begin{array}{ccc|c}
1 & 2 & -1 & 3 \\
0 & 1 & -1 & -\tfrac{1}{3} \\
0 & 0 & 1 & \tfrac{11}{3}
\end{array}\right].
$$
Step 5. Back substitution
From the last row:
$
z = \tfrac{11}{3}.
$
Second row:
$
y - z = -\tfrac{1}{3} \implies y = -\tfrac{1}{3} + \tfrac{11}{3} = \tfrac{10}{3}.
$
First row:
$
x + 2y - z = 3 \implies x + 2\cdot\tfrac{10}{3} - \tfrac{11}{3} = 3.
$
So
$
x + \tfrac{20}{3} - \tfrac{11}{3} = 3 \implies x + 3 = 3 \implies x = 0.
$
Solution:
$
(x,y,z) = \big(0, \tfrac{10}{3}, \tfrac{11}{3}\big).
$
Why this matters
Gaussian elimination is the foundation of computational linear algebra. It reduces complex systems to a form where
solutions are visible, and it forms the basis for algorithms used in numerical analysis, scientific computing, and
machine learning.
Exercises 3.2


Solve by Gaussian elimination:
$
\begin{cases}
x + y = 2, \
2x - y = 0.
\end{cases}
$


Reduce the following augmented matrix to REF:
$
\left[\begin{array}{ccc|c}
1 & 1 & 1 & 6 \
2 & -1 & 3 & 14 \
1 & 4 & -2 & -2
\end{array}\right].
$


Show that Gaussian elimination always produces either:

a unique solution,
infinitely many solutions, or
a contradiction (no solution).



Use Gaussian elimination to find all solutions of
$
\begin{cases}
x + y + z = 0, \
2x + y + z = 1.
\end{cases}
$


Explain why pivoting (choosing the largest available pivot element) is useful in numerical computation.


3.3 Rank and Consistency
Gaussian elimination not only provides solutions but also reveals the structure of a linear system. Two key ideas are
the rank of a matrix and the consistency of a system. Rank measures the amount of independent information in the
equations, while consistency determines whether the system has at least one solution.
Rank of a Matrix
The rank of a matrix is the number of leading pivots in its row echelon form. Equivalently, it is the maximum number of
linearly independent rows or columns.
Formally,
$$
\text{rank}(A) = \dim(\text{row space of } A) = \dim(\text{column space of } A).
$$
The rank tells us the effective dimension of the space spanned by the rows (or columns).
Example 3.3.1.
For
$$
A = \begin{bmatrix}
1 & 2 & 3 \\
2 & 4 & 6 \\
3 & 6 & 9
\end{bmatrix},
$$
row reduction gives
$$
\begin{bmatrix}
1 & 2 & 3 \\
0 & 0 & 0 \\
0 & 0 & 0
\end{bmatrix}.
$$
Thus, $\text{rank}(A) = 1$, since all rows are multiples of the first.
Consistency of Linear Systems
Consider the system $A\mathbf{x} = \mathbf{b}$.
The system is consistent (has at least one solution) if and only if
$$
\text{rank}(A) = \text{rank}(A|\mathbf{b}),
$$
where $(A|\mathbf{b})$ is the augmented matrix.
If the ranks differ, the system is inconsistent.

If $\text{rank}(A) = \text{rank}(A|\mathbf{b}) = n$ (number of unknowns), the system has a unique solution.
If $\text{rank}(A) = \text{rank}(A|\mathbf{b}) &lt; n$, the system has infinitely many solutions.

Example
Example 3.3.2.
Consider
$$
\begin{cases}
x + y + z = 1, \\
2x + 2y + 2z = 2, \\
x + y + z = 3.
\end{cases}
$$
The augmented matrix is
$$
\left[\begin{array}{ccc|c}
1 & 1 & 1 & 1 \\
2 & 2 & 2 & 2 \\
1 & 1 & 1 & 3
\end{array}\right].
$$
Row reduction gives
$$
\left[\begin{array}{ccc|c}
1 & 1 & 1 & 1 \\
0 & 0 & 0 & 0 \\
0 & 0 & 0 & 2
\end{array}\right].
$$
Here, $\text{rank}(A) = 1$, but $\text{rank}(A|\mathbf{b}) = 2$. Since the ranks differ, the system is inconsistent: no
solution exists.
Example with Infinite Solutions
Example 3.3.3.
For
$$
\begin{cases}
x + y = 2, \\
2x + 2y = 4,
\end{cases}
$$
the augmented matrix reduces to
$$
\left[\begin{array}{cc|c}
1 & 1 & 2 \\
0 & 0 & 0
\end{array}\right].
$$
Here, $\text{rank}(A) = \text{rank}(A|\mathbf{b}) = 1 &lt; 2$. Thus, infinitely many solutions exist, forming a line.
Why this matters
Rank is a measure of independence: it tells us how many truly distinct equations or directions are present. Consistency
explains when equations align versus when they contradict. These concepts connect linear systems to vector spaces and
prepare for the ideas of dimension, basis, and the Rank–Nullity Theorem.
Exercises 3.3

Compute the rank of

$$
A = \begin{bmatrix}
1 & 2 & 1 \\
0 & 1 & -1 \\
2 & 5 & -1
\end{bmatrix}.
$$

Determine whether the system

$$
\begin{cases}
x + y + z = 1, \\
2x + 3y + z = 2, \\
3x + 5y + 2z = 3
\end{cases}
$$
is consistent.


Show that the rank of the identity matrix $I_n$ is $n$.


Give an example of a system in $\mathbb{R}^3$ with infinitely many solutions, and explain why it satisfies the rank
condition.


Prove that for any matrix $A \in \mathbb{R}^{m \times n}$,
$
\text{rank}(A) \leq \min(m,n).
$


3.4 Homogeneous Systems
A homogeneous system is a linear system in which all constant terms are zero:
$$
A\mathbf{x} = \mathbf{0},
$$
where $A \in \mathbb{R}^{m \times n}$, and $\mathbf{0}$ is the zero vector in $\mathbb{R}^m$.
The Trivial Solution
Every homogeneous system has at least one solution:
$$
\mathbf{x} = \mathbf{0}.
$$
This is called the trivial solution. The interesting question is whether nontrivial solutions (nonzero vectors) exist.
Existence of Nontrivial Solutions
Nontrivial solutions exist precisely when the number of unknowns exceeds the rank of the coefficient matrix:
$$
\text{rank}(A) < n.
$$
In this case, there are infinitely many solutions, forming a subspace of $\mathbb{R}^n$. The dimension of this solution
space is
$$
\dim(\text{null}(A)) = n - \text{rank}(A),
$$
where null(A) is the set of all solutions to $A\mathbf{x} = 0$. This set is called the null space or kernel of $A$.
Example
Example 3.4.1.
Consider
$$
\begin{cases}
x + y + z = 0, \\
2x + y - z = 0.
\end{cases}
$$
The augmented matrix is
$$
\left[\begin{array}{ccc|c}
1 & 1 & 1 & 0 \\
2 & 1 & -1 & 0
\end{array}\right].
$$
Row reduction:
$$
\left[\begin{array}{ccc|c}
1 & 1 & 1 & 0 \\
0 & -1 & -3 & 0
\end{array}\right]
\quad\to\quad
\left[\begin{array}{ccc|c}
1 & 1 & 1 & 0 \\
0 & 1 & 3 & 0
\end{array}\right].
$$
So the system is equivalent to:
$$
\begin{cases}
x + y + z = 0, \\
y + 3z = 0.
\end{cases}
$$
From the second equation, $y = -3z$. Substituting into the first:
$
x - 3z + z = 0 \implies x = 2z.
$
Thus solutions are:
$$
(x,y,z) = z(2, -3, 1), \quad z \in \mathbb{R}.
$$
The null space is the line spanned by the vector $(2, -3, 1)$.
Geometric Interpretation
The solution set of a homogeneous system is always a subspace of $\mathbb{R}^n$.

If $\text{rank}(A) = n$, the only solution is the zero vector.
If $\text{rank}(A) = n-1$, the solution set is a line through the origin.
If $\text{rank}(A) = n-2$, the solution set is a plane through the origin.

More generally, the null space has dimension $n - \text{rank}(A)$, known as the nullity.
Why this matters
Homogeneous systems are central to understanding vector spaces, subspaces, and dimension. They lead directly to the
concepts of kernel, null space, and linear dependence. In applications, homogeneous systems appear in equilibrium
problems, eigenvalue equations, and computer graphics transformations.
Exercises 3.4

Solve the homogeneous system

$$
\begin{cases}
x + 2y - z = 0, \\
2x + 4y - 2z = 0.
\end{cases}
$$
What is the dimension of its solution space?

Find all solutions of

$$
\begin{cases}
x - y + z = 0, \\
2x + y - z = 0.
\end{cases}
$$


Show that the solution set of any homogeneous system is a subspace of $\mathbb{R}^n$.


Suppose $A$ is a $3 \times 3$ matrix with $\text{rank}(A) = 2$. What is the dimension of the null space of $A$?


For


$$
A = \begin{bmatrix} 1 & 2 & -1 \ 0 & 1 & 3 \end{bmatrix},
$$
compute a basis for the null space of $A$.
Chapter 4. Vector Spaces
4.1 Definition of a Vector Space
Up to now we have studied vectors and matrices concretely in $\mathbb{R}^n$. The next step is to move beyond coordinates
and define vector spaces in full generality. A vector space is an abstract setting where the familiar rules of addition
and scalar multiplication hold, regardless of whether the elements are geometric vectors, polynomials, functions, or
other objects.
Formal Definition
A vector space over the real numbers $\mathbb{R}$ is a set $V$ equipped with two operations:

Vector addition: For any $\mathbf{u}, \mathbf{v} \in V$, there is a vector $\mathbf{u} + \mathbf{v} \in V$.
Scalar multiplication: For any scalar $c \in \mathbb{R}$ and any $\mathbf{v} \in V$, there is a
vector $c\mathbf{v} \in V$.

These operations must satisfy the following axioms (for all $\mathbf{u}, \mathbf{v}, \mathbf{w} \in V$ and all
scalars $a,b \in \mathbb{R}$):

Commutativity of addition: $\mathbf{u} + \mathbf{v} = \mathbf{v} + \mathbf{u}$.
Associativity of addition: $(\mathbf{u} + \mathbf{v}) + \mathbf{w} = \mathbf{u} + (\mathbf{v} + \mathbf{w})$.
Additive identity: There exists a zero vector $\mathbf{0} \in V$ such that $\mathbf{v} + \mathbf{0} = \mathbf{v}$.
Additive inverses: For each $\mathbf{v} \in V$, there exists $(-\mathbf{v} \in V$ such
that $\mathbf{v} + (-\mathbf{v}) = \mathbf{0}$.
Compatibility of scalar multiplication: $a(b\mathbf{v}) = (ab)\mathbf{v}$.
Identity element of scalars: $1 \cdot \mathbf{v} = \mathbf{v}$.
Distributivity over vector addition: $a(\mathbf{u} + \mathbf{v}) = a\mathbf{u} + a\mathbf{v}$.
Distributivity over scalar addition: $(a+b)\mathbf{v} = a\mathbf{v} + b\mathbf{v}$.

If a set $V$ with operations satisfies all eight axioms, we call it a vector space.
Examples
Example 4.1.1. Standard Euclidean space
$\mathbb{R}^n$ with ordinary addition and scalar multiplication is a vector space. This is the model case from which the
axioms are abstracted.
Example 4.1.2. Polynomials
The set of all polynomials with real coefficients, denoted $\mathbb{R}[x]$, forms a vector space. Addition and scalar
multiplication are defined term by term.
Example 4.1.3. Functions
The set of all real-valued functions on an interval, e.g. $f: [0,1] \to \mathbb{R}$, forms a vector space, since
functions can be added and scaled pointwise.
Non-Examples
Not every set with operations qualifies. For instance, the set of positive real numbers under usual addition is not a
vector space, because additive inverses (negative numbers) are missing. The axioms must all hold.
Geometric Interpretation
In familiar cases like $\mathbb{R}^2$ or $\mathbb{R}^3$, vector spaces provide the stage for geometry: vectors can be
added, scaled, and combined to form lines, planes, and higher-dimensional structures. In abstract settings like function
spaces, the same algebraic rules let us apply geometric intuition to infinite-dimensional problems.
Why this matters
The concept of vector space unifies seemingly different mathematical objects under a single framework. Whether dealing
with forces in physics, signals in engineering, or data in machine learning, the common language of vector spaces allows
us to use the same techniques everywhere.
Exercises 4.1

Verify that $\mathbb{R}^2$ with standard addition and scalar multiplication satisfies all eight vector space axioms.
Show that the set of integers $\mathbb{Z}$ with ordinary operations is not a vector space over $\mathbb{R}$. Which
axiom fails?
Consider the set of all polynomials of degree at most 3. Show it forms a vector space over $\mathbb{R}$. What is its
dimension?
Give an example of a vector space where the vectors are not geometric objects.
Prove that in any vector space, the zero vector is unique.

4.2 Subspaces
A subspace is a smaller vector space living inside a larger one. Just as lines and planes naturally sit inside
three-dimensional space, subspaces generalize these ideas to higher dimensions and more abstract settings.
Definition
Let $V$ be a vector space. A subset $W \subseteq V$ is called a subspace of $V$ if:


$\mathbf{0} \in W$ (contains the zero vector),
For all $\mathbf{u}, \mathbf{v} \in W$, the sum $\mathbf{u} + \mathbf{v} \in W$ (closed under addition),
For all scalars $c \in \mathbb{R}$ and vectors $\mathbf{v} \in W$, the product $c\mathbf{v} \in W$ (closed under
scalar multiplication).

If these hold, then $W$ is itself a vector space with the inherited operations.
Examples
Example 4.2.1. Line through the origin in $\mathbb{R}^2$
The set
$$
W = { (t, 2t) \mid t \in \mathbb{R} }
$$
is a subspace of $\mathbb{R}^2$. It contains the zero vector, is closed under addition, and is closed under scalar
multiplication.
Example 4.2.2. The x–y plane in $\mathbb{R}^3$
The set
$$
W = { (x, y, 0) \mid x,y \in \mathbb{R} }
$$
is a subspace of $\mathbb{R}^3$. It is the collection of all vectors lying in the plane through the origin parallel to
the x–y plane.
Example 4.2.3. Null space of a matrix
For a matrix $A \in \mathbb{R}^{m \times n}$, the null space
$$
{ \mathbf{x} \in \mathbb{R}^n \mid A\mathbf{x} = \mathbf{0} }
$$
is a subspace of $\mathbb{R}^n$. This subspace represents all solutions to the homogeneous system.
Non-Examples
Not every subset is a subspace.

The set ${ (x,y) \in \mathbb{R}^2 \mid x \geq 0 }$ is not a subspace: it is not closed under scalar multiplication (a
negative scalar breaks the condition).
Any line in $\mathbb{R}^2$ that does not pass through the origin is not a subspace, because it does not
contain $\mathbf{0}$.

Geometric Interpretation
Subspaces are the linear structures inside vector spaces.

In $\mathbb{R}^2$, the subspaces are: the zero vector, any line through the origin, or the entire plane.
In $\mathbb{R}^3$, the subspaces are: the zero vector, any line through the origin, any plane through the origin, or
the entire space.
In higher dimensions, the same principle applies: subspaces are the flat linear pieces through the origin.

Why this matters
Subspaces capture the essential structure of linear problems. Column spaces, row spaces, and null spaces are all
subspaces. Much of linear algebra consists of understanding how these subspaces intersect, span, and complement each
other.
Exercises 4.2

Prove that the set $W = { (x,0) \mid x \in \mathbb{R} } \subseteq \mathbb{R}^2$ is a subspace.
Show that the line ${ (1+t, 2t) \mid t \in \mathbb{R} }$ is not a subspace of $\mathbb{R}^2$. Which condition fails?
Determine whether the set of all vectors $(x,y,z) \in \mathbb{R}^3$ satisfying $x+y+z=0$ is a subspace.
For the matrix

$$
A = \begin{bmatrix} 1 & 2 & 3 \ 4 & 5 & 6 \end{bmatrix},
$$
describe the null space of $A$ as a subspace of $\mathbb{R}^3$.
5. List all possible subspaces of $\mathbb{R}^2$.
4.3 Span, Basis, Dimension
The ideas of span, basis, and dimension provide the language for describing the size and structure of subspaces.
Together, they tell us how a vector space is generated, how many building blocks it requires, and how those blocks can
be chosen.
Span
Given a set of vectors ${\mathbf{v}_1, \mathbf{v}_2, \dots, \mathbf{v}_k} \subseteq V$, the span is the collection of
all linear combinations:
$$
\text{span}{\mathbf{v}_1, \dots, \mathbf{v}_k} = { c_1\mathbf{v}_1 + \cdots + c_k\mathbf{v}_k \mid c_i \in \mathbb{R} }.
$$
The span is always a subspace of $V$, namely the smallest subspace containing those vectors.
Example 4.3.1.
In $\mathbb{R}^2$, $ \text{span}{(1,0)} = {(x,0) \mid x \in \mathbb{R}},$ the x-axis.
Similarly, $\text{span}{(1,0),(0,1)} = \mathbb{R}^2.$
Basis
A basis of a vector space $V$ is a set of vectors that:

Span $V$.
Are linearly independent (no vector in the set is a linear combination of the others).

If either condition fails, the set is not a basis.
Example 4.3.2.
In $\mathbb{R}^3$, the standard unit vectors
$$
\mathbf{e}_1 = (1,0,0), \quad \mathbf{e}_2 = (0,1,0), \quad \mathbf{e}_3 = (0,0,1)
$$
form a basis. Every vector $(x,y,z)$ can be uniquely written as
$$
x\mathbf{e}_1 + y\mathbf{e}_2 + z\mathbf{e}_3.
$$
Dimension
The dimension of a vector space $V$, written $\dim(V)$, is the number of vectors in any basis of $V$. This number is
well-defined: all bases of a vector space have the same cardinality.
Examples 4.3.3.


$\dim(\mathbb{R}^2) = 2$, with basis $(1,0), (0,1)$.

$\dim(\mathbb{R}^3) = 3$, with basis $(1,0,0), (0,1,0), (0,0,1)$.
The set of polynomials of degree at most 3 has dimension 4, with basis $(1, x, x^2, x^3)$.

Geometric Interpretation

The span is like the reach of a set of vectors.
A basis is the minimal set of directions needed to reach everything in the space.
The dimension is the count of those independent directions.

Lines, planes, and higher-dimensional flats can all be described in terms of span, basis, and dimension.
Why this matters
These concepts classify vector spaces and subspaces in terms of size and structure. Many theorems in linear algebra-such
as the Rank–Nullity Theorem-are consequences of understanding span, basis, and dimension. In practical terms, bases are
how we encode data in coordinates, and dimension tells us how much freedom a system truly has.
Exercises 4.3

Show that $(1,0,0)$, $(0,1,0)$, $(1,1,0)$ span the $xy$-plane in $\mathbb{R}^3$. Are they a basis?
Find a basis for the line ${(2t,-3t,t) : t \in \mathbb{R}}$ in $\mathbb{R}^3$.
Determine the dimension of the subspace of $\mathbb{R}^3$ defined by $x+y+z=0$.
Prove that any two different bases of $\mathbb{R}^n$ must contain exactly $n$ vectors.
Give a basis for the set of polynomials of degree $\leq 2$. What is its dimension?

4.4 Coordinates
Once a basis for a vector space is chosen, every vector can be expressed uniquely as a linear combination of the basis
vectors. The coefficients in this combination are called the coordinates of the vector relative to that basis.
Coordinates allow us to move between the abstract world of vector spaces and the concrete world of numbers.
Coordinates Relative to a Basis
Let $V$ be a vector space, and let
$$
\mathcal{B} = {\mathbf{v}_1, \mathbf{v}_2, \dots, \mathbf{v}_n}
$$
be an ordered basis for $V$. Every vector $\mathbf{u} \in V$ can be written uniquely as
$$
\mathbf{u} = c_1 \mathbf{v}_1 + c_2 \mathbf{v}_2 + \cdots + c_n \mathbf{v}_n.
$$
The scalars $(c_1, c_2, \dots, c_n)$ are the coordinates of $\mathbf{u}$ relative to $\mathcal{B}$, written
$$
[\mathbf{u}]_{\mathcal{B}} = \begin{bmatrix} c_1 \ c_2 \ \vdots \ c_n \end{bmatrix}.
$$
Example in $\mathbb{R}^2$

Example 4.4.1.
Let the basis be
$$
\mathcal{B} = { (1,1), (1,-1) }.
$$
To find the coordinates of $\mathbf{u} = (3,1)$ relative to $\mathcal{B}$, solve
$$
(3,1) = c_1(1,1) + c_2(1,-1).
$$
This gives the system
$$
\begin{cases}
c_1 + c_2 = 3, \\
c_1 - c_2 = 1.
\end{cases}
$$
Adding: $2c_1 = 4 \implies c_1 = 2$. Then $c_2 = 1$.
So,
$$
[\mathbf{u}]_{\mathcal{B}} = \begin{bmatrix} 2 \ 1 \end{bmatrix}.
$$
Standard Coordinates
In $\mathbb{R}^n$, the standard basis is
$$
\mathbf{e}_1 = (1,0,\dots,0), \quad \mathbf{e}_2 = (0,1,0,\dots,0), \dots, \mathbf{e}_n = (0,\dots,0,1).
$$
Relative to this basis, the coordinates of a vector are simply its entries. Thus, column vectors are coordinate
representations by default.
Change of Basis
If $\mathcal{B} = {\mathbf{v}_1, \dots, \mathbf{v}_n}$ is a basis of $\mathbb{R}^n$, the change of basis matrix is
$$
P = \begin{bmatrix} \mathbf{v}_1 & \mathbf{v}_2 & \cdots & \mathbf{v}_n \end{bmatrix},
$$
with basis vectors as columns. For any vector $\mathbf{u}$,
$$
\mathbf{u} = P[\mathbf{u}]{\mathcal{B}}, \qquad [\mathbf{u}]{\mathcal{B}} = P^{-1}\mathbf{u}.
$$
Thus, switching between bases reduces to matrix multiplication.
Geometric Interpretation
Coordinates are the address of a vector relative to a chosen set of directions. Different bases are like different
coordinate systems: Cartesian, rotated, skewed, or scaled. The same vector may look very different numerically depending
on the basis, but its geometric identity is unchanged.
Why this matters
Coordinates turn abstract vectors into concrete numerical data. Changing basis is the algebraic language for rotations
of axes, diagonalization of matrices, and principal component analysis in data science. Mastery of coordinates is
essential for moving fluidly between geometry, algebra, and computation.
Exercises 4.4

Express $(4,2)$ in terms of the basis $(1,1), (1,-1)$.
Find the coordinates of $(1,2,3)$ relative to the standard basis of $\mathbb{R}^3$.
If $\mathcal{B} = {(2,0), (0,3)}$, compute $[ (4,6) ]_{\mathcal{B}}$.
Construct the change of basis matrix from the standard basis of $\mathbb{R}^2$ to $\mathcal{B} = {(1,1), (1,-1)}$.
Prove that coordinate representation with respect to a basis is unique.

Chapter 5. Linear Transformations
5.1 Functions that Preserve Linearity
A central theme of linear algebra is understanding linear transformations: functions between vector spaces that preserve
their algebraic structure. These transformations generalize the idea of matrix multiplication and capture the essence of
linear behavior.
Definition
Let $V$ and $W$ be vector spaces over $\mathbb{R}$. A function
$$
T : V \to W
$$
is called a linear transformation (or linear map) if for all vectors $\mathbf{u}, \mathbf{v} \in V$ and all
scalars $c \in \mathbb{R}$:


Additivity:
$$
T(\mathbf{u} + \mathbf{v}) = T(\mathbf{u}) + T(\mathbf{v}),
$$


Homogeneity:
$$
T(c\mathbf{u}) = cT(\mathbf{u}).
$$


If both conditions hold, then $T$ automatically respects linear combinations:
$$
T(c_1\mathbf{v}_1 + \cdots + c_k\mathbf{v}_k) = c_1 T(\mathbf{v}_1) + \cdots + c_k T(\mathbf{v}_k).
$$
Examples
Example 5.1.1. Scaling in $\mathbb{R}^2$.
Let $T:\mathbb{R}^2 \to \mathbb{R}^2$ be defined by
$$
T(x,y) = (2x, 2y).
$$
This doubles the length of every vector, preserving direction. It is linear.
Example 5.1.2. Rotation.
Let $R_\theta: \mathbb{R}^2 \to \mathbb{R}^2$ be
$$
R_\theta(x,y) = (x\cos\theta - y\sin\theta, ; x\sin\theta + y\cos\theta).
$$
This rotates vectors by angle $\theta$. It satisfies additivity and homogeneity, hence is linear.
Example 5.1.3. Differentiation.
Let $D: \mathbb{R}[x] \to \mathbb{R}[x]$ be differentiation: $D(p(x)) = p'(x)$. Since derivatives respect addition and
scalar multiples, differentiation is a linear transformation.
Non-Example
The map $S:\mathbb{R}^2 \to \mathbb{R}^2$ defined by
$$
S(x,y) = (x^2, y^2)
$$
is not linear, because $S(\mathbf{u} + \mathbf{v}) \neq S(\mathbf{u}) + S(\mathbf{v})$ in general.
Geometric Interpretation
Linear transformations are exactly those that preserve the origin, lines through the origin, and proportions along those
lines. They include familiar operations: scaling, rotations, reflections, shears, and projections. Nonlinear
transformations bend or curve space, breaking these properties.
Why this matters
Linear transformations unify geometry, algebra, and computation. They explain how matrices act on vectors, how data can
be rotated or projected, and how systems evolve under linear rules. Much of linear algebra is devoted to understanding
these transformations, their representations, and their invariants.
Exercises 5.1


Verify that $T(x,y) = (3x-y, 2y)$ is a linear transformation on $\mathbb{R}^2$.


Show that $T(x,y) = (x+1, y)$ is not linear. Which axiom fails?


Prove that if $T$ and $S$ are linear transformations, then so is $T+S$.


Give an example of a linear transformation from $\mathbb{R}^3$ to $\mathbb{R}^2$.


Let $T:\mathbb{R}[x] \to \mathbb{R}[x]$ be integration:
$$
T(p(x)) = \int_0^x p(t),dt.
$$
Prove that $T$ is a linear transformation.


5.2 Matrix Representation of Linear Maps
Every linear transformation between finite-dimensional vector spaces can be represented by a matrix. This correspondence
is one of the central insights of linear algebra: it lets us use the tools of matrix arithmetic to study abstract
transformations.
From Linear Map to Matrix
Let $T: \mathbb{R}^n \to \mathbb{R}^m$ be a linear transformation. Choose the standard
basis ${ \mathbf{e}_1, \dots, \mathbf{e}_n }$ of $\mathbb{R}^n$, where $\mathbf{e}_i$ has a 1 in the $i$-th position
and 0 elsewhere.
The action of $T$ on each basis vector determines the entire transformation:
$$
T(\mathbf{e}j) = \begin{bmatrix} a{1j} \ a_{2j} \ \vdots \ a_{mj} \end{bmatrix}.
$$
Placing these outputs as columns gives the matrix of $T$:
$$
[T] = A = \begin{bmatrix}
a_{11} & a_{12} & \cdots & a_{1n} \\
a_{21} & a_{22} & \cdots & a_{2n} \\
\vdots & \vdots & \ddots & \vdots \\
a_{m1} & a_{m2} & \cdots & a_{mn}
\end{bmatrix}.
$$
Then for any vector $\mathbf{x} \in \mathbb{R}^n$:
$$
T(\mathbf{x}) = A\mathbf{x}.
$$
Examples
Example 5.2.1. Scaling in $\mathbb{R}^2$.
Let $T(x,y) = (2x, 3y)$. Then
$$
T(\mathbf{e}_1) = (2,0), \quad T(\mathbf{e}_2) = (0,3).
$$
So the matrix is
$$
[T] = \begin{bmatrix}
2 & 0 \\
0 & 3
\end{bmatrix}.
$$
Example 5.2.2. Rotation in the plane.
The rotation transformation $R_\theta(x,y) = (x\cos\theta - y\sin\theta, ; x\sin\theta + y\cos\theta)$ has matrix
$$
[R_\theta] = \begin{bmatrix}
\cos\theta & -\sin\theta \\
\sin\theta & \cos\theta
\end{bmatrix}.
$$
Example 5.2.3. Projection onto the x-axis.
The map $P(x,y) = (x,0)$ corresponds to
$$
[P] = \begin{bmatrix}
1 & 0 \\
0 & 0
\end{bmatrix}.
$$
Change of Basis
Matrix representations depend on the chosen basis. If $\mathcal{B}$ and $\mathcal{C}$ are bases of $\mathbb{R}^n$
and $\mathbb{R}^m$, then the matrix of $T: \mathbb{R}^n \to \mathbb{R}^m$ with respect to these bases is obtained by
expressing $T(\mathbf{v}_j)$ in terms of $\mathcal{C}$ for each $\mathbf{v}_j \in \mathcal{B}$. Changing bases
corresponds to conjugating the matrix by the appropriate change-of-basis matrices.
Geometric Interpretation
Matrices are not just convenient notation-they are linear maps once a basis is fixed. Every rotation, reflection,
projection, shear, or scaling corresponds to multiplying by a specific matrix. Thus, studying linear transformations
reduces to studying their matrices.
Why this matters
Matrix representations make linear transformations computable. They connect abstract definitions to explicit
calculations, enabling algorithms for solving systems, finding eigenvalues, and performing decompositions. Applications
from graphics to machine learning depend on this translation.
Exercises 5.2

Find the matrix representation of $T:\mathbb{R}^2 \to \mathbb{R}^2$, $T(x,y) = (x+y, x-y)$.
Determine the matrix of the linear transformation $T:\mathbb{R}^3 \to \mathbb{R}^2$, $T(x,y,z) = (x+z, y-2z)$.
What matrix represents reflection across the line $y=x$ in $\mathbb{R}^2$?
Show that the matrix of the identity transformation on $\mathbb{R}^n$ is $I_n$.
For the differentiation map $D:\mathbb{R}_2[x] \to \mathbb{R}_1[x]$, where $\mathbb{R}_k[x]$ is the space of
polynomials of degree at most $k$, find the matrix of $D$ relative to the bases ${1,x,x^2}$ and ${1,x}$.

5.3 Kernel and Image
To understand a linear transformation deeply, we must examine what it kills and what it produces. These ideas are
captured by the kernel and the image, two fundamental subspaces associated with any linear map.
The Kernel
The kernel (or null space) of a linear transformation $T: V \to W$ is the set of all vectors in $V$ that map to the zero
vector in $W$:
$$
\ker(T) = { \mathbf{v} \in V \mid T(\mathbf{v}) = \mathbf{0} }.
$$
The kernel is always a subspace of $V$. It measures the degeneracy of the transformation-directions that collapse to
nothing.
Example 5.3.1.
Let $T:\mathbb{R}^3 \to \mathbb{R}^2$ be defined by
$$
T(x,y,z) = (x+y, y+z).
$$
In matrix form,
$$
[T] = \begin{bmatrix}
1 & 1 & 0 \\
0 & 1 & 1
\end{bmatrix}.
$$
To find the kernel, solve
$$
\begin{bmatrix}
1 & 1 & 0 \\
0 & 1 & 1
\end{bmatrix}
\begin{bmatrix} x \ y \ z \end{bmatrix}
= \begin{bmatrix} 0 \ 0 \end{bmatrix}.
$$
This gives the equations $x + y = 0$, $y + z = 0$. Hence $x = -y, z = -y$. The kernel is
$$
\ker(T) = { (-t, t, -t) \mid t \in \mathbb{R} },
$$
a line in $\mathbb{R}^3$.
The Image
The image (or range) of a linear transformation $T: V \to W$ is the set of all outputs:
$$
\text{im}(T) = { T(\mathbf{v}) \mid \mathbf{v} \in V } \subseteq W.
$$
Equivalently, it is the span of the columns of the representing matrix. The image is always a subspace of $W$.
Example 5.3.2.
For the same transformation as above,
$$
[T] = \begin{bmatrix}
1 & 1 & 0 \\
0 & 1 & 1
\end{bmatrix},
$$
the columns are $(1,0)$, $(1,1)$, and $(0,1)$. Since $(1,1) = (1,0) + (0,1)$, the image is
$$
\text{im}(T) = \text{span}{ (1,0), (0,1) } = \mathbb{R}^2.
$$
Dimension Formula (Rank–Nullity Theorem)
For a linear transformation $T: V \to W$ with $V$ finite-dimensional,
$$
\dim(\ker(T)) + \dim(\text{im}(T)) = \dim(V).
$$
This fundamental result connects the lost directions (kernel) with the achieved directions (image).
Geometric Interpretation

The kernel describes how the transformation flattens space (e.g., projecting a 3D object onto a plane).
The image describes the target subspace reached by the transformation.
The rank–nullity theorem quantifies the tradeoff: the more dimensions collapse, the fewer remain in the image.

Why this matters
Kernel and image capture the essence of a linear map. They classify transformations, explain when systems have unique or
infinite solutions, and form the backbone of important results like the Rank–Nullity Theorem, diagonalization, and
spectral theory.
Exercises 5.3

Find the kernel and image of $T:\mathbb{R}^2 \to \mathbb{R}^2$, $T(x,y) = (x-y, x+y)$.
Let $A = \begin{bmatrix} 1 & 2 & 3 \ 0 & 1 & 4 \end{bmatrix}$. Find bases for $\ker(A)$ and $\text{im}(A)$.
For the projection map $P(x,y,z) = (x,y,0)$, describe the kernel and image.
Prove that $\ker(T)$ and $\text{im}(T)$ are always subspaces.
Verify the Rank–Nullity Theorem for the transformation in Example 5.3.1.

5.4 Change of Basis
Linear transformations can look very different depending on the coordinate system we use. The process of rewriting
vectors and transformations relative to a new basis is called a change of basis. This concept lies at the heart of
diagonalization, orthogonalization, and many computational techniques.
Coordinate Change
Suppose $V$ is an $n$-dimensional vector space, and let $\mathcal{B} = {\mathbf{v}_1, \dots, \mathbf{v}n}$ be a
basis. Every vector $\mathbf{x} \in V$ has a coordinate vector $[\mathbf{x}]{\mathcal{B}} \in \mathbb{R}^n$.
If $P$ is the change-of-basis matrix from $\mathcal{B}$ to the standard basis, then
$$
\mathbf{x} = P [\mathbf{x}]_{\mathcal{B}}.
$$
Equivalently,
$$
[\mathbf{x}]_{\mathcal{B}} = P^{-1} \mathbf{x}.
$$
Here, $P$ has the basis vectors of $\mathcal{B}$ as its columns:
$$
P = \begin{bmatrix}
\mathbf{v}_1 & \mathbf{v}_2 & \cdots & \mathbf{v}_n
\end{bmatrix}.
$$
Transformation of Matrices
Let $T: V \to V$ be a linear transformation. Suppose its matrix in the standard basis is $A$. In the
basis $\mathcal{B}$, the representing matrix becomes
$$
[T]_{\mathcal{B}} = P^{-1} A P.
$$
Thus, changing basis corresponds to a similarity transformation of the matrix.
Example
Example 5.4.1.
Let $T:\mathbb{R}^2 \to \mathbb{R}^2$ be given by
$$
T(x,y) = (3x + y, x + y).
$$
In the standard basis, its matrix is
$$
A = \begin{bmatrix}
3 & 1 \\
1 & 1
\end{bmatrix}.
$$
Now consider the basis $\mathcal{B} = { (1,1), (1,-1) }$. The change-of-basis matrix is
$$
P = \begin{bmatrix}
1 & 1 \\
1 & -1
\end{bmatrix}.
$$
Then
$$
[T]_{\mathcal{B}} = P^{-1} A P.
$$
Computing gives
$$
[T]_{\mathcal{B}} =
\begin{bmatrix}
4 & 0 \\
0 & 0
\end{bmatrix}.
$$
In this new basis, the transformation is diagonal: one direction is scaled by 4, the other collapsed to 0.
Geometric Interpretation
Change of basis is like rotating or skewing your coordinate grid. The underlying transformation does not change, but its
description in numbers becomes simpler or more complicated depending on the basis. Finding a basis that simplifies a
transformation (often a diagonal basis) is a key theme in linear algebra.
Why this matters
Change of basis connects the abstract notion of similarity to practical computation. It is the tool that allows us to
diagonalize matrices, compute eigenvalues, and simplify complex transformations. In applications, it corresponds to
choosing a more natural coordinate system-whether in geometry, physics, or machine learning.
Exercises 5.4

Let $A = \begin{bmatrix} 2 & 1 \ 0 & 2 \end{bmatrix}$. Compute its representation in the basis ${(1,0),(1,1)}$.
Find the change-of-basis matrix from the standard basis of $\mathbb{R}^2$ to ${(2,1),(1,1)}$.
Prove that similar matrices (related by $P^{-1}AP$) represent the same linear transformation under different bases.
Diagonalize the matrix $A = \begin{bmatrix} 1 & 0 \ 0 & -1 \end{bmatrix}$ in the basis ${(1,1),(1,-1)}$.
In $\mathbb{R}^3$, let $\mathcal{B} = {(1,0,0),(1,1,0),(1,1,1)}$. Construct the change-of-basis matrix $P$ and
compute $P^{-1}$.

Chapter 6. Determinants
6.1 Motivation and Geometric Meaning
Determinants are numerical values associated with square matrices. At first they may appear as a complicated formula,
but their importance comes from what they measure: determinants encode scaling, orientation, and invertibility of linear
transformations. They bridge algebra and geometry.
Determinants of $2 \times 2$ Matrices
For a $2 \times 2$ matrix
$$
A = \begin{bmatrix} a & b \ c & d \end{bmatrix},
$$
the determinant is defined as
$$
\det(A) = ad - bc.
$$
Geometric meaning: If $A$ represents a linear transformation of the plane, then $|\det(A)|$ is the area scaling factor.
For example, if $\det(A) = 2$, areas of shapes are doubled. If $\det(A) = 0$, the transformation collapses the plane to
a line: all area is lost.
Determinants of $3 \times 3$ Matrices
For
$$
A = \begin{bmatrix}
a & b & c \\
d & e & f \\
g & h & i
\end{bmatrix},
$$
the determinant can be computed as
$$
\det(A) = a(ei - fh) - b(di - fg) + c(dh - eg).
$$
Geometric meaning: In $\mathbb{R}^3$, $|\det(A)|$ is the volume scaling factor. If $\det(A) &lt; 0$, orientation is
reversed (a handedness flip), such as turning a right-handed coordinate system into a left-handed one.
General Case
For $A \in \mathbb{R}^{n \times n}$, the determinant is a scalar that measures how the linear transformation given
by $A$ scales n-dimensional volume.

If $\det(A) = 0$: the transformation squashes space into a lower dimension, so $A$ is not invertible.
If $\det(A) &gt; 0$: volume is scaled by $\det(A)$, orientation preserved.
If $\det(A) &lt; 0$: volume is scaled by $|\det(A)|$, orientation reversed.

Visual Examples


Shear in $\mathbb{R}^2$:
$A = \begin{bmatrix} 1 & 1 \ 0 & 1 \end{bmatrix}$.
Then $\det(A) = 1$. The transformation slants the unit square into a parallelogram but preserves area.


Projection in $\mathbb{R}^2$:
$A = \begin{bmatrix} 1 & 0 \ 0 & 0 \end{bmatrix}$.
Then $\det(A) = 0$. The unit square collapses into a line segment: area vanishes.


Rotation in $\mathbb{R}^2$:
$R_\theta = \begin{bmatrix} \cos\theta & -\sin\theta \ \sin\theta & \cos\theta \end{bmatrix}$.
Then $\det(R_\theta) = 1$. Rotations preserve area and orientation.


Why this matters
The determinant is not just a formula-it is a measure of transformation. It tells us whether a matrix is invertible, how
it distorts space, and whether it flips orientation. This geometric insight makes the determinant indispensable in
analysis, geometry, and applied mathematics.
Exercises 6.1

Compute the determinant of $\begin{bmatrix} 2 & 3 \ 1 & 4 \end{bmatrix}$. What area scaling factor does it
represent?
Find the determinant of the shear matrix $\begin{bmatrix} 1 & 2 \ 0 & 1 \end{bmatrix}$. What happens to the area of
the unit square?
For the $3 \times 3$ matrix
$\begin{bmatrix} 1 & 0 & 0 \ 0 & 2 & 0 \ 0 & 0 & 3 \end{bmatrix}$, compute the determinant. How does it scale
volume in $\mathbb{R}^3$?
Show that any rotation matrix in $\mathbb{R}^2$ has determinant $1$.
Give an example of a $2 \times 2$ matrix with determinant $-1$. What geometric action does it represent?

6.2 Properties of Determinants
Beyond their geometric meaning, determinants satisfy a collection of algebraic rules that make them powerful tools in
linear algebra. These properties allow us to compute efficiently, test invertibility, and understand how determinants
behave under matrix operations.
Basic Properties
Let $A, B \in \mathbb{R}^{n \times n}$, and let $c \in \mathbb{R}$. Then:


Identity:
$$
\det(I_n) = 1.
$$


Triangular matrices:
If $A$ is upper or lower triangular, then
$$
\det(A) = a_{11} a_{22} \cdots a_{nn}.
$$


Row/column swap:
Interchanging two rows (or columns) multiplies the determinant by $-1$.


Row/column scaling:
Multiplying a row (or column) by a scalar $c$ multiplies the determinant by $c$.


Row/column addition:
Adding a multiple of one row to another does not change the determinant.


Transpose:
$$
\det(A^T) = \det(A).
$$


Multiplicativity:
$$
\det(AB) = \det(A)\det(B).
$$


Invertibility:
$A$ is invertible if and only if $\det(A) \neq 0$.


Example Computations
Example 6.2.1.
For
$$
A = \begin{bmatrix} 2 & 0 & 0 \ 1 & 3 & 0 \ -1 & 4 & 5 \end{bmatrix},
$$
$A$ is lower triangular, so
$$
\det(A) = 2 \cdot 3 \cdot 5 = 30.
$$
Example 6.2.2.
Let
$$
B = \begin{bmatrix} 1 & 2 \ 3 & 4 \end{bmatrix}, \quad
C = \begin{bmatrix} 0 & 1 \ 1 & 0 \end{bmatrix}.
$$
Then
$$
\det(B) = 1\cdot 4 - 2\cdot 3 = -2, \quad \det(C) = -1.
$$
Since $CB$ is obtained by swapping rows of $B$,
$$
\det(CB) = -\det(B) = 2.
$$
This matches the multiplicativity rule: $\det(CB) = \det(C)\det(B) = (-1)(-2) = 2.$
Geometric Insights

Row swaps: flipping orientation of space.
Scaling a row: stretching space in one direction.
Row replacement: sliding hyperplanes without altering volume.
Multiplicativity: performing two transformations multiplies their scaling factors.

These properties make determinants both computationally manageable and geometrically interpretable.
Why this matters
Determinant properties connect computation with geometry and theory. They explain why Gaussian elimination works, why
invertibility is equivalent to nonzero determinant, and why determinants naturally arise in areas like volume
computation, eigenvalue theory, and differential equations.
Exercises 6.2


Compute the determinant of
$$
A = \begin{bmatrix} 1 & 2 & 3 \ 0 & 1 & 4 \ 0 & 0 & 2 \end{bmatrix}.
$$


Show that if two rows of a square matrix are identical, then its determinant is zero.


Verify $\det(A^T) = \det(A)$ for
$$
A = \begin{bmatrix} 2 & -1 \ 3 & 4 \end{bmatrix}.
$$


If $A$ is invertible, prove that
$$
\det(A^{-1}) = \frac{1}{\det(A)}.
$$


Suppose $A$ is a $3\times 3$ matrix with $\det(A) = 5$. What is $\det(2A)$?


6.3 Cofactor Expansion
While determinants of small matrices can be computed directly from formulas, larger matrices require a systematic
method. The cofactor expansion (also known as Laplace expansion) provides a recursive way to compute determinants by
breaking them into smaller ones.
Minors and Cofactors
For an $n \times n$ matrix $A = [a_{ij}]$:

The minor $M_{ij}$ is the determinant of the $(n-1) \times (n-1)$ matrix obtained by deleting the $i$-th row and $j$
-th column of $A$.
The cofactor $C_{ij}$ is defined by

$$
C_{ij} = (-1)^{i+j} M_{ij}.
$$
The sign factor $(-1)^{i+j}$ alternates in a checkerboard pattern:
$$
\begin{bmatrix}

& - & + & - & \cdots \


& + & - & + & \cdots \


& - & + & - & \cdots \
\vdots & \vdots & \vdots & \vdots & \ddots
\end{bmatrix}.
$$

Cofactor Expansion Formula
The determinant of $A$ can be computed by expanding along any row or any column:
$$
\det(A) = \sum_{j=1}^n a_{ij} C_{ij} \quad \text{(expansion along row (i))},
$$
$$
\det(A) = \sum_{i=1}^n a_{ij} C_{ij} \quad \text{(expansion along column (j))}.
$$
Example
Example 6.3.1.
Compute
$$
A = \begin{bmatrix}
1 & 2 & 3 \\
0 & 4 & 5 \\
1 & 0 & 6
\end{bmatrix}.
$$
Expand along the first row:
$$
\det(A) = 1 \cdot C_{11} + 2 \cdot C_{12} + 3 \cdot C_{13}.
$$

For $C_{11}$:
$M_{11} = \det \begin{bmatrix} 4 & 5 \ 0 & 6 \end{bmatrix} = 24$, so $C_{11} = (+1)(24) = 24$.
For $C_{12}$:
$M_{12} = \det \begin{bmatrix} 0 & 5 \ 1 & 6 \end{bmatrix} = 0 - 5 = -5$, so $C_{12} = (-1)(-5) = 5$.
For $C_{13}$:
$M_{13} = \det \begin{bmatrix} 0 & 4 \ 1 & 0 \end{bmatrix} = 0 - 4 = -4$, so $C_{13} = (+1)(-4) = -4$.

Thus,
$$
\det(A) = 1(24) + 2(5) + 3(-4) = 24 + 10 - 12 = 22.
$$
Properties of Cofactor Expansion

Expansion along any row or column yields the same result.
The cofactor expansion provides a recursive definition of determinant: a determinant of size $n$ is expressed in
terms of determinants of size $n-1$.
Cofactors are fundamental in constructing the adjugate matrix, which gives a formula for inverses:

$$
A^{-1} = \frac{1}{\det(A)} , \text{adj}(A), \quad \text{where adj}(A) = [C_{ji}].
$$
Geometric Interpretation
Cofactor expansion breaks down the determinant into contributions from sub-volumes defined by fixing one row or column
at a time. Each cofactor measures how that row/column influences the overall volume scaling.
Why this matters
Cofactor expansion generalizes the small-matrix formulas and provides a conceptual definition of determinants. While not
the most efficient way to compute determinants for large matrices, it is essential for theory, proofs, and connections
to adjugates, Cramer’s rule, and classical geometry.
Exercises 6.3


Compute the determinant of
$$
\begin{bmatrix}
2 & 0 & 1 \
3 & -1 & 4 \
1 & 2 & 0
\end{bmatrix}
$$
by cofactor expansion along the first column.


Verify that expanding along the second row of Example 6.3.1 gives the same determinant.


Prove that expansion along any row gives the same value.


Show that if a row of a matrix is zero, then its determinant is zero.


Use cofactor expansion to prove that $\det(A) = \det(A^T)$.


6.4 Applications (Volume, Invertibility Test)
Determinants are not merely algebraic curiosities; they have concrete geometric and computational uses. Two of the most
important applications are measuring volumes and testing invertibility of matrices.
Determinants as Volume Scalers
Given vectors $\mathbf{v}_1, \mathbf{v}_2, \dots, \mathbf{v}_n \in \mathbb{R}^n$, arrange them as columns of a matrix:
$$
A = \begin{bmatrix}
| & | & & | \\
\mathbf{v}_1 & \mathbf{v}_2 & \cdots & \mathbf{v}_n \\
| & | & & |
\end{bmatrix}.
$$
Then $|\det(A)|$ equals the volume of the parallelepiped spanned by these vectors.

In $\mathbb{R}^2$, $|\det(A)|$ gives the area of the parallelogram spanned by $\mathbf{v}_1, \mathbf{v}_2$.
In $\mathbb{R}^3$, $|\det(A)|$ gives the volume of the parallelepiped spanned
by $\mathbf{v}_1, \mathbf{v}_2, \mathbf{v}_3$.
In higher dimensions, it generalizes to $n$-dimensional volume (hypervolume).

Example 6.4.1.
Let
$$
\mathbf{v}_1 = (1,0,0), \quad \mathbf{v}_2 = (1,1,0), \quad \mathbf{v}_3 = (1,1,1).
$$
Then
$$
A = \begin{bmatrix}
1 & 1 & 1 \\
0 & 1 & 1 \\
0 & 0 & 1
\end{bmatrix}, \quad \det(A) = 1.
$$
So the parallelepiped has volume $1$, even though the vectors are not orthogonal.
Invertibility Test
A square matrix $A$ is invertible if and only if $\det(A) \neq 0$.

If $\det(A) = 0$: the transformation collapses space into a lower dimension (area/volume is zero). No inverse exists.
If $\det(A) \neq 0$: the transformation scales volume by $|\det(A)|$, and is reversible.

Example 6.4.2.
The matrix
$$
B = \begin{bmatrix} 2 & 4 \ 1 & 2 \end{bmatrix}
$$
has determinant $\det(B) = 2 \cdot 2 - 4 \cdot 1 = 0$.
Thus, $B$ is not invertible. Geometrically, the two column vectors are collinear, spanning only a line
in $\mathbb{R}^2$.
Cramer’s Rule
Determinants also provide an explicit formula for solving systems of linear equations when the matrix is invertible.
For $A\mathbf{x} = \mathbf{b}$ with $A \in \mathbb{R}^{n \times n}$:
$$
x_i = \frac{\det(A_i)}{\det(A)},
$$
where $A_i$ is obtained by replacing the $i$-th column of $A$ with $\mathbf{b}$.
While inefficient computationally, Cramer’s rule highlights the determinant’s role in solutions and uniqueness.
Orientation
The sign of $\det(A)$ indicates whether a transformation preserves or reverses orientation. For example, a reflection in
the plane has determinant $-1$, flipping handedness.
Why this matters
Determinants condense key information: they measure scaling, test invertibility, and track orientation. These insights
are indispensable in geometry (areas and volumes), analysis (Jacobian determinants in calculus), and computation (
solving systems and checking singularity).
Exercises 6.4


Compute the area of the parallelogram spanned by $(2,1)$ and $(1,3)$.


Find the volume of the parallelepiped spanned by $(1,0,0), (1,1,0), (1,1,1)$.


Determine whether the matrix $\begin{bmatrix} 1 & 2 \ 3 & 6 \end{bmatrix}$ is invertible. Justify using
determinants.


Use Cramer’s rule to solve
$$
\begin{cases}
x + y = 3, \
2x - y = 0.
\end{cases}
$$


Explain geometrically why a determinant of zero implies no inverse exists.


Chapter 7. Inner Product Spaces
7.1 Inner Products and Norms
To extend the geometric ideas of length, distance, and angle beyond $\mathbb{R}^2$ and $\mathbb{R}^3$, we introduce
inner products. Inner products provide a way of measuring similarity between vectors, while norms derived from them
measure length. These concepts are the foundation of geometry inside vector spaces.
Inner Product
An inner product on a real vector space $V$ is a function
$$
\langle \cdot, \cdot \rangle : V \times V \to \mathbb{R}
$$
that assigns to each pair of vectors $(\mathbf{u}, \mathbf{v})$ a real number, subject to the following properties:


Symmetry:
$\langle \mathbf{u}, \mathbf{v} \rangle = \langle \mathbf{v}, \mathbf{u} \rangle.$


Linearity in the first argument:
$\langle a\mathbf{u} + b\mathbf{w}, \mathbf{v} \rangle = a \langle \mathbf{u}, \mathbf{v} \rangle + b \langle \mathbf{w}, \mathbf{v} \rangle.$


Positive-definiteness:
$\langle \mathbf{v}, \mathbf{v} \rangle \geq 0$, and equality holds if and only if $\mathbf{v} = \mathbf{0}$.


The standard inner product on $\mathbb{R}^n$ is the dot product:
$$
\langle \mathbf{u}, \mathbf{v} \rangle = u_1 v_1 + u_2 v_2 + \cdots + u_n v_n.
$$
Norms
The norm of a vector is its length, defined in terms of the inner product:
$$
|\mathbf{v}| = \sqrt{\langle \mathbf{v}, \mathbf{v} \rangle}.
$$
For the dot product in $\mathbb{R}^n$:
$$
|(x_1, x_2, \dots, x_n)| = \sqrt{x_1^2 + x_2^2 + \cdots + x_n^2}.
$$
Angles Between Vectors
The inner product allows us to define the angle $\theta$ between two nonzero vectors $\mathbf{u}, \mathbf{v}$ by
$$
\cos \theta = \frac{\langle \mathbf{u}, \mathbf{v} \rangle}{|\mathbf{u}| , |\mathbf{v}|}.
$$
Thus, two vectors are orthogonal if $\langle \mathbf{u}, \mathbf{v} \rangle = 0$.
Examples
Example 7.1.1.
In $\mathbb{R}^2$, with $\mathbf{u} = (1,2)$, $\mathbf{v} = (3,4)$:
$$
\langle \mathbf{u}, \mathbf{v} \rangle = 1\cdot 3 + 2\cdot 4 = 11.
$$
$$
|\mathbf{u}| = \sqrt{1^2 + 2^2} = \sqrt{5}, \quad |\mathbf{v}| = \sqrt{3^2 + 4^2} = 5.
$$
So,
$$
\cos \theta = \frac{11}{\sqrt{5}\cdot 5}.
$$
Example 7.1.2.
In the function space $C[0,1]$, the inner product
$$
\langle f, g \rangle = \int_0^1 f(x) g(x), dx
$$
defines a length
$$
|f| = \sqrt{\int_0^1 f(x)^2 dx}.
$$
This generalizes geometry to infinite-dimensional spaces.
Geometric Interpretation

Inner product: measures similarity between vectors.
Norm: length of a vector.
Angle: measure of alignment between two directions.

These concepts unify algebraic operations with geometric intuition.
Why this matters
Inner products and norms allow us to extend geometry into abstract vector spaces. They form the basis of orthogonality,
projections, Fourier series, least squares approximation, and many applications in physics and machine learning.
Exercises 7.1


Compute $\langle (2,-1,3), (1,4,0) \rangle$. Then find the angle between them.


Show that $|(x,y)| = \sqrt{x^2+y^2}$ satisfies the properties of a norm.


In $\mathbb{R}^3$, verify that $(1,1,0)$ and $(1,-1,0)$ are orthogonal.


In $C[0,1]$, compute $\langle f,g \rangle$ for $f(x)=x$, $g(x)=1$.


Prove the Cauchy–Schwarz inequality:
$$
|\langle \mathbf{u}, \mathbf{v} \rangle| \leq |\mathbf{u}| , |\mathbf{v}|.
$$


7.2 Orthogonal Projections
One of the most useful applications of inner products is the notion of orthogonal projection. Projection allows us to
approximate a vector by another lying in a subspace, minimizing error in the sense of distance. This idea underpins
geometry, statistics, and numerical analysis.
Projection onto a Line
Let $\mathbf{u} \in \mathbb{R}^n$ be a nonzero vector. The line spanned by $\mathbf{u}$ is
$$
L = { c\mathbf{u} \mid c \in \mathbb{R} }.
$$
Given a vector $\mathbf{v}$, the projection of $\mathbf{v}$ onto $\mathbf{u}$ is the vector in $L$ closest
to $\mathbf{v}$. Geometrically, it is the shadow of $\mathbf{v}$ on the line.
The formula is
$$
\text{proj}_{\mathbf{u}}(\mathbf{v}) = \frac{\langle \mathbf{v}, \mathbf{u} \rangle}{\langle \mathbf{u}, \mathbf{u} \rangle} , \mathbf{u}.
$$
The error vector $\mathbf{v} - \text{proj}_{\mathbf{u}}(\mathbf{v})$ is orthogonal to $\mathbf{u}$.
Example 7.2.1
Let $\mathbf{u} = (1,2)$, $\mathbf{v} = (3,1)$.
$$
\langle \mathbf{v}, \mathbf{u} \rangle = 3\cdot 1 + 1\cdot 2 = 5, \quad
\langle \mathbf{u}, \mathbf{u} \rangle = 1^2 + 2^2 = 5.
$$
So
$$
\text{proj}_{\mathbf{u}}(\mathbf{v}) = \frac{5}{5}(1,2) = (1,2).
$$
The error vector is $(3,1) - (1,2) = (2,-1)$, which is orthogonal to $(1,2)$.
Projection onto a Subspace
Suppose $W \subseteq \mathbb{R}^n$ is a subspace with orthonormal basis ${ \mathbf{w}_1, \dots, \mathbf{w}_k }$. The
projection of a vector $\mathbf{v}$ onto $W$ is
$$
\text{proj}_{W}(\mathbf{v}) = \langle \mathbf{v}, \mathbf{w}_1 \rangle \mathbf{w}_1 + \cdots + \langle \mathbf{v}, \mathbf{w}_k \rangle \mathbf{w}_k.
$$
This is the unique vector in $W$ closest to $\mathbf{v}$. The difference $\mathbf{v} - \text{proj}_{W}(\mathbf{v})$ is
orthogonal to all of $W$.
Least Squares Approximation
Orthogonal projection explains the method of least squares. To solve an overdetermined
system $A\mathbf{x} \approx \mathbf{b}$, we seek the $\mathbf{x}$ that makes $A\mathbf{x}$ the projection
of $\mathbf{b}$ onto the column space of $A$. This gives the normal equations
$$
A^T A \mathbf{x} = A^T \mathbf{b}.
$$
Thus, least squares is just projection in disguise.
Geometric Interpretation

Projection finds the closest point in a subspace to a given vector.
It minimizes distance (error) in the sense of Euclidean norm.
Orthogonality ensures the error vector points directly away from the subspace.

Why this matters
Orthogonal projection is central in both pure and applied mathematics. It underlies the geometry of subspaces, the
theory of Fourier series, regression in statistics, and approximation methods in numerical linear algebra. Whenever we
fit data with a simpler model, projection is at work.
Exercises 7.2

Compute the projection of $(2,3)$ onto the vector $(1,1)$.
Show that $\mathbf{v} - \text{proj}_{\mathbf{u}}(\mathbf{v})$ is orthogonal to $\mathbf{u}$.
Let $W = \text{span}{(1,0,0), (0,1,0)} \subseteq \mathbb{R}^3$. Find the projection of $(1,2,3)$ onto $W$.
Explain why least squares fitting corresponds to projection onto the column space of $A$.
Prove that projection onto a subspace $W$ is unique: there is exactly one closest vector in $W$ to a
given $\mathbf{v}$.

7.3 Gram–Schmidt Process
The Gram–Schmidt process is a systematic way to turn any linearly independent set of vectors into an orthonormal basis.
This is especially useful because orthonormal bases simplify computations: inner products become simple coordinate
comparisons, and projections take clean forms.
The Idea
Given a linearly independent set of vectors ${\mathbf{v}_1, \mathbf{v}_2, \dots, \mathbf{v}_n}$ in an inner product
space, we want to construct an orthonormal set ${\mathbf{u}_1, \mathbf{u}_2, \dots, \mathbf{u}_n}$ that spans the same
subspace.
We proceed step by step:

Start with $\mathbf{v}_1$, normalize it to get $\mathbf{u}_1$.
Subtract from $\mathbf{v}_2$ its projection onto $\mathbf{u}_1$, leaving a vector orthogonal to $\mathbf{u}_1$.
Normalize to get $\mathbf{u}_2$.
For each $\mathbf{v}_k$, subtract projections onto all previously
constructed $\mathbf{u}1, \dots, \mathbf{u}{k-1}$, then normalize.

The Algorithm
For $k = 1, 2, \dots, n$:
$$
\mathbf{w}_k = \mathbf{v}k - \sum{j=1}^{k-1} \langle \mathbf{v}_k, \mathbf{u}_j \rangle \mathbf{u}_j,
$$
$$
\mathbf{u}_k = \frac{\mathbf{w}_k}{|\mathbf{w}_k|}.
$$
The result ${\mathbf{u}_1, \dots, \mathbf{u}_n}$ is an orthonormal basis of the span of the original vectors.
Example 7.3.1
Take $\mathbf{v}_1 = (1,1,0), \ \mathbf{v}_2 = (1,0,1), \ \mathbf{v}_3 = (0,1,1)$ in $\mathbb{R}^3$.

Normalize $\mathbf{v}_1$:

$$
\mathbf{u}_1 = \frac{1}{\sqrt{2}}(1,1,0).
$$

Subtract projection of $\mathbf{v}_2$ on $\mathbf{u}_1$:

$$
\mathbf{w}_2 = \mathbf{v}_2 - \langle \mathbf{v}_2,\mathbf{u}_1 \rangle \mathbf{u}_1.
$$
$$
\langle \mathbf{v}_2,\mathbf{u}_1 \rangle = \frac{1}{\sqrt{2}}(1\cdot 1 + 0\cdot 1 + 1\cdot 0) = \tfrac{1}{\sqrt{2}}.
$$
So
$$
\mathbf{w}_2 = (1,0,1) - \tfrac{1}{\sqrt{2}}\cdot \tfrac{1}{\sqrt{2}}(1,1,0)
= (1,0,1) - \tfrac{1}{2}(1,1,0)
= \left(\tfrac{1}{2}, -\tfrac{1}{2}, 1\right).
$$
Normalize:
$$
\mathbf{u}_2 = \frac{1}{\sqrt{\tfrac{1}{4}+\tfrac{1}{4}+1}} \left(\tfrac{1}{2}, -\tfrac{1}{2}, 1\right)
= \frac{1}{\sqrt{\tfrac{3}{2}}}\left(\tfrac{1}{2}, -\tfrac{1}{2}, 1\right).
$$

Subtract projections from $\mathbf{v}_3$:

$$
\mathbf{w}_3 = \mathbf{v}_3 - \langle \mathbf{v}_3,\mathbf{u}_1 \rangle \mathbf{u}_1 - \langle \mathbf{v}_3,\mathbf{u}_2 \rangle \mathbf{u}_2.
$$
After computing, normalize to obtain $\mathbf{u}_3$.
The result is an orthonormal basis of the span of ${\mathbf{v}_1,\mathbf{v}_2,\mathbf{v}_3}$.
Geometric Interpretation
Gram–Schmidt is like straightening out a set of vectors: you start with the original directions and adjust each new
vector to be perpendicular to all previous ones. Then you scale to unit length. The process ensures orthogonality while
preserving the span.
Why this matters
Orthonormal bases simplify inner products, projections, and computations in general. They make coordinate systems easier
to work with and are crucial in numerical methods, QR decomposition, Fourier analysis, and statistics (orthogonal
polynomials, principal component analysis).
Exercises 7.3

Apply Gram–Schmidt to $(1,0), (1,1)$ in $\mathbb{R}^2$.
Orthogonalize $(1,1,1), (1,0,1)$ in $\mathbb{R}^3$.
Prove that each step of Gram–Schmidt yields a vector orthogonal to all previous ones.
Show that Gram–Schmidt preserves the span of the original vectors.
Explain how Gram–Schmidt leads to the QR decomposition of a matrix.

7.4 Orthonormal Bases
An orthonormal basis is a basis of a vector space in which all vectors are both orthogonal to each other and have unit
length. Such bases are the most convenient possible coordinate systems: computations involving inner products,
projections, and norms become exceptionally simple.
Definition
A set of vectors ${\mathbf{u}_1, \mathbf{u}_2, \dots, \mathbf{u}_n}$ in an inner product space $V$ is called an
orthonormal basis if


$\langle \mathbf{u}_i, \mathbf{u}_j \rangle = 0$ whenever $i \neq j$ (orthogonality),

$|\mathbf{u}_i| = 1$ for all $i$ (normalization),
The set spans $V$.

Examples
Example 7.4.1. In $\mathbb{R}^2$, the standard basis
$$
\mathbf{e}_1 = (1,0), \quad \mathbf{e}_2 = (0,1)
$$
is orthonormal under the dot product.
Example 7.4.2. In $\mathbb{R}^3$, the standard basis
$$
\mathbf{e}_1 = (1,0,0), \quad \mathbf{e}_2 = (0,1,0), \quad \mathbf{e}_3 = (0,0,1)
$$
is orthonormal.
Example 7.4.3. Fourier basis on functions:
$$
{1, \cos x, \sin x, \cos 2x, \sin 2x, \dots}
$$
is an orthogonal set in the space of square-integrable functions on $[-\pi,\pi]$ with inner product
$$
\langle f,g \rangle = \int_{-\pi}^{\pi} f(x) g(x), dx.
$$
After normalization, it becomes an orthonormal basis.
Properties


Coordinate simplicity: If ${\mathbf{u}_1,\dots,\mathbf{u}_n}$ is an orthonormal basis of $V$, then any
vector $\mathbf{v}\in V$ has coordinates
$$
[\mathbf{v}] = \begin{bmatrix} \langle \mathbf{v}, \mathbf{u}_1 \rangle \ \vdots \ \langle \mathbf{v}, \mathbf{u}_n \rangle \end{bmatrix}.
$$
That is, coordinates are just inner products.


Parseval’s identity:
For any $\mathbf{v} \in V$,
$$
|\mathbf{v}|^2 = \sum_{i=1}^n |\langle \mathbf{v}, \mathbf{u}_i \rangle|^2.
$$


Projections:
The orthogonal projection onto the span of ${\mathbf{u}_1,\dots,\mathbf{u}_k}$ is
$$
\text{proj}(\mathbf{v}) = \sum_{i=1}^k \langle \mathbf{v}, \mathbf{u}_i \rangle \mathbf{u}_i.
$$


Constructing Orthonormal Bases

Start with any linearly independent set, then apply the Gram–Schmidt process to obtain an orthonormal set spanning the
same subspace.
In practice, orthonormal bases are often chosen for numerical stability and simplicity of computation.

Geometric Interpretation
An orthonormal basis is like a perfectly aligned and equally scaled coordinate system. Distances and angles are computed
directly using coordinates without correction factors. They are the ideal rulers of linear algebra.
Why this matters
Orthonormal bases simplify every aspect of linear algebra: solving systems, computing projections, expanding functions,
diagonalizing symmetric matrices, and working with Fourier series. In data science, principal component analysis
produces orthonormal directions capturing maximum variance.
Exercises 7.4

Verify that $(1/\sqrt{2})(1,1)$ and $(1/\sqrt{2})(1,-1)$ form an orthonormal basis of $\mathbb{R}^2$.
Express $(3,4)$ in terms of the orthonormal basis ${(1/\sqrt{2})(1,1), (1/\sqrt{2})(1,-1)}$.
Prove Parseval’s identity for $\mathbb{R}^n$ with the dot product.
Find an orthonormal basis for the plane $x+y+z=0$ in $\mathbb{R}^3$.
Explain why orthonormal bases are numerically more stable than arbitrary bases in computations.

Chapter 8. Eigenvalues and eigenvectors
8.1 Definitions and Intuition
The concepts of eigenvalues and eigenvectors reveal the most fundamental behavior of linear transformations. They
identify the special directions in which a transformation acts by simple stretching or compressing, without rotation or
distortion.
Definition
Let $T: V \to V$ be a linear transformation on a vector space $V$. A nonzero vector $\mathbf{v} \in V$ is called an
eigenvector of $T$ if
$$
T(\mathbf{v}) = \lambda \mathbf{v}
$$
for some scalar $\lambda \in \mathbb{R}$ (or $\mathbb{C}$). The scalar $\lambda$ is the eigenvalue corresponding
to $\mathbf{v}$.
Equivalently, if $A$ is the matrix of $T$, then eigenvalues and eigenvectors satisfy
$$
A\mathbf{v} = \lambda \mathbf{v}.
$$
Basic Examples
Example 8.1.1.
Let
$$
A = \begin{bmatrix} 2 & 0 \ 0 & 3 \end{bmatrix}.
$$
Then
$$
A(1,0)^T = 2(1,0)^T, \quad A(0,1)^T = 3(0,1)^T.
$$
So $(1,0)$ is an eigenvector with eigenvalue $2$, and $(0,1)$ is an eigenvector with eigenvalue $3$.
Example 8.1.2.
Rotation matrix in $\mathbb{R}^2$:
$$
R_\theta = \begin{bmatrix} \cos\theta & -\sin\theta \ \sin\theta & \cos\theta \end{bmatrix}.
$$
If $\theta \neq 0, \pi$, $R_\theta$ has no real eigenvalues: every vector is rotated, not scaled. Over $\mathbb{C}$,
however, it has eigenvalues $e^{i\theta}, e^{-i\theta}$.
Algebraic Formulation
Eigenvalues arise from solving the characteristic equation:
$$
\det(A - \lambda I) = 0.
$$
This polynomial in $\lambda$ is the characteristic polynomial. Its roots are the eigenvalues.
Geometric Intuition

Eigenvectors are directions that remain unchanged in orientation under a transformation; only their length is scaled.
Eigenvalues tell us the scaling factor along those directions.
If a matrix has many independent eigenvectors, it can often be simplified (diagonalized) by changing basis.

Applications in Geometry and Science

Stretching along principal axes of an ellipse (quadratic forms).
Stable directions of dynamical systems.
Principal components in statistics and machine learning.
Quantum mechanics, where observables correspond to operators with eigenvalues.

Why this matters
Eigenvalues and eigenvectors are a bridge between algebra and geometry. They provide a lens for understanding linear
transformations in their simplest form. Nearly every application of linear algebra-differential equations, statistics,
physics, computer science-relies on eigen-analysis.
Exercises 8.1

Find the eigenvalues and eigenvectors of
$\begin{bmatrix} 4 & 0 \ 0 & -1 \end{bmatrix}$.
Show that every scalar multiple of an eigenvector is again an eigenvector for the same eigenvalue.
Verify that the rotation matrix $R_\theta$ has no real eigenvalues unless $\theta = 0$ or $\pi$.
Compute the characteristic polynomial of
$\begin{bmatrix} 1 & 2 \ 2 & 1 \end{bmatrix}$.
Explain geometrically what eigenvectors and eigenvalues represent for the shear matrix
$\begin{bmatrix} 1 & 1 \ 0 & 1 \end{bmatrix}$.

8.2 Diagonalization
A central goal in linear algebra is to simplify the action of a matrix by choosing a good basis. Diagonalization is the
process of rewriting a matrix so that it acts by simple scaling along independent directions. This makes computations
such as powers, exponentials, and solving differential equations far easier.
Definition
A square matrix $A \in \mathbb{R}^{n \times n}$ is diagonalizable if there exists an invertible matrix $P$ such that
$$
P^{-1} A P = D,
$$
where $D$ is a diagonal matrix.
The diagonal entries of $D$ are eigenvalues of $A$, and the columns of $P$ are the corresponding eigenvectors.
When is a Matrix Diagonalizable?

A matrix is diagonalizable if it has $n$ linearly independent eigenvectors.
Equivalently, the sum of the dimensions of its eigenspaces equals $n$.
Symmetric matrices (over $\mathbb{R}$) are always diagonalizable, with an orthonormal basis of eigenvectors.

Example 8.2.1
Let
$$
A = \begin{bmatrix} 4 & 1 \ 0 & 2 \end{bmatrix}.
$$

Characteristic polynomial:

$$
\det(A - \lambda I) = (4-\lambda)(2-\lambda).
$$
So eigenvalues are $\lambda_1 = 4$, $\lambda_2 = 2$.

Eigenvectors:


For $\lambda = 4$, solve $(A-4I)\mathbf{v}=0$:
$\begin{bmatrix} 0 & 1 \ 0 & -2 \end{bmatrix}\mathbf{v} = 0$, giving $\mathbf{v}_1 = (1,0)$.
For $\lambda = 2$: $(A-2I)\mathbf{v}=0$, giving $\mathbf{v}_2 = (1,-2)$.


Construct $P = \begin{bmatrix} 1 & 1 \ 0 & -2 \end{bmatrix}$. Then

$$
P^{-1} A P = \begin{bmatrix} 4 & 0 \ 0 & 2 \end{bmatrix}.
$$
Thus, $A$ is diagonalizable.
Why Diagonalize?


Computing powers:
If $A = P D P^{-1}$, then
$$
A^k = P D^k P^{-1}.
$$
Since $D$ is diagonal, $D^k$ is easy to compute.


Matrix exponentials:
$e^A = P e^D P^{-1}$, useful in solving differential equations.


Understanding geometry:
Diagonalization reveals the directions along which a transformation stretches or compresses space independently.


Non-Diagonalizable Example
Not all matrices can be diagonalized.
$$
A = \begin{bmatrix} 1 & 1 \ 0 & 1 \end{bmatrix}
$$
has only one eigenvalue $\lambda = 1$, with eigenspace dimension 1. Since $n=2$ but we only have 1 independent
eigenvector, $A$ is not diagonalizable.
Geometric Interpretation
Diagonalization means we have found a basis of eigenvectors. In this basis, the matrix acts by simple scaling along each
coordinate axis. It transforms complicated motion into independent 1D motions.
Why this matters
Diagonalization is a cornerstone of linear algebra. It simplifies computation, reveals structure, and is the starting
point for the spectral theorem, Jordan form, and many applications in physics, engineering, and data science.
Exercises 8.2


Diagonalize
$$
A = \begin{bmatrix} 2 & 0 \ 0 & 3 \end{bmatrix}.
$$


Determine whether
$$
A = \begin{bmatrix} 1 & 1 \ 0 & 1 \end{bmatrix}
$$
is diagonalizable. Why or why not?


Find $A^5$ for
$$
A = \begin{bmatrix} 4 & 1 \ 0 & 2 \end{bmatrix}
$$
using diagonalization.


Show that any $n \times n$ matrix with $n$ distinct eigenvalues is diagonalizable.


Explain why real symmetric matrices are always diagonalizable.


8.3 Characteristic Polynomials
The key to finding eigenvalues is the characteristic polynomial of a matrix. This polynomial encodes the values
of $\lambda$ for which the matrix $A - \lambda I$ fails to be invertible.
Definition
For an $n \times n$ matrix $A$, the characteristic polynomial is
$$
p_A(\lambda) = \det(A - \lambda I).
$$
The roots of $p_A(\lambda)$ are the eigenvalues of $A$.
Examples
Example 8.3.1.
Let
$$
A = \begin{bmatrix} 2 & 1 \ 1 & 2 \end{bmatrix}.
$$
Then
$$
p_A(\lambda) = \det!\begin{bmatrix} 2-\lambda & 1 \ 1 & 2-\lambda \end{bmatrix}
= (2-\lambda)^2 - 1 = \lambda^2 - 4\lambda + 3.
$$
Thus eigenvalues are $\lambda = 1, 3$.
Example 8.3.2.
For
$$
A = \begin{bmatrix} 0 & -1 \ 1 & 0 \end{bmatrix}
$$
(rotation by 90°),
$$
p_A(\lambda) = \det!\begin{bmatrix} -\lambda & -1 \ 1 & -\lambda \end{bmatrix}
= \lambda^2 + 1.
$$
Eigenvalues are $\lambda = \pm i$. No real eigenvalues exist, consistent with pure rotation.
Example 8.3.3.
For a triangular matrix
$$
A = \begin{bmatrix} 2 & 1 & 0 \ 0 & 3 & 5 \ 0 & 0 & 4 \end{bmatrix},
$$
the determinant is simply the product of diagonal entries minus $\lambda$:
$$
p_A(\lambda) = (2-\lambda)(3-\lambda)(4-\lambda).
$$
So eigenvalues are $2, 3, 4$.
Properties


The characteristic polynomial of an $n \times n$ matrix has degree $n$.


The sum of the eigenvalues (counted with multiplicity) equals the trace of $A$:
$$
\text{tr}(A) = \lambda_1 + \cdots + \lambda_n.
$$


The product of the eigenvalues equals the determinant of $A$:
$$
\det(A) = \lambda_1 \cdots \lambda_n.
$$


Similar matrices have the same characteristic polynomial, hence the same eigenvalues.


Geometric Interpretation
The characteristic polynomial captures when $A - \lambda I$ collapses space: its determinant is zero precisely when the
transformation $A - \lambda I$ is singular. Thus, eigenvalues mark the critical scalings where the matrix loses
invertibility.
Why this matters
Characteristic polynomials provide the computational tool to extract eigenvalues. They connect matrix invariants (trace
and determinant) with geometry, and form the foundation for diagonalization, spectral theorems, and stability analysis
in dynamical systems.
Exercises 8.3


Compute the characteristic polynomial of
$$
A = \begin{bmatrix} 4 & 2 \ 1 & 3 \end{bmatrix}.
$$


Verify that the sum of the eigenvalues of
$\begin{bmatrix} 5 & 0 \ 0 & -2 \end{bmatrix}$
equals its trace, and their product equals its determinant.


Show that for any triangular matrix, the eigenvalues are just the diagonal entries.


Prove that if $A$ and $B$ are similar matrices, then $p_A(\lambda) = p_B(\lambda)$.


Compute the characteristic polynomial of
$\begin{bmatrix} 1 & 1 & 0 \ 0 & 1 & 1 \ 0 & 0 & 1 \end{bmatrix}$.


8.4 Applications (Differential Equations, Markov Chains)
Eigenvalues and eigenvectors are not only central to the theory of linear algebra-they are indispensable tools across
mathematics and applied science. Two classic applications are solving systems of differential equations and analyzing
Markov chains.
Linear Differential Equations
Consider the system
$$
\frac{d\mathbf{x}}{dt} = A \mathbf{x},
$$
where $A$ is an $n \times n$ matrix and $\mathbf{x}(t)$ is a vector-valued function.
If $\mathbf{v}$ is an eigenvector of $A$ with eigenvalue $\lambda$, then the function
$$
\mathbf{x}(t) = e^{\lambda t}\mathbf{v}
$$
is a solution.


Eigenvalues determine the growth or decay rate:

If $\lambda &lt; 0$, solutions decay (stable).
If $\lambda &gt; 0$, solutions grow (unstable).
If $\lambda$ is complex, oscillations occur.



By combining eigenvector solutions, we can solve general initial conditions.
Example 8.4.1.
Let
$$
A = \begin{bmatrix} 2 & 0 \ 0 & -1 \end{bmatrix}.
$$
Then eigenvalues are $2, -1$ with eigenvectors $(1,0)$, $(0,1)$. Solutions are
$$
\mathbf{x}(t) = c_1 e^{2t}(1,0) + c_2 e^{-t}(0,1).
$$
Thus one component grows exponentially, the other decays.
Markov Chains
A Markov chain is described by a stochastic matrix $P$, where each column sums to 1 and entries are nonnegative.
If $\mathbf{x}_k$ represents the probability distribution after $k$ steps, then
$$
\mathbf{x}_{k+1} = P \mathbf{x}_k.
$$
Iterating gives
$$
\mathbf{x}_k = P^k \mathbf{x}_0.
$$
Understanding long-term behavior reduces to analyzing powers of $P$.

The eigenvalue $\lambda = 1$ always exists. Its eigenvector gives the steady-state distribution.
All other eigenvalues satisfy $|\lambda| \leq 1$. Their influence decays as $k \to \infty$.

Example 8.4.2.
Consider
$$
P = \begin{bmatrix} 0.9 & 0.5 \ 0.1 & 0.5 \end{bmatrix}.
$$
Eigenvalues are $\lambda_1 = 1$, $\lambda_2 = 0.4$. The eigenvector for $\lambda = 1$ is proportional to $(5,1)$.
Normalizing gives the steady state
$$
\pi = \left(\tfrac{5}{6}, \tfrac{1}{6}\right).
$$
Thus, regardless of the starting distribution, the chain converges to $\pi$.
Geometric Interpretation

In differential equations, eigenvalues determine the time evolution: exponential growth, decay, or oscillation.
In Markov chains, eigenvalues determine the long-term equilibrium of stochastic processes.

Why this matters
Eigenvalue methods turn complex iterative or dynamical systems into tractable problems. In physics, engineering, and
finance, they describe stability and resonance. In computer science and statistics, they power algorithms from Google’s
PageRank to modern machine learning.
Exercises 8.4


Solve $\tfrac{d}{dt}\mathbf{x} = \begin{bmatrix} 3 & 0 \ 0 & -2 \end{bmatrix}\mathbf{x}$.


Show that if $A$ has a complex eigenvalue $\alpha \pm i\beta$, then solutions
of $\tfrac{d}{dt}\mathbf{x} = A\mathbf{x}$ involve oscillations of frequency $\beta$.


Find the steady-state distribution of
$$
P = \begin{bmatrix} 0.7 & 0.2 \ 0.3 & 0.8 \end{bmatrix}.
$$


Prove that for any stochastic matrix $P$, $1$ is always an eigenvalue.


Explain why all eigenvalues of a stochastic matrix satisfy $|\lambda| \leq 1$.


Chapter 9. Quadratic Forms and Spectral Theorems
9.1 Quadratic Forms
A quadratic form is a polynomial of degree two in several variables, expressed neatly using matrices. Quadratic forms
appear throughout mathematics: in optimization, geometry of conic sections, statistics (variance), and physics (energy
functions).
Definition
Let $A$ be an $n \times n$ symmetric matrix and $\mathbf{x} \in \mathbb{R}^n$. The quadratic form associated with $A$ is
$$
Q(\mathbf{x}) = \mathbf{x}^T A \mathbf{x}.
$$
Expanded,
$$
Q(\mathbf{x}) = \sum_{i=1}^n \sum_{j=1}^n a_{ij} x_i x_j.
$$
Because $A$ is symmetric ($a_{ij} = a_{ji}$), the cross-terms can be grouped naturally.
Examples
Example 9.1.1.
For
$$
A = \begin{bmatrix} 2 & 1 \ 1 & 3 \end{bmatrix}, \quad \mathbf{x} = \begin{bmatrix} x \ y \end{bmatrix},
$$
$$
Q(x,y) = \begin{bmatrix} x & y \end{bmatrix}
\begin{bmatrix} 2 & 1 \ 1 & 3 \end{bmatrix}
\begin{bmatrix} x \ y \end{bmatrix}
= 2x^2 + 2xy + 3y^2.
$$
Example 9.1.2.
The quadratic form
$$
Q(x,y) = x^2 + y^2
$$
corresponds to the matrix $A = I_2$. It measures squared Euclidean distance from the origin.
Example 9.1.3.
The conic section equation
$$
4x^2 + 2xy + 5y^2 = 1
$$
is described by the quadratic form $\mathbf{x}^T A \mathbf{x} = 1$ with
$$
A = \begin{bmatrix} 4 & 1 \ 1 & 5 \end{bmatrix}.
$$
Diagonalization of Quadratic Forms
By choosing a new basis consisting of eigenvectors of $A$, we can rewrite the quadratic form without cross terms.
If $A = PDP^{-1}$ with $D$ diagonal, then
$$
Q(\mathbf{x}) = \mathbf{x}^T A \mathbf{x} = (P^{-1}\mathbf{x})^T D (P^{-1}\mathbf{x}).
$$
Thus quadratic forms can always be expressed as a sum of weighted squares:
$$
Q(\mathbf{y}) = \lambda_1 y_1^2 + \cdots + \lambda_n y_n^2,
$$
where $\lambda_i$ are the eigenvalues of $A$.
Geometric Interpretation
Quadratic forms describe geometric shapes:

In 2D: ellipses, parabolas, hyperbolas.
In 3D: ellipsoids, paraboloids, hyperboloids.
In higher dimensions: generalizations of ellipsoids.

Diagonalization aligns the coordinate axes with the principal axes of the shape.
Why this matters
Quadratic forms unify geometry and algebra. They are central in optimization (minimizing energy functions), statistics (
covariance matrices and variance), mechanics (kinetic energy), and numerical analysis. Understanding quadratic forms
leads directly to the spectral theorem.
Exercises 9.1

Write the quadratic form $Q(x,y) = 3x^2 + 4xy + y^2$ as $\mathbf{x}^T A \mathbf{x}$ for some symmetric matrix $A$.
For $A = \begin{bmatrix} 1 & 2 \ 2 & 1 \end{bmatrix}$, compute $Q(x,y)$ explicitly.
Diagonalize the quadratic form $Q(x,y) = 2x^2 + 2xy + 3y^2$.
Identify the conic section given by $Q(x,y) = x^2 - y^2$.
Show that if $A$ is symmetric, quadratic forms defined by $A$ and $A^T$ are identical.

9.2 Positive Definite Matrices
Quadratic forms are especially important when their associated matrices are positive definite, since these guarantee
positivity of energy, distance, or variance. Positive definiteness is a cornerstone in optimization, numerical analysis,
and statistics.
Definition
A symmetric matrix $A \in \mathbb{R}^{n \times n}$ is called:


Positive definite if
$$
\mathbf{x}^T A \mathbf{x} > 0 \quad \text{for all nonzero } \mathbf{x} \in \mathbb{R}^n.
$$


Positive semidefinite if
$$
\mathbf{x}^T A \mathbf{x} \geq 0 \quad \text{for all } \mathbf{x}.
$$


Similarly, negative definite (always < 0) and indefinite (can be both < 0 and > 0) matrices are defined.
Examples
Example 9.2.1.
$$
A = \begin{bmatrix} 2 & 0 \ 0 & 3 \end{bmatrix}
$$
is positive definite, since
$$
Q(x,y) = 2x^2 + 3y^2 > 0
$$
for all $(x,y) \neq (0,0)$.
Example 9.2.2.
$$
A = \begin{bmatrix} 1 & 2 \ 2 & 1 \end{bmatrix}
$$
has quadratic form
$$
Q(x,y) = x^2 + 4xy + y^2.
$$
This matrix is not positive definite, since $Q(1,-1) = -2 &lt; 0$.
Characterizations
For a symmetric matrix $A$:


Eigenvalue test: $A$ is positive definite if and only if all eigenvalues of $A$ are positive.


Principal minors test (Sylvester’s criterion): $A$ is positive definite if and only if all leading principal minors (
determinants of top-left $k \times k$ submatrices) are positive.


Cholesky factorization: $A$ is positive definite if and only if it can be written as
$$
A = R^T R,
$$
where $R$ is an upper triangular matrix with positive diagonal entries.


Geometric Interpretation

Positive definite matrices correspond to quadratic forms that define ellipsoids centered at the origin.
Positive semidefinite matrices define flattened ellipsoids (possibly degenerate).
Indefinite matrices define hyperbolas or saddle-shaped surfaces.

Applications

Optimization: Hessians of convex functions are positive semidefinite; strict convexity corresponds to positive
definite Hessians.
Statistics: Covariance matrices are positive semidefinite.
Numerical methods: Cholesky decomposition is widely used to solve systems with positive definite matrices efficiently.

Why this matters
Positive definiteness provides stability and guarantees in mathematics and computation. It ensures energy functions are
bounded below, optimization problems have unique solutions, and statistical models are meaningful.
Exercises 9.2


Use Sylvester’s criterion to check whether
$$
A = \begin{bmatrix} 2 & -1 \ -1 & 2 \end{bmatrix}
$$
is positive definite.


Determine whether
$$
A = \begin{bmatrix} 0 & 1 \ 1 & 0 \end{bmatrix}
$$
is positive definite, semidefinite, or indefinite.


Find the eigenvalues of
$$
A = \begin{bmatrix} 4 & 2 \ 2 & 3 \end{bmatrix},
$$
and use them to classify definiteness.


Prove that all diagonal matrices with positive entries are positive definite.


Show that if $A$ is positive definite, then so is $P^T A P$ for any invertible matrix $P$.


9.3 Spectral Theorem
The spectral theorem is one of the most powerful results in linear algebra. It states that symmetric matrices can always
be diagonalized by an orthogonal basis of eigenvectors. This links algebra (eigenvalues), geometry (orthogonal
directions), and applications (stability, optimization, statistics).
Statement of the Spectral Theorem
If $A \in \mathbb{R}^{n \times n}$ is symmetric ($A^T = A$), then:


All eigenvalues of $A$ are real.


There exists an orthonormal basis of $\mathbb{R}^n$ consisting of eigenvectors of $A$.


Thus, $A$ can be written as
$$
A = Q \Lambda Q^T,
$$
where $Q$ is an orthogonal matrix ($Q^T Q = I$) and $\Lambda$ is diagonal with eigenvalues of $A$ on the diagonal.


Consequences

Symmetric matrices are always diagonalizable, and the diagonalization is numerically stable.
Quadratic forms $\mathbf{x}^T A \mathbf{x}$ can be expressed in terms of eigenvalues and eigenvectors, showing
ellipsoids aligned with eigen-directions.
Positive definiteness can be checked by confirming that all eigenvalues are positive.

Example 9.3.1
Let
$$
A = \begin{bmatrix} 2 & 1 \ 1 & 2 \end{bmatrix}.
$$

Characteristic polynomial:

$$
p(\lambda) = (2-\lambda)^2 - 1 = \lambda^2 - 4\lambda + 3.
$$
Eigenvalues: $\lambda_1 = 1, \ \lambda_2 = 3$.

Eigenvectors:


For $\lambda=1$: solve $(A-I)\mathbf{v} = 0$, giving $(1,-1)$.
For $\lambda=3$: solve $(A-3I)\mathbf{v} = 0$, giving $(1,1)$.


Normalize eigenvectors:

$$
\mathbf{u}_1 = \tfrac{1}{\sqrt{2}}(1,-1), \quad \mathbf{u}_2 = \tfrac{1}{\sqrt{2}}(1,1).
$$

Then

$$
Q = \begin{bmatrix} \tfrac{1}{\sqrt{2}} & \tfrac{1}{\sqrt{2}} [6pt] -\tfrac{1}{\sqrt{2}} & \tfrac{1}{\sqrt{2}} \end{bmatrix}, \quad
\Lambda = \begin{bmatrix} 1 & 0 \ 0 & 3 \end{bmatrix}.
$$
So
$$
A = Q \Lambda Q^T.
$$
Geometric Interpretation
The spectral theorem says every symmetric matrix acts like independent scaling along orthogonal directions. In geometry,
this corresponds to stretching space along perpendicular axes.

Ellipses, ellipsoids, and quadratic surfaces can be fully understood via eigenvalues and eigenvectors.
Orthogonality ensures directions remain perpendicular after transformation.

Applications

Optimization: The spectral theorem underlies classification of critical points via eigenvalues of the Hessian.
PCA (Principal Component Analysis): Data covariance matrices are symmetric, and PCA finds orthogonal directions of
maximum variance.
Differential equations & physics: Symmetric operators correspond to measurable quantities with real eigenvalues (
stability, energy).

Why this matters
The spectral theorem guarantees that symmetric matrices are as simple as possible: they can always be analyzed in terms
of real, orthogonal eigenvectors. This provides both deep theoretical insight and powerful computational tools.
Exercises 9.3


Diagonalize
$$
A = \begin{bmatrix} 4 & 2 \ 2 & 3 \end{bmatrix}
$$
using the spectral theorem.


Prove that all eigenvalues of a real symmetric matrix are real.


Show that eigenvectors corresponding to distinct eigenvalues of a symmetric matrix are orthogonal.


Explain geometrically how the spectral theorem describes ellipsoids defined by quadratic forms.


Apply the spectral theorem to the covariance matrix
$$
\Sigma = \begin{bmatrix} 2 & 1 \ 1 & 2 \end{bmatrix},
$$
and interpret the eigenvectors as principal directions of variance.


9.4 Principal Component Analysis (PCA)
Principal Component Analysis (PCA) is a widely used technique in data science, machine learning, and statistics. At its
core, PCA is an application of the spectral theorem to covariance matrices: it finds orthogonal directions (principal
components) that capture the maximum variance in data.
The Idea
Given a dataset of vectors $\mathbf{x}_1, \mathbf{x}_2, \dots, \mathbf{x}_m \in \mathbb{R}^n$:


Center the data by subtracting the mean vector $\bar{\mathbf{x}}$.


Form the covariance matrix
$$
\Sigma = \frac{1}{m} \sum_{i=1}^m (\mathbf{x}_i - \bar{\mathbf{x}})(\mathbf{x}_i - \bar{\mathbf{x}})^T.
$$


Apply the spectral theorem: $\Sigma = Q \Lambda Q^T$.

Columns of $Q$ are orthonormal eigenvectors (principal directions).
Eigenvalues in $\Lambda$ measure variance explained by each direction.



The first principal component is the eigenvector corresponding to the largest eigenvalue; it is the direction of maximum
variance.
Example 9.4.1
Suppose we have two-dimensional data points roughly aligned along the line $y = x$. The covariance matrix is
approximately
$$
\Sigma = \begin{bmatrix} 2 & 1.9 \ 1.9 & 2 \end{bmatrix}.
$$
Eigenvalues are about $3.9$ and $0.1$. The eigenvector for $\lambda = 3.9$ is approximately $(1,1)/\sqrt{2}$.

First principal component: the line $y = x$.
Most variance lies along this direction.
Second component is nearly orthogonal ($y = -x$), but variance there is tiny.

Thus PCA reduces the data to essentially one dimension.
Applications of PCA

Dimensionality reduction: Represent data with fewer features while retaining most variance.
Noise reduction: Small eigenvalues correspond to noise; discarding them filters data.
Visualization: Projecting high-dimensional data onto top 2 or 3 principal components reveals structure.
Compression: PCA is used in image and signal compression.

Connection to the Spectral Theorem
The covariance matrix $\Sigma$ is always symmetric and positive semidefinite. Hence by the spectral theorem, it has an
orthonormal basis of eigenvectors and nonnegative real eigenvalues. PCA is nothing more than re-expressing data in this
eigenbasis.
Why this matters
PCA demonstrates how abstract linear algebra directly powers modern applications. Eigenvalues and eigenvectors give a
practical method for simplifying data, revealing patterns, and reducing complexity. It is one of the most important
algorithms derived from the spectral theorem.
Exercises 9.4

Show that the covariance matrix is symmetric and positive semidefinite.
Compute the covariance matrix of the dataset $(1,2), (2,3), (3,4)$, and find its eigenvalues and eigenvectors.
Explain why the first principal component captures the maximum variance.
In image compression, explain how PCA can reduce storage by keeping only the top $k$ principal components.
Prove that the sum of the eigenvalues of the covariance matrix equals the total variance of the dataset.

Chapter 10. Linear Algebra in Practice
10.1 Computer Graphics (Rotations, Projections)
Linear algebra is the language of modern computer graphics. Every image rendered on a screen, every 3D model rotated or
projected, is ultimately the result of applying matrices to vectors. Rotations, reflections, scalings, and projections
are all linear transformations, making matrices the natural tool for manipulating geometry.
Rotations in 2D
A counterclockwise rotation by an angle $\theta$ in the plane is represented by
$$
R_\theta =
\begin{bmatrix}
\cos\theta & -\sin\theta \\
\sin\theta & \cos\theta
\end{bmatrix}.
$$
For any vector $\mathbf{v} \in \mathbb{R}^2$, the rotated vector is
$$
\mathbf{v}' = R_\theta \mathbf{v}.
$$
This preserves lengths and angles, since $R_\theta$ is orthogonal with determinant $1$.
Rotations in 3D
In three dimensions, rotations are represented by $3 \times 3$ orthogonal matrices with determinant $1$. For example, a
rotation about the $z$-axis is
$$
R_z(\theta) =
\begin{bmatrix}
\cos\theta & -\sin\theta & 0 \\
\sin\theta & \cos\theta & 0 \\
0 & 0 & 1
\end{bmatrix}.
$$
Similar formulas exist for rotations about the $x$- and $y$-axes.
More general 3D rotations can be described by axis–angle representation or quaternions, but the underlying idea is still
linear transformations represented by matrices.
Projections
To display 3D objects on a 2D screen, we use projections:


Orthogonal projection: drops the $z$-coordinate, mapping $(x,y,z) \mapsto (x,y)$.
$$
P = \begin{bmatrix}
1 & 0 & 0 \
0 & 1 & 0
\end{bmatrix}.
$$


Perspective projection: mimics the effect of a camera. A point $(x,y,z)$ projects to
$$
\left(\frac{x}{z}, \frac{y}{z}\right),
$$
capturing how distant objects appear smaller.


These operations are linear (orthogonal projection) or nearly linear (perspective projection becomes linear in
homogeneous coordinates).
Homogeneous Coordinates
To unify translations and projections with linear transformations, computer graphics uses homogeneous coordinates. A 3D
point $(x,y,z)$ is represented as a 4D vector $(x,y,z,1)$. Transformations are then $4 \times 4$ matrices, which can
represent rotations, scalings, and translations in a single framework.
Example: Translation by $(a,b,c)$:
$$
T = \begin{bmatrix}
1 & 0 & 0 & a \\
0 & 1 & 0 & b \\
0 & 0 & 1 & c \\
0 & 0 & 0 & 1
\end{bmatrix}.
$$
Geometric Interpretation

Rotations preserve shape and size, only changing orientation.
Projections reduce dimension: from 3D world space to 2D screen space.
Homogeneous coordinates allow us to combine multiple transformations (rotation + translation + projection) into a
single matrix multiplication.

Why this matters
Linear algebra enables all real-time graphics: video games, simulations, CAD software, and movie effects. By chaining
simple matrix operations, complex transformations are applied efficiently to millions of points per second.
Exercises 10.1

Write the rotation matrix for a 90° counterclockwise rotation in $\mathbb{R}^2$. Apply it to $(1,0)$.
Rotate the point $(1,1,0)$ about the $z$-axis by 180°.
Show that the determinant of any 2D or 3D rotation matrix is 1.
Derive the orthogonal projection matrix from $\mathbb{R}^3$ to the $xy$-plane.
Explain how homogeneous coordinates allow translations to be represented as matrix multiplications.

10.2 Data Science (Dimensionality Reduction, Least Squares)
Linear algebra provides the foundation for many data science techniques. Two of the most important are dimensionality
reduction, where high-dimensional datasets are compressed while preserving essential information, and the least squares
method, which underlies regression and model fitting.
Dimensionality Reduction
High-dimensional data often contains redundancy: many features are correlated, meaning the data essentially lies near a
lower-dimensional subspace. Dimensionality reduction identifies these subspaces.


PCA (Principal Component Analysis):
As introduced earlier, PCA diagonalizes the covariance matrix of the data.

Eigenvectors (principal components) define orthogonal directions of maximum variance.
Eigenvalues measure how much variance lies along each direction.
Keeping only the top $k$ components reduces data from $n$-dimensional space to $k$-dimensional space while
retaining most variability.



Example 10.2.1. A dataset of 1000 images, each with 1024 pixels, may have most variance captured by just 50 eigenvectors
of the covariance matrix. Projecting onto these components compresses the data while preserving essential features.
Least Squares
Often, we have more equations than unknowns-an overdetermined system:
$$
A\mathbf{x} \approx \mathbf{b}, \quad A \in \mathbb{R}^{m \times n}, \ m > n.
$$
An exact solution may not exist. Instead, we seek $\mathbf{x}$ that minimizes the error
$$
|A\mathbf{x} - \mathbf{b}|^2.
$$
This leads to the normal equations:
$$
A^T A \mathbf{x} = A^T \mathbf{b}.
$$
The solution is the orthogonal projection of $\mathbf{b}$ onto the column space of $A$.
Example 10.2.2
Fit a line $y = mx + c$ to data points $(x_i, y_i)$.
Matrix form:
$$
A = \begin{bmatrix}
x_1 & 1 \\
x_2 & 1 \\
\vdots & \vdots \\
x_m & 1
\end{bmatrix},
\quad
\mathbf{b} = \begin{bmatrix} y_1 \ y_2 \ \vdots \ y_m \end{bmatrix},
\quad
\mathbf{x} = \begin{bmatrix} m \ c \end{bmatrix}.
$$
Solve $A^T A \mathbf{x} = A^T \mathbf{b}$. This yields the best-fit line in the least squares sense.
Geometric Interpretation

Dimensionality reduction: Find the best subspace capturing most variance.
Least squares: Project the target vector onto the subspace spanned by predictors.

Both are projection problems, solved using inner products and orthogonality.
Why this matters
Dimensionality reduction makes large datasets tractable, filters noise, and reveals structure. Least squares fitting
powers regression, statistics, and machine learning. Both rely directly on eigenvalues, eigenvectors, and
projections-core tools of linear algebra.
Exercises 10.2

Explain why PCA reduces noise in datasets by discarding small eigenvalue components.
Compute the least squares solution to fitting a line through $(0,0), (1,1), (2,2)$.
Show that the least squares solution is unique if and only if $A^T A$ is invertible.
Prove that the least squares solution minimizes the squared error by projection arguments.
Apply PCA to the data points $(1,0), (2,1), (3,2)$ and find the first principal component.

10.3 Networks and Markov Chains
Graphs and networks provide a natural setting where linear algebra comes to life. From modeling flows and connectivity
to predicting long-term behavior, matrices translate network structure into algebraic form. Markov chains, already
introduced in Section 8.4, are a central example of networks evolving over time.
Adjacency Matrices
A network (graph) with $n$ nodes can be represented by an adjacency matrix $A \in \mathbb{R}^{n \times n}$:
$$
A_{ij} =
\begin{cases}
1 & \text{if there is an edge from node (i) to node (j)} \\
0 & \text{otherwise.}
\end{cases}
$$
For weighted graphs, entries may be positive weights instead of $0/1$.

The number of walks of length $k$ from node $i$ to node $j$ is given by the entry $(A^k)_{ij}$.
Powers of adjacency matrices thus encode connectivity over time.

Laplacian Matrices
Another important matrix is the graph Laplacian:
$$
L = D - A,
$$
where $D$ is the diagonal degree matrix ($D_{ii} = \text{degree}(i)$).


$L$ is symmetric and positive semidefinite.
The smallest eigenvalue is always $0$, with eigenvector $(1,1,\dots,1)$.
The multiplicity of eigenvalue $0$ equals the number of connected components in the graph.

This connection between eigenvalues and connectivity forms the basis of spectral graph theory.
Markov Chains on Graphs
A Markov chain can be viewed as a random walk on a graph. If $P$ is the transition matrix where $P_{ij}$ is the
probability of moving from node $i$ to node $j$, then
$$
\mathbf{x}_{k+1} = P \mathbf{x}_k
$$
describes the distribution of positions after $k$ steps.

The steady-state distribution is given by the eigenvector of $P$ with eigenvalue $1$.
The speed of convergence depends on the gap between the largest eigenvalue (which is always $1$) and the second
largest eigenvalue.

Example 10.3.1
Consider a simple 3-node cycle graph:
$$
P = \begin{bmatrix}
0 & 1 & 0 \\
0 & 0 & 1 \\
1 & 0 & 0
\end{bmatrix}.
$$
This Markov chain cycles deterministically among the nodes. Eigenvalues are the cube roots of
unity: $1, e^{2\pi i/3}, e^{4\pi i/3}$. The eigenvalue $1$ corresponds to the steady state, which is the uniform
distribution $(1/3,1/3,1/3)$.
Applications

Search engines: Google’s PageRank algorithm models the web as a Markov chain, where steady-state probabilities rank
pages.
Network analysis: Eigenvalues of adjacency or Laplacian matrices reveal communities, bottlenecks, and robustness.
Epidemiology and information flow: Random walks model how diseases or ideas spread through networks.

Why this matters
Linear algebra transforms network problems into matrix problems. Eigenvalues and eigenvectors reveal connectivity, flow,
stability, and long-term dynamics. Networks are everywhere-social media, biology, finance, and the internet-so these
tools are indispensable.
Exercises 10.3


Write the adjacency matrix of a square graph with 4 nodes. Compute $A^2$ and interpret the entries.


Show that the Laplacian of a connected graph has exactly one zero eigenvalue.


Find the steady-state distribution of the Markov chain with
$$
P = \begin{bmatrix} 0.5 & 0.5 \ 0.4 & 0.6 \end{bmatrix}.
$$


Explain how eigenvalues of the Laplacian can detect disconnected components of a graph.


Describe how PageRank modifies the transition matrix of the web graph to ensure a unique steady-state distribution.


10.4 Machine Learning Connections
Modern machine learning is built on linear algebra. From the representation of data as matrices to the optimization of
large-scale models, nearly every step relies on concepts such as vector spaces, projections, eigenvalues, and matrix
decompositions.
Data as Matrices
A dataset with $m$ examples and $n$ features is represented as a matrix $X \in \mathbb{R}^{m \times n}$:
$$
X =
\begin{bmatrix}

& \mathbf{x}_1^T & - \
& \mathbf{x}_2^T & - \
& \vdots & \
& \mathbf{x}_m^T & -
\end{bmatrix},
$$

where each row $\mathbf{x}_i \in \mathbb{R}^n$ is a feature vector. Linear algebra provides tools to analyze, compress,
and transform this data.
Linear Models
At the heart of machine learning are linear predictors:
$$
\hat{y} = X\mathbf{w},
$$
where $\mathbf{w}$ is the weight vector. Training often involves solving a least squares problem or a regularized
variant such as ridge regression:
$$
\min_{\mathbf{w}} |X\mathbf{w} - \mathbf{y}|^2 + \lambda |\mathbf{w}|^2.
$$
This is solved efficiently using matrix factorizations.
Singular Value Decomposition (SVD)
The SVD of a matrix $X$ is
$$
X = U \Sigma V^T,
$$
where $U, V$ are orthogonal and $\Sigma$ is diagonal with nonnegative entries (singular values).

Singular values measure the importance of directions in feature space.
SVD is used for dimensionality reduction (low-rank approximations), topic modeling, and recommender systems.

Eigenvalues in Machine Learning

PCA (Principal Component Analysis): diagonalization of the covariance matrix identifies directions of maximal
variance.
Spectral clustering: uses eigenvectors of the Laplacian to group data points into clusters.
Stability analysis: eigenvalues of Hessian matrices determine whether optimization converges to a minimum.

Neural Networks
Even deep learning, though nonlinear, uses linear algebra at its core:

Each layer is a matrix multiplication followed by a nonlinear activation.
Training requires computing gradients, which are expressed in terms of matrix calculus.
Backpropagation is essentially repeated applications of the chain rule with linear algebra.

Why this matters
Machine learning models often involve datasets with millions of features and parameters. Linear algebra provides the
algorithms and abstractions that make training and inference possible. Without it, large-scale computation in AI would
be intractable.
Exercises 10.4


Show that ridge regression leads to the normal equations
$$
(X^T X + \lambda I)\mathbf{w} = X^T \mathbf{y}.
$$


Explain how SVD can be used to compress an image represented as a matrix of pixel intensities.


For a covariance matrix $\Sigma$, show why its eigenvalues represent variances along principal components.


Give an example of how eigenvectors of the Laplacian matrix can be used for clustering a small graph.


In a neural network with one hidden layer, write the forward pass in matrix form.


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Take something you don’t like and try to like it]]></title>
            <link>https://dynomight.net/liking/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45102512</guid>
            <description><![CDATA[it offers lessons on your nature]]></description>
            <content:encoded><![CDATA[
    Here’s one possible hobby:


  Take something you don’t like.
  Try to like it.


It could be food or music or people or just the general situation you’re in. I recommend this hobby, partly because it’s nice to enjoy things, but mostly as an instrument for probing human nature.

1.

I was in Paris once. By coincidence, I wandered past a bunch of places that were playing Michael Jackson. I thought to myself, “Huh. The French sure do like Michael Jackson.” Gradually I decided, “You know what? They’re right! Michael Jackson is good.” Later, I saw a guy driving around blasting Billy Jean while hanging a hand outside his car with a sparkly white Michael Jackson glove. Again, I thought, “Huh.” That day was June 25, 2009.

2.

I don’t like cooked spinach. But if I eat some and try to forget that I hate it, it seems OK. Why?

Well, as a child, I was subjected to some misguided spinach-related parental interventions. (“You cannot leave this table until you’ve finished this extremely small portion”, etc.) I hated this, but looking back, it wasn’t the innate qualities of spinach the bothered me, so much as that being forced to put something inside my body felt like a violation of my autonomy.

When I encountered spinach as an adult, instead of tasting a vegetable, I tasted a grueling battle of will. Spinach was dangerous—if I liked it, that would teach my parents that they were right to control my diet.

So I tried telling myself little stories: I’m hiking in the mountains in Japan when suddenly the temperature drops, and it starts pouring rain. Freezing and desperate, I spot a monastery and knock on the door. The monks warm me up and offer me hōrensō no ohitashi, made from some exotic vegetable I’ve never seen before. Presumably, I’d think it was amazing.

I can’t fully access that mind-space. But just knowing it exists seems to make a big difference. Using similar techniques, I’ve successfully made myself like (or less dislike) white wine, disco, yoga, non-spicy food, Ezra Klein, Pearl Jam, and Studio Ghibli movies.

Lesson: Sometimes we dislike things simply because we have a concept of ourselves as not liking them.

3.

Meanwhile, I’ve failed to make myself like country music. I mean, I like A Boy Named Sue. Who doesn’t? But what about Stand By Your Man or Dust on the Bottle? I listen to these, and I appreciate what they’re doing. I admire that they aren’t entirely oriented around the concerns of teenagers. But I can’t seem to actually enjoy them.

Of course, it seems unlikely that this is unrelated to the fact that no one in my peer group thinks country music is cool. On the other hand, I’m constantly annoyed that my opinions aren’t more unique or interesting. And I subscribe to the idea that what’s really cool is to be a cultural omnivore who appreciates everything.

It doesn’t matter. I still can’t like country music. I think the problem is that I don’t actually want to like country music. I only want to want to like country music. The cultural programming is in too deep.

Lesson: Certain levels of the subconscious are easier to screw around with than others.

4.

For years, a friend and I would go on week-long hikes. Before we started, we’d go make our own trail mix, and I’d always insist on adding raisins. Each year, my friend would object more loudly that I don’t actually like raisins. But I do like raisins. So I’d scoff. But after several cycles, I had to admit that while I “liked raisins”, there never came a time that I actually wanted to eat raisins, ever.

Related: Once every year or two, I’ll have a rough day, and I’ll say to myself, “OK, screw it. Liking Oasis is the lamest thing that has ever been done by anyone. But the dirty truth is that I love Oasis. So I will listen to Oasis and thereby be comforted.” Then I listen to Oasis, and it just isn’t that good.

Lesson: You can have an incorrect concept of self.

5.

I don’t like this about myself, but I’m a huge snob regarding television. I believe TV can be true art, as high as any other form. (How does My Brilliant Friend only have an 89 on Metacritic?) But even after pretentiously filtering for critical acclaim, I usually feel that most shows are slop and can’t watch them.

At first glance, this seems just like country music—I don’t like it because of status-driven memetic desire or whatever. But there’s a difference. Not liking country music is fine (neurotic self-flagellation aside) because there’s an infinite amount of other music. But not liking most TV is really annoying, because often I want to watch TV, but can’t find anything acceptable.

I see three possible explanations:


  
    Almost all TV is, in fact, bad.
  
  
    Lots of TV is fine, but just doesn’t appeal to me.
  
  
    Lots of TV is fine, but it’s hard to tell yourself stories where you’re hiking in the mountains and a bunch of Japanese monks show you, like, Big Bang Theory.
  


Whatever it is, it seems hard to change.

Lesson: Some things are hard to change.

6.

On planes, the captain will often invite you to, “sit back and enjoy the ride”. This is confusing. Enjoy the ride? Enjoy being trapped in a pressurized tube and jostled by all the passengers lining up to relieve themselves because your company decided to cram in a few more seats instead of having an adequate number of toilets? Aren’t flights supposed to be endured?

At the same time, those invitations seem like a glimpse of a parallel universe. Are there members of my species who sit back and enjoy flights?

I have no hard data. But it’s a good heuristic that there are people “who actually X” for approximately all values of X. If one in nine people enjoy going to the dentist, surely at least that many enjoy being on planes.

What I think the captain is trying to say is, “While you can’t always control your situation, you have tremendous power over how you experience that situation. You may find a cramped flight to be a torture. But the torture happens inside your head. Some people like your situation. You too, perhaps could like it.”

That’s an important message. Though one imagines that giving it as an in-flight announcement would cause more confusion, not less. So the captain does what they can.

  ]]></content:encoded>
        </item>
    </channel>
</rss>