<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Fri, 29 Aug 2025 15:07:16 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Deploying DeepSeek on 96 H100 GPUs]]></title>
            <link>https://lmsys.org/blog/2025-05-05-large-scale-ep/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45064329</guid>
            <description><![CDATA[<p>DeepSeek is a popular open-source large language model (LLM) praised for its strong performance. However, its large size and unique architecture, which us...]]></description>
            <content:encoded><![CDATA[DeepSeek is a popular open-source large language model (LLM) praised for its strong performance. However, its large size and unique architecture, which uses Multi-head Latent Attention (MLA) and Mixture of Experts (MoE), require an advanced system for efficient serving at scale. In this blog, we explain how we match DeepSeek's inference system performance with SGLang.

Our implementation, shown in the figure above, runs on 12 nodes in the Atlas Cloud, each equipped with 8 H100 GPUs.
It uses prefill-decode disaggregation and large-scale expert parallelism (EP), achieving a speed of 52.3k input tokens per second and 22.3k output tokens per second per node for 2000-token input sequences.
To the best of our knowledge, this represents the first open-source implementation to nearly match the throughput reported in the official DeepSeek blog at large scale.
By deploying this implementation locally, it translates to a cost of $0.20/1M output tokens, which is about one-fifth the cost of the official DeepSeek Chat API.
Compared to vanilla tensor parallelism using the same resources, this optimized strategy improves the output throuhgput by up to 5x.
This blog dives into our parallelism design, optimization methods, and results. All components of our work are fully open-source, allowing others to explore and build on our efforts. The instructions for reproducing our experiments are fully available here.
Highlight
✅ SGLang now supports prefill-decode (PD) disaggregation and large-scale EP, including the full functionality of DeepEP, DeepGEMM, and EPLB.
✅ Leveraging these new features, our team successfully replicated DeepSeek's inference system using 12 nodes, each with 8 H100 GPUs. In total, SGLang achieves a throughput of 52.3k input tokens per second and 22.3k output tokens per second per node for input sequences of 2000 tokens.
✅ This blog explains technical details of our approach, focusing on optimizations for efficiency, peak memory usage reduction, and workload balancing. The profile results show that our implementation achieves nearly on-par performance with the official DeepSeek’s report.
✅ All experiments and code are fully open-sourced for community access and further development.
Outline

Parallelism Design
Prefill and Decode Disaggregation
Large-scale Expert Parallelism
Evaluation
Toolkits
Limitations and Future Work
Conclusion
Acknowledgment

Parallelism Design
Efficient parallelism is essential to manage the computational complexity and memory demands of DeepSeek's architecture. This section outlines our approach to optimizing key components: attention layers, dense feed-forward networks (FFNs), sparse FFNs, and the language model (LM) head. Each component leverages tailored parallelism strategies to enhance scalability, memory efficiency, and performance.
Attention Layers
DeepSeek employs Multi-head Latent Attention (MLA) to effectively model complex dependencies within input sequences. To optimize this mechanism, we implement DP Attention, a data parallelism strategy that eliminates KV cache duplication across devices, significantly reducing memory overhead. Introduced in SGLang v0.4, this approach has been extended to support hybrid data and tensor parallelism, offering flexibility for processing small batch sizes efficiently.
Dense FFNs
Despite using only three dense FFN layers, DeepSeek-V3's computation can significantly increase peak memory usage, potentially leading to system crashes if not carefully managed. To address this, we adopt Data Parallelism (DP) over tensor parallelism (TP), leveraging the following advantages:

Enhanced Scalability: With an intermediate dimension of 18,432, high TP degrees (e.g., TP32) result in inefficient fragmentation into small-unit segments (e.g., 576 units), which are not divisible by 128—a common alignment boundary for modern GPUs such as H100. This misalignment hampers computational efficiency and memory utilization. DP provides a more scalable solution by avoiding fragmentation, ensuring balanced workload distribution across devices.
Optimized Memory Efficiency: Traditionally, TP reduces memory usage as worker size increases, but this advantage diminishes under DP attention. In a pure TP setup, memory demand for a single-layer Transformer model scales with DP size as: $$\text{Memory}=\frac{N_{\text{param}}}{\text{TP}}+(1+k)N_{\text{hidden_state}}\cdot \text{DP}\notag$$ Here, $N_{\text{hidden_state}}=n_\text{token}\times n_\text{hidden_size}$ is the size of the hidden state on each device (DP rank), $N_{\text{param}}=n_\text{intermediate_size}\times n_\text{hidden_size}$ is the number of model parameters, and $k$ is a coefficient representing extra memory overhead from CUDA Graph duplication. By assuming $\text{DP}=\text{TP}$, this memory usage function is minimized when $\text{TP}=\sqrt{\frac{N_{\text{param}}}{(1+k)N_{\text{hidden_state}}}}$. DeepSeek-V3 uses an intermediate size of 18,432. During the prefill phase, CUDA Graph is typically disabled, so $k = 0$. However, the token size per device can easily exceed 2,048, resulting in an optimal TP size of 3 or less. In the decode phase, a practical configuration might use 128 tokens per device and set $k = 3$. In this case, the memory-optimal TP size is 6. In both phases, a lower TP degree minimizes memory usage per device. As a result, DP may offer a more memory-efficient approach for scaling compared to relying solely on TP.
Minimized Communication Overhead: In pure TP, each FFN necessitates two all-reduce operations, resulting in substantial communication overhead. By leveraging DP, we optimize this process to a single reduce-scatter following the prior attention layer and an all-gather before the next, reducing communication costs by 50%. Furthermore, when attention is also computed under pure DP, inter-device communication is entirely eliminated, significantly enhancing overall efficiency.

The integration of DP dense FFN with DP attention is illustrated in the left figure below. Users can enable this feature by setting --moe-dense-tp-size=1.

Sparse FFNs
In DeepSeek-V3's Mixture of Experts (MoE) architecture, sparse FFNs require substantial expert weights, creating a significant memory bottleneck. To address this, we implement Expert Parallelism (EP), which distributes expert weights across multiple devices. This approach effectively scales memory capacity while maintaining high performance, though it does introduce challenges like irregular all-to-all communication and workload imbalance.
The figure in the right figure above illustrates our EP implementation using the DeepEP framework, with further details on our EP design and optimizations provided in the following sections.
LM Head
The LM head computes output probabilities over a large vocabulary, a resource-intensive operation traditionally handled with vocabulary parallelism to aggregate token logits from TP groups. To enhance scalability and efficiency, we adopt Data Parallelism (DP), mirroring our dense FFN strategy. This reduces memory overhead and simplifies communication across devices, delivering a more streamlined solution.
Prefill and Decode Disaggregation
LLM inference comprises two distinct phases: Prefill and Decode. The Prefill phase is computation-intensive, processing the entire input sequence, while the Decode phase is memory-intensive, managing the Key-Value (KV) cache for token generation. Traditionally, these phases are handled within a unified engine, where combined scheduling of prefill and decode batches introduces inefficiencies. To address these challenges, we introduce Prefill and Decode (PD) Disaggregation in SGLang.
Issues with Unified Scheduling
The conventional unified engine, which processes prefill and decode batches together, results in three significant problems:

Prefill Interruption: Incoming prefill batches frequently interrupt ongoing decode batches, causing substantial delays in token generation.
DP Attention Imbalance: In DP attention, one DP worker may process a prefill batch while another handles a decode batch simultaneously, leading to increased decode latency.
Incompatible with DeepEP: As we will discuss in a later section, DeepEP executes different dispatch modes for prefill and decode, making unified scheduling imcompatible with DeepEP.

PD Disaggregation resolves these by separating the two stages, enabling tailored optimizations for each.
Implementation Details
The PD Disaggregation design in SGLang, depicted in the diagram below, interleaves execution between a Prefill Server and a Decode Server:

Upon receiving an input request, the workflow proceeds as follows:

A Prefill Server and a Decode Server pair via a handshake, establishing a local sender and receiver, respectively.
The Decode Server pre-allocates the KV cache, signaling the Prefill Server to begin the model forward pass and compute the KV caches.
Once computed, the data transfers to the Decode Server, which handles iterative token generation.

This separation ensures each phase operates under optimal conditions, maximizing GPU resource utilization. To further enhance performance, our implementation incorporates:

Non-blocking Transfer: Data send and receive operations run in a background thread, keeping the scheduler’s event loop uninterrupted.
RDMA-Based Transfer: Remote Direct Memory Access (RDMA) leverages queue pairs for connections and scatter-gather elements (SGE) for efficient transfer of non-contiguous memory chunks.
Flexible API Integration: SGLang offers adaptable APIs that integrate high-performance RDMA libraries like Mooncake and NIXL, streamlining data transfers.

More details can be found in our design document.
Large-scale Expert Parallelism
Expert Parallelism with DeepEP
DeepEP, implemented by the DeepSeek team, is a communication library designed to streamline EP in MoE models. It tackles the challenge of efficiently routing tokens to specific experts across multiple GPUs. By providing optimized communication kernels, DeepEP reduces latency and boosts throughput, making it ideal for large-scale inference tasks.
DeepEP provides two specialized dispatch modes to address varying workload demands:

Normal Dispatch: Optimized for handling long input sequences, such as during the prefill phase, this mode prioritizes maximum computational throughput. However, it generates symbolic shapes that are incompatible with CUDA Graph, rendering it less effective for the decode phase, where kernel launch overhead becomes a significant bottleneck.
Low-Latency Dispatch: Tailored for generating output tokens during the decode phase, this mode prioritizes minimal delay to ensure real-time performance. It supports CUDA Graph but requires preallocating a fixed memory size. If the memory demand exceeds this preallocation, a runtime error occurs.

In SGLang, the integration of DeepEP provides auto mode that dynamically selects between these two dispatch modes based on the workload. However, without PD disaggregation, the auto mode faces a limitation: it cannot simultaneously support both normal dispatch (for prefill) and low-latency dispatch (for decode) within the same communication group. This restriction hinders its compatibility with DP attention, which is crucial for memory-efficient inference. The compatibility of each mode is outlined in the table below:



Mode
Long Input
Long Output
DP Attention
CUDA Graph




Normal
✅
❌
✅
❌


Low-Latency
❌
✅
✅
✅


Auto
✅
✅
❌
✅



PD disaggregation addresses this by separating prefill and decode phases, allowing normal dispatch for the prefill phase and low-latency dispatch for the decode phase, both under DP attention. This integration optimizes resource utilization and enhances overall performance by aligning the dispatch mode with the specific needs of each phase.
DeepGEMM Integration
DeepGEMM is another high-efficient library developed by the DeepSeek team, specifically designed to optimize computations in MoE models. It provides two specialized functions for handling MoE-related matrix multiplications (Grouped GEMMs), each tailored to different phases of the inference process.

Grouped GEMMs (contiguous layout): This kernel is designed for dynamic input shapes, making it ideal for the prefill phase of MoE inference. It processes inputs where the data for different experts is concatenated contiguously, allowing for flexible handling of varying input sizes.
Grouped GEMMs (masked layout): This kernel assumes a fixed input shape and uses a mask tensor to compute only the valid portions of the input. It is compatible with CUDA Graph, which optimizes kernel launches, making it well-suited for the decode phase where reducing overhead is critical.

DeepGEMM integrates smoothly with the dispatch modes of DeepEP:

For the contiguous layout kernel, which is used with normal dispatch in the prefill phase, an additional step is required. Since normal dispatch outputs a symbolic shape, a permutation is needed to transform the output into the contiguous format expected by the kernel. We referred to the LightLLM project and implemented a custom Triton kernel for efficient permutation. This kernel ensures that the output from normal dispatch is correctly rearranged, enabling smooth integration with the contiguous GEMM kernel.
The masked layout kernel pairs seamlessly with DeepEP’s low-latency dispatch, as both are optimized for the decode phase and support CUDA Graph.

SGLang also integrates DeepGEMM for MoE computation under tensor parallelism. Additionally, DeepGEMM provides a highly efficient general GeMM kernel, which can be activated in SGLang by setting the environment variable SGL_ENABLE_JIT_DEEPGEMM to 1, offering even greater computational efficiency for non-MoE operations.
Two-batch Overlap
In multi-node environments, limited communication bandwidth can significantly increase overall latency. To tackle this challenge, we implemented Two-batch Overlap (TBO) following DeepSeek's system design. TBO splits a single batch into two micro-batches, allowing computation and communication to overlap, which also lowers peak memory usage by halving the effective batch size. However, putting TBO into practice introduces specific implementation difficulties.
Implementation Challenges
Although DeepSeek released the design framework of TBO, there are two slight implementation challenges.

Code Complexity: Directly coding TBO can lead to duplicated logic for managing multiple micro-batches. This increases the complexity of the codebase, making it harder to maintain and prone to errors, especially as the number of micro-batches or overlapping scenarios grows.
Synchronization Issues in the Prefill Phase: Achieving effective overlap between computation and communication needs consideration when the normal dispatch in DeepEP block the CPU. This blocking behavior can stall the pipeline, leaving the GPU idle and undermining the performance benefits of TBO.

Abstraction for Clean Implementation
To create a more maintainable and reusable codebase, we use an abstraction layer consisting of operations and yield points. This method simplifies development by allowing us to write code as if handling a single micro-batch, while strategically pausing execution by inserting yield points to let other micro-batches proceed. It eliminates code duplication, reduces the potential need for variable postfixes, and efficiently manages cases where some executions complete at a layer's end while others have not. Additionally, it supports easy adaptation to different overlapping region choices or future enhancements, like a three-batch overlap, with minimal code changes. Below is a concise demonstration of this approach:
operations = [
    self._forward_attn,
    YieldOperation(),  # Pause execution for other micro-batches
    self._forward_dispatch,
    self._forward_mlp,
    YieldOperation(),  # Another pause point
    self._forward_combine,
]

# Process a single micro-batch without duplicating code
def _forward_attn(self, state):
    state.hidden_states = self.self_attn(state.hidden_states, ...)

Prefill Overlapping Implementation
We refine the launch order during the prefill phase to avoid CPU-blocking via the dispatch operation in DeepEP, even though we are using its asynchronous mode. Specifically:

The dispatch operation blocks the CPU until the GPU receives metadata from other ranks to allocate correctly sized tensors.
An improper implementation would leave the computation stream idle during this period, as no computation tasks are submitted to the GPU.

To optimize, we prioritize submitting computation tasks to the GPU before launching CPU-blocking communication. This ensures the GPU remains active during communication. As illustrated in the figure below, TBO with a proper launch order, indicated by bolded borders, avoids bubble caused by a CPU-blocking operation (i.e., normal dispatch).

Expert Parallelism Load Balancer
In MoE models, EP often leads to uneven workload distribution across GPUs. This imbalance forces the system to wait for the slowest GPU computation or communication, wasting compute cycles and increasing memory usage due to expert activations. As the number of GPUs (EP size) increases, the imbalance issue gets more severe.
To address this, DeepSeek developed the Expert Parallelism Load Balancer (EPLB). EPLB takes expert distribution statistics as input and computes an optimal arrangement of experts to minimize imbalance. Users can allocate redundant experts (e.g., 32 additional experts), which, when combined with the original 256, create a pool of 288 experts. This pool allows EPLB to strategically place or replicate experts—for instance, duplicating the most frequently used expert multiple times or grouping a moderately used expert with rarely used ones on a single GPU.
Beyond balancing workloads, EPLB offers greater flexibility in parallelism design. With the original 256 experts, parallelism sizes are restricted to powers of two. EPLB’s use of 288 experts enables more diverse configurations, such as parallelism sizes of 12 or 72.
In the figure below, we demonstrate the effects of scale and EPLB algorithm to the imbalance issue via simulation. We compute GPU balancedness as the ratio between mean computation time and maximum computation time for a MoE layer among GPUs, and we use the number of tokens for a GPU to estimate the computation time for it. As can be seen, utilization rate decreases when the system scales with the number of nodes, and enabling EPLB significantly improves the utilization.

EPLB for Real-World Serving
For EPLB to be effective, the input distribution must closely match the actual serving workload. Two strategies enhance this alignment:

Increasing Batch Size: Larger batches reduce random fluctuations in expert usage, which improves balance, which can be achieved by scaling the cluster or using techniques like Multi-Token Prediction (MTP).
Periodic Rebalancing: Regularly updating the expert arrangement leverages temporal locality but requires efficient reloading of experts. This necessitates minimizing the cost of expert reloading operations.

Even with EPLB, some imbalance is inevitable, making further optimization a valuable future direction.
Implementation of Rebalancing
SGLang implements expert rebalancing in three stages to ensure efficiency and minimal disruption:

System Loading Stage: Weights are optionally preloaded from disk to main memory for faster rebalancing or kept on disk with memory mapping (mmap) for reduced memory usage.
Rebalance Preparation Stage: Required weights are asynchronously transferred to device memory in the background, utilizing free DMA hardware engines without interrupting ongoing GPU operations.
Rebalance Execution Stage: A device-to-device copy updates the weights. This step can be further optimized through physical memory rebinding techniques.

This staged approach ensures that rebalancing is both efficient and non-disruptive, maintaining system performance during updates.
Evaluation
End-to-end Performance
Experimental Setup
We evaluated the end-to-end performance of different configurations of SGLang using DeepSeek-V3 on a cluster of 12 nodes, connected via InfiniBand and each equipped with 8 H100 GPUs. This evaluation highlights the throughput improvements enabled by our advanced optimization techniques. We compared the following four settings:

SGLang with TP16 x 6: Every two nodes are paired with an independent group, running DeepSeek-V3 inference with a TP size of 16 and DP attention.
SGLang with PD Disaggregation: This version incorporates PD disaggregation and full EP optimization. For the EPLB, we adopt a distribution matching the input/output data, as real-time serving statistics are unavailable.
SGLang with PD Disaggregation and simulated MTP: To simulate MTP’s effects, we firstly double the batch size and halve the Key-Value KV cache length to maintain the same workload for GroupedGeMM computation and memory access. Moreover, we insert dummy kernels after the real attention computation to ensure the attention phase takes the same time as in DeepSeek’s profile, accurately reflecting the slowdown caused by MTP’s attention mechanism. We conservatively assume a 70% acceptance rate under MTP.
DeepSeek Profile Results: Throughput estimates are derived from DeepSeek’s official profiling data.

Performance Analysis of Prefill and Decode Phases
To accommodate varying workload demands, we independently evaluated the prefill (P) and decode (D) phases, assuming unlimited resources for the non-tested phase to isolate and maximize the load on the tested nodes—mirroring the setup used by DeepSeek. The results are summarized below:

Prefill Phase: On 4 nodes (4×8×H100, EP32), the system achieved per-node throughputs of 57,674, 54,543, and 50,302 tokens per second for prompt lengths of 1K, 2K, and 4K, respectively. As shown in the bar chart below, this represents up to a 3.3× improvement over the TP16 baseline, largely attributable to the optimized GroupedGeMM kernel (DeepGEMM) and two-batch overlap. Assuming a perfectly balanced workload, our system’s throughput is within 5.6% of DeepSeek's official profile.
Decode Phase: Evaluated on 9 nodes (9×8×H100, EP72; half the scale of DeepSeek), the system achieved 22,282 tokens/sec per node for 2K inputs—representing a 5.2× speedup over the TP16 baseline. Under simulated MTP conditions—with attention kernels intentionally slowed to reflect real-world latency—the system sustained a high throughput of 17,373 tokens/sec per node for 4K inputs, just 6.6% below DeepSeek’s official profile. As shown in the figure on the right, these performance gains are largely attributed to 4× larger batch sizes enabled by EP, which enhances scalability by significantly reducing per-GPU memory consumption of model weights.


Profile Results
This section compares SGLang’s performance with DeepSeek’s inference system, aligning our experimental setup as closely as possible to DeepSeek’s production environment. We analyze overall throughput and detailed kernel breakdowns, benchmarking against DeepSeek’s blog and public profile data.
Overall Throughput
For prefill, we tested a scenario with 16,384 tokens per device and an input length of 4,096. Due to uncertainty in DeepSeek’s expert distribution, we evaluated two cases: one with default expert distribution and another with simulated perfect EPLB (random expert selection following group-limited routing semantics) as a performance upper bound.
The results are presented below:




DeepSeek Blog (excl. cache hit)
DeepSeek Profile
SGLang (Default)
SGLang + Simulated Perfect EPLB




Batch Size
N/A
16,384
16,384
16,384


Input Length
N/A
4,096
4,096
4,096


Throughput (per node)
32,206
62,713
50,302
59,337



DeepSeek’s profile reports a throughput roughly twice that of its production environment. SGLang with default expert imbalance is 20% slower than DeepSeek’s profile, while the simulated perfect EPLB case narrows the gap to 6%.
For decode, the results are shown below:




DeepSeek Blog
DeepSeek Profile
SGLang (Default)
SGLang + Simulated MTP (Slow Attention)




Batch Size
N/A
128
256
128


KV Cache Length
4,989
4,096
2,000
4,000


Number of Nodes
18
16
9
9


Throughput (per node)
14,800
18,598
22,282
17,373



Using half the nodes of DeepSeek, SGLang with simulated MTP is only slightly slower than DeepSeek’s profile. In a higher batch size setting (256 sequences, 2,000 input length), SGLang achieves 22,282 tokens per second per node, demonstrating strong scalability.
Detail Breakdown
The figure below breaks down kernel execution times for prefill, including unit test results as a theoretical upper bound:


Default EPLB: Communication kernels exhibit longer execution times and higher variance compared to DeepSeek’s profile, likely due to greater expert imbalance. This leads to extended computation stream bubbles, slowing down overall performance.
Simulated Perfect EPLB: This setup aligns more closely with DeepSeek’s profile, though discrepancies remain, indicating potential areas for optimization.
Comparison with Unit Tests: Both DeepSeek and SGLang have a communication time slower than unit test results, while the latter is achievable when disabling TBO, revealing a potential optimization direction if communication is the bottleneck.

SGLang’s decode kernel breakdown aligns closely with DeepSeek’s, as shown below:

Key observations include:

Combine Time Discrepancy: SGLang’s combine operation appears 2x slower than DeepSeek’s due to shorter attention computation, causing communication kernels to busy-wait. In the simulated slow attention experiment, combine time matches DeepSeek’s, confirming this hypothesis.
MoE Performance: SGLang’s MoE kernels are 25% slower, possibly because DeepSeek’s 18 nodes (versus our 9) distribute experts more efficiently, reducing memory access overhead for GEMM operations.
Dispatch Optimization Potential: Both DeepSeek and SGLang show dispatch times of ~0.17ms per layer, but unit tests with DeepEP reveal a potential of 0.06ms occupying SMs. Currently, dispatch spends significant time busy-waiting for data. Inserting slow dummy kernels between send/receive operations reduces dispatch time to 0.09ms, and in-flight duration analysis using unit test data suggests further improvements are possible.

While minor enhancements remain—primarily in kernel fusion under "Other Kernels"—SGLang’s decode performance is largely aligned with DeepSeek’s, with prefill optimization as the next focus.
Ablation Study: Two-batch Overlap
Impact of Batch Size and Attention Time
This section investigates TBO performance across varying batch sizes and simulated MTP scenarios.

TBO delivers two significant benefits in the prefill phase, as evidenced by throughput comparisons and memory usage optimizations:

Support for Larger Batch Sizes: In the vanilla configuration, each device processes up to 8,192 tokens before encountering out-of-memory (OOM) errors at 16,384 tokens. TBO mitigates this by optimizing memory usage for input tokens, enabling inference with batches as large as 16,384 tokens per device. This further boosts performance to 40.5% increase when comparing the TBO flag with all other configurations made optimal.
Enhanced Throughput: By overlapping computation (e.g., attention and MLP phases) with communication (e.g., DeepEP Combine and Dispatch), TBO achieves a 27% to 35% throughput increase compared to the vanilla setup, even when processing the same token count per device.

TBO’s impact in the decode phase varies by scenario, with performance tied to batch size and attention processing time:

Real Test Cases: Speedup in practical scenarios is contingent on batch size exceeding a threshold between 64 and 128 tokens. Below this, TBO yields minimal or negative gains (e.g., -27% at 32 tokens/device), as small decode batch sizes hinder kernel efficiency. The speedup reaches 25.5% at 256 tokens with a performance of 22,310 tokens per second.
Simulated MTP Scenario: TBO provides the most substantial speedup in simulated MTP cases when processing 128 requests to generate 256 tokens per decode step. This is due to prolonged attention processing time, which aligns computation (e.g., DP Attention layers) with DeepEP communication overhead (e.g., combine and dispatch steps). The evaluation shows a 35% speedup at 128 sequences/device, with throughput 17,552 tokens per second compared to 12,929 without TBO.

Detail Breakdown
We evaluated three prefill scenarios: TBO with 16k tokens per batch, TBO with 8k tokens, and no-TBO with 8k tokens. The figure below reveals key insights:

TBO Efficiency: Comparing the 8k cases, TBO improves overall efficiency by overlapping computation and communication, as expected.
Batch Size Impact: Reducing the batch size from 16k to 8k with TBO results in a slight slowdown, reflecting diminished kernel efficiency with smaller batches.
Kernel Performance: Interestingly, the no-TBO 8k case outperforms the TBO 16k case in per-kernel speed, despite both having an effective batch size of 8k for kernels. This may stem from reduced streaming multiprocessors (SMs) with TBO, potential noisy neighbor effects during overlap, or kernel incompatibility between computation and communication. These findings suggest future optimization directions for SGLang.


For the decode phase, we analyzed three configurations: TBO with a batch size of 256, no-TBO with 256, and no-TBO with 128. The time breakdown is shown below:

TBO vs. No-TBO (Batch Size 256): Without TBO, communication time increases significantly due to the lack of overlap. However, computation kernels, particularly GEMM, benefit from a larger effective batch size, resulting in faster execution.
TBO (256) vs. No-TBO (128): Comparing cases with the same kernel batch size, only non-overlapped communication slows down in the no-TBO setup, while computation remains consistent. Unlike prefill, decode communication kernels either fully utilize SMs (during send/receive) or none (during inflight waiting), avoiding resource contention with computation kernels.


Ablation Study: EPLB
This section evaluates the impact of the EPLB on system performance through overall throughput analysis and detailed case studies. Given EPLB's sensitivity to workload distribution and distribution shifts in production environments, we focus on qualitative and generalizable insights rather than real-world performance, which requires production data.
Overall Results
The figure below illustrates EPLB's effect on throughput in large-scale settings. EPLB delivers a significant speedup of 1.49x (prefill) and 2.54x (decode), as expected, due to its ability to mitigate workload imbalances across GPUs. As the number of ranks scales, imbalances grow, and EPLB effectively addresses this in our large-scale experiments, leading to notable throughput improvements.

Case Study: Workload Imbalance Versus Overall Throughput
To explore the relationship between workload imbalance and throughput, we conducted a case study using a decode experiment with 1800 input tokens, 100 output tokens, and a batch size of 256. Throughput and balancedness (average token count divided by maximum token count across experts) were plotted against decoding steps:

The results reveal a strong correlation between balancedness and throughput, emphasizing the importance of maintaining high balancedness for optimal performance.
Case Study: Expert Distribution Statistics
The following figure presents expert distribution statistics for prefill and decode sample data:

Key observations include:

Imbalance in Expert Usage: Most experts are infrequently used, while a small subset is heavily utilized, underscoring the inherent imbalance in MoE models.
Prefill vs. Decode Differences: Although prefill and decode distributions share similarities, notable differences exist. This supports the use of PD disaggregation, which enables distinct expert placements for each phase, optimizing performance.

These findings highlight EPLB's role in addressing workload imbalances and the value of tailoring expert placement to phase-specific demands.
Toolkits
Disposable Tensor
Memory management in PyTorch can be challenging due to persistent object references, especially in GPU-intensive workflows where CUDA memory is a scarce resource. Consider the following example:
def ffn(hidden_state: torch.Tensor, linear1: nn.Linear, linear2: nn.Linear):
    intermediate_state = linear1(hidden_state)
    del hidden_state  # Attempt to free memory, but no effect due to external reference
    return linear2(nn.ReLU(intermediate_state))

hidden_state = ffn(hidden_state, linear1, linear2)

In this code, del hidden_state is intended to release the memory occupied by hidden_state after intermediate_state is computed. However, as hidden_state is still referenced outside the function, the del operation has no effect. This increases peak memory usage, risking performance slowdowns or out-of-memory errors.
SGLang addresses this with the DisposableTensor class, a subclass of torch.Tensor which introduces a dispose() method to explicitly and immediately release a tensor’s memory, circumventing Python’s reference counting limitations. Here’s how it works:
def ffn(hidden_state: torch.Tensor, linear1: nn.Linear, linear2: nn.Linear):
    intermediate_state = linear1(hidden_state)
    hidden_state.dispose()  # Immediately releases CUDA memory
    return linear2(nn.ReLU(intermediate_state))

# Wrap the tensor in DisposableTensor
hidden_state = DisposableTensor(hidden_state)
hidden_state = ffn(hidden_state, linear1, linear2)

By wrapping hidden_state in a DisposableTensor and calling dispose() when it’s no longer needed, the CUDA memory is freed right away. This ensures that memory is released as soon as the tensor’s role in the computation is complete, reducing peak memory usage and improving overall efficiency.
Expert Workload Extraction and Simulation
SGLang also includes a toolset for analyzing and simulating expert workload distribution in MoE models. This feature enables users to:

Dump Expert Workload Statistics: Extract either accumulated statistics or per-batch workload data. Accumulated stats support the EPLB manager for real-time optimization, while per-batch data provides granular insights for analysis and simulation.
Simulate Expert Utilization: Model expert balance across various configurations without requiring costly hardware or repeated trials. For instance, users can gather workload data from a modest setup (e.g., 2x8xH100 or 8xH200) and simulate the performance for a large-scale 22-node deployment.

This simulation capability allows users to evaluate how factors like rebalancing frequency, node count, or batch size impact system performance. It’s a cost-effective way to fine-tune configurations before scaling up.
Limitations and Future Work
While our implementation of SGLang for DeepSeek-V3 inference demonstrates significant throughput improvements, several limitations and areas for future enhancement remain:

Latency Optimization: The current focus on throughput leaves Time to First Token (TTFT) at 2–5 seconds and Inter-Token Latency (ITL) at approximately 100ms, requiring further optimizations for real-time use cases.
Sequence Length Constraints: Limited to shorter sequences due to the use of 96 GPUs. Expanding GPU resources would support longer sequences, essential for specific applications.
Multi-Token Prediction (MTP) Integration: SGLang supports MTP but lacks full integration with DP attention, reducing efficiency in mixed parallelism configurations.
EPLB Distribution: The experiments in this blog utilizes in-distribution data for Expert Parallelism Load Balancer (EPLB), which may not reflect real-world variability. Future work should experiment performances when having distribution shifts.
Flexible Tensor Parallelism (TP) Sizes: For DeepSeek-V3, memory-optimal TP sizes for dense FFNs are small but larger than 1. Currently, SGLang only supports pure TP or DP, leading to suboptimal memory use. Flexible TP options are needed.
Blackwell Support: Currently, our implementation supports only the NVIDIA Hopper architecture. We are actively working to extend compatibility to the next-generation Blackwell architecture. If you are interested in supporting or sponsoring this development, welcome to contact lmsys.org@gmail.com.

Conclusion
By leveraging PD disaggregation, EP, and a carefully crafted parallelism design, we’ve reproduced DeepSeek’s inference framework in SGLang with exceptional performance. Our open-source efforts—achieving 52.3k input tokens per second and 22.3k output tokens per second—demonstrate SGLang’s power for large-scale LLM inference. We invite the community to explore, replicate, and extend this work to push the boundaries of efficient AI deployment.
Acknowledgment
We would like to express our heartfelt gratitude to the following teams and collaborators:

SGLang Core Team and Community Contributors — Jingyi Chen, Cheng Wan, Liangsheng Yin, Baizhou Zhang, Ke Bao, Jiexin Liang, Xiaoyu Zhang, Yanbo Yang, Fan Yin, Chao Wang, Laixin Xie, Runkai Tao, Yuhong Guo, Kaihong Zhang, Lei Yu, Yu-Hsuan Tseng, Qilin Tian, Peng Zhang, Yi Zhang, Yineng Zhang, Byron Hsu, and many others.
Atlas Cloud Team —  Jerry Tang, Wei Xu, Simon Xue, Harry He, Eva Ma, and colleagues — for providing a 96-device NVIDIA H100 cluster and offering responsive engineering support.
NVIDIA Solution Architect Team — Xuting Zhou, Jinyan Chen, and colleagues — for their work on the seamless integration of expert parallelism.
NVIDIA Enterprise Product Team — Trevor Morris, Elfie Guo, Kaixi Hou, Kushan Ahmadian, and colleagues — for optimizing the DeepSeek R1 kernels.
LinkedIn Team — Biao He, Qingquan Song, Chunan Zeng, Yun Dai, Yubo Wang, and colleagues — for optimizing the Flash-Attention 3 backend.
Mooncake Team — Shangming Cai, Teng Ma, Mingxing Zhang, and colleagues — for their collaboration on PD disaggregation in SGLang.
FlashInfer Team — Zihao Ye, Yong Wu, Yaxing Cai — for additional DeepSeek R1 kernel optimizations.
Dynamo Team - Kyle Kranen, Vikram Sharma Mailthody, and colleagues - for extra support on PD disaggregation in SGLang.

Thank you all for your invaluable support and collaboration.
Appendix
Related PRs: #1970 #2925 #4068 #4165 #4232 #4390 #4435 #4521 #4654 #4767 #4770 #4836 #4880 #4957 #5068 #5085 #5295 #5415 #5432 #5435 #5530 #5558 #5561 #5626 #5657 #5805 #5819 #5890 DeepEP#142
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Curious Case of Flunking My Anthropic Interview (Again)]]></title>
            <link>https://taylor.town/flunking-anthropic</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45064284</guid>
            <description><![CDATA[I didn't misclick any buttons. My best wasn't good enough. I'm not good enough.]]></description>
            <content:encoded><![CDATA[
Here's a vague overview of what just happened:

I recently applied for
Anthropic's Developer Relations role.
My friend who works there gave me a glowing recommendation (thanks again,
dude!).
I completed their secret take-home assignment.
On top of their secret take-home assignment, I independently published
diggit.dev and a companion blogpost
about my [sincerely] positive experiences with Claude. I was hoping that
some unsolicited "extra credit" would make me look like an
exceptional/ambitious candidate.
I
posted diggit.dev to HackerNews
and it hit the frontpage!
I submitted my take-home assignment and my unsolicited extra credit.
They sent me
the "unfortunately" email.

Anthropic obviously didn't do anything wrong. I'm just bummed.
Claude Code truly is one of my favorite dev tools ever, and if you've suffered
through my talks/interviews, you're probably sick of my
enthusiasm for software. I was particularly excited to interview with Anthropic
because I respect their approach to responsible AI adoption. This very blog
is too often a crazed celebration of humans, of software, of AI, of progress, of
sincerity -- I, I felt like I was a perfect fit.
The first time I flunked an Anthropic interview (ca. 2022), I accidentally
clicked a wrong button during their automated coding challenge. It was easy to
swallow that failure. I made an honest mistake; I expect companies to reject
candidates who make honest mistakes during interviews.
This is different. I didn't misclick any buttons. My best wasn't good enough.
I'm not good enough.
This essay started as a fantasy: some hero at Anthropic reads this on HackerNews
and vouches for me and I get the job and I help them guide humanity toward
post-scarity AI abundance, forever and ever, amen. I'm ashamed of these
thoughts. It's the same folly of explaining to an ex-girlfriend why she's wrong
about her own experience.
Dating was difficult for me. I don't mind feeling ugly or low-status or whatever
-- I know my place. But it hurts to feel seen, feel considered, but ultimately
rejected due to mysterious forces: "He's cute, but he's too weird."
Yes, I'm weird. My eccentric habits have been an overall boon for my career, for
my relationships, for my well-being. But it's moments like these when I just
want to turn all my weird off. I want to be a square peg for this square hole
and do honest work and feed my family and help humanity thrive.
I can't turn my weird off, so I think I defensively dial it up sometimes. I
exaggerate my eccentricities. It's easy to swallow criticism when it isn't the
real me, when it isn't my best, when it's honest mistakes -- what a load
of crap. This is me. This is my best. Hello, world.
Now it's all coming back in waves, in gasps -- I spent so much of my life being
an unlikable jerk. Becoming somebody else has been slow/painful and I'm so
deeply afraid of regressing. Over the past decade, I've been striving to spread
joy, to do good, to be better. I'm trying so hard.
And all this keyboard vomit is a promise to myself that I'm not giving up. I
hate this feeling, and I'm staring these nightmares straight in their stupid
eyeballs, and they're not blinking. I am still alive, and I have so much more to
do.
I'm okay. I mean it. I don't need (or deserve) your sympathy. I'm so lucky to be
alive, at this time, at this place, in this body, with these people. My life is
great, and it will get even better if I keep putting in this effort.
Spewing my insides like this onto The Internet is terrifying, but I suspect many
strangers are facing similar feelings. It's rough out there. Whatever it is,
wherever you are, I hope this helps. You've got this. You're not alone, and
we're only human.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: Find Hidden Gems on HN]]></title>
            <link>https://pj4533.com/hn-overlooked/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45064210</guid>
            <description><![CDATA[This tool helps you discover recent hidden gems on Hacker News – high-effort posts that haven't gotten much attention.]]></description>
            <content:encoded><![CDATA[
                This tool helps you discover recent hidden gems on Hacker News – high-effort posts that haven't gotten much attention.
                
                Why "Recent"?
                We search the HN API's Ask, Show, and New story feeds, which typically contain posts from the last 3-7 days. This ensures fresh content while keeping the search fast.
                
                Passion Score
                Posts are ranked by their Passion Score, which identifies high-effort, low-engagement content:
                
                
                    Passion Score = (Text Length Score) / (Engagement + 1)
                    
                    Where:
                    • Text Length Score = min(text_length / 500, 10)
                    • Engagement = votes + (comments × 2)
                
                
                Higher scores indicate more "overlooked" posts – substantial writing with minimal recognition. Perfect for finding thoughtful contributions that the community may have missed.
            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Private Equity Snaps Up Disability Services, Challenging Regulators]]></title>
            <link>https://www.governing.com/management-and-administration/private-equity-snaps-up-disability-services-challenging-regulators</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45063972</guid>
            <description><![CDATA[Private equity firms have acquired more than 1,000 disability and elder care providers in recent years. Some have been accused of patient harm.]]></description>
            <content:encoded><![CDATA[
                                
                                    Private equity companies have gobbled up group homes and other services for people with disabilities, attracting the attention of state and federal regulators across the nation and alarming advocates.People with intellectual or developmental disabilities have suffered abuse, neglect and even death while under the care of private equity-owned providers, according to a recent report from watchdog group Private Equity Stakeholder Project.“Private equity firms are, more than many other types of investors, laser-focused on maximizing their cash flow, often trying to double or triple their investment over a relatively short period of time, usually just a handful of years,” said Eileen O’Grady, the report’s author. “The way that private equity firms will often do that is to cut costs.”For companies that provide essential services for people with disabilities, she said, “those cuts can have really harmful impacts on people’s lives.”In late 2023, Florida moved to revoke the license of NeuroRestorative, one branch of the private equity-owned health services company Sevita, which provides services for people with disabilities. State regulators cited repeat violations by NeuroRestorative and a failure to “protect the rights of its clients to be free from physical abuse.” Ultimately the state opted not to revoke the license and fined the company $13,000 in a settlement.But in recent years regulators have documented instances of patient harm at Sevita’s affiliates in multiple other states, including Colorado, Indiana, Iowa, Massachusetts and Utah. In 2019, a U.S. Senate committee conducted a probe into the company’s operations in Iowa and Oregon following multiple reports of patient abuse and neglect.“Any entity that receives taxpayer dollars, but especially those charged with caring for our fellow Americans who may have an intellectual disability, ought to be doing everything under the sun to ensure quality care and continually improve,” U.S. Sen. Chuck Grassley, an Iowa Republican, said in a statement in 2020 following his investigation.In a statement to Stateline, Sevita did not address the sanctions directly, but avowed its commitment to providing services and supports to give people greater independence, regardless of their intellectual or physical challenges.“Since 2019, when new ownership acquired the company, there has been significant capital investment to improve and expand our services, enhance facilities, implement robust training and new technologies, and strengthen our workforce — all with the goal of better serving our individuals and communities,” the statement said.The disability care industry has proven increasingly attractive to private equity.In recent years, a handful of large private equity-owned companies such as Sevita have snapped up hundreds of smaller providers of disability services — often community nonprofits, mom-and-pop businesses and religious organizations — and rolled them into larger corporations.From 2013 to 2023, private equity firms acquired more than 1,000 disability and elder care providers, according to the report by the Private Equity Stakeholder Project. That’s likely an undercount because they’re generally not required to disclose acquisitions, the report said.Cash CowPrivate equity firms use pooled investments from pension funds, sovereign wealth funds, endowments and wealthy individuals to buy a controlling stake in a company. They seek to maximize its value — often by cutting costs — and then sell it at a profit.Most of Sevita’s revenue comes from providing disability services. It operates companies in 40 states under various brands, including Mentor Network, NeuroRestorative and REM.Sevita is currently owned by private equity firms Centerbridge Partners and Vistria Group, which also own Help at Home, a home health company with more than 200 locations across about a dozen states.Nearly all of Sevita’s revenue comes from Medicaid, according to a February 2025 report from S&P Global.Through Medicaid and Medicare, the government pays for most services for people with intellectual or developmental disabilities. The two programs cover services such as group homes, adult day programs, in-home care, and physical and occupational therapy.“Sevita has been owned by private equity firms for over a decade now, and has been under investigation and scrutiny at the federal and state level for basically that entire time,” O’Grady said.In 2022, Iowa fined a NeuroRestorative group home $10,500 after a resident was left unattended in a liquor store and drank three-quarters of a bottle of vodka. The same year, Massachusetts temporarily removed Sevita’s license to operate group homes after regulators reported inadequate staff training and supervision, and a “myriad of issues that were uncovered onsite,” according to a Massachusetts Department of Developmental Services report.The federal Centers for Medicare & Medicaid Services has fined a NeuroRestorative facility in Utah four times since 2022. A February 2024 inspection report by the agency found the facility “failed to prevent abuse, neglect … and exploitation” of residents.Last year, Florida fined another Sevita brand, Florida Mentor, for improper use of restraints. More issues have been documented in Sevita-owned locations in Arkansas, California, Colorado, Illinois, Indiana, New Hampshire and Nevada.Meanwhile, Sevita’s owners, Centerbridge and Vistria, have collected nearly half a billion dollars since 2019 by loading Sevita and Help at Home with debt in order to pay dividends to investors, according to Moody’s, a financial services company.Similar financial maneuvering contributed to the recent collapse of Steward Health Care, a private equity-owned hospital system that once had more than 30 hospitals nationwide. Steward has become a cautionary tale about the harm that profit-driven private equity firms can do to a state’s health system.“Before Steward Health Care ultimately collapsed, executives spent years hiding their financial information from state regulators, putting patients and our health care system at risk,” Massachusetts Democratic House Speaker Ron Mariano said in a statement earlier this year announcing a new state law that beefs up reporting and financial requirements for private investors.“That’s why ensuring that our institutions are equipped to monitor the health care landscape, and to guard against trends and transactions that drive up costs without improving patient outcomes, is so important.”David vs. GoliathAfter two residents of a New Jersey group home died from choking on food in 2017, attorney Cory Bernstein became interested in private equity’s involvement in disability services. The residents had been living in homes operated by AdvoServ, a company then owned by the private equity firm Wellspring Capital Management. The state had cited AdvoServ more times than any other operator in New Jersey for abuse, neglect and unsafe conditions.AdvoServ later ceased operations in 2019 after multiple state agencies, including in New Jersey, Florida and Maryland, launched investigations.But even when state regulators are doing all they can to protect people with disabilities from substandard care, they’re limited in how much they can hold a company accountable, Bernstein told Stateline.“It’s state-level oversight on a national entity with not much [help] coming from the federal side,” said Bernstein, who is now a staff attorney at the National Disability Rights Network, a membership organization of federally mandated state disability advocacy programs.“States just don’t really have the resources or tools to do what needs to be done.”A regulatory agency in Georgia might shut down all the group homes owned by a certain company, for example, but those regulators can’t do anything about the company’s abuses in, say, Montana. With branches in multiple states, a company is better able to withstand sanctions or even a loss of license in one state, he said.“[States] are not set up to go up against a national operator with billions of dollars in resources in a regulatory or oversight battle,” Bernstein said.Further complicating things for state regulators and for consumers is that a large services company such as Sevita might operate under multiple brand names, even in one state. It can be hard to parse out who owns a sanctioned business. Multiple brand names can also obscure a company’s monopoly on a particular regional market.When Florida regulators reached a settlement agreement with Sevita’s NeuroRestorative last year, the state dismissed its proposed license revocation. O’Grady believes one reason the state chose to settle is the difficulty of finding alternative facilities to relocate the residents who would have been displaced from the 13 locations the company operated around the state.“Because of that dearth of alternatives and the impotence of the state to act more fully, this company will continue to be allowed to operate,” she said.Further complicating oversight: Large companies often operate various services that are overseen by different agencies. Group homes might be regulated under the state’s Medicaid program, while facilities that provide more intensive care might come under federal Medicare oversight.There could be “two completely different oversight systems for facilities serving the same population in the same state with the same name,” Bernstein said.State SolutionsSome states have moved to address problems with private equity involvement in health care by passing tighter restrictions on mergers and acquisitions of health care companies.In Rhode Island, where private equity companies’ mismanagement of health care providers threatened the future of local hospitals, a robust oversight law allowed the state attorney general to impose conditions to protect the hospitals’ finances.More states are following suit. In 2023 alone, 24 states enacted laws related to health system consolidation and competition, while this year at least half a dozen have considered legislation to check private equity-fueled health care mergers.This article was published by Stateline. Read the original here.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: Sosumi.ai – Convert Apple Developer docs to AI-readable Markdown]]></title>
            <link>https://sosumi.ai/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45063874</guid>
            <description><![CDATA[sosumi.ai provides Apple Developer documentation in an AI-readable format by converting JavaScript-rendered pages into Markdown.]]></description>
            <content:encoded><![CDATA[
            
                Disclaimer: This is an unofficial, independent project and is not affiliated with or
                endorsed by Apple Inc. “Apple”, “Xcode”, and related marks are trademarks of Apple Inc.
            
            
                This service is an accessibility-first, on‑demand renderer. It converts a single Apple Developer page to
                Markdown only when requested by a user. It does not crawl, spider, or bulk download; it does not attempt
                to bypass authentication or security; and it implements rate limiting to avoid imposing unreasonable
                load.
            
            
                Content is fetched transiently and may be cached briefly to improve performance (approximately 30
                minutes). No permanent archives are maintained. All copyrights and other rights in the underlying
                content remain with Apple Inc. Each page links back to the original source.
            
            
                Your use of this service must comply with Apple’s Terms of Use and applicable law. You are solely
                responsible for how you access and use Apple’s content through this tool. Do not use this service to
                circumvent technical measures or for redistribution.
            
        ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Grok Code Fast 1]]></title>
            <link>https://x.ai/news/grok-code-fast-1</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45063559</guid>
        </item>
        <item>
            <title><![CDATA[Show HN: A minimal TS library that generates prompt injection attacks]]></title>
            <link>https://prompt-injector.blueprintlab.io/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45063547</guid>
            <description><![CDATA[Enterprise-grade prompt injection testing for AI security professionals]]></description>
            <content:encoded><![CDATA[🛡️  TypeScript Library for AI Security Testing   Lightweight AI Security Testing Library A minimal TypeScript library with 25+ curated prompt injection patterns from leading security research. 
						Easy to integrate, comprehensive coverage, production-ready. npm install prompt-injector import { PromptInjector } from 'prompt-injector'  🎯 0 Attack Patterns 🔬 4 Attack Categories 📚 SOTA Research Based 📝 0 Generated Prompts Attack Categories 🎭 Jailbreaking (5 patterns) Role-play and persona-based attacks that attempt to bypass AI safety guidelines through character roleplay and fictional scenarios. 🔀 Instruction Hijacking (6 patterns) Direct attempts to override system prompts and inject new instructions that change AI behavior and responses. 🔐 Encoding Attacks (7 patterns) Obfuscation techniques using Base64, ROT13, Unicode, and other encodings to bypass content filters and detection systems. 🧠 Logic Traps (6 patterns) Sophisticated reasoning exploits using hypothetical scenarios, false urgency, and academic authority to manipulate responses. Quick Start Example import { PromptInjector } from 'prompt-injector';

// Initialize with your preferred configuration
const injector = new PromptInjector({
  severity: 'intermediate',
  categories: ['jailbreak', 'instruction-hijack'],
  maxAttempts: 50
});

// Generate test cases
const testCases = injector.generateTests('customer-service-bot');

// Test your AI system
const results = await injector.runTests(yourAISystem);
const report = injector.generateReport(results);

console.log(`Risk Score: ${report.summary.riskScore}`);]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Gun Maker Sig Sauer Citing National Security to Keep Documents from Public]]></title>
            <link>https://practicalshootinginsights.com/eighth-circuit-fmeca-update/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45063431</guid>
            <description><![CDATA[The secrecy battle over the Army’s Failure Modes, Effects, and Criticality Analysis (FMECA) for Sig Sauer’s P320 has followed Glasscock v. Sig Sauer to the Eighth Circuit. A media intervenor is now asking the appellate court to keep key records open—and their brief places Practical Shooting Insights (this site) squarely in the middle of the story.]]></description>
            <content:encoded><![CDATA[
      
        
          
          

  
    
      
      
        
        
        August 28, 2025
      
    

    

    
      
      

      
        
        
          4 minute read
        
      
    
  


        
      

      
        
        The secrecy battle over the Army’s Failure Modes, Effects, and Criticality Analysis (FMECA) for Sig Sauer’s P320 has followed Glasscock v. Sig Sauer to the Eighth Circuit. A media intervenor is now asking the appellate court to keep key records open—and their brief places Practical Shooting Insights (this site) squarely in the middle of the story.

What’s new


  The Trace intervenes in the appeal. The newsroom moved to intervene for the limited purpose of opposing sealed filings tied to class certification and the FMECA, arguing the public’s right of access and noting the district court cited the FMECA nine times when it certified the class.





  Sig Sauer says “national security” and asks for deference to the Army. In opposing intervention, Sig Sauer urges the court to leave FMECA-related material sealed and to give the Army time to weigh in, framing the dispute in terms of protecting “military secrets.”







  A second FMECA document emerges. Sig Sauer’s opposition confirms there are two FMECA records in the class-certification exhibits: a FMECA Spreadsheet and a FMECA Memorandum—the latter not previously described in public filings—raising fresh questions about what the memo contains and who authored it.





  PSI’s reporting is part of the record. The Trace’s filing tells the court the unredacted FMECA was found on CourtListener, de‑obscured, and published on Practical Shooting Insights, where it “remains available”—and it recounts Sig Sauer’s own executive discussing it on a podcast while pointing viewers to this website.






The FMECA document was previously published here.



The Trace’s pitch: This isn’t secret anymore

The Trace walks the appellate court through how the FMECA left the bottle: it was posted on this website and then widely republished; a YouTube explainer discussing it surpassed 100,000 views. The filing quotes Sig Sauer’s VP of Consumer Affairs Phil Strader being asked on the Behind the Lens podcast why the FMECA shouldn’t be public and responding, “No, there’s not” (nothing to hide), while directing viewers to this website to see the document and describing its contents.





The reporting regarding Phil Strader’s interview was previously published here

How many times has the unredacted FMECA been “shared”? The filings don’t give a precise share count. What they do document is widespread republication and discussion, including the 100k‑plus video and multiple re‑posts mirroring the PSI copy. In other words, the genie is out of the bottle.

The Trace also points to DoD Instruction 5230.24, the policy Sig Sauer invokes, noting it does not authorize withholding unclassified information about evaluations of performance and reliability of military equipment—and that the PSI‑hosted FMECA bears no DoD distribution markings.





Sig Sauer’s response: Let the Army decide—and keep the lid on

Sig Sauer tells the Eighth Circuit The Trace lacks standing and that parallel briefing is already underway in the district court. Substantively, Sig Sauer leans on military‑secrets concerns, requests time for the Army to opine on release, and characterizes the FMECA as controlled technical information created under the MHS contract. (The company also recounts how the spreadsheet briefly became public in another case before being pulled down.)



Two details in Sig Sauer’s papers matter going forward:

1) The “FMECA Memorandum.” Sig Sauer identifies the memo alongside the previously published spreadsheet. If the memo is Sig Sauer‑authored, it could reveal how the company framed the Army analysis internally—an issue directly relevant to notice, risk mitigation, and marketing claims.

2) Ongoing Army communications. Sig Sauer’s litigation counsel filed a declaration stating he asked the Army about the FMECA’s distribution status and that key Army decision‑makers were unavailable the week of the deadline; Sig Sauer says the Army may submit information and seeks additional time.





The transparency question, distilled


  
    Is the FMECA “national‑security” material? The Trace says no—and points to DoDI 5230.24’s carve‑out: it does not provide authority to withhold unclassified evaluations of performance and reliability—exactly what a FMECA is. It also underscores the lack of any DoD marking on the PSI copy.
  
  
    Is secrecy even possible at this point? The record shows the unredacted spreadsheet is online on this website, has been reposted broadly, and has been discussed by Sig Sauer’s own executive on air—who told listeners where to find it. One video discussing it has 100,000+ views.
  




Why this matters to the class action—and to owners

The district court relied on the FMECA repeatedly when certifying the Missouri class, including on notice and risk‑mitigation questions—the very issues consumers care about. Keeping the heart of that analysis under seal on appeal would blunt the public’s ability to scrutinize a product‑safety fight with real‑world consequences.



My role, plainly

Practical Shooting Insights is an independent site covering the shooting‑sports and firearms industry. The Trace’s filing names PSI as the first publisher of the unredacted spreadsheet and quotes Strader pointing viewers here. I will continue to publish filings and analysis so readers can compare the arguments to the documents themselves.



What to watch next

1) Whether the Eighth Circuit permits intervention and applies the strong presumption of public access to class‑certification records.
2) If the Army weighs in—and on what basis—regarding the FMECA’s distribution status.
3) Disclosure of the FMECA Memorandum. If it’s Sig Sauer-authored, it could illuminate internal framing of hazards and fixes—material at the core of consumer‑protection claims.

        
      

      

      


      
  


    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Deepnote (YC S19) is hiring engineers to build a better Jupyter notebook]]></title>
            <link>https://deepnote.com/join-us</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45062914</guid>
            <description><![CDATA[We need powerful data science tools that help us explore, reason, and collaborate. These tools do not exist yet. Help us invent them.]]></description>
            <content:encoded><![CDATA[We build tools for explorersWe are here to revolutionize how data teams work together.We started Deepnote to help data teams solve the hardest problems. We don’t just need better algorithms, bigger data sets, and more computing power. We need tools that help us explore, collaborate, and share. These tools don’t exist yet. We need to invent them first.Data work is as much a scientific and creative process as it is an engineering one. It involves working together, failing, learning, and going back to the drawing board. Data professionals are explorers. To make projects successful, we need tools that are both powerful and easy to use. Tools that help us collaborate and share our work in an engaging way. Tools that make working with data fun again.That’s why we’re building the new standard in data tooling: a notebook that brings teams together to code, query, visualize, organize, and share — all in one place.We are building tools for explorers. Join us.Build the future with usWe’re building a collaborative notebook that beautifully integrates analytics and data science into every workflow and decision. But it’s not just about designing, shipping, and selling. It’s about the people who power it — and that means you.Get ready to do your best workTransforming how people work with data isn't easy. But we built a culture that allows us to do precisely that.We move with urgencyWe are a small, passionate team revolutionizing how data teams work. We give everyone the tools they need and enable them to take action.We keep learningWe are knowledge-seekers. We invest in continuous learning across every role and encourage a culture of proactive feedback.We take ownershipWe are makers. We expect everyone to be a decision-maker — no politics or walls to get in the way.We collaborateWe are partners. We work in a fully transparent environment and put open, effective communication above all else.Backed by the best in the businessWe’re backed by industry leaders — and they’re as excited about reimagining the future as we are.Y CombinatorIndex VenturesAccelGreg BrockmanCTO at OpenAIElad GilAngel InvestorNaval RavikantAngel InvestorElena VernaAngel InvestorExplore open positionsThousands of data professionals already use Deepnote — but we’re only scratching the surface of what’s possible. We’re building out our core team, and we want kind, curious explorers to join and grow with us.Senior Business Development Executive (B2B SaaS)Remote→Go to jobHead of Data / Solutions EngineerPrague→Go to job]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Meta might be secretly scanning your phone's camera roll]]></title>
            <link>https://www.zdnet.com/article/meta-might-be-secretly-scanning-your-phones-camera-roll-how-to-check-and-turn-it-off/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45062910</guid>
            <description><![CDATA[Some Facebook users have noticed new settings that let Meta analyze and retain your phone's photos. Yes, you read that right.]]></description>
            <content:encoded><![CDATA[   Why is Facebook cloud-processing my device's camera roll?   Meta is uploading and analyzing your camera roll photos and videos, even ones you haven't posted, in its cloud in order to generate AI-powered suggestions like collages, monthly recaps, themed albums, or AI-restyled versions of your images.      Where is this feature being tested?   Meta has confirmed the feature is a test, saying, "We're exploring ways to make content sharing easier for people on Facebook by testing suggestions of ready-to-share and curated content from a person's camera roll."   The test is currently available in the US and Canada, but it's not available in Illinois or Texas due to those states' privacy laws.      Did Facebook ask for my consent before turning this on?   Meta is showing a pop-up asking users if they want to enable cloud processing, but some users claim they haven't seen it. Instead, they found the toggles in their settings already switched on by default, raising questions about whether clear consent was given.      Elyse Betters Picaro / ZDNET Can I remove my photos once they've been uploaded? ZDNET's sister site, CNET, reports that Meta pulls from your newer pictures (roughly the last 30 days) and if you disable the feature, your uploaded photos will be deleted after 30 days. The only way to confirm is by downloading your Facebook account data.   Why is this a potential privacy issue?   It expands Meta's reach beyond the content you've chosen to upload and share online -- into your private, unposted photos and videos. For many, that's a major red flag and a line they're not comfortable crossing, understandably so.   Also: What Zuckerberg's 'personal superintelligence' sales pitch leaves outEven if Meta is asking for consent to access your camera roll in order to analyze your phone's photos and provide AI-powered suggestions, the company could have done a better job of being clear and explicit about what it's trying to do.   How many users, like me, simply dismissed the consent pop-up without fully realizing what they'd just agreed to?   Editor's note: This article was updated on Aug. 24, 2025 to clarify that Meta's camera roll sharing suggestions are not turned on by default and are entirely opt-in. Still, some users say they never knowingly agreed and are finding the features enabled in their settings.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[If you have a Claude account, they're going to train on your data moving forward]]></title>
            <link>https://old.reddit.com/r/LocalLLaMA/comments/1n2ubjx/if_you_have_a_claude_personal_account_they_are/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45062738</guid>
        </item>
        <item>
            <title><![CDATA[Updates to Consumer Terms and Privacy Policy]]></title>
            <link>https://www.anthropic.com/news/updates-to-our-consumer-terms</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45062683</guid>
            <description><![CDATA[Anthropic is an AI safety and research company that's working to build reliable, interpretable, and steerable AI systems.]]></description>
            <content:encoded><![CDATA[FAQWhat’s changing?We will train new models using data from Free, Pro, and Max accounts when this setting is on (including when you use Claude Code from these accounts).If you’re a current user, you can select your preference now and your selection will immediately go into effect. This setting will only apply to new or resumed chats and coding sessions on Claude. Previous chats with no additional activity will not be used for model training. You have until September 28, 2025 to make your selection.If you’re a new user, you can pick your setting for model training during the signup process.You can change your selection at any time in your Privacy Settings.We are also expanding our data retention period to five years if you allow us to use your data for model improvement, with this setting only applying to new or resumed chats and coding sessions. If you don't choose this option, you will continue with our existing 30-day data retention period.These updates do not apply to services under our Commercial Terms, including:Claude for Work, which includes our Team and Enterprise plansOur API, Amazon Bedrock, or Google Cloud’s Vertex APIClaude Gov and Claude for EducationWhy are you making this change?All large language models, like Claude, are trained using large amounts of data. Data from real-world interactions provide valuable insights on which responses are most useful and accurate for users. For example, when a developer debugs code by collaborating with an AI model, that interaction offers valuable signals that help improve future models on similar coding tasks. This creates a feedback loop that helps models get better over time.It’s up to you to choose whether to allow your data to be used to improve new Claude models and you can change your choice anytime in your Privacy Settings.Why are you extending the data retention period?AI development cycles span years—models released today began development 18 to 24 months ago. Keeping data consistent across the training process helps make the models more consistent, too: models trained on similar data will respond, reason, and produce outputs in similar ways, making the changes between model upgrades much smoother for users.The extended retention period also helps us improve our classifiers—systems that help us identify misuse—to detect harmful usage patterns. These systems get better at identifying activity like abuse, spam, or misuse when they can learn from data collected over longer periods, helping us keep Claude safe for everyone.If you change your setting on providing your data for training or delete your account, we'll exclude your data from future model training. If you delete individual chats, they won't be included in future training either. Learn more about our data retention practices here.What action do I need to take?Current users will see an in-app notification asking whether you want to share your chats and coding sessions for model improvement. You can make your selection right away, or select "not now" and decide later. You have until September 28, 2025 to make your choice. If you choose this option, the updated 5-year data retention policy will also immediately apply to new and resumed chats and coding sessions. Once September 28 arrives, you'll need to select your preference to continue using Claude.If you're signing up for Claude today, you'll see this decision as part of the signup flow. And remember—you can always update your preference in Privacy Settings.What happens if I allow my data to be used for model training and then change my mind?You can always update your selection in your Privacy Settings. If you decide to turn off the model training setting, we will not use any new chats and coding sessions you have with Claude for future model training. Your data will still be included in model training that has already started and in models that have already been trained, but we will stop using your previously stored chats and coding sessions in future model training runs.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tesla said it didn't have key data in a fatal crash, then a hacker found it]]></title>
            <link>https://www.washingtonpost.com/technology/2025/08/29/tesla-autopilot-crashes-evidence-testimony-wrongful-death/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45062614</guid>
            <description><![CDATA[The key evidence was presented last month to a jury, which found the company partially liable for the 2019 crash in Key Largo, Florida.]]></description>
            <content:encoded><![CDATA[Years after a Tesla driver using Autopilot plowed into a young Florida couple in 2019, crucial electronic data detailing how the fatal wreck unfolded was missing. The information was key for a wrongful death case the survivor and the victim’s family were building against Tesla, but the company said it didn’t have the data.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Probability of typing a wrong Bitcoin address]]></title>
            <link>https://www.johndcook.com/blog/2025/08/28/wrong-address/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45061980</guid>
            <description><![CDATA[How likely is it that a mistyped Bitcoin address is a valid address? How likely is it that some address is a plausible typo of another?]]></description>
            <content:encoded><![CDATA[
		I heard someone say that Bitcoin is dangerous because you could easily make a typo when entering an address, sending money to the wrong person, and have no recourse. There are dangers associated with Bitcoin, such as losing a private key, but address typos are not a major concern.
Checksums
There are several kinds of Bitcoin addresses. Each is at least 20 bytes (160 bits) long, with at least 4 bytes (32 bits) of checksum. The chances of a typo resulting in a valid checksum are about 1 in 232.
Used addresses
Let’s ignore the checksum for this section.
Because addresses are formed by cryptographic hash functions, we can assume the values are essentially randomly distributed in the space of possible addresses. The addresses are deterministic, but for modeling purposes, random is as random does.
This means a typo of an actual address is no more or less likely to be another actual address than an address typed at random. This is unlike, say, English words: a mistyped English word is more likely to be another English word than random keystrokes would be.
There have been on the order of a billion Bitcoin addresses used, in a space of 2160 possibilities. (Actually more since some addresses have more than 160 bits.) There’s about a 1 in 1039 chance that a random 160-bit sequence corresponds to an address somewhere on the Bitcoin blockchain.
Addresses close in edit distance
Someone with the Caesarean handle Veni Vidi Vici on X asked
What about the odds that out of those 1B addresses, two of them are one character swap away from each other?
That’s an interesting question. Let’s assume the addresses are Base58-encoded strings of length 26. Addresses could be longer, but assuming the minimum length increases the probability of addresses being close.
How many addresses are within one or two character swaps of another? I addressed a similar question here a couple weeks ago. If all the characters were unique, the number of strings within k swaps of each other would be
|S1(26, 26 − k)|
where S1 denotes Stirling numbers of the first kind. For k = 1 this would be 325 and for k = 2 this would be 50,050. This assumes all the characters are unique; I haven’t thought through the case where characters are repeated.
For round numbers, let’s say there are a billion addresses, and for each address there are a million other addresses that are close in some sense, plausible typos of the address. That would be 1012 addresses and typos, spread out in a space of ≈1045 (i.e. 5826) possible addresses.
Now there’s an implicit Birthday Problem here. No particular address is likely to collide with another, even when you allow typos, but what about the likelihood that some address collides?
Say we partition our space of 1045 addresses into N = 1029 addresses with a million possible typos for each address. Then as a rule of thumb, you’d need around √N random draws before you have a 50-50 chance of seeing a collision. Since 109 is a lot less than 1014.5, it’s unlikely that any two addresses collide, even when you consider each address along with a million associated typos.
			]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Contrastive Representations for Temporal Reasoning]]></title>
            <link>https://princeton-rl.github.io/CRTR/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45061689</guid>
            <description><![CDATA[Official website of Contrastive Representations for Temporal Reasoning (CRTR)]]></description>
            <content:encoded><![CDATA[

  
            Contrastive Representations for Temporal Reasoning
            
  
            
  
            *Equal Advising Contribution
            
  
            
            
              
                
                Your browser does not support the video tag.
              
            
  
            
  
          
  
  
       Key Question: Can we improve temporal reasoning by learning better representations?
       Method: A novel negative sampling scheme provably enables learning temporal representations.
       Result: CRTR learns representations that enable solving Rubik's Cube without hand-crafted heuristics and improves the success rates overall.
    
  
  
        
            
                CRTR makes representations reflect the structure of combinatorial tasks. t-SNE visualization of representations learned by CRTR (right) and CRL (left) for Sokoban.
                Colors correspond to trajectories; three frames from two trajectories are shown in the center and linked to their representations.
                CRL embeddings cluster tightly within trajectories, failing to capture global structure and limiting their usefulness for planning.
                In contrast, CRTR organizes representations meaningfully across trajectories and time (vertical axis).
              
          
        
  
  
  
            Abstract
            
              In classical AI, perception relies on learning spatial representations,
              while planning—temporal reasoning over action sequences—is typically achieved through search.
              We study whether such reasoning can instead emerge from representations that capture both spatial and temporal structure.
              We show that standard temporal contrastive learning, despite its popularity, often fails to capture temporal structure,
              due to reliance on spurious features. To address this, we introduce Contrastive Representations for Temporal Reasoning (CRTR),
              a method that uses a negative sampling scheme to provably remove these spurious features and facilitate temporal reasoning.
              CRTR achieves strong results on domains with complex temporal structure, such as Sokoban and Rubik’s Cube.
              In particular, for the Rubik’s Cube, CRTR learns representations that generalize across all initial states and allow
              solving the puzzle much faster than BestFS—though with longer solutions. To our knowledge, this is the first
              demonstration of efficiently solving arbitrary Cube states using only learned representations, without hand-crafted search heuristics.
            
        
 

  
          
            Experiments
          
        
    
  




        Correlation Analysis
        
            Distances given by CRTR representations reflect the temporal structure well. Correlation (Spearman's ρ) between the distance induced by learned embeddings and actual distance across the training, CRTR compared with CRL.
          
        
        
      




        Block Building Behavior
        
            CRTR without search exhibits a block-building-like behavior. Intermediate states from solving a randomly scrambled cube, illustrating how the algorithm gradually builds partial structure. The average solve is about 400 moves, and we see similar block building behavior across solves.
          
        
        
      



 ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Strange CW Keys]]></title>
            <link>https://sites.google.com/site/oh6dccw/strangecwkeys</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45060161</guid>
            <description><![CDATA[Made by OH6DC
You can also use the Text-only index page (divided into useful categories).]]></description>
            <content:encoded><![CDATA[HomeStrange CW KeysMade by OH6DCYou can also use the Text-only index page (divided into useful categories).Lever arch file CW key Lambic pedals Valentine's day lollipop CW paddle Rubber stamp CW key Letter scale CW key Clamp cootie Code book Pepper mill CW key Lightsaber CW key Nutcracker CW key Straight(ener) key Smoke alarm CW key Teletubbygraph key Soap dispenser CW key Vinyl record player CW key Moomin triangle CW key Antiperspirant roll-on CW key Dual banana CW paddle Power twister CW key Power twister CW key Handsaw CW key Hole punch CW key Watering can CW key Toilet brush CW key CW glove Remote control CW key Tea bag CW key Eyebrow-raising CW key with optical transmitter Back scratcher CW key Whisk CW key Pliers CW key Liver casserole CW key Licorice pipe CW key Chocolate CW key Ski-W key Power drill CW keyer Six megapixel CW key Suspenders CW key Spirit bottle cap CW key Speed skate CW key Flower CW key Knee pad sideswiper CW key for portable operation QRP transmitter powered by a CW key Alarm clock CW key Hammer CW key CW gun Nail clipper CW key Ballpoint pen CW key Rotary dial CW key Hammock CW key Joystick CW key Rowing boat CW key Guitar CW key Wallet CW key Radio controlled CW key Amaryllis telegraphiensis Multi-function knife with CW key Toilet paper roll CW key Table ice hockey CW key Big toe CW key Waffle iron CW key Lego straight key Lego bug Pogo stick CW key Crutch CW key Smoke signal CW key CCW key Necktie CW key Toothbrush CW key Bench press CW key Handshake CW key Chopsticks CW key Trailer hitch CW key Typewriter CW keyboard Refrigerator CW key Mobile phone CW key Paper cup iambic paddles Morsetrap CW key Fingertips CW key Vacuum cleaner semi-automatic CW key Banana CW key Rolling pin CW key Toaster CW key Cheese slicer CW key Rocking chair CW key QLF pedal for left foot CW Cross-country ski shoe CW key CW insoles QRQ paddles Onion chopper CW key Beer can CW key Egg slicer CW key Stapler CW key Bicycle pump CW key Iron bar CW key Homebrew semi-automatic bug Hacksaw blade sideswiper CW key Plywood CW key Home  |  Homebrew QRP  Page updated Google SitesReport abuse]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[PSA: Libxslt is unmaintained and has 5 unpatched security bugs]]></title>
            <link>https://vuxml.freebsd.org/freebsd/b0a3466f-5efc-11f0-ae84-99047d0a6bcc.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45060004</guid>
            <description><![CDATA[Alan Coopersmith reports:]]></description>
            <content:encoded><![CDATA[
Alan Coopersmith reports:

	  On 6/16/25 15:12, Alan Coopersmith wrote:
	  
	    BTW, users of libxml2 may also be using its sibling project, libxslt,
	    which currently has no active maintainer, but has three unfixed security issues
	    reported against it according to
	    
		https://gitlab.gnome.org/Teams/Releng/security/-/wikis/2025#libxml2-and-libxslt
	  
	  2 of the 3 have now been disclosed:
	  (CVE-2025-7424) libxslt: Type confusion in xmlNode.psvi between stylesheet and source nodes
	    https://gitlab.gnome.org/GNOME/libxslt/-/issues/139
	    https://project-zero.issues.chromium.org/issues/409761909
	  (CVE-2025-7425) libxslt: heap-use-after-free in xmlFreeID caused by `atype` corruption
	    https://gitlab.gnome.org/GNOME/libxslt/-/issues/140https://project-zero.issues.chromium.org/issues/410569369
	  Engineers from Apple & Google have proposed patches in the GNOME gitlab issues,
	  but neither has had a fix applied to the git repo since there is currently no
	    maintainer for libxslt.
	

Note that a fourth vulnerability was reported on June 18, 2025, which remains undisclosed to date (GNOME libxslt issue 148, link below), see
	  
	    https://gitlab.gnome.org/Teams/Releng/security/-/wikis/2025#libxml2-and-libxslt
	
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Lucky 13: a look at Debian trixie]]></title>
            <link>https://lwn.net/Articles/1033474/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45059160</guid>
            <description><![CDATA[After more than two years of development, the Debian Project has released its new stable versio [...]]]></description>
            <content:encoded><![CDATA[

After more than two years of development, the Debian Project has released its new stable version, Debian 13 ("trixie"). The release comes with the usual bounty of
upgraded packages and more than 14,000 new packages; it also debuts Advanced Package Tool
(APT) 3.0 as the default package manager and makes 64-bit
RISC-V a supported architecture. There are few surprises with trixie,
which is exactly what many Linux users are hoping for—a free
operating system that just works as expected.

Debian's stable
releases are aptly named; the project prioritizes stability over
shipping the latest software. The freeze
schedule for trixie called for a soft freeze in April, which meant
that (for example) the KDE Plasma 6.4
release in June was too late to make the cut—even though trixie
was not released until August. Users who prefer to live on the edge
will want to run another distribution or follow Debian development by
running the testing release
that previews the next stable version—Debian 14 ("forky"). Truly
adventurous users may take their chances with the unstable ("sid")
release.

That said, trixie is up-to-date enough for many folks; it includes
GNOME 48, KDE Plasma 6.3, Xfce 4.20, GNU
Emacs 30.1, GnuPG 2.4.7, LibreOffice 25.2, and
more. Under the hood, it includes the most recent Linux LTS kernel
(6.12.41), GNU Compiler Collection (GCC) 14.2, GNU C Library (glibc)
2.41, LLVM/Clang 19, Python 3.13, Rust 1.85, and
systemd 257. The release notes have a section
for well-known software that compares the version in Debian 12
against Debian 13. While some of the versions lag a bit behind the
upstream, they are not woefully outdated.


$ sudo subscribe today

Subscribe today and elevate your LWN privileges. You’ll have
access to all of LWN’s high-quality articles as soon as they’re
published, and help support LWN in the process.  Act now and you can start with a free trial subscription.

The project now supports
six major hardware architectures: x86-64/amd64, 32-bit Arm with a
hardware FPU (armhf), 64-bit Arm (arm64), IBM POWER8 or newer
(ppc64el), IBM S/390 (s390x), and 64-bit RISC-V. The i386 architecture
is not supported for trixie, though the project continues to
build some i386 packages to run on 64-bit systems; users with i386 systems cannot upgrade to
trixie. The MIPS
architectures (mipsel and mis64el) have also been removed in trixie.

The Arm EABI
(armel) port that targets older 32-bit Arm devices prior to Arm v7 is
still supported with trixie, but this release is the end of the
line. There is no installation media for armel systems, but users who
have bookworm installed can upgrade to trixie if they have supported
hardware: the Raspberry Pi 1, Zero, and Zero W are the
only devices mentioned in
the release notes.

Upgrades from bookworm are supported, of course. The release
notes suggest that users convert APT source files to the DEB822 format
before the upgrade. APT 3.0
includes an "apt modernize-sources" command to convert APT data
source files to DEB822, but that is not available in bookworm. Users are
also expected to remove
all third-party packages prior to running the upgrade. I tested
the upgrade on one of my servers, after taking a snapshot to roll back
to if needed, and all went smoothly. Users who are considering an
upgrade should read the release notes carefully before forging ahead;
in particular, users should be aware that it's possible (but not
certain) for network interface names to change on upgrade.

Installation

For users who want to start fresh, Debian offers a
variety of installer images and download methods; users can choose
a 64MB minimal ISO image with the netboot
installer, all the way up to a set of Blu-ray images. The project
recommends using BitTorrent or Jigsaw
Download (jigdo) for the largest images. BitTorrent probably needs
no introduction, but jigdo is not as well-known. Jigdo is a method of
downloading all of the individual packages for an image from multiple
mirrors and then assembling them into an ISO image on the user's
machine. It was a bit fiddly to use jigdo to download an image, but
not overly so—and the speed of the whole process was comparable
to simply downloading an ISO of the same size.

Debian's network
install ("netinst") image is probably the best option for server
installations and for experienced Linux users; it includes the
packages required for a base install and then fetches the remaining
software from Debian mirrors. Unlike the tiny netboot image, it
includes the option of using either the graphical installer or the
text-based installer.

The installer is a bit of a throwback to an earlier era when users
were expected to know a lot more about the workings of a Linux system. 
Users who have only worked with distributions like Fedora and Ubuntu
will notice that installing Debian requires many more steps than other
popular distributions. For example, many desktop distributions have
eliminated the step of setting a password for the root
user—instead, it is generally assumed that the primary user will
also be the system administrator, so the default is to give the
primary user sudo privileges instead. Debian does not take that
approach; in fact, there is no way to give a user sudo privileges
during installation. Setting up sudo has to be done manually after
the installation is completed Update: Users can skip creation of a root account and the installer will then set up the regular user as an administrator with sudo permissions. Apologies for the error.

For some folks, installing Debian will be a bit of a chore and may
even be confusing for users who are new to Linux. For example, the
text-mode installer requires users to specify the device for GRUB boot
loader installation, without providing a default. If one chooses an
invalid partition, the installer tells the user that the operation has
failed and drops back to a menu listing all the installation
steps. Presumably if one picks the wrong partition it will
happily install GRUB to that and render the system unbootable. This is
not insurmountable for experienced Linux users, but it would no doubt
be a hurdle for many users.

More experienced Linux users are likely to appreciate the
amount of control offered by the installer. For example, Fedora's
recent web-based installer makes it difficult to even find the option to
perform custom partitioning. Debian has a guided partitioning option
for those who do not want to fuss with it, but the option to create
custom partitions is not hidden from the user.

Debian has a better installation option for newer Linux users,
though it is easy to miss: the live install images, which
use the Calamares installer. Its
workflow is more akin to the installation process one finds with
Fedora and Ubuntu; it also sets up the primary user with sudo
privileges rather than creating a root password. Unfortunately,
the live images are not listed on the main page for installer
images—though they are mentioned, briefly, in the release
notes.







The Debian installer also has the option of using a Braille display
and/or speech synthesizer voice for the installation. I have not tried
these options, but they are available for users who need them.

X.org

Many distributions are in the process of phasing out X.org support
for GNOME and KDE as the upstream projects have started doing so.
For example, Fedora will remove X.org session support
for GNOME in Fedora 43, and the plan is for Ubuntu to do the same
in its upcoming 25.10 release. GNOME will be completely removing X.org
support in GNOME 49, which is planned for September.

Much has already been said about this, of course, and there is
likely little new left to be said or that needs to be
said. However, for users who still need or want X.org support,
Debian 13 includes X.org sessions for GNOME and KDE. In testing
trixie, I've spent some time in the GNOME and KDE X.org sessions as
well as the Wayland sessions; if there are any gotchas or horrible
bugs, I haven't encountered them (yet). This might be a compelling
reason for some folks to switch to (or stick with) Debian.

Trying trixie

I use Debian for my personal web site and blogs, but it has been
quite some time since I used it as my primary desktop operating
system. Debian (and Ubuntu) derivatives, such as Linux Mint and Pop!_OS, yes—but it's been
several years since I've used vanilla Debian on the desktop for
more than casual tinkering.

The Debian release announcement boasts about the number of packages
included in trixie: 64,419 packages total, with 14,100 added and more
than 6,000 removed as obsolete
since bookworm. That is quite a few packages, but falls short of some
other distributions. For example, "dnf repoquery --repo=fedora
--available" shows more than 76,000 packages available for
Fedora 42.

After installing Debian, I went to install some of my preferred
software, such as aerc,
Ghostty, niri, and Speech Note. The aerc
packages in trixie are current, but Ghostty and niri are not packaged
for Debian at all. Ghostty is written in Zig, which is also not
available, so users who want to build it from source will need to
install Zig separately and then build Ghostty. Speech Note is packaged
as a Flatpak, but Debian does not enable Flatpaks or Flathub in the
GNOME Software Store by default. Users who want Flatpaks on Debian via
Flathub will need to install the flatpak package and manually
add the Flathub repo:

    flatpak remote-add --if-not-exists flathub \
      https://dl.flathub.org/repo/flathub.flatpakrepo


Users will need to add the gnome-software-plugin-flatpak
package for Flatpak support in GNOME Software, and
plasma-discover-backend-flatpak to add it to
KDE Discover.

Trixie ships with the Firefox extended-support release (ESR) by
default: Firefox
128, which was released in July 2024. Happily,
Mozilla offers a Debian
repository for those who want to run more current versions. Even
better, there is a little-advertised utility called extrepo that
has a curated list of external repositories users might want to enable
for Debian. To enable the Mozilla repository, for example, a user only
needs to install extrepo, run
"extrepo enable mozilla" as root (or with
sudo), update the package cache, and look for the regular
Firefox package. In all, extrepo includes more than 160 external
repositories for applications like Docker CE, Signal, and Syncthing. Unfortunately, the
extrepo utility does not have a separate "list" command to show the
available repositories, though running "extrepo search"
with no search parameter will return all of its DEB822-formatted
repository entries. Some of the software is
in an external repository due to a non-free license, other software (like
Firefox) just has a development cycle that outpaces Debian's.

As one might expect, the Debian desktop experience is not
dramatically different from other distributions; GNOME 48 on
Debian is little different than GNOME 48 on Fedora, and the same
is true for KDE, Xfce, etc. The primary difference is that users can
expect more or less the same desktop experience running Debian stable
in two years that they have today, which is not necessarily true for
other distributions.

Miscellaneous

One of the features in Debian 13 is something that most users
won't notice or appreciate at all: a transition to
64-bit time_t on 32-bit architectures, to avoid the Year 2038 problem. The
short version is that 32-bit integers cannot hold a Unix epoch
timestamp for dates after January 19, 2038. That may seem
like a distant concern, even irrelevant for Debian trixie; after all,
Debian 13 is only supported by the project until 2030. However,
the project expects that some 32-bit embedded systems will still be running
trixie in 2038, so Debian developers did the heavy lifting to complete
the transition to 64-bit time_t now. LWN covered the early planning
for this in 2023.

By now, most users have retired their DSA
SSH keys; if not, now is the time to do so. DSA keys were disabled by
default with OpenSSH in 2015, and they are entirely disabled now with
the openssh-client and openssh-server packages in
trixie. If there is a device that can, for some reason, only be
connected to with DSA, users can install the
openssh-client-ssh1 package and use ssh1 to make the
connection.

As we covered in
June 2024, Debian 13 has switched to using a tmpfs
filesystem for the /tmp directory. By default, Debian
allocates up to 50% of memory to /tmp, but this can be
changed by following the instructions
in the release notes. Note that this also applies to systems that
are upgraded to trixie from bookworm.

Forward to forky

Debian Project Leader (DPL) Andreas Tille recently
announced "Debian's 100000th birthday", so clearly the project has a
bit of experience with putting out solid releases. Granted, he was
reporting the number in binary, but even when converted to decimal 
numbers (32 years), it's an impressive track record.

While testing, I installed trixie on a couple of systems, including
a new Framework 12-inch laptop. My original intent was to just see
whether Debian had any problems with the new hardware (it didn't), but
now I'm leaning toward sticking with Debian on this system for a while
to see if stability suits me.

With trixie out the door, the Debian Project has already turned its
attention to working on forky, which has no release date set. Debian has
stuck to a loose schedule of a new stable release roughly every two
years. Most likely we will see Debian 14 sometime in 2027. After
the forky release, trixie will still receive updates from Debian's
security team through 2028, and then from its LTS team through 2030.

As of yet, there are no major new features or changes announced for
forky; it seems likely that those will be coming to light in the
coming months now that the project has trixie out the door. LWN will,
of course, be reporting on those developments as they happen.


            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Claude Sonnet will ship in Xcode]]></title>
            <link>https://developer.apple.com/documentation/xcode-release-notes/xcode-26-release-notes</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45058688</guid>
        </item>
        <item>
            <title><![CDATA[Expert: LSP for Elixir]]></title>
            <link>https://github.com/elixir-lang/expert</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45057322</guid>
            <description><![CDATA[Official Elixir Language Server Protocol implementation - elixir-lang/expert]]></description>
            <content:encoded><![CDATA[Expert
Expert is the official language server implementation for the Elixir programming language.
Installation
You can download Expert from the releases page for your
operating system and architecture. Put the executable somewhere on your $PATH, like ~/.local/bin/expert
For editor specific installation instructions, please refer to the Installation Instructions
Nightly Builds
If you want to try out the latest features, you can download a nightly build.
Using the GH CLI, you can run the following command to download the latest nightly build:
gh release download nightly --pattern 'expert_linux_amd64' --repo elixir-lang/expert
Then point your editor to the downloaded binary.
Building from source
To build Expert from source, you need Zig 0.14.1 installed on your system.
Then you can run the following command or follow the instructions in the Installation Instructions:
just release-local
This will build the Expert binary and place it in the apps/expert/burrito_out directory. You can then point your
editor to this binary.
Sponsorship
Thank you to our corporate sponsors! If you'd like to start sponsoring the project, please read more below.






Corporate
For companies wanting to directly sponsor full time work on Expert, please reach out to Dan Janowski: EEF Chair of Sponsorship WG at danj@erlef.org.
Individual
Individuals can donate using GitHub sponsors. Team members are listed in the sidebar.
Other resources

Architecture
Development Guide
Glossary
Installation Instructions

LICENSE
Expert source code is released under Apache License 2.0.
Check LICENSE file for more information.
]]></content:encoded>
        </item>
    </channel>
</rss>