<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Tue, 02 Sep 2025 11:50:46 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[What's New with Firefox 142]]></title>
            <link>https://www.mozilla.org/en-US/firefox/142.0.1/whatsnew/?oldversion=139.0.4&amp;utm_medium=firefox-desktop&amp;utm_source=update&amp;utm_campaign=142</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45101300</guid>
            <description><![CDATA[What’s New | Firefox 142]]></description>
            <content:encoded><![CDATA[
  
    
    
            What’s New | Firefox 142
            Keep your email address to yourself.
            Firefox Relay generates secure email masks when you sign up for new online accounts, so you can stay anonymous and get less spam in your inbox.
            
          



    
        Know before you click. Stay in control as you browse.
        Firefox helps you preview links and keep tabs tidy so nothing slows you down.

        
            Link Previews
            See what's behind the link before you click.
            Link Previews show a snapshot of a page before you open it, helping you decide what’s worth your time. Just long press any link to preview and reduce distractions.
            
          

        
            AI-Enhanced Tab Groups
            Your tabs, automatically grouped by topic.
            A local AI model identifies similar tabs, automatically organizes them into groups, and even suggests group names, helping you stay organized. Everything happens on your device to respect your privacy.
            
          

        
          See Full Release Notes
        
      



    
    
        Tailor Firefox to fit your flow.
        Stay organized, find what you need, and browse your way.
        
      

    
    
        Keep up with all things Firefox
        Get monthly how-tos, advice and news to make your Firefox experience work best for you.
        






  
    
      
    
    

    Your email address
    
      
    
    

    

    
    
    
    
      
        Please enter a valid email address
        We are sorry, but there was a problem with our system. Please try again later!
      
    
  
  


      

    
    
        What’s New on Firefox Mobile?
        New tools for focus, privacy, and smoother mobile browsing.
        
          
            PrivacyAndroid
            
            Private tabs that stay private
            Your private tabs lock automatically when you step away — and only unlock with your face, fingerprint, or PIN.
          
          
            LanguageAndroid
            
            Getting even more multilingual
            Now translate web pages into Japanese, Chinese, Korean and more, so you can browse in your preferred language.
          
          
            SecurityiOS
            
            Smarter passwords, fewer hassles
            Firefox suggests strong passwords when you’re creating a new account on any site, and keeps them secure, ready on any device when you sync.
          
          
            DesigniOS
            
            A cleaner look with sharper focus
            A streamlined UI and upgraded dark mode on Firefox for iOS bring clarity and calm to everything you browse.
          
        
      

    
    
                Take Firefox with you
                Scan the QR code to get Firefox Mobile and browse with calm, focus, and control — wherever you go.
              

  
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Europol said ChatControl doesn't go far enough; they want to retain data forever]]></title>
            <link>https://old.reddit.com/r/europe/comments/1n6cjw1/europol_said_chat_control_doesnt_go_far_enough/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45101127</guid>
        </item>
        <item>
            <title><![CDATA[Unfortunately, the ICEBlock app is activism theater]]></title>
            <link>https://micahflee.com/unfortunately-the-iceblock-app-is-activism-theater/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45101117</guid>
            <description><![CDATA[At this summer's HOPE conference, Joshua Aaron spoke about ICEBlock, his iPhone app that allows users to anonymously report ICE sightings within a 5 mile radius, and to get notifications when others report ICE sightings near them. You can see the full talk, and the lively/infuriating Q&A, here, starting at 6:12:10.

Thanks to repression from the highest levels of the Trump administration, his app has gone viral and garnered over a million downloads from the App Store. Karoline Leavitt called it]]></description>
            <content:encoded><![CDATA[
            
                    
                        
                            
        
            ICEBlock developer Joshua Aaron speaking remotely at Hackers on Planet Earth on August 17
    
                    

                
                    At this summer's HOPE conference, Joshua Aaron spoke about ICEBlock, his iPhone app that allows users to anonymously report ICE sightings within a 5 mile radius, and to get notifications when others report ICE sightings near them. You can see the full talk, and the lively/infuriating Q&A, here, starting at 6:12:10.Thanks to repression from the highest levels of the Trump administration, his app has gone viral and garnered over a million downloads from the App Store. Karoline Leavitt called it "an incitement of further violence against our ICE officers." Tom Homan said, "DOJ needs to look at this and see if they're crossing that line." Kristi Noem called the app "obstruction of justice." Pam Bondi announced "we are looking at it, we are looking at him, and he better watch out, because that's not a protected speech." (Notifying people about ICE sightings is protected speech, no matter what the fascist Attorney General says.) Joshua and his family have been receiving threats.But unfortunately, despite the app’s goal of protecting people from ICE, its viral success, and the state repression against it, ICEBlock has serious issues:Most importantly, it wasn’t developed with input from people who actually defend immigrants from deportation. As a result, it doesn’t provide people with what they need to stay safe.Because ICE sightings in the app aren’t verified in any way, it's likely that most reports in the app aren't actually ICE, even if they’re posted by people who mean well – as I describe below, the vast majority of ICE reports are false positives.And judging by the App Store reviews, it’s clear that not everyone means well. One review says: “This is a great app for safety information. Unfortunately MAGA is now posting false information on there and making racist comments in the comment section.”Joshua makes strong claims about the security and privacy of his app without backing any of them up with technical details. Many of his claims are false. He also chose to target only iOS, and not Android, because of a misunderstanding about how Android push notifications work. And even worse, during the Q&A, he made it clear that he didn't understand terms like “warrant canary,” "reverse engineering," or “security through obscurity,” which doesn't inspire confidence.Privacy promises without the evidenceWhen I first heard about ICEBlock, I liked the idea, but I – and others in various group chats I'm part of – were skeptical.Joshua promises that ICE reports are "completely anonymous," that the app doesn't store any personal data, and that it's "impossible to trace reports back to individual users." These are bold claims that he hasn't backed up with evidence. Unlike reputable privacy tools, ICEBlock isn't open source (in the talk, he explicitly rejected the idea of open sourcing it or allowing the security community to help him improve it), and Joshua hasn't published a threat model or technical documentation explaining how his app keeps these promises.My friend Cooper Quintin, a security researcher at EFF, was also skeptical of ICEBlock, and so he reverse engineered it, and spoke to 404 Media about his findings. He largely confirmed Joshua's claims:The TL;DR is that I didn't find anything suspicious, the app doesn't talk to any third parties, and it doesn't send your location to the developer. Neither your phone ID or iCloud account are associated with the requests the app sends to the apple cloud servers to run. (2/11)— Exploit Code Not People (@cooperq.com) 2025-07-15T18:52:15.697ZThis is great, and it's the reason that (despite his hostility towards transparency) I really do think that Joshua means well.Even if we can trust that Joshua isn't collecting data himself, it's difficult to discern what Apple would be able to hand over if it got subpoenaed for data related to his app. The website simply says it's "completely anonymous," without any caveats.But ignoring the lack of transparency, there's an even larger problem.ICEBlock spreads unverified information, making it useless for defending immigrantsLocal immigrant defense groups around the country have been defending people from deportation for the last decade or more. In a training with NorCal Resist, I learned that when people post (and repost) unverified reports of ICE sightings on social media, it does more harm than good.Millions of people are living in a state of fear. From my experience working with NorCal Resist, most ICE sightings that people hear about aren't real, even when the person reporting it believes that they are. It's common for someone to see a bunch of dudes in uniforms, or sketchy looking vans, and assume it's ICE, when it's actually something else. If I had to guess, I'd say about 98% of reports are false positives.False reports encourage panic, which doesn't help anyone. Meanwhile, what people actually need are legal observers – people to document the behavior of federal agents, and provide this evidence to their lawyers. They also need help with connecting families of kidnapped people with information and lawyers, and they need communities coming out to defend their neighbors.When I asked Joshua about this during the Q&A of his talk, he didn't answer the question. Here's my question and his non-answers:
            
                
                
                
                        
                        
                        0:00
                            /4:46
                        
                        
            
            Joshua's non-answer to my question about false positives and user research
        Specifically, I asked:With my local group, they put a whole lot of energy into verifying every single report before spreading information about it. My question is, how do you know that ICEBlock isn't just full of false positives? And have you done any user research, or worked with local immigration groups to figure out how reliable this is, how much it's actually helping people versus causing panic?In an attempt to answer the question about user research, Joshua said, "No, we do not do any user data or metrics." He misunderstood the question, apparently thinking that I meant collecting data from users rather than talking to humans who know more than he does and incorporating their feedback into the design of the app.He then explained what ICEBlock does to prevent malicious people from making false reports — including falsely claiming that it's "not possible" to make tons of simultaneous fake reports (more on this below).ICEBlock doesn't verify anything, and instead only spreads unverified rumors. To be fair, verification is a very hard problem. In my local group, we have announcement-only Signal groups full of volunteers who physically verify every single ICE sighting that's reported to our rapid response hotline. The vast majority of reports are false positives. There might be several reports a day, but actual ICE or CBP activity is much more rare. I've personally gone to check out maybe 10 to 15 different ICE sightings, only one of which turned out to be actual immigration enforcement (though by the time I got to the location, ICE had already left the area). None of these false reports were malicious: they were simply scared people who saw a bunch of vehicles and people in uniforms and reported an ICE sighting, when it was actually something else.Another person in the audience asked a similar question:I'm wondering, I think someone asked earlier, if in the design of ICEBlock, or even now, are you currently working with immigrant communities to figure out what resources they need?
            
                
                
                
                        
                        
                        0:00
                            /3:18
                        
                        
            
            Another question about if Joshua has engaged with community groups
        His answer was that ICEBlock has been translated into many different languages. And that the community organizers he's spoken with told him that ICEBlock doesn't meet their needs. So, he decided to not worry about their feedback and do his own thing instead.If you want to support people who are actually protecting immigrants from deportation, please donate to NorCal Resist or your local community rapid response networks.What's GPS spoofing?When Joshua explained the safeguards against abuse in the app, he claimed that it's "not possible" to make 100 fake reports in a single morning, in part because you can only make reports within a 5 mile radius of your location. But apparently, Joshua has never heard of GPS spoofing.Even though I'm sitting at my house in California right now, here's a screenshot I just took of the ICEBlock app from the Eiffel Tower in Paris. While I won't go into details of the masterful hacking skills that this took, I'll give you a hint: it's the same technique kids use to cheat at Pokemon Go.Screenshot of ICEBlock app, with GPS location spoofed to make it think I'm in ParisMake ICEBlock open source? "Absolutely not."Someone asked whether Joshua would be interested in collaborating with the hacker community on ICEBlock, so they could provide him with advice and help him with feature development.Joshua rejected the idea, saying that he believes that he'd need to completely trust anyone he collaborated with. "Believe me when I say I would love help. I'm supporting over a million users myself. There's not some giant company behind this," he said. "But it's really really hard for me to put my trust in somebody, and share the source code, and share the access to this."
            
                
                
                
                        
                        
                        0:00
                            /1:49
                        
                        
            
            Joshua explaining that he's building ICEBlock all on his own because he can't trust outside contributors
        This is, of course, not how secure software development works. The most widely trusted security and privacy tools that exist, like Signal and Tor, are open source, and they accept peer review and code contributions from the public.The thing that makes this perfectly reasonable and safe is code review. If Joshua published the ICEBlock source code, experts in the hacker community could add features or fix bugs for him, and make pull requests with their changes. He could then carefully review the changes before merging them into his codebase. He could reject whatever changes he wants. You don't actually need to trust – or even know the identity of – hackers who help you develop software. This is a solved a problem, and Joshua seems utterly unaware of it.My friend Jen Helsby, the CTO of Freedom of the Press Foundation and a SecureDrop developer, explicitly asked if he would be open to making ICEBlock open source. Here's the clip:
            
                
                
                
                        
                        
                        0:00
                            /1:40
                        
                        
            
            Joshua will not release ICEBlock as open source because he doesn't believe in reverse engineering and thinks keeping the implementation details of his app obscure makes it more secure
        Jen asked:There's a lot of secure software, that probably people in this room work on, that is developed in the open, and that is used primarily by at-risk users, including things like Tor, Signal, SecureDrop. That's great, because it makes it easy for folks to contribute. Maybe you don't want that, I understand that can be hard. But it also makes it easier for people to audit and gain assurance that the app is doing what you claim without having to have, you know, EFF reverse engineer it. Would you be open to making the app open source?His answer: "Absolutely not."Why? "I don't want anybody from the government to have their hooks in how I'm doing what I'm doing. Once you go open source, everybody has access to it. So I'm just going to keep the codebase private at this time."He also claimed that the government can't learn everything about how an app works by reverse engineering it, which isn't true.I agree with Jen. His answers are very concerning.What's security through obscurity?Another person asked specifically how concealing the details of how the app works from the government is distinguishable from security through obscurity, Joshua agreed that security through obscurity is terrible... and denied that he's doing it?
            
                
                
                
                        
                        
                        0:00
                            /0:37
                        
                        
            
            Joshua falsely claiming he doesn't do security through obscurity
        In case you're not aware of this term, the first sentence of the Wikipedia article on security through obscurity has a concise definition:In security engineering, security through obscurity is the practice of concealing the details or mechanisms of a system to enhance its security.NIST's General Guide to Server Security lists "Open Design" as a core security principle, saying that, "System security should not depend on the secrecy of the implementation or its components."Minutes before this, Joshua had just finishing explaining that he definitely won't open source his app because, "I don't want anybody from the government to have their hooks in how I'm doing what I'm doing."He's implying that his code includes some "secret sauce" that, if it were made public, would make the app less secure, so he can't risk letting anyone discover how it works. This is the definition of security through obscurity.My server is "HIGHLY secure," he says to a room full of hackersThroughout the Q&A, Joshua kept referencing the security of his server. At one point, he even said that he built it himself and it's "HIGHLY secure." He also assured the audience, "Trust me when I tell you, I think about EVERYTHING to the Nth degree."It took about 20 minutes of digging around to discover that the server that hosts the iceblock.app website is running on Linode and also hosts the websites of several of Joshua's other projects, going back decades. This includes a website for his IT consulting business, his band, etc. If any one of those old websites gets hacked, it's possible that the hacker could more easily access ICEBlock data that's stored on the same server.Without providing more details, I also discovered that his server is running outdated software with known vulnerabilities.What's a warrant canary?At one point, a lawyer asked some excellent legal questions:I'm curious if ICEBlock either currently or has intentions to implement something like a warrant canary or other method. And more generally, whether you have received anything like search warrants, or All Writs Act requests, or anything else. Things like more intrusive means of obtaining information from ICEBlock. Things like requests for live interception, which would be authorized under a search warrant. And if you have a response plan in place already for those.
            
                
                
                
                        
                        
                        0:00
                            /3:56
                        
                        
            
            A lawyer asking Joshua about warrant canaries and data requests
        If you're not familiar with warrant canaries, these are basically public notices that say, "I've never been forced to give up user data." If the notice ever gets taken down, the public can infer that the service was in fact forced to hand over user data.Joshua said, "No on the warrant canary, because it would probably require some sort of user data to do that." He seemed to think that a warrant canary would be a new feature in the app (that's uh, not what a warrant canary is), and he completely ignored the legal questions, instead opting to talk about why it's important to keep the app design simple.When the lawyer asked again what he would do if the government tried to compel him to spy on his users, Joshua simply said, "I'd just tell them to go fuck themselves." It's a good answer, but it's also naive. Government requests can include gag orders, preventing him from telling anyone that he has received them, and punishment for disobeying them can include threats of jail time. It's good to plan ahead. Luckily, he has EFF and ACLU offering him legal support, in case he ever actually has to face something like this.It's not too lateDespite everything, I do think that Joshua's heart is in the right place and that he genuinely wants to help people. He's sticking his neck out to fight fascism, and the far right is harassing him and his family for it.This is why I, and several other hackers who attended his HOPE talk, spent so much time and energy (both during his talk and in the days after it) trying to encourage him to open things up so that ICEBlock, and its million-strong userbase, might yet become a helpful tool in defending immigrants against Trump's fascist plans. He has rejected our offers.It's possible for him to turn things around, but sadly, I'm not holding my breath.
                    
                

                    

                
            
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Run Erlang/Elixir on Microcontrollers and Embedded Linux]]></title>
            <link>https://www.grisp.org/software</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45100499</guid>
        </item>
        <item>
            <title><![CDATA[Kapa.ai (YC S23) is hiring research and software engineers]]></title>
            <link>https://www.ycombinator.com/companies/kapa-ai/jobs</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45099939</guid>
            <description><![CDATA[Jobs at kapa.ai]]></description>
            <content:encoded><![CDATA[The fastest way to build AI assistants on technical contentJobs at kapa.aiGB / DE / FR / NO / DK / SE / FI / PT / ES / BE / NL / IT / CH / AT / CZ / PL / EE / LV / LT / SK / HU / SI / HR / RU / UA / Remote (GB; DE; FR; NO; DK; SE; FI; PT; ES; BE; NL; IT; CH; AT; CZ; PL; EE; LV; LT; SK; HU; SI; HR; RU; UA)$100K - $150K0.10% - 0.30%3+ yearsGB / EG / RU / UA / TR / FR / IT / ES / PL / RO / KZ / NL / BE / SE / CZ / GR / PT / HU / AT / CH / BG / DK / FI / NO / SK / LT / EE / DE / Remote (GB; EG; RU; UA; TR; FR; IT; ES; PL; RO; KZ; NL; BE; SE; CZ; GR; PT; HU; AT; CH; BG; DK; FI; NO; SK; LT; EE; DE)$100K - $150K0.10% - 0.30%3+ yearsWhy you should join kapa.aiWe make it easy for technical companies to build AI assistants. Companies like Docker, Grafana and Mixpanel deploy kapa in the following ways:

As chat interface on their public documentation to answer developer questions.
As first line of defense on their support forms to reduce tickets.
As internal assistant for their GTM teams to navigate their own complex product.

We leverage companies existing technical knowledge sources including documentation, tutorials, forum posts, Slack channels, GitHub issues and many more to generate AI assistants that can handle complicated technical questions. More than 200 companies use kapa and we have answered more than 10 million questions to date.
Founded:2023Batch:S23Team Size:19Status:ActiveFoundersFinn BauerFounderEmil SoerensenFounder]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Next.js Is Infuriating]]></title>
            <link>https://blog.meca.sh/3lxoty3shjc2z</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45099922</guid>
            <description><![CDATA[Hey, it's finally happened. I've decided to write a blog post. And if you're reading this, I've also finished one. I have wanted to do this for a long time, but could never find the motivation to start. But you know what they say: anger is the best motivator. They do say that, right?]]></description>
            <content:encoded><![CDATA[Hey, it's finally happened. I've decided to write a blog post. And if you're reading this, I've also finished one. I have wanted to do this for a long time, but could never find the motivation to start. But you know what they say: anger is the best motivator. They do say that, right?Some context that's in the backgroundWe're going on a journey, you and I. But first, we need to set the scene. Imagine we're working for $COMPANY and one of our Next.js services did an oopsie. This being Next.js, we of course have no idea what actually happened since the default logging is only enabled during development.Our quest is to go in and setup some production ready logging. It's not going to be easy, but then again, nothing ever is.Middleware? Middle of nowhere!The first step of our journey is the middleware. The documentation even states this:Middleware executes before routes are rendered. It's particularly useful for implementing custom server-side logic like authentication, logging, or handling redirects.Alright, looks simple enough. Time to pick a logging library. I went with pino since we have used it before. Anything is an upgrade over console.log anyways. We'll get this done before lunch.Let's set up a basic middleware:// middleware.ts
import { NextResponse, NextRequest } from "next/server";

export async function middleware(request: NextRequest) {
  return new NextResponse.next({
    request: request,
    headers: request.headers,
    // status: 200,
    // statusText: 'OK'
  });
}

export const config = {
  matcher: "/:path*",
};I think we already have a problem here. You can pass a grand total of 4 parameters from your middleware. The only thing that actually affects the invoked route is the headers. Let's not skip over the fact that you can't have multiple middlewares or chain them either. How do you fuck this up so bad? We've had middlewares since at least the early 2010s when Express came out.Anyways, we're smart and modern Node.js has some pretty nifty tools. Let's reach for AsyncLocalStorage.// app/logger.ts
import { AsyncLocalStorage } from "async_hooks";
import { Logger, pino } from "pino";

const loggerInstance = pino({
  // Whatever config we need
  level: process.env.LOG_LEVEL ?? "trace",
});

export const LoggerStorage = new AsyncLocalStorage<Logger>();

export function logger(): Logger | null {
  return LoggerStorage.getStore() ?? null;
}

export function requestLogger(): Logger {
  return loggerInstance.child({ requestId: crypto.randomUUID() });
}

// middleware.ts
export async function middleware(request: NextRequest) {
  LoggerStorage.enterWith(requestLogger());
  logger()?.debug({ url: request.url }, "Started processing request!");

  return NextResponse.next();
}Whew, hard work done. Let's test it out. Visit localhost:3000 and we see this:{ requestId: 'ec7718fa-b1a2-473e-b2e2-8f51188efa8f' } { url: 'http://localhost:3000/' } 'Started processing request!'
 GET / 200 in 71ms
{ requestId: '09b526b1-68f4-4e90-971f-b0bc52ad167c' } { url: 'http://localhost:3000/next.svg' } 'Started processing request!'
{ requestId: '481dd2ff-e900-4985-ae15-0b0a1eb5923f' } { url: 'http://localhost:3000/vercel.svg' } 'Started processing request!'
{ requestId: 'e7b29301-171c-4c91-af25-771471502ee4' } { url: 'http://localhost:3000/file.svg' } 'Started processing request!'
{ requestId: '13766de3-dd00-42ce-808a-ac072dcfd4c6' } { url: 'http://localhost:3000/window.svg' } 'Started processing request!'
{ requestId: '317e054c-1a9a-4dd8-ba21-4c0201fbeada' } { url: 'http://localhost:3000/globe.svg' } 'Started processing request!'I don't know if you've ever used pino before, but this is wrong. Can you figure out why?Unlike Next.js I won't keep you waiting in limbo. This is the browser output. Why? Well, it's because the default Next.js middleware runtime is edge. We can of course switch to the nodejs runtime which should work. Except, of course, it might not.I've tried it on a fresh Next.js project and it does work. But it didn't when I was trying it out on our actual project. I swear I'm not crazy. Anyways, this isn't the main issue. We're slowly getting there.Paging the local mental asylumLogging in the middleware is cool and all, but it's not where the bulk of the magic happens. For that, we need to log in pages and layouts. Let's try it out.// app/page.tsx
export default function Home() {
  logger()?.info("Logging from the page!");

  return <div>Real simple website!</div>
}Refresh the page and we get this:✓ Compiled / in 16ms
 GET / 200 in 142msThat's it? That's it. Nothing. Nada. Zilch.For posterity's sake, this is what it's supposed to look like:✓ Compiled / in 2.2s
[11:38:59.259] INFO (12599): Logging from the page!
    requestId: "2ddef9cf-6fee-4d1d-8b1e-6bb16a3e636b"
 GET / 200 in 2520msOk,this is getting a bit long, so I'll get to the point. The logger function returns null. Why? I'm not entirely sure, but it seems like rendering is not executed in the same async context as the middleware.What's the solution then? You're not going to believe this. Remember how the only value you can pass from the middleware is headers? Yeah. That's what we need to use.The following is for people with strong stomachs:// app/log/serverLogger.ts
import { pino } from "pino";

export const loggerInstance = pino({
  // Whatever config we need
  level: process.env.LOG_LEVEL ?? "info",
});

// app/log/middleware.ts
// Yes, we need to split up the loggers ...
// Mostly the same as before
import { loggerInstance } from "./serverLogger";

export function requestLogger(requestId: string): Logger {
  return loggerInstance.child({ requestId });
}

// app/log/server.ts
import { headers } from "next/headers";
import { loggerInstance } from "./serverLogger";
import { Logger } from "pino";
import { NextRequest } from "next/server";

const REQUEST_ID_HEADER = "dominik-request-id";

export function requestHeaders(
  request: NextRequest,
  requestId: string,
): Headers {
  const head = new Headers(request.headers);
  head.set(REQUEST_ID_HEADER, requestId);
  return head;
}

// Yeah, this has to be async ...
export async function logger(): Promise<Logger> {
  const hdrs = await headers();
  const requestId = hdrs.get(REQUEST_ID_HEADER);

  return loggerInstance.child({ requestId });
}

// middleware.ts
import { logger, LoggerStorage, requestLogger } from "./app/log/middleware";
import { requestHeaders } from "./app/log/server";

export async function middleware(request: NextRequest) {
  const requestId = crypto.randomUUID();
  LoggerStorage.enterWith(requestLogger(requestId));

  logger()?.debug({ url: request.url }, "Started processing request!");

  return NextResponse.next({ headers: requestHeaders(request, requestId) });
}

// app/page.tsx
export default async function Home() {
  (await logger())?.info("Logging from the page!");

  // ...
}Isn't it beautiful? I especially appreciate how it's now possible to import the middleware logging code from the server. Which of course won't work. Or import the server logging code from the middleware. Which also won't work. Better not mess up. Also, we haven't even touched upon logging in client components, which despite the name also run on the server. Yeah, that's a third split.Congratulations, you're being coddled. Please do not resist.Listen. I wanted to apologize, because I've led you into this trap. You see, I have already fallen into it several times before. A middleware system can be pretty useful when designed correctly and I wanted you to see what it looks like when it's not. The reason for writing this blog post actually started here.I think every one of us has reached a point in their lives where they've had enough. For me, it was right here. Fuck it, let's use a custom server.A custom Next.js server allows you to programmatically start a server for custom patterns. The majority of the time, you will not need this approach. However, it's available if you need to eject.Let's take a look at the example from the documentation:import { createServer } from 'http'
import { parse } from 'url'
import next from 'next'
 
const port = parseInt(process.env.PORT || '3000', 10)
const dev = process.env.NODE_ENV !== 'production'
const app = next({ dev })
const handle = app.getRequestHandler()
 
app.prepare().then(() => {
  createServer((req, res) => {
    const parsedUrl = parse(req.url!, true)
    handle(req, res, parsedUrl)
  }).listen(port)
 
  console.log(
    `> Server listening at http://localhost:${port} as ${
      dev ? 'development' : process.env.NODE_ENV
    }`
  )
})Note that once again, handle doesn't really take any parameters. Only the request URL and the raw request and response.Anyways, we still have AsyncLocalStorage so this doesn't concern us too much. Let's modify the example a bit.// app/logger.ts
// Reverted back to our AsyncLocalStorage variaton
import { pino, Logger } from "pino";
import { AsyncLocalStorage } from "async_hooks";

const loggerInstance = pino({
  // Whatever config we need
  level: process.env.LOG_LEVEL ?? "info",
});

export const LoggerStorage = new AsyncLocalStorage<Logger>();

export function logger(): Logger | null {
  return LoggerStorage.getStore() ?? null;
}

export function requestLogger(): Logger {
  return loggerInstance.child({ requestId: crypto.randomUUID() });
}

// server.ts
import { logger, LoggerStorage, requestLogger } from "./app/logger";

app.prepare().then(() => {
  createServer(async (req, res) => {
    // This is new
    LoggerStorage.enterWith(requestLogger());
    logger()?.info({}, "Logging from server!");

    const parsedUrl = parse(req.url!, true);
    await handle(req, res, parsedUrl);
  }).listen(port);
});

// middleware.ts
import { logger } from "./app/logger";

export async function middleware(request: NextRequest) {
  logger()?.info({}, "Logging from middleware!");
  return NextResponse.next();
}

// app/page.tsx
import { logger } from "./logger";

export default async function Home() {
  logger()?.info("Logging from the page!");
  
  // ...
}Ok, let's test it out. Refresh the browser and ...> Server listening at http://localhost:3000 as development
[12:29:52.183] INFO (19938): Logging from server!
    requestId: "2ffab9a2-7e15-4188-8959-a7822592108f"
 ✓ Compiled /middleware in 388ms (151 modules)
 ○ Compiling / ...
 ✓ Compiled / in 676ms (769 modules)That's it. Are you fucking kidding me right now? What the fuck?Now, you might be thinking that this is just not how AsyncLocalStorage works. And you might be right. But I would like to point out that headers() and cookies() use AsyncLocalStorage. This is a power that the Next.js devs have that we don't.As far as I can tell there are only two ways to pass information from a middleware to a page.HeadersNextResponse.redirect / NextResponse.rewrite to a route with extra params (eg. /[requestId]/page.tsx)As you might have noticed, neither of these are very pleasant to use in this case.You are being coddled. The Next.js devs have a vision and it's either their way or the highway. Note that if it was just the middleware, I wouldn't be sitting here, wasting away my weekend, ranting about a React framework. Believe it or not, I've got better things to do. It's constant pain you encounter daily when working with Next.js.Vercel can do betterWhat's infuriating about this example is that Vercel can very much do better. I don't want to sing too many praises at Svelte(Kit) because I have some misgivings about its recent direction, but it's so much better than Next.js. Let's look at their middleware docs:handle - This function runs every time the SvelteKit server receives a request [...] This allows you to modify response headers or bodies, or bypass SvelteKit entirely (for implementing routes programmatically, for example).Looking good so far.locals - To add custom data to the request, which is passed to handlers in +server.js and server load functions, populate the event.locals object, as shown below.I'm crying tears of joy right now. You can also stuff real objects/classes in there. Like a logger for instance.You can define multiple handle functions and execute them with sequence.This is what real engineering looks like. SvelteKit is a Vercel product. How is the flagship offering worse than what is essentially a side project. What the hell?Scientists discover a new super massive black hole at https://github.com/vercel/next.js/issuesI don't have anything else to add, but while I'm here I feel like I have to talk about the GitHub issue tracker. This is perhaps the crown jewel of the dumpster fire that is Next.js. It's a place where hopes and issues come to die. The mean response time for a bug report is never. I've made it a sport to search the issue tracker/discussion for problems I'm currently facing and bet on how many years it takes to even get a response from a Next.js dev.You think I'm joking? There are hundreds of issues with as many 👍 emojis with no official response for years. And when you finally get a response, it's to tell you that what you're doing is wrong and a solution to your real problems is on the way. Then they proceed to keep the "solution" in canary for years on end.I personally reported two issues a year ago. Keep in mind that to have a valid bug report, you need a reproduction.So, what do you get for taking the time to make a minimal reproduction? That's right. Complete silence.I would have reported about a dozen other issues I have encountered, but after this experience I gave up.Honestly, I don't even know if the issues are still valid. Have we learned anything?I don't know. For me, personally, I don't want to use Next.js anymore. You might think that this is just a singular issue and I'm overreacting. But there's bugs and edge cases around every corner. How did they manage to make TypeScript compile slower than Rust? Why make a distinction between code running on client and server and then not give me any tools to take advantage of that? Why? Why? Why?I don't think I quite have enough pull to move us out of Next.js land. But, I think I will voice my opinion if we end up writing another app. We'll see if the grass is any greener on the other side.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Collecting All Causal Knowledge]]></title>
            <link>https://causenet.org/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45099418</guid>
            <description><![CDATA[Collecting All Causal Knowledge]]></description>
            <content:encoded><![CDATA[
            Collecting All Causal Knowledge
            
                    CauseNet aims at creating a causal knowledge base that comprises all human causal knowledge and to separate it from mere causal beliefs, with the goal of enabling large-scale research into causal inference.
                
        

    

    Causal knowledge is seen as one of the key ingredients to advance artificial intelligence. Yet, few knowledge bases comprise causal knowledge to date, possibly due to significant efforts required for validation. Notwithstanding this challenge, we compile CauseNet, a large-scale knowledge base of claimed causal relations between causal concepts. By extraction from different semi- and unstructured web sources, we collect more than 11 million causal relations with an estimated extraction precision of 83\% and construct the first large-scale and open-domain causality graph. We analyze the graph to gain insights about causal beliefs expressed on the web and we demonstrate its benefits in basic causal question answering. Future work may use the graph for causal reasoning, computational argumentation, multi-hop question answering, and more.

    Download

    We provide three versions of our causality graph CauseNet:
    
      CauseNet-Full: The complete dataset
      CauseNet-Precision: A subset of CauseNet-Full with higher precision
      CauseNet-Sample: A small sample dataset for first explorations and experiments without provenance data
    

    Statistics

    
      
        
           
          Relations
          Concepts
          File Size
        
      
      
        
          CauseNet-Full
          11,609,890
          12,186,195
          1.8GB
        
        
          CauseNet-Precision
          199,806
          80,223
          135MB
        
        
          CauseNet-Sample
          264
          524
          54KB
        
      
    

    Data Model

    The core of CauseNet consists of causal concepts which are connected by causal relations. Each causal relation has comprehensive provenance data on where and how it was extracted.

    

    Examples of Causal Relations

    Causal relations are represented as shown in the following example. Provenance data is omitted.

    {
    "causal_relation": {
        "cause": {
            "concept": "disease"
        },
        "effect": {
            "concept": "death"
        }
    }
}


    For CauseNet-Full and CauseNet-Precision, we include comprehensive provenance data. In the following, we give one example per source.

    For relations extracted from natural language sentences we provide:
    
      surface: the surface form of the sentence, i.e., the original string
      path_pattern: the linguistic path pattern used for extraction
    

    ClueWeb12 Sentences

    
      clueweb12_page_id: page id as provided in the ClueWeb12 corpus
      clueweb12_page_reference: page reference as provided in the ClueWeb12 corpus
      clueweb12_page_timestamp: page access data as stated in the ClueWeb12 corpus
    

    {
    "causal_relation":{
        "cause":{
            "concept":"smoking"
        },
        "effect":{
            "concept":"disability"
        }
    },
    "sources":[
        {
            "type":"clueweb12_sentence",
            "payload":{
                "clueweb12_page_id":"urn:uuid:4cbae00e-8c7f-44b1-9f02-d797f53d448a",
                "clueweb12_page_reference":"http://atlas.nrcan.gc.ca/site/english/maps/health/healthbehaviors/smoking",
                "clueweb12_page_timestamp":"2012-02-23T21:10:45Z",
                "sentence": "In Canada, smoking is the most important cause of preventable illness, disability and premature death.",
                "path_pattern":"[[cause]]/N\t-nsubj\tcause/NN\t+nmod:of\t[[effect]]/N"
            }
        }
    ]
}


    Wikipedia Sentences

    
      wikipedia_page_id: the Wikipedia page id
      wikipedia_page_title: the Wikipedia page title
      wikipedia_revision_id: the Wikipedia revision id of the last edit
      wikipedia_revision_timestamp: the timestamp of the Wikipedia revision id of the last edit
      sentence_section_heading: the section heading where the sentence comes from
      sentence_section_level: the level where the section heading comes from
    

    {
    "causal_relation":{
        "cause":{
            "concept":"human_activity"
        },
        "effect":{
            "concept":"climate_change"
        }
    },
    "sources":[
        {
            "type":"wikipedia_sentence",
            "payload":{
                "wikipedia_page_id":"13109",
                "wikipedia_page_title":"Global warming controversy",
                "wikipedia_revision_id":"860220175",
                "wikipedia_revision_timestamp":"2018-09-19T04:52:18Z",
                "sentence_section_heading":"Global warming controversy",
                "sentence_section_level":"1",
                "sentence": "The controversy is, by now, political rather than scientific: there is a scientific consensus that climate change is happening and is caused by human activity.",
                "path_pattern":"[[cause]]/N\t-nmod:agent\tcaused/VBN\t+nsubjpass\t[[effect]]/N"
            }
        }
    ]
}


    Wikipedia Lists

    
      list_toc_parent_title: The heading of the parent section the list appears in
      list_toc_section_heading: The heading of the section the list appears in
      list_toc_section_level: The nesting level of the section within the table of content (toc)
    

    {
    "causal_relation":{
        "cause":{
            "concept":"separation_from_parents"
        },
        "effect":{
            "concept":"stress_in_early_childhood"
        }
    },
    "sources":[
        {
            "type":"wikipedia_list",
            "payload":{
                "wikipedia_page_id":"33096801",
                "wikipedia_page_title":"Stress in early childhood",
                "wikipedia_revision_id":"859225864",
                "wikipedia_revision_timestamp":"2018-09-12T16:22:05Z",
                "list_toc_parent_title":"Stress in early childhood",
                "list_toc_section_heading":"Causes",
                "list_toc_section_level":"2"
            }
        }
    ]
}


    Wikipedia Infoboxes

    
      infobox_template: The Wikipedia template of the infobox
      infobox_title: The title of the Wikipedia infobox
      infobox_argument: The argument of the infobox (the key of the key-value pair)
    

    {
    "causal_relation":{
        "cause":{
            "concept":"alcohol"
        },
        "effect":{
            "concept":"cirrhosis"
        }
    },
    "sources":[
        {
            "type":"wikipedia_infobox",
            "payload":{
                "wikipedia_page_id":"21365918",
                "wikipedia_page_title":"Cirrhosis",
                "wikipedia_revision_id":"861860835",
                "wikipedia_revision_timestamp":"2018-09-30T15:40:21Z",
                "infobox_template":"Infobox medical condition (new)",
                "infobox_title":"Cirrhosis",
                "infobox_argument":"causes"
            }
        }
    ]
}


    Loading CauseNet into Neo4j

    We provide sample code to load CauseNet into the graph database Neo4j.

    The following figure shows an excerpt of CauseNet within Neo4j (showing a coronavirus causing the disease SARS):

    

    Concept Spotting Datasets

    For the construction of CauseNet, we employ a causal concept spotter as a causal concept can be composed of multiple words (e.g., “global warming”, “human activity”, or “lack of exercise”). We determine the exact start and end of a causal
concept in a sentence with a sequence tagger. Our training and evaluation data is available as part of our concept spotting datasets: one for Wikipedia infoboxes, Wikipedia lists, and ClueWeb sentences. We split each dataset into 80% training, 10% development and 10% test set

    Paper

    CauseNet forms the basis for our CIKM 2020 paper CauseNet: Towards a Causality Graph Extracted from the Web. Please make sure to refer to it as follows:

    @inproceedings{heindorf2020causenet,
  author    = {Stefan Heindorf and
               Yan Scholten and
               Henning Wachsmuth and
               Axel-Cyrille Ngonga Ngomo and
               Martin Potthast},
  title     = {CauseNet: Towards a Causality Graph Extracted from the Web},
  booktitle = {{CIKM}},
  publisher = {{ACM}},
  year      = {2020}
}


    

    For questions and feedback please contact:

    Stefan Heindorf, Paderborn University
Yan Scholten, Technical University of Munich
Henning Wachsmuth, Paderborn University
Axel-Cyrille Ngonga Ngomo, Paderborn University
Martin Potthast, Leipzig University

    Licenses

    The code is licensed under a MIT license. The data is licensed under a Creative Commons Attribution 4.0 International license.
  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Keyboards from my collection (2023)]]></title>
            <link>https://aresluna.org/50-keyboards-from-my-collection/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45099192</guid>
            <description><![CDATA[The most interesting keyboards I ever acquired]]></description>
            <content:encoded><![CDATA[
    
      
        Marcin Wichary
      
      
        12 February 2023 / 50 posts / 60 photos
      
    
    
    
    
      This is an archive of a Mastodon thread from 2023. You can still read the thread (and all the replies) at its original location, however the photo quality is much better on this page.
    
    
    
    
    



To celebrate the Kickstarter for Shift Happens going well, I thought I would show you 50 keyboards from my collection of really strange/esoteric/meaningful keyboards that I gathered over the years. (It might be the world’s strangest keyboard collection!)




This is technically a bit of a spoiler for the book, but a) a lot of them are not in the book, and b) the book comes out in half a year, and we’ll all forget by then! Let’s start!Shift Happens on Kickstarter


1.I have a SafeType, thanks to a friend who noticed one about to be thrown away. This is among the most notable and interesting “ergonomic” keyboards, complete with mirrors that help you orient yourself when you’re starting out.







2.The Comfort System keyboard is another “ergonomic“ device that is honestly pretty frightening to look at (explaining the challenge of making keyboards like these). You can reposition and reorient each of the three parts independently.







3.I love these DataDesk Little Fingers keyboards with smaller keys because you can see exactly when iMac was introduced and how the company tried to “redesign” the keyboard to fit the new style.





4.This is another Mac “alternate universe“ keyboard - an Adesso ergonomic keyboard that feels like “what if Apple Adjustable still existed when iMac came around”?







5.This strange “medical” keyboard is more mechanical than you’d expect! I wrote more about it here: A tale of three skeuomorphs. Cleaning required when flashing!







6.Once you’re done with your shift (no pun intended) at the hospital, how about some Pizza? This is i-Opener, one of the many shortlived internet appliances, this one with a gimmick that keeps on gimmicking.







7.Speaking of spacebar-adjacent gimmicks, I am mildly obsessed with how beautiful is this first NeXT keyboard from 1987, with a bunch of cool subtle things including a Command *bar* underneath the spacebar. As a matter of fact, I just finished writing an essay on it today!







8.This is Olivetti Praxis 48: perhaps one of the most beautiful among the most beautiful typewriters, and strangely similar in palette to the above NeXT keyboard. You could turn on this (electric) typewriter just by pressing any key. That’s pretty wild.





9.This Olympia Reporter typewriter is not beautiful, but it has a lot of POWER THIS and POWER THAT keys that celebrate its marriage with electricity? Why is X and some other keys red? Those are the ones that auto repeat! 







10.This is another typewriter, so proud of a functioning (erasing!) Backspace that it gives this a treatment I have never seen before or after.









12.This keypad… is so bad.







13.This was meant to be mounted atop Commodore 64 (which I don’t have), an interesting reversal from the early typewriters being nothing more than repurposed music keyboards.







14.These two are taking this idea even further – mount these overlays on regular keyboards to turn them into new kinds of interfaces.





15.There’s also professional gaming. It was cheaper for me to buy QSENN keyboards and replicate what professional StarCraft gamers were doing in the 1990s, than to find a good existing photo of one of these keyboards.







16.And speaking of gaming – we’re all used to the thumb style of typing from the first photo that it was fun to discover the short moment where the gaming keyboards looked like the one in the second photo.





17.And a bit earlier, some game consoles tried to reinvent themselves as home computers with keyboard accessories. This is among the strangest of them: a “keyboard” to add BASIC to the Atari 2600.







18.I commissioned this “joystick” from @benjedwards and I am so happy with how it turned out. It’s technically a joystick without a stick, but software turned it into a one-key keyboard. It’s F11, currently mapped to muting/unmuting in Zoom. It’s *incredibly* rewarding to press.





19.Speaking of strange keyboards, this is my “space cadet” keyboard – a mini keyboard that outputs only spaces, and instead of legends, each key *feels* different. Wrote about it more here: Stop me if you’ve seen this one before





20.And here is a keyboard I built and hid in my shoes, made for one very specific reason. Are you interested what it is? Check out the whole story here:  To walk among keyboard magicians







21.This is one of the most rare keyboards I have – the strange abKey Evolution imported through a friend from Singapore – a keyboard that tried to reinvent perhaps one thing too many. Wrote more about it here: The worst keyboard ever made







22. And this one from Commodore is not really that unique, except it has this fun property – it reverses the usual beige colour scheme making the keys inside darker. It’s kinda neat!







23.This is a really cheap Bulgarian keyboard with such a poor build quality it cannot be unseen! I wrote more about it here: The worst keyboard ever made







24.Oh, it gets worse. This calculator keyboard is so cheap it’s not a keyboard at all – just an exposed PCB with a pen to complete the circuit. More about it here: The worst keyboard ever made





25.And this is the opposite, an incredibly well-built IBM Model F banking typewriter with an enclosure made out of zinc. Hefty enough to stop a bank robbery? Perhaps. More here: To save a keyboard, pt. 2







Halfway through! I need a bit of a break. Is this interesting? Should I keep going!?




26.If your bank robbery goes poorly, you probably end up typing on this Swintec, transparent so that no contraband could be hidden inside. More about transparent tech for prisons in this Techmoan video: YouTube







27.This simple braille keyboard – Tellatouch – was gorgeous and important. Type a key on one side, and the right braille letter assembles itself on the other.







28.This is a more modern version of an adjacent idea. Connect this device to a phone line, and you can speak even if you cannot talk. (Also, I just love any time a keyboard lands itself next to a segmented display.)







29.The creators of this Seiko keyboard recognized a watch with a keyboard wouldn’t make sense – so you could dock your watch and type this way. (I don’t have the watch itself. Too expensive!)







30.Just kidding! Here’s a keyboard on another Seiko watch. It’s an index keyboard – you don’t touch the keys directly, just move the cursor left and right like on Apple TV – since the keys are smaller than 1mm.







31.This TI calculator for school use has tiny keys… in between other keys. What a strange thing.





32.This calculator went… a different way.







33.I love hybrid things and in-betweeners. This tiny Panasonic Toughbook asks a question: what if a BlackBerry keyboard, but twice the width?







34.This one, for TermiFlex, is a one-hand operation, inspired by phone keypads. There are three shifts under your long fingers!





35.Speaking of complex shortcuts, look at this Apple keyboard with Avid software keycaps. The icon on Z is my favourite. I don’t even wanna know what this function does.







36.One among many foldable keyboards – this one for Palm devices (RIP).







37.This Sony remote had a built-in keyboard for typing in MiniDisc titles.







38.And *this* Sony keyboard had two numeric keypads going in two different directions! One for typical calculator use, and one inspired by mobile phones to allow to chat as easily for people who got used to chatting that way.







39.Very happy (and also maybe also a little concerned) to report I am in possession of the entire ProHance lineup of the strange pointing device/keyboard hybrids!







40.But it’s amazing how rarely the graphical user interfaces and keyboards intersect. This here – an old AT&T terminal keyboard – is an exception, providing dedicated keys for window management.







41.I had to get this keyboard for a now-obscure Harris word processor, just because LOOK AT THE SHAPE OF THIS ENTER KEY.







42.I have seen so many keyboards, but only this one – from a strange titling device meant to be connected to your TV – treats uppercase and lowercase exactly like all the other shifted and unshifted symbols. (With the exception of keyboards for kids, I assume!)







43.Back in the day, keyboards were so expensive that you often started on a “training” keyboard that came without the machine connected to it. Here’s a training keyboard for a Linotype, which is itself a fascinating machine.







44.Here’s another one for the first popular line of desk calculators that predates a 10-key keypad.







45.(I also have the actual calculator, called a Comptometer. It’s beautiful, really fun to use, and honestly a work of art. A truly impressive machine from the bygone era. I bought it because I was so impressed reading what it can do.)







46.Here’s another practice keyboard, with a record to play to teach you how to type!







47.And here’s the most modern version of a practice keyboard I know of – itself a small computer. After that, the likes of Mavis Beacon took over teaching typing in software.







48.Speaking of the 1980s, keyboards from failed computers often found a second life as Radio Shack components you could reuse in your DIY projects. Here’s one from a home computer called Coleco Adam.







49.While we’re speaking about failed computers, this is One Laptop Per Child’s interesting-looking keyboard. (I think OLPC is considered a failure? I’m not 100% sure. This computer is not in the book, so I haven’t researched that carefully.)







50. And here is Canon Cat, maybe my favourite failed machine of all time. Look at these Leap keys! I’m somewhat in love with this machine.Adult-onset felinophilia






That’s it! I hope you liked this sneak peek of my collection– if you did, consider backing the book since this is the level of quality I’ve been aiming at for the visual side… there are a lot more photos like these, and of course a lot more great stories attached to them. Shift Happens on Kickstarter





    
    

  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[WinBoat: Run Windows apps on Linux with seamless integration]]></title>
            <link>https://github.com/TibixDev/winboat</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45099124</guid>
            <description><![CDATA[Run Windows apps on 🐧 Linux with ✨ seamless integration - TibixDev/winboat]]></description>
            <content:encoded><![CDATA[
  
    
      
        
      
      
        WinBoat
        Windows for Penguins.
        Run Windows apps on 🐧 Linux with ✨ seamless integration
      
    
  

Screenshots

  
  

⚠️ Work in Progress ⚠️
WinBoat is currently in beta, so expect to occasionally run into hiccups and bugs. You should be comfortable with some level of troubleshooting if you decide to try it, however we encourage you to give it a shot anyway.
Features

🎨 Elegant Interface: Sleek and intuitive interface that seamlessly integrates Windows into your Linux desktop environment, making it feel like a native experience
📦 Automated Installs: Simple installation process through our interface - pick your preferences & specs and let us handle the rest
🚀 Run Any App: If it runs on Windows, it can run on WinBoat. Enjoy the full range of Windows applications as native OS-level windows in your Linux environment
🖥️ Full Windows Desktop: Access the complete Windows desktop experience when you need it, or run individual apps seamlessly integrated into your Linux workflow
📁 Filesystem Integration: Your home directory is mounted in Windows, allowing easy file sharing between the two systems without any hassle
✨ And many more: Smartcard passthrough, resource monitoring, and more features being added regularly

Prerequisites
Before running WinBoat, ensure your system meets the following requirements:

RAM: At least 4 GB of RAM
CPU: At least 2 CPU threads
Storage: At least 32 GB free space in /var
Virtualization: KVM enabled in BIOS/UEFI

How to enable virtualization


Docker: Required for containerization

Installation Guide


Docker Compose v2: Required for compatibility with docker-compose.yml files

Installation Guide


Docker User Group: Add your user to the docker group

Setup Instructions


FreeRDP: Required for remote desktop connection (Please make sure you have Version 3.x.x with sound support included)

Installation Guide


Kernel Modules: iptables and iptable_nat modules must be loaded

Module loading instructions



Downloading
You can download the latest Linux builds under the Releases tab. We currently offer two variants:

AppImage: A popular & portable app format which should run fine on most distributions
Unpacked: The raw unpacked files, simply run the executable (linux-unpacked/winboat)

Known Issues About Container Runtimes

Podman is unsupported for now
Docker Desktop is unsupported for now
Distros that emulate Docker through a Podman socket are unsupported
Any rootless containerization solution is currently unsupported

Building WinBoat

For building you need to have NodeJS and Go installed on your system
Clone the repo (git clone https://github.com/TibixDev/WinBoat)
Install the dependencies (npm i)
Build the app and the guest server using npm run build:linux-gs
You can now find the built app under dist with an AppImage and an Unpacked variant

Running WinBoat in development mode

Make sure you meet the prerequisites
Additionally, for development you need to have NodeJS and Go installed on your system
Clone the repo (git clone https://github.com/TibixDev/WinBoat)
Install the dependencies (npm i)
Build the guest server (npm run build-guest-server)
Run the app (npm run dev)

Contributing
Contributions are welcome! Whether it's bug fixes, feature improvements, or documentation updates, we appreciate your help making WinBoat better.
Please note: We maintain a focus on technical contributions only. Pull requests containing political/sexual content, or other sensitive/controversial topics will not be accepted. Let's keep things focused on making great software! 🚀
Feel free to:

Report bugs and issues
Submit feature requests
Contribute code improvements
Help with documentation
Share feedback and suggestions

Check out our issues page to get started, or feel free to open a new issue if you've found something that needs attention.
License
WinBoat is licensed under the MIT license
Inspiration / Alternatives
These past few years some cool projects have surfaced with similar concepts, some of which we've also taken inspirations from.
They're awesome and you should check them out:

WinApps
Cassowary
dockur/windows (🌟 Also used in WinBoat)

Socials & Contact

🌐 Website: winboat.app
🐦 Twitter/X: @winboat_app
🦋 Bluesky: winboat.app
🗨️ Discord: Join our community
📧 Email: staff@winboat.app

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[FreeDroidWarn]]></title>
            <link>https://github.com/woheller69/FreeDroidWarn</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45098722</guid>
            <description><![CDATA[Contribute to woheller69/FreeDroidWarn development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[
      



    
      Skip to content

      
    



  
  
  






      

          

              




  Navigation Menu

  

  
          
            


                
      

      
          

                
                    
  
      
      
          
            GitHub Copilot
          
        Write better code with AI
      

    


                    
  
      
      
          
            GitHub Spark
              
                New
              
          
        Build and deploy intelligent apps
      

    


                    
  
      
      
          
            GitHub Models
              
                New
              
          
        Manage and compare prompts
      

    


                    
  
      
      
          
            GitHub Advanced Security
          
        Find and fix vulnerabilities
      

    


                    
  
      
      
          
            Actions
          
        Automate any workflow
      

    


                    
                
              
          

                
                    
  
      
      
          
            Codespaces
          
        Instant dev environments
      

    


                    
  
      
      
          
            Issues
          
        Plan and track work
      

    


                    
  
      
      
          
            Code Review
          
        Manage code changes
      

    


                    
  
      
      
          
            Discussions
          
        Collaborate outside of code
      

    


                    
  
      
      
          
            Code Search
          
        Find more, search less
      

    


                
              
          

      



                
      

      



                
      

      
                    Explore
                    
  
      Learning Pathways

    


                    
  
      Events & Webinars

    


                    
  
      Ebooks & Whitepapers

    


                    
  
      Customer Stories

    


                    
  
      Partners

    


                    
  
      Executive Insights

    


                
              



                
      

      
              

                
                    
  
      
      
          
            GitHub Sponsors
          
        Fund open source developers
      

    


                
              
              

                
                    
  
      
      
          
            The ReadME Project
          
        GitHub community articles
      

    


                
              
              
          



                
      

      

                
                    
  
      
      
          
            Enterprise platform
          
        AI-powered developer platform
      

    


                
              



                
    Pricing


            
          

        
                



  
  
  
    

  
    
    
      
        Provide feedback
      
        
    
    
  
      
        
      
      


    
    

  
    
    
      
        Saved searches
      
        Use saved searches to filter your results more quickly
    
    
  
      
        
      
      

    
  



            

              
                Sign up
              
    
      Appearance settings

      
    
  

          
      


      
    

  








    


    






  
    
      
  





    






  
  

      
            
    
      

  
                Notifications
    You must be signed in to change notification settings

  

  
              Fork
    1

  

  
        
            
          Star
          87

  



        

        


          

  
    


  

  




          



  
  
  Folders and filesNameNameLast commit messageLast commit dateLatest commitHistory11 Commitsgradle/wrappergradle/wrapperlibrarylibrary.gitignore.gitignoreLICENSELICENSEREADME.mdREADME.mdbuild.gradlebuild.gradlegradle.propertiesgradle.propertiesgradlewgradlewgradlew.batgradlew.batsettings.gradlesettings.gradleREADMEApache-2.0 licenseFreeDroidWarn
Overview
This library shows an alert dialog with a deprecation warning informing that Google will require developer verification for Android apps outside the Play Store from 2026/2027 which the developer is not going to provide.
Google has announced that, starting in 2026/2027, all apps on certified Android devices
will require the developer to submit personal identity details directly to Google.
Since the developers of this app do not agree to this requirement, this app will no longer 
work on certified Android devices after that time.

https://www.androidauthority.com/android-developer-verification-requirements-3590911/
https://developer.android.com/developer-verification
Installation
Add the JitPack repository to your root build.gradle at the end of repositories:
allprojects {
  repositories {
    ...
    maven { url 'https://jitpack.io' }
  }
}
Add the library dependency to your build.gradle file.
dependencies {
    implementation 'com.github.woheller69:FreeDroidWarn:V1.3'
}
Usage
In onCreate of your app just add:
     FreeDroidWarn.showWarningOnUpgrade(this, BuildConfig.VERSION_CODE);


License
This library is licensed under the Apache V2.0.




      




    
  

          



    



  

    

    

    





    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Apple pulls iPhone torrent app from AltStore PAL in Europe]]></title>
            <link>https://www.theverge.com/news/767344/apple-removes-itorrent-altstore-pal-ios-marketplace</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45098411</guid>
            <description><![CDATA[iTorrent’s developer has been blocked from distributing apps on alternative iOS stores.]]></description>
            <content:encoded><![CDATA[Jess Weatherbed is a news writer focused on creative industries, computing, and internet culture. Jess started her career at TechRadar, covering news and hardware reviews.Apple has removed the iPhone torrenting client, iTorrent, from AltStore PAL’s alternative iOS marketplace in the EU, showing that it can still exert control over apps that aren’t listed on the official App Store. iTorrent developer Daniil Vinogradov told TorrentFreak that Apple has revoked his distribution rights to publish apps in any alternative iOS stores, but it seems the issue is related to government sanctions, rather than a block on torrenting.In a statement to The Verge, Apple spokesperson Peter Ajemian said, “Notarization for this app was removed in order to comply with government sanctions-related rules in various jurisdictions. We have communicated this to the developer.”While Apple bans torrent apps on its own iOS store, the EU’s Digital Markets Act gave iPhone users within the bloc greater freedom to install apps from third-party app stores that the Cupertino company doesn’t directly manage.Last month, Vinogradov said on iTorrent’s GitHub page that Apple “removed Alternative Distribution functionality from iTorrent’s Developer Portal without any warning.” Apple didn’t provide a reason for the removal, according Vinogradov, and distribution was revoked at the Apple Dev Account level.Update, August 28th: Added a statement from Apple.0 CommentsFollow topics and authors from this story to see more like this in your personalized homepage feed and to receive email updates.Jess Weatherbed]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kazeta: An operating system that brings the console gaming experience of 90s]]></title>
            <link>https://kazeta.org/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45098269</guid>
            <content:encoded><![CDATA[
    
        
            
                Download
                Discord
                Docs
                GitHub
            
        
    

    
        
		An operating system that brings the console gaming experience of the '90s to modern PC hardware and games: insert cart, power on, play.
                Explore Kazeta
            
        ↓
    

    
            
                Pure Gaming
                Insert a game cart, press power, and you're gaming instantly. Relive that nostalgic golden age where nothing stood between you and the games you love.
                
Zero setup
Direct to gameplay
Maximum performance
Distraction-free gaming
Classic '90s console experience
                
            
            
            
        

    
            
                Create Collect Play
                Transform your digital library into something tangible and permanent. Create physical game carts from your DRM-free titles and build a collection that you can play forever.
                
                    Turn any DRM-free game into a physical cart
                    Use SD cards or other external media as carts
                    Play without internet, accounts, or restrictions
                    Preserve your games as permanent, playable artifacts
                
            
	        
            
        

    
            
                Gaming Tranquility
                Say goodbye to the complexities of modern gaming and just play.
                
                    No DRM
                    No online
                    No servers
                    No updates
                    No accounts
                    No launchers
                    No subscriptions
                    No microtransactions
                
            
            
            
        

    
            
                Save Management
                Save data is captured automatically, so you never lose progress. When no cart is inserted, boot into a retro console inspired BIOS menu to manage your saves.
                
                    Retro-style BIOS screen
                    Automatic save capture
                    Playtime tracking
                    View and delete saves
                    Backup saves to external media
                
            
            
            
        

    
            
                Play It All
                Play almost any DRM-free game from platforms past or present.
                
                    AAA and indie games
                    Modern hits and old classics
                    GOG and itch.io games
                    Linux and Windows games
                    Classic console games with emulators
                
            
            
            
        

    
            
                Gaming For Everyone
                Bring back the family-friendly simplicity of gaming's distant past. Perfect for kids, parents, and grandparents who just want to play.
                
                    For kids who need a safe, offline environment
                    For older family members intimidated by modern gaming
                    For anyone craving gaming's simpler days
                
            
            
            
        

    
                Ready to game like it's 1995?
                
                    Download Kazeta today and rediscover the joy of pure gaming.
                
                Download Now
            


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Raspberry Pi 5 support (OpenBSD)]]></title>
            <link>https://marc.info/?l=openbsd-cvs&amp;m=175675287220070&amp;w=2</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45096585</guid>
            <content:encoded><![CDATA[
[prev in list] [next in list] [prev in thread] [next in thread] 

List:       openbsd-cvs
Subject:    CVS: cvs.openbsd.org: src
From:       Marcus Glocker <mglocker () cvs ! openbsd ! org>
Date:       2025-09-01 18:56:04
Message-ID: dd1203a530237b22 () cvs ! openbsd ! org
[Download RAW message or body]

CVSROOT:	/cvs
Module name:	src
Changes by:	mglocker@cvs.openbsd.org	2025/09/01 12:56:04

Modified files:
	distrib/arm64/iso: Makefile 
	distrib/arm64/ramdisk: Makefile install.md list 

Log message:
Add Raspberry Pi 5 Model B support for RAMDISK.

Known issues:
* Booting from PCIe storage HATs doesn't work because of missing U-Boot
support.
* WiFi on the Raspberry Pi 5 Model B "d0" boards doesn't work.
* The active cooler (fan) doesn't work because of missing pwm/clock
drivers (some work is in-progress).

ok kettenis@, deraadt@

[prev in list] [next in list] [prev in thread] [next in thread] 

  
    Configure | 

    About |
    News |
    Add a list |
    Sponsored by KoreLogic



]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The buyer-pull and seller-push theories of sales]]></title>
            <link>https://howtogrow.substack.com/p/the-physics-of-sales</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45096254</guid>
        </item>
        <item>
            <title><![CDATA[Patrick Winston: How to Speak (2018) [video]]]></title>
            <link>https://www.youtube.com/watch?v=Unzc731iCUY</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45095849</guid>
        </item>
        <item>
            <title><![CDATA[Amazon has mostly sat out the AI talent war]]></title>
            <link>https://www.businessinsider.com/amazon-ai-talent-wars-internal-document-2025-8</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45095603</guid>
            <description><![CDATA[Amazon has struggled to recruit top AI talent. An internal document and company insiders reveal the reasons.]]></description>
            <content:encoded><![CDATA[
            
            
            
            
                
                
                    
                      
                      
                    
                
                  
                        
                          
                          
                            
                              
                                    
                  
                          
                            Amazon CEO Andy Jassy
                            
                              
                                Fortune/Reuters Connect
                                        
                          
                        
                  
            
    
    
    
              
                
                
                
                  
                      2025-08-28T09:00:02Z
                    
                  
                
                
                        
      
            
      
              
              
              
              
                
                    Amazon struggles to attract AI talent due to its pay model and perception of falling behind others.
                    Amazon's compensation model has long caused complaints from employees.
                    Competitors like Meta and OpenAI offer more attractive packages for AI engineers.
                
              
      
            
            
            
            
            
            
                As the AI talent war sweeps across Silicon Valley, Amazon has largely sat on the sidelines. A confidential internal document, and accounts from people familiar with the matter, reveal why.The company has flagged its unique pay structure, lagging AI reputation, and rigid return-to-office rules as major hurdles. Now, the tech giant is being pushed to rethink its recruiting strategy as it scrambles to compete for top talent.The document, from late last year, was written by the HR team covering Amazon's non-retail businesses, including Amazon Web Services, advertising, devices, entertainment, and the newly formed artificial general intelligence team."GenAI hiring faces challenges like location, compensation, and Amazon's perceived lag in the space," the document noted. "Competitors often provide more comprehensive and aggressive packages." Business Insider obtained a copy of the document.Amazon's absence from recent splashy AI hires underscores those concerns. Meta has pulled in high-profile talent from ScaleAI, Apple, and OpenAI. Google and OpenAI continue to be top destinations for AI experts, while Microsoft has even drafted a wish list of Meta AI employees it hopes to recruit.Amazon's spokesperson initially told BI that the company continues to "adapt our approach to remain highly competitive, maintaining flexibility in both our compensation packages and work arrangements to attract and retain the best AI talent in this dynamic market."Hours later, the spokesperson updated the statement, saying the premise of the story was "wrong," without providing any specifics."We continue to attract and retain some of the best people in the world and they're building and deploying GenAI applications at a rapid clip. Our compensation is competitive, but we also want missionaries who are passionate about inventing things that will make a meaningful difference for customers — for those kinds of people, there's no better place in the world to build."Door desks and 'egalitarian' pay
              
              
              
              
                
            
              
              
              
            
              
              
                    
                      Amazon founder Jeff Bezos back in the 1990s
                      
              
              
              TNS/ABACA via Reuters Connect
              
              
                    
                  
              
            Amazon is famously frugal. One of its origin stories recounts how the company bought cheap doors from Home Depot and hacked them together as office desks. This became guiding symbol of Amazon's cautious spending, with founder Jeff Bezos still using door desks today.This penny-pinching culture has smashed straight into an AI hiring battle that's being fueled by unprecedented spending, putting Amazon in a tricky situation.The internal document described compensation as one of the "hotly debated topics" among Amazon recruiters, citing the company's strict use of fixed salary bands for each role. Amazon's "egalitarian philosophy" on pay leaves its offers "below par" compared with top rivals, it added."The lack of salary range increases for several key job families over the past few years does not position Amazon as an employer of choice for top tech talent," the document warned.For Amazon, missing out on top AI talent is a potential risk. ​​The pool of top-tier AI researchers and engineers is limited, and without experts with deep knowhow, it's hard to compete at the frontier of the field. Indeed, Amazon has yet to find a blockbuster AI product like OpenAI's ChatGPT or Anthropic's Claude, although its Bedrock AI cloud service has made progress.
              
              
              
            Amazon's pay structure has been a long-standing source of tension.Several people who spoke to Business Insider cited the 2020 departure of Amazon robotics VP Brad Porter as evidence of the company's frugal approach hampering talent recruitment and retention. Porter left in part after Amazon refused to raise his pay band.Amazon's stock vesting schedule is also heavily backloaded, a structure that can be less attractive to new hires. The policy extends even to top executives, who generally receive no cash bonuses.'Voting with their feet'
              
              
              
              
                
            
              
              
              
            
              
              
                    
                      Amazon CEO Andy Jassy
                      
              
              
              REUTERS/Brendan McDermid
              
              
                    
                  
              
            In addition to highlighting Amazon's "perceived lag in the AI space," the internal document said generative AI has further intensified the competition for specialized talent, particularly individuals with expertise in large language models.An August report from venture capital firm SignalFire shows Amazon is on the lower end of engineering retention, far below Meta, OpenAI, and Anthropic. Jarod Reyes, SignalFire's head of developer community, told Business Insider that Amazon rivals are making bigger strides in AI, across open models, foundational research, and developer tooling."Amazon hasn't clearly positioned itself as a leader in the generative AI wave," Reyes said. "Engineers are paying attention and they're voting with their feet."
              
              
              
              
                
            
              
              
              
            
              
              
                    
                      SignalFire chart on engineering talent retention
                      
              
              
              SignalFire
              
              
                    
                  
              
            Some investors share that view. On Amazon's earnings call last month, Morgan Stanley analyst Brian Nowak pressed CEO Andy Jassy on Wall Street's "narrative right now that AWS is falling behind" in AI and fears of losing market share to rivals. Jassy's response fell flat, sending Amazon's stock lower during the call.Amazon intends to tackle these concerns. According to the document, the company will refine its "compensation and location strategy" and host more events designed to highlight its generative AI capabilities. It also intends to set up dedicated recruiting teams for generative AI within business units like AWS to boost efficiency.'Hubs' constrain talent
              
              
              
              
                
            
              
              
              
            
              
              
                    
                      Hundreds of tech workers gathered outside Amazon's headquarters in Seattle.
                      
              
              
              REUTERS/Lindsey Wasson
              
              
                    
                  
              
            Another point of contention is Amazon's aggressive return-to-office mandate, which has already caused logistical issues.The company's new "hub" policy — which requires employees to relocate to a central office or risk termination — has further limited its access to "high-demand talent like those with GenAI skills," according to the internal document."Hubs constrain market availability," it stated.Amazon is exploring ways to allow for more "location-flexible" roles, the document added.Amazon's spokesperson told BI that the company is "always looking for ways to optimize our recruiting strategies and looking at alternate talent rich locations."Amazon hasn't been entirely on the sidelines. Last year, it brought on Adept CEO David Luan as part of a licensing deal with the AI startup. Luan now heads Amazon's AI agents lab. But the company has also seen departures, including senior AI leaders like chip designer Rami Sinno and VP Vasi Philomin, who worked on Bedrock.One Amazon recruiter told Business Insider that a growing number of job candidates started declining offers last year because of the company's RTO policy. Even if a competitor pays less, people are open to taking the job if they can stay remote, this person said."We are losing out on talent," this person added.Indeed, Bloomberg reported recently that Oracle has hired away more than 600 Amazon employees in the past two years because Amazon's strict RTO policy has made poaching easier.Staying the courseThe internal Amazon document dates to late last year, leaving open the possibility that the company has since adjusted its compensation approach to make exceptions for top AI talent.Still, multiple people familiar with the situation told Business Insider there haven't been any formal updates to internal pay guidelines. One current Amazon manager said it remains almost impossible for the company to enact sweeping changes, given its long track record of sticking to the existing system. The people who spoke with Business Insider asked not to be identified discussing sensitive matters."Based on how we run our business and what we have achieved, there are more risks than potential benefits from changing an approach that has been so successful for our shareholders over the past several decades," Amazon wrote this year about executive compensation in its annual proxy statement.Of course, the AI talent war may end up being an expensive and misguided strategy, stoked by hype and investor over-exuberance.Some of the high-profile recruits Meta recently lured have already departed.Have a tip? Contact this reporter via email at ekim@businessinsider.com or Signal, Telegram, or WhatsApp at 650-942-3061. Use a personal email address, a nonwork WiFi network, and a nonwork device; here's our guide to sharing information securely.
            
            
            
            
            
            
            
              
            
    
    
    
    
      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The future of 32-bit support in the kernel]]></title>
            <link>https://lwn.net/SubscriberLink/1035727/4837b0d3dccf1cbb/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45095475</guid>
            <description><![CDATA[Arnd Bergmann started his Open Source Summit Europe 2025 talk with a clear statement of positio [...]]]></description>
            <content:encoded><![CDATA[


Welcome to LWN.net

The following subscription-only content has been made available to you 
by an LWN subscriber.  Thousands of subscribers depend on LWN for the 
best news from the Linux and free software communities.  If you enjoy this 
article, please consider subscribing to LWN.  Thank you
for visiting LWN.net!



Arnd Bergmann started his Open
Source Summit Europe 2025 talk with a clear statement of position: 32-bit
systems are obsolete when it comes to use in any sort of new products.  The
only reason to work with them at this point is when there is existing
hardware and software to support.  Since Bergmann is the overall maintainer
for architecture support in the kernel, he is frequently asked whether
32-bit support can be removed.  So, he concluded, the time has come to talk
more about that possibility.


People naturally think about desktop machines first, he continued.  If you
were running Linux in the 1990s, you had a 32-bit, desktop system.  Unix
systems, though, moved to 64-bit platforms around 30 years ago, and
the Linux desktop made that move about 20 years ago.  Even phones and
related devices have been 64-bit for the last decade.  If those systems
were all that Linux had to support, 32-bit support would have long since
been removed from the kernel.  He summarized the situation with this slide,
showing how the non-embedded architectures have transitioned to either
64-bit or nonexistence over time:




The world is not all desktops — or servers — though; embedded Linux exists
as well.  About 90% of those systems are running on Arm processors.  The
kernel has accumulated a lot of devicetree files describing those systems
over the years; only in this last year has the number of devicetrees for
armv8 (64-bit) systems exceeded the number for armv7 (32-bit) systems.

For Arm processors with pre-armv7 architectures, there are only three for
which it is still possible to buy hardware, but a number are still
supported by the kernel community:






Many other pre-armv7 CPUs are out of production,
but the kernel still has support for them.  Of those, he said, there are
about ten that could be removed now.  It would be nice to be able to say
that support for the others will be removed after a fixed period, ten years
perhaps, but hardware support does not work that way.  Instead, one has to
think in terms of half lives; every so often, it becomes possible to remove
support for half of the platforms.  It all depends on whether there are
users for the processors in question.

The kernel is still adding support for some 32-bit boards, he said, but at
least ten new 64-bit boards gain support for each 32-bit one.

There are a number of non-Arm 32-bit architectures that still have support
in the kernel; these include arc, microblaze, nios2, openrisc, rv32,
sparc/leon, and xtensa.  All of them are being replaced by RISC-V
processors in new products.  RISC-V is what you use if you don't care about
Arm compatibility, he said.

Then, there is the dusty corner where nommu (processors without a
memory-management unit) live; these include armv7-m, m68k, superh, and
xtensa.  Nobody is building anything with this kind of hardware now, and
the only people who are working on them in any way are those who have to
support existing systems.  "Or to prove that it can be done."

There are still some people who need to run 32-bit applications that cannot
be updated; the solution he has been pushing people toward is to run a
32-bit user space on a 64-bit kernel.  This is a good solution for
memory-constrained systems; switching to 32-bit halves the memory usage of
the system.  Since, on most systems, almost all memory is used by user
space, running a 64-bit kernel has a relatively small cost.  Please, he
asked, do not run 32-bit kernels on 64-bit processors.




There are some definite pain points that come with maintaining 32-bit
support; most of the complaints, he said, come from developers in the
memory-management subsystem.  The biggest problem there is the need to
support high memory; it is complex, and requires support throughout the
kernel.  High memory is needed when the kernel lacks the address space to
map all of the installed physical memory; that tends to be at about 800MB
on 32-bit systems. (See this article for
more information about high memory).

Currently the kernel is able to support 32-bit systems with up to 16GB of
installed memory.  Such systems are exceedingly rare, though, and support
for them will be going away soon.  There are a few 4GB systems out there,
including some Chromebooks.  Systems with 2GB are a bit more common.  Even
these systems, he said, are "a bit silly" since the memory costs
more than the CPU does.  There are some use cases for such systems, though.
Most 32-bit systems now have less than 1GB of installed memory.  The
kernel, soon, will not try to support systems with more than 4GB.

There are some ideas out there for how to support the larger-memory 32-bit
systems without needing the high-memory abstraction.  Linus Walleij is
working on entirely separating the kernel and user-space address spaces,
giving each 4GB to work with; this is a variant on the "4G/4G" approach
that has occasionally been tried for many years.  It is difficult to make
such a system work efficiently, so this effort may never succeed, Bergmann
said.

Another approach is the proposed "densemem" memory model, which does some
fancy remapping to close holes in the physical address space.  Densemem can
support up to 2GB and is needed to replace the
SPARSEMEM memory model, the removal of which which will eventually be
necessary in any case.  This work has to be completed before high memory
can be removed; Bergmann said that he would be interested in hearing from
potential users of the densemem approach.

One other possibility is to drop high memory, but allow the extra physical
memory to be used as a zram swap
device.  That would not be as efficient as accessing the memory directly,
but it is relatively simple and would make it possible to drop the
complexity of high memory.

Then, there is the year-2038 problem, which
he spent several years working on.  The kernel-side work was finished in
2020; the musl C library was updated that same year, and the GNU C
Library followed the year after.  Some distributors have been faster than
others to incorporate this work; Debian and Ubuntu have only become
year-2038-safe this year.

The year-2038 problem is not yet completely solved, though; there are a lot
of packages that have unfixed bugs in this area.  Anything using futex(),
he said, has about a 50% chance of getting time handling right.  The legacy
32-bit system calls, which are not year-2038 safe, are still enabled in the
kernel, but they will go away at some point, exposing more bugs.  There are
languages, including Python and Rust, that have a lot of broken language
bindings.  Overall, he said, he does not expect any 32-bit desktop system to
survive the year-2038 apocalypse.

A related problem is big-endian support, which is also 32-bit only, and
also obsolete.  Its removal is blocked because IBM is still supporting
big-endian mainframe and PowerPC systems; as long as that support
continues, big-endian support will stay in the kernel.

A number of other types of support are under discussion.  There were once
32-bit systems with more than eight CPUs, but nobody is using those
machines anymore, so support could be removed.  Support for armv4
processors, such as the DEC StrongARM CPU,
should be removed.  Support for early armv6 CPUs, including the omap2 and
i.mx31, "complicates everything"; he would like to remove it, even
though there are still some Nokia
770 systems in the wild.  The time is coming for the removal of all
non-devicetree board files.  Removal of support for Cortex M CPUs,
which are nommu systems, is coming in a couple of years.  Developers are
eyeing i486 CPU support, but that will not come out yet.  Bergmann has sent
patches to remove support for KVM on 32-bit CPUs, but there is still
"one PowerPC user", so that support will be kept for now.

To summarize, he said, the kernel will have to retain support for armv7
systems for at least another ten years.  Boards are still being produced
with these CPUs, so even ten years may be optimistic for removal.
Everything else, he said, will probably fade away sooner than that.  The
removal of high-memory support has been penciled in for sometime around
2027, and nommu support around 2028.  There will, naturally, need to be
more discussion before these removals can happen.

An audience member asked how developers know whether a processor is still
in use or not; Bergmann acknowledged that it can be a hard question.  For
x86 support, he looked at a lot of old web pages to make a list of which
systems existed, then showed that each of those systems was already broken
in current kernels for other reasons; the lack of complaints showed that
there were no users.  For others, it is necessary to dig through the Git
history, see what kinds of changes are being made, and ask the developers
who have worked on the code; they are the ones who will know who is using
that support.

Another person asked about whether the kernel would support big-endian
RISC-V systems.  Bergmann answered that those systems are not supported
now, and he hoped that it would stay that way.  "With RISC-V, anybody
can do anything, so they do, but it is not always a good idea".  The
final question was about support for nommu esp32 CPUs; he answered that
patches for those CPUs exist, but have not been sent upstream.  Those
processors are "a cool toy", but he does not see any practical
application for them.

The slides
for this talk are available.  The curious may also want to look at Bergmann's 2020 take on this topic.


[Thanks to the Linux Foundation, LWN's travel sponsor, for supporting my
travel to this event.]
           Index entries for this article
           KernelArchitectures
            ConferenceOpen Source Summit Europe/2025
            

               
               
            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Implementing a Foil Sticker Effect]]></title>
            <link>https://www.4rknova.com/blog/2025/08/30/foil-sticker</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45095460</guid>
            <description><![CDATA[A breakdown of how to build a custom Three.js shader that recreates the iridescent, sparkling look of foil stickers using vertex deformation, angle-based color shifts, and procedural flakes.]]></description>
            <content:encoded><![CDATA[In this post, I’ll walk you through how to create a custom shader in Three.js that simulates the look of a foil sticker, complete with angle-dependent iridescence and sparkling metallic flakes. The goal is to capture that premium, holographic effect you see on collectible stickers, trading cards, and high-end packaging, but to render it in real time directly in the browser.IridescenceIf you’ve ever tilted a holographic sticker or watched sunlight catch on a soap bubble, you’ve seen iridescence in action. In the real world, this rainbow shimmer comes from thin-film interference. When light waves bounce between layers of a surface, some wavelengths are reinforced while others cancel out, causing colors to shift depending on your viewing angle.In real-time computer graphics, we don’t need to simulate the exact physics. Instead, we can approximate this by mapping view angle to hue, as the surface tilts relative to the camera, its color smoothly shifts through a spectrum. This gives that dynamic, “alive” quality you expect from foil stickers.Foil FlakesAlongside the shifting colors, there’s another key detail: foil flakes. Real metallic foils have tiny reflective particles embedded in them, creating hundreds of bright, sharp highlights that twinkle as you move. These aren’t smooth reflections but randomized sparkles, giving the surface its tactile, premium feel.To replicate this in a shader, we’ll introduce procedural noise to generate small random patches of brightness across the surface. When combined with lighting, they look like metallic specks catching the light. Together, angular hue shifts and flake sparkles create a convincing illusion of printed holographic foil without expensive rendering tricks.ImplementationThis implementation simulates a peeling, iridescent sticker with foil flakes using Three.js. While I will borrow concepts such as metalness, roughness, and Fresnel from Physically Based Rendering (PBR), this shader is not physically based. The goal is to create a visually plausible, artistic effect.Below is a live demo of the shader, where you can modify its parameters and experiment with different configurations. Use your mouse to rotate the sticker around and see how the material reacts to the lighting.Vertex ShaderThe vertex shader handles the peel geometry and passes useful information to the fragment shader.Uniform / VaryingTypePurposeuPeelAmountfloatOverall peel strength (0 = flat, 1 = fully peeled).uPeelAnglefloatPeel direction in degrees.vUvvec2UV coordinates for texture mapping.vWorldPosvec3Vertex position in world space.vNormalvec3Transformed normal for lighting.vAOIntensityfloatDistance moved by vertex, used to darken lifted areas.The shader goes through the following simple steps:Compute vector from hinge to current vertex.Calculate the peel factor and angle.Define the rotation axis and apply Rodrigues’ rotation formula to rotate the vertex around that axis.Apply the same rotation to the normal.Calculate a fake ambient occlusion term.Here’s the full vertex shader code:uniform float uPeelAmount;  // Strength of peel (0.0 → no peel, 1.0 → full peel)
uniform float uPeelAngle;   // Peel angle in degrees (converted to radians in shader)
varying vec2  vUv;          // UV coordinates
varying vec3  vWorldPos;    // Vertex position in world space
varying vec3  vNormal;      // Transformed vertex normal
varying float vAOIntensity; // Ambient occlusion or peel intensity factor

void main() {
    vUv = vec2(uv.x, 1.0 - uv.y);
    vec3 pos = position;

    // Define hinge point for peel
    vec3 hinge = vec3(0.0, 0.0, 0.0);

    // Vector from hinge to current vertex
    vec3 toVertex = pos - hinge;

    // Peel factor calculation
    // Interpolates peel strength diagonally
    // (bottom-left → top-right)
    float peelFactor = (uv.x + uv.y) * 0.5;

    // Convert peel angle to radians
    // Final angle is scaled by peelAmount
    // and per-vertex peelFactor
    float radAngle = radians(uPeelAngle);
    float angle = radAngle * uPeelAmount * peelFactor;

    // Define rotation axis for peel
    // Diagonal axis pointing from top-left 
    // to bottom-right
    vec3 axis = normalize(vec3(-1.0, 1.0, 0.0));
    float cosA = cos(angle);
    float sinA = sin(angle);

    // Apply Rodrigues' rotation formula
    // Rotates the vertex around the diagonal axis
    vec3 rotated = toVertex * cosA +
                   cross(axis, toVertex) * sinA +
                   axis * dot(axis, toVertex) * (1.0 - cosA);

    // Update vertex position after rotation
    pos = hinge + rotated;

    // Rotate vertex normal the same way to
    // ensure lighting matches the peeled
    // geometry
    vec3 rotatedNormal = normal * cosA +
                         cross(axis, normal) * sinA +
                         axis * dot(axis, normal) * (1.0 - cosA);

    // Transform normal into view space
    vNormal = normalize(normalMatrix * rotatedNormal);

    // Transform vertex to world space
    vec4 worldPos = modelMatrix * vec4(pos, 1.0);
    vWorldPos = worldPos.xyz;

    // Ambient Occlusion term based on distance moved
    // from original vertex position
    vAOIntensity = length(toVertex - rotated);

    // Final projection
    gl_Position = projectionMatrix * viewMatrix * worldPos;
}
Fragment ShaderThe fragment shader handles all lighting, reflections, iridescence, and foil flakes. It layers procedural effects to create a rich, dynamic look.UniformTypePurposemapsampler2DSticker albedo + alpha.envMap2Dsampler2DEnvironment map for reflections.uCameraPosvec3Camera position for view vector.uAlphaCutofffloatDiscard pixels below this alpha.uFlakesEnabledfloatToggle foil flakes.uFlakeSizefloatSize of flakes.uFlakeReductionfloatRandomness threshold for flakes.uFlakeThresholdfloatBrightness threshold to show flakes.uFlakeBrightnessfloatBase brightness of flakes.uMetalnessfloatPBR-like metal reflectivity control.uRoughnessfloatControls reflection sharpness.uEnvIntensityfloatScales environment contribution.uMetalmaskfloatMask controlling metallic regions.uIridescencefloatStrength of angle-dependent rainbow effect.uIriMin, uIriRangefloatRange for simulated film thickness.uPeelAmount, uPeelAnglefloatPeel geometry info for shading.This is how this works:Alpha cutoff to discard transparent pixels early.Back-face shading to render the rear surface as plain white or darkened, depending on peel.Foil flakes are computed using procedural noise. Normals are perturbed slightly to create sparkle variation. The environment map is sampled to get an iridescent tint.Iridescence (thin-film approximation) is calculated using sine-based waves to shift hue by view angle.Environment reflections are modulated by Fresnel.Final shading combines diffuse base, reflections, iridescence, and flakes.Here’s the full vertex shader code:precision highp float;

#define PI  3.14159265

varying vec2 vUv;
varying vec3 vNormal;
varying vec3 vWorldPos;
varying float vAOIntensity;

uniform sampler2D map;      // sticker albedo + alpha
uniform sampler2D envMap2D; // LDR equirectangular environment

uniform vec3  uCameraPos;
uniform float uAlphaCutoff;
uniform float uMaxMip;
uniform float uFlakesEnabled;
uniform float uFlakeSize;
uniform float uFlakeReduction;
uniform float uFlakeThreshold;
uniform float uFlakeBrightness;
uniform float uPeelAmount;
uniform float uPeelAngle;
uniform float uMetalness;
uniform float uRoughness;
uniform float uEnvIntensity;
uniform float uMetalmask;
uniform float uIridescence;
uniform float uIriMin;
uniform float uIriRange;

float hash(vec2 p) {
    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);
}

// Map 3D dir to 2D equirect UV
vec2 dirToEquirectUv(vec3 dir) {
    dir = normalize(dir);
    float phi = atan(dir.z, dir.x);
    float theta = acos(clamp(dir.y, -1.0, 1.0));
    return vec2((phi + 3.14159265) / (2.0 * 3.14159265), theta / 3.14159265);
}

vec3 sampleEnvRough(vec3 R, float roughness) {
    vec2 uv = dirToEquirectUv(R);

    // Map roughness to LOD level
    float lod = roughness * uMaxMip;
    vec3 color = texture2DLodEXT(envMap2D, uv, lod).rgb;

    return color;
}

// Iridescence / thin-film color
vec3 iridescenceColor(float cosTheta) {
    float thickness = uIriMin + uIriRange * (1.0 - cosTheta);
    float phase = 6.28318 * thickness * 0.01; // scaled for visuals
    vec3 rainbow = 0.5 + 0.5 * vec3(sin(phase), sin(phase + 2.094), sin(phase + 4.188));
    return mix(vec3(1.0), rainbow, uIridescence);
}

// Convert RGB to perceived luminance (Rec.709)
float luminance(vec3 color) {
    return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

void main() {

    vec4 base = texture2D(map, vUv);
    if(base.a < uAlphaCutoff)
        discard;

    if(!gl_FrontFacing) {
        float col = 1.0;
        if(uPeelAngle > 0.0) {
            col = mix(1.0, 0.2, vAOIntensity);
        }
        // Render back side as white
        gl_FragColor = vec4(vec3(col), base.a);
        return;
    }

    vec3 N = normalize(vNormal);
    vec3 V = normalize(uCameraPos - vWorldPos);
    vec3 R = reflect(-V, N);

    // Ambient occlusion / peel shadow
    float peelShadow = 0.0;

    if(uPeelAngle < 0.0) {
        peelShadow = smoothstep(0.0, 0.3, vAOIntensity);
        base.rgb *= mix(1.0, 0.3, peelShadow);
    }

    // Flakes
    float flakeIntensity = 0.0;
    vec3 flakeEnv = vec3(0.0);

    float brightness = luminance(base.rgb);

    if(uFlakesEnabled > 0.5) {
        // Procedural flake mask
        float flake = hash(floor(vUv * uFlakeSize));
        float flakeMask = smoothstep(uFlakeReduction, 1.0, flake);

        // Base brightness influence
        float flakeBoost = smoothstep(uFlakeThreshold, 1.0, brightness);

        // Perturbed flake normal
        float angleOffset = (hash(vec2(flake, flake + 3.0)) - 0.5) * 0.25;
        vec3 perturbedNormal = normalize(N + vec3(angleOffset, 0.0, angleOffset));

        // Reflection for sparkle
        vec3 PR = reflect(-V, perturbedNormal);

        // Dynamic flicker factor (only brightens, never darkens)
        float flakePhase = hash(floor(vUv * uFlakeSize) + floor(PR.xy * 15.0));
        float phaseMod = mix(1.0, 1.8, flakePhase);
        
        // Core sparkle factor (glimmer preserved)
        float flakeSpec = pow(clamp(dot(perturbedNormal, V) * 0.5 + 0.5, 0.0, 1.0), 8.0);
        flakeSpec = max(flakeSpec, 0.15); // always visible

        // Environment tint (never too dark, controlled by uniform)
        float flakeRough = clamp(uRoughness * 0.4, 0.0, 1.0);
        flakeEnv = sampleEnvRough(PR, flakeRough) * mix(0.9, 1.2, brightness);
        flakeEnv = max(flakeEnv, vec3(uFlakeBrightness));

        vec3 flakeIri = iridescenceColor(dot(perturbedNormal, V));
        flakeEnv *= mix(vec3(1.0), flakeIri, 0.9);

        // Final intensity
        flakeIntensity = flakeMask * flakeBoost * flakeSpec * phaseMod * 18.0;
        flakeIntensity = clamp(flakeIntensity, 0.0, 1.0);
    }

    // Final roughness modulation
    float finalRough = clamp(mix(uRoughness, 1.0, flakeIntensity), 0.0, 1.0);

    // Environment reflection
    vec3 env = sampleEnvRough(R, finalRough) * uEnvIntensity;

    // Blend in flake environment contribution
    env = mix(env, flakeEnv, clamp(flakeIntensity, 0.0, 1.0));

    // Fresnel term
    float cosTheta = clamp(dot(N, V), 0.0, 1.0);
    float F0 = mix(0.04, 1.0, uMetalness);
    float fres = F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);

    // Iridescence
    float metalicMask = mix(uMetalmask, 1.0, brightness);
    vec3 iriCol = iridescenceColor(cosTheta) * metalicMask;

    // Final color
    vec3 diffuse = base.rgb * (1.0 - uMetalness);
    vec3 spec = env * fres * iriCol * (1.0 - finalRough * 0.85);
    vec3 color = diffuse + spec;

    gl_FragColor = vec4(color, base.a);
}
LicensingThe code in this page is licensed under Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0). Feel free to share and adapt the code for non-commercial purposes with proper attribution. If you wish to use the code commercially, please contact me for a separate license agreement.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Adaptive LLM routing under budget constraints]]></title>
            <link>https://arxiv.org/abs/2508.21141</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45094421</guid>
            <description><![CDATA[Large Language Models (LLMs) have revolutionized natural language processing, but their varying capabilities and costs pose challenges in practical applications. LLM routing addresses this by dynamically selecting the most suitable LLM for each query/task. Previous approaches treat this as a supervised learning problem, assuming complete knowledge of optimal query-LLM pairings. However, real-world scenarios lack such comprehensive mappings and face evolving user queries. We thus propose to study LLM routing as a contextual bandit problem, enabling adaptive decision-making using bandit feedback without requiring exhaustive inference across all LLMs for all queries (in contrast to supervised routing). To address this problem, we develop a shared embedding space for queries and LLMs, where query and LLM embeddings are aligned to reflect their affinity. This space is initially learned from offline human preference data and refined through online bandit feedback. We instantiate this idea through Preference-prior Informed Linucb fOr adaptive rouTing (PILOT), a novel extension of LinUCB. To handle diverse user budgets for model routing, we introduce an online cost policy modeled as a multi-choice knapsack problem, ensuring resource-efficient routing.]]></description>
            <content:encoded><![CDATA[
    
    
                
    View PDF
    HTML (experimental)
            Abstract:Large Language Models (LLMs) have revolutionized natural language processing, but their varying capabilities and costs pose challenges in practical applications. LLM routing addresses this by dynamically selecting the most suitable LLM for each query/task. Previous approaches treat this as a supervised learning problem, assuming complete knowledge of optimal query-LLM pairings. However, real-world scenarios lack such comprehensive mappings and face evolving user queries. We thus propose to study LLM routing as a contextual bandit problem, enabling adaptive decision-making using bandit feedback without requiring exhaustive inference across all LLMs for all queries (in contrast to supervised routing). To address this problem, we develop a shared embedding space for queries and LLMs, where query and LLM embeddings are aligned to reflect their affinity. This space is initially learned from offline human preference data and refined through online bandit feedback. We instantiate this idea through Preference-prior Informed Linucb fOr adaptive rouTing (PILOT), a novel extension of LinUCB. To handle diverse user budgets for model routing, we introduce an online cost policy modeled as a multi-choice knapsack problem, ensuring resource-efficient routing.
    

    
    
              
          Comments:
          Accepted at EMNLP 2025 (findings)
        

          Subjects:
          
            Machine Learning (cs.LG)
        
          Cite as:
          arXiv:2508.21141 [cs.LG]
        
        
           
          (or 
              arXiv:2508.21141v1 [cs.LG] for this version)
          
        
        
           
                        https://doi.org/10.48550/arXiv.2508.21141
              
                                arXiv-issued DOI via DataCite (pending registration)
            
          
        
    
  
      Submission history From: Pranoy Panda [view email]          [v1]
        Thu, 28 Aug 2025 18:18:19 UTC (1,560 KB)
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Ask HN: Who is hiring? (September 2025)]]></title>
            <link>https://news.ycombinator.com/item?id=45093192</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45093192</guid>
            <description><![CDATA[Please state the location and include REMOTE for remote work, REMOTE (US)
or similar if the country is restricted, and ONSITE when remote work is not an option.]]></description>
            <content:encoded><![CDATA[Ask HN: Who is hiring? (September 2025)201 points by whoishiring 20 hours ago  | hide | past | favorite | 174 commentsPlease state the location and include REMOTE for remote work, REMOTE (US)
or similar if the country is restricted, and ONSITE when remote work is not an option.Please only post if you personally are part of the hiring company—no
recruiting firms or job boards. One post per company. If it isn't a household name,
explain what your company does.Please only post if you are actively filling a position and are committed
to responding to applicants.Commenters: please don't reply to job posts to complain about
something. It's off topic here.Readers: please only email if you are personally interested in the job.Searchers: try https://dheerajck.github.io/hnwhoishiring/,
https://amber-williams.github.io/hackernews-whos-hiring/,
http://nchelluri.github.io/hnjobs/, https://hnresumetojobs.com,
https://hnhired.fly.dev, https://kennytilton.github.io/whoishiring/,
https://hnjobs.emilburzo.com, or this (unofficial) Chrome extension:
https://chromewebstore.google.com/detail/hn-hiring-pro/mpfal....Don't miss these other fine threads:Who wants to be hired? https://news.ycombinator.com/item?id=45093190Freelancer? Seeking freelancer? https://news.ycombinator.com/item?id=45093191
]]></content:encoded>
        </item>
    </channel>
</rss>