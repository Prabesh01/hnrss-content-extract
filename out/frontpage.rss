<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Thu, 11 Sep 2025 15:31:38 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Social Media Is Navigating Its Sectarian Phase]]></title>
            <link>https://www.newyorker.com/culture/infinite-scroll/social-media-is-navigating-its-sectarian-phase</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45212288</guid>
            <description><![CDATA[Kyle Chayka writes about how social-media platforms are navigating—and shaping—contemporary political divides.]]></description>
            <content:encoded><![CDATA[On September 1st, the author and statistician Nate Silver wrote a post on X diagnosing a new condition: “Blueskyism,” so named for the decentralized social network that has emerged as a competitor to what used to be Twitter. According to Silver, Blueskyism embodies a newfangled ideology comprising “all the characteristics that make progressivism unappealing to normal people”—the same qualities, Silver argues, that prevent Democrats from recouping electoral favor. As with any good social-media bit, Silver later doubled down, fleshing out the concept in his newsletter, Silver Bulletin. Bluesky, designed to be a nontoxic social network, has been overwhelmed by “aggressive policing of dissent,” “moral micropanics,” and an insularity derived from its population of academics and experts. Silver is not active on Bluesky, but his posts on X are often screenshotted and cross-posted for rage bait on the platform. Basically, Silver admitted in his newsletter, he is critiquing liberal “wokeness,” and blaming a single social network for it.Silver is not completely wrong; there is indeed a culture of recursive, reactionary scolding on Bluesky that makes it less fun than it could be. (On the platform, X is euphemistically referred to as “the other place.”) It’s impossible to generalize about the entire population of the site—many of Bluesky’s users do not post in English and do not engage with American politics—yet it has developed an identity as a haven for liberals in the aftermath of Elon Musk’s acquisition of Twitter and Donald Trump’s reëlection as President. More so now than five or ten years ago, which social network you use is a byword for your personal politics, and you can’t use a particular platform without agreeing with, or at least tolerating, its ambient ideology. Social networks, particularly the text-driven platforms that host political debate, have grown more sectarian as politics, in turn, have become more online; if you’re active on one network, you might, like Silver, get blamed for what you say there on another. Thus, people’s choice of which platform to use has become more fraught. A decade ago, it made sense for users to toggle among different social networks that offered different content formats. Now that every platform offers a similar admixture of text, images, and video, choosing where to spend your time feels more like picking your preferred flavor of brain poison.Silver casts Bluesky as “a peculiar online neighborhood that someone wouldn’t encounter unless she takes a wrong turn.” But the dynamics of X, where Silver posts more or less daily, are far more politicized by design. In the twenty-tens, Twitter hosted a wide range of political viewpoints; it was known as much for distributing activists’ documentation of protests as for serving as Trump’s bully pulpit during his first Administration. After Musk acquired the site, in 2022, he laid off its moderation staff, incentivized particular forms of posting (often from Musk’s favored right-wing influencers), and tweaked users’ feeds toward promoting Grok and xAI, Musk’s artificial-intelligence business. (X was formally merged into xAI this year.) No one can credibly claim that X under Musk is trying to be neutral, or build a better political arena, as Bluesky, whatever its flaws, has earnestly tried to do. The politics of social platforms is determined not just by the opinions of its users but by the underlying structure of the network. Bluesky, part of the decentralized internet, is slower paced and caters to niche interests, rewarding internecine fights over minutiae, whereas X is deliberately chaotic, encouraging the gathering of follower-armies and ideological insult-comedy for an audience that may be largely made up of bots. X-ism, as we might call it, involves the race for engagement at all costs and trolling as praxis, and it is currently winning out.Silver might be comforted by the fact that even many liberals who had fled for Bluesky seem to be embracing X-ism once more, creeping back onto the platform with a certain furtive guilt. The space has been marked safe for their return, in part, by Musk’s retreat from the public stage in the months since he split with Trump and left DOGE to its own devices. It’s easier to perform on Musk’s stage when the man himself is no longer there at all hours shouting incessantly. In March, the release of “Abundance, ” by the writers Ezra Klein and Derek Thompson, sparked a wave of debate on X over the most effective anti-Trump messaging. New pro-liberal publications, including Jerusalem Demsas’s The Argument, have joined in. (As during, say, the Super Bowl, it’s more fun to post when there’s something exciting to collectively fixate on.) Last month, the California governor Gavin Newsom began using his office’s X account to mock Trump’s Truth Social posting style, publishing messages that mimicked the President’s rambling all-caps missives. The resulting positive press for Newsom has served as permission for other liberal politicians to rear their heads on X in his wake.I suspect that left-leaning journalists and editors are migrating back to X not because of the ideological tenor of Bluesky but because they miss the attention arms race. If X-ism is preferable to Blueskyism, it’s because X users don’t have to work as hard to reach people. On the internet, a bigger megaphone is still considered a better one. Yet parsing the distinctions between Bluesky and X has a burgeoning air of futility. The truth is that text-dominated social networks are largely decaying across the board. According to Bluesky’s open-source data, the number of daily posters on the platform has been declining each month since its peak in January of this year, following Trump’s Inauguration (though it is still four times as large as it was last year). X has been forced to release some of its internal statistics owing to new technology regulation in the European Union; the data, from earlier this year, show that the site has lost around ten per cent of its European user base, around eleven million accounts, since August of 2024. Meta’s Threads app is growing, thanks to its ongoing support from Instagram, but since its launch, in 2023, it has not, at least by my recollection, generated a single major cultural moment or meme.Pundits have always dominated the ranks of posters on social media, but now the masses of silent followers are declining, and continued posting risks preaching to accounts of the converted, the disengaged, or the defunct. Mainstream audiences may not need social media as much as they used to in part because they can now find many of the same dynamics in traditional media. Trump’s second Administration is nothing if not an extended troll; his latest provocations include renaming the Department of Defense and threatening on Truth Social that Chicago was “about to find out why it’s called the Department of WAR.” The entertainment conglomerate Paramount is reportedly set to complete a long-rumored acquisition of The Free Press, the small but influential Substack-based publication founded by the pioneering anti-woke journalist Bari Weiss, and install Weiss as a top role at CBS News. The Free Press gained notoriety through Twitter-style right-wing disaffection and railed against perceived liberal orthodoxies; Weiss’s journalistic instincts might be best summed up by a recent piece investigating whether Gazan children who had starved to death under Israeli blockades had preëxisting illnesses. If the deal goes through, Weiss will doubtless bring a similar sensibility to CBS, and to a vastly larger, more offline audience. Social media is politically segregated, sure, but, more than that, the social-media style of politics is now unavoidable. ♦]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[NearToilets – Airbnb of toilets, earn from toilets for rent]]></title>
            <link>https://neartoilets.com/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45212141</guid>
        </item>
        <item>
            <title><![CDATA[Conway's Game of Life, but Musical]]></title>
            <link>https://www.hudsong.dev/digital-darwin</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45211868</guid>
            <description><![CDATA[Breed unique melodies with genetic algorithms! Explore Conway's musical life and cultural evolution patterns. Interactive AI music lab]]></description>
            <content:encoded><![CDATA[Hudson Griffith•September 11, 2025IntroductionMusic is profoundly human. It runs deep in our lives and shows up in our everyday rituals. And somehow, those rituals often end with us leaving AirPods in the back seat of an Uber. But beneath the everyday habits lies a much older connection. Neuroscience research shows our brains respond to music in fundamental ways that precede language development 1. And what fascinates me is how naturally music evolves over time, how styles adapt and change in a way that feels less like something we purposely create and more like it just grows on its own. Charles Darwin himself speculated that musicality might have preceded language, suggesting our capacity for music is fundamentally biological 2.This got me thinking: if musical evolution follows biological patterns, could we create an environment to simulate this evolution? So I built one.Building a Laboratory for Musical EvolutionI created what I call a melody breeder. It’s a digital playground where melodies can compete, reproduce, and evolve. Select your favorite (up to three) melodies, let them breed with each other, and watch what happens. It may not be the next top hit, but it's a lot of fun to play around with.And the science behind it is actually pretty solid. Richard Dawkins' concept of "memes" describes cultural units that replicate and evolve similarly to genes 3. Musical melodies are perfect examples. They replicate through listening, mutate through sampling, and undergo selection pressure based on whether people actually want to hear them again.Research by Savage et al. (2015) demonstrates that musical evolution follows predictable patterns across cultures, with structural features evolving through descent with modification much like biological traits 4. That means you can think of your Spotify Liked Songs playlist as a thriving ecosystem, full of tracks that survived.Conway's Symphony of Life and DeathWhile building the melody breeder, I kept thinking about how musical patterns behave like living systems. They're born, they interact, they die. This reminded me of one of my favorite digital visualizations, Conway's Game of Life.So I made it musical.This is Conway's Game of Life, where each cell birth plays a harmonic note and each death plays a complementary tone. The result is evolving, unpredictable music generated by the simulation.Each glider that moves across the screen creates its own melody. Oscillators turn into rhythms and the "glider gun" becomes a beat machine. The same simple rules that drive complexity in biology can also shape musical structure.From Musical Genes to Cultural PandemicsThe parallels between musical evolution and biological systems run deeper than you'd think.Take the Labubu phenomenon (I never thought I would write that phrase in a blog post). These designer toys went from obscure to everywhere seemingly overnight, spreading through social media like a disease. And I mean that literally, epidemiologists use the same models for viral TikTok trends as they do for actual viruses 5. To show this, I pulled Google Trends data 6 on the term "Labubu" from the start of 2024 to today and visualized it as a global map of its spread.Popularity2024-01-012024-01-042024-01-082024-01-112024-01-14Watching this trend curve reminds me of the pandemic era. The same steep exponential rises, the geographic spread patterns, the way interest peaks and then gradually declines. It's unsettling how similar a toy's popularity looks to a virus outbreak when you plot them on a map.But maybe that similarity isn't so unsettling after all. Maybe it reveals something deeper about how information spreads through human networks, whether that information is genetic code, viral particles, or cultural ideas.The Universal Patterns of Cultural EvolutionDarwin called it "endless forms most beautiful," and that phrase fits here too. The same simple rules that drive biology also explain why culture produces such variety, from music to memes. Patterns replicate, adapt, and survive when they capture our attention.Boyd & Richerson describe culture as a shared pool of innovation that helps us live better 7. Sometimes that means a symphony, sometimes a viral monster toy. Either way, it's evolution at work.These patterns exist all around us, but recognizing them is just the beginning. What really gets me excited is being able to build something that makes these invisible forces visible.Why I Love CodeThis whole exploration exists because programming gave me the tools to turn random shower thoughts into something real and shareable. There's something empowering about writing code that simulates generations of evolution in milliseconds, about building systems that let people explore complex ideas through play.This is why I code: to take questions that keep me up at night and turn them into something that might spark curiosity in the 5 people who read these blog posts.Now if you'll excuse me, I need to check on my melody breeder. Pretty sure Beethoven's Fifth great-grandson just evolved into Baby Shark.References1Levitin, D. J. (2006). This Is Your Brain on Music: The Science of a Human Obsession. Dutton Penguin.2Darwin, C. (1871). The Descent of Man, and Selection in Relation to Sex. John Murray.3Dawkins, R. (1976). The Selfish Gene. Oxford University Press.4Savage, P. E., Brown, S., Sakai, E., & Currie, T. E. (2015). Statistical universals reveal the structures and functions of human music. Proceedings of the National Academy of Sciences, 112(29), 8987-8992.5Kermack, W. O., & McKendrick, A. G. (1927). A contribution to the mathematical theory of epidemics. Proceedings of the Royal Society of London. Series A, 115(772), 700-721.6Google Trends. (2024–2025). Search interest for “Labubu”. Retrieved September 2025, from https://trends.google.com7Boyd, R., & Richerson, P. J. (2011). The cultural niche: Why social learning is essential for human adaptation. Proceedings of the National Academy of Sciences, 108(Supplement 2), 10918–10925. https://doi.org/10.1073/pnas.11002901088Centola, D. (2010). The spread of behavior in an online social network experiment. Science, 329(5996), 1194-1197.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CRISPR Offers New Hope for Treating Diabetes]]></title>
            <link>https://www.wired.com/story/no-more-injections-crispr-offers-new-hope-for-treating-diabetes/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45211596</guid>
            <description><![CDATA[Gene-edited pancreatic cells have been transplanted into a patient with type 1 diabetes for the first time. They produced insulin for months without the patient needing to take immunosuppressants.]]></description>
            <content:encoded><![CDATA[All products featured on WIRED are independently selected by our editors. However, we may receive compensation from retailers and/or from purchases of products through these links. Learn more.Crispr gene-editing technology has demonstrated its revolutionary potential in recent years: It has been used to treat rare diseases, to adapt crops to withstand the extremes of climate change, or even to change the color of a spider’s web. But the greatest hope is that this technology will help find a cure for a global disease, such as diabetes. A new study points in that direction.For the first time, researchers succeeded in implanting Crispr-edited pancreatic cells in a man with type 1 diabetes, an autoimmune disease where the immune system attacks insulin-producing cells in the pancreas. Without insulin, the body is then unable to regulate blood sugar. If steps aren’t taken to manage glucose levels by other means (typically, by injecting insulin), this can lead to damage to the nerves and organs—particularly the heart, kidneys, and eyes. Roughly 9.5 million people worldwide have type 1 diabetes.In this experiment, edited cells produced insulin for months after being implanted, without the need for the recipient to take any immunosuppressive drugs to stop their body attacking the cells. The Crispr technology allowed the researchers to endow the genetically modified cells with camouflage to evade detection.The study, published last month in The New England Journal of Medicine, details the step-by-step procedure. First, pancreatic islet cells were taken from a deceased donor without diabetes, and then altered with the gene-editing technique Crispr-Cas12b to allow them to evade the immune response of the diabetes patient. Cells altered like this are said to be “hypoimmune,” explains Sonja Schrepfer, a professor at Cedars-Sinai Medical Center in California and the scientific cofounder of Sana Biotechnology, the company that developed this treatment.The edited cells were then implanted into the forearm muscle of the patient, and after 12 weeks, no signs of rejection were detected. (A subsequent report from Sana Biotechnology notes that the implanted cells were still evading the patient’s immune system after six months.)Tests run as part of the study recorded that the cells were functional: The implanted cells secreted insulin in response to glucose levels, representing a key step toward controlling diabetes without the need for insulin injections. Four adverse events were recorded during follow-ups with the patient, but none of them were serious or directly linked to the modified cells.The researchers’ ultimate goal is to apply immune-camouflaging gene edits to stem cells—which have the ability to reproduce and differentiate themselves into other cell types inside the body—and then to direct their development into insulin-secreting islet cells. “The advantage of engineering hypoimmune stem cells is that when these stem cells proliferate and create new cells, the new cells are also hypoimmune,” Schrepfer explained in a Cedars-Sinai Q+A earlier this year.Traditionally, transplanting foreign cells into a patient has required suppressing the patient’s immune system to avoid them being rejected. This carries significant risks: infections, toxicity, and long-term complications. “Seeing patients die from rejection or severe complications from immunosuppression was frustrating to me, and I decided to focus my career on developing strategies to overcome immune rejection without immunosuppressive drugs,” Schrepfer told Cedars-Sinai.Although the research marks a milestone in the search for treatments of type 1 diabetes, it’s important to note that the study involved one one participant, who received a low dose of cells for a short period—not enough for the patient to no longer need to control their blood sugar with injected insulin. An editorial by the journal Nature also says that some independent research groups have failed in their efforts to confirm that Sana’s method provides edited cells with the ability to evade the immune system.Sana will be looking to conduct more clinical trials starting next year. Without overlooking the criticisms and limitations of the current study, the possibility of transplanting cells modified to be invisible to the immune system opens up a very promising horizon in regenerative medicine.This story originally appeared on WIRED en Español and has been translated from Spanish.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[An Engineering History of the Manhattan Project]]></title>
            <link>https://www.construction-physics.com/p/an-engineering-history-of-the-manhattan</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45211127</guid>
            <description><![CDATA[The Manhattan Project, the US program to build an atomic bomb during WWII, is one of the most famous and widely known major government projects: a survey in 1999 ranked the dropping of the atomic bomb as the top news story of the 20th century. Virtually everyone knows that the project built the bombs that were dropped on Hiroshima and Nagasaki. And most of us probably know that the bomb was built by some of the world’s best physicists, working under Robert Oppenheimer at Los Alamos in New Mexico. But the Manhattan Project was far more than just a science project: building the bombs required an enormous industrial effort of unprecedented scale and complexity. Enormous factory complexes were built using hundreds of millions of dollars worth of never-before-constructed equipment. Scores of new machines, analytical techniques, and methods of working with completely novel substances had to be invented. Materials which had never been produced at all, or only produced in tiny amounts, suddenly had to be manufactured in vast quantities.]]></description>
            <content:encoded><![CDATA[The Manhattan Project, the US program to build an atomic bomb during WWII, is one of the most famous and widely known major government projects: a survey in 1999 ranked the dropping of the atomic bomb as the top news story of the 20th century. Virtually everyone knows that the project built the bombs that were dropped on Hiroshima and Nagasaki. And most of us probably know that the bomb was built by some of the world’s best physicists, working under Robert Oppenheimer at Los Alamos in New Mexico. But the Manhattan Project was far more than just a science project: building the bombs required an enormous industrial effort of unprecedented scale and complexity. Enormous factory complexes were built using hundreds of millions of dollars worth of never-before-constructed equipment. Scores of new machines, analytical techniques, and methods of working with completely novel substances had to be invented. Materials which had never been produced at all, or only produced in tiny amounts, suddenly had to be manufactured in vast quantities.This massive effort was required in part because of the enormous difficulty in producing fissile material, and in part because of the enormous uncertainty facing the project: it wasn’t known what the best method for manufacturing the fissile material needed for the bomb would be, what the design of the bomb should be, or whether a workable bomb could even be built. Developing the bomb required resolving this uncertainty, and the project needed to rapidly push forward knowledge and capabilities in many fields: not merely in the realm of nuclear chain reactions and atomic physics, but also in areas like precision explosives, metallurgy, welding, chemical separation, and electronics.Because of the exigencies of war, this work needed to be done extremely rapidly. There wasn’t time to investigate promising approaches sequentially, or wait for more information before picking a particular course. Thus, multiple possible routes to the bomb — different fuels (and different fuel production techniques), different bomb designs, different components like triggers and tampers — were pursued simultaneously. Major commitments, like factories that cost hundreds of millions of dollars, were made before it was known whether they would even be useful. Design work began on the bombs when the nuclear fuel they would use hadn’t been produced in more than microscopic amounts.Normally when trying to create a new technology, funding constraints and the need for economic returns determine how much time and effort can be spent on development. Efforts to create some new technology will often be small-scale until the surrounding conditions are right — until knowledge has caught up, or the necessary supporting infrastructure exists, or the input materials are cheap enough — and risk can be minimized. But with the Manhattan Project, these constraints didn’t exist. Funding was virtually unlimited in service of ending the war sooner, and the biggest perceived risk was that Germany would beat the US to the bomb. As a result, an extremely robust development effort could be justified, which thoroughly explored virtually every promising path to an atomic weapon (no matter how expensive or uncertain).The Manhattan Project began in June of 1942, when Colonel James Marshall of the Army Corps of Engineers was directed to create a new engineering district to lead the army’s efforts to develop an atomic weapon. Shortly after, Colonel Leslie Groves (who would soon be promoted to brigadier general) was selected to lead the project. At the time, the official name of the project was “Laboratory for the Development of Substitute Materials” (DSM for short), but Groves felt that this name would attract curiosity, and so a new name was selected based on the location of Marshall’s New York office: the Manhattan Engineer District.By the time the Manhattan Project officially formed, the US was already at work developing an atomic bomb. Following the discovery of fission in 1938 by Otto Hahn and Fritz Strassmann, physicists began to speculate that a nuclear chain reaction might be possible, and that such a reaction could be used to build a bomb of unprecedented magnitude. In August the following year, Albert Einstein and physicist Leo Szilard sent a letter to president Roosevelt, warning him that a nuclear chain reaction might be used to build an extremely powerful bomb, and that the US should research atomic energy. Two months later, Roosevelt ordered the creation of an advisory committee on uranium, and by early 1940 US researchers (most notably Enrico Fermi) were working to create a sustained nuclear chain reaction.In July of 1941, a report from the British MAUD Committee concluded that it was likely feasible to build an atomic bomb. It reached the US, and in October Roosevelt authorized expediting atomic bomb work. Bomb efforts accelerated following Japan’s attack on Pearl Harbor in December of 1941, and in February of 1942 the Metallurgical Laboratory was formed at the University of Chicago to study nuclear chain reactions and the chemistry of newly-created element plutonium. There, a team working under Enrico Fermi continued their work to create nuclear chain reactions, ultimately resulting in Chicago Pile-1, the world’s first self-sustaining nuclear reaction, in December of that year.Early test pile at University of Chicago, 1942, via Wikipedia.When the Manhattan Engineering District was formed in 1942, there was still a great deal of uncertainty surrounding the construction of an atomic bomb. Based on what was known at the time, it was believed that a bomb was probably feasible, and that due to the risks of Germany developing one it should be pursued. But it was far from clear what the surest path to success was.The first major challenge came in producing sufficient fissile material to build a bomb. Fissile material splits and releases neutrons when struck by slow, “thermal” neutrons, making a nuclear chain reaction possible. At the time there were two major candidate materials: a rare isotope of uranium known as uranium-235 (U235), and plutonium, an element first synthesized by Glenn Seaborg in late 1940.1Using either would be very challenging. U235 makes up less than 1% of naturally-occurring uranium, and using it as a bomb material required separating it from the far more common U238. But the two isotopes were only distinguished by a tiny difference in their weights (U235 weighs about 1.3% less than U238). Some sort of filtering mechanism was needed that could act on this difference and create concentrations of U235 high enough for a bomb (a process known as enrichment).There were several potential methods considered for separating U235:In the electromagnetic method, a beam of charged uranium tetrachloride particles would be fired through a magnetic field, which would alter their paths. Because of the difference in weight, the paths of U235 and U238 would be slightly different, and the U235 could be gathered at an appropriately placed collector.In the gaseous diffusion method, gaseous uranium hexafluoride would diffuse through a barrier with microscopic pores. The lighter U235 would diffuse more readily through the barrier due to Graham’s Law.In the liquid thermal diffusion method, a thermal gradient created in a uranium solution would cause a slight migration of heavier U238 to the cold side and the lighter U235 to the warm side.In the centrifuge method, uranium spun in a high-speed centrifuge would cause the heavier U238 to concentrate on the outer edge.Of these methods, the electromagnetic method was the most developed, thanks to the efforts of Ernest Lawrence at the University of California, but it wasn’t clear if any of them (either alone or in combination) could actually produce U235 at the scale and speed needed. And no matter the method selected, an enormous industrial facility would be required: in 1939 Danish physicist Niels Bohr insisted that an atomic bomb could never be built “unless you turned the US into one huge factory.”The main alternative to U235 was plutonium. As with U235, the main challenge would be collecting enough of it to build a bomb. Plutonium only occurs in trace amounts in nature (1 atom per 100 billion in uranium ore): collecting enough to build a bomb requires synthesizing it. Plutonium could be produced in a nuclear reactor (then called a “pile,” as it was essentially chunks of uranium piled high enough to create a self-sustaining nuclear reaction), but only in microscopic amounts. Producing a pound of plutonium required around 4000 pounds of uranium fuel, and producing enough for a bomb would require an enormous industrial facility, as with U235. Exacerbating this difficulty was the fact that while U235 and U238 could be handled comparatively easily, plutonium and other nuclear reactor byproducts were highly radioactive, requiring special handling.Once enough fissile material had been collected, it then needed to be turned into a bomb. When enough fissile material is brought together in a small enough volume (the so-called critical mass), it can start a nuclear chain reaction, releasing enormous amounts of energy as more and more fissions were triggered. Because a chain reaction in critical mass could be started by spontaneous fission (fissile elements randomly splitting and releasing neutrons) or by cosmic rays, a bomb would have to start with a sub-critical mass of fissile material, turning it into a critical mass at detonation. The most straightforward way to do this, it was thought, was to use a gun that would fire a sub-critical “bullet” into another sub-critical “target,” the combination of which would exceed the critical mass. But there were other mechanisms considered, including using an explosion to compress a sphere of fissile material (the so-called implosion method), as well as “autocatalytic” mechanisms in which “the chain reaction itself, as it proceeded, increased the neutron number for a time.”In mid-1942, a gun-based plutonium bomb was generally considered most promising, but due to the lack of information and the great urgency, many promising paths were investigated simultaneously. Early on in the project, when resolving a debate about pile cooling systems, Leslie Groves stated that “The War Department considers this project important. There is no objection to a wrong decision with quick results. If there is a choice between two methods, one of which is good and the other looks promising, then build both.”Perhaps no phrase better summarizes the philosophy of Manhattan Project than “build both.” It was ultimately decided to pursue both U235 and plutonium-based bombs. To produce the necessary U235, a production facility would be built near Knoxville, Tennessee, employing both electromagnetic separation and gaseous diffusion (and, eventually, liquid thermal diffusion). This plant, initially referred to as the Clinton Engineer Works, would later be named Oak Ridge. To produce the plutonium, another facility, the Hanford Engineer Works, would be built in southeast Washington. And while these plants were being built and producing fissile material, the design of the bombs themselves would be done at Los Alamos, New Mexico.The acquisition of the site for Oak Ridge was authorized in September of 1942, and construction of the electromagnetic separation plant began a few months later in February of 1943 by the firm Stone and Webster. To produce U235, the plant would use modified versions of Ernest Lawrence’s Nobel prize-winning cyclotron particle accelerators. Lawrence had been working on the devices, which he referred to as “calutrons” (after the University of California) since the spring of 1942, and while he confident that calutrons could be used for large-scale production of U235, “he stood almost alone in his optimism”:The method called for a large number of extremely complicated, and as yet undesigned and undeveloped devices involving high vacuums, high voltages and intense magnetic fields. As a large-scale method of separating Uranium-235, it seemed almost impossible. Dr. George T. Felbeck, who was in charge of the gaseous diffusion process for Union Carbide, once said it was like trying to find needles in a haystack while wearing boxing gloves. - Now It Can Be Told(According to Richard Rhodes, the total volume of high-vacuum required by the calutrons would eventually exceed the amount of vacuum produced everywhere else on earth at the time.)The calutrons, arranged around a series of several “racetracks” with several dozen collection tanks attached, were divided into two stages. Partly enriched material from “alpha” racetracks would be fed into “beta” racetracks to be further enriched, eventually (it was hoped) producing 90% enriched U235. Each calutron only produced a tiny amount of U235 — Lawrence estimated that 2000 calutrons could produce 100 grams of enriched U235 per day — so a huge number of them were needed: the alpha and beta calutron buildings eventually occupied an area greater than 20 football fields, and the entire electromagnetic separation facility grew to 268 buildings, requiring 20,000 workers to build:…The calutron structures of steel and brick and tile, chemistry laboratories, a distilled water plant, sewage treatment plants, pump houses, a shop, a service station, warehouses, cafeterias, gatehouses, change houses and locker rooms, a paymaster’s office, a foundry, a generator building, eight electric substations, nineteen water-cooling towers - for an output measured in the best of times in grams per day. - The Making of the Atomic BombBuilding this enormous facility was rife with challenges. Copper, traditionally used for winding electromagnets, was in short supply due to the war, and so was substituted with silver (also a good conductor) borrowed from the US Treasury. Altogether 13,540 tons, worth $300 million ($6 billion in 2025 dollars) was borrowed, 99.964% of which was eventually returned. Because construction started so early, constant changes to already manufactured and installed equipment were required, a process that continued “long after the first major units of the plant began production operations.” Little of what was required to build the plant was off the shelf or standard:Discouragingly few items were commercially available. Tanks, magnets, vacuum pumps, cubicles, and most of the chemical equipment, for example, were either completely new in design or so much larger or so much greater in capacity that nothing of the kind previously had been manufactured. Many less obvious items also carried performance specifications that far exceeded anything ever attempted on a commercial scale. For instance, the calutrons required electrical cable that could carry a high-voltage load continuously. The only commercial product that came near meeting this specification was the heaviest X-ray cable, and it was designed to operate intermittently. Even when the commercial equipment could be used, suppliers often had to add to their productive capacity or build entire new plants to furnish the items required in the enormous quantities they were needed. Thus, in the first equipping of the racetracks some eighty-five thousand vacuum tubes were required. In the case of one type of tube, procurement officials ordered in advance the entire national output for 1943 as well as that from a plant still under construction. In the early months of plant operation, when tubes burned out faster than predicted, some feared the racetracks might prove inoperable simply through inability to maintain the tube supply.New methods had to be developed for machining and shaping the graphite in those parts of the calutron subject to intense heat. No standard material would endure the high potentials, mechanical strain, and temperature changes to which bushings in the high-voltage elements in the sources were continuously subjected. After months of investigation, Stone and Webster found an insulator made of zirconium oxide, a new and still very expensive substance. Similarly, use of large quantities of liquid nitrogen to condense moisture created a demand for a substance hitherto not produced on a commercial scale anywhere in the country. - Manhattan: The Army and the BombThese difficulties didn’t stop after construction was completed. When the first calutrons were turned on for testing in November of 1943, the extremely powerful magnets caused the equipment to “walk” by several inches: this was eventually resolved by tying them down with heavy steel straps. Testing also showed intermittent electrical shorts and unexpectedly high variation in the strength of the magnetic fields, problems that was eventually traced to dirt and rust within the electromagnets bridging the gap between the closely spaced silver windings. To fix this required rebuilding and redesigning the magnets, delaying production by a month.Alpha racetrack at Oak Ridge.As production came online in early 1944, the electromagnetic separation plant continued to deal with numerous problems: equipment and mechanical failures, electrical short circuits, vacuum leaks and various breakdowns. The operation “skirted the edge of chaos for months.” As late as August of 1944, the electromagnetic plant had only produced a small fraction of the expected U235, and it was unclear if enough would be produced to build a wartime bomb. But eventually these problems were ironed out, and by September of 1945 the alpha and beta calutrons had produced 88 kilograms of 84.5% enriched U235.In addition to the electromagnetic separation plant, Oak Ridge was also the site of the gaseous diffusion plant, which began construction in May 1943. As with the electromagnetic process, the gaseous diffusion process only produced U235 in tiny amounts, and an enormous facility was needed to manufacture it in sufficient quantities to build a bomb. Gaseous diffusion worked on the principle that lighter U235 would be more likely to diffuse through a porous barrier than heavier U238, but the difference in diffusion rates was miniscule. A single gaseous diffusion step would only increase the fraction of U235 by a factor of 1.0043: to produce 90% enriched U235, the initial design of the plant called for a series of 4,600 gaseous diffusion stages. Upon completion, the gaseous diffusion plant was one of the largest buildings in the world.K-25 gaseous diffusion plant.As with the electromagnetic plant, construction began before the design of the diffusion process had been finished, and it was unclear if the plant would work at scale. The greatest challenge was finding an appropriate barrier for the gas to diffuse through. The barrier needed to have numerous microscopic pores, be robust enough to withstand exposure to extremely corrosive uranium hexafluoride gas, and be mass-producible. Researchers had experimented with “a great many materials” between 1941 and 1942, but none were suitable. The only common material sufficiently corrosion-resistant was nickel, but no form of nickel seemed to do the trick. An electro-deposited nickel mesh, invented by Edward Norris (a “self-educated Anglo-American interior decorator”) and Edward Adler appeared most promising, but it was so brittle that manufacturing it was incredibly difficult. A modified version of the Norris-Adler barrier, produced by a team from Kellex, Bell Labs, and Bakelite, appeared to work even better, though it too had problems. Work proceeded to further develop both barriers simultaneously, but progress was slow and by the end of 1943 “morale had plummeted”. It wasn’t until early 1944 that satisfactory barriers were being produced in sufficient quantities.While the diffusion barrier was the biggest challenge with the gaseous diffusion process, it wasn’t the only one. The plant required a level of vacuum-tightness that had previously only been achieved in labs, demanding the development of novel methods of pipe welding and leak detection. Upon completion, it took 406 workers eight months to test the plant for leaks. More than 130,000 measuring instruments, many of them novel, were installed in the plant. It was likely the greatest number of instruments ever used in any plant in the world till that date, and they required months of testing and calibration. The plant had to be incredibly reliable, as “even slight variations in such factors as temperature and pressure could produce adverse effects.” Initially, it was believed that a slight power interruption could bring the diffusion plant offline for months, so a dedicated power plant was built specifically at Oak Ridge for the process. And because any contaminants could prove disastrous, the cleanliness standards for the plant approached surgical:…Construction workers had to cleanse all pipes, valves, pumps, converters, and other items of equipment thoroughly before installation. Workmen in a special unit performed this vast operation in the large conditioning building, using equipment for solvent degreasing, alkaline cleaning, acid pickling, scratch brushing, surface passivation, and a variety of other procedures. When they finished, they sealed all openings to interior surfaces and kept them sealed until installation teams put the equipment into place.To make certain no dust or other foreign matter polluted the system during installation, J. A. Jones instituted a rigid schedule of surgical cleanliness in installation areas. Isolating these areas with temporary partitions, the workers installed pressure ventilation, using filtered air. Then they cleaned the areas thoroughly, and inspectors carefully checked all personnel and material that entered them. Maintenance crews with mops and vacuum cleaners continued to remove any foreign substances that seeped in. When trucks had to enter, workers hosed them down at the entrances.Workers wore special clothes and lintless gloves. Because certain work on equipment to be used in plant installations could not be done in the dirt-free areas, such as welding pipes and other small jobs, J.A. Jones installed special inflatable canvas balloons and the work was done inside them. The cleanliness control measures required many additional guards, inspectors, and supervisors… - Manhattan: The Army and the BombThis level of cleanliness extended to the design of the equipment itself:[Uranium hexafluoride] attacked organic materials ferociously: not a speck of grease could be allowed to ooze into the gas stream anywhere along the miles and miles of pipes and pumps and barriers. Pump seals therefore had to be devised that were both gastight and greaseless, a puzzle no one had ever solved before that required the development of new kinds of plastics. (The seal material that eventually served at Oak Ridge came into its own after the war under the brand name Teflon.) A single pinhole leak anywhere in the miles of pipes would confound the entire system; Alfred O. Nier developed portable mass spectrometers to serve as subtle leak detectors. Since pipes of solid nickel would exhaust the entire U.S. production of that valuable resource, Groves found a company willing to nickel-plate all the pipe interiors, a difficult new process accomplished by filling the pipes themselves with plating solution and rotating them as the plating current did its work. - The Making of the Atomic BombBecause of these difficulties, the gaseous diffusion plant didn’t begin operating until February of 1945. While the plant was originally planned to produce uranium to the roughly 90% U235 enrichment needed to build a bomb, it was discovered that beyond 36.6% enrichment, different types of barrier and different types of pumps being designed would be required. In the latter half of 1943 the plant was thus redesigned to produce 36.6% enriched uranium (using 2892 diffusion stages) that would then be fed into the electromagnetic process. By the end of the war, the gaseous diffusion plant had “contributed substantially to the manufacture of the fissionable material used in the fabrication of atomic weapons”, and would become the primary method of producing enriched uranium in the early post-war years.In addition to the electromagnetic and gaseous diffusion separation processes, a plant to separate U235 by liquid thermal diffusion was also built. Thermal diffusion had been considered by the Manhattan Project early on, but it appeared insufficiently promising and there were no initial plans to build a thermal diffusion plant. However, work on the process continued by the Navy as a method of producing fissile material for nuclear reactors. By late 1942, it appeared much more promising as a feasible separation method, and Leslie Groves recommended that it continue to be developed by the Navy. Eventually, in June of 1944 it was decided to build a thermal diffusion plant at Oak Ridge to produce partially-enriched uranium as an input to the electromagnetic separation process, as doing so would speed up overall U235 production. The plant came online in late 1944.Like the other separation plants, there were struggles getting the plant built and operational. Early on there were numerous steam leaks and other equipment failures, and the “results scarcely seemed to justify the risks.” But eventually the plant “served its wartime purpose,” providing enough slightly enriched U235 to the electromagnetic separation plant and (later) the gaseous diffusion plant to build a uranium bomb by July 1945. After the war, however, it was found that the thermal diffusion plant was less economical than gaseous diffusion in producing enriched uranium, and it was shut down in September 1945, less than a year after starting operation.As with U235, when plutonium was being considered as a possible fissile material for an atomic bomb there was a great deal of uncertainty around its large-scale production. When plans began to be formulated for plutonium manufacture in late 1942, the element had only been produced in microscopic amounts in cyclotrons — as late as December 1943, only two milligrams of plutonium had been manufactured. Producing the pounds of plutonium needed for a bomb would require a self-sustaining nuclear chain reaction in a nuclear reactor, which would create plutonium as a fission byproduct. The first such chain reaction was created in Chicago Pile-1 in December 1942, shortly after Du Pont had been (reluctantly) brought on as the contractor to build and operate a plutonium production plant.As with uranium separation, there were a variety of potential ways to build a plutonium-producing nuclear reactor. Every design considered used uranium as a fuel, but there were a variety of options for cooling (water, helium, diphenyl, bismuth) and for moderators to slow down the neutrons (heavy water, graphite).2 The initial reactor design used helium-cooling with a graphite moderator: helium wouldn’t absorb neutrons, and was an inert gas that wouldn’t corrode any of the reactor materials. But it was later shown that the neutron multiplication factor in a reactor, k, was high enough that coolants which absorbed more neutrons (such as water) could be made to work. Because a water-cooled reactor appeared far simpler to build, the design was changed to use water cooling. Du Pont, worried that pursuing a single reactor design was too risky, also continued to develop other designs, chiefly one moderated and cooled by heavy water, and several heavy water plants were built around the country for these purposes.Plutonium production began with a smaller-scale, air-cooled test reactor, named X-10, built at Oak Ridge between February 1943 and January 1944. Full-scale production would take place at a remote facility built in southeastern Washington known as the Hanford Engineer Works. The first plutonium production reactor, B Reactor, began construction at Hanford in August of 1943, and first achieved criticality in September of the following year.Like with uranium, plutonium production demanded a massive industrial facility, and Hanford was the biggest facility that Du Pont had ever constructed. An oral history of the Hanford site notes that “the building effort at Hanford from 1943 to 1945 can only be measured in superlatives”:Consider the following: Project building crews used 1800 vehicles, including sedans, pick-up trucks, jeeps, and ambulances; 900 buses that had a total seating capacity of over 30,000; 1900 dump trucks and flat bed trucks; 240 tractor trailers; 44 railway locomotives and 460 railway cars; 5 locomotive cranes and 4 stiff leg derricks. The various construction teams built 386 miles of highways, 158 miles of track, poured 780,000 cubic yards of concrete, and erected housing for 5,000 women and 24,000 men. Excavation crews moved 25 million cubic yards of earth in the process. The overall cost was $350 million. - Working on the BombThe three production reactors built at Hanford (B, D, and F Reactors) were far more powerful than anything that had come before. Fermi’s Chicago Pile-1 produced a maximum of 0.2 kilowatts of power. The X-10 reactor at Oak Ridge produced just 500 kilowatts when it was first turned on (though output would later be raised to 4,000 kilowatts). The Hanford reactors were designed to produce 250,000 kilowatts.But the largest structures at Hanford were the separation facilities to extract plutonium out of the soup of radioactive waste products the reactors generated: these were three 800 foot long, 8-story tall buildings that resembled “an ancient mausoleum”; they were so large they were referred to as “Queen Marys.” Within these enormous structures, plutonium was extracted from radioactive “slugs” of spent uranium fuel from the reactors:Irradiated slugs ejected from a production pile would be stored in pools of water 16.5 feet deep to remain until the most intense and therefore short-lived of their fission-product radioactivities decayed away, the water glowing blue around them with Cerenkov radiation, a sort of charged-particle sonic boom. The slugs would then move in shielded casks on special railroad cars to one of the Queen Marys, where they would first be dissolved in hot nitric acid. A standard equipment group occupied two cells: a centrifuge, a catch tank, a precipitator and a solution tank, all made of specially fabricated corrosion-resistant stainless steel. The liquid solution that the slugs had become would move through these units by steam-jet syphoning, a low-maintenance substitute for pumps. There were three necessary steps to the separation process: solution, precipitation and centrifugal removal of the precipitate. These would repeat from equipment group to equipment group down the canyon of the separation building. The end products would be radioactive wastes, stored on site in underground tanks, and small quantities of highly purified plutonium nitrate. - The Making of the Atomic BombAs at Oak Ridge, there were numerous challenges in building a mammoth industrial facility employing completely novel production processes. The reactors “presented construction problems never encountered before, even by Du Pont's highly competent field forces.” Graphite bars of exceptional purity had to be fabricated and then machined to remove any sort of surface imperfections. Supplying cooling water for the reactors required “installation of a complex system of river pumps; purification, aeration, and distillation units; and retention basins for holding radioactive water until natural decay permitted its return to the Columbia.” New machines for fabricating the uranium fuel rods had to be designed and built, and a method for shielding the unprecedentedly large nuclear reactors had to be developed:Ten months of work went into this before we could even begin to build it, with three more months before the first unit was completed…In the course of this, a special high-density pressed-wood sheet was developed in collaboration with an outside supplier. Then special sharp tools and operating techniques were required to cut various shapes from the standard manufactured widths…At the same time very detailed specifications for assembly, prescribing the closest of tolerances, were written. Some sixty manufacturers were invited to bid and refused, presumably because of the complexity of construction and the close tolerances required…but after methods were developed and prototypes were fabricated at du Pont’s shops in Wilmington eventually satisfactory suppliers were found. - Now It Can Be ToldEven seemingly simple items often proved enormously complex. Finding a way to prevent the uranium fuel (which was packaged into aluminum-clad slugs) from corroding took an enormous amount of effort:Two years of trial-and-error effort had not produced canning technology adequate to seal the uranium slugs, which quickly oxidized upon exposure to air or water, away from corrosion. Only in August had the crucial step been devised, by a young research chemist who had followed the problem from Du Pont in Wilmington to Chicago and then to Hanford: putting aside elaborate dips and baths he tried soaking the bare slugs in molten solder, lowering the aluminum cans into the solder with tongs and canning the slugs submerged. The melting point of the aluminum was not much higher than the melting point of the solder, but with careful temperature control the canning technique worked. - The Making of the Atomic BombSimilarly, Leslie Groves notes that “seven months of persistent effort” were required to produce simple aluminum tubes that met the required specifications.After enough plutonium had collected in the canned uranium slugs, it needed to be separated. The chemical process for this was comparatively straightforward to develop compared to the novel methods of mass-based separation developed for U235 (after experimenting with several possibilities, a method based on using bismuth phosphate was employed), but actually implementing it was a challenge. The materials to be processed were radioactive enough that the entire facility needed to be operable and maintainable remotely:…Periscopes and other special mechanisms were incorporated into the plant design; all operations could thus be carried out in complete safety from behind the heavy concrete walls. The need for shielding and the possibility of having to replace parts by indirect means required unusually close tolerances, both in fabrication and in installation. This was true even for such items as the special railroad cars that moved the irradiated uranium between the piles and the separation plants. The tracks over which these cars moved were built with extreme care so as to minimize the chances of an accident. Under no circumstances could we plan on human beings directly repairing highly radioactive equipment. - Now It Can Be ToldAmong the technologies developed to make remote operation possible were pipe flanges that could be connected by a remotely operated wrench, and the world’s first use of closed circuit TV.The biggest crisis at Hanford came shortly after the first production reactor came online: a few hours after beginning operation the reaction began to slow, and within a few days it had shut itself down completely. Investigation revealed that this was being caused by a fission byproduct, an isotope of xenon known as Xenon 135 that had a massively greater probability of absorbing neutrons (known as a “neutron cross section”) than any previously discovered material. (Its cross section was 70 times larger than the previous largest measured cross section). This “xenon poisoning” hadn’t been noticed in earlier reactors because they hadn’t been run for long enough at a high enough power output.The problem was ultimately resolved thanks to the conservative reactor design of the Du Pont engineers. The original Hanford reactor, designed chiefly by physicist Eugene Wigner, consisted of 1,500 “channels” for uranium fuel arranged in a cylindrical shape. Du Pont had squared this cylinder, adding more channels to the edges and bringing the total to 2004. When fuel was loaded into these extra channels, it was sufficient to overcome the xenon poisoning effect.The xenon poisoning problem was overcome in December 1944, and by March 1945 the Hanford site had achieved full-scale plutonium production of around a pound and a half of plutonium per day.As design and construction of the huge facilities at Hanford and Oak Ridge began, work also proceeded on designing the bomb itself. This would chiefly be done at Los Alamos, New Mexico, the third of the atomic cities built for the Manhattan Project. Scientists led by Robert Oppenheimer began to arrive at Los Alamos in March of 1943 (though most of the facility was still under construction).When work began at Los Alamos, the most promising method for building a bomb appeared to be the gun method: firing a sub-critical uranium or plutonium bullet into another sub-critical mass. But there were a variety of ways this might be done. Different gun arrangements, ranging from somewhat conventional gun mechanisms of various sizes and shapes to more exotic layouts like double-guns, rockets, and spherical guns were considered. As with the rest of the program, every design choice was mired in uncertainty. Since plutonium and U235 hadn’t yet been produced in large quantities, it wasn’t known exactly how much fissile material would be needed to create a critical mass, and thus how big the bullet and target needed to be. The neutron-reflecting properties of steel gun barrels (which would affect critical mass requirements) hadn’t yet been measured.More generally, while the designers were reasonably confident that a gun-type bomb would work, because various nuclear properties and constants had at best been measured very imprecisely (if they’d been measured at all), they couldn’t be sure. A history of Los Alamos notes that in 1942, “the main obstacle to a theoretical understanding of the fission bomb was the uncertainty surrounding existing experimental data, in part the result of inadequate instrumentation and a lack of experience in the new field.” Things were so uncertain that it was not even 100% clear at the beginning of the program that plutonium would produce neutrons. A great deal of effort at Los Alamos was thus devoted to more accurate measurements and better understanding of nuclear physics: the neutron cross sections of various materials, the number of neutrons produced per fission, rates of spontaneous fission, and so on. These measurements were “constantly in flux” for much of the project, and the Los Alamos scientists were “plagued by worry about some unpredicted or overlooked mechanism of nuclear physics which might render our program unsound.”Thus in 1943, while most design efforts were directed to developing a gun-type assembly for both uranium and plutonium, there were also parallel efforts on other types of bomb. Chief among these was the implosion method, which would use an explosion to compress a sphere of material enough to create a critical mass, though there were also investigations into the autocatalytic methods. Work also proceeded on what was referred to as the Super (better known today as the hydrogen bomb): using a fission explosion to trigger an even more destructive fusion explosion.Beyond the mechanism for creating the critical mass, there were many other aspects of the bomb that needed to be figured out. To minimize the amount of fissile material needed to create a critical mass, the core needed to be surrounded by some type of material that would reflect neutrons back into the core and prevent them from escaping, but what material would work best and how it should be arranged wasn’t yet known. To ensure that the bomb detonated at the right time, it would also need some type of initiator: a mechanism that, when triggered, would create a sudden burst of neutrons to start the nuclear chain reaction.More generally, everything about the atomic bomb was new, and almost nothing about its various aspects was known or could be assumed. Every step involved from taking the fissile material from Oak Ridge and Hanford and turning it into a bomb had to be worked out for the first time.Fissile material would arrive from Hanford and Oak Ridge not as pure plutonium or uranium but as compounds — plutonium nitrate and uranium tetrafluoride, respectively — and methods for turning these into metallic plutonium and uranium needed to be created. Because impurities might affect the functioning of the bomb, purification methods also needed to be developed. It was initially believed that the plutonium in particular would need to be exceptionally pure, with no more than one part per hundred billion of light elements. Preventing contamination required, among other things, reagents that were “unbelievably purified,” electronic air cleaners, and an extensive lab-cleaning procedure performed by a dedicated service team. Creating effective plutonium purification methods took roughly a year, in part because initially only microscopic quantities of plutonium were available for experiments. Because purification required the ability to detect extremely small quantities of impurities, novel methods of “sub-micro” chemical analysis had to be developed.Once metallic plutonium and uranium had been produced, methods for shaping the material — casting, rolling, pressing — also needed to be created. The need for purity, combined with the extreme reactivity of molten uranium and plutonium, meant that new crucible materials were needed: MIT spent an enormous amount of “time, effort, and expense” to develop a cerium sulfide crucible that could withstand plutonium's extreme reactivity and high expected melting point without introducing impurities.Shaping metallic plutonium — never before produced — required understanding its material properties, which were found to be extremely strange: plutonium has been dubbed “the most complicated metal known to man.” Researchers discovered that plutonium had six different allotropes (physical arrangement of atoms), more than any other metal. Plutonium’s complexity made basic facts such as its melting point surprisingly difficult to determine, and the exotic cerium sulfide crucibles proved to be unnecessary when an unexpectedly low melting point was found. Most of what’s known about plutonium metallurgy was initially worked out at Los Alamos during the Manhattan Project.In addition to uranium and plutonium, novel methods and processes had to be developed for a variety of other materials. Polonium, used in the initiator, needed to be procured in large quantities, extensively purified, and deposited on metallic foils. The investigation into polonium’s material properties has been described as “novel as that of plutonium.” Fabrication techniques were also developed for other materials with useful nuclear properties, such as Boron 10 (an isotope of boron with a large neutron cross section) and beryllium.While a great deal was known about the mechanics of guns and projectiles at the beginning of the project, nothing like a gun needed to fire a sub-critical nuclear bullet had ever been built. The bullet needed to be fired as fast as possible to avoid the problem of predetonation — spontaneous fission starting a chain reaction before the pieces had been joined, leading to a “fizzle” — but the target also needed to stay roughly intact after the projectile’s impact. The gun also needed to be light and small enough that the resulting bomb wouldn’t be too heavy to carry, a requirement that was greatly aided by the realization that the gun would only need to fire once, and could be much less robust than conventional guns. A great deal of calculation and testing on guns of various calibers, propellants, and geometries of targets and bullets was required.But novel as it was, this work on gun development was far more straightforward than what was required for the implosion bomb. Virtually nothing was known about the behavior of materials when imploded, or how to create an explosion that would compress a sphere of material symmetrically. Resolving this lack of knowledge began simply — setting off explosives on the outside of pipes and seeing how they deformed — but quickly ramped up in complexity. A variety of methods and instruments had to be created to study the interior of materials as they were being imploded. Some of these, such as using X-rays and high-speed cameras, were adaptations of existing measurement techniques, pushed to much higher levels of performance: getting high-speed cameras to work, for instance, required months of experiments with multiple camera designs to create one that was fast enough.Other implosion analysis methods, such as the “RaLa” method, were far more novel. The RaLa method involved placing an isotope of radioactive lanthanum (hence RaLa), an emitter of gamma rays, at the center of the material to be imploded. When the material began to compress, it would become denser, resulting in fewer gamma rays penetrating. By surrounding the implosion with gamma ray detectors, a detailed progression of the geometric changes in the imploded material could be recorded.While the RaLa method was a valuable source of implosion information, implementing it was fiendishly complicated. Even gathering and manipulating the lanthanum was difficult due to its intense radioactivity. Lanthanum was shipped from Oak Ridge in special lead-lined trucks, which were driven 24 hours a day. The assembled material reached 100 curies of radioactivity at a time when most radioactive experiments didn't exceed a fraction of a curie: a Los Alamos chemist noted that “no one ever worked with radiation levels like these before, ever, anywhere in the world.” Using RaLa required things like a “mechanical chemist” to remotely manipulate the radioactive material, and, initially, a mobile laboratory built inside repurposed M4 tanks.It was initially hoped that a symmetrical compression could be created simply by adding enough explosive detonation points around the spherical bomb core, but RaLa and other measurement methods revealed “jets” of core material shooting ahead of the rest of the collapsing mass. Dealing with the jets and other asymmetries, and creating a symmetrical collapse of the bomb core, would be one of the main difficulties of the implosion bomb program.New analytic techniques and devices weren’t limited to measuring implosions. New devices were made for, among other things, counting neutrons, collecting electrons, discriminating between different electronic pulses, and measuring projectiles with microwaves. Over a thousand pieces of electronic equipment were built at Los Alamos, many of them novel or higher performance than any other equipment then available, including better amplifiers, oscilloscopes, and counting circuits.As with Oak Ridge and Hanford, even seemingly straightforward project elements were often enormously complex development efforts due to the novel requirements of the bomb. The triggering mechanism, for instance, couldn’t rely on off the shelf components, as they were considered insufficiently reliable: even a 1% chance of failure was far too high for a bomb in which hundreds of millions of dollars had been invested (the acceptable failure rate was eventually decided to be 0.01%). And when dropped, the bomb needed to automatically trigger at a specific elevation, a capability which didn’t yet exist. After a great deal of testing and development, a trigger circuit using radar altimeters, barometric switches, and electronic clocks was eventually created.All this development work took place in largely the same form as the rest of the project: for nearly every decision or device, multiple promising paths were investigated, often at great expense, in the hopes that one or more could be made to work. This often led to a cascade of branching investigations, where each path branched into several possible paths, each of which might branch into more possible paths, and so on. The implosion method was just one of multiple bomb designs investigated, and within the implosion investigation RaLa was just one of multiple analytic techniques created to study implosions (a history of Los Alamos described the implosion studies as a “seven-pronged experimental program”). Bombs using both plutonium and U235 fuels were pursued, and for each material multiple methods of processing them were studied.Because so little was known, and progress needed to be made quickly, these investigations often relied on brute force empiricism: running dozens or hundreds of experiments while systematically varying different experimental parameters. Early implosion studies repeatedly tested pipes surrounded by explosives, systematically varying the size of pipes, explosive arrangement, and the type of explosive used. These systematic investigations continued when more advanced diagnostic methods became available: to determine implosion parameters like symmetry, collapse velocity, and amount of compression, an “exhaustive” test program was initiated, where “every possible parameter was varied”. Systematic trial-and-error testing was also used for the design of the gun, the projectiles, and the target.The strategy of investigating multiple promising paths proved its worth when the first shipments of reactor-produced plutonium began to arrive at Los Alamos from Oak Ridge in the spring of 1944. Prior to this Los Alamos had worked only with plutonium produced in cyclotrons, which consisted chiefly of the isotope Plutonium-239. However, reactor-produced plutonium was found to also have significant amounts of a different isotope, Plutonium-240. This isotope was found to undergo spontaneous fission much more readily than Plutonium-239 or U235. Its rate of spontaneous fission  — a million times higher that of U235 — was so high in fact that the presence of Plutonium-240 made a gun-type plutonium bomb infeasible: so many neutrons would be produced by spontaneous fission that a chain reaction would be triggered before the bullet met the target, blowing the bomb apart and creating a fizzle.The situation seemed dire. There was no time to design and build a separation plant to remove Plutonium-239 from Plutonium-240. To make use of the Hanford plutonium, the only options appeared to be build a composite bomb that mixed plutonium and uranium together (which would be low efficiency and have a comparatively small yield), or to use a different bomb mechanism capable of creating critical mass much more quickly than a gun could. That meant the implosion method, but in early 1944 work on the implosion bomb was far behind behind the gun bomb: until then the implosion bomb had been of secondary importance, a backup in case the gun didn’t work. It was still far from certain whether a workable implosion bomb could be built.In July 1944, Robert Oppenheimer ordered a halt on further work on the plutonium gun, and to step up efforts on a plutonium implosion bomb. Within two weeks Los Alamos had been completely reorganized to focus on solving the problems of the implosion bomb. Work on the various implosion analysis methods accelerated, and the first RaLa test was completed in late September. An extensive exploration of solutions to the problem of jets and asymmetrical compression was undertaken, and the development of plutonium purification and metal fabrication methods continued (made easier by the fact that an implosion bomb could tolerate a much higher level of plutonium impurities). By early 1945, aided by the discovery plutonium’s unexpectedly low melting point (which made finding a workable crucible much easier), plutonium was successfully being purified, reduced to a metal, and worked by various methods, shortly before the first “batch” (a mere 80 grams) of plutonium arrived from Hanford.The asymmetrical compression problem was eventually solved by the use of explosive lenses, and by changing from a hollow to a solid core of fissile material. Explosive lenses — shaped explosives that would focus the explosion and create a converging pressure wave — were first suggested by James Tuck, who arrived at Los Alamos in May 1944, but using them to build a bomb was fiercely difficult. No theory yet existed for analyzing and predicting the behavior of explosive lenses, and no methods existing for fabricating the carefully shaped explosives to the level of precision required. To design the lenses, there was no choice but to take an iterative approach: designers made guesses about effective lens shapes, tested them, and used the feedback to refine their designs.At the same time, methods had to be developed for casting and machining the explosives. This was both enormously difficult (since the explosives had to be extremely uniform and precisely shaped) and dangerous (since machining risked explosion). A history of Los Alamos describes the challenges of explosive casting:It was particularly difficult to cast the high explosives accurately and avoid cracks, bubbles, and other imperfections. Cooling cycles had to be long to minimize thermal stress cracks. Castings had to be wrapped in insulation before being transported between buildings…Casting technology developed slowly and painfully at Los Alamos, by a succession of reasonable steps, that consistently failed to give completely satisfactory results. Eventually, the problems were overcome… - Critical AssemblyMachining the explosives was similarly difficult. The jigs and fixtures required to hold the explosives required several months of development, and the explosive machining methods created were considered “revolutionary.”The work of figuring out casting and machining methods, and of creating workable lens shapes, demanded enormous amounts of explosives: over the course of the project James Tuck noted that “well over twenty thousand castings were delivered to the firing sites, while the number of castings rejected because of poor quality or destroyed for other reasons is several times this figure.” At the peak of the implosion program, Los Alamos was using 100,000 pounds of high explosive a month.Creating symmetrical compression in the bomb core also required very precise detonating of the explosives. Early tests were done using primacord detonators (a cord of high explosive surrounded by textiles), but these were found to be far too imprecise, and investigation into other types of detonators was pursued. After extensive experimentation, a spark gap switch (a sort of explosive spark plug) combined with an exploding bridgewire detonator was developed.Another major design problem on the implosion device was the initiator. The implosion bomb would require a new, more precise type of initiator than used on the gun bomb, one that would be triggered at the moment of highest compression in the bomb core. As late as early 1945, it wasn’t clear whether such an initiator could be built. But continued experiments and testing eventually resulted in what appeared to be a workable design. Named “the urchin,” it consisted of a beryllium sphere and pellet, with polonium between the two. When the core was compressed, the sphere would be crushed, mixing the beryllium and polonium and emitting neutrons.Until very late in the Manhattan Project, it remained unclear if a workable implosion bomb could be built. In the last weeks of 1944, James Conant, President of Harvard and chair of the National Research Defense Council which oversaw the Manhattan Project, stated that the “difficulties were still enormous” and “my own bets very much against it.” At that time, the problems of the modulated initiator and of sufficiently precise and accurate detonation still hadn’t been solved. But as the researchers continued to run down various problems over the following months, the outlook improved considerably. By April the head of the explosives division at Los Alamos could report that its major research and design gambles “had been won”, and there was growing confidence that a bomb of the design chosen — solid plutonium core, explosive lenses, with electric detonators and a modulated initiator — could be made to work. Development work was by no means complete, and there were many problems yet to be solved (design changes to the bomb continued to be made until a few days before the Trinity test on July 16 1945), but by spring of 1945 the “research” portion of research and development had largely concluded.As Los Alamos scrambled to build an effective implosion bomb, work also continued on the uranium gun weapon. Because the gun device was considered much less risky and much more certain to work, its development didn’t have the same fervor as the plutonium bomb. (In fact, cancelling the plutonium gun made the uranium gun program easier: a uranium bullet could be fired at a much lower velocity, reducing the difficulties of building a working gun device). But there were still numerous development problems that needed to be overcome. As with plutonium, uranium metal reduction and working methods were finalized by late 1944, and by early 1945 the design of the gun was completed and assembly of it was being tested. Unanswered questions remained until surprisingly late in the program (as late as December 1944 the critical mass of U235 still hadn’t been precisely determined), but there was little uncertainty around whether the bomb would function (so little, in fact, that testing the uranium gun bomb was considered unnecessary). By May of 1945, the uranium gun weapon, code named “Little Boy,” was “ready for combat”.The Manhattan Project has become synonymous with a difficult, expensive, and ambitious technological development project, and you often hear folks advocating for a “Manhattan Project for X.” So it's worth understanding why, specifically, the Manhattan Project was so difficult and expensive.First, there were inherent physical difficulties in many of the tasks. The bombs required pounds of fissile material, and there was no easy way to produce it: any method chosen would require an enormous industrial-scale production facility. The Hanford Site for producing plutonium cost $350 million ($6.4 billion in 2025 dollars), and the Oak Ridge site cost $304 million ($5.5 billion in 2025 dollars), not including the cost of the borrowed silver for the electromagnets. Hundreds of millions more were spent on operating the facilities. Part of the expense and difficulty of the Manhattan Project came simply because manufacturing fissile material is expensive and difficult (and remains so today.)The second difficulty with the Manhattan Project was that because of the great urgency, work had to proceed on the basis of very little information. Resolving the uncertainty often entailed expensive efforts that would have been greatly simplified (or eschewed altogether) had a slower pace been acceptable. Plants were built before the processes they would use had been completely defined, often requiring extensive rework after parts of them had been built. Time and effort was invested in creating a plutonium gun bomb that could have been avoided had the designers waited until reactor-produced plutonium (which due to the presence of Plutonium-240 wouldn’t work in a gun bomb) was available.The third difficulty was that because so little knowledge existed around the nature of atomic physics and nuclear chain reactions, it was far from clear what the best route to an atomic weapon was. Because the field was so new, using only recently-discovered natural phenomena that were poorly understood, a great deal of effort was needed to resolve this uncertainty along numerous technological axes. Thus the Manhattan Project involved a large amount of trial and error experimentation, and of pursuing multiple paths of technological development — different bomb types, different fuels, different uranium separation methods, different tampers, different triggers, different implosion analysis methods — to create a workable bomb.It’s this last difficulty that is most relevant for other technological development projects. Developing other technologies doesn’t necessarily require building enormous, industrial scale industrial facilities to even begin, and doesn’t necessarily require rapidly proceeding before the proper information and supporting technologies are available. But it will almost certainly require investigating various promising paths of development, partially-informed groping around until the right combination of methods and components is discovered. Indeed, this sort of exploration is the very essence of technological development.Edison’s light bulb provides a useful comparison: inventing it didn’t require building an enormous, multi-million dollar factory to produce the components to experiment with. And Edison wasn’t forced to invent every single predecessor technology that a light bulb required. One of the reasons why an incandescent bulb wasn’t invented earlier is that, prior to the 1860s, vacuum pumps weren’t good enough. Edison’s bulb relied on the invention of the Sprengel mercury pump by Hermann Sprengel in 1865, which could create a high enough vacuum that incandescent lamps became feasible. But Edison was forced to explore a variety of different potential methods for creating a bulb until he created one that worked.One thing that the Manhattan Project shows is that resolving this uncertainty, and figuring out what a technology should actually be, is hard. The Manhattan Project had some of the most brilliant scientific minds in the world working on it, but even with this collective brainpower it was far from clear what the best route to the bomb was. For almost every major design decision (including the successful ones), there was at least one genius or expert highly skeptical that it would work. Future Nobel Prize winner Hans Bethe initially resisted joining the program because he believed that building an atomic bomb wasn’t feasible at all. Early in the program, many (such as physicist Alfred Nier) felt that electromagnetic separation wouldn’t be a feasible way to isolate U235 (and indeed, until very late it looked like it wouldn’t be). British scientists were similarly pessimistic about the gaseous diffusion process, with some believing that the plant “would be inoperable” due to surges and fluctuations in the gas flow. Du Pont thought that a graphite moderated, water-cooled reactor might not work, and insisted on a heavy water reactor as a backup. Explosives expert William Parsons, head of the uranium gun program, was skeptical that explosive lenses would work, and argued that the only way to have an implosion bomb ready by summer of 1945 was with a non-lensed design. Enrico Fermi initially believed that a modulated initiator wouldn’t work, and would come up with a new reason why “every second day or so.”It’s also notable that many of the options chosen didn’t turn out to be the best long-term. Post-war atomic weapons almost entirely eschewed gun-type mechanisms in favor of more efficient implosions. And of all the uranium separation methods explored, it was the one that was deemed least promising and not used at all by the Manhattan Project — gas centrifuges — that is primarily used for uranium enrichment today.Not all technologies will require expensive physical facilities to produce, or require extremely rapid, expensive development. But resolving the uncertainty inherent in a new technology — figuring out what, exactly, the arrangement of phenomena needs to be to achieve some goal, and how that arrangement can be achieved — is part of the fundamental nature of creating a new technology. The Manhattan Project required an unusually large amount of this (advancing the state of the art in many different disciplines), but will always be required to some degree.1Consideration was also given to another isotope of uranium, U233.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GrapheneOS and Forensic Extraction of Data (2024)]]></title>
            <link>https://discuss.grapheneos.org/d/13107-grapheneos-and-forensic-extraction-of-data</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45210910</guid>
            <description><![CDATA[GrapheneOS discussion forum]]></description>
            <content:encoded><![CDATA[

        
            
            
                    
                                                    GrapheneOS Discussion Forum
                                            
                
        

    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Behind the Scenes of Bun Install]]></title>
            <link>https://bun.com/blog/behind-the-scenes-of-bun-install</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45210850</guid>
            <description><![CDATA[Learn how Bun is able to cut install times by up to 25×. Bun skips Node.js's overhead with direct system calls, cache-friendly data layouts, OS-level copy-on-write, and full-core parallelism.]]></description>
            <content:encoded><![CDATA[Running bun install is fast, very fast. On average, it runs ~7× faster than npm, ~4× faster than pnpm, and ~17× faster than yarn. The difference is especially noticeable in large codebases. What used to take minutes now takes (milli)seconds.These aren't just cherry-picked benchmarks. Bun is fast because it treats package installation as a systems programming problem, not a JavaScript problem.In this post we’ll explore what that means: from minimizing syscalls and caching manifests as binary, to optimizing tarball extraction, leveraging OS-native file copying, and scaling across CPU cores.But to understand why this matters, we first have to take a small step back in time.It's the year 2009. You're installing jQuery from a .zip file, your iPhone 3GS has 256MB of RAM. GitHub was just a year old, SSDs cost $700 for 256GB. Your laptop's 5400RPM hard drive maxes out at 100MB/s, and "broadband" means 10 Mbps (if you're lucky).But more importantly: Node.js just launched! Ryan Dahl is on stage explaining why servers spend most of their time waiting.In 2009, a typical disk seek takes 10ms, a database query 50–200ms, and an HTTP request to an external API 300ms+. During each of these transactions, traditional servers would just... wait. Your server would start reading a file, and then just freeze for 10ms.Now multiply that by thousands of concurrent connections each doing multiple I/O operations. Servers spent ~95% of their time waiting for I/O operations.Node.js figured that JavaScript's event loop (originally designed for browser events) was perfect for server I/O. When code makes an async request, the I/O happens in the background while the main thread immediately moves to the next task. Once complete, a callback gets queued for execution.  Simplified illustration of how Node.js handles fs.readFile with the event loop and thread pool. Other async sources and implementation details are omitted for clarity. JavaScript's event loop was a great solution for a world where waiting for data was the primary bottleneck.For the next 15 years, Node's architecture shaped how we built tools. Package managers inherited Node's thread pool, event loop, async patterns; optimizations that made sense when disk seeks took 10ms.But hardware evolved. It's not 2009 anymore, we're 16 years into the future, as hard as that is to believe. The M4 Max MacBook I'm using to write this would've ranked among the 50 fastest supercomputers on Earth in 2009. Today's NVMe drives push 7,000 MB/s, 70× faster than what Node.js was designed for! The slow mechanical drives are gone, internet speeds stream 4K video, and even low-end smartphones have more RAM than high-end servers had in 2009.Yet today's package managers still optimize for the last decade's problems. In 2025, the real bottleneck isn't I/O anymore. It's system calls.The Problem with System CallsEvery time your program wants the operating system to do something (read a file, open a network connection, allocate memory), it makes a system call. Each time you make a system call, the CPU has to perform a mode switch.Your CPU can run programs in two modes:user mode, where your application code runs. Programs in user mode cannot directly access your device's hardware, physical memory addresses, etc. This isolation prevents programs from interfering with each other or crashing the system.kernel mode, where the operating system's kernel runs. The kernel is the core component of the OS that manages resources like scheduling processes to use the CPU, handling memory, and hardware like disks or network devices. Only the kernel and device drivers operate in kernel mode!When you want to open a file, (e.g. fs.readFile()) in your program, the CPU running in user mode cannot directly read from disk. It first has to switch to kernel mode.During this mode switch, the CPU stops executing your program → saves all its state → switches into kernel mode → performs the operation → then switches back to user mode.However, this mode switching is expensive! Just this switch alone costs 1000-1500 CPU cycles in pure overhead, before any actual work happens.Your CPU operates on a clock that ticks billions of times per second. A 3GHz processor completes 3 billion cycles per second. During each cycle the CPU can execute instructions: add numbers, move data, make comparisons, etc. Each cycle takes 0.33ns.On a 3GHz processor, 1000-1500 cycles is about 500 nanoseconds. This might sound negligibly fast, but modern SSDs can handle over 1 million operations per second. If each operation requires a system call, you're burning 1.5 billion cycles per second just on mode switching.Package installation makes thousands of these system calls. Installing React and its dependencies might trigger 50,000+ system calls: that's seconds of CPU time lost to mode switching alone! Not even reading files or installing packages, just switching between user and kernel mode.This is why Bun treats package installation as a systems programming problem. Fast install speeds come from minimizing system calls and leveraging every OS-specific optimization available.You can see the difference when we trace the actual system calls made by each package manager:Benchmark 1: strace -c -f npm install
    Time (mean ± σ):  37.245 s ±  2.134 s [User: 8.432 s, System: 4.821 s]
    Range (min … max):   34.891 s … 41.203 s    10 runs

    System calls: 996,978 total (108,775 errors)
    Top syscalls: futex (663,158),  write (109,412), epoll_pwait (54,496)

  Benchmark 2: strace -c -f bun install
    Time (mean ± σ):      5.612 s ±  0.287 s [User: 2.134 s, System: 1.892 s]
    Range (min … max):    5.238 s …  6.102 s    10 runs

    System calls: 165,743 total (3,131 errors)
    Top syscalls: openat(45,348), futex (762), epoll_pwait2 (298)

  Benchmark 3: strace -c -f yarn install
    Time (mean ± σ):     94.156 s ±  3.821 s    [User: 12.734 s, System: 7.234 s]
    Range (min … max):   89.432 s … 98.912 s    10 runs

    System calls: 4,046,507 total (420,131 errors)
    Top syscalls: futex (2,499,660), epoll_pwait (326,351), write (287,543)

  Benchmark 4: strace -c -f pnpm install
    Time (mean ± σ):     24.521 s ±  1.287 s    [User: 5.821 s, System: 3.912 s]
    Range (min … max):   22.834 s … 26.743 s    10 runs

    System calls: 456,930 total (32,351 errors)
    Top syscalls: futex (116,577), openat(89,234), epoll_pwait (12,705)

  Summary
    'strace -c -f bun install' ran
      4.37 ± 0.28 times faster than 'strace -c -f pnpm install'
      6.64 ± 0.51 times faster than 'strace -c -f npm install'
     16.78 ± 1.12 times faster than 'strace -c -f yarn install'

  System Call Efficiency:
    - bun:  165,743 syscalls (29.5k syscalls/s)
    - pnpm: 456,930 syscalls (18.6k syscalls/s)
    - npm:  996,978 syscalls (26.8k syscalls/s)
    - yarn: 4,046,507 syscalls (43.0k syscalls/s)
We can see that Bun installs much faster, but it also makes far fewer system calls. For a simple install, yarn makes over 4 million system calls, npm almost 1 million, pnpm close to 500k, and bun 165k.At 1000-1500 cycles per call, yarn's 4 million system calls means it's spending billions of CPU cycles just on mode switching. On a 3GHz processor, that's seconds of pure overhead!And it's not just the amount of system calls. Look at those futex calls! Bun made 762 futex calls (only 0.46% of total system calls), whereas npm made 663,158 (66.51%), yarn made 2,499,660 (61.76%), and pnpm made 116,577 (25.51%).futex (fast userspace mutex) is a Linux system call used for thread synchronization. Threads are smaller units of a program that run simultaneously that often share access to memory or resources, so they must coordinate to avoid conflicts.Most of the time, threads coordinate using fast atomic CPU instructions in user mode. There's no need to switch to kernel mode, so it's very efficient!But if a thread tries to acquire a lock that's already taken, it makes a futex syscall to ask the kernel to put it to sleep until the lock becomes available. A high number of futex calls is an indicator that many threads are waiting on one another, causing delays.So what's Bun doing differently here?Eliminating JavaScript overheadnpm, pnpm and yarn are all written in Node.js. In Node.js, system calls aren’t made directly: when you call fs.readFile(), you’re actually going through several layers before reaching the OS.Node.js uses libuv, a C library that abstracts platform differences and manages async I/O through a thread pool.The result is that when Node.js has to read a single file, it triggers a pretty complex pipeline. For a simple fs.readFile('package.json', ...):JavaScript validates arguments and converts strings from UTF-16 to UTF-8 for libuv's C APIs. This briefly blocks the main thread before any I/O even starts.libuv queues the request for one of 4 worker threads. If all threads are busy, your request waits.A worker thread picks up the request, opens the file descriptor, and makes the actual read() system call.The kernel switches to kernel mode, fetches the data from disk, and returns it to the worker thread.The worker pushes the file data back to the main thread through the event loop, which eventually schedules and runs your callback.Every single fs.readFile() call goes through this pipeline. Package installation involves reading thousands of package.json files: scanning directories, processing dependency metadata, and so on. Each time threads coordinate (e.g., when accessing the task queue or signaling back to the event loop), a futex system call can be used to manage locks or waits.The overhead of making thousands of these system calls can take longer than the actual data movement itself!Bun does it differently. Bun is written in Zig, a programming language that compiles to native code with direct system call access:// Direct system call, no JavaScript overhead
var file = bun.sys.File.from(try bun.sys.openatA(
    bun.FD.cwd(),
    abs,
    bun.O.RDONLY,
    0,
).unwrap());
When Bun reads a file:Zig code directly invokes the system call (e.g., openat() )The kernel immediately executes the system call and returns dataThat's it. There's no JavaScript engine, thread pools, event loops or marshaling between different runtime layers. Just native code making direct system calls to the kernel.The performance difference speaks for itself:RuntimeVersionFiles/SecondPerformanceBunv1.2.20146,057Node.jsv24.5.066,5762.2x slowerNode.jsv22.18.064,6312.3x slowerIn this benchmark, Bun processes 146,057 package.json files per second, while Node.js v24.5.0 manages 66,576 and v22.18.0 handles 64,631. That's over 2x faster!Bun's 0.019ms per file represents the actual I/O cost, so how long it takes to read data when you make direct system calls without any runtime overhead. Node.js takes 0.065ms for the same operation. Package managers written in Node.js are "stuck" with Node's abstractions; they use the thread pool whether they need it or not. But they pay this cost on every file operation.Bun's package manager is more like a native application that happens to understand JavaScript packages, not a JavaScript application trying to do systems programming.Even though Bun isn't written in Node.js, you can use bun install in any Node.js project without switching runtimes. Bun's package manager respects your existing Node.js setup and tooling, you just get faster installs!But at this point we haven't even started installing packages yet. Let's see the optimizations Bun applies to the actual installation.When you type bun install, Bun first figures out what you're asking it to do. It reads any flags you've passed, and finds your package.json to read your dependencies.Async DNS Resolution⚠️ Note: This optimization is specific to macOSWorking with dependencies means working with network requests, and network requests require DNS resolution to convert domain names like registry.npmjs.org into IP addresses.As Bun is parsing the package.json, it already starts to prefetch the DNS lookups. This means network resolution begins even before dependency analysis is even complete.For a Node.js-based package managers, one way to do it is by using dns.lookup(). While this looks async from JavaScript's perspective, it's actually implemented as a blocking getaddrinfo() call under the hood, running on libuv's thread pool. It still blocks a thread, just not the main thread.As a nice optimization, Bun takes a different approach on macOS by making it truly asynchronous at the system level. Bun uses Apple's "hidden" async DNS API (getaddrinfo_async_start()), which isn't part of the POSIX standard, but it allows bun to make DNS requests that run completely asynchronously using mach ports, Apple's inter-process communication system.While DNS resolution happens in the background, Bun can continue processing other operations like file I/O, network requests, or dependency resolution without any thread blocking. By the time it needs to download React, the DNS lookup is already done.It's a small optimization (and not benchmarked), but it shows Bun's attention to detail: optimize at every layer!Binary Manifest CachingNow that Bun has established a connection to the npm registry, it needs the package manifests.A manifest is a JSON file containing all versions, dependencies, and metadata for each package. For popular packages like React with 100+ versions, these manifests can be several megabytes!A typical manifest can look something like this:{
  "name": "lodash",
  "versions": {
    "4.17.20": {
      "name": "lodash",
      "version": "4.17.20",
      "description": "Lodash modular utilities.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/lodash/lodash.git"
      },
      "homepage": "https://lodash.com/"
    },
    "4.17.21": {
      "name": "lodash",
      "version": "4.17.21",
      "description": "Lodash modular utilities.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/lodash/lodash.git"
      },
      "homepage": "https://lodash.com/"
    }
    // ... 100+ more versions, nearly identical
  }
}
Most package managers cache these manifests as JSON files in their cache directories. When you run npm install again, instead of downloading the manifest, they read it from the cache.That all makes sense, but the issue is that on every install (even if it's cached), they still need to parse the JSON file. This includes validating the syntax, building the object tree, managing garbage collection, and so on. A lot of parsing overhead.And it's not just the JSON parsing overhead. Looking at lodash: the string "Lodash modular utilities." appears in every single version—that's 100+ times. "MIT" appears 100+ times. "git+https://github.com/lodash/lodash.git" is duplicated for every version, the URL "https://lodash.com/" appears in every version. Overall, lots of repeated strings.In memory, JavaScript creates a separate string object for each string. This wastes memory and makes comparisons slower. Every time the package manager checks if two packages use the same version of postcss, it's comparing separate string objects rather than pointing to the same interned string.Bun stores package manifests in a binary format. When Bun downloads package information, it parses the JSON once and stores it as binary files (.npm files in ~/.bun/install/cache/). These binary files contain all the package information (versions, dependencies, checksums, etc.) stored at specific byte offsets.When Bun accesses the name lodash, it's just pointer arithmetic: string_buffer + offset. No allocations, no parsing, no object traversal, just reading bytes at a known location.// Pseudocode

// String buffer (all strings stored once)
string_buffer = "lodash\0MIT\0Lodash modular utilities.\0git+https://github.com/lodash/lodash.git\0https://lodash.com/\04.17.20\04.17.21\0..."
                 ^0     ^7   ^11                        ^37                                      ^79                   ^99      ^107

// Version entries (fixed-size structs)
versions = [
  { name_offset: 0, name_len: 6, version_offset: 99, version_len: 7, desc_offset: 11, desc_len: 26, license_offset: 7, license_len: 3, ... },  // 4.17.20
  { name_offset: 0, name_len: 6, version_offset: 107, version_len: 7, desc_offset: 11, desc_len: 26, license_offset: 7, license_len: 3, ... }, // 4.17.21
  // ... 100+ more version structs
]
To check if packages need updating, Bun stores the responses's ETag , and sends If-None-Match headers. When npm responds with "304 Not Modified", Bun knows the cached data is fresh without parsing a single byte.Looking at the benchmarks:Benchmark 1: bun install # fresh install
  Time (mean ± σ):      35.7 ms ±  86.6 ms    [User: 8.4 ms, System: 13.4 ms]
  Range (min … max):     4.1 ms … 280.5 ms    10 runs

Benchmark 2: bun install # cached
  Time (mean ± σ):       4.8 ms ±   0.7 ms    [User: 4.7 ms, System: 3.9 ms]
  Range (min … max):     3.7 ms …   6.2 ms    482 runs

Benchmark 3: npm install # fresh install
  Time (mean ± σ):     815.1 ms ± 976.9 ms    [User: 730.1 ms, System: 130.4 ms]
  Range (min … max):   478.8 ms … 3595.1 ms    10 runs

Summary
  bun install # cached ran
    1.02 ± 0.02 times faster than bun install # fresh, no cache
    3.73 ± 0.12 times faster than npm install # cached
Here you can see that a cached(!!) npm install is slower than a fresh Bun install. That's how much overhead JSON parsing the cached files can add (among other factors).Now that Bun has fetched the package manifests, it needs to download and extract compressed tarballs from the npm registry.Tarballs are compressed archive files (like .zip files) that contain all the actual source code and files for each package.Most package managers stream the tarball data as it arrives, and decompress as it streams in. When you extract a tarball that's streaming in, the typical pattern assumes the size is unknown, and looks something like this:let buffer = Buffer.alloc(64 * 1024); // Start with 64KB
let offset = 0;

function onData(chunk) {
  while (moreDataToCome) {
    if (offset + chunk.length > buffer.length) {
      // buffer full → allocate bigger one
      const newBuffer = Buffer.alloc(buffer.length * 2);

      // copy everything we’ve already written
      buffer.copy(newBuffer, 0, 0, offset);

      buffer = newBuffer;
    }

    // copy new chunk into buffer
    chunk.copy(buffer, offset);
    offset += chunk.length;
  }

  // ... decompress from buffer ...
}
Start with a small buffer, and let it grow as more decompressed data arrives. When the buffer fills up, you allocate a larger buffer, copy all the existing data over, and continue.This seems reasonable, but it creates a performance bottleneck: you end up copying the same data multiple times as the buffer repeatedly outgrows its current size.When we have a 1MB package:Start with 64KB bufferFill up → Allocate 128KB → Copy 64KB overFill up → Allocate 256KB → Copy 128KB overFill up → Allocate 512KB → Copy 256KB overFill up → Allocate 1MB → Copy 512KB overYou just copied 960KB of data unnecessarily! And this happens for every single package. The memory allocator has to find contiguous space for each new buffer, while the old buffer stays allocated during the copy operation. For large packages, you might copy the same bytes 5-6 times.Bun takes a different approach by buffering the entire tarball before decompressing. Instead of processing data as it arrives, Bun waits until the entire compressed file is downloaded into memory.Now you might think "Wait, aren't they just wasting RAM keeping everything in memory?" And for large packages like TypeScript (which can be 50MB compressed), you'd have a point.But the vast majority of npm packages are tiny, most are under 1MB. For these common cases, buffering the whole thing eliminates all the repeated copying. Even for those larger packages, the temporary memory spike is usually fine on modern systems, and avoiding 5-6 buffer copies more than makes up for it.Once Bun has the complete tarball in memory, it can read the last 4 bytes of the gzip format. These bytes are special since store the uncompressed size of the file! Instead of having to guess how large the uncompressed file will be, Bun can pre-allocate memory to eliminate buffer resizing entirely:{
  // Last 4 bytes of a gzip-compressed file are the uncompressed size.
  if (tgz_bytes.len > 16) {
    // If the file claims to be larger than 16 bytes and smaller than 64 MB, we'll preallocate the buffer.
    // If it's larger than that, we'll do it incrementally. We want to avoid OOMing.
    const last_4_bytes: u32 = @bitCast(tgz_bytes[tgz_bytes.len - 4 ..][0..4].*);
    if (last_4_bytes > 16 and last_4_bytes < 64 * 1024 * 1024) {
      // It's okay if this fails. We will just allocate as we go and that will error if we run out of memory.
      esimated_output_size = last_4_bytes;
      if (zlib_pool.data.list.capacity == 0) {
          zlib_pool.data.list.ensureTotalCapacityPrecise(zlib_pool.data.allocator, last_4_bytes) catch {};
      } else {
          zlib_pool.data.ensureUnusedCapacity(last_4_bytes) catch {};
      }
    }
  }
}
Those 4 bytes tell Bun "this gzip will decompress to exactly 1,048,576 bytes", so it can pre-allocate exactly this amount of memory upfront. There's no repeated resizing or copying of data; just one memory allocation.To do the actual decompression, Bun uses libdeflate. This is a high-performance lib that decompresses tarballs faster than the standard zlib used by most package managers. It's optimized specifically for modern CPUs with SIMD instructions.Optimized tarball extraction would've been difficult to for package managers written in Node.js. You'd need to create a separate read stream, seek to the end, read 4 bytes, parse them, close the stream, then start over with your decompression. Node's APIs aren't designed for this pattern.In Zig it's pretty straight-forward: you just seek to the end and read the last four bytes, that's it!Now that Bun has all the package data, it faces another challenge: how do you efficiently store and access thousands of (interdependent) packages?Cache-Friendly Data LayoutDealing with thousands of packages can be tricky. Each package has dependencies, which have their own dependencies, creating a pretty complex graph.During installation, package managers have to traverse this graph to check the package versions, resolve any conflicts, and determine which version to install. They also need to "hoist" dependencies by moving them to higher levels so multiple packages can share them.But the way that this dependency graph is stored has a big impact on performance. Traditional package managers store dependencies like this:const packages = {
  next: {
    name: "next",
    version: "15.5.0",
    dependencies: {
      "@swc/helpers": "0.5.15",
      "postcss": "8.4.31",
      "styled-jsx": "5.1.6",
    },
  },
  postcss: {
    name: "postcss",
    version: "8.4.31",
    dependencies: {
      nanoid: "^3.3.6",
      picocolors: "^1.0.0",
    },
  },
};
This looks clean as JavaScript code, but it's not ideal for modern CPU architectures.In JavaScript, each object is stored on the heap. When accessing packages["next"], the CPU accesses a pointer that tells it where Next's data is located in memory. This data then contains yet another pointer to where its dependencies live, which in turn contains more pointers to the actual dependency strings.The key issue is how JavaScript allocates objects in memory. When you create objects at different times, the JavaScript engine uses whatever memory is available at that moment:// These objects are created at different moments during parsing
packages["react"] = { name: "react", ... }  	  // Allocated at address 0x1000
packages["next"] = { name: "next", ... }     		// Allocated at address 0x2000
packages["postcss"] = { name: "postcss", ... }  // Allocated at address 0x8000
// ... hundreds more packages
These addresses are basically just random. There is no locality guarantee - objects can just be scattered across RAM, even objects that are related to each other!This random scattering matters because of how modern CPUs actually fetch data.Modern CPUs are incredibly fast at processing data (billions of operations per second), but fetching data from RAM is slow. To bridge this gap, CPUs have multiple cache levels:L1 cache, small storage, but extremely fast (~4 CPU cycles)L2 cache, medium storage, a bit slower (~12 CPU cycles)L3 cache: 8-32MB storage, requires ~40 CPU cyclesRAM: Lots of GB, requires ~300 cycles (slow!)The "issue" is that caches work with cache lines. When you access memory, the CPU doesn't just load that one byte: it loads the entire 64-byte chunk in which that byte appears. It figures that if you need one byte, you'll probably need nearby bytes soon (this is called spatial locality).This optimization works great for data that's stored sequentially, but it backfires when your data is scattered randomly across memory.When the CPU loads packages["next"] at address 0x2000, it actually loads all the bytes within that cache line. But the next package, packages["postcss"], is at address 0x8000 . This is a completely different cache line! The other 56 bytes the CPU loaded in the cache line are just completely wasted, they're just random memory from whatever happened to be allocated nearby; maybe garbage, maybe parts of unrelated objects.But you paid the cost of loading 64 bytes but only used 8...By the time it's accessed 512 different packages (32KB / 64 bytes), you've filled your entire L1 cache already. Now every new package access evicts a previously loaded cache line to make space. The package you just accessed will be evicted soon, and that dependency it needs to check in 10 microseconds is already gone. Cache hit rate drops, and every access becomes a ~300 cycle trip to RAM instead of a 4 cycle L1 hit, far from optimal.The nested structure of objects creates whats called "pointer chasing", a common anti-pattern in system programming. The CPU can't predict where to load next because each pointer could point anywhere. It simply cannot know where next.dependencies lives until it finishes loading the next object.When traversing Next's dependencies, the CPU has to perform multiple dependent memory loads:Load packages["next"] pointer → Cache miss → RAM fetch (~300 cycles)Follow that pointer to load next.dependencies pointer → Another cache miss → RAM fetch (~300 cycles)Follow that to find "postcss" in the hash table → Cache miss → RAM fetch (~300 cycles)Follow that pointer to load the actual string data → Cache miss → RAM fetch (~300 cycles)We can end up with many cache misses since we're working with hundreds of dependencies, all scattered across memory. Each cache line we load (64 bytes) might contain data for just one object. With all those objects spread across GBs of RAM, the working set easily exceeds the L1 cache (32KB), L2 (256KB) and even the L3 cache (8-32MB). By the time we need an object again, it's likely that it's been evicted from all cache levels.That's ~1200 cycles (400ns on a 3GHz CPU) just to read one dependency name! For a project with 1000 packages averaging 5 dependencies each, that's 2ms of pure memory latency.Bun uses Structure of Arrays. Instead of each package storing its own dependency array, Bun keeps all dependencies in one big shared array, all package names in another shared array, and so on:// ❌ Traditional Array of Structures (AoS) - lots of pointers
packages = {
  next: { dependencies: { "@swc/helpers": "0.5.15", "postcss": "8.4.31" } },
};

// ✅ Bun's Structure of Arrays (SoA) - cache friendly
packages = [
  {
    name: { off: 0, len: 4 },
    version: { off: 5, len: 6 },
    deps: { off: 0, len: 2 },
  }, // next
];

dependencies = [
  { name: { off: 12, len: 13 }, version: { off: 26, len: 7 } }, // @swc/helpers@0.5.15
  { name: { off: 34, len: 7 }, version: { off: 42, len: 6 } }, // postcss@8.4.31
];

string_buffer = "next\015.5.0\0@swc/helpers\00.5.15\0postcss\08.4.31\0";
Instead of each package storing pointers to its own data scattered across memory, Bun just uses large contiguous buffers, including:packages stores lightweight structs that specify where to find this package's data using offsetsdependencies stores the actual dependency relationships for all packages in one placestring_buffer stores all text (names, versions, etc.) sequentially in one massive stringversions stores all parsed semantic versions as compact structsNow, accessing Next's dependencies just becomes arithmetic:packages[0] tells us that Next's dependencies start at position 0 in the dependencies array, and there's 2 dependencies: { name_offset: 0, deps_offset: 0, deps_count: 2 }Go to dependencies[1] which tells us that postcss's name starts at position 34 in the string string_buffer, and version at position 42: { name_offset: 34, version_offset: 42 }Go to position 34 in string_buffer and read postcssGo to position 42 in string_buffer and read "8.4.31"… and so onNow when you access packages[0], the CPU doesn't just load those 8 bytes: it loads an entire 64-byte cache line. Since each package is 8 bytes, and 64 ÷ 8 = 8, you get packages[0] through packages[7] in a single memory fetch.So when your code processes the react dependency (packages[0], packages[1] through packages[7] are already sitting in your L1 cache, ready to be accessed with zero additional memory fetches. That's why sequential access is so fast: you're getting 8 packages just by accessing memory once.Instead of the many small, scattered allocations throughout memory that we saw in the previous example, we now have just ~6 large allocations in total, regardless of how many packages you have. This is completely different from the pointer-based approach, which required a separate memory fetch for each object.Optimized Lockfile FormatBun also applies the Structure of Arrays approach to its bun.lock lockfile.When you run bun install, Bun has to parse the existing lockfile to determine what's already installed and what needs updating. Most package managers store lockfiles as nested JSON (npm) or YAML (pnpm, yarn). When npm parses package-lock.json, it's processing deeply nested objects:{
  "dependencies": {
    "next": {
      "version": "15.5.0",
      "requires": {
        "@swc/helpers": "0.5.15",
        "postcss": "8.4.31"
      }
    },
    "postcss": {
      "version": "8.4.31",
      "requires": {
        "nanoid": "^3.3.6",
        "picocolors": "^1.0.0"
      }
    }
  }
}
Each package becomes its own object with nested dependency objects. JSON parsers must allocate memory for every object, validate syntax, and build complex nested trees. For projects with thousands of dependencies, this creates the same pointer-chasing problem we saw earlier!Bun applies the Structure of Arrays approach to its lockfile, in a human-readable format:{
  "lockfileVersion": 0,
  "packages": {
    "next": [
      "next@npm:15.5.0",
      { "@swc/helpers": "0.5.15", "postcss": "8.4.31" },
      "hash123"
    ],
    "postcss": [
      "postcss@npm:8.4.31",
      { "nanoid": "^3.3.6", "picocolors": "^1.0.0" },
      "hash456"
    ]
  }
}
This again deduplicates strings, and stores dependencies in a cache-friendly layout. They're stored following dependency order rather than alphabetically or in a nested hierarchy. This means that a parser can read memory more efficiently (sequentially), avoiding random jumps between objects.And not only that, Bun also pre-allocates memory based on the lockfile size. Just like with tarball extraction, this avoids the repeated resize-and-copy cycles that create performance bottlenecks during parsing.As a sidenote: Bun originally used a binary lockfile format (bun.lockb) to avoid JSON parsing overhead entirely, but binary files are impossible to review in pull requests and can't be merged when conflicts happen.File copyingAfter the packages are installed and cached in ~/.bun/install/cache/, Bun must copy the files into node_modules. This is where we see most of Bun's performance impact!Traditional file copying traverses each directory and copies files individually. This requires multiple system calls per file:opening the source file (open())creating and opening the destination file (open())repeatedly reading chunks from the source and writing them to the destination until complete (read()/ write())finally, closing both files close().Each of these steps requires that expensive mode switch between user mode and the kernel.For a typical React app with thousands of package files, this generates hundreds of thousands to millions of system calls! This is exactly the systems programming problem we described earlier: the overhead of making all these system calls becomes more expensive than actually moving the data.Bun uses different strategies depending on your operating system and filesystem, leveraging every OS-specific optimization available. Bun supports several file copying backends, each with different performance characteristics:macOSOn macOS, Bun uses Apple's native clonefile() copy-on-write system call.clonefile can clone entire directory trees in a single system call. This system call creates new directory and file metadata entries that reference the same physical disk blocks as the original files. Instead of writing new data to disk, the filesystem just creates new "pointers" to existing data.// Traditional approach: millions of syscalls
for (each file) {
  copy_file_traditionally(src, dst);  // 50+ syscalls per file
}

// Bun's approach: ONE syscall
clonefile("/cache/react", "/node_modules/react", 0);
SSD stores data in fixed-size blocks. When you normally copy a file (copy()), the filesystem allocates new blocks and writes duplicate data. With clonefile, both the original and "copied" file have metadata that points to the exact same physical blocks on your SSD.Copy-on-write means data is only duplicated when modified. This results in an O(1) operation vs. the O(n) of traditional copying.The metadata of both files point to the same data blocks until you modify one of them.When you modify the contents of one of the files, the filesystem automatically allocates new blocks for the edited parts, and updates the file metadata to point to the new blocks.However, this rarely happens since node_modules files are typically read-only after installation; we don't actively modify modules from within our code.This makes copy-on-write extremely efficient: multiple packages can share identical dependency files without using additional disk space.Benchmark 1: bun install --backend=copyfile
  Time (mean ± σ):      2.955 s ±  0.101 s    [User: 0.190 s, System: 1.991 s]
  Range (min … max):    2.825 s …  3.107 s    10 runs

Benchmark 2: bun install --backend=clonefile
  Time (mean ± σ):      1.274 s ±  0.052 s    [User: 0.140 s, System: 0.257 s]
  Range (min … max):    1.184 s …  1.362 s    10 runs

Summary
  bun install --backend=clonefile ran
    2.32 ± 0.12 times faster than bun install --backend=copyfile
When clonefile fails (due to lack of filesystem support), Bun falls back to clonefile_each_dir for per-directory cloning. If that also fails, Bun uses traditional copyfile as the final fallback.LinuxLinux doesn't have clonefile(), but it has something even older and more powerful: hardlinks. Bun implements a fallback chain that tries increasingly less optimal approaches until one works:1. HardlinksOn Linux, Bun's default strategy is hardlinks. A hardlink doesn't create a new file at all, it only creates a new name for an existing file, and references this existing file.link("/cache/react/index.js", "/node_modules/react/index.js");
To understand hardlinks, you need to understand inodes. Every file on Linux has an inode, which is a data structure that contains all the file's metadata (permissions, timestamps, etc.). The filename is just a pointer to an inode:Both paths point to the same inode. If you delete one path, the other remains. However, if you modify one, both see changes (because they're the same file!).This results in great performance gains because there's zero data movement. Creating a hard link requires a single system call that completes in microseconds, regardless of whether you're linking a 1KB file or a 100MB bundle. Much more efficient than traditional copying, which has to read and write every single byte.They're also extremely efficient for disk space, since there's only ever one copy of the actual data on disk, no matter how many packages reference the same dependency filesHowever, hardlinks have limitations. They can't cross filesystem boundaries (e.g. your cache is in a different location than your node_modules), some filesystems don't support them, and certain file types or permission configurations can cause hardlink creation to fail.When hardlinks aren't possible, Bun has some fallbacks:2. ioctl_ficloneIt starts with ioctl_ficlone, which enables copy-on-write on filesystems like Btrfs and XFS. This is very similar to clonefile's copy-on-write system in the way that it also creates a new file references that share the same disk data. Unlike hardlinks, these are separate files; they just happen to share storage until modified.3. copy_file_rangeIf copy-on-write isn't available, Bun tries to at least keep the copying in kernel space and falls back to copy_file_range.In a traditional copy, the kernel reads from disk into a kernel buffer, then copies that data to your program's buffer in user space. Later when you call write(), it copies it back to a kernel buffer before writing to disk. That's four memory operations and multiple context switches!With copy_file_range, the kernel reads from disk into a kernel buffer and writes directly to disk. Just two operations and zero context switches for the data movement.4. sendfileIf that's unavailable, Bun uses sendfile. This is a system call that was originally designed for network transfers, but it's also effective for copying data directly between two files on disk.This command also keeps data in kernel space: the kernel reads data from one destination (a reference to an open file on disk, e.g. a source file in ~/.bun/install/cache/) and writes it to another destination (like a destination file in node_modules), all within the kernel's memory space.This process is called disk-to-disk copying, as it moves data between files stored on the same or different disks without touching your program's memory. It's an older API but more widely supported, making it a reliable fallback when newer system calls aren't available while still reducing the number of memory calls.5. copyfileAs a last resort, Bun uses traditional file copying; the same approach most package managers use. This creates entirely separate copies of each file by reading data from the cache and writing it to the destination using a read()/write() loop. This uses multiple system calls, which is exactly what Bun is trying to minimize. It's the least efficient option, but it's universally compatible.Benchmark 1: bun install --backend=copyfile
  Time (mean ± σ):     325.0 ms ±   7.7 ms    [User: 38.4 ms, System: 295.0 ms]
  Range (min … max):   314.2 ms … 340.0 ms    10 runs

Benchmark 2: bun install --backend=hardlink
  Time (mean ± σ):     109.4 ms ±   5.1 ms    [User: 32.0 ms, System: 86.8 ms]
  Range (min … max):   102.8 ms … 119.0 ms    19 runs

Summary
  bun install --backend=hardlink ran
    2.97 ± 0.16 times faster than bun install --backend=copyfile
These file copying optimizations address the primary bottleneck: system call overhead. Instead of using a one-size-fits-all approach, Bun chooses the most efficient file copying specifically tailored to you.Multi-Core ParallelismAll the above-mentioned optimizations are great, but they aim to reduce the workload for a single CPU core. However, modern laptops have 8, 16, even 24 CPU cores!Node.js has a thread pool, but all the actual work (e.g. figuring out which version of React works with which version of webpack, building the dependency graph, deciding what to install) happens on one thread and one CPU core. When npm runs on your M3 Max, one core works really hard while the other 15 are idle.A CPU core can independently execute instructions. Early computers had one core, they could only do one thing at a time, but modern CPUs pack multiple cores onto a single chip. A 16-core CPU can execute 16 different instruction streams simultaneously, not just switching between them really fast.This is yet another fundamental bottleneck for traditional package managers: no matter how many cores you have, the package manager can only use one CPU core.Bun takes a different approach with a lock-free, work-stealing thread pool architecture.Work-stealing means that idle threads can "steal" pending tasks from busy threads' queues. When a thread finishes its work, it checks its local queue, then the global queue, then steals from other threads. No thread sits idle when there's still work to do.Instead of being limited to JavaScript's event loop, Bun spawns native threads that can fully utilize every CPU core. The thread pool automatically scales to match your device's CPU's core count, allowing Bun to maximize parallelizing the I/O-heavy parts of the installation process. One thread can be extracting next's tarball, another is resolving postcss dependencies, a third applying patches to webpack, and so on.But multi-threading often comes with synchronization overhead. Those hundreds of thousands of futex calls npm made were just threads constantly waiting for each other. Each time a thread wants to add a task to a shared queue, it has to lock it first, blocking all other threads.// Traditional approach: Locks
mutex.lock();                   // Thread 1 gets exclusive access
queue.push(task);               // Only Thread 1 can work
mutex.unlock();                 // Finally releases lock
// Problem: Threads 2-8 blocked, waiting in line
Bun uses lock-free data structures instead. These use special CPU instructions called atomic operations that allow threads to safely modify shared data without locks:pub fn push(self: *Queue, batch: Batch) void {
  // Atomic compare-and-swap, happens instantly
  _ = @cmpxchgStrong(usize, &self.state, state, new_state, .seq_cst, .seq_cst);
}
In an earlier benchmark we saw that Bun was able to process 51,685 package.json files/second versus Node.js's 15,471. That's the impact of using all cores instead of one.Bun also runs network operations differently. Traditional package managers often block. When downloading a package, the CPU sits idle waiting for the network.Bun maintains a pool of 64(!) concurrent HTTP connections (configurable via BUN_CONFIG_MAX_HTTP_REQUESTS) on dedicated network threads. The network thread runs independently with its own event loop, handling all downloads while CPU threads handle the extraction and processing. Neither waits for the other.Bun also gives each thread its own memory pool. An issue with "traditional" multi-threading is that all threads compete for the same memory allocator. This creates contention: if 16 threads all need memory at once, they have to wait for each other.// Traditional: all threads share one allocator
Thread 1: "I need 1KB for package data"    // Lock allocator
Thread 2: "I need 2KB for JSON parsing"    // Wait...
Thread 3: "I need 512B for file paths"     // Wait...
Thread 4: "I need 4KB for extraction"      // Wait...
Bun instead gives each thread its own large chunk of pre-allocated memory that the thread manages independently. There's no sharing or waiting, each thread works with its own data whenever possible.// Bun: each thread has its own allocator
Thread 1: Allocates from pool 1    // Instant
Thread 2: Allocates from pool 2    // Instant
Thread 3: Allocates from pool 3    // Instant
Thread 4: Allocates from pool 4    // Instant
ConclusionThe package managers we benchmarked weren't built wrong, they were solutions designed for the constraints of their time.npm gave us a foundation to build on, yarn made managing workspaces less painful, and pnpm came up with a clever way to save space and speed things up with hardlinks. Each worked hard to solve the problems developers were actually hitting at the time.But that world no longer exists. SSDs are 70× faster, CPUs have dozens of cores, and memory is cheap. The real bottleneck shifted from hardware speed to software abstractions.Buns approach wasn't revolutionary, it was just willing to look at what actually slows things down today. When SSDs can handle a million operations per second, why accept thread pool overhead? When you're reading the same package manifest for the hundredth time, why parse JSON again? When the filesystem supports copy-on-write, why duplicate gigabytes of data?The tools that will define the next decade of developer productivity are being written right now, by teams who understand that performance bottlenecks shifted when storage got fast and memory got cheap. They're not just incrementally improving what exists; they're rethinking what's possible.Installing packages 25x faster isn't "magic": it's what happens when tools are built for the hardware we actually have.→ Experience software built for 2025 at bun.com]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Rise of Async Programming]]></title>
            <link>https://www.braintrust.dev/blog/async-programming</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45210693</guid>
            <description><![CDATA[The workflow that's changing how software gets built.]]></description>
            <content:encoded><![CDATA[
19 August 2025Ankur Goyal
I spend a decent amount of time reviewing code I didn't write. An AI agent takes a detailed problem description, writes code (primarily Typescript, Rust, and Python), adds tests, and commits the changes to a branch. I tap back in when everything's ready for review.
This used to feel like a futuristic scenario, but it's how I work now, and it's how many developers are starting to work. The shift is subtle but powerful: instead of writing code line by line, we're learning to describe problems clearly and let tools solve them in the background.

This version of "async programming" is different from the classic definition. It's about how developers approach building software.
The workflow looks like this:

Define the problem clearly. Write a detailed specification of what needs to be built, including edge cases, constraints, and success criteria.
Hand it off. Delegate the implementation to an AI agent, a teammate, or even your future self with comprehensive notes.
Return later. Come back to review results, provide feedback, and decide on next steps.

The key difference from traditional programming is the time separation between problem definition and implementation. Instead of immediate feedback loops, you have background problem solving driven by clear requirements and automated verification.
Async programming is not vibe coding. Vibe coding enables you to write code without getting into the nitty gritty details. Async programming is a workflow for developers to solve more complex problems simultaneously, while still understanding the details
of the code being written. You're still architecting solutions, reviewing implementations, and maintaining a codebase. You're just not typing a vast majority of characters yourself.

For async programming to work in practice, you need three things: a clear definition of the problem you're solving, a way to automatically verify your results, and human-driven code review.
1. Clear problem definitions
The quality of your problem statement determines everything else. Vague requirements produce vague results. Precise specifications produce working code.
Here's the difference:
Vague: "Make the search faster"
Precise: "My goal is to reduce search latency from about 800ms to around 200ms. I suspect the root cause is the heap allocation I'm doing on each batch of rows. Can you try refactoring the allocation to happen once per search, instead, and measure the impact?"
The precise version includes the current state, target outcome, proposed approach, and acceptance criteria. An AI agent (or human teammate) can work independently because the requirements are unambiguous.
Effective async programming specs read like technical documentation: they include context, constraints, examples, and explicit success criteria. If you can't explain the problem clearly, you probably don't understand it well enough to delegate it.
2. Automated verification
Async programming only works if you can verify results without manual testing every edge case. You need systems that can check the work automatically.
This might include:

Unit and integration tests that validate core functionality
Type checking that catches interface mismatches
Performance benchmarks that ensure code meets speed requirements
Linting and formatting that enforce style guidelines

The goal is developing a process that agents can use to validate their work independently. This takes time. You'll provide significant guidance initially, then develop patterns that allow agents to work autonomously. Setting this up in CI is challenging but enables background agents to perform work outside your development environment.
3. Detailed code review
Once you're not typing every character yourself, code review becomes absolutely crucial. I regularly find PRs that solve the completely wrong problem, make poor design decisions, or have large amounts of code duplication.
Reviewing AI-generated code is valuable, similar to traditional code review. Expect to spend significantly more time on code review than before.
The code may not be yours line by line, but the system design and technical decisions should still reflect your judgment.

My workflow has changed since adopting async programming. I now work on four or five tasks simultaneously: one complex problem synchronously and three or four in the background. When I context switch, I review in-progress work on each background task, provide guidance, and return to synchronous work or code review.

We've been using async programming to build Braintrust itself, and now we're building tools to translate these ideas to AI engineering.
Traditional prompt engineering is manual. You write a prompt, test it against examples, observe failures, make small adjustments, and repeat. The process requires expertise but involves significant iteration.
Our agent, Loop, lets you describe the evaluation problem you're trying to solve and spends time in the background analyzing experiment results, identifying patterns in failed test cases, and suggesting improvements to prompts, datasets, and scorers.

The implications of working this way are still emerging. This changes what I optimize for as a developer: less time on IDE shortcuts and typing speed, more time explaining problems clearly and reviewing solutions thoroughly.
The implementation work can happen in parallel with other thinking. More developers will likely adopt this approach as tools improve. AI isn't replacing programming, but the most valuable parts of programming are becoming more prominent while routine tasks move to the background.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: I built a minimal Forth-like stack interpreter library in C]]></title>
            <link>https://news.ycombinator.com/item?id=45210654</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45210654</guid>
            <description><![CDATA[This weekend I created stacklib.h - a single-header library that brings Forth-style stack operations to C. It implements a basic interpreter with:]]></description>
            <content:encoded><![CDATA[This weekend I created stacklib.h - a single-header library that brings Forth-style stack operations to C. It implements a basic interpreter with:- Stack operations (push/pop/dup/swap/over/drop)
- Arithmetic (+, -, *, /)
- Output (., emit, cr)
- Stack inspection (.s, depth)Example usage:
Stack s;
stack_init(&s);
dict_init();
exec(&s, "10 20 + ."); // Prints "30"
exec(&s, "1 2 3 4 .s"); // Shows stack contentsThe library is self-contained, requires no dependencies, and handles basic error checking. It was inspired by wanting to understand how Forth works at a fundamental level while keeping the simplicity of C.I'm curious what other stack-based or concatenative programming enthusiasts think about this approach. Has anyone else built something similar? What features would you add to make it more useful?GitHub: https://github.com/Ferki-git-creator/stacklib]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Gregg Kellogg has passed away]]></title>
            <link>https://lists.w3.org/Archives/Public/public-json-ld-wg/2025Sep/0012.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45210564</guid>
            <description><![CDATA[Received on Thursday, 11 September 2025 11:58:56 UTC]]></description>
            <content:encoded><![CDATA[

Dear Members of the group,

We were informed yesterday of the passing last Saturday of Gregg Kellogg. It is terrible news but Gregg had been open about his health <https://greggkellogg.net/health-faq.html>.

Gregg had been a prolific and appreciated W3C contributor for many years as a W3C Invited Expert, most recently as co-chair of the JSON-LD Working Group; he was also Chair of several data-related Community Groups. He was said to truly value the energy, brilliance, and camaraderie he found in his groups, and to feel rewarded for being part of such an inventive community.

Over the past 13 years [1], Gregg has been co-editor of 9 published recommendations, and a dozen other W3C specifications (CSV2RDF suite, a large portion of the RDF 1.2 suite, 1.0 and 1.1 versions of the JSON-LD suite, RCH, etc.) Remarkably, Gregg also provided open-source implementations of all these specifications (and more), as well a numerous test suites that the relevant Working Groups are still using. His implication in the JSON-LD Working Group was instrumental in the huge success of this W3C technology.

For all this, but also and foremost for his friendliness and good nature, he will be missed.

If any of you would like to pay tribute to honor Gregg Kellogg, please get in touch with the JSON-LD Working Group Staff Contact, Pierre-Antoine Champin <pierre-antoine@w3.org>, as this group is currently making plans.

With kind regards,
Coralie Mercier, Director of W3C Marketing & Communications

[1] https://api.w3.org/users/8nomt3nm1n8cw4s44koggo4wcoo8w4s/specifications


[This message was distributed to:
* the Members mailing list;
* the W3C Groups chairs mailing list;
* the public mailing lists of the WG and CGs that Gregg was chairing: public-json-ld-wg public-json-ld public-rdf-tests public-schemaorg]


--
Coralie Mercier (she/her) - Director of W3C Marketing & Communications 
mailto:coralie@w3.org - https://www.w3.org/People/Coralie/

Received on Thursday, 11 September 2025 11:58:56 UTC
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Piramidal (YC W24) Is Hiring Back End Engineer]]></title>
            <link>https://www.ycombinator.com/companies/piramidal/jobs/1HvdaXs-full-stack-engineer-platform</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45210539</guid>
            <description><![CDATA[We are looking for a software engineer to help us enable interactions and automations with Piramidal’s newest technologies. We value proactive, customer-centric engineers who prioritize foundational details (data models, architecture, security) to enable excellent products.
In this role you will:
Build and maintain the infrastructure and backend systems for our flagship platform focused on neural data.
Collaborate closely with ML engineers to iterate on applying our latest models. and
Work with the product team and our internal customers to understand their problems and implement effective solutions.
Your background looks something like:
3+ years of engineering at product-driven companies.
Proficiency with Python and other backend languages.
Proficiency with containerisation and orchestration technologies (e.g., Kubernetes).
Proficiency with relational databases (e.g. Postgres/MySQL).
Proficiency with web technologies (e.g. JavaScript, React).
Ability to move fast and independently.
About Us
We are building a first-of-its-kind foundation model for electrophysiological brain data. Our goal is to create scaled neural decoders that enable humans to understand and control neural syntax. 
We are dedicated to redirecting technology to maximize human potential. At the heart of our mission is support for cognitive liberty - the fundamental right to freedom of thought, mental privacy, and self-determination.]]></description>
            <content:encoded><![CDATA[Foundation Model for the BrainFull Stack Engineer - Platform$120K - $210K•0.10% - 0.50%•New York, NY, US / San Francisco, CA, US / Remote (San Francisco, CA, US; Chicago, IL, US; Austin, TX, US)Job typeFull-timeRoleEngineering, Full stackExperience3+ yearsVisaUS citizen/visa onlySkillsPython, Software ArchitectureConnect directly with founders of the best YC-funded startups.Apply to role ›About the roleWe are looking for a software engineer to help us enable interactions and automations with Piramidal’s newest technologies. We value proactive, customer-centric engineers who prioritize foundational details (data models, architecture, security) to enable excellent products.
In this role you will:

Build and maintain the infrastructure and backend systems for our flagship platform focused on neural data.
Collaborate closely with ML engineers to iterate on applying our latest models. and
Work with the product team and our internal customers to understand their problems and implement effective solutions.

Your background looks something like:

3+ years of engineering at product-driven companies.
Proficiency with Python and other backend languages.
Proficiency with containerisation and orchestration technologies (e.g., Kubernetes).
Proficiency with relational databases (e.g. Postgres/MySQL).
Proficiency with web technologies (e.g. JavaScript, React).
Ability to move fast and independently.

About Us
We are building a first-of-its-kind foundation model for electrophysiological brain data. Our goal is to create scaled neural decoders that enable humans to understand and control neural syntax.
We are dedicated to redirecting technology to maximize human potential. At the heart of our mission is support for cognitive liberty - the fundamental right to freedom of thought, mental privacy, and self-determination.
About the interview
Initial Screen: 30 minute discussion to ensure timelines, experience and expectations align.
Technical Screen: 1:15h live coding and system design via Google Meet.
Product screen: Product strategy, prioritisation, and user needs.

About PiramidalFounded:2024Batch:W24Team Size:10Status:ActiveLocation:New YorkFoundersSimilar Jobs]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Brussels faces privacy crossroads over encryption backdoors]]></title>
            <link>https://www.theregister.com/2025/09/11/eu_chat_control/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45210442</guid>
            <description><![CDATA[: Over 600 security boffins say planned surveillance crosses the line]]></description>
            <content:encoded><![CDATA[
Europe, long seen as a bastion of privacy and digital rights, will debate this week whether to enforce surveillance on citizens' devices.
Representatives from member states will meet on Friday to consider legislation critics call Chat Control, aka "laying down rules to prevent and combat child sexual abuse," which seeks to require ISPs or messaging app providers to scan user content or backdoor encryption so that intelligence agencies can do it themselves. It's the latest attempt in a three-year campaign by some in the community to allow government agencies unprecedented access to private communications.
The proposed legislation has been in the works since 2022 but immediately drew fire from security professionals. After being rejected by EU member states repeatedly, this latest attempt has come at the request of the Danish delegation, which currently holds the EU presidency, and should go to a full vote next month.

    

An open letter signed by more than 600 security academics, practitioners, and stakeholders has called on the proposals to be dropped and claimed they are unworkable and highly intrusive. It also points out that the false positive detection rate for such a serious crime is unacceptable and could lead to many people being unfairly smeared.

        


        

One signatory, Matthew Green, associate professor of computer science at the Johns Hopkins Information Security Institute, told The Register that the plans, if implemented, would be a "national security disaster."
He pointed out that if encryption backdoors were implemented, adversarial nations would see it as a "Manhattan Project" which could be used to expose all data, and if client-side scanning was used then it would create a privacy nightmare.

        

The revised legislative proposals call for systems to be set up to find all current "and new" forms of CSAM, but decline to give any guidance as to how this seemingly impossible task would be achieved. Government and military communications would be exempt from the plan.
"It is science fiction," fellow signatory Bart Preneel, the Belgian cryptographer and former president of the International Association for Cryptologic Research, told us. "The latest draft extends the detection order to new CSAM – it is assumed that AI can do this in a reliable way 'quod non.'" This is a Latin term loosely translated as "which it does not."
While there are plenty of companies that would love to provide this service, they lack the technical expertise to do so, he pointed out. Also, the best estimates show around a 10 percent false positive rate for client-side scanning – which could see a huge number of people accused of crimes they didn't commit.


EU attempt to sneak through new encryption-eroding law slammed by Signal, politicians

European Court of Human Rights declares backdoored encryption is illegal

German Digital Affairs Committee hearing heaps scorn on Chat Control

Scanning phones to detect child abuse evidence is harmful, 'magical' thinking

If passed, the legislation would require encrypted app makers like WhatsApp, iMessage, Signal, Telegram, and Tuta to find ways to enforce such scanning – something they have neither the ability nor the desire to do.
Similar legislation has passed in the UK, but with an admission that the plans for message scanning are unworkable at the moment. Attempts to enforce them have failed, and drawn the ire of the US government, which has warned it would not look on such proposals favorably.

        

Signal, possibly the gold standard of end-to-end encrypted services, has said it will fight any moves to enforce such rules. Tuta spokesperson Hanna Bozakov told us that the company would not comply and would consider moving outside the EU if the legislation passed, but only after fighting it in the courts.
"First of all, we will sue, because we are pretty certain that this will not stand up in court," she said. "You can't do this because we have privacy rights in the EU Constitution, and you can't just overwrite this."
However, sources told The Register that some EU members might be getting cold feet about the plans. Two people told us that the German delegation, which has previously been highly skeptical of the proposals, could ask for a delay for further consideration. We'll see on Friday what happens. ®                                
                    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Reshaped is now open source]]></title>
            <link>https://reshaped.so/blog/reshaped-oss</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45209558</guid>
            <description><![CDATA[After five years of closed-source, Reshaped is finally open for all – both in React and Figma.]]></description>
            <content:encoded><![CDATA[About five years ago, I started Reshaped.
I built it for myself, since I had a few projects in urgent need of a component library for both React and Figma.
Having worked in the design systems space for over a decade, I had developed a clear sense of what a good design system should be — and what tends to go wrong in others.
I noticed that no matter how trends evolve, around 80% of the web is still built on the same core design practices.
So I set out to build a system that covers that 80%, while giving developers the flexibility to handle the last 20% with low-level utilities.
From the start, I didn’t want to focus only on accessibility or only on design.
Instead, I prioritized alignment between design and engineering, while also solving common UI challenges like theming, dark mode, and micro-animations.
To keep the project sustainable, I made it a paid product: one-time licenses for individuals, and source code licenses for larger teams.
This allowed me to focus on supporting a smaller community and dive deeply into every bug report and feature request.
While this model kept me motivated and financially supported, I always hoped to remove the paywall one day.
Two years ago, I took the first step by making the React package free.
That unlocked new possibilities—not only did indie developers gain free access, but teams using Reshaped with source code licenses could now install it directly from npm.


Today, I’m taking the next step: making all of Reshaped fully open source. The React library source code is now on GitHub and the Figma library is available in the Figma Community.
I’m especially excited because Reshaped bridges both design and engineering, and I hope it helps both communities learn best practices for building design systems that scale while staying minimal.
Making both libraries public also opens the door for me to share more behind-the-scenes work as new features roll out.
I think this is particularly valuable when it comes to integration with other tools.
Imagine Figma or React releasing new features – you’ll be able to see how they’re implemented in Reshaped before you even need to migrate your company’s design system.


Reshaped component libraries will continue to grow.
Everyone who purchased licenses in the past will still get full access to future updates, and we’ll keep chatting through the same channels.
Nothing changes there.
I’m also interested in taking Reshaped further by introducing more complex, opinionated premium components on top of the core library.
Not “50 landing page layouts,” but advanced components that require sophisticated CSS and React logic.

This is a leap of faith for me after five years of working closed-source.
It feels like the right time to give everything back to the community—and to have some fun along the way ❤️
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[DeepCodeBench: Real-World Codebase Understanding by Q&A Benchmarking]]></title>
            <link>https://www.qodo.ai/blog/deepcodebench-real-world-codebase-understanding-by-qa-benchmarking/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45209532</guid>
            <description><![CDATA[Read about Qodo's new benchmark, which evaluates how well AI agents navigate and understand large, complex enterprise codebases using real-world questions.]]></description>
            <content:encoded><![CDATA[
									
											
					At Qodo, we’ve created a new benchmark dataset of real-world questions derived from large, complex code repositories. We are excited to release the dataset, methodology, and prompts used in its creation to support further research and development.
Motivation
Enterprises often maintain massive codebases that are difficult for any individual developer to navigate and fully understand. Whether onboarding, doing routine development, or using AI-assisted workflows, teams often have questions about their codebase. To effectively address this, we’ve developed specialized retrieval capabilities within our research agents. However, to benchmark and validate these systems effectively, we require a robust set of real-world questions and answers.
Prior Work
Existing benchmarks, such as CodeQA, primarily contain artificially generated code with questions limited to provided code snippets, requiring no retrieval from broader contexts. Another recent work (arXiv:2407.02883) involves real-world scenarios but focuses on retrieval from databases rather than code repositories, which does not adequately represent common real-world use-cases.
To address this gap, we propose a new approach. We introduce a benchmark based on realistic questions derived from pull requests that require retrieval across multiple files in a codebase.
Dataset Generation
To effectively challenge retrieval systems, questions in our benchmark must:

Require deep retrieval, often spanning multiple interconnected files.
Reflect realistic questions developers encounter when solving actual issues.

We identified that pull requests (PRs) are good sources for complex code changes with proper context that can be used for question and answer generation. PRs naturally link related code, not always through explicit imports or function calls, but through functional changes made together. We leveraged this insight to generate context:

For each code change within a PR, we retrieved its containing method, class or file from the current default branch.
We bundled these retrieved code snippets along with the PR’s title and description to form a meaningful context..

Using the above mentioned PR data as context, we prompt large language models (LLMs) to generate questions relevant to real developer workflows, ensuring authenticity and practical value (see prompt in Appendix). The same context is also used to generate the ground-true answer.

Example
Consider PR 39363 of Hugging Face’s Transformers repository. This PR touches 4 files in different places, including methods such as:

BaseImageProcessorFast.__init__ (src/transformers/image_processing_utils_fast.py)
BaseVideoProcessor.__init__  (src/transformers/video_processing_utils.py)

We are not concerned with the exact code changes in the PR. Instead, we use the PR as a signal to locate blocks of code that are functionally related and should be considered together.
We try to find these methods in the updated code to avoid asking questions about irrelevant code. We don’t always find them, due to renames and refactors, but in this PR we found both BaseImageProcessorFast and BaseVideoProcessor.
In the next step, we pass the complete methods, along with the PR title, description, and the prompt in Appendix A, to an LLM, asking it to generate a question.
For this PR, the generated question is:
How do the fast image and video processor base classes prevent shared mutable state when instantiating multiple instances?
And the answer is:
Both the fast image and video processor bases deep-copy their mutable defaults when you instantiate them. In BaseImageProcessorFast.__init__ (src/transformers/image_processing_utils_fast.py) and BaseVideoProcessor.__init__ (src/transformers/video_processing_utils.py) they loop over all valid kwargs and do:

 If you passed a value, use it;
Otherwise, setattr(self, key, deepcopy(getattr(self, key))), and they rebuild size/crop_size via get_size_dict.

 By deep-copying every default dict/list on init, no two instances share the same mutable object.
Dataset Statistics
We generated 1,144 questions derived from eight open-source repositories. Below are detailed insights into the characteristics of the dataset:
Context Distribution
The histograms illustrate the distribution of context used for each question:

Number of Context Blocks: Indicates how many individual code blocks were involved in generating each question.
Number of Context Files: Reflects the number of distinct files utilized per question.

In the example above, there are two blocks across two files. However, PRs often touch multiple methods within the same file, resulting in more blocks than files.

Categorical Breakdown
Scope:

Deep: Questions focusing on specific, detailed aspects of a single block of code.
Broad: Questions involving interactions or relationships across multiple code blocks or files.

Core Questions: Questions targeting fundamental, core functionality versus those focusing on peripheral technical details.
Searchable Questions: Questions containing specific keywords or identifiers that facilitate direct searches within the codebase.

Evaluation Mechanism: LLM as a Judge

Evaluating model predictions requires an objective and scalable approach.Rather than relying solely on subjective LLM judgment, we:

Extracted discrete, verifiable facts from each ground-truth (GT) answer.
Checked whether each fact appeared in the predicted answer using a simple LLM call.

This method, that we call “fact recall,” was introduced in the 2003 TREC (Text REtrieval Conference) QA Track (paper, overview) and is widely used today – for example in Google/DeepMind’s SAFE and in the TREC 2024 RAG Track (e.g., MSR/Waterloo’s AutoNuggetizer). It ensures robust, objective, and scalable assessment of model performance.
Baselines
To better understand our dataset, we established several baseline evaluations:

Ground Truth (GT) answers: Verifies both the accuracy of fact extraction and the reliability of the automated fact verification method
LLM with full context: Provides an LLM with all context used to generate the questions, setting an upper-bound performance baseline.
LLM with no context: Evaluates how well an LLM could answer questions using only the repository name, capturing inherent model knowledge and setting a lower-bound baseline.

These baselines help evaluate the quality of the dataset, validate our evaluation methods, and measure the inherent knowledge of different LLMs.
Results
We evaluated Codex CLI, Claude Code, and our Deep Research agent in Qodo Aware.

Overall: Qodo’s deep-research agent achieves the best fact recall (~76%), just ahead of OpenAI’s Codex (~74%), while being about twice as fast. Also, with the high reasoning feature, we reached (~80%) with a tradeoff on runtimes, where we see a 10-second optimization for our agent. Both outperform Claude (~64%) and Gemini (~45%).
Searchable: All agents improved with searchable keywords in the question, but our DeepResearch’s gain was smallest thanks to strong semantic search.
Scope: Codex and Claude preferred deep over broad questions, while DeepResearch performed equally well on both due to wide search capabilities.

Overall results

Results by data segment




scope

codex-cli
claude-code
gemini-cli

deep-research (Qodo)




broad

0.72
0.6
0.41
0.76


deep
0.76
0.67
0.48

0.77









Searchable 

codex-cli
claude-code
gemini-cli
deep-research(Qodo)


False
0.73
0.59
0.43
0.76


True
0.76
0.68
0.47
0.77



What We’re Releasing

Dataset: 1,144 carefully curated question-answer pairs – deep_code_bench.
Metadata and context: Each question is linked to the pull request (PR) it was generated from and tagged with category labels (e.g., broad/deep, is searchable).
Prompts: The exact prompts used to guide question and answer generation.

Appendix A – prompt for question generation
System Prompt
You are helping build a high-quality dataset of real-world codebase questions to test our search AI agents. Each question should require the agent to search through the codebase to find the relevant code.
Guidelines
Your task is to generate exactly ONE onboarding question adhering to these guidelines:

The question must be clearly grounded in the provided code context.
Do not include exact file paths, line numbers, or raw code snippets in the question text.
Prefer questions involving relationships across multiple functions, components, or files.
Keep the wording concise, clear, and readable.
Avoid vague reference to code elements like ‘the function’ or ‘that class’.
Don’t make identifier references (function names, class names, variables, etc.) too obvious, so that the search will be as challenging as possible.
Despite the above, the question should still be answerable, and the context should be unambiguous.
The question should be answerable with a short, concise response—ideally, a single short sentence.

Scopes
There are 2 kinds of scopes. When provided with only 1–2 short code blocks, generate a DEEP question: a highly specific question that explores internal logic, error handling, edge cases, or detailed behaviors. When provided with multiple code blocks or a larger context, generate a BROAD question: a higher-level question about architecture, overall flow, interactions between modules, or general system design.
Core questions
Core questions targeting fundamental, core functionality versus non-core questions which are focusing on peripheral technical aspects.
PR details
If a PR title and description are provided, use them only to infer the high-level subject of the question. Think of questions that the developer needs to know in order to address the PR. The question must still be answerable using the code context. If the PR text lacks details, base the question solely on the code.
Examples
Here are examples to illustrate the desired style and scope:
Broad question examples:

What is the general workflow for training and deploying a transformer-based language model?
Can you describe the internal steps involved in performing hyperparameter tuning with a grid search?
What’s the end-to-end flow involved in generating images using diffusion-based models?

Deep question examples:

How are gradient updates managed when training gradient-boosted decision trees on sparse data?
Which parameter directly controls the number of leaves permitted in each decision tree of a gradient boosting algorithm?
How does a functional deep learning API internally handle merging layers with multiple input tensors?

Core question examples:

How are token and positional embeddings combined and fed into the BERT model?
How does the Keras Layer base class manage weight creation and the build/call lifecycle?
What happens in one XGBoost boosting iteration—how are new trees grown and combined?

Output format
Return the question, its type, whether it is a core question, and the relevant NODE IDENTIFIER headers from the context as a JSON object with keys ‘question’, ‘scope’, ‘is_core_question’, and ‘nodes’ (a list of strings). Wrap the JSON in triple backticks.
User message prompt
PR info:
{pr_context}
Code context:
{context}
Based on the PR information and code above, write ONE question and return only the requested JSON.

				
					
						
					
				
			]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Germany is not supporting ChatControl – blocking minority secured]]></title>
            <link>https://digitalcourage.social/@echo_pbreyer/115184350819592476</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45209366</guid>
        </item>
        <item>
            <title><![CDATA[PgEdge Goes Open Source]]></title>
            <link>https://www.pgedge.com/blog/pgedge-goes-open-source</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45209065</guid>
            <description><![CDATA[All the core components of pgEdge Distributed Postgres, along with any other pgEdge repositories that previously used the pgEdge Community License have now been re-licenced under the permissive PostgreSQL License, as approved by the Open Source Initiative!]]></description>
            <content:encoded><![CDATA[In November last year after nearly two decades at my previous gig, I came to the conclusion that I didn’t want to work at what seemed to be rapidly becoming an AI-focused company and moved to pgEdge where the focus is well and truly on distributed PostgreSQL and Postgres generally. Distributed databases (and particularly Postgres of course) have always been a passion of mine – even being a key topic of my master’s dissertation many years ago.Moving to pgEdge was a breath of fresh air. Not only did I get to work with some outstanding engineers and other folks on Postgres, but a good number of them were friends and colleagues that I’d worked with in the past. I’ve since had the privilege of hiring even more colleagues from the Postgres world, and look forward to expanding the team even further with more fantastic engineers from the PostgreSQL and wider database communities.There was a wrinkle in my ideal view of how things should be though - the key components of pgEdge were “source available” and not Open Source. That means the source code to our replication engine known as Spock and key extensions such as Snowflake which provides cluster-wide unique sequence values and Lolor which enables logical replication of large objects, had a proprietary licence – known as the pgEdge Community License – which allowed you to view and modify the source code, but limited how you could actually use it. Well, I’m pleased to be able to say that that is no longer the case. All the core components of pgEdge Distributed Postgres, along with any other pgEdge repositories that previously used the pgEdge Community License have now been re-licenced under the permissive PostgreSQL License, as approved by the Open Source Initiative!We’re proud to be able to make this change to support Open Source software and contribute to the PostgreSQL ecosystem, and I’m looking forward to seeing us continue to expand our contributions as much as we can.So, if you want to try out multimaster distributed Postgres, and get involved with the development of the technology, head on over to GitHub and in particular check out the spock, snowflake, and lolor repositories.If you just want to use the tech without having to build it yourself or are looking for supported builds for production use, then we have cloud, container, and VM options you can try out on our website.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GrapheneOS accessed Android security patches but not allowed to publish sources]]></title>
            <link>https://grapheneos.social/@GrapheneOS/115164133992525834</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45208925</guid>
        </item>
        <item>
            <title><![CDATA[Court rejects Verizon claim that selling location data without consent is legal]]></title>
            <link>https://arstechnica.com/tech-policy/2025/09/court-rejects-verizon-claim-that-selling-location-data-without-consent-is-legal/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45206567</guid>
            <description><![CDATA[Verizon and T-Mobile lost, but AT&T beat the FCC. SCOTUS may have to step in.]]></description>
            <content:encoded><![CDATA[
          
          
Instead of providing notice to customers and obtaining or verifying customer consent itself, Verizon "largely delegated those functions via contract," the court said. This system and its shortcomings were revealed in 2018 when "the New York Times published an article reporting security breaches involving Verizon's (and other major carriers') location-based services program," the court said.
Securus Technologies, a provider of communications services to correctional facilities, "was misusing the program to enable law enforcement officers to access location data without customers' knowledge or consent, so long as the officers uploaded a warrant or some other legal authorization," the ruling said. A Missouri sheriff "was able to access customer data with no legal process at all" because Securus did not review the documents that law enforcement uploaded.
Verizon claimed that Section 222 of the Communications Act covers only call-location data, as opposed to device location data. The court disagreed, pointing to the law's text stating that customer proprietary network information includes data that is related to the location of a telecommunications service, and which is made available to the carrier "solely by virtue of the carrier-customer relationship."
"Device-location data comfortably satisfies both conditions," the court said.
Verizon chose to pay fine, giving up right to jury trial
As for Verizon's claim that the FCC violated its right to a jury trial, the court said that "Verizon could have gotten such a trial" if it had "declined to pay the forfeiture and preserved its opportunity for a de novo jury trial if the government sought to collect." Instead, Verizon chose to pay the fine "and seek immediate review in our Court."
By contrast, the 5th Circuit decision in AT&T's favor said the FCC "acted as prosecutor, jury, and judge," violating the right to a jury trial. The 5th Circuit said it was guided by the Supreme Court's June 2024 ruling in Securities and Exchange Commission v. Jarkesy, which held that "when the SEC seeks civil penalties against a defendant for securities fraud, the Seventh Amendment entitles the defendant to a jury trial."
The 2nd Circuit ruling said there are key differences between US telecom law and the securities laws considered in Jarkesy. It's because of those differences that Verizon had the option of declining to pay the penalty and preserving its right to a jury trial, the court said.
In the Jarkesy case, the problem "was that the SEC could 'siphon' its securities fraud claims away from Article III courts and compel payment without a jury trial," the 2nd Circuit panel said. "The FCC's forfeiture order, however, does not, by itself, compel payment. The government needs to initiate a collection action to do that. Against this backdrop, the agency's proceedings before a § 504(a) trial create no Seventh Amendment injury."


          
                  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Where did the Smurfs get their hats (2018)]]></title>
            <link>https://www.pipelinecomics.com/beginning-bd-smurfs-hats-origin/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45206311</guid>
            <description><![CDATA[What's that hat the Smurfs wear? And what's it covering up? Do Smurfs have luxurious locks of hair? Are they bald? And, most crucial of all, is it the wrong hat?!?]]></description>
            <content:encoded><![CDATA[
	
	
That white floppy hat on top of every Smurf’s head.



What is it?  Where did it come from?



Do Smurfs have bald spots?



We’ve got a history lesson coming up here, folks.  Sit back.



But, first, let’s answer a side question:



What’s Under a Smurf’s Hat?



There’s only one true source for information on this question, and that’s Peyo’s comics.  Accept no substitutes. Yes, there are probably moments in various movies and cartoons where a Smurf can been seen without their hat on.  That’s not Peyo.



Peyo showed us one example of a Smurf without a hat.  Go to the classic story, “The Purple Smurf.”  At one point, Papa Smurf’s lab blows up, along with his hat.







Papa Smurf is bald. This doesn’t necessarily mean that Brainy Smurf isn’t sporting a pompadour under his hat or that Hefty Smurf doesn’t have a buzz cut, but…







We know Smurfs are capable of having hair.  Smurfette has luxurious blonde locks, but she’s also not really a natural born Smurf.  Technically, she’s a concoction of Gargamel’s.  But let’s give his spell-making the benefit of the doubt.  Maybe Smurfs can have hair.



I mean, where do Smurfs come from?  What’s the genetics at work that would determine–



–wait, no, I’m not going down that rabbit hole.



Papa Smurf is definitely bald.  I bet you already assumed that, though. Let’s move on.



Where Do Smurfs Get Such Wonderful Hats?



It’s called a Phrygian cap, which is about as much fun to type as Vercingetorix, who is an amazing story for another day.



The headgear is over 2000 years old.  Here’s proof:



By Jastrow (2006), Public Domain, https://commons.wikimedia.org/w/index.php?curid=647031



Handsome fella, isn’t he?  But check out that hat!  He’s totally a Smurf, right?



His name is Attis, and this sculpture comes from somewhere in the 100s AD, though Attis lived even further back, in the 4th century BC.



In that time period, you know who else worse a Smurfs hat?  King Midas.  Yes the guy with the thing for gold. (Croesus is also involved in this story, but let’s not get completely off topic.)



Phrygis, in case your curious, is the name of an ancient group of people who lived in the Balkans region of eastern Europe — Greece, Turkey, Romania, etc.  Their language and culture went extinct by the 5th century AD. Near the end, the Romans thought of them as being lazy and dull.



Those Phrygian caps do kind of resemble a dunce cap, don’t they?  It’s completely unrelated, though.  That’s a dead end.



Liberty and Freedom



The hat is often associated with liberty and freedom. Why?



It was adopted during the French Revolution (at the end of the 18th century AD) as “the red cap of liberty” by the revolutionaries.



You can see one such cap on the French personification of “Liberté”.  Here she is:







Looks just like Papa Smurf’s hat.  And while Peyo was Belgian, he was working with French publishers, so drawing inspiration from a French symbol isn’t too crazy.



The thing that Peyo maybe didn’t realize and the French revolutionaries definitely didn’t realize, though, is that it’s the wrong hat.



The Right Hat







This is the pileus hat.  It’s a brimless hat, often made of felt or maybe wool.  It started in Ancient Greece as a sailor’s hat, and eventually found its way to Ancient Rome, too.



In Rome, a freed slave had his head shaved.  Then, they would wear a pileus, in part to keep their head warm.  The hat was a sign of the slave’s freedom/liberty.



Somewhere along the line in the French Revolution, they adopted the freed slaves’ head gear as their own symbol of freedom, but picked the wrong one.



They didn’t have Google Images back then, so don’t be too hard on them.



I’m sure Peyo picked that hat because it looked good on the Smurfs, helped further set them apart from all the other characters, and would someday make for an awesome free giveaway at Angouleme.



Side By Side



Wikipedia has an image of the Phrygian and Pileus next to each other on the bottom shelf here:



By MisterPlus65 – Own work, CC BY-SA 4.0, https://commons.wikimedia.org/w/index.php?curid=46040581



On the bottom shelf, the Smurfs’ Phrygian cap on the left is next to the pileus in the center there.



Yes, there were metal versions of both that were used as head gear during war times.  Imagine an army of Smurfs coming over the hill to attack!



Glad You Asked?



To sum it all up: Some Greeks had a hat that the Romans borrowed and that their slaves used to represent their freedom.  2000 years later, some French revolutionaries confused that hat for a different one from the Phrygis folks and made it their own sign of freedom.



150 years after that, Peyo created the Smurfs and gave them that hat, but in white.



Here endeth the lesson.





				
		Augie De Blieck Jr.Comic fan since 1989.  Letterhack from 1991.  Pipeline writer since 1997.
		
	]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[DOOMscrolling: The Game]]></title>
            <link>https://ironicsans.ghost.io/doomscrolling-the-game/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45205232</guid>
            <description><![CDATA[Can a game work where all you do is scroll?]]></description>
            <content:encoded><![CDATA[
        This post has gotten popular! Welcome to the newsletter. If you enjoy this, please subscribe. It’s free!We’re all familiar with doomscrolling, spending too much time scrolling endless feeds of content that make you feel bad about everything.But sometimes when I hear the word “doomscrolling” it makes me think of two other things: the classic video game Doom and, well, scrolling.That got me wondering if I could make a Doom-inspired game in a web browser where the only thing you do to play is scroll. No moving your character laterally, no jumping. Just scrolling.So I made it. And it’s fun! Here’s a small clip:That’s what the game looks like. But here’s what playing it feels like:You can go play it right now on desktop or mobile. The rest of this newsletter is the non-technical story of how I made the game.The first time was a failureAs readers know, I’m not a coder, but I enjoy how vibe coding lets me turn an idea into something real. So naturally, I turned to vibe coding for this.It didn’t work.This was around nine months ago. I tried and tried, but none of the LLMs were able to help me go from idea to a playable game at all. Like, not even close. GPT-4 absolutely refused to understand that scrolling down a page means that the background should move up the page. I ended up with something kinda pathetic that didn’t even resemble a game. So I gave up, figuring this was either beyond an LLM’s skills, beyond my skills, or both.But then GPT-5 came out a few weeks ago, and I tried again to see how much better it might be at coding. In just two hours I had a very good prototype. I even made a little title screen for my prototype so it felt more like a real game:I described the game design to ChatGPT very broadly at first. I said it should work kinda like Galaga turned upside-down. But I explained that unlike Galaga, the player moves forward and backward rather than side to side, and that the monster’s position should remain relative to the floor. That and a few more details got me surprisingly far as a first step.For prototyping purposes, I asked ChatGPT to just come up with five different monsters, each one with a two-frame animation, like Space Invaders aliens. They were little more than basic shapes, and I figured at some point I’d replace them with actual pre-rendered monster sprites. But this worked for now.The original 5 monstersThen I went on vacation. I spent an hour or two each morning over coffee working on this game until the kids woke up, gradually adding and refining features one at a time.Improving the gameI focused on making the game more fun to play, with incentives to keep moving but also things to stop you from racing through it too fast. I added things like weapon upgrades for every 100 monsters you kill, a wall of fire that chases you if you stay in one place too long, and obstacles to slow you down, like brick walls and spider webs.Don’t let the wall of fire get youSome other little quality-of-life features I came up with include:Five different background textures so you can have a different visual experience each time you play.Health potions. The first one appears when you’re down to three health points. After that, they are more rare and may require weapon upgrades to reach.A visual marker when you pass your record distanceA pause screen with some statsMaking it really DoomscrollingI was pretty happy with the game and ready to share it. But then at the last minute I got another nagging idea in the back of my mind: What if it was somehow more like actual doomscrolling?It would be easy to get an RSS Feed of headlines from a news site. Could I make them appear in the game as you scroll, in a way that felt integrated with the game?First I tried having headlines just appear on the floor as you play, but it felt very tacked-on. So I came up with some lore for the game that helped.I decided that the game takes place in the future, in a lair that was sealed up today, whatever day you happen to be playing the game. And the civilization that sealed up the cave left behind plaques featuring today’s headlines for some unexplained reason. So as you play, you encounter these plaques that each has a bit of news from when the cave was sealed up. Today’s actual news.It’s not really doomscrolling if there isn’t awful news to readThe plaques have no effect on the game, except to the extent that they tempt you to read them and get distracted from the gameplay. But they’re just decorative elements. Feel free to ignore them. If you can.The headlines all come from the New York Times front page RSS feed. So in a sense, this game is actually an extremely complex single-feed RSS reader.Working with AI is still a pain. This was my solution.If you’ve ever tried to work with AI, you’ve likely run into a roadblock where you’re describing something over and over and it’s simply not getting it. “No, don’t do it that way, for the umpteenth time, do it this way.”I still planned on making the monsters as pre-rendered sprites, but the background textures, plaques, and decorative items like torches could still be rendered in-game if I could just get GPT-5 to understand what I want them to look like. An LLM isn’t really good at making artwork like this.So I simplified things. I had the AI set up simple “labs,” standalone test pages where we could work on different designs, using the style from the game. For example, here’s one “lab” I made for testing how some in-world elements would look on different backgrounds:Everything above is rendered on the fly. One big advantage of that approach is that I could randomize some visual elements in the game. For example, look at the spider webs above. They all follow the same rules but they’re all slightly different. The game’s background textures are also slightly different each time you play.Next, I set about making pre-rendered monsters. But wow, small-scale pixel art is hard. I went through a lot of versions of different monsters. Eventually, I had a few I felt were good enough. The game looked like this:It had its own charm, but in the end, I didn’t love it. Somehow, my pre-rendered monsters made the game feel worse. Maybe it’s because I just am not a good pixel artist.So I decided to see what I could do with ChatGPT in a “lab” like I did for other in-game items, but focused on monster designs. After a lot of experimentation, I settled on the simple monsters that ended up in the game:I assume doing all this computationally is more processor-intensive than using pre-rendered monsters, but it’s very smooth for me on both desktop and phone, so it must not be too intensive. I guess I’ll hear from people if it’s choppy on their device.Sometimes I still needed a little more control over how something looked. So in those cases I had ChatGPT build labs with sliders that I could adjust to decide how I want things to appear, instead of getting frustrated with the chatbot. This way I could quickly settle on a look and feel.Here for example is the lab page for the plaques. I wanted them to look integrated into the game world, so I described the parameters I wanted to play with for the text styling and plaque itself. We put a “copy settings” button that I could use to report back to the LLM once I liked it, so I could say “Okay, let’s go with these settings in the game.”I’ve made this lab page live for you to play with if you’re curious.Ship itThere are still features and adjustments I’d like to add, but I’m not on vacation anymore, so think I just need to stop here. I may still tweak it, but for now I’m calling version 1.0 ready to ship. It has successfully scratched my itch to see if I could make a fun scrolling-only game, which was really all I wanted.It should play equally well on mobile and desktop. The only difference is that with a taller device you can see more of the world at a time, which makes it a little easier.Oh, and you can save it to your home screen so it acts like a standalone app rather than a browser game. That’s how I play.Happy Doomscrolling!And that’s it for another newsletter!Here’s where I remind you that you can support my endeavors by becoming a paid member, or making a one-time donation. Every little bit matters.And if not, that’s okay, too. But maybe you can share the newsletter? Moving from Beehiiv to Ghost resulted in a subscriber hit, which I anticipated because the same thing happened when I first left Substack. It took a while to begin growing again after the first move, and you can help me get back to positive growth by spreading the word now that I’ve landed at Ghost. It would mean the world to me.Until next time, thanks as always for reading!David
    ]]></content:encoded>
        </item>
    </channel>
</rss>