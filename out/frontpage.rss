<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Fri, 05 Sep 2025 21:29:17 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Gym Class VR (YC W22) Is Hiring – UX Design Engineer]]></title>
            <link>https://www.ycombinator.com/companies/gym-class-by-irl-studios/jobs/ywXHGBv-ux-design-engineer-senior-staff-principal</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45143548</guid>
            <description><![CDATA[Role Summary
Gym Class is the top rated social sports game on Meta Quest - millions of downloads, 79,000+ reviews, and a 4.9-star rating. We’re hiring our founding UX Design Engineer to drive the development of our upcoming mobile web app (embedded in native), and web surfaces inside our flagship, social VR experience.
You’ll own key UX surfaces end-to-end - crafting in Figma, then building responsive, production-grade UI with React/Node/CSS - and you’ll set a clear quality bar for speed, polish, and accessibility. If you love living at the intersection of design taste and front-end engineering, owning a high-compact roadmap for a startup, and shipping to a highly engaged social audience - this role is for you.
WHAT YOU'LL DO
Ship end-to-end features: Turn rough ideas and user feedback into polished flows - wireframes → interactive Figma → production React/Node.
Drive the web roadmap: Propose, scope, and deliver improvements across mobile and VR platforms, social flows, profiles, discovery, chat and AI, spectating - balancing velocity and quality.
Build a design system: Create reusable components and interaction patterns; advocate consistency across mobile web and in-VR web surfaces.
Hit performance budgets: Optimize for fast loads and 60fps interactions on mobile and VR.
Tighten quality loops: Instrument analytics, run lightweight usability tests, and iterate quickly based on real player behavior.
QUALIFICATIONS - you are…
A designer-who-codes (or an engineer with taste): 3–6+ years building consumer web products. Strong Figma skills and a shipped portfolio of design + code work.
Front-end strong: Expert in React, TypeScript/JavaScript, HTML, CSS (layouts, animations, responsive design). You care about spacing, typography, and micro-interactions.
Performance-minded: Comfortable profiling, code-splitting, image/asset strategy, caching/CDN, and keeping bundles lean.
Pragmatic & fast: You scope well, communicate clearly, and ship iteratively without sacrificing polish.
Entrepreneurial: High-ownership, comfortable with ambiguity. Ex-founders and builders who like to run with problems do great here.
Pay and Benefits
Salary ranges may be inclusive of several career levels and will be narrowed during the interview process based on a number of factors, including the candidate’s experience, qualifications, and location. Additional benefits for this role include: equity; and medical, dental, and vision benefits; and 401k retirement plan with matching.]]></description>
            <content:encoded><![CDATA[Play sports in virtual realityUX Design Engineer (Senior / Staff / Principal)$170K - $240K•0.10% - 0.50%•US / CA / MX / Remote (US; CA; MX)Job typeFull-timeRoleEngineering, FrontendExperience6+ yearsVisaUS citizen/visa onlySkillsDesign systems, Figma, CSS, Node.js, ReactConnect directly with founders of the best YC-funded startups.Apply to role ›About the roleRole Summary
Gym Class is the top rated social sports game on Meta Quest - millions of downloads, 79,000+ reviews, and a 4.9-star rating. We’re hiring our founding UX Design Engineer to drive the development of our upcoming mobile web app (embedded in native), and web surfaces inside our flagship, social VR experience.
You’ll own key UX surfaces end-to-end - crafting in Figma, then building responsive, production-grade UI with React/Node/CSS - and you’ll set a clear quality bar for speed, polish, and accessibility. If you love living at the intersection of design taste and front-end engineering, owning a high-compact roadmap for a startup, and shipping to a highly engaged social audience - this role is for you.
WHAT YOU'LL DO

Ship end-to-end features: Turn rough ideas and user feedback into polished flows - wireframes → interactive Figma → production React/Node.
Drive the web roadmap: Propose, scope, and deliver improvements across mobile and VR platforms, social flows, profiles, discovery, chat and AI, spectating - balancing velocity and quality.
Build a design system: Create reusable components and interaction patterns; advocate consistency across mobile web and in-VR web surfaces.
Hit performance budgets: Optimize for fast loads and 60fps interactions on mobile and VR.
Tighten quality loops: Instrument analytics, run lightweight usability tests, and iterate quickly based on real player behavior.

QUALIFICATIONS - you are…

A designer-who-codes (or an engineer with taste): 3–6+ years building consumer web products. Strong Figma skills and a shipped portfolio of design + code work.
Front-end strong: Expert in React, TypeScript/JavaScript, HTML, CSS (layouts, animations, responsive design). You care about spacing, typography, and micro-interactions.
Performance-minded: Comfortable profiling, code-splitting, image/asset strategy, caching/CDN, and keeping bundles lean.
Pragmatic & fast: You scope well, communicate clearly, and ship iteratively without sacrificing polish.
Entrepreneurial: High-ownership, comfortable with ambiguity. Ex-founders and builders who like to run with problems do great here.

Pay and Benefits
Salary ranges may be inclusive of several career levels and will be narrowed during the interview process based on a number of factors, including the candidate’s experience, qualifications, and location. Additional benefits for this role include: equity; and medical, dental, and vision benefits; and 401k retirement plan with matching.
About Gym Class - by IRL StudiosGym Class is a top-rated social VR game on Meta Quest with over +79,000 reviews and a 4.9-star rating​. Millions of players join to connect with friends, explore social worlds, and engage in competitive games. The community launched around basketball, and is now expanding rapidly into more categories.
The company's mission is to connect the world by simulating it. To achieve this, Gym Class recently raised over $8M from the world's top technology investors, including Andreessen Horowitz (a16z), Y Combinator, the National Basketball Association, the Golden State Warriors, top NBA players like Kevin Durant, Lonzo Ball, Andre Iguodala, Soma Capital, Founders Inc., Danny Green, Zaza Pachulia, Todd and Rahul's Angel Fund, Balaji Srinivasan, and more. In 2023, the company announced a licensing relationship with the NBA, and in 2025, its licensing relationship with the MLB.
Learn more at gymclass.com or follow @gymclassvr.
Founded:2021Batch:W22Team Size:18Status:ActiveLocation:Los Angeles, CAFoundersSimilar Jobs]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[California AG to OpenAI: Harm to Children Will Not Be Tolerated]]></title>
            <link>https://oag.ca.gov/news/press-releases/attorney-general-bonta-openai-harm-children-will-not-be-tolerated</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45143209</guid>
            <description><![CDATA[OAKLAND — California Attorney General Rob Bonta and Delaware Attorney General Kathy Jennings this week met with and sent a letter to OpenAI expressing their deep concern over increased reports of how OpenAI’s products interact with children. Because OpenAI operates in California, Attorney General Bonta is currently investigating the company’s proposed financial and governance restructuring.]]></description>
            <content:encoded><![CDATA[
      
                    
            Press Release
Attorney General Bonta to OpenAI: Harm to Children Will Not …
                                       
                    

  
  Contact: (916) 210-6000, agpressoffice@doj.ca.govOAKLAND — California Attorney General Rob Bonta and Delaware Attorney General Kathy Jennings this week met with and sent a letter to OpenAI expressing their deep concern over increased reports of how OpenAI’s products interact with children. Because OpenAI operates in California, Attorney General Bonta is currently investigating the company’s proposed financial and governance restructuring. This week's meeting comes a week after Attorney General Bonta and 44 attorneys general sent a letter to 12 of the top AI companies, following reports of sexually inappropriate interactions between AI chatbots and children. 
“I am absolutely horrified by the news of children who have been harmed by their interactions with AI — including one young Californian who died by suicide after interacting with a chatbot. This is extremely worrying for parents, policy makers, and regulatory leaders everywhere — and I certainly expect alarms to be blaring inside the walls of AI companies around the world,” said Attorney General Bonta. “As the fourth largest economy in the world, California knows that protecting our kids and pursuing innovation can and must go hand in hand; they are not opposites. My office, working alongside Delaware Attorney General Jennings, has been reviewing the proposed restructuring of OpenAI. Together, we are particularly concerned with ensuring that the stated safety mission of OpenAI as a non-profit remains front and center. OpenAI purports to build AI to benefit all of humanity. Humanity includes children. And before we can even get to benefiting, we need to get to not harming. This week, I expressed my extreme dismay at OpenAI's current approach to AI safety and made clear that California is paying very close attention to how the company is crafting their policies surrounding AI safety, especially when it comes to interacting with children. Companies developing and deploying AI technologies must exercise sound judgment and must not hurt children. One child harmed is one too many.”
The letter by Attorney General Bonta and Attorney General Jennings to the OpenAI board is attached here.

      
       
      
       
      
       
      
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[I kissed comment culture goodbye]]></title>
            <link>https://sustainableviews.substack.com/p/the-day-i-kissed-comment-culture</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45143077</guid>
        </item>
        <item>
            <title><![CDATA[Anthropic agrees to pay $1.5B to settle lawsuit with book authors]]></title>
            <link>https://www.nytimes.com/2025/09/05/technology/anthropic-settlement-copyright-ai.html?unlocked_article_code=1.jk8.bTTt.Zir9wmtPaTp2&amp;smid=url-share</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45142885</guid>
        </item>
        <item>
            <title><![CDATA[My Own DNS Server at Home – Part 1: IPv4]]></title>
            <link>https://jan.wildeboer.net/2025/08/My-DNS-Part-1/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45142397</guid>
            <description><![CDATA[“It’s always DNS” is a famous meme among network people. Name resolution is technically quite simple. It’s “just” translating a hostname like jan.wildeboer.net to an IP address. What could possibly go wrong? I am a radical optimist and detail-obsessed knowledge collector, so I decided to find out. As part of my goal to make my home network a little island of Digital Sovereignty, meaning that everything at home should JustWork™, even with no working internet connection, a DNS server is needed.]]></description>
            <content:encoded><![CDATA[
        “It’s always DNS” is a famous meme among network people. Name resolution is technically quite simple. It’s “just” translating a hostname like jan.wildeboer.net to an IP address. What could possibly go wrong? I am a radical optimist and detail-obsessed knowledge collector, so I decided to find out. As part of my goal to make my home network a little island of Digital Sovereignty, meaning that everything at home should JustWork™, even with no working internet connection, a DNS server is needed.


  Based on and extended from my gist Bind on Fedora 42 as DNS server.


I admit, I have a lot of experience with DNS and BIND. But I still consider myself to be merely on the GoodEnough™ side of things. I know how to get DNS configured for my domains. And I want you to feel fearless too. The best place to fail with DNS is the network at home. It limits the impact :)

So read this blog post either as report or as a HOWTO. Both ways can be fun!

In my homelab I have a Raspberry Pi 4 that runs infrastructure services. DNS is one of them, my private CA (Certificate Authority) another. The CA runs as a container on Podman. For DNS I use Bind. It thus has to serve 3 networks:


  192.168.1.0/24 My home IPv4 network
  172.16.0.0/16 IPv4 Network on the second ethernet ports of my homelab servers
  10.88.0.0/16 The (virtual) podman network


It uses my Fritz box (7490) as forwarder, so I can resolve all hosts, including the DHCP entries that the Fritz Box hands out under its default local domain name fritz.box. For my homelab however, I use the homelab.jhw domain name. That’s what the Bind DNS server has to take care of.


  WARNING 
I really should use the official .internal TLD (Top Level Domain) for my homelab network, but I decided against it. This introduces the risk of name resolution problems, should someone offer a public .jhw TLD in future. It’s a risk I am willing to accept in exchange for using a 3 letter TLD at home. Don’t be like me! Use .internal instead. With that out of the way, let’s continue.


What we (well, I) have

Let’s gather what I have in my home network.


  inf01.homelab.jhw at 192.168.1.10: A Raspberry Pi 4 4GB, running Fedora 42 and podman with my Certificate Authority as a container that should be reachable as ca.homelab.jhw. See Be the LetsEncrypt in your homelab with step-ca for more details.
  3 ThinkCentre Tiny PCs in the homelab.jhw zone, called hl01 (192.168.1.11), hl02 (192.168.1.12) and hl03 (192.168.1.13), running RHEL10 (Red Hat Enterprise Linux)
  A Fritz Box 7490 at 192.168.1.254


Let’s install BIND on inf01

We need to do two things. Install BIND and some utilities on inf01 and open the firewall for DNS traffic.

dnf install bind bind-utils
firewall-cmd --add-service=dns --permanent


That was easy enough :)

Configure BIND

To run BIND in the correct way, we need to work on 3 configuration files.


  /etc/named.conf The main configuration file where we tell BIND on which networks it should listen and what zones it will serve.
  /var/named/forward.homelab.jhw The forward zone file that maps hostnames in the homelab.jhw domain to IP addresses on my home network
  /var/named/reverse.homelab.jhw The reverse zone for the 192.168.1.0/24 network range, that looks a bit confusing, that does the opposite. It maps IP addresses to hostnames.
  /var/named/reverse2.homelab.jhw The second reverse zone for the 172.16.0.0/16 network range.


Let’s start with /etc/named.conf.

//
// named.conf
//

options {
  listen-on port 53 { 127.0.0.1; 192.168.1.10; 172.16.1.10; 10.88.0.1; };
  listen-on-v6 port 53 { ::1; fdda:a4da:69a5:0:2783:8c26:b2f1:a6f7; };
  allow-query     { localhost; 192.168.1.0/24; 172.16.0.0/16; 10.88.0.0/16; };

  directory       "/var/named";

  dump-file       "/var/named/data/cache_dump.db";
  statistics-file "/var/named/data/named_stats.txt";
  memstatistics-file "/var/named/data/named_mem_stats.txt";
  secroots-file   "/var/named/data/named.secroots";
  recursing-file  "/var/named/data/named.recursing";

  forwarders { 192.168.1.254; };
  recursion yes;

  dnssec-validation no;

  managed-keys-directory "/var/named/dynamic";
  geoip-directory "/usr/share/GeoIP";

  pid-file "/run/named/named.pid";
  session-keyfile "/run/named/session.key";

  /* https://fedoraproject.org/wiki/Changes/CryptoPolicy */
  include "/etc/crypto-policies/back-ends/bind.config";
};

logging {
        channel default_debug {
                file "data/named.run";
                severity dynamic;
        };
};

zone "." IN {
	type hint;
	file "named.ca";
};

zone "homelab.jhw" IN {
	type master;
	file "forward.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};

zone "1.168.192.in-addr.arpa" IN {
	type master;
	file "reverse.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};

zone "16.172.in-addr.arpa" IN {
        type master;
        file "reverse2.homelab.jhw";
        allow-update { none; };
        allow-query { any; };
};

include "/etc/named.rfc1912.zones";
include "/etc/named.root.key";


The first block declare the general options. Yes, it looks complicated and it is, but let’s walk you through every relevant line (the lines not mentioned are default entries that don’t need to be changed).

listen-on port 53 { 127.0.0.1; 192.168.1.10; 172.16.1.10; 10.88.0.1; };
listen-on-v6 port 53 { ::1; fdda:a4da:69a5:0:2783:8c26:b2f1:a6f7; };
allow-query     { localhost; 192.168.1.0/24; 172.16.0.0/16; 10.88.0.0/16; };


Here we tell BIND that it should listen for queries on port 53 on localhost, 192.168.1.10, the IPv4 address in my hoem network, 172.16.1.10, the second IPv4 address configured and 10.88.0.1, the virtual IPv4 address the Raspberry uses to bridge to the local podman containers.

The second line does the same for IPv6, but that is something we will discuss in Part 2.

The third line tells BIND from whom to accept queries. Essentially from everyone on the three IPv4 networks we are listening to.

directory       "/var/named";


This is the directory where BIND will look for its zone files, that we will define later.

forwarders { 192.168.1.254; };
recursion yes;


Now what if someone asks for a hostname that is outside of homelab.jhw? In that case we tell BIND to forward that question to 192.168.1.254, our Fritz Box. We will allow recursion and cache results we get from our Fritz box to avoid unneeded traffic.

dnssec-validation no;


Our simple setup will not bother with DNSSEC at the moment. Maybe we will have a Part 3 for that.

OK. That was the options part. We will ignore the logging part and the zone "." IN block.

Next (and finally) we define three zone entries (and zone files). A forward zone called homelab.jhw for our domain and two reverse zones for the IP addresses in the 192.168.1.0/24 range called 1.168.192.in-addr.arpa. Yep. That’s 192.168.1 reversed. 1.168.192. That’s why it’s called the reverse zone ;) We also have 16.172.in-addr.arpa for the 172.16.0.0/16 range. Let’s look at them.

zone "homelab.jhw" IN {
	type master;
	file "forward.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};


It’s a zone, all right. It’s the master for this zone, meaning that this DNS server will be the Source of Truth to  answer all queries for the homelab.jhw hostnames.

The exact mapping of all hostnames to IP addresses is in a file called forward.homelab.jhw in the directory /var/named. Remember how we defined that path at the beginning in the options part? Great! We also tell BIND that we do not allow dynamic updates for this zone, meaning that what’s in the file is all we will look at. Finally we tell BIND that any machine in the network is allowed to ask for a reply.

zone "1.168.192.in-addr.arpa" IN {
	type master;
	file "reverse.homelab.jhw";
	allow-update { none; };
	allow-query { any; };
};

zone "16.172.in-addr.arpa" IN {
        type master;
        file "reverse2.homelab.jhw";
        allow-update { none; };
        allow-query { any; };
};


The reverse zones with the weird looking zone names are almost the same, except that we define these in two files called reverse.homelab.jhw for the reverse lookup of the 192.168.1.0/24 range and reverse2.homelab.jhw for the 172.16.0.0/16 range. Why these zones have weird names will be explained later.

So now we go to the zone files!

Forward zone for homelab.jhw

The forward zone resolves names to IP addresses using A records (and other types like TXT, CAA and many more exist, but we won’t cover that in this post). It also contains CNAME entries, if you have services on one machine that should be reachable via more than one hostnames. In my homelab the CA (Certificate Authority) server is a container that runs on inf01.homelab.jhw, but should be reachable as ca.homelab.jhw in the home network. The CNAME entry does exactly that. It tells clients that when they want to talk to ca.homelab.jhw they can. By actually talking to inf01.homelab.jhw.

Now here is the big, important lessen for zone files. They have a serial number. Which MUST be incremented with every change. If you don’t, weird things WILL happen. So:


  NEVER FORGET TO INCREASE THE SERIAL WITH EVERY CHANGE TO A ZONE FILE. OR RISK DNS HELL.


/var/named/forward.homelab.jhw

$TTL 3600
@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082706  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
@       IN  NS          inf01.homelab.jhw.
@       IN  A           192.168.1.10

inf01           IN  A     192.168.1.10
hl01            IN  A     192.168.1.11
hl02            IN  A     192.168.1.12
hl03            IN  A     192.168.1.13

ca              IN  CNAME inf01.homelab.jhw.

inf01-m         IN  A     172.16.1.10
hl01-m          IN  A     172.16.1.11
hl02-m          IN  A     172.16.1.12
hl03-m          IN  A     172.16.1.13


Again, let’s go through this.

$TTL 3600


The default Time To Live (TTL) for DNS entries is set at 3600 seconds. That’s 1 hour. This means that when a machine in the network gets a DNS reply, it will not ask again for the same thing until the TTL has passed.

@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082706  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)


The Start Of Authority (SOA) block. Here we say which DNS server is the owner of this domain. It’s inf01.homelab.jhw. (yes, that dot at the end is REALLY important). The root.homelab.jhw actually means root@homelab.jhw and is the email address responsible for this domain. Don’t think to much about why and what :)

@       IN  NS          inf01.homelab.jhw.
@       IN  A           192.168.1.10


The first “real” DNS entries! They are special, as the @ indicates, which means they represent the domain itself. We first define the nameserver (again? yes, don*‘t ask) as NS record. And right after that we define the A record as the IP address 192.168.1.10.

Did you notice that . at the end of inf01.homelab.jhw.? That’s another VERY important thing. The TL;DR is that this final . tells DNS to stop doing fancy recursion and lookups. Just look for the hostname `inf01.homelab.jhw. Period. (pun intended). Don’t care too much about this. Just remember:

EVERY HOSTNAME RECORD ENDS WITH A . YOU WILL FORGET THIS. YOU WILL FIX THIS.

inf01           IN  A     192.168.1.10
hl01            IN  A     192.168.1.11
hl02            IN  A     192.168.1.12
hl03            IN  A     192.168.1.13


Here come the A records for 192.168.1.0/24! We finally get to map hostnames to IP addresses. For real! It now is quite self-explanatory, isn’t it? The hostname gets an A record that is the IP address in my local network. And as these are IP addresses, no . is needed at the end.

ca              IN  CNAME inf01.homelab.jhw.


And here is the CNAME record. Which maps the hostname ca.homelab.jhw to the Canonical NAME (CNAME) inf01.homelab.jhw.. This is a hostname at the end! So it needs the . Period :)

inf01-m         IN  A     172.16.1.10
hl01-m          IN  A     172.16.1.11
hl02-m          IN  A     172.16.1.12
hl03-m          IN  A     172.16.1.13


And here we create another set of A records for the same machines, but this time in the 172.16.0.0/16 range. This range is used for management stuff, hence the -m.

And that’s the gist of it. If you add a new machine to your network, configure it with an IP address (statically or with DHCP) and add it as an A record to the forward zone. Increment the serial and tell DNS to read the updated zone with systemctl reload named. Done.

Reverse zones for 192.168.1.0/24 and 172.16.0.0/16

The reverse zone maps IP addresses to hostnames. Often called the PTR or pointer record. You have to make sure that the entries here are synced to the forward zone.


  NEVER FORGET TO INCREASE THE SERIAL WITH EVERY CHANGE TO A ZONE FILE. Or risk DNS hell.


Here is the reverse zone for the 192.168.1.0/24 range.

/var/named/reverse.homelab.jhw

$TTL 3600
@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082601  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
@       IN  NS          inf01.homelab.jhw.
@       IN  PTR         homelab.jhw.
10      IN  PTR         inf01.homelab.jhw.
11      IN  PTR         hl01.homelab.jhw.
12      IN  PTR         hl02.homelab.jhw.
13      IN  PTR         hl03.homelab.jhw.


As this is more or less the same but the other way round, I will not go through everything but instead explain the differences. It’s the reverse zone, so now we have PTR (pointer) entries that map an IPv4 address in the 192.168.1.0/24 range to hostnames. WITH A DOT AT THE END. DO NOT FORGET THE DOT!

As this is a /24 block, we only need to set the last digit of the IPv4 address.

You might wonder, where is ca here? Well, it’s CNAME is info1.homelab.jhw and that already is in this reverse zone. That is good enough. No separate entry needed.

We also need the reverse zone for the 172.16.0.0/16 range:

/var/named/reverse2.homelab.jhw

$TTL 3600
@   IN  SOA     inf01.homelab.jhw. root.homelab.jhw. (
        2025082901  ;Serial
        3600        ;Refresh
        1800        ;Retry
        604800      ;Expire
        86400       ;Minimum TTL
)
@       IN  NS          inf01.homelab.jhw.
@       IN  PTR         homelab.jhw.
10.1      IN  PTR         inf01-m.homelab.jhw.
11.1      IN  PTR         hl01-m.homelab.jhw.
12.1      IN  PTR         hl02-m.homelab.jhw.
13.1      IN  PTR         hl03-m.homelab.jhw.


Looks deceivingly similar. But there is a big difference. This is a /16 network, so we have to define the last two parts of the IPv4 address. And as it is a reverse zone file, yep, we have to reverse it. So now we need 10.1 to define the entry for 172.16.1.10, which is the hostname inf01-m.homelab.jhw. WITH THE DOT AT THE END. AND DID YOU UPDATE THE SERIAL? :)

Phew. That’s the config done!

A final check with the named-checkconf command, which should say nothing when all files are OK. If not, it will tell you what is wrong so you get the chance to fix stuff. You did add all the . at the end of hostnames and you did update the serial of that zone file after you made changes, yes?

Start Bind

The only thing remaining is to start BIND. And persist it as a service, so it starts after every boot. It’s DNS. It must always be available.

systemctl enable named
systemctl start named


You most likely will make typos in your config. So do check with named-checkconf  and systemctl status named and journalctl -u named. If something breaks, read this whole entry again. Find that missing . in a zone file. Increment the serial that you forgot to do. You will get there. Don’t give up!

Result

Machines, containers etc can now be resolved in my home network. All with mow own DNS! Yay!

% nslookup jhwfritz.fritz.box
Server:		192.168.1.10
Address:	192.168.1.10#53

Non-authoritative answer:
Name:	jhwfritz.fritz.box
Address: 192.168.1.254

% nslookup ca.homelab.jhw    
Server:		192.168.1.10
Address:	192.168.1.10#53

ca.homelab.jhw	canonical name = inf01.homelab.jhw.
Name:	inf01.homelab.jhw
Address: 192.168.1.10


And now you should be able to ping the machines with their hostname. ssh into them. Get certificates with the CA that runs in the podman container. Life is good!

I hope you enjoyed this post and could learn something new! Feel free to comment or send corrections vie the Toot linked below that collects the comments!
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fantastic Pretraining Optimizers and Where to Find Them]]></title>
            <link>https://arxiv.org/abs/2509.02046</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45141762</guid>
            <description><![CDATA[AdamW has long been the dominant optimizer in language model pretraining, despite numerous claims that alternative optimizers offer 1.4 to 2x speedup. We posit that two methodological shortcomings have obscured fair comparisons and hindered practical adoption: (i) unequal hyperparameter tuning and (ii) limited or misleading evaluation setups. To address these two issues, we conduct a systematic study of ten deep learning optimizers across four model scales (0.1B-1.2B parameters) and data-to-model ratios (1-8x the Chinchilla optimum). We find that fair and informative comparisons require rigorous hyperparameter tuning and evaluations across a range of model scales and data-to-model ratios, performed at the end of training. First, optimal hyperparameters for one optimizer may be suboptimal for another, making blind hyperparameter transfer unfair. Second, the actual speedup of many proposed optimizers over well-tuned baselines is lower than claimed and decreases with model size to only 1.1x for 1.2B parameter models. Thirdly, comparing intermediate checkpoints before reaching the target training budgets can be misleading, as rankings between two optimizers can flip during training due to learning rate decay. Through our thorough investigation, we find that all the fastest optimizers such as Muon and Soap, use matrices as preconditioners -- multiplying gradients with matrices rather than entry-wise scalars. However, the speedup of matrix-based optimizers is inversely proportional to model scale, decreasing from 1.4x over AdamW for 0.1B parameter models to merely 1.1x for 1.2B parameter models.]]></description>
            <content:encoded><![CDATA[
    
    
                
    View PDF
    HTML (experimental)
            Abstract:AdamW has long been the dominant optimizer in language model pretraining, despite numerous claims that alternative optimizers offer 1.4 to 2x speedup. We posit that two methodological shortcomings have obscured fair comparisons and hindered practical adoption: (i) unequal hyperparameter tuning and (ii) limited or misleading evaluation setups. To address these two issues, we conduct a systematic study of ten deep learning optimizers across four model scales (0.1B-1.2B parameters) and data-to-model ratios (1-8x the Chinchilla optimum). We find that fair and informative comparisons require rigorous hyperparameter tuning and evaluations across a range of model scales and data-to-model ratios, performed at the end of training. First, optimal hyperparameters for one optimizer may be suboptimal for another, making blind hyperparameter transfer unfair. Second, the actual speedup of many proposed optimizers over well-tuned baselines is lower than claimed and decreases with model size to only 1.1x for 1.2B parameter models. Thirdly, comparing intermediate checkpoints before reaching the target training budgets can be misleading, as rankings between two optimizers can flip during training due to learning rate decay. Through our thorough investigation, we find that all the fastest optimizers such as Muon and Soap, use matrices as preconditioners -- multiplying gradients with matrices rather than entry-wise scalars. However, the speedup of matrix-based optimizers is inversely proportional to model scale, decreasing from 1.4x over AdamW for 0.1B parameter models to merely 1.1x for 1.2B parameter models.
    

    
    
              
          Comments:
          108 pages, 8 figures, reproducible runs available at this https URL
        

          Subjects:
          
            Machine Learning (cs.LG); Artificial Intelligence (cs.AI); Machine Learning (stat.ML)
        
          Cite as:
          arXiv:2509.02046 [cs.LG]
        
        
           
          (or 
              arXiv:2509.02046v1 [cs.LG] for this version)
          
        
        
           
                        https://doi.org/10.48550/arXiv.2509.02046
              
                                arXiv-issued DOI via DataCite (pending registration)
            
          
        
    
  
      Submission history From: Kaiyue Wen [view email]          [v1]
        Tue, 2 Sep 2025 07:43:22 UTC (701 KB)
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Making a font of my handwriting]]></title>
            <link>https://chameth.com/making-a-font-of-my-handwriting/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45141636</guid>
            <description><![CDATA[Recently I’ve been on a small campaign to try to make my personal website more… personal. Little ways to
            make it obvious it’s mine and personal, not just another piece of the boring corporate
            dystopia that is most of the web these days. I don’t quite want to fully regress to the Geocities era and
            fill the screen with animated under construction GIFs, but I do want to capture some of that vibe.]]></description>
            <content:encoded><![CDATA[
          
            Recently I’ve been on a small campaign to try to make my personal website more… personal. Little ways to
            make it obvious it’s mine and personal, not just another piece of the boring corporate
            dystopia that is most of the web these days. I don’t quite want to fully regress to the Geocities era and
            fill the screen with animated under construction GIFs, but I do want to capture some of that vibe.
          
          
            I’d added some bits and pieces along those lines: floating images in articles now look like they’re stuck to
            the page with sellotape, related post links have a wavy border that animates when you hover over them, and
            so on. Next, I wanted to change the heading fonts from a monospace font to something cursive, to resemble
            handwriting. Less terminal output, more handwritten letter. I couldn’t find one I liked, though. So why not
            make my own? It can’t be that hard, right?
          
          Failing to do it myself
          
            I set out to try to make the font myself using open source tools. After doing a bit of research, it seemed
            like the general approach was to create vectors of each character and then import them into a font editor.
            That seems to mean either Adobe Illustrator and FontLab (if you have too much money) or Inkscape and
            FontForge (if you like open source). I fall firmly into the latter category, so I grabbed my graphics tablet
            and opened Inkscape.
          
          
            I wrote out my first three letters: capital A, B and C. Saved them in Inkscape, and attempted to import them
            into FontForge. Then I remembered one crucial thing that had slipped my mind: I absolutely loathe using
            FontForge. It’s a bit like when you open an old version of GIMP and get a bunch of weird looking windows
            floating all over the place; it feels like you’re fighting against the tool to do even the most basic
            operations. The difference is I have cause to edit images a lot more than I edit fonts, and GIMP
            has actually significantly improved their UI over the years.
          
          Here are the rough steps I went through with FontForge:
          
            Launch Font Forge. It shows a weird bit of art in one window, and an open file dialog in another.
            I don’t want to open a file, so I close that dialog. The program exits.
            Relaunch Font Forge, and realise that within the “Open Font” dialog is a “New” button. Click it.
            
              Get to the standard font-editing UI. Right-click on the “A” looking for a way to import an SVG. Don’t see
              one.
            
            
              Click around a bit, exploring the menus. Everything feels a bit off. You can’t open one menu then hover
              over the next to see its content, like basically every UI toolkit in existence. I think FontForge has
              eschewed QT and GTK in favour of doing things itself.
            
            Find the “Import” option in the File menu. Hope it’s for a single glyph not the whole font.
            
              A file picker opens. Again it’s all a bit off from normal desktop conventions. Try to resize it, and just
              get blank gray space at the bottom.
            
            Type the absolute path I want to go to in the text field.
            Get a dialog saying “Not a bdf file /home/chris/etc”. Press OK.
            Get a dialog saying “Could not find a bitmap font in”. Press OK.
            
              Press Ctrl+L to see if that lets me enter a path. Click everything in the dialog to try to find a way to
              enter a path. Get annoyed. Give up. Click through folder-by-folder to get to where I want to be.
            
            
              Get to the folder and don’t see any files. Change the format to “SVG”. Double-click the newly-visible SVG
              file.
            
            Get a dialog saying “You must select a glyph before you can import an image into it”. Press OK.
            The import dialog goes away, having not imported.
            Select the glyph in the main tool area, then repeat the File→Import dance.
            
              It’s actually there now! Open the glyph in the editor and see it’s a complete mess of Bézier curves. I
              can’t click what I want without accidentally moving a handle for an adjacent curve.
            
            Rage-quit.
          
          
            I’m sure FontForge is less anger inducing once you’re used to it. And you definitely could use it to build a
            font like this if you had much more patience than me. I’d had enough of death-by-a-thousand-paper-cuts
            though.
          
          
            I briefly tried Inkscape’s built-in support for making an SVG font. It annoyed me a lot less, but it’s
            fiddly: it seemed like each font had to be a single path, so you had to convert the glyphs to paths, then
            merge them correctly. If you merge them incorrectly then the wrong bits of your letters end up filled (like
            the inside of the ‘B’). Path manipulation is getting towards the limit of my knowledge of vector editing,
            and it took a bit of trial and error for each letter that had more than a single stroke. I didn’t fancy
            doing that for every letter.
          
          
            I’m usually a big advocate of open source, but this was one of those painful times where it feels like it
            just falls short. Clunky, painful UI and processes where commercial tools just let you get on with your
            work.
          
          You can exchange money for goods and services
          
            When I’d been looking for open source tutorials, I found many mentions of a closed source, hosted tool:
            Calligraphr. It has a free version with limitations (no
            ligatures, no variations, 75 glyphs per font), and a pro version for £8/month. I’d normally balk at the idea
            of a subscription for this, but they have the perfect answer: you can make a one-time payment, and your
            account automatically downgrades back to free after a month. It’s not a hidden option, either, it’s the most
            prominent button on the upgrade page. That made me happy to give them £8 to play around with the service for
            a month.
          
          
            Calligraphr works by having you print templates, write out the letters, then scan them in. It does some
            magical processing to extract the glyphs, provides tools to tidy them up, align them, etc, and then produces
            a TTF file for you. You can see some of my completed templates here:
          
          
            
              
              
              
            
            Most of the templates I used for the font
          
          
            Calligraphr has a nice UI to generate the templates, allowing you to select which glyphs to include. I added
            the “minimal English”, “basic punctuation” and “Ligatures” sets. That gave me four pages to fill out, and I
            did them all twice. That let me filter out versions that didn’t work well, and have variants for some
            letters so the font wasn’t too repetitive. Later on, I went back and added some custom ligatures based on
            blog post titles that didn’t look quite right: “Re”, “To”, “ers”, “ey”, “hy”, “ra”, “re” and “ty”. Ligatures
            like this help it look more natural: when we write we don’t just stamp out identical letters regardless of
            their surroundings, instead they will connect to their neighbours, or overlap slightly, or even share a
            stroke.
          
          
            I filled these templates in with a Sharpie, as I wanted a fairly informal, scrap-booky look, and it would
            also give good solid shapes that should be easy to pick out of the template. I scanned them with the “Scan
            Document” function on my iPhone, and uploaded the PDFs to Calligraphr.
          
          Iterating and tweaking
          
            The Calligraphr UI allows you to preview the font, but I found it a lot more useful to just download a copy
            and use it on a local copy of my website. That let me test it with real text, and see how it’d look at the
            different font sizes I use on the site.
          
          
            The first version was not great. Despite the guidelines on the template, I apparently wasn’t good at
            sticking to them. Some letters were floating way off the baseline, and some were sunken below. When those
            opposites met it looked terrible. Fortunately Calligraphr has a pretty easy tool to slide each letter up and
            down, and scale it up or down if needed, and you can see it next to other letters as you do it. It took a
            little bit of time to go through all the variants of all the letters, but the next version looked a lot
            better.
          
          
            Another tweak I ended up doing was reducing the spacing between letters. The defaults Calligraphr uses are
            probably good for a blocky font, but I wanted to put the letters close together to give it more of a
            joined-up look. Again, this is an easy tool to use, you just drag the sides in or out as desired. While
            these tweaking steps were probably as fiddly as some of the Inkscape steps I refused to do earlier, they’re
            a lot more rewarding as you see things improving with each one. It’s a lot easier for me to commit time and
            effort to improving something that’s already working reasonably, than put that time and energy into an
            unknown.
          
          
            Later, I noticed that occasionally there would be a huge gap in a title. Not “the kerning is slightly off”
            but “there’s enough room to park a bus”. It took me a while to figure out what was happening: a couple of
            glyphs hadn’t been isolated perfectly and had picked up a few pixels from the template lines at the edge of
            their boxes. That meant the glyph had a width that covered the actual written glyph, a big gap, and then the
            rogue marks. At first, I fixed this by just adjusting the width, but that left the little pixels floating
            awkwardly down-sentence. The proper fix was to use the editing tool and simply delete them, and then
            Calligraphr snapped the width back to what it should be.
          
          
            These iterations took a while to do, but I just dipped in and out occasionally over the course of a week, so
            it didn’t actually feel like too much work. I quite enjoy the process of refining things, too.
          
          Result and a surprise
          
            If you’re viewing this post on my website[1], you can see the font in the headers, captions, and a few other places. Here’s how it compares to my
            actual handwriting:
          
          
            
              
              
              
            
            My handwriting vs my handwriting font
          
          
            It’s not close enough to forge documents, but I think it definitely gets across my style, and that’s exactly
            what I wanted. It’s surprisingly legible even at smaller font sizes — I think the weight of the Sharpie
            helps here — and at £8 and a bit of manual work was a lot more economical than spending days wresting with
            open source tools.
          
          
            A few weeks after I put the finishing touches on the font, I got an e-mail from Calligraphr. As my account
            had lapsed back to the free version, I was no longer eligible for the “server-side backup” feature. So what
            did they do? They e-mailed me an exported copy! It’s a JSON file with the properties of each glyph and a
            base64 encoded image. Not only can I re-upload this to Calligraphr if I resubscribe, I can probably hook
            something up to edit it should I ever need to. I’m blown away by how pro-user Calligraphr’s business
            practices are. They’re up-front about pricing, don’t try and get you stuck on an auto-renewing subscription,
            and automatically export your data. It’s like a breath of fresh air compared to the barrage of dark patterns
            that other websites foist on us. If you want to make this kind of font, I’d definitely recommend them just
            because of how nice they are.
          
          
          
            
              
                
                  And I haven’t changed everything since writing this post…
                  ↩︎
                
              
            
          
        ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: Open-sourcing our text-to-CAD app]]></title>
            <link>https://github.com/Adam-CAD/CADAM</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45140921</guid>
            <description><![CDATA[Contribute to Adam-CAD/CADAM development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[CADAM
A Text to CAD Web Application
What it does:

Generates parametric 3D models from natural language descriptions, with support for both text prompts and image references
Outputs OpenSCAD code with automatically extracted parameters that surface as interactive sliders for instant dimension tweaking
Separate agents for conversation and code generation; simple parameter tweaks bypass AI entirely using deterministic regex-based updates
Exports as .STL or .SCAD
Runs fully in-browser by compiling OpenSCAD to WebAssembly and integrating Three.js with React Three Fiber for 3D rendering
Supports BOSL, BOSL2, and MCAD libraries and custom font support (Geist) for text in models

Prerequisites

Node.js and npm
Supabase CLI
ngrok (for local webhook development)

Setting Up Environment Variables
1. Frontend Environment:

Copy .env.local.template to .env.local
Update all required keys in .env.local:
VITE_SUPABASE_ANON_KEY="<Test Anon Key>"
VITE_SUPABASE_URL='http://127.0.0.1:54321'



2. Supabase Functions Environment:

Copy supabase/functions/.env.template to supabase/functions/.env
Update all required keys in supabase/functions/.env, including:
ANTHROPIC_API_KEY="<Test Anthropic API Key>"
ENVIRONMENT="local"
NGROK_URL="<NGROK URL>" # Your ngrok tunnel URL, e.g., https://xxxx-xx-xx-xxx-xx.ngrok.io



Setting Up ngrok for Local Development
CADAM uses ngrok to send image URLs to Anthropic:


Install ngrok if you haven't already:
npm install -g ngrok
# or
brew install ngrok


Start an ngrok tunnel pointing to your Supabase instance:
ngrok http 54321


Copy the generated ngrok URL (e.g., https://xxxx-xx-xx-xxx-xx.ngrok.io) and add it to your supabase/functions/.env file:
NGROK_URL="https://xxxx-xx-xx-xxx-xx.ngrok.io"



Ensure ENVIRONMENT="local" is set in the same file.


Development Workflow
Install Dependencies
npm i
Start Supabase Services
npx supabase start
npx supabase functions serve --no-verify-jwt
Credits
This app wouldn't be possible without the work of:

OpenSCAD
openscad-wasm
openscad-playground
openscad-web-gui
dingcad

Licenses
This distribution is licensed under the GNU General Public License v3.0 (GPLv3). See LICENSE.
Components and attributions:

Portions of this project are derived from openscad-web-gui (GPLv3).
This distribution includes unmodified binaries from OpenSCAD WASM under
GPL v2 or later; distributed here under GPLv3 as part of the combined work.
See src/vendor/openscad-wasm/SOURCE-OFFER.txt.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Freeway guardrails are now a favorite target of thieves]]></title>
            <link>https://laist.com/news/transportation/guardrails-aluminum-theft</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45140786</guid>
            <description><![CDATA[Nearly 470 sections of guardrailing were stolen in the last fiscal year in L.A. and Ventura counties.]]></description>
            <content:encoded><![CDATA[
                                        
                                            
                                        

                                        

                                        On a recent Thursday evening, traffic was slow on the 10 Freeway as cars crawled into the downtown Los Angeles area. It was an average commute back to Pasadena for Bryan Gonzalez until he saw a man on the other side of the freeway cutting through a guardrail with a reciprocating saw.“OK, there's something weird going on,” Gonzalez said about his observations from Aug. 21, which he captured on video and reported to Caltrans. “I was debating whether or not saying anything, but I said, ‘Hey, I'm in slow traffic. He has a saw. No, thank you.’”

What Gonzalez observed was not a fluke. Guardrail theft is a problem that has been on the rise for the last eight years, according to the local Caltrans office covering L.A. and Ventura counties. Over the last two years, the state transportation agency has spent more than $62,000 on repairs related to guardrail theft in the region.

The man who appeared to be trying to steal the guardrail apparently didn’t succeed. A photo Gonzalez shared with LAist the following week shows an intact guardrail with a mark where the saw was used.California Highway Patrol, whose jurisdiction includes state-owned highways, said it’s investigating the incident. A spokesperson for the agency said it hasn’t found the man in the video.Aluminum, which Caltrans’ guardrails are made from, is just one metal used in public infrastructure that is increasingly stolen and sold to metal scrapyards and recyclers.


Missing guardrailsOver the last several months since he’s been commuting to work in Culver City, Gonzalez said he’s noticed guardrailing disappearing on the 10 Freeway near the 110 Freeway interchange.“I was just equating it to normal wear and tear of accidents and the guardrailing doing what it's supposed to do,” Gonzalez said.

When he saw the man with the saw, Gonzalez said the dots began to connect.
  
  
  
    
    
  
    
    
        
            See an underreported transportation issue? 
        
        
            
                
                    
    LAist learned about guardrail thefts because a listener and reader sent us a video. If there’s a transportation-related issue you feel hasn’t gotten the attention it deserves, let us know. I can be reached at kharjai@laist.com. Or if you prefer something more secure, you can reach me on Signal under the username kharjai.61 or follow this link.

                
            
        
    
  


  

A statement from Caltrans calls guardrail theft an “ongoing” problem in downtown L.A. that causes safety issues for drivers. More specifically, the state transportation agency said there has been “a marked increase in rail theft” along a stretch of the 10 Freeway between Santa Fe Avenue and the 110 interchange.Nearly 470 sections of guardrailing were stolen in the last fiscal year alone in L.A. and Ventura counties, costing the state transportation agency $17,000 to replace, the agency said.Guardrail theft spiked in 2023 after an arsonist set fire to a storage yard beneath the 10 Freeway. Caltrans said it spent $45,000 on repairs in the 2023-24 fiscal year.Google Map Street View images from May 2024 near the San Pedro Street and Central Avenue ramps leading to the 10 Freeway in downtown show additional sections of missing guardrails.



To prevent thefts, Caltrans said it tried welding bolts into the guardrails, but thieves were able to breach that deterrent.The next step the agency is considering is using fiberglass composite instead of aluminum to construct guard rails “to remove the value to the thieves.”
The value of aluminumAluminum is critical to transportation infrastructure, said Lance Hastings, the president and CEO of the California Manufacturers and Technology Association.“Like most base metals, the price of aluminum has increased in recent years,” Hastings said. “Tariffs further disrupt the global supply chain, driving up costs and creating market instability.”President Donald Trump announced 50% tariffs on imported steel and aluminum earlier this summer. In August, the Department of Commerce announced that hundreds of other “derivative” steel and aluminum products would also be subject to tariffs.
Metal theftMetal theft in L.A. is a persistent problem that damages telecom, lighting, train and other critical infrastructure. It also hamstrings government agencies, which, as a result of increasing thefts, say they're unable to keep up with repairs.

The head of the L.A.’s street lighting department told LAist earlier this year that copper wire theft causes 40% of all repairs, up from a quarter just two years ago.

Earlier in August, 60 feet of copper cable was stolen from a portion of the track that services L.A. Metro’s A-line train, resulting in reduced service for about 16 hours, according to a statement from the countywide transportation agency.Ally Happel, an executive at security company ECAM, said thieves will target any materials that are “accessible and easy to sell at a high price.”ECAM uses AI surveillance systems to “detect and predict suspicious activity.” It has partnered with Foothill Transit, as well as the L.A. Police Department and port police.Bronze, brass, iron, lead and steel are also “vulnerable to theft,” Happel said.It’s not just an L.A. problem. Nearly a third of all copper theft and telecom infrastructure vandalism nationwide happened in California, according to state Attorney General Rob Bonta. It’s unclear what the LAPD is doing to address the problem for metal stolen from city infrastructure. The department disbanded its metal theft detail six years ago, according to a report it delivered to City Council last year.There were at least two LAPD metal theft task forces funded by council offices that were active last year. It’s unclear if they still exist.LAPD has not responded to LAist’s repeated questions about the continued existence of those task forces and whether there has been more recent metal theft enforcement actions.
                                    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[European Commission fines Google €2.95B over abusive ad tech practices]]></title>
            <link>https://ec.europa.eu/commission/presscorner/detail/en/ip_25_1992</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45140730</guid>
        </item>
        <item>
            <title><![CDATA[MentraOS – open-source Smart glasses OS]]></title>
            <link>https://github.com/Mentra-Community/MentraOS</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45140381</guid>
            <description><![CDATA[Smart glasses OS, with dozens of built-in apps. Users get AI assistant, notifications, translation, screen mirror, captions, and more. Devs get to write 1 app that runs on any pair of smart glases....]]></description>
            <content:encoded><![CDATA[

    
  
  
    
  

Supported Smart Glasses
Works with Even Realities G1, Mentra Mach 1, Mentra Live. See smart glasses compatibility list here.
Apps on Mentra Store
The Mentra Store already has a ton of useful apps that real users are running everyday. Here are some apps already published by developers on the Mentra Store:

Write Once, Run on Any Smart Glasses
MentraOS is how developers build smart glasses apps. We handle the pairing, connection, data streaming, and cross-compatibility, so you can focus on creating amazing apps. Every component is 100% open source (MIT license).
Why Build with MentraOS?

Cross Compatibility: Your app runs on any pair of smart glasses
Speed: TypeScript SDK means you're making apps in minutes, not months
Control: Access smart glasses I/O - displays, microphones, cameras, speakers
Distribution: Get your app in front of everyone using smart glasses

MentraOS Community
The MentraOS Community is a group of developers, companies, and users dedicated to ensuring the next personal computer is open, cross-compatible, and user-controlled. That's why we're building MentraOS.
To get involved, join the MentraOS Community Discord server.
Contact
Have questions or ideas? We'd love to hear from you!

Email: team@mentra.glass
Discord: Join our community
Twitter: Follow @mentralabs

Contributing
MentraOS is made by a community and we welcome PRs. Here's the Contributors Guide: docs.mentra.glass/contributing
License
MIT License Copyright 2025 MentraOS Community


  
  © 2025 Mentra Labs

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A computer upgrade has shut down BART]]></title>
            <link>https://www.bart.gov/news/articles/2025/news20250905</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45139270</guid>
            <description><![CDATA[Update 09/05/25, 11:45am:]]></description>
            <content:encoded><![CDATA[
            Update 09/05/25, 11:45am:Regular BART service has resumed throughout the system. All stations are now open. East Bay service was restored at 9:30am and full service was restored at 11:45am.This service disruption occurred due to a computer equipment problem following overnight network upgrade work. The work is part of an ongoing multi-year project to upgrade the communications and computer systems, including switches and routers, that support BART operations.We do this work continuously during the hours we are not running. It is not a one night project. Something related to this upgrade work triggered a problem preventing all of our communication systems to come online.  We are investigating exactly what went wrong. Update 09/05/25, 9:15am: Limited East Bay service will start at approximately 9:30am. There is currently no service through the Transbay Tube and no service at any San Francisco stations or on the Peninsula.Yellow Line will service will resume from Antioch to 12th Street Oakland. Blue Line service will resume from Dublin to MacArthur. Orange line service will resume from Berryessa to Richmond. BART to Antioch service is resuming now.A computer equipment problem following network upgrade work is preventing the start of service this morning. Seek alternative means of transportation. bart.gov/alternatives provides options without BART service.
      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Purposeful animations]]></title>
            <link>https://emilkowal.ski/ui/you-dont-need-animations</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45139088</guid>
            <description><![CDATA[Why you are animating more often than you should.]]></description>
            <content:encoded><![CDATA[When done right, animations make an interface feel predictable, faster, and more enjoyable to use. They help you and your product stand out.
But they can also do the opposite. They can make an interface feel unpredictable, slow, and annoying. They can even make your users lose trust in your product.
So how do you know when and how to animate to improve the experience?
Step one is making sure your animations have a purpose.
Purposeful animations
Before you start animating, ask yourself: what’s the purpose of this animation? As an example, what’s the purpose of this marketing animation we built at Linear?

This animation explains how Product Intelligence (Linear’s feature) works. We could have used a static asset, but the animated version helps the user understand what this feature does, straight in the initial viewport of the page.
Another purposeful animation is this subtle scale down effect when pressing a button. It’s a small thing, but it helps the interface feel more alive and responsive.

Sonner’s enter animation, on the other hand, has two purposes:

- Having a toast suddenly appear would feel off, so we animate it in.
- Because it comes from and leaves in the same direction, it creates spatial consistency, making the swipe-down-to-dismiss gesture feel more intuitive.


But sometimes the purpose of an animation might just be to bring delight.
Morphing of the feedback component below helps make the experience more unique and memorable. This works as long as the user will rarely interact with it. It’ll then become a pleasant surprise, rather than a daily annoyance.
Press on the button to see it morph.
Used multiple times a day, this component would quickly become irritating. The initial delight would fade and the animation would slow users down.
How often users will see an animation is a key factor in deciding whether to animate or not. Let’s dive deeper into it next.
Frequency of use
I use Raycast hundreds of times a day. If it animated every time I opened it, it would be very annoying. But there’s no animation at all. That’s the optimal experience.
To see it for yourself, try to toggle the open state of the menu below by using the buttons belowpressing J and then K. Which one feels better if used hundreds of times a day?
Command MenuLinearApplicationChatGPTApplicationCursorApplicationFigmaApplicationObsidianApplicationClipboard HistoryCommandEmoji PickerCommand
When I open Raycast, I have a clear goal in mind. I don’t expect to be “delighted”, I don’t need to be. I just want to do my work with no unnecessary friction.
Think about what the user wants to achieve and how often they will see an animation. A hover effect is nice, but if used multiple times a day, it would likely benefit the most from having no animation at all.
Imagine you interact with this list often during the day.
Imagine you interact with this list often during the day.The same goes for keyboard-initiated actions. These actions may be repeated hundreds of times a day, an animation would make them feel slow, delayed, and disconnected from the user’s actions. You should never animate them.
Since we can’t really use a keyboard on touch devices, you can press the buttons below to see how it feels with and without animation.
To see it for yourself, focus on the input below and use arrow keys to navigate through the list. Notice how the highlight feels delayed compared to the keys you press. Now press  (shift) and see how this interaction feels without animation.Command MenuLinearApplicationChatGPTApplicationCursorApplicationFigmaApplicationObsidianApplicationClipboard HistoryCommandEmoji PickerCommandPress shift to toggle the animation
But even if your animation won’t be used too often and it fulfills a clear purpose, you still have to think about its speed…
Perception of speed
Unless you are working on marketing sites, your animations have to be fast. They improve the perceived performance of your app, stay connected to user’s actions, and make the interface feel as if it’s truly listening to the user.
To give you an example, a faster-spinning spinner makes the app seem to load faster, even though the load time is the same. This improves perceived performance.
Which one works harder to load the data?
A 180ms dropdown animation feels more responsive than a 400ms one:
Click on the buttons to compare the speed.
As a rule of thumb, UI animations should generally stay under 300ms.
Another example of the importance of speed: tooltips should have a slight delay before appearing to prevent accidental activation. Once a tooltip is open however, hovering over other tooltips should open them with no delay and no animation.
This feels faster without defeating the purpose of the initial delay.
Radix UI and Base UI skip the delay once a tooltip is shown.
Radix UI and Base UI skip the delay once a tooltip is shown.Building great interfaces
The goal is not to animate for animation’s sake, it’s to build great user interfaces. The ones that users will happily use, even on a daily basis. Sometimes this requires animations, but sometimes the best animation is no animation.
Knowing when to animate is just one of many things you need to know in order to craft great animations. If you’d like to dive deeper into the theory and practice of it, I’ve created a course that covers everything you need to know:
Check out "Animations on the Web"]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Development speed is not a bottleneck]]></title>
            <link>https://pawelbrodzinski.substack.com/p/development-speed-is-not-a-bottleneck</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45138156</guid>
        </item>
        <item>
            <title><![CDATA[I'm absolutely right]]></title>
            <link>https://absolutelyright.lol/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45137802</guid>
            <description><![CDATA[Claude Code said it 0 times today]]></description>
            <content:encoded><![CDATA[
    
    Claude Code said it 0 times today
    

    
      
      
          
          Absolutely right
        
        
          
          Just right
        
      
    
  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[I ditched Docker for Podman]]></title>
            <link>https://codesmash.dev/why-i-ditched-docker-for-podman-and-you-should-too</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45137525</guid>
        </item>
        <item>
            <title><![CDATA[ML needs a new programming language – Interview with Chris Lattner]]></title>
            <link>https://signalsandthreads.com/why-ml-needs-a-new-programming-language/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45137373</guid>
            <description><![CDATA[Listen in on Jane Street’s Ron Minsky as he has conversations with engineers working on everything from clock synchronization to reliable multicast, build systems to reconfigurable hardware. Get a peek at how Jane Street approaches problems, and how those ideas relate to tech more broadly.]]></description>
            <content:encoded><![CDATA[
		Why ML Needs a New Programming Language
		with Chris Lattner
		
			
				Season 3, Episode 10   |  
			
			September 3rd, 2025
		
		
	
		BLURB

Chris Lattner is the creator of LLVM and led the development of the Swift language at
Apple. With Mojo, he’s taking another big swing: How do you make the process of getting
the full power out of modern GPUs productive and fun? In this episode, Ron and Chris
discuss how to design a language that’s easy to use while still providing the level of
control required to write state of the art kernels. A key idea is to ask programmers to
fully reckon with the details of the hardware, but making that work manageable and
shareable via a form of type-safe metaprogramming. The aim is to support both
specialization to the computation in question as well as to the hardware platform.
“Somebody has to do this work,” Chris says, “if we ever want to get to an ecosystem where
one vendor doesn’t control everything.”

SUMMARY

Chris Lattner is the creator of LLVM and led the development of the Swift language at
Apple. With Mojo, he’s taking another big swing: How do you make the process of getting
the full power out of modern GPUs productive and fun? In this episode, Ron and Chris
discuss how to design a language that’s easy to use while still providing the level of
control required to write state of the art kernels. A key idea is to ask programmers to
fully reckon with the details of the hardware, but making that work manageable and
shareable via a form of type-safe metaprogramming. The aim is to support both
specialization to the computation in question as well as to the hardware platform.
“Somebody has to do this work,” Chris says, “if we ever want to get to an ecosystem where
one vendor doesn’t control everything.”

Some links to topics that came up in the discussion:


  Democratizing AI
compute
(an 11-part series)
  Modular AI
  Mojo
  MLIR
  Swift


TRANSCRIPT

00:00:03
Ron
Welcome to Signals and Threads, in-depth conversations about every layer of the tech
stack, from Jane Street. I’m Ron Minsky. It is my great pleasure to have Chris Lattner on
the show. Typically on Signals and Threads, we end up talking to engineers who work here
at Jane Street, but sometimes we like to grab outside folk, and Chris is an amazing figure
to bring on because he’s been so involved in a bunch of really foundational pieces of
computing that we all use—LLVM, and Clang, and MLIR, and OpenCL, and Swift, and now
Mojo. And this has happened at a bunch of different storied institutions—Apple, and Tesla,
and Google, and SiFive, and now Modular. So anyway, it’s a pleasure to have you joining
us, Chris.

00:00:43
Chris
Thank you, Ron. I’m so happy to be here.

00:00:45
Ron
I guess I want to start by just hearing a little bit more about your origin story. How did
you get into computing and how did you get into this world of both compiler engineering
and programming language design?

00:00:54
Chris
So I grew up in the ’80s and back before computers were really a thing. We had PCs, but
they weren’t considered cool. And so I fell in love with understanding how the computer
worked. And back then, things were way simpler. I started with a BASIC interpreter, for
example, and you’d get a book from the store. Remember when we had books? [laughs] And
you’d learn things from books?

00:01:14
Ron
Did you do the thing where you’d get the hobbyist magazine and copy out the listing of the
program?

00:01:19
Chris
That’s exactly right. And so we didn’t have vibe coding, but we did have books. And so
just by typing things in, you could understand how things work, and then when you broke
it—because inevitably you’re typing something in and you don’t really know what you’re
doing—you have to figure out what went wrong and so it encouraged a certain amount of
debugging. I really love computer games. Again, back then, things were a little bit
simpler. Computer games drove graphics and performance and things like this. And so I
spent some time on these things called bulletin board systems and the early internet
reading about how game programmers are trying to push the limits of the hardware. And so
that’s where I got interested in performance and computers and systems. I went on to
college and had an amazing professor at my school, shout out to University of Portland in
Portland, Oregon, and he was a compiler nerd.

And so, I think that his love for compilers was infectious. His name was Steven Vegdahl,
and that caused me to go on to pursue compilers at University of Illinois. And there
again, continue to fall down this rabbit hole of compilers and systems, and build
LLVM. And ever since I got into the compiler world, I loved it. I love compilers because
they’re large-scale systems, there’s multiple different components that all work
together. And in the university setting, it was really cool in the compiler class, because
unlike most of the assignments where you do an assignment, turn it in, forget about it—in
compilers, you would do an assignment, turn it in, get graded, and then build on it. And
it felt much more realistic like software engineering, rather than just doing a project to
get graded.

00:02:35
Ron
Yeah, I think for a lot of people, the OS class is their first real experience of doing a
thing where you really are building layer on top of layer. I think it’s an incredibly
important experience for people as they start engineering.

00:02:44
Chris
It’s also one where you get to use some of those data structures. I took this, almost
academic, here’s what a binary tree is, and here’s what a graph is. And particularly when
I went through it, it was taught from a very math-forward perspective, but it really made
it useful. And so that was actually really cool. I’m like, ‘Oh, this is why I learned this
stuff.’

00:02:59
Ron
So one thing that strikes me about your career is that you’ve ended up going back and
forth between compiler engineering and language design space, whereas I feel like a lot of
people are on one side or the other—they’re mostly compilers people and they don’t care
that much about the language, and just, how do we make this thing go fast? And there are
some people who are really focusing on language design and the work on the compiler is a
secondary thing towards that design. And you’ve both popped back and forth. And then also
a lot of your compiler engineering work, really starting with LLVM, in some sense is
itself, very language-forward. With LLVM, there’s a language in there that’s this
intermediate language that you’re surfacing as a tool for people to use. So I’m just
curious to hear more about how you think about the back and forth between compiler
engineering and language design.

00:03:39
Chris
The reason I do this is that effectively, my career is following my own interests. And so
my interests are not static. I want to work on different kinds of problems and solve
useful problems and build into things. And so the more technology and capability you have,
the higher you can reach. And so with LLVM, for example, built and learned a whole bunch
of cool stuff about deep code generation for an X86 chip and that category of technology
with register allocation, stuff like this. But then it made it possible to go, say, let’s
go tackle C++ and let’s go use this to build the world’s best implementation of something
that lots more people use and understand than deep backend code generation technology. And
then with Swift, it was, build even higher and say, ‘Okay, well C++, maybe some people
like it, but I think we can do better and let’s reach higher.’ I’ve also been involved in
AI systems, been involved in building an iPad app to help teach kids how to code. And so,
lots of different things over time. And so for me, the place I think I’m most useful and
where a lot of my experience is valuable ends up being at this hardware-software boundary.

00:04:36
Ron
I’m curious how you ended up making the leap to working on Swift. From my perspective,
Swift looks from the outside, like one of these points of arrival in mainstream
programming contexts of a bunch of ideas that I have long thought are really great ideas
in other programming languages. And I’m curious, in some ways a step away from like, oh,
I’m going to work on really low-level stuff and compiler optimization, and then we will go
much higher level and do a C++ implementation, which is still a pretty low level. How did
the whole Swift thing happen?

00:05:00
Chris
Great question. I mean, the timeframe for people that aren’t familiar is that LLVM started
in 2000. So by 2005, I had exited university and I joined Apple. And so LLVM was an
advanced research project at that point. By the 2010 timeframe, LLVM was much more mature
and we had just shipped C++ support in Clang, and so it could bootstrap itself, which
means the compiler could compile itself. It’s all written in C++, it could build advanced
libraries like the Boost template library, which is super crazy advanced template
stuff. And so the C++ implementation that I and the team had built was real. Now, C++ in
my opinion, is not a beautiful programming language. And so implementing it is a very
interesting technical challenge. For me, a lot of problem-solving ends up being, how do
you factor the system the right way?

And so Clang has some really cool stuff that allowed it to scale and things like that, but
I was also burned out. We had just shipped it. It was amazing. I’m like, there has to be
something better. And so, Swift really came starting in 2010. It was a nights and weekends
project. It wasn’t like top-down management said, ‘Let’s go build a new programming
language.’ It was ‘Chris being burned out’—I was running a 20 to 40 person team at the
time, being an engineer during the day, and being a technical leader, but then needing an
escape hatch. And so I said, ‘Okay, well, I think we can have something better. I have a
lot of good ideas. Turns out, programming languages are a mature space. It’s not like you
need to invent pattern matching at this point. It’s embarrassing that C++ doesn’t have
good pattern matching.

00:06:23
Ron
We should just pause for a second, because I think this is like a small but really
essential thing. I think the single best feature coming out of language like ML in the
mid-seventies is, first of all, this notion of an algebraic data type, meaning every
programming language on earth has a way of saying this and that and the other, a record,
or a class, or a tuple.

00:06:38
Chris
A weird programming language, I think it was Barbara Liskov?

00:06:41
Ron
Yeah. And she did a lot of the early theorizing about, ‘What are abstract data types?’ But
the ability to do this or that or the other, to have data types that are a union of
different possible shapes of the data—and then having this pattern matching facility that
lets you basically in a reliable way do the case analysis so you can break down what the
possibilities are—is just incredibly useful. And very few mainstream languages have picked
it up. I mean Swift again is an example, but languages like ML, SML, and Haskell, and
OCaml—

00:07:09
Chris
Standard!

00:07:10
Ron
That’s right. SML. Standard ML. It’s been there for a long time.

00:07:12
Chris
I mean pattern matching, it is not an exotic feature. Here we’re talking about 2010. C#
didn’t have it. C++ didn’t have it. Obviously Java didn’t have it. I don’t think
JavaScript had it. None of these mainstream languages had it, but it’s obvious. And so
part of my opinion about that—and so by the way, I represent as engineer, I’m not actually
a mathematician, and so type theory goes way over my head. I don’t really understand
this. The thing that gets me frustrated about the academic approach to programming
languages is that people approach it by saying there’s sum types, and there’s intersection
types, and there’s these types, and they don’t start from utility forward. And so pattern
matching, when I learned OCaml, it’s so beautiful. It makes it so easy and expressive to
build very simple things. And so to me, I always identify to the utility and then yes,
there’s amazing formal type theory behind it, and that’s great and that’s why it actually
works and composes. But bringing that stuff forward and focusing on utility and the
problems it solves, and how it makes people happy, ends up being the thing that I think
moves the needle in terms of adoption, at least in mainstream.

00:08:09
Ron
Yeah, I mean I think that’s right. My approach also, and my interest in language is also
very much not from the mathematical perspective, although my undergraduate degree is in
math. I like math a lot, but I mostly approach these things as a practitioner. But the
thing I’ve been struck by over the years is the value of having these features have a
really strong mathematical foundation is they generalize, and as you were saying, compose
much better. If they are in the end mathematically simple, you’re way more likely to have
a feature that actually pans out as it gets used way beyond your initial view as to what
the thing was for.

00:08:39
Chris
That’s right. This is actually a personal defect because I don’t understand the math in
the way that maybe theoretically would be ideal. I end up having to rediscover certain
truths that are obvious. The cliche, ‘If the Russian mathematician invented it 50 years
ago…’ And so a lot of what I find is that I can find truth and beauty when things compose
and things fit together, and often I’ll find out it’s already been discovered because
everything in programming language has been done. There’s almost nothing novel, but still
that design process of saying, let’s pull things together, let’s reason about why it
doesn’t quite fit together. Let’s go figure out how to better factor this. Let’s figure
out how to make it simpler these days. That process to me, I think is kind of like people
working on physics, [from what] I hear. The simpler the outcome becomes, the more close to
truth it feels like it is. And so I share that—and maybe it’s more design gene or
engineer-design combination, but it’s probably what you mathematicians actually know
inherently, and I just haven’t figured it out yet.

00:09:33
Ron
Do you find yourself doing things after you come to it from an engineering perspective,
trying to figure out whether there are useful mathematical insights? Do you go back and
read the papers? Do you have other PL people who are more mathematically oriented who you
talk to? How do you extend your thinking to cover some of that other stuff?

00:09:47
Chris
See, the problem is math is scary to me. So I see Greek letters and I run away. I do
follow arXiv and things like this, and there’s a programming language section on that. And
so I get into some of it, but what I get attracted to in that is the examples and the
results section and the future-looking parts of it. And so it’s not necessarily the ‘how,’
it’s the ‘what it means.’ And so I think a lot of that really speaks to me. The other
thing that really speaks to me when you talk about language design and things like this is
blog posts from some obscure academic programming language that I’ve never heard of. You
just have somebody talking about algebraic effect systems for this and that and the other
thing, or something really fancy, but they figure out how to explain it in a way that’s
useful. And so when it’s not just, ‘Let me explain to you the type system,’ but it’s, ‘Let
me explain this problem this fancy feature enables,’ that’s where I get excited. That’s
where it speaks to me because, again, I’m problem-oriented, and having a beautiful way to
express and solve problems, I appreciate.

00:10:38
Ron
I think there’s a lot of value in the work that’s done in papers of really working out in
detail the theory and the math and how it all fits together. [And] I think the fact that
the world has been filled with a lot of interesting blog posts from the same people has
been great because I think it’s another modality where it often encourages you to pull out
the simpler and easier-to-consume versions of those ideas. And I think that is just a
different kind of insight and it’s valuable to surface that too.

00:10:59
Chris
And also when I look at those blog posts, sometimes they design smell. Particularly the
C++ community, there’s a lot of really good work to fix C++. They’re adding a lot of stuff
to it, and C++ will never get simpler—you can’t really remove things, right? And so a lot
of the challenge there is, it’s constrained problem-solving. And so when I look at that,
often what I’ll see when I’m reading one of those posts, and again, these are brilliant
people and they’re doing God’s work trying to solve problems with C++, best of luck with
that. But you look at that and you realize there’s a grain of sand in the system that
didn’t need to be there. And so to me, it’s like if you remove that grain of sand, then
the entire system gets relaxed and suddenly all these constraints fall away and you can
get to something much simpler. Swift, for example, it’s a wonderful language and it’s
grown really well and the community is amazing, but it has a few grains of sand in it that
cause it to be a lot more complicated. And so this is where I’m not just happy with things
that got built. LLVM is amazing, it’s very practical, but it has lots of problems. That’s
why when I get a chance to build a next generation system, I want to learn from that and
actually try to solve these problems.

00:11:56
Ron
So this is the great privilege of getting to work on a new language, which is a thing
you’re doing now. There’s this new language called Mojo, and it’s being done by this
company that you co-founded called Modular. Maybe just so we understand the context a
little bit, can you tell me a little bit about, what is Modular? What’s the basic
offering? What’s the business model?

00:12:12
Chris
Before I even get there, I’ll share more of how I got here. If you oversimplify my
background, I did this LLVM thing and its foundational compiler technology for CPUs. It
helped unite a lot of CPU-era infrastructure and it provided a platform for languages like
Swift, but also Rust, and Julia, and many different systems that all got built on top of,
and I think it really catalyzed and enabled a lot of really cool applications of
accelerated compiler technology. People use LLVM in databases and for query engine
optimization, lots of cool stuff. Maybe you use it for trading or something. I mean, there
can be tons of different applications for this kind of technology—and then [I] did
programming language stuff with Swift. But in the meantime, AI happened. And so with AI
brought this entirely new generation of compute: GPUs, tensor processing units,
large-scale AI training systems, FPGAs, and ASICs and all this complexity for compute, and
LLVM never really worked in that system.

And so one of the things that I built when I was at Google was a bunch of foundational
compiler technology for that category of systems. And there’s this compiler technology
called MLIR. MLIR is basically LLVM 2.0. And so take everything you learn from building
LLVM and helping solve this, but then bring it forward into this next generation of
compiler technology so that you can go hopefully unify the world’s compute for this GPU
and AI and ASIC kind of world. MLIR has been amazingly successful, and I think it’s used
in roughly every one of these AI systems and GPUs. It’s used by Nvidia, it’s used by
Google, it’s used by roughly everybody in this space. But one of the challenges is that
there hasn’t been unification. And so you have these very large-scale AI software
platforms. You have CUDA from Nvidia, you have XLA from Google, you have ROCm from AMD.

It’s countless. Every company has their own software stack. And one of the things that I
discovered and encountered, and I think the entire world sees, is that there’s this
incredible fragmentation driven by the fact that each of these software stacks built by a
hardware maker are just all completely different. And some of them work better than
others, but regardless, it’s a gigantic mess. And there’s these really cool high-level
technologies like PyTorch that we all love and we want to use. But if PyTorch is built on
completely different stacks and schooling together these megalithic worlds from different
vendors, it’s very difficult to get something that works.

00:14:17
Ron
Right. They’re both complicated trade-offs around the performance that you get out of
different tools and then also a different set of complicated trade-offs around how hard
they are to use, how complicated it is to write something in them, and then what hardware
you can target from each individual one. And each of these ecosystems is churning just
incredibly fast. There’s always new hardware coming out and new vendors in new places, and
there’s also new little languages popping up into existence, and it makes the whole thing
pretty hard to wrangle.

00:14:42
Chris
Exactly. And AI is moving so fast. There’s a new model every week. It’s crazy. And new
applications, new research, the amount of money being dumped into this by everybody is
just incredible. And so how does anybody keep up? It’s a structural problem in the
industry. And so the structural problem is that the people doing this kind of work, the
people doing code generation for advanced GPUs and things like this, they’re all at
hardware companies. And the hardware companies, every single one of them is building their
own stack because they have to. There is nothing to plug into. There’s nothing like ‘LLVM
but for AI,’ that doesn’t exist. And so as they go and build their own vertical software
stack, of course they’re focused on their hardware, they got advanced roadmaps, they have
a new chip coming out next year, they’re plowing their energy and time into solving for
their hardware. But we, out in the industry, we actually want something else. We want to
be able to have software that runs across multiple pieces of hardware. And so, if
everybody doing the work is at a hardware company, it’s very natural that you get this
fragmentation across vendors because nobody’s incentivized to go work together. And even
if they’re incentivized, they don’t have time to go work on somebody else’s chip. AMD is
not going to pay to work on Nvidia GPUs or something like this.

00:15:45
Ron
That’s true when you think about this, kind of, a split between low-level and high-level
languages. So Nvidia has CUDA and AMD has ROCm, which is mostly a clone of CUDA, and then
the XLA tools from Google work incredibly well on TPUs, and so on and so forth. Different
vendors have different things. Then there’s the high-level tools, PyTorch, and JAX, and
Triton, and various things like that. And those are typically actually not made by the
hardware vendors. Those are made by different kinds of users—I guess Google is responsible
for some of these and they’re also sometimes a hardware vendor—but a lot of the time it’s
more stepped back. Although even there, the cross-platform support is complicated and
messy and incomplete.

00:16:22
Chris
Because they’re built on top of fundamentally incompatible things. And so that’s the
fundamental nature. And so again, you go back to Chris’s dysfunction and my weird career
choices, I always end up back at the hardware-software boundary, and there’s a lot of
other folks that are really good at adding very high-level abstractions. If you go back a
few years ago, MLOps was the cool thing, and it was, ‘Let’s build a layer of Python on top
of TensorFlow and PyTorch and build a unified AI platform.’ But the problem with that, is
that building abstractions on top of two things that don’t work very well, can’t solve
performance, or liability, or management, or these other problems. You can only add a
layer of duct tape, but as soon as something goes wrong, you end up having to debug this
entire crazy stack of stuff that you really didn’t want to have to know about.

And so it’s a leaky abstraction. And so the genesis of Modular (bringing it back to this)
was realizing there are structural problems in the industry. There is nobody that’s
incentivized to go build a unifying software platform and do that work at the bottom
level. And so what we set off to do is we said, ‘Okay, let’s go build…’—and there’s
different ways of explaining this. You could say ‘a replacement for CUDA,’ that’s like a
flamboyant way to say this, but ‘let’s go build a successor to all of this technology that
is better than what the hardware makers are building, and is portable.’ And so what this
takes, is doing the work that these hardware companies are doing, and I set the goal for
the team of saying, let’s do it better than, for example, Nvidia is doing it for their own
hardware.

00:17:38
Ron
Which is no easy feat, right? They’ve got a lot of very strong engineers and they
understand their hardware better than anyone does. Beating them on their own hardware is
tough.

00:17:45
Chris
That is really hard. And they’ve got a 20-year head start, because CUDA is about 20 years
old. They’ve got all the momentum. They’re a pretty big company. As you say, lots of smart
people. And so that was a ridiculous goal. Why did I do that? Well, I mean a certain
amount of confidence in understanding how the technology worked, having a bet on what I
thought we could build and the approach, and some insight and intuition, but also
realizing that it’s actually destiny. Somebody has to do this work. If we ever want to get
to an ecosystem where one vendor doesn’t control everything, if we want to get the best
out of the hardware, if we want to get new programming language technologies, if we want
pattern matching on a GPU—I mean, come on, this isn’t rocket science—then we need at some
point to do this. And if nobody else is going to do it, I’ll step up and do that. That’s
where Modular came from—saying, ‘Let’s go crack this thing open. I don’t know how long it
will take, but sometimes it’s worthwhile doing really hard things if they’re valuable to
the world.’ And the belief was it could be profoundly impactful and hopefully get more
people into even just being able to use this new form of compute with GPUs and
accelerators and all this stuff, and just really redemocratize AI compute.

00:18:48
Ron
So you pointed out that there’s a real structural problem here, and I’m actually wondering
how, at a business model level, do you want to solve the structural problem? Which is, the
history of computing is these days littered with the bodies of companies that try to sell
a programming language. It’s a really hard business. How is Modular set up so that it’s
incented to build this platform in a way that can be a shared platform that isn’t subject
to just one other vendor’s lock-in?

00:19:11
Chris
First answer is, don’t sell a programming language. As you say, that’s very difficult. So
we’re not doing that. Go take Mojo, go use it for free. We’re not selling a programming
language. What we’re doing is we’re investing in this foundational technology to unify
hardware. Our view is, as we’ve seen in many other domains, once you fix the foundation,
now you can build high-value services for enterprises. And so our enterprise layer, often
what we talk to, you end up with these groups where you have hundreds or thousands of
GPUs. Often it’s rented from a cloud on a three-year commit. You have a platform team
that’s carrying pagers and they need to keep all this stuff running and all the production
workloads running. And then you have these product teams that are inventing new stuff all
the time, and there’s new research, there’s a new model that comes out and they want to
get it on the production infrastructure, but none of this stuff actually works.

And so the software ecosystem we have with all these brilliant but crazy open source tools
that are thrashing around, all these different versions of CUDA and libraries, all this
different hardware happening, is just a gigantic mess. And so, helping solve this for the
platform engineering team that actually needs to have stuff work, and want to be able to
reason about it, and want good observability and manageability and scalability and things
like this is actually, we think, very interesting. We’ve gotten a lot of good responses
from people on that. The cost of doing this is we want to actually make it work, that’s
where we do fundamental language compiler underlying systems technology and help bring
together these accelerators so that we can get, for example, the best performance on an
AMD GPU and get it so that the software comes out in the same release train as support for
an Nvidia GPU. And being able to pull that together, again, it just multiplicatively
reduces complexity, which then leads to a product that actually works, which is really
cool and very novel in AI.

00:20:49
Ron
So the way that Mojo plays in here, is it basically lets you provide the best possible
performance and I guess the best possible performance across multiple different hardware
platforms. Are you primarily thinking about this as an inference platform, or, how does
the training world fit in?

00:20:57
Chris
So let me zoom in and I’ll explain our technology components. I have a blog post series I
encourage you and any viewers or listeners to check out, called, ‘Democratizing AI
Compute.’ It goes through the history of all the systems and the problems and challenges
that they’ve run into, and it gets to, ‘What is Modular doing about it?’ So Part 11 talks
about our architecture and the inside is Mojo, which is a programming language. I’ll
explain Mojo in a second. Next level out is called MAX. And so you can think of MAX as
being a PyTorch replacement or a vLLM replacement, something that you can run on a single
node and then get high performance LLM surveying, that kind of use case. And then the next
level out is called Mammoth, and this is the cluster management Kubernetes layer. And so
if you zoom in all the way back to Mojo, you say—your experience, you know what
programming languages are, they’re incredibly difficult and expensive to build.

Why would you do that in the first place? And the answer is, we had to. In fact, when we
started Modular, I was like, ‘I’m not going to invent a programming language.’ I know
that’s a bad idea, it takes too long, it’s too much work. You can’t convince people to
adopt a new language. I know all the reasons why creating language is actually a really
bad idea. But it turns out, we were forced to do this because there is no good way to
solve the problem. And the problem is, how do you write code that is portable across
accelerators? So, that problem, I want portability across—for example, make it simple AMD
and Nvidia GPUs, but then you layer on the fact that you’re using a GPU because you want
performance. And so I don’t want a simplified, watered down—I want Java that runs on a
GPU.

I want the full power of the GPU. I want to be able to deliver performance that meets and
beats Nvidia on their own hardware. I want to have portability and unify this crazy
compute where you have these really fancy heterogeneous systems and you have tensor cores
and you have this explosion of complexity and innovation happening in this hardware
platform layer. Most programming languages don’t even know that there’s an 8-bit floating
point that exists. And so we looked around and I really did not want to have to do this,
but it turns out that there really is no good answer. And again, we decided that, hey, the
stakes are high, we want to do something impactful. We’re willing to invest. I know what
it takes to build a programming language. It’s not rocket science, it’s just a lot of
really hard work and you need to set the team up to be incentivized the right way. But we
decided that, yeah, let’s do that.

00:23:08
Ron
So I want to talk more about Mojo and its design, but before we do, maybe let’s talk a
little bit more about the pre-existing environment. I did actually read that blog post
series. I recommended it to everyone. I think it’s really great, and I want to talk a
little bit about what the existing ecosystem of languages looks like, but even before
then, can we talk more about the hardware? What does the space of hardware look like that
people want to run these ML models on?

00:23:29
Chris
Yeah, so the one that most people zero in on is the GPU. And so GPUs are, I think, getting
better understood now. And so if you go back before that though, you have CPUs. So, modern
CPUs in a data center, often you’ll have—I mean today you guys are probably riding quite
big iron, but you got 100 cores in a CPU and you got a server with two-to-four CPUs on a
motherboard, and then you go and you scale that. And so, you’ve got traditional threaded
workloads that have to run on CPUs, and we know how to scale that for internet servers and
things like this. If you get to a GPU, the architecture shifts. And so they have basically
these things called SMs. And now the programming model is that you have effectively much
more medium-sized compute that’s now put together on much higher performance memory
fabrics and the programming model shifts. And one of the things that really broke CUDA,
for example, was when GPUs got this thing called a tensor core—and the way to think about
a tensor core is it’s a dedicated piece of hardware for matrix multiplication. And so,
why’d we get that? Well, a lot of AI is matrix multiplication. And so, if you design the
hardware to be good at a specific workload, you can have dedicated silicon for that and
you can make things go really fast.

00:24:36
Ron
There are really these two quite different models sitting inside of the GPU space. Of
course, the name itself is weird. GPU is ‘graphics processing unit,’ which is what they
were originally for. And then this SM model is really interesting. They have this notion
of a warp. A warp is a collection of typically 32 threads that are operating together in
lockstep, always doing the same thing—a slight variation on what’s called the SIMD model,
same instruction, multiple data. It’s a little more general than that, but more or less,
you can think of it as the same thing. And you just have to run a lot of them. And then
there’s a ton of hardware inside of these systems basically to make switching between
threads incredibly cheap. So you pay a lot of silicon to add extra registers. So the
context switch is super cheap, so you can do a ton of stuff in parallel.

Each thing you’re doing is itself 32-wise parallel. And then because you can do all this
very fast context switching, you can hide a lot of latency. And that worked for a
while. And then we’re like, actually, we need way more of this matrix multiplication
stuff. And you can sort of do reasonably efficient matrix multiplication through this warp
model, but not really that good. And then there’s a bunch of quite idiosyncratic hardware,
which changes its performing characteristics from generation to generation, just for doing
these matrix multiplications. So that’s the Nvidia GPU story, and Volta is like V100 and
A100 and H100. They just keep on going and changing, pretty materially from generation to
generation in terms of the performance characteristics, and then also the memory model,
which keeps on changing.

00:25:57
Chris
You go back to intuition, CUDA was never designed for this world. CUDA was not designed
for modern GPUs. It was designed for a much simpler world. And CUDA being 20 years old, it
hasn’t really caught up. And it’s very difficult because, as you say, the hardware keeps
changing. And so CUDA was designed from a world where—almost like C is designed for a very
simple programming model that it expected to scale, but then as the hardware changed, it
couldn’t adapt. Now, if you get beyond GPUs, you get to Google TPU and many other
dedicated AI systems. They blow this way out and they say, ‘Okay, well, let’s get rid of
the threads that you have on a GPU and let’s just have matrix multiplication units and
have really big matrix multiplication units and build the entire chip around that. And you
get much more specialization, but you get a much higher throughput for those AI workloads.

Going back to, ‘Why Mojo?’ Well, Mojo was designed from first principles to support this
kind of system. Each of these chips, as you’re saying, even within Nvidia’s family, from
Volta, to Ampere, to Hopper, to Blackwell, these things are not compatible with each
other. Actually, Blackwell just broke compatibility with Hopper, so it can’t run Hopper
kernels always on Blackwell. Oops, well, why are they doing that? Well, AI software is
moving so fast. They decided that was the right trade-off to make. And meanwhile, we all
software people need the ability to target this. When you look at other existing systems,
with Triton for example, their goal was, ‘Let’s make it easier to program a GPU,’ which I
love, that’s awesome. But then they said, ‘We’ll just give up 20% of the performance of
the silicon to do it.’ Wait a second. I want all the performance. And so if I’m using a
GPU—GPUs are quite expensive by the way—

I want all the performance. And if it’s not going to be able to deliver the same quality
of results you get by writing CUDA, well then, you’re always going to run to this head
room, where you get going quickly, but then you run into a ceiling and then have to switch
to a different system to get full performance. And so this is where Mojo is really trying
to solve this problem where we can get more usability, more portability, and full
performance of the silicon because it’s designed for these wacky architectures like tensor
cores.

00:27:51
Ron
And if we look at the other languages that are out there, there’s languages like CUDA, and
OpenCL, which are low level, typically look like variations on C++, in that tradition are
unsafe languages, which means that there’s a lot of rules you have to follow. And if you
don’t exactly follow the rules, you’re in undefined behavior land, it’s very hard to
reason about your program.

00:28:10
Chris
And just let me make fun of my C++ heritage because I’ve spent so many years, like, you
just have a variable that you forget to initialize, it just shoots your foot off. [laughs]
Like, it’s just unnecessary violence to programmers.

00:28:21
Ron
Right. And it’s done in the interest of making performance better because the idea is C++
and its related languages don’t really give you enough information to know when you’re
making a mistake, and they want to have as much space as they can to optimize the programs
they get. So the stance is just, if you do anything that’s not allowed, we have no
obligation to maintain any kind of reasonable semantics or debug ability around that
behavior. And we’re just going to try really, really hard to optimize correct programs,
which is a super weird stance to take, because nobody’s programs are correct. There are
bugs and undefined behavior in almost any C++ program of any size. And so, you’re in a
very strange position in terms of the guarantees that you get from the compiler system
you’re using.

00:29:02
Chris
Well, so I mean, I can be dissatisfied. I can also be sympathetic with people that work on
C++. So again, I’ve spent decades in this language and around this ecosystem, and building
compilers for it. I know quite a lot about it. The challenge is that C++ is established,
and so there’s tons of code out there. By far, the code that’s already written is the code
that’s the most valuable. And so if you’re building a compiler, or you have a new chip, or
you have an optimizer, your goal is to get value out of the existing software. And so you
can’t invent a new programming paradigm that’s a better way of doing things and defines
away the problem. Instead, you have to work with what you’ve got. You have a SPEC
benchmark you’re trying to make go fast, and so you invent some crazy heroic hack that
makes some important benchmark work because you can’t go change the code.

In my experience, particularly for AI, but also I’m sure within Jane Street, if
something’s going slow, go change the code. You have control over the architecture of the
system. And so, what I think the world really benefits from, unlike benchmark hacking, is
languages that give control and power and expressivity to the programmer. And this is
something where I think that, again, you take a step back and you realize history is the
way it is for lots of structural and very valid reasons, but the reasons don’t apply to
this new age of compute. Nobody has a workload that they can pull forward to next year’s
GPU—doesn’t exist. Nobody solved this problem. I don’t know the timeframe, but once we
solve that problem, once we solve portability, you can start this new era of software that
can actually go forward. And so now, to me, the burden is—make sure it’s actually
good. And so, to your point about memory safety, don’t make it so that forgetting to
initialize a variable is just going to shoot your foot off. [Instead] produce a good
compiler error saying, ‘Hey, you forgot to initialize a variable,’ right? These basic
things are actually really profound and important, and the tooling and all this usability
and this DNA, these feelings and thoughts, are what flow into Mojo.

00:30:49
Ron
And GPU programming is just a very different world from traditional CPU programming just
in terms of the basic economics and how humans are involved. You end up dealing with much
smaller programs. You have these very small but very high-value programs whose performance
is super critical, and in the end, a relatively small coterie of experts who end up
programming in it. And so it pushes you ever in the direction, you’re saying, of
performance engineering, right? You want to give people the control they need to make the
thing behave as it should, and you want to do it in a way that allows people to be highly
productive. And the idea that you have an enormous amount of legacy code that you need to
bring over, it’s like, actually you kind of don’t. The entire universe of software is
actually shockingly small, and it’s really about how to write these small programs as well
as possible.

00:31:32
Chris
And also there’s another huge change. And so this is something that I don’t think that the
programming language community has recognized yet, but AI coding has massively changed the
game because now you can take a CUDA kernel and say, ‘Hey, Claude, go make that into
Mojo.’

00:31:45
Ron
And actually, how good have you guys found the experience of that? Of doing translation?

00:31:48
Chris
Well, we do hackathons and people do amazing things, having never touched Mojo, having
never done GPU programming, and within a day they can make things happen that are just
shocking. Now, AI coding tools are not magic. You cannot just vibe code DeepSeek-R1 or
something, right? But it’s amazing what that can do in terms of learning new languages,
learning new tools, and getting into and catalyzing ecosystems. And so this is one of the
things where, again, you go back five or 10 years—everybody knows nobody can learn a new
language, and nobody’s willing to adopt new things. But the entire system has changed.

00:32:20
Ron
So let’s talk a little bit more in detail about the architecture of Mojo. What kind of
language is Mojo, and what are the design elements that you chose in order to make it be
able to address this set of problems?

00:32:30
Chris
Yeah, again, just to relate how different the situation is—back when I was working on
Swift, one of the major problems to solve was, objective C was very difficult for people
to use, and you had pointers, and you had square brackets, and it was very weird. And so
the goal in the game of the day was, invent new syntax and bring together modern
programming language features to build a new language. Fast forward to today, actually,
some of that is true. AI people don’t like C++. C++ has pointers, and it’s ugly, and it’s
a 40-year-old-plus language, and has actually the same problem that Swift had to solve
back in the day. But today there’s something different, which is that AI people do
actually love a thing. It’s called Python. And so, one of the really important things
about Mojo is, it’s a member of the Python family. And so, this is polarizing to some,
because yes—I get it that some people love curly braces, but it’s hugely powerful because
so much of the AI community is Pythonic already.

And so we started out by saying, let’s keep the syntax like Python and only diverge from
that if there’s a really good reason. But then what are the good reasons? Well, the good
reasons are, we want—as we were talking about—performance, power, full control over the
system. And for GPUs, there’s these very important things you want to do that require
metaprogramming. And so Mojo has a very fancy metaprogramming system, kind of inspired by
this language called Zig, that brings runtime and compile time together to enable really
powerful library designs. And the way you crack open this problem with tensor cores and
things like this, is you enable really powerful libraries to be built in the language as
libraries, instead of hard coding into the compiler.

00:33:57
Ron
Let’s take it a little bit to the metaprogramming idea. What is metaprogramming and why
does it matter for performance in particular?

00:34:03
Chris
Yeah, it’s a great question, and I think you know the answer to this too, and I know you,
but—

00:34:08
Ron
[Laughs] We are also working on metaprogramming features in our own world.

00:34:11
Chris
Exactly. And so the observation here is, when you’re writing a for loop in a programming
language, for example, typically that for loop executes at runtime, so you’re writing code
that when you execute the program, it’s the instructions that the computer will follow to
execute the algorithm within your code. But when you get into designing higher level type
systems, suddenly you want to be able to run code at compile time as well. And so there’s
many languages out there. Some of them have macro systems, C++ has templates. What you end
up getting is, you end up getting, in many languages, this duality between what happens at
runtime, and then a different language almost that happens at compile time. And C++ is the
most egregious, because templates that you have a for loop in runtime, but then you have
unrolled recursive templates, or something like that at compile time.

Well, so the insight is, hey, these two problems are actually the same. They just run at
different times. And so what Mojo does is says, let’s allow the use of effectively any
code that you would use at runtime to also work at compile time. And so you can have a
list, or a string, or whatever you want in the algorithms—go do memory allocation,
deallocation—and you can run those at compile time, enabling you to build really powerful
high-level abstractions and put them into libraries. So why is this cool? Well, the reason
it’s cool is that on a GPU, for example, you’ll have a tensor core. Tensor cores are
weird. We probably don’t need to deep dive into all the reasons why, but the indexing and
the layout that tensor cores use is very specific and very vendor different. And so the
tensor core you have on AMD, or the tensor cores you have on different versions of Nvidia
GPUs are all very different.

And so what you want, is you want to build as a GP programmer a set of abstractions so you
can reason about all of these things in one common ecosystem and have the layouts much
higher level. And so what this enables, it enables very powerful libraries—and very
powerful libraries where a lot of the logic is actually done at compile time, but you can
debug it because it’s the same language that you use at runtime. And it makes the language
much more simpler, much more powerful, and just be able to scale into these complexities
in a way that’s possible with C++. But in C++, you get some crazy template stack trace
that is maddening and impossible to understand. In Mojo, you can get a very simple error
message. You can actually debug your code, and debugger things like this.

00:36:17
Ron
So maybe an important point here is that metaprogramming is really an old solution to this
performance problem. Maybe a good way of thinking about this is, imagine you have some
piece of data that you have that represents a little embedded domain-specific language
that you’ve written, that you want to execute via a program that you wrote. You can, in a
nice high-level way, write a little interpreter for that language that just—you know, I
have maybe a Boolean expression language or who knows what else. Maybe it’s a language for
computing on tensors in a GPU. And you could write a program that just executes that mini
domain-specific language and does the thing that you want and you can do it, but it’s
really slow. Writing an interpreter is just inherently slow because of all this
interpretation overhead where you are dynamically making decisions about what the behavior
of the program is. And sometimes what you want, is, you just want to actually emit exactly
the code that you want and boil away the control structure and just get the direct lines
of machine code that you want to do the thing that’s necessary.

And various forms of code generation let you get past in a simpler way, lets you get past
all of this control structure that you have to execute at runtime and instead be able to
execute it at compile time and get this minified program that just does exactly the thing
that you want. So that’s a really old idea. It goes back to all sorts of programming
languages. There’s a lot of Lisps that did a lot of this metaprogramming stuff, but then
the problem is this stuff is super hard to think about and reason about and debug. And
that’s certainly true if you think about in C, all this macro language, if you use the
various C preprocessors to do this kind of stuff in C, it’s pretty painful to reason
about. And then C++ made it richer and more expressive, but still really hard to reason
about. And you write a C++ template and you don’t really know what it’s going to do or if
it’s going to compile until you give it all the inputs and let it go and it—

00:37:55
Chris
Feels good in the simple case. But then when you get to more advanced cases, suddenly the
complexity compounds and it gets out of hand.

00:38:01
Ron
And it sounds like the thing that you’re going for in Mojo is it feels like one
language. It has one type system that covers both the stuff you’re generating statically
and the stuff that you’re doing at runtime. It sounds like debugging works in the same way
across both of these layers, but you still get the actual runtime behavior you want from a
language that you could more explicitly just be like, here’s exactly the code that I want
to generate.

00:38:24
Chris
[…] metaprogramming is one of the fancy features. One of the cool features is it feels
and looks like Python, but with actual types.

00:38:31
Ron
Right.

00:38:32
Chris
And let’s not forget the basics. Having something that looks and feels like Python but
it’s a thousand times faster or something is actually pretty cool. For example, if you’re
on a CPU, you have access to SIMD, the SIMD registers that allow you to do multiple
operations at a time and [to] be able to get the full power of your hardware even without
using the fancy features is also really cool. And so the challenge with any of these
systems is, how do you make something that’s powerful, but it’s also easy to use? I think
your team’s been playing with Mojo and doing some cool stuff. I mean, what have you seen
and what’s your experience been?

00:39:02
Ron
We’re all still pretty new to it, but I think it’s got a lot of exciting things going for
it. I mean, the first thing is, yeah, it gives you the kind of programming model you want
to get the performance that you need. And actually, in many ways the same kind of
programming model that you get out of something like CUTLASS or CuTe DSL, which are these
Nvidia-specific, some at the C++ level, some at the Python DSL level—and by the way, every
tool you can imagine nowadays is done once in C++ and once in Python. We don’t need to
implement programming languages in any other way anymore. They’re all either skins on C++
or skins on Python. But depending on which path you go down, whether you go the C++ path
or the Python path, you get all sorts of complicated trade-offs.

Like in the C++ path in particular, you get very painful compilation times. The thing you
said about template metaprogramming is absolutely true. The error messages are super
bad. If you look at these more Python-embedded DSLs, the compile times tend to be
better. It still can be hard to reason about though. One nice thing about Mojo is the
overall discipline seems very explicit when you want to understand: Is this a value that’s
happening at execution time at the end, or is it a value that is going to be dealt with at
compile time? It’s just very explicit in the syntax, you can look and understand. Whereas
in some of these DSLs, you have to actively go and poke the value and ask it what kind of
value it is. And I think that kind of explicitness is actually really important for
performance engineering, making it easy to understand just what precisely you’re doing.

You actually see this a ton, not even with these very low-level things, but if you look at
PyTorch, which is a much higher level tool, PyTorch does this thing where you get to write
a thing that looks like an ordinary Python program, but really it’s got a much trickier
execution model. Python’s an amazing and terrible ecosystem in which to do this kind of
stuff, because what guarantees do you have when you’re using Python? None. What can you
do? Anything. You have an enormous amount of freedom. The PyTorch people in particular
have leveraged this freedom in a bunch of very clever ways, where you can write a Python
program that looks like it’s doing something very simple and straightforward that would be
really slow, but no—it’s very carefully delaying and making some operations lazy so it can
overlap compute on the GPU and CPU and make stuff go really fast. And that’s really nice,
except sometimes it just doesn’t work.

00:41:04
Chris
This is the trap again, this is my decades of battle scars now. So as a compiler guy, I
can make fun of other compiler people. There’s this trap and it’s an attractive trap,
which is called the ‘sufficiently smart compiler.’ And so what you can do is you can take
something and you can make it look good on a demo and you can say, ‘Look! I make it super
easy and I’m going to make my compiler super smart, and it’s going to take care of all
this and make it easy through magic.’ But magic doesn’t exist. And so anytime you have one
of those ‘sufficiently smart compilers,’ if you go back in the days, it was like
auto-parallelization, just write C code is sequential logic, and then we’re going to
automatically map it into running on 100 cores on a supercomputer or something like that.

They often actually do work, they work in very simple cases and they work in the
demos. But the problem is that you go and you’re using them and then you change one thing
and suddenly everything breaks. Maybe the compiler crashes, it just doesn’t work. Or you
go and fix a bug and now instead of 100-times speedup, you get 100-times slowdown because
it foiled the compiler. A lot of AI tools, a lot of these systems, particularly these
DSLs, have this design point of, let me pretend like it’s easy and then I will take care
of it behind the scenes. But then when something breaks, you have to end up looking at
compiler dumps, right? And this is because magic doesn’t exist. And so this is where
predictability and control is really, I think, the name of the game, particularly if you
want to get the most out of a piece of hardware, which is how we ended up here.

00:42:23
Ron
It’s funny, the same issue of, “How clever is the underlying system you’re using?” comes
up when you look at the difference between CPUs and GPUs. CPUs themselves are trying to do
a weird thing where a chip is a fundamentally parallel substrate. It’s got all of these
circuits that in principle could be running in parallel and then it is yoked to running
this extremely sequential programming language, which is just trying to do one thing after
another. And then how does that actually work with any reasonable efficiency? Well,
there’s all sorts of clever dirty tricks happening under the covers where it’s trying to
predict what you’re going to do, this speculation that allows it to dispatch multiple
instructions in a row by guessing what you’re going to do in the future. There’s things
like memory prefetching where it has heuristics to estimate what memory you’re going to
ask in the future so it can dispatch multiple memory requests at the same time.

And then if you look at things like GPUs, and I think even more, TPUs, and then also
totally other things like FPGAs, the field-programmable gate arrays where you put
basically a circuit design on it. It’s a very different kind of software system. But all
of them are in some sense simpler and more deterministic and more explicitly
parallel. Like when you write down your program, you have to write an explicitly parallel
program—that’s actually harder to write. I don’t want to complain too much about CPUs. The
great thing about CPUs is they’re extremely flexible and incredibly easy to use and all of
that dark magic actually works a pretty large fraction of the time.

00:43:42
Chris
Yeah, remarkably well. But your point here, I think it’s really great, and what you’re
saying is, you’re saying CPUs are the magic box that makes sequential code go in parallel
pretty fast. And then we have new, more explicit machines, somewhat harder to program
because they’re not a magic box, but you get something from it. You get performance and
power because that magic box doesn’t come without a cost. It comes with a very significant
cost, often the amount of power that your machine dissipates. And so it’s not
efficient. And so a lot of the reasons we’re getting these new accelerators is because
people really do care about it being a hundred times faster, or using way less power, or
things like this. And I’d never thought about it, but your analogy of Triton to Mojo kind
of follows a similar pattern, right? Triton is trying to be the magic box, and it doesn’t
give you the full performance, and it burns more power, and all that kind of stuff. And so
Mojo is saying, look, let’s go back to being simple. Let’s give the programmer more
control. And that more explicit approach, I think, is a good fit for people that are
building crazy advanced hardware like you’re talking about—but also people that want to
get the best performance out of the existing hardware we have.

00:44:42
Ron
So we talked about how metaprogramming lets you write faster programs by boiling away this
control structure that you don’t really need. So that part’s good. How does it give you
portable performance? How does it help you on the portability front?

00:44:54
Chris
Yeah, so this is another great question. So in this category of ‘sufficiently smart
compilers,’ and particularly for AI compilers, there’s been years of work and MLIR has
catalyzed a lot of this work building these magic AI compilers that take TensorFlow or
even the new PyTorch stuff and trying to generate optimal code for some chip. So take some
PyTorch model and put it through a compiler, and magically get out high performance. And
so there’s tons of these things, and there’s a lot of great work done here, and a lot of
people have shown that you can take kernels and accelerate them with compilers. The
challenge with this is that people don’t ever measure—what is the full performance of the
chip? And so people always measure from a somewhat unfortunate baseline and then try to
climb higher instead of saying—what is the speed of light? And so if you measure from
speed of light, suddenly you say, okay, how do I achieve several different things?

Even if you zero into one piece of silicon, how do I achieve the best performance for one
use case? And then how do I make it so the software I write can generalize even within the
domain? And so for example, take a matrix multiplication, well, you want to work on maybe
float32, but then you want to generalize it to float16. Okay, well, templates and things
like this are easy ways to do this. Then programming allows you to say, okay, I will
tackle that. And then the next thing that happens is, because you went from float32 to
float16, your effective cache size has doubled, because twice as many elements fit into
cache if there’s 16 bits than if there are 32 bits. Well, if that’s the case, now suddenly
the access pattern needs to change. And so you get a whole bunch of this conditional logic
that now changes in a very parametric way as a result of one simple change that happened
with float32 to float16.

Now you play that forward and you say, okay, well actually matrix multiplication is a
recursive hierarchical problem. There’s specializations for tall and skinny matrices, and
a dimension is one or something. There’s all these special cases. Just one algorithm for
one chip becomes this very complicated subsystem that you end up wanting to do a lot of
transformations to so you can go specialize it for different use cases. And so Mojo with
the metaprogramming allows you to tackle that. Now you bring in other hardware, and so
think of matrix multiplication these days as being almost an operating system, and there’s
so many different subsystems, and special cases, and different D types, and crazy float4
and six and other stuff going on.

00:47:07
Ron
At some point they’re going to come out with a floating point number so small that it will
be a joke. But every time I think that they’re just kidding, it turns out it’s real.

00:47:14
Chris
Seriously, I heard somebody talking about 1.2-bit floating point, right? It’s exactly like
you’re saying, is that a joke? You can’t be serious. And so now when you bring in other
hardware, other hardware brings in more complexity because suddenly the tensor core has a
different layout in AMD than it does on Nvidia. Or maybe to your point about warps, you
have 64 threads in a warp on one and 32 threads in a warp on the other. But what you
realize is, wait a second—this really has nothing to do with hardware vendors. This is
actually true even within, for example, the Nvidia line, because across these different
data types, the tensor cores are changing. The way the tensor core works for float32 is
different from the way it works for float4 or something. And so you already—within one
vendor—have to have this very powerful metaprogramming to be able to handle the complexity
and do so in the scaffolding of a single algorithm like matrix multiplication.

And so now as you bring in other vendors, well it turns out hey, they all have things that
look roughly like tensor cores. And so we’re coming at this with a software engineering
perspective, and so we’re forced to build abstractions. We have this powerful
metaprogramming system so we can actually achieve this. And so even for one vendor, we get
this thing called LayoutTensor. LayoutTensor is saying, okay, well I have the ability to
reason about not just an array of numbers or a multidimensional array of numbers, but also
how it’s laid out in memory and how it gets accessed. And so now we can declaratively map
these things onto the hardware that you have and these abstractions stack. And so it’s
this really amazing triumvirate between having a type system that works well and this very
important basis. I know you’re a fan of type systems also.

You then bring in metaprogramming, and so you can build powerful abstractions and run a
compile time so you get no runtime overhead. And then you bring in the most important part
of this entire equation, which is programmers who understand the domain. I am not going to
write a fast matrix multiplication. I’m sorry, that’s not my experience. But there are
people in that space that are just fricking brilliant. They understand exactly how the
hardware works, they understand the use cases and the latest research and the new crazy
quantized format of the day, but they’re not compiler people. And so the magic of Mojo is
it says, ‘Hey, you have a type system, you have metaprogramming, you have effectively the
full power of a compiler that you have when you’re building libraries.’ And so now these
people that are brilliant at unlocking the power of the hardware can actually do this. And
now they can write software that scales both across the complexity of the domain but also
across hardware. And to me, that’s what I find so exciting and so powerful about
this. It’s unlocking the power of the Mojo programmer instead of trying to put it into the
compiler, which is what a lot of earlier systems have tried to do.

00:49:49
Ron
So maybe the key point here is that you get to build these abstractions that allow you to
represent different kinds of hardware, and then you can conditionally have your code
execute based on the kind of hardware that it’s on. It’s not like an #ifdef where you’re
picking between different hardware platforms. There are complicated data structures like
these layout values that tell you how you traverse data.

00:50:07
Chris
Which is kind of a tree. This isn’t just a simple int that you’re passing around. This is
like a recursive hierarchical tree that you need at compile time.

00:50:13
Ron
The critical thing is you get to write a thing that feels like one synthetic program with
one understandable behavior, but then parts of it are actually going to execute at compile
time, so that the thing that you generate is in fact specialized for the particular
platform that you’re going to run it on. So one concern I have over this is it sounds like
the configuration space of your programs is going to be massive, and I feel like there are
two directions where this seems potentially hard to do from an engineering
perspective. One is, can you really create abstractions that within the context of the
program hide the relevant complexity? So it’s possible for people to think in a modular
way about the program they’re building, so their brains don’t explode with the 70
different kinds of hardware that they might be running it on. And then the other question
is, how do you think about testing? Because there’s just so many configurations. How do
you know whether it’s working in all the places? Because it sounds like it has an enormous
amount of freedom to do different things, including wrong things in some cases. How do you
deal with those two problems, both controlling the complexity of the abstractions and then
having a testing story that works out?

00:51:11
Chris
Okay, Ron, I’m going to blow your mind. I know you’re going to be resistant to this, but
let me convince you that types are cool.

00:51:16
Ron
Okay!

00:51:18
Chris
I know you’re going to fight me on this. Well, so this is again, you go back to the
challenges and opportunities of working with either Python or C++. Python doesn’t have
types really. I mean it has some stuff, but it doesn’t really have a type system. C++ has
a type system, but it’s just incredibly painful to work with. And so what Mojo does is it
says, again, it’s not rocket science. We see it all around us. Let’s bring in
traits. Let’s bring in a reasonable way to write code so that we can build abstractions
that are domain-specific and they can be checked modularly. And so one of the big problems
with C++ is that you get error messages when you instantiate layers and layers and layers
and layers of templates. And so if you get some magic number wrong, it explodes
spectacularly in a way that you can’t reason about. And so what Mojo does, it says, cool,
let’s bring in traits that feel very much like protocols in Swift, or traits in Rust, or
type classes in Haskell. Like, this isn’t novel.

00:52:08
Ron
This is like a mechanism for what’s called ad hoc polymorphism, meaning I want to have
some operation or function that has some meaning, but actually it’s going to get
implemented in different ways for different types. And these are basically all mechanisms
of a way of, given the thing that you’re doing and the types involved, looking up the
right implementation that’s going to do the thing that you want.

00:52:25
Chris
Yeah, I mean a very simple case is an iterator. So Mojo has an iterator trait and you can
say, ‘Hey, what is an iterator over a collection?’ Well, you can either check, see if
there’s an element, or you can get the value at the current element. And then as you keep
pulling things out of an iterator, it will eventually decide to stop. And so this concept
can be applied to things like a linked list, or an array, or a dictionary, or an unbounded
sequence of packets coming off a network. And so you can write code that’s generic across
these different—call them “backends” or “models”—that implement this trait. And what the
compiler will do for you is it will check to make sure when you’re writing that generic
code, you’re not using something that won’t work. And so what that does, is it means that
you can check the generic code without having to instantiate it, which is good for compile
time. It’s good for user experience, because if you get something wrong as a programmer,
that’s important. It’s good for reasoning about the modularity of these different
subsystems, because now you have an interface that connects the two components.

00:53:22
Ron
I think it’s an underappreciated problem with the C++ templates approach to the world,
where C++ templates seem like a deep language feature, but really they’re just a code
generation feature.

00:53:32
Chris
They’re like C macros.

00:53:33
Ron
That’s right. It both means they’re hard to think about and reason about because it sort
of seems at first glance not to be so bad—this property that you don’t really know when
your template expands, if it’s actually going to compile. But as you start composing
things more deeply, it gets worse and worse because something somewhere is going to fail,
and it’s just going to be hard to reason about and understand. Whereas when you have
type-level notions of genericity that are guaranteed to compose correctly and won’t just
blow up, you just drive that error right down. So that’s one thing that’s nice about
getting past templates as a language feature. And then the other thing is it’s just
crushingly slow. You’re generating the code, almost exactly the same code, over and over
and over again. And so that just means you can’t save any of the compilation work. You
just have to redo the whole thing from scratch.

00:54:21
Chris
That’s exactly right. And so this is where again, we were talking about the sand in the
system—these little things that if you get wrong, they play forward and they cause huge
problems. The metaprogramming approach in Mojo is cool, both for usability and compile
time and correctness. Coming back to your point about portability, it’s also valuable for
portability because what it means is that the compiler parses your code, and it parses it
generically and has no idea what the target is. And so when Mojo generates the first level
of intermediate representation, the compiler representation for the code, it’s not hard
coding and the pointers are 32 bit or 64 bit, or that you’re on a x86 or whatever. And
what this means is that you can take generic code in Mojo and you can put it on a CPU and
you can put it on a GPU. Same code, same function. And again, these crazy compilery things
that Chris gets obsessed about, it means that you can slice out the chunk of code that you
want to put onto your GPU in a way that it looks like a distributed system, but it’s a
distributed system where the GPU is actually a crazy embedded device that wants this tiny
snippet of code and it wants it fully self-contained. These worlds of things that normal
programming languages haven’t even thought about.

00:55:29
Ron
So does that mean when I compile a Mojo program, I get a shippable executable that
contains within it another little compiler that can take the Mojo code and specialize it
to get the actual machine code for the final destination that you need? Do I bundle
together all the compilers for all the possible platforms in every Mojo executable?

00:55:45
Chris
The answer is no. The world’s not ready for that. And there are use cases for JIT
compilers and things like this, and that’s cool, but the default way of building, if you
just run mojo build, then it will give you just an a.out executable, a normal thing. But
if you build a Mojo package, the Mojo package retains portability. This is a big
difference. This is what Java does. If you think about Java in a completely different way
and for different reasons in a different ecosystem universe, it parses all your source
code without knowing what the target is, and it generates Java bytecode. And so it’s not
1995 anymore. The way we do this is completely different. And we’re not Java obviously,
and we have a type system that’s very different. But this concept is something that’s been
well known, and is something that at least the world of compiled languages like Swift, and
C++, and Rust have kind of forgotten.

00:56:28
Ron
So the Mojo package is kind of shipped with the compiler technology required to specialize
to the different domains.

00:56:34
Chris
Yes. And so again, by default, if you’re a user, you’re sitting on your laptop and you
say, ‘Compile a Mojo program,’ you just want an executable. But the compiler technology
has all of these powerful features and they can be used in different ways. This is similar
to LLVM, where LLVM had a just-in-time compiler, and that’s really important if you’re
Sony Pictures and you’re rendering shaders for some fancy movie, but that’s not what you’d
want to use if you’re just running a C++ code that needs to be ahead-of-time compiled.

00:56:57
Ron
I mean, there’s some echoes here also of the PTX story with Nvidia. Nvidia has this thing
that they sort of hide that it’s an intermediate representation, but this thing called
PTX, which is a portable bytecode essentially. And they for many years maintained
compatibility across many, many different generations of GPUs. They have a thing called
the assembler that’s part of the driver thing for loading on, and it’s really not an
assembler. It’s like a real compiler that takes the PTX and compiles it down to SASS, the
accelerator-specific machine code, which they very carefully do not fully document because
they don’t want to give away all of their secrets. And so there’s a built-in portability
story there where it’s meant to actually be portable in the future across new
generations. Although as you were pointing out before, it in fact doesn’t always
succeed. And there are now some programs that will not actually make the transition to
Blackwell.

00:57:42
Chris
So that’s in the category that I’d consider to be like a virtual machine, a very low-level
virtual machine by the way. And so when you’re looking at these systems, the thing I’d ask
is, what is the type system? And so if you look at PTX, because as you’re saying, you’re
totally right, it’s an abstraction between a whole bunch of source code on the top end and
then that specific SASS hardware thing on the backend, but the type system isn’t very
interesting. It’s pointers and registers and memory. And so Java, what is the type system?
Well, Java achieves portability by making the type system in its bytecode expose
objects. And so it’s a much higher level abstraction, dynamic virtual dispatch, that’s all
part of the Java ecosystem. It’s not a bytecode, but the representation that’s portable
maintains the full generic system. And so this is what makes it possible to say, ‘Okay,
well I’m going to take this code, compile it once to a package, and now go specialize and
instantiate this for a device.’ So the way that works is a little bit different, but it
enables, coming back to your original question of safety and correctness, it enables all
the checking to happen the right way.

00:58:40
Ron
Right, there’s also a huge shift in control. With PTX, the machine-specific details of how
it’s compiled are totally out of the programmer’s control. You can generate the best PTX
you can, and then it’s going to get compiled. How? Somehow, don’t ask too many questions,
it’s going to do what it’s going to do. Whereas here, you’re preserving in the portable
object, the programmer-driven instructions about how the specialization is going to
work. You’ve just partially executed your compilation, you’ve got partway down, and then
there’s some more that’s going to be done at the end when you pick actually where you’re
going to run it.

00:59:08
Chris
Exactly. And so these are all very nerdy pieces that go into the stack, but the thing that
I like is if you bubble out of that, it’s easy to use. It works. It gives good error
messages, right? I don’t understand the Greek letters, but I do understand a lot of the
engineering that goes into this. The way this technology stack builds up, the whole
purpose is to unlock compute, and we want new programmers to be able to get into the
system. And if they know Python, if they understand some of the basics of the hardware,
they can be effective and then they don’t get limited to 80% of the performance. They can
keep driving and keep growing in sophistication, and maybe not everybody wants to do
that. They can stop at 80%, but if you do want to go all the way, then you can get there.

00:59:44
Ron
One thing I’m curious about is, how do you actually manage to keep it simple? You said
that Mojo is meant to be Pythonic and you talked a bunch about the syntax, but actually
one of the nice things about Python is it’s simple in some ways in a deeper sense. The
fact that there isn’t by default a complicated type system with complicated type errors to
think about—there’s a lot of problems with that, but it’s also a real source of simplicity
for users who are trying to learn the system. Dynamic errors at runtime are in some ways
easier to understand. ‘I wrote a program and it tried to do a thing and it tripped over
this particular thing and you can see it tripping over,’ and in some ways that’s easier to
understand when you’re going to a language which, for both safety and performance reasons,
needs much more precise type level control. How do you do that in a way that still feels
Pythonic in terms of the base simplicity that you’re exposing to users?

01:00:28
Chris
I can’t give you the perfect answer, but I can tell you my current thoughts. So again,
learn from history. Swift had a lot of really cool features, but it spiraled and got a lot
of complexity that got layered in over time. And also one of the challenges with Swift is
it had a team that was paid to add features to swift.

01:00:46
Ron
It’s never a good thing.

01:00:47
Chris
Well, you have a C++ committee, what is the C++ committee going to do? They’re going to
keep adding features to C++. Don’t expect C++ to get smaller. It’s common sense. And so
with Mojo, there’s a couple of different things. So one of which is, start from Python. So
Python being the surface-level syntax enables me as management to be able to push back and
say, ‘Look, let’s make sure we’re implementing the full power of the Python
ecosystem. Let’s have lists, and for-comprehensions, and all this stuff before just
inventing random stuff because it might be useful.’ But there’s also, for me personally, a
significant back pressure on complexity. How can we factor these things? How can we get,
for example, the metaprogramming system to subsume a lot of complexity that would
otherwise exist? And there are fundamental things that I want us to add.

For example, checked generics, things like this because they have a better UX, they’re
part of the metaprogramming system, they’re part of the core addition that we’re adding,
but I don’t want Mojo to turn into a ‘add every language feature’ that every other
language has just because it’s useful to somebody. I was actually inspired by and learned
a lot from Go, and it’s a language that people are probably surprised to hear me talk
about. Go, I think, did a really good job of intentionally constraining the language with
Go 1. And they took a lot of heat for that. They didn’t add a generic system, and
everybody, myself included, were like, ‘Ha ha ha, why doesn’t this language even have a
generic system? You’re not even a modern language.’ But they held the line, they
understood how far people could get, and then they did a really good job of adding
generics to Go 2, and I thought they did a great job.

There was a recent blog post I was reading, talking about Go, and apparently they have an
80-20 rule, and they say they want to have 80% of the features with 20% of the complexity,
something like that. And the observation is that that’s a point in the space that annoys
everybody, because everybody wants 81% of the features, but 81% of the features maybe
gives you 35% of the complexity. And so, figuring out where to draw that line and figuring
out where to say no—for example, we have people in the community that are asking for very
reasonable things that exist in Rust. And Rust is a wonderful language. I love it. There’s
a lot of great ideas and we shamelessly pull good ideas from everywhere. But I don’t want
the complexity.

01:03:02
Ron
I often like to say that one of the most critical things about a language design is
maintaining the power-to-weight ratio.

You want to get an enormous amount of good functionality, and power, and good user
experience while minimizing that complexity. I think it is a very challenging thing to
manage, and it’s actually a thing that we are seeing a lot as well. We are also doing a
lot to extend OCaml in all sorts of ways, pulling from all sorts of languages, including
Rust, and again, doing it in a way where the language maintains its basic character and
maintains its simplicity is a real challenge. And it’s kind of hard to know if you’re
hitting the actual right point on that. And it’s easier to do in a world where you can
take things back, try things out and decide that maybe they don’t work, and then adjust
your behavior. And we’re trying to iterate a lot in that mode, which is a thing you can do
under certain circumstances. It gets harder as you have a big open-source language that
lots of people are using.

01:03:47
Chris
That’s a really great point. And so one of the other lessons I’ve learned with Swift, is
that with Swift, I pushed very early to have an open design process where anybody could
come in, write a proposal, and then it would be evaluated by the language committee, and
then if it was good, it would be implemented and put into Swift. Again, be careful what
you wish for. That enabled a lot of people with really good ideas to add a bunch of
features to Swift. And so with Mojo as a counterbalance, I really want the core team to be
small. I want the core team not just to be able to add a whole bunch of stuff because it
might be useful someday, but to be really deliberate about how we add things, how we
evolve things.

01:04:20
Ron
How are you thinking about maintaining backwards compatibility guarantees as you evolve it
forward?

01:04:25
Chris
We’re actively debating and discussing what Mojo 1.0 looks like. And so I’m not going to
give you a timeframe, but it will hopefully not be very far away. And what I am fond of is
this notion of semantic versioning, and saying we’re going to have a 1.0, and then we’re
going to have a 2.0, and we’re going to have a 3.0, and we’re going to have a 4.0, et
cetera. And each of these will be able to be incompatible, but they can link together. And
so one of the big challenges and a lot of the damage in the Python ecosystem was from the
Python two-to-three conversion. It took 15 years and it was a heroic mess for many
different reasons. The reason it took so long is because you have to convert the entire
package ecosystem before you can be 3.0. And so if you contrast that to something like
C++, let me say good things about C++, they got the ABI right.

And so once the ABI was set, then you could have one package built in C++ 98, and one
package built in C++ 23, and these things would interoperate and be compatible even if you
took new keywords or other things in the future language version. And so what I see for
Mojo is much more similar to the—maybe the C++ ecosystem or something like this, but that
allows us to be a little bit more aggressive in terms of migrating code, in terms of
fixing bugs, and in moving language forward. But I want to make sure that Mojo 2.0 and
Mojo 1.0 packages work together and that there’s good tooling, probably AI-driven, but
good tooling to move from 1.0 to 2.0 and be able to manage the ecosystem that way.

01:05:49
Ron
I think the type system also helps an enormous amount. I think one of the reasons the
Python migration was so hard is that you couldn’t be like, ‘And then let me try and build
this with Python 3 and see what’s broken.’ You could only see what’s broken by actually
walking all of the execution paths of your program. And if you didn’t have enough testing,
that would be very hard. And even if you did, it wasn’t that easy. Whereas with a strong
type system, you can get an enormous amount of very precise guidance. And actually the
combination of a strong type system and an agentic coding system is awesome. We actually
have a bunch of experience of just trying these things out now, where you make some small
change to the type of something and then you’re like, ‘Hey, AI system, please run down all
the type errors, fix them all.’ And it does surprisingly well.

01:06:26
Chris
I absolutely agree. There’s other components to it. So Rust has done a very good job with
the stabilization approach with crates and APIs. And I think that’s a really good
thing. And so I think we’ll take good ideas from many of these different ecosystems and
hopefully do something that works well, and works well for the ecosystem, and allows us to
scale without being completely constrained by never being able to fix something once you
ship a 1.0.

01:06:45
Ron
I’m actually curious, just to go to the agentic programming thing for a second, which is
having AI agents that write good kernels is actually pretty hard. And I’m curious what
your experience is of how things work with Mojo. Mojo is obviously not a language deeply
embedded in the training set that these models were built on, but on the other hand, you
have this very strong type structure that can guide the process of the AI agent trying to
write and modify code. I’m curious how that pans out in practice as you try and use these
tools.

01:07:12
Chris
So this is why Mojo being open source, and—so we have hundreds of thousands of lines of
Mojo code that are public with all these GPU kernels, and like, all this other cool
stuff. And we have a community of people writing more code. Having hundreds of thousand
lines of Mojo code is fantastic. You can point your coding tool cursor, or whatever it is,
at that repo and say, ‘Go learn about this repo and index it.’ So it’s not that you have
to train the model to know the language, just having access to it—that enables it to do
good work. And these tools are phenomenal. And so that’s been very, very, very
important. And so we have instructions on our webpage for how to set up these tools, and
there’s a huge difference if you set it up right, so that it can index that, or if you
don’t, and make sure to follow that markdown file that explains how to set up the tool.

01:07:54
Ron
So, I want to talk a little bit about the future of Mojo. I think that the current way
that Modular and you have been talking about Mojo, these days at least—it’s a replacement
for CUDA, an alternate full top-to-bottom stack for building GPU kernels, for writing
programs that execute on GPUs. But that’s not the only way you’ve ever talked about
Mojo. You’ve also, especially earlier on I think, there was more discussion of Mojo as an
extension, and maybe evolution of, and maybe eventually replacement of Python. And I’m
curious, how do you think about that now? To what degree do you think of Mojo as its own
new language that takes inspiration and syntax from Python, and to what degree do you want
something that’s more deeply integrated over time?

01:08:32
Chris
So today, to pull it back to, ‘What is Mojo useful for today, and how do we explain it?’
Mojo is useful if you want code to go fast. If you have code on a CPU or a GPU and you
want it to go fast, Mojo is a great thing. One of the really cool things that is available
now—but it’s in preview and it’ll solidify in the next month or something—is it’s also the
best way to extend Python. And so if you have a large-scale Python code base, again, tell
me if this sounds familiar, you are coding away and you’re doing cool stuff in Python and
then it starts to get slow. Typically what people do is, they have to either go rewrite
the whole thing in Rust or C++, or they carve out some chunk of it and move some chunk of
that package to C++ or Rust. This is what NumPy, or PyTorch, or all modern large-scale
Python code bases end up doing.

01:09:13
Ron
If you look up on the mirrors and look at the percentage of programs that have C
extensions in them, it’s shockingly high. A really large fraction of Python stuff is
actually part Python and part some other language, almost always C and C++, a little bit
of Rust.

01:09:27
Chris
That’s right. And so today—this isn’t distant future—today, you can take your Python
package and you can create a Mojo file and you can say, ‘Okay, well these for loops are
slow, move it over to Mojo.’ And we have people, for example, doing bioinformatics and
other crazy stuff I know nothing about, saying, ‘Okay, well I’m just taking my Python
code, I move it over to Mojo. Wow, now I get types, I get these benefits, but there’s no
bindings. The pip experience is beautiful. It’s super simple.’ You don’t have to have
FFI’s and nanobind and all this complexity to be able to do this. You also are not moving
from Python with its syntax to curly braces and borrow checkers and other craziness. You
now get a very simple and seamless way to extend your Python package. And we have people
that say, okay, well I did that and I got it first 10x, and 100x, and 1000x faster on CPU.

But then because it was easy, I just put it on a GPU. And so to me, this is amazing
because these are people that didn’t even think and would never have gotten it on a GPU if
they switched to Rust or something like that. Again, the way I explain it is, Mojo is good
for performance. It’s good if you want to go fast on a GPU, on a CPU, if you want to make
Python go fast, or if you want to—I mean, some people are crazy enough to go whole hog and
just write entirely from scratch Mojo programs, and that’s super cool. If you fast forward
six, nine months, something, I think that Mojo will be a very credible top-to-bottom
replacement for Rust.

And so we need a few more extensions to the generic system. And there’s a few things I
want to bake out a little bit. Some of the dynamic features that Rust has for the
existentials, the ability to make a runtime trait is missing in Mojo. And so we’ll add a
few of those kinds of features. And as we do that, I think that’ll be really interesting
as an applications-level programming language for people who care about this kind of
stuff. You fast forward, I might even project a timeframe, maybe a year, 18 months from
now, it depends on how we prioritize things, and we’ll add classes. And so as we add
classes, suddenly it will look and feel to a Python programmer much more familiar. The
classes in Mojo will be intentionally designed to be very similar to Python, and at that
point we’ll have something that looks and feels kind of like a Python 4.

It’s very much cut from the same mold as Python. It integrates really well from
Python. It’s really easy to extend Python, and so it’s very much a member of the Python
family, but it’s not compatible with Python. And so what we’ll do over the course of N
years, and I can’t predict exactly how long that is, is continue to run down the line of,
okay, well how much compatibility do we want to add to this thing? And then I think that
at some point people will consider it to be a Python superset, and effectively it will
feel just like the best way to do Python in general. And I think that that will come in
time. But to bring it all the way back, I want us to be very focused on, ‘What is Mojo
useful for today?’ Great claims require great proof.

We have no proof that we can do this. I have a vision and a future in my brain, and I’ve
built a few languages and some scale things before, and so I have quite high confidence
that we can do this. But I want people to zero back into, okay, if you’re writing
performance code, if you’re writing GPU kernels or AI, if you have Python code, you don’t
want it to go slow, a few of us have that problem, then Mojo can be very useful. And
hopefully it’ll be even more useful to more people in the future.

01:12:26
Ron
And I think that already, the practical short-term thing is already plenty ambitious and
exciting on its own. Seems like a great thing to focus on.

01:12:32
Chris
Yeah, let’s solve heterogeneous compute and AI. That’s actually a pretty useful thing,
right?

01:12:37
Ron
Alright, that seems like a great place to stop. Thank you so much for joining me.

01:12:41
Chris
Yeah, well thank you for having me. I love nerding out with you and I hope it’s useful and
interesting to other people too. But even if not, I had a lot of fun with you.

01:12:49
Ron
You’ll find a complete transcript of the episode along with show notes and links at
signalsandthreads.com. Thanks for joining us. See you next time.

	]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Nepal moves to block Facebook, X, YouTube and others]]></title>
            <link>https://www.aljazeera.com/news/2025/9/4/nepal-moves-to-block-facebook-x-youtube-and-others</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45137363</guid>
            <description><![CDATA[The restrictions come after the social media giants failed to meet state registration requirements, says government.]]></description>
            <content:encoded><![CDATA[The restrictions come after the social media giants failed to meet state registration requirements, says government.Nepal’s government has said it will shut off access to major social media platforms, including Facebook and X, after they failed to comply with authorities’ registration requirements.The move, announced on Thursday, is part of what the government says is an effort to curb online hate, rumours and cybercrime.Recommended Stories list of 3 itemslist 1 of 3‘Everest Man’ breaks own record for climbing world’s highest mountainlist 2 of 3Dozens missing after monsoon triggers Nepal-China floodslist 3 of 3Photos: The last nomads of Nepalend of listCompanies were given a deadline of Wednesday to register with the Ministry of Communications and Information Technology and provide a local contact, grievance handler and person responsible for self-regulation – or face shutdown.“Unregistered social media platforms will be deactivated today onwards,” ministry spokesman Gajendra Kumar Thakur told AFP.Communications and IT Minister Prithvi Subba Gurung said, “We gave them enough time to register and repeatedly requested them to comply with our request, but they ignored [this], and we had to shut their operations in Nepal.”Meta, which owns Facebook, Instagram and WhatsApp, YouTube parent Alphabet, X, Reddit, and LinkedIn were asked to register by Wednesday’s deadline.AFP reported that the platforms remained accessible on Thursday.‘Directly hits fundamental rights’The online restrictions follow a 2023 directive requiring social media platforms – which have millions of users in Nepal with accounts for entertainment, news and business – to register and establish a local presence.Only five, including TikTok and Viber, have since formally registered, while two others are in the process.Bhola Nath Dhungana, president of Digital Rights Nepal, said that the sudden closure shows the “controlling” approach of the government.“This directly hits the fundamental rights of the public,” Dhungana said. “It is not wrong to regulate social media, but we first need to have the legal infrastructure to enforce it. A sudden closure like this is controlling.”Nepal has restricted access to popular online platforms in the past.Access was blocked to the Telegram messaging app in July, with the government citing a rise in online fraud and money laundering.In August last year, Nepal lifted a nine-month ban on TikTok after the platform’s South Asia division agreed to comply with Nepali regulations.Governments worldwide, including the United States, European Union, Brazil and Australia, are also tightening oversight of social media and big tech, citing concerns over misinformation, data privacy, online harm and national security. India has mandated local compliance officers and takedown mechanisms, while China maintains strict censorship and licensing controls.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Interview with Japanese Demoscener 0b5vr]]></title>
            <link>https://6octaves.com/2025/09/interview-with-demoscener-0b5vr.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45137245</guid>
            <description><![CDATA[→日本語で読むWelcome to &amp;quot;Interviews with Demosceners&amp;quot;! This time, we welcome Japanese demoscener 0b5vr, who mainly creates 64K...…]]></description>
            <content:encoded><![CDATA[→日本語で読むWelcome to “Interviews with Demosceners”! This time, we welcome Japanese demoscener 0b5vr, who mainly creates 64K and 4K intros.For many, 0b5vr is best remembered for his 64K demo “0b5vr GLSL Techno Live Set”, released at Revision 2023. In this interview, he talks about how this piece was created, as well as his recent live music performance.He also talks about trends around the Japanese demoscene, like music production with GLSL, machine live, and generative VJ. I also took the chance to ask how he feels about sceners like me—that is, people who know nothing about programming or technology! Happy reading!Note: If you don’t know what demoscene is, you may want to start from here!First of all, could you introduce yourself?I’m 0b5vr, and I don’t belong to any particular group. I mainly work on 64k intros and 4k intros/exegfx using WebGL. I also compete in Shader Jam and perform live coding and VJ sets at club events and similar venues.Your demo “0b5vr GLSL Techno Live Set” had a strong impact on me. I was curious about this. It says “Live Set,” but was released in the 64K category. What is this exactly? Is this live coding?0b5vr GLSL Techno Live Set (“0mix”) is indeed a 64K intro demo. Just like any other 64K intro, this audiovisual piece is generated from a 64KB file―an HTML file, in this case.That said, as described in the title, its format is “Live Set.” It can be somewhat tricky, because it looks like a recorded video of a live performance at an event, but it’s actually a 64K intro.Hmm… I’m still not sure if I understood correctly. Could you elaborate a bit more?0mix was inspired by three different scenes: techno demos, live coding, and 64K intros.Let me start with techno demos. There are many techno-themed demos in the history of the demoscene. If you look at the demos such as “Medium” by Einklang.net, “X-MIX 2004: Ion Traxx” by Kewlers & mfx, and “Emix” by Epoch, they use multiple tracks mixed together like a DJ set, rather than a single techno soundtrack. They also use VJ-style visuals to create an atmosphere similar to a club event. Emix has black-and-white visuals with unique textures that fit perfectly with cold, mechanical techno, and it’s one of my favorites.Next is live coding. Live coding is a live performance where visuals and music are generated with programming in real time. On the screen, you’ll see the visuals and sound waveforms being generated alongside the code you’re writing. This highlights that the artwork is generated by code. In the demoscene, live coding sessions focus mostly on visuals in GLSL (eg, Shader Showdown, Shader Jam). But in live coding events like Algorave and Eulerroom, music live coding is as popular as, or even more popular than, visual coding. From what I see, Tidal Cycles and Sonic Pi are the most commonly used tools in those environments. (Reference video)Finally, there’s the 64K intro. It’s a category where you create visuals and audio with an executable file of just 64KB. This is the most challenging category since every element has to be procedurally generated within the intro. Most 64K creators build their own engines and tools from scratch. This category requires a broad range of knowledge and skills including modeling, animation, rendering, post-processing, music, and compression.If I managed to merge all three inspirations and create a 64K techno demo with music generated by live coding, I knew I could present it to demosceners and other creators around the scene with confidence. I came up with the idea about a year before Revision 2023. Over the course of that year, I refined a demo engine, built a live coding environment, composed music, and created visual assets almost entirely on my own. Here’s the working environment for 0mix. The top screen shows the preview, timeline, etc., while the bottom screen is the code editor. Basically, I spend most of the time in the code editor. So, you climbed the highest mountain by yourself. What was the process like?It was extremely tough and painful to spend a year working on a challenging 64K project by myself. My advice is to collaborate with others. At the very least, you should find someone you can discuss the progress with. It was indeed fun to surprise many friends at demoparties, but at the end of the day, completing the project is more important.You entered 64K compo, but it ended up being released in the PC Demo compo. Did that bother you?It’s true that 0mix was released in the PC Demo Compo at Revision 2023. That was because it was the only entry in the PC 64K intro, which wasn’t enough to hold a separate compo. So the two compos were merged. The same thing happened at Revision 2022. PC 64K intro compo was incorporated into the 8K intro compo because there were only two entries. Nevertheless, I’ve always pursued uncompromising quality, so I was down with it. Along with the works of other demo groups (such as Fairlight, mfx, and Still), I think I could contribute to making that compo interesting.Ah, you’re right. That felt like a never-ending compo!There were so many entries for Revision 2023, and from the chat I got the impression that many participants and viewers were exhausted after the compo. Still, it was a great compo. All of the top works featured demoscene-style visuals built with their own engines, and their narratives were also impressive. So I’m happy with my result. When there’s a big entry in the compo I’m in, I feel more accomplished because it means I helped make that compo exciting together with those great pieces.That’s right, I remember some big names rushing in at the end. Nevertheless, this demo stood out for its originality.Thank you. Revision has an award called “Crowd Favorite” where viewers can vote for their favorite demo in any category, and 0mix received first prize. 0mix is a piece that reflects what I love, so I felt happy that everyone else enjoyed it, too.photo provided by 0b5vrCongratulations! It was indeed a cool demo.Oh, I have a question for you. How do you feel about the code constantly shown in 0mix? What kind of impression does it give you?  (Interviewer’s note: I’m not from the programming field. I’m the type of person who chooses a laptop by its color.)Maybe it’s more like a design or typography? It says “live coding,” so I figured this code is for its visuals, but I have absolutely no idea if the code itself is cool or not. If I didn’t know what live coding is, I’d probably just look at it as part of the design, just like seeing the typography in a language I don’t understand.Ah, that’s interesting! Actually, the code displayed on the screen is not for visuals but for music. I use a programming language called GLSL, which is normally used to generate visuals. But 0mix is a live performance-themed demo where I use GLSL for music, and that’s why it’s called “GLSL Techno Live.” If you look at the code closely, you’ll see the parts for instruments, like “KICK,” “HIHAT,” and “BASS.” And by adding and subtracting these elements, I shaped the flow of music.Ohh, so that was code for music! But even after knowing this fact, my impression of this piece hasn’t really changed. I guess that shows I interpreted the code as part of the design. Is it okay if a viewer like me sees it that way? (laughs)In my post about this production on Scrapbox, I wrote, “for viewers without coding knowledge, it feels like music-making magic. And for viewers who know programming languages and environments, it’s a hint to guess the next move.” So I expected that some people would see it as part of the design.To reveal a bit more about my understanding, now I do understand that “demo is generated from an executable file” and that “a 64K piece has a 64KB file.” But I still don’t see things like “this is real-time rendering, so it’s more impressive than live-action” or “it’s great quality considering this is 64KB.” Basically, I watch demos like I watch music videos, and the only thing that matters to me is whether I find it cool or not.Ryoji Ikeda has a work that presents data including planets and genes using 5×5 pixel fonts. Of course, only experts can truly understand such data, so most of us simply enjoy the visual design that comes out of it. Even if we try to find deeper meaning in it, we probably just end up saying something like, “Wow, the world is huge.” I’ve read that Ikeda actually intended for viewers to see it that way.Oh, then I’m actually one of his intended viewers. When I first saw his installation video, I knew him as a musician, so I thought, “Wow, that’s his MV? Cool! Very futuristic!” I later realized that it wasn’t just design. It’s nice to know that creators and demosceners expected viewers like me, and personally, I feel relieved. I’d always thought they might be annoyed to hear a clueless person like me commenting on their piece. (laughs)To me, how others first got interested in a piece or in the culture is as fascinating as the motives behind its creation. So I do appreciate sceners who are not from the tech side!Thank you! That’s really nice and reassuring to hear! OK, let’s go back to that music code. You wrote in your post on Scrapbox that you put a lot of time and effort into the music.Actually, I had never really made this type of techno music before, so I watched a lot of live performances of this style and tutorials on YouTube. I also bought and tried hardware for “machine live” performances, like the Elektron Syntakt and Dirtywave M8, for research.What is “machine live”?“Machine live” is a type of music performance similar to live coding. Performers use music equipment like grooveboxes and modular synths in real-time to control the sound during the performance. What you can do depends on the features of the equipment, so performers always have to be aware of limitations—something somewhat similar to the demoscene. It’s a fascinating culture. There’s even a “DAWless Live” category where you perform without using a DAW, the standard PC-based music production system. For 0mix, I drew a lot of inspiration from the philosophy and methods of machine live and applied them to GLSL live coding. (Reference video)I just watched the reference video you sent me. Does everyone in this scene really use that much gear?Of course not. Not everyone uses this much equipment, or equipment of this size, for live performance. Lately, it seems like the palm-sized Dirtywave M8 is trending for live sets. The Dirtywave M8 uses a tracker-style UI, and it’s fun to compose with. Plus, it fits well with the demoscene aesthetic.I did a lot of research on machine live and live coding performances, and this gave me ideas about how to create sound and how to evolve live performance. But that only covered the technical side. When it comes to making techno, especially abstract sounds, I had to learn through trial and error and trust my feelings. Even after I learned how to make sounds on standard hardware or software, GLSL follows a completely different set of rules, and I had to be really fired up to tackle it.I heard that you did a live performance recently. What kind of event was it?I performed a live coding set at “draw(tokyo); #2” in March 2025. “draw(); ” is a club event focused on audiovisuals, especially live coding and generative VJ (the so-called “gene-kei” performances). It takes place from time to time in VRChat and at physical venues.At draw(tokyo); #2, I performed using Wavenerd, my custom GLSL live coding environment. For my 40-minute live set, I mainly used techno patterns created for 0mix. It was a really memorable experience, since it was my first time doing a live music performance with Wavenerd. I’d love to do more live performances in the future.The “Wavenerd” system I used for my live coding performance at draw(tokyo); #2. Since we were chroma keying with VJ visuals, the background is blue. The performers are always lit up in blue.When a coder does a live music performance, aren’t you too busy typing code in front of the PC to even look at the audience’s reaction?During the performances, I rewrite parts of prewritten code, so I don’t need to constantly keep typing. But I’m busy adding and removing parts, changing parameters, and doing some DJ-style mixing, so basically I completely zone in on the screen. That said, I can still see the audience’s reactions to some extent, and I felt really happy when they reacted at the moments I expected.Do you know who the primary audience is? I guess this kind of live performance requires some knowledge to really enjoy it.I still don’t know what kind of audience it attracts. From what I saw, I got the impression that many of them are interested in musical experiences and visual production at least. But I’m not sure how many are interested in coding, or actually create things with code. How technical it should get, how strictly you stick to the technical restrictions, and how much you make the audience dance—I think performers are expected to balance these elements well. Probably, this is something gene-kei performers constantly have to tackle. In fact, quite a few performers change their set depending on the tone of the event.Did you have VJs for your live performance?Yes, I asked fellow demosceners, ukonpower and Renard, and they generated visuals that matched the techno. I just told them, “I’m going to do 0mix,” and they both knew what it meant, so everything went very smoothly. (laughs) They created visuals in my style, but their own personalities also shone through. It was really cool.Oh, that’s really cool!  According to your discography, you also have 4K as well as 64K works. Is there a reason for that? For the 4K intros I’ve released lately, I can usually create them in one or two weeks. But 64K is my soul, so I want to keep making 64K intros. The thing is, 64K requires hundreds of times more work than 4K. So, when I don’t have the time or motivation but still want to contribute to a demoparty, I just make a 4K intro.I must say that the production environment for 4K intros is well-supported in the current demoscene. Recently I’ve been using 0x4015’s minimalGL. With this demotool, I can easily create 4K intros just by writing GLSL. That being said, I wouldn’t recommend it to everyone, because you also have to write the music in GLSL.In 2023, I released a 4K intro called “Architectural Shapeshifter” with Renard. For this piece, Renard was in charge of the concept and visuals, while I was in charge of the music and direction. We used minimalGL for this piece as well. It was the first time for Renard to create a 4K intro, but he was able to create it easily. We collaborated by tweaking the source code on GitHub and communicating via Discord. We exchanged ideas and suggestions on each other’s code, and it turned out to be a very efficient workflow.There are many coders who can write GLSL in Japan, but not many of them take on 4K. So I’d love to collaborate more using minimalGL.What’s hot in the Japanese demoscene these days? What category is popular? I noticed there was a demoparty called SESSIONS in Japan last year.It seems like a lot of people are coming into the demoscene from shader culture centered around VRChat. The people I got to know at demoparties like SESSIONS were mostly active in VRChat. In particular, the event draw(); seems to have a strong influence, and many of the people who got interested in live coding or generative VJ through draw();’s audiovisual experience also developed an interest in the demoscene.Live coding and generative VJ becoming a gateway into the demoscene sounds like a new path to me.Yes, indeed. draw();’s main crew, Saina-san, purposefully aims for a crossover with demoscene culture, like SESSIONS, and this accelerates the influx. We’re really grateful for that.I’m sure a person like that is supporting the demoscene in Japan and around the world.  OK, let’s go back to the production. Is there anything you do in everyday life to get inspired for your creations?I check Pouet and Demozoo as much as possible to stay in the know about recent demoscene productions. If I ever stopped checking Pouet and Demozoo, I think that would be the end of me as a demoscener.I also try to take in other cultures as well. Recently, I’ve been fascinated by the flashy audiovisual productions in pachinko and pachislot machines. They use dazzling visuals and music to stir up the spirit of gambling. These productions thoroughly pursue how to exploit the human reward system, all within machines that operate under very strict legal restrictions. In a way, I think this represents the highest peak of visual entertainment.I also go for walks frequently. Especially walking around Tokyo late at night gives me a strong sense of urban life and social activity, and it inspires me a lot. “Domain“, a 64K intro I released at Tokyo Demo Fest 2021, was heavily inspired by night Tokyo. I find the concept of the night city very interesting, and I’d like to explore it further.Which areas do you usually walk around?I mainly walk around downtown. I can feel the rhythm of social activity through people’s movements, clothing, and buildings. It’s also very fun to walk around residential areas. When I imagine that this is someone’s everyday life, I can sense their presence through the scenery.Do you have anything you always keep in mind when you create, like a routine or your own personal rule?For my demo source code, I use Git for version control and share as much of the code as possible on GitHub. Basically, I publish my source code under the Creative Commons BY-NC 4.0 license, and users can adapt and use it freely for non-profit purposes. By publishing my source code, I allow other people to refer to my production methods. In fact, I’ve often heard that people have made demos based on my code. Getting more chances to discover other demosceners’ great works is valuable for me too, so I’ll continue to publish my source code.Also, when I do version control on Git, I try to write commit logs—comments you can add to each version—as detailed as possible. Commit logs explain which part of the code I changed, and they also serve as a kind of production journal. In addition to information like what type of change I made and for what purpose, they help me recall my state of mind or what I was thinking during the creative process.For programmers, is it a hassle to write detailed commit logs?Commit logs aren’t considered a direct contribution to a program, just like READMEs or documentation. So, engineers who want to focus on coding and dislike communicating often don’t write them at all. Usually, detailed commit logs are recommended when you work with other people on business projects. However, even for a one-off piece of code written by a single person, I think we should consider how detailed we make the commit logs, because someone else—or even yourself—may end up reading them like archaeology.Archaeology… that’s interesting.  Okay, let me go to the classic question: your favorite demo, a memorable demo, or a demo that changed your life… anything. Tell us about a demo, or demos that are special to you.As I mentioned, “Emix” by Epoch is the demo I like the most. From the theme of each effect to the color grading, glitch effects, music, and direction, this piece defined what a demo should have, for me. Other pieces that helped define my standards include “cdak” by Quite & Orange, “Transformer 3” by Limp Ninja, and “Clean Slate” by Conspiracy. I put them together in my Pouet playlist “0b5vr’s bible”, if you’re interested.Among many other forms of self-expression, why did you choose the demoscene? Or are you trapped by this culture? Tell me what’s so attractive about it.The demoscene is a creative activity free from art as a capital asset or from commercial value. We mostly create and present pieces in a format that has little value in today’s society, and we purely inspire one another’s technical curiosity and the craving for expression. Also, the demoscene ecosystem is cooperative. Anyone can access demotools, ask questions to veterans, and start creating a piece. I respect the works, workflows, and ideas of active demosceners in the community, and that’s what motivates me to create something that earns their recognition.On the other hand, due to the methods used in the demoscene, a lot of pieces look similar, and that’s clearly a weak point of the scene. If I only keep exploring the demoscene, I can’t expand my range of expression. As a creator, I think it’s important to look at various cultures and absorb many different methods of expression. The easy exchange of fresh inspiration is one of the features of the demoscene, so I’d like to take in many forms of expression both inside and outside the scene, and keep inspiring each other.Is there anything you want to do in the future?What I want to do most is live music performance using GLSL, as I mentioned. Seemingly, this format of live music with GLSL is currently performed only by me and “Rakuto-ice” san. So I want to perform more to develop my style further, and I hope more people will enjoy it.And of course, I want to create demos like 64K, but right now I don’t have enough motivation or ideas. To find more motivation and inspiration, I think it’s about time I formed a demogroup.Sounds like there’s much to look forward to!  Finally, your message for demosceners and demo fans out there, please.For those of you who are not yet demosceners:  I’ve seen many people who have an interest in the demoscene but also fears about the culture itself. And it’s not just Japanese people, people in other countries have reacted that way too. Please don’t be afraid of us. If you are interested in creating something with a computer and having fun at a demoparty, then you are a demoscener. Whether you already have a medium of expression or not, if you join the party, you may naturally feel inspired to think, “I want to express myself too.” Demoparties like Tokyo Demo Fest, SESSIONS, and Revision have various compos, including simple programs, illustration, photography, music, along with the demo compo. Of course, if you want to create a demo, fellow creators will help you. We demosceners hope you will have fun in this scene.For those who are already demosceners (including me):  Make 64K!Thank you very much for answering my question, 0b5vr!0b5vr’s works can be found on Pouet and Demozoo. Also, be sure to check his essay on the production of 0mix on Scrapbox, where he goes deeper into his thoughts on the demoscene and the creative process.Thank you very much for reading this to the end!—————-In case you’re wondering what “demo” or “demoscene” is, better check out the well-made documentary called Moleman2.  (and the director, M. Szilárd Matusik’s interview can be read in here.) #1: q from nonoil/gorakubu is here.  #2: Gargaj from Conspiracy, Ümlaüt Design is here.  #3: Preacher from Brainstorm, Traction is here.  #4: Zavie from Ctrl-Alt-Test is here.  #5: Smash from Fairlight is here.  #6: Gloom from Excess, Dead Roman is here.  #7: kioku from System K is here.  #8: kb from Farbrausch is here.  #9: iq from RGBA is here. #10: Navis from Andromeda Software Development is here. #11: Pixtur from Still, LKCC is here. #12: Cryptic from Approximate is here. #13: 0x4015 aka Yosshin is here. #14: Flopine from Cookie Collective is here.  #15: noby from Epoch, Prismbeings is here.Why I’m interested in demoscene is explained in this article. And for some of my other posts related to “demo and “demoscene” culture is here.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[I bought the cheapest EV, a used Nissan Leaf]]></title>
            <link>https://www.jeffgeerling.com/blog/2025/i-bought-cheapest-ev-used-nissan-leaf</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45136103</guid>
            <content:encoded><![CDATA[

I bought a used 2023 Nissan Leaf in 2025, my first 'new' car in 15 years. The above photo was taken by the dealership; apparently their social media team likes to post photos of all purchasers.

I test drove a Tesla in 2012, and quickly realized my mistake. No gasoline-powered car (outside of supercars, maybe? Never drove one of those) could match the feel of pressing the throttle on an electric.

I started out with a used minivan, which I drove into the ground. Then I bought a used Olds that I drove into the ground. Then I bought a used Camry that I bought before we had kids, when I had a 16 mile commute.

Fast forward about 15 years, and I found myself with a very short commute, only driving a few miles a day, and a family minivan we use for nearly all the 'driving around the kids' stuff.

So I wanted a smaller car (get back a foot or so of garage space...) that was also more efficient.

Video and GitHub EV Project

If you don't like reading blog posts (why are you here?), I also posted a video going over most of this, with a little more color, on my YouTube channel:





Also, this blog post is also the centerpiece of my new GitHub project geerlingguy/electric-car, where I detail all the steps on my nascent EV journey.

Equipment and Add-ons

Before I go further, I thought I'd mention some of the things I've added to my Leaf to make the EV experience a little nicer (some links are Amazon affiliate links. I earn for qualifying referrals):


Grizzl-E Level 2 Charger for the garage (see Issue #5)
Lectron L1 J1772 EV charger for a more portable charger, when I just need to top off the car for a few hours
J1772 Wall mount for cable and plug - I was going to 3D print one, but figured the metal product would hold up better in a garage in the midwest
NACS to J1772 AC L1/L2 charging adapter
CCS1 to CHAdeMO L3 DC Fast charge adapter (see Issue #9)
CarlinKit 5.0 Wireless CarPlay/Android Auto adapter because the Leaf only supports wired CarPlay by default
VIOFO A119 Mini Dashcam with a Dongar wiring harness adapter (see Issue #3)


Monitoring the Battery

If you're considering a used Leaf, or if you have a Leaf already, it's a good idea to keep tabs on the battery health, especially since the meter on your dash is painfully basic in how much data it provides.

Individual cell charge, 'State of Health' of the overall battery, and much more are available through the car's OBD-II port.



Soon after I bought my Leaf, I ordered a LeLink 2 ($35) and bought the LeafSpy Pro App for my iPhone ($20).

I plugged the LeLink 2 into the OBD-II diagnostics port under the steering column, and fired up LeafSpy Pro. It gives me some helpful metrics like:


  
  SOH: State of Health
  Hx: Conductance
  


See Issue #8: Document battery health for all my notes monitoring my own Leaf's battery. But bottom line, my battery showed a 93.16% 'SoH' (State of Health), meaning it still has most of its capacity.

I've been reading up on various forums about managing the Leaf's battery, and am trying to do some things to extend the battery's life as long as possible:


Limiting the number of QCs (Quick Charges / DC Fast Charge), as this heats up the uncooled Leaf battery, degrading it slightly each time, especially on hotter days
Keeping the charge between 50-80% when manageable
Charging up to 100% at least once a month, and letting it 'top off' to rebalance the pack for at least a few hours afterwards
Not driving like a maniac, despite having more torque in this car than I've ever had in any of my previous cars


Why buy electric?

I overanalyze most things, so had been researching this purchase for about a decade now.

With EVs there are tradeoffs. Even in my situation, only driving a car a few miles a day, I do take my car on one or two regional road trips every year.

Having the ability to hop in at 6 am and be in Chicago or KC by late morning is nice. Having to plan a long break somewhere halfway to charge is not.



But if I only take that trip once a year, I can either (a) rent a gas car that gets me there a little more quickly, and ensures I don't have to find a spot in the destination city to do a full charge before the return trip. Or (b) plan for an extra X hours total during the trip to ensure I have padding for charging.

Charging infrastructure's improving in the US (and in many parts of the world), but it's nowhere near as ubiquitous as gas stations.

Hopefully this improves over time, but for now, I plan on using the electric car for local travel, likely only going more than 100 miles or so in a day once or twice a year.

Why buy Leaf?

Price.

That's mostly it. And I drove a Nissan Sentra rental on a recent trip, and realized Nissan isn't half bad. They seem to not require an Internet connection for their cars, they offer basic lane following and adaptive cruise control, they have CarPlay/Android Auto...

The Leaf ticks all the little 'convenience' checkboxes, but is also not 'extravagant'.

And the later model years also aren't "look at me I drive an EV" ugly (though they're not amazing-looking, either).

But I drove a minivan, an olds, and a Camry, so obviously I'm function > form when it comes to my car!

Because of the smaller battery (and up until 2026, a battery with no active cooling), combined with the use of a DC fast charging connector (CHAdeMO) that's going out of style in the US, used Nissan Leafs are priced considerably lower than competitors.

Well, all except maybe Teslas around a year or two older right now. But Teslas don't have native CarPlay. And I'm not a fan of how Tesla is trying to turn the car into some kind of appliance, RoboTaxi, self-driving thing, versus it being a transportation vehicle that I can do what I want with.

No judgement on Tesla owners, the used Tesla market was enticing at the time I bought the Leaf.

I also looked a lot at the Hyundai Ioniq and Kona; both were just a little bit too large for my liking, but they could've worked. The problem was used models in good condition were a lot more expensive than I was willing to pay.

So back to the Leaf: Nissan's probably not the best right now when it comes to EVs and features, but they're certainly the cheapest. And 'good enough' is fine by me.



She's got it where it counts, kid.

Gripes about my Leaf

There are a few things that baffle me about the Leaf, some that have been frustrating from the first test drive; others that are more subtle:


There is no 'play/pause' button. Anywhere. At least not on the steering wheel or the display area. You have to go into the music section on the entertainment display, then press the software play/pause button. That's dumb. I've resorted to just turning Audio on/off using the volume knob, which accomplishes the same goal but is not always ideal.
Going into 'Neutral' is an exercise in frustration. I thought you just put your foot on the brake and move the shifter knob to the left. But you have to do it with the right timing, I think.
There's no way to open the tailgate short of pressing the release button. At least as far as I'm aware. There's no button in the cabin or key fob to unlatch it. The manual says the other way to open it is with a screwdriver, from inside the car, pushing on the latch (lol). I'm not alone here. At least there's a button on the remote to open the charge port.


The joy of electric

I don't care about engine noise. I appreciate it, though. My brother had a 1992 Forumula Firebird. And I nearly owned it after he moved away, instead of my Olds! (But I'm a boring-car person, so I think I was happier with the Olds).

The nice things about electric vehicles that swayed me in their favor, in descending order:


One pedal driving Seriously, why doesn't every EV have this mode? It makes driving one feel SO much better than any gas car, in terms of connection between driver and car movement.
Sprightly torque: Outside of exotic tiny gas cars, you're not going to get the same zip even a cheap EV like a Leaf gives you—smash the accelerator in non-Eco mode and any passenger will giggle, every time.
Blissful quiet: Though some cars have annoying noises (Nissan calls this VSP, or "Vehicle Sound for Pedestirians") they play at low speeds.
Lower maintenance requirements: I hate every time I have to jack up my car and change the brakes, or take it in for oil/fluid changes. EVs (usually) require less maintenance, besides maybe tires.
Conveniences: Like running climate control to cool down/heat up the car prior to hopping in, even while it's in the garage! Or plugging it in to charge at home, and not having to stop by a gas station.
Long-term economics: in general, charging with electricity, at least here in St. Louis, is cheaper than filling up with gas, on a dollar-per-mile basis.


The pain of electric



All that said, I knew going into this there would be some pain. Maybe in 10 or 20 years these things will get solved, but off the top of my head:


Price: The Leaf (especially used, right now) is the cheapest, but it is by no means cheap. It takes a few years to break even with a similarly-specced gas car. But buying a gas car, you have a lot more options on the low-low end.
Range Anxiety: Yes, it's overblown, but no, it's not non-existent. The day I bought my used EV, the dealership (which doesn't sell many EVs, even new) didn't have a 'Level 3' DC fast charger—and they had only charged it to about 16%. Letting it top off at L2 while I was dealing with finance, we got to 23%. I wasn't quite sure I'd make it home off the lot! Luckily I did, with 12 miles of range remaining. Road tripping or day trips require more planning when driving an EV.
Lack of standards: For 'L3' DC Fast Charging, the Leaf has a CHAdeMO port. Teslas and many newer EVs have NACS. Then there's CCS1 and CCS2. And charging stations are run by multiple vendors with multiple apps and payment methods. It's not like gas stations, like with Shell, BP, Buckee's, etc. where you just drive up, stick the gas nozzle in your tank, and squeeze. Even adapters can be complicated and annoying, and many EV charging stations only support one or two standards—and some may only have one CHAdeMO plug, and that plug may have been ripped off the unit to be scrapped by a copper thief!
Lack of standards, part 2: For L1/L2 charging, some cars use J1772, some use NACS... and then wall charging units are all over the board with supporting 6, 12, or 16 Amps for L1 (they shouldn't do 16 on a 15A circuit but it seems like some do!), or various different amperages for L2. Some of these units require apps to configure them, others have dip switches, and yet others are not configurable, and don't list their exact specs in an easy-to-find location. Usually forum posts from users who buy the chargers offer more information than product manufacturers' own websites!
Being an EV: For some reason, most EVs look like... EVs. I honestly was holding out hope Tesla would just make a Corolla, but an EV version. All the cheap EVs like the Bolt, i3, Leaf, etc. just look... sorta ugly. Subjective, sure, but at least my Olds looked kinda sleek. Even if it was an Olds. EVs stand out, and that I don't enjoy. I want an EV that looks like a Camry. Just blend in and don't stand out.
Cables and chargers: The Leaf has slightly less trunk space than my slightly-larger Camry. I didn't realize how big L1/L2 charge cables are. Even L1-only cables (which charge at a very anemic pace, like 10 miles / hour of charge) are fairly thick, bulky affairs. About 1/10 of my trunk is devoted to my charging cable. And on a road trip, I will likely carry my NACS to J1772 and CCS1 to CHAdeMO adapters. And the latter adapter includes its own battery (that has to be charged) and firmware (that might need to be updated)!


Further Reading

Be sure to check the Issues in my GitHub project for more of my EV adventures.

I don't plan on becoming an EV advocate by any means.

The Leaf is the perfect option for me, but I wouldn't recommend an EV for most car owners yet, especially considering the price disparity and infrastructure requirements that exclude large swaths of the population!]]></content:encoded>
        </item>
    </channel>
</rss>