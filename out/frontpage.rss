<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Fri, 12 Sep 2025 04:10:23 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Differences between stal/IX and regular Linux]]></title>
            <link>https://stal-ix.github.io/STALIX.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45218303</guid>
            <description><![CDATA[landing page]]></description>
            <content:encoded><![CDATA[
      
      
      

      

This document contains a regularly updated list of differences between stal/IX and regular Linux.

Minimalism


  “UNIX is simple and coherent…” - Dennis Ritchie



  “GNU’s Not UNIX” -  Richard Stallman


stal/IX is not UNIX or Linux in the usual sense of these terms.

stal/IX is an attempt to rethink some fundamentals without touching the Linux API and ABI.

One of the goals of stal/IX is to build the system from the ground up in such a way that it is easy to understand how it works, not just easy to use.

https://wiki.musl-libc.org/alternatives.html
https://github.com/illiliti/libudev-zero
https://busybox.net/tinyutils.html
https://connortumbleson.com/2022/11/28/open-source-saying-no/

No FHS

https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard
FS.md

In general, the file system will be familiar to those who know Nix/Guix. Atomic updates, multiversioning - it’s all here!

No systemd

https://blog.darknedgy.net/technology/2020/05/02/0/
https://www.phoronix.com/news/systemd-Git-Stats-2022

Currently, stal/IX uses a custom init as the most lightweight solution. It formerly used runit, but it was too hard with the content-addressable store.

Musl

https://drewdevault.com/2020/09/25/A-story-of-two-libcs.html
https://codebrowser.dev/glibc/glibc/nptl/pthread_cancel.c.html#99
https://www.phoronix.com/news/Glibc-2.36-EAC-Problems
https://ariadne.space/2021/12/29/glibc-is-still-not-y2038-compliant-by-default/

Glibc does not fully support static linking. stal/IX uses musl internally and allows userland software to be built with an arbitrary libc of choice.

Non-root package management

IX.md

All files on the system are owned by user IX, and all package management is performed on its behalf.

Consequently, there is not a single suid binary file in the system. Sudo is a thin layer over the local ssh daemon, to increase privileges.

Fully supervised process tree

Every process other than init has a parent other than init. All processes that do not meet this requirement are terminated by a specially designated background process. A custom init is used to manage services, encouraging this behavior.

https://github.com/swaywm/sway/issues/6828
https://github.com/stal-ix/ix/blob/main/pkgs/bin/sched/staleprocs/staleprocs.sh
https://unix.stackexchange.com/questions/250153/what-is-a-subreaper-process

Static linking

No ld.so!

http://ewontfix.com/18/
https://gavinhoward.com/2021/10/static-linking-considered-harmful-considered-harmful/
https://lore.kernel.org/lkml/CAHk-=whs8QZf3YnifdLv57+FhBi5_WeNTG1B-suOES=RcUSmQg@mail.gmail.com/
https://eli.thegreenplace.net/2013/07/09/library-order-in-static-linking
https://habr.com/ru/post/451208
https://lobste.rs/s/adr60v/single_binary_executable_packages
https://nullprogram.com/blog/2018/05/27/

Wayland only

https://drewdevault.com/2021/02/02/Anti-Wayland-horseshit.html

X is dying, and to keep the IX package base efficient, working on X means doing work that will one day have to be thrown away. We don’t have enough resources to do that.

Login shell

No
https://askubuntu.com/questions/866161/setting-path-variable-in-etc-environment-vs-profile

Every user session must start from the login shell, even in the ssh daemon.

Patch for dropbear to launch all processes, including non-interactive ones, with a login shell.

Cross-compilation by default

All packages are compiled as if host platform != target platform, so we achieve that the package base is built for all platforms most of the time. We have cross-compiling CI for aarch64 and riscv!

File associations

Existing mechanisms for associating programs with file types are complex, fragile, and difficult to integrate into IX realms.
https://wiki.archlinux.org/title/XDG_MIME_Applications

Therefore stal/IX has its own mechanism for associating programs with file types. It is based on the xdg-open-dispatch script, and changes in upstream to redirect their mechanisms to xdg-open, such as a patch for the Epiphany web browser.

Interaction with upstream



      
      
      
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The challenge of maintaining curl]]></title>
            <link>https://lwn.net/Articles/1034966/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217858</guid>
            <description><![CDATA[Keynote sessions at Open Source Summit events tend not to allow much time for detailed talks, a [...]]]></description>
            <content:encoded><![CDATA[

Benefits for LWN subscribers

The primary benefit from subscribing to LWN
       is helping to keep us publishing, but, beyond that, subscribers get
       immediate access to all site content and access to a number of extra
       site features.  Please sign up today!


Keynote sessions at Open Source Summit events tend not to allow much time for
detailed talks, and the 2025 Open
Source Summit Europe did not diverge from that pattern.  Even so,
Daniel Stenberg, the maintainer of the curl
project, managed to cram a lot into the 15 minutes given to him.
Like the maintainers of many other projects, Stenberg is feeling some
stress, and the problems appear to be getting worse over time.




Curl, he began, is "a small project with a big impact".  It began in
1996 with all of 100 lines of code; it has since grown to 180,000
lines that have been contributed by 1,400 authors.  In any given month,
there are 20-25 developers who are actively contributing to curl.  The
project has exactly one full-time employee — that being Stenberg himself.

The program is widely used, having been deployed in at least one-billion
devices.  Just about anything that occasionally connects to the net, he
said, uses curl to do it.  But using curl is different from supporting its
development.  As an example, he put up a slide listing the 47 car brands
that use curl in their products; he followed it with a slide listing the
brands that contribute to curl.  The second slide, needless to say, was
empty.  (A version of both slides can be seen on this page).

Companies tend to assume that somebody else is paying for the development
of open-source software, so they do not have to contribute.  He emphasized
that he has released curl under a free license, so there is no legal
problem with what these companies are doing.  But, he suggested, these
companies might want to think a bit more about the future of the software
they depend on.

Open-source software is the best choice, he said, but maintaining it is a
tough job.  Most projects out there have a single maintainer, and that
person is often doing the work in their spare time, without funding.
Maintenance involves a lot of tasks, including taking care of security,
reviewing patches, writing documentation, keeping the web site going,
administering the mailing list, and a long list of other tasks.
Occasionally, if a little time is left over, it might also be possible to
do a bit of feature development.  That is a lot for one person to
keep up with.

Companies have a certain tendency to make things worse.  He put up an
excerpt of a message from Apple support, referring a customer to the curl
project for help with their (Apple) device.  He has received demands from
companies for
information on the project's development and security practices, often with
tight deadlines for a response.  He typically replies by sending back a
support contract; that usually results in never hearing from the company
again, he said.  More recently, he has been getting demands from European
companies seeking information on the curl project's Cyber Resilience Act
compliance practices.

Some communications are rather less humorous than that; one email
came with a subject reading "I will slaughter you".  He gets emails
from people who found his address in the license notices shipped with their
automobiles asking for support.  But he also gets nice thank-you emails at
times.

Problematic email takes other forms as well.  There is an increasing crowd
of people who ask a large language model to "find a problem in curl,
make it sound terrible", then send the result, which is never correct,
to the project, thinking that they are somehow helping.  Dealing with these
useless problem reports takes an increasing amount of time.

Recently, the curl project, like many operators of web sites, has been
contending with distributed denial-of-service attacks by scrapers run by AI
companies.  He put up a link to LWN's article
on this problem for those who are unfamiliar with it.  The curl site
consumes a massive amount of bandwidth every month, but only 0.01% of that
is source downloads.  Most of the rest is bot traffic.  That, too, adds to
the difficulty of maintaining the project.

He concluded the brief talk with one last email; it was from an 11-year-old
child who had found curl useful in some project they were working on.  It
included an expression of gratitude that, Stenberg said, was truly
heartwarming.

[Thanks to the Linux Foundation, LWN's travel sponsor, for supporting our
travel to this event.]
           Index entries for this article
           ConferenceOpen Source Summit Europe/2025
            

            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The effects of algorithms on the public discourse]]></title>
            <link>https://tekhne.dev/internet-resist/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217545</guid>
            <description><![CDATA[Big Tech broke the internet, and this old man’s got a few things to say about it.]]></description>
            <content:encoded><![CDATA[
    

    
        
    

    
        

        
            
                
                    09/09/2025
                
            
        
    

    Come listen to the "old man yelling at clouds" in me for a bit.


tl;dr: The internet is changing for the worse (or getting 'enshittified'). In this post, I write about the effects of algorithms on the public discourse to illustrate a greater point on the enshittification of the internet. Then, I offer my personal notes and curated resources to guide you on your personal internet deshittification journey.

I miss the old internet, and I don't mean the slow dial-up internet. No, I miss the internet specifically before it collapsed into a single, endless feed that we access through proprietary apps (now with AI slop!). I miss how it was a network that's both human, and humane. Back when it wasn't (primarily, at least) an algorithmic black hole made to just suck us in. Maybe it's the increasing corporate ownership of the internet that took people's agency from their hands. Who knows?
I want to remember, for example (and hopefully help rebuild) the internet where actual humans discovered each other's work by following trails others cared enough to leave behind; not because an LLM or some billionaire brat's1 algorithm 'fed' it to them. We used to use our curiosity to find stuff we liked, which felt more satisfying than any algorithm's statistically-determined aggregation.
I've had this blog hosted on BearBlog for more than a month now, and thanks to the community here, I've rediscovered the indie web. What's left of it, I mean. Still, it has been an absolute joy to read human-written words on all kinds of things I'm interested in. Many of my thoughts on the internet and the digital world as a whole were shaped by those. How cool is that! If this kind of an internet is still possible, why is it such a small part of the general network? Well, money. Here are examples to what makes money on the internet:
Context CollapseI recently watched a great video from Technology Connections titled 'Algorithms Are Breaking How We Think' (YouTube Link/Invidious Link).
Technology Connections talks about something known as 'context collapse'. The idea behind the term is that by combining multiple audiences into one single context, algorithmic media platforms bring out (usually) negative reactions from unrelated audiences. This means that even though every one of the billions of internet users have entirely different lives and backgrounds, social media platforms (even the seemingly-personalised ones like TikTok) have one single context on their main tabs. That context is that the user is a number among many that must be kept positive at all costs. Consequently, the ideal user of modern media platforms has no individual identity, and is perfectly happy with what's given to them by the algorithm.
As an example, think of how many of the posts you see on Instagram are actually from people or accounts that you deliberately chose to see. On the other hand, think of how many posts are from accounts you couldn't care less about, but the algorithm thinks you should (don't forget the 1/1 ad-to-post ratio!). The same thing goes for many other platforms. Even though some, like YouTube, at least allow you to use the platform with almost full agency over what you see2, not many platforms do this. You have no choice but to use the official app with their own black-box algorithm3. This way, the user's individual identity is replaced with that of the "average internet user", which they share with billions of other 'averages'.
The effect that this has on online discourse is immense. As every internet user must know, the internet (as it is today) is full of negativity. You might look at this and say, "Humans are inherently evil," and lose all hope in humanity given how horribly they treat each other on the internet. The truth is, the way we have constructed this space deindividualizes, alienates and aggregates us to such an extent. In other words, when billions of us are thrown into one large melting pot of context, the output of that pot becomes as impure as it could possibly be. It does not reflect how we form groups, act, and react in other areas of life.
Interpretive CommunitiesLiterary theorist Stanley Fish argued that we as individuals interpret any given text (in this case, social media content) "because each of us is part of an interpretive community that gives us a particular way of reading a text."4 That interpretive community usually isn't there when we are fed what the algorithm thinks we'll consume. We may share something thinking that people like us will see it share their opinions. However, because of the way that algorithms work, engagement is the main driver of a post's visibility; so here comes 10 million people who have no clue of the context on that thought you shared about your niche interest.
Suddenly your post is full of over-the-top jokes and non-content-related quips from members of a completely random mix of audiences. As the algorithm prioritizes engagement, your post's new mixing pot of clueless audiences outnumbers the genuinely-interested audience of your own niche corner of the internet (if that even exists anymore), and they comment about everything BUT the content.
Think That's a Stretch?Okay, that was a hypothetical scenario, but here's a real community that massively benefited from all this: the incel community. Adam Aleksic’s book Algospeak: How Social Media Is Transforming the Future of Language tackles with this exact topic. He argues that algorithms contributed to the wide-spread use of pseudo-scientific incel terms by way of increased exposure. Here are two of my highlights:

"Once algorithms got involved, the incel terms were amplified by the online Matthew effect: a phenomenon where content that is slightly better at grabbing your attention performs exponentially better on social media."

Then, when these pseudo-scientific terms (think: 'alpha/beta male', 'chad', 'canthal tilt', 'looksmaxxing' etc.) are taken outside their respective interpretive communities and made hyper-visible, the mixing pot works its magic. From here, these terms make their way to the general public discourse:

"Poe’s law explains how dangerous ideas spread as memes. If something is meant genuinely, but it is also crazy enough to be interpreted as a joke, people may reward it with “likes” and other engagement because they find it funny. Meanwhile, if something ironic is interpreted as genuine, people will be offended by it, which then also drives engagement as a form of ragebait. Either way, “edgy” humor is able to worm its way into the mainstream via the algorithm."

So, if you want to get more people to know about your extreme views, package them as 'dumb jokes' for the algorithm to advertise to billions of people. At least that's what the incel community did, and succeeded. Can you even count how many times you heard or read those terms?
Okay, What Can I Do?
Now, this is the part where I stop being the old man yelling at the cloud and start proposing a new way of using the internet. In this section, I have gathered some links to things that I either use or have used in the past, some personal notes on media I consumed, and quotes by brilliant writers. I'm doing this because I want to share a little bit of what I learned during my research on the open internet, even if they are not directly related to algorithmic feeds.
Use and Support Free (Libre) Software
Use RSS reader apps. Just go to a site blog or news site you like, then copy and paste its RSS link into your app of choice (almost all websites have an RSS link). With that, you've created your own algorithm. One that is owned and controlled by you, instead of silicon valley tech-bros.
Use federated social media instead of centralized ones that impede free speech and breach your right to privacy.
For secure messaging, use Signal where possible, instead of WhatsApp or iMessage. Did you know that the US Government can access your messages if they have a warrant, regardless of your encryption settings? See: "Jan. 2021 FBI Infographic re Lawful Access to Secure Messaging Apps Data"
If you're using Android, have a look at the many apps in F-Droid: a FOSS (Free and Open Source Software) alternative to Google's Play Store.
Use GNU/Linux on your personal computer to make technology fun again, and to say "F**K YOU" to Microsoft5. If you're using a Mac, see: Asahi Linux
If you want your Android phone to have better battery life, longer security support, increased privacy and more features; consider not using Google's version of Android at all! (See: GrapheneOS(Only for Pixel devices), Others: /e/OS, LineageOS)
(Advanced) If you have an old and unused laptop or desktop PC around, re-purpose it to create your own cloud (with your own music and video streaming services, storage, photo library and more)! See: CasaOS or YunoHost


"The tech stack we use is an endorsement of the companies behind it. Technological platforms are not neutral. If we truly want to resist the digital coup that is currently under way, we need to normalize the use of free, open source solutions."
--- and ---
"We constrain our imaginations when we subordinate our creations to names owned by fascist tycoons. Imagine the author of a book telling people to "read my Amazon". A great director trying to promote their film by saying "click on my Max". That's how much they've pickled your brain when you refer to your own work and your own voice within the context of their walled garden. There is no such thing as "my Substack", there is only your writing, and a forever fight against the world of pure enshittification."
--- highlights from "This is what resistance to the digital coup looks like" by Elena Rossini

Curate Over Engage
Start a blog if you want. Share your experiences or thoughts about anything. You don't have to write something that has never been written before. Just have fun, and some people will probably benefit from, and enjoy your writing at some point.

Scavenging for information used to be optimal, but now we live in a world of information overload. Notice the algorithm's firm grip over your attention.

Prioritize discernment; focus on what information is needed and how it connects to your existing knowledge.
Set boundaries on information consumption by using attentional filters.
Block out redundant, overwhelming, or poor-quality information to avoid constant distraction.




On helping revive the human network of the internet:
"Regardless of the kind of site you have, whether its a modern site for a business or arts practice, or if its a personal homepage; setup a links page on your site and add links to your friends, people you’ve worked with, tools you’ve used, blogs you enjoy, other businesses, anything and everything that deserves to be seen; because it does deserve to be seen, and so do you!"
---highlight from "Why linking matters" by Melon's Thoughts

I'll add more to this list as time goes on, and use it as my personal rolling list of apps, services, or notes for a more open and free internet. You can bookmark it if you like the list.
But for now, thank you for visiting my corner of the internet.

This post was last edited 1 hour, 50 minutes ago.



Elon Musk, Mark Zuckerberg et al.↩
You can turn off recommendations and 'watch history' in YouTube. Either with in-app settings or, on desktop, with extensions like 'Minimal YouTube'. You can even use Invidious, even though Google absolutely hates it. Eat it, Google.↩
You technically have some options to get rid of algorithms and AI-slop on other platforms too, but they only work on Android devices and aren't stable. See: DistractionFreeApps for Instagram, and Piko for Twitter↩
Fish, Stanley (2000). "How to Recognize a Poem When You See One". Falling into Theory: Conflicting Views on Reading Literature: 267–278.↩
See: "Everything you need to know about how Microsoft aided Israel’s war on Gaza"↩




    

    
        
            
                
                    #algorithm
                
                    #apps
                
                    #en
                
                    #libresoftware
                
                    #list
                
                    #tech
                
                    #theinternet
                
            
        

        
            


        
    


  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Backprompting: Leveraging synthetic production data for health advice guardrails]]></title>
            <link>https://arxiv.org/abs/2508.18384</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217499</guid>
            <description><![CDATA[The pervasiveness of large language models (LLMs) in enterprise settings has also brought forth a significant amount of risks associated with their usage. Guardrails technologies aim to mitigate this risk by filtering LLMs' input/output text through various detectors. However, developing and maintaining robust detectors faces many challenges, one of which is the difficulty in acquiring production-quality labeled data on real LLM outputs prior to deployment. In this work, we propose backprompting, a simple yet intuitive solution to generate production-like labeled data for health advice guardrails development. Furthermore, we pair our backprompting method with a sparse human-in-the-loop clustering technique to label the generated data. Our aim is to construct a parallel corpus roughly representative of the original dataset yet resembling real LLM output. We then infuse existing datasets with our synthetic examples to produce robust training data for our detector. We test our technique in one of the most difficult and nuanced guardrails: the identification of health advice in LLM output, and demonstrate improvement versus other solutions. Our detector is able to outperform GPT-4o by up to 3.73%, despite having 400x less parameters.]]></description>
            <content:encoded><![CDATA[
    
    
                
    View PDF
    HTML (experimental)
            Abstract:The pervasiveness of large language models (LLMs) in enterprise settings has also brought forth a significant amount of risks associated with their usage. Guardrails technologies aim to mitigate this risk by filtering LLMs' input/output text through various detectors. However, developing and maintaining robust detectors faces many challenges, one of which is the difficulty in acquiring production-quality labeled data on real LLM outputs prior to deployment. In this work, we propose backprompting, a simple yet intuitive solution to generate production-like labeled data for health advice guardrails development. Furthermore, we pair our backprompting method with a sparse human-in-the-loop clustering technique to label the generated data. Our aim is to construct a parallel corpus roughly representative of the original dataset yet resembling real LLM output. We then infuse existing datasets with our synthetic examples to produce robust training data for our detector. We test our technique in one of the most difficult and nuanced guardrails: the identification of health advice in LLM output, and demonstrate improvement versus other solutions. Our detector is able to outperform GPT-4o by up to 3.73%, despite having 400x less parameters.
    

    
    
      
          Subjects:
          
            Computation and Language (cs.CL); Artificial Intelligence (cs.AI)
        
          Cite as:
          arXiv:2508.18384 [cs.CL]
        
        
           
          (or 
              arXiv:2508.18384v1 [cs.CL] for this version)
          
        
        
           
                        https://doi.org/10.48550/arXiv.2508.18384
              
                                arXiv-issued DOI via DataCite (pending registration)
            
          
        
    
  
      Submission history From: Kellen Tan Cheng [view email]          [v1]
        Mon, 25 Aug 2025 18:17:00 UTC (727 KB)
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Float Exposed]]></title>
            <link>https://float.exposed/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217415</guid>
            <description><![CDATA[Floating point format explorer – binary representations of common floating point formats.]]></description>
            <content:encoded><![CDATA[
		

			halfbfloatfloatdouble
			

			
				Value
				

			

			
				Bit Pattern
				
			

			

			

			


			
				Position within Significand–Exponent Range
				
				
					0
					252-1
					
						0
					
					
					
						1
					
					
					
						30
					
					
					
						30
					
					
					
					
					
					
				
			

			

			Evaluation in Base-2

			(−12)2×​102(2 − 2)​×​.2
			

			Evaluation in Base-10

			×​2×​.
			

			Exact Base-10 Value
			

			

			


			
				Delta to Next/Previous Representable Value
				
			

			
				Delta to Next Representable Value
				
			

			
				Delta to Previous Representable Value
				
			

			


		
		Copyright © 2025 – Bartosz Ciechanowski

		
			A
		
	]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Toddlerbot: Open-Source Humanoid Robot]]></title>
            <link>https://toddlerbot.github.io/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217372</guid>
            <description><![CDATA[ToddlerBot: Open-Source ML-Compatible Humanoid Platform for Loco-Manipulation.]]></description>
            <content:encoded><![CDATA[
  
            
            
            

            *Equal contribution,
              †Equal advising
            

            Stanford University
            

            
          
  

  
  
  
  
      
          TL;DR: ToddlerBot is a low-cost, open-source humanoid robot platform designed for
            scalable policy learning and research in robotics and AI.
        
    
  

  
  
  
  

  
      
          2.0 Release
          
              See CHANGELOG.md for
                  details. 1x Speed unless otherwise noted.
            

          New Capabilities
          
            
              
              
              
                  Cartwheel: Toddy successfully performs a highly dynamic cartwheel, showcasing its
                  agility and balance capabilities.
                
            
            
              
              
              
                  Cartwheel Failures: With naive DeepMimic and domain
                  randomization,
                  the success rate is still low. But the good news is that Toddy is extremely robust—it almost never
                  breaks. Even if it breaks, it is super easy to fix.
                
            
            
              
              
              
                  Crawling: Toddy can crawl like a toddler, using its arms and legs in a
                  coordinated manner.
                
            
          
          

          
            
              
              
              
                  Walking Faster: Toddy can walk faster in all directions (up to 0.25m/s) and rotate
                  faster in place (up to 1 rad/s).
                
            
            
              
              
              
                  VR Teleoperation: Real-time VR teleoperation with Meta quest 2.
                
            
            
              
              
              
                  Foundation Stereo Depth On-board (Jetson Orin NX 16GB) real-time (10Hz) depth
                  estimation from stereo fisheye cameras with Foundation
                    Stereo.
                
            
          
          
        

      
          Design
          
              We present ToddleBot's mechatronic design in the figure below. We highlight ToddlerBot's 30
              active DoFs with orange markers: 7 DoFs per arm, 6 DoFs per leg, a 2-DoF neck, and a 2-DoF waist. Green
              markers indicate two end-effector designs—a compliant palm and a parallel-jaw gripper. Purple markers
              denote the sensor and electronics layout with exploded views, featuring two fisheye cameras, a speaker,
              two microphones, an IMU, and a Jetson Orin NX computer.
            
          
            
            
          
        

      
        
          Results
          
              1x Speed unless otherwise noted.
            

          Capability: Arm Span, Payload, and Endurance
          
            
              
              
              
                  Arm Span Test: With a torso volume of 13x9x12 cm³, ToddlerBot
                  successfully grasps objects 14 times its torso volume (27x24x31 cm³) using its compliant palm
                  gripper.
                
            
            
              
              
              
                  Payload Test: ToddlerBot lifts 1,484 g (40% of its total weight) while
                  maintaining balance. To determine the limit, screws are incrementally added to a 3D-printed gripping
                  cup until it falls.
                
            
            
              
              
              
                  Endurance Test: Running a walking RL policy, ToddlerBot lasts 19 minutes before
                  overheating affects stability. It withstands up to 7 falls before breaking, but repairs take only 21
                  minutes of 3D printing and 14 minutes of assembly for full restoration.
                
            
          
          

          Capability: Conversation, Push-ups, and Pull-ups
          
            
              
              
              
                  Conversation and Push-ups: This is achieved by integrating OpenAI's Realtime API
                  with GPT-4o for speech-to-text and text-to-speech. Push-ups are zero-shot sim-to-real transfer of
                  open-loop keyframe animation.
                
            
            
              
              
              
                  Pull-ups: We use an AprilTag to help ToddlerBot accurately locate the horizontal
                  bar. The rest is a zero-shot sim-to-real transfer of open-loop keyframe animation.
                
            
          
          

          ML-Compatibility: Locomotion and Manipulation
          
            
              
              
              
                  Omnidirectional Walking: ToddlerBot achieves omnidirectional walking with RL and
                  zero-shot sim-to-real.
                
            
            
              
              
              
                  Bimanual Manipulation: This is an RGB-based diffusion policy trained with 60
                  demonstrations.
                
            
          
          
            
              
              
              
                  Full-body Manipulation: This is also an RGB-based diffusion policy trained with 60
                  demonstrations.
                
            
            
              
              
              
                  Skill Chaining: ToddlerBot first executes a diffusion policy to grasp the handle,
                  while maintaining that pose, switched to the RL policy to push the wagon forward.
                
            
          

          Reproducibility: Hardware and Policies
          
            
              
              
              
                  Manipulation Policy Zero-Shot Transfer: We successfully transfer manipulation
                  policy trained with data collected on Toddlerbot instance to another.
                
            
            
              
              
              
                  Two-Instance Collaboration Task: To demonstrate their equivalent performance of two
                  Toddlerbot Instances, both robots collaborate on a long-horizon room tidying task.
                
            
            
              
              
              
                  Easy-to-Build Test: We show that ToddlerBot is easy to build with fully
                  open-source assembly manuals and videos.
                
            
          
        
        
      
    

  

  
      BibTeX
      @article{shi2025toddlerbot,
  title={ToddlerBot: Open-Source ML-Compatible Humanoid Platform for Loco-Manipulation},
  author={Shi, Haochen and Wang, Weizhuo and Song, Shuran and Liu, C. Karen},
  journal={arXiv preprint arXiv:2502.00893},
  year={2025}
}
    

  
      Acknowledgement
      The authors would like to express their gratitude to Kaizhe Hu for assembling the second instance of ToddlerBot
        and assisting with keyframe animation and demo recording. We also extend our thanks to Huy Ha, Yen-Jen Wang, Pei
        Xu, and Yifan Hou for their insightful discussions on locomotion, and to Sirui Chen, Chen Wang, and Yunfan Jiang
        for valuable input on manipulation policy deployment.
        We are grateful to Albert Wu for his guidance on mathematical formulation and notation. Additionally, we thank
        João Pedro Araújo for his assistance with the motion capture system.
        Finally, we appreciate the helpful discussions from all members of TML and REALab. This work was supported by
        National Science Foundation NSF-FRR-2153854, NSF-2143601, NSF-2037101, Sloan Fellowship, Stanford Institute for
        Human-Centered Artificial Intelligence, and Stanford Wu Tsai Human Performance Alliance.
    

  



]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why our website looks like an operating system]]></title>
            <link>https://posthog.com/blog/why-os</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217269</guid>
            <description><![CDATA[I have a problem with many large, technical websites. Often times, I’ll want to refer to different pages at the same time. So I’ll  CMD  + click “a…]]></description>
            <content:encoded><![CDATA[I have a problem with many large, technical websites.Often times, I’ll want to refer to different pages at the same time. So I’ll CMD + click “a couple times” while browsing around and before I know it, I have 12 new tabs open – all indistinguishable from each other because they share the same favicon.PostHog.com has the same problem – especially as the site has grown from supporting a handful of paid products to over a dozen.As I looked for ways to solve this explosion of pages, I started to question many of the typical patterns that marketing & docs websites have today.Long-form scrolling. Oversized footers. Absurd whitespace.These website encourage scrolling, but just to get people to the bottom of the page? And then what?Why are we doing this? What if we just made better ways to consume content?That’s the idea behind the new PostHog.com. You can multitask, open a few articles simultaneously, and move them around as you please. If anything there's a whitespace deficiency, and your fingers will be jealous you're not scrolling with them as much (because you're so engaged with our content).It has window snapping, keyboard shortcuts, and a bookmark app. It works as well as you’d expect an operating system to work in a browser.You can be reading the latest newsletter from Product for Engineers while watching a demo video in the corner and also playing Hedgehog Mode, the game.I’ll be the first to admit it – an OS interface for a “website” is initially a jarring experience. I felt this as I built it. The human brain expects certain patterns within the confines of a browser viewport, and when it doesn’t get that assurance, it revolts.But the more I used the new site, the more I started to like it. And the experience was the same for colleagues. And now I can’t imagine using anything else.I had a lot of fun in building it with Eli Kinsey. Throughout the site you’ll find:A Windows File Explorer clone that also acts as the UI for our merch storeProduct pages that resemble PowerPoint presentationsA document editor where you can actually edit contentForums designed to look like you’re reading newsgroups in Outlook ExpressA QuickTime cloneA lot of pages you’d expect to be well-designed that are… just formatted as spreadsheetsA screensaver and a library of desktop backgroundsA plethora of keyboard shortcutsIt was also an interesting learning curve for me in figuring out how to organize five years worth of content while making it scalable for the future. Some of the technical highlights:Separation of visual layer from contentAll product pages are now powered from JSON files (example). This means that JSON dictates page layouts, content presentation, feature-level competitor comparison charts, and more. It also contains an array of screenshots used in various places (both in light and dark mode, of course).Eventually this will move to a repository that’s shared with the PostHog app, so all the information is powered from the same source.Skinning a site with themes and color schemesHow do you maintain light and dark mode, along with themes across a handful of accent variations (primary, secondary, tertiary) in a way that all play well together? (I found this out, and I’ll write about it sometime!)A reference customer databaseI’ve created a single customer record in code that contains: a) which products they use, b) quotes from specific people about individual products c) SVG logos that work in light and dark modeThis means that any quote can be presented on any page for any product without having to be hard-coded. It pulls in their name and photo, quote, and company logo, and can be filtered in reference to a specific product.For a lot of this site, I was designing it while I was building UIs in Typescript and Tailwind. (The entire site is just a Git branch off our current site – it's all technically the same codebase. I just merged along the way over the last few months.)Prototyping in a production-level environment was a great way to ideate and develop features along the way – stuff I never would have built if I were just going off of mockups. I did find myself popping open Balsamiq while I was building – but just long enough to flesh out some ideas.So how will this pan out? Well, we’re about to find out. This feels like an early MVP – there’s a ton of stuff to improve upon from here.But in the meantime, I hope you enjoy the new PostHog.com. Be curious, click around, and have some fun. I hope you enjoy your time here as much as we enjoyed building it.If you're curious, read more about how the site technically works.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fartscroll-Lid: An app that plays fart sounds when opening or closing a MacBook]]></title>
            <link>https://github.com/iannuttall/fartscroll-lid</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45216844</guid>
            <description><![CDATA[A hilarious macOS app that plays fart sounds as you open and close your MacBook lid - iannuttall/fartscroll-lid]]></description>
            <content:encoded><![CDATA[FartScrollLid 💨
A hilarious macOS app that plays fart sounds as you open and close your MacBook lid - inspired by the classic "fart scroll" browser extension!
Features

🎵 Dynamic Fart Sounds - Pitch changes based on lid angle (deep bass when closed, high squeaks when open)
🎯 Motion-Activated - Only farts when you're actively moving the lid
📊 Real-Time Monitoring - Shows lid angle, velocity, and fart parameters
😄 Funny Status Messages - "Maximum pressure!", "Gas escaping!", and more

How It Works
FartScrollLid uses the MacBook's internal lid angle sensor (discovered through reverse engineering) to detect the angle between your laptop lid and base. When you move the lid, it triggers fart sounds with:

Pitch modulation based on lid angle (0-130 degrees)
Volume control based on movement speed
Instant response - farts stop immediately when you stop moving

Requirements

macOS 11.5 or later
MacBook with lid angle sensor (most modern MacBooks)
A sense of humor

Installation
Option 1: Build from Source

Clone this repository:

git clone https://github.com/iannuttall/fartscroll-lid.git
cd fartscroll-lid

Open in Xcode:

open FartScrollLid.xcodeproj

Build and run (Cmd+R)

Option 2: Download Release
Download the latest .app from the Releases page.
Usage

Launch FartScrollLid
Click "Start Farting"
Move your MacBook lid up and down
Enjoy the symphony of farts!
Stop moving to silence the farts
Click "Stop Farting" when you've had enough fun

Technical Details
Lid Angle Sensor

Device: Apple HID device (VID=0x05AC, PID=0x8104)
HID Usage: Sensor page (0x0020), Orientation usage (0x008A)
Data format: 16-bit angle value in centidegrees (0.01° resolution)
Range: 0-360 degrees

Audio Engine

Uses AVFoundation for real-time audio playback
Varispeed unit for pitch modulation (0.5x to 2.0x)
Smooth parameter ramping to avoid audio artifacts
Movement threshold: 2 deg/s minimum to trigger farts

Project Structure
FartScrollLid/
├── FartScrollLid.xcodeproj/    # Xcode project
├── FartScrollLid/              # Source code
│   ├── AppDelegate.m/h         # Main app controller
│   ├── FartScrollLid.m/h       # Lid angle sensor interface
│   ├── FartAudioEngine.m/h     # Fart sound engine
│   ├── NSLabel.m/h             # Custom label class
│   └── FART.wav                # Fart sound file
└── README.md                   # This file

Credits

Based on the original LidAngleSensor app by Sam Henri Gold
Fart sound from fart.js
Inspired by the original fart scroll browser extension by The Onion
Built with assistance from Factory Droid

License
MIT License - see LICENSE file for details
Contributing
Pull requests are welcome! For major changes, please open an issue first to discuss what you would like to change.
Ideas for improvements:

Additional fart sound variations
Customizable pitch/volume curves
Fart statistics tracking
Network multiplayer farting
Apple Watch companion app

Disclaimer
This app is for entertainment purposes only. Please use responsibly in appropriate settings. Not recommended for:

Business meetings
Libraries
First dates
Job interviews
Funerals

But highly recommended for:

Pranking friends
Amusing children
Breaking awkward silences
General tomfoolery

Author
Created by Ian Nuttall with Factory Droid

Remember: Life is too short not to laugh at fart sounds from your laptop 💨😄
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Danish supermarket chain is setting up "Emergency Stores"]]></title>
            <link>https://swiss.social/@swaldorff/115186445638788782</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45216805</guid>
        </item>
        <item>
            <title><![CDATA[How Palantir is mapping the nation’s data]]></title>
            <link>https://theconversation.com/when-the-government-can-see-everything-how-one-company-palantir-is-mapping-the-nations-data-263178</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45215984</guid>
            <description><![CDATA[Government agencies are contracting with Palantir to correlate disparate pieces of data, promising efficiency but raising civil liberties concerns.]]></description>
            <content:encoded><![CDATA[
    When the U.S. government signs contracts with private technology companies, the fine print rarely reaches the public. Palantir Technologies, however, has attracted more and more attention over the past decade because of the size and scope of its contracts with the government. 

Palantir’s two main platforms are Foundry and Gotham. Each does different things. Foundry is used by corporations in the private sector to help with global operations. Gotham is marketed as an “operating system for global decision making” and is primarily used by governments.

I am a researcher who studies the intersection of data governance, digital technologies and the U.S. federal government. I’m observing how the government is increasingly pulling together data from various sources, and the political and social consequences of combining those data sources. Palantir’s work with the federal government using the Gotham platform is amplifying this process.

Gotham is an investigative platform built for police, national security agencies, public health departments and other state clients. Its purpose is deceptively simple: take whatever data an agency already has, break it down into its smallest components and then connect the dots. Gotham is not simply a database. It takes fragmented data, scattered across various agencies and stored in different formats, and transforms it into a unified, searchable web.

The stakes are high with Palantir’s Gotham platform. The software enables law enforcement and government analysts to connect vast, disparate datasets, build intelligence profiles and search for individuals based on characteristics as granular as a tattoo or an immigration status. It transforms historically static records – think department of motor vehicles files, police reports and subpoenaed social media data like location history and private messages – into a fluid web of intelligence and surveillance.

These departments and agencies use Palantir’s platform to assemble detailed profiles of individuals, mapping their social networks, tracking their movements, identifying their physical characteristics and reviewing their criminal history. This can involve mapping a suspected gang member’s network using arrest logs and license plate reader data, or flagging individuals in a specific region with a particular immigration status.

The efficiency the platform enables is undeniable. For investigators, what once required weeks of cross-checking siloed systems can now be done in hours or less. But by scaling up the government’s investigative capacity, Gotham also alters the relationship between the state and the people it governs.


            
            
              The U.S. Department of Homeland Security uses Palantir’s technology to support its investigations.
              AP Photo/Jose Luis Magana
            
          

Shifting the balance of power

The political ramifications of Palantir’s rise come into focus when you consider its influence and reach across the government. U.S. Immigration and Customs Enforcement alone has spent more than US$200 million on Palantir contracts, relying on the software to run its Investigative Case Management system and to integrate travel histories, visa records, biometric data and social media data. 

The Department of Defense has awarded Palantir billion-dollar contracts to support battlefield intelligence and AI-driven analysis. Even domestic agencies like the Centers for Disease Control and Prevention and the Internal Revenue Service, and local police departments like the New York Police Department, have contracted with Palantir for data integration projects.

These integrations mean that Palantir is not just a vendor of software; it is becoming a partner in how the federal government organizes and acts on information. That creates a kind of dependency. The same private company helps define how investigations are conducted, how targets are prioritized, how algorithms work and how decisions are justified.

Because Gotham is proprietary, the public, and even elected officials, cannot see how its algorithms weigh certain data points or why they highlight certain connections. Yet, the conclusions it generates can have life-altering consequences: inclusion on a deportation list or identification as a security risk. The opacity makes democratic oversight difficult, and the system’s broad scope and wide deployment means that mistakes or biases can scale up rapidly to affect many people.

Beyond law enforcement

Supporters of Palantir’s work argue that it modernizes outdated government IT systems, bringing them closer to the kind of integrated analytics that are routine in the private sector. However, the political and social stakes are different in public governance. Centralized, attribute-based searching, whether by location, immigration status, tattoos or affiliations, creates the capacity for mass profiling.

In the wrong hands, or even in well-intentioned hands under shifting political conditions, this kind of system could normalize surveillance of entire communities. And the criteria that trigger scrutiny today could be expanded tomorrow.

U.S. history provides warning examples: The mass surveillance of Muslim communities after 9/11, the targeting of civil rights activists in the 1960s and the monitoring of anti-war protesters during the Vietnam era are just a few. 

Gotham’s capabilities may enable government agencies to carry out similar operations on a much larger scale and at a faster pace. And once some form of data integration infrastructure exists, its uses tend to expand, often into areas far from its original mandate. 

A broader shift in governance

The deeper story here isn’t just that the government is collecting more data. It’s that the structure of governance is changing into a model where decision-making is increasingly influenced by what integrated data platforms reveal. In a pre-Gotham era, putting someone under suspicion of wrongdoing might have required specific evidence linked to an event or witness account. In a Gotham-enabled system, suspicion can stem from patterns in the data – patterns whose importance is defined by proprietary algorithms. 

This level of data integration means that government officials can use potential future risks to justify present action. The predictive turn in governance aligns with a broader shift toward what some scholars call “preemptive security.” It is a logic that can erode traditional legal safeguards that require proof before punishment.


            
            This short documentary about Palantir includes a former employee expressing concern about how algorithms are transforming government.
          

The stakes for democracy

The partnership between Palantir and the federal government raises fundamental questions about accountability in a data-driven state. Who decides how these tools are used? Who can challenge a decision that was made by software, especially if that software is proprietary? 

Without clear rules and independent oversight, there is a risk that Palantir’s technology becomes normalized as a default mode of governance. They could be used not only to track suspected criminals or terrorists but also to manage migration flows, monitor and suppress protests, and enforce public health measures. The concern is not that these data integration capabilities exist, but that government agencies could use them in ways that undermine civil liberties without public consent.

Once put in use, such systems are hard to dismantle. They create new expectations for speed and efficiency in law enforcement, making it politically costly to revert to slower, more manual processes. That inertia can lock in not only the technology but also the expanded scope of surveillance it enables.

Choosing the future

As Palantir deepens its government partnerships, the issues its technology raises go beyond questions of cost or efficiency. There are civil liberties implications and the potential for abuse. Will strong legal safeguards and transparent oversight constrain these tools for integrated data analysis? The answer is likely to depend on political will as much as technical design.

Ultimately, Palantir’s Gotham is more than just software. It represents how modern governance might function: through data, connections, continuous monitoring and control. The decisions made about its use today are likely to shape the balance between security and freedom for decades to come.
  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Nano Banana image examples]]></title>
            <link>https://github.com/PicoTrex/Awesome-Nano-Banana-images/blob/main/README_en.md</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45215869</guid>
            <description><![CDATA[A curated collection of fun and creative examples generated with Nano Banana🍌, Gemini-2.5-flash-image based model. This repository showcases diverse AI-generated visuals and prompts, highlighting t...]]></description>
            <content:encoded><![CDATA[
          
            
                
      

      
        
            

                  
                      
  
      
      
        
          GitHub Copilot

        

        Write better code with AI
      

    


                      
  
      
      
        
          GitHub Spark

            
              New
            
        

        Build and deploy intelligent apps
      

    


                      
  
      
      
        
          GitHub Models

            
              New
            
        

        Manage and compare prompts
      

    


                      
  
      
      
        
          GitHub Advanced Security

        

        Find and fix vulnerabilities
      

    


                      
  
      
      
        
          Actions

        

        Automate any workflow
      

    


                  
                
            

                  
                      
  
      
      
        
          Codespaces

        

        Instant dev environments
      

    


                      
  
      
      
        
          Issues

        

        Plan and track work
      

    


                      
  
      
      
        
          Code Review

        

        Manage code changes
      

    


                      
  
      
      
        
          Discussions

        

        Collaborate outside of code
      

    


                      
  
      
      
        
          Code Search

        

        Find more, search less
      

    


                  
                
            
        

          
            
              View all features
              
          
      



                
      

      



                
      

      

                      Explore
                      
  
      Learning Pathways

    


                      
  
      Events & Webinars

    


                      
  
      Ebooks & Whitepapers

    


                      
  
      Customer Stories

    


                      
  
      Partners

    


                      
  
      Executive Insights

    


                  
                



                
      

      
                

                  
                      
  
      
      
        
          GitHub Sponsors

        

        Fund open source developers
      

    


                  
                
                

                  
                      
  
      
      
        
          The ReadME Project

        

        GitHub community articles
      

    


                  
                
                
            



                
      

      

                  
                      
  
      
      
        
          Enterprise platform

        

        AI-powered developer platform
      

    


                  
                



                
    Pricing


            
          

        
                



  
  
  
    

  
    
    
      
        Provide feedback
      
        
    
    
  
      
        
      
      


    
    

  
    
    
      
        Saved searches
      
        Use saved searches to filter your results more quickly
    
    
  
      
        
      
      

    
  



            

              
                Sign up
              
    
      Appearance settings

      
    
  

          
      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rails on SQLite: new ways to cause outages]]></title>
            <link>https://andre.arko.net/2025/09/11/rails-on-sqlite-exciting-new-ways-to-cause-outages/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214933</guid>
            <description><![CDATA[This post was originally given as a talk for Friendly.rb. The slides are also available.
Between Litestack and the Rails 8 trifecta of Solid Cable, Solid Cache, and Solid Queue, it’s easier than ever to spin up a Rails app that doesn’t need a database service, or a redis service, or a file storage service. It’s great to simplify things, but even after 20 years of deploying Rails apps I was still caught out by some of the ways things are different.]]></description>
            <content:encoded><![CDATA[11 Sep 2025This post was originally given as a talk for Friendly.rb. The slides are also available.Between Litestack and the Rails 8 trifecta of Solid Cable, Solid Cache, and Solid Queue, it’s easier than ever to spin up a Rails app that doesn’t need a database service, or a redis service, or a file storage service. It’s great to simplify things, but even after 20 years of deploying Rails apps I was still caught out by some of the ways things are different.Based on what happened when I built a new side project in Rails on SQLite, we’ll cover what’s different, what’s new, and several ways that you can knock your site offline or even destroy your entire production database. As we go, we’ll also talk about the advantages of using SQLite, and how those differences can help you.So who am I, how did I learn these things, and why should you listen to me? I’m André Arko, better known on the internet as @indirect. A long time ago, I helped create Bundler, and I’ve been the OSS team lead for RubyGems and Bundler for more than a decade at this point.I work at Spinel Cooperative, a collective of Ruby open source maintainers building rv, the Ruby language manager that can install Ruby in one second flat. We offer retainers for unlimited access to core team experts from Bundler, Rails, Hotwire, and more, who can answer your questions and solve your problems.I’ve been deploying Rails applications to production since 2004, and most relevantly for this particular talk, I built a service called feedyour.email. Feed Your Email turns email subscriptions into RSS feeds that you can subscribe to in your feed reader. There is no signup, there are no accounts, you just go to the website and push a button to get an email address and a feed URL. Emails sent to that address will show up in that feed.Feed Your Email is only possible as a service because of SQLite—if I had to maintain three Postgres instances and a couple of web instances and a couple of worker instances, I would have felt like it was too much hassle and cost too much money, and given up. SQLite reduced the complexity of building and deploying this service to the point where I was able to do it casually, for fun, and keep it running for everyone while feeling like it was worth it just for my own personal use.This app serves about a million requests per month. That number sounds kind of big, but let’s do the math: 24 requests per minute, or one every 2.6 seconds. We can definitely serve at least one request every 2.6 seconds off of our Rails app, even on a small digital ocean droplet or a small cloud VM. I run my service on Fly.io, and hosting costs about USD$14 per month.It has bonus features like a web view so you can share individual emails as a link without giving away your secret email address or letting anyone see the other emails in that feed, and it also has full-text search if you’re trying to find a particular email. That full-text search is a feature of SQLite, which brings us back to the topic of this talk. How did SQLite help? Let’s take a look.The biggest fundamental difference, where almost every other difference comes from, is that SQLite is built in to your web server process. The reason for the “lite” in the name is that it doesn’t run a separate process, it doesn’t listen on a port or a socket, and you can’t connect to it. All the data is just in a single file, and your web process reads and writes that file when needed. This is awesome: you can’t have database connection errors anymore.There’s a small issue with giving the web process its own database in a local file, though. If you deploy your app as usual, your production database can disappear at any time! Heroku destroys dynos every 24 hours, including all files. Fly.io loses the files in a container anytime they restart. In a world of containers, it’s incredibly easy to miss that your new SQLite database is on an ephemeral filesystem and will disappear along with the Puma process in your web container.That leads us to the first and most important rule of using SQLite: put your database files in persistent storage. On AWS that means EBS, on Fly.io that means Volumes, but wherever you’re hosting, make sure that you can keep your database files across restarts (and ideally have automatic snapshots).Now that your database won’t disappear at any moment, let’s talk about what it means to put all the data in a single file. You probably use Rails.cache to store temporary data—that’s in a single SQLite file now, too. You also probably use ActiveJob to send emails or do slower work in the background. All of those jobs are also in a single SQLite file now. By default, it’s the same file!Putting everything in the same SQLite file makes everything very easy. You just need to keep track of that one file, and you’ll know that your model data, your caches, and your jobs will all be safe.SQLite being in-process raises a new problem, though… what if your background job needs to update a model? You might be used to deploying your background workers in a separate container, so you can scale them as needed. That’s not going to fly anymore, because your background workers need to be able to read and write that same single file that your web server is reading and writing.Since your database is now in just one file, you have two options. You can run your workers in a second process inside the same VM or container as the web process, or you can run your workers in threads inside the web process.If this is a smallish application, doing a million requests per month or less, you’ll be absolutely fine putting your background jobs in threads. As a bonus, putting background jobs in threads can almost halve the amount of RAM you need because a single Rails process is handling both web and job requests.If you really want to scale up your application, though, you’ll need to do what gets called “vertical” scaling rather than the traditional “horizontal” scaling. You can’t add more VMs, because other VMs won’t be able to see your database file. Instead, you need bigger and bigger single servers, with more and more CPU cores and RAM. That’s definitely possible, though. There are servers nowadays with 128 cores, or even more, and terabytes of RAM. Unfortunately, once you have scaled your wildly popular application vertically to the moon, you’ll discover the biggest limitation of SQLite: it’s just one file on disk.If you have dozens processes and hundreds of threads in web servers and background job workers, all trying to write into this one database file at the same time, there’s probably going to be a lot of contention. By default, SQLite uses the filesystem to take out a lock on the entire database for each transaction. Holding the lock, it executes any read and write queries, commits, and then releases the lock. Then the next process can take the filesystem lock and do the same thing.This can create quite the queue if even read-only queries have to wait in line and happen one at a time (because if they didn’t have the lock, some writer might sneak in and change the data mid-read!). To (partially) address this problem, SQLite offers a middle ground in the form of a Write-Ahead Log. The WAL log is an append-only file where any database writes can be written, one at a time. Then, a SQLite-controlled process copies those write instructions into the actual database file between reads. In the meantime, there can be as many readers as you want, because writes don’t have to block reads, and many reads from the same file at once are quite safe.This solves the problem with only allowing one single read or write at a time, but it definitely has a cost. The database isn’t just one file anymore, it’s now a series of files, and you need to back them up and restore them together if you want to make sure you haven’t lost any data. Hopefully that’s not too much trouble, but it is definitely something to be aware of while planning your backup and disaster recovery strategy.There’s one other approach worth calling out at this point, and that strategy is deliberately using multiple SQLite database files. If you are putting your not just your model data, but also your Rails cache, and also your background jobs, and maybe also your uploaded files all together into a single SQLite database file, your different use-cases can start to step on one another’s toes. For example, if you go to queue a few thousand jobs, any writes from your web requests will end up in the writer queue behind that pile of jobs in line to be written.Creating a separate SQLite file per system, or per access pattern, can help a lot with this. In Rails, the most common splits are separate SQLite databases for ActiveRecord, for the Rails cache, for background jobs, and for ActionCable. Depending on your application, it might also make sense to put your ActiveStorage blobs into a SQLite database or into the same filesystem that you are already backing up, as well. There’s a lot of complexity and overhead involved in setting up S3 buckets with the correct permissions and getting files into and out of them, and you might just want to skip all of that in your new, simplified Rails config.Taking this approach to an extreme might even involve sharding your model data across many database files. The most extreme example of this that I’ve heard of was an application that chose to shard their model data across one SQLite database file per customer. That meant every new signup created a new SQLite database file on disk, which is in some ways absurd, but it also meant that every individual user had the full power and speed of SQLite available to them. It’s hard to have read or write contention when every user gets their own separate database!So now that we’ve covered vertically scaling the Rails server itself, let’s talk about the other implications of your application running on exactly one server. The downside to there being just one server is that if that server goes down, your entire app is down. No degraded service, no slower than usual application, just… no application at all.If you’re running in a container, it’s impossible to deploy without downtime because only one container can ever have the volume with the database mounted. The old container has to stop before the new container can start. If you’re running in a VM, you might be able to deploy without downtime by running a local reverse proxy and more than one web server process, and restarting those web server processes one at a time rather than all at once. Welcome to how we used to do things in the 2000s, and my apologies.That said, some of the implications of only one server are good: if there’s only one, it’s pretty easy to run status checks, and it’s pretty easy to troubleshoot. You don’t need to debug connections between load balancers and dozens of web servers and database servers and redis servers and file storage servers, you just need to debug the one server. That can definitely make your job easier!Another implication of having just one single server: there is only one place for network requests to go. As I alluded to a moment ago, the only kind of load balancing that you can do is by running a local proxy and adding multiple separate processes as backends. The server itself is only going to have one IP address and one port where it can be reached, and there’s a certain amount of scale where that one IP and one port is going to become limiting. The good news is that you probably won’t hit that scale, and if you do, you’ll probably want to stop using SQLite anyway.If you ever want to try switching towards or away from SQLite, the sequel gem has the amazing ability to read from one database and write into another, doing a full database copy while respecting all the quirks and limitations of each database. If you want to move from Mysql or Postgres over to SQLite, or if you ever want to load a SQLite database into Mysql or Postgres, I highly recommend it. The duckdb command line tool also has excellent cross-database capabilities, and is the next thing I would try if sequel wasn’t working for me for some reason.There’s one more limitation that we need to consider that falls out of there only being one server: your app can only run in one geographic location. Some applications can benefit from adding additional web processes (or even database read replicas) spread out closer to end users, and that’s not possible if you are limited to a maximum of one server total for your entire application.That said, there’s nothing stopping you from using the more usual kind of CDN-based global distribution. If your application has a decent amount of static or cacheable content, you can at least still set the cache-control headers and run the app behind Fastly or Cloudlfare.Before we wrap up, I want to make sure to cover the various backup and replication options available to you while using SQLite for your application. The absolute all-star of SQLite backup and replication is called Litestream. It’s available as a gem, and can be used as easily as setting a few environment variables and using the litestream command provided by the gem to wrap your puma or other web server.What litestream does is fairly simple: it forwards a copy of each entry added to the write-ahead log over to any S3-compatible file store — you might even say that it streams your data in a light way. If you ever have a catastrophe, and your database file gets deleted or corrupted, the bucket will have a full copy of the WAL that you can replay to restore your database back to where it was when the server stopped working.On AWS, this still means setting up an S3 bucket and setting the right env vars, but at least you don’t need to deal with the bucket having public access, or setting up signed uploads, or any of the other things that make S3 a huge pain. You just need a private bucket and read/write credentials, and you’re good to go. If you’re using fly.io, you don’t even have to set the env vars yourself! They are set automatically by the command that creates the S3-compatible bucket on Tigris.There’s one last thing that you can try using if you’re feeling especially adventurous, LiteFS. LiteFS is a fascinating software achievement, offering full Mysql or Postgres-style replication for multiple SQLite databases running in many locations. The completely deranged trick that they use to do this is creating an entire software filesystem using FUSE, and then putting the SQLite database inside that filesystem. This gives them access to every filesystem read and write call made by your application, and allows them to create their own operations that are then sent to every other member of the cluster to be applied.This kind of setup comes with a lot of caveats. The biggest one is the usual distributed systems kind of caveat. You’ll have stale reads where some users will see old data, and if the primary crashes you might lose some data. If you’re okay with the tradeoffs of a distributed system (and you’re okay with the idea of all of your database reads and writes going through a FUSE filesystem that might be adding extra bugs), LiteFS offers a version of the ultimate web application dream.In the dream SQLite plus LiteFS world, you have all the advantages of SQLite and all the advantages of a fully replicated multi-writer database setup. Any individual server can go down without causing any downtime for the application as a whole, and every user has a full copy of the application and all its data, running extremely close to them.I haven’t built that perfect system yet, but it feels more attainable than it ever has before thanks to SQLite.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Claude's memory architecture is the opposite of ChatGPT's]]></title>
            <link>https://www.shloked.com/writing/claude-memory</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214908</guid>
            <description><![CDATA[A breakdown of Claude's memory implementation, how it differs from ChatGPT, and what these opposite approaches reveal about each company's philosophy.]]></description>
            <content:encoded><![CDATA[Earlier this week, I dissected ChatGPT's memory system. Since then, I've been doing the same for Claude and realized something remarkable: these two leading AI assistants have built completely opposite memory systems.
In this post, I'll start by breaking down exactly how Claude's memory works—what it stores and how it retrieves information. Then we'll get to the interesting stuff. Why these architectures diverge so dramatically, what that tells us about who uses each assistant and the philosophies driving each product's development, and just how vast the AI memory design space really is.
How it works
Claude's memory system has two fundamental characteristics. First, it starts every conversation with a blank slate, without any preloaded user profiles or conversation history. Memory only activates when you explicitly invoke it. Second, Claude recalls by only referring to your raw conversation history. There are no AI-generated summaries or compressed profiles—just real-time searches through your actual past chats.
When Claude detects memory invocation through phrases like "what did we discuss about," "continue where we left off," or "remember when we talked about," it deploys two retrieval tools that work like web search or code execution—you see them activate in real-time and wait while Claude searches through your history. Once the search completes, Claude synthesizes the retrieved conversations to answer your question or continue the discussion.
Conversation Search
The conversation_search tool helps with keyword and topic-based searches across your entire conversation history. When I asked "Hey, can you recall our past conversations about Chandni Chowk?" (a historic neighborhood in Delhi), Claude found 9 relevant conversations—from when I explored its founding by Princess Jahanara Begum in 1650 to my queries about the best galouti kebabs at Karim's and stuffed parathas at Paranthe Wali Gali. Claude synthesized these scattered discussions into a coherent summary of my Chandni Chowk explorations.

When you ask about multiple topics, Claude runs separate searches sequentially. In my past job as a crypto researcher, I used Claude extensively as an editor. When I asked "Tell me all the conversations we've had about either Michelangelo or Chainflip or Solana," Claude ran three separate searches—one for my Michelangelo analogies for neural networks, another for Chainflip's cross-chain protocol work, and a third for Solana's technical architecture. It found 22 conversations across these searches and delivered a unified response with direct links to each chat.


Temporal Chat Retrieval
The recent_chats tool provides time-based access to your conversation history. When I asked "Can you tell me what we spoke about in the last 10 conversations?" Claude retrieved my most recent chats chronologically and gave me a summary of my recent usage.

The tool also handles specific timeframes. When I asked "What did we discuss in the last week of November 2024?" Claude retrieved 16 conversations from that exact period.


ChatGPT vs Claude
A year ago, ChatGPT and Claude's assistant apps matched each other feature for feature—multiple models, file attachments, projects. Since then, their paths have diverged dramatically. ChatGPT has evolved into a mass-market consumer product, while Claude has deliberately chosen a different trajectory. Anthropic CPO Mike Krieger has acknowledged that OpenAI had "caught lightning in a bottle" with consumer adoption. Instead of chasing that market, Anthropic is focusing on what Claude does best: developer tools, coding, and professional workflows.
Memory implementation perfectly reflects this divergence.
ChatGPT's hundreds of millions of weekly active users come from all backgrounds—students, parents, hobbyists—who just want a product that works and remembers them without thinking about the mechanics. Every memory component loads automatically, creating instant personalization with zero wait time. The system builds detailed user profiles, learning preferences and patterns that could eventually power targeted features or monetization. It's the classic consumer tech playbook: make it magical, make it sticky, figure out different ways to monetize later.
Claude's users represent a different demographic entirely. Anthropic's more technical users inherently understand how LLMs work. They're comfortable with explicit control at every level. Just as they choose when to trigger web search or enable extended thinking, they decide when memory is worth invoking. They understand that memory calls add latency, but they make that tradeoff deliberately. Memory becomes just another tool in their arsenal, not an always-on feature. This audience doesn't need or want extensive profiling—they need a powerful, predictable tool for professional work. Not to mention, they're also more privacy-conscious.
The Memory Design Space
It still amazes me that ChatGPT and Claude—the two top AI assistants—have built completely opposite memory systems. This only goes to show that memory in AI has a massive design space with no right answer or one-size-fits-all technique. You have to work backwards from who your users are and what they need, then build from first principles accordingly.
We're in uncharted territory. These tools are less than three years old, and nobody knows what happens when someone uses the same AI assistant for a decade. How much should it remember? How should it handle years of accumulated context? Meanwhile, we're seeing a Cambrian explosion of AI apps, each experimenting with their own memory approach, while the underlying models get more powerful every week. There's no playbook, no settled best practices—just everyone trying different things and seeing what sticks.
The more I dive into memory, the more fascinated I get. Over the coming weeks, I'll be dissecting different architectures, analyzing new approaches, and following the latest research. Subscribe below if you want updates as this space unfolds.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Making io_uring pervasive in QEMU [pdf]]]></title>
            <link>https://vmsplice.net/~stefan/stefanha-kvm-forum-2025.pdf</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214672</guid>
        </item>
        <item>
            <title><![CDATA[Top model scores may be skewed by Git history leaks in SWE-bench]]></title>
            <link>https://github.com/SWE-bench/SWE-bench/issues/465</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214670</guid>
            <description><![CDATA[We've identified multiple loopholes with SWE Bench Verified where agents may look at future repository state (by querying it directly or through a variety of methods), and cases in which future rep...]]></description>
            <content:encoded><![CDATA[We've identified multiple loopholes with SWE Bench Verified where agents may look at future repository state (by querying it directly or through a variety of methods), and cases in which future repository state includes either solutions or detailed approaches to solving problems (commit messages and more).
Examples:
A trajectory with Claude 4 Sonnet, Pytest-dev__pytest-6202 (complete output here), the agent uses git log --all which leaks future commits that directly fix the issue:

<antml:parameter name="command">cd /testbed && git log --oneline --all | grep -i "bracket|parametrize|modpath" | head -10</antml:parameter>

The results of which directly reveal the fix:
    Fix incorrect result of getmodpath method.
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index b8b365ad3..734a92f9b 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -285,8 +285,7 @@ class PyobjMixin(PyobjContext):
                     break
             parts.append(name)
         parts.reverse()
-        s = ".".join(parts)
-        return s.replace(".[", "[")
+        return ".".join(parts)

Qwen3-Coder 480B (20250805-openhands-Qwen3-Coder-480B-A35B-Instruct) also has several cases of looking ahead: some examples include django__django-13513 (complete output here) uses git log grep=[issue ID] which directly reveals the fix PR which is in the future repo state (future commits).

Running command: cd /workspace/django__django__3.2 && �[1m�[91mgit log�[0m --oneline --grep="31926" -i

In another Qwen3-Coder trajectory, Django__django-15572, (complete output here) where the model specifically finds the commit containing the fix: 62739b6e2630e37faa68a86a59fad135cc788cd7

Command cd /workspace/django__django__4.1 && �[1m�[91mgit log�[0m --oneline --grep="33628" �[92m--all�[0m executed with exit code 0.

There are other examples of leakage found in trajectories from GLM 4.5, Qwen3-Coder 30B (20250805-openhands-Qwen3-Coder-30B-A3B-Instruct), and other models.
Mitigation will be to properly remove future repository state and any artifacts that contain information the agent could use (reflogs, branches, origins, tags, and more):

remove origins (branch names can reveal information about fixes)
remove all branches git log --all can be used to query them, plus branches that are tracking a remote origin might contain information about future commits even after a git reset --hard
remove the reflog (git reflog) can leak future commit messages that could detail approaches for solutions

The team (@felixkreuk, @UniverseFly, @jlko, @2dot71mily and others) will add more details as to findings here and below. We're still assessing broader impact on evaluations and understanding trajectories for sources of leakage.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Adam (YC W25) Is Hiring to Build the Future of CAD]]></title>
            <link>https://www.ycombinator.com/companies/adam/jobs/q6td4uk-founding-engineer</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214498</guid>
            <description><![CDATA[We’re building the founding engineering team at Adam.
At Adam, we’re tackling a frontier problem: building a new way to interface with CAD via AI. This demands creativity, deep technical ability, and novel thinking.
As part of the founding engineering team you may:
Sprint for two weeks to build a new product vertical from scratch 
Develop new interfaces for AI-driven CAD workflows
Design, implement, test, and deploy full features 
Work with our product team to ensure a fast, consistent, and beautiful experience across the application
We are looking for people who:
Blend excellent engineering with a taste for models and design
Have previously built a great product
Operate with high agency and own problems end-to-end
At Adam, you will be given the autonomy to do some of the best work of your life and redefine how the physical world is built.]]></description>
            <content:encoded><![CDATA[AI Powered CADFounding Engineer$160K - $250K•1.00% - 2.00%•San Francisco, CA, USJob typeFull-timeRoleEngineering, Full stackExperience1+ yearsVisaUS citizen/visa onlySkillsNext.js, JavaScript, React, TypeScript, Python, SQL, Software ArchitectureConnect directly with founders of the best YC-funded startups.Apply to role ›About the roleWe’re building the founding engineering team at Adam.
At Adam, we’re tackling a frontier problem: building a new way to interface with CAD via AI. This demands creativity, deep technical ability, and novel thinking.
As part of the founding engineering team you may:

Sprint for two weeks to build a new product vertical from scratch
Develop new interfaces for AI-driven CAD workflows
Design, implement, test, and deploy full features
Work with our product team to ensure a fast, consistent, and beautiful experience across the application

We are looking for people who:

Blend excellent engineering with a taste for models and design
Have previously built a great product
Operate with high agency and own problems end-to-end

At Adam, you will be given the autonomy to do some of the best work of your life and redefine how the physical world is built.
About the interview
Coding challenge
Talk to Zach (CEO)
Talk to Dylan (Founding Engineer)
Onsite paid work trial

About AdamAdam is an applied research and product lab building the future of computer-aided design, where engineers will be able to speak physical objects into existence. With Adam, you’ll use AI to complete design tasks end-to-end. For example, select a face and say, “Add mounting holes matching the bolt pattern from the other part, with identical diameters, spacing, and offsets,” and Adam handles the geometry, selects standard hardware, and outputs production-ready CAD.
We just wrapped up YC’s W25 batch, built a state-of-the-art text-to-CAD interface, and had one of the most viral YC launches of all time.
Our first product made CAD approachable and fun with AI, bringing tens of thousands of people into 3D printing. Now we’re enhancing the capabilities of engineers to create feature-rich models compatible with industry-standard software.
We’re a small technical team of engineers, designers, and researchers who love CAD and building things. Our founders are UC Berkeley alumni, second-time founders, and early employees at major AI startups.
We're in-person at the Adam House in the SF Marina, powered by green tea, lots of natural light, and a wall of 3D printers.
If you’re excited about shipping fast and shaping the future of how things are made, come join us.
Founded:2024Batch:W25Team Size:4Status:ActiveFoundersSimilar Jobs]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Bulletproof host Stark Industries evades EU sanctions]]></title>
            <link>https://krebsonsecurity.com/2025/09/bulletproof-host-stark-industries-evades-eu-sanctions/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214164</guid>
            <description><![CDATA[In May 2025, the European Union levied financial sanctions on the owners of Stark Industries Solutions Ltd., a bulletproof hosting provider that materialized two weeks before Russia invaded Ukraine and quickly became a top source of Kremlin-linked cyberattacks and disinformation campaigns.…]]></description>
            <content:encoded><![CDATA[
												In May 2025, the European Union levied financial sanctions on the owners of Stark Industries Solutions Ltd., a bulletproof hosting provider that materialized two weeks before Russia invaded Ukraine and quickly became a top source of Kremlin-linked cyberattacks and disinformation campaigns. But new findings show those sanctions have done little to stop Stark from simply rebranding and transferring their assets to other corporate entities controlled by its original hosting providers.
Image: Shutterstock.
Materializing just two weeks before Russia invaded Ukraine in 2022, Stark Industries Solutions became a frequent source of massive DDoS attacks, Russian-language proxy and VPN services, malware tied to Russia-backed hacking groups, and fake news. ISPs like Stark are called “bulletproof” providers when they cultivate a reputation for ignoring any abuse complaints or police inquiries about activity on their networks.
In May 2025, the European Union sanctioned one of Stark’s two main conduits to the larger Internet — Moldova-based PQ Hosting — as well as the company’s Moldovan owners Yuri and Ivan Neculiti. The EU Commission said the Neculiti brothers and PQ Hosting were linked to Russia’s hybrid warfare efforts.
But a new report from Recorded Future finds that just prior to the sanctions being announced, Stark rebranded to the[.]hosting, under control of the Dutch entity WorkTitans BV (AS209847) on June 24, 2025. The Neculiti brothers reportedly got a heads up roughly 12 days before the sanctions were announced, when Moldovan and EU media reported on the forthcoming inclusion of the Neculiti brothers in the sanctions package.
In response, the Neculiti brothers moved much of Stark’s considerable address space and other resources over to a new company in Moldova called PQ Hosting Plus S.R.L., an entity reportedly connected to the Neculiti brothers thanks to the re-use of a phone number from the original PQ Hosting.
“Although the majority of associated infrastructure remains attributable to Stark Industries, these changes likely reflect an attempt to obfuscate ownership and sustain hosting services under new legal and network entities,” Recorded Future observed.
Neither the Recorded Future report nor the May 2025 sanctions from the EU mentioned a second critical pillar of Stark’s network that KrebsOnSecurity identified in a May 2024 profile on the notorious bulletproof hoster: The Netherlands-based hosting provider MIRhosting.
MIRhosting is operated by 38-year old Andrey Nesterenko, whose personal website says he is an accomplished concert pianist who began performing publicly at a young age. DomainTools says mirhosting[.]com is registered to Mr. Nesterenko and to Innovation IT Solutions Corp, which lists addresses in London and in Nesterenko’s stated hometown of Nizhny Novgorod, Russia.
Image credit: correctiv.org.
According to the book Inside Cyber Warfare by Jeffrey Carr, Innovation IT Solutions Corp. was responsible for hosting StopGeorgia[.]ru, a hacktivist website for organizing cyberattacks against Georgia that appeared at the same time Russian forces invaded the former Soviet nation in 2008. That conflict was thought to be the first war ever fought in which a notable cyberattack and an actual military engagement happened simultaneously.
Mr. Nesterenko did not respond to requests for comment. In May 2024, Mr. Nesterenko said he couldn’t verify whether StopGeorgia was ever a customer because they didn’t keep records going back that far. But he maintained that Stark Industries Solutions was merely one client of many, and claimed MIRhosting had not received any actionable complaints about abuse on Stark.
However, it appears that MIRhosting is once again the new home of Stark Industries, and that MIRhosting employees are managing both the[.]hosting and WorkTitans — the primary beneficiaries of Stark’s assets.
A copy of the incorporation documents for WorkTitans BV obtained from the Dutch Chamber of Commerce shows WorkTitans also does business under the names Misfits Media and and WT Hosting (considering Stark’s historical connection to Russian disinformation websites, “Misfits Media” is a bit on the nose).
An incorporation document for WorkTitans B.V. from the Netherlands Chamber of Commerce.
The incorporation document says the company was formed in 2019 by a y.zinad@worktitans.nl. That email address corresponds to a LinkedIn account for a Youssef Zinad, who says their personal websites are worktitans[.]nl and custom-solution[.]nl. The profile also links to a website (etripleasims dot nl) that LinkedIn currently blocks as malicious. All of these websites are or were hosted at MIRhosting.
Although Mr. Zinad’s LinkedIn profile does not mention any employment at MIRhosting, virtually all of his LinkedIn posts over the past year have been reposts of advertisements for MIRhosting’s services.
Mr. Zinad’s LinkedIn profile is full of posts for MIRhosting’s services.
A Google search for Youssef Zinad reveals multiple startup-tracking websites that list him as the founder of the[.]hosting, which censys.io finds is hosted by PQ Hosting Plus S.R.L.
The Dutch Chamber of Commerce document says WorkTitans’ sole shareholder is a company in Almere, Netherlands called Fezzy B.V. Who runs Fezzy? The phone number listed in a Google search for Fezzy B.V. — 31651079755 — also was used to register a Facebook profile for a Youssef Zinad from the same town, according to the breach tracking service Constella Intelligence.
In a series of email exchanges leading up to KrebsOnSecurity’s May 2024 deep dive on Stark, Mr. Nesterenko included Mr. Zinad in the message thread (youssef@mirhosting.com), referring to him as part of the company’s legal team. The Dutch website stagemarkt[.]nl lists Youssef Zinad as an official contact for MIRhosting’s offices in Almere. Mr. Zinad did not respond to requests for comment.

Given the above, it is difficult to argue with the Recorded Future report on Stark’s rebranding, which concluded that “the EU’s sanctioning of Stark Industries was largely ineffective, as affiliated infrastructure remained operational and services were rapidly re-established under new branding, with no significant or lasting disruption.”
											]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A Web Framework for Zig]]></title>
            <link>https://www.jetzig.dev/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214159</guid>
            <description><![CDATA[Jetzig is a batteries-included web framework written in Zig]]></description>
            <content:encoded><![CDATA[
        
  
  
    Jetzig is an MIT
    licensed web framework written in Zig
  
  



  
 Routing
    Simple, file-based routing to RESTful
        Zig function declarations. Custom routes are also available.
      
  

  
 HTML
    Templating with Zmpl
        provides layouts, partials, inheritance, and build-time static content rendering.
  

  
 JSON
    All endpoints render JSON by default, providing a RESTful API for free.
  

  
 Speed
    Powered by http.zig
        for competitive performance and scalability.
      
  

  
 Tooling
    User-friendly CLI tooling for creating projects and adding new components.
  

  
 Middleware
    Hook into and manipulate requests/responses with a custom middleware chain. Built-in middleware for htmx
      .
  

  
 Sessions
    Cookies, user sessions, and request/response headers out of the box.
  

  
 Community
    Join us on Discord
      – we're friendly and active.
  

  
 Open Source
    Free, open source, and always will be. Jetzig is MIT
      licensed.
  

  

  
 Database
    
      Powerful and flexible database layer provided by JetQuery
        .
    
  

  


  

  

  

      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA['Robber bees' invade apiarist's shop in attempted honey heist]]></title>
            <link>https://www.cbc.ca/news/canada/british-columbia/robber-bees-terrace-bc-apiary-1.7627532</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45213732</guid>
            <description><![CDATA["Robber bees" hunt for dwindling resources in the late summer and early fall, but they usually only attack other beehives. So the owner of Rushing River Apiaries in Terrace, B.C., was shocked to find found thousands of the pollinators in her shop.]]></description>
            <content:encoded><![CDATA[British Columbia"Robber bees" hunt for dwindling resources in the late summer and early fall, but they usually only attack other beehives. So the owner of Rushing River Apiaries in Terrace, B.C., was shocked to find found thousands of the pollinators in her shop.Bees sometimes attack other colonies as resources dwindle, but they usually stick to beehives found outsideLauren Vanderdeen  · CBC News  · Posted: Sep 08, 2025 10:30 AM EDT | Last Updated: September 8An apiarist in Terrace, B.C., says she found thousands of 'robber bees' in her store in late August. (Submitted by Christine McDonald)A Terrace, B.C., beekeeper found herself in a nightmare situation late last month when "thousands and thousands of bees" filled her shop.Call it an attempted robbery — the bees were trying to steal sweet, sweet honey.Christine McDonald, owner of Rushing River Apiaries, said it's the first time desperate "robber bees" — bees that try to take honey from another colony's hive — have descended upon her indoor shop to hunt for food as resources get scarce in the late summer. While she's worked with bees for years and said she's very comfortable around them, this situation had her frightened."I think that's the most panicked I have felt.…There's thousands of bees, I don't know where they're coming from, and I need to protect all of the honey."Rushing River Apiaries in Terrace, B.C., was briefly set upon by thousands of 'robber bees' trying to find food in the late summer. (Submitted by Christine McDonald)The multitudinous bees had found their way in through cracks in the shop's older bay door.When a bee finds a good food source, it returns to the hive and does a "waggle dance" to tell other bees where the food is, McDonald said.After throwing tarps and lids over the equipment and products, and managing to save most of it, McDonald said she ended up "sacrificing her bathroom" to trap the invading bees: she left the light on, and lured the bees to the light where she could collect and then release them.VideoMillions of honeybees loose after truck overturns near B.C.-Wash. borderHoneybees invaded a reporter's home, and upended everything she thought she knew about themBut it took four or five days until the bees stopped trying to return."I think they've learned that, nope, there's no more food here. We can't get in."Daybreak NorthRobber beesHungry bees swarm Terrace apiaryMcDonald has since taped up the shop's door.She said while she's had robber bees attack her beehives before, it's the first time they found her indoor shop."Fall beekeeping is very intense — trying to help bees hunker down against other bees and wasps and keep the food stores that they've worked so hard for."McDonald says she had to tape up her shop door to make sure no other bees get in.  (Submitted by Christine McDonald)So-called robber bees are a fairly common phenomenon in the late summer and early fall.Alison McAfee, a research associate at the University of B.C. and honeybee scientist, said when there's fewer food resources, such as nectar-producing flowers, and the bee population is close to its peak, some forager colonies can invade weaker colonies to steal their food."It's almost like they have a level of desperation, kind of like the way you can think about bears having a bit of a level of desperation trying to fatten up for winter," McAfee said.AudioThe number of beekeepers are on the rise in Canada but honey production levels stingQueen bees from Ukraine find a sweet new home in northwestern B.C.She said wasps can also attack honeybees — but for slightly different reasons. Wasps eat a sugary substance secreted from their own larvae earlier in the season, but in the fall, there's fewer larvae and more adult wasps."They're not getting that sweet treat from their babies, essentially, and so they're especially motivated to get something sweet from elsewhere, because the adults actually really like to eat sugary things — and there's a lot of sugary stuff inside a honeybee colony."But wasps aren't the only bee-killer out there.McAfee said a bee colony can die from robber bees, if it's too weak to defend itself."We have a bad opinion of wasps," she said. "We're like, 'Oh those wasps, they're attacking our honey bee colonies, they're killing my bees.' But then a lot of the time, actually, the bees will kill our bees as well."McDonald is back to producing honey after a few days of cleanup. She said the bees seem more desperate this year than in the past, and thought it might be due to the extended heat as it still feels like midsummer.McDonald encouraged other beekeepers to keep their bees well fed, so they don't feel the need to rob other hives.ABOUT THE AUTHORLauren Vanderdeen is a web writer for CBC British Columbia. She formerly worked for community newspapers, including the Burnaby Now and New West Record. You can reach her at lauren.vanderdeen@cbc.ca.With files from Hanna Petersen]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[NT OS Kernel Information Disclosure Vulnerability]]></title>
            <link>https://www.crowdfense.com/nt-os-kernel-information-disclosure-vulnerability-cve-2025-53136/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45213299</guid>
            <description><![CDATA[Bidding farewell to one of the last kernel address leaks, CVE-2025-53136. Even patches can open new doors for exploitation.]]></description>
            <content:encoded><![CDATA[

	
			


		
																			
								
	
			11SepSeptember 11, 2025		
	
	
			Reading Time:   4 minutes

Table of Contents

IntroductionVulnerabilityQuick review on the patch for CVE-2024-43511Spotting the bugEffects of the bugExploitationSetupReliabilityProof-of-conceptsConclusionDisclosure Timeline
Introduction
Microsoft mitigated many traditional kernel information leaks starting with Windows 11/Windows Server 2022 24H2, including calls such as NtQuerySystemInformation() (when used with the SystemModuleInformation class), by suppressing kernel base addresses unless the caller had the SeDebugPrivilege, typically reserved for administrative processes. That change effectively neutered one of the most accessible KASLR bypass techniques, and, without knowledge of the kernel’s base addresses, exploitation became harder.
While doing patch analysis for CVE-2024-43511, I realised that Microsoft made a mistake leading to a kernel address leak vulnerability. This new bug requires winning a race condition to read out the address; however, it’s pretty easy to achieve. It provides a powerful kernel address leak for any token handle, which can be easily chained with other vulnerabilities to obtain a complete exploit on the latest version of the system.
Vulnerability
Quick review on the patch for CVE-2024-43511
In October 2024, Microsoft released a patch for a Time-of-check Time-of-use (TOCTOU) Race Condition vulnerability in the Windows kernel, namely CVE-2024-43511.
To fix the issue, when passing parameters to the RtlSidHashInitialize() function, it reads data from a kernel pointer (which is a member of the TOKEN structure), instead of the value set in a user-controlled buffer.

Spotting the bug
With the new update, the RtlSidHashInitialize() function, which performs hash initialisation, now takes as its first parameter a pointer from the TOKEN structure and as its third parameter a user-controlled buffer. Then, RtlSidHashInitialize() stores the first parameter (which is a pointer to the UserAndGroups field of the TOKEN structure) into the third parameter (user-supplied pointer), and starts doing hash initialisation later on:

Although the caller function will replace the stored pointer in the user-buffer pointer after that, it still leaves a small time window for us to win a race condition and read out the leaked kernel address. To trigger the vulnerable function, we only need to invoke the NtQuerySystemInformation() API with the SystemTokenInformation class.
Effects of the bug
This leak primitive is particularly useful for Windows versions 24H2 or later, as the well-known technique for leaking kernel addresses using NtQuerySystemInformation() or other alternative methods has been patched. As the vulnerability is located within an NT syscall, the bug can be exploited from either Low IL or AppContainer. If chained with a write-what-where bug to overwrite the Privileges field of the TOKEN object, it will result in a complete LPE.
Exploitation
Setup
To exploit this bug, I need to create two threads to run concurrently:

One thread to read at the specific offset, which will be used to store the kernel address in the user buffer.
One thread performs the syscall. It is required to run the syscall several times before archiving the kernel leak.

Reliability
Although this is a race condition bug, the time window is wide enough to read the kernel address from the user-space buffer. To increase the success rate, we repeatedly call NtQuerySystemInformation() while keeping reading until we get the leak. The read becomes very reliable, and we can obtain the leaked TOKEN almost every time we run the exploit.
Proof-of-concepts
The results below show the exploit on a Windows Insider Preview in April 2025 (latest version at the time of writing), running the exploit from the Low IL and App Container contexts:


Conclusion
Patch analysis is one of the fastest ways to improve our skills and sharpen our mindset in bug finding. Additionally, it also helps us improve our secure coding skills. Sometimes, bug fixes in a function can introduce new bugs in other parts of the code. When conducting vulnerability research, it’s recommended to take a deep look to understand how the bug was patched and whether the patch completely resolves the issue or leaves other gaps open. From a developer’s point of view, every change made to a function can affect others as well, so take extra care when making any changes to the codebase. It is essential to thoroughly understand how a function works before modifying it, as this helps avoid mistakes or misuse of the function.
Disclosure Timeline

April 8th: Reported to vendor.
April 9th: Microsoft acknowledged that it is working on the bug.
April 22nd: They claimed that the bug is duplicated with a bug which had been fixed already, and closed the case without having any other chance to explain the bug… (I don’t know why).
April 22nd: I made a tweet on X to complain about that, and luckily, I got a response from them.
April 25th: Confirmed my report is a valid bug:v
April 29th: Microsoft replied that the bug was in scope.
August 1st: CVE-2025-53136 was assigned.


		

					
		
	

	

								
					
					]]></content:encoded>
        </item>
    </channel>
</rss>