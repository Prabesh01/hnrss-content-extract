<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Sat, 30 Aug 2025 23:07:34 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Enrollment at trade schools is expected to grow 6.6% a year]]></title>
            <link>https://finance.yahoo.com/news/ai-cant-install-an-hvac-system-why-gen-z-is-flocking-to-jobs-in-the-trades-171735856.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45078651</guid>
        </item>
        <item>
            <title><![CDATA[Affiliates Flock to 'Soulless' Scam Gambling Machine]]></title>
            <link>https://krebsonsecurity.com/2025/08/affiliates-flock-to-soulless-scam-gambling-machine/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45078530</guid>
            <description><![CDATA[Last month, KrebsOnSecurity tracked the sudden emergence of hundreds of polished online gaming and wagering websites that lure people with free credits and eventually abscond with any cryptocurrency funds deposited by players. We've since learned that these scam gambling sites…]]></description>
            <content:encoded><![CDATA[
												Last month, KrebsOnSecurity tracked the sudden emergence of hundreds of polished online gaming and wagering websites that lure people with free credits and eventually abscond with any cryptocurrency funds deposited by players. We’ve since learned that these scam gambling sites have proliferated thanks to a new Russian affiliate program called “Gambler Panel” that bills itself as a “soulless project that is made for profit.”
A machine-translated version of Gambler Panel’s affiliate website.
The scam begins with deceptive ads posted on social media that claim the wagering sites are working in partnership with popular athletes or social media personalities. The ads invariably state that by using a supplied “promo code,” interested players can claim a $2,500 credit on the advertised gaming website.
The gaming sites ask visitors to create a free account to claim their $2,500 credit, which they can use to play any number of extremely polished video games that ask users to bet on each action. However, when users try to cash out any “winnings” the gaming site will reject the request and prompt the user to make a “verification deposit” of cryptocurrency — typically around $100 — before any money can be distributed.
Those who deposit cryptocurrency funds are soon pressed into more wagering and making additional deposits. And — shocker alert — all players eventually lose everything they’ve invested in the platform.
The number of scam gambling or “scambling” sites has skyrocketed in the past month, and now we know why: The sites all pull their gaming content and detailed strategies for fleecing players straight from the playbook created by Gambler Panel, a Russian-language affiliate program that promises affiliates up to 70 percent of the profits.

Gambler Panel’s website gambler-panel[.]com links to a helpful wiki that explains the scam from cradle to grave, offering affiliates advice on how best to entice visitors, keep them gambling, and extract maximum profits from each victim.
“We have a completely self-written from scratch FAKE CASINO engine that has no competitors,” Gambler Panel’s wiki enthuses. “Carefully thought-out casino design in every pixel, a lot of audits, surveys of real people and test traffic floods were conducted, which allowed us to create something that has no doubts about the legitimacy and trustworthiness even for an inveterate gambling addict with many years of experience.”
Gambler Panel explains that the one and only goal of affiliates is to drive traffic to these scambling sites by any and all means possible.
A machine-translated portion of Gambler Panel’s singular instruction for affiliates: Drive traffic to these scambling sites by any means available.
“Unlike white gambling affiliates, we accept absolutely any type of traffic, regardless of origin, the only limitation is the CIS countries,” the wiki continued, referring to a common prohibition against scamming people in Russia and former Soviet republics in the Commonwealth of Independent States.
The program’s website claims it has more than 20,000 affiliates, who earn a minimum of $10 for each verification deposit. Interested new affiliates must first get approval from the group’s Telegram channel, which currently has around 2,500 active users.
The Gambler Panel channel is replete with images of affiliate panels showing the daily revenue of top affiliates, scantily-clad young women promoting the Gambler logo, and fast cars that top affiliates claimed they bought with their earnings.
A machine-translated version of the wiki for the affiliate program Gambler Panel.
The apparent popularity of this scambling niche is a consequence of the program’s ease of use and detailed instructions for successfully reproducing virtually every facet of the scam. Indeed, much of the tutorial focuses on advice and ready-made templates to help even novice affiliates drive traffic via social media websites, particularly on Instagram and TikTok.
Gambler Panel also walks affiliates through a range of possible responses to questions from users who are trying to withdraw funds from the platform. This section, titled “Rules for working in Live chat,” urges scammers to respond quickly to user requests (1-7 minutes), and includes numerous strategies for keeping the conversation professional and the user on the platform as long as possible.
A machine-translated version of the Gambler Panel’s instructions on managing chat support conversations with users.
The connection between Gambler Panel and the explosion in the number of scambling websites was made by a 17-year-old developer who operates multiple Discord servers that have been flooded lately with misleading ads for these sites.
The researcher, who asked to be identified only by the nickname “Thereallo,” said Gambler Panel has built a scalable business product for other criminals.
“The wiki is kinda like a ‘how to scam 101’ for criminals written with the clarity you would expect from a legitimate company,” Thereallo said. “It’s clean, has step by step guides, and treats their scam platform like a real product. You could swap out the content, and it could be any documentation for startups.”
“They’ve minimized their own risk — spreading the links on Discord / Facebook / YT Shorts, etc. — and outsourced it to a hungry affiliate network, just like a franchise,” Thereallo wrote in response to questions.
“A centralized platform that can serve over 1,200 domains with a shared user base, IP tracking, and a custom API is not at all a trivial thing to build,” Thereallo said. “It’s a scalable system designed to be a resilient foundation for thousands of disposable scam sites.”
The security firm Silent Push has compiled a list of the latest domains associated with the Gambler Panel, available here (.csv).
											]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Six Months into Tariffs, Businesses Have No Idea How to Price Anything]]></title>
            <link>https://www.wsj.com/business/retail/trump-tariff-business-price-impact-37b630c8</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45077937</guid>
        </item>
        <item>
            <title><![CDATA[Why did books start being divided into chapters? A new history]]></title>
            <link>https://sydneyreviewofbooks.com/reviews/just-a-little-longer</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45077735</guid>
            <description><![CDATA[Why did books start being divided into chapters? Joshua Barnes reviews Nicholas Dames’ history of literary segmentation, a study that slices through and pauses over what chapters have always told us about the times we live in.]]></description>
            <content:encoded><![CDATA[Why did books start being divided into chapters? Joshua Barnes reviews Nicholas Dames’ history of literary segmentation, a study that slices through and pauses over what chapters have always told us about the times we live in.I often return to an essay by Lydia Davis about an unusual experiment in translation. Better known for her work on French writers like Gustave Flaubert, Marcel Proust, and Maurice Blanchot, Davis had in this case tried to translate a literary text, not from French but rather from English into English. The text in question was Laurence Sterne’s unfinished 1768 novel, A Sentimental Journey through France and Italy by Mr. Yorick. Even a glance at its first page suggests why the book might require translation. Here is how it begins:  ——They order, said I, this matter better in France—          —You have been in France? said my gentleman, turning quick upon me with the most civil triumph in the world.—Strange! quoth I, debating the matter with myself, That one and twenty miles sailing, for ’tis absolutely no further from Dover to Calais, should give a man these rights—I’ll look into them: so giving up the argument—I went straight to my lodgings, put up half a dozen shirts and a black pair of silk breeches—‘the coat I have on, said I, looking at the sleeve, will do’—took a place in the Dover stage[.] Unusual English, to say the least. Davis sought to do two things: to modernise the novel by translating its sui generis language into contemporary English; and to figure out, in the process, what exactly makes it so unusual in the first place. Guiding her translation, however, is a deeper question: Why is it that visual art from ‘the eighteenth century and further back, to the beginning of discovered painting, is readily available, at least in reproduction, and enjoyed by the general public, not just scholars or specialists’ – but not literature ‘before, say, Jane Austen’? Literature from before 1800, Davis notes, is ‘mostly unread, even by writers’, and while many English speakers will learn foreign languages, they do not also try to ‘cross the barrier to James Boswell’s English, or John Donne’s, or further back to Chaucer’s or Beowulf’s’. The results of this experiment are perhaps less significant than the theoretical speculation it occasions. Translating across the gulf of historical difference – what we could call ‘temporal translation’ – might actually be difficult because ‘the barrier is something other than the language’: ‘maybe it is the sensibility or the worldview that changes too much, as we travel back in time, for us to understand it, or, if we understand it, to feel any sympathy for it’. Sterne’s novel occupies the unusual and contradictory position of being at once proto-modern (or proto-modernist) and somehow, by this very stylistic prolepsis, archaic or antiquated. It seems to shatter our so-called modern conventions before they were even created.A Sentimental Journey appears to begin in the middle of a conversation, but it is not exactly clear who is speaking or to whom they speak: dialogue is not clearly set out in quotation marks; dashes of different lengths are used expressively; and, finally, it is not organised according to legible chapters. Flipping through the first fifteen or twenty pages one sees instead repeated chapter titles: ‘Calais’; ‘The Monk | Calais’; ‘The Monk | Calais’ (again); ‘The Monk | Calais’ (once more); ‘The Desobligeant | Calais’; finally and somewhat belatedly, a ‘Preface | In the Desobligeant’; then, three pages later, ‘Calais’ (again). Such irregular chaptering produces an irregular experience of time, hence the comedy of the moment when Sterne’s hero, Yorick, is found rocking his horse-drawn carriage by the ‘agitation of writing a preface’ – a few chapters in.Sterne’s indifference to normal chaptering only throws into relief the ordinary and invisible work that chapters do as literary infrastructure. As is so often the case, one only notices a convention when it’s violated. But it is equally true of conventions that they are made; they come from somewhere. Why is it that novels have chapters at all? This is the inquiry of The Chapter: A Segmented History from Antiquity to the Twenty-First Century by Nicholas Dames, a professor of English at Columbia University who specialises in Victorian literature and culture. A book on chapters! I know. Stay with me. For this apparently technical question transforms into a historical phenomenology of literary time. In this sense The Chapter continues the inquiry Dames has been carrying out for the past quarter century in his scholarly work – the exploration of what he called, in Amnesiac Selves (2000), the ‘linguistic organization of temporal experience’, borrowing the phrase from the great German historian Reinhart Koselleck. In The Chapter, however, the scope has been radically widened, in part – one suspects – to make sense of the novel’s present fortunes. Dames declared in his previous book, The Physiology of the Novel (2007), the necessity of developing ‘nuanced and even-handed accounts of what I might call the social norms of cognition of given historical moments’, norms that are reproduced in large measure by the norms of writing. Enter the chapter. One of the basic structures of the book, the chapter is a ‘box of time’ that shapes the reader’s experience of temporality. As such, changes in chaptering present one way of exploring changes in the experience of time in literary history. How did time feel in late antiquity, or in fifteenth-century Burgundy, or to a former slave at the end of the eighteenth century? Studying the chapter might also tell us something about our experience of time now, in ‘the present’ – whatever that is – and the historical distance between our time and that of times past. Sterne comes up a lot in The Chapter, partly because his experiments in self-consciousness draw attention to the chapter’s conventionality, if only in the breach. In Sterne’s better-known novel The Life and Opinions of Tristram Shandy, Gentleman (1759-67), for instance, you might catch yourself in volume four thinking you had missed something as chapter twenty-three gives way to chapter twenty-five:  —No doubt, Sir,—there is a whole chapter wanting here—and a chasm of ten pages made in the book by it—but the book-binder is neither a fool, or a knave, or a puppy—nor is the book a jot more imperfect, (at least upon that score)—but, on the contrary, the book is more perfect and complete by wanting the chapter, than having it. If the book truly is ‘more perfect and complete by wanting the chapter’, that is because Tristram Shandy is a book about failure and errancy, where experiments with form and time are manifold. Notoriously it begins with Tristram’s attempt to narrate his life, but he prevaricates so long that he fails to get to any of the key points of his personal history. The preface again arrives late, in volume two; his birth only occurs in volume four; Tristram’s very name is an error, the intended birth name being Trismegistus. And what better expression of errancy than a gap in the novelistic edifice itself? Sterne also breaks off chapter nine of volume four, as Tristram’s father walks down a flight of stairs, and asks: ‘Is it not a shame to make two chapters out of what passed in going down one pair of stairs?’ There begins a ‘chapter upon chapters’, which Sterne calls ‘the best chapter in my whole work; and take my word, whoever reads it, is as well employed as in picking straws’. Picking straws: the very image of contingency. But with Dames’ theory of the chapter in mind, all this meddling with chapterisation, or capitulation (from the Latin capitulum, meaning ‘little head’), is not simply literary estrangement or satire. Rather it reflects, arguably even theorises, the function of the chapter – the presentation of time as an experience of unified discontinuity.Dames illuminates Sterne’s eighteenth-century moment as one in which the novel chapter has lost ‘much of its original function without as yet having acquired a new one’, which makes it properly experimental. But the place of Sterne’s experiments in the history of the chapter belies the fact that Dames’ history is really an attempt to describe the genesis and function of a convention in its very conventionality – not the exceptions, but rather the rule. His attention is directed instead towards the ‘usual chapter and its almost unthinking repetitions of technique’. This is a more ambitious task than it might seem. A chapter is a ubiquitous part of novelistic architecture – so easily overlooked, as Dames notes, that it is difficult even to conceptualise as an object of inquiry. And although the chapter finds its most distinctive uses in the novel, which has the ‘unique ability to […] articulate how the experience of time is the experience of time’s segmentations’, it does not originate there.If the enormous scope of this book invites comparisons with Erich Auerbach, then so too does its method, which similarly offers densely suggestive examples rather than an exhaustive historical inventory. Unlike Auerbach, however, Dames’ organisation of his material tends towards the taxonomic and schematising. He offers eight views of the chapter performing different functions at different historical moments: there is the ‘threshold’ of the classical heading, the ‘abstract syncopation’ of the Gospels, the ‘cut’ and ‘fade’ of medieval prose narratives – and so on, down to the ‘post chapter’ present. This is a longstanding ‘taxonomical urge’, as Dames termed it at the beginning of Amnesiac Selves, a habit that he picked up from his objects of study. Victorian theories of mind such as phrenology, for all their notorious problems, nonetheless ‘provided […] a useful interpretive model’ – in permitting its division ‘into distinct parts’, they rendered a newly ‘spatialized’ and ‘diagrammatic’ mind that was more susceptible of analysis. But in The Chapter there is perhaps a tension between the comprehensive ambitions of this ‘taxonomic urge’, and the suggestive but partial moments of Auerbachian literary history. You could say that the book makes a methodological wager that the nearly scientific goal of taxonomy – to encompass everything – can effectively be grafted onto an historicist hermeneutics constantly shifting its focus from part to whole and back again.We begin in the second century BCE, with a tablet, known today as the Tabula Bembina, upon which are inscribed some Roman anti-corruption laws from the time of the Gracchi. This was a ‘public, technical matter, by no means literary’, but for Dames it captures the chapter’s characteristic early function – as a technology not of narrative, but of reference – that would eventually be imported into the codex. On the tablet, ablative Latin phrases designate the topics covered in the relevant sections (de nomine deferundo iduibusque legundeis or ‘concerning prosecution and the choosing of juries,’ for instance). At once ‘visual and analytic’, these create a sort of resting place for the eye, and they organise the information presented into a logical and navigable form.But we are still very much in the realm of the heading; the tablet is a source of information. Jumping forward three centuries to the second century CE and to the work of the grammarian Aulus Gellius, Dames observes a new breadth in the headings of Gellius’s miscellany, Attic Nights, ranging from brief summary to something more authorial than a legal finding-aid: ‘How Publius Nigidius with great cleverness showed that words are not arbitrary, but natural.’ Yet a text like Attic Nights is still only something to be consulted partially, and on occasion, rather than read and absorbed line-by-line: ‘The text is not an experience’, but rather a ‘storage place from which information is extracted; the condensed summary is not only possible, but desirable’. However, one can begin to see the line of transmission; those ablative phrases of the Tabula Bembina are a precursor to the summative chapter headings of a novel like Charlotte Lennox’s Female Quixote (1752): ‘In which will be found one of the former Mistakes pursued, and another cleared up, to the great Satisfaction of Two Persons; among whom, the Reader, we expect, will make a Third.’ And so, from the tablet, the chapter begins the migration it will be Dames’ project to track: out of its originary informational context and, slowly but surely, into the temporality of the novel.Before the migration is complete, though, we have a centuries-long period of terminological and conceptual confusion as various terms, referring to both the textual unit and its title, are used: capitulum, kephalaia (‘head’), titlos (‘title’), argumentum and breviculus (summaries used to aid the inspection of a text) – these terms are all tangled together. One of the most inspired interpretations of this conceptual history is Dames’ rereading of the Confessions by the fourth-century theologian Augustine. Amid a spiritual crisis, Augustine overhears some nearby children crying ‘take it and read’, and, turning to a random section of the Bible, resolves to read ‘the first chapter [capitulum] I might find’. This is pivotal in converting Augustine to Christianity, for his eyes fall upon what a modern reader of the Bible might know as Romans 13:13-14, a caution against revelry that urges one away from ‘rioting and drunkenness’, exhorting instead that its reader ‘put ye on the Lord Jesus Christ, and make not provision for the flesh, to fulfil the lusts thereof’. Or at least, that is how it reads in the Oxford edition of the King James Bible I have just taken down from my shelf (slightly hungover, I confess, and thus moved and gently interpellated by its message), navigating with relative ease to Romans 13. But this was not Augustine’s experience, for his Bible had no chapters; his capitulum refers to the general ‘head’ or topic of the passage. The meaningful unit discloses itself ‘out of an unmarked stream’. The organisation of the Bible into ‘chapter and verse’ dates from well after Augustine’s time – chapters in the thirteenth century, and verses in the sixteenth – and though this format has to a large degree been naturalised by convention, it was not for this reason free of controversy. Early modern intellectuals like Robert Boyle and John Locke would even rail against Biblical chaptering: Boyle complained of its ‘inconvenient Distinction’, which ‘hath sometimes Sever’d Matters that should have been left United’; Locke for his part despaired that the system of chapter-and-verse left scripture ‘so chop’d and minc’d […] so broken and divided’ that not only do the ‘Common People take the Verses usually for distinct aphorisms’, but even the educated have their powers of memory enfeebled. Yet not even the complaints of Boyle and Locke could overturn the chapter’s ‘embeddedness in biblical textual tradition specifically and literate culture generally’. (To this ‘antichapter’ tradition we might add Donald Trump, who, when asked during an interview in 2015 to name a favourite bit of scripture, replied: ‘The Bible means a lot to me, but I don’t want to get into specifics.’)Christian scripture is a key site of this transformation of the classical heading, indexing discrete topics in a text, into something whose purpose is story-driven and temporal. The Gospels are, after all, narratives, demanding ‘a new method’ for their organisation. Surveying six competing divisions of the Gospels across ten centuries, Dames describes a project of ‘containerization’ in which the chapter becomes capable of holding a wider variety of topics without being ‘tailored’ to the shape of its content. But it is in the late twelfth century that the ‘modern’ system of Biblical chaptering is inaugurated. Usually associated with the medieval Paris Bible, the origins of this chapter system have long been tied to the work of the English theologian Stephen Langton (c. 1150-1228), who sought more accurate methods of citation for the university classroom. Despite the fact that not all that much evidence binds Langton to the creation of this chaptering technique, this historical account has long been the dominant one: ‘a creative and practical-minded English churchman, steeped in the chaotic environment of a cosmopolitan academy, takes on the chaptering of the Bible’ to improve his pedagogy. This story, however, has been challenged by the discovery of the earlier Saint Albans Bible (1180), named for the Hertfordshire abbey where it was produced, which contains Hebrew calligraphy and thus suggests the possibility not only of a Jewish scribe, but also perhaps an immersion in medieval rabbinical practices. In this view, the objective of the chapter was not scholarly and citational but monastic and oriented towards ‘communal reading tied to a ritualized calendar’. Whether first conceived for the ‘classroom or the chapel’, what Dames calls – in the spirit of historiographic compromise – the ‘Langton-Saint Albans model’ of chaptering affords a new experience: the ‘private continuous reading of narrative texts,’ the glorious fact of silent reading.Of course, a whole host of other transformations were needed to make such reading possible: the scroll is first divided into the codex; ancient continuous script is split into discrete words, which are themselves separated uniformly into paragraphs only in the early modern period. Transformations like these are usually treated by book historians as a ‘Babel allegory’, as Dames put it in The Physiology of the Novel, where the historical development of the book as a technology is told as the story of its fragmentation into smaller and smaller parts (which is often a narrative of progress, too: smaller units make reading more accessible and democratic). The Chapter takes this story of fragmentation one step further: part of Dames’ interest is motivated by the chapter’s final dematerialisation and its lingering power as metaphor. The chapter has ‘become a metalanguage’ that describes the different rhythms of social life, from clock time to the lived cadences of the body. One speaks of a new chapter in one’s life – not a new paragraph or a new sentence or, indeed, a new clause. But: ‘If it still works for us this way,’ Dames asks, ‘for how much longer?’ Here, we might be prompted to ask: who in fact is left in this us? Viewed in the less generous glare of media history, and from the perspective of a present less and less oriented towards reading of any kind, the answer is doubtful. If the members of an increasingly postliterate society still measure out their lives in chapters, this may only be a matter of mere habit or convention – in the way that a car’s engine capacity continues to be measured in horsepower.Perhaps it is the inevitable fate of any convention, but literary history does not, it turns out, have many examples of people appreciating great chaptering. In The History of English Prose Rhythm (1912) – one of the sources for James Joyce’s virtuosic-or-unreadable parodies of the evolution of English prose in Ulysses – George Saintsbury remarks on Thomas Malory’s decision to insert a chapter break at a decisive moment in his fifteenth-century Morte d’Arthur. At the end of chapter ten of the Morte, Lancelot rides into a castle, having slayed its gatekeeper, only to hear from the castle’s residents ‘in doors and windows that said “Fair Knight: thou art unhappy.”’ Saintsbury praises Malory’s sense of timing here. The chapter break introduces a pause, leaving those words, as Dames puts it, ‘hovering in the air’. The next chapter begins with Lancelot successfully freeing captives from the prison; as such, the chapter has served to elongate the narrative incident and heighten the tension.The only problem is that this was not Malory’s division, but rather one added by the printer William Caxton (c.1422-92). This fact was only discovered in 1934 when an edition of the Morte predating Caxton was discovered at Winchester College. As it turns out, the Winchester version had no chapters. The modulations of time are the work of Caxton’s specific ‘remediation’. He creates an ‘artful segmentation, a resonant silence, in the printed volume’s visual patterning’. Caxton is paired in this chapter of The Chapter with the anonymous fifteenth-century remediators who transformed Chrétien de Troyes’s great twelfth-century Arthurian verse into prose. Unlike Caxton’s their results are not acclaimed; like the authors of movie novelisations today, they are vulgarisers, profaning the sacred bonds between form and content. In their hands, Chrétien’s flowing verse – praised in Mimesis by Auerbach as ‘light and almost easy’ – is not only segmented with red ink, but also crowded with insistent explanations in the register of narrative history (‘How the king kissed Enide’). Again, in the manner of movie novelisers, moments of introspection are reduced while battle sequences are dilated with a vigour that may equally be judged ‘clumsy technique’ or ‘daring maneuver’. More charitably, we might say these remediators practise what Dames calls, after Roman Jakobson, ‘intralingual translation’ – a phrase that calls back to mind (there it is again!) Davis’ experiment with Sterne. Like Davis, the remediators are working across an historical gap between time-feelings, transforming the internal temporality of Chrétien’s verse to fit their own prosaic times. Dames speculates on the reasons for this transformation. Could it be that the new and uncertain ruling clique in Burgundy – ‘freshly arrived at what would be its historical apex’ – preferred these ‘modes of intense now-time’ to the subtle continuities of Chrétien’s verse? Admitting the possibility of such an ‘ideological effect’, Dames also notes that it is equally likely that these ‘new temporalities’ were simply an ‘accident’. Here one notices a difference between Dames’ previous books and The Chapter, whose broader subject matter perhaps helped it to become a finalist for the National Book Critics Circle Award. As brilliant works of literary history, Amnesiac Selves and The Physiology of the Novel both have the density of specialist knowledge and the sensitivity of immersive textual studies. Each book reconstructs a forgotten discourse: the first book reassembles the understanding of memory in the Victorian period, as explored through close readings of key Victorian novelists and scientific writers; the second builds on this interest by turning to the forgotten paradigm of ‘physiological’ novel theory and its exemplars, the philosopher-scientist-critics GH Lewes, ES Dallas, and Alexander Bain, who explored the embodied rhythms of reading. The physiological basis for a literary theory of form was ultimately swept away by more abstract formalisms espoused, on the one hand, by Henry James and his acolyte Percy Lubbock, and, on the other, by the practico-critical poetics of IA Richards (who effectively banished the novel from the classroom). Though Dames’ close readings in The Chapter are no less attentive and sinuous than in these earlier books, they are perforce more limited by the widened scope. I don’t intend to downplay the brilliance of Dames as a reader of individual texts or as a literary historian. However, as the study twists and turns, the density of historical detail together with the vast scope can at times induce a kind of mental torsion, with the dual impulses to historicise and taxonomise pulling in different directions.In any case, the taxonomic conclusion Dames draws from the Burgundian remediators of Chrétien is that while their clumsy cuts are just that – cuts in a continuous weave – Caxton’s interventions are more like the ‘fade’, offering ‘aeration’ to the narrative text. In this respect Caxton’s edits are oriented not towards reference, but ‘narrative progression and rhythm’. The paradoxical outcome of this intervention is to unify Malory’s text precisely by dividing it; the Morte now comprises ‘semi-discrete moments in a single process, rather than entirely different moments’. Unification-through-division of this sort highlights two logics of narrative time: discontinuous and immersive reading. Chaptering itself comes to generate a ‘feeling of presentness’ by adding white space, a species of visual fermata between narrative actions – ‘emptiness [with] a temporal intensity.’In their evocation of ‘presentness’, blank intensities of this kind recall a much longer-running theological dispute – between Augustine and the great English theologian Bede – on the divisibility of time. Where, after all, is the present? For Augustine, it is impossible to isolate something like ‘presentness’, for it is composed – as he put it in the Confessions – of ‘fugitive moments’, suspended in the future or always being sucked away into the past. The present is thus not measurable by a distinctive unit. Bede, in his eighth-century work The Reckoning of Time, argued to the contrary that there is a ‘minimal’ or ‘atomic’ unit of time. He made his case through a thought experiment. Say you are just about to be punched in the face. As a reflex, you flinch and close your eyes. Between these two moments – that ‘tiniest interval of time in which the lids of our eyes move when a blow is launched’ – is where ‘Bede’s present’ may be found: the atomic unit of presentness. Dames’ point is not that this theological argument directly influenced Caxton and the Burgundian prosateurs, but rather that the disagreement between the two great theologians reflects different investments in literary forms and their relationships to subjectivity in time. For Augustine a poem ‘held entire’ in the mind of a reciter approximates divine omniscience; for Bede, meanwhile, the atomic present is best accessed via a ‘punctuated continuity and directionality’ that might just be the hallmark of well-divided prose – consequently it is ‘seriality, not the transcendence of seriality, [that] is our access to the divine’. It is only in interrupting the present that we are able to perceive it.But it is left to the early novel (as an historian of the form, Dames is candid about this bias) to develop fully the space between Augustine’s durationless void and Bede’s serial present. Leaping forward another two hundred-odd years, then, Dames shows this binary of discontinuous and immersive reading exploding into an array of conceptual possibilities. ‘The eighteenth-century synthesis’, as Dames calls it, spans the period from the picaresque to the first flourishing of the English novel in the middle of the eighteenth century, with the antics of Sterne and Henry Fielding. Functions inherited from older reference-based chapters are here experimentally set in tension with the narrative innovations first explored in the fifteenth-century remediations: the eighteenth-century chapter struggles with the relationship between the strange and the commonplace, the ‘striking and singular’ and the ‘categorizable’. Hence the initial distinction between discontinuous and immersive reading turns out to contain other oppositions that structure it in turn: between space and time; and between the time narrated and the time it takes to narrate or read.Figuring all this is that moment on the staircase from the middle of Tristram Shandy, a kind of novelistic freezeframe, in which Sterne fixes Walter Shandy in place to reflect upon chaptering. In Dames’ account, this metachapter makes explicit the chapter’s full conceptual field: it has a direct address; it narrates both an incident and an interruption. What stands out as the real ‘heart’ of the metachapter is the staircase itself, which serves as a kind of symbolic definition of the chapter’s function. The staircase ‘captures the chapter’s double chronometry, that tension expressed by the simultaneous binaries of space versus time and narrated versus narrating times’. Fielding famously compared his chapters to inns along the road of a long journey, where the reader may ‘stop and take a glass’, but Dames thinks the staircase a better figure. Fielding’s coach trip is merely ‘linear, starting and stopping’; Sterne’s staircase, on the other hand, ‘unpacks two complementary but opposed dimensions’. Walter and Toby head down the stairs, troping narrative progress, while at the same time the sequence of steps and landings displays the segmentation of linearity ‘into discrete stages’. Sterne’s novel is a kind of ‘funhouse mirror’ of temporality: instead of proceeding steadily along a horizontal axis, our temporal schema is thrown down the stairs.Later, in what JGA Pocock once called the ‘second eighteenth century’, the so-called Age of Revolutions, the chapter mutates again. Now ‘elongated’, the chapter is studied in two works that each seem in different ways to dissolve its earlier functions. In The Interesting Narrative of Olaudah Equiano (1789), the famous autobiography of a Nigerian slave who eventually regained his freedom and lived in Britain, Dames observes a mismatch between the protocols of chaptering and the life that these protocols divide up. Equiano’s chapters offer extensive summaries in the manner of a picaresque novel, but seem at the same time to show the inefficacy of that paratextual structure for capturing the experience of domination and eventual manumission. ‘How then to describe the chapter in Equiano, or more bluntly, why bother to do so?’ It is perhaps relevant precisely because the apparent orderliness of chaptering – its ability meaningfully to sculpt time – is shown, against the absolute alienation of slavery, to be unfit for its usual purpose of segmentation. Thus, the intensively expository chapter summaries of the Narrative not only fail to coordinate with the abbreviated summaries in the table of contents, but they also introduce chapters of far greater length (on average, Dames tells us, these are 6,500 words: up to four times longer than is typical for this period). So, then, what is the meaning of this technical decision? ‘To say,’ Dames writes, coming perilously close to ventriloquising Equiano, ‘a life cannot be measured this way, not this kind of life.’As the self-testimony of a former slave, published in the same year as the storming of the Bastille, Equiano’s Narrative is certainly a sign of the times. It is perhaps as iconic a testament to the ‘new epoch’ of the nineteenth century as Girodet’s portrait of Jean-Baptiste Belley, a former slave from Saint-Domingue who would eventually be elected to the French National Convention. ‘New epoch’: this is the legendary, and perhaps apocryphal, phrase of Goethe, uttered in response to the defeat of the Prussians at Valmy in 1792. ‘From this place and from this day a new epoch in world history begins and you can say you were there to see it.’ We might observe that he, for one, did not reach here for the metaphor of the chapter – too ‘partial, fleeting, unhistorical’, according to Dames, to register this period’s epochal shifts. In Goethe’s Wilhem Meister’s Apprenticeship (1795-96), for instance, the chapter becomes even more elongated (one of them is 20,000 words!), doubling in size in the novel’s second half, which was composed after Valmy. Wilhem Meister’s Apprenticeship is a ‘triple turning point’, tying together ‘a world-historical transition, a maturational transition’, and a ‘career transition’ as Goethe, now older and on the other side of the revolution, has to produce fresh material rather than merely revising old writing. It is the very incongruity and ‘dilation’ of the chapter that ‘itself is historical’. Jane Austen’s career is also adduced as an example of the eighteenth century’s passing into the nineteenth, with the three youthful novels drafted in the 1790s averaging chapter lengths of around 2,000 words, while the ‘mature’ novels of the 1810s are nearer 3,500.However sceptical we might like to be about periodisation, and nasty but inevitable grand narratives, it’s observable that history has, well, happened; historical experience makes ‘norms’ normal, and it is potentially why – to return to Davis’ question with which I began – more people still read Austen for pleasure than Smollett, Fielding, Defoe, or, um, John Bunyan. Not unrelatedly, I recently invited some students to read paragraphs from the fourteenth, fifteenth, sixteenth, seventeenth, and eighteenth centuries (respectively, Margery Kempe, Edmund Spenser, Margaret Cavendish, Eliza Haywood, and Sterne: I welcome criticisms of my selections) and one of them said, in so many words, ‘Perhaps some things are forgotten for a reason.’ Perhaps. But we might also wonder: to what extent do novels instruct their readers in how to think, feel, and act? This has been one of the questions that Dames has posed most insistently across his career, with a special emphasis on the contributions of the Victorian novel to readerly subjectivity. At the end of Amnesiac Selves, he speculates on the way that Victorian fiction inculcates a special kind of nostalgia – its warm selective memory is the flipside of the alienating nausea of the historical difference that makes you want to throw a book out the window (or, in homage to Sterne, down the stairs). Yet, as Dames noted then, the cultural prestige of Victorian fiction is ‘increasingly seen in an elegiac manner, as a strange fact that, as the twenty-first century begins, will not last much longer’. As the nineteenth century disappears further and further from view, ‘the Victorians will eventually, if belatedly, make Victorian fiction stranger and less attractive’. Since the publication of Amnesiac Selves in 2000, the Victorians have only receded further away from us in time.It was the Victorian novel that made the chapter seem natural. Key to the reality effects of nineteenth-century British fiction is its synchronisation of novel time with the natural rhythms of life. As a result, novelistic chapters lose their theatrics, their posturing and posing, even those unstable amalgamations surveyed in Equiano and Goethe, and instead become regular and ‘tacit’, receding into the background. It is this very tacitness that secures the permanence of the chapter as a blank, unmarked, and ordinary vehicle for reflection. Surveying Tolstoy’s War and Peace (1867), Dames distils the repertoire of the chapter into another taxonomy of five key functions: the signal or incantation; the crossing of a threshold; the ‘suspended revelation’; the ‘tense use’, which adjusts the temporal frame of narration; and the modulation of point of view. Together with Elizabeth Gaskell – whose Wives and Daughters (1864-66) is shown virtuosically to assemble all five of these ‘tacit’ operations, in a careful and naturalistic counterpart to the brazen theatrics of Sterne – the chaptering of Tolstoy presents a study in indistinctness.Perhaps the most ‘natural’ scheme for novelistic time is that of the day itself, which is what Dames shows to be at work in Charles Dickens and George Eliot, calling this the ‘suturing of story world and reader […] an alignment of times, a synchronization of light’. Epic heroes lived in a time supercharged with meaning – the time of kairos, or propitious instant of action, not the dun-coloured chronos, the everyday time of housework, care work, and all the other kinds of work. In contrast with epic, then, the diurnal frame of novelistic realism appears definitively chronological and quotidian – but it is, of course, a complex literary artefact, one that Dames explores using some old-fashioned counting. There are 146 narrated days in Middlemarch, though the novel covers some 1,000 days. That means around 15% of the total ‘days of our lives’ are narrated; of these, only 18 ‘peak days’ are extended over two chapters. If, in the time of Goethe and Equiano, the coordinates of day, chapter, and epoch fell helplessly out of joint – the chapter form desynchronised from life by historical forms of dislocation – it is the innovation of Eliot’s realism to realign life with text: ‘Neither wholly impersonal and public like the “day” nor intimately personal like the epoch, chapter time is, perhaps, something like an image of weak collective time’. Weakness is an important term, capturing the chapter’s ignorable yet undeniable presence – just like time itself – which is nonetheless experienced collectively. It also calls to my mind Walter Benjamin’s famous evocation of the ‘weak messianic power’, the spark of redemption glowing however faintly in the present. There is something of that melancholia in this history too. As Dames wonders, ‘When you share time, what is it you share?’ A book? A memory? A moment? Or perhaps one shares nothing, for the whole point of fiction is that it is invented, nonactual, negative. The reader of a novel, as Benjamin put it, ‘is isolated, more so than any other reader’. Reading of fictional lives becomes a way of experiencing death before it happens to you: the characters in a novel make its reader ‘understand that death is already waiting for them’. In novelistic time, therefore, one feels in the fate of fictional beings the ‘warmth which we never draw from our own fate’. If chapters become, by the twentieth century, simply ‘embarrassing’, subject to two equal but opposing modernist processes – autonomisation (à la Joyce’s almost freestanding stylistic excursions) or decimation (as in Samuel Beckett where it is obviated entirely) – these new formal strategies do not get around the fundamental matter of finitude that is immanent to the chapter as a vehicle of time. A key transitional figure here is the Brazilian novelist Joachim Maria Machado de Assis, whose experimental fiction of the late nineteenth century seems to repudiate the tacit chaptering of realism in favour of something more akin to Sterne. Yet in Machado’s hands, the ‘Shandean chapter’ is no longer free-wheeling and free-associative, but decisively bound: if Tristram struggled to bring forth the story of his birth, the eponymous narrator of The Posthumous Memoirs of Brás Cubas (1881) is already dead. Speaking from beyond the grave in radically attenuated chapters, Brás Cubas adds a new note of disillusionment and pessimism that Dames calls ‘antique-diminutive’.The diminution – decline? – of the chapter continues in twentieth-century avant-garde fiction and film: The Unfortunates (1969), by the British novelist BS Johnson, is not bound in a codex but rather packaged up as so many loose sheets in a box, becoming as a result a literal ‘box of time’. Consider, too, the ‘antique’ and self-conscious quality of the onscreen chapters in Agnès Varda’s film Cléo from 5 to 7 (1962), tracking its protagonist minute by minute as she awaits the results of a cancer test. For all their apparently lively experimentalism, all three of these cases finally return to the negativity that attends the ‘linguistic organization of temporality’. Machado’s novel is narrated by a dead man; Johnson’s book in a box is about a dead man; Varda’s Cléo receives omens of death: these are texts ‘by, for and about the dead or dying’. Dames refers to these as expressing the ‘poignancy of sequence’, a term that names ‘the sensation of an end indefinitely, but only temporarily, held off’. This finally is ‘a melancholy purpose: to keep something going – a life, a form, a moment – just a little longer’. The chapter, then, not as inns on a journey, but halting steps towards the end.Right at the beginning of the book, Dames recalls the remark of a ‘gifted analyst’ some years ago: ‘You’re starting a new chapter.’ Dames writes that this comment made him feel – quoting the psychoanalyst Donald Winnicott – ‘held’. It also spurred the research and writing of this book. Although his analyst’s offhand ‘novelization’ of his life seemed perfectly to capture the subjective experience of temporal passage, Dames could not explain why it had this comforting effect on him. Despite being a ‘novel reader,’ he ‘had no idea why chapters existed – a historical question – nor what exactly they did to our sense of time, a theoretical question’. Guided by these questions, his journey backwards in time terminates in the continuous present with the novels of Uwe Johnson, Jennifer Egan and László Krasznahorkai. There is a chapter in Egan’s novel A Visit From the Goon Squad (2010) that is presented in the form of a PowerPoint presentation on ‘Great Rock and Roll Pauses’. This is a ‘chapter on chapters,’ Dames notes, in the manner of Sterne but relocated into a wholly changed technological environment. These slides – presented in the novel by a twelve-year-old girl named Alison about her family – represent for Dames an effort to ‘understand the feeling of time passing, a feeling that is shaped by media’. If the project of The Chapter has been to coordinate the feeling of time passing with the changing mediations of that feeling, then it is perhaps unsurprising that one of the prevailing feelings in this study in turn is its melancholia, its very nearly depressive turns towards the experience of temporal passage.It is also significant, I think, that a history concerned with the objective features of literary history has an important but just-visible subjective dimension – significant, that is, that the book began on the couch in analysis. I was struck, reading The Chapter, by its minimal but insistent evocations of finitude. This is a history of the novel that is partly a history of its death. In this respect it complements Dames’ other books that have told this story from a different angle, as when, in The Physiology of the Novel, he writes of George Gissing’s ‘depressive’ and ‘ambivalent’ relation to the novel form in an era of speed reading. ‘In many ways,’ Dames adds, ‘that depressive position has lingered for readers, writers, and critics of novels, to our own day.’ It has – and it perhaps accounts for the alternatingly depressive and wistful tenor of The Chapter, which reconstructs its object from the position of its catastrophic obsolescence. But Dames is not moralising about the decline of the novel or of the reading public. The conclusion of the study refuses any of what he has termed ‘the morality of attention’, remarking that even if the chapter is dispersed across ‘different media that weave in and out of the format of the book, [it] can express the disjuncture of time itself’ – the ‘disjuncture’, that is, between ‘our’ lives and any of the ‘rhythms – biological, cultural-economic, political, planetary – we live among but cannot manipulate’.Yet I think this argument must be evaluated in light of the earlier claim in The Physiology of the Novel that one of the vulnerabilities of Victorian physiological theory was its transformation of readers and texts into technologies: ‘The more its findings turned both novel and reader into machines, the less necessary (or, for that matter, interesting) its procedures seemed, and the more ancillary to other technologies the novel became – a melancholy conclusion that cut short some of the theoretical innovations that the theory had promised.’ If in The Physiology of the Novel Dames was ‘implicitly arguing for the viability of an updated, historically aware version’ of nineteenth-century physiological theories of reading, then The Chapter strikes me as a now-explicit attempt to realise such a theory. In it, Victorian novels stand as the apex of a kind of felt and intuitive ‘chronocommunity’ in which picking up a triple-decker was a reliable way to plug into the interface of temporality that everyone shared. That now is perhaps lost, and the historian’s effort at understanding the genesis of a technical object like the novelistic chapter could be seen as some small recompense – for the lost ‘weak collectivity’ of an earlier period, but maybe, too, for the fearful lack at the centre of all reading. It is difficult not to think of this in Dames’ closing evocation of the chapter’s dispersal across the mediascape. That is, the ‘technical’ question of The Chapter serves to absorb a more basic anxiety: not only about the demise of the novel, but rather about the emptiness at the heart of reading itself.I think here of Maurice Blanchot’s essay ‘Literature and the Right to Death’ (1949) – translated, as it happens, by Davis, albeit in a more traditional manner – in which Blanchot writes of finitude as the inescapable meaning of literature. Language kills, and literary language most of all: ‘Language can only begin with the void,’ he writes, ‘no fullness, no certainty can ever speak; something essential is lacking in anyone who expresses himself.’ Questions like ‘What is literature?’ have received ‘only meaningless answers’ insofar as they fail directly to confront this negativity. ‘People can and do ask, “What is poetry?” “What is art? And even “What is the novel?”’ – but for Blanchot it is in the ineradicable ‘emptiness present in all these serious things’ that the impossible centre of literature consists, that empty heart ‘to which reflection, with its own gravity, cannot direct itself without losing its seriousness’. Another way of saying this is that The Chapter seems to me most fully to grasp its subject not when it considers the historical or technical question of chaptering, but when it turns from this to the lived experience of time, in which the collapse of literature as such figures the collapse of everything else. Perhaps the function of ‘the chapter’ in The Chapter is not so much a ‘point of departure’ as Auerbach once imagined it – in his phrase, a ‘handle […] by which the subject can be seized’ – but rather a point of return: an obsession, an idée fixe, or, in a more Freudian vocabulary, a reaction formation to the anxiety attending time’s ceaseless passage. Viewed in this gloomy half-light, it is possible to see how the most moving parts of The Chapter are those rarer moments in the subjective register that look right into the void at the centre of literary experience. It is, after all, to escape this emptiness that we write in the first place, even as the act of doing so can only return us to it.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The space race is transforming Southern California's economy – again]]></title>
            <link>https://www.latimes.com/business/story/2025-08-28/how-the-new-space-economy-is-transforming-southern-california</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45077345</guid>
            <description><![CDATA[Aerospace companies are sprouting all across Southern California, breathing new life into an industry that once powered the regional economy.]]></description>
            <content:encoded><![CDATA[ In a giant Long Beach warehouse near where Boeing used to build the C-17 cargo jet, Vast is fabricating what could be the first commercial space station to circle Earth.Just up the road in El Segundo, Varda Space Industries has grown molecular crystals in microgravity with few impurities for pharmaceuticals that one day could be injected in cancer patients.And a little south in Seal Beach, a scrappy company called AstroForge aims to land a satellite on an asteroid just a football field wide and mine possibly billions in platinum riches.The companies aren’t anomalies but rather three examples of Southern California’s growing space economy, which shrank after the Cold War but is being revitalized with a new wave of startups pushing technological boundaries.Southern California has an illustrious aerospace heritage, starting with some of the first rocket experiments at what was to become the Jet Propulsion Laboratory — with the region later producing the X-15 rocket plane, the Apollo capsule and the space shuttles.Today’s innovators are following in the flight path of a relative newcomer: Elon Musk’s SpaceX, which set up shop in El Segundo in 2002 to draw on the region’s deep engineering talent and successfully pioneered the development of low-cost reusable rockets. Though the company has since moved to Texas, its main operations remain in Hawthorne and many of the new companies have been founded by SpaceX alumni — or are reliant on its Falcon 9 workhorse rocket, which recently surpassed 500 launches. “The massive drop in the cost of getting mass into orbit, and the frequency with which they do launches ... is almost exclusively due to SpaceX,” said Andrew Sather, a partner at Initialized Capital, a San Francisco venture capital firm that invested in AstroForge.Some 128 aerospace, artificial intelligence and companies in other fields have been founded by former SpaceX employees — with 96 started in the last five years still in operation, according to the alumnifounders.com website run by a San Francisco tech executive.Nearly half, or 63, were founded in Southern California, including 20 in aerospace. No other region comes close, including Silicon Valley or the Pacific Northwest, where Jeff Bezos’ Blue Origin rocket company is based in Kent, Wash. Some companies just come to the region to be close to the same talent pool and aerospace manufacturing base that first attracted SpaceX. Rocket Lab, which launches small satellites, was founded in New Zealand but moved to the region in 2013 and opened new headquarters in Long Beach in 2020.And it’s not just the contrails that reflect the region’s rebound — it’s also the money.                      A view of the entrance to SpaceX in Hawthorne on Dec. 19, 2018. Though the company has since moved to Texas, its main operations remain in Hawthorne.    (Los Angeles Times)       Some of Silicon Valley’s leading investors have placed bets here, including Khosla Ventures, Andreessen Horowitz and Peter Thiel, whose Founders Fund was the lead investor in a June $2.5 billion funding round for Anduril, a Costa Mesa maker of drones and other autonomous defense systems now valued at $30 billion.A forthcoming report by the Los Angeles Economic Development Corp. shows the county’s aerospace and defense industries added 11,000 jobs between 2022 and 2024. While those 58,700 plus total jobs are well below the historic peak, they had an average wage of $141,110 — more than twice the county average. “A lot of folks have kind of made the assumption that the aerospace and defense industry has left the entire region,” said Stephen Cheung, chief executive of the organization. “What they didn’t see is a lot of the manufacturing was still here, and over the last 10 years, you’ve been seeing this transition into space commercialization, and now that’s stimulating a whole new ecosystem.”A new ecosystemConsider the ambitions of Vast. The Long Beach startup wants to build a replacement for the most expensive object created by humanity: the $150-billion International Space Station, which is being retired in 2030 after three decades in orbit.The football field-sized vehicle was the product of 15 nations, while the privately funded Vast is spending a fraction of that amount to launch its first small station next year, which it hopes will convince NASA to choose it over Blue Origin and other fledgling competitors to replace the ISS.It might have a leg up with its SpaceX connection. Its Haven-1 space station is designed to fit in the nose cone of a Falcon 9, while the astronauts would be ferried up later in a SpaceX Dragon capsule.                      A space station component at Vast in Long Beach on Aug. 21. The aerospace company is designing and building the commercial space station Haven-1 at its headquarters in the city.   (Allen J. Schaben/Los Angeles Times)       Still, the startup has a long way to go.“To become a proven space station company, we need to build one, launch one, and we need to have a crew visit it and come back home safely,” says Max Haot, an aerospace entrepreneur named chief executive in 2023 by founder Jed McCaleb, who made his fortune in cryptocurrency and is spending at least $1 billion on the venture.The company started in El Segundo in 2021 with just a few dozen employees, many of whom worked at SpaceX. It now has close to 1,000 and a recently expanded 189,000-square-foot headquarters complex — in the same Long Beach neighborhood where Boeing built the C-17 Globemaster cargo jet before that line was shut in 2015. Faced with such a huge loss, Long Beach rezoned the neighborhood to attract advanced manufacturers such as aerospace companies,  which now total about 30 across the city, including headquarters and major operations. Among them is Relativity Space, a startup founded the same year the C-17 line shut down, that has developed 3-D printed rocket engines to further cut launch costs. The potential attracted billionaire Eric Schmidt, the former Google chief executive, who this year took over the business.“At the end of the day, companies want to be around other companies where employees can bump into each other at the coffee shop,” said Long Beach Mayor Rex Richardson. “We’ve prioritized bringing these companies because they bring higher-quality jobs.” Last week, in Vast’s manufacturing building, a machine tool was precisely cutting flat aluminum pieces for the shell of the spacecraft, forming a honeycomb pattern that provides strength but at a lower weight. At other stations, avionics and life support systems were being tested.“If you look at it, it’s very simple; not only is the talent all here ... but we rely on a lot of partners to manufacture and process parts. There’s just an incredible amount of local facilities and skills that you need to build space systems,” Haot said of the area.                     The Haven-1 space station model on display at the headquarters of Vast aerospace company in Long Beach on Thursday, Aug. 21, 2025.   (Allen J. Schaben/Los Angeles Times)       Testing pharmaceuticals in spaceVast’s first headquarters was in El Segundo, and that’s not just happenstance. The city has long been a favorite for aerospace companies and it’s where SpaceX opened its original headquarters on East Grand Avenue — before it moved when it needed more space.Will Bruey, a former SpaceX avionics engineer, was recruited by a Bay Area venture capitalist in 2020 to co-found a microgravity pharmaceutical developer called Varda Space Industries. He had a choice of where to set up shop — and the decision was easy. Bruey, 36, wrote a computer program to scrape recruiting websites such as LinkedIn and found the city had more of the aerospace, electrical, structural and mechanical engineers that he needed than any other place. “El Segundo was at the peak of the heat map — all the engineering you need,” said the chief executive. Varda now employs more than 140 and has attracted $329 million in venture capital. It’s on its fourth mission and has become the first startup with Federal Aviation Administration approval to return commercial payloads from space.The company makes automated labs the size of a cylindrical desktop speaker that it sends up to orbit in capsules and satellites it also builds. There, in microgravity, the miniature labs grow molecular crystals that are more pure than those produced in Earth’s gravity. The concept was proven in 2019 by Merck in an experiment done aboard the International Space Station, and Varda partners with pharmaceutical companies to grow crystals for drugs to combat cancer and HIV. A purer drug formulation, for example, could allow an IV-based infusion to be replaced by a small injection.“What we do is we take molecules that are known to be effective in the human body, and we can create new formulations that otherwise would be impossible,” Bruey said.The fast-growing company operates out of a 61,000-square-foot building not far from the Los Angeles Air Force Base, which develops, tests and maintains military satellite constellations. It also recently signed a lease for 10,000 more square feet nearby for lab space focusing on its drug development. The metamorphosis of the city into a haven for aerospace startups is exemplified by the transformation of the Smoky Hollow neighborhood — so named because it once was notorious for the gas clouds that settled in the area from the adjacent Chevron refinery.Once populated by small shops that serviced the refinery, today it’s cleaned up and the home of aerospace and advanced manufacturers — helped along by fiber-optic cable the city had  telecommunications providers install.“That is one of those magical points in time that really flipped the switch on that area for an innovation economy enabled by technology,” said Mayor Chris Pimentel.                     Workers assemble a space capsule at Varda Space Industries in El Segundo.    (Varda Space Industries)       Mining minerals from asteroidsIf Varda’s goals seem ambitious, other fledgling companies have plans that seem even quixotic.One of them is AstroForge, a three-year-old Seal Beach firm whose ambitions aren’t even captured by the phrase “moon shot.” It’s aiming to mine metals from a type of asteroid with high concentrations of platinum.Co-founder and chief executive Matt Gialich knows the idea sounds fantastic but said SpaceX faced the same skepticism. “Whenever you see a technological shift that has not been done before, it’s always going to seem like science fiction,” said the 39-year-old former Virgin Galactic avionics engineer.NASA actually has already landed a spacecraft called OSIRIS-REx on an asteroid and dropped off a small sample of material back to Earth two years ago. But that scientific mission cost taxpayers some $1.2 billion, while AstroForge has raised just $60 million and prior asteroid mining startups such as Planetary Resources never got off the ground.AstroForge’s last mission to take high-resolution asteroid images failed when it lost contact with the probe, but Gialich is pushing ahead with a more challenging mission next year to complete a landing.“If we depart from Falcon and we never turn on and never make contact with the spacecraft, I think we go bankrupt as a company, and we probably deserve to,” he said. “If we make it all the way to the asteroid and it’s the wrong type of asteroid, I think we’ll have no problem raising a huge amount of additional capital.”    More to Read          ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Are we decentralized yet?]]></title>
            <link>https://arewedecentralizedyet.online/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45077291</guid>
            <description><![CDATA[A site with statistics regarding the decentralization status of various web services]]></description>
            <content:encoded><![CDATA[
      How Concentrated Is User Data On The:
      
        Fediverse
        Mastodon, Pixelfed, etc.
        
        
            Servers
            Biggest(%)
            Rest(%)
        
      
      
        Atmosphere
        Bluesky, WhiteWind, etc.
        
        
            Servers
            Biggest(%)
            Rest(%)
        
      
      Data last updated: 
    
      
        This page measures the concentration of user data on the Fediverse and the Atmosphere according to the
        Herfindahl–Hirschman
          Index (HHI),
        an indicator from economics used to measure competition between firms in
        an industry.
        Mathematically, HHI is the sum of the squares of market shares of all servers.
      

      
        Values close to zero indicate perfectly competitive markets (eg. many servers, with users
        spread evenly), while values close to 10000 indicate highly concentrated monopolies (eg.
        most users on a single server). In economics, values below 100 are considered
        "Highly Competitive", below 1500 is "Unconcentrated", and above 2500 is
        considered "Highly Concentrated".
      

      
        This site currently measures the concentration of user data for active users: in the
        Fediverse, this data is on servers (also known as instances);
        in the Atmosphere, it is on the
        PDSes
        that host users' data repos.
        All PDSes run by the company Bluesky Social PBC are aggregated in this
        dataset, since they are under the control of a single entity. Similarly,
        mastodon.social and mastodon.online are combined as they are run by the
        same company.
      

      
        The location of user data is not the only interesting measure of 
        centralization. On a technical level, there is the network
        structure (peer to peer, relays, etc.), identity management, the
        infrastructure on which it is hosted, etc. On a legal level, there are
        issues regarding the jurisdictions where servers are located, companies
        are located, etc. On a social level, there are issues around where
        human power is concentrated in and on the platform, and whether that
        power is disproportionately held by certain groups. If you would like
        to help contribute other measures of decentralization, get in touch.
      

      
        Code and data are available on
          GitHub.
        Comments and pull requests, including other metrics for measuring
        distribution and resiliency, are welcome!
      

      
        By Rob Ricci: @ricci@discuss.systems / 
            @ricci.io 
      

          
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Anduril: Amusement Park for Engineers]]></title>
            <link>https://joincolossus.com/article/the-amusement-park-for-engineers/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45077209</guid>
            <description><![CDATA[An exclusive peek behind the curtain of Anduril's product engineering machine]]></description>
            <content:encoded><![CDATA[
                        
This article features first-ever photos taken from inside Anduril’s R&D facilities in Costa Mesa, California. All photos by Ryan Young.







On a Saturday afternoon in April 2024, I was on the rooftop pool deck of a Marriott hotel, setting up radar equipment aimed above the Hollywood Hills in Burbank, California. My five-year-old son, still damp from swimming, darted around as I calibrated the system.



“What are you doing?” he asked, touching the electronics with wet hands.



“Tracking … flying objects,” I said, carefully moving his hands away from the sensitive equipment. “It’s a special radar that will help our drones find targets better.”



Working on a thousand-dollar radar that could potentially transform a landmark missile platform during a father-son weekend was fairly typical in those days. The technology that my son wanted to touch, and which other poolside guests gawked at, was a throwback to the AGM-114 Hellfire missile system from the 1960s—a simple direction finder that could be guided by a ground system that paints targets with radio frequency (RF) instead of lasers. If we could get this to work, we could reduce the cost of our Roadrunner system—a reusable, twin-turbojet, vertical-takeoff-and-landing microfighter—by 30x.



Between trips to the pool and Chick-fil-A, I eventually managed to collect enough data to prove the concept worked: We could detect aircraft at 10 kilometers with a thousand-dollar sensor. It was the kind of breakthrough that could change how we approached reusable weapons and low-cost solutions for air defense—an ongoing R&D project I remain consumed by.



It wasn’t company-sanctioned work. I was officially on family time, having left Anduril as SVP of Engineering the month before to start a robotics company, Physical Intelligence (PI). Yet Anduril was never just a job; it was part of my identity. My badge still worked, I continued on in an emeritus role, and I still spent around 15 hours a week working with the engineering team I’d helped build.



When I joined Anduril in the fall of 2018, I was employee #20, the company was valued at $250 million, and we had lofty, but hypothetical, ambitions of reinventing the defense ecosystem. Less than six years later, the 4,000-person, $28 billion company has deployed 30-plus products with thousands of fielded systems, and changed the arc of American defense technology. It’s worth looking back now at those years of explosive growth, in order to give other founders, engineers, investors, operators, and everyone else a glimpse of what zero-to-one at Anduril was actually like.



        
            
            

            
                            Team member welding in Anduril’s R&D prototyping shop.
                    

    



    




I’ve always been drawn to the kind of science that translates into strategic impact, and to problems too dangerous to ignore. After studying at MIT, I worked on flood disaster relief in Pakistan, then became a founding engineer at a biotech startup developing affordable genome sequencing technology. When the company was acquired, I left for Tesla, where I worked on projects from the Falcon wing doors in the Model X to electromechanical architectures, autopilot sensors and advanced technologies enabling future vehicle platforms. It was cutting-edge work with one of the most innovative companies in the world, and I was genuinely happy there.



A coffee in July 2018 with Anduril’s founder Palmer Luckey changed everything. What was supposed to be a quick 30-minute chat turned into a six-hour conversation that made it impossible for me to go back to Tesla. These were the days when supposedly bleeding-edge work in Silicon Valley was still largely dominated by consumer apps and services. By contrast, the picture of the world that Palmer drew kept me up at night.



While the threat from China wasn’t yet front-page news, Palmer and his team had already recognized the need for better defense technology to deter a great power conflict and to maintain American hegemony. They understood that America’s technological edge in defense was eroding, and that traditional defense contractors were too glacial and bureaucratic to meet the challenge—a culture I’d previously witnessed firsthand (and had forever sworn off) during an internship with an aerospace manufacturer.



I was struck by the Anduril team’s strategy of developing defense products on its own dime and selling them off-the-shelf, turning the traditional business model of defense contractors on its head. I was also impressed by their choice to build the company in Southern California, deliberately removed from Silicon Valley. My coffee with Palmer came only a few weeks after Google canceled Project Maven, which would have assisted the Department of Defense with AI-based drone-footage analysis. When I eventually told colleagues at Tesla that I was leaving to join a 20-person defense technology startup working out of a hangar near Santa Ana airport, they looked at me like I was insane.



        
            
            

            
                    

    



    




Click here to subscribe to print for your office or home.



    




When I joined the company in September 2018, we worked out of a small building at 3000 Airway, then expanded into hangar B8, which was adjacent to a dog kennel at the Santa Ana airport. There was no heating or air conditioning, just incessant barking. I claimed a closet that received a little heat through proximity to another part of the building. That became my lab.



On my first day, I found myself back at MIT, on stage beside Palmer, explaining our vision to skeptical engineering students confused why anyone would work in the defense sector. By the end of that same week, I was on the southwest border installing one of our pilot systems, a surveillance tower. It wasn’t the polished product defense contractors typically wait to unveil—in fact, our first tower was literally a telephone pole with a gaming PC housed in a weatherproof box, a pan-tilt unit normally used as stage lighting, with spikes on it to prevent bird shit from blocking the sensors. A lot of it came from Home Depot.



That makeshift tower, which we built on our own dime to prove what was possible, helped intercept nearly 1,000 pounds of marijuana and led to dozens of drug trafficking arrests—ultimately earning us a pilot program with Customs and Border Protection. It was primitive, but it worked, and reflected our approach: get to a minimum viable demonstrator, something that creates end-to-end capability, then iterate ruthlessly. By then I understood that Anduril would be the fastest, most intense environment I’d ever experienced.



A few days each week, we’d pile into vehicles and drive to our test site in Apple Valley—a remote California desert location where temperatures reached 110 degrees on summer days, then dropped to 30 at night. We stayed in the cheapest hostel-like accommodations we could find and worked 16- to 18-hour days in complete isolation from distractions. We operated out of dusty trailers with minimal equipment. If something broke, we couldn’t just order a replacement part—someone had to drive 200 miles back to Santa Ana, rebuild the component, then drive 200 miles back.



Brian Schimpf, Anduril’s co-founder and CEO, functioned as our chief engineer, with an intuitive understanding of how every component fit together. Brian shaped our strategy and had a remarkable knack for pulling together engineering pieces and connecting them to business outcomes. When obstacles appeared, the other founders would come up with a strategy to unblock the engineering so Brian could focus on solving technical challenges—like the time co-founder and COO Matt Grimm chartered a plane in order to fly oversized batteries across the country for a critical demo.




Our first tower was literally a telephone pole with a gaming PC housed in a weatherproof box, a pan-tilt unit normally used as stage lighting, with spikes on it to prevent bird shit from blocking the sensors. A lot of it came from Home Depot.




Even in those early days, the company was single-minded and self-selecting. No one cared about meetings or performance management or building a well-rounded company. We lived and died by our ability to quickly fire a “tracer bullet” through the heart of each problem, illuminating a clear path to the full solution.



It was a bad day when we’d be testing a quadcopter drone and it would crash a couple of kilometers from the takeoff zone. That seemed to happen most often at night or on weekends at the Capistrano Test Site (CTS), an environmentally protected zone of beautiful rolling hills, where we had to recover every scattered bolt by hand. At 2am, we’d be searching in the middle of the cactus brush for a drone that had fallen out of the sky.



We came up with creative solutions, like gluing glow sticks to the “birds” (our word for drones) so we could see them in the dark, or putting beepers on them so we could hear where they landed.



        
            
            

            
                            Anduril’s first surveillance tower, with spikes to prevent birds from relieving themselves on the sensors and gaming PC.
                    

    



        
            
            

            
                            Early radio frequency (RF) chamber, purchased on eBay.
                    

    



    




Like diamonds, all great products are born from heat and pressure. Consider the Tesla Model 3: The battery engineers pushed for maximum energy density; the chassis team insisted on minimal weight and thickness; and the safety team required uncompromising crash resilience. Each group had conflicting demands, yet this friction ultimately yielded an exceptional battery pack—powerful, efficient, and safe. No stakeholder was completely satisfied, but through that creative rigor and tension, something extraordinary emerged.



The same was true at Anduril, where an additional layer of pressure came from the international political reality. America’s adversaries evolve tactics in weeks, and the company had to operate with that same urgency. We couldn’t deliver solutions in years—we needed to prototype, test, and deliver in months or weeks. Each product therefore had to embody our chief working principles: move fast with purpose; question everything; take ownership; keep it simple; hold high standards; and design with deployment in mind.



One of the first products I worked on was our counter-drone interceptor, Anvil. This was important because the US government had spent billions of dollars on counter-drone technology with limited success—in some cases, they were literally training falcons (real birds in this case) to take down drones, or using Patriot missiles costing millions of dollars to destroy $500 quadcopters. The inefficiency was absurd, but the problem was serious. In 2018, a rogue drone shut down London’s Gatwick Airport for two days, and they were being used on the battlefield more and more.



We had a simple idea: What if we just used a quadcopter to crash into another quadcopter? Our first prototype used an Intel RealSense camera to look up and fly into targets. The approach was primitive—if the target moved, we’d miss—but at a bake-off at White Sands Missile Range, our system successfully intercepted targets about 40% of the time, while competitors had single-digit success rates.



The government customer was in shock, but to us, a 40% hit rate was nothing to dine out on. They quickly deployed our solution as a stopgap overseas, which created pressure to improve, because the system could fall short in the field: the cameras and sensors couldn’t reliably detect targets due to glare or clouds, and our guidance system was too basic.



We had three months to stop the bleeding, and I spent my paternity leave developing a 3D radar system. I realized we could leverage the same radar technology used in self-driving cars, build an RF frontend with a non-uniform antenna, and create our own algorithms for terminal guidance instead of collision avoidance.



In three months, we went from a 40% kill probability to knocking out 35 of 35 targets. There wasn’t a quadcopter you could throw at our mechanical bird that it couldn’t take out. We even hired one of the top First Person View (FPV) drone pilots to try to evade our system. Anvil caught the drone every time.



As Elon would often say at Tesla, “If the schedule is long, it’s wrong; if it’s tight, it’s right.” Speed was our weapon. Even our recruitment process reflected this: We’d openly talk to candidates from defense contractors and show them around our facilities, confident that we were moving faster.



        
            
            

            
                            “Our first prototype used an Intel RealSense camera to look up and fly into targets. The approach was primitive—if the target moved, we’d miss—but at a bake-off at White Sands Missile Range, our system successfully intercepted targets about 40% of the time.” Anvil V1.
                    

    



        
            
            

            
                            Repairing the bistatic radar seeker with a soldering iron in the electrical engineering R&D lab.
                    

    



    




We paired speed with another key principle: question everything. This meant engineering from first principles—breaking down every problem into physics, math, and operational reality, then building solutions from there.



In 2019, the US Air Force wanted to explore new solutions for detecting low-altitude cruise missiles—a critical capability with threats from Russia and China that could penetrate our borders. The official requirements for the Advanced Battle Management System (ABMS) program called for a radar with high azimuth and elevation accuracy and full hemispherical coverage, which would mean multimillion-dollar systems.



But no air defense radar manufacturer wanted to sell to us—some because we were a small no-name company, others because they wanted to capture the full value of delivering their own systems, still others because they saw Anduril as a potential future competitor. We needed to create our own solution, but traditional radar development takes years.



Instead of taking the Air Force’s brief at face value, we asked: “Why do they need hemispherical coverage? What’s the actual threat?” The primary concern was low-altitude cruise missiles coming across unprotected territory, which meant we only needed to cover the first few degrees above the horizon, not the entire sky.



We modified a $5,000 commercial boating radar—the spinning “candy bar” type you see on fishing vessels. Boat radars are designed to detect small objects far away on water, but not in the air. By modifying the waveguide assembly to create a narrower beam, we concentrated more energy in a specific direction and extended the range by about 10x.



When we showed up to the bake-off with our cheap modified boat radar mounted on a rickety welded truck, competing against traditional defense contractors with multimillion-dollar systems the size of a shipping container optimized for 360-degree hemisphere coverage, the other attendees laughed.



Yet we won. We understood what the customer needed to accomplish, but mostly ignored what they thought they wanted in their requirements. Our system could be scaled along any border as a true cruise missile detection network at a cost that was orders of magnitude lower than traditional solutions.



        
            
            

            
                            Inner guts of a tower assembly.
                    

    



        
            
            

            
                            The author flying the Anvil V3.9.
                    

    



    




Every project at Anduril had a directly responsible individual (DRI)—a single owner accountable for the outcome from end to end. Sometimes ownership meant taking extraordinary measures when the stakes were high.



One of the most dramatic examples arose at a critical test for a US defense customer of our V2P interceptor drone—a quadcopter that could fly at 150 miles per hour and intercept other drones with impressive accuracy. This was a billion-dollar contract opportunity that could transform Anduril from a border protection startup into a serious defense company.



V2P was an evolution of our Anvil system. After successfully developing Anvil to intercept small quadcopters, we discovered a much bigger threat emerging: larger Group Two and Group Three drones. The former are often used for intelligence reconnaissance and surveillance missions, and the latter with larger payloads and longer ranges. Countries like Iran were developing the Shahed series—massive drones that could carry substantial explosive payloads and fly kamikaze-style into bases.



Anvil was already successful, but it wasn’t designed for these larger targets. It needed a complete overhaul: more speed, better guidance, and enhanced durability.




We lived and died by our ability to quickly fire a “tracer bullet” through the heart of each problem, illuminating a clear path to the full solution.




Over three and a half months, we developed the V2P. We redesigned the propellers, motors, and the entire power architecture, which pushed the boundaries of what a small drone could do.



The result was unheard-of: a 5.2 kilogram vehicle that could achieve a speed of 147 miles per hour. (The world-record quadcopter at the time weighed 800 grams and did 173 mph). More impressively, it maintained sub-degree accuracy on pitch, roll, and yaw, even at steep angles of attack, where quadrotor dynamics become extremely challenging.



As a US defense customer’s Systems Integration Partner (SIP) competition approached, we needed to build 50 drones. One of our lead engineers from the test team and his co-worker came in on a weekend and built 28 complete vehicles in a single day—a feat that would have taken weeks through conventional processes. In total, they built 53 vehicles in 14 days, test-flying each one three times while I analyzed all the flight logs in real time. When we arrived at the competition, our competitors showed up with elaborate, expensive systems that had been years in development. Our V2P interceptor dominated the event. It destroyed 30 targets with extra interceptors to spare.



The highlight came on the evening before the last day of the bake-off, when US government officials asked if we could take down a far bigger Group Three aircraft—much larger than our system was designed for. With our existing approach, the V2P would simply bounce off such a large target. But we had a potential solution: radar firmware that could identify propellers through micro-Doppler signature and target them specifically. The night before the upcoming test round, we needed to finish writing the updated firmware and flash all of our drones with it.



At 3am, the same lead engineer who built 53 vehicles in two weeks went down to the hotel room where the drones were stored and proceeded to disassemble 18 birds. He took apart each radar, separated the processor and RF boards, hooked them up to his computer, flashed them with the new firmware, verified the changes, and reassembled everything. At 7am, he casually walked out as if he’d just woken up like everyone else, as the competing teams came down the elevators.



On the last day of the bake-off, our modified V2P took out the Group Three target on the first attempt, hitting it directly through the propeller. The entire room erupted in celebration.



That win was the cherry on top of a 200-person effort that ultimately secured a billion-dollar program of record for Anduril, transforming the company’s trajectory. It also exemplified the level of ownership we cultivated in our engineers—people who felt in their bones that they owned the outcome, and therefore cared so deeply about it that they didn’t blink at doing the kind of dirty work that their counterparts in other companies might consider drudgery.



This kind of approach is never without risk. But in our environment, we gave people agency and trusted their judgment. When a single engineer saw a 50/50 chance of success versus the near-zero probability with the original firmware, he made a call that changed Anduril’s future.



        
            
            

            
                            Team member building a Bolt for development testing.
                    

    



        
            
            

            
                    

    



    




Click here to subscribe to print for your office or home.



    




In engineering, simplicity is strength. At Anduril, we continuously asked what we could eliminate or simplify.



Consider the challenge of defending vast territories against cruise missiles. Conventional systems, like Patriot PAC-3 and NASAMS batteries, typically cost millions of dollars per installation. So we asked ourselves a simple question: What if we could create a forcefield of low-cost drones to intercept cruise missiles worth millions?



The concept seemed absurd at first, even to our team—the overmatch appeared too extreme. But we stripped the problem again to its fundamentals. Cruise missiles are fast, but they follow predictable flight paths. If we could accurately determine that flight path using two ground-based IR passive sensors (what we called Wide-Area Infrared System for Persistent Surveillance, or WISPs), we wouldn’t need expensive targeting systems on the interceptor itself.



We modified our Anvil drone to carry no sensors at all—the drone would simply position itself in the projected path of the incoming missile, aligning with where the missile would pierce our virtual “force field.” Despite the initial skepticism, we demonstrated the concept successfully, destroying a target that could fly an order of magnitude faster than our interceptor.



The beauty of this solution wasn’t just its low cost, but its elegance. We didn’t need to match speed with speed or complexity with complexity. We found the simplest possible point at which to intervene and disrupt the threat.



We applied this thinking to all our products, and constantly fought against feature creep. Most product managers naturally want to add capabilities—one after the next after the next. But we ruthlessly focused on the 20% of features that delivered 80% of the value, and made those exceptional.



        
            
            

            
                            A prototype compressor for Roadrunner turbojet development.
                    

    



        
            
            

            
                            Team member utilizing a 5-Axis DMG machine to make challenging parts.
                    

    







    




Yet there’s a line between scrappy and crappy. At an all-hands meeting a while back, one of our team members asked, “Why don’t we just build perfect products?” The answer reflected our core philosophy: We had an ethical obligation to get the best solutions into warfighters’ hands quickly. We could build one or two gold-plated systems over the course of years, or we could deliver 10 near-perfect solutions that actually make it to the field in a battle-relevant timeframe.



We were scrappy to the core, but we also had a very clear understanding of what “deployability” meant for each system. We were uncompromising about those standards while tolerating rough edges elsewhere. A disciplined approach to trade-offs allowed us to deliver capabilities that competitors with 10 times our resources couldn’t match. The key was attention to detail. Teams without a painfully clear understanding of what’s important have a bias toward frills, whereas we went after the aspects that delivered the most value to the warfighter—avoiding the classic mistake that sales-led organizations often make by building pretty products that fall short in functionality or usability.



To take one example, when we learned the Marine Corps was seeking a new loitering munition, we initially didn’t want to compete. The thinking was that a different company specializing in thermal imaging cameras and sensors had been working on this project for five years, and Anduril would simply waste millions of dollars trying to beat them.



Yet the opportunity for a competitive edge remained. Quadcopters usually flew slowly into targets horizontally and could be seen coming from far away. What we needed was a drone that could dive with such blistering speed that by the time you heard its scream, it was already too late … If we could come up with a game-changing new capability for top-down kills that would be much harder to anticipate, we could win.



I asked Raichelle Aniceto, my chief of staff, to procure the competitor’s drone, and within days, we had one completely disassembled in our lab. We hot-glued the components onto a trifold board using her wedding invitation kit. What appeared to be a science fair display nevertheless clearly demonstrated how each component was not only suboptimal, but dependent on multi-tiered foreign supply chains—and that we could build something lighter, faster, easier to manufacture, and more reliable, while de-risking tangled Chinese supply chains.




Like diamonds, all great products are born from heat and pressure.




But there was a catch—the Marines expected a product, not a proposal, and we had nothing more than a concept. We went a week without sleep to create high-performance renders, building life-like mockups, and drafting a technical proposal for a drone that didn’t yet exist.



The proposal was submitted 60 seconds before the deadline. We won the first phase, but now we had to actually build what we’d promised.



This became Bolt—a loitering munition that could precisely target ground vehicles. I saw it as a weekend project at first: take our existing drone platform, retrofit it with a vision seeker, and have it crash into ground targets instead of aerial ones. We created a quick demonstration video for a proposal and were one of the few companies down-selected.



As the project progressed and the stakes escalated, we learned that what worked for aerial targets wouldn’t work for ground targets. The team tried to apply the same guidance approach that worked for Anvil, but when diving at steep angles toward the ground, the drones kept missing by several meters.



During a critical customer demonstration, our bird completely missed its target. The room went silent. We knew we were at risk of losing a half-billion-dollar program milestone if we couldn’t fix Bolt quickly.



The engineering team tried applying more aggressive corrections, but the misses only grew wider. It turned out there was a fundamental issue: When a quadcopter dives downward faster than its propellers can “bite” through the air, the propellers act as air brakes, inverting the effect of guidance commands. We needed to completely reverse their guidance commands when crossing this threshold.



That weekend, I developed an entirely new guidance approach we called “Dive,” which allowed the drone to fall along a target vector with precise lateral corrections. Along with optimizing the propellers for inflow velocity with dynamic throttle margin, the problem was solved.



Later on, when preparing for a demonstration with a four-star general, another issue emerged: The airframe was vibrating and we were losing attitude control. The team drove the drone (with no lethal payload on it, of course) from Southern California to my home in Los Altos in the middle of the night. The next day was the baby shower for my second child, and we spent the hours and minutes before the guests arrived tuning the drone in my backyard.



The ferocious commitment from our team paid off again: The Marine Corps down-selected Bolt for its Organic Precision Fires-Light (OPF-L) program.



        
            
            

            
                            “The ferocious commitment from our team paid off again: The Marine Corps down-selected Bolt for its Organic Precision Fires-Light (OPF-L) program.”
                    

    



    




It was never enough to create solutions that worked in the lab. Each one had to work reliably in the field, at scale, and at a cost that made sense.



This was part of Anduril’s secret sauce, and antithetical to how traditional defense contractors operate. The defense primes typically optimize for high-margin, low-volume production with expensive maintenance contracts. Anduril brought Silicon Valley’s mindset of scalable technology to defense—solutions that could be mass-produced and widely deployed.



When designing hardware, we broke the product development process into three distinct stages. In the conceptual phase, the most important metric was lead time—how quickly we could get the components needed to build a prototype. In the new product introduction phase, when building 10 to 100 units, we focused on ramp time—how quickly we could work with vendors to reach the rates required for a pilot. In the third stage, full-rate production, the focus shifted to scrap rate and cycle time.



Traditional defense programs often fail because they create exotic systems that are too hard to produce or too expensive to deploy at scale. We were determined not to make that mistake.



By designing with scale in mind from day one, we aimed to create a virtuous cycle: our products could be deployed more widely because they were affordable, which generated more data and experience, which improved the next generation of products.



These core principles guided our product development. But principles alone aren’t enough. To apply them consistently across hundreds of engineers and dozens of products, we needed to design an organization that could sustain this approach at scale.



        
            
            

            
                            Electrical test rack with a new board.
                    

    



    




As we approached 60 employees, it became impossible for everyone to report to Brian. What began as my leadership of a handful of electrical engineers quickly expanded to 75 people, then to all hardware engineering, and ultimately to all product engineering—electrical, mechanical, and embedded systems combined. When I became SVP of Engineering in June 2022, I had 164 people in my department. By the time I left in March 2024, it had grown to 550 engineers working on 30 products across 15 different families.



Building a high-performance organization was as important as solving technical problems. Throughout my time, I had to maintain this dual identity—an engineer on the frontlines driving design and development, and also a leader responsible for creating the organizational structure that would enable others to do the same. I needed to build a leadership team that could own full lifecycle product development and deliver world-class systems at the pace and precision demanded by our mission. Every hire was made with this blueprint in mind.



The first priority was to anchor the organization with deep technical credibility. “Badass engineers want to work for badass engineers,” as the saying goes—the best will only work for leaders they can learn from and respect technically. We needed to avoid the common mistake made by organizations which fail by promoting or hiring managers without the technical skills to understand problems, build strong teams, or avoid making flawed engineering decisions.



For the electrical team, we wanted to position ourselves at the leading edge of avionics design. I recruited Shaun Donovan, a veteran of General Atomics and an early employee at Anduril, who had been involved in nearly every major electrical design to date. His mandate was clear: take hard-won lessons from legacy systems, and build the next generation of electrical architecture from first principles. On the mechanical side, we needed a leader deeply experienced in rapid prototyping and fabrication; someone who could translate ambitious concepts into functional hardware quickly and effectively. That was Matt Zipfel, whose career at SpaceX was defined by turning bold mechanical ideas into working prototypes under intense timelines.



With the core engineering leadership in place, the next critical step was embedding product thinking across the organization and developing a scalable product platform. We needed product leaders who could unify technical execution with the production rigor needed to scale. I brought over Danish Tejani, Anduril’s first hardware product manager and a former NPI lead at Tesla, to help build our product development function.



As the team matured and the product portfolio expanded, it became clear that maintaining alignment with the defense customer was both a strategic imperative and a growing risk. Many of our new hires came from non-defense industries, and while that brought valuable innovation, it also introduced a potential gap in mission understanding. To close that gap, we hired Joe Bayer, a former GA program executive and F18 pilot. His deep domain knowledge and firsthand understanding of defense customers allowed us to stay laser-focused on delivering solutions that mattered.



The final piece of the leadership architecture was operational scalability. By this point, we had grown to hundreds of engineers across dozens of teams. We needed a chief of staff who could partner with me to build and run the engineering organization, without losing the technical context that made us successful. It’s common practice to hire Jared from Silicon Valley types, but I needed someone who could communicate with engineers on their level and play the role of a technical leader. That was Raichelle Aniceto—an MIT-trained aerospace engineer who led Relativity Space’s ambitious Terran R rocket program.



        
            
            

            
                            Test racks for electrical assemblies in the R&D building’s electrical engineering lab.
                    

    



        
            
            

            
                            Dev space in the R&D building’s electrical engineering lab.
                    

    







    




Anduril is “an amusement park for engineers,” as I once remarked, because we worked on such diverse and challenging technologies. But behind the thrill and excitement had to be a carefully designed system that could turn ambitious ideas into deployable products. As we grew from a handful of engineers to over 500, maintaining our speed and innovation became increasingly challenging. Traditional organizational models wouldn’t work—dedicated teams for each product would have required thousands of engineers and created silos that slowed innovation. We needed something different.



We rebranded our engineering organization as “Product Engineering” to make our purpose clear: delivering products that meet customer needs. We then consolidated scattered teams into a cohesive group with three clear frameworks: products, core technologies, and key capabilities.



Products were our mission-focused integrated systems. Core technologies were our standardized building blocks—our LEGO pieces—that could be rapidly assembled into new products. Instead of starting each drone from scratch, we created reusable components like flight computers and propulsion systems. Key capabilities were our internal engineering services, like a machine shop that could transform digital concepts into physical prototypes within hours, or teams that could “shake, bake, and shock” components to ensure reliability.



What made this work was our matrix organization. Instead of creating dedicated teams for each product, we built functional organizations (across electrical, mechanical, and embedded systems) with deep expertise that could surge resources toward critical projects when needed. When we began developing Roadrunner, we pulled engineers from electrical and mechanical pools for intensive development, then shifted them to other projects when those phases ended.



The results were unprecedented in hardware: In early 2023, fewer than 200 people were responsible for over 25 different products, some of which were deployed across the world in the order of thousands.



We maintained integrated product teams where specialized expertise was required, like our Electronic Warfare group led by Sam El-Akkad, with deep RF and signal processing expertise. Or the Imaging team led by Bill Ross, with expertise in developing sensors down to the pixel-level silicon design. We also established product architects who were responsible for trade studies and system-level decisions—engineers who had proven themselves technically and could now lead cross-functional efforts.



With this foundation, we maintained small, focused teams while leveraging the broader ecosystem around them. But structure alone wasn’t enough—achieving this level of performance required recruiting the right people and building strong leadership capable of operating in a dynamic environment.



        
            
            

            
                            The author setting up a Pulsar, Anduril’s electronic warfare product, in a RF anechoic chamber.
                    

    



    




The leadership approach at Anduril centered on a few core principles.



First, we prioritized relentlessly through a daily red-light/green-light system based on the Objectives and Key Results (OKRs) we set. Every product and project had clear metrics that we reviewed constantly. When something showed red, we’d immediately assemble the team to identify root causes. This consumed 60–70% of my time—figuring out the biggest obstacles and eliminating them alongside the team. I was notorious for being chronically late to scheduled meetings because I wouldn’t cut short work on critical problems.



Second, we maintained technical credibility through hands-on involvement. By day, I’d handle the corporate aspects—meeting with leaders across the company to drive product and technology development, and continuing a constant discussion about what was slowing us down, what was blocked, and what was broken. But after 5pm, my engineering work began. I’d return to the building at 7:30pm after dinner and wander the labs until the early hours, sitting with teams debugging problems. I’d whiteboard calculations, write Python scripts, and sometimes even solve structural dynamics questions. Engineers knew leadership understood their challenges at a fundamental level because we were there doing the work with them.



Third, many of us deliberately stayed out of the spotlight. If you look through photos of our major victories in those days, you won’t find me in them. This wasn’t false modesty; it was strategic. I wanted teams to own their achievements completely. By giving them full credit, they grew more confident and capable for the next challenge.




The results were unprecedented in hardware: In early 2023, fewer than 200 people were responsible for over 25 different products, some of which were deployed across the world in the order of thousands.




Underlying these principles was a fundamental belief: I work for my team. These 550 engineers were dedicating the best years of their careers to Anduril, and I felt responsible for making those years meaningful. My job was to harness the unique superpowers of each individual and create an environment where they could thrive.



This philosophy has to start at the top, and the impact of this approach, exemplified by Brian, cascaded through our organization. When leaders instead prioritize expanding their scope and influence over developing their teams, they create a vacuum that attracts similar self-interested leaders. The result is inevitable: layers of political fiefdoms that don’t value winning at an outcome level and don’t care about their people.



We elevated our approach into the management structure by promoting engineers who had earned respect through technical excellence, and creating a “scaffolding” system to support these technical leaders as they developed management skills.



        
            
            

            
                            The latest Anvil, equipped with energetics and Launch Box.
                    

    



        
            
            

            
                            Backside of the bistatic seeker.
                    

    



    




When it came to recruitment, we obsessed over what I called “the highest density and intensity of talent.” While talent density is a common concept, we focused equally on how to leverage a team’s capabilities through the environment we created. As Steve Jobs illustrated with his rock tumbler story, ordinary rocks become polished gems through friction against each other—just as talented teams polish each other through productive conflict to create something exceptional.



Our hiring approach was uncompromising. We installed “bar raisers” on interview panels—people who would reject candidates unless they were exceptional. I personally spent about 20% of my time on recruiting.



Even when scaling to 30–40 hires monthly, I interviewed most engineering candidates. I built Python dashboards to analyze our talent sources and maintained a LinkedIn Recruiter account. We expanded geographically, opening offices strategically to access new talent pools when my personal network was completely depleted.



We sought engineers who combined technical excellence with passion for our defense mission. We particularly valued former startup founders for their demonstrated agency and self-motivation.



Our performance management philosophy sat between two extremes: Elon’s approach of firing anyone on the left side of the performance curve versus Jensen Huang’s philosophy of trying to uplevel everyone. Elon believed that if you had five apples and one might be rotten, you have to throw out the whole batch. It’s a ruthless but logical view—bad apples can spoil the bunch. My approach aimed to be pragmatic—we maintained annual 10% attrition targets, but focused on clear expectations and respectful transitions.



We created a quarterly performance coaching program that identified the bottom 10% who needed support. We established clear OKRs so everyone understood their metrics for success. With transparent expectations, underperforming engineers often recognized on their own when they weren’t the right fit, leading to more respectful separations. This avoided the toxic alternative, common in other companies, where managers undermine struggling employees behind their backs rather than addressing issues directly.



Preventing organizational bloat proved equally critical. B-players who don’t understand product requirements tend to inflate headcount needs. When business lines claimed they needed 50 people for a project, we evaluated the engineering requirements and often found half were unnecessary. Our hiring estimates typically ran at half of what stakeholders requested and a third of industry standards. I reviewed every engineering hiring proposal personally, rejecting many while we still grew rapidly.



Building this culture was like coding our organizational DNA—you need the right sequences at the start. The legendary stories from Anduril’s early days became the foundational code, continuously retold and refreshed with new chapters, embedding traits that transformed new engineers into problem-solvers capable of the impossible. When I became responsible for new teams, engineers would approach me saying, “We’ve heard so many stories about what it was like at the beginning.” These stories weren’t just entertainment; they transmitted our values and showed what was possible. As our team grew by over 2,500%, these legends ensured that each new hire understood what made us different.



        
            
            

            
                            Thermal imager with a 900mm lens, in the R&D building’s dev test lab.
                    

    



    




Throughout my career, I’d worked on cutting-edge hardware systems—drones, missiles, autonomous vehicles—that could theoretically perform any task, but in practice were often constrained by limited autonomy and human-guided control. Despite extraordinary advances in robotic hardware, the foundational intelligence to power these systems lags far behind. Most autonomous robots remain essentially puppets on strings, awaiting human instruction or executing elaborately choreographed behaviors.



In February 2024, I’d been approached about advising a robotics startup and called Brian to discuss it. We talked about physical intelligence and how, while AI companies everywhere were chasing language models and reasoning, half of the world’s GDP was generated by physical labor—yet no one had cracked the foundational model for robots to function effectively in the real world.



Brian listened carefully, then said something that will stay with me forever: “I’ve always seen you as a founder.”



For me, this wasn’t just encouragement—it was perspective from someone who had followed the same path, moving from leading engineering at Palantir to co-founding Anduril. Brian ultimately supported my growing belief that building a universal intelligence to unlock the limitless capabilities of robotic hardware—and fundamentally reshape humanity’s experience of physical labor—was an opportunity I couldn’t pass up.



I thought then of my son, and the innumerable times he accompanied me, often at strange hours and with curious equipment in tow, to desert test sites, landing strips, and hotel rooftops. The best problems, I’ve always told him, are the ones everyone else avoids, until they become impossible to ignore. When he tells me he wants to build things like me when he grows up, I feel the weight of the work I did at Anduril, and what I still have left to do.  



In May 2024, I left the company as a full-time employee to co-found Physical Intelligence (PI). PI is now building the universal intelligence model that can finally close the gap: a single, powerful “brain” capable of bringing genuine autonomy to every physically actuated device, from drones and industrial robots to household appliances. Solving this problem means more than a technological breakthrough: it’s about fundamentally redefining humanity’s relationship with physical labor, enabling a productivity revolution on the scale of industrialization itself.



The point is that Anduril’s own mission is so impactful, and meant so much to me, that I couldn’t have left it for any other mission short of PI’s. Still, the decision to leave wasn’t easy. I’d helped build a team of 550 extraordinary engineers who had become family. But the culture of ownership we’d created meant they didn’t need me anymore.



        
            
            

            
                    

    



    




Adnan Esmail is the co-founder of Physical Intelligence and Emeritus SVP Engineering at Anduril.



    

                    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Rise of Hybrid PHP: Blending PHP with Go and Rust]]></title>
            <link>https://yekdeveloper.com/p/4-the-rise-of-hybrid-php</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45077143</guid>
            <description><![CDATA[We used to develop our application as a single DDD monolith (let’s call it the mother) with several smaller microservices around it (the children) to gain some specific advantages. Most of these microservices were built in Go, while the core monolithic service was developed in PHP 8.3.]]></description>
            <content:encoded><![CDATA[We used to develop our application as a single DDD monolith (let’s call it the mother) with several smaller microservices around it (the children) to gain some specific advantages. Most of these microservices were built in Go, while the core monolithic service was developed in PHP 8.3.This stack served us well for a long time. The Go microservices efficiently handled our high-throughput requests, and the carefully designed monolith allowed our relatively small backend team to deliver features quickly and with confidence. It was a good balance: speed where we needed it most, and stability and productivity everywhere else.As many of you may have experienced, 80% of your traffic often targets only 20% of your APIs—the well-known Pareto principle. And unsurprisingly, those hot 20% endpoints are usually the ones where performance matters the most. In the past, our strategies included writing highly optimized code, adding extreme caching layers, or extracting certain parts into Go-based microservices. While effective, these approaches added complexity and operational overhead.But now, thanks to new capabilities in the PHP ecosystem and the rise of powerful libraries and runtimes, it’s becoming much easier to keep more logic inside the monolith while still achieving excellent performance. Let’s look at a few exciting options:1. FFI (Foreign Function Interface)PHP’s FFI feature allows you to call C code directly from PHP. This opens the door to system-level operations or performance-critical logic without leaving your PHP project. Of course, you need to be mindful of context switching costs, but for the right use cases, it’s a game-changer.2. Rust-Based ExtensionsIf writing raw C isn’t your cup of tea, you can now write PHP extensions in Rust (or even Zig). This lets you offload heavy, performance-sensitive parts of your application to safe, memory-efficient, compiled code. Rust, in particular, offers memory safety guarantees without sacrificing speed, which makes it a great fit for extensions that need to be both reliable and fast.3. Go-Based Extensions with FrankenPHPWe’ve recently switched to FrankenPHP (after seeing it become officially supported by the PHP Foundation). Running PHP in FrankenPHP’s worker mode is impressively fast—sometimes over 4x faster in our benchmarks compared to traditional setups.Even more exciting, a recent release introduced the ability to write PHP extensions in Go. This feature is something we are actively exploring because it would let us build high-performance APIs in Go and expose them seamlessly inside our PHP monolith. That way, we can combine the productivity of PHP with the raw speed of Go, without needing to split everything into separate services.But Why Not Just Rewrite Everything in Go or Rust?It’s a fair question—and one we’ve asked ourselves too. There are two main reasons why we don’t simply migrate the entire backend:1. Rewriting is costly. Many applications are already large and stable. Rewrites are risky, time-consuming, and often introduce more problems than they solve. In most scenarios, a rewrite should be the very last option.2. PHP is still a great fit. For the majority of the application, PHP does the job well. It’s fast enough, developer-friendly, and supported by a large ecosystem. For those few cases where you truly need maximum performance, you can now selectively write parts in Go or Rust as extensions—rather than rewriting the entire system.In short, the modern PHP ecosystem gives us the best of both worlds: the ability to build quickly and confidently in PHP, while still having powerful options (C, Rust, Go) for performance-critical parts. This hybrid approach lets us stay productive without sacrificing speed where it matters most. ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[University of Cambridge Cognitive Ability Test]]></title>
            <link>https://planning.e-psychometrics.com/test/icar60</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45076367</guid>
            <content:encoded><![CDATA[
    
        
            IP:
            172.208.86.179
        
        
            Browser:
            Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
        
        
            Time:
            2025-08-30 23:07:38
        
    
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Default Trap: Why Anthropic's Data Policy Change Matters]]></title>
            <link>https://natesnewsletter.substack.com/p/the-default-trap-why-anthropics-data</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45076274</guid>
        </item>
        <item>
            <title><![CDATA[GAO warns of privacy risks in using facial recognition in rental housing]]></title>
            <link>https://files.gao.gov/reports/GAO-25-107196/index.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45075664</guid>
            <description><![CDATA[Report to
Congressional Requesters]]></description>
            <content:encoded><![CDATA[

RENTAL HOUSING

Use and Federal Oversight of Property Technology 



Report to
Congressional Requesters

July 2025

GAO-25-107196

United
States Government Accountability Office



Highlights





For more information, contact Alicia
Puente Cackley at CackleyA@gao.gov.

Highlights of GAO-25-107196, a report
to congressional requesters

July 2025

RENTAL HOUSING

Use and Federal Oversight
of Property Technology 

Why GAO Did This Study

Some policymakers have raised questions about the use
of property technology tools in the rental housing market, including their
potential to produce discriminatory or unfair outcomes for renters. GAO was
asked to assess various aspects of property technology use in the rental
housing market. This report examines (1) the use of four selected property
technology tools, (2) their potential benefits and risks for owners and renters,
and (3) federal agencies’ oversight of these tools. 

GAO focused on four commonly used types of property technology
tools (see figure). GAO reviewed studies by federal agencies and advocacy and
industry groups; agency guidance and documentation; and rulemakings, legal
cases, and enforcement actions issued in 2019–2024. GAO also interviewed
officials of four federal agencies responsible for enforcing statutes that
address housing discrimination; anticompetitive, unfair, or deceptive acts
affecting commerce; and the use of consumer credit reports; and representatives
of 12 property technology companies, 10 public housing agencies, and nine
advocacy or industry groups (nongeneralizable sample groups, selected for their
expertise in or use of these technologies).

What GAO Recommends

GAO recommends that HUD provide more specific written
direction to public housing agencies on the use of facial recognition
technology.  

What GAO Found 

Property technology broadly refers to the use of software,
digital platforms, and other digital tools used in the housing market. Property
owners and renters use these technologies for functions including advertising, touring,
leasing, and financial management of rental housing. These tools may
incorporate computer algorithms and artificial intelligence.





Property technology tools used for advertising, tenant
screening, rent-setting, and facial recognition have both benefits and risks.
For example, facial recognition technology can enhance safety, according to
three industry associations and all 10 of the public housing agencies in GAO’s
review. However, these tools also may pose risks related to transparency,
discriminatory outcomes, and privacy. For instance, potential renters may
struggle to understand, and owners to explain, the basis for screening decisions
made by algorithms. Facial recognition systems also might misidentify
individuals from certain demographic groups, and property owners might use
surveillance information without renter consent, according to advocacy groups
GAO interviewed.    

The four federal agencies took several actions to address
these risks. To combat alleged misleading and discriminatory advertising on
rental platforms, agencies pursued legal action and obtained settlements
requiring changes to advertising practices and improved compliance with the
Fair Housing Act. They also took enforcement actions against tenant screening
companies for using inaccurate or outdated data. 

However, all 10 public housing agencies stated public
housing agencies would benefit from additional direction on use of facial
recognition technology. The Department of Housing and Urban Development’s (HUD)
current guidance to these agencies is high-level and does not provide specific
direction on key operational issues, such as managing privacy risks or sharing
data with law enforcement. More detailed written direction could provide public
housing agencies additional clarity on the use of facial recognition technology
and better address tenant privacy concerns. 

































































Abbreviations




 
  
  CFPB
  
  
  Consumer Financial
  Protection Bureau
  
 
 
  
  DOJ
  
  
  Department of Justice
  
 
 
  
  FCRA
  
  
  Fair Credit Reporting
  Act
  
 
 
  
  FTC 
  
  
  Federal Trade Commission
  
 
 
  
  HUD
  
  
  Department of Housing
  and Urban Development
  
 
 
  
  PHA 
  
  
  public housing agency
  
 
 
  
  proptech
  
  
  property technology
  
 






This is a work of the U.S. government and is not
subject to copyright protection in the United States. The published product may
be reproduced and distributed in its entirety without further permission from
GAO. However, because this work may contain copyrighted images or other
material, permission from the copyright holder may be necessary if you wish to
reproduce this material separately.



Letter



July 10, 2025

The Honorable Elizabeth Warren
Ranking Member
Committee on Banking, Housing, and Urban Affairs
United States Senate

The Honorable Maxine Waters
Ranking Member
Committee on Financial Services
House of Representatives

Property owners and renters increasingly rely on property
technology (proptech), which in the rental housing context broadly refers to
software, digital platforms, and other digital tools used for advertising,
leasing, management, and maintenance. These tools may incorporate technologies
such as algorithms and artificial intelligence, including machine learning
models.[1]

Proptech tools can make it easier for renters to search
for, view, and lease housing, and for owners to manage their units. But some
policymakers have raised questions about the use of these tools and the
potential for discriminatory, unfair, or anticompetitive outcomes for renters.

You asked us to assess various aspects of proptech use in
the rental housing market. This report examines (1)
selected proptech tools available in the rental market, how they are
used, and by whom; (2) the benefits and risks that selected proptech tools
may pose for owners and renters; and (3) steps taken by federal agencies to
oversee these selected proptech tools.

To identify available proptech tools, we reviewed reports
from federal regulators, academics, industry groups, and advocacy organizations
and identified thirty-four tools. We then purposively selected four tools that
incorporate artificial intelligence and are used by owners and renters in the
rental housing process: advertising platforms, tenant screening tools,
rent-setting software, and facial recognition technology.[2]

For the first two objectives, we interviewed
representatives of five advocacy organizations, four industry associations
(that represent owners and managers), and two organizations participating in
the federal Fair Housing Initiative Program (which seeks to combat housing
discrimination), as well as a nongeneralizable sample of 12 companies that
provided the selected proptech tools. These consisted of three advertising
companies, three tenant screening companies, four facial recognition companies,
and two rent-setting software companies. We also conducted semi-structured
interviews with representatives of a nongeneralizable sample of 10 public
housing agencies (PHA).

For the third objective, we reviewed guidance and
documentation from the Consumer Financial Protection Bureau (CFPB), the
Department of Justice (DOJ) the Federal Trade Commission (FTC), and Department
of Housing and Urban Development (HUD), final rulemakings, federal court
orders, enforcement actions, and relevant advisory opinions issued by these
agencies from 2019 through 2024.[3]
We analyzed HUD communications to PHAs regarding use of surveillance technology
and assessed them against relevant federal internal control standards.[4]

For all three objectives, we reviewed relevant laws,
regulations, agency reports and guidance, and interviewed representatives from
four federal agencies: the CFPB, DOJ, FTC, and HUD.

See appendix I for additional information about our scope
and methodology.

We conducted this performance audit from November 2023 to
July 2025 in accordance with generally accepted government auditing standards.
Those standards require that we plan and perform the audit to obtain
sufficient, appropriate evidence to provide a reasonable basis for our findings
and conclusions based on our audit objectives. We believe that the evidence
obtained provides a reasonable basis for our findings and conclusions based on
our audit objectives.

Background

Federal Agency Enforcement Roles and Responsibilities

Federal agencies generally do not have a direct role in
monitoring or overseeing the use of proptech tools in the rental housing
market. Instead, several agencies are tasked with enforcing statutes that
broadly address housing discrimination; anticompetitive, unfair, or deceptive
acts affecting commerce; and the use of consumer credit reports. The federal
agencies with oversight and enforcement responsibilities for laws relevant to
selected proptech tools include HUD, FTC, CFPB, and DOJ (see table 1).




 
  
   
   Law 
   (as amended)
   
   
   Key requirements 
   
   
   Key federal agencies with statutory oversight and
   enforcement responsibilities
   
  
 
 
  
  Fair Housing Act 
  
  
  Prohibits discrimination in the sale, rental, or
  financing of housing, and other housing-related decisions based on race,
  color, religion, sex, national origin, familial status, or disability.
  
  
  DOJ, HUDa
  
 
 
  
  Fair Credit Reporting Act 
  
  
  Requires a permissible purpose to obtain a consumer
  credit report (including tenant screening reports) and that consumer
  reporting agencies follow reasonable procedures to assure the maximum
  possible accuracy of consumer reports. Imposes disclosure requirements on users
  of consumer reports who take adverse action on credit applications based on
  information contained in a consumer report. Imposes requirements on
  furnishers of information to consumer reporting agencies for consumer reports
  regarding the accuracy and integrity of furnished information.
  
  
  CFPB,b DOJc, FTC 
  
 
 
  
  Section 5 of the Federal Trade Commission Act 
  
  
  Prohibits unfair methods of competition and unfair or
  deceptive acts or practices in or affecting commerce.
  
  
  FTC
  
 
 
  
  Sections 1 and 2 of the Sherman Antitrust Act
  
  
  Outlaws all contracts, combinations, and conspiracies
  that unreasonably restrain or monopolize interstate and foreign commerce or
  trade practices including price fixing and bid rigging.
  
  
  DOJ 
  
 


Source: GAO analysis of relevant laws applicable to the
Consumer Financial Protection Bureau (CFPB), Department of Justice (DOJ),
Federal Trade Commission (FTC), and Department of Housing and Urban Development
(HUD).  |  GAO‑25‑107196

aDOJ may bring Fair Housing Act cases on its
own or based on referral from HUD when HUD finds reasonable cause, issues a
charge of discrimination, and a party elects to proceed in federal court.

bOn February 9, 2025, the National Treasury
Employees Union and others filed a lawsuit in the District Court for the
District of Columbia alleging that the actions of the Acting Director,
including actions regarding staffing and enforcement work, violated the
Administrative Procedure Act and the Dodd-Frank Consumer Protection and Wall
Street Reform Act and were unconstitutional because they interfered with
Congress’ ability to appropriate funds and create statutory functions for
agencies. Nat’l Treasury Emp. Union, et al. v. Vought, No. 1:25-cv-00381
(D.D.C. filed Feb. 9, 2025). As of May 2025, the litigation is active and
continues in both US Circuit and Appeals Court.

cFTC and CFPB share enforcement of the Fair
Credit Reporting Act as it applies to tenant screening, which is coordinated
under a memorandum of understanding. DOJ may assist or supervise related
federal court cases.

More specifically, HUD’s Office of Fair Housing and Equal
Opportunity is responsible for enforcing the Fair Housing Act, which prohibits
discrimination in nearly all housing and housing-related transactions based on
protected characteristics.[5]
This office issues guidance to assist owners and companies in complying with
Fair Housing Act requirements. It also processes and investigates complaints
alleging civil rights violations and conducts compliance reviews of HUD funding
recipients. After a complaint is filed, HUD attempts to conciliate the matter
before issuing a charge or dismissal.

If conciliation fails, HUD may refer the matter to DOJ.
DOJ may bring a case in federal court if HUD investigated the complaint or
issued a charge and one of the parties elected to proceed in court. In fair
housing cases, DOJ can seek injunctive relief—such as training and policy
changes—monetary damages, and civil penalties in pattern or practice cases.[6]

FTC and CFPB enforce the Fair Credit Reporting Act (FCRA),
including oversight of consumer reporting agencies.[7] These agencies assemble or evaluate
consumer information—such as employment, criminal, rental, eviction, and credit
history—into consumer reports provided to third parties, including rental
property owners who use them to determine eligibility for rental housing. Both FTC
and CFBP can investigate and initiate enforcement action against consumer
reporting agencies that violate FCRA requirements, such as those for ensuring
accuracy.

In addition to enforcement, FTC and CFPB seek input from
and publish resources for the public.[8]
Both CFPB and FTC can bring actions for alleged FCRA violations.  FTC can seek
injunctive relieve on its own but must seek civil penalties through DOJ in
federal district court.  CFPB can bring its own cases alleging FCRA violations
for civil penalties and injunctive or other relief. 

FTC enforces Section 5 of the FTC Act, which prohibits
unfair methods of competition or deceptive acts or practices affecting
commerce.[9]
Under this authority, FTC may investigate and initiate enforcement actions if
it has reason to believe a violation occurred or is occurring. The FTC Act
allows the agency to seek cease-and-desist orders or injunctive relief, impose
civil penalties for violations of its orders or certain rules, and obtain
consumer redress in certain circumstances.

HUD Administration and Oversight of Subsidized Housing

In addition to enforcing the Fair Housing Act, HUD plays a
role in administering and overseeing subsidized housing programs.

Office of Public and Indian Housing. This office
administers the Public Housing and Housing Choice Voucher programs, two of HUD’s
largest subsidized housing programs.[10]
PHAs—typically municipal, county, or state agencies created under state
law—operate both programs. Under the Public Housing program, HUD provides
subsidies to PHAs, which own and operate rental housing designated for eligible
low-income households. Under the Housing Choice Voucher program, HUD provides
rental subsidies, through PHAs, that renters can use to obtain housing in the
private market.

Office of Policy Development and Research. This
office develops fair market rents, which are used to determine the maximum
allowable rent for Housing Choice Voucher recipients. Fair market rent
generally reflects the cost of renting a moderately priced unit in a local
housing market. HUD calculates and publishes these rents annually for thousands
of locations.

Owners and Renters Use
Proptech Tools for Listing, Searching, Screening, and Rent-Setting

Owners and renters may use one or more of the four types
of proptech tools we reviewed—advertising platforms, tenant screening tools,
rent-setting software, and facial recognition technology—for functions
including advertising, rent-setting, screening tenants, and controlling access.

Advertising platforms. These platforms allow owners
to list rental properties on websites for prospective renters to view (see fig.
1). Features may include targeted advertising, virtual touring, and rent
estimates. Algorithms and machine learning may be used to personalize search
results by tailoring recommendations based on user data. Other platform
features may include rental-management tools for landlords, such as application
intake, tenant screening, electronic lease signing, and rent collection.





Tenant screening tools. Property owners use tenant
screening tools to assess the suitability of prospective renters for a rental
unit (see fig. 2). The tools assemble and evaluate tenant background
information such as credit and criminal history, employment and income verification,
and rental payment or eviction history to generate a screening report. Owners
may use these reports to attempt to evaluate an applicant’s likelihood of
fulfilling lease obligations.[11]
Some tools use machine learning to analyze patterns in applicant data to
attempt to predict a prospective renter’s reliability based on historical
trends. These predictions may be presented as a score or recommendation that
owners consider when deciding whether to approve an applicant.





Rent-setting software. Also known as revenue
management software, these tools help property owners determine rents by
generating data-driven pricing recommendations (see fig. 3). They may use
proprietary or public data, such as occupancy rates, market trends, and
comparable unit prices. This tool may also apply artificial intelligence
techniques, including machine learning, to forecast demand and suggest optimal
rental levels. The software allows owners to adjust rents in response to
current market conditions and their own pricing objectives.





Facial recognition technology. Building owners use
facial recognition technology for security, including access control (see fig.
4). For example, cameras installed at building entrances use software to verify
a renter’s identity by comparing their face to a database of stored images. A
successful match allows entry. The software uses computer vision, a type of
artificial intelligence, to recognize faces in real time, verify identities
from images, and improve accuracy over time through learning.





Selected Proptech Tools
Can Offer Convenience and Safety but Also Pose Privacy, Bias, and Other Risks

Online Listing Platforms Can Benefit Owners and Renters but Carry Risks
Such as Misrepresentation

Online listing platforms can provide several benefits for
owners and renters, according to the industry associations and advertising
companies we interviewed, including the following:

Wider advertising reach. Owners can use third-party
advertising features to extend the visibility of their listings across multiple
platforms. These tools use algorithms to target potential renters more
efficiently than traditional print advertising. They also can save owners time
by creating one listing that can be displayed across various websites and
social medial platforms. Broader exposure can help fill vacancies more quickly
and maximize rental income.

Convenience and cost savings of virtual tours.
Listing platforms allow potential renters to take virtual tours—often in
three-dimensional formats—that show a unit’s floor layout. Virtual touring is
available at any time and may reduce travel and other costs. It also helps
individuals with mobility or accessibility limitations assess whether a unit
meets their needs without having to physically be present at the unit.

Cost savings and efficiencies from universal
applications. One company with which we spoke offers “universal” rental
applications for potential renters and property owners. The service is free for
owners who accept the application. Prospective renters submit a single form and
pay one fee to apply to multiple units over a 30-day period.

However, representatives of advocacy groups and officials
from federal agencies we interviewed noted that advertising tools posed
potential risks to renters, including potential misrepresentation and
discrimination.

Misrepresentation of listings or costs. Owners may
post fraudulent or misleading images, including altered or staged photographs.
For example, potential renters may rely on pictures and videos provided in a
virtual tour, but owners could manipulate these images to make rooms appear
larger or smaller than they are. Owners also may make unclear statements about
rent costs. For example, rent may be advertised online in a way that obscures
actual costs, or fees for amenities like gyms or conference rooms may be hidden
until move-in.

Discriminatory advertising. Platforms or owners may
limit who sees listings or include language that discourages renters on a
prohibited basis, such as by protected classes. For example, phrases such as “no
children” or “no wheelchairs” may violate the Fair Housing Act by
discriminating on the basis of familial status or disability. Unlike
traditional print advertising, where a listing is provided in writing and a
landlord subsequently assesses applicants, algorithms may analyze characteristics
such as income or location and steer certain users to or from specific listings
before they can apply. This practice may reduce housing access for minorities,
women, families with children, and individuals with disabilities.

Online platforms use several approaches to help mitigate
these risks, according to representatives from one of the three advertising
companies we interviewed. For example, this company said its platform includes
a rental cost and fee calculator that helps potential renters understand the
full cost of a unit. The tool lists associated fees and expenses, such as
monthly costs for utilities, parking, and pet fees, as well as one-time charges
like security deposits and application or administrative fees. This company
described a set of controls designed to prevent discriminatory advertising.
These include keyword detection logic to filter potentially discriminatory
language—for instance, blocking phrases that discourage families with children.
The platform also displays information about relevant federal, state, and local
fair housing laws to owners before they upload a listing. In addition, the
website allows users to report potential discriminatory content for manual
review by the company.

Screening Technology Can Help Owners Manage Risks, but Inaccurate
Information May Result Denials

According to industry associations, and representatives
from two companies we interviewed, owners benefit from tenant screening tools
in part because they help mitigate renter-based risks, including the following:

Failure to meet lease obligations. Screening tools
may help owners assess background information to reduce the risk a renter might
not fulfill lease terms. For example, reviewing a prospective renter’s rent
payment and credit history may help owners identify applicants with a lower
risk of nonpayment. 

Fraud risks. Screening algorithms assist owners in
verifying information that potential renters provide. This verification helps
reduce risks of identity fraud (false names, Social Security numbers, or birth
dates) and synthetic fraud (fabricated documents, such as pay stubs).

Potential risks and challenges related to using screening
reports include the following:

Inaccurate information. Tenant screening reports
often contain inaccurate information, which can lead to unwarranted rental
application denials. For example, of the approximately 26,700 screening-related
complaints submitted to CFPB from January 2019 to September 2022, approximately
17,200 were related to inaccurate information.[12]
Specifically, these complaints noted challenges obtaining housing—for instance,
due to information erroneously included in their report; outdated information
that legally should not have been included; and inaccurate arrest, criminal,
and eviction records.

Model transparency issues. As we previously
reported, models using algorithms can produce unreliable and invalid results.[13] Advocacy groups noted that
algorithms may present a recommendation to the owner without disclosing the
specific data used or how it was weighted. As a result, owners and renters may
be unable to identify or correct errors, and renters may be unable to submit
mitigating information to improve their chances of securing housing.

Disparate impact. Screening algorithms that rely on
criminal history and eviction records may have an adverse impact on minorities,
including Black and Hispanic applicants, according to advocacy group officials.[14] For example, algorithms that
recommend rejecting applicants with any criminal or eviction record may
disproportionately affect these groups due to their overrepresentation in the
criminal justice and housing court systems. This may contribute to reduced
housing access and increased housing instability. In addition, algorithms may
not differentiate between serious offenses and minor ones that are unlikely to
affect renter’s reliability.

Representatives of tenant screening companies we
interviewed reported taking several steps to help mitigate these risks. For
example, one company allows potential renters to review their background
information and submit comments to the owner before applying. Renters can flag
inaccuracies or provide a narrative to explain circumstances the owner might
otherwise overlook. In addition, three companies told us they review and
subsequently correct inaccurate information on a tenant screening report if
notified by a renter or owner.

Rent-Setting Algorithms Offer Owners Pricing Insights but May Lead to
Higher Rents

Representatives from two industry associations, HUD
officials, and representatives from one company offering rent-setting software
noted that owners and renters may benefit from the use of tools that provide
rent-setting algorithms in several ways, including the following:

Responsiveness to market changes. Rent-setting
algorithms may help owners adjust rents more quickly in response to changing
market conditions. This can help owners achieve their desired occupancy rates,
keep their properties at their desired level relative to the market, and
minimize revenue lost from unintended vacancies.

Improved accuracy in HUD fair market rents. HUD
incorporates data from private market sources that includes a rent-setting tool
to enhance the accuracy and representativeness of its fair market rent
calculations.[15]
According to HUD officials, incorporating private-market data helps address
gaps in public data sources, such as census data, which may be outdated or lack
coverage in certain markets. HUD officials stated that more accurate and timely
fair market rent calculations can help renters with Housing Choice Vouchers
find suitable, affordable housing.

However, representatives of advocacy groups also told us
that renters face several risks when owners use rent-setting algorithms,
including the following:

Reduced bargaining power. When owners rely on
rent-setting algorithms to standardize rental prices across a geographic
market, advertised rents may increase and renters may have less ability to
negotiate lower prices. Algorithms may recommend rents that owners treat as a
market benchmark, limiting flexibility to lower prices, even when individual
renters attempt to negotiate. Advocacy groups expressed concern that this
effect is especially pronounced in tight housing markets, where limited supply
further constrains renters’ leverage.

Potential increases in rental housing costs.
According to University of Pennsylvania researchers, owners using rent-setting
software adjusted rents more responsively to changing market conditions compared
to other property owners.[16]
This included increasing rents and reducing occupancy rates during periods of
economic growth.[17] Moreover,
this pattern was also found at the geographic level when, during periods of
economic growth, higher levels of rent-setting software were associated with
higher rent levels and lower occupancy rates. Advocacy groups we spoke to
reiterated these findings, noting that dependent on market conditions, the use
of a rent-setting algorithm can lead to higher rents for some renters. 

Facial Recognition Technology Can Enhance Security but Pose Privacy Risks

Representatives from three of the four industry
associations and all 10 of the PHAs we spoke to told us that the use of facial
recognition technology can enhance safety for both private and subsidized
rental housing. Owners and PHAs may install surveillance cameras equipped with
facial recognition technology to improve property security. Industry
association and PHA officials overseeing properties with such technology told
us that it can enhance safety by helping ensure that only renters and their
authorized guests can enter buildings. They noted that the technology may
reduce the risk of unauthorized individuals entering public housing facilities
and engaging in criminal activity.

However, representatives from advocacy organizations we
interviewed raised concerns about the use of facial recognition technology in
rental housing, citing risks related to accuracy, privacy, and informed
consent.

Error rates. Advocacy groups we interviewed
expressed concerns about facial recognition technology’s higher error rates for
identifying and verifying individuals from certain demographics—particularly
Black women. In the rental housing context, such inaccuracies could result in
frequent access denials for some individuals.[18]
Representatives of facial recognition companies cited several factors that may
contribute to these errors, including poor lighting, facial expressions, and
obscured facial features. They also noted that data quality—including outdated
or low-resolution images used for comparison—may also affect accuracy.[19]

Privacy and consent. Facial recognition technology
relies on the use of biometric information, which is unique to each person.
Representatives from advocacy groups we interviewed expressed concern that
surveillance data collected by owners could be used without renter consent. For
example, owners could share this information with law enforcement or use it for
action against a renter, such as an eviction or fine. Additionally,
representatives of 6 of the ten PHAs we interviewed expressed uncertainty about
what steps they should take to obtain consent when using facial recognition
technology as part of their housing operations.

Federal Agencies
Addressed Some Proptech Risks, but HUD Could Further Mitigate Risks

Federal agencies took several actions to address risks
related to selected proptech tools.[20]
However, HUD has opportunities to further mitigate risks related to facial
recognition technology in public housing.

Agencies Took Steps to Address Allegedly Misleading and Discriminatory
Advertising Practices

To address potential risks associated with online listing
platforms—specifically, misleading advertisements and discriminatory
advertising—FTC, HUD, and DOJ initiated legal actions and HUD issued guidance.

Misleading advertisements. In 2022, FTC initiated a
lawsuit against Roomster, a platform for rental housing and roommate listings.[21] FTC alleged that the company
participated in deceptive acts or practices in violation of Section 5 of the
FTC Act because its website contained inaccurate rental listings and misleading
or fake consumer reviews. A federal court issued a stipulated order requiring
the company to stop misrepresenting its listings, investigate any consumer
complaints, and pay a fine.

Discriminatory advertising practices. In March
2019, following a complaint and investigation, HUD issued a Charge of
Discrimination against Meta alleging that its advertising platform violated the
Fair Housing Act by allowing advertisers to target or exclude users based on
protected characteristics. For example, Meta’s platform included a toggle
feature that allowed advertisers to exclude men or women from viewing an
advertisement.[22]

The case was referred to DOJ, which filed suit in in 2022.
DOJ alleged that Meta’s advertising delivery system used algorithms that
considered traits such as familial status, race, religion, and sex.[23] As part of the settlement, Meta
agreed to stop using an advertising tool known as the Special Audience Tool,
develop a new system that would address racial and other disparities caused by
its use of personalization algorithms in its advertisement delivery system for
housing, and eliminate targeting options related to protected characteristics
under the Fair Housing Act. 

In April 2024, HUD’s Office of Fair Housing and Equal
Opportunity issued guidance outlining advertising practices that may violate
the Fair Housing Act when used to categorize or target online users.[24] These include advertisements that
discourage certain groups from applying, offer different prices or conditions
based on protected characteristics, or steer individuals toward specific
neighborhoods. The guidance advised housing providers to avoid targeting
options that directly or indirectly relate to protected characteristics. It
also encouraged platforms to test their systems to ensure advertisements are
not delivered in a discriminatory fashion.

Agencies Took Enforcement and Other Actions to Address Tenant Screening and
Reporting Issues

Federal agencies have taken steps to address issues
related to the accuracy and potential adverse impact of tenant screening tools.
These steps include issuing guidance, taking enforcement actions and filing a
statement of interest.

Guidance on Tenant Screening Tools. Also in April
2024, HUD issued guidance on applying the Fair Housing Act to screening of
rental housing applicants.[25]
HUD’s Office of Fair Housing and Equal Opportunity published the guidance on
its public website. The guidance also addressed the application of the Fair
Housing Act to tenant screening processes that use artificial intelligence and
machine learning. It included best practices for rental housing owners and
tenant screening companies to support compliance with fair housing laws and
mitigate artificial intelligence-related and other risks. To address inaccuracy
risks, the guidance recommended that owners give applicants an opportunity to
dispute the accuracy or relevance of negative information in a tenant screening
report. To improve transparency, it advised tenant screening companies to
include all relevant information behind a denial decision, particularly when
artificial intelligence tools are used and the outcome may be difficult to
explain. In February 2025, we observed that HUD had removed the tenant
screening guidance from its public website. HUD provided two explanations for
the removal: (1) In March 2025, HUD officials told us the guidance was taken
down as part of an agencywide review of its policies and guidance to ensure
consistency with an executive order; and (2) in March 2025, HUD told us the
agency was updating its website and the guidance remained in effect.[26]

AppFolio. In December 2020, DOJ and FTC, sued
AppFolio, Inc. a tenant screening company, for violating FCRA. The complaint
alleged that the company used incorrect and obsolete eviction and criminal
arrest records—some more than 7 years old—in its tenant screening reports.[27] The agencies also alleged the
company failed to use reasonable procedures for accuracy, relying on
third-party data without sufficient verification. As part of the settlement,
the company agreed to pay a fine and implement corrective measures to improve
its accuracy procedures.

TransUnion Rental Screening Solutions. In October
2023, FTC and CFPB jointly sued TransUnion Rental Screening Solutions and its
parent company for violating FCRA.[28]
The agencies alleged the company failed to follow reasonable procedures to
ensure maximum possible accuracy of report content, including reporting sealed
or incorrect eviction records, and did not disclose the sources of third-party
information when requested by consumers. The stipulated settlements filed with
the complaint in October 2023 required the company to enhance its procedures to
ensure maximum possible accuracy for verifying eviction data and to pay
consumer redress and a civil penalty.

Five background screening companies. In September
2023, FTC initiated an enforcement action against five background screening
companies that advertised tenant screening reports (among other things),
alleging violations of FCRA and Section 5 of the FTC Act.[29] FTC alleged that the companies
inaccurately reported nonexistent or irrelevant criminal records—such as
traffic violations—and allowed subscribers to edit their reports without
adequate verification. In October 2023, a federal court entered a stipulated
order that required the companies to cease certain practices unless they
implemented compliance measures aligned with FCRA.

Statement of interest. In January 2023, DOJ and HUD
submitted a statement of interest in the federal court case Louis et al. v.
SafeRent Solutions and Metropolitan Management Group.[30] In the case, the two plaintiffs were
Black rental applicants who used housing vouchers and alleged that SafeRent’s
algorithm-based tenant screening tool assigned them low “SafeRent” scores,
resulting in the denial of their rental applications. The plaintiffs also
alleged that the tool disproportionately affected Black and Hispanic applicants
by relying on factors such as credit history and non-housing-related debts,
while failing to account for of housing vouchers as a reliable source of
income. The agencies asserted that the Fair Housing Act applies to tenant
screening companies that provide data used by housing owners to make
suitability determinations. Accordingly, DOJ and HUD stated that such companies
are prohibited from engaging in practices that result in discrimination based
on protected characteristics.[31]
In December 2024, the court approved a settlement between SafeRent, the other
defendants, and the class of plaintiffs, and the case was subsequently
dismissed.

HUD Has Opportunities to Further Mitigate Risks Relating to Facial
Recognition

In September 2023, HUD’s Office of Public and Indian
Housing published a letter advising PHAs to balance security concerns with
their public housing residents’ privacy rights when using surveillance
technology.[32]
However, the letter does not provide specific direction on key operational
issues regarding facial recognition technology. For example, it does not
discuss how PHAs should manage privacy risks or share data with law
enforcement.

Representatives of all 10 PHAs we interviewed stated they
would benefit from additional information and direction from HUD on their use
of facial recognition technology, especially on the following topics:

·       Purpose
specification. Six of the 10 PHAs wanted HUD to clarify the permitted uses
of facial recognition technology. While they primarily use it to control
building access for tenants and their authorized guests, they expressed
interest in guidance on other potential uses, such as whether and how to
disclose data to third parties, including law enforcement.

·       Renter
consent. Six of the 10 PHAs wanted guidance on what constitutes adequate
renter consent. For example, they questioned whether posting signs about the
use of facial recognition systems was sufficient. They also sought clarity on
whether written consent is required before including tenant facial images in
system databases, and what steps to take if a renter declined to provide
consent.

·       Data
management. Five of the 10 PHAs wanted guidance on managing data collected
through facial recognition systems. For example, they sought clarity on how
long to retain images after a tenant moved out.

·       Accuracy.
One PHA wanted HUD to provide guidance on mitigating potential accuracy
concerns.

HUD officials stated the agency has no plans to revise the
September 2023 letter or issue additional written direction on facial
recognition technology, citing the need to preserve PHAs’ autonomy in
implementing it. However, as discussed earlier, representatives of six PHAs we
interviewed expressed uncertainty about what steps they should take to obtain
consent when using facial recognition technology as part of their housing
operations.

HUD officials also stated that developing new guidance
would require surveying about 3,300 PHAs to identify their information gaps,
straining limited resources. However, the risks of facial recognition
technology are well documented. For example, we have previously reported on
concerns related to accuracy and the use of the technology without an
individual’s consent.[33]
As a result, we believe HUD could develop written direction for PHAs without
the use of a survey.

According to federal internal control standards, program
managers should externally communicate the necessary quality information to
achieve the entity’s objectives.[34]
By providing additional direction on use of facial recognition technology, HUD
could help PHAs it oversees mitigate privacy and accuracy concerns and offer
clarity on key issues such as purpose, consent, and data management.

Conclusions

The selected proptech tools we reviewed offer benefits to
individuals searching for, living in, or owning or managing rental properties.
However, they also can pose risks—particularly related to the accuracy of
personal information and the potential for misrepresentation and
discrimination. Federal agencies took steps to address these risks, but HUD has
opportunities to further support PHAs it oversees. Providing additional written
direction on the appropriate use of facial recognition technology would give
PHAs greater clarity and help mitigate privacy and accuracy concerns.

Recommendation for
Executive Action

The Secretary of HUD should ensure that the Assistant
Secretary for Public and Indian Housing provides additional written direction
to public housing agencies on the use of facial recognition technology. For
example, this direction could specify permitted uses of the technology, define
what constitutes renter consent, and address data management and accuracy
concerns.

Agency Comments

We provided a draft of this report to HUD, CFPB, FTC, and
DOJ for review and comment. These agencies provided technical comments, which
we incorporated as appropriate. 

As agreed with your office, unless you publicly announce
the contents of this report earlier, we plan no further distribution until 30
days from the report date. At that time, we will send copies to the appropriate
congressional committees, the Secretary of Housing and Urban Development, Chair
of Federal Trade Commission, Acting Director of the Consumer Financial
Protection Bureau, Attorney General, and other interested parties. In addition,
the report will be available at no charge on the GAO website at https://www.gao.gov.

If you or your staff have any questions about this report,
please contact me at cackleya@gao.gov.
Contact points for our Offices of Congressional Relations and Public Affairs
may be found on the last page of this report. GAO staff who made key contributions
to this report are listed in appendix III.

Sincerely,



Alicia Puente Cackley
Director, Financial Markets and Community Investment



Appendix I: Objectives,
Scope, and Methodology



This report examines (1) selected property
technology (proptech) tools available in the rental housing market, how
they are used, and by whom; (2) the benefits and risks that
selected proptech tools may pose for owners and renters; and (3)
steps taken by federal agencies to oversee these selected proptech tools.

We identified thirty four proptech tools through a review
of reports from federal regulators, academics, industry groups, and advocacy
groups. We focused on tools that incorporate artificial intelligence and are
used by owners and renters in the rental housing process. We purposively
selected four types of proptech tools for examination: advertising platforms,
tenant screening tools, rent-setting software, and facial recognition
technology. These tools are not representative of all proptech tools used in the
private and subsidized rental housing markets.

To gather information on owner and renter use of the
selected proptech tools—and the associated benefits and risks—we interviewed
representatives of a purposeful, nongeneralizable sample of 12 companies that
provide such tools. These consisted of three advertising companies, three
tenant screening companies, four facial recognition companies, and two
rent-setting software companies. To identify these companies, we reviewed
research reports, and publicly available lists of firms offering the selected
tools to generate a list of companies. From that list, we selected companies
that offered one or more of the tools and were responsive to our outreach. The
information obtained from these interviews cannot be generalized to all
companies that offer proptech tools in the private and subsidized rental
housing markets.

In addition, we interviewed representatives from four
industry associations and five advocacy organizations, selected because they
published reports from 2019 to 2024 about the selected tools.[35] We also interviewed officials from
two organizations funded by the Fair Housing Initiative Program, a federal
program designed to assist people who believe they have been victims of housing
discrimination.[36]
We selected the two organizations because they work directly with renters, are
in the metropolitan area with the largest number of public housing units based
on Department of Housing and Urban Development (HUD) data and were recipients
of HUD Fair Housing Initiative Program grants within the past 2 years.

To understand the use of and benefits and risks of the
selected proptech tools in the subsidized housing market, we conducted
semi-structured interviews with representatives of a nongeneralizable sample of
10 public housing agencies (PHA). We selected these PHAs to achieve a diversity
in PHA size, Census region, and use of facial recognition technology. The
information we gathered from these interviews cannot be generalized to the
approximately 3300 PHAs.

To identify steps taken by federal agencies to oversee the
selected proptech tools, we reviewed agency guidance, final rulemakings,
federal court orders, agency enforcement actions, and relevant advisory
opinions issued from 2019 through 2024. We analyzed relevant HUD documentation
and interviewed HUD and selected PHA officials on HUD efforts to communicate to
PHAs on the use of surveillance technology in their operations. We also
compared a HUD communication to PHAs about using surveillance technology in their
operations against federal internal control standards.[37] We determined that the internal
control principle that program managers should externally communicate the
necessary quality information to achieve the entity’s objectives was
significant to this objective.

To address all three objectives, we also reviewed relevant
laws, including the Fair Housing Act, the Fair Credit Reporting Act, the
Federal Trade Commission Act, and the Sherman Antitrust Act. We also reviewed
relevant regulations, such as HUD’s regulation on discriminatory advertising. In
addition, we interviewed representatives from the following federal agencies:
Consumer Financial Protection Bureau, Department of Justice, Federal Trade
Commission, and HUD. Within HUD, we interviewed officials from the Office of
Public and Indian Housing, Office of Multifamily Housing, Office of Policy
Development and Research, and Office of Fair Housing and Equal Opportunity.[38]

We conducted this performance audit from November 2023 to
July 2025 in accordance with generally accepted government auditing standards.
Those standards require that we plan and perform the audit to obtain
sufficient, appropriate evidence to provide a reasonable basis for our findings
and conclusions based on our audit objectives. We believe that the evidence
obtained provides a reasonable basis for our findings and conclusions based on
our audit objectives.



Appendix II: Selected
Actions Federal Agencies Took Related to Property Technology Use in the Rental
Housing Context, 2019–2024



This appendix provides information on selected legal
actions or guidance initiated by federal agencies from 2019 through 2024
related to tenant screening, advertising platforms, or rent-setting software.




 
  
  DOJ
  
  
  Litigation
  
  
  Rent-setting software. In 2024, the Department
  of Justice (DOJ) and attorneys general from eight states initiated a civil
  antitrust lawsuit against RealPage, Inc, a company that develops and sells
  rent-setting software.a The complaint alleges that the company’s
  software enables rental housing owners to share confidential, competitively
  sensitive information—such as rental prices and lease terms—allowing them to
  align rents and reduce competition in violation of the Sherman Act. In
  December 2024, RealPage moved to dismiss, arguing that its software lacked
  market-wide influence and that DOJ failed to show anticompetitive effects.
  Additionally, in 2025, DOJ amended its complaint to include certain property
  owners.b 
  
 
 
  
  HUD-DOJ
  
  
  Amicus brief
  
  
  Tenant screening. In Connecticut Fair Housing
  Center v. CoreLogic Rental Property Solutions LLC, the Department of Housing
  and Urban Development (HUD) and DOJ filed a joint amicus brief in support of
  plaintiffs-appellants-cross-appellees. The brief asserted that tenant
  screening companies such as CoreLogic are subject to the Fair Housing
  Act—even if they are not the entities rejecting or accepting potential
  renters—because their reports to owners can be used to make housing
  unavailable. The agencies also underscored that blanket exclusions based on
  criminal history can disproportionately affect minority groups.c
  They cited HUD’s 2016 guidance warning that such practices may violate the
  Fair Housing Act if not based on a substantial, legitimate, nondiscriminatory
  interest.d 
  
 
 
  
  DOJ
  
  
  Statement of interest
  
  
  Rent-setting software. In September 2023,
  plaintiffs filed an amended complaint alleging that RealPage and several
  property-management companies engaged in a price-fixing conspiracy in
  violation of Section 1 of the Sherman Act. They claimed RealPage’s
  rent-setting software facilitated the conspiracy by aggregating and sharing
  nonpublic rental data among competing property owners and managers. In
  November 2023, DOJ submitted a statement of interest arguing that such
  software enables owners to share nonpublic, sensitive information,
  potentially leading to coordinated rental housing prices.e This
  coordination, DOJ asserted, harms competition among owners and keeps prices
  artificially high for renters. 
  
 
 
  
  FTC-DOJ
  
  
  Statement of interest
  
  
  Rent-setting software. In September 2023, the
  plaintiff filed a class action lawsuit in federal court against Yardi
  Systems, Inc. and multiple property management companies.f The
  lawsuit alleges that the defendants collaborated to fix rental housing prices
  using Yardi’s rent-setting software. In December 2023, the defendants moved
  to dismiss, contending that each company independently chose to use Yardi’s
  software and set rents on its own. In March 2024, DOJ and the Federal Trade
  Commission (FTC) issued a joint statement of interest. They noted that owners’
  collective reliance on Yardi’s rent-setting algorithm could facilitate
  price-fixing agreements in potential violation of the Sherman Act. The
  agencies also noted that even without direct communication among owners or
  strict adherence to algorithm’s recommendations, shared use of the technology
  might lead to coordinated pricing, harming consumers through reduced
  competition. In December 2024, the federal court denied the motion to
  dismiss.g
  
 


Source: GAO analysis.  |  GAO‑25‑107196

aUnited States v. RealPage, Inc., No.
1:24-cv-710 (M.D.N.C. filed Aug. 23, 2024).

bThe six owners are Greystar Real Estate
Partners, Cushman & Wakefield, Camden Property Trust, LivCor, Pinnacle
Property Management Services, and Willow Bridge Property Company. The January
2025 amended complaint initially included Cortland Management, but on the same
date the United States and Cortland reached a final judgement where Cortland
agree to certain changes and to refrain from certain actions. In February 2025,
following the amended complaint, RealPage filed another motion to dismiss the
amended complaint which contained similar arguments on these points. As of June
26, 2025, the parties are awaiting court decisions on a motion to dismiss and a
proposed final judgment.

cIn Connecticut Fair Housing Center v.
CoreLogic Rental Property Solutions, the plaintiff alleged that CoreLogic’s
tenant screening tool, CrimeSAFE, discriminated based on race, national origin,
and disability when the tool’s use resulted in the denial of a disabled Latino
man with no criminal conviction from moving in with his mother, alleging
violations of the Fair Housing Act, Fair Credit Reporting Act, and the
Connecticut Unfair Trade Practice Act. No. 3:18-cv-705 (D. Conn.). The United
States District Court for the District of Connecticut ruled in favor of the
plaintiff for the Fair Credit Reporting Act claim but ruled in CoreLogic’s
favor for the Fair Housing Act and Connecticut Unfair Trade Practice Act
claims. The plaintiffs appealed the district court’s denial of their Fair
Housing Act claims, among others, and CoreLogic then cross-appealed the court’s
decision relating to the Fair Credit Reporting Act claim. In November 2024, the
parties, and the United States as amicus curiae supporting the plaintiff,
presented arguments in the United States Court of Appeals for the Second
Circuit. As of June 26, 2025, the Second Circuit had not issued a decision.
Conn. Fair Hous. Ctr. v. CoreLogic Rental Prop. Sol., LLC, No. 23-1166 (2d Cir.
argued Nov. 20, 2024).

dDepartment of Housing and Urban Development,
Office of General Counsel, Guidance on Application of Fair Housing Standards to
the Use of Criminal Records by Providers of Housing and Real Estate-Related
Transactions (Washington D.C.: April 2016); and Guidance on Fair Housing Act
Protections for Tenant Screening Practices Involving Criminal History
(Washington D.C.: June 2022).

eIn re RealPage, No.
3:23-MD-3071 (M.D. Tenn). In February 2025, following the amended
complaint, RealPage filed another motion to dismiss the amended complaint,
which contained similar arguments on these points. As of June 2025, the court
had not held oral arguments for RealPage’s motion to dismiss. The other
defendant property management companies subsequently filed separate motions to
dismiss on their own behalf. Settlement agreements have been reached with
multiple defendants. As of June 2025, the case was ongoing. 

fDuffy v. Yardi Sys., Inc., No. 2:23-cv-01391
(W.D. Wash.).

gAs of June, 2025, the case was ongoing.




 
  
   
   Topic
   
   
   Status
   
   
   Summary of advisory opinion
   
  
 
 
  
  Name-only matching procedures
  
  
  Withdrawn
  
  
  In November 2021, the Consumer Financial Protection
  Bureau (CFPB) published an advisory opinion stating that name-only matching
  procedures—those based solely on the similarity of first and last names—do
  not meet the Fair Credit Reporting Act’s (FCRA) requirement to use reasonable
  procedures to ensure maximum possible accuracy when generating consumer
  reports.a The opinion notes that relying solely on a person’s
  first and last name could lead to inaccurate information being included in a
  consumer report. CFPB withdrew this guidance on May 12, 2025. 
  
 
 
  
  Facially false data
  
  
  Active
  
  
  In October 2022, CFPB published an advisory opinion
  stating that consumer reporting agencies must implement reasonable procedures
  to detect and prevent the inclusion of facially false (logically
  inconsistent) data when generating consumer reports.b Examples
  include reporting a delinquency that predates the account opening or an
  account closure date that predates the consumer’s listed date of birth. 
  
 
 
  
  Report accuracy
  
  
  Withdrawn
  
  
  In January 2024, CFPB issued an advisory opinion on
  background reports.c The opinion clarifies that consumer reporting
  agencies must implement reasonable procedures to ensure that reports do not
  include information that is duplicative, expunged, sealed, or otherwise
  restricted from public access. Each adverse item is also subject to its own
  reporting period. For example, a criminal charge that did not result in a
  conviction generally cannot be reported more than 7 years after the date of
  the charge. CFPB withdrew this guidance on May 12, 2025. 
  
 
 
  
  File disclosures
  
  
  Withdrawn
  
  
  In January 2024, CFPB issued an advisory opinion on
  file disclosures.d The opinion underscores that under FCRA,
  consumers have the right to request and obtain all information in their
  consumer file at the time of request. The opinion explains how consumer
  reporting agencies must fulfill this request even if the consumer does not
  explicitly ask for a “complete file” and also must disclose the sources used
  to generate the report. CFPB withdrew this guidance on May 12, 2025. 
  
 


Source: GAO analysis of CFPB advisory opinions.  |  GAO‑25‑107196

CFPB issues advisory opinions to publicly address
uncertainty about its existing regulations and provide guidance to regulated
entities.

aConsumer Financial Protection Bureau, Fair
Credit Reporting: Name-Only Matching Procedures (Washington, D.C.: Nov. 4,
2021).

bConsumer Financial Protection Bureau, Fair
Credit Reporting: Facially False Data (Washington D.C.: Oct. 20, 2022).

cConsumer Financial Protection Bureau, Fair
Credit Reporting; Background Screening (Washington D.C.: Jan. 11, 2024).

dConsumer Financial Protection Bureau, Fair
Credit Reporting: File Disclosures (Washington, D.C.: Jan. 11, 2024).



Appendix III: GAO
Contact and Staff Acknowledgments



GAO Contact

Alicia Puente Cackley, CackleyA@gao.gov.

Staff Acknowledgments

In addition to the contact named above, Cory Marzullo
(Assistant Director), Brandon Jones (Analyst in Charge), Daniel Horowitz, Lydie
Loth, Marc Molino, Barbara Roesmann, Jessica Sandler, Tristan Shaughnessy,
Norma-Jean Simon, and Sean Worobec made key contributions to this report.

GAO’s Mission

The Government Accountability
Office, the audit, evaluation, and investigative arm of Congress, exists to
support Congress in meeting its constitutional responsibilities and to help
improve the performance and accountability of the federal government for the
American people. GAO examines the use of public funds; evaluates federal
programs and policies; and provides analyses, recommendations, and other
assistance to help Congress make informed oversight, policy, and funding
decisions. GAO’s commitment to good government is reflected in its core values
of accountability, integrity, and reliability.

Obtaining Copies of GAO Reports and Testimony

The fastest and easiest way to obtain copies of GAO documents at no cost
is through our website. Each weekday afternoon, GAO posts on its website newly released reports, testimony, and
correspondence. You can also subscribe to GAO’s email
updates to receive notification of newly posted products.

Order by Phone

The price of each GAO publication reflects GAO’s actual
cost of production and distribution and depends on the number of pages in the
publication and whether the publication is printed in color or black and white.
Pricing and ordering information is posted on GAO’s website, https://www.gao.gov/ordering.htm. 

Place orders by calling (202) 512-6000, toll free (866) 801-7077,
or 
TDD (202) 512-2537.

Orders may be paid for using
American Express, Discover Card, MasterCard, Visa, check, or money order. Call
for additional information.

Connect with GAO

Connect with GAO on X,
LinkedIn, Instagram, and YouTube.
Subscribe to our Email Updates. Listen to our Podcasts.
Visit GAO on the web at https://www.gao.gov.

To Report Fraud, Waste, and Abuse in Federal
Programs

Contact FraudNet:

Website: https://www.gao.gov/about/what-gao-does/fraudnet

Automated answering system: (800) 424-5454

Media Relations

Sarah Kaczmarek, Managing Director, Media@gao.gov 

Congressional Relations

A. Nicole Clowers, Managing Director, CongRel@gao.gov

General Inquiries

https://www.gao.gov/about/contact-us





[1]Artificial intelligence, in
general, refers to computer systems that can solve problems and perform tasks
that have traditionally required human intelligence and that continually get
better at their assigned tasks. The White House, Office of Science and Technology
Policy, American Artificial Intelligence Initiative:
Year One Annual Report (Washington, D.C.: February 2020). Machine
learning, a type of artificial intelligence, uses algorithms to identify
patterns in information.

[2]We use “tenant screening”
throughout this report to refer to tools that seek to assess the suitability of
prospective renters for rental housing. In all other contexts, we use “renter”
rather than “tenant.” We use “owners” to refer to individuals who own rental
property, as well as those individuals or entities—such as property
managers—acting on their behalf. 

[3]Several resources we reviewed
rely on the disparate-impact theory of liability, mentioned below. Under
Executive Order 14281, executive departments and agencies are tasked with—among
other things—repealing or amending rules and regulations to the extent they
contemplate disparate-impact liability and evaluating and taking appropriate
action regarding pending investigations and proceedings and existing consent
judgments and permanent injunctions relying on theories of disparate-impact
liability. Executive Order 14281: Restoring Equality of Opportunity and
Meritocracy, 90 Fed. Reg. 17537 (Apr. 28, 2025). As of May 8, 2025, the rules,
regulations, and legal actions mentioned below have not been amended or
repealed, though they may be affected to the extent they rely on the
disparate-impact theory of liability. On February 9, 2025, the National
Treasury Employees Union and others filed a lawsuit in the District Court for
the District of Columbia alleging that the actions of the Acting Director of
CFPB including regarding staffing and enforcement work violated the
Administrative Procedure Act and were unconstitutional because they violated
the Congressional mandate in the Dodd-Frank Wall Street Reform and Consumer
Protection Act for CFPB to perform its statutory functions. Nat’l Treasury
Emp. Union, et al. v. Vought, 1:25-cv-00381 (D.D.C. filed Feb. 9,
2025). As of May 2025, the litigation is active and continues in both the
District Court for the District of Columbia and the DC Circuit Court of
Appeals. 

[4]GAO, Standards for Internal Control in the Federal Government,
GAO‑14‑704G
(Washington, D.C.: Sept. 10, 2014). 

[5]Fair Housing Act, Pub. L. No.
90-284, 82 Stat. 73, 81–89, §§ 801–819 (1968), as amended (codified at 42
U.S.C. §§ 3601–3619). Protected characteristics under the act include
race, color, religion, national origin, sex, disability, and familial status.
HUD also provides funding to Fair Housing Initiative Program organizations to
assist individuals who believe they have been victims of housing
discrimination. These organizations also conduct preliminary investigations of
discriminatory claims, including sending “testers” to properties suspected of
practicing housing discrimination. State and local governments may enforce
their own statutes and ordinances that are substantially equivalent to the Fair
Housing Act. 

[6]If an election is made, HUD
refers the case to DOJ, which then files a complaint in federal court. If no
election is made, HUD will litigate the case before its administrative law
judges. 

[7]15 U.S.C. §§ 1681-1681. CFPB
also has supervisory authority over covered persons, including certain consumer
reporting agencies, with respect to compliance with FCRA. 12 U.S.C §§
5511(c)(4); 5481(6), (14), (15)(A)(ix); 5514–5516.

[8]In 2023, FTC and CFPB jointly
issued a request for information seeking public input on the use of algorithms
in tenant screening. The request also asked about the potential for
discriminatory outcomes related to the use of criminal history and eviction records
in the rental housing process. Agency officials told us they issued the request
for general information-gathering purposes. 

[9]15 U.S.C. § 45. 

[10]As
of May, 2025, approximately 970,000 households were living in public housing.
The Housing Choice Voucher program subsidizes the rents of more than 2.3
million households. We did not include HUD’s Office of Multifamily Housing in
our review because it is not directly responsible for overseeing the use of the
selected proptech tools in subsidized properties, according to officials.

[11]The information is typically
obtained from sources such as potential renters, third-party vendors,
courthouses, and other consumer reporting agencies.

[12]Consumer Financial Protection
Bureau, Consumer Snapshot: Tenant Background Checks
(Washington D.C.: November 2022). CFPB’s reported data were the most current
data available as of May 2025. 

[13]GAO, Artificial Intelligence in Health Care: Benefits and
Challenges of Technologies to Augment Patient Care, GAO‑21‑7SP (Washington,
D.C.: Nov. 30, 2020).

[14]There are two principal
theories of liability for discrimination: disparate treatment and disparate impact.
Disparate impact can occur when a facially neutral policy or practice may be
unlawfully discriminatory because it has a disproportionately negative impact
on members of a protected class without a legitimate business need or where
that need could be achieved as well through less discriminatory means. Disparate
impact may occur when an algorithm uses a variable that does not directly refer
to a protected class but still leads to disparate outcomes for certain groups.
In 2015, the Supreme Court upheld the application of disparate impact under the
Fair Housing Act in Tex. Dep’t of Hous. & Cmty. Aff. v. The Inclusive
Cmties. Project, Inc., 576 U.S. 519 (2015). In April 2025, the President issued
an Executive Order establishing a policy to eliminate the use of disparate
impact liability in all contexts to the maximum degree possible. The Executive
Order directs all federal agencies to deprioritize enforcement of statutes and
regulations that include disparate impact liability. Executive Order 14281:
Restoring Equity of Opportunity and Meritocracy, 90 Fed. Reg. 17537 (Apr. 28,
2025).

[15]In 2024, HUD supplemented
public data with six private-sector data sources as part of its methodology to
determine fair market rents. These sources were: (1) Apartment List Rent
Estimate; (2) CoStar Group average effective rent; (3) CoreLogic’s
single-family, combined 3-bedroom median rent index; (4) Moody’s Analytics
average gross revenue per unit; (5) RealPage’s average effective rent per unit;
and (6) Zillow’s Observed Rent Index. 

[16]Calder-Wang,
Sophie and Gi Heung Kim, Algorithmic Pricing in
Multifamily Rentals: Efficiency Gains or Price Coordination? (Aug. 16,
2024). 

[17]The study also found that
owners that used rent-setting software decreased rents to increase occupancy
rates during economic downturns. 

[18]We previously reported that
accuracy in facial recognition has been found to be variable and
demographically biased. See GAO, Biometric
Identification Technologies: Considerations to Address Information Gaps and
Other Stakeholder Concerns, GAO‑24‑106293
(Washington, D.C: Apr. 22, 2024). 

[19]For additional information on
the accuracy of facial recognition technology across demographics, see GAO, Facial Recognition Technology: Privacy and Accuracy Issues
Related to Commercial Uses, GAO‑20‑522 (Washington,
D.C.: July 13, 2020). 

[20]We limited our discussion of
agency actions to finalized legal judgments and executed compliance agreements.
Appendix II includes information on currently active legal actions initiated by
HUD, DOJ, and FTC related to the proptech tools we reviewed. Executive Order
14281 requires agencies to evaluate existing consent judgments and permanent
injunctions that rely on theories of disparate impact liability and to take
appropriate actions with respect to matters consistent with the order. The
order eliminates the use of disparate impact liability in all contexts to the
maximum degree possible. The agencies have 90 days from April 23, 2025 to
complete the review. The agencies may make decisions that impact the cases
listed in this report. As of May 6, 2025, the agencies have not made public
notification of any changes to these closed cases based on Executive Order
14281. 

[21]Fed. Trade Comm’n et al. v.
Roomster, 1:22-cv-07389 (S.D.N.Y.). Separately, another defendant was ordered
to stop selling consumer reviews or endorsements and fined.

[22]Facebook, a social media
platform owned by Meta, displays advertisements to users, including those for
rental housing opportunities. 

[23]United States v. Meta
Platforms, Inc, f/k/a Facebook, Inc., No. 1:22-cv-05187 (S.D.N.Y). 

[24]Department of Housing and
Urban Development, Guidance on Application of the
Fair Housing Act to the Advertising of Housing, Credit, and Other Real
Estate-Related Transactions through Digital Platforms (Washington, D.C.:
April 2024). 

[25]Department of Housing and
Urban Development, Guidance on the Application of
the Fair Housing Act to the Screening of Applicants for Rental Housing
(Washington, D.C.: April 2024). HUD issued the guidance in response to
Executive Order 14110, which required HUD to issue guidance on the use of
artificial intelligence in housing decisions. Executive Order 14110 was
rescinded on January 20, 2025, by Executive Order 14148.

[26]The White House, Ending Radical and Wasteful Government DEI Programs and
Preferencing, Executive Order 14151 (Washington, D.C.: Jan. 20, 2025).

[27]United States v. AppFolio,
Inc., No. 1:20-cv-03563 (D.D.C.). 

[28]Fed. Trade Comm’n v.
TransUnion Rental Screening Sol., No. 1:23-cv-02659 (D. Colo.). See also, In re TransUnion, 2023-CFPB-0011 (Oct. 12, 2023).

[29]Fed. Trade Comm’n v. Instant
Checkmate, LLC et al., No. 3:23-cv-01674 (S.D. Cal.). The five affiliated
companies are Instant Checkmate, Truthfinder, Intelicare Direct, The Control
Group Media Company, and PubRec. FTC alleged in its complaint that all five
companies operated as a common enterprise while engaging in the alleged
unlawful acts and practices.   

[30]Louis
et al v. SafeRent Sol., LLC and Metro. Mgmt. Grp., No. 1:22-cv-10800 (D.
Mass.) DOJ is authorized under 28 U.S.C. §§ 516 and 517 to file statements of
interest in federal and state court cases between private parties in which the
United States has an interest.

[31]In July 2023, the court denied
the defendants’ motions to dismiss the Fair Housing Act claim and permitted the
case to proceed against SafeRent and the other defendants. The court dismissed
certain counts against SafeRent that were unrelated to the Fair Housing Act.

[32]Department of Housing and
Urban Development, Office of Public and Indian Housing, Letter to Public Housing Agencies (Sep. 22, 2023).
As stated previously, as of May 2025, approximately 970,000 households were
living in public housing. As administrator of the public housing program, HUD
is responsible for providing guidance to PHAs on operations, including use of
surveillance technology. 





[35]The industry associations are
the Consumer Data Industry Association, National Apartments Association,
National Multifamily Housing Council, and Security Industry Association. The
advocacy organizations are the National Fair Housing Alliance, National Low
Income Housing Coalition, American Civil Liberties Union, Center for Democracy
and Technology, and National Consumer Law Center. 

[36]The two Fair Housing
Initiative Program organizations are Brooklyn Legal Service and the Fair
Housing Justice Center. 

[37]GAO, Standards for Internal Control in the Federal Government,
GAO‑14‑704G
(Washington, D.C.: Sept. 10, 2014). 

[38]We did not include HUD’s
Office of Multifamily Housing in our review because it is not directly
responsible for overseeing the use of the selected proptech tools in subsidized
properties, according to officials. 

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[You Have to Feel It]]></title>
            <link>https://mitchellh.com/writing/feel-it</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45075048</guid>
            <description><![CDATA[You see a series of checkboxes checked. Schedules met.
Requirements satisfied. Demos delivered.
It's a good day. Good job, you, good job! A promotion is in sight.]]></description>
            <content:encoded><![CDATA[You see a series of checkboxes checked. Schedules met.
Requirements satisfied. Demos delivered.
It's a good day. Good job, you, good job! A promotion is in sight.
But you didn't feel it. You didn't feel it.
We, as people, feel something with every interaction. Frustration, joy, relief,
confidence. A feeling. A person interacts with our work. Our work evokes
a feeling. The feeling matters. The feeling is part of the work. The
desired feeling is part of the requirements.
When you feel it, you know. The feature makes you smile when you use it.
It fits right in, like it was always meant to be there. You want to
use it again. You want to tell people about it.
This is the difference. This is what metrics, specifications, and demos
miss. They don't capture the feeling. For the people who will use and live
in the work, the feeling is part of their daily experience. Which means
you can't stop at checking the boxes on paper. You have to sit with it,
use it, live with it.
You have to feel it.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Condor's Cuzco RISC-V Core at Hot Chips 2025]]></title>
            <link>https://chipsandcheese.com/p/condors-cuzco-risc-v-core-at-hot</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45074895</guid>
            <description><![CDATA[Condor Computing, a subsidiary of Andes Technology that creates licensable RISC-V cores, has a business model with parallels to Arm (the company) and SiFive.]]></description>
            <content:encoded><![CDATA[Condor Computing, a subsidiary of Andes Technology that creates licensable RISC-V cores, has a business model with parallels to Arm (the company) and SiFive. Andes formed Condor in 2023, so Condor is a relatively young player on the RISC-V scene. However, Andes does have RISC-V design experience prior to Condor’s formation with a few RISC-V cores under their belt from years past.Condor is presenting their Cuzco core at Hot Chips 2025. This core is a heavyweight within the RISC-V scene, with wide out-of-order execution and a modern branch predictor and some new time based tricks. It’s in the same segment as high performance RISC-V designs like SiFive’s P870 and Veyron’s V1. Like those cores, Cuzco should stand head and shoulders above currently in-silicon RISC-V cores like Alibaba T-HEAD’s C910 and SiFive’s P550.Besides being a wide out-of-order design, Cuzco uses mostly static scheduling in the backend to save power and reduce complexity. Condor calls this a “time-based” scheduling scheme. I’ll cover more on this later, but it’s important to note that this is purely an implementation detail. It doesn’t require ISA modifications or special treatment from the compiler for optimal performance.Cuzco is a 8-wide out-of-order core with a 256 entry ROB and clock speed targets around 2 GHz SS (Slow-Slow) to 2.5 GHz (Typical-Typical) on TSMC’s 5nm process. The pipeline has 12 stages counting from instruction fetch to data cache access completion. However, a 10 cycle mispredict penalty probably more accurately describes the core’s pipeline length relative to its competitors.As a licensed core, Cuzco is meant to be highly configurable to widen its target market. The core is built from a variable number of execution slices. Customization options also include L2 TLB size, off-cluster bus widths, and L2/L3 capacity. Condor can also adjust the size of various internal core structures to meet customer performance requirements. Cuzco cores are arranged into clusters with up to eight cores. Clusters interface with the system via a CHI bus, so customers can bring their own network-on-chip (NoC) to hit higher core counts via multi-cluster setups.Cuzco’s frontend starts with a sophisticated branch predictor, as is typical for modern cores targeting any reasonable performance level. Conditional branches are handled via a TAGE-SC-L predictor. TAGE stands for Tagged Geometric, a technique that uses multiple tables each handling a different history length. It seeks to efficiently use branch predictor storage by selecting the most appropriate history length for each branch, as opposed to older techniques that use a fixed history length. The SC (Statistical Corrector) part handles the small subset of branches where TAGE doesn’t work well, and can invert the prediction if it sees TAGE often getting things wrong under certain circumstances. Finally, L indicates a loop predictor. A loop predictor is simply a set of counters that come into play for branches that are taken a certain number of times, then not taken once. If the branch predictor detects such loop behavior, the loop predictor can let it avoid mispredicting on the last iteration of the loop. Basically, TAGE-SC-L is an augmented version of the basic TAGE predictor.AMD’s Zen 2, Ampere’s AmpereOne, and Qualcomm’s Oryon also use TAGE predictors of some sort, and achieve excellent branch prediction accuracy. AMD, Ampere, and Qualcomm also likely augment the basic TAGE prediction strategy in some way. How Cuzco’s TAGE predictor performs will depend on how large its history tables are, as well as how well the predictor is tuned (selection of index vs tag bits, history lengths, distribution of storage budget across TAGE tables, etc). For Cuzco’s part, they’ve disclosed that the TAGE predictor’s base component uses a 16K entry table of bimodal counters.Branch target caching on Cuzco is provided by a 8K entry branch target buffer (BTB) split into two levels. Condor’s slides show the BTB hit/miss occurring on the cycle after instruction cache access starts, so a taken branch likely creates a single pipeline bubble. Returns are predicted using a 32 entry return stack. Cuzco also has an indirect branch predictor, which is typical on modern CPUs.Cuzco’s instruction fetch logic feeds from a 64 KB 8-way set associative instruction cache, and speeds up address translations with a 64 entry fully associative TLB. The instruction fetch stages pull an entire 64B cacheline into the ICQ (instruction cache queue), and then pull instructions from that into an instruction queue (XIQ). The decoders feed from the XIQ, and can handle up to eight instructions per cycle.Much of the action in Condor’s presentation relates to the rename and allocate stage, which acts as a bridge between the frontend and out-of-order backend. In most out-of-order cores, the renamer carries out register renaming and allocates resources in the backend. Then, the backend dynamically schedules instructions as their dependencies become available. Cuzco’s renamer goes a step further and predicts instruction schedules as well.One parallel to this is Nvidia’s static scheduling in Kepler and subsequent GPU architectures. Both simplify scheduling by telling an instruction to execute a certain number of cycles in the future, rather than having hardware dynamically check for dependencies. But Nvidia does this in their compiler because GPU ISAs aren’t standardized. Cuzco still uses hardware to create dynamic schedules, but moves that job into the rename/allocate stage rather than the schedulers in the backend. Schedulers can be expensive structures in conventional out-of-order CPUs, because they have to check whether instructions are ready to execute every cycle. On Cuzco, the backend schedulers can simply wait a specified number of cycles, and then issue an instruction knowing the dependencies will be ready by then.To carry out time-based scheduling, Cuzco maintains a Time Resource Matrix (TRM), which tracks utilization of various resources like execution ports, functional units, and data buses for a certain number of cycles in the future. The TRM can look 256 cycles into the future, which keeps storage requirements under control. Because searching a 256 row matrix in hardware would be extremely expensive, Cuzco only looks for available resources in a small window after an instruction’s dependencies are predicted to be ready. Condor found searching a window of eight cycles provided a good tradeoff. Because the renamer can handle up to eight instructions, it at most has to access 64 rows in the TRM per cycle. If the renamer can’t find free resources in the search window, the instruction will be stalled at the ID2 stage.Another potential limitation is the TRM size, which could be a limitation for long latency instructions. However, the longest latency instructions tend to be loads that miss cache. Cuzco always assumes a L1D hit for TRM scheduling, and uses replay to handle L1D misses. That means stalls at ID2 from TRM size limitations should also be rare.Compared to a hypothetical “greedy” setup, where the core is able to create a perfect schedule with execution resource limitations in mind, limiting the TRM search window decreases performance by a few percent. Condor notes that creating a core to match the “greedy” figure may not even be possible. A conventional out-of-order core wouldn’t have TRM-related restrictions, but may face difficulties creating an optimal schedule for other reasons. For example, a distributed scheduler may have several micro-ops become ready in one scheduling queue, and face “false” delays even though free execution units may be available on other scheduling queues.Static scheduling only works when instruction latencies are known ahead of time. Some instructions have variable latency, like loads that can miss caches or TLBs, encounter bank conflicts, or require store forwarding. As mentioned before, Cuzco uses instruction replay to handle variable latency instructions and the associated dynamic behavior. The renamer does take some measures to reduce replays, like checking to see if a load gets its address from the same register as a prior store. However, it doesn’t attempt to predict memory dependencies like Intel’s Core 2, and also doesn’t try to predict whether a load will miss cache.Out of order execution in Cuzco is relatively simple, because the rename/allocate stage takes care of figuring out when instructions will execute. Each instruction is simply held within the schedulers until a specified number of cycles pass, after which it’s sent for execution. If the rename/allocate stage guesses wrong, replay gets handled via “poison” bits. The erroneously executed instruction’s result data is effectively marked as poisoned, and any instructions consuming that data will get re-executed. Replaying instructions costs power and wastes execution throughput, so replays should ideally be a rare event. 70.07 replays per 1000 instructions feels like a bit of a high figure, but likely isn’t a major problem because execution resources are rarely a limitation in an out-of-order core. Taking about 7% more execution resources may be an acceptable tradeoff, considering most modern chips rarely use their core width in a sustained fashion.Execution resources are grouped into slices, each of which have a pair of pipelines. A slice can execute all of the core’s supported RISC-V instructions, making it easy to scale execution resources by changing slice count. Each slice consists of a set of execution queues (XEQs), which hold micro-ops waiting for a functional unit. Cuzco has XEQs per functional unit, unlike conventional designs that tend to have a scheduling queue that feeds all functional units attached to an execution port. Four register read ports supply operands to the slice, and two write ports handle result writeback. Bus conflicts are handled by the TRM as well. A slice cannot execute more than two micro-ops per cycle, even doing so would not oversubscribe the register read ports. For example, a slice can’t issue an integer add, a branch, and a load in the same cycle even though that would only require four register inputs.XEQs are sized to match workload characteristics, much like tuning a distributed scheduler. While XEQ sizes can be set to match customer requirements, Condor was able to give some figures for a baseline configuration. ALUs get 16 entry queues, while branches and address generation units (LS) get 8 entry queues. XEQ sizes are adjustable in powers of two, from 2 to 32 entries. There’s generally a single cycle of latency for forwarding between slices. The core can be configured to do zero cycle cross-slice forwarding, but that would be quite difficult to pull off.On the vector side, Cuzco supports 256/512-bit VLENs via multiple micro-ops, which are distributed across the execution slices. Execution units are natively 64 bits wide. There’s one FMA unit per slice, so peak FP32 throughput is eight FMA operations per cycle, or 16 FLOPS when counting the add and multiply as separate operations. FP adds execute with 2 cycle latency, while FP multiplies and multiply-adds have four cycle latency. The two cycle FP add latency is nice to see, and matches recent cores like Neoverse N1 and Intel’s Golden Cove, albeit at much lower clocks.Cuzco’s load/store unit has a 64 entry load queue, a 64 entry store queue, and a 64 entry queue for data cache misses. Loads can leave the load queue after accessing the data cache, likely creating behavior similar to AMD’s Zen series where the out-of-order backend can have far more loads pending retirement than the documented load queue capacity would suggest. The core has four load/store pipelines in a four slice configuration, or one pipeline per slice. Maximum load bandwidth is 64B/cycle, achievable with vector loads.The L1D is physically indexed and physically addressed (PIPT), so address translation has to complete before L1D access.To speed up address translation, Cuzco has a 64 entry fully associative data TLB. The L2 TLB is 4-way set associative, and can have 1K, 2K, or 4K entries. Cuzco’s core private, unified L2 cache has configurable capacity as well. An example 2 MB L2 occupies 1.04 mm2 on TSMC 5nm.Eight cores per cluster share a L3 cache, which is split into slices to handle bandwidth demands from multiple cores. Each slice can deliver 64B/cycle, and slice count matches core count. Thus Cuzco enjoys 64B/cycle of load bandwidth throughout the cache hierarchy, of course with the caveat that L3 bandwidth may be lower if accesses from different cores clash into the same slice. Cores and L3 slices within a cluster are linked by a crossbar. The L3 cache can run at up to core clock. Requests to the system head out through a 64B/cycle CHI interface. System topology beyond the cluster is up to the implementer.Replays for cache misses are carried out by rescheduling the data consumer to a later time when data is predicted to be ready. Thus a L3 hit would cause a consuming instruction to be executed three times - once for the predicted L1D hit, once for the predicted L2 hit, and a final time for the L3 hit with the correct data.High performance CPU design has settled down over the past couple decades, and converged on an out-of-order execution model. There’s no denying that out-of-order execution is difficult. Numerous alternatives have been tried through the years but didn’t have staying power. Intel’s Itanium sought to use an ISA-based approach, but failed to unseat the company’s own x86 cores that used out-of-order execution. Nvidia’s Denver tried to dynamically compile ARM instructions into microcode bundles, but that approach was not carried forward. All successful high performance designs today generally use the same out-of-order execution strategy, albeit with plenty of variation. That’s driven by the requirements of ISA compatibility, and the need to deliver high single threaded performance across a broad range of applications. Breaking from the mould is obviously fraught with peril.Condor seeks to break from the mould, but does so deep in the core in a way that should be invisible to software a functional perspective, and mostly invisible from a performance perspective. The core runs RISC-V instructions and thus benefits from that software ecosystem, unlike Itanium. It doesn’t rely on a compiled microcode cache like Denver, so it doesn’t end up running in a degraded performance beyond what a typical OoO core would see when dealing with poor code locality. Finally, instruction replay effectively creates dynamic schedules and handles cache missesIf you like the content then consider heading over to the Patreon or PayPal if you want to toss a few bucks to Chips and Cheese. Also consider joining the Discord.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AI models need a virtual machine]]></title>
            <link>https://blog.sigplan.org/2025/08/29/ai-models-need-a-virtual-machine/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45074467</guid>
        </item>
        <item>
            <title><![CDATA[Cognitive load is what matters]]></title>
            <link>https://github.com/zakirullin/cognitive-load</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45074248</guid>
            <description><![CDATA[🧠 Cognitive Load is what matters. Contribute to zakirullin/cognitive-load development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[Cognitive Load is what matters
Readable version | Chinese translation | Korean translation | Turkish translation
It is a living document, last update: August 2025. Your contributions are welcome!
Introduction
There are so many buzzwords and best practices out there, but most of them have failed. We need something more fundamental, something that can't be wrong.
Sometimes we feel confusion going through the code. Confusion costs time and money. Confusion is caused by high cognitive load. It's not some fancy abstract concept, but rather a fundamental human constraint. It's not imagined, it's there and we can feel it.
Since we spend far more time reading and understanding code than writing it, we should constantly ask ourselves whether we are embedding excessive cognitive load into our code.
Cognitive load

Cognitive load is how much a developer needs to think in order to complete a task.

When reading code, you put things like values of variables, control flow logic and call sequences into your head. The average person can hold roughly four such chunks in working memory. Once the cognitive load reaches this threshold, it becomes much harder to understand things.
Let's say we have been asked to make some fixes to a completely unfamiliar project. We were told that a really smart developer had contributed to it. Lots of cool architectures, fancy libraries and trendy technologies were used. In other words, the author had created a high cognitive load for us.


We should reduce the cognitive load in our projects as much as possible.

  Cognitive load and interruptions
  

Types of cognitive load
Intrinsic - caused by the inherent difficulty of a task. It can't be reduced, it's at the very heart of software development.
Extraneous - created by the way the information is presented. Caused by factors not directly relevant to the task, such as smart author's quirks. Can be greatly reduced. We will focus on this type of cognitive load.


Let's jump straight to the concrete practical examples of extraneous cognitive load.

We will refer to the level cognitive load as follows:
🧠: fresh working memory, zero cognitive load
🧠++: two facts in our working memory, cognitive load increased
🤯: cognitive overload, more than 4 facts

Our brain is much more complex and unexplored, but we can go with this simplistic model.

Complex conditionals
if val > someConstant // 🧠+
    && (condition2 || condition3) // 🧠+++, prev cond should be true, one of c2 or c3 has be true
    && (condition4 && !condition5) { // 🤯, we are messed up by this point
    ...
}
Introduce intermediate variables with meaningful names:
isValid = val > someConstant
isAllowed = condition2 || condition3
isSecure = condition4 && !condition5 
// 🧠, we don't need to remember the conditions, there are descriptive variables
if isValid && isAllowed && isSecure {
    ...
}
Nested ifs
if isValid { // 🧠+, okay nested code applies to valid input only
    if isSecure { // 🧠++, we do stuff for valid and secure input only
        stuff // 🧠+++
    }
} 
Compare it with the early returns:
if !isValid
    return
 
if !isSecure
    return

// 🧠, we don't really care about earlier returns, if we are here then all good

stuff // 🧠+
We can focus on the happy path only, thus freeing our working memory from all sorts of preconditions.
Inheritance nightmare
We are asked to change a few things for our admin users: 🧠
AdminController extends UserController extends GuestController extends BaseController
Ohh, part of the functionality is in BaseController, let's have a look: 🧠+
Basic role mechanics got introduced in GuestController: 🧠++
Things got partially altered in UserController: 🧠+++
Finally we are here, AdminController, let's code stuff! 🧠++++
Oh, wait, there's SuperuserController which extends AdminController. By modifying AdminController we can break things in the inherited class, so let's dive in SuperuserController first: 🤯
Prefer composition over inheritance. We won't go into detail - there's plenty of material out there.
Too many small methods, classes or modules

Method, class and module are interchangeable in this context

Mantras like "methods should be shorter than 15 lines of code" or "classes should be small" turned out to be somewhat wrong.
Deep module - simple interface, complex functionality
Shallow module - interface is relatively complex to the small functionality it provides


Having too many shallow modules can make it difficult to understand the project. Not only do we have to keep in mind each module responsibilities, but also all their interactions. To understand the purpose of a shallow module, we first need to look at the functionality of all the related modules. Jumping between such shallow components is mentally exhausting, linear thinking is more natural to us humans.

Information hiding is paramount, and we don't hide as much complexity in shallow modules.

I have two pet projects, both of them are somewhat 5K lines of code. The first one has 80 shallow classes, whereas the second one has only 7 deep classes. I haven't been maintaining any of these projects for one year and a half.
Once I came back, I realised that it was extremely difficult to untangle all the interactions between those 80 classes in the first project. I would have to rebuild an enormous amount of cognitive load before I could start coding. On the other hand, I was able to grasp the second project quickly, because it had only a few deep classes with a simple interface.

The best components are those that provide powerful functionality yet have a simple interface.
John K. Ousterhout

The interface of the UNIX I/O is very simple. It has only five basic calls:
open(path, flags, permissions)
read(fd, buffer, count)
write(fd, buffer, count)
lseek(fd, offset, referencePosition)
close(fd)
A modern implementation of this interface has hundreds of thousands of lines of code. Lots of complexity is hidden under the hood. Yet it is easy to use due to its simple interface.

This deep module example is taken from the book A Philosophy of Software Design by John K. Ousterhout. Not only does this book cover the very essence of complexity in software development, but it also has the greatest interpretation of Parnas' influential paper On the Criteria To Be Used in Decomposing Systems into Modules. Both are essential reads. Other related readings: A Philosophy of Software Design vs Clean Code, It's probably time to stop recommending Clean Code, Small Functions considered Harmful.

P.S. If you think we are rooting for bloated God objects with too many responsibilities, you got it wrong.
Responsible for one thing
All too often, we end up creating lots of shallow modules, following some vague "a module should be responsible for one, and only one, thing" principle. What is this blurry one thing? Instantiating an object is one thing, right? So MetricsProviderFactoryFactory seems to be just fine. The names and interfaces of such classes tend to be more mentally taxing than their entire implementations, what kind of abstraction is that? Something went wrong.
We make changes to our systems to satisfy our users and stakeholders. We are responsible to them.

A module should be responsible to one, and only one, user or stakeholder.

This is what this Single Responsibility Principle is all about. Simply put, if we introduce a bug in one place, and then two different business people come to complain, we've violated the principle. It has nothing to do with the number of things we do in our module.
But even now, this rule can do more harm than good. This principle can be understood in as many different ways as there are individuals. A better approach would be to look at how much cognitive load it all creates. It's mentally demanding to remember that change in one place can trigger a chain of reactions across different business streams. And that's about it, no fancy terms to learn.
Too many shallow microservices
This shallow-deep module principle is scale-agnostic, and we can apply it to microservices architecture. Too many shallow microservices won't do any good - the industry is heading towards somewhat "macroservices", i.e., services that are not so shallow (=deep). One of the worst and hardest to fix phenomena is so-called distributed monolith, which is often the result of this overly granular shallow separation.
I once consulted a startup where a team of five developers introduced 17(!) microservices. They were 10 months behind schedule and appeared nowhere close to the public release. Every new requirement led to changes in 4+ microservices. It took an enormous amount of time to reproduce and debug an issue in such a distributed system. Both time to market and cognitive load were unacceptably high. 🤯
Is this the right way to approach the uncertainty of a new system? It's enormously difficult to elicit the right logical boundaries in the beginning. The key is to make decisions as late as you can responsibly wait, because that is when you have the most information at hand. By introducing a network layer up front, we make our design decisions hard to revert right from the start. The team's only justification was: "The FAANG companies proved microservices architecture to be effective". Hello, you got to stop dreaming big.
The Tanenbaum-Torvalds debate argued that Linux's monolithic design was flawed and obsolete, and that a microkernel architecture should be used instead. Indeed, the microkernel design seemed to be superior "from a theoretical and aesthetical" point of view. On the practical side of things - three decades on, microkernel-based GNU Hurd is still in development, and monolithic Linux is everywhere. This page is powered by Linux, your smart teapot is powered by Linux. By monolithic Linux.
A well-crafted monolith with truly isolated modules is often much more flexible than a bunch of microservices. It also requires far less cognitive effort to maintain. It's only when the need for separate deployments becomes crucial, such as scaling the development team, that you should consider adding a network layer between the modules, future microservices.
Feature-rich languages
We feel excited when new features got released in our favourite language. We spend some time learning these features, we build code upon them.
If there are lots of features, we may spend half an hour playing with a few lines of code, to use one or another feature. And it's kind of a waste of time. But what's worse, when you come back later, you would have to recreate that thought process!
You not only have to understand this complicated program, you have to understand why a programmer decided this was the way to approach a problem from the features that are available. 🤯
These statements are made by none other than Rob Pike.

Reduce cognitive load by limiting the number of choices.

Language features are OK, as long as they are orthogonal to each other.

  Thoughts from an engineer with 20 years of C++ experience ⭐️
  
  I was looking at my RSS reader the other day and noticed that I have somewhat three hundred unread articles under the "C++" tag. I haven't read a single article about the language since last summer, and I feel great!
  I've been using C++ for 20 years for now, that's almost two-thirds of my life. Most of my experience lies in dealing with the darkest corners of the language (such as undefined behaviours of all sorts). It's not a reusable experience, and it's kind of creepy to throw it all away now.
  Like, can you imagine, the token || has a different meaning in requires ((!P<T> || !Q<T>)) and in requires (!(P<T> || Q<T>)). The first is the constraint disjunction, the second is the good-old logical OR operator, and they behave differently.
  You can't allocate space for a trivial type and just memcpy a set of bytes there without extra effort - that won't start the lifetime of an object. This was the case before C++20. It was fixed in C++20, but the cognitive load of the language has only increased.
  Cognitive load is constantly growing, even though things got fixed. I should know what was fixed, when it was fixed, and what it was like before. I am a professional after all. Sure, C++ is good at legacy support, which also means that you will face that legacy. For example, last month a colleague of mine asked me about some behaviour in C++03. 🤯
  There were 20 ways of initialization. Uniform initialization syntax has been added. Now we have 21 ways of initialization. By the way, does anyone remember the rules for selecting constructors from the initializer list? Something about implicit conversion with the least loss of information, but if the value is known statically, then... 🤯
  This increased cognitive load is not caused by a business task at hand. It is not an intrinsic complexity of the domain. It is just there due to historical reasons (extraneous cognitive load).
  I had to come up with some rules. Like, if that line of code is not as obvious and I have to remember the standard, I better not write it that way. The standard is somewhat 1500 pages long, by the way.
  By no means I am trying to blame C++. I love the language. It's just that I am tired now.Thanks to 0xd34df00d for writing.

Business logic and HTTP status codes
On the backend we return:
401 for expired jwt token
403 for not enough access
418 for banned users
The engineers on the frontend use backend API to implement login functionality. They would have to temporarily create the following cognitive load in their brains:
401 is for expired jwt token // 🧠+, ok just temporary remember it
403 is for not enough access // 🧠++
418 is for banned users // 🧠+++
Frontend developers would (hopefully) introduce some kind numeric status -> meaning dictionary on their side, so that subsequent generations of contributors wouldn't have to recreate this mapping in their brains.
Then QA engineers come into play:
"Hey, I got 403 status, is that expired token or not enough access?"
QA engineers can't jump straight to testing, because first they have to recreate the cognitive load that the engineers on the backend once created.
Why hold this custom mapping in our working memory? It's better to abstract away your business details from the HTTP transfer protocol, and return self-descriptive codes directly in the response body:
{
    "code": "jwt_has_expired"
}
Cognitive load on the frontend side: 🧠 (fresh, no facts are held in mind)
Cognitive load on the QA side: 🧠
The same rule applies to all sorts of numeric statuses (in the database or wherever) - prefer self-describing strings. We are not in the era of 640K computers to optimise for memory.

People spend time arguing between 401 and 403, making decisions based on their own mental models. New developers are coming in, and they need to recreate that thought process. You may have documented the "whys" (ADRs) for your code, helping newcomers to understand the decisions made. But in the end it just doesn't make any sense. We can separate errors into either user-related or server-related, but apart from that, things are kind of blurry.

P.S. It's often mentally taxing to distinguish between "authentication" and "authorization". We can use simpler terms like "login" and "permissions" to reduce the cognitive load.
Abusing DRY principle
Do not repeat yourself - that is one of the first principles you are taught as a software engineer. It is so deeply embedded in ourselves that we can not stand the fact of a few extra lines of code. Although in general a good and fundamental rule, when overused it leads to the cognitive load we can not handle.
Nowadays, everyone builds software based on logically separated components. Often those are distributed among multiple codebases representing separate services. When you strive to eliminate any repetition, you might end up creating tight coupling between unrelated components. As a result changes in one part may have unintended consequences in other seemingly unrelated areas. It can also hinder the ability to replace or modify individual components without impacting the entire system. 🤯
In fact, the same problem arises even within a single module. You might extract common functionality too early, based on perceived similarities that might not actually exist in the long run. This can result in unnecessary abstractions that are difficult to modify or extend.
Rob Pike once said:

A little copying is better than a little dependency.

We are tempted to not reinvent the wheel so strong that we are ready to import large, heavy libraries to use a small function that we could easily write by ourselves.
All your dependencies are your code. Going through 10+ levels of stack trace of some imported library and figuring out what went wrong (because things go wrong) is painful.
Tight coupling with a framework
There's a lot of "magic" in frameworks. By relying too heavily on a framework, we force all upcoming developers to learn that "magic" first. It can take months. Even though frameworks enable us to launch MVPs in a matter of days, in the long run they tend to add unnecessary complexity and cognitive load.
Worse yet, at some point frameworks can become a significant constraint when faced with a new requirement that just doesn't fit the architecture. From here onwards people end up forking a framework and maintaining their own custom version. Imagine the amount of cognitive load a newcomer would have to build (i.e. learn this custom framework) in order to deliver any value. 🤯
By no means do we advocate to invent everything from scratch!
We can write code in a somewhat framework-agnostic way. The business logic should not reside within a framework; rather, it should use the framework's components. Put a framework outside of your core logic. Use the framework in a library-like fashion. This would allow new contributors to add value from day one, without the need of going through debris of framework-related complexity first.

Why I Hate Frameworks

Layered architecture
There is a certain engineering excitement about all this stuff.
I myself was a passionate advocate of Hexagonal/Onion Architecture for years. I used it here and there and encouraged other teams to do so. The complexity of our projects went up, the sheer number of files alone had doubled. It felt like we were writing a lot of glue code. On ever changing requirements we had to make changes across multiple layers of abstractions, it all became tedious. 🤯
Abstraction is supposed to hide complexity, here it just adds indirection. Jumping from call to call to read along and figure out what goes wrong and what is missing is a vital requirement to quickly solve a problem. With this architecture’s layer uncoupling it requires an exponential factor of extra, often disjointed, traces to get to the point where the failure occurs. Every such trace takes space in our limited working memory. 🤯
This architecture was something that made intuitive sense at first, but every time we tried applying it to projects it made a lot more harm than good. In the end, we gave it all up in favour of the good old dependency inversion principle. No port/adapter terms to learn, no unnecessary layers of horizontal abstractions, no extraneous cognitive load.

  Coding principles and experience
  
  @flaviocopes

If you think that such layering will allow you to quickly replace a database or other dependencies, you're mistaken. Changing the storage causes lots of problems, and believe us, having some abstractions for the data access layer is the least of your worries. At best, abstractions can save somewhat 10% of your migration time (if any), the real pain is in data model incompatibilities, communication protocols, distributed systems challenges, and implicit interfaces.

With a sufficient number of users of an API,
it does not matter what you promise in the contract:
all observable behaviors of your system
will be depended on by somebody.

We did a storage migration, and that took us about 10 months. The old system was single-threaded, so the exposed events were sequential. All our systems depended on that observed behaviour. This behavior was not part of the API contract, it was not reflected in the code. A new distributed storage didn't have that guarantee - the events came out-of-order. We spent only a few hours coding a new storage adapter, thanks to an abstraction. We spent the next 10 months on dealing with out-of-order events and other challenges. It's now funny to say that abstractions helps us replace components quickly.
So, why pay the price of high cognitive load for such a layered architecture, if it doesn't pay off in the future? Plus, in most cases, that future of replacing some core component never happens.
These architectures are not fundamental, they are just subjective, biased consequences of more fundamental principles. Why rely on those subjective interpretations? Follow the fundamental rules instead: dependency inversion principle, single source of truth, cognitive load and information hiding. Your business logic should not depend on low-level modules like database, UI or framework. We should be able to write tests for our core logic without worrying about the infrastructure, and that's it. Discuss.
Do not add layers of abstractions for the sake of an architecture. Add them whenever you need an extension point that is justified for practical reasons.
Layers of abstraction aren't free of charge, they are to be held in our limited working memory.


Domain-driven design
Domain-driven design has some great points, although it is often misinterpreted. People say "We write code in DDD", which is a bit strange, because DDD is about problem space, not about solution space.
Ubiquitous language, domain, bounded context, aggregate, event storming are all about problem space. They are meant to help us learn the insights about the domain and extract the boundaries. DDD enables developers, domain experts and business people to communicate effectively using a single, unified language. Rather than focusing on these problem space aspects of DDD, we tend to emphasise particular folder structures, services, repositories, and other solution space techniques.
Chances are that the way we interpret DDD is likely to be unique and subjective. And if we build code upon this understanding, i.e., if we create a lot of extraneous cognitive load - future developers are doomed. 🤯
Team Topologies provides a much better, easier to understand framework that helps us split the cognitive load across teams. Engineers tend to develop somewhat similar mental models after learning about Team Topologies. DDD, on the other hand, seems to be creating 10 different mental models for 10 different readers. Instead of being common ground, it becomes a battleground for unnecessary debates.
Cognitive load in familiar projects

The problem is that familiarity is not the same as simplicity. They feel the same — that same ease of moving through a space without much mental effort — but for very different reasons. Every “clever” (read: “self-indulgent”) and non-idiomatic trick you use incurs a learning penalty for everyone else. Once they have done that learning, then they will find working with the code less difficult. So it is hard to recognise how to simplify code that you are already familiar with. This is why I try to get “the new kid” to critique the code before they get too institutionalised!
It is likely that the previous author(s) created this huge mess one tiny increment at a time, not all at once. So you are the first person who has ever had to try to make sense of it all at once.
In my class I describe a sprawling SQL stored procedure we were looking at one day, with hundreds of lines of conditionals in a huge WHERE clause. Someone asked how anyone could have let it get this bad. I told them: “When there are only 2 or 3 conditionals, adding another one doesn’t make any difference. By the time there are 20 or 30 conditionals, adding another one doesn’t make any difference!”
There is no “simplifying force” acting on the code base other than deliberate choices that you make. Simplifying takes effort, and people are too often in a hurry.
Thanks to Dan North for his comment.

If you've internalized the mental models of the project into your long-term memory, you won't experience a high cognitive load.


The more mental models there are to learn, the longer it takes for a new developer to deliver value.
Once you onboard new people on your project, try to measure the amount of confusion they have (pair programming may help). If they're confused for more than ~40 minutes in a row - you've got things to improve in your code.
If you keep the cognitive load low, people can contribute to your codebase within the first few hours of joining your company.
Examples

Our architecture is a standard CRUD app architecture, a Python monolith on top of Postgres
How Instagram scaled to 14 million users with only 3 engineers
The companies where we were like ”woah, these folks are smart as hell” for the most part failed
One function that wires up the entire system. If you want to know how the system works - go read it

These architectures are quite boring and easy to understand. Anyone can grasp them without much mental effort.
Involve junior developers in architecture reviews. They will help you to identify the mentally demanding areas.
Conclusion
Imagine for a moment that what we inferred in the second chapter isn’t actually true. If that’s the case, then the conclusion we just negated, along with the conclusions in the previous chapter that we had accepted as valid, might not be correct either. 🤯
Do you feel it? Not only do you have to jump all over the article to get the meaning (shallow modules!), but the paragraph in general is difficult to understand. We have just created an unnecessary cognitive load in your head. Do not do this to your colleagues.


We should reduce any cognitive load above and beyond what is intrinsic to the work we do.

LinkedIn, X, GitHub
Readable version

    Comments
    
    Rob PikeNice article.
    Andrej Karpathy (ChatGPT, Tesla)Nice post on software engineering. Probably the most true, least practiced viewpoint.
    Elon MuskTrue.
    Addy Osmani (Chrome, the most complex software system in the world)I've seen countless projects where smart developers created impressive architectures using the latest design patterns and microservices. But when new team members tried to make changes, they spent weeks just trying to understand how everything fits together. The cognitive load was so high that productivity plummeted and bugs multiplied.
    The irony? Many of these complexity-inducing patterns were implemented in the name of "clean code."
    What really matters is reducing unnecessary cognitive burden. Sometimes this means fewer, deeper modules instead of many shallow ones. Sometimes it means keeping related logic together instead of splitting it into tiny functions.
    And sometimes it means choosing boring, straightforward solutions over clever ones. The best code isn't the most elegant or sophisticated - it's the code that future developers (including yourself) can understand quickly.
    Your article really resonates with the challenges we face in browser development. You're absolutely right about modern browsers being among the most complex software systems. Managing that complexity in Chromium is a constant challenge that aligns perfectly with many of the points you made about cognitive load.
    One way we try to handle this in Chromium is through careful component isolation and well-defined interfaces between subsystems (like rendering, networking, JavaScript execution, etc.). Similar to your deep modules example with Unix I/O - we aim for powerful functionality behind relatively simple interfaces. For instance, our rendering pipeline handles incredible complexity (layout, compositing, GPU acceleration) but developers can interact with it through clear abstraction layers.
    Your points about avoiding unnecessary abstractions really hit home too. In browser development, we constantly balance between making the codebase approachable for new contributors while handling the inherent complexity of web standards and compatibility. 
    Sometimes the simplest solution is the best one, even in a complex system.
    antirez (Redis)Totally agree about it :) Also, what I believe is missing from mentioned "A Philosophy of Software Design" is the concept of "design sacrifice". That is, sometimes you sacrifice something and get back simplicity, or performances, or both. I apply this idea continuously, but often is not understood.
    A good example is the fact that I always refused to have hash items expires. This is a design sacrifice because if you have certain attributes only in the top-level items (the keys themselves), the design is simpler, values will just be objects. When Redis got hash expires, it was a nice feature but required (indeed) many changes to many parts, raising the complexity.
    Another example is what I'm doing right now, Vector Sets, the new Redis data type. I decided that Redis would not be the source of truth about vectors, but that it can just take an approximate version of them, so I was able to do on-insert normalization, quantization without trying to retain the large floats vector on disk, and so forth. May vector DBs don't sacrifice the fact of remembering what the user put inside (the full precision vector).
    These are just two random examples, but I apply this idea everywhere. Now the thing is: of course one must sacrifice the right things. Often, there are 5% features that account for a very large amount of complexity: that is a good thing to kill :D
    A developer from the internetYou would not hire me... I sell myself on my track record of released enterprise projects.
    I worked with a guy that could speak design patterns. I could never speak that way, though I was one of the few that could well understand him. The managers loved him and he could dominate any development conversation. The people working around him said he left a trail of destruction behind him. I was told that I was the first person that could understand his projects. Maintainability matters. I care most about TCO. For some firms, that's what matters.
    I logged into Github after not being there for a while and for some reason it took me to an article in a repository by someone that seemed random. I was thinking "what is this" and had some trouble getting to my home page, so I read it. I didn't really register it at the time, but it was amazing. Every developer should read it. It largely said that almost everything we've been told about programming best practices leads to excessive "cognitive load", meaning our minds are getting kicked by the intellectual demands. I've known this for a while, especially with the demands of cloud, security and DevOps.
    I also liked it because it described practices I have done for decades, but never much admit to because they are not popular... I write really complicated stuff and need all the help I can get.
    Consider, if I'm right, it popped up because the Github folks, very smart people, though that developers should see it. I agree.
    Comments on Hacker News

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Agent Client Protocol (ACP)]]></title>
            <link>https://agentclientprotocol.com/overview/introduction</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45074147</guid>
            <description><![CDATA[Get started with the Agent Client Protocol (ACP)]]></description>
            <content:encoded><![CDATA[The Agent Client Protocol standardizes communication between code editors (IDEs, text-editors, etc.) and coding agents (programs that use generative AI to autonomously modify code).
The protocol is still under development, but it should be complete enough to build interesting user experiences using it.Why ACP?
AI coding agents and editors are tightly coupled but interoperability isn’t the default. Each editor must build custom integrations for every agent they want to support, and agents must implement editor-specific APIs to reach users.
This creates several problems:
Integration overhead: Every new agent-editor combination requires custom work
Limited compatibility: Agents work with only a subset of available editors
Developer lock-in: Choosing an agent often means accepting their available interfaces

ACP solves this by providing a standardized protocol for agent-editor communication, similar to how the Language Server Protocol (LSP) standardized language server integration.
Agents that implement ACP work with any compatible editor. Editors that support ACP gain access to the entire ecosystem of ACP-compatible agents.
This decoupling allows both sides to innovate independently while giving developers the freedom to choose the best tools for their workflow.Overview
ACP assumes that the user is primarily in their editor, and wants to reach out and use agents to assist them with specific tasks.
Agents run as sub-processes of the code editor, and communicate using JSON-RPC over stdio. The protocol re-uses the JSON representations used in MCP where possible, but includes custom types for useful agentic coding UX elements, like displaying diffs.
The default format for user-readable text is Markdown, which allows enough flexibility to represent rich formatting without requiring that the code editor is capable of rendering HTML.Supported Editors

Zed
neovim through the CodeCompanion plugin

Supported Agents

Gemini
… more coming soon ;)
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Nokia’s legendary font makes for a great user interface font]]></title>
            <link>https://www.osnews.com/story/143222/it-turns-out-nokias-legendary-font-makes-for-a-great-general-user-interface-font/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45074071</guid>
            <description><![CDATA[Home > OS News > It turns out Nokia’s legendary font makes for a great general user interface font]]></description>
            <content:encoded><![CDATA[ Home > OS News > It turns out Nokia’s legendary font makes for a great general user interface fontIf you’re of a certain age (and not American), there’s a specific corporate font you’re most likely aware of. You may not know its exact name, and you may not actively remember it, but once you see it, you know exactly what you’re looking at. The font’s called Nokia Sans (and Nokia Serif), and it was used by pretty much every single Nokia device between roughly 2002 and 2013 or so, when it was replaced by a very bland font made by Bruno Maag (with help from the person who designed Comic Sans) that they used after that.I can’t remember why, exactly, but I got majorly nostalgic for Nokia’s characteristic, recognisable font, and decided to see if it would work as a user interface font. Now, the font is still owned by Nokia and I couldn’t find a proper place to download it, but I eventually stumbled upon a site that had each individual variant listed for download. I downloaded each of them, installed them using KDE’s font installation method, and tried it out as my user interface font.You’ll quickly discover you shouldn’t use the regular variant, but should instead opt for the Nokia Sans Wide variant. Back in 2011, when Nokia originally announced it was replacing Nokia Sans, the creator of the font, Erik Spiekermann, responded to the announcement on his blog. Apparently, one of the major reasons for Nokia to change fonts was that they claimed Nokia Sans wouldn’t work as a user interface font, but Spiekermann obviously disagrees, pointing specifically to the Wide variant. In fact, Spiekermann does not pull any punches.After 10 years it was high time to look at Nokia’s typefaces as the dominant visual voice of the brand but whoever decided on a completely new direction was either not aware of what was available or was persuaded by Bruno Maag to start over. Bruno may not create the most memorable typefaces, but he certainly knows how to sell them. And technically, their fonts are excellent. Too bad they didn’t have the confidence to work with me on an update. Instead they’re throwing out ten years of brand recognition in favour of blandness.
↫ Erik SpiekermannI was pleasently surprised by just how nice the font looks when used as a general user interface font. It’s extremely legible at a variety of sizes, and has a ton of character without becoming gimmicky or overbearing. What originally started as mere curiosity has now become my UI font of choice on all my machines, finally displacing Inter after many years of uncontested service. Of course, all of this is deeply personal and 95% an issue of taste, but I wanted to write about it to see if I’m just entirely crazy, or if there’s some method to my madness.Do note that I’m using high DPI displays, and KDE on Wayland, and that all of this may look different on Windows or macOS, or on displays with lower DPI. One of Inter’s strengths is that it renders great on both high and lower DPI displays, but since I don’t have any lower DPI displays anymore, I can’t test it in such an environment. I’m also not entirely sure about the legal status of downloading fonts like this, but I am fairly sure you’re at least allowed to use non-free fonts for personal, non-commercial use, but please don’t quote me on that. Since downloading each variant of these Nokia fonts is annoying, I’d love to create and upload a zip file containing all of them, but I’m sure that’s illegal.I’m not a font connoisseur, so I may be committing a huge faux pas here? Not that I care, but reading about font nerds losing their minds over things I never even noticed is always highly entertaining.About The Author
Thom HolwerdaFollow me on Mastodon @[email protected]]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hardening Firefox – a checklist for improved browser privacy]]></title>
            <link>https://andrewmarder.net/firefox/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45073746</guid>
            <description><![CDATA[A checklist for configuring Mozilla Firefox for a more private browsing experience.]]></description>
            <content:encoded><![CDATA[  July 3, 2025 /  3 min read  
Updated:
August 29, 2025    This checklist will walk you (and me) through the settings and extensions I use to improve my privacy when using Firefox.
If you’re looking for a web browser that offers a high degree of privacy out of the box with minimal setup, Brave is a common choice. However, I prefer Firefox for several reasons:

Firefox is developed by the nonprofit organization Mozilla.
I value Mozilla’s commitment to open source software.
Firefox is not based on Chromium. Brave, like most browsers, is based on Chromium, which is developed primarily by Google.

While there are many web browsers to choose from, I’ve decided Firefox is best for me. This post is a checklist of how I’ve configured it to better protect my privacy while browsing the web.
1. Basic Privacy Settings
Access Firefox’s settings by clicking the menu button (three horizontal lines) in the top-right corner and selecting “Settings.”

 Change Default Search Engine: In the Search tab, change the “Default Search Engine” to a privacy-respecting option like DuckDuckGo.
 Enable HTTPS-Only Mode: In the Privacy & Security tab, scroll down to “HTTPS-Only Mode” and select “Enable HTTPS-Only Mode in all windows.”
 Disable Telemetry: Still in Privacy & Security, scroll to “Firefox Data Collection and Use” and uncheck all the boxes to stop Firefox from sending data back to Mozilla.
 Set Enhanced Tracking Protection to Strict: Under Privacy & Security, set “Enhanced Tracking Protection” to Strict. This offers stronger protection against trackers. If a site breaks, you can easily disable it for that specific site by clicking the shield icon in the address bar.

2. Recommended Extensions

 Install uBlock Origin: A comprehensive content blocker that stops ads and tracking scripts, which speeds up page loading and enhances privacy.
 Install ClearURLs: This extension automatically removes tracking elements from URLs, helping prevent another form of web tracking.
 Install Privacy Badger: From the Electronic Frontier Foundation, this extension automatically learns to block invisible trackers. Instead of relying on blocklists, it discovers trackers based on behavior.

3. Advanced Configuration (about:config)
To access this, type about:config into the address bar and accept the warning.
Warning: Changing advanced configuration preferences can impact Firefox performance or security. Proceed with caution.

 Isolate Cookies to the First-Party Domain:

Search for privacy.firstparty.isolate and set its value to true.
This prevents cookies from tracking you from one site to another, but it can break single sign-on on some websites.


Resist Fingerprinting:

I previously set privacy.resistFingerprinting to true to make my browser fingerprint less unique.
It caused minor display issues on some sites and broke image uploads to Bluesky, so I set it back to false.



By following this checklist, you can significantly improve your privacy while using Firefox. Please let me know if I’m missing anything in the comments.
     ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[From multi-head to latent attention: The evolution of attention mechanisms]]></title>
            <link>https://vinithavn.medium.com/from-multi-head-to-latent-attention-the-evolution-of-attention-mechanisms-64e3c0505f24</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45072160</guid>
            <description><![CDATA[From Multi-Head to Latent Attention: The Evolution of Attention Mechanisms
What is attention?
In any autoregressive model, the prediction of the future tokens is based on some preceding context …]]></description>
            <content:encoded><![CDATA[7 min read1 day ago--Press enter or click to view image in full sizeWhat is attention?In any autoregressive model, the prediction of the future tokens is based on some preceding context. However, not all the tokens within this context equally contribute to the prediction, because some tokens might be more relevant than others. The attention mechanism addresses this by allowing the model to concentrate on the important context words selectively, while generating each output word or token. Consider the popular example that explains the attention mechanism.“The animal didn’t cross the street because it was too tired”.In this sentence, the pronoun “it” could refer to either “animal” or “street”. Attention helps the model to associate “it” with “animal” rather than “street” by weighing the relative importance of each word. This helps the model to understand the relationships between words and capture the contextual meaning in various NLP tasks.How is attention calculated?There are various types of attention mechanisms today, beginning with the Multi-Head Attention (MHA), which introduced the attention concept in the seminal paper. More recently, advanced variants like Multi-Latent Head Attention (MHLA) have been employed in popular models like Deepseek. This blog aims to cover the fundamentals of each attention mechanism, including the core ideas, advantages, limitations, etc.Key Concepts in Attention MechanismsBefore diving into specific types of attention, we need to understand some fundamental concepts that underpin all the various attention mechanisms.The main idea behind the attention mechanism is to dynamically weigh, and focus on relevant parts of inputs. Attention is required in both the encoding and decoding stages. But in this blog, we will be discussing this from a decoder's point of view.During each generation step, we need to understand the attention weights, which help us to get a better contextual representation for the next word prediction. At its core, attention operates through three fundamental components — queries, keys, and values — that work together with attention scores to create a flexible, context-aware vector representation.Query (Q): The query is a vector that represents the current token for which the model wants to compute attention.Key (K): Keys are vectors that represent the elements in the context against which the query is compared, to determine the relevance.Attention Scores: These are computed using Query and Key vectors to determine the amount of attention to be paid to each context token.Value (V): Values are the vectors that represent the actual contextual information. After calculating the attention scores using Query and Key vectors, these scores are applied against Value vectors to get the final context vectorKV Caching: Since the key and value vectors are for previous tokens, we can skip this computation for those tokens that are already calculated. KV caching stores the precomputed keys and values from the previous computations, which helps in faster decoding in autoregressive models by reusing the cached vectors. However, the Query vectors cannot be cached, since they are calculated for the current token.To understand how each of these vectors are scores are calculated you can refer to this blog.The high-level concepts remain consistent across all types of attention mechanisms. However, the key difference lies in how efficiently each of them executes the attention process without compromising on performance. Innovations focus on computational speed, reducing memory usage, improving scalability across longer sequences, etc.Now, let's dive into each of these techniquesMulti-Head Attention (MHA)In multi-head attention, for computing the attention weights for the ith token, first, a query vector is calculated for that token. To calculate the attention weights for the token, this query vector is compared with all the preceding tokens. For that, key vectors are calculated for all the preceding tokens. These comparisons will generate an attention score, which is then used to produce a weighted score for each token using the corresponding value vectors.Press enter or click to view image in full sizeImage credits: Illustrated TransformersIn multi-head attention, this process is repeated in parallel across multiple attention “heads”. Each head has its own query, value, and key vectors, using which it calculates the relationship between the words. The final output context vector will be the concatenated output from all the attention heads.Now, this seems straightforward. However, as the context grows, the number of Key and Value vectors will increase dramatically, because these vectors need to be calculated and stored for all the context tokens. For a sequence length of n, each query vector must be compared against all n key vectors and then perform the weighted combination using n value vectors. This results in a quadratic complexity in both computation and memory.KV cache can help in reducing the computation and memory overhead during inference. But as the context grows, the size of the cache grows linearly with sequence length to store all the keys and values for all the preceding tokens. KV cache reduces the redundant computations, but will not reduce the fundamental cost of attending to all the previous tokens.Models using MHA – Bert, RoBerta, T5, etc.Multi-Query Attention (MQA)A significant challenge with MHA was the high computational and memory overhead associated with storing and processing separate Key and Value vectors for each attention head.MQA addresses this problem by using multiple query heads but sharing a common set of Key and Value vectors across all the heads. In other words, there are still “h” distinct Query projections using which the model attends the current token from multiple perspectives. But the same Key and Value vectors are used for every head.This approach will greatly reduce the memory bandwidth requirements without significantly sacrificing the model performance. By sharing the Key and Value vectors, MQA enables an efficient inference, especially for Large language models with long context lengths.Here, the Key and Value vectors need to be calculated only once for a token instead of “h” times, which reduces the computation cost of Key/Value projection. But note that for calculating the attention score, each query head is still multiplied by the Key vectors and then weighed using the Value vectors. So this remains the same.Also, with MQA only one set of Key-Value pairs needs to be cached, regardless of the number of Query heads. This lets the KV cache size grow gradually as the sequence length grows, leading to much lower memory requirements when compared to MHAModels using MQA – PaLM, FalconGrouped Query Attention (GQA)Grouped Query attention offers a balance between the MHA and MQA. As we saw earlier, traditional MHA requires significant memory and computation overhead due to separate Key-Value vectors for each Query head, and the computation overhead even increases as the number of heads increases. MQA addresses this by having a shared Key-Value, which reduces the computation cost and memory, but it may impact the model performance.GQA offers a compromise between these two extremes. Instead of having a common Key-Value for all the heads, GQA divides the Query heads into “g” groups and lets each group share a common Key and Value head. We can say, MHA and MQA come as two extreme cases of GQA, with g=1 leading to MQA and g=h leading to MHA. This approach reduces the memory and computational requirements compared to MHA while retaining a better performance than MQA.Models using GQA – Llama2, Llama3, MistralMulti-Head Latent Attention (MHLA)While GQA performs better than MQA, but still may not match MHA’s performance in some complex tasks.MHLA is a recent innovation in transformer architecture introduced in models like DeepSeek. Its main goal is to dramatically reduce memory usage and accelerate inference, especially for large language models (LLMs), without loss in model performance.The idea is to attain a performance near MHA. So we need to consider separate Key value heads for each attention head, like in MHA, but also improve the inference speed by reducing the memory overhead for storing the large amounts of Key value vectors.MHLA addresses the challenge of high memory usage and slow inference by compressing the Key and Value representations into a much smaller latent space using low-rank projections. Specifically, instead of storing the full Key and Value vectors for every token and head, MHLA applies a linear transformation that projects these vectors into a lower-dimensional space.So during the inference:A down-projection weight matrix W(DKV) is introduced and is multiplied with the input sequence to obtain a compressed latent vector C(KV) for keys and Values. This latent vector is stored in cache, which is significantly smaller in size when compared to the full key and Value vectorsThis is then multiplied by an up-projection matrix W(UK) and W(UV) to get the Key and Value vectorsAdditionally, the matrix W(KR) is used to produce a decoupled Key that carries the Rotary Positional embeddingAdditionally, the same process is done for attention Queries as well, which will reduce the activation memory during trainingPress enter or click to view image in full sizeMHLA supports switching between two computation paradigms for different stages. During the training stage, which is computationally intensive, it operates similarly to MHA, where the computational overhead is slightly lower than conventional MHA. During inference, it can seamlessly switch to a paradigm similar to MQA. Here, the cached KV head interacts with all query heads to produce the final output.Models using MHLA– Deepseek- V2, Deep seek V2ConclusionIn addition to the topics discussed, there are various innovative methods that are designed to optimise the challenges of the traditional attention technique. Some of these include sparse attention, efficient attention, memory augmented attention, etc. These approaches reflect the focus on ongoing research for making the attention more scalable, faster, and adaptable across various tasks and requirements.Thank you for reading this post! Let me know if you liked it, have questions, or spotted an error. Please feel free to contact or follow me through LinkedIn, Twitter, or Medium.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: Hacker News em dash user leaderboard pre-ChatGPT]]></title>
            <link>https://www.gally.net/miscellaneous/hn-em-dash-user-leaderboard.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45071722</guid>
        </item>
    </channel>
</rss>