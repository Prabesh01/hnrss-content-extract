<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Sun, 07 Sep 2025 20:08:19 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[How to make metals from Martian dirt]]></title>
            <link>https://www.csiro.au/en/news/All/Articles/2025/August/Metals-out-of-martian-dirt</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45161229</guid>
            <description><![CDATA[Swinburne and CSIRO researchers have successfully made iron under Mars-like conditions, opening the door to off-world metal production.]]></description>
            <content:encoded><![CDATA[
        



      27 August 2025
  3 min read






    Key points
    
        Swinburne and CSIRO researchers are investigating ways to produce native metals using materials found on Mars.
              Martian settlements will require large amounts of metal that are difficult to ship from Earth.
              The team have successfully produced iron using regolith simulant that mimics what is available on the Red Planet.
    
  


The idea of building settlements on Mars is a popular goal of billionaires, space agencies and interplanetary enthusiasts.
But construction demands materials, and we can't ship it all from Earth: it cost US$243 million just to send NASA's one tonne Perseverance Rover to the Red Planet.
Unless we're building a settlement for ants, we'll need much, much more stuff. So how do we get it there?
CSIRO Postdoctoral Fellow and Swinburne alum Dr Deddy Nababan has been pondering this question for years. His answer lies in the Martian dirt, known as regolith.
"Sending metals to Mars from Earth might be feasible, but it's not economical. Can you imagine bringing tonnes of metals to Mars? It's just not practical," Dr Nababan says.
"Instead, we can use what's available on Mars. It's called in-situ resource utilisation, or ISRU."

More specifically, Dr Nababan is looking at astrometallurgy — making metals in space.
Building an off-world foundry
As it turns out, Mars has all the ingredients needed to make native metals. This includes iron-rich oxides in regolith and carbon from its thin atmosphere, which acts as a reducing agent.
Swinburne University of Technology astrometallurgist, Professor Akbar Rhamdhani, is working with Dr Nababan to test this process with regolith simulant - an artificial recreation of the stuff found of Mars.
"We picked a simulant with very similar properties to that found at Gale Crater on Mars and processed them on Earth with simulated Mars conditions. This gives us a good idea of how the process would perform off-world," he says.


      


      
        The researchers used a regolith simulant that mimics the materials found at Gale Crater on Mars.
          
            © 
Swinburne University          
      
  
The simulant is placed inside a chamber at Mars surface pressure and heated at increasing temperatures. The experiments showed pure iron metal formation around 1000°C, with liquid silicon-iron alloys produced around 1400°C.
"At high enough temperatures, all of the metals coalesced into one large droplet. This could then be separated from liquid slag the same way it is on Earth," Professor Rhamdhani says.
Along with Dr Nababan, Prof Rhamdhani is collaborating with CSIRO's Dr Mark Pownceby to further advance the process. They're particularly focused on making metals with zero waste, where the byproducts of the process are used to make useful items.
If you can't ship it, make it
ISRU is a growing area of space science because in rocket launches, every kilogram counts. While the cost of launches is going down, the demands of human exploration are immense.
But huge developments are already happening, including the first demonstration of ISRU off-world. The MOXIE experiment on board the Mars Perseverance rover produced breathable oxygen using only the carbon dioxide in the planet's atmosphere.
Metal production is the next giant leap. Prof Rhamdhani hopes Mars-made alloys could be used as shells for housing or research facilities, and in machinery for excavation.


      


      
        The regolith simulant is placed in a furnace that recreates Martian conditions and heated, producing iron. 
          
            © 
Swinburne University          
      
  
"There are certainly challenges. We need to better understand how these alloys would perform over time, and of course whether this process can be recreated on the real Martian surface," Prof Rhamdhani says.
But in the meantime, Swinburne and its partners are doubling down. Prof Rhamdhani together with Dr Nababan and Dr Matt Shaw, another CSIRO researcher and Swinburne alum, recently delivered a 4-day bespoke workshop on astrometallurgy in South Korea. The feedback was promising.
"We're starting to see increased interest in this field globally as the world gets serious about Mars exploration," he says.
"To make it happen, we're going to need experts from many fields — mining, engineering, geology, and much more."
For Dr Nababan, the benefits go beyond exploration. He hopes their research will also drive more efficient metallurgy here on Earth.
"By doing this, I wish that I can help the development of space exploration, and at the end it will bring good to human life here on Earth."
This was article is published from Swinburne University. Read the original article.




  





      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Submarine Cable Map]]></title>
            <link>https://www.submarinecablemap.com/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45160780</guid>
        </item>
        <item>
            <title><![CDATA[Keeping secrets out of logs (2024)]]></title>
            <link>https://allan.reyes.sh/posts/keeping-secrets-out-of-logs/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45160774</guid>
            <description><![CDATA[There's no silver bullet, but if we put some "lead" bullets in the right
places, we have a good shot at keeping sensitive data out of logs.]]></description>
            <content:encoded><![CDATA[tl;dr:
There's no silver bullet, but if we put some "lead" bullets in the right
places, we have a good shot at keeping sensitive data out of logs."This is the blog version of a talk I gave at LocoMocoSec 2024. It’s
mostly a lightly edited transcript with some screenshots, so if you’d prefer,
you can watch the
video or just
flip through the slides."This post is about how to keep secrets out of logs, and my claim is that (like
many things in security) there isn’t a singular action or silver bullet that
lets you do this. I would go so far as to say that there’s not even an 80/20
rule, where one action fixes 80% of the problem. It’s not like preventing SQL
injection with prepared statements or preventing buffer overflows by using
memory-safe languages.What I will offer instead, are lead bullets, of which there are many. I’m going
to talk about 10 of them. They are imperfect and sometimes unreliable things
that, if put in the right places and with defense-in-depth, can still give us a
real good chance at succeeding. My hope is that by the end, you’ll
have a slightly better framework for how to reason about this problem and some
new ideas to add to your kit.Table of contents:The ProblemCauses🤦 Direct logging🚰 Kitchen sinks🔧 Configuration changes🥧 Embedded secrets📡 Telemetry🕺🏻 User inputFixes (lead bullets)📐 Data architecture🍞 Data transformations🪨 Domain primitivesCompile-timeRun-timeRun-time: part deux🎁 Read-once objects🔎 Taint checkingAwesomeNot awesome🗃️ Log formatters🧪 Unit tests🕵️ Sensitive data scannersSampling🤖 Log pre-processors🦸 PeopleRecapStrategy0. Lay the foundation1. Understand the data flow2. Protect at chokepoints3. Apply defense-in-depth4. Plan for response and recoveryConclusionThe ProblemWith that, let’s dive in and set the table by talking about the problem with
secrets in logs.So, there are some problems that are annoying. And there are some problems that
are difficult.This is both. I’m gonna level with you: I absolutely hate this problem. But I’m
not going to gaslight you and tell you that this is the most important thing to
work on worry about, because it probably isn’t!You have somewhere between 5 and 50 other problems in your backlog that seem
more important, 1 of which you found out about this morning. But I think it’s
likely that none of those problems are nearly as annoying. While researching
this topic, I interviewed about a dozen other engineers and, on this point, they
unanimously agreed! Nobody likes dealing with secrets in logs because it is
extraordinarily annoying.This is a problem that’s also difficult, but not even in the fun sense, like
being technically complex or interesting. Once you catch sensitive data in logs,
it’s usually pretty straightforward (at least in retrospect) to determine how
they got there. But, it’s also surprisingly elusive to prevent, and it crops up
in incredibly unexpected places and ways.Secrets could mean lots of different things to lots of different teams, but I’ll
use it interchangeably with “sensitive data”: stuff that you want to keep
confidential. What’s so frustrating when breaching confidentiality in logs is
the full spectrum of potential impact.In the best case (left), you might log an isolated, internal credential, like
an API key, which (kudos!) you rotate right after fixing the source of leak.
The impact is minimal, and you just move on. Of course, all the way on the other
end of the spectrum (right), you might log something that an attacker or
inside threat could use to do some real harm.And then somewhere in-between, where I suspect most of the incidents lie. You
might log secrets that you unfortunately, can’t rotate yourself. Things like PII
or your customer’s passwords, which are reused on other sites, because of course
they are. And, depending on your policies, threat model, or regulations, you
might choose to issue a disclosure or notification.And it is painful.You could be doing so many good data security practices, like
secure-by-design frameworks, database and field-level encryption, zero-touch
production, access control… but logging bypasses all of that… and ultimately
degrades trust, in your systems and in your company. It feels unfair because
it’s only a fraction of your security story.And this is a problem that happens to companies of all sizes:Something about “plaintext” just kinda stings, especially as a security
practitioner. It’s like… the most profane insult you can hurl at a security
engineer. Imagine retorting with, “Oh yea? Well, you store your passwords in
plaintext!”But logging passwords and storing them in plaintext are… kinda the same thing.Because while logs are rarely or purposefully public, they’re typically afforded
broader access than direct access to your databases.Everyone knows by now that storing plaintext secrets in your database is a
terrible idea. Logs, however, are still data-at-rest, and we should treat them
with the same level of scrutiny.I cherry picked those examples because they are established companies with very
mature security programs. I’m not trying to throw shade; in fact, I deeply
respect them for being public and transparent about this. I think this also
hints that preventing secrets in logs is a deceptively difficult and frustrating
problem.If we can understand some causes, we might gain a deeper appreciation for these
past occurrences, and stand a better chance at avoiding new incidents in the
future.CausesThis is certainly not comprehensive, but from my interviews and personal
experience, here are six of the most common causes.🤦 Direct logging🚰 Kitchen sinks🔧 Configuration changes🥧 Embedded secrets📡 Telemetry🕺🏻 User input🤦 Direct loggingconst temp = res.cookie["session"];

// TODO: remove after testing is done
Logger.info("session HERE", { temp });
Narrator: it was not removed after testing was doneThe first group is perhaps the most obvious and facepalm one: when sensitive
data is directly logged. Sometimes it’s purely accidental, like the example
above: someone wants to debug session cookies in their local environment and
then… accidentally commits the code. Sometimes it comes from an uninformed
position where the developer just doesn’t know any better.These tend to be fairly easy to trace down the exact line of code or commit that
introduces it. With this example, you can just grep the codebase for session here and you’ll find it instantly.🚰 Kitchen sinksconst client = googleSdk.admin(...);
try {
  const res = client.tokens.list(...);
} catch (e) {
  Logger.error("failed fetch", { e });
}
I’m sure you’ve seen or written code like this before. Here we have an API
client or SDK that is used to fetch some data. Exceptions are caught, kind of,
and then promptly logged so that on-call engineers can debug the errors.What happens?That error is decorated with a config object stuffed with secrets and the full
response object, which is also stuffed with secrets, and now they’re both in
your logs!{
  e: {
    status: 400,
    ...
    config: { 💥☠️🪦 },
    response: { 💣😭😱 },
  }
}
I call these “kitchen sinks,” objects that contain or hold secrets, often in
opaque or unexpected ways. Think of an actual kitchen sink that’s filled to the
brim with dirty dishes and you can’t easily tell what’s at the bottom without
reaching into it. Maybe it’s a spoon, or maybe it’s knife and now you have to
go to the hospital. What tends to happen is that the whole kitchen sink gets
logged, and the logging library happily serializes it, including parts that were
actually sensitive.This seems to happen with code that attaches additional data onto errors, or
code that logs full request and response objects. It’s typically a bit hard to
catch in code review unless you know to look for them. If you are blessed with
static types, seeing an any type flow into logs can be a good hint that you’re
logging too much.🔧 Configuration changesNarrator: it was not okayNext example: someone needs additional observability and changes a setting like
the global log level. You know exactly what happens, here. This dev is about to
have a bad time and find out that hope, in fact, is not a valid strategy.We started with an observability problem. Now we also have security problem: brand
new secrets are getting emitted into logs.In that example (that totally never happened to me ever), developers built
production around log levels set to WARN and above, but once you flip it to
DEBUG, all this new stuff comes out of the woodwork.These type of configuration changes tend to involve a system that was built with
one set of assumptions, but some kind of modification moves that system from a
known state into a unknown state, introducing a new set of problems.These often involve low-level or global utilities like logging config, HTTP
middleware, or some central piece of infra like a load balancer. They tend to be
singletons that are difficult or costly to test, or they crop up only at
runtime. On the positive side, it’s usually loud and quick to patch, but cleanup
can be kinda painful.🥧 Embedded secretsapp.get("/login/:slug", async (req, res) => {
  const magicLink = req.params["slug"];
  await login({ magicLink });
});
I completely made up this phrase, but the idea is that secrets are coupled to,
embedded into, and baked into more general formats like URLs or remote
procedure calls. The central idea is that it’s designed into the format and the
system, and can’t easily be separated.Say you have a magic login link handler (see above) where a user can click a
link and sign into a web app. There’s nothing in that code that logs the link,
but if you look at HTTP logs, it’s right there in plain view:47.29.201.179 - - [17/Jul/2024:13:17:10 +0000] "GET /login/Uj79z1pe01...
These types of leaks arise from fundamental designs that don’t take logging into
consideration or incorrectly assume some end-to-end flow. The sensitivity gets lost out of context, and ends up getting logged in another layer,
system, or service.📡 Telemetrytry:
    db_name = os.getenv("DB_NAME")
    db_pass = os.getenv("DB_PASS") # 🤫 Secret!
    conn = db.connect(db_name, db_pass)
    ...
except Error as e:
    # Don't log e! Not today!!11
    Logger.error("failed to connect")
finally:
    conn.close()
Next example: we have some Python code that’s connecting to a database, we’re
specifically NOT logging the error object, and we want to ensure we always close
out the connection.How can db_pass possibly make it into logs? Telemetry!"Oops, that's a log, too!"It turns out that things like error monitoring and analytics can totally be
logs, too. I kind of cheated in the code example, because there’s no mention of
telemetry in it at all, but it turns out that if you hook it up to error
monitoring like Sentry (above), run-time errors send the
local variable context right to the dashboard, and you can see the database
password in plaintext.These causes tend to bypass the central logging pipeline and become Yet Another
Place to have to worry about secrets.🕺🏻 User inputAlright, last example. Say there’s a sign in form and the entire dev team made
super duper sure that the password field is totally locked down from logging,
they read this super awesome post, and took care of all the causes we discussed.What happens?Users end up jamming passwords into the username field!So if you ever looked at login alerts for AWS and saw usernames replaced with
HIDDEN_DUE_TO_SECURITY_REASONS, this is precisely why!Everything that’s within proximity to sensitive user input tends to be
radioactive. It could be a UI issue, but users are surprisingly determined to
volunteer secrets in ways that you haven’t prepared for.We’ve touched on a half dozen causes, and the list of things goes on. We didn’t
even talk about the wonder that is crashdumps. But, I think it’s important to
zoom out and note that these are proximate causes.I stand by my claim that there’s no silver bullet to take these all out. If we
want to avoid playing whack-a-mole, we must bring out our lead bullets that
address these issues at a deeper level, and prevent these kinds of things from
happening.Fixes (lead bullets)So let’s dive in! We will survey 10 fixes, and the order we’ll go in is
somewhere between “a dependency graph of things that build on each other” and
“following the lifecycle of a secret.” Some of these are obvious or perhaps
things you’re already doing, so I’ll focus more on fixes that I think might be a
bit newer. That said, it is worth starting with the basics.📐 Data architecture🍞 Data transformations🪨 Domain primitives🎁 Read-once objects🗃️ Log formatters🧪 Unit tests🕵️ Sensitive data scanners🤖 Log pre-processors🔎 Taint checking🦸 People📐 Data architectureLead bullet #1 is the most basic and high-level: data architecture and
understanding that this is primarily a data flow problem. And part of the
solution is reducing the number of data flows and shrinking the problem space so
you simply have less things to worry about and protect.Instead of stray print statements or components that write directly to
filesystem, you instead centralize all your data flows through a single stream.
Make it so that there’s one and only one way to log something. If you can
understand and control the data structures that enter that funnel, you can
prohibit secrets from exiting it.This has the allure of being a silver bullet, because of course if you can get
to 100% of all the things we mentioned here, you’re golden! But in practice (and
as we’ve seen previously), that’s difficult because secrets find a way to sneak
in or new outflows and side channels are created.🍞 Data transformationsThe previous bullet was about controlling how data flows through your system,
this is about transforming, slicing, and disarming that data into safer forms
that can be logged. These are the data security fundamentals that you’re already
familiar with and likely already doing. This is your bread and butter, so I’m
not going to dive into every one. From top to bottom, this is generally arranged
from awesome to meh… basically, by how much information is retained.TransformationResultMinimization☁ (nothing)Redaction[redacted]Tokenization2706a40d-3d1d…Hashingdaadfab322b59…EncryptionAzKt7vBE7qEuf…Masking··········5309On the top, we have data minimization. The best way to not log secrets, is to
not have secrets to begin with! This is everything from going passwordless to
fetching only the data you need.Redaction is the next best thing. Blanking out the secret parts and before you pass
objects around in memory.Tokenization, hashing, encryption: these all have their pros, cons, and caveats.
Like… are you even doing it correctly?Dead last is masking. You leave parts of the secret intact. Maybe this works for you.
Maybe it doesn’t. Maybe you go straight to jail 🤷When these techniques work, they generally work well. But very often what
happens is that they aren’t used or are used too late, after something is
already logged. These have their places in our toolbox, but my claim again is
one bullet isn’t enough.🪨 Domain primitivesLet’s introduce lead bullet #3: domain primitives. Almost all the secrets you
run across in codebases are encoded in-memory as string primitives, and I think
that makes our jobs harder. Strings can be almost anything.Strings: any sequence of bytes from "" to "c̴̞̑ť̸͈̘̌ h̸͝ ̭̘̊ü̶̜̫̦̠͋̆͠ ļ̵̮̤̟̉̀͂ṹ̴̝̂🤷867-53-0999"const secret = "..."
There’s very little about them——at compile time or run-time——that lets you
know that it’s sensitive, dangerous to log, or somehow different than any other
vanilla string.The alternative is a concept I learned from the book Secure by
Design, and I think it’s one of
the most powerful concepts you can add to your codebase, for logs or anything
else where you want to layer in security at a fundamental level.Domain primitives: “combines secure constructs and value objects to define the
smallest building block of a domain”const secret = new Secret("...")
You use them as basic building blocks that hold secret values, and they provide
security invariants and guarantees that basic string primitives simply cannot.It’s one of the easiest things you can do. If you shift from “any string can be
a secret” to “secrets are secrets”, it makes things a lot easier to reason about
and protect.Compile-time"Check out a previous blog post on branded types, which are fantastic domain primitives with strong
compile-time guardrails."You can use these to great advantage at compile-time, giving developers
immediate feedback right in their editors.We can type a logging function (log()) so that it never accepts secrets.
Then, we use some fetching function that returns secrets, typed as secrets (and
not as strings). If we try to log that secret, it will not compile. The type
system will not let you log this secret.// Types
declare const brand: unique symbol;
type Secret = string & { [brand]: string }; // Branded type that extends string
type NotSecret<T> = T extends Secret ? never : T; // Type that excludes secrets

// Logging function
function log<T extends string>(message: NotSecret<T>) { ... };
const message: string = "this is fine"; // 🧵 string primitive
const secretz: Secret = getSecret();    // 👈 domain primitive

log(message); // 👌 compiles!
log(secretz); // 💥 error!
See this example in the TypeScript Playground.I’m omitting and glossing over a ton of details here, because I don’t want you
to focus on the implementation or even TypeScript, for that matter. The salient
point here is that instead of tossing secret strings around, you brand them as
secret types, providing useful context to both compiler and developer.Run-timeIt’s really easy to get started, even with code that is functionally a no-op.
This is basically the simplest form I can think of—an almost empty
class:class OpenAIToken extends String { /* that could be it! */ }

const token = new OpenAIToken(...);
It’s supposed to represent OpenAI credentials, but it’s just using and extending
basic language primitives. You can introduce these objects where secrets
originate, like password fields or anytime you decrypt sensitive data fetched
from the database. And then layer in behaviors and invariants for where they
tend to end up. You progressively start introducing these at both sources and
sinks, allowing you to control where secrets should or shouldn’t go. You can
embed these into data structures so you know what contains secrets. And along
the way, you increase the clarity and safety of your codebase: not only can you
prevent these tokens from going into logs, you can make sure you’re sending them
only to OpenAI and not to some other API by accident.I think in the long run, domain primitives are the most powerful control we have
because it makes our code secure by design, but it does take some time to get
there. These can easily address the direct logging cause we discussed earlier,
and with some modifications can help with many more.Run-time: part deuxWe can extend this and make it so that the default serialization behavior is
redaction.class Secret extends String {
    toString() { return "[redacted]" } // Override!
}
const secret = new Secret("shhh!");
console.log(secret);
Secret: "[redacted]"
If you try to stuff this into logs, into JSON, into kitchen sinks, into error
monitoring, wherever, it’ll always spit out the word “redacted”. You have to
intentionally reach for the value.Let’s take it further. We can create a custom class with an explicit unwrap()
function:class Secret<T> {
    constructor(private readonly value: T) {}
    toString() { return "[redacted]" } // Override serialization
    unwrap() { return this.value }     // Explicit getter function
}
There’s so many things you can do here, like maybe you want to encrypt or zero it out
in memory, because that’s in your threat model. You can take this as far as you need
to or are comfortable with. We’ll take it just one step further.🎁 Read-once objectsThere’s a bit to unpack here, but these build off domain primitives in a very
powerful way.class Secret<T> {
    private locked = false;
    constructor(private readonly value: T) {}
    toString() { return "[redacted]" }

    /* @returns the sensitive value (once and only once) */
    unwrap() {
        if (this.locked) { throw new Error("already read") }
        this.locked = true;
        return this.value;
    }
}
These objects wrap and keep the secret safe, until you actually
need it. The code in the unwrap() function is the crux: there’s a latch or
lock that activates after the secret is retrieved the first time. It goes into a
“locked” state, and any following reads result in an error that fails loudly.const secret = getSecret();
const res = await authenticate(secret.unwrap()); // Proper usage

Logger.info(secret);          // [redacted]
Logger.info(secret.unwrap()); // 💥 Error!
Once you get a secret (from user input, database, decryption, etc.) you wrap
it in a read-once object immediately and keep it wrapped for as long as you can.
And for its single, intended purpose, like using it for some kind of API
authentication, you unwrap the value, use it, and then the object stays locked
for good. This is surprisingly effective at preventing and detecting
unintentional use. It addresses and disarms many of the proximate causes that we
discussed earlier.This object pairs extremely well with static analysis. Tools like CodeQL or
Semgrep can help ensure that developers aren’t bypassing any safety guarantees.These are generally high signal, especially when you have good unit test
coverage. One drawback is that read-once objects, if handled incorrectly but not
necessarily unsafely, could cause errors at run-time. But I think the tradeoffs
are usually worth it, especially if you complement it with testing, static
analysis, and taint-checking. Speaking of which…🔎 Taint checkingI like to think of taint checking as static analysis with superpowers. I
absolutely love it and the first time I used it, it was like someone just handed
me a lightsaber. Quick review for the uninitiated: the general idea here is that
you add taint to various sources (like database objects), and yell loudly if the
data flows into certain sinks (like logs).The red data flow trace on the right detects the secret flowing into logs. But
the green path is fine, because the secret is tokenized. Let’s walk through a
quick example:
semgrep.dev/playground/s/4bq5LOn the left, we’ve marked a couple sources like decrypt and a database fetcher.
We’ve also marked our logger as a sink, and the tokenize() function as a
sanitizer.On the right in red, we can see that taint was created from the decrypt
function, propagated through the getSSN() function, and then flagged for
going into the logs on line 18.In blue, there’s a much shorter path where the user model from the database is
tainted and then flagged for going into logs.And then lastly, in green, we’re tokenizing the decrypted SSN, so it’s not
flagging that it’s logged.The idea that this is checking millions or more different data flows is the
real magic part for me.AwesomeSome of the strengths of taint analysis: obviously automation. Tracing these
data flows is 100% a job for a machine. This can really help with domain
primitives but also can be used standalone and can even key in on heuristics
like variable names: for example, all variables containing “password”. You can
tie this into all of your critical tools, from code review to CI/CD.This is especially potent against kitchen sinks and embedded secrets, because
those data structures can be tainted by secret values and checked accordingly.Not awesomeSome personal opinions on drawbacks: I do feel like taint checking rules tend to
be a bit difficult to write. I really, really like Semgrep, but I’m also not the
biggest fan of YAML.It also turns out that data flow analysis is an NP-hard problem so for large
codebases and monorepos, you likely can’t run full taint analysis on every pull
request or commit. Because it runs in CI/CD and as part of change management,
when it works, it can prevent the introduction of insecure logging into the
codebase.But, like all of the lead bullets we’ve discussed and will discuss, they can
miss. How can we handle that?🗃️ Log formattersLet’s say we made the mistake of logging too much data with our email service:{
  tenantId: "52902156-7fb6-4ab0-b659-6b07b80cf89a",
  email: {
    subject: "Log in to your account",
    html: '<a href="https://acme.com/login/98fPm...">Click here</a> to log in!',
    from: "AcmeCorp <[email protected]>",
    to: "Darth Plagueis (The Wise) <[email protected]>",
    ...
  },
  response: {
    status: 200,
    originalRequest: {
      headers: {
        Authorization: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIi..."
      },
      body: '{"html": "<a href=\\"https://acme.com/login/98fP...\\">Click..."}',
      ...
    }
    ....
  },
  ...
}
We have a couple of our usual suspects here. Because we’re logging email
contents, magic links show up in logs… twice! We’re also logging some kitchen
sinks, like email metadata and the original request, so we have PII and
authorization headers also in logs. But because this data is structured, if we
can traverse these objects, it turns out that we can zero in on these leaks
quite effectively.{
  tenantId: "52902156-7fb6-4ab0-b659-6b07b80cf89a",
  email: {
    subject: "Log in to your account",
    html: '<a href="https://acme.com/login/REDACTED">Click here</a> to log in!',
    from: "AcmeCorp <[email protected]>",
    to: "REDACTED",
    ...
  },
  response: {
    status: 200,
    originalRequest: {
      headers: "REDACTED",
      body: '{"html": "<a href=\\"https://acme.com/login/REDACTED\\">..."}',
      ...
    }
    ....
  },
  ...
}
If we can introspect these objects, we can scan for dangerous substrings like our
login links, and then drop or redact them. Or we can drop whole values, if we
know that certain paths like email.to are particularly dangerous. Fields like
request or headers tend to be risky objects that we can also remove. We can
even drop the whole log object if it doesn’t meet some admission criteria,
or—we can simply error out.So, how and where do we deploy something like this? Most application loggers
should have some type of middleware stack or pipeline, kinda like here on the
right. These are typically configured for operations like converting objects
into JSON, turning error objects into readable formats, or enriching logs by
inserting useful context like network information. We can invert that, and
instead of enriching with useful data, we can remove or redact sensitive data.export const logger = createLogger({
  format: format.combine(
    transform(),
    handleErrors(),
    enrich(),

      redact(), // 👈 insert here!

    truncate(),
    jsonify(),
    ...
  ),
  ...
});
This is a type of guardrail that helps catch many of the common problems we
described previously, like request headers or config objects. I’ve used this
with decent success and found that it works best as a rifle instead of a
shotgun. Because it’s at the application tier, you can customize it for the type
of data or context that each application handles. For example, we can make it so
that any of our domain primitives that reach this layer are quickly detected and
removed.This is extremely cheap to introduce, but there are some trade-offs. It’s
certainly more of a safety net than hard control, and a developer determined to
bypass it, can and will. Steady state, I measured this at less than 1% of clock
time, but there are some deeply unfortunate ways this can go wrong such as
poorly written regexes and self-ReDoS.More or less, these risks can be mitigated with solid unit-testing. Which leads
us to…🧪 Unit testsLead bullet #7: hooking into and using the existing test suite—that’s already
there—to our advantage. We can use several of the tools we discussed, but
instead of simply detecting or redacting secrets, we can ramp up the sensitivity
in our test environment to fail or error loudly.TechniqueProdTest🪨 Domain primitivesRedactError🎁 Read-once objectsErrorError🗃️ Log formattersRedactError🕵️ Sensitive data scannersDetectErrorI’ll cover sensitive data scanners next, but many test suites are already set up
to capture stdout and stderr, and so you can even point your scanners to
these capture buffers.The takeaway here is that you can reap the same benefits of CI/CD and change
management by catching unsafe code before it’s merged or deployed, but of
course, you’re also dependent on coverage and if the right code and data paths
are exercised.🕵️ Sensitive data scannersThese are fairly blunt but effective tools that can discover and remove
sensitive data. I’m actively going to avoid diving deep here, because it does
seem like many teams and vendors focus on this as the solution. So instead, I’d
like to pose a few questions that might help you reason about trade-offs:Where and when in your logging pipeline is it most effective?Is it a gate, in-line of the critical path, or does it scan asynchronously?Do you simply want to detect or do you bias towards masking and
redaction? How will your team handle and deal with false positives?How far do the general, out-of-box rules take you? Can you tailor it
specifically to your usage patterns?Can you verify the credentials? Can that even keep up with log throughput?And then perhaps what tends to be the long pole in the tent: what are the
costs, and can you sample instead?I think these tools tend to be better suited for defense-in-depth, because
they presume that secrets made it into logs to begin with. They can help catch the
more elusive causes we discussed like configuration changes or user input.SamplingA very brief segue into sampling. Logs tend to have a kind of power law
distribution, where certain types of logs vastly outnumber others. And typically
what you see is that log sources have static points in code, generally with the
same type of data running through them. And so within each log type, scanning
and finding a single true positive might be highly representative of that group.And so you might run into a scenario where, given some global sample rate,
you’re wasting a lot of work for high frequency logs and not even scanning lower
frequency logs. I think a better alternative to a global sample rate is to
aggregate logs by some heuristic like type or origin, and to ensure you hit some
minimum threshold.In practice, I’ve found this difficult or impossible to configure with
out-of-box solutions. I’ve had to introduce additional infrastructure to help.
And that’s our next lead bullet.🤖 Log pre-processorsSecond to last lead bullet, #9: log pre-processors. These sit between apps that
emit logs, and the final data stores.In the above example, something like Vector can receive
and process logs from our microservices before dispatching them to DataDog or
wherever logs end up. We can configure it to drop sensitive data in-place using
many of the techniques we discussed before. And we can sample some subset of
them and store them onto an S3 bucket, using a more powerful tool like
Trufflehog or an LLM to catch
and verify secrets.The idea here is to process logs streams before they’re persisted. It doesn’t
need to be Vector, chances are, you already have this existing infrastructure
that’s used for deduping, aggregation, and dropping noisy debug logs. We can
re-use it to prevent and detect secrets in logs. This pairs very well with
sensitive data scanners that we discussed earlier, and might even unlock new
ones you thought were out of reach.🦸 People“Human practitioners are the adaptable element of complex systems.
Practitioners and first line management actively adapt the system to maximize
production and minimize accidents.”-Richard Cook, https://how.complexsystems.fail/#12Our last stop is people. Modern software is a complex system. And while people
will write the code that accidentally introduces sensitive data into logs,
they’re also the ones that will report, respond, and fix them. They’ll build out
the systems and infrastructure that will keep these complex systems safe. And
early on in your maturity story and before you’re able to build out
secure-by-design frameworks, this is the lead bullet you’ll most likely use the
most.The most important message I want to convey here is that your security team isn’t
alone, especially if you:educate your teammates on secure logging designempower them to report and address these issuesand equip them with tools that get out of their way and helps them succeed.RecapAlright, so we’ve covered lead bullets that protect code, protect data, and
protect logs:📐 Data architecture🍞 Data transformations🪨 Domain primitives🎁 Read-once objects🗃️ Log formatters🧪 Unit tests🕵️ Sensitive data scanners🤖 Log pre-processors🔎 Taint checking🦸 PeopleSome of these might work for you, some of these won’t, and some that we haven’t
even mentioned could be a homerun for you. Maybe you have super tight control
over your log schemas or maybe you’re using LLMs in a really neat and effective
way. Or maybe you’re building or using a language that has first class support
for controlling secrets.These worked for me. I have some personal opinions on ones which are
foundational, some that are powerful in the long-run, and some that are really
easy to get started. But your story is different, so I’d like to zoom
out and close out with a high-level, methodical strategy that you can apply for
your security programs, and that we’ll apply and walk through with an example.StrategyHere’s a general strategy:Lay the foundationUnderstand the data ﬂowProtect at chokepointsApply defense-in-depthPlan for response and recoveryI’m not shooting for a Nobel, here. You’re probably doing some of these already,
and chances are, you have some type of playbook or process that looks just like
this. The key idea here is to not miss the forest for the trees, and use these
explicit steps to place our efforts where they’ll matter most. I’ll walk you
through a hypothetical system and we’ll apply these in order.0. Lay the foundationStep zero is the foundation. Table stakes. This is like the base tier of
Maslow’s hierarchy, and we need these before we try anything else.Developing expectations, culture, and support is a must-have. They’re easy to
ignore or forget about, but can make or break success. If you work at place that
hasn’t addressed these in the past, it can be quite jarring or difficult to
shift that mentality.I don’t have a ton of advice here other than making sure your org is aligned on
this. It’ll probably feel like it’s getting worse before it’s getting better,
but that is a sign of progress. A great litmus test for a solid foundation is if
developers will (or already have) come to you to report secrets they found in
logs.The second thing we’ll need is to decide is what we consider a secret to begin
with. I, admittedly, used secrets and sensitive data interchangeably. This may
not be the case for you. It doesn’t need to be perfect or comprehensive, and
maybe it’s just a framework. But employees, especially the security team, need
common understanding.The third item is technical. If our logs aren’t structured or aren’t JSON, it’ll
make this endeavor a lot more difficult. A lot of the techniques we discussed
just won’t work. If we don’t have that central pipeline or there isn’t One and
Only One Way to both dispatch and view logs, we’ll have to do a lot more
lifting. We’ve seen a few ways that logs bypass this, but having a central
pipeline should cover most of the bases.1. Understand the data flowWith the foundation laid, the next best thing to do is to understand and chart
out how secrets flow through your system. This is basically a Data Flow Diagram,
and we’ll go through a fairly modest example.On the left, we have users that visit some type of single-page web app. Requests
and data flow through an application load balancer to several web application
services running in containers. This is our core compute and where all the
application code runs. Let’s assume that these are disparate microservices
processing all types of data, some of which are considered secret. For the most
sensitive data, they use KMS to encrypt and then store the ciphertext blobs in
their respective database.And then, applications use a standard logging library to emit to stdout, which
gets shipped to CloudWatch and then forwarded to Datadog. That’s the final stop,
and that’s where employees, devs, support staff, etc. can view them.I highly recommend going through an exercise like this, because not only does it
force you to understand the flows and boundaries of the system, if you spend
time at each node and threat model it, you end up finding a bunch of unexpected
ways and places that secrets make it into logs. For example…Front-end analytics! It turns out that secrets from things like form contents
to session replays could end up getting sent to your user analytics platform.And then what about our application load balancers? These ship their HTTP logs
directly to CloudWatch, so we could be logging embedded secrets in URLs, and
it’s totally bypassing our application tiers.Last surprise: error monitoring! Let’s just say that some team wired up Sentry
instead of DataDog for error monitoring, because of course they did, and now
you have another stream of secrets in logs.We could go further, and we haven’t even drilled into application architecture,
but I think this is a good time to move from discovery to action.2. Protect at chokepointsThe next step we want to take is to protect the chokepoints. And if some flow
isn’t going through that chokepoint, like our rogue team that yeeted Sentry
into prod, we fix it! We can get rid of Sentry and get that team onto the paved
path of our logging pipeline.We have a very clear chokepoint; a narrow path that most logs eventually flow
through. Here’s where most of our lead bullets should go.Here’s that chokepoint splayed out. I also added an upstream node to represent
CI/CD, because that’s how code get into our apps. We can then put the bulk of
our protective controls here on the critical path.We can re-architect the app to use a single logging library and
secure-by-default domain primitives. Then we could use those to build out and
augment our static analysis, taint-checking, and unit tests. These give us a
decent front-line defense for our logging pipeline.3. Apply defense-in-depth“Every preventative control should have a detective control at the same level
and/or one level downstream in the architecture.”
-Phil Venables, https://www.philvenables.com/post/defense-in-depthThe third step is about adding depth to that defense, a concept we’re all
familiar with. I really like how Phil Venables crystallizes what
defense-in-depth means and I think he generally gives great advice. The idea is
that our controls are not simply overlapping, but mutually supportive.
Something’s always got your back.Along this chokepoint we add our downstream components, in depth. Some are
preventative, while some are detective.We can add additional protections like tokenization and read-once objects. We
can add the downstream tools like our custom log formatters, and employ various
sensitive data scanners at different points. And then finally, we can educate
and equip our team.This is what defense-in-depth looks like to me, and I think this maximizes
chances of success.4. Plan for response and recoveryDetermine the scopeRestrict accessStop the bleeding / ﬁx the sourceClean up all the places, e.g. indexesRestore accessDo a post-mortemMake it ~impossible to happen againBut, of course, if we do miss or if we manage to only detect vs. prevent, we
should be prepared for response and recovery. You already know how to respond to
incidents like this, so I won’t add much here, other than making sure you’re
sticking to a playbook in the right order, pulling levers to restrict and
restore access while you’re responding, as well as thinking about all the weird
places secrets might persist in logs, like indexes.ConclusionAnd that’s it. This is the culmination of our strategy, our work, and about 30
some minutes of blabber.With a solid foundation and understanding of our data
flows, we protected our chokepoints in-depth and kept secrets out of logs. We’ve
also introduced a lot of other strong primitives that materially improve our
security program. So is that it? Is the job done?Well, no, because the data team wired up some ETL jobs that are now spewing
secrets into data lake logs, because of course they did.Like most things in security, the job often isn’t ever done. But we have the
understanding, the tools, and a strategy to fight the next fight. Keeping
secrets out of logs is in your hands.*meIf you liked what you heard, or if you hated it, I’d love to hear your story.
Please, reach out! Thanks! ✌️]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The MacBook has a sensor that knows the exact angle of the screen hinge]]></title>
            <link>https://twitter.com/samhenrigold/status/1964428927159382261</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45158968</guid>
            <description><![CDATA[Something went wrong, but don’t fret — let’s give it another shot.]]></description>
            <content:encoded><![CDATA[Something went wrong, but don’t fret — let’s give it another shot. Some privacy related extensions may cause issues on x.com. Please disable them and try again.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SQLite's Use of Tcl]]></title>
            <link>https://www.tcl-lang.org/community/tcl2017/assets/talk93/Paper.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45158814</guid>
            <description><![CDATA[SQLite is a TCL extension that has escaped into the wild.]]></description>
            <content:encoded><![CDATA[



D. Richard Hipp
24th Annual Tcl/Tk Conference
Houston, TX
2017-10-19


1.0 Introduction


SQLite is a TCL extension that has escaped into the wild.



The design of SQLite was inspired by the design of TCL, both in
the way it handles datatypes and in the formatting of its source
code.
The index use case for SQLite was in a Tcl/Tk application for an
industrial company.
From its inception, SQLite has always depended heavily on TCL.
These days, SQLite no longer uses TCL internally and can be run
separately from any TCL interpreter, and yet the SQLite development
process still depends heavily on TCL.


1.1 About SQLite


SQLite is an SQL database engine, and 
the most widely used database engine in the world.
SQLite is built into all cellphones as a core component and is the
primary means of data persistence on phones.  SQLite is also an
integral part of most web browsers.  SQLite is built into MacOS and
is used by most of the default applications on that platform.
Windows10 requires the C:\Windows\System32\winsqlite3.dll file in
order to boot.  Countless other popular applications like Skype 
and WhatsApp and iTunes depend on SQLite.


Because SQLite is open source and can be freely downloaded and
duplicated, exact usage numbers are unavailable.  But reasonable
estimates are that there are more SQLite instances in operation
today than there are people on earth.  Most devices that
use the SQLite database engine contain hundreds of separate databases,
and there are billions of such devices.  Hence, there are likely
around one trillion SQLite databases in active use.


There are more copies of SQLite in use than there are copies of Linux.
We know this because SQLite is used on almost all Linux systems, but
SQLite is also used on many other non-linux systems such as Macs, iPhones,
and Windows computers.
By similar arguments, there are more copies of SQLite in use than
there are Macs, or Windows PCs.
There are probably more copies of SQLite in use than all other database
engines combined.
It seems likely that SQLite is the most widely used and deployed
software component of any kind, with the possible exception of the
zLib compression library.

1.2 SQLite Is A TCL Extension, Not A TCL Application


SQLite is not written in TCL.  Rather, SQLite is intended to be used
by TCL.  Like the TCL interpreter, SQLite is written in ANSI C.


The fact that SQLite was primarily intended to be used from TCL
is evident in an number of ways.


All programming languages, other than C/C++, require some kind of
adaptor in order to interface with the SQLite C implementation.  Language
adaptors for SQLite are widely available from third party programmers.
The adaptors for PHP and Python are built into those languages, for
example.  A Java adaptor is baked into Android.  And so forth.  Only
the TCL adaptor is included as part of the SQLite core.  The source code
file that implements the TCL adaptor for SQLite, "tclsqlite.c",
was part of the very first check-in on the SQLite source repository
on 2000-05-29.  (See 
https://sqlite.org/src/ci/6f3655f79f9b6fc9.)


All modern SQL implementations provide a means to do late binding of
parameter values to the SQL statements.  Usually a naked "?" character,
or a "?" followed by an integer is used.  For example:

SELECT passwd, photo FROM user WHERE uid=?1



The "?1" token in the SQL above would be assigned a value at run-time
in order to look up the password and photograph of a particular user.


SQLite supports this syntax.  But because of its TCL heritage, SQLite
also allows the parameter to take the form of a TCL variable.  Hence:

SELECT passwd, photo FROM user WHERE uid=$uid



When a statement such as the above is run, the TCL language adaptor
automatically binds the value of the $uid TCL variable to the SQL statement
before it is evaluated, providing an intuitive and seamless interface
between TCL and SQL.  SQLite is the only database engine that behaves
this way.


The TCL heritage of SQLite is visible in the type system of
SQLite.  Early versions of SQLite (prior to 2004) operated on the classic
TCL principal that "everything is a string".  Beginning with SQLite3
(2004-06-18), SQLite also supports binary data.  However, types are still
very flexible in SQLite, just as they are in TCL.  SQLite treats the datatypes
on column names in a CREATE TABLE statement as suggestions rather than
hard requirements.  SQLite is happy to store a 100KB string value in a
column that is declared "SHORT INT", just as TCL is happy to store either
a large string or a small integer in the same variable.  There are some
differences in how SQLite deals with datatypes, in comparison to TCL, due
to the different nature of the SQL language.  SQLite has the concept of
"type affinity".  If a column is declared "INT" and one inserts a string
into that column that looks like an integer and can be safely converted into
an integer without loss of information, then that conversion occurs
automatically.  This provides a measure of compatibility with the rigid
type systems of other SQL database engines.


The flexible type system of SQLite seems natural and intuitive to programmers
with prior experience programming in TCL.  Curiously, though, it is a source
of frustration and frequent complaining from programmers accustomed to the
rigid and unforgiving type systems of languages like Java.


The similarities in the type systems of TCL and SQLite extends to more than
just the interface.  An important part of the C/C++ interface for SQLite
is the "sqlite3_value" object
(https://sqlite.org/c3ref/value.html) which is analogous to the
Tcl_Obj object in TCL.  Both TCL and SQLite use a dual-representation approach,
where each value can be represented simultaneously as both a string and
some other type.

2.0 How SQLite Depends On Tcl


SQLite began as a TCL extension, though these days most uses of SQLite
are in applications written in languages other than TCL.  Many programmers
who use SQLite in their applications have no knowledge or awareness of TCL.
The SQLite source code used by most developers is a single file of pure
C code named "sqlite3.c" that contains no TCL code.  
This is what we mean when we
say that SQLite as "escaped" into the wild.  Deployed instances of SQLite
no longer depends on TCL.


Nevertheless, SQLite is still heavily dependent upon TCL and the ongoing
support, maintenance, and enhancement of SQLite would not be possible without
TCL, and would be seriously inconvenienced without Tk.


2.1 SQLite Source Code Is Mostly TCL


The deliverable source code for SQLite is a single file named
"sqlite3.c" and its companion header "sqlite3.h".
Both files are 100% ANSI-C code.  But developers do not edit these
files directly.  The sqlite3.c and sqlite3.h source files are build
products, and the source tree used to build those files is over 50%
TCL code.  Figure 1 nearby shows the exact ratios.



Figure 1: Breakdown Of SQLite Source Code By Language



Figure 1 is for the main SQLite source repository.  Many of the test
cases and much of the documentation is held in separate repositories,
not included in Figure 1.  The separate repositories also contain a great
deal of TCL code.


Much of the TCL code in the main SQLite repository consists of test scripts.
At this writing, the core repository contains 1153 separate test scripts
totally about 389 KB of space.
But this is not the only use of TCL in SQLite.

2.2 Machine Generated C Code


A non-trivial amount of the deliverable C code for SQLite is machine
generated.  Some of the machine generated code is created by C programs,
such as LEMON which translates the SQL language grammar into C code to
implement a push-down automaton to parse the SQL language.  But much of
the automatically generated code is created using TCL scripts.  TCL is
well suited for scanning source files to extract information to be
merged with other files and for making mechanized edits.  For example,
the byte-code engine used to evaluate SQL statements inside of SQLite
is implemented as a large "switch" statement inside a "for" loop, with a
separate "case" for each opcode, all in the "vdbe.c" source file.
At build-time, TCL scripts scan the vdbe.c source file looking for the
appropriate "case" statements and then build header files that assign
consecutive integers to each symbolic opcode name.  (The opcodes used by
the SQLite byte-code engine are not an API as they are in TCL and thus
can change from one build to the next.)  This mapping of symbolic opcode
names into integers is not a simple as one might suppose.  For reasons
of optimization, there are many constraints on the specific values that
are assigned to opcodes.  For example, many opcodes such as OP_Add must
have the same numeric value as the corresponding "+" token in the SQL
language parser.  Sometimes a group of related opcodes, such as the
comparison operators OP_Eq, OP_Ne, OP_Lt, OP_Le, OP_Ge, and OP_Gt, need
to be assigned consecutive integers in a specific order.  These constraints
are all handled effortlessly in TCL.  Accomplishing the
same with AWK would be rather more difficult.


Perhaps the most important task for TCL during the SQLite build process
is constructing the SQLite amalgamation source code file.
Recall that most developers use SQLite in the form of a single big file
of C code named "sqlite3.c" and referred to as "the amalgamation".
A TCL script named "mksqlite3c.tcl" runs in order to construct the
amalgamation from over one hundred separate input files.  Each of these
inputs files must be added to the amalgamation in just the right order.
Furthermore, the source files are edited as part of the amalgamation building
process.  When mksqlite3c.tcl encounters a "#include" for an SQLite header,
it replaces the "#include" with a copy of that header file, taking care
to make sure each header file is only included once.  The mksqlite3.tcl
script automatically adds the "static" keyword to internal SQLite APIs
to give them file linkage, and makes other similar edits.

2.3 The sqlite3_analyzer.exe Utility


In addition to the core SQLite library, the SQLite source tree also contains
code for several analysis and control programs.  One of these programs
is called "sqlite3_analyzer" (or "sqlite3_analyzer.exe" on Windows).
The sqlite3_analyzer program examines an SQLite database and generates
a detailed report on the disk usage by the various tables and indexes
within that database.  The sqlite3_analyzer program is very useful in
understanding how an application is using disk space.


It turns out that sqlite3_analyzer, though disguised as an ordinary
executable, is really a TCL application.  The main source code file for
this application is
tool/spaceanal.tcl.
During the build process, this script is converted into a C-language
string constant (using another TCL script) and added to a very simple
C-language wrapper than starts a TCL interpreter and then passes the
application script to that interpreter.


The sqlite3_analyzer program could be rewritten in pure C.  But that
would be a lot of code.  The TCL script that implements sqlite3_analyzer is
less than 1000 lines long.  The equivalent C program would surely be at
least ten times larger.


Note that the sqlite3_analyzer utility program statically links a TCL
interpreter and so does not require a TCL installation on the target
computer to use.  The sqlite3_analyzer utility program is used by
tens of thousands of developers, most of whom do not realize that they
are really running a TCL application.

2.4 TCL Used For Testing SQLite


One of the key features of SQLite is that it uses aviation-grade testing.
The tests of SQLite, at a minimum, provide 100% modified condition/decision
coverage (MC/DC) of the SQLite code, with independence.  100% MC/DC roughly
means that every branch instruction at the machine code level is exercised
at least once in each direction.  The precise definition of
MC/DC is slightly stricter than this, for example when comparing boolean
vectors, but the 100% branch tests coverage definition is very close
approximation.  The "with independence" term means that SQLite is tested
in multiple ways with test code being written and maintained by different
individuals.


The amount of testing done on SQLite is fanatical.  On the other hand,
that level of testing is necessary for a fundamental low-level component,
such as a database engine, that is used by billions of devices.  If an
ordinary application encounters an obscure bug, it can normally be rebooted 
to clear the problem.  But the job of a database engine is to remember things,
and so databases tend to remember their mistakes across reboots.  For these
reasons, it is important that SQLite have a very low bug density.


TCL is used in every aspect of SQLite testing.
The test cases that are part of the primary SQLite source code
repository are written in TCL.
Other test cases such as 
TH3 and
SQLLogicTest are written
in C but still depend on TCL for operation.


The TH3 test suite is a set of proprietary tests for SQLite that form the
primary means of achieving 100% MC/DC.  TH3 is designed to
run on embedded hardware without the support of a desktop operating system.
TH3 consists of over 1350 test modules together with over 100 control files.
The test modules are written in either C or SQL or a combination of both.
The control files are text formatted in a way that easily parsed by TCL.
To build a TH3 test, a TCL script is run that combines some subset of the
test modules and control files into a single large C program that will
automatically run the required tests.  This C program is then linked against
the "sqlite3.c" amalgamation and the resulting binary is moved to the target
computer and executed.  TCL scripts automate this entire process on
all major host platforms.


To verify that the TH3 tests really do provide 100% MC/DC, special options
are added to the TCL scripts that run the tests, causing the GCC coverage
analysis tools to be invoked.  The output of gcov is then postprocessed to
reveal and report any branch instructions that were missed by the tests.
The TH3 tests themselves are all implemented in C and SQL, but the operation
and management of those tests is all done with TCL.

2.5 TCL Generated Documentation


The extensive documentation for SQLite available on the SQLite website
(https://sqlite.org/) is all generated
by TCL.  Many of the documents, such as the API reference documentation and
the descriptions of the byte-code engine opcodes, are created by TCL scripts
that scan C source code and extract the necessary information from the code
and comments.  Thus, the API documentation is largely derived from
comments in the source code.  Keeping the official documentation (in
comments) and the source code close together helps ensure that they are
in agreement.


Other whitepaper documents are generated from source files that look 
mostly like
HTML but which contain additional TCL code embedded inside of
<tcl>...</tcl> markup.  The added TCL code is used for
advanced formatting techniques, for automatically creating cross-references
and cross-links, and for constructing complex displays such as the
popular "rail-road" syntax diagrams for SQL.

2.6 Tcl/Tk Used During Development Of SQLite


The text editor used by the primary author of SQLite is a custom editor
with emacs-style key bindings that is built on top of the Tk Text widget.
The "e" editor, as it is called, is cross-platform, which helps in the
development of a cross-platform software library like SQLite.  The "e"
editor has been used for the entire 17-year history of SQLite.  It has
been enhanced over the years with various customizations created especially
to help manage the SQLite source code.


The Fossil version control system used for the SQLite source code
(and written specifically for that purpose) uses Tcl/Tk to show graphical
side-by-side diffs in a separate window.  When the "fossil diff --tk"
command is run, Fossil generates a script to show the diff graphically
and then kicks off a separate "wish" process to run that script and
display the diff in a separate window.  This graphical diff window has
a "Save" button which will cause the Tcl/Tk code needed to reproduce itself
to be written to a file.  This file can be, in turn, sent to a collaborator
for display.  Passing around graphical diffs as ordinary text files is
much simpler and easier than passing around JPEG images or text "context"
diffs.


No two SQLite developers work in the same office.  The team is
geographically distributed.  To help the team stay in touch, a custom
chatroom has been created using a Tcl/Tk script.  The same script works
as both client and server.  The chatroom is private and uses a proprietary
protocol, so that developers are free to discuss sensitive matters without
fear of eavesdropping.  The chatroom is implemented as just over
1000 lines of Tk code, and is thus accessible and easy to customize.
Among the customizations is the ability to send saved "fossil diff --tk"
graphical diffs to collaborators and have the diff pop automatically on
the collaborators screen.  Small features like this seem trivial
by themselves, but together than help the developers
to work much more efficiently.  These kinds of productivity-enhancing
features are unavailable to users of commercial business collaboration 
packages such as HipChat.

3.0 Summary


SQLite is an indispensable element of most modern computer systems, and
TCL is an indispensable tool used in the production and maintenance of
SQLite.  Thus, the computing infrastructure we enjoy today would not exist
except for TCL.


As deployed, SQLite contains no TCL code.
However, the design of SQLite is inspired by TCL.
And TCL is used extensively in the code generation, testing,
analysis, documentation, and development of SQLite.  Without
TCL, SQLite would not exist.


Every developer and every team has a finite number of "brain cycles"
available to do their job.  The fewer cycles spent messing with tools,
the more cycles are available to devote towards solving the problem.
So for maximum productivity, it is important to use tools that get
the job done with a minimum of fuss and bother.
Our 17-year experience using TCL in the SQLite project has convinced
us that TCL is just such a tool.  Tcl provides the most help per
brain cycle of any similar technology.


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Delayed Security Patches for AOSP (Android Open Source Project)]]></title>
            <link>https://twitter.com/grapheneos/status/1964561043906048183</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45158523</guid>
            <description><![CDATA[Something went wrong, but don’t fret — let’s give it another shot.]]></description>
            <content:encoded><![CDATA[Something went wrong, but don’t fret — let’s give it another shot. Some privacy related extensions may cause issues on x.com. Please disable them and try again.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Belling the Cat]]></title>
            <link>https://en.wikipedia.org/wiki/Belling_the_Cat</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157906</guid>
            <description><![CDATA[From Wikipedia, the free encyclopedia]]></description>
            <content:encoded><![CDATA[
							

						From Wikipedia, the free encyclopedia
					

Gustave Doré's illustration of La Fontaine's fable, c. 1868
Belling the Cat is a fable also known under the titles The Bell and the Cat and The Mice in Council. In the story, a group of mice agree to attach a bell to a cat's neck to warn of its approach in the future, but they fail to find a volunteer to perform the job. The term has become an idiom describing a group of persons, each agreeing to perform an impossibly difficult task under the misapprehension that someone else will be chosen to run the risks and endure the hardship of actual accomplishment.[1]
Although often attributed to Aesop, it was not recorded before the Middle Ages and has been confused with the quite different fable of Classical origin titled The Cat and the Mice. In the classificatory system established for the fables by Ben Edwin Perry, it is numbered 613, which is reserved for Mediaeval attributions outside the Aesopic canon.[2]


Synopsis and idiomatic use[edit]
The fable concerns a group of mice who debate plans to nullify the threat of a marauding cat. One of them proposes placing a bell around its neck, so that they are warned of its approach. The plan is applauded by the others, until one mouse asks who will volunteer to place the bell on the cat. All of them make excuses. The story is used to teach the wisdom of evaluating a plan on not only how desirable the outcome would be but also how it can be executed. It provides a moral lesson about the fundamental difference between ideas and their feasibility, and how this affects the value of a given plan.[3]
The fable gives rise to the idiom to bell the cat, which means to attempt, or agree to perform, an impossibly difficult task.[4] Historically 'Bell the Cat' is frequently claimed to have been a nickname given to fifteenth-century Scottish nobleman Archibald Douglas, 5th Earl of Angus in recognition of his part in the arrest and execution of James III's alleged favourite, Thomas (often misnamed as Robert) Cochrane. In fact the earliest evidence for this use is from Hume of Godscroft's history of the Douglases published in 1644,[5] and therefore is more reflective of perception of the idiom in the seventeenth century than the fifteenth.[6] In the 21st century the idiom was adopted by the investigative journalism group Bellingcat.[7] 
The first English collection to attribute the fable to Aesop was John Ogilby's of 1687; in this there is a woodcut (by Francis Barlow), followed by a 10-line verse synopsis by Aphra Behn with the punning conclusion:


Good Councell's easily given, but the effect
Oft renders it uneasy to transact.[8]


Early versions and later interpretations[edit]
"Belling the cat" is one of the proverbs illustrated in Pieter Bruegel I's painting Netherlandish Proverbs (1559).
One of the earliest versions of the story appears as a parable critical of the clergy in Odo of Cheriton's Parabolae.[9] Written around 1200, it was afterwards translated into Welsh, French and Spanish. Sometime later, the story is found in the work now referred to as Ysopet-Avionnet, which is largely made up of Latin poems by the 12th century Walter of England, followed by a French version dating from as much as two centuries later. It also includes four poems not found in Walter's Esopus; among them is the tale of "The Council of the Mice" (De muribus consilium facientibus contra catum). The author concludes with the scornful comment that laws are of no effect without the means of adequately enforcing them and that such parliamentary assemblies as he describes are like the proverbial mountain in labour that gives birth to a mouse.[10]
The fable also appeared as a cautionary tale in Nicholas Bozon's Anglo-Norman Contes Moralisés (1320), referring to the difficulty of curbing the outrages of superior lords.[11] It was in this context too that the story of a parliament of rats and mice was retold in William Langland's allegorical poem Piers Plowman.[12] The episode is said to refer to the Parliament of 1376 which attempted unsuccessfully to remedy popular dissatisfaction over the exactions made by nobles acting in the royal name.[13]
Langland's French contemporary, the satirical Eustache Deschamps, also includes the story among his other moral ballades based on fables as "Les souris et les chats".[14] It has been suggested that in this case too there is a political subtext. The poem was written as a response to the aborted invasion of England in 1386 and contrasts French dithering in the face of English aggression.[15]  The refrain of Deschamps' ballade, Qui pendra la sonnette au chat (who will bell the cat) was to become proverbial in France if, indeed, it does not record one already existing.
In the following century, the Italian author Laurentius Abstemius made of the fable a Latin cautionary tale titled De muribus tintinnabulum feli appendere volentibus (The mice who wanted to bell the cat)[16] in 1499. A more popular version in Latin verse was written by Gabriele Faerno and printed posthumously in his Fabulae centum ex antiquis auctoribus delectae (100 delightful fables from ancient authors, Rome 1564), a work that was to be many times reprinted and translated up to start of the 19th century. Titled simply "The Council of the Mice", it comes to rest on the drily stated moral that 'a risky plan can have no good result'. The story was evidently known in Flanders too, since 'belling the cat' was included among the forty Netherlandish Proverbs in the composite painting of Pieter Bruegel the Elder (1559). In this case a man in armour is performing the task in the lower left foreground.[17] A century later, La Fontaine's Fables made the tale even better known under the title Conseil tenu par les rats (II.2).[18]

A Japanese woodblock illustration by Kawanabe Kyōsai of La Fontaine's fable, 1894.
In mediaeval times the fable was applied to political situations and British commentaries on it were sharply critical of the limited democratic processes of the day and their ability to resolve social conflict when class interests were at stake. This applies equally to the plot against the king's favourite in 15th century Scotland and the direct means that Archibald Douglas chose to resolve the issue. While none of the authors who used the fable actually incited revolution, the 1376 Parliament that Langland satirised was followed by Wat Tyler's revolt five years later, while Archibald Douglas went on to lead a rebellion against King James. During the Renaissance the fangs of the fable were being drawn by European authors, who restricted their criticism to pusillanimous conduct in the face of rashly proposed solutions. A later exception was the Russian fabulist Ivan Krylov, whose adaptation of the story satirises croneyism. In his account only those with perfect tails are to be allowed into the assembly; nevertheless, a tailless rat is admitted because of a family connection with one of the lawmakers.[19]
There still remains the perception of a fundamental opposition between consensus and individualism. This is addressed in the lyrics of "Bell the Cat",[20] a performance put out on DVD by the Japanese rock band LM.C in 2007.[21] This is the monologue of a house cat that wants to walk alone since "Society is by nature evil". It therefore refuses to conform and is impatient of restriction: "your hands hold on to everything – bell the cat". While the lyric is sung in Japanese, the final phrase is in English. Another modernised adaptation based on this fable, that updates the moral, has been published by Patricia McKissack in her Who Will Bell the Cat? (illustrated by Christopher Cyr).[22][23]
There is a Tibetan proverb that is very similar, "Putting a bell on the cat's neck after the mother of mice was consulted"[24]


Several French artists depicted the fable during the 19th century, generally choosing one of two approaches. Gustave Doré and the genre painter Aurélie Léontine Malbet (fl. 1868–1906)[25] pictured the rats realistically acting out their debate. The illustrator Grandville,[26] along with the contemporaries Philibert Léon Couturier [fr] (1823–1901)[27] and Auguste Delierre (1829–1890),[28] caricature the backward practice and pomposity of provincial legislatures, making much the same point as did the Mediaeval authors who first recorded the tale. At the end of the century a publishing curiosity reverts to the first approach. This was in the woodblock print by Kawanabe Kyōsui that appeared in the collection of La Fontaine's fables that was commissioned and printed in Tokyo in 1894 and then exported to France.[29] In the upper left-hand corner a cat is seen through a warehouse window as it approaches across the roofs while inside the rats swarm up the straw-wrapped bales of goods. At its summit the chief rat holds the bell aloft. An earlier Japanese woodblock formed part of Kawanabe Kyōsai's Isoho Monogotari series (1870–80). This shows an assembly of mice in Japanese dress with the proposer in the foreground, brandishing the belled collar.[30]


In the 18th century the fable was one among many set by Louis-Nicolas Clérambault in the fables section of Nouvelles poésies spirituelles et morales sur les plus beaux airs (1730–37).[31] In the following century the text of La Fontaine's fable was set for male voices by Louis Lacombe[32] and by the Catalan composer Isaac Albéniz for medium voice and piano in 1889.[33] In 1950 it was set for four male voices by Florent Schmitt.[34] But while La Fontaine's humorously named cat Rodilardus, and antiquated words like discomfiture (déconfiture), may fit an art song, there have also been faithful interpretations in the field of light music. A popular composer of the day, Prosper Massé, published such a setting in 1846.[35] More recently there has been Pierre Perret's interpretation as part of his 20 Fables inspirées de Jean de la Fontaine (1995),[36] and a jazz arrangement on Daniel Roca's 10 Fables de La Fontaine (2005).[37]


Collective action problem
Who Will Bell the Cat?, a children's picture book based on the fable



^ Strouf, Judie L. H. (2005). The literature teacher's book of lists. Jossey-Bass. p. 13. ISBN 0787975508.

^ Ben Edwin Perry (1965). Babrius and Phaedrus. Loeb Classical Library. Cambridge, MA: Harvard University Press. pp. 545, no. 613. ISBN 0-674-99480-9.

^ "Belling The Cat". Fables of Aesop. 2016-07-05. Retrieved 2021-03-04.

^ "To Bell the Cat" thefreedictionary.com. Retrieved 9 November 2007.

^ David Reid, David Hume of Godscroft's History of the House of Angus, vol. 1 (STS: Edinburgh, 2005), p. 26.

^ Macdougall, Norman (1982). James III: A Political Study. Edinburgh: John Donald. pp. 287–288. ISBN 0859760782.

^ "Bellingcat: Digital Sleuths on the Hunt for Truth"

^ "21. De cato et muribus (1687), illustrated by Francis Barlow". Mythfolklore.net. Retrieved January 26, 2011.

^ Laura (15 May 2009). "Christianizing Aesop: The Fables of Odo of Cheriton". Journey to the Sea. Retrieved 26 January 2011.

^ Ysopet-Avionnet, the Latin and French texts, University of Illinois 1919; fable LXII, pp. 190–192; this is archived online

^ Les contes moralisés de Nicole BozonParis, 1889, pp. 144–145; archived here

^ William's Vision of Piers Plowman by William Langland, edited by Ben Byram-Wigfield (2006), Prologue, lines 146–181; online text here Archived 2011-08-07 at the Wayback Machine

^ "The Parliament of the Rats and Mice". Medieval Forum. SFSU. Archived from the original on 10 March 2022. Retrieved 26 January 2011.

^ Poésies morales et historiques d'Eustache Deschamps, Paris 1832, pp. 188–189

^ Robert Landru, Eustache Deschamps, Fédération des sociétés d'histoire et d'archéologie de l'Aisne, vol. XV 1969, p. 126

^ Fable 195

^ View on Wikimedia Commons

^ "Elizur Wright's translation". Oaks.nvg.org. Retrieved 26 January 2011.

^ Kriloff's Fables, translated by C. Fillingham Coxwell, London 1920, pp. 38–39; archived online

^ "Lyrics | LM.C – Bell The Cat (English)". SongMeanings. 25 April 2010. Retrieved 26 January 2011.

^ "Bell the CAT/LM.C". YouTube. 18 November 2007. Archived from the original on 2021-12-12. Retrieved 26 January 2011.

^ Who will bell the cat?. OCLC 1037155724.

^ "Who Will Bell the Cat?". Publishers Weekly. PWxyz LLC. February 19, 2018. Retrieved April 6, 2022.

^ p. 135, Tsewang, Pema. 2012. Like a Yeti Catching Marmots. Boston: Wisdom Publications.

^ Exhibited at the 1888 Salon; photo online

^ "See online". Archived from the original on July 20, 2011. Retrieved 17 August 2012.

^ "In the Musée Denon de Chalon-sur-Saône". Philibert-leon-couturier.com. Retrieved 17 August 2012.

^ "In the Musée La Fontaine at Château Thierry". Retrieved 17 August 2012.

^ George Baxley. "baxleystamps.com". baxleystamps.com. Retrieved 17 August 2012.

^ View online Archived 2012-03-25 at the Wayback Machine

^ The score is printed in: John Metz, The Fables of La Fontaine: A Critical Edition of the Eighteenth-Century, Pendragon Press 1986, p. 45

^  Op. 85, 1879, Score at Gallica

^ Liedernet

^ Op. 123, Liedernet

^ Bibliographie de la France, 14 March 1846, 127

^ "Pierre Perret chante 20 fables inspirées de Jean de La Fontaine Perret, Pierre, 1934–..." bibliotheques.avignon.fr.

^ Track available on Jamendo








]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Algebraic Effects in Practice with Flix]]></title>
            <link>https://www.relax.software/blog/flix-effects-intro/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157466</guid>
            <description><![CDATA[Algebraic effects are not just a research concept anymore. You can use them in real software, today. Here's why you'd want to do that, in order of importance.]]></description>
            <content:encoded><![CDATA[ Algebraic effects are not just a research concept anymore. You can use them in real software, today. Here’s why you’d want to do that, in order of importance:


Effects make your code testable
One of the central goals of enterprise software development. Dependency injection, mocking, architecture patterns like clean, hexagonal, DDD are all meant to tackle this. Effects solve this elegantly by separating the “what” from the “how”.


Effects give immediate visibility into what your own and 3rd-party code is doing
Supply chain attacks are real. And they will get worse with more AI slop entering our codebases. Tools like Go’s Capslock fix this by following the whole chain of calls to stdlib functions. Effects provide this by design, as all effects are tracked by the type and effect system.


Effects enable user-defined control flow abstractions
Solving the “what color is your function” problem1. You can also leverage effects to implement Async/await, coroutines, backtracking search and other control flow patterns as user libraries without hard-coding these features into the language.


Algebraic effects come from the pure functional world, serving a purpose similar to monads — keeping track of and having control over side effects. Like monads, they enable us to write our core logic with pure functions and push side effects like IO outwards, closer to application boundaries.
Unlike monads, effects are easy to grasp for a regular developer and give immediate benefits when starting out. For me personally they’re a more natural abstraction for managing side effects — after all, effects are in the name.
Starting out as an academic concept, algebraic effects were introduced to the world by research languages like Eff, Koka, Effekt, Frank, Links, and more recently Ante.
People have also applied effects in practice, so far usually via a monad-based approach, by making libraries in established languages like Scala Kyo / Cats Effect / ZIO; Typescript Effect and Effector, C# language-ext, C libhandler and libmprompt, C++ cpp-effects, various Haskell libraries, etc.
In addition to forcing you into a monadic way of thinking, libraries implementing effects are limited by their host languages.
In this article, I will walk you through applying algebraic effects on a real world example using Flix, a new programming language that is built with effects from the ground up, and supports functional, logic and imperative paradigms.

Table of Contents

Type and Effect System: A Motivating Example
Effect Handlers: Building Intuition
Real-World App: AI movie recommendations
Where to Go From Here
Extra: Why Algebraic Effects are Algebraic and how they relate to monads
Footnotes


Currently only few languages support effects out of the box. The only one that I know of besides Flix is Unison. OCaml has a language extension, but there is no support yet in the type system. Haskell has added support for delimited continuations, but effects are still only available via libraries.
In addition to having a “type and effect system” that improves function signatures and makes sure all effects are handled, Flix supports traits, local mutability via regions, working with immutable or mutable data, and Go/Rust-like structured concurrency. It also has a first-class Datalog integration. But I will only focus on effects here. Let’s start.
Type and Effect System: A Motivating Example 🔗
Imagine a function called calculateSalary:
def calculateSalary(base_salary, bonus_percent):

Based on the function name and the signature, one can assume it’s just a pure function that does some calculations. In a statically typed language you are also guaranteed that the function arguments and outputs will be of a certain type.
But even if the types are correct, nothing stops our little calculateSalary() from, say, sending an offensive email to your grandma2:
def calculateSalary(base_salary, bonus_percent):
    server.sendmail("grandma@family.com", "Your cookies are terrible!")
    return base_salary * (1 + bonus_percent/100)

If, on the other hand, you extend your type system with effects, you will see immediately in the signature that this function may do something fishy:
def calculateSalary(salary: Float64, percent: Float64): 
    Float64 \ {Email} = {
//            ^^^^^^^ Notice the Email effect!

Of course, in real life the issue it’s not usually about the grandma. Instead, this function could throw an exception — still quite dangerous. If you forget to handle the exception, your app will crash. Or another very realistic scenario is that calculateSalary() calls a database to get some employee details for calculations, and you forgot to provide a database connection string. That can also result in an exception or a panic.
Effect Handlers: Building Intuition 🔗
The job of the type and effect system is not just to improve our function signatures. It’s also making sure all the effects are handled somewhere. This is where effect handlers come in.
Usually when people talk about algebraic effects what they’re actually talking about is effect handlers. If you know exceptions, effect handlers are super easy to understand. Here’s a Jenga analogy:
Imagine the call stack is a Jenga tower. New blocks are carefully added each time you call a function.
Saurav S, Unsplash
When an exception is thrown, your whole nice Jenga tower gets destroyed, all the way up to the catch() block. The catch block can safely handle the error, but the stack is unwinded, meaning you lose all of the state you had in your program before throwing the exception. You have to build your tower again, from scratch.
When using effect handlers you can actually go back to your original computation after the handler is done handling the effect. The handler can also return some values back to your program, and it can even resume multiple times with different return values. You also still have the option of not resuming at all and aborting the program — that would be the effect equivalent of exceptions.
Back to the Jenga analogy: if your tower is about to fall down, with effects you can freeze it mid-collapse. You then call someone for help (handler), and they decide whether to let the tower fall, magically restore it to the previous statlte. Or even hand you different blocks to try the same move (call the continuation) again, possibly multiple times with different inputs. Your Jenga tower ends up looking more like a fork or a tree, with multiple different copies of your blocks branching out at some point from the base.
To make this more concrete, let’s start by reproducing exceptions with effects. Here’s how a try/catch looks like in Python:
def divide(x, y):
    try:
        return x / y
    except ZeroDivisionError:
        print("Division by zero!")
        return None

Here’s the equivalent code in Flix. We first define an Exception effect and a divide() function:
eff Exception {
    def throw(msg: String): Void
}

def divide(x: Int32, y: Int32): Int32 \ Exception = 
    if (y == 0) {
        Exception.throw("Division by zero!")
    } else {
        x / y
    }

And then provide a handler for this effect somewhere, preferably close to main():
def main(): Unit \ IO = 
    run {
        println(divide(10, 0))
    } with handler Exception {
        def throw(msg, _resume) = println("Error: ${msg}")
    }

What this does is registers an effect called Exception with a method throw(). We then perform this effect in our function when there’s an error, similar to throwing an exception in the Python version. Control is transferred to the effect handler, which then decides how to handle the exception, similar to a catch() block in Python.
Notice we never call resume() from the handler. This results in the program being aborted, just like with exceptions. Graphically, this can be represented as follows:
block-beta
    columns 2
    
    A["Statement 1"] space:1
    B["Statement 2"] space:1
    C["Statement 3"] space:1
    D["Perform Effect"] space:1
    space:1 E["Handle Effect"]
    space:1 F["Process & Exit"]
    space:1 space:1
    
    D --> E
    
    style D fill:#ffcccc,color:#000
    style E fill:#ccffcc,color:#000
    style F fill:#ccffcc,color:#000
So far so good, but this is not much different from Python. To really take full advantage of effect handlers, we can use resume() to return to the original computation and proceed from the line after the effect was performed:
eff ResumableException {
    def askForInput(): Int32
}

def divide(x: Int32, y: Int32): Int32 \ ResumableException = 
    if (y == 0) {
        let newY = ResumableException.askForInput();
        x / newY
    } else {
        x / y
    }

def main(): Unit \ IO = 
    run {
        println(divide(10, 0))
    } with handler ResumableException {
        def askForInput(_, resume) = {
            println("Enter a new divisor:");
            resume(5) // Or get from user input
        }
    }

block-beta
    columns 2
    
    A["Statement 1"] space:1
    B["Statement 2"] space:1
    C["Statement 3"] space:1
    D["Perform Effect"] space:1
    space:1 E["Handle Effect"]
    space:1 F["Resume"]
    space:1 space:1
    G["Statement 4"] space:1
    H["Statement 5"] space:1
    I["Complete"] space:1
    
    D --> E
    F --> G
    
    style D fill:#ffcccc,color:#000
    style E fill:#ccffcc,color:#000
    style F fill:#ffffcc,color:#000
I called the effect ResumableException here, but it’s not really an exception anymore, because the program continues normally.
At this point we can use this power bestowed on us by effects and handlers to roll our own Async/await:
eff Async {
    def await(url: String): String
}

def fetchData(): String \ Async = 
    Async.await("https://api.example.com/data")

def processData(): String \ Async = {
    let data = fetchData();
    "processed: ${data}"
}

def main(): Unit \ IO = 
    run {
        let result = processData();
        println(result)
    } with handler Async {
        def await(url, resume) = {
            // Simulate async HTTP request
            let result = "data from ${url}";
            resume(result)
        }
    }

See how easy that was? This approach also avoids function coloring, since we didn’t need to use special keywords anywhere. Here’s a graphic version:
block-beta
    columns 2
    
    A["Statement 1"] space:1
    B["Statement 2"] space:1
    C["await operation"] space:1
    space:1 H1["Start async work"]
    space:1 H2["⏳ Long pause..."]
    space:1 H3["⏳ Still waiting..."]
    space:1 H4["✅ Async complete"]
    space:1 F["Resume with result"]
    space:1 space:1
    D["Statement 3"] space:1
    E["Complete"] space:1
    
    C --> H1
    F --> D
    
    style C fill:#ffcccc,color:#000
    style H1 fill:#ccffcc,color:#000
    style H2 fill:#fff3cd,color:#000
    style H3 fill:#fff3cd,color:#000
    style H4 fill:#d1ecf1,color:#000
    style F fill:#ffffcc,color:#000
    style D fill:#e7f3ff,color:#000
    style E fill:#d4edda,color:#000
That’s cool, but we can do more. Effect handlers allow you to resume multiple times:
eff Choose {
    def choose(): Int32
}

def explore(): String \ Choose = {
    let x = Choose.choose();
    let y = Choose.choose();
    "${x}, ${y}"
}

def main(): Unit \ IO = 
    run {
        println(explore())
    } with handler Choose {
        def choose(_, resume) = {
            resume(1);
            resume(2);
            resume(3)
        }

block-beta
    columns 4
    
    A["Statement 1"] space:1 space:1 space:1
    B["Statement 2"] space:1 space:1 space:1
    C["Statement 3"] space:1 space:1 space:1
    D["Perform Effect"] space:1 space:1 space:1
    space:1 space:1 E["Handle Effect"] space:1
    space:1 F1["Resume 1"] F2["Resume 2"] F3["Resume 3"]
    space:1 G1["Statement 4a"] G2["Statement 4b"] G3["Statement 4c"]
    space:1 H1["Statement 5a"] H2["Statement 5b"] H3["Statement 5c"]
    space:1 R1["Resume to Main"] R2["Resume to Main"] R3["Resume to Main"]
    J["Statement 6"] space:1 space:1 space:1
    K["Complete"] space:1 space:1 space:1
    
    D --> E
    F1 --> G1
    F2 --> G2
    F3 --> G3
    H1 --> R1
    H2 --> R2
    H3 --> R3
    R1 --> J
    R2 --> J
    R3 --> J
    
    style D fill:#ffcccc,color:#000
    style E fill:#ccffcc,color:#000
    style F1 fill:#ffffcc,color:#000
    style F2 fill:#ffffcc,color:#000
    style F3 fill:#ffffcc,color:#000
    style G1 fill:#e6f3ff,color:#000
    style G2 fill:#ffe6f3,color:#000
    style G3 fill:#f3ffe6,color:#000
    style H1 fill:#e6f3ff,color:#000
    style H2 fill:#ffe6f3,color:#000
    style H3 fill:#f3ffe6,color:#000
    style R1 fill:#d4edda,color:#000
    style R2 fill:#d4edda,color:#000
    style R3 fill:#d4edda,color:#000
    style J fill:#cce5ff,color:#000
    style K fill:#b3d9ff,color:#000
With this, you can implement things like coroutines:
block-beta
    columns 3
    
    A1["Coroutine 1: Start"] space:1 A2["Coroutine 2: Start"]
    B1["Statement 1"] space:1 B2["Statement 1"]
    C1["yield to Co2"] H1["Scheduler"] space:1
    space:1 space:1 C2["Statement 2"]
    space:1 space:1 D2["yield to Co1"]
    space:1 H2["Scheduler"] space:1
    D1["Statement 2"] space:1 space:1
    E1["yield to Co2"] H3["Scheduler"] space:1
    space:1 space:1 E2["Statement 3"]
    space:1 space:1 F2["Complete"]
    F1["Complete"] space:1 space:1
    
    C1 --> H1
    H1 --> C2
    D2 --> H2
    H2 --> D1
    E1 --> H3
    H3 --> E2
    
    style C1 fill:#ffcccc,color:#000
    style D2 fill:#ffcccc,color:#000
    style E1 fill:#ffcccc,color:#000
    style H1 fill:#ccffcc,color:#000
    style H2 fill:#ccffcc,color:#000
    style H3 fill:#ccffcc,color:#000
    style A1 fill:#e6f3ff,color:#000
    style B1 fill:#e6f3ff,color:#000
    style D1 fill:#e6f3ff,color:#000
    style F1 fill:#e6f3ff,color:#000
    style A2 fill:#ffe6f3,color:#000
    style B2 fill:#ffe6f3,color:#000
    style C2 fill:#ffe6f3,color:#000
    style E2 fill:#ffe6f3,color:#000
    style F2 fill:#ffe6f3,color:#000
Generators:
block-beta
    columns 2
    
    A["Start generator"] space:1
    B["Statement 1"] space:1
    C["yield value 1"] H1["Return value"]
    space:1 H2["⏸️ Paused"]
    D["next() called"] H3["Resume generator"]
    E["Statement 2"] space:1
    F["yield value 2"] H4["Return value"]
    space:1 H5["⏸️ Paused"]
    G["next() called"] H6["Resume generator"]
    H["Statement 3"] space:1
    I["return (done)"] H7["Signal complete"]
    
    C --> H1
    H3 --> D
    F --> H4
    H6 --> G
    I --> H7
    
    style C fill:#ffcccc,color:#000
    style F fill:#ffcccc,color:#000
    style I fill:#ffcccc,color:#000
    style H1 fill:#ccffcc,color:#000
    style H3 fill:#ffffcc,color:#000
    style H4 fill:#ccffcc,color:#000
    style H6 fill:#ffffcc,color:#000
    style H7 fill:#ccffcc,color:#000
    style H2 fill:#fff3cd,color:#000
    style H5 fill:#fff3cd,color:#000
    style D fill:#e7f3ff,color:#000
    style G fill:#e7f3ff,color:#000
And backtracking search:
block-beta
    columns 4
    
    A["Start search"] space:1 space:1 space:1
    B["choose option"] space:1 space:1 space:1
    space:1 H1["Try option 1"] space:1 space:1
    space:1 space:1 C1["Explore path 1"] space:1
    space:1 space:1 D1["❌ Dead end"] space:1
    space:1 H2["Backtrack"] space:1 space:1
    space:1 H3["Try option 2"] space:1 space:1
    space:1 space:1 space:1 C2["Explore path 2"]
    space:1 space:1 space:1 D2["✅ Success!"]
    E["Resume with solution"] space:1 space:1 space:1
    F["Complete"] space:1 space:1 space:1
    
    B --> H1
    H1 --> C1
    D1 --> H2
    H2 --> H3
    H3 --> C2
    D2 --> E
    
    style B fill:#ffcccc,color:#000
    style H1 fill:#ccffcc,color:#000
    style H2 fill:#f8d7da,color:#000
    style H3 fill:#ccffcc,color:#000
    style C1 fill:#fff3cd,color:#000
    style D1 fill:#f8d7da,color:#000
    style C2 fill:#d1ecf1,color:#000
    style D2 fill:#d4edda,color:#000
    style E fill:#ffffcc,color:#000
    style F fill:#d4edda,color:#000
Hopefully this gives you a taste of how effect handlers work. This is just a sketch though — you can read more on this and see examples in the Flix docs.
 Question What's your primary programming language?   TypeScript/JavaScript   Python   Java or other JVM e.g Scala/Kotlin   C#   C++/C   PHP   Go   Rust   Other    ✓ Thanks for your input!
    
These questions help direct new content. Want to get notified when something new is posted? ✓ Saved!
  
Defining our own control flow abstractions is great, but most of the time regular async/await and/or coroutines are enough for the job.
What is extremely useful for daily programming is that effects let you separate the declaration of the effect (the operation, or the effect “constructor”) from it’s implementation, defined by the effect handler.
Add some effect definitions:
eff Database {
    def getUser(id: Int32): Option[User],
    def saveUser(user: User): Unit
}

Then use these definitions to perform effects in your code:
def updateUserEmail(userId: Int32, newEmail: String): Result[String, User] \ {Database} = {
    match Database.getUser(userId) {
        case Some(user) => {
            let updatedUser = {user | email = newEmail};
            Database.saveUser(updatedUser);
            Ok(updatedUser)
        }
        case None => {
            Err("User not found")
        }
    }
}

This replaces the need for dependency injection, since you can provide different handlers for these database operations in production vs testing:
def main(): Unit \\ IO = { // production handler, uses a real database
    run {
        updateUserEmail(123, "new@example.com")
    } with handler Database {
        def getUser(id, resume) = {
		        // real db query
            resume(user)
        }
        def saveUser(user, resume) = {
		        // real db query
            resume()
        }
    }
}

def testUpdateUserEmail(): Unit = { // test handler, just stubs
    let testUser = {id = 123, email = "old@example.com"};
    run {
        let result = updateUserEmail(123, "new@example.com");
        assert(result == Ok({testUser | email = "new@example.com"}))
    } with handler Database {
        def getUser(id, resume) = resume(Some(testUser))
        def saveUser(user, resume) = {
            assert(user.email == "new@example.com");
            resume()
        }
    
}

In my opinion, the biggest advantage that effect handlers give is that they abstract away the patterns associated with DDD, Clean Architecture, Hexagonal architecture, etc. commonly found in enterprise code.
All these architectures give you some sort of way to isolate your core logic, which should be pure, from infrastructure and app logic, with deals with external dependencies. But you have to commit to an architecture and the whole team has to be disciplined enough to stick to for this to work.
Using effects encourages separating the definition of effect operations from implementation by default, meaning you don’t really need these architecture patterns anymore.
This is great, since relying on team discipline exclusively rarely works. It also saves a bunch of time otherwise spent on bike shedding.
Effect handlers also allow you to easily install stubs, which you can use to create quick test cases without boilerplate, just by swapping handlers:
def testErrorConditions(): Unit = {
    run {
        let result = updateUserEmail(123, "new@example.com");
        assert(result == Err("User not found"))
    } with handler Database {
        def getUser(_, resume) = resume(None) // Stub: always return None
        def saveUser(_, resume) = resume()             // Won't be called
    }
}

def testSlowDatabase(): Unit = {
    run {
        let result = updateUserEmail(123, "new@example.com");
        assert(result.isOk())
    } with handler Database {
        def getUser(id, resume) = {
            Thread.sleep(100);  // Simulate slow query
            resume(Some({id = id, email = "old@example.com"}))
        }
        def saveUser(user, resume) = {
            Thread.sleep(50);   // Simulate slow save
            resume()
        }
    }
}

You can even make a handler that records all interactions instead of executing them. There are many possibilities here.
Real-World App: AI movie recommendations 🔗
To bring this all together, let’s make a real application using effects.
Our app will fetch some movie data from TheMovieDB, and then use an LLM to recommend some movies based on user preferences provided from the console.
Flix interoperates with the JVM, meaning we can call code from Java, Kotlin, Scala, etc.
First, let’s define the two custom effects we will need: MovieAPI and LLM:
eff MovieAPI {
    def getPopularMovies(): String
}

eff LLM {
    def recommend(movies: String, preferences: String): String
}

We can then perform the effects in main like so, providing some basic handlers that use the Flix’s stdlib HTTP client:
def getRecommendation(preferences: String): String \ {MovieAPI, LLM} = {
    let movies = MovieAPI.getPopularMovies();
    LLM.recommend(movies, preferences)
}

def main(): Unit \ {Net, IO} = 
    run {
        let suggestion = getRecommendation("action movies");
        println(suggestion)
    } with handler MovieAPI {
        def getPopularMovies(_, resume) = {
            let response = HttpWithResult.get("https://api.themoviedb.org/3/movie/popular", Map.empty());
            match response {
                case Result.Ok(resp) => resume(Http.Response.body(resp))
                case Result.Err(_) => resume("[]")
            }
        }
    } with handler LLM {
        def recommend(movies, prefs, resume) = {
            let prompt = "Movies: ${movies}. User likes: ${prefs}. Recommend one movie.";
            let response = HttpWithResult.post("https://api.openai.com/v1/completions", Map.empty(), prompt);
            match response {
                case Result.Ok(resp) => resume(Http.Response.body(resp))
                case Result.Err(_) => resume("Try watching a classic!")
            }
        }
    } with HttpWithResult.runWithIO

Notice that both effects are quite generic. So we can easily swap either the movie API or the LLM provider without touching anything in the core logic:
// Switch to different movie provider
with handler MovieAPI {
    def getPopularMovies(_, resume) = {
        let response = HttpWithResult.get("https://api.imdb.com/popular", Map.empty());
        // ... handle IMDB response format
    }
}

// Switch to different LLM provider  
with handler LLM {
    def recommend(movies, prefs, resume) = {
        let response = HttpWithResult.post("https://api.anthropic.com/v1/messages", Map.empty(), prompt);
        // ... handle Claude response format
    }
}

To get the user input we will need to include the standard Console effect:
def main(): Unit \ {Net, IO} = 
    run {
        Console.println("What movie genres do you enjoy?");
        let preferences = Console.readln();
        let suggestion = getRecommendation(preferences);
        Console.println("Recommendation: ${suggestion}")
    } with handler MovieAPI { /* ... */ }
      with handler LLM { /* ... */ }
      with Console.runWithIO
      with HttpWithResult.runWithIO

We can also add some basic logs using the standard Logger effect:
def getRecommendation(preferences: String): String \ {MovieAPI, LLM, Logger} = {
    Logger.info("Fetching popular movies...");
    let movies = MovieAPI.getPopularMovies();
    Logger.info("Getting LLM recommendation...");
    LLM.recommend(movies, preferences)
}

def main(): Unit \ {Net, IO} = 
    run {
        /* ... console interaction ... */
    } with handler MovieAPI { /* ... */ }
      with handler LLM { /* ... */ }
      with Console.runWithIO
      with Logger.runWithIO
      with HttpWithResult.runWithIO

That’s it! Let’s run the app and test it manually like so:
 flix run Main.flix
What movie genres do you enjoy?
> sci-fi horror
[INFO] Fetching popular movies...
[INFO] Getting LLM recommendation...
Recommendation: Based on your interest in sci-fi horror, I recommend "Alien" - a perfect blend of both genres!

We can also easily write tests for the core logic by providing test handlers for our movie and LLM effects:
def testRecommendation(): String = 
    run {
        getRecommendation("comedy")
    } with handler MovieAPI {
        def getPopularMovies(_, resume) = {
            resume("""[{"title": "The Grand Budapest Hotel", "genre": "comedy"}]""")
        }
    } with handler LLM {
        def recommend(movies, prefs, resume) = {
            resume("I recommend The Grand Budapest Hotel - perfect for comedy lovers!")
        }
    } with handler Logger {
        def log(_, _, resume) = resume()  // Silent in tests
    }

def runTests(): Unit \ IO = {
    let result = testRecommendation();
    println("Test result: ${result}")
}

Where to Go From Here 🔗
Read the Flix docs
Especially on cool features like effect polymorphism, effect exclusion etc. Check out code examples in the repo
Join the community and contribute with libraries
The Flix compiler and stdlib are quite feature-rich at this point, and having JVM interop means you have all the essentials you need to write practical code. But there are still very few pure Flix libraries. So it’s very valuable to contribute some. The ideas I can think of are, for example, rebuilding standard things like Web frameworks in an effect oriented way,. Or taking advantage of the unique feature set in Flix to build something entirely new.
Explore effect-oriented programming
While I personally like Flix and can recommend it to others, there are other ways you can use effects for real-world software. If you’re in Typescript or Scala, try out Effect or ZIO/Kyo/Cats. If you’re looking for other languages that support effects natively, and you’re not afraid of Haskell-like syntax, check out Unison. They have a bunch of other concepts I find cool, like a better distributed computing model and the code being content-addressed.
Thanks for reading! I hope this article was useful. Hit me up if you have questions or feedback, and check out my website, where I’m exploring sustainable tech and coding practices: relax.software
 Question What should I write about next?   More on Effect-oriented programming   More on the Flix programming language   Comparison of languages and libraries with effects support   General correct and maintainable software content    ✓ Thanks for your input!
    
These questions help direct new content. Want to get notified when something new is posted? ✓ Saved!
  
Extra: Why Algebraic Effects are Algebraic and how they relate to monads 🔗
Okay, practical people have left the room. Following sections are nerds-only.
For some reason, all the content I’ve been reading on algebraic effects uses this term a lot, but no one explains why specifically they’re called “algebraic”. So I did some digging.
Turns out, algebraic effects are “algebraic” because they can be described with laws and equations, like in algebra — the kind we learn at school. Which is I guess why they’re easier to grasp than monads — unlike algebra, you usually don’t study category theory in high school.
But the algebraic part only applies to the effect “constructors”, i.e the operations themselves like get() or put() for the state effect.
Effect handlers, on the other hand, are not algebraic at all, which can be a bit confusing. But it makes sense if you think about it — the purpose of handlers is to act as “deconstructors”, interpreting our algebraic effect operations by means of things that cannot be described by algebraic equations alone, such as continuations .
In fact, effect handlers are often (but not always) implemented via delimited continuations. There are also other, static/lexically scoped and maybe more performant approaches being explored, such as this one
“Real” algebraic effects don’t require monads. Monads and algebraic effects are two different concepts tackling similar problems. One is expressible in terms of the other, but algebraic effects are arguably more flexible.
You could actually implement algebraic effects using a continuation monad. If we don’t care about types, effects are perfectly expressible with monads and vice versa
The problems appear when we introduce types into the picture. In a properly typed world, you can’t actually reproduce the same expressiveness you get with effects using monads. You’ll end up breaking the type system or reducing expressiveness at some point.
Effects are, in this sense, more “powerful” than monads with their natural type system: you can express infinitely many computations with them. E.g if you use a tick() effect and you do a bunch of sequential tick() s, the result will be a distinct computation each time. With monads and their natural type system the set of computations you could express is finite.
Additionally, with monads you commit to a specific interpretation of an effect in advance, while effects completely decouple effect definition from it’s implementation.
Finally, effects are easier to compose than monads. With monad transformers you quickly hit the wall having to define a bunch of different combinations that each have distinct semantics. Effects compose naturally.
So while effect libraries in languages like Typescript and Scala are able to express effects using monads3, and the behavior could be identical at runtime, this cannot replace having an actual type and effect system, with effects being properly typed.
 Question How do you usually learn about new things?   Technical articles (like this one)   Books   Screencasts or videos   Courses, bootcamps or workshops   Other    ✓ Thanks for your input!
    

Footnotes 🔗
Footnotes


“What color is your function” is a problem explored in this article. In languages which have Async baked in via special keywords (e.g JavaScript async/await) it becomes a pain to refactor and to combine synchronous and asynchronous code. If you make one function deep in the call stack async, all the callers will have to be made Async as well, or await() the results. With effects you don’t have this issue as there are no keywords and no special behavior. Async is simply done with effect handlers. ↩


I like the grandma example more than the “launch missiles” popular in the Haskell world. Took it from this article by Kevin Mahoney. It’s somehow more offensive ↩


See some examples in this article. This also shows how Haskell’s new delimited continuation support can be used to implement algebraic effects and handlers ↩


 ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: Semantic grep for Claude Code (local embeddings)]]></title>
            <link>https://github.com/BeaconBay/ck</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157223</guid>
            <description><![CDATA[Semantic grep tool for use by AI and humans! Contribute to BeaconBay/ck development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[ck - Semantic Grep by Embedding
ck (seek) finds code by meaning, not just keywords. It's a drop-in replacement for grep that understands what you're looking for — search for "error handling" and find try/catch blocks, error returns, and exception handling code even when those exact words aren't present.
Quick start
cargo install ck-search
# Find error handling patterns (finds try/catch, Result types, etc.)
ck --sem "error handling" src/

# Traditional grep-compatible search still works  
ck -n "TODO" *.rs

# Combine both: semantic relevance + keyword filtering
ck --hybrid "connection timeout" src/
Why ck?
For Developers: Stop hunting through thousands of regex false positives. Find the code you actually need by describing what it does.
For AI Agents: Get structured, semantic search results in JSON format. Perfect for code analysis, documentation generation, and automated refactoring.
For Teams: Works exactly like grep with the same flags and behavior, but adds semantic intelligence when you need it.
Quick Start
# Build from source
cargo build --release

# Index your project for semantic search
./target/debug/ck --index src/

# Search by meaning
./target/debug/ck --sem "authentication logic" src/
./target/debug/ck --sem "database connection pooling" src/
./target/debug/ck --sem "retry mechanisms" src/

# Use all the grep features you know
./target/debug/ck -n -C 3 "error" src/
./target/debug/ck -R "TODO|FIXME" .
Core Features
🔍 Semantic Search
Find code by concept, not keywords. Searches understand synonyms, related terms, and conceptual similarity.
# These find related code even without exact keywords:
ck --sem "retry logic"           # finds backoff, circuit breakers
ck --sem "user authentication"   # finds login, auth, credentials  
ck --sem "data validation"       # finds sanitization, type checking

# Get complete functions/classes containing matches (NEW!)
ck --sem --full-section "error handling"  # returns entire functions
ck --full-section "async def" src/        # works with regex too
⚡ Drop-in grep Compatibility
All your muscle memory works. Same flags, same behavior, same output format.
ck -i "warning" *.log              # Case-insensitive  
ck -n -A 3 -B 1 "error" src/       # Line numbers + context
ck --no-filename "TODO" src/        # Suppress filenames (grep -h equivalent)
ck -l "error" src/                  # List files with matches only (NEW!)
ck -L "TODO" src/                   # List files without matches (NEW!)
ck -R --exclude "*.test.js" "bug"  # Recursive with exclusions
ck "pattern" file1.txt file2.txt   # Multiple files
🎯 Hybrid Search
Combine keyword precision with semantic understanding using Reciprocal Rank Fusion.
ck --hybrid "async timeout" src/    # Best of both worlds
ck --hybrid --scores "cache" src/   # Show relevance scores with color highlighting
ck --hybrid --threshold 0.02 query  # Filter by minimum relevance
ck -l --hybrid "database" src/      # List files using hybrid search
🤖 Agent-Friendly Output
Perfect JSON output for LLMs, scripts, and automation.
ck --json --sem "error handling" src/ | jq '.file'
ck --json --topk 5 "TODO" . | jq -r '.preview'
ck --json --full-section --sem "database" . | jq -r '.preview'  # Complete functions
📁 Smart File Filtering
Automatically excludes cache directories, build artifacts, and system files.
# These are excluded by default:
# .git, node_modules, target/, .fastembed_cache, __pycache__

# Override defaults:
ck --no-default-excludes "pattern" .     # Search everything
ck --exclude "dist" --exclude "logs" .   # Add custom exclusions
How It Works
1. Index Once, Search Many
# Create semantic index (one-time setup)
ck --index /path/to/project

# Now search instantly by meaning
ck --sem "database queries" .
ck --sem "error handling" .
ck --sem "authentication" .
2. Three Search Modes

--regex (default): Classic grep behavior, no indexing required
--sem: Pure semantic search using embeddings (requires index)
--hybrid: Combines regex + semantic with intelligent ranking

3. Relevance Scoring
ck --sem --scores "machine learning" docs/
# [0.847] ./ai_guide.txt: Machine learning introduction...
# [0.732] ./statistics.txt: Statistical learning methods...
# [0.681] ./algorithms.txt: Classification algorithms...
Advanced Usage
Search Specific Files
# Glob patterns work
ck --sem "authentication" *.py *.js *.rs

# Multiple files
ck --sem "error handling" src/auth.rs src/db.rs

# Quoted patterns prevent shell expansion  
ck --sem "auth" "src/**/*.ts"
Threshold Filtering
# Only high-confidence semantic matches
ck --sem --threshold 0.7 "query"

# Low-confidence hybrid matches (good for exploration)
ck --hybrid --threshold 0.01 "concept"

# Get complete code sections instead of snippets (NEW!)
ck --sem --full-section "database queries"
ck --full-section "class.*Error" src/     # Complete classes
Top-K Results
# Limit results for focused analysis
ck --sem --topk 5 "authentication patterns"

# Great for AI agent consumption
ck --json --topk 10 "error handling" | process_results.py
Directory Management
# Check index status
ck --status .

# Clean up and rebuild
ck --clean .
ck --index .

# Add single file to index
ck --add new_file.rs
File Support



Language
Indexing
Tree-sitter Parsing
Semantic Chunking




Python
✅
✅
✅ Functions, classes


JavaScript
✅
✅
✅ Functions, classes, methods


TypeScript
✅
✅
✅ Functions, classes, methods


Haskell
✅
✅
✅ Functions, types, instances



Text Formats: Markdown, JSON, YAML, TOML, XML, HTML, CSS, shell scripts, SQL, and plain text.
Smart Exclusions: Automatically skips .git, node_modules, target/, build/, dist/, __pycache__/, .fastembed_cache, .venv, venv, and other common build/cache/virtual environment directories.
Installation
From Source
git clone https://github.com/BeaconBay/ck
cd ck
cargo install --path ck-cli
Package Managers (Planned)
# Coming soon:
brew install ck-search
apt install ck-search
Architecture
ck uses a modular Rust workspace:

ck-cli - Command-line interface and argument parsing
ck-core - Shared types, configuration, and utilities
ck-search - Search engine implementations (regex, BM25, semantic)
ck-index - File indexing, hashing, and sidecar management
ck-embed - Text embedding providers (FastEmbed, API backends)
ck-ann - Approximate nearest neighbor search indices
ck-chunk - Text segmentation and language-aware parsing
ck-models - Model registry and configuration management

Index Storage
Indexes are stored in .ck/ directories alongside your code:
project/
├── src/
├── docs/  
└── .ck/           # Semantic index (can be safely deleted)
    ├── embeddings.json
    ├── ann_index.bin
    └── tantivy_index/

The .ck/ directory is a cache — safe to delete and rebuild anytime.
Examples
Finding Code Patterns
# Find authentication/authorization code
ck --sem "user permissions" src/
ck --sem "access control" src/
ck --sem "login validation" src/

# Find error handling strategies  
ck --sem "exception handling" src/
ck --sem "error recovery" src/
ck --sem "fallback mechanisms" src/

# Find performance-related code
ck --sem "caching strategies" src/
ck --sem "database optimization" src/  
ck --sem "memory management" src/
Integration Examples
# Git hooks
git diff --name-only | xargs ck --sem "TODO"

# CI/CD pipeline
ck --json --sem "security vulnerability" . | security_scanner.py

# Code review prep
ck --hybrid --scores "performance" src/ > review_notes.txt

# Documentation generation
ck --json --sem "public API" src/ | generate_docs.py
Team Workflows
# Find related test files
ck --sem "unit tests for authentication" tests/
ck -l --sem "test" tests/           # List test files by semantic content

# Identify refactoring candidates  
ck --sem "duplicate logic" src/
ck --sem "code complexity" src/
ck -L "test" src/                   # Find source files without tests

# Security audit
ck --hybrid "password|credential|secret" src/
ck --sem "input validation" src/
ck -l --hybrid --scores "security" src/  # Files with security-related code
Configuration
Default Exclusions
# View current exclusion patterns
ck --help | grep -A 20 exclude

# These directories are excluded by default:
# .git, .svn, .hg                    # Version control
# node_modules, target, build        # Build artifacts  
# .cache, __pycache__, .fastembed_cache  # Caches
# .vscode, .idea                     # IDE files
Custom Configuration (Planned)
# .ck/config.toml
[search]
default_mode = "hybrid"
default_threshold = 0.05

[indexing]  
exclude_patterns = ["*.log", "temp/"]
chunk_size = 512
overlap = 64

[models]
embedding_model = "BAAI/bge-small-en-v1.5"
Performance

Indexing: ~1M LOC in under 2 minutes (with smart exclusions and optimized embedding computation)
Search: Sub-500ms queries on typical codebases
Index size: ~2x source code size with compression
Memory: Efficient streaming for large repositories with span-based content extraction
File filtering: Automatic exclusion of virtual environments and build artifacts
Output: Clean stdout/stderr separation for reliable piping and scripting

Testing
Run the comprehensive test suite:
# Full test suite (40+ tests)
./test_ck.sh

# Quick smoke test (14 core tests)
./test_ck_simple.sh
Tests cover grep compatibility, semantic search, index management, file filtering, and more.
Contributing
ck is actively developed and welcomes contributions:

Issues: Report bugs, request features
Code: Submit PRs for bug fixes, new features
Documentation: Improve examples, guides, tutorials
Testing: Help test on different codebases and languages

Development Setup
git clone https://github.com/your-org/ck
cd ck
cargo build
cargo test
./target/debug/ck --index test_files/
./target/debug/ck --sem "test query" test_files/
Roadmap
Current (v0.3+)

✅ grep-compatible CLI with semantic search and file listing flags (-l, -L)
✅ FastEmbed integration with BGE models
✅ File exclusion patterns and glob support
✅ Threshold filtering and relevance scoring with visual highlighting
✅ Tree-sitter parsing and intelligent chunking (Python, TypeScript, JavaScript, Haskell)
✅ Complete code section extraction (--full-section)
✅ Enhanced indexing strategy with v3 semantic search optimization
✅ Clean stdout/stderr separation for reliable scripting
✅ Incremental index updates with hash-based change detection

Near-term (v0.4-0.5)

🚧 Configuration file support
🚧 Package manager distributions

Medium-term (v0.4-0.6)

🔮 Multiple embedding model support
🔮 Advanced ranking algorithms
🔮 Plugin architecture for custom chunkers
🔮 Distributed/remote index support

Long-term (v1.0+)

🔮 IDE integrations (VS Code, IntelliJ, etc.)
🔮 Git integration (semantic diffs, blame)
🔮 Web interface for team usage
🔮 Multi-language semantic understanding

FAQ
Q: How is this different from grep/ripgrep/silver-searcher?
A: ck includes all the features of traditional search tools, but adds semantic understanding. Search for "error handling" and find relevant code even when those exact words aren't used.
Q: Does it work offline?
A: Yes, completely offline. The embedding model runs locally with no network calls.
Q: How big are the indexes?
A: Typically 1-3x the size of your source code, depending on content. The .ck/ directory can be safely deleted to reclaim space.
Q: Is it fast enough for large codebases?
A: Yes. Indexing is a one-time cost, and searches are sub-second even on large projects. Regex searches require no indexing and are as fast as grep.
Q: Can I use it in scripts/automation?
A: Absolutely. The --json flag provides structured output perfect for automated processing. Use --full-section to get complete functions for AI analysis.
Q: What about privacy/security?
A: Everything runs locally. No code or queries are sent to external services. The embedding model is downloaded once and cached locally.
License
Licensed under either of:

Apache License, Version 2.0 (LICENSE-APACHE)
MIT License (LICENSE-MIT)

at your option.
Credits
Built with:

Rust - Systems programming language
FastEmbed - Fast text embeddings
Tantivy - Full-text search engine
clap - Command line argument parsing

Inspired by the need for better code search tools in the age of AI-assisted development.

Start finding code by what it does, not what it says.
cargo build --release
./target/release/ck --index .
./target/release/ck --sem "the code you're looking for"
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Serverless Horrors]]></title>
            <link>https://serverlesshorrors.com/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157110</guid>
            <description><![CDATA[Stories you never want to feel on your own skin]]></description>
            <content:encoded><![CDATA[       ServerlessHorrors is a simple blog where you can read all the horror stories of serverless. Yikes!

Made by Andras who is working on an open-source & self-hostable Heroku / Netlify / Vercel alternative called Coolify.

Have a story?

Write me
Open a PR on Github
     Posts  New 13  May 2025     New 3  May 2025     10  Apr 2025     17  Jan 2025      13  Jan 2025      $22.639,69   I received an insanely bill of 22k USD today from simply using BigQuery on a public data set in the playground...     google    bigquery    sql       13  Jan 2025     6  Jan 2025     5  Jan 2025     1  Sep 2024     25  Jun 2024     6  Jun 2024     26  May 2024     29  Apr 2024     10  Mar 2024     27  Feb 2024      13  Feb 2024      $23,000.420   What is happening?! Someone spammed EchoFox and spiked my Vercel bill to $23k and caused 56k+ accounts and trials...     vercel    bandwidth    ddos       5  Apr 2023     14  Jan 2023     27  Mar 2020           ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: I'm a dermatologist and I vibe coded a skin cancer learning app]]></title>
            <link>https://molecheck.info/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157020</guid>
            <description><![CDATA[For the best experience, please scan the QR code with your phone's camera to use the app on your mobile device.]]></description>
            <content:encoded><![CDATA[
            Designed for Mobile
            For the best experience, please scan the QR code with your phone's camera to use the app on your mobile device.
            
            https://molecheck.info
            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Expression Problem and its solutions]]></title>
            <link>https://eli.thegreenplace.net/2016/the-expression-problem-and-its-solutions/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45155877</guid>
            <description><![CDATA[The craft of programming is almost universally concerned with different types of
data and operations/algorithms that act on this data [1]. Therefore, it's
hardly surprising that designing abstractions for data types and operations has
been on the mind of software engineers and programming-language designers
since... forever.]]></description>
            <content:encoded><![CDATA[
                
                The craft of programming is almost universally concerned with different types of
data and operations/algorithms that act on this data [1]. Therefore, it's
hardly surprising that designing abstractions for data types and operations has
been on the mind of software engineers and programming-language designers
since... forever.
Yet I've only recently encountered a name for a software design problem which I
ran into multiple times in my career. It's a problem so fundamental that I was
quite surprised that I haven't seen it named before. Here is a quick problem
statement.
Imagine that we have a set of data types and a set of operations that act on
these types. Sometimes we need to add more operations and make sure they work
properly on all types; sometimes we need to add more types and make sure all
operations work properly on them. Sometimes, however, we need to add both - and
herein lies the problem. Most of the mainstream programming languages don't
provide good tools to add both new types and new operations to an existing
system without having to change existing code. This is called the "expression
problem". Studying the problem and its possible solutions gives great insight
into the fundamental differences between object-oriented and functional
programming and well as concepts like interfaces and multiple dispatch.

A motivating example
As is my wont, my example comes from the world of compilers and interpreters.
To my defense, this is also the example used in some of the seminal historic
sources on the expression problem, as the historical perspective section below
details.
Imagine we're designing a simple expression evaluator. Following the standard
interpreter design pattern, we have
a tree structure consisting of expressions, with some operations we can do on
such trees. In C++ we'd have an interface every node in the expression tree
would have to implement:
class Expr {
public:
  virtual std::string ToString() const = 0;
  virtual double Eval() const = 0;
};

This interface shows that we currently have two operations we can do on
expression trees - evaluate them and query for their string representations.
A typical leaf node expression:
class Constant : public Expr {
public:
  Constant(double value) : value_(value) {}

  std::string ToString() const {
    std::ostringstream ss;
    ss << value_;
    return ss.str();
  }

  double Eval() const {
    return value_;
  }

private:
  double value_;
};

And a typical composite expression:
class BinaryPlus : public Expr {
public:
  BinaryPlus(const Expr& lhs, const Expr& rhs) : lhs_(lhs), rhs_(rhs) {}

  std::string ToString() const {
    return lhs_.ToString() + " + " + rhs_.ToString();
  }

  double Eval() const {
    return lhs_.Eval() + rhs_.Eval();
  }

private:
  const Expr& lhs_;
  const Expr& rhs_;
};

Until now, it's all fairly basic stuff. How extensible is this design? Let's
see... if we want to add new expression types ("variable reference", "function
call" etc.), that's pretty easy. We just define additional classes inheriting
from Expr and implement the Expr interface (ToString and Eval).
However, what happens if we want to add new operations that can be applied to
expression trees? Right now we have Eval and ToString, but we may want
additional operations like "type check" or "serialize" or "compile to
machine code" or whatever.
It turns out that adding new operations isn't as easy as adding new types. We'd
have to change the Expr interface, and consequently change every existing
expression type to support the new method(s). If we don't control the original
code or it's hard to change it for other reasons, we're in trouble.
In other words, we'd have to violate the venerable open-closed principle,
one of the main principles of object-oriented design, defined
as:

software entities (classes, modules, functions, etc.) should be open for
extension, but closed for modification
The problem we're hitting here is called the expression problem, and the
example above shows how it applies to object-oriented programming.
Interestingly, the expression problem bites functional programming languages as
well. Let's see how.


The expression problem in functional programming
Update 2018-02-05: a new post
discusses the problem and its solutions in Haskell in more depth.
Object-oriented approaches tend to collect functionality in objects (types).
Functional languages cut the cake from a different angle, usually preferring
types as thin data containers, collecting most functionality in functions
(operations) that act upon them. Functional languages don't escape the
expression problem - it just manifests there in a different way.
To demonstrate this, let's see how the expression evaluator / stringifier looks
in Haskell. Haskell is a good poster child for functional programming since its
pattern matching on types makes such code especially succinct:
module Expressions where

data Expr = Constant Double
          | BinaryPlus Expr Expr

stringify :: Expr -> String
stringify (Constant c) = show c
stringify (BinaryPlus lhs rhs) = stringify lhs
                                ++ " + "
                                ++ stringify rhs

evaluate :: Expr -> Double
evaluate (Constant c) = c
evaluate (BinaryPlus lhs rhs) = evaluate lhs + evaluate rhs

Now let's say we want to add a new operation - type checking. We simply have
to add a new function typecheck and define how it behaves for all known
kinds of expressions. No need to modify existing code.
On the other hand, if we want to add a new type (like "function call"), we get
into trouble. We now have to modify all existing functions to handle this new
type. So we hit exactly the same problem, albeit from a different angle.



A visual representation of the expression problem can be helpful to appreciate
how it applies to OOP and FP in different ways, and how a potential solution
would look.
The following 2-D table (a "matrix") has types in its rows and operations in its
columns. A matrix cell row, col is checked when the operation col is
implemented for type row:
In object-oriented languages, it's easy to add new types but difficult to add
new operations:
Whereas in functional languages, it's easy to add new operations but difficult
to add new types:



A historical perspective
The expression problem isn't new, and has likely been with us since the early
days; it pops its head as soon as programs reach some not-too-high level of
complexity.
It's fairly certain that the name expression problem comes from an email sent
by Philip Wadler to a mailing
list deailing with adding generics to Java (this was back in the 1990s).
In that email, Wadler points to the paper "Synthesizing Object-Oriented and
Functional Design to Promote Re-Use" by
Krishnamurthi, Felleisen and Friedman as an earlier work describing the problem
and proposed solutions. This is a great paper and I highly recommend reading it.
Krishnamurthi et.al., in their references, point to papers from as early as 1975
describing variations of the problem in Algol.


Flipping the matrix with the visitor pattern
So far the article has focused on the expression problem, and I hope it's
clear by now. However, the title also has the word solution in it, so let's
turn to that.
It's possible to kinda solve (read on to understand why I say "kinda") the
expression problem in object-oriented languages; first, we have to look at how
we can flip the problem on its side using the visitor pattern. The visitor
pattern is very common for this kind of problems, and for a good reason. It lets
us reformulate our code in a way that makes it easier to change in some
dimensions (though harder in others).
For the C++ sample shown above, rewriting it using the visitor pattern means
adding a new "visitor" interface:
class ExprVisitor {
public:
  virtual void VisitConstant(const Constant& c) = 0;
  virtual void VisitBinaryPlus(const BinaryPlus& bp) = 0;
};

And changing the Expr interface to be:
class Expr {
public:
  virtual void Accept(ExprVisitor* visitor) const = 0;
};

Now expression types defer the actual computation to the visitor, as
follows:
class Constant : public Expr {
public:
  Constant(double value) : value_(value) {}

  void Accept(ExprVisitor* visitor) const {
    visitor->VisitConstant(*this);
  }

  double GetValue() const {
    return value_;
  }

private:
  double value_;
};

// ... similarly, BinaryPlus would have
//
//    void Accept(ExprVisitor* visitor) const {
//      visitor->VisitBinaryPlus(*this);
//    }
//
// ... etc.

A sample visitor for evaluation would be [2]:
class Evaluator : public ExprVisitor {
public:
  double GetValueForExpr(const Expr& e) {
    return value_map_[&e];
  }

  void VisitConstant(const Constant& c) {
    value_map_[&c] = c.GetValue();
  }

  void VisitBinaryPlus(const BinaryPlus& bp) {
    bp.GetLhs().Accept(this);
    bp.GetRhs().Accept(this);
    value_map_[&bp] = value_map_[&(bp.GetLhs())] + value_map_[&(bp.GetRhs())];
  }

private:
  std::map<const Expr*, double> value_map_;
};

It should be obvious that for a given set of data types, adding new visitors is
easy and doesn't require modifying any other code. On the other hand, adding new
types is problematic since it means we have to update the ExprVisitor
interface with a new abstract method, and consequently update all the visitors
to implement it.
So it seems that we've just turned the expression problem on its side: we're
using an OOP language, but now it's hard to add types and easy to add ops, just
like in the functional approach. I find it extremely interesting that we can do
this. In my eyes this highlights the power of different abstractions and
paradigms, and how they enable us to rethink a problem in a completely different
light.
So we haven't solved anything yet; we've just changed the nature of the problem
we're facing. Worry not - this is just a stepping stone to an actual solution.


Extending the visitor pattern
The following is code excerpts from a C++ solution that follows the extended
visitor pattern proposed by Krishnamurthi et. al. in their paper; I strongly
suggest reading the paper (particularly section 3) if you want to understand
this code on a deep level. A complete code sample in C++ that compiles and runs
is available here.
Adding new visitors (ops) with the visitor pattern is easy. Our challenge is to
add a new type without upheaving too much existing code. Let's see how it's
done.
One small design change that we should make to the original visitor pattern is
use virtual inheritance for Evaluator, for reasons that will soon become
obvious:
class Evaluator : virtual public ExprVisitor {
  // .. the rest is the same
};

Now we're going to add a new type - FunctionCall:
// This is the new ("extended") expression we're adding.
class FunctionCall : public Expr {
public:
  FunctionCall(const std::string& name, const Expr& argument)
      : name_(name), argument_(argument) {}

  void Accept(ExprVisitor* visitor) const {
    ExprVisitorWithFunctionCall* v =
        dynamic_cast<ExprVisitorWithFunctionCall*>(visitor);
    if (v == nullptr) {
      std::cerr << "Fatal: visitor is not ExprVisitorWithFunctionCall\n";
      exit(1);
    }
    v->VisitFunctionCall(*this);
  }

private:
  std::string name_;
  const Expr& argument_;
};

Since we don't want to modify the existing visitors, we create a new one,
extending Evaluator for function calls. But first, we need to extend the
ExprVisitor interface to support the new type:
class ExprVisitorWithFunctionCall : virtual public ExprVisitor {
public:
  virtual void VisitFunctionCall(const FunctionCall& fc) = 0;
};

Finally, we write the new evaluator, which extends Evaluator and supports
the new type:
class EvaluatorWithFunctionCall : public ExprVisitorWithFunctionCall,
                                  public Evaluator {
public:
  void VisitFunctionCall(const FunctionCall& fc) {
    std::cout << "Visiting FunctionCall!!\n";
  }
};

Multiple inheritance, virtual inheritance, dynamic type checking... that's
pretty hard-core C++ we have to use here, but there's no choice. Unfortunately,
multiple inheritance is the only way C++ lets us express the idea that a class
implements some interface while at the same time deriving functionality from
another class. What we want to have here is an evaluator
(EvaluatorWithFunctionCall) that inherits all functionality from
Evaluator, and also implements the ExprVisitorWithFunctionCall
interface. In Java, we could say something like:
class EvaluatorWithFunctionCall extends Evaluator implements ExprVisitor {
  // ...
}

But in C++ virtual multiple inheritance is the tool we have. The virtual part of
the inheritance is essential here for the compiler to figure out that the
ExprVisitor base underlying both Evaluator and
ExprVisitorWithFunctionCall is the same and should only appear once in
EvaluatorWithFunctionCall. Without virtual, the compiler would complain that
EvaluatorWithFunctionCall doesn't implement the ExprVisitor interface.
This is a solution, alright. We kinda added a new type FunctionCall and can
now visit it without changing existing code (assuming the virtual inheritance
was built into the design from the start to anticipate this approach). Here I
am using this "kinda" word again... it's time to explain why.
This approach has multiple flaws, in my opinion:

Note the dynamic_cast in FunctionCall::Accept. It's fairly ugly that
we're forced to mix in dynamic checks into this code, which should supposedly
rely on static typing and the compiler. But it's just a sign of a larger
problem.
If we have an instance of an Evaluator, it will no longer work on the
whole extended expression tree since it has no understanding of
FunctionCall. It's easy to say that all new evaluators should rather be
EvaluatorWithFunctionCall, but we don't always control this. What about
code that was already written? What about Evaluators created in
third-party or library code which we have no control of?
The virtual inheritance is not the only provision we have to build into the
design to support this pattern. Some visitors would need to create new,
recursive visitors to process complex expressions. But we can't anticipate
in advance which dynamic type of visitor needs to be created. Therefore,
the visitor interface should also accept a "visitor factory" which extended
visitors will supply. I know this sounds complicated, and I don't want to
spend more time on this here - but the Krishnamurthi paper addresses this
issue extensively in section 3.4
Finally, the solution is unwieldy for realistic applications. Adding one
new type looks manageable; what about adding 15 new types, gradually over
time? Imagine the horrible zoo of ExprVisitor extensions and dynamic
checks this would lead to.

Yeah, programming is hard. I could go on and on about the limitations of
classical OOP and how they surface in this example [3]. Instead, I'll just
present how the expression problem can be solved in a language that supports
multiple dispatch and separates the defintion of methods from the bodies of
types they act upon.


Solving the expression problem in Clojure
There are a number of ways the expression problem as displayed in this article
can be solved in Clojure using the language's built-in features. Let's start
with the simplest one - multi-methods.
First we'll define the types as records:
(defrecord Constant [value])
(defrecord BinaryPlus [lhs rhs])

Then, we'll define evaluate as a multimethod that dispatches upon the type
of its argument, and add method implementations for Constant and
BinaryPlus:
(defmulti evaluate class)

(defmethod evaluate Constant
  [c] (:value c))

(defmethod evaluate BinaryPlus
  [bp] (+ (evaluate (:lhs bp)) (evaluate (:rhs bp))))

Now we can already evaluate expressions:
user=> (use 'expression.multimethod)
nil
user=> (evaluate (->BinaryPlus (->Constant 1.1) (->Constant 2.2)))
3.3000000000000003

Adding a new operation is easy. Let's add stringify:
(defmulti stringify class)

(defmethod stringify Constant
  [c] (str (:value c)))

(defmethod stringify BinaryPlus
  [bp]
  (clojure.string/join " + " [(stringify (:lhs bp))
                              (stringify (:rhs bp))]))

Testing it:
user=> (stringify (->BinaryPlus (->Constant 1.1) (->Constant 2.2)))
"1.1 + 2.2"

How about adding new types? Suppose we want to add FunctionCall. First,
we'll define the new type. For simplicity, the func field of
FunctionCall is just a Clojure function. In real code it could be some sort
of function object in the language we're interpreting:
(defrecord FunctionCall [func argument])

And define how evaluate and stringify work for FunctionCall:
(defmethod evaluate FunctionCall
  [fc] ((:func fc) (evaluate (:argument fc))))

(defmethod stringify FunctionCall
  [fc] (str (clojure.repl/demunge (str (:func fc)))
            "("
            (stringify (:argument fc))
            ")"))

Let's take it for a spin (the full code is here):
user=> (def callexpr (->FunctionCall twice (->BinaryPlus (->Constant 1.1)
                                                         (->Constant 2.2))))
#'user/callexpr
user=> (evaluate callexpr)
6.6000000000000005
user=> (stringify callexpr)
"expression.multimethod/twice@52e29c38(1.1 + 2.2)"

It should be evident that the expression problem matrix for Clojure is:
We can add new ops without touching any existing code. We can also add new types
without touching any existing code. The code we're adding is only the new code
to handle the ops/types in question. The existing ops and types could come from
a third-party library to which we don't have source access. We could still
extend them for our new ops and types, without ever having to touch (or even
see) the original source code [4].


Is multiple dispatch necessary to cleanly solve the expression problem?
I've written about multiple dispatch in Clojure
before, and in the previous section we see another example of how to use the
language's defmulti/defmethod constructs. But is it multiple dispatch at
all? No! It's just single dispatch, really. Our ops (evaluate and
stringify) dispatch on a single argument - the expression type) [5].
If we're not really using multiple dispatch, what is the secret sauce that
lets us solve the expression problem so elegantly in Clojure? The answer is -
open methods. Note a crucial difference between how methods are defined in
C++/Java and in Clojure. In C++/Java, methods have to be part of a class and
defined (or at least declared) in its body. You cannot add a method to a class
without changing the class's source code.
In Clojure, you can. In fact, since data types and multimethods are orthogonal
entities, this is by design. Methods simply live outside types - they are first
class citizens, rather than properties of types. We don't add methods to a
type, we add new methods that act upon the type. This doesn't require
modifying the type's code in any way (or even having access to its code).
Some of the other popular programming languages take a middle way. In languages
like Python, Ruby and JavaScript methods belong to types, but we can dynamically
add, remove and replace methods in a class even after it was created. This
technique is lovingly called monkey patching. While initially enticing, it
can lead to big maintainability headaches in code unless we're very careful.
Therefore, if I had to face the expression problem in Python I'd prefer to roll
out some sort of multiple dispatch mechanism
for my program rather than rely on monkey patching.


Another Clojure solution - using protocols
Clojure's multimethods are very general and powerful. So general, in fact, that
their performance may not be optimal for the most common case - which is single
dispatch based on the type of the sole method argument; note that this is
exactly the kind of dispatch I'm using in this article. Therefore, starting with
Clojure 1.2, user code gained the ability to define and use protocols - a
language feature that was previously restricted only to built-in types.
Protocols leverage the host platform's (which in Clojure's case is mostly Java)
ability to provide quick virtual dispatch, so using them is a very efficient way
to implement runtime polymorphism. In addition, protocols retain enough of
the flexibility of multimethods to elegantly solve the expression problem.
Curiously, this was on the mind of Clojure's designers right from the start. The
Clojure documentation page about protocols lists this as one of their
capabilities:

[...] Avoid the 'expression problem' by allowing independent extension of the
set of types, protocols, and implementations of protocols on types, by
different parties. [...] do so without wrappers/adapters
Clojure protocols are an interesting topic, and while I'd like to spend some
more time on them, this article is becoming too long as it is. So I'll leave
a more thorough treatment for some later time and for now will just show how
protocols can also be used to solve the expression problem we're discussing.
The type definitions remain the same:
(defrecord Constant [value])
(defrecord BinaryPlus [lhs rhs])

However, instead of defining a multimethod for each operation, we now define
a protocol. A protocol can be thought of as an interface in a language like
Java, C++ or Go - a type implements an interface when it defines the set of
methods declared by the interface. In this respect, Clojure's protocols are more
like Go's interfaces than Java's, as we don't have to say a-priori which
interfaces a type implements when we define it.
Let's start with the Evaluatable protocol, that consists of a single method
- evaluate:
(defprotocol Evaluatable
  (evaluate [this]))

Another protocol we'll define is Stringable:
(defprotocol Stringable
  (stringify [this]))

Now we can make sure our types implement these protocols:
(extend-type Constant
  Evaluatable
    (evaluate [this] (:value this))
  Stringable
    (stringify [this] (str (:value this))))

(extend-type BinaryPlus
  Evaluatable
    (evaluate [this] (+ (evaluate (:lhs this)) (evaluate (:rhs this))))
  Stringable
    (stringify [this]
      (clojure.string/join " + " [(stringify (:lhs this))
                                  (stringify (:rhs this))])))

The extend-type macro is a convenience wrapper around the more general
extend - it lets us implement multiple protocols for a given type.
A sibling macro named extend-protocol lets us implement the same protocol
for multiple types in the same invocation [6].
It's fairly obvious that adding new data types is easy - just as we did above,
we simply use extend-type for each new data type to implement our current
protocols. But how do we add a new protocol and make sure all existing data
types implement it? Once again, it's easy because we don't have to modify any
existing code. Here's a new protocol:
(defprotocol Serializable
  (serialize [this]))

And this is its implementation for the currently supported data types:
(extend-protocol Serializable
  Constant
    (serialize [this] [(type this) (:value this)])
  BinaryPlus
    (serialize [this] [(type this)
                       (serialize (:lhs this))
                       (serialize (:rhs this))]))

This time, extending a single protocol for multiple data types -
extend-protocol is the more convenient macro to use.


Small interfaces are extensibility-friendly
You may have noted that the protocols (interfaces) defined in the Clojure
solution are very small - consisting of a single method. Since adding methods to
an existing protocol is much more problematic (I'm not aware of a way to do this
in Clojure), keeping protocols small is a good idea. This guideline comes up in
other contexts as well; for example, it's good practice to keep interfaces in Go
very minimal.
In our C++ solution, splitting the Expr interface could also be a good idea,
but it wouldn't help us with the expression problem, since we can't modify which
interfaces a class implements after we've defined it; in Clojure we can.




[1]"Types of data" and "operations" are two terms that should be fairly
obvious to modern-day programmers. Philip Wadler, in his discussion of
the expression problem (see the "historical perspective" section of the
article) calls them "datatypes" and "functions". A famous quote from Fred
Brooks's The Mythical Man Month (1975) is "Show me your flowcharts and
conceal your tables, and I shall continue to be mystified. Show me your
tables, and I won’t usually need your flowcharts; they’ll be obvious."





[2]Note the peculiar way in which data is passed between Visit* methods
in a Expr* -> Value map kept in the visitor. This is due to our
inability to make Visit* methods return different types in different
visitors. For example, in Evaluator we'd want them to return
double, but in Stringifier they'd probably return
std::string. Unfortunately C++ won't let us easily mix templates and
virtual functions, so we have to resort to either returning void* the
C way or the method I'm using here.
Curiously, in their paper Krishnamurthi et.al. run into the same issue in
the dialect of Java they're using, and propose some language extensions
to solve it. Philip Wadler uses proposed Java generics in his approach.






[3]I can't resist, so just in brief: IMHO inheritance is only good for a
very narrow spectrum of uses, but languages like C++ hail it as the main
extension mechanism of types. But inheritance is deeply
flawed for many other use cases, such as implementations of
interfaces. Java is a bit better in this regard, but in the end the
primacy of classes and their "closed-ness" make a lot of tasks - like the
expression problem - very difficult to express in a clean way.





[4]In fact, there are plenty of examples in which the Clojure implementation
and the standard library provide protocols that can be extended by the
user for user-defined types. Extending user-written protocols and
multimethods for built-in types is trivial. As an exercise, add an
evaluate implementation for java.lang.Long, so that built-in
integers could participate in our expression trees without requiring
wrapping in a Constant.





[5]FWIW, we can formulate a multiple dispatch solution to the expression
problem in Clojure. The key idea is to dispatch on two things: type and
operation. Just for fun, I coded a prototype that does this which you can
see here.
I think the approach presented in the article - each operation being its
own multimethod - is preferable, though.





[6]The sharp-eyed reader will notice a cool connection to the expression
problem matrix. extend-type can add a whole new row to the matrix,
while extend-protocol adds a column. extend adds just a single
cell.




            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The "impossibly small" Microdot web framework]]></title>
            <link>https://lwn.net/Articles/1034121/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45155682</guid>
            <description><![CDATA[The Microdot web framework is quite small, as its name would imply; it supports both standard C [...]]]></description>
            <content:encoded><![CDATA[

Did you know...?

LWN.net is a subscriber-supported publication; we rely on subscribers
       to keep the entire operation going.  Please help out by buying a subscription and keeping LWN on the
       net.



The Microdot
web framework is quite small, as its name would imply; it supports both
standard CPython and MicroPython,
so it can be used on systems ranging from internet-of-things (IoT) devices
all the way up to large, cloudy servers.  It was developed by Miguel
Grinberg, who gave a presentation about it at EuroPython 2025.  His name
may sound familiar from his well-known Flask
Mega-Tutorial, which has introduced many to the Flask lightweight Python-based
web framework.  It should come as no surprise, then, that Microdot is
inspired by its rather larger cousin, so Flask enthusiasts will find much
to like in Microdot—and will come up to speed quickly should their needs turn
toward smaller systems.



We have looked at various pieces of this software stack along the way: Microdot itself in January 2024, MicroPython in 2023, and Flask as part of a look at Python microframeworks in
2019.



Grinberg began his talk with an introduction.  He has been living in
Ireland for a few years and "I make stuff".  That includes open-source projects, blog posts (on a
Flask-based blog platform that he wrote), and "a bunch of books".
He works for Elastic and is one of the maintainers of the Elasticsearch
Python client, "so maybe you have used some of the things that I
made for money".


Why?


With a chuckle, he asked: "Why do we need another web framework?  We
have so many already."  The story starts with a move that he made to
Ireland from the US in 2018; he rented a house with a "smart" heating
controller and was excited to use it.  There were two thermostats, one for
each level of the house, and he was "really looking forward to the
winter" to see the system in action.



As might be guessed, he could set target temperatures in each thermostat;
they would communicate with the controller that would turn the heating on
and off as needed.  In addition, the system had a web server that could be
used to query various parameters or to start and stop the heaters.  You
could even send commands via SMS text messages; "there's a SIM card
somewhere in that box [...] very exciting stuff".



When winter rolled around, it did not work that well, however; sometimes
the house was too chilly or warm and he had to start and stop the heaters
himself. He did some debugging and found that the thermostats were
reporting temperatures that were off by ±3°C, "which is too much for
trying to keep the house at 20°".  The owner of the house thought that
he was too used to the US where things just work; "at least she thinks that in America everything is super-efficient,
everything works, and she thought 'this is the way things work in
Ireland'".  So he did not make any progress with the owner.



At that point, most people would probably just give up and live with the
problem; "I hacked my heating controller instead".  He set the
temperatures in both thermostats to zero, which effectively disabled their
ability to affect the heaters at all, and built two small boards running
MicroPython, each connected to a temperature and humidity sensor device.
He wrote code that would check the temperature every five minutes and send
the appropriate commands to start or stop the heaters based on what it
found.



So the second half of his first winter in Ireland went great.  The sensors
are accurate to ±0.5°C, so "problem solved".  But, that led to a new
problem for him.  "I wanted to know things: What's the temperature right
now?  Is the heating running right now or not?  How many hours did it run
today compared to yesterday?"  And so on.



He added a small LCD screen to display some information, but he had to
actually go to the device and look at it; what he really wanted was to be
able to talk to the device over WiFi and get information from the couch
while he was watching TV. "I wanted to host a web server [...]  that
will show me a little dashboard".



So he searched for web frameworks
for MicroPython; in the winter of 2018-2019, "there were none".
Neither Flask nor Bottle,
which is a good bit smaller, would run on MicroPython; both are too large
for the devices,
but, in addition, the standard library for MicroPython is a subset of that of
CPython, so many things that they need are missing. A "normal
person" would likely have just accepted that and moved on; "I
created a web framework instead."


Demo


He brought one of his thermostat devices to Prague for the conference and
did a small demonstration of it operating during the talk.  The device was
connected to his laptop using USB, which provided power, but also a serial
connection to the board.  On the laptop, he used the rshell
remote MicroPython shell to talk to the board, effectively using the laptop
as a terminal.





He started the MicroPython read-eval-print loop (REPL) on the board in
order to simulate the normal operation of the board.  When it is plugged
into the wall, rather than a laptop, it will boot to the web server, so he
made that happen with a soft-reboot command.  The device then connected to
the conference WiFi and gave him the IP address (and port) where the server
was running.



He switched over to Firefox on his laptop and visited the site, which showed a
dashboard that had the current temperature (24.4°) and relative humidity
(56.9%) of the room.  He also used curl from the laptop to contact the
api endpoint of the web application, which returned JSON with the
two values and the time.  There is no persistent clock on the board, so the
application contacts an NTP server to pick up the time when it boots; that
allows it to report the last time a measurement was taken.



Grinberg said that he wanted to set the expectations at the right level by
looking at the capabilities of the microcontrollers he often uses with
Microdot.  For example, the ESP8266 in his thermostat device has 64KB of
RAM and up to 4MB of flash.  The ESP8266 is the smallest and least expensive (around €5)
device with WiFi that
he has found; there are many even smaller devices, but they lack
the networking required for running a web server.  The other devices
he uses are the Raspberry Pi Pico W with 2MB of flash and 256KB of RAM and
the ESP32 with up to 8MB of flash and 512KB of RAM.  He contrasted those
with his laptop, which has 32GB of RAM, so "you need 500,000
ESP8266s" to have the same amount of memory.


Features


The core framework of Microdot is in a single microdot.py
file.  It is fully asynchronous, using the MicroPython
subset of the CPython
asyncio module, so it can run on both interpreters.  It uses
asyncio because that is the only way to do concurrency on the
microcontrollers; there is no support for processes or threads on those devices.



Microdot has Flask-style route
decorators to define URLs for the application.  It has Request
and Response
classes, as well as hooks
to run before and after requests, he said.  Handling query strings,
form data, and JSON are all available in Microdot via normal Python
dictionaries.  Importantly, it can handle streaming requests and responses;
because of the limited memory of these devices, it may be necessary to split
up the handling of larger requests or responses.



It supports setting
cookies and sending static
files.  Web applications can be constructed from a set of modules, using sub-applications,
which are similar to Flask
blueprints.  It also has its own web
server with TLS support.  "I'm very proud of all the stuff I was
able to fit in the core Microdot framework", Grinberg said.



He hoped that attendees would have to think for a minute to come up with
things that are missing from Microdot, but they definitely do exist.  There
are some officially
maintained extensions, each in its own single .py file, to
fill some of those holes.  They encompass functionality that is important,
but he did not want to add to the core because that would make it too large
to fit on the low-end ESP8266 that he is using.



There is an extension for multipart
forms, which includes file uploads; "this is extremely complicated
to parse, it didn't make sense to add it into the core because most people
don't do this".  There is support for WebSocket
and server-sent
events (SSE).  Templates
are supported using utemplate
for both Python implementations or Jinja, which only
works on CPython.  There are extensions for basic
and token-based authentication and for secure
user logins with session data; the latter required a replacement for
the CPython-only PyJWT, which Grinberg
wrote and contributed to MicroPython as jwt.py.
There is a small handful of other extensions that he quickly mentioned as well.



"I consider the documentation as part of the framework"; he is
"kind of fanatical" about documenting everything.  If there is
something missing or not explained well, "it's a bug that I need to
fix".  He writes books, so the documentation is organized similarly;
it comes in at 9,267 words, which equates to around 47 minutes of reading
time.  There is 100% test coverage, he said, and there are around 30
examples, with more coming.



A design principle that he follows is "no dark magic".  An example
of dark magic to him is the Flask
application context, "which very few people understand".  In
Microdot, the request object is explicitly passed to each route function.
Another example is the dependency
injection that is used by the FastAPI framework to add
components; Microdot uses explicit decorators instead.



He used the cloc
utility to count lines of code, while ignoring comments and blank
lines.  Using that, Django
comes in at 110,000 lines, Flask plus its essential Werkzeug library
is 15,500 lines, FastAPI with Starlette is 14,900 lines, Bottle is
around 3,000 lines, while the Microdot core has 765 lines ("believe it
or not") and a full
install with all the extensions on MicroPython comes in at just shy of 1,700
lines of code.



He ended with an example of how Microdot can be so small by comparing the
URL matching in Flask with Microdot.  The Flask version does lots more than
Microdot, with more supported types of arguments in a URL and multiple classes
in the werkzeug.routing
module; it has 1,362 lines of code.  For Microdot, there is a more
limited set of URL arguments, though there is still the ability to define
custom types, and a single
URLPattern class; all of that is done in 63 lines of
code. "I don't intend to support everything that Flask supports, in
terms of routing, but I intend to support the 20% that covers 80% of the
use cases."  That is the overall mechanism that he has used to get to
something that is so small.



An audience member asked about whether the Microdot code was minified in
order to get it to fit.  Grinberg said that doing so was not all that
useful for MicroPython, but the code is smaller on the board because it is
precompiled on another system; that results in a
microdot.mpy file, which is bytecode for MicroPython.  For
example, on the
low-end device he is using for his thermostats, Microdot would not be able
to be compiled on the device itself.  There are some other tricks that can
also be used for reducing the RAM requirements, like putting the code into
the firmware as part of the MicroPython binary.



The final question was about performance, and how many requests per second
could be handled. Grinberg said that he did not
have any real numbers, but that the device he demonstrated is "really
really slow".  That question led to a blog
post in late July where Grinberg tried to more fully answer it.



[I would like to thank the Linux Foundation, LWN's travel sponsor, for
travel assistance to Prague for EuroPython.]

           Index entries for this article
           ConferenceEuroPython/2025
            PythonWeb
            

            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: Lightweight tool for managing Linux virtual machines]]></title>
            <link>https://github.com/ccheshirecat/flint</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45154857</guid>
            <description><![CDATA[Lightweight tool for managing linux virtual machines - ccheshirecat/flint]]></description>
            <content:encoded><![CDATA[🌀 Flint — KVM Management, Reimagined

  


  
    A single <8MB binary with a modern Web UI, CLI, and API for KVM.
    No XML. No bloat. Just VMs.
  


  
    
  
  
    
  
  
    
  



Flint is a modern, self-contained KVM management tool built for developers, sysadmins, and home labs who want zero bloat and maximum efficiency. It was built in a few hours out of a sudden urge for something better.

🚀 One-Liner Install
Prerequisites: A Linux host with libvirt and qemu-kvm installed.
curl -fsSL https://raw.githubusercontent.com/ccheshirecat/flint/main/install.sh | sh
Auto-detects OS/arch, installs to /usr/local/bin, and you're ready in seconds.

✨ Core Philosophy

🖥️ Modern UI — A beautiful, responsive Next.js + Tailwind interface, fully embedded.
⚡ Single Binary — No containers, no XML hell. A sub-8MB binary is all you need.
🛠️ Powerful CLI & API — Automate everything. If you can do it in the UI, you can do it from the command line or API.
📦 Frictionless Provisioning — Native Cloud-Init support and a simple, snapshot-based template system.
💪 Non-Intrusive — Flint is a tool that serves you. It's not a platform that locks you in.


🏎️ Quickstart
1. Start the Server
flint serve

Web UI: http://localhost:5550
API: http://localhost:5550/api

2. Use the CLI
# List your VMs
flint vm list --all

# Launch a new Ubuntu VM named 'web-01'
flint launch ubuntu-24.04 --name web-01

# SSH directly into your new VM
flint ssh web-01

# Create a template from your configured VM
flint snapshot create web-01 --tag baseline-setup

# Launch a clone from your new template
flint launch --from web-01 --name web-02

📖 Full Documentation
While Flint is designed to be intuitive, the full CLI and API documentation, including all commands and examples, is available at:
➡️ DOCS.md

🔧 Tech Stack

Backend: Go 1.25+
Web UI: Next.js + Tailwind + Bun
KVM Integration: libvirt-go
Binary Size: ~8.4MB (stripped)



  🚀 Flint is young, fast-moving, and designed for builders.
  Try it. Break it. Star it. Contribute.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The key to getting MVC correct is understanding what models are]]></title>
            <link>https://stlab.cc/tips/about-mvc.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45154501</guid>
            <description><![CDATA[stlab hosts modern, modular C++ algorithms and data structures.]]></description>
            <content:encoded><![CDATA[
        Smalltalk MVC is defined in Design Pattern as:


  MVC Consists of three kinds of objects. The Model is the application object, the View is its screen presentation, and the Controller defines the way the user interface reacts to user input.1


However this definition has been abused over the years - Back in 2003 I gave a talk citing how bad Apple’s definition was. At the time it stated:


  A view object knows how to display and possibly edit data from the application’s model… A controller object acts as the intermediary between the application’s view objects and its model objects… Controllers are often the least reusable objects in an application, but that’s acceptable…2


Of course it isn’t acceptable and, over the years, Apple has refined their definition and now acknowledge the distinction between the traditional Smalltalk version of MVC and the Cocoa version.3 But the Cocoa version is still defined much as it was before:


  A view object knows how to display, and might allow users to edit, the data from the application’s model… A controller object acts as the intermediary between the application’s view objects and its model objects…3


In looking at how iOS applications are written the sentiment that controllers (and now view-controllers) are often the least reusable components in an application still flourishes, even if it is now unstated.

MVC (I’ll always use that term to refer to the Smalltalk form) has the following structure:















figure: Smalltalk MVC4


Here the solid lines imply a direct association. And the dashed lines an indirect association by an observer. So what we see is that the model is unaware of the view and controller, except indirectly through notifications, and hence the code in the Model is reusable. The controller and view bind to the model, not the other way around.

Often the function of the Controller and View are tightly coupled into a “widget” or “control”. When Apple talks about a View-Controller in their model they are talking about a grab-bag of an uber-widget that is a composite of UIView widgets and multiple models. From what I’ve seen, including in Apple’s example code, it is usually a pretty big mess.

The key to getting MVC correct is understanding what models are. A model is simply an object5 which can be observed (a requirement for attaching views). For example, in ObjC an int is an object, but it is not observable. However, an ObjC object with an int property is observable using Key-Value Observing6.  A model may encapsulate complex relationships between the model’s properties. A trivial model is one where each property is completely independent (think C struct vs. C++ class). From a notification the view should be able to determine, at a minimum:


  What changed. It may be as simple as “the model bound to the view”.
  The new value to display.


For example, let’s say our model is a trivial observable boolean (I can’t imagine a simpler model). What we want is a checkbox that binds to the observable boolean. When the controller requests a change in value, the boolean is updated, and the view is notified of the new state of the model. The model is unaware of what UI is attached to it, and in fact there could be multiple UIs, including something like a scripting system, attached to the same instance of the model. This is a form of data binding - though most data binding systems replicate the problems of their underlying widget set by treating the model as if it were observing the view, not the other way around.

Contrast this with most UI frameworks where you have a checkbox widget from which you can query the value and you receive a notification when the value has changed. This is pushing a model into the widget. With MVC you never ask a question like “what is the default state of this checkbox?” - the default state of the view is always the current state of the model. You would also never get the state of the checkbox - the state of the checkbox is simply a reflection of the state of the model. In a system where you get the state of a checkbox you are binding two models together by treating one as a view/controller of the other. Such a pattern doesn’t scale beyond trivial models, and even for those it introduces some ambiguity.

I conjecture that one of the reasons why MVC has been so screwed up is because, unlike in Smalltalk, writing something as simple as an observable boolean is a bit of a pain in a language like Pascal or C. You quickly get into object ownership and lifetime issues and how to write bind expressions. If one also assumes that you have a 1:1 mapping from UI to model then there is some inherent inefficiency in the generalization. The Lisa team made some major compromises and the rest of the industry followed along.7

To support more complex views, the notification may need to specify what parts of the model changed and how those parts changed. For example, “image 58 was removed from the sequence”. A complete model is one that can support any view of that model type efficiently (related to the notion of a complete type and a type’s efficient basis).

One additional attribute of MVC is that it is a composite pattern. This is hinted at by the direct connection between the Controller and the View. As I said early, the view may contain state, this state is itself an object, and because this state is also displayed within the view it is observable. It is another model. I refers to this as the view’s model. This model may include things such as the visibility of a window, the tab the user was last looking at, and the portion of the model being viewed.

Identifying what the models are in your system is important. We usually do pretty good at identifying the major models. Such as “this is an image” - but often fall short of identifying the complete model, i.e. “this is an image with a collection of settings.” We end up with our model spread out within the code (an incidental type) and it makes it more difficult to deal with it.

A common model that is often completely overlooked is the model for function arguments. When you have a command, button, gesture, or menu item in your application, these are bound to a function. The function itself is not typically a zeroary function but rather has a set of arguments that are constructed through other parts of the UI. For example, if I have a list of images in my application, I might have a button to delete the selected images. Here the current selection is the argument to my delete command. To create a UI for the selection I must create a model of the arguments to my function. A precondition of delete is that the selection is not empty. This precondition must be observable in the argument model so it can be reflected in the view by disabling or hiding the button and in the controller be disallowing the user to click the button and issue the command. The same argument model can be shared for multiple commands within an application.


  
    

      Gamma, Erich. “1.2 Design Patterns in Smalltalk MVC.” Design Patterns: Elements of Reusable Object-Oriented Software. Reading, MA: Addison-Wesley, 1995. N. pag. Print. ↩
    
    

      http://smartfriends.com/U/Presenters/untangling_software.pdf (Don’t bother reading, this was an incomprehensible talk.) ↩
    
    

      https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaEncyclopedia/Model-View-Controller/Model-View-Controller.html ↩ ↩2
    
    

      https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller ↩
    
    

      Stepanov, Alexander A., and Paul McJones. “1.3 Objects.” Elements of Programming. Upper Saddle River, NJ: Addison-Wesley, 2009. N. pag. Print. ↩
    
    

      https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html ↩
    
    

      https://en.wikipedia.org/wiki/Object-oriented_user_interface ↩
    
  


    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: I'm making an open-source platform for learning Japanese]]></title>
            <link>https://kanadojo.com</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45152940</guid>
        </item>
        <item>
            <title><![CDATA[A Navajo weaving of an integrated circuit: the 555 timer]]></title>
            <link>https://www.righto.com/2025/09/marilou-schultz-navajo-555-weaving.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45152779</guid>
            <description><![CDATA[The noted Diné (Navajo) weaver Marilou Schultz recently completed an intricate weaving composed of thick white lines on a black background, ...]]></description>
            <content:encoded><![CDATA[
The noted Diné (Navajo) weaver Marilou Schultz recently completed an intricate weaving
composed of
thick white lines on a black background, punctuated with reddish-orange diamonds.
Although this striking rug may appear abstract, it shows the internal circuitry of a tiny silicon chip known
as the 555 timer.
This chip has hundreds of applications in
everything from a sound generator to a windshield wiper controller.
At one point, the 555 was the world's best-selling integrated circuit with billions sold.
But how did the chip get turned into a rug?

The 555 chip is constructed from a tiny flake of silicon with a layer of metallic wiring on top.
In the rug, this wiring is visible as the thick white lines, while the silicon forms the black background.
One conspicuous feature of the rug is the reddish-orange diamonds around the perimeter.
These correspond to the connections between the silicon chip and its eight pins. Tiny golden bond wires—thinner than a human hair—are attached to the square bond pads to provide these connections.
The circuitry of the 555 chip contains 25 transistors, silicon devices that can switch
on and off.
The rug is dominated by three large transistors, the filled squares with a 王 pattern inside, while the remaining transistors are represented by small dots.
The weaving was inspired by a photo of the 555 timer die taken by
Antoine Bercovici
(Siliconinsider); I suggested this photo to Schultz as a possible subject
for a rug.  The diagram below compares the 
weaving (left) with the die photo (right).
As you can see, the weaving closely follows the actual chip, but there are a few artistic differences.
For instance, two of the bond pads have been removed, the circuitry at the top has been simplified,
and the part number at the bottom has been removed.
A comparison of the rug (left) and the original photograph (right).
Dark-field image of the 555 timer is courtesy of Antoine Bercovici.
Antoine took the die photo with a dark field microscope, a special type of microscope that
produces an image on a black background.
This image emphasizes the metal layer on the top of the die.
In comparison, a standard bright-field microscope produced the image below.
When a chip is manufactured, regions of silicon are "doped" with impurities to create transistors
and resistors.
These regions are visible in the image below as subtle changes in the color of the silicon.

In the weaving, the chip's design appears almost monumental, making it easy to forget that the
actual chip is microscopic.
For the photo below,
I obtained a version of the chip packaged in a metal can, rather than the typical rectangle of
black plastic.
Cutting the top off the metal can reveals the tiny chip inside, with eight gold bond wires connecting the
die to the pins of the package.
If you zoom in on the photo, you may recognize the three large transistors that dominate the rug.
The 555 timer die inside a metal-can package, with a penny for comparison. Click this image (or any other) for a larger version.
The artist, Marilou Schultz, has been creating chip rugs since 1994, when Intel commissioned a
rug based on the Pentium as a gift to AISES (American Indian Science & Engineering Society).
Although Schultz learned weaving as a child, the Pentium rug was a challenge due to its complex pattern
and lack of symmetry; a day's work might add just an inch to the rug.
This dramatic weaving was created with wool from the long-horned Navajo-Churro sheep, colored with
traditional plant dyes.
"Replica of a Chip", created by Marilou Schultz, 1994. Wool. Photo taken at the National Gallery of Art, 2024.
For the 555 timer weaving, Schultz experimented with different materials. Silver and gold metallic threads
represent the aluminum and copper in the chip.
The artist explains that "it took a lot more time to incorporate the metallic threads," but it was
worth the effort because "it is spectacular to see the rug with the metallics in the dark with a little light hitting it."
Aniline dyes provided the black and lavender colors.
Although natural logwood dye
produces a beautiful purple, it fades over time, so Schultz used an aniline dye instead.
The lavender colors are dedicated to the weaver's mother, who passed away in February;
purple was her favorite color.
Inside the chip
How does the 555 chip produce a particular time delay?
You add external components—resistors and a capacitor—to select the time.
The capacitor is filled (charged) at a speed controlled by the resistor. When the capacitor get "full",
the 555 chip switches operation and starts emptying (discharging) the capacitor.
It's like filling a sink: if you have a large sink (capacitor) and a trickle of water (large resistor),
the sink fills slowly. But if you have a smal sink (capacitor) and a lot of water (small resistor),
the sink fills quickly.
By using different resistors and capacitors, the 555 timer can provide time intervals from microseconds
to hours.
I've constructed an interactive chip browser that shows how the regions of the rug correspond to specific
electronic components in the physical chip. Click on any part of the rug to learn the function of
the corresponding component in the chip.


Click the die or schematic for details...











For instance, two of the large square transistors turn the chip's output on or off, while the third
large transistor discharges the capacitor when it is full. (To be precise, the capacitor goes between 1/3 full
and 2/3 full to avoid issues near "empty" and "full".)
The chip has circuits called comparators that detect when the capacitor's voltage reaches 1/3 or 2/3,
switching between emptying and filling at those points.
If you want more technical details about the 555 chip, see my previous articles:
an early 555 chip,
a 555 timer similar to the rug,
and a more modern CMOS version of the 555.
Conclusions
The similarities between Navajo weavings and the patterns in integrated circuits have long been recognized.
Marilou Schultz's weavings of integrated circuits make these visual metaphors into concrete works of art.
This connection is not just metaphorical, however; in the 1960s, the semiconductor company Fairchild employed numerous Navajo workers to assemble chips in Shiprock, New Mexico.
I wrote about this complicated history in The Pentium as a Navajo Weaving.


This work is being shown at SITE Santa Fe's Once Within a Time exhibition (running until January 2026).
I haven't seen the exhibition in person, so let me know if you visit it.
For more about Marilou Schultz's art, see The Diné Weaver Who Turns Microchips Into Art, or
A Conversation with Marilou Schultz on YouTube.
Many thanks to Marilou Schultz for discussing her art with me.
Thanks to First American Art Magazine for providing the photo of her 555 rug.
Follow me on Mastodon (@[email protected]),
Bluesky (@righto.com),
or RSS for updates.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How the “Kim” dump exposed North Korea's credential theft playbook]]></title>
            <link>https://dti.domaintools.com/inside-the-kimsuky-leak-how-the-kim-dump-exposed-north-koreas-credential-theft-playbook/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45152066</guid>
            <description><![CDATA[A rare and revealing breach attributed to a North Korean-affiliated actor, known only as “Kim” as named by the hackers who dumped the data, has delivered a new insight into Kimsuky (APT43) tactics, techniques, and infrastructure. This actor's operational profile showcases credential-focused intrusions targeting South Korean and Taiwanese networks, with a blending of Chinese-language tooling, infrastructure, and possible logistical support. The “Kim” dump, which includes bash histories, phishing domains, OCR workflows, compiled stagers, and rootkit evidence, reflects a hybrid operation situated between DPRK attribution and Chinese resource utilization.]]></description>
            <content:encoded><![CDATA[
                                
Contents:Part I: Technical AnalysisPart II: Goals AnalysisPart III: Threat Intelligence Report



Executive Summary



A rare and revealing breach attributed to a North Korean-affiliated actor, known only as “Kim” as named by the hackers who dumped the data, has delivered a new insight into Kimsuky (APT43) tactics, techniques, and infrastructure. This actor’s operational profile showcases credential-focused intrusions targeting South Korean and Taiwanese networks, with a blending of Chinese-language tooling, infrastructure, and possible logistical support. The “Kim” dump, which includes bash histories, phishing domains, OCR workflows, compiled stagers, and rootkit evidence, reflects a hybrid operation situated between DPRK attribution and Chinese resource utilization.



Screen shot of the adversary’s desktop VM



This report is broken down into three parts: 




Technical Analysis of the dump materials



Motivation and Goals of the APT actor (group)



A CTI report compartment for analysts




While this leak only gives a partial idea of what the Kimusky/PRC activities have been, the material provides insight into the expansion of activities, nature of the actor(s), and goals they have in their penetration of the South Korean governmental systems that would benefit not only DPRK, but also PRC.



Phrack article



Without a doubt, there will be more coming out from this dump in the future, particularly if the burned assets have not been taken offline and access is still available, or if others have cloned those assets for further analysis. We may revisit this in the future if additional novel information comes to light.



Part I: Technical Analysis



The Leak at a Glance



The leaked dataset attributed to the “Kim” operator offers a uniquely operational perspective into North Korean-aligned cyber operations. Among the contents were terminal history files revealing active malware development efforts using NASM (Netwide Assembler), a choice consistent with low-level shellcode engineering typically reserved for custom loaders and injection tools. These logs were not static forensic artifacts but active command-line histories showing iterative compilation and cleanup processes, suggesting a hands-on attacker directly involved in tool assembly.



File list of dump



In parallel, the operator ran OCR (Optical Character Recognition) commands against sensitive Korean PDF documents related to public key infrastructure (PKI) standards and VPN deployments. These actions likely aimed to extract structured language or configurations for use in spoofing, credential forgery, or internal tool emulation.



Privileged Access Management (PAM) logs also surfaced in the dump, detailing a timeline of password changes and administrative account use. Many were tagged with the Korean string 변경완료 (“change complete”), and the logs included repeated references to elevated accounts such as oracle, svradmin, and app_adm01, indicating sustained access to critical systems.



The phishing infrastructure was extensive. Domain telemetry pointed to a network of malicious sites designed to mimic legitimate Korean government portals. Sites like nid-security[.]com were crafted to fool users into handing over credentials via advanced AiTM (Adversary-in-the-Middle) techniques.



nid-security[.]com phishing domain (anon reg 2024)



Finally, network artifacts within the dump showed targeted reconnaissance of Taiwanese government and academic institutions. Specific IP addresses and .tw domain access, along with attempts to crawl .git repositories, reveal a deliberate focus on high-value administrative and developer targets.



Perhaps most concerning was the inclusion of a Linux rootkit using syscall hooking (khook) and stealth persistence via directories like /usr/lib64/tracker-fs. This highlights a capability for deep system compromise and covert command-and-control operations, far beyond phishing and data theft.



Artifacts recovered from the dump include:




Terminal history files demonstrating malware compilation using NASM



OCR commands parsing Korean PDF documents related to PKI and VPN infrastructure



PAM logs reflecting password changes and credential lifecycle events



Phishing infrastructure mimicking Korean government sites



IP addresses indicating reconnaissance of Taiwanese government and research institutions



Linux rootkit code using syscall hooking and covert channel deployment




Credential Theft Focus



The dump strongly emphasizes credential harvesting as a central operational goal. Key files such as 136백운규001_env.key (The presence of 136백운규001_env.key is a smoking gun indicator of stolen South Korean Government PKI material, as its structure (numeric ID + Korean name + .key) aligns uniquely with SK GPKI issuance practices and provides clear evidence of compromised, identity-tied state cryptographic keys.) This was discovered alongside plaintext passwords, that indicate clear evidence of active compromise of South Korea’s GPKI (Government Public Key Infrastructure). Possession of such certificates would allow for highly effective identity spoofing across government systems.











PAM logs further confirmed this focus, showing a pattern of administrative account rotation and password resets, all timestamped and labeled with success indicators (변경완료: Change Complete). The accounts affected were not low-privilege; instead, usernames like oracle, svradmin, and app_adm01, often used by IT staff and infrastructure services, suggested access to core backend environments.



These findings point to a strategy centered on capturing and maintaining access to privileged credentials and digital certificates, effectively allowing the attacker to act as an insider within trusted systems.




Leaked .key files (e.g., 136백운규001_env.key) with plaintext passwords confirm access to GPKI systems



PAM logs show administrative password rotations tagged with 변경완료 (change complete)



Admin-level accounts such as oracle, svradmin, and app_adm01 repeatedly appear in compromised logs




Phishing Infrastructure



The operator’s phishing infrastructure was both expansive and regionally tailored. Domains such as nid-security[.]com and webcloud-notice[.]com mimicked Korean identity and document delivery services, likely designed to intercept user logins or deploy malicious payloads. More sophisticated spoofing was seen in sites that emulated official government agencies like dcc.mil[.]kr, spo.go[.]kr, and mofa.go[.]kr.



Whoisof domains created by dysoni91@tutamail[.]com



Historical Whois of webcloud-notice[.]com



Burner email usage added another layer of operational tradecraft. The address jeder97271[@]wuzak[.]com is likely linked to phishing kits that operated through TLS proxies, capturing credentials in real time as victims interacted with spoofed login forms.



These tactics align with previously known Kimsuky behaviors but also demonstrate an evolution in technical implementation, particularly the use of AiTM interception rather than relying solely on credential-harvesting documents.



Domain connections map




Domains include: nid-security[.]com, html-load[.]com, webcloud-notice[.]com, koala-app[.]com, and wuzak[.]com



Mimicked portals: dcc.mil[.]kr, spo.go[.]kr, mofa.go[.]kr



Burner email evidence: jeder97271[@]wuzak[.]com



Phishing kits leveraged TLS proxies for AiTM credential capture




Malware Development Activity



Kim’s malware development environment showcased a highly manual, tailored approach. Shellcode was compiled using NASM, specifically with flags like -f win32, revealing a focus on targeting Windows environments. Commands such as make and rm were used to automate and sanitize builds, while hashed API call resolution (VirtualAlloc, HttpSendRequestA, etc.) was implemented to evade antivirus heuristics.



The dump also revealed reliance on GitHub repositories known for offensive tooling. TitanLdr, minbeacon, Blacklotus, and CobaltStrike-Auto-Keystore were all cloned or referenced in command logs. This hybrid use of public frameworks for private malware assembly is consistent with modern APT workflows.



A notable technical indicator was the use of the proxyres library to extract Windows proxy settings, particularly via functions like proxy_config_win_get_auto_config_url. This suggests an interest in hijacking or bypassing network-level security controls within enterprise environments.




Manual shellcode compilation via nasm -f win32 source/asm/x86/start.asm



Use of make, rm, and hash obfuscation of Win32 API calls (e.g., VirtualAlloc, HttpSendRequestA)



GitHub tools in use: TitanLdr, minbeacon, Blacklotus, CobaltStrike-Auto-Keystore



Proxy configuration probing through proxyres library (proxy_config_win_get_auto_config_url)




Rootkit Toolkit and Implant Structure



The Kim dump offers deep insight into a stealthy and modular Linux rootkit attributed to the operator’s post-compromise persistence tactics. The core implant, identified as vmmisc.ko (alternatively VMmisc.ko in some shells), was designed for kernel-mode deployment across multiple x86_64 Linux distributions and utilizes classic syscall hooking and covert channeling to maintain long-term undetected access.







Google Translation of Koh doc: Rootkit Endpoint Reuse Authentication Tool



“This tool uses kernel-level rootkit hiding technology, providing a high degree of stealth and penetration connection capability. It can hide while running on common Linux systems, and at the kernel layer supports connection forwarding, allowing reuse of external ports to connect to controlled hosts. Its communication behavior is hidden within normal traffic.



The tool uses binary merging technology: at compile time, the application layer program is encrypted and fused into a .ko driver file. When installed, only the .ko file exists. When the .ko driver starts, it will automatically decompress and release the hidden application-layer program.



Tools like chkrootkit, rkhunter, and management utilities (such as ps, netstat, etc.) are bypassed through technical evasion and hiding, making them unable to detect hidden networks, ports, processes, or file information.



To ensure software stability, all functions have also passed stress testing.



Supported systems: Linux Kernel 2.6.x / 3.x / 4.x, both x32 and x64 systems”.



Implant Features and Behavior



This rootkit exhibits several advanced features:




Syscall Hooking: Hooks critical kernel functions (e.g., getdents, read, write) to hide files, directories, and processes by name or PID.



SOCKS5 Proxy: Integrated remote networking capability using dynamic port forwarding and chained routing.



PTY Backdoor Shell: Spawns pseudoterminals that operate as interactive reverse shells with password protection.



Encrypted Sessions: Session commands must match a pre-set passphrase (e.g., testtest) to activate rootkit control mode.




Once installed (typically using insmod vmmisc.ko), the rootkit listens silently and allows manipulation via an associated client binary found in the dump. The client supports an extensive set of interactive commands, including:



+p              # list hidden processes



+f              # list hidden files



callrk          # load client ↔ kernel handshake



exitrk          # gracefully unload implant



shell           # spawn reverse shell



socks5          # initiate proxy channel



upload / download # file transfer interface



These capabilities align closely with known DPRK malware behaviors, particularly from the Kimsuky and Lazarus groups, who have historically leveraged rootkits for lateral movement, stealth, persistence, and exfiltration staging.



Observed Deployment



Terminal history (.bash_history) shows the implant was staged and tested from the following paths:



.cache/vmware/drag_and_drop/VMmisc.ko

/usr/lib64/tracker-fs/vmmisc.ko

Execution logs show the use of commands such as:

insmod /usr/lib64/tracker-fs/vmmisc.ko

./client 192.168.0[.]39 testtest



These paths were not random—they mimic legitimate system service locations to avoid detection by file integrity monitoring (FIM) tools.



Deployment map



This structure highlights the modular, command-activated nature of the implant and its ability to serve multiple post-exploitation roles while maintaining stealth through kernel-layer masking.



Strategic Implications



The presence of such an advanced toolkit in the “Kim” dump strongly suggests the actor had persistent access to Linux server environments, likely via credential compromise. The use of kernel-mode implants also indicates long-term intent and trust-based privilege escalation. The implant’s pathing, language patterns, and tactics (e.g., use of /tracker-fs/, use of test passwords) match TTPs previously observed in operations attributed to Kimsuky, enhancing confidence in North Korean origin.



OCR-Based Recon



A defining component of Kim’s tradecraft was the use of OCR to analyze Korean-language security documentation. The attacker issued commands such as ocrmypdf -l kor+eng “file.pdf” to parse documents like 별지2)행정전자서명_기술요건_141125.pdf (“Appendix 2: Administrative Electronic Signature_Technical Requirements_141125.pdf”) and SecuwaySSL U_카달로그.pdf (“SecuwaySSL U_Catalog.pdf”). These files contain technical language around digital signatures, SSL implementations, and identity verification standards used in South Korea’s PKI infrastructure.



This OCR-based collection approach indicates more than passive intelligence gathering – it reflects a deliberate effort to model and potentially clone government-grade authentication systems. The use of bilingual OCR (Korean + English) further confirms the operator’s intention to extract usable configuration data across documentation types.



OCR run on Korean PDFs




OCR commands used to extract Korean PKI policy language from PDFs such as (별지2)행정전자서명_기술요건_141125.pdf and SecuwaySSL U_카달로그.pdf

별지2)행정전자서명_기술요건_141125.pdf → (Appendix 2: Administrative Electronic Signature_Technical Requirements_141125.pdf



SecuwaySSL U_카달로그.pdf → SecuwaySSL U_Catalog.pdf





Command examples: ocrmypdf -l kor+eng “file.pdf”




SSH and Log-Based Evidence



The forensic evidence contained within the logs, specifically SSH authentication records and PAM outputs, provides clear technical confirmation of the operator’s tactics and target focus.



Several IP addresses stood out as sources of brute-force login attempts. These include 23.95.213[.]210 (a known VPS provider used in past credential-stuffing campaigns), 218.92.0[.]210 (allocated to a Chinese ISP), and 122.114.233[.]77 (Henan Mobile, China). These IPs were recorded during multiple failed login events, strongly suggesting automated password attacks against exposed SSH services. Their geographic distribution and known history in malicious infrastructure usage point to an external staging environment, possibly used for pivoting into Korean and Taiwanese systems.



Beyond brute force, the logs also contain evidence of authentication infrastructure reconnaissance. Multiple PAM and OCSP (Online Certificate Status Protocol) errors referenced South Korea’s national PKI authority, including domains like gva.gpki.go[.]kr and ivs.gpki.go[.]kr. These errors appear during scripted or automated access attempts, indicating a potential strategy of credential replay or certificate misuse against GPKI endpoints, an approach that aligns with Kim’s broader PKI-targeting operations.



Perhaps the most revealing detail was the presence of successful superuser logins labeled with the Korean term 최고 관리자 (“Super Administrator”). This suggests the actor was not just harvesting credentials but successfully leveraging them for privileged access, possibly through cracked accounts, reused credentials, or insider-sourced passwords. The presence of such accounts in conjunction with password rotation entries marked as 변경완료 (“change complete”) further implies active control over PAM-protected systems during the operational window captured in the dump.



Together, these logs demonstrate a methodical campaign combining external brute-force access, PKI service probing, and administrative credential takeover, a sequence tailored for persistent infiltration and lateral movement within sensitive government and enterprise networks.



Brute force mapping




Brute-force IPs: 23.95.213[.]210, 218.92.0[.]210, 122.114.233[.]77




IP AddressOriginRole / Threat Context218.92.0[.]210China Telecom (Jiangsu)Part of Chinanet backbone, likely proxy or scanning node23.95.213[.]210Colocrossing (US)Frequently used in brute-force and anonymized hosting for malware ops122.114.233[.]77Presumed PRC local ISPPossibly mobile/ISP-based proxy used to obfuscate lateral movement




PAM/OCSP errors targeting gva.gpki.go[.]kr, ivs.gpki.go[.]kr



Superuser login events under 최고 관리자 (Super Administrator)




Part II: Goals Analysis



Targeting South Korea: Identity, Infrastructure, and Credential Theft



The “Kim” operator’s campaign against South Korea was deliberate and strategic, aiming to infiltrate the nation’s digital trust infrastructure at multiple levels. A central focus was the Government Public Key Infrastructure (GPKI), where the attacker exfiltrated certificate files, including .key and .crt formats, some with plaintext passwords, and attempted repeated authentication against domains like gva.gpki.go[.]kr and ivs.gpki.go[.]kr. OCR tools were used to parse Korean technical documents detailing PKI and VPN architectures, demonstrating a sophisticated effort to understand and potentially subvert national identity frameworks. These efforts were not limited to reconnaissance; administrative password changes were logged, and phishing kits targeted military and diplomatic webmail, including clones of mofa.go[.]kr and credential harvesting through adversary-in-the-middle (AiTM) proxy setups.



Attempts at user account authentication



Servlet requests for KR domains



Beyond authentication systems, Kim targeted privileged accounts (oracle, unwadm, svradmin) and rotated credentials to maintain persistent administrative access, as evidenced by PAM and SSH logs showing elevated user activity under the title 최고 관리자 (“Super Administrator”). The actor also showed interest in bypassing VPN controls, parsing SecuwaySSL configurations for exploitation potential, and deployed custom Linux rootkits using syscall hooking to establish covert persistence on compromised machines. Taken together, the dump reveals a threat actor deeply invested in credential dominance, policy reconnaissance, and system-level infiltration, placing South Korea’s public sector identity systems, administrative infrastructure, and secure communications at the core of its long-term espionage objectives.



Taiwan Reconnaissance



Among the most notable aspects of the “Kim” leak is the operator’s deliberate focus on Taiwanese infrastructure. The attacker accessed a number of domains with clear affiliations to the island’s public and private sectors, including tw.systexcloud[.]com (linked to enterprise cloud solutions), mlogin.mdfapps[.]com (a mobile authentication or enterprise login portal), and the .git/ directory of caa.org[.]tw, which belongs to the Chinese Institute of Aeronautics, a government-adjacent research entity.



This last domain is especially telling. Accessing .git/ paths directly implies an attempt to enumerate internal source code repositories, a tactic often used to discover hardcoded secrets, API keys, deployment scripts, or developer credentials inadvertently exposed via misconfigured web servers. This behavior points to  more technical depth than simple phishing; it indicates supply chain reconnaissance and long-term infiltration planning.



Taiwanese target map



The associated IP addresses further reinforce this conclusion. All three, 163.29.3[.]119, 118.163.30[.]45, and 59.125.159[.]81, are registered to academic, government, or research backbone providers in Taiwan. These are not random scans; they reflect targeted probing of strategic digital assets.



Summary of Whois & Ownership Insights




118.163.30[.]45

Appears as part of the IP range used for the domain dtc-tpe.com[.]tw, linked to Taiwan’s HINET provider (118.163.30[.]46 )Site Indices page of HINET provider.





163.29.3[.]119

Falls within the 163.29.3[.]0/24 subnet identified with Taiwanese government or institutional use, notably in Taipei. This corresponds to B‑class subnets assigned to public/government entities IP地址 (繁體中文).





59.125.159[.]81

Belongs to the broader 59.125.159[.]0–59.125.159[.]254 block, commonly used by Taiwanese ISP operators such as Chunghwa Telecom in Taipei






Taken together, this Taiwan-focused activity reveals an expanded operational mandate. Whether the attacker is purely DPRK-aligned or operating within a DPRK–PRC fusion cell, the intent is clear: compromise administrative and developer infrastructure in Taiwan, likely in preparation for broader credential theft, espionage, or disruption campaigns.




Targeted domains: tw.systexcloud[.]com, caa.org[.]tw/.git/, mlogin.mdfapps[.]com



IPs linked to Taiwanese academic/government assets: 163.29.3[.]119, 118.163.30[.]45, 59.125.159[.]81



Git crawling suggests interest in developer secrets or exposed tokens




Hybrid Attribution Model



The “Kim” operator embodies the growing complexity of modern nation-state attribution, where cyber activities often blur traditional boundaries and merge capabilities across geopolitical spheres. This case reveals strong indicators of both North Korean origin and Chinese operational entanglement, presenting a textbook example of a hybrid APT model.







On one hand, the technical and linguistic evidence strongly supports a DPRK-native operator. Terminal environments, OCR parsing routines, and system artifacts consistently leverage Korean language and character sets. The operator’s activities reflect a deep understanding of Korean PKI systems, with targeted extraction of GPKI .key files and automation to parse sensitive Korean government PDF documentation. These are hallmarks of Kimsuky/APT43 operations, known for credential-focused espionage against South Korean institutions and diplomatic targets. The intent to infiltrate identity infrastructure is consistent with North Korea’s historical targeting priorities. Notably, the system time zone on Kim’s host machine was set to UTC+9 (Pyongyang Standard Time), reinforcing the theory that the actor maintains direct ties to the DPRK’s internal environment, even if operating remotely.



However, this actor’s digital footprint extends well into Chinese infrastructure. Browser and download logs reveal frequent interaction with platforms like gitee[.]com, baidu[.]com, and zhihu[.]com, highly popular within the PRC but unusual for DPRK operators who typically minimize exposure to foreign services. Moreover, session logs include simplified Chinese content and PRC browsing behaviors, suggesting that the actor may be physically operating within China or through Chinese-language systems. This aligns with longstanding intelligence on North Korean cyber operators stationed in Chinese border cities such as Shenyang and Dandong, where DPRK nationals often conduct cyber operations with tacit approval or logistical consent from Chinese authorities. These locations provide higher-speed internet, relaxed oversight, and convenient geopolitical proximity.



Browser History viewing Taiwanese and Chinese sites



The targeting of Taiwanese infrastructure further complicates attribution. Kimsuky has not historically prioritized Taiwan, yet in this case, the actor demonstrated direct reconnaissance of Taiwanese government and developer networks. While this overlaps with Chinese APT priorities, recent evidence from the “Kim” dump, including analysis of phishing kits and credential theft workflows, suggests this activity was likely performed by a DPRK actor exploring broader regional interests, possibly in alignment with Chinese strategic goals. Researchers have noted that Kimsuky operators have recently asked questions in phishing lures related to potential Chinese-Taiwanese conflicts, implying interest beyond the Korean peninsula.



Some tooling overlaps with PRC-linked APTs, particularly GitHub-based stagers and proxy-resolving modules, but these are not uncommon in the open-source malware ecosystem and may reflect opportunistic reuse rather than deliberate mimicry.



IMINT Analysis: Visual Tradecraft and Cultural Camouflage



A review of image artifacts linked to the “Kim” actor reveals a deliberate and calculated use of Chinese social and technological visual content as part of their operational persona. These images, extracted from browser history and uploads attributed to the actor, demonstrate both strategic alignment with DPRK priorities and active cultural camouflage within the PRC digital ecosystem.



Uploads of images by Kim found in browser history



Images downloaded from aixfan[.]com



The visual set includes promotional graphics for Honor smartphones, SoC chipset evolution charts, Weibo posts featuring vehicle registration certificates, meme-based sarcasm, and lifestyle imagery typical of Chinese internet users. Notably, the content is exclusively rendered in simplified Chinese, reinforcing prior assessments that the operator either resides within mainland China or maintains a working digital identity embedded in Chinese platforms. Devices and services referenced, such as Xiaomi phones, Zhihu, Weibo, and Baidu, suggest intimate familiarity with PRC user environments.



Operationally, this behavior achieves two goals. First, it enables the actor to blend in seamlessly with native PRC user activity, which complicates attribution and helps bypass platform moderation or behavioral anomaly detection. Second, the content itself may serve as bait or credibility scaffolding (e.g. A framework to give the illusion of trust to allow for easier compromise ) in phishing and social engineering campaigns, especially those targeting developers or technical users on Chinese-language platforms.



Some images, such as the detailed chipset timelines and VPN or device certification posts, suggest a continued interest in supply chain reconnaissance and endpoint profiling—both tradecraft hallmarks of Kimsuky and similar APT units. Simultaneously, meme humor, sarcastic overlays, and visual metaphors (e.g., the “Kaiju’s tail is showing” idiom) indicate the actor’s fluency in PRC netizen culture and possible mockery of operational security breaches—whether their own or others’.



Taken together, this IMINT corpus supports the broader attribution model: a DPRK-origin operator embedded, physically or virtually, within the PRC, leveraging local infrastructure and social platforms to facilitate long-term campaigns against South Korea, Taiwan, and other regional targets while maintaining cultural and technical deniability.



Attribution Scenarios:




Option A: DPRK Operator Embedded in PRC

Use of Korean language, OCR targeting of Korean documents, and focus on GPKI systems strongly suggest North Korean origin.



Use of PRC infrastructure (e.g., Baidu, Gitee) and simplified Chinese content implies the operator is physically located in China or benefits from access to Chinese internet infrastructure.





Option B: PRC Operator Emulating DPRK

Taiwan-focused reconnaissance aligns with PRC cyber priorities.



Use of open-source tooling and phishing methods shared with PRC APTs could indicate tactical emulation.






The preponderance of evidence supports the hypothesis that “Kim” is a North Korean cyber operator embedded in China or collaborating with PRC infrastructure providers. This operational model allows the DPRK to amplify its reach, mask attribution, and adopt regional targeting strategies beyond South Korea, particularly toward Taiwan. As this hybrid model matures, it reflects the strategic adaptation of DPRK-aligned threat actors who exploit the permissive digital environment of Chinese networks to evade detection and expand their operational playbook.



Targeting Profiles



The “Kim” leak provides one of the clearest windows to date into the role-specific targeting preferences of the operator, revealing a deliberate focus on system administrators, credential issuers, and backend developers, particularly in South Korea and Taiwan.



In South Korea, the operator’s interest centers around PKI administrators and infrastructure engineers. The recovered OCR commands were used to extract technical details from PDF documents outlining Korea’s digital signature protocols, such as identity verification, certificate validation, and encrypted communications, components that form the backbone of Korea’s secure authentication systems. The goal appears to be not only credential theft but full understanding and potential replication of government-trusted PKI procedures. This level of targeting suggests a strategic intent to penetrate deeply trusted systems, potentially for use in later spoofing or identity masquerading operations.



PKI attack targets



In Taiwan, the operator shifted focus to developer infrastructure and cloud access portals. Specific domains accessed, like caa.org[.]tw/.git/, indicate attempts to enumerate internal repositories, most likely to discover hardcoded secrets, authentication tokens, or deployment keys. This is a classic supply chain targeting method, aiming to access downstream systems via compromised developer credentials or misconfigured services.



Additional activity pointed to interaction with cloud service login panels such as tw.systexcloud[.]com and mlogin.mdfapps[.]com. These suggest an attempt to breach centralized authentication systems or identity providers, granting the actor broader access into enterprise or government networks with a single credential set.



Taken together, these targeting profiles reflect a clear emphasis on identity providers, backend engineers, and those with access to system-level secrets. This reinforces the broader theme of the dump: persistent, credential-first intrusion strategies, augmented by reconnaissance of authentication standards, key management policies, and endpoint development infrastructure.



South Korean:




PKI admins, infrastructure engineers



OCR focus on Korean identity standards




Taiwanese:




Developer endpoints and internal .git/ repos



Access to cloud panels and login gateways




Final Assessment



The “Kim” leak represents one of the most comprehensive and technically intimate disclosures ever associated with Kimsuky (APT43) or its adjacent operators. It not only reaffirms known tactics, credential theft, phishing, and PKI compromise, but exposes the inner workings of the operator’s environment, tradecraft, and operational intent in ways rarely observed outside of active forensic investigations.



At the core of the leak is a technically competent actor, well-versed in low-level shellcode development, Linux-based persistence mechanisms, and certificate infrastructure abuse. Their use of NASM, API hashing, and rootkit deployment points to custom malware authorship. Furthermore, the presence of parsed government-issued Korean PDFs, combined with OCR automation, shows not just opportunistic data collection but a concerted effort to model, mimic, or break state-level identity systems, particularly South Korea’s GPKI.



The operator’s cultural and linguistic fluency in Korean, and their targeting of administrative and privileged systems across South Korean institutions, support a high-confidence attribution to a DPRK-native threat actor. However, the extensive use of Chinese platforms like gitee[.]com, Baidu, and Zhihu, and Chinese infrastructure for both malware hosting and browsing activity reveals a geographical pivot or collaboration: a hybrid APT footprint rooted in DPRK tradecraft but operating from or with Chinese support.



Most notably, this leak uncovers a geographical expansion of operational interest; the actor is no longer solely focused on the Korean peninsula. The targeting of Taiwanese developer portals, government research IPs, and .git/ repositories shows a broadened agenda that likely maps to both espionage and supply chain infiltration priorities. This places Taiwan, like South Korea, at the forefront of North Korean cyber interest, whether for intelligence gathering, credential hijacking, or as staging points for more complex campaigns.



The threat uncovered here is not merely malware or phishing; it is an infrastructure-centric, credential-first APT campaign that blends highly manual operations (e.g., hand-compiled shellcode, direct OCR of sensitive PDFs) with modern deception tactics such as AiTM phishing and TLS proxy abuse.



Organizations in Taiwan and South Korea, particularly those managing identity, certificate, and cloud access infrastructure, should consider themselves under persistent, credential-focused surveillance. Defensive strategies must prioritize detection of behavioral anomalies (e.g., use of OCR tools, GPKI access attempts), outbound communications with spoofed Korean domains, and the appearance of low-level toolchains like NASM or proxyres-based scanning utilities within developer or admin environments.



In short: the “Kim” actor embodies the evolution of nation-state cyber threats—a fusion of old-school persistence, credential abuse, and modern multi-jurisdictional staging. The threat is long-term, embedded, and adaptive.



Part III: Threat Intelligence Report



TLP WHITE:



Targeting Summary



The analysis of the “Kim” operator dump reveals a highly focused credential-theft and infrastructure-access campaign targeting high-value assets in both South Korea and Taiwan. Victims were selected based on their proximity to trusted authentication systems, administrative control panels, and development environments.



CategoryDetailsRegionsSouth Korea, TaiwanTargetsGovernment, Telecom, Enterprise ITAccountssvradmin, oracle, app_adm01, unwadm, shkim88, jaejung91Domainstw.systexcloud[.]com, nid-security[.]com, spo.go[.]kr, caa.org[.]tw/.git/



Indicators of Compromise (IOCs)



Domains




Phishing: nid-security[.]com, html-load[.]com, wuzak[.]com, koala-app[.]com, webcloud-notice[.]com



Spoofed portals: dcc.mil[.]kr, spo.go[.]kr, mofa.go[.]kr



Pastebin raw links: Used for payload staging and malware delivery




IP Addresses




External Targets (Taiwan):

163.29.3[.]119     National Center for High-performance Computing



118.163.30[.]45   Taiwanese government subnet



59.125.159[.]81   Chunghwa Telecom





Brute Forcing / Infrastructure Origins:

23.95.213[.]210   VPS provider with malicious history



218.92.0[.]210     China Unicom



122.114.233[.]77  Henan Mobile, PRC






Internal Host IPs (Operator Environment)




192.168.130[.]117



192.168.150[.]117



192.168.0[.]39




Operator Environment: Internal Host IP Narrative



The presence of internal IP addresses such as 192.168.130[.]117, 192.168.150[.]117, and 192.168.0[.]39 within the dump offers valuable insight into the attacker’s local infrastructure, an often-overlooked element in threat intelligence analysis. These addresses fall within private, non-routable RFC1918 address space, commonly assigned by consumer off-the-shelf (COTS) routers and small office/home office (SOHO) network gear.



The use of the 192.168.0[.]0/16 subnet, particularly 192.168.0.x and 192.168.150.x, strongly suggests that the actor was operating from a residential or low-profile environment, not a formal nation-state facility or hardened infrastructure. This supports existing assessments that North Korean operators, particularly those affiliated with Kimsuky, often work remotely from locations in third countries such as China or Southeast Asia, where they can maintain inconspicuous, low-cost setups while accessing global infrastructure.



Moreover, the distinction between multiple internal subnets (130.x, 150.x, and 0.x) may indicate segmentation of test environments or multiple virtual machines running within a single NATed network. This aligns with the forensic evidence of iterative development and testing workflows seen in the .bash_history files, where malware stagers, rootkits, and API obfuscation utilities were compiled, cleaned, and rerun repeatedly.



Together, these IPs reveal an operator likely working from a clandestine, residential base of operations, with modest hardware and commercial-grade routers. This operational setup is consistent with known DPRK remote IT workers and cyber operators who avoid attribution by blending into civilian infrastructure. It also suggests the attacker may be physically located outside of North Korea, possibly embedded in a friendly or complicit environment, strengthening the case for China-based activity by DPRK nationals.



MITRE ATT&CK Mapping



PhaseTechnique(s)Initial AccessT1566.002 ,  Adversary-in-the-Middle (AiTM) PhishingExecutionT1059.005 ,  Native API ShellcodeT1059.003 ,  Bash/Shell ScriptsCredential AccessT1555 ,  Credential Store DumpingT1557.003 ,  Session HijackingPersistenceT1176 ,  Rootkit (via khook syscall manipulation)Defense EvasionT1562.001 ,  Disable Security ToolsT1552 ,  Unsecured Credential FilesDiscoveryT1592 ,  Technical Information DiscoveryT1590 ,  Network InformationExfiltrationT1041 ,  Exfiltration over C2 ChannelT1567.002 ,  Exfil via Cloud Services



Tooling and Capabilities



The actor’s toolkit spans multiple disciplines, blending malware development, system reconnaissance, phishing, and proxy evasion:




NASM-based shellcode loaders: Compiled manually for Windows execution.



Win32 API hashing: Obfuscated imports via hashstring.py to evade detection.



GitHub/Gitee abuse: Tooling hosted or cloned from public developer platforms.



OCR exploitation: Used ocrmypdf to parse Korean PDF specs related to digital certificates and VPN appliances.



Rootkit deployment: Hidden persistence paths including /usr/lib64/tracker-fs and /proc/acpi/pcicard.



Proxy config extraction: Investigated PAC URLs using proxyres-based recon.




Attribution Confidence Assessment



Attribution CandidateConfidence LevelDPRK-aligned (Kimsuky)High, Native Korean targeting, GPKI focus, OCR behaviorChina-blended infrastructureModerate, PRC hosting, Gitee usage, Taiwan focusSolely PRC ActorLow-to-Moderate, Tooling overlap but weak linguistic match



Assessment: The actor appears to be a DPRK-based APT operator working from within or in partnership with Chinese infrastructure, representing a hybrid attribution model.



Defensive Recommendations



AreaRecommendationPKI SecurityMonitor usage of .key, .sig, .crt artifacts; enforce HSM or 2FA for key usePhishing DefenseBlock domains identified in IoCs; validate TLS fingerprints and referrer headersEndpoint HardeningDetect use of nasm, make, and OCR tools; monitor /usr/lib*/tracker-* pathsNetwork TelemetryAlert on .git/ directory access from external IPs; monitor outbound to Pastebin/GitHubTaiwan FocusEstablish watchlists for .tw domains targeted by PRC-originating IPsAdmin AccountsReview usage logs for svradmin, oracle, app_adm01, and ensure rotation policies



APPENDIX A



Overlap or Confusion with Chinese Threat Actors



There is notable evidence of operational blur between Kimsuky and Chinese APTs in the context of Taiwan. The 2025 “Kim” data breach revealed an attacker targeting Taiwan whose tools and phishing kits matched Kimsuky’s, yet whose personal indicators (language, browsing habits) suggested a Chinese national. Researchers concluded this actor was likely a Chinese hacker either mimicking Kimsuky tactics or collaborating with them.. In fact, the leaked files on DDoS Secrets hint that Kimsuky has “openly cooperated with other Chinese APTs and shared their tools and techniques”. This overlap can cause attribution confusion – a Taiwan-focused operation might initially be blamed on China but could involve Kimsuky elements, or vice versa. So far, consensus is that North Korean and Chinese cyber operations remain separate, but cases like “Kim” show how a DPRK-aligned actor can operate against Taiwan using TTPs common to Chinese groups, muddying the waters of attribution.



File List from dump:















Master Evidence Inventory:



File NameLanguageContent SummaryCategoryRelevance.bash_historyMixed (EN/KR)Operator shell history commandsSystem/LogShows rootkit compilation, file ops, network testsuser-bash_historyMixed (EN/KR)User-level shell commandsSystem/LogDevelopment and test activityroot-bash_historyMixed (EN/KR)Root-level shell commandsSystem/LogPrivilege-level activity, implant deploymentauth.log.2EN/KRAuthentication logs (PAM/SSH)System/LogCredential changes marked 변경완료, brute force IPs20190315.logENSystem log fileSystem/LogAuth and system access eventschrome-timeline.txtENBrowser activity timelineBrowserVisited domains extractionchromehistory.txtENBrowser history exportBrowserURLs visitedhistory.sqliteENEmpty DB fileBrowserNo useful dataMedia HistoryENEmpty SQLite DBBrowserNo playback activityHistoryENEmpty Brave/Chromium DBBrowserNo visited URLsWeb DataENAutofill/search DBBrowserSearch engines used (Google, DuckDuckGo, Qwant, Startpage, Ecosia)Visited LinksBinaryLevelDB/binary structureBrowserCould not extract URLsCookiesENSQLite DB with cookiesBrowserGoogle cookies foundrequest_log.txt.20250220ENCaptured phishing sessionPhishingSpoofed spo.go.kr, base64 credential logging技术说明书 – 22.docxZHChinese rootkit stealth manualRootkitKernel hiding, binary embedding1.ko 图文编译 .docZHChinese compilation guideRootkitRootkit build process1. build ko .txtZHBuild notesRootkitImplant compilation instructions0. 使用.txtZHUsage notesRootkitImplant usage and commandsre 正向工具修改建议 1.0.txtZHModification notesRootkitReverse tool modification suggestions1111.txtZHRootkit/tool snippetRootkitPart of implant notesclientBinaryRootkit client binaryRootkitController for implant communicationSSA_AO_AD_WT_002_웹보안 프로토콜설계서_Ver1.0_.docKRGPKI protocol design docPKIKorean web PKI standards행자부 웹보안API 인수인계.docKRGPKI API deployment manualPKIDeployment and cert API internalsHIRA-IR-T02_의약품처방조제_ComLibrary_통신전문.docKRMedical ComLibrary XML specHealthcarePrescription system communication(별지2)행정전자서명_기술요건_141125.pdfKRPKI requirements PDFPKIOCR targetSecuwaySSL U_카달로그.pdfKRVPN catalogPKI/VPNOCR targetphrack-apt-down-the-north-korea-files.pdfENPhrack articleReferenceBackground on Kimsuky dumpMuddled Libra Threat Assessment.pdfENThreat intel reportReferenceComparative threat actor studyLeaked North Korean Linux Stealth Rootkit Analysis.pdfENRootkit analysisReferenceDetailed implant studyInside the Kimsuky Leak.docx (various)ENThreat report draftsReportWorking versionsaccount (2).txtENDB export (DBsafer, TrustedOrange)InfraAccounts and DB changesresult.txtKRCert-related parsed dataInfraIncluded GPKI .key/.sigenglish_wikipedia.txtENWikipedia dumpReferenceUnrelated baselinebookmarks-2021-01-04.jsonlz4ENFirefox bookmarks (compressed)BrowserNeeds decompressionScreenshot translationsZHChinese text (rootkit marketing blurb)RootkitKernel hiding tool description




                            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[IRHash: Efficient Multi-Language Compiler Caching by IR-Level Hashing]]></title>
            <link>https://www.usenix.org/conference/atc25/presentation/landsberg</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45136367</guid>
        </item>
        <item>
            <title><![CDATA[SQLite's File Format]]></title>
            <link>https://www.sqlite.org/fileformat.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45132488</guid>
            <description><![CDATA[Database File Format]]></description>
            <content:encoded><![CDATA[


Database File Format


Table Of Contents









This document describes and defines the on-disk database file
format used by all releases of SQLite since 
version 3.0.0 (2004-06-18).

1. The Database File

The complete state of an SQLite database is usually
contained in a single file on disk called the "main database file".

During a transaction, SQLite stores additional information 
in a second file called the "rollback journal", or if SQLite is in
WAL mode, a write-ahead log file.



1.1. Hot Journals
If the application or
host computer crashes before the transaction completes, then the rollback
journal or write-ahead log contains information needed 
to restore the main database file to a consistent state.  When a rollback 
journal or write-ahead log contains information necessary for recovering 
the state of the database, they are called a "hot journal" or "hot WAL file".
Hot journals and WAL files are only a factor during error recovery
scenarios and so are uncommon, but they are part of the state of an SQLite
database and so cannot be ignored.  This document defines the format
of a rollback journal and the write-ahead log file, but the focus is
on the main database file.

1.2. Pages

The main database file consists of one or more pages.  The size of a
page is a power of two between 512 and 65536 inclusive.  All pages within
the same database are the same size.  The page size for a database file
is determined by the 2-byte integer located at an offset of
16 bytes from the beginning of the database file.

Pages are numbered beginning with 1.  The maximum page number is
4294967294 (232 - 2).  The minimum size
SQLite database is a single 512-byte page.
The maximum size database would be 4294967294 pages at 65536 bytes per
page or 281,474,976,579,584 bytes (about 281 terabytes).  Usually SQLite will
hit the maximum file size limit of the underlying filesystem or disk
hardware long before it hits its own internal size limit.

In common use, SQLite databases tend to range in size from a few kilobytes
to a few gigabytes, though terabyte-size SQLite databases are known to exist
in production.

At any point in time, every page in the main database has a single
use which is one of the following:

A b-tree page

A table b-tree interior page
A table b-tree leaf page
An index b-tree interior page
An index b-tree leaf page

A freelist page

A freelist trunk page
A freelist leaf page

A payload overflow page
A pointer map page
The lock-byte page



All reads from and writes to the main database file begin at a page
boundary and all writes are an integer number of pages in size.  Reads
are also usually an integer number of pages in size, with the one exception
that when the database is first opened, the first 100 bytes of the
database file (the database file header) are read as a sub-page size unit.



The first 100 bytes of the database file comprise the database file 
header.  The database file header is divided into fields as shown by
the table below.  All multibyte fields in the database file header are
stored with the most significant byte first (big-endian).


Database Header Format

OffsetSizeDescription
016
The header string: "SQLite format 3\000"
162
The database page size in bytes.  Must be a power of two between 512
and 32768 inclusive, or the value 1 representing a page size of 65536.
181
File format write version.  1 for legacy; 2 for WAL.
191
File format read version.  1 for legacy; 2 for WAL.
201
Bytes of unused "reserved" space at the end of each page.  Usually 0.
211
Maximum embedded payload fraction.  Must be 64.
221
Minimum embedded payload fraction.  Must be 32.
231
Leaf payload fraction.  Must be 32.
244
File change counter.
284
Size of the database file in pages.  The "in-header database size".
324
Page number of the first freelist trunk page.
364
Total number of freelist pages.
404
The schema cookie.
444
The schema format number.  Supported schema formats are 1, 2, 3, and 4.
484
Default page cache size.
524
The page number of the largest root b-tree page when in auto-vacuum or
incremental-vacuum modes, or zero otherwise.
564
The database text encoding.  A value of 1 means UTF-8.  A value of 2
means UTF-16le.  A value of 3 means UTF-16be.
604
The "user version" as read and set by the user_version pragma.
644
True (non-zero) for incremental-vacuum mode.  False (zero) otherwise.
684
The "Application ID" set by PRAGMA application_id.
7220
Reserved for expansion.  Must be zero.
924
The version-valid-for number.
964
SQLITE_VERSION_NUMBER




Every valid SQLite database file begins with the following 16 bytes 
(in hex): 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00.  This byte sequence
corresponds to the UTF-8 string "SQLite format 3" including the nul
terminator character at the end.

1.3.2. Page Size

The two-byte value beginning at offset 16 determines the page size of 
the database.  For SQLite versions 3.7.0.1 (2010-08-04)
and earlier, this value is 
interpreted as a big-endian integer and must be a power of two between
512 and 32768, inclusive.  Beginning with SQLite version 3.7.1
(2010-08-23), a page
size of 65536 bytes is supported.  The value 65536 will not fit in a
two-byte integer, so to specify a 65536-byte page size, the value
at offset 16 is 0x00 0x01.
This value can be interpreted as a big-endian
1 and thought of as a magic number to represent the 65536 page size.
Or one can view the two-byte field as a little endian number and say
that it represents the page size divided by 256.  These two 
interpretations of the page-size field are equivalent.

1.3.3. File format version numbers

The file format write version and file format read version at offsets
18 and 19 are intended to allow for enhancements of the file format
in future versions of SQLite.  In current versions of SQLite, both of
these values are 1 for rollback journalling modes and 2 for WAL
journalling mode.  If a version of SQLite coded to the current
file format specification encounters a database file where the read
version is 1 or 2 but the write version is greater than 2, then the database
file must be treated as read-only.  If a database file with a read version
greater than 2 is encountered, then that database cannot be read or written.

1.3.4. Reserved bytes per page

SQLite has the ability to set aside a small number of extra bytes at
the end of every page for use by extensions.  These extra bytes are
used, for example, by the SQLite Encryption Extension to store a nonce
and/or cryptographic checksum associated with each page.  The 
"reserved space" size in the 1-byte integer at offset 20 is the number
of bytes of space at the end of each page to reserve for extensions.
This value is usually 0.  The value can be odd.

The "usable size" of a database page is the page size specified by the
2-byte integer at offset 16 in the header less the "reserved" space size
recorded in the 1-byte integer at offset 20 in the header.  The usable
size of a page might be an odd number.  However, the usable size is not
allowed to be less than 480.  In other words, if the page size is 512,
then the reserved space size cannot exceed 32.

1.3.5. Payload fractions

The maximum and minimum embedded payload fractions and the leaf
payload fraction values must be 64, 32, and 32.  These values were
originally intended to be tunable parameters that could be used to
modify the storage format of the b-tree algorithm.  However, that
functionality is not supported and there are no current plans to add
support in the future.  Hence, these three bytes are fixed at the
values specified.

1.3.6. File change counter

The file change counter is a 4-byte big-endian integer at
offset 24 that is incremented whenever the database file is unlocked
after having been modified.
When two or more processes are reading the same database file, each 
process can detect database changes from other processes by monitoring 
the change counter.
A process will normally want to flush its database page cache when
another process modified the database, since the cache has become stale.
The file change counter facilitates this.

In WAL mode, changes to the database are detected using the wal-index
and so the change counter is not needed.  Hence, the change counter might
not be incremented on each transaction in WAL mode.



The 4-byte big-endian integer at offset 28 into the header 
stores the size of the database file in pages.  If this in-header
datasize size is not valid (see the next paragraph), then the database 
size is computed by looking
at the actual size of the database file. Older versions of SQLite
ignored the in-header database size and used the actual file size
exclusively.  Newer versions of SQLite use the in-header database
size if it is available but fall back to the actual file size if
the in-header database size is not valid.

The in-header database size is only considered to be valid if
it is non-zero and if the 4-byte change counter at offset 24
exactly matches the 4-byte version-valid-for number at offset 92.
The in-header database size is always valid 
when the database is only modified using recent versions of SQLite,
versions 3.7.0 (2010-07-21) and later.
If a legacy version of SQLite writes to the database, it will not
know to update the in-header database size and so the in-header
database size could be incorrect.  But legacy versions of SQLite
will also leave the version-valid-for number at offset 92 unchanged
so it will not match the change-counter.  Hence, invalid in-header
database sizes can be detected (and ignored) by observing when
the change-counter does not match the version-valid-for number.

1.3.8. Free page list

Unused pages in the database file are stored on a freelist.  The
4-byte big-endian integer at offset 32 stores the page number of
the first page of the freelist, or zero if the freelist is empty.
The 4-byte big-endian integer at offset 36 stores the total 
number of pages on the freelist.

1.3.9. Schema cookie

The schema cookie is a 4-byte big-endian integer at offset 40
that is incremented whenever the database schema changes.  A 
prepared statement is compiled against a specific version of the
database schema.  When the database schema changes, the statement
must be reprepared.  When a prepared statement runs, it first checks
the schema cookie to ensure the value is the same as when the statement
was prepared and if the schema cookie has changed, the statement either
automatically reprepares and reruns or it aborts with an SQLITE_SCHEMA 
error.

1.3.10. Schema format number

The schema format number is a 4-byte big-endian integer at offset 44.
The schema format number is similar to the file format read and write
version numbers at offsets 18 and 19 except that the schema format number
refers to the high-level SQL formatting rather than the low-level b-tree
formatting.  Four schema format numbers are currently defined:


Format 1 is understood by all versions of SQLite back to
version 3.0.0 (2004-06-18).
Format 2 adds the ability of rows within the same table
to have a varying number of columns, in order to support the
ALTER TABLE ... ADD COLUMN functionality.  Support for
reading and writing format 2 was added in SQLite 
version 3.1.3 on 2005-02-20.
Format 3 adds the ability of extra columns added by
ALTER TABLE ... ADD COLUMN to have non-NULL default
values.  This capability was added in SQLite version 3.1.4
on 2005-03-11.
Format 4 causes SQLite to respect the
DESC keyword on
index declarations.  (The DESC keyword is ignored in indexes for 
formats 1, 2, and 3.)
Format 4 also adds two new boolean record type values (serial types
8 and 9).  Support for format 4 was added in SQLite 3.3.0 on
2006-01-10.


New database files created by SQLite use format 4 by default.
The SQLITE_DBCONFIG_LEGACY_FILE_FORMAT option for the
sqlite3_db_config() C-language interface can be used to cause SQLite
to create new database files using format 1. The format version number
can be made to default to 1 instead of 4 by setting
SQLITE_DEFAULT_FILE_FORMAT=1 at compile-time.


If the database is completely empty, if it has no schema, then the
schema format number can be zero.

1.3.11. Suggested cache size

The 4-byte big-endian signed integer at offset 48 is the suggested
cache size in pages for the database file.  The value is a suggestion
only and SQLite is under no obligation to honor it.  The absolute value
of the integer is used as the suggested size.  The suggested cache size
can be set using the default_cache_size pragma.

1.3.12. Incremental vacuum settings

The two 4-byte big-endian integers at offsets 52 and 64 are used
to manage the auto_vacuum and incremental_vacuum modes.  If
the integer at offset 52 is zero then pointer-map (ptrmap) pages are
omitted from the database file and neither auto_vacuum nor
incremental_vacuum are supported.  If the integer at offset 52 is
non-zero then it is the page number of the largest root page in the
database file, the database file will contain ptrmap pages, and the
mode must be either auto_vacuum or incremental_vacuum.  In this latter
case, the integer at offset 64 is true for incremental_vacuum and
false for auto_vacuum.  If the integer at offset 52 is zero then
the integer at offset 64 must also be zero.

1.3.13. Text encoding

The 4-byte big-endian integer at offset 56 determines the encoding
used for all text strings stored in the database.  
A value of 1 means UTF-8.
A value of 2 means UTF-16le.
A value of 3 means UTF-16be.
No other values are allowed.
The sqlite3.h header file defines C-preprocessor macros SQLITE_UTF8 as 1,
SQLITE_UTF16LE as 2, and SQLITE_UTF16BE as 3, to use in place of
the numeric codes for the text encoding.

1.3.14. User version number

The 4-byte big-endian integer at offset 60 is the user version which
is set and queried by the user_version pragma.  The user version is
not used by SQLite.

1.3.15. Application ID

The 4-byte big-endian integer at offset 68 is an "Application ID" that
can be set by the PRAGMA application_id command in order to identify the
database as belonging to or associated with a particular application.
The application ID is intended for database files used as an
application file-format.  The application ID can be used by utilities 
such as file(1) to determine the specific
file type rather than just reporting "SQLite3 Database".  A list of
assigned application IDs can be seen by consulting the
magic.txt
file in the SQLite source repository.

1.3.16. Write library version number and version-valid-for number

The 4-byte big-endian integer at offset 96 stores the 
SQLITE_VERSION_NUMBER value for the SQLite library that most
recently modified the database file.  The 4-byte big-endian integer at
offset 92 is the value of the change counter when the version number
was stored.  The integer at offset 92 indicates which transaction
the version number is valid for and is sometimes called the
"version-valid-for number".



All other bytes of the database file header are reserved for
future expansion and must be set to zero.

1.4. The Lock-Byte Page

The lock-byte page is the single page of the database file
that contains the bytes at offsets between 1073741824 and 1073742335,
inclusive.  A database file that is less than or equal to 1073741824 bytes 
in size contains no lock-byte page.  A database file larger than
1073741824 contains exactly one lock-byte page.


The lock-byte page is set aside for use by the operating-system specific
VFS implementation in implementing the database file locking primitives.
SQLite does not use the lock-byte page.  The SQLite core 
will never read or write the lock-byte page,
though operating-system specific VFS 
implementations may choose to read or write bytes on the lock-byte 
page according to the 
needs and proclivities of the underlying system.  The unix and win32
VFS implementations that come built into SQLite do not write to the
lock-byte page, but third-party VFS implementations for
other operating systems might.

The lock-byte page arose from the need to support Win95 which was the
predominant operating system when this file format was designed and which 
only supported mandatory file locking.  All modern operating systems that
we know of support advisory file locking, and so the lock-byte page is
not really needed any more, but is retained for backwards compatibility.

1.5. The Freelist

A database file might contain one or more pages that are not in
active use.  Unused pages can come about, for example, when information
is deleted from the database.  Unused pages are stored on the freelist
and are reused when additional pages are required.

The freelist is organized as a linked list of freelist trunk pages
with each trunk page containing page numbers for zero or more freelist
leaf pages.

A freelist trunk page consists of an array of 4-byte big-endian integers.
The size of the array is as many integers as will fit in the usable space
of a page.  The minimum usable space is 480 bytes so the array will always
be at least 120 entries in length.  The first integer on a freelist trunk
page is the page number of the next freelist trunk page in the list or zero 
if this is the last freelist trunk page.  The second integer on a freelist
trunk page is the number of leaf page pointers to follow.  
Call the second integer on a freelist trunk page L.
If L is greater than zero then integers with array indexes between 2 and
L+1 inclusive contain page numbers for freelist leaf pages.

Freelist leaf pages contain no information.  SQLite avoids reading or
writing freelist leaf pages in order to reduce disk I/O.

A bug in SQLite versions prior to 3.6.0 (2008-07-16)
caused the database to be
reported as corrupt if any of the last 6 entries in the freelist trunk page 
array contained non-zero values.  Newer versions of SQLite do not have
this problem.  However, newer versions of SQLite still avoid using the 
last six entries in the freelist trunk page array in order that database
files created by newer versions of SQLite can be read by older versions
of SQLite.

The number of freelist pages is stored as a 4-byte big-endian integer
in the database header at an offset of 36 from the beginning of the file.
The database header also stores the page number of the first freelist trunk
page as a 4-byte big-endian integer at an offset of 32 from the beginning
of the file.

1.6. B-tree Pages

The b-tree algorithm provides key/data storage with unique and
ordered keys on page-oriented storage devices.
For background information on b-trees, see
Knuth, The Art Of Computer Programming, Volume 3 "Sorting
and Searching", pages 471-479.  Two variants of b-trees are used by
SQLite.  "Table b-trees" use a 64-bit signed integer key and store
all data in the leaves.  "Index b-trees" use arbitrary keys and store no
data at all.

A b-tree page is either an interior page or a leaf page.
A leaf page contains keys and in the case of a table b-tree each
key has associated data.  An interior page contains
K keys together with K+1 pointers to child b-tree pages.
A "pointer" in an interior b-tree page is just the 32-bit 
unsigned integer page number of the child page.The number of keys on an interior b-tree page, K,
is almost always at least 2 and is usually much more than 2.
The only exception is when page 1 is an interior b-tree page.
Page 1 has 100 fewer bytes of storage space available,
due to the presence of the database header at the beginning of that page,
and so sometimes (rarely) if page 1 is an interior b-tree page, it can
end up holding just a single key.  In all other cases, K is 2 or more.
The upper bound on K is as many keys as will fit on the page. Large keys
on index b-trees are split up into overflow pages so that no single key
uses more than one fourth of the available storage space on the page
and hence every internal page is able to store at least 4 keys.
The integer keys of table b-trees are never large enough to
require overflow, so key overflow only occurs on index b-trees.

Define the depth
of a leaf b-tree to be 1 and the depth of any interior b-tree to be one
more than the maximum depth of any of its children.  In a well-formed
database, all children of an interior b-tree have the same depth.

In an interior b-tree page, the pointers and keys logically alternate 
with a pointer on both ends. (The previous sentence is to be understood
conceptually - the actual layout of the keys and
pointers within the page is more complicated and will be described in
the sequel.)  All keys within the same page are unique and are logically
organized in ascending order from left to right.  (Again, this ordering
is logical, not physical.  The actual location of keys within the page
is arbitrary.) For any key X, pointers to the left
of a X refer to b-tree pages on which all keys are less than or equal to X.
Pointers to the right of X refer to pages where all keys are 
greater than X.

Within an interior b-tree page, each key and the pointer to its
immediate left are combined into a structure called a "cell".  The
right-most pointer is held separately.  A leaf b-tree page has no
pointers, but it still uses the cell structure to hold keys for
index b-trees or keys and content for table b-trees.  Data is also
contained in the cell.


Every b-tree page has at most one parent b-tree page.
A b-tree page without a parent is called a root page.  A root b-tree page
together with the closure of its children form a complete b-tree.
It is possible (and in fact rather common) to have a complete b-tree
that consists of a single page that is both a leaf and the root.
Because there are pointers from parents to children, every page of a
complete b-tree can be located if only the root page is known.  Hence,
b-trees are identified by their root page number.

A b-tree page is either a table b-tree page or an index b-tree page.
All pages within each complete b-tree are of the same type: either table
or index.  There is one table b-tree in the database file
for each rowid table in the database schema, including system tables
such as sqlite_schema.  There is one index b-tree
in the database file for each index in the schema, including implied indexes
created by uniqueness constraints.  There are no b-trees associated with
virtual tables.  Specific virtual table implementations might make use
of shadow tables for storage, but those shadow tables will have separate
entries in the database schema.  WITHOUT ROWID tables use index b-trees
rather than table b-trees, so there is one
index b-tree in the database file for each WITHOUT ROWID table.
The b-tree corresponding to the sqlite_schema table is always a table
b-tree and always has a root page of 1.
The sqlite_schema table contains the root page number for every other 
table and index in the database file.

Each entry in a table b-tree consists of a 64-bit signed integer key
and up to 2147483647 bytes of arbitrary data.  (The key of a table b-tree
corresponds to the rowid of the SQL table that the b-tree implements.)
Interior table b-trees hold only keys and pointers to children.
All data is contained in the table b-tree leaves.

Each entry in an index b-tree consists of an arbitrary key of up
to 2147483647 bytes in length and no data.

Define the "payload" of a cell to be the arbitrary length section
of the cell.  For an index b-tree, the key is always arbitrary in length
and hence the payload is the key.  There are no arbitrary length elements
in the cells of interior table b-tree pages and so those cells have no
payload.  Table b-tree leaf pages contain arbitrary length content and
so for cells on those pages the payload is the content.
When the size of payload for a cell exceeds a certain threshold (to
be defined later) then only the first few bytes of the payload
are stored on the b-tree page and the balance is stored in a linked list
of content overflow pages.

A b-tree page is divided into regions in the following order:


The 100-byte database file header (found on page 1 only)
The 8 or 12 byte b-tree page header
The cell pointer array
Unallocated space
The cell content area
The reserved region



The 100-byte database file header is found only on page 1, which is
always a table b-tree page.  All other b-tree pages in the database file
omit this 100-byte header.

The reserved region is an area of unused space at the end of every
page (except the locking page) that extensions can use to hold per-page
information.  The size of the reserved region is determined by the one-byte
unsigned integer found at an offset of 20 into the database file header.
The size of the reserved region is usually zero.

The b-tree page header is 8 bytes in size for leaf pages and 12
bytes for interior pages.  All multibyte values in the page header
are big-endian.
The b-tree page header is composed of the following fields:


B-tree Page Header Format

OffsetSizeDescription
01
The one-byte flag at offset 0 indicating the b-tree page type.
A value of 2 (0x02) means the page is an interior index b-tree page.
A value of 5 (0x05) means the page is an interior table b-tree page.
A value of 10 (0x0a) means the page is a leaf index b-tree page.
A value of 13 (0x0d) means the page is a leaf table b-tree page.
Any other value for the b-tree page type is an error.
12
The two-byte integer at offset 1 gives the start of the
first freeblock on the page, or is zero if there are no freeblocks.
32
The two-byte integer at offset 3 gives the number of cells on the page.
52
The two-byte integer at offset 5 designates the start of the cell content
area.  A zero value for this integer is interpreted as 65536.
71
The one-byte integer at offset 7 gives the number of fragmented free
bytes within the cell content area.
84
The four-byte page number at offset 8 is the right-most pointer.  This
value appears in the header of interior b-tree pages only and is omitted from
all other pages.


The cell pointer array of a b-tree page immediately follows the b-tree
page header.  Let K be the number of cells on the btree.  The cell pointer
array consists of K 2-byte integer offsets to the cell contents.  The
cell pointers are arranged in key order with left-most cell (the cell with the
smallest key) first and the right-most cell (the cell with the largest
key) last.

Cell content is stored in the cell content region of the b-tree page.
SQLite strives to place cells as far toward the end of the b-tree page as
it can, in order to leave space for future growth of the cell pointer array.
The area in between the last cell pointer array entry and the beginning of
the first cell is the unallocated region.


If a page contains no cells (which is only possible for a root page
of a table that contains no rows) then the offset to the
cell content area will equal the page size minus the bytes of reserved space.
If the database uses a 65536-byte page size and the reserved space is zero
(the usual value for reserved space) then the cell content offset of an
empty page wants to be 65536.  
However, that integer is too large to be stored in a
2-byte unsigned integer, so a value of 0 is used in its place.

A freeblock is a structure used to identify unallocated space within
a b-tree page.  Freeblocks are organized as a chain.  The first 2 bytes of
a freeblock are a big-endian integer which is the offset in the b-tree page
of the next freeblock in the chain, or zero if the freeblock is the last on
the chain.  The third and fourth bytes of each freeblock form
a big-endian integer which is the size of the freeblock in bytes, including
the 4-byte header.  Freeblocks are always connected in order 
of increasing offset.  The second field of the b-tree page header is the
offset of the first freeblock, or zero if there are no freeblocks on the
page.  In a well-formed b-tree page, there will always be at least one cell
before the first freeblock.

A freeblock requires at least 4 bytes of space.  If there is an isolated
group of 1, 2, or 3 unused bytes within the cell content area, those bytes
comprise a fragment.  The total number of bytes in all fragments is stored
in the fifth field of the b-tree page header.  In a well-formed b-tree page,
the total number of bytes in fragments may not exceed 60.

The total amount of free space on a b-tree page consists of the size
of the unallocated region plus the total size of all freeblocks plus the
number of fragmented free bytes.  SQLite may from time to time reorganize
a b-tree page so that there are no freeblocks or fragment bytes, all
unused bytes are contained in the unallocated space region, and all
cells are packed tightly at the end of the page.  This is called 
"defragmenting" the b-tree page.

A variable-length integer or "varint" is a static Huffman encoding
of 64-bit twos-complement integers that uses less space for small positive 
values. 
A varint is between 1 and 9 bytes in length.  The varint consists of either
zero or more bytes which have the high-order bit set followed by a single byte
with the high-order bit clear, or nine bytes, whichever is shorter.
The lower seven bits of each of the first eight bytes and all 8 bits of
the ninth byte are used to reconstruct the 64-bit twos-complement integer.
Varints are big-endian: bits taken from the earlier byte of the varint
are more significant than bits taken from the later bytes. 

The format of a cell depends on which kind of b-tree page the cell
appears on.  The following table shows the elements of a cell, in
order of appearance, for the various b-tree page types.


Table B-Tree Leaf Cell (header 0x0d):

A varint which is the total number of bytes of payload, including any
overflow
A varint which is the integer key, a.k.a. "rowid"
The initial portion of the payload that does not spill to overflow
pages.
A 4-byte big-endian integer page number for the first page of the
overflow page list - omitted if all payload fits on the b-tree page.


Table B-Tree Interior Cell (header 0x05):

A 4-byte big-endian page number which is the left child pointer.
A varint which is the integer key


Index B-Tree Leaf Cell (header 0x0a):

A varint which is the total number of bytes of key payload, including any
overflow
The initial portion of the payload that does not spill to overflow
pages.
A 4-byte big-endian integer page number for the first page of the
overflow page list - omitted if all payload fits on the b-tree page.


Index B-Tree Interior Cell (header 0x02):

A 4-byte big-endian page number which is the left child pointer.
A varint which is the total number of bytes of key payload, including any
overflow
The initial portion of the payload that does not spill to overflow
pages.
A 4-byte big-endian integer page number for the first page of the
overflow page list - omitted if all payload fits on the b-tree page.



The information above can be recast into a table format as follows:


B-tree Cell Format

Datatype
    Appears in...
    Description
Table Leaf (0x0d)
    Table Interior (0x05)
    Index Leaf (0x0a)
    Index Interior (0x02)
4-byte integer
     
    ✔
     
    ✔
    Page number of left child
varint
    ✔
     
    ✔
    ✔
    Number of bytes of payload
varint
    ✔
    ✔
     
     
    Rowid
byte array
    ✔
     
    ✔
    ✔
    Payload
4-byte integer
    ✔
     
    ✔
    ✔
    Page number of first overflow page



The amount of payload that spills onto overflow pages also depends on
the page type.  For the following computations, let U be the usable size
of a database page, the total page size less the reserved space at the
end of each page.  And let P be the payload size.  In the following,
symbol X represents the maximum amount of payload that can be stored directly
on the b-tree page without spilling onto an overflow page and symbol M
represents the minimum amount of payload that must be stored on the btree
page before spilling is allowed.


Table B-Tree Leaf Cell:

Let X be U-35.  If the payload size P is less than or equal to X then
the entire payload is stored on the b-tree leaf page.
Let M be ((U-12)*32/255)-23 and let K be M+((P-M)%(U-4)).
If P is greater than X
then the number of bytes stored on the table b-tree leaf page is K
if K is less or equal to X or M otherwise.
The number of bytes stored on the leaf page is never less than M.


Table B-Tree Interior Cell:

Interior pages of table b-trees have no payload and so there is never
any payload to spill.


Index B-Tree Leaf Or Interior Cell:

Let X be ((U-12)*64/255)-23.  If the payload size P is less than
or equal to X then the entire payload is stored on the b-tree page.
Let M be ((U-12)*32/255)-23 and let K be M+((P-M)%(U-4)).
If P is greater than X then the number
of bytes stored on the index b-tree page is K if K is less than or
equal to X or M otherwise.
The number of bytes stored on the index page is never less than M.



Here is an alternative description of the same computation:


X is U-35 for table btree leaf pages or
    ((U-12)*64/255)-23 for index pages.
M is always ((U-12)*32/255)-23.
Let K be M+((P-M)%(U-4)).
If P<=X then all P bytes of payload are stored directly on the 
    btree page without overflow.
If P>X and K<=X then the first K bytes of P are stored on the 
    btree page and the remaining P-K bytes are stored on overflow pages.
If P>X and K>X then the first M bytes of P are stored on the
    btree page and the remaining P-M bytes are stored on overflow pages.


The overflow thresholds are designed to give a minimum fanout of
4 for index b-trees and to make sure enough of the payload
is on the b-tree page that the record header can usually be accessed
without consulting an overflow page.  In hindsight, the designer of
the SQLite b-tree logic realized that these thresholds could have been
made much simpler.  However, the computations cannot be changed
without resulting in an incompatible file format.  And the current computations
work well, even if they are a little complex.

1.7. Cell Payload Overflow Pages

When the payload of a b-tree cell is too large for the b-tree page,
the surplus is spilled onto overflow pages.  Overflow pages form a linked
list.  The first four bytes of each overflow page are a big-endian
integer which is the page number of the next page in the chain, or zero
for the final page in the chain.  The fifth byte through the last usable
byte are used to hold overflow content.

1.8. Pointer Map or Ptrmap Pages

Pointer map or ptrmap pages are extra pages inserted into the database
to make the operation of auto_vacuum and incremental_vacuum modes
more efficient.  Other page types in the database typically have pointers
from parent to child.  For example, an interior b-tree page contains pointers
to its child b-tree pages and an overflow chain has a pointer
from earlier to later links in the chain.  A ptrmap page contains linkage
information going in the opposite direction, from child to parent.

Ptrmap pages must exist in any database file which has a non-zero
largest root b-tree page value at offset 52 in the database header.
If the largest root b-tree page value is zero, then the database must not
contain ptrmap pages.

In a database with ptrmap pages, the first ptrmap page is page 2.
A ptrmap page consists of an array of 5-byte entries.  Let J be the
number of 5-byte entries that will fit in the usable space of a page.
(In other words, J=U/5.)  The first ptrmap page will contain back pointer
information for pages 3 through J+2, inclusive.  The second pointer map
page will be on page J+3 and that ptrmap page will provide back pointer
information for pages J+4 through 2*J+3 inclusive.  And so forth for
the entire database file.

In a database that uses ptrmap pages, all pages at locations identified
by the computation in the previous paragraph must be ptrmap page and no
other page may be a ptrmap page.  Except, if the byte-lock page happens to
fall on the same page number as a ptrmap page, then the ptrmap is moved
to the following page for that one case.

Each 5-byte entry on a ptrmap page provides back-link information about 
one of the pages that immediately follow the pointer map.  If page B is a
ptrmap page then back-link information about page B+1 is provided by
the first entry on the pointer map.  Information about page B+2 is
provided by the second entry.  And so forth.

Each 5-byte ptrmap entry consists of one byte of "page type" information
followed by a 4-byte big-endian page number.  Five page types are recognized:



A b-tree root page.  The
page number should be zero.
A freelist page.  The page number should be
zero.
The first page of a
cell payload overflow chain.  The page number is the b-tree page that
contains the cell whose content has overflowed.
A page in an overflow chain
other than the first page.  The page number is the prior page of the
overflow chain.
A non-root b-tree page.  The
page number is the parent b-tree page.


In any database file that contains ptrmap pages, all b-tree root pages 
must come before any non-root b-tree page, cell payload overflow page, or
freelist page.  This restriction ensures that a root page will never
be moved during an auto-vacuum or incremental-vacuum.  The auto-vacuum
logic does not know how to update the root_page field of the sqlite_schema
table and so it is necessary to prevent root pages from being moved
during an auto-vacuum in order to preserve the integrity of the
sqlite_schema table.  Root pages are moved to the beginning of the
database file by the CREATE TABLE, CREATE INDEX, DROP TABLE, and
DROP INDEX operations.

2. Schema Layer

The foregoing text describes low-level aspects of the SQLite file
format.  The b-tree mechanism provides a powerful and efficient means of
accessing a large data set.  This section will describe how the
low-level b-tree layer is used to implement higher-level SQL
capabilities.

2.1. Record Format

The data for a table b-tree leaf page and the key
of an index b-tree page was characterized above
as an arbitrary sequence of bytes.
The prior discussion mentioned one key being less than another, but
did not define what "less than" meant.  The current section will address
these omissions.

Payload, either table b-tree data or index b-tree keys, 
is always in the "record format".
The record format defines a sequence of values corresponding
to columns in a table or index.  The record format specifies the number
of columns, the datatype of each column, and the content of each column.

The record format makes extensive use of the 
variable-length integer or varint
representation of 64-bit signed integers defined above.

A record contains a header and a body, in that order.  
The header begins with a single varint which determines the total number
of bytes in the header.  The varint value is the size of the header in
bytes including the size varint itself.  Following the size varint are
one or more additional varints, one per column.  These additional varints
are called "serial type" numbers and
determine the datatype of each column, according to the following chart:


Serial Type Codes Of The Record Format

Serial TypeContent SizeMeaning
00
Value is a NULL.
11
Value is an 8-bit twos-complement integer.
22
Value is a big-endian 16-bit twos-complement integer.
33
Value is a big-endian 24-bit twos-complement integer.
44
Value is a big-endian 32-bit twos-complement integer.
56
Value is a big-endian 48-bit twos-complement integer.
68
Value is a big-endian 64-bit twos-complement integer.
78
Value is a big-endian IEEE 754-2008 64-bit floating point number.
80
Value is the integer 0. (Only available for schema format 4 and higher.)
90
Value is the integer 1. (Only available for schema format 4 and higher.)
10,11
    variable
Reserved for internal use.  These serial type codes will
   never appear in a well-formed database file, but they
   might be used in transient and temporary database files
   that SQLite sometimes generates for its own use.
   The meanings of these codes can shift from one release
   of SQLite to the next.
N≥12 and even
    (N-12)/2
Value is a BLOB that is (N-12)/2 bytes in length.
N≥13 and odd
    (N-13)/2
Value is a string in the text encoding and (N-13)/2 bytes in length.
The nul terminator is not stored.


The header size varint
and serial type varints will usually consist of a single byte.  The
serial type varints for large strings and BLOBs might extend to two or three
byte varints, but that is the exception rather than the rule. 
The varint format is very efficient at coding the record header.

The values for each column in the record immediately follow the header.
For serial types 0, 8, 9, 12, and 13, the value is zero bytes in
length.  If all columns are of these types then the body section of the
record is empty.

A record might have fewer values than the number of columns in the
corresponding table.  This can happen, for example, after an
ALTER TABLE ... ADD COLUMN SQL statement has increased
the number of columns in the table schema without modifying preexisting rows
in the table.
Missing values at the end of the record are filled in using the
default value for the corresponding columns defined in the table schema.



2.2. Record Sort Order

The order of keys in an index b-tree is determined by the sort order of
the records that the keys represent.  Record comparison progresses column
by column.  Columns of a record are examined from left to right.  The
first pair of columns that are not equal determines the relative order
of the two records.  The sort order of individual columns is as
follows:


NULL values (serial type 0) sort first.
Numeric values (serial types 1 through 9) sort after NULLs
      and in numeric order.
Text values (odd serial types 13 and larger) sort after numeric
    values in the order determined by the columns collating function.
BLOB values (even serial types 12 and larger) sort last and in the order 
    determined by memcmp().


A collating function for each column is necessary in order to compute
the order of text fields.
SQLite defines three built-in collating functions:



BINARY
     The built-in BINARY collation compares strings byte by byte
        using the memcmp() function
        from the standard C library.
NOCASE
     The NOCASE collation is like BINARY except that uppercase
        ASCII characters ('A' through 'Z')
        are folded into their lowercase equivalents prior to running the
        comparison.  Only ASCII characters are case-folded.
        NOCASE
        does not implement a general purpose unicode caseless comparison.
RTRIM
     RTRIM is like BINARY except that extra spaces at the end of either
         string do not change the result.  In other words, strings will
         compare equal to one another as long as they
         differ only in the number of spaces at the end.


Additional application-specific collating functions can be added to
SQLite using the sqlite3_create_collation() interface.

The default collating function for all strings is BINARY.
Alternative collating functions for table columns can be specified in the
CREATE TABLE statement using the COLLATE clause on the column definition.
When a column is indexed, the same collating function specified in the
CREATE TABLE statement is used for the column in the index, by default,
though this can be overridden using a COLLATE clause in the 
CREATE INDEX statement.



2.3. Representation Of SQL Tables

 Each ordinary SQL table in the database schema is represented on-disk
by a table b-tree.  Each entry in the table b-tree corresponds to a row
of the SQL table.  The rowid of the SQL table is the 64-bit signed
integer key for each entry in the table b-tree.

 The content of each SQL table row is stored in the database file by
first combining the values in the various columns into a byte array
in the record format, then storing that byte array as the payload in
an entry in the table b-tree.  The order of values in the record is
the same as the order of columns in the SQL table definition.
When an SQL table includes an
INTEGER PRIMARY KEY column (which aliases the rowid) then that
column appears in the record as a NULL value.  SQLite will always use
the table b-tree key rather than the NULL value when referencing the
INTEGER PRIMARY KEY column.

 If the affinity of a column is REAL and that column contains a
value that can be converted to an integer without loss of information
(if the value contains no fractional part and is not too large to be
represented as an integer) then the column may be stored in the record
as an integer.  SQLite will convert the value back to floating
point when extracting it from the record.

2.4. Representation of WITHOUT ROWID Tables

If an SQL table is created using the "WITHOUT ROWID" clause at the
end of its CREATE TABLE statement, then that table is a WITHOUT ROWID
table and uses a different on-disk representation.  A WITHOUT ROWID
table uses an index b-tree rather than a table b-tree for storage.
The key for each entry in the WITHOUT ROWID b-tree is a record composed
of the columns of the PRIMARY KEY followed by all remaining columns of
the table.  The primary key columns appear in the order that they were
declared in the PRIMARY KEY clause and the remaining columns appear in
the order they occur in the CREATE TABLE statement.

Hence, the content encoding for a WITHOUT ROWID table is the same
as the content encoding for an ordinary rowid table, except that the
order of the columns is rearranged so that PRIMARY KEY columns come
first, and the content is used as the key in an index b-tree rather
than as the data in a table b-tree.
The special encoding rules for columns with REAL affinity
apply to WITHOUT ROWID tables the same as they do with rowid tables.

2.4.1. Suppression of redundant columns in the PRIMARY KEY
    of WITHOUT ROWID tables

If the PRIMARY KEY of a WITHOUT ROWID tables uses the same columns
with the same collating sequence more than once, then the second and
subsequent occurrences of that column in the PRIMARY KEY definition are
ignored.  For example, the following CREATE TABLE statements all specify
the same table, which will have the exact same representation on disk:

CREATE TABLE t1(a,b,c,d,PRIMARY KEY(a,c)) WITHOUT ROWID;
CREATE TABLE t1(a,b,c,d,PRIMARY KEY(a,c,a,c)) WITHOUT ROWID;
CREATE TABLE t1(a,b,c,d,PRIMARY KEY(a,A,a,C)) WITHOUT ROWID;
CREATE TABLE t1(a,b,c,d,PRIMARY KEY(a,a,a,a,c)) WITHOUT ROWID;


The first example above is the preferred definition of the table,
of course.  All of the examples create a WITHOUT ROWID table with
two PRIMARY KEY columns, "a" and "c", in that order, followed by
two data columns "b" and "d", also in that order.

2.5. Representation Of SQL Indices

Each SQL index, whether explicitly declared via a CREATE INDEX statement
or implied by a UNIQUE or PRIMARY KEY constraint, corresponds to an 
index b-tree in the database file.
Each entry in the index b-tree corresponds to a single row in the 
associated SQL table.
The key to an index b-tree is
a record composed of the columns that are being indexed followed by the
key of the corresponding table row.  For ordinary tables, the row key is
the rowid, and for WITHOUT ROWID tables the row key is the PRIMARY KEY.
Because every row in the table has a unique row key,
all keys in an index are unique.

In a normal index, there is a one-to-one mapping between rows in a 
table and entries in each index associated with that table.
However, in a partial index, the index b-tree only contains entries
corresponding to table rows for which the WHERE clause expression on the
CREATE INDEX statement is true.
Corresponding rows in the index and table b-trees share the same rowid
or primary key values and contain the same value for all indexed columns.

2.5.1. Suppression of redundant columns in WITHOUT ROWID secondary indexes


 In an index on a WITHOUT ROWID table, if a column of the PRIMARY KEY
is also a column in the index and has a matching collating sequence, then the
indexed column is not repeated in the table-key suffix on the
end of the index record.  As an example, consider the following SQL:

CREATE TABLE ex25(a,b,c,d,e,PRIMARY KEY(d,c,a)) WITHOUT rowid;
CREATE INDEX ex25ce ON ex25(c,e);
CREATE INDEX ex25acde ON ex25(a,c,d,e);
CREATE INDEX ex25ae ON ex25(a COLLATE nocase,e);


Each row in the ex25ce index is a record
with these columns: c, e, d, a.  The first two columns are
the columns being indexed, c and e.  The remaining columns are the primary
key of the corresponding table row.  Normally, the primary key would be
columns d, c, and a, but because column c already appears earlier in the
index, it is omitted from the key suffix.

In the extreme case where the columns being indexed cover all columns
of the PRIMARY KEY, the index will consist of only the columns being
indexed.  The ex25acde example above demonstrates this.  Each entry in
the ex25acde index consists of only the columns a, c, d, and e, in that
order.

Each row in ex25ae contains five columns: a, e, d, c, a.  The "a"
column is repeated since the first occurrence of "a" has a collating
function of "nocase" and the second has a collating sequence of "binary".
If the "a" column is not repeated and if the table contains two or more
entries with the same "e" value and where "a" differs only in case, then
all of those table entries would correspond to a single entry in the
index, which would break the one-to-one correspondence between the table
and the index.

 The suppression of redundant columns in the key suffix of an index
entry only occurs in WITHOUT ROWID tables.  In an ordinary rowid table,
the index entry always ends with the rowid even if the INTEGER PRIMARY KEY
column is one of the columns being indexed.

2.6. Storage Of The SQL Database Schema

Page 1 of a database file is the root page of a table b-tree that
holds a special table named "sqlite_schema".  This b-tree is known
as the "schema table" since it stores the complete
database schema.  The structure of the sqlite_schema table is as
if it had been created using the following SQL:

CREATE TABLE sqlite_schema(
  type text,
  name text,
  tbl_name text,
  rootpage integer,
  sql text
);


The sqlite_schema table contains one row for each table, index, view,
and trigger (collectively "objects") in the database schema, except there
is no entry for the sqlite_schema table itself.  The sqlite_schema table
contains entries for internal schema objects in addition to application-
and programmer-defined objects.


The sqlite_schema.type column will be one
of the following text strings:  'table', 'index', 'view', or 'trigger'
according to the type of object defined.  The 'table' string is used
for both ordinary and virtual tables.

The sqlite_schema.name column will hold the name of the object.
UNIQUE and PRIMARY KEY constraints on tables cause SQLite to create
internal indexes with names of the form "sqlite_autoindex_TABLE_N"
where TABLE is replaced by the name of the table that contains the
constraint and N is an integer beginning with 1 and increasing by one
with each constraint seen in the table definition.
In a WITHOUT ROWID table, there is no sqlite_schema entry for the
PRIMARY KEY, but the "sqlite_autoindex_TABLE_N" name is set aside
for the PRIMARY KEY as if the sqlite_schema entry did exist.  This
will affect the numbering of subsequent UNIQUE constraints.
The "sqlite_autoindex_TABLE_N" name is never allocated for an
INTEGER PRIMARY KEY, either in rowid tables or WITHOUT ROWID tables.


The sqlite_schema.tbl_name column holds the name of a table or view
that the object is associated with.  For a table or view, the
tbl_name column is a copy of the name column.  For an index, the tbl_name
is the name of the table that is indexed.  For a trigger, the tbl_name
column stores the name of the table or view that causes the trigger 
to fire.

The sqlite_schema.rootpage column stores the page number of the root
b-tree page for tables and indexes.  For rows that define views, triggers,
and virtual tables, the rootpage column is 0 or NULL.

The sqlite_schema.sql column stores SQL text that describes the
object.  This SQL text is a CREATE TABLE, CREATE VIRTUAL TABLE,
CREATE INDEX,
CREATE VIEW, or CREATE TRIGGER statement that if evaluated against
the database file when it is the main database of a database connection
would recreate the object.  The text is usually a copy of the original
statement used to create the object but with normalizations applied so
that the text conforms to the following rules:


The CREATE, TABLE, VIEW, TRIGGER, and INDEX keywords at the beginning
of the statement are converted to all upper case letters.
The TEMP or TEMPORARY keyword is removed if it occurs after the 
initial CREATE keyword.
Any database name qualifier that occurs prior to the name of the
object being created is removed.
Leading spaces are removed.
All spaces following the first two keywords are converted into a single
space.


The text in the sqlite_schema.sql column is a copy of the original
CREATE statement text that created the object, except normalized as
described above and as modified by subsequent ALTER TABLE statements.
The sqlite_schema.sql is NULL for the internal indexes that are
automatically created by UNIQUE or PRIMARY KEY constraints.

2.6.1. Alternative Names For The Schema Table

The name "sqlite_schema" does not appear anywhere in the file format.
That name is just a convention used by the database implementation.
Due to historical and operational considerations, the
"sqlite_schema" table can also sometimes be called by one of the
following aliases:


 sqlite_master
 sqlite_temp_schema
 sqlite_temp_master


Because the name of the schema table does not appear anywhere in
the file format, the meaning of the database file is not changed if
the application chooses to refer to the schema table by one of
these alternative names.



2.6.2. Internal Schema Objects

In addition to the tables, indexes, views, and triggers created by
the application and/or the developer using CREATE statements SQL, the
sqlite_schema table may contain zero or more entries for 
internal schema objects that are created by SQLite for its 
own internal use.  The names of internal schema objects
always begin with "sqlite_" and any table, index, view, or trigger
whose name begins with "sqlite_" is an internal schema object.
SQLite prohibits applications from creating objects whose names begin
with "sqlite_".  

Internal schema objects used by SQLite may include the following:


Indices with names of the form "sqlite_autoindex_TABLE_N" that
       are used to implement UNIQUE and PRIMARY KEY constraints on
       ordinary tables.

A table with the name "sqlite_sequence" that is used to keep track
       of the maximum historical INTEGER PRIMARY KEY for a table
       using AUTOINCREMENT.

Tables with names of the form "sqlite_statN" where N is an integer.
       Such tables store database statistics gathered by the ANALYZE
       command and used by the query planner to help determine the best
       algorithm to use for each query.


New internal schema objects names, always beginning with "sqlite_",
may be added to the SQLite file format in future releases.



2.6.3. The sqlite_sequence table

The sqlite_sequence table is an internal table used to help implement
AUTOINCREMENT.  The sqlite_sequence table is created automatically
whenever any ordinary table with an AUTOINCREMENT integer primary
key is created.  Once created, the sqlite_sequence table exists in the
sqlite_schema table forever; it cannot be dropped.
The schema for the sqlite_sequence table is:

CREATE TABLE sqlite_sequence(name,seq);


There is a single row in the sqlite_sequence table for each ordinary
table that uses AUTOINCREMENT.  The name of the table (as it appears in
sqlite_schema.name) is in the sqlite_sequence.name field and the largest
INTEGER PRIMARY KEY ever inserted into that table is 
in the sqlite_sequence.seq field.  
New automatically generated integer primary keys for AUTOINCREMENT
tables are guaranteed to be larger than the sqlite_sequence.seq field for
that table.
If the sqlite_sequence.seq field of an AUTOINCREMENT table is already at
the largest integer value (9223372036854775807) then attempts to add new
rows to that table with an automatically generated integer primary will fail
with an SQLITE_FULL error.
The sqlite_sequence.seq field is automatically updated if required when
new entries are inserted to an AUTOINCREMENT table.  
The sqlite_sequence row for an AUTOINCREMENT table is automatically deleted
when the table is dropped.
If the sqlite_sequence row for an AUTOINCREMENT table does not exist when
the AUTOINCREMENT table is updated, then a new sqlite_sequence row is created.
If the sqlite_sequence.seq value for an AUTOINCREMENT table is manually 
set to something other than an integer and there is a subsequent attempt to
insert the or update the AUTOINCREMENT table, then the behavior is undefined.

Application code is allowed to modify the sqlite_sequence table, to add
new rows, to delete rows, or to modify existing rows.  However, application
code cannot create the sqlite_sequence table if it does not already exist.
Application code can delete all entries from the sqlite_sequence table,
but application code cannot drop the sqlite_sequence table.



2.6.4. The sqlite_stat1 table

The sqlite_stat1 is an internal table created by the ANALYZE command
and used to hold supplemental information about tables and indexes that the
query planner can use to help it find better ways of performing queries.
Applications can update, delete from, insert into or drop the sqlite_stat1
table, but may not create or alter the sqlite_stat1 table.
The schema of the sqlite_stat1 table is as follows:

CREATE TABLE sqlite_stat1(tbl,idx,stat);


 There is normally one row per index, with the index identified by the
name in the sqlite_stat1.idx column.  The sqlite_stat1.tbl column is
the name of the table to which the index belongs.  In each such row, 
the sqlite_stat.stat column will be
a string consisting of a list of integers followed by zero or more 
arguments.  The first integer in this
list is the approximate number of rows in the index.  (The number of
rows in the index is the same as the number of rows in the table,
except for partial indexes.)
The second integer is the approximate number of rows in the index
that have the same value in the first column of the index.  The third 
integer is the number of rows in the index that have 
the same value for the first two columns.  The N-th integer (for N>1) 
is the estimated average number of rows in 
the index which have the same value for the first N-1 columns.  For
a K-column index, there will be K+1 integers in the stat column.  If
the index is unique, then the last integer will be 1.

The list of integers in the stat column can optionally be followed
by arguments, each of which is a sequence of non-space characters.
All arguments are preceded by a single space.
Unrecognized arguments are silently ignored.

If the "unordered" argument is present, then the query planner assumes
that the index is unordered and will not use the index for a range query
or for sorting.

The "sz=NNN" argument (where NNN represents a sequence of 1 or more digits)
means that the average row size over all records of the table or
index is NNN bytes per row.  The SQLite query planner might use the
estimated row size information provided by the "sz=NNN" token
to help it choose smaller tables and indexes that require less disk I/O.

The presence of the "noskipscan" token on the sqlite_stat1.stat field
of an index prevents that index from being used with the
skip-scan optimization.

New text tokens may be added to the end of the stat column in future
enhancements to SQLite.  For compatibility, unrecognized tokens at the end
of the stat column are silently ignored.

If the sqlite_stat1.idx column is NULL, then the sqlite_stat1.stat
column contains a single integer which is the approximate number of
rows in the table identified by sqlite_stat1.tbl.
If the sqlite_stat1.idx column is the same as the sqlite_stat1.tbl
column, then the table is a WITHOUT ROWID table and the sqlite_stat1.stat
field contains information about the index btree that implements the
WITHOUT ROWID table.



2.6.5. The sqlite_stat2 table

The sqlite_stat2 is only created and is only used if SQLite is compiled
with SQLITE_ENABLE_STAT2 and if the SQLite version number is between
3.6.18 (2009-09-11) and 3.7.8 (2011-09-19).
The sqlite_stat2 table is neither read nor written by any
version of SQLite before 3.6.18 nor after 3.7.8.
The sqlite_stat2 table contains additional information
about the distribution of keys within an index.
The schema of the sqlite_stat2 table is as follows:

CREATE TABLE sqlite_stat2(tbl,idx,sampleno,sample);


The sqlite_stat2.idx column and the sqlite_stat2.tbl column in each 
row of the sqlite_stat2 table identify an index described by that row.
There are usually 10 rows in the sqlite_stat2
table for each index.

The sqlite_stat2 entries for an index that have sqlite_stat2.sampleno
between 0 and 9 inclusive are samples of the left-most key value in the
index taken at evenly spaced points along the index.
Let C be the number of rows in the index.
Then the sampled rows are given by


     rownumber = (i*C*2 + C)/20


The variable i in the previous expression varies between 0 and 9.
Conceptually, the index space is divided into
10 uniform buckets and the samples are the middle row from each bucket.

The format for sqlite_stat2 is recorded here for legacy reference.  
Recent versions of SQLite no longer support sqlite_stat2 and the
sqlite_stat2 table, if is exists, is simply ignored.



2.6.6. The sqlite_stat3 table

The sqlite_stat3 is only used if SQLite is compiled
with SQLITE_ENABLE_STAT3 or SQLITE_ENABLE_STAT4
and if the SQLite version number is 3.7.9 (2011-11-01) or greater.
The sqlite_stat3 table is neither read nor written by any
version of SQLite before 3.7.9.
If the SQLITE_ENABLE_STAT4 compile-time option is used and the
SQLite version number is 3.8.1 (2013-10-17) or greater,
then sqlite_stat3 might be read but not written.
The sqlite_stat3 table contains additional information
about the distribution of keys within an index, information that the
query planner can use to devise better and faster query algorithms.
The schema of the sqlite_stat3 table is as follows:

CREATE TABLE sqlite_stat3(tbl,idx,nEq,nLt,nDLt,sample);


There are usually multiple entries in the sqlite_stat3 table for each index.
The sqlite_stat3.sample column holds the value of the left-most field of an
index identified by sqlite_stat3.idx and sqlite_stat3.tbl.
The sqlite_stat3.nEq column holds the approximate
number of entries in the index whose left-most column exactly matches
the sample.
The sqlite_stat3.nLt holds the approximate number of entries in the
index whose left-most column is less than the sample.
The sqlite_stat3.nDLt column holds the approximate
number of distinct left-most entries in the index that are less than
the sample.

There can be an arbitrary number of sqlite_stat3 entries per index.
The ANALYZE command will typically generate sqlite_stat3 tables
that contain between 10 and 40 samples that are distributed across
the key space and with large nEq values.

In a well-formed sqlite_stat3 table, the samples for any single
index must appear in the same order that they occur in the index.  
In other words, if the entry with left-most column S1 is earlier in
the index b-tree than the
entry with left-most column S2, then in the sqlite_stat3 table, 
sample S1 must have a smaller rowid than sample S2.



2.6.7. The sqlite_stat4 table

The sqlite_stat4 is only created and is only used if SQLite is compiled
with SQLITE_ENABLE_STAT4 and if the SQLite version number is
3.8.1 (2013-10-17) or greater.
The sqlite_stat4 table is neither read nor written by any
version of SQLite before 3.8.1.
The sqlite_stat4 table contains additional information
about the distribution of keys within an index or the distribution of
keys in the primary key of a WITHOUT ROWID table.
The query planner can sometimes use the additional information in
the sqlite_stat4 table to devise better and faster query algorithms.
The schema of the sqlite_stat4 table is as follows:

CREATE TABLE sqlite_stat4(tbl,idx,nEq,nLt,nDLt,sample);


There are typically between 10 to 40 entries in the sqlite_stat4 table for
each index for which statistics are available, however these limits are
not hard bounds.
The meanings of the columns in the sqlite_stat4 table are as follows:



tbl:
    The sqlite_stat4.tbl column holds name of the table that owns
    the index that the row describes

idx:
    The sqlite_stat4.idx column holds name of the index that the
    row describes, or in the case of
    an sqlite_stat4 entry for a WITHOUT ROWID table, the
    name of the table itself.

sample:
    The sqlite_stat4.sample column holds a BLOB
    in the record format that encodes the indexed columns followed by
    the rowid for a rowid table or by the columns of the primary key 
    for a WITHOUT ROWID table.
    The sqlite_stat4.sample BLOB for the WITHOUT ROWID table itself 
    contains just the columns of the primary key.
    Let the number of columns encoded by the sqlite_stat4.sample blob be N.
    For indexes on an ordinary rowid table, N will be one more than the number 
    of columns indexed.
    For indexes on WITHOUT ROWID tables, N will be the number of columns
    indexed plus the number of columns in the primary key.
    For a WITHOUT ROWID table, N will be the number of columns in the
    primary key.

nEq:
    The sqlite_stat4.nEq column holds a list of N integers where 
    the K-th integer is the approximate number of entries in the index
    whose left-most K columns exactly match the K left-most columns
    of the sample.

nLt:
    The sqlite_stat4.nLt column holds a list of N integers where
    the K-th integer is the approximate number of entries in the
    index whose K left-most columns are collectively less than the 
    K left-most columns of the sample.

nDLt:
    The sqlite_stat4.nDLt column holds a list of N integers where
    the K-th integer is the approximate
    number of entries in the index that are distinct in the first K columns and
    where the left-most K columns are collectively less than the left-most
    K columns of the sample.



The sqlite_stat4 is a generalization of the sqlite_stat3 table.  The
sqlite_stat3 table provides information about the left-most column of an
index whereas the sqlite_stat4 table provides information about all columns
of the index.

There can be an arbitrary number of sqlite_stat4 entries per index.
The ANALYZE command will typically generate sqlite_stat4 tables
that contain between 10 and 40 samples that are distributed across
the key space and with large nEq values.

In a well-formed sqlite_stat4 table, the samples for any single
index must appear in the same order that they occur in the index.  
In other words, if entry S1 is earlier in the index b-tree than 
entry S2, then in the sqlite_stat4 table, sample S1 must have a
smaller rowid than sample S2.



3. The Rollback Journal

The rollback journal is a file associated with each SQLite database
file that holds information used to restore the database file to its initial
state during the course of a transaction.
The rollback journal file is always located in the same 
directory as the database
file and has the same name as the database file but with the string
"-journal" appended.  There can only be a single rollback journal
associated with a give database and hence there can only be one write
transaction open against a single database at one time.

Before any information-bearing page of the database is modified, 
the original unmodified content of that page is written into the 
rollback journal.  If a transaction is interrupted and needs to be 
rolled back, the rollback journal can then be used to restore the
database to its original state.  Freelist leaf pages bear no
information that would need to be restored on a rollback and so they
are not written to the journal prior to modification, in order to
reduce disk I/O.

If a transaction is aborted due to an application crash, or a single,
or an operating system crash, or a hardware power failure or crash, then 
the main database file might be left in an inconsistent state. 
The next time SQLite attempts to open
the database file, the presence of the rollback journal file will be 
detected and the journal will be automatically played back to restore the
database to its state at the start of the incomplete transaction.

A rollback journal is only considered to be valid if it exists and
contains a valid header.  Hence a transaction can be committed in one
of three ways:

The rollback journal file can be deleted,
The rollback journal file can be truncated to zero length, or
The header of the rollback journal can be overwritten with
invalid header text (for example, all zeros).


These three ways of committing a transaction correspond to the DELETE,
TRUNCATE, and PERSIST settings, respectively, of the journal_mode pragma.



A valid rollback journal begins with a header in the following format:


Rollback Journal Header Format

OffsetSizeDescription
0
    8
    Header string:  0xd9, 0xd5, 0x05, 0xf9, 0x20, 0xa1, 0x63, 0xd7
8
    4
    The "Page Count" - The number of pages in the next segment of the 
        journal, or -1 to
        mean all content to the end of the file
12
    4
    A random nonce for the checksum
16
    4
    Initial size of the database in pages
20
    4
    Size of a disk sector assumed by the process that wrote this
        journal.
24
    4
    Size of pages in this journal.



A rollback journal header is padded with zeros out to the size of a 
single sector (as defined by the sector size integer at offset 20).
The header is in a sector by itself so that if a power loss occurs while
writing the sector, information that follows the header will be
(hopefully) undamaged.

After the header and zero padding are zero or more page records.  Each
page record stores a copy of the content of a page from the database file
before it was changed.  The same page may not appear more than once
within a single rollback journal.
To rollback an incomplete transaction, a process
has merely to read the rollback journal from beginning to end and
write pages found in the journal back into the database file at the
appropriate location.

Let the database page size (the value of the integer at offset 24 
in the journal header) be N.
Then the format of a page record is as follows:


Rollback Journal Page Record Format

OffsetSizeDescription
0
    4
    The page number in the database file
4
    N
    Original content of the page prior to the start of the transaction
N+4
    4
    Checksum




The checksum is an unsigned 32-bit integer computed as follows:


Initialize the checksum to the checksum nonce value found in the
journal header at offset 12.
Initialize index X to be N-200 (where N is the size of a database page
in bytes.
Interpret the byte at offset X into the page as an 8-bit unsigned integer
 and add the value of that integer to the checksum.
Subtract 200 from X.
If X is greater than or equal to zero, go back to step 3.


The checksum value is used to guard against incomplete writes of
a journal page record following a power failure.  A different random nonce
is used each time a transaction is started in order to minimize the risk
that unwritten sectors might by chance contain data from the same page
that was a part of prior journals.  By changing the nonce for each
transaction, stale data on disk will still generate an incorrect checksum
and be detected with high probability.  The checksum only uses a sparse sample
of 32-bit words from the data record for performance reasons - design studies 
during the planning phases of SQLite 3.0.0 showed
a significant performance hit in checksumming the entire page.

Let the page count value at offset 8 in the journal header be M.
If M is greater than zero then after M page records the journal file
may be zero padded out to the next multiple of the sector size and another
journal header may be inserted.  All journal headers within the same
journal must contain the same database page size and sector size.

If M is -1 in the initial journal header, then the number of page records
that follow is computed by computing how many page records will fit in
the available space of the remainder of the journal file.

4. The Write-Ahead Log

Beginning with version 3.7.0 (2010-07-21), 
SQLite supports a new transaction
control mechanism called "write-ahead log" or "WAL".
When a database is in WAL mode, all connections to that database must
use the WAL.  A particular database will use either a rollback journal
or a WAL, but not both at the same time.
The WAL is always located in the same directory as the database
file and has the same name as the database file but with the string
"-wal" appended.

4.1. WAL File Format

A WAL file consists of a header followed by zero or more "frames".
Each frame records the revised content of a single page from the
database file.  All changes to the database are recorded by writing
frames into the WAL.  Transactions commit when a frame is written that
contains a commit marker.  A single WAL can and usually does record 
multiple transactions.  Periodically, the content of the WAL is
transferred back into the database file in an operation called a
"checkpoint".

A single WAL file can be reused multiple times.  In other words, the
WAL can fill up with frames and then be checkpointed and then new
frames can overwrite the old ones.  A WAL always grows from beginning
toward the end.  Checksums and counters attached to each frame are
used to determine which frames within the WAL are valid and which
are leftovers from prior checkpoints.

The WAL header is 32 bytes in size and consists of the following eight
big-endian 32-bit unsigned integer values:


WAL Header Format

OffsetSizeDescription
04
    Magic number.  0x377f0682 or 0x377f0683
44
    File format version.  Currently 3007000.
84
    Database page size.  Example: 1024
124
    Checkpoint sequence number
164
    Salt-1: random integer incremented with each checkpoint
204
    Salt-2: a different random number for each checkpoint
244
    Checksum-1: First part of a checksum on the first 24 bytes of header
284
    Checksum-2: Second part of the checksum on the first 24 bytes of header



Immediately following the wal-header are zero or more frames. Each
frame consists of a 24-byte frame-header followed by a page-size bytes
of page data. The frame-header is six big-endian 32-bit unsigned 
integer values, as follows:


WAL Frame Header Format

OffsetSizeDescription
04
    Page number
44
    For commit records, the size of the database file in pages
        after the commit.  For all other records, zero.
84
    Salt-1 copied from the WAL header
124
    Salt-2 copied from the WAL header
164
    Checksum-1:  Cumulative checksum up through and including this page
204
    Checksum-2:  Second half of the cumulative checksum.



A frame is considered valid if and only if the following conditions are
true:


The salt-1 and salt-2 values in the frame-header match
       salt values in the wal-header

The checksum values in the final 8 bytes of the frame-header
       exactly match the checksum computed consecutively on the
       first 24 bytes of the WAL header and the first 8 bytes and
       the content of all frames
       up to and including the current frame.


4.2. Checksum Algorithm

The checksum is computed by interpreting the input as
an even number of unsigned 32-bit integers: x(0) through x(N).
The 32-bit integers are big-endian if the
magic number in the first 4 bytes of the WAL header is 0x377f0683 and
the integers are little-endian if the magic number is 0x377f0682.
The checksum values are always stored in the frame header in a
big-endian format regardless of which byte order is used to compute
the checksum.

The checksum algorithm only works for content which is a multiple of
8 bytes in length.  In other words, if the inputs are x(0) through x(N)
then N must be odd.
The checksum algorithm is as follows:

 
s0 = s1 = 0
for i from 0 to n-1 step 2:
   s0 += x(i) + s1;
   s1 += x(i+1) + s0;
endfor
# result in s0 and s1


The outputs s0 and s1 are both weighted checksums using Fibonacci weights
in reverse order.  (The largest Fibonacci weight occurs on the first element
of the sequence being summed.)  The s1 value spans all 32-bit integer
terms of the sequence whereas s0 omits the final term.

4.3. Checkpoint Algorithm

On a checkpoint, the WAL is first flushed to persistent storage using
the xSync method of the VFS. 
Then valid content of the WAL is transferred into the database file.
Finally, the database is flushed to persistent storage using another
xSync method call.
The xSync operations serve as write barriers - all writes launched
before the xSync must complete before any write that launches after the
xSync begins.

A checkpoint need not run to completion.  It might be that some
readers are still using older transactions with data that is contained
in the database file.  In that case, transferring content for newer
transactions from the WAL file into the database would delete the content
out from under readers still using the older transactions.  To avoid that,
checkpoints only run to completion if all reader are using the
last transaction in the WAL.



4.4. WAL Reset

After a complete checkpoint, if no other connections are in transactions
that use the WAL, then subsequent write transactions can
overwrite the WAL file from the beginning.  This is called "resetting the
WAL".  At the start of the first new
write transaction, the WAL header salt-1 value is incremented
and the salt-2 value is randomized.  These changes to the salts invalidate
old frames in the WAL that have already been checkpointed but not yet
overwritten, and prevent them from being checkpointed again.

The WAL file can optionally be truncated on a reset, but it need not be.
Performance is usually a little better if the WAL is not truncated, since
filesystems generally will overwrite an existing file faster than they
will grow a file.



4.5. Reader Algorithm

To read a page from the database (call it page number P), a reader
first checks the WAL to see if it contains page P.  If so, then the
last valid instance of page P that is followed by a commit frame
or is a commit frame itself becomes the value read.  If the WAL
contains no copies of page P that are valid and which are a commit
frame or are followed by a commit frame, then page P is read from
the database file.

To start a read transaction, the reader records the number of value
frames in the WAL as "mxFrame".  (More detail)
The reader uses this recorded mxFrame value
for all subsequent read operations.  New transactions can be appended
to the WAL, but as long as the reader uses its original mxFrame value
and ignores subsequently appended content, the reader will see a 
consistent snapshot of the database from a single point in time.  
This technique allows multiple concurrent readers to view different 
versions of the database content simultaneously.

The reader algorithm in the previous paragraphs works correctly, but 
because frames for page P can appear anywhere within the WAL, the
reader has to scan the entire WAL looking for page P frames.  If the
WAL is large (multiple megabytes is typical) that scan can be slow,
and read performance suffers.  To overcome this problem, a separate
data structure called the wal-index is maintained to expedite the
search for frames of a particular page.

4.6. WAL-Index Format

Conceptually, the wal-index is shared memory, though the current
VFS implementations use a memory-mapped file for operating-system
portability.  The memory-mapped
file is in the same directory as the database and has the same name
as the database with a "-shm" suffix appended.  Because
the wal-index is shared memory, SQLite does not support 
journal_mode=WAL 
on a network filesystem when clients are on different machines, as
all clients of the database must be able to share the same memory.

The purpose of the wal-index is to answer this question quickly:


Given a page number P and a maximum WAL frame index M,
return the largest WAL frame index for page P that does not exceed M, 
or return NULL if there are no frames for page P that do not exceed M.


The M value in the previous paragraph is the "mxFrame" value
defined in section 4.4 that is read at the start 
of a transaction and which defines the maximum frame from the WAL that 
the reader will use.

The wal-index is transient.  After a crash, the wal-index is
reconstructed from the original WAL file.  The VFS is required
to either truncate or zero the header of the wal-index when the last
connection to it closes.  Because the wal-index is transient, it can
use an architecture-specific format; it does not have to be cross-platform.
Hence, unlike the database and WAL file formats which store all values
as big endian, the wal-index stores multi-byte values in the native
byte order of the host computer.

This document is concerned with the persistent state of the database
file, and since the wal-index is a transient structure, no further 
information about the format of the wal-index will be provided here.
Additional details on the format of the wal-index are contained in
the separate WAL-index File Format document.
This page last modified on  2025-04-30 20:02:34 UTC 

]]></content:encoded>
        </item>
    </channel>
</rss>