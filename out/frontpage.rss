<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Sun, 07 Sep 2025 14:03:29 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Belling the Cat]]></title>
            <link>https://en.wikipedia.org/wiki/Belling_the_Cat</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157906</guid>
            <description><![CDATA[From Wikipedia, the free encyclopedia]]></description>
            <content:encoded><![CDATA[
							

						From Wikipedia, the free encyclopedia
					

Gustave Doré's illustration of La Fontaine's fable, c. 1868
Belling the Cat is a fable also known under the titles The Bell and the Cat and The Mice in Council. In the story, a group of mice agree to attach a bell to a cat's neck to warn of its approach in the future, but they fail to find a volunteer to perform the job. The term has become an idiom describing a group of persons, each agreeing to perform an impossibly difficult task under the misapprehension that someone else will be chosen to run the risks and endure the hardship of actual accomplishment.[1]
Although often attributed to Aesop, it was not recorded before the Middle Ages and has been confused with the quite different fable of Classical origin titled The Cat and the Mice. In the classificatory system established for the fables by Ben Edwin Perry, it is numbered 613, which is reserved for Mediaeval attributions outside the Aesopic canon.[2]


Synopsis and idiomatic use[edit]
The fable concerns a group of mice who debate plans to nullify the threat of a marauding cat. One of them proposes placing a bell around its neck, so that they are warned of its approach. The plan is applauded by the others, until one mouse asks who will volunteer to place the bell on the cat. All of them make excuses. The story is used to teach the wisdom of evaluating a plan on not only how desirable the outcome would be but also how it can be executed. It provides a moral lesson about the fundamental difference between ideas and their feasibility, and how this affects the value of a given plan.[3]
The fable gives rise to the idiom to bell the cat, which means to attempt, or agree to perform, an impossibly difficult task.[4] Historically 'Bell the Cat' is frequently claimed to have been a nickname given to fifteenth-century Scottish nobleman Archibald Douglas, 5th Earl of Angus in recognition of his part in the arrest and execution of James III's alleged favourite, Thomas (often misnamed as Robert) Cochrane. In fact the earliest evidence for this use is from Hume of Godscroft's history of the Douglases published in 1644,[5] and therefore is more reflective of perception of the idiom in the seventeenth century than the fifteenth.[6] In the 21st century the idiom was adopted by the investigative journalism group Bellingcat.[7] 
The first English collection to attribute the fable to Aesop was John Ogilby's of 1687; in this there is a woodcut (by Francis Barlow), followed by a 10-line verse synopsis by Aphra Behn with the punning conclusion:


Good Councell's easily given, but the effect
Oft renders it uneasy to transact.[8]


Early versions and later interpretations[edit]
"Belling the cat" is one of the proverbs illustrated in Pieter Bruegel I's painting Netherlandish Proverbs (1559).
One of the earliest versions of the story appears as a parable critical of the clergy in Odo of Cheriton's Parabolae.[9] Written around 1200, it was afterwards translated into Welsh, French and Spanish. Sometime later, the story is found in the work now referred to as Ysopet-Avionnet, which is largely made up of Latin poems by the 12th century Walter of England, followed by a French version dating from as much as two centuries later. It also includes four poems not found in Walter's Esopus; among them is the tale of "The Council of the Mice" (De muribus consilium facientibus contra catum). The author concludes with the scornful comment that laws are of no effect without the means of adequately enforcing them and that such parliamentary assemblies as he describes are like the proverbial mountain in labour that gives birth to a mouse.[10]
The fable also appeared as a cautionary tale in Nicholas Bozon's Anglo-Norman Contes Moralisés (1320), referring to the difficulty of curbing the outrages of superior lords.[11] It was in this context too that the story of a parliament of rats and mice was retold in William Langland's allegorical poem Piers Plowman.[12] The episode is said to refer to the Parliament of 1376 which attempted unsuccessfully to remedy popular dissatisfaction over the exactions made by nobles acting in the royal name.[13]
Langland's French contemporary, the satirical Eustache Deschamps, also includes the story among his other moral ballades based on fables as "Les souris et les chats".[14] It has been suggested that in this case too there is a political subtext. The poem was written as a response to the aborted invasion of England in 1386 and contrasts French dithering in the face of English aggression.[15]  The refrain of Deschamps' ballade, Qui pendra la sonnette au chat (who will bell the cat) was to become proverbial in France if, indeed, it does not record one already existing.
In the following century, the Italian author Laurentius Abstemius made of the fable a Latin cautionary tale titled De muribus tintinnabulum feli appendere volentibus (The mice who wanted to bell the cat)[16] in 1499. A more popular version in Latin verse was written by Gabriele Faerno and printed posthumously in his Fabulae centum ex antiquis auctoribus delectae (100 delightful fables from ancient authors, Rome 1564), a work that was to be many times reprinted and translated up to start of the 19th century. Titled simply "The Council of the Mice", it comes to rest on the drily stated moral that 'a risky plan can have no good result'. The story was evidently known in Flanders too, since 'belling the cat' was included among the forty Netherlandish Proverbs in the composite painting of Pieter Bruegel the Elder (1559). In this case a man in armour is performing the task in the lower left foreground.[17] A century later, La Fontaine's Fables made the tale even better known under the title Conseil tenu par les rats (II.2).[18]

A Japanese woodblock illustration by Kawanabe Kyōsai of La Fontaine's fable, 1894.
In mediaeval times the fable was applied to political situations and British commentaries on it were sharply critical of the limited democratic processes of the day and their ability to resolve social conflict when class interests were at stake. This applies equally to the plot against the king's favourite in 15th century Scotland and the direct means that Archibald Douglas chose to resolve the issue. While none of the authors who used the fable actually incited revolution, the 1376 Parliament that Langland satirised was followed by Wat Tyler's revolt five years later, while Archibald Douglas went on to lead a rebellion against King James. During the Renaissance the fangs of the fable were being drawn by European authors, who restricted their criticism to pusillanimous conduct in the face of rashly proposed solutions. A later exception was the Russian fabulist Ivan Krylov, whose adaptation of the story satirises croneyism. In his account only those with perfect tails are to be allowed into the assembly; nevertheless, a tailless rat is admitted because of a family connection with one of the lawmakers.[19]
There still remains the perception of a fundamental opposition between consensus and individualism. This is addressed in the lyrics of "Bell the Cat",[20] a performance put out on DVD by the Japanese rock band LM.C in 2007.[21] This is the monologue of a house cat that wants to walk alone since "Society is by nature evil". It therefore refuses to conform and is impatient of restriction: "your hands hold on to everything – bell the cat". While the lyric is sung in Japanese, the final phrase is in English. Another modernised adaptation based on this fable, that updates the moral, has been published by Patricia McKissack in her Who Will Bell the Cat? (illustrated by Christopher Cyr).[22][23]
There is a Tibetan proverb that is very similar, "Putting a bell on the cat's neck after the mother of mice was consulted"[24]


Several French artists depicted the fable during the 19th century, generally choosing one of two approaches. Gustave Doré and the genre painter Aurélie Léontine Malbet (fl. 1868–1906)[25] pictured the rats realistically acting out their debate. The illustrator Grandville,[26] along with the contemporaries Philibert Léon Couturier [fr] (1823–1901)[27] and Auguste Delierre (1829–1890),[28] caricature the backward practice and pomposity of provincial legislatures, making much the same point as did the Mediaeval authors who first recorded the tale. At the end of the century a publishing curiosity reverts to the first approach. This was in the woodblock print by Kawanabe Kyōsui that appeared in the collection of La Fontaine's fables that was commissioned and printed in Tokyo in 1894 and then exported to France.[29] In the upper left-hand corner a cat is seen through a warehouse window as it approaches across the roofs while inside the rats swarm up the straw-wrapped bales of goods. At its summit the chief rat holds the bell aloft. An earlier Japanese woodblock formed part of Kawanabe Kyōsai's Isoho Monogotari series (1870–80). This shows an assembly of mice in Japanese dress with the proposer in the foreground, brandishing the belled collar.[30]


In the 18th century the fable was one among many set by Louis-Nicolas Clérambault in the fables section of Nouvelles poésies spirituelles et morales sur les plus beaux airs (1730–37).[31] In the following century the text of La Fontaine's fable was set for male voices by Louis Lacombe[32] and by the Catalan composer Isaac Albéniz for medium voice and piano in 1889.[33] In 1950 it was set for four male voices by Florent Schmitt.[34] But while La Fontaine's humorously named cat Rodilardus, and antiquated words like discomfiture (déconfiture), may fit an art song, there have also been faithful interpretations in the field of light music. A popular composer of the day, Prosper Massé, published such a setting in 1846.[35] More recently there has been Pierre Perret's interpretation as part of his 20 Fables inspirées de Jean de la Fontaine (1995),[36] and a jazz arrangement on Daniel Roca's 10 Fables de La Fontaine (2005).[37]


Collective action problem
Who Will Bell the Cat?, a children's picture book based on the fable



^ Strouf, Judie L. H. (2005). The literature teacher's book of lists. Jossey-Bass. p. 13. ISBN 0787975508.

^ Ben Edwin Perry (1965). Babrius and Phaedrus. Loeb Classical Library. Cambridge, MA: Harvard University Press. pp. 545, no. 613. ISBN 0-674-99480-9.

^ "Belling The Cat". Fables of Aesop. 2016-07-05. Retrieved 2021-03-04.

^ "To Bell the Cat" thefreedictionary.com. Retrieved 9 November 2007.

^ David Reid, David Hume of Godscroft's History of the House of Angus, vol. 1 (STS: Edinburgh, 2005), p. 26.

^ Macdougall, Norman (1982). James III: A Political Study. Edinburgh: John Donald. pp. 287–288. ISBN 0859760782.

^ "Bellingcat: Digital Sleuths on the Hunt for Truth"

^ "21. De cato et muribus (1687), illustrated by Francis Barlow". Mythfolklore.net. Retrieved January 26, 2011.

^ Laura (15 May 2009). "Christianizing Aesop: The Fables of Odo of Cheriton". Journey to the Sea. Retrieved 26 January 2011.

^ Ysopet-Avionnet, the Latin and French texts, University of Illinois 1919; fable LXII, pp. 190–192; this is archived online

^ Les contes moralisés de Nicole BozonParis, 1889, pp. 144–145; archived here

^ William's Vision of Piers Plowman by William Langland, edited by Ben Byram-Wigfield (2006), Prologue, lines 146–181; online text here Archived 2011-08-07 at the Wayback Machine

^ "The Parliament of the Rats and Mice". Medieval Forum. SFSU. Archived from the original on 10 March 2022. Retrieved 26 January 2011.

^ Poésies morales et historiques d'Eustache Deschamps, Paris 1832, pp. 188–189

^ Robert Landru, Eustache Deschamps, Fédération des sociétés d'histoire et d'archéologie de l'Aisne, vol. XV 1969, p. 126

^ Fable 195

^ View on Wikimedia Commons

^ "Elizur Wright's translation". Oaks.nvg.org. Retrieved 26 January 2011.

^ Kriloff's Fables, translated by C. Fillingham Coxwell, London 1920, pp. 38–39; archived online

^ "Lyrics | LM.C – Bell The Cat (English)". SongMeanings. 25 April 2010. Retrieved 26 January 2011.

^ "Bell the CAT/LM.C". YouTube. 18 November 2007. Archived from the original on 2021-12-12. Retrieved 26 January 2011.

^ Who will bell the cat?. OCLC 1037155724.

^ "Who Will Bell the Cat?". Publishers Weekly. PWxyz LLC. February 19, 2018. Retrieved April 6, 2022.

^ p. 135, Tsewang, Pema. 2012. Like a Yeti Catching Marmots. Boston: Wisdom Publications.

^ Exhibited at the 1888 Salon; photo online

^ "See online". Archived from the original on July 20, 2011. Retrieved 17 August 2012.

^ "In the Musée Denon de Chalon-sur-Saône". Philibert-leon-couturier.com. Retrieved 17 August 2012.

^ "In the Musée La Fontaine at Château Thierry". Retrieved 17 August 2012.

^ George Baxley. "baxleystamps.com". baxleystamps.com. Retrieved 17 August 2012.

^ View online Archived 2012-03-25 at the Wayback Machine

^ The score is printed in: John Metz, The Fables of La Fontaine: A Critical Edition of the Eighteenth-Century, Pendragon Press 1986, p. 45

^  Op. 85, 1879, Score at Gallica

^ Liedernet

^ Op. 123, Liedernet

^ Bibliographie de la France, 14 March 1846, 127

^ "Pierre Perret chante 20 fables inspirées de Jean de La Fontaine Perret, Pierre, 1934–..." bibliotheques.avignon.fr.

^ Track available on Jamendo








]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Air pollution directly linked to increased dementia risk]]></title>
            <link>https://www.nature.com/articles/d41586-025-02844-9</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157897</guid>
            <description><![CDATA[Long-term exposure accelerates the development of Lewy body dementia and Parkinson’s disease with dementia in people who are predisposed to the conditions. Long-term exposure accelerates the development of Lewy body dementia and Parkinson’s disease with dementia in people who are predisposed to the conditions.]]></description>
            <content:encoded><![CDATA[ A study has found that exposure to air pollution can increase the risk of developing Lewy body dementia.Credit: Sonu Mehta/Hindustan Times/ShutterstockAn analysis of 56 million people has shown that exposure to air pollution increases the risk of developing a particular form of dementia, the third most common type after Alzheimer’s disease and vascular dementia.The study, published in Science on 4 September1, suggests that there is a clear link between long-term exposure to PM2.5 — airborne particles that are smaller than 2.5 micrometres in diameter — and the development of dementia in people with Lewy body dementia or Parkinson’s disease.The study found that PM2.5 exposure does not necessarily induce Lewy body dementia, but “accelerates the development,” in people who are already genetically predisposed to it, says Hui Chen, a clinician–neuroscientist at the University of Technology Sydney in Australia.PM2.5 exposureLewy body dementia is an umbrella term for two different types of dementia: Parkinson’s disease with dementia, and dementia with Lewy bodies. In both cases, dementia is caused by the build-up of α-synuclein (αSyn) proteins into clumps, called Lewy bodies, in the brain’s nerve cells, which cause the cells to stop working and eventually die. Studies have suggested that long-term exposure to air pollution from car-exhaust, wildfires and factory fumes, is linked with increased risks of developing neurodegenerative illnesses, including Parkinson's disease with dementia2.Study co-author Xiaobo Mao, who researches neurodegenerative conditions at Johns Hopkins University in Baltimore, Maryland, says he and his colleagues wanted to determine if PM2.5 exposure also influenced the risk of developing Lewy body dementia. They analysed 2000–2014 hospital-admissions data from 56.5 million people with Lewy body dementia and Parkinson’s disease with or without dementia. The data served to identify people with severe neurological diseases.They found that long-term PM2.5 exposure was associated with an increased risk of hospitalization for all three neurodegenerative conditions, including a 12% increased risk for severe dementia with Lewy bodies that required hospitalization. They noted that living in areas of higher PM2.5 exposure was linked with a higher relative risk of Lewy body dementia — including dementia with Lewy bodies and Parkinson’s disease dementia — compared with Parkinson’s without dementia.Source: Ref. 1The team then performed experiments in mice to investigate why exposure to air pollution affected dementia risk. Mice were exposed to PM2.5 pollution through their nostrils, then the researchers tested for behaviours linked with dementia-like problems. After ten months of PM2.5 exposure, mice showed behavioural challenges in maze exploration tests for spatial memory, and tasks that tested their recognition of new objects. At ten months, the team also observed a substantial increase in the build-up of αSyn in the animals’ brains.Exposure to PM2.5 for ten months also caused the shrinkage of the medial temporal lobe in mice — a brain region which is responsible for memory formation and retrieval. In comparison, there were no changes to the brains of genetically modified mice lacking αSyn, suggesting the protein is required for neurodegenerative pathology.The team also found clumps of αSyn in the gut and lungs of mice exposed to PM2.5, but not in the control or genetically modified mice. Mao says that αSyn acts like a seed, which can propagate and spread from the gut to the brain by way of the gut–brain axis, and eventually cause Alzheimer’s disease or Lewy body dementia. PM2.5 also accumulates in the lungs, causing inflammation before entering the bloodstream and crossing the blood–brain barrier.Predisposition neededThe researchers next investigated gene-expression changes caused by PM2.5 exposure in mice and compared them with gene-expression changes observed in people with Lewy body dementia. They focused on the anterior cingulate cortex — a brain region linked with cognitive deficits in people with dementia. They found a strong correlation of gene-expression changes between PM2.5-exposed mice and people with Lewis body dementia and Parkinson’s disease with dementia, but no correlation with Parkinson’s disease without dementia.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Postal traffic to US down by over 80% amid tariffs, UN says]]></title>
            <link>https://www.dw.com/en/postal-traffic-to-us-down-by-over-80-amid-tariffs-un-says/a-73905988</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157837</guid>
            <description><![CDATA[Postal flows to the United States have almost come to a halt, with 88 operators worldwide fully or partially suspending services, the Universal Postal Union said.]]></description>
            <content:encoded><![CDATA[Postal traffic to the United States plunged over 80% after new tariffs announced by the Trump administration came into effect on August 29, the Universal Postal Union (UPU), a UN agency, said on Saturday.

It noted that 88 operators worldwide have fully or partially suspended the shipping of parcels to the US.

What is the de minimis exemption about?

US President Donald Trump's administration announced in late July that it was abolishing the de minimis exemption on small packages entering the United States from August 29. 

The exemption, which had been in place since 1938, allowed items worth $800 (€680) or less to be shipped to the US duty free.US tariffs: How one German firm is copingTo view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video

The number of de minimis packages entering the US skyrocketed from 140 million in 2014 to 1.36 billion packages by 2024, according to the US Customs and Border Protection agency.

Critics say the flood of low-value imports hurts US retailers, means potentially unsafe items could flow unchecked into the country and makes it easier to ship fentanyl and other drugs into the United States.

What did the UPU say?

The new rules mean all parcels shipped to the US are subject to tariffs.

In addition, postal operators and transport firms are responsible for collecting the duties and processing the paperwork.How businesses are dealing with Trump's new trade tariffsTo view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video

But the UPU said operators didn't have enough time to prepare for the changes, or to put in place mechanisms to collect the duties and establish a link with the relevant US authorities.

This caused "major operational disruptions," it added.

The agency is working on "the rapid development of a new technical solution that will help get mail moving to the United States again," UPU Director General Masahiko Metoki said in a statement.

The list of postal services that have announced a halt to parcel shipping for business customers to the US includes Mexico, Germany, France, Spain, Italy, Australia, Japan, Taiwan, India and Switzerland.

Edited by: Rana Taha
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[More and more people are tuning the news out: 'Now I don't have that anxiety]]></title>
            <link>https://www.theguardian.com/society/ng-interactive/2025/sep/01/news-avoidance-high-anxiety</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157784</guid>
            <description><![CDATA[Emotional toll of constant negative news and unlimited access to ‘doomscrolling’ has led to record-high news avoidance]]></description>
            <content:encoded><![CDATA[News has never been more accessible – but for some, that’s exactly the problem. Flooded with information and relentless updates, more and more people around the world are tuning out.The reasons vary: for some it’s the sheer volume of news, for others the emotional toll of negative headlines or a distrust of the media itself. In online forums devoted to mindfulness and mental health, people discuss how to step back, from setting limits to cutting the news out entirely.“Now that I don’t watch the news, I just don’t have that anxiety. I don’t have dread,” said Mardette Burr, an Arizona retiree who says she stopped watching the news about eight years ago. “There were times that I’d be up at two or three o’clock in the morning upset about something that was going on in the world that I just didn’t have a lot of control over.”She’s not alone. Globally, news avoidance is at a record high, according to an annual survey by the Reuters Institute for the Study of Journalism published in June. This year, 40% of respondents, surveyed across nearly 50 countries, said they sometimes or often avoid the news, up from 29% in 2017 and the joint highest figure recorded.The number was even higher in the US, at 42%, and in the UK, at 46%. Across markets, the top reason people gave for actively trying to avoid the news was that it negatively impacted their mood. Respondents also said they were worn out by the amount of news, that there is too much coverage of war and conflict, and that there’s nothing they can do with the information. Illustration: Angelica Alzona/The GuardianJulian Burrett, a British marketing professional, said he’s intentionally unplugged from the news since the pandemic, after feeling almost addicted to constant negative updates. He’s deleted most media apps from his phone and avoids TV bulletins. Last year, he even started a small Reddit community, r/newsavoidance, to “consider the pros and cons, tips and tricks, and tools of avoiding news”.Others who spoke to the Guardian described varied approaches. One said he checks in on the news once a week to stay informed without being overwhelmed. Another said he has shunned the news for years, citing its effect on his mood and a broader distrust in the press. A Maryland man described feeling “enraged” by recent political developments, and tries to set boundaries by scanning headlines only.Studies suggest that increased exposure to news – particularly via television and social media, and especially coverage of tragic or distressing events – can take a toll on mental health.For decades, Roxane Cohen Silver has examined the consequences of consuming media about crises, from 9/11 and the Covid-19 pandemic to climate-related disasters and mass shootings.“With greater exposure, we see greater distress in people’s reports of their mental health. Greater anxiety, greater depression, greater post traumatic stress symptoms, acute stress symptoms,” said Silver, professor of psychology, medicine and public health at the University of California, Irvine.In recent years, her research has found political polarization to be a major stressor for people in the US. Similarly, political concerns topped the list last year in the American Psychological Association’s Stress in America poll, with the economy and spread of false news also ranking prominently.With the rise of smartphones and social media, opportunities for contact with distressing content have exploded, Silver noted.“There’s just ample opportunity to be exposed to news all the time, through either push notifications on people’s phones, or people can be consuming news across many different modes simultaneously,” she said.Viewing graphic imagery, in particular, is associated with psychological distress – a concern in an era when disturbing images of tragedies circulate freely beyond newsrooms’ control.A growing body of advice online promotes healthier ways to consume news. Much of it focuses on creating guardrails so people can be deliberate about finding information when they’re ready for it, instead of letting it reach them in a constant stream. This might include signing up for newsletters or summaries from trusted sources, turning off news alerts and limiting social media.“People can stay informed without doomscrolling,” Silver said. Applying learnings from her research to her own life, she reads news online, but skips videos, television and social media.“I don’t see any psychological or physical benefit from consumption of those kinds of images,” she said. “So if I’m reading a story and there is a video, I don’t click on it.”She suggests setting specific windows of time to read the news rather than staying immersed in that environment constantly, noting that it helps if people feel a sense of control over how much they’re being exposed.Benjamin Toff, director of the Minnesota Journalism Center at the University of Minnesota, studied the trend in his book Avoiding the News. He draws a key distinction between those who consistently avoid the news and those who simply limit their consumption – the latter, he says, is “perfectly healthy”.“We live in a world in which you can access news 24/7 and be inundated with information at all times. But that doesn’t mean you should,” he said.What worries him and his co-authors is when withdrawal turns into a cycle that deepens social divides, leaving some groups less likely to participate in political life.“The more you disengage, disconnect from the news, the harder it becomes to try to make sense of what’s happening on any given story,” he explained.The authors observed that consistent news avoidance tends to be more common among young people, women, and lower socioeconomic classes.“If you believe as we do, that normatively, we want people to be able to have the same opportunities to engage politically, to vote, to be vocal about the political issues that matter, then we think it’s a problem that people are disengaging from news,” Toff said.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What Really Caused the Sriracha Shortage? (2024)]]></title>
            <link>https://fortune.com/2024/01/30/sriracha-shortage-huy-fong-foods-tabasco-underwood-ranches/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157567</guid>
            <description><![CDATA[Sauce-maker David Tran and farmer Craig Underwood came together from different worlds to create an American icon. After 28 years, it fell apart in one day.]]></description>
            <content:encoded><![CDATA[On the day that the foundation of Craig Underwood’s business collapsed, he was on vacation—at the beach with his wife, daughters, and grandchildren in Hawaii.



It was November 2016, and the fourth-generation California farmer had just completed a perfect pepper harvest—another high point for a business, Underwood Ranches, that had grown exponentially over three decades on the strength of a single crop. As the sole supplier of the juicy red jalapeños for sriracha, Huy Fong Foods’ iconic fiery-red chili-garlic sauce, Underwood’s empire of peppers had spread from a 400-acre family farm in the 1980s to 3,000 acres across two counties outside Los Angeles. 



Sriracha’s rise had by then become the stuff of business legend. That spicy, slightly sweet, good-on-everything sauce, in the instantly recognizable bottle with its white rooster emblem and bright green nozzle, was the brainchild of David Tran, who had first devised the recipe and sold the stuff in L.A. in 1980 as a Vietnamese refugee starting a new life for his family. 



Tran’s business motto is “make product, and not profit,” but Huy Fong had become the No. 3 hot sauce brand in America—all as a private company, without selling even the smallest share to the country’s Big Food titans. At the time, Tran’s green-tipped bottles could be found in one in 10 American kitchens and on the International Space Station.


David Tran (left) built Huy Fong Foods around his hit sriracha recipe. The California farmer Craig Underwood was his exclusive chili supplier.Tran: Courtesy of Huy Fong Foods; Underwood: Spencer Lowell for Fortune



Sriracha’s success grew from the firm ground of Underwood and Tran’s business partnership: Underwood supplied all Huy Fong’s chilies, and Tran was Underwood Ranches’ only pepper buyer. By 2012, Tran had built a gleaming 650,000-square-foot factory less than two hours from Underwood’s Ventura County headquarters. On a tour of the site, he told Underwood that together they would fill it with chilies.The two men came from different worlds, but they had a lot in common: Soft-spoken patriarchs with kind eyes and faces craggy with laugh lines, both had remained workaholics well into their seventies. Over the 28 years they’d been in business, the two had broken bread together with their wives, watched each other’s children grow up, stood together through hard times and business crises. They had even met up, with their families, to talk about succession. 



Just days earlier, after the last truckload of the 2016 harvest had been delivered, Underwood and Tran had sat together and mapped out the 2017 growing season, and what Tran would pay in advance for the tens of millions of pounds of peppers Underwood promised him. As usual, the agreement was verbal, sealed with a nod and a handshake, not contracts or lawyers.



Then, on Nov. 10, at his vacation rental on Kauai, Underwood got a call with news that he could barely take in. His farm’s chief operating officer, Jim Roberts, told him that the relationship had ended, severed in one afternoon by an argument over payment for next season’s crop. Underwood Ranches and Huy Fong Foods would never do business together again. 



“That’s one way to ruin a vacation,” Underwood now says ruefully. 







The schism turned out to be even more catastrophic than either side could have imagined. It left Tran without the peppers he needed to meet the ever-growing demand for his sriracha. Since he lost Underwood’s chilies, his massive factory in Irwindale, Calif., has operated sporadically, at a fraction of its capacity. For the first year after the split, Huy Fong got by on stockpiled mash and Mexican chilies, which were cheap because of a glut. But supply has often been spotty since then: In the first half of 2023, Huy Fong had no chilies at all.Underwood, meanwhile, faced financial ruin: The vast swaths of land that he had purchased or leased to grow jalapeños couldn’t be planted without a buyer. He was locked into 25-year leases on much of the land he had expanded into, and he didn’t have cash on hand to pay his own suppliers. He took out loans, sold some parcels, and laid off 45 workers. 



Both businesses lost millions. The two men became bitter enemies—and they offer sharply contrasting accounts of what went wrong. 



At first, Underwood recalls, he was confused and hurt. “We were trying to figure out what the hell’s going on,” he tells me when I visit his offices in Camarillo, Calif., in December. “Because we were really vulnerable, both in the percentage of our business that he commanded—and I guess our belief that we were going to have a long-term relationship.” But he soon became convinced, Underwood tells me, that Tran’s intentions were bad, and had been for some time. “Basically, he really was out to destroy me,” he says. “He didn’t give a damn about me or our family or all that we’d done together.”



Over at Huy Fong, feelings were similarly raw. Tran felt betrayed, and blindsided by accusations that he had been underhanded. For most of three decades, he had remained loyal to Underwood as his only pepper producer, and each year he had handed over millions on the promise of a harvest, a gesture that he saw as an act of faith. Now all that trust had collapsed in a petty argument over money.



Tran has come to believe that Underwood was trying to drive him to bankruptcy, then steal his sauce business. “I helped him because he grew chili for me,” he says. “He made money, he owned land. But it is not enough. He wanted to take over my business.” It felt like being “stabbed in the back,” adds Donna Lam, Tran’s sister-in-law and executive operations officer.Following the 2016 blowup, months of tense negotiations between the two parties to try to resuscitate the business arrangement failed. In 2017, Huy Fong Foods sued to recover an overpayment for the 2016 harvest, and Underwood Ranches countersued, alleging fraud and breach of contract. A jury found in the farmer’s favor, awarding him $13.3 million in compensatory damages and $10 million in punitive damages. It also found that Huy Fong had overpaid Underwood $1.4 million for the 2016 growing season, and ordered Underwood Ranches to reimburse that amount. 



But the legal resolution didn’t ease either company’s struggles. Meanwhile, the fallout from the breakup continues to leave sriracha lovers scrambling to get their fix. Those once-ubiquitous bottles became scarce and at times disappeared from supermarket shelves. Headlines about the Great Sriracha Shortage led to stockpiling, and the sauce started selling on the online resale market for up to $80 a bottle. Dozens of copycat srirachas have thrived amid the original’s scarcity, including versions from the likes of Tabasco and Roland, and generics from supermarket chains. 



There’s a cruel irony to the predicament of Craig Underwood, who’s now 81, and David Tran, 78. One man with thousands of acres of pepper fields, but nobody to buy his peppers. Another with a massive pepper factory, and not enough peppers to keep it running. Meanwhile, an adoring fan base pines for the product the men made together, even as the two remain estranged—victims, perhaps, of their own runaway success.







What makes sriracha special? Tran’s sauce is a simple uncooked and unfermented puree, made by grinding together fresh red jalapeños, sugar, garlic, vinegar, and two preservatives. And it truly is good on everything, food writer and chili sauce aficionado Matt Gross says: “It’s just a really great, balanced blend, and it adapts well. It’s not too spicy. It’s not too garlicky. It’s not too vinegary.” 



Tran’s striking product design helps: The iconography of the rooster picture (to commemorate the year of Tran’s birth, 1945, in the Chinese astrological calendar) and that jaunty green nozzle make a Huy Fong sriracha bottle hard to miss. “It is a gorgeous, gorgeous object,” Gross says.Sriracha bottles being filled at Huy Fong Foods’ 650,000-square-foot factory in Irwindale, Calif. Spencer Lowell for Fortune



Though Tran loosely based his sauce on a Thai fermented dip for eggs and seafood, and named it for the coastal Thai town of Si Racha, Huy Fong’s sriracha is quite different—thicker and less sweet. Still, its being named for a town meant that “sriracha” couldn’t be trademarked in the U.S.—a fact that became significant when other brands began using the product name.



Tran’s timing for launching sriracha was impeccable; it arrived just as American tastes were beginning to broaden and become more adventurous. In 1980, when Tran started bottling his sauce in an industrial space he rented near Los Angeles’ Chinatown, America was not yet a place of ghost-pepper-eating contests or tattooed hipster chefs touting bespoke chili-sauce brands. “I wasn’t thinking of selling it mainstream to the Americans,” he explained in 2013 for a Vietnamese American oral history project at the University of California, Irvine. “I was going to sell it to Chinese or Vietnamese.”



Huy Fong made three chili sauces, but it was sriracha that really caught on, first in California’s immigrant communities, and then on a much vaster scale. Kara Nielsen, a food trends researcher, remembers first encountering the sauce when she was a pastry chef in the 1990s at a farm-to-table restaurant in Berkeley. Although it wasn’t offered to customers, there was always a bottle of the “rooster sauce” on the table during staff meals, she says: “It was used by the Latino and Asian cooks to basically add chili heat to anything.” Within a few years, she says, foodies had taken to the product, eagerly squirting it on their Vietnamese banh mi sandwiches in San Francisco’s Tenderloin district.



As demand ramped up, Tran’s big challenge was finding a stable source of fresh, red jalapeños—the freshness being, in his view, the key to his sauce’s flavor. At first he relied upon local supermarkets and wholesalers at L.A.’s Central Market. But the supply was inconsistent and the timing was tricky: Most jalapeños are sold when they’re crisp and green, but Tran’s sauce requires the sweeter, less-grassy version of the fruit, after it ripens to red—but before it overripens and becomes soft. That makes it a finicky product for farmers to grow and transport.







The answer to Tran’s conundrum came in a letter. In nearby Ventura County, Craig Underwood was facing headwinds keeping his family farm going. California’s conventional vegetable farming landscape was changing, and Underwood had pivoted to growing baby vegetables and salad greens. The advent of “baby-cut” carrots (larger carrots cut to snackable size) threatened that business too. In 1988, a seed supplier mentioned to Underwood that he had heard about a guy pounding the pavement for peppers for chili sauce in L.A., Underwood recalls: “I wrote a letter to David and said, ‘Would you like me to grow some peppers?’ ” Tran contracted Underwood to grow 50 acres—and so began a lucrative relationship for both men. Over the next three decades, they became, if not exactly close friends, at least friendly associates. When the city of Irwindale tried (unsuccessfully) to evict Tran’s new sauce factory in 2013, saying the chilies were releasing spicy fumes into the surrounding neighborhoods, Underwood testified on his behalf at a city council meeting.



Meanwhile, sriracha took off on a scale nobody could have predicted. As the American culinary palate has become more international, Huy Fong’s rooster sauce has grown ubiquitous. Huy Fong remained an independent company, turning down offers to buy or invest from large food corporations, and has never spent a penny on advertising. But the brand spread rapidly by word of mouth, creating a fandom that has made the sauce into a kind of identity statement, with festivals, online videos, rooster-branded T-shirts, and streetwear brand collabs. Huy Fong doesn’t disclose revenue figures, but according to the market research firm IBISWorld it had sales of $131 million in 2020.


At Coachella in 2017, a festival goer showed his love for Huy Fong’s sriracha. David McNew—Getty Images for Coachella



Sriracha has achieved the rare feat of creating its own category of culinary product, a craveable flavor that has shown up in mass-marketed foods from McDonald’s chicken sandwiches to Doritos’ Screamin’ Sriracha chips, and in the kitchens of Michelin-starred chefs. “The lure of Asian authenticity is part of the appeal,” the writer John T. Edge observed in the New York Times in 2009, describing the “polyglot purée” beloved by chefs including Jean-Georges Vongerichten.







The exclusive, symbiotic relationship that Huy Fong Foods and Underwood Ranches developed was “highly unusual in the processing business,” Underwood says in a 2013 documentary. “But as long as they’re selling more product, we have to be growing it for them. It’s a big job. A huge job.”



That film, Sriracha, now feels like a kind of time capsule—a snapshot of the two businessmen flying closer and closer to the sun. The relationship of the sauce maker and the farmer was the emotional heart of the film, and its director, Griffin Hammond, remembers finding the men’s relationship “beautiful”: “They both spoke so fondly of each other,” he tells me. How did that beautiful relationship fall apart so quickly and brutally? It’s a question both Underwood and Tran still puzzle over, and sriracha fans speculate about online. But the basic story is laid out, starkly, in court papers from the lawsuit and countersuit that followed the imbroglio.



As Huy Fong’s business grew, so too did Tran’s need for massive quantities of chilies, and Underwood kept increasing the farm’s pepper fields, reducing his other crops. To reassure the grower that he wouldn’t be financially wiped out if one year’s pepper crop failed, the companies agreed in 2008 to switch to a system of acreage instead of volume, with Huy Fong assuming the risk by prepaying at the beginning of the growing season to cover the costs of seeds, equipment, and labor. Working this way, the two companies kept ramping up yields and production, to a height of 100 million pounds of peppers in 2015. 



That’s the year that trust between the two companies began to erode. Tran started a separate company, ChiliCo, to buy and sell chili peppers. Underwood didn’t want to work with ChiliCo because he feared it wouldn’t have the assets to guarantee payments. To make matters worse, Underwood says, Tran and Lam made several failed attempts to hire Roberts, his COO, to work for ChiliCo. (Lam says the offers to Roberts were always intended to supplement his income at Underwood Ranches, and not to poach him.)



Things came to a head that terrible afternoon in November 2016. Recollections differ, but what’s agreed upon is this: On Nov. 9, Roberts drove over to Huy Fong’s factory at Tran’s request, to look at some equipment. Tran and Lam called Roberts into his office for a conversation, which turned contentious. 



They disagreed about what price Huy Fong should prepay for next season’s peppers, whether Tran could get those jalapeños cheaper from overseas, and whether Roberts should accept Tran’s offer to work for him. The row raged on and on. Things were said that couldn’t be taken back. And by the time Roberts left a few hours later, a 28-year business relationship was effectively over. 







Seven years after the rift, both companies are creaking along, doing the best they can to move forward. 



On a visit to Huy Fong’s factory in December, I watched bottles of sriracha being filled, sealed, topped with green nozzles, and packed into boxes to ship out to 26 nations. Workers, mostly dressed in sriracha-themed T-shirts from the factory swag shop, wore hairnets and masks but seemed accustomed to the throat-tickling capsaicin fumes in the air.



Ominously, there were no unprocessed chilies on hand—none had come in lately. Part of the problem, Tran and Lam explain, is quality control: Freshness is what makes Huy Fong’s sauce better than the competition, and Tran says he often has had to turn away truckloads of that delicate red jalapeño because they didn’t make the journey from suppliers intact, were not properly refrigerated, or were picked when green.


Huy Fong’s factory outside Los Angeles converts barrels of chili mash into sriracha. These days, the barrels are often empty because of a shortage of chilis. Spencer Lowell for Fortune



Even with the disruptions in production caused by the ongoing chili supply crisis, Huy Fong hasn’t laid off any of its 115 employees, Lam tells me. “David paid out of his pocket to keep them there,” Lam says. “This is not the person that would cheat someone.” Meanwhile, an hour and a half’s drive away, Underwood has launched his own chili sauce business. Underwood Ranches has a long way to go before it can put the disaster of the past few years behind it, but its fields are now planted with a mix of tomatoes for canning, potatoes, onions, Brussels sprouts, pumpkins, and other crops. 



At Underwood’s processing facility in Camarillo, the ribbon mixers were churning out the last of a much smaller 2023 pepper harvest to make its own sriracha, known as Dragon Sriracha. It’s a brand that hasn’t broken through yet, but it’s growing—with a couple of big distribution deals on the horizon, Underwood says. He recently started shipping his sriracha to 24 Costco branches. However reluctantly, Tran’s onetime partner is joining his growing field of competitors.







The 800-pound gorilla in American hot sauce is, of course, Tabasco, which produces the nation’s most popular chili sauce. The McIlhenny Company, founded in 1868 on Louisiana’s Avery Island, launched its own sriracha in 2014. It wasn’t until 2022, however, that Tabasco’s version of Tran’s sauce really took off, and Lee Susen, McIlhenny’s chief sales and marketing officer, makes no bones about why: It was the “shelf voids” that the shortage of Huy Fong’s product left, he tells Fortune. 



Tabasco wasn’t going to let Huy Fong’s crisis go to waste, so in September 2022 it launched the website srirachashortage.com. “LOOKING FOR SOMETHING?” it asks in large white block letters as a Tabasco sriracha bottle surges upward, looking at first just like a Huy Fong bottle (though with a nozzle that’s olive green rather than bright green). 


In September 2022, Tabasco launched the website
srirachashortage.com, slyly referencing the shortage of Huy Fong Sriracha. 



Previously the challenge Tabasco faced with its sriracha, Susen says, was that “most consumers saw sriracha as a brand. They didn’t recognize it as a product type.” But when Huy Fong’s iconic bottles disappeared and were replaced by various other srirachas, that began to change: It became just another pantry staple. The brand loyalty that had been Huy Fong’s economic “moat”—business parlance for a competitive advantage one company holds in its sector—started to erode. And that’s when the biggest hot sauce brand in America swooped in and took the crown. Tabasco had the bestselling sriracha in the country for the second half of 2023, according to NielsenIQ. Sriracha, the product, is more popular than ever—it’s now in one in three U.S. kitchens, according to market research firm Circana—but most of it is not Huy Fong’s. “It’s a very exciting time to be in the hot sauce business,” Susen says. “And certainly the sriracha business.”







Tabasco’s win is Huy Fong’s loss. And it’s an epic comedown for a great American brand, an ignoble ending to a storied American business partnership between a hardworking Vietnamese refugee and a salt-of-the-earth California farmer. 



Maybe Craig Underwood and David Tran were, on some level, victims of their own success? “We hooked onto that wagon and it really took off,” Underwood says now. “And we never could have predicted it when we started.” 



Indeed, when Tran was grinding chili sauce in his kitchen and Underwood was farming baby carrots, neither could have imagined that they’d one day be managing hundreds of employees and making deals worth millions of dollars. In retrospect, Underwood says, he wishes they had built in more legal safeguards to protect their businesses from the beginning. He wonders whether he should have spread out his risk, instead of treating the arrangement between the two companies as a partnership. He wishes sometimes that he had sold his pepper production operations to Huy Fong Foods (an offer he made at one point) and started afresh. 



Both Tran and Underwood brought great qualities to the partnership: grit, inventiveness, passion, ambition. But the skills and disposition necessary to make a startup a success are quite different from the competencies that people running large companies need. That’s one reason many founders end up selling or taking investments, says Maurice Schweitzer, a professor of operations, information, decisions, and management at the Wharton School. Doing so can feel like “selling out,” but bringing in a more experienced partner can also be stabilizing. “Nobody can understand what it was like,” says Underwood. “In this, everybody turned out to be a loser.”



It’s impossible to know for sure, but a change in ownership structure might have made all the difference, Schweitzer says. Human relationships are fraught, and almost always include an element of competitiveness. Unchecked, that competitiveness can grow like a weed and take over, especially when a business is expanding rapidly: “There’s going to be some point of friction; there’s going to be some miscommunication,” Schweitzer says. “We need some mechanism to correct that and put it back on track.”



For instance, when a dramatic leadership crisis erupted last November at the AI startup OpenAI, Microsoft’s role as a major investor helped force a quick resolution. “With Microsoft, there’s a grownup in the room,” Schweitzer says. “They can keep their eye on the ball.” 



But with Huy Fong and Underwood Ranches, Schweitzer points out, “it’s just two people left on their own … There isn’t, like, some arbitrator or banker; there wasn’t a third party to bring them together.”






Harvesting red jalapeño peppers—the secret to good sriracha—at Underwood Ranches.Spencer Lowell for Fortune



A broken business deal doesn’t quite rise to the level of tragedy. But there is something very sad about how David Tran and Craig Underwood were willing to walk away from each other, leaving all that they’d built in peril and untold millions on the table. Once their trust was broken, their enmity grew stronger even than their desire to succeed.With so much at stake and so much opportunity remaining, I ask each man: Would they ever come back together?



Absolutely not, Tran tells me. “I need chili, but a guy like that? Why?” he says. “Without his chili, yeah, we make less money. But no.” Lam says her family has tried to put the affair behind them. “At the end it just got really messy,” she says. “And David and I, we don’t want to talk about it, because what’s done, it’s done. It doesn’t matter … What’s lost is lost. And that’s the sad part about it. We’re not going to think about the past. We need to think about the future.”



Underwood is similarly adamant when I ask whether he’d ever work with Huy Fong again. “Not with David,” he says. “If somebody else took over, purchased Huy Fong Foods, yeah, we’d certainly want to do business. But not with David.”



Looking back is hard for Underwood, too, he tells me, and he sometimes wonders how he got through those first few years after the breakup. “Nobody can understand what it was like to go through that whole thing,” he says. “I mean, it was hell.” 



Of course there’s one person who probably could understand it. And seven years later, that’s one thing the former partners still have in common, as Underwood acknowledges: “In this,” he says, “everybody turned out to be a loser.” —Jasper Chapman contributed reporting to this story.



EDITOR’S NOTE: This article has been updated to correct the description of the topics discussed in the Nov. 9, 2016 meeting.



This article appears in the February/March 2024 issue of Fortune with the headline “Hot Mess.”Fortune Global Forum returns Oct. 26–27, 2025 in Riyadh. CEOs and global leaders will gather for a dynamic, invitation-only event shaping the future of business. Apply for an invitation.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Algebraic Effects in Practice with Flix]]></title>
            <link>https://www.relax.software/blog/flix-effects-intro/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157466</guid>
            <description><![CDATA[Algebraic effects are not just a research concept anymore. You can use them in real software, today. Here's why you'd want to do that, in order of importance.]]></description>
            <content:encoded><![CDATA[ Algebraic effects are not just a research concept anymore. You can use them in real software, today. Here’s why you’d want to do that, in order of importance:


Effects make your code testable
One of the central goals of enterprise software development. Dependency injection, mocking, architecture patterns like clean, hexagonal, DDD are all meant to tackle this. Effects solve this elegantly by separating the “what” from the “how”.


Effects give immediate visibility into what your own and 3rd-party code is doing
Supply chain attacks are real. And they will get worse with more AI slop entering our codebases. Tools like Go’s Capslock fix this by following the whole chain of calls to stdlib functions. Effects provide this by design, as all effects are tracked by the type and effect system.


Effects enable user-defined control flow abstractions
Solving the “what color is your function” problem1. You can also leverage effects to implement Async/await, coroutines, backtracking search and other control flow patterns as user libraries without hard-coding these features into the language.


Algebraic effects come from the pure functional world, serving a purpose similar to monads — keeping track of and having control over side effects. Like monads, they enable us to write our core logic with pure functions and push side effects like IO outwards, closer to application boundaries.
Unlike monads, effects are easy to grasp for a regular developer and give immediate benefits when starting out. For me personally they’re a more natural abstraction for managing side effects — after all, effects are in the name.
Starting out as an academic concept, algebraic effects were introduced to the world by research languages like Eff, Koka, Effekt, Frank, Links, and more recently Ante.
People have also applied effects in practice, so far usually via a monad-based approach, by making libraries in established languages like Scala Kyo / Cats Effect / ZIO; Typescript Effect and Effector, C# language-ext, C libhandler and libmprompt, C++ cpp-effects, various Haskell libraries, etc.
In addition to forcing you into a monadic way of thinking, libraries implementing effects are limited by their host languages.
In this article, I will walk you through applying algebraic effects on a real world example using Flix, a new programming language that is built with effects from the ground up, and supports functional, logic and imperative paradigms.

Table of Contents

Type and Effect System: A Motivating Example
Effect Handlers: Building Intuition
Real-World App: AI movie recommendations
Where to Go From Here
Extra: Why Algebraic Effects are Algebraic and how they relate to monads
Footnotes


Currently only few languages support effects out of the box. The only one that I know of besides Flix is Unison. OCaml has a language extension, but there is no support yet in the type system. Haskell has added support for delimited continuations, but effects are still only available via libraries.
In addition to having a “type and effect system” that improves function signatures and makes sure all effects are handled, Flix supports traits, local mutability via regions, working with immutable or mutable data, and Go/Rust-like structured concurrency. It also has a first-class Datalog integration. But I will only focus on effects here. Let’s start.
Type and Effect System: A Motivating Example 🔗
Imagine a function called calculateSalary:
def calculateSalary(base_salary, bonus_percent):

Based on the function name and the signature, one can assume it’s just a pure function that does some calculations. In a statically typed language you are also guaranteed that the function arguments and outputs will be of a certain type.
But even if the types are correct, nothing stops our little calculateSalary() from, say, sending an offensive email to your grandma2:
def calculateSalary(base_salary, bonus_percent):
    server.sendmail("grandma@family.com", "Your cookies are terrible!")
    return base_salary * (1 + bonus_percent/100)

If, on the other hand, you extend your type system with effects, you will see immediately in the signature that this function may do something fishy:
def calculateSalary(salary: Float64, percent: Float64): 
    Float64 \ {Email} = {
//            ^^^^^^^ Notice the Email effect!

Of course, in real life the issue it’s not usually about the grandma. Instead, this function could throw an exception — still quite dangerous. If you forget to handle the exception, your app will crash. Or another very realistic scenario is that calculateSalary() calls a database to get some employee details for calculations, and you forgot to provide a database connection string. That can also result in an exception or a panic.
Effect Handlers: Building Intuition 🔗
The job of the type and effect system is not just to improve our function signatures. It’s also making sure all the effects are handled somewhere. This is where effect handlers come in.
Usually when people talk about algebraic effects what they’re actually talking about is effect handlers. If you know exceptions, effect handlers are super easy to understand. Here’s a Jenga analogy:
Imagine the call stack is a Jenga tower. New blocks are carefully added each time you call a function.
Saurav S, Unsplash
When an exception is thrown, your whole nice Jenga tower gets destroyed, all the way up to the catch() block. The catch block can safely handle the error, but the stack is unwinded, meaning you lose all of the state you had in your program before throwing the exception. You have to build your tower again, from scratch.
When using effect handlers you can actually go back to your original computation after the handler is done handling the effect. The handler can also return some values back to your program, and it can even resume multiple times with different return values. You also still have the option of not resuming at all and aborting the program — that would be the effect equivalent of exceptions.
Back to the Jenga analogy: if your tower is about to fall down, with effects you can freeze it mid-collapse. You then call someone for help (handler), and they decide whether to let the tower fall, magically restore it to the previous statlte. Or even hand you different blocks to try the same move (call the continuation) again, possibly multiple times with different inputs. Your Jenga tower ends up looking more like a fork or a tree, with multiple different copies of your blocks branching out at some point from the base.
To make this more concrete, let’s start by reproducing exceptions with effects. Here’s how a try/catch looks like in Python:
def divide(x, y):
    try:
        return x / y
    except ZeroDivisionError:
        print("Division by zero!")
        return None

Here’s the equivalent code in Flix. We first define an Exception effect and a divide() function:
eff Exception {
    def throw(msg: String): Void
}

def divide(x: Int32, y: Int32): Int32 \ Exception = 
    if (y == 0) {
        Exception.throw("Division by zero!")
    } else {
        x / y
    }

And then provide a handler for this effect somewhere, preferably close to main():
def main(): Unit \ IO = 
    run {
        println(divide(10, 0))
    } with handler Exception {
        def throw(msg, _resume) = println("Error: ${msg}")
    }

What this does is registers an effect called Exception with a method throw(). We then perform this effect in our function when there’s an error, similar to throwing an exception in the Python version. Control is transferred to the effect handler, which then decides how to handle the exception, similar to a catch() block in Python.
Notice we never call resume() from the handler. This results in the program being aborted, just like with exceptions. Graphically, this can be represented as follows:
block-beta
    columns 2
    
    A["Statement 1"] space:1
    B["Statement 2"] space:1
    C["Statement 3"] space:1
    D["Perform Effect"] space:1
    space:1 E["Handle Effect"]
    space:1 F["Process & Exit"]
    space:1 space:1
    
    D --> E
    
    style D fill:#ffcccc,color:#000
    style E fill:#ccffcc,color:#000
    style F fill:#ccffcc,color:#000
So far so good, but this is not much different from Python. To really take full advantage of effect handlers, we can use resume() to return to the original computation and proceed from the line after the effect was performed:
eff ResumableException {
    def askForInput(): Int32
}

def divide(x: Int32, y: Int32): Int32 \ ResumableException = 
    if (y == 0) {
        let newY = ResumableException.askForInput();
        x / newY
    } else {
        x / y
    }

def main(): Unit \ IO = 
    run {
        println(divide(10, 0))
    } with handler ResumableException {
        def askForInput(_, resume) = {
            println("Enter a new divisor:");
            resume(5) // Or get from user input
        }
    }

block-beta
    columns 2
    
    A["Statement 1"] space:1
    B["Statement 2"] space:1
    C["Statement 3"] space:1
    D["Perform Effect"] space:1
    space:1 E["Handle Effect"]
    space:1 F["Resume"]
    space:1 space:1
    G["Statement 4"] space:1
    H["Statement 5"] space:1
    I["Complete"] space:1
    
    D --> E
    F --> G
    
    style D fill:#ffcccc,color:#000
    style E fill:#ccffcc,color:#000
    style F fill:#ffffcc,color:#000
I called the effect ResumableException here, but it’s not really an exception anymore, because the program continues normally.
At this point we can use this power bestowed on us by effects and handlers to roll our own Async/await:
eff Async {
    def await(url: String): String
}

def fetchData(): String \ Async = 
    Async.await("https://api.example.com/data")

def processData(): String \ Async = {
    let data = fetchData();
    "processed: ${data}"
}

def main(): Unit \ IO = 
    run {
        let result = processData();
        println(result)
    } with handler Async {
        def await(url, resume) = {
            // Simulate async HTTP request
            let result = "data from ${url}";
            resume(result)
        }
    }

See how easy that was? This approach also avoids function coloring, since we didn’t need to use special keywords anywhere. Here’s a graphic version:
block-beta
    columns 2
    
    A["Statement 1"] space:1
    B["Statement 2"] space:1
    C["await operation"] space:1
    space:1 H1["Start async work"]
    space:1 H2["⏳ Long pause..."]
    space:1 H3["⏳ Still waiting..."]
    space:1 H4["✅ Async complete"]
    space:1 F["Resume with result"]
    space:1 space:1
    D["Statement 3"] space:1
    E["Complete"] space:1
    
    C --> H1
    F --> D
    
    style C fill:#ffcccc,color:#000
    style H1 fill:#ccffcc,color:#000
    style H2 fill:#fff3cd,color:#000
    style H3 fill:#fff3cd,color:#000
    style H4 fill:#d1ecf1,color:#000
    style F fill:#ffffcc,color:#000
    style D fill:#e7f3ff,color:#000
    style E fill:#d4edda,color:#000
That’s cool, but we can do more. Effect handlers allow you to resume multiple times:
eff Choose {
    def choose(): Int32
}

def explore(): String \ Choose = {
    let x = Choose.choose();
    let y = Choose.choose();
    "${x}, ${y}"
}

def main(): Unit \ IO = 
    run {
        println(explore())
    } with handler Choose {
        def choose(_, resume) = {
            resume(1);
            resume(2);
            resume(3)
        }

block-beta
    columns 4
    
    A["Statement 1"] space:1 space:1 space:1
    B["Statement 2"] space:1 space:1 space:1
    C["Statement 3"] space:1 space:1 space:1
    D["Perform Effect"] space:1 space:1 space:1
    space:1 space:1 E["Handle Effect"] space:1
    space:1 F1["Resume 1"] F2["Resume 2"] F3["Resume 3"]
    space:1 G1["Statement 4a"] G2["Statement 4b"] G3["Statement 4c"]
    space:1 H1["Statement 5a"] H2["Statement 5b"] H3["Statement 5c"]
    space:1 R1["Resume to Main"] R2["Resume to Main"] R3["Resume to Main"]
    J["Statement 6"] space:1 space:1 space:1
    K["Complete"] space:1 space:1 space:1
    
    D --> E
    F1 --> G1
    F2 --> G2
    F3 --> G3
    H1 --> R1
    H2 --> R2
    H3 --> R3
    R1 --> J
    R2 --> J
    R3 --> J
    
    style D fill:#ffcccc,color:#000
    style E fill:#ccffcc,color:#000
    style F1 fill:#ffffcc,color:#000
    style F2 fill:#ffffcc,color:#000
    style F3 fill:#ffffcc,color:#000
    style G1 fill:#e6f3ff,color:#000
    style G2 fill:#ffe6f3,color:#000
    style G3 fill:#f3ffe6,color:#000
    style H1 fill:#e6f3ff,color:#000
    style H2 fill:#ffe6f3,color:#000
    style H3 fill:#f3ffe6,color:#000
    style R1 fill:#d4edda,color:#000
    style R2 fill:#d4edda,color:#000
    style R3 fill:#d4edda,color:#000
    style J fill:#cce5ff,color:#000
    style K fill:#b3d9ff,color:#000
With this, you can implement things like coroutines:
block-beta
    columns 3
    
    A1["Coroutine 1: Start"] space:1 A2["Coroutine 2: Start"]
    B1["Statement 1"] space:1 B2["Statement 1"]
    C1["yield to Co2"] H1["Scheduler"] space:1
    space:1 space:1 C2["Statement 2"]
    space:1 space:1 D2["yield to Co1"]
    space:1 H2["Scheduler"] space:1
    D1["Statement 2"] space:1 space:1
    E1["yield to Co2"] H3["Scheduler"] space:1
    space:1 space:1 E2["Statement 3"]
    space:1 space:1 F2["Complete"]
    F1["Complete"] space:1 space:1
    
    C1 --> H1
    H1 --> C2
    D2 --> H2
    H2 --> D1
    E1 --> H3
    H3 --> E2
    
    style C1 fill:#ffcccc,color:#000
    style D2 fill:#ffcccc,color:#000
    style E1 fill:#ffcccc,color:#000
    style H1 fill:#ccffcc,color:#000
    style H2 fill:#ccffcc,color:#000
    style H3 fill:#ccffcc,color:#000
    style A1 fill:#e6f3ff,color:#000
    style B1 fill:#e6f3ff,color:#000
    style D1 fill:#e6f3ff,color:#000
    style F1 fill:#e6f3ff,color:#000
    style A2 fill:#ffe6f3,color:#000
    style B2 fill:#ffe6f3,color:#000
    style C2 fill:#ffe6f3,color:#000
    style E2 fill:#ffe6f3,color:#000
    style F2 fill:#ffe6f3,color:#000
Generators:
block-beta
    columns 2
    
    A["Start generator"] space:1
    B["Statement 1"] space:1
    C["yield value 1"] H1["Return value"]
    space:1 H2["⏸️ Paused"]
    D["next() called"] H3["Resume generator"]
    E["Statement 2"] space:1
    F["yield value 2"] H4["Return value"]
    space:1 H5["⏸️ Paused"]
    G["next() called"] H6["Resume generator"]
    H["Statement 3"] space:1
    I["return (done)"] H7["Signal complete"]
    
    C --> H1
    H3 --> D
    F --> H4
    H6 --> G
    I --> H7
    
    style C fill:#ffcccc,color:#000
    style F fill:#ffcccc,color:#000
    style I fill:#ffcccc,color:#000
    style H1 fill:#ccffcc,color:#000
    style H3 fill:#ffffcc,color:#000
    style H4 fill:#ccffcc,color:#000
    style H6 fill:#ffffcc,color:#000
    style H7 fill:#ccffcc,color:#000
    style H2 fill:#fff3cd,color:#000
    style H5 fill:#fff3cd,color:#000
    style D fill:#e7f3ff,color:#000
    style G fill:#e7f3ff,color:#000
And backtracking search:
block-beta
    columns 4
    
    A["Start search"] space:1 space:1 space:1
    B["choose option"] space:1 space:1 space:1
    space:1 H1["Try option 1"] space:1 space:1
    space:1 space:1 C1["Explore path 1"] space:1
    space:1 space:1 D1["❌ Dead end"] space:1
    space:1 H2["Backtrack"] space:1 space:1
    space:1 H3["Try option 2"] space:1 space:1
    space:1 space:1 space:1 C2["Explore path 2"]
    space:1 space:1 space:1 D2["✅ Success!"]
    E["Resume with solution"] space:1 space:1 space:1
    F["Complete"] space:1 space:1 space:1
    
    B --> H1
    H1 --> C1
    D1 --> H2
    H2 --> H3
    H3 --> C2
    D2 --> E
    
    style B fill:#ffcccc,color:#000
    style H1 fill:#ccffcc,color:#000
    style H2 fill:#f8d7da,color:#000
    style H3 fill:#ccffcc,color:#000
    style C1 fill:#fff3cd,color:#000
    style D1 fill:#f8d7da,color:#000
    style C2 fill:#d1ecf1,color:#000
    style D2 fill:#d4edda,color:#000
    style E fill:#ffffcc,color:#000
    style F fill:#d4edda,color:#000
Hopefully this gives you a taste of how effect handlers work. This is just a sketch though — you can read more on this and see examples in the Flix docs.
 Question What's your primary programming language?   TypeScript/JavaScript   Python   Java or other JVM e.g Scala/Kotlin   C#   C++/C   PHP   Go   Rust   Other    ✓ Thanks for your input!
    
These questions help direct new content. Want to get notified when something new is posted? ✓ Saved!
  
Defining our own control flow abstractions is great, but most of the time regular async/await and/or coroutines are enough for the job.
What is extremely useful for daily programming is that effects let you separate the declaration of the effect (the operation, or the effect “constructor”) from it’s implementation, defined by the effect handler.
Add some effect definitions:
eff Database {
    def getUser(id: Int32): Option[User],
    def saveUser(user: User): Unit
}

Then use these definitions to perform effects in your code:
def updateUserEmail(userId: Int32, newEmail: String): Result[String, User] \ {Database} = {
    match Database.getUser(userId) {
        case Some(user) => {
            let updatedUser = {user | email = newEmail};
            Database.saveUser(updatedUser);
            Ok(updatedUser)
        }
        case None => {
            Err("User not found")
        }
    }
}

This replaces the need for dependency injection, since you can provide different handlers for these database operations in production vs testing:
def main(): Unit \\ IO = { // production handler, uses a real database
    run {
        updateUserEmail(123, "new@example.com")
    } with handler Database {
        def getUser(id, resume) = {
		        // real db query
            resume(user)
        }
        def saveUser(user, resume) = {
		        // real db query
            resume()
        }
    }
}

def testUpdateUserEmail(): Unit = { // test handler, just stubs
    let testUser = {id = 123, email = "old@example.com"};
    run {
        let result = updateUserEmail(123, "new@example.com");
        assert(result == Ok({testUser | email = "new@example.com"}))
    } with handler Database {
        def getUser(id, resume) = resume(Some(testUser))
        def saveUser(user, resume) = {
            assert(user.email == "new@example.com");
            resume()
        }
    
}

In my opinion, the biggest advantage that effect handlers give is that they abstract away the patterns associated with DDD, Clean Architecture, Hexagonal architecture, etc. commonly found in enterprise code.
All these architectures give you some sort of way to isolate your core logic, which should be pure, from infrastructure and app logic, with deals with external dependencies. But you have to commit to an architecture and the whole team has to be disciplined enough to stick to for this to work.
Using effects encourages separating the definition of effect operations from implementation by default, meaning you don’t really need these architecture patterns anymore.
This is great, since relying on team discipline exclusively rarely works. It also saves a bunch of time otherwise spent on bike shedding.
Effect handlers also allow you to easily install stubs, which you can use to create quick test cases without boilerplate, just by swapping handlers:
def testErrorConditions(): Unit = {
    run {
        let result = updateUserEmail(123, "new@example.com");
        assert(result == Err("User not found"))
    } with handler Database {
        def getUser(_, resume) = resume(None) // Stub: always return None
        def saveUser(_, resume) = resume()             // Won't be called
    }
}

def testSlowDatabase(): Unit = {
    run {
        let result = updateUserEmail(123, "new@example.com");
        assert(result.isOk())
    } with handler Database {
        def getUser(id, resume) = {
            Thread.sleep(100);  // Simulate slow query
            resume(Some({id = id, email = "old@example.com"}))
        }
        def saveUser(user, resume) = {
            Thread.sleep(50);   // Simulate slow save
            resume()
        }
    }
}

You can even make a handler that records all interactions instead of executing them. There are many possibilities here.
Real-World App: AI movie recommendations 🔗
To bring this all together, let’s make a real application using effects.
Our app will fetch some movie data from TheMovieDB, and then use an LLM to recommend some movies based on user preferences provided from the console.
Flix interoperates with the JVM, meaning we can call code from Java, Kotlin, Scala, etc.
First, let’s define the two custom effects we will need: MovieAPI and LLM:
eff MovieAPI {
    def getPopularMovies(): String
}

eff LLM {
    def recommend(movies: String, preferences: String): String
}

We can then perform the effects in main like so, providing some basic handlers that use the Flix’s stdlib HTTP client:
def getRecommendation(preferences: String): String \ {MovieAPI, LLM} = {
    let movies = MovieAPI.getPopularMovies();
    LLM.recommend(movies, preferences)
}

def main(): Unit \ {Net, IO} = 
    run {
        let suggestion = getRecommendation("action movies");
        println(suggestion)
    } with handler MovieAPI {
        def getPopularMovies(_, resume) = {
            let response = HttpWithResult.get("https://api.themoviedb.org/3/movie/popular", Map.empty());
            match response {
                case Result.Ok(resp) => resume(Http.Response.body(resp))
                case Result.Err(_) => resume("[]")
            }
        }
    } with handler LLM {
        def recommend(movies, prefs, resume) = {
            let prompt = "Movies: ${movies}. User likes: ${prefs}. Recommend one movie.";
            let response = HttpWithResult.post("https://api.openai.com/v1/completions", Map.empty(), prompt);
            match response {
                case Result.Ok(resp) => resume(Http.Response.body(resp))
                case Result.Err(_) => resume("Try watching a classic!")
            }
        }
    } with HttpWithResult.runWithIO

Notice that both effects are quite generic. So we can easily swap either the movie API or the LLM provider without touching anything in the core logic:
// Switch to different movie provider
with handler MovieAPI {
    def getPopularMovies(_, resume) = {
        let response = HttpWithResult.get("https://api.imdb.com/popular", Map.empty());
        // ... handle IMDB response format
    }
}

// Switch to different LLM provider  
with handler LLM {
    def recommend(movies, prefs, resume) = {
        let response = HttpWithResult.post("https://api.anthropic.com/v1/messages", Map.empty(), prompt);
        // ... handle Claude response format
    }
}

To get the user input we will need to include the standard Console effect:
def main(): Unit \ {Net, IO} = 
    run {
        Console.println("What movie genres do you enjoy?");
        let preferences = Console.readln();
        let suggestion = getRecommendation(preferences);
        Console.println("Recommendation: ${suggestion}")
    } with handler MovieAPI { /* ... */ }
      with handler LLM { /* ... */ }
      with Console.runWithIO
      with HttpWithResult.runWithIO

We can also add some basic logs using the standard Logger effect:
def getRecommendation(preferences: String): String \ {MovieAPI, LLM, Logger} = {
    Logger.info("Fetching popular movies...");
    let movies = MovieAPI.getPopularMovies();
    Logger.info("Getting LLM recommendation...");
    LLM.recommend(movies, preferences)
}

def main(): Unit \ {Net, IO} = 
    run {
        /* ... console interaction ... */
    } with handler MovieAPI { /* ... */ }
      with handler LLM { /* ... */ }
      with Console.runWithIO
      with Logger.runWithIO
      with HttpWithResult.runWithIO

That’s it! Let’s run the app and test it manually like so:
 flix run Main.flix
What movie genres do you enjoy?
> sci-fi horror
[INFO] Fetching popular movies...
[INFO] Getting LLM recommendation...
Recommendation: Based on your interest in sci-fi horror, I recommend "Alien" - a perfect blend of both genres!

We can also easily write tests for the core logic by providing test handlers for our movie and LLM effects:
def testRecommendation(): String = 
    run {
        getRecommendation("comedy")
    } with handler MovieAPI {
        def getPopularMovies(_, resume) = {
            resume("""[{"title": "The Grand Budapest Hotel", "genre": "comedy"}]""")
        }
    } with handler LLM {
        def recommend(movies, prefs, resume) = {
            resume("I recommend The Grand Budapest Hotel - perfect for comedy lovers!")
        }
    } with handler Logger {
        def log(_, _, resume) = resume()  // Silent in tests
    }

def runTests(): Unit \ IO = {
    let result = testRecommendation();
    println("Test result: ${result}")
}

Where to Go From Here 🔗
Read the Flix docs
Especially on cool features like effect polymorphism, effect exclusion etc. Check out code examples in the repo
Join the community and contribute with libraries
The Flix compiler and stdlib are quite feature-rich at this point, and having JVM interop means you have all the essentials you need to write practical code. But there are still very few pure Flix libraries. So it’s very valuable to contribute some. The ideas I can think of are, for example, rebuilding standard things like Web frameworks in an effect oriented way,. Or taking advantage of the unique feature set in Flix to build something entirely new.
Explore effect-oriented programming
While I personally like Flix and can recommend it to others, there are other ways you can use effects for real-world software. If you’re in Typescript or Scala, try out Effect or ZIO/Kyo/Cats. If you’re looking for other languages that support effects natively, and you’re not afraid of Haskell-like syntax, check out Unison. They have a bunch of other concepts I find cool, like a better distributed computing model and the code being content-addressed.
Thanks for reading! I hope this article was useful. Hit me up if you have questions or feedback, and check out my website, where I’m exploring sustainable tech and coding practices: relax.software
 Question What should I write about next?   More on Effect-oriented programming   More on the Flix programming language   Comparison of languages and libraries with effects support   General correct and maintainable software content    ✓ Thanks for your input!
    
These questions help direct new content. Want to get notified when something new is posted? ✓ Saved!
  
Extra: Why Algebraic Effects are Algebraic and how they relate to monads 🔗
Okay, practical people have left the room. Following sections are nerds-only.
For some reason, all the content I’ve been reading on algebraic effects uses this term a lot, but no one explains why specifically they’re called “algebraic”. So I did some digging.
Turns out, algebraic effects are “algebraic” because they can be described with laws and equations, like in algebra — the kind we learn at school. Which is I guess why they’re easier to grasp than monads — unlike algebra, you usually don’t study category theory in high school.
But the algebraic part only applies to the effect “constructors”, i.e the operations themselves like get() or put() for the state effect.
Effect handlers, on the other hand, are not algebraic at all, which can be a bit confusing. But it makes sense if you think about it — the purpose of handlers is to act as “deconstructors”, interpreting our algebraic effect operations by means of things that cannot be described by algebraic equations alone, such as continuations .
In fact, effect handlers are often (but not always) implemented via delimited continuations. There are also other, static/lexically scoped and maybe more performant approaches being explored, such as this one
“Real” algebraic effects don’t require monads. Monads and algebraic effects are two different concepts tackling similar problems. One is expressible in terms of the other, but algebraic effects are arguably more flexible.
You could actually implement algebraic effects using a continuation monad. If we don’t care about types, effects are perfectly expressible with monads and vice versa
The problems appear when we introduce types into the picture. In a properly typed world, you can’t actually reproduce the same expressiveness you get with effects using monads. You’ll end up breaking the type system or reducing expressiveness at some point.
Effects are, in this sense, more “powerful” than monads with their natural type system: you can express infinitely many computations with them. E.g if you use a tick() effect and you do a bunch of sequential tick() s, the result will be a distinct computation each time. With monads and their natural type system the set of computations you could express is finite.
Additionally, with monads you commit to a specific interpretation of an effect in advance, while effects completely decouple effect definition from it’s implementation.
Finally, effects are easier to compose than monads. With monad transformers you quickly hit the wall having to define a bunch of different combinations that each have distinct semantics. Effects compose naturally.
So while effect libraries in languages like Typescript and Scala are able to express effects using monads3, and the behavior could be identical at runtime, this cannot replace having an actual type and effect system, with effects being properly typed.
 Question How do you usually learn about new things?   Technical articles (like this one)   Books   Screencasts or videos   Courses, bootcamps or workshops   Other    ✓ Thanks for your input!
    

Footnotes 🔗
Footnotes


“What color is your function” is a problem explored in this article. In languages which have Async baked in via special keywords (e.g JavaScript async/await) it becomes a pain to refactor and to combine synchronous and asynchronous code. If you make one function deep in the call stack async, all the callers will have to be made Async as well, or await() the results. With effects you don’t have this issue as there are no keywords and no special behavior. Async is simply done with effect handlers. ↩


I like the grandma example more than the “launch missiles” popular in the Haskell world. Took it from this article by Kevin Mahoney. It’s somehow more offensive ↩


See some examples in this article. This also shows how Haskell’s new delimited continuation support can be used to implement algebraic effects and handlers ↩


 ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: Semantic grep for Claude Code (RUST) (local embeddings)]]></title>
            <link>https://github.com/BeaconBay/ck</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157223</guid>
            <description><![CDATA[Contribute to BeaconBay/ck development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[ck - Semantic Grep by Embedding
ck (seek) finds code by meaning, not just keywords. It's a drop-in replacement for grep that understands what you're looking for — search for "error handling" and find try/catch blocks, error returns, and exception handling code even when those exact words aren't present.
Quick start
cargo install ck-search
# Find error handling patterns (finds try/catch, Result types, etc.)
ck --sem "error handling" src/

# Traditional grep-compatible search still works  
ck -n "TODO" *.rs

# Combine both: semantic relevance + keyword filtering
ck --hybrid "connection timeout" src/
Why ck?
For Developers: Stop hunting through thousands of regex false positives. Find the code you actually need by describing what it does.
For AI Agents: Get structured, semantic search results in JSON format. Perfect for code analysis, documentation generation, and automated refactoring.
For Teams: Works exactly like grep with the same flags and behavior, but adds semantic intelligence when you need it.
Quick Start
# Build from source
cargo build --release

# Index your project for semantic search
./target/debug/ck index src/

# Search by meaning
./target/debug/ck --sem "authentication logic" src/
./target/debug/ck --sem "database connection pooling" src/
./target/debug/ck --sem "retry mechanisms" src/

# Use all the grep features you know
./target/debug/ck -n -C 3 "error" src/
./target/debug/ck -r "TODO|FIXME" .
Core Features
🔍 Semantic Search
Find code by concept, not keywords. Searches understand synonyms, related terms, and conceptual similarity.
# These find related code even without exact keywords:
ck --sem "retry logic"           # finds backoff, circuit breakers
ck --sem "user authentication"   # finds login, auth, credentials  
ck --sem "data validation"       # finds sanitization, type checking

# Get complete functions/classes containing matches (NEW!)
ck --sem --full-section "error handling"  # returns entire functions
ck --full-section "async def" src/        # works with regex too
⚡ Drop-in grep Compatibility
All your muscle memory works. Same flags, same behavior, same output format.
ck -i "warning" *.log              # Case-insensitive  
ck -n -A 3 -B 1 "error" src/       # Line numbers + context
ck --no-filename "TODO" src/        # Suppress filenames (grep -h equivalent)
ck -l "error" src/                  # List files with matches only (NEW!)
ck -L "TODO" src/                   # List files without matches (NEW!)
ck -r --exclude "*.test.js" "bug"  # Recursive with exclusions
ck "pattern" file1.txt file2.txt   # Multiple files
🎯 Hybrid Search
Combine keyword precision with semantic understanding using Reciprocal Rank Fusion.
ck --hybrid "async timeout" src/    # Best of both worlds
ck --hybrid --scores "cache" src/   # Show relevance scores with color highlighting
ck --hybrid --threshold 0.02 query  # Filter by minimum relevance
ck -l --hybrid "database" src/      # List files using hybrid search
🤖 Agent-Friendly Output
Perfect JSON output for LLMs, scripts, and automation.
ck --json --sem "error handling" src/ | jq '.file'
ck --json --topk 5 "TODO" . | jq -r '.preview'
ck --json --full-section --sem "database" . | jq -r '.preview'  # Complete functions
📁 Smart File Filtering
Automatically excludes cache directories, build artifacts, and system files.
# These are excluded by default:
# .git, node_modules, target/, .fastembed_cache, __pycache__

# Override defaults:
ck --no-default-excludes "pattern" .     # Search everything
ck --exclude "dist" --exclude "logs" .   # Add custom exclusions
How It Works
1. Index Once, Search Many
# Create semantic index (one-time setup)
ck index /path/to/project

# Now search instantly by meaning
ck --sem "database queries" .
ck --sem "error handling" .
ck --sem "authentication" .
2. Three Search Modes

--regex (default): Classic grep behavior, no indexing required
--sem: Pure semantic search using embeddings (requires index)
--hybrid: Combines regex + semantic with intelligent ranking

3. Relevance Scoring
ck --sem --scores "machine learning" docs/
# [0.847] ./ai_guide.txt: Machine learning introduction...
# [0.732] ./statistics.txt: Statistical learning methods...
# [0.681] ./algorithms.txt: Classification algorithms...
Advanced Usage
Search Specific Files
# Glob patterns work
ck --sem "authentication" *.py *.js *.rs

# Multiple files
ck --sem "error handling" src/auth.rs src/db.rs

# Quoted patterns prevent shell expansion  
ck --sem "auth" "src/**/*.ts"
Threshold Filtering
# Only high-confidence semantic matches
ck --sem --threshold 0.7 "query"

# Low-confidence hybrid matches (good for exploration)
ck --hybrid --threshold 0.01 "concept"

# Get complete code sections instead of snippets (NEW!)
ck --sem --full-section "database queries"
ck --full-section "class.*Error" src/     # Complete classes
Top-K Results
# Limit results for focused analysis
ck --sem --topk 5 "authentication patterns"

# Great for AI agent consumption
ck --json --topk 10 "error handling" | process_results.py
Directory Management
# Check index status
ck status .

# Clean up and rebuild
ck clean .
ck index .

# Add single file to index
ck add new_file.rs
File Support



Language
Indexing
Tree-sitter Parsing
Semantic Chunking




Python
✅
✅
✅ Functions, classes


JavaScript
✅
✅
✅ Functions, classes, methods


TypeScript
✅
✅
✅ Functions, classes, methods


Haskell
✅
✅
✅ Functions, types, instances



Text Formats: Markdown, JSON, YAML, TOML, XML, HTML, CSS, shell scripts, SQL, and plain text.
Smart Exclusions: Automatically skips .git, node_modules, target/, build/, dist/, __pycache__/, .fastembed_cache, .venv, venv, and other common build/cache/virtual environment directories.
Installation
From Source
git clone https://github.com/BeaconBay/ck
cd ck
cargo install --path ck-cli
Package Managers (Planned)
# Coming soon:
brew install ck-search
apt install ck-search
Architecture
ck uses a modular Rust workspace:

ck-cli - Command-line interface and argument parsing
ck-core - Shared types, configuration, and utilities
ck-search - Search engine implementations (regex, BM25, semantic)
ck-index - File indexing, hashing, and sidecar management
ck-embed - Text embedding providers (FastEmbed, API backends)
ck-ann - Approximate nearest neighbor search indices
ck-chunk - Text segmentation and language-aware parsing
ck-models - Model registry and configuration management

Index Storage
Indexes are stored in .ck/ directories alongside your code:
project/
├── src/
├── docs/  
└── .ck/           # Semantic index (can be safely deleted)
    ├── embeddings.json
    ├── ann_index.bin
    └── tantivy_index/

The .ck/ directory is a cache — safe to delete and rebuild anytime.
Examples
Finding Code Patterns
# Find authentication/authorization code
ck --sem "user permissions" src/
ck --sem "access control" src/
ck --sem "login validation" src/

# Find error handling strategies  
ck --sem "exception handling" src/
ck --sem "error recovery" src/
ck --sem "fallback mechanisms" src/

# Find performance-related code
ck --sem "caching strategies" src/
ck --sem "database optimization" src/  
ck --sem "memory management" src/
Integration Examples
# Git hooks
git diff --name-only | xargs ck --sem "TODO"

# CI/CD pipeline
ck --json --sem "security vulnerability" . | security_scanner.py

# Code review prep
ck --hybrid --scores "performance" src/ > review_notes.txt

# Documentation generation
ck --json --sem "public API" src/ | generate_docs.py
Team Workflows
# Find related test files
ck --sem "unit tests for authentication" tests/
ck -l --sem "test" tests/           # List test files by semantic content

# Identify refactoring candidates  
ck --sem "duplicate logic" src/
ck --sem "code complexity" src/
ck -L "test" src/                   # Find source files without tests

# Security audit
ck --hybrid "password|credential|secret" src/
ck --sem "input validation" src/
ck -l --hybrid --scores "security" src/  # Files with security-related code
Configuration
Default Exclusions
# View current exclusion patterns
ck --help | grep -A 20 exclude

# These directories are excluded by default:
# .git, .svn, .hg                    # Version control
# node_modules, target, build        # Build artifacts  
# .cache, __pycache__, .fastembed_cache  # Caches
# .vscode, .idea                     # IDE files
Custom Configuration (Planned)
# .ck/config.toml
[search]
default_mode = "hybrid"
default_threshold = 0.05

[indexing]  
exclude_patterns = ["*.log", "temp/"]
chunk_size = 512
overlap = 64

[models]
embedding_model = "BAAI/bge-small-en-v1.5"
Performance

Indexing: ~1M LOC in under 2 minutes (with smart exclusions and optimized embedding computation)
Search: Sub-500ms queries on typical codebases
Index size: ~2x source code size with compression
Memory: Efficient streaming for large repositories with span-based content extraction
File filtering: Automatic exclusion of virtual environments and build artifacts
Output: Clean stdout/stderr separation for reliable piping and scripting

Testing
Run the comprehensive test suite:
# Full test suite (40+ tests)
./test_ck.sh

# Quick smoke test (14 core tests)
./test_ck_simple.sh
Tests cover grep compatibility, semantic search, index management, file filtering, and more.
Contributing
ck is actively developed and welcomes contributions:

Issues: Report bugs, request features
Code: Submit PRs for bug fixes, new features
Documentation: Improve examples, guides, tutorials
Testing: Help test on different codebases and languages

Development Setup
git clone https://github.com/your-org/ck
cd ck
cargo build
cargo test
./target/debug/ck index test_files/
./target/debug/ck --sem "test query" test_files/
Roadmap
Current (v0.3+)

✅ grep-compatible CLI with semantic search and file listing flags (-l, -L)
✅ FastEmbed integration with BGE models
✅ File exclusion patterns and glob support
✅ Threshold filtering and relevance scoring with visual highlighting
✅ Tree-sitter parsing and intelligent chunking (Python, TypeScript, JavaScript, Haskell)
✅ Complete code section extraction (--full-section)
✅ Enhanced indexing strategy with v3 semantic search optimization
✅ Clean stdout/stderr separation for reliable scripting
✅ Incremental index updates with hash-based change detection

Near-term (v0.4-0.5)

🚧 Configuration file support
🚧 Package manager distributions

Medium-term (v0.4-0.6)

🔮 Multiple embedding model support
🔮 Advanced ranking algorithms
🔮 Plugin architecture for custom chunkers
🔮 Distributed/remote index support

Long-term (v1.0+)

🔮 IDE integrations (VS Code, IntelliJ, etc.)
🔮 Git integration (semantic diffs, blame)
🔮 Web interface for team usage
🔮 Multi-language semantic understanding

FAQ
Q: How is this different from grep/ripgrep/silver-searcher?
A: ck includes all the features of traditional search tools, but adds semantic understanding. Search for "error handling" and find relevant code even when those exact words aren't used.
Q: Does it work offline?
A: Yes, completely offline. The embedding model runs locally with no network calls.
Q: How big are the indexes?
A: Typically 1-3x the size of your source code, depending on content. The .ck/ directory can be safely deleted to reclaim space.
Q: Is it fast enough for large codebases?
A: Yes. Indexing is a one-time cost, and searches are sub-second even on large projects. Regex searches require no indexing and are as fast as grep.
Q: Can I use it in scripts/automation?
A: Absolutely. The --json flag provides structured output perfect for automated processing. Use --full-section to get complete functions for AI analysis.
Q: What about privacy/security?
A: Everything runs locally. No code or queries are sent to external services. The embedding model is downloaded once and cached locally.
License
Licensed under either of:

Apache License, Version 2.0 (LICENSE-APACHE)
MIT License (LICENSE-MIT)

at your option.
Credits
Built with:

Rust - Systems programming language
FastEmbed - Fast text embeddings
Tantivy - Full-text search engine
clap - Command line argument parsing

Inspired by the need for better code search tools in the age of AI-assisted development.

Start finding code by what it does, not what it says.
cargo build --release
./target/release/ck index .
./target/release/ck --sem "the code you're looking for"
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Serverless Horrors]]></title>
            <link>https://serverlesshorrors.com/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157110</guid>
            <description><![CDATA[Stories you never want to feel on your own skin]]></description>
            <content:encoded><![CDATA[       ServerlessHorrors is a simple blog where you can read all the horror stories of serverless. Yikes!

Made by Andras who is working on an open-source & self-hostable Heroku / Netlify / Vercel alternative called Coolify.

Have a story?

Write me
Open a PR on Github
     Posts  New 13  May 2025     New 3  May 2025     10  Apr 2025     17  Jan 2025      13  Jan 2025      $22.639,69   I received an insanely bill of 22k USD today from simply using BigQuery on a public data set in the playground...     google    bigquery    sql       13  Jan 2025     6  Jan 2025     5  Jan 2025     1  Sep 2024     25  Jun 2024     6  Jun 2024     26  May 2024     29  Apr 2024     10  Mar 2024     27  Feb 2024      13  Feb 2024      $23,000.420   What is happening?! Someone spammed EchoFox and spiked my Vercel bill to $23k and caused 56k+ accounts and trials...     vercel    bandwidth    ddos       5  Apr 2023     14  Jan 2023     27  Mar 2020           ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: I'm a dermatologist and I vibe coded a skin cancer learning app]]></title>
            <link>https://molecheck.info/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45157020</guid>
            <description><![CDATA[For the best experience, please scan the QR code with your phone's camera to use the app on your mobile device.]]></description>
            <content:encoded><![CDATA[
            Designed for Mobile
            For the best experience, please scan the QR code with your phone's camera to use the app on your mobile device.
            
            https://molecheck.info
            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What is the origin of the private network address 192.168.*.*? (2009)]]></title>
            <link>https://lists.ding.net/othersite/isoc-internet-history/2009/oct/msg00000.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45156826</guid>
        </item>
        <item>
            <title><![CDATA[The "impossibly small" Microdot web framework]]></title>
            <link>https://lwn.net/Articles/1034121/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45155682</guid>
            <description><![CDATA[The Microdot web framework is quite small, as its name would imply; it supports both standard C [...]]]></description>
            <content:encoded><![CDATA[

This article brought to you by LWN subscribers

Subscribers to LWN.net made this article — and everything that
       surrounds it — possible.  If you appreciate our content, please
       buy a subscription and make the next
       set of articles possible.



The Microdot
web framework is quite small, as its name would imply; it supports both
standard CPython and MicroPython,
so it can be used on systems ranging from internet-of-things (IoT) devices
all the way up to large, cloudy servers.  It was developed by Miguel
Grinberg, who gave a presentation about it at EuroPython 2025.  His name
may sound familiar from his well-known Flask
Mega-Tutorial, which has introduced many to the Flask lightweight Python-based
web framework.  It should come as no surprise, then, that Microdot is
inspired by its rather larger cousin, so Flask enthusiasts will find much
to like in Microdot—and will come up to speed quickly should their needs turn
toward smaller systems.



We have looked at various pieces of this software stack along the way: Microdot itself in January 2024, MicroPython in 2023, and Flask as part of a look at Python microframeworks in
2019.



Grinberg began his talk with an introduction.  He has been living in
Ireland for a few years and "I make stuff".  That includes open-source projects, blog posts (on a
Flask-based blog platform that he wrote), and "a bunch of books".
He works for Elastic and is one of the maintainers of the Elasticsearch
Python client, "so maybe you have used some of the things that I
made for money".


Why?


With a chuckle, he asked: "Why do we need another web framework?  We
have so many already."  The story starts with a move that he made to
Ireland from the US in 2018; he rented a house with a "smart" heating
controller and was excited to use it.  There were two thermostats, one for
each level of the house, and he was "really looking forward to the
winter" to see the system in action.



As might be guessed, he could set target temperatures in each thermostat;
they would communicate with the controller that would turn the heating on
and off as needed.  In addition, the system had a web server that could be
used to query various parameters or to start and stop the heaters.  You
could even send commands via SMS text messages; "there's a SIM card
somewhere in that box [...] very exciting stuff".



When winter rolled around, it did not work that well, however; sometimes
the house was too chilly or warm and he had to start and stop the heaters
himself. He did some debugging and found that the thermostats were
reporting temperatures that were off by ±3°C, "which is too much for
trying to keep the house at 20°".  The owner of the house thought that
he was too used to the US where things just work; "at least she thinks that in America everything is super-efficient,
everything works, and she thought 'this is the way things work in
Ireland'".  So he did not make any progress with the owner.



At that point, most people would probably just give up and live with the
problem; "I hacked my heating controller instead".  He set the
temperatures in both thermostats to zero, which effectively disabled their
ability to affect the heaters at all, and built two small boards running
MicroPython, each connected to a temperature and humidity sensor device.
He wrote code that would check the temperature every five minutes and send
the appropriate commands to start or stop the heaters based on what it
found.



So the second half of his first winter in Ireland went great.  The sensors
are accurate to ±0.5°C, so "problem solved".  But, that led to a new
problem for him.  "I wanted to know things: What's the temperature right
now?  Is the heating running right now or not?  How many hours did it run
today compared to yesterday?"  And so on.



He added a small LCD screen to display some information, but he had to
actually go to the device and look at it; what he really wanted was to be
able to talk to the device over WiFi and get information from the couch
while he was watching TV. "I wanted to host a web server [...]  that
will show me a little dashboard".



So he searched for web frameworks
for MicroPython; in the winter of 2018-2019, "there were none".
Neither Flask nor Bottle,
which is a good bit smaller, would run on MicroPython; both are too large
for the devices,
but, in addition, the standard library for MicroPython is a subset of that of
CPython, so many things that they need are missing. A "normal
person" would likely have just accepted that and moved on; "I
created a web framework instead."


Demo


He brought one of his thermostat devices to Prague for the conference and
did a small demonstration of it operating during the talk.  The device was
connected to his laptop using USB, which provided power, but also a serial
connection to the board.  On the laptop, he used the rshell
remote MicroPython shell to talk to the board, effectively using the laptop
as a terminal.





He started the MicroPython read-eval-print loop (REPL) on the board in
order to simulate the normal operation of the board.  When it is plugged
into the wall, rather than a laptop, it will boot to the web server, so he
made that happen with a soft-reboot command.  The device then connected to
the conference WiFi and gave him the IP address (and port) where the server
was running.



He switched over to Firefox on his laptop and visited the site, which showed a
dashboard that had the current temperature (24.4°) and relative humidity
(56.9%) of the room.  He also used curl from the laptop to contact the
api endpoint of the web application, which returned JSON with the
two values and the time.  There is no persistent clock on the board, so the
application contacts an NTP server to pick up the time when it boots; that
allows it to report the last time a measurement was taken.



Grinberg said that he wanted to set the expectations at the right level by
looking at the capabilities of the microcontrollers he often uses with
Microdot.  For example, the ESP8266 in his thermostat device has 64KB of
RAM and up to 4MB of flash.  The ESP8266 is the smallest and least expensive (around €5)
device with WiFi that
he has found; there are many even smaller devices, but they lack
the networking required for running a web server.  The other devices
he uses are the Raspberry Pi Pico W with 2MB of flash and 256KB of RAM and
the ESP32 with up to 8MB of flash and 512KB of RAM.  He contrasted those
with his laptop, which has 32GB of RAM, so "you need 500,000
ESP8266s" to have the same amount of memory.


Features


The core framework of Microdot is in a single microdot.py
file.  It is fully asynchronous, using the MicroPython
subset of the CPython
asyncio module, so it can run on both interpreters.  It uses
asyncio because that is the only way to do concurrency on the
microcontrollers; there is no support for processes or threads on those devices.



Microdot has Flask-style route
decorators to define URLs for the application.  It has Request
and Response
classes, as well as hooks
to run before and after requests, he said.  Handling query strings,
form data, and JSON are all available in Microdot via normal Python
dictionaries.  Importantly, it can handle streaming requests and responses;
because of the limited memory of these devices, it may be necessary to split
up the handling of larger requests or responses.



It supports setting
cookies and sending static
files.  Web applications can be constructed from a set of modules, using sub-applications,
which are similar to Flask
blueprints.  It also has its own web
server with TLS support.  "I'm very proud of all the stuff I was
able to fit in the core Microdot framework", Grinberg said.



He hoped that attendees would have to think for a minute to come up with
things that are missing from Microdot, but they definitely do exist.  There
are some officially
maintained extensions, each in its own single .py file, to
fill some of those holes.  They encompass functionality that is important,
but he did not want to add to the core because that would make it too large
to fit on the low-end ESP8266 that he is using.



There is an extension for multipart
forms, which includes file uploads; "this is extremely complicated
to parse, it didn't make sense to add it into the core because most people
don't do this".  There is support for WebSocket
and server-sent
events (SSE).  Templates
are supported using utemplate
for both Python implementations or Jinja, which only
works on CPython.  There are extensions for basic
and token-based authentication and for secure
user logins with session data; the latter required a replacement for
the CPython-only PyJWT, which Grinberg
wrote and contributed to MicroPython as jwt.py.
There is a small handful of other extensions that he quickly mentioned as well.



"I consider the documentation as part of the framework"; he is
"kind of fanatical" about documenting everything.  If there is
something missing or not explained well, "it's a bug that I need to
fix".  He writes books, so the documentation is organized similarly;
it comes in at 9,267 words, which equates to around 47 minutes of reading
time.  There is 100% test coverage, he said, and there are around 30
examples, with more coming.



A design principle that he follows is "no dark magic".  An example
of dark magic to him is the Flask
application context, "which very few people understand".  In
Microdot, the request object is explicitly passed to each route function.
Another example is the dependency
injection that is used by the FastAPI framework to add
components; Microdot uses explicit decorators instead.



He used the cloc
utility to count lines of code, while ignoring comments and blank
lines.  Using that, Django
comes in at 110,000 lines, Flask plus its essential Werkzeug library
is 15,500 lines, FastAPI with Starlette is 14,900 lines, Bottle is
around 3,000 lines, while the Microdot core has 765 lines ("believe it
or not") and a full
install with all the extensions on MicroPython comes in at just shy of 1,700
lines of code.



He ended with an example of how Microdot can be so small by comparing the
URL matching in Flask with Microdot.  The Flask version does lots more than
Microdot, with more supported types of arguments in a URL and multiple classes
in the werkzeug.routing
module; it has 1,362 lines of code.  For Microdot, there is a more
limited set of URL arguments, though there is still the ability to define
custom types, and a single
URLPattern class; all of that is done in 63 lines of
code. "I don't intend to support everything that Flask supports, in
terms of routing, but I intend to support the 20% that covers 80% of the
use cases."  That is the overall mechanism that he has used to get to
something that is so small.



An audience member asked about whether the Microdot code was minified in
order to get it to fit.  Grinberg said that doing so was not all that
useful for MicroPython, but the code is smaller on the board because it is
precompiled on another system; that results in a
microdot.mpy file, which is bytecode for MicroPython.  For
example, on the
low-end device he is using for his thermostats, Microdot would not be able
to be compiled on the device itself.  There are some other tricks that can
also be used for reducing the RAM requirements, like putting the code into
the firmware as part of the MicroPython binary.



The final question was about performance, and how many requests per second
could be handled. Grinberg said that he did not
have any real numbers, but that the device he demonstrated is "really
really slow".  That question led to a blog
post in late July where Grinberg tried to more fully answer it.



[I would like to thank the Linux Foundation, LWN's travel sponsor, for
travel assistance to Prague for EuroPython.]

           Index entries for this article
           ConferenceEuroPython/2025
            PythonWeb
            

            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Claude Code Framework Wars]]></title>
            <link>https://shmck.substack.com/p/claude-code-framework-wars</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45155302</guid>
        </item>
        <item>
            <title><![CDATA[Show HN: Lightweight tool for managing Linux virtual machines]]></title>
            <link>https://github.com/ccheshirecat/flint</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45154857</guid>
            <description><![CDATA[Lightweight tool for managing linux virtual machines - ccheshirecat/flint]]></description>
            <content:encoded><![CDATA[🌀 Flint — KVM Management, Reimagined

  


  
    A single <8MB binary with a modern Web UI, CLI, and API for KVM.
    No XML. No bloat. Just VMs.
  


  
    
  
  
    
  
  
    
  



Flint is a modern, self-contained KVM management tool built for developers, sysadmins, and home labs who want zero bloat and maximum efficiency. It was built in a few hours out of a sudden urge for something better.

🚀 One-Liner Install
Prerequisites: A Linux host with libvirt and qemu-kvm installed.
curl -fsSL https://raw.githubusercontent.com/ccheshirecat/flint/main/install.sh | sh
Auto-detects OS/arch, installs to /usr/local/bin, and you're ready in seconds.

✨ Core Philosophy

🖥️ Modern UI — A beautiful, responsive Next.js + Tailwind interface, fully embedded.
⚡ Single Binary — No containers, no XML hell. A sub-8MB binary is all you need.
🛠️ Powerful CLI & API — Automate everything. If you can do it in the UI, you can do it from the command line or API.
📦 Frictionless Provisioning — Native Cloud-Init support and a simple, snapshot-based template system.
💪 Non-Intrusive — Flint is a tool that serves you. It's not a platform that locks you in.


🏎️ Quickstart
1. Start the Server
flint serve

Web UI: http://localhost:5550
API: http://localhost:5550/api

2. Use the CLI
# List your VMs
flint vm list --all

# Launch a new Ubuntu VM named 'web-01'
flint launch ubuntu-24.04 --name web-01

# SSH directly into your new VM
flint ssh web-01

# Create a template from your configured VM
flint snapshot create web-01 --tag baseline-setup

# Launch a clone from your new template
flint launch --from web-01 --name web-02

📖 Full Documentation
While Flint is designed to be intuitive, the full CLI and API documentation, including all commands and examples, is available at:
➡️ DOCS.md

🔧 Tech Stack

Backend: Go 1.25+
Web UI: Next.js + Tailwind + Bun
KVM Integration: libvirt-go
Binary Size: ~8.4MB (stripped)



  🚀 Flint is young, fast-moving, and designed for builders.
  Try it. Break it. Star it. Contribute.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: I recreated Windows XP as my portfolio]]></title>
            <link>https://mitchivin.com/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45154609</guid>
            <description><![CDATA[A Windows XP–style interactive portfolio showcasing design, video, and UI work by Mitch Ivin.]]></description>
            <content:encoded><![CDATA[To begin, click on Mitch Ivin to log inMitch IvinGraphic DesignerRestart MitchIvin XPAfter you log on, the system's yours to explore. Every detail has been designed with a purpose. Tap on the user icon to begin]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The key to getting MVC correct is understanding what models are]]></title>
            <link>https://stlab.cc/tips/about-mvc.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45154501</guid>
            <description><![CDATA[stlab hosts modern, modular C++ algorithms and data structures.]]></description>
            <content:encoded><![CDATA[
        Smalltalk MVC is defined in Design Pattern as:


  MVC Consists of three kinds of objects. The Model is the application object, the View is its screen presentation, and the Controller defines the way the user interface reacts to user input.1


However this definition has been abused over the years - Back in 2003 I gave a talk citing how bad Apple’s definition was. At the time it stated:


  A view object knows how to display and possibly edit data from the application’s model… A controller object acts as the intermediary between the application’s view objects and its model objects… Controllers are often the least reusable objects in an application, but that’s acceptable…2


Of course it isn’t acceptable and, over the years, Apple has refined their definition and now acknowledge the distinction between the traditional Smalltalk version of MVC and the Cocoa version.3 But the Cocoa version is still defined much as it was before:


  A view object knows how to display, and might allow users to edit, the data from the application’s model… A controller object acts as the intermediary between the application’s view objects and its model objects…3


In looking at how iOS applications are written the sentiment that controllers (and now view-controllers) are often the least reusable components in an application still flourishes, even if it is now unstated.

MVC (I’ll always use that term to refer to the Smalltalk form) has the following structure:















figure: Smalltalk MVC4


Here the solid lines imply a direct association. And the dashed lines an indirect association by an observer. So what we see is that the model is unaware of the view and controller, except indirectly through notifications, and hence the code in the Model is reusable. The controller and view bind to the model, not the other way around.

Often the function of the Controller and View are tightly coupled into a “widget” or “control”. When Apple talks about a View-Controller in their model they are talking about a grab-bag of an uber-widget that is a composite of UIView widgets and multiple models. From what I’ve seen, including in Apple’s example code, it is usually a pretty big mess.

The key to getting MVC correct is understanding what models are. A model is simply an object5 which can be observed (a requirement for attaching views). For example, in ObjC an int is an object, but it is not observable. However, an ObjC object with an int property is observable using Key-Value Observing6.  A model may encapsulate complex relationships between the model’s properties. A trivial model is one where each property is completely independent (think C struct vs. C++ class). From a notification the view should be able to determine, at a minimum:


  What changed. It may be as simple as “the model bound to the view”.
  The new value to display.


For example, let’s say our model is a trivial observable boolean (I can’t imagine a simpler model). What we want is a checkbox that binds to the observable boolean. When the controller requests a change in value, the boolean is updated, and the view is notified of the new state of the model. The model is unaware of what UI is attached to it, and in fact there could be multiple UIs, including something like a scripting system, attached to the same instance of the model. This is a form of data binding - though most data binding systems replicate the problems of their underlying widget set by treating the model as if it were observing the view, not the other way around.

Contrast this with most UI frameworks where you have a checkbox widget from which you can query the value and you receive a notification when the value has changed. This is pushing a model into the widget. With MVC you never ask a question like “what is the default state of this checkbox?” - the default state of the view is always the current state of the model. You would also never get the state of the checkbox - the state of the checkbox is simply a reflection of the state of the model. In a system where you get the state of a checkbox you are binding two models together by treating one as a view/controller of the other. Such a pattern doesn’t scale beyond trivial models, and even for those it introduces some ambiguity.

I conjecture that one of the reasons why MVC has been so screwed up is because, unlike in Smalltalk, writing something as simple as an observable boolean is a bit of a pain in a language like Pascal or C. You quickly get into object ownership and lifetime issues and how to write bind expressions. If one also assumes that you have a 1:1 mapping from UI to model then there is some inherent inefficiency in the generalization. The Lisa team made some major compromises and the rest of the industry followed along.7

To support more complex views, the notification may need to specify what parts of the model changed and how those parts changed. For example, “image 58 was removed from the sequence”. A complete model is one that can support any view of that model type efficiently (related to the notion of a complete type and a type’s efficient basis).

One additional attribute of MVC is that it is a composite pattern. This is hinted at by the direct connection between the Controller and the View. As I said early, the view may contain state, this state is itself an object, and because this state is also displayed within the view it is observable. It is another model. I refers to this as the view’s model. This model may include things such as the visibility of a window, the tab the user was last looking at, and the portion of the model being viewed.

Identifying what the models are in your system is important. We usually do pretty good at identifying the major models. Such as “this is an image” - but often fall short of identifying the complete model, i.e. “this is an image with a collection of settings.” We end up with our model spread out within the code (an incidental type) and it makes it more difficult to deal with it.

A common model that is often completely overlooked is the model for function arguments. When you have a command, button, gesture, or menu item in your application, these are bound to a function. The function itself is not typically a zeroary function but rather has a set of arguments that are constructed through other parts of the UI. For example, if I have a list of images in my application, I might have a button to delete the selected images. Here the current selection is the argument to my delete command. To create a UI for the selection I must create a model of the arguments to my function. A precondition of delete is that the selection is not empty. This precondition must be observable in the argument model so it can be reflected in the view by disabling or hiding the button and in the controller be disallowing the user to click the button and issue the command. The same argument model can be shared for multiple commands within an application.


  
    

      Gamma, Erich. “1.2 Design Patterns in Smalltalk MVC.” Design Patterns: Elements of Reusable Object-Oriented Software. Reading, MA: Addison-Wesley, 1995. N. pag. Print. ↩
    
    

      http://smartfriends.com/U/Presenters/untangling_software.pdf (Don’t bother reading, this was an incomprehensible talk.) ↩
    
    

      https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaEncyclopedia/Model-View-Controller/Model-View-Controller.html ↩ ↩2
    
    

      https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller ↩
    
    

      Stepanov, Alexander A., and Paul McJones. “1.3 Objects.” Elements of Programming. Upper Saddle River, NJ: Addison-Wesley, 2009. N. pag. Print. ↩
    
    

      https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html ↩
    
    

      https://en.wikipedia.org/wiki/Object-oriented_user_interface ↩
    
  


    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: I'm making an open-source platform for learning Japanese]]></title>
            <link>https://kanadojo.com</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45152940</guid>
        </item>
        <item>
            <title><![CDATA[A Navajo weaving of an integrated circuit: the 555 timer]]></title>
            <link>https://www.righto.com/2025/09/marilou-schultz-navajo-555-weaving.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45152779</guid>
            <description><![CDATA[The noted Diné (Navajo) weaver Marilou Schultz recently completed an intricate weaving composed of thick white lines on a black background, ...]]></description>
            <content:encoded><![CDATA[
The noted Diné (Navajo) weaver Marilou Schultz recently completed an intricate weaving
composed of
thick white lines on a black background, punctuated with reddish-orange diamonds.
Although this striking rug may appear abstract, it shows the internal circuitry of a tiny silicon chip known
as the 555 timer.
This chip has hundreds of applications in
everything from a sound generator to a windshield wiper controller.
At one point, the 555 was the world's best-selling integrated circuit with billions sold.
But how did the chip get turned into a rug?

The 555 chip is constructed from a tiny flake of silicon with a layer of metallic wiring on top.
In the rug, this wiring is visible as the thick white lines, while the silicon forms the black background.
One conspicuous feature of the rug is the reddish-orange diamonds around the perimeter.
These correspond to the connections between the silicon chip and its eight pins. Tiny golden bond wires—thinner than a human hair—are attached to the square bond pads to provide these connections.
The circuitry of the 555 chip contains 25 transistors, silicon devices that can switch
on and off.
The rug is dominated by three large transistors, the filled squares with a 王 pattern inside, while the remaining transistors are represented by small dots.
The weaving was inspired by a photo of the 555 timer die taken by
Antoine Bercovici
(Siliconinsider); I suggested this photo to Schultz as a possible subject
for a rug.  The diagram below compares the 
weaving (left) with the die photo (right).
As you can see, the weaving closely follows the actual chip, but there are a few artistic differences.
For instance, two of the bond pads have been removed, the circuitry at the top has been simplified,
and the part number at the bottom has been removed.
A comparison of the rug (left) and the original photograph (right).
Dark-field image of the 555 timer is courtesy of Antoine Bercovici.
Antoine took the die photo with a dark field microscope, a special type of microscope that
produces an image on a black background.
This image emphasizes the metal layer on the top of the die.
In comparison, a standard bright-field microscope produced the image below.
When a chip is manufactured, regions of silicon are "doped" with impurities to create transistors
and resistors.
These regions are visible in the image below as subtle changes in the color of the silicon.

In the weaving, the chip's design appears almost monumental, making it easy to forget that the
actual chip is microscopic.
For the photo below,
I obtained a version of the chip packaged in a metal can, rather than the typical rectangle of
black plastic.
Cutting the top off the metal can reveals the tiny chip inside, with eight gold bond wires connecting the
die to the pins of the package.
If you zoom in on the photo, you may recognize the three large transistors that dominate the rug.
The 555 timer die inside a metal-can package, with a penny for comparison. Click this image (or any other) for a larger version.
The artist, Marilou Schultz, has been creating chip rugs since 1994, when Intel commissioned a
rug based on the Pentium as a gift to AISES (American Indian Science & Engineering Society).
Although Schultz learned weaving as a child, the Pentium rug was a challenge due to its complex pattern
and lack of symmetry; a day's work might add just an inch to the rug.
This dramatic weaving was created with wool from the long-horned Navajo-Churro sheep, colored with
traditional plant dyes.
"Replica of a Chip", created by Marilou Schultz, 1994. Wool. Photo taken at the National Gallery of Art, 2024.
For the 555 timer weaving, Schultz experimented with different materials. Silver and gold metallic threads
represent the aluminum and copper in the chip.
The artist explains that "it took a lot more time to incorporate the metallic threads," but it was
worth the effort because "it is spectacular to see the rug with the metallics in the dark with a little light hitting it."
Aniline dyes provided the black and lavender colors.
Although natural logwood dye
produces a beautiful purple, it fades over time, so Schultz used an aniline dye instead.
The lavender colors are dedicated to the weaver's mother, who passed away in February;
purple was her favorite color.
Inside the chip
How does the 555 chip produce a particular time delay?
You add external components—resistors and a capacitor—to select the time.
The capacitor is filled (charged) at a speed controlled by the resistor. When the capacitor get "full",
the 555 chip switches operation and starts emptying (discharging) the capacitor.
It's like filling a sink: if you have a large sink (capacitor) and a trickle of water (large resistor),
the sink fills slowly. But if you have a smal sink (capacitor) and a lot of water (small resistor),
the sink fills quickly.
By using different resistors and capacitors, the 555 timer can provide time intervals from microseconds
to hours.
I've constructed an interactive chip browser that shows how the regions of the rug correspond to specific
electronic components in the physical chip. Click on any part of the rug to learn the function of
the corresponding component in the chip.


Click the die or schematic for details...











For instance, two of the large square transistors turn the chip's output on or off, while the third
large transistor discharges the capacitor when it is full. (To be precise, the capacitor goes between 1/3 full
and 2/3 full to avoid issues near "empty" and "full".)
The chip has circuits called comparators that detect when the capacitor's voltage reaches 1/3 or 2/3,
switching between emptying and filling at those points.
If you want more technical details about the 555 chip, see my previous articles:
an early 555 chip,
a 555 timer similar to the rug,
and a more modern CMOS version of the 555.
Conclusions
The similarities between Navajo weavings and the patterns in integrated circuits have long been recognized.
Marilou Schultz's weavings of integrated circuits make these visual metaphors into concrete works of art.
This connection is not just metaphorical, however; in the 1960s, the semiconductor company Fairchild employed numerous Navajo workers to assemble chips in Shiprock, New Mexico.
I wrote about this complicated history in The Pentium as a Navajo Weaving.


This work is being shown at SITE Santa Fe's Once Within a Time exhibition (running until January 2026).
I haven't seen the exhibition in person, so let me know if you visit it.
For more about Marilou Schultz's art, see The Diné Weaver Who Turns Microchips Into Art, or
A Conversation with Marilou Schultz on YouTube.
Many thanks to Marilou Schultz for discussing her art with me.
Thanks to First American Art Magazine for providing the photo of her 555 rug.
Follow me on Mastodon (@[email protected]),
Bluesky (@righto.com),
or RSS for updates.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Shipping textures as PNGs is suboptimal]]></title>
            <link>https://gamesbymason.com/blog/2025/stop-shipping-pngs/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45152648</guid>
            <description><![CDATA[Are you shipping textures to players as PNGs? The goal of this post is to convince you that this is suboptimal, and walk you through a better approach.]]></description>
            <content:encoded><![CDATA[
    

    
      
        Are you shipping textures to players as PNGs? The goal of this post is to convince you that this is suboptimal, and walk you through a better approach.I’ll also share my implementation of the suggested approach, but if you’d rather do it yourself I’ll also provide you with the information you need to get started.If you’re using a game engine, it is almost certainly doing what this post suggests automatically, but it doesn’t hurt to double check!
      
      
    
      
      
        
          Table of Contents
          
Table of ContentsWhat’s wrong with PNGs?What texture formats are out there?Exporting to KTX2Extras
Texture ViewersPreserving Alpha CoverageAutomation
        
      
    
      
        What’s wrong with PNGs? sourcePNGs are great for interchange. They’re lossless, they compresses well, and support is ubiquitous. PNG is my image interchange format of choice.This post isn’t a criticism of PNGs–it’s just that the PNG format is designed for image data, not texture data.Here are some examples of features you would expect out of a texture format that you’re not going to find in an image format:Pregenerated mipmapsCubemapsPremultiplied alphaTechnically PNGs can be premultplied, but yours probably aren’t.Can you work around all these issues? Sure.You can premultiply and generate your mipmaps at load time. You can ship separate images for each cuebmap face. But now you’re resigned to cheap mipmap generation, and cubemaps that are difficult to downsample correctly.You can certainly make it work, but you’re making things unnecessarily difficult for yourself by using the wrong tool for the job.Furthermore, texture formats have a killer feature not mentioned above–support for GPU compatible texture compression like BCn.An in-depth explanation of GPU compression formats it out of scope for this post, but at a high level, these formats store each block of pixels as a couple of endpoints and a method for interpolating between those endpoints.This trades mild degradation of image quality for improvements in storage, VRAM usage, and sampling performance. It’s so good it feels like you’re cheating thermodynamics.GPUs can’t decompress PNGs on the fly, so as a result, if you ship PNGs you either can’t take advantage of this compression, or you have to first decompress the PNGs and then do an extremely expensive compression step to convert to the desired block based format every time a player loads the game.That’s a little goofy, right?(EDIT: Well, it’s goofy when done naively–see discussion w/ Ignacio Castaño here, something along these lines can become viable if you can transcode quickly.)
      
      
    
      
        What texture formats are out there?Texture formats like Khronos’ KTX2 and Microsoft’s DDS are designed for exactly our use case. They’re just headers followed by some image data that you can upload directly to the GPU without any additional processing.Well, unless you use supercompression. GPU compression formats don’t provide great compression ratios, so it’s typical to apply lossless compression as well (think zlib or lz4.) In that case you’ll decompress, and then upload.The meta here is to design your lossy compressor to be aware that its output is going to be losslessly compressed afterwards. This lets it make decisions that reduce entropy, improving the effectiveness of the lossless step.I used DXT5 + lz4 compressed DDS files for Way of Rhea, I’m switching to BC7 + zlib compressed KTX2 files for my next game. Both approaches are reasonable.Note: I primarily develop games for desktop platforms. IIUC, on mobile, hardware support for various types of GPU compression varies but the formats are similar-ish, so the meta is to use something like Basis Universal to quickly transcode to the correct format on load.
      
      
    
      
        Exporting to KTX2At this point, you’re likely looking through the export menu of your image editor of choice for KTX2 and DDS, and not seeing any results.Unfortunately, AFAICT most people end up rolling their own exporters. People used to use Nvidia Texture Tools, but it’s archived as there wasn’t funding to maintain it. It’s still a great reference. Nvidia has a closed source fork, but I don’t love having a closed source dependency for such an integral part of my engine.I’ve implemented an open source texture tool that you’re welcome to use directly or as a reference for your own implementation: Zex.It can be used as a command line tool, or as a Zig library. It reads PNGs using stb_image, and converts them to KTX2, with support BC7 compression + rate distortion optimization from bc7enc_rdo, and supercompression via zlib.It supports most standard features, such as mipmap generation with configurable filters and address modes.I haven’t implemented cubemap exports yet as my current game isn’t using them. If you need support before I get around to it, PRs are welcome–it should be a pretty straightforward addition.If you want to implement your own exporter, here are some useful references. Keep in mind that you don’t need to support all possible features, just the ones your engine uses:KTX2 (Format Specification / DFD Specification)DDS
      
      
    
      
        
      
      
    
      
        Texture Viewers sourceMost image viewers won’t be able to open texture formats like DDS/KTX2. This sorta makes sense–image viewers are typically designed to show a single image, whereas a texture may be comprised of multiple mipmaps and cubemap faces and such, and may be HDR. This requires a fancier UI.I’m personally a fan of Tacentview for this use case. It’s open source, cross platform, and supports a large number of formats.
      
      
    
      
        Preserving Alpha Coverage source: firewatch inspired me so I made a tree and then never used it for anythingPregenerating your mipmaps gives you a chance to be a little more “correct” about them.For example, if you’ve ever tried to render a tree or a chain link fence in-game as a cutout (or with alpha to coverage) but found that it vanishes when you get far away, your mipmap filtering likely isn’t taking into account the alpha test.You can see Zex’s alpha test aware resize here. This isn’t battle tested yet, compare results visually in-engine to see if it provides a benefit for your artwork.
      
      
    
      
        Automation sourceYou probably don’t want to convert all your images by hand. I did this for Way of Rhea for a while, but eventually realized that it was a waste of time. Every time a texture changes you have to go back and figure out what settings you used last time. Just automate it.I’ll probably write a follow up post describing my strategy for automating this at some point in the future, but if you want a sneak peak, check out Oven. It’s not exactly general purpose right now, but might be an interesting reference.
      
      
    
    

    
  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Being good isn't enough]]></title>
            <link>https://joshs.bearblog.dev/being-good-isnt-enough/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45152402</guid>
            <description><![CDATA[Giving good career advice is hard. Maybe it’s because careers can look more alike than they really are. Two people can have the same title but what helps one...]]></description>
            <content:encoded><![CDATA[
    

    
        
    

    
        

        
            
                
                    06 Sep, 2025
                
            
        
    

    Giving good career advice is hard. Maybe it’s because careers can look more alike than they really are. Two people can have the same title but what helps one could be rubbish for another.
Or maybe it’s that “good advice” itself is fuzzy. It depends entirely on the person receiving it. For some people it means finding work they love. For others it’s about meaning. For many it’s just getting promoted. Still, here’s what I usually say.
You have to be good at the technical work first, whatever that means for you. It’s the thing you were hired for and this has to be your first priority. And the better you are, the further this can take you. You write better code, or better reports, or better designs, and people notice. That’s enough for a while.
But eventually it’s not. Everyone around you is technically strong too. So for most of us, you won’t stand out anymore. You need to increase your impact in other ways.
The biggest gains come from combining disciplines. There are four that show up everywhere: technical skill, product thinking, project execution, and people skills. And the more senior you get, the more you’re expected to contribute to each.
Technical skill is your chosen craft. Product thinking is knowing what’s worth doing. Project execution is making sure it happens. People skills are how you work with and influence others.
Every successful effort needs all four. Try to imagine an endeavor that wouldn’t benefit from improving in these areas. I can’t think of one. If you squint, together they mean one thing: making stuff that matters actually happen. That’s how you increase your impact.
You’ll naturally pick them up over time, but slowly. You can go faster if you push yourself.
This is harder than it sounds because the less competent we are at something, the more likely we are to overestimate ourselves. It’s easy to think you’re working on what matters, or that you’re doing great technical work, but that might not be true. So how do you find your weaknesses?
I’m pretty confident you only need two things. Feedback and humility, and they work best together. Feedback shows you what to work on, and humility lets you actually hear it.
So find your weakest discipline and work on that. The fastest way is to get feedback from someone you admire and then act on it. Don’t wait for the perfect plan, doing something is almost always better than doing nothing.
Find a mentor, be a mentor. Lead a project, propose one. Do the work, present it. Create spaces for others to do the same. Do whatever it takes to get better.
And do it in the open. A common mistake is assuming work speaks for itself. It rarely does.
But all of this requires maybe the most important thing of all: agency. It’s more powerful than smarts or credentials or luck. And the best part is you can literally just choose to be high-agency. High-agency people make things happen. Low-agency people wait. And if you want to progress, you can’t wait.
This advice is like any other, fuzzy. But it does go further than simply “work harder”. It will take work and it will be hard, but it might be the difference between effort and progress.
And in the long run, the best way to get what you want is to deserve it.
The Staff Engineers Path by Tanya Reilly heavily shaped my views. I read it every year.
Thanks for the Feedback by Douglas Stone and Sheila Heen


    

    
        
            
                
                    #career
                
            
        

        
            


        
    


  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How the “Kim” dump exposed North Korea's credential theft playbook]]></title>
            <link>https://dti.domaintools.com/inside-the-kimsuky-leak-how-the-kim-dump-exposed-north-koreas-credential-theft-playbook/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45152066</guid>
            <description><![CDATA[A rare and revealing breach attributed to a North Korean-affiliated actor, known only as “Kim” as named by the hackers who dumped the data, has delivered a new insight into Kimsuky (APT43) tactics, techniques, and infrastructure. This actor's operational profile showcases credential-focused intrusions targeting South Korean and Taiwanese networks, with a blending of Chinese-language tooling, infrastructure, and possible logistical support. The “Kim” dump, which includes bash histories, phishing domains, OCR workflows, compiled stagers, and rootkit evidence, reflects a hybrid operation situated between DPRK attribution and Chinese resource utilization.]]></description>
            <content:encoded><![CDATA[
                                
Contents:Part I: Technical AnalysisPart II: Goals AnalysisPart III: Threat Intelligence Report



Executive Summary



A rare and revealing breach attributed to a North Korean-affiliated actor, known only as “Kim” as named by the hackers who dumped the data, has delivered a new insight into Kimsuky (APT43) tactics, techniques, and infrastructure. This actor’s operational profile showcases credential-focused intrusions targeting South Korean and Taiwanese networks, with a blending of Chinese-language tooling, infrastructure, and possible logistical support. The “Kim” dump, which includes bash histories, phishing domains, OCR workflows, compiled stagers, and rootkit evidence, reflects a hybrid operation situated between DPRK attribution and Chinese resource utilization.



Screen shot of the adversary’s desktop VM



This report is broken down into three parts: 




Technical Analysis of the dump materials



Motivation and Goals of the APT actor (group)



A CTI report compartment for analysts




While this leak only gives a partial idea of what the Kimusky/PRC activities have been, the material provides insight into the expansion of activities, nature of the actor(s), and goals they have in their penetration of the South Korean governmental systems that would benefit not only DPRK, but also PRC.



Phrack article



Without a doubt, there will be more coming out from this dump in the future, particularly if the burned assets have not been taken offline and access is still available, or if others have cloned those assets for further analysis. We may revisit this in the future if additional novel information comes to light.



Part I: Technical Analysis



The Leak at a Glance



The leaked dataset attributed to the “Kim” operator offers a uniquely operational perspective into North Korean-aligned cyber operations. Among the contents were terminal history files revealing active malware development efforts using NASM (Netwide Assembler), a choice consistent with low-level shellcode engineering typically reserved for custom loaders and injection tools. These logs were not static forensic artifacts but active command-line histories showing iterative compilation and cleanup processes, suggesting a hands-on attacker directly involved in tool assembly.



File list of dump



In parallel, the operator ran OCR (Optical Character Recognition) commands against sensitive Korean PDF documents related to public key infrastructure (PKI) standards and VPN deployments. These actions likely aimed to extract structured language or configurations for use in spoofing, credential forgery, or internal tool emulation.



Privileged Access Management (PAM) logs also surfaced in the dump, detailing a timeline of password changes and administrative account use. Many were tagged with the Korean string 변경완료 (“change complete”), and the logs included repeated references to elevated accounts such as oracle, svradmin, and app_adm01, indicating sustained access to critical systems.



The phishing infrastructure was extensive. Domain telemetry pointed to a network of malicious sites designed to mimic legitimate Korean government portals. Sites like nid-security[.]com were crafted to fool users into handing over credentials via advanced AiTM (Adversary-in-the-Middle) techniques.



nid-security[.]com phishing domain (anon reg 2024)



Finally, network artifacts within the dump showed targeted reconnaissance of Taiwanese government and academic institutions. Specific IP addresses and .tw domain access, along with attempts to crawl .git repositories, reveal a deliberate focus on high-value administrative and developer targets.



Perhaps most concerning was the inclusion of a Linux rootkit using syscall hooking (khook) and stealth persistence via directories like /usr/lib64/tracker-fs. This highlights a capability for deep system compromise and covert command-and-control operations, far beyond phishing and data theft.



Artifacts recovered from the dump include:




Terminal history files demonstrating malware compilation using NASM



OCR commands parsing Korean PDF documents related to PKI and VPN infrastructure



PAM logs reflecting password changes and credential lifecycle events



Phishing infrastructure mimicking Korean government sites



IP addresses indicating reconnaissance of Taiwanese government and research institutions



Linux rootkit code using syscall hooking and covert channel deployment




Credential Theft Focus



The dump strongly emphasizes credential harvesting as a central operational goal. Key files such as 136백운규001_env.key (The presence of 136백운규001_env.key is a smoking gun indicator of stolen South Korean Government PKI material, as its structure (numeric ID + Korean name + .key) aligns uniquely with SK GPKI issuance practices and provides clear evidence of compromised, identity-tied state cryptographic keys.) This was discovered alongside plaintext passwords, that indicate clear evidence of active compromise of South Korea’s GPKI (Government Public Key Infrastructure). Possession of such certificates would allow for highly effective identity spoofing across government systems.











PAM logs further confirmed this focus, showing a pattern of administrative account rotation and password resets, all timestamped and labeled with success indicators (변경완료: Change Complete). The accounts affected were not low-privilege; instead, usernames like oracle, svradmin, and app_adm01, often used by IT staff and infrastructure services, suggested access to core backend environments.



These findings point to a strategy centered on capturing and maintaining access to privileged credentials and digital certificates, effectively allowing the attacker to act as an insider within trusted systems.




Leaked .key files (e.g., 136백운규001_env.key) with plaintext passwords confirm access to GPKI systems



PAM logs show administrative password rotations tagged with 변경완료 (change complete)



Admin-level accounts such as oracle, svradmin, and app_adm01 repeatedly appear in compromised logs




Phishing Infrastructure



The operator’s phishing infrastructure was both expansive and regionally tailored. Domains such as nid-security[.]com and webcloud-notice[.]com mimicked Korean identity and document delivery services, likely designed to intercept user logins or deploy malicious payloads. More sophisticated spoofing was seen in sites that emulated official government agencies like dcc.mil[.]kr, spo.go[.]kr, and mofa.go[.]kr.



Whoisof domains created by dysoni91@tutamail[.]com



Historical Whois of webcloud-notice[.]com



Burner email usage added another layer of operational tradecraft. The address jeder97271[@]wuzak[.]com is likely linked to phishing kits that operated through TLS proxies, capturing credentials in real time as victims interacted with spoofed login forms.



These tactics align with previously known Kimsuky behaviors but also demonstrate an evolution in technical implementation, particularly the use of AiTM interception rather than relying solely on credential-harvesting documents.



Domain connections map




Domains include: nid-security[.]com, html-load[.]com, webcloud-notice[.]com, koala-app[.]com, and wuzak[.]com



Mimicked portals: dcc.mil[.]kr, spo.go[.]kr, mofa.go[.]kr



Burner email evidence: jeder97271[@]wuzak[.]com



Phishing kits leveraged TLS proxies for AiTM credential capture




Malware Development Activity



Kim’s malware development environment showcased a highly manual, tailored approach. Shellcode was compiled using NASM, specifically with flags like -f win32, revealing a focus on targeting Windows environments. Commands such as make and rm were used to automate and sanitize builds, while hashed API call resolution (VirtualAlloc, HttpSendRequestA, etc.) was implemented to evade antivirus heuristics.



The dump also revealed reliance on GitHub repositories known for offensive tooling. TitanLdr, minbeacon, Blacklotus, and CobaltStrike-Auto-Keystore were all cloned or referenced in command logs. This hybrid use of public frameworks for private malware assembly is consistent with modern APT workflows.



A notable technical indicator was the use of the proxyres library to extract Windows proxy settings, particularly via functions like proxy_config_win_get_auto_config_url. This suggests an interest in hijacking or bypassing network-level security controls within enterprise environments.




Manual shellcode compilation via nasm -f win32 source/asm/x86/start.asm



Use of make, rm, and hash obfuscation of Win32 API calls (e.g., VirtualAlloc, HttpSendRequestA)



GitHub tools in use: TitanLdr, minbeacon, Blacklotus, CobaltStrike-Auto-Keystore



Proxy configuration probing through proxyres library (proxy_config_win_get_auto_config_url)




Rootkit Toolkit and Implant Structure



The Kim dump offers deep insight into a stealthy and modular Linux rootkit attributed to the operator’s post-compromise persistence tactics. The core implant, identified as vmmisc.ko (alternatively VMmisc.ko in some shells), was designed for kernel-mode deployment across multiple x86_64 Linux distributions and utilizes classic syscall hooking and covert channeling to maintain long-term undetected access.







Google Translation of Koh doc: Rootkit Endpoint Reuse Authentication Tool



“This tool uses kernel-level rootkit hiding technology, providing a high degree of stealth and penetration connection capability. It can hide while running on common Linux systems, and at the kernel layer supports connection forwarding, allowing reuse of external ports to connect to controlled hosts. Its communication behavior is hidden within normal traffic.



The tool uses binary merging technology: at compile time, the application layer program is encrypted and fused into a .ko driver file. When installed, only the .ko file exists. When the .ko driver starts, it will automatically decompress and release the hidden application-layer program.



Tools like chkrootkit, rkhunter, and management utilities (such as ps, netstat, etc.) are bypassed through technical evasion and hiding, making them unable to detect hidden networks, ports, processes, or file information.



To ensure software stability, all functions have also passed stress testing.



Supported systems: Linux Kernel 2.6.x / 3.x / 4.x, both x32 and x64 systems”.



Implant Features and Behavior



This rootkit exhibits several advanced features:




Syscall Hooking: Hooks critical kernel functions (e.g., getdents, read, write) to hide files, directories, and processes by name or PID.



SOCKS5 Proxy: Integrated remote networking capability using dynamic port forwarding and chained routing.



PTY Backdoor Shell: Spawns pseudoterminals that operate as interactive reverse shells with password protection.



Encrypted Sessions: Session commands must match a pre-set passphrase (e.g., testtest) to activate rootkit control mode.




Once installed (typically using insmod vmmisc.ko), the rootkit listens silently and allows manipulation via an associated client binary found in the dump. The client supports an extensive set of interactive commands, including:



+p              # list hidden processes



+f              # list hidden files



callrk          # load client ↔ kernel handshake



exitrk          # gracefully unload implant



shell           # spawn reverse shell



socks5          # initiate proxy channel



upload / download # file transfer interface



These capabilities align closely with known DPRK malware behaviors, particularly from the Kimsuky and Lazarus groups, who have historically leveraged rootkits for lateral movement, stealth, persistence, and exfiltration staging.



Observed Deployment



Terminal history (.bash_history) shows the implant was staged and tested from the following paths:



.cache/vmware/drag_and_drop/VMmisc.ko

/usr/lib64/tracker-fs/vmmisc.ko

Execution logs show the use of commands such as:

insmod /usr/lib64/tracker-fs/vmmisc.ko

./client 192.168.0[.]39 testtest



These paths were not random—they mimic legitimate system service locations to avoid detection by file integrity monitoring (FIM) tools.



Deployment map



This structure highlights the modular, command-activated nature of the implant and its ability to serve multiple post-exploitation roles while maintaining stealth through kernel-layer masking.



Strategic Implications



The presence of such an advanced toolkit in the “Kim” dump strongly suggests the actor had persistent access to Linux server environments, likely via credential compromise. The use of kernel-mode implants also indicates long-term intent and trust-based privilege escalation. The implant’s pathing, language patterns, and tactics (e.g., use of /tracker-fs/, use of test passwords) match TTPs previously observed in operations attributed to Kimsuky, enhancing confidence in North Korean origin.



OCR-Based Recon



A defining component of Kim’s tradecraft was the use of OCR to analyze Korean-language security documentation. The attacker issued commands such as ocrmypdf -l kor+eng “file.pdf” to parse documents like 별지2)행정전자서명_기술요건_141125.pdf (“Appendix 2: Administrative Electronic Signature_Technical Requirements_141125.pdf”) and SecuwaySSL U_카달로그.pdf (“SecuwaySSL U_Catalog.pdf”). These files contain technical language around digital signatures, SSL implementations, and identity verification standards used in South Korea’s PKI infrastructure.



This OCR-based collection approach indicates more than passive intelligence gathering – it reflects a deliberate effort to model and potentially clone government-grade authentication systems. The use of bilingual OCR (Korean + English) further confirms the operator’s intention to extract usable configuration data across documentation types.



OCR run on Korean PDFs




OCR commands used to extract Korean PKI policy language from PDFs such as (별지2)행정전자서명_기술요건_141125.pdf and SecuwaySSL U_카달로그.pdf

별지2)행정전자서명_기술요건_141125.pdf → (Appendix 2: Administrative Electronic Signature_Technical Requirements_141125.pdf



SecuwaySSL U_카달로그.pdf → SecuwaySSL U_Catalog.pdf





Command examples: ocrmypdf -l kor+eng “file.pdf”




SSH and Log-Based Evidence



The forensic evidence contained within the logs, specifically SSH authentication records and PAM outputs, provides clear technical confirmation of the operator’s tactics and target focus.



Several IP addresses stood out as sources of brute-force login attempts. These include 23.95.213[.]210 (a known VPS provider used in past credential-stuffing campaigns), 218.92.0[.]210 (allocated to a Chinese ISP), and 122.114.233[.]77 (Henan Mobile, China). These IPs were recorded during multiple failed login events, strongly suggesting automated password attacks against exposed SSH services. Their geographic distribution and known history in malicious infrastructure usage point to an external staging environment, possibly used for pivoting into Korean and Taiwanese systems.



Beyond brute force, the logs also contain evidence of authentication infrastructure reconnaissance. Multiple PAM and OCSP (Online Certificate Status Protocol) errors referenced South Korea’s national PKI authority, including domains like gva.gpki.go[.]kr and ivs.gpki.go[.]kr. These errors appear during scripted or automated access attempts, indicating a potential strategy of credential replay or certificate misuse against GPKI endpoints, an approach that aligns with Kim’s broader PKI-targeting operations.



Perhaps the most revealing detail was the presence of successful superuser logins labeled with the Korean term 최고 관리자 (“Super Administrator”). This suggests the actor was not just harvesting credentials but successfully leveraging them for privileged access, possibly through cracked accounts, reused credentials, or insider-sourced passwords. The presence of such accounts in conjunction with password rotation entries marked as 변경완료 (“change complete”) further implies active control over PAM-protected systems during the operational window captured in the dump.



Together, these logs demonstrate a methodical campaign combining external brute-force access, PKI service probing, and administrative credential takeover, a sequence tailored for persistent infiltration and lateral movement within sensitive government and enterprise networks.



Brute force mapping




Brute-force IPs: 23.95.213[.]210, 218.92.0[.]210, 122.114.233[.]77




IP AddressOriginRole / Threat Context218.92.0[.]210China Telecom (Jiangsu)Part of Chinanet backbone, likely proxy or scanning node23.95.213[.]210Colocrossing (US)Frequently used in brute-force and anonymized hosting for malware ops122.114.233[.]77Presumed PRC local ISPPossibly mobile/ISP-based proxy used to obfuscate lateral movement




PAM/OCSP errors targeting gva.gpki.go[.]kr, ivs.gpki.go[.]kr



Superuser login events under 최고 관리자 (Super Administrator)




Part II: Goals Analysis



Targeting South Korea: Identity, Infrastructure, and Credential Theft



The “Kim” operator’s campaign against South Korea was deliberate and strategic, aiming to infiltrate the nation’s digital trust infrastructure at multiple levels. A central focus was the Government Public Key Infrastructure (GPKI), where the attacker exfiltrated certificate files, including .key and .crt formats, some with plaintext passwords, and attempted repeated authentication against domains like gva.gpki.go[.]kr and ivs.gpki.go[.]kr. OCR tools were used to parse Korean technical documents detailing PKI and VPN architectures, demonstrating a sophisticated effort to understand and potentially subvert national identity frameworks. These efforts were not limited to reconnaissance; administrative password changes were logged, and phishing kits targeted military and diplomatic webmail, including clones of mofa.go[.]kr and credential harvesting through adversary-in-the-middle (AiTM) proxy setups.



Attempts at user account authentication



Servlet requests for KR domains



Beyond authentication systems, Kim targeted privileged accounts (oracle, unwadm, svradmin) and rotated credentials to maintain persistent administrative access, as evidenced by PAM and SSH logs showing elevated user activity under the title 최고 관리자 (“Super Administrator”). The actor also showed interest in bypassing VPN controls, parsing SecuwaySSL configurations for exploitation potential, and deployed custom Linux rootkits using syscall hooking to establish covert persistence on compromised machines. Taken together, the dump reveals a threat actor deeply invested in credential dominance, policy reconnaissance, and system-level infiltration, placing South Korea’s public sector identity systems, administrative infrastructure, and secure communications at the core of its long-term espionage objectives.



Taiwan Reconnaissance



Among the most notable aspects of the “Kim” leak is the operator’s deliberate focus on Taiwanese infrastructure. The attacker accessed a number of domains with clear affiliations to the island’s public and private sectors, including tw.systexcloud[.]com (linked to enterprise cloud solutions), mlogin.mdfapps[.]com (a mobile authentication or enterprise login portal), and the .git/ directory of caa.org[.]tw, which belongs to the Chinese Institute of Aeronautics, a government-adjacent research entity.



This last domain is especially telling. Accessing .git/ paths directly implies an attempt to enumerate internal source code repositories, a tactic often used to discover hardcoded secrets, API keys, deployment scripts, or developer credentials inadvertently exposed via misconfigured web servers. This behavior points to  more technical depth than simple phishing; it indicates supply chain reconnaissance and long-term infiltration planning.



Taiwanese target map



The associated IP addresses further reinforce this conclusion. All three, 163.29.3[.]119, 118.163.30[.]45, and 59.125.159[.]81, are registered to academic, government, or research backbone providers in Taiwan. These are not random scans; they reflect targeted probing of strategic digital assets.



Summary of Whois & Ownership Insights




118.163.30[.]45

Appears as part of the IP range used for the domain dtc-tpe.com[.]tw, linked to Taiwan’s HINET provider (118.163.30[.]46 )Site Indices page of HINET provider.





163.29.3[.]119

Falls within the 163.29.3[.]0/24 subnet identified with Taiwanese government or institutional use, notably in Taipei. This corresponds to B‑class subnets assigned to public/government entities IP地址 (繁體中文).





59.125.159[.]81

Belongs to the broader 59.125.159[.]0–59.125.159[.]254 block, commonly used by Taiwanese ISP operators such as Chunghwa Telecom in Taipei






Taken together, this Taiwan-focused activity reveals an expanded operational mandate. Whether the attacker is purely DPRK-aligned or operating within a DPRK–PRC fusion cell, the intent is clear: compromise administrative and developer infrastructure in Taiwan, likely in preparation for broader credential theft, espionage, or disruption campaigns.




Targeted domains: tw.systexcloud[.]com, caa.org[.]tw/.git/, mlogin.mdfapps[.]com



IPs linked to Taiwanese academic/government assets: 163.29.3[.]119, 118.163.30[.]45, 59.125.159[.]81



Git crawling suggests interest in developer secrets or exposed tokens




Hybrid Attribution Model



The “Kim” operator embodies the growing complexity of modern nation-state attribution, where cyber activities often blur traditional boundaries and merge capabilities across geopolitical spheres. This case reveals strong indicators of both North Korean origin and Chinese operational entanglement, presenting a textbook example of a hybrid APT model.







On one hand, the technical and linguistic evidence strongly supports a DPRK-native operator. Terminal environments, OCR parsing routines, and system artifacts consistently leverage Korean language and character sets. The operator’s activities reflect a deep understanding of Korean PKI systems, with targeted extraction of GPKI .key files and automation to parse sensitive Korean government PDF documentation. These are hallmarks of Kimsuky/APT43 operations, known for credential-focused espionage against South Korean institutions and diplomatic targets. The intent to infiltrate identity infrastructure is consistent with North Korea’s historical targeting priorities. Notably, the system time zone on Kim’s host machine was set to UTC+9 (Pyongyang Standard Time), reinforcing the theory that the actor maintains direct ties to the DPRK’s internal environment, even if operating remotely.



However, this actor’s digital footprint extends well into Chinese infrastructure. Browser and download logs reveal frequent interaction with platforms like gitee[.]com, baidu[.]com, and zhihu[.]com, highly popular within the PRC but unusual for DPRK operators who typically minimize exposure to foreign services. Moreover, session logs include simplified Chinese content and PRC browsing behaviors, suggesting that the actor may be physically operating within China or through Chinese-language systems. This aligns with longstanding intelligence on North Korean cyber operators stationed in Chinese border cities such as Shenyang and Dandong, where DPRK nationals often conduct cyber operations with tacit approval or logistical consent from Chinese authorities. These locations provide higher-speed internet, relaxed oversight, and convenient geopolitical proximity.



Browser History viewing Taiwanese and Chinese sites



The targeting of Taiwanese infrastructure further complicates attribution. Kimsuky has not historically prioritized Taiwan, yet in this case, the actor demonstrated direct reconnaissance of Taiwanese government and developer networks. While this overlaps with Chinese APT priorities, recent evidence from the “Kim” dump, including analysis of phishing kits and credential theft workflows, suggests this activity was likely performed by a DPRK actor exploring broader regional interests, possibly in alignment with Chinese strategic goals. Researchers have noted that Kimsuky operators have recently asked questions in phishing lures related to potential Chinese-Taiwanese conflicts, implying interest beyond the Korean peninsula.



Some tooling overlaps with PRC-linked APTs, particularly GitHub-based stagers and proxy-resolving modules, but these are not uncommon in the open-source malware ecosystem and may reflect opportunistic reuse rather than deliberate mimicry.



IMINT Analysis: Visual Tradecraft and Cultural Camouflage



A review of image artifacts linked to the “Kim” actor reveals a deliberate and calculated use of Chinese social and technological visual content as part of their operational persona. These images, extracted from browser history and uploads attributed to the actor, demonstrate both strategic alignment with DPRK priorities and active cultural camouflage within the PRC digital ecosystem.



Uploads of images by Kim found in browser history



Images downloaded from aixfan[.]com



The visual set includes promotional graphics for Honor smartphones, SoC chipset evolution charts, Weibo posts featuring vehicle registration certificates, meme-based sarcasm, and lifestyle imagery typical of Chinese internet users. Notably, the content is exclusively rendered in simplified Chinese, reinforcing prior assessments that the operator either resides within mainland China or maintains a working digital identity embedded in Chinese platforms. Devices and services referenced, such as Xiaomi phones, Zhihu, Weibo, and Baidu, suggest intimate familiarity with PRC user environments.



Operationally, this behavior achieves two goals. First, it enables the actor to blend in seamlessly with native PRC user activity, which complicates attribution and helps bypass platform moderation or behavioral anomaly detection. Second, the content itself may serve as bait or credibility scaffolding (e.g. A framework to give the illusion of trust to allow for easier compromise ) in phishing and social engineering campaigns, especially those targeting developers or technical users on Chinese-language platforms.



Some images, such as the detailed chipset timelines and VPN or device certification posts, suggest a continued interest in supply chain reconnaissance and endpoint profiling—both tradecraft hallmarks of Kimsuky and similar APT units. Simultaneously, meme humor, sarcastic overlays, and visual metaphors (e.g., the “Kaiju’s tail is showing” idiom) indicate the actor’s fluency in PRC netizen culture and possible mockery of operational security breaches—whether their own or others’.



Taken together, this IMINT corpus supports the broader attribution model: a DPRK-origin operator embedded, physically or virtually, within the PRC, leveraging local infrastructure and social platforms to facilitate long-term campaigns against South Korea, Taiwan, and other regional targets while maintaining cultural and technical deniability.



Attribution Scenarios:




Option A: DPRK Operator Embedded in PRC

Use of Korean language, OCR targeting of Korean documents, and focus on GPKI systems strongly suggest North Korean origin.



Use of PRC infrastructure (e.g., Baidu, Gitee) and simplified Chinese content implies the operator is physically located in China or benefits from access to Chinese internet infrastructure.





Option B: PRC Operator Emulating DPRK

Taiwan-focused reconnaissance aligns with PRC cyber priorities.



Use of open-source tooling and phishing methods shared with PRC APTs could indicate tactical emulation.






The preponderance of evidence supports the hypothesis that “Kim” is a North Korean cyber operator embedded in China or collaborating with PRC infrastructure providers. This operational model allows the DPRK to amplify its reach, mask attribution, and adopt regional targeting strategies beyond South Korea, particularly toward Taiwan. As this hybrid model matures, it reflects the strategic adaptation of DPRK-aligned threat actors who exploit the permissive digital environment of Chinese networks to evade detection and expand their operational playbook.



Targeting Profiles



The “Kim” leak provides one of the clearest windows to date into the role-specific targeting preferences of the operator, revealing a deliberate focus on system administrators, credential issuers, and backend developers, particularly in South Korea and Taiwan.



In South Korea, the operator’s interest centers around PKI administrators and infrastructure engineers. The recovered OCR commands were used to extract technical details from PDF documents outlining Korea’s digital signature protocols, such as identity verification, certificate validation, and encrypted communications, components that form the backbone of Korea’s secure authentication systems. The goal appears to be not only credential theft but full understanding and potential replication of government-trusted PKI procedures. This level of targeting suggests a strategic intent to penetrate deeply trusted systems, potentially for use in later spoofing or identity masquerading operations.



PKI attack targets



In Taiwan, the operator shifted focus to developer infrastructure and cloud access portals. Specific domains accessed, like caa.org[.]tw/.git/, indicate attempts to enumerate internal repositories, most likely to discover hardcoded secrets, authentication tokens, or deployment keys. This is a classic supply chain targeting method, aiming to access downstream systems via compromised developer credentials or misconfigured services.



Additional activity pointed to interaction with cloud service login panels such as tw.systexcloud[.]com and mlogin.mdfapps[.]com. These suggest an attempt to breach centralized authentication systems or identity providers, granting the actor broader access into enterprise or government networks with a single credential set.



Taken together, these targeting profiles reflect a clear emphasis on identity providers, backend engineers, and those with access to system-level secrets. This reinforces the broader theme of the dump: persistent, credential-first intrusion strategies, augmented by reconnaissance of authentication standards, key management policies, and endpoint development infrastructure.



South Korean:




PKI admins, infrastructure engineers



OCR focus on Korean identity standards




Taiwanese:




Developer endpoints and internal .git/ repos



Access to cloud panels and login gateways




Final Assessment



The “Kim” leak represents one of the most comprehensive and technically intimate disclosures ever associated with Kimsuky (APT43) or its adjacent operators. It not only reaffirms known tactics, credential theft, phishing, and PKI compromise, but exposes the inner workings of the operator’s environment, tradecraft, and operational intent in ways rarely observed outside of active forensic investigations.



At the core of the leak is a technically competent actor, well-versed in low-level shellcode development, Linux-based persistence mechanisms, and certificate infrastructure abuse. Their use of NASM, API hashing, and rootkit deployment points to custom malware authorship. Furthermore, the presence of parsed government-issued Korean PDFs, combined with OCR automation, shows not just opportunistic data collection but a concerted effort to model, mimic, or break state-level identity systems, particularly South Korea’s GPKI.



The operator’s cultural and linguistic fluency in Korean, and their targeting of administrative and privileged systems across South Korean institutions, support a high-confidence attribution to a DPRK-native threat actor. However, the extensive use of Chinese platforms like gitee[.]com, Baidu, and Zhihu, and Chinese infrastructure for both malware hosting and browsing activity reveals a geographical pivot or collaboration: a hybrid APT footprint rooted in DPRK tradecraft but operating from or with Chinese support.



Most notably, this leak uncovers a geographical expansion of operational interest; the actor is no longer solely focused on the Korean peninsula. The targeting of Taiwanese developer portals, government research IPs, and .git/ repositories shows a broadened agenda that likely maps to both espionage and supply chain infiltration priorities. This places Taiwan, like South Korea, at the forefront of North Korean cyber interest, whether for intelligence gathering, credential hijacking, or as staging points for more complex campaigns.



The threat uncovered here is not merely malware or phishing; it is an infrastructure-centric, credential-first APT campaign that blends highly manual operations (e.g., hand-compiled shellcode, direct OCR of sensitive PDFs) with modern deception tactics such as AiTM phishing and TLS proxy abuse.



Organizations in Taiwan and South Korea, particularly those managing identity, certificate, and cloud access infrastructure, should consider themselves under persistent, credential-focused surveillance. Defensive strategies must prioritize detection of behavioral anomalies (e.g., use of OCR tools, GPKI access attempts), outbound communications with spoofed Korean domains, and the appearance of low-level toolchains like NASM or proxyres-based scanning utilities within developer or admin environments.



In short: the “Kim” actor embodies the evolution of nation-state cyber threats—a fusion of old-school persistence, credential abuse, and modern multi-jurisdictional staging. The threat is long-term, embedded, and adaptive.



Part III: Threat Intelligence Report



TLP WHITE:



Targeting Summary



The analysis of the “Kim” operator dump reveals a highly focused credential-theft and infrastructure-access campaign targeting high-value assets in both South Korea and Taiwan. Victims were selected based on their proximity to trusted authentication systems, administrative control panels, and development environments.



CategoryDetailsRegionsSouth Korea, TaiwanTargetsGovernment, Telecom, Enterprise ITAccountssvradmin, oracle, app_adm01, unwadm, shkim88, jaejung91Domainstw.systexcloud[.]com, nid-security[.]com, spo.go[.]kr, caa.org[.]tw/.git/



Indicators of Compromise (IOCs)



Domains




Phishing: nid-security[.]com, html-load[.]com, wuzak[.]com, koala-app[.]com, webcloud-notice[.]com



Spoofed portals: dcc.mil[.]kr, spo.go[.]kr, mofa.go[.]kr



Pastebin raw links: Used for payload staging and malware delivery




IP Addresses




External Targets (Taiwan):

163.29.3[.]119     National Center for High-performance Computing



118.163.30[.]45   Taiwanese government subnet



59.125.159[.]81   Chunghwa Telecom





Brute Forcing / Infrastructure Origins:

23.95.213[.]210   VPS provider with malicious history



218.92.0[.]210     China Unicom



122.114.233[.]77  Henan Mobile, PRC






Internal Host IPs (Operator Environment)




192.168.130[.]117



192.168.150[.]117



192.168.0[.]39




Operator Environment: Internal Host IP Narrative



The presence of internal IP addresses such as 192.168.130[.]117, 192.168.150[.]117, and 192.168.0[.]39 within the dump offers valuable insight into the attacker’s local infrastructure, an often-overlooked element in threat intelligence analysis. These addresses fall within private, non-routable RFC1918 address space, commonly assigned by consumer off-the-shelf (COTS) routers and small office/home office (SOHO) network gear.



The use of the 192.168.0[.]0/16 subnet, particularly 192.168.0.x and 192.168.150.x, strongly suggests that the actor was operating from a residential or low-profile environment, not a formal nation-state facility or hardened infrastructure. This supports existing assessments that North Korean operators, particularly those affiliated with Kimsuky, often work remotely from locations in third countries such as China or Southeast Asia, where they can maintain inconspicuous, low-cost setups while accessing global infrastructure.



Moreover, the distinction between multiple internal subnets (130.x, 150.x, and 0.x) may indicate segmentation of test environments or multiple virtual machines running within a single NATed network. This aligns with the forensic evidence of iterative development and testing workflows seen in the .bash_history files, where malware stagers, rootkits, and API obfuscation utilities were compiled, cleaned, and rerun repeatedly.



Together, these IPs reveal an operator likely working from a clandestine, residential base of operations, with modest hardware and commercial-grade routers. This operational setup is consistent with known DPRK remote IT workers and cyber operators who avoid attribution by blending into civilian infrastructure. It also suggests the attacker may be physically located outside of North Korea, possibly embedded in a friendly or complicit environment, strengthening the case for China-based activity by DPRK nationals.



MITRE ATT&CK Mapping



PhaseTechnique(s)Initial AccessT1566.002 ,  Adversary-in-the-Middle (AiTM) PhishingExecutionT1059.005 ,  Native API ShellcodeT1059.003 ,  Bash/Shell ScriptsCredential AccessT1555 ,  Credential Store DumpingT1557.003 ,  Session HijackingPersistenceT1176 ,  Rootkit (via khook syscall manipulation)Defense EvasionT1562.001 ,  Disable Security ToolsT1552 ,  Unsecured Credential FilesDiscoveryT1592 ,  Technical Information DiscoveryT1590 ,  Network InformationExfiltrationT1041 ,  Exfiltration over C2 ChannelT1567.002 ,  Exfil via Cloud Services



Tooling and Capabilities



The actor’s toolkit spans multiple disciplines, blending malware development, system reconnaissance, phishing, and proxy evasion:




NASM-based shellcode loaders: Compiled manually for Windows execution.



Win32 API hashing: Obfuscated imports via hashstring.py to evade detection.



GitHub/Gitee abuse: Tooling hosted or cloned from public developer platforms.



OCR exploitation: Used ocrmypdf to parse Korean PDF specs related to digital certificates and VPN appliances.



Rootkit deployment: Hidden persistence paths including /usr/lib64/tracker-fs and /proc/acpi/pcicard.



Proxy config extraction: Investigated PAC URLs using proxyres-based recon.




Attribution Confidence Assessment



Attribution CandidateConfidence LevelDPRK-aligned (Kimsuky)High, Native Korean targeting, GPKI focus, OCR behaviorChina-blended infrastructureModerate, PRC hosting, Gitee usage, Taiwan focusSolely PRC ActorLow-to-Moderate, Tooling overlap but weak linguistic match



Assessment: The actor appears to be a DPRK-based APT operator working from within or in partnership with Chinese infrastructure, representing a hybrid attribution model.



Defensive Recommendations



AreaRecommendationPKI SecurityMonitor usage of .key, .sig, .crt artifacts; enforce HSM or 2FA for key usePhishing DefenseBlock domains identified in IoCs; validate TLS fingerprints and referrer headersEndpoint HardeningDetect use of nasm, make, and OCR tools; monitor /usr/lib*/tracker-* pathsNetwork TelemetryAlert on .git/ directory access from external IPs; monitor outbound to Pastebin/GitHubTaiwan FocusEstablish watchlists for .tw domains targeted by PRC-originating IPsAdmin AccountsReview usage logs for svradmin, oracle, app_adm01, and ensure rotation policies



APPENDIX A



Overlap or Confusion with Chinese Threat Actors



There is notable evidence of operational blur between Kimsuky and Chinese APTs in the context of Taiwan. The 2025 “Kim” data breach revealed an attacker targeting Taiwan whose tools and phishing kits matched Kimsuky’s, yet whose personal indicators (language, browsing habits) suggested a Chinese national. Researchers concluded this actor was likely a Chinese hacker either mimicking Kimsuky tactics or collaborating with them.. In fact, the leaked files on DDoS Secrets hint that Kimsuky has “openly cooperated with other Chinese APTs and shared their tools and techniques”. This overlap can cause attribution confusion – a Taiwan-focused operation might initially be blamed on China but could involve Kimsuky elements, or vice versa. So far, consensus is that North Korean and Chinese cyber operations remain separate, but cases like “Kim” show how a DPRK-aligned actor can operate against Taiwan using TTPs common to Chinese groups, muddying the waters of attribution.



File List from dump:















Master Evidence Inventory:



File NameLanguageContent SummaryCategoryRelevance.bash_historyMixed (EN/KR)Operator shell history commandsSystem/LogShows rootkit compilation, file ops, network testsuser-bash_historyMixed (EN/KR)User-level shell commandsSystem/LogDevelopment and test activityroot-bash_historyMixed (EN/KR)Root-level shell commandsSystem/LogPrivilege-level activity, implant deploymentauth.log.2EN/KRAuthentication logs (PAM/SSH)System/LogCredential changes marked 변경완료, brute force IPs20190315.logENSystem log fileSystem/LogAuth and system access eventschrome-timeline.txtENBrowser activity timelineBrowserVisited domains extractionchromehistory.txtENBrowser history exportBrowserURLs visitedhistory.sqliteENEmpty DB fileBrowserNo useful dataMedia HistoryENEmpty SQLite DBBrowserNo playback activityHistoryENEmpty Brave/Chromium DBBrowserNo visited URLsWeb DataENAutofill/search DBBrowserSearch engines used (Google, DuckDuckGo, Qwant, Startpage, Ecosia)Visited LinksBinaryLevelDB/binary structureBrowserCould not extract URLsCookiesENSQLite DB with cookiesBrowserGoogle cookies foundrequest_log.txt.20250220ENCaptured phishing sessionPhishingSpoofed spo.go.kr, base64 credential logging技术说明书 – 22.docxZHChinese rootkit stealth manualRootkitKernel hiding, binary embedding1.ko 图文编译 .docZHChinese compilation guideRootkitRootkit build process1. build ko .txtZHBuild notesRootkitImplant compilation instructions0. 使用.txtZHUsage notesRootkitImplant usage and commandsre 正向工具修改建议 1.0.txtZHModification notesRootkitReverse tool modification suggestions1111.txtZHRootkit/tool snippetRootkitPart of implant notesclientBinaryRootkit client binaryRootkitController for implant communicationSSA_AO_AD_WT_002_웹보안 프로토콜설계서_Ver1.0_.docKRGPKI protocol design docPKIKorean web PKI standards행자부 웹보안API 인수인계.docKRGPKI API deployment manualPKIDeployment and cert API internalsHIRA-IR-T02_의약품처방조제_ComLibrary_통신전문.docKRMedical ComLibrary XML specHealthcarePrescription system communication(별지2)행정전자서명_기술요건_141125.pdfKRPKI requirements PDFPKIOCR targetSecuwaySSL U_카달로그.pdfKRVPN catalogPKI/VPNOCR targetphrack-apt-down-the-north-korea-files.pdfENPhrack articleReferenceBackground on Kimsuky dumpMuddled Libra Threat Assessment.pdfENThreat intel reportReferenceComparative threat actor studyLeaked North Korean Linux Stealth Rootkit Analysis.pdfENRootkit analysisReferenceDetailed implant studyInside the Kimsuky Leak.docx (various)ENThreat report draftsReportWorking versionsaccount (2).txtENDB export (DBsafer, TrustedOrange)InfraAccounts and DB changesresult.txtKRCert-related parsed dataInfraIncluded GPKI .key/.sigenglish_wikipedia.txtENWikipedia dumpReferenceUnrelated baselinebookmarks-2021-01-04.jsonlz4ENFirefox bookmarks (compressed)BrowserNeeds decompressionScreenshot translationsZHChinese text (rootkit marketing blurb)RootkitKernel hiding tool description




                            ]]></content:encoded>
        </item>
    </channel>
</rss>