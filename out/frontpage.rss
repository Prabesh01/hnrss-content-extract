<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Fri, 05 Sep 2025 10:50:47 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[I have two Amazon Echos that I never use, but they apparently burn GBs a day]]></title>
            <link>https://twitter.com/davepl1968/status/1963803025572770212</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45136728</guid>
            <description><![CDATA[Something went wrong, but don’t fret — let’s give it another shot.]]></description>
            <content:encoded><![CDATA[Something went wrong, but don’t fret — let’s give it another shot. Some privacy related extensions may cause issues on x.com. Please disable them and try again.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SAP splashes €20B on Euro sovereign cloud push]]></title>
            <link>https://www.theregister.com/2025/09/04/sap_sovereign_cloud/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45136558</guid>
            <description><![CDATA[: German giant takes aim at US hyperscaler dominance as some EU customers fret amid Trump 2.0 rhetoric]]></description>
            <content:encoded><![CDATA[
SAP says it will pump €20 billion into expanding sovereign cloud infrastructure in Europe over the next ten years, pitching itself as a secure and compliant alternative to American cloud giants.
The Germany-based enterprise software biz is looking to provide sovereign infrastructure for the public sector and regulated environments, said Thomas Saueressig, board member for customer services and delivery.
Microsoft admits it 'cannot guarantee' data sovereignty
READ MORE
"With our expanded SAP Sovereign Cloud offering, SAP is unlocking access to the full spectrum of cloud innovations and AI capabilities for all markets and industries while ensuring these advancements are delivered in a sovereign framework and on customers' own terms."
Data sovereignty in Europe is governed by the General Data Protection Regulation (GDPR). For example, in Ireland, Meta was fined €1.2 billion for inadequately safeguarding the transfer of European residents' data to the US.
SAP is offering three options for businesses concerned about data sovereignty and compliance.

    

First is SAP Cloud Infrastructure, an IaaS platform developed and operated with open source technologies within SAP's datacenter network. The vendor said all data is to be stored within the EU to maintain compliance with GDPR.

        


        

Secondly, SAP is offering a Sovereign Cloud On-Site within a customer-owned or customer-selected datacenter. It is designed to offer high levels of data, operational, technical, and legal sovereignty.
Lastly, SAP is offering Delos Cloud in Germany, which it says offers a secure and sovereign cloud flexible enough to meet country-specific sovereignty requirements.

        

"The digital resilience of Europe depends on sovereignty that is secure, scalable and future-ready," said Martin Merz, president, SAP Sovereign Cloud.
However, in June, SAP CEO Christian Klein warned against any efforts to compete with US cloud hyperscalers in Europe.
He said SAP had struck deals with French AI company Mistral and business services company Capgemini to support customers concerned about data sovereignty in Europe, but saw no point in replicating the effort at the level of cloud infrastructure.

        

"The only thing I would caution against in Europe is this: the competitiveness of Europe's car industry or chemical industry will not be by building 20 different datacenters in France and trying to compete against the US hyperscalers," Klein said.
"It's completely crazy, and that is sovereignty completely done in the wrong way. We need the best here in Europe to apply AI, to apply intelligent software to be the best, to produce much better, much faster cars, and be way more efficient running our supply chains."


Microsoft can't guarantee data sovereignty – OVHcloud says 'We told you so'

When hyperscalers can't safeguard one nation's data from another, dark clouds are ahead

'Close to impossible' for Europe to escape clutches of US hyperscalers

'Impossible hill to climb': US clouds crush European competition on their home turf

European biz calls for Euro tech for local people

While SAP AI and data storage offers customers "complete sovereignty from the top to the bottom," US providers are also marketing data sovereignty solutions in Europe in a bid to counter concerns among some governments and commercial customers worried about the Trump 2.0 administration.
AWS, Google, and Microsoft have all responded to concerns that experts began to voice in February, weeks after the bombastic US president was sworn in.
An SAP spokesperson said the new investment covers the development, delivery, and maintenance of SAP's sovereign cloud solutions, including infrastructure, research and development, operating personnel, and compliance investments.
The company said Klein's caution was against wasting resources on trying to replicate hyperscalers' global infrastructure at massive scale – "prioritizing code over building concrete." His message was that Europe's competitiveness will come from software, AI, and applied innovation, not from duplicating datacenter capacity.
SAP's €20 billion investment is set to be a "targeted at full-stack sovereignty and ensures that Europe has choice and control where sovereignty matters most" such as in the public sector, regulated industries, and defense, the spokesperson said.
It is set to build on SAP's existing European datacenter footprint in Walldorf, Sankt Leon-Rot, and Frankfurt, while expanding capabilities with sovereign controls, new deployments at customer locations, and working with sovereign partners like Delos Cloud in Germany.
"SAP isn't competing with hyperscalers on scale or entering the IaaS business, but ensures that Europe can adopt cloud and AI securely, under European control. The investment is about building sovereignty into the stack – not about duplicating hyperscaler concrete," they said. ®                                
                    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[IRHash: Efficient Multi-Language Compiler Caching by IR-Level Hashing]]></title>
            <link>https://www.usenix.org/conference/atc25/presentation/landsberg</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45136367</guid>
        </item>
        <item>
            <title><![CDATA[I bought the cheapest EV, a used Nissan Leaf]]></title>
            <link>https://www.jeffgeerling.com/blog/2025/i-bought-cheapest-ev-used-nissan-leaf</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45136103</guid>
            <content:encoded><![CDATA[

I bought a used 2023 Nissan Leaf in 2025, my first 'new' car in 15 years. The above photo was taken by the dealership; apparently their social media team likes to post photos of all purchasers.

I test drove a Tesla in 2012, and quickly realized my mistake. No gasoline-powered car (outside of supercars, maybe? Never drove one of those) could match the feel of pressing the throttle on an electric.

I started out with a used minivan, which I drove into the ground. Then I bought a used Olds that I drove into the ground. Then I bought a used Camry that I bought before we had kids, when I had a 16 mile commute.

Fast forward about 15 years, and I found myself with a very short commute, only driving a few miles a day, and a family minivan we use for nearly all the 'driving around the kids' stuff.

So I wanted a smaller car (get back a foot or so of garage space...) that was also more efficient.

Video and GitHub EV Project

If you don't like reading blog posts (why are you here?), I also posted a video going over most of this, with a little more color, on my YouTube channel:





Also, this blog post is also the centerpiece of my new GitHub project geerlingguy/electric-car, where I detail all the steps on my nascent EV journey.

Equipment and Add-ons

Before I go further, I thought I'd mention some of the things I've added to my Leaf to make the EV experience a little nicer (some links are Amazon affiliate links. I earn for qualifying referrals):


Grizzl-E Level 2 Charger for the garage (see Issue #5)
Lectron L1 J1772 EV charger for a more portable charger, when I just need to top off the car for a few hours
J1772 Wall mount for cable and plug - I was going to 3D print one, but figured the metal product would hold up better in a garage in the midwest
NACS to J1772 AC L1/L2 charging adapter
CCS1 to CHAdeMO L3 DC Fast charge adapter (see Issue #9)
CarlinKit 5.0 Wireless CarPlay/Android Auto adapter because the Leaf only supports wired CarPlay by default
VIOFO A119 Mini Dashcam with a Dongar wiring harness adapter (see Issue #3)


Monitoring the Battery

If you're considering a used Leaf, or if you have a Leaf already, it's a good idea to keep tabs on the battery health, especially since the meter on your dash is painfully basic in how much data it provides.

Individual cell charge, 'State of Health' of the overall battery, and much more are available through the car's OBD-II port.



Soon after I bought my Leaf, I ordered a LeLink 2 ($35) and bought the LeafSpy Pro App for my iPhone ($20).

I plugged the LeLink 2 into the OBD-II diagnostics port under the steering column, and fired up LeafSpy Pro. It gives me some helpful metrics like:


  
  SOH: State of Health
  Hx: Conductance
  


See Issue #8: Document battery health for all my notes monitoring my own Leaf's battery. But bottom line, my battery showed a 93.16% 'SoH' (State of Health), meaning it still has most of its capacity.

I've been reading up on various forums about managing the Leaf's battery, and am trying to do some things to extend the battery's life as long as possible:


Limiting the number of QCs (Quick Charges / DC Fast Charge), as this heats up the uncooled Leaf battery, degrading it slightly each time, especially on hotter days
Keeping the charge between 50-80% when manageable
Charging up to 100% at least once a month, and letting it 'top off' to rebalance the pack for at least a few hours afterwards
Not driving like a maniac, despite having more torque in this car than I've ever had in any of my previous cars


Why buy electric?

I overanalyze most things, so had been researching this purchase for about a decade now.

With EVs there are tradeoffs. Even in my situation, only driving a car a few miles a day, I do take my car on one or two regional road trips every year.

Having the ability to hop in at 6 am and be in Chicago or KC by late morning is nice. Having to plan a long break somewhere halfway to charge is not.



But if I only take that trip once a year, I can either (a) rent a gas car that gets me there a little more quickly, and ensures I don't have to find a spot in the destination city to do a full charge before the return trip. Or (b) plan for an extra X hours total during the trip to ensure I have padding for charging.

Charging infrastructure's improving in the US (and in many parts of the world), but it's nowhere near as ubiquitous as gas stations.

Hopefully this improves over time, but for now, I plan on using the electric car for local travel, likely only going more than 100 miles or so in a day once or twice a year.

Why buy Leaf?

Price.

That's mostly it. And I drove a Nissan Sentra rental on a recent trip, and realized Nissan isn't half bad. They seem to not require an Internet connection for their cars, they offer basic lane following and adaptive cruise control, they have CarPlay/Android Auto...

The Leaf ticks all the little 'convenience' checkboxes, but is also not 'extravagant'.

And the later model years also aren't "look at me I drive an EV" ugly (though they're not amazing-looking, either).

But I drove a minivan, an olds, and a Camry, so obviously I'm function > form when it comes to my car!

Because of the smaller battery (and up until 2026, a battery with no active cooling), combined with the use of a DC fast charging connector (CHAdeMO) that's going out of style in the US, used Nissan Leafs are priced considerably lower than competitors.

Well, all except maybe Teslas around a year or two older right now. But Teslas don't have native CarPlay. And I'm not a fan of how Tesla is trying to turn the car into some kind of appliance, RoboTaxi, self-driving thing, versus it being a transportation vehicle that I can do what I want with.

No judgement on Tesla owners, the used Tesla market was enticing at the time I bought the Leaf.

I also looked a lot at the Hyundai Ioniq and Kona; both were just a little bit too large for my liking, but they could've worked. The problem was used models in good condition were a lot more expensive than I was willing to pay.

So back to the Leaf: Nissan's probably not the best right now when it comes to EVs and features, but they're certainly the cheapest. And 'good enough' is fine by me.



She's got it where it counts, kid.

Gripes about my Leaf

There are a few things that baffle me about the Leaf, some that have been frustrating from the first test drive; others that are more subtle:


There is no 'play/pause' button. Anywhere. At least not on the steering wheel or the display area. You have to go into the music section on the entertainment display, then press the software play/pause button. That's dumb. I've resorted to just turning Audio on/off using the volume knob, which accomplishes the same goal but is not always ideal.
Going into 'Neutral' is an exercise in frustration. I thought you just put your foot on the brake and move the shifter knob to the left. But you have to do it with the right timing, I think.
There's no way to open the tailgate short of pressing the release button. At least as far as I'm aware. There's no button in the cabin or key fob to unlatch it. The manual says the other way to open it is with a screwdriver, from inside the car, pushing on the latch (lol). I'm not alone here. At least there's a button on the remote to open the charge port.


The joy of electric

I don't care about engine noise. I appreciate it, though. My brother had a 1992 Forumula Firebird. And I nearly owned it after he moved away, instead of my Olds! (But I'm a boring-car person, so I think I was happier with the Olds).

The nice things about electric vehicles that swayed me in their favor, in descending order:


One pedal driving Seriously, why doesn't every EV have this mode? It makes driving one feel SO much better than any gas car, in terms of connection between driver and car movement.
Sprightly torque: Outside of exotic tiny gas cars, you're not going to get the same zip even a cheap EV like a Leaf gives you—smash the accelerator in non-Eco mode and any passenger will giggle, every time.
Blissful quiet: Though some cars have annoying noises (Nissan calls this VSP, or "Vehicle Sound for Pedestirians") they play at low speeds.
Lower maintenance requirements: I hate every time I have to jack up my car and change the brakes, or take it in for oil/fluid changes. EVs (usually) require less maintenance, besides maybe tires.
Conveniences: Like running climate control to cool down/heat up the car prior to hopping in, even while it's in the garage! Or plugging it in to charge at home, and not having to stop by a gas station.
Long-term economics: in general, charging with electricity, at least here in St. Louis, is cheaper than filling up with gas, on a dollar-per-mile basis.


The pain of electric



All that said, I knew going into this there would be some pain. Maybe in 10 or 20 years these things will get solved, but off the top of my head:


Price: The Leaf (especially used, right now) is the cheapest, but it is by no means cheap. It takes a few years to break even with a similarly-specced gas car. But buying a gas car, you have a lot more options on the low-low end.
Range Anxiety: Yes, it's overblown, but no, it's not non-existent. The day I bought my used EV, the dealership (which doesn't sell many EVs, even new) didn't have a 'Level 3' DC fast charger—and they had only charged it to about 16%. Letting it top off at L2 while I was dealing with finance, we got to 23%. I wasn't quite sure I'd make it home off the lot! Luckily I did, with 12 miles of range remaining. Road tripping or day trips require more planning when driving an EV.
Lack of standards: For 'L3' DC Fast Charging, the Leaf has a CHAdeMO port. Teslas and many newer EVs have NACS. Then there's CCS1 and CCS2. And charging stations are run by multiple vendors with multiple apps and payment methods. It's not like gas stations, like with Shell, BP, Buckee's, etc. where you just drive up, stick the gas nozzle in your tank, and squeeze. Even adapters can be complicated and annoying, and many EV charging stations only support one or two standards—and some may only have one CHAdeMO plug, and that plug may have been ripped off the unit to be scrapped by a copper thief!
Lack of standards, part 2: For L1/L2 charging, some cars use J1772, some use NACS... and then wall charging units are all over the board with supporting 6, 12, or 16 Amps for L1 (they shouldn't do 16 on a 15A circuit but it seems like some do!), or various different amperages for L2. Some of these units require apps to configure them, others have dip switches, and yet others are not configurable, and don't list their exact specs in an easy-to-find location. Usually forum posts from users who buy the chargers offer more information than product manufacturers' own websites!
Being an EV: For some reason, most EVs look like... EVs. I honestly was holding out hope Tesla would just make a Corolla, but an EV version. All the cheap EVs like the Bolt, i3, Leaf, etc. just look... sorta ugly. Subjective, sure, but at least my Olds looked kinda sleek. Even if it was an Olds. EVs stand out, and that I don't enjoy. I want an EV that looks like a Camry. Just blend in and don't stand out.
Cables and chargers: The Leaf has slightly less trunk space than my slightly-larger Camry. I didn't realize how big L1/L2 charge cables are. Even L1-only cables (which charge at a very anemic pace, like 10 miles / hour of charge) are fairly thick, bulky affairs. About 1/10 of my trunk is devoted to my charging cable. And on a road trip, I will likely carry my NACS to J1772 and CCS1 to CHAdeMO adapters. And the latter adapter includes its own battery (that has to be charged) and firmware (that might need to be updated)!


Further Reading

Be sure to check the Issues in my GitHub project for more of my EV adventures.

I don't plan on becoming an EV advocate by any means.

The Leaf is the perfect option for me, but I wouldn't recommend an EV for most car owners yet, especially considering the price disparity and infrastructure requirements that exclude large swaths of the population!]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fiber Concurrency]]></title>
            <link>https://honeyryderchuck.gitlab.io/httpx/wiki/Fiber-Concurrency</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45136008</guid>
            <description><![CDATA[The :fiber_concurrency plugin enables connections a session to be used seamlessly across fibers managed by a fiber scheduler. This is of particular relevance if the connections are long-lived/persistent.]]></description>
            <content:encoded><![CDATA[
  
  The :fiber_concurrency plugin enables connections a session to be used seamlessly across fibers managed by a fiber scheduler. This is of particular relevance if the connections are long-lived/persistent.

Note that, if you’re using the :persistent plugin, this plugin is required by default.

How to use


http = HTTPX.plugin(:fiber_concurrency)

Thread.start do
  # assuming fiber scheduler is set here
  10.times.each do
    Fiber.schedule do
      http.get("https://example.com")
    end
  end
end


Who is this for

This plugin is a requirement if you’re using httpx in programs with a fiber scheduler. This includes, for example, programs developed using the async gem.

Next: Custom Plugins

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SQL Needed Structure]]></title>
            <link>https://www.scattered-thoughts.net/writing/sql-needed-structure/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45135623</guid>
            <description><![CDATA[Here are two pages from the internet movie database:]]></description>
            <content:encoded><![CDATA[
  Here are two pages from the internet movie database:

There are two things to note about these pages.


The data on the page is presented in a hierarchichal structure. The movie page contains a director, a list of genres, a list of actors, and each actor in the list contains a list of characters they played in the movie. You can't sensibly fit all of this into a single flat structure like a relation.


The order of the hierarchy isn't the same on both pages. On one page we have movie->actors and on the other page we have actor->movies. So you can't just directly store the hierarchy in your database - you need to be able to traverse relationships in both directions.


So we store all our data in a relational database in flat tables and then whenever we need to render some UI we transform the flat data into whatever hierarchy we need.
Doing this transformation by hand is tedious and error-prone. We call this tedium "the object-relational mismatch" but it isn't really about objects or relations. The fundamental problem is that fitting complex relationships to human vision usually requires constructing some visual hierarchy, but different tasks require different hierarchies.
Whatever database and programming language you use, you will have to deal with this. But it's particularly painful in sql because sql wasn't designed to produce hierarchical data.
sql wasn't built to yield structure
Let's grab the imdb public dataset and try to reproduce the source data for that movie page (or at least a subset of it, because I didn't bother importing all the tables). We want to see an output that looks like this:
{
  "title": "Baby Driver",
  "director": ["Edgar Wright"],
  "writer": ["Edgar Wright"]
  "genres": ["Action", "Crime", "Drama"],
  "actors": [
    {"name": "Ansel Elgort", "characters": ["Baby"]},
    {"name": "Jon Bernthal", "characters": ["Griff"]},
    {"name": "Jon Hamm", "characters": ["Buddy"]},
    {"name": "Eiza González", "characters": ["Darling"]},
    {"name": "Micah Howard", "characters": ["Barista"]},
    {"name": "Lily James", "characters": ["Debora"]},
    {"name": "Morgan Brown", "characters": ["Street Preacher"]},
    {"name": "Kevin Spacey", "characters": ["Doc"]},
    {"name": "Morse Diggs", "characters": ["Morse Diggs"]},
    {"name": "CJ Jones", "characters": ["Joseph"]}
  ],
}

Let's grab the title first:
postgres=# select primaryTitle from title where tconst = 'tt3890160';
 primarytitle
--------------
 Baby Driver

And now we need the director:
postgres=# select primaryTitle, person.primaryName 
from title, principal, person
where title.tconst = 'tt3890160' 
and title.tconst = principal.tconst 
and principal.nconst = person.nconst 
and principal.category = 'director';

 primarytitle | primaryname  
--------------+--------------
 Baby Driver  | Edgar Wright

And the writer:
postgres=# select 
  primaryTitle, 
  director.primaryName as director,
  writer.primaryName as writer
from title, 
principal as principal_director, person as director, 
principal as principal_writer, person as writer
where title.tconst = 'tt3890160' 
and title.tconst = principal_director.tconst 
and principal_director.nconst = director.nconst 
and principal_director.category = 'director'
and title.tconst = principal_writer.tconst 
and principal_writer.nconst = writer.nconst 
and principal_writer.category = 'writer';

 primarytitle |   director   |    writer    
--------------+--------------+--------------
 Baby Driver  | Edgar Wright | Edgar Wright

We're already in trouble. If this movie had 2 directors and 2 writers, this query would return 4 rows:
 primarytitle |   director   |    writer    
--------------+--------------+--------------
 Baby Driver  | Edgar Wright | Edgar Wright
 Baby Driver  | Edgar Wright | A. Writer
 Baby Driver  | A. Director  | Edgar Wright
 Baby Driver  | A. Director  | A. Writer

If there was no director in the database then this query would return 0 rows, no matter how many writers there were. Now we don't even know what the movie is called.
 primarytitle |   director   |    writer    
--------------+--------------+--------------

We can't sensibly fit the data we want into a single relation, and we can't return more than one relation per query. So we have to issue multiple queries:
postgres=# select primaryTitle from title where tconst = 'tt3890160';
 primarytitle
--------------
 Baby Driver

postgres=# select person.primaryName 
from title, principal, person
where title.tconst = 'tt3890160' 
and title.tconst = principal.tconst 
and principal.nconst = person.nconst 
and principal.category = 'director';

 primaryname  
--------------
 Edgar Wright

postgres=# select person.primaryName 
from title, principal, person
where title.tconst = 'tt3890160' 
and title.tconst = principal.tconst 
and principal.nconst = person.nconst 
and principal.category = 'writer';

 primaryname  
--------------
 Edgar Wright

postgres=# select person.nconst, person.primaryName
from title, principal, person
where title.tconst = 'tt3890160' 
and title.tconst = principal.tconst 
and principal.nconst = person.nconst 
and principal.category = 'actor'
limit 10;

  nconst   |  primaryname  
-----------+---------------
 nm5052065 | Ansel Elgort
 nm1256532 | Jon Bernthal
 nm0358316 | Jon Hamm
 nm2555462 | Eiza González
 nm8328714 | Micah Howard
 nm4141252 | Lily James
 nm3231814 | Morgan Brown
 nm0000228 | Kevin Spacey
 nm1065096 | Morse Diggs
 nm1471085 | CJ Jones

postgres=# select principal_character.nconst, principal_character.character
from title, principal, principal_character
where title.tconst = 'tt3890160' 
and title.tconst = principal.tconst 
and principal.nconst = person.nconst 
and principal.category = 'actor'
and principal_character.tconst = principal.tconst
and principal_character.nconst = principal.nconst;

  nconst   |     character      
-----------+---------------------
 nm5052065 | Baby
 nm8328714 | Barista
 nm0358316 | Buddy
 nm2555462 | Darling
 nm4141252 | Debora
 nm0000228 | Doc
 nm1256532 | Griff
 nm1471085 | Joseph
 nm1065096 | Morse Diggs
 nm3231814 | Street Preacher

Through the magic of joins we have retrieved all the data we need and it only required holding a transaction open for 4 network roundtrips.
All that's left to do now is... the same joins, but inside the backend web server. Because we have to re-assemble these flat outputs into the structure of the page.
Also note that fully half of the data returned is the nconst column which we didn't even want in the output. We only returned it because we need it as a key so we can repeat the joins that we already did in the database. The more paths you traverse, the more useless join keys you need to send to the backend web server.
All of this is pretty tedious so we invented ORMs to automate it. But:

Almost all ORMs end up sending multiple queries for the output that we want. If you have a good ORM and you use it carefully it'll send one query per path in the output, like the raw sql above. If you're less careful you might get one query per actor in the film.
Many ORMs also make a mess of consistency by lazily loading data in separate transactions. So we might generate a page where different parts of the data come from different points in time, which is confusing for users.
Using an ORM locks you into only using one specific programming language. What if you need to query your data from a different language? You'll probably end up talking to the same ORM through a microservice.

old dogs can sort of learn new tricks
These days sql actually can produce structured data from queries.
A lot of people are mad about this. Whenever I talk about it they reflexively yell things like "structured data doesn't belong in the database" as if there was a universal system of morality that uniquely determined the locations of various data processing tasks.
But I can't help but note again that the structure has to happen somewhere because that's what the output page looks like and that doing it outside the database isn't working very well.
Whenever we're building a UI for humans, whether on the web or native, the main use of the query language is to turn relational data into structured data for the client to render. So it would be really nice if the query language was actually able to produce structured data.
Like this:
select jsonb_agg(result) from ( 
  select 
    primaryTitle as title, 
    genres,
    (
      select jsonb_agg(actor) from (
        select
          (select primaryName from person where person.nconst = principal.nconst) as name, 
          (
              select jsonb_agg(character)
              from principal_character
              where principal_character.tconst = principal.tconst
              and principal_character.nconst = principal.nconst
          ) as characters
        from principal
        where principal.tconst = title.tconst 
        and category = 'actor'
        order by ordering 
        limit 10
      ) as actor
    ) as actors,
    (
      select jsonb_agg(primaryName)
      from principal, person
      where principal.tconst = title.tconst
      and person.nconst = principal.nconst
      and category = 'director'
    ) as director,
    (
      select jsonb_agg(primaryName)
      from principal, person
      where principal.tconst = title.tconst
      and person.nconst = principal.nconst
      and category = 'writer'
    ) as writer
  from title
  where tconst = $1
) as result;

It's not perfect. You can definitely see the duct tape, and the query plan often suffers from the lack of decorrelation. But we can grab all the data needed for the entire page in a single query, with one network roundtrip. Whether you use these features directly or as the output of your ORM, this is a sizable improvement for one of the main usecases of relational databases!
It doesn't matter that this isn't the way things have always worked. Sql is not relational algebra and relational algebra is not math, and neither was carved into stone tablets handed down from Codd.
We make tools to serve our purposes, and our purposes have changed a hell of a lot since the 70s, when the main client of a database was a human typing sql character by character into an interactive transaction on a teletype connected to a mainframe with 500kb of RAM, almost 20 years before the invention of the world wide web.
Maybe it's ok for our tools to evolve to meet new demands. And we can evolve with them.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Swimming in Tech Debt]]></title>
            <link>https://helpthisbook.com/lou-franco/swimming-in-tech-debt</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45135263</guid>
            <description><![CDATA[Read "Swimming in Tech Debt" by Lou Franco on Help This Book]]></description>
            <content:encoded><![CDATA[Swimming in Tech Debt - Help This Book]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Using AI to perceive the universe in greater depth]]></title>
            <link>https://deepmind.google/discover/blog/using-ai-to-perceive-the-universe-in-greater-depth/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45134489</guid>
            <description><![CDATA[In a paper published today in Science, we introduce Deep Loop Shaping, a novel AI method that will unlock next-generation gravitational-wave science. Deep Loop Shaping reduces noise and improves...]]></description>
            <content:encoded><![CDATA[
      
  
    
    
  
  
  
    
      

      
      
        
          
            
              
                
                
                  
                  

    
      Science
      Using AI to perceive the universe in greater depth

      
    
      
        Published
        4 September 2025
      
      
        Authors
        
      
    
  

      
    

    
      
    
    
    
      
      
    
    
  
    
  
                
              
                
                
                  
                  
  Our novel Deep Loop Shaping method improves control of gravitational wave observatories, helping astronomers better understand the dynamics and formation of the universe.To help astronomers study the universe’s most powerful processes, our teams have been using AI to stabilize one of the most sensitive observation instruments ever built.In a paper published today in Science, we introduce Deep Loop Shaping, a novel AI method that will unlock next-generation gravitational-wave science. Deep Loop Shaping reduces noise and improves control in an observatory’s feedback system, helping stabilize components used for measuring gravitational waves — the tiny ripples in the fabric of space and time.These waves are generated by events like neutron star collisions and black hole mergers. Our method will help astronomers gather data critical to understanding the dynamics and formation of the universe, and better test fundamental theories of physics and cosmology.We developed Deep Loop Shaping in collaboration with LIGO (Laser Interferometer Gravitational-Wave Observatory) operated by Caltech, and GSSI (Gran Sasso Science Institute), and proved our method at the observatory in Livingston, Louisiana.LIGO measures the properties and origins of gravitational waves with incredible accuracy. But the slightest vibration can disrupt its measurements, even from waves crashing 100 miles away on the Gulf coast. To function, LIGO relies on thousands of control systems keeping every part in near-perfect alignment, and adapts to environmental disturbances with continuous feedback.Deep Loop Shaping reduces the noise level in the most unstable and difficult feedback loop at LIGO by 30 to 100 times, improving the stability of its highly-sensitive interferometer mirrors. Applying our method to all of LIGO’s mirror control loops could help astronomers detect and gather data about hundreds of more events per year, in far greater detail.In the future, Deep Loop Shaping could also be applied to many other engineering problems involving vibration suppression, noise cancellation and highly dynamic or unstable systems important in aerospace, robotics, and structural engineering.Measuring across the universeLIGO uses the interference of laser light to measure the properties of gravitational waves. By studying these properties, scientists can figure out what caused them and where they came from. The observatory’s lasers reflect off mirrors positioned 4 kilometers apart, housed in the world’s largest vacuum chambers.

                
              
                
                
                  
                  






  

  
      Aerial view of LIGO (Laser Interferometer Gravitational-Wave Observatory) in Livingston, Louisiana, USA. The observatory’s lasers reflect off mirrors positioned 4 kilometers apart. Photo credit of Caltech/MIT/LIGO Lab.
    

                
              
                
                
                  
                  
  Since first detecting gravitational waves produced by a pair of colliding black holes, in 2015, verifying the predictions of Albert Einstein’s general theory of relativity, LIGO’s measurements have deeply changed our understanding of the universe.With this observatory, astronomers have detected hundreds of black hole and neutron star collisions, proven the existence of binary black hole systems, seen new black holes formed in neutron star collisions, studied the creation of heavy elements like gold and more.Astronomers already know a lot about the largest and smallest black holes, but we only have limited data on intermediate-mass black holes — considered the “missing link” to understanding galaxy evolution.Until now, LIGO has only been capable of observing very few of these systems. To help astronomers capture more detail and data of this phenomena, we worked to improve the most difficult part of the control system and expand how far away we can see these events.

                
              
                
                
                  
                  
  
    
    Studying the universe using gravity instead of light, is like listening instead of looking. This work allows us to tune in to the bass.
  
  Rana Adhikari, Professor of Physics at the Caltech, 2025

                
              
                
                
                  
                  
  Reducing noise and stabilizing the systemAs gravitational waves pass through LIGO’s two 4 kilometer arms, they warp the space between them, changing the distance between the mirrors at either end. These tiny differences in length are measured using light interference to an accuracy of 10^-19 meters, which is 1/10’000 the size of a proton. With measurements this small, LIGO’s detector mirrors must be kept extremely still, isolated from environmental disturbance.

                
              
                
                
                  
                  






  

  
      Closeup photograph of LIGO, which uses strong lasers and mirrors to detect gravitational waves in the universe, generated by events like collisions and mergers of black holes. Photo credit of Caltech/MIT/LIGO Lab.
    

                
              
                
                
                  
                  
  This requires one system for passive mechanical isolation and another control system for actively suppressing vibrations. Too little control causes the mirrors to swing, making it impossible to measure anything. But too much control actually amplifies vibrations in the system, instead of suppressing them, drowning out the signal in certain frequency ranges.These vibrations, known as “control noise”, are a critical blocker to improving LIGO’s ability to peer into the universe. Our team designed Deep Loop Shaping to move beyond traditional methods, such as the linear control design methods currently in operation, to remove the controller as a meaningful cause of noise.A more effective control systemDeep Loop Shaping leverages a reinforcement learning method using frequency domain rewards and surpasses state-of-the-art feedback control performance.In a simulated LIGO environment, we trained a controller that tries to avoid amplifying noise in the observation band used for measuring gravitational waves — the band where we need the mirror to be still to see events like black hole mergers of up to a few hundred solar masses.

                
              
                
                
                  
                  






  

  
      Diagram showing LIGO’s intricate systems of lasers and mirrors. A distributed control system actively adjusts the mirrors, counteracting the laser radiation pressure and vibrations from external sources.
    

                
              
                
                
                  
                  
  Through repeated interaction, guided by frequency domain rewards, the controller learns to suppress the control noise in the observation band. In other words, our controllers learn to stabilize the mirrors without adding harmful control noise, bringing noise levels down by a factor of ten or more, below the amount of vibrations caused by quantum fluctuations in the radiation pressure of light reflecting off the mirrors.Strong performance across simulation and hardwareWe tested our controllers on the real LIGO system in Livingston, Louisiana, USA — finding that they worked as well on hardware as in simulation.Our results show that Deep Loop Shaping controls noise up to 30-100 times better than existing controllers, and it eliminated the most unstable and difficult feedback loop as a meaningful source of noise on LIGO for the first time.

                
              
                
                
                  
                  






  

  
      Line chart showing the resulting control noise spectrum using our Deep Loop Shaping method. There is an improvement of 30-100 times in the injected control noise levels in the most unstable and difficult feedback control loop.
    

                
              
                
                
                  
                  
  In repeated experiments, we confirmed that our controller keeps the observatory’s system stable over prolonged periods.Better understanding the nature of the universeDeep Loop Shaping pushes the boundaries of what’s currently possible in astrophysics by solving a critical blocker to studying gravitational waves.Applying Deep Loop Shaping to LIGO’s entire mirror control system has the potential to eliminate noise from the control system itself, paving the way for expanding its cosmological reach.Beyond significantly improving how existing gravitational wave observatories measure further and dimmer sources, we expect our work to influence the design of future observatories, both on Earth and in space — and ultimately help connect missing links throughout the universe for the first time.

                
              
                
                
                  
                  


  
    Learn more about our work
  

  
    
      
            
              
      Read our paper
      
    
            
        
        
    
      
            
              
      Read the Caltech blog
      
    
            
        
        
    
      
            
              
      Read the GSSI blog
      
    
            
        
        
    
      
            
              
      Learn about LIGO
      
    
            
        
        
    
  

                
              
                
                
                  
                  
      AcknowledgementsThis research was done by Jonas Buchli, Brendan Tracey, Tomislav Andric, Christopher Wipf, Yu Him Justin Chiu, Matthias Lochbrunner, Craig Donner, Rana X Adhikari, Jan Harms, Iain Barr, Roland Hafner, Andrea Huber, Abbas Abdolmaleki, Charlie Beattie, Joseph Betzwieser, Serkan Cabi, Jonas Degrave, Yuzhu Dong, Leslie Fritz, Anchal Gupta, Oliver Groth, Sandy Huang, Tamara Norman, Hannah Openshaw, Jameson Rollins, Greg Thornton, George van den Driessche, Markus Wulfmeier, Pushmeet Kohli, Martin Riedmiller and is a collaboration of LIGO, Caltech, GSSI and GDM.We’d like to thank the fantastic LIGO instrument team for their tireless work on keeping the observatories up and running and supporting our experiments.
    
                
              
            
          
        
      

      
    
  
  

  

  

    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fil's Unbelievable Garbage Collector]]></title>
            <link>https://fil-c.org/fugc</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45133938</guid>
            <description><![CDATA[Fil-C uses a parallel concurrent on-the-fly grey-stack Dijkstra accurate non-moving garbage collector called FUGC (Fil's Unbelievable Garbage Collector). You can find the source code for the collector itself in fugc.c, though be warned, that code cannot possibly work without lots of support logic in the rest of the runtime and in the compiler.]]></description>
            <content:encoded><![CDATA[
        
        
Fil's Unbelievable Garbage Collector

Fil-C uses a parallel concurrent on-the-fly grey-stack Dijkstra accurate non-moving garbage collector called FUGC (Fil's Unbelievable Garbage Collector). You can find the source code for the collector itself in fugc.c, though be warned, that code cannot possibly work without lots of support logic in the rest of the runtime and in the compiler.

Let's break down FUGC's features:


Parallel: marking and sweeping happen in multiple threads, in parallel. The more cores you have, the
faster the collector finishes.
Concurrent: marking and sweeping happen on some threads other than the mutator threads (i.e. your
program's threads). Mutator threads don't have to stop and wait for the collector. The interaction
between the collector thread and mutator threads is mostly non-blocking (locking is only used on
allocation slow paths).
On-the-fly: there is no global stop-the-world, but instead we use
"soft handshakes" (aka "ragged safepoints"). This means that the GC may ask threads to do some work (like scan stack), but threads do this
asynchronously, on their own time, without waiting for the collector or other threads. The only "pause"
threads experience is the callback executed in response to the soft handshake, which does work bounded
by that thread's stack height. That "pause" is usually shorter than the slowest path you might take
through a typical malloc implementation.
Grey-stack: the collector assumes it must rescan thread stacks to fixpoint. That is, GC starts with
a soft handshake to scan stack, and then marks in a loop. If this
loop runs out of work, then FUGC does another soft handshake. If that reveals more objects, then
concurrent marking resumes. This prevents us from having a load barrier (no instrumentation runs
when loading a pointer from the heap into a local variable). Only a store barrier is
necessary, and that barrier is very simple. This fixpoint converges super quickly because all newly
allocated objects during GC are pre-marked.
Dijkstra: storing a pointer field in an object that's in the heap or in a global variable while FUGC
is in its marking phase causes the newly pointed-to object to get marked. This is called a Dijkstra
barrier and it is a kind of store barrier. Due to the grey stack, there is no load barrier like
in the classic Dijkstra collector. The FUGC store
barrier uses a compare-and-swap with relaxed memory ordering on the slowest path (if the GC is running
and the object being stored was not already marked).
Accurate: the GC accurately (aka precisely, aka exactly) finds all pointers to objects, nothing more,
nothing less. llvm::FilPizlonator ensures that the runtime always knows where the root pointers are
on the stack and in globals. The Fil-C runtime has a clever API and Ruby code generator for tracking
pointers in low-level code that interacts with pizlonated code. All objects know where their outgoing
pointers are - they can only be in the InvisiCap auxiliary allocation.
Non-moving: the GC doesn't move objects. This makes concurrency easy to implement and avoids
a lot of synchronization between mutator and collector. However, FUGC will "move" pointers to free
objects (it will repoint the capability pointer to the free singleton so it doesn't have to mark the
freed allocation).


This makes FUGC an advancing wavefront garbage collector. Advancing wavefront means that the
mutator cannot create new work for the collector by modifying the heap. Once an
object is marked, it'll stay marked for that GC cycle. It's also an incremental update collector, since
some objects that would have been live at the start of GC might get freed if they become free during the
collection cycle.

FUGC relies on safepoints, which comprise:


Pollchecks emitted by the compiler. The llvm::FilPizlonator compiler pass emits pollchecks often enough that only a
bounded amount of progress is possible before a pollcheck happens. The fast path of a pollcheck is
just a load-and-branch. The slow path runs a pollcheck callback, which does work for FUGC.
Soft handshakes, which request that a pollcheck callback is run on all threads and then waits for
this to happen.
Enter/exit functionality. This is for allowing threads to block in syscalls or long-running
runtime functions without executing pollchecks. Threads that are in the exited state will have
pollcheck callbacks executed by the collector itself (when it does the soft handshake). The only
way for a Fil-C program to block is either by looping while entered (which means executing a
pollcheck at least once per loop iteration, often more) or by calling into the runtime and then
exiting.


Safepointing is essential for supporting threading (Fil-C supports pthreads just fine) while avoiding
a large class of race conditions. For example, safepointing means that it's safe to load a pointer from
the heap and then use it; the GC cannot possibly delete that memory until the next pollcheck or exit.
So, the compiler and runtime just have to ensure that the pointer becomes tracked for stack scanning at
some point between when it's loaded and when the next pollcheck/exit happens, and only if the pointer is
still live at that point.

The safepointing functionality also supports stop-the-world, which is currently used to implement
fork(2) and for debugging FUGC (if you set the FUGC_STW environment variable to 1 then the
collector will stop the world and this is useful for triaging GC bugs; if the bug reproduces in STW
then it means it's not due to issues with the store barrier). The safepoint infrastructure also allows
safe signal delivery; Fil-C makes it possible to use signal handling in a practical way. Safepointing is
a common feature of virtual machines that support multiple threads and accurate garbage collection,
though usually, they are only used to stop the world rather than to request asynchronous activity from all
threads. See here for a write-up about
how OpenJDK does it. The Fil-C implementation is in filc_runtime.c.

Here's the basic flow of the FUGC collector loop:


Wait for the GC trigger.
Turn on the store barrier, then soft handshake with a no-op callback.
Turn on black allocation (new objects get allocated marked), then soft handshake with a callback
that resets thread-local caches.
Mark global roots.
Soft handshake with a callback that requests stack scan and another reset of thread-local caches.
If all collector mark stacks are empty after this, go to step 7.
Tracing: for each object in the mark stack, mark its outgoing references (which may grow the mark
stack). Do this until the mark stack is empty. Then go to step 5.
Turn off the store barrier and prepare for sweeping, then soft handshake to reset thread-local
caches again.
Perform the sweep. During the sweep, objects are allocated black if they happen to be allocated out
of not-yet-swept pages, or white if they are allocated out of alraedy-swept pages.
Victory! Go back to step 1.


If you're familiar with the literature, FUGC is sort of like the DLG (Doligez-Leroy-Gonthier) collector
(published in two
papers because they
had a serious bug in the first one), except it uses the Dijkstra barrier and a grey stack, which
simplifies everything but isn't as academically pure (FUGC fixpoints, theirs doesn't). I first came
up with the grey-stack Dijkstra approach when working on
Fiji VM's CMR and
Schism garbage collectors. The main
advantage of FUGC over DLG is that it has a simpler (cheaper) store barrier and it's a slightly more
intuitive algorithm. While the fixpoint seems like a disadvantage, in practice it converges after a few
iterations.

Additionally, FUGC relies on a sweeping algorithm based on bitvector SIMD. This makes sweeping insanely
fast compared to marking. This is made thanks to the
Verse heap config
that I added to
libpas. FUGC
typically spends <5% of its time sweeping.

Bonus Features

FUGC supports a most of C-style, Java-style, and JavaScript-style memory management. Let's break down what that means.

Freeing Objects

If you call free, the runtime will flag the object as free and all subsequent accesses to the object will trap. Additionally, FUGC will not scan outgoing references from the object (since they cannot be accessed anymore).

Also, FUGC will redirect all capability pointers (lowers in InvisiCaps jargon) to free objects to point at the free singleton object instead. This allows freed object memory to really be reclaimed.

This means that freeing objects can be used to prevent GC-induced leaks. Surprisingly, a program that works fine with malloc/free (no leaks, no crashes) that gets converted to GC the naive way (malloc allocates from the GC and free is a no-op) may end up leaking due to dangling pointers that the program never accesses. Those dangling pointers will be treated as live by the GC. In FUGC, if you freed those pointers, then FUGC will really kill them.

Finalizers

FUGC supports finalizer queues using the zgc_finq API in stdfil.h. This feature allows you to implement finalizers in the style of Java, except that you get to set up your own finalizer queues and choose which thread processes them.

Weak References

FUGC supports weak references using the zweak API in stdfil.h. Weak references work just like the weak references in Java, except there are no reference queues. Fil-C does not support phantom or soft references.

Weak Maps

FUGC supports weak maps using the zweak_map API in stdfil.h. This API works almost exactly like the JavaScript WeakMap, except that Fil-C's weak maps allow you to iterate all of their elements and get a count of elements.

Conclusion

FUGC allows Fil-C to give the strongest possible guarantees on misuse of free:


Freeing an object and then accessing it is guaranteed to result in a trap. Unlike tag-based approaches, which will trap on use after free until until memory reclamation is forced, FUGC means you will trap even after memory is reclaimed (due to lower repointing to the free singleton).
Freeing an object twice is guaranteed to result in a trap.
Failing to free an object means the object gets reclaimed for you.

        
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Forking Chrome to render in a terminal (2023)]]></title>
            <link>https://fathy.fr/carbonyl</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45133935</guid>
            <description><![CDATA[January 27, 2023]]></description>
            <content:encoded><![CDATA[

















January 27, 2023


I wrote about forking Chrome to turn HTML to SVG two months ago, today we're going to do something similar by making it render into a terminal.
Let me introduce you to the Carbonyl web browser!
Drawing
There isn't much you can draw in a terminal, you're guaranteed to be able to render monospace characters in a fixed grid, and that's it. Escape sequences exist to perform actions like moving the cursor, changing the text color, or mouse tracking. Some came from the days of physical terminals like the DEC VT100, others came from the xterm project.Assuming a popular terminal emulator, we can:
Move the cursor
Write Unicode characters
Set a character's background and foreground color
Use a 6x6x6 RGB palette, or 24 bits RGB if COLORTERM is set the truecolor
One of the unicode characters we can render is the lower half block element U+2584: ▄. Knowing that cells generally have an aspect ratio of 1:2, we can render perfectly square pixels by setting the background color to the top pixel color, and the foregound color to the bottom pixel color.

Let's hook html2svg's output into a Rust program:
fn move_cursor((x, y): (usize, usize)) {
    println!("\x1b[{};{}H", y + 1, x + 1)
}

fn set_foreground((r, g, b): (u8, u8, u8)) {
    println!("\x1b[38;2;{};{};{}m", r, g, b)
}

fn set_background((r, g, b): (u8, u8, u8)) {
    println!("\x1b[48;2;{};{};{}m", r, g, b)
}

fn print_pixels_pair(
    top: (u8, u8, u8),
    bottom: (u8, u8, u8),
    cursor: (usize, usize)
) {
    move_cursor(cursor);
    set_background(top);
    set_foreground(bottom);
    println!("▄");
}


Not bad. To render text, we need to create a new Skia device using C++, lets call it TextCaptureDevice. We'll make it call a draw_text function written in Rust. Just like in html2svg, we need to convert glyph IDs into unicode characters.
class TextCaptureDevice: public SkClipStackDevice {
  void onDrawGlyphRunList(SkCanvas*,
                          const sktext::GlyphRunList& glyphRunList,
                          const SkPaint&,
                          const SkPaint& paint) override {
    // Get the text position
    auto position = localToDevice().mapRect(glyphRunList.origin());

    for (auto& glyphRun : glyphRunList) {
      auto runSize = glyphRun.runSize();
      SkAutoSTArray<64, SkUnichar> unichars(runSize);

      // Convert glyph IDs to Unicode characters
      SkFontPriv::GlyphsToUnichars(glyphRun.font(),
                                  glyphRun.glyphsIDs().data(),
                                  runSize,
                                  unichars.get());

      // Draw that text on the terminal
      draw_text(unichars.data(), runSize, position, paint.getColor());
    }
  }
}


Better! But the text is scrambled at the center. Our TextCaptureDevice does not account for occlusion, drawing a rectangle does not clear the text behind it.

Let's add some code to the drawRect and drawRRect methods to clear the text if we're filling with a solid color:
void drawRRect(const SkRRect& rect, const SkPaint& paint) override {
    drawRect(rect.rect(), paint);
}

void drawRect(const SkRect& rect, const SkPaint& paint) override {
    if (
        paint.getStyle() == SkPaint::Style::kFill_Style &&
        paint.getAlphaf() == 1.0
    ) {
        clear_text(localToDevice().mapRect(rect));
    }
}


The gray background behind text elements is caused by the software rasterizer rendering text in our bitmap. Let's remove it:
void SkBitmapDevice::onDrawGlyphRunList(SkCanvas* canvas,
                                        const sktext::GlyphRunList& glyphRunList,
                                        const SkPaint& initialPaint,
                                        const SkPaint& drawingPaint) {
-    SkASSERT(!glyphRunList.hasRSXForm());
-    LOOP_TILER( drawGlyphRunList(canvas, &fGlyphPainter, glyphRunList, drawingPaint), nullptr )
}


That was the easy part, let's handle inputs!
Input
fn report_mouse_move((x, y): (usize, usize)) {
    write!(get_stdin(), "\x1b[<35;{};{}M", y + 1, x + 1)
}
fn report_mouse_down((x, y): (usize, usize)) {
    write!(get_stdin(), "\x1b[<0;{};{}M", y + 1, x + 1)
}
fn report_mouse_up((x, y): (usize, usize)) {
    write!(get_stdin(), "\x1b[<0;{};{}m", y + 1, x + 1)
}
Some sequences exist to get a terminal emulator to track and report mouse events. For example, if you print \x1b[?1003h, the terminal should start sending events using this format:
These are similar to the sequences we use for styling our output. The \x1b[ prefix is called the Control Sequence Introducer.
carbonyl::browser->BrowserMainThread()->PostTask(
    FROM_HERE,
    base::BindOnce(
        &HeadlessBrowserImpl::OnMouseDownInput,
        x,
        y
    )
);
We need to notify the browser to wrap this up, but there is a catch: we
need to block a thread to read stdin, but the browser methods should be
called from the main thread. Thankfully, messages passing is available
almost everywhere through the
TaskRunner
class.
Google recommending me Chrome, lolfor &key in input {
    sequence = match sequence {
        Sequence::Char => match key {
            0x1b => Sequence::Escape,
            0x03 => emit!(Event::Exit),
            key => emit!(Event::KeyPress { key }),
        },
        Sequence::Escape => match key {
            b'[' => Sequence::Control,
            b'P' => Sequence::DeviceControl(DeviceControl::new()),
            0x1b =>
                emit!(Event::KeyPress { key: 0x1b }; continue),
            key => {
                emit!(Event::KeyPress { key: 0x1b });
                emit!(Event::KeyPress { key })
            }
        },
        Sequence::Control => match key {
            b'<' => Sequence::Mouse(Mouse::new()),
            b'A' => emit!(Event::KeyPress { key: 0x26 }),
            b'B' => emit!(Event::KeyPress { key: 0x28 }),
            b'C' => emit!(Event::KeyPress { key: 0x27 }),
            b'D' => emit!(Event::KeyPress { key: 0x25 }),
            _ => Sequence::Char,
        },
        Sequence::Mouse(ref mut mouse) => parse!(mouse, key),
        Sequence::DeviceControl(ref mut dcs) => parse!(dcs, key),
    }
}

Pipe
We have something that sorts of work, at the cost of a steady 400% CPU usage, and that's not counting iTerm2 which uses ~200%. We've got a few problems:

We need too much resources to render at 5 FPS
We render every time, even when nothing changes
We print all characters even if they didn't change on an individual level

Modern browsers employ a multi-process architecture to improve security. It separates websites into different processes, reducing the potential damage caused by vulnerabilities. The renderer process is running in an OS-level sandboxed environment that blocks certain system calls, such as file-system access. The GPU process, is also considered unprivileged and cannot reach renderer process in order to protect against vulnerabilities in GPU APIs such as WebGL. In contrast, the browser process, considered privileged, can communicate freely with any process.
Google ChromeBrowser ProcessGoogle Chrome Helper (Renderer)mouseMove(250, 250)mouseDown(250, 250)glBindBuffer()glDrawArray()👀Eyes🧠Brain🤌HandsRender ProcessmechanicalenergyelectromagneticenergyGitHubsuperintelligent ants risks - Google SearchGoogle Chrome Helper (Renderer)Render ProcessGoogle Chrome Helper (Renderer)Render Processdiy ant farm keyboard - YouTubeGoogle Chrome Helper (GPU)GPU Process
Renderer process(main)Browser processRenderer process(iframe)1. Get captureGPU processdoing this 60 times a second isn't very efficientCapturePaintPreview is great for html2svg, but it's not designed for real-time rendering. It's using IPC calls to correctly support out-of-process iframes, making roundtrips between the browser, GPU, and renderer processes. It downloads hardware accelerated images from the GPU, explaining the surprising memory bandwidth usage. We can disable the fetching, and even disable hardware acceleration, but we still have an expensive IPC machinery holding us back.Software rendering is still very common, it even used to be the default if you can believe it. It was fairly easy back in the single-process days, but nowadays shared memory regions are configured to efficiently render using multiple processes. If we can get our pixels into one of these memory regions, we would just have to notify our browser process using a simple IPC message.
void LayeredWindowUpdater::OnAllocatedSharedMemory(
    const gfx::Size& pixel_size,
    base::UnsafeSharedMemoryRegion region
) {
    if (region.IsValid())
        shm_mapping_ = region.Map();
}

void LayeredWindowUpdater::Draw(
    const gfx::Rect& damage_rect,
    DrawCallback draw_callback
) {
    carbonyl_draw_bitmap(
        shm_mapping_.GetMemoryAs<uint8_t>(),
        shm_mapping_.size()
    );

    std::move(draw_callback).Run();
}


We solved the bitmap problem, now how can we extract text data? This data lives in the renderer process, but our windowing code lives in the browser process. We need to make the renderer interact with the browser process.
Mojo
// Our C++ bindings will be in the carbonyl::mojom namespace
module carbonyl.mojom;

// Import existing bindings to common structures
import "ui/gfx/geometry/mojom/geometry.mojom";
import "skia/public/mojom/skcolor.mojom";

// Define a structure to hold text to render
struct TextData {
    // An UTF-8 string with the contents
    string contents;
    // Bounds, size only defined for clearing
    gfx.mojom.RectF bounds;
    // Color of the text
    skia.mojom.SkColor color;
};

// The browser process runs this service
interface CarbonylRenderService {
    // The renderer process calls this method
    DrawText(array<TextData> data);
};
Mojo is a library for inter-process communication. It defines an IDL for serializing data which supports native handles (i.e. file descriptors, shared memory regions, callbacks), and can be used to generate C++, Java (Android), and JavaScript (DevTools) bindings. It's extensively documented, and fairly simple to use.We'll start by making an interface CarbonylRenderService that runs on the browser process, with a method DrawText called from the renderer process.
This .mojom code generates C++ temporary files which we can then include to write the implementation code.
Mojo receivers such as our service are part of the native handles we can send between processes, to register the implementation we just need to add it to the BrowserInterfaceBroker, which will get called by the renderer through BrowserInterfaceBrokerProxy:
map->Add<carbonyl::mojom::CarbonylRenderService>(
    base::BindRepeating(&RenderFrameHostImpl::GetCarbonylRenderService,
                        base::Unretained(host)));

GetBrowserInterfaceBroker().GetInterface(
  std::move(carbonyl_render_service_receiver_)
);

Now, we need to get our text data without any expensive round-trip. Blink has a GetPaintRecord() method to get the latest paint data for a page, but it's not behind a public API, which we need because our code runs in the content renderer. Ideally we should hook into the compositor (cc), but it's way more involved. It's dirty but we can workaround this by casting to the private blink::WebViewImpl:
auto* view = static_cast<blink::WebViewImpl*>(GetWebFrame()->View());

view->MainFrameImpl()->GetFrame()->View()->GetPaintRecord().Playback(&canvas);
carbonyl_render_service_->DrawText(std::move(data));

Surprise after the first run: the text content doesn't follow the bitmap. Aaah, scrolling and animating is done on the compositor thread, which frees the main thread and makes everything smoother. Let's procastinate doing things right by adding --disable-threaded-scrolling --disable-threaded-animation to the command line arguments.
Threaded compositing enabledThreaded compositing disabled
Pretty smooth, it'll be even smoother when threaded compositing is fixed! And we've fixed our biggest problem: we don't use any CPU when idling, and scrolling consumes ~15%.
Layout
auto font = state.StyleBuilder().GetFontDescription();

font.SetStretch(ExtraExpandedWidthValue());
font.SetKerning(FontDescription::kNoneKerning);
font.SetComputedSize(11.75 / 7.0);
font.SetGenericFamily(FontDescription::kMonospaceFamily);
font.SetIsAbsoluteSize(true);
state.StyleBuilder().SetFontDescription(font);
state.StyleBuilder().SetLineHeight(Length::Fixed(14.0 / 7.0));
Thing is, we can only render one font-size, but Blink doesn't know that. This causes the layout to be messed up, with text chunks overlapping or overly spaced. This is especially visible on websites with a lot of textual content and links like Wikipedia.Another dirty - yet effective - hack we can use is forcing a monospaced font on every element. We can do that by adding some code to StyleResolver::ResolveStyle.


LoDPI
// static
float Display::GetForcedDeviceScaleFactor() {
    return 1.0 / 7.0;
}

// static
bool Display::HasForceDeviceScaleFactor() {
    return true;
}
One expensive step in our rendering pipeline is downscaling: we need to resize the framebuffer from its virtual space to its physical space. What we're doing is kind of the opposite of HiDPI rendering, whose most common ratio is 2, which means 1 pixel on the web equals 4 pixels on the screen. Our ratio is 1 / 7 which means 49 pixels on the web renders to 1 block on our terminal.The annoying thing about HiDPI is that it can make rendering ~4x slower, whereas Carbonyl LoDPI® makes rendering run ~49x faster. We just need to force our scaling into the Display class.
Color
I looked for examples of RGB color conversion to xterm-256 but the code I found was either wrong or slow because it did a nearest neighbor search. We're going to do it for every pixel so it should run fast.
The formula for the conversion is fairly simple, assuming color values between 0 and 1: 16 + r * 5 * 36 + g * 5 * 6 + b * 5.
pub fn to_xterm(&self) -> u8 {
    let r = (self.r as f32 - (95.0 - 40.0)).max(0.0) / 40.0;
    let g = (self.g as f32 - (95.0 - 40.0)).max(0.0) / 40.0;
    let b = (self.b as f32 - (95.0 - 40.0)).max(0.0) / 40.0;

    (16.0 +
        r.round() * 36.0 +
        g.round() * 6.0 +
        b.round()) as u8
}
The twist that most code online gets wrong is that the 6 color levels are not linear: 0, 95, 135, 175, 215, 255; there is a 95 gap between the first and second values, and 40 for the rest.It makes sense to limit the dark range, color differences are more visible with bright colors. For us, it means that we can convert a value between 0 and 255 using max(0, color - 95 - 40) / 40.


pub fn to_xterm(&self) -> u8 {
    if self.max_val() - self.min_val() < 8 {
        match self.r {
            0..=4 => 16,
            5..=8 => 232,
            238..=246 => 255,
            247..=255 => 231,
            r => 232 + (r - 8) / 10,
        }
    } else {
        let scale = 5.0 / 200.0;

        (16.0
            + self
                .cast::<f32>()
                .mul_add(scale, scale * -55.0)
                .max(0.0)
                .round()
                .dot((36.0, 6.0, 1.0))) as u8
    }
}
The conversion itself can be thought of as a dot product of (r, g, b) and (36, 6, 1). We can move the substraction to an mul_add call to help the compiler use a fused multiply-add instruction.The last step is grayscale: our xterm profile offers 256 colors, there are the 216 colors from the RGB cube (6 * 6 * 6), the 16 configurable system colors, and 24 gray levels which go from rgb(8,8,8) to rgb(238,238,238).To find out if a color is on a grayscale, we can substract its minimal value to its maximum value and check if it's under a threshold, let's say 8.

We still have one tiny problem: how can you detect if a terminal supports true-color
or 256 colors? A quick Google search leads us to the COLORTERM environment variable,
which is 24bit or truecolor if true-color is supported. But that won't work in
Docker or SSH, which are our primary targets.
self.sequence = match self.sequence {
    // ^[P1$r0;48:2:1:13:37:42m^[\    Code => match key {
        b'0' | b'1' => Type(key),
        _ => control_flow!(break)?,
    },
    // ^[P1$r0;48:2:1:13:37:42m^[\    Type(code) => match key {
        b'$' => Status(StatusParser::new(code)),
        b'+' => Resource(ResourceParser::new(code)),
        _ => control_flow!(break)?,
    },
    // ^[P1$r0;48:2:1:13:37:42m^[\    Status(ref mut status) => return status.parse(key),
    Resource(ref mut resource) => return resource.parse(key),
};
self.sequence = match self.sequence {
    // ^[P1$r0;48:2:1:13:37:42m^[\    Start => match key {
        b'r' => Value,
        _ => control_flow!(break)?,
    },
    // ^[P1$r0;48:2:1:13:37:42m^[\    Value => match key {
        // ^[P1$r0;48:2:1:13:37:42m^[\        0x1b => self.terminate(),
        // ^[P1$r0;48:2:1:13:37:42m^[\        b';' => self.push_value(),
        // ^[P1$r0;48:2:1:13:37:42m^[\        char => self.push_char(char),
    },
    // ^[P1$r0;48:2:1:13:37:42m^[\    Terminator => control_flow!(break self.parse_event(key))?,
};
A trick we can use is a DCS (Device Control Sequence) to fetch a setting value, like the current background color. If we set an RGB value and get an RGB value back, we can enable true-color.You can try it by running the following on your terminal:$ printf "\e[48;2;13;37;42m\eP\$qm\e\\"; cat

\e: start escape sequence

[: introduce control sequence
48: set foreground
2: using an RGB color
13: R is 13
37: G is 37
42: B is 42
m: select graphic rendition


\e: start escape sequence

P: introduce device control sequence
$: enter status mode
q: query current setting
m: select graphic rendition


If the commands are supported, you should get the following output with a dark turquoise background: ^[P1$r0;48:2:1:13:37:42m^[\ This is what the terminal emulator sends to stdin, and what we can parse to toggle true-color on.
Title
niceA few xterm sequences allow setting the terminal window title, we could use that to display the current page title.fn set_title(title: &str) {
    // Set icon name and window title to string
    println!("\x1b]0;{}\x07", title);
    // Set icon name to string
    println!("\x1b]1;{}\x07", title);
    // Set window title to string
    println!("\x1b]2;{}\x07", title);
}
To get notified when the title changes, we can simply implement WebContentsObserver::TitleWasSet():void HeadlessWebContentsImpl::TitleWasSet(content::NavigationEntry* entry) {
    carbonyl::Renderer::Main()->SetTitle(
        base::UTF16ToUTF8(entry->GetTitleForDisplay())
    );
}

Final thoughts
That's all for today folks, check out Carbonyl on GitHub!
This was my first Rust project and I finally get the hype now. What a cool language!
Stay tuned
The post for next month will be a visual introduction to Fourier Analysis. After that, we'll look into a speculative JS VM in Rust.
Use the RSS feed to stay tuned, you can also watch the website repo for releases on GitHub.
Discuss
Discuss on HN - Discuss on r/programming]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Evolving the OCaml Programming Language (2025) [pdf]]]></title>
            <link>https://kcsrk.info/slides/Evolution_Ashoka_2025.pdf</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45133652</guid>
        </item>
        <item>
            <title><![CDATA[What Is the Fourier Transform?]]></title>
            <link>https://www.quantamagazine.org/what-is-the-fourier-transform-20250903/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45132810</guid>
            <description><![CDATA[Amid the chaos of revolutionary France, one man’s mathematical obsession gave way to a calculation that now underpins much of mathematics and physics. The calculation, called the Fourier transform, decomposes any function into its parts.]]></description>
            <content:encoded><![CDATA[
    As we listen to a piece of music, our ears perform a calculation. The high-pitched flutter of the flute, the middle tones of the violin, and the low hum of the double bass fill the air with pressure waves of many different frequencies. When the combined sound wave descends through the ear canal and into the spiral-shaped cochlea, hairs of different lengths resonate to the different pitches, separating the messy signal into buckets of elemental sounds.
It took mathematicians until the 19th century to master this same calculation.
In the early 1800s, the French mathematician Jean-Baptiste Joseph Fourier discovered a way to take any function and decompose it into a set of fundamental waves, or frequencies. Add these constituent frequencies back together, and you’ll get your original function. The technique, today called the Fourier transform, allowed the mathematician — previously an ardent proponent of the French revolution — to spur a mathematical revolution as well.
Out of the Fourier transform grew an entire field of mathematics, called harmonic analysis, which studies the components of functions. Soon enough, mathematicians began to discover deep connections between harmonic analysis and other areas of math and physics, from number theory to differential equations to quantum mechanics. You can also find the Fourier transform at work in your computer, allowing you to compress files, enhance audio signals and more.
“It’s hard to overestimate the influence of Fourier analysis in math,” said Leslie Greengard of New York University and the Flatiron Institute. “It touches almost every field of math and physics and chemistry and everything else.”
Flames of Passion 
Fourier was born in 1768 amid the chaos of prerevolutionary France. Orphaned at 10 years old, he was educated at a convent in his hometown of Auxerre. He spent the next decade conflicted about whether to dedicate his life to religion or to math, eventually abandoning his religious training and becoming a teacher. He also promoted revolutionary efforts in France until, during the Reign of Terror in 1794, the 26-year-old was arrested and imprisoned for expressing beliefs that were considered anti-revolutionary. He was slated for the guillotine.

Before he could be executed, the Terror came to an end. And so, in 1795, he returned to teaching mathematics. A few years later, he was appointed as a scientific adviser to Napoleon Bonaparte and joined his army during the invasion of Egypt. It was there that Fourier, while also pursuing research into Egyptian antiquities, began the work that would lead him to develop his transform: He wanted to understand the mathematics of heat conduction. By the time he returned to France in 1801 — shortly before the French army was driven out of Egypt, the stolen Rosetta stone surrendered to the British — Fourier could think of nothing else.
If you heat one side of a metal rod, the heat will spread until the whole rod has the same temperature. Fourier argued that the distribution of heat through the rod could be written as a sum of simple waves. As the metal cools, these waves lose energy, causing them to smooth out and eventually disappear. The waves that oscillate more quickly — meaning they have more energy — decay first, followed eventually by the lower frequencies. It’s like a symphony that ends with each instrument fading to silence, from piccolos to tubas.
The proposal was radical. When Fourier presented it at a meeting of the Paris Institute in 1807, the renowned mathematician Joseph-Louis Lagrange reportedly declared the work “nothing short of impossible.”
What troubled his peers most were strange cases where the heat distribution might be sharply irregular — like a rod that is exactly half cold and half hot. Fourier maintained that the sudden jump in temperature could still be described mathematically: It would just require adding infinitely many simpler curves instead of a finite number. But most mathematicians at the time believed that no number of smooth curves could ever add up to a sharp corner.
Today, we know that Fourier was broadly right.
“You can represent anything as a sum of these very, very simple oscillations,” said Charles Fefferman, a mathematician at Princeton University. “It’s known that if you have a whole lot of tuning forks, and you set them perfectly, they can produce Beethoven’s Ninth Symphony.” The process only fails for the most bizarre functions, like those that oscillate wildly no matter how much you zoom in on them.
So how does the Fourier transform work?
A Well-Trained Ear
Performing a Fourier transform is akin to sniffing a perfume and distinguishing its list of ingredients, or hearing a complex jazzy chord and distinguishing its constituent notes.
Mathematically, the Fourier transform is a function. It takes a given function — which can look complicated — as its input. It then produces as its output a set of frequencies. If you write down the simple sine and cosine waves that have these frequencies, and then add them together, you’ll get the original function.

        
            
            Samuel Velasco/Quanta Magazine
        
    

To achieve this, the Fourier transform essentially scans all possible frequencies and determines how much each contributes to the original function. Let’s look at a simple example.
Consider the following function:

        
    

The Fourier transform checks how much each frequency contributes to this original function. It does so by multiplying waves together. Here’s what happens if we multiply the original by a sine wave with a frequency of 3:

        
    

There are lots of large peaks, which means the frequency 3 contributes to the original function. The average height of the peaks reveals how large the contribution is.
Now let’s test if the frequency 5 is present. Here’s what you get when you multiply the original function by a sine wave with the frequency 5:

        
    

There are some large peaks but also large valleys. The new graph averages out to around zero. This indicates that the frequency 5 does not contribute to the original function.
The Fourier transform does this for all possible frequencies, multiplying the original function by both sine and cosine waves. (In practice, it runs this comparison on the complex plane, using a combination of real and imaginary numbers.)
In this way, the Fourier transform can decompose a complicated-looking function into just a few numbers. This has made it a crucial tool for mathematicians: If they are stumped by a problem, they can try transforming it. Often, the problem becomes much simpler when translated into the language of frequencies.
If the original function has a sharp edge, like the square wave below (which is often found in digital signals), the Fourier transform will produce an infinite set of frequencies that, when added together, approximate the edge as closely as possible. This infinite set is called the Fourier series, and — despite mathematicians’ early hesitation to accept such a thing — it is now an essential tool in the analysis of functions.

        
    

Encore
The Fourier transform also works on higher-dimensional objects such as images. You can think of a grayscale image as a two-dimensional function that tells you how bright each pixel is. The Fourier transform decomposes this function into a set of 2D frequencies. The sine and cosine waves defined by these frequencies form striped patterns oriented in different directions. These patterns — and simple combinations of them that resemble checkerboards — can be added together to re-create any image.
Any 8-by-8 image, for example, can be built from some combination of the 64 building blocks below. A compression algorithm can then remove high-frequency information, which corresponds to small details, without drastically changing how the image looks to the human eye. This is how JPEGs compress complex images into much smaller amounts of data.

        
    

In the 1960s, the mathematicians James Cooley and John Tukey came up with an algorithm that could perform a Fourier transform much more quickly — aptly called the fast Fourier transform. Since then, the Fourier transform has been implemented practically every time there is a signal to process. “It’s now a part of everyday life,” Greengard said.
It has been used to study the tides, to detect gravitational waves, and to develop radar and magnetic resonance imaging. It allows us to reduce noise in busy audio files, and to compress and store all sorts of data. In quantum mechanics — the physics of the very small — it even provides the mathematical foundation for the uncertainty principle, which says that it’s impossible to know the precise position and momentum of a particle at the same time. You can write down a function that describes a particle’s possible positions; the Fourier transform of that function will describe the particle’s possible momenta. When your function can tell you where a particle will be located with high probability — represented by a sharp peak in the graph of the function — the Fourier transform will be very spread out. It will be impossible to determine what the particle’s momentum should be. The opposite is also true.
        
        
The Fourier transform has spread its roots throughout pure mathematics research, too. Harmonic analysis — which studies the Fourier transform, as well as how to reverse it to rebuild the original function — is a powerful framework for studying waves. Mathematicians have also found that harmonic analysis has deep and unexpected connections to number theory. They’ve used these connections to explore relationships among the integers, including the distribution of prime numbers, one of the greatest mysteries in mathematics.
“If people didn’t know about the Fourier transform, I don’t know what percent of math would then disappear,” Fefferman said. “But it would be a big percent.”
Editor’s note: The Flatiron Institute is funded by the Simons Foundation, which also funds this editorially independent magazine. Simons Foundation funding decisions have no influence on our coverage. More information about the relationship between Quanta Magazine and the Simons Foundation is available here. 
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[io_uring is faster than mmap]]></title>
            <link>https://www.bitflux.ai/blog/memory-is-slow-part2/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45132710</guid>
            <description><![CDATA[Sourcing data directly from disk IS faster than caching in memory.  I brought receipts.
Because hardware got wider but not faster, the old methods don't get you there.  You need new tools to use what is scaling and avoid what isn't.]]></description>
            <content:encoded><![CDATA[
                TL;DR
Sourcing data directly from disk IS faster than caching in memory.  I brought receipts.
Because hardware got wider but not faster, the old methods don't get you there.  You need new tools to use what is scaling and avoid what isn't.
Introduction
In part 1 I showed how some computer performance factors are scaling exponentially while others have been stagnant for decades.  I then asserted, without proof, that sourcing data from disk can be faster than from memory.  What follows is the proof.
Computer Science dogma says that unused memory should be used to cache things from the filesystem because the disk is slow and memory is fast.  Given that disk bandwidth is growing exponentially and memory access latency has stagnated this isn't always true anymore.
Experimental set up
We need data and something straight forward to do with the data.  I used my free will or the illusion thereof to create a benchmark I cleverly call "counting 10s".  I write some pseudo random integers between 0 and 20 to a buffer and then count how many of the integers are 10.  I want to make sure we are doing all the counting in a single thread to simulate an Amdahl's Law situation.
So how fast can we expect this to run?  The upper limit would be the memory bandwidth.
My testing rig is a server with an old AMD EPYC 7551P 32-Core Processor on a Supermicro H11SSL-i and 96GB of DDR4 2133 MHz and a couple of 1.92TB Samsung PM983a PCIe 3.0 SSDs I pieced together from EBay parts.  Given the way this server is configured, the upper limit for memory bandwidth can be calculated as 3 channels * 2133MT/s * 8B/T / 4 numa domains = ~13GB/s for a single thread.  It's kind of an odd system but that just makes it more fun to optimize for!
The disks are rated at 3.1GB/s read BW each for an upper limit of 6.2GB/s.  I made a raid0 volume with 4KB stripe size, formatted the the raid as ext4 with no journaling, and made sure it fully finished initializing the metadata before running the tests.
sudo mdadm --create /dev/md0 --level=0 --raid-devices=2 --chunk=4K /dev/nvme1n1 /dev/nvme2n1
sudo mkfs.ext4 -F -L data -O ^has_journal -E lazy_itable_init=0 /dev/md0
sudo mount -o noatime /dev/md0 mnt

We'll use a 50GB dataset for most benchmarking here, because when I started this I thought the test system only had 64GB and it stuck.
Simple Loop
The simple and cleanest way to do this in C would look like this.
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/mman.h>

// count_10_loop
int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY);
    int* data = (int*)mmap(NULL, size_bytes, PROT_READ, MAP_SHARED, fd, 0);
 
    for (size_t i = 0; i < total_ints; ++i) {
        if (data[i] == 10) count++;
    }

    printf("Found %ld 10s\n", count);
}

Just mmap() the file which will give us a buffer that we can read from.  Then we just loop and count the 10s.
Because the point is to benchmark we will integrate some timing mechanisms before we move on.
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/time.h>

long get_time_us() {
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return tv.tv_sec * 1000000L + tv.tv_usec;
}

// count_10_loop
int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY);
    int* data = (int*)mmap(NULL, size_bytes, PROT_READ, MAP_SHARED, fd, 0);
 
    long start = get_time_us();
    for (size_t i = 0; i < total_ints; ++i) {
        if (data[i] == 10) count++;
    }
    long elapsed = get_time_us() - start;

    printf("simple loop found %ld 10s processed at %0.2f GB/s\n", count, (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));
}

For the first run we're going to be reading from the disk. The disk/filesystem read is going to limit the performance before the memory bandwidth can.
❯ sudo  ./count_10_loop ./mnt/datafile.bin 53687091200
simple loop found 167802249 10s processed at 0.61 GB/s

As expected, it's not anywhere near memory speeds because as everyone knows, disk is slow.  We can look at the system and confirm that the first run cached the data to memory.

Our expectation is that the second run will be faster because the data is already in memory and as everyone knows, memory is fast.
❯ sudo  ./count_10_loop ./mnt/datafile.bin 53687091200
simple loop found 167802249 10s processed at 3.71 GB/s


It is faster, but clearly that’s slower than the memory can feed it to the processor.  What bottleneck might we be hitting?  This speed does look possibly correlated to the instructions per second limit for this generation of CPU (between 2GHz * 1.5 IPC = 3G and 3GHz boost * 1.5 IPC = 4.5G instructions per second).
We can use perf to see if the CPU is using vector instructions, if not then the actual compute is the bottleneck.
Percent│      test     %rbp,%rbp
       │    ↓ je       84
       │      lea      (%rbx,%rbp,4),%rcx
       │      mov      %rbx,%rax
       │      xor      %ebp,%ebp
       │      nop
       │70:   xor      %edx,%edx
  1.31 │      cmpl     $0xa,(%rax)
 42.38 │      sete     %dl
 45.72 │      add      $0x4,%rax
  0.01 │      add      %rdx,%rbp
 10.42 │      cmp      %rax,%rcx
  0.16 │    ↑ jne      70
       │84:   xor      %eax,%eax
       │      shr      $0x14,%r12
       │    → call     get_time_us
       │      pxor     %xmm0,%xmm0
       │      pxor     %xmm1,%xmm1

Confirmed. We're running non-vectorized instructions, with a single thread counting that's as fast as it can go with a 2GHz CPU.  Well crap.  We’ve hit our first non-exponential limit.  Even a brand new CPU running this machine code would probably struggle to do much better than a 50% improvement, still well below the memory bandwidth limit.
Unrolling the loop
Good news is this code can definitely be vectorized if we help the compiler.  Unroll the loop!
We're gonna make it very obvious to the compiler that it's safe to use vector instructions which could process our integers up to 8x faster.
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <stdint.h>
#include <sys/time.h>

long get_time_us() {
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return tv.tv_sec * 1000000L + tv.tv_usec;
}

// count_10_unrolled
int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY);
    void* buffer = mmap(NULL, size_bytes, PROT_READ, MAP_SHARED, fd, 0);
 
    // Get the compiler to align the buffer
    const int * __restrict data = (const int * __restrict)__builtin_assume_aligned(buffer, 4096);
    uint64_t c0=0, c1=0, c2=0, c3=0,
            c4=0, c5=0, c6=0, c7=0,
            c8=0, c9=0, c10=0, c11=0,
            c12=0, c13=0, c14=0, c15=0;

    long start = get_time_us();
    // Unrolling the compiler knows it can use a vector unit like AVX2 to process
    for (size_t i = 0; i < total_ints; i += 16) {
        // removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1
        c0  += (unsigned)(data[i+ 0] == 10);
        c1  += (unsigned)(data[i+ 1] == 10);
        c2  += (unsigned)(data[i+ 2] == 10);
        c3  += (unsigned)(data[i+ 3] == 10);
        c4  += (unsigned)(data[i+ 4] == 10);
        c5  += (unsigned)(data[i+ 5] == 10);
        c6  += (unsigned)(data[i+ 6] == 10);
        c7  += (unsigned)(data[i+ 7] == 10);
        c8  += (unsigned)(data[i+ 8] == 10);
        c9  += (unsigned)(data[i+ 9] == 10);
        c10 += (unsigned)(data[i+10] == 10);
        c11 += (unsigned)(data[i+11] == 10);
        c12 += (unsigned)(data[i+12] == 10);
        c13 += (unsigned)(data[i+13] == 10);
        c14 += (unsigned)(data[i+14] == 10);
        c15 += (unsigned)(data[i+15] == 10);
    }

    // pairwise reduce to help some compilers schedule better
    uint64_t s0 = c0 + c1,   s1 = c2 + c3,   s2 = c4 + c5,   s3 = c6 + c7;
    uint64_t s4 = c8 + c9,   s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15;
    uint64_t t0 = s0 + s1,   t1 = s2 + s3,   t2 = s4 + s5,   t3 = s6 + s7;

    count = (t0 + t1) + (t2 + t3);
    long elapsed = get_time_us() - start;

    printf("unrolled loop found %ld 10s processed at %0.2f GB/s\n", count, (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));
}

Check if we now have vectorized instructions with perf.
Percent│       movq      %xmm0,%rcx
       │       movdqa    %xmm7,%xmm14
       │       pxor      %xmm0,%xmm0
       │       nop
       │ e8:   movdqa    %xmm6,%xmm4
  0.30 │       movdqa    %xmm6,%xmm3
  0.12 │       movdqa    %xmm6,%xmm2
  0.35 │       add       $0x1,%rdx
  1.54 │       pcmpeqd   (%rax),%xmm4
 54.64 │       pcmpeqd   0x10(%rax),%xmm3
  1.62 │       movdqa    %xmm6,%xmm1
  0.99 │       add       $0x40,%rax
  0.12 │       pcmpeqd   -0x20(%rax),%xmm2
  3.03 │       pcmpeqd   -0x10(%rax),%xmm1
  1.32 │       pand      %xmm5,%xmm4
  1.25 │       pand      %xmm5,%xmm3
  1.55 │       movdqa    %xmm4,%xmm15
  0.24 │       punpckhdq %xmm0,%xmm4


Confirmed. We're using 128bit vector instructions, this should be up to 4x faster than the original.

NOTE: These are 128-bit vector instructions, but I expected 256-bit.  I dug deeper here and found claims that Gen1 EPYC had unoptimized 256-bit instructions.  I forced the compiler to use 256-bit instructions and found it was actually slower.  Looks like the compiler was smart enough to know that here.

Let's benchmark this unrolled version with the data as page cache in memory.
❯ sudo  ./count_10_unrolled ./mnt/datafile.bin 53687091200
unrolled loop found 167802249 10s processed at 5.51 GB/s


We're still nowhere close to hitting the memory bus speed limit of 13GB/s but 50% faster than the original is a win.  There must be some other bottleneck.
Can the SSDs beat that?
5.51GB/s?  On paper the SSDs can read at 6.2GB/s, but the first run from disk only did 0.61GB/s.  How can I meet or beat this performance sourcing the data directly from disk?
Consider how the default mmap() mechanism works, it is a background IO pipeline to transparently fetch the data from disk.  When you read the empty buffer from userspace it triggers a fault, the kernel handles the fault by reading the data from the filesystem, which then queues up IO from disk.  Unfortunately these legacy mechanisms just aren't set up for serious high performance IO.  Note that at 610MB/s it's faster than what a disk SATA can do.  On the other hand, it only managed 10% of our disk's potential.  Clearly we're going to have to do something else.
SSDs don't just automatically read data at multigigabyte speeds.  You need to put some real effort into an IO pipeline to get serious performance.
I made a io_uring based IO engine, a kind of userspace driver, that can hit these speeds.  The main thread will request data, the IO engine will handle the IO, then the main thread will do the counting when the data is in a buffer.  We will use a set of queues to manage the IO requests, responses, and buffers.  The IO engine will start 6 workers, target a queue depth of 8192, and have a buffer size of 16KB.
I wish I had tighter code here, but A) I didn’t have time to clean it up B) some of the complexity is intractable.  The IO engine code was a lot to scroll through so I moved it to github link
#include "io_engine.h"
#include <sys/mman.h>
#include <getopt.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <stdint.h>
#include <sys/time.h>

#define DEFAULT_WORKERS 6
#define DEFAULT_BLOCK_SIZE 16384
#define DEFAULT_QUEUE_DEPTH 8192

// Count the number of "10" (int format) in the buffer
static inline size_t count_tens_unrolled(void* data, size_t size_bytes) {
    const size_t total = size_bytes / sizeof(int);
    // Get the compiler to align the buffer
    const int * __restrict p = (const int * __restrict)__builtin_assume_aligned(data, 4096);
    uint64_t c0=0, c1=0, c2=0, c3=0,
            c4=0, c5=0, c6=0, c7=0,
            c8=0, c9=0, c10=0, c11=0,
            c12=0, c13=0, c14=0, c15=0;

    // Unrolling the compiler knows it can use a vector unit like AVX2 to process
    for (size_t i = 0; i < total; i += 16) {
        // removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1
        c0  += (unsigned)(p[i+ 0] == 10);
        c1  += (unsigned)(p[i+ 1] == 10);
        c2  += (unsigned)(p[i+ 2] == 10);
        c3  += (unsigned)(p[i+ 3] == 10);
        c4  += (unsigned)(p[i+ 4] == 10);
        c5  += (unsigned)(p[i+ 5] == 10);
        c6  += (unsigned)(p[i+ 6] == 10);
        c7  += (unsigned)(p[i+ 7] == 10);
        c8  += (unsigned)(p[i+ 8] == 10);
        c9  += (unsigned)(p[i+ 9] == 10);
        c10 += (unsigned)(p[i+10] == 10);
        c11 += (unsigned)(p[i+11] == 10);
        c12 += (unsigned)(p[i+12] == 10);
        c13 += (unsigned)(p[i+13] == 10);
        c14 += (unsigned)(p[i+14] == 10);
        c15 += (unsigned)(p[i+15] == 10);
    }

    // pairwise reduce to help some compilers schedule better
    uint64_t s0 = c0 + c1,   s1 = c2 + c3,   s2 = c4 + c5,   s3 = c6 + c7;
    uint64_t s4 = c8 + c9,   s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15;
    uint64_t t0 = s0 + s1,   t1 = s2 + s3,   t2 = s4 + s5,   t3 = s6 + s7;

    return (t0 + t1) + (t2 + t3);
}

int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);

    // Set up the io engine
    ioengine_t* na = ioengine_alloc(filename, size_bytes, DEFAULT_QUEUE_DEPTH, DEFAULT_BLOCK_SIZE, DEFAULT_WORKERS);

    sleep(1);

    // Use the background workers to read file directly
    size_t total_blocks = na->file_size / na->block_size;
    uint64_t uid = 1;
    size_t count = 0;

    long start = get_time_us();

    // Read all blocks
    size_t blocks_queued = 0;
    size_t blocks_read = 0;
    int buffer_queued = 0;
    while (blocks_read < total_blocks) {
        //// Queue IO phase //////
        //     Do we have more blocks to queue up?
        if (buffer_queued < na->num_io_buffers/2 && blocks_queued <= total_blocks) {
            // Calculate how many blocks on average we want our workers to queue up
            size_t free_buffers = (size_t)(na->num_io_buffers - buffer_queued - 4); // hold back a few buffers
            size_t blocks_remaining = total_blocks - blocks_queued;  // how many blocks have we not queued
            size_t blocks_to_queue = free_buffers > blocks_remaining ? blocks_remaining : free_buffers;
            int blocks_to_queue_per_worker = (int) (blocks_to_queue + na->num_workers - 1) / na->num_workers;
            // Iterate through workers and assign work
            for (int i = 0; i < na->num_workers; i++) {
                worker_thread_data_t* worker = &na->workers[i];
                // Try to queue N blocks to this worker
                for (int j = 0; j < blocks_to_queue_per_worker; j++) {
                    if (blocks_queued == total_blocks) break;
                    int bgio_tail = worker->bgio_tail;
                    int bgio_head = worker->bgio_head;
                    int bgio_next = (bgio_tail + 1) % worker->num_max_bgio;
                    int next_bhead = (worker->buffer_head + 1) % worker->num_max_bgio;
                    if (bgio_next == bgio_head) break;  // queue for send requests is full
                    if (next_bhead == worker->buffer_tail) break; // queue for recieving completed IO is full
                    // Queue this block with the worker.  We have to track which buffer it's going to.
                    int buffer_idx = worker->buffer_start_idx + worker->buffer_head;
                    na->buffer_state[buffer_idx] = BUFFER_PREFETCHING;
                    worker->bgio_uids[bgio_tail] = (uid++)<<16; // unique id helps track IOs in io_uring, we encode 4 bytes later
                    worker->bgio_buffer_idx[bgio_tail] = buffer_idx;
                    worker->bgio_block_idx[bgio_tail] = blocks_queued++;  // block sized index into file
                    worker->bgio_queued[bgio_tail] = -1;  // Requested but not yet queued
                    int next_tail = (bgio_tail + 1) % worker->num_max_bgio;
                    worker->bgio_tail = next_tail;
                    // Log the buffer in an ordered queue for us to read
                    worker->complete_ring[worker->buffer_head] = buffer_idx;
                    worker->buffer_head = next_bhead;
                    buffer_queued++;
                }
                // Tell the worker to submit IOs as a group
                worker->bgio_submit++;
            }
        }

        //// Completion Phase //////
        //     Iterate through worker and check if they have complete IOs
        for (int i = 0; i < na->num_workers; i++) {
            worker_thread_data_t* worker = &na->workers[i];
            int current = worker->buffer_tail;
            // We know what IO's we're waiting on, but we have to poll
            //  to see if they are done.
            for (int scan = 0; scan < worker->num_max_bgio; scan++) {
                // Scan until we get to the end of the list
                if (current == worker->buffer_head) break;
                int buffer_idx = worker->complete_ring[current];
                int state = na->buffer_state[buffer_idx];
                if (state == BUFFER_PREFETCHED) {
                    // This buffer is completed - Process this buffer.
                    count += count_tens_unrolled(na->io_buffers[buffer_idx], na->block_size);
                    na->buffer_state[buffer_idx] = BUFFER_UNUSED;
                    blocks_read++;
                    buffer_queued--;
                }
                current = (current + 1) % worker->num_max_bgio;
            }
            // IO's might have been completed out of order, advance the tail when we can
            current = worker->buffer_tail;
            while (current != worker->buffer_head) {
                int buffer_idx = worker->complete_ring[current];
                int state = na->buffer_state[buffer_idx];
                if (state != BUFFER_UNUSED) break;
                current = (current + 1) % worker->num_max_bgio;
            }
            worker->buffer_tail = current;
            worker->bgio_submit++;  // probably unnecessary
        }
    }
    long elapsed = get_time_us() - start;
    printf("diskbased found %ld 10s processed at %0.2f GB/s\n", count, (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));

    // Cleanup I/O system
    ioengine_free(na);

    return 0;
}

I hope all this extra code makes it faster.
❯ sudo ./diskbased/benchmark ./mnt/datafile.bin 53687091200
diskbased found 167802249 10s processed at 5.81 GB/s


Boom!  Disk is faster than memory!  It takes several hundred lines of code but now we can source the data from my SSDs faster than the copy from the page cache in memory.
So what's going on here?
Of course my 6GB/s disk stripe isn’t actually faster than the memory bus, even on this weird hack of a system.  So what is happening?  Where is the bottleneck?  It's got to be the way the data is being read from the page cache in memory.
What if we replace the mmap() with a read() from disk into a preallocated buffer.  That way we can measure the counting with the data in-memory without any page cache related overhead mmap() can introduce.
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdint.h>
#include <string.h>

long get_time_us() {
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return tv.tv_sec * 1000000L + tv.tv_usec;
}

int main(int argc, char *argv[]) {
    char* filename = argv[1];
    size_t size_bytes = strtoull(argv[2], NULL, 10);
    size_t total_ints = size_bytes / sizeof(int);
    size_t count = 0;

    int fd = open(filename, O_RDONLY|O_DIRECT);
    void *buf;
    posix_memalign(&buf, 4096, size_bytes);
    int *data = buf;

    size_t off = 0;
    while (off < size_bytes) {
        ssize_t n = read(fd, (char*)data + off, size_bytes - off);
        off += (size_t)n;   // YOLO: assume n > 0 until done
    }

    long start = get_time_us();
    for (size_t i = 0; i < total_ints; ++i) {
        if (data[i] == 10) count++;
    }
    long elapsed = get_time_us() - start;

    printf("simple loop %ld 10s processed at %0.2f GB/s\n",
           count,
           (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));


    // Get the compiler to align the buffer
    const int * __restrict p = (const int * __restrict)__builtin_assume_aligned((void*)data, 4096);
    uint64_t c0=0, c1=0, c2=0, c3=0,
            c4=0, c5=0, c6=0, c7=0,
            c8=0, c9=0, c10=0, c11=0,
            c12=0, c13=0, c14=0, c15=0;

    start = get_time_us();
    // Unrolling the compiler knows it can use a vector unit like AVX2 to process
    for (size_t i = 0; i < total_ints; i += 16) {
        // removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1
        c0  += (unsigned)(p[i+ 0] == 10);
        c1  += (unsigned)(p[i+ 1] == 10);
        c2  += (unsigned)(p[i+ 2] == 10);
        c3  += (unsigned)(p[i+ 3] == 10);
        c4  += (unsigned)(p[i+ 4] == 10);
        c5  += (unsigned)(p[i+ 5] == 10);
        c6  += (unsigned)(p[i+ 6] == 10);
        c7  += (unsigned)(p[i+ 7] == 10);
        c8  += (unsigned)(p[i+ 8] == 10);
        c9  += (unsigned)(p[i+ 9] == 10);
        c10 += (unsigned)(p[i+10] == 10);
        c11 += (unsigned)(p[i+11] == 10);
        c12 += (unsigned)(p[i+12] == 10);
        c13 += (unsigned)(p[i+13] == 10);
        c14 += (unsigned)(p[i+14] == 10);
        c15 += (unsigned)(p[i+15] == 10);
    }

    // pairwise reduce to help some compilers schedule better
    uint64_t s0 = c0 + c1,   s1 = c2 + c3,   s2 = c4 + c5,   s3 = c6 + c7;
    uint64_t s4 = c8 + c9,   s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15;
    uint64_t t0 = s0 + s1,   t1 = s2 + s3,   t2 = s4 + s5,   t3 = s6 + s7;

    count = (t0 + t1) + (t2 + t3);
    elapsed = get_time_us() - start;

    printf("unrolled loop %ld 10s processed at %0.2f GB/s\n",
           count,
           (double)(size_bytes/1073741824)/((double)elapsed/1.0e6));
}

If we keep the dataset smaller than a numa domain and we bind this to a single numa node to prevent numa overheads we see that the theoretical memory bandwidth we projected seems to be the primary bottleneck for the unrolled loop as we hoped to see at the outset.
❯  sudo numactl --cpunodebind=0   ./in_ram mnt/datafile.bin 2147483648
simple loop 6709835 10s processed at 4.76 GB/s
unrolled loop 6709835 10s processed at 13.04 GB/s

But this isn't useful to compare the with the other runs with the 50GB dataset.  However if we do the full 50GB dataset the performance suffers.  We have to get much of the data across numa domains which is going to be higher cost.
❯ sudo ./in_ram ./mnt/datafile.bin 53687091200
simple loop 167802249 10s processed at 3.76 GB/s
unrolled loop 167802249 10s processed at 7.90 GB/s


Comparing the results of "fully in-memory (50GB)" which is pre-loaded in memory before measuring against the "unrolled loop" that is only cached in memory we see 40% overhead.  That's 2.75 seconds out of 9 seconds that was spent waiting on the caching system instead of counting.  Why so much?
mmap()
The mmap() call presents the process with a buffer that is a blank slate even when the data is already in memory.  The buffer is populated page by page as it's accessed from the page cache.  This isn't a copy, it's just the operating system mapping the cached memory into the process.  This costs more than it might seem.  The worst case with mmap() the counting has to pause at every 4KB page boundary while the kernel processes a fault, tracks down the page of data in the page cache, then updates the page table of the process to insert the memory into the process.  Fundamentally this is a process that is limited by the memory latency, not the CPU speed or memory bandwidth.  With the potential for TLB walks and searching lists that track the page cache, we’re taking potentially dozens of CPU cache misses and several microseconds of waiting on memory for every 4KB page.
direct IO
Using our direct from disk approach uses pipelines and streams which avoids the kind of memory latency dominated bottleneck that mmap() has.  In our case we're limited by the bandwidth of our disks yet because of the pipelining, the larger latency of the IOs doesn't get in the critical path of the counting very much.  Allowing for higher throughput.
Scaling
Consider the implications of these experiments as we scale.  The well vetted solution to get data from memory to a process is slower than using the disk directly.  This isn't because the memory is slower than the disk.  The memory has higher bandwidth than the disk, not by an order of magnitude, but a decent margin.  But the latency of the memory is orders of magnitude lower than the disk.  Nevertheless the way the data in memory is accessed is the culprit.  Its a synchronous approach that assumes memory operations are cheap and low latency.  These accesses add up and it ends up waiting on memory latencies.  The disk method on the other hand is as a streaming approach built to leverage bandwidth and hide latencies.
extending the existing rig
If I got a few more of these disks I could push the IO bandwidth to be greater than the 13GB/s per thread memory bandwidth limit.  IO is DMA'ed to buffers that are pretty small compared to the total dataset. These buffers scale with the throughput capabilities of the CPU and the disks, not the dataset size. The buffers can be located in a single numa domain allowing us to avoid the overhead of accessing the buffers between NUMA domains.  Add more disks to this system I might be able to create a disk based solution to count at the full 13GB/s rather than be limited to the 7.90GB/s we see with the in memory example at the full 50GB dataset.  With such a system our throughput would not be affected by the dataset size, unlike the in-memory case, which has numa overhead and eventually runs out of memory to scale.
faster than memory is possible
On a proper modern server the CPUs will let you do IO directly to the L3 cache, bypassing memory altogether.  Because PCIe bandwidth is higher than memory bandwidth, on paper we could even get more max bandwidth than we can get from memory if we carefully pin the buffers into the CPU cache.  I haven't confirm this works in practice, however, it could be made to work and is the sort of thing that CPU designs will be forced to lean into to push performance forward.
memory is changing too
This isn't just about disks vs memory.  Similar techniques and principles apply to memory.  Memory bandwidth is still scaling even if the latency is not.  This means to take advantage of memory performance you have to actually treat it more like a disk and less like Random Access Memory.  To scale performance with generational updates you have to make sure to stream data from memory into the CPU caches in blocks, similar to how data is streamed from disk to memory.  If not you end up with 90s level memory throughput.  A custom mechanism to cache data in memory could easily avoid the memory latency problems seen with the default mmap() solution with much less code than the io_uring solution.
Is this worth it?
I'm not going to say that going to the effort of implementing something like this is always worth it.  The mmap() method is sure elegant from a coding perspective, especially when compared to all the code I had to write to get the io_uring setup working.  Sometimes the simple way is the way to go.
Is using 6 cores of IO for 1 core of compute is always the right answer?  Probably not.  This was an extreme situation to prove a point.  In realworld situations you'll need to look at the tradeoffs and decide what's best for your use case.  Correctly understanding the strengths and weaknesses of the hardware can open up a number of possibilities where you can get a lot more performance for a lot less money.
The kind of overhead demonstrated with mmap() isn’t going to go away, new hardware isn't going to fix it.  At the same time disk bandwidth and the number of cores are scaling each generation.  But doing things that scale performance with new technology is going to take extra code and effort.
But don't just blow this stuff off.  Sure you can dedicate a server with 3TB of memory to serve 10K client connections. Memory in the cloud is like ~$5/GB/month, if you can afford it, then you do you.  However it is worth considering that humanity doesn't have the silicon fabs or the power plants to support this for every moron vibe coder out there making an app.  I figure either the karmic debt to the planet, or a vengeful AI demigod hungry for silicon and electricity will come for those that don't heed this warning, eventually.  Either way my conscience is clear.
Recap

Memory is slow - when you use it oldschool.
Disk is fast - when you are clever with it.
Test the dogma - compounded exponentials are flipping somethings from true to false.

Bad news is that this cleverness requires extra code and effort.
Good news is we now have AI to write and test the extra code this cleverness requires.
Better news is that, for those that are willing to learn, AI's don't do this unless you know how to ask them.
Lean into things that scale, avoid things that don’t.
Next Time
What will be revealed in the next episode?

Is O(√n) actually faster than O(log n)?  Will the foundations of Computer Science survive this unveiling?
Will traditional code be consumed into the latent space of our AI overlords?
Is AI hiding these performance gains from me?  Is AI even capable of writing optimized code?


Jared Hulbert

A few notes for the "um actually" haters commenting on Hacker News:

This is not and does not claim to be an academic paper.
I do not intend to prove that NAND is a drop in replacement for DRAM.
Tis but a humble and hopefully fun exercise in exploring the limits and trends of modern hardware and the tradeoffs needed to maximize performance.
As I stated before I have no problem with your choice to ignore this and write lazy code that will perform just as fast on new hardware in 15 years as it does on todays hardware.  In fact I applaud your choice.  Jeff Bezos has an orbital yacht to build, someone has to pay for it, why not you?
I am not an AI.  I am a human with a computer that don't write perfect.



source code can be found here.


            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What If OpenDocument Used SQLite?]]></title>
            <link>https://www.sqlite.org/affcase1.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45132498</guid>
            <content:encoded><![CDATA[





Small. Fast. Reliable.Choose any three.











Introduction

Suppose the
OpenDocument file format,
and specifically the "ODP" OpenDocument Presentation format, were
built around SQLite.  Benefits would include:

Smaller documents
Faster File/Save times
Faster startup times
Less memory used
Document versioning
A better user experience



Note that this is only a thought experiment.
We are not suggesting that OpenDocument be changed.
Nor is this article a criticism of the current OpenDocument
design.  The point of this essay is to suggest ways to improve
future file format designs.

About OpenDocument And OpenDocument Presentation


The OpenDocument file format is used for office applications:
word processors, spreadsheets, and presentations.  It was originally
designed for the OpenOffice suite but has since been incorporated into
other desktop application suites.  The OpenOffice application has been
forked and renamed a few times.  This author's primary use for OpenDocument is 
building slide presentations with either 
NeoOffice on Mac, or
LibreOffice on Linux and Windows.


An OpenDocument Presentation or "ODP" file is a
ZIP archive containing
XML files describing presentation slides and separate image files for the
various images that are included as part of the presentation.
(OpenDocument word processor and spreadsheet files are similarly
structured but are not considered by this article.) The reader can
easily see the content of an ODP file by using the "zip -l" command.
For example, the following is the "zip -l" output from a 49-slide presentation
about SQLite from the 2014
SouthEast LinuxFest
conference:

Archive:  self2014.odp
  Length      Date    Time    Name
---------  ---------- -----   ----
       47  2014-06-21 12:34   mimetype
        0  2014-06-21 12:34   Configurations2/statusbar/
        0  2014-06-21 12:34   Configurations2/accelerator/current.xml
        0  2014-06-21 12:34   Configurations2/floater/
        0  2014-06-21 12:34   Configurations2/popupmenu/
        0  2014-06-21 12:34   Configurations2/progressbar/
        0  2014-06-21 12:34   Configurations2/menubar/
        0  2014-06-21 12:34   Configurations2/toolbar/
        0  2014-06-21 12:34   Configurations2/images/Bitmaps/
    54702  2014-06-21 12:34   Pictures/10000000000001F40000018C595A5A3D.png
    46269  2014-06-21 12:34   Pictures/100000000000012C000000A8ED96BFD9.png
... 58 other pictures omitted...
    13013  2014-06-21 12:34   Pictures/10000000000000EE0000004765E03BA8.png
  1005059  2014-06-21 12:34   Pictures/10000000000004760000034223EACEFD.png
   211831  2014-06-21 12:34   content.xml
    46169  2014-06-21 12:34   styles.xml
     1001  2014-06-21 12:34   meta.xml
     9291  2014-06-21 12:34   Thumbnails/thumbnail.png
    38705  2014-06-21 12:34   Thumbnails/thumbnail.pdf
     9664  2014-06-21 12:34   settings.xml
     9704  2014-06-21 12:34   META-INF/manifest.xml
---------                     -------
 10961006                     78 files



The ODP ZIP archive contains four different XML files:
content.xml, styles.xml, meta.xml, and settings.xml.  Those four files
define the slide layout, text content, and styling.  This particular
presentation contains 62 images, ranging from full-screen pictures to
tiny icons, each stored as a separate file in the Pictures
folder.  The "mimetype" file contains a single line of text that says:

application/vnd.oasis.opendocument.presentation


The purpose of the other files and folders is presently 
unknown to the author but is probably not difficult to figure out.

Limitations Of The OpenDocument Presentation Format


The use of a ZIP archive to encapsulate XML files plus resources is an
elegant approach to an application file format.
It is clearly superior to a custom binary file format.
But using an SQLite database as the
container, instead of ZIP, would be more elegant still.

A ZIP archive is basically a key/value database, optimized for
the case of write-once/read-many and for a relatively small number
of distinct keys (a few hundred to a few thousand) each with a large BLOB
as its value.  A ZIP archive can be viewed as a "pile-of-files"
database.  This works, but it has some shortcomings relative to an
SQLite database, as follows:


Incremental update is hard.

It is difficult to update individual entries in a ZIP archive.
It is especially difficult to update individual entries in a ZIP
archive in a way that does not destroy
the entire document if the computer loses power and/or crashes
in the middle of the update.  It is not impossible to do this, but
it is sufficiently difficult that nobody actually does it.  Instead, whenever
the user selects "File/Save", the entire ZIP archive is rewritten.  
Hence, "File/Save" takes longer than it ought, especially on
older hardware.  Newer machines are faster, but it is still bothersome
that changing a single character in a 50 megabyte presentation causes one
to burn through 50 megabytes of the finite write life on the SSD.

Startup is slow.

In keeping with the pile-of-files theme, OpenDocument stores all slide 
content in a single big XML file named "content.xml".  
LibreOffice reads and parses this entire file just to display
the first slide.
LibreOffice also seems to
read all images into memory as well, which makes sense seeing as when
the user does "File/Save" it is going to have to write them all back out
again, even though none of them changed.  The net effect is that
start-up is slow.  Double-clicking an OpenDocument file brings up a
progress bar rather than the first slide.
This results in a bad user experience.
The situation grows ever more annoying as
the document size increases.

More memory is required.

Because ZIP archives are optimized for storing big chunks of content, they
encourage a style of programming where the entire document is read into
memory at startup, all editing occurs in memory, then the entire document
is written to disk during "File/Save".  OpenOffice and its descendants
embrace that pattern.


One might argue that it is ok, in this era of multi-gigabyte desktops, to
read the entire document into memory.
But it is not ok.
For one, the amount of memory used far exceeds the (compressed) file size
on disk.  So a 50MB presentation might take 200MB or more RAM.  
That still is not a problem if one only edits a single document at a time.  
But when working on a talk, this author will typically have 10 or 15 different 
presentations up all at the same
time (to facilitate copy/paste of slides from past presentations) and so
gigabytes of memory are required.
Add in an open web browser or two and a few other 
desktop apps, and suddenly the disk is whirling and the machine is swapping.
And even having just a single document is a problem when working
on an inexpensive Chromebook retrofitted with Ubuntu.
Using less memory is always better.


Crash recovery is difficult.

The descendants of OpenOffice tend to segfault more often than commercial
competitors.  Perhaps for this reason, the OpenOffice forks make
periodic backups of their in-memory documents so that users do not lose
all pending edits when the inevitable application crash does occur.
This causes frustrating pauses in the application for the few seconds
while each backup is being made.
After restarting from a crash, the user is presented with a dialog box
that walks them through the recovery process.  Managing the crash
recovery this way involves lots of extra application logic and is
generally an annoyance to the user.

Content is inaccessible.

One cannot easily view, change, or extract the content of an 
OpenDocument presentation using generic tools.
The only reasonable way to view or edit an OpenDocument document is to open
it up using an application that is specifically designed to read or write
OpenDocument (read: LibreOffice or one of its cousins).  The situation
could be worse.  One can extract and view individual images (say) from
a presentation using just the "zip" archiver tool.  But it is not reasonable
try to extract the text from a slide.  Remember that all content is stored
in a single "context.xml" file.  That file is XML, so it is a text file.
But it is not a text file that can be managed with an ordinary text
editor.  For the example presentation above, the content.xml file
consist of exactly two lines. The first line of the file is just:

<?xml version="1.0" encoding="UTF-8"?>


The second line of the file contains 211792 characters of
impenetrable XML.  Yes, 211792 characters all on one line.
This file is a good stress-test for a text editor.
Thankfully, the file is not some obscure
binary format, but in terms of accessibility, it might as well be
written in Klingon.


First Improvement:  Replace ZIP with SQLite


Let us suppose that instead of using a ZIP archive to store its files,
OpenDocument used a very simple SQLite database with the following
single-table schema:

CREATE TABLE OpenDocTree(
  filename TEXT PRIMARY KEY,  -- Name of file
  filesize BIGINT,            -- Size of file after decompression
  content BLOB                -- Compressed file content
);



For this first experiment, nothing else about the file format is changed.
The OpenDocument is still a pile-of-files, only now each file is a row
in an SQLite database rather than an entry in a ZIP archive.
This simple change does not use the power of a relational
database.  Even so, this simple change shows some improvements.




Surprisingly, using SQLite in place of ZIP makes the presentation
file smaller.  Really.  One would think that a relational database file
would be larger than a ZIP archive, but at least in the case of NeoOffice
that is not so.  The following is an actual screen-scrape showing
the sizes of the same NeoOffice presentation, both in its original 
ZIP archive format as generated by NeoOffice (self2014.odp), and 
as repacked as an SQLite database using the 
SQLAR utility:

-rw-r--r--  1 drh  staff  10514994 Jun  8 14:32 self2014.odp
-rw-r--r--  1 drh  staff  10464256 Jun  8 14:37 self2014.sqlar
-rw-r--r--  1 drh  staff  10416644 Jun  8 14:40 zip.odp



The SQLite database file ("self2014.sqlar") is about a
half percent smaller than the equivalent ODP file!  How can this be?
Apparently the ZIP archive generator logic in NeoOffice
is not as efficient as it could be, because when the same pile-of-files
is recompressed using the command-line "zip" utility, one gets a file
("zip.odp") that is smaller still, by another half percent, as seen
in the third line above.  So, a well-written ZIP archive
can be slightly smaller than the equivalent SQLite database, as one would
expect.  But the difference is slight.  The key take-away is that an
SQLite database is size-competitive with a ZIP archive.


The other advantage to using SQLite in place of
ZIP is that the document can now be updated incrementally, without risk
of corrupting the document if a power loss or other crash occurs in the
middle of the update.  (Remember that writes to 
SQLite databases are atomic.)   True, all the
content is still kept in a single big XML file ("content.xml") which must
be completely rewritten if so much as a single character changes.  But
with SQLite, only that one file needs to change.  The other 77 files in the
repository can remain unaltered.  They do not all have to be rewritten,
which in turn makes "File/Save" run much faster and saves wear on SSDs.

Second Improvement:  Split content into smaller pieces


A pile-of-files encourages content to be stored in a few large chunks.
In the case of ODP, there are just four XML files that define the layout
of all slides in a presentation.  An SQLite database allows storing
information in a few large chunks, but SQLite is also adept and efficient
at storing information in numerous smaller pieces.


So then, instead of storing all content for all slides in a single
oversized XML file ("content.xml"), suppose there was a separate table
for storing the content of each slide separately.  The table schema
might look something like this:

CREATE TABLE slide(
  pageNumber INTEGER,   -- The slide page number
  slideContent TEXT     -- Slide content as XML or JSON
);
CREATE INDEX slide_pgnum ON slide(pageNumber); -- Optional


The content of each slide could still be stored as compressed XML.
But now each page is stored separately.  So when opening a new document,
the application could simply run:

SELECT slideContent FROM slide WHERE pageNumber=1;


This query will quickly and efficiently return the content of the first
slide, which could then be speedily parsed and displayed to the user.
Only one page needs to be read and parsed in order to render the first screen,
which means that the first screen appears much faster and
there is no longer a need for an annoying progress bar.

If the application wanted
to keep all content in memory, it could continue reading and parsing the
other pages using a background thread after drawing the first page.  Or,
since reading from SQLite is so efficient, the application might 
instead choose to reduce its memory footprint and only keep a single
slide in memory at a time.  Or maybe it keeps the current slide and the
next slide in memory, to facilitate rapid transitions to the next slide.


Notice that dividing up the content into smaller pieces using an SQLite
table gives flexibility to the implementation.  The application can choose
to read all content into memory at startup.  Or it can read just a
few pages into memory and keep the rest on disk.  Or it can read just a
single page into memory at a time.  And different versions of the application
can make different choices without having to make any changes to the
file format.  Such options are not available when all content is in
a single big XML file in a ZIP archive.


Splitting content into smaller pieces also helps File/Save operations
to go faster.  Instead of having to write back the content of all pages
when doing a File/Save, the application only has to write back those
pages that have actually changed.


One minor downside of splitting content into smaller pieces is that
compression does not work as well on shorter texts and so the size of
the document might increase.  But as the bulk of the document space 
is used to store images, a small reduction in the compression efficiency 
of the text content will hardly be noticeable, and is a small price 
to pay for an improved user experience.

Third Improvement:  Versioning


Once one is comfortable with the concept of storing each slide separately,
it is a small step to support versioning of the presentation.  Consider
the following schema:

CREATE TABLE slide(
  slideId INTEGER PRIMARY KEY,
  derivedFrom INTEGER REFERENCES slide,
  content TEXT     -- XML or JSON or whatever
);
CREATE TABLE version(
  versionId INTEGER PRIMARY KEY,
  priorVersion INTEGER REFERENCES version,
  checkinTime DATETIME,   -- When this version was saved
  comment TEXT,           -- Description of this version
  manifest TEXT           -- List of integer slideIds
);



In this schema, instead of each slide having a page number that determines
its order within the presentation, each slide has a unique
integer identifier that is unrelated to where it occurs in sequence.
The order of slides in the presentation is determined by a list of
slideIds, stored as a text string in the MANIFEST column of the VERSION
table.
Since multiple entries are allowed in the VERSION table, that means that
multiple presentations can be stored in the same document.


On startup, the application first decides which version it
wants to display.  Since the versionId will naturally increase in time
and one would normally want to see the latest version, an appropriate
query might be:

SELECT manifest, versionId FROM version ORDER BY versionId DESC LIMIT 1;



Or perhaps the application would rather use the
most recent checkinTime:

SELECT manifest, versionId, max(checkinTime) FROM version;



Using a single query such as the above, the application obtains a list
of the slideIds for all slides in the presentation.  The application then
queries for the content of the first slide, and parses and displays that
content, as before.

(Aside:  Yes, that second query above that uses "max(checkinTime)"
really does work and really does return a well-defined answer in SQLite.
Such a query either returns an undefined answer or generates an error
in many other SQL database engines, but in SQLite it does what you would 
expect: it returns the manifest and versionId of the entry that has the
maximum checkinTime.)

When the user does a "File/Save", instead of overwriting the modified
slides, the application can now make new entries in the SLIDE table for
just those slides that have been added or altered.  Then it creates a
new entry in the VERSION table containing the revised manifest.

The VERSION table shown above has columns to record a check-in comment
(presumably supplied by the user) and the time and date at which the File/Save
action occurred.  It also records the parent version to record the history
of changes.  Perhaps the manifest could be stored as a delta from the
parent version, though typically the manifest will be small enough that
storing a delta might be more trouble than it is worth.  The SLIDE table
also contains a derivedFrom column which could be used for delta encoding
if it is determined that saving the slide content as a delta from its
previous version is a worthwhile optimization.

So with this simple change, the ODP file now stores not just the most
recent edit to the presentation, but a history of all historic edits.  The
user would normally want to see just the most recent edition of the
presentation, but if desired, the user can now go backwards in time to 
see historical versions of the same presentation.

Or, multiple presentations could be stored within the same document.

With such a schema, the application would no longer need to make
periodic backups of the unsaved changes to a separate file to avoid lost
work in the event of a crash.  Instead, a special "pending" version could
be allocated and unsaved changes could be written into the pending version.
Because only changes would need to be written, not the entire document,
saving the pending changes would only involve writing a few kilobytes of
content, not multiple megabytes, and would take milliseconds instead of
seconds, and so it could be done frequently and silently in the background.
Then when a crash occurs and the user reboots, all (or almost all)
of their work is retained.  If the user decides to discard unsaved changes, 
they simply go back to the previous version.


There are details to fill in here.
Perhaps a screen can be provided that displays all historical changes
(perhaps with a graph) allowing the user to select which version they
want to view or edit.  Perhaps some facility can be provided to merge
forks that might occur in the version history.  And perhaps the
application should provide a means to purge old and unwanted versions.
The key point is that using an SQLite database to store the content,
rather than a ZIP archive, makes all of these features much, much easier
to implement, which increases the possibility that they will eventually
get implemented.

And So Forth...


In the previous sections, we have seen how moving from a key/value
store implemented as a ZIP archive to a simple SQLite database
with just three tables can add significant capabilities to an application
file format.
We could continue to enhance the schema with new tables, with indexes
added for performance, with triggers and views for programming convenience,
and constraints to enforce consistency of content even in the face of
programming errors.  Further enhancement ideas include:

 Store an automated undo/redo stack in a database table so that
     Undo could go back into prior edit sessions.
 Add full text search capabilities to the slide deck, or across
     multiple slide decks.
 Decompose the "settings.xml" file into an SQL table that
     is more easily viewed and edited by separate applications.
 Break out the "Presenter Notes" from each slide into a separate
     table, for easier access from third-party applications and/or scripts.
 Enhance the presentation concept beyond the simple linear sequence of
     slides to allow for side-tracks and excursions to be taken depending on
     how the audience is responding.



An SQLite database has a lot of capability, which
this essay has only begun to touch upon.  But hopefully this quick glimpse
has convinced some readers that using an SQL database as an application
file format is worth a second look.


Some readers might resist using SQLite as an application
file format due to prior exposure to enterprise SQL databases and
the caveats and limitations of those other systems.  
For example, many enterprise database
engines advise against storing large strings or BLOBs in the database
and instead suggest that large strings and BLOBs be stored as separate
files and the filename stored in the database.  But SQLite 
is not like that.  Any column of an SQLite database can hold
a string or BLOB up to about a gigabyte in size.  And for strings and
BLOBs of 100 kilobytes or less, 
I/O performance is better than using separate
files.


Some readers might be reluctant to consider SQLite as an application
file format because they have been inculcated with the idea that all
SQL database schemas must be factored into
Third Normal Form (3NF)
and store only small primitive data types such as strings and integers.  Certainly
relational theory is important and designers should strive to understand
it.  But, as demonstrated above, it is often quite acceptable to store
complex information as XML or JSON in text fields of a database.
Do what works, not what your database professor said you ought to do.

Review Of The Benefits Of Using SQLite


In summary,
the claim of this essay is that using SQLite as a container for an application
file format like OpenDocument
and storing lots of smaller objects in that container
works out much better than using a ZIP archive holding a few larger objects.
To wit:



An SQLite database file is approximately the same size, and in some cases
smaller, than a ZIP archive holding the same information.


The atomic update capabilities
of SQLite allow small incremental changes
to be safely written into the document.  This reduces total disk I/O
and improves File/Save performance, enhancing the user experience.


Startup time is reduced by allowing the application to read in only the
content shown for the initial screen.  This largely eliminates the
need to show a progress bar when opening a new document.  The document
just pops up immediately, further enhancing the user experience.


The memory footprint of the application can be dramatically reduced by
only loading content that is relevant to the current display and keeping
the bulk of the content on disk.  The fast query capability of SQLite
make this a viable alternative to keeping all content in memory at all times.
And when applications use less memory, it makes the entire computer more
responsive, further enhancing the user experience.


The schema of an SQL database is able to represent information more directly
and succinctly than a key/value database such as a ZIP archive.  This makes
the document content more accessible to third-party applications and scripts
and facilitates advanced features such as built-in document versioning, and
incremental saving of work in progress for recovery after a crash.



These are just a few of the benefits of using SQLite as an application file
format — the benefits that seem most likely to improve the user
experience for applications like OpenOffice.  Other applications might
benefit from SQLite in different ways. See the Application File Format
document for additional ideas.


Finally, let us reiterate that this essay is a thought experiment.
The OpenDocument format is well-established and already well-designed.
Nobody really believes that OpenDocument should be changed to use SQLite
as its container instead of ZIP.  Nor is this article a criticism of
OpenDocument for not choosing SQLite as its container since OpenDocument
predates SQLite.  Rather, the point of this article is to use OpenDocument
as a concrete example of how SQLite can be used to build better 
application file formats for future projects.
This page last modified on  2025-05-12 11:56:41 UTC 

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Classic 8×8-pixel B&W Mac patterns]]></title>
            <link>https://www.pauladamsmith.com/blog/2025/09/classic-mac-patterns.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45131538</guid>
            <description><![CDATA[TL;DR: I made a website for the original classic Mac patterns I was working on something and thought it would be fun to use one of the classic Mac black-and-white patterns in the project. I'm talking about the original 8×8-pixel ones that were in the...]]></description>
            <content:encoded><![CDATA[
        
TL;DR: I made a website for the original classic Mac patterns
I was working on something and thought it would be fun to use one of the
classic Mac black-and-white patterns in the project. I'm talking about the
original 8×8-pixel ones that were in the original Control Panel for setting the
desktop background and in MacPaint as fill patterns.


Screenshots via to Marcin's awesome interactive
history
I figured there'd must be clean, pixel-perfect GIFs or PNGs of them somewhere
on the web. And perhaps there are, but after poking around a bit, I ran out of
energy for that, but by then had a head of steam for extracting the patterns en
masse from the original source, somehow. Then I could produce whatever format I
needed for them.
There are 38 patterns, introduced in the original System 1.0 in the 1984 debut
of the Macintosh. They were unchanged in later versions, so I decided to get
them from a System 6 disk, since that's a little easier with access to utility
programs.
Preparation

Download Mini vMac.
Acquire "old world" Mac ROMs.
Download a System 6 startup disk image.
Download ExportFl disk image.
Download sitPack disk image.
Install "The Unarchiver" (brew install --cask the-unarchiver)
Install the Xcode command-line tools.

Extraction process
Start System 6 (drag the ROM onto the Mini vMac icon, then drag the System 6
disk onto the window when you see the flashing floppy disk). Mount the ExportFl
and sitPack disks by dragging their files and dropping on the classic Mac
desktop.
In emulation
Double-click sitPack to launch the program. Command-O to open, then navigate to
the startup disk by clicking "Drive". Scroll to find "System Folder" and
double-click on it. Scroll to the bottom, select "System" and click "Open". Save
the output file as "System.sit" in the top-level of the startup disk. Quit
sitPack back to the Finder.
Start the ExportFl program. Command-O or pick "Open" from the "File" menu. Find
the "System.sit" created in the last step and click "Open". A regular file save
dialog will appear on the modern Mac, pick a location and save the file.
On the modern Mac
Drag the "System.sit" file onto The Unarchiver, or open the file from within it.
This will produce a file called "System" (with no extension).
Run DeRez (part of the Xcode developer command-line tools) on the System file.
I first added /Library/Developer/CommandLineTools/usr/bin to my $PATH, then
ran:
$ DeRez -only PAT\# System > patterns.r


This produces a text representation of the PAT# resource in the System file.
It's a series of bytes that comprise 38 8×8 patterns meant for QuickDraw
commands. There's a leading big-endian unsigned 16-bit number (0026) to indicate the number of 8-byte patterns to follow.
data 'PAT#' (0, purgeable) {
	$"0026 FFFF FFFF FFFF FFFF DDFF 77FF DDFF"
	$"77FF DD77 DD77 DD77 DD77 AA55 AA55 AA55"
	$"AA55 55FF 55FF 55FF 55FF AAAA AAAA AAAA"
	$"AAAA EEDD BB77 EEDD BB77 8888 8888 8888"
	$"8888 B130 031B D8C0 0C8D 8010 0220 0108"
	$"4004 FF88 8888 FF88 8888 FF80 8080 FF08"
	$"0808 8000 0000 0000 0000 8040 2000 0204"
	$"0800 8244 3944 8201 0101 F874 2247 8F17"
	$"2271 55A0 4040 550A 0404 2050 8888 8888"
	$"0502 BF00 BFBF B0B0 B0B0 0000 0000 0000"
	$"0000 8000 0800 8000 0800 8800 2200 8800"
	$"2200 8822 8822 8822 8822 AA00 AA00 AA00"
	$"AA00 FF00 FF00 FF00 FF00 1122 4488 1122"
	$"4488 FF00 0000 FF00 0000 0102 0408 1020"
	$"4080 AA00 8000 8800 8000 FF80 8080 8080"
	$"8080 081C 22C1 8001 0204 8814 2241 8800"
	$"AA00 40A0 0000 040A 0000 0384 4830 0C02"
	$"0101 8080 413E 0808 14E3 1020 54AA FF02"
	$"0408 7789 8F8F 7798 F8F8 0008 142A 552A"
	$"1408"
};

It would have been simple enough to
parse this text, but I had Claude quickly make a Python
program
to do so and output them in .pbm format, which is part of the Netpbm image
format class. This is a simple image format that is text-based, a '1' or a
'0' indicating a black or white pixel in a row and column.
For example, this subway tile pattern  is represented like
this in .pbm:
P1
8 8
1 1 1 1 1 1 1 1
1 0 0 0 0 0 0 0
1 0 0 0 0 0 0 0
1 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1
0 0 0 0 1 0 0 0
0 0 0 0 1 0 0 0
0 0 0 0 1 0 0 0

From here, I can generate image files for the patterns in any format and
resolution I want, using ImageMagick or similar. It's important when scaling the
patterns to use -filter point, so that ImageMagick doesn't try to interpolate
the pixels it needs to fill in, which would lead to blurry results.

Why do all this?
It's nostalgic, I have a fondness for these old patterns and the original B&W
Mac aesthetic, it reminds me of playing games like Dark Castle and Glider,
messing around with HyperCard, and using Tex-Edit and hoarding early shareware
programs.
The whole point of the above is to get a copy of the System file out with the
resource fork intact, that's
where the desktop patterns live.
According to old classic Mac
manuals,
the patterns were QuickDraw bit-pattern resources, a simple bitmap of 8 bits
per row packed into 8 bytes (columns). It was fast for QuickDraw to copy them
over an area of the screen. For example the following pattern was used for the
default gray desktop pattern on black-and-white Mac screens.

I could have extracted all 38 patterns other ways: I could have screenshotted
each one, I could have looked at each one and hand-written .pbm files, both of
which would have been tedious and error-prone.
Ultimately, I wanted to extract the exact original data from the source (or
close enough copy thereof) and have the patterns in a format I considered
archival for this limited purpose (.pbm files are trivial to parse and
manipulate).
Head over to my pattern site to get the patterns for yourself.
(Credit for replica Geneva 9pt and Chicago 12pt fonts)


        
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Action was the best 8-bit programming language]]></title>
            <link>https://www.goto10retro.com/p/action-was-the-best-8-bit-programming</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45131243</guid>
            <description><![CDATA[There were many programming languages available for 8-bit computers, the most common being BASIC and Assembly Language, but Action! beats them both!]]></description>
            <content:encoded><![CDATA[There were many programming languages available for 8-bit computers, the most common being BASIC and Assembly Language, but there were also other lesser-used languages such as Logo, Forth, and Pilot. The languages that would go on to dominate 16-bit computing, C and Pascal, were also available but were usually severely limited. An 8-bit computer generally did not have enough horsepower to run those more complex language compilers1.By 1983 Optimized Systems Software (OSS) was renown in the Atari world for its great updated versions of DOS (DOS XL), BASIC (BASIC XL/XE) and assembler (MAC/65), so it was no surprise that they were the ones to introduce a new language, Action!, into the Atari market.Created by Clinton Parker, Action! was an all-new compiled language that was designed and optimized for the 8-bit 6502 CPU. It was a 16K cartridge2 and had everything you need integrated into one package: the monitor, compiler, text editor and debugger3. In some ways, Action! was the first IDE (integrated development environment) for an 8-bit computer.Back in the 80s I never used Action! and instead mostly used BASIC and OSS BASIC XE for my programming. I did like reading Action! program listings in magazines, though. But I now have the Action! cartridge and just recently acquired an Action! user manual, so I felt it was time to take a closer look at this amazing software development tool.The version of Action! that I now have is the classic orange cartridge, paired with a small 3-ring yellow binder containing the documentation. Action! was also available in the yellow label cartridge and its manual was also in a larger binder and then later, perfect bound (like the BASIC XL and BASIC XE manuals I have). Having the manual in a binder would have certainly been more useful in the 80s when you had to refer to it frequently.Action! retailed for $99 in 1983 (about $320 in 2025) and was only available for the Atari 8-bit computers. Early advertisements indicated there would be forthcoming versions for the Apple II and Commodore 64, but those never materialized.The manual is just under 220 pages and is concise, but reasonable well-written. There is not a ton of sample code and it doesn’t try to teach too many concepts. To get the most of it, you really already need to know how to program.I had been looking for an actual Action! manual for years, but the ones I’d seen on eBay had always been prohibitively expensive. Luckily I found one last month for just $30 and snagged it.You don’t need a physical manual, of course. An updated manual is available online in several places, and here’s the PDF.The editor really was a wonder for its time. It is a full-screen text editor that can scroll to the right as the line of text you type becomes longer than the 40 characters of an Atari screen. That was an unusual feature for the time, but was necessary because it allowed the indentation, encouraged by Action!’s structured programming style, to remain easy to read.Not much to see here, but it’s an empty editor screen.The editor can copy and paste text, another somewhat new feature for Atari text editors in 1983, has the ability to tag lines to jump to them rapidly and it also has a split screen mode that let you show two files (or two parts of the same file) on the screen at once. At first this might seem silly considering the small size of the screen, but this was revolutionary for the time. Normally to look at another file, you’d have to open it, losing the file you were working on, and then reload the original file. It was tedious and was a reason why you would print your programs back then.Even looking at different parts of a file could be a pain because you’d just be scrolling all over the place, which was not always fast or easy in many text editors. This was even worse with something like BASIC, which required you to LIST line ranges to see parts of your program.To exit the editor, you press Control+Shift+M which takes you to the monitor.Today this would be called the shell, but it is essentially the command line interface for the entire system. From the monitor, you can switch to the editor, compile, trace code, look at memory and more.Action! is a structured, procedural programming language. It is similar to both C and Pascal, although not quite as advanced as either of them.It has the usual commands for looping, if-then-else, but it does not have anything like a switch or Case statement. There are also only three data types: BYTE, CARD and INT. Strings were essentially just BYTE arrays.I found it endearing that to end an IF block you used FI (IF spelled backwards) and to end a DO block you used OD. That is some interesting symmetry although I’m not really sure it helps readability.An Action! “Hello World” program would be this:PROC hello()
; This is a comment.
  DO
    PrintE("Goto 10")
  OD
RETURNThe Action! language may not have been as advanced as C or Pascal, but because it was designed with the 6502 CPU in mind, compiling the language was astonishingly fast.The original Atari Pascal system from APX needed multiple disk drives and could take several minutes to compile a small program. The only C package available in 1983 (Deep Blue C) was at least as limited as Action!, but also not an integrated package and compiled slowly. Draper Pascal only compiled to pseudo-code.Action! compiled your program to machine code in memory and in seconds. Typing C (to compile) and then R (to run) was hardly slower than just typing RUN in BASIC.It really is stupidly fast. Here’s the output from the above program:If there is a compile error, it is shown on the screen and will be highlighted when you switch back to the editor by typing “e”.Action! was not perfect and it had several limitations. In my opinion, the two biggest limitations were that that Action! cartridge was required to run Action! programs (because they depended on the library that was included the cartridge ROM) and that there was no floating point data type.Both of these did get solved, to some extent, with the purchase of an additional add-ons: Action! RunTime and Action! Toolkit.The RunTime package provided the ability to create stand-alone Action! programs that you could distribute to others to run without the cartridge.The RunTime included the library as source files that you could include at the beginning of your own programs so that everything that was needed to run would get compiled into a single executable program. From what I can tell, Action! had no concept of linking which is how something like C would have handled this.I don’t have an official Action! RunTime disk, but the image is readily available online.The ToolKit is essentially an enhanced Library with additional functions and features. Two notable things it adds are player/missile graphics support and some support for floating-point numbers via several “Real” functions.Unfortunately this floating point support is somewhat limited and it doesn’t look all that useful to me. For example, I’ve used the Archimedes Spiral program in some articles here on Goto 10 to demonstrate drawing a fun graphic on the screen. It is interesting to see how long it can take to do the drawing on an 8-bit computer. I’d love to port it to Action!, and I was hopeful I’d be able to do so with the Action! ToolKit. Alas, even though it does add some commands to do some floating-point math, it does not add any trigonometry functions. The lack of Sin and Cos make it impractical to port Archimedes Spiral4.I don’t have an official Action! ToolKit disk, but the image is readily available online.It seems that Action! was mostly use by hobbyists, public domain and magazine software. The only two known commercial product made with Action! were the HomePak5 productivity package by Russ Wetmore and the Games Computers Play online service.For the above screen shots, I was using Action! with my 130XE.I plan to dig into actually using Action! itself more in the coming months. It really looks like a fun language. Unfortunately, since Action! is a cartridge, I can’t use it directly with my Side3 cart. There are disk-based versions of Action! available at AtariWiki, so I may have to switch to one of those, or see if I can get one of the SuperCart images to work with Side3. Otherwise, I may try it old-school with SpartaDOS, my trusty 1050 disk drive and a RAM disk.AtariWiki has a create page with lots of links to Action!-related materials.Action! Archive is a great reference for Action! programming.If you want to learn more about how to program in Action!, be sure to check out David Arlington’s YouTube channel, which has a 25-part series on Action! programming.1Kyan Pascal was released in 1986 and worked pretty well, but really wanted a couple disk drives. LightSpeed C was also a decent version of C that debuted later in the 80s.2Actually an OSS SuperCartridge, which had 16K of ROM but only used 8K of address space in the computer.3Calling it a debugger might be a bit of stretch compared to modern tools.4Sure, I could probably implement my own version of those, but I don’t really want to.5HomePak was an integrated productivity package with a highly regarded terminal program, a slick word processor with not much free RAM for text (perhaps 5 pages) and an usual database. HomePak warrants its own article.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[LLM Visualization]]></title>
            <link>https://bbycroft.net/llm</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45130260</guid>
            <description><![CDATA[A 3D animated visualization of an LLM with a walkthrough.]]></description>
            <content:encoded><![CDATA[LLM VisualizationHome]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A PM's Guide to AI Agent Architecture]]></title>
            <link>https://www.productcurious.com/p/a-pms-guide-to-ai-agent-architecture</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45129237</guid>
            <description><![CDATA[A complete guide to agent architecture, orchestration patterns, trust strategies, and adoption plans for PMs building AI agents.]]></description>
            <content:encoded><![CDATA[Last week, I was talking to a PM who'd in the recent months shipped their AI agent. The metrics looked great: 89% accuracy, sub-second respond times, positive user feedback in surveys. But users were abandoning the agent after their first real problem, like a user with both a billing dispute and a locked account."Our agent could handle routine requests perfectly, but when faced with complex issues, users would try once, get frustrated, and immediately ask for a human."This pattern is observed across every product team that focuses on making their agents "smarter" when the real challenge is making architectural decisions that shape how users experience and begin to trust the agent. In this post, I'm going to walk you through the different layers of AI agent architecture. How your product decisions determine whether users trust your agent or abandon it. By the end of this, you'll understand why some agents feel "magical" while others feel "frustrating" and more importantly, how PMs should architect for the magical experience.We'll use a concrete customer support agent example throughout, so you can see exactly how each architectural choice plays out in practice. We’ll also see why the counterintuitive approach to trust (hint: it's not about being right more often) actually works better for user adoption.You're the PM building an agent that helps users with account issues - password resets, billing questions, plan changes. Seems straightforward, right?But when a user says "I can't access my account and my subscription seems wrong" what should happen?Scenario A: Your agent immediately starts checking systems. It looks up the account, identifies that the password was reset yesterday but the email never arrived, discovers a billing issue that downgraded the plan, explains exactly what happened, and offers to fix both issues with one click.Scenario B: Your agent asks clarifying questions. "When did you last successfully log in? What error message do you see? Can you tell me more about the subscription issue?" After gathering info, it says "Let me escalate you to a human who can check your account and billing."Same user request. Same underlying systems. Completely different products.Think of agent architecture like a stack where each layer represents a product decision you have to make.The Decision: How much should your agent remember, and for how long?This isn't just technical storage - it's about creating the illusion of understanding. Your agent's memory determines whether it feels like talking to a robot or a knowledgeable colleague.For our support agent: Do you store just the current conversation, or the customer's entire support history? Their product usage patterns? Previous complaints? Types of memory to consider:Session memory: Current conversation ("You mentioned billing issues earlier...")Customer memory: Past interactions across sessions ("Last month you had a similar issue with...")Behavioral memory: Usage patterns ("I notice you typically use our mobile app...")Contextual memory: Current account state, active subscriptions, recent activityThe more your agent remembers, the more it can anticipate needs rather than just react to questions. Each layer of memory makes responses more intelligent but increases complexity and cost.The Decision: Which systems should your agent connect to, and what level of access should it have?The deeper your agent connects to user workflows and existing systems, the harder it becomes for users to switch. This layer determines whether you're a tool or a platform.For our support agent: Should it integrate with just your Stripe’s billing system, or also your Salesforce CRM, ZenDesk ticketing system , user database, and audit logs? Each integration makes the agent more useful but also creates more potential failure points - think API rate limits, authentication challenges, and system downtime.Here's what's interesting - Most of us get stuck trying to integrate with everything at once. But the most successful agents started with just 2-3 key integrations and added more based on what users actually asked for.The Decision: Which specific capabilities should your agent have, and how deep should they go?Your skills layer is where you win or lose against competitors. It's not about having the most features - it's about having the right capabilities that create user dependency.For our support agent: Should it only read account information, or should it also modify billing, reset passwords, and change plan settings? Each additional skill increases user value but also increases complexity and risk.Implementation note: Tools like MCP (Model Context Protocol) are making it much easier to build and share skills across different agents, rather than rebuilding capabilities from scratch. The Decision: How do you measure success and communicate agent limitations to users?This layer determines whether users develop confidence in your agent or abandon it after the first mistake. It's not just about being accurate - it's about being trustworthy.For our support agent: Do you show confidence scores ("I'm 85% confident this will fix your issue")? Do you explain your reasoning ("I checked three systems and found...")? Do you always confirm before taking actions ("Should I reset your password now?")? Each choice affects how users perceive reliability.Trust strategies to consider:Confidence indicators: "I'm confident about your account status, but let me double-check the billing details"Reasoning transparency: "I found two failed login attempts and an expired payment method"Graceful boundaries: "This looks like a complex billing issue - let me connect you with our billing specialist who has access to more tools"Confirmation patterns: When to ask permission vs. when to act and explainThe counterintuitive insight: users trust agents more when they admit uncertainty than when they confidently make mistakes.Okay, so you understand the layers. Now comes the practical question that every PM asks: "How do I actually implement this? How does the agent talk to the skills? How do skills access data? How does evaluation happen while users are waiting?"Your orchestration choice determines everything about your development experience, your debugging process, and your ability to iterate quickly.Lets walk through the main approaches, and I'll be honest about when each one works and when it becomes a nightmare.Everything happens in one agent's context. For our support agent: When the user says "I can't access my account," one agent handles it all - checking account status, identifying billing issues, explaining what happened, offering solutions. Why this works: Simple to build, easy to debug, predictable costs. You know exactly what your agent can and can't do.Why it doesn't: Can get expensive with complex requests since you're loading full context every time. Hard to optimize specific parts.Most teams start here, and honestly, many never need to move beyond it. If you're debating between this and something more complex, start here.You have a router that figures out what the user needs, then hands off to specialized skills.For our support agent: Router realizes this is an account access issue and routes to the `LoginSkill`. If the LoginSkill discovers it's actually a billing problem, it hands off to `BillingSkill`.Real example flow:User: "I can't log in"Router → LoginSkillLoginSkill checks: Account exists ✓, Password correct ✗, Billing status... wait, subscription expiredLoginSkill → BillingSkill: "Handle expired subscription for user123"BillingSkill handles renewal processWhy this works: More efficient - you can use cheaper models for simple skills, expensive models for complex reasoning. Each skill can be optimized independently.Why it doesn't: Coordination between skills gets tricky fast. Who decides when to hand off? How do skills share context?Here's where MCP really helps - it standardizes how skills expose their capabilities, so your router knows what each skill can do without manually maintaining that mapping.You predefine step-by-step processes for common scenarios. Think LangGraph, CrewAI, AutoGen, N8N, etc.For our support agent: "Account access problem" triggers a workflow:Check account statusIf locked, check failed login attempts  If too many failures, check billing statusIf billing issue, route to payment recoveryIf not billing, route to password resetWhy this works: Everything is predictable and auditable. Perfect for compliance-heavy industries. Easy to optimize each step.Why it doesn't: When users have weird edge cases that don't fit your predefined workflows, you're stuck. Feels rigid to users.Multiple specialized agents work together using A2A (agent-to-agent) protocols. The vision: Your agent discovers that another company's agent can help with issues, automatically establishes a secure connection, and collaborates to solve the customer's problem. Think a booking.com agent interacting with an American Airlines agent! For our support agent: `AuthenticationAgent` handles login issues, `BillingAgent` handles payment problems, `CommunicationAgent` manages user interaction. They coordinate through standardized protocols to solve complex problems.Reality check: This sounds amazing but introduces complexity around security, billing, trust, and reliability that most companies aren't ready for. We're still figuring out the standards.This can produce amazing results for sophisticated scenarios, but debugging multi-agent conversations is genuinely hard. When something goes wrong, figuring out which agent made the mistake and why is like detective work.Here's the thing: start simple. Single-agent architecture handles way more use cases than you think. Add complexity only when you hit real limitations, not imaginary ones.But here's what's interesting - even with the perfect architecture, your agent can still fail if users don't trust it. That brings us to the most counterintuitive lesson about building agents.Here's something counterintuitive: Users don't trust agents that are right all the time. They trust agents that are honest about when they might be wrong.Think about it from the user's perspective. Your support agent confidently says "I've reset your password and updated your billing address." User thinks "great!" Then they try to log in and... it doesn't work. Now they don't just have a technical problem - they have a trust problem.Compare that to an agent that says "I think I found the issue with your account. I'm 80% confident this will fix it. I'm going to reset your password and update your billing address. If this doesn't work, I'll immediately escalate to a human who can dive deeper."Same technical capability. Completely different user experience.Building trusted agents requires focus on three things:Confidence calibration: When your agent says it's 60% confident, it should be right about 60% of the time. Not 90%, not 30%. Actual 60%.Reasoning transparency: Users want to see the agent's work. "I checked your account status (active), billing history (payment failed yesterday), and login attempts (locked after 3 failed attempts). The issue seems to be..."Graceful escalation: When your agent hits its limits, how does it hand off? A smooth transition to a human with full context is much better than "I can't help with that."A lot of times we obsess over making agents more accurate, when what users actually want was more transparency about the agent's limitations.In Part 2, I'll dive deeper into the autonomy decisions that keep most PMs up at night. How much independence should you give your agent? When should it ask for permission vs forgiveness? How do you balance automation with user control?We'll also walk through the governance concerns that actually matter in practice - not just theoretical security issues, but the real implementation challenges that can make or break your launch timeline.No posts]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Age Simulation Suit]]></title>
            <link>https://www.age-simulation-suit.com/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45129190</guid>
            <description><![CDATA[The GERontologic Test suit GERT creates the experience old age. GERT is the age simulation suit for universities, seminaries, institutes and companies.]]></description>
            <content:encoded><![CDATA[



GERonTologic simulator GERT
The age simulation suit GERT offers the opportunity to experience the impairments of older persons even for younger people.

The age-related impairments are:
■  opacity of the eye lens
■  narrowing of the visual field
■  high-frequency hearing loss
■  head mobility restrictions
■  joint stiffness
■  loss of strength
■  reduced grip ability
■  reduced coordination skills
GERT for only  � 1390,‑ / � 1250,-
complete as pictured, plus shipping and VAT if applicable
New: now with 2 pairs of glasses instead of the model shown






Due to the significant increase in the time and effort required to process orders, in particular as a result of incomplete or incorrect information provided with orders, and the fact that we increasingly have to send reminders for invoices for smaller amounts, we can only accept orders with a value of at least 300 euros or pounds.

Customer reviews:
The quality is great and it works how it is supposed to. I�m happy with my purchase.
Great way to teach about elderly behavior. I�ve been using this suit for a while now and it�s very durable and easy to use. Thanks!!














For many years ourage simulation suitGERT has been byfar the most popularproduct worldwide.The EuropeanCompetence Centrefor Accessibility hascertified our agesimulation suit GERT.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Stripe Launches L1 Blockchain: Tempo]]></title>
            <link>https://tempo.xyz</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45129085</guid>
            <description><![CDATA[A neutral, permissionless blockchain optimized for payment processing, enabling efficient transactions with predictable low fees and stablecoin interoperability.]]></description>
            <content:encoded><![CDATA[Why create anew blockchain?Stablecoins enable instant, borderless, programmable transactions, but current blockchain infrastructure isn’t designed for them: existing systems are either fully general or trading-focused. Tempo is a blockchain designed and built for real-world payments.Optimized forreal-world flowsTempo was started by Stripe and Paradigm, with design input from Anthropic, Coupang, Deutsche Bank, DoorDash, Lead Bank, Mercury, Nubank, OpenAI, Revolut, Shopify, Standard Chartered, Visa, and more.If you’re a company with large, real-world economic flows and would like to help shape the future of Tempo, get in touch.Partner with usTransform how your business  moves money01 :: Purpose-built payments capabilitiesOptimize your financial flows with embedded payment features, including memo fields and batch transfers.02 :: Speed and reliabilityProcess over 100,000 transactions per second (TPS) with sub-second finality, enabling real-time payments at a global scale.03 :: Predictable low feesTransform your cost structure with near-zero transaction fees that are highly predictable and can be paid in any stablecoin.04 :: Built-in privacy measuresProtect your users by keeping important transaction details private while maintaining compliance standards.Performant and scalable for any payments use case01 :: RemittancesSend money across borders instantly, securely, and at a fraction of traditional costs.02 :: Global payoutsPay anyone, anywhere, in any currency—without banking delays or fees.03 :: Embedded financeBuild compliant, programmable payments—in any stablecoin—directly into your products.04 :: MicrotransactionsEnable sub-cent payments for digital goods and on-demand services.05 :: Agentic commerceFacilitate low-cost, instant payments for agents to autonomously execute transactions.06 :: Tokenized depositsMove customer funds onchain for instant settlement and efficient interbank transfers.Technicalfeatures01 :: Fee flexibilityPay transaction fees in any stablecoin.02 :: Dedicated payments laneTransfer funds cheaply and reliably in blockspace that’s isolated from other activity.03 :: Stablecoin interoperabilitySwap stablecoins, including custom-issued ones, natively with low fees.04 :: Batch transfersSend multiple transactions onchain at once with native account abstraction.05 :: Blocklists / allowlistsMeet compliance standards by setting user-level permissions for transactions.06 :: Memo fieldsSpeed up reconciliation with offchain transactions by adding context that’s compatible with ISO 20022 standards.Frequentlyasked questions01 :: How is Tempo different from other blockchains?Tempo is an EVM-compatible L1 blockchain, purpose-built for payments. It doesn’t displace other general-purpose blockchains; rather, it incorporates design choices that meet the needs of high-volume payment use cases. These include predictable low fees in a dedicated payments lane, stablecoin neutrality, a built-in stablecoin exchange, high throughput, low latency, private transactions, payment memos compatible with standards like ISO 20022, compliance hooks, and more.02 :: Who can build on Tempo?Tempo is a neutral, permissionless blockchain open for anyone to build on. We’re currently collaborating with global partners to test various use cases, including cross-border payouts, B2B payments, remittances, and ecommerce. Interested in working with Tempo? Request access to our private testnet here.03 :: When will Tempo launch?We’re providing select partners with priority access to our testnet now. Contact us here if you’re interested.04 :: Who will run validator nodes?A diverse group of independent entities, including some of Tempo’s design partners, will run validator nodes initially before we transition to a permissionless model.]]></content:encoded>
        </item>
    </channel>
</rss>