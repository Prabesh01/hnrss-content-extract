<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Tue, 09 Sep 2025 20:32:58 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Classic Mac OS System 1 Patterns]]></title>
            <link>https://paulsmith.github.io/classic-mac-patterns/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45187778</guid>
            <description><![CDATA[8×8-pixel B&W patterns from Macintosh System 1 Control Panel and
          MacPaint]]></description>
            <content:encoded><![CDATA[
      
        
        
          8×8-pixel B&W patterns from Macintosh System 1 Control Panel and
          MacPaint
        
        
          
        

        
          Read
          the blog post
        
      

      
        
          Pattern Library
          
            Loading patterns …
          
          
              
                Click on a pattern to preview it on the 512×342 display
              
              
            
        

        
          Display Preview
          Tap/click for wallpapers
          
              
              512×342
            

          
            Downloads
            All 38 patterns in a format and resolution of your choice
            
          
        
      

      
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AI Darwin Awards 2025]]></title>
            <link>https://aidarwinawards.org/index.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45187765</guid>
            <description><![CDATA[Honouring those who use artificial intelligence in spectacularly reckless ways. Submit nominations for the most catastrophically ill-advised AI deployments of 2025.]]></description>
            <content:encoded><![CDATA[
        
            
                Days Since Last Verified AI catastrophe:
                ---
            
            
            What Are the AI Darwin Awards?
            
                Named after Charles Darwin's theory of natural selection, the original Darwin Awards celebrated those who "improved the gene pool by removing themselves from it" through spectacularly stupid acts. Well, guess what? Humans have evolved! We're now so advanced that we've outsourced our poor decision-making to machines.
            
            
                The AI Darwin Awards proudly continue this noble tradition by honouring the visionaries who looked at artificial intelligence—a technology capable of reshaping civilisation—and thought, "You know what this needs? Less safety testing and more venture capital!" These brave pioneers remind us that natural selection isn't just for biology anymore; it's gone digital, and it's coming for our entire species.
            
            
                Because why stop at individual acts of spectacular stupidity when you can scale them to global proportions with machine learning?
            
            
        
        
            Nomination Criteria
            Your nominee must demonstrate a breathtaking commitment to ignoring obvious risks:
            
                AI Involvement Required: Must involve cutting-edge artificial intelligence (or what they confidently called "AI" in their investor pitch deck).
                Catastrophic Potential: The decision must be so magnificently short-sighted that future historians will use it as a cautionary tale (assuming there are any historians left).
                Hubris Bonus Points: Extra credit for statements like "What's the worst that could happen?" or "The AI knows what it's doing!"
                Ethical Blind Spots: Demonstrated ability to completely ignore every red flag raised by ethicists, safety researchers, and that one intern who keeps asking uncomfortable questions.
                Scale of Ambition: Why endanger just yourself when you can endanger everyone? We particularly appreciate nominees who aimed for global impact on their first try.
            
        
        
            Winning Criteria
            Our distinguished panel of judges (and the occasional rogue AI) evaluates nominees based on:
            
                Measurable Impact: Bonus points if your AI mishap made international headlines, crashed markets, or required new legislation named after you.
                Creative Destruction: We appreciate innovative approaches to endangering humanity. Cookie-cutter robot uprisings need not apply.
                Viral Stupidity: Did your AI blunder become a meme? Did it spawn a thousand think pieces? Did it make AI safety researchers weep openly?
                Unintended Consequences: The best nominees never saw it coming. "But the AI was supposed to help!" is music to our ears.
                Doubling Down: Extra recognition for those who, when confronted with evidence of their mistake, decided to deploy even more AI to fix it.
            
            Winners are selected through a democratic process involving public voting, expert panels, and occasionally by the AI systems themselves (because what could possibly go wrong with letting artificial intelligence judge human stupidity?).
        
        
            2025 Nominees
            
                Meet this year's contenders for the AI Darwin Awards—visionaries whose bold decisions have set new standards in artificial intelligence misadventure. Curious to see the full list and their stories?
                View the 2025 Nominees.
            
        
        
            Questions? We Have Answers!
            
                Wondering how we verify our stories? Curious about nomination criteria? Need to know if you can nominate your CEO's latest "AI-powered innovation"? 
                Check out our FAQ for answers to all your burning questions about the AI Darwin Awards.
            
        
        
            Get Involved
            
                Know someone who treated AI safety guidelines like suggestions? Witnessed a tech executive confidently explain why their new AI doesn't need testing? Seen a startup pitch that made you question humanity's survival instincts? We want to hear about it!
            
            
                Help us celebrate the pioneers who boldly went where no responsible person should go. Whether you've witnessed corporate AI overconfidence or experienced the delightful chaos of untested deployment, your nominations help build tomorrow's cautionary tales.
            
            
            
                Join our mission to document AI misadventure for educational purposes. Remember: today's catastrophically bad AI decision could well be tomorrow's AI Darwin Award winner!
            
            Disclaimer: By submitting a nomination, you acknowledge that the future of human civilisation may depend on people learning from these examples. No pressure.
        
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Polylaminin, promotes regeneration after spinal cord injury]]></title>
            <link>https://www.researchgate.net/publication/45275074_Polylaminin_a_polymeric_form_of_laminin_promotes_regeneration_after_spinal_cord_injury</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45187449</guid>
        </item>
        <item>
            <title><![CDATA[Show HN: Superagents – connect spreadsheets to any database, API or MCP server]]></title>
            <link>https://sourcetable.com/superagents</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45186904</guid>
            <description><![CDATA[Superagents help you analyze data with AI & natural language.]]></description>
            <content:encoded><![CDATA[
    
        
            
                Superagents
                
                    
                            
            
                Talk to any application, database or MCP server on the Internet.
                Analyze and orchestrate data from inside your spreadsheet.
            

            
        
        
    
    
        “God mode for the Internet
        ”
    
    
        
            Superagents plan and execute multi-system actions.
            
                Add your API keys, MCP or DB credentials and Sourcetable will do the rest.
            

            
        
        
            



    
            
            
                
                    Tool Library
                    Hundreds of core tools and Agents Sourcetable’s AI can leverage. Just ask for what you want. And let the magic happen.
                    
                        Explore Tools
                    
                
                
                
            
            
                
                    Premium Connectors
                    Built right into the core connectors, fully supported databases and selected third party apps.
                    
                        Explore Connectors
                    
                
                
                
            
            
                
                    Beta
                
                
                    Writeback 
                    Orchestrate the internet from your spreadsheet. Superagents can also write into your data connectors. 
                    
                        Request Access
                    
                
                
                
            
        
    
            
            
                Private User Keys
            
            
                Encrypted at REST
            
            
                Escrow KMS
            
        

    
    
    
            Your job, just way easier
            Sourcetable is a tool that helps you get the most out of your data. It's like having a personal assistant that can help you with your data needs.
          
    
    
    
    
    
        “I spent 4 days writing python code to analyze crypto data and visualize it. Sourcetable did it in 5 minutes.”
        
    

    
        
            Frequently Asked Questions
            If you question is not covered here, you can contact our team.
            Contact Us
        
        
            
                
                    
                        
    
        
    
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                        How do I analyze data?
                    
                    
                        To analyze spreadsheet data, just upload a file and start asking questions. Sourcetable's AI can answer questions and do work for you. You can also take manual control, leveraging all the formulas and features you expect from Excel, Google Sheets or Python.
                    
                
            
            
                
                    
                        
    
        
    
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                        What data sources are supported?
                    
                    
                        We currently support a variety of data file formats including spreadsheets (.xls, .xlsx, .csv), tabular data (.tsv), JSON, and database data (MySQL, PostgreSQL, MongoDB). We also support application data and most plain text data.
                    
                
            
            
                
                    
                        
    
        
    
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                        What data science tools are available?
                    
                    
                        Sourcetable's AI analyzes and cleans data without you having to write code. Use Python, SQL, NumPy, Pandas, SciPy, Scikit-learn, StatsModels, Matplotlib, Plotly, and Seaborn.
                    
                
            
            
                
                    
                        
    
        
    
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                        Can I analyze spreadsheets with multiple tabs?
                    
                    
                        Yes! Sourcetable's AI makes intelligent decisions on what spreadsheet data is being referred to in the chat. This is helpful for tasks like cross-tab VLOOKUPs. If you prefer more control, you can also refer to specific tabs by name.
                    
                
            
            
                
                    
                        
    
        
    
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                        Can I generate data visualizations?
                    
                    
                        Yes! It's very easy to generate clean-looking data visualizations using Sourcetable. Simply prompt the AI to create a chart or graph. All visualizations are downloadable and can be exported as interactive embeds.
                    
                
            
            
                
                    
                        
    
        
    
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                        What is the maximum file size?
                    
                    
                        Sourcetable supports files up to 10GB in size. Larger file limits are available upon request. For best AI performance on large datasets, make use of pivots and summaries.
                    
                
            
            
                
                    
                        
    
        
    
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                        Is this free?
                    
                    
                        Yes! Sourcetable's spreadsheet is free to use, just like Google Sheets. AI features have usage limits. Users can upgrade to the Pro plan for more credits.
                    
                
            
            
                
                    
                        
    
        
    
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                        Is there a discount for students, professors, or teachers?
                    
                    
                        Students and faculty receive a 50% discount on the Pro and Max plans. Email support@sourcetable.com to get your discount.
                    
                
            
            
                
                    
                        
    
        
    
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                        Is Sourcetable programmable?
                    
                    
                        Yes. Regular spreadsheet users have full A1 formula-style referencing at their disposal. Advanced users can make use of Sourcetable's SQL editor and GUI, or ask our AI to write Python code for you.
                    
                
            
        
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Microserfs ordered back to the office, given 10 days to appeal]]></title>
            <link>https://www.theregister.com/2025/09/09/microsoft_return_to_work/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45186802</guid>
            <description><![CDATA[: If you're within 50 miles of Redmond, then it's time to come in]]></description>
            <content:encoded><![CDATA[
Microsoft is rolling out a new return-to-office policy that will see first Redmond, then US, and then global staff getting back on-prem at least three days a week.
"How we work has forever changed," Microsoft's Chief People Officer Amy Coleman told staff in a blog post. And that change will start in Redmond by the end of February. If you work within a 50-mile radius of the office, Microsoft has already emailed you if it expects your attendance, she said.
The changes will spread across the rest of America and then internationally on an unspecified timescale. We've asked for clarification and will update this article if it comes in.

    

Coleman's note looked to get ahead of possible criticisms that mandatory RTO policies serve as a backdoor way to reduce headcount, as employees who'd moved far away from offices to take advantage of companies' remote work policies may find it difficult or unpalatable to uproot again.

        


        

"Importantly, this update is not about reducing headcount," she wrote. "It’s about working together in a way that enables us to meet our customers’ needs."
If Microsofties want an exemption from the new rules, they must file a request by September 19, Coleman said. She told staff to ask their EVPs or "organizational leadership" how this would work in practice and what conditions they would require.


Empire of office workers strikes back against RTO mandates

Dell ends hybrid work policy, demands return-to-office despite remote work pledge

Vodafone: Be in the office 8 days a month or lose bonuses

SCC, one of Europe's largest resellers, orders staff back to their desks for three days a week

Seattle-area workers are still getting a good deal compared to the peons at Amazon. They've been under a five-day office regime since this year and some staff are peeved at the change.
Just three years ago, Microsoft was touting research about how working from home was just fine. Recent evidence also shows RTO mandates can discourage staff. But that was then and this is now, and most of the big tech firms are now requiring a three-office-day week at least.

        

Intel's already on a three-day in policy, rising to four as the struggling chip biz tries to correct decades of failures. IBM is cracking the whip on not only hours in, but also forcing staff to move location to be closer to the office for three-days of office work. Dell, Google, Meta, and others are also enforcing the three-office-day week.
Irony of ironies, Zoom has also enforced a similar 50-mile commuting mandate to Microsoft. Talk about not eating your own dogfood! ®                                


                    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Dying Dream of a Decentralized Web]]></title>
            <link>https://spectrum.ieee.org/web3-hardware-security</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45186726</guid>
            <description><![CDATA[Web3's evolution: From privacy dreams to blockchain's financial reality. How does cryptography fit in?]]></description>
            <content:encoded><![CDATA[The term Web3 was originally coined by Etherium cofounder Gavin Wood as a secure, decentralized, peer-to-peer version of the Internet. The idea was to build an Internet based on blockchain technology and a peer-to-peer network, without the need for large data centers or third-party providers. These days, however, blockchain is most famous as the tool enabling cryptocurrencies. Most recently, the Trump administration has taken on a pro-cryptocurrency stance, boosting blockchain’s popularity and media prominence.Cryptography is central to the functioning of blockchains, whether for a decentralized Web or for cryptocurrencies. Every time a cryptocurrency transaction is initiated, all parties involved in the transaction need to securely prove that they agree to the transfer. This is done via a digital signature: a cryptographic protocol that generates a secret, private key that is unique to each user and a public key that the user shares. Then, the private key is used to generate a unique signature for each transaction. The public key can be used to verify that, indeed, the signature was created by the holder of the private key. In this way, Web3 in every incarnation relies heavily on cryptography. To learn more about the evolution of Web3, and cryptography’s role, we caught up with Riad Wahby, assistant professor of electrical and computer engineering at Carnegie Mellon University, in Pittsburgh, and a cofounder and CEO of hardware-backed Web3 security platform Cubist. Wahby explained what Web3 was meant to be, what it’s become, and how hardware-backed cryptography will enable its future.Web3 Began as a Response to What Came BeforeIEEE Spectrum: What is Web3?Riad Wahby: That’s the hardest question that you’re going to ask by far, because I don’t know how to answer it in a way that satisfies everyone.The term Web3 was coined around 2014, by people who looked at the way that the Web had developed. Web 1.0 was the first Web bubble, the dot-com bubble. Web 2.0, roughly speaking, is Google and Facebook and Microsoft and Apple and Netflix, and the like. And the perception, especially from folks who originally coined this term Web3, was that these companies had basically taken the Web in the wrong direction, because your privacy is gone, and you’re the product, so to speak. You use Gmail for free because Google is mining your emails to sell things like better advertising. Web3 was originally a reaction to this. Early proponents of Web3 basically said, “We don’t want that. We want to take back control of our stuff. I want to own my own data, and maybe cryptocurrencies and blockchains are the way there.” So that’s where the term originally came from.What does the term mean now?Wahby: Now it doesn’t mean anything like that at all. Now Web3 is the broader ecosystem around cryptocurrencies and blockchain-based technologies. And I think basically all of that revolutionary spirit has gone away in favor of building financial products and making a lot of money doing it. As far as I can tell, the term has really transformed from a reaction to a lack of privacy and a lack of sovereignty in my own data to “Hey, this is a technology that has something to do with blockchains.” Maybe you can buy some kind of speculative meme coin and make a bunch of money doing it. So I don’t know, maybe that took a dark turn at the end. That’s how things go.How are those two definitions connected?Wahby: Cryptography really fits into the revolutionary spirit, in the sense that the folks who want to cast off the chains of things like Google and Facebook, one of the tenets was—”The way that we’ll do that is we’ll build this technology that’s sort of amazing and that gives us all these great properties.” And they were going to do that using some advanced cryptographic technologies. This is the reason that there’s so many people who are cryptography researchers at universities that also are involved deeply in some kind of cryptocurrency. Because it’s like this is a sea change in the way that cryptography gets used in the world.Twenty years ago, it used to be that if you were working on really any kind of cryptography, regardless of how theoretical or how practical you intended it to be, you knew that there was not much of a chance that any of it was going to get really used in the world, unless it was extremely practical and extremely focused on solving some immediate problem. And it just used to be the case that people were extremely conservative about what kind of cryptography they used. Basically, everyone thought, “We don’t need any of this crazy stuff. That’s all theory. Nobody cares. The only stuff we need is what lets you connect to Amazon and safely buy stuff.” The rise of cryptocurrencies brought with it this whole shift in the way that cryptography gets deployed in the world, where now if you can come up with some interesting functionality that’s enabled by some advanced cryptography, probably somewhere somebody is going to try and turn that into a product that they can sell.Web3 Is Both Good and Bad for CryptographyWhat effect has this had on the cryptographic community?Wahby: It’s both good and bad. It’s good in that this means that there’s a lot of motivation to build interesting, cool stuff. And as a researcher in cryptography, I love it because it means that there’s tons more research money being poured into cryptography.That’s the good side. The bad side is that the reason that people were so conservative about deploying new cryptography is that it’s easy to get the security mechanism wrong. The default state of cryptography is [to assume everything is] broken. You have to be very, very careful that each change that you make isn’t returning your cryptography to the default state. I’m not saying that people in Web3 aren’t careful. They are. It’s just by the nature of things, since it’s a much faster time frame, there’s much more pressure to just push stuff into production. And I think the downside is that we have seen a little bit of brokenness. It’s hopefully not causing people to lose oodles of money. And I think the historical record bears this out: People lose oodles of money because other people are really dishonest, not because the cryptography is broken for the most part. But the cryptography can also be broken, and that can also be worrisome. But I’d say from the perspective of somebody who’s doing research in cryptography, the impact of Web3 on the cryptographic community has generally been a good thing.Now you’re focused on hardware security. Can you explain what that is?Wahby: Any cryptocurrency has this property that if I hold some token, and I want to send it to somebody else, the way that I do that is by producing a digital signature that says, I want to spend this token. The secret key is what lets you generate a signature. So if you have 10 ETH [cryptocurrency coins], and they’re all protected by this key, and somebody takes a copy of your key, then life is bad.With a digital signature key it could just be sitting on your hard drive, and then you get some malware, and now somebody has silently stolen your key. There have been these big, broadly targeted malware campaigns where millions and millions of people have all had their keys stolen. So now the criminals are just like sitting there counting up all the money that they’ve stolen, and there’s no reversing transactions, unlike at a bank.Here’s where hardware comes in. This is not really a Web3 technology, this is kind of old, good stuff. There are these devices called hardware security modules, and they’ve been used for multiple decades. This is a physical device, and this device can run certain cryptographic algorithms. And it knows enough that when you tell it, “Hey, please generate me a key,” it can generate you a key securely. And when you tell it, “Please give me a signature,” it can give you a signature securely. But the important thing is the way that it’s designed, the key never leaves this piece of hardware. It turns what was a piece of data into a physical object. And we know how to secure a physical object.You’re working on extending hardware security for more use cases. Can you explain what you’re doing?Wahby: There are two issues with the standard hardware security module.No. 1, you need more cryptography support, so you need to be able to apply digital signatures to transactions very quickly if you’re actively trading. And No. 2, you need a way of expressing that it’s not just a key that can generate any signature. It’s a key that also has attached to it some kind of policy that says these are the kinds of signatures that are okay to generate, and everything else is not allowed, to add extra security. These are the two directions that we have that our technology enables within traditional hardware security modules.We start with the security that’s provided by the traditional hardware security module, and we extend it using this, actually another piece of trusted hardware called the Trusted Execution Environment. We extend it to support the actual kinds of cryptography that are needed for Web3 and to support this rich programmable policy layer that lets you say, “This key is only intended for this specific kind of use,” or “anytime somebody tries to make a payment from this key, first I have to check whether the recipient is subject to sanctions,” or any other rule. So in the end, we have, not only a hardware security module, we have also this Trusted Execution Environment and this policy layer, and all this other cryptographic stuff that together gives us a hardware security module that’s really designed for the Web3 use case.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Memory Integrity Enforcement]]></title>
            <link>https://security.apple.com/blog/memory-integrity-enforcement/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45186265</guid>
            <description><![CDATA[Memory Integrity Enforcement (MIE) is the culmination of an unprecedented design and engineering effort spanning half a decade that combines the unique strengths of Apple silicon hardware with our advanced operating system security to provide industry-first, always-on memory safety protection across our devices — without compromising our best-in-class device performance. We believe Memory Integrity Enforcement represents the most significant upgrade to memory safety in the history of consumer operating systems.]]></description>
            <content:encoded><![CDATA[Memory Integrity Enforcement (MIE) is the culmination of an unprecedented design and engineering effort, spanning half a decade, that combines the unique strengths of Apple silicon hardware with our advanced operating system security to provide industry-first, always-on memory safety protection across our devices — without compromising our best-in-class device performance. We believe Memory Integrity Enforcement represents the most significant upgrade to memory safety in the history of consumer operating systems.

There has never been a successful, widespread malware attack against iPhone. The only system-level iOS attacks we observe in the wild come from mercenary spyware, which is vastly more complex than regular cybercriminal activity and consumer malware. Mercenary spyware is historically associated with state actors and uses exploit chains that cost millions of dollars to target a very small number of specific individuals and their devices. Although the vast majority of users will never be targeted in this way, these exploit chains demonstrate some of the most expensive, complex, and advanced attacker capabilities at any given time and are uniquely deserving of study as we work to protect iPhone users against even the most sophisticated threats. Known mercenary spyware chains used against iOS share a common denominator with those targeting Windows and Android: they exploit memory safety vulnerabilities, which are interchangeable, powerful, and exist throughout the industry.
For Apple, improving memory safety is a broad effort that includes developing with safe languages and deploying mitigations at scale. (For a primer on how we think about memory safety, see the opening of this post.) We created Swift, an easy-to-use, memory-safe language, which we employ for new code and targeted component rewrites. In iOS 15, we introduced kalloc_type, a secure memory allocator for the kernel, followed in iOS 17 by its user-level counterpart, xzone malloc. These secure allocators take advantage of knowing the type — or purpose — of allocations so that memory can be organized in a way that makes exploiting most memory corruption vulnerabilities inherently difficult.
In 2018, we were the first in the industry to deploy Pointer Authentication Codes (PAC) in the A12 Bionic chip, to protect code flow integrity in the presence of memory corruption. The strong success of this defensive mechanism in increasing exploitation complexity left no doubt that the deep integration of software and hardware security would be key to addressing some of our greatest security challenges. With PAC behind us, we immediately began design and evaluation work to find the most effective way to build sophisticated memory safety capabilities right into Apple silicon.
Arm published the Memory Tagging Extension (MTE) specification in 2019 as a tool for hardware to help find memory corruption bugs. MTE is, at its core, a memory tagging and tag-checking system, where every memory allocation is tagged with a secret; the hardware guarantees that later requests to access memory are granted only if the request contains the correct secret. If the secrets don’t match, the app crashes, and the event is logged. This allows developers to identify memory corruption bugs immediately as they occur.
We conducted a deep evaluation and research process to determine whether MTE, as designed, would meet our goals for hardware-assisted memory safety. Our analysis found that, when employed as a real-time defensive measure, the original Arm MTE release exhibited weaknesses that were unacceptable to us, and we worked with Arm to address these shortcomings in the new Enhanced Memory Tagging Extension (EMTE) specification, released in 2022. More importantly, our analysis showed that while EMTE had great potential as specified, a rigorous implementation with deep hardware and operating system support could be a breakthrough that produces an extraordinary new security mechanism.
Consider that MTE can be configured to report memory corruption either synchronously or asynchronously. In the latter mode, memory corruption doesn’t immediately raise an exception, leaving a race window open for attackers. We would not implement such a mechanism. We believe memory safety protections need to be strictly synchronous, on by default, and working continuously. But supporting always-on, synchronous MTE across key attack surfaces while preserving a great, high-performance user experience is extremely demanding for hardware to support.
In addition, for MTE to provide memory safety in an adversarial context, we would need to finely tune the operating system to defend the new semantics and the confidentiality of memory tags on which MTE relies. Ultimately, we determined that to deliver truly best-in-class memory safety, we would carry out a massive engineering effort spanning all of Apple — including updates to Apple silicon, our operating systems, and our software frameworks. This effort, together with our highly successful secure memory allocator work, would transform MTE from a helpful debugging tool into a groundbreaking new security feature.
Today we’re introducing the culmination of this effort: Memory Integrity Enforcement (MIE), our comprehensive memory safety defense for Apple platforms. Memory Integrity Enforcement is built on the robust foundation provided by our secure memory allocators, coupled with Enhanced Memory Tagging Extension (EMTE) in synchronous mode, and supported by extensive Tag Confidentiality Enforcement policies. MIE is built right into Apple hardware and software in all models of iPhone 17 and iPhone Air and offers unparalleled, always-on memory safety protection for our key attack surfaces including the kernel, while maintaining the power and performance that users expect. In addition, we’re making EMTE available to all Apple developers in Xcode as part of the new Enhanced Security feature that we released earlier this year during WWDC.
The rest of this post dives into the intensive engineering effort required to design and validate Memory Integrity Enforcement.
Designing Memory Integrity Enforcement
Memory Integrity Enforcement starts with our secure memory allocators — kalloc_type, xzone malloc, and WebKit’s libpas — all of which use type information to decide how to organize memory allocations. With both use-after-free and out-of-bounds bugs, an attacker’s goal is to create overlapping interpretations of memory, which they achieve by controlling the precise position of certain allocations — of a specific type — that is advantageous to them. The type-aware placement policies of our secure memory allocators help thwart these memory corruption techniques, as we described in our kalloc_type post. Our secure allocators set a new high-water mark of software protection against memory corruption, while preserving the same or better performance as the allocators they replaced.
Allocators can apply protections only at the granularity of memory pages — 16KB on iOS — which is a natural fit for multi-page allocations. For smaller allocations, our secure allocators can use page-level protections to help prevent memory corruption attacks across different type buckets. However, page-level protections are too coarse to defend against attacks within the same type bucket, and we use memory tagging to close this gap.
Let’s look at how EMTE can be used to protect against two of the most common types of memory corruption: buffer overflows and use-after-free vulnerabilities. For buffer overflows, the allocator is responsible for using different tags for neighboring allocations. If a request to access memory spills over to adjacent memory that has a different tag, the hardware blocks it, and the operating system can take action and terminate the process. We represent this visually below with three adjacent allocations, tagged with three different secrets: ⏺️, 🔼, and ⏹️. Two access attempts with the 🔼 tag are permitted to 🔼-tagged memory, but the third attempt is blocked as it spills over into the adjacent, ⏹️-tagged allocation.
 Memory Integrity Enforcement blocks buffer overflows 

The allocator is also responsible for retagging memory as it gets reused for other purposes. In the image below, the 🔼 allocation is retagged as ⏹️ after it has been freed and reallocated by the system. If a request to the retagged memory is made with the older 🔼 tag, as would be seen in use-after-free exploits, the hardware blocks it and lets the operating system take further action.
 Memory Integrity Enforcement blocks use-after-free access

A key weakness of the original MTE specification is that access to non-tagged memory, such as global variables, is not checked by the hardware. This means attackers don’t have to face as many defensive constraints when attempting to control core application configuration and state. With Enhanced MTE, we instead specify that accessing non-tagged memory from a tagged memory region requires knowing that region’s tag, making it significantly harder for attackers to turn out-of-bounds bugs in dynamic tagged memory into a way to sidestep EMTE by directly modifying non-tagged allocations.
Finally, we developed Tag Confidentiality Enforcement to protect the implementation of our secure allocators from technical threats and to guard the confidentiality of EMTE tags — including against side-channel and speculative-execution attacks.
Our typed allocators and EMTE both rely on confidentiality of kernel data structures from user applications, and of the tags chosen by the allocator. Attackers might attempt to defeat EMTE, and in turn Memory Integrity Enforcement, by revealing these secrets. To protect the kernel allocator backing store and tag storage, we use the Secure Page Table Monitor, which provides strong guarantees even in the presence of a kernel compromise. We also ensure that when the kernel accesses memory on behalf of an application, it's subject to the same tag-checking rules as userspace.
Attacks based on speculative execution can also be used to expose secrets. To improve performance, modern CPUs predict the execution of instructions that follow prior, potentially longer latency instructions. If the prediction is correct, computation is very fast. If it’s wrong, the CPU discards the prediction, and computation is slower. Unfortunately, discarded predictions have observable effects that can reveal system state and data, and because speculative attacks never cause the system to crash or misbehave in observable ways during their use, they’re particularly useful for an attacker. For example, evaluating a pointer authentication instruction speculatively exposed timing differences in our original implementation of Pointer Authentication Codes (PAC), which would allow the valid signature to be isolated. During the design phase for Memory Integrity Enforcement, we identified and addressed the three speculative vulnerabilities that could undermine tag confidentiality.
First, when EMTE is active, requests to access memory cause the hardware to check tags. It's crucial that evaluating a tag-checking instruction speculatively doesn’t expose timing differences that would allow an attacker to isolate the valid tag. From the start, we designed the Apple silicon implementation so that tag values can’t influence speculative execution in any way. Recently published security research demonstrates that the MTE implementation on Google’s Pixel devices is vulnerable to this type of attack, allowing MTE to be bypassed in Google Chrome and the Linux kernel.
Second, allocators assign random tags to memory, and attackers must not be able to predict tag values that the system will choose. We address this issue by frequently re-seeding the underlying pseudo-random generator used to select new tags.
Third, Spectre variant 1 (V1) is a speculative-execution vulnerability that allows attackers to exploit conditional branches to leak data, including MTE tag values. To date, there has been no solution to this problem in consumer operating systems, because general Spectre V1 mitigations such as Speculative Load Hardening have a prohibitive CPU cost. The presence of EMTE leaves Spectre V1 as one of the last avenues available to attackers to help guide their attacks, so we designed a completely novel mitigation that limits the effective reach of Spectre V1 leaks — at virtually zero CPU cost — and forces attackers to contend with type segregation. This mitigation makes it impractical for attackers to use Spectre V1, as they would typically need 25 or more V1 sequences to reach more than 95 percent exploitability rate — unless one of these sequences is related to the bug being exploited, following similar reasoning as our kalloc_type analysis.
Our mission with Memory Integrity Enforcement is to protect all users by default and provide an extraordinary disruption to the exploitation of memory corruption vulnerabilities. To do so, we considered a wide set of threats, including some of the most challenging ones — such as side channels — and arrived at this extensive combination of features not present in other MTE implementations. Google took a great first step last year when they offered MTE to those who opt in to their program for at-risk users. But even for users who turn it on, the effectiveness of MTE on Android is limited by the lack of deep integration with the operating system that distinguishes Memory Integrity Enforcement and its use of EMTE on Apple silicon.
For the new A19 and A19 Pro chips to support Memory Integrity Enforcement, we dedicated an extraordinary amount of Apple silicon resources to security — more than ever before — including CPU area, CPU speed, and memory for tag storage. And to fully realize this hardware investment, we designed all of the new operating system elements of MIE jointly with our hardware work, including secure allocators, EMTE, and tag confidentiality protections.
Because EMTE tag checking imposes a performance cost, we designed Memory Integrity Enforcement to take advantage of our secure allocators first and use EMTE to protect only smaller individual allocations within a type bucket, which software allocators can’t defend on their own. Then, by knowing where and how we would deploy EMTE, we could accurately model the tag-checking demand of the operating system, and design our silicon to satisfy it. Our hardware implementation influenced additional software design decisions, reducing the overhead of tag checks even further. Importantly, deploying EMTE with this level of precision supports our strategy to provide as many memory safety improvements as possible to users on previous iPhone generations, which don’t support EMTE.
For the security evaluation of Memory Integrity Enforcement, we involved our offensive research team from the very beginning. From 2020 to 2025, they continuously analyzed and attacked the system — first conceptually, with theoretical exploitation avenues, then with practical attacks in simulated environments, and eventually on new hardware prototypes. Prolonged engagement from our offensive research team allowed us to identify and eradicate entire attack strategies and techniques before attackers could ever discover them, leading to a stronger, more mature feature from the outset.
Our offensive research team identified where and how attackers are most likely to break into the system, and our deployment of Memory Integrity Enforcement is deeply guided by their findings. Notably, this includes making sure that this powerful new protection is available to third-party apps that are likely entry points for attackers — such as social networks, messaging apps, or any other app where a specific user can be targeted. Starting immediately with the launch of MIE, any developer can begin testing this powerful protection for their app, including EMTE on hardware that supports it, using the Enhanced Security settings in Xcode.
The meticulous planning and implementation of Memory Integrity Enforcement made it possible to maintain synchronous tag checking for all the demanding workloads of our platforms, delivering groundbreaking security with minimal performance impact, while remaining completely invisible to users.
Security evaluation
Memory Integrity Enforcement started with a deeply ambitious goal: to make it immensely more expensive and difficult to develop and maintain mercenary spyware attacks based on memory corruption against our platforms. While there’s no such thing as perfect security, MIE is designed to dramatically constrain attackers and their degrees of freedom during exploitation.
Throughout the design and implementation of Memory Integrity Enforcement, our offensive research team evaluated our progress by looking at sophisticated exploit chains that were previously used against our platform, recent vulnerabilities, and our own internal research. First, we worked on rebuilding and adapting previously seen exploit chains to systems protected by MIE. But it’s not sufficient to consider only previous chains that were developed before MIE existed, because attackers will surely adapt in reaction to these new protections. We therefore also evaluated a selection of more recent vulnerabilities that we expected would have the best chance of surviving MIE. For these, we meticulously enumerated all possible exploitation opportunities, similar to our evaluation of SockPuppet against kalloc_type.
Both approaches revealed the same conclusion: Memory Integrity Enforcement vastly reduces the exploitation strategies available to attackers. Though memory corruption bugs are usually interchangeable, MIE cut off so many exploit steps at a fundamental level that it was not possible to restore the chains by swapping in new bugs. Even with substantial effort, we could not rebuild any of these chains to work around MIE. The few memory corruption effects that remained are unreliable and don’t give attackers sufficient momentum to successfully exploit these bugs.
Here’s a visual representation of what this looks like for an attacker. The chart below represents six of the real-world exploit chains that we evaluated and shows the steps where Memory Integrity Enforcement — the secure allocators, EMTE, or both — stops the attack.
 Memory Integrity Enforcement vs. real-world exploit chains

Notably, attackers confront Memory Integrity Enforcement early in the exploitation process. Although some issues are able to survive MIE — for example, intra-allocation buffer overflows — such issues are extremely rare, and even fewer will lend themselves to a full end-to-end exploit. Inevitably, attackers must face MIE at a stage where their capabilities are still very limited, leaving few viable avenues for exploitation. This leads to fragile chains where breaking just one step is often enough to invalidate the entire exploit strategy. When that happens, most of the chain’s components can’t be reused, and the attackers have to restart exploit development with entirely new bugs.
Conclusion
The industry-leading security of iPhone means that the vast majority of our users never face system-level attacks on their devices. Our work on memory safety is aimed primarily at the mercenary spyware and surveillance industry, which spends many millions of dollars to exploit memory corruption vulnerabilities and target a small number of individuals because of who they are and what they do. Over the past five years, we developed a comprehensive approach to memory safety that integrates the best of our hardware and software capabilities, and today’s announcement is the culmination of this ambitious vision. With the introduction of the iPhone 17 lineup and iPhone Air, we’re excited to deliver Memory Integrity Enforcement: the industry’s first ever, comprehensive, always-on memory-safety protection covering key attack surfaces — including the kernel and over 70 userland processes — built on the Enhanced Memory Tagging Extension (EMTE) and supported by secure typed allocators and tag confidentiality protections.
Based on our evaluations pitting Memory Integrity Enforcement against exceptionally sophisticated mercenary spyware attacks from the last three years, we believe MIE will make exploit chains significantly more expensive and difficult to develop and maintain, disrupt many of the most effective exploitation techniques from the last 25 years, and completely redefine the landscape of memory safety for Apple products. Because of how dramatically it reduces an attacker’s ability to exploit memory corruption vulnerabilities on our devices, we believe Memory Integrity Enforcement represents the most significant upgrade to memory safety in the history of consumer operating systems.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Judge: Anthropic's $1.5B settlement is being shoved "down the throat of authors"]]></title>
            <link>https://arstechnica.com/tech-policy/2025/09/judge-anthropics-1-5b-settlement-is-being-shoved-down-the-throat-of-authors/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45186152</guid>
            <description><![CDATA[Feeling &ldquo;misled,&rdquo; judge refuses to rubber-stamp Anthropic&rsquo;s proposed settlement.]]></description>
            <content:encoded><![CDATA[
                      
                      
          
At a hearing Monday, US District Judge William Alsup blasted a proposed $1.5 billion settlement over Anthropic's rampant piracy of books to train AI.
The proposed settlement comes in a case where Anthropic could have owed more than $1 trillion in damages after Alsup certified a class that included up to 7 million claimants whose works were illegally downloaded by the AI company.
Instead, critics fear Anthropic will get off cheaply, striking a deal with authors suing that covers less than 500,000 works and paying a small fraction of its total valuation (currently $183 billion) to get away with the massive theft. Defector noted that the settlement doesn't even require Anthropic to admit wrongdoing, while the company continues raising billions based on models trained on authors' works. Most recently, Anthropic raised $13 billion in a funding round, making back about 10 times the proposed settlement amount after announcing the deal.
Alsup expressed grave concerns that lawyers rushed the deal, which he said now risks being shoved "down the throat of authors," Bloomberg Law reported.
In an order, Alsup clarified why he thought the proposed settlement was a chaotic mess. The judge said he was "disappointed that counsel have left important questions to be answered in the future," seeking approval for the settlement despite the Works List, the Class List, the Claim Form, and the process for notification, allocation, and dispute resolution all remaining unresolved.
Denying preliminary approval of the settlement, Alsup suggested that the agreement is "nowhere close to complete," forcing Anthropic and authors' lawyers to "recalibrate" the largest publicly reported copyright class-action settlement ever inked, Bloomberg reported.
Of particular concern, the settlement failed to outline how disbursements would be managed for works with multiple claimants, Alsup noted. Until all these details are ironed out, Alsup intends to withhold approval, the order said.
One big change the judge wants to see is the addition of instructions requiring "anyone with copyright ownership" to opt in, with the consequence that the work won't be covered if even one rights holder opts out, Bloomberg reported. There should also be instruction that any disputes over ownership or submitted claims should be settled in state court, Alsup said.

          
                      
                  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[iPhone 17 Pro and iPhone 17 Pro Max]]></title>
            <link>https://www.apple.com/iphone-17-pro/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45186044</guid>
            <description><![CDATA[iPhone 17 Pro. Exceptional performance. New Center Stage front camera. Ultimate pro camera system. Breakthrough battery life. A19 Pro chip.]]></description>
            <content:encoded><![CDATA[
		View pricing
						
							Pre-order starting at 5:00 a.m. PT on 9.12
							Available starting 9.19
						
					
		
		
		
		
			
			
					
					
						Across the iPhone 17 Pro camera system, you’ll find innovation that goes to great lengths. This includes the longest iPhone Telephoto ever, up to an equivalent 200 mm focal length, with the next generation of our tetraprism design and 56 percent larger sensor. So you can explore an even wider range of creative choices and add a longer reach to your compositions with 16x optical zoom range. And capture stunning low-light photographs and incredible video.
					
				
			
								
										8x
									
								
										4x
									
								
										2x
									
								
										1.5x
									
								
										1.2x
									
								
										1x
									
								
										.5x
									
								
							
			
				Like having 8 pro lenses in your pocket. Super-high-resolution 24MP photos by default.
				
				
						
							48MP Fusion Main camera
							
								
									24/48 mm focal length (1x/2x)
									ƒ/1.78 aperture
									2.44 μm quad-pixel (1.22 μm individual)
								
							
						
						
							48MP Fusion Ultra Wide camera
							
								
									13 mm focal length (.5x/macro)
									ƒ/2.2 aperture
									1.4 μm quad-pixel (0.7 μm individual)
								
							
						
						
							48MP Fusion Telephoto camera
							
								
									100/200 mm focal length (4x/8x)
									ƒ/2.8 aperture
									1.4 μm quad-pixel (0.7 μm individual)
								
							
						
					
			
			
				
					Pro results down to the pixel.
				
				
			
			
					
					The new front camera gives you flexible ways to frame your photos and videos — and so much more. Tap to expand the field of view and rotate from portrait to landscape without moving your iPhone. And when friends join the shot, the field of view expands so you get more friendsies in your selfies.
					
						
							
							
						
						
						
									
											An all-new square sensor enables zoom and rotate options, for more flexible ways to frame selfies and videos. And it gets everyone in a group shot — automatically.
										
									
											Record yourself and the world around you with simultaneous front and rear video capture.
										
									
											Capture stunningly smooth 4K 60 fps video in Dolby Vision, even when you’re in action.
										
									
											Artificial intelligence automatically adjusts the frame, so you’re front and center for virtual meetings and FaceTime calls.6
										
								
					
				
			
					
							
								Pro video
								Any more pro and it would need an agent.
							
						
					
					
							From home movies to Hollywood productions, iPhone 17 Pro is up to any challenge. With more pro video features than ever — like enhanced video stabilization, cinema-grade specs, and compatibility with industry-standard workflows — iPhone 17 Pro puts powerful filmmaking tools within reach, wherever you need them.
						
				
			
		
		
			
			
						
							A19 Pro chip
							The Apple silicon powering iPhone 17 Pro delivers the highest iPhone performance ever, ideal for advanced gaming and the most demanding tasks.
						
						
							Graphics and speed
							Paired with an innovative thermal design, the GPU and CPU deliver up to 40 percent better sustained performance.
						
						
							Neural Accelerators
							With Neural Accelerators integrated into each GPU core, iPhone 17 Pro is more powerful than ever when working with local AI models.
						
					
			
				
					
						Battery life.All-time high.
						The new internal design creates significant additional room for battery capacity, giving iPhone 17 Pro Max the best-ever iPhone battery life,9 and up to 4 more hours per full charge compared to iPhone 15 Pro Max. From extended video playback to after-hours work, it’s always ready for overtime.
					
					
						
							
							
						
						
					
				
				
							
								Up to33 hoursvideo playback on iPhone 17 Pro9
							
							
								Up to39 hoursvideo playback on iPhone 17 Pro Max9
							
							
								Up to50% chargein 20 minuteswith high‑wattage power adapter10
							
						
			
			
						
							Compare with iPhone 17 Pro
						
						
										Up to40% faster6‑core CPU
										Up to2x faster6‑core GPU
										Up to10 more hoursvideo playback on iPhone 17 Pro9
										Up to16 more hoursvideo playback on iPhone 17 Pro Max9
									
					
			
		
		
				
				
				The latest iPhone models come packed with advanced capabilities. Helpful Apple Intelligence features such as visual intelligence11 and Writing Tools to make your everyday easier. Fast, secure connections with Wi‑Fi 7,12 Bluetooth 6, 5G connectivity,13 and eSIM14. And safety features like Messages via satellite designed to give you peace of mind.
			
		
								Worth the upgrade? 100 percent.
								
										Select an iPhone to compare to iPhone 17 Pro:
									
								A few ways iPhone 17 Pro gives you more.
								
											
												Forged aluminum unibody design
												
											
											Up to 16 morehoursbattery
													 video playback on iPhone 17 Pro Max9
											
												48MP rear cameras and Camera Control
												
											
											Up to 40% faster CPU performance
											
												18MP Center Stage front camera
												
											
											
													
													Record video in 4K 120fps Dolby Vision
												
										
							
		
				
				
					
						
							
							
						
						
						
							TechWoven Case. 
							Made from a custom technical woven fabric of multiple colored yarns. The sides of the case are coated and textured for a better grip. Available in five colors.
						
					
					
						
							
							
						
						
						
							Crossbody Strap. 
							Allows you to comfortably wear your iPhone hands‑free. Embedded flexible magnets with stainless steel sliding mechanisms allow you to effortlessly adjust the length for the perfect fit.
						
					
					
						
							
							
						
						
						
							Silicone Case. 
							Six striking colors, now with two connection points that allow secure attachment to the new Crossbody Strap.
						
					
				
			
		
		
							
								
									
										New
										
                              			iPhone 17 Pro
                              	
										
										
									
									
										
											
											
										
										
									
									
										
											
												Cosmic Orange
											
											
												Deep Blue
											
											
												Silver
											
											
												+more
											
										
									
									Innovative design for the ultimate performance and battery life.
									*
									
									
									
										
											6.9 inches or 6.3 inches
											Super Retina XDR display4
										
										
											
												
													
													
												
												
											
											
												
													48MP Pro Fusion camera system
												
												
													48MP Fusion Main
												
												
													48MP Fusion Ultra Wide
												
												
													48MP Fusion Telephoto
												
											
										
										
											
												
													
													
												
												
											
											
												
													A19 Pro chip
												
												
													6‑core GPU with Neural Accelerators
												
											
										
										
											
												
													
													
												
												
											
											
												
													Up to 39 hours video playback9
												
											
										
										
											
												
													
													
												
												
											
											Apple Intelligence26
										
										
											The innovative design for iPhone 17 Pro delivers exceptional durability, breakthrough battery life, and unlocks the extraordinary power of the A19 Pro chip. The 48MP Pro Fusion camera system has the longest iPhone Telephoto ever with 8x zoom, and a Center Stage front camera for smarter group selfies and Dual Capture video. Ceramic Shield 2 on the front for 3x better scratch resistance, and a forged aluminum unibody that dissipates heat. Helpful Apple Intelligence tools like Clean Up and more.
										
									
								
								
									
										New
										
                              			iPhone Air
                              	
										
										
									
									
										
											
											
										
										
									
									
										
											
												Sky Blue
											
											
												Light Gold
											
											
												Cloud White
											
											
												Space Black
											
											
												+more
											
										
									
									The thinnest iPhone ever.With the power of pro inside.
									*
									
									
									
										
											6.5 inches
											Super Retina XDR display4
										
										
											
												
													
													
												
												
											
											
												
													48MP Fusion camera system
												
												
													48MP Fusion Main
												
												
													
														
														48MP Fusion Ultra Wide not applicable
													
												
												
													
														
														48MP Fusion Telephoto not applicable
													
												
											
										
										
											
												
													
													
												
												
											
											
												
													A19 Pro chip
												
												
													5‑core GPU with Neural Accelerators
												
											
										
										
											
												
													
													
												
												
											
											
												
													Up to 27 hours video playback9
												
											
										
										
											
												
													
													
												
												
											
											Apple Intelligence26
										
										
											iPhone Air is the thinnest iPhone ever, powered by the A19 Pro chip. It’s more durable than any previous iPhone, with a polished titanium frame, a 3x better scratch-resistant Ceramic Shield 2 front, and a 4x more crack-resistant Ceramic Shield back. Smarter group selfies and Dual Capture video with the new Center Stage front camera. The 48MP Fusion Main camera with 2x Telephoto supports the latest advanced features like next‑generation portraits and more. Immersive 6.5‑inch Super Retina XDR display with ProMotion up to 120Hz. All‑day battery life. Helpful Apple Intelligence tools like Clean Up and more.
										
									
								
							
						
		
		
		
				
					iPhone
					
					
				
			
		
	]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[iPhone Air]]></title>
            <link>https://www.apple.com/newsroom/2025/09/introducing-iphone-air-a-powerful-new-iphone-with-a-breakthrough-design/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45186015</guid>
            <description><![CDATA[Apple today debuted the all-new iPhone Air, the thinnest iPhone ever made, with pro performance.]]></description>
            <content:encoded><![CDATA[


	
    







 

	
    
    
        




    
    
    
	
	







 




opens in new window








    
    
    









    





    
        
		
        
                    
                    
                        PRESS RELEASE
                    
                    
                        September 9, 2025
                    
                    
                

        
                
                
                
                    
                        
    
        Introducing iPhone Air, a powerful new iPhone  with a breakthrough design
    

                    
                
            

        
                
                
                    iPhone Air features an impossibly thin and light  design that is more durable than any previous model,  with innovative camera experiences and  remarkable all‑day battery life
                
            

        
            
    
    
    
    
    

        

    







    
    
    






  
    
    
    
    
      
        
      
    
  








    
    
    


     
     
    
    
        CUPERTINO, CALIFORNIA Apple today debuted the all-new iPhone Air, the thinnest iPhone ever made, with pro performance. iPhone Air features a breakthrough titanium design that is elegant and light yet strong, with an innovative internal architecture that enables the latest iPhone experiences. The back of iPhone Air is now protected with Ceramic Shield, and the front cover uses Ceramic Shield 2, delivering 3x better scratch resistance, making iPhone Air more durable than any previous iPhone. iPhone Air also features a stunning 6.5-inch Super Retina XDR display with ProMotion up to 120Hz.1 With the most Apple-designed chips in an iPhone — the powerhouse A19 Pro, N1, and C1X — iPhone Air is the most power-efficient iPhone ever made. Paired with the redesigned internal architecture and software optimizations, iPhone Air has fantastic all-day battery life. A powerful 48MP Fusion Main camera enables the equivalent of four lenses with incredible image quality, and the innovative 18MP Center Stage front camera takes selfies to the next level.

 

    
    
    


    
    
        
        
        
            
            
                
                    
                        
                            iPhone Air is shown from the back in space black, cloud white, light gold, and sky blue.
                        
                    
                        
                            iPhone Air is shown from the side in sky blue, light gold, cloud white, and space black.
                        
                    
                        
                            A person holds up iPhone Air between two fingers, emphasizing with this side profile view how thin the device is.
                        
                    
                
            
            
            
                
                
                
                    
                        
                    
                
            
        
    


    
    
    


     
     
    
    
        
             
                 A Breakthrough Design

                 
             
                 Featuring a breakthrough design with pro performance, iPhone Air is the thinnest iPhone ever made at 5.6mm, and it is incredibly light, with a large, stunning display. The grade 5 titanium frame is strong, with an elegant high-gloss mirror finish, and a new plateau on the back that is precision-milled on both sides to house the cameras, speaker, and Apple silicon. This maximizes space for the battery to deliver remarkable all-day battery life. The thin design also features the Action button, so users can easily access a variety of functions with just a press, and Camera Control, to quickly launch the camera or enable visual intelligence.2

                 
             
         
 

    
    
    


    
    






    
    
    


     
     
    
    
        
 

    
    
    


    
    






    
    
    


     
     
    
    
        
 

    
    
    


    
    






    
    
    


     
     
    
    
        
 

    
    
    


    
    
        
        
        
            
            
                
                    
                        
                            An outdoor portrait of a person with curly hair taken with 2x Telephoto on iPhone Air.
                        
                    
                        
                            A photo of a towering rock formation taken in 48MP on iPhone Air.
                        
                    
                        
                            An outdoor photo of a person standing inside a hot air balloon billowing in the wind taken in 24MP on iPhone Air.
                        
                    
                        
                            A close-up photo of a stack of homemade waffles covered in colorful berries showing Focus Control on iPhone Air.
                        
                    
                        
                            An editorial-style photo of a person wearing all white against an abstract black-and-white backdrop showing Photographic Styles and taken on iPhone Air.
                        
                    
                        
                            An editorial-style photo of a person wearing all white sitting on a chair inside a dimly lit room taken on iPhone Air.
                        
                    
                
            
            
            
                
                
                
                    
                        
                    
                
            
        
    


    
    
    


     
     
    
    
        
 

    
    
    


    
    






    
    
    


     
     
    
    
        
 

    
    
    


    
    






    
    
    


     
     
    
    
        
             
                 eSIM: A Flexible, Convenient, and Secure Connection

                 
             
                 iPhone Air features an eSIM-only design that saves space internally, helping enable the unbelievably light and thin form factor.4 eSIM offers greater flexibility, better security, and seamless connectivity compared to traditional physical SIM cards. An industry standard, eSIM is supported by over 500 carriers worldwide, including AT&T, T-Mobile, Verizon, and more. eSIM also makes staying connected while traveling even more convenient, allowing continued connectivity through affordable international roaming plans from users’ home carriers or local prepaid options available with more than 200 carriers. For better security, eSIM cannot be physically removed if an iPhone is lost or stolen, and managing travel eSIMs is even easier with a new streamlined setup in iOS 26.

                 
             
                 Featuring iOS 26 with New Apple Intelligence Capabilities

                 
             
                 iOS 26 elevates the iPhone experience with a beautiful new design, powerful Apple Intelligence capabilities, and meaningful improvements to the apps users rely on every day. The new design with Liquid Glass makes apps and system experiences more expressive and delightful, bringing greater focus to content while keeping iOS instantly familiar. Apple Intelligence now translates text and audio on the go with Live Translation, helping users communicate across languages in Messages, FaceTime, and Phone.5 Updates to visual intelligence allow users to capture a screenshot and easily search or take action on anything they are viewing on their iPhone screen. The on-device foundation model at the core of Apple Intelligence is available to all developers, with apps already offering new intelligent, privacy-protected experiences that can even be used when offline. New screening tools for calls and messages help eliminate distractions so users can focus on the conversations that matter most. iOS 26 also introduces new features in CarPlay, Apple Music, Maps, and Wallet, as well as Apple Games, a brand-new app that gives players a single destination for all their games.

                 
             
         
 

    
    
    


    
        
        
        
        
            
                
            
        
    












    
    
    


     
     
    
    
        
             
                 Beautiful New Accessories

                 
             
                 
                 
             
                 
The iPhone Air Case with MagSafe — available in frost and shadow — has an ultra-thin translucent design with a lightly frosted interior, a high-gloss outer surface, and a reinforced polycarbonate frame to protect iPhone Air from scratches and drops.


                 
             
                 
The slim and lightweight iPhone Air Bumper — available in four matching colors — perfectly frames iPhone Air with a reinforced polycarbonate design for added edge protection.


                 
             
                 
Crafted from 100 percent recycled yarns, the Crossbody Strap drapes comfortably, with embedded flexible magnets and stainless steel sliding mechanisms to easily adjust the length and keep both straps securely aligned. The Crossbody Strap will be available in 10 colors: black, light gray, blue, light blue, purple, sienna, green, neon yellow, tan, and orange.


                 
             
                 
The iPhone Air MagSafe Battery has a thin and light design that seamlessly attaches to the back of the device. The MagSafe Battery quickly charges iPhone Air when the battery is low, and maximizes battery life when connected throughout the day, delivering up to 40 hours of video playback when used together.


                 
             
         
 

    
    
    


    
    
        
        
        
            
            
                
                    
                        
                            iPhone Air is shown with the new MagSafe Case.
                        
                    
                        
                            iPhone Air is shown with the new Bumper.
                        
                    
                        
                            iPhone Air is shown with the new Crossbody Strap.
                        
                    
                        
                            iPhone Air is shown with the new MagSafe Battery.
                        
                    
                
            
            
            
                
                
                
                    
                        
                    
                
            
        
    


    
    
    


     
     
    
    
        
             
                 iPhone Air and the Environment

                 
             
                 Apple 2030 is the company’s ambitious plan to be carbon neutral across its entire footprint by the end of this decade by reducing product emissions from their three biggest sources: materials, electricity, and transportation. iPhone Air is made with 35 percent recycled content, including 80 percent recycled titanium, the highest ever for an iPhone, and 100 percent recycled cobalt in the battery. A new titanium USB-C port is 3D-printed to be thinner and stronger, fitting into the slim design while using 33 percent less material than a conventional forging process. iPhone Air is manufactured with 45 percent renewable electricity, like wind and solar, across the supply chain. It is designed to be durable, repairable, and offer industry-leading software support, while meeting Apple’s high standards for energy efficiency and safe chemistry. The paper packaging is 100 percent fiber-based and can be easily recycled.

                 
             
         
 

    
    
    


     
     
    
    
        
             
                 
                 
             
                 
iPhone Air will be available in space black, cloud white, light gold, and sky blue, starting with 256GB storage, as well as 512GB and 1TB options. iPhone Air starts at $999 (U.S.) or $41.62 (U.S.) per month.6


                 
             
                 
Apple offers great ways to save and upgrade to the latest iPhone models. With Apple Trade In, customers can get $200 to $700 (U.S.) in credits when they trade in iPhone 13 or newer.7 Apple also partners with select carriers to offer incredible deals, and customers can get up to $1,100 (U.S.) in credits when they trade in iPhone 13 or newer — in any condition — to put toward iPhone 17 Pro. Customers can take advantage of carrier deals by visiting the Apple Store online or an Apple Store location. For carrier deal eligibility requirements and more details, see apple.com/shop/buy-iphone/carrier-offers. To see what their device is worth and for trade-in terms and conditions, customers can visit apple.com/shop/trade-in.


                 
             
                 
Customers in more than 63 countries and regions, including Australia, Canada, China, Colombia, France, Germany, India, Japan, Malaysia, Mexico, Singapore, South Korea, Thailand, Türkiye, the UAE, the UK, the U.S., and Vietnam, will be able to pre-order iPhone Air beginning at 5 a.m. PDT this Friday, September 12, with availability beginning Friday, September 19. iPhone Air will be available in 22 other countries and regions beginning Friday, September 26.


                 
             
                 
iOS 26 will be available as a free software update on Monday, September 15. Some features may not be available in all languages or regions, and availability may vary due to local laws and regulations. For more information about availability, visit apple.com.


                 
             
                 
Apple Intelligence is available in beta with support for these languages: English, French, German, Italian, Portuguese (Brazil), Spanish, Chinese (simplified), Japanese, and Korean. More languages will be coming by the end of this year: Danish, Dutch, Norwegian, Portuguese (Portugal), Swedish, Turkish, Chinese (traditional), and Vietnamese. Some features may not be available in all regions or languages. For feature and language availability and system requirements, see support.apple.com/en-us/121115.


                 
             
                 
Apple is extending free access to satellite features for an additional year for existing iPhone 14 and iPhone 15 users. The free trial will be extended for iPhone 14 and iPhone 15 users who have activated their device in a country that supports Apple’s satellite features prior to 12 a.m. PT on September 9, 2025. For satellite feature availability, visit support.apple.com/en-us/105097.


                 
             
                 
iPhone Air MagSafe Battery will be available for $99 (U.S.). iPhone Air Case with MagSafe is available for $49 (U.S.), iPhone Air Bumper will be available for $39 (U.S.), and a Crossbody Strap will be available for $59 (U.S.). FineWoven Wallet with MagSafe will be available for $59 (U.S.) in black, navy, midnight, purple, fox orange, and moss.


                 
             
                 
The Apple-designed 40W Dynamic Power Adapter with 60W Max will be available for $39 (U.S.), and a Qi2 25W-certified MagSafe Charger will be available in a 1-meter length for $39 (U.S.) or a 2-meter length for $49 (U.S.).8


                 
             
                 
AppleCare delivers exceptional service and support, with flexible options for Apple users. Customers can choose AppleCare+ to cover their new iPhone, or in the U.S., AppleCare One to protect multiple products in one simple plan. Both plans include coverage for accidents like drops and spills, theft and loss protection on eligible products, battery replacement service, and 24/7 support from Apple experts. For more information, visit apple.com/applecare.


                 
             
                 
iCloud+ plans start at just $0.99 (U.S.) per month, providing additional storage to keep photos, videos, files, and more safe in the cloud and accessible across devices. iCloud+ also gives access to premium features such as event creation in the Apple Invites app, as well as Private Relay, Hide My Email, custom email domains, and HomeKit Secure Video. With Family Sharing, users can share their subscription with five other family members at no extra cost.


                 
             
                 
Customers who purchase iPhone Air may receive three free months of Apple Arcade, Apple Fitness+, Apple Music, Apple News+, and Apple TV+ with a new subscription. Offer and services availability varies by region. See apple.com/promo for details.


                 
             
         
 

    
    
    




    
    
        
    


    
    
    


		
		
        
			
				
				
					Text of this article
					
				
			
			
                
                
                    Media in this article
                    
                
            

        
    

    
    
    




    




    
    
    





    
    
    
            
The display has rounded corners that follow a beautiful curved design, and these corners are within a standard rectangle. When measured as a standard rectangular shape, the screen is 6.55 inches diagonally. The actual viewable area is smaller.
Visual intelligence is available on any Apple Intelligence-enabled iPhone. Some capabilities may not be available in all languages and regions. For more details, see support.apple.com/en-us/121115#visual-intelligence.
The new Bright Photographic Style will be available in iOS 26 on iPhone 16, iPhone 16 Plus, iPhone 16 Pro, iPhone 16 Pro Max, iPhone 17, iPhone Air, iPhone 17 Pro, and iPhone 17 Pro Max.
Use of an eSIM requires a carrier that supports eSIM and a wireless service plan. See carrier for details. To learn more, visit apple.com/esim.
Live Translation in Messages supports English (U.S., UK), French (France), German, Italian, Japanese, Korean, Portuguese (Brazil), Spanish (Spain), and Chinese (simplified). Live Translation in Phone and FaceTime is available for one-on-one calls in English (U.S., UK), French (France), German, Portuguese (Brazil), and Spanish (Spain).
Financing available to qualified customers, subject to credit approval and credit limit, and requires users to select Citizens One Apple iPhone Payments or Apple Card Monthly Installments (ACMI) as their payment type at checkout at Apple. They’ll need to select AT&T, Boost Mobile, T‑Mobile, or Verizon as their carrier when they check out. An iPhone purchased with ACMI is always unlocked, so they can switch carriers at any time, subject to their carrier’s terms. Taxes and shipping on items purchased using ACMI are subject to their card’s variable APR, not the ACMI 0 percent APR. ACMI is not available for purchases made online at special storefronts. The last month’s payment for each product will be the product’s purchase price, less all other payments at the monthly payment amount. ACMI financing is subject to change at any time for any reason, including but not limited to, installment term lengths and eligible products. See the Apple Card Customer Agreement for more information about ACMI. Additional Citizens One Apple iPhone Payments terms are available at apple.com/legal/sales-support/iphoneinstallments_us.
Trade-in values will vary based on the condition, year, and configuration of the eligible trade-in device.
The 40W Dynamic Power Adapter with 60W Max will be available in Canada, China mainland, Japan, Mexico, Taiwan, the Philippines, and the U.S.


        



    
    
    






    















	

		
		
			
























		
		











	

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dropbox Paper mobile App Discontinuation]]></title>
            <link>https://help.dropbox.com/installs/paper-mobile-discontinuation</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45186011</guid>
            <description><![CDATA[The Dropbox Paper app is being discontinued October 9. Learn what that means for your Paper documents and mobile editing.]]></description>
            <content:encoded><![CDATA[
    
    

    
        
        
            
                
                    Dropbox Help Center - How to use Dropbox 
                
                
            
            
        
            
                
                    Installs 
                
                
            
            
        
            
            
                 FAQs on the Dropbox Paper app discontinuation
                
            
        
    









    In this article


    
    
          
         
            
               person icon
               
               
         
         
         
         
         
         The information in this article applies to all Dropbox users, unless otherwise stated.  
      

        In order to focus on delivering a consistent, high-quality experience on paper.dropbox.com, the Dropbox Paper mobile app will be discontinued on October 9, 2025. If you already have the app installed on your device, it will no longer function after this date. 

You can continue using Paper on Web on any of your devices after this date by logging into paper.dropbox.com using your browser.

      

        When will the Paper mobile app be discontinued?

The Paper mobile app will no longer be available on the Google Play Store or Apple App Store from October 9, 2025. If you’ve already got the app installed on your device, it’ll no longer update after October 9. After this date, some parts of the app will no longer function. To ensure a smooth transition, we recommend deleting the app.

      

        What happens to my Paper documents?

Your Paper files will continue to be securely stored in your Dropbox account. You can access them at any time, from any of your devices, by visiting paper.dropbox.com.

      

        Can I still create and edit Paper documents on my mobile device?

Yes, you can still create and edit paper documents using Paper on the web.

To create Paper documents on your mobile device:


Log in to paper.dropbox.com on your mobile device.
Tap    Create new doc at the top of your screen.
Enter a name for your new document.


To edit Paper documents on your mobile device:


Log in to paper.dropbox.com on your mobile device.
Tap the document you’d like to edit.
Tap any of the text in the document to begin editing.


You can make edits using the keyboard on your mobile device.

      

        Can I share Paper documents with my mobile device?

Yes, you can share Paper documents with your mobile device through Paper on Web, or through the Dropbox mobile app.

To share a document on the web:


Log in to paper.dropbox.com on your mobile device.
Tap  (more) next to the document you’d like to share.
Select whether the person you’re sharing the file with can view, or edit the file, by choosing from the dropdown next to Anyone with this link.
Enter the email address of the person you’d to share the document with.
You can also tap Copy link and share that link directly.


Add a note if required.
Tap Share.



To share a file using the Dropbox mobile app:


Open the Dropbox mobile app.
Tap  (more options) on Android or  (more options) on iOS next to the file you’d like to share.
Tap Share.
Tap Invite to file (file).
Tap under Send to and type the Email, name, or group of the person (or people) you’d like to share the file or folder with.
Tap to select them from the results.
Note: You can invite as many people as you’d like.


Tap to select Can edit (view, comment, and edit) or Can view (view and comment but not edit).
Tap Close on iOS.


Tap Optional message on Android or Message (optional) on iOS to add a message, if required.
Tap Share.


      

        How will I receive notifications about changes to my Paper documents?
You’ll still receive notifications about activity, comments, @mentions, to-dos, and changes to docs you follow through email, and on the Dropbox mobile app.

Learn more about Dropbox Paper notifications.

      

        Can I continue to use the Dropbox Paper desktop app?

The Dropbox Paper desktop app was a beta experience, and is also being discontinued on October 9, 2025. You’ll still be able to use all of the features of Dropbox Paper by visiting paper.dropbox.com.

      

        Will I be reminded of the change?

Yes, if you’re an active user of the Dropbox Paper mobile or desktop apps, you’ll receive a reminder email on October 1, 2025.

      

    


        Was this article helpful?
        
        
        
                
                Thanks for your feedback!
            
    

		
			Related Articles
		
		
	


         
           Other ways to get help 
    
 

    
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[E-Paper Display Refresh Rate Reaches New Heights]]></title>
            <link>https://spectrum.ieee.org/e-paper-display-modos</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45185756</guid>
            <description><![CDATA[E-Paper displays just got faster with Modos' 75 Hz refresh rate. How did they achieve it?]]></description>
            <content:encoded><![CDATA[E-paper displays are prized for their readability and low power use, but they’ve long been dismissed as too slow for everyday computing. Modos, a two-person startup with open-hardware roots, thinks it has cracked part of that problem with a development kit capable of driving an e-paper display at refresh rates up to a record 75 hertz.The Modos Paper Monitor and Dev Kit, now available for crowdfunding on Crowd Supply, combines standard e-paper panels with an open source FPGA-based display controller. While the kit provides enthusiasts and developers a complete package (with e-paper display, display driver, and hardware adapter), it’s also an entry point for experimenting with different e-paper displays.RELATED: How E Ink Developed Full-Color E-paper“I would say instead of our secret sauce, we have open sauce,” says cofounder Alexander Soto. “You don’t even need to use the panel we’re offering. You could use a different panel and still get [75 Hz].”E-paper at 75 HzMost e-paper panels update at a refresh rate of around 10 Hz or less. (E-paper is the generic term for screens that mimic the appearance of ink on paper—the most well-known brand being that made by the company E Ink.) Some displays don’t even quote a refresh rate and may require up to a full second to refresh. A better refresh rate means a display can show more frames each second, which in turn provides smoother, more lifelike motion. Modern digital video is usually delivered at 30 or 60 frames per second, which until recently was well beyond the reach of an e-paper display. This is an area where e-paper clearly lags LCD displays, which start at 60 Hz and go up from there.Modos is able to hit refresh rates of up to 75 Hz on a 13-inch e-paper panel with a 1,600 by 1,200 resolution. (a 6-inch e-paper panel with 1,448 by 1,072 resolution and the same refresh rate is available, too.) Bumping the refresh rate also reduces latency. That’s a key point, as it allows an e-paper display to be used in situations where latency matters, such as a computer or tablet display.“A lot of people default to thinking that with e-readers or e-paper, it’s slow, it’s going to be flashing all the time,” says Soto. “Our challenge has been going to conferences, going to events, and showing people…e-paper can be very fast.” Open Source E-Paper Display ControllerModos’s quoted 75-Hz refresh rate is the highest yet for an e-paper display, but it’s arguably not the key innovation. Several competitors already offer e-paper displays with refresh rates up to 60 Hz which, though lower, is close. But Modos has a not-so-secret weapon: Caster, an open-source e-paper display controller that’s compatible with a wide variety of e-paper panels. The display controller, which is based on the AMD Spartan-6 FPGA, departs from typical e-paper controllers with pixel-level display management. “Traditionally, the [e-paper display] controller used a single-state machine to control the entire panel, with only two states: static and updating,” says Modos cofounder Wenting Zhang. “Caster treats each pixel individually rather than as a whole panel, which allows localized control on the pixels.”The FPGA display controller is paired with Modos’s Glider Mega Adapter, which includes four different display connectors compatible with several dozen e-paper displays ranging in size from 4.3 to 13 inches. Soto says the adapter can be used to repurpose displays salvaged from older e-readers, like Amazon’s Kindle.  A 75-Hz refresh rate allows for smoother scrolling. Modos Modos also provides an application programming interface (API), written in the C programming language, that lets applications select display-driving modes dynamically. As the video above shows, a Linux window manager can be used to render text in a low-latency binary color mode, display maps in more detailed yet responsive gray scale, and display video with maximum-fidelity gray scale—all simultaneously on the same screen. The code and schematics for Caster, Glider, and the API are open source and available on Github. Crowdfunding for E-paper InnovationModos’s crowdfunding campaign is set to conclude on 18 September. Orders are expected to ship in January of 2026, although (as is often the case for crowdfunded projects) the shipping window is not guaranteed. Getting to this stage has taken several years. The company’s founders initially hoped to build an e-paper laptop, the Modos Paper Laptop, which was announced in January of 2022. However, the realities of electronics manufacturing complicated that project early in its life and the laptop was never made available to order. “Part of it was that the primary aspect ratio for the majority of [laptop] chassises are for 16:9 and 16:10. And when you look at e-paper displays, it was an aspect ratio of 4:3. So, we either had to make a custom chassis, or a custom panel, both of them being prohibitively expensive,” says Soto.Panel sourcing also remains a hurdle. E-paper’s production is geared toward e-readers and signage, which means most panels aren’t the right size for a computer. However, the Modos Paper Monitor and Dev Kit found a practical compromise in recently introduced 13-inch e-paper displays, many of which provide a resolution similar to LCD and OLED panels developed for laptops. In this way, the Dev Kit is a continuation of Modos’s original goal. While building a full-fledged e-paper laptop was impractical, the Dev Kit’s high refresh rate, open-source display controller, and API give ambitious users the opportunity to implement their own low-latency e-paper computer display—or anything else they put their mind to.This article was updated on 8 September 2025 to replace mentions of “E Ink” (the specific e-paper technology developed by the company of the same name) with “e-paper.”]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Weave (YC W25) is hiring a founding AI engineer]]></title>
            <link>https://www.ycombinator.com/companies/weave-3/jobs/SqFnIFE-founding-ai-engineer</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45184921</guid>
            <description><![CDATA[At Weave, we’re building the best software for the best engineering teams to move faster, and we want to hire exceptional engineers to help us do so.
We are a well-funded startup, backed by top investors, growing rapidly and currently profitable.
You'll be working directly with me (Andrew), the CTO. Before I was CTO of Weave I was the founding engineer at Causal, and I want to give you all the support and growth opportunities in this role that I got when I went through it.
You’ll also be working directly with Adam, the CEO. Adam runs sales at Weave, and before that worked as a sales executive at a few different high growth startups.
Must haves
You are a good fit for Weave if you are a formidable (https://paulgraham.com/convince.html) engineer. This means you stop at nothing to accomplish your goal. We don't care much about your current skills or even what you've done before; we care that you will be able to do anything you set your mind to.
You must also be pragmatic. Weave is a startup so something is always on fire. You need to know when to let little fires burn and when to break out the extinguisher.
You must be a very good engineer who's committed to becoming a great engineer. The slope is more important than the Y-intercept.
You must be empathetic. We're building products for other people, so you need to be able to understand how other people think and why.
You must care about helping other software engineering teams be great. If that's not an exciting mission for you, it will be hard to stay motivated through the inevitable highs and lows.
You must be an excellent communicator. You’ll be working on a product that’s communicating with millions of engineers and leaders, so you need to be clear.
Finally you must be gritty. You should be accustomed to picking the hard option and pushing through it.
Nice to haves
(Please feel free to apply even if some or all of these don't apply to you!)
Our tech stack is React + TypeScript on the frontend, Go on the backend, and Python for ML. Experience with any of those three languages is a bonus.
If you've already done lots of thinking about engineering productivity and how to improve it, that's great and we want to hear about it!
We hope your design sensibilities are passable.
The role
As Weave’s founding AI engineer, your job is to build AI to understand and improve the work that software engineers do. You’ll be building our processes and standards as you go to make building every incremental feature easier. Your goal will be to delight customers with intelligence that makes their job 10x easier.]]></description>
            <content:encoded><![CDATA[Founding AI Engineer$140K - $200K•0.20% - 1.00%•Oakland, CA, US / San Francisco, CA, USJob typeFull-timeRoleEngineering, Machine learningExperience1+ yearsVisaUS citizen/visa onlySkillsGo, PythonConnect directly with founders of the best YC-funded startups.Apply to role ›At Weave, we’re building the best software for the best engineering teams to move faster, and we want to hire exceptional engineers to help us do so.
We are a well-funded startup, backed by top investors, growing rapidly and currently profitable.
You'll be working directly with me (Andrew), the CTO. Before I was CTO of Weave I was the founding engineer at Causal, and I want to give you all the support and growth opportunities in this role that I got when I went through it.
You’ll also be working directly with Adam, the CEO. Adam runs sales at Weave, and before that worked as a sales executive at a few different high growth startups.
Must haves
You are a good fit for Weave if you are a formidable engineer. This means you stop at nothing to accomplish your goal. We don't care much about your current skills or even what you've done before; we care that you will be able to do anything you set your mind to.
You must also be pragmatic. Weave is a startup so something is always on fire. You need to know when to let little fires burn and when to break out the extinguisher.
You must be a very good engineer who's committed to becoming a great engineer. The slope is more important than the Y-intercept.
You must be empathetic. We're building products for other people, so you need to be able to understand how other people think and why.
You must care about helping other software engineering teams be great. If that's not an exciting mission for you, it will be hard to stay motivated through the inevitable highs and lows.
You must be an excellent communicator. You’ll be working on a product that’s communicating with millions of engineers and leaders, so you need to be clear.
Finally you must be gritty. You should be accustomed to picking the hard option and pushing through it.
Nice to haves
(Please feel free to apply even if some or all of these don't apply to you!)
Our tech stack is React + TypeScript on the frontend, Go on the backend, and Python for ML. Experience with any of those three languages is a bonus.
If you've already done lots of thinking about engineering productivity and how to improve it, that's great and we want to hear about it!
We hope your design sensibilities are passable.
The role
As Weave’s founding AI engineer, your job is to build AI to understand and improve the work that software engineers do. You’ll be building our processes and standards as you go to make building every incremental feature easier. Your goal will be to delight customers with intelligence that makes their job 10x easier.
At Weave, we’re building the best software for the best engineering teams to move faster, and we want to hire exceptional engineers to help us do so.
We are a well-funded startup, backed by top investors and growing rapidly.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ICE Is Using Fake Cell Towers to Spy on People's Phones]]></title>
            <link>https://www.forbes.com/sites/the-wiretap/2025/09/09/how-ice-is-using-fake-cell-towers-to-spy-on-peoples-phones/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45184368</guid>
            <description><![CDATA[ICE is using a controversial spy tool to locate smartphones, court records show.]]></description>
            <content:encoded><![CDATA[This is the online edition of The Wiretap newsletter, your weekly digest of cybersecurity, internet privacy and surveillance news. To get it in your inbox, subscribe here.
ICE is using all manner of surveillance technologies in its deportation drive. (Photo by Smith Collection/Gado/Getty Images)Getty Images

It’s been some time since Immigration and Customs Enforcement (ICE) has been seen using a tool known as a Stingray, or a cell-site simulator, in its attempts to find and remove undocumented immigrants. The tool tricks a phone into thinking it’s a cell tower, and when a suspect’s device connects, the cops can trace its location. Its use is controversial because anyone in the same area as the target is at risk of having their information exposed.

In a recently-unsealed search warrant reviewed by Forbes, ICE used such a cell-site simulator in an attempt to track down an individual in Orem, Utah. The suspect had been ordered to leave the U.S. in 2023, but is believed to still be in the country. Investigators learned last month that before going to Utah, he’d escaped prison in Venezuela where he was serving a sentence for murder, according to the warrant. He’s also suspected of being linked to gang activity in the country, investigators said.

When the government got the target’s number, they first got a warrant to get its location. However, the trace wasn’t precise–it only told law enforcement that the target was somewhere in an area covering about 30 blocks. That led them to asking a court for a Stingray-type device to get an accurate location.

The warrant was issued at the end of last month and it’s not yet known if the fugitive was found.
But the case shows that, despite having been criticized by civil rights groups for using Stingrays during the last Trump administration, ICE continues to use the technology. Earlier this year, new media publication Straight Arrow News said it had analysed “mobile network anomalies” around a Washington state protest against ICE raids that were consistent with Stingray use.
Forbes found contract records showing ICE purchased nearly $1 million worth of “cell site simulator vehicles” in May this year, indicating it’s taking the surveillance tool fully mobile. That was part of a contract first signed under the Biden administration in 2024.
ICE also has an active contract worth up to $4.4 million with the original Stingray manufacturer, Harris Corporation, for unspecified “equipment to determine the location of targeted mobile handsets.” That deal was also signed during the Biden years.

Got a tip on surveillance or cybercrime? Get me on Signal at +1 929-512-7964.
THE BIG STORY:
This Billionaire’s AI Was Supposed To Speed Up Policing. It’s Not Going Well.Tom Siebel, chief executive officer of C3.AI, during a panel session at the World Economic Forum (WEF) in Davos, Switzerland. Photographer: Stefan Wermuth/Bloomberg© 2025 Bloomberg Finance LP
San Mateo County Sheriff’s Office spent $12 million on a sprawling AI surveillance system called Sherlock, designed to stitch together surveillance streams across as many as 16 different agencies in the jurisdiction.
Made by billionaire Tom Siebel’s C3 AI, it was supposed to drastically speed up police work, but three years into the project, cops tell Forbes they’re yet to see the benefits.
Per one staffer in 2023, “We’ve been working with them for two years and they have a barely functional product.” Since then, it’s unclear just how much the tech has progressed.
Stories You Have To Read Today
In a Forbes profile, Flock Safety shows off its drones, car tracking and AI-powered surveillance tools, all part of an effort to dislodge police tech giant Axon from the top of the market. “I plan to go take them out,” says CEO Garrett Langley.
ICE signed a contract with facial recognition company Clearview AI last week, worth nearly $10 million. It’ll be used, in part, to identify people assaulting ICE officers.
Former WhatsApp security lead Attaullah Baig has filed a lawsuit alleging Meta ignored big privacy and security problems within the messaging app. He claims thousands of Meta employees were able to view WhatsApp users’ profile pictures, location, group memberships and contact lists. Meta rejected the claims saying Baig was dismissed for poor performance and that his allegations were “distorted.”
Winner of the Week
Signal has launched encrypted backups for user chats. The feature will first be made available for Android phones, before being slowly rolled out to iPhone users. The archive requires a 64-character recovery key to access, but keep that code safe: Signal warns that if it’s lost, there’s no way to get it back.
Loser of the Week
Amnesty International claims that Pakistan is running one of the world’s most expansive domestic surveillance operations outside of China, using both Chinese and Western technology providers, who are enabling both mass snooping via the nation’s telecoms companies as well as widespread internet censorship.
More On ForbesForbesAmerica’s Richest Sports Team Owners 2025By Justin BirnbaumForbesPresidency Boosts Trump’s Net Worth By $3 Billion In A YearBy Dan AlexanderForbesThe 2025 Forbes 400 List Of Wealthiest Americans: Facts And FiguresBy Chase Peterson-Withorn]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[U.S. Added 911,000 Fewer Jobs in the Year Ended in March]]></title>
            <link>https://www.wsj.com/economy/jobs/us-job-growth-revision-a9777d98</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45184315</guid>
        </item>
        <item>
            <title><![CDATA[Building a DOOM-like multiplayer shooter in pure SQL]]></title>
            <link>https://cedardb.com/blog/doomql/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45183050</guid>
            <description><![CDATA[CedarDB is a database system that delivers unmatched performance for transactions and analytics, from small writes to handling billions of rows. Built on cutting-edge research to power today’s tools and tomorrow’s challenges.]]></description>
            <content:encoded><![CDATA[September 8, 2025 • 12 minutesDOOMQL: A DOOM-like multiplayer shooter in pure SQLI recently stumbled across Patrick’s excellent DOOM clone running in a browser powered by DuckDB-WASM.
Ever since I’ve read that, I wanted to push his awesome idea to the logical extreme: Build a multiplayer DOOM-like shooter entirely in SQL with CedarDB doing all the heavy lifting.
During a month of parental leave (i.e., a lot of sleepless nights), I tried exactly that.Here’s a sneak peek at DOOMQL:
Your browser does not support the video tag.DOOMQL in actionOkay, with the flashy demo out of the way, let’s talk about details.
What follows is a tour of the architecture, the SQL rendering pipeline, the game loop, and the fun metagame of cheating by issuing SQL commands against the database.Why even do this?Playing DuckDB DOOM in your browser is fun, but some things bugged me:
First of all, having parts of the rendering pipeline in Javascript felt like cheating. It worked well for DuckDB-Doom where everything is contained in a single HTML page, but I wanted to see if I could do everything in SQL. DuckDB-Doom is also a little bit stuttery with just 8 frames per second and has a pretty tiny viewport. I wanted to see if I could speed that up by switching over to CedarDB. I also wanted real sprites with transparency and they should move around believably in 3D space.
And most importantly, making the game multi-player should not just be possible, but easy, right? I got nerd-sniped by the perceived similarity of a database server to a traditional game server: Databases exist to synchronize shared state across clients. Thanks to transaction isolation, each player has a consistent view of the game world, no matter what the other clients are doing. Why not lean into that?
I would love to lie to you and claim I did it all to push CedarDB as an awesome database system but to be honest the database nerd in me just wanted to turn all knobs up to 11 and see what breaks.Architectural overviewAt a high levelState lives in tables (map, players, mobs, inputs, configs, sprites, …)Rendering is a stack of SQL views that implement raycasting and sprite projectionThe game loop is a tiny shell script that executes a SQL file ~ 30 times per second.The client is ~ 150 lines of Python: It polls for input and queries the database for your 3D view.You can play, observe other players and even cheat (by sending raw SQL).Game state, or: Let’s store everything in the databaseWith a database at hand, it’s natural to store all game configuration, state, and static data in the database:Config:CREATE TABLE config(
  player_move_speed NUMERIC DEFAULT 0.3, 
  player_turn_speed NUMERIC DEFAULT 0.2,
  ammo_max INT DEFAULT 10,
  ammo_refill_interval_seconds INT DEFAULT 2
  );
Map:CREATE TABLE map(x INT, y INT, tile CHAR);
Players and inputs:CREATE TABLE players (
  id INT REFERENCES mobs(id),
  score INT DEFAULT 0,
  hp INT DEFAULT 100,
  ammo INT DEFAULT 10,
  last_ammo_refill int default EXTRACT(EPOCH FROM (now()))::INT
);

CREATE TABLE inputs(
  player_id INT PRIMARY KEY REFERENCES players(id),
  action CHAR(1), -- 'w', 'a', 's', 'd', 'x' for shooting
  timestamp TIMESTAMP DEFAULT NOW()
);
Because everything is data, modding a running match is trivial:-- Change a setting
update config set ammo_max = 20;

 -- Add a player
insert into players values (...);

-- Move forward
update input set action = 'w' where player_id = <your_id>;

 -- Cheat (pls be smarter about it)
update players set hp = 100000 where player_id = <your_id>;

-- Ban cheaters (that weren't smart about it)
delete from players where hp > 100;
Renderer: When a VIEW becomes your 3D viewIf you squint enough, in DOOM, a 3D (or more correct: 2.5D) view is just a view over 2D state (i.e., the level map and any players/enemies on it).
Well, we’ve got VIEWS in SQL as well. They’re also just views on our (2D) state tables.
What’s stopping us from quite literally building a 3D “view” of our 2D map
using a simple raycasting algorithm?The pipeline:Send a set of rays from each player’s eye into the world, and see which map tiles are visibleCheck which walls the player sees, rendering them at the correct height and more or less solid based on the distanceProject mobs into the player’s camera spaceSelect sprite LODs based on depthExpand sprites into pixels, scaled to screen spaceOcclude against walls and other spritesAssemble frame buffer rows with string_aggBuild a minimap reusing the visible tiles calculation from earlierCombine the 3D view with minimap and HUD (HP/bullets/players) into a game viewLet’s take a more in-depth look at steps 2, 7, and 8.RaycastingThe recursive ray‑marching logic is adapted from Patrick’s DuckDB DOOM post. Here is a simplified excerpt, adapted for multiplayer:CREATE OR REPLACE VIEW visible_tiles AS  
WITH RECURSIVE raytrace AS (  
  -- Starting at the player's eye ...
  SELECT r.player_id, r.col, 1 AS step_count,  
         r.player_x + COS(r.angle)*s.step AS fx,  
         r.player_y + SIN(r.angle)*s.step AS fy,  
         r.angle, 0 AS dist  
  FROM rays r, settings s  -- rays are built in an earlier step
  UNION ALL  
  -- ... we recursively march along the rays, 1 "step" at a time ...
  SELECT rt.player_id, rt.col, rt.step_count + 1,  
         rt.fx + COS(rt.angle)*s.step,  
         rt.fy + SIN(rt.angle)*s.step,  
         rt.angle,  
         step_count * s.step * COS(rt.angle - m.dir) AS dist  
  FROM raytrace rt, settings s, players p, mobs m  
  WHERE rt.step_count < s.max_steps   -- ... stopping after our max render distance
    AND rt.player_id = p.id  
    AND m.id = p.id  
    AND NOT EXISTS (  -- or if we hit a wall
      SELECT 1 FROM map m  
      WHERE m.x = CAST(rt.fx AS INT) AND m.y = CAST(rt.fy AS INT)  
        AND m.tile = '#')  -- wall
)  
-- We then determine per player:
--  a) which tiles we hit
--  b) how far away these tiles are
--  c) the column of the screen each tile should correspond to
SELECT player_id, tile, CAST(fx AS INT) AS tile_x, CAST(fy AS INT) AS tile_y, col, MIN(dist) AS dist  
FROM raytrace rt, map m  
WHERE m.x = CAST(rt.fx AS INT) AND m.y = CAST(rt.fy AS INT)  -- We might hit the same tile multiple times, so we take the closest hit
GROUP BY player_id, tile_x, tile_y, tile, col;  
And that’s just the first step in the pipeline. For the rest, take a look at the code.Final frame assemblyAfter all the heavy lifting, the payoff is surprisingly simple:SELECT player_id, y, string_agg(ch, '' ORDER BY x) AS row  
FROM framebuffer  
GROUP BY player_id, y;  
This glues together character pixels into text rows.HUD + minimapThe same trick builds the HUD and minimap. Here is the health bar:'HP: [' ||
repeat('█', LEAST(20, ROUND(20 * GREATEST(0, LEAST(p.hp,100))::numeric / 100)::int)) ||
repeat(' ', GREATEST(0, 20 - ROUND(20 * GREATEST(0, LEAST(p.hp,100))::numeric / 100)::int)) ||
'] ' || GREATEST(0, p.hp)
Add ammo dots with repeat('•', p.ammo) and you’ve got a HUD entirely in SQL: 1: Lukas      (L) score: 1   HP: [█████████           ] 50    AMMO: ••••••••••
 2: Foobar     (F) score: 0   HP: [████████████████████] 100   AMMO: ••••••••  
We can also re-use our earlier visible_tiles view to build a minimap with a view cone:select * from minimap where player_id = 1 order by y;

 player_id | y  |                               row                                
-----------+----+------------------------------------------------------------------
         1 |  0 | ################################################################
         1 |  1 | ################################################################
         1 |  2 | ##.......      #####               #############################
         1 |  3 | ##.....F.      #####               #####                     ###
         1 |  4 | ##.......      #####               #####                     ###
         1 |  5 | ##  .....      #####               #####                     ###
         1 |  6 | ##   ...                                                     ###
         1 |  7 | ##    .L                                                     ###
         1 |  8 | ##             #####               #####                     ###
         1 |  9 | ##             #####               #####                     ###
         1 | 10 | ##             #############  ##########                     ###
         1 | 11 | ##########  ################  ##########                     ###
         1 | 12 | ##########  ################  ##########                     ###
         1 | 13 | ##########  ################  ######################  ##########
         1 | 14 | ####                 #######  ######################  ##########
         1 | 15 | ####                 #######  ######################  ##########
         1 | 16 | ####                 #####             #####                 ###
         1 | 17 | ####                 #####             #####                 ###
         1 | 18 | ####                 #####             #####                 ###
         1 | 19 | ####                 #####             #####                 ###
         1 | 20 | ####                 #####             #####                 ###
         1 | 21 | ####                                   #####                 ###
         1 | 22 | ####                                                         ###
         1 | 23 | ####                 #####                                   ###
         1 | 24 | ####                 #####             #####                 ###
         1 | 25 | ####                 #####             #####                 ###
         1 | 26 | ####                 #####             #####                 ###
         1 | 27 | ####                 #####             #####                 ###
         1 | 28 | ####                 #####             #####                 ###
         1 | 29 | ################################################################
         1 | 30 | ################################################################
         1 | 31 | ################################################################
The surprisingly elegant game loopThe loop is just a shell script running raw SQL against the database:# Game loop @ 30 ticks per second
while true; do
  psql -qtAX -U "$DB_USER" -d "$DB_NAME" -h "$DB_HOST" -p "$DB_PORT" -f gameloop.sql
  sleep 0.03
done
Inside gameloop.sql, actions like bullet movement, collisions, kills, and respawns run in a single transaction, which keeps state consistent even if something fails mid-tick.Here’s the part processing interactions with bullets:-- Process all bullets
BEGIN TRANSACTION;

-- Move bullets forward
UPDATE mobs 
SET x = x + cos(dir) * 0.5, y = y + sin(dir) * 0.5 
WHERE kind = 'bullet';

-- Delete bullets that are out of bounds
DELETE FROM mobs 
WHERE (x < 0 
OR x >= (select max(x) from map) 
OR y < 0 
OR y >= (select max(y) from map))
AND kind = 'bullet';

-- Delete bullets that hit walls
DELETE FROM mobs b 
WHERE EXISTS 
    (SELECT 1 
    FROM map m 
    WHERE m.x = CAST(b.x AS INT) 
    AND m.y = CAST(b.y AS INT) 
    AND m.tile = '#') 
AND kind = 'bullet';


-- Players hit by a bullet loses 50 HP
UPDATE players p SET hp = hp - 50
FROM collisions c
WHERE p.id = c.player_id;

-- If a player has 0 or less HP, the player killing them gets a point
UPDATE players p SET score = score + 1
FROM collisions c
WHERE p.id = c.bullet_owner
AND EXISTS (SELECT 1 FROM players p2 WHERE p2.id = c.player_id AND p2.hp <= 0);

-- Delete bullets that hit players
DELETE FROM mobs m
USING collisions c
WHERE m.id = c.bullet_id;

-- Respawn players whose HP is 0 or less
UPDATE mobs m
SET x = r.x, y = r.y, dir = 0
FROM players p
CROSS JOIN (
  SELECT x, y
  FROM map
  WHERE tile = 'R'
  ORDER BY random()
  LIMIT 1
) AS r
WHERE m.id = p.id
  AND p.hp <= 0;

-- Reset players' HP to 100 and ammo to 10 after respawn
UPDATE players p SET
  hp = 100,
  ammo = 10
FROM mobs m
WHERE p.id = m.id
AND p.hp <= 0;

COMMIT;
On my machine, the game loop takes about 1 ms, so we could defintely improve the tick rate.
That might be a way to get the Counterstrike snobs who scoff at everything below 128 Hz.
It would require some refactoring on my part since I tied the movement speed to the game loop - a big no no in game design!While only someone insane could think a pure SQL raycasting renderer is a good idea in an actual game, I’ll happily defend this transactional game loop.
I don’t think this part would be much more concise or less brittle in a real game engine.Make it multiplayer in two queriesThe game client’s job description is simple:RenderSELECT full_row FROM screen WHERE player_id = <your_id> ORDER BY y
Send inputINSERT INTO inputs(player_id, action)
    VALUES (<your_id>, <pressed_key>)
    ON CONFLICT(player_id)
    DO UPDATE SET action = EXCLUDED.action
The game loop periodically checks the input table and moves all players accordingly - inside a transaction, of course, so we don’t run into any race conditions.That’s it (well, plus a one-time “create player” on first connect). The ~150 lines of Python in the client mostly handle keyboard input and reducing terminal flicker.
Bonus: The client provides an observer mode. All it has to do is swap the <player_id> in the render call.PerformanceAt 128 x 64 pixels, a single player view takes ~33 ms on my machine, which is enough for a breezy ~30 FPS, compared to DuckDB DOOM’s 8 FPS at just 32 x 16 pixels.
I’m actually quite proud of that performance and quite happy with CedarDB here.
I don’t think any other database system can keep up with that.
Let me know if you find one!You might worry that rendering the views of all players and filtering late would be very wasteful.
CedarDB’s query optimizer pushes the where player_id = <...> predicate through view boundaries, avoiding unncessary work.
You can easily check by running:select * from screen order by y; -- render both users
-- Time: 57,907 ms (~2x single player 33ms)
Because clients send raw SQL as superusers (I didn’t bother setting up any role based access control or row level security, don’t do that!), there’s an emergent metagame: Cheat creatively and try not to get caught.Low effort:update players set score = 0 where id != <your_id>;
update players set hp = 0 where id != <your_id>;
Mischievous:update inputs set action = null where player_id != <your_id>;
Steal kills:update mobs set owner = <your_id> where kind = 'bullet';
Attempted but didn’t work:DELETE FROM mobs m
USING collisions c
WHERE m.id = c.bullet_id AND c.player_id = <your_id>;
This doesn’t work because moving bullets, checking for collisions, and respawn happens in the same transaction.
As transactions are atomic, you either see everything being applied at once, or nothing. By the time you see the hit, you’re already dead.
A property that’s very useful for database systems (and not just to prevent cheating).What I learnedI set out to see if I could push Patrick’s demo to an extreme: Doing the entire rendering pipeline in SQL.
And while it works, I have to admit that it is a pretty… bad idea? Fast enough, but horrible to maintain and debug.The surprise was how natural it felt to express game state and logic in SQL.
It even felt like accidentally re-invented the entity-component-system pattern.And multiplayer “just worked” because the database system which handles all the nasty concurrency is the source of truth.Try it yourself!All the code is on Github: DOOMQL RepoRun:docker pull cedardb/cedardb:latest
docker run --rm -p 5432:5432 -e CEDAR_PASSWORD=postgres --detach cedardb/cedardb:latest
# Wait a few seconds for CedarDB to start
./server.sh

# in a second terminal window, zoom way out to have no line wraping issues
python3 pyclient.py
Want to discuss DOOMQL with me or find like-minded database nerds? Join our Community Slack]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[X open sourced their latest algorithm]]></title>
            <link>https://github.com/twitter/the-algorithm</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45183039</guid>
            <description><![CDATA[Source code for the X Recommendation Algorithm. Contribute to twitter/the-algorithm development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[X's Recommendation Algorithm
X's Recommendation Algorithm is a set of services and jobs that are responsible for serving feeds of posts and other content across all X product surfaces (e.g. For You Timeline, Search, Explore, Notifications). For an introduction to how the algorithm works, please refer to our engineering blog.
Architecture
Product surfaces at X are built on a shared set of data, models, and software frameworks. The shared components included in this repository are listed below:



Type
Component
Description




Data
tweetypie
Core service that handles the reading and writing of post data.



unified-user-actions
Real-time stream of user actions on X.



user-signal-service
Centralized platform to retrieve explicit (e.g. likes, replies) and implicit (e.g. profile visits, tweet clicks) user signals.


Model
SimClusters
Community detection and sparse embeddings into those communities.



TwHIN
Dense knowledge graph embeddings for Users and Posts.



trust-and-safety-models
Models for detecting NSFW or abusive content.



real-graph
Model to predict the likelihood of an X User interacting with another User.



tweepcred
Page-Rank algorithm for calculating X User reputation.



recos-injector
Streaming event processor for building input streams for GraphJet based services.



graph-feature-service
Serves graph features for a directed pair of users (e.g. how many of User A's following liked posts from User B).



topic-social-proof
Identifies topics related to individual posts.



representation-scorer
Compute scores between pairs of entities (Users, Posts, etc.) using embedding similarity.


Software framework
navi
High performance, machine learning model serving written in Rust.



product-mixer
Software framework for building feeds of content.



timelines-aggregation-framework
Framework for generating aggregate features in batch or real time.



representation-manager
Service to retrieve embeddings (i.e. SimClusers and TwHIN).



twml
Legacy machine learning framework built on TensorFlow v1.



The product surfaces currently included in this repository are the For You Timeline and Recommended Notifications.
For You Timeline
The diagram below illustrates how major services and jobs interconnect to construct a For You Timeline.

The core components of the For You Timeline included in this repository are listed below:



Type
Component
Description




Candidate Source
search-index
Find and rank In-Network posts. ~50% of posts come from this candidate source.



tweet-mixer
Coordination layer for fetching Out-of-Network tweet candidates from underlying compute services.



user-tweet-entity-graph (UTEG)
Maintains an in memory User to Post interaction graph, and finds candidates based on traversals of this graph. This is built on the GraphJet framework. Several other GraphJet based features and candidate sources are located here.



follow-recommendation-service (FRS)
Provides Users with recommendations for accounts to follow, and posts from those accounts.


Ranking
light-ranker
Light Ranker model used by search index (Earlybird) to rank posts.



heavy-ranker
Neural network for ranking candidate posts. One of the main signals used to select timeline posts post candidate sourcing.


Post mixing & filtering
home-mixer
Main service used to construct and serve the Home Timeline. Built on product-mixer.



visibility-filters
Responsible for filtering X content to support legal compliance, improve product quality, increase user trust, protect revenue through the use of hard-filtering, visible product treatments, and coarse-grained downranking.



timelineranker
Legacy service which provides relevance-scored posts from the Earlybird Search Index and UTEG service.



Recommended Notifications
The core components of Recommended Notifications included in this repository are listed below:



Type
Component
Description




Service
pushservice
Main recommendation service at X used to surface recommendations to our users via notifications.


Ranking
pushservice-light-ranker
Light Ranker model used by pushservice to rank posts. Bridges candidate generation and heavy ranking by pre-selecting highly-relevant candidates from the initial huge candidate pool.



pushservice-heavy-ranker
Multi-task learning model to predict the probabilities that the target users will open and engage with the sent notifications.



Build and test code
We include Bazel BUILD files for most components, but not a top-level BUILD or WORKSPACE file. We plan to add a more complete build and test system in the future.
Contributing
We invite the community to submit GitHub issues and pull requests for suggestions on improving the recommendation algorithm. We are working on tools to manage these suggestions and sync changes to our internal repository. Any security concerns or issues should be routed to our official bug bounty program through HackerOne. We hope to benefit from the collective intelligence and expertise of the global community in helping us identify issues and suggest improvements, ultimately leading to a better X.
Read our blog on the open source initiative here.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[We all dodged a bullet]]></title>
            <link>https://xeiaso.net/notes/2025/we-dodged-a-bullet/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45183029</guid>
            <description><![CDATA[That NPM attack could have been so much worse.]]></description>
            <content:encoded><![CDATA[ Loading...Please wait a moment while we ensure the security of your connection.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A new experimental Go API for JSON]]></title>
            <link>https://go.dev/blog/jsonv2-exp</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45182770</guid>
            <description><![CDATA[Go 1.25 introduces experimental support for encoding/json/jsontext and encoding/json/v2 packages.]]></description>
            <content:encoded><![CDATA[
      Joe Tsai, Daniel Martí, Johan Brandhorst-Satzkorn, Roger Peppe, Chris Hines,  and Damien Neil
      9 September 2025
      
Introduction
JavaScript Object Notation (JSON)
is a simple data interchange format. Almost 15 years ago,
we wrote about support for JSON in Go,
which introduced the ability to serialize and deserialize Go types to and from JSON data.
Since then, JSON has become the most popular data format used on the Internet.
It is widely read and written by Go programs,
and encoding/json now ranks as the 5th most imported Go package.
Over time, packages evolve with the needs of their users,
and encoding/json is no exception. This blog post is about Go 1.25’s new
experimental encoding/json/v2 and encoding/json/jsontext packages,
which bring long-awaited improvements and fixes.
This post argues for a new major API version,
provides an overview of the new packages,
and explains how you can make use of it.
The experimental packages are not visible by default and
may undergo future API changes.
Problems with encoding/json
Overall, encoding/json has held up well.
The idea of marshaling and unmarshaling arbitrary Go types
with some default representation in JSON, combined with the ability to
customize the representation, has proven to be highly flexible.
However, in the years since its introduction,
various users have identified numerous shortcomings.
Behavior flaws
There are various behavioral flaws in encoding/json:


Imprecise handling of JSON syntax: Over the years, JSON has seen
increased standardization in order for programs to properly communicate.
Generally, decoders have become stricter at rejecting ambiguous inputs,
to reduce the chance that two implementations will have different
(successful) interpretations of a particular JSON value.


encoding/json currently accepts invalid UTF-8,
whereas the latest Internet Standard (RFC 8259) requires valid UTF-8.
The default behavior should report an error in the presence of invalid UTF-8,
instead of introducing silent data corruption,
which may cause problems downstream.


encoding/json currently accepts objects with duplicate member names.
RFC 8259 does not specify how to handle duplicate names,
so an implementation is free to choose an arbitrary value,
merge the values, discard the values, or report an error.
The presence of a duplicate name results in a JSON value
without a universally agreed upon meaning.
This could be exploited by attackers in security applications
and has been exploited before (as in CVE-2017-12635).
The default behavior should err on the side of safety and reject duplicate names.




Leaking nilness of slices and maps: JSON is often used to communicate with
programs using JSON implementations that do not allow null to be unmarshaled
into a data type expected to be a JSON array or object.
Since encoding/json marshals a nil slice or map as a JSON null,
this may lead to errors when unmarshaling by other implementations.
A survey
indicated that most Go users prefer that nil slices and maps
are marshaled as an empty JSON array or object by default.


Case-insensitive unmarshaling: When unmarshaling, a JSON object member name
is resolved to a Go struct field name using a case-insensitive match.
This is a surprising default, a potential security vulnerability, and a performance limitation.


Inconsistent calling of methods: Due to an implementation detail,
MarshalJSON methods declared on a pointer receiver
are inconsistently called by encoding/json. While regarded as a bug,
this cannot be fixed as too many applications depend on the current behavior.


API deficiencies
The API of encoding/json can be tricky or restrictive:


It is difficult to correctly unmarshal from an io.Reader.
Users often write json.NewDecoder(r).Decode(v),
which fails to reject trailing junk at the end of the input.


Options can be set on the Encoder and Decoder types,
but cannot be used with the Marshal and Unmarshal functions.
Similarly, types implementing the Marshaler and Unmarshaler interfaces
cannot make use of the options and there is no way to plumb options down the call stack.
For example, the Decoder.DisallowUnknownFields option loses its effect
when calling a custom UnmarshalJSON method.


The Compact, Indent, and HTMLEscape functions write to a bytes.Buffer
instead of something more flexible like a []byte or io.Writer.
This limits the usability of those functions.


Performance limitations
Setting aside internal implementation details,
the public API commits it to certain performance limitations:


MarshalJSON: The MarshalJSON interface method forces the implementation
to allocate the returned []byte. Also, the semantics require that
encoding/json verify that the result is valid JSON
and also to reformat it to match the specified indentation.


UnmarshalJSON: The UnmarshalJSON interface method requires that
a complete JSON value be provided (without any trailing data).
This forces encoding/json to parse the JSON value to be unmarshaled
in its entirety to determine where it ends before it can call UnmarshalJSON.
Afterwards, the UnmarshalJSON method itself must parse the provided JSON value again.


Lack of streaming: Even though the Encoder and Decoder types operate
on an io.Writer or io.Reader, they buffer the entire JSON value in memory.
The Decoder.Token method for reading individual tokens is allocation-heavy
and there is no corresponding API for writing tokens.


Furthermore, if the implementation of a MarshalJSON or UnmarshalJSON method
recursively calls the Marshal or Unmarshal function,
then the performance becomes quadratic.
Trying to fix encoding/json directly
Introducing a new, incompatible major version of a package is a heavy consideration.
If possible, we should try to fix the existing package.
While it is relatively easy to add new features,
it is difficult to change existing features.
Unfortunately, these problems are inherent consequences of the existing API,
making them practically impossible to fix within the Go 1 compatibility promise.
We could in principle declare separate names, such as MarshalV2 or UnmarshalV2,
but that is tantamount to creating a parallel namespace within the same package.
This leads us to encoding/json/v2 (henceforth called v2),
where we can make these changes within a separate v2 namespace
in contrast to encoding/json (henceforth called v1).
Planning for encoding/json/v2
The planning for a new major version of encoding/json spanned years.
In late 2020, spurred on by the inability to fix issues in the current package,
Daniel Martí (one of the maintainers of encoding/json) first drafted his
thoughts on what a hypothetical v2 package should look like.
Separately, after previous work on the Go API for Protocol Buffers,
Joe Tsai was disapppointed that the protojson package
needed to use a custom JSON implementation because encoding/json was
neither capable of adhering to the stricter JSON standard that the
Protocol Buffer specification required,
nor of efficiently serializing JSON in a streaming manner.
Believing a brighter future for JSON was both beneficial and achievable,
Daniel and Joe joined forces to brainstorm on v2 and
started to build a prototype
(with the initial code being a polished version of the JSON serialization logic from the Go protobuf module).
Over time, a few others (Roger Peppe, Chris Hines, Johan Brandhorst-Satzkorn, and Damien Neil)
joined the effort by providing design review, code review, and regression testing.
Many of the early discussions are publicly available in our
recorded meetings and
meeting notes.
This work has been public since the beginning,
and we increasingly involved the wider Go community,
first with a
GopherCon talk and
discussion posted in late 2023,
formal proposal posted in early 2025,
and most recently adopting encoding/json/v2 as a Go experiment
(available in Go 1.25) for wider-scale testing by all Go users.
The v2 effort has been going on for 5 years,
incorporating feedback from many contributors and also gaining valuable
empirical experience from use in production settings.
It’s worth noting that it’s largely been developed and promoted by people
not employed by Google, demonstrating that the Go project is a collaborative endeavor
with a thriving global community dedicated to improving the Go ecosystem.
Building on encoding/json/jsontext
Before discussing the v2 API, we first introduce the experimental
encoding/json/jsontext package
that lays the foundation for future improvements to JSON in Go.
JSON serialization in Go can be broken down into two primary components:

syntactic functionality that is concerned with processing JSON based on its grammar, and
semantic functionality that defines the relationship between JSON values and Go values.

We use the terms “encode” and “decode” to describe syntactic functionality and
the terms “marshal” and “unmarshal” to describe semantic functionality.
We aim to provide a clear distinction between functionality
that is purely concerned with encoding versus that of marshaling.
This diagram provides an overview of this separation.
Purple blocks represent types, while blue blocks represent functions or methods.
The direction of the arrows approximately represents the flow of data.
The bottom half of the diagram, implemented by the jsontext package,
contains functionality that is only concerned with syntax,
while the upper half, implemented by the json/v2 package,
contains functionality that assigns semantic meaning to syntactic data
handled by the bottom half.
The basic API of jsontext is the following:
package jsontext

type Encoder struct { ... }
func NewEncoder(io.Writer, ...Options) *Encoder
func (*Encoder) WriteValue(Value) error
func (*Encoder) WriteToken(Token) error

type Decoder struct { ... }
func NewDecoder(io.Reader, ...Options) *Decoder
func (*Decoder) ReadValue() (Value, error)
func (*Decoder) ReadToken() (Token, error)

type Kind byte
type Value []byte
func (Value) Kind() Kind
type Token struct { ... }
func (Token) Kind() Kind

The jsontext package provides functionality for interacting with JSON
at a syntactic level and derives its name from
RFC 8259, section 2
where the grammar for JSON data is literally called JSON-text.
Since it only interacts with JSON at a syntactic level,
it does not depend on Go reflection.
The Encoder and
Decoder
provide support for encoding and decoding JSON values and tokens.
The constructors
accept variadic options
that affect the particular behavior of encoding and decoding.
Unlike the Encoder and Decoder types declared in v1,
the new types in jsontext avoid muddling the distinction between syntax and
semantics and operate in a truly streaming manner.
A JSON value is a complete unit of data and is represented in Go as
a named []byte.
It is identical to RawMessage in v1.
A JSON value is syntactically composed of one or more JSON tokens.
A JSON token is represented in Go as the opaque Token type
with constructors and accessor methods.
It is analogous to Token in v1
but is designed represent arbitrary JSON tokens without allocation.
To resolve the fundamental performance problems with
the MarshalJSON and UnmarshalJSON interface methods,
we need an efficient way of encoding and decoding JSON
as a streaming sequence of tokens and values.
In v2, we introduce the MarshalJSONTo and UnmarshalJSONFrom interface methods
that operate on an Encoder or Decoder, allowing the methods’ implementations
to process JSON in a purely streaming manner. Thus, the json package need not
be responsible for validating or formatting a JSON value returned by MarshalJSON,
nor would it need to be responsible for determining the boundaries of a JSON value
provided to UnmarshalJSON. These responsibilities belong to the Encoder and Decoder.
Introducing encoding/json/v2
Building on the jsontext package, we now introduce the experimental
encoding/json/v2 package.
It is designed to fix the aforementioned problems,
while remaining familiar to users of the v1 package.
Our goal is that usages of v1 will operate mostly the same if directly migrated to v2.
In this article, we will primarily cover the high-level API of v2.
For examples on how to use it, we encourage readers to
study the examples in the v2 package or
read Anton Zhiyanov’s blog covering the topic.
The basic API of v2 is the following:
package json

func Marshal(in any, opts ...Options) (out []byte, err error)
func MarshalWrite(out io.Writer, in any, opts ...Options) error
func MarshalEncode(out *jsontext.Encoder, in any, opts ...Options) error

func Unmarshal(in []byte, out any, opts ...Options) error
func UnmarshalRead(in io.Reader, out any, opts ...Options) error
func UnmarshalDecode(in *jsontext.Decoder, out any, opts ...Options) error

The Marshal
and Unmarshal functions
have a signature similar to v1, but accept options to configure their behavior.
The MarshalWrite
and UnmarshalRead functions
directly operate on an io.Writer or io.Reader,
avoiding the need to temporarily construct an Encoder or Decoder
just to write or read from such types.
The MarshalEncode
and UnmarshalDecode functions
operate on a jsontext.Encoder and jsontext.Decoder and
is actually the underlying implementation of the previously mentioned functions.
Unlike v1, options are a first-class argument to each of the marshal and unmarshal functions,
greatly extending the flexibility and configurability of v2.
There are several options available
in v2 which are not covered by this article.
Type-specified customization
Similar to v1, v2 allows types to define their own JSON representation
by satisfying particular interfaces.
type Marshaler interface {
    MarshalJSON() ([]byte, error)
}
type MarshalerTo interface {
    MarshalJSONTo(*jsontext.Encoder) error
}

type Unmarshaler interface {
    UnmarshalJSON([]byte) error
}
type UnmarshalerFrom interface {
    UnmarshalJSONFrom(*jsontext.Decoder) error
}

The Marshaler
and Unmarshaler interfaces
are identical to those in v1.
The new MarshalerTo
and UnmarshalerFrom interfaces
allow a type to represent itself as JSON using a jsontext.Encoder or jsontext.Decoder.
This allows options to be forwarded down the call stack, since options
can be retrieved via the Options accessor method on the Encoder or Decoder.
See the OrderedObject example
for how to implement a custom type that maintains the ordering of JSON object members.
Caller-specified customization
In v2, the caller of Marshal and Unmarshal can also specify
a custom JSON representation for any arbitrary type,
where caller-specified functions take precedence over type-defined methods
or the default representation for a particular type.
func WithMarshalers(*Marshalers) Options

type Marshalers struct { ... }
func MarshalFunc[T any](fn func(T) ([]byte, error)) *Marshalers
func MarshalToFunc[T any](fn func(*jsontext.Encoder, T) error) *Marshalers

func WithUnmarshalers(*Unmarshalers) Options

type Unmarshalers struct { ... }
func UnmarshalFunc[T any](fn func([]byte, T) error) *Unmarshalers
func UnmarshalFromFunc[T any](fn func(*jsontext.Decoder, T) error) *Unmarshalers

MarshalFunc and
MarshalToFunc
construct a custom marshaler that can be passed to a Marshal call
using WithMarshalers to override the marshaling of particular types.
Similarly,
UnmarshalFunc and
UnmarshalFromFunc
support similar customization for Unmarshal.
The ProtoJSON example
demonstrates how this feature allows serialization of all
proto.Message types
to be handled by the protojson package.
Behavior differences
While v2 aims to behave mostly the same as v1,
its behavior has changed in some ways
to address problems in v1, most notably:


v2 reports an error in the presence of invalid UTF-8.


v2 reports an error if a JSON object contains a duplicate name.


v2 marshals a nil Go slice or Go map as an empty JSON array or JSON object, respectively.


v2 unmarshals a JSON object into a Go struct using a
case-sensitive match from the JSON member name to the Go field name.


v2 redefines the omitempty tag option to omit a field if it would have
encoded as an “empty” JSON value (which are null, "", [], and {}).


v2 reports an error when trying to serialize a time.Duration,
which currently has no default representation,
but provides options to let the caller decide.


For most behavior changes, there is a struct tag option or caller-specified option
that can configure the behavior to operate under v1 or v2 semantics,
or even other caller-determined behavior.
See “Migrating to v2” for more information.
Performance optimizations
The Marshal performance of v2 is roughly at parity with v1.
Sometimes it is slightly faster, but other times it is slightly slower.
The Unmarshal performance of v2 is significantly faster than v1,
with benchmarks demonstrating improvements of up to 10x.
In order to obtain greater performance gains,
existing implementations of
Marshaler and
Unmarshaler should
migrate to also implement
MarshalerTo and
UnmarshalerFrom,
so that they can benefit from processing JSON in a purely streaming manner.
For example, recursive parsing of OpenAPI specifications in UnmarshalJSON methods
significantly hurt performance in a particular service of Kubernetes
(see kubernetes/kube-openapi#315),
while switching to UnmarshalJSONFrom improved performance by orders of magnitude.
For more information, see the
go-json-experiment/jsonbench
repository.
Retroactively improving encoding/json
We want to avoid two separate JSON implementations in the Go standard library,
so it is critical that, under the hood, v1 is implemented in terms of v2.
There are several benefits to this approach:


Gradual migration: The Marshal and Unmarshal functions in v1 or v2
represent a set of default behaviors that operate according to v1 or v2 semantics.
Options can be specified that configure Marshal or Unmarshal to operate with
entirely v1, mostly v1 with a some v2, a mix of v1 or v2,
mostly v2 with some v1, or entirely v2 semantics.
This allows for gradual migration between the default behaviors of the two versions.


Feature inheritance: As backward-compatible features are added to v2,
they will inherently be made available in v1. For example, v2 adds
support for several new struct tag options such as inline or format and also
support for the MarshalJSONTo and UnmarshalJSONFrom interface methods,
which are both more performant and flexible.
When v1 is implemented in terms of v2, it will inherit support for these features.


Reduced maintenance: Maintenance of a widely used package demands significant effort.
By having v1 and v2 use the same implementation, the maintenance burden is reduced.
In general, a single change will fix bugs, improve performance, or add functionality to both versions.
There is no need to backport a v2 change with an equivalent v1 change.


While select parts of v1 may be deprecated over time (supposing v2 graduates from being an experiment),
the package as a whole will never be deprecated.
Migrating to v2 will be encouraged, but not required.
The Go project will not drop support for v1.
Experimenting with jsonv2
The newer API in the encoding/json/jsontext and encoding/json/v2 packages are not visible by default.
To use them, build your code with GOEXPERIMENT=jsonv2 set in your environment or with the goexperiment.jsonv2 build tag.
The nature of an experiment is that the API is unstable and may change in the future.
Though the API is unstable, the implementation is of a high quality and
has been successfully used in production by several major projects.
The fact that v1 is implemented in terms of v2 means that the underlying implementation of v1
is completely different when building under the jsonv2 experiment.
Without changing any code, you should be able to run your tests
under jsonv2 and theoretically nothing new should fail:
GOEXPERIMENT=jsonv2 go test ./...

The re-implementation of v1 in terms of v2 aims to provide identical behavior
within the bounds of the Go 1 compatibility promise,
though some differences might be observable such as the exact wording of error messages.
We encourage you to run your tests under jsonv2 and
report any regressions on the issue tracker.
Becoming an experiment in Go 1.25 is a significant milestone on the road to
formally adopting encoding/json/jsontext and encoding/json/v2 into the standard library.
However, the purpose of the jsonv2 experiment is to gain broader experience.
Your feedback will determine our next steps, and the outcome of this experiment,
which may result in anything from abandonment of the effort, to adoption as stable packages of Go 1.26.
Please share your experience on go.dev/issue/71497, and help determine the future of Go.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Claude can now create and edit files]]></title>
            <link>https://www.anthropic.com/news/create-files</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45182381</guid>
            <description><![CDATA[Claude can now create and edit Excel spreadsheets, documents, PowerPoint slide decks, and PDFs directly in Claude.ai and the desktop app.]]></description>
            <content:encoded><![CDATA[Claude can now create and edit Excel spreadsheets, documents, PowerPoint slide decks, and PDFs directly in Claude.ai and the desktop app. This transforms how you work with Claude—instead of only receiving text responses or in-app artifacts, you can describe what you need, upload relevant data, and get ready-to-use files in return.File creation is now available as a preview for Max, Team, and Enterprise plan users. Pro users will get access in the coming weeks.What you can doClaude creates actual files from your instructions—whether working from uploaded data, researching information, or building from scratch. Here are just a few examples:Turn data into insights: Give Claude raw data and get back polished outputs with cleaned data, statistical analysis, charts, and written insights explaining what matters.Build spreadsheets: Describe what you need—financial models with scenario analysis, project trackers with automated dashboards, or budget templates with variance calculations. Claude creates it with working formulas and multiple sheets.Cross-format work: Upload a PDF report and get PowerPoint slides. Share meeting notes and get a formatted document. Upload invoices and get organized spreadsheets with calculations. Claude handles the tedious work and presents information how you need it.Whether you need a customer segmentation analysis, sales forecasting, or budget tracking, Claude handles the technical work and produces the files you need. File creation turns projects that normally require programming expertise, statistical knowledge, and hours of effort into minutes of conversation.How it works: Claude’s computerOver the past year we've seen Claude move from answering questions to completing entire projects, and now we're making that power more accessible. We've given Claude access to a private computer environment where it can write code and run programs to produce the files and analyses you need.This transforms Claude from an advisor into an active collaborator. You bring the context and strategy; Claude handles the technical implementation behind the scenes. This shows where we’re headed: making sophisticated multi-step work accessible through conversation. As these capabilities expand, the gap between idea and execution will keep shrinking.Getting startedTo start creating files:Enable "Upgraded file creation and analysis" under Settings > Features > ExperimentalUpload relevant files or describe what you needGuide Claude through the work via chatDownload your completed files or save directly to Google DriveStart with straightforward tasks like data cleaning or simple reports, then work up to complex projects like financial models once you're comfortable with how Claude handles files.This feature gives Claude internet access to create and analyze files, which may put your data at risk. Monitor chats closely when using this feature. Learn more.]]></content:encoded>
        </item>
    </channel>
</rss>