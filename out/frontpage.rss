<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Fri, 12 Sep 2025 14:51:14 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Over 100 ships have sailed with fake insurance from the Norwegian Ro Marine]]></title>
            <link>https://www.nrk.no/vestland/xl/over-100-ships-have-sailed-without-legitimate-insurance-from-the-norwegian-company-ro-marine-1.17565216</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45221996</guid>
            <description><![CDATA[­]]></description>
            <content:encoded><![CDATA[
All large ships must have insurance, and Ro Marine has provided this in a big way.
The Norwegian company did not have permission to sell insurance but did it anyway — to clients worldwide.
In March, we reported how select ships used false papers to deceive inspectors in NATO countries.
Now, NRK and Dossier Center can reveal how extensive and global the fraud was: over 100 ships have sailed with illegitimate insurance documents from Ro Marine.
“It's very serious and unusual that such a serious fraud happens with the help of a Norwegian company. At worst, it could undermine the trust in the Norwegian maritime industry,” says Thomas Angell Bergh from the Norwegian Maritime Authority.

Most of the fake insurance papers were for ships transporting goods out of Russia, mainly oil.
NRK has contacted dozens of Ro Marine’s clients. Only a few were willing to speak with us.
One of the customers says he was scammed by Ro Marine because he believed the insurance policies he purchased were valid.
Another says that "everyone" knows Ro Marine is fake, but that the ships need Western insurance documents. Such documents can make it easier to sail freely, without Western countries interfering in the transport.
This signature appears time and again on documents issued by Ro Marine.






The search for the owner of the signature led us to a Russian website, where you can download many different signatures. The one used by Ro Marine belongs to a "doctor," says the website.
Norwegian-Russian scam
Behind the global hoax is this man.






His name is Andrey Mochalin, a Russian citizen and resident of St. Petersburg. Mochalin has experience working for a reputable Norwegian insurance company.
In March, he, two Norwegians and a Bulgarian were charged with forging documents and operating an insurance business without a permit. Mochalin is also being investigated for violating international sanctions.
Through an attorney, the Norwegians say they do not understand the charges (see their full response in the fact box later in the article). The Bulgarian tells NRK he is innocent.
For several months, NRK and Dossier Center have tried unsuccessfully to get in touch with Mochalin. At the same time, we investigated Ro Marine's operations. What we found surprised experts.
“Among the worst of the worst”
Sanctions expert David Tannenbaum is shocked by the the scale of it. He knows how far Russia is willing to go to protect its oil exports, which are crucial for funding Putin’s illegal war in Ukraine.
Sanctions against Russia can make it difficult for tankers carrying Russian oil to obtain insurance that is approved in the West. But they are finding ways around it.
This is where Ro Marine enters the picture.
“Seems like Ro Marine is popular with sanctions evaders. You don't have this roster by accident,” says David Tannenbaum from Deep Blue Intelligence. The American company specializes in detecting sanctions evasion.






For Tannenbaum, it appears that Ro Marine primarily serves the shadow fleet or ships engaged in illegal activities or sanctions evasion.
“Is Ro Marine the worst of the worst? I think they're definitely in contention,” he both asks and answers.
Our documentation shows, for example, that Gatik, known as one of the largest players in the Russian shadow fleet, appears to have placed almost all of their ships with Ro Marine.
In addition, six ships linked to the Russian gas giant Novatek have had fake insurance from the Norwegian company. All six have sailed along the Norwegian coast towards the gas facility Arctic LNG2 in Russia, which is sanctioned by the USA. The ships are sanctioned by the EU.
Ships linked to the sanctioned Iranian oil industry and Iranian military have also been customers of Ro Marine.

Dangerous cargo from Russia
Among the cargo ships that have purchased invalid insurance from Ro Marine, we found "Agattu". Here, the vessel is sailing between Denmark and Sweden with explosives in the cargo, bound for Algeria.

    Drone footage: Ole Jakobsen
  
Three tonnes of missile weapons were transported from St. Petersburg in Russia, according to Russian port records.
The ship joins the ranks of Ro Marine customers who have contributed to Russia's export revenues by transporting goods from Russian ports. This does not apply to all customers, but the vast majority, according to research by NRK and Dossier Center.
Provoked a NATO country
Not long ago, it was difficult to imagine that ordinary shipping in Europe could lead to military confrontation. Today, the situation is different. European countries may intervene in oil shipments that violate Western sanctions, which are intended to oppose Putin's bloody war in Ukraine. Russia has its countermeasures.
An illustrative example happened to a Ro Marine customer in mid-May: The oil tanker "Blint".
The Estonian navy suspected the ship was sailing without a flag—a clear violation of international regulations. The navy radioed the vessel, but according to Estonian authorities, the captain refused to cooperate.
Suddenly, a Russian fighter jet came whizzing over them, violating the NATO country’s airspace. Instead of stopping, the sanctioned tanker sailed on to the Russian oil port of Primorsk.
This video of the incident is filmed from inside the ship.

    
  
Like many other tankers transporting Russian oil, "Blint" has had fake insurance from Ro Marine, NRK can document.
In this way, Ro Marine has acted in line with the interests of the Russian authorities.
Russia's president, October 2023:
“Thanks to the actions of companies and authorities, the tanker fleet has grown, new mechanisms for payment, insurance and reinsurance of our cargo have been created.”

Researcher Åse Gilje Østensen at the Norwegian Naval Academy tells that “sometimes, entities act in the Russian interest on their own initiative. Sometimes, Putin or other central figures around him have signaled that certain initiatives are welcome. In such cases, actors will often seek to please the regime.”

“Russia is an authoritarian regime that can force civilian actors to assist the regime. Other times, state bodies may be more directly involved. What is the case regarding Ro Marine is difficult to know.”  The Russian Embassy in Norway does not answer NRK's questions about Ro Marine's operations because the company is Norwegian and refers us to the Norwegian authorities. They also do not respond to whether Ro Marine has acted in accordance with the interests of Russian authorities, or any other statements and findings in this case.
The embassy does however choose to point out that the sanctions against the "shadow fleet" are contrary to international law.

Approved by the largest flag state
For several years, the Norwegian company operated without permission and with fake documents without any authorities noticing — neither in Norway nor abroad.
The earliest objectionable activity was in 2021, according to NRK’s investigation.
At that time, Ro Marine applied to be recognized as an insurance company by the world's largest flag state, Panama, despite missing the necessary approval from Norwegian authorities.




NRK has found that most ships among Ro Marine's clients are registered in Panama.




Ro Marine sent the flag state a forged reference, which was originally given to a completely different company, sources tell NRK. With this reference, Ro Marine was recognized by the flag state of Panama in December 2021.

In the time that followed, several flag states were fooled by Ro Marine, including by forged documents that looked like they were from the Norwegian Financial Supervisory Authority.
The illegal activity continued unencumbered until NRK alerted the flag states. 
Russian owner worked many years for a Norwegian company
The Russian owner of Ro Marine, Andrey Mochalin, has gone underground. Mochalin has not responded to any of the numerous inquiries from NRK and Dossier Center.
For over ten years, he worked for a legitimate Norwegian insurance company. Most of the time, he worked from St. Petersburg.
Occasionally, he visited his employer's office in Oslo. Here he is pictured with his former colleagues.

At this time, two of his Norwegian managers also owned another company that offered insurance. This company later became Ro Marine.
A few weeks after Russia's war against Ukraine began in 2022, Ro Marine passed from Norwegian to Russian ownership.
This is when Mochalin bought Ro Marine from the company of the two Norwegians for almost two million NOK.
These two Norwegians, along with Andrey Mochalin and a Bulgarian citizen, are charged with forging documents and conducting illegal insurance business.
Out of respect for the ongoing investigation, the Norwegians did not want to be interviewed by NRK, according to their lawyer.




Ro Marine claimed its address was here at the Norwegian Shipowners' Association building in Oslo, but according to the association, that was not correct.




Money trail in Russia
Alongside the Norwegian company Ro Marine, Andrey Mochalin runs a company in St. Petersburg with direct links to Ro Marine.
NRK and Dossier Center have obtained access to bank documents for his Russian company.
The money transfers are many, and some stand out.
Last year, there were 36 payments totaling approximately five million NOK that we can connect to Ro Marine. 
The bank transfers were marked with the name of the ship and the policy number.

The number corresponds to insurance documents issued by Ro Marine.

The company’s account also shows salary payments to Mochalin.
Those charged






Here’s what we can share about the Russian Andrey Mochalin and the others charged in the case (in parentheses is the time period they had official roles in Ro Marine):
A. Mochalin (2022-2025): 

Sole owner of Ro Marine during the period when the company's illegal insurance activities were most widespread, according to our documentation.
Majority owner of the Russian company that received payments worth millions of NOK last year marked for Ro Marine.

Norwegian 1 (2016-2023): 

Registered as co-owner in the Russian company that last year received payments worth millions of NOK marked for Ro Marine.
Owner and board chairman in 2021 when someone sent a forged reference on behalf of Ro Marine to Panama. At the time the company lacked a permit to sell insurance.
In 2024, a year after he left the board, contributed to ensuring Ro Marine’s continued operations by securing a new board member: the charged Bulgarian.

Norwegian 2 (2017-2023): 

Owner and managing director in 2021 when someone sent a forged reference on behalf of Ro Marine to Panama. At the time the company lacked a permit to sell insurance.

Bulgarian (2024-2025): 

Car mechanic without any experience in marine insurance.
Tenant of Norwegian 1 for years.
Board member in Ro Marine for over half a year, up to March 2025.

After the Norwegians left the board in 2023, the Norwegian company had a problem. With a Russian as the only board member, the company was in violation of the Companies Act of Norway, which requires at least one board member to be from an EEA country. Since Bulgaria is a member of the EEA, the Bulgarian could solve the issue.
According to the Bulgarian, his Norwegian landlord arranged the board position to help him financially.
However, he never received the money he was promised and left the board because he realized something was wrong, the Bulgarian says. He does not understand the police's suspicion towards him.
“I had no idea what they were doing. I have nothing to hide,” says the Bulgarian to NRK. He has been contacted by the police and says he is fully cooperating with them.


The consequences of uncovering the scam
After NRK's revelation in March, several flag states have issued stop orders to ships that used Ro Marine.
Panama alone has banned 16 ships from sailing because the ships have not shown new, real insurance within the deadline they were given.
The UK has sanctioned Ro Marine. Ro Marines’s website has been taken down. In July, the Oslo District Court forcibly dissolved the company for breach of accounting obligations, because Ro Marine had not submitted annual accounts for 2023.
However, the Russian company in St. Petersburg, which received payments worth millions of NOK marked for Ro Marine, is still active.
One month after NRK's revelation in March, another ship in the Russian shadow fleet presented a fake insurance certificate from Ro Marine. Inspectors at the oil port of Primorsk were presented with a document "signed in Oslo."
The expiration date of the fake insurance?
April next year.
NRK has contacted the companies that operate the mentioned ships "Agattu" and "Blint", with no response. We have not been able to contact Gatik. Novatek has not responded to our questions. 




Publisert

12.09.2025, kl. 07.00



]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Justice Department Announces Actions to Combat North Korean Remote IT Workers]]></title>
            <link>https://www.justice.gov/opa/pr/justice-department-announces-coordinated-nationwide-actions-combat-north-korean-remote</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45221938</guid>
            <description><![CDATA[The Justice Department announced today coordinated actions against the Democratic People’s Republic of North Korea (DPRK) government’s schemes to fund its regime through remote information technology (IT) work for U.S. companies.]]></description>
            <content:encoded><![CDATA[Note: This press release has been updated to reflect new information regarding the guilty plea of one defendant in the District of Massachusetts.The Justice Department announced today coordinated actions against the Democratic People’s Republic of North Korea (DPRK) government’s schemes to fund its regime through remote information technology (IT) work for U.S. companies. These actions include two indictments, an information and related plea agreement, an arrest, searches of 29 known or suspected “laptop farms” across 16 states, and the seizure of 29 financial accounts used to launder illicit funds and 21 fraudulent websites.According to court documents, the schemes involve North Korean individuals fraudulently obtaining employment with U.S. companies as remote IT workers, using stolen and fake identities. The North Korean actors were assisted by individuals in the United States, China, United Arab Emirates, and Taiwan, and successfully obtained employment with more than 100 U.S. companies.As alleged in court documents, certain U.S.-based individuals enabled one of the schemes by creating front companies and fraudulent websites to promote the bona fides of the remote IT workers, and hosted laptop farms where the remote North Korean IT workers could remote access into U.S. victim company-provided laptop computers. Once employed, the North Korean IT workers received regular salary payments, and they gained access to, and in some cases stole, sensitive employer information such as export controlled U.S. military technology and virtual currency. In another scheme, North Korean IT workers used false or fraudulently obtained identities to gain employment with an Atlanta, Georgia-based blockchain research and development company and stole virtual currency worth approximately over $900,000.“These schemes target and steal from U.S. companies and are designed to evade sanctions and fund the North Korean regime’s illicit programs, including its weapons programs,” said Assistant Attorney General John A. Eisenberg of the Department’s National Security Division. “The Justice Department, along with our law enforcement, private sector, and international partners, will persistently pursue and dismantle these cyber-enabled revenue generation networks.”“North Korean IT workers defraud American companies and steal the identities of private citizens, all in support of the North Korean regime,” said Assistant Director Brett Leatherman of FBI’s Cyber Division. “That is why the FBI and our partners continue to work together to disrupt infrastructure, seize revenue, indict overseas IT workers, and arrest their enablers in the United States. Let the actions announced today serve as a warning: if you host laptop farms for the benefit of North Korean actors, law enforcement will be waiting for you.”“North Korea remains intent on funding its weapons programs by defrauding U.S. companies and exploiting American victims of identity theft, but the FBI is equally intent on disrupting this massive campaign and bringing its perpetrators to justice,” said Assistant Director Roman Rozhavsky of the FBI Counterintelligence Division. “North Korean IT workers posing as U.S. citizens fraudulently obtained employment with American businesses so they could funnel hundreds of millions of dollars to North Korea’s authoritarian regime. The FBI will do everything in our power to defend the homeland and protect Americans from being victimized by the North Korean government, and we ask all U.S. companies that employ remote workers to remain vigilant to this sophisticated threat.”Zhenxing Wang, et al. Indictment, Seizure Warrants, and Arrest – District of MassachusettsToday, the United States Attorney’s Office for the District of Massachusetts and the National Security Division announced the arrest of U.S. national Zhenxing “Danny” Wang of New Jersey pursuant to a five-count indictment. The indictment describes a multi-year fraud scheme by Wang and his co-conspirators to obtain remote IT work with U.S. companies that generated more than $5 million in revenue. The indictment also charges Chinese nationals Jing Bin Huang (靖斌 黄), Baoyu Zhou (周宝玉), Tong Yuze (佟雨泽), Yongzhe Xu (徐勇哲 andيونجزهي أكسو), Ziyou Yuan (زيو) and Zhenbang Zhou (周震邦), and Taiwanese nationals Mengting Liu (劉 孟婷) and Enchia Liu (刘恩) for their roles in the scheme. A second U.S. national, Kejia “Tony” Wang of New Jersey, has agreed to plead guilty for his role in the scheme and was charged separately in an information unsealed today.“The threat posed by DPRK operatives is both real and immediate. Thousands of North Korean cyber operatives have been trained and deployed by the regime to blend into the global digital workforce and systematically target U.S. companies,” said U.S. Attorney Leah B. Foley for the District of Massachusetts. “We will continue to work relentlessly to protect U.S. businesses and ensure they are not inadvertently fueling the DPRK’s unlawful and dangerous ambitions.”According to the indictment, from approximately 2021 until October 2024, the defendants and other co-conspirators compromised the identities of more than 80 U.S. persons to obtain remote jobs at more than 100 U.S. companies, including many Fortune 500 companies, and caused U.S. victim companies to incur legal fees, computer network remediation costs, and other damages and losses of at least $3 million. Overseas IT workers were assisted by Kejia Wang, Zhenxing Wang, and at least four other identified U.S. facilitators. Kejia Wang, for example, communicated with overseas co-conspirators and IT workers, and traveled to Shenyang and Dandong, China, including in 2023, to meet with them about the scheme. To deceive U.S. companies into believing the IT workers were located in the United States, Kejia Wang, Zhenxing Wang, and the other U.S. facilitators received and/or hosted laptops belonging to U.S. companies at their residences, and enabled overseas IT workers to access the laptops remotely by, among other things, connecting the laptops to hardware devices designed to allow for remote access (referred to as keyboard-video-mouse or “KVM” switches).Kejia Wang and Zhenxing Wang also created shell companies with corresponding websites and financial accounts, including Hopana Tech LLC, Tony WKJ LLC, and Independent Lab LLC, to make it appear as though the overseas IT workers were affiliated with legitimate U.S. businesses. Kejia Wang and Zhenxing Wang established these and other financial accounts to receive money from victimized U.S. companies, much of which was subsequently transferred to overseas co‑conspirators. In exchange for their services, Kejia Wang, Zhenxing Wang, and the four other U.S. facilitators received a total of at least $696,000 from the IT workers.IT workers employed under this scheme also gained access to sensitive employer data and source code, including International Traffic in Arms Regulations (ITAR) data from a California-based defense contractor that develops artificial intelligence-powered equipment and technologies. Specifically, between on or about Jan. 19, 2024, and on or about April 2, 2024, an overseas co-conspirator remotely accessed without authorization the company’s laptop and computer files  containing technical data and other information. The stolen data included information marked as being controlled under the ITAR.Simultaneously with today’s announcement, the FBI and Defense Criminal Investigative Service (DCIS) seized 17 web domains used in furtherance of the charged scheme and further seized 29 financial accounts, holding tens of thousands of dollars in funds, used to launder revenue for the North Korean regime through the remote IT work scheme.Previously, in October 2024, as part of this investigation, federal law enforcement executed searches at eight locations across three states that resulted in the recovery of more than 70 laptops and remote access devices, such as KVMs. Simultaneously with that action, the FBI seized four web domains associated with Kejia Wang’s and Zhenxing Wang’s shell companies used to facilitate North Korean IT work.The FBI Las Vegas Field Office, DCIS San Diego Resident Agency, and Homeland Security Investigations San Diego Field Office are investigating the case.Assistant U.S. Attorney Jason Casey for the District of Massachusetts and Trial Attorney Gregory J. Nicosia, Jr. of the National Security Division’s National Security Cyber Section are prosecuting the case, with significant assistance from Legal Assistants Daniel Boucher and Margaret Coppes. Valuable assistance was also provided by Mark A. Murphy of the National Security Division’s Counterintelligence and Export Control Section and the U.S. Attorneys’ Offices for the District of New Jersey, Eastern District of New York, and Southern District of California.Kim Kwang Jin et al. Indictment – Northern District of GeorgiaToday, the Northern District of Georgia unsealed a five-count wire fraud and money laundering indictment charging four North Korean nationals, Kim Kwang Jin (김관진), Kang Tae Bok (강태복), Jong Pong Ju (정봉주) and Chang Nam Il (창남일), with a scheme to steal virtual currency from two companies, valued at over $900,000 at the time of the thefts, and to launder proceeds of those thefts. The defendants remain at large and wanted by the FBI.“The defendants used fake and stolen personal identities to conceal their North Korean nationality, pose as remote IT workers, and exploit their victims’ trust to steal hundreds of thousands of dollars,” said U.S. Attorney Theodore S. Hertzberg for the Northern District of Georgia. “This indictment highlights the unique threat North Korea poses to companies that hire remote IT workers and underscores our resolve to prosecute any actor, in the United States or abroad, who steals from Georgia businesses.”According to the indictment, the defendants traveled to the United Arab Emirates on North Korean travel documents and worked as a co-located team. In approximately December 2020 and May 2021, respectively, Kim Kwang Jin (using victim P.S.’s stolen identity) and Jong Pong Ju (using the alias “Bryan Cho”) were hired by a blockchain research and development company headquartered in Atlanta, Georgia, and a virtual token company based in Serbia. Both defendants concealed their North Korean identities from their employers by providing false identification documents containing a mix of stolen and fraudulent identity information. Neither company would have hired Kim Kwang Jin and Jong Pong Ju had they known that they were North Korean citizens. Later, on a recommendation from Jong Pong Ju, the Serbian company hired “Peter Xiao,” who in fact was Chang Nam Il.After gaining their employers’ trust, Kim Kwang Jin and Jong Pong Ju were assigned projects that provided them access to their employers’ virtual currency assets. In February 2022, Jong Pong Ju used that access to steal virtual currency worth approximately $175,000 at the time of the theft, sending it to a virtual currency address he controlled. In March 2022, Kim Kwang Jin stole virtual currency worth approximately $740,000 at the time of theft by modifying the source code of two of his employer’s smart contracts, then sending it to a virtual currency address he controlled.To launder the funds after the thefts, Kim Kwang Jin and Jong Pong Ju “mixed” the stolen funds using the virtual currency mixer Tornado Cash and then transferred the funds to virtual currency exchange accounts controlled by defendants Kang Tae Bok and Chang Nam Il but held in the name of aliases. These accounts were opened using fraudulent Malaysian identification documents.The FBI Atlanta Field Office is investigating the case.Assistant U.S. Attorneys Samir Kaushal and Alex Sistla for the Northern District of Georgia and Trial Attorney Jacques Singer-Emery of the National Security Division’s National Security Cyber Section are prosecuting the case.21 Searches of Known or Suspected U.S.-based Laptop Farms – Multi-DistrictBetween June 10 and June 17, 2025, the FBI executed searches of 21 premises across 14 states hosting known and suspected laptop farms. These actions, coordinated by the FBI Denver Field Office, related to investigations of North Korean remote IT worker schemes being conducted by the U.S. Attorneys’ Offices of the District of Colorado, Eastern District of Missouri, and Northern District of Texas. In total, the FBI seized approximately 137 laptops.Valuable assistance was provided by the U.S. Attorney’s Offices for the District of Connecticut, the Eastern District of Michigan, the Eastern District of Wisconsin, the Middle District of Florida, the Northern District of Georgia, the Northern District of Illinois, the Northern District of Indiana, the District of Oregon, the Southern District of Florida, the Southern District of Ohio, the Western District of New York, and the Western District of Pennsylvania.***The Department’s actions to combat these schemes are the latest in a series of law enforcement actions under a joint National Security Division and FBI Cyber and Counterintelligence Divisions effort, the DPRK RevGen: Domestic Enabler Initiative. This effort prioritizes targeting and disrupting the DPRK’s illicit revenue generation schemes and its U.S.-based enablers. The Department previously announced other actions pursuant to the initiative, including in January 2025 and prior, as well as the filing of a civil forfeiture complaint in early June 2025 for over $7.74 million tied to an illegal employment scheme.As the FBI has described in Public Service Announcements published in May 2024 and January 2025, North Korean remote IT workers posing as legitimate remote IT workers have committed data extortion and exfiltrated the proprietary and sensitive data from U.S. companies. DPRK IT worker schemes typically involve the use of stolen identities, alias emails, social media, online cross-border payment platforms, and online job site accounts, as well as false websites, proxy computers, and witting and unwitting third parties located in the U.S. and elsewhere.Other public advisories about the threats, red flag indicators, and potential mitigation measures for these schemes include a May 2022 advisory released by the FBI, Department of the Treasury, and Department of State; a July 2023 advisory from the Office of the Director of National Intelligence; and guidance issued in October 2023 by the United States and the Republic of Korea (South Korea). As described the May 2022 advisory, North Korean IT workers have been known individually to earn up to $300,000 annually, generating hundreds of millions of dollars collectively each year, on behalf of designated entities, such as the North Korean Ministry of Defense and others directly involved in the DPRK’s weapons programs.The U.S. Department of State has offered potential rewards for up to $5 million in support of international efforts to disrupt the DPRK’s illicit financial activities, including for cybercrimes, money laundering, and sanctions evasion.The details in the above-described court documents are merely allegations. All defendants are presumed innocent until proven guilty beyond a reasonable doubt in a court of law.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Chat Control faces blocking minority in the EU]]></title>
            <link>https://twitter.com/TutaPrivacy/status/1966384776883142661</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45221580</guid>
            <description><![CDATA[Something went wrong, but don’t fret — let’s give it another shot.]]></description>
            <content:encoded><![CDATA[Something went wrong, but don’t fret — let’s give it another shot. Some privacy related extensions may cause issues on x.com. Please disable them and try again.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AI Startup Founders Tout a Winning Formula–No Booze, No Sleep, No Fun]]></title>
            <link>https://www.wsj.com/business/entrepreneurship/artificial-intelligence-startup-founders-bc730406</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45221423</guid>
        </item>
        <item>
            <title><![CDATA[The Treasury Is Expanding the Patriot Act to Attack Bitcoin Self Custody]]></title>
            <link>https://www.tftc.io/treasury-iexpanding-patriot-act/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45221274</guid>
            <description><![CDATA[We shouldn't have to cater to the lowest common denominator.]]></description>
            <content:encoded><![CDATA[
                        Marty's Bentvia The RageWe warned a couple of months ago when the Trump administration's "Crypto Brief" was released that there was some language in the brief that advised the government to expand the Patriot Act to account for digital assets. Well, it looks like FinCen and the Treasury have been working on guidelines and a rough outline is shared above courtesy of The Rage, and they are absolutely horrid.It seems that FinCen and the Treasury are preparing to outlaw the use of CoinJoin, atomic swaps, single address use, and transaction broadcast timing delays. All of which are common best use practices that I would recommend any bitcoiner leveraging self-custody practice. This is an all out attack on financial privacy within bitcoin. If enacted, any user who leverages these tools will be flagged as a suspicious, any attempts to send a UTXO that has touched any of these tools will be rejected by regulated services, and could potentially be sent to prison.This is an absurd affront to common sensibilities and freedom in the digital age. The fact that they want to prevent people from using single addresses for individual UTXOs is patently absurd. Not only is it a massive infringement on privacy, but it makes bitcoin usage less economically efficient and degrades the security of every bitcoiner. Loading up a single address with too many UTXOs degrades the entropy of a public-private key pair and makes it easier to brute force a user's private key.Instead of expanding the Patriot Act, it should be abolished. Instead of trying to eliminate financial privacy for the 99.9% of law abiding citizens in this country, the government should be actively trying to foster an environment in which it can be improved. The proposed solutions will do nothing but put good Americans in harm's way and degrade the security of their savings.We shouldn't have to live in a world where standards cater to the lowest common denominator, in this case criminals, and make things worse off for the overwhelming majority of the population. It's crazy that this even has to be said. The onus is on law enforcement to be so good at their jobs that they are able to prevent crimes from happening before they occur and effectively bring criminals to heel after they commit crimes. It shouldn't be on a neutral protocol and the industry being built on top of it that, when used effectively, provides people with a stable monetary system that respects user privacy and equips them with the tools to receive and spend in a way that provides them with peace of mind.Why should everyone have to suffer because of a few bad apples? Isn't that letting the terrorist win? Bitcoin Is Becoming Less Volatile as It Integrates Into Traditional Finance InfrastructureMel Mattison revealed a fascinating shift in Bitcoin's market dynamics that challenges conventional crypto wisdom. He pointed out that Bitcoin futures now exhibit lower volatility than platinum futures - a remarkable transformation for an asset once synonymous with wild price swings. The proliferation of ETFs, options, futures, and other traditional financial instruments has fundamentally altered Bitcoin's behavior, creating what Mel calls "volatility suppression." This institutionalization comes with trade-offs: while reducing dramatic downswings, it also caps explosive upside potential."Bitcoin is becoming a TradFi security instrument and it's getting TradFi vol." - Mel MattisonMel argued that the relationship between volatility and returns means investors must recalibrate expectations. Where 100% annual gains once seemed routine, he now considers 50% returns "massive" for this new era of Bitcoin. This maturation reflects Bitcoin's evolution from speculative experiment to financial infrastructure - less exciting perhaps, but ultimately more sustainable for long-term adoption.Check out the full podcast here for more on China's gold strategy, Fed independence battles, and housing market manipulation plans.Headlines of the DayNew Bill for Strategic Bitcoin Reserve - via XSEC to Host Crypto Roundtable October 17 - via XResearch Proposes Bitcoin for Mars Trade Standard - via XSecure Your Bitcoin The Hard WayTom Honzik has helped 1,000+ people secure more than 5,000 BTC. Now, TFTC and Unchained are teaming up for a live online session on bitcoin custody.What you’ll learn:Biggest mistakes that cause lost coinsTradeoffs of exchanges, ETFs, singlesig, and multisigHow to get optimal security without blindly trust custodians or DIY riskStick around for the AMA to ask Tom Honzik and Marty Bent anything—from privacy considerations to the tradeoffs of different multisig quorums.Register NowObscura – The World’s Best VPN Built by BitcoinersCreated by Carl Dong (former Bitcoin Core contributor), unlike other VPNs, it can’t log your activity by design, delivering verifiable privacy you can trust.USE CODE TFTC25Outsmarts internet censorship: works even on the most restrictive Wi-Fi networks where other VPNs fail.Pay with bitcoin over Lightning: better privacy and low fees.No email required: accounts are generated like bitcoin wallets.No trade-offs: browse freely with fast, reliable speeds.Exclusive Deal for TFTC Listeners:Sign up at obscura.net and use code TFTC25 for 25% off your first 12 months.Now available on macOS, iOS, and WireGuard, with more platforms coming soon — so your privacy travels with you wherever you go.Ten31, the largest bitcoin-focused investor, has deployed $200M across 30+ companies through three funds. I am a Managing Partner at Ten31 and am very proud of the work we are doing. Learn more at ten31.vc/invest.Final thought...Rest in peace, Charlie Kirk. Pray for humanity and for peace. Download our free browser extension, Opportunity Cost: https://www.opportunitycost.app/ start thinking in SATS today. Get this newsletter sent to your inbox daily: https://www.tftc.io/bitcoin-brief/Subscribe to our YouTube channels and follow us on Nostr and X:

  
  
  
  

 


                        
        
          
                        
                    
        
        Spread the signal, earn Bitcoin.
        Get your unique referral link when you subscribe.
        Learn more →
      
                    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Lumina-DiMOO: An open-source discrete multimodal diffusion model]]></title>
            <link>https://synbol.github.io/Lumina-DiMOO/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45221103</guid>
            <description><![CDATA[Lumina-DiMOO: An Omni Diffusion Large Language Model for Multi-Modal Generation and Understanding]]></description>
            <content:encoded><![CDATA[
        
            Abstract
            
                We introduce Lumina-DiMOO, an open-source foundational model for seamless multimodal generation and understanding. Lumina-DiMOO sets itself apart from prior unified models by utilizing a fully discrete diffusion modeling to handle inputs and outputs across various modalities.
                This innovative approach allows Lumina-DiMOO to achieve higher sampling efficiency compared to previous autoregressive (AR) or hybrid AR-diffusion paradigms and adeptly support a broad spectrum of multimodal tasks, including text-to-image generation, image-to-image generation (e.g., image editing, subject-driven generation, and image inpainting, etc.), as well as image understanding. 
                Lumina-DiMOO achieves state-of-the-art performance on multiple benchmarks, surpassing existing open-source unified multimodal models. 
                To foster further advancements in multimodal and dicrete diffusion model research, we release our code and checkpoints.
            
        

        
            Overview of Lumina-DiMOO’s Multifunctionality and Superior Performance.
        

        
            Demo Examples
            Text-to-Image Generation
            
                    A striking photograph of a glass of orange juice on a wooden kitchen table, capturing a playful moment. The orange juice splashes out of the glass and forms the word "Smile" in a whimsical, swirling script just above the glass. The background is softly blurred, revealing a cozy, homely kitchen with warm lighting and a sense of comfort.
                
            
                
                
                    Two ramekins filled with a creamy dessert, possibly a fruit custard or pudding, are presented. The dessert is garnished with diced mangoes, blueberries, and a drizzle of honey. The ramekins rest on a wooden board, surrounded by fresh mint leaves and a small bowl of honey. A bowl of fresh strawberries and a bunch of mint leaves are visible. The setting is completed with a white cloth and a wooden spoon. 
                
                
                    A beautifully aged antique book is positioned carefully for a studio close-up, revealing a rich, dark brown leather cover. The words "Knowledge is Power" are prominently featured in the center with thick, flowing brushstrokes, gleaming in opulent gold paint. Tiny flecks of the gold leaf can be seen scattered around the ornately scripted letters, showcasing the craftsmanship that went into its creation.
                
                
                    Clean white brick wall, vibrant colorful spray-paint graffiti covering entire surface: top giant bubble letters "Lumina DiMOO", below stacked "MULTIMODAL DISCRETE", "DIFFUSION MODEL" in rainbow palette, fresh wet paint drips, daylight urban photography.
                
                
                      A collection of vibrant red roses is artfully arranged on a rustic wooden surface. The roses, in full bloom, display their intricate petal layers and deep red hue, while the wooden background, with its visible grain patterns and knots, adds a textured contrast. The roses are placed in a cluster, with some overlapping others, creating a sense of depth and dimension. 
                
            
            
                
                
                    Close-up portrait of a young woman with light skin and long brown hair, looking directly at the camera. Her face is illuminated by dramatic, slatted sunlight casting shadows across her features, creating a pattern of light and shadow. Her eyes are a striking green, and her lips are slightly parted, with a natural pink hue. The background is a soft, dark gradient, enhancing the focus on her face. The lighting is warm and golden. 
                
                
                    Illustrate a poignant moment from a slice-of-life anime, with two high school friends sharing a heartfelt conversation under a cherry blossom tree, petals gently falling around them.
                
                
                    Enchanted forest scene with large wooden letters "B", "E", and "A" adorned with greenery and colorful flowers, positioned in the center and right of the frame. The letters are embellished with red and white flowers, small white ornaments, and trailing vines. The forest floor is covered with brown pine needles and scattered leaves, with small glowing lanterns placed around the letters, casting warm light. 
                
            
            
                
                
                    Design a poster for a fictitious film noir festival, featuring a shadowy detective silhouette against a backdrop of a rain-slicked 1940s city street, the title "Shadows and Fog: A Noir Retrospective" in stylish, vintage typography, all presented in a classic black and white sketch style.
                
                
                    A stunning photograph of a Scandinavian landscape, showcasing snow-capped mountains, dense evergreen forests, and a tranquil lake reflecting the clear blue sky. The scene is bathed in soft sunlight, creating a warm and inviting atmosphere. In the distance, a small, picturesque village can be seen nestled among the trees, with smoke gently rising from a few chimneys.
                
                
                    A captivating photograph of an exquisite wooden dragon sculpture, skillfully carved with intricate details and realistic scales. The dragon is poised on a tree branch, its grand wings spread wide, revealing a mesmerizing woodland landscape below. The sky is painted with a symphony of soft blues and yellows, as the sun casts its final rays beyond the horizon. The dragon's glass eyes lend it a lifelike presence.
                
                
                    A small hamster with a fluffy, light brown coat sits centrally on a red and orange striped sofa. The hamster's eyes are wide and alert, facing directly at the camera. The sofa's fabric features vertical stripes with a dark green and white border, creating a vibrant contrast with the hamster's soft fur. In the background, a dark green knitted blanket partially covers the sofa, adding texture to the scene. 
                
            
            
          
            Image Editing
            
                
                
                    Add a large bowl filled with tomato-based stew garnished with basil on a wooden table in the central area, occupying most of the middle and lower part of the image.
                
                
                    Add a tan and black bike frame with large, thick tires in the lower-left to upper-right center, spanning most of the image and occupying about three-quarters of the total area.
                
            

            
                  
                  
                      Remove all baked goods located in the upper central to upper right section, occupying a large horizontal area across the top of the image.
                  
                  
                      Stylize the image according to book Illustration with clear outlines and narrative focus.
                  
              

              
                  
                  
                      Change the plain wall into brick wall.
                  
                  
                      Replace bird positioned in the upper central-right area of the image with a colorful butterfly.
                  
              

          Style Transfer
          
                  
                  
                  
                  
                  
                  
                  
                  
                  
          
          
          Subject-Driven Generation
          
                  
                  
                      A vibrant, intricately designed beaded hair accessory. At a bustling outdoor market at midday, it glimmers in the bright sunlight, resting delicately on a wooden table covered with colorful woven fabrics, while a gentle breeze rustles the nearby array of potted plants
                  
                  
                      A durable and elegant hardcover writing tool. Set against a sleek minimalist interior with its dark cover contrasting against white marble countertops, under the brilliant, diffused glow of overhead pendant lights that create an atmosphere of quiet elegance and focus.
                  
                  
                      A milkshake with whipped cream topping. During an evening music festival, it glows softly under twinkling fairy lights, with a blurred stage in the background showcasing musicians in action.
                  
          
          Controllable Generation
          
                  
                  
                      A charming porcelain teacup with floral patterns is perched elegantly on a wrought iron café table on a bustling city street, under a large umbrella casting gentle shade, while pedestrians stroll by in the background.
                  
                  
                      On a chic café table, a sleek modern tabletop lamp adds a modern touch to the morning bustle as sunlight filters through a nearby window, blending with the aroma of fresh coffee.
                  
                  
                      Captured in a bustling urban street at twilight, A creamy, rich-flavored dark beverage, is placed on an outdoor café table, as city lights begin to twinkle and passersby create a lively atmosphere.
                  
                  
                      In an urban park during a light drizzle, beneath dense tree cover that filters the overcast light,  a man wearing a waterproof windbreaker is walking.
                  
          

          Inpainting and Extrapolation
          
                  
                  
                      Porsche showroom. Make there be a Porsche logo on the back wall behind the car.
                  
                  
                      A contemporary basement bar area, featuring sharp, bright colors, high-quality lighting, and a mood of modern relaxation. Include depth of field and a strong sense of atmosphere. 
                  
          
          
                  
                  
                      A breathtaking mountain range dramatically rising above a still alpine lake at dawn. The snow-capped peaks are bathed in the warm glow of the rising sun, displaying hues of vibrant orange, pink, and gold.
                  
                  
                  
                      A serene, snow-capped mountain range reflected in a crystal-clear turquoise lake. The towering peaks are dusted with fresh snow, their slopes covered in vibrant green pine trees reaching towards the sky. 
                  
          
    
    
          Image Understanding
          
            
                
                    
                    
                    
                    
                    
                    
                
                
                
                
                
                    这是第一张图片对应的问题。请在这里输入您想要展示的问题内容。
                
            
            
            
                        Answer：
                        这是第一张图片问题对应的答案。您可以在这里提供详细的解答内容。答案可以很长，这个区域会自动支持滚动显示。现在右侧区域会占据更多空间来显示完整的答案内容。
                    
        
    
        
          
        

        

        
            Experimental Results

            GenEval Benchmark
            
                
                    
                        
                            Methods
                            #Params
                            Single Object
                            Two Object
                            Counting
                            Colors
                            Position
                            Attibute
                            Overall ↑
                                
                    
                    
                        
                            Gen. Only
                        
                        
                            SDXL
                            2.6B
                            0.98
                            0.74
                            0.39
                            0.85
                            0.15
                            0.23
                            0.55
                          
                        
                            Emu3-Gen
                            8B
                            0.98
                            0.71
                            0.34
                            0.81
                            0.17
                            0.21
                            0.54
                        
                        
                            SD3-Medium
                            2B
                            0.99
                            0.94
                            0.72
                            0.89
                            0.33
                            0.60
                            0.74
                        
                        
                            DALL-E 3
                            -
                            0.96
                            0.87
                            0.47
                            0.83
                            0.43
                            0.45
                            0.67
                         
                        
                            FLUX.1 [Dev]
                            12B
                            0.98
                            0.81
                            0.74
                            0.79
                            0.22
                            0.45
                            0.66
                             
                        
                            OmniGen
                            3.8B
                            0.98
                            0.84
                            0.66
                            0.74
                            0.40
                            0.43
                            0.68
                         
                        
                            Lumina-mGPT 2.0
                            7B
                            0.99
                            0.87
                            0.44
                            0.85
                            0.44
                            0.54
                            0.69
                        
                        
                            Unified
                        
                        
                            Show-o
                            1.3B
                            0.95
                            0.52
                            0.49
                            0.82
                            0.11
                            0.28
                            0.53
                            
                        
                            TokenFlow-XL
                            14B
                            0.95
                            0.60
                            0.41
                            0.81
                            0.16
                            0.24
                            0.55
                        
                        
                            Janus-Pro
                            7B
                            0.99
                            0.89
                            0.59
                            0.90
                            0.79
                            0.66
                            0.80
                         
                            
                        
                            GPT-4o
                            -
                            0.99
                            0.92
                            0.85
                            0.92
                            0.75
                            0.61
                            0.84
                        
                        
                            BAGAL
                            14B
                            0.99
                            0.94
                            0.81
                            0.88
                            0.64
                            0.63
                            0.82
                        
                        
                            MMaDA
                            8B
                            0.99
                            0.76
                            0.61
                            0.84
                            0.20
                            0.37
                            0.63
                        
                        
                            Lumina-DiMOO
                            8B
                            1.0
                            0.94
                            0.85
                            0.89
                            0.85
                            0.76
                            0.88
                        
                    
                
            

            DPG Benchmark
            
                
                    
                        
                            Methods
                            #Params
                            Global
                            Entity
                            Attribute
                            Relation
                            Other
                            Overall ↑
                                
                    
                    
                        
                            Gen. Only
                             
                              
                            SDXL
                            2.6B
                            83.27
                            82.43
                            80.91
                            86.76
                            80.41
                            74.65
                            
                              
                            Emu3-Gen
                            8B
                            85.21
                            86.68
                            86.84
                            90.22
                            83.15
                            80.60
                        
                        
                            SD3-Medium
                            2B
                            87.90
                            91.01
                            88.83
                            80.70
                            88.68
                            84.08
                        
                        
                            DALL-E 3
                            -
                            90.97
                            89.61
                            88.39
                            90.58
                            89.83
                            83.50
                          
                        
                            FLUX.1 [Dev]
                            12B
                            74.35
                            90.00
                            88.96
                            90.87
                            88.33
                            83.84
                        
                              
                            OmniGen
                            3.8B
                            87.90
                            88.97
                            88.47
                            87.95
                            83.56
                            81.16
                        
                        
                            Lumina-mGPT 2.0
                            7B
                            -
                            88.94
                            88.08
                            91.70
                            -
                            84.30
                         
                        
                            Unified
                        
                        
                            Show-o
                            1.3B
                            -
                            -
                            -
                            -
                            -
                            67.48
                            
                        
                            TokenFlow-XL
                            14B
                            78.72
                            79.22
                            81.29
                            85.22
                            71.20
                            73.38
                        
                        
                            Janus-Pro
                            7B
                            86.90
                            88.90
                            89.40
                            89.32
                            89.48
                            84.19
                          
                          
                      
                            GPT-4o
                            -
                            88.89
                            88.94
                            89.84
                            92.63
                            90.96
                            85.15
                        
                        
                            BAGAL
                            14B
                            88.94
                            90.37
                            91.29
                            90.82
                            88.67
                            85.07
                        
                        
                            MMaDA
                            8B
                            77.81
                            78.48
                            81.74
                            84.79
                            63.2
                            69.97
                        
                        
                            Lumina-DiMOO
                            8B
                            81.46
                            92.08
                            88.98
                            94.31
                            82.0
                            86.04
                        
                    
                
            

            Image Understanding Benchmark
            
                
                    
                        
                        
                            Methods
                            #Params
                            POPE
                            MME-P
                            MMB
                            SEED
                            MMMU
                                
                    
                    
                        
                            Under. Only
                        
                                
                            LLaVA
                            7B
                            76.3
                            809.6
                            38.7
                            33.5
                            -
                         
                              
                            LLaVA-v1.5
                            7B
                            85.9
                            1510.7
                            64.3
                            58.6
                            35.4
                         
                        
                            InstructBLIP
                            7B
                            -
                            -
                            36.0
                            53.4
                            - 
                         
                        
                            Qwen-VL-Chat
                            7B
                            -
                            1487.5
                            60.6
                            58.2
                            -
                        
                        
                            Emu3-Chat
                            8B
                            85.2
                            1244
                            58.5
                            68.2 
                            31.6
                        
                        
                            Unified
                        
                        
                            Show-o
                            1.3B
                            80.0
                            1097.2
                            -
                            -
                            26.7 
                         
                        
                            TokenFlow-XL
                            13B
                            86.8
                            1545.9
                            68.9
                            68.7
                            38.7 
                         
                        
                            Janus-Pro
                            7B
                            87.4
                            1567.1
                            79.2
                            72.1
                            41.0
                        
                        
                            BAGAL
                            14B
                            -
                            1687
                            85.0
                            -
                            55.3
                        
                        
                            MMaDA
                            8B
                            86.1
                            1410.7
                            68.5
                            64.2
                            30.2
                        
                        
                            Lumina-DiMOO
                            8B
                            87.4
                            1534.2
                            84.5
                            83.1
                            58.6           
                        
                    
                
            
        

      
        Acknowledgements
        This work was also supported and implemented by MindSpeed MM, an open-source training framework for large-scale multimodal models designed for distributed training, developed and maintained by Huawei's Computing Product Line.
        Specifically Optimized for Huawei‘s Ascend AI chips, MindSpeed MM offers comprehensive support for distributed training and is tailored for a wide range of multimodal tasks.
       
      
      
          Citation
          
              @article{Lumina-DiMOO,
                 title={Lumina-DiMOO：An Omni Diffusion Large Language Model for Multi-Modal Generation and Understanding},
                 author={Yi Xin, Qi Qin, Siqi Luo, Kaiwen Zhu, Juncheng Yan, Yan Tai, Jiayi Lei, Yuewen Cao, Yuandong Pu, Le Zhuo, Shenglong Ye, Ming Hu, Junjun He, Bo Zhang, Dengyang Jiang, Gen Luo, Chang Xu, Wenhai Wang, Hongsheng Li, Guangtao Zhai, Tianfan Xue, Xiaohong Liu, Bin Fu, Yu Qiao, and Yihao Liu},
                 year={2025}
              }
          
      

    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Astrophysics Source Code Library]]></title>
            <link>http://ascl.net/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45220843</guid>
            <description><![CDATA[The Astrophysics Source Code Library (ASCL) is a free online registry and repository for source codes of interest to astronomers and astrophysicists, including solar system astronomers, and lists codes that have been used in research that has appeared in, or been submitted to, peer-reviewed publications. The ASCL is indexed by the SAO/NASA Astrophysics Data System (ADS) and Web of Science and is citable by using the unique ascl ID assigned to each code. The ascl ID can be used to link to the code entry by prefacing the number with ascl.net (i.e., ascl.net/1201.001).]]></description>
            <content:encoded><![CDATA[The Astrophysics Source Code Library (ASCL) is a free online registry and repository for source codes of interest to astronomers and astrophysicists, including solar system astronomers, and lists codes that have been used in research that has appeared in, or been submitted to, peer-reviewed publications. The ASCL is indexed by the SAO/NASA Astrophysics Data System (ADS) and Web of Science and is citable by using the unique ascl ID assigned to each code. The ascl ID can be used to link to the code entry by prefacing the number with ascl.net (i.e., ascl.net/1201.001).


Most Recently Added Codes

2025 Sep 01

			
			
								[submitted]
							

			
								adstex: Automated bibliography builder for astronomy literature			
		
			adstex automatically identifies all citation keys in a TeX source file and builds the corresponding bibliography file (.bib file) by fetching the reference information from NASA's Astrophysics Data System (ADS). adstex recognizes all variants of the cite commands in TeX, and works with various styles of citation keys, including arXiv IDs, DOIs, and ADS bibcodes. When a citation key is in the format of first-author name and year, adstex will query NASA's ADS and return a list of possible reference matches for the user to select the intended one. When a reference entry has updated information on NASA's ADS, adstex can detect such changes and fetch the new information and update the user's bibliography file. adstex supports any reference entry that is available on NASA's ADS, and allows the authors to write papers without manually searching for the bibliography entries.
				2025 Aug 31
	
	
		
		

			
			
								[ascl:2508.022]
							

			
								IAR_Model: Autoregressive model to irregularly spaced data			
		
			IAR_Model fits unequally spaced time series from the Irregular Autoregressive (IAR). Available as Python and R functions, IAR_Model can generate observations for each process, compute the negative of the log likelihood of these process, fit each model to irregularly sampled data, and test the significance of the estimate.
				
	
		
		

			
			
								[ascl:2508.021]
							

			
								fm4ar: Inferring atmospheric properties of exoplanets using flow matching posterior estimation			
		
			fm4ar (flow matching for atmospheric retrievals) infers atmospheric properties of exoplanets from observed spectra. It uses flow matching posterior estimation (FMPE) for its machine learning (ML) approach to atmospheric retrieval; this approach provides many of the advantages of neural posterior estimation (NPE) while also providing greater architectural flexibility and scalability. The package uses importance sampling (IS) to verify and correct ML results, and to compute an estimate of the Bayesian evidence. fm4ar's ML models are conditioned on the assumed noise level of a spectrum (i.e., error bars), thus making them adaptable to different noise models.
				
	
		
		

			
			
								[ascl:2508.020]
							

			
								AGNI: Model for extreme atmospheres on rocky exoplanets			
		
			AGNI simulates the atmospheric temperature-, height-, and compositional-structures of atmospheres overlying magma oceans while ensuring that radiative-convective equilibrium is maintained throughout the atmosphere. The code also supports real gas equations of state, self-gravitation, and various spectral surface compositions. Accounting for these energy transport processes permits AGNI to calculate atmospheric structure, which also yields realistic cooling rates for young rocky planets with magma oceans.
				
	
		
		

			
			
								[ascl:2508.019]
							

			
								FiCUS: FItting the stellar Continuum of Uv Spectra			Saldana-Lopez, A.; Schaerer, D.; Chisholm, J.; Calabrò, A.; Pentericci, L.; Cullen, F.; Saxena, A.; Amorín, R.; Carnall, A. C.; Fontanot, F.; Fynbo, J. P. U.; Guaita, L.; Hathi, N. P.; Hibon, P.; Ji, Z.; McLeod, D. J.; Pompei, E.; Zamorani, G.
		
			FiCUS (FItting the stellar Continuum of Uv Spectra) fit the stellar continuum of extragalactic ultraviolet (UV) spectra. The code takes observed-frame wavelength, flux density (with errors) and user-defined mask arrays as inputs, and returns an estimation of the galaxy stellar age, metallicity and dust extinction, as well as other secondary Spectral Energy Distribution (SED) parameters. FiCUS has two scripts; the first reads the INPUT file provided by the user and performs the fit according to selected options. It then gives the best-fit parameters and creates the OUTPUT files and figures. The second script includes pre-defined routines for spectral analysis, loading INPUT files and handling with data and models, as well as functions for the fitting routine, SED-parameters calculations and plotting, and imports functions into the first script.
				
	
		
		

			
			
								[ascl:2508.018]
							

			
								pyStarburst99: Python port of Starburst99			Hawcroft, Calum; Leitherer, Claus; Aranguré, Oskar; Chisholm, John; Ekström, Sylvia; Martinet, Sébastien; Martins, Lucimara P.; Meynet, Georges; Morisset, Christophe; Sander, Andreas A.C.; Wofford, Aida
		
			pyStarburst99 is a Python version of the Starburst99 (ascl:1104.003) population synthesis code for star-forming galaxies. This Python version includes new evolutionary tracks and synthetic spectral energy distributions. pyStarburst99 provides wider coverage in metallicity, mass, and resolution, and includes evolutionary and spectral models of stars up to 300–500 M⊙.
				
	
		
		

			
			
								[ascl:2508.017]
							

			
								SIGWAY: Compute second-order, scalar induced gravitational wave signals			El Gammal, Jonas; Ghaleb, Aya; Franciolini, Gabriele; Papanikolaou, Theodoros; Peloso, Marco; Perna, Gabriele; Pieroni, Mauro; Ricciardone, Angelo; Rosati, Robert; Tasinato, Gianmassimo; Braglia, Matteo; Fumagalli, Jacopo; Kume, Jun'ya; Morgante, Enrico; Nardini, Germano; Racco, Davide; Renaux-Petel, Sébastien; Veermäe, Hardi; Werth, Denis; Zavala, Ivonne; LISA Cosmology Working Group
		
			The SIGWAY data analysis pipeline computes second-order, scalar induced gravitational wave signals emitted by curvature perturbations in the early universe. The package solves the Mukhanov-Sasaki equation for single field ultra-slow roll inflationary models and computes the primordial scalar power spectrum Pζ. SIGWAY also computes the second order gravitational wave power spectrum ΩGW from P ζ for reentry during radiation domination or a phase of early matter domination.
				
	
		
		

			
			
								[ascl:2508.016]
							

			
								sMV: Serial MultiView phase plane estimation			
		
			sMV (serial MultiView) scripts provide a semi-automatic and easy-to-use workflow for serial MultiView phase plane estimation. The phase plane is iteratively rotated based on the time series of calibrator residual phases; because time-domain information is included in the iterations, phase ambiguities are accurately and automatically identified. sMV enables efficient, high-accuracy differential astrometry and artifact-reduced imaging for astrophysical studies.
				
	2025 Aug 30
	
	
		
		

			
			
								[ascl:2508.015]
							

			
								DeepSSM: Cosmological emulator for the GW spectrum from the modified sound-shell model			
		
			Built on Flax (ascl:2504.026), DeepSSM emulates gravitational wave (GW) spectra produced by sound waves during cosmological first-order phase transitions in the radiation-dominated era. It uses neural networks trained on an enhanced version of the Sound Shell Model (SSM). The code provides instantaneous predictions of GW spectra given the phase transition parameters, while achieving agreement with the enhanced SSM model. DeepSSM is particularly suitable for direct Bayesian inference on phase transition parameters without relying on empirical templates, such as broken power-law models.
				
	
		
		

			
			
								[ascl:2508.014]
							

			
								HipFT: High-performance Flux Transport			
		
			The flux transport model HipFT implements advection, diffusion, and data assimilation on the solar surface on a logically rectangular nonuniform spherical grid. It is parallelized for use with multi-core CPUs and GPUs using a combination of Fortran's standard parallel do concurrent (DC), OpenMP Target data directives, and MPI. Serving as the computational core of the Open-source Flux Transport (OFT) software suite (ascl:2508.013), HipFT incorporates various differential rotation, meridional flow, super granular convective flow, and data assimilation models. HipRT also computes multiple realizations in a single run spanning multiple choices of parameters.
				
	]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Becoming the person who does the thing]]></title>
            <link>https://www.fredrivett.com/2025/09/10/becoming-the-person-who-does-the-thing/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45220656</guid>
            <description><![CDATA[Bad news: your internal identity dictates everything you do. Good news: you can change it]]></description>
            <content:encoded><![CDATA[
It can be disorienting when our beliefs shift. The world we helped create no longer exists, and our role in it transforms too.
It can be unsettling, naturally. But that's kind of the point.
Looking back at times when I held certain beliefs—about how the world works, and what my role in this story is—it can feel less like a mod was installed and more like an entirely new operating system was swapped in.
Up until my late twenties, I could count the number of times I had been to the gym on one hand.
And worse, as a nerd, I was quietly proud of it. Why waste hours a week on something that hardly mattered? I have better things to do. I pitied the jocks who slaved away in the gym chasing vanity. What for? I don't need that. Who cares?
Like all childish thinking, it contained some truth. Physical fitness is less important than spiritual, emotional, and mental fitness; but it’s still important.
Even Paul, one of history’s most influential figures, with a worldview shaped by the utter centrality of spiritual health, said as much.
Your beliefs—and therefore approach to what a healthy life looks like—are foundational. It might sound obvious, but what you believe a "life well lived" looks like has a pretty transformative impact on both what life you end up building and how well lived it looks.
So if we’re a product of our beliefs and our most formative preconceptions are imposed by others, then where’s the hope?
We build, layer upon layer, and the layers laid first—now deeply buried within—are the ones we had the least say in.
We didn't pick them, but they shape everything we are and do. Bad luck, I guess.
Thankfully, we are dynamic beings. Old beliefs can peel off, and new ones take their place. Later layers can somehow seep deeper. Some recent beliefs can even become cornerstones.
For me, something shifted in my late twenties. Growing up I guess you could call it. I don’t remember the exact straw that broke the camel’s back, but a desire for change grew. I started working out.
It began slowly, but I began. Knee press-ups to start, later adding assisted pull-ups.
If anyone was watching, it would have looked stupid. A grown man barely able to push himself off the floor. But I showed up and put in my reps, day by day, week by week, in the privacy of my bedroom.
As the weeks and months passed, my strength grew.
Eventually, I graduated to full press-ups and pull-ups, no mods required.
Every small win reinforced the last and led me further away from who I used to be.
Fast forward almost to a decade and I feel a lot more friction not going to the gym than I do going. Cognitive dissonance is wonderful when it’s on your side, and it pops up whenever my healthy-Fred self-identity and actions diverge.
I'm far from a gym junkie—it hasn't become my life—but I go every weekday, 20 minutes a day. I arrive, do my workout, and leave, while most people are just getting started.
Our self-identity dictates everything, but it is not set in stone.
Changing our beliefs isn’t easy. Both those about the world around us and the world within. We can't simply will our way there and snap our fingers. We must journey. As with all great things, it's a process.
But it is possible. A well-trodden path is ahead for those who wish to walk it.
So how do you? How do you become the person who does the thing?
Earlier this week I spent a couple hours crafting my digital /shelf, a place where I can put the things that have impacted me the most up for all to see, so others can take them for themselves should they wish.
On it are these two quotes that have been living rent-free in my head from the beginning. Together, they create a twin-cog flywheel that cannot be stopped:

“People like us do things like this”
Seth Godin


“Every action you take is a vote for the type of person you wish to become”
James Clear

Your actions follow your self-beliefs.
If you identity as a failure, incapable of achievement, unfit, unlovable, destined to play a bit-part role in your own story, then by heck no matter how much willpower you put in to push that boulder up the hill, it will return to its place.
But there's a way through: every action you take is a vote for who you wish to become. Every day you wake up, look your old identity in the eye and say "thanks for your service, but you're not needed around here anymore," step forward and lean in, is a day your new identity is built.
It takes time. You have to actually want it. You have to choose to adopt a new mindset. Rome wasn't built in a day. But it comes, a little like how Hazel Grace Lancaster describes falling in love in The Fault In Our Stars: "slowly, and then all at once."
The path is there, should you choose.
Identify where your identity needs to shift. Then take a step. Cast today’s vote. Find your way through.
Do that day by day, then soon enough, your inner world will shift and recalibrate around the new reality you're co-creating.
Then one day you'll see it.
People like us really do things like this.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Examples from The LaTeX Companion book (3rd edition)]]></title>
            <link>https://ctan.org/pkg/tlc3-examples</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45220121</guid>
            <description><![CDATA[The PDFs (as used with spotcolor and trimming) and sources for all
      examples from the third edition (Parts I+II), together with necessary
      supporting files. The edition is published by Addison-Wesley, 2023,
      ISBN-13: 978-0-13-816648-9, ISBN-10: 0-13-816648-X (bundle of Part I & II).]]></description>
            <content:encoded><![CDATA[
   
    tlc3-examples – All examples from “The LaTeX Companion”, third edition
    
    
      The PDFs (as used with spotcolor and trimming) and sources for all
      examples from the third edition (Parts I+II), together with necessary
      supporting files. The edition is published by Addison-Wesley, 2023,
      ISBN-13: 978-0-13-816648-9, ISBN-10: 0-13-816648-X (bundle of Part I & II).
    
    
      Sources/info/examples/tlc3
      DocumentationREADME.md
      
      
      Bug trackerhttps://github.com/FrankMittelbach/tlc3-examples/issues
      
      Repositoryhttps://github.com/FrankMittelbach/tlc3-examples
      
      
      LicensesThe LaTeX Project Public License 1.3c
      
      MaintainerFrank Mittelbach
      
      Contained inTeX Live as tlc3-examples
      TopicsBook examples
      
    
    
      Download the contents of this package in one zip archive
        (82.4M).
    
    
    
 
      
      

    
    

    
     Package Links
     
    
    
    
    
  
   
  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: I made a generative online drum machine with ClojureScript]]></title>
            <link>https://dopeloop.ai/beat-maker/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45220069</guid>
        </item>
        <item>
            <title><![CDATA[Qwen3-Next]]></title>
            <link>https://qwen.ai/blog?id=4074cca80393150c248e508aa62983f9cb7d27cd&amp;from=research.latest-advancements-list</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45219228</guid>
        </item>
        <item>
            <title><![CDATA[Debian 13, Postgres, and the US time zones]]></title>
            <link>https://rachelbythebay.com/w/2025/09/11/debtz/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45218111</guid>
        </item>
        <item>
            <title><![CDATA[Float Exposed]]></title>
            <link>https://float.exposed/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217415</guid>
            <description><![CDATA[Floating point format explorer – binary representations of common floating point formats.]]></description>
            <content:encoded><![CDATA[
		

			halfbfloatfloatdouble
			

			
				Value
				

			

			
				Bit Pattern
				
			

			

			

			


			
				Position within Significand–Exponent Range
				
				
					0
					252-1
					
						0
					
					
					
						1
					
					
					
						30
					
					
					
						30
					
					
					
					
					
					
				
			

			

			Evaluation in Base-2

			(−12)2×​102(2 − 2)​×​.2
			

			Evaluation in Base-10

			×​2×​.
			

			Exact Base-10 Value
			

			

			


			
				Delta to Next/Previous Representable Value
				
			

			
				Delta to Next Representable Value
				
			

			
				Delta to Previous Representable Value
				
			

			


		
		Copyright © 2025 – Bartosz Ciechanowski

		
			A
		
	]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Toddlerbot: Open-Source Humanoid Robot]]></title>
            <link>https://toddlerbot.github.io/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217372</guid>
            <description><![CDATA[ToddlerBot: Open-Source ML-Compatible Humanoid Platform for Loco-Manipulation.]]></description>
            <content:encoded><![CDATA[
  
            
            
            

            *Equal contribution,
              †Equal advising
            

            Stanford University
            

            
          
  

  
  
  
  
      
          TL;DR: ToddlerBot is a low-cost, open-source humanoid robot platform designed for
            scalable policy learning and research in robotics and AI.
        
    
  

  
  
  
  

  
      
          2.0 Release
          
              See CHANGELOG.md for
                  details. 1x Speed unless otherwise noted.
            

          New Capabilities
          
            
              
              
              
                  Cartwheel: Toddy successfully performs a highly dynamic cartwheel, showcasing its
                  agility and balance capabilities.
                
            
            
              
              
              
                  Cartwheel Failures: With naive DeepMimic and domain
                  randomization,
                  the success rate is still low. But the good news is that Toddy is extremely robust—it almost never
                  breaks. Even if it breaks, it is super easy to fix.
                
            
            
              
              
              
                  Crawling: Toddy can crawl like a toddler, using its arms and legs in a
                  coordinated manner.
                
            
          
          

          
            
              
              
              
                  Walking Faster: Toddy can walk faster in all directions (up to 0.25m/s) and rotate
                  faster in place (up to 1 rad/s).
                
            
            
              
              
              
                  VR Teleoperation: Real-time VR teleoperation with Meta quest 2.
                
            
            
              
              
              
                  Foundation Stereo Depth On-board (Jetson Orin NX 16GB) real-time (10Hz) depth
                  estimation from stereo fisheye cameras with Foundation
                    Stereo.
                
            
          
          
        

      
          Design
          
              We present ToddleBot's mechatronic design in the figure below. We highlight ToddlerBot's 30
              active DoFs with orange markers: 7 DoFs per arm, 6 DoFs per leg, a 2-DoF neck, and a 2-DoF waist. Green
              markers indicate two end-effector designs—a compliant palm and a parallel-jaw gripper. Purple markers
              denote the sensor and electronics layout with exploded views, featuring two fisheye cameras, a speaker,
              two microphones, an IMU, and a Jetson Orin NX computer.
            
          
            
            
          
        

      
        
          Results
          
              1x Speed unless otherwise noted.
            

          Capability: Arm Span, Payload, and Endurance
          
            
              
              
              
                  Arm Span Test: With a torso volume of 13x9x12 cm³, ToddlerBot
                  successfully grasps objects 14 times its torso volume (27x24x31 cm³) using its compliant palm
                  gripper.
                
            
            
              
              
              
                  Payload Test: ToddlerBot lifts 1,484 g (40% of its total weight) while
                  maintaining balance. To determine the limit, screws are incrementally added to a 3D-printed gripping
                  cup until it falls.
                
            
            
              
              
              
                  Endurance Test: Running a walking RL policy, ToddlerBot lasts 19 minutes before
                  overheating affects stability. It withstands up to 7 falls before breaking, but repairs take only 21
                  minutes of 3D printing and 14 minutes of assembly for full restoration.
                
            
          
          

          Capability: Conversation, Push-ups, and Pull-ups
          
            
              
              
              
                  Conversation and Push-ups: This is achieved by integrating OpenAI's Realtime API
                  with GPT-4o for speech-to-text and text-to-speech. Push-ups are zero-shot sim-to-real transfer of
                  open-loop keyframe animation.
                
            
            
              
              
              
                  Pull-ups: We use an AprilTag to help ToddlerBot accurately locate the horizontal
                  bar. The rest is a zero-shot sim-to-real transfer of open-loop keyframe animation.
                
            
          
          

          ML-Compatibility: Locomotion and Manipulation
          
            
              
              
              
                  Omnidirectional Walking: ToddlerBot achieves omnidirectional walking with RL and
                  zero-shot sim-to-real.
                
            
            
              
              
              
                  Bimanual Manipulation: This is an RGB-based diffusion policy trained with 60
                  demonstrations.
                
            
          
          
            
              
              
              
                  Full-body Manipulation: This is also an RGB-based diffusion policy trained with 60
                  demonstrations.
                
            
            
              
              
              
                  Skill Chaining: ToddlerBot first executes a diffusion policy to grasp the handle,
                  while maintaining that pose, switched to the RL policy to push the wagon forward.
                
            
          

          Reproducibility: Hardware and Policies
          
            
              
              
              
                  Manipulation Policy Zero-Shot Transfer: We successfully transfer manipulation
                  policy trained with data collected on Toddlerbot instance to another.
                
            
            
              
              
              
                  Two-Instance Collaboration Task: To demonstrate their equivalent performance of two
                  Toddlerbot Instances, both robots collaborate on a long-horizon room tidying task.
                
            
            
              
              
              
                  Easy-to-Build Test: We show that ToddlerBot is easy to build with fully
                  open-source assembly manuals and videos.
                
            
          
        
        
      
    

  

  
      BibTeX
      @article{shi2025toddlerbot,
  title={ToddlerBot: Open-Source ML-Compatible Humanoid Platform for Loco-Manipulation},
  author={Shi, Haochen and Wang, Weizhuo and Song, Shuran and Liu, C. Karen},
  journal={arXiv preprint arXiv:2502.00893},
  year={2025}
}
    

  
      Acknowledgement
      The authors would like to express their gratitude to Kaizhe Hu for assembling the second instance of ToddlerBot
        and assisting with keyframe animation and demo recording. We also extend our thanks to Huy Ha, Yen-Jen Wang, Pei
        Xu, and Yifan Hou for their insightful discussions on locomotion, and to Sirui Chen, Chen Wang, and Yunfan Jiang
        for valuable input on manipulation policy deployment.
        We are grateful to Albert Wu for his guidance on mathematical formulation and notation. Additionally, we thank
        João Pedro Araújo for his assistance with the motion capture system.
        Finally, we appreciate the helpful discussions from all members of TML and REALab. This work was supported by
        National Science Foundation NSF-FRR-2153854, NSF-2143601, NSF-2037101, Sloan Fellowship, Stanford Institute for
        Human-Centered Artificial Intelligence, and Stanford Wu Tsai Human Performance Alliance.
    

  



]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why our website looks like an operating system]]></title>
            <link>https://posthog.com/blog/why-os</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217269</guid>
            <description><![CDATA[I have a problem with many large, technical websites. Often times, I’ll want to refer to different pages at the same time. So I’ll  CMD  + click “a…]]></description>
            <content:encoded><![CDATA[I have a problem with many large, technical websites.Often times, I’ll want to refer to different pages at the same time. So I’ll CMD + click “a couple times” while browsing around and before I know it, I have 12 new tabs open – all indistinguishable from each other because they share the same favicon.PostHog.com has the same problem – especially as the site has grown from supporting a handful of paid products to over a dozen.As I looked for ways to solve this explosion of pages, I started to question many of the typical patterns that marketing & docs websites have today.Long-form scrolling. Oversized footers. Absurd whitespace.These website encourage scrolling, but just to get people to the bottom of the page? And then what?Why are we doing this? What if we just made better ways to consume content?That’s the idea behind the new PostHog.com. You can multitask, open a few articles simultaneously, and move them around as you please. If anything there's a whitespace deficiency, and your fingers will be jealous you're not scrolling with them as much (because you're so engaged with our content).It has window snapping, keyboard shortcuts, and a bookmark app. It works as well as you’d expect an operating system to work in a browser.You can be reading the latest newsletter from Product for Engineers while watching a demo video in the corner and also playing Hedgehog Mode, the game.I’ll be the first to admit it – an OS interface for a “website” is initially a jarring experience. I felt this as I built it. The human brain expects certain patterns within the confines of a browser viewport, and when it doesn’t get that assurance, it revolts.But the more I used the new site, the more I started to like it. And the experience was the same for colleagues. And now I can’t imagine using anything else.I had a lot of fun in building it with Eli Kinsey. Throughout the site you’ll find:A Windows File Explorer clone that also acts as the UI for our merch storeProduct pages that resemble PowerPoint presentationsA document editor where you can actually edit contentForums designed to look like you’re reading newsgroups in Outlook ExpressA QuickTime cloneA lot of pages you’d expect to be well-designed that are… just formatted as spreadsheetsA screensaver and a library of desktop backgroundsA plethora of keyboard shortcutsIt was also an interesting learning curve for me in figuring out how to organize five years worth of content while making it scalable for the future. Some of the technical highlights:Separation of visual layer from contentAll product pages are now powered from JSON files (example). This means that JSON dictates page layouts, content presentation, feature-level competitor comparison charts, and more. It also contains an array of screenshots used in various places (both in light and dark mode, of course).Eventually this will move to a repository that’s shared with the PostHog app, so all the information is powered from the same source.Skinning a site with themes and color schemesHow do you maintain light and dark mode, along with themes across a handful of accent variations (primary, secondary, tertiary) in a way that all play well together? (I found this out, and I’ll write about it sometime!)A reference customer databaseI’ve created a single customer record in code that contains: a) which products they use, b) quotes from specific people about individual products c) SVG logos that work in light and dark modeThis means that any quote can be presented on any page for any product without having to be hard-coded. It pulls in their name and photo, quote, and company logo, and can be filtered in reference to a specific product.For a lot of this site, I was designing it while I was building UIs in Typescript and Tailwind. (The entire site is just a Git branch off our current site – it's all technically the same codebase. I just merged along the way over the last few months.)Prototyping in a production-level environment was a great way to ideate and develop features along the way – stuff I never would have built if I were just going off of mockups. I did find myself popping open Balsamiq while I was building – but just long enough to flesh out some ideas.So how will this pan out? Well, we’re about to find out. This feels like an early MVP – there’s a ton of stuff to improve upon from here.But in the meantime, I hope you enjoy the new PostHog.com. Be curious, click around, and have some fun. I hope you enjoy your time here as much as we enjoyed building it.If you're curious, read more about how the site technically works.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rails on SQLite: new ways to cause outages]]></title>
            <link>https://andre.arko.net/2025/09/11/rails-on-sqlite-exciting-new-ways-to-cause-outages/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214933</guid>
            <description><![CDATA[This post was originally given as a talk for Friendly.rb. The slides are also available.
Between Litestack and the Rails 8 trifecta of Solid Cable, Solid Cache, and Solid Queue, it’s easier than ever to spin up a Rails app that doesn’t need a database service, or a redis service, or a file storage service. It’s great to simplify things, but even after 20 years of deploying Rails apps I was still caught out by some of the ways things are different.]]></description>
            <content:encoded><![CDATA[11 Sep 2025This post was originally given as a talk for Friendly.rb. The slides are also available.Between Litestack and the Rails 8 trifecta of Solid Cable, Solid Cache, and Solid Queue, it’s easier than ever to spin up a Rails app that doesn’t need a database service, or a redis service, or a file storage service. It’s great to simplify things, but even after 20 years of deploying Rails apps I was still caught out by some of the ways things are different.Based on what happened when I built a new side project in Rails on SQLite, we’ll cover what’s different, what’s new, and several ways that you can knock your site offline or even destroy your entire production database. As we go, we’ll also talk about the advantages of using SQLite, and how those differences can help you.So who am I, how did I learn these things, and why should you listen to me? I’m André Arko, better known on the internet as @indirect. A long time ago, I helped create Bundler, and I’ve been the OSS team lead for RubyGems and Bundler for more than a decade at this point.I work at Spinel Cooperative, a collective of Ruby open source maintainers building rv, the Ruby language manager that can install Ruby in one second flat. We offer retainers for unlimited access to core team experts from Bundler, Rails, Hotwire, and more, who can answer your questions and solve your problems.I’ve been deploying Rails applications to production since 2004, and most relevantly for this particular talk, I built a service called feedyour.email. Feed Your Email turns email subscriptions into RSS feeds that you can subscribe to in your feed reader. There is no signup, there are no accounts, you just go to the website and push a button to get an email address and a feed URL. Emails sent to that address will show up in that feed.Feed Your Email is only possible as a service because of SQLite—if I had to maintain three Postgres instances and a couple of web instances and a couple of worker instances, I would have felt like it was too much hassle and cost too much money, and given up. SQLite reduced the complexity of building and deploying this service to the point where I was able to do it casually, for fun, and keep it running for everyone while feeling like it was worth it just for my own personal use.This app serves about a million requests per month. That number sounds kind of big, but let’s do the math: 24 requests per minute, or one every 2.6 seconds. We can definitely serve at least one request every 2.6 seconds off of our Rails app, even on a small digital ocean droplet or a small cloud VM. I run my service on Fly.io, and hosting costs about USD$14 per month.It has bonus features like a web view so you can share individual emails as a link without giving away your secret email address or letting anyone see the other emails in that feed, and it also has full-text search if you’re trying to find a particular email. That full-text search is a feature of SQLite, which brings us back to the topic of this talk. How did SQLite help? Let’s take a look.The biggest fundamental difference, where almost every other difference comes from, is that SQLite is built in to your web server process. The reason for the “lite” in the name is that it doesn’t run a separate process, it doesn’t listen on a port or a socket, and you can’t connect to it. All the data is just in a single file, and your web process reads and writes that file when needed. This is awesome: you can’t have database connection errors anymore.There’s a small issue with giving the web process its own database in a local file, though. If you deploy your app as usual, your production database can disappear at any time! Heroku destroys dynos every 24 hours, including all files. Fly.io loses the files in a container anytime they restart. In a world of containers, it’s incredibly easy to miss that your new SQLite database is on an ephemeral filesystem and will disappear along with the Puma process in your web container.That leads us to the first and most important rule of using SQLite: put your database files in persistent storage. On AWS that means EBS, on Fly.io that means Volumes, but wherever you’re hosting, make sure that you can keep your database files across restarts (and ideally have automatic snapshots).Now that your database won’t disappear at any moment, let’s talk about what it means to put all the data in a single file. You probably use Rails.cache to store temporary data—that’s in a single SQLite file now, too. You also probably use ActiveJob to send emails or do slower work in the background. All of those jobs are also in a single SQLite file now. By default, it’s the same file!Putting everything in the same SQLite file makes everything very easy. You just need to keep track of that one file, and you’ll know that your model data, your caches, and your jobs will all be safe.SQLite being in-process raises a new problem, though… what if your background job needs to update a model? You might be used to deploying your background workers in a separate container, so you can scale them as needed. That’s not going to fly anymore, because your background workers need to be able to read and write that same single file that your web server is reading and writing.Since your database is now in just one file, you have two options. You can run your workers in a second process inside the same VM or container as the web process, or you can run your workers in threads inside the web process.If this is a smallish application, doing a million requests per month or less, you’ll be absolutely fine putting your background jobs in threads. As a bonus, putting background jobs in threads can almost halve the amount of RAM you need because a single Rails process is handling both web and job requests.If you really want to scale up your application, though, you’ll need to do what gets called “vertical” scaling rather than the traditional “horizontal” scaling. You can’t add more VMs, because other VMs won’t be able to see your database file. Instead, you need bigger and bigger single servers, with more and more CPU cores and RAM. That’s definitely possible, though. There are servers nowadays with 128 cores, or even more, and terabytes of RAM. Unfortunately, once you have scaled your wildly popular application vertically to the moon, you’ll discover the biggest limitation of SQLite: it’s just one file on disk.If you have dozens processes and hundreds of threads in web servers and background job workers, all trying to write into this one database file at the same time, there’s probably going to be a lot of contention. By default, SQLite uses the filesystem to take out a lock on the entire database for each transaction. Holding the lock, it executes any read and write queries, commits, and then releases the lock. Then the next process can take the filesystem lock and do the same thing.This can create quite the queue if even read-only queries have to wait in line and happen one at a time (because if they didn’t have the lock, some writer might sneak in and change the data mid-read!). To (partially) address this problem, SQLite offers a middle ground in the form of a Write-Ahead Log. The WAL log is an append-only file where any database writes can be written, one at a time. Then, a SQLite-controlled process copies those write instructions into the actual database file between reads. In the meantime, there can be as many readers as you want, because writes don’t have to block reads, and many reads from the same file at once are quite safe.This solves the problem with only allowing one single read or write at a time, but it definitely has a cost. The database isn’t just one file anymore, it’s now a series of files, and you need to back them up and restore them together if you want to make sure you haven’t lost any data. Hopefully that’s not too much trouble, but it is definitely something to be aware of while planning your backup and disaster recovery strategy.There’s one other approach worth calling out at this point, and that strategy is deliberately using multiple SQLite database files. If you are putting your not just your model data, but also your Rails cache, and also your background jobs, and maybe also your uploaded files all together into a single SQLite database file, your different use-cases can start to step on one another’s toes. For example, if you go to queue a few thousand jobs, any writes from your web requests will end up in the writer queue behind that pile of jobs in line to be written.Creating a separate SQLite file per system, or per access pattern, can help a lot with this. In Rails, the most common splits are separate SQLite databases for ActiveRecord, for the Rails cache, for background jobs, and for ActionCable. Depending on your application, it might also make sense to put your ActiveStorage blobs into a SQLite database or into the same filesystem that you are already backing up, as well. There’s a lot of complexity and overhead involved in setting up S3 buckets with the correct permissions and getting files into and out of them, and you might just want to skip all of that in your new, simplified Rails config.Taking this approach to an extreme might even involve sharding your model data across many database files. The most extreme example of this that I’ve heard of was an application that chose to shard their model data across one SQLite database file per customer. That meant every new signup created a new SQLite database file on disk, which is in some ways absurd, but it also meant that every individual user had the full power and speed of SQLite available to them. It’s hard to have read or write contention when every user gets their own separate database!So now that we’ve covered vertically scaling the Rails server itself, let’s talk about the other implications of your application running on exactly one server. The downside to there being just one server is that if that server goes down, your entire app is down. No degraded service, no slower than usual application, just… no application at all.If you’re running in a container, it’s impossible to deploy without downtime because only one container can ever have the volume with the database mounted. The old container has to stop before the new container can start. If you’re running in a VM, you might be able to deploy without downtime by running a local reverse proxy and more than one web server process, and restarting those web server processes one at a time rather than all at once. Welcome to how we used to do things in the 2000s, and my apologies.That said, some of the implications of only one server are good: if there’s only one, it’s pretty easy to run status checks, and it’s pretty easy to troubleshoot. You don’t need to debug connections between load balancers and dozens of web servers and database servers and redis servers and file storage servers, you just need to debug the one server. That can definitely make your job easier!Another implication of having just one single server: there is only one place for network requests to go. As I alluded to a moment ago, the only kind of load balancing that you can do is by running a local proxy and adding multiple separate processes as backends. The server itself is only going to have one IP address and one port where it can be reached, and there’s a certain amount of scale where that one IP and one port is going to become limiting. The good news is that you probably won’t hit that scale, and if you do, you’ll probably want to stop using SQLite anyway.If you ever want to try switching towards or away from SQLite, the sequel gem has the amazing ability to read from one database and write into another, doing a full database copy while respecting all the quirks and limitations of each database. If you want to move from Mysql or Postgres over to SQLite, or if you ever want to load a SQLite database into Mysql or Postgres, I highly recommend it. The duckdb command line tool also has excellent cross-database capabilities, and is the next thing I would try if sequel wasn’t working for me for some reason.There’s one more limitation that we need to consider that falls out of there only being one server: your app can only run in one geographic location. Some applications can benefit from adding additional web processes (or even database read replicas) spread out closer to end users, and that’s not possible if you are limited to a maximum of one server total for your entire application.That said, there’s nothing stopping you from using the more usual kind of CDN-based global distribution. If your application has a decent amount of static or cacheable content, you can at least still set the cache-control headers and run the app behind Fastly or Cloudlfare.Before we wrap up, I want to make sure to cover the various backup and replication options available to you while using SQLite for your application. The absolute all-star of SQLite backup and replication is called Litestream. It’s available as a gem, and can be used as easily as setting a few environment variables and using the litestream command provided by the gem to wrap your puma or other web server.What litestream does is fairly simple: it forwards a copy of each entry added to the write-ahead log over to any S3-compatible file store — you might even say that it streams your data in a light way. If you ever have a catastrophe, and your database file gets deleted or corrupted, the bucket will have a full copy of the WAL that you can replay to restore your database back to where it was when the server stopped working.On AWS, this still means setting up an S3 bucket and setting the right env vars, but at least you don’t need to deal with the bucket having public access, or setting up signed uploads, or any of the other things that make S3 a huge pain. You just need a private bucket and read/write credentials, and you’re good to go. If you’re using fly.io, you don’t even have to set the env vars yourself! They are set automatically by the command that creates the S3-compatible bucket on Tigris.There’s one last thing that you can try using if you’re feeling especially adventurous, LiteFS. LiteFS is a fascinating software achievement, offering full Mysql or Postgres-style replication for multiple SQLite databases running in many locations. The completely deranged trick that they use to do this is creating an entire software filesystem using FUSE, and then putting the SQLite database inside that filesystem. This gives them access to every filesystem read and write call made by your application, and allows them to create their own operations that are then sent to every other member of the cluster to be applied.This kind of setup comes with a lot of caveats. The biggest one is the usual distributed systems kind of caveat. You’ll have stale reads where some users will see old data, and if the primary crashes you might lose some data. If you’re okay with the tradeoffs of a distributed system (and you’re okay with the idea of all of your database reads and writes going through a FUSE filesystem that might be adding extra bugs), LiteFS offers a version of the ultimate web application dream.In the dream SQLite plus LiteFS world, you have all the advantages of SQLite and all the advantages of a fully replicated multi-writer database setup. Any individual server can go down without causing any downtime for the application as a whole, and every user has a full copy of the application and all its data, running extremely close to them.I haven’t built that perfect system yet, but it feels more attainable than it ever has before thanks to SQLite.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Claude’s memory architecture is the opposite of ChatGPT’s]]></title>
            <link>https://www.shloked.com/writing/claude-memory</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214908</guid>
            <description><![CDATA[A breakdown of Claude's memory implementation, how it differs from ChatGPT, and what these opposite approaches reveal about each company's philosophy.]]></description>
            <content:encoded><![CDATA[Earlier this week, I dissected ChatGPT's memory system. Since then, I've been doing the same for Claude and realized something remarkable: these two leading AI assistants have built completely opposite memory systems.
In this post, I'll start by breaking down exactly how Claude's memory works—what it stores and how it retrieves information. Then we'll get to the interesting stuff. Why these architectures diverge so dramatically, what that tells us about who uses each assistant and the philosophies driving each product's development, and just how vast the AI memory design space really is.
How it works
Claude's memory system has two fundamental characteristics. First, it starts every conversation with a blank slate, without any preloaded user profiles or conversation history. Memory only activates when you explicitly invoke it. Second, Claude recalls by only referring to your raw conversation history. There are no AI-generated summaries or compressed profiles—just real-time searches through your actual past chats.
When Claude detects memory invocation through phrases like "what did we discuss about," "continue where we left off," or "remember when we talked about," it deploys two retrieval tools that work like web search or code execution—you see them activate in real-time and wait while Claude searches through your history. Once the search completes, Claude synthesizes the retrieved conversations to answer your question or continue the discussion.
Conversation Search
The conversation_search tool helps with keyword and topic-based searches across your entire conversation history. When I asked "Hey, can you recall our past conversations about Chandni Chowk?" (a historic neighborhood in Delhi), Claude found 9 relevant conversations—from when I explored its founding by Princess Jahanara Begum in 1650 to my queries about the best galouti kebabs at Karim's and stuffed parathas at Paranthe Wali Gali. Claude synthesized these scattered discussions into a coherent summary of my Chandni Chowk explorations.

When you ask about multiple topics, Claude runs separate searches sequentially. In my past job as a crypto researcher, I used Claude extensively as an editor. When I asked "Tell me all the conversations we've had about either Michelangelo or Chainflip or Solana," Claude ran three separate searches—one for my Michelangelo analogies for neural networks, another for Chainflip's cross-chain protocol work, and a third for Solana's technical architecture. It found 22 conversations across these searches and delivered a unified response with direct links to each chat.


Temporal Chat Retrieval
The recent_chats tool provides time-based access to your conversation history. When I asked "Can you tell me what we spoke about in the last 10 conversations?" Claude retrieved my most recent chats chronologically and gave me a summary of my recent usage.

The tool also handles specific timeframes. When I asked "What did we discuss in the last week of November 2024?" Claude retrieved 16 conversations from that exact period.


ChatGPT vs Claude
A year ago, ChatGPT and Claude's assistant apps matched each other feature for feature—multiple models, file attachments, projects. Since then, their paths have diverged dramatically. ChatGPT has evolved into a mass-market consumer product, while Claude has deliberately chosen a different trajectory. Anthropic CPO Mike Krieger has acknowledged that OpenAI had "caught lightning in a bottle" with consumer adoption. Instead of chasing that market, Anthropic is focusing on what Claude does best: developer tools, coding, and professional workflows.
Memory implementation perfectly reflects this divergence.
ChatGPT's hundreds of millions of weekly active users come from all backgrounds—students, parents, hobbyists—who just want a product that works and remembers them without thinking about the mechanics. Every memory component loads automatically, creating instant personalization with zero wait time. The system builds detailed user profiles, learning preferences and patterns that could eventually power targeted features or monetization. It's the classic consumer tech playbook: make it magical, make it sticky, figure out different ways to monetize later.
Claude's users represent a different demographic entirely. Anthropic's more technical users inherently understand how LLMs work. They're comfortable with explicit control at every level. Just as they choose when to trigger web search or enable extended thinking, they decide when memory is worth invoking. They understand that memory calls add latency, but they make that tradeoff deliberately. Memory becomes just another tool in their arsenal, not an always-on feature. This audience doesn't need or want extensive profiling—they need a powerful, predictable tool for professional work. Not to mention, they're also more privacy-conscious.
The Memory Design Space
It still amazes me that ChatGPT and Claude—the two top AI assistants—have built completely opposite memory systems. This only goes to show that memory in AI has a massive design space with no right answer or one-size-fits-all technique. You have to work backwards from who your users are and what they need, then build from first principles accordingly.
We're in uncharted territory. These tools are less than three years old, and nobody knows what happens when someone uses the same AI assistant for a decade. How much should it remember? How should it handle years of accumulated context? Meanwhile, we're seeing a Cambrian explosion of AI apps, each experimenting with their own memory approach, while the underlying models get more powerful every week. There's no playbook, no settled best practices—just everyone trying different things and seeing what sticks.
The more I dive into memory, the more fascinated I get. Over the coming weeks, I'll be dissecting different architectures, analyzing new approaches, and following the latest research. Subscribe below if you want updates as this space unfolds.
Update: Hours after publishing this, Anthropic announced a new memory feature for Team and Enterprise accounts that looks much closer to ChatGPT's approach. Haven't tried it yet (not available on Max plan), but will share an update once I do.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Top model scores may be skewed by Git history leaks in SWE-bench]]></title>
            <link>https://github.com/SWE-bench/SWE-bench/issues/465</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214670</guid>
            <description><![CDATA[We've identified multiple loopholes with SWE Bench Verified where agents may look at future repository state (by querying it directly or through a variety of methods), and cases in which future rep...]]></description>
            <content:encoded><![CDATA[We've identified multiple loopholes with SWE Bench Verified where agents may look at future repository state (by querying it directly or through a variety of methods), and cases in which future repository state includes either solutions or detailed approaches to solving problems (commit messages and more).
Examples:
A trajectory with Claude 4 Sonnet, Pytest-dev__pytest-6202 (complete output here), the agent uses git log --all which leaks future commits that directly fix the issue:

<antml:parameter name="command">cd /testbed && git log --oneline --all | grep -i "bracket|parametrize|modpath" | head -10</antml:parameter>

The results of which directly reveal the fix:
    Fix incorrect result of getmodpath method.
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index b8b365ad3..734a92f9b 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -285,8 +285,7 @@ class PyobjMixin(PyobjContext):
                     break
             parts.append(name)
         parts.reverse()
-        s = ".".join(parts)
-        return s.replace(".[", "[")
+        return ".".join(parts)

Qwen3-Coder 480B (20250805-openhands-Qwen3-Coder-480B-A35B-Instruct) also has several cases of looking ahead: some examples include django__django-13513 (complete output here) uses git log grep=[issue ID] which directly reveals the fix PR which is in the future repo state (future commits).

Running command: cd /workspace/django__django__3.2 && �[1m�[91mgit log�[0m --oneline --grep="31926" -i

In another Qwen3-Coder trajectory, Django__django-15572, (complete output here) where the model specifically finds the commit containing the fix: 62739b6e2630e37faa68a86a59fad135cc788cd7

Command cd /workspace/django__django__4.1 && �[1m�[91mgit log�[0m --oneline --grep="33628" �[92m--all�[0m executed with exit code 0.

There are other examples of leakage found in trajectories from GLM 4.5, Qwen3-Coder 30B (20250805-openhands-Qwen3-Coder-30B-A3B-Instruct), and other models.
Mitigation will be to properly remove future repository state and any artifacts that contain information the agent could use (reflogs, branches, origins, tags, and more):

remove origins (branch names can reveal information about fixes)
remove all branches git log --all can be used to query them, plus branches that are tracking a remote origin might contain information about future commits even after a git reset --hard
remove the reflog (git reflog) can leak future commit messages that could detail approaches for solutions

The team (@felixkreuk, @UniverseFly, @jlko, @2dot71mily and others) will add more details as to findings here and below. We're still assessing broader impact on evaluations and understanding trajectories for sources of leakage.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Behind the scenes of Bun Install]]></title>
            <link>https://bun.com/blog/behind-the-scenes-of-bun-install</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45210850</guid>
            <description><![CDATA[Learn how Bun is able to cut install times by up to 25×. Bun skips Node.js's overhead with direct system calls, cache-friendly data layouts, OS-level copy-on-write, and full-core parallelism.]]></description>
            <content:encoded><![CDATA[Running bun install is fast, very fast. On average, it runs ~7× faster than npm, ~4× faster than pnpm, and ~17× faster than yarn. The difference is especially noticeable in large codebases. What used to take minutes now takes (milli)seconds.These aren't just cherry-picked benchmarks. Bun is fast because it treats package installation as a systems programming problem, not a JavaScript problem.In this post we’ll explore what that means: from minimizing syscalls and caching manifests as binary, to optimizing tarball extraction, leveraging OS-native file copying, and scaling across CPU cores.But to understand why this matters, we first have to take a small step back in time.It's the year 2009. You're installing jQuery from a .zip file, your iPhone 3GS has 256MB of RAM. GitHub was just a year old, SSDs cost $700 for 256GB. Your laptop's 5400RPM hard drive maxes out at 100MB/s, and "broadband" means 10 Mbps (if you're lucky).But more importantly: Node.js just launched! Ryan Dahl is on stage explaining why servers spend most of their time waiting.In 2009, a typical disk seek takes 10ms, a database query 50–200ms, and an HTTP request to an external API 300ms+. During each of these transactions, traditional servers would just... wait. Your server would start reading a file, and then just freeze for 10ms.Now multiply that by thousands of concurrent connections each doing multiple I/O operations. Servers spent ~95% of their time waiting for I/O operations.Node.js figured that JavaScript's event loop (originally designed for browser events) was perfect for server I/O. When code makes an async request, the I/O happens in the background while the main thread immediately moves to the next task. Once complete, a callback gets queued for execution.  Simplified illustration of how Node.js handles fs.readFile with the event loop and thread pool. Other async sources and implementation details are omitted for clarity. JavaScript's event loop was a great solution for a world where waiting for data was the primary bottleneck.For the next 15 years, Node's architecture shaped how we built tools. Package managers inherited Node's thread pool, event loop, async patterns; optimizations that made sense when disk seeks took 10ms.But hardware evolved. It's not 2009 anymore, we're 16 years into the future, as hard as that is to believe. The M4 Max MacBook I'm using to write this would've ranked among the 50 fastest supercomputers on Earth in 2009. Today's NVMe drives push 7,000 MB/s, 70× faster than what Node.js was designed for! The slow mechanical drives are gone, internet speeds stream 4K video, and even low-end smartphones have more RAM than high-end servers had in 2009.Yet today's package managers still optimize for the last decade's problems. In 2025, the real bottleneck isn't I/O anymore. It's system calls.The Problem with System CallsEvery time your program wants the operating system to do something (read a file, open a network connection, allocate memory), it makes a system call. Each time you make a system call, the CPU has to perform a mode switch.Your CPU can run programs in two modes:user mode, where your application code runs. Programs in user mode cannot directly access your device's hardware, physical memory addresses, etc. This isolation prevents programs from interfering with each other or crashing the system.kernel mode, where the operating system's kernel runs. The kernel is the core component of the OS that manages resources like scheduling processes to use the CPU, handling memory, and hardware like disks or network devices. Only the kernel and device drivers operate in kernel mode!When you want to open a file, (e.g. fs.readFile()) in your program, the CPU running in user mode cannot directly read from disk. It first has to switch to kernel mode.During this mode switch, the CPU stops executing your program → saves all its state → switches into kernel mode → performs the operation → then switches back to user mode.However, this mode switching is expensive! Just this switch alone costs 1000-1500 CPU cycles in pure overhead, before any actual work happens.Your CPU operates on a clock that ticks billions of times per second. A 3GHz processor completes 3 billion cycles per second. During each cycle the CPU can execute instructions: add numbers, move data, make comparisons, etc. Each cycle takes 0.33ns.On a 3GHz processor, 1000-1500 cycles is about 500 nanoseconds. This might sound negligibly fast, but modern SSDs can handle over 1 million operations per second. If each operation requires a system call, you're burning 1.5 billion cycles per second just on mode switching.Package installation makes thousands of these system calls. Installing React and its dependencies might trigger 50,000+ system calls: that's seconds of CPU time lost to mode switching alone! Not even reading files or installing packages, just switching between user and kernel mode.This is why Bun treats package installation as a systems programming problem. Fast install speeds come from minimizing system calls and leveraging every OS-specific optimization available.You can see the difference when we trace the actual system calls made by each package manager:Benchmark 1: strace -c -f npm install
    Time (mean ± σ):  37.245 s ±  2.134 s [User: 8.432 s, System: 4.821 s]
    Range (min … max):   34.891 s … 41.203 s    10 runs

    System calls: 996,978 total (108,775 errors)
    Top syscalls: futex (663,158),  write (109,412), epoll_pwait (54,496)

  Benchmark 2: strace -c -f bun install
    Time (mean ± σ):      5.612 s ±  0.287 s [User: 2.134 s, System: 1.892 s]
    Range (min … max):    5.238 s …  6.102 s    10 runs

    System calls: 165,743 total (3,131 errors)
    Top syscalls: openat(45,348), futex (762), epoll_pwait2 (298)

  Benchmark 3: strace -c -f yarn install
    Time (mean ± σ):     94.156 s ±  3.821 s    [User: 12.734 s, System: 7.234 s]
    Range (min … max):   89.432 s … 98.912 s    10 runs

    System calls: 4,046,507 total (420,131 errors)
    Top syscalls: futex (2,499,660), epoll_pwait (326,351), write (287,543)

  Benchmark 4: strace -c -f pnpm install
    Time (mean ± σ):     24.521 s ±  1.287 s    [User: 5.821 s, System: 3.912 s]
    Range (min … max):   22.834 s … 26.743 s    10 runs

    System calls: 456,930 total (32,351 errors)
    Top syscalls: futex (116,577), openat(89,234), epoll_pwait (12,705)

  Summary
    'strace -c -f bun install' ran
      4.37 ± 0.28 times faster than 'strace -c -f pnpm install'
      6.64 ± 0.51 times faster than 'strace -c -f npm install'
     16.78 ± 1.12 times faster than 'strace -c -f yarn install'

  System Call Efficiency:
    - bun:  165,743 syscalls (29.5k syscalls/s)
    - pnpm: 456,930 syscalls (18.6k syscalls/s)
    - npm:  996,978 syscalls (26.8k syscalls/s)
    - yarn: 4,046,507 syscalls (43.0k syscalls/s)
We can see that Bun installs much faster, but it also makes far fewer system calls. For a simple install, yarn makes over 4 million system calls, npm almost 1 million, pnpm close to 500k, and bun 165k.At 1000-1500 cycles per call, yarn's 4 million system calls means it's spending billions of CPU cycles just on mode switching. On a 3GHz processor, that's seconds of pure overhead!And it's not just the amount of system calls. Look at those futex calls! Bun made 762 futex calls (only 0.46% of total system calls), whereas npm made 663,158 (66.51%), yarn made 2,499,660 (61.76%), and pnpm made 116,577 (25.51%).futex (fast userspace mutex) is a Linux system call used for thread synchronization. Threads are smaller units of a program that run simultaneously that often share access to memory or resources, so they must coordinate to avoid conflicts.Most of the time, threads coordinate using fast atomic CPU instructions in user mode. There's no need to switch to kernel mode, so it's very efficient!But if a thread tries to acquire a lock that's already taken, it makes a futex syscall to ask the kernel to put it to sleep until the lock becomes available. A high number of futex calls is an indicator that many threads are waiting on one another, causing delays.So what's Bun doing differently here?Eliminating JavaScript overheadnpm, pnpm and yarn are all written in Node.js. In Node.js, system calls aren’t made directly: when you call fs.readFile(), you’re actually going through several layers before reaching the OS.Node.js uses libuv, a C library that abstracts platform differences and manages async I/O through a thread pool.The result is that when Node.js has to read a single file, it triggers a pretty complex pipeline. For a simple fs.readFile('package.json', ...):JavaScript validates arguments and converts strings from UTF-16 to UTF-8 for libuv's C APIs. This briefly blocks the main thread before any I/O even starts.libuv queues the request for one of 4 worker threads. If all threads are busy, your request waits.A worker thread picks up the request, opens the file descriptor, and makes the actual read() system call.The kernel switches to kernel mode, fetches the data from disk, and returns it to the worker thread.The worker pushes the file data back to the main thread through the event loop, which eventually schedules and runs your callback.Every single fs.readFile() call goes through this pipeline. Package installation involves reading thousands of package.json files: scanning directories, processing dependency metadata, and so on. Each time threads coordinate (e.g., when accessing the task queue or signaling back to the event loop), a futex system call can be used to manage locks or waits.The overhead of making thousands of these system calls can take longer than the actual data movement itself!Bun does it differently. Bun is written in Zig, a programming language that compiles to native code with direct system call access:// Direct system call, no JavaScript overhead
var file = bun.sys.File.from(try bun.sys.openatA(
    bun.FD.cwd(),
    abs,
    bun.O.RDONLY,
    0,
).unwrap());
When Bun reads a file:Zig code directly invokes the system call (e.g., openat() )The kernel immediately executes the system call and returns dataThat's it. There's no JavaScript engine, thread pools, event loops or marshaling between different runtime layers. Just native code making direct system calls to the kernel.The performance difference speaks for itself:RuntimeVersionFiles/SecondPerformanceBunv1.2.20146,057Node.jsv24.5.066,5762.2x slowerNode.jsv22.18.064,6312.3x slowerIn this benchmark, Bun processes 146,057 package.json files per second, while Node.js v24.5.0 manages 66,576 and v22.18.0 handles 64,631. That's over 2x faster!Bun's 0.019ms per file represents the actual I/O cost, so how long it takes to read data when you make direct system calls without any runtime overhead. Node.js takes 0.065ms for the same operation. Package managers written in Node.js are "stuck" with Node's abstractions; they use the thread pool whether they need it or not. But they pay this cost on every file operation.Bun's package manager is more like a native application that happens to understand JavaScript packages, not a JavaScript application trying to do systems programming.Even though Bun isn't written in Node.js, you can use bun install in any Node.js project without switching runtimes. Bun's package manager respects your existing Node.js setup and tooling, you just get faster installs!But at this point we haven't even started installing packages yet. Let's see the optimizations Bun applies to the actual installation.When you type bun install, Bun first figures out what you're asking it to do. It reads any flags you've passed, and finds your package.json to read your dependencies.Async DNS Resolution⚠️ Note: This optimization is specific to macOSWorking with dependencies means working with network requests, and network requests require DNS resolution to convert domain names like registry.npmjs.org into IP addresses.As Bun is parsing the package.json, it already starts to prefetch the DNS lookups. This means network resolution begins even before dependency analysis is even complete.For a Node.js-based package managers, one way to do it is by using dns.lookup(). While this looks async from JavaScript's perspective, it's actually implemented as a blocking getaddrinfo() call under the hood, running on libuv's thread pool. It still blocks a thread, just not the main thread.As a nice optimization, Bun takes a different approach on macOS by making it truly asynchronous at the system level. Bun uses Apple's "hidden" async DNS API (getaddrinfo_async_start()), which isn't part of the POSIX standard, but it allows bun to make DNS requests that run completely asynchronously using mach ports, Apple's inter-process communication system.While DNS resolution happens in the background, Bun can continue processing other operations like file I/O, network requests, or dependency resolution without any thread blocking. By the time it needs to download React, the DNS lookup is already done.It's a small optimization (and not benchmarked), but it shows Bun's attention to detail: optimize at every layer!Binary Manifest CachingNow that Bun has established a connection to the npm registry, it needs the package manifests.A manifest is a JSON file containing all versions, dependencies, and metadata for each package. For popular packages like React with 100+ versions, these manifests can be several megabytes!A typical manifest can look something like this:{
  "name": "lodash",
  "versions": {
    "4.17.20": {
      "name": "lodash",
      "version": "4.17.20",
      "description": "Lodash modular utilities.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/lodash/lodash.git"
      },
      "homepage": "https://lodash.com/"
    },
    "4.17.21": {
      "name": "lodash",
      "version": "4.17.21",
      "description": "Lodash modular utilities.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/lodash/lodash.git"
      },
      "homepage": "https://lodash.com/"
    }
    // ... 100+ more versions, nearly identical
  }
}
Most package managers cache these manifests as JSON files in their cache directories. When you run npm install again, instead of downloading the manifest, they read it from the cache.That all makes sense, but the issue is that on every install (even if it's cached), they still need to parse the JSON file. This includes validating the syntax, building the object tree, managing garbage collection, and so on. A lot of parsing overhead.And it's not just the JSON parsing overhead. Looking at lodash: the string "Lodash modular utilities." appears in every single version—that's 100+ times. "MIT" appears 100+ times. "git+https://github.com/lodash/lodash.git" is duplicated for every version, the URL "https://lodash.com/" appears in every version. Overall, lots of repeated strings.In memory, JavaScript creates a separate string object for each string. This wastes memory and makes comparisons slower. Every time the package manager checks if two packages use the same version of postcss, it's comparing separate string objects rather than pointing to the same interned string.Bun stores package manifests in a binary format. When Bun downloads package information, it parses the JSON once and stores it as binary files (.npm files in ~/.bun/install/cache/). These binary files contain all the package information (versions, dependencies, checksums, etc.) stored at specific byte offsets.When Bun accesses the name lodash, it's just pointer arithmetic: string_buffer + offset. No allocations, no parsing, no object traversal, just reading bytes at a known location.// Pseudocode

// String buffer (all strings stored once)
string_buffer = "lodash\0MIT\0Lodash modular utilities.\0git+https://github.com/lodash/lodash.git\0https://lodash.com/\04.17.20\04.17.21\0..."
                 ^0     ^7   ^11                        ^37                                      ^79                   ^99      ^107

// Version entries (fixed-size structs)
versions = [
  { name_offset: 0, name_len: 6, version_offset: 99, version_len: 7, desc_offset: 11, desc_len: 26, license_offset: 7, license_len: 3, ... },  // 4.17.20
  { name_offset: 0, name_len: 6, version_offset: 107, version_len: 7, desc_offset: 11, desc_len: 26, license_offset: 7, license_len: 3, ... }, // 4.17.21
  // ... 100+ more version structs
]
To check if packages need updating, Bun stores the responses's ETag , and sends If-None-Match headers. When npm responds with "304 Not Modified", Bun knows the cached data is fresh without parsing a single byte.Looking at the benchmarks:Benchmark 1: bun install # fresh
  Time (mean ± σ):     230.2 ms ± 685.5 ms    [User: 145.1 ms, System: 161.9 ms]
  Range (min … max):     9.0 ms … 2181.0 ms    10 runs

Benchmark 2: bun install # cached
  Time (mean ± σ):       9.1 ms ±   0.3 ms    [User: 8.5 ms, System: 5.9 ms]
  Range (min … max):     8.7 ms …  11.5 ms    10 runs

Benchmark 3: npm install # fresh
  Time (mean ± σ):      1.786 s ±  4.407 s    [User: 0.975 s, System: 0.484 s]
  Range (min … max):    0.348 s … 14.328 s    10 runs

Benchmark 4: npm install # cached
  Time (mean ± σ):     363.1 ms ±  21.6 ms    [User: 276.3 ms, System: 63.0 ms]
  Range (min … max):   344.7 ms … 412.0 ms    10 runs

Summary
  bun install # cached ran
    25.30 ± 75.33 times faster than bun install # fresh
    39.90 ± 2.37 times faster than npm install # cached
   	196.26 ± 484.29 times faster than npm install # fresh
Here you can see that a cached(!!) npm install is slower than a fresh Bun install. That's how much overhead JSON parsing the cached files can add (among other factors).Now that Bun has fetched the package manifests, it needs to download and extract compressed tarballs from the npm registry.Tarballs are compressed archive files (like .zip files) that contain all the actual source code and files for each package.Most package managers stream the tarball data as it arrives, and decompress as it streams in. When you extract a tarball that's streaming in, the typical pattern assumes the size is unknown, and looks something like this:let buffer = Buffer.alloc(64 * 1024); // Start with 64KB
let offset = 0;

function onData(chunk) {
  while (moreDataToCome) {
    if (offset + chunk.length > buffer.length) {
      // buffer full → allocate bigger one
      const newBuffer = Buffer.alloc(buffer.length * 2);

      // copy everything we’ve already written
      buffer.copy(newBuffer, 0, 0, offset);

      buffer = newBuffer;
    }

    // copy new chunk into buffer
    chunk.copy(buffer, offset);
    offset += chunk.length;
  }

  // ... decompress from buffer ...
}
Start with a small buffer, and let it grow as more decompressed data arrives. When the buffer fills up, you allocate a larger buffer, copy all the existing data over, and continue.This seems reasonable, but it creates a performance bottleneck: you end up copying the same data multiple times as the buffer repeatedly outgrows its current size.When we have a 1MB package:Start with 64KB bufferFill up → Allocate 128KB → Copy 64KB overFill up → Allocate 256KB → Copy 128KB overFill up → Allocate 512KB → Copy 256KB overFill up → Allocate 1MB → Copy 512KB overYou just copied 960KB of data unnecessarily! And this happens for every single package. The memory allocator has to find contiguous space for each new buffer, while the old buffer stays allocated during the copy operation. For large packages, you might copy the same bytes 5-6 times.Bun takes a different approach by buffering the entire tarball before decompressing. Instead of processing data as it arrives, Bun waits until the entire compressed file is downloaded into memory.Now you might think "Wait, aren't they just wasting RAM keeping everything in memory?" And for large packages like TypeScript (which can be 50MB compressed), you'd have a point.But the vast majority of npm packages are tiny, most are under 1MB. For these common cases, buffering the whole thing eliminates all the repeated copying. Even for those larger packages, the temporary memory spike is usually fine on modern systems, and avoiding 5-6 buffer copies more than makes up for it.Once Bun has the complete tarball in memory, it can read the last 4 bytes of the gzip format. These bytes are special since store the uncompressed size of the file! Instead of having to guess how large the uncompressed file will be, Bun can pre-allocate memory to eliminate buffer resizing entirely:{
  // Last 4 bytes of a gzip-compressed file are the uncompressed size.
  if (tgz_bytes.len > 16) {
    // If the file claims to be larger than 16 bytes and smaller than 64 MB, we'll preallocate the buffer.
    // If it's larger than that, we'll do it incrementally. We want to avoid OOMing.
    const last_4_bytes: u32 = @bitCast(tgz_bytes[tgz_bytes.len - 4 ..][0..4].*);
    if (last_4_bytes > 16 and last_4_bytes < 64 * 1024 * 1024) {
      // It's okay if this fails. We will just allocate as we go and that will error if we run out of memory.
      esimated_output_size = last_4_bytes;
      if (zlib_pool.data.list.capacity == 0) {
          zlib_pool.data.list.ensureTotalCapacityPrecise(zlib_pool.data.allocator, last_4_bytes) catch {};
      } else {
          zlib_pool.data.ensureUnusedCapacity(last_4_bytes) catch {};
      }
    }
  }
}
Those 4 bytes tell Bun "this gzip will decompress to exactly 1,048,576 bytes", so it can pre-allocate exactly this amount of memory upfront. There's no repeated resizing or copying of data; just one memory allocation.To do the actual decompression, Bun uses libdeflate. This is a high-performance lib that decompresses tarballs faster than the standard zlib used by most package managers. It's optimized specifically for modern CPUs with SIMD instructions.Optimized tarball extraction would've been difficult to for package managers written in Node.js. You'd need to create a separate read stream, seek to the end, read 4 bytes, parse them, close the stream, then start over with your decompression. Node's APIs aren't designed for this pattern.In Zig it's pretty straight-forward: you just seek to the end and read the last four bytes, that's it!Now that Bun has all the package data, it faces another challenge: how do you efficiently store and access thousands of (interdependent) packages?Cache-Friendly Data LayoutDealing with thousands of packages can be tricky. Each package has dependencies, which have their own dependencies, creating a pretty complex graph.During installation, package managers have to traverse this graph to check the package versions, resolve any conflicts, and determine which version to install. They also need to "hoist" dependencies by moving them to higher levels so multiple packages can share them.But the way that this dependency graph is stored has a big impact on performance. Traditional package managers store dependencies like this:const packages = {
  next: {
    name: "next",
    version: "15.5.0",
    dependencies: {
      "@swc/helpers": "0.5.15",
      "postcss": "8.4.31",
      "styled-jsx": "5.1.6",
    },
  },
  postcss: {
    name: "postcss",
    version: "8.4.31",
    dependencies: {
      nanoid: "^3.3.6",
      picocolors: "^1.0.0",
    },
  },
};
This looks clean as JavaScript code, but it's not ideal for modern CPU architectures.In JavaScript, each object is stored on the heap. When accessing packages["next"], the CPU accesses a pointer that tells it where Next's data is located in memory. This data then contains yet another pointer to where its dependencies live, which in turn contains more pointers to the actual dependency strings.The key issue is how JavaScript allocates objects in memory. When you create objects at different times, the JavaScript engine uses whatever memory is available at that moment:// These objects are created at different moments during parsing
packages["react"] = { name: "react", ... }  	  // Allocated at address 0x1000
packages["next"] = { name: "next", ... }     		// Allocated at address 0x2000
packages["postcss"] = { name: "postcss", ... }  // Allocated at address 0x8000
// ... hundreds more packages
These addresses are basically just random. There is no locality guarantee - objects can just be scattered across RAM, even objects that are related to each other!This random scattering matters because of how modern CPUs actually fetch data.Modern CPUs are incredibly fast at processing data (billions of operations per second), but fetching data from RAM is slow. To bridge this gap, CPUs have multiple cache levels:L1 cache, small storage, but extremely fast (~4 CPU cycles)L2 cache, medium storage, a bit slower (~12 CPU cycles)L3 cache: 8-32MB storage, requires ~40 CPU cyclesRAM: Lots of GB, requires ~300 cycles (slow!)The "issue" is that caches work with cache lines. When you access memory, the CPU doesn't just load that one byte: it loads the entire 64-byte chunk in which that byte appears. It figures that if you need one byte, you'll probably need nearby bytes soon (this is called spatial locality).This optimization works great for data that's stored sequentially, but it backfires when your data is scattered randomly across memory.When the CPU loads packages["next"] at address 0x2000, it actually loads all the bytes within that cache line. But the next package, packages["postcss"], is at address 0x8000 . This is a completely different cache line! The other 56 bytes the CPU loaded in the cache line are just completely wasted, they're just random memory from whatever happened to be allocated nearby; maybe garbage, maybe parts of unrelated objects.But you paid the cost of loading 64 bytes but only used 8...By the time it's accessed 512 different packages (32KB / 64 bytes), you've filled your entire L1 cache already. Now every new package access evicts a previously loaded cache line to make space. The package you just accessed will be evicted soon, and that dependency it needs to check in 10 microseconds is already gone. Cache hit rate drops, and every access becomes a ~300 cycle trip to RAM instead of a 4 cycle L1 hit, far from optimal.The nested structure of objects creates whats called "pointer chasing", a common anti-pattern in system programming. The CPU can't predict where to load next because each pointer could point anywhere. It simply cannot know where next.dependencies lives until it finishes loading the next object.When traversing Next's dependencies, the CPU has to perform multiple dependent memory loads:Load packages["next"] pointer → Cache miss → RAM fetch (~300 cycles)Follow that pointer to load next.dependencies pointer → Another cache miss → RAM fetch (~300 cycles)Follow that to find "postcss" in the hash table → Cache miss → RAM fetch (~300 cycles)Follow that pointer to load the actual string data → Cache miss → RAM fetch (~300 cycles)We can end up with many cache misses since we're working with hundreds of dependencies, all scattered across memory. Each cache line we load (64 bytes) might contain data for just one object. With all those objects spread across GBs of RAM, the working set easily exceeds the L1 cache (32KB), L2 (256KB) and even the L3 cache (8-32MB). By the time we need an object again, it's likely that it's been evicted from all cache levels.That's ~1200 cycles (400ns on a 3GHz CPU) just to read one dependency name! For a project with 1000 packages averaging 5 dependencies each, that's 2ms of pure memory latency.Bun uses Structure of Arrays. Instead of each package storing its own dependency array, Bun keeps all dependencies in one big shared array, all package names in another shared array, and so on:// ❌ Traditional Array of Structures (AoS) - lots of pointers
packages = {
  next: { dependencies: { "@swc/helpers": "0.5.15", "postcss": "8.4.31" } },
};

// ✅ Bun's Structure of Arrays (SoA) - cache friendly
packages = [
  {
    name: { off: 0, len: 4 },
    version: { off: 5, len: 6 },
    deps: { off: 0, len: 2 },
  }, // next
];

dependencies = [
  { name: { off: 12, len: 13 }, version: { off: 26, len: 7 } }, // @swc/helpers@0.5.15
  { name: { off: 34, len: 7 }, version: { off: 42, len: 6 } }, // postcss@8.4.31
];

string_buffer = "next\015.5.0\0@swc/helpers\00.5.15\0postcss\08.4.31\0";
Instead of each package storing pointers to its own data scattered across memory, Bun just uses large contiguous buffers, including:packages stores lightweight structs that specify where to find this package's data using offsetsdependencies stores the actual dependency relationships for all packages in one placestring_buffer stores all text (names, versions, etc.) sequentially in one massive stringversions stores all parsed semantic versions as compact structsNow, accessing Next's dependencies just becomes arithmetic:packages[0] tells us that Next's dependencies start at position 0 in the dependencies array, and there's 2 dependencies: { name_offset: 0, deps_offset: 0, deps_count: 2 }Go to dependencies[1] which tells us that postcss's name starts at position 34 in the string string_buffer, and version at position 42: { name_offset: 34, version_offset: 42 }Go to position 34 in string_buffer and read postcssGo to position 42 in string_buffer and read "8.4.31"… and so onNow when you access packages[0], the CPU doesn't just load those 8 bytes: it loads an entire 64-byte cache line. Since each package is 8 bytes, and 64 ÷ 8 = 8, you get packages[0] through packages[7] in a single memory fetch.So when your code processes the react dependency (packages[0], packages[1] through packages[7] are already sitting in your L1 cache, ready to be accessed with zero additional memory fetches. That's why sequential access is so fast: you're getting 8 packages just by accessing memory once.Instead of the many small, scattered allocations throughout memory that we saw in the previous example, we now have just ~6 large allocations in total, regardless of how many packages you have. This is completely different from the pointer-based approach, which required a separate memory fetch for each object.Optimized Lockfile FormatBun also applies the Structure of Arrays approach to its bun.lock lockfile.When you run bun install, Bun has to parse the existing lockfile to determine what's already installed and what needs updating. Most package managers store lockfiles as nested JSON (npm) or YAML (pnpm, yarn). When npm parses package-lock.json, it's processing deeply nested objects:{
  "dependencies": {
    "next": {
      "version": "15.5.0",
      "requires": {
        "@swc/helpers": "0.5.15",
        "postcss": "8.4.31"
      }
    },
    "postcss": {
      "version": "8.4.31",
      "requires": {
        "nanoid": "^3.3.6",
        "picocolors": "^1.0.0"
      }
    }
  }
}
Each package becomes its own object with nested dependency objects. JSON parsers must allocate memory for every object, validate syntax, and build complex nested trees. For projects with thousands of dependencies, this creates the same pointer-chasing problem we saw earlier!Bun applies the Structure of Arrays approach to its lockfile, in a human-readable format:{
  "lockfileVersion": 0,
  "packages": {
    "next": [
      "next@npm:15.5.0",
      { "@swc/helpers": "0.5.15", "postcss": "8.4.31" },
      "hash123"
    ],
    "postcss": [
      "postcss@npm:8.4.31",
      { "nanoid": "^3.3.6", "picocolors": "^1.0.0" },
      "hash456"
    ]
  }
}
This again deduplicates strings, and stores dependencies in a cache-friendly layout. They're stored following dependency order rather than alphabetically or in a nested hierarchy. This means that a parser can read memory more efficiently (sequentially), avoiding random jumps between objects.And not only that, Bun also pre-allocates memory based on the lockfile size. Just like with tarball extraction, this avoids the repeated resize-and-copy cycles that create performance bottlenecks during parsing.As a sidenote: Bun originally used a binary lockfile format (bun.lockb) to avoid JSON parsing overhead entirely, but binary files are impossible to review in pull requests and can't be merged when conflicts happen.File copyingAfter the packages are installed and cached in ~/.bun/install/cache/, Bun must copy the files into node_modules. This is where we see most of Bun's performance impact!Traditional file copying traverses each directory and copies files individually. This requires multiple system calls per file:opening the source file (open())creating and opening the destination file (open())repeatedly reading chunks from the source and writing them to the destination until complete (read()/ write())finally, closing both files close().Each of these steps requires that expensive mode switch between user mode and the kernel.For a typical React app with thousands of package files, this generates hundreds of thousands to millions of system calls! This is exactly the systems programming problem we described earlier: the overhead of making all these system calls becomes more expensive than actually moving the data.Bun uses different strategies depending on your operating system and filesystem, leveraging every OS-specific optimization available. Bun supports several file copying backends, each with different performance characteristics:macOSOn macOS, Bun uses Apple's native clonefile() copy-on-write system call.clonefile can clone entire directory trees in a single system call. This system call creates new directory and file metadata entries that reference the same physical disk blocks as the original files. Instead of writing new data to disk, the filesystem just creates new "pointers" to existing data.// Traditional approach: millions of syscalls
for (each file) {
  copy_file_traditionally(src, dst);  // 50+ syscalls per file
}

// Bun's approach: ONE syscall
clonefile("/cache/react", "/node_modules/react", 0);
SSD stores data in fixed-size blocks. When you normally copy a file (copy()), the filesystem allocates new blocks and writes duplicate data. With clonefile, both the original and "copied" file have metadata that points to the exact same physical blocks on your SSD.Copy-on-write means data is only duplicated when modified. This results in an O(1) operation vs. the O(n) of traditional copying.The metadata of both files point to the same data blocks until you modify one of them.When you modify the contents of one of the files, the filesystem automatically allocates new blocks for the edited parts, and updates the file metadata to point to the new blocks.However, this rarely happens since node_modules files are typically read-only after installation; we don't actively modify modules from within our code.This makes copy-on-write extremely efficient: multiple packages can share identical dependency files without using additional disk space.Benchmark 1: bun install --backend=copyfile
  Time (mean ± σ):      2.955 s ±  0.101 s    [User: 0.190 s, System: 1.991 s]
  Range (min … max):    2.825 s …  3.107 s    10 runs

Benchmark 2: bun install --backend=clonefile
  Time (mean ± σ):      1.274 s ±  0.052 s    [User: 0.140 s, System: 0.257 s]
  Range (min … max):    1.184 s …  1.362 s    10 runs

Summary
  bun install --backend=clonefile ran
    2.32 ± 0.12 times faster than bun install --backend=copyfile
When clonefile fails (due to lack of filesystem support), Bun falls back to clonefile_each_dir for per-directory cloning. If that also fails, Bun uses traditional copyfile as the final fallback.LinuxLinux doesn't have clonefile(), but it has something even older and more powerful: hardlinks. Bun implements a fallback chain that tries increasingly less optimal approaches until one works:1. HardlinksOn Linux, Bun's default strategy is hardlinks. A hardlink doesn't create a new file at all, it only creates a new name for an existing file, and references this existing file.link("/cache/react/index.js", "/node_modules/react/index.js");
To understand hardlinks, you need to understand inodes. Every file on Linux has an inode, which is a data structure that contains all the file's metadata (permissions, timestamps, etc.). The filename is just a pointer to an inode:Both paths point to the same inode. If you delete one path, the other remains. However, if you modify one, both see changes (because they're the same file!).This results in great performance gains because there's zero data movement. Creating a hard link requires a single system call that completes in microseconds, regardless of whether you're linking a 1KB file or a 100MB bundle. Much more efficient than traditional copying, which has to read and write every single byte.They're also extremely efficient for disk space, since there's only ever one copy of the actual data on disk, no matter how many packages reference the same dependency filesHowever, hardlinks have limitations. They can't cross filesystem boundaries (e.g. your cache is in a different location than your node_modules), some filesystems don't support them, and certain file types or permission configurations can cause hardlink creation to fail.When hardlinks aren't possible, Bun has some fallbacks:2. ioctl_ficloneIt starts with ioctl_ficlone, which enables copy-on-write on filesystems like Btrfs and XFS. This is very similar to clonefile's copy-on-write system in the way that it also creates a new file references that share the same disk data. Unlike hardlinks, these are separate files; they just happen to share storage until modified.3. copy_file_rangeIf copy-on-write isn't available, Bun tries to at least keep the copying in kernel space and falls back to copy_file_range.In a traditional copy, the kernel reads from disk into a kernel buffer, then copies that data to your program's buffer in user space. Later when you call write(), it copies it back to a kernel buffer before writing to disk. That's four memory operations and multiple context switches!With copy_file_range, the kernel reads from disk into a kernel buffer and writes directly to disk. Just two operations and zero context switches for the data movement.4. sendfileIf that's unavailable, Bun uses sendfile. This is a system call that was originally designed for network transfers, but it's also effective for copying data directly between two files on disk.This command also keeps data in kernel space: the kernel reads data from one destination (a reference to an open file on disk, e.g. a source file in ~/.bun/install/cache/) and writes it to another destination (like a destination file in node_modules), all within the kernel's memory space.This process is called disk-to-disk copying, as it moves data between files stored on the same or different disks without touching your program's memory. It's an older API but more widely supported, making it a reliable fallback when newer system calls aren't available while still reducing the number of memory calls.5. copyfileAs a last resort, Bun uses traditional file copying; the same approach most package managers use. This creates entirely separate copies of each file by reading data from the cache and writing it to the destination using a read()/write() loop. This uses multiple system calls, which is exactly what Bun is trying to minimize. It's the least efficient option, but it's universally compatible.Benchmark 1: bun install --backend=copyfile
  Time (mean ± σ):     325.0 ms ±   7.7 ms    [User: 38.4 ms, System: 295.0 ms]
  Range (min … max):   314.2 ms … 340.0 ms    10 runs

Benchmark 2: bun install --backend=hardlink
  Time (mean ± σ):     109.4 ms ±   5.1 ms    [User: 32.0 ms, System: 86.8 ms]
  Range (min … max):   102.8 ms … 119.0 ms    19 runs

Summary
  bun install --backend=hardlink ran
    2.97 ± 0.16 times faster than bun install --backend=copyfile
These file copying optimizations address the primary bottleneck: system call overhead. Instead of using a one-size-fits-all approach, Bun chooses the most efficient file copying specifically tailored to you.Multi-Core ParallelismAll the above-mentioned optimizations are great, but they aim to reduce the workload for a single CPU core. However, modern laptops have 8, 16, even 24 CPU cores!Node.js has a thread pool, but all the actual work (e.g. figuring out which version of React works with which version of webpack, building the dependency graph, deciding what to install) happens on one thread and one CPU core. When npm runs on your M3 Max, one core works really hard while the other 15 are idle.A CPU core can independently execute instructions. Early computers had one core, they could only do one thing at a time, but modern CPUs pack multiple cores onto a single chip. A 16-core CPU can execute 16 different instruction streams simultaneously, not just switching between them really fast.This is yet another fundamental bottleneck for traditional package managers: no matter how many cores you have, the package manager can only use one CPU core.Bun takes a different approach with a lock-free, work-stealing thread pool architecture.Work-stealing means that idle threads can "steal" pending tasks from busy threads' queues. When a thread finishes its work, it checks its local queue, then the global queue, then steals from other threads. No thread sits idle when there's still work to do.Instead of being limited to JavaScript's event loop, Bun spawns native threads that can fully utilize every CPU core. The thread pool automatically scales to match your device's CPU's core count, allowing Bun to maximize parallelizing the I/O-heavy parts of the installation process. One thread can be extracting next's tarball, another is resolving postcss dependencies, a third applying patches to webpack, and so on.But multi-threading often comes with synchronization overhead. Those hundreds of thousands of futex calls npm made were just threads constantly waiting for each other. Each time a thread wants to add a task to a shared queue, it has to lock it first, blocking all other threads.// Traditional approach: Locks
mutex.lock();                   // Thread 1 gets exclusive access
queue.push(task);               // Only Thread 1 can work
mutex.unlock();                 // Finally releases lock
// Problem: Threads 2-8 blocked, waiting in line
Bun uses lock-free data structures instead. These use special CPU instructions called atomic operations that allow threads to safely modify shared data without locks:pub fn push(self: *Queue, batch: Batch) void {
  // Atomic compare-and-swap, happens instantly
  _ = @cmpxchgStrong(usize, &self.state, state, new_state, .seq_cst, .seq_cst);
}
In an earlier benchmark we saw that Bun was able to process 146,057 package.json files/second versus Node.js's 66,576. That's the impact of using all cores instead of one.Bun also runs network operations differently. Traditional package managers often block. When downloading a package, the CPU sits idle waiting for the network.Bun maintains a pool of 64(!) concurrent HTTP connections (configurable via BUN_CONFIG_MAX_HTTP_REQUESTS) on dedicated network threads. The network thread runs independently with its own event loop, handling all downloads while CPU threads handle the extraction and processing. Neither waits for the other.Bun also gives each thread its own memory pool. An issue with "traditional" multi-threading is that all threads compete for the same memory allocator. This creates contention: if 16 threads all need memory at once, they have to wait for each other.// Traditional: all threads share one allocator
Thread 1: "I need 1KB for package data"    // Lock allocator
Thread 2: "I need 2KB for JSON parsing"    // Wait...
Thread 3: "I need 512B for file paths"     // Wait...
Thread 4: "I need 4KB for extraction"      // Wait...
Bun instead gives each thread its own large chunk of pre-allocated memory that the thread manages independently. There's no sharing or waiting, each thread works with its own data whenever possible.// Bun: each thread has its own allocator
Thread 1: Allocates from pool 1    // Instant
Thread 2: Allocates from pool 2    // Instant
Thread 3: Allocates from pool 3    // Instant
Thread 4: Allocates from pool 4    // Instant
ConclusionThe package managers we benchmarked weren't built wrong, they were solutions designed for the constraints of their time.npm gave us a foundation to build on, yarn made managing workspaces less painful, and pnpm came up with a clever way to save space and speed things up with hardlinks. Each worked hard to solve the problems developers were actually hitting at the time.But that world no longer exists. SSDs are 70× faster, CPUs have dozens of cores, and memory is cheap. The real bottleneck shifted from hardware speed to software abstractions.Buns approach wasn't revolutionary, it was just willing to look at what actually slows things down today. When SSDs can handle a million operations per second, why accept thread pool overhead? When you're reading the same package manifest for the hundredth time, why parse JSON again? When the filesystem supports copy-on-write, why duplicate gigabytes of data?The tools that will define the next decade of developer productivity are being written right now, by teams who understand that performance bottlenecks shifted when storage got fast and memory got cheap. They're not just incrementally improving what exists; they're rethinking what's possible.Installing packages 25x faster isn't "magic": it's what happens when tools are built for the hardware we actually have.→ Experience software built for 2025 at bun.com]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AirPods live translation blocked for EU users with EU Apple accounts]]></title>
            <link>https://www.macrumors.com/2025/09/11/airpods-live-translation-eu-restricted/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45210428</guid>
            <description><![CDATA[Apple's new Live Translation feature for AirPods will be off-limits to millions of European users when it arrives next week, with strict EU...]]></description>
            <content:encoded><![CDATA[Thursday September 11, 2025 4:01 am PDT by Tim HardwickApple's new Live Translation feature for AirPods will be off-limits to millions of European users when it arrives next week, with strict EU regulations likely holding back its rollout.
Apple says on its feature availability webpage that "Apple Intelligence: Live Translation with AirPods" won't be available if both the user is physically in the EU and their Apple Account region is in the EU. Apple doesn't give a reason for the restriction, but legal and regulatory pressures seem the most plausible culprits.
In particular, the EU's Artificial Intelligence Act and the General Data Protection Regulation (GDPR) both impose strict requirements for how speech and translation services are offered. Regulators may want to study how Live Translation works, and how that impacts privacy, consent, data-flows, and user rights. Apple will also want to ensure its system fully complies with these rules before enabling the feature across EU accounts.
Apple's Live Translation feature, unveiled during its AirPods Pro 3 announcement, is also coming to older models including AirPods 4 with Active Noise Cancellation and AirPods Pro 2.
Live Translation enables hands-free communication by allowing users to speak naturally while wearing AirPods. For conversations with non-AirPods users, the iPhone can display live transcriptions horizontally, showing translations in the other person's preferred language.
The feature becomes more powerful when both conversation participants wear compatible AirPods with Live Translation enabled. Active Noise Cancellation automatically lowers the volume of the other speaker, helping users focus on translated audio while maintaining natural interaction flow.
The new Live Translation functionality requires AirPods updated with the latest firmware to pair with an Apple Intelligence-enabled iPhone running iOS 26 or later, so iPhone 15 Pro and newer models are supported. Apple has been beta testing firmware in concert with iOS 26 beta updates, and we expect the firmware to drop the same day that iOS 26 is officially released on September 15.
The feature supports real-time translation between English (UK and U.S.), French, German, Portuguese (Brazil), and Spanish. Apple plans to add Italian, Japanese, Korean, and Chinese (simplified) support later this year. When the EU/Apple Account restriction will be lifted remains unclear, but we've reached out to Apple to see if they're willing to provide more details.
Note: Due to the political or social nature of the discussion regarding this topic, the discussion thread is located in our Political News forum.  All forum members and site visitors are welcome to read and follow the thread, but posting is limited to forum members with at least 100 posts.
Popular StoriesApple Announces iPhone 17 Pro and Pro Max With New Design, Larger Battery, and MoreTuesday September 9, 2025 10:59 am PDT by Joe RossignolApple today introduced the iPhone 17 Pro and iPhone 17 Pro Max.
Both devices feature a new aluminum unibody design, with the Ceramic Shield now protecting both the front and back sides. Apple says the front side is now Ceramic Shield 2, which offers 3x better scratch resistance, while the rear Ceramic Shield is advertised as 4x more resistant to cracks compared to the back glass on previous...Apple Event Live Blog: iPhone 17, iPhone Air, New Apple Watches, and AirPods Pro 3Tuesday September 9, 2025 8:55 am PDT by Jordan GolsonApple's "Awe Dropping" event kicks off today at 10:00 a.m. Pacific Time, where we're expecting to see the iPhone 17 lineup, several updated Apple Watch models, and the third-generation AirPods Pro unveiled, and perhaps some other announcements.
Apple is providing a live video stream on its website, on YouTube, and in the company's TV app across various platforms. We will also be updating...iPhone 17 and iPhone 17 Pro Models Are eSIM-Only in These CountriesTuesday September 9, 2025 12:23 pm PDT by Joe RossignolApple continues to phase out the physical SIM card tray on iPhones, with the latest models relying solely on eSIM technology in more countries.
The new iPhone 17, iPhone 17 Pro, and iPhone 17 Pro Max support eSIMs only in these countries and regions, according to Apple:

  Bahrain
  Canada
  Guam
  Japan
  Kuwait
  Mexico
  Oman
  Qatar
  Saudi Arabia
  United Arab Emirates
  Un...Apple Announces iPhone Air With Ultra-Thin DesignApple today unveiled the iPhone Air, an all-new kind of iPhone featuring an ultra-thin design.
The iPhone Air is just 5.6mm thick, making it the thinnest iPhone ever. The frame is made of titanium with a polished mirror finish. The device features Ceramic Shield 2 with 3x better scratch resistance and 4x better crack resistance, on both sides of the device for the first time. Apple says that ...Two Versions of AirPods Pro 3 Coming With These DifferencesApple is preparing to launch two versions of the AirPods Pro 3 over 2025 and 2026, according to a Weibo leaker.
Yesterday, supply chain analyst Ming-Chi Kuo reported that Apple is planning to debut the AirPods Pro 3 this year. They could arrive as soon as this week at Apple's "Awe dropping" event. 
Crucially, Kuo added that Apple is planning to introduce a successor to this year's AirPods ...Apple Lists iPhone 17, iPhone Air, and iPhone 17 Pro Battery CapacitiesTuesday September 9, 2025 1:25 pm PDT by Joe RossignolApple has confirmed the battery capacities for the iPhone 17, iPhone Air, iPhone 17 Pro, and iPhone 17 Pro Max models that were announced earlier today.
Apple is required to publish energy labels on its iPhone product pages in the EU, and they reveal the official mAh battery capacities for the devices.
Here are the battery capacities for each model, according to Apple:

  iPhone 17:...]]></content:encoded>
        </item>
    </channel>
</rss>