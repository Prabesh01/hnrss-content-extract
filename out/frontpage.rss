<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Sun, 14 Sep 2025 10:51:17 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[The PC was never a true 'IBMer']]></title>
            <link>https://thechipletter.substack.com/p/the-pc-was-never-a-true-ibmer</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45238567</guid>
        </item>
        <item>
            <title><![CDATA[Gemini (2023)]]></title>
            <link>https://geminiquickst.art/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45238536</guid>
            <description><![CDATA[A Quick Start Guide For New Gemini Users]]></description>
            <content:encoded><![CDATA[
        
         
            
    
        What is Gemini?

Gemini is a new way of using the Internet, separate from the World Wide
Web you are familiar with. Compared to the WWW, it is intended to be:

Simpler – Gemini pages aren’t programs that run in your browser like
most modern websites are; they’re just text with a little formatting,
so there are no surprises. Once you know how one Gemini page works,
you know how they all work.
Human Scale – Gemini servers and clients aren’t written by big,
monopolistic software companies the way web browsers are; the DIY
ethos of Gemini means that complete applications can be written by
individual developers or small groups in a reasonable amount of time.
That also means that you have more choices compared to web browsers.
Distraction Free – Gemini pages are text-only and have simple
typography. You can view images, watch video, or listen to music over
Gemini, but nothing will ever autoplay, pop over what you’re
reading, or jump out of the way of your mouse.
Privacy Protecting – Every Gemini request is independent of every
other, so there’s no way to track you between sites. Every site you
visit is protected by the same encryption used by banking and
eCommerce sites on the WWW.

More details are in the Official Gemini
FAQ. Be aware that it’s
targeted at a more technical audience than this quick start page, so you
might want to skip it for now and come back later. The main thing to
know is that you’re going to get a much more stripped-down experience
compared to the modern WWW, but that’s okay! Some of the choices made to
keep Gemini simple may seem too extreme, compared to even a bare-bones
web site, but there are hidden benefits that won’t be obvious at first.
How do I read pages on Gemini?
The first thing to do is to install a Gemini client. A Gemini client is
like a web browser, except instead of browsing the web, it browses
Geminispace. There are at least a couple of Gemini clients available for
most platforms. Here, I’m going to recommend just one, that I think will
feel most familiar or least surprising to new users. That doesn’t mean I
think the other ones are bad. A lot of it is just personal preference,
just like with web browsers. After you get used to Gemini with the
client I recommend, you may want to try some others.
You may be used to doing everything in the web browser, and find it
strange or uncomfortable to have to install a different program to read
Gemini pages. But you’ll get used to it; the WWW tries to be everything
to everyone, both a floor-wax and a toothpaste, while Gemini tries to
be good at just one thing.
Windows
You have several options for a Gemini browser on Windows, but I’m
going to recommend that you install
Geminaut, because of
its comfortable, Windows-native user interface. Download and run the
latest MSI file from the website. You will get a warning that the
installer isn’t signed, which is because the developer is an
independent hobbyist. If you downloaded it directly from the link
above, it should be safe to “run anyway”.








Lagrange is
another good option – it has more features and is lightweight, but the
user interface isn’t native like GemiNaut’s. There is also a nightly
build of Kristall.
MacOS
There are several Gemini clients that can be built for MacOS, but the
only one I know of that provides pre-built downloads for a released
version is
Lagrange. That’s
okay, because Lagrange is a very good browser. The UI doesn’t use
native controls, but it’s light and fast.


There may also be nightly builds of
Kristall, if you’re so
inclined.
iOS
There is one Gemini client on the app store, called
Elaho. There is another one
on TestFlight called
Rocketeer.








Android
For Android, I recommend
Ariane. The developer’s site
has several different download options, but if you are at all unsure,
you should install from Google
Play.
Deedum
is also a good client for Android, but its UI is not quite as simple.


Linux or Unix (desktop GUI)
If you’re able to compile programs from source, you are spoiled for
choice. Most Gemini clients are developed for Linux. The main GUI
choices are:

Lagrange
Kristall (QT5)
Castor (GTK)

If you need a binary release, you will probably need to install
Lagrange. Lagrange is on
FlatHub, so if
your distribution supports FlatPaks, you’re in luck. There is also a
nightly AppImage of Kristall, if you prefer.


Linux or Unix (terminal or console)
The situation here is similar to Linux GUI clients, but there are at
least two that have binary releases:

Bombadillo
Amfora

If you’re not sure which you want, go for Amfora; it has more familiar
keybindings than Bombadillo.
Other
If there’s no Gemini client for your platform, but there is a web
browser, you can use a proxy. Either
portal.mozz.us or
proxy.vulpes.one
should work for your needs.
You shouldn’t use a proxy just because you don’t want to install a
Gemini client, though! You will miss out on the experience of not
using the web browser.
Where do I point my Gemini client?
By now, you should have a Gemini client installed. If you’ve tried to install
one, but gotten stuck, please feel free to give me an email at
help@geminiquickst.art. I don’t mind! You can
do this next part using one of the web portals, but it would be better if you
had a real client installed.
First, open up your Gemini client, and arrange it so that you can see both the
Gemini client and the web browser you’re reading this in. You should be able to
follow the rest of this tutorial in Gemini. In your Gemini client, open
gemini://geminiquickst.art/. You may or may not
be able to click on that link from your web browser and have it open up in your
Gemini client, depending on a lot of nerd stuff that you don’t have to care
about now. If it doesn’t open up on click, copy and paste
gemini://geminiquickst.art/ into your Gemini client. You should get a page
that’s pretty much the same as this one, though the colors and fonts may be
different. Scroll it down until you reach this point, then read the rest of your
page in your Gemini client, rather than your web browser.
Where do I find things to read on Gemini?
Gemini is pretty new, so like the early web, there’s not as much content as
you’re used to on the modern web, and too much of it is tech stuff. But there’s
a lot of other stuff there too, if you’re willing to look.
Gemlogs (like blogs)
One of the main things people have been using Gemini for is blogging. And it
makes sense, because blogs are mostly text, it’s easy to find updates, and the
web has made a real mess of it, where it hasn’t completely abandoned it to
social media.
Several of the clients recommended above have built in feed-readers for
subscribing to gemlogs and staying informed about updates. If yours does, I
recommend that you take advantage of that feature as you find gemlogs you want
to read. It will be more flexible than depending on a feed aggregator hosted by
someone else, and easier than setting up your own feed aggregator.
But to find feeds to subscribe to, you’re best off starting with an aggregator
someone else is running. This is a list of well-known public aggregators in
Geminispace.

CAPCOM is run by Solderpunk, the
founder of the Gemini project. It knows about over 200 Gemini feeds, but picks
100 every month to display. It’s a good way of finding feeds to follow.
Spacewalk is an aggregator that
follows every update to the pages it follows. This makes it a little less
accurate than CAPCOM, but can follow pages that don’t announce their
updates.
gmisub aggregates over
100 feeds using the Gemini simple feed
specification.

Curated directories of interesting pages by topic
Because Geminispace is a lot smaller than the web, it’s still somewhat possible
to hand-curate a list of interesting sites. You may remember how Yahoo! got its
start as a curated index of links by topic.

Medusae.space is an index similar to the
old Yahoo!. You can browse by topic, or search.
Gemini Discovery is a
index of search engines and indices you can use to find things
you’re interested in.

Searching
You can also search Gemini, just like you can search the web. However,
it’s not indexed by Google or Bing or DuckDuckGo; we have our own
search engines. Or rather, search engine. There have been three search
engines built for Gemini, but only one is currently active:
Geminispace.info.
That said, search is not as important, currently, on Gemini as it
is on the WWW. Subscriptions and cross-site links are the main ways of
finding new things.

This part is a little harder, but people are busily working on making
it easier! The first thing that you should know is that there’s no
direct equivalent of the WWW’s social media sites on Gemini. Gemini
doesn’t have a built-in method for posting things, so most people posting
on Gemini right now are using separate tools to write their pages or
posts and to upload them to a server. And that’s leaving out
registering an account on the server, which is usually done manually
by the site owner! But that situation is going to get better. Right
now, there are a few Gemini sites where the “separate tools” for
registering an account and posting pages or updates are web
applications, and it’s likely that someone will make an integrated
native application.
Gemini sites with WWW applications for posting

The Midnight Pub is a hybrid Gemini site with a
“local pub” theme. Some people post regular gemlogs, some people
role-play the part of patrons at the pub. It’s kind of a slow-paced
social media site. Registration requires emailing the bartender to
ask them for a key, but don’t be shy – they just want to make sure
you’re not a spammer. People can subscribe to a feed of just your
posts, or a feed of everyone at the pub.
Gemlog.Blue is a site that makes it easy to
maintain a gemlog. You can register on the WWW side of the site, and
create, edit, or delete posts through the web interface, and view
them through Gemini. People can subscribe to a feed of your posts.
Flounder is another site with a web
application for posting. It’s more general-purpose than Gemlog.Blue
or the Midnight Pub. The registration page asks where you heard
about Flounder, but it’s really just a low-tech anti-spam
measure. Tell them this page sent you.

Gemini sites with public account signup
Shared hosting on Gemini today is pretty similar to shared hosting on
the WWW in 1999, but in general more community-oriented and
friendlier. If you think of these sites as being like GeoCities, but
without neon backgrounds and blinking “under construction” GIFs, you
won’t be too far wrong.
With these sites, you will sign up, either via the web or email, and
have a space that you can access with a native graphical file transfer
application such as FileZilla
(Windows, MacOS, or Linux). You’ll write
Gemtext
documents on your own computer, then copy them to your host with
Filezilla or a similar program. Some of these sites will want you to
send an SSH public key, which may sound too technical, but Digital
Ocean
has a pretty good guide to using them with FileZilla. It’s focused on
their own VPS service, but most of it should apply here, too.
One warning – if you’re on Windows and you’re not careful with how you
install Filezilla, you may end up with some additional bundled
software you don’t want. For Windows users, I recommend
Winscp as an alternative.

pollux.casa offers free Gemini hosting on
subdomains (like ‘yourname.pollux.casa’) that are also reachable by
http. Sign-up is by email to Adële, the host, and access to your
files is by SFTP or FTPS. Overall, this seems like one of the most
friendly site hosting options for newcomers.
If you are a French speaker, you might look at Un bon
café, a French Gemini hosting service that
aims to be simple and use sFTP for uploading content. They also
offer an email hosting service. The service is free.
koyu.space offers free
hosting. Unlike some of the others, your site gets automatically
updated from a git repository you maintain, so this one is probably
not best for non-technical people, unless you have a hankering to
learn git.
SourceHut Pages offers free Gemini
hosting. Their setup is probably more complex than non-technical
users will want to engage with, but it’s free, and it’s somewhat
less involved than running your own Gemini server.
Jae’s Gemini pod offers free hosting,
on a subdomain or your own domain. You’ll need to send the owner a
SSH public key, a name for your website, and the domain name or
subdomain you want to use.
Main Street in Nightfall
City offers
Gemini, Gopher, and WWW hosting at the center of downtown Nightfall
City, home of the Midnight Pub. The hosting here is a little more
hands-on, but more flexible. You’ll need an account name and SSH
public key. The online help focuses on terminal tools, but you
should be able to use FileZilla or similar to upload your pages.
si3t.ch offers free shared hosting. Your
capsule will have its own subdirectory. Instructions are on the
site.

Pubnixes and Tildes
A pubnix is a PUBlic uNIX server, a kind of shared computer for use by
members of a community. They’re usually used by logging in to a
terminal interface using an SSH (secure shell) client. That’s actually
a very good way to dip your toes into the more technical side of
Gemini (and Gopher, and WWW) hosting, but it’s understandable if it’s
not for you. Many pubnixes offer Gemini hosting to their members.
These are a few pubnixes with Gemini hosting:

The Mare Crisium Soviet Socialist
Regency
The Mare Tranquillitatis People’s Circumlunar
Zaibatsu
The Mare Serenitatis Circumlunar Corporate Republic
Ctrl-C Club
envs.net
heathens.club
Park City
RawTextClub
SDF Public Access UNIX System
tilde.pink

Self-hosting guides (here be monsters)
It’s not hard, as these things go to set up a Gemini server on a VPS
(Virtual Private Server), a collocated server, or a Raspberry Pi in a
shoebox under the bookshelf your router sits on. However “as these
things go” covers a lot of evils. You’ll generally need to be familiar
with the Unix or Linux command-line, installing software from a
distribution repository, and with compiling software from source.
I do not yet have any How-To documents collected for self-hosting a
Gemini server. Please let me know if you find or write one!
Conclusion
That’s it! Hopefully by this point you have found some things you want
to read on Gemini, ideally things you’ve subscribed to that will
keep you coming back. And if things have gone really well, you’ll have
established a foothold of your on in Geminispace, and I’ll be reading
something you’ve shared in not too long.
If any of the steps in this document were unclear or you need help for
another reason, please feel free to email
help@geminiquickst.art.
If you see something that’s missing (like a hosting site you want to
recommend), or something wrong, please mail
info@geminiquickst.art.
Thank you for reading! See you out there!

    

    


        
        
            

        
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Models of European Metro Stations]]></title>
            <link>http://stations.albertguillaumes.cat/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45238055</guid>
            <description><![CDATA[A gallery of drawings depicting the topology of metro stations from different European cities.]]></description>
            <content:encoded><![CDATA[
            Station gallery
            Select a city and a station on the map or on the selectors:
          
             
                Alicante
                Alicante's rapid transit system is called TRAM, which is a train-tram and is operated by FGV, owned by the Valencian regional government. This system has an underground line in the city center, with three stations on it. The layout consists with one or two mezzanines on level -1 and two side or one island platforms at level -2. Luceros and Mercado stations have direct connection with the underground parking lots, which are located above the TRAM tunnel.
            
             
                Amsterdam
                Metro services in Amsterdam can be grouped in two groups. The North-South line (in Dutch, Noord/Zuidlijn) opened recently and M52 services run on it. The central part of the line is underground, running at a considerable depth with two parallel tunnels. The other group of lines consists of services M50, M51, M53 and M54. This line runs mostly overground or elevated, parallel to the Dutch Railways lines. In the city center this line goes underground but at a small depth.
                Most of the underground stations consist of a mezzannine at level -1 and a island platform at level -2. The vast majority of overground and elevated stations also have island platforms, but the hall where the turnstiles and ticket machines are found is located on the ground level.
                Taking into account that most of the metro network runs parallel to rail lines, transfers between these two modes of transport are quick and easy.
            
             
                Antwerp
                The Antwerp premetro (underground tramway) opened in 1975. One of the achievements consisted in linking both banks of the Scheldt river.
                Despite the tram network being huge, the Premetro is short but complex. Lines can be grouped in two. The first group consists in an east-west line with two branches on the eastern side. However, there is a tunnel allowing services between both branches, thus forming a triangle. The second group of lines consists in a tunnel opened in 2015, connecting the city center with the eastern suburbs with a fast service, since most of stations are not opened yet.
                The Central railway station is linked with Astrid and Diamant premetro stations, and together with an underground bike parking, they form a hub. The rail triangle is located in between those two stations. Since the premetro tunnels were built with metro standards, same-level track crossings are not allowed, therefore Astrid and Diamant stations had to be built with platforms at two different levels.
            
             
                Barcelona
                Barcelona is the queen of the long passageways. Until 1995, all transfer stations consisted of corridors with lenghts over 100 m, except for Sagrera and Catalunya.
                Among the reasons for having such long corridors there is the lack of planning or the vision of the metro network as a bunch of individual lines. As an example: line 1 and line 4 were extended to Urquinaona in 1932, but both lines were not connected until 1972, as they were originally operated by different companies. In Plaça de Sants station, the L5 platforms were built as close as possible to the existing ones from L1, which opened 43 years before. However, there is a gap of 150 m, with the national rail tracks located in between.
                Moreover, since the extension of the metro network was slower than the growth of the city, during the 60s and 70s, transfer stations were built 100-150 m apart, in order to increase the accessibility to the metro. Verdaguer is a good examples of this practice.
                Right after 1980, transfer stations were designed in a more proper way, being the L2 stations the best example. A new type of transfer appeared 15 years ago with the extension of the metro towards hilly areas of the city: the vertical transfers. In those stations (eg: Vall d'Hebron, Fondo, Zona Universitària, Collblanc), a big shaft was built in order to fit either high-capacity lifts or series of escalators to reach the platforms.
                The classic layout of metro stations in Barcelona is simple: on level -1 there is one or two mezzanines and in level -2 there are two side platforms, but since 2000 the new stations tend to have a central plafrom instead. In transfer stations, there is tipically a corridor linking the mezzanines of both lines.
                Mandatory to mention the so-called Barcelona solution or Spanish solution: stations with two tracks and three platforms, where passengers alight using one platform and board using the opposite one, improving the flow of passengers and reducing the dwell time. Barcelona was not the first city to implement it, but it was named after most of the stations built in the 30s, 40s and 50s were designed with such layout.
            
             
                Berlin
                The U-Bahn and the S-Bahn are the two rapid transit systems of Berlin. The city-state owns the first and the German railways own the second. The S-Bahn normally runs overground or elevated and the U-Bahn does it underground, as the name suggests in German, but this is not a norm since some parts of the U-Bahn are elevated and vice versa.
                The oldest lines were built either in elevated sections or underground, but very close to the surface, creating a direct connection between the street and the platforms in most of the cases. The lines built after World War I are a bit deeper, in order to fit mezzanines and corridors between the street and the platform levels.
                Transfer stations have a very easy tolopolgy, since stations are located close to the ground level and island platforms are predominant.
            
			 
                Bilbao
                Despite the metro opened in 1995, its layout follows former metric-gauge rail lines that were converted to metro, such as the Bilbao - Plentzia line. Metro Bilbao operates lines 1 and 2 and Euskotren operates line 3, together with other suburban and regional services.
                Due to the orography of the city, stations may have different layouts. The stations located in the city center are deep, since the Nerbion river is located nearby and there are plenty of hills located in the meanders of the river. The stations of the line 1 branch are located on surface, since they were part of the former Plentzia railway. 
                Line 3 benefits from having already existing stations, such as Bilbao-Aduana (currently called Zazpikaleak/Casco Viejo) and Matiko, both part of the former Plentzia line, despite the connection between those two stations is made through a new double-track tunnel.
				Some transfer stations have effective designs, such as Lutxana or the former Bolueta station.
            
             
                Boston
                
                All the rapid transit lines in Boston are centenary. Three of them originally opened as underground tramway tunnels in downtown Boston, but only two were converted to pure metro lines. The Green line is still an underground tram line.
                Most of the downtown stations are quite unusual, as they were built using early construction methods and most were designed to serve as tram stations. For instance, some stations in the Orange line have offset platforms. At State station, the Orange line platforms are in different levels.
                Underground stations tend to be located close to the surface. This can be appreciated at Government Center, where the Green line platform has a very particular shape because the streets located above ground were quite narrow when the line was constructed, and therefore impossible to dig wider tunnels.
                Despite being a city where the rapid transit lines were built without a network plan, transfer stations have a good layout, providing short and quick connections.
            
             
                Brussels
                The Brussels metro is a good example of a planned system. It was planned in the 60s, and the four existing lines were built following this criteria: if for practical reasons, the section to be opened was not long enough to be operated as a metro line, the section would open provisionally as a premetro (underground tram), with temporary low floor platforms and temporary ramps connecting the streets with the tunnel. Once the construction of the line is advanced, the premetro operation is cut and the line is converted into a full metro line, removing the ramps and elevating the platforms to metro standards. Currently lines 1, 2, 5 and 6 are fully metros and lines 3, 4 and 7 are premetros.
                The whole network has been built following the same plan. Transfer stations have a good design as well, with the notable exception of Dè Brouckère, where there is a long corridor. Cross-platform transfers can be found in Beekkant and Gare du Midi. Arts-Loi, Montgomery and Rogier have crossing interchanges.
                Most stations have side platforms located at level -2, whilst level -1 is reserved for mezzanines. Stations on line 6 have island platforms because trains run on the left side instead. Stations on lines 3/4 were built using the Spanish solution, where passengers board using the island platform (except in Gare du Midi).
                In order to reduce fare evasion, most stations have been equipped with turnstiles during the last decade, replacing the existing honor system which is still present in some stations due to the complexity of its layout.
                
            
             
                Budapest
                Budapest was the first city in continental Europe to have a metro. Line 1 opened in 1896. Similar to other systems opened around 1900, tunnels have a narrow profile. Trains are only 2.60 m high and 30 m long.
                Lines 2 and 3 have a similar style to other Eastern European metros, despite the decoration has nothing to do. Line 4 was built recently. In these three lines, tracks are laid in two parallel tunnels that cross Budapest at a considerable depth. Stations have island platforms in two parallel galleries, which are connected with the ticket hall through a long escalator. The ticket hall can either be located at ground level or just underground. In the latter case, there are direct staircases connecting the hall with the tramway platforms or bus stops.
                The northernmost and southernmost parts of line 3, tracks run underground but at a very little depth. Here stations have side platforms, which are located at level -2 (and a mezzanine at level -1) or directly at level -1, together with an independent booking hall for each direction.
                Transfers differ, depending on the station. In Deák Ferenc Tér and Kálvin Tér, transfers consist in a quick connection through two escalators and a short corridor. In other stations, transfers may be longer since one line might be running close to the surface while the other may be running very underground (eg: Keleti pályaudvar, Batthyány tér)
            
             
                Bucharest
                The Bucharest metro consists of 5 lines, despite lines M1 and M3 share their tracks and line M5 has two branches. The original plan from the 70s consisted of three lines: a east-west line (M3 and southern section of M1), a north-south line (M2) and a circle line circa 40 km long.
                Unlike other Eastern European metros, the Bucharest one was not built at a considerable depth but using cut-and-cover methods. The platforms are typically located at level -2 or -1 and tend to be central, despite some stations in line M1 have side platforms. 
            
             
                Buenos Aires
                
                The Subte is the oldest metro network in Latin America. It consists of 6 lines. 4 of them run east-west (A, B, D, E) and the other two are north-south (C, F).
                The entire network runs underground and except for line H, the tunnels were build close to the surface. Most of the stations have side platforms but those stations that are or had been terminus usually have island platforms.
                The lower level of an average station comprises the platforms. If there is enough space between the platform level and the street level, a mezzanine can be found, containing the ticket booths and turnstiles. In the opposite case, each platform has independent accesses and turnstiles are located at the platform level and there are no overpasses or underpasses.
                The Subte applies a bizarrenaming criteria. Station names are independent for each line. So, a transfer station will have multiple names, one for each line calling at it (eg: Pueyrredón (B) and Corrientes (F) are part of the same station). But there is also the opposite situation, where there are stations with the same name in different lines: Callao and Pueyrredón are four stations located in lines B and D, but they have nothing to do.
            
             
                Copenhagen
                Copenhagen has a modern and automatic metro. Both the Metro and the S-tog have an honor system and most underground stations look like the same: mezzanine with vending machines at level -1, a landing at level -2 and island platforms at level -3. The connection between the platform and the mezzanine is provided by lifts and escalators. Upbound escalators are separated from the downbound ones.
                Transfer corridors are connected to mezzanines in Frederiksberg and Kongens Nytorv, but not in Nørreport, where the corridor heading to the S-tog starts at the end of the Metro platform.
            
             
                Frankfurt
                Despite Frankfurt has officially a U-Bahn (pure metro), technically is a Stadtbahn (light rail), despite the platform level is high even for stops located at the street. The S-Bahn is also part of the basic rail network of the city.
                The main transportation hubs were desinged to provide quick transfers between the rail lines. Most transfer combinations involve passing through a staircase or an escalator, but in Hauptwache, a cross-platform is provided for transfers between S-Bahn and U-Bahn lines U6 and U7.
            
             
                Glasgow
                Glasgow has a very peculiar subway. It opened in 1896 as a circle line powered by cable, like the San Francisco cable cars. The subway was fully renovated between 1977 and 1980 in order to change its operation to electric power, build new workshops, relocate stations and refurbish the rest of stations.
                Before the renewal, all stations had a very narrow island platform. A staircase located at the end of one platform lead to the ticket hall and the exit, typically located inside the station building. Most of the stations retain this layout today. However, escalators have been installed in some stations, to connect the ticket hall with the street. The stations with the highest patronage were completely rebuilt: Buchanan Street has a central and a side platform nowadays. In St Enoch, two side platforms replace the former island platform. Partick station was built during the renewal works in order to allow transferring from the Subway to ScotRail.
            
             
                Hannover
                Hannover has a Stadtbahn, which is a mixture of a tramway that runs in a metro-like tunnel in the city centre.
                There are three trunk tunnels in Hannover (A, B, C) that meet in Kröpcke station. Tunnels B and C run overlapped between Kröpcke and Aegidientorplatz.
                The layout of an average station is simple and similar to the ones in other cities: a mezzanine at level -1 and side platforms at level -2.
                Kröpcke station is a huge complex with lots of accesses, escalators, staircases and mezzanines, since is the only point where the three tunnels meet. Hauptbahnhof station (main station) has elevated rail platforms and an underground station for the Stadtbahn, composed of two island platforms and four tracks. Aegidientorplatz station has a peculiar layout, since the mezzanine is at level -1, the northbound platform is at level -2 (with 2 tracks) and the southbound platform is at level -3 (with 2 tracks as well).
            
             
                Lyon
                The four lines of the Lyon metro are technically different. Lines A and B and D are rubber tired. Line A has manual conduction and line D was already opened with automatic trains. Line B switched from manual driving to automatic operation in 2022. 
                Line C partially follows the route of a former funicular that had a pent of 176‰. Therefore it operates as a rack railway between Hôtel de Ville and Croix Rousse, since normal metro lines have a maximum pent of 40‰.
                Lines A and B run at a very little depth. Even line A crosses the Rhone using the box girder of Pont Morand. The stations of this line only have one underground level, with side platforms and turnstiles on it. Some stations have underpasses, connecting both platforms. Line D tunnels are not located deep either, but most stations have a mezzanine between the street and platform levels. The latter situation also occurs in the eastern section of line A.
                Lyon had an honor system until two decades ago. Since some staion have secondary accesses connecting the streets with the platform, it is common to find turnstiles in the platforms.
                Most of the transfer stations have an efficient layout, such as Hôtel de Ville, Saxe-Gambetta or Charpennes. However, the links between at the two main railway stations (Part-Dieu and Perrache) are long.
            
             
                Lisbon
                Currently the Lisbon metro consists of four lines. Until the mid-90s, the network had a Y-shaped single line. This line was split into three (Blue, Yellow and Green) and the Red line was built as a completely new line. Therefore, all the internal metro transfers are less than 25 years old.
                The layout of the stations differs slightly: Baixa-Chiado and Campo Grande have parallel platforms for the two lines serving the stations. Saldanha, São Sebastião or Oriente allow quick transfers that involve climbing stairs or elevators. However, in Alameda or Entre Campos the transfer consists in a long passageway.
                The standard layout for the stations built before the Carnation Revolution consisted in two side platforms at level -2 and a mezzanine at level -1. These stations featured short platforms, that were extended years later to allow 6-car trainsets. Together with these platform extensions, secondary mezzanine and accesses were added. The stations built recently tend to have a single mezzanine and are located at deeper, since they were built in hilly areas.
            
             
                London
                
                The London Underground (or the Tube) is the oldest in the world and it consists of two different networks: the sub-surface lines (running close to the surface) and the deep tube lines (runing deep, with tunnels that ressemble a tube).
                The sub-surface lines are the ones inherited from the Metropolitan Railway and from the District Railway, two lines built using cut-and-cover methods or running elevated or at ground level, which were steam operated until the early 20th century. Stations consists in a building located at ground level, containing the ticket offices and fare gates, and the platforms placed at level -1. The stations were located inside a block of houses whenever possible and most of them had a canopy (still in place in Paddington, Bayswater or Earl's Court). With the electrification of the tracks and real estate speculation, most of the stations have been covered with concrete labs (such as in Gloucester Road or Mansion House).
                The deep tube lines began to be built in the last decades of the 19th century, when the boring methods were a bit developed. They were already planned to be operated with electric trains. The tunnels were bored at a depth of 20 m and until the construction of the Victoria Line, they followed the streets. Stations consists of a building hosting the ticket offices and the fare gates, which are connected with the platforms (most of them are island platforms) via lifts and spiral staircases located inside of shafts. In 1913 an escalator was installed at Earl's Court as part of a test to replace lifts. Since the result was favorable, the practice of building stations with lifts and spiral staircases in shafts was abandoned. From this moment on, the new stations were built with escalators, and the existing ones (especially those with a high ridership) were transformed.
                Initially each line was operated by a different company, so transfers between lines weres not granted. This was corrected after the nationalisation of the Tube.
                Some stations host huge flows of passengers. This obligated the local authorities to build wider or newer passageways and escalators in some transfer stations. That is the reason some transfer stations have one-way corridors as well, such as in Oxford Circus or Victoria.
            
             
                Madrid
                technically, the Madrid metro lines can be divided into two: the narrow profile lines (1-5 and the Ramal) and the wide profile lines (6-12). The narrow profile lines were the first to be built and were inspired by the Paris metro. That is why old stations have side platforms located at level -2 and one mezzanines at level -1. Decades after the opening, lines 1 and 3 got their platforms extended from 60 m to 90 m long and secondary mezzanines and accesses were added.
                The lines with a wider profile were built with the aim of fitting larger trains and larger stations. Moreover, these lines were built a highest depth in comparison to the narrow profile lines, at a depth of 15 to 25 m below surface level. The streets and the platforms are connected through 3 to 5 series of staircases and escalator, with the ticket hall in between. Therefore, access times are longer compared to narrow gauge lines.
                Since the 90s, the design and layout of new stations have been standadrised, with stations being built using cut-and-cover methods with slurry walls.
                Madrid has plenty of different layouts for transfer stations. In comparison with other cities, Madrid has a great amount of stations containing long corridors, but not at the level of Barcelona.
                Possibly the most prominent stations are the macrohubs built in the first decade of the 2000s, with huge mezzanines, wide staircases and lots of lifts and escalators, allowing quick connections between metro, commuter train and interurban buses as well. The best example is Nuevos Ministerios, but Chamartín, Sol, Príncipe Pío, Plaza de Castilla or Moncloa also need to be mentioned.
            
             
                Marseille
                The Marseille metro is formed by two lines that cross themselves in Saint-Charles and Castellane, both located in the city centre. The links between lines in these two stations are quick, since in Saint-Charles line 2 is between the two tracks of line 1 and in Castellane both lines have their platform very close to the intersect point.
                There are three kinds of stations, according to their layout: the suburban, which are elevated (eg: Bougainville, Ste-Margueritte, La Rose); the underground ones close to the surface, with the ticket hall at level -1 and side platforms at level -2 (eg: Baille, Périer); and the deep centric stations, which have island platforms and a single access consisting of long escalators connecting the street level with the mezzanine (eg: Cinq Avenues, Estrangin).
                Noailles station is the most particular since the former tram tunnel was diverted when metro line 2 was built. Currently the former tunnel serves as a passageway, and the former tram terminus is a ticket hall.
            
             
                Milan
                Line 1 opened in 1964 and was the first metro line in the world to be built using slurry walls. Line 2 opened four years, following the same design standards for line 1. Stations have a very functional layout, since passenger flows were seriously taken into account. Almost all stations have one-way staircases connecting the side platforms (located at level -2) and mezzanines (at level -1): one for passengers entering and another for passengers alighting.
                The same concept was latter aplied to lines 3 and 5, opened decades later, despite both having a radically different design in their stations, compared to lines 1 and 2. Most of their stations also have mezzanines at level -1 and side platforms at level -2.
                Engineers opted to superimpose the tracks in the central section of line 3, where tracks follow the narrow streets of the old city. As a result, the stations of this sections are a maze of lifts, one-way staircases and escalators, combined with a peculiar decoration.
                The transfers are typically short and quick, especially in Loreto, Centrale, Cadorna and Repubblica. The only two stations having long corridors are Lotto and Porta Venezia.
            
             
                Paris
                The Paris Metro has the most labyrinthine interchanges in Europe.
                Almost all the metro network was opened before World War 2. The first transfer stations, opened in the early 1900s, had simple transfers, with bidirectional passageways. Since 1920, the company responsible for the metro began to install portillons automatiques (automatic doors) in some stations. The portillons automatiques are doors located at the entrance of a platform, that blocks the access to it once a train enters the station, in order to reduce the dwell time and prevent last-second passenger boarding the trains. Therefore, in order to limit the access to platforms but not the exits, they decided to build two-directional corridors and staircases. That is how the stations began being underground mazes.
                In the 1970s the RER (suburban railway) was opened. This meant that some metro stations had to be partially rebuilt.
                Taking the advantade that the spacing between stations is one of the lowest in the world, some RER stations were placed between two metro stations, so both could be connected with the RER. The most extreme case is that 6 metro and RER stations are connected underground (St-Augustin, St-Lazare, Haussmann-St-Lazare, Havre-Caumartin, Auber and Opéra).
                The average metro station in Paris consists of a mezzanine at level -1 and two side platforms at level -2. The termini of the oldest lines used to have a loop (Place d'Italie M5, Étolie M6, Nation M6, Porte Dauphine M2). Some of these stations were actually doubled, since there was a station for the trains that terminate there and another one for the trains (and passengers) beginning their journey.
            
             
                New York
                
                The New York subway combines an extensive network of elevated trains (in Brooklyn and in the Bronx) with an underground train network that was built in the first half of the 20th century, especially in Manhattan. The subway links Manhattan with the other boroughs with tunnels or via the well known bridges, such as the Williamsburg Bridge or the Manhattan Bridge
                A characteristic feature of this subway is the existence of local and express services in separate but parallel tracks, so a tunnel can have 4 tracks (2 per direction and 2 for each type of service). The express trains run in the central tracks and the local trains run in the side ones. 
                The elevated sections have stations placed above the streets and they can be accessed via staircases located in the sidewalks. Ticket halls are located at level +1, inside the viaduct, and platforms are at level +2, partially covered by shelters. The stations with express services tend to have central two platforms.
                The underground lines run very close to the surface and they have plenty of piles of steel between the tracks and in the platforms. The stations that are served only by local services have side platforms at level -1, together with the ticket halls. Platforms are not linked via an underpass or an overpass. Express stations have two island platforms at level -2, allowing cross platform transfers between the local and express trains. In this kind of stations, mezzanines with the fare gates are located at level -1.
            
             
                Prague
                The three lines of the Prague metro form a radial network. All the lines cross at three selected stations in the city center. Almost the totality of the network is underground. The first line that was built (C) is the one running closer to the surface, especially at the city center and in the southern section. Lines A and B run much deeper.
                The deep stations have island platforms at the deepest point of the station. The ticket hall, which is located beneath the street level, is connected with the platforms through escalators. A few stations even have two mezzanines, one at each end of the station.
                Line C has not very deep stations at the southern part. They are composed of a island platform at level -1 and two ticket hall buildings located at ground level, each one at a different end of the platform.
                At Můstek i Florenc, both metro lines run at a considerable depth, so both stations are linked through a rather short corridor, located at a level between both metro lines. Hoewever, Muzeum station has line C located close to the surface, whilst line A station is deep. Both lines are connected through a series of escalators.
                Most of the metro stations have shops and stores in the ticket halls.
            
             
                Rome
                The Rome metro has few lines compared to the extent of the city. Until a few years ago, there were only two lines that intersected at Termini station, which is the central railway station as well. Because of it, Termini station is the one with the highest ridership of the city and most of the times it gets crowded. This station has one-way corridors for entering, exiting and even for transferring. A decade ago, the city had to build an extra set of escalators and corridors to decongest the existing link connecting lines A and B.
                The other interchange station is San Giovanni. Line C opened in 2018 but the final passageway between both lines is not completed yet. Currently, passengers need to exit through the faregates and enter again.
                The stations of the southern section of line B were opened in the 1950s and are very simple. The construction of the northeastern section of line B and the entire line A is much more recent and their stations were designed with one-way staircases and passageways.
            
             
                Rotterdam
                The Rotterdam metro has 5 different services that can be grouped into two lines. One of these services even arrives to the city of the Hague. The design of the stations is rather simple. For stations located underground, the layout consists of a mezzanine is located at level -1 and two side platforms at level -2. Elevated stations tend to have a island platform at an upper level and a mezzanine at the street level.
                Blaak and Beurs have layouts were two lines cross, one over the other. The connection is provided via direct staircases linking both platforms.
            
             
                São Paulo
                
                The metropolis of São Paulo has a rapid transit network operated by three different companies. This is a relatively new metro (it was opened in 1968, despite some lines were converted from existing railways), with a layout and design thought to hold huge flows of passengers. Trains can be up to 200 m long. 
                Stations are very wide. Some of them, such as Sé or Luz (line 1) have the Barcelona solution, in order to ease the passenger flows.
            
             
                Saragossa
                Saragossa does not have metro but the commuter line C-1 has an urban section with three underground stations. This section was covered when the high speed rail line arrived to the city.
                All the stations have a building at street level that hosts vending machines and the fare gates. Platforms are located at level -1, just under street level.
                Miraflores station has a temporary access to a car parking, since the urbanisation of the street over the rail line has not been finished and the station building cannot be used. This station also has an underpass to reach the secondary platform.
                Goya station has connection with the tramway, at Fernando el Católico station. The connection has to be performed by crossing two zebra crossings.
            
             
                Valencia
                The Valencia metro is actually the merge of different narrow gauge suburban railways that were connected via a tunnel crossing the city center. So this system is somehow the hybrid of a premetro and a rail, since in the city of Valencia is like a metro, but in the suburbs this works like a rail with lots of level crossings and single track sections.
                The vast majority of underground stations have one or two mezzanines at level -1 and two side platforms at level -2. There are some stations with a different layout compared to the others, especially in lines 3 and 5: Bailén, Avinguda del Cid, Àngel Guimerà and Colón have island platforms. Alameda has four tracks and three platforms (2 for the Rafelbunyol line and 2 for the Marítim line).
                Xàtiva station has a radically diferent layout, as the platforms are overlapped because there is the juntion of the line towards Bailén and Jesús just 20 m after the platform end (on the eastern side).
            
             
                Warsaw
                Line 1 has two types of stations: the ones located in the suburbs, having side platforms at level -1 and ticket halls at street level, and the ones located in the city centre, having a island platform at level -2 and a mezzanine at level -1.
                The stations on line 2 are similar to the ones with a island platform on line 1, with the difference that the platforms are located a bit deeper.
                There are two main transfer stations. Świętokrzyska is the crossing point of both metro lines and the transfer is quick. Half a kilometer to the south, there is the hub consisting of Centrum metro station, Śródmieście suburban rail station and the Central rail station. The latter two form a huge underground complex, combined with a shopping mall. The connection of Centrum and Śródmieście stations is done at street level.
            
             
                Vienna
                Part of the current metro network (U-Bahn) is inherited from a primitive urban rail network known as Stadtbahn that was steam-powered until the 1920s. Once the network was electrified, the rolling stock used was similar to the ones used for the tramways. Most of its network was elevated or ran at a street level, but without level crossings.
                During the 60s, the municipal government decided to build a couple of tram tunnels. At the same time, they also planned a metro network consisting of a basic network, with parts of it coming both from the Stadtbahn (U4) and from the newly tram tunnels (part of current U2), asides from the construction of line U1. In the 1980s the second phase took place: line U3 was built and line U6 was integrated from the Stadtbahn.
                The layout of the stations depends on the time they were built. The non-underground stations that were part of the Stadtbahn have side platforms and the access is made via the station buildings, which are in the Art Nouveau style. The stations that were part of the tram tunnel are located under street level and are quite simple: offset side platforms at level -1. The new stations built from the 1970s on typically have a island platform at the lower level and two mezzanines at the upper level, which can be either on street level or below, and is connected with the platforms via escalators or elevators. The depth of the latter stations is variable, but the ones located in the city center may be very deep.
                All the transfer stations have been built after 1970 and their layout reflects the idea of having efficient links. Except for Praterstern, all stations have quick transfers.
            
            
                Oslo
                The current Oslo T-bane system originated from an old network of suburban trams that developed in the western suburbs of the city during the first half of the 20th century, and a modern metro system built from the 1960s onwards in the eastern part of the city. Both networks were progressively merged and unified between the 1970s and the 2010s.
                The Oslo metro runs mostly elevated or on the surface, but there are also shallow underground sections. Surface stations usually have two side platforms. Access to the platforms is open, using an honor system, and access to the platforms is performed directly from street level through ramps. In some places, there is a Narvesen kiosk that serves as both a ticket reseller and a convenience store.
                The underground stations are located either in the city center or in the northeastern suburbs. Most stations are situated at a shallow depth and have two side platforms at the deepest level. At the immediately higher level, there is a lobby that can be either at street level or underground. The connection between levels is made through ramps and staircases.
                There are a few stations that are situated at considerable depth: Romsås, Ellingsrudåsen, Stortinget, Nydalen, and Vestli. Access to the first two is only possible through large-capacity elevators that connect the street to the concourse, in addition to a ramp of over 200 meters in length that also links the street to the concourse level.
            
            
                Gothenburg
                The Gothenburg tram has an underground station. Hammarkullen is located at a considerable depth, in a hilly suburb in the northeastern part of the city. The tracks pass through a dual tube tunnel. Trams run on the left only in this specific part, as the station has island platforms and the rolling stock only has doors on the right side. From the platform level, there is a flight of escalators and an inclined elevator that leads to the lobby, located at street level.
            
            
                Hamburg
                Hamburg has two rapid transit systems: the U-Bahn and the S-Bahn. The U-Bahn, which is the proper metro system, is one of the oldest in Europe. The first circular line was constructed combining elevated, at-grade and shallow underground sections. Subsequent extensions have also been built alternating these three typologies. However, the central section of U2 and the branch of U4 were constructed at a greater depth.
                In general, the underground stations are quite shallow and have a island platform (side platforms in the original U3 stations). Some stations have an intermediate level serving as a lobby. On the other hand, the elevated stations have a street-level building (where the lobby is located) and a island platform or two side platforms at level +1.
                The S-Bahn uses sections of the German railway network. The construction of the City S-Bahn (an underground line through the city center) started in the 1960s. Their stations have large island platforms located at level -2, generally with lobbies at level -1, standing at the ends of the platforms.
                As for interchanges, some have been designed to facilitate cross-transfer connections (Barmbek for U3-U3 connections, Wandsbek-Gartenstadt, Berliner Tor, Altona, Hauptbahnhof between S-Bahn trains, Norderstedt Mitte), with parallel platforms (Ohlsdorf, Barmbek for U3-S1 connections, Hauptbahnhof Süd, Elbbrücken) or with direct transfers via a single flight of stairs (Schlump, Jungfernstieg).
                There are other transfers that were poorly designed, such as the long passageway between Rathaus and Jungfernstieg, or the street-level transfer at Wandsbeker Chaussee, Dammtor/Stephansplatz, or Sternschanze.
            
            
                Essen
                Essen's Stadtbahn has two trunk lines. The one that runs through Rathaus station is a group of tram lines that run underground in the city center, with tram vehicles and low-level platforms. The lines that pass through Hirschlandplatz are light metros.
                There is a variety of station typologies. The shallower stations usually have side platforms, while the trunk line stations of the light metro have island platforms, which are situated at a considerable depth.
            
            
                Dortmund
                Dortmund's Stadtbahn consists of three trunk lines located in the city center. The east-west lines are operated with low-floor trams, while the other two are operated with high-floor light metros. Most stations are located at a shallow depth. The station vestibules are either at street level or at an intermediate level between the street and the platform.
                In Dortmund, there is also a monorail system (H-Bahn) that serves the Technical University of Dortmund (TU Dortmund). It consists of two lines. The track is single-track, but there are some stations with passing loops. All stations are elevated or at-grade.
                Bochum's Stadtbahn consists of a north-south line, as well as several tram lines that run through underground sections in the city center. Most Stadtbahn stations have island platforms and vestibules located at an intermediate level between the street and the platforms. In some stations, the platforms are situated at a higher depth, such as Rathaus Nord and Hauptbahnhof.
            
            
                Bochum
                The Bochum Stadtbahn consists of a north-south line, as well as several tram lines that run through underground sections in the city center. Most Stadtbahn stations have island platforms and entrances located at an intermediate level between the street and the platforms. In some stations, the platforms are situated at a higher depth, such as Rathaus Nord and Hauptbahnhof.
            
            
                Mülheim
                The Stadtbahn stations in Mülheim are different. The stations that are close to the Ruhr have platforms at a considerable depth to allow the tunnels to pass underneath the river. The remaining stations have a typical configuration of any Stadtbahn network in Germany, with a vestibule at level -1 and platforms (either side or central) at level -2.
                The Hauptbahnhof station is an intermodal hub that consist of elevated rail platforms, four underground Stadtbahn tracks with two island platforms and two underground bus platforms parallel to the Stadtbahn ones.
            
            
                Duisburg
                All Stadtbahn and underground tram stations in Duisburg have island platforms. These platforms are usually located at level -2, while level -1 is reserved for the lobbies.
                There are two stations with a particular layout: Hauptbahnhof and König-Heinrich-Platz, which are the transferring points for the north-south and east-west lines. These stations have two parallel platforms, stacked on different levels (-2 and -3). Different combinations of escalators and staircases allow for transfers, access, and exit from the station.
            
            
                Düsseldorf
                Düsseldorf has two Stadtbahn main lines (north-south and northeast-southeast), as well as an underground tram main line. Both Stadtbahn lines share tunnels between the central station (Hauptbahnhof) and the city center (Heinrich-Heine-Allee), with tracks running parallel to each other. At Hauptbahnhof and Heinrich-Heine-Allee, the platforms serving the four tracks are located at the same level. However, at the intermediate stations, platforms are overimposed, being the northbound one on the upper level.
                On the other hand, the underground tram stations have low side platforms at level -2 and a mezzanine at level -1.
            
            
                Turin
                Almost all metro stations in Turin follow a standard design consisting of two side platforms at level -3 and a lobby at level -1. The connection between the lobby and the platforms is made through escalators that go directly from the platforms to the lobby, elevators, or two flights of stairs.
                Porta Nuova is the central rail station and has a different layout: the lobby is located at level -1 and platforms are at level -2, which can be reached by stairs or an elevator. There is a direct connection from the metro mezzanine to the railway station original hall, which is now part of a shopping center.
                Porta Susa station has metro platforms at level -4, an intermediate level at -3, and an open hall located inside the large canopy that constits the railway station building. The railway station itself consists of three levels, with the eastern part of the station featuring a huge glass roof canopy measuring 380 meters long by 30 meters wide. Level -2 also contains the four rail platforms. On level -1 there are four passageways that connect the western accesses to the station and act as an intermediate level to connect crowds coming from the different platforms.
            
            
                Lausanne
                The Lausanne metro consists of a light metro line (m1) and an automated rubber-tired metro line (m2), which originated from a funicular that was later converted to rack railway operation.
                The stations on the m1 are either locatred underground or at street level. Some stations have only one platform with direct access to the street, as the track is single-track. Stations with passing loops usually have two side platforms. The terminal station at Renens CFF is part of the Swiss Federal Railways station.
                On the other hand, the stations on the m2 line are more varied. All stations have side platforms, except Sallaz. Some have platforms are located at street level, like Ouchy or Grancy. Others are very swallow and can be accessed via a staircase or ramp, such as Délices or CHUV.
                Finally, some stations have a unique layout due to the topography of the old town, particularly the deep and narrow Flon Valley. Flon station is a main hub. It is located at Place de l'Europe. The m1 station is at the same level as the square, while the LEB (railway) and m2 stations are at level -2. From level -2, five elevators ascend to the height of the Grand Pont, located about twenty meters above.
                Similarly, the Riponne station is situated in the Flon River Valley. The station is located at an intermediate level between the street following the valley and the Riponne Bridge. Four elevators (two per platform) connect the three levels.
            
            
                Porto
                The Porto metro is a newly constructed light metro. It has two trunk lines: one north-south and another east-west, with a section that follows the path of the former narrow-gauge lines that departed from Trindade, which now serves as a transfer station between the two trunk lines.
                The surface stations have the typical design of a modern tram station, with shelters and pedestrian crossings at the ends of the platforms to switch platforms or exit the station.
                The underground stations have side platforms at the deepest level, but there are differences in the layout of intermediate levels and the location of the booking hall.
            
            
                Munich
                The Munich U-Bahn is a metro system formed by 6 different lines, plus two that only operate during rush hours. The network has lots of spurs, but in the city center all those lines merge and form 3 trunk lines, in addition to an east-west trunk line of the S-Bahn, which, due to its frequency and performance, can be considered a metro, just like in Berlin and Hamburg.
                Most stations have island platforms located at level -2 and a couple of lobbies located at level -1, just above the ends of the platforms. Any station has turnstiles: a honor system is used instead. In some specific stations the platforms may be located at a greater depth, which has required the installation of long escalators, like the ones in the central part of the U4 and U5.
                One of the characteristics of the Munich metro is the presence of cross-platform transfers at many stations, with coordination on the arrivals and departures. Some examples include Scheidplatz, Innsbrucker Ring or Neuperlach Süd. Additionally, some other stations with terminating trains usually have three or four tracks, such as Hauptbahnhof (U1-U2), Münchner Freiheit, Olympiazentrum, Kolumbusplatz, Fröttmaning, or Implerstraße. Some of these stations have elevators that provide direct access between the platforms and the street.
                The most centric S-Bahn stations use the Barcelona solution. At Hauptbahnhof and Karlsplatz, passengers board using the island platform and alight via the side platforms; while at Marienplatz, due to narrow streets, the two tracks are overlapped: passengers aight from the train using the right hand side in the direction of travel, and board through the opposite doors. Along with the two levels dedicated to the S-Bahn (-2 and -3), there is also the U-Bahn station located at level -4, whose platforms are separated by nearly a hundred meters since the streets above are narrow and the City Hall building is inbetween.
                In other transfer stations, the line change is direct through a flight of stairs (Odeonsplatz, Hauptbahnhof, Sendlinger Tor) or through the vestibules in the case of most U-Bahn to S-Bahn transfers.
            
            
                Nuremberg
                The Nuremberg U-Bahn has three lines. Two of them, U2 and U3, share tracks in the central section and have automatic operation.
                The station layout for most of the stations is quite simple. First of all, the ticketing policy is based in an honor system, so there aren't turnstiles in any station. The platforms are always located at the lowest level of the station, usually at level -1 or -2 (if the station has a mezzanine at level -1). In some cases, there is direct access from the street to the platform. All stations have elevators.
                The two interchange stations between the U-Bahn lines are designed to provide quick transfers. At Hauptbahnhof, the U1 station is located one level below the U2 and U3 station, and only a short flight of stairs is needed to change. At Plärrer station, a cross-platform transfer is ensured in both directions, as the platforms of both lines are stacked.
            
            
                Stuttgart
                The Stuttgart Stadtbahn is quite complex, but its operation can be simplified into cross-valley lines and the valley lines. Outside the city center, tracks run on street level and most stations ressemble modern tramway stops. In the city center, stations are underground and have side platforms at level -2 and one or two lobbies at level -1.
                The stations in the central section of the S-Bahn have a island platform at level -2 and lobbies placed at both ends of the platforms, at an intermediate level between the platform and the street.
            
            
                Lille
                The Lille metro consists of two VAL (light automated vehicle) lines. A VAL system is characterized by very narrow and short vehicles that operate at a high frequency in order to accommodate the demand. The narrow gauge is a direct consequence of minimizing tunnel construction costs.
                Initially, the metro operated on an honor system, so the stations were designed to allow easy connections between streets and the plaforms. The subsequent installation of turnstiles means that some stations may only have them installed in certain accesses, while others may have a weird distribution turnstiles.
                The main station of the network is Gare de Flandre, which is the central railway station and also a common station for both metro lines and tram lines, whose platforms are underground. This station provides a cross-platform transfer between the metro lines. Additionally, the transfer between the metro and the tram is also very fast. As a curiosity, the tram station has a platform exclusively for passenger alighting, since it is the last station.
                The other interchange station between the two metro lines is Porte des Postes, where the platforms of the two lines intersect at different levels, but transfers are quick.
            
            
                Palma
                The Palma metro is a recent construction. The section closest to the city center was built by taking advantage of the underground section of the Palma-Inca line at the entrance to the city. Between the Intermodal Station at Plaça d'Espanya and Son Costa - Son Fortesa, the metro tracks run parallel to the aforementioned railway line.
                The Estació Intermodal is the main transportation hub in Palma. There is an underground bus station located next to the underground railway and metro station. In fact, this hub is the starting point for all the interurban bus lines and rail lines originating from Palma.
                All the underground section was built very shallow. In fact, the stations located on Gran Via Asima have the same design, with platforms and lobbies located at level -1 and an underground passage at level -2 equipped with escalators and elevators.
                The Son Sardina station is located on the surface and provides an interchange with the Palma-Sóller line. The UIB station, on the other hand, has a street-level passenger building, although it does not host any facilities.
            
            
                Brescia
                The Brescia metro consists of a single line that opened in 2013. The rolling stock comprises Ansaldobreda’s automatic trains, also in operation on Milan metro lines 4 and 5. The line runs shallowly in the northern section, deeply in the city center, and on surface level and elevated through the eastern suburbs. An honor system is employed, eliminating the need for turnstiles.
                Some of the deepest stations, such as Marconi, Ospedale, Stazione FS, Bresciadue, or Volta, follow a standard design with two side platforms at level -3. These platforms are connected to the mezzanine at level -2 via a staircase and two independent escalators. From the mezzanine, there is access to an intermediate level (-1) and a further flight of stairs leading to the street.
                Shallow stations typically consist of two side platforms directly accessible from the street, while elevated stations feature an island platform.
            
            
            
                Istanbul
                Despite having 10 lines in operation, the Istanbul metro is quite modern. Except for lines 1 and 2, built in the 80s and 90s, the rest of the network was constructed in the 21st century. Extensions are underway in both the European and Asian parts of the city. The tram network complements the metro, which incorporates turnstiles at each stop. Additionally, the public transportation network includes four funiculars, three of which are entirely underground.
                The metro lines exhibit significant differences in technical features, including train type, automation, track count, and electrification system. Construction methods for tunnels and stations vary from line to line, affecting station layouts. With the exception of line 1 which runs shallow or elevated, all lines run at considerable depths. Access and egress times are relatively high and some transfer layouts may result in long passageways or unnecessary multiple level changes. Moreover, transfers are not free, as passage through turnstiles is required.
                All lines were constructed with dual-tube tunnels at depths ranging from 20 to 45 meters below ground level, except for line 1, which is shallower, and line 6, which was built with a single track and with passing loops at each station. Some stations are located as deep as 70 meters, only accessible via elevators in certain cases.
            
            
            
                Malaga
                The Malaga metro comprises two lines operated with a tramway fleet. Line 2 is entirely underground. Line 1 is mostly underground, but the western section of line 1 was built as a light metro with level crossings. The underground sections are shallow, with most stations featuring a lobby at level -1 and an island platform at level -2.
                The common section is peculiar. Each line has its own tracks. The tunnel has two levels, with two tracks on each one. Between El Perchel and Guadalmedina stations, two tracks interchange their levels, in a section located within two curves. La Unión station on line 1 has also overlapped platforms. Atarazanas station only has a single platform.
            
            
            
                Seville
                The Seville metro consists of a single line that began construction in the 70s but was not opened until 2009. The rolling stock comprises tramway vehicles.
                The central section, built in the 70s, features a dual-tube tunnel constructed using TBMs. Stations generally have a lobby at level -1 or -2, followed by an intermediate level and an island platform at the lowest level. Platform screen doors protect the tracks.
                The western section, crossing the Guadalquivir river, includes elevated, surface, and underground sections. Ciudad Expo, the only station with both an island platform and a lobby at street level, stands out. Other stations have two side platforms, with the lobby located at either the upper or lower level, depending on the station's location.
                The line runs shallowly between Nervión and Cocheras, with all stations featuring side platforms and a single lobby.
            
            
            
                Palma
                The Palma metro comprises a single line connecting the city center and the university campus in the north. The majority of the line is underground, with a surface-level section around Son Sardina. The segment between Estació Intermodal and Son Costa – Son Fortesa features quadruple tracks for metro and mainline traffic.
                Estació Intermodal serves as a transportation hub with 10 platforms, a bus station at level -2, and a mezzanine at level -1. Jacint Verdaguer station has two island platforms at level -2 and a mezzanine at level -1. Son Costa – Son Fortesa station features two unconnected island platforms at level -1. The UIB station has two side platforms at level -1 and a ground-level hall. Son Sardina station is at ground level, with two side platforms connected by an underpass and linking to the Sóller Railway station. The remaining stations share a similar design, with side platforms at level -1, each directly accessible from the street, and an underpass connecting both platforms.
            
            
            
                Naples
                The Naples rail network comprises multiple lines operated by different agencies. The definition of what is part of the metro network varies.
                Line 1, opened in 1993, connects the old city by the sea with the upper districts. The line forms a loop to climb the hill. Most stations are at great depths, except the section between Colli Aminei and Piscninola. Connections to platforms vary by station, but the booking halls are commonly located at level -1. Some feature a single flight of parallel escalators (Montedonzelli, Policlinico), high-capacity lifts (Duomo), or two or three flights of stairs. Stations between Colli Amiei and Museo have island platforms, while those in the old city have side platforms. Quattro Giornate station has overlapped platforms.
                Line 2, owned by the Italian State, opened in 1925 with third rail electrification but was later converted to overhead lines. Montesanto and Cavour are the deepest stations, with a ground-level building comprising ticket office and turnstiles. Two flights of stairs and escalators connect to an intermediate level (-2), with two side platforms at level -3. Other stations, like Mergellina or Campi Flegei, are at ground level with grand station buildings. Piazza Garibaldi has two tracks and three platforms, with a recent layout change.
                Line 6, closed since 2013, featured a narrow profile with trains only 2.20 meters wide.
                The Arcobaleno line (Line 11) connects Piscinola with Aversa, built with cut-and-cover methods. The layouts resemble Milan metro lines 1 and 2 and Rome's southern section of line A. The Circumvesuviana and Circumflegrea lines are also part of Naples' rail network, with some underground stations.
            
            
            
                Rennes
                Rennes has two metro lines.
                Line A is a VAL, an automatic light metro using technology developed by Siemens. The trains have a width of 2.08 m. Most of the line runs underground, with two elevated stations (La Poterie and Pontchaillou). The layout of the stations varies considerably, but all stations have side platforms on the lowest level. The lobbies are either located at street level or at level -1. Anatole France and Jacques Cartier are the deepest stations on this line. Initially, the stations had an honor system, but turnstiles were installed in 2020. Due to this reason, some lobbies might have a peculiar placement of the turnstiles.
                Line B is a Neoval, an automatic line that uses more modern technology developed by Siemens. Trains operate in 2-car compositions, but stations allow for 3-car trains. The entire line runs underground except for the easternmost section, which is elevated. Platforms are located on the lowest level, normally at level -2 or -3. Mezzanines are located at level -1. Sainte-Anne is an interchange station located at the city center. Transfers, access, and egress are performed through a complex system of one-way corridors, stairs, and escalators.
            
            
            
                Donostia-San Sebastian
                Topo is a narrow-gauge rail line operated by Euskotren Trena, an agency owned by the Basque Government. This line runs through many tunnels, earning it the nickname "Topo," which means “mole” in Spanish. The line underwent a major renovation in the last 10 years, and a variant is being built both in the city center of San Sebastian and in the neighboring town of Pasaia. As a consequence, the current main station of Amara will be closed and dismantled.
                The layout of the stations differs. Lugaritz, Anoeta, and Herrera have a station building at ground level and two side platforms at level -1. Loiola and Pasaia stations are elevated. Intxaurrondo and Altza stations are located deep underground and have layouts and aesthetics similar to those of the Bilbao metro, once designed by Norman Foster.
            
            
            
                Sofia
                The Sofia metro consists of 4 different services that operate on 2 physical lines. Despite having rolling stock manufactured by a Russian company, the aesthetics and layouts differ from the Soviet-influenced metros of eastern European countries. Generally speaking, the average station has lobbies located at levels -1 and the platforms at level -2. Most stations have side platforms, but the oldest ones, located in the central part of lines 1 and 4, have side platforms. Stations in the common section of lines 1 and 4 have low-cost platform screen doors.
                All stations on line 3 have side platforms, normally located at level -2. Mezzanines are commonly located at level -1. The connection between platforms and the mezzanine is performed by multiple staircases or elevators. Most of the accesses to the stations are equipped with elevators.
            
            
            
                Toulouse
                The Toulouse metro is formed by two lines that form a cross-shaped network. Both lines use VAL technology and are automated. The layout of line A stations varies. In the city center, the line runs through a dual-tube tunnel at a great depth to cross the Garonne river. Long escalators reach the platforms at Capitole and Esquirol. Stations located outside the city center tend to have a lobby at level -1 and two side platforms at level -2 or -3. The western terminus at Basso Cambo is elevated.
                Most of the line B stations have a similar layout consisting of a lobby at level -1, an intermediate level used for entering passengers at level -2, and two side platforms at level -3. Passengers egressing the station can use escalators that connect directly the platforms with the lobbies. Jean Jaurès is the main hub on the network. The station was designed to have one-way passages and escalators. The line B station uses the Barcelona solution, boarding through the island platform. Passengers need to pass through turnstiles to change from one line to the other. These turnstiles are used only for statistical purposes and to manage flows, as the tariff system guarantees free transfers.
            
            
            
                Zurich
                In 1962, the citizens of Zurich rejected in a referendum the conversion of tram lines in the city center into a premetro. In 1973, the citizens rejected again the construction of a metro network. However, a short section of the tunnels was already being built to conduct rolling stock tests. In 1978, the citizens approved integrating the existing tunnel into the tram network, which was completed in 1986. These stations were built at a considerable depth, as they are located in a hill between the valleys of the Limmat and the Glatt rivers. All stations have island platforms. Since trams in Zurich only have doors on the right side, they run on the left side of the tunnel. All the stations have multiple accesses, some reachable only via elevators, others via a long flight of stairs and escalators, which in some cases have the lower side in a level located even below the platform level. 
            
            
                Liverpool
                Merseyrail is the suburban train network managed by the Liverpool City Region, and it is operated by a private company through a concession. The network consists of two directly operated lines.
                The Wirral Line connects central Liverpool with the Wirral peninsula, located south of the River Mersey, via a tunnel opened in 1886. The two stations adjacent to the river (James Street and Hamilton Square) have platforms located at a great depth. The connection between the street-level concourse and the pre-platform level is made through three high-capacity elevators, in addition to emergency stairs, which at Hamilton Square can also be used regularly. 
                The Northern Line is a north-south line created in 1977, after connecting by a tunnel two separate lines that departed from Exchange and Liverpool Central terminals. In the 1970s, the Wirral Line terminal, which ended in a double track at Liverpool Central, was also modified to become a one-way loop served by three stations spread throughout central Liverpool. These stations are very deep. The connection between platforms, intermediate levels and street-level concourses is made through two or three sets of escalators. All underground stations are accessible to people with reduced mobility.
            
            
                Genoa
                Genoa has a metro line that runs through the city, parallel to the coast. Due to the city's difficult topography, the construction methods for each section are different, resulting in a curvy route with very heterogeneous stations.
                Both terminals, Brin and Brignole, are located on viaducts. Additionally, Brignole metro station is integrated parallel to the railway station.
                Dinegro is the only station built using the cut-and-cover method and is the most shallow in the network. Both platforms are connected via an underpass. This station has múltiple tracks, three of them with platforms, in addition to other tracks that are used as workshops and depots.
                Darsena and San Giorgio stations have an island platform and are deeper than Dinegro but shallower than Sarzano-Sant’Agostino and De Ferrari stations, which have two side platforms each located in two different tunnels.
                The most complex station in the network is Principe: it consists of the metro station, an underground station national rail network, and the surface railway station. The surface station is nestled in a trench between mountains and has a yard with 5 platforms and 9 tracks. Corridors connect the underpass of the surface-level station with a concourse that either leads to the underground railway station, of which only one of the two tracks is in service, or to the metro station through a series of underground walkways. The metro station has a semi-underground concourse, which connects to the mezzanine, located at the upper level of the platform, via a staircase.

            
            
                Charleroi
                Charleroi's premetro consists of a circular line that encircles the city center and three branches towards the suburbs and nearby towns. The network is operated as four radial services, which start from the central loop.
                The central ring is a mix of tram with priority (between Tirou and Gare Centrale) and a fully segregated line, mostly underground but with an elevated section between Gare Centrale and Palais. Line 4 operates completely segregated outside the city ring, with trams running on the left side. Lines 1 and 2 run also segregated from the rest of traffic between the city center and Pétria, and then as a tram line between Pétria and Monument, just like line 3 once past Piges.
                The station layouts are rather simple. Regardless of whether they are on a viaduct or in a tunnel, almost all have a central platform, which is accessed directly from the street, sometimes via an intermediate level, without turnstiles.
                Palais station has four tracks: two of them are in service, a third without regular service, and the fourth leads to a loop that reverses the direction of trains. Waterloo station has two platforms and three tracks, but only the central platform is in operation.

            

             
                Montreal 
                The Montreal metro consists of a network of 4 lines with rubber-tired trains. Nearly all of the network was built during the 1960s, 70s, and 80s, and is entirely underground, with tunnels often (but not always) following the alignment of the streets.
                Each station has unique architecture and style. Station depth also varies. However, most stations feature two side platforms, each 500 feet long (152.4 m), and all entrances are equipped with enclosures to protect against winter temperatures. In some cases, these enclosures also host station lobbies.
                Transfer stations were designed to offer practical and fast connections. Snowdon and Lionel-Groulx stations feature overlapped platforms, allowing for cross-platform transfers, while at Berri-UQAM, the platforms for the green and orange lines intersect at adjacent levels. At Jean-Talon, transferring between the orange and blue lines is also quick, with the platforms arranged in a stacked layout.
                One unique feature of Montreal is that, in the city center, metro stations connect directly to the underground city known as RÉSO, which links city blocks underground.
            
            
             
                Ottawa 
                Ottawa’s rail transit system (O-Train) includes an east-west light rail line called the Confederation Line and a north-south rail line called the Trillium Line.
                The entire network is above ground, except for the central part of the Confederation Line, which runs at a depth of 17 to 25 meters below street level. The three underground stations have side platforms located on the lowest level. Each station has two independent entrances connecting the mezzanines located at either end of the platforms, which are accessible via multiple stair flights.
                Outside of the city center, stations may be located at street level, elevated, or in a trench, with most featuring side platforms. Some stations are transfer points between light rail and bus services, such as Tunney’s Pasture, Hurdman, and Blair. Ottawa also has several BRT lines, some of which have fully segregated infrastructure, including stops shaped like rail stations, with escalators, elevators, and lobbies with fare validators.
            
            
             
                Toronto 
                The Toronto subway has three lines. The network is relatively shallow, with some sections running above ground.
                In the oldest sections, the tunnel alignment is parallel to the street one but is shifted several meters toward the blocks of houses. Due to the cut-and-cover construction method used in these segments, it was necessary to expropriate and demolish existing buildings. Some of these clearings were used to build transfer hubs containing bus and streetcar bays, together with the passenger building, which also serves as the subway entrance. All bus and streetcar platforms are located within the paid area of the station, providing free transfers between the subway and surface transit.
                Regarding subway line transfers, Sheppard-Yonge, Bloor-Yonge, and St. George stations provide direct transfers via a single flight of stairs, while at Spadina, the transfer involves a walkway over 200 meters long.
            
            
             
                Calgary 
                Calgary has a light rail system called the C-Train. In the downtown area, it operates like a streetcar, with a low stop spacing, but in the suburbs, the spacing between stations is greater, and the trains have dedicated platforms, although some crossings still use level crossings.
                As for stations, there is only one underground station (Westbrook). Some other stations have platform access at ground level, while others use overpasses that lead to platforms through lobbies with waiting areas.
            
            
             
                Vancouver 
                Vancouver’s SkyTrain consists of three automated metro lines. The network has a radial layout, and only two of the three lines reach downtown. As the name suggests, most of the metro is elevated, with only the most central segments being underground.
                The Expo Line runs through downtown in a two-level tunnel, with stations located at significant depths. The Canada Line is much shallower, with each station featuring a different layout: Waterfront, Vancouver City Centre, Yaletown-Roundhouse, and Olympic Village have a lobby on level -1 and an island platform on level -2; King Edward has overlapped platforms; while Oakridge and Langara have platforms on level -1 connected by an underpass.
                The main interchange of the network, Waterfront, serves as the terminal for the Expo and Canada Lines, as well as the commuter train and the ferry to North Vancouver. The transfer here is not ideal, as the Canada Line is in an area with separate fare gates, and the distance between this line and the ferry terminal is 350 meters.
            
            
             
                Seattle 
                Seattle has a light rail line. Initially, a tunnel was built for buses and trolleybuses in the downtown area, running from International District / Chinatown to Westlake, which opened in 1990. Stations in this section had side platforms on level -2 and two lobbies on level -1, with platforms spaced widely enough to allow one bus to overtake another.
                The tunnel closed in 2005 for conversion to light rail, which opened in 2009. Until 2019, it operated as a mixed-use tunnel for both buses and light rail. In 2016, the network expanded northward, adding a segment with four underground stations and one elevated station. Platforms at the underground stations are more than 20 meters deep, and each one has a unique layout.
                On the southern section, there is Beacon Hill Station, accessible only via four high-capacity elevators that descend to the platforms, located about 50 meters below ground.
            
            
             
                Stockholm 
                Stockholm has three subway lines that cross the city center and split into two or three spurs at each end. The city itself is in an archipelago, so the metro lines were planned and built through a complex geography and geology, featuring surface stretches, elevated viaducts, shallow underground sections, and deep tunnels.
                The green line, the first to be built, is considered to be the shallowest. In the city center, it runs in shallow tunnels built using the cut-and-cover method, and in the suburbs, the line runs either elevated or at surface level. The red line combines deep underground segments in the north with a mix of surface and deep sections in the south. The blue line runs at great depth along nearly its entire length.
                All stations are accessible to persons with reduced mobility thanks to the installation of lifts. Deep stations typically feature two island platforms at the lowest level (-2), connecting to lobbies located at or near the surface (level -1) via a set of 3 or 4 parallel escalators, in addition to an inclined lift which also runs parallel. Stockholm has one of the highest numbers of inclined lifts in its subway system. Some deep stations have cavern-like platform designs.
            
             
                Leipzig 
                Leipzig has a tunnel that crosses the city centre, with four underground stations, all featuring island platforms at the deepest level. Although the tunnels are twin-tube and were built using tunnel boring machines, the stations were constructed using the cut-and-cover method, except for Hauptbahnhof, which was built using the mining method.
            
            
             
                Karlsruhe 
                Karlsruhe has a tram-train system. In 2021, a T-shaped underground line was opened, which is served by six stations, one of which is a double station. All stations have side platforms located on level -2, except for Kongresszentrum, which has its platforms on level -1. The -1 level of the other stations consists of various concourses.
                The platforms have sections with different heights to ensure compatibility with all rolling stock in terms of accessibility.
            

             
                Bielefeld
                The Bielefeld Stadtbahn consists of a north-south trunk line that branches into four lines, both in the north and in the south. The central section and a bunch of the northern spurs are underground. Most stations have island platforms on the deepest level, with accesses at both ends of each platform.
                Hauptbahnhof is the junction station on the northern side. The station has a concourse at level -1, two platforms and three tracks at level -2; plus one track and one platform at level -3, which crosses the station diagonally.
            

             
                Gelsenkirchen
                Gelsenkirchen has a Stadtbahn line operated with low-floor trains. Except for Heinrich-König-Straße, which is located at a junction, all stations have a platform at the lowest level. In some stations, access to the platforms is directly from the street; in others, access points converge in the concourse.
            

             
                Wuppertal
                The Wuppertal Schwebebahn is a suspended monorail opened in 1901, with a single line that follows the course of the Wupper River, except at the western end, where it follows a street.
                The stations are elevated and located above the river or the street. All stations have side platforms, so trains have doors on only one side. The platforms are around 30 meters long.
            

             
                Cologne
                Cologne has a Stadtbahn made up of different services that cross the city. Most of the underground sections are located in the center and in the north. Some of these lines are operated with low-floor trams, while others use high-floor trains. This results in some stations having platforms with two different heights.
                The stations typically have a simple structure with platforms at level -2 and one or two concourses at level -1, although some stations have platforms at level -1. The new north-south line, partially constructed and served by lines 5 and 17, runs deeper than the other lines and has central platforms at almost all stations. However, currently only one of the two tracks is operational. Finally, line 13, which runs along the Gürtel (ring road), includes an elevated section.
                As for transfer stations, some are designed for quick and short transfers, such as Friesenplatz or Ebertplatz. The central station is served by two different, adjacent Stadtbahn stations.
            

             
                Bonn
                Bonn has a Stadtbahn consisting of a line that runs parallel to both the Cologne – Mainz railway line and the Rhine River. It has two underground sections: one in the center and south of Bonn, and another in the Bad Godesberg district, plus a couple of isolated underground stations on a branch line.
                The stations are simple. All have side platforms at level -2 and one or two concourses at level -1.
            

             ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SpikingBrain 7B – More efficient than classic LLMs]]></title>
            <link>https://github.com/BICLab/SpikingBrain-7B</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45237754</guid>
            <description><![CDATA[Contribute to BICLab/SpikingBrain-7B development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[SpikingBrain：Spiking Brain-inspired Large Models
📄 Technical Report: Chinese | English
🚀 Arxiv: arXiv:2509.05276
🧩 Models: Available Models

About SpikingBrain
Inspired by brain mechanisms, SpikingBrain integrates hybrid efficient attention, MoE modules, and spike encoding into its architecture, supported by a universal conversion pipeline compatible with the open-source model ecosystem. This enables continual pre-training with less than 2% of the data while achieving performance comparable to mainstream open-source models. We further adapt frameworks, operators, parallel strategies, and communication primitives for non-NVIDIA (MetaX) clusters, ensuring stable large-scale training and inference. SpikingBrain achieves over 100× speedup in TTFT for 4M-token sequences, while spiking delivers over 69% sparsity at the micro level. Combined with macro-level MoE sparsity, these advances provide valuable guidance for the design of next-generation neuromorphic chips.


Project Structure
This repository provides the full implementation and weights of SpikingBrain-7B, including the HuggingFace version, vLLM inference version, and quantized version, enabling flexible deployment and research across different scenarios.
SpikingBrain-7B/
├── hf_7B_model/ # HuggingFace version
├── run_model/   # Model run examples
├── vllm_hymeta/ # vLLM plugins and inference support
├── W8ASpike/    # Quantized inference version
├── setup.py
├── requirements.txt 
└── README.md 


vLLM-HyMeta
vllm-hymeta is the plugin adaptation of HyMeta (Hybrid Models built on MetaX GPUs) for the vLLM inference framework, providing efficient inference support on NVIDIA GPUs.
By leveraging the plugins mechanism in vLLM, hardware backends can be integrated in a modular fashion, bringing the following benefits:


Decoupled codebase: Backend-specific code remains independent, keeping the vLLM core cleaner.


Reduced maintenance cost: vLLM developers can focus on general functionality without being affected by backend-specific implementations.


Faster integration: New backends can be integrated quickly and evolve independently with less engineering effort.


Container Deployment (NVIDIA)
sudo docker run -itd \
    --entrypoint /bin/bash \
    --network host \
    --name hymeta-bench \
    --shm-size 160g \
    --gpus all \
    --privileged \
    -v /host_path:/container_path \
    docker.1ms.run/vllm/vllm-openai:v0.10.0
Plugin Installation
git clone https://github.com/BICLab/SpikingBrain-7B.git
cd SpikingBrain-7B
pip install .
Recommended environment for installing vllm-hymeta on NVIDIA GPUs:
decorator
pyyaml
scipy
setuptools
setuptools-scm
flash_attn==2.7.3
flash-linear-attention==0.1
vllm==0.10.0
torch==2.7.1
Run with vLLM
You can serve a model with vLLM in the simplest way using the following command:
vllm serve <your_model_path> \
  --served-model-name <model_name> \
  --gpu-memory-utilization <ratio> \
  --block-size <size> \
  --dtype bfloat16 \
  --port <port_number>
You may also set --tensor-parallel-size and --pipeline-parallel-size when launching if you want to run with multiple GPUs.

W8ASpike
W8ASpike is the quantized inference version of SpikingBrain-7B, aiming to reduce inference cost under low-precision settings and explore the potential of Spiking Neural Networks (SNNs).
The current implementation adopts pseudo-spiking, where activations are approximated as spike-like signals at the tensor level, rather than true asynchronous event-driven spiking on neuromorphic hardware.


Pseudo-spiking: Efficient approximation at the tensor level, suitable for prototyping and research.


True-spiking: Requires asynchronous hardware and event-driven operator support, which is beyond the scope of this repository.


The activation spike encoding process here is inspired by the pseudo-spiking interfaces from BICLab/Int2Spike. For additional PyTorch-based spiking interfaces, please refer to the Int2Spike library.

Available Models
The model weights are hosted on ModelScope. Please select the appropriate version based on your needs:

Pre-trained model (7B): https://www.modelscope.cn/models/Panyuqi/V1-7B-base
Chat model (7B-SFT): https://www.modelscope.cn/models/Panyuqi/V1-7B-sft-s3-reasoning
Quantized weights (7B-W8ASpike): https://www.modelscope.cn/models/Abel2076/SpikingBrain-7B-W8ASpike

Usage
Example scripts are provided in run_model/ for running the model with the released checkpoints.


Hugging Face
Load with AutoModelForCausalLM and use as a standard CausalLM (forward or generation); see run_model/run_model_hf.py.
For the SFT model, a chat template is used; see run_model/run_model_hf_chat_template.py.


vLLM
Perform inference using the provided vLLM Hymeta plugin; see run_model/run_model_vllm.py and the vLLM Hymeta section.


Performance Evaluation
Table 1: Performance evaluation of the SpikingBrain-7B pre-trained model. All models are tested with the HuggingFace framework and evaluated using a perplexity-based method. Except for Qwen2.5, the other baselines are trained on limited Chinese data, resulting in clear disadvantages on CMMLU and C-Eval.

Table 2: Performance evaluation of the SpikingBrain-76B pre-trained model. All models are tested with the vLLM framework and evaluated using a perplexity-based method. Except for Qwen2.5, the other baselines are trained on limited Chinese data, resulting in clear disadvantages on CMMLU and C-Eval.


Citation
If you find our work useful, please consider citing SpikingBrain:
@article{pan2025spikingbrain,
  title={SpikingBrain Technical Report: Spiking Brain-inspired Large Models},
  author={Pan, Yuqi and Feng, Yupeng and Zhuang, Jinghao and Ding, Siyu and Liu, Zehao and Sun, Bohan and Chou, Yuhong and Xu, Han and Qiu, Xuerui and Deng, Anlin and others},
  journal={arXiv preprint arXiv:2509.05276},
  year={2025}
}
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Refurb Weekend: Silicon Graphics Indigo² Impact 10000]]></title>
            <link>http://oldvcr.blogspot.com/2025/09/refurb-weekend-silicon-graphics-indigo.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45237717</guid>
        </item>
        <item>
            <title><![CDATA[A single, 'naked' black hole confounds theories of the young cosmos]]></title>
            <link>https://www.quantamagazine.org/a-single-naked-black-hole-rewrites-the-history-of-the-universe-20250912/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45237442</guid>
            <description><![CDATA[The James Webb Space Telescope has found a lonely black hole in the early universe that’s as heavy as 50 million suns. A major discovery, the object confounds theories of the young cosmos.]]></description>
            <content:encoded><![CDATA[
    A black hole unlike any seen before has been spotted in the early universe. It’s huge and appears to be essentially on its own, with few stars circling it. The object, which may represent a whole new class of enormous “naked” black holes, upends the textbook understanding of the young universe.
“This is completely off the scale,” said Roberto Maiolino, an astrophysicist at the University of Cambridge who helped reveal the nature of the object in a preprint posted on August 29. “It’s terribly exciting. It’s highly informative.”
“It’s pushing the boundaries on what we think might be true, what we think might happen,” said Dale Kocevski, an astronomer at Colby College who was not involved in the new research.
Astronomers spied the bare black hole using the James Webb Space Telescope (JWST) — a mega-instrument built by NASA and its partners in part to reveal how galaxies formed during the universe’s first billion years. This new black hole, which is as heavy as 50 million suns and is dubbed QSO1, clashes with the old, provisional account of the galaxy formation process, which did not start with black holes. Black holes were thought to have come along only after a galaxy’s stars gravitationally collapsed into black holes that then merged and grew. But Maiolino and his colleagues described a solitary leviathan with no parent galaxy in sight.
The question now is how this black hole came to exist.

The most exciting — and controversial — possibility dates back to a 1971 proposal from the British physicist Stephen Hawking: that black holes arose in the primordial soup of the Big Bang itself. In that case, the object would have been sitting in the dark since the universe’s first moments, waiting for stars and galaxies to illuminate it.
QSO1 is one of hundreds of similar-looking objects nicknamed “little red dots” that JWST has spotted in its first few years of peering into the deepest recesses of time. Astrophysicists can’t say yet whether these dots are all black holes or not, and in general they’re still confused about the universe’s chaotic childhood. But the telescope’s snapshots suggest a rowdy young cosmos that fabricated big black holes and galaxies both together and independently, or maybe even a universe where black holes were among the first large structures in existence — dark tapioca bubbles in an otherwise smoothly blended cosmic tea.
QSO1 and the rest of the little red dots “tell us we don’t know anything,” said John Regan, a theorist at Maynooth University in Ireland. “It has been really exciting and very electrifying for the field.”
Pale Red Dots
Lukas Furtak, an astronomer at Ben-Gurion University in Israel, knew QSO1 was extraordinary the moment he saw it — or the moment he saw its three reflections hiding among a smattering of splotchy white galaxies in an image taken by JWST in 2023. It’s “something that pops out immediately,” Furtak said over Zoom, clicking on three nearly imperceptible red specks. “There are three red point sources here, here, this one up here.”
In the image, a fortuitous placement of galaxies and dark matter has bent light rays traveling from background objects just as a glass lens might; this “gravitational lens” reveals objects deeper in the early universe than the telescope could otherwise see. The lens magnifies and stretches the stuff behind it, sometimes creating multiple images of it. Furtak was mapping out the banana-shaped smears of galaxies that the lens had projected into multiple places when he spotted the three red dots of QSO1.
The dots caught his eye because they show no signs of stretching. He knew that the only thing that looks like a small, round point even after getting stretched out is an even smaller, rounder point. This was no galaxy, he figured; it must be a black hole, a concentration of mass so dense that its gravity creates an inescapable zone of space around it.
Over the next six months, Furtak and collaborators directed JWST to stare at each of the three red dots for 40 hours each to take a census of the colors of light coming from the object, known as a spectrum. That study concluded that QSO1 is very likely a glowing black hole packing a mass of tens of millions of suns into a span of at most 100 light-years across, seen as it appeared when the universe was just 750 million years old. (Today the cosmos is approaching 14 billion years old.)
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[High Altitude Living – 8,000 ft and above (2021)]]></title>
            <link>https://studioq.com/blog/2021/5/30/high-altitude-living-8000-ft-and-above-2450-meters</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45237184</guid>
            <description><![CDATA[Living at high altitude reduces risk of dying from heart disease: Low oxygen may spur genes to create blood vessels. Summary: Researchers have found that people living at higher altitudes have a lower chance of dying from heart disease and live longer.  Jeanne and I live at 8,400 feet (2.560 meters)]]></description>
            <content:encoded><![CDATA[
  Living at high altitude reduces risk of dying from heart disease: Low oxygen may spur genes to create blood vessels. Summary: Researchers have found that people living at higher altitudes have a lower chance of dying from heart disease and live longer.Jeanne and I live at 8,400 feet (2.560 meters). We were talking about visitors coming (for workshops, friends, etc.) and if you are coming from a low elevation what you need to be aware of. There is a thing called Acute Mountain Sickness (AMS). It's real and can be very disabling for some people.The best defense is to start at 5,000 feet and stay there for 3 days, drinking water like crazy and resting. Then, come up to the higher elevation and give yourself a day or two to adjust. That usually works.Beyond the AMS, there is the sun! The sun up here will fry you fast! The UV is very very high up here and we have 300 days of sun every year. It's difficult NOT to be out in it. Water, clothing that covers your arms, legs, etc., and a hat. This is the best way to protect yourself from burning up. You will dehydrate and get very sick.There's a lot to think about when we are considering having people visit.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Visual programming is stuck on the form]]></title>
            <link>https://interjectedfuture.com/visual-programming-is-stuck-on-the-form/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45236774</guid>
            <description><![CDATA[Underlying great creations that you love—be it music, art, or technology—its form (what it looks like) is driven by an underpinning internal logic (how it works). I noticed this pattern while watching a talk on cellular automaton and realized it's "form follows function" paraphrased from a slightly different angle. Inventing a form is a hard task, so you must approach it obliquely—by first illuminating the underlying function.

This made me realize something crucial about visual programming: it’]]></description>
            <content:encoded><![CDATA[
            Underlying great creations that you love—be it music, art, or technology—its form (what it looks like) is driven by an underpinning internal logic (how it works). I noticed this pattern while watching a talk on cellular automaton and realized it's "form follows function" paraphrased from a slightly different angle. Inventing a form is a hard task, so you must approach it obliquely—by first illuminating the underlying function.This made me realize something crucial about visual programming: it’s stuck on form, rather than letting form follow function. Visual programming has long been trapped in the node-and-wires paradigm because its designers are overly fixated on form, neglecting the underlying function that should drive it. So as a whole, the field is stuck in a local minima. How can we break out of it and how can we find a function for the field that underpins the form?A clue from CellPondI was watching a talk and was struck not just by the presentation but also by a specific quote from Lu Wilson in a talk about CellPond–a visual programming language that expanded my expectations for cellular automata. And that's given that I'd already seen my share of the Game of Life by John Conway and read lots of A New Kind of Science by Stephen Wolfram. But even though Lu Wilson spent the last 10 minutes showing you the fantastic visuals, none of that was the point. The actual tasty result is that there is a virtual machine with only four operations underlying the CellPond system. And these four operations correspond with memory operations we're familiar with in CPUs: read, write, allocate, and deallocate. To me, that connection was utterly surprising. The grid of patterns (form) was informed and driven by the underlying virtual machine (function)."I think if you were to learn from CellPond, you'd take away not just the UI—but you can take the UI too if you want. I was very surprised by this because, in all my reading of past solutions to these problems, they were all about the high-level user interface; they were about the UI. I thought I'd have to build layers upon layers of UI, but really, as soon as the low-level stuff was sorted out, the UI just figured itself out."- Lu Wilson (🐤 · 🦋)I wondered: how did Lu Wilson come up with the underlying function? It seemed magical. This puzzling revelation made me realize it wasn’t just about the UI—there was a deeper principle at play.Form follows functionIn the subsequent months, I kept turning it over in my head. The key lay with the opening quote. When you figure out the low-level stuff, the UI all falls into place.It wasn't until a drive while I was listening to Paul Graham's A Taste for Makers that I made the connection. The CellPond talk was a demonstration of the oft-repeated adage of "form follows function." Here's the relevant excerpt:In art, the highest place has traditionally been given to paintings of people. There is something to this tradition, and not just because pictures of faces get to press buttons in our brains that other pictures don't.  We are so good at looking at faces that we force anyone who draws them to work hard to satisfy us.  If you draw a tree and you change the angle of a branch five degrees, no one will know.  When you change the angle of someone's eye five degrees, people notice.When Bauhaus designers adopted Sullivan's "form follows function," what they meant was, form should follow function.  And if function is hard enough, form is forced to follow it, because there is no effort to spare for error.  Wild animals are beautiful because they have hard lives."- Paul Graham  A Taste for MakersHonestly, I had never thought much about "form follows function." It seems obvious enough when you hear it for the first time. Sure, given an interface, why else would it express anything other than its purpose? It would seem counterproductive otherwise. It wasn't until I was forced to invent a form did I really understood what it meant. The adage "form follows function" is for those tasked to invent the form, not for when you're given it. In my own words, it's this:If a design is any good, how something looks, feels, and works is a naked expression of its function, its algebra, its rationality–its underlying nature. To design a form, you should not just come up with it out of thin air. You have to attack the problem obliquely and work out its function first. Once the function–the underlying nature, internal consistency, and algebra–is worked out, the form will fall out as a consequence of it.Three faces of functionWhat I mean by "underlying nature" isn't that it exists independently of human creation; rather, every design is embedded in an environment that shapes its intrinsic properties. The function of anything useful is always in the context of its environment. When we understand the context of a well-designed thing, we understand why it looks the way it does. An animal form reflects its adaptation to the ecological niche in its environment. By "rationality", I mean some kind of internal consistency. The function of something well-designed will have a certain repeated symmetry. Given a choice of design, it'll consistently use the same thing in as many scenarios as possible. Good game design enables a single item to serve multiple functions. The gravity gun in Half-Life 2 enables players to pick up and launch objects. It's used for turning environmental items into weapons, solving physics-based puzzles, and for navigating hard-to-reach areas. In Minecraft, the water bucket can extinguish fires, create waterfalls for safe descent, irrigate farmland, and serve as a barrier against certain enemies.By "algebra", I mean a set of rules about how a design's components compose. Most games have a physics engine that computes how objects in a game interact with each other in space. It's a "movement calculator." Legend of Zelda: Breath of the Wild additionally has a chemistry engine that it uses to compute how different materials interact with each other. It's a "state calculator." In summary, function represents the intangible structure governing the relationships, interactions, and contextual fit of a design’s underlying components. A form can't exist outside of its function, and its function is shaped by its environment. We can observe and interact with the form directly, but not its function. We can exist in the environment, but the function is invisible to us without a lot of work to infer it.A form not informed by function feels disjointed, inconsistent, and frustrating. Without an underlying function to underpin the form, the shape of form is simply at the inconsistent whims of the designer. Functions keep designers honest about the purpose of form: in service of function. Of course you can explore and play with form independent of function, but that's the jurisdiction of art, not design. To invent a form, start with the function"Form follows function" is advice for people making something, especially those whose work has a very visible interface facing the end user. To invent a form, start with the function. But it's easy to make errors of two kinds, even if you already know this in your head.The first kind of error is to pursue form without considering function. Instead, you must ignore the form, at least initially, and focus on figuring out the function first. This is largely due to the intangible nature of function. It's an easy mistake to focus on form, even far into your creative career. This mistake is understandable. Whenever people interact with anything, their initial contact is the interface—the bridge between user and design. For anyone new to something, it's natural to start by engaging with that interface, because it's what they're most familiar with. So when they turn around to make something in that domain, they start with the interface, the form. You can see this readily: new creatives in a field start by copying the masters before finding their own voice.It's also understandable because function is largely more abstract and more intangible than form. It's harder to get a grip on something amorphous, and you may have to start off with something concrete. It can be part of the process to draw up concrete examples first. In fact, when confronted with an unfamiliar domain, this can be quite productive in getting a handle on it. But it can be easy to forget and take a step back and ask: "what is the common underlying logic or abstraction to all these examples?" When you are able to take a step back, you're using the concrete examples as a stepping stone to figuring out the underlying function.The error of the second kind is pursuing function without considering the user. As a warning for those that lean too far on the other side of the precipice, this doesn't mean you can ignore the end user when figuring out the function. If we could represent the utility of the underlying function as a vector, it would still need to point in the direction of the user. The underlying function must support and give context to the visible form built on top. Both are built so the direction and magnitude of their utility vector can support the user in the direction of their goals. Too many back-end engineers misinterpret 'form follows function' as a license to design arbitrary database tables and APIs, assuming that the front end will compensate. That's how we get terrible interfaces where the end user needs to be aware of the data model to use it effectively, like Git.When it comes to visual programming, I think it's stuck in the error of the first kind, with its focus on form. Visual programming is not just node-and-wiresNode-and-wire diagrams have become a lazy default. Most visual language designers never ask whether those boxes and arrows genuinely help programmers. It’s a classic case of letting form precede function.When one looks through the Visual Programming Codex, it's obvious an overwhelming majority are based on the node-and-wires model. Not just that, but there are mostly only two variations:The nodes represent data, and the wires represent functionsThe nodes represent functions, and the wires represent data shunted between functions.Did many of them settle on it because it's the best visual representation to help aid the process of programming? Or did they use it because they're mimicking an existing form?I think node-and-wires is popular because visual programming designers make the fundamental assumption that the underlying nature and logic of programming is just traditional textual programming. If that's your assumption, then you'd naturally think all you have to do is find visual representations for existing textual language constructs. Hence node-and-wires is the form you get when you take pure functions as the underlying logic underpinning the form. On first glance, node-and-wires seem like a good fit. The wires going into a node are like the input parameters of a pure function, and the wires going out are like the output value. But what about differentiating between the definition of a function versus calling it? Often in node-and-wires visual languages, there's no separation. The definition is the application. What about passing around functions or thunks? Much of the power in pure functional programming lies in the power of higher-order functions, and I haven't seen very good node-and-wires representation of that. After decades of trying, most pure functional programming is still largely expressed in text. To me, that's damning evidence against the practice of using nodes-and-wires to model functions. Text is still the better form for expressing the underlying logic of functional programming. 



Imperative programming with node-and-wires fares no better. A loop in LabVIEW gives no more advantage or clarity over writing it in text. Seeing the totality of a sequence of steps in parallel in a circuit-like diagram doesn't solve the fundamental problem with imperative programs; it doesn't help the developer understand combinatorial state explosions or state changes over time.I think where node-and-wires have provided the biggest advantage is in specific domains in which a) there's massive value to examine intermediate data and values between transformations and b) there's a well-known visual representation of that intermediate data and value. This has been demonstrated in visual languages like Unreal Engine's Blueprint for game programming shaders and Max/MSP for sound synthesis in music. But these have been limited to these narrow domains. Visual programming has not found a foothold in general purpose programming domains.Modeling problemsWhat then, if not node-and-wires? The aim here is to uncover an alternative underlying logic—one that can more effectively drive the form in visual programming. How would you go about finding another underlying function in "form follows function" if not the current programming paradigms we know? I think this is the wrong question. Although correct in direction and spirit, I think a better question is: how should we model problems that can leverage the computational power of our visual cortex? We write programs primarily to model and solve real-world problems. We go through the exercise of encoding the problem model in programming languages, because we can automate the generation of solutions. And the reason why we keep banging on the visual programming door is because we understand intuitively that our visual cortex is an under-leveraged power tool.The human visual cortex is a powerful pattern recognition apparatus. It can quickly compare lengths, distinguish foreground from background, recognize spatial patterns, and other amazing feats of perception, all at a glance. We leverage it in data visualizations to make sense of large quantities of data, but we haven't been able to leverage it to make sense of computational systems. ❓"Imagine what a visual programming language would look like if it was able to leverage the power of the human visual cortex" For the record, I don't think this is it.If we had a visual programming language that could leverage the human visual cortex, then at any zoom-level of abstraction, at a glance we could understand the overall structure of the program as it relates to the domain at that level of abstraction. And if we were looking at a running program, then we could get an idea of the overall state and process. Yes, we have bespoke visualizations of running programs in the form of metrics and dashboards. But we don't have a universal visual language to represent the structure or state of a program that applies to different programs. What about text? Aren't textual glyphs a kind of visual language? Not in the way I mean. For text to be considered a visual programming language, it'd have to leverage the human visual cortex at different zoom-levels of the program. Certainly, with syntax highlighting we leverage the visual cortex and use color to distinguish between different syntactical elements. This counts. But we only get this at the level of a function. It doesn't apply when we zoom out to the overall structure of the code base. And there's certainly no zoom-out level in which we get visual understanding at the level of the problem domain. The closest thing I can think of that might fit the bill is APL and its ilk. By condensing operators into single characters, sequences form idioms. Just as we recognize whole words rather than individual letters, idioms allow us to comprehend entire operations without parsing each symbol. So as you zoom out of the code, you can see the meaning of the code by identifying common idioms. Strangely, it seems many APL environments don't feature syntax highlighting.So if visual programming is to be useful, I think the angle of attack is to find a way to model problems, and this might not be the same way that we model problems in textual languages–even if the underpinning implementation is all lambdas and Turing machines. So how do we model problems?Entities and relationshipsI'll say up front, I don't know what modeling problems should look like. Nonetheless, it seems there are two main aspects for any system we're interested in: visually representing the entities in a problem domain visually representing the entity relationships.[2]Regardless of the paradigm, imperative, object-oriented, functional, or logical, there are both "entities" (structs, objects, compound values, terms) and "how they relate" (imperative processes, messages, functions, rules and predicates). If I had to take a stab at it, I'd start here.Of the two, representing the different entities in a problem domain seems more amenable to visual programming because they're nouns. Most of the things we see around us are nouns. Hence, we can imagine that inert data representing entities would have a canonical visual representation. But even then, entities often have far more attributes than we might want to visualize at a time to understand its purpose and behavior. How do we choose what attribute is important to show? And what should be the visual form for the attribute in these entities?The two questions are related, but to drive the point home, I'll focus on the second one. If we have some struct with two attributes in some generic language, how would we visually represent them?struct Foo {
  bar: float,
  baz: float
}We might think a universally useful representation of a collection of these instances is two histograms: one for bar and one for baz. For any given instance, its corresponding value could be highlighted on the histogram.Is this useful? Answer depends on our task at hand. There's no one-size-fits-all visualization of entities. What if I told you bar is an x-coordinate and baz is the y-coordinate? Now, perhaps a visualization that's more fitting is a scatterplot where each instance is represented as an x. We put the relationship between bar and baz in a spatial relationship to see if our visual cortex could recognize a pattern.In the histogram visualization, I wouldn't be able to use my visual cortex to discern the relationships between bar and baz traces out a flower. However, in the spatial canvas visualization, I could easily see the flower trace because by pitting bar and baz in a spatial relationship, I'm creating a mapping that makes an affordance for my visual cortex.This only worked because there was a spatial relationship between bar and baz, especially if I know they represent x and y coordinates. We couldn't just look at the data and easily discern what visualization to use. The label and the intention of the user also give meaning to what visualization is best suited for an entity. Hence, I think there's no one-size-fits-all visualization for entities. There's no single mapping of attributes to visualizations that makes sense, unless the user's intention and goals remain fixed. Besides entities, every program encodes relationships between its entities. How do we visually represent their relationships in a way that's illuminating at a glance without devolving into an illegible spaghetti mess? Relationships can be harder to model, because they're typically invisible to us, as they're often inferred.Like the example with representing entities visually, representing relationships visually is likely to depend on both the goals of the user as well as the meaning of the entities at hand. I suspect a good visual representation of the relationship between two tables in a query is going to be different than a good visual representation of the relationship between two pieces of middleware in a web stack. However, I do think we can do better than a line.The go-to representation of a relationship is often the line or an arrow, where it connects two things on the canvas together. The trouble with lines is that they doesn't scale with the visual cortex. After a couple dozen lines, we lose track of any sense of the overall relationships between entities. But I don't think this can be the only way. The visual cortex also relates visual elements if they have the same color or if they're spatially clustered together. As the previous example on a plot of bar and baz showed, relationships could be spatial, by which we can plot them spatially to reveal relationships, without directly drawing lines and arrows everywhere.As before, it's hard to draw any generally productive conclusions on how to best visually represent relationships between entities without knowing the goal of the user as well as the meaning behind the entity and relationships we're trying to represent. The only point I'm trying to drive home is that we have more tools at our disposal besides lines and arrows, because the visual cortex is perceptive and discerning about colors, groupings, and motion. We typically use these visual elements haphazardly, if at all, rather than as a deliberate attempt to leverage it for understanding. And that's just in graphic design and data visualization. It's completely overlooked in program structure, debugging, and domain problem modeling.At this point, those that hear entities and relationships might be drawn to ask, isn't this just object-oriented programming? It is true that object-oriented thinking trains you to identify entities in the problem domain and model their relationships through method calls and messaging. However, object-oriented programs suffer from private state whose effects are observable from the outside littered everywhere, making it hard to reason about program behavior. What I'm saying is orthogonal to and doesn't invalidate what we've learned about structuring programs in the past 3 decades. To sum up, I'm saying the unit of representation for visually representing programs may not be the function and its input and output parameters, as node-and-wire visual programmers are likely to do. It might be something else, which can leverage the power of the visual cortex.Computation is figuring out the next stateModeling problems as entities and their relationships is only half the equation. By only modeling entities and their relationships, we've only described a static world. We can do that already without computers; it's commonly done on whiteboards in tech companies around the world. Every time we go up to the whiteboard with a coworker to talk through a problem, we're trying to leverage the power of our visual cortex to help us reason through it. But unlike our textual programs, whiteboards aren't computational. If whiteboards were computational, they might show how the state of the problem changes over time, or how it changes in response to different external inputs or effects. Thus, the question is, how do we visually represent how the system state should evolve over time or in response to external inputs? [1]Cellular automaton systems typically express computation through rulesets. Rulesets are typically expressed as a pure functional transformation between the current state and the next state. Taking rule 110 in 1D cellular automaton as an example, the state of the next cell depends on the three cells above it. Given the three cell pattern above, this is what the cell in the next line should be. You can see this like a β-reduction, substituting symbols with other symbols until we can substitute no further, with the resulting value as our answer.The famous rule 110 in 1D cellular automaton. This rule is Turing Complete!As the CellPond talk at the top of the page points out, rulesets for more complicated behaviors, like trains on tracks have a combinatorial explosion of rules. One of CellPond's innovations was to have rulesets that represent (or generates?) groups of rulesets, so that visually expressing the rulesets remains tractable for humans.But pure functions are just mappings. Any pure function can be replaced by an equivalent infinite table of key-value pairs. Rulesets are just explicit mappings of inputs to outputs. Hence, if rulesets are to be tractable, we must be able to express not just how a single current state maps to the next state, but how entire groups of states map to a next state.We have familiar mechanisms in textual programming to express a selection of groups of input states in a succinct way. We have boolean logic in if expressions. We have maps and filters. We have select and where clauses in SQL queries. But we have no universal and composable ways of expressing this selection of previous states and mapping them to next states. Additionally, we don't have universally recognized ways of expressing this mapping from groups of inputs to outputs for state types other than a grid of cells. A different way forwardCertainly, it could be possible that multi-dimensional aspects of a codebase would be quite hard to represent in its entirety visually. But I don't think it's a stretch to say that we lean pretty hard on the symbolic reasoning parts of our brain for programming and the visual reasoning parts of our brain are underleveraged.Visual programming hasn't been very successful because it doesn't help developers with any of the actual problems they have when building complex systems. I think this is a result of ignoring the adage "form follows function" and trying to grow a form out of traditional programming paradigms that fail to provide good affordances–the utility vector is pointing the wrong way–for those actual problems in complex systems. To make headway, I think we should focus on discovering underlying logic and function of how to model problems visually on a canvas–not just the entities, but also their relationships. In addition to modeling problems, we also have to discover how to model transformations and transitions of state, so our models are also computational. We have the hardware: our visual cortex is a powerhouse for pattern recognition and spatial reasoning. We just don’t have the right computational grammar to feed it. If we want a visual programming breakthrough, we have to leave the legacy of text-based paradigms behind and unearth a new kind of function—one that only makes sense visually. Once we do, the right ‘form’ will follow so obviously, we’ll wonder why we waited so long.[1] One way is with visual rule sets. This almost feels like declarative or logic programming. But as the Cell Pond talk at the top of the essay pointed out, unless you have a representation of rule sets that can be expanded, you suffer combinatorial explosion.[2] Depending on who you are, this can sound either like object-oriented programming or category theory. 
        ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How the restoration of ancient Babylon is drawing tourists back to Iraq]]></title>
            <link>https://www.theartnewspaper.com/2025/09/12/how-the-restoration-of-ancient-babylon-is-helping-to-draw-tourists-back-to-iraq</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45236473</guid>
            <description><![CDATA[Work on the Temple of Ninmakh and walls at the Ishtar Gate is nearing completion at the Mesopotamian metropolis, a victim of centuries of damage and neglect]]></description>
            <content:encoded><![CDATA[Mentioned in the sacred texts of all three Abrahamic faiths, the ancient Mesopotamian city of Babylon, in modern-day Iraq, is today undergoing a revival. Two World Monuments Fund (WMF) projects are nearing completion and much-needed cultural tourism is returning.One project mitigates groundwater damage to the north retaining wall of the Ishtar Gate. The second is a restoration of the Temple of Ninmakh, dedicated to the Sumerian mother goddess. The team hopes there will be an official reopening for the temple this autumn, after which it will be available for gatherings such as weddings and concerts, as well as for the Babylon Festival, a celebration of international cultures that takes place every spring.Largely funded by the US embassy in Baghdad, the restoration of the temple and the north retaining wall are part of the Future of Babylon Project, initiated 15 years ago, which aims to document, waterproof and stabilise structures throughout the 2,500-acre site. (The US embassy cancelled funding for a planned walkway spanning the site of the Ishtar Gate in July due to budget cuts.)Visitor boomThe completion of these two projects coincides with a boom in tourism. Even in the midday heat, when tour guides refuse to emerge from their office, visitors from Romania, Russia and Iran enthusiastically explore attractions including the largely intact Lion of Babylon, the processional way and the museum next to a reconstructed Ishtar Gate.The return of heritage tourism is one of Iraq’s few recent success stories. Even as sectarian tensions simmer and the electrical grid has yet to be restored 22 years after it was destroyed in the US invasion, Babylon is being reborn.“We’ve had record numbers of visitors this year,” Raad Hamid Abdullah, Babylon’s antiquities and heritage inspector, tells The Art Newspaper. In 2024 Babylon hosted 43,530 Iraqi tourists and 5,370 foreign tourists, an increase from 36,957 Iraqi visitors and 4,109 foreigners in 2023, he says.“Now even locals from the adjoining city of Babil are coming,” Abdullah says. “It has once more become a popular place for family gatherings and wedding parties,” he says, adding proudly, “Babylon is a symbol of Iraq.”Babylon, the survivorAround 80km south of Baghdad, comprising both the ruins of the ancient city as well as surrounding villages and agricultural areas, Babylon is a survivor. From its peak as the Neo-Babylonian capital under King Nebuchadnezzar II through to the Iraq War, when American and Polish troops ran roughshod over its ruins and a decade later, Islamic State (Isis) threatened its very existence, the ancient city has witnessed empires come and go.Babylon has survived decades of looting and ongoing environmental challenges. Construction, too, has taken a toll over the years. In 1927 the British ran a railway line through the site, and in the 1980s Saddam Hussein built a highway through part of it, along with a palace for himself, complete with helipad. There are still three non-functioning oil pipelines, two built in the 1970s and 1980s and a more recent third one—work on it was blocked after Iraq’s General Authority for Antiquities and Heritage filed a lawsuit in 2012. Babylon was only recognised as a Unesco World Heritage Site in 2019.Now the Egyptian architect Ahmed Abdelgawad, an expert in mud brick buildings, is working with the WMF to train locals in the traditional art that befits the Temple of Ninmakh, named after the mother goddess associated with creation, birth and healing who breathed life into humankind via small clay figures in their likeness.Years of war-related damage and neglect combined with poorly executed mid-century “reconstruction” methods resulted in serious structural problems at the temple. Corrosion caused by the intrusion of increasingly salty groundwater is the product of prolonged droughts and soil erosion in climate-vulnerable Iraq.Traditional mud-brick techniquesThe archway at the entrance of Ninmakh’s inner sanctum—on the verge of collapse in 2022—was successfully restored at the end of May. “We had to totally dismantle the old arch,” Abdelgawad says. “It was full of cracks and worn by weather. So we took it apart and rebuilt it with mud bricks.”The traditional art of making special low-salt mud brick begins with sourcing soil with low salt levels, which is then mixed with sand, grit and straw.“This is the first arch in Iraq restored totally from mud bricks,” says Osama Hisham, the Future of Babylon project manager.A similar but saltier mix of mud brick and bitumen was used to repair the wooden roof of the temple, which was being eroded by termites.Hisham says the temple now comprises poplar timber from the forests of Mosul in northern Iraq, mud from Babylon and reeds from the marshes in the south. A place that has symbolised the heart of Iraq has now been restored with materials from across the nation.Groundwater zappingMeanwhile, the north retaining walls at the Ishtar Gate, reconstructed in the past century with cement that damaged the remains of the historical monument, were demolished and replaced with new retaining walls providing better water management. These new walls—essentially boxes filled with stones, based on an ancient Egyptian construction technique, Hisham says—absorb sunlight from the southern side and effectively vaporise groundwater coming from the northern side.The Babylonians, he says, dealt with groundwater intrusion by creating an elevation by“cutting the arch of the gate and burying it, then using it as a foundation for a new gate”. As a result of this technique, the Ishtar Gate built by Nebuchadnezzar II, where the WMF is currently finishing work on the north retaining wall, is seven metres below the ancient city, with only two metres remaining above.DisintegrationA subsequent spectacular blue-glazed gate Nebuchadnezzar II built on top of that gate gradually disintegrated in the aftermath of the fall of the Babylonian Empire in the sixth century BC. A replica installed in the 1950s now greets visitors to Babylon.Many Iraqis would like to see the reconstruction of the Ishtar Gate returned from the Pergamon Museum in Berlin. The gate is made of brick fragments from excavations carried out by the Deutsche Orient-Gesellschaft (German Oriental Society) from 1899 to 1917.But Hisham says that even the Ishtar Gate in Berlin is only 20% original. The gate in Babylon, he points out, is 80% original.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Two Slice, a font that's only 2px tall]]></title>
            <link>https://joefatula.com/twoslice.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45236263</guid>
            <description><![CDATA[A font that's only 2px tall, and somewhat readable!  Uppercase and lowercase have some different variants, in case you find one more readable than the other.  Numbers (sort of) and some punctuation marks are included.]]></description>
            <content:encoded><![CDATA[
		
		A font that's only 2px tall, and somewhat readable!  Uppercase and lowercase have some different variants, in case you find one more readable than the other.  Numbers (sort of) and some punctuation marks are included.
		You can probably read this, even if you wish you couldn't.It tends to be easier to read at smaller sizes.
		Try it out below, or download it (under CC BY-SA license, so you can use it commercially but you have to give credit).
		
	
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Pass: Unix Password Manager]]></title>
            <link>https://www.passwordstore.org/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45236079</guid>
            <description><![CDATA[Pass is the standard unix password manager, a lightweight password manager that uses GPG and Git for Linux, BSD, and Mac OS X.]]></description>
            <content:encoded><![CDATA[

Introducing pass

Password management should be simple and follow Unix philosophy. With pass, each password lives inside of a gpg encrypted file whose filename is the title of the website or resource that requires the password. These encrypted files may be organized into meaningful folder hierarchies, copied from computer to computer, and, in general, manipulated using standard command line file management utilities.

pass makes managing these individual password files extremely easy. All passwords live in ~/.password-store, and pass provides some nice commands for adding, editing, generating, and retrieving passwords. It is a very short and simple shell script. It's capable of temporarily putting passwords on your clipboard and tracking password changes using git.

You can edit the password store using ordinary unix shell commands alongside the pass command. There are no funky file formats or new paradigms to learn. There is bash completion so that you can simply hit tab to fill in names and commands, as well as completion for zsh and fish available in the completion folder. The very active community has produced many impressive clients and GUIs for other platforms as well as extensions for pass itself.

The pass command is extensively documented in its man page.



Using the password store

We can list all the existing passwords in the store:

zx2c4@laptop ~ $ pass
Password Store
├── Business
│   ├── some-silly-business-site.com
│   └── another-business-site.net
├── Email
│   ├── donenfeld.com
│   └── zx2c4.com
└── France
    ├── bank
    ├── freebox
    └── mobilephone


And we can show passwords too:

zx2c4@laptop ~ $ pass Email/zx2c4.com
sup3rh4x3rizmynam3


Or copy them to the clipboard:

zx2c4@laptop ~ $ pass -c Email/zx2c4.com
Copied Email/jason@zx2c4.com to clipboard. Will clear in 45 seconds.


There will be a nice password input dialog using the standard gpg-agent (which can be configured to stay authenticated for several minutes), since all passwords are encrypted.

We can add existing passwords to the store with insert:

zx2c4@laptop ~ $ pass insert Business/cheese-whiz-factory
Enter password for Business/cheese-whiz-factory: omg so much cheese what am i gonna do


This also handles multiline passwords or other data with --multiline or -m, and passwords can be edited in your default text editor using pass edit pass-name.

The utility can generate new passwords using /dev/urandom internally:

zx2c4@laptop ~ $ pass generate Email/jasondonenfeld.com 15
The generated password to Email/jasondonenfeld.com is:
$(-QF&Q=IN2nFBx


It's possible to generate passwords with no symbols using --no-symbols or -n, and we can copy it to the clipboard instead of displaying it at the console using --clip or -c.

And of course, passwords can be removed:

zx2c4@laptop ~ $ pass rm Business/cheese-whiz-factory
rm: remove regular file ‘/home/zx2c4/.password-store/Business/cheese-whiz-factory.gpg’? y
removed ‘/home/zx2c4/.password-store/Business/cheese-whiz-factory.gpg’


If the password store is a git repository, since each manipulation creates a git commit, you can synchronize the password store using pass git push and pass git pull, which call git-push or git-pull on the store.

You can read more examples and more features in the man page.

Setting it up

To begin, there is a single command to initialize the password store:

zx2c4@laptop ~ $ pass init "ZX2C4 Password Storage Key"
mkdir: created directory ‘/home/zx2c4/.password-store’
Password store initialized for ZX2C4 Password Storage Key.


Here, ZX2C4 Password Storage Key is the ID of my GPG key. You can use your standard GPG key or use an alternative one especially for the password store as shown above. Multiple GPG keys can be specified, for using pass in a team setting, and different folders can have different GPG keys, by using -p.

We can additionally initialize the password store as a git repository:

zx2c4@laptop ~ $ pass git init
Initialized empty Git repository in /home/zx2c4/.password-store/.git/
zx2c4@laptop ~ $ pass git remote add origin kexec.com:pass-store


If a git repository is initialized, pass creates a git commit each time the password store is manipulated.

There is a more detailed initialization example in the man page.

Download

The latest version is 1.7.4.

Ubuntu / Debian

$ sudo apt-get install pass

Fedora / RHEL

$ sudo yum install pass

openSUSE

$ sudo zypper in password-store

Gentoo

# emerge -av pass

Arch

$ pacman -S pass

Macintosh

The password store is available through the Homebrew package manager:

$ brew install pass

FreeBSD

# pkg install password-store

Tarball


Version 1.7.4
Latest Git

The tarball contains a generic makefile, for which a simple sudo make install should do the trick.

Git Repository

You may browse the git repository or clone the repo:


$ git clone https://git.zx2c4.com/password-store

All releases are tagged, and the tags are signed with 0xA5DE03AE.

Data Organization

Usernames, Passwords, PINs, Websites, Metadata, et cetera

The password store does not impose any particular schema or type of organization of your data, as it is simply a flat text file, which can contain arbitrary data. Though the most common case is storing a single password per entry, some power users find they would like to store more than just their password inside the password store, and additionally store answers to secret questions, website URLs, and other sensitive information or metadata. Since the password store does not impose a scheme of it's own, you can choose your own organization. There are many possibilities.

One approach is to use the multi-line functionality of pass (--multiline or -m in insert), and store the password itself on the first line of the file, and the additional information on subsequent lines. For example, Amazon/bookreader might look like this:

Yw|ZSNH!}z"6{ym9pI
URL: *.amazon.com/*
Username: AmazonianChicken@example.com
Secret Question 1: What is your childhood best friend's most bizarre superhero fantasy? Oh god, Amazon, it's too awful to say...
Phone Support PIN #: 84719

This is the preferred organzational scheme used by the author. The --clip / -c options will only copy the first line of such a file to the clipboard, thereby making it easy to fetch the password for login forms, while retaining additional information in the same file.

Another approach is to use folders, and store each piece of data inside a file in that folder. For example Amazon/bookreader/password would hold bookreader's password inside the Amazon/bookreader directory, and Amazon/bookreader/secretquestion1 would hold a secret question, and Amazon/bookreader/sensitivecode would hold something else related to bookreader's account. And yet another approach might be to store the password in Amazon/bookreader and the additional data in Amazon/bookreader.meta. And even another approach might be use multiline, as outlined above, but put the URL template in the filename instead of inside the file.

The point is, the possibilities here are extremely numerous, and there are many other organizational schemes not mentioned above; you have the freedom of choosing the one that fits your workflow best.

Extensions for pass
In order to faciliate the large variety of uses users come up with, pass supports extensions. Extensions installed to /usr/lib/password-store/extensions (or some distro-specific variety of such) are always enabled. Extensions installed to ~/.password-store/.extensions/COMMAND.bash are enabled if the PASSWORD_STORE_ENABLE_EXTENSIONS environment variable is true Read the man page for more details.

The community has produced many such extensions:

	pass-tomb: manage your password store in a Tomb
	pass-update: an easy flow for updating passwords
	pass-import: a generic importer tool from other password managers
	pass-extension-tail: a way of printing only the tail of a file
	pass-extension-wclip: a plugin to use wclip on Windows
	pass-otp: support for one-time-password (OTP) tokens


Compatible Clients
The community has assembled an impressive list of clients and GUIs for various platforms:


	passmenu: an extremely useful and awesome dmenu script
	qtpass: cross-platform GUI client
	Android-Password-Store: Android app
	passforios: iOS app
	pass-ios: (older) iOS app
	passff: Firefox plugin
	browserpass: Chrome plugin
	Pass4Win: Windows client
	pext_module_pass: module for Pext
	gopass: Go GUI app
	upass: interactive console UI
	alfred-pass: Alfred integration
	pass-alfred: Alfred integration
	simple-pass-alfred: Alfred integration
	pass.applescript: OS X integration
	pass-git-helper: git credential integration
	password-store.el: an emacs package
	XMonad.Prompt.Pass: prompt for Xmonad


Migrating to pass
To free password data from the clutches of other (bloated) password managers, various users have come up with different password store organizations that work best for them. Some users have contributed scripts to help import passwords from other programs:


	1password2pass.rb: imports 1Password txt or 1pif data
	keepassx2pass.py: imports KeepassX XML data
	keepass2csv2pass.py: imports Keepass2 CSV data
	keepass2pass.py: imports Keepass2 XML data
	fpm2pass.pl: imports Figaro's Password Manager XML data
	lastpass2pass.rb: imports Lastpass CSV data
	kedpm2pass.py: imports Ked Password Manager data
	revelation2pass.py: imports Revelation Password Manager data
	gorilla2pass.rb: imports Password Gorilla data
	pwsafe2pass.sh: imports PWSafe data
	kwallet2pass.py: imports KWallet data
	roboform2pass.rb: imports Roboform data
	password-exporter2pass.py: imports password-exporter data
	pwsafe2pass.py: imports pwsafe data
	firefox_decrypt: full blown Firefox password interface, which supports exporting to pass


Credit & License

pass was written by Jason A. Donenfeld of zx2c4.com and is licensed under the GPLv2+.

Contributing

This is a very active project with a healthy dose of contributors. The best way to contribute to the password store is to join the mailing list and send git formatted patches. You may also join the discussion in #pass on Libera.Chat.


      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Will AI be the basis of many future industrial fortunes, or a net loser?]]></title>
            <link>https://joincolossus.com/article/ai-will-not-make-you-rich/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45235676</guid>
            <description><![CDATA[The disruption is real. It's also predictable.]]></description>
            <content:encoded><![CDATA[
                        
Fortunes are made by entrepreneurs and investors when revolutionary technologies enable waves of innovative, investable companies. Think of the railroad, the Bessemer process, electric power, the internal combustion engine, or the microprocessor—each of which, like a stray spark in a fireworks factory, set off decades of follow-on innovations, permeated every part of society, and catapulted a new set of inventors and investors into power, influence, and wealth.



Yet some technological innovations, though societally transformative, generate little in the way of new wealth; instead, they reinforce the status quo. Fifteen years before the microprocessor, another revolutionary idea, shipping containerization, arrived at a less propitious time, when technological advancement was a Red Queen’s race, and inventors and investors were left no better off for non-stop running.



Anyone who invests in the new new thing must answer two questions: First, how much value will this innovation create? And second, who will capture it? Information and communication technology (ICT) was a revolution whose value was captured by startups and led to thousands of newly rich founders, employees, and investors. In contrast, shipping containerization was a revolution whose value was spread so thin that in the end, it made only a single founder temporarily rich and only a single investor a little bit richer.



Is generative AI more like the former or the latter? Will it be the basis of many future industrial fortunes, or a net loser for the investment community as a whole, with a few zero-sum winners here and there?



There are ways to make money investing in the fruits of AI, but they will depend on assuming the latter—that it is once again a less propitious time for inventors and investors, that AI model builders and application companies will eventually compete each other into an oligopoly, and that the gains from AI will accrue not to its builders but to customers. A lot of the money pouring into AI is therefore being invested in the wrong places, and aside from a couple of lucky early investors, those who make money will be the ones with the foresight to get out early.



    




The microprocessor was revolutionary, but the people who invented it at Intel in 1971 did not see it that way—they just wanted to avoid designing desktop calculator chipsets from scratch every time. But outsiders realized they could use the microprocessor to build their own personal computers, and enthusiasts did. Thousands of tinkerers found configurations and uses that Intel never dreamed of. This distributed and permissionless invention kicked off a “great surge of development,” as the economist Carlota Perez calls it, triggered by technology but driven by economic and societal forces.[1]



There was no real demand for personal computers in the early 1970s; they were expensive toys. But the experimenters laid the technical groundwork and built a community. Then, around 1975, a step-change in the cost of microprocessors made the personal computer market viable. The Intel 8080 had an initial list price of $360 ($2,300 in today’s dollars). MITS could barely turn a profit on its Altair at a bulk price of $75 each ($490 today). But when MOS Technologies started selling its 6502 for $25 ($150 today), Steve Wozniak could afford to build a prototype Apple. The 6502 and the similarly priced Zilog Z80 forced Intel’s prices down. The nascent PC community started spawning entrepreneurs and a score of companies appeared, each with a slightly different product.



You couldn’t have known in the mid-1970s that the PC (and PC-like products, such as ATMs, POS terminals, smartphones, etc.) would revolutionize everything. While Steve Jobs was telling investors that every household would someday have a personal computer (a wild underestimate, as it turned out), others questioned the need for personal computers at all. As late as 1979, Apple’s ads didn’t tell you what a personal computer could do—it asked what you did with it.[2] The established computer manufacturers (IBM, HP, DEC) had no interest in a product their customers weren’t asking for. Nobody “needed” a computer, and so PCs weren’t bought—they were sold. Flashy startups like Apple and Sinclair used hype to get noticed, while companies with footholds in consumer electronics like Atari, Commodore, and Tandy/RadioShack used strong retail connections to put their PCs in front of potential customers. 



        
            
            

            
                    

    



The market grew slowly at first, accelerating only as experiments led to practical applications like the spreadsheet, introduced in 1979. As use grew, observation of use caused a reduction in uncertainty, leading to more adoption in a self-reinforcing cycle. This kind of gathering momentum takes time in every technological wave: It took almost 30 years for electricity to reach half of American households, for example, and it took about the same amount of time for personal computers.[3] When a technological revolution changes everything, it takes a huge amount of innovation, investment, storytelling, time, and plain old work. It also sucks up all the money and talent available. Like Kuhn’s paradigms in science, any technology not part of the wave’s techno-economic paradigm will seem like a sideshow.[4]



        
            
            

            
                            Source: [3]
                    

    



The nascent growth of PCs attracted investors—venture capitalists—who started making risky bets on new companies. This development incentivized more inventors, entrepreneurs, and researchers, which in turn drew in more speculative capital.



Companies like IBM, the computing behemoth before the PC, saw poor relative performance. They didn’t believe the PC could survive long enough to become capable in their market and didn’t care about new, small markets that wanted a cheaper solution.



Retroactively, we give the PC pioneers the powers of prophets rather than visionaries. But at the time, nobody outside of a small group of early adopters paid any attention. Establishment media like The New York Times didn’t take the PC seriously until after IBM’s was introduced in August 1981. In the entire year of 1976, when Apple Computer was founded, the NYT mentioned PCs only four times.[5] Apparently, only the crazy ones, the misfits, the rebels, and the troublemakers were paying attention.



        
            
            

            
                            Source: [5]
                    

    



It’s the element of surprise that should strike us most forcefully when we compare the early days of the computer revolution to today. No one took note of personal computers in the 1970s. In 2025, AI is all we seem to talk about.



    




Big companies hate surprises. That’s why uncertainty makes a perfect moat for startups. Apple would never have survived IBM entering the market in 1979, and only lived to compete another day after raising $100 million in its 1980 IPO. It was the only remaining competitor after the IBM-induced winnowing.[6]



        
            
            

            
                            Source: [6]
                    

    



As the tech took hold and started to show promise, innovations in software, memory, and peripherals like floppy disk drives and modems joined it. They reinforced one another, with each advance putting pressure on the technologies adjacent to it. When any part of the system held back the other parts, investors rushed to fund that sector. As increases in PC memory allowed more complicated software, for example, there became a need for more external storage, which caused VC Dave Marquardt to invest in disk drive manufacturer Seagate in 1980. Seagate gave Marquardt a 40x return when it went public in 1981. Other investors noticed, and some $270 million was plowed into the industry in the following three years.[7]



Money also poured into the underlying infrastructure—fiber optic networks, chip making, etc.—so that capacity was never a bottleneck. Companies which used the new technological system to outperform incumbents began to take market share, and even staid competitors realized they needed to adopt the new thing or die. The hype became a froth which became an investment bubble: the dot-com frenzy of the late 1990s. The ICT wave was therefore similar to previous ones—like the investment mania of the 1830s and the Roaring ‘20s, which followed the infrastructure buildout of canals and railways, respectively—in which the human response to each stage predictably generated the next.



When the dot-com bubble popped, society found it disapproved of the excesses in the sector and governments found they had the popular support to reassert authority over the tech companies and their investors. This put a brake on the madness. Instead of the reckless innovation of the bubble, companies started to expand into proven markets, and financiers moved from speculating to investing. Entrepreneurs began to focus on finding applications rather than on innovating the underlying technologies. Technological improvements continued, but change became more evolutionary than revolutionary.



As change slowed, companies gained the confidence to invest for the longer term. They began to combine various parts of the system in new ways to create value for a wider group of users. The massive overbuilding of fiber optic telecom networks and other infrastructure during the frenzy left plenty of cheap capacity, keeping the costs of expansion down. It was a great time to be a businessperson and investor.



        
            
            

            
                    

    



In contrast, society did not need a bubble to pop to start excoriating AI. Given that the backlash to tech has been going on for a decade, this seems normal to us. But the AI backlash differs from the general high regard, earlier in the cycle, enjoyed by the likes of Bill Gates, Steve Jobs, Jeff Bezos, and others who built big tech businesses. The world hates change, and only gave tech a pass in the ‘80s and ‘90s because it all still seemed reversible: it could be made to go away if it turned out badly. This gave the early computer innovators some leeway to experiment. Now that everyone knows computers are here to stay, AI is not allowed the same wait-and-see attitude. It is seen as part of the ICT revolution.



    




Perez, the economist, breaks each technological wave into four predictable phases: irruption, frenzy, synergy, and maturity. Each has a characteristic investment profile.



        
            
            

            
                    

    



The middle two, frenzy and synergy, are the easy ones for investors. Frenzy is when everyone piles in and investors are rewarded for taking big risks on unproven ideas, culminating in the bubble, when paper profits disappear. When rationality returns, the synergy phase begins, as companies make their products usable and productive for a wide array of users. Synergy pays those who are patient, picky, and can bring more than just money to the table.



Irruption and maturity are more difficult to invest in.



Investing in the 1970s was harder than it might look in hindsight. To invest from 1971 through 1975, you had to be either a true believer or a conglomerator with a knuckle-headed diversification strategy. Intel was a great investment, though it looked at first like a previous-wave electronics company. MOS Technologies was founded in 1969 to compete with Texas Instruments but sold a majority of itself to Allen-Bradley to stay afloat. Zilog was funded in 1975 by Exxon (Exxon!). Apple was a great investment, but it had none of the hallmarks of what VCs look for, as the PC was still a solution in search of a problem.



It was later irruption, in the early 1980s, when great opportunities proliferated: PC makers (Compaq, Dell), software and operating systems (Microsoft, Electronic Arts, Adobe), peripherals (Seagate), workstations (Sun), and computer stores (Businessland), among others. If you invested in the winners, you did well. But there was still more money than ideas, which meant that it was no golden age for investing. By 1983, there were more than 70 companies competing in the disk drive sector alone, and valuations collapsed. There were plenty of people whose fortunes were established in the 1970s and 1980s, and many VCs made their names in that era. But the biggest advantage to being an irruption-stage investor was building institutional knowledge to invest early and well in the frenzy and synergy phases.



Investing in the maturity phase is even more difficult. In irruption, it’s hard to see what will happen; in maturity, nothing much happens at all. The uncertainty about what will work and how customers and society will react is almost gone. Things are predictable, and everyone acts predictably.



The lack of dynamism allows the successful synergy companies to remain entrenched (see: the Nifty 50 and FAANG), but growth becomes harder. They start to enter each other’s markets, conglomerate, raise prices, and cut costs. The era of products priced to entice new customers ends, and quality suffers. The big companies continue to embrace the idea of revolutionary innovation, but feel the need to control how their advances are used. R&D spending is redirected from product and process innovation toward increasingly fruitless attempts to find ways to extend the current paradigm. Companies frame this as a drive to win, but it’s really a fear of losing.



Innovation can happen during maturity, sometimes spectacularly. But because these innovations only find support if they fit into the current wave’s paradigm, they are easily captured in the dominant companies’ gravity wells. This means making money as an entrepreneur or investor in them is almost impossible. Generative AI is clearly being captured by the dominant ICT companies, which raises the question of whether this time will be different for inventors and investors—a different question from whether AI itself is a revolutionary technology.



    




Shipping containerization was a late-wave innovation that changed the world, kicked off our modern era of globalization, resulted in profound changes to society and the economy, and contributed to rapid growth in well-being. But there were, perhaps, only one or two people who made real money investing in it.



The year 1956 was late in the previous wave. But that year, the company soon to be known as SeaLand revolutionized freight shipping with the launch of the first containership, the Ideal-X. SeaLand’s founder, Malcom McLean, had an epiphany that the job to be done by truckers, railroads, and shipping lines was to move goods from shipper to destination, not to drive trucks, fill boxcars, or lade boats. SeaLand allowed freight to transfer seamlessly from one mode to another, saving time, making shipping more predictable, and cutting costs—both the costs of loading, unloading, and reloading, and the cost of a ship sitting idly in port as it was loaded and unloaded.[8]



The benefits of containerization, if it could be made to happen, were obvious. Everybody could see the efficiencies, and customers don’t care how something gets to where they can buy it, as long as it does. But longshoremen would lose work, politicians would lose the votes of those who lost work, port authorities would lose the support of the politicians, federal regulators would be blamed for adverse consequences, railroads might lose freight to shipping lines, shipping lines might lose freight to new shipping lines, and it would all cost a mint. Most thought McLean would never be able to make it work.



McLean squeezed through the cracks of the opposition he faced. He bought and retrofitted war surplus ships, lowering costs. He went after the coastal shipping trade, a dying business in the age of the new interstates, to avoid competition. He set up shop in Newark, NJ, rather than the shipping hub of Hell’s Kitchen, to get buy-in from the port authority and avoid Manhattan congestion. And he made a deal with the New York longshoremen’s union, which was only possible because he was a small player whom they figured was not a threat.



        
            
            

            
                            Source: [10]
                    

    



But competitors and regulators moved too quickly for McLean to seize the few barriers to entry that might have been available to him: domination of the ports, exclusive agreements with shippers or other forms of transportation, standardization on proprietary technology, etc.[9] When it started to look like it might work, around 1965, the obvious advantages of containerization meant that every large shipping line entered the business, and competition took off. Even though containerized freight was less than 1% of total trade by 1968, the number of containerships was already ramping fast.[10] Capacity outstripped demand for years. 



The increase in competition led to a rate war, which led to squeezed profits, which in turn led to consolidation and cartels. Meanwhile, the cost of building ever-larger container ships and the port facilities to deal with them meant the business became hugely capital intensive. McLean saw the writing on the wall and sold SeaLand to R.J. Reynolds in January 1969. He was, perhaps, the only entrepreneur to get out unscathed.



It took a long time for the end-to-end vision to be realized. But around 1980, a dramatic drop began in the cost of sea freight.[11] This contributed to a boom in international trade[12] and allowed manufacturers to move away from higher-wage to lower-wage countries, making containerization irreversible.



        
            
            

            
                            Source: [11]
                    

    



Some people did make money, of course; someone always does. McLean did, as did shipping magnate Daniel Ludwig, who had invested $8.5 million in SeaLand’s predecessor, McLean Industries, at $8.50 per share in 1965 and sold in 1969 for $50 per share.[13] Shipbuilders made money, too: between 1967 and 1972, some $10 billion ($80 billion in 2025 dollars) was spent building containerships. The contractors that built the new container ports also made money. And, later, shipping lines that consolidated and dominated the business, like Maersk and Evergreen, became very large. But, “for R.J. Reynolds, and for other companies that had chased fast growth by buying into container shipping in the late 1960s, their investments brought little but disappointment.”[14] Aside from McLean and Ludwig, it is hard to find anyone who became rich from containerization itself, because competition and capex costs made it hard to grow fast or achieve high margins.



        
            
            

            
                            Source: [12]
                    

    



The business ended up being dominated primarily by the previous incumbents, and the margins went to the companies shipping goods, not the ones they shipped through. Companies like IKEA benefited from cheap shipping, going from a provincial Scandinavian company in 1972 to the world’s largest furniture retailer by 2008; container shipping was a perfect fit for IKEA’s flat-pack furniture. Others, like Walmart, used the predictability enabled by containerization to lower inventory and its associated costs.



With hindsight, it’s easy to see how you could have invested in containerization: not in the container shipping industry itself, but in the industries that benefited from containerization. But even here, the success of companies like Walmart, Costco, and Target was coupled with the failure of others. The fallout from containerization set Sears and Woolworth on downward spirals, put the final nail in the coffin of Montgomery Ward and A&P, and drove Macy’s into bankruptcy before it was rescued and downsized by Federated. Meanwhile, in North Carolina, “the furniture capital of the world,” furniture makers tried to compete with IKEA by importing cheap pieces from China. They ended up being replaced by their suppliers.[15]



If there had been more time to build moats, there might have been a few dominant containerization companies, and the people behind them would be at the top of the Forbes 400, while their investors would be legendary. But moats take time to build and, unlike the personal computer, the adoption of containerization wasn’t a surprise—every business with interests at stake had a strategic plan immediately.



The economist Joseph Schumpeter said “perfect competition is and always has been temporarily suspended whenever anything new is being introduced.”[16] But containerization shows this isn’t true at the end of tech waves. And because there is no economic profit during perfect competition, there is no money to be made by innovators during maturity. Like containerization, the introduction of AI did not lead to a period of protected profits for its innovators. It led to an immediate competitive free-for-all.



    




Let’s grant that generative AI is revolutionary (but also that, as is becoming increasingly clear, this particular tech is now already in an evolutionary stage). It will create a lot of value for the economy, and investors hope to capture some of it. When, who, and how depends on whether AI is the end of the ICT wave, or the beginning of a new one. 



If AI had started a new wave, there would have been an extended period of uncertainty and experimentation. There would have been a population of early adopters experimenting with their own models. When thousands or millions of tinkerers use the tech to solve problems in entirely new ways, its uses proliferate. But because they are using models owned by the big AI companies, their ability to fully experiment is limited to what’s allowed by the incumbents, who have no desire to permit an extended challenge to the status quo.



This doesn’t mean AI can’t start the next technological revolution. It might, if experimentation becomes cheap, distributed and permissionless—like Wozniak cobbling together computers in his garage, Ford building his first internal combustion engine in his kitchen, or Trevithick building his high-pressure steam engine as soon as James Watt’s patents expired. When any would-be innovator can build and train an LLM on their laptop and put it to use in any way their imagination dictates, it might be the seed of the next big set of changes—something revolutionary rather than evolutionary. But until and unless that happens, there can be no irruption.



AI is instead the epitome of the ICT wave. The computing visionaries of the 1960s set out to build a machine that could think, which their successors eventually did, by extending gains in algorithms, chips, data, and data center infrastructure. Like containerization, AI is an extension of something that came before, and therefore no one is surprised by what it can and will do. In the 1970s, it took time for people to wrap their heads around the desirability of powerful and ubiquitous computing. But in 2025, machines that think better than previous machines are easy for people to understand.



Consider the extent to which the progress of AI rhymes with the business evolution of containerization:



        
            
            

            
                    

    



In the “AI rhymes” column, the first four items are already underway. How you should invest depends on whether you believe Nos. 5–7 are next.



    




Economists are predicting that AI will increase global GDP somewhere between 1%[17] to more than 7%[18] over the next decade, which is $1–7 trillion of new value created. The big question is where that money will stick as it flows through the value chain.



Most AI market overviews have a score or more categories, breaking each of them into customer and industry served. But these will change dramatically over the next few years. You could, instead, just follow the money to simplify the taxonomy of companies:



        
            
            

            
                    

    



What the history of containerization suggests is that, if you aren’t already an investor in a model company, you shouldn’t bother. Sam Altman and a few other early movers may make a fortune, as McLean and Ludwig did. But the huge costs of building and running a model, coupled with intense competition, means there will, in the end, be only a few companies, each funded and owned by the largest tech companies. If you’re already an investor, congratulations: There will be consolidation, so you might get an exit.



Domain-specific models—like Cursor or Harvey—will be part of the consolidation. These are probably the most valuable models. But fine-tuning is relatively cheap, and there are big economies of scope. On the other hand, just as Google had to buy Invite Media in 2010 to figure out how to sell to ad agencies, domain-specific model companies that have earned the trust of their customers will be prime acquisition targets. And although it seems possible that models which generate things other than language—like Midjourney or Runway—might use their somewhat different architecture to carve out a separate technological path, the LLM companies have easily entered this space as well. Whether this applies to companies like Osmo remains to be seen.



While it’s too late to invest in the model companies, the profusion of those using the models to solve specific problems is ongoing: Perplexity, InflectionAI, Writer, Abridge, and a hundred others. But if any of these become very valuable, the model companies will take their earnings, either through discriminatory pricing or vertical integration. Success, in other words, will mean defeat—always a bad thesis. At some point, model companies and app companies will converge: There will simply be AI companies, and only a few of them. There will be some winners, as always, but investments in the app layer as a whole will lose money. 



The same caveat applies, however: If an app company can build a customer base or an amazing team, it might be acquired. But these companies aren’t really technology companies at all; they are building a market on spec and have to be priced as such. A further caveat is that there will be investors who make a killing arbitraging FOMO-panicked acquirors willing to massively overpay. But this is not really “investing.”



There might be an investment opportunity in companies that manage the interface between the AI giants and their customers, or protect company data from the model companies—like Hugging Face or Glean—because these businesses are by nature independent of the models. But no analogue in the post-containerization shipping market became very large. Even the successful intermediation companies in the AI space will likely end up mid-sized because the model companies will not allow them to gain strategic leverage—another consequence of the absence of surprise.



    




When an industry is going to be big but there is uncertainty about how it will play out, it often makes sense to swim upstream to the industry’s suppliers. In the case of AI, this means the chip providers, data companies, and cloud/data center companies: SambaNova, Scale AI, and Lambda, as well as those that have been around for a long time, like Nvidia and Bloomberg.



The case for data is mixed. General data—i.e., things most people know, including everything anyone knew more than, say, 10 years ago, and most of what was learned after that—is a commodity. There may be room for a few companies to do the grunt work of collating and tagging it, but since the collating and tagging might best be done by AI itself, there will not be a lot of pricing leverage. Domain-specific models will need specialist data, and other models will try to answer questions about the current moment. Specific, timely, and hard to reproduce data will be valuable. This is not a new market, of course—Bloomberg and others have done well by it. A more concentrated customer base will lower prices for this data, while wider use will raise revenues. On balance, this will probably be a plus for the industry, though not a huge one. There will be new companies built, but only a couple worth investing in.



The high capex of AI companies will primarily be spent with the infrastructure companies. These companies are already valued with this expectation, so there won’t be an upside surprise. But consider that shipbuilding benefited from containerization from 1965 until demand collapsed after about 1973.[19] If AI companies consolidate or otherwise act in concert, even a slight downturn that forces them to conserve cash could turn into a serious, sudden, and long-lasting decline in infrastructure spending. This would leave companies like Nvidia and its emerging competitors—who must all make long-term commitments to suppliers and for capacity expansion—unable to lower costs to match the new, smaller market size. Companies priced for an s-curve are overpriced if there’s a peak and decline.



        
            
            

            
                            Source: [19]
                    

    



All of which means that investors shouldn’t swim upstream, but fish downstream: companies whose products rely on achieving high-quality results from somewhat ambiguous information will see increased productivity and higher profits. These sectors include professional services, healthcare, education, financial services, and creative services, which together account for between a third and a half of global GDP and have not seen much increased productivity from automation. AI can help lower costs, but as with containerization, how individual businesses incorporate lower costs into their strategies—and what they decide to do with the savings—will determine success. To put it bluntly, using cost savings to increase profits rather than grow revenue is a loser’s game.



The companies that will benefit most rapidly are those whose strategies are already conditional on lowering costs. IKEA’s longtime strategy was to sell quality furniture for low prices and make it up on volume. After containerization made it possible for them to go worldwide, IKEA became the world’s largest retailer and Ingvar Kamprad (the IK of IKEA) became a billionaire. Similarly, Walmart, whose strategy was high volume and low prices in underserved markets, benefited from both cost savings and just-in-time supply chains, allowing increased product variety and lower inventory costs.



Today’s knowledge-work companies that already prioritize the same values are the least risky way to bet on AI, but new companies will form or re-form with a high-volume, low-cost strategy, just as Costco did in the early 1980s. New companies will compete with the incumbents, but with a clean slate and hindsight. Regardless, there are few barriers to entry, so each of these firms will face stiff competition and operate in fragmented markets. Experienced management and flawless execution will be key.



Being an entrepreneur will be a fabulous proposition in these sectors. Being an investor will be harder. Companies will not need much private capital—IKEA never needed to raise risk capital, and Costco raised only one round in 1983 before going public in 1985—because implementing cost-savings technology is not capital intensive. As with containerization, there will be a long lag between technology trigger and the best investments. The opportunities will be later.



Stock pickers will also make money, but they need to be choosy. At the high end of projections, an additional 7% in GDP growth over ten years within one third of the economy gives a tailwind of only about 2% per year to these companies—even less if productivity growth from older ICT products abates. The primary value shift will be to companies that are embracing the strategic implications of AI from companies that are not, the way Walmart benefited from Sears, which took advantage of cheaper goods prices but did not reinvent itself.



Consumers, however, will be the biggest beneficiaries. Previous waves of mechanization benefited labor productivity in manufacturing, driving prices down and saving consumers money. But increased labor productivity in manufacturing also led to higher manufacturing wages. Wages in services businesses had to rise to compete, even though these businesses did not benefit from productivity gains. This caused the price of services to rise.[20] The share of household spending on food and clothing went from 55% in 1918 to 16% in 2023,[21] but the cost of knowledge-intensive services like healthcare and education have grown well above inflation. 



Something similar will happen with AI: Knowledge-intensive services will get cheaper, allowing consumers to buy more of them, while services that require person-to-person interaction will get more expensive, taking up a greater percentage of household spending. This points to obvious opportunities in both. But the big news is that most of the new value created by AI will be captured by consumers, who should see a wider variety of knowledge-intensive goods at reasonable prices, and wider and more affordable access to services like medical care, education, and advice.



    




There is nothing better than the beginning of a new wave, when the opportunities to envision, invent, and build world-changing companies leads to money, fame, and glory. But there is nothing more dangerous for investors and entrepreneurs than wishful thinking. The lessons learned from investing in tech over the last 50 years are not the right ones to apply now. The way to invest in AI is to think through the implications of knowledge workers becoming more efficient, to imagine what markets this efficiency unlocks, and to invest in those. For decades, the way to make money was to bet on what the new thing was. Now, you have to bet on the opportunities it opens up.



    




Jerry Neumann is a retired venture investor, writing and teaching about innovation.



    

                    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Myocardial infarction may be an infectious disease]]></title>
            <link>https://www.tuni.fi/en/news/myocardial-infarction-may-be-infectious-disease</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45235648</guid>
            <description><![CDATA[A pioneering study by researchers from Finland and the UK has demonstrated for the first time that myocardial infarction may be an infectious disease. This discovery challenges the conventional und...]]></description>
            <content:encoded><![CDATA[A pioneering study by researchers from Finland and the UK has demonstrated for the first time that myocardial infarction may be an infectious disease. This discovery challenges the conventional understanding of the pathogenesis of myocardial infarction and opens new avenues for treatment, diagnostics, and even vaccine development.According to the recently published research, an infection may trigger myocardial infarction. Using a range of advanced methodologies, the research found that, in coronary artery disease, atherosclerotic plaques containing cholesterol may harbour a gelatinous, asymptomatic biofilm formed by bacteria over years or even decades. Dormant bacteria within the biofilm remain shielded from both the patient’s immune system and antibiotics because they cannot penetrate the biofilm matrix.A viral infection or another external trigger may activate the biofilm, leading to the proliferation of bacteria and an inflammatory response. The inflammation can cause a rupture in the fibrous cap of the plaque, resulting in thrombus formation and ultimately myocardial infarction.Professor Pekka Karhunen, who led the study, notes that until now, it was assumed that events leading to coronary artery disease were only initiated by oxidised low-density lipoprotein (LDL), which the body recognises as a foreign structure.“Bacterial involvement in coronary artery disease has long been suspected, but direct and convincing evidence has been lacking. Our study demonstrated the presence of genetic material – DNA – from several oral bacteria inside atherosclerotic plaques,” Karhunen explains.The findings were validated by developing an antibody targeted at the discovered bacteria, which unexpectedly revealed biofilm structures in arterial tissue. Bacteria released from the biofilm were observed in cases of myocardial infarction. The body’s immune system had responded to these bacteria, triggering inflammation which ruptured the cholesterol-laden plaque.The observations pave the way for the development of novel diagnostic and therapeutic strategies for myocardial infarction. Furthermore, they advance the possibility of preventing coronary artery disease and myocardial infarction by vaccination.The study was conducted by Tampere and Oulu Universities, Finnish Institute for Health and Welfare and the University of Oxford. Tissue samples were obtained from individuals who had died from sudden cardiac death, as well as from patients with atherosclerosis who were undergoing surgery to cleanse carotid and peripheral arteries.The research is part of an extensive EU-funded cardiovascular research project involving 11 countries. Significant funding was also provided by the Finnish Foundation for Cardiovascular Research and Jane and Aatos Erkko Foundation. The research article Viridans Streptococcal Biofilm Evades Immune Detection and Contributes to Inflammation and Rupture of Atherosclerotic Plaques was published in the Journal of the American Heart Association on 6 August 2025. Read the article onlineFurther informationProfessor Pekka KarhunenFaculty of Medicine and Health TechnologyTampere Universitypekka.j.karhunen [at] tuni.fi (pekka[dot]j[dot]karhunen[at]tuni[dot]fi)Tel. +358 400 511361]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AMD’s RDNA4 GPU architecture]]></title>
            <link>https://chipsandcheese.com/p/amds-rdna4-gpu-architecture-at-hot</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45235293</guid>
            <description><![CDATA[RDNA4 is AMD’s latest graphics-focused architecture, and fills out their RX 9000 line of discrete GPUs.]]></description>
            <content:encoded><![CDATA[RDNA4 is AMD’s latest graphics-focused architecture, and fills out their RX 9000 line of discrete GPUs. AMD noted that creating a good gaming GPU requires understanding both current workloads, as well as taking into account what workloads might look like five years in the future. Thus AMD has been trying to improve efficiency across rasterization, compute, and raytracing. Machine learning has gained importance including in games, so AMD’s new GPU architecture caters to ML workloads as well.From AMD’s perspective, RDNA4 represents a large efficiency leap in raytracing and machine learning, while also improving on the rasterization front. Improved compression helps keep the graphics architecture fed. Outside of the GPU’s core graphics acceleration responsibility, RDNA4 brings improved media and display capabilities to round out the package.The Media Engine provides hardware accelerated video encode and decode for a wide range of codecs. High end RDNA4 parts like the RX 9070XT have two media engines. RDNA4’s media engines feature faster decoding speed, helping save power during video playback by racing to idle. For video encoding, AMD targeted better quality in H.265, H.265, and AV1, especially in low latency encoding.Low latency encoder modes are mostly beneficial for streaming, where delays caused by the media engine ultimately translate to a delayed stream. Reducing latency can make quality optimizations more challenging. Video codecs strive to encode differences between frames to economize storage. Buffering up more frames gives the encoder more opportunities to look for similar content across frames, and lets it allocate more bitrate budget for difficult sequences. But buffering up frames introduces latency. Another challenge is some popular streaming platforms mainly use H.264, an older codec that’s less efficient than AV1. Newer codecs are being tested, so the situation may start to change as the next few decades fly by. But for now, H.264 remains important due to its wide support.Testing with an old gameplay clip from Elder Scrolls Online shows a clear advantage for RDNA4’s media engine when testing with the latency-constrained VBR mode and encoder tuned for low latency encoding (-usage lowlatency -rc vbr_latency). Netflix’s VMAF video quality metric gives higher scores for RDNA4 throughout the bitrate range. Closer inspection generally agrees with the VMAF metric.RDNA4 does a better job preserving high contrast outlines. Differences are especially visible around text, which RDNA4 handles better than its predecessor while using a lower bitrate. Neither result looks great with such a close look, with blurred text on both examples and fine detail crushed in video encoding artifacts. But it’s worth remembering that the latency-constrained VBR mode uses a VBV buffer of up to three frames, while higher latency modes can use VBV buffer sizes covering multiple seconds of video. Encoding speed has improved slightly as well, jumping from ~190 to ~200 FPS from RDNA3.5 to RDNA4.The display engine fetches on-screen frame data from memory, composites it into a final image, and drives it to the display outputs. It’s a basic task that most people take for granted, but the display engine is also a good place to perform various image enhancements. A traditional example is using a lookup table to apply color correction. Enhancements at the display engine are invisible to user software, and are typically carried out in hardware with minimal power cost. On RDNA4, AMD added a “Radeon Image Sharpening” filter, letting the display engine sharpen the final image. Using dedicated hardware at the display engine instead of the GPU’s programmable shaders means that the sharpening filter won’t impact performance and can be carried out with better power efficiency. And, AMD doesn’t need to rely on game developers to implement the effect. Sharpening can even apply to the desktop, though I’m not sure why anyone would want that.Power consumption is another important optimization area for display engines. Traditionally that’s been more of a concern for mobile products, where maximizing battery life under low load is a top priority. But RDNA4 has taken aim at multi-monitor idle power with its newer display engine. AMD’s presentation stated that they took advantage of variable refresh rates on FreeSync displays. They didn’t go into more detail, but it’s easy to imagine what AMD might be doing. High resolution and high refresh rate displays translate to high pixel rates. That in turn drives higher memory bandwidth demands. Dynamically lowering refresh rates could let RDNA4’s memory subsystem enter a low power state while still meeting refresh deadlines.Power and GDDR6 data rates for various refresh rate combinations. AMD’s monitoring software (and others) read out extremely low memory clocks when the memory bus is able to idle, so those readings aren’t listed.I have a RX 9070 hooked up to a Viotek GN24CW 1080P display via HDMI, and a MSI MAG271QX 1440P capable of refresh rates up to 360 Hz. The latter is connected via DisplayPort. The RX 9070 manages to keep memory at idle clocks even at high refresh rate settings. Moving the mouse causes the card to ramp up memory clocks and consume more power, hinting that RDNA4 is lowering refresh rates when screen contents don’t change. Additionally, RDNA4 gets an intermediate GDDR6 power state that lets it handle the 1080P 60 Hz + 1440P 240 Hz combination without going to maximum memory clocks. On RDNA2, it’s more of an all or nothing situation. The older card is more prone to ramping up memory clocks to handle high pixel rates, and power consumption remains high even when screen contents don’t change.RDNA4’s Workgroup Processor retains the same high level layout as prior RDNA generations. However, it gets major improvements targeted towards raytracing, like improved raytracing units and wider BVH nodes, a dynamic register allocation mode, and a scheduler that no longer suffers false memory dependencies between waves. I covered those in previous articles. Besides those improvements, AMD’s presentation went over a couple other details worth discussing.AMD has a long history of using a scalar unit to offload operations that are constant across a wave. Scalar offload saves power by avoiding redundant computation, and frees up the vector unit to increase performance in compute-bound sequences. RDNA4’s scalar unit gains a few floating point instructions, expanding scalar offload opportunities. This capability debuted on RDNA3.5, but RDNA4 brings it to discrete GPUs.While not discussed in AMD’s presentation, scalar offload can bring additional performance benefits because scalar instructions sometimes have lower latency than their vector counterparts. Most basic vector instructions on RDNA4 have 5 cycle latency. FP32 adds and multiples on the scalar unit have 4 cycle latency. The biggest latency benefits still come from offloading integer operations though.GPUs use barriers to synchronize threads and enforce memory ordering. For example, a s_barrier instruction on older AMD GPUs would cause a thread to wait until all of its peers in the workgroup also reached the s_barrier instruction. Barriers degrade performance because any thread that happened to reach the barrier faster would have to stall until its peers catch up.RDNA4 splits the barrier into separate “signal” and “wait” actions. Instead of s_barrier, RDNA4 has s_barrier_signal and s_barrier_wait. A thread can “signal” the barrier once it produces data that other threads might need. It can then do independent work, and only wait on the barrier once it needs to use data produced by other threads. The s_barrier_wait will then stall the thread until all other threads in the workgroup have signalled the barrier.The largest RDNA4 variants have a 8 MB L2 cache, representing a substantial L2 capacity increase compared to prior RDNA generations. RDNA3 and RDNA2 maxed out at 6 MB and 4 MB L2 capacities, respectively. AMD found that difficult workloads like raytracing benefit from the larger L2. Raytracing involves pointer chasing during BVH traversal, and it’s not surprising that it’s more sensitive to accesses getting serviced from the slower Infinity Cache as opposed to L2. In the initial scene in 3DMark’s DXR feature test, run in Explorer Mode, RDNA4 dramatically cuts down the amount of data that has to be fetched from beyond L2.RDNA2 still does a good job of keeping data in L2 in absolute terms. But it’s worth noting that hitting Infinity Cache on both platforms adds more than 50 ns of extra latency over a L2 hit. That’s well north of 100 cycles because both RDNA2 and RDNA4 run above 2 GHz. While AMD’s graphics strategy has shifted towards making the faster caches bigger, it still contrasts with Nvidia’s strategy of putting way more eggs in the L2 basket. Blackwell’s L2 cache serves the functions of both AMD’s L2 and Infinity Cache, and has latency between those two cache levels. Nvidia also has a flexible L1/shared memory allocation scheme that can give them more low latency caching capacity in front of L2, depending on a workload’s requested local storage (shared memory) capacity.A mid-level L1 cache was a familiar fixture on prior RDNA generations. It’s conspicuously missing from RDNA4, as well as AMD’s presentation. One possibility is that L1 cache hitrate wasn’t high enough to justify the complexity of an extra cache level. Perhaps AMD felt its area and transistor budget was better allocated towards increasing L2 capacity. To support this theory, L1 hitrate on RDNA1 was often below 50%. At the same time, the RDNA series always enjoyed a high bandwidth and low latency L2. Putting more pressure on L2 in exchange for reducing L2 misses may have been an enticing tradeoff. Another possibility is that AMD ran into validation issues with the L1 cache and decided to skip it for this generation. There’s no way to verify either possibility of course, but I think the former reasons make more sense.Beyond tweaking the cache hierarchy, RDNA4 brings improvements to transparent compression. AMD emphasized that they’re using compression throughout the SoC, including at points like the display engine and media engine. Compressed data can be stored in caches, and decompressed before being written back to memory. Compression cuts down on data transfer, which reduces bandwidth requirements and improves power efficiency.Transparent compression is not a new feature. It has a long history of being one tool in the GPU toolbox for reducing memory bandwidth usage, and it would be difficult to find any modern GPU without compression features of some sort. Even compression in other blocks like the display engine have precedent. Intel’s display engines for example use Framebuffer Compression (FBC), which can write a compressed copy of frame data and keep fetching the compressed copy to reduce data transfer power usage as long as the data doesn’t change. Prior RDNA generations had compression features too, and AMD’sdocumentation summarizes some compression targets. While AMD didn’t talk about compression efficiency, I tried to take similar frame captures using RGP on both RDNA1 and RDNA4 to see if there’s a large difference in memory access per frame. It didn’t quite work out the way I expected, but I’ll put them here anyway and discuss why evaluating compression efficacy is challenging.The first challenge is that both architectures satisfy most memory requests from L0 or L1. AMD slides on RDNA1 suggest the L0 and L1 only hold decompressed data, at least for delta color compression. Compression does apply to L2. For RDNA4, AMD’s slides indicate it applies to the Infinity Cache too. However, focusing on data transfer to and from the L2 wouldn’t work due the large cache hierarchy differences between those RDNA generations.DCC, or delta color compression, is not the only form of compression. But this slide shows one example of compression/decompression happening in front of L2Another issue is, it’s easy to imagine a compression scheme that doesn’t change the number of cache requests involved. For example, data might be compressed to only take up part of a cacheline. A request only causes a subset of the cacheline to be read out, which a decompressor module expands to the full 128B. Older RDNA1 slides are ambiguous about this, indicating that DCC operates on 256B granularity (two cachelines) without providing further details.In any case, compression may be a contributing factor in RDNA4 being able to achieve better performance while using a smaller Infinity Cache than prior generations, despite only having a 256-bit GDDR6 DRAM setup.AMD went over RAS, or reliability, availability, and serviceability features in RDNA4. Modern chips use parity and ECC to detect errors and correct them, and evidently RDNA4 does the same. Unrecoverable errors are handled with driver intervention, by “re-initializing the relevant portion of the SoC, thus preventing the platform from shutting down”. There’s two ways to interpret that statement. One is that the GPU can be re-initialized to recover from hardware errors, obviously affecting any software relying on GPU acceleration. Another is that some parts of the GPU can be re-initialized while the GPU continues handling work. I think the former is more likely, though I can imagine the latter being possible in limited forms too. For example, an unrecoverable error reading from GDDR6 can hypothetically be fixed if that data is backed by a duplicate in system memory. The driver could transfer known-good data from the host to replace the corrupted copy. But errors with modified data would be difficult to recover from, because there might not be an up-to-date copy elsewhere in the system.On the security front, microprocessors get private buses to “critical blocks” and protected register access mechanisms. Security here targets HDCP and other DRM features, which I don’t find particularly amusing. But terminology shown on the slide is interesting, because MP0 and MP1 are also covered in AMD’s CPU-side documentation. On the CPU side, MP0 (microprocessor 0) handles some Secure Encrypted Virtualization (SEV) features. It’s sometimes called the Platform Security Processor (PSP) too. MP1 on CPUs is called the System Management Unit (SMU), which covers power control functions. Curiously AMD’s slide labels MP1 and the SMU separately on RDNA4. MP0/MP1 could have completely different functions on GPUs of course. But the common terminology raises the possibility that there’s a lot of shared work between CPU and GPU SoC design. RAS is also a very traditional CPU feature, though GPUs have picked up RAS features over time as GPU compute picked up steam.One of the most obvious examples of shared effort between the CPU and GPU sides is Infinity Fabric making its way to graphics designs. This started years ago with Vega, though back then using Infinity Fabric was more of an implementation detail. But years later, Infinity Fabric components provided an elegant way to implement a large last level cache, or multi-socket coherent systems with gigantic iGPUs (like MI300A).Slide from Hot Chips 29, covering Infinity Fabric used in AMD’s older Vega GPUThe Infinity Fabric memory-side subsystem on RDNA4 consists of 16 CS (Coherent Station) blocks, each paired with a Unified Memory Controller (UMC). Coherent Stations receive requests coming off the graphics L2 and other clients. They ensure coherent memory access by either getting data from a UMC, or by sending a probe if another block has a more up-to-date copy of the requested cacheline. The CS is a logical place to implement a memory side cache, and each CS instance has 4 MB of cache in RDNA4.To save power, Infinity Fabric supports DVFS (dynamic voltage and frequency scaling) to save power, and clocks between 1.5 and 2.5 GHz. Infinity Fabric bandwidth is 1024 bits per clock, which suggests the Infinity Cache can provide 2.5 TB/s of theoretical bandwidth. That roughly lines up with results from Nemes’s Vulkan-based GPU cache and memory bandwidth microbenchmark.AMD also went over their ability to disable various SoC components to harvest dies and create different SKUs. Shader Engines, WGPs, and memory controller channels can be disabled. AMD and other manufacturers have used similar harvesting capabilities in the past. I’m not sure what’s new here. Likely, AMD wants to re-emphasize their harvesting options.Finally, AMD mentioned that they chose a monolithic design for RDNA4 because it made sense for a graphics engine of its size. They looked at performance goals, package assembly and turnaround time, and cost. After evaluating those factors, they decided a monolithic design was the right option. It’s not a surprise. After all, AMD used monolithic designs for lower end RDNA3 products with smaller graphics engines, and only used chiplets for the largest SKUs. Rather, it’s a reminder that there’s no one size fits all solution. Whether a monolithic or chiplet-based design makes more sense depends heavily on design goals.RDNA4 brings a lot of exciting improvements to the table, while breaking away from any attempt to tackle the top end performance segment. Rather than going for maximum performance, RDNA4 looks optimized to improve efficiency over prior generations. The RX 9070 offers similar performance to the RX 7900XT in rasterization workloads despite having a lower power budget, less memory bandwidth, and a smaller last level cache. Techspot also shows the RX 9070 leading with raytracing workloads, which aligns with AMD's goal of enhancing raytracing performance.Slide from RDNA4’s Launch Presentation not Hot Chips 2025AMD achieves this efficiency using compression, better raytracing structures, and a larger L2 cache. As a result, RDNA4 can pack its performance into a relatively small 356.5 mm² die and use a modest 256-bit GDDR6 memory setup. Display and media engine improvements are welcome too. Multi-monitor idle power feels like a neglected area for discrete GPUs, even though I know many people use multiple monitors for productivity. Lowering idle power in those setups is much appreciated. On the media engine side, AMD’s video encoding capabilities have often lagged behind the competition. RDNA4’s progress at least prevents AMD from falling as far behind as they have before.If you like the content then consider heading over to the Patreon or PayPal if you want to toss a few bucks to Chips and Cheese. Also consider joining the Discord.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Safe C++ proposal is not being continued]]></title>
            <link>https://sibellavia.lol/posts/2025/09/safe-c-proposal-is-not-being-continued/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45234460</guid>
            <description><![CDATA[One year ago, the Safe C++ proposal was made. The goal was to add a safe subset/context into C++ that would give strong guarantees (memory safety, type safety, …]]></description>
            <content:encoded><![CDATA[One year ago, the Safe C++ proposal was made. The goal was to add a safe subset/context into C++ that would give strong guarantees (memory safety, type safety, thread safety) similar to what Rust provides, without breaking existing C++ code. It was an extension or superset of C++. The opt-in mechanism was to explicitly mark parts of the code that belong to the safe context. The authors even state:Code in the safe context exhibits the same strong safety guarantees as code written in Rust.The rest remains “unsafe” in the usual C++ sense. This means that existing code continues to work, while new or refactored parts can gain safety. For those who write Rust, Safe C++ has many similarities with Rust, sometimes with adjustments to fit C++’s design. Also, because C++ already has a huge base of “unsafe code”, Safe C++ has to provide mechanisms for mixing safe and unsafe, and for incremental migration. In that sense, all of Safe C++’s safe features are opt-in. Existing code compiles and works as before. Introducing safe context doesn’t break code that doesn’t use it.The proposal caught my interest. It seemed like a good compromise to make C++ safe, although there were open or unresolved issues, which is completely normal for a draft proposal. For example, how error reporting for the borrow checker and lifetime errors would work, or how generic code and templates would interact with lifetime logic and safe/unsafe qualifiers. These are just some of the points, the proposal is very long and elaborate. Moreover, I am not a programming language designer, so there might be better alternatives.Anyway, today I discovered that the proposal will no longer be pursued. When I thought about the proposal again this morning, I realized I hadn’t read any updates on it for some time. So I searched and found some answers on Reddit.The response from Sean Baxter, one of the original authors of the Safe C++ proposal:The Safety and Security working group voted to prioririze Profiles over Safe C++. Ask the Profiles people for an update. Safe C++ is not being continued.And again:The Rust safety model is unpopular with the committee. Further work on my end won’t change that. Profiles won the argument. All effort should go into getting Profile’s language for eliminating use-after-free bugs, data races, deadlocks and resource leaks into the Standard, so that developers can benefit from it.So I went to read the documents related to Profiles[1][2][3][4]. I try to summarize what I understood: they are meant to define modes of C++ that impose constraints on how you use the language and library, in order to guarantee certain safety properties. They are primarily compile-time constraints, though in practice some checks may be implemented using library facilities that add limited runtime overhead. Instead of introducing entirely new language constructs, profiles mostly restrict existing features and usages. The idea is that you can enable a profile, and any code using it agrees to follow the restrictions. If you don’t enable it, things work as before. So it’s backwards-compatible.Profiles seem less radical and more adoptable, a safer-by-default C++ without forcing the Rust model that aims to tackle the most common C++ pitfalls. I think Safe C++ was more ambitious: introducing new syntax, type qualifiers, safe vs unsafe contexts, etc. Some in the committee felt that was too heavy, and Profiles are seen as a more pragmatic path. The main objection is obvious: one could say that Profiles restrict less than what Safe C++ aimed to provide.Reading comments here and there, there is visible resistance in the community toward adopting the Rust model, and from a certain point of view, I understand it. If you want to write like Rust, just write Rust. Historically, C++ is a language that has often taken features from other worlds and integrated them into itself. In this case, I think that safety subsets of C++ already exist informally somehow. Profiles are an attempt to standardize and unify something that already exists in practice. Technically, they don’t add new fundamental semantics. Instead, they provide constraints, obligations and guarantees.In my opinion, considering the preferences of the committee and the entire C++ community, although I appreciated the Safe C++ proposal and was looking forward to seeing concrete results, considering the C++ context I believe that standardizing and integrating the Profiles as proposed is a much more realistic approach. Profiles might not be perfect, but they are better than nothing. They will likely be uneven in enforcement and weaker than Safe C++ in principle. They won’t give us silver-bullet guarantees, but they are a realistic path forward.[1] Core safety profiles for C++26[2] C++ Profiles: The Framework[3] What are profiles?[4] Note to the C++ standards committee members]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The case against social media is stronger than you think]]></title>
            <link>https://arachnemag.substack.com/p/the-case-against-social-media-is</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45234323</guid>
        </item>
        <item>
            <title><![CDATA[RIP pthread_cancel]]></title>
            <link>https://eissing.org/icing/posts/rip_pthread_cancel/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45233713</guid>
            <description><![CDATA[I posted about adding pthread_cancel use in curl about three weeks ago, we released this in curl 8.16.0 and it blew up right in our faces. Now, with #18540 we are ripping it out again. What happened?
short recap pthreads define “Cancelation points”, a list of POSIX functions where a pthread may be cancelled. In addition, there is also a list of functions that may be cancelation points, among those getaddrinfo().
getaddrinfo() is exactly what we are interested in for libcurl. It blocks until it has resolved a name. That may hang for a long time and libcurl is unable to do anything else. Meh. So, we start a pthread and let that call getaddrinfo(). libcurl can do other things while that thread runs.]]></description>
            <content:encoded><![CDATA[I posted about adding pthread_cancel use in curl
about three weeks ago, we released this in curl 8.16.0 and it blew
up right in our faces. Now, with
#18540 we are ripping it
out again. What happened?
short recap
pthreads
define “Cancelation points”, a list of POSIX functions where
a pthread may be cancelled. In addition, there is also a list of functions
that may be cancelation points, among those getaddrinfo().
getaddrinfo() is exactly what we are interested in for libcurl. It blocks
until it has resolved a name. That may hang for a long time and libcurl
is unable to do anything else. Meh. So, we start a pthread and let that
call getaddrinfo(). libcurl can do other things while that thread runs.
But eventually, we have to get rid of the pthread again. Which means we
either have to pthread_join() it - which means a blocking wait. Or we
call pthread_detach() - which returns immediately but the thread keeps
on running. Both are bad when you want to do many, many transfers. Either we block and
stall or we let pthreads pile up in an uncontrolled way.
So, we added pthread_cancel() to interrupt a running getaddrinfo()
and get rid of the pthread we no longer needed. So the theory. And, after
some hair pulling, we got this working.
cancel yes, leakage also yes!
After releasing curl 8.16.0 we got an issue reported in
#18532 that cancelled
pthreads leaked memory.

Digging into the glibc source
shows that there is this thing called
/etc/gai.conf
which defines how getaddrinfo() should sort returned answers.
The implementation in glibc first resolves the name to addresses. For these,
it needs to allocate memory. Then it needs to sort them if there is more
than one address. And in order
to do that it needs to read /etc/gai.conf. And in order to do that
it calls fopen() on the file. And that may be a pthread “Cancelation Point”
(and if not, it surely calls open() which is a required cancelation point).
So, the pthread may get cancelled when reading /etc/gai.conf and leak all
the allocated responses. And if it gets cancelled there, it will try to
read /etc/gai.conf again the next time it has more than one address
resolved.
At this point, I decided that we need to give up on the whole pthread_cancel()
strategy. The reading of /etc/gai.conf is one point where a cancelled
getaddrinfo() may leak. There might be others. Clearly, glibc is not really
designed to prevent leaks here (admittedly, this is not trivial).
RIP
Leaking memory potentially on something libcurl does over and over again is
not acceptable. We’d rather pay the price of having to eventually wait on
a long running getaddrinfo().
Applications using libcurl can avoid this by using c-ares which resolves
unblocking and without the use of threads. But that will not be able to do
everything that glibc does.
DNS continues to be tricky to use well.

  


    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Geedge and MESA leak: Analyzing the great firewall’s largest document leak]]></title>
            <link>https://gfw.report/blog/geedge_and_mesa_leak/en/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45233415</guid>
            <description><![CDATA[The Great Firewall of China (GFW) experienced the largest leak of internal documents in its history on Thursday September 11, 2025. Over 500 GB of source code, work logs, and internal communication records were leaked, revealing details of the GFW's research, development, and operations.]]></description>
            <content:encoded><![CDATA[

						
						
						
						
						
						

						
						1. Introduction
The Great Firewall of China (GFW) experienced the largest leak of internal documents in its history on Thursday September 11, 2025. Over 500 GB of source code, work logs, and internal communication records were leaked, revealing details of the GFW’s research, development, and operations.
The leak originated from a core technical force behind the GFW: Geedge Networks (whose chief scientist is Fang Binxing) and the MESA Lab at the Institute of Information Engineering, Chinese Academy of Sciences. The documents show that the company not only provides services to governments in places like Xinjiang, Jiangsu, and Fujian, but also exports censorship and surveillance technology to countries such as Myanmar, Pakistan, Ethiopia, Kazakhstan, and other unidentified country under the “Belt and Road” framework.
The significance and far-reaching implications of this leak are substantial. Due to the massive volume of data, GFW Report will continue to analyze and provide updates on the current page and on the Net4People.
2. Download Link
Enlace Hacktivista has provided the access to the leak:

BitTorrent: https://enlacehacktivista.org/geedge.torrent
Direct HTTPS download: https://files.enlacehacktivista.org/geedge/

The leaked files total about 600 GB. Among them, the file mirror/repo.tar alone, as an archive of the RPM packaging server, takes up 500 GB.
For detailed instructions on how to use the specific files, David Fifield has already provided a more thorough explanation on Net4People.
     7206346  mirror/filelist.txt
497103482880  mirror/repo.tar
 14811058515  geedge_docs.tar.zst
  2724387262  geedge_jira.tar.zst
 35024722703  mesalab_docs.tar.zst
 63792097732  mesalab_git.tar.zst
       71382  A HAMSON-EN.docx
       16982  A Hamson.docx
      161765  BRI.docx
       14052  CPEC.docx
     2068705  CTF-AWD.docx
       19288  Schedule.docx
       26536  TSG Solution Review Description-20230208.docx
      704281  TSG-问题.docx
       35040  chat.docx
       27242  ty-Schedule.docx
      111244  待学习整理-23年MOTC-SWG合同草本V.1-2020230320.docx
       52049  打印.docx
      418620  替票证明.docx
      260551  领导修改版-待看Reponse to Customer's Suggestions-2022110-V001--1647350669.docx
3. Safety Considerations
Due to the highly sensitive nature of these leaked materials, we strongly advise anyone who chooses to download and analyze them to take proper operational security precautions. It may be possible that these files may contain potentially risky content and accessing them in an insecure environment could expose you to surveillance or malware.
Please consider analyzing these files only in an isolated (virtual) machine without internet access.
4. Background
Great Firewall of China (GFW) is an umbrella term for a series of Internet censorship systems. Behind it, teams for research and development, operations, hardware, and management each play their roles and coordinate with one another. In addition to fixed government agencies (such as the CNCERT), different entities provide technical support depending on individual contracts and tenders. This leak originates from an important branch of the GFW’s R&D capacity: Geedge Networks and MESA Lab. The MESA lab is affiliated with the Institute of Information Engineering, Chinese Academy of Sciences (IIE, CAS).
The origins trace back to Fang Binxing, the “Father of the Great Firewall”, coming to Beijing. At the end of 2008, he established the National Engineering Laboratory for Information Content Security (NELIST), initially based at the Institute of Computing Technology, Chinese Academy of Sciences. Beginning in 2012, the supporting institution changed to the Institute of Information Engineering, Chinese Academy of Sciences. In January 2012, some NELIST personnel formed a team at IIE, and in June 2012 the team was officially named the Processing Architecture Team, English name MESA (Massive Effective Stream Analysis). Below is an excerpt from MESA’s self-introduction:
MESA Timeline

   January 2012: Liu Qingyun, Sun Yong, Zheng Chao, Yang Rong, Qin Peng, Liu Yang, and Li Jia formed a team at IIE;
   June 2012: The team was officially named the Processing Architecture Team, English name MESA (Massive Effective Stream Analysis);
   2012: Liu Qingyun was selected for IIE’s inaugural “Rising Star” talent program;
   2012: Yang Wei and Zhou Zhou joined the team;
   2012: The team successfully completed the cybersecurity assurance task for the 18th National Congress;
   January 2013: MESA’s first PhD trainee, Liu Tingwen, graduated successfully;
   2013: Li Shu, Liu Junpeng, and Liu Xueli joined the team;
   December 2013: The MESA team received IIE’s 2013 Major Scientific and Technological Progress Award;
   2014: Zhou Zhou was selected for IIE’s “Rising Star” talent program;
   2014: The MESA component SAPP platform began large-scale engineering deployment;
   2014: Zhang Peng, Yu Lingjing, and Jia Mengdie joined the team;
   2015: Zheng Chao was selected for IIE’s “Rising Star” talent program, and Zhang Peng was selected for IIE’s “Outstanding Talent Introduction” program;
   August 2015: MESA moved from the Agriculture Bureau to the Huayan Beili office area;
   July 2015: PhD student Sha Hongzhou trained by MESA graduated successfully, and Liu Xiaomei received Outstanding Graduate honors;
   2016: Dou Fenghu, Zhu Yujia, Wang Fengmei, Li Zhao, Lu Qiuwen, Du Meijie, Shen Yan, and Fang Xupeng joined MESA in succession, and the team expanded rapidly;
   2016: The team undertook multiple major engineering projects, with annual contracted revenue exceeding 35 million;
   December 2016: The MESA team participated in winning the National Science and Technology Progress Award (Second Prize);
   2018: Sun Yong and Zhou Zhou received the 2017 National State Secrecy Science and Technology Award (Second Prize);
By 2018, Fang Binxing had also established himself in Hainan, and Geedge (Hainan) Information Technology Co., Ltd. (Geedge Networks Ltd.) was founded in the same year. Fang served as chief scientist, and the “core R&D personnel came from universities and research institutes such as the Chinese Academy of Sciences, Harbin Institute of Technology, and Beijing University of Posts and Telecommunications.” Much of this talent came from MESA—for example, Zheng Chao served as CTO. Attentive readers will notice that many mentors and students from the MESA timeline appear in the leaked Geedge company git commits.
5. Analysis of Non–Source Code Files
The non–source-code portion of the leaked files has already been analyzed in detail by multiple professional teams. Below are David Fifield’s notes on related media reports and technical write-ups. Please note that the source-code portion of the leak has not yet been analyzed:

David Fifield’s notes on the related media reports
David Fifield’s notes on the technical write-ups

6. Analysis of Source Code Files
The source-code portion of the leaked files has not yet been carefully analyzed. This leak is significant and far-reaching. Given the large volume of material, GFW Report will continue to update our analysis and findings on the current page as well as on Net4People.

This report was first published on GFW Report. We also actively updated our analysis and findings on Net4People.
We encourage you to share questions, comments, analysis, or additional evidence on this topic, either publicly or privately. Our private contact information can be found in the footer of the GFW Report website.


						
						
						










						
					]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Recreating the US/* time zone situation]]></title>
            <link>https://rachelbythebay.com/w/2025/09/12/tz/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45233237</guid>
        </item>
        <item>
            <title><![CDATA[486Tang – 486 on a credit-card-sized FPGA board]]></title>
            <link>https://nand2mario.github.io/posts/2025/486tang_486_on_a_credit_card_size_fpga_board/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45232565</guid>
            <description><![CDATA[Yesterday I released 486Tang v0.1 on GitHub. It’s a port of the ao486 MiSTer PC core to the Sipeed Tang Console 138K FPGA. I’ve been trying to get an x86 core running on the Tang for a while. As far as I know, this is the first time ao486 has been ported to a non-Altera FPGA. Here’s a short write‑up of the project.]]></description>
            <content:encoded><![CDATA[Yesterday I released 486Tang v0.1 on GitHub. It’s a port of the ao486 MiSTer PC core to the Sipeed Tang Console 138K FPGA. I’ve been trying to get an x86 core running on the Tang for a while. As far as I know, this is the first time ao486 has been ported to a non-Altera FPGA. Here’s a short write‑up of the project.Thanks to everyone coming from Hacker News! If 486Tang caught your eye, I share progress updates and related projects over on X.486Tang ArchitectureEvery FPGA board is a little different. Porting a core means moving pieces around and rewiring things to fit. Here are the major components in 486Tang:Compared to ao486 on MiSTer, there are a few major differences:Switching to SDRAM for main memory. The MiSTer core uses DDR3 as main memory. Obviously, at the time of the 80486, DDR didn’t exist, so SDRAM is a natural fit. I also wanted to dedicate DDR3 to the framebuffer; time‑multiplexing it would have been complicated. So SDRAM became the main memory and DDR3 the framebuffer. The SDRAM on Tang is 16‑bit wide while ao486 expects 32‑bit accesses, which would normally mean one 32‑bit word every two cycles. I mitigated this by running the SDRAM logic at 2× the system clock so a 32‑bit word can be read or written every CPU cycle (“double‑pumping” the memory).SD‑backed IDE. On MiSTer, the core forwards IDE requests to the ARM HPS over a fast HPS‑FPGA link; the HPS then accesses a VHD image. Tang doesn’t have a comparable high‑speed MCU‑to‑FPGA interface—only a feeble UART—so I moved disk storage into the SD card and let the FPGA access it directly.Boot‑loading module. A PC needs several things to boot: BIOS, VGA BIOS, CMOS settings, and IDE IDENTIFY data (512 bytes). Since I didn’t rely on an MCU for disk data, I stored all of these in the first 128 KB of the SD card. A small boot loader module reads them into main memory and IDE, and then releases the CPU when everything is ready.System bring-up with the help of a whole-system simulatorAfter restructuring the system, the main challenge was bringing it up to a DOS prompt. A 486 PC is complex—CPU and peripherals—more so than the game consoles I’ve worked on. The ao486 CPU alone is >25K lines of Verilog, versus a few K for older cores like M68K. Debugging on hardware was painful: GAO builds took 10+ minutes and there were many more signals to probe. Without a good plan, it would be unmanageable and bugs could take days to isolate—not viable for a hobby project.My solution was Verilator for subsystem and whole‑system simulation. The codebase is relatively mature, so I skipped per‑module unit tests and focused on simulating subsystems like VGA and a full boot to DOS. Verilator is fast enough to reach a DOS prompt in a few minutes—an order of magnitude better if you factor in the complete waveforms you get in simulation. The trick, then, is surfacing useful progress and error signals. A few simple instrumentation hooks were enough for me:Bochs BIOS can print debug strings to port 0x8888 in debug builds. I intercept and print these (the yellow messages in the simulator). The same path exists on hardware—the CPU forwards them over UART—so BIOS issues show up immediately without waiting for a GAO build.Subsystem‑scoped tracing. For Sound Blaster, IDE, etc., I added --sound, --ide flags to trace I/O operations and key state changes. This is much faster than editing Verilog or using GAO.Bochs BIOS assembly listings are invaluable. I initially used a manual disassembly—old console habits—without symbols, which was painful. Rebuilding Bochs and using the official listings solved that.A lot of the bugs were in the new glue I added, as expected. ao486 itself is mature. Still, a few issues only showed up on this toolchain/hardware, mostly due to toolchain behavior differences. In one case a variable meant to be static behaved like an automatic variable and didn’t retain state across invocations, so a CE pulse never occurred. Buried deep, it took a while to find.Here’s a simulation session. On the left the simulated 486 screen. On the right is the simulator terminal output. You can see the green VGA output and yellow debug output, along with other events like INT 15h and video VSYNCs.Performance optimizationsWith simulation help, the core ran on Tang Console—just not fast. The Gowin GW5A isn’t a particularly fast FPGA. Initial benchmarks put it around a 25 MHz 80386.The main obstacle to clock speed is long combinational paths. When you find a critical path, you either shorten it or pipeline it by inserting registers—both risks bugs. A solid test suite is essential; I used test386.asm to validate changes.Here are a few concrete wins:Reset tree and fan-out reduction. Gowin’s tools didn’t replicate resets aggressively enough (even with “Place → Replicate Resources”). One reset net had >5,000 fan-out, which ballooned delays. Manually replicating the reset and a few other high‑fan-out nets helped a lot.Instruction fetch optimization. A long combinational chain sat in the decode/fetch interface. In decoder_regs.v, the number of bytes the fetcher may accept was computed using the last decoded instruction’s length:reg [3:0] decoder_count;
assign acceptable_1     = 4'd12 - decoder_count + consume_count;
always @(posedge clk) begin
  ...
  decoder_count <= after_consume_count + accepted;
end
Here, 12 is the buffer size, decoder_count is the current occupancy, and consume_count is the length of the outgoing instruction. Reasonable—but computing consume_count (opcode, ModR/M, etc.) was on the Fmax‑limiting path. By the way, this is one of several well-known problems of the x86 - variable length instructions complicating decoding, another is complex address modes and “effective address” calculation.The fix was to drop the dependency on consume_count:assign acceptable_1    = 4'd12 - decoder_count;
This may cause the fetcher to “under‑fetch” for one cycle because the outgoing instruction’s space isn’t reclaimed immediately. But decoder_count updates next cycle, reclaiming the space. With a 12‑byte buffer, the CPI impact was negligible and Fmax improved measurably on this board.TLB optimization. The Translation Lookaside Buffer (TLB) is a small cache that translates virtual to physical addresses. ao486 uses a 32‑entry fully‑associative TLB with a purely combinational read path—zero extra cycles, but a long path on every memory access (code and data).DOS workloads barely stress the TLB; even many 386 extenders use a flat model. As a first step I converted the TLB to 4‑way set‑associative. That’s simpler and already slightly faster than fully‑associative for these workloads. There’s room to optimize further since the long combinational path rarely helps.A rough v0.1 end‑to‑end result: about +35% per Landmark 6 benchmarks, reaching roughly 486SX‑20 territory.ReflectionsHere are a few reflections after the port:Clock speed scaling. I appreciate the lure of the megahertz race now. Scaling the whole system clock was the most effective lever—more so than extra caches or deeper pipelines at this stage. Up to ~200–300 MHz, CPU, memory, and I/O can often scale together. After that, memory latency dominates, caches grow deeper, and once clock speeds stop increasing, multiprocessing takes over—the story of the 2000s.x86 vs. ARM. Working with ao486 deepened my respect for x86’s complexity. John Crawford’s 1990 paper “The i486 CPU: Executing Instructions in One Clock Cycle” is a great read; it argues convincingly against scrapping x86 for a new RISC ISA given the software base (10K+ apps then). Compatibility was the right bet, but the baggage is real. By contrast, last year’s ARM7‑based GBATang felt refreshingly simple: fixed‑length 32‑bit instructions, saner addressing, and competitive performance. You can’t have your cake and eat it.So there you have it—that’s 486Tang in v0.1. Thanks for reading, and see you next time.]]></content:encoded>
        </item>
    </channel>
</rss>