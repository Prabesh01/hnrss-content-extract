<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Fri, 29 Aug 2025 20:09:13 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[The No-CPU Amiga Demo Challenge]]></title>
            <link>https://github.com/askeksa/NoCpuChallenge</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45068268</guid>
            <description><![CDATA[The No-CPU Amiga Demo Challenge. Contribute to askeksa/NoCpuChallenge development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[The No-CPU Amiga Demo Challenge
This is an open challenge to create demos that run entirely on the Amiga custom chips without involving the CPU.
This repository contains the rules of the challenge and a runner application for launching no-CPU demos. This is intended as a standard specification of the no-CPU platform for demo competitions.
There will be a dedicated no-CPU Amiga demo competition at Gerp 2026, January 23-25, 2026. In addition, this is an ongoing challenge — an invitation to explore a different kind of demo platform.
An invitation demo — itself a no-CPU demo — was released at Evoke 2025. The full source code for the demo is available here.
Whenever you release a no-CPU demo, you are encouraged to write a comment about it on the demo announcement issue.
There's also a FAQ.
Background
The Amiga custom chips (affectionately named Alice, Lisa and Paula in the AGA version of the chipset) were remarkably powerful for their time, enabling the Amiga computers — with their modestly-powered CPUs — to perform graphical and musical feats that required heavy computation on most contemporary platforms.
This challenge aims to discover just how powerful these chips really are by exploring what they can do completely on their own, without the CPU even telling them what to do.
There have been several demo competitions in the past with a technical theme. Examples include Atari zero bitplane, Atari mixed-resolution, C64 only sprites and C64 border only. This is a similar idea for the Amiga — no CPU, custom chips only.
Technical details
A no-CPU demo takes the form of a raw memory image that specifies the initial contents of chip memory. Together with the initial state of the hardware registers (specified below) this memory image fully defines the demo.
The memory image is loaded into memory by a runner application, which serves as the demo executable. You can use the runner as is or modify it to your liking, but in order to qualify as a no-CPU demo according to this challenge, your chip memory image has to work with the official runner (with the same behavior).
The maximum size of the chip memory image depends on the targeted Amiga chipset: 512k for OCS, 1MB for ECS (or OCS with ECS Agnus and 512k expansion, likely the most common Amiga 500 configuration), and 2MB for AGA.
The audio filter is disabled. Since the filter is controlled via the CIA registers, which the copper does not have access to, the demo does not have the option of enabling the filter.
The initial hardware register contents are as follows. Registers with ECS/AGA specific bits are generally initialized to their OCS defaults. This makes it easier to make a demo targeting OCS without worrying about AGA compatibility (as long as you are not using incompatible features, such as the 7 bitplane trick).



Register
Address
Value
Comment




VPOSW
$dff02a
$8000
Long frames


COPCON
$dff02e
$0002
Copper danger flag set


COP1LC
$dff080
$000000
Copper initially starts at address 0


DMACON
$dff096
$87c0
Bitplane, copper and blitter DMA enabled, sprite DMA disabled, Blitter Nasty set


ADKCON
$dff09e
$xx00
All modulation disabled


BPLCON0
$dff100
$0200
OCS default


BPLCON1
$dff102
$0000
OCS default


BPLCON2
$dff104
$0024
OCS default


BPLCON3
$dff106
$0c00
OCS default


BPLCON4
$dff10c
$0011
OCS default


COLOR00
$dff180
$000
Black background


BEAMCON0
$dff1dc
$0020
PAL


FMODE
$dff1fc
$0000
OCS default



The values of all other registers are undefined.
The demo can signal that it has ended by clearing the Blitter Nasty flag (i.e. by executing the copper instruction $0096,$0400). Depending on the hardware configuration, the runner may not actually be able to exit back to the OS, so the demo should still maintain a valid display.
Feedback
If you have questions or comments, you are welcome to open an issue. I am particularly interested in feedback in these areas:

If there is something in the rules or the runner that you think puts undue limits on what no-CPU demos can do under this formalism.
If you find a security hole in the runner sandbox, enabling a demo to reactivate the CPU.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How did .agakhan, .ismaili and .imamat get their own TLDs?]]></title>
            <link>https://data.iana.org/TLD/tlds-alpha-by-domain.txt</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45068215</guid>
            <content:encoded><![CDATA[# Version 2025082900, Last Updated Fri Aug 29 07:07:01 2025 UTC
AAA
AARP
ABB
ABBOTT
ABBVIE
ABC
ABLE
ABOGADO
ABUDHABI
AC
ACADEMY
ACCENTURE
ACCOUNTANT
ACCOUNTANTS
ACO
ACTOR
AD
ADS
ADULT
AE
AEG
AERO
AETNA
AF
AFL
AFRICA
AG
AGAKHAN
AGENCY
AI
AIG
AIRBUS
AIRFORCE
AIRTEL
AKDN
AL
ALIBABA
ALIPAY
ALLFINANZ
ALLSTATE
ALLY
ALSACE
ALSTOM
AM
AMAZON
AMERICANEXPRESS
AMERICANFAMILY
AMEX
AMFAM
AMICA
AMSTERDAM
ANALYTICS
ANDROID
ANQUAN
ANZ
AO
AOL
APARTMENTS
APP
APPLE
AQ
AQUARELLE
AR
ARAB
ARAMCO
ARCHI
ARMY
ARPA
ART
ARTE
AS
ASDA
ASIA
ASSOCIATES
AT
ATHLETA
ATTORNEY
AU
AUCTION
AUDI
AUDIBLE
AUDIO
AUSPOST
AUTHOR
AUTO
AUTOS
AW
AWS
AX
AXA
AZ
AZURE
BA
BABY
BAIDU
BANAMEX
BAND
BANK
BAR
BARCELONA
BARCLAYCARD
BARCLAYS
BAREFOOT
BARGAINS
BASEBALL
BASKETBALL
BAUHAUS
BAYERN
BB
BBC
BBT
BBVA
BCG
BCN
BD
BE
BEATS
BEAUTY
BEER
BERLIN
BEST
BESTBUY
BET
BF
BG
BH
BHARTI
BI
BIBLE
BID
BIKE
BING
BINGO
BIO
BIZ
BJ
BLACK
BLACKFRIDAY
BLOCKBUSTER
BLOG
BLOOMBERG
BLUE
BM
BMS
BMW
BN
BNPPARIBAS
BO
BOATS
BOEHRINGER
BOFA
BOM
BOND
BOO
BOOK
BOOKING
BOSCH
BOSTIK
BOSTON
BOT
BOUTIQUE
BOX
BR
BRADESCO
BRIDGESTONE
BROADWAY
BROKER
BROTHER
BRUSSELS
BS
BT
BUILD
BUILDERS
BUSINESS
BUY
BUZZ
BV
BW
BY
BZ
BZH
CA
CAB
CAFE
CAL
CALL
CALVINKLEIN
CAM
CAMERA
CAMP
CANON
CAPETOWN
CAPITAL
CAPITALONE
CAR
CARAVAN
CARDS
CARE
CAREER
CAREERS
CARS
CASA
CASE
CASH
CASINO
CAT
CATERING
CATHOLIC
CBA
CBN
CBRE
CC
CD
CENTER
CEO
CERN
CF
CFA
CFD
CG
CH
CHANEL
CHANNEL
CHARITY
CHASE
CHAT
CHEAP
CHINTAI
CHRISTMAS
CHROME
CHURCH
CI
CIPRIANI
CIRCLE
CISCO
CITADEL
CITI
CITIC
CITY
CK
CL
CLAIMS
CLEANING
CLICK
CLINIC
CLINIQUE
CLOTHING
CLOUD
CLUB
CLUBMED
CM
CN
CO
COACH
CODES
COFFEE
COLLEGE
COLOGNE
COM
COMMBANK
COMMUNITY
COMPANY
COMPARE
COMPUTER
COMSEC
CONDOS
CONSTRUCTION
CONSULTING
CONTACT
CONTRACTORS
COOKING
COOL
COOP
CORSICA
COUNTRY
COUPON
COUPONS
COURSES
CPA
CR
CREDIT
CREDITCARD
CREDITUNION
CRICKET
CROWN
CRS
CRUISE
CRUISES
CU
CUISINELLA
CV
CW
CX
CY
CYMRU
CYOU
CZ
DAD
DANCE
DATA
DATE
DATING
DATSUN
DAY
DCLK
DDS
DE
DEAL
DEALER
DEALS
DEGREE
DELIVERY
DELL
DELOITTE
DELTA
DEMOCRAT
DENTAL
DENTIST
DESI
DESIGN
DEV
DHL
DIAMONDS
DIET
DIGITAL
DIRECT
DIRECTORY
DISCOUNT
DISCOVER
DISH
DIY
DJ
DK
DM
DNP
DO
DOCS
DOCTOR
DOG
DOMAINS
DOT
DOWNLOAD
DRIVE
DTV
DUBAI
DUNLOP
DUPONT
DURBAN
DVAG
DVR
DZ
EARTH
EAT
EC
ECO
EDEKA
EDU
EDUCATION
EE
EG
EMAIL
EMERCK
ENERGY
ENGINEER
ENGINEERING
ENTERPRISES
EPSON
EQUIPMENT
ER
ERICSSON
ERNI
ES
ESQ
ESTATE
ET
EU
EUROVISION
EUS
EVENTS
EXCHANGE
EXPERT
EXPOSED
EXPRESS
EXTRASPACE
FAGE
FAIL
FAIRWINDS
FAITH
FAMILY
FAN
FANS
FARM
FARMERS
FASHION
FAST
FEDEX
FEEDBACK
FERRARI
FERRERO
FI
FIDELITY
FIDO
FILM
FINAL
FINANCE
FINANCIAL
FIRE
FIRESTONE
FIRMDALE
FISH
FISHING
FIT
FITNESS
FJ
FK
FLICKR
FLIGHTS
FLIR
FLORIST
FLOWERS
FLY
FM
FO
FOO
FOOD
FOOTBALL
FORD
FOREX
FORSALE
FORUM
FOUNDATION
FOX
FR
FREE
FRESENIUS
FRL
FROGANS
FRONTIER
FTR
FUJITSU
FUN
FUND
FURNITURE
FUTBOL
FYI
GA
GAL
GALLERY
GALLO
GALLUP
GAME
GAMES
GAP
GARDEN
GAY
GB
GBIZ
GD
GDN
GE
GEA
GENT
GENTING
GEORGE
GF
GG
GGEE
GH
GI
GIFT
GIFTS
GIVES
GIVING
GL
GLASS
GLE
GLOBAL
GLOBO
GM
GMAIL
GMBH
GMO
GMX
GN
GODADDY
GOLD
GOLDPOINT
GOLF
GOO
GOODYEAR
GOOG
GOOGLE
GOP
GOT
GOV
GP
GQ
GR
GRAINGER
GRAPHICS
GRATIS
GREEN
GRIPE
GROCERY
GROUP
GS
GT
GU
GUCCI
GUGE
GUIDE
GUITARS
GURU
GW
GY
HAIR
HAMBURG
HANGOUT
HAUS
HBO
HDFC
HDFCBANK
HEALTH
HEALTHCARE
HELP
HELSINKI
HERE
HERMES
HIPHOP
HISAMITSU
HITACHI
HIV
HK
HKT
HM
HN
HOCKEY
HOLDINGS
HOLIDAY
HOMEDEPOT
HOMEGOODS
HOMES
HOMESENSE
HONDA
HORSE
HOSPITAL
HOST
HOSTING
HOT
HOTELS
HOTMAIL
HOUSE
HOW
HR
HSBC
HT
HU
HUGHES
HYATT
HYUNDAI
IBM
ICBC
ICE
ICU
ID
IE
IEEE
IFM
IKANO
IL
IM
IMAMAT
IMDB
IMMO
IMMOBILIEN
IN
INC
INDUSTRIES
INFINITI
INFO
ING
INK
INSTITUTE
INSURANCE
INSURE
INT
INTERNATIONAL
INTUIT
INVESTMENTS
IO
IPIRANGA
IQ
IR
IRISH
IS
ISMAILI
IST
ISTANBUL
IT
ITAU
ITV
JAGUAR
JAVA
JCB
JE
JEEP
JETZT
JEWELRY
JIO
JLL
JM
JMP
JNJ
JO
JOBS
JOBURG
JOT
JOY
JP
JPMORGAN
JPRS
JUEGOS
JUNIPER
KAUFEN
KDDI
KE
KERRYHOTELS
KERRYPROPERTIES
KFH
KG
KH
KI
KIA
KIDS
KIM
KINDLE
KITCHEN
KIWI
KM
KN
KOELN
KOMATSU
KOSHER
KP
KPMG
KPN
KR
KRD
KRED
KUOKGROUP
KW
KY
KYOTO
KZ
LA
LACAIXA
LAMBORGHINI
LAMER
LAND
LANDROVER
LANXESS
LASALLE
LAT
LATINO
LATROBE
LAW
LAWYER
LB
LC
LDS
LEASE
LECLERC
LEFRAK
LEGAL
LEGO
LEXUS
LGBT
LI
LIDL
LIFE
LIFEINSURANCE
LIFESTYLE
LIGHTING
LIKE
LILLY
LIMITED
LIMO
LINCOLN
LINK
LIVE
LIVING
LK
LLC
LLP
LOAN
LOANS
LOCKER
LOCUS
LOL
LONDON
LOTTE
LOTTO
LOVE
LPL
LPLFINANCIAL
LR
LS
LT
LTD
LTDA
LU
LUNDBECK
LUXE
LUXURY
LV
LY
MA
MADRID
MAIF
MAISON
MAKEUP
MAN
MANAGEMENT
MANGO
MAP
MARKET
MARKETING
MARKETS
MARRIOTT
MARSHALLS
MATTEL
MBA
MC
MCKINSEY
MD
ME
MED
MEDIA
MEET
MELBOURNE
MEME
MEMORIAL
MEN
MENU
MERCKMSD
MG
MH
MIAMI
MICROSOFT
MIL
MINI
MINT
MIT
MITSUBISHI
MK
ML
MLB
MLS
MM
MMA
MN
MO
MOBI
MOBILE
MODA
MOE
MOI
MOM
MONASH
MONEY
MONSTER
MORMON
MORTGAGE
MOSCOW
MOTO
MOTORCYCLES
MOV
MOVIE
MP
MQ
MR
MS
MSD
MT
MTN
MTR
MU
MUSEUM
MUSIC
MV
MW
MX
MY
MZ
NA
NAB
NAGOYA
NAME
NAVY
NBA
NC
NE
NEC
NET
NETBANK
NETFLIX
NETWORK
NEUSTAR
NEW
NEWS
NEXT
NEXTDIRECT
NEXUS
NF
NFL
NG
NGO
NHK
NI
NICO
NIKE
NIKON
NINJA
NISSAN
NISSAY
NL
NO
NOKIA
NORTON
NOW
NOWRUZ
NOWTV
NP
NR
NRA
NRW
NTT
NU
NYC
NZ
OBI
OBSERVER
OFFICE
OKINAWA
OLAYAN
OLAYANGROUP
OLLO
OM
OMEGA
ONE
ONG
ONL
ONLINE
OOO
OPEN
ORACLE
ORANGE
ORG
ORGANIC
ORIGINS
OSAKA
OTSUKA
OTT
OVH
PA
PAGE
PANASONIC
PARIS
PARS
PARTNERS
PARTS
PARTY
PAY
PCCW
PE
PET
PF
PFIZER
PG
PH
PHARMACY
PHD
PHILIPS
PHONE
PHOTO
PHOTOGRAPHY
PHOTOS
PHYSIO
PICS
PICTET
PICTURES
PID
PIN
PING
PINK
PIONEER
PIZZA
PK
PL
PLACE
PLAY
PLAYSTATION
PLUMBING
PLUS
PM
PN
PNC
POHL
POKER
POLITIE
PORN
POST
PR
PRAXI
PRESS
PRIME
PRO
PROD
PRODUCTIONS
PROF
PROGRESSIVE
PROMO
PROPERTIES
PROPERTY
PROTECTION
PRU
PRUDENTIAL
PS
PT
PUB
PW
PWC
PY
QA
QPON
QUEBEC
QUEST
RACING
RADIO
RE
READ
REALESTATE
REALTOR
REALTY
RECIPES
RED
REDUMBRELLA
REHAB
REISE
REISEN
REIT
RELIANCE
REN
RENT
RENTALS
REPAIR
REPORT
REPUBLICAN
REST
RESTAURANT
REVIEW
REVIEWS
REXROTH
RICH
RICHARDLI
RICOH
RIL
RIO
RIP
RO
ROCKS
RODEO
ROGERS
ROOM
RS
RSVP
RU
RUGBY
RUHR
RUN
RW
RWE
RYUKYU
SA
SAARLAND
SAFE
SAFETY
SAKURA
SALE
SALON
SAMSCLUB
SAMSUNG
SANDVIK
SANDVIKCOROMANT
SANOFI
SAP
SARL
SAS
SAVE
SAXO
SB
SBI
SBS
SC
SCB
SCHAEFFLER
SCHMIDT
SCHOLARSHIPS
SCHOOL
SCHULE
SCHWARZ
SCIENCE
SCOT
SD
SE
SEARCH
SEAT
SECURE
SECURITY
SEEK
SELECT
SENER
SERVICES
SEVEN
SEW
SEX
SEXY
SFR
SG
SH
SHANGRILA
SHARP
SHELL
SHIA
SHIKSHA
SHOES
SHOP
SHOPPING
SHOUJI
SHOW
SI
SILK
SINA
SINGLES
SITE
SJ
SK
SKI
SKIN
SKY
SKYPE
SL
SLING
SM
SMART
SMILE
SN
SNCF
SO
SOCCER
SOCIAL
SOFTBANK
SOFTWARE
SOHU
SOLAR
SOLUTIONS
SONG
SONY
SOY
SPA
SPACE
SPORT
SPOT
SR
SRL
SS
ST
STADA
STAPLES
STAR
STATEBANK
STATEFARM
STC
STCGROUP
STOCKHOLM
STORAGE
STORE
STREAM
STUDIO
STUDY
STYLE
SU
SUCKS
SUPPLIES
SUPPLY
SUPPORT
SURF
SURGERY
SUZUKI
SV
SWATCH
SWISS
SX
SY
SYDNEY
SYSTEMS
SZ
TAB
TAIPEI
TALK
TAOBAO
TARGET
TATAMOTORS
TATAR
TATTOO
TAX
TAXI
TC
TCI
TD
TDK
TEAM
TECH
TECHNOLOGY
TEL
TEMASEK
TENNIS
TEVA
TF
TG
TH
THD
THEATER
THEATRE
TIAA
TICKETS
TIENDA
TIPS
TIRES
TIROL
TJ
TJMAXX
TJX
TK
TKMAXX
TL
TM
TMALL
TN
TO
TODAY
TOKYO
TOOLS
TOP
TORAY
TOSHIBA
TOTAL
TOURS
TOWN
TOYOTA
TOYS
TR
TRADE
TRADING
TRAINING
TRAVEL
TRAVELERS
TRAVELERSINSURANCE
TRUST
TRV
TT
TUBE
TUI
TUNES
TUSHU
TV
TVS
TW
TZ
UA
UBANK
UBS
UG
UK
UNICOM
UNIVERSITY
UNO
UOL
UPS
US
UY
UZ
VA
VACATIONS
VANA
VANGUARD
VC
VE
VEGAS
VENTURES
VERISIGN
VERSICHERUNG
VET
VG
VI
VIAJES
VIDEO
VIG
VIKING
VILLAS
VIN
VIP
VIRGIN
VISA
VISION
VIVA
VIVO
VLAANDEREN
VN
VODKA
VOLVO
VOTE
VOTING
VOTO
VOYAGE
VU
WALES
WALMART
WALTER
WANG
WANGGOU
WATCH
WATCHES
WEATHER
WEATHERCHANNEL
WEBCAM
WEBER
WEBSITE
WED
WEDDING
WEIBO
WEIR
WF
WHOSWHO
WIEN
WIKI
WILLIAMHILL
WIN
WINDOWS
WINE
WINNERS
WME
WOLTERSKLUWER
WOODSIDE
WORK
WORKS
WORLD
WOW
WS
WTC
WTF
XBOX
XEROX
XIHUAN
XIN
XN--11B4C3D
XN--1CK2E1B
XN--1QQW23A
XN--2SCRJ9C
XN--30RR7Y
XN--3BST00M
XN--3DS443G
XN--3E0B707E
XN--3HCRJ9C
XN--3PXU8K
XN--42C2D9A
XN--45BR5CYL
XN--45BRJ9C
XN--45Q11C
XN--4DBRK0CE
XN--4GBRIM
XN--54B7FTA0CC
XN--55QW42G
XN--55QX5D
XN--5SU34J936BGSG
XN--5TZM5G
XN--6FRZ82G
XN--6QQ986B3XL
XN--80ADXHKS
XN--80AO21A
XN--80AQECDR1A
XN--80ASEHDB
XN--80ASWG
XN--8Y0A063A
XN--90A3AC
XN--90AE
XN--90AIS
XN--9DBQ2A
XN--9ET52U
XN--9KRT00A
XN--B4W605FERD
XN--BCK1B9A5DRE4C
XN--C1AVG
XN--C2BR7G
XN--CCK2B3B
XN--CCKWCXETD
XN--CG4BKI
XN--CLCHC0EA0B2G2A9GCD
XN--CZR694B
XN--CZRS0T
XN--CZRU2D
XN--D1ACJ3B
XN--D1ALF
XN--E1A4C
XN--ECKVDTC9D
XN--EFVY88H
XN--FCT429K
XN--FHBEI
XN--FIQ228C5HS
XN--FIQ64B
XN--FIQS8S
XN--FIQZ9S
XN--FJQ720A
XN--FLW351E
XN--FPCRJ9C3D
XN--FZC2C9E2C
XN--FZYS8D69UVGM
XN--G2XX48C
XN--GCKR3F0F
XN--GECRJ9C
XN--GK3AT1E
XN--H2BREG3EVE
XN--H2BRJ9C
XN--H2BRJ9C8C
XN--HXT814E
XN--I1B6B1A6A2E
XN--IMR513N
XN--IO0A7I
XN--J1AEF
XN--J1AMH
XN--J6W193G
XN--JLQ480N2RG
XN--JVR189M
XN--KCRX77D1X4A
XN--KPRW13D
XN--KPRY57D
XN--KPUT3I
XN--L1ACC
XN--LGBBAT1AD8J
XN--MGB9AWBF
XN--MGBA3A3EJT
XN--MGBA3A4F16A
XN--MGBA7C0BBN0A
XN--MGBAAM7A8H
XN--MGBAB2BD
XN--MGBAH1A3HJKRD
XN--MGBAI9AZGQP6J
XN--MGBAYH7GPA
XN--MGBBH1A
XN--MGBBH1A71E
XN--MGBC0A9AZCG
XN--MGBCA7DZDO
XN--MGBCPQ6GPA1A
XN--MGBERP4A5D4AR
XN--MGBGU82A
XN--MGBI4ECEXP
XN--MGBPL2FH
XN--MGBT3DHD
XN--MGBTX2B
XN--MGBX4CD0AB
XN--MIX891F
XN--MK1BU44C
XN--MXTQ1M
XN--NGBC5AZD
XN--NGBE9E0A
XN--NGBRX
XN--NODE
XN--NQV7F
XN--NQV7FS00EMA
XN--NYQY26A
XN--O3CW4H
XN--OGBPF8FL
XN--OTU796D
XN--P1ACF
XN--P1AI
XN--PGBS0DH
XN--PSSY2U
XN--Q7CE6A
XN--Q9JYB4C
XN--QCKA1PMC
XN--QXA6A
XN--QXAM
XN--RHQV96G
XN--ROVU88B
XN--RVC1E0AM3E
XN--S9BRJ9C
XN--SES554G
XN--T60B56A
XN--TCKWE
XN--TIQ49XQYJ
XN--UNUP4Y
XN--VERMGENSBERATER-CTB
XN--VERMGENSBERATUNG-PWB
XN--VHQUV
XN--VUQ861B
XN--W4R85EL8FHU5DNRA
XN--W4RS40L
XN--WGBH1C
XN--WGBL6A
XN--XHQ521B
XN--XKC2AL3HYE2A
XN--XKC2DL3A5EE0H
XN--Y9A3AQ
XN--YFRO4I67O
XN--YGBI2AMMX
XN--ZFR164B
XXX
XYZ
YACHTS
YAHOO
YAMAXUN
YANDEX
YE
YODOBASHI
YOGA
YOKOHAMA
YOU
YOUTUBE
YT
YUN
ZA
ZAPPOS
ZARA
ZERO
ZIP
ZM
ZONE
ZUERICH
ZW
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Do the simplest thing that could possibly work]]></title>
            <link>https://www.seangoedecke.com/the-simplest-thing-that-could-possibly-work/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45068091</guid>
            <description><![CDATA[When designing software systems, do the simplest thing that could possibly work. It’s surprising how far you can take this piece of advice. I genuinely think…]]></description>
            <content:encoded><![CDATA[When designing software systems, do the simplest thing that could possibly work.
It’s surprising how far you can take this piece of advice. I genuinely think you can do this all the time. You can follow this approach for fixing bugs, for maintaining existing systems, and for architecting new ones.
A lot of engineers design by trying to think of the “ideal” system: something well-factored, near-infinitely scalable, elegantly distributed, and so on. I think this is entirely the wrong way to go about software design. Instead, spend that time understanding the current system deeply, then do the simplest thing that could possibly work.
Simple can be underwhelming
System design requires competence with a lot of different tools: app servers, proxies, databases, caches, queues, and so on. As they gain familiarity with these tools, junior engineers naturally want to use them. It’s fun to construct systems out of many different components! And it feels very satisfying to draw boxes and arrows on a whiteboard - like you’re doing real engineering.
However, as with many skills, real mastery often involves learning when to do less, not more. The fight between an ambitious novice and an old master is a well-worn cliche in martial arts movies: the novice is a blur of motion, flipping and spinning. The master is mostly still. But somehow the novice’s attacks never seem to quite connect, and the master’s eventual attack is decisive.
In software, this means that great software design looks underwhelming. It doesn’t look like anything much is happening at all. You can tell you’re in the presence of great software design because you start having thoughts like “oh, I didn’t realise the problem was that easy” or “oh nice, you don’t actually have to do anything difficult”.
Unicorn is great software design, because it delivers all the most important guarantees in a web server (request isolation, horizontal scaling, crash recovery) by leaning on Unix primitives1. The industry-standard Rails REST API is great software design, because it gives you exactly what you need for a CRUD app in the most boring way possible. I don’t think any of these are impressive software. But they’re impressive feats of design, because they do the simplest thing that could possibly work.
You should do that too! Suppose you’ve got a Golang application that you want to add some kind of rate limiting to. What’s the simplest thing that could possibly work? Your first idea might be to add some kind of persistent storage (say, Redis) to track per-user request counts with a leaky-bucket algorithm. That would work! But do you need a whole new piece of infrastructure? What if instead you kept those per-user request counts in-memory? Sure, you’d lose some rate limiting data when the application is restarted, but does that matter? Actually, are you sure your edge proxy2 doesn’t support rate limiting already? Could you just write a couple of lines in a config file instead of implementing the feature at all?
Maybe your edge proxy doesn’t support rate limiting. Maybe you can’t track it in-memory because you have too many server instances running in parallel, so the tightest rate limit you could enforce that way is too wide. Maybe it’s a dealbreaker if you ever lose rate limiting data, because people are hammering your service that hard. In that case, the simplest thing that could possibly work is adding persistent storage, so you should go and do that. But if you could do one of the easier approaches, wouldn’t you want to?
You really can build a whole application from scratch this way: start with the absolute simplest thing, and then only extend it when you have new requirements that force you to. It sounds silly, but it works. Think of it as taking YAGNI as the ultimate design principle: above single-responsibility, above choosing the best tool for the job, and above “good design”.
What’s wrong with doing the simplest thing?
Of course, there are three big problems with always doing the simplest thing that could possibly work. The first is that, by not anticipating future requirements, you end up with an inflexible system or a big ball of mud. The second is that it’s not clear what “simplest” means, so at worst I’m saying “to design well, always do good design”. The third is that you ought to be building systems that can scale, not systems that just work right now. Let’s take those objections in order.
Big balls of mud
To some engineers, “do the simplest thing that could possibly work” sounds like I’m telling them to stop doing engineering. If the simplest thing is usually a quick kludge, does that mean this advice will inevitably lead to a complete mess? We’ve all seen codebases with hacks stacked on top of hacks, and they definitely don’t look like good design.
But are hacks simple? I actually don’t think so. The problem with a hack or a kludge is precisely that it isn’t simple: that it adds complexity to the codebase by introducing another thing you have to always remember. Hacks are just easier to think of. Figuring out the proper fix is hard because it requires having to understand the entire codebase (or large sections of it). In fact, the proper fix is almost always much simpler than the hack.
It is not easy to do the simplest thing that could possibly work. When you’re looking at a problem, the first few solutions that come to mind are unlikely to be the simplest ones. Figuring out the simplest solution requires considering many different approaches. In other words, it requires doing engineering.
What is simplicity?
Engineers disagree a lot about what constitutes simple code. If “simplest” already means “with good design”, is it just a tautology to say “you should do the simplest thing that could possibly work?” In other words, is Unicorn really simpler than Puma3? Is adding in-memory rate limiting really simpler than using Redis? Here’s a rough, intuitive definition of simplicity4:

Simple systems have fewer “moving pieces”: fewer things you have to think about when you’re working with them
Simple systems are less internally-connected. They are composed from components with clear, straightforward interfaces

Unix processes are simpler than threads (and thus Unicorn is simpler than Puma) because processes are less connected: they do not share memory. This makes a lot of sense to me! But I don’t think it gives you the tools to figure out what’s simpler in every case.
What about in-memory rate limiting vs Redis? On the one hand, in-memory is simpler because you don’t have to think about all the things involved in standing up a separate service with persistent memory. On the other hand, Redis is simpler because the rate limiting guarantees it offers are more straightforward - you don’t have to worry about the case where one server instance thinks a user is rate limited and another one doesn’t.
When I’m not sure what “seems” simpler to me, I like to use this tiebreaker: simple systems are stable. If you’re comparing two states of a software system, and one will require more ongoing work if no requirements change, the other one is simpler. Redis must be deployed and maintained, it can have its own incidents, it requires its own monitoring, it requires a separate deployment in any new environments the service finds itself in, and so on. Thus in-memory rate limiting is simpler than Redis5.
Why wouldn’t you want to be scalable?
A certain type of engineer is now screaming to themselves “but in-memory rate limiting won’t scale!” Doing the simplest thing that could possibly work will emphatically not deliver the most web-scale system. It will deliver a system that works well at the current scale. Is this irresponsible engineering?
No. In my view, the cardinal sin of big tech SaaS engineering is an obsession with scale. I’ve seen so much unavoidable pain caused by over-engineering systems to prepare for several orders of magnitude more than the current scale.
The main reason to not try this is that it doesn’t work. In my experience, for any non-trivial codebase, you can’t anticipate how it will behave at several orders of magnitude more traffic, because you don’t know ahead of time where all the bottlenecks are going to be. At most you can try to make sure you’re ready for 2x or 5x the current traffic, and then stand by to deal with problems as they come in.
The other reason not to try this is that it makes your codebase inflexible. It’s fun to decouple your service into two pieces so they can be scaled independently (I have seen this happen maybe ten times, and I have seen them actually be usefully scaled independently maybe once). But that makes certain features very hard to implement, because they now require coordination over the wire. In the worst case, they require transactions over the wire, which is a genuinely hard engineering problem. Most of the time you just don’t have to do any of this!
Final thoughts
The longer I spend working in tech, the less optimistic I become about our collective ability to predict where a system is going. It’s hard enough to get your head around where a system currently is. And in fact, that’s the main practical difficulty in doing good design: getting an accurate big-picture understanding of the system. Most design is done without that understanding, and most design is thus pretty bad.
There are, broadly speaking, two ways to develop software. The first is to predict what your requirements might look like six months or a year from now, and then design the best system for that purpose. The second is to design the best system for what your requirements actually look like right now: in other words, to do the simplest thing that could possibly work.




It’s just Unix sockets and forked processes! I love Unicorn.
↩


Every tech company has some kind of edge proxy.
↩


I do like Puma and think it’s a good web server. There are definitely use cases where you’d pick it over Unicorn (though in those cases I would personally think hard about using a different language than Ruby).
↩


I’m influenced here by Rich Hickey’s great talk Simple Made Easy. I don’t agree with all of it (I think familiarity does in fact contribute to simplicity in practice) but it’s definitely worth watching.
↩


Of course, if the system has to scale horizontally more than a little bit, in-memory rate limiting won’t work and must be replaced with something like Redis. But in my experience a Golang service can scale a lot without having to scale horizontally to more than a handful of replicas.
↩


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Data engineering and software engineering are converging]]></title>
            <link>https://clickhouse.com/blog/eight-principles-of-great-developer-experience-for-data-infrastructure</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45067867</guid>
            <description><![CDATA[Learn the 8 design principals behind MooseStack - an open source developer toolkit for building TypeScript or Python apps on ClickHouse and open-source data infrastructure.]]></description>
            <content:encoded><![CDATA[
TL;DR: · If you’re an engineer building realtime analytics or AI-powered features, you need the right data infrastructure coupled with the right developer experience (DX). · A great DX for data infrastructure should empower both software devs and data engineers, while taking inspiration from the best of modern web development (git-native, local-first, everything as code, CI/CD friendly, etc). · MooseStack by 514 offers a fully open source implementation of a DX layer for ClickHouse.

Data engineering and software engineering are converging.
For years, data infrastructure was built for analysts. Warehouses, lakes, BI dashboards—all SQL-first, point-and-click workflows. But today, analytics isn’t just about reporting or data science. Real-time data is at the center of modern user experiences and AI-readiness. SaaS apps are surfacing analytics and AI directly in their UX to drive adoption, engagement, and retention. Enterprises are accelerating their business with AI-powered automations for faster insights, predictions, and operations.
Engineering teams are on the hook to ship data-backed functionality with the same discipline as any other application code. If you’re coming from the software engineering world, you probably start with a transactional database like Postgres, MySQL or Mongo. The tooling is great, and the developer experience is mature—but those systems are built for transactions, not analytics. As cardinality and scan sizes grow, queries bog down. Dashboards spin. AI chat slows to a crawl.
Alternatively, if you’re coming from the data engineering world, you’re probably on managed analytics platforms like Snowflake, BigQuery, or Databricks. These work well for batch ETL and reporting, but fall short when you need freshness, concurrency, or sub-second response times. They’re also full of rough edges for developers. You don’t get a real local environment. Iteration cycles are slow. They’re just not built for the modern software development lifecycle.
So we’re left with a gap—and it’s two-fold: user experience (UX) and developer experience (DX).

End users want sub-second analytics at application scale. Enter ClickHouse. ClickHouse offers best in class performance on analytical queries—orders of magnitude faster than transactional databases like Postgres, and many times faster and more cost efficient than cloud data warehouses like Snowflake or Databricks. That means snappy dashboards and conversation-speed AI chat for your UX.

Engineers need the same kind of safe, tight iteration loop that’s been taken for granted in web development for twenty years. Interestingly, ClickHouse can run efficiently at any scale, from megabytes to petabytes of data, and can adapt to any type of deployment—from serverless functions, to a container on your laptop, to a cluster of thousands of servers working together. This makes ClickHouse uniquely suited for both a local-first development workflow and massive production scale. But how to build on ClickHouse’s power and flexibility with a full-blown, modern, open source developer experience? Enter MooseStack.

A great data & analytics DX should serve both (1) data engineers leaning into software development best practices, and (2) software engineers leaning into data, analytics and AI. And it should take inspiration from the most innovative tools driving the modern web development experience—like Ruby on Rails, Next.js, TanStack, and Supabase.
In short, a great data & analytics DX should embrace the following core principles:

Git-based version control & governance
Local-first development
Native programming languages (not YAML)
Infrastructure boilerplate abstractions
Horizontal integration, with modularization
Open source native
AI copilot native
Transparent migrations & integrated CI/CD

The remainder of this post explores each of these principles in more detail, while also referencing how they are implemented with MooseStack by 514—an open source developer toolkit for building TypeScript or Python apps on ClickHouse and other open source data infrastructure.
1. Git-based version control and governance 
Version control systems like git are at the heart of the modern software development lifecycle. Make changes, track changes, collaborate on code, etc. This is the norm for any software developer, but not so much with many data & analytics platforms, with cloud-based GUIs and point and click interfaces. And if there is code, it’s not always easy to integrate with git—expecially with browser-based code editors, and heavy-handed cloud-to-local-to-cloud workflows.
A great developer experience should be grounded in a code base that is easily tracked and managed with git.
With MooseStack libraries and tools, you can build your entire user-facing analytics app, or even your data warehouse, in native Typescript or Python, with git integration natively supported - it’s just code.

git-based version control means audit trails for your data contracts

“Data engineering shouldn’t have to trail software development by a decade or more when it comes to developer experience. MooseStack brings the tools and abstractions that you expect from a modern developer framework.”
– Pardhu Gunnam, CEO/Creator of Metaphor Data

The best developer experience for you is in your IDE of choice, not in a browser tab.  Web development figured this out a long time ago. You don’t “yolo” changes directly into a live server. You spin up a dev environment on your laptop that mirrors production. You create a branch, make changes, and immediately see what broke in a live preview of your application. Your build logs tell you if you’ve stranded an import or introduced a syntax error. You have a safe environment to freely experiment and break things, knowing that the worst thing that can happen is your code gets into an error state and you just kill the branch and start a fresh one. By the time you merge, you’ve had multiple layers of validation and review. That workflow gives you confidence. You can see exactly how your changes impact the entire system before they ever hit production.
A great developer experience should provide an isolated, production-like environment to freely experiment and immediately see what breaks in a live preview of your application.
With MooseStack, local development is first-class. “Modern” data platforms tend to be large, distributed, and cloud native—Snowflake and BigQuery won’t run on your laptop. But ClickHouse and other next-gen data infrastructure (like Redpanda, for example) can run locally in a container. MooseStack’s local dev server runs your entire analytics stack in one CLI command: moose dev. Combine that with git-native development, and you’ve got a DX where you can create a branch off main, pull it down, run Moose dev, and all your models running in production are instantly materialized in a local ClickHouse instance for development. Seed it with sample data, and your dev server gives you the full loop—ingest, transform, aggregate, serve—hot-reloaded as you edit code. The same APIs your app calls in production are live in development, so your feature work is always exercising the real data paths and pipelines.

MooseStack’s dev server gives you a local mirror of your production data infrastructure with hot-swapped code changes for your application
In our previous post, we dug into the question, “Does OLAP need an ORM?”. Traditional ORMs can sometimes cause more harm than good, e.g., with leaky abstractions, or by hiding SQL performance implications. But the core idea is worth keeping: modeling tables as objects in application code. That pattern gives you type-safety, IDE auto-completion, and immediate visibility when a change in your schema layer breaks an API in your app layer (or the other way around). In web development, if you change a prop in a React component, your IDE and dev server immediately show you which pages are broken. Analytics deserves the same feedback loop.
For many teams, YAML-based DSLs are the first step toward treating data as code. That’s progress: your schema definitions are at least version-controlled and reviewable, instead of being declared directly into a live database. But YAML is a configuration file format, not a programming language. It can’t express complex business logic—no IF statements, no loops, no variables—so non-trivial transformations end up pushed into shell scripts, SQL fragments, or proprietary templating. The result is fragmentation: schemas live in one place, pipelines in another, and there’s no way to reason about them together at compile time.
A great developer experience should leverage the full capabilities of application programming languages, with schemas represented as native types in the same language where you write your application and pipeline logic.
interface DataModel {
columnName: Key<string>;
	secondColumnName: Date;
}

export const my_table = new OlapTable<DataModel>("table_name")

With MooseStack, everything lives in Typescript or Python: schemas, pipelines, transforms, APIs—all versioned in your repo alongside application logic. Yes, some transformations are still expressed in SQL, but the SQL isn’t floating around as raw strings. It’s written inside language-native templates that reference typed schema objects. Rename a column in your TypeScript interface or Python class, and Moose updates the underlying ClickHouse schema (Moose OLAP) and immediately flags every SQL fragment, stream (Moose Streaming), pipeline (Moose Workflows), or API (Moose APIs) that depends on it. You’re still writing real SQL—but with the safety net and ergonomics of a programming language.
const result = await client.query.execute(sql`
      SELECT 
        ${my_table.columnName} as my_column,
        COUNT(*) as total_records,
      FROM ${my_table} 
      GROUP BY ${my_table.columnName} 
`);

The payoff is that schemas and pipelines evolve together. Changes are surfaced instantly in your IDE and in your dev loop, not hours later in production. You keep SQL where it belongs—as the lingua franca of analytics—but ground it in the same typed codebase as the rest of your application.


“MooseStack abstracts away all the annoying boilerplate, and gives me simple, intuitive primitives to build with, and a local dev server to iterate on.”
– David Der, Chief AI officer, SingleStone

Boilerplate infrastructure code is the worst. You have to get it right, or everything breaks, but it’s hard to get right. And more often than not, there is a best practice way to do it that covers 90%+ of use cases. This is the perfect scenario for abstraction. In modern web development, you don’t configure your router from scratch—you use next.js’s router or TanStack Router, and you use their elegant abstractions. No need to reinvent the wheel every time.
A great developer experience should abstract away commonly used boilerplate code for infrastructure best practices.
Data infrastructure is full of examples like this. Buffering streaming events for batch writes to the database. Runtime data validation and dead letter queueing on data ingestion. Structuring tables for advanced materialized views. MooseStack provides simple abstractions in TypeScript/Python for each of these. So you can focus on the unique business logic of your application, instead of the data infrastructure glue and duct tape.
export const FooPipeline =
 new IngestPipeline<FooDataModel>("myFooPipeline", {
   table: true,
   stream: true,
   api: true,
 });

For example, MooseStack’s IngestPipeline object automatically wires up a complete ingest pipeline, typed to a particular data model. This includes:

An ingest API with runtime data validation, automatic OpenAPI documentation, and optional dead letter queuing
A Redpanda/Kafka streaming buffer with at least once delivery and optional streaming transformations
A ClickHouse table with writes automatically batched to maximize performance



“MooseStack brings together all the modules needed for building end-to-end data services into a simple unified dev framework.”
– Scott Haines, Distinguished Software Engineer, Fortune 100 Brand

Modern web frameworks like Next.js show the power of horizontal integration by bundling routing, rendering, APIs, and deployment into a seamless developer experience. At the same time, tools like TanStack highlight why modularization matters—providing composable, swappable pieces that work across frameworks without lock-in. Data infrastructure tends to be particularly piecemeal, with a sprawling landscape of services surrounding the core database, including streaming, orchestration, connectors, transformations, catalogues, etc.
A great developer experience should leverage integrated workflows for speed, and modular building blocks for long-term flexibility.
MooseStack offers a variety of modules with developer abstractions for all the core parts of a standard analytical backend. These modules can be used independently and swapped out for alternative solutions. For example, you could use the Moose OLAP module to manage your ClickHouse deployment, paired with ClickHouse Cloud’s ClickPipes to bring data in, and FastAPI to layer Python APIs on top. Or if you’ve got an existing ClickHouse cluster, and need to add data from a bespoke source, you could just use the Moose Workflows module to create a custom data connector and pipeline in Typescript. But as you adopt MooseStack across more of your analytical backend, you get the benefits of a unified end-to-end abstraction layer, shared data models and a consistent local development experience.

MooseStack modules and tooling can be used individually, or combined for an end-to-end experience
The modern web development experience is built on open source frameworks and technologies. Open source tooling reduces vendor lock-in, increases trust and security, encourages innovation, and keeps control in the hands of the developer. ClickHouse is, of course, open source. So why would you want to wrap it in a closed-source developer experience that locks you in to a particular vendor?
A great developer experience should be grounded in open source tooling, offering flexibility and transparency.
MooseStack is open source and MIT-licensed, and integrates with the rest of your open source software stack, including:

Data infrastructure: ClickHouse, Kafka, RedPanda, Temporal, Iceberg, Delta Lake, etc
Full stack frameworks: Next.js, Remix, TanStack, etc
Micro frameworks: Flask, fastAPI, Fastify, etc
API standards: OpenAPI, etc
Language Runtimes: Node and Python
Frontend Clients: React, TanStack Query, Streamlit, etc
Transactional ORMs: Prisma, Drizzle, etc
Typing and data validation: Typia, Pydantic, etc
Libraries: all your favorite TS and Python libraries can be imported



“Arming our full stack engineers with MooseStack and Sloan AI agents puts data engineering in the ‘full stack’.”
– C. Rodes Boyd, Bracket Real Estate

Whatever your client of choice, you probably have some kind of copilot helping write code, or even an agent creating entire applications. LLM-powered copilots and agents tend to be pretty good at creating web apps (not perfect of course, but moving quickly in the right direction). The performance here is powered by:

Tons of examples to learn from
Tons of frameworks and abstractions to reduce the complexity and the surface area of interaction
Great local dev experience to iterate quickly to functional output

It turns out, the same things that make a great developer experience for human developers, also make a great developer experience for LLMs and agentic developers.
MooseStack is designed from the ground up to be agentic coder friendly, including:

Following familiar patterns from the transactional world that LLMs are comfortable with
Offering abstractions and reduced surface area to constrain LLMs to viable solutions
Offering great local dev experience to quickly iterate in

And if you want to supercharge your coding co-pilot, Fiveonefour’s Sloan AI (from the creators of MooseStack) offers agents and tools trained specifically on MooseStack to boost your developer experience further.

Using Sloan’s MCP integration with Cursor to create (and immediately test locally!) a new API endpoint on ClickHouse
Of course, development doesn’t stop when you push a commit—you need to get to production. In web development, deployment has matured: innovations like automated governance and CI/CD pipelines in GitHub, and preview branches in Vercel and Supabase, give developers confidence that their production deployments won’t break. That confidence comes from transparency: you can see exactly what will happen before code hits prod, and you know you can safely roll it back if something goes wrong.
A great developer experience should bring confidence and transparency to production deployment for data systems.
With data backends, the stakes are even higher. Shipping a half-applied migration isn’t like breaking a web page—it can corrupt or orphan critical datasets. Analytical/OLAP systems are especially fragile here: schema changes are often non-transactional, meaning there’s no easy rollback. A failed ALTER can leave a table in limbo, requiring you to write and apply your own reverse mutations by hand. Plus, in systems where analysts or external pipelines can also mutate schemas, drift between your code and the live database is common.
MooseStack addresses this head-on with Moose Migrate. Before deploying to production, MooseStack diffs your code against the live schema and generates a migration plan to apply to your production database to update schemas and business logic. You can also generate the plan in advance, to review, edit, and version control your migration. Either way, when you go to deploy, if drift has crept in between your code and the live database state, the migration fails fast, rather than shipping a broken deployment. The result is your application code and schema changes always ship together, in sync.
If you want to go further, Fiveonefour’s Boreal (from the creators of MooseStack) can host and manage your ClickHouse cluster on top of ClickHouse Cloud, along with your data streaming, API endpoints, and pipeline orchestration. Boreal integrates natively with GitHub, so you get one-click deploys, deep integration with your CI/CD workflows, and automatic previews of your dev branches deployed to the cloud. You also get enterprise-grade security, compliance, and observability. Boreal is SOC 2 Type 2 certified and offers logs and metrics endpoints to collect your observability data into your monitoring/alerting tool of choice.

The performance and flexibility of ClickHouse unlocks new ways of approaching data engineering, and new ways of integrating analytics and AI into software applications. But taking full advantage requires a modern developer experience layer, not just a powerful engine. That’s our mission at Fiveonefour with open-source MooseStack: to build upon ClickHouse's powerful core, offering a developer experience that feels as productive and familiar as modern web development.
Give the repo a star if you think it's interesting.

“The developer experience is what really stands out with MooseStack. It’s my go-to now for every new project that needs an analytics backend.”
– David Der, Chief AI officer, SingleStone
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SQLite's Durability Settings Are a Mess]]></title>
            <link>https://www.agwa.name/blog/post/sqlite_durability</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45066999</guid>
            <description><![CDATA[Is SQLite durable by default? What settings guarantee durability? The documentation and even comments from its creator give conflicting answers.]]></description>
            <content:encoded><![CDATA[



One of the most important properties of a database is durability.  Durability means that after a transaction commits, you
can be confident that, absent catastrophic hardware failure, the changes made by the commit won't be lost.  This should
remain true even if the operating system crashes or the system loses power soon after the commit.  On Linux, and most other Unix operating systems, durability is ensured by calling the fsync system call at the right time.



Durability comes at a performance cost, and sometimes applications don't need durability.  Some applications can tolerate
losing the last several seconds of commits in the event of a power failure, as long as the database doesn't end up
corrupted.  Thus, databases typically provide knobs to configure if and when they call fsync.  This is fine, but it's essential
that the database clearly documents what its default durability properties are, and what each configuration setting guarantees.



Unfortunately, SQLite's documentation about its durability properties is far from clear.  I cannot tell whether SQLite is durable
by default, and if not, what are the minimal settings you need to use to ensure durability.


The two relevant configuration
options are journal_mode and synchronous.  journal_mode has several possible values, but most people use either DELETE or WAL.  synchronous has four possible values: EXTRA, FULL, NORMAL, and OFF.



This is how I interpret SQLite's documentation after a careful reading:


The default value of journal_mode is DELETE:The DELETE journaling mode is the normal behavior (source; archived)The default value of synchronous is FULL:If not overridden at compile-time, the default setting is 2 (FULL) (source; archived)The default value of synchronous is FULL even in WAL mode:If not overridden at compile-time, this value is the same as SQLITE_DEFAULT_SYNCHRONOUS. (source; archived)When journal_mode is DELETE, you need to set synchronous to EXTRA to get durability:EXTRA synchronous is like FULL with the addition that the directory containing a rollback journal is synced after that journal is unlinked to commit a transaction in DELETE mode. EXTRA provides additional durability if the commit is followed closely by a power loss. (source; archived)When journal_mode is WAL, FULL is sufficient for durability:With synchronous=FULL in WAL mode, an additional sync operation of the WAL file happens after each transaction commit. The extra WAL sync following each transaction helps ensure that transactions are durable across a power loss (source; archived)Note that this is not mentioned under the definition of FULL, but rather further down in the documentation for synchronous.


Based on the above, I conclude that:


By default, SQLite is not durable, because the default value of journal_mode is DELETE, and the default value of synchronous is FULL, which doesn't provide durability in DELETE mode.If you change journal_mode to WAL, then SQLite is durable, because synchronous=FULL provides durability in WAL mode.




However, a recent Hacker News comment by a user who credibly claims to be Richard Hipp, the creator of SQLite, says:


"In its default configuration, SQLite is durable.""If you switch to WAL mode, the default behavior is that transactions ... are not necessarily durable across OS crashes or power failures"


That's literally the opposite of what the documentation seems to say!



A Hacker News commenter who agrees with my reading of the documentation asked Hipp how his comment is consistent with the documentation, but received no reply.



Hipp also says that WAL mode used to be durable by default, but it was changed after people complained about poor performance.
This surprised me, since I had the impression that SQLite cared deeply about backwards compatibility, and weakening the
default durability setting is a nasty breaking change for any application which needs durability.



There are a couple other pitfalls around SQLite durability that you should be aware of, though I don't necessarily
blame the SQLite project for these:


Libraries that wrap SQLite can override the default value of synchronous.  For example, the most popular Go driver for SQLite sets it to NORMAL when in WAL mode, which does not provide durability.On macOS, fsync is nerfed to make macOS appear faster.  If you want a real fsync, you have to make a different, macOS-specific system call.  SQLite can do this, but it's off by default.


My takeaway is that if you need durability, you'd better set the synchronous option explicitly because who knows what the default is, or what it will be in the future.  With WAL mode, FULL seems to suffice.  As for DELETE mode, who knows if FULL is enough, so you'd better go with EXTRA to be safe. And if your application might be used on macOS, enable fullfsync.



The SQLite project ought to clarify their documentation.  Since the meaning of synchronous depends on the value of journal_mode, I think it would be quite helpful to document the values of synchronous separately for each possible journal_mode, rather than mixing it all together.  A table with synchronous values on one axis and journal_mode on the other which tells you if the combination provides durability would do wonders.



By the way, there are definitely many applications for which losing a few seconds of data in exchange for better performance is a great tradeoff, which is why SQLite and macOS have made the choices they have made.  But programmers need to know what guarantees their tools provide, which is why unclear documentation and breaking previously-held assumptions is not cool.


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Thunder Compute (YC S24) Is Hiring]]></title>
            <link>https://www.ycombinator.com/companies/thunder-compute/jobs/sS6QzTi-founding-developer-advocate-contract-to-hire</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45066592</guid>
            <description><![CDATA[Company
Thunder Compute is the cheapest, easiest GPU cloud for developers. We’re a 4-person, seed-funded team (approaching Series A) with 100%+ MoM growth. 100% in-person, 6 days per week in SF. Our virtualization stack exposes network-attached GPUs over TCP, letting us oversubscribe hardware and pass savings to users.
Role
Own DevRel end-to-end. You’ll build and grow our community, ship hands-on demos and templates, teach developers how to run real workloads on Thunder, and bring sharp product feedback straight from Discord to the roadmap. High autonomy, high impact. You’ll report to the CEO.
What you’ll do
Lead community: run Discord, office hours, meetups; turn user questions into guides and product fixes.
Create content: quickstart templates, reproducible demos, blog posts, talks, and short videos.
Be the SME for AI devs on Thunder: model hosting, training, inference, cost/perf trade-offs.
Close the loop with product: file crisp bug reports, propose improvements, validate fixes.
Prototype: small OSS tools, CLIs, or examples that unblock common workflows.
Measure what matters: signups → activation, template adoption, community health.
You bring
Clear writing and the ability to explain complex systems simply.
Track record building developer communities and shipping educational content.
Hands-on coding (Python preferred) for demos and scripts; comfortable with containers/cloud.
Bias to action, resilience, and ownership from day one.
Prior DevRel/advocacy experience at a startup or dev-tool company (show links: posts, talks, repos).
Nice to have
GPU/AI infra familiarity (PyTorch, inference servers, RAG, Ray/FSDP, vectors).
CS fundamentals and/or a related degree.
Open-source contributions.
Compensation & setup
Full-time salary + meaningful equity. Starts as a 2-month contract, in-person optional, will full-time returning 100% in-person. You’ll work closely with the founding team and help define our DevRel function from zero.
How to apply
Send 2–3 links (writing/talks/demos), plus a short note on a community initiative you led and its outcome when you apply.]]></description>
            <content:encoded><![CDATA[Launch GPU instances in one click for 80% lessFounding Developer Advocate (Contract-to-hire)$100K - $150K•0.10% - 0.50%•San Francisco, CA, USJob typeFull-timeRoleEngineering, Full stackExperience3+ yearsVisaUS citizen/visa onlySkillsBranding, TCP/IP, Machine LearningConnect directly with founders of the best YC-funded startups.Apply to role ›Carl PetersonFounderAbout the roleCompany
Thunder Compute is the cheapest, easiest GPU cloud for developers. We’re a 4-person, seed-funded team (approaching Series A) with 100%+ MoM growth. 100% in-person, 6 days per week in SF. Our virtualization stack exposes network-attached GPUs over TCP, letting us oversubscribe hardware and pass savings to users.
Role
Own DevRel end-to-end. You’ll build and grow our community, ship hands-on demos and templates, teach developers how to run real workloads on Thunder, and bring sharp product feedback straight from Discord to the roadmap. High autonomy, high impact. You’ll report to the CEO.
What you’ll do

Lead community: run Discord, office hours, meetups; turn user questions into guides and product fixes.
Create content: quickstart templates, reproducible demos, blog posts, talks, and short videos.
Be the SME for AI devs on Thunder: model hosting, training, inference, cost/perf trade-offs.
Close the loop with product: file crisp bug reports, propose improvements, validate fixes.
Prototype: small OSS tools, CLIs, or examples that unblock common workflows.
Measure what matters: signups → activation, template adoption, community health.

You bring

Clear writing and the ability to explain complex systems simply.
Track record building developer communities and shipping educational content.
Hands-on coding (Python preferred) for demos and scripts; comfortable with containers/cloud.
Bias to action, resilience, and ownership from day one.
Prior DevRel/advocacy experience at a startup or dev-tool company (show links: posts, talks, repos).

Nice to have

GPU/AI infra familiarity (PyTorch, inference servers, RAG, Ray/FSDP, vectors).
CS fundamentals and/or a related degree.
Open-source contributions.

Compensation & setup
Full-time salary + meaningful equity. Starts as a 2-month contract, in-person optional, will full-time returning 100% in-person. You’ll work closely with the founding team and help define our DevRel function from zero.
How to apply
Send 2–3 links (writing/talks/demos), plus a short note on a community initiative you led and its outcome when you apply.
About Thunder ComputeThunder Compute is the world's cheapest GPU cloud platform for researchers, data scientists, and indie devs. The team is building a proprietary virtualization stack to improve GPU utilization by 5x. Try it today.Founded:2024Batch:S24Team Size:4Status:ActiveLocation:San FranciscoFoundersBrian ModelFounderCarl PetersonFounderSimilar Jobs]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The web does not need gatekeepers: Cloudflare’s new “signed agents” pitch]]></title>
            <link>https://positiveblue.substack.com/p/the-web-does-not-need-gatekeepers</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45066258</guid>
        </item>
        <item>
            <title><![CDATA[Bourbaki – A Secret Society of Mathematicians]]></title>
            <link>https://books.google.com/books/about/Bourbaki.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45066113</guid>
            <description><![CDATA[Books]]></description>
            <content:encoded><![CDATA[BooksSearch the world's most comprehensive index of full-text books.My library]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Offline-First Landscape – 2025]]></title>
            <link>https://marcoapp.io/blog/offline-first-landscape</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45066070</guid>
            <description><![CDATA[Manage all your inboxes effortlessly with a single app. Stay on top of your emails, no matter the provider or device.]]></description>
            <content:encoded><![CDATA[IntroductionWhen we set out to build Marco, we knew we were committing to two very difficult requirements: (1) IMAP-based, not API-based, and (2) cross-platform – web, Mac, Windows, Android, iOS.We had a handful of additional ancillary requirements. One of these was offline-first, and I can now say confidently that we drastically underestimated its complexity.I mentioned in a previous blog post that Missive was my daily driver in the recent past. It lacks offline support though, and this is one of the major downfalls of the product.At Marco we believe that full offline support is crucial. "Managing your emails on an airplane with no wifi" is an example use case we frequently come back to. You should be able to read, delete, respond, and organise your emails with no internet connection. When you land and connect to wifi, everything should seamlessly sync.That said, Marco is not a simple todo app. Marco is not an application that starts with zero data and grows in size gradually, as is the case with user-generated content like Notion, etc.Marco is an application that deals with hundreds of MB of data, and hundreds of thousands (or millions) of rows/entities.Essentially this means we are instantly jumping into the top 1% of heavy-duty use cases for offline-first implementations. Over time we realised that this actually rules out almost all available offline-first options.Starting Point: WatermelonDBI spent about a week deeply investigating the offline-first options available to us, in August 2024.We (perhaps naively) had committed to the idea that our offline-first architecture should be database-agnostic – the offline-first logic should "end" at the API layer. We did not want to manage sync tables or schemas in Postgres – we wanted to write API endpoints, and manage our database ourselves.Here's a rundown of the initial offline-first options we looked at:WatermelonDBFOSS, self-hostedDatabase agnosticBeen around for ages, used in many production applicationsPowerSyncNot quite FOSS, but has a free Self-Hosted EditionRequires Postgres-level integrationVery complex architecture, requires both changes to Postgres _and_ a separate HA MongoDB deployment clusterAppears to have been around quite awhile, but all their case studies are on demo/tiny/side projectsElectricSQLLooked interesting, but was in the middle of a complete rewriteRequires Postgres-level integrationNew version only handles data sync one way – it does not handle mutationsThere are many other options, including RxDB, MongoDB Atlas, Couchbase, and on and on. The three listed above are the options that we deeply investigated. As will become clear, we should have looked further at this stage.We settled on WatermelonDB and built the initial alpha version of Marco on it. The backend implementation is rather simple: there is a "pull" endpoint to GET data, and a "push" endpoint to POST mutations.It is important here to note that although Marco is a native application in some targets, it also must run in a web browser. While we may have access to a filesystem or "true" SQLite in native targets, our common denominator is web, where persistent storage options are very limited.On the (web) frontend, Watermelon uses IndexedDB (as do essentially all other options – even the WASM SQLite options are usually SQLite-on-top-of-IndexedDB). However, it turns out Watermelon faces a serious problem that all other relational frontend databases face – IndexedDB performance is terrible. To solve this, Watermelon uses a LokiJS adapter, which is literally just an in-memory database.Yes, you heard that right. To get around IndexedDB performance issues, Watermelon uses LokiJS to... hold the entire database in memory. When your database size is 100MB+, this starts to become a serious problem.Moreover, clients must pull data before they can push any new mutations, and mutations can easily be clobbered if the row has been updated on the backend before the frontend can push mutations.On top of this, WatermelonDB is not as actively-maintained as it once was. Many issues and PRs are left without a response. For example, chunked initial syncing is not supported out of the box. We opened a PR for this in early December, but it's still not been merged.We got quite far along with the Marco alpha build, and then had a bit of a panic in November. Our confidence in our WatermelonDB-based offline-first approach was decreasing steadily. We began to seriously question if this technology could actually support a rock-solid, modern user experience.We decided we needed to find something better.New Wave of Offline-FirstThis time around, we threw out any preconceptions we had about Postgres, separation of concerns at the API layer, etc. We had completely open minds and desperately wanted to find the "best" solution, no matter what that might look like. We were now extremely clear on the fact that we had a "tough" offline-first use case, and needed some serious help.We discovered a host of "new wave" offline first implementations. We talked with the founders/developers of these projects and found so many extremely intelligent and talented people working on what is a very tough problem.The leaders in this new wave are:TriplitInstantDBConvexWhile Triplit and InstantDB can be described as "full stack databases", Convex is instead an entire backend solution, including API endpoints, etc. For this reason we excluded Convex, as it seems like a huge leap and essentially 100% lock-in.Problems with TriplitOur first (of several) rewrites was from WatermelonDB to Triplit. Both Triplit and InstantDB use triples to represent data – entities are stored as "triples" of (<entity id>, <entity field>, <entity value>). Such a representation makes syncing a straightforward affair.Triplit's API and DX is best-in-class. However, although we desperately wanted to love the product, we found it unusable for our use case. The server-side implementation was eating gigabytes of RAM while sitting idle and would regularly OOM/crash. The client-side triples implementation would balloon 5MB of JSON into 1GB of SQLite.We believe Triplit is a fantastic choice for any offline-first applications with relatively small storage needs. On top of this, we found the Triplit team to be incredibly talented and hard-working, and truly believe that by mid-2025, it will be a robust and capable product.We absolutely love the developer experience with Triplit, and are rooting for the team to succeed!But we need something which is reliable, highly performant, and battle-tested, now.Problems with InstantDBWe next moved onto InstantDB, which can be considered a direct competitor to Triplit. Although both InstantDB and Triplit essentially solve the same problem, we found InstantDB to be a far worse implementation.TypeScript types were non-existent. There was no sort/ordering by fields. There was no support for $like operators, and certainly no full text search. I believe some of these features have since been added – both teams are certainly scrambling to handle a million features and requests.On the backend side of things, there are no webhooks, so it is impossible to respond to mutations in a scalable way. We would have had to build our own singleton subscriber microservice that then translated reactive queries into scalable webhooks. But reactive queries themselves are prone to dropped data, so we would need some sort of polling fallback... The backend story for InstantDB feels extremely incomplete.Even looking past all of this, frontend queries that returned in 2-5ms with Watermelon+LokiJS were taking 200-500ms to return data with InstantDB. This is primarily because InstantDB is not optimistic, and was hitting network to fetch data with almost every request. There is no granular control as to what gets cached on the client side and what does not.InstantDB is another promising product, and our understanding is that some teams are already building production applications on top of it. But it's simply too immature for our use case right now. There's essentially zero backend support, and the frontend UX felt like a massive downgrade coming from Watermelon.Problems with PowerSyncFinally, to our great disappointment, we begrudgingly moved on to PowerSync. We were wary of PowerSync from the beginning, and our reluctance proved to be well-founded.Although PowerSync is undoubtedly a mature product, and probably the most capable (on paper) of all options mentioned thus far, we hated every minute of working with it. The underlying tech might be the most production/enterprise friendly, but the DX is the worst by quite a margin.There is a paid SaaS offering, but their pricing model would have made our use case prohibitively expensive. Therefore we needed to self-host PowerSync, which is quite a complex and expensive task in itself. Not only does it require Postgres-level integration, it also needs a HA MongoDB cluster, a lot of arcane yaml configuration, etc. It also required us to completely denormalise our Postgres tables, as relations are not properly supported across the sync buckets.On the frontend side of things, PowerSync runs SQLite in WASM, and although the DX is fairly good, we found horrifying problems like off-by-one bugs in their Drizzle ORM integration, queries returning data from local db very slowly (100ms+), and long initialisation times (45s+ after login to Marco) with the UI view not updating until the sync fully completed.Why So Many Problems?There is a saying: if everyone is an asshole, maybe you're the asshole. Is the problem 5+ offline-first tools, or is it us?Like with most things, the reality is "a bit of both". As mentioned, Marco is an incredibly data-intensive application, and from day one, we were pushing these offline-first tools to their absolute limits.However, we also found the practical limits of these tools to be way lower than one would expect.What is the underlying cause? In my estimation, the root cause is that all of these offline-first tools for web are essentially hacks. Because of Marco's web deployment target, which becomes our common denominator, we must support offline-first in a web browser, and web browsers only really support KV storage via IndexedDB.All attempts to implement relational or graph databases within a web browser are essentially hacks. PowerSync itself is WASM SQLite... On top of IndexedDB. Binary SQLite chunks are literally stored in IndexedDB.There are essentially three different variables:The underlying (true) data store – this will always be IndexedDB for web implementationsHow the data is represented for sync purposesHow the data is presented to developersThe new wave of tools are attempting triples/graph implementations, but the story is the same. Browsers only give you a KV API, and anything on top of that will be built in userland and will suffer poor performance once you hit a certain scale. Although triples are easy to store and sync, when you try to jam a relational layer on top, the whole thing starts to fall apart.To be absolutely clear: these relational and graph implementations on top of IndexedDB do not start to show their cracks unless you have 10s/100s of MB of data, or hundreds of thousands of rows/entities. But at a certain scale, performance grinds to a halt and they become unusable. For lesser use cases, Triplit and InstantDB offer exceptional DX and velocity, with almost no drawbacks.At this point, we were starting to pull our hair out, and were wondering if we needed to build our own sync engine. Like many others, we're highly impressed with Linear, but are also aware that their sync engine was a monumental engineering effort.We're only a team of two, and we have a lot to work on besides offline-first itself.Finally, A SolutionSome time in early December, I came back across an option which I had glanced over before, but disregarded: Replicache.I think we were initially put off by their strange pricing model and the fact that it's closed-source.I am so glad we took another look.In terms of backend implementation, Replicache is somewhat similar to WatermelonDB, in that you need to implement push and pull endpoints in your backend, and it is otherwise entirely database-agnostic.The frontend is where the crucial difference lies – Replicache is just a KV store. It is a thin layer on top of IndexedDB that adds reactivity and some querying DX. That's it. You get raw get and set performance. Some performance benchmarks are outlined here. The perf is truly remarkable.The drawback to this KV approach is that searching/sorting/ordering entities would require scanning through entire collections. This is obviously a non-starter. In other words, if we wanted to use Replicache, we would need to handle indexing and search on our own.We'll post more detailed write-ups on our tech stack in the future, but a quick summary of where we landed on the frontend is: Replicache + Orama. This gives us sophisticated and battle-tested data sync with conflict resolution and rebasing, but also extremely flexible and powerful indexing, full-text search, and more.At the time of writing (January 2025), the Replicache team have just made it completely free and open source. This is because they've just released Zero, which looks extraordinarily compelling and will likely jump into the #1 spot for any offline-first product available.We're eager to try Zero once it's a bit more stable, but for now will build our product on the extremely capable and robust piece of software that is Replicache.Future of Offline-FirstWe embarked on a long and rambling journey through essentially all prior art and work in the offline-first world. It's a very hard problem to solve.The good news is that there are many new teams and projects actively and energetically working on this problem.Imagine a world where, as a fullstack developer, you can read and write data from an SDK in both your backend and your frontend, and they magically sync with each other. All your apps are instantly responsive. All your apps work offline out of the box.This is already possible today with Triplit or InstantDB, if your use case is reasonable. And things are only improving.I believe 2025 will be a year where HTTP/REST APIs will start to feel antiquated. Don't share endpoints – share databases.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Wikipedia as a Graph]]></title>
            <link>https://wikigrapher.com/paths</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45066060</guid>
        </item>
        <item>
            <title><![CDATA[Essential Coding Theory [pdf]]]></title>
            <link>https://cse.buffalo.edu/faculty/atri/courses/coding-theory/book/web-coding-book.pdf</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45065705</guid>
        </item>
        <item>
            <title><![CDATA[God Created the Real Numbers]]></title>
            <link>https://www.ethanheilman.com/x/34/index.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45065425</guid>
            <description><![CDATA[07-14-2025 7:37PM (ET) 08-28-2025 12:03AM (ET) (edited)]]></description>
            <content:encoded><![CDATA[
07-14-2025 7:37PM (ET) 08-28-2025 12:03AM (ET) (edited)


W. Jherek Swanger writes in his introduction to Camillo7 Agrippa's "A Treatise on the Science of Arms, with a philosophical Dialogue (1553)" that:

"Scienzia [...] was and is often held to relate only to the study of the eternal: that which exists in nature, or was created by God. Thus theology and astronomy/astrology are held to be sciences. Indeed, Ridolfo Capoferro held that strictly speaking fencing is not a science, but rather an art, because it was not divinely created."

16th Century Italy asks then if science is concerned only with divine (natural) knowledge1 and art is the realm of the secular and human-made, then was Leopold Kronecker right when he said2:

"God made the integers; all else is the work of man"

The integers look little like the natural world and very much like the simple and powerful abstractions that humans find elegant.
Much to the frustration of the human mind, that which created fig wasps, Leucochloridium paradoxum, quantum foam, and plasmids, does not create works of abstract simplicity.
If such a divinity left fingerprints in mathematics, that inhuman complexity and irrational strangeness6 can be found in the reals but not the integers.
One can imagine the God of the Book of Job creating the square root of two and pi.
I have an imperfect rule of thumb for determining if something is of human construction or for the purposes of this exploration, divine.
If the something under examination causes a sense of existential nausea, disorientation, and a deep feeling that is can't possibly work like that, it is divine3.
If on the other hand it feels universal, simple, and ideal, it is the product of human effort.
The Hierarchy of Weirdness
This distinction science=divine/nature, art=made by human is more complex than just two separate categories.
When humans create something, the created thing is contained, and is a function of, what already exists, so while art is the part of the universe that is created by humans, it also emerges from the part of the universe that isn't created by humans.

The human idea of the triangle choke (sankaku-jime) only works because humans have arms, legs and necks.
It wouldn't be meaningful to talk about it in a universe without chokeable necks, but necks existed before human ideas.
So the idea of a triangle exists both because of the specific context of humanity and also because humans created it.
More specifically, we can define a hierarchy of creation, or what a 16th Century Italian would call divine creation.
At the top of the hierarchy we have eternal nature. Eternal nature gives rise to nature, which in turn gives rise to humans, which gives rise to human ideas.
As shown below, the closer we get to eternal nature the greater the weirdness5 (from a human perspective).

The real numbers are much closer to eternal nature4, whereas the integers are much closer to human ideas.
This is why to human mind the integers feel more perfect, feel more divine.
A hammer feels like the perfect tool to hammer a nail not because a hammer is closer to eternal nature or more divine, but because it isn't divine.
Hammers feel like the perfect tool because they were invented by humans specifically to solve the human problem of hammering nails.
Kronecker, Cantor and God
Kronecker's quote about the integers being divine was not made so much because Kronecker wanted to elevate the reputation of the integers but because he wanted to damn infinity.
It was that reaction of horror at the creepy crawly bugs you see when you lift up the rock of Mathematics.
The main target of Kronecker's campaign against infinity was the mathematician Cantor8 and his work on transfinites.
Cantor viewed infinity in a much more positive light and he wasn't alone in this reaction.

"From the paradise that Cantor created for us no-one shall be able to expel us." - David Hilbert (1926)11

Cantor's ideas also sparked a theological debate since if the mind can reason about infinity, perhaps the mind can also reason about God9.
Cantor himself was deeply invested in the theological implications of his mathematical work.
He believed that God was beyond the mind12 and thus his mathematical work was not the result of his own effort but rather God was speaking through him.
This is an inversion of God of the gaps10 where the gaps filled in by the God of the filling and the lack of gaps is evidence of God rather than the reverse.
This echos Descartes'14 deeply unsatisfying Trademark Argument of the existence of God because finite beings like humans can perceive aspects of God like infinity, we must only be able to perceive16 them because God exists.

"The idea of infinite substance, or God, must have “proceeded from some substance which really was infinite. [..] If a finite thing could produce the idea of an infinite thing, the Meditator reasons, this would violate the principle that there is more reality in a cause than in its effect, since the Idea of God is at the top of the Hierarchy of Ideas." - René Descartes, Meditations on First Philosophy, in which the existence of God and the immortality of the soul are demonstrated (1641)15

I much prefer the notion put forward by Chesterton that it is gaps themselves which are important.

"The whole secret of mysticism is this: that man can understand everything by the help of what he does not understand. The morbid logician seeks to make everything lucid, and succeeds in making everything mysterious. The mystic allows one thing to be mysterious, and everything else becomes lucid" - Orthodoxy by G. K. Chesterton (1908)13

A Final Note
Versions of this essay sat on my hard drive for the last few years and in private correspondence.
I couldn't find a conclusion to draw these threads together so I'm leaving it as a vibes-based meandering through these ideas.
This post originally came about because of a conversation with Madars Virza about my rejection of the Kronecker quote.  I bounced it off of a number of other people including Andrew Poelstra, Russell O’Connor, Karina Poelstra, Peter Berard over the years. The observations of the real number line are taken from conversations with my dad, Ward Heilman. Hopefully I got it mostly correct, any errors are my own.
Related Essays
Ben Orlin - Why the Number Line Freaks Me Out (2016) - archived
Joel David Hamkins - What are the real numbers, really? (2024) - archived
Theology Of Georg Cantor (2014), Ochiai Hitoshi
Russell O’Connor, How Dedekind Screwed Up a Hundred Years of Mathematics (2005)




We can ignore the question of the existence of God since by "divine" here we mean that which does not depend on us. Or in more modern atheistic terms, we are talking about nature and what if anything is prior to nature. ↩


We don't have Leopold Kronecker actual words. Heinrich Weber wrote in a 1893 issue of the journal Mathematische Annalen 43(1) that Kronecker at a 1886 lecture made the statement: "Die ganzen Zahlen hat der liebe Gott gemacht, alles andere ist Menschenwerk" (translated: "God made the integers; all else is the work of man"). 
The full context in German is: "Eine wesentliche Liicke wiirde aber in dem Bilde des Mathematikers Kronecker bleiben, wenn ich seine Stellung zu den fundamentalen, philosophischen Fragen der Mathematik mit Stillschweigen iibergehen wollte. Es ist ein Standpunkt, der besonders in seinen spiteren Jahren hervortrat, vielleicht mehr noch im persénlichen Verkehr als in der Oeffentlichkeit; aber auch 6ffentlich hat er seine Anschauungen nicht verleugnet und z. B. in der Festschrift zu Zeller’s Jubiléum scharf hervorgekehrt. 
In Bezug auf Strenge der Begriffe stellt er die héchsten An-forderungen und sucht alles, was Biirgerrecht in der Mathematik haben soll, in die krystallklare eckige Form der Zahlentheorie zu zwingen. 
Manche von Ihnen werden sich des Ausspruchs erinnern, den er in einem Vortrag bei der Berliner Naturforscher- Versammlung im Jahre 1886 that: ,,Die ganzen Zahlen hat der liebe Gott gemacht, alles andere ist Menschenwerk“.
So war ihm alles, was sich nicht eines arithmetischen Ursprungs unmittelbar bewusst war, unsympathisch, und sein Streben ging dahin, nicht nur in der Algebra, sondern auch in der Functionentheorie die arithmetische Abstammung deutlich hervortreten zu lassen."
Translated via google into english: "However, a significant gap would remain in the picture of Kronecker as a mathematician if I were to ignore his position on the fundamental, philosophical questions of mathematics. It is a standpoint that became particularly prominent in his later years, perhaps more so in personal interaction than in public; but even publicly, he did not deny his views and, for example, sharply emphasized them in the Festschrift for Zeller's anniversary.
Regarding conceptual rigor, he sets the highest standards and seeks to force everything that should have a civil right in mathematics into the crystal-clear, angular form of number theory.
Some of you will recall the statement he made in a lecture at the Berlin Natural Scientists' Meeting in 1886: "The good Lord created the integers; everything else is the work of man."
Thus, he disliked anything that was not directly conscious of an arithmetic origin, and his aim was to make the arithmetic origin clearly evident not only in algebra but also in function theory." ↩


I leave to the reader to decide if this is an argument in favor or opposed to intelligent design. ↩


One could argue that integers exist in the same way that the reals do and therefore at both eternal nature. This seems impossible to dispute because the reals contain the integers, so if the reals are eternal nature, integers contained in the reals must be as well. My argument is that the human invention of the integers, is not the integers themselves but the idea of the integers as a thing that exists separate from the reals. Mathematical Platonism does not prevent human invention in Mathematics. Anyone who wants to argue this point should present an argument for the concept of "a bakers dozen" is not of human invention. ↩


I use the word weirdness above rather than complexity because what matters is the strangeness of eternal nature to human thought, it need not be more complex and could in fact have simpler cause than many things we consider normal like pants or a traffic jam. We see this with evolution, more complex life emerged from more simple life. ↩


Humans can't even agree on a single definition. You have the reals with or without the continuum hypothesis, you can have the reals with or without the Axiom of Choice. What even are the reals? ↩


This is the same Agrippa mentioned in the Princess Bride.  ↩


For a good history see pages 79 to 85 of The Infinite Book: A Short Guide to the Boundless, Timeless and Endless - The Madness of Georg Cantor (2006) by John D. Barrow ↩


"[Gutberlet] had responded by seizing upon Cantor's Mathematical work to argue that it provided clear evidence that the human mind could contemplate the actual infinite. Moreover, it if did so, it would get closer to the true nature of the divine. The collection of divine thoughts in the mind of an unchanging, he argument must comprise a complete and infinite set. This was for him evidence that Cantor's infinites actually existed, and to deny it would require you to give up the infinite and absolute mind of God." -  The Infinite Book: A Short Guide to the Boundless, Timeless and Endless - The Madness of Georg Cantor (2006) by John D. Barrow ↩


I always find the argument about the God of the gaps self-defeating because the more knowledge about reality we gain the greater the number and size of gaps. That gaps aren't shrinking and once you add Godel to the picture, they seemt to grow quite a bit. ↩


"Fruchtbaren Begriffsbildungen und Schlußweisen wollen wir, wo immer nur die geringste Aussicht sich bietet, sorgfältig nachspüren und sie pflegen, stützen und gebrauchsfähig machen. Aus dem Paradies, das Cantor uns geschaffen, soll uns niemand vertreiben können." - Hilbert, David (1926), "Über das Unendliche", Mathematische Annalen, 95 (1): 161–190  ↩


"The Transfinite with its abundance of formations and forms, points with necessity to an Absolute, to the “truly Infinite”, to whose Magnitude nothing can be added or subtracted and which therefore is to be seen quantitatively as absolute Maximum. The latter exceeds, so to speak, the human power of comprehension and eludes particularly mathematical determination; whereas the Transfinite not only fills the vast field of the possible in God’s knowledge, but also offers a rich, constantly increasing field of ideal inquiry and attains reality and existence, I am convinced, also in the world of the created, up to a certain degree and in different relations, to bring the Magnificence of the Creator, following His absolute free decree, to greater expression than could have occurred through a merely "finite world"."  - from a letter written by Georg Cantor to A. Eulenberg (Feb. 28, 1886) from Gesammelte Abhandlungen mathematischen und philosophischen Inhalts, Georg Cantor, ed by Ernst Zermelo, Springer-Verlag, 2013, translation by Gabriele Chaitkin in On the Theory of the Transfinite. ↩


This quote always reminded me of Godel's Incompleteness Theorem ↩


Both Agrippa and Descartes were Swordman and Mathematicians with a passion for Geometry. Unlike Agrippa, Descartes did not leaving any writing on the art of combat with a sword. If he had maybe he would have namechecked in the Princess Bride. 
A paper by Kevin Delapp Philosophical Duelism: Fencing in Early Modern Thought (2018) in the Journal of Early Modern Studies looks at influence of fencing on the development of early modern philosophers including Descartes. It is behind a paywall so I have not read it. ↩


René Descartes, Meditation III, Meditations on First Philosophy, in which the existence of God and the immortality of the soul are demonstrated (1641), translation from Catherine Wilson's Descartes’ Meditations an introduction (2003) ↩


Consider what it would actually look like for humanity to have knowledge which humanity could not create. For instance imagine a human mind was told the solution to a mathematical problem that can easily be verified but would require more energy than our universe to compute. This would be strong evidence that this mathematical revelation was placed in our minds by an intelligence with greater computing power than our universe, i.e. a cryptographic proof for the existance of something godlike. I am aware of no such knowledge and such a relevation is very different than the knowledge of infinity. ↩


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why AI Isn't Ready to Be a Real Coder]]></title>
            <link>https://spectrum.ieee.org/ai-for-coding</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45065343</guid>
            <description><![CDATA[Can AI truly collaborate with human coders? Researchers highlight the hurdles and potential solutions in AI-driven software engineering.]]></description>
            <content:encoded><![CDATA[Artificial intelligence (AI) has transformed the coding sphere, with AI coding tools completing source code, correcting syntax errors, creating inline documentation, and understanding and answering questions about a codebase. As the technology advances beyond automating programming tasks, the idea of full autonomy looms large. Is AI ready to be a real coder?A new paper says not yet—and maps out exactly why. Researchers from Cornell University, MIT CSAIL, Stanford University, and UC Berkeley highlight key challenges that today’s AI models face and outline promising research directions to tackle them. They presented their work at the 2025 International Conference on Machine Learning.The study offers a clear-eyed reality check amid all the hype. “At some level, the technology is powerful and useful already, and it has gotten to the point where programming without these tools just feels primitive,” says Armando Solar-Lezama, a co-author of the paper and an associate director at MIT CSAIL, where he leads the computer-aided programming group. He argues, however, that AI-powered software development has yet to reach “the point where you can really collaborate with these tools the way you can with a human programmer.”Challenges With AI Coding ToolsAccording to the study, AI still struggles with several crucial facets of coding: sweeping scopes involving huge codebases, the extended context lengths of millions of lines of code, higher levels of logical complexity, and long-horizon or long-term planning about the structure and design of code to maintain code quality.Koushik Sen, a professor of computer science at UC Berkeley and also a co-author of the paper, cites fixing a memory safety bug as an example. (Such bugs can cause crashes, corrupt data, and open security vulnerabilities.) Software engineers might approach debugging by first determining where the error originates, “which might be far away from where it’s crashing, especially in a large codebase,” Sen explains. They’ll also have to understand the semantics of the code and how it works, and make changes based on that understanding. “You might have to not only fix that bug but change the entire memory management,” he adds.These kinds of complex tasks can be difficult for AI development tools to navigate, resulting in hallucinations about where the bug is or its root cause, as well as irrelevant suggestions or code fixes with subtle problems. “There are many failure points, and I don’t think the current LLMs [large language models] are good at handling that,” says Sen.Among the various paths suggested by the researchers toward solving these AI coding challenges—such as training code LLMs to better collaborate with humans and ensuring human oversight for machine-generated code—the human element endures.“A big part of software development is building a shared vocabulary and a shared understanding of what the problem is and how we want to describe these features. It’s about coming up with the right metaphor for the architecture of our system,” Solar-Lezama says. “It’s something that can be difficult to replicate by a machine. Our interfaces with these tools are still quite narrow compared to all the things that we can do when interacting with real colleagues.”Enhancing AI-Human Collaboration in CodingCreating better interfaces, which today are driven by prompt engineering, is integral for developer productivity in the long run. “If it takes longer to explain to the system all the things you want to do and all the details of what you want to do, then all you have is just programming by another name,” says Solar-Lezama.Shreya Kumar, a software engineer and an associate teaching professor in computer science at the University of Notre Dame who was not involved in the research, echoes the sentiment. “The reason we have a programming language is because we need to be unambiguous. But right now, we’re trying to adjust the prompt [in a way] that the tool will be able to understand,” she says. “We’re adapting to the tool, so instead of the tool serving us, we’re serving the tool. And it is sometimes more work than just writing the code.”As the study notes, one way to address the dilemma of human-AI interaction is for AI systems to learn to quantify uncertainty and communicate proactively, asking for clarification or more information when faced with vague instructions or unclear scenarios. Sen adds that AI models might also be “missing context that I have in my mind as a developer—hidden concepts that are embedded in the code but hard to decipher from it. And if I give any hint to the LLM about what is happening, it might actually make better progress.”For Abhik Roychoudhury, a professor of computer science at the National University of Singapore who was also not involved in the research, a crucial aspect missing from the paper and from most AI-backed software development tools entails capturing user intent.“A software engineer is doing a lot of thinking in understanding the intent of the code. This intent inference—what the program is trying to do, what the program is supposed to do, and the deviation between the two—is what helps in a lot of software engineering tasks. If this outlook can be brought in future AI offerings for software engineering, then it will get closer to what the software engineer does.”Where Does AI Coding Go From Here? Roychoudhury also assumes that many of the challenges identified in the paper are either being worked on now or “would be solved relatively quickly” due to the rapid pace of progress in AI for software engineering. Additionally, he believes that an agentic AI approach can help, viewing significant promise in AI agents for processing requirements specifications and ensuring they can be enforced at the code level.“I feel the automation of software engineering via agents is probably irreversible. I would dare say that it is going to happen,” Roychoudhury says.Sen is of the same view but looks beyond agentic AI initiatives. He pinpoints ideas such as evolutionary algorithms to enhance AI coding skills and projects like AlphaEvolve that employ genetic algorithms “to shuffle the solutions, pick the best ones, and then continue improving those solutions. We need to adopt a similar technology for coding agents, where the code is continuously improving in the background.”However, Roychoudhury cautions that the bigger question lies in “whether you can trust the agent, and this issue of trust will be further exacerbated as more and more of the coding gets automated.”That’s why human supervision remains vital. “There should be a check and verify process. If you want a trustworthy system, you do need to have humans in the loop,” says Notre Dame’s Kumar.Solar-Lezama agrees. “I think it’s always going to be the case that we’re ultimately going to want to build software for people, and that means we have to figure out what it is we want to write,” he says. “In some ways, achieving full automation really means that we get to now work at a different level of abstraction.”So while AI may become a “real coder” in the near future, Roychoudhury acknowledges that it probably won’t gain software developers’ complete trust as a team member, and thus might not be allowed to do its tasks fully autonomously. “That team dynamics—when an AI agent can become a member of the team, what kind of tasks will it be doing, and how the rest of the team will be interacting with the agent—is essentially where the human-AI boundary lies,” he says.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Seedbox Lite: A lightweight torrent streaming app with instant playback]]></title>
            <link>https://github.com/hotheadhacker/seedbox-lite</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45065278</guid>
            <description><![CDATA[A light-weight torrent media center at one place. Contribute to hotheadhacker/seedbox-lite development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[🎬 SeedBox Lite
Stream Torrents Instantly

🚀 Overview
SeedBox Lite is a cutting-edge torrent streaming platform that allows you to watch movies and TV shows instantly without waiting for complete downloads. Built with modern web technologies, it provides a Netflix-like experience with powerful torrent capabilities.
✨ Key Highlights

🎯 Instant Streaming - Start watching immediately as the torrent downloads
🔐 Password Protection - Secure access with authentication
📱 Mobile Optimized - Perfect responsive design for all devices
🎥 Smart Video Player - Advanced player with subtitles and fullscreen support
⚡ Fast Setup - Deploy in minutes with Docker or PM2
🌐 Cross-Platform - Works on Windows, macOS, and Linux
🎨 Modern UI - Clean, intuitive interface inspired by popular streaming services

🎯 Features
Core Streaming Features

Torrent to Stream - Convert any movie/TV torrent to instant streaming
Progress Tracking - Real-time download progress and cache management
Smart Caching - Intelligent caching system with configurable limits
Multiple Formats - Support for MP4, MKV, AVI, and more video formats
Subtitle Support - Automatic subtitle detection and loading

User Experience

Netflix-Style Interface - Familiar and intuitive design
Mobile-First Design - Optimized for smartphones and tablets
Native Fullscreen - True fullscreen experience on mobile devices
Gesture Controls - Double-tap to fullscreen, intuitive video controls
Responsive Layout - Adapts perfectly to any screen size

Technical Features

Password Authentication - Secure access control
CORS Enabled - Cross-origin resource sharing for flexible deployment
Health Monitoring - Built-in health checks and monitoring
Production Ready - Optimized for production deployments
Docker Support - Easy containerized deployment
PM2 Integration - Process management for Node.js applications

Mobile Optimizations

iOS Safari Support - Native fullscreen using WebKit APIs
Android Chrome - Optimized for Android mobile browsers
Range Requests - HTTP range support for smooth video seeking
Mobile Viewport - Proper viewport handling for app-like experience
Touch Optimized - Gesture-friendly video controls

📸 Screenshots
View all screenshots
🚀 Quick Start
Using Docker (Recommended)
# Clone the repository
git clone https://github.com/hotheadhacker/seedbox-lite.git
cd seedbox-lite

# Start with Docker Compose
docker-compose up -d

# Access the application
open http://localhost:5174
Using PM2
# Clone and install dependencies
git clone https://github.com/hotheadhacker/seedbox-lite.git
cd seedbox-lite

# Install backend dependencies
cd server && npm install

# Install frontend dependencies  
cd ../client && npm install

# Build frontend
npm run build

# Start with PM2
pm2 start ecosystem.config.js
📋 Prerequisites
System Requirements

Node.js 18+
npm 8+
Docker 20+ (for Docker deployment)
PM2 (for PM2 deployment)

Operating System Support

✅ Windows 10/11
✅ macOS 10.15+
✅ Ubuntu 18.04+
✅ Debian 10+
✅ CentOS 7+

Browser Support

✅ Chrome 90+
✅ Firefox 88+
✅ Safari 14+
✅ Edge 90+
✅ Mobile browsers (iOS Safari, Android Chrome)

🛠 Installation
Method 1: Docker Deployment (Recommended)
Step 1: Clone Repository
git clone https://github.com/hotheadhacker/seedbox-lite.git
cd seedbox-lite
Step 2: Configure Environment
# Copy and edit environment variables
cp .env.example .env
nano .env
Key Environment Variables:
# Server Configuration
NODE_ENV=production
SERVER_PORT=3001
ACCESS_PASSWORD=your_secure_password

# Frontend Configuration  
FRONTEND_URL=http://localhost:5174
VITE_API_BASE_URL=http://localhost:3001

# Docker Ports
BACKEND_PORT=3001
FRONTEND_PORT=5174
Step 3: Deploy
# Start all services
docker-compose up -d

# Check status
docker-compose ps

# View logs
docker-compose logs -f
Step 4: Access Application

Frontend: http://localhost:5174
Backend API: http://localhost:3001
Default Login: Password set in ACCESS_PASSWORD

Method 2: PM2 Deployment
Step 1: System Setup
# Install Node.js 18+
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs

# Install PM2 globally
npm install -g pm2
Step 2: Application Setup
# Clone repository
git clone https://github.com/hotheadhacker/seedbox-lite.git
cd seedbox-lite

# Install backend dependencies
cd server
npm install
cd ..

# Install and build frontend
cd client
npm install
npm run build
cd ..
Step 3: Configure Environment
# Backend environment
cd server
cp .env.example .env
nano .env
Backend .env Configuration:
NODE_ENV=production
SERVER_PORT=3001
SERVER_HOST=0.0.0.0
ACCESS_PASSWORD=your_secure_password
FRONTEND_URL=http://localhost:5174
Step 4: Start Services
# Start backend with PM2
cd server
pm2 start ecosystem.config.js

# Serve frontend with nginx or serve
cd ../client/dist
npx serve -s . -l 5174

# Or use PM2 for frontend
pm2 start "npx serve -s . -l 5174" --name "seedbox-frontend"
Step 5: PM2 Management
# View running processes
pm2 list

# View logs
pm2 logs

# Restart services
pm2 restart all

# Save PM2 configuration
pm2 save
pm2 startup
Method 3: Development Setup
Step 1: Clone and Install
git clone https://github.com/hotheadhacker/seedbox-lite.git
cd seedbox-lite

# Install backend dependencies
cd server
npm install

# Install frontend dependencies
cd ../client  
npm install
Step 2: Configure Development Environment
# Backend environment
cd server
cp .env.example .env
Development .env:
NODE_ENV=development
SERVER_PORT=3000
SERVER_HOST=localhost
ACCESS_PASSWORD=seedbox123
FRONTEND_URL=http://localhost:5173
Step 3: Start Development Servers
# Terminal 1: Start backend
cd server
npm run dev

# Terminal 2: Start frontend  
cd client
npm run dev
🧪 Testing
Docker Testing
# Health check
curl http://localhost:3001/api/health
curl http://localhost:5174/health

# API endpoints
curl -X POST http://localhost:3001/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"password":"your_password"}'

# Cache stats
curl http://localhost:3001/api/cache/stats
PM2 Testing
# Check PM2 status
pm2 list
pm2 logs seedbox-backend
pm2 logs seedbox-frontend

# Test API endpoints
curl http://localhost:3001/api/health
curl http://localhost:5174
Frontend Testing
cd client
npm test

# Run Cypress e2e tests
npm run test:e2e

# Accessibility testing
npm run test:a11y
Backend Testing
cd server
npm test

# API integration tests
npm run test:integration

# Load testing
npm run test:load
📚 Configuration
Environment Variables Reference
Backend Variables



Variable
Default
Description




NODE_ENV
production
Application environment


SERVER_PORT
3001
Backend server port


SERVER_HOST
0.0.0.0
Backend server host


ACCESS_PASSWORD
seedbox123
Authentication password


MAX_CACHE_SIZE
5GB
Maximum cache size


CLEANUP_INTERVAL
1h
Cache cleanup interval



Frontend Variables



Variable
Default
Description




VITE_API_BASE_URL
http://localhost:3001
Backend API URL


FRONTEND_URL
http://localhost:5174
Frontend URL



Docker Variables



Variable
Default
Description




BACKEND_PORT
3001
Docker backend port mapping


FRONTEND_PORT
5174
Docker frontend port mapping



Advanced Configuration
Nginx Configuration (Production)
server {
    listen 80;
    server_name your-domain.com;
    
    location / {
        proxy_pass http://localhost:5174;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
    
    location /api/ {
        proxy_pass http://localhost:3001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
SSL/HTTPS Setup
# Install Certbot
sudo apt install certbot python3-certbot-nginx

# Get SSL certificate
sudo certbot --nginx -d your-domain.com

# Auto-renewal
sudo crontab -e
# Add: 0 12 * * * /usr/bin/certbot renew --quiet
🔧 Troubleshooting
Common Issues
Port Conflicts
# Check if ports are in use
lsof -i :3001
lsof -i :5174

# Kill processes using ports
sudo kill -9 $(lsof -ti:3001)
sudo kill -9 $(lsof -ti:5174)
Docker Issues
# Rebuild containers
docker-compose down
docker-compose up --build

# Clear Docker cache
docker system prune -a

# Check container logs
docker-compose logs seedbox-backend
docker-compose logs seedbox-frontend
PM2 Issues
# Reset PM2
pm2 kill
pm2 start ecosystem.config.js

# Check PM2 logs
pm2 logs --lines 50

# Monitor PM2 processes
pm2 monit
Permission Issues
# Fix file permissions
sudo chown -R $USER:$USER .
chmod +x deploy.sh

# Docker permission issues
sudo usermod -aG docker $USER
newgrp docker
Mobile Video Issues

Ensure CORS is enabled in backend
Check video format compatibility
Verify range request support
Test with different browsers

📖 API Documentation
Authentication Endpoints
POST /api/auth/login
{
  "password": "your_password"
}
Torrent Endpoints
GET /api/torrents/search?q=movie+name
POST /api/torrents/add
{
  "magnetLink": "magnet:..."
}
Streaming Endpoints
GET /api/stream/:torrentId/:fileIndex
Range requests supported for video seeking
Cache Management
GET /api/cache/stats
POST /api/cache/clear
🛡 Security
Best Practices

Change default password immediately
Use HTTPS in production
Keep dependencies updated
Enable firewall rules
Regular security audits

Security Headers
The application includes security headers:

X-Frame-Options: SAMEORIGIN
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Referrer-Policy: no-referrer-when-downgrade

🚀 Deployment
Production Deployment Checklist

 Change default passwords
 Configure HTTPS/SSL
 Set up monitoring
 Configure backups
 Set up log rotation
 Configure firewall
 Test mobile compatibility
 Verify video streaming
 Test authentication
 Monitor performance

Scaling
For high-traffic deployments:

Use load balancer (nginx/HAProxy)
Scale backend horizontally
Implement Redis for session storage
Use CDN for static assets
Monitor resource usage

📞 Support
Getting Help

📖 Documentation
🐛 Issue Tracker
💬 Discussions

Contributing

Fork the repository
Create feature branch
Make changes
Add tests
Submit pull request

⚠️ Legal Disclaimer
IMPORTANT: Please read this disclaimer carefully before using SeedBox Lite.
SeedBox Lite is an open-source project provided for educational and personal use only. We do not endorse, promote, or facilitate copyright infringement, illegal streaming, or piracy in any form. This software is designed to be used with legal content only.

We do not host, store, or distribute any content. All torrents and media are accessed through your own connections.
This application is intended for use with content that you have the legal right to access and stream.
Users are solely responsible for how they use this software and for ensuring compliance with all applicable laws in their jurisdiction.
The creators and contributors of SeedBox Lite take no responsibility for how this software is used.
Using torrents to download or share copyrighted materials without permission may be illegal in your country.

By using SeedBox Lite, you acknowledge that you understand these terms and agree to use the software responsibly and legally.
📄 License
This project is licensed under the Custom Non-Commercial License - see the LICENSE file for details.
Important License Restrictions:

This software is provided for personal, educational, and non-commercial use only
Commercial use is strictly prohibited without explicit written permission
Redistribution must include this license and copyright notice
No warranty or liability is provided with this software

🙏 Acknowledgments

WebTorrent for torrent streaming capabilities
React team for the amazing framework
Docker community for containerization
All contributors and users



Made with ❤️ by hotheadhacker
⭐ Star this repo if you find it useful!

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Deploying DeepSeek on 96 H100 GPUs]]></title>
            <link>https://lmsys.org/blog/2025-05-05-large-scale-ep/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45064329</guid>
            <description><![CDATA[<p>DeepSeek is a popular open-source large language model (LLM) praised for its strong performance. However, its large size and unique architecture, which us...]]></description>
            <content:encoded><![CDATA[DeepSeek is a popular open-source large language model (LLM) praised for its strong performance. However, its large size and unique architecture, which uses Multi-head Latent Attention (MLA) and Mixture of Experts (MoE), require an advanced system for efficient serving at scale. In this blog, we explain how we match DeepSeek's inference system performance with SGLang.

Our implementation, shown in the figure above, runs on 12 nodes in the Atlas Cloud, each equipped with 8 H100 GPUs.
It uses prefill-decode disaggregation and large-scale expert parallelism (EP), achieving a speed of 52.3k input tokens per second and 22.3k output tokens per second per node for 2000-token input sequences.
To the best of our knowledge, this represents the first open-source implementation to nearly match the throughput reported in the official DeepSeek blog at large scale.
By deploying this implementation locally, it translates to a cost of $0.20/1M output tokens, which is about one-fifth the cost of the official DeepSeek Chat API.
Compared to vanilla tensor parallelism using the same resources, this optimized strategy improves the output throuhgput by up to 5x.
This blog dives into our parallelism design, optimization methods, and results. All components of our work are fully open-source, allowing others to explore and build on our efforts. The instructions for reproducing our experiments are fully available here.
Highlight
✅ SGLang now supports prefill-decode (PD) disaggregation and large-scale EP, including the full functionality of DeepEP, DeepGEMM, and EPLB.
✅ Leveraging these new features, our team successfully replicated DeepSeek's inference system using 12 nodes, each with 8 H100 GPUs. In total, SGLang achieves a throughput of 52.3k input tokens per second and 22.3k output tokens per second per node for input sequences of 2000 tokens.
✅ This blog explains technical details of our approach, focusing on optimizations for efficiency, peak memory usage reduction, and workload balancing. The profile results show that our implementation achieves nearly on-par performance with the official DeepSeek’s report.
✅ All experiments and code are fully open-sourced for community access and further development.
Outline

Parallelism Design
Prefill and Decode Disaggregation
Large-scale Expert Parallelism
Evaluation
Toolkits
Limitations and Future Work
Conclusion
Acknowledgment

Parallelism Design
Efficient parallelism is essential to manage the computational complexity and memory demands of DeepSeek's architecture. This section outlines our approach to optimizing key components: attention layers, dense feed-forward networks (FFNs), sparse FFNs, and the language model (LM) head. Each component leverages tailored parallelism strategies to enhance scalability, memory efficiency, and performance.
Attention Layers
DeepSeek employs Multi-head Latent Attention (MLA) to effectively model complex dependencies within input sequences. To optimize this mechanism, we implement DP Attention, a data parallelism strategy that eliminates KV cache duplication across devices, significantly reducing memory overhead. Introduced in SGLang v0.4, this approach has been extended to support hybrid data and tensor parallelism, offering flexibility for processing small batch sizes efficiently.
Dense FFNs
Despite using only three dense FFN layers, DeepSeek-V3's computation can significantly increase peak memory usage, potentially leading to system crashes if not carefully managed. To address this, we adopt Data Parallelism (DP) over tensor parallelism (TP), leveraging the following advantages:

Enhanced Scalability: With an intermediate dimension of 18,432, high TP degrees (e.g., TP32) result in inefficient fragmentation into small-unit segments (e.g., 576 units), which are not divisible by 128—a common alignment boundary for modern GPUs such as H100. This misalignment hampers computational efficiency and memory utilization. DP provides a more scalable solution by avoiding fragmentation, ensuring balanced workload distribution across devices.
Optimized Memory Efficiency: Traditionally, TP reduces memory usage as worker size increases, but this advantage diminishes under DP attention. In a pure TP setup, memory demand for a single-layer Transformer model scales with DP size as: $$\text{Memory}=\frac{N_{\text{param}}}{\text{TP}}+(1+k)N_{\text{hidden_state}}\cdot \text{DP}\notag$$ Here, $N_{\text{hidden_state}}=n_\text{token}\times n_\text{hidden_size}$ is the size of the hidden state on each device (DP rank), $N_{\text{param}}=n_\text{intermediate_size}\times n_\text{hidden_size}$ is the number of model parameters, and $k$ is a coefficient representing extra memory overhead from CUDA Graph duplication. By assuming $\text{DP}=\text{TP}$, this memory usage function is minimized when $\text{TP}=\sqrt{\frac{N_{\text{param}}}{(1+k)N_{\text{hidden_state}}}}$. DeepSeek-V3 uses an intermediate size of 18,432. During the prefill phase, CUDA Graph is typically disabled, so $k = 0$. However, the token size per device can easily exceed 2,048, resulting in an optimal TP size of 3 or less. In the decode phase, a practical configuration might use 128 tokens per device and set $k = 3$. In this case, the memory-optimal TP size is 6. In both phases, a lower TP degree minimizes memory usage per device. As a result, DP may offer a more memory-efficient approach for scaling compared to relying solely on TP.
Minimized Communication Overhead: In pure TP, each FFN necessitates two all-reduce operations, resulting in substantial communication overhead. By leveraging DP, we optimize this process to a single reduce-scatter following the prior attention layer and an all-gather before the next, reducing communication costs by 50%. Furthermore, when attention is also computed under pure DP, inter-device communication is entirely eliminated, significantly enhancing overall efficiency.

The integration of DP dense FFN with DP attention is illustrated in the left figure below. Users can enable this feature by setting --moe-dense-tp-size=1.

Sparse FFNs
In DeepSeek-V3's Mixture of Experts (MoE) architecture, sparse FFNs require substantial expert weights, creating a significant memory bottleneck. To address this, we implement Expert Parallelism (EP), which distributes expert weights across multiple devices. This approach effectively scales memory capacity while maintaining high performance, though it does introduce challenges like irregular all-to-all communication and workload imbalance.
The figure in the right figure above illustrates our EP implementation using the DeepEP framework, with further details on our EP design and optimizations provided in the following sections.
LM Head
The LM head computes output probabilities over a large vocabulary, a resource-intensive operation traditionally handled with vocabulary parallelism to aggregate token logits from TP groups. To enhance scalability and efficiency, we adopt Data Parallelism (DP), mirroring our dense FFN strategy. This reduces memory overhead and simplifies communication across devices, delivering a more streamlined solution.
Prefill and Decode Disaggregation
LLM inference comprises two distinct phases: Prefill and Decode. The Prefill phase is computation-intensive, processing the entire input sequence, while the Decode phase is memory-intensive, managing the Key-Value (KV) cache for token generation. Traditionally, these phases are handled within a unified engine, where combined scheduling of prefill and decode batches introduces inefficiencies. To address these challenges, we introduce Prefill and Decode (PD) Disaggregation in SGLang.
Issues with Unified Scheduling
The conventional unified engine, which processes prefill and decode batches together, results in three significant problems:

Prefill Interruption: Incoming prefill batches frequently interrupt ongoing decode batches, causing substantial delays in token generation.
DP Attention Imbalance: In DP attention, one DP worker may process a prefill batch while another handles a decode batch simultaneously, leading to increased decode latency.
Incompatible with DeepEP: As we will discuss in a later section, DeepEP executes different dispatch modes for prefill and decode, making unified scheduling imcompatible with DeepEP.

PD Disaggregation resolves these by separating the two stages, enabling tailored optimizations for each.
Implementation Details
The PD Disaggregation design in SGLang, depicted in the diagram below, interleaves execution between a Prefill Server and a Decode Server:

Upon receiving an input request, the workflow proceeds as follows:

A Prefill Server and a Decode Server pair via a handshake, establishing a local sender and receiver, respectively.
The Decode Server pre-allocates the KV cache, signaling the Prefill Server to begin the model forward pass and compute the KV caches.
Once computed, the data transfers to the Decode Server, which handles iterative token generation.

This separation ensures each phase operates under optimal conditions, maximizing GPU resource utilization. To further enhance performance, our implementation incorporates:

Non-blocking Transfer: Data send and receive operations run in a background thread, keeping the scheduler’s event loop uninterrupted.
RDMA-Based Transfer: Remote Direct Memory Access (RDMA) leverages queue pairs for connections and scatter-gather elements (SGE) for efficient transfer of non-contiguous memory chunks.
Flexible API Integration: SGLang offers adaptable APIs that integrate high-performance RDMA libraries like Mooncake and NIXL, streamlining data transfers.

More details can be found in our design document.
Large-scale Expert Parallelism
Expert Parallelism with DeepEP
DeepEP, implemented by the DeepSeek team, is a communication library designed to streamline EP in MoE models. It tackles the challenge of efficiently routing tokens to specific experts across multiple GPUs. By providing optimized communication kernels, DeepEP reduces latency and boosts throughput, making it ideal for large-scale inference tasks.
DeepEP provides two specialized dispatch modes to address varying workload demands:

Normal Dispatch: Optimized for handling long input sequences, such as during the prefill phase, this mode prioritizes maximum computational throughput. However, it generates symbolic shapes that are incompatible with CUDA Graph, rendering it less effective for the decode phase, where kernel launch overhead becomes a significant bottleneck.
Low-Latency Dispatch: Tailored for generating output tokens during the decode phase, this mode prioritizes minimal delay to ensure real-time performance. It supports CUDA Graph but requires preallocating a fixed memory size. If the memory demand exceeds this preallocation, a runtime error occurs.

In SGLang, the integration of DeepEP provides auto mode that dynamically selects between these two dispatch modes based on the workload. However, without PD disaggregation, the auto mode faces a limitation: it cannot simultaneously support both normal dispatch (for prefill) and low-latency dispatch (for decode) within the same communication group. This restriction hinders its compatibility with DP attention, which is crucial for memory-efficient inference. The compatibility of each mode is outlined in the table below:



Mode
Long Input
Long Output
DP Attention
CUDA Graph




Normal
✅
❌
✅
❌


Low-Latency
❌
✅
✅
✅


Auto
✅
✅
❌
✅



PD disaggregation addresses this by separating prefill and decode phases, allowing normal dispatch for the prefill phase and low-latency dispatch for the decode phase, both under DP attention. This integration optimizes resource utilization and enhances overall performance by aligning the dispatch mode with the specific needs of each phase.
DeepGEMM Integration
DeepGEMM is another high-efficient library developed by the DeepSeek team, specifically designed to optimize computations in MoE models. It provides two specialized functions for handling MoE-related matrix multiplications (Grouped GEMMs), each tailored to different phases of the inference process.

Grouped GEMMs (contiguous layout): This kernel is designed for dynamic input shapes, making it ideal for the prefill phase of MoE inference. It processes inputs where the data for different experts is concatenated contiguously, allowing for flexible handling of varying input sizes.
Grouped GEMMs (masked layout): This kernel assumes a fixed input shape and uses a mask tensor to compute only the valid portions of the input. It is compatible with CUDA Graph, which optimizes kernel launches, making it well-suited for the decode phase where reducing overhead is critical.

DeepGEMM integrates smoothly with the dispatch modes of DeepEP:

For the contiguous layout kernel, which is used with normal dispatch in the prefill phase, an additional step is required. Since normal dispatch outputs a symbolic shape, a permutation is needed to transform the output into the contiguous format expected by the kernel. We referred to the LightLLM project and implemented a custom Triton kernel for efficient permutation. This kernel ensures that the output from normal dispatch is correctly rearranged, enabling smooth integration with the contiguous GEMM kernel.
The masked layout kernel pairs seamlessly with DeepEP’s low-latency dispatch, as both are optimized for the decode phase and support CUDA Graph.

SGLang also integrates DeepGEMM for MoE computation under tensor parallelism. Additionally, DeepGEMM provides a highly efficient general GeMM kernel, which can be activated in SGLang by setting the environment variable SGL_ENABLE_JIT_DEEPGEMM to 1, offering even greater computational efficiency for non-MoE operations.
Two-batch Overlap
In multi-node environments, limited communication bandwidth can significantly increase overall latency. To tackle this challenge, we implemented Two-batch Overlap (TBO) following DeepSeek's system design. TBO splits a single batch into two micro-batches, allowing computation and communication to overlap, which also lowers peak memory usage by halving the effective batch size. However, putting TBO into practice introduces specific implementation difficulties.
Implementation Challenges
Although DeepSeek released the design framework of TBO, there are two slight implementation challenges.

Code Complexity: Directly coding TBO can lead to duplicated logic for managing multiple micro-batches. This increases the complexity of the codebase, making it harder to maintain and prone to errors, especially as the number of micro-batches or overlapping scenarios grows.
Synchronization Issues in the Prefill Phase: Achieving effective overlap between computation and communication needs consideration when the normal dispatch in DeepEP block the CPU. This blocking behavior can stall the pipeline, leaving the GPU idle and undermining the performance benefits of TBO.

Abstraction for Clean Implementation
To create a more maintainable and reusable codebase, we use an abstraction layer consisting of operations and yield points. This method simplifies development by allowing us to write code as if handling a single micro-batch, while strategically pausing execution by inserting yield points to let other micro-batches proceed. It eliminates code duplication, reduces the potential need for variable postfixes, and efficiently manages cases where some executions complete at a layer's end while others have not. Additionally, it supports easy adaptation to different overlapping region choices or future enhancements, like a three-batch overlap, with minimal code changes. Below is a concise demonstration of this approach:
operations = [
    self._forward_attn,
    YieldOperation(),  # Pause execution for other micro-batches
    self._forward_dispatch,
    self._forward_mlp,
    YieldOperation(),  # Another pause point
    self._forward_combine,
]

# Process a single micro-batch without duplicating code
def _forward_attn(self, state):
    state.hidden_states = self.self_attn(state.hidden_states, ...)

Prefill Overlapping Implementation
We refine the launch order during the prefill phase to avoid CPU-blocking via the dispatch operation in DeepEP, even though we are using its asynchronous mode. Specifically:

The dispatch operation blocks the CPU until the GPU receives metadata from other ranks to allocate correctly sized tensors.
An improper implementation would leave the computation stream idle during this period, as no computation tasks are submitted to the GPU.

To optimize, we prioritize submitting computation tasks to the GPU before launching CPU-blocking communication. This ensures the GPU remains active during communication. As illustrated in the figure below, TBO with a proper launch order, indicated by bolded borders, avoids bubble caused by a CPU-blocking operation (i.e., normal dispatch).

Expert Parallelism Load Balancer
In MoE models, EP often leads to uneven workload distribution across GPUs. This imbalance forces the system to wait for the slowest GPU computation or communication, wasting compute cycles and increasing memory usage due to expert activations. As the number of GPUs (EP size) increases, the imbalance issue gets more severe.
To address this, DeepSeek developed the Expert Parallelism Load Balancer (EPLB). EPLB takes expert distribution statistics as input and computes an optimal arrangement of experts to minimize imbalance. Users can allocate redundant experts (e.g., 32 additional experts), which, when combined with the original 256, create a pool of 288 experts. This pool allows EPLB to strategically place or replicate experts—for instance, duplicating the most frequently used expert multiple times or grouping a moderately used expert with rarely used ones on a single GPU.
Beyond balancing workloads, EPLB offers greater flexibility in parallelism design. With the original 256 experts, parallelism sizes are restricted to powers of two. EPLB’s use of 288 experts enables more diverse configurations, such as parallelism sizes of 12 or 72.
In the figure below, we demonstrate the effects of scale and EPLB algorithm to the imbalance issue via simulation. We compute GPU balancedness as the ratio between mean computation time and maximum computation time for a MoE layer among GPUs, and we use the number of tokens for a GPU to estimate the computation time for it. As can be seen, utilization rate decreases when the system scales with the number of nodes, and enabling EPLB significantly improves the utilization.

EPLB for Real-World Serving
For EPLB to be effective, the input distribution must closely match the actual serving workload. Two strategies enhance this alignment:

Increasing Batch Size: Larger batches reduce random fluctuations in expert usage, which improves balance, which can be achieved by scaling the cluster or using techniques like Multi-Token Prediction (MTP).
Periodic Rebalancing: Regularly updating the expert arrangement leverages temporal locality but requires efficient reloading of experts. This necessitates minimizing the cost of expert reloading operations.

Even with EPLB, some imbalance is inevitable, making further optimization a valuable future direction.
Implementation of Rebalancing
SGLang implements expert rebalancing in three stages to ensure efficiency and minimal disruption:

System Loading Stage: Weights are optionally preloaded from disk to main memory for faster rebalancing or kept on disk with memory mapping (mmap) for reduced memory usage.
Rebalance Preparation Stage: Required weights are asynchronously transferred to device memory in the background, utilizing free DMA hardware engines without interrupting ongoing GPU operations.
Rebalance Execution Stage: A device-to-device copy updates the weights. This step can be further optimized through physical memory rebinding techniques.

This staged approach ensures that rebalancing is both efficient and non-disruptive, maintaining system performance during updates.
Evaluation
End-to-end Performance
Experimental Setup
We evaluated the end-to-end performance of different configurations of SGLang using DeepSeek-V3 on a cluster of 12 nodes, connected via InfiniBand and each equipped with 8 H100 GPUs. This evaluation highlights the throughput improvements enabled by our advanced optimization techniques. We compared the following four settings:

SGLang with TP16 x 6: Every two nodes are paired with an independent group, running DeepSeek-V3 inference with a TP size of 16 and DP attention.
SGLang with PD Disaggregation: This version incorporates PD disaggregation and full EP optimization. For the EPLB, we adopt a distribution matching the input/output data, as real-time serving statistics are unavailable.
SGLang with PD Disaggregation and simulated MTP: To simulate MTP’s effects, we firstly double the batch size and halve the Key-Value KV cache length to maintain the same workload for GroupedGeMM computation and memory access. Moreover, we insert dummy kernels after the real attention computation to ensure the attention phase takes the same time as in DeepSeek’s profile, accurately reflecting the slowdown caused by MTP’s attention mechanism. We conservatively assume a 70% acceptance rate under MTP.
DeepSeek Profile Results: Throughput estimates are derived from DeepSeek’s official profiling data.

Performance Analysis of Prefill and Decode Phases
To accommodate varying workload demands, we independently evaluated the prefill (P) and decode (D) phases, assuming unlimited resources for the non-tested phase to isolate and maximize the load on the tested nodes—mirroring the setup used by DeepSeek. The results are summarized below:

Prefill Phase: On 4 nodes (4×8×H100, EP32), the system achieved per-node throughputs of 57,674, 54,543, and 50,302 tokens per second for prompt lengths of 1K, 2K, and 4K, respectively. As shown in the bar chart below, this represents up to a 3.3× improvement over the TP16 baseline, largely attributable to the optimized GroupedGeMM kernel (DeepGEMM) and two-batch overlap. Assuming a perfectly balanced workload, our system’s throughput is within 5.6% of DeepSeek's official profile.
Decode Phase: Evaluated on 9 nodes (9×8×H100, EP72; half the scale of DeepSeek), the system achieved 22,282 tokens/sec per node for 2K inputs—representing a 5.2× speedup over the TP16 baseline. Under simulated MTP conditions—with attention kernels intentionally slowed to reflect real-world latency—the system sustained a high throughput of 17,373 tokens/sec per node for 4K inputs, just 6.6% below DeepSeek’s official profile. As shown in the figure on the right, these performance gains are largely attributed to 4× larger batch sizes enabled by EP, which enhances scalability by significantly reducing per-GPU memory consumption of model weights.


Profile Results
This section compares SGLang’s performance with DeepSeek’s inference system, aligning our experimental setup as closely as possible to DeepSeek’s production environment. We analyze overall throughput and detailed kernel breakdowns, benchmarking against DeepSeek’s blog and public profile data.
Overall Throughput
For prefill, we tested a scenario with 16,384 tokens per device and an input length of 4,096. Due to uncertainty in DeepSeek’s expert distribution, we evaluated two cases: one with default expert distribution and another with simulated perfect EPLB (random expert selection following group-limited routing semantics) as a performance upper bound.
The results are presented below:




DeepSeek Blog (excl. cache hit)
DeepSeek Profile
SGLang (Default)
SGLang + Simulated Perfect EPLB




Batch Size
N/A
16,384
16,384
16,384


Input Length
N/A
4,096
4,096
4,096


Throughput (per node)
32,206
62,713
50,302
59,337



DeepSeek’s profile reports a throughput roughly twice that of its production environment. SGLang with default expert imbalance is 20% slower than DeepSeek’s profile, while the simulated perfect EPLB case narrows the gap to 6%.
For decode, the results are shown below:




DeepSeek Blog
DeepSeek Profile
SGLang (Default)
SGLang + Simulated MTP (Slow Attention)




Batch Size
N/A
128
256
128


KV Cache Length
4,989
4,096
2,000
4,000


Number of Nodes
18
16
9
9


Throughput (per node)
14,800
18,598
22,282
17,373



Using half the nodes of DeepSeek, SGLang with simulated MTP is only slightly slower than DeepSeek’s profile. In a higher batch size setting (256 sequences, 2,000 input length), SGLang achieves 22,282 tokens per second per node, demonstrating strong scalability.
Detail Breakdown
The figure below breaks down kernel execution times for prefill, including unit test results as a theoretical upper bound:


Default EPLB: Communication kernels exhibit longer execution times and higher variance compared to DeepSeek’s profile, likely due to greater expert imbalance. This leads to extended computation stream bubbles, slowing down overall performance.
Simulated Perfect EPLB: This setup aligns more closely with DeepSeek’s profile, though discrepancies remain, indicating potential areas for optimization.
Comparison with Unit Tests: Both DeepSeek and SGLang have a communication time slower than unit test results, while the latter is achievable when disabling TBO, revealing a potential optimization direction if communication is the bottleneck.

SGLang’s decode kernel breakdown aligns closely with DeepSeek’s, as shown below:

Key observations include:

Combine Time Discrepancy: SGLang’s combine operation appears 2x slower than DeepSeek’s due to shorter attention computation, causing communication kernels to busy-wait. In the simulated slow attention experiment, combine time matches DeepSeek’s, confirming this hypothesis.
MoE Performance: SGLang’s MoE kernels are 25% slower, possibly because DeepSeek’s 18 nodes (versus our 9) distribute experts more efficiently, reducing memory access overhead for GEMM operations.
Dispatch Optimization Potential: Both DeepSeek and SGLang show dispatch times of ~0.17ms per layer, but unit tests with DeepEP reveal a potential of 0.06ms occupying SMs. Currently, dispatch spends significant time busy-waiting for data. Inserting slow dummy kernels between send/receive operations reduces dispatch time to 0.09ms, and in-flight duration analysis using unit test data suggests further improvements are possible.

While minor enhancements remain—primarily in kernel fusion under "Other Kernels"—SGLang’s decode performance is largely aligned with DeepSeek’s, with prefill optimization as the next focus.
Ablation Study: Two-batch Overlap
Impact of Batch Size and Attention Time
This section investigates TBO performance across varying batch sizes and simulated MTP scenarios.

TBO delivers two significant benefits in the prefill phase, as evidenced by throughput comparisons and memory usage optimizations:

Support for Larger Batch Sizes: In the vanilla configuration, each device processes up to 8,192 tokens before encountering out-of-memory (OOM) errors at 16,384 tokens. TBO mitigates this by optimizing memory usage for input tokens, enabling inference with batches as large as 16,384 tokens per device. This further boosts performance to 40.5% increase when comparing the TBO flag with all other configurations made optimal.
Enhanced Throughput: By overlapping computation (e.g., attention and MLP phases) with communication (e.g., DeepEP Combine and Dispatch), TBO achieves a 27% to 35% throughput increase compared to the vanilla setup, even when processing the same token count per device.

TBO’s impact in the decode phase varies by scenario, with performance tied to batch size and attention processing time:

Real Test Cases: Speedup in practical scenarios is contingent on batch size exceeding a threshold between 64 and 128 tokens. Below this, TBO yields minimal or negative gains (e.g., -27% at 32 tokens/device), as small decode batch sizes hinder kernel efficiency. The speedup reaches 25.5% at 256 tokens with a performance of 22,310 tokens per second.
Simulated MTP Scenario: TBO provides the most substantial speedup in simulated MTP cases when processing 128 requests to generate 256 tokens per decode step. This is due to prolonged attention processing time, which aligns computation (e.g., DP Attention layers) with DeepEP communication overhead (e.g., combine and dispatch steps). The evaluation shows a 35% speedup at 128 sequences/device, with throughput 17,552 tokens per second compared to 12,929 without TBO.

Detail Breakdown
We evaluated three prefill scenarios: TBO with 16k tokens per batch, TBO with 8k tokens, and no-TBO with 8k tokens. The figure below reveals key insights:

TBO Efficiency: Comparing the 8k cases, TBO improves overall efficiency by overlapping computation and communication, as expected.
Batch Size Impact: Reducing the batch size from 16k to 8k with TBO results in a slight slowdown, reflecting diminished kernel efficiency with smaller batches.
Kernel Performance: Interestingly, the no-TBO 8k case outperforms the TBO 16k case in per-kernel speed, despite both having an effective batch size of 8k for kernels. This may stem from reduced streaming multiprocessors (SMs) with TBO, potential noisy neighbor effects during overlap, or kernel incompatibility between computation and communication. These findings suggest future optimization directions for SGLang.


For the decode phase, we analyzed three configurations: TBO with a batch size of 256, no-TBO with 256, and no-TBO with 128. The time breakdown is shown below:

TBO vs. No-TBO (Batch Size 256): Without TBO, communication time increases significantly due to the lack of overlap. However, computation kernels, particularly GEMM, benefit from a larger effective batch size, resulting in faster execution.
TBO (256) vs. No-TBO (128): Comparing cases with the same kernel batch size, only non-overlapped communication slows down in the no-TBO setup, while computation remains consistent. Unlike prefill, decode communication kernels either fully utilize SMs (during send/receive) or none (during inflight waiting), avoiding resource contention with computation kernels.


Ablation Study: EPLB
This section evaluates the impact of the EPLB on system performance through overall throughput analysis and detailed case studies. Given EPLB's sensitivity to workload distribution and distribution shifts in production environments, we focus on qualitative and generalizable insights rather than real-world performance, which requires production data.
Overall Results
The figure below illustrates EPLB's effect on throughput in large-scale settings. EPLB delivers a significant speedup of 1.49x (prefill) and 2.54x (decode), as expected, due to its ability to mitigate workload imbalances across GPUs. As the number of ranks scales, imbalances grow, and EPLB effectively addresses this in our large-scale experiments, leading to notable throughput improvements.

Case Study: Workload Imbalance Versus Overall Throughput
To explore the relationship between workload imbalance and throughput, we conducted a case study using a decode experiment with 1800 input tokens, 100 output tokens, and a batch size of 256. Throughput and balancedness (average token count divided by maximum token count across experts) were plotted against decoding steps:

The results reveal a strong correlation between balancedness and throughput, emphasizing the importance of maintaining high balancedness for optimal performance.
Case Study: Expert Distribution Statistics
The following figure presents expert distribution statistics for prefill and decode sample data:

Key observations include:

Imbalance in Expert Usage: Most experts are infrequently used, while a small subset is heavily utilized, underscoring the inherent imbalance in MoE models.
Prefill vs. Decode Differences: Although prefill and decode distributions share similarities, notable differences exist. This supports the use of PD disaggregation, which enables distinct expert placements for each phase, optimizing performance.

These findings highlight EPLB's role in addressing workload imbalances and the value of tailoring expert placement to phase-specific demands.
Toolkits
Disposable Tensor
Memory management in PyTorch can be challenging due to persistent object references, especially in GPU-intensive workflows where CUDA memory is a scarce resource. Consider the following example:
def ffn(hidden_state: torch.Tensor, linear1: nn.Linear, linear2: nn.Linear):
    intermediate_state = linear1(hidden_state)
    del hidden_state  # Attempt to free memory, but no effect due to external reference
    return linear2(nn.ReLU(intermediate_state))

hidden_state = ffn(hidden_state, linear1, linear2)

In this code, del hidden_state is intended to release the memory occupied by hidden_state after intermediate_state is computed. However, as hidden_state is still referenced outside the function, the del operation has no effect. This increases peak memory usage, risking performance slowdowns or out-of-memory errors.
SGLang addresses this with the DisposableTensor class, a subclass of torch.Tensor which introduces a dispose() method to explicitly and immediately release a tensor’s memory, circumventing Python’s reference counting limitations. Here’s how it works:
def ffn(hidden_state: torch.Tensor, linear1: nn.Linear, linear2: nn.Linear):
    intermediate_state = linear1(hidden_state)
    hidden_state.dispose()  # Immediately releases CUDA memory
    return linear2(nn.ReLU(intermediate_state))

# Wrap the tensor in DisposableTensor
hidden_state = DisposableTensor(hidden_state)
hidden_state = ffn(hidden_state, linear1, linear2)

By wrapping hidden_state in a DisposableTensor and calling dispose() when it’s no longer needed, the CUDA memory is freed right away. This ensures that memory is released as soon as the tensor’s role in the computation is complete, reducing peak memory usage and improving overall efficiency.
Expert Workload Extraction and Simulation
SGLang also includes a toolset for analyzing and simulating expert workload distribution in MoE models. This feature enables users to:

Dump Expert Workload Statistics: Extract either accumulated statistics or per-batch workload data. Accumulated stats support the EPLB manager for real-time optimization, while per-batch data provides granular insights for analysis and simulation.
Simulate Expert Utilization: Model expert balance across various configurations without requiring costly hardware or repeated trials. For instance, users can gather workload data from a modest setup (e.g., 2x8xH100 or 8xH200) and simulate the performance for a large-scale 22-node deployment.

This simulation capability allows users to evaluate how factors like rebalancing frequency, node count, or batch size impact system performance. It’s a cost-effective way to fine-tune configurations before scaling up.
Limitations and Future Work
While our implementation of SGLang for DeepSeek-V3 inference demonstrates significant throughput improvements, several limitations and areas for future enhancement remain:

Latency Optimization: The current focus on throughput leaves Time to First Token (TTFT) at 2–5 seconds and Inter-Token Latency (ITL) at approximately 100ms, requiring further optimizations for real-time use cases.
Sequence Length Constraints: Limited to shorter sequences due to the use of 96 GPUs. Expanding GPU resources would support longer sequences, essential for specific applications.
Multi-Token Prediction (MTP) Integration: SGLang supports MTP but lacks full integration with DP attention, reducing efficiency in mixed parallelism configurations.
EPLB Distribution: The experiments in this blog utilizes in-distribution data for Expert Parallelism Load Balancer (EPLB), which may not reflect real-world variability. Future work should experiment performances when having distribution shifts.
Flexible Tensor Parallelism (TP) Sizes: For DeepSeek-V3, memory-optimal TP sizes for dense FFNs are small but larger than 1. Currently, SGLang only supports pure TP or DP, leading to suboptimal memory use. Flexible TP options are needed.
Blackwell Support: Currently, our implementation supports only the NVIDIA Hopper architecture. We are actively working to extend compatibility to the next-generation Blackwell architecture. If you are interested in supporting or sponsoring this development, welcome to contact lmsys.org@gmail.com.

Conclusion
By leveraging PD disaggregation, EP, and a carefully crafted parallelism design, we’ve reproduced DeepSeek’s inference framework in SGLang with exceptional performance. Our open-source efforts—achieving 52.3k input tokens per second and 22.3k output tokens per second—demonstrate SGLang’s power for large-scale LLM inference. We invite the community to explore, replicate, and extend this work to push the boundaries of efficient AI deployment.
Acknowledgment
We would like to express our heartfelt gratitude to the following teams and collaborators:

SGLang Core Team and Community Contributors — Jingyi Chen, Cheng Wan, Liangsheng Yin, Baizhou Zhang, Ke Bao, Jiexin Liang, Xiaoyu Zhang, Yanbo Yang, Fan Yin, Chao Wang, Laixin Xie, Runkai Tao, Yuhong Guo, Kaihong Zhang, Lei Yu, Yu-Hsuan Tseng, Qilin Tian, Peng Zhang, Yi Zhang, Yineng Zhang, Byron Hsu, and many others.
Atlas Cloud Team —  Jerry Tang, Wei Xu, Simon Xue, Harry He, Eva Ma, and colleagues — for providing a 96-device NVIDIA H100 cluster and offering responsive engineering support.
NVIDIA Solution Architect Team — Xuting Zhou, Jinyan Chen, and colleagues — for their work on the seamless integration of expert parallelism.
NVIDIA Enterprise Product Team — Trevor Morris, Elfie Guo, Kaixi Hou, Kushan Ahmadian, and colleagues — for optimizing the DeepSeek R1 kernels.
LinkedIn Team — Biao He, Qingquan Song, Chunan Zeng, Yun Dai, Yubo Wang, and colleagues — for optimizing the Flash-Attention 3 backend.
Mooncake Team — Shangming Cai, Teng Ma, Mingxing Zhang, and colleagues — for their collaboration on PD disaggregation in SGLang.
FlashInfer Team — Zihao Ye, Yong Wu, Yaxing Cai — for additional DeepSeek R1 kernel optimizations.
Dynamo Team - Kyle Kranen, Vikram Sharma Mailthody, and colleagues - for extra support on PD disaggregation in SGLang.

Thank you all for your invaluable support and collaboration.
Appendix
Related PRs: #1970 #2925 #4068 #4165 #4232 #4390 #4435 #4521 #4654 #4767 #4770 #4836 #4880 #4957 #5068 #5085 #5295 #5415 #5432 #5435 #5530 #5558 #5561 #5626 #5657 #5805 #5819 #5890 DeepEP#142
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Flunking my Anthropic interview again]]></title>
            <link>https://taylor.town/flunking-anthropic</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45064284</guid>
            <description><![CDATA[I didn't misclick any buttons. My best wasn't good enough. I'm not good enough.]]></description>
            <content:encoded><![CDATA[
Here's a vague overview of what just happened:

I recently applied for
Anthropic's Developer Relations role.
My friend who works there gave me a glowing recommendation (thanks again,
dude!).
I completed their secret take-home assignment.
On top of their secret take-home assignment, I independently published
diggit.dev and a companion blogpost
about my [sincerely] positive experiences with Claude. I was hoping that
some unsolicited "extra credit" would make me look like an
exceptional/ambitious candidate.
I
posted diggit.dev to HackerNews
and it hit the frontpage!
I submitted my take-home assignment and my unsolicited extra credit.
They sent me
the "unfortunately" email.

Anthropic obviously didn't do anything wrong. I'm just bummed.
Claude Code truly is one of my favorite dev tools ever, and if you've suffered
through my talks/interviews, you're probably sick of my
enthusiasm for software. I was particularly excited to interview with Anthropic
because I respect their approach to responsible AI adoption. This very blog
is too often a crazed celebration of humans, of software, of AI, of progress, of
sincerity -- I, I felt like I was a perfect fit.
The first time I flunked an Anthropic interview (ca. 2022), I accidentally
clicked a wrong button during their automated coding challenge. It was easy to
swallow that failure. I made an honest mistake; I expect companies to reject
candidates who make honest mistakes during interviews.
This is different. I didn't misclick any buttons. My best wasn't good enough.
I'm not good enough.
This essay started as a fantasy: some hero at Anthropic reads this on HackerNews
and vouches for me and I get the job and I help them guide humanity toward
post-scarity AI abundance, forever and ever, amen. I'm ashamed of these
thoughts. It's the same folly of explaining to an ex-girlfriend why she's wrong
about her own experience.
Dating was difficult for me. I don't mind feeling ugly or low-status or whatever
-- I know my place. But it hurts to feel seen, feel considered, but ultimately
rejected due to mysterious forces: "He's cute, but he's too weird."
Yes, I'm weird. My eccentric habits have been an overall boon for my career, for
my relationships, for my well-being. But it's moments like these when I just
want to turn all my weird off. I want to be a square peg for this square hole
and do honest work and feed my family and help humanity thrive.
I can't turn my weird off, so I think I defensively dial it up sometimes. I
exaggerate my eccentricities. It's easy to swallow criticism when it isn't the
real me, when it isn't my best, when it's honest mistakes -- what a load
of crap. This is me. This is my best. Hello, world.
Now it's all coming back in waves, in gasps -- I spent so much of my life being
an unlikable jerk. Becoming somebody else has been slow/painful and I'm so
deeply afraid of regressing. Over the past decade, I've been striving to spread
joy, to do good, to be better. I'm trying so hard.
And all this keyboard vomit is a promise to myself that I'm not giving up. I
hate this feeling, and I'm staring these nightmares straight in their stupid
eyeballs, and they're not blinking. I am still alive, and I have so much more to
do.
I'm okay. I mean it. I don't need (or deserve) your sympathy. I'm so lucky to be
alive, at this time, at this place, in this body, with these people. My life is
great, and it will get even better if I keep putting in this effort.
Spewing my insides like this onto The Internet is terrifying, but I suspect many
strangers are facing similar feelings. It's rough out there. Whatever it is,
wherever you are, I hope this helps. You've got this. You're not alone, and
we're only human.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: Find Hidden Gems on HN]]></title>
            <link>https://pj4533.com/hn-overlooked/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45064210</guid>
            <description><![CDATA[This tool helps you discover recent hidden gems on Hacker News – high-effort posts that haven't gotten much attention.]]></description>
            <content:encoded><![CDATA[
                This tool helps you discover recent hidden gems on Hacker News – high-effort posts that haven't gotten much attention.
                
                Why "Recent"?
                We search the HN API's Ask, Show, and New story feeds, which typically contain posts from the last 3-7 days. This ensures fresh content while keeping the search fast.
                
                Passion Score
                Posts are ranked by their Passion Score, which identifies high-effort, low-engagement content:
                
                
                    Passion Score = (Text Length Score) / (Engagement + 1)
                    
                    Where:
                    • Text Length Score = min(text_length / 500, 10)
                    • Engagement = votes + (comments × 2)
                
                
                Higher scores indicate more "overlooked" posts – substantial writing with minimal recognition. Perfect for finding thoughtful contributions that the community may have missed.
            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: Sosumi.ai – Convert Apple Developer docs to AI-readable Markdown]]></title>
            <link>https://sosumi.ai/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45063874</guid>
            <description><![CDATA[sosumi.ai provides Apple Developer documentation in an AI-readable format by converting JavaScript-rendered pages into Markdown.]]></description>
            <content:encoded><![CDATA[
            
                Disclaimer: This is an unofficial, independent project and is not affiliated with or
                endorsed by Apple Inc. “Apple”, “Xcode”, and related marks are trademarks of Apple Inc.
            
            
                This service is an accessibility-first, on‑demand renderer. It converts a single Apple Developer page to
                Markdown only when requested by a user. It does not crawl, spider, or bulk download; it does not attempt
                to bypass authentication or security; and it implements rate limiting to avoid imposing unreasonable
                load.
            
            
                Content is fetched transiently and may be cached briefly to improve performance (approximately 30
                minutes). No permanent archives are maintained. All copyrights and other rights in the underlying
                content remain with Apple Inc. Each page links back to the original source.
            
            
                Your use of this service must comply with Apple’s Terms of Use and applicable law. You are solely
                responsible for how you access and use Apple’s content through this tool. Do not use this service to
                circumvent technical measures or for redistribution.
            
        ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Grok Code Fast 1]]></title>
            <link>https://x.ai/news/grok-code-fast-1</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45063559</guid>
        </item>
        <item>
            <title><![CDATA[Sig Sauer citing national security to keep documents from public]]></title>
            <link>https://practicalshootinginsights.com/eighth-circuit-fmeca-update/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45063431</guid>
            <description><![CDATA[The secrecy battle over the Army’s Failure Modes, Effects, and Criticality Analysis (FMECA) for Sig Sauer’s P320 has followed Glasscock v. Sig Sauer to the Eighth Circuit. A media intervenor is now asking the appellate court to keep key records open—and their brief places Practical Shooting Insights (this site) squarely in the middle of the story.]]></description>
            <content:encoded><![CDATA[
      
        
          
          

  
    
      
      
        
        
        August 28, 2025
      
    

    

    
      
      

      
        
        
          4 minute read
        
      
    
  


        
      

      
        
        The secrecy battle over the Army’s Failure Modes, Effects, and Criticality Analysis (FMECA) for Sig Sauer’s P320 has followed Glasscock v. Sig Sauer to the Eighth Circuit. A media intervenor is now asking the appellate court to keep key records open—and their brief places Practical Shooting Insights (this site) squarely in the middle of the story.

What’s new


  The Trace intervenes in the appeal. The newsroom moved to intervene for the limited purpose of opposing sealed filings tied to class certification and the FMECA, arguing the public’s right of access and noting the district court cited the FMECA nine times when it certified the class.





  Sig Sauer says “national security” and asks for deference to the Army. In opposing intervention, Sig Sauer urges the court to leave FMECA-related material sealed and to give the Army time to weigh in, framing the dispute in terms of protecting “military secrets.”







  A second FMECA document emerges. Sig Sauer’s opposition confirms there are two FMECA records in the class-certification exhibits: a FMECA Spreadsheet and a FMECA Memorandum—the latter not previously described in public filings—raising fresh questions about what the memo contains and who authored it.





  PSI’s reporting is part of the record. The Trace’s filing tells the court the unredacted FMECA was found on CourtListener, de‑obscured, and published on Practical Shooting Insights, where it “remains available”—and it recounts Sig Sauer’s own executive discussing it on a podcast while pointing viewers to this website.






The FMECA document was previously published here.



The Trace’s pitch: This isn’t secret anymore

The Trace walks the appellate court through how the FMECA left the bottle: it was posted on this website and then widely republished; a YouTube explainer discussing it surpassed 100,000 views. The filing quotes Sig Sauer’s VP of Consumer Affairs Phil Strader being asked on the Behind the Lens podcast why the FMECA shouldn’t be public and responding, “No, there’s not” (nothing to hide), while directing viewers to this website to see the document and describing its contents.





The reporting regarding Phil Strader’s interview was previously published here

How many times has the unredacted FMECA been “shared”? The filings don’t give a precise share count. What they do document is widespread republication and discussion, including the 100k‑plus video and multiple re‑posts mirroring the PSI copy. In other words, the genie is out of the bottle.

The Trace also points to DoD Instruction 5230.24, the policy Sig Sauer invokes, noting it does not authorize withholding unclassified information about evaluations of performance and reliability of military equipment—and that the PSI‑hosted FMECA bears no DoD distribution markings.





Sig Sauer’s response: Let the Army decide—and keep the lid on

Sig Sauer tells the Eighth Circuit The Trace lacks standing and that parallel briefing is already underway in the district court. Substantively, Sig Sauer leans on military‑secrets concerns, requests time for the Army to opine on release, and characterizes the FMECA as controlled technical information created under the MHS contract. (The company also recounts how the spreadsheet briefly became public in another case before being pulled down.)



Two details in Sig Sauer’s papers matter going forward:

1) The “FMECA Memorandum.” Sig Sauer identifies the memo alongside the previously published spreadsheet. If the memo is Sig Sauer‑authored, it could reveal how the company framed the Army analysis internally—an issue directly relevant to notice, risk mitigation, and marketing claims.

2) Ongoing Army communications. Sig Sauer’s litigation counsel filed a declaration stating he asked the Army about the FMECA’s distribution status and that key Army decision‑makers were unavailable the week of the deadline; Sig Sauer says the Army may submit information and seeks additional time.





The transparency question, distilled


  
    Is the FMECA “national‑security” material? The Trace says no—and points to DoDI 5230.24’s carve‑out: it does not provide authority to withhold unclassified evaluations of performance and reliability—exactly what a FMECA is. It also underscores the lack of any DoD marking on the PSI copy.
  
  
    Is secrecy even possible at this point? The record shows the unredacted spreadsheet is online on this website, has been reposted broadly, and has been discussed by Sig Sauer’s own executive on air—who told listeners where to find it. One video discussing it has 100,000+ views.
  




Why this matters to the class action—and to owners

The district court relied on the FMECA repeatedly when certifying the Missouri class, including on notice and risk‑mitigation questions—the very issues consumers care about. Keeping the heart of that analysis under seal on appeal would blunt the public’s ability to scrutinize a product‑safety fight with real‑world consequences.



My role, plainly

Practical Shooting Insights is an independent site covering the shooting‑sports and firearms industry. The Trace’s filing names PSI as the first publisher of the unredacted spreadsheet and quotes Strader pointing viewers here. I will continue to publish filings and analysis so readers can compare the arguments to the documents themselves.



What to watch next

1) Whether the Eighth Circuit permits intervention and applies the strong presumption of public access to class‑certification records.
2) If the Army weighs in—and on what basis—regarding the FMECA’s distribution status.
3) Disclosure of the FMECA Memorandum. If it’s Sig Sauer-authored, it could illuminate internal framing of hazards and fixes—material at the core of consumer‑protection claims.

        
      

      

      


      
  


    ]]></content:encoded>
        </item>
    </channel>
</rss>