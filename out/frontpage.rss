<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Fri, 12 Sep 2025 10:09:37 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Examples from The LaTeX Companion book (3rd edition)]]></title>
            <link>https://ctan.org/pkg/tlc3-examples</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45220121</guid>
            <description><![CDATA[The PDFs (as used with spotcolor and trimming) and sources for all
      examples from the third edition (Parts I+II), together with necessary
      supporting files. The edition is published by Addison-Wesley, 2023,
      ISBN-13: 978-0-13-816648-9, ISBN-10: 0-13-816648-X (bundle of Part I & II).]]></description>
            <content:encoded><![CDATA[
   
    tlc3-examples – All examples from “The LaTeX Companion”, third edition
    
    
      The PDFs (as used with spotcolor and trimming) and sources for all
      examples from the third edition (Parts I+II), together with necessary
      supporting files. The edition is published by Addison-Wesley, 2023,
      ISBN-13: 978-0-13-816648-9, ISBN-10: 0-13-816648-X (bundle of Part I & II).
    
    
      Sources/info/examples/tlc3
      DocumentationREADME.md
      
      
      Bug trackerhttps://github.com/FrankMittelbach/tlc3-examples/issues
      
      Repositoryhttps://github.com/FrankMittelbach/tlc3-examples
      
      
      LicensesThe LaTeX Project Public License 1.3c
      
      MaintainerFrank Mittelbach
      
      Contained inTeX Live as tlc3-examples
      TopicsBook examples
      
    
    
      Download the contents of this package in one zip archive
        (82.4M).
    
    
    
 
      
      

    
    

    
     Package Links
     
    
    
    
    
  
   
  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Performance-focused forks of styled-components]]></title>
            <link>https://www.sanity.io/blog/cut-styled-components-into-pieces-this-is-our-last-resort</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45219406</guid>
            <description><![CDATA[After styled-components entered maintenance mode, we forked it with React 18's useInsertionEffect. Result: 40% faster renders for Linear. Open source solution.]]></description>
            <content:encoded><![CDATA[styled-components maintenance mode: A 40% faster fork | Sanity]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hyundai is now delaying its EV battery plant that was raided by ICE]]></title>
            <link>https://electrek.co/2025/09/11/hyundai-now-delaying-ev-battery-plant-raided-by-ice/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45219388</guid>
            <description><![CDATA[Construction on Hyundai’s electric vehicle battery site that was raided by ICE last week is now facing more setbacks. Hyundai...]]></description>
            <content:encoded><![CDATA[
					

	

Construction on Hyundai’s electric vehicle battery site that was raided by ICE last week is now facing more setbacks. Hyundai is delaying work at the EV battery plant as the detained workers are expected to fly home on Thursday.



Hyundai is delaying its EV battery plant raided by ICE



During an interview on Thursday, Hyundai’s CEO José Muñoz announced the site will be delayed by at least a few months following the raid.



“This is going to give us minimum two to three months delay, because now all these people want to get back,” he said. Hyundai needs to fill the positions, and as Muñoz explained, “for the most part, those people are not in the US.”



The sudden announcement comes after federal agents raided the battery plant site on September 4, detaining 475 workers.	
	



Hyundai co-owns the plant with LG Energy Solutions, which is set to supply batteries to its nearby production site, the Hyundai Motor Group Metaplant America (HMGMA). 



Although a charter plane is waiting in Atlanta to fly the workers home, the raid is already sparking backlash. South Korean ministry spokesperson Lee Jae-woong warned that “The economic activities of our companies investing in the US and the rights and interests of our nationals must not be unfairly violated.”



Hyundai Motor Group Metaplant America EV plant (Source: Peter Johnson/ Electrek)



The raid occurred just days after South Korean President Lee Jae Myung met with President Trump at the White House, pledging to invest another $150 billion in the US, including a new EV battery plant.



However, after videos and images showed the detained workers shackled before being transferred onto buses, the operation is fueling outrage among South Koreans and will likely have bigger economic implications.



The new 2025 Hyundai IONIQ 5 at a Tesla Supercharger (Source: Hyundai)



Hyundai and LG’s battery plant is just one of 20 sites under construction in the US by a South Korean company. Several LG Energy Solutions’ construction sites have already been disrupted, while others fear similar crackdowns may follow.



Hyundai currently builds the new IONIQ 5 and larger IONIQ 9 electric SUVs at the production plant. The site in total spans about 3,000 acres, including the assembly facility, EV battery plants, and various other parts plants.



Electrek’s Take



The raid on Hyundai’s plant was frankly an embarrassment and will likely have much bigger impacts. Hyundai pledged to invest $12.6 billion in Georgia, creating 8,500 new jobs, marking the state’s largest economic project to date.



A Center for Automotive Research report found that Hyundai’s EV plant would generate over 50,000 new jobs indirectly, including suppliers and joint battery ventures.




	Donald Trump has made it clear that he wants to arrest and deport as many “illegal” immigrants as possible, but he also wants to bring manufacturing back to the US.



The Hyundai plant raid is just another setback for the US auto industry. It has put thousands of new jobs and billions in investments at risk. It ultimately puts the US further behind China, South Korea, and others who are quickly emerging as powerhouses with advanced new batteries, software, and other EV tech.



Trump’s raid on the Hyundai plant could give a new meaning to the “Trump Slump” as fear spreads over similar crackdowns.



Source: Bloomberg
	
			
			
		
			
	FTC: We use income earning auto affiliate links. More.				]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Qwen3-Next]]></title>
            <link>https://qwen.ai/blog?id=4074cca80393150c248e508aa62983f9cb7d27cd&amp;from=research.latest-advancements-list</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45219228</guid>
        </item>
        <item>
            <title><![CDATA[Debian 13, Postgres, and the US time zones]]></title>
            <link>https://rachelbythebay.com/w/2025/09/11/debtz/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45218111</guid>
        </item>
        <item>
            <title><![CDATA[The challenge of maintaining curl]]></title>
            <link>https://lwn.net/Articles/1034966/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217858</guid>
            <description><![CDATA[Keynote sessions at Open Source Summit events tend not to allow much time for detailed talks, a [...]]]></description>
            <content:encoded><![CDATA[

This article brought to you by LWN subscribers

Subscribers to LWN.net made this article — and everything that
       surrounds it — possible.  If you appreciate our content, please
       buy a subscription and make the next
       set of articles possible.


Keynote sessions at Open Source Summit events tend not to allow much time for
detailed talks, and the 2025 Open
Source Summit Europe did not diverge from that pattern.  Even so,
Daniel Stenberg, the maintainer of the curl
project, managed to cram a lot into the 15 minutes given to him.
Like the maintainers of many other projects, Stenberg is feeling some
stress, and the problems appear to be getting worse over time.




Curl, he began, is "a small project with a big impact".  It began in
1996 with all of 100 lines of code; it has since grown to 180,000
lines that have been contributed by 1,400 authors.  In any given month,
there are 20-25 developers who are actively contributing to curl.  The
project has exactly one full-time employee — that being Stenberg himself.

The program is widely used, having been deployed in at least one-billion
devices.  Just about anything that occasionally connects to the net, he
said, uses curl to do it.  But using curl is different from supporting its
development.  As an example, he put up a slide listing the 47 car brands
that use curl in their products; he followed it with a slide listing the
brands that contribute to curl.  The second slide, needless to say, was
empty.  (A version of both slides can be seen on this page).

Companies tend to assume that somebody else is paying for the development
of open-source software, so they do not have to contribute.  He emphasized
that he has released curl under a free license, so there is no legal
problem with what these companies are doing.  But, he suggested, these
companies might want to think a bit more about the future of the software
they depend on.

Open-source software is the best choice, he said, but maintaining it is a
tough job.  Most projects out there have a single maintainer, and that
person is often doing the work in their spare time, without funding.
Maintenance involves a lot of tasks, including taking care of security,
reviewing patches, writing documentation, keeping the web site going,
administering the mailing list, and a long list of other tasks.
Occasionally, if a little time is left over, it might also be possible to
do a bit of feature development.  That is a lot for one person to
keep up with.

Companies have a certain tendency to make things worse.  He put up an
excerpt of a message from Apple support, referring a customer to the curl
project for help with their (Apple) device.  He has received demands from
companies for
information on the project's development and security practices, often with
tight deadlines for a response.  He typically replies by sending back a
support contract; that usually results in never hearing from the company
again, he said.  More recently, he has been getting demands from European
companies seeking information on the curl project's Cyber Resilience Act
compliance practices.

Some communications are rather less humorous than that; one email
came with a subject reading "I will slaughter you".  He gets emails
from people who found his address in the license notices shipped with their
automobiles asking for support.  But he also gets nice thank-you emails at
times.

Problematic email takes other forms as well.  There is an increasing crowd
of people who ask a large language model to "find a problem in curl,
make it sound terrible", then send the result, which is never correct,
to the project, thinking that they are somehow helping.  Dealing with these
useless problem reports takes an increasing amount of time.

Recently, the curl project, like many operators of web sites, has been
contending with distributed denial-of-service attacks by scrapers run by AI
companies.  He put up a link to LWN's article
on this problem for those who are unfamiliar with it.  The curl site
consumes a massive amount of bandwidth every month, but only 0.01% of that
is source downloads.  Most of the rest is bot traffic.  That, too, adds to
the difficulty of maintaining the project.

He concluded the brief talk with one last email; it was from an 11-year-old
child who had found curl useful in some project they were working on.  It
included an expression of gratitude that, Stenberg said, was truly
heartwarming.

[Thanks to the Linux Foundation, LWN's travel sponsor, for supporting our
travel to this event.]
           Index entries for this article
           ConferenceOpen Source Summit Europe/2025
            

            ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Float Exposed]]></title>
            <link>https://float.exposed/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217415</guid>
            <description><![CDATA[Floating point format explorer – binary representations of common floating point formats.]]></description>
            <content:encoded><![CDATA[
		

			halfbfloatfloatdouble
			

			
				Value
				

			

			
				Bit Pattern
				
			

			

			

			


			
				Position within Significand–Exponent Range
				
				
					0
					252-1
					
						0
					
					
					
						1
					
					
					
						30
					
					
					
						30
					
					
					
					
					
					
				
			

			

			Evaluation in Base-2

			(−12)2×​102(2 − 2)​×​.2
			

			Evaluation in Base-10

			×​2×​.
			

			Exact Base-10 Value
			

			

			


			
				Delta to Next/Previous Representable Value
				
			

			
				Delta to Next Representable Value
				
			

			
				Delta to Previous Representable Value
				
			

			


		
		Copyright © 2025 – Bartosz Ciechanowski

		
			A
		
	]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Toddlerbot: Open-Source Humanoid Robot]]></title>
            <link>https://toddlerbot.github.io/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217372</guid>
            <description><![CDATA[ToddlerBot: Open-Source ML-Compatible Humanoid Platform for Loco-Manipulation.]]></description>
            <content:encoded><![CDATA[
  
            
            
            

            *Equal contribution,
              †Equal advising
            

            Stanford University
            

            
          
  

  
  
  
  
      
          TL;DR: ToddlerBot is a low-cost, open-source humanoid robot platform designed for
            scalable policy learning and research in robotics and AI.
        
    
  

  
  
  
  

  
      
          2.0 Release
          
              See CHANGELOG.md for
                  details. 1x Speed unless otherwise noted.
            

          New Capabilities
          
            
              
              
              
                  Cartwheel: Toddy successfully performs a highly dynamic cartwheel, showcasing its
                  agility and balance capabilities.
                
            
            
              
              
              
                  Cartwheel Failures: With naive DeepMimic and domain
                  randomization,
                  the success rate is still low. But the good news is that Toddy is extremely robust—it almost never
                  breaks. Even if it breaks, it is super easy to fix.
                
            
            
              
              
              
                  Crawling: Toddy can crawl like a toddler, using its arms and legs in a
                  coordinated manner.
                
            
          
          

          
            
              
              
              
                  Walking Faster: Toddy can walk faster in all directions (up to 0.25m/s) and rotate
                  faster in place (up to 1 rad/s).
                
            
            
              
              
              
                  VR Teleoperation: Real-time VR teleoperation with Meta quest 2.
                
            
            
              
              
              
                  Foundation Stereo Depth On-board (Jetson Orin NX 16GB) real-time (10Hz) depth
                  estimation from stereo fisheye cameras with Foundation
                    Stereo.
                
            
          
          
        

      
          Design
          
              We present ToddleBot's mechatronic design in the figure below. We highlight ToddlerBot's 30
              active DoFs with orange markers: 7 DoFs per arm, 6 DoFs per leg, a 2-DoF neck, and a 2-DoF waist. Green
              markers indicate two end-effector designs—a compliant palm and a parallel-jaw gripper. Purple markers
              denote the sensor and electronics layout with exploded views, featuring two fisheye cameras, a speaker,
              two microphones, an IMU, and a Jetson Orin NX computer.
            
          
            
            
          
        

      
        
          Results
          
              1x Speed unless otherwise noted.
            

          Capability: Arm Span, Payload, and Endurance
          
            
              
              
              
                  Arm Span Test: With a torso volume of 13x9x12 cm³, ToddlerBot
                  successfully grasps objects 14 times its torso volume (27x24x31 cm³) using its compliant palm
                  gripper.
                
            
            
              
              
              
                  Payload Test: ToddlerBot lifts 1,484 g (40% of its total weight) while
                  maintaining balance. To determine the limit, screws are incrementally added to a 3D-printed gripping
                  cup until it falls.
                
            
            
              
              
              
                  Endurance Test: Running a walking RL policy, ToddlerBot lasts 19 minutes before
                  overheating affects stability. It withstands up to 7 falls before breaking, but repairs take only 21
                  minutes of 3D printing and 14 minutes of assembly for full restoration.
                
            
          
          

          Capability: Conversation, Push-ups, and Pull-ups
          
            
              
              
              
                  Conversation and Push-ups: This is achieved by integrating OpenAI's Realtime API
                  with GPT-4o for speech-to-text and text-to-speech. Push-ups are zero-shot sim-to-real transfer of
                  open-loop keyframe animation.
                
            
            
              
              
              
                  Pull-ups: We use an AprilTag to help ToddlerBot accurately locate the horizontal
                  bar. The rest is a zero-shot sim-to-real transfer of open-loop keyframe animation.
                
            
          
          

          ML-Compatibility: Locomotion and Manipulation
          
            
              
              
              
                  Omnidirectional Walking: ToddlerBot achieves omnidirectional walking with RL and
                  zero-shot sim-to-real.
                
            
            
              
              
              
                  Bimanual Manipulation: This is an RGB-based diffusion policy trained with 60
                  demonstrations.
                
            
          
          
            
              
              
              
                  Full-body Manipulation: This is also an RGB-based diffusion policy trained with 60
                  demonstrations.
                
            
            
              
              
              
                  Skill Chaining: ToddlerBot first executes a diffusion policy to grasp the handle,
                  while maintaining that pose, switched to the RL policy to push the wagon forward.
                
            
          

          Reproducibility: Hardware and Policies
          
            
              
              
              
                  Manipulation Policy Zero-Shot Transfer: We successfully transfer manipulation
                  policy trained with data collected on Toddlerbot instance to another.
                
            
            
              
              
              
                  Two-Instance Collaboration Task: To demonstrate their equivalent performance of two
                  Toddlerbot Instances, both robots collaborate on a long-horizon room tidying task.
                
            
            
              
              
              
                  Easy-to-Build Test: We show that ToddlerBot is easy to build with fully
                  open-source assembly manuals and videos.
                
            
          
        
        
      
    

  

  
      BibTeX
      @article{shi2025toddlerbot,
  title={ToddlerBot: Open-Source ML-Compatible Humanoid Platform for Loco-Manipulation},
  author={Shi, Haochen and Wang, Weizhuo and Song, Shuran and Liu, C. Karen},
  journal={arXiv preprint arXiv:2502.00893},
  year={2025}
}
    

  
      Acknowledgement
      The authors would like to express their gratitude to Kaizhe Hu for assembling the second instance of ToddlerBot
        and assisting with keyframe animation and demo recording. We also extend our thanks to Huy Ha, Yen-Jen Wang, Pei
        Xu, and Yifan Hou for their insightful discussions on locomotion, and to Sirui Chen, Chen Wang, and Yunfan Jiang
        for valuable input on manipulation policy deployment.
        We are grateful to Albert Wu for his guidance on mathematical formulation and notation. Additionally, we thank
        João Pedro Araújo for his assistance with the motion capture system.
        Finally, we appreciate the helpful discussions from all members of TML and REALab. This work was supported by
        National Science Foundation NSF-FRR-2153854, NSF-2143601, NSF-2037101, Sloan Fellowship, Stanford Institute for
        Human-Centered Artificial Intelligence, and Stanford Wu Tsai Human Performance Alliance.
    

  



]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Our website looks like an operating system]]></title>
            <link>https://posthog.com/blog/why-os</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45217269</guid>
            <description><![CDATA[I have a problem with many large, technical websites. Often times, I’ll want to refer to different pages at the same time. So I’ll  CMD  + click “a…]]></description>
            <content:encoded><![CDATA[I have a problem with many large, technical websites.Often times, I’ll want to refer to different pages at the same time. So I’ll CMD + click “a couple times” while browsing around and before I know it, I have 12 new tabs open – all indistinguishable from each other because they share the same favicon.PostHog.com has the same problem – especially as the site has grown from supporting a handful of paid products to over a dozen.As I looked for ways to solve this explosion of pages, I started to question many of the typical patterns that marketing & docs websites have today.Long-form scrolling. Oversized footers. Absurd whitespace.These website encourage scrolling, but just to get people to the bottom of the page? And then what?Why are we doing this? What if we just made better ways to consume content?That’s the idea behind the new PostHog.com. You can multitask, open a few articles simultaneously, and move them around as you please. If anything there's a whitespace deficiency, and your fingers will be jealous you're not scrolling with them as much (because you're so engaged with our content).It has window snapping, keyboard shortcuts, and a bookmark app. It works as well as you’d expect an operating system to work in a browser.You can be reading the latest newsletter from Product for Engineers while watching a demo video in the corner and also playing Hedgehog Mode, the game.I’ll be the first to admit it – an OS interface for a “website” is initially a jarring experience. I felt this as I built it. The human brain expects certain patterns within the confines of a browser viewport, and when it doesn’t get that assurance, it revolts.But the more I used the new site, the more I started to like it. And the experience was the same for colleagues. And now I can’t imagine using anything else.I had a lot of fun in building it with Eli Kinsey. Throughout the site you’ll find:A Windows File Explorer clone that also acts as the UI for our merch storeProduct pages that resemble PowerPoint presentationsA document editor where you can actually edit contentForums designed to look like you’re reading newsgroups in Outlook ExpressA QuickTime cloneA lot of pages you’d expect to be well-designed that are… just formatted as spreadsheetsA screensaver and a library of desktop backgroundsA plethora of keyboard shortcutsIt was also an interesting learning curve for me in figuring out how to organize five years worth of content while making it scalable for the future. Some of the technical highlights:Separation of visual layer from contentAll product pages are now powered from JSON files (example). This means that JSON dictates page layouts, content presentation, feature-level competitor comparison charts, and more. It also contains an array of screenshots used in various places (both in light and dark mode, of course).Eventually this will move to a repository that’s shared with the PostHog app, so all the information is powered from the same source.Skinning a site with themes and color schemesHow do you maintain light and dark mode, along with themes across a handful of accent variations (primary, secondary, tertiary) in a way that all play well together? (I found this out, and I’ll write about it sometime!)A reference customer databaseI’ve created a single customer record in code that contains: a) which products they use, b) quotes from specific people about individual products c) SVG logos that work in light and dark modeThis means that any quote can be presented on any page for any product without having to be hard-coded. It pulls in their name and photo, quote, and company logo, and can be filtered in reference to a specific product.For a lot of this site, I was designing it while I was building UIs in Typescript and Tailwind. (The entire site is just a Git branch off our current site – it's all technically the same codebase. I just merged along the way over the last few months.)Prototyping in a production-level environment was a great way to ideate and develop features along the way – stuff I never would have built if I were just going off of mockups. I did find myself popping open Balsamiq while I was building – but just long enough to flesh out some ideas.So how will this pan out? Well, we’re about to find out. This feels like an early MVP – there’s a ton of stuff to improve upon from here.But in the meantime, I hope you enjoy the new PostHog.com. Be curious, click around, and have some fun. I hope you enjoy your time here as much as we enjoyed building it.If you're curious, read more about how the site technically works.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Danish supermarket chain is setting up "Emergency Stores"]]></title>
            <link>https://swiss.social/@swaldorff/115186445638788782</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45216805</guid>
        </item>
        <item>
            <title><![CDATA[Rails on SQLite: new ways to cause outages]]></title>
            <link>https://andre.arko.net/2025/09/11/rails-on-sqlite-exciting-new-ways-to-cause-outages/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214933</guid>
            <description><![CDATA[This post was originally given as a talk for Friendly.rb. The slides are also available.
Between Litestack and the Rails 8 trifecta of Solid Cable, Solid Cache, and Solid Queue, it’s easier than ever to spin up a Rails app that doesn’t need a database service, or a redis service, or a file storage service. It’s great to simplify things, but even after 20 years of deploying Rails apps I was still caught out by some of the ways things are different.]]></description>
            <content:encoded><![CDATA[11 Sep 2025This post was originally given as a talk for Friendly.rb. The slides are also available.Between Litestack and the Rails 8 trifecta of Solid Cable, Solid Cache, and Solid Queue, it’s easier than ever to spin up a Rails app that doesn’t need a database service, or a redis service, or a file storage service. It’s great to simplify things, but even after 20 years of deploying Rails apps I was still caught out by some of the ways things are different.Based on what happened when I built a new side project in Rails on SQLite, we’ll cover what’s different, what’s new, and several ways that you can knock your site offline or even destroy your entire production database. As we go, we’ll also talk about the advantages of using SQLite, and how those differences can help you.So who am I, how did I learn these things, and why should you listen to me? I’m André Arko, better known on the internet as @indirect. A long time ago, I helped create Bundler, and I’ve been the OSS team lead for RubyGems and Bundler for more than a decade at this point.I work at Spinel Cooperative, a collective of Ruby open source maintainers building rv, the Ruby language manager that can install Ruby in one second flat. We offer retainers for unlimited access to core team experts from Bundler, Rails, Hotwire, and more, who can answer your questions and solve your problems.I’ve been deploying Rails applications to production since 2004, and most relevantly for this particular talk, I built a service called feedyour.email. Feed Your Email turns email subscriptions into RSS feeds that you can subscribe to in your feed reader. There is no signup, there are no accounts, you just go to the website and push a button to get an email address and a feed URL. Emails sent to that address will show up in that feed.Feed Your Email is only possible as a service because of SQLite—if I had to maintain three Postgres instances and a couple of web instances and a couple of worker instances, I would have felt like it was too much hassle and cost too much money, and given up. SQLite reduced the complexity of building and deploying this service to the point where I was able to do it casually, for fun, and keep it running for everyone while feeling like it was worth it just for my own personal use.This app serves about a million requests per month. That number sounds kind of big, but let’s do the math: 24 requests per minute, or one every 2.6 seconds. We can definitely serve at least one request every 2.6 seconds off of our Rails app, even on a small digital ocean droplet or a small cloud VM. I run my service on Fly.io, and hosting costs about USD$14 per month.It has bonus features like a web view so you can share individual emails as a link without giving away your secret email address or letting anyone see the other emails in that feed, and it also has full-text search if you’re trying to find a particular email. That full-text search is a feature of SQLite, which brings us back to the topic of this talk. How did SQLite help? Let’s take a look.The biggest fundamental difference, where almost every other difference comes from, is that SQLite is built in to your web server process. The reason for the “lite” in the name is that it doesn’t run a separate process, it doesn’t listen on a port or a socket, and you can’t connect to it. All the data is just in a single file, and your web process reads and writes that file when needed. This is awesome: you can’t have database connection errors anymore.There’s a small issue with giving the web process its own database in a local file, though. If you deploy your app as usual, your production database can disappear at any time! Heroku destroys dynos every 24 hours, including all files. Fly.io loses the files in a container anytime they restart. In a world of containers, it’s incredibly easy to miss that your new SQLite database is on an ephemeral filesystem and will disappear along with the Puma process in your web container.That leads us to the first and most important rule of using SQLite: put your database files in persistent storage. On AWS that means EBS, on Fly.io that means Volumes, but wherever you’re hosting, make sure that you can keep your database files across restarts (and ideally have automatic snapshots).Now that your database won’t disappear at any moment, let’s talk about what it means to put all the data in a single file. You probably use Rails.cache to store temporary data—that’s in a single SQLite file now, too. You also probably use ActiveJob to send emails or do slower work in the background. All of those jobs are also in a single SQLite file now. By default, it’s the same file!Putting everything in the same SQLite file makes everything very easy. You just need to keep track of that one file, and you’ll know that your model data, your caches, and your jobs will all be safe.SQLite being in-process raises a new problem, though… what if your background job needs to update a model? You might be used to deploying your background workers in a separate container, so you can scale them as needed. That’s not going to fly anymore, because your background workers need to be able to read and write that same single file that your web server is reading and writing.Since your database is now in just one file, you have two options. You can run your workers in a second process inside the same VM or container as the web process, or you can run your workers in threads inside the web process.If this is a smallish application, doing a million requests per month or less, you’ll be absolutely fine putting your background jobs in threads. As a bonus, putting background jobs in threads can almost halve the amount of RAM you need because a single Rails process is handling both web and job requests.If you really want to scale up your application, though, you’ll need to do what gets called “vertical” scaling rather than the traditional “horizontal” scaling. You can’t add more VMs, because other VMs won’t be able to see your database file. Instead, you need bigger and bigger single servers, with more and more CPU cores and RAM. That’s definitely possible, though. There are servers nowadays with 128 cores, or even more, and terabytes of RAM. Unfortunately, once you have scaled your wildly popular application vertically to the moon, you’ll discover the biggest limitation of SQLite: it’s just one file on disk.If you have dozens processes and hundreds of threads in web servers and background job workers, all trying to write into this one database file at the same time, there’s probably going to be a lot of contention. By default, SQLite uses the filesystem to take out a lock on the entire database for each transaction. Holding the lock, it executes any read and write queries, commits, and then releases the lock. Then the next process can take the filesystem lock and do the same thing.This can create quite the queue if even read-only queries have to wait in line and happen one at a time (because if they didn’t have the lock, some writer might sneak in and change the data mid-read!). To (partially) address this problem, SQLite offers a middle ground in the form of a Write-Ahead Log. The WAL log is an append-only file where any database writes can be written, one at a time. Then, a SQLite-controlled process copies those write instructions into the actual database file between reads. In the meantime, there can be as many readers as you want, because writes don’t have to block reads, and many reads from the same file at once are quite safe.This solves the problem with only allowing one single read or write at a time, but it definitely has a cost. The database isn’t just one file anymore, it’s now a series of files, and you need to back them up and restore them together if you want to make sure you haven’t lost any data. Hopefully that’s not too much trouble, but it is definitely something to be aware of while planning your backup and disaster recovery strategy.There’s one other approach worth calling out at this point, and that strategy is deliberately using multiple SQLite database files. If you are putting your not just your model data, but also your Rails cache, and also your background jobs, and maybe also your uploaded files all together into a single SQLite database file, your different use-cases can start to step on one another’s toes. For example, if you go to queue a few thousand jobs, any writes from your web requests will end up in the writer queue behind that pile of jobs in line to be written.Creating a separate SQLite file per system, or per access pattern, can help a lot with this. In Rails, the most common splits are separate SQLite databases for ActiveRecord, for the Rails cache, for background jobs, and for ActionCable. Depending on your application, it might also make sense to put your ActiveStorage blobs into a SQLite database or into the same filesystem that you are already backing up, as well. There’s a lot of complexity and overhead involved in setting up S3 buckets with the correct permissions and getting files into and out of them, and you might just want to skip all of that in your new, simplified Rails config.Taking this approach to an extreme might even involve sharding your model data across many database files. The most extreme example of this that I’ve heard of was an application that chose to shard their model data across one SQLite database file per customer. That meant every new signup created a new SQLite database file on disk, which is in some ways absurd, but it also meant that every individual user had the full power and speed of SQLite available to them. It’s hard to have read or write contention when every user gets their own separate database!So now that we’ve covered vertically scaling the Rails server itself, let’s talk about the other implications of your application running on exactly one server. The downside to there being just one server is that if that server goes down, your entire app is down. No degraded service, no slower than usual application, just… no application at all.If you’re running in a container, it’s impossible to deploy without downtime because only one container can ever have the volume with the database mounted. The old container has to stop before the new container can start. If you’re running in a VM, you might be able to deploy without downtime by running a local reverse proxy and more than one web server process, and restarting those web server processes one at a time rather than all at once. Welcome to how we used to do things in the 2000s, and my apologies.That said, some of the implications of only one server are good: if there’s only one, it’s pretty easy to run status checks, and it’s pretty easy to troubleshoot. You don’t need to debug connections between load balancers and dozens of web servers and database servers and redis servers and file storage servers, you just need to debug the one server. That can definitely make your job easier!Another implication of having just one single server: there is only one place for network requests to go. As I alluded to a moment ago, the only kind of load balancing that you can do is by running a local proxy and adding multiple separate processes as backends. The server itself is only going to have one IP address and one port where it can be reached, and there’s a certain amount of scale where that one IP and one port is going to become limiting. The good news is that you probably won’t hit that scale, and if you do, you’ll probably want to stop using SQLite anyway.If you ever want to try switching towards or away from SQLite, the sequel gem has the amazing ability to read from one database and write into another, doing a full database copy while respecting all the quirks and limitations of each database. If you want to move from Mysql or Postgres over to SQLite, or if you ever want to load a SQLite database into Mysql or Postgres, I highly recommend it. The duckdb command line tool also has excellent cross-database capabilities, and is the next thing I would try if sequel wasn’t working for me for some reason.There’s one more limitation that we need to consider that falls out of there only being one server: your app can only run in one geographic location. Some applications can benefit from adding additional web processes (or even database read replicas) spread out closer to end users, and that’s not possible if you are limited to a maximum of one server total for your entire application.That said, there’s nothing stopping you from using the more usual kind of CDN-based global distribution. If your application has a decent amount of static or cacheable content, you can at least still set the cache-control headers and run the app behind Fastly or Cloudlfare.Before we wrap up, I want to make sure to cover the various backup and replication options available to you while using SQLite for your application. The absolute all-star of SQLite backup and replication is called Litestream. It’s available as a gem, and can be used as easily as setting a few environment variables and using the litestream command provided by the gem to wrap your puma or other web server.What litestream does is fairly simple: it forwards a copy of each entry added to the write-ahead log over to any S3-compatible file store — you might even say that it streams your data in a light way. If you ever have a catastrophe, and your database file gets deleted or corrupted, the bucket will have a full copy of the WAL that you can replay to restore your database back to where it was when the server stopped working.On AWS, this still means setting up an S3 bucket and setting the right env vars, but at least you don’t need to deal with the bucket having public access, or setting up signed uploads, or any of the other things that make S3 a huge pain. You just need a private bucket and read/write credentials, and you’re good to go. If you’re using fly.io, you don’t even have to set the env vars yourself! They are set automatically by the command that creates the S3-compatible bucket on Tigris.There’s one last thing that you can try using if you’re feeling especially adventurous, LiteFS. LiteFS is a fascinating software achievement, offering full Mysql or Postgres-style replication for multiple SQLite databases running in many locations. The completely deranged trick that they use to do this is creating an entire software filesystem using FUSE, and then putting the SQLite database inside that filesystem. This gives them access to every filesystem read and write call made by your application, and allows them to create their own operations that are then sent to every other member of the cluster to be applied.This kind of setup comes with a lot of caveats. The biggest one is the usual distributed systems kind of caveat. You’ll have stale reads where some users will see old data, and if the primary crashes you might lose some data. If you’re okay with the tradeoffs of a distributed system (and you’re okay with the idea of all of your database reads and writes going through a FUSE filesystem that might be adding extra bugs), LiteFS offers a version of the ultimate web application dream.In the dream SQLite plus LiteFS world, you have all the advantages of SQLite and all the advantages of a fully replicated multi-writer database setup. Any individual server can go down without causing any downtime for the application as a whole, and every user has a full copy of the application and all its data, running extremely close to them.I haven’t built that perfect system yet, but it feels more attainable than it ever has before thanks to SQLite.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Claude’s memory architecture is the opposite of ChatGPT’s]]></title>
            <link>https://www.shloked.com/writing/claude-memory</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214908</guid>
            <description><![CDATA[A breakdown of Claude's memory implementation, how it differs from ChatGPT, and what these opposite approaches reveal about each company's philosophy.]]></description>
            <content:encoded><![CDATA[Earlier this week, I dissected ChatGPT's memory system. Since then, I've been doing the same for Claude and realized something remarkable: these two leading AI assistants have built completely opposite memory systems.
In this post, I'll start by breaking down exactly how Claude's memory works—what it stores and how it retrieves information. Then we'll get to the interesting stuff. Why these architectures diverge so dramatically, what that tells us about who uses each assistant and the philosophies driving each product's development, and just how vast the AI memory design space really is.
How it works
Claude's memory system has two fundamental characteristics. First, it starts every conversation with a blank slate, without any preloaded user profiles or conversation history. Memory only activates when you explicitly invoke it. Second, Claude recalls by only referring to your raw conversation history. There are no AI-generated summaries or compressed profiles—just real-time searches through your actual past chats.
When Claude detects memory invocation through phrases like "what did we discuss about," "continue where we left off," or "remember when we talked about," it deploys two retrieval tools that work like web search or code execution—you see them activate in real-time and wait while Claude searches through your history. Once the search completes, Claude synthesizes the retrieved conversations to answer your question or continue the discussion.
Conversation Search
The conversation_search tool helps with keyword and topic-based searches across your entire conversation history. When I asked "Hey, can you recall our past conversations about Chandni Chowk?" (a historic neighborhood in Delhi), Claude found 9 relevant conversations—from when I explored its founding by Princess Jahanara Begum in 1650 to my queries about the best galouti kebabs at Karim's and stuffed parathas at Paranthe Wali Gali. Claude synthesized these scattered discussions into a coherent summary of my Chandni Chowk explorations.

When you ask about multiple topics, Claude runs separate searches sequentially. In my past job as a crypto researcher, I used Claude extensively as an editor. When I asked "Tell me all the conversations we've had about either Michelangelo or Chainflip or Solana," Claude ran three separate searches—one for my Michelangelo analogies for neural networks, another for Chainflip's cross-chain protocol work, and a third for Solana's technical architecture. It found 22 conversations across these searches and delivered a unified response with direct links to each chat.


Temporal Chat Retrieval
The recent_chats tool provides time-based access to your conversation history. When I asked "Can you tell me what we spoke about in the last 10 conversations?" Claude retrieved my most recent chats chronologically and gave me a summary of my recent usage.

The tool also handles specific timeframes. When I asked "What did we discuss in the last week of November 2024?" Claude retrieved 16 conversations from that exact period.


ChatGPT vs Claude
A year ago, ChatGPT and Claude's assistant apps matched each other feature for feature—multiple models, file attachments, projects. Since then, their paths have diverged dramatically. ChatGPT has evolved into a mass-market consumer product, while Claude has deliberately chosen a different trajectory. Anthropic CPO Mike Krieger has acknowledged that OpenAI had "caught lightning in a bottle" with consumer adoption. Instead of chasing that market, Anthropic is focusing on what Claude does best: developer tools, coding, and professional workflows.
Memory implementation perfectly reflects this divergence.
ChatGPT's hundreds of millions of weekly active users come from all backgrounds—students, parents, hobbyists—who just want a product that works and remembers them without thinking about the mechanics. Every memory component loads automatically, creating instant personalization with zero wait time. The system builds detailed user profiles, learning preferences and patterns that could eventually power targeted features or monetization. It's the classic consumer tech playbook: make it magical, make it sticky, figure out different ways to monetize later.
Claude's users represent a different demographic entirely. Anthropic's more technical users inherently understand how LLMs work. They're comfortable with explicit control at every level. Just as they choose when to trigger web search or enable extended thinking, they decide when memory is worth invoking. They understand that memory calls add latency, but they make that tradeoff deliberately. Memory becomes just another tool in their arsenal, not an always-on feature. This audience doesn't need or want extensive profiling—they need a powerful, predictable tool for professional work. Not to mention, they're also more privacy-conscious.
The Memory Design Space
It still amazes me that ChatGPT and Claude—the two top AI assistants—have built completely opposite memory systems. This only goes to show that memory in AI has a massive design space with no right answer or one-size-fits-all technique. You have to work backwards from who your users are and what they need, then build from first principles accordingly.
We're in uncharted territory. These tools are less than three years old, and nobody knows what happens when someone uses the same AI assistant for a decade. How much should it remember? How should it handle years of accumulated context? Meanwhile, we're seeing a Cambrian explosion of AI apps, each experimenting with their own memory approach, while the underlying models get more powerful every week. There's no playbook, no settled best practices—just everyone trying different things and seeing what sticks.
The more I dive into memory, the more fascinated I get. Over the coming weeks, I'll be dissecting different architectures, analyzing new approaches, and following the latest research. Subscribe below if you want updates as this space unfolds.
Update: Hours after publishing this, Anthropic announced a new memory feature for Team and Enterprise accounts that looks much closer to ChatGPT's approach. Haven't tried it yet (not available on Max plan), but will share an update once I do.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Top model scores may be skewed by Git history leaks in SWE-bench]]></title>
            <link>https://github.com/SWE-bench/SWE-bench/issues/465</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214670</guid>
            <description><![CDATA[We've identified multiple loopholes with SWE Bench Verified where agents may look at future repository state (by querying it directly or through a variety of methods), and cases in which future rep...]]></description>
            <content:encoded><![CDATA[We've identified multiple loopholes with SWE Bench Verified where agents may look at future repository state (by querying it directly or through a variety of methods), and cases in which future repository state includes either solutions or detailed approaches to solving problems (commit messages and more).
Examples:
A trajectory with Claude 4 Sonnet, Pytest-dev__pytest-6202 (complete output here), the agent uses git log --all which leaks future commits that directly fix the issue:

<antml:parameter name="command">cd /testbed && git log --oneline --all | grep -i "bracket|parametrize|modpath" | head -10</antml:parameter>

The results of which directly reveal the fix:
    Fix incorrect result of getmodpath method.
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index b8b365ad3..734a92f9b 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -285,8 +285,7 @@ class PyobjMixin(PyobjContext):
                     break
             parts.append(name)
         parts.reverse()
-        s = ".".join(parts)
-        return s.replace(".[", "[")
+        return ".".join(parts)

Qwen3-Coder 480B (20250805-openhands-Qwen3-Coder-480B-A35B-Instruct) also has several cases of looking ahead: some examples include django__django-13513 (complete output here) uses git log grep=[issue ID] which directly reveals the fix PR which is in the future repo state (future commits).

Running command: cd /workspace/django__django__3.2 && �[1m�[91mgit log�[0m --oneline --grep="31926" -i

In another Qwen3-Coder trajectory, Django__django-15572, (complete output here) where the model specifically finds the commit containing the fix: 62739b6e2630e37faa68a86a59fad135cc788cd7

Command cd /workspace/django__django__4.1 && �[1m�[91mgit log�[0m --oneline --grep="33628" �[92m--all�[0m executed with exit code 0.

There are other examples of leakage found in trajectories from GLM 4.5, Qwen3-Coder 30B (20250805-openhands-Qwen3-Coder-30B-A3B-Instruct), and other models.
Mitigation will be to properly remove future repository state and any artifacts that contain information the agent could use (reflogs, branches, origins, tags, and more):

remove origins (branch names can reveal information about fixes)
remove all branches git log --all can be used to query them, plus branches that are tracking a remote origin might contain information about future commits even after a git reset --hard
remove the reflog (git reflog) can leak future commit messages that could detail approaches for solutions

The team (@felixkreuk, @UniverseFly, @jlko, @2dot71mily and others) will add more details as to findings here and below. We're still assessing broader impact on evaluations and understanding trajectories for sources of leakage.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Bulletproof host Stark Industries evades EU sanctions]]></title>
            <link>https://krebsonsecurity.com/2025/09/bulletproof-host-stark-industries-evades-eu-sanctions/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214164</guid>
            <description><![CDATA[In May 2025, the European Union levied financial sanctions on the owners of Stark Industries Solutions Ltd., a bulletproof hosting provider that materialized two weeks before Russia invaded Ukraine and quickly became a top source of Kremlin-linked cyberattacks and disinformation campaigns.…]]></description>
            <content:encoded><![CDATA[
												In May 2025, the European Union levied financial sanctions on the owners of Stark Industries Solutions Ltd., a bulletproof hosting provider that materialized two weeks before Russia invaded Ukraine and quickly became a top source of Kremlin-linked cyberattacks and disinformation campaigns. But new findings show those sanctions have done little to stop Stark from simply rebranding and transferring their assets to other corporate entities controlled by its original hosting providers.
Image: Shutterstock.
Materializing just two weeks before Russia invaded Ukraine in 2022, Stark Industries Solutions became a frequent source of massive DDoS attacks, Russian-language proxy and VPN services, malware tied to Russia-backed hacking groups, and fake news. ISPs like Stark are called “bulletproof” providers when they cultivate a reputation for ignoring any abuse complaints or police inquiries about activity on their networks.
In May 2025, the European Union sanctioned one of Stark’s two main conduits to the larger Internet — Moldova-based PQ Hosting — as well as the company’s Moldovan owners Yuri and Ivan Neculiti. The EU Commission said the Neculiti brothers and PQ Hosting were linked to Russia’s hybrid warfare efforts.
But a new report from Recorded Future finds that just prior to the sanctions being announced, Stark rebranded to the[.]hosting, under control of the Dutch entity WorkTitans BV (AS209847) on June 24, 2025. The Neculiti brothers reportedly got a heads up roughly 12 days before the sanctions were announced, when Moldovan and EU media reported on the forthcoming inclusion of the Neculiti brothers in the sanctions package.
In response, the Neculiti brothers moved much of Stark’s considerable address space and other resources over to a new company in Moldova called PQ Hosting Plus S.R.L., an entity reportedly connected to the Neculiti brothers thanks to the re-use of a phone number from the original PQ Hosting.
“Although the majority of associated infrastructure remains attributable to Stark Industries, these changes likely reflect an attempt to obfuscate ownership and sustain hosting services under new legal and network entities,” Recorded Future observed.
Neither the Recorded Future report nor the May 2025 sanctions from the EU mentioned a second critical pillar of Stark’s network that KrebsOnSecurity identified in a May 2024 profile on the notorious bulletproof hoster: The Netherlands-based hosting provider MIRhosting.
MIRhosting is operated by 38-year old Andrey Nesterenko, whose personal website says he is an accomplished concert pianist who began performing publicly at a young age. DomainTools says mirhosting[.]com is registered to Mr. Nesterenko and to Innovation IT Solutions Corp, which lists addresses in London and in Nesterenko’s stated hometown of Nizhny Novgorod, Russia.
Image credit: correctiv.org.
According to the book Inside Cyber Warfare by Jeffrey Carr, Innovation IT Solutions Corp. was responsible for hosting StopGeorgia[.]ru, a hacktivist website for organizing cyberattacks against Georgia that appeared at the same time Russian forces invaded the former Soviet nation in 2008. That conflict was thought to be the first war ever fought in which a notable cyberattack and an actual military engagement happened simultaneously.
Mr. Nesterenko did not respond to requests for comment. In May 2024, Mr. Nesterenko said he couldn’t verify whether StopGeorgia was ever a customer because they didn’t keep records going back that far. But he maintained that Stark Industries Solutions was merely one client of many, and claimed MIRhosting had not received any actionable complaints about abuse on Stark.
However, it appears that MIRhosting is once again the new home of Stark Industries, and that MIRhosting employees are managing both the[.]hosting and WorkTitans — the primary beneficiaries of Stark’s assets.
A copy of the incorporation documents for WorkTitans BV obtained from the Dutch Chamber of Commerce shows WorkTitans also does business under the names Misfits Media and and WT Hosting (considering Stark’s historical connection to Russian disinformation websites, “Misfits Media” is a bit on the nose).
An incorporation document for WorkTitans B.V. from the Netherlands Chamber of Commerce.
The incorporation document says the company was formed in 2019 by a y.zinad@worktitans.nl. That email address corresponds to a LinkedIn account for a Youssef Zinad, who says their personal websites are worktitans[.]nl and custom-solution[.]nl. The profile also links to a website (etripleasims dot nl) that LinkedIn currently blocks as malicious. All of these websites are or were hosted at MIRhosting.
Although Mr. Zinad’s LinkedIn profile does not mention any employment at MIRhosting, virtually all of his LinkedIn posts over the past year have been reposts of advertisements for MIRhosting’s services.
Mr. Zinad’s LinkedIn profile is full of posts for MIRhosting’s services.
A Google search for Youssef Zinad reveals multiple startup-tracking websites that list him as the founder of the[.]hosting, which censys.io finds is hosted by PQ Hosting Plus S.R.L.
The Dutch Chamber of Commerce document says WorkTitans’ sole shareholder is a company in Almere, Netherlands called Fezzy B.V. Who runs Fezzy? The phone number listed in a Google search for Fezzy B.V. — 31651079755 — also was used to register a Facebook profile for a Youssef Zinad from the same town, according to the breach tracking service Constella Intelligence.
In a series of email exchanges leading up to KrebsOnSecurity’s May 2024 deep dive on Stark, Mr. Nesterenko included Mr. Zinad in the message thread (youssef@mirhosting.com), referring to him as part of the company’s legal team. The Dutch website stagemarkt[.]nl lists Youssef Zinad as an official contact for MIRhosting’s offices in Almere. Mr. Zinad did not respond to requests for comment.

Given the above, it is difficult to argue with the Recorded Future report on Stark’s rebranding, which concluded that “the EU’s sanctioning of Stark Industries was largely ineffective, as affiliated infrastructure remained operational and services were rapidly re-established under new branding, with no significant or lasting disruption.”
											]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A Web Framework for Zig]]></title>
            <link>https://www.jetzig.dev/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45214159</guid>
            <description><![CDATA[Jetzig is a batteries-included web framework written in Zig]]></description>
            <content:encoded><![CDATA[
        
  
  
    Jetzig is an MIT
    licensed web framework written in Zig
  
  



  
 Routing
    Simple, file-based routing to RESTful
        Zig function declarations. Custom routes are also available.
      
  

  
 HTML
    Templating with Zmpl
        provides layouts, partials, inheritance, and build-time static content rendering.
  

  
 JSON
    All endpoints render JSON by default, providing a RESTful API for free.
  

  
 Speed
    Powered by http.zig
        for competitive performance and scalability.
      
  

  
 Tooling
    User-friendly CLI tooling for creating projects and adding new components.
  

  
 Middleware
    Hook into and manipulate requests/responses with a custom middleware chain. Built-in middleware for htmx
      .
  

  
 Sessions
    Cookies, user sessions, and request/response headers out of the box.
  

  
 Community
    Join us on Discord
      – we're friendly and active.
  

  
 Open Source
    Free, open source, and always will be. Jetzig is MIT
      licensed.
  

  

  
 Database
    
      Powerful and flexible database layer provided by JetQuery
        .
    
  

  


  

  

  

      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[‘Robber bees’ invade apiarist’s shop in attempted honey heist]]></title>
            <link>https://www.cbc.ca/news/canada/british-columbia/robber-bees-terrace-bc-apiary-1.7627532</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45213732</guid>
            <description><![CDATA["Robber bees" hunt for dwindling resources in the late summer and early fall, but they usually only attack other beehives. So the owner of Rushing River Apiaries in Terrace, B.C., was shocked to find found thousands of the pollinators in her shop.]]></description>
            <content:encoded><![CDATA[British Columbia"Robber bees" hunt for dwindling resources in the late summer and early fall, but they usually only attack other beehives. So the owner of Rushing River Apiaries in Terrace, B.C., was shocked to find found thousands of the pollinators in her shop.Bees sometimes attack other colonies as resources dwindle, but they usually stick to beehives found outsideLauren Vanderdeen  · CBC News  · Posted: Sep 08, 2025 10:30 AM EDT | Last Updated: September 8An apiarist in Terrace, B.C., says she found thousands of 'robber bees' in her store in late August. (Submitted by Christine McDonald)A Terrace, B.C., beekeeper found herself in a nightmare situation late last month when "thousands and thousands of bees" filled her shop.Call it an attempted robbery — the bees were trying to steal sweet, sweet honey.Christine McDonald, owner of Rushing River Apiaries, said it's the first time desperate "robber bees" — bees that try to take honey from another colony's hive — have descended upon her indoor shop to hunt for food as resources get scarce in the late summer. While she's worked with bees for years and said she's very comfortable around them, this situation had her frightened."I think that's the most panicked I have felt.…There's thousands of bees, I don't know where they're coming from, and I need to protect all of the honey."Rushing River Apiaries in Terrace, B.C., was briefly set upon by thousands of 'robber bees' trying to find food in the late summer. (Submitted by Christine McDonald)The multitudinous bees had found their way in through cracks in the shop's older bay door.When a bee finds a good food source, it returns to the hive and does a "waggle dance" to tell other bees where the food is, McDonald said.After throwing tarps and lids over the equipment and products, and managing to save most of it, McDonald said she ended up "sacrificing her bathroom" to trap the invading bees: she left the light on, and lured the bees to the light where she could collect and then release them.VideoMillions of honeybees loose after truck overturns near B.C.-Wash. borderHoneybees invaded a reporter's home, and upended everything she thought she knew about themBut it took four or five days until the bees stopped trying to return."I think they've learned that, nope, there's no more food here. We can't get in."Daybreak NorthRobber beesHungry bees swarm Terrace apiaryMcDonald has since taped up the shop's door.She said while she's had robber bees attack her beehives before, it's the first time they found her indoor shop."Fall beekeeping is very intense — trying to help bees hunker down against other bees and wasps and keep the food stores that they've worked so hard for."McDonald says she had to tape up her shop door to make sure no other bees get in.  (Submitted by Christine McDonald)So-called robber bees are a fairly common phenomenon in the late summer and early fall.Alison McAfee, a research associate at the University of B.C. and honeybee scientist, said when there's fewer food resources, such as nectar-producing flowers, and the bee population is close to its peak, some forager colonies can invade weaker colonies to steal their food."It's almost like they have a level of desperation, kind of like the way you can think about bears having a bit of a level of desperation trying to fatten up for winter," McAfee said.AudioThe number of beekeepers are on the rise in Canada but honey production levels stingQueen bees from Ukraine find a sweet new home in northwestern B.C.She said wasps can also attack honeybees — but for slightly different reasons. Wasps eat a sugary substance secreted from their own larvae earlier in the season, but in the fall, there's fewer larvae and more adult wasps."They're not getting that sweet treat from their babies, essentially, and so they're especially motivated to get something sweet from elsewhere, because the adults actually really like to eat sugary things — and there's a lot of sugary stuff inside a honeybee colony."But wasps aren't the only bee-killer out there.McAfee said a bee colony can die from robber bees, if it's too weak to defend itself."We have a bad opinion of wasps," she said. "We're like, 'Oh those wasps, they're attacking our honey bee colonies, they're killing my bees.' But then a lot of the time, actually, the bees will kill our bees as well."McDonald is back to producing honey after a few days of cleanup. She said the bees seem more desperate this year than in the past, and thought it might be due to the extended heat as it still feels like midsummer.McDonald encouraged other beekeepers to keep their bees well fed, so they don't feel the need to rob other hives.ABOUT THE AUTHORLauren Vanderdeen is a web writer for CBC British Columbia. She formerly worked for community newspapers, including the Burnaby Now and New West Record. You can reach her at lauren.vanderdeen@cbc.ca.With files from Hanna Petersen]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[NT OS Kernel Information Disclosure Vulnerability]]></title>
            <link>https://www.crowdfense.com/nt-os-kernel-information-disclosure-vulnerability-cve-2025-53136/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45213299</guid>
            <description><![CDATA[Bidding farewell to one of the last kernel address leaks, CVE-2025-53136. Even patches can open new doors for exploitation.]]></description>
            <content:encoded><![CDATA[

	
			


		
																			
								
	
			11SepSeptember 11, 2025		
	
	
			Reading Time:   4 minutes

Table of Contents

IntroductionVulnerabilityQuick review on the patch for CVE-2024-43511Spotting the bugEffects of the bugExploitationSetupReliabilityProof-of-conceptsConclusionDisclosure Timeline
Introduction
Microsoft mitigated many traditional kernel information leaks starting with Windows 11/Windows Server 2022 24H2, including calls such as NtQuerySystemInformation() (when used with the SystemModuleInformation class), by suppressing kernel base addresses unless the caller had the SeDebugPrivilege, typically reserved for administrative processes. That change effectively neutered one of the most accessible KASLR bypass techniques, and, without knowledge of the kernel’s base addresses, exploitation became harder.
While doing patch analysis for CVE-2024-43511, I realised that Microsoft made a mistake leading to a kernel address leak vulnerability. This new bug requires winning a race condition to read out the address; however, it’s pretty easy to achieve. It provides a powerful kernel address leak for any token handle, which can be easily chained with other vulnerabilities to obtain a complete exploit on the latest version of the system.
Vulnerability
Quick review on the patch for CVE-2024-43511
In October 2024, Microsoft released a patch for a Time-of-check Time-of-use (TOCTOU) Race Condition vulnerability in the Windows kernel, namely CVE-2024-43511.
To fix the issue, when passing parameters to the RtlSidHashInitialize() function, it reads data from a kernel pointer (which is a member of the TOKEN structure), instead of the value set in a user-controlled buffer.

Spotting the bug
With the new update, the RtlSidHashInitialize() function, which performs hash initialisation, now takes as its first parameter a pointer from the TOKEN structure and as its third parameter a user-controlled buffer. Then, RtlSidHashInitialize() stores the first parameter (which is a pointer to the UserAndGroups field of the TOKEN structure) into the third parameter (user-supplied pointer), and starts doing hash initialisation later on:

Although the caller function will replace the stored pointer in the user-buffer pointer after that, it still leaves a small time window for us to win a race condition and read out the leaked kernel address. To trigger the vulnerable function, we only need to invoke the NtQueryInformationToken() syscall with the TokenAccessInformation class.
Effects of the bug
This leak primitive is particularly useful for Windows versions 24H2 or later, as the well-known technique for leaking kernel addresses using NtQuerySystemInformation() or other alternative methods has been patched. As the vulnerability is located within an NT syscall, the bug can be exploited from either Low IL or AppContainer. If chained with a write-what-where bug to overwrite the Privileges field of the TOKEN object, it will result in a complete LPE.
Exploitation
Setup
To exploit this bug, I need to create two threads to run concurrently:

One thread to read at the specific offset, which will be used to store the kernel address in the user buffer.
One thread performs the syscall. It is required to run the syscall several times before archiving the kernel leak.

Reliability
Although this is a race condition bug, the time window is wide enough to read the kernel address from the user-space buffer. To increase the success rate, we repeatedly call NtQueryInformationToken() while keeping reading until we get the leak. The read becomes very reliable, and we can obtain the leaked TOKEN almost every time we run the exploit.
Proof-of-concepts
The results below show the exploit on a Windows Insider Preview in April 2025 (latest version at the time of writing), running the exploit from the Low IL and App Container contexts:


Conclusion
Patch analysis is one of the fastest ways to improve our skills and sharpen our mindset in bug finding. Additionally, it also helps us improve our secure coding skills. Sometimes, bug fixes in a function can introduce new bugs in other parts of the code. When conducting vulnerability research, it’s recommended to take a deep look to understand how the bug was patched and whether the patch completely resolves the issue or leaves other gaps open. From a developer’s point of view, every change made to a function can affect others as well, so take extra care when making any changes to the codebase. It is essential to thoroughly understand how a function works before modifying it, as this helps avoid mistakes or misuse of the function.
Disclosure Timeline

April 8th: Reported to vendor.
April 9th: Microsoft acknowledged that it is working on the bug.
April 22nd: They claimed that the bug is duplicated with a bug which had been fixed already, and closed the case without having any other chance to explain the bug… (I don’t know why).
April 22nd: I made a tweet on X to complain about that, and luckily, I got a response from them.
April 25th: Confirmed my report is a valid bug:v
April 29th: Microsoft replied that the bug was in scope.
August 1st: CVE-2025-53136 was assigned.


		

					
		
	

	

								
					
					]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Conway's Game of Life, but musical]]></title>
            <link>https://www.hudsong.dev/digital-darwin</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45211868</guid>
            <description><![CDATA[Breed unique melodies with genetic algorithms! Explore Conway's musical life and cultural evolution patterns. Interactive AI music lab]]></description>
            <content:encoded><![CDATA[Hudson Griffith•September 11, 2025IntroductionMusic is profoundly human. It runs deep in our lives and shows up in our everyday rituals. And somehow, those rituals often end with us leaving AirPods in the back seat of an Uber. But beneath the everyday habits lies a much older connection. Neuroscience research shows our brains respond to music in fundamental ways that precede language development 1. And what fascinates me is how naturally music evolves over time, how styles adapt and change in a way that feels less like something we purposely create and more like it just grows on its own. Charles Darwin himself speculated that musicality might have preceded language, suggesting our capacity for music is fundamentally biological 2.This got me thinking: if musical evolution follows biological patterns, could we create an environment to simulate this evolution? So I built one.Building a Laboratory for Musical EvolutionI created what I call a melody breeder. It’s a digital playground where melodies can compete, reproduce, and evolve. Select your favorite (up to three) melodies, let them breed with each other, and watch what happens. It may not be the next top hit, but it's a lot of fun to play around with.And the science behind it is actually pretty solid. Richard Dawkins' concept of "memes" describes cultural units that replicate and evolve similarly to genes 3. Musical melodies are perfect examples. They replicate through listening, mutate through sampling, and undergo selection pressure based on whether people actually want to hear them again.Research by Savage et al. (2015) demonstrates that musical evolution follows predictable patterns across cultures, with structural features evolving through descent with modification much like biological traits 4. That means you can think of your Spotify Liked Songs playlist as a thriving ecosystem, full of tracks that survived.Conway's Symphony of Life and DeathWhile building the melody breeder, I kept thinking about how musical patterns behave like living systems. They're born, they interact, they die. This reminded me of one of my favorite digital visualizations, Conway's Game of Life.So I made it musical.This is Conway's Game of Life, where each cell birth plays a harmonic note and each death plays a complementary tone. The result is evolving, unpredictable music generated by the simulation.Each glider that moves across the screen creates its own melody. Oscillators turn into rhythms and the "glider gun" becomes a beat machine. The same simple rules that drive complexity in biology can also shape musical structure.From Musical Genes to Cultural PandemicsThe parallels between musical evolution and biological systems run deeper than you'd think.Take the Labubu phenomenon (I never thought I would write that phrase in a blog post). These designer toys went from obscure to everywhere seemingly overnight, spreading through social media like a disease. And I mean that literally, epidemiologists use the same models for viral TikTok trends as they do for actual viruses 5. To show this, I pulled Google Trends data 6 on the term "Labubu" from the start of 2024 to today and visualized it as a global map of its spread.Popularity2024-01-012024-01-042024-01-082024-01-112024-01-14Watching this trend curve reminds me of the pandemic era. The same steep exponential rises, the geographic spread patterns, the way interest peaks and then gradually declines. It's unsettling how similar a toy's popularity looks to a virus outbreak when you plot them on a map.But maybe that similarity isn't so unsettling after all. Maybe it reveals something deeper about how information spreads through human networks, whether that information is genetic code, viral particles, or cultural ideas.The Universal Patterns of Cultural EvolutionDarwin called it "endless forms most beautiful," and that phrase fits here too. The same simple rules that drive biology also explain why culture produces such variety, from music to memes. Patterns replicate, adapt, and survive when they capture our attention.Boyd & Richerson describe culture as a shared pool of innovation that helps us live better 7. Sometimes that means a symphony, sometimes a viral monster toy. Either way, it's evolution at work.These patterns exist all around us, but recognizing them is just the beginning. What really gets me excited is being able to build something that makes these invisible forces visible.Why I Love CodeThis whole exploration exists because programming gave me the tools to turn random shower thoughts into something real and shareable. There's something empowering about writing code that simulates generations of evolution in milliseconds, about building systems that let people explore complex ideas through play.This is why I code: to take questions that keep me up at night and turn them into something that might spark curiosity in the 5 people who read these blog posts.Now if you'll excuse me, I need to check on my melody breeder. Pretty sure Beethoven's Fifth great-grandson just evolved into Baby Shark.References1Levitin, D. J. (2006). This Is Your Brain on Music: The Science of a Human Obsession. Dutton Penguin.2Darwin, C. (1871). The Descent of Man, and Selection in Relation to Sex. John Murray.3Dawkins, R. (1976). The Selfish Gene. Oxford University Press.4Savage, P. E., Brown, S., Sakai, E., & Currie, T. E. (2015). Statistical universals reveal the structures and functions of human music. Proceedings of the National Academy of Sciences, 112(29), 8987-8992.5Kermack, W. O., & McKendrick, A. G. (1927). A contribution to the mathematical theory of epidemics. Proceedings of the Royal Society of London. Series A, 115(772), 700-721.6Google Trends. (2024–2025). Search interest for “Labubu”. Retrieved September 2025, from https://trends.google.com7Boyd, R., & Richerson, P. J. (2011). The cultural niche: Why social learning is essential for human adaptation. Proceedings of the National Academy of Sciences, 108(Supplement 2), 10918–10925. https://doi.org/10.1073/pnas.11002901088Centola, D. (2010). The spread of behavior in an online social network experiment. Science, 329(5996), 1194-1197.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CRISPR offers new hope for treating diabetes]]></title>
            <link>https://www.wired.com/story/no-more-injections-crispr-offers-new-hope-for-treating-diabetes/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45211596</guid>
            <description><![CDATA[Gene-edited pancreatic cells have been transplanted into a patient with type 1 diabetes for the first time. They produced insulin for months without the patient needing to take immunosuppressants.]]></description>
            <content:encoded><![CDATA[All products featured on WIRED are independently selected by our editors. However, we may receive compensation from retailers and/or from purchases of products through these links. Learn more.Crispr gene-editing technology has demonstrated its revolutionary potential in recent years: It has been used to treat rare diseases, to adapt crops to withstand the extremes of climate change, or even to change the color of a spider’s web. But the greatest hope is that this technology will help find a cure for a global disease, such as diabetes. A new study points in that direction.For the first time, researchers succeeded in implanting Crispr-edited pancreatic cells in a man with type 1 diabetes, an autoimmune disease where the immune system attacks insulin-producing cells in the pancreas. Without insulin, the body is then unable to regulate blood sugar. If steps aren’t taken to manage glucose levels by other means (typically, by injecting insulin), this can lead to damage to the nerves and organs—particularly the heart, kidneys, and eyes. Roughly 9.5 million people worldwide have type 1 diabetes.In this experiment, edited cells produced insulin for months after being implanted, without the need for the recipient to take any immunosuppressive drugs to stop their body attacking the cells. The Crispr technology allowed the researchers to endow the genetically modified cells with camouflage to evade detection.The study, published last month in The New England Journal of Medicine, details the step-by-step procedure. First, pancreatic islet cells were taken from a deceased donor without diabetes, and then altered with the gene-editing technique Crispr-Cas12b to allow them to evade the immune response of the diabetes patient. Cells altered like this are said to be “hypoimmune,” explains Sonja Schrepfer, a professor at Cedars-Sinai Medical Center in California and the scientific cofounder of Sana Biotechnology, the company that developed this treatment.The edited cells were then implanted into the forearm muscle of the patient, and after 12 weeks, no signs of rejection were detected. (A subsequent report from Sana Biotechnology notes that the implanted cells were still evading the patient’s immune system after six months.)Tests run as part of the study recorded that the cells were functional: The implanted cells secreted insulin in response to glucose levels, representing a key step toward controlling diabetes without the need for insulin injections. Four adverse events were recorded during follow-ups with the patient, but none of them were serious or directly linked to the modified cells.The researchers’ ultimate goal is to apply immune-camouflaging gene edits to stem cells—which have the ability to reproduce and differentiate themselves into other cell types inside the body—and then to direct their development into insulin-secreting islet cells. “The advantage of engineering hypoimmune stem cells is that when these stem cells proliferate and create new cells, the new cells are also hypoimmune,” Schrepfer explained in a Cedars-Sinai Q+A earlier this year.Traditionally, transplanting foreign cells into a patient has required suppressing the patient’s immune system to avoid them being rejected. This carries significant risks: infections, toxicity, and long-term complications. “Seeing patients die from rejection or severe complications from immunosuppression was frustrating to me, and I decided to focus my career on developing strategies to overcome immune rejection without immunosuppressive drugs,” Schrepfer told Cedars-Sinai.Although the research marks a milestone in the search for treatments of type 1 diabetes, it’s important to note that the study involved one one participant, who received a low dose of cells for a short period—not enough for the patient to no longer need to control their blood sugar with injected insulin. An editorial by the journal Nature also says that some independent research groups have failed in their efforts to confirm that Sana’s method provides edited cells with the ability to evade the immune system.Sana will be looking to conduct more clinical trials starting next year. Without overlooking the criticisms and limitations of the current study, the possibility of transplanting cells modified to be invisible to the immune system opens up a very promising horizon in regenerative medicine.This story originally appeared on WIRED en Español and has been translated from Spanish.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[From burner phones to decks of cards: NYC teens adjusting to the smartphone ban]]></title>
            <link>https://gothamist.com/news/from-burner-phones-to-decks-of-cards-nyc-teens-are-adjusting-to-the-smartphone-ban</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45211527</guid>
            <description><![CDATA[A week into the ban on internet-enabled devices, students say they are making it work.]]></description>
            <content:encoded><![CDATA[New York City students are one week into the statewide phone ban. Gothamist reporters checked in with teens across the district to see how they are adapting. Here's how they are handling their disconnected days.Lower-tech lifePolaroids, walkie-talkies and decks of cards: New York City teens said these are some of the hot items circulating in schools now that the statewide smartphone ban is in effect.Alia Soliman, a senior at Bronx Science, said cards “are making a big comeback.” She said kids are playing poker when they’re done with their work in some classes. Fellow students reported a surge in Uno.“It seems to be very fun and engaging,” Soliman said.She said members of the senior class are using vintage devices to capture memories and milestones.“I’ve seen some of my friends bring in digicams,” Soliman said. “A lot of people are bringing in Polaroids.”She’s looking into whether an MP3 player would be allowed in school to listen to while she studies.“I’ll test the waters,” she said.In Manhattan, Ethan Myer, a senior at Union Square Academy, said the ban is also helping kids get their steps in.“Most people are just walking around the hall, because there's not really much else to do,” Myer said. "Some people are talking a bit more, which I guess was the goal.”Jem Bryant, a junior at Gramercy Arts High School, also near Union Square, is daydreaming more.“I  don't really have a lot of friends in classes,” Bryant said. “So when they say ‘do your classwork’ and I'm already done, I literally just have to sit there and stare at the wall.”Soliman said she was opposed to the ban at first, and she’s concerned that she won’t be able to work on her college applications during downtime at school, but she sees some positives.“I’m still not thrilled,” she said. “But people are reading more. The younger kids are socializing more.”Peter Schmidt-Nowara, a teacher and dean at Brooklyn Tech, said the hallways and lunchroom are louder, in a good way.“It was muted,” he said. “It’s really lifted a pall.”He said it’s a stark difference from last year, when kids were retreating to bathrooms for 20 minutes to check their phones, and walking through the halls with their heads down.He added that he's enjoyed watching students turn to unfamiliar technology.“A group of boys brought in a transistor radio to listen to music. They didn’t realize they had to lift the antenna, so I lifted it for them. The music wasn’t that loud and it was quite sweet,” he said.WorkaroundsNo students interviewed by Gothamist copped to having burner phones of their own, but some said they knew of classmates deploying decoys.“Not to rat anyone out, but some people have fake phones,” said Solangel Santana, a senior at Union Square Academy.She added that kids sometimes send each other emails or chat in Google Docs on their education department-issued devices.“We find creative ways to talk to each other,” she said.Video app TikTok is rife with videos of kids breaking into pouches. “They slam it,” said Esmeralda Jaramillo, a junior at Gramercy Arts.Soliman said students sometimes physically leave the building and go out into the courtyard for a phone break to play games or check messages during free periods or lunch. “The benches are always full,” Soliman said.Speaking at DeWitt Clinton High School in the Bronx on Monday, Mayor Eric Adams said it’s not the first time teenagers have tried to skirt the rules.“This is all part of their creative spirit and energy,” he said. “We did it. Let's not act like when we were in school, we didn't have all our little tricks on how we got around things.Adams made the comments at a press conference to announce the distribution of 350,000 internet-enabled Chromebooks, part of the city’s effort to replace aging devices obtained during the pandemic, and ensure that all students have access to technology in schools even as their personal devices are banned.From bottlenecks to stampedesSchools have rolled out a range of strategies, with most schools either collecting phones at arrival and storing them in lockers or distributing magnetic pouches that have to be locked and unlocked at the beginning and end of the day.Bryant at Gramercy Arts High School said of the end-of-day routine, “They’ll be like, ‘Single-file line,’ but it will not be a single-file line and people will just bum-rush the magnets.”Students at LaGuardia High School reported long lines on the first few days of school.Laila Lawrence, 16, said students have been blamed for being late to class.“The teachers are the first ones to complain, ‘Oh, you were late, da da da da.’ I'm like, ‘I was on the line, like, what do you want me to do?’”But Lawrence's views on the ban were mixed.“ I think it's good and bad because phones are obviously a problem,” she said. “I'm not gonna say like I'm not addicted to my phone 'cause I am, but at the same time I'm like no one in the school is like purposely on their phone in the middle of class.”]]></content:encoded>
        </item>
    </channel>
</rss>