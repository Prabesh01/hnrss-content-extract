<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Thu, 04 Sep 2025 20:51:11 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Classic 8×8-pixel B&W Mac patterns]]></title>
            <link>https://www.pauladamsmith.com/blog/2025/09/classic-mac-patterns.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45131538</guid>
            <description><![CDATA[TL;DR: I made a website for the original classic Mac patterns I was working on something and thought it would be fun to use one of the classic Mac black-and-white patterns in the project. I'm talking about the original 8×8-pixel ones that were in the...]]></description>
            <content:encoded><![CDATA[
        
TL;DR: I made a website for the original classic Mac patterns
I was working on something and thought it would be fun to use one of the
classic Mac black-and-white patterns in the project. I'm talking about the
original 8×8-pixel ones that were in the original Control Panel for setting the
desktop background and in MacPaint as fill patterns.


Screenshots via to Marcin's awesome interactive
history
I figured there'd must be clean, pixel-perfect GIFs or PNGs of them somewhere
on the web. And perhaps there are, but after poking around a bit, I ran out of
energy for that, but by then had a head of steam for extracting the patterns en
masse from the original source, somehow. Then I could produce whatever format I
needed for them.
There are 38 patterns, introduced in the original System 1.0 in the 1984 debut
of the Macintosh. They were unchanged in later versions, so I decided to get
them from a System 6 disk, since that's a little easier with access to utility
programs.
Preparation

Download Mini vMac.
Acquire "old world" Mac ROMs.
Download a System 6 startup disk image.
Download ExportFl disk image.
Download sitPack disk image.
Install "The Unarchiver" (brew install --cask the-unarchiver)
Install the Xcode command-line tools.

Extraction process
Start System 6 (drag the ROM onto the Mini vMac icon, then drag the System 6
disk onto the window when you see the flashing floppy disk). Mount the ExportFl
and sitPack disks by dragging their files and dropping on the classic Mac
desktop.
In emulation
Double-click sitPack to launch the program. Command-O to open, then navigate to
the startup disk by clicking "Drive". Scroll to find "System Folder" and
double-click on it. Scroll to the bottom, select "System" and click "Open". Save
the output file as "System.sit" in the top-level of the startup disk. Quit
sitPack back to the Finder.
Start the ExportFl program. Command-O or pick "Open" from the "File" menu. Find
the "System.sit" created in the last step and click "Open". A regular file save
dialog will appear on the modern Mac, pick a location and save the file.
On the modern Mac
Drag the "System.sit" file onto The Unarchiver, or open the file from within it.
This will produce a file called "System" (with no extension).
Run DeRez (part of the Xcode developer command-line tools) on the System file.
I first added /Library/Developer/CommandLineTools/usr/bin to my $PATH, then
ran:
$ DeRez -only PAT\# System > patterns.r


This produces a text representation of the PAT# resource in the System file.
It's a series of bytes that comprise 38 8×8 patterns meant for QuickDraw
commands. There's a leading big-endian unsigned 16-bit number (0026) to indicate the number of 8-byte patterns to follow.
data 'PAT#' (0, purgeable) {
	$"0026 FFFF FFFF FFFF FFFF DDFF 77FF DDFF"
	$"77FF DD77 DD77 DD77 DD77 AA55 AA55 AA55"
	$"AA55 55FF 55FF 55FF 55FF AAAA AAAA AAAA"
	$"AAAA EEDD BB77 EEDD BB77 8888 8888 8888"
	$"8888 B130 031B D8C0 0C8D 8010 0220 0108"
	$"4004 FF88 8888 FF88 8888 FF80 8080 FF08"
	$"0808 8000 0000 0000 0000 8040 2000 0204"
	$"0800 8244 3944 8201 0101 F874 2247 8F17"
	$"2271 55A0 4040 550A 0404 2050 8888 8888"
	$"0502 BF00 BFBF B0B0 B0B0 0000 0000 0000"
	$"0000 8000 0800 8000 0800 8800 2200 8800"
	$"2200 8822 8822 8822 8822 AA00 AA00 AA00"
	$"AA00 FF00 FF00 FF00 FF00 1122 4488 1122"
	$"4488 FF00 0000 FF00 0000 0102 0408 1020"
	$"4080 AA00 8000 8800 8000 FF80 8080 8080"
	$"8080 081C 22C1 8001 0204 8814 2241 8800"
	$"AA00 40A0 0000 040A 0000 0384 4830 0C02"
	$"0101 8080 413E 0808 14E3 1020 54AA FF02"
	$"0408 7789 8F8F 7798 F8F8 0008 142A 552A"
	$"1408"
};

It would have been simple enough to
parse this text, but I had Claude quickly make a Python
program
to do so and output them in .pbm format, which is part of the Netpbm image
format class. This is a simple image format that is text-based, a '1' or a
'0' indicating a black or white pixel in a row and column.
For example, this subway tile pattern  is represented like
this in .pbm:
P1
8 8
1 1 1 1 1 1 1 1
1 0 0 0 0 0 0 0
1 0 0 0 0 0 0 0
1 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1
0 0 0 0 1 0 0 0
0 0 0 0 1 0 0 0
0 0 0 0 1 0 0 0

From here, I can generate image files for the patterns in any format and
resolution I want, using ImageMagick or similar. It's important when scaling the
patterns to use -filter point, so that ImageMagick doesn't try to interpolate
the pixels it needs to fill in, which would lead to blurry results.

Why do all this?
It's nostalgic, I have a fondness for these old patterns and the original B&W
Mac aesthetic, it reminds me of playing games like Dark Castle and Glider,
messing around with HyperCard, and using Tex-Edit and hoarding early shareware
programs.
The whole point of the above is to get a copy of the System file out with the
resource fork intact, that's
where the desktop patterns live.
According to old classic Mac
manuals,
the patterns were QuickDraw bit-pattern resources, a simple bitmap of 8 bits
per row packed into 8 bytes (columns). It was fast for QuickDraw to copy them
over an area of the screen. For example the following pattern was used for the
default gray desktop pattern on black-and-white Mac screens.

I could have extracted all 38 patterns other ways: I could have screenshotted
each one, I could have looked at each one and hand-written .pbm files, both of
which would have been tedious and error-prone.
Ultimately, I wanted to extract the exact original data from the source (or
close enough copy thereof) and have the patterns in a format I considered
archival for this limited purpose (.pbm files are trivial to parse and
manipulate).
Head over to my pattern site to get the patterns for yourself.
(Credit for replica Geneva 9pt and Chicago 12pt fonts)


        
    ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Action was the best 8-bit programming language]]></title>
            <link>https://www.goto10retro.com/p/action-was-the-best-8-bit-programming</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45131243</guid>
            <description><![CDATA[There were many programming languages available for 8-bit computers, the most common being BASIC and Assembly Language, but Action! beats them both!]]></description>
            <content:encoded><![CDATA[There were many programming languages available for 8-bit computers, the most common being BASIC and Assembly Language, but there were also other lesser-used languages such as Logo, Forth, and Pilot. The languages that would go on to dominate 16-bit computing, C and Pascal, were also available but were usually severely limited. An 8-bit computer generally did not have enough horsepower to run those more complex language compilers1.By 1983 Optimized Systems Software (OSS) was renown in the Atari world for its great updated versions of DOS (DOS XL), BASIC (BASIC XL/XE) and assembler (MAC/65), so it was no surprise that they were the ones to introduce a new language, Action!, into the Atari market.Created by Clinton Parker, Action! was an all-new compiled language that was designed and optimized for the 8-bit 6502 CPU. It was a 16K cartridge2 and had everything you need integrated into one package: the monitor, compiler, text editor and debugger3. In some ways, Action! was the first IDE (integrated development environment) for an 8-bit computer.Back in the 80s I never used Action! and instead mostly used BASIC and OSS BASIC XE for my programming. I did like reading Action! program listings in magazines, though. But I now have the Action! cartridge and just recently acquired an Action! user manual, so I felt it was time to take a closer look at this amazing software development tool.The version of Action! that I now have is the classic orange cartridge, paired with a small 3-ring yellow binder containing the documentation. Action! was also available in the yellow label cartridge and its manual was also in a larger binder and then later, perfect bound (like the BASIC XL and BASIC XE manuals I have). Having the manual in a binder would have certainly been more useful in the 80s when you had to refer to it frequently.Action! retailed for $99 in 1983 (about $320 in 2025) and was only available for the Atari 8-bit computers. Early advertisements indicated there would be forthcoming versions for the Apple II and Commodore 64, but those never materialized.The manual is just under 220 pages and is concise, but reasonable well-written. There is not a ton of sample code and it doesn’t try to teach too many concepts. To get the most of it, you really already need to know how to program.I had been looking for an actual Action! manual for years, but the ones I’d seen on eBay had always been prohibitively expensive. Luckily I found one last month for just $30 and snagged it.You don’t need a physical manual, of course. An updated manual is available online in several places, and here’s the PDF.The editor really was a wonder for its time. It is a full-screen text editor that can scroll to the right as the line of text you type becomes longer than the 40 characters of an Atari screen. That was an unusual feature for the time, but was necessary because it allowed the indentation, encouraged by Action!’s structured programming style, to remain easy to read.Not much to see here, but it’s an empty editor screen.The editor can copy and paste text, another somewhat new feature for Atari text editors in 1983, has the ability to tag lines to jump to them rapidly and it also has a split screen mode that let you show two files (or two parts of the same file) on the screen at once. At first this might seem silly considering the small size of the screen, but this was revolutionary for the time. Normally to look at another file, you’d have to open it, losing the file you were working on, and then reload the original file. It was tedious and was a reason why you would print your programs back then.Even looking at different parts of a file could be a pain because you’d just be scrolling all over the place, which was not always fast or easy in many text editors. This was even worse with something like BASIC, which required you to LIST line ranges to see parts of your program.To exit the editor, you press Control+Shift+M which takes you to the monitor.Today this would be called the shell, but it is essentially the command line interface for the entire system. From the monitor, you can switch to the editor, compile, trace code, look at memory and more.Action! is a structured, procedural programming language. It is similar to both C and Pascal, although not quite as advanced as either of them.It has the usual commands for looping, if-then-else, but it does not have anything like a switch or Case statement. There are also only three data types: BYTE, CARD and INT. Strings were essentially just BYTE arrays.I found it endearing that to end an IF block you used FI (IF spelled backwards) and to end a DO block you used OD. That is some interesting symmetry although I’m not really sure it helps readability.An Action! “Hello World” program would be this:PROC hello()
; This is a comment.
  DO
    PrintE("Goto 10")
  OD
RETURNThe Action! language may not have been as advanced as C or Pascal, but because it was designed with the 6502 CPU in mind, compiling the language was astonishingly fast.The original Atari Pascal system from APX needed multiple disk drives and could take several minutes to compile a small program. The only C package available in 1983 (Deep Blue C) was at least as limited as Action!, but also not an integrated package and compiled slowly. Draper Pascal only compiled to pseudo-code.Action! compiled your program to machine code in memory and in seconds. Typing C (to compile) and then R (to run) was hardly slower than just typing RUN in BASIC.It really is stupidly fast. Here’s the output from the above program:If there is a compile error, it is shown on the screen and will be highlighted when you switch back to the editor by typing “e”.Action! was not perfect and it had several limitations. In my opinion, the two biggest limitations were that that Action! cartridge was required to run Action! programs (because they depended on the library that was included the cartridge ROM) and that there was no floating point data type.Both of these did get solved, to some extent, with the purchase of an additional add-ons: Action! RunTime and Action! Toolkit.The RunTime package provided the ability to create stand-alone Action! programs that you could distribute to others to run without the cartridge.The RunTime included the library as source files that you could include at the beginning of your own programs so that everything that was needed to run would get compiled into a single executable program. From what I can tell, Action! had no concept of linking which is how something like C would have handled this.I don’t have an official Action! RunTime disk, but the image is readily available online.The ToolKit is essentially an enhanced Library with additional functions and features. Two notable things it adds are player/missile graphics support and some support for floating-point numbers via several “Real” functions.Unfortunately this floating point support is somewhat limited and it doesn’t look all that useful to me. For example, I’ve used the Archimedes Spiral program in some articles here on Goto 10 to demonstrate drawing a fun graphic on the screen. It is interesting to see how long it can take to do the drawing on an 8-bit computer. I’d love to port it to Action!, and I was hopeful I’d be able to do so with the Action! ToolKit. Alas, even though it does add some commands to do some floating-point math, it does not add any trigonometry functions. The lack of Sin and Cos make it impractical to port Archimedes Spiral4.I don’t have an official Action! ToolKit disk, but the image is readily available online.It seems that Action! was mostly use by hobbyists, public domain and magazine software. The only two known commercial product made with Action! were the HomePak5 productivity package by Russ Wetmore and the Games Computers Play online service.For the above screen shots, I was using Action! with my 130XE.I plan to dig into actually using Action! itself more in the coming months. It really looks like a fun language. Unfortunately, since Action! is a cartridge, I can’t use it directly with my Side3 cart. There are disk-based versions of Action! available at AtariWiki, so I may have to switch to one of those, or see if I can get one of the SuperCart images to work with Side3. Otherwise, I may try it old-school with SpartaDOS, my trusty 1050 disk drive and a RAM disk.AtariWiki has a create page with lots of links to Action!-related materials.Action! Archive is a great reference for Action! programming.If you want to learn more about how to program in Action!, be sure to check out David Arlington’s YouTube channel, which has a 25-part series on Action! programming.1Kyan Pascal was released in 1986 and worked pretty well, but really wanted a couple disk drives. LightSpeed C was also a decent version of C that debuted later in the 80s.2Actually an OSS SuperCartridge, which had 16K of ROM but only used 8K of address space in the computer.3Calling it a debugger might be a bit of stretch compared to modern tools.4Sure, I could probably implement my own version of those, but I don’t really want to.5HomePak was an integrated productivity package with a highly regarded terminal program, a slick word processor with not much free RAM for text (perhaps 5 pages) and an usual database. HomePak warrants its own article.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[LLM Visualization]]></title>
            <link>https://bbycroft.net/llm</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45130260</guid>
            <description><![CDATA[A 3D animated visualization of an LLM with a walkthrough.]]></description>
            <content:encoded><![CDATA[LLM VisualizationHome]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Artie (YC S23) Is Hiring Engineers, AES, and Senior PMM]]></title>
            <link>https://www.ycombinator.com/companies/artie/jobs</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45129442</guid>
            <description><![CDATA[Jobs at Artie]]></description>
            <content:encoded><![CDATA[Software that streams data from databases to warehouses in real-timeJobs at ArtieSan Francisco, CA, US$110K - $130K0.10%3+ yearsSan Francisco, CA, US$145K - $185K0.20% - 0.40%3+ yearsSan Francisco, CA, US$150K - $215K0.50% - 1.00%3+ yearsSan Francisco, CA, US$150K - $215K0.50% - 1.00%3+ yearsWhy you should join ArtieWe are building Artie, a real-time data streaming solution focused on databases and data warehouses. Typical ETL solutions leverage batched processes or schedulers (DAGs, Airflow), which cannot achieve real time data syncs. We leverage change data capture (CDC) and stream processing to perform data transfers in a more efficient way, which enables sub-minute latency.Founded:2023Batch:S23Team Size:8Status:ActiveLocation:San FranciscoFounders]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AI not affecting job market much so far, New York Fed says]]></title>
            <link>https://money.usnews.com/investing/news/articles/2025-09-04/ai-not-affecting-job-market-much-so-far-new-york-fed-says</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45129267</guid>
            <description><![CDATA[US News is a recognized leader in college, grad school, hospital, mutual fund, and car rankings. Track elected officials, research health conditions, and find news you can use in politics, business, health, and education.]]></description>
            <content:encoded><![CDATA[By Michael S. DerbyNEW YORK (Reuters) -Rising adoption of artificial intelligence technology by firms in the Federal Reserve's New York district has not been much of a job-killer so far, the regional Fed bank said in a blog on Thursday."Businesses reported a notable increase in AI use over the past year, yet very few firms reported AI-induced layoffs," New York Fed economists wrote in the blog. "Indeed, for those already employed, our results indicate AI is more likely to result in retraining than job loss, similar to our findings from last year," and so far the technology does not point to "significant reductions in employment."There has been broad concern that AI could create major headwinds for hiring in the coming years, with the technology hitting highly-paid professional and managerial jobs the hardest. Investors are plowing cash into AI investments at a time when employment has already begun to show some softness, although job market changes related to AI will almost certainly play out over a long time horizon.The New York Fed blog noted that the modest impact on jobs so far may not hold in the future. "Looking ahead, firms anticipate more significant layoffs and scaled-back hiring as they continue to integrate AI into their operations," New York Fed researchers wrote.The New York Fed found that 40% of services firms used AI over the last year, up from 25% a year ago, while just shy of half of these types of firms plan to use the technology over the next six months. AI usage by factory operators rose to 26% of respondents, from 16% a year ago, the blog said, adding that a third of manufacturers expect to use AI in the next six months.(Reporting by Michael S. Derby; Editing by Paul Simao)Copyright 2025 Thomson Reuters.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A PM's Guide to AI Agent Architecture]]></title>
            <link>https://www.productcurious.com/p/a-pms-guide-to-ai-agent-architecture</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45129237</guid>
            <description><![CDATA[A complete guide to agent architecture, orchestration patterns, trust strategies, and adoption plans for PMs building AI agents.]]></description>
            <content:encoded><![CDATA[Last week, I was talking to a PM who'd in the recent months shipped their AI agent. The metrics looked great: 89% accuracy, sub-second respond times, positive user feedback in surveys. But users were abandoning the agent after their first real problem, like a user with both a billing dispute and a locked account."Our agent could handle routine requests perfectly, but when faced with complex issues, users would try once, get frustrated, and immediately ask for a human."This pattern is observed across every product team that focuses on making their agents "smarter" when the real challenge is making architectural decisions that shape how users experience and begin to trust the agent. In this post, I'm going to walk you through the different layers of AI agent architecture. How your product decisions determine whether users trust your agent or abandon it. By the end of this, you'll understand why some agents feel "magical" while others feel "frustrating" and more importantly, how PMs should architect for the magical experience.We'll use a concrete customer support agent example throughout, so you can see exactly how each architectural choice plays out in practice. We’ll also see why the counterintuitive approach to trust (hint: it's not about being right more often) actually works better for user adoption.You're the PM building an agent that helps users with account issues - password resets, billing questions, plan changes. Seems straightforward, right?But when a user says "I can't access my account and my subscription seems wrong" what should happen?Scenario A: Your agent immediately starts checking systems. It looks up the account, identifies that the password was reset yesterday but the email never arrived, discovers a billing issue that downgraded the plan, explains exactly what happened, and offers to fix both issues with one click.Scenario B: Your agent asks clarifying questions. "When did you last successfully log in? What error message do you see? Can you tell me more about the subscription issue?" After gathering info, it says "Let me escalate you to a human who can check your account and billing."Same user request. Same underlying systems. Completely different products.Think of agent architecture like a stack where each layer represents a product decision you have to make.The Decision: How much should your agent remember, and for how long?This isn't just technical storage - it's about creating the illusion of understanding. Your agent's memory determines whether it feels like talking to a robot or a knowledgeable colleague.For our support agent: Do you store just the current conversation, or the customer's entire support history? Their product usage patterns? Previous complaints? Types of memory to consider:Session memory: Current conversation ("You mentioned billing issues earlier...")Customer memory: Past interactions across sessions ("Last month you had a similar issue with...")Behavioral memory: Usage patterns ("I notice you typically use our mobile app...")Contextual memory: Current account state, active subscriptions, recent activityThe more your agent remembers, the more it can anticipate needs rather than just react to questions. Each layer of memory makes responses more intelligent but increases complexity and cost.The Decision: Which systems should your agent connect to, and what level of access should it have?The deeper your agent connects to user workflows and existing systems, the harder it becomes for users to switch. This layer determines whether you're a tool or a platform.For our support agent: Should it integrate with just your Stripe’s billing system, or also your Salesforce CRM, ZenDesk ticketing system , user database, and audit logs? Each integration makes the agent more useful but also creates more potential failure points - think API rate limits, authentication challenges, and system downtime.Here's what's interesting - Most of us get stuck trying to integrate with everything at once. But the most successful agents started with just 2-3 key integrations and added more based on what users actually asked for.The Decision: Which specific capabilities should your agent have, and how deep should they go?Your skills layer is where you win or lose against competitors. It's not about having the most features - it's about having the right capabilities that create user dependency.For our support agent: Should it only read account information, or should it also modify billing, reset passwords, and change plan settings? Each additional skill increases user value but also increases complexity and risk.Implementation note: Tools like MCP (Model Context Protocol) are making it much easier to build and share skills across different agents, rather than rebuilding capabilities from scratch. The Decision: How do you measure success and communicate agent limitations to users?This layer determines whether users develop confidence in your agent or abandon it after the first mistake. It's not just about being accurate - it's about being trustworthy.For our support agent: Do you show confidence scores ("I'm 85% confident this will fix your issue")? Do you explain your reasoning ("I checked three systems and found...")? Do you always confirm before taking actions ("Should I reset your password now?")? Each choice affects how users perceive reliability.Trust strategies to consider:Confidence indicators: "I'm confident about your account status, but let me double-check the billing details"Reasoning transparency: "I found two failed login attempts and an expired payment method"Graceful boundaries: "This looks like a complex billing issue - let me connect you with our billing specialist who has access to more tools"Confirmation patterns: When to ask permission vs. when to act and explainThe counterintuitive insight: users trust agents more when they admit uncertainty than when they confidently make mistakes.Okay, so you understand the layers. Now comes the practical question that every PM asks: "How do I actually implement this? How does the agent talk to the skills? How do skills access data? How does evaluation happen while users are waiting?"Your orchestration choice determines everything about your development experience, your debugging process, and your ability to iterate quickly.Lets walk through the main approaches, and I'll be honest about when each one works and when it becomes a nightmare.Everything happens in one agent's context. For our support agent: When the user says "I can't access my account," one agent handles it all - checking account status, identifying billing issues, explaining what happened, offering solutions. Why this works: Simple to build, easy to debug, predictable costs. You know exactly what your agent can and can't do.Why it doesn't: Can get expensive with complex requests since you're loading full context every time. Hard to optimize specific parts.Most teams start here, and honestly, many never need to move beyond it. If you're debating between this and something more complex, start here.You have a router that figures out what the user needs, then hands off to specialized skills.For our support agent: Router realizes this is an account access issue and routes to the `LoginSkill`. If the LoginSkill discovers it's actually a billing problem, it hands off to `BillingSkill`.Real example flow:User: "I can't log in"Router → LoginSkillLoginSkill checks: Account exists ✓, Password correct ✗, Billing status... wait, subscription expiredLoginSkill → BillingSkill: "Handle expired subscription for user123"BillingSkill handles renewal processWhy this works: More efficient - you can use cheaper models for simple skills, expensive models for complex reasoning. Each skill can be optimized independently.Why it doesn't: Coordination between skills gets tricky fast. Who decides when to hand off? How do skills share context?Here's where MCP really helps - it standardizes how skills expose their capabilities, so your router knows what each skill can do without manually maintaining that mapping.You predefine step-by-step processes for common scenarios. Think LangGraph, CrewAI, AutoGen, N8N, etc.For our support agent: "Account access problem" triggers a workflow:Check account statusIf locked, check failed login attempts  If too many failures, check billing statusIf billing issue, route to payment recoveryIf not billing, route to password resetWhy this works: Everything is predictable and auditable. Perfect for compliance-heavy industries. Easy to optimize each step.Why it doesn't: When users have weird edge cases that don't fit your predefined workflows, you're stuck. Feels rigid to users.Multiple specialized agents work together using A2A (agent-to-agent) protocols. The vision: Your agent discovers that another company's agent can help with issues, automatically establishes a secure connection, and collaborates to solve the customer's problem. Think a booking.com agent interacting with an American Airlines agent! For our support agent: `AuthenticationAgent` handles login issues, `BillingAgent` handles payment problems, `CommunicationAgent` manages user interaction. They coordinate through standardized protocols to solve complex problems.Reality check: This sounds amazing but introduces complexity around security, billing, trust, and reliability that most companies aren't ready for. We're still figuring out the standards.This can produce amazing results for sophisticated scenarios, but debugging multi-agent conversations is genuinely hard. When something goes wrong, figuring out which agent made the mistake and why is like detective work.Here's the thing: start simple. Single-agent architecture handles way more use cases than you think. Add complexity only when you hit real limitations, not imaginary ones.But here's what's interesting - even with the perfect architecture, your agent can still fail if users don't trust it. That brings us to the most counterintuitive lesson about building agents.Here's something counterintuitive: Users don't trust agents that are right all the time. They trust agents that are honest about when they might be wrong.Think about it from the user's perspective. Your support agent confidently says "I've reset your password and updated your billing address." User thinks "great!" Then they try to log in and... it doesn't work. Now they don't just have a technical problem - they have a trust problem.Compare that to an agent that says "I think I found the issue with your account. I'm 80% confident this will fix it. I'm going to reset your password and update your billing address. If this doesn't work, I'll immediately escalate to a human who can dive deeper."Same technical capability. Completely different user experience.Building trusted agents requires focus on three things:Confidence calibration: When your agent says it's 60% confident, it should be right about 60% of the time. Not 90%, not 30%. Actual 60%.Reasoning transparency: Users want to see the agent's work. "I checked your account status (active), billing history (payment failed yesterday), and login attempts (locked after 3 failed attempts). The issue seems to be..."Graceful escalation: When your agent hits its limits, how does it hand off? A smooth transition to a human with full context is much better than "I can't help with that."A lot of times we obsess over making agents more accurate, when what users actually want was more transparency about the agent's limitations.In Part 2, I'll dive deeper into the autonomy decisions that keep most PMs up at night. How much independence should you give your agent? When should it ask for permission vs forgiveness? How do you balance automation with user control?We'll also walk through the governance concerns that actually matter in practice - not just theoretical security issues, but the real implementation challenges that can make or break your launch timeline.No posts]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Age Simulation Suit]]></title>
            <link>https://www.age-simulation-suit.com/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45129190</guid>
            <description><![CDATA[The GERontologic Test suit GERT creates the experience old age. GERT is the age simulation suit for universities, seminaries, institutes and companies.]]></description>
            <content:encoded><![CDATA[



GERonTologic simulator GERT
The age simulation suit GERT offers the opportunity to experience the impairments of older persons even for younger people.

The age-related impairments are:
■  opacity of the eye lens
■  narrowing of the visual field
■  high-frequency hearing loss
■  head mobility restrictions
■  joint stiffness
■  loss of strength
■  reduced grip ability
■  reduced coordination skills
GERT for only  � 1390,‑ / � 1250,-
complete as pictured, plus shipping and VAT if applicable
New: now with 2 pairs of glasses instead of the model shown






Due to the significant increase in the time and effort required to process orders, in particular as a result of incomplete or incorrect information provided with orders, and the fact that we increasingly have to send reminders for invoices for smaller amounts, we can only accept orders with a value of at least 300 euros or pounds.

Customer reviews:
The quality is great and it works how it is supposed to. I�m happy with my purchase.
Great way to teach about elderly behavior. I�ve been using this suit for a while now and it�s very durable and easy to use. Thanks!!














For many years ourage simulation suitGERT has been byfar the most popularproduct worldwide.The EuropeanCompetence Centrefor Accessibility hascertified our agesimulation suit GERT.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How we built an interpreter for Swift]]></title>
            <link>https://www.bitrig.app/blog/swift-interpreter</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45129160</guid>
            <description><![CDATA[Build apps for your phone, on your phone.]]></description>
            <content:encoded><![CDATA[Bitrig dynamically generates and runs Swift apps on your phone. Normally this would require compiling and signing with Xcode, and you can’t do that on an iPhone.
To make it possible to instantly run your app, we built a Swift interpreter. But it’s an unusual interpreter, since it interprets from Swift… to Swift. One of the top questions we’ve gotten is how it’s implemented, so we wanted to share how it works. To make this more accessible and interesting, we simplified some of the more esoteric details. But we hope you’ll come away with a high-level picture of how the interpreter works.
The Swift project helpfully provides a way to reuse all of the parsing logic from the compiler: SwiftSyntax. This made our job a lot easier. We can easily take some Swift code and get a parsed tree out of it, which we can use to evaluate and call into to get dynamic runtime values. Let’s dig deeper.
We can start with generating the simplest kind of runtime values. For any literals (strings, floating point numbers, integers, and booleans), we can create corresponding Swift instances (String, Double, Int, Bool) to represent them. Since we’re not compiling this, we don’t know ahead of time what all the types will be, so we need to type erase all instances. Let’s make an enum to represent these runtime interpreter values (since we'll have multiple kinds soon):
enum InterpreterValue {
    case nativeValue(Any)
}

Next, we'll expand our interpreter runtime values to be able to represent developer-defined types, too. Let’s say we have a struct with two fields: a string and an integer. We’ll store it as a type that has a dictionary mapping from the property name to the runtime value. When an initializer gets called, we simply need to map the arguments to the property names and populate the dictionary.
enum InterpreterValue {
    case nativeValue(Any)
    case customInstance(CustomInstance)
}
struct CustomInstance {
    var type: InterpreterType
    var values: [String: InterpreterValue]
}

But, what happens when we want to call an API that comes from a framework, like SwiftUI? For example, let’s say we have a call to Text("Hello World"). We don’t want to rewrite all of the APIs, the whole benefit of making a native app is being able to call into those implementations! Well, those APIs are available for us to call into since the interpreter is also written in Swift (naturally!). We just need to change from a dynamic call to a compiled one. We can do that by pre-compiling a call to the Text initializer that can take dynamic arguments. Something like this:
func evaluateTextInitializer(arguments: [Argument]) -> Text {
  Text(arguments.first?.value.stringValue ?? "")
}

But of course, we need more than just the Text initializer, so we'll generalize this to any initializer we might be called with:
func evaluateInitializer(type: String, arguments: [Argument]) -> Any? {
  if type == "Text" {
    return Text(arguments.first?.value.stringValue ?? "")
  } else if type == "Image" {
    return Image(arguments.first?.value.stringValue ?? "")
  ...
}

We can follow this same pattern for all other API types: function calls, properties, subscripts, etc. The difficult part is that there are a lot of APIs. It’s not practical to hand-write code to call into all of them, but fortunately there is a structured list of all of them: the .swiftinterface file for each framework. We can parse those files to get a list of all of the APIs we need and then generate the necessary code to call into them.
One interesting thing about taking this approach to its most extreme is that even very basic operations that you might expect any interpreter to implement, like basic numeric operations, can still call into their framework implementations. So this kind of interpreter doesn’t know how to calculate or evaluate anything itself, and is really more of a glorified foreign function interface, but from dynamic Swift to compiled Swift.
One last important challenge is how to make custom types conform to framework protocols. For example, how do we make a custom SwiftUI View? Well, at runtime, we need a concrete type that conforms to the desired protocol. To do this, we can make stub types that conform to the protocol, but instead of having any logic of their own, simply call out to the interpreter to implement any requirements. Let’s look at Shape, a simple example:
struct ShapeStub: Shape {
    var interpreter: Interpreter
    var instance: CustomInstance

    var layoutDirectionBehavior: LayoutDirectionBehavior {
        instance.instanceMemberProperty("layoutDirectionBehavior", interpreter: interpreter).layoutDirectionBehaviorValue
    }
    func path(in rect: CGRect) -> Path {
        let arguments = [Argument(label: "in", value: rect)]
        return instance.instanceFunction("path", arguments: arguments, interpreter: interpreter).pathValue
    }
}

Coming back to View, this works the same way, with a little extra complexity because of the associated type that we have to type erase:
struct ViewStub: View {
    var interpreter: Interpreter
    var instance: CustomInstance

    var body: AnyView {
        instance.instanceMemberProperty("body", interpreter: interpreter).viewValue
            .map { AnyView($0) }
  }
}

And now we can make views that have dynamic implementations!
That’s a broad survey of how the interpreter is implemented. If you want to try it out in practice, download Bitrig!
If there’s more you want to know about the interpreter, or Bitrig as a whole, let us know!]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Stripe Launches L1 Blockchain: Tempo]]></title>
            <link>https://tempo.xyz</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45129085</guid>
            <description><![CDATA[A neutral, permissionless blockchain optimized for payment processing, enabling efficient transactions with predictable low fees and stablecoin interoperability.]]></description>
            <content:encoded><![CDATA[Why create anew blockchain?Stablecoins enable instant, borderless, programmable transactions, but current blockchain infrastructure isn’t designed for them: existing systems are either fully general or trading-focused. Tempo is a blockchain designed and built for real-world payments.Optimized forreal-world flowsTempo was started by Stripe and Paradigm, with design input from Anthropic, Coupang, Deutsche Bank, DoorDash, Lead Bank, Mercury, Nubank, OpenAI, Revolut, Shopify, Standard Chartered, Visa, and more.If you’re a company with large, real-world economic flows and would like to help shape the future of Tempo, get in touch.Partner with usTransform how your business  moves money01 :: Purpose-built payments capabilitiesOptimize your financial flows with embedded payment features, including memo fields and batch transfers.02 :: Speed and reliabilityProcess over 100,000 transactions per second (TPS) with sub-second finality, enabling real-time payments at a global scale.03 :: Predictable low feesTransform your cost structure with near-zero transaction fees that are highly predictable and can be paid in any stablecoin.04 :: Built-in privacy measuresProtect your users by keeping important transaction details private while maintaining compliance standards.Performant and scalable for any payments use case01 :: RemittancesSend money across borders instantly, securely, and at a fraction of traditional costs.02 :: Global payoutsPay anyone, anywhere, in any currency—without banking delays or fees.03 :: Embedded financeBuild compliant, programmable payments—in any stablecoin—directly into your products.04 :: MicrotransactionsEnable sub-cent payments for digital goods and on-demand services.05 :: Agentic commerceFacilitate low-cost, instant payments for agents to autonomously execute transactions.06 :: Tokenized depositsMove customer funds onchain for instant settlement and efficient interbank transfers.Technicalfeatures01 :: Fee flexibilityPay transaction fees in any stablecoin.02 :: Dedicated payments laneTransfer funds cheaply and reliably in blockspace that’s isolated from other activity.03 :: Stablecoin interoperabilitySwap stablecoins, including custom-issued ones, natively with low fees.04 :: Batch transfersSend multiple transactions onchain at once with native account abstraction.05 :: Blocklists / allowlistsMeet compliance standards by setting user-level permissions for transactions.06 :: Memo fieldsSpeed up reconciliation with offchain transactions by adding context that’s compatible with ISO 20022 standards.Frequentlyasked questions01 :: How is Tempo different from other blockchains?Tempo is an EVM-compatible L1 blockchain, purpose-built for payments. It doesn’t displace other general-purpose blockchains; rather, it incorporates design choices that meet the needs of high-volume payment use cases. These include predictable low fees in a dedicated payments lane, stablecoin neutrality, a built-in stablecoin exchange, high throughput, low latency, private transactions, payment memos compatible with standards like ISO 20022, compliance hooks, and more.02 :: Who can build on Tempo?Tempo is a neutral, permissionless blockchain open for anyone to build on. We’re currently collaborating with global partners to test various use cases, including cross-border payouts, B2B payments, remittances, and ecommerce. Interested in working with Tempo? Request access to our private testnet here.03 :: When will Tempo launch?We’re providing select partners with priority access to our testnet now. Contact us here if you’re interested.04 :: Who will run validator nodes?A diverse group of independent entities, including some of Tempo’s design partners, will run validator nodes initially before we transition to a permissionless model.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Launch HN: Slashy (YC S25) – AI that connects to apps and does tasks]]></title>
            <link>https://news.ycombinator.com/item?id=45129031</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45129031</guid>
            <description><![CDATA[Hi HN! – We’re Pranjali, Dhruv and Harsha, building Slashy (https://www.slashy.ai). We’re building a general agent that connects to apps and can read data across them and perform actions via custom tools, semantic search, and personalized memory. Here’s a demo: https://www.youtube.com/watch?v=OeApHMHhccA.]]></description>
            <content:encoded><![CDATA[Hi HN! – We’re Pranjali, Dhruv and Harsha, building Slashy (https://www.slashy.ai). We’re building a general agent that connects to apps and can read data across them and perform actions via custom tools, semantic search, and personalized memory. Here’s a demo: https://www.youtube.com/watch?v=OeApHMHhccA.While working on a previous startup, we realized we were spending more time doing busywork in apps than actually building product. We lost hundreds of hours scraping LinkedIn profiles, updating spreadsheets, updating investor reports, and communicating across multiple Slack channels. Our breaking point happened after I checked my screen time and realized I spent 4 hours a day in Gmail. We decided that we could create more value solving this than by working on the original startup (a code generation agent similar to Lovable).Slashy is an AI agent that uses direct tool calls to services such as Gmail, Calendar, Notion, Sheets and more. We built all of our tools in-house since we found that most MCPs are low quality and add an unnecessary layer of abstraction. Through these tools, the agent is able to semantically search across your apps, get relevant information, and perform actions (e.g. send emails, create calendar events, etc). This solves the problem of context-switching and copy-pasting information from an app back and forth into ChatGPT.Slashy integrates to 15 different services so far (G-Suite, Slack, Notion, Dropbox, Airtable, Outlook, Phone, Linear, Hubspot, and more). We use a single agent architecture (as we found this reduces hallucinations), and use our own custom tools—doing so allows the model to have higher quality as we can design them to work in a general agent structure, for example we use markdown for Slack/Notion instead of their native text structure.So what makes Slashy different from the 100 other general agents?- It Actually Takes Action: Unlike ChatGPT or Claude that just give you information, Slashy researches companies, creates Google Docs with findings, adds contacts to your CRM, schedules follow-ups, and sends personalized emails – all in one workflow.- Cross-Tool Context: Most automation tools work in silos (one of the biggest problems with MCP). Slashy understands your data across platforms. It can read your previous Slack conversations about a prospect, check your calendar for availability, research their company online, and draft a personalized email. What powers this is our own semantic search functionality.- User Action Graphs: Our agent over time has memory not just of past conversations, but also forms user actions graphs to know what actions are expected based on previous user conversations.- No Technical Setup Required: While Zapier requires building complex flows and fails silently, Slashy works through natural language. Just describe what you want automated.- Custom UI: For our tool calls we design custom UI for each of them to make the UX more natural.Here are some examples of workflows people use us for:▪ "Every day look at my calendar and send me a notion doc with in-depth backgrounds on everyone I’m meeting"▪ "Find the emails of everyone who reacted to my latest LinkedIn post and send personalized outreach"▪ "Can you make me an investor pitch deck with market research, competitive analysis, and financial projections"▪ "Doing a full Nvidia Discounted Cash Flow (DCF) analysis"Slashy.ai is live with a free tier (100 daily credits) along with 500 credits for any new account. You can immediately try out workflows like the ones above and we have a special code for HN (HACKERNEWS at checkout).Hope you all enjoy Slashy as much as we do :)]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Show HN: I built FlipCards – a flashcard app with variations to improve learning]]></title>
            <link>https://flipcardsapp.vercel.app/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45128621</guid>
        </item>
        <item>
            <title><![CDATA[Wikipedia survives while the rest of the internet breaks]]></title>
            <link>https://www.theverge.com/cs/features/717322/wikipedia-attacks-neutrality-history-jimmy-wales</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45128391</guid>
            <description><![CDATA[How the world’s largest encyclopedia became the factual foundation of the web, but now it’s under attack from the right wing, tech billionaires, and AI.]]></description>
            <content:encoded><![CDATA[When armies invade, hurricanes form, or governments fall, a Wikipedia editor will typically update the relevant articles seconds after the news breaks. So quick are editors to change “is” to “was” in cases of notable deaths that they are said to have the fastest past tense in the West. So it was unusual, according to one longtime editor who was watching the page, that on the afternoon of January 20th, 2025, hours after Elon Musk made a gesture resembling a Nazi salute at a rally following President Donald Trump’s inauguration and well into the ensuing public outcry, no one had added the incident to the encyclopedia.Then, just before 4PM, an editor by the name of PickleG13 added a single sentence to Musk’s 8,600-word biography: “Musk appeared to perform a Nazi salute,” citing an article in The Jerusalem Post. In a note explaining the change, the editor wrote, “This controversy will be debated, but it does appear and is being reported that Musk may have performed a Hitler salute.” Two minutes later, another editor deleted the line for violating Wikipedia’s stricter standards for unflattering information in biographies of living people.But PickleG13 was correct. That evening, as the controversy over the gesture became a vortex of global attention, another editor called for an official discussion about whether it deserved to be recorded in Wikipedia. At first, the debate on the article’s “talk page,” where editors discuss changes, was much the same as the one playing out across social media and press: it was obviously a Nazi salute vs. it was an awkward wave vs. it couldn’t have been a wave, just look at the touch to his shoulder, the angle of his palm vs. he’s autistic vs. no, he’s antisemitic vs. I don’t see the biased media calling out Obama for doing a Nazi salute in this photo I found on Twitter vs. that’s just a still photo, stop gaslighting people about what they obviously saw. But slowly, through the barbs and rebuttals and corrections, the trajectory shifted.Wikipedia is the largest compendium of human knowledge ever assembled, with more than 7 million articles in its English version, the largest and most developed of 343 language projects. Started nearly 25 years ago, the site was long mocked as a byword for the unreliability of information on the internet, yet today it is, without exaggeration, the digital world’s factual foundation. It’s what Google puts at the top of search results otherwise awash in ads and spam, what social platforms cite when they deign to correct conspiracy theories, and what AI companies scrape in their ongoing quest to get their models to stop regurgitating info-slurry — and consult with such frequency that they are straining the encyclopedia’s servers. Each day, it’s where approximately 70 million people turn for reliable information on everything from particle physics to rare Scottish sheep to the Erfurt latrine disaster of 1184, a testament both to Wikipedia’s success and to the total degradation of the rest of the internet as an information resource. “It’s basically the only place on the internet that doesn’t function as a confirmation bias machine.”But as impressive as this archive is, it is the byproduct of something that today looks almost equally remarkable: strangers on the internet disagreeing on matters of existential gravity and breathtaking pettiness and, through deliberation and debate, building a common ground of consensus reality.“One of the things I really love about Wikipedia is it forces you to have measured, emotionless conversations with people you disagree with in the name of trying to construct the accurate narrative,” said DF Lovett, a Minnesota-based writer and marketer who mostly edits articles about local landmarks and favorite authors but later joined the salute debate to argue that “Elon Musk straight-arm gesture controversy” was a needlessly awkward description. “It’s basically the only place on the internet that doesn’t function as a confirmation bias machine,” he said, which is also why he thinks people sometimes get mad at it. Wikipedia is one of the few platforms online where tremendous computing power isn’t being deployed in the service of telling you exactly what you want to hear.Whether Musk had made a Nazi salute or was merely awkward, the editors decided, was not for them to say, even if they had their opinions. What was a fact, they agreed, was that on January 20th, Musk had “twice extended his right arm toward the crowd in an upward angle,” that many observers compared the gesture to a Nazi salute, and that Musk denied any meaning behind the motion. Consensus was reached. The lines were added back. Approximately 7,000 words of deliberation to settle, for a time, three sentences. This was Wikipedia’s process working as intended.It was at this point that Musk himself cannonballed into the discourse, tweeting that the encyclopedia was “legacy media propaganda!”This was not Musk’s first time attacking the site — that appears to have been in 2019, when he complained that it accurately described him as an early investor in Tesla rather than its founder. But recently he has taken to accusing the encyclopedia of a liberal bias, mocking it as “wokepedia,” and calling for it to be defunded. In so doing, he has joined a growing number of powerful people, groups, and governments that have made the site a target. In August, Republicans on the US House Oversight Committee sent a letter to the Wikimedia Foundation requesting information on attempts to “inject bias” into the encyclopedia and data about editors suspected of doing so.Musk repeating the salute before saying: “My heart goes out to you. It is thanks to you that the future of civilization is assured.”Hannah Arendt was a German and American historian and philosopher. She was one of the most influential political theorists of the twentieth century.Members of the Hitler Youth in Berlin performing the Nazi salute at a rally in 1933.Pyramidology refers to various religious or pseudoscientific speculations regarding pyramids, most often the Giza pyramid complex and the Great Pyramid of Giza in Egypt. The human understanding when it has once adopted an opinion ... draws all things else to support and agree with it. And though there be a greater number and weight of instances to be found on the other side, yet these it either neglects or despises, or else by some distinction sets aside or rejects[.] - Francis BaconAn MRI scanner allowed researchers to examine how the human brain deals with dissonant information.Mock trials allow researchers to examine confirmation biases in a realistic setting.When governments have cowed the press and flooded social platforms with viral propaganda, Wikipedia has become the next target, and a more stubborn one. Because it is edited by thousands of mostly pseudonymous volunteers around the world — and in theory, by anyone who feels like it — its contributors are difficult for any particular state to persecute. Since it’s supported by donations, there is no government funding to cut off or advertisers to boycott. And it is so popular and useful that even highly repressive governments have been hesitant to block it.Instead, they have developed an array of more sophisticated strategies. In Hong Kong, Russia, India, and elsewhere, government officials and state-aligned media have accused the site of ideological bias while online vigilantes harass editors. In several cases, editors have been sued, arrested, or threatened with violence.When several dozen editors gathered in San Francisco this February, many were concerned that the US could be next. The US, with its strong protections for online speech, has historically been a refuge when the encyclopedia has faced attacks elsewhere in the world. It is where the Wikimedia Foundation, the nonprofit that supports the project, is based. But the site has become a popular target for conservative media and influencers, some of whom now have positions in the Trump administration. In January, the Forward published slides from the Heritage Foundation, the think tank responsible for Project 2025, outlining a plan to reveal the identities of editors deemed antisemitic for adding information critical of Israel, a cudgel that the administration has wielded against academia. “It’s about creating doubt, confusion, attacking sources of trust,” an editor told the assembled group. “It came for the media and now it’s coming for Wikipedia and we need to be ready.”In 1967, Hannah Arendt published an essay in The New Yorker about what she saw as an inherent conflict between politics and facts. As varieties of truth go, she wrote, facts are fragile. Unlike axioms and mathematical proofs that can be derived by anyone at any time, there is nothing necessary about the fact, to use Arendt’s example, that German troops crossed the border with Belgium on the night of August 4th, 1914, and not some other border at some other time. Like all facts, this one is established through witnesses, testimony, documents, and collective agreement about what counts as evidence — it is political, and as the propaganda machines of the 20th century showed, political power is perfectly capable of destroying it. Furthermore, they will always be tempted to, because facts represent a sort of rival power, a constraint and limit “hated by tyrants who rightly fear the competition of a coercive force they cannot monopolize,” and at risk in democracies, where they are suspiciously impervious to public opinion. Facts, in other words, don’t care about your feelings. “Unwelcome facts possess an infuriating stubbornness,” Arendt wrote.This infuriating stubbornness turns out to be important, though. A lie might be more plausible or useful than a fact, but it lacks a fact’s dumb arbitrary quality of being the case for no particular reason and no matter your opinion or influence. History once rewritten can be rewritten again and becomes insubstantial. Rather than believe the lie, people stop believing anything at all, and even those in power lose their bearings. This gives facts “great resiliency” that is “oddly combined” with their fragility. Having a stubborn common ground of shared reality turns out to be a basic precondition of collective human life — of politics. Even political power seems to recognize this, Arendt wrote, when it establishes ideally impartial institutions insulated from its own influence, like the judiciary, the press, and academia, charged with producing facts according to methods other than the pure exercise of power.Leonardo DiCaprio is an American actor and film producer.Outside Wikipedia, original research is a key part of scholarly work. However, Wikipedia editors must base their contributions on reliable, published sources, not their own original research.On the floor of the US Senate, Republican Sen. Jim Inhofe displayed a snowball — on February 26th, 2015, in winter — as evidence the globe was not warming, in a year that was found to be Earth’s warmest on record at the time.Grouvellinus leonardodicaprioi is a species of riffle beetle in the superfamily Byrrhoidea.The species was named after actor and environmentalist Leonardo DiCaprio to acknowledge his work in “promoting environmental awareness and bringing the problems of climate change and biodiversity loss into the spotlight.”Wikipedia has come to play a similar role of factual ballast to an increasingly unmoored internet, but without the same institutional authority and with its own methods developed piecemeal over the last two decades for arriving at consensus fact. How to defend it from political attacks is not straightforward. At the conference, many editors felt both that attacks from the Trump administration were a genuine threat and that being cast as “the resistance” risked jeopardizing the encyclopedia’s position of trusted neutrality.“I would really argue not to take the attack approach, to really take the passive approach,” said one editor when someone broached the idea of actively debunking some of the false information swamping the rest of the internet. “People see us as credible because we don’t attack, because we are just providing information to everyone all the time in a boring way. Sometimes boring is good. Boring is credible.”Even the editor at the summit who had been most directly affected by the Trump administration urged against a direct response. Jamie Flood had been a librarian and outreach specialist at the National Agricultural Library, where among other duties she led group trainings and uploaded research on topics like germplasm and childhood nutrition to Wikipedia. Museums and libraries around the world employ such “Wikipedians in residence” to act as liaisons with the encyclopedia’s community for the same reason that the World Health Organization partnered with Wikipedia during the covid-19 pandemic to make the latest information available: if you want research to reach the public, there is no better place.Along with several other Wikipedians employed by the federal government, Flood had just been laid off by DOGE, collateral damage in a general dismantling of research and archival institutions. “I’m a casualty of this administration’s war on information,” Flood said.“‘Imagine a world where all knowledge is freely available to everyone.’”Still, Wikipedia absolutely should not counterattack, Flood said. “Wikipedia is always in the background. They’re not making a big statement, and I don’t think they should. I’ve been training people for a long time and I still go back to this early quote of Jimmy Wales, one of the founders: ‘Imagine a world where all knowledge is freely available to everyone.’ That’s enough. That’s a statement in and of itself. In a time of misinformation, in a time of suppression, having this place where people can come and bring knowledge and share knowledge, that is a statement.”Wikipedia should be, in other words, as stubborn as a fact. But then, facts are fragile things. A common refrain among Wikipedians is that the site works in practice but not in theory. It seems to flout everything we’ve learned about human behavior online: anonymous strangers discussing divisive topics and somehow, instead of dissolving into factions and acrimony, working together to build something of value.The project’s origins go back to 1999. Wales, a former options trader who had founded a laddish web portal called Bomis, wanted to start a free online encyclopedia. He hired an acquaintance from an Ayn Rand listserv that Wales previously ran, a philosophy PhD student named Larry Sanger. Their first attempt, called Nupedia, was not so different from encyclopedias as they have existed since Diderot’s Encyclopédie in 1751. Experts would write articles that went through seven stages of editorial review. It was slow going. After a year, Nupedia had just over 20 articles.In an attempt to speed things along, they decided to experiment with wikis, a web format gaining popularity among open-source software developers that allowed multiple people to collaboratively edit a project. (Wiki is the Hawaiian word for “quick.”) The wiki was intended to be a forum where the general public could contribute draft articles that would then be fed into Nupedia’s peer-review pipeline, but the experts objected and the crowdsourced site was given its own domain, Wikipedia.com. It went live on January 15th, 2001. Within days, it had more articles than all of Nupedia, albeit of varying quality. After a year, Wikipedia had more than 20,000 articles.“...write about what people believe, rather than what is so”There were few rules at first, but one that Wales said was “non-negotiable” was that Wikipedia should be written from a “neutral point of view.” The policy, abbreviated as NPOV, was imported from the “nonbias policy” Sanger had written for Nupedia. But on Wikipedia, Wales considered it as much a “social concept of cooperation” as an editorial standard. If this site was going to be open to anyone to edit, the only way to avoid endless flame wars over who is right was, provocatively speaking, to set questions of truth aside. “We could talk about that and get nowhere,” Wales wrote to the Wikipedia email list. “Perhaps the easiest way to make your writing more encyclopedic is to write about what people believe, rather than what is so,” he explained.Ideally, the neutrality principle would allow people of different views to agree, if not on the matter at hand, then at least on what it was they were disagreeing about. “If you’ve got a kind and thoughtful Catholic priest and a kind and thoughtful Planned Parenthood activist, they’re never going to agree about abortion, but they can probably work together on an article,” Wales would later say.This view faced an immediate challenge, which is that people believe all sorts of things: that the Earth is 6,000 years old, that climate change is a scam, that the Holocaust was a hoax, that the Irish potato famine was overblown, that chiropractors are all charlatans, that they have discovered a new geometry, and that Mother Teresa was a jerk.Lawrence Mark Sanger is an American Internet project developer and philosopher who cofounded Wikipedia along with Jimmy Wales. Anti-denialist banner at the 2017 Climate March in Washington, DC.Mary Teresa Bojaxhiu was an Albanian Indian Catholic nun, founded the Missionaries of Charity, and is a Catholic saint.Young Earth creationism (YEC) is a form of creationism that holds as a central tenet that the Earth and its lifeforms were created by supernatural acts of the Abrahamic God between about 10,000 and 6,000 years ago, contradicting established scientific data that puts the age of Earth around 4.54 billion years.In response, the early volunteers added another rule. You can’t just say things; any factual claim needs a citation that readers can check for themselves. When people started emailing Wales their proofs that Einstein was wrong about relativity, he clarified that the cited source could not be your own “original research.” Sorry, Wales wrote to an Einstein debunker, it doesn’t matter whether your theory is true. When it is published in a physics journal, you can cite that.Instead of trying to ascertain the truth, editors assessed the credibility of sources, looking to signals like whether a publication had a fact-checking department, got cited by other reputable sources, and issued corrections when it got things wrong. At their best, these ground rules ensured debates followed a productive dialectic. An editor might write that human-caused climate change was a fact; another might change the line to say there was ongoing debate; a third editor would add the line back, backed up by surveys of climate scientists, and demand peer-reviewed studies supporting alternate theories. The outcome was a more accurate description of the state of knowledge than many journalists were promoting at the time by giving “both sides” equal weight, and also a lot of work to arrive at. A 2019 study published in Nature found that Wikipedia’s most polarizing articles — eugenics, global warming, Leonardo DiCaprio — are the highest quality, because each side keeps adding citations in support of their views. Wikipedia: a machine for turning conflict into bibliographies. Coupled with some technical features of wikis, like the ability for anyone to edit anyone else’s writing, and some early administrative rules, like not being allowed to undo someone else’s edit more than three times per day, users were practically forced to talk through disagreements and arrive at “consensus.” This became Wikipedia’s governing principle.This may make the process sound more peaceful than it is. Disputes were constant. Early on, Sanger, who had remained partial to a more hierarchical, expert-driven model, clashed repeatedly with editors he decried as “anarchists” and demanded greater authority for himself, which the editors rejected. When revenue from Bomis dried up after the dot-com crash, Wales laid Sanger off and took over management of the project.Wales governed from a greater remove, appearing only occasionally to broker peace between warring editors, resolve an impasse, or reassure people that they didn’t need to spend time devising procedures to screen out a sudden influx of neo-Nazis that were planning to overwhelm discussion, because if they showed up, “I will personally ban them all if necessary, and that’s that.” Editors sometimes ironically referred to him as their “God King” or “benevolent dictator,” but he described his role as a sort of constitutional monarch safeguarding the community as it developed the processes to fully govern itself. Because Wikipedia was under a Creative Commons license, anyone who didn’t like the way the project was run could copy it and start their own, as a group of Spanish users did when the possibility of running ads was raised in 2002. The next year Wales established a nonprofit, the Wikimedia Foundation, to raise funds and handle the technical and legal work required to keep the project running. The encyclopedia itself, however, would be entirely edited and managed by volunteers.In early 2004, Wales delegated his moderating powers to a group of elected editors, called the Arbitration Committee. From that point onward, he was essentially another editor, screenname Jimbo Wales, liable to have his edits undone like anyone else. He attempted several times to update his own birthdate to reflect the fact that his mother says he was born slightly before midnight on August 7th, 1966, not on August 8th, as his birth certificate read, only to be reprimanded for editing his own page and trying to cite his own “original research.” (After several years of debates and citable coverage from reliable sources, August 7th eventually won, with a note explaining the discrepancy.)Over the ensuing two decades, editors amended policies to cope with conspiracy theorists, revisionist historians, militant fandoms, and other perennial goblins of the open web. There were the three core content guidelines of Neutral Point of View, Verifiability, and No Original Research; the five pillars of Wikipedia; and a host of rules around editor conduct, like the injunction to avoid ad hominem attacks and assume good faith of others, defined and refined in interlinked articles and essays. There are specialized forums and noticeboards where editors can turn for help making an article more neutral, figuring out whether a source was reliable, or deciding whether a certain view was fringe or mainstream. By 2005, the pages where editors stipulated policy and debated articles were found to be growing faster than the articles themselves. Today, this administrative backend is at least five times the size of the encyclopedia it supports.The most important thing to know about this system is that, like the neutrality principle from which it arose, it largely ignores content to focus on process. If editors disagree about, for example, whether the article for the uninhabited islands claimed by both Japan and China should be titled “Senkaku Islands,” “Diaoyu Islands,” or “Pinnacle Islands,” they first try to reach an agreement on the article’s Talk page, not by arguing who is correct, but by arguing which side’s position better accords with specific Wikipedia policies. If they can’t agree, they can summon an uninvolved editor to weigh in, or file a “request for comment” and open the issue to wider debate for 30 days.If this fails and editors begin to quarrel, they might get called before the Arbitration Committee, but this elected panel of editors will also not decide who is right. Instead, they will examine the reams of material generated by the debate and rule only on who has violated Wikipedia process. They might ban an editor for 30 days for conspiring off-Wiki to sway debate, or forbid another editor from working on articles about Pacific islands over repeated ad hominem attacks, or in extreme cases ban someone for life. Everyone else can go back to debating, following the process this time.As a result, explosive political controversies and ethnic conflicts are reduced to questions of formatting consistency. But because process decides all, process itself can be a source of intense strife. The topics of “gun control” and “the Balkans” are officially designated as “contentious” due to recurring edit wars, where people keep reverting each other’s edits without attempting to build consensus; so, too, are the Wikipedia manual of style and the question of what information belongs in sidebars. In one infamous battle, debate over whether to capitalize “into” in the film title Star Trek Into Darkness raged for more than 40,000 words.Because disputes on Wikipedia are won or lost based on who has better followed Wikipedia process, every dispute becomes an opportunity to reiterate the project’s rules and principlesIn 2009, law professors David A. Hoffman and Salil K. Mehra published a paper analyzing conflicts like these on Wikipedia and noted something unusual. Wikipedia’s dispute resolution system does not actually resolve disputes. In fact, it seems to facilitate them continuing forever.These disputes may be crucial to Wikipedia’s success, the researchers wrote. Online communities are in perpetual danger of dissolving into anarchy. But because disputes on Wikipedia are won or lost based on who has better followed Wikipedia process, every dispute becomes an opportunity to reiterate the project’s rules and principles.Trolls who repeatedly refuse to follow the process eventually get banned, but initial infractions are often met with explanations of how Wikipedia works. Several of the editors I spoke with began as vandals only to be won over by someone explaining to them how they could contribute productively. Editors will often restrict who can work on controversial topics to people who have logged a certain number of edits, ensuring that only those bought into the ethos of the project can participate.In 2016, researchers published a study of 10 years of Wikipedia edits about US politics. They found that articles became more neutral over time — and so, too, did the editors themselves. When editors arrived, they often proposed extreme edits, received pushback, and either left the project or made increasingly moderate contributions.This is obviously not the reigning dynamic of the rest of the internet. The social platforms where culture and politics increasingly play out are governed by algorithms that have the opposite effect of Wikipedia’s bureaucracy in nearly every respect. Optimized to capture attention, they boost the novel, extreme, and sensational rather than subjecting them to increased scrutiny, and by sending content to users most likely to engage with it, they sort people into clusters of mutual agreement. This phenomenon has many names. Filter bubbles, epistemological fragmentation, bespoke realities, the sense that everyone has lost their minds. On Wikipedia, it’s called a “point of view split,” and editors banned it early. You are simply not allowed to make a new article on the same topic. Instead, you must make the case for a given perspective’s place amid all the others while staying, literally, on the same page.In February, the conservative organization Media Research Center released a report claiming that “Wikipedia Effectively Blacklists ALL Right-Leaning Media.” It was essentially a summary of a publicly available policy page on Wikipedia that lists discussions about the reliability of sources and color codes them according to the latest consensus — green for generally reliable, yellow for lack of clear consensus, and red for generally unreliable. ProPublica is green because it has an “excellent reputation for fact-checking and accuracy, is widely cited by reliable sources, and has received multiple Pulitzer Prizes.” Newsweek is yellow after a decline in editorial standards following its 2013 acquisition and recent use of AI to write articles. Newsmax, the One America News Network, and several other popular right-leaning sources are red due to repeatedly publishing stories that were proven wrong. (As are some left-leaning sources, like Occupy Democrats.) The New York Post (generally unreliable, but marginally reliable on entertainment) used the report as the basis for an editorial titled “Big Tech must block Wikipedia until it stops censoring and pushing disinformation.”The page is called Reliable sources/Perennial sources, as in sources that are perennially discussed. Editors made the page in 2018 as a repository for past discussions that they could refer to instead of having to repeatedly debate the reliability of the Daily Mail — the first publication to be deprecated, the year before — every time someone tried to cite it. It is not a list of preapproved or banned sources, the page reads. Context matters, and consensus can change.But to Wikipedia’s critics, the page has become a symbol of the encyclopedia’s biases. Sanger, the briefly tenured cofounder, has found a receptive audience in right-wing activist Christopher Rufo and other conservatives by claiming Wikipedia has strayed from its neutrality principle by making judgments about the reliability of sources. Instead, he argues, it should present all views equally, including things “many Republicans believe,” like the existence of widespread fraud in the 2020 election and the FBI playing a role in the January 6th Capitol attack.Last spring, the reliable source page collided with one of the most intense political flashpoints on Wikipedia, the Israel-Palestine conflict. In April, an editor asked whether it was time to reevaluate the reliability of the Anti-Defamation League in light of changes to the way it categorizes antisemitic incidents to include protests of Israel, among other recent controversies. About 120 editors debated the topic for two months, producing text equal to 1.9 The Old Man and the Seas, or “tomats,” a standard unit of Wikipedia discourse. The consensus was that the ADL was reliable on antisemitism generally but not when the Israel-Palestine conflict was involved.Unusually for a Wikipedia administrative process, the decision received enormous attention. The Times of Israel called it a “staggering blow” for the ADL, which mustered Jewish groups to petition the foundation to overrule the editors. The foundation responded with a fairly technical explanation of how Wikipedia’s self-governing reliability determinations work.In the year since, conservative and pro-Israel organizations have published a series of reports examining the edit histories of articles to make a case that Wikipedia is biased against Israel. In March, the ADL itself issued one such report, called “Editing for Hate,” claiming that a group of 30 “malicious editors” slanted articles to be critical of Israel and favorable to Palestine. As evidence, the report highlights examples like the removal of the phrase “Palestinian terrorism” from the introduction of the article on Palestinian political violence.Yet the edit histories show that these examples are often plucked from long editing exchanges, the outcome of which goes unmentioned. The “terrorism” line that the ADL cited was indeed removed — it had also only just been added, was added back shortly after being cut, then was removed again, added back, and revised repeatedly before editors brokered a compromise on the talk page.Breitbart, Pirate Wires, and other right-leaning publications now regularly mine Wikipedia’s lengthy debates for headlines like “How Wikipedia Launders Regime Propaganda,” accusing the site of being a mouthpiece for the Democratic Party, or “Cover Up: Wikipedia Editors Propose Deleting Page on Iran Advocating for Israel’s Destruction,” despite the article having just been created and the outcome being to merge the contents into the article on Iran-Israel relations. These reports are a dependable source of viral outrage on X. The strategy also appears effective at convincing lawmakers. In May, Rep. Debbie Wasserman Schultz (D-FL) and 22 other members wrote to the Wikimedia Foundation citing the ADL report and demanding Wikimedia “rein in antisemitism, uphold neutrality.”The term filter bubble was coined by internet activist Eli Pariser, circa 2010.Alice O’Connor, better known by her pen name Ayn Rand, was a Russian-born American writer and philosopher. She is known for her fiction and for developing a philosophical system that she named Objectivism. Here are two black swans, but even with no black swans to possibly falsify it, “All swans are white” would still be shown falsifiable by “Here is a black swan” — it would still be a valid observation statement in the empirical language, even if empirically false.The August letter from House Republicans requesting information on attempts to influence the encyclopedia, data on editors who had been disciplined by Arbcom, and other records also cited the ADL report. While some search for bias in the minutiae of edit histories, others try to encompass all of Wikipedia. Last year, a researcher at the conservative Manhattan Institute scraped Wikipedia for mentions of political terms and public officials and used a GPT language model to analyze them for bias. The report found “a mild to moderate” tendency to associate figures on the political right with more negative sentiment than those on the left. The study, which was not peer reviewed, has become a regular fixture in claims of liberal bias on Wikipedia.The report still illustrates the challenges of evaluating the neutrality of a text as vast and stripped of subjective opinion as Wikipedia. An examination of the datasets shows that the passages GPT classified as non-neutral are often anodyne factual statements: that a lawmaker won or lost an election, represented a certain district, or died. It also conflated unrelated people of the same name, so, for example, most of the non-neutral statements about Mike Johnson concern not Mike Johnson the current Republican House Majority Speaker but a robber in a 1923 silent film, a prog-rock guitarist, multiple football players, and a famous yodeler. But the more fundamental question is whether balanced sentiment or balanced anything across the contemporary political spectrum is the correct expectation for a project that operates by a different standard, one based on measures of reliability. Supposing the sentiment readings do reflect a real imbalance, is that due to the biases of editors, biases in their sources, or some other external imbalance, like a tendency by right-leaning politicians to express negative sentiments of fear or anger (a possibility the report raises, then dismisses).Wikipedia has a long history of attempting to disentangle and correct its various biases. The site’s editor community has been overwhelmingly white, male, and based in the United States and Europe since the site began. In 2018, 90 percent of editors were men, and only 18 percent of biographies in the encyclopedia were of women. That year, the Canadian physicist Donna Strickland won a Nobel Prize, and people turning to Wikipedia to learn about her discovered she lacked an article.Women have been historically excluded from the sciences, underrepresented in coverage of the sciences, and therefore underrepresented in the sources Wikipedia editors can citeBut the causal connection between these facts was not straightforward. Women have been historically excluded from the sciences, underrepresented in coverage of the sciences, and therefore underrepresented in the sources Wikipedia editors can cite. An editor had tried to make an article on Strickland several months before the Nobel but was overruled due to a lack of coverage in reliable sources. “Wikipedia is a mirror of the world’s biases, not the source of them. We can’t write articles about what you don’t cover,” tweeted then-executive director Katherine Maher.Wikipedia’s sourcing guidelines are conservative in their deference to traditional institutions of knowledge production, like established newsrooms and academic peer review, and this means that it is sometimes late to ideas in the process of moving from fringe to mainstream. The possibility that covid-19 emerged from a lab was relegated to a section on conspiracy theories and is only now, after reporting by reliable sources, gaining a toehold on the covid pandemic article. Similarly, as awareness grew of the ways Western academic and journalistic institutions have excluded the perspectives of colonized people, critics argued that Wikipedia’s reliance on these same institutions made it impossible for the encyclopedia to be truly comprehensive.Not all the bias comes from the project’s sources, though. A study that attempted to control for offline inequalities by examining only contemporary sociologists of similar achievement found that male academics were still more likely to have articles. As volunteers, editors work on topics they think are important, and the encyclopedia’s emphases and omissions reflect their demographics. Minor skirmishes in World War II and every episode of The Simpsons have an article, some of which are longer than the articles on the Ethiopian civil war or climate change in the Maldives. In an effort to fill in these gaps, the foundation has for several years funded editor recruitment and training initiatives under the banner of “knowledge equity.”“Most editors on Wikipedia are English-speaking men, and our coverage is of things that are of interest to English-speaking men,” said a retired market analyst in Cincinnati who has been editing for over 20 years. “Our sports coverage is second to none. Video games, we got it covered. Wars, the history of warfare, my god. Trains, radio stations... But our coverage of foods from other countries is very low, and there is an absolute systemic bias against coverage of women and people of color.” For her part, she tries to fill gaps around food, creating new articles whenever she encounters a Peruvian chili sauce or African fufu that lacks one.Yet these initiatives have come under attack as “DEI” by conservative influencers and Musk, who called for Wikipedia to be defunded until “they restore balance.”If you think something is wrong on Wikipedia, you can fix it yourselfThese accusations of bias, familiar from attacks on the media and social platforms, encounter some unique challenges when leveled against Wikipedia. Crucially, if you think something is wrong on Wikipedia, you can fix it yourself, though it will require making a case based on verifiability rather than ideological “balance.”Over the years, Wikipedia has developed an immune response to outside grievances. When people on X start complaining about Wikipedia’s suppression of UFO sightings or refusal to change the name of the Gulf of Mexico to Gulf of America, an editor often restricts the page to people who are logged in and puts up a notice directing newcomers to read the latest debate. If anything important was missed, they are welcome to suggest it, the notice reads, provided their suggestion meets Wikipedia’s rules, which can be read about on the following pages. That is, Wikipedia’s first and best line of defense is to explain how Wikipedia works. Occasionally, people stick around and learn to edit. More often, they get bored and leave.It was not unusual for skirmishes to break out over the Wikipedia page for Asian News International, or ANI. It is the largest newswire service in India, and as its Wikipedia article explains, it has a history of promoting false anti-Muslim and pro-government propaganda. It was these facts that various anonymous editors — not logged into Wikipedia accounts, so appearing only as IP addresses — attempted to remove last spring. As typically happens, an experienced editor quickly reinstated the deleted sentences, noting that they had been removed without explanation. Then came another drive-by edit: actually, ANI is not propaganda and very credible, someone wrote, citing a YouTube video. Reverted: YouTube commentary is not a reliable source. Then another IP address, deleting a sentence about ANI promoting a false viral story about necrophilia in Pakistan. Reverted again. Another IP address, deleting the mention of propaganda with the explanation that the sources were “leftist dogs and swine.”As the edit battle escalated, an editor locked the page so that only people who were logged in and had made a certain number of edits could make changes, ending the barrage of IP addresses.Two months later, ANI sued. The lawsuit revealed that several of the IP addresses had belonged to representatives of ANI attempting to remove unflattering information about the company. Blocked from doing so, ANI sued for defamation under a recent amendment to India’s equivalent of Section 230 that places stricter requirements on platforms to moderate content. When the Wikimedia Foundation declined to reveal the identities of three editors who had defended the page, the presiding judge said he would ask the government to block the site, threatening to cut off the country with the highest number of English Wikipedia readers after the US and the UK. “If you don’t like India,” the judge said, “please don’t work in India.”During the appeal, Wikimedia’s lawyer argued that disclosing the identities of editors would destroy the encyclopedia’s self-regulating system and expose contributors to reprisals. Also, he noted, the sentences in question, like every assertion on Wikipedia, were only summarizing other sources, and those sources — the publications The Caravan and The Ken — had not been sued for defamation. (As with editors, the foundation’s first response to external threats is often to explain how Wikipedia works.) The judge dismissed the argument, saying that journalism might be “read by a hundred people, you don’t bother about it… it does not have the gravitas.” Wikipedia, however, is read by millions.By this point the case had garnered enough coverage to warrant its own Wikipedia page. This seemed to enrage the judge, particularly the line noting that the judge’s demand to reveal the identities of editors had been described as “censorship and a threat to the flow of information.” This “borders on contempt,” the judge said, demanding that the foundation take the page down within 36 hours. In a rare move, the foundation complied.The case alarmed editors around the world. An open letter calling on the Wikimedia Foundation to protect the anonymity of the editors garnered more than 1,300 signatures, the most of any letter directed at the foundation. Nevertheless, last December, the foundation disclosed the editors’ identities to the judge under seal. Responding to outrage on Wikipedia’s editor forum, Wales asked for calm and urged people not to jump to conclusions.The Wikimedia Foundation has historically taken a hard line against attempts to influence the project. In 2017, when the Turkish government demanded several articles be deleted, Wikipedia refused and was blocked for nearly three years as it fought to the country’s Constitutional Court and won. For the second half of 2024, the most recent data available, the foundation complied with about 8 percent of requests for user data, compared to Google’s 82 percent and Meta’s 77 percent. And the data provided was sparse, because Wikipedia retains almost none.Instead of brute censorship, what has emerged is a sort of gray-zone information warfareBut attempts to influence the site have grown more sophisticated. The change is likely due to multiple factors: a global rise of political movements that wish to control independent media, the increased centrality of Wikipedia, and a technical change to the website itself. In 2015, Wikipedia switched to the encrypted HTTPS extension by default, making it impossible to see what pages users visited, only that they were visiting the Wikipedia domain. This meant that governments that had previously been censoring specific articles on opposition figures or historic protests had to choose between blocking all of Wikipedia or none of it. Almost every country save China (and Russia, for several hours) chose to not to block it. This was a victory for open knowledge, but it also meant governments had a greater interest in controlling what was written in the encyclopedia.Instead of brute censorship, what has emerged is a sort of gray-zone information warfare. After mainland China quashed protests against the Hong Kong national security law in 2019, a battle began over how the protests would be remembered. Editors in mainland China — which can edit using VPNs — argued for the inclusion of state-friendly media that described the protests as “riots” or “terrorist attacks” while removing citations to independent media for unreliability and bias. In one case, an editor attempted to strip all citations to one of Hong Kong’s premier papers, Apple Daily, hours before it was shut down by the government. By conspiring offline and using fake accounts, they won elections to admin positions and with them the power to see other editors’ IP addresses, which they discussed using to reveal their opponents’ identities to the police. Shortly afterward, the Wikimedia Foundation banned or restricted more than a dozen editors operating from mainland China, saying that the project had been “infiltrated” and that “some users have been physically harmed as a result.”Russia employed similar tactics after its invasion of Ukraine in 2022. State media and government officials attacked Wikipedia in the press with accusations of anti-Russian bias, promulgation of fake news, and foreign manipulation. The site remained accessible, but Russian search engines put a banner above it saying it was in violation of the law. Meanwhile, the government harassed the foundation with a series of fines for publishing “false” information about the military, which the foundation has refused to pay. Finally, on the encyclopedia, state-aligned editors pushed the government’s view while vigilantes doxxed and threatened their opposition. Last year, the head of Wikimedia Russia was declared a “foreign agent” and forced to resign from his job as a professor at Moscow State University.In neighboring Belarus, editor Mark Bernstein was doxxed by a pro-Russian group in 2022, arrested, and sentenced to three years of home confinement. As many as five other editors have been detained by Belarusian authorities in recent months, according to media reports and editors.As these battles continued, the Russian government supported the creation of a more compliant alternative, called Ruwiki, which launched early last year with the copying of 1.9 million articles from the originals, edited to reflect the government view. On Ruwiki, edits must comply with Russian laws and are subject to approval from outside experts. There, the map of Ukraine does not include Donetsk or Kherson, the war is a “special operation” in response to NATO aggression, and accounts of torture in Bucha are fake news.The first large-scale anti-Zionist demonstrations in Palestine, March 1920, during the Occupied Enemy Territory Administration. The crowd of Muslim and Christian Palestinians are shown outside Damascus Gate, Old City of Jerusalem.Palestinian political violence refers to acts of violence or terrorism committed by Palestinians with the intent to accomplish political goals in the context of the Israeli–Palestinian conflict.On January 6th, 2021, the United States Capitol in Washington, DC, was attacked by a mob of supporters of President Donald Trump in an attempted self-coup, two months after his defeat in the 2020 presidential election. Pareidolia is the tendency for perception to impose a meaningful interpretation on a nebulous stimulus, usually visual, so that one detects an object, pattern, or meaning where there is none.The Old Man and the Sea is a 1952 novella by the American author Ernest Hemingway. Wikipedia remains online in Russia, but with Ruwiki, the government may now feel emboldened to block it. In May, at a hearing on media safety for children, the head of the Russian Duma Committee on the Protection of the Family said that the encyclopedia’s “interpretation of our historical events feels so hostile that we need to raise the issue of blocking this information resource,” and that the encyclopedia’s depiction of history is opposed to Russian “traditional, spiritual values.”The goal of these campaigns is what the Wikimedia Foundation calls “project capture.” The term originates in an independent report the foundation commissioned in response to the takeover of the Croatian-language Wikipedia by a cabal of far-right editors.In 2010, a group of editors won election to admin positions and began citing far-right alternative media to rewrite history. On Croatian Wikipedia, the Nazis invaded Poland to stop a genocide against the German people, Croatia’s role in the Holocaust is foreign propaganda, and Ratko Mladić was a decorated military leader whose conviction by the UN for genocide (briefly noted quite far down) was the result of an international conspiracy. When other editors attempted to correct the articles, the admins banned them for violating rules against hate speech or harassment.The encyclopedia became so warped that it began receiving press coverage. The Croatian Minister of Education warned students not to use it. In an interview with a Croatian paper, Wales confirmed the foundation was aware of the problem and looking into it. Yet the foundation has a policy of allowing Wikipedia projects to self-govern, and interfering with Croatian Wikipedia risked opening a door to the many governments and companies that want things on Wikipedia changed.Editors mounted a resistance and attempted to vote the admins out, but the admins defeated the attempt using votes from what were later revealed to be dozens of fake accounts. But because the admins were the only ones with the technical ability to trace IP addresses, the opposition had no way to prove this. The cabal now controlled all the levers of power. By 2019, nearly all of the editors who opposed them had been banned or harassed off the project.In 2020, one of the few remaining dissident editors compiled a comprehensive textual and statistical analysis of editing patterns of dozens of accounts and filed a request for an admin to run IP traces to see if they were sock puppets. The admin stalled, then attempted to fudge the traces, but did so in such a transparent way that it was clear the accounts were indeed fakes.This was the evidence required to procedurally break the cabal. High-ranking admins called “stewards” from other-language Wikipedias administered a new vote on banning the Croatian admins. This time, the admins lost. Their ringleader, username Kubura, was banned from all Wikipedia projects forever, a punishment that had been leveled against less than a dozen others in Wikipedia history. A local daily covered the incident with the headline “Kubura’s Downfall: Banned Globally, His Followers Retreat, Leaderless.”Wikipedia’s processes are only effective if they are administered by people who believe in the spirit of the projectThe foundation’s postmortem analysis compared the takeover to “state capture, one of the most pressing issues of today’s worldwide democratic backsliding.” The clique still cited the reliability of sources and invoked rules of debate, but it bent these processes to serve their nationalist purpose. As many governments have discovered, it is extremely difficult to insert propaganda into Wikipedia without running afoul of some rule or another. But what the Croatia capture showed is that Wikipedia’s processes are only effective if they are administered by people who believe in the spirit of the project. If they can be silenced or replaced, it becomes possible to steer the encyclopedia in a different direction. Donna Theo Strickland (born May 27th, 1959) is a Canadian optical physicist and pioneer in the field of pulsed lasers. A telescope in the Very Large Telescope system producing four orange laser guide stars.Oral tradition, or oral lore, is a form of human communication in which knowledge, art, ideas, and culture are received, preserved, and transmitted orally from one generation to another.One editor I spoke with, who asked to remain anonymous for reasons that will be obvious, had been editing Wikipedia for several years while living in a Middle Eastern country where much other media is tightly controlled. One day he received a call from a member of the intelligence service inviting him to lunch. He cried for hours — everyone knew what this meant. The meeting was cordial but clear. They didn’t want him to stop editing Wikipedia. They wanted his help. They knew the encyclopedia has rules and you can’t just insert flagrant propaganda, but as a respected member of the community, maybe he could edit in ways that were a little friendlier to the government, maybe decide in its favor when certain topics came up for debate. In exchange, maybe the service could help him if he ever got in trouble with the police, for example, over his sexuality; he was gay in a country where that was illegal. He fled the country weeks later. He now edits from abroad, but he knows of five to 10 others who have faced arrest or intimidation over their editing. They must do constant battle with editors he believes to be government agents who push the state’s perspective, debating tirelessly for hours because it is literally their job. It’s a rare person who is able to uproot their life in the service of a volunteer side project. Understandably, many others faced with such threats become more cautious in their editing or stop altogether. Multiple editors based in India said that they now avoid editing topics related to their country. The ANI case had a chilling effect, as have recurring harassment campaigns. The far-right online publication OpIndia regularly accuses Wikipedia of “anti-Hindu and anti-India bias,” in ways that parallel attacks from the US right, down to citations of Manhattan Institute research and quotes from the disgruntled cofounder, Sanger. The organization has published the real names and employers of editors it accuses of being “leftists” or “Islamists,” leading at least one veteran editor to delete their account.Even ancient history can be cause for reprisals. In February, after the release of a Bollywood action film about Chhatrapati Sambhaji Maharaj, a 17th-century king who fought the Mughals, accounts on X began whipping up outrage over several facts on Sambhaji’s Wikipedia page that they deemed to be anti-Hindu. When editors reversed attempts to delete the offending lines, another X user posted their usernames and called on government officials to investigate them. Days later, local press reported that the Maharashtra cyber police opened cases against at least four editors.“If you issue cases and file complaints against editors, they tend not to edit those pages anymore”“Various editors have left Wikipedia over this persecution, fearing their own safety,” said an Indian Wikipedia editor who asked to remain anonymous out of fear of retaliation. “I believe this is completely useful for the right wing, if you issue cases and file complaints against editors, they tend not to edit those pages anymore, fearing for their safety in real life.”He still edits, but mostly sticks to the safer ground of the Roman Empire.In April, the Trump administration’s interim US attorney for DC, Edward Martin Jr., sent a letter to the Wikimedia Foundation accusing the organization of disseminating “propaganda” and intimating that it had violated its duties as a tax-exempt nonprofit.From a legal perspective, it was an odd document. The tax status of nonprofits is not generally the jurisdiction of the US attorney for DC, and many of the supposed violations, like having foreign nationals on its board or permitting “the rewriting of key, historical events and biographical information of current and previous American leaders,” are not against the law. Sanger is quoted, criticizing editor anonymity. In several cases, the rules Martin accuses Wikipedia of violating are Wikipedia’s own, like a commitment to neutrality. But the implied threat was clear.“We’ve been anticipating something like this letter happening for some time,” a longtime editor, Lane Rasberry, said. It fits the pattern seen in India and elsewhere. He has been hearing more reports of threats against editors who work on pages related to trans issues and has been conducting security trainings to prevent their identities being revealed. Several US-based editors told me they now avoid politically contentious topics out of fear that they could be doxxed and face professional or legal retaliation. “There are more Wikipedia editors getting threats, more people getting scared,” Rasberry said.The “little green men” were Russian soldiers who were masked and wore unmarked uniforms upon the outbreak of the Russo–Ukrainian War in 2014.The 2019–2020 Hong Kong protests (also known by other names) were a series of demonstrations against the Hong Kong government’s introduction of a bill to amend the Fugitive Offenders Ordinance in regard to extradition. May 2015 satellite image of the Crimean Peninsula.The owl of Athena, a symbol of knowledge in the Western world.Sambhaji, also known as Shambhuraje, ruled from 1681 to 1689 as the second king (Chhatrapati) of the Maratha Empire, a prominent state in early modern India.Stanislav Alexandrovich Kozlovsky is a Russian scientist-psychologist and specialist in the field of cognitive neuroscience of memory and perception.Talking to editors, I encountered a confounding spread of opinions about the seriousness of the threat to Wikipedia, often in the same conversation. The site has sloughed off more than two decades of attacks, and so far the latest round is no different. The Heritage Foundation plan to dox editors has yet to materialize. Musk’s calls for his followers to stop donating have resulted in surges in donations, according to publicly available data.In India, the High Court struck down the order to take down the article about ANI’s defamation case, though the case itself is ongoing. Wikipedia’s critics on the right and in the Silicon Valley elite often propose generative AI as the solution to Wikipedia’s perceived biases, for each user a bespoke source of ideologically agreeable information. Yet all these projects remain wholly reliant on Wikipedia, and so far the most aggressive such initiative, Musk’s Grok, has spent much of its existence flailing between fact-checking Musk’s own conspiracy theories and proclaiming itself MechaHitler.But new threats continue to appear. In August, the foundation lost its case arguing for an exemption from the UK’s Online Safety Act, which would force Wikipedia to verify the identities of its editors, though it is continuing to appeal. In Portugal the foundation received a court order arising from a defamation case brought by Portuguese American businessman Cesar DePaço, who objected to information on his page about past criminal allegations and links to the far-right Portuguese party Chega. Complying with the ruling, the foundation struck several facts from his biography and disclosed “a small amount of user data” about eight editors. The foundation is now bringing the case before the European Court of Human Rights. And in the US, there is the recent House Oversight letter.No matter the outcome, these cases contribute to a general increase in pressure on the project’s already strained editors. English Wikipedia has fewer than 40,000 active editors, defined as users who have made five or more edits in the last month. The number of active administrators, crucial to maintaining the site and enforcing policy, peaked in 2008 and now stands at around 450. AI threatens to squeeze the editor pipeline further. The more people who get information from AI summaries of Wikipedia rather than the site itself, the fewer people who will wander down a rabbit hole, encounter an error that needs correcting, and become editors themselves. “Wikipedia should not be taken for granted.”At the same time, people are using AI to add plausible-looking but false or biased information to the encyclopedia, increasing the workload for editors. Harassment, ideological editing campaigns, government investigations, targeted lawsuits — even if they lead nowhere, they will make the prospect of editing more daunting and increase the odds that current editors burn out. “Wikipedia should not be taken for granted,” Rasberry said. “This is an existential threat.” The first reactions to the Martin letter on the Wikipedia editor forums were radical: the foundation should leave the US, maybe for France, or Iceland, or Germany. This would not be unprecedented, an editor pointed out. The Encyclopédistes fled to Switzerland when the ancien régime attempted to censor them. Maybe the site should go dark in protest. But moderation soon prevailed. “The community needs to chill on the blackout talk,” wrote an editor by the name of Tazerdadog. “We’re not there yet.” Right now, the best response to these threats is to double down on Wikipedia’s policies, particularly the refusal to be censored and its dedication to neutral point of view, they wrote. “I 100% agree with you, Tazerdadog,” replied “Jimbo Wales.” “Emphasizing to the WMF that NPOV is non-negotiable is not really the issue.” In fact, Wales wrote, he is chairing a working group on strengthening the policy. The initiative was announced in March, framed as a response to the global rise in threats to sources of neutral information, and to a fragmentation of the public’s understanding of the very concepts of neutrality and facts. Wikipedia’s response, it seemed, would be to neutral harder. In May, I met Wales for coffee at a members club in Chelsea where he had been granted an honorary membership after giving a talk. (Wikipedia, as journalists have noted for years, did not make Wales a tech billionaire.) Extravagant bouquets of pastel flowers were arranged in an arch above the doorway and festooned the tables of the interior. Wales, dressed to meet his wife at the Chelsea Flower Show, matched the decor in a green linen suit and floral shirt. He does not, he said, normally dress like a leprechaun. He was not particularly concerned about the attacks on Wikipedia, he said, though he warned that he is “pathologically optimistic.” Wikipedia has been attacked since it began. It fought Turkey’s ban to the Constitutional Court and won. Even Russian Wikipedia has proven resilient. In the US, the government lacks much of the leverage it has deployed against other institutions. Wikipedia doesn’t rely on government funding, and protections for online speech are strong. In the last fiscal year, the foundation took in $170 million in donations, with an average size of about $10.As for the accusations of bias, why not investigate? Whether the attacks are in good faith or bad, it doesn’t really matter, Wales said. The foundation had already decided that it was a good time, given the fragmented and polarizing world, to examine and bolster Wikipedia’s neutrality processes. Wales, leaning over the coffee table, seemed excited at the prospect. “If somebody turns up on a talk page and says, ‘Hey, this article is a mess, it’s wrong. It’s really biased,’ the right answer is to not scream at them and run and hide. The right answer is go, ‘Oh, tell me more. Let’s dig in. Where is it biased? How do we think about how do we fix that?’”Let’s figure out the best methodologies for studying neutrality, Wales said. Let’s look at how editors evaluate the reliability of sources. Maybe Wikipedia does use the label “far-right” more than “far-left,” Wales said, a criticism that has been leveled at the site. Is that because the media uses the term more, and does Wikipedia use the term more or less than the media does, and does the media use the term more because there are more far-right movements in the world today? “You have to chew on these things. There’s no simple answers.”But there are answers. If the social platforms and language models that increasingly shape our understanding of the world are inscrutable black boxes, Wikipedia is the opposite, maybe the most legible, endlessly explainable information management system ever made. For any sentence, there is a source, and a reason that that source was used, and a reason for that reason. “Let’s dig in,” Wales repeated. “Let’s assess the evidence. Let’s talk to a lot of different people. Let’s really try and understand.” Come, be part of the process. His working group is starting to discuss the best approach. The meetings, Wales acknowledged, have been very tedious so far.As for the letter from the interim DC attorney, Trump withdrew Martin’s nomination in May, though he still has a position leading the Justice Department’s retribution-oriented “task force on weaponization.” In any case, the Wikimedia Foundation responded promptly. “The foundation staff spent a lot of passion writing it,” Wales said of the reply. “Then they ran it by me for review, and I was ready to jump in, but I was like, actually, it’s perfect.” “It’s very calm,” Wales said. “Here are the answers to your questions, here is what we do.” It explains how Wikipedia works.An edit-a-thon is an event where some editors of online communities such as Wikipedia, OpenStreetMap (also known as a “mapathon”), and LocalWiki edit and improve a specific topic or type of content. The Quaker business method or Quaker decision-making is a form of group decision-making and discernment, as well as of direct democracy, used by Quakers, or members of the Religious Society of Friends, to organise their religious affairs. Wikipedia’s goal is to create a well-written, reliable encyclopedia like the Encyclopædia Britannica, except Wikipedia is much, much bigger: Britannica has about 120,000 articles, while the English Wikipedia has over 7 million articles.The Wikipedia globe.The Wikipedia Monument, located in Słubice, Poland, is a statue designed by Armenian sculptor Mihran Hakobyan honoring Wikipedia contributors.Socrates was known to steadfastly assume others around him were acting in good faith.Jimmy Donal Wales (born August 7th, 1966), also known as Jimbo Wales, is an American internet entrepreneur and former financial trader. CreditsEditor: Kevin NguyenCreative director: Kristen RadtkeArt director/designer: Cath ViginiaDeveloper: Graham MacAreeCopyeditor: Kallie PlaggeFactchecker: Tiên NguyễnEngagement editors: Esther Cohen & Tristan CooperManaging editor: Kara VerlaneyEditor-in-chief: Nilay PatelPublisher: Helen HavlakPhotos by A. Ghizzi Panizza, Anton Holoborodko, Arkady Zakharov, Barbara Niggl Radloff, Bengt Nyman, C-SPAN, Clister V. Pangantihon, Daniele Venturelli, David Gadd, Edward Kimmel, Eric Chan, Eric Gaba,German Federal Archive, Getty Images, Gnom, Hadi Mohammad, Hendrik Freitag, Iva Njunjić, Jan Ainali, Knight Foundation, Larry Sanger, Marie-Lan Nguyen, Mario Tama, NASA, Nina Aldin Thune, Nostrix, PBS News Hour, Rodhullandemu, Sannse, SiGarb, Studio Incendo, Tyler Merbler, Zack McCune]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Farewell to Meshnet]]></title>
            <link>https://nordvpn.com/blog/meshnet-shutdown/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45128299</guid>
        </item>
        <item>
            <title><![CDATA[WiFi signals can measure heart rate]]></title>
            <link>https://news.ucsc.edu/2025/09/pulse-fi-wifi-heart-rate/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45127983</guid>
            <description><![CDATA[Engineers prove their technique is effective even with the lowest-cost WiFi devices]]></description>
            <content:encoded><![CDATA[











Key takeaways




The Pulse-Fi system is highly accurate, achieving clinical-level heart rate monitoring with ultra low-cost WiFi devices, making it useful for low resource settings. 



The system works with the person in a variety of different positions and from up to 10 feet away.





Heart rate is one of the most basic and important indicators of health, providing a snapshot into a person’s physical activity, stress and anxiety, hydration level, and more.



Traditionally, measuring heart rate requires some sort of wearable device, whether that be a smart watch or hospital-grade machinery. But new research from engineers at the University of California, Santa Cruz, shows how the signal from a household WiFi device can be used for this crucial health monitoring with state-of-the-art accuracy—without the need for a wearable.



Their proof of concept work demonstrates that one day, anyone could take advantage of this non-intrusive WiFi-based health monitoring technology in their homes. The team proved their technique works with low-cost WiFi devices, demonstrating its usefulness for low resource settings.



A study demonstrating the technology, which the researchers have coined “Pulse-Fi,” was published in the proceedings of the 2025 IEEE International Conference on Distributed Computing in Smart Systems and the Internet of Things (DCOSS-IoT).



Measuring with WiFi



Professor of Computer Science and Engineering Katia Obraczka and Ph.D. student Nayan Bhatia in the lab.



A team of researchers at UC Santa Cruz’s Baskin School of Engineering that included Professor of Computer Science and Engineering Katia Obraczka, Ph.D. student Nayan Bhatia, and high school student and visiting researcher Pranay Kocheta designed a system for accurately measuring heart rate that combines low-cost WiFi devices with a machine learning algorithm.



WiFi devices push out radio frequency waves into physical space around them and toward a receiving device, typically a computer or phone. As the waves pass through objects in space, some of the wave is absorbed into those objects, causing mathematically detectable changes in the wave.



Pulse-Fi uses a WiFi transmitter and receiver, which runs Pulse-Fi’s signal processing and machine learning algorithm. They trained the algorithm to distinguish even the faintest variations in signal caused by a human heart beat by filtering out all other changes to the signal in the environment or caused by activity like movement.



“The signal is very sensitive to the environment, so we have to select the right filters to remove all the unnecessary noise,” Bhatia said.




High school student Pranay Kocheta joined the Pulse-Fi project as a researcher through UC Santa Cruz’s Science Internship Program.




 Dynamic results



The team ran experiments with 118 participants and found that after only five seconds of signal processing, they could measure heart rate with clinical-level accuracy. At five seconds of monitoring, they saw only half a beat-per-minute of error, with longer periods of monitoring time increasing the accuracy.



The team found that the Pulse-Fi system worked regardless of the position of the equipment in the room or the person whose heart rate was being measured—no matter if they were sitting, standing, lying down, or walking, the system still performed. For each of the 118 participants, they tested 17 different body positions with accurate results



These results were found using ultra-low-cost ESP32 chips, which retail between $5 and $10 and Raspberry Pi chips, which cost closer to $30. Results from the Raspberry Pi experiments show even better performance. More expensive WiFi devices like those found in commercial routers would likely further improve the accuracy of their system.



They also found that their system had accurate performance with a person three meters, or nearly 10 feet, away from the hardware. Further testing beyond what is published in the current study shows promising results for longer distances.



“What we found was that because of the machine learning model, that distance apart basically had no effect on performance, which was a very big struggle for past models,” Kocheta said. “The other thing was position—all the different things you encounter in day to day life, we wanted to make sure we were robust to however a person is living.”



Creating the dataset




The researchers proved their heart rate monitoring technique works with ultra-low-cost, WiFi-emitting ESP32 chips, which retail between $5 and $10.




To make their heart rate detection system work, the researchers needed to train their machine learning algorithm to distinguish the faint detections in WiFi signals caused by a human heartbeat. They found that there was no existing data for these patterns using an ESP32 device, so they set out to create their own dataset.



In the UC Santa Cruz Science and Engineering library, they set up their ESP32 system along with a standard oximeter to gather “ground truth” data. By combining the data from the Pulse-Fi setup with the ground truth data, they could teach a neural network which changes in signals corresponded with heart rate.



In addition to the ESP32 dataset they collected, they also tested Pulse-Fi using a dataset produced by a team of researchers in Brazil using a Raspberry Pi device, which created the most extensive existing dataset on WiFi for heart monitoring, as far as the researchers are aware.



Beyond heart rate



Now, the researchers are working on further research to extend their technique to detect breathing rate in addition to heart rate, which can be useful for the detection of conditions like sleep apnea. Unpublished results show high promise for accurate breathing rate and apnea detection.



Those interested in commercial use of this technology can contact Assistant Director of Innovation Transfer Marc Oettinger: marc.oettinger@ucsc.edu.










]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Almost anything you give sustained attention to will begin to loop on itself]]></title>
            <link>https://www.henrikkarlsson.xyz/p/attention</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45126503</guid>
            <description><![CDATA[When people talk about the value of paying attention and slowing down, they often make it sound prudish and monk-like. But we shouldn’t forget how interesting and overpoweringly pleasurable sustained attention can be.]]></description>
            <content:encoded><![CDATA[Brioches and Knife, Eliot Hodgkin, 08/1961When people talk about the value of paying attention and slowing down, they often make it sound prudish and monk-like. Attention is something we “have to protect.” And we have to “pay”1 attention—like a tribute.But we shouldn’t forget how interesting and overpoweringly pleasurable sustained attention can be. Slowing down makes reality vivid, strange, and hot.Let me start with the most obvious example.As anyone who has had good sex knows, sustained attention and delayed satisfaction are a big part of it. When you resist the urge to go ahead and get what you want and instead stay in the moment, you open up a space for seduction and fantasy. Desire begins to loop on itself and intensify.I’m not sure what is going on here, but my rough understanding is that the expectation of pleasure activates the dopaminergic system in the brain. Dopamine is often portrayed as a pleasure chemical, but it isn’t really about pleasure so much as the expectation that pleasure will occur soon. So when we are being seduced and sense that something pleasurable is coming—but it keeps being delayed, and delayed skillfully—the phasic bursts of dopamine ramp up the levels higher and higher, pulling more receptors to the surface of the cells, making us more and more sensitized to the surely-soon-to-come pleasure. We become hyperattuned to the sensations in our genitals, lips, and skin.And it is not only dopamine ramping up that makes seduction warp our attentional field, infusing reality with intensity and strangeness. There are a myriad of systems that come together to shape our feeling of the present: there are glands and hormones and multiple areas of the brain involved. These are complex physical processes: hormones need to be secreted and absorbed; working memory needs to be cleared and reloaded, and so on. The reason deep attention can’t happen the moment you notice something is that these things take time.What’s more, each of these subsystems update what they are reacting to at a different rate. Your visual cortex can cohere in less than half a second. A stress hormone like cortisol, on the other hand, has a half-life of 60–90 minutes and so can take up to 6 hours to fully clear out after the onset of an acute stressor. This means that if we switch what we pay attention to more often than, say, every 30 minutes, our system will be more or less decohered—different parts will be “attending to” different aspects of reality.2 There will be “attention residue” floating around in our system—leftovers from earlier things we paid attention to (thoughts looping, feelings circling below consciousness, etc.), which crowd out the thing we have in front of us right now, making it less vivid.Inversely, the longer we are able to sustain the attention without resolving it and without losing interest, the more time the different systems of the body have to synchronize with each other, and the deeper the experience gets.Locked in on the same thing, the subsystems begin to reinforce each other: the dopamine makes us aware of our skin, and sensations on the skin ramp up dopamine release, making us even more aware of our skin. A finger touches our belly, and we start to fantasize about where that finger might be going; and so now our fantasies are locked in, too, releasing even more dopamine and making us even more aware of our skin. The more the subsystems lock in, the more intense the feedback loops get. After twenty minutes, our sense of self has evaporated, and we’re in a realm where we do, feel, and think things that would seem surreal in other contexts.Similar things happen when we are able to sustain our attention to things other than sex, too. The exact mechanics differ, I presume, but the basic pattern is that when we let our attention linger on something, our bodily systems synchronize and feed each other stimuli in an escalatory loop that restructures our attentional field.Almost anything that we are able to direct sustained attention at will begin to loop on itself and bloom.To take a dark example, if you focus on your anxiety, the anxiety can begin to loop on itself until you hyperventilate and get tunnel vision and become filled with nightmarish thoughts and feelings—a panic attack.And you do the same thing with joy. If you learn to pay sustained attention to your happiness, the pleasant sensation will loop on itself until it explodes and pulls you into a series of almost hallucinogenic states, ending in cessation, where your consciousness lets go and you disappear for a while. This takes practice. The practice is called jhanas, and it is sometimes described as the inverse of a panic attack. I have only ever entered the first jhana, once while spending an hour putting our four-year-old to sleep and meditating on how wonderful it is to lie there next to her. It was really weird and beautiful. If you want to know more about these sorts of mental states, I recommend José Luis Ricón Fernández de la Puente’s recent write-up of his experiences, Nadia Asparouhova on her experiences, and her how-to guide.Here is José, whose blog is normally detailed reflections on cell biology and longevity and metascience, describing the second evening of a jhana retreat:So I went down to the beach. “Kinda nice”, I thought. The sky had a particularly vibrant blue color, the waves had ‘the right size’, their roar was pleasant. I started to walk around trying to continue meditating. I focused my awareness on an arising sensation of open heartedness and then I noticed my eyes tearing up (“Huh? I thought”). I looked again at the ocean and then I saw it. It was fucking amazing. So much color and detail: waves within waves, the fractal structure of the foamy crests as they disintegrate back into the ocean. The feeling of the sun on my skin. I felt overwhelmed. As tears ran down my face and lowkey insane grin settled on my face I found myself mumbling “It’s... always been like this!!!!” “What the fuck??!” followed by “This is too much!! Too much!!!”. The experience seemed to be demanding from me to feel more joy and awe than I was born to feel or something like that. In that precise moment I felt what “painfully beautiful” means for the first time in my life.The fact that we can enter fundamentally different, and often exhilarating, states of mind by learning how to sustain our attention is fascinating. It makes you wonder what other states are waiting out there. What will happen if you properly pay attention to an octopus?3 What about your sense of loneliness?4 A mathematical idea?5 The weights of a neural net?6 The footnotes here take you to examples of people who have done that. There are so many things to pay attention to and experience.One of my favorite things to sustain attention toward is art.There was a period in my twenties when I didn’t get art. I thought artists were trying to say something, but I felt superior because I thought there had to be better ways of getting their ideas across (and also, better ideas). But then I realized that good art—at least the art I am spontaneously drawn to—has little to do with communication. Instead, it is about crafting patterns of information that, if you feed them sustained attention, will begin to structure your attentional field in interesting ways. Art is guided meditation. The point isn’t the words, but what happens to your mind when you attend to those words (or images, or sounds). There is nothing there to understand; it is just something to experience, like sex. But the experiences can be very deep and, sometimes, transformative.In 2019, for example, I saw a performance of Jean Sibelius’s 5th Symphony at the University Hall in Uppsala.Before the concert began, I spent a few minutes with my eyes closed, doing a body scan, to be fully present when the music began. As the horns at the opening of the piece called out, I decided to keep my eyes closed, so I wouldn’t be distracted by looking at the hands of the musicians. Then… a sort of daydream started up. The mood suggested to me the image of a cottage overlooking a sloping meadow and a thick wood of pines, a few hours from Helsinki. It was a pretty obvious image, since I knew that Sibelius wrote the piece at Aniola, which is 38 km north of Helsinki. But then I saw an old man walking up the meadow and into the house. The camera cut. Through an open door, I saw the man, alone, working at a desk. I saw it as clearly as if it had been projected on a screen before me: the camera moved slowly toward the back of the man.Through the window above his desk, I could see a light in the distance. Perhaps it was Helsinki? No, it felt alive, like a being—something alive and growing, something that was headed here. But then again, if you were to see a city from space, watching it sped up by 100,000x, it would look like a being moving through the landscape, spreading, getting closer. The old man sat there for a hundred years, watching the light. There was a sinking feeling in my body.One spring, birds fell dead from the sky. They littered the fields, whole droves of them filled the ditches—blue birds, red birds, and black. The man carried them into his woodshed and placed them in waist-high piles.The film kept going, and the emotional intensity and complexity gradually ramped up. For the thirty minutes that it took the orchestra to play the three movements of the symphony, I experienced what felt like two or three feature films, all interconnected by some strange emotional logic. In the third movement, a group of hunter-gatherers was living in a cave that reminded me of the entrance to a nuclear waste facility. A girl hiding behind a tree saw men with cars arrive…The structure of the music was such that it gave me enough predictability and enough surprise to allow my attention to deeply cohere. The melody lines and harmonies dredged up memories and images from my subconscious, weaving them into a rich cinematic web of stories. Guided by the music, my mind could tunnel into an attentional state where I was able to see things I had never seen before and where I could work through some deep emotional pain that seemed to resolve itself through the images.When the music stopped, I barely knew where I was.I opened my eyes and remembered that my brother was sitting next to me.“What did you think?” I said.“I don’t know,” he said. “I felt kind of restless.”Like always, the research for this essay was funded by the contribution of paying subscribers. Thank you! We wouldn’t have been able to do this without you. If you enjoy the essays and want to support Escaping Flatland, we are not yet fully funded:A special thanks to Johanna Karlsson, Nadia Asparouhova, Packy McCormick, and Esha Rana, who all read and commented on drafts of this essay. The image of the University Hall is by Ann-Sofi Cullhed.If you liked this essay, you might also like:Becoming perceptive·September 10, 2024This is the second part of an essay series that began with “Everything that turned out well in my life followed the same design process.” There is also a third part. It can be read on its own.1In Spanish, you “lend” attention. In Swedish, you “are” attention.2It is not like 30 minutes is some ideal. Attention can, under the right conditions, keep getting deeper and more coherent for much longer, as attested by people who meditate for weeks. Inversely, you can, if you have a well developed dorsal attention network and low cortisol level etc, cohere to a high degree in a few minutes. (Though if you have a lot of stress hormones, thirty minutes will not be nearly enough to get out of a flighty mode of attention.) In other words, I don’t think you can put a precise number at it.Time to coherence depends on your starting place (mood, hormones, chemical make up in the brain), your skill, and the level of coherence you want to pursue. There is a famous study saying it takes people 23 minutes to get to full productivity after an interruption, which seems like it is correlated to the time it takes them to deeply cohere their attentional field. On the other hand, there is also an upper limit at how long you can cohere, which also depends on a bunch of factors. If I’m working on an essay, I notice that the quality of my thinking drops after about 20 minutes of sustained attention and I need to pause for a few minutes and walk around to get back up to full focus. So in my case, my deepest thinking seem to decohere before I even reach that infamous 23 minute mark! And after 3-4 hours, the quality of my attention goes down so much that everything I write ends up being deleted the day after. For more relaxed attention, like meditation, I haven’t reached the limit for how long I can deepen my coherence—after an hour, which is the longest I’ve gone, I’m still shifting deeper into attention.3Charles Darwin:[During our stay in Porto Praya,] I was much interested, on several occasions, by watching the habits of an Octopus, or cuttle-fish. Although common in the pools of water left by the retiring tide, these animals were not easily caught. By means of their long arms and suckers, they could drag their bodies into very narrow crevices; and when thus fixed, it required great force to remove them. At other times they darted tail first, with the rapidity of an arrow, from one side of the pool to the other, at the same instant discolouring the water with a dark chestnut-brown ink. These animals also escape detection by a very extraordinary, chameleon-like power of changing their colour. They appear to vary their tints according to the nature of the ground over which they pass: when in deep water, their general shade was brownish purple, but when placed on the land, or in shallow water, this dark tint changed into one of a yellowish green.The colour, examined more carefully, was a French grey, with numerous minute spots of bright yellow: the former of these varied in intensity; the latter entirely disappeared and appeared again by turns. These changes were effected in such a manner, that clouds, varying in tint between a hyacinth red and a chestnut-brown, were continually passing over the body. Any part, being subjected to a slight shock of galvanism, became almost black: a similar effect, but in a less degree, was produced by scratching the skin with a needle. These clouds, or blushes as they may be called, are said to be produced by the alternate expansion and contraction of minute vesicles containing variously coloured fluids.This cuttle-fish displayed its chameleon-like power both during the act of swimming and whilst remaining stationary at the bottom. I was much amused by the various arts to escape detection used by one individual, which seemed fully aware that I was watching it. Remaining for a time motionless, it would then stealthily advance an inch or two, like a cat after a mouse; sometimes changing its colour: it thus proceeded, till having gained a deeper part, it darted away, leaving a dusky train of ink to hide the hole into which it had crawled.While looking for marine animals, with my head about two feet above the rocky shore, I was more than once saluted by a jet of water, accompanied by a slight grating noise. At first I could not think what it was, but afterwards I found out that it was this cuttle-fish, which, though concealed in a hole, thus often led me to its discovery. That it possesses the power of ejecting water there is no doubt, and it appeared to me that it could certainly take good aim by directing the tube or siphon on the under side of its body. From the difficulty which these animals have in carrying their heads, they cannot crawl with ease when placed on the ground. I observed that one which I kept in the cabin was slightly phosphorescent in the dark.from:  https://www.gutenberg.org/ebooks/9444Sasha Chapin writes: In late winter 2024, I noticed that I wasn’t living up to my stated policy of trying to accept every emotion passing through my system. There were certain shades of existential loneliness that I was pushing away. This was causing some friction. Solitude is simply part of my current life chapter, since Cate is more independent than any of my previous partners, and Berkeley is a place where I don’t feel at home socially.As a response, I made feelings of solitude the central focus of my practice. I tried to become like a sommelier, going out of my way to appreciate all the shades of loneliness that colored my afternoons, trying to zoom in on every micro-pixel and embrace rather than reject.Again—normal. This is what, for me, long-term practice often consists of: noticing when my reactions don’t line up with my principles, and seeing if I can bring myself into deeper alignment.However, I noticed something odd. Dropping the resistance to loneliness allowed me to slip into deeper sensations of flow. It was almost as if the emotional resistance had been preventing the emergence of a more intuitive part of my will. There were a few memorable walks I took where the feeling of solitude felt like a portal into an exquisitely smooth parallel world. When I allowed my emotions to pierce me more deeply, I fell into a different degree of cooperation with reality. Every step felt precise and necessary, like a choreographed dance.5Michael Nielsen writes about this in an essay where he describes the experience of pushing himself to go deeper than usual in understanding a mathematical proof:I gradually internalize the mathematical objects I’m dealing with [using spaced repetition]. It becomes easier and easier to conduct (most of) my work in my head. [. . .] Furthermore, as my understanding of the objects change – as I learn more about their nature, and correct my own misconceptions – my sense of what I can do with the objects changes as well. It’s as though they sprout new affordances, in the language of user interface design, and I get much practice in learning to fluidly apply those affordances in multiple ways. [. . .]After going through the [time-consuming process of deeply understanding a proof,] I had a rather curious experience. I went for a multi-hour walk along the San Francisco Embarcadero. I found that my mind simply and naturally began discovering other facts related to the result. In particular, I found a handful (perhaps half a dozen) of different proofs of the basic theorem, as well as noticing many related ideas. This wasn’t done especially consciously – rather, my mind simply wanted to find these proofs.6Chris Olah writes: Research intimacy is different from theoretical knowledge. It involves internalizing information that hasn’t become part of the “scientific cannon” yet. Observations we don’t (yet) see as important, or haven’t (yet) digested. The ideas are raw.(A personal example: I’ve memorized hundreds of neurons in InceptionV1. I know how they behave, and I know how that behavior is built from earlier neurons. These seem like obscure facts, but they give me powerful, concrete examples to test ideas against.)Research intimacy is also different from research taste. But it does feed into it, and I suspect it’s one of the key ingredients in beating the “research taste market.”As your intimacy with a research topic grows, your random thoughts about it become more interesting. Your thoughts in the shower or on a hike bounce against richer context. Your unconscious has more to work with. Your intuition deepens.I suspect that a lot of “brilliant insights” are natural next steps from someone who has deep intimacy with a research topic. And that actually seems more profound.No posts]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Atlassian is acquiring The Browser Company]]></title>
            <link>https://www.cnbc.com/2025/09/04/atlassian-the-browser-company-deal.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45126358</guid>
            <description><![CDATA[OpenAI and Perplexity both reportedly looked at acquiring the startup.]]></description>
            <content:encoded><![CDATA[Mike Cannon-Brookes, co-founder and CEO of Atlassian, speaks at the National Electrical Vehicle Summit in Canberra, Australia, on Aug. 19, 2022. Cannon-Brookes is urging Australia to show more ambition on climate action, even as the new government legislates plans to strengthen the country's carbon emissions cuts.Hilary Wardhaugh | Bloomberg | Getty ImagesAtlassian said it has agreed to acquire The Browser Co., a startup that offers a web browser with artificial intelligence features, for $610 million in cash.The companies aim to close the deal in Atlassian's fiscal second quarter, which ends in December.Established in 2019, The Browser Co. has gone up against some of the world's largest companies, including Google, with Chrome, and Apple, which includes Safari on its computers running MacOS.The startup debuted Arc, a customizable browser with a built-in whiteboard and the ability to share groups of tabs, in 2022. The Dia browser, a simpler option that allows people to chat with an AI assistant about multiple browser tabs at once, became available in beta in June.Atlassian co-founder and CEO Mike Cannon-Brookes said he sees shortcomings in the most popular browsers for those who do much of their work on computers."Whatever it is that you're actually doing in your browser is not particularly well served by a browser that was built in the name to browse," he said in an interview. "It's not built to work, it's not built to act, it's not built to do."Cannon-Brookes said Arc has helped him feel like he can manage his work, with its ability to organize tabs and automatically archive old ones.But only a small percentage of people who used The Browser Co.'s Arc adopted the program's special features."Our metrics were more like a highly specialized professional tool (like a video editor) than a mass-market consumer product, which we aspired to be closer to," Josh Miller, The Browser Co.'s co-founder and CEO, said in a newsletter update. The startup stopped building new features for Arc, leading to questions of whether it would release the browser under an open-source license.Read more CNBC tech newsHuawei launches second trifold smartphone at $2,500 as it looks to cement comebackC3 AI reports declining revenue, announces new CEO to replace SiebelOpenAI boosts size of secondary share sale to $10.3 billionApple has survived Trump's tariffs so far. It might raise iPhone prices anywayAI search startup Perplexity, which offered Google $34.5 billion for Chrome, talked with The Browser Co. about a possible acquisition in December, The Information reported. OpenAI also held deal talks with The Browser Co., according to the report.Cannon-Brookes wouldn't specify whether Atlassian considered buying Google's browser. Last year, the U.S. Justice Department proposed a divestiture after a federal judge ruled that the company enjoyed an internet search monopoly."I'm not even sure if there is a bidding competition for Chrome," Cannon-Brookes said. "I didn't see Google putting up an auction just yet. Look, I think we focus on actually getting acquisitions done and actually making those products a part of a coherent whole and delivering value for our customers. I'm not sure that stunt PR acquisition offers are really our thing, but we'll leave that for them to do."Perplexity has been providing early access to its own AI browser, which is named Comet.The Browser Co. was valued at $550 million last year. Investors include Atlassian Ventures, Salesforce Ventures, Figma co-founder Dylan Field and LinkedIn co-founder Reid Hoffman.The browser is central for those using Atlassian products, such as the Jira project management software, which shows existing support requests on the web. But the plan isn't simply to make it nicer to work with Atlassian products online."It's really about taking Arc's SaaS application experience and power user features, and Dia's AI and elegance and speed and sort of svelte nature, and Atlassian's enterprise know-how, and working out how to put all that together into Dia, or into the AI part of the browser," Cannon-Brookes said.watch now]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Le Chat: Custom MCP Connectors, Memories]]></title>
            <link>https://mistral.ai/news/le-chat-mcp-connectors-memories</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45125859</guid>
            <description><![CDATA[Le Chat now integrates with 20+ enterprise platforms—powered by MCP—and remembers what matters with Memories.]]></description>
            <content:encoded><![CDATA[Today, we’re giving you more reasons to switch to Le Chat.


The widest enterprise-ready connector directory (beta), with custom extensibility, making it easy to bring workflows into your AI assistant.


Directory of 20+ secure connectors—spanning data, productivity, development, automation, commerce, and custom integrations. Search, summarize, and act in tools like Databricks, Snowflake, GitHub, Atlassian, Asana, Outlook, Box, Stripe, Zapier, and more.


Custom extensibility: Add your own MCP connectors to broaden coverage and drive more precise actions and insights.


Flexible deployment: run on mobile, in your browser, or deploy on-premises or in your cloud.




Context that carries: introducing Memories (beta).


Highly-personalized responses based on your preferences and facts.


Careful and reliable memory handling: saves what matters, slips sensitive or fleeting info.


Complete control over what to store, edit, or delete.


And… fast import of your memories from ChatGPT.




Everything available on the Free plan.



Plug it right in.
Today, we’re releasing 20+ secure, MCP-powered connectors in Le Chat, enabling you to search, summarize, and take actions with your business-critical tools. Le Chat’s connector directory spans essential categories, simplifying how you integrate your workflows in chats.

The new-look Connectors directory opens direct pipelines into enterprise tools, turning Le Chat into a single surface for data, documents, and actions. 

Data: Search and analyze datasets in Databricks (coming soon), Snowflake (coming soon), Pinecone, Prisma Postgres, and DeepWiki.
Productivity: Collaborate on team docs in Box and Notion, spin up project boards in Asana or Monday.com, and triage across Atlassian tools like Jira and Confluence.
Development: Manage issues, pull requests, repositories, and code analysis in GitHub; create tasks in Linear, monitor errors in Sentry, and integrate with Cloudflare Development Platform.
Automation: Extend workflows through Zapier and campaigns in Brevo.
Commerce: Access and act on merchant and payment data from PayPal, Plaid, Square, and Stripe.
Custom: Add your own MCP connectors to extend coverage, so you can query, get summaries, and act on the systems and workflows unique to your business.
Deployment: Run on-prem, in your cloud, or on Mistral Cloud, giving you full control over where your data and workflows live.


Connectors in action.




Databricks and Asana
Summarizing customer reviews in Databricks, then raising a ticket in Asana to address the top issues.






GitHub and Notion
Reviewing open pull requests in GitHub, then creating Jira issues for follow-up and documenting the changes in Notion.




Box
Comparing financial obligations across legal documents in Box, then uploading a concise summary back into Box.




Confluence and Jira
Summarizing active issues from Jira, then drafting a Confluence sprint overview page for team planning.




Stripe and Linear
Retrieving business payment insights from Stripe, then logging anomalies as a development project and task in Linear.


Learn more about Connectors in our Help Center.
Connect any MCP server.
For everything else, you can now connect to any remote MCP server of choice—even if it’s not listed in the Connectors directory—to query, cross-reference, and perform actions on any tool in your stack.

Your rules. Your control.
Admin users can confidently control which connectors are available to whom in their organization, with on-behalf authentication, ensuring users only access data they’re permitted to.
Deploy Le Chat your way—self-hosted, in your private or public cloud, or as a fully managed service in the Mistral Cloud. Talk to our team about enterprise deployments.
Hold that thought.
Memories in Le Chat carry your context across conversations, retrieving insights, decisions, and references from the past when needed. They power more relevant responses, adaptive recommendations tailored for you, and richer answers infused with the specifics of your work—delivering a faster, more relevant, and fully personalized experience.

Memories score high in our evaluations for accuracy and reliability: saving what’s important, avoiding forbidden or sensitive inferences, ignoring ephemeral content, and retrieving the right information without hallucinations.

Most importantly, you stay in full control—add, edit, update, or remove any entry at any time, with clear privacy settings and selective memory handling you can trust.
Get started in Le Chat.
Both Connectors and Memories are available to all Le Chat users.
Try out the new features at chat.mistral.ai, or by downloading the Le Chat mobile by Mistral AI app from the App Store or Google Play Store, for free; no credit card needed.
Reach out to us to learn how Le Chat Enterprise can transform your mission-critical work. 
See you at our MCP webinar and hackathon?
 WebinarGetting Started with MCP in Le Chat, September 9, Online.
Join our webinar on September 9 to dive into Le Chat’s new MCP capabilities with the Mistral team. Learn key insights, ask your questions, and prepare to build cutting-edge projects—all before the hackathon begins.
 Sign up now. 
HackathonMistral AI MCP Hackathon, September 13-14, Paris.
Gather with the best AI engineers for a 2-day overnight hackathon (Sep. 13-14) and turn ideas into reality using your custom MCPs in Le Chat. Network with peers, get hands-on guidance from Mistral experts, and push the boundaries of what’s possible.


We’re hiring!
If you’re interested in joining us on our mission to build world-class AI products, we welcome your application to join our team!
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Electromechanical reshaping offers safer eye surgery]]></title>
            <link>https://spectrum.ieee.org/electrochemistry-for-eye-surgeries</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45125816</guid>
            <description><![CDATA[A new technique can reshape your vision without lasers. Learn how electricity might change future eye surgeries.]]></description>
            <content:encoded><![CDATA[A new, promising technique has the potential to replace laser surgeries in ophthalmologists’ offices in the future, for a fraction of the cost. Called electromechanical reshaping (EMR), the technique offers a gentler approach to correcting the cornea than Laser-Assisted in Situ Keratomileusis (LASIK), today’s gold standard for treating vision issues including nearsightedness, farsightedness, and astigmatism.The eye develops these and other conditions when the cornea’s curvature is off—too steep, too flat, or too uneven. To solve the problem, surgeons generally use laser techniques such as LASIK to “sculpt” the eye surface by cutting away small parts of corneal tissue. The results can be life-changing, but the procedure has its risks, as LASIK permanently reduces corneal strength, raising the risk of new vision problems.Alternative nonsurgical methods such as specially designed contact lenses can temporarily mold the cornea, but these require nightly wear and can cause infection. Now, engineers and eye doctors are trying to find a way to permanently reshape collagen-rich tissues like the cornea without cutting, burning, or removing material.Brian Wong, a surgeon-engineer at the University of California, Irvine, stumbled upon a possible solution about a decade ago. He had long worked with thermal techniques for reshaping cartilage tissues—which include the cornea—but found a puzzling “Goldilocks problem” during his research: The heating needed to change shapes often killed too many tissue cells. Then a “happy accident” opened a different perspective, he says. “My postdoctoral fellow connected a pair of electrodes and a Coke can to a power supply…and out of spite, fried a piece of cartilage,” Wong recalls. The cartilage began to bubble, which the postdoc thought was from heat. “But it wasn’t hot. We touched it and thought, this is getting a shape change. This must be electrolysis,” he says. That surprise pointed to electrochemistry rather than heat as the mechanism. To explore further, Wong partnered with Michael Hill, a chemist at Occidental College. Together, they began exploring the chemistry behind EMR and testing it in different tissues. In mid-August, they presented results from their most recent tests at the American Chemical Society’s fall meeting that took place in Washington, D.C. How Electricity Reshapes TissueEMR uses small electrical pulses to split water at the tissue surface into hydrogen and oxygen, releasing protons that spread into the part of the corneal tissue that gives it structural integrity, the ability to hydrate, and other mechanical properties. Once protons are spread throughout the cornea’s surface, they disrupt the chemical bonds that hold collagen fibers in place, also changing the corneal tissue’s pH. This, Wong explains, is the moment when the cornea becomes moldable. Once shaped with a metal contact lens–like mold, it “locks in” to the new shape as the electric pulses are turned off and the body’s natural physiological response returns the cornea’s pH back to its normal value. In 2023, Wong and Hill coauthored a proof-of-concept paper in ACS Biomaterials Science & Engineering, showing that EMR could reshape rabbit corneas without compromising transparency. “That paper was really about asking, is it even possible? Can we change the shape of a cornea without gross damage?” Hill says. “Now, after two more years of work, we’ve systematically gone through the parameters—and we can say yes, it is possible, and we can do it safely,” he adds.Their team built custom platinum contact lenses, press-molded to precise curvatures, and connected them to electrodes. Mounted onto rabbit eyes immersed in a saline solution, the electrodes delivered pulses of around 1.5 volts. X-ray imaging tests confirmed the corneas had indeed matched the mold’s shape. Microscopy tests also confirmed the collagen tissue remained organized post-surgery. “Fine control is the key,” Wong observes. The cost of procedures using the new technique can be significantly lower than laser eye surgery, according to Wong. That’s because, unlike LASIK, EMR doesn’t rely on “laser platforms that cost as much as luxury cars.” The new technique could also be more affordable for clinics and regions priced out of LASIK. While the technique has a long way to go before being used in eye surgeries, the research is advancing to in-vivo animal tests to prove safety and durability—and for long-term tracking to ensure the results last. “Nobody’s getting this at the optometrist next year,” Hill cautions. “Now comes the hard work—refining parameters, confirming long-term viability, and making sure treated eyes don’t revert back,” he adds.That hard work, Hill adds, depends a lot on funding for basic science. EMR was born not from a targeted medical-device program but from curiosity-driven experiments in electrochemistry. “You don’t always know where basic research will lead,” Hill says. “We were looking at electroanalytical chemistry, not eye surgery. But those foundational insights are what made this possible. If you cut off that basic research, you don’t get these kinds of unexpected, transformative opportunities,” he adds.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kruci: Post-mortem of a UI library]]></title>
            <link>https://pwy.io/posts/kruci-post-mortem/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45124165</guid>
            <description><![CDATA[Who didn't once want to roll their own user interface toolkit?]]></description>
            <content:encoded><![CDATA[
        

        
          I love doing
          experiments -
          side projects to my
          side projects,
          for fun or
          out of necessity.
        

        
          Sometimes those experiments and end up in
          something useful, other
          times - not so much. Let me tell you about one of the latter projects
          - about terminals, user interfaces, and trade-offs.
        

        

        
          >  Water 
          >  Waste 
          >  Wager 
          >  Wisdom 
          >  Wisdom - Widgets 
          >  Wisdom - Layouts 
          >  Summary 
        

         Water 

        
          My programming spare time is dedicated mostly towards
          kartoffels, a game
          of mine where you're implementing firmwares for tiny robots:
        

        
          

          Main menu of the upcoming kartoffels v0.8.
        

        
          For the next version I've started to work on a new challenge, a map
          where your bot is stranded on an island - as the player, you have to
          implement a bot that collects some nearby rocks and arranges them into
          a HELP ME text:
        

        
          

          
            An island in the middle of an ocean -- if only you squeeze your eyes
            a bit and assume that the gray dots are, in fact, sand; this is
            work-in-progress, so you have to picture rocks as well.
          
        

        
          Since ocean is rarely stationary, I thought it'd be nice to add waves
          as a visual gimmick - inspired by
          a shader, I went
          with:
        

        
          

          Waves, slowly waving around.
        

        
          ... then I ran htop and saw that damn, those wave
          calculations are heavy!
        

        
          For each ocean tile you have to calculate a couple of sines and
          exponentials - it's not the end of the world for a modern CPU, but it
          does become problematic in my case, because the game is rendered
          entirely on the server, players are just SSH terminals.
        

        
          So it's actually a couple of sines and exponentials for each pixel,
          for each frame, for each player.
        

        
          Fortunately, eyes can be easily fooled. Even though the ocean seems
          alive, it's not like the entire ocean changes between every two
          consecutive frames - so, intuitively, we shouldn't be forced to
          recalculate everything from scratch all the time.
        

        
          This is not a novel thought - games have been amortizing calculations
          across frames for years now,
          for better
          or for worse.
        

        
          Eventually I've been able to get an acceptable frame time by keeping a
          buffer that's updated both less frequently than the main frame rate
          and merely stochastically - and this got me thinking:
        

        Are there any other places where I'm wasting CPU cycles?

         Waste 

        
          kartoffels delegates drawing to
          Ratatui, a Rust crate
          for building terminal user interfaces. It works in
          immediate mode, which means that every frame you're supposed to draw everything you
          want to see on the screen, always from scratch:
        

        

        
          fn run(terminal: &mut DefaultTerminal) -> Result<()> {
    loop {
        terminal.draw(render)?;

        if should_quit()? {
            break;
        }
    }

    Ok(())
}

// Always starts with an empty frame
fn render(frame: &mut Frame) {
    let greeting = Paragraph::new("Hello World! (press 'q' to quit)");

    frame.render_widget(greeting, frame.area());
}

        

        
          After render() returns, the frame is painted - but it
          can't be sent to the user's terminal yet, since terminals can be slow
          and some could have a hard time processing a continuous stream of
          frames, especially with
          ANSI escape codes
          floating around.
        

        
          Luckily, since a new frame is usually similar to the previous one,
          instead of sending everything, we can send just the difference - a
          couple of instructions such as go to (30,5),
          overwrite with 'vsauce'.
        

        
          This is essentially a video codec, but for text - and Ratatui provides
          one out of the box:
        

        

        
          // Takes two buffers, returns a list of differences between them (x, y, char).
pub fn diff(&self, other: &Self) -> Vec<(u16, u16, &Cell)> {
    /* ... */

    let mut updates = vec![];
    let buffers = next_buffer.iter().zip(previous_buffer.iter()).enumerate();

    for (i, (current, previous)) in buffers {
        if current != previous {
            let (x, y) = self.pos_of(i);
            updates.push((x, y, &next_buffer[i]));
        }

        /* ... */
    }

    updates
}

        

        

        
          Even though this codec is rather minimalistic, what I've found out is
          that for some views - for instance this welcome screen you saw at the
          beginning - this diffing can take half of the frame time!
        

        
          This is KCachegrind, showing timings for a single frame - you can see
          that
          Terminal::flush() (expanded below) takes about the same
          time as everything else, including drawing the frame:
        

        
          
        

        
          

          
            Zoom-in to Terminal::flush() where
            Buffer::diff()
            is seen taking almost all of the time.
          
        

        but if computers fast then why codec slow ??

         Wager 

        
          Most of the overhead seems to come from, out of all things, Unicode
          ✅💻🖥️💻✅ - but I'm getting ahead of myself. When you see a terminal:
        

        
          

          btop running in Kitty
        

        
          ... you might imagine it's basically a two-dimensional array of
          characters:
        

        
          struct Buffer {
    cells: Vec<Vec<char>>,
}

        

        
          But this is an oversimplification as each character (also known as
          cell) can be colored:
        

        
          struct Buffer {
    cells: Vec<Vec<Cell>>,
}

struct Cell {
    symbol: char,
    foreground: Color,
    background: Color,
    /* underline, strike-through etc. */
}

        

        
          ... and even that is too naive - Rust's char can
          encode a single Unicode scalar value, while sometimes what you
          perceive as one character is actually a couple of chars
          bundled together.
        

        
          For instance 🐕‍🦺 (service dog) is really two separate emojis, 🐕 (dog)
          and 🦺 (safety vest).
        

        

        
          So if we want to implement a terminal-ui application that supports
          Unicode, it must be able to represent cells with potentially multiple
          chars:
        

        
          struct Cell {
    symbol: String,
    /* ... */
}

        

        That is the case for Ratatui - and most TUI libraries, I suppose:

        

        
          /// A buffer cell
#[derive(Debug, Clone, Eq, PartialEq, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Cell {
    /// The string to be drawn in the cell.
    ///
    /// This accepts unicode grapheme clusters which might take up more than one cell.
    ///
    /// This is a [`CompactString`] which is a wrapper around [`String`] that uses a small inline
    /// buffer for short strings.
    ///
    /// See <https://github.com/ratatui/ratatui/pull/601> for more information.
    symbol: CompactString,

    /* ... */
}

        

        But doing so causes this inconspicuous bit from before:

        

        
          pub fn diff(&self, other: &Self) -> Vec<(u16, u16, &Cell)> {
    /* ... */

    for (i, (current, previous)) in buffers {
        if current != previous {
            /* ... */
        }

        /* ... */
    }

    /* ... */
}

        

        
          ... to suddenly become heavy, because the CPU might be forced to chase
          pointers and perform
          logic
          that otherwise wouldn't be there - an overhead for each cell, for each
          frame, for each player.
        

        
          I've been fiddling with Ratatui internals for a while now and my notes
          tell me that dropping support for Unicode reduces the frame time by
          half - but those changes are somewhat un-upstreamable.
        

        
          While they do help in my specific use case, I'd say that most TUI apps
          should have support for Unicode - for most apps this "overhead"
          doesn't matter, because they are run locally, and we're talking about
          a millisecond, if even; it's negligible.
        

        
          ("overhead" in quotes, since it's not really overhead when your
          application relies on the Unicode support being there - it would be
          overhead if the algorithm did something otherwise unnecessary.)
        

        
          Besides, Unicode or not, the fundamental problem I've got with diffing
          is that it feels like a self-made problem: we need to diff, because
          every frame we get a brand new buffer. So what if instead of diffing,
          the UI just knew how to update the terminal incrementally,
          without the need to diff?
        

        Consider a clock app:

        
          -------------------
| time = 12:00:00 |
-------------------

        

        
          If the time now changes to 12:00:01, why bother redrawing
          everything just to get the diff?
        

        

        
          So this got me thinking - the diffing, plus the fact that I've got a
          bit of a beef with Ratatui's layouting method, which, as compared to
          Swift's:
        

        
          var body: some View {
    VStack {
        Text("Hello")
        Text("World")
    }
}

        

        ... or egui's:

        
          egui::CentralPanel::default().show(ctx, |ui| {
    ui.label("Hello");
    ui.label("World");
});

        

        
          ... has this disadvantage of forcing you to imperatively hand-place
          the widgets:
        

        
          let (area, buf) = (frame.area(), frame.buffer_mut());

Paragraph::new("Hello").render(area, buf);

Paragraph::new("World")
    .render(area.offset(Offset { x: 0, y: 1 }), buf);
//          ^--------------------------------^

        

        
          Even though most of the time most of the calculations can be
          abstracted away using Layout:
        

        
          let (area, buf) = (frame.area(), frame.buffer_mut());

let [hello_area, world_area] = Layout::vertical([
    Constraint::Length(1),
    Constraint::Length(1),
])
.areas(area);

Paragraph::new("Hello").render(hello_area, buf);
Paragraph::new("World").render(world_area, buf);

        

        
          ... the awkwardness demon comes back once you have a layout whose size
          depends on its content - for instance in kartoffels there's this
          world-selection window:
        

        
          
        

        
          ... whose width relies on the longest world name, height relies on the
          number of worlds, and position relies on the window size itself (it's
          centered).
        

        
          If you start to implement this in Ratatui, you quickly get backed into
          a corner where you have to calculate the layout before you can draw,
          but you can't easily calculate the layout until you get to the drawing
          part:
        

        
          // Step 1: Center the area horizontally
let [_, area, _] = Layout::horizontal([
    Constraint::Fill(1),
    Constraint::Length(/* ughh, expected width? */),
    Constraint::Fill(1),
])
.areas(area);

// Step 2: Center the area vertically
let [_, area, _] = Layout::vertical([
    Constraint::Fill(1),
    Constraint::Length(/* ughh, expected height? */),
    Constraint::Fill(1),
])
.areas(area);

/* drawing happens here */

        

        
          Of course, you clearly can precalculate everything by hand:
        

        
          let expected_width =
    // left-right padding:
    2
    // name of the longest world or the `go back` button:
    + worlds
        .iter()
        .map(|world| {
            4 // `[1] `, `[2] ` etc.
            + world.name.len()
        })
        .max()
        .unwrap()
        .max(13); // `[esc] go-back`

let expected_height = worlds.len() + 2;

// Step 1: Center the area horizontally
let [_, area, _] = Layout::horizontal([
    Constraint::Fill(1),
    Constraint::Length(expected_width),
    Constraint::Fill(1),
])
.areas(area);

// Step 2: Center the area vertically
let [_, area, _] = Layout::vertical([
    Constraint::Fill(1),
    Constraint::Length(expected_height),
    Constraint::Fill(1),
])
.areas(area);

        

        
          ... it's just that even if you abstract the widgets, the calculations
          remain a chore.
        

        

        
          So, those were - and still remain - the pain points I have with
          Ratatui:
        

        
          diffing feels "unnecessary" and takes "too much" time,
          laying widgets out feels "like a chore".
        

        What's more, in my specific case:

        
          I don't care about proper Unicode support,
          
            I'm fine with better performance at the cost of worse developer
            experience.
          
        

        
          With those in mind and cargo new at my fingertips, would
          I be able to come up with a better library?
        

         Wisdom 

        
          Turns out - no! But hey, I've learned a thing or two - let me
          walk you through a couple of decisions I've made and through my
          thought process.
        

        

        
          Since I'd like to avoid repainting unchanged bits of the screen, I've
          decided that my library cannot use Ratatui's approach of "let's run a
          function that draws everything" - instead, I went with a widget tree.
        

        
          If you've done a bit of HTML or Swift or Yew or any modern UI library
          really, you're probably familiar with the concept - instead of
          describing the interface imperatively, you describe it mostly
          declaratively, like so:
        

        
          fn ui() -> impl ui::Node {
    ui::column()
        .with(ui::text("Hello"))
        .with(ui::text("World"))
}

        

        In practice this can be implemented with a trait:

        
          pub trait Node { // aka "widget" or "component"
    fn paint(&mut self, buffer: &mut Buffer, x: u16, y: u16);
}

        

        ... and a couple of types such as:

        
          pub struct Text {
    body: String,
}

impl Text {
    pub fn set(&mut self, body: impl Into<String>) {
        self.body = body.into();
    }
}

impl Node for Text {
    fn paint(&mut self, buffer: &mut Buffer, x: u16, y: u16) {
        /* draw text to buffer at (x, y) */
    }
}

        

        
          Under this design, rendering every frame consists of painting the root
          node which then recursively paints its children and so on - for
          instance this screen from before:
        

        
          
        

        
          ... could be described by this tree (in reality this would be Rust
          code, of course):
        

        
          (zstack
  (background)
  (centered
    (window "play"
      (vstack
        (button "1" "arena")
        (button "2" "grotta")
        (line)
        (button "esc" "go-back")))))

        

        
          For convenience, most UI libraries tell you to build a new widget tree
          every frame - but since we're fine with trading worse developer
          experience for better performance, we're going to re-use the same tree
          in-place, just with manually-tracked dirty flags:
        

        
          pub struct Text {
    body: String,
    dirty: bool,
}

impl Text {
    pub fn set(&mut self, body: impl Into<String>) {
        self.body = body.into();
        self.dirty = true;
    }
}

impl Node for Text {
    fn paint(&mut self, buffer: &mut Buffer, x: u16, y: u16) {
        if !self.dirty {
            // Already drawn
            return;
        }

        /* draw text to buffer at (x, y) */

        self.dirty = false;
    }
}

        

        
          ... aaand hey what's that - this is day zero and we're already
          cheating!
        

        
          After all, keeping a dirty flag per node is a form of diffing,
          simply in "node-space" (per each widget) instead of "cell-space" (per
          each cell).
        

        
          I think diffing limited to nodes is acceptable, though - it's linear
          in the number of nodes displayed on the screen, it doesn't depend on
          the screen size itself. So the "cost" would be 9 for the scene above
          (9 nodes) instead of, say, 128*64 (width * height) if we were to diff
          terminal cells.
        

        
          Now, does it look good on paper? Quite! So let's get to the nasty
          parts.
        

        Reality check: Events

        
          What about event processing - how can we handle key presses, mouse
          clicks?
        

        
          In Ratatui this is painfully obvious, you simply check the keyboard
          and mouse every frame:
        

        
          fn should_quit() -> bool {
    if event::poll(Duration::from_millis(250)).unwrap() {
        event::read()
            .unwrap()
            .as_key_press_event()
            .is_some_and(|key| key.code == KeyCode::Char('q'))
    } else {
        false
    }
}

        

        
          But the moment you use a widget tree, the control gets inverted - now
          the ui library has to somehow call you. You can then choose
          between callbacks:
        

        
          fn quit_btn(on_press: impl FnOnce()) -> impl ui::Node {
    ui::button("Press Q to quit")
        .on_key_pressed('q', on_press)
}

        

        ... channels:

        
          fn quit_btn(tx: mpsc::Sender<()>) -> impl ui::Node {
    ui::button("Press Q to quit").on_key_pressed('q', move || {
        _ = tx.send(());
    })
}

        

        ... or some sort of pretend-algebraic effects:

        
          enum QuitBtnEvent {
    Quit,
}

fn quit_btn(tx: mpsc::Sender<()>) -> impl ui::Node<QuitBtnEvent> {
    ui::button("Press Q to quit")
        .on_key_pressed('q', QuitBtnEvent::Quit)
}

        

        
          But none of them compose that well once you have to bundle widgets
          together:
        

        
          fn menu(
    on_start: impl FnOnce(),
    on_settings: impl FnOnce(),
    on_quit: impl FnOnce(),
) -> impl ui::Node {
    ui::column()
        .with(start_btn(on_start))
        .with(settings_btn(on_settings))
        .with(quit_btn(on_quit))
}

        

        
          enum MenuEvent {
    Start,
    Settings,
    Quit,
}

fn menu() -> impl ui::Node<MenuEffect> {
    ui::column()
        .with(
            start_btn()
                .map_effect(|_| MenuEffect::Start)
        )
        .with(
            settings_btn()
                .map_effect(|_| MenuEffect::Settings)
        )
        .with(
            quit_btn()
                .map_effect(|_| MenuEffect::Quit)
        )
}

        

        Ick.

        
          Using declarative widgets instead of imperative code also spawns a new
          dimension of problems - state management.
        

        Reality check: State

        
          Say, we're writing a to-do app - how do you pass the state from parent
          nodes to their children?
        

        
          fn tasks() -> impl ui::Node {
    /* okkk, where do i get the list from ?? */
}

        

        Sure, you can pass the list when you create the widget:

        
          fn tasks(tasks: &[Task]) -> impl ui::Node {
    /* ... */
}

        

        
          ... but since we're not rebuilding the entire widget tree every frame,
          how do you update it?
        

        
          enum Event {
    DeleteSelectedTask,
}

fn menu() -> impl ui::Node<Event> {
    /* ... */
}

fn tasks<T>(tasks: &[Task]) -> impl ui::Node<T> {
    /* ... */
}

fn main() {
    let mut tasks = vec![
        /* ... */
    ];

    let ui = Ui::new();

    ui.set_root(
        ui::column()
            .with(menu())
            .with(tasks(&tasks))
    );

    loop {
        ui.paint();

        match ui.react() {
            Event::DeleteSelectedTask => {
                tasks.remove(/* ... */);
                /* how do you refresh the `tasks()` widget? */
            }
        }
    }
}

        

        
          I've tried to play with
          lenses where
          you extend the node's definition to support arbitrary arguments:
        

        
          pub trait Node<Arg, Event> {
    fn paint(&mut self, buffer: &mut Buffer, x: u16, y: u16, arg: &Arg);
}

        

        ... and then you weave them throughout the call stack:

        
          // Menu doesn't need any arguments, it works for any:
fn menu<A>() -> impl ui::Node<A, Event> {
    /* ... */
}

// On the other hand, the task list doesn't throw any effect:
fn tasks<E>() -> impl ui::Node<[Task], E> {
    /* ... */
}

fn main() {
    let mut tasks = vec![
        /* ... */
    ];

    let ui = Ui::new();

    ui.set_root(
        ui::column()
            .with(menu())
            .with(tasks())
    );

    loop {
        ui.paint(&tasks);

        /* ... */
    }
}

        

        
          ... but I couldn't figure out any design that would work given
          anything more complicated than a Hello World! and maybe a
          single text input.
        

        
          A natural approach would be to keep the state and UI materialized
          separately:
        

        
          fn task(task: &Task) -> impl ui::Node<Event> {
    /* title, priority, an "open" button etc. */
}

fn main() {
    // state:
    let mut tasks = vec![
        /* ... */
    ];

    // user interface:
    let mut task_nodes = tasks.iter().map(task).collect();

    let ui = Ui::new();

    ui.set_root(
        ui::column()
            .with(menu())
            .with(list(task_nodes))
    );

    /* ... */
}

        

        
          ... but in addition to being memory-heavy, this approach doesn't play
          with the concept of ownership:
        

        
          loop {
    ui.paint();

    match ui.react() {
        Event::DeleteSelectedTask => {
            tasks.remove(/* ... */);

            // ugh, `task_nodes` has been moved to `ui.set_root()`, it's not
            // accessible anymore here:
            // task_nodes.remove(/* ... */);
        }
    }
}

        

        
          My initial demos used an Arc<RwLock<...>>:
        

        
          fn main() {
    /* ... */

    let task_nodes = tasks.iter().map(task).collect();
    let task_nodes = Arc::new(RwLock::new(task_nodes));

    /* ... */

    ui.set_root(
        ui::column()
            .with(menu())
            .with(list(task_nodes.clone()))
    );

    loop {
        ui.paint();

        match ui.react() {
            Event::DeleteSelectedTask => {
                tasks.remove(/* ... */);
                task_nodes.write().remove(/* ... */);
            }
        }
    }
}

        

        
          ... but that, in turn, means that you have to lock that
          RwLock
          every frame, also not great.
        

        
          Cursive does something
          else, akin to JavaScript's document.getElementById(),
          where you can query a widget for a child:
        

        

        
          fn delete_name(s: &mut Cursive) {
    let mut select = s.find_name::<SelectView<String>>("select").unwrap();
    match select.selected_id() {
        None => s.add_layer(Dialog::info("No name to remove")),
        Some(focus) => {
            select.remove_item(focus);
        }
    }
}

        

        
          This solves the ownership issue, but it also makes querying for
          widgets a fallible operation - if you rename a widget but forget to
          rename references to it, your code will probably panic or display a
          spurious error message.
        

        
          What's more, under this design finding widgets takes non-constant
          time, which could become a performance bottleneck for more complicated
          views:
        

        
          
        

        Reality check: Stacking

        
          On the topic of complicated views, another problem I've stumbled upon
          was z-stacking - consider:
        

        
          
        

        
          If you now press b, a modal will open and cover the map:
        

        
          
        

        
          This doesn't pause the game, the map is still getting updated in the
          background - you can see bots moving and happily stabbing each other
          behind the window (I mean, not here, since that's just a screenshot,
          but you know).
        

        In terms of the widget-tree, this is something akin to:

        
          (zstack
  (map)
  (backdrop)
  (bots-dialog
    (...)))

        

        
          Now, we'd like to avoid diffing, right? So when
          Map::paint() is called, it needs to somehow know
          not to overwrite the area that is allocated for
          BotsDialog.
        

        
          This is plenty problematic, because zstack behaves like:
        

        
          pub struct ZStack {
    nodes: Vec<Box<dyn Node>>,
}

impl Node for ZStack {
    fn paint(&mut self, /* ... */) {
        for node in &mut self.nodes {
            node.paint(/* ... */);
        }
    }
}

        

        
          ... and what we'd need is for Map, the first node on the
          list, to somehow know where the next nodes are going to paint
          before they are painted.
        

        
          Let's pretend that we've somehow managed to figure it out, though -
          another problem is that not all nodes are opaque, some of the nodes
          behave like shaders, i.e. they just modify whatever is underneath
          them.
        

        
          
            my man that's quite complicated for a tui game, are you sure you
          
        

        
          don't "my man" me here, we're all in this together now
        

        
          Uhm, anyway -- while it sounds spooky, the problem is simple. Compare
          the previous screenshots:
        

        
          
        

        
          
        

        
          After a window is opened, there's an extra "grayscale" effect applied
          to whatever lays "underneath" that window - that's called backdrop.
        

        
          If you always render an entire frame from scratch, you can simply
          iterate through all of the cells and replace their foreground color to
          gray (or do some kind of interpolation if you want to have a fade in
          effect or something).
        

        
          But we don't want to generate the entire frame from scratch, we want
          to be
          incremental - so the backdrop effect
          has to somewhat know what cells have changed between the current and
          the previous frame, like:
        

        
          impl Node for ZStack {
    fn paint(&mut self, /* ... */) -> /* ... */ {
        let mut invalidated_points = HashSet::<(u16, u16)>::new();

        for node in &mut self.nodes {
            let new_invalidated_points = node.paint(/* ... */, &invalidated_points);

            invalidated.extend(new_invalidated_points);
        }

        invalidated_points
    }
}

        

        
          I don't frequently use memes on my blog, but at this point I realized
          I was just:
        

        
          

          
            Charlie Conspiracy (always Sunny In Philidelphia) meme
          
        

        So

        
          As you can see, all of the options here somehow suuuck - from event
          processing up to the incremental updates.
        

        
          One of the reasons why I've eventually abandoned my custom tui-ui
          project was that I was getting increasingly worried that the overhead
          of managing trees and subtrees and selectors and surfaces and whatnot
          will be greater than any potential gains I could win by avoiding the
          diffing.
        

        
          A
          galactic UI algorithm, if you want.
        

        
           Wisdom - Layouts 
        

        
          On the upside, there is one decision that turned out quite nice - as I
          said before, one of the problems I've got with Ratatui is that you
          have to place the widgets by hand:
        

        
          Paragraph::new("World")
    .render(area.offset(Offset { x: 0, y: 1 }), buf);
//          ^--------------------------------^

        

        ... which stands in contrast to, say, Swift:

        
          var body: some View {
    VStack {
        Text("Hello")
        Text("World")
    }
}

        

        
          While I'm not a Swift developer, I would say that I'm
          Swift-aware, so for my library I've decided to
          steal borrow a couple of concepts from Swift UI:
        

        
          
            a single
            Text
            widget for all-things-text (compared to Ratatui's
            Span vs Line vs Paragraph),
          

          
            HStack, VStack, and ZStack for
            all-things-placement,
          

          
            ProposedViewSize
            for-all-things "how do I make widgets talk to each other".
          
        

        But first things first.

        
          Fundamentally, the problem with laying things out is that it's a
          chicken-and-egg game - that's because from a drawing-node's point of
          view, an ideal rendering interface would be just:
        

        
          pub trait Node {
    fn paint(&mut self, buffer: &mut Buffer, x: u16, y: u16);
}

        

        
          But this simplified interface doesn't work with "combinator-nodes"
          such as:
        

        
          pub struct Centered<T> {
    body: T,
}

impl<T> Node for Centered<T> {
    fn paint(&mut self, buffer: &mut Buffer, x: u16, y: u16) {
        /* okk, how do i query `body` for its size? */
    }
}

        

        
          let's add a new method, then - size()!
        

        Sure:

        
          pub trait Node {
    fn size(&self) -> (u16, u16);
    fn paint(&mut self, buffer: &mut Buffer, x: u16, y: u16);
}

        

        
          That's cute, but what about nodes that don't inherently have static
          size? Like a text that wraps - its size depends on the provided width
          (the narrower you make the node, the longer it's going to be).
        

        This means you need something like:

        
          pub trait Node {
    fn size(&self, width: u16, height: u16) -> (u16, u16);
    fn paint(&mut self, buffer: &mut Buffer, x: u16, y: u16);
}

        

        
          But this, in turn, means that most of the time you're going to be
          walking your widget tree twice - once to size it and then
          another time to paint it, even if the inner-widget is already of known
          size.
        

        For instance, if you to had to print a row of non-wrapping text:

        
          | first | second | third |

        

        
          ... then under the size() approach that would require
          calling each widget twice:
        

        
          - first.size()
- second.size()
- third.size()
- first.paint()
- second.paint()
- third.paint()

        

        
          ... even though all of the widgets have up-front known sizes and even
          though we're not centering anything - can we do better?
        

        
          My library's nodes have two main methods, paint() and
          mount():
        

        
          pub trait Node {
    fn paint(&mut self, buffer: &mut Buffer, pos: Pos) -> Result<Size, RSize>;
    fn mount(&mut self, size: Size) -> Option<Size>;
}

        

        Under this design:

        
          
            
              when a node has static size (like a box with constant width and
              height or a text that doesn't wrap), its
              paint() always returns
              Ok(ThatStaticSize),
            
          
          
            
              when a node needs help with determining its size, its
              paint() returns Err with a rough
              constraint (e.g. width must be between 2..50) -
              parent is then responsible for calling mount() with a
              proposed size until the child-node accepts the size via
              mount(), after which the parent calls
              paint() again.
            
          
        

        
          So you can imagine paint() = Err as communicating to the
          parent help, i need to get sized!, which the parent then
          handles via mount().
        

        
          This allows to handle the happy case (e.g. a row of sized widgets)
          without having to walk the tree multiple times, at a small "cache
          miss" penalty for when the child-node actually needs to get sized (in
          which case its
          paint() method would get called twice - but the first
          time wouldn't draw anything, it would insta-return Err).
        

        
          (most parents also cache the size of their childen, in which case a
          child can make paint() = Err to communicate to the parent
          that help, i need to get re-sized!, e.g. after you change
          a text.)
        

        
          Armed with this, I've been able to successfully implement all of the
          basic combinators like HStack or VStack, and
          the code turned out only mildly spooky:
        

        
          https://codeberg.org/pwy/kruci/src/branch/main/src/nodes/stack.rs
        

        
          ... and hey, it's
          tested!
        

         Summary 

        
          As I said, I've eventually abandoned the project - for the most part,
          I've just realized that I need to pick my fights better.
        

        
          There's no pressure for kartoffels to have hyper-optimized user
          interface, Ratatui is good enough - as it stands, the game does
          not have any performance issues. The time I've sacrificed to pursue
          this user inteface experiment could've been spent better actually
          improving the game, developing new challenges and whatnot (optimizing
          Ratatui, even).
        

        
          Of course, both the game itself and this UI experiment are nothing
          more than side projects, both are written out of fun - so you
          well could argue: who cares, why bother being a project manager for
          yourself? Why bother creating a game on a hard mode, with
          server-rendered interface?
        

        
          I guess I'd just like to see far I can get with this idea. Many people
          wrote to me that being able to just ssh into the game is a nice
          quality of life thingie, so I'd like to continue with that as the
          "core design choice" and see what problems unfold.
        

        
          Sometimes in pursuing a larger goal I find myself lost in a sea of
          seemingly small, unlit corridors that I feel I need to explore -
          sometimes I do and it turns out good (migrating from 64-bit RISC-V to 32-bit RISC-V
          was a good choice), but sometimes you just have to push the brakes and
          roll back.
        

        
          I think it's okay to both explore and to give up, other paths await.
        

        
          https://codeberg.org/pwy/kruci
        
      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Melvyn Bragg steps down from presenting In Our Time]]></title>
            <link>https://www.bbc.co.uk/mediacentre/2025/melvyn-bragg-decides-to-step-down-from-presenting-in-our-time/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45124143</guid>
            <description><![CDATA[After 26 years on the programme, the legendary presenter bids farewell to the series]]></description>
            <content:encoded><![CDATA[
  
  
    Melvyn’s passion for the arts, his intellectual curiosity, and his unwavering commitment to public service broadcasting over the last 60-plus years have enriched the lives of millions. Through In Our Time on Radio 4 he has brought depth, insight, and humanity to our airwaves every single week for more than a quarter of a century. 
    
  
Having presented well over 1,000 episodes of the much-loved BBC Radio 4 series, Melvyn Bragg has made the decision to step down from In Our Time following the series which aired earlier this year. Melvyn has presented every episode of In Our Time since the series first launched in 1998.
In Our Time is regularly one of the BBC’s most listened to on-demand programmes around the world, its appeal spanning generations. It is one of BBC Sounds' most popular podcasts amongst under 35s.
Over the last quarter of a century, Melvyn has skilfully led conversations about everything from the age of the Universe to ‘Zenobia’, Queen of the Palmyrene Empire. He has welcomed the company of the brightest and best academics in their fields, sharing their passion and knowledge with a fascinated audience right around the globe.
While he will be much missed on In Our Time, Melvyn will continue to be a friend of Radio 4 with more to come to celebrate his extraordinary career, and a new series in 2026 (details to be announced soon).
Melvyn Bragg says: "For a programme with a wholly misleading title which started from scratch with a six-month contract, it's been quite a ride! I have worked with many extremely talented and helpful people inside the BBC as well as some of the greatest academics around the world. It's been a great privilege and pleasure. I much look forward to continuing to work for the BBC on Radio 4. Thank you for listening."
Melvyn first joined the BBC in 1961 as a general trainee. His BBC career has spanned the World Service, a ten-year stint presenting Radio 4's Start the Week from 1988 - 1998 as well as numerous arts and culture programmes. He is an Honorary Fellow of the Royal Society and of The British Academy and was given a Peerage in 1998 and a Companion of Honour in 2017. Melvyn will continue to work with the BBC on future projects which are yet to be announced.
Tim Davie, BBC Director General, says: “Melvyn’s passion for the arts, his intellectual curiosity, and his unwavering commitment to public service broadcasting over the last 60-plus years have enriched the lives of millions. Through In Our Time on Radio 4 he has brought depth, insight, and humanity to our airwaves every single week for more than a quarter of a century. He leaves behind not just an extraordinary body of work, but a gold standard of broadcasting and interviewing excellence that will inspire generations to come.”
Mohit Bakaya, Director of Speech and Controller of BBC Radio 4 says: "Melvyn has been part of the heartbeat of Radio 4 for over three decades. His fierce intellect, coupled with a wonderful curiosity and extraordinary passion for knowledge marks him out as one of the broadcasting greats. Though we will miss him on In Our Time, he leaves behind a unique legacy: the treasure trove of over 1,000 archive episodes, which are a wonderful resource for all those with a love of learning. I look forward to working with him on new projects for Radio 4.”
To mark the end of an era, later this year Radio 4 will be airing some of Melvyn’s most cherished episodes and there will also be a curated selection on BBC Sounds chosen by some of In Our Time's most notable fans.
In Our Time will be back on Radio 4 with a new presenter who will be announced in due course.
Biography
Melvyn Bragg was born in Wigton, Cumbria in 1939. He went to the local Grammar School and then to Wadham College, Oxford. He joined the BBC in 1961, and published his first novel For Want of a Nail in 1965. By that time he had become a Director on Huw Wheldon’s Arts programme Monitor. He worked with Ken Russell on The Debussy Film and again on The Music Lovers starring Glenda Jackson, and Isadora starring Vanessa Redgrave; he wrote the screenplay for Jesus Christ Superstar and for Play Dirty starring Michael Caine.
He left the BBC and continued to write novels which include The Hired Man (Time Life Silver PEN Award), The Soldier’s Return (WH Smith Literary Award), Without A City Wall (Mail on Sunday John Llewellyn Rhys Prize), A Place In England, Son of War and Crossing The Lines (all three were nominated for The Man Booker Prize), Now Is The Time(Parliamentary Book Award 2016). Howard Goodall wrote a successful musical based on The Hired Man. There have also been non-fiction books – The Adventure of English, The Impact of The King James Bible, On Giants’ Shoulders, Rich: The Life of Richard Burton, William Tyndale: A Very Brief History. Most of his novels are set in his native Cumbria.
In 1977 he started The South Bank Show for LWT which he edited and presented for Sky Arts. He has presented the Radio 4 programme on Science, History and Religion, In Our Time, since 1998.
He is an Honorary Fellow of the Royal Society and of The British Academy. He was given a Peerage in 1998 and a Companion of Honour in 2017.
RB2
Follow for more]]></content:encoded>
        </item>
    </channel>
</rss>