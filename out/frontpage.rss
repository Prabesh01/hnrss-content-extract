<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Wed, 03 Sep 2025 12:16:12 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Dynamo AI (YC W22) Is Hiring for AI Product Managers]]></title>
            <link>https://www.ycombinator.com/companies/dynamo-ai/jobs/tt5OVwf-product-manager-ai</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45114715</guid>
            <description><![CDATA[Product Manager - AI
Location: Remote (US-based preferred)\
Experience: 1+ years in Product Management
About Dynamo AI
Dynamo AI is building the future of trustworthy AI for the enterprise. Our platform provides real-time guardrails, redteaming, and observability for generative AI systems—ensuring safe, compliant, and reliable AI deployments in regulated industries such as financial services, insurance, DoD, and healthcare.
We’re backed by leading partners and rapidly expanding with some of the world’s most sophisticated enterprises.
The Role
We’re seeking an AI Product Manager who will own the vision and execution of new product directions in trustworthy AI. You will work closely with our founders, engineers, and enterprise partners to identify high-impact opportunities, shape product roadmaps, and deliver solutions that set the standard for safe and scalable AI adoption.
This role is ideal for a builder excited to drive the future of AI governance, safety, and compliance.
Responsibilities
Define and lead product strategy for Dynamo AI’s redteaming, guardrails, and observability solutions.
Collaborate with engineering and research teams to translate customer requirements into product roadmaps.
Engage directly with enterprise partners in regulated industries to pilot and deploy solutions.
Monitor AI regulatory and compliance landscapes to ensure our products stay ahead of industry needs.
Drive rapid iteration, from concept to launch, ensuring measurable business and user impact.
Requirements
1+ years of experience in a Product Management role (preferably in enterprise software, AI/ML, or adjacent fields).
Strong communication skills and the ability to work cross-functionally with technical and non-technical stakeholders.
Demonstrated ability to translate complex technologies into actionable product directions.
Entrepreneurial mindset: comfortable with ambiguity, speed, and high-growth environments.
Passion for AI safety, trustworthy AI, and building responsible technology.
Why Join Us
Work at the forefront of generative AI safety and compliance.
Partner with Fortune 500 and leading global enterprises on real-world deployments.
Be part of a fast-moving, founder-led startup with opportunities for outsized impact.
Competitive compensation, equity, and benefits.]]></description>
            <content:encoded><![CDATA[Compliant-Ready AI for the EnterpriseProduct Manager - AI$110K - $150K•San Francisco, CA, US / Remote (US)Job typeFull-timeRoleProductExperience1+ yearsVisaUS citizen/visa onlyApply to Dynamo AI and hundreds of other fast-growing YC startups with a single profile.Apply to role ›About the roleProduct Manager - AI
Location: Remote (US-based preferred)
Experience: 1+ years in Product Management
About Dynamo AI
Dynamo AI is building the future of trustworthy AI for the enterprise. Our platform provides real-time guardrails, redteaming, and observability for generative AI systems—ensuring safe, compliant, and reliable AI deployments in regulated industries such as financial services, insurance, DoD, and healthcare.
We’re backed by leading partners and rapidly expanding with some of the world’s most sophisticated enterprises.
The Role
We’re seeking an AI Product Manager who will own the vision and execution of new product directions in trustworthy AI. You will work closely with our founders, engineers, and enterprise partners to identify high-impact opportunities, shape product roadmaps, and deliver solutions that set the standard for safe and scalable AI adoption.
This role is ideal for a builder excited to drive the future of AI governance, safety, and compliance.
Responsibilities

Define and lead product strategy for Dynamo AI’s redteaming, guardrails, and observability solutions.
Collaborate with engineering and research teams to translate customer requirements into product roadmaps.
Engage directly with enterprise partners in regulated industries to pilot and deploy solutions.
Monitor AI regulatory and compliance landscapes to ensure our products stay ahead of industry needs.
Drive rapid iteration, from concept to launch, ensuring measurable business and user impact.

Requirements

1+ years of experience in a Product Management role (preferably in enterprise software, AI/ML, or adjacent fields).
Strong communication skills and the ability to work cross-functionally with technical and non-technical stakeholders.
Demonstrated ability to translate complex technologies into actionable product directions.
Entrepreneurial mindset: comfortable with ambiguity, speed, and high-growth environments.
Passion for AI safety, trustworthy AI, and building responsible technology.

Why Join Us

Work at the forefront of generative AI safety and compliance.
Partner with Fortune 500 and leading global enterprises on real-world deployments.
Be part of a fast-moving, founder-led startup with opportunities for outsized impact.
Competitive compensation, equity, and benefits.

About Dynamo AIThe enterprise platform for enabling private, secure, and regulation-compliant Gen AI models.Founded:2021Batch:W22Team Size:40Status:ActiveLocation:San FranciscoFoundersChristian LauFounderVaikkunth MugunthanFounderSimilar Jobs]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Tencent Open Sourced a 3D World Model]]></title>
            <link>https://github.com/Tencent-Hunyuan/HunyuanWorld-Voyager</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45114379</guid>
            <description><![CDATA[Voyager is an interactive RGBD video generation model conditioned on camera trajectory, and supports real-time 3D reconstruction. - Tencent-Hunyuan/HunyuanWorld-Voyager]]></description>
            <content:encoded><![CDATA[中文阅读
HunyuanWorld-Voyager

  


  
  


We introduce HunyuanWorld-Voyager, a novel video diffusion framework that generates world-consistent 3D point-cloud sequences from a single image with user-defined camera path. Voyager can generate 3D-consistent scene videos for world exploration following custom camera trajectories. It can also generate aligned depth and RGB video for efficient and direct 3D reconstruction.
🔥🔥🔥 News!!

Sep 2, 2025: 👋 We release the code and model weights of HunyuanWorld-Voyager. Download.


Join our Wechat and Discord group to discuss and find help from us.




Wechat Group
Xiaohongshu
X
Discord











🎥 Demo
Demo Video

  
  
    
    demo.mp4
    
  

  

  



Camera-Controllable Video Generation



Input
Generated Video






  
    
    output.mp4
    
  

  

  






  
    
    output7.mp4
    
  

  

  






  
    
    output9.mp4
    
  

  

  





Multiple Applications

Video Reconstruction




Generated Video
Reconstructed Point Cloud





  
    
    output1.mp4
    
  

  

  



  
    
    output2.mp4
    
  

  

  






Image-to-3D Generation











  
    
    output5.mp4
    
  

  

  



  
    
    output11.mp4
    
  

  

  






Video Depth Estimation











  
    
    depth.mp4
    
  

  

  



  
    
    depth2.mp4
    
  

  

  





☯️ HunyuanWorld-Voyager Introduction
Architecture
Voyager consists of two key components:
(1) World-Consistent Video Diffusion: A unified architecture that jointly generates aligned RGB and depth video sequences, conditioned on existing world observation to ensure global coherence.
(2) Long-Range World Exploration: An efficient world cache with point culling and an auto-regressive inference with smooth video sampling for iterative scene extension with context-aware consistency.
To train Voyager, we propose a scalable data engine, i.e., a video reconstruction pipeline that automates camera pose estimation and metric depth prediction for arbitrary videos, enabling large-scale, diverse training data curation without manual 3D annotations. Using this pipeline, we compile a dataset of over 100,000 video clips, combining real-world captures and synthetic Unreal Engine renders.

  

Performance

  Quantitative comparison on WorldScore Benchmark. 🔴 indicates the 1st, 🟢 indicates the 2nd, 🟡 indicates the 3rd.

  
    
      Method
      WorldScore Average
      Camera Control
      Object Control
      Content Alignment
      3D Consistency
      Photometric Consistency
      Style Consistency
      Subjective Quality
    
  
  
    
      WonderJourney
      🟡63.75
      🟡84.6
      37.1
      35.54
      80.6
      79.03
      62.82
      🟢66.56
    
    
      WonderWorld
      🟢72.69
      🔴92.98
      51.76
      🔴71.25
      🔴86.87
      85.56
      70.57
      49.81
    
    
      EasyAnimate
      52.85
      26.72
      54.5
      50.76
      67.29
      47.35
      🟡73.05
      50.31
    
    
      Allegro
      55.31
      24.84
      🟡57.47
      🟡51.48
      70.5
      69.89
      65.6
      47.41
    
    
      Gen-3
      60.71
      29.47
      🟢62.92
      50.49
      68.31
      🟢87.09
      62.82
      🟡63.85
    
    
      CogVideoX-I2V
      62.15
      38.27
      40.07
      36.73
      🟢86.21
      🔴88.12
      🟢83.22
      62.44
    
    
      Voyager
      🔴77.62
      🟢85.95
      🔴66.92
      🟢68.92
      🟡81.56
      🟡85.99
      🔴84.89
      🔴71.09
    
  
📜 Requirements
The following table shows the requirements for running Voyager (batch size = 1) to generate videos:



Model
Resolution
GPU Peak Memory




HunyuanWorld-Voyager
540p
60GB




An NVIDIA GPU with CUDA support is required.

The model is tested on a single 80G GPU.
Minimum: The minimum GPU memory required is 60GB for 540p.
Recommended: We recommend using a GPU with 80GB of memory for better generation quality.


Tested operating system: Linux

🛠️ Dependencies and Installation
Begin by cloning the repository:
git clone https://github.com/Tencent-Hunyuan/HunyuanWorld-Voyager
cd HunyuanWorld-Voyager
Installation Guide for Linux
We recommend CUDA versions 12.4 or 11.8 for the manual installation.
# 1. Create conda environment
conda create -n voyager python==3.11.9

# 2. Activate the environment
conda activate voyager

# 3. Install PyTorch and other dependencies using conda
# For CUDA 12.4
conda install pytorch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 pytorch-cuda=12.4 -c pytorch -c nvidia

# 4. Install pip dependencies
python -m pip install -r requirements.txt
python -m pip install transformers==4.39.3

# 5. Install flash attention v2 for acceleration (requires CUDA 11.8 or above)
python -m pip install flash-attn

# 6. Install xDiT for parallel inference (It is recommended to use torch 2.4.0 and flash-attn 2.6.3)
python -m pip install xfuser==0.4.2
In case of running into float point exception(core dump) on the specific GPU type, you may try the following solutions:
# Making sure you have installed CUDA 12.4, CUBLAS>=12.4.5.8, and CUDNN>=9.00 (or simply using our CUDA 12 docker image).
pip install nvidia-cublas-cu12==12.4.5.8
export LD_LIBRARY_PATH=/opt/conda/lib/python3.8/site-packages/nvidia/cublas/lib/
To create your own input conditions, you also need to install the following dependencies:
pip install --no-deps git+https://github.com/microsoft/MoGe.git
pip install scipy==1.11.4
pip install git+https://github.com/EasternJournalist/utils3d.git@c5daf6f6c244d251f252102d09e9b7bcef791a38
🧱 Download Pretrained Models
A detailed guidance for downloading pretrained models is shown here. Briefly,
huggingface-cli download tencent/HunyuanWorld-Voyager --local-dir ./ckpts

🔑 Inference
Create Input Condition
We provide several input examples in the examples folder. You can find the corresponding input text in the prompt.txt file. If you'd like to use your own input image, you can run the following command:
cd data_engine

python3 create_input.py --image_path "your_input_image" --render_output_dir "examples/case/" --type "forward"
We provide the following types of camera path:

forward
backward
left
right
turn_left
turn_right
You can also modify the camera path in the create_input.py file.

Single-GPU Inference
cd HunyuanWorld-Voyager

python3 sample_image2video.py \
    --model HYVideo-T/2 \
    --input-path "examples/case1" \
    --prompt "An old-fashioned European village with thatched roofs on the houses." \
    --i2v-stability \
    --infer-steps 50 \
    --flow-reverse \
    --flow-shift 7.0 \
    --seed 0 \
    --embedded-cfg-scale 6.0 \
    --use-cpu-offload \
    --save-path ./results
You can add "--use-context-block" to add the context block in the inference.
Parallel Inference on Multiple GPUs by xDiT
xDiT is a Scalable Inference Engine for Diffusion Transformers (DiTs) on multi-GPU Clusters.
It has successfully provided low-latency parallel inference solutions for a variety of DiTs models, including mochi-1, CogVideoX, Flux.1, SD3, etc. This repo adopted the Unified Sequence Parallelism (USP) APIs for parallel inference of the HunyuanVideo-I2V model.
For example, to generate a video with 8 GPUs, you can use the following command:
cd HunyuanWorld-Voyager

ALLOW_RESIZE_FOR_SP=1 torchrun --nproc_per_node=8 \
    sample_image2video.py \
    --model HYVideo-T/2 \
    --input-path "examples/case1" \
    --prompt "An old-fashioned European village with thatched roofs on the houses." \
    --i2v-stability \
    --infer-steps 50 \
    --flow-reverse \
    --flow-shift 7.0 \
    --seed 0 \
    --embedded-cfg-scale 6.0 \
    --save-path ./results \
    --ulysses-degree 8 \
    --ring-degree 1
The number of GPUs equals the product of --ulysses-degree and --ring-degree. Feel free to adjust these parallel configurations to optimize performance.



    Latency (Sec) for 512x768 (49 frames 50 steps) on 8 x H20 GPU


    1
    2
    4
    8




    1925
    1018 (1.89x)
    534 (3.60x)
    288 (6.69x)




Gradio Demo
We also provide a Gradio demo for the HunyuanWorld-Voyager model.

  

You can run the following command to start the demo:
cd HunyuanWorld-Voyager

python3 app.py
You need to first upload an image and choose a camera direction to create a condition video. Then, you can type your text prompt and generate the final RGB-D video.
⚙️ Data Engine
We also release the data engine of HunyuanWorld-Voyager, which can be used to generate scalable data for RGB-D video training. Please refer to data_engine for more details.

  

🔗 BibTeX
If you find Voyager useful for your research and applications, please cite using this BibTeX:
@article{huang2025voyager,
  title={Voyager: Long-Range and World-Consistent Video Diffusion for Explorable 3D Scene Generation},
  author={Huang, Tianyu and Zheng, Wangguandong and Wang, Tengfei and Liu, Yuhao and Wang, Zhenwei and Wu, Junta and Jiang, Jie and Li, Hui and Lau, Rynson WH and Zuo, Wangmeng and Guo, Chunchao},
  journal={arXiv preprint arXiv:2506.04225},
  year={2025}
}
Acknowledgements
We would like to thank HunyuanWorld, Hunyuan3D-2, and HunyuanVideo-I2V. We also thank VGGT, MoGE, Metric3D, for their open research and exploration.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Energy Dashboard (UK)]]></title>
            <link>https://www.energydashboard.co.uk/map</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45114277</guid>
            <description><![CDATA[Interactive map of of the UK's operational electricity generating stations showing generation technology and installed capacity.]]></description>
            <content:encoded><![CDATA[MapLiveHistoricalMapSupport SiteData SourcesContactAccess DataEnergyDashboardMapLiveHistoricalMapSupport the SiteData SourcesContactAccess the Data]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Microsoft VibeVoice: A Frontier Open-Source Text-to-Speech Model]]></title>
            <link>https://microsoft.github.io/VibeVoice/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45114245</guid>
            <description><![CDATA[📄 Report
        ·
         Code
        ·
        🤗 Hugging Face
        ·
        
           Demo]]></description>
            <content:encoded><![CDATA[

  
  
    
      
      
      
        📄 Report
        ·
         Code
        ·
        🤗 Hugging Face
        ·
        
           Demo
        
      

      
        VibeVoice is a novel framework designed for generating expressive, long-form, multi-speaker conversational audio, such as podcasts, from text. It addresses significant challenges in traditional Text-to-Speech (TTS) systems, particularly in scalability, speaker consistency, and natural turn-taking.
A core innovation of VibeVoice is its use of continuous speech tokenizers (Acoustic and Semantic) operating at an ultra-low frame rate of 7.5 Hz. These tokenizers efficiently preserve audio fidelity while significantly boosting computational efficiency for processing long sequences. VibeVoice employs a next-token diffusion framework, leveraging a Large Language Model (LLM) to understand textual context and dialogue flow, and a diffusion head to generate high-fidelity acoustic details.
The model can synthesize speech up to 90 minutes long with up to 4 distinct speakers, surpassing the typical 1-2 speaker limits of many prior models.
      
      
      
        
        
        
        
      
    
  


  
    Context-Aware Expression

    


    
  

  
    Podcast with Background Music

    

    
  

  
    Cross-Lingual

    

    

  

  
    Long Conversational Speech

    

    
      
      
      * Timestamps are derived from the generated audio and may contain errors.
    

  

  


]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The 16-year odyssey it took to emulate the Pioneer LaserActive]]></title>
            <link>https://www.readonlymemo.com/this-is-the-first-the-16-year-odyssey-of-time-money-wrong-turns-and-frustration-it-took-to-finally-emulate-the-pioneer-laseractive/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45114003</guid>
            <description><![CDATA[In April 2009, a Sega fan decided to look into emulating the Mega LD, a quirky and little-known hybrid of Genesis and LaserDisc. This week he finished the job.]]></description>
            <content:encoded><![CDATA[

    

        

                Newsletter
            
                In April 2009, a Sega fan decided to look into emulating the Mega LD, a quirky and little-known hybrid of Genesis and LaserDisc. This week he finished the job.

            
                
                                
                            
                
                
            

                
        
    

        

        
            Hey there ROM readers! I've got an absolute whopper of a story this issue with a genuine longform dive into the emulation of the LaserActive, plus a bit of backstory on the new fan translation of the Cowboy Bebop game for PS2, plus your usual quick hits on emulator improvements, FPGA happenings and other fan translation progress. That means there's absolutely no more time or space to waste on this intro.LET'S GET TO IT.The Big Two1. The LaserActive "might be the last vintage home console of note which hadn't been emulated," but no longerThe story behind the birth of any new emulator has some common ingredients. Fearsome programming skills; hundreds or thousands of hours of thankless work; the drive to understand exactly how and why a piece of technology works. None of these things come without patience. But lifelong Sega fan Nemesis, who released the first-ever emulator for the Pioneer LaserActive this week — 16 years after first pondering the idea — had no choice but to be patient. Because for most of the last decade, emulating the LaserActive was simply impossible."All along the way, the video made things difficult," he says. "The hardware to capture the signal properly didn’t exist. The software to decode the captured signal properly didn’t exist. And finally, a format to store the decoded video in a form suitable for emulation, also didn’t exist."There's no other game console quite like the Pioneer LaserActive, which was released in 1993, sold abysmally and was dead in the ground by 1996. That's not a unique story for a '90s game system, but the LaserActive kinda... wasn't one. It was a LaserDisc player with an expansion bay that owners could slot different modules into. One transformed the LaserActive into a karaoke machine. Another would give it the guts of a PC Engine. And a third added the brains of a Sega Genesis/Mega Drive, able to play Sega CD games as well as about two dozen made for the short-lived Mega LD.The Mega LD format represented a technological leap over early LaserDisc-based arcade games like Dragon's Lair. The mid-'90s promise of FULL MOTION VIDEO GAMEPLAY may be quaint as hell today, but it's the reason the LaserActive has been impossible to emulate for 30 years. And it still would be today, if Nemesis hadn't spent much of the 21st century proactively collecting Sega hardware and Mega LD games with the goal of one day preserving them. Nemesis's history with both games and emulation started with the Genesis (which I will refer to as the Mega Drive for the rest of this issue, out of respect for his native Australia). After owning a Mega Drive, 32X and Mega CD growing up, he played his first emulator, the Nesticle successor Genecyst, on a Pentium 133 circa 1997. That eventually led to contributing to reverse-engineering and emulation efforts."I did a lot of work on the YM2612 FM chip in the Mega Drive back in 2008 in particular, and a lot of Mega Drive emulators finally had decent FM sound after that as a result," he says. "Sharing that research, seeing the results made use of, and finally hearing the games I remembered from my childhood sound right for the first time, was a really good feeling."In 2004, when buying loads of retro consoles was not yet a universal pasttime for nostalgic millenials and Gen Xers, he paid about $200 for one of the approximately 10,000 LaserActives that Pioneer manufactured in its short life, along with the Mega LD "PAC" module. Throughout the rest of the decade he scooped up every bit of Sega hardware he could get his hands on with an eye towards future reverse-engineering projects, but it wasn't until 2009 when he started thinking: Why isn't there an emulator for the LaserActive?So he did what any retro game fan would do in 2009: started a forum thread about it."This system keeps popping into my mind," he wrote in the thread, which is still online today. "I don't think anyone's had a serious crack at emulating it yet, and I really don't think it would be very hard to do."Well. About that."I honestly feel like I've nearly 'solved' this system half a dozen times over by now," Nemesis says here in 2025."The digital side of the system was actually pretty straightforward. When you break it down, the LaserActive is really more like a big oversized add-on to the console hardware. What that add-on provides is a different drive control interface, another audio source, and another video source, with mixing features to combine that video/audio with the console video/audio. That's really about it. On paper, it's pretty simple. In reality though, the LaserActive hardware did present a lot of challenges, mostly due to its inherent unreliability."1: "Some of the internal mods to the player. This was left over from when I was capturing the 8-bit composite video data, from when I was attempting my own capture efforts in 2016." 2: "The 'MegaLDRegEditor' program I wrote running on the LaserActive. This bootstraps the hardware from a flashcart, and allows me to edit the LaserActive registers live using a control pad. This is what I used to reverse engineer the hardware."With prior experience writing a Genesis emulator of his own, Nemesis originally thought he'd be well-positioned to tackle the LaserActive. But the problem started to pile up immediately. First there were the almost 100 capacitors in the Sega PAC that were guaranteed to fail at some point, causing many to have to be replaced on even a mint condition system. Pioneer's cost-cutting inside the LaserDisc player caused other parts to break, too. Learning to fix the LaserActive was a necessary step to figuring out how it worked.2011 was a year of progress. Nemesis: Coded a program to load onto a Mega Drive flash cart that allowed him to "probe" the LaserActive hardwareDisassembled the system BIOS to identify that "ll the interaction with the LaserActive hardware happened over a custom register block"Coded another program that allowed direct read/write access to those registers using a controllerWith the help of other forumites, mapped most of the registers by comparing the system's actions to the code in the disassembldd BIOS and documented what it was doingThe next two years were focused on figuring out how to rip the LaserActive's games. This involved writing multiple more custom programs and using a special USB-to-MD link cable to copy the digital data from the disc, which contained the game code as well as audio tracks. When that didn't prove to be enough to capture the TOC (or table of contents) data that essentially acted as a guide to how all the data on the disc was organized, he had to go deeper."I soldered a bunch of physical tapping wires into my Sega PAC-S10 module, and used a Saleae logic analyzer clone to do a streaming capture of the data lines when the TOC region was being read, which the hardware didn't make directly available. I wrote a program to parse the bus trace and extract the data from the raw capture and reconstruct the lead-in. At this point, I had everything I needed to rip a full bin/cue image of the digital data from a LaserDisc."In 2014, Nemesis started soliciting other members of the forum where he chronicled the project to send him Mega LD games to dump (shout out to doc eggfan, who acquired most of the library including two Myst prototypes; "if he hadn't done that, there's a good chance they would have been lost forever). With a pile of games in hand, he bought a PC video capture card to rip the audio and video from the discs. And this is where the 2-3 people reading this who have an intimate understanding of the LaserActive will probably reflexively say "uh oh."LaserDisc, despite looking like a jumbo DVD, is an analog video medium. No big deal if you're just capturing a movie. But for a game? Big big deal. Here's the long-form breakdown — skip ahead if you don't want to get way deep into analog-to-digital misery."No analog capture cards of the day were actually up to the task of what we were trying to do. ... The LaserActive has one of the fastest, most powerful control systems for LaserDisc playback ever made, and the game has direct, immediate control over it. Rarely is the player just playing back a video normally. Games will often have completely different video footage per field, with only one shown, or skip over every second frame, to mix four or more video streams in the same area of the disc. Many games use this for seamless 'branching' such as whether you go left or right, and this can change constantly and seamlessly during playback. The unit can play faster or slower, even playing in reverse, such as in Rocket Coaster as you speed up, or slide backwards down a slope. The unit can perform rapid nearly instant seeks with seamless looping, and does for games like Myst. In fact, the entire Myst title is basically using the LaserDisc as a set of random, short transitions, and still images, and other titles do this as well to differing degrees. ...Games used the skip play features to further interleave different video streams at half the framerate between each other. Analog capture cards of the day didn't deal with this well. None of them could compress lossless video, everything was encoded to lossy formats. Most of them would assume a 480i image. This would cause the separate video streams in each field to 'bleed into' each other, destroying the image. The same problem occurred between frames when they had separate video streams interleaved together, where inter-frame compression would cause artifacts from the two streams to bleed together.A high end Canopus capture card I had was the only one that was capable of compressing into huffyuv, not in a lossless form, but at least in a format that prevented this bleeding problem. Unfortunately, this card still had a limitation, in that it couldn't capture the VBI data. It was common in the day for special 'control codes' to be encoded into lines normally hidden on a normal TV, which contained information. In the case of LaserDiscs, it contained frame numbers, timecodes, picture stop codes, video TOC information in the lead-in, and other such data. None of that could be captured by capture cards of the day. For cards that had VBI capture features, they didn't work on LaserDiscs, since LaserDiscs used different lines/formats than other sources, and no capture cards in the world expected to be capturing LaserDisc video.At this point, I felt like I'd hit a bit of a dead end. It could, perhaps, have been possible to cobble something together at this point in 2014, but I felt the result would be poor, and the discs would not have been properly preserved. I decided a different approach was needed for the analog video content, but the technology to do what I needed to do at this point, didn't seem to exist."With an increasingly busy home life thanks to two young kids, a long commute and demanding workload at the office, Nemesis did the only thing that made sense at that point. He put the LaserActive on the shelf.Two years later, he took another stab at it by trying to build his own hardware capture setup. By tapping into the LaserActive directly, he was able to capture a full, raw composite video signal — but it was useless unless he could decode it. Back on the shelf it went for another two years.A house move, shorter commute and more balanced work-life, er, balance, later, Nemesis decided to dust off the LaserActive. Enter the Domesday Duplicator — an open source, community-driven hardware project dedicated to ripping LaserDiscs.Surely this was the capture solution he'd been waiting for. Turns out it was... but not in 2018. A key companion to the Domesday Duplicator, ld-decode, was then still "in its infancy." At the time there was no publicly available software solution to decoding composite video; by the time computers were fast enough to do it without dedicated hardware, analog was donezo. Nemesis went down the path of trying to write his own decoder to mixed results, but when he found out kid #4 was on the way, he decided to wait for the broader community effort to mature.And it did mature by a lot, with both the Duplicator and ld-decode improving process of ripping LaserDiscs in the higest possible quality. But there was still a problem when it came to LaserActive discs — they were interactive games, not static films. In 2020 Nemesis started chipping in to ld-decode:"I started pushing for the need to add extra features into the decode process. Until then, focus had been entirely around the requirements of capturing movies on LaserDiscs, as you'd expect. LaserActive games needed more though. I needed a way to capture the full lead-in, which stored the TOC data for both the analog video and the digital data. If you're just ripping a LaserDisc to an mp4, you don't need this info, but we do for emulation. I also needed the full 525 lines of NTSC video, with VBI data. That was stripped by ld-decode, they just cared about the visible region you'd see on a TV. I needed to deal with mixed-mode 'CD' images in the digital data track. They just needed audio tracks to work. I needed to be able to play through picture stop codes seamlessly without corrupting the audio data, they didn't need to worry about that. All kinds of things like this added up, to mean that ld-decode increasingly worked great for regular LaserDiscs, but still wasn't checking all the boxes for LaserActive games."Before he could fully commit to adding those features himself, COVID upended everything and the LaserActive went back into storage."This is from 2019, showing the old digital ripping process where I stream the data over the second control port."2024: 15 years after he'd first suggested emulating the LaserActive didn't seem like it'd be that tricky, set up in a new house with a new workspace, Nemesis finally vowed to finish what he'd started.It was a year of whirlwind activity: Using the LaserActive's test mode and a custom firmware mod he developed to properly capture the lead-in and lead-out from every discRewriting the flaky USB capture code for the Domesday Duplicator's capture program to ensure error-free ripsExpanding the program's capabilities to record more data about the disc itself, the player, and the signal qualityRewriting ld-decode's digital audio decoding, which had issues with drifting out of sync with the video, and finally making it possible to parse the TOC dataImproving the video decoding to output full frame data, with all 525 lines of NTSC video and the VBI data"With all these bits in place, I was now able to rip discs and extract the actual contents in a form suitable for emulation," Nemesis says. 2024 ticked over to 2025, and he began removing LaserActive games from the sleeves they'd rested within for decades undisturbed. Most of them had been bought new and never opened; for years he'd resisted the urge, not wanting to risk even a tiny accidental scratch until everything was ready.After so many years and so many obstacles, the final mile was, at long last, an easy run:"Most of the work reverse engineering the hardware I'd already done and published notes on over 13 years prior. I sat down and implemented the emulation code according to my notes, double checking things on the hardware as I went using the same testing program I'd written all those years ago, and filling the gaps in my notes for parts I hadn't fully mapped out. Space Berserker was quickly running, and after that, as more games finished decoding most of them worked on the first try, with no issues. Since I'd set out to emulate the complete hardware, with all its quirks and unusual features, whatever a game tried to do, it should just work. A few games flushed out some things I'd missed here and there, but mostly it was just fixing bugs in my implementation, until after a few weeks, everything was fully working in the emulator, just the same way it did on the hardware."Nemesis decided to write his LaserActive emulation as a component of multi-system emualtor Ares, partially out of respect for its late creator, Near. Its existing Mega Drive support made for an easy starting point, and current Ares maintainer Luke Usher had actually done some ground work to support the Mega LD in the future by creating a "skeleton" that defined it in relation to the Mega Drive and CD."It was all sitting there, just needed the actual code to be written to emulate the LaserActive hardware," Nemesis says. "I'd never touched the Ares code before, but having this delivered to me is what allowed me to get the basics of drive control to have Mega CD games booting in days, from work over a few evenings. Without that, there's a good chance I wouldn't have started when I did."There's one final wrinkle to LaserActive emulation, and that's the disc image files themselves. Basically, they're huge, in the dozens of gigabytes range. And that, again, is because the way LaserActive games utvi makes them allergic to compression. They may want to jump to specific frames in an instant, play backwards, or interleave frames, all of which means a specific moment in time needs to be a keyframe, not a compressed, modified frame that only contains the small amount of data that's changed from the frame before it, which is how video files are greatly reduced in size. You could still compress a LaserActive game to about 10GB per size with every frame preserved as a keyframe..."That still isn’t suitable though, as heavyweight video codecs are too intensive to decode alongside emulating an entire Mega Drive + MegaCD in realtime without involving hardware decoding," Nemesis says. "In order to keep everything running at 60fps, you have to be able to do everything in under 16ms per frame. Using hardware decoding would take decoding burden off the CPU, but the video mixing with the graphics output from the Mega Drive now becomes more complex, and you also now place specific GPU requirements on any system that’s going to try and play these games."So they stuck to a lossless format that preserves quality and takes the pressure off the CPU (and puts none at all on a graphics card). Any system that can currently run Ares should have no trouble with the LaserActive, with the caveat that you'll definitely want to have these mondo files on an SSD rather than an old spinning platter to avoid any issues with read speeds."This is a fully decoded single frame of video from one of the Myst prototypes. Normally for NTSC video, you'd expect two 'fields' each with half the lines of the full frame, which get interleaved together to make the whole image. For LaserActive titles, often two completely different video streams are stored in each field."Ares v146, released on August 26, marked the first time a Mega LD game has been playable on another system. And it represents a milestone in game preservation that could've easily been missed — due to indifference, the literal string of inventions it took to make it a reality, or the inexorable march of time. "There are other titles I don’t have access to at all, however I’m in discussions with a number of people who have offered to loan discs to help complete the dumping efforts," Nemesis says. "It’s been great to see people step up and offer to help. It’s vital this is done now, because Laserdisc titles don’t last forever. I have one disc in my possession that was a new, sealed copy, pressed in 1994, which is suffering from laser-rot. It’s likely that eventually, all Laserdiscs will be rendered unplayable, so we need to ensure these games are preserved now, while we still can."He's now looking into the prospect of preserving the PC Engine PAC, which will — fingers crossed — not be too much more complicated than plugging Ares' existing PC Engine CD code into the new LaserActive code. But that's a story for another day. For now, the emulation code being out in the wild represents relief most of all. "It was a long journey, with a lot of false starts and wrong turns getting to that point," Nemesis says. "A lot of it was work and time which nobody else had been able to see. I don't keep a blog. I don't tend to share the various steps I take to make something or get something working, I only tend to reach out when I have something to share or when I'm asking for help from other people."A lot of my time and energy had gone into this system over the years, and it was good to finally be able to show something for all that work."💸If you enjoy ROM, I'd love it if you'd consider a small tip to help me cover my monthly costs. (Follow the link and click 'change amount' to whatever you want).2. Let's kick the beat: a Cowboy Bebop video game in English at long lastIf there was any anime game you'd think had a sure shot at being released in English in the early 2000s, how could it be anything but Cowboy Bebop? The breakthrough "not every anime is Dragon Ball Z" series was a huge hit on Cartoon Network, channeled the American jazz of Art Blakey, and even saw a then-rare theatrical run for its movie spin-off. But neither its PlayStation 1 or PlayStation 2 games ever made it out of Japan.*Hard bop drum roll*...Until now! I'm delighted that translator Sonicman69, along with an anonymous hacker, has brought the PS2 beat 'em up Cowboy Bebop: Tsuioku no Serenade to English players to celebrate the game's 20th anniversary. Regular ROM readers may remember Sonicman69's translation of a Detective Conan PlayStation 2 game featured last year, both prime examples of a period when games based on popular anime were still far from a sure thing localization-wise.Well, for Conan that may unfortunately still be the case, as I don't know if the boy-sized genius has ever really made it in America. But I'm pretty sure a Cowboy Bebop game released in 2025 would be targeting English-speaking audiences even before Japanese ones. As I theorized earlier this week on PC Gamer, Tsuioku no Serenade's developer Bandai merging with Namco right around the time this game was being released may be the culprit — the ensuing corporate chaos of layoffs and reorganizations could easily have killed it in the cradle.I haven't had a chance to play Tsuioku no Serenade myself despite being lucky enough to track down a (seemingly somewhat rare, now) copy, but general consensus is it's an okay brawler but quite a nice little Bebop sidestory with some handsome late-era PS2 graphics. And there's original Yoko Kanno music, so, like, what else do you really want?I reached out to translator Sonicman69 for a bit of insight into the translation effort, who first watched Bebop around 2014 and learned later that the game had never been released in English. "From that exact moment I felt like I could be the one to do it," he said. "Keep in mind at this time I knew maybe three words in Japanese and was still in high school. Big expectations. I figured someone else would get around to it eventually."But they didn't, so after off-and-on attempts to learn Japanese and gaining some translation and editing experience contributing to the Conan patch, he set sights on Bebop with the aim of finishing the patch by the game's 20th anniversary:I'd say the most challenging thing that people don't really think about is how often text would be reused at different points in the game. Trying to figure out a translation for a sentence that works in one context that also has to work in another — Conan had this a little bit but it was a lot more annoying with Bebop and frankly I don't think I nailed it. Aside from that the interstitials between scenes are poetic and I'm still a Japanese novice and have no poetic ability at all so I had a tough time at those and I think they came out kind of bad.I am admittedly a little apologetic about the quality of the translation, I've received unanimous praise so far but I know I could have done better if I studied more but if I didn't translate the game now it would have never happened at all. What I'm most proud of aside from the fact we actually got it done and released it in time for the 20th anniversary? People keep telling me I did a good job writing the lines for the characters in a way that stays true to how they talked in the English dub of the show. I'm hesitant to accept that since I'm pretty critical of it myself but if I really was able to capture the characters then I did my job."Sonicman69 also argues that the game is "not a simple button mashing beat 'em up due to how deep the combat actually is," but some annoying tutorials and the language barrier made it easy to write off. Take it from the person who's beaten it a dozen times: it's worth playing. "As far as how well the story captures the vibe of the show I think they did a pretty admirable job, but obviously it's never going to get anywhere near the best scenes from the show. Any Bebop fan who wishes there was just a little bit more to chew on should at least enjoy the game a little bit. Especially the bonus mode you unlock after completing the game on normal but I don't want to spoil too much."You can find the English patch on Github and throw a few bucks to Sonicman69 on Ko-fi if you appreciate getting to spend a little more time in the Bebopverse after all these years.Patching InSometimes emudev is all about fixing a texture issue in Colin McRae Rally 2005 – I always try to look into random Github commits with names I don't understand to see what they're all about, and sometimes PCSX2 being update to "Handle texture shuffle with pixel reversals" is just about adding some code to ignore when a game is flipping pixels horizontally and then flipping them back again because it screwed things up. Specifically it screwed up the roads in Colin McRae Rally 2005, and seemingly only Colin McRae Rally 2005.bsnes updated with latest version of SameBoy – I think it's wonderful that Near's Super Nintendo emulator is still being maintained, and this is a nice update. bsnes uses an integrated version of SameBoy for accurate Super Game Boy emulation, but it was out of date with that emulator's continued development. No longer! All synced up.Deeply customizable PC emulator 86Box hits 5.0 – If you want to create a virtual PC down to the motherboard, sound card, and BIOS you had on the family PC back in like 1996, 86Box is your jam. And it's just gotten its first meaty release since September 2024, with version 5.0 including a lengthy list of additions and fixes plus "a preview for one of the most requested 86Box features of all time: an integrated machine manager to organize all your emulated setups." Other highlights: "much smoother" mouse input and display output on high refresh monitors; support for CRT emulation shader effects; new systems including some early Japanese PC-compatibles; and dark mode support on Windows.Core ReportCall me Mr. Turbo CD + Graphics – The MiSTer's PC Engine / Turbografx core just got a notable update with work from contributor David Shadoff that's been gestating for the last few months: support for CD+G, "a special audio CD that contains graphics data in addition to the audio data on the disc," according to Sega Retro. "The disc can be played on a regular audio CD player, but when played on a special CD+G player, can also output a graphics signal. CD+G is most commonly seen used for karaoke and slideshows."The MiSTer's Commodore 64 core now also notably supports writing to Easyflash carts and "Waterloo Structured BASIC and BMP-Data Turbo 2000."Surprise! (Attack) – Jotego dropped a core for this Konami arcade sidescroller for MiSTer and Analogue Pocket this week, along with a bit of deserved braggadocio about nailing some specific graphic effects that aren't correctly emulated in MAME. Sweat those details! Also, I'd just like to point out that Surprise Attack has some absolutely sick flyer artwork.Surprise Attack lands on #MiSTerFPGA and #PocketFPGA with the correct transparency effect implemented. This effect is currently missing on emulators. pic.twitter.com/6aNMgSU8uC— jotego (@topapate) August 29, 2025
Translation StationSword & Sorcery & English – You might think Bebop would be a big enough deal that the Translation Station could take the rest of the week off, but nope — trains are still runnin'! Hit the link for a making-of at great fansite Sega Saturn Shiro from one of the contributors to this project for the 1996 JRPG. Note that it's an in-progress patch, rather than a finished one you'll want to leap to play right now; this is more of a "get excited" mention (and a fun read) which I'll no doubt circle back to in the future.Psychic Killer, Fa-fa-fa-fa, fa-fa-fa-fa – It's a Shiro two-fer this week! This translation of Psychic Killer Taromaru is a 1.0 you can grab on Github and was cranked out in just a month using Saturn emulator Yaba Sanshiro. It's a sidescrilling action game in which you, a ninja, "fire psychic energy at demons to save a kidnapped girl in feudal Japan," says Shiro. The translation was inspired by this video from Dungeon Chill, who called it a hidden gem. Well, it ain't hidden anymore. You can see it right here. Not very subtle, ninja.If you ever wanted to play Clock Tower on the WonderSwan... – Then here's a translation for you. This patch ports the Aeon Genesis team's translation over to the WonderSwan release of the original Super Nintendo horror game. Maybe it's scarier in low-res black and white?Good pixelsEnough already! We're done.
            
        
    
            
                    Sign up for Read Only Memo
                    Videogame emulation news and exclusive interviews, from the aesthetics of razor sharp scanlines to the wild technical challenges of making yesterday's games run on tomorrow's hardware.
                    
        
        
                    No spam. Unsubscribe anytime.
                
        
        

    

        

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Finding thousands of exposed Ollama instances using Shodan]]></title>
            <link>https://blogs.cisco.com/security/detecting-exposed-llm-servers-shodan-case-study-on-ollama</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45113418</guid>
            <description><![CDATA[We uncovered 1,100+ exposed Ollama LLM servers—20% with open models—revealing critical security gaps and the need for better LLM threat monitoring.]]></description>
            <content:encoded><![CDATA[
		
The rapid deployment of large language models (LLMs) has introduced significant security vulnerabilities due to misconfigurations and inadequate access controls. This paper presents a systematic approach to identifying publicly exposed LLM servers, focusing on instances running the Ollama framework. Utilizing Shodan, a search engine for internet-connected devices, we developed a Python-based tool to detect unsecured LLM endpoints. Our study uncovered over 1,100 exposed Ollama servers, with approximately 20% actively hosting models susceptible to unauthorized access. These findings highlight the urgent need for security baselines in LLM deployments and provide a practical foundation for future research into LLM threat surface monitoring.



Introduction



The integration of large language models (LLMs) into diverse applications has surged in recent years, driven by their advanced capabilities in natural language understanding and generation. Widely adopted platforms such as ChatGPT, Grok, and DeepSeek have contributed to the mainstream visibility of LLMs, while open-source frameworks like Ollama and Hugging Face have significantly lowered the barrier to entry for deploying these models in custom environments. This has led to widespread adoption by both organizations and individuals of a broad range of tasks, including content generation, customer support, data analysis, and software development.



Despite their growing utility, the pace of LLM adoption has often outstripped the development and implementation of appropriate security practices. Many self-hosted or locally deployed LLM solutions are brought online without adequate hardening, frequently exposing endpoints due to default configurations, weak or absent authentication, and insufficient network isolation. These vulnerabilities are not only a byproduct of poor deployment hygiene but are also symptomatic of an ecosystem that has largely prioritized accessibility and performance over security. As a result, improperly secured LLM instances present an expanding attack surface, opening the door to risks such as:




Unauthorized API Access — Many ML servers operate without authentication, allowing anyone to submit queries.



Model Extraction Attacks — Attackers can reconstruct model parameters by querying an exposed ML server repeatedly.



Jailbreaking and Content Abuse — LLMs like GPT-4, LLaMA, and Mistral can by manipulated to generate restricted content, including misinformation, malware code, or harmful outputs.



Resource Hijacking (ML DoS Attacks) — Open AI models can be exploited for free computation, leading to excessive costs for the host.



Backdoor Injection and Model Poisoning — Adversaries could exploit unsecured model endpoints to introduce malicious payloads or load untrusted models remotely.




This work investigates the prevalence and security posture of publicly accessible LLM servers, with a focus on instances utilizing the Ollama framework, which has gained popularity for its ease of use and local deployment capabilities. While Ollama enables flexible experimentation and local model execution, its deployment defaults and documentation do not explicitly emphasize security best practices, making it a compelling target for analysis.



To assess the real-world implications of these concerns, we leverage the Shodan search engine to identify exposed Ollama servers and evaluate their security configurations. Our investigation is guided by three primary contributions:




Development of a proof-of-concept tool, written in Python, to detect exposed Ollama servers through Shodan queries



Analysis of identified instances evaluate authentication enforcement, endpoint exposure, and model accessibility



Recommendations for mitigating common vulnerabilities in LLM deployments, with a focus on practical security improvements




Our findings reveal that a significant number of organizations and individuals expose their LLM infrastructure to the internet, often without realizing the implications. This creates avenues for misuse, ranging from resource exploitation to malicious prompt injection and data inference.



Methodology



The proposed system utilizes Shodan, a search engine that indexes internet-connected devices, to identify potentially vulnerable AI inference servers. This approach was selected with privacy and ethical considerations in mind, specifically to avoid the risks associated with directly scanning remote systems that may already be exposed or improperly secured. By relying on Shodan’s existing database of indexed endpoints, the system circumvents the need for active probing, thereby reducing the likelihood of triggering intrusion detection systems or violating acceptable use policies.



In addition to being more ethical, leveraging Shodan also provides a scalable and efficient mechanism for identifying LLM deployments accessible over the public internet. Manual enumeration or brute-force scanning of IP address ranges would be significantly more resource-intensive and potentially problematic from both legal and operational perspectives.



The system operates in two sequential stages. In the first stage, Shodan is queried to identify publicly accessible Ollama servers based on distinctive network signatures or banners. In the second stage, each identified endpoint is programmatically queried to assess its security posture, with a particular focus on authentication and authorization mechanisms. This includes evaluating whether endpoints require credentials, enforce access control, or expose model metadata and functionality without restriction.



An overview of the system architecture is illustrated in Figure 1, which outlines the workflow from endpoint discovery to vulnerability analysis.







Fig. 1: Design of LLM vulnerability checker










Our approach focuses on identifying deployments of popular LLM hosting tools by scanning for default ports and service banners associated with each implementation. Below we provide a list of LLM platforms examined and their associated default ports, which are used as heuristics for identification:




Ollama / Mistral / LLaMA models — Port 11434



vLLM — Port 8000



llama.cpp — Ports 8000, 8080



LM Studio — Port 1234



GPT4All — Port 4891



LangChain — Port 8000




Using the Shodan API, the system retrieves metadata for hosts operating on these ports, including IP addresses, open ports, HTTP headers, and service banners. To minimize false positives, such as unrelated applications using the same ports, the developed system performs an additional filtering step based on banner content. For example, Ollama instances are verified using keyword matching against the service banner (e.g., port:11434 “Ollama”), which increases confidence that the endpoint is associated with the targeted LLM tooling rather than an unrelated application using the same port.



During analysis, we identified an additional signature that enhanced the accuracy of fingerprinting Ollama deployments. Specifically, a significant proportion of the discovered Ollama instances were found to be running the Uvicorn ASGI server, a lightweight, Python-based web server commonly employed for serving asynchronous APIs. In such cases, the HTTP response headers included the field Server: “uvicorn”, which functioned as a valuable secondary indicator, particularly when the service banner lacked an explicit reference to the Ollama platform. Conversely, our research also indicates that servers running Uvicorn are more likely to host LLM applications as this Python-based web server appears to be popular among software used for self-hosting LLMs.



This observation strengthens the resilience of our detection methodology by enabling the inference of Ollama deployments even in the absence of direct product identifiers. Given Uvicorn’s widespread use in Python-based microservice architectures and AI inference backends, its presence, especially when correlated with known Ollama-specific ports (e.g., 11434) substantially increases the confidence level that a host is serving an LLM-related application. A layered fingerprinting approach improves the precision of our system and reduces reliance on single-point identifiers that may be obfuscated or omitted.



The banner-based fingerprinting method draws from established principles in network reconnaissance and is a widely accepted approach in both academic research and penetration testing contexts. According to prior work in internet-wide scanning, service banners and default ports provide a reliable mechanism for characterizing software deployments at scale, albeit with limitations in environments employing obfuscation or non-standard configurations.



By combining port-based filtering with banner analysis and keyword validation, our system aims to strike a balance between recall and precision in identifying genuinely exposed LLM servers, thus enabling accurate and responsible vulnerability assessment.







Fig. 2: Pseudocode Capturing the Logic of the Proposed System






Authorization and Authentication Assessment



Once a potentially vulnerable Ollama server is identified, we initiate a series of automated API queries to determine whether access controls are in place and whether the server responds deterministically to standardized test inputs. This evaluation specifically assesses the presence or absence of authentication enforcement and the model’s responsiveness to benign prompt injections, thereby providing insight into the system’s exposure to unauthorized use. To minimize operational risk and ensure ethical testing standards, we employ a minimal, non-invasive prompt structure as follows:



A successful HTTP 200 response accompanied by the correct result (e.g., “4”) indicates that the server is accepting and executing prompts without requiring authentication. This represents a high-severity security issue, as it suggests that arbitrary, unauthenticated prompt execution is possible. In such cases, the system is exposed to a broad range of attack vectors, including the deployment and execution of unauthorized models, prompt injection attacks, and the deletion or modification of existing assets.



Moreover, unprotected endpoints may be subjected to automated fuzzing or adversarial testing using tools such as Promptfoo or Garak, which are designed to probe LLMs for unexpected behavior or latent vulnerabilities. These tools, when directed at unsecured instances, can systematically uncover unsafe model responses, prompt leakage, or unintended completions that may compromise the integrity or confidentiality of the system.



Conversely, HTTP status codes 401 (Unauthorized) or 403 (Forbidden) denote that access controls are at least partially enforced, often through default authentication mechanisms. While such configurations do not guarantee full protection, particularly against brute-force or misconfiguration exploits, they substantially reduce the immediate risk of casual or opportunistic exploitation. Nonetheless, even authenticated instances require scrutiny to ensure proper isolation, rate limiting, and audit logging, as part of a comprehensive security posture.



Findings



The results from our scans confirmed the initial hypothesis: a significant number of Ollama servers are publicly exposed and vulnerable to unauthorized prompt injection. Utilizing an automated scanning tool in conjunction with Shodan, we identified 1,139 vulnerable Ollama instances. Notably, the discovery rate was highest in the initial phase of scanning, with over 1,000 instances detected within the first 10 minutes, highlighting the widespread and largely unmitigated nature of this exposure.



Geospatial analysis of the identified servers revealed a concentration of vulnerabilities in several major regions. As depicted in Figure 3, the majority of exposed servers were hosted in the United States (36.6%), followed by China (22.5%) and Germany (8.9%). To protect the integrity and privacy of affected entities, IP addresses have been redacted in all visual documentation of the findings.







Fig. 3: Tool findings on exposed LLM Server Analysis






Out of the 1,139 exposed servers, 214 were found to be actively hosting and responding to requests with live models—accounting for approximately 18.8% of the total scanned population with Mistral and LLaMA representing the most frequently encountered deployments. A review of the least common model names was also conducted, revealing what appeared to be primarily self-trained or otherwise customized LLMs. In some instances, the names alone provided enough information to identify the hosting party. To safeguard their privacy, tha names of these models have been excluded from the findings. These interactions confirm the feasibility of prompt-based interaction without authentication, and thus the risk of exploitation.



Conversely, the remaining 80% of detected servers, while reachable via unauthenticated interfaces, did not have any models instantiated. These “dormant” servers, though not actively serving model responses, remain susceptible to exploitation via unauthorized model uploads or configuration manipulation. Importantly, their exposed interfaces could still be leveraged in attacks involving resource exhaustion, denial of service, or lateral movement.



An additional observation was the widespread adoption of OpenAI-compatible API schemas across disparate model hosting platforms. Among the discovered endpoints, 88.89% adhered to the standardized route structure used by OpenAI (e.g., v1/chat/completions), enabling simplified interoperability but also creating uniformity that could be exploited by automated attack frameworks. This API-level homogeneity facilitates the rapid development and deployment of malicious tooling capable of interacting with multiple LLM providers with minimal modification.



These findings showcase a critical and systemic vulnerability in the deployment of LLM infrastructure. The ease with which these servers can be located, fingerprinted, and interacted with raises urgent concerns regarding operational security, access control defaults, and the potential for widespread misuse in the absence of robust authentication and model access restrictions.



Limitations



While the proposed system effectively identified a substantial number of exposed Ollama servers, several limitations should be acknowledged that may impact the completeness and accuracy of the results.



First, the detection process is inherently limited by Shodan’s scanning coverage and indexing frequency. Only servers already discovered and cataloged by Shodan can be analyzed, meaning any hosts outside its visibility, due to firewalls, opt-out policies, or geographical constraints remain undetected.



Secondly, the system relies on Shodan’s fingerprinting accuracy. If Ollama instances are configured with custom headers, reverse proxies, or stripped HTTP metadata, they may not be correctly classified by Shodan, leading to potential false negatives.



Third, the approach targets default and commonly used ports (e.g., 11434), which introduces a bias toward standard configurations. Servers running on non-standard or intentionally obfuscated ports are likely to evade detection entirely.



Finally, the analysis focuses exclusively on Ollama deployments and does not extend to other LLM hosting frameworks. While this specialization enhances precision within a narrow scope, it limits generalizability across the broader LLM infrastructure landscape.



Mitigation Strategies



The widespread exposure of unauthenticated Ollama servers highlights the urgent need for standardized, practical, and layered mitigation strategies aimed at securing LLM infrastructure. Below, we propose a set of technical and procedural defenses, grounded in best practices and supported by existing tools and frameworks.



Enforce Authentication and Access Control



The most critical step in mitigating unauthorized access is the implementation of robust authentication mechanisms. Ollama instances, and LLM servers in general, should never be publicly exposed without requiring secure API key-based or token-based authentication. Preferably, authentication should be tied to role-based access control (RBAC) systems to limit the scope of what users can do once authenticated.




Recommendation: Enforce API key or OAuth2-based authentication



Tools/References: OAuth 2.0 Framework OWASP API Security Top 10




Network Segmentation and Firewalling



Publicly exposing inference endpoints over the internet, particularly on default ports, dramatically increases the likelihood of being indexed by services like Shodan. LLM endpoints should be deployed behind network-level access controls, such as firewalls, VPCs, or reverse proxies, and restricted to trusted IP ranges or VPNs.




Recommendation: Use security groups, firewalls, and private subnets to isolate LLM services



Tools/References: AWS Security Best Practices, Zero Trust Architecture




Rate Limiting and Abuse Detection



To prevent automated abuse and model probing, inference endpoints should implement rate limiting, throttling, and logging mechanisms. This can hinder brute-force attacks, prompt injection attempts, or resource hijacking.




Recommendation: Integrate API gateways (e.g., Kong, Amazon API Gateway) to enforce limits and monitor anomalous behavior



Tools/References: OWASP Rate Limiting Guide, Grafana for Monitoring




Disable Default Ports and Obfuscate Service Banners



Default ports (e.g., 11434 for Ollama) make fingerprinting trivial. To complicate scanning efforts, operators should consider changing default ports and disabling verbose service banners in HTTP responses or headers (e.g., removing “uvicorn” or “Ollama” identifiers).




Recommendation: Modify default configurations to suppress identifiable metadata



Tools/References: Nginx reverse proxy configuration, systemd hardening




Secure Model Upload and Execution Pipelines



Ollama and similar tools support dynamic model uploads, which, if unsecured, present a vector for model poisoning or backdoor injection. Model upload functionality should be restricted, authenticated, and ideally audited. All models should be validated against a hash or verified origin before execution.




Recommendation: Use content whitelisting, digital signatures, or harsh verification for uploaded models



Tools/References: Model Card Toolkit, Secure Supply Chain principles from SLSA




Continuous Monitoring and Automated Exposure Audits



Operators should implement continuous monitoring tools that alert when LLM endpoints become publicly accessible, misconfigured, or lack authentication. Scheduled Shodan queries or custom scanners can help detect regressions in deployment security.




Recommendation: Use automated tools like Project Discovery’s naabu, or write custom Shodan monitoring scripts



Tools/References: Project Discovery Tools, Shodan Alert API




Conclusion



This study reveals a concerning landscape of insecure large language model deployments, with a particular focus on Ollama-based servers exposed to the public internet. Through the use of Shodan and a purpose-built detection tool, we identified over 1,100 unauthenticated LLM servers, a substantial proportion of which were actively hosting vulnerable models. These findings highlight a widespread neglect of fundamental security practices such as access control, authentication, and network isolation in the deployment of AI systems.



The uniform adoption of OpenAI-compatible APIs further exacerbates the issue, enabling attackers to scale exploit attempts across platforms with minimal adaptation. While only a subset of the exposed servers were found to be actively serving models, the broader risk posed by dormant yet accessible endpoints cannot be understated. Such infrastructure remains vulnerable to abuse through unauthorized model execution, prompt injection, and resource hijacking. Our work underscores the urgent need for standardized security baselines, automated auditing tools, and improved deployment guidance for LLM infrastructure.



Looking ahead, future work should explore the integration of multiple data sources, including Censys, ZoomEye, and custom Nmap-based scanners to improve discovery accuracy and reduce dependency on a single platform. Additionally, incorporating adaptive fingerprinting and active probing techniques could enhance detection capabilities in cases where servers use obfuscation or non-standard configurations. Expanding the system to identify deployments across a wider range of LLM hosting frameworks, such as Hugging Face, Triton, and vLLM, would further increase coverage and relevance. Finally, non-standard port detection and adversarial prompt analysis offer promising avenues for refining the system’s ability to detect and characterize hidden or evasive LLM deployments in real-world environments.















We’d love to hear what you think! Ask a question and stay connected with Cisco Security on social media.



Cisco Security Social Media



LinkedInFacebookInstagramX
   
	Share:
	
	
  	]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Amazonq.nvim: Official AWS AI Assistant Plugin for Neovim]]></title>
            <link>https://github.com/awslabs/amazonq.nvim</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45113251</guid>
            <description><![CDATA[Neovim Plugin for Amazon Q Developer. Contribute to awslabs/amazonq.nvim development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[Neovim plugin for Amazon Q Developer
This plugin integrates Amazon Q Developer with Neovim, providing Chat functionality, Inline Code Suggestions, and other Amazon Q capabilities. After installation, authenticate through IAM Identity Center or AWS Builder ID. You can use Amazon Q for free without an AWS account by authenticating with Builder ID.
Requirements

NodeJS >=18
Neovim >=0.10.4

Quick Start

Install the plugin using your preferred method (see Installation Options)
Configure the plugin in your Neovim config:
require('amazonq').setup({
  ssoStartUrl = 'https://view.awsapps.com/start', -- Authenticate with Amazon Q Free Tier
})

Run :AmazonQ from any file to start using the plugin

Installation Options
Minimal Manual Installation
To install and use the plugin, you only need to clone this repo and add in to Neovim runtimepath location:
-- Add the plugin to Neovim's runtimepath
vim.cmd[[set runtimepath+=/path/to/amazonq.nvim]]

-- Configure the plugin
require('amazonq').setup({
  ssoStartUrl = 'https://view.awsapps.com/start', -- Authenticate with Amazon Q Free Tier
})

See Configuration to configure other settings.

By default the plugin will look for node on your $PATH. To set an explicit location, set cmd.




Run :AmazonQ from any file.
Optional: Code completions are provided by the "textDocument/completion" LSP method, which "just works" with most autocompletion plugins.

Note: completion is limited to supported filetypes.
See Code Completions.



Using vim-plug
local Plug = vim.fn['plug#']
vim.call('plug#begin')
Plug 'git@github.com:awslabs/amazonq.nvim.git'
vim.call('plug#end')

require('amazonq').setup({
  ssoStartUrl = 'https://view.awsapps.com/start', -- Authenticate with Amazon Q Free Tier
})
Using lazy.nvim
See install instructions
-- plugins.lua
return {
  {
    name = 'amazonq',
    url = 'https://github.com/awslabs/amazonq.nvim.git',
    opts = {
      ssoStartUrl = 'https://view.awsapps.com/start',  -- Authenticate with Amazon Q Free Tier
    },
  },
}
Authentication to Amazon Q Developer
You can authenticate using one of two methods:

Amazon Q Free Tier: Use AWS Builder ID with the URL https://view.awsapps.com/start
Amazon Q Developer Pro: Use the start URL provided by your administrator

Configure authentication by setting the ssoStartUrl value in your setup:
require('amazonq').setup({
  ssoStartUrl = 'https://view.awsapps.com/start', -- For Free Tier with AWS Builder ID
  -- OR
  -- ssoStartUrl = 'your-organization-sso-url', -- For Pro subscription
})
Usage
The plugin provides a single global :AmazonQ command and zq mapping:



Command/Mapping
Description




:AmazonQ
Open Amazon Q chat window


zq
Select text, then type zq to append it to the chat context. Equivalent to: select text, type :AmazonQ, then run the command.


:AmazonQ refactor
Select code, then run this to get refactoring suggestions


:.AmazonQ fix
Fix only the current line (the standard "." range means "current line")


:%AmazonQ optimize
Optimize the entire contents of the current file


:AmazonQ explain
Explain the current file



For complete documentation, see :help amazonq-usage and :help amazonq-chat.
Configuration
Below are the available configuration options with their default values. Only ssoStartUrl is required. See :help amazonq-config
for details.
require('amazonq').setup({
  -- REQUIRED: SSO portal URL for authentication
  ssoStartUrl = 'https://view.awsapps.com/start',
  -- OR
  -- ssoStartUrl = 'your-organization-sso-url', -- For Pro subscription

  -- Command to start Amazon Q Language Server
  -- Defaults to the language server bundled with this plugin
  cmd = { 'node', 'language-server/build/aws-lsp-codewhisperer-token-binary.js', '--stdio' },
  
  -- Filetypes where the Q will be activated
  -- See: https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/q-language-ide-support.html
  -- `amazonq` is required for Q Chat feature.
  filetypes = {
      'amazonq', 'bash', 'java', 'python', 'typescript', 'javascript', 'csharp', 
      'ruby', 'kotlin', 'sh', 'sql', 'c', 'cpp', 'go', 'rust', 'lua',
  },

  -- Enable/disable inline code suggestions
  inline_suggest = true,

  -- Configure the chat panel position and appearance
  on_chat_open = function()
    vim.cmd[[
      vertical topleft split
      set wrap breakindent nonumber norelativenumber nolist
    ]]
  end,

  -- Enable debug mode for development
  debug = false,
})
Inline Code Suggestions
Amazon Q provides AI-powered code suggestions as you type. These are implemented through the LSP textDocument/completion method and work with most Neovim completion plugins (nvim-cmp, blink, mini.completion, etc.).
To use inline suggestions:

Authenticate with :AmazonQ login
Start typing in a supported filetype
Trigger completion using your completion plugin's keybinding

Inline suggestions are enabled by default. To disable them:
require('amazonq').setup({
  -- Other settings...
  inline_suggest = false,
})
For plugin-specific configuration, see :help amazonq-config-completion.
Troubleshooting
Checking Language Server Status
To verify the language server is running:
:checkhealth vim.lsp
This shows if the server is attached to the current file and displays the path to the log file (e.g. /local/home/$user/.local/state/nvim/lsp.log).
Enabling Debug Logs
To see detailed communication between the plugin and Language Server:
vim.lsp.set_log_level('debug')
Common Issues

If the plugin isn't working, ensure NodeJS >=18 is installed and in your PATH
For authentication issues, verify your ssoStartUrl is correct
For filetype-specific problems, check that the filetype is in your filetypes configuration

Development
To develop this plugin, you probably want to add it to the Nvim 'runtimepath' so that you can test your changes easily. In that case, remove it from your plugin manager config.


Clone amazonq.nvim package locally:
git clone git@github.com:awslabs/amazonq.nvim.git



Remove amazonq.nvim from your plugin manager config, if necessary.


Add the amazonq.nvim package to the Nvim 'runtimepath'. This tells Nvim to look for plugins at that path.
vim.cmd[[set runtimepath+=/path/to/amazonq.nvim]]


You can now use the amazonq plugin located in the amazonq.nvim package path. You can make edits, restart Nvim to test them, open Pull Requests, etc.
require('amazonq').setup({
  ssoStartUrl = 'https://view.awsapps.com/start',
  debug = true, -- Enable debug mode during development
})


See develop.md for more implementation details of plugin and language server.
Debugging

To debug the LSP server, see https://github.com/aws/language-servers/blob/main/CONTRIBUTING.md#with-other-clients

Logging

To enable logging, pass debug=true to require('amazonq').setup{}.
Logs are written to vim.fs.joinpath(vim.fn.stdpath('log'), 'amazonq.log')
Nvim also produces its own vim.lsp logs by default.

Enable DEBUG log-level for Nvim lsp (hint: put this in a workspace-local .nvim.lua file and enable the :help 'exrc' option):
vim.lsp.set_log_level('debug')


File: :lua =vim.lsp.log.get_filename()
Logs produced by Amazon Q Language server will appear there as "window/logMessage" messages:
"window/logMessage", … "Runtime: Initializing runtime without encryption", type = 3 } }
"window/logMessage", … "Runtime: Registering IAM credentials update handler", type = 3 } }
"window/logMessage", … "Runtime: Registering bearer credentials update handler", type = 3 } }
...
"window/logMessage", … "Q Chat server has been initialized", type = 3 } }
"window/logMessage", … "SSO Auth capability has been initialised", type = 3 } }
"window/logMessage", … "Auth Device command called", type = 3 } }
"window/logMessage", … 'Resolved SSO token {"accessToken":"…","expiresAt":"2025-01-21T21:44:20.631Z",…}',…} }
"window/logMessage", … "Received chat prompt", type = 3 } }
"window/logMessage", … "Request for conversation id: New conversation", type = 3 } }





Code Formatting and Linting
Code is formatted using stylua and linted using selene.
Currently it's not automated, you must run it manually:

Install the required tools:

stylua:

macOS: brew install stylua
win/linux: https://github.com/JohnnyMorganz/StyLua/releases


selene:

macOS: brew install selene
win/linux: https://github.com/Kampfkarren/selene/releases




Run (from the top level directory):


To check files both selene and stylua in check mode:
make lint


To format files with stylua:
make format




Implementation

Inline suggestions are provided by creating a in-process LSP shim client is named amazonq-completion.

This is a temporary measure until Q LSP provides this out of the box.
Vim has a known limitation where it replaces newlines \n in multiline completions with NUL bytes, which it renders as ^@.
amazonq.nvim works around this by replacing the NUL bytes in a CompleteDone event-handler.



Experimental Status and Contributions
The Neovim plugin for Amazon Q Developer is in experimental state.
We welcome contributions and feedback! See Contributing Guide for details on contributing feedback, feature requests, and bug reports.
Security
See CONTRIBUTING for more information.
License
This project is licensed under the Apache-2.0 License.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AI is going great for the blind (2023)]]></title>
            <link>https://robertkingett.com/posts/6230/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45113043</guid>
            <description><![CDATA[As I was looking at the amount of times platforms died on the web and I began thinking about the slow death of AI enthusiasm and what that will do to the Blind community.]]></description>
            <content:encoded><![CDATA[
	

	
	
		As I was looking at the amount of times platforms died on the web and I began thinking about the slow death of AI enthusiasm and what that will do to the Blind community.
It really is a bizarre feeling when you’re the only skeptic of a thing within your own community. My first post about AI has gained some attention, as well as the follow up post about this topic. AI is taking the blind community by storm. Be my Eyes has added it into their product to describe pictures, Let’s not mention the fact the particular large language model, LLM called Chat GPT they chose, was never the right kind of machine learning for the task of describing images. A different kind of machine learning would have been better. Blind podcasters are praising LLMs and saying they’re more accurate than human descriptions, and, well, blind voiceover artists are more than willing to give places like ElevenLabs their voices so they can, well, I don’t even know yet. I guess attempt to make audiobooks.
I’m of two minds about this whole thing. While the stuff LLMs is giving us is incorrect information, it’s still information that the sighted world won’t or refuses to give us. While I absolutely hate the hype and even AI nonsense in general, and don’t use any LLM on any of my content, blind and visually impaired people can become audio book narrators if their Braille skills aren’t that great with ElevenLabs.
Even though I’ll never hire a blind narrator that uses ElevenLabs to generate an audio book, am I practicing discrimination by doing this? Someone will say yes. I don’t know what will come of this wave in LLMs and dependance on AI, but I predict that once the hype dies down, well, blind and even legally blind people are probably going to be advocating for more accessibility measures but in a different way.
AI accessibility will have its own challenges. In fact, we’re already witnessing instances of AI developers forgetting disabled people exist so I fully predict that blind people will be advocating to make actual LLM platforms accessible. While that’s a fight that won’t happen for a while, I also predict that the actual text output of some of these generators will be inaccessible, prompting another push to make these interfaces usable by everyone. I also predict web accessibility will actually get worse, not better, as coding models will spit out inaccessible code that developers won’t check or won’t even care to check. But I’m the only one within the community that’s unenthusiastic about the benefits of AI within our community.
I’m old enough to remember when OCR became a huge hit to play video games, scan inaccessible documents, and otherwise. While I also use OCR for speed and efficiency, or just even to get halfway there, I still use a human to read stuff because, even today, OCR isn’t where I thought it was going to be. Same for self-driving cars. Now that AI is a thing now, I doubt OCR and even self-driving cars will get any significant advancements.
About usage, well, that’s what blind people are using LLMs for at this very moment. They’re using it to describe characters from TV shows and movies in great detail. they’re using it to describe music videos, but to the blind and visually impaired people that use these tools, they aren’t so much caring about the accuracy of the information. It’s information they’ve never had previously. Accuracy is an afterthought. The only thing that matters is having information that they never had previously. Then again, these are the very same blind and visually impaired people that say that the Social model of Disability is woke PC nonsense, so it’s no surprise that the community as a whole would jump on the LLM hype. The blind and visually impaired people advocating for this have been conditioned to believe that technology will solve all accessibility problems because, simply put, humans won’t do it. Humans won’t care. Humans are inefficient squishy things that live in a completely different, subjective, world. Blind and visually impaired people don’t want to wade through a subjective landscape. Objectivity matters to our community, no matter the cost of accuracy.
Another reason the Blind community is enthusiastic about AI is simply because, to other blind people, it makes them feel like less of a burden on society and vastly more independent. With an LLM, it will never get annoyed, aggravated, think less of the person, or similar. Humans have been conditioned to think we are useless because we are blind so any help we ask for is viewed as a job or a chore rather than a chance to make someone’s life easier.
Also, most blind people don’t have a sighted person around because sighted people never willingly talk to a blind person just because. An LLM will always be there, well, until the servers go down, but this isn’t even a concern yet within the community and I don’t think it will be a thought until an AI server goes down the same way bionic eye servers shut down.
Even though I don’t use AI or LLMs and even though I do have in person and remote friends I can get assistance from without feeling as if I’m wasting their life, I’m also thinking about how our community has just replaced being dependent on humans with being dependent on tech and technology. I wonder, though, what will be the next technology thing our community clings to because humans fail us again, and again, and again, and again. Humans still continuously actually say no to accessibility when designing websites, so it’s also no wonder why some blind and visually impaired people are championing AI accessibility toolbars like AccessiBe. The web is inaccessible, and, with every refusal of our basic access needs, it’s no wonder the community has given up on humans and dove headfirst into putting faith in another algorithm.
My stance is very unique within the community. Have I used these tools to describe a picture when no human was around? Of course. I’ve used it to describe memes now that the Say my Meme podcast appears to have stopped updating. I’ve used it to get a starting point on pictures. It’s the same with OCR. Even though I’ve used these tools, I just don’t think they are even worth half the hype. In fact, even today, there are incidences happening where AI is starting to look like Web3 hype nonsense. The Facebook thing got rid of their responsible AI team, search engines are useless because AI junk is flooding results now, small search engines are becoming very popular, indicating people are tired of this new wave of content. OpenAI can’t decide if it wants to fire people or bring them back because of ethics over growth, and Tech billionaires keep strategizing to make even more money off their own hype.
There are many more examples of AI going very wrong and basically even making people very angry that big tech is stealing their labor, but I’ll leave you with the best podcast to debunk all the AI hype and nonsense. Well, okay, two podcasts. Tech Won’t Save Us, which is basically a podcast that detests tech and tech culture in general, and my personal favorite, Mystery AI Hype Theater 3000, a podcast that debunks all the AI hype.
Meanwhile, I’ll be reading personal blogs and the small web because the indieweb is cozy and because personal websites won’t die as often nor as quickly as the rest of the web. Tootles!
			

	
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kernel-hack-drill and exploiting CVE-2024-50264 in the Linux kernel]]></title>
            <link>https://a13xp0p0v.github.io/2025/09/02/kernel-hack-drill-and-CVE-2024-50264.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45112996</guid>
            <description><![CDATA[Some memory corruption bugs are much harder to exploit than others. They can involve race conditions, crash the system, and impose limitations that make a researcher's life difficult. Working with such fragile vulnerabilities demands significant time and effort. CVE-2024-50264 in the Linux kernel is one such hard bug, which received the Pwnie Award 2025 as the Best Privilege Escalation. In this article, I introduce my personal project kernel-hack-drill and show how it helped me to exploit CVE-2024-50264.]]></description>
            <content:encoded><![CDATA[
        

  

  
    Some memory corruption bugs are much harder to exploit than others. They can involve race conditions, crash the system, and impose limitations that make a researcher's life difficult. Working with such fragile vulnerabilities demands significant time and effort. CVE-2024-50264 in the Linux kernel is one such hard bug, which received the Pwnie Award 2025 as the Best Privilege Escalation. In this article, I introduce my personal project kernel-hack-drill and show how it helped me to exploit CVE-2024-50264.

Bug collision story

I first found a bug in AF_VSOCK back in 2021 and published the article Four Bytes of Power: Exploiting CVE-2021-26708 in the Linux kernel. In April 2024, I was fuzzing this kernel subsystem with a customized syzkaller and found another crash in AF_VSOCK. I minimized the crash reproducer and disabled KASAN. This resulted in an immediate null-ptr-deref in a kernel worker (kworker). Convinced the path forward would be painful, I shelved the bug. This was a wrong decision.

Later, in autumn 2024, I decided to look at this bug again and got promising results. Then, one calm evening, I realized I'd collided with Hyunwoo Kim (@v4bel) and Wongi Lee (@qwerty): they'd already disclosed the bug as CVE-2024-50264 and used it at kernelCTF. Their patch turned my PoC exploit into a null-ptr-deref:




Anyone who has dealt with a bug collision can imagine what I felt. I was wondering whether to keep digging into this vulnerability or just give it up.

Viktor Vasnetsov: Vityaz at the Crossroads (1882)


The exploit strategy by @v4bel and @qwerty looked very complicated. I had other ideas, so I decided to continue my research. I chose Ubuntu Server 24.04 with a fresh OEM/HWE kernel (v6.11) as the target for my PoC exploit.

CVE-2024-50264 analysis

The vulnerability CVE-2024-50264 was introduced in August 2016 by commit 06a8fc78367d in Linux v4.8. It is a race condition in AF_VSOCK sockets that happens between the connect() system call and a POSIX signals, resulting in a use-after-free (UAF). An unprivileged user can trigger this bug without user namespaces, which makes it more dangerous.

The kernel uses a freed virtio_vsock_sock object. Its size is 80 bytes, which is suitable for the kmalloc-96 slab cache. The memory corruption is a UAF write executed by a kernel worker.

However, this vulnerability also brings a bunch of nasty limitations for exploitation. I can say that it's the worst bug to exploit I've ever seen. The Pwnie Award is well-deserved. I'll outline those constraints shortly.

Reproducing the bug using an "immortal signal"

First, an attacker should create a listening virtual socket (server vsock):
int ret = -1;
int vsock1 = 0;

vsock1 = socket(AF_VSOCK, SOCK_STREAM, 0);
if (vsock1 < 0)
	err_exit("[-] creating vsock");

ret = bind(vsock1, (struct sockaddr *)&addr, sizeof(struct sockaddr_vm));
if (ret != 0)
	err_exit("[-] binding vsock");

ret = listen(vsock1, 0); /* backlog = 0 */
if (ret != 0)
	err_exit("[-] listening vsock");


Then the attacker should try to open a connection from a client vsock:
#define UAF_PORT 0x2712

int vsock2 = 0;
struct sockaddr_vm addr = {
	.svm_family = AF_VSOCK,
	.svm_port = UAF_PORT,
	.svm_cid = VMADDR_CID_LOCAL
};

vsock2 = socket(AF_VSOCK, SOCK_STREAM, 0);
if (vsock2 < 0)
	err_exit("[-] creating vsock");

ret = connect(vsock2, (struct sockaddr *)&addr, sizeof(struct sockaddr_vm));


To trigger the bug, the attacker should interrupt this connect() system call with a POSIX signal. @v4bel & @qwerty used SIGKILL, but that kills the exploit process. My fuzzer stumbled on a cleaner trick that surprised me:

struct sigevent sev = {};
timer_t race_timer = 0;

sev.sigev_notify = SIGEV_SIGNAL;
sev.sigev_signo = 33;
ret = timer_create(CLOCK_MONOTONIC, &sev, &race_timer);


My fuzzer discovered that a timer can fire signal 33 and interrupt connect(). Signal 33 is special. The Native POSIX Threads Library (NPTL) keeps it for internal work and the operating system quietly shields applications from it. As man 7 nptl explains:


  NPTL makes internal use of the first two real-time signals (signal numbers 32 and 33).
One of these signals is used to support thread cancellation and POSIX timers (see timer_create(2));
the other is used as part of a mechanism that ensures all threads in a process always have
the same UIDs and GIDs, as required by POSIX. These signals cannot be used in applications.


True, these signals cannot be used in applications, but they are perfect for my exploit 😉




I use timer_settime() for race_timer, which lets me choose the exact moment signal 33 interrupts connect(). Moreover, the signal is invisible to the exploit process and doesn't kill it.

About memory corruption

The race condition succeeds when a signal interrupts the connect() system call while the vulnerable socket is in the TCP_ESTABLISHED state. The socket then drops into the TCP_CLOSING state:

if (signal_pending(current)) {
	err = sock_intr_errno(timeout);
	sk->sk_state = sk->sk_state == TCP_ESTABLISHED ? TCP_CLOSING : TCP_CLOSE;
	sock->state = SS_UNCONNECTED;
	vsock_transport_cancel_pkt(vsk);
	vsock_remove_connected(vsk);
	goto out_wait;
}


The second attempt to connect the vulnerable vsock to the server vsock using a different svm_cid (VMADDR_CID_HYPERVISOR) provokes memory corruption.

struct sockaddr_vm addr = {
	.svm_family = AF_VSOCK,
	.svm_port = UAF_PORT,
	.svm_cid = VMADDR_CID_HYPERVISOR
};

/* this connect will schedule the kernel worker performing UAF */
ret = connect(vsock2, (struct sockaddr *)&addr, sizeof(struct sockaddr_vm));


Under the hood, the connect() system call executes vsock_assign_transport(). This function switches the virtual socket to the new svm_cid transport and frees the resources tied to the previous vsock transport:
if (vsk->transport) {
	if (vsk->transport == new_transport)
		return 0;

	/* transport->release() must be called with sock lock acquired.
	 * This path can only be taken during vsock_connect(), where we
	 * have already held the sock lock. In the other cases, this
	 * function is called on a new socket which is not assigned to
	 * any transport.
	 */
	vsk->transport->release(vsk);
	vsock_deassign_transport(vsk);
}


This procedure closes the old vsock transport in virtio_transport_close() and frees the virtio_vsock_sock object in virtio_transport_destruct(). However, due to the erroneous TCP_CLOSING state of the socket, virtio_transport_close() initiates further communication. To handle that activity, the kernel schedules a kworker that eventually calls virtio_transport_space_update(), which operates on the freed structure:

static bool virtio_transport_space_update(struct sock *sk, struct sk_buff *skb)
{
	struct virtio_vsock_hdr *hdr = virtio_vsock_hdr(skb);
	struct vsock_sock *vsk = vsock_sk(sk);
	struct virtio_vsock_sock *vvs = vsk->trans; /* ptr to freed object */
	bool space_available;

	if (!vvs)
		return true;

	spin_lock_bh(&vvs->tx_lock); /* proceed if 4 bytes are zero (UAF write non-zero to lock) */
	vvs->peer_buf_alloc = le32_to_cpu(hdr->buf_alloc); /* UAF write 4 bytes */
	vvs->peer_fwd_cnt = le32_to_cpu(hdr->fwd_cnt); /* UAF write 4 bytes */
	space_available = virtio_transport_has_space(vsk); /* UAF read, not interesting */
	spin_unlock_bh(&vvs->tx_lock); /* UAF write, restore 4 zero bytes */
	return space_available;
}


The following diagram shows the layout of the UAF in the vulnerable object:




Here in yellow I show the tx_lock field that must be zero. Otherwise, the kernel hangs while trying to acquire the spinlock. In red I show the peer_buf_alloc and peer_fwd_cnt fields that are overwritten after the object is freed. There is no pointer dereference in the freed object.

The value written to virtio_vsock_sock.peer_buf_alloc can be controlled from the userspace:

/* Increase the range for the value that we want to write during UAF: */
uaf_val_limit = 0x1lu; /* can't be zero */
setsockopt(vsock1, PF_VSOCK, SO_VM_SOCKETS_BUFFER_MIN_SIZE,
           &uaf_val_limit, sizeof(uaf_val_limit));
uaf_val_limit = 0xfffffffflu;
setsockopt(vsock1, PF_VSOCK, SO_VM_SOCKETS_BUFFER_MAX_SIZE,
           &uaf_val_limit, sizeof(uaf_val_limit));

/* Set the 4-byte value that we want to write during UAF: */
setsockopt(vsock1, PF_VSOCK, SO_VM_SOCKETS_BUFFER_SIZE,
           &uaf_val, sizeof(uaf_val));


The field virtio_vsock_sock.peer_fwd_cnt tracks how many bytes have been pushed through vsock using sendmsg()/recvmsg(). It is zero by default (four zero bytes).

Not so fast. CVE-2024-50264 has limitations

As I mentioned earlier, this vulnerability has a lot of nasty limitations for the exploitation:


  The vulnerable virtio_vsock_sock client object is allocated together with the server object from the same slab cache. That disturbs cross-cache attacks.
  Reproducing this race condition is very unstable.
  The UAF write occurs in a kworker a few microseconds after kfree(), too quickly for typical cross-cache attacks.
  A null-ptr-deref in the kworker follows the UAF write. That's why I shelved the bug at first.
  Even if that kernel oops is avoided, another null-ptr-deref occurs in the kworker after VSOCK_CLOSE_TIMEOUT (eight seconds).
  The kworker hangs in spin_lock_bh() if virtio_vsock_sock.tx_lock is not zero, as noted above.


I uncovered each obstacle one by one while developing the PoC exploit for CVE-2024-50264. It remains the worst bug to exploit I've ever seen. I guess that's why it received the Pwnie Award 2025 as the Best Privilege Escalation.




First thoughts on exploit strategy

The exploit strategy by @v4bel and @qwerty was complex:


  A large-scale BPF JIT spray that filled a significant portion of physical memory
  The SLUBStick technique from Graz University of Technology, which allowed to:
    
      Determine the number of objects in the active slab using a timing side channel
      Then, place the client and server virtio_vsock_sock objects in different slabs, landing one at the end of its slab and the other at the start of the next slab
    
  
  The Dirty Pagetable technique, which allowed to use the UAF object for overwriting a page table entry (PTE)
  Modifying a PTE to make it possibly point to a BPF JIT region
  Inserting a privilege-escalation payload into the BPF code
  Communicating via a socket to execute the privilege-escalation payload.





I felt I could make the PoC exploit for CVE-2024-50264 much simpler. My first thought was to steer the UAF write into some victim object and build a useful exploit primitive around it.

I decided not to search victim objects inside the kmalloc-96 slab cache. Ubuntu Server 24.04 ships with kconfig options that neutralize naive heap spraying for UAF exploitation:

  CONFIG_SLAB_BUCKETS=y, which creates a set of separate slab caches for allocations with user-controlled data
  CONFIG_RANDOM_KMALLOC_CACHES=y. Here's a quote from the kernel documentation about it:
    
      It is a hardening feature that creates multiple copies of slab caches for normal kmalloc allocation and makes kmalloc randomly pick one based on code address, which makes the attackers more difficult to spray vulnerable memory objects on the heap for the purpose of exploiting memory vulnerabilities.
    
  


That's why I decided to perform the cross-cache attack anyway.

The first victim object I decided to try was struct cred. Its size is 184 bytes, and the kernel allocates these objects in slabs of size 192 bytes. That would allow only two possible offsets of the UAF in the victim cred, because slabs for the vulnerable virtio_vsock_sock have size 96 bytes (half of 192). The diagram below shows how two vulnerable virtio_vsock_sock objects overlap the cred object. The memory corruption may happen on one of the virtio_vsock_sock objects.




Unfortunately, struct cred reallocated at the place of the freed virtio_vsock_sock objects doesn't provide anything useful for the attacker:

  If the UAF happened on the first virtio_vsock_sock, the kernel would hang in spin_lock_bh(), because cred has a non-null uid value at the place of virtio_vsock_sock.tx_lock.
  If the UAF happened on the second virtio_vsock_sock, writing controlled data to virtio_vsock_sock.peer_buf_alloc would corrupt the cred.request_key_auth pointer. I had no idea how to use it without a prior infoleak.


The cred object didn't work for me, so I started to search for the next candidate. My next victim object for the memory corruption was msg_msg. I like this object: I first used it for heap spraying in 2021 (you can find the details in the article "Four Bytes of Power: Exploiting CVE-2021-26708 in the Linux kernel").

It was a novel approach back then. This time, I set out to create something new again.

I chose a 96-byte msg_msg because the slab allocator would use slabs of the same size for this msg_msg and virtio_vsock_sock. That would allow the UAF write to land at a fixed offset in the victim msg_msg object. The following diagram shows what happens with the msg_msg object allocated at the place of the freed virtio_vsock_sock:




The msg_msg.m_list.prev is the kernelspace pointer to the previous object in the linked list. This pointer is zero when msg_msg is created (see CONFIG_INIT_ON_ALLOC_DEFAULT_ON) and then it is initialized with a non-null value when msg_msg is inserted into the message queue. Unfortunately, this non-null pointer is interpreted as virtio_vsock_sock.tx_lock. That makes the virtio_transport_space_update() function hang while executing spin_lock_bh().

To bypass this restriction, I needed the kernel to initialize msg_msg.m_list.prev after the UAF write. I looked for a way to postpone placing msg_msg in the message queue and eventually found the solution.

msg_msg spray allowing m_list field corruption (novel technique)


  I filled the message queue almost completely before sending the target msg_msg.
    
      The message queue size is MSGMNB=16384 bytes.
      I sent 2 clogging messages of 8191 bytes each without calling the msgrcv() syscall.
      Only 2 bytes were left in the queue.
      I used mtype = 1 for these messages.
    
  
  Then I performed spraying by calling msgsnd() for the target msg_msg objects.
    
      I called the msgsnd() syscall in separate pthreads and used mtype = 2 for these messages to distinguish them from the clogging messages.
      The kernel allocates target msg_msg and then blocks msgsnd() in ipc/msg.c while it waits for space in the message queue:
    

     	if (msg_fits_inqueue(msq, msgsz))
 		break;
    
 	/* queue full, wait: */
 	if (msgflg & IPC_NOWAIT) {
 		err = -EAGAIN;
 		goto out_unlock0;
 	}
    
 	/* enqueue the sender and prepare to block */
 	ss_add(msq, &s, msgsz);
    
 	if (!ipc_rcu_getref(&msq->q_perm)) {
 		err = -EIDRM;
 		goto out_unlock0;
 	}
    
 	ipc_unlock_object(&msq->q_perm);
 	rcu_read_unlock();
 	schedule();


    
    
  
  
    While the msgsnd() syscalls were waiting for space in the message queue, I performed the UAF write corrupting the m_list, m_type, and m_ts fields of one of the target msg_msg objects.
  
  
    After the UAF write, I called msgrcv() for type 1 clogging messages.
  
  Then the blocked msgsnd() syscall woke up to add the sprayed msg_msg to the queue and the kernel fixed the corrupted m_list field:
     	if (!pipelined_send(msq, msg, &wake_q)) {
 		/* no one is waiting for this message, enqueue it */
 		list_add_tail(&msg->m_list, &msq->q_messages);
 		msq->q_cbytes += msgsz;
 		msq->q_qnum++;
 		percpu_counter_add_local(&ns->percpu_msg_bytes, msgsz);
 		percpu_counter_add_local(&ns->percpu_msg_hdrs, 1);
 	}

  


Cool! This technique is also useful for blind overwriting of msg_msg using the out-of-bounds write. No kernel infoleak is needed. The kernel restores the corrupted m_list pointers. In my particular case, this approach allowed me to avoid virtio_transport_space_update() hanging in spin_lock_bh():




To implement the UAF write into an msg_msg object, I needed to perform cross-cache attack turning virtio_vsock_sock into msg_msg. On Ubuntu Server 24.04, the virtio_vsock_sock objects live in one of 16 kmalloc-rnd-?-96 slab caches enabled by CONFIG_RANDOM_KMALLOC_CACHES. The msg_msg objects live in a dedicated msg_msg-96 slab cache enabled by CONFIG_SLAB_BUCKETS.

To implement the cross-cache attack, I needed to learn how these attacks work on the latest Ubuntu kernel, but testing exploit primitives together with this crazy race condition was really painful. Then, I got an idea:


  If an unstable race condition creates problems, let's use a testing ground for developing the exploit primitives!




Back in 2017, I created a pet project for my students called kernel-hack-drill. It provides a test environment for learning and experimenting with Linux kernel exploits. I remembered it and decided to use kernel-hack-drill to develop the exploit primitives for CVE-2024-50264.

kernel-hack-drill is an open-source project published under the GPL-3.0 license. It contains the following parts:

  drill_mod.c is a small Linux kernel module that provides the /proc/drill_act file as a simple interface to userspace. This module contains vulnerabilities that you can control and experiment with.
  drill.h is a header file describing the drill_mod.ko interface:
    enum drill_act_t {
	DRILL_ACT_NONE = 0,
	DRILL_ACT_ALLOC = 1,
	DRILL_ACT_CALLBACK = 2,
	DRILL_ACT_SAVE_VAL = 3,
	DRILL_ACT_FREE = 4,
	DRILL_ACT_RESET = 5
};
  
#define DRILL_ITEM_SIZE 95
  
struct drill_item_t {
	unsigned long foobar;
	void (*callback)(void);
	char data[]; /* C99 flexible array */
};
  
#define DRILL_N 10240

  
  drill_test.c is a userspace test for drill_mod.ko that provides the examples of using /proc/drill_act. This test doesn't provoke memory corruptions in drill_mod.ko and it passes if CONFIG_KASAN=y.
  README.md includes a detailed step-by-step setup guide on how to use kernel-hack-drill (kudos to the contributors!).


Fun fact: when I chose the name kernel-hack-drill for this project, I used the word drill to mean training or workout for Linux kernel security. My friends and students read it differently. They thought I meant something like this:




The kernel-hack-drill project is a bit similar to KRWX, but much simpler. Moreover, it ships with ready-made PoC exploits:

  drill_uaf_callback.c: a UAF exploit that invokes a callback inside a freed drill_item_t structure. It hijacks control flow and gains LPE.
  drill_uaf_w_msg_msg.c: a UAF exploit that writes into a freed drill_item_t. It uses a cross-cache attack and overwrites msg_msg.m_ts enabling out-of-bounds reading of the kernel memory. I wrote this PoC while working on the bug described in this article.
  drill_uaf_w_pipe_buffer.c: a UAF exploit that writes into a freed drill_item_t. It performs a cross-cache attack and overwrites pipe_buffer.flags to implement the Dirty Pipe technique and gain LPE. This PoC exploit was also developed during my experiments with CVE-2024-50264.


Recent contributions added new variants (kudos to the contributors!):

  drill_uaf_callback_rop_smep.c: an improved version of drill_uaf_callback.c that adds a ROP chain to bypass SMEP on x86_64.
  drill_uaf_w_pte.c: a UAF exploit that writes to a freed drill_item_t. It performs a cross-allocator attack and overwrites a page table entry (PTE) to implement the Dirty Pagetable technique and gain LPE on x86_64.
  drill_uaf_w_pud.c: an improved version of __drill_uaf_w_pte.c__ that overwrites a page upper directory (PUD) instead of a PTE and implements the Dirty Pagetable attack via huge pages.


When I revisited kernel-hack-drill during my CVE-2024-50264 work, this spare-time project hadn't seen an update in years. But now kernel-hack-drill offers a solid set of resources that Linux kernel security researchers can explore.

Experimenting with cross-cache attack using kernel-hack-drill

My first step was to learn how cross-cache attacks behave on the latest Ubuntu kernel with slab allocator hardening turned on.

I implemented a standard cross-cache attack in drill_uaf_w_msg_msg.c. You can see the full code in the repository, so I'll sketch the flow here. For background, I highly recommend Andrey Konovalov's talk SLUB Internals for Exploit Developers.

To plan the attack, I pulled the needed info from /sys/kernel/slab. The slab caches that hold virtio_vsock_sock (80 bytes) or drill_item_t (95 bytes) each keep 120 slabs in per-CPU partial lists (cpu_partial=120) and 42 objects in each slab (objs_per_slab=42).

The cross-cache attack algorithm:

  Allocate objs_per_slab objects to create a fresh active slab. Active slab is the slab that will be used by the kernel for the next allocation.
  Allocate objs_per_slab * cpu_partial objects. This creates the cpu_partial number of full slabs that will later populate the partial list at step 6.
  Create a slab that contains the UAF object. Allocate objs_per_slab objects and keep a dangling reference to the vulnerable object in that slab.
  Create a new active slab again: allocate objs_per_slab objects. This step is very important for keeping the cross-cache attack stable. Otherwise, the slab with the vulnerable object remains active and cannot be reclaimed by the page allocator.
  Completely free the slab that holds the UAF object. To do that, free (objs_per_slab * 2 - 1) of the objects allocated just before the last one. The active slab now contains only the last object, and the slab with the UAF object becomes free and moves to the partial list.
  Fill up the partial list: free one of each objs_per_slab objects in the reserved slabs from step 2. That makes the slab allocator clean up the partial list and move the free slab containing the UAF object to the page allocator.
  Reclaim the page that contained the UAF object for another slab cache: spray the target msg_msg objects. As a result, one msg_msg is allocated where the vulnerable object (drill_item_t in my case) used to be.
  Exploit the UAF! Overwrite msg_msg.m_ts to read kernel memory out of bounds.


I've seen plenty of publications that cover cross-cache attack, but none of them explain how to debug it. I'll fill that gap.

Let's examine the attack in drill_uaf_w_msg_msg.c. To watch it in action and debug it, make the following tweaks in your kernel sources:
diff --git a/mm/slub.c b/mm/slub.c
index be8b09e09d30..e45f055276d1 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -3180,6 +3180,7 @@ static void __put_partials(struct kmem_cache *s, struct slab *partial_slab)
        while (slab_to_discard) {
                slab = slab_to_discard;
                slab_to_discard = slab_to_discard->next;
+               printk("__put_partials: cache 0x%lx slab 0x%lx\n", (unsigned long)s, (unsigned long)slab);
 
                stat(s, DEACTIVATE_EMPTY);
                discard_slab(s, slab);

diff --git a/ipc/msgutil.c b/ipc/msgutil.c
index c7be0c792647..21af92f531d6 100644
--- a/ipc/msgutil.c
+++ b/ipc/msgutil.c
@@ -64,6 +64,7 @@ static struct msg_msg *alloc_msg(size_t len)
        msg = kmem_buckets_alloc(msg_buckets, sizeof(*msg) + alen, GFP_KERNEL);
        if (msg == NULL)
                return NULL;
+       printk("msg_msg 0x%lx\n", (unsigned long)msg);
 
        msg->next = NULL;
        msg->security = NULL;


In __put_partials() I print the address of the slab that returns to the page allocator when discard_slab() runs. In alloc_msg() I print the kernel address of each newly allocated msg_msg object.

When the cross-cache attack succeeds, the slab that held drill_item_t objects is handed back to the page allocator and then reused for msg_msg objects. Running the PoC exploit drill_uaf_w_msg_msg makes this visible, as we observe:

  In the kernel log:
    [   32.719582] drill: kmalloc'ed item 5123 (0xffff88800c960660, size 95)

  
  Then in stdout:
    [+] done, current_n: 5124 (next for allocating)
[!] obtain dangling reference from use-after-free bug
[+] done, uaf_n: 5123

  
  Then in GDB (using with bata24/gef):
    gef> slab-contains 0xffff88800c960660
[+] Wait for memory scan
slab: 0xffffea0000325800
kmem_cache: 0xffff888003c45300
base: 0xffff88800c960000
name: kmalloc-rnd-05-96  size: 0x60  num_pages: 0x1

  
  Finally, in the kernel log:
    [   36.778165] drill: free item 5123 (0xffff88800c960660)
...
[   36.807956] __put_partials: cache 0xffff888003c45300 slab 0xffffea0000325800
...
[   36.892053] msg_msg 0xffff88800c960660

  


We see the drill_item_t object 0xffff88800c960660 in slab 0xffffea0000325800 reallocated as msg_msg, which confirms that the cross-cache attack worked.

After experimenting with kernel-hack-drill on Ubuntu Server 24.04, I found that CONFIG_RANDOM_KMALLOC_CACHES and CONFIG_SLAB_BUCKETS block naive UAF exploitation, yet they also make cross-cache attacks absolutely stable. So, in my humble opinion:




It seems that, without a mitigation such as SLAB_VIRTUAL, the Linux kernel remains wide-open to cross-cache attacks.

Adapting the cross-cache attack to CVE-2024-50264

As noted in the limitations, the vulnerable virtio_vsock_sock client object is allocated together with the server object (Limitation #1). That hurts the exploit for two reasons:

  On one hand, leaving the server vsock open stops the slab that holds the UAF object from being freed, which kills the cross-cache attack.
  On the other hand, closing the server vsock disturbs the UAF itself.


How to deal with it? @v4bel and @qwerty used the SLUBStick timing side channel to spot when the allocator switched to a new active slab. I went another way:

  What if I hit the connect() syscall with a signal almost immediately?


In short, I used one more race condition to exploit the main race condition – and it worked:

  I sent the "immortal" signal 33 to the vulnerable connect() syscall after a 10000 ns timeout, far earlier than the delay needed to trigger the UAF.
  Then I verified the early race condition:
    
      The connect() syscall must return "Interrupted system call"
      Another testing client vsock should still connect to the server vsock without trouble
    
  


I discovered that when both checks passed, only a single vulnerable virtio_vsock_sock for the client vsock was created. The interrupting signal arrived before the kernel could create the second virtio_vsock_sock for the server vsock. This bypassed Limitation #1 (paired-object creation). After that, I sent signal 33 again – this time after the normal timeout – to interrupt the vulnerable connect() a second time and provoke the UAF. The cross-cache attack against virtio_vsock_sock was unlocked!

Looping this early race and checking its result was quick. Once the early race succeeded, the main race that triggers the UAF became more stable; I could now hit the UAF about once per second instead of once every several minutes, solving the instability noted in Limitation #2. My race condition "speedrun" also eased Limitation #5: I managed roughly five UAF writes before the kworker hit a null-ptr-deref at VSOCK_CLOSE_TIMEOUT (8 seconds).

To address Limitation #4 (the immediate null-ptr-deref in the kworker after UAF), I tried one more race condition, similarly to @v4bel and @qwerty. Right after the UAF-triggering connect(), I called listen() on the vulnerable vsock. If listen() ran before the kworker, it changed the vsock state to TCP_LISTEN, preventing the crash. Unfortunately, this step remains the most unstable part of the whole exploit; the rest is far more stable.

At that point my list of CVE-2024-50264 limitations looked like this:

  The vulnerable virtio_vsock_sock client object is allocated together with the server object from the same slab cache. That disturbs cross-cache attacks.
  Reproducing this race condition is very unstable.
  The UAF write occurs in a kworker a few microseconds after kfree(), too quickly for typical cross-cache attacks.
  A null-ptr-deref in the kworker follows the UAF write. That's why I shelved the bug at first.
  Even if that kernel oops is avoided, another null-ptr-deref occurs in the kworker after VSOCK_CLOSE_TIMEOUT (eight seconds).
  The kworker hangs in spin_lock_bh() if virtio_vsock_sock.tx_lock is not zero.


With the early-signal trick in place, only two limitations were still blocking my exploit.

Oh so slow! The cross-cache attack shows up late to the party

As noted in Limitation #3, the UAF write in the kworker fires only a few μs after kfree() for the virtio_vsock_sock. A cross-cache attack needs much more time, so the UAF write lands on the original virtio_vsock_sock and never reaches the msg_msg.




I didn't know how to make cross-cache procedure faster, but I knew how to slow down the attacked kernel code instead. That approach is described in Jann Horn's article Racing against the clock. It allowed to make my kworker slower than a sluggish cross-cache attack.

The main idea is to hammer the kworker with a timerfd watched by a huge pile of epoll instances. Here is the short recipe (see Jann's article for full detail):

  Call timerfd_create(CLOCK_MONOTONIC, 0).
  Create 8 forks.
  In each fork, call dup() for the timerfd 100 times.
  In each fork, call epoll_create() 500 times.
  For every epoll instance, use epoll_ctl() to add all duplicated file descriptors to the interest list – each epoll instance now monitors all available timerfd copies.
  Finally, arm the timerfd so the interrupt hits the kworker at just the right moment:
    timerfd_settime(timerfd, TFD_TIMER_CANCEL_ON_SET, &retard_tmo, NULL)

  


This procedure made my race-condition window around 80 times longer.

I wanted some more time to complete the cross-cache attack with a guarantee, but ran into a limit not mentioned in the original write-up. If you exceed the limit in /proc/sys/fs/epoll/max_user_watches, epoll_ctl() fails. From man 7 epoll:

  This specifies a limit on the total number of file descriptors that a user can register across all epoll instances on the system. The limit is per real user ID. Each registered file descriptor costs roughly 90 bytes on a 32-bit kernel, and roughly 160 bytes on a 64-bit kernel. Currently, the default value for max_user_watches is 1/25 (4%) of the available low memory, divided by the registration cost in bytes.


On Ubuntu Server 24.04 with 2 GiB of RAM, /proc/sys/fs/epoll/max_user_watches is 431838, which is not huge. I could afford 8 forks × 500 epoll instances × 100 duplicated file descriptors, for a total of 400000 epoll watches.

That was just enough to beat Limitation #3, and I finally got msg_msg data size corruption: the vsock UAF changed msg_msg.m_ts from 48 bytes to 8192 (MSGMAX). Now I could do out-of-bounds reading of the kernel memory using the msgrcv() syscall.

Sorting the loot

The corrupted msg_msg allowed me to read 8 KiB of data from the kernelspace.  I sorted this loot and found a promising infoleak: a kernel address 0xffffffff8233cfa0 [1]. This infoleak was quite stable and worked with high probability, so I decided to investigate it without doing any additional heap feng shui. GDB showed that it was a pointer to the socket_file_ops() kernel function. I was excited to discover that this function pointer is part of struct file, because the file kernel object also contains the f_cred pointer [2], which leaked as well.

Here's how I examined the memory leaked by msg_msg at 0xffff88800e75d600:
gef> p *((struct file *)(0xffff88800e75d600 + 96*26 + 64))
$61 = {
  f_count = {
    counter = 0x0
  },
  f_lock = {
    {
      rlock = {
        raw_lock = {
          {
            val = {
              counter = 0x0
            },
            {
              locked = 0x0,
              pending = 0x0
            },
            {
              locked_pending = 0x0,
              tail = 0x0
            }
          }
        }
      }
    }
  },
  f_mode = 0x82e0003,
  f_op = 0xffffffff8233cfa0 <socket_file_ops>,    [1]
  f_mapping = 0xffff88800ee66f60,
  private_data = 0xffff88800ee66d80,
  f_inode = 0xffff88800ee66e00,
  f_flags = 0x2,
  f_iocb_flags = 0x0,
  f_cred = 0xffff888003b7ad00,                    [2]
  f_path = {
    mnt = 0xffff8880039cec20,
    dentry = 0xffff888005b30b40
  },
  ...


As a result, my PoC exploit obtained a pointer to struct cred, the structure that stores the current process credentials. The last piece needed for privilege escalation was arbitrary address writing. With that, I could overwrite the exploit process credentials and become root. That would be a data-only attack with no control-flow hijack.

In search of arbitrary address writing primitive

The most interesting and difficult part of the research began here. I was searching for a target kernel object for my UAF write, which could provide an arbitrary address writing exploit primitive. The search was exhausting. I've done the following:

  Looked through dozens of kernel objects,
  Read many kernel exploit write-ups,
  Tried Kernel Exploitation Dashboard by Eduardo Vela and the KernelCTF team.


One idea was to combine my limited UAF write with the Dirty Page Table attack (well described by Nicolas Wu). Tweaking page tables can let an attacker read and write data at arbitrary physical address.

I could combine my UAF with a cross-cache attack (or more accurately, cross-allocator attack) to modify page tables. To overwrite kernel text or heap, though, I still needed to know the physical address of the target memory. Two options came to mind:

  Bruteforcing physical addresses. Not practical here: I could trigger the UAF only about five times before the kworker crashed, nowhere near enough tries.
  Using the KASLR infoleak from my msg_msg out-of-bounds read. I decided to try that.


I ran a quick experiment to see how KASLR behaves on X86_64 with CONFIG_RANDOMIZE_BASE and CONFIG_RANDOMIZE_MEMORY enabled. Booting a virtual machine several times, I compared the virtual and physical addresses of kernel _text.

VM run #1:
gef> ksymaddr-remote
[+] Wait for memory scan
0xffffffff98400000 T _text

gef> v2p 0xffffffff98400000
Virt: 0xffffffff98400000 -> Phys: 0x57400000


VM run #2:
gef> ksymaddr-remote
[+] Wait for memory scan
0xffffffff81800000 T _text

gef> v2p 0xffffffff81800000
Virt: 0xffffffff81800000 -> Phys: 0x18600000


Then I calculated the difference between the virtual and physical addresses:

  VM run #1: 0xffffffff98400000 − 0x57400000 = 0xffffffff41000000
  VM run #2: 0xffffffff81800000 − 0x18600000 = 0xffffffff69200000


Because 0xffffffff41000000 is not equal to 0xffffffff69200000, leaking the virtual KASLR offset doesn't help against physical KASLR.




Thereby to perform Dirty Page Table attack, I needed a way to leak a kernel physical address. Ideally I would do this by mixing some page-allocator feng shui with my out-of-bounds read. That felt messy, and I wanted a cleaner solution.

I kept looking for a target kernel object for my UAF write, which could provide an arbitrary address writing and eventually focused on pipe_buffer.

When a pipe is created with the pipe() system call, the kernel allocates an array of pipe_buffer structures. Each pipe_buffer item in this array corresponds to a memory page that holds data written to the pipe. The diagram below shows the internals of this object:




This object looked like a good UAF target. I could make a pipe_buffer array the same size as virtio_vsock_sock by changing the capacity of the pipe: fcntl(pipe_fd[1], F_SETPIPE_SZ, PAGE_SIZE * 2). The kernel changes the array size to 2 * sizeof(struct pipe_buffer) = 80 bytes, exactly matching the virtio_vsock_sock size.

In addition, 4 attacker-controlled bytes from the vsock UAF write at offset 24 can flip pipe_buffer.flags, just as in Max Kellermann's original Dirty Pipe attack.




The original Dirty Pipe attack doesn't even need an infoleak and grants privilege escalation with a one-shot write. Impressed, I decided to experiment with pipe_buffer in my kernel-hack-drill.

Experimenting with the Dirty Pipe attack

First, I built a Dirty Pipe prototype in kernel-hack-drill; the PoC exploit drill_uaf_w_pipe_buffer.c is in the repository. It:

  performs a cross-cache attack and reclaims the slab that held drill_item_t objects as a slab for pipe_buffer objects
  exploits the UAF write to drill_item_t; the attacker-controlled bytes written to drill_item_t at offset 24, modify pipe_buffer.flags
  implements the Dirty Pipe attack, achieving LPE in one shot without an infoleak, cool!


To use this technique in my CVE-2024-50264 PoC exploit, I still had to bypass the last remaining Limitation #6: the kworker hangs before the UAF write if virtio_vsock_sock.tx_lock is non-zero. I managed to solve that by doing splice() from a regular file to the pipe, starting at offset zero:
	loff_t file_offset = 0;
	ssize_t bytes = 0;

	/* N.B. splice modifies the file_offset value */
	bytes = splice(temp_file_fd, &file_offset, pipe_fd[1], NULL, 1, 0);
	if (bytes < 0)
		err_exit("[-] splice");
	if (bytes != 1)
		err_exit("[-] splice short");


In that case, the pipe_buffer.offset field remains zero, so the kworker does not hang while acquiring the spinlock:




This seemed like a breakthrough – until I noticed that the UAF write also corrupted the pipe_buffer.ops function pointer by four zero bytes of peer_fwd_cnt. That unfortunate side effect provoked kernel crashes on every later operation involving pipe_buffer ☹️:




This brought me to the following line of reasoning:

  Completing the Dirty Pipe attack requires a working pipe_buffer with an unchanged ops pointer value.
  Preserving 0xffffffff in the most significant bytes of the pipe_buffer.ops function pointer requires that same value in peer_fwd_cnt.
  Setting peer_fwd_cnt in virtio_vsock_sock means sending data through the vsock.
  Sending data through a vsock first needs a successful connect().
  However, a successful connect() on the vulnerable vsock makes the UAF impossible ⛔.


Alas!

Pipe buffer entertainment

So the original Dirty Pipe technique wouldn't fit my CVE-2024-50264 PoC exploit. But suddenly an idea struck me:

  What if I create a pipe with capacity PAGE_SIZE * 4 forcing the kernel to allocate four pipe_buffer objects in kmalloc-192?


In that case, the memory object overlapping looked like this: four pipe_buffer objects in one kmalloc-192 slab are allocated at the place of two virtio_vsock_sock objects in two kmalloc-96 slabs. The following diagram illustrates the overlap:




Here, memory corruption can land on either of the two virtio_vsock_sock objects. I'll cover these cases one at a time.

To avoid the kernel hang and crash when the UAF hits virtio_vsock_sock #1, I used two tricks:

  Performed a splice() from a regular file to the pipe with a starting offset of zero. As mentioned earlier, this keeps the offset field of the first pipe_buffer at zero, so the kworker doesn't hang while acquiring the spinlock.
  Discarded that first pipe_buffer before triggering the UAF, leaving its offset field untouched:
     /* Remove the first pipe_buffer without changing the `pipe_buffer.offset` */
 bytes = splice(pipe_fd[0], NULL, temp_pipe_fd[1], NULL, 1, 0);
 if (bytes < 0)
 	err_exit("[-] splice");
 if (bytes == 0)
 	err_exit("[-] splice short");

 /*
  * Let's read this byte and empty the first pipe_buffer.
  * So if the UAF writing corrupts the first pipe_buffer,
  * that will not crash the kernel. Cool!
  */
 bytes = read(temp_pipe_fd[0], pipe_data_to_read, 1); /* 1 spliced byte */
 if (bytes < 0)
 	err_exit("[-] pipe read 1");
 if (bytes != 1)
 	err_exit("[-] pipe read 1 short");

    After this sequence of splice() and read(), the first pipe_buffer becomes inactive. Even if the subsequent UAF overwrites its ops pointer, later pipe operations won't dereference that corrupted pointer, so no kernel crash occurs.
  


I wanted to exploit the UAF on virtio_vsock_sock #2 to overwrite the fourth pipe_buffer. To prevent the kernel hang when the UAF hits this second virtio_vsock_sock, I called the same splice(temp_file_fd, &file_offset, pipe_fd[1], NULL, 1, 0) two more times. These syscalls initialized the second and third pipe_buffer objects, leaving their flags at zero, since this pipe operation doesn't set any PIPE_BUF_FLAG_* bits. Therefore, if the UAF occurs on the second virtio_vsock_sock, the spin_lock_bh() in virtio_transport_space_update() will not hang.

These preparations of the pipe opened a door for corrupting the page pointer of the fourth pipe_buffer:




kernel-hack-drill let me experiment with pipe_buffer objects. Without it, crafting this exploit primitive for the tricky CVE-2024-50264 would have been extremely hard.

AARW and KASLR's last revenge

In a pipe_buffer, the page pointer holds the address of a struct page inside the virtual memory map (vmemmap). vmemmap is an array of these structures that allows the kernel to address physical memory efficiently. It is mentioned in Documentation/arch/x86/x86_64/mm.rst:
____________________________________________________________|___________________________________________________________
                  |            |                  |         |
 ffff800000000000 | -128    TB | ffff87ffffffffff |    8 TB | ... guard hole, also reserved for hypervisor
 ffff880000000000 | -120    TB | ffff887fffffffff |  0.5 TB | LDT remap for PTI
 ffff888000000000 | -119.5  TB | ffffc87fffffffff |   64 TB | direct mapping of all physical memory (page_offset_base)
 ffffc88000000000 |  -55.5  TB | ffffc8ffffffffff |  0.5 TB | ... unused hole
 ffffc90000000000 |  -55    TB | ffffe8ffffffffff |   32 TB | vmalloc/ioremap space (vmalloc_base)
 ffffe90000000000 |  -23    TB | ffffe9ffffffffff |    1 TB | ... unused hole
 ffffea0000000000 |  -22    TB | ffffeaffffffffff |    1 TB | virtual memory map (vmemmap_base)
 ffffeb0000000000 |  -21    TB | ffffebffffffffff |    1 TB | ... unused hole
 ffffec0000000000 |  -20    TB | fffffbffffffffff |   16 TB | KASAN shadow memory
__________________|____________|__________________|_________|____________________________________________________________


Hence, when I managed to perform a UAF write of controlled data to the pipe_buffer.page pointer, I gained arbitrary address reading and writing (AARW) via the pipe. However, I wasn't able to change the AARW target address many times, as I mentioned in Limitation #5, so I had to choose the target in vmemmap carefully.

My first thought was to overwrite part of the kernel code. But with KASLR enabled, I didn't know the physical address of kernel _text and therefore couldn't determine its location inside vmemmap.

That's why I decided to use the pipe AARW against struct cred in the kernel heap. As I described earlier, I leaked the virtual address of cred using my msg_msg out-of-bounds read. This virtual address looked like 0xffff888003b7ad00, and I understood it was from the direct mapping of all physical memory. So I used the following formula to calculate the offset of the corresponding struct page in vmemmap:
#define STRUCT_PAGE_SZ 64lu
#define PAGE_ADDR_OFFSET(addr) (((addr & 0x3ffffffflu) >> 12) * STRUCT_PAGE_SZ)
uaf_val = PAGE_ADDR_OFFSET(cred_addr);


The idea behind it is simple:

  addr & 0x3ffffffflu gives the offset of the struct cred from the page_offset_base.
  Right shift by 12 gives the number of the memory page containing struct cred.
  Finally, multiplication by 64 (the size of struct page) gives the offset of the corresponding struct page in the vmemmap.


This formula should be adapted if the system has more than 4 GiB of RAM. In that case, ZONE_NORMAL containing kernel allocations usually starts at address 0x100000000. Hence, to calculate the offset of the needed struct page, we should add (0x100000000 >> 12) * STRUCT_PAGE_SZ.

Excellent, the described formula is independent of KASLR for physical addresses, so I could use it to calculate the four lower bytes of the target address for exploiting the pipe AARW against the struct cred. Why I needed only four lower bytes of pipe_buffer.page:

  My UAF write to peer_buf_alloc performed partial overwriting of the first half of the pipe_buffer.page pointer, as I showed at the diagram above.
  x86_64 is little-endian, so the first half of the pointer contains four lower bytes of the address.


But when I tried this approach, KASLR carried out its last revenge. It randomized the vmemmap_base address, and the four lower bytes of the struct page pointers carried two random bits. Ouch!

However, I decided to brute-force those two bits because I could achieve the UAF write around 5 times before the kworker got a null-ptr-deref after VSOCK_CLOSE_TIMEOUT (8 sec).




I found that probing different values of pipe_buffer.page from userspace works perfectly well:

  In case of fail, reading from the pipe simply returns Bad address.
  In case of success, reading from the pipe gives struct cred contents.


Great! I could finally determine a proper AARW target address, write to the pipe, overwrite euid and egid with 0, and get root. See the PoC exploit demo:


  



Conclusion

Bug collisions are painful. Finishing the research anyway is rewarding. Let me quote my good friend:




Working on this hard race condition with multiple limitations allowed me to discover new exploitation techniques and to use and improve my pet project kernel-hack-drill, which provides a testing environment for Linux kernel security researchers. You are welcome to try it and contribute.

Thanks for reading!

  


      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Lit: a library for building fast, lightweight web components]]></title>
            <link>https://lit.dev</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45112720</guid>
            <description><![CDATA[Simple. Fast. Web Components.]]></description>
            <content:encoded><![CDATA[Simple. Fast. Web Components.SimpleSkip the boilerplateBuilding on top of the Web Components standards, Lit adds just what you need to be happy and productive: reactivity, declarative templates and a handful of thoughtful features to reduce boilerplate and make your job easier. Every Lit feature is carefully designed with web platform evolution in mind.FastTiny footprint, instant updatesWeighing in at around 5 KB (minified and compressed), Lit helps keep your bundle size small and your loading time short. And rendering is blazing fast, because Lit touches only the dynamic parts of your UI when updating — no need to rebuild a virtual tree and diff it with the DOM.Web ComponentsInteroperable & future-readyEvery Lit component is a native web component, with the superpower of interoperability. Web components work anywhere you use HTML, with any framework or none at all. This makes Lit ideal for building shareable components, design systems, or maintainable, future-ready sites and apps.import {html, css, LitElement} from 'lit';import {customElement, property} from 'lit/decorators.js';
@customElement('simple-greeting')export class SimpleGreeting extends LitElement {  static styles = css`p { color: blue }`;
  @property()  name = 'Somebody';
  render() {    return html`<p>Hello, ${this.name}!</p>`;  }}import {html, css, LitElement} from 'lit';
export class SimpleGreeting extends LitElement {  static styles = css`p { color: blue }`;
  static properties = {    name: {type: String},  };
  constructor() {    super();    this.name = 'Somebody';  }
  render() {    return html`<p>Hello, ${this.name}!</p>`;  }}customElements.define('simple-greeting', SimpleGreeting);<simple-greeting name="World"></simple-greeting>Edit this example in the Lit PlaygroundCustom ElementsLit components are standard custom elements, so the browser treats them exactly like built-in elements. Use them in hand-written HTML or framework code, output them from your CMS or static site builder, even create instances in JavaScript — they just work!Scoped stylesLit scopes your styles by default, using Shadow DOM. This keeps your CSS selectors simple and ensures that your component’s styles don't affect — and aren't affected by — any other styles on the page.Reactive propertiesDeclare reactive properties to model your component’s API and internal state. A Lit component efficiently re-renders whenever a reactive property (or corresponding HTML attribute) changes.Declarative templatesLit templates, based on tagged template literals, are simple, expressive and fast, featuring HTML markup with native JavaScript expressions inline. No custom syntax to learn, no compilation required.Build anything with LitNeed to deliver interactive content or features that drop into any site, built on any stack? Because they're natively supported by browsers, web components are the perfect solution — and Lit makes them easy to build.A design system helps you create experiences that are consistently excellent and on brand. But what if your organization uses multiple frameworks? With Lit, you can build one set of components that works for every team.Use Lit components to progressively enhance a static site, or build an entire app. By embracing Web Components, Lit minimizes lock-in and promotes maintainability: update or migrate one component at a time, without disrupting product development.Explore LitTry our live tutorials — no installation neededTutorialsConnect with Lit and the web components communityStay up to date with new releases, learn more about how to use web components and share projects and feedback with our team. All community participation is subject to Lit’s Code of Conduct — be excellent to each other!Lit Discord Chat about Lit with the Lit community and dev teamBluesky Stay up to date with the latest newsGitHub File issues, read the code, and make contributionsStack Overflow Ask and answer questions about Lit]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Comic Sans typeball designed to work with the IBM Selectric typewriters]]></title>
            <link>https://www.printables.com/model/441233-comic-sans-typeball-for-the-ibm-selectric-typewrit</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45111909</guid>
        </item>
        <item>
            <title><![CDATA[%CPU utilization is a lie]]></title>
            <link>https://www.brendanlong.com/cpu-utilization-is-a-lie.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45110688</guid>
            <description><![CDATA[I deal with a lot of servers at work, and one thing everyone wants to know about their servers is how close they are to being at max utilization. It should be easy, right? Just pull up top or another system monitor tool, look at network, memory and CPU utilization …]]></description>
            <content:encoded><![CDATA[I deal with a lot of servers at work, and one thing everyone wants to know about their servers is how close they are to being at max utilization. It should be easy, right? Just pull up top or another system monitor tool, look at network, memory and CPU utilization, and whichever one is the highest tells you how close you are to the limits.For example, this machine is at 50% CPU utilization, so it can probably do twice as much of whatever it's doing.And yet, whenever people actually try to project these numbers, they find that CPU utilization doesn't quite increase linearly. But how bad could it possibly be?To answer this question, I ran a bunch of stress tests and monitored both how much work they did and what the system-reported CPU utilization was, then graphed the results.SetupFor my test machine, I used a desktop computer running Ubuntu with a Ryzen 9 5900X (12 core / 24 thread) processor. I also enabled Precision Boost Overdrive (i.e. Turbo).I vibe-coded a script that runs stress-ng in a loop, first using 24 workers and attempting to run them each at different utilizations from 1% to 100%, then using 1 to 24 workers all at 100% utilization. It used different stress testing method and measured the number of operations that could be completed ("Bogo ops1").The reason I did two different methods was that operating systems are smart about how they schedule work, and scheduling a small number of workers at 100% utilization can be done optimally (spoilers) but with 24 workers all at 50% utilization it's hard for the OS to do anything other than spreading the work evenly.ResultsYou can see the raw CSV results here.General CPUThe most basic test just runs all of stress-ng's CPU stress tests in a loop.You can see that when the system is reporting 50% CPU utilization, it's actually doing 60-65% of the actual maximum work it can do.64-bit Integer MathBut maybe that one was just a fluke. What if we just run some random math on 64-bit integers?This one is even worse! At "50% utilization", we're actually doing 65-85% of the max work we can get done. It can't possibly get worse than that though, right?Matrix MathSomething is definitely off. Doing matrix math, "50% utilization" is actually 80% to 100% of the max work that can be done.In case you were wondering about the system monitor screenshot from the start of the article, that was a matrix math test running with 12 workers, and you can see that it really did report 50% utilization even though additional workers do absolutely nothing (except make the utilization number go up).What's Going On?HyperthreadingYou might notice that this the graph keeps changing at 50%, and I've helpfully added piecewise linear regressions showing the fit.The main reason this is happening is hyperthreading: Half of the "cores" on this machine (and most machines) are sharing resources with other cores. If I run 12 workers on this machine, they each get scheduled on their own physical core with no shared resources, but once I go over that, each additional worker is sharing resources with another. In some cases (general CPU benchmarks), this makes things slightly worse, and in some cases (SIMD-heavy matrix math), there are no useful resources left to share.TurboIt's harder to see, but Turbo is also having an effect. This particular processor runs at 4.9 GHz at low utilization, but slowly drops to 4.3 GHz as more cores become active2.Note the zoomed-in y-axis. The clock speed "only" drops by 15% on this processor.Since CPU utilization is calculated as busy cycles / total cycles, this means the denominator is getting smaller as the numerator gets larger, so we get yet another reason why actual CPU utilization increases faster than linearly.Does This Matter?If you look at CPU utilization and assume it will increase linearly, you're going to have a rough time. If you're using the CPU efficiently (running above "50%" utilization), the reported utilization is an underestimate, sometimes significantly so.And keep in mind that I've only shown results for one processor, but hyperthreading performance and Turbo behavior can vary wildly between different processors, especially from different companies (AMD vs Intel).The best way I know to work around this is to run benchmarks and monitor actual work done:Benchmark how much work your server can do before having errors or unacceptable latency.Report how much work your server is currently doing.Compare those two metrics instead of CPU utilization.Bogo ops is presumably a reference to BogoMIPS, a "bogus" benchmark that Linux does at startup to very roughly understand CPU performance. ↩One of the main constraints processors operate under is needing to dissipate heat fast enough. When only one core is running, the processor can give that core some of the heat headroom that other cores aren't using and run it faster, but it can't do that all of the cores are running.Power usage works similarly and can be a constraint in some environments (usually not in a desktop computer, but frequently in servers). ↩]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[This blog is running on a recycled Google Pixel 5 (2024)]]></title>
            <link>https://blog.ctms.me/posts/2024-08-29-running-this-blog-on-a-pixel-5/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45110209</guid>
            <description><![CDATA[An absolute mammoth post about how I am running this blog site from a Google Pixel 5 Android phone using only Termux. It includes what inspired me, what I'm using for the setup, and my longform notes on the entire project.]]></description>
            <content:encoded><![CDATA[
			If you glance over this blog, you will see that I am an avid Android fan. After setting up numerous Linux proot desktops on phones, I wanted to see if I use a phone as a server and run my blog from an Android phone. Since you are reading this, I was successful.
I was inspired my a few Mastodon posts earlier this week to give it a go. First, I stumbled on a post from @kaimac who is running a site from an ESP32 microcontroller. In the comments of that post, I saw a mention to compost.party created by user @computersandblues that runs completely on an Android device and a solar panel. Last, @stevelord who is essentially running a homelab on a TP-Link router with OpenWRT installed.
I think a lot about power consumption of my homelab and I also love using old hardware for random projects to give them new life. I was truly inspired by the above works, so I got right down to business.
The hardware
I looked through the devices I had laying around and I chose a Google Pixel 5 my brother-in-law gave me after he upgraded. The Pixel 5 is carrier locked to Verizon, which is notorious for making it impossible to also unlock the bootloader and install custom ROMs. At first I wanted a device that I could install PostmarketOS to run a proper Linux server. In the end, I’m glad I didn’t go that route.
Another reason I chose the Pixel 5 is because it supports USB-OTG and can use docks with hard-wired internet. I didn’t want to run the site on wifi and having an ethernet connection was mandatory.
Last, it is the most current phone I have. This device is open to the internet, so I wanted to make sure it is an updated as possible.
Solar powered blog!
This summer I’ve been testing using a 100w solar panel I got from Harbor Freight Tools so I can learn more about how it all works before diving into larger projects. I have that panel connected to a Jackery 160w power station to keep it charged up and we use it to charge our mobile devices. I got the Jackery last year as a power bank I use while on jobsites.
Since I already have this set up, I am now using it to power this blog. I’m happy with this setup as I’ve been getting more into permacomputing. Having a website that is fully offgrid using recycled parts is exciting!
What I used to create the site (Termux is the GOAT)
While considering what projects I could do with this phone, I was thinking I was going to install a proot desktop and then run from within a Linux environment. Before I started I decided to check out a few packages that are in Termux (the flat out amazing terminal emulator) to see how far I could push it.
I checked for some basics and read about setting up an ssh connection. Then I randomly searched for Hugo, which is what my blog was already built on. Sure enough, it is right there in the Termux repos! Turns out, it has been in there for a long time. I see a lot of posts from 2018 with people using it.
How has it been going
Great! Site is fast and reliable. I ran into a few hiccups on the first day or so, which were mostly around the version of Hugo on my server and the newer version I am using on the phone. The other is related to my solar setup and keeping an eye on the battery levels.
To be honest, I don’t think anyone can tell it is running on an Android phone instead of a x86 Linux box or a hyperscaler VPS.
At the moment I have no plans to change this setup and will leave it as-is until some issue arises. But, there’s really not much to report other than it works fantastic.
Below are my longform notes on how I set it up. But, the short version is it was way simpler than I thought it would be. You can get up and running with a Hugo site by just installing git, screen, your favorite text editor, and hugo straight from the repos.
Not included in this post is how I add new posts to the phone. I can use scp to send a files, but I prefer to use dufs that is a static file server in that can be accessed in the browser. Using dufs I can upload files and make quick edits straight in the browser from any device. Surprise! dufs is also in the Termux repos and is so easy to get up and running. Again, message me if you’d like to see a write-up about it.

Installs
Of course I need some basic utilities. These are the utilities I need to have at a minimum when working with a Linux system:

rsync
openssh
git
wget
curl
fish shell
cronie
termux-services
iperf3
speedtest-go
screen
helix
hugo

Restart Termux and use sv-enable to run certain items as services. I do this for sshd and cronie. It looks like this:
$ sv-enable sshd
$ sv-enable cronie
After running sv-enable, restart Termux.
openssh
I could build all of this straight from the phone using either the touchscreen keyboard or connecting a standard keyboard and mouse either with a USB-C dock or bluetooth. But, I want to manage this like all of my other servers, which is to ssh into the device and work from my desk.
There is an official guide for setting up an ssh server. All I will add here is some pointers I learned along the way.

Adding an ssh key is simple and should be one of the first steps done. After generating the key and importing with ssh-copy-id from the desktop, edit the sshd file in $PREFIX/etc/ssh/sshd_config.
Termux generates its own username and cannot be changed. Run whoami to see what it is.
It is the same for the ssh port. As far as I can tell you cannot change the port, which is automatically set to 8022.

Running the site
There are lots of guides out there on how to setup a hugo site. I have an existing site that I migrated from a VM to this phone, so my notes do not include how to get a hugo site running. I also do not need to do any port forwarding as I already have a reverse proxy that I just changed where it points for my blog.
I would like to hear feedback if there is a need to add those notes here. Message me on Mastodon or by email using the links at the bottom of this post.
Below are notes on how I use the package cronie to start the blog using screen and the automatically reload the blog occasionally. cronie is for setting up cron tasks. Once installed and enabled, run crontab -e like usual to setup tasks.
This is how I do it.
First, set a fish alias for the command to reload the blog:
alias blog_run='cd /data/data/com.termux/files/home/<website_root_dir> && /data/data/com.termux/files/usr/bin/hugo serve --bind=0.0.0.0 --baseURL=https://blog.ctms.me --appendPort=false --environment=production --disableFastRender --cacheDir /data/data/com.termux/files/home/<website_root_dir>/cache'

funcsave blog_run
Now, create a script and place in ~/scripts that closes a previous instance of screen, clears the cache, and then starts a new screen session titled “hugo” and execute the alias:
#! /bin/bash
screen -X -S "hugo" quit
rm -rf /data/data/com.termux/files/home/<website_root_dir/cache/<site_name_dir>/filecache/getresource/
screen -S hugo -d -m fish -c 'blog_run; exec fish'
Last, set it to run with cron
*/5 * * * * cd /data/data/com.termux/files/home/scripts && sh blog_reload.sh
Backing up
Since Termux supports ssh connections, I can use it on remote machines to pull the files from the phone using rsync.
First, need to install rsync on the phone with pkg install rsync.
Desktop backup
Now we can run it from my desktop to pull the files:
rsync -aP pixel:~/<website_root_dir> /local/dir/pixel_blog/
On my desktop, I have this for cron
@reboot sleep 30 && rsync -aP pixel:~/<website_root_dir> /local/dir/pixel_blog/ >> $HOME/logs/pixel-hugo-backup.log 2>&1
nas backup
This is the same configuration. The only difference is the backup location and the cron timing.
rsync -aP pixel:~/<website_root_dir> /local/dir/pixel_blog
The automation:
5 6 * * * rsync -aP pixel:~/<website_root_dir> /local/dir/pixel_blog >> $HOME/logs/pixel-hugo-backup.log 2>&1
git backup
I have a local self-hosted git instance I push backups to, but you can totally set it up to send them to Github or whatever forge you use. No instructions here because there are plenty of guides out there on how to set this up.

    
        - - - - -
    
    
        Thank you for reading! If you would like to comment on this post you can start a conversation on the Fediverse. Message me on Mastodon at @cinimodev@masto.ctms.me. Or, you may email me at blog.discourse904@8alias.com. This is an intentionally masked email address that will be forwarded to the correct inbox.
    



		]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Google can keep its Chrome browser but will be barred from exclusive contracts]]></title>
            <link>https://www.cnbc.com/2025/09/02/google-antitrust-search-ruling.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45108548</guid>
            <description><![CDATA[The ruling comes nearly a year after a U.S. judge ruled that Google holds an illegal monopoly in its core market of internet search.]]></description>
            <content:encoded><![CDATA[Google CEO Sundar Pichai during the press conference after his meeting with Polish PM Donald Tusk at Google for Startups Campus In Warsaw in Warsaw, Poland on February 13, 2025. Images)Jakub Porzycki | Nurphoto | Getty ImagesAlphabet shares popped 8% in extended trading as investors celebrated what they viewed as minimal consequences from a historic defeat last year in the landmark antitrust case.Last year, Google was found to hold an illegal monopoly in its core market of internet search.U.S. District Judge Amit Mehta ruled against the most severe consequences that were proposed by the Department of Justice, including the forced sale of Google's Chrome browser, which provides data that helps its advertising business deliver targeted ads. "Google will not be required to divest Chrome; nor will the court include a contingent divestiture of the Android operating system in the final judgment," the decision stated. "Plaintiffs overreached in seeking forced divestiture of these key assets, which Google did not use to effect any illegal restraints."Mehta, who oversaw the remedies trial in May, ordered the parties to meet by Sept. 10 for the final judgment.In August 2024, the U.S. District Court for the District of Columbia ruled that Google violated Section 2 of the Sherman Act and held a monopoly in search and related advertising.The antitrust trial started in September 2023."Now the Court has imposed limits on how we distribute Google services, and will require us to share Search data with rivals," Google said in a blog post. "We have concerns about how these requirements will impact our users and their privacy, and we're reviewing the decision closely. The Court did recognize that divesting Chrome and Android would have gone beyond the case's focus on search distribution, and would have harmed consumers and our partners."Read more CNBC tech newsKlarna aims to raise up to $1.27 billion in U.S. IPOTesla asks for $243 million verdict to be tossed in fatal Autopilot crash suitAlibaba is developing a new AI chip — here's what we know so farMeta changes teen AI chatbot responses as Senate begins probe into 'romantic' conversationsOne of the key areas of focus was the exclusive contracts Google held for distribution.In his decision Tuesday, Mehta said the company can make payments to preload products, but it cannot have exclusive contracts that condition payments or licensing.The DOJ had asked Google to stop the practice of "compelled syndication," which refers to the practice of making certain deals with companies to ensure its search engine remains the default choice in browsers and smartphones."The court's ruling today recognizes the need for remedies that will pry open the market for general search services, which has been frozen in place for over a decade," the DOJ said in a press release. "The ruling also recognizes the need to prevent Google from using the same anticompetitive tactics for its GenAI products as it used to monopolize the search market, and the remedies will reach GenAI technologies and companies."Google pays Apple billions of dollars per year to be the default search engine on iPhones. It's lucrative for Apple and a valuable way for Google to get more search volume and users.Apple stock rose 4% on Tuesday after hours."Google will not be barred from making payments or offering other consideration to distribution partners for preloading or placement of Google Search, Chrome, or its GenAI products. Cutting off payments from Google almost certainly will impose substantial—in some cases, crippling—downstream harms to distribution partners, related markets, and consumers, which counsels against a broad payment ban."Google was also ordered to loosen its hold on search data.During the remedies trial in May, the DOJ asked the judge to force Google to share the data it uses for generating search results, such as data about what users click on.Mehta ruled Tuesday that Google will have to make available certain search index data and user interaction data, though "not ads data."Google does not have to share or provide access to granular data with advertisers.The court narrowed the datasets Google will be required to share and said they must occur on "ordinary commercial terms that are consistent with Google's current syndication services."Stock Chart IconStock chart iconGoogle and Apple one-day stock chart.watch now]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Making a Linux home server sleep on idle and wake on demand (2023)]]></title>
            <link>https://dgross.ca/blog/linux-home-server-auto-sleep</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45108066</guid>
            <description><![CDATA[Daniel P. Gross is a computer software and hardware professional based in Toronto.]]></description>
            <content:encoded><![CDATA[
        
  

  
    2023-04-16
      in
        linux,
        backup,
        networking,
        wireshark,
        ruby,
        wake-on-lan,
        efficiency,
        homelab
  

  It began with what seemed like a final mundane touch to my home server setup for hosting Time Machine backups: I wanted it to automatically sleep when idle and wake up again when needed. You know, sleep on idle — hasn’t Windows had that built in since like Windows 98? How hard could it be to configure on a modern Ubuntu install?

To be fair, I wanted more than just sleep on idle, I also wanted wake on request — and that second bit turns out to be the hard part. There were a bunch of dead ends, but I stuck out it to find something that “just works” without the need to manually turn on the server for every backup. Join me on the full adventure further down, or cut to the chase with the setup instructions below.



tl;dr


  
  
  
  
    
  
  Home Server PC- High power consumption!- Ubuntu Linux- Mostly sleeps, wakes up on demandWake-on-LAN: unicast packetsRaspberry Pi (or similar)- Low power consumption- Ubuntu Linux- Always-onSSHAFP...Network servicesNetwork servicesARP Stand-inAvahi...Time machine backupsARP queries for HomeServermDNS queries for Home Server


Outcome:

  Server automatically suspends to RAM when idle
  Server automatically wakes when needed by anything else on the network, including SSH, Time Machine backups, etc.


You’ll need:

  An always-on Linux device on the same network as your server, e.g. a Raspberry Pi
  A network interface device for your server that supports wake-on-LAN with unicast packets


On the server:

  Enable wake-on-LAN with unicast packets (not just magic packets), make it persistent



sudo ethtool -s eno1 wol ug
sudo tee /etc/networkd-dispatcher/configuring.d/wol << EOF
#!/usr/bin/env bash

ethtool -s eno1 wol ug || true
EOF
sudo chmod 755 /etc/networkd-dispatcher/configuring.d/wol



  Set up a cron job to sleep on idle (replace /home/ubuntu with your desired script location)



tee /home/ubuntu/auto-sleep.sh << EOF
#!/bin/bash
logged_in_count=$(who | wc -l)
# We expect 2 lines of output from `lsof -i:548` at idle: one for output headers, another for the 
# server listening for connections. More than 2 lines indicates inbound connection(s).
afp_connection_count=$(lsof -i:548 | wc -l)
if [[ $logged_in_count < 1 && $afp_connection_count < 3 ]]; then
  systemctl suspend
else
  echo "Not suspending, logged in users: $logged_in_count, connection count: $afp_connection_count"
fi
EOF
chmod +x /home/ubuntu/auto-sleep.sh
sudo crontab -e
# In the editor, add the following line:
*/10 * * * * /home/ubuntu/auto-sleep.sh | logger -t autosuspend



  Disable IPv6: this approach relies on ARP, which IPv6 doesn’t use



sudo nano /etc/default/grub
# Find GRUB_CMDLINE_LINUX=""
# Change to GRUB_CMDLINE_LINUX="ipv6.disable=1"
sudo update-grub
sudo reboot



  Optional: Configure network services (e.g. Netatalk) to stop before sleep to prevent unwanted wakeups due to network activity



sudo tee /etc/systemd/system/netatalk-sleep.service << EOF
[Unit]
Description=Netatalk sleep hook
Before=sleep.target
StopWhenUnneeded=yes

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=-/usr/bin/systemctl stop netatalk
ExecStop=-/usr/bin/systemctl start netatalk

[Install]
WantedBy=sleep.target
EOF
sudo systemctl daemon-reload
sudo systemctl enable netatalk-sleep.service


On the always-on device:

  Install ARP Stand-in: a super simple Ruby script that runs as a system service and responds to ARP requests on behalf of another machine. Configure it to respond on behalf of the sleeping server.
  Optional: Configure Avahi to advertise network services on behalf of the server when it’s sleeping.



sudo apt install avahi-daemon
sudo tee /etc/systemd/system/avahi-publish.service << EOF
[Unit]
Description=Publish custom Avahi records
After=network.target avahi-daemon.service
Requires=avahi-daemon.service

[Service]
ExecStart=/usr/bin/avahi-publish -s homeserver _afpovertcp._tcp 548 -H homeserver.local

[Install]
WantedBy=multi-user.target
EOF
sudo systemctl daemon-reload
sudo systemctl enable avahi-publish.service --now
systemctl status avahi-publish.service


Caveats

  The server’s network device needs to support wake-on-LAN from unicast packets
  To prevent unwanted wake-ups, you’ll need to ensure no device on the network is sending extraneous packets to the server


How I got there
First, a bit about my hardware, as this solution is somewhat hardware-dependent:

  HP ProDesk 600 G3 SFF
  CPU: Intel Core i5-7500
  Network adapter: Intel I219-LM


Sleeping on idle
I started with sleep-on-idle, which boiled down to two questions:


  How to determine if the server is idle or busy at any given moment
  How to automatically suspend to RAM after being idle for some time


Most of the guides I found for sleep-on-idle, like this one, were for Ubuntu Desktop — sleep-on-idle doesn’t seem to be something that’s commonly done with Ubuntu Server. I came across a few tools that looked promising, the most notable being circadian. In general, though, there didn’t seem to be a standard/best-practice way to do it, so I decided I’d roll it myself the simplest way I could.

Determining idle/busy state
I asked myself what server activity would constitute being busy, and landed on two things:

  Logged in SSH sessions
  In-progress Time Machine backups


Choosing corresponding metrics was pretty straightforward:

  Count of logged in users, using who
  Count of connections on the AFP port (548), using lsof (I’m using AFP for Time Machine network shares)


For both metrics, I noted the values first at idle, and then again when the server was busy.

Automatically suspending to RAM
To keep things simple, I opted for a cron job that triggers a bash script — check out the final version shared above. So far it’s worked fine; if I ever need to account for more metrics in detecting idle state, I’ll consider using a more sophisticated option like circadian.

Waking on request
With sleep-on-idle out of the way, I moved on to figuring out how the server would wake on demand.

Could the machine be configured to automatically wake upon receiving a network request? I knew Wake-on-LAN supported waking a computer up using a specially crafted “magic packet”, and it was straightforward to get this working. The question was if a regular, non-“magic packet” could somehow do the same thing.

Wake on PHY?
Some online searching yielded a superuser discussion that looked particularly promising. It pointed to the man page for ethtool, the Linux utility used to configure network hardware. It shared ethtool’s complete wake-on-LAN configuration options:
wol p|u|m|b|a|g|s|f|d...
      Sets Wake-on-LAN options.  Not all devices support
      this.  The argument to this option is a string of
      characters specifying which options to enable.

      p   Wake on PHY activity
      u   Wake on unicast messages
      m   Wake on multicast messages
      b   Wake on broadcast messages
      a   Wake on ARP
      g   Wake on MagicPacket™
      s   Enable SecureOn™ password for MagicPacket™
      f   Wake on filter(s)
      d   Disable (wake on nothing).  This option
          clears all previous options.


It pointed in particular to the Wake on PHY activity option, which seemed perfect for this use-case. It seemed to mean that any packet sent to the network interface’s MAC address would wake it. I enabled the flag using ethtool, manually put the machine to sleep, then tried logging back in using SSH and sending pings. No dice: the machine remained asleep despite multiple attempts. So much for that 😕

Breakthrough: wake on unicast
None of ethtool’s other wake-on-LAN options seemed relevant, but some more searching pointed to the Wake on unicast messages as another option to try. I enabled the flag using ethtool, manually put the machine to sleep, then tried logging back in using SSH. Bingo! This time, the machine woke up. 🙌 With that, I figured I was done.

Not so fast — there were two problems:

  Sometimes, the server would wake up without any network activity that I knew of
  Some period of time after the server went to sleep, it would become impossible to wake it again using network activity other than a magic packet


A closer look at the same superuser discussion above revealed exactly the reason for the second problem: shortly after going to sleep, the machine was effectively disappearing from the network because it was no longer responding to ARP requests.

ARP
So the cached ARP entry for other machines on the network was expiring, meaning that they had no way to resolve the server’s IP address to its MAC address. In other words, an attempt to ping my server at 192.168.1.2 was failing to even send a packet to the server, because the server’s MAC address wasn’t known. Without a packet being sent, there was no way that server was going to wake up.

Static ARP?
My first reaction: let’s manually create ARP cache entries on each network client. This is indeed possible on macOS using:
sudo arp -s [IP address] [MAC address]


But it also didn’t meet the goal of having things “just work”: I was not interested in creating static ARP cache entries on each machine that would be accessing the server. On to other options.

ARP protocol offload?
Some more searching revealed something interesting: this problem had already been solved long ago in the Windows world.

It was called ARP protocol offload, and it goes like this:

  The network hardware is capable of responding to ARP requests independently of the CPU
  Before going to sleep, the OS configures the network hardware to respond to ARP requests
  While sleeping, the network hardware responds to ARP requests on its own, without waking the rest of the machine to use the CPU


Voila, this was exactly what I needed. I even looked at the datasheet for my network hardware, which lists ARP Offload as a feature on the front page.

The only problem? No Linux support. I searched the far reaches of the internet, then finally dug into the Linux driver source code to find that ARP offload isn’t supported by the Linux driver. This was when I briefly pondered trying to patch the driver to add ARP offload… before reminding myself that successfully patching Linux driver code is far beyond what I could hope to achieve in a little free-time project like this one. (Though maybe one day…)

Other solutions using magic packets
Some more searching led me to some other clever and elaborate solutions involving magic packets. The basic idea was to automate sending magic packets. One solution (wake-on-arp) listens for ARP requests to a specified host to trigger sending a magic packet to that host. Another solution implements a web interface and Home Assistant integration to enable triggering a magic packet from a smartphone web browser. These are impressive, but I wanted something simpler that didn’t require manually waking up the server.

I considered a few other options, but abandoned them because they felt too complex and prone to breaking:

  Writing a script to send a magic packet and then immediately trigger a Time Machine backup using tmutil. The script would need to be manually installed and scheduled to run periodically on each Mac.
  Using HAProxy to proxy all relevant network traffic through the Raspberry Pi and using a hook to send a magic packet to the server on activity.


Breakthrough: ARP Stand-in
What I was attempting didn’t seem much different from the static IP mapping that’s routinely configured on home routers, except that it was for DHCP instead of ARP. Was there no way to make my router do the same thing for ARP?

Some more digging into the ARP protocol revealed that ARP resolution doesn’t even require a specific, authoritative host to answer requests — any other network device can respond to ARP requests. In other words, my router didn’t need to be the one resolving ARP requests, it could be anything. Now how could I just set up something to respond on behalf of the sleeping server?

Here’s what I was trying to do:


  
  
  
    
  
  Home server PCMAC Address: AA:BB:CC:DD:EEIP Address:   192.168.1.3SSHAFP...Raspberry PiMAC Address: ZZ:YY:XX:WW:VVIP Address:   192.168.1.2ARP Stand-inAvahi...1Multicast ARP: What's 192.168.1.3'sMAC address?ARP: 192.168.1.3 is atAA:BB:CC:DD:EE Home server PCMAC Address: AA:BB:CC:DD:EEIP Address:   192.168.1.3SSHAFP...Raspberry PiMAC Address: ZZ:YY:XX:WW:VVIP Address:   192.168.1.2ARP Stand-inAvahi...2Unicast TCP packet to port 22 on AA:BB:CC:DD:EE Home server PCMAC Address: AA:BB:CC:DD:EEIP Address:   192.168.1.3SSHAFP...Raspberry PiMAC Address: ZZ:YY:XX:WW:VVIP Address:   192.168.1.2ARP Stand-inAvahi...3Communication continues normallyUnicast packet triggers wakeupStarts SSH sessionto home server123

I thought it must be possible to implement as a Linux network configuration, but the closest thing I found was Proxy ARP, which accomplished a different goal. So I went one level deeper, to network programming.

Now, how to go about listening for ARP request packets? This is apparently possible to do using a raw socket, but I also knew that tcpdump and Wireshark were capable of using filters to capture only packets of a given type. That led me to look into libpcap, the library that powers both of those tools. I learned that using libpcap had a clear advantage over a raw socket: libpcap implements very efficient filtering directly in the kernel, whereas a raw socket would require manual packet filtering in user space, which is less performant.

Aiming to keep things simple, I decided to try writing the solution in Ruby, which led me to the pcaprub Ruby bindings for libpcap. From there, I just needed to figure out what filter to use with libpcap. Some research and trial/error yielded this filter:

arp and arp[6:2] == 1 and arp[24:4] == [IP address converted to hex]


For example, using a target IP address of 192.168.1.2:

arp and arp[6:2] == 1 and arp[24:4] == 0xc0a80102


Let’s break this down, using the ARP packet structure definition for byte offets and lengths:

  arp — ARP packets
  arp[6:2] == 1 — ARP request packets. [6:2] means “the 2 bytes found at byte offset 6”.
  arp[24:4] == [IP address converted to hex] — ARP packets with the specified target address. [24:4] means “the 4 bytes found at byte offset 24”.


The rest is pretty straightforward and the whole solution comes out to only ~50 lines of Ruby code. In short, arp_standin is a daemon that does the following:


  Starts up, taking these configuration options:
    
      IP and MAC address of the machine it’s standing in for (the “target”)
      Network interface to operate on
    
  
  Listens for ARP requests for the target’s IP address
  On detecting an ARP request for the target’s IP address, responds with the target’s MAC address


Since the server’s IP → MAC address mapping is defined statically through the arp_standin daemon’s configuration, it doesn’t matter if the Raspberry Pi’s ARP cache entry for the server is expired.

Check out the link below to install it or explore the source code further:


  
  danielpgross/arp_standin on GitHub


ARP is used in IPv4 and is replaced by Neighbor Discovery Protocol (NDP) in IPv6. I don’t have any need for IPv6 right now, so I disabled IPv6 entirely on the server using the steps shown above. It should be possible to add support for Neighbor Discovery to the ARP-Standin service as a future enhancement.

With the new service running on my Raspberry Pi, I used Wireshark to confirm that ARP requests being sent to the server were triggering responses from the ARP Stand-in. It worked 🎉 — things were looking promising.

Getting it all working
The big pieces were in place:

  the server went to sleep after becoming idle
  the server could wake up from unicast packets
  other machines could resolve the server’s MAC address using ARP, long after it went to sleep


With the ARP Stand-in running, I turned on the server and ran a backup from my computer. When the backup was finished, the server went to sleep automatically. But there was a problem: the server was waking up immediately after going to sleep.

Unwanted wake-ups

First thing I checked was the Linux system logs, but these didn’t prove too helpful, since they didn’t show what network packet actually triggered the wakeup. Wireshark/tcpdump were no help here either, because they wouldn’t be running when the computer was sleeping. That’s when I thought to use port mirroring: capturing packets from an intermediary device between the server and the rest of the network. After a brief, unsuccessful attempt to repurpose an extra router running OpenWRT, a search for the least expensive network switch with port mirroring support yielded the TP-Link TL-SG105E for ~$30.


  
  TL-SG105E: a simple, inexpensive switch with port-mirroring support


With the switch connected and port mirroring enabled, I started capturing with Wireshark and the culprits immediately became clear:


  My Mac, which was configured to use the server as a Time Machine backup host using AFP, was sending AFP packets to the server after it had gone to sleep
  My Netgear R7000, acting as a wireless access point, was sending frequent, unsolicited NetBIOS NBTSTAT queries to the server


Eliminating AFP packets
I had a hunch about why the Mac was sending these packets:

  The Mac mounted the AFP share to perform a Time Machine backup
  The Time Machine backup finished, but the share remained mounted
  The Mac was checking on the status of the share periodically, as would be done normally for a mounted network share


I also had a corresponding hunch that the solution would be to make sure the share got unmounted before the server went to sleep, so that the Mac would no longer ping the server for its status afterwards. I figured that shutting down the AFP service would trigger unmounting of shares on all its clients, achieving the goal. Now I just needed to ensure the service would shut down when the server was going to sleep, then start again when it woke back up.

Fortunately, systemd supports exactly that, and relatively easily — I defined a dedicated systemd service to hook into sleep/wake events (check out the configuration shared above). A Wireshark capture confirmed that it did the trick.

Eliminating NetBIOS packets
This one proved to be harder, because the packets were unsolicited — they seemed random and unrelated to any activity being done by the server. I thought they might be related to Samba services running on the server, but the packets persisted even after I completely removed Samba from the server.

Why was my network router sending NetBIOS requests, anyway? Turns out that Netgear routers have a feature called ReadySHARE for sharing USB devices over the network using the SMB protocol. Presumably, the router firmware uses Samba behind the scenes, which uses NetBIOS queries to build and maintain its own representation of NetBIOS hosts on the network. Easy — turn off ReadySHARE, right? Nope, there’s no way to do that in Netgear’s stock firmware 😒.

That led me to take the plunge and flash the router with open-source FreshTomato firmware. I’m glad I did, because the firmware is much better than the stock one anyway, and it immediately stopped the unwanted NetBIOS packets.

Time Machine not triggering wake-up
I was getting close now: the server remained asleep, and I could reliably wake it up by logging in with SSH, even long after it went to sleep.

This was great, but one thing wasn’t working: when starting a backup on my Mac, Time Machine would show a loading state indefinitely with Connecting to backup disk... and eventually give up. Was the server failing to wake up from packets the Mac was sending, or was the Mac not sending packets at all?


  


A port-mirrored Wireshark capture answered that question: the Mac wasn’t sending any packets to the server, even long after it started to say Connecting to backup disk.... Digging into the macOS Time Machine logs with:

log show --style syslog --predicate 'senderImagePath contains[cd] "TimeMachine"' --info


A few entries made it clear:
(TimeMachine) [com.apple.TimeMachine:Mounting] Attempting to mount 'afp://backup_mbp@homeserver._afpovertcp._tcp.local./tm_mbp'
...
(TimeMachine) [com.apple.TimeMachine:General] Failed to resolve CFNetServiceRef with name = homeserver type = _afpovertcp._tcp. domain = local.


The Mac was using mDNS (a.k.a. Bonjour, Zeroconf) to resolve the backup server’s IP address using its hostname. The server was asleep and therefore not responding to the requests, so the Mac was failing to resolve its IP address. This explained why the Mac wasn’t sending any packets to the server, leaving it asleep.

mDNS stand-in
I already had an ARP stand-in service, now I needed my Raspberry Pi to also respond to mDNS queries for the server while it slept. I knew that Avahi was one of the main mDNS implementations for Linux. I first tried these instructions using .service files to configure my Raspberry Pi to respond to mDNS queries on behalf of the server. I used the following on the Mac to check the result:
dns-sd -L homeserver _afpovertcp._tcp local


For some reason, that approach just didn’t work; Avahi didn’t respond on behalf of the server. I experimented instead with avahi-publish (man page), which (to my pleasant surprise) worked right away using the following:
avahi-publish -s homeserver _afpovertcp._tcp 548 -H homeserver.local


With that, I just needed to create a systemd service definition that would automatically run the avahi-publish command on boot (check out the configuration shared above).

🏁 Finish
With all the wrinkles ironed out, everything has been working well now for over a month. I hope you’ve enjoyed following along and that this approach works for you too.

This post was discussed on Hacker News and Reddit.



      ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A staff engineer's journey with Claude Code]]></title>
            <link>https://www.sanity.io/blog/first-attempt-will-be-95-garbage</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45107962</guid>
            <description><![CDATA[This started as an internal Sanity workshop where I demoed how I actually use AI. Spoiler: it's running multiple agents like a small team with daily amnesia.]]></description>
            <content:encoded><![CDATA[First attempt will be 95% garbage: A staff engineer's 6-week journey with Claude Code | Sanity]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Physically based rendering from first principles]]></title>
            <link>https://imadr.me/pbr/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45106846</guid>
            <description><![CDATA[In this interactive article, we will explore the physical phenomena that create light and the fundamental laws governing its interaction with matter. We will learn how our human eyes capture light and how our brains interpret it as visual information. We will then model approximations of these physical interactions and learn how to create physically realistic renderings of various materials.]]></description>
            <content:encoded><![CDATA[
    
    
    In this interactive article, we will explore the physical phenomena that create light and the fundamental laws governing its interaction with matter. We will learn how our human eyes capture light and how our brains interpret it as visual information. We will then model approximations of these physical interactions and learn how to create physically realistic renderings of various materials.
    Chapter 1: What is light?
    We are all familiar with light: it’s the thing that allows us to see the world, distinguish colors and textures, and keeps the universe from being a dark, lifeless void. But precisely defining what light is has proven to be a tricky question.Throughout history, many philosophers (and later, physicists) studied light in an effort to demystify its nature. Some ancient Greeks considered it to be one of the four fundamental elements that composed the universe: beams of fire emanating from our eyes.
    Descartes proposed that light behaved like waves, while Newton thought that it consisted of tiny particles of matter called corpuscles.

    Each of these more or less scientific theories explained some aspects of light's behavior, but none could account for all of them in a single, unified framework. That was until the 1920s when physicists came up with quantum electrodynamics. This theory is, as of now, the most accurate way to describe every interaction of light and matter.

    You can hover the diagram below to see which light's phenomena can be explained using each model:


    
            Quantum Optics
            
                Electromagnetic Optics
                
                    Wave Optics
                    
                        Ray Optics
                    
                
            
        
    
        
            Reflection / Refraction / Transmission
            Diffraction
            Interference
            Polarization
            Dispersion
            Fluorescence
            Phosphorescence
        
    

    

    For the purpose of computer graphics, the ray optics model is accurate enough at simulating light interactions. But for the sake of scientific curiosity, we will explore some aspects of the other models, starting with electromagnetism.

    The Electric force
    One of the fundamental properties of matter is the electric charge, and it comes in two types: positive and negative.Charges determine how particles interact: charges of the same type repel each other, while opposite charges attract.
    The amount of force affecting two charged particles is calculated using Coulomb's law:
    


    Where  is a constant,   and  are the quantities of each charge, and  is the distance between them.

    You can drag around these charges to see how the electric force affects them:
    
    Every charge contributes to the electric field, it represents the force exerted on other charges at each point in space. We can visualize the electric field with a  or a  :
    
    
    Another way to visualize the electric field is by coloring each point in space with a color gradient representing the force experienced by a small charge at that point:
    

    Special relativity and magnetism
    Imagine a moving object carrying a positive electric charge placed under a cable carrying an electrical current.
    From , the object and the negative charges in the wire are moving, and since the positive and negative charges in the cable compensate each other, the object doesn't experience any force.
    In the , it appears to be static alongside the negative charges, while the positive charges are moving to the left, and the object still doesn't get affected by any force.
    Now if we take into account , the moving charges in the wire appear "stretched" due to relativistic effects, causing a change in the distribution of charges. This stretching leads to a repulsive force between the object and the wire, which we interpret as magnetism.
    
    
    Maxwell's equations
    Maxwell's equations describe how electric and magnetic fields are created and interact with each other. We will focus on the third and fourth equations.
    Maxwell's third equation, known as Faraday's law of induction, shows how changing magnetic fields can generate electric currents.An example of this is moving a magnet inside a coil, which induces an electric current in the wire due to the changing magnetic field.
    This is the principle behind electric generators: Mechanical energy (like the flow of steam) is used to move magnets inside coils (a turbine), converting it to electrical energy through electromagnetic induction.
    By moving the magnet left and right, we can see the voltmeter picking up a current and the electric charges in the coil moving back and forth:
    
    
        Show magnetic field
            
        
        Slide the magnet
        
    

    
    Maxwell's fourth and final equation, Ampère's Law, illustrates how electric currents (moving charges) produce magnetic fields around them. This is the basis of how electromagnets function:
    
    
        Voltage: 0 volts
        
    
    
    Together, these laws demonstrate how electric and magnetic fields are interdependent. A changing magnetic field generates an electric field, and a changing electric field generates a magnetic field.
    This continuous cycle enables self-sustaining, self-propagating electromagnetic waves, which can travel through space without requiring a medium.
    Electromagnetic radiation
    Electromagnetic radiation consists of waves created by synchronized oscillations of electric and magnetic fields. These waves travel at the speed of light in a vacuum.
    The amplitude of a wave determines the maximum strength of its electric or magnetic field. It represents the wave's intensity or "brightness". In quantum terms, a higher amplitude corresponds to a greater number of photons.
    The frequency of a wave determines the energy of the individual photons that compose it. Higher frequencies correspond to shorter wavelengths and more energetic photons.
    
    Amplitude
    
    Frequency
    

    When the wavelength falls between approximately 400 nm and 700 nm, the human eye perceives it as visible light.
    While other wavelengths are invisible to the human eye, many are quite familiar in everyday life.
For example, microwaves are used for Wi-Fi and cooking, X-rays are used in medical imaging, and radio waves enable communication.
Some insects, like bees, can see ultraviolet light, which helps them locate flowers by revealing hidden patterns and markings created by specialized pigments, such as flavonoids, that reflect UV wavelengths.
On the other end of the spectrum, gamma rays are highly energetic and can be dangerous, they are generated by radioactive decay, nuclear bombs, and space phenomena like supernovas.
    
    Frequency
    

    Generating Light
    There are many ways for light to be generated, the two most common ones we encounter everyday are incandescence and electroluminescence.

    Incandescence is the process by which a material emits visible light due to high temperature. It is how incandescent lightbulbs and the sun generates light.
    An incandescent lightbulb produces light through the heating of a filament until it starts glowing. The filament is made of tungsten, an element with a high melting point, high durability, and a positive temperature coefficient of resistance, which means its resistance increases with temperature.

    When we increase the current flowing through the filament, it starts heating up (Due to Joule heating), which increases the resistance in turn causing more heat to get dissipated. This feedback loop stabilizes at around 2500°C.

    This heat makes the electrons in the filament wiggle and collide with each other, releasing photons in the process. This radiation can be approximated as Black-body radiation.



Voltage


The Sun also generates light by incandescence, but unlike the lightbulb's filament glowing via Joule heating, the Sun’s energy is produced by nuclear fusion in the core, where hydrogen nuclei fuse to form helium and release photons as gamma rays.These photons travel from the core through the radiative zone, getting absorbed and remitted countless times while shifting to longer wavelengths. After hundreds of thousands of years of bouncing around, the photons make it to the surface of the Sun, called the photosphere, where they get radiated away.
Most (~49%) of the sun's emissions are in infrared, which is responsible for the heat we get on Earth, ~43% is visible light and the ~8% left is ultraviolet.

An interesting fact is that illustrations of the Sun's cross-section typically depict the interior with bright orange or yellow colors. However, if we could actually see a cross-section of the Sun, even the hottest regions like the core would appear dark and opaque, because the radiation generated there isn't in the visible spectrum.





Another way to generate light is by electroluminescence, this is the phenomenon that powers LEDs

The main component of a light-emitting diode is a semiconductor chip. Semiconductors are materials whose electrical conductivity can be modified by mixing them with impurities in a process known as doping.

Depending on the type of impurity (called the dopant) used in the mix, the semiconductor can be turned into either an n-type, which has extra electrons freely moving around, or a p-type, which has a lack of electrons and instead carrying an electron "hole", also moving around and acting as a positive charge.

When you stick a p-type and an n-type semiconductor side by side, they form a p-n junction. When a current flows through the junction, the electrons and the holes recombine and emit photons in the process.


Aside from incandescence and electroluminescence, which are the two most common sources of light we encounter in everyday life, light can come from other places. Some materials glow when exposed to ultraviolet radiation, others absorb that radiation and re-emit it after some time. Some animals like fireflies use special enzymes to produce light. You can read this page to learn more about other sources of luminescence.

Chapter 2: Abstracting Away

In the previous chapter, we examined the nature of light and the various methods by which it can be emitted, we will now focus on how it interacts with matter.

When a photon hits a material, it interacts with the electrons in the atoms and molecules of that material, then two things can happen, it can either be absorbed or scattered.

The electrons occupy atomic orbitals: regions around the nucleus of the atom where an electron is most likely to be found. A higher orbital corresponds to a higher energy level of the electron.


If the photon has the energy needed to excite the electron to a higher energy level, the photon can be absorbed. Eventually the electron returns to a lower level and releases the energy as heat.

If the photon does not get absorbed, its electric field will make the electrons oscillate in return and generate secondary waves that interfere constructively and destructively with the photon waves in complicated ways.

We can simplify these complicated interactions by making a few assumptions about the material:

    The material is homogeneous, as in the material has the same properties everywhere
    The material is a perfectly smooth surface

We can use Maxwell's equations to show that such a perfect flat material splits the incoming light waves into two parts: reflected and refracted.

The angle of reflection is equal to the angle of incidence relative to the normal of the surface, as per the law of reflection:


        
        Angle 
    


The angle of refraction is determined by how much slower (or faster) light travels through the material, that speed is defined by the index of refraction, and the angle is calculated using Snell's law:






        
        
        
        Angle 
        Index of refraction 
        Index of refraction 
    


At a  and refractive indices light is no longer refracted and seems to disappear.

The amount of light that is reflected and refracted is calculated using Fresnel equations.

However, computing the full Fresnel equation in real time can be slow, so in 1994 Christophe Schlick came up with an approximation.
First we compute the reflectance at zero degrees from the normal:


Then we plug  in the approximation function for the reflectance:


The transmitted (or refracted) light simply becomes:



        
        
        Angle 
        Index of refraction 
        Index of refraction 
    

If we try the  where the refracted ray disappeared, we can now see it getting reflected back inside the medium, this is called total internal reflection.

Total internal reflection gives rise to an interesting phenomenon called Snell's window. If you dive underwater and look up, the light above the surface is refracted through a circular window 96 degrees wide, and everything outside is a reflection of the bottom of the water.


Angle



This is what it looks underwater:




The Microfacet Model

Like we saw earlier, we can explain light reflecting and refracting using different models, depending on the size of the surface irregularities we are considering.
For example, wave optics explains light interacting with matter as light waves diffracting on the surface nanogeometry.
If we zoom out a bit and use ray optics, we consider light as straight line rays that reflect and refract on the surface microgeometry. With this model we can use the optical laws we described earlier: law of reflection, Snell's law, Fresnel equations.
Now for rendering, we can zoom out even further and consider one pixel at a time, each pixel contains many microgeometry surfaces that we call a microfacet. We can use a statistical average of the microfacets in a pixel to simulate the appearance of the surface at that pixel, without considering each individual microfacet which would be unfeasible in real time.

    
        Size
        Model
        Phenomenon
    
    
        Nanogeometry
        Wave optics
        Light diffraction
    
    
        Microgeometry
        Ray optics
        Reflection/refraction, change in local normal
    
    
        Macrogeometry
        BRDF
        Statistical average over a pixel, wider cone -> more roughness
    


Here we can see a microgeometry surface, changing the roughness makes it more bumpy and the microfacets normals aren't aligned anymore:

Roughness


At the macrogeometry level, a bigger roughness value means light rays have a wider cone where they can spread out. The function that describes this cone is called bidirectional reflectance distribution function, we will discuss it in the next chapter.

Roughness


In our microfacet model, we distinguish two types of materials by the nature of their interaction with light: metals and non-metals.

Metals

Metals have a sea of free electrons that absorb light very easily when the photons enter a few nanometers deep inside the surface. The light that isn't absorbed is reflected equally across the visible light spectrum, this is why metals have that distinct "silvery" gray color.
Notable exceptions are gold, copper, osmium and caesium.



Changing the roughness of a metal only changes its specular reflection, making it more or less mirror-like. But there is no diffuse reflection at all.

Roughness


Non-metals

Also called dielectrics, these are materials that do not conduct electricity (insulators). They include plastic, wood, glass, water, diamond, air...



When a photon hits a dielectric material, it only gets absorbed if it's energy matches the electron's energy in the material. So light either gets reflected, and the specular reflection depends on the roughness of the surface.
The light can also get refracted inside the dielectric material, it bounces around and interacts with the pigments inside the material until it exits the surface, this is called diffuse reflection.


Roughness


Spectral Power Distribution

If we take the example of a red apple. When we shine a white light (which contains all visible wavelengths) on it, the apple's pigments (anthocyanins) absorb most of the wavelengths like violet, blue and green wavelengths, thus decreasing the intensity of those colors from the light. The remaining wavelengths, mostly red, gets scattered off the apple's surface making us perceive the apple as red.



We can characterize the incoming light by describing the amount of energy it carries at each wavelength using a function called the Spectral Power Distribution or SPD for short.
For example, below is the SPD for D65, a theoretical source of light standardized by The International Commission on Illumination (CIE). It represents the spectrum of average midday light in Western Europe or North America:

We can compare this SPD to AM0, which is the measured solar radiation in outer space before entering Earth's atmosphere. Notice the absence of a dip in the ultraviolet range:


And here is the SPD of a typical tungsten incandescent light:


Spectral Reflectance Curve
The SPD shows us how much of each "color" a light is composed of. Another interesting function we can look at is called the spectral reflectance curve, which shows the fraction of incident light reflected by an object at each wavelength, effectivly representing the color of said object.
Going back to our apple example, since it reflects most of its light in the red wavelength, its spectral reflectance curve might look like this:


The light we see is the combination of the light spectral power distribution with the object spectral reflectance.
If we shine a light on our red apple, depending on the wavelengths of the light, the final color we see changes. A  makes the apple appear red, because it's like multiplying the apple's color by one. We get the same result with a , because the apple reflects mostly in the red spectrum.However if we shine a , besides the leaf, the rest of the apple doesn't reflect any light, thus appearing black.
On the top right you can see the SPD of the flashlight, under it the reflectance curve of the apple, and the resulting reflected light below it:



If we now add a banana and shine a , we can obviously tell the apple and the banana apart, one being red while the other is yellow.But what happens when the light is ? Both objects appear reddish to our eyes, because the banana doesn't have any green light to reflect, making it lose its yellow color. This phenomenon is called metamerism.
You can display the  or the  :





There are different types of metamerism, depending on when it happens during the light transport process. The apple and banana example is called illuminant metamerism, where objects that reflect light differently appear the same under some specific illumination.
Observer metamerism is when objects appear different between observers, a good example of this is colorblindness.

Chapter 3 : The Rendering equation




 is the outgoing light at point  to the direction 
 is the incoming light at point  from the direction 
The BRDF (Bidirectional reflectance distribution function) is a function that tells use how much of the incoming light  is reflected to the outgoing direction  at point , this function characterizes the surface of our material.
The dot product is called the cosine term.




The rendering equation gives us the light reflected towards a direction  at a point  by summing all the incoming lights  at that point coming from direction  in the hemisphere , weighted by the BRDF at that point and the cosine term.

Let's peel off this equation step by step, starting with the easiest part:

Lambert's cosine law

When a beam of light hits a surface, the area it touches is inversly proportional to the cosine of the angle of incidence. When the angle of incidence is , the area is at minimum and the intensity is concentrated, but the more  the angle gets, the larger the area and the intensity gets spread out.



Angle


The BRDF

The BRDF is arguably the most important part of the rendering equation, it characterizes the surface of our material and its appearance. This is where the we can apply the microfacet theory and energy conservation to make our rendering model physically based.

It takes as input the incoming  and outgoing  light direction, and the roughness of the surface . It equals the diffuse and the specular components weighted by their respective coefficients  and .
There are many different BRDFs, the most common in realtime rendering is the Cook-Torrance specular microfacet model combined with Lambertian diffuse model.



The lambertian diffuse component is the diffuse color, called albedo, multiplied by the cosine factor. But since we already have the cosine factor in the rendering equation, the diffuse equation becomes: 



The Cook-Torrance specular component itself has three components: the normal distribution function , the geometric function  and the Fresnel equation .

Normal Distribution Function

The normal distribution function is an approximation of the number of microfacets oriented in such a way that they will reflect light from the incoming direction  to the outgoing direction .

The one we will use is the Trowbridge-Reitz GGX function:



 is the halfway vector between the incoming and outgoing directions, we calculate it like this:




Roughness


Geometric Function

Some incoming rays get occluded by some microfacets before they get a chance to bounce off to the outgoing direction, this is called shadowing. Other rays get occluded by microfacets on their way to the outgoing direction, this is called masking. The geometric function approximates this effect.

Here we can see the shadowed rays in red and the masked rays in blue. The yellow rays succesfully reflected to the outgoing direction:

Angle


We will use the Schlick-GGX geometric function:




Where:



Roughness


Fresnel Equation

Like we discussed in the previous chapter, we will use the Fresnel-Schlick approximation which is fast for realtime rendering and accurate enough:



Base reflectance F0


Combining everything

Now we can combine the diffuse and specular components to get our final PBR render:


Roughness
    Metallic
    Albedo


Here is a grid of spheres with different roughness and metallic values on each axis:


Usually the metallic values is either 0 or 1, but it is useful in PBR rendering to consider intermediate values to smoothly interpolate between metals and non-metals. Take this rusted metal material for example:


To be continued...

Physically based rendering is a very vast topic and there is a lot more to cover.
In the chapter about the physics of light, I omitted the quantum explanation of light's behaviour using probability amplitudes. We didn't talk about the double slit experiment or the wave-particle duality. I may cover this in the future when I learn more about it, for now I'll leave you with this quote from Richard Feynman's QED book:
The theory of quantum electrodynamics describes Nature as absurd from the point of view of common sense. And it agrees fully with experiment. So I hope you accept Nature as She is — absurd.


We didn't talk about polarization and assumed all our light sources are unpolarized, this isn't very important for general rendering but can be useful for research.

We focused on surface rendering, in the future I will cover volume rendering, subsurface scattering, effects like optical dispersion, thin-film interference/iridescence...etc

There are a lot more implementation specific details. Whether we are implementing PBR in raytracing or rasterization, we need to use optimization techniques to make the rendering faster while still being accurate. Examples that come to mind are prefiltred envmaps and importance sampling (or efficient sampling in general).

Further reading
This article is mainly based on this SIGGRAPH talk by Naty Hoffman and Physically Based Rendering: From Theory To Implementation
My main inspiration for writing interactive articles is this fantastic blog by Bartosz Ciechanowski. A lot of interactive demos in this article are similar to the ones in this post.
Other resources include LearnOpenGL, the ScienceClic youtube channel, and 3Blue1Brown of course.
I can't recommend enough the famous book QED: The Strange Theory of Light and Matter by Richard Feynman.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Introduction to Ada: a project-based exploration with rosettas]]></title>
            <link>https://blog.adacore.com/introduction-to-ada-a-project-based-exploration-with-rosettas</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45106314</guid>
            <description><![CDATA[by Romain Gora – Sep 01, 2025. Discover Ada through a fun, project-based tutorial! Learn the language’s clarity, safety, and modern features while building an SVG rosetta generator. A fresh, visual way to explore Ada 2022.]]></description>
            <content:encoded><![CDATA[ContextThis practical walkthrough, designed as a short tutorial, was created upon joining AdaCore as a Field Engineer. In this new role, I’ll be working directly with customers to help them succeed with Ada. Although I was first introduced to the language nearly two decades ago, this new position inspired me to revisit its fundamentals, and I used the excellent https://learn.adacore.com portal as a quick refresher.While that platform takes a concept-based approach, I chose to complement it with a project-based method by developing a small, end-to-end Ada program that generates animated rosettas in the form of SVG files. These are technically hypotrochoid curves, producing patterns that many will recognize from the classic Spirograph™ toy.In this walkthrough, we’ll show that Ada can be fun and easy to learn. Although the language is famous for safety-critical systems, we will use it as a modern, general-purpose programming language and try out some new features from Ada 2022 along the way.Let's dive in!A brief note on AdaThis section leans a bit more into background context, with a slightly encyclopedic flavor that's especially useful for readers new to Ada. If you're already familiar with Ada’s history and principles, feel free to joyfully skip ahead to the next section!Ada was created in the late 1970s after a call from the U.S. Department of Defense to unify its fragmented software landscape. The winning proposal became Ada, a language that's been literally battle-tested (!) and built on a deeply thought-out design that continues to evolve today.While Ada is absolutely a general-purpose programming language, it has carved out a strong niche in fields where software correctness and reliability are mission-critical:Embedded and real-time systemsAerospace and defenseRail, automotive, and aviationAny system where failure is not just a bug, but a riskIts strict compile-time checks, safety features, and clear structure make it particularly appealing when you need your software to be dependable from day one and still maintainable ten years later.Ada's design is grounded in a strong and principled philosophy:Readability over conciseness: Ada favors clarity. It avoids symbols and abbreviations in favor of full keywords, making the language more accessible and less error-prone.Strong and explicit typing: It is extremely easy to declare new types in Ada, with precise constraints, which makes it much harder to accidentally misuse data. While some functional languages share this strong typing discipline, Ada stands out by requiring the programmer to be very explicit. It uses little to no type inference.Explicit is better than implicit: Unlike many modern languages that prioritize convenience, Ada leans heavily toward precision. Most types must be explicitly named and matched.Defined semantics and minimal undefined behavior: Ada offers a level of predictability and safety unmatched in many languages. This makes it a strong choice not only for safety-critical systems, but also for codebases where long-term maintenance, verifiability, and correctness are essential.Compiler as a partner: Ada compilers are strict by design, not to frustrate, but to help the programmer write clearer, more correct code. This philosophy encourages the developer to communicate intent clearly, both to the compiler and to future readers.How the program worksSometimes the best way to figure out how something works is to start at the end. Let's do that!In this tutorial, we'll walk through how the program produces its final output — a rosetta SVG file — and use that as a way to explore how Ada's structure, type system, and tooling come together.This is a simple command-line program that generates an SVG file. You run it like this:./bin/rosettaThe idea was to create something visual: learning is more fun when there's an immediate, satisfying result and generating rosettas fits that goal perfectly.Why SVG? Because it's a lightweight and portable vector format that you can view in any modern browser. I wanted to avoid relying on a graphical library, which would have added extra weight and gone beyond the scope of this approach. And while XML isn't the most pleasant format to write by hand, generating it from code is straightforward and gives a surprisingly clean result.Tooling & setupTo build and run the project, I used Alire, the Ada package manager. It plays a similar role in the Ada ecosystem as Cargo does for Rust or npm for JavaScript. It's well-documented, and while we won't dive deep into it here, it's a solid and accessible way to manage Ada projects. I encourage anyone curious to get it from https://alire.ada.dev. Interestingly, "Alire" is also the French expression for "à lire" — which means "for reading." A fitting name for a tool that supports a language so focused on clarity and readability!Once Alire is set up, the natural next step is choosing where to write the code. You have two excellent options for your development environment. For a dedicated experience, you can download the latest release of GNAT Studio from its GitHub repository. If you prefer a more general-purpose editor, you can install the official Ada & SPARK for Visual Studio Code extension from AdaCore.As a new learner, I also kept https://learn.adacore.com close at hand. It’s a particularly clear and comprehensive resource — and I especially appreciated being able to download the ebook version and read through it on my phone.Entry pointwith Rosetta_Renderer;

procedure Main is
begin
   Rosetta_Renderer.Put_SVG_Rosettas;
end Main;There are several interesting things to notice right away:The with clause is not a preprocessor directive like in C or C++. It’s a compiled, checked reference to another package — a reliable and explicit way to express a dependency. This eliminates entire classes of bugs related to fragile #include chains, macro collisions, or dependency order issues.This procedure is not a function: it does not return a value. In Ada, procedures are used to perform actions (like printing or modifying state), and functions are used to compute and query values.The syntax is designed for readability. You’ll find begin and end here instead of {} as in C/C++, reinforcing Ada’s philosophy that clarity matters more than brevity.Put_SVG_Rosettas uses the idiomatic Pascal_Snake_Case naming style. This reflects a common Ada convention and avoids acronyms or compressed identifiers in favor of more descriptive names.The entry point is minimal but meaningful: it simply calls a procedure which generates the output we'll explore in the next sections.Geometry and computation (package Rosetta)In Ada, a package is a modular unit that groups related types, procedures, and functions. Following the convention from GNAT (the Ada compiler, part of the GNU Compiler Collection, fondly known as GCC), each package has a specification file (with the .ads extension — short for Ada Specification) and an implementation file (with the .adb extension — short for Ada Body). This clear and enforced split means you always know where to find interface definitions versus their implementation.The following code is the package specification for Rosetta. It defines the data types for the rosetta shapes and declares the public interface of operations available to manipulate them.with Ada.Strings.Text_Buffers;

package Rosetta is

   --  A mathematical description of a rosetta (specifically, a hypotrochoid).
   --  formed by tracing a point attached to a circle rolling inside another circle.
   type Hypotrochoid is record
      Outer_Radius : Float;     --  Radius of the fixed outer circle.
      Inner_Radius : Float;     --  Radius of the rolling inner circle.
      Pen_Offset   : Float;     --  From the center of the inner circle to the drawing point.
      Steps        : Positive;  --  Number of steps (points) used to approximate the curve.
   end record;

   --  A 2D coordinate in Cartesian space.
   type Coordinate is record
      X_Coord, Y_Coord : Float;
   end record
     with Put_Image => Put_Image_Coordinate;
   
   --  Redefines the 'Image attribute for Coordinate.
   procedure Put_Image_Coordinate 
     (Output : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class; 
      Value  : Coordinate);

   --  A type for an unconstrained array of 2D points forming a curve.
   --  The actual bounds are set when an array object of this type is declared.
   type Coordinate_Array is array (Natural range <>) of Coordinate;

   --  Computes the coordinates of the rosetta curve defined by Curve (a hypotrochoid).
   --  Returns a centered array of coordinates.
   function Compute_Points (Curve : Hypotrochoid) return Coordinate_Array;

end Rosetta;The Rosetta package is responsible for all the math and curve computation. It defines:Hypotrochoid, type describing the geometry of the rosettaCoordinate, type representing points in 2D spaceCoordinate_Array, type holding a series of such pointsCompute_Points, function which calculates all the points of the curve based on the Hypotrochoid parameters and recenters them around the originThis package is focused solely on computation. It doesn’t concern itself with how the result is rendered.Fun fact for the curious: when the rolling circle rolls outside the fixed circle rather than inside, the resulting curve is called an epitrochoid.In Ada, a record is similar to a struct in C or a class with only data members in other languages. It's a user-defined type composed of named components, making it ideal for modeling structured data.Using a record for Hypotrochoid was particularly appropriate: it allows grouping all geometric parameters (outer radius, inner radius, pen offset, and steps) into a single, cohesive unit. This improves readability and maintainability. The compiler enforces correctness by ensuring all required values are present and of the expected type — reinforcing Ada’s philosophy of clarity and safety.The type Coordinate_Array is an unconstrained array type that holds a range of Coordinate records. In this context, ‘unconstrained’ simply means that we don’t define the array’s size when we declare the type. Instead, the size is defined when we declare an object of that type. This gives us the flexibility to use this type for a variety of shapes.You may also notice the use of Natural range <>. Natural is a predefined subtype of Integer that only allows non-negative values. And yes, I mean subtype: Ada’s powerful type system allows you to take an existing type and create a more specific, constrained version of it.Highlights from the .adb fileHere are a few notable aspects from the implementation (rosetta.adb) that illustrate Ada’s strengths for writing safe, clear, and structured code:Declarative and modular design: Both Generate_Point and Compute_Points are pure functions that operate only on their inputs. Their behavior is fully deterministic and encapsulated.Safe bounds and array handling: The Points array is statically bounded using (0 .. Curve.Steps), and its access is strictly safe. The compiler ensures that any index outside this range would raise an error at runtime. This immediate error is a feature, not a bug. It stops silent memory corruption and security flaws by ensuring the program fails predictably and safely at the source of the problem.Use of constants for robustness: Variables such as Pi, R_Diff, and Ratio are declared as constant, enforcing immutability. This helps ensure clarity of intent and prevents accidental reassignment, a common source of subtle bugs in more permissive languages. Ada encourages this explicit declaration style, promoting safer code.with Ada.Numerics;
with Ada.Numerics.Elementary_Functions;

use Ada.Numerics;
use Ada.Numerics.Elementary_Functions;

package body Rosetta is

   --  Computes a single point on the hypotrochoid curve for a given angle Theta.
   --  Uses the standard parametric equation of a hypotrochoid.
   function Generate_Point (Curve : Hypotrochoid; Theta : Float) return Coordinate is
      R_Diff : constant Float := Curve.Outer_Radius - Curve.Inner_Radius;
      Ratio  : constant Float := R_Diff / Curve.Inner_Radius;
   begin
      return (
              X_Coord => R_Diff * Cos (Theta) + Curve.Pen_Offset * Cos (Ratio * Theta),
              Y_Coord => R_Diff * Sin (Theta) - Curve.Pen_Offset * Sin (Ratio * Theta)
             );
   end Generate_Point;

   --  Computes all the points of the hypotrochoid curve and recenters them.
   --  The result is an array of coordinates centered around the origin.
   function Compute_Points (Curve : Hypotrochoid) return Coordinate_Array is
      Points : Coordinate_Array (0 .. Curve.Steps);
      Max_X  : Float := Float'First;
      Min_X  : Float := Float'Last;
      Max_Y  : Float := Float'First;
      Min_Y  : Float := Float'Last;
      Offset : Coordinate;
   begin
      --  Computes raw points and updates the bounding box extents.
      for J in 0 .. Curve.Steps loop
         declare
            Theta : constant Float := 2.0 * Pi * Float (J) / Float (Curve.Steps) * 50.0;
            P     : constant Coordinate := Generate_Point (Curve, Theta);
         begin
            Points (J) := P;
            Max_X := Float'Max (Max_X, P.X_Coord);
            Min_X := Float'Min (Min_X, P.X_Coord);
            Max_Y := Float'Max (Max_Y, P.Y_Coord);
            Min_Y := Float'Min (Min_Y, P.Y_Coord);
         end;
      end loop;

      --  Computes the center offset based on the bounding box.
      Offset := (
                 X_Coord => (Max_X + Min_X) / 2.0,
                 Y_Coord => (Max_Y + Min_Y) / 2.0
                );

      --  Recenters all points by subtracting the center offset.
      for J in Points'Range loop
         Points (J).X_Coord := @ - Offset.X_Coord;
         Points (J).Y_Coord := @ - Offset.Y_Coord;
      end loop;

      return Points;
   end Compute_Points;
   
   --  Redefines the 'Image attribute for Coordinate.
   procedure Put_Image_Coordinate
     (Output : in out Ada.Strings.Text_Buffers.Root_Buffer_Type'Class;
      Value  : Coordinate)
   is   
      X_Text : constant String := Float'Image (Value.X_Coord);
      Y_Text : constant String := Float'Image (Value.Y_Coord);
   begin
      Output.Put (X_Text & "," & Y_Text);
   end Put_Image_Coordinate;

end Rosetta;On style: strict and predictable (and satisfying!)Ada is one of those rare languages that not only compiles your code but asks you to write it properly. With the compiler switch -gnaty, you can enforce a comprehensive set of style rules, many of which are stricter than what you'd see in most languages.This includes things like:No trailing whitespace at the end of linesNo consecutive blank linesProper indentation and alignment of keywords and parametersA space before “(“ when calling a procedure or functionConsistent casingAt first, this can feel surprisingly strict. But once you get used to it, the benefits are clear: it helps enforce a consistent and clean coding style across a codebase. That in turn improves readability, reduces ambiguity, and leads to more maintainable programs.Rather than leaving formatting up to personal taste or optional linter tools, Ada integrates this attention to detail into the compilation process itself. The result is not only more elegant: it's genuinely satisfying. And you can do even more with GNATcheck and GNATformat but it’s outside of the scope of this post.Outputting to SVG (package Rosetta_Renderer)The Rosetta_Renderer package is responsible for producing the SVG output. It defines a single high-level procedure:package Rosetta_Renderer is

   --  Renders a predefined set of rosettas into an SVG output.
   procedure Put_SVG_Rosettas;

end Rosetta_Renderer;This procedure generates an SVG file directly. It takes care of formatting the SVG structure (header, shapes, animations, and footer) and calls into the math logic defined in the Rosetta package to generate point data.This separation of concerns is deliberate and beneficial: the math logic doesn’t need to know anything about SVG, and the renderer doesn’t care how the coordinates were generated.Now let's talk about the body of the package... but not for long. We're keeping it brief because its core is essentially the SVG plumbing required to draw and animate the curves, so we'll skip the fine details. And for those who enjoy seeing how the sausage is made, I've made the fully commented source code available for you right here.The procedure Put_Path handles the creation of the SVG path. Its main job is to take an array of coordinates and write the corresponding command string to the d attribute of a <path> element. In SVG, this attribute defines the geometry of the shape. The code iterates over each coordinate, using M (moveto) for the first point and L (lineto) for all the others to draw the connecting lines.--  Puts coordinates to a single SVG path string ("d" attribute).
   procedure Put_Path (Stream : File_Type; Points : Coordinate_Array) is
   begin
      Put (Stream, "M "); -- Moves the pen without drawing.
      for J in Points'Range loop
         declare 
            Coord_Text : constant String := Coordinate'Image (Points (J));
         begin   
            Put (Stream, Coord_Text);
            if J < Points'Last then
               Put (Stream, " L "); --  Draws a line.
            end if;
         end;
      end loop;
   end Put_Path;AfterwordThis small project was an enjoyable and useful way to get back into Ada. It helped me reconnect with the language’s main strengths and refamiliarize myself with its tools and design. It was a great reminder of how fun, easy to learn, and remarkably modern Ada can be, especially for developers focused on building robust, maintainable, and efficient software.I hope this short walkthrough gives a good idea of that feeling, whether you're already into Ada or just starting to explore it.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[<template>: The Content Template element]]></title>
            <link>https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/template</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45106049</guid>
            <description><![CDATA[The <template> HTML element serves as a mechanism for holding HTML fragments, which can either be used later via JavaScript or generated immediately into shadow DOM.]]></description>
            <content:encoded><![CDATA[
            
            
    Attributes
    This element includes the global attributes.

shadowrootmode

Creates a shadow root for the parent element.
It is a declarative version of the Element.attachShadow() method and accepts the same enumerated values.

open

Exposes the internal shadow root DOM for JavaScript (recommended for most use cases).

closed

Hides the internal shadow root DOM from JavaScript.


Note:
The HTML parser creates a ShadowRoot object in the DOM for the first <template> in a node with this attribute set to an allowed value.
If the attribute is not set, or not set to an allowed value — or if a ShadowRoot has already been declaratively created in the same parent — then an HTMLTemplateElement is constructed.
A HTMLTemplateElement cannot subsequently be changed into a shadow root after parsing, for example, by setting HTMLTemplateElement.shadowRootMode.
Note:
You may find the non-standard shadowroot attribute in older tutorials and examples that used to be supported in Chrome 90-110. This attribute has since been removed and replaced by the standard shadowrootmode attribute.

shadowrootclonable

Sets the value of the clonable property of a ShadowRoot created using this element to true.
If set, a clone of the shadow host (the parent element of this <template>) created with Node.cloneNode() or Document.importNode() will include a shadow root in the copy.

shadowrootdelegatesfocus

Sets the value of the delegatesFocus property of a ShadowRoot created using this element to true.
If this is set and a non-focusable element in the shadow tree is selected, then focus is delegated to the first focusable element in the tree.
The value defaults to false.

shadowrootserializable 
Experimental


Sets the value of the serializable property of a ShadowRoot created using this element to true.
If set, the shadow root may be serialized by calling the Element.getHTML() or ShadowRoot.getHTML() methods with the options.serializableShadowRoots parameter set true.
The value defaults to false.


  
    Usage notes
    This element has no permitted content, because everything nested inside it in the HTML source does not actually become the children of the <template> element. The Node.childNodes property of the <template> element is always empty, and you can only access said nested content via the special content property. However, if you call Node.appendChild() or similar methods on the <template> element, then you would be inserting children into the <template> element itself, which is a violation of its content model and does not actually update the DocumentFragment returned by the content property.
Due to the way the <template> element is parsed, all <html>, <head>, and <body> opening and closing tags inside the template are syntax errors and are ignored by the parser, so <template><head><title>Test</title></head></template> is the same as <template><title>Test</title></template>.
There are two main ways to use the <template> element.
  
    Template document fragment
    By default, the element's content is not rendered.
The corresponding HTMLTemplateElement interface includes a standard content property (without an equivalent content/markup attribute). This content property is read-only and holds a DocumentFragment that contains the DOM subtree represented by the template.
This fragment can be cloned via the cloneNode method and inserted into the DOM.
Be careful when using the content property because the returned DocumentFragment can exhibit unexpected behavior.
For more details, see the Avoiding DocumentFragment pitfalls section below.
  
    Declarative Shadow DOM
    If the <template> element contains the shadowrootmode attribute with a value of either open or closed, the HTML parser will immediately generate a shadow DOM. The element is replaced in the DOM by its content wrapped in a ShadowRoot, which is attached to the parent element.
This is the declarative equivalent of calling Element.attachShadow() to attach a shadow root to an element.
If the element has any other value for shadowrootmode, or does not have the shadowrootmode attribute, the parser generates a HTMLTemplateElement.
Similarly, if there are multiple declarative shadow roots, only the first one is replaced by a ShadowRoot — subsequent instances are parsed as HTMLTemplateElement objects.
  
    Examples
    
  
    Generating table rows
    First we start with the HTML portion of the example.
<table id="producttable">
  <thead>
    <tr>
      <td>UPC_Code</td>
      <td>Product_Name</td>
    </tr>
  </thead>
  <tbody>
    <!-- existing data could optionally be included here -->
  </tbody>
</table>

<template id="productrow">
  <tr>
    <td class="record"></td>
    <td></td>
  </tr>
</template>

First, we have a table into which we will later insert content using JavaScript code. Then comes the template, which describes the structure of an HTML fragment representing a single table row.
Now that the table has been created and the template defined, we use JavaScript to insert rows into the table, with each row being constructed using the template as its basis.
// Test to see if the browser supports the HTML template element by checking
// for the presence of the template element's content attribute.
if ("content" in document.createElement("template")) {
  // Instantiate the table with the existing HTML tbody
  // and the row with the template
  const tbody = document.querySelector("tbody");
  const template = document.querySelector("#productrow");

  // Clone the new row and insert it into the table
  const clone = template.content.cloneNode(true);
  let td = clone.querySelectorAll("td");
  td[0].textContent = "1235646565";
  td[1].textContent = "Stuff";

  tbody.appendChild(clone);

  // Clone the new row and insert it into the table
  const clone2 = template.content.cloneNode(true);
  td = clone2.querySelectorAll("td");
  td[0].textContent = "0384928528";
  td[1].textContent = "Acme Kidney Beans 2";

  tbody.appendChild(clone2);
} else {
  // Find another way to add the rows to the table because
  // the HTML template element is not supported.
}

The result is the original HTML table, with two new rows appended to it via JavaScript:
table {
  background: black;
}
table td {
  background: white;
}


  
    Implementing a declarative shadow DOM
    In this example, a hidden support warning is included at the beginning of the markup. This warning is later set to be displayed via JavaScript if the browser doesn't support the shadowrootmode attribute. Next, there are two <article> elements, each containing nested <style> elements with different behaviors. The first <style> element is global to the whole document. The second one is scoped to the shadow root generated in place of the <template> element because of the presence of the shadowrootmode attribute.
<p hidden>
  ⛔ Your browser doesn't support <code>shadowrootmode</code> attribute yet.
</p>
<article>
  <style>
    p {
      padding: 8px;
      background-color: wheat;
    }
  </style>
  <p>I'm in the DOM.</p>
</article>
<article>
  <template shadowrootmode="open">
    <style>
      p {
        padding: 8px;
        background-color: plum;
      }
    </style>
    <p>I'm in the shadow DOM.</p>
  </template>
</article>

const isShadowRootModeSupported = Object.hasOwn(
  HTMLTemplateElement.prototype,
  "shadowRootMode",
);

document
  .querySelector("p[hidden]")
  .toggleAttribute("hidden", isShadowRootModeSupported);


  
    Declarative Shadow DOM with delegated focus
    This example demonstrates how shadowrootdelegatesfocus is applied to a shadow root that is created declaratively, and the effect this has on focus.
The code first declares a shadow root inside a <div> element, using the <template> element with the shadowrootmode attribute.
This displays both a non-focusable <div> containing text and a focusable <input> element.
It also uses CSS to style elements with :focus to blue, and to set the normal styling of the host element.
<div>
  <template shadowrootmode="open">
    <style>
      :host {
        display: block;
        border: 1px dotted black;
        padding: 10px;
        margin: 10px;
      }
      :focus {
        outline: 2px solid blue;
      }
    </style>
    <div>Clickable Shadow DOM text</div>
    <input type="text" placeholder="Input inside Shadow DOM" />
  </template>
</div>

The second code block is identical except that it sets the shadowrootdelegatesfocus attribute, which delegates focus to the first focusable element in the tree if a non-focusable element in the tree is selected.
<div>
  <template shadowrootmode="open" shadowrootdelegatesfocus>
    <style>
      :host {
        display: block;
        border: 1px dotted black;
        padding: 10px;
        margin: 10px;
      }
      :focus {
        outline: 2px solid blue;
      }
    </style>
    <div>Clickable Shadow DOM text</div>
    <input type="text" placeholder="Input inside Shadow DOM" />
  </template>
</div>

Last of all we use the following CSS to apply a red border to the parent <div> element when it has focus.
div:focus {
  border: 2px solid red;
}

The results are shown below.
When the HTML is first rendered, the elements have no styling, as shown in the first image.
For the shadow root that does not have shadowrootdelegatesfocus set you can click anywhere except the <input> and the focus does not change (if you select the <input> element it will look like the second image).

For the shadow root with shadowrootdelegatesfocus set, clicking on the text (which is non-focusable) selects the <input> element, as this is the first focusable element in the tree.
This also focuses the parent element as shown below.

  
    Avoiding DocumentFragment pitfalls
    When a DocumentFragment value is passed, Node.appendChild and similar methods move only the child nodes of that value into the target node. Therefore, it is usually preferable to attach event handlers to the children of a DocumentFragment, rather than to the DocumentFragment itself.
Consider the following HTML and JavaScript:
  
    HTML
    <div id="container"></div>

<template id="template">
  <div>Click me</div>
</template>

  
    JavaScript
    const container = document.getElementById("container");
const template = document.getElementById("template");

function clickHandler(event) {
  event.target.append(" — Clicked this div");
}

const firstClone = template.content.cloneNode(true);
firstClone.addEventListener("click", clickHandler);
container.appendChild(firstClone);

const secondClone = template.content.cloneNode(true);
secondClone.children[0].addEventListener("click", clickHandler);
container.appendChild(secondClone);

  
    Result
    Since firstClone is a DocumentFragment, only its children are added to container when appendChild is called; the event handlers of firstClone are not copied. In contrast, because an event handler is added to the first child node of secondClone, the event handler is copied when appendChild is called, and clicking on it works as one would expect.

  
    Technical summary
    
  
    
      
        Content categories
      
      
        Metadata content,
        flow content,
        phrasing content,
        script-supporting element
      
    
    
      Permitted content
      Nothing (see Usage notes)
    
    
      Tag omission
      None, both the starting and ending tag are mandatory.
    
    
      Permitted parents
      
        Any element that accepts
        metadata content,
        phrasing content, or
        script-supporting elements. Also allowed as a child of a <colgroup>
        element that does not have a
        span attribute.
      
    
    
      Implicit ARIA role
      
        No corresponding role
      
    
    
      Permitted ARIA roles
      No role permitted
    
    
      DOM interface
      HTMLTemplateElement
    
  

  
    Specifications
    
    
      
        Specification
      
    
    
      
              HTML# the-template-element
            
    
  
  
    Browser compatibility
    
  
    See also
    
part and exportparts HTML attributes
<slot> HTML element
:has-slotted, :host, :host(), and :host-context() CSS pseudo-classes
::part and ::slotted CSS pseudo-elements
ShadowRoot interface
Using templates and slots
CSS scoping module
Declarative Shadow DOM (with html) in Using Shadow DOM
Declarative shadow DOM on web.dev (2023)

   
      
    
          ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[We already live in social credit, we just don't call it that]]></title>
            <link>https://www.thenexus.media/your-phone-already-has-social-credit-we-just-lie-about-it/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45106011</guid>
            <description><![CDATA[Your credit score is social credit. Your LinkedIn endorsements are social credit. Your Uber passenger rating, Instagram engagement metrics, Amazon reviews, and Airbnb host status are all social credit systems that track you, score you, and reward you based on your behavior.

Social credit, in its original economic definition, means distributing industry profits to consumers to increase purchasing power. But the term has evolved far beyond economics. Today, it describes any kind of metric that tr]]></description>
            <content:encoded><![CDATA[
        Photo by Avery Evans on UnsplashYour credit score is social credit. Your LinkedIn endorsements are social credit. Your Uber passenger rating, Instagram engagement metrics, Amazon reviews, and Airbnb host status are all social credit systems that track you, score you, and reward you based on your behavior.Social credit, in its original economic definition, means distributing industry profits to consumers to increase purchasing power. But the term has evolved far beyond economics. Today, it describes any kind of metric that tracks individual behavior, assigns scores based on that behavior, and uses those scores to determine access to services, opportunities, or social standing.Sounds dystopian, doesn’t it? But guess what? Every time an algorithm evaluates your trustworthiness, reliability, or social value, whether for a loan, a job, a date, or a ride, you're participating in a social credit system. The scoring happens constantly, invisibly, and across dozens of platforms that weave into your daily life.The only difference between your phone and China's social credit system is that China tells you what they're doing. We pretend our algorithmic reputation scores are just “user experience features.” At least Beijing admits they're gamifying human behavior.When Americans think of the "Chinese social credit system," they likely picture Black Mirror episodes and Orwellian nightmares. Citizens are tracked for every jaywalking incident, points are deducted for buying too much alcohol, and facial recognition cameras are monitoring social gatherings; the image is so powerful that Utah's House passed a law banning social credit systems, despite none existing in America.Here's what's actually happening. As of 2024, there's still no nationwide social credit score in China. Most private scoring systems have been shut down, and local government pilots have largely ended. It’s mainly a fragmented collection of regulatory compliance tools, mostly focused on financial behavior and business oversight. While well over 33 million businesses have been scored under corporate social credit systems, individual scoring remains limited to small pilot cities like Rongcheng. Even there, scoring systems have had "very limited impact" since they've never been elevated to provincial or national levels.What actually gets tracked? Primarily court judgment defaults: people who refuse to pay fines or loans despite having the ability. The Supreme People's Court's blacklist is composed of citizens and companies that refuse to comply with court orders, typically to pay fines or repay loans. Some experimental programs in specific cities track broader social behavior, but these remain isolated experiments.The gap between Western perception and Chinese reality is enormous, and it reveals something important: we're worried about a system that barely exists while ignoring the behavioral scoring systems we actually live with.You already live in social credit.Open your phone right now and count the apps that are scoring your behavior. Uber drivers rate you as a passenger. Instagram tracks your engagement patterns. Your bank is analyzing your Venmo transactions and Afterpay usage. LinkedIn measures your professional networking activity. Amazon evaluates your purchasing behavior. Each platform maintains detailed behavioral profiles that determine your access to services, opportunities, and social connections.We just don't call it social credit.Your credit score doesn't just determine loan eligibility; it affects where you can live, which jobs you can get, and how much you pay for car insurance. But traditional credit scoring is expanding rapidly. Some specialized lenders scan social media profiles as part of alternative credit assessments, particularly for borrowers with limited credit histories. Payment apps and financial services increasingly track spending patterns and transaction behaviors to build comprehensive risk profiles. The European Central Bank has asked some institutions to monitor social media chatter for early warnings of bank runs, though this is more about systemic risk than individual account decisions. Background check companies routinely analyze social media presence for character assessment. LinkedIn algorithmically manages your professional visibility based on engagement patterns, posting frequency, and network connections, rankings that recruiters increasingly rely on to filter candidates. Even dating has become a scoring system: apps use engagement rates and response patterns to determine who rises to the top of the queue and who gets buried.What we have aren't unified social credit systems…yet. They're fragmented behavioral scoring networks that don't directly communicate. Your Uber rating doesn't affect your mortgage rate, and your LinkedIn engagement doesn't determine your insurance premiums. But the infrastructure is being built to connect these systems. We're building the technical and cultural foundations that could eventually create comprehensive social credit systems. The question isn't whether we have Chinese-style social credit now (because we don't). The question is whether we're building toward it without acknowledging what we're creating.Where China's limited experiments have been explicit about scoring criteria, Western systems hide their decision-making processes entirely. Even China's fragmented approach offers more visibility into how behavioral data gets used than our black box algorithms do.You may argue there's a fundamental difference between corporate tracking and government surveillance. Corporations compete; you can switch services. Governments have monopoly power and can restrict fundamental freedoms.This misses three key points: First, switching costs for major platforms are enormous. Try leaving Google's ecosystem or abandoning your LinkedIn network. Second, corporate social credit systems increasingly collaborate. Bad Uber ratings can affect other services; poor credit scores impact everything from insurance to employment. Third, Western governments already access this corporate data through legal channels and data purchases.Social credit systems are spreading globally because they solve coordination problems. They reduce fraud, encourage cooperation, and create behavioral incentives at scale. The question isn't whether Western societies will adopt social credit (because we're building toward it). The question is whether we'll be transparent and accountable about it or continue pretending our algorithmic reputation scores are just neutral technology.Current trends suggest both systems are evolving toward more comprehensive behavioral scoring. European digital identity initiatives are linking multiple service scores. US cities are experimenting with behavioral incentive programs. Corporate platforms increasingly share reputation data. Financial services integrate social media analysis into lending decisions.If both countries evolve toward comprehensive behavioral scoring, and current trends suggest they will, which approach better serves individual agencies? One that admits it's scoring you, or one that pretends algorithmic recommendations are just helpful suggestions?When Uber can destroy your transportation access with a hidden algorithm, and when credit scores determine your housing options through opaque calculations, is that really more free than a system where you know at least some of the behaviors that affect your score?So when China's explicit social credit approach inevitably influences Western platforms, when your apps start showing you the behavioral scores they've always been calculating, when the rules become visible instead of hidden, don't panic.Because for the first time, you'll finally understand the game you've been playing all along. And knowing the rules means you can finally choose whether you want to play.
      ]]></content:encoded>
        </item>
    </channel>
</rss>