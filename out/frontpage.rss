<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hacker News: Front Page</title>
        <link>https://news.ycombinator.com/</link>
        <description>Hacker News RSS</description>
        <lastBuildDate>Tue, 09 Sep 2025 16:41:40 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>github.com/Prabesh01/hnrss-content-extract</generator>
        <language>en</language>
        <atom:link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/frontpage.rss" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[South Koreans feel betrayed by workforce detentions at Georgia Hyundai plant]]></title>
            <link>https://apnews.com/article/south-korea-us-georgia-raid-hyundai-24d990562f5ac20e7d3e983a77a4f7ff</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45184003</guid>
        </item>
        <item>
            <title><![CDATA[How An Attacker's Blunder Gave Us a Rare Look Inside Their Day-to-Day Operations]]></title>
            <link>https://www.huntress.com/blog/rare-look-inside-attacker-operation</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45183589</guid>
            <description><![CDATA[An attacker installed Huntress onto their operating machine, giving us a detailed look at how they’re using AI to build workflows, searching for tools like Evilginx, and researching targets like software development companies.]]></description>
            <content:encoded><![CDATA[Summary
Here at Huntress, we love exposing adversary tradecraft, and we also love when threat actors make blunders. So imagine our delight when a threat actor installed Huntress onto their operating machine—after finding us via one of our advertising campaigns and starting a trial— giving us a sprawling inside look at how they’re using AI to build workflows, searching for tools like Evilginx, and more.
------------------------
We all know that security products are often downloaded by attackers for “evaluation,” but often we can only guess as to how they decided to target a particular technology, or the actions taken while trying out such software. We recently had the pleasure of getting a front seat view into what one attacker did, simply because they installed our agent and let us collect information directly from them. Here, we will cover this strange tale.

How did we get here?
Like most good stories, this one starts in the middle and works its way back and forth. Let’s start with how this person of interest got our attention. One of the tricks of the trade to get people interested in your products is through advertising. As such, we run ads to help lead potential customers to our products. An adverse effect here might be garnering some “unwanted” attention as well. Such is the setting for the beginning of this adventure: it all started with a nicely placed Google ad.
The attacker tripped across our ad while researching another security solution. We confirmed this is how they found us by examining their Google Chrome browser history. An example of how this may have appeared to them in the moment may be seen in Figure 1.

Figure 1: Google search for Bitdefender, leading to a Huntress ad

It appears that the attacker became interested in Huntress while simultaneously trying out Bitdefender. After hitting our comparison page, they could hardly contain themselves and started a trial immediately. We are able to follow their journey through their Chrome history, as seen in Figure 2 below.


    Figure 2: Browser history showing how a search for Bitdefender led to a Huntress trial





It’s no secret that threat actors may install security products for research purposes or even for legitimate use—and in fact, the adversary was interested in other security products in addition to Bitdefender and Huntress. We found evidence that they had bought a Malwarebytes subscription (including the Malwarebytes browser guard extension).

Figure 3: Attacker tries to stay safe with an installed Malwarebytes browser extension 🤣

Threat actor red flags—and our response
We knew this was an adversary, rather than a legitimate user, based on several telling clues. The standout red flag was that the unique machine name used by the individual was the same as one that we had tracked in several incidents prior to them installing the agent. Further investigation revealed other clues, such as the threat actor’s browser history, which appeared to show them trying to actively target organizations, craft phishing messages, find and access running instances of Evilginx, and more. We also have our suspicions that the operating machine where Huntress was installed is being used as a jump box by multiple threat actors—but we don’t have solid evidence to draw firm conclusions at this time.
Huntress analysts went to work evaluating the outstanding indicators of compromise found on the adversary’s host and how they related to data found within authentications to identities at Huntress. Retroactive hunts disclosed a further 20 identities which were compromised; many of which had been accessed by the adversary prior to Huntress’ deployment against the identity, whose activity was limited to refreshing session tokens to maintain access.
Overall, analysis of the adversary’s primary operating infrastructure, hosted on Autonomous System (AS) “12651980 CANADA INC.” (now known as VIRTUO) disclosed a pattern of access of over 2471 unique identities spanning the last two weeks– many of which were preemptively caught by additional detection capabilities such as malicious mail rule creation, or session token theft.
The intelligence gathered by the above has resulted in detections of high confidence against the adversary’s infrastructure; and equipped our systems and analysts to respond to these incidents in significantly less time and with extreme confidence in malice, eliminating adversarial attempts to evade our detections. 
All in all, we were able to see the threat actor’s specific day-to-day activities—from their methodologies to the specific types of organizations (and even individuals) they were interested in. We also saw them begin to tinker with tools and search for tutorials, attempting to learn more. For instance, after installing the Huntress agent, the threat actor took steps to better understand Autoruns.
Figure 4: The threat actor attempting to better understand Autoruns






Overall, over the course of three months we saw an evolution in terms of how the threat actor refined their processes, incorporated AI into their workflows, and targeted different organizations and vertical markets, as outlined in Figure 5 below.

Figure 5: An overview of some of the threat actor’s activities that we saw over the months


Below are some of the specific methodologies that we saw. 

Attacker methodologies
Use of AI for operational efficiency 
The Chrome browser history gave a first-hand look at how the adversary is using AI tools to increase the operational efficiency of their workflows. While there have previously been many reports on how cybercriminals are using AI (based on indicators in phishing messages or landing page content), this is the first time that we have a close-up view of a threat actor embedding AI into their operations in order to automate—and speed up—their workflow.
On May 25, the threat actor signed up for Make.com, which is legitimate workflow automation software, before researching the platform’s Telegram Bot integration feature as a way to launch automated processes (as seen in Figure 6 below). The threat actor then poked around several FAQ sites to better understand how Telegram Bot APIs work and how to set up webhooks.

Figure 6: Signing up for Make.com 



Figure 7: Digging deeper into Telegram Bot APIs


Over time, the threat actor started to get a better grasp of how they could use Make.com for specific workflows, and their browser history shows them starting to rely more heavily on the platform. By the time June 29 rolled around, the threat actor had fully developed their workflow with Make. As seen in Figure 8, the threat actor would first identify the organization of interest (typically after receiving a “tip” from Telegram) before using Google Translate to translate or craft messages related to these organizations. While we don’t have detailed insight into how the threat actor was using Make for these specific workflows, we can see that it was part of the process to automate specific functions. 



        Figure 8: Threat actor starts to rely on automated workflows
        The threat actor also appeared to be interested in other AI tools to help with data generation and writing. We saw multiple Google searches for “free ai no signup” and for “csv generator ai.” We also saw the threat actor using Toolbaz AI, which is a writing assistant; the CSV spreadsheet generator feature of DocsBot AI, which is an AI chatbot tool; and the AI data generator feature of Explo AI, which is an embedded analytics tool.
        
        Finding running instances of Evilginx
        We saw evidence of the threat actor searching for running instances of the Evilginx man-in-the-middle attack framework using Censys, and then attempting to access those instances.

        Figure 9: Using Censys to search for running instances of Evilginx

        
        
        Figure 10: One example of the Evilginx instance that the attacker tried to access

        
        In addition to Evilginx, we also found evidence of multiple installed tools on the threat actor’s system—or, in some cases, an interest in tools based on the threat actor browser history. These tools included recon and attack tool GraphSpy, open source tool Bloodhound, the TeamFiltration framework used for enumeration and exfiltration, and more.  

        Figure 11: Various tools that the attacker may have used


        
        Interest in residential proxy services
        The Chrome browser history also revealed visits by the threat actor to multiple residential proxy webpages, including LunaProxy and Nstbrowser (which bills itself as an anti-detect browser and supports the use of residential proxies). The threat actor visited the pricing plan page for LunaProxy, researched specific products, and looked up quick start guides throughout May, June, and July. Residential proxy services have become increasingly popular with threat actors as a way to route their traffic through residential IP addresses, allowing them to obscure malicious activity, like avoiding suspicious login alerts while using compromised credentials.

        Figure 12: A VirusTotal lookup of LunaProxy.exe, which was in the Chrome history


        
        Research and recon methods
        The Chrome browser history entries also gave us a close view of the attacker’s reconnaissance methods. The threat actor spent a lot of time researching companies across different sectors, from specific banks to “top real estate companies in the US” (also looking up “real estate agents in California”). 
        The threat actor didn’t just search for individual companies—they also looked at all parts of the ecosystem surrounding organizations of interest, from their customer bases to associated third-party companies across the supply chain. For example, the threat actor appeared to start targeting software companies in early July, searching for these types of companies via Google Search and using database marketing tools like ReadyContacts and InfoClutch to scope out how many customers they had and their market share. 
        The threat actor also used the BuiltWith platform, which lets users identify and analyze the technology stacks used by websites. On July 8, browser entries show the attacker conducting an extensive level of research on a prominent ecommerce vendor for managing payments and subscriptions, including a list of its customers, contacts, and market share. The threat actor then used BuiltWith to search for the websites relying on that vendor, before navigating to the BuiltWith sign up page, presumably to access that list.
        The threat actor conducted a fair amount of research into tools used to scrape Telegram group data, including looking at scraper tools like Apify, the Axiom Chrome extension, and the RapidAPI platform (Figure 13).

        Figure 13: While researching data scraping tools the threat actor came across RapidAPI  


        
        Use of Google Translate
        The threat actor used Google Translate extensively, and Chrome browser shows them first visiting bank websites, and then using the translation platform, likely to assist in crafting phishing-related messages, as seen in Figure 14. 

        Figure 14: The threat actor used Google Translate services extensively 



        The attacker often used urlscan to get information about various websites. Tips appear to have come in via Telegram using the getUpdates method.

        Figure 15: Part of the Chrome history around a particular tip

        
        
        Figure 16: Google Translate message

        
        
        Figure 17: Google Translate message: username and password

        
        
        Figure 18: Google Translate message: username and password

        
        There were several entries in the browser history that showed use of Google Translate to translate messages from Portuguese to English alongside browsing banks in Brazil, then evidence of crafting messages later on in their history. 

        
        


        


        
        
        Dark web: STYX market
        We also saw the threat actor express interest in STYX Market, a dark web forum that’s been around since 2023, and was recently called a “rising star for stealer logs, stolen creds, and laundering services” by researchers. After doing some initial research on STYX—as well as other Telegram chat groups and channels—they decided to check out the site for themselves, registering for an account before perusing the catalog of VoIP accounts, stealer logs, SIM cards, and more.

        Figure 19: The threat actor showed an interest in STYX Market


        
        Figure 20: A post from SOCRadar on STYX Market caught the threat actor’s attention 


        
        EDR activities
        Rarely do you ever get the chance to actually shoulder surf a real threat actor. We had such an opportunity when they installed our agent. It starts out mundane enough. We don’t know what they must have dreamed about after ending their shift at 2am UTC the previous night, but as mentioned earlier, you can see them start a trial, download the agent, and install it.

        Figure 21: At 2am UTC, after about 10 hours of inactivity, the threat actor suddenly showed an interest in Bitdefender, which led them to Huntress




        
        The most interesting activity for the start of their day on July 9, 2025 was browsing to urlscan.io to inspect login.incipientcroop[.]com. Shortly after, they logged into Make.com and began working on a project called Voltage_Office356bot (notice the typo). 

        Figure 22: Timeline of EDR and browser histories

        
        
        Figure 23: urlquery info for login.incipientcroop[.]com 

        
        
        Figure 24: Further down on the urlquery page for login.incipientcroop[.]com, there is evidence of Voltage_Office356bot

        
        There is evidence that the threat actor had access to cookie data for two different individuals, and accessed them via Notepad++. They proceeded to open the first file:
        C:\Program Files\Notepad++\notepad++.exe C:\Users\Administrator\Downloads\Telegram Desktop\Cookies_[victim1]@[redacted1][.].com.json
        Then they started looking around to see what they can find, with a Google search for “email osint”.

        Figure 25: Looking for “email osint”

        
        Next, they opened the second cookie file:
        C:\Program Files\Notepad++\notepad++.exe C:\Users\Administrator\Downloads\Telegram Desktop\Cookies_[victim2]@[redacted2][.].com.json
        They then started up Nstbrowser.exe and LunaProxy:
        C:\Program Files\Nstbrowser\Nstbrowser.exeC:\Program Files (x86)\LunaProxy_cata\socks5\LunaProxyDivert.exe  SOCK5 [snip]
        They browsed to an article titled Say Hello to your new cache flow by Synacktiv covering WHFB and Entra ID, followed by a Google search for “whfb prt”, which landed them on the website of a well-known researcher, Dirk-Jan Mollema. 
        They checked their IP address after this:
        C:\Windows\system32\curl.exe ipinfo[.]io
        And then checked their IP address again:
        C:\Windows\system32\curl.exe ipinfo[.]io
        They then tried to use a tool called ROADtools Token eXchange (roadtx):

        C:\Users\Administrator\AppData\Local\Programs\Python\Python313\Scripts\roadtx.exe prtauth -r msgraph -c msteams
        And then erroneously tried to run the same tool (as an executable) via Python:
        C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe  C:\Users\Administrator\AppData\Local\Programs\Python\Python313\Scripts\roadtx.exe prtauth -r msgraph -c msteams
        Then ran it again:
        C:\Users\Administrator\AppData\Local\Programs\Python\Python313\Scripts\roadtx.exe describe
        And then tried to run it again, erroneously, using Python:
        C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe  C:\Users\Administrator\AppData\Local\Programs\Python\Python313\Scripts\roadtx.exe describe
        They seemed to be having trouble. At this point they browsed to Dirk-jan Mollema’s post on Phishing for Microsoft Entra primary refresh tokens. 

        Figure 26: Searching for an answer with keyword whfb prt 

        
        While there, they gained some new inspiration, and discovered a handy little script that could make their life easier:

        Figure 27: Excerpt from Dirk-jan’s blog, pointing to a nifty little script

        
        At this point they went back to their Voltage_Office356bot project before running this new script they’ve downloaded.

        Figure 28: Accessing the Voltage_Office356bot project and running the attack script

        
        They started trying to run the Python script:
        C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe main.py -f roadtx.prt --wfb
        They checked the usage again:
        C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe main.py --wfb
        C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe main.py -h
        Then, they started to run it against the original victim whose cookie file we saw earlier:
        C:\Users\Administrator\AppData\Local\Programs\Python\Python313\python.exe main.py --wfb -u [victim2]@[redacted2][.]com 
        They returned to the first victim’s cookie file:C:\Program Files\Notepad++\notepad++.exe C:\Users\Administrator\Downloads\Telegram Desktop\Cookies_[victim1]@[redacted1][.].com.json
        This is where our EDR data drops off, as they may have become aware of us and uninstalled the agent.
        
        Hours worked in a day
        The attacker’s browser history gives us an unprecedented level of insight into their everyday activity, searches, workflows, research, and more. The browser history shows the threat actor working intensively almost every day between the period of May 29, 2025 through July 9, 2025. 

        Figure 29: Chart of the number of hours per day (label alternates dates) worked based on browser activities


        On many of these days, the browser entries were seen across most hours of the day, logging 12 to 14 hours. But there was some variation, as seen in Figure 29, above: on several days, the threat actor worked as little as one to two hours.
        When we hone in on a few of the days when the most hours were put in, we can see some of the things that piqued the attacker’s interest in those days. We analyzed the urls to see what businesses, or categories they might have fallen into, and then looked to see how many times the attacker visited these sites. 
        We can see a few trends. During these days, the attacker spent a lot of time researching various banking entities and bank personnel. To further expand on some of the graph labels:
        
            
                Attack infra: Malicious websites or servers set up by an attacker (maybe not this one) hosting frameworks like Evilginx and other known tools.
            
            
                Banking: Various banking websites
            
            
                Browser extension: Various browser extensions like ad blockers, etc. installed by the attacker to protect themselves.
            
            
                Corporate & Business: Various business websites not housed under a different category.
            
            
                Crypto: Various cryptocurrency and blockchain websites.
            
            
                Cybersecurity: Various cybersecurity vendor websites. The attacker often signed up for trials at various vendors to test things.
            
            
                Government & military: Various official government or military websites.
            
            
                News, media & information: Various news websites like CNN etc.  The attacker often read articles related to various breaches.
            
            
                OSS: Open source projects, often housed at github or gitlab.
            
            
                Recon: Activities where the attacker was using Censys, Urlscan, Google, etc., to do reconnaissance for a particular target.
            
            
                Research: When the attacker was researching a particular vulnerability, tool, or attack.
            
            
                Sandbox: The attacker often seemed interested in various types of malware that were on VirusTotal, Joe’s Sandbox, and other online sandboxes.
            
            
                Social media: Various telegram, X, and other social media posts read by the attacker.
            
            
                Software: Various legitimate software, like 7zip.
            
            
                Telecommunications: A telecommunication website, like Verizon.
            
            
                Web & IT infrastructure: Various online hosting services, like Mega, Amazon AWS, and Azure. 
            
        

        Figure 30: Activities on May 29, 2025

        
        We can see that from May 29 to June 1, 2025, the attacker was mostly looking at various banking websites. Digging further into their activities, you see them researching various banks, reading about Telegram Bots, then downloading a blueprint from Make.

        Figure 31: A deeper look at some of the activities on May 29, 2025

        
        The next day, it seems that the attacker spent a little more time researching various attack infrastructure, in addition to focusing on banks, and similar activities seen previously.

        Figure 32: Activities on May 30, 2025

        
        On May 31, 2025 and June 1, 2025, the attacker switched their focus back to mostly researching banking websites.

        Figure 33: Activities on May 31, 2025

        
        
        Figure 34: Activities on June 1, 2025

        
        
        Figure 35: Regions Focused on by the Attacker from May 29 - June 1, 2025

        
        The other interesting thing was that the attacker was mostly focused on banks and sites that were in Nigeria during this time period, even looking for things like:“No. 1 regulated crypto exchange in Nigeria.”
        “top crypto companies nigeria”
        “Best Crypto Exchanges in Nigeria”“Top Cryptocurrency Companies in Nigeria”
        While we don’t know where the attacker is based, the machine they had installed our agent upon appeared to be based in the United States, on the West Coast, based on the machine’s internal time zone and IP address.

        Figure 36: Activities on July 9, 2025

        
        It seems that the attacker had spent quite some time looking at our various capabilities after they had started a trial with us. Figure 36 above shows just how much more time they spent interacting with the Huntress website, and particularly the account dashboard once they had started the trial.
        
        Lessons learned
        This incident gave us in-depth information about the day-to-day activities of a threat actor, from the tools they were interested in to the ways they conducted research and approached different aspects of attacks. 
        Upon confirming that the machine name was one used by an adversary, we decided to release these details because they give an invaluable understanding into the mindset and behaviors of threat actors behind attacks. For other defenders, we hope that this information can help add context around the ways that threat actors conduct research and launch attacks at the backend—and the different types of organizations, tools, and platforms that interest them. 
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[X open sourced their latest algorithm]]></title>
            <link>https://github.com/twitter/the-algorithm</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45183039</guid>
            <description><![CDATA[Source code for the X Recommendation Algorithm. Contribute to twitter/the-algorithm development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[X's Recommendation Algorithm
X's Recommendation Algorithm is a set of services and jobs that are responsible for serving feeds of posts and other content across all X product surfaces (e.g. For You Timeline, Search, Explore, Notifications). For an introduction to how the algorithm works, please refer to our engineering blog.
Architecture
Product surfaces at X are built on a shared set of data, models, and software frameworks. The shared components included in this repository are listed below:



Type
Component
Description




Data
tweetypie
Core service that handles the reading and writing of post data.



unified-user-actions
Real-time stream of user actions on X.



user-signal-service
Centralized platform to retrieve explicit (e.g. likes, replies) and implicit (e.g. profile visits, tweet clicks) user signals.


Model
SimClusters
Community detection and sparse embeddings into those communities.



TwHIN
Dense knowledge graph embeddings for Users and Posts.



trust-and-safety-models
Models for detecting NSFW or abusive content.



real-graph
Model to predict the likelihood of an X User interacting with another User.



tweepcred
Page-Rank algorithm for calculating X User reputation.



recos-injector
Streaming event processor for building input streams for GraphJet based services.



graph-feature-service
Serves graph features for a directed pair of users (e.g. how many of User A's following liked posts from User B).



topic-social-proof
Identifies topics related to individual posts.



representation-scorer
Compute scores between pairs of entities (Users, Posts, etc.) using embedding similarity.


Software framework
navi
High performance, machine learning model serving written in Rust.



product-mixer
Software framework for building feeds of content.



timelines-aggregation-framework
Framework for generating aggregate features in batch or real time.



representation-manager
Service to retrieve embeddings (i.e. SimClusers and TwHIN).



twml
Legacy machine learning framework built on TensorFlow v1.



The product surfaces currently included in this repository are the For You Timeline and Recommended Notifications.
For You Timeline
The diagram below illustrates how major services and jobs interconnect to construct a For You Timeline.

The core components of the For You Timeline included in this repository are listed below:



Type
Component
Description




Candidate Source
search-index
Find and rank In-Network posts. ~50% of posts come from this candidate source.



tweet-mixer
Coordination layer for fetching Out-of-Network tweet candidates from underlying compute services.



user-tweet-entity-graph (UTEG)
Maintains an in memory User to Post interaction graph, and finds candidates based on traversals of this graph. This is built on the GraphJet framework. Several other GraphJet based features and candidate sources are located here.



follow-recommendation-service (FRS)
Provides Users with recommendations for accounts to follow, and posts from those accounts.


Ranking
light-ranker
Light Ranker model used by search index (Earlybird) to rank posts.



heavy-ranker
Neural network for ranking candidate posts. One of the main signals used to select timeline posts post candidate sourcing.


Post mixing & filtering
home-mixer
Main service used to construct and serve the Home Timeline. Built on product-mixer.



visibility-filters
Responsible for filtering X content to support legal compliance, improve product quality, increase user trust, protect revenue through the use of hard-filtering, visible product treatments, and coarse-grained downranking.



timelineranker
Legacy service which provides relevance-scored posts from the Earlybird Search Index and UTEG service.



Recommended Notifications
The core components of Recommended Notifications included in this repository are listed below:



Type
Component
Description




Service
pushservice
Main recommendation service at X used to surface recommendations to our users via notifications.


Ranking
pushservice-light-ranker
Light Ranker model used by pushservice to rank posts. Bridges candidate generation and heavy ranking by pre-selecting highly-relevant candidates from the initial huge candidate pool.



pushservice-heavy-ranker
Multi-task learning model to predict the probabilities that the target users will open and engage with the sent notifications.



Build and test code
We include Bazel BUILD files for most components, but not a top-level BUILD or WORKSPACE file. We plan to add a more complete build and test system in the future.
Contributing
We invite the community to submit GitHub issues and pull requests for suggestions on improving the recommendation algorithm. We are working on tools to manage these suggestions and sync changes to our internal repository. Any security concerns or issues should be routed to our official bug bounty program through HackerOne. We hope to benefit from the collective intelligence and expertise of the global community in helping us identify issues and suggest improvements, ultimately leading to a better X.
Read our blog on the open source initiative here.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[We All Dodged a Bullet]]></title>
            <link>https://xeiaso.net/notes/2025/we-dodged-a-bullet/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45183029</guid>
            <description><![CDATA[That NPM attack could have been so much worse.]]></description>
            <content:encoded><![CDATA[ Loading...Please wait a moment while we ensure the security of your connection.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A new experimental Go API for JSON]]></title>
            <link>https://go.dev/blog/jsonv2-exp</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45182770</guid>
            <description><![CDATA[Go 1.25 introduces experimental support for encoding/json/jsontext and encoding/json/v2 packages.]]></description>
            <content:encoded><![CDATA[
      Joe Tsai, Daniel Martí, Johan Brandhorst-Satzkorn, Roger Peppe, Chris Hines,  and Damien Neil
      9 September 2025
      
Introduction
JavaScript Object Notation (JSON)
is a simple data interchange format. Almost 15 years ago,
we wrote about support for JSON in Go,
which introduced the ability to serialize and deserialize Go types to and from JSON data.
Since then, JSON has become the most popular data format used on the Internet.
It is widely read and written by Go programs,
and encoding/json now ranks as the 5th most imported Go package.
Over time, packages evolve with the needs of their users,
and encoding/json is no exception. This blog post is about Go 1.25’s new
experimental encoding/json/v2 and encoding/json/jsontext packages,
which bring long-awaited improvements and fixes.
This post argues for a new major API version,
provides an overview of the new packages,
and explains how you can make use of it.
The experimental packages are not visible by default and
may undergo future API changes.
Problems with encoding/json
Overall, encoding/json has held up well.
The idea of marshaling and unmarshaling arbitrary Go types
with some default representation in JSON, combined with the ability to
customize the representation, has proven to be highly flexible.
However, in the years since its introduction,
various users have identified numerous shortcomings.
Behavior flaws
There are various behavioral flaws in encoding/json:


Imprecise handling of JSON syntax: Over the years, JSON has seen
increased standardization in order for programs to properly communicate.
Generally, decoders have become stricter at rejecting ambiguous inputs,
to reduce the chance that two implementations will have different
(successful) interpretations of a particular JSON value.


encoding/json currently accepts invalid UTF-8,
whereas the latest Internet Standard (RFC 8259) requires valid UTF-8.
The default behavior should report an error in the presence of invalid UTF-8,
instead of introducing silent data corruption,
which may cause problems downstream.


encoding/json currently accepts objects with duplicate member names.
RFC 8259 does not specify how to handle duplicate names,
so an implementation is free to choose an arbitrary value,
merge the values, discard the values, or report an error.
The presence of a duplicate name results in a JSON value
without a universally agreed upon meaning.
This could be exploited by attackers in security applications
and has been exploited before (as in CVE-2017-12635).
The default behavior should err on the side of safety and reject duplicate names.




Leaking nilness of slices and maps: JSON is often used to communicate with
programs using JSON implementations that do not allow null to be unmarshaled
into a data type expected to be a JSON array or object.
Since encoding/json marshals a nil slice or map as a JSON null,
this may lead to errors when unmarshaling by other implementations.
A survey
indicated that most Go users prefer that nil slices and maps
are marshaled as an empty JSON array or object by default.


Case-insensitive unmarshaling: When unmarshaling, a JSON object member name
is resolved to a Go struct field name using a case-insensitive match.
This is a surprising default, a potential security vulnerability, and a performance limitation.


Inconsistent calling of methods: Due to an implementation detail,
MarshalJSON methods declared on a pointer receiver
are inconsistently called by encoding/json. While regarded as a bug,
this cannot be fixed as too many applications depend on the current behavior.


API deficiencies
The API of encoding/json can be tricky or restrictive:


It is difficult to correctly unmarshal from an io.Reader.
Users often write json.NewDecoder(r).Decode(v),
which fails to reject trailing junk at the end of the input.


Options can be set on the Encoder and Decoder types,
but cannot be used with the Marshal and Unmarshal functions.
Similarly, types implementing the Marshaler and Unmarshaler interfaces
cannot make use of the options and there is no way to plumb options down the call stack.
For example, the Decoder.DisallowUnknownFields option loses its effect
when calling a custom UnmarshalJSON method.


The Compact, Indent, and HTMLEscape functions write to a bytes.Buffer
instead of something more flexible like a []byte or io.Writer.
This limits the usability of those functions.


Performance limitations
Setting aside internal implementation details,
the public API commits it to certain performance limitations:


MarshalJSON: The MarshalJSON interface method forces the implementation
to allocate the returned []byte. Also, the semantics require that
encoding/json verify that the result is valid JSON
and also to reformat it to match the specified indentation.


UnmarshalJSON: The UnmarshalJSON interface method requires that
a complete JSON value be provided (without any trailing data).
This forces encoding/json to parse the JSON value to be unmarshaled
in its entirety to determine where it ends before it can call UnmarshalJSON.
Afterwards, the UnmarshalJSON method itself must parse the provided JSON value again.


Lack of streaming: Even though the Encoder and Decoder types operate
on an io.Writer or io.Reader, they buffer the entire JSON value in memory.
The Decoder.Token method for reading individual tokens is allocation-heavy
and there is no corresponding API for writing tokens.


Furthermore, if the implementation of a MarshalJSON or UnmarshalJSON method
recursively calls the Marshal or Unmarshal function,
then the performance becomes quadratic.
Trying to fix encoding/json directly
Introducing a new, incompatible major version of a package is a heavy consideration.
If possible, we should try to fix the existing package.
While it is relatively easy to add new features,
it is difficult to change existing features.
Unfortunately, these problems are inherent consequences of the existing API,
making them practically impossible to fix within the Go 1 compatibility promise.
We could in principle declare separate names, such as MarshalV2 or UnmarshalV2,
but that is tantamount to creating a parallel namespace within the same package.
This leads us to encoding/json/v2 (henceforth called v2),
where we can make these changes within a seperate v2 namespace
in contrast to encoding/json (henceforth called v1).
Planning for encoding/json/v2
The planning for a new major version of encoding/json spanned years.
In late 2020, spurred on by the inability to fix issues in the current package,
Daniel Martí (one of the maintainers of encoding/json) first drafted his
thoughts on what a hypothetical v2 package should look like.
Separately, after previous work on the Go API for Protocol Buffers,
Joe Tsai was disapppointed that the protojson package
needed to use a custom JSON implementation because encoding/json was
neither capable of adhering to the stricter JSON standard that the
Protocol Buffer specification required,
nor of efficiently serializing JSON in a streaming manner.
Believing a brighter future for JSON was both beneficial and achievable,
Daniel and Joe joined forces to brainstorm on v2 and
started to build a prototype
(with the initial code being a polished version of the JSON serialization logic from the Go protobuf module).
Over time, a few others (Roger Peppe, Chris Hines, Johan Brandhorst-Satzkorn, and Damien Neil)
joined the effort by providing design review, code review, and regression testing.
Many of the early discussions are publicly available in our
recorded meetings and
meeting notes.
This work has been public since the beginning,
and we increasingly involved the wider Go community,
first with a
GopherCon talk and
discussion posted in late 2023,
formal proposal posted in early 2025,
and most recently adopting encoding/json/v2 as a Go experiment
(available in Go 1.25) for wider-scale testing by all Go users.
The v2 effort has been going on for 5 years,
incorporating feedback from many contributors and also gaining valuable
empirical experience from use in production settings.
It’s worth noting that it’s largely been developed and promoted by people
not employed by Google, demonstrating that the Go project is a collaborative endeavor
with a thriving global community dedicated to improving the Go ecosystem.
Building on encoding/json/jsontext
Before discussing the v2 API, we first introduce the experimental
encoding/json/jsontext package
that lays the foundation for future improvements to JSON in Go.
JSON serialization in Go can be broken down into two primary components:

syntactic functionality that is concerned with processing JSON based on its grammar, and
semantic functionality that defines the relationship between JSON values and Go values.

We use the terms “encode” and “decode” to describe syntactic functionality and
the terms “marshal” and “unmarshal” to describe semantic functionality.
We aim to provide a clear distinction between functionality
that is purely concerned with encoding versus that of marshaling.
This diagram provides an overview of this separation.
Purple blocks represent types, while blue blocks represent functions or methods.
The direction of the arrows approximately represents the flow of data.
The bottom half of the diagram, implemented by the jsontext package,
contains functionality that is only concerned with syntax,
while the upper half, implemented by the json/v2 package,
contains functionality that assigns semantic meaning to syntactic data
handled by the bottom half.
The basic API of jsontext is the following:
package jsontext

type Encoder struct { ... }
func NewEncoder(io.Writer, ...Options) *Encoder
func (*Encoder) WriteValue(Value) error
func (*Encoder) WriteToken(Token) error

type Decoder struct { ... }
func NewDecoder(io.Reader, ...Options) *Decoder
func (*Decoder) ReadValue() (Value, error)
func (*Decoder) ReadToken() (Token, error)

type Kind byte
type Value []byte
func (Value) Kind() Kind
type Token struct { ... }
func (Token) Kind() Kind

The jsontext package provides functionality for interacting with JSON
at a syntactic level and derives its name from
RFC 8259, section 2
where the grammar for JSON data is literally called JSON-text.
Since it only interacts with JSON at a syntactic level,
it does not depend on Go reflection.
The Encoder and
Decoder
provide support for encoding and decoding JSON values and tokens.
The constructors
accept variadic options
that affect the particular behavior of encoding and decoding.
Unlike the Encoder and Decoder types declared in v1,
the new types in jsontext avoid muddling the distinction between syntax and
semantics and operate in a truly streaming manner.
A JSON value is a complete unit of data and is represented in Go as
a named []byte.
It is identical to RawMessage in v1.
A JSON value is syntactically composed of one or more JSON tokens.
A JSON token is represented in Go as the opaque Token type
with constructors and accessor methods.
It is analogous to Token in v1
but is designed represent arbitrary JSON tokens without allocation.
To resolve the fundamental performance problems with
the MarshalJSON and UnmarshalJSON interface methods,
we need an efficient way of encoding and decoding JSON
as a streaming sequence of tokens and values.
In v2, we introduce the MarshalJSONTo and UnmarshalJSONFrom interface methods
that operate on an Encoder or Decoder, allowing the methods’ implementations
to process JSON in a purely streaming manner. Thus, the json package need not
be responsible for validating or formatting a JSON value returned by MarshalJSON,
nor would it need to be responsible for determining the boundaries of a JSON value
provided to UnmarshalJSON. These responsibilities belong to the Encoder and Decoder.
Introducing encoding/json/v2
Building on the jsontext package, we now introduce the experimental
encoding/json/v2 package.
It is designed to fix the aforementioned problems,
while remaining familiar to users of the v1 package.
Our goal is that usages of v1 will operate mostly the same if directly migrated to v2.
In this article, we will primarily cover the high-level API of v2.
For examples on how to use it, we encourage readers to
study the examples in the v2 package or
read Anton Zhiyanov’s blog covering the topic.
The basic API of v2 is the following:
package json

func Marshal(in any, opts ...Options) (out []byte, err error)
func MarshalWrite(out io.Writer, in any, opts ...Options) error
func MarshalEncode(out *jsontext.Encoder, in any, opts ...Options) error

func Unmarshal(in []byte, out any, opts ...Options) error
func UnmarshalRead(in io.Reader, out any, opts ...Options) error
func UnmarshalDecode(in *jsontext.Decoder, out any, opts ...Options) error

The Marshal
and Unmarshal functions
have a signature similar to v1, but accept options to configure their behavior.
The MarshalWrite
and UnmarshalRead functions
directly operate on an io.Writer or io.Reader,
avoiding the need to temporarily construct an Encoder or Decoder
just to write or read from such types.
The MarshalEncode
and UnmarshalDecode functions
operate on a jsontext.Encoder and jsontext.Decoder and
is actually the underlying implementation of the previously mentioned functions.
Unlike v1, options are a first-class argument to each of the marshal and unmarshal functions,
greatly extending the flexibility and configurability of v2.
There are several options available
in v2 which are not covered by this article.
Type-specified customization
Similar to v1, v2 allows types to define their own JSON representation
by satisfying particular interfaces.
type Marshaler interface {
    MarshalJSON() ([]byte, error)
}
type MarshalerTo interface {
    MarshalJSONTo(*jsontext.Encoder) error
}

type Unmarshaler interface {
    UnmarshalJSON([]byte) error
}
type UnmarshalerFrom interface {
    UnmarshalJSONFrom(*jsontext.Decoder) error
}

The Marshaler
and Unmarshaler interfaces
are identical to those in v1.
The new MarshalerTo
and UnmarshalerFrom interfaces
allow a type to represent itself as JSON using a jsontext.Encoder or jsontext.Decoder.
This allows options to be forwarded down the call stack, since options
can be retrieved via the Options accessor method on the Encoder or Decoder.
See the OrderedObject example
for how to implement a custom type that maintains the ordering of JSON object members.
Caller-specified customization
In v2, the caller of Marshal and Unmarshal can also specify
a custom JSON representation for any arbitrary type,
where caller-specified functions take precedence over type-defined methods
or the default representation for a particular type.
func WithMarshalers(*Marshalers) Options

type Marshalers struct { ... }
func MarshalFunc[T any](fn func(T) ([]byte, error)) *Marshalers
func MarshalToFunc[T any](fn func(*jsontext.Encoder, T) error) *Marshalers

func WithUnmarshalers(*Unmarshalers) Options

type Unmarshalers struct { ... }
func UnmarshalFunc[T any](fn func([]byte, T) error) *Unmarshalers
func UnmarshalFromFunc[T any](fn func(*jsontext.Decoder, T) error) *Unmarshalers

MarshalFunc and
MarshalToFunc
construct a custom marshaler that can be passed to a Marshal call
using WithMarshalers to override the marshaling of particular types.
Similarly,
UnmarshalFunc and
UnmarshalFromFunc
support similar customization for Unmarshal.
The ProtoJSON example
demonstrates how this feature allows serialization of all
proto.Message types
to be handled by the protojson package.
Behavior differences
While v2 aims to behave mostly the same as v1,
its behavior has changed in some ways
to address problems in v1, most notably:


v2 reports an error in the presence of invalid UTF-8.


v2 reports an error if a JSON object contains a duplicate name.


v2 marshals a nil Go slice or Go map as an empty JSON array or JSON object, respectively.


v2 unmarshals a JSON object into a Go struct using a
case-sensitive match from the JSON member name to the Go field name.


v2 redefines the omitempty tag option to omit a field if it would have
encoded as an “empty” JSON value (which are null, "", [], and {}).


v2 reports an error when trying to serialize a time.Duration,
which currently has no default representation,
but provides options to let the caller decide.


For most behavior changes, there is a struct tag option or caller-specified option
that can configure the behavior to operate under v1 or v2 semantics,
or even other caller-determined behavior.
See “Migrating to v2” for more information.
Performance optimizations
The Marshal performance of v2 is roughly at parity with v1.
Sometimes it is slightly faster, but other times it is slightly slower.
The Unmarshal performance of v2 is significantly faster than v1,
with benchmarks demonstrating improvements of up to 10x.
In order to obtain greater performance gains,
existing implementations of
Marshaler and
Unmarshaler should
migrate to also implement
MarshalerTo and
UnmarshalerFrom,
so that they can benefit from processing JSON in a purely streaming manner.
For example, recursive parsing of OpenAPI specifications in UnmarshalJSON methods
significantly hurt performance in a particular service of Kubernetes
(see kubernetes/kube-openapi#315),
while switching to UnmarshalJSONFrom improved performance by orders of magnitude.
For more information, see the
go-json-experiment/jsonbench
repository.
Retroactively improving encoding/json
We want to avoid two separate JSON implementations in the Go standard library,
so it is critical that, under the hood, v1 is implemented in terms of v2.
There are several benefits to this approach:


Gradual migration: The Marshal and Unmarshal functions in v1 or v2
represent a set of default behaviors that operate according to v1 or v2 semantics.
Options can be specified that configure Marshal or Unmarshal to operate with
entirely v1, mostly v1 with a some v2, a mix of v1 or v2,
mostly v2 with some v1, or entirely v2 semantics.
This allows for gradual migration between the default behaviors of the two versions.


Feature inheritance: As backward-compatible features are added to v2,
they will inherently be made available in v1. For example, v2 adds
support for several new struct tag options such as inline or format and also
support for the MarshalJSONTo and UnmarshalJSONFrom interface methods,
which are both more performant and flexible.
When v1 is implemented in terms of v2, it will inherit support for these features.


Reduced maintenance: Maintenance of a widely used package demands significant effort.
By having v1 and v2 use the same implementation, the maintenance burden is reduced.
In general, a single change will fix bugs, improve performance, or add functionality to both versions.
There is no need to backport a v2 change with an equivalent v1 change.


While select parts of v1 may be deprecated over time (supposing v2 graduates from being an experiment),
the package as a whole will never be deprecated.
Migrating to v2 will be encouraged, but not required.
The Go project will not drop support for v1.
Experimenting with jsonv2
The newer API in the encoding/json/jsontext and encoding/json/v2 packages are not visible by default.
To use them, build your code with GOEXPERIMENT=jsonv2 set in your environment or with the goexperiment.jsonv2 build tag.
The nature of an experiment is that the API is unstable and may change in the future.
Though the API is unstable, the implementation is of a high quality and
has been successfully used in production by several major projects.
The fact that v1 is implemented in terms of v2 means that the underlying implementation of v1
is completely different when building under the jsonv2 experiment.
Without changing any code, you should be able to run your tests
under jsonv2 and theoretically nothing new should fail:
GOEXPERIMENT=jsonv2 go test ./...

The re-implementation of v1 in terms of v2 aims to provide identical behavior
within the bounds of the Go 1 compatibility promise,
though some differences might be observable such as the exact wording of error messages.
We encourage you to run your tests under jsonv2 and
report any regressions on the issue tracker.
Becoming an experiment in Go 1.25 is a significant milestone on the road to
formally adopting encoding/json/jsontext and encoding/json/v2 into the standard library.
However, the purpose of the jsonv2 experiment is to gain broader experience.
Your feedback will determine our next steps, and the outcome of this experiment,
which may result in anything from abandonment of the effort, to adoption as stable packages of Go 1.26.
Please share your experience on go.dev/issue/71497, and help determine the future of Go.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Disrupting the DRAM roadmap with capacitor-less IGZO-DRAM technology]]></title>
            <link>https://www.imec-int.com/en/articles/disrupting-dram-roadmap-capacitor-less-igzo-dram-technology</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45182418</guid>
            <description><![CDATA[This technology review explains hpw 2T0C IGZO-based DRAM opens doors to high-density 3D DRAM and embedded DRAM.]]></description>
            <content:encoded><![CDATA[A novel DRAM memory cell with two IGZO-based transistorsThe bit cell of dynamic random-access memory (DRAM), the main memory within traditional compute architectures, is conceptually very simple. It consists of one capacitor (1C) and one silicon (Si)-based transistor (1T). While the capacitor’s role is to store a charge, the transistor is used to access the capacitor, either to read how much charge is stored or to store a new charge.Over the years, bit cell density scaling allowed the industry to introduce subsequent generations of DRAM technology and cope with the growing demand for DRAM. But since about 2015, DRAM memory technology has struggled to keep pace with the performance improvement of the processor’s logic part: scaling, cost, and power efficiency issues form the building blocks of a rising ‘memory wall’. The large capacitor constrains scalability and 3D integration of the 1T1C bit cell, the ultimate path towards high-density DRAM. In addition, as the access transistor gets smaller, it provides an increasingly large leakage path for the capacitor’s charge to drain away. This lowers the data retention time and requires DRAM cells to be refreshed more frequently – impacting the power consumption.In 2020, imec reported a novel DRAM bit cell concept that can solve these two issues in one go: a bit cell made up of two thin-film transistors (2T, one for read, one for write) and no capacitor (0C) [1]. The conduction channel of the thin-film transistors is composed of an oxide semiconductor, such as indium-gallium-zinc-oxide (IGZO). Due to its wide bandgap, IGZO-based transistors have an extremely low off current, benefitting the memory’s retention time, refresh rate, and power consumption. The longer retention time also relaxes the requirement for the storage capacitance, allowing the parasitic capacitance of the read transistor to take over the role of the storage element.In addition, fabricating an IGZO 2T0C bit cell is simpler and more cost-effective than traditional cells. Other than Si, IGZO material can be deposited at relatively low temperatures, making it compatible with back-end-of-line (BEOL) processing. This opens doors to new DRAM architectures. First, it allows the DRAM periphery – the logic transistors that enable the full functionality of the DRAM chip – to be moved under the DRAM memory array instead of residing next to it. This reduces the footprint of the DRAM memory chip and makes connections between the array and periphery more efficient. In this configuration, the 2T0C DRAM bit cells are integrated into the peri’s BEOL, which is allowed by the properties of the IGZO material.Second, the novel bit cell paves the way for stacked configurations, providing an additional increase in density. Either ‘2D’ or ‘true 3D’ stacking can be envisioned. With 2D stacking, several layers with ‘planar’ DRAM memory arrays are stacked on top of each other. With 3D stacking, the transistors that make up the 2T0C bit cell are stacked and monolithically integrated into vertically aligned plugs inspired by 3D NAND technology. The ability to deposit IGZO conformally in these high-aspect-ratio plugs, enabled by the technique of atomic layer deposition (ALD), is a key enabler of this 3D structure. These stacked configurations will help tear down the memory wall, allowing DRAM memories to continue playing a crucial role in data-intensive applications such as cloud computing and artificial intelligence. Implementing the two transistors on different levels (stacked 2T0C) has an additional benefit. A low-off-current oxide semiconductor channel is only fundamental in the write transistor to ensure long retention. For the read transistor, on current is the critical parameter, as it drives the read time, and high-mobility channel materials can be considered. The two transistors can thus be optimized separately.First ‘conceptual’ demonstration of an IGZO 2T0C DRAM bit cellAfter pioneering the concept, imec provided the first experimental demonstration of a functional 2T0C DRAM cell at the 2020 IEEE International Electron Devices Meeting (IEDM) [1]. Thanks to a low (extracted) off current of 3x10-19A/µm, these first 2T0C DRAM cells exhibited a retention time >400s, about 1,000 times longer than typical DRAM refresh times. The results were obtained after scaling and optimizing IGZO-based thin-film transistors processed on 300mm wafers. Optimizations were directed towards suppressing the impact of oxygen and hydrogen defects, one of the main challenges for developing good-performing IGZO-based transistors. Optimized transistors with a 45nm gate length were then integrated into a 2T0C DRAM bit cell architecture, where the parasitic capacitance of the read transistor served as the storage element.Improving performance through bit cell engineering: an overviewNext, imec started to explore the knobs that allow the boosting of 2T0C DRAM density and improve performance and reliability metrics such as off current, data retention, endurance, on current, and threshold voltage (stability). In 2021 at IEDM, imec researchers presented a much-improved IGZO-based 2T0C DRAM bit cell with >1000s retention time and practically unlimited endurance (>1011 read and write cycles) with <10ns write time [2].These breakthrough results followed an optimization of the IGZO transistor’s material stack and integration scheme: a gate-last approach with buried oxygen tunnel and self-aligned contacts combined with a scaled gate dielectric (Al2O3) thickness. Implementing the buried oxide tunnel in combination with an anneal in an O2 ambient reduced the oxygen-vacancy concentration in the IGZO channel, benefitting on and off currents.This IGZO-DRAM technology set the stage for more aggressive DRAM scaling. The gate length of the IGZO transistor was scaled down to 14nm while still preserving >100s retention. The researchers also showed a variant of the 2T0C DRAM cell with much reduced IGZO layer thickness (5nm). This eliminated the need for an oxygen tunnel and O2 anneal step, leading to a simplified process flow. Imec also demonstrated functional transistors with conformally deposited thin IGZO channels (5nm, through ALD), a stepping stone towards 3D DRAM integration. [2]More recently, imec used the reactive ion etch (RIE) technique instead of the commonly used ion beam etch (IBE) for patterning the active module of the 2T0C transistor. RIE allows for patterning at tiny dimensions (sub-100nm) with limited damage, further reducing area consumption. Moreover, using these transistors in 2T0C DRAM bit cells led to a much-improved retention time of >4.5 hours, thanks to an effective suppression of extrinsic leakage paths on the sidewalls of the transistor [3].The potential of imec’s disruptive DRAM concept triggered interest from universities, research institutes, and companies worldwide. Several research groups started investigating other bit cell configurations, transistor performance ‘boosters,’ and alternative oxide semiconductor materials. For example, IMECAS (Institute of Microelectronics of the Chinese Academy of Sciences), publishing about 2T0C IGZO DRAM since 2021, demonstrated an alternative 2T0C configuration to benefit multibit operation [4]. Later, they were the first to show transistors with a vertically integrated IGZO channel. The ability to monolithically stack the ‘vertical’ read and write transistors enables area-efficient 4F2 2D DRAM cell configurations (F being the minimum feature size for a given technology node) [5]. Macronix also implemented a 3D 2T0C bit cell with gate-around (GA) and channel-all-around (CAA) IGZO FETs [6]. Peking University optimized IGZO transistors based on material stack engineering, which enhanced 2T0C DRAM cell performance [7].Thin-film transistors with oxide semiconductor channel materials other than IGZO are also being considered. One promising material is W-doped indium oxide (IWO), as showcased by Notre Dame University [8]. Stanford University initially considered indium-tin-oxide (ITO) for 2T0C implementation [9]. In 2024, in collaboration with TSMC, they also used IWO to build an n-type thin-film transistor. In addition, they were the first to combine the IWO n-type transistor with a p-type transistor also made of an oxide semiconductor (tin-oxide (SnO) in this case) for improved performance and reduction of coupling effects [10]. Most oxide semiconductor transistors are inherently n-type, which is why 2T0C DRAM bit cells usually implement two n-type transistors, for reading and writing.The path to industry-viable IGZO-based 3D DRAM2T0C IGZO-DRAM has recently been added to the long-term DRAM technology roadmap, according to a 2024 report of Yole Intelligence. The technology is envisioned as one of the possible approaches toward a much-desired 3D DRAM. Moreover, the demand for AI on edge devices is expected to surge in the coming years, generating the need for high-density embedded DRAM (eDRAM). The capacitor-less IGZO-DRAM technology is a very attractive candidate for this application. Building on its pioneering activities, imec started developing BEOL-compatible eDRAM implementations.Yet, one key concern has made the memory industry hesitant to adopt IGZO-based DRAM technology: reliability. The n-type IGZO transistors mainly degrade because of the positive bias temperature instability (PBTI), which is manifested as an undesirable shift of the device threshold voltage and a decrease in the drain current. Worrisome is the hydrogen-related contribution to PBTI, a problem less familiar to the chip industry. Through the years, imec has made considerable progress in assessing, understanding, and modeling reliability failure, paving the way to building reliable IGZO transistors with a target lifetime of five years [11,12].This work has been enabled in part by the NanoIC pilot line. The acquisition and operation are jointly funded by the Chips Joint Undertaking, through the European Union’s Digital Europe (101183266) and Horizon Europe programs (101183277), as well as by the participating states Belgium (Flanders), France, Germany, Finland, Ireland and Romania. For more information, visit nanoic-project.eu.This article was originally published in Nature Reviews Electrical Engineering.Want to know more?[1] A. Belmonte et al. Capacitor-less, long-retention (>400s) DRAM cell paving the way towards low-power and high-density monolithic 3D DRAM. 2020 IEEE International Electron Devices Meeting.[2] A. Belmonte et al. Tailoring IGZO-TFT architecture for capacitorless DRAM, demonstrating >103s retention, >1011 cycles endurance and Lg scalability down to 14nm. 2021 IEEE International Electron Devices Meeting.[3] A. Belmonte et al. Lowest IOFF<3x10-21A/µm in capacitorless DRAM achieved by reactive ion etch of IGZO-TFT. 2023 Symposium on VLSI Technology and Circuits.[4] K. Chen et al. Improved multi-bit statistics of novel dual-gate IGZO 2T0C DRAM with In-cell VTH compensation and ∆VSN/∆VDATA boosting technique. 2023 IEEE International Electron Devices Meeting.[5] F. Liao et al. Novel 4F2 multi-bit dual-gate 2T0C for high-density DRAM with improved vertical-channel IGZO TFTs by self-aligned single-step process. 2024 IEEE International Electron Devices Meeting.[6] F.-M. Lee et al. Bit-Cost-Scalable 3D DRAM Architecture and Unit Cell First Demonstrated with Integrated Gate-Around and Channel-Around IGZO FETs. 2024 Symposium on VLSI Technology and Circuits.[7] Q. Hu et al. Optimized IGZO FETs for capacitorless DRAM with retention of 10 ks at RT and 7 ks at 85°C at zero Vhold with sub-10ns speed and 3-bit operation. 2022 IEEE International Electron Devices Meeting.[8] H. Ye et al. Double-gate W-doped amorphous indium oxide transistors for monolithic 3D capacitorless gain cell eDRAM. 2022 IEEE International Electron Devices Meeting.[9] S. Liu et al. Gain cell memory on logic platform – device guidelines for oxide semiconductor transistor materials development. 2023 IEEE International Electron Devices Meeting.[10] F. F. Athena et al. First demonstration of an n-p oxide semiconductor complementary gain cell memory. 2024 IEEE International Electron Devices Meeting.[11] A. Chasin et al. Understanding and modelling the PBTI reliability of thin-film IGZO transistors. 2024 IEEE International Electron Devices Meeting.[12] A. Chasin et al. Unraveling BTI in IGZO devices: impact of device architecture, channel film deposition method and stoichiometry/phase, and device operating conditions. 2024 IEEE International Electron Devices Meeting.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Claude can now create and edit files]]></title>
            <link>https://www.anthropic.com/news/create-files</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45182381</guid>
            <description><![CDATA[Claude can now create and edit Excel spreadsheets, documents, PowerPoint slide decks, and PDFs directly in Claude.ai and the desktop app.]]></description>
            <content:encoded><![CDATA[Claude can now create and edit Excel spreadsheets, documents, PowerPoint slide decks, and PDFs directly in Claude.ai and the desktop app. This transforms how you work with Claude—instead of only receiving text responses or in-app artifacts, you can describe what you need, upload relevant data, and get ready-to-use files in return.File creation is now available as a preview for Max, Team, and Enterprise plan users. Pro users will get access in the coming weeks.What you can doClaude creates actual files from your instructions—whether working from uploaded data, researching information, or building from scratch. Here are just a few examples:Turn data into insights: Give Claude raw data and get back polished outputs with cleaned data, statistical analysis, charts, and written insights explaining what matters.Build spreadsheets: Describe what you need—financial models with scenario analysis, project trackers with automated dashboards, or budget templates with variance calculations. Claude creates it with working formulas and multiple sheets.Cross-format work: Upload a PDF report and get PowerPoint slides. Share meeting notes and get a formatted document. Upload invoices and get organized spreadsheets with calculations. Claude handles the tedious work and presents information how you need it.Whether you need a customer segmentation analysis, sales forecasting, or budget tracking, Claude handles the technical work and produces the files you need. File creation turns projects that normally require programming expertise, statistical knowledge, and hours of effort into minutes of conversation.How it works: Claude’s computerOver the past year we've seen Claude move from answering questions to completing entire projects, and now we're making that power more accessible. We've given Claude access to a private computer environment where it can write code and run programs to produce the files and analyses you need.This transforms Claude from an advisor into an active collaborator. You bring the context and strategy; Claude handles the technical implementation behind the scenes. This shows where we’re headed: making sophisticated multi-step work accessible through conversation. As these capabilities expand, the gap between idea and execution will keep shrinking.Getting startedTo start creating files:Enable "Upgraded file creation and analysis" under Settings > Features > ExperimentalUpload relevant files or describe what you needGuide Claude through the work via chatDownload your completed files or save directly to Google DriveStart with straightforward tasks like data cleaning or simple reports, then work up to complex projects like financial models once you're comfortable with how Claude handles files.This feature gives Claude internet access to create and analyze files, which may put your data at risk. Monitor chats closely when using this feature. Learn more.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[New Mexico is first state in US to offer universal child care]]></title>
            <link>https://www.governor.state.nm.us/2025/09/08/new-mexico-is-first-state-in-nation-to-offer-universal-child-care/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45182372</guid>
            <content:encoded><![CDATA[
				
				
				
				
				
				
				
			SANTA FE — Governor Michelle Lujan Grisham and the New Mexico Early Childhood Education and Care Department announced a historic milestone on Monday: New Mexico will become the first state in the nation to guarantee no-cost universal child care starting Nov. 1.
This groundbreaking new initiative will make child care available to all New Mexicans, regardless of income, by removing income eligibility requirements from the state’s child care assistance program and continuing the waiver of family copayments.
“Child care is essential to family stability, workforce participation, and New Mexico’s future prosperity,” said Lujan Grisham. “By investing in universal child care, we are giving families financial relief, supporting our economy, and ensuring that every child has the opportunity to grow and thrive.”
This announcement fulfills the promise made by the governor and the New Mexico Legislature when they created the Early Childhood Education and Care Department in 2019. Since then, New Mexico has expanded access to no-cost child care to families with incomes at or below 400% of the federal poverty level, reducing financial strain on tens of thousands of families.
With Monday’s announcement universal child care will be extended to every family in the state, regardless of income. This amounts to an average annual family savings of $12,000 per child.
“New Mexico is creating the conditions for better outcomes in health, learning, and well-being,” said Neal Halfon, professor of pediatrics, public health and public policy at the University of California, Los Angeles, and director of the Center for Healthier Children, Families, and Communities. “Its approach is rooted in data, driven by communities, and becoming a model for the nation.
“By prioritizing public investments in early childhood educators, families, and children, New Mexico continues to lead the way in building a sustainable, affordable, and quality child care and early learning system that helps its communities and economy thrive,” said Michelle Kang, president and CEO of the National Association of the Education of Young Children (NAEYC). “Achieving universal child care will make a huge difference for the state’s children, families, businesses, and educators—and for all of us, by showing that it can be done.”
Families who receive child care assistance report greater financial stability, more time to focus on their children, and the ability to choose higher-quality care settings. Now, every family in New Mexico will have the same opportunity. New Mexico is also taking decisive action to build the supply of infant and toddler care statewide:

Establishing a $12.7 million low-interest loan fund to construct, expand, and renovate child care facilities, with an additional $20 million requested in the Fiscal Year 2027 budget.
Targeting growth to focus on care for infants, toddlers, low-income families, and children with special needs.
Partnering with employers and school districts to expand child care options for working families.
Launching a statewide campaign to recruit licensed and registered home providers.
To support providers, reimbursement rates will rise to reflect the true cost of care.

Programs that commit to paying entry-level staff a minimum of $18 per hour and offer 10 hours of care per day, five days a week, will receive an incentive rate. New Mexico estimates an additional 5,000 early childhood professionals are needed to fully achieve a universal system.
“Early childhood care and education is a public good,” said ECECD Sec. Elizabeth Groginsky. “By providing universal access and improving pay for our early childhood workforce, we are easing financial pressure on families, strengthening our economy, and helping every child learn in safe, nurturing environments. This is the kind of investment that builds equity today and prosperity for the future.”
With universal child care, New Mexico is leading the nation by showing that what is best for children and families is also the smartest investment for long-term prosperity—building a stronger future for every community in the state.
For more information about how families and providers can access universal child care benefits, visit and toolkit: ECECD Universal Child Care Resources Page.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[U.S. Added 911,000 Fewer Jobs in Year Through March Than Reported Earlier]]></title>
            <link>https://www.barrons.com/articles/jobs-report-revisions-bls-fed-3d88c77b?st=u8mw75</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45182111</guid>
        </item>
        <item>
            <title><![CDATA[Google to Obey South Korean Order to Blur Satellite Images on Maps]]></title>
            <link>https://www.barrons.com/news/google-to-obey-south-korean-order-to-blur-satellite-images-on-maps-653e934e</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45181626</guid>
            <description><![CDATA[Google said on Tuesday that it would comply with the South Korean government's demand to blur sensitive satellite images on its mapping services, paving the way for the US tech giant to compete better with local navigation platforms.]]></description>
            <content:encoded><![CDATA[Google said on Tuesday that it would comply with the South Korean government's demand to blur sensitive satellite images on its mapping services, paving the way for the US tech giant to compete better with local navigation platforms.The Barron's news department was not involved in the creation of the content above. This article was produced by AFP. For more information go to AFP.com.© Agence France-Presse]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Weaponizing Ads: How Google and Facebook Ads Are Used to Wage Propaganda Wars]]></title>
            <link>https://medium.com/@eslam.elsewedy/weaponizing-ads-how-governments-use-google-ads-and-facebook-ads-to-wage-propaganda-wars-199c707704cc</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45181094</guid>
            <description><![CDATA[“” is published by Eslam Elsewedy.]]></description>
            <content:encoded><![CDATA[20 min read19 hours ago--In late 2024, the head of the UN’s Gaza aid agency made a disturbing discovery: when people searched for his organization on Google, the top result wasn’t the agency’s own site — it was a paid ad placed by the Israeli government. The ad mimicked a UN website but actually linked to an Israeli government page accusing the UN Relief and Works Agency (UNRWA) of supporting terroists (wired.com). “The spread of misinformation & disinformation continues to be used as a weapon in the war in Gaza,” UNRWA Commissioner-General Philippe Lazzarini warned, calling for investigations and stricter regulation of online propaganda (aljazeera.com). His alarm highlights a troubling new reality: digital advertising platforms have become battlefields for influence, where governments and political groups pay to sway public opinion in wars and crises.Traditional propaganda , think radio broadcasts, posters, state TV, has now gone high-tech. Platforms like Google Ads and Facebook (Meta) Ads allow paries to target specific audiences with tailored messages at massive scale. In theory, these companies have policies against hate speech or blatant lies. In practice, recent case studies show that sophisticated misinformation campaigns can exploit loopholes and lax enforcement, reaching millions of people with government-funded narratives. From the Israel–Palestine conflict to Russian and domestic political meddling, paid ads are being weaponized to promote war efforts, demonize opponents, and even undermine institutions like the UN. This article examines how it’s happening, why the platforms permit it, and what ethical and policy questions arise.Digital Propaganda via Paid Ads: A New Front in Information WarfarePaid advertising on Google and Facebook has become a potent tool for political persuasion or manipulation. Unlike organic social media posts (which rely on shares or algorithms), ads can guarantee visibility: if you pay, you reach your target. And the targeting can be extremely granular. Google Ads lets advertisers bid on search keywords or place banner/video ads on websites and YouTube, often filtered by geography or audience interests. Facebook/Meta’s ad system enables micro-targeting by demographics, location, and user interests, while requiring a “paid for by” disclaimer on political ads for transparency. In theory, this gives legitimate political campaigns a way to reach supporters , but it equally gives propagandists a direct channel to the eyeballs of a chosen populace.Researchers note that this capacity can be abused by partisan or state actors to “manipulate or distract citizens with misinformation and government propaganda,” posing serious challenges to democracy (academic.oup.com). A notorious early example was Russia’s Internet Research Agency, which in 2016 created hundreds of fake Facebook accounts and purchased at least $100,000 worth of divisive ads to influence the U.S. election (abcnews.go.com). Many of those ads didn’t mention candidates directly; instead they amplified polarizing messages on issues like immigration and race to inflame social tensions. At the time, Facebook admitted that most of these propaganda ads “did not violate any company policies or laws,” underscoring how unprepared the platform’s rules were (abcnews.go.com). The incident sparked global awareness that paid media ads could be used as a propaganda weapon , and led to new transparency measures like Facebook’s Ads Library.Yet, increased transparency hasn’t prevented the tactic from evolving. Recent conflicts show governments openly turning to ad campaigns as part of their information warfare strategy. Paid ads can be launched rapidly, scaled globally, and tailored to undermine an opponent or shape public perception of a war. Crucially, they also allow a state to influence foreign publics, beyond its own borders, often skirting the line of platform policies and international norms. The sections below explore a timely case study and the broader implications.Case Study: Israel’s Paid Propaganda Campaign in the Gaza WarOne of the clearest illustrations of war propaganda via paid ads is the Israeli government’s online advertising blitz during the 2023–2025 Gaza war. Israel has long engaged in hasbara (Hebrew for “explanation”), a term for state public relations efforts or propaganda (smex.org). But since the war in Gaza, Israel’s use of digital ads has intensified to unprecedented levels (smex.org).Targeting the UN: Google Ads to Discredit HumanitariansIn mid-January 2024, staff at UNRWA USA (a U.S.-based fundraising affiliate of the UN agency) noticed something strange: Google searches for “UNRWA” were yielding an ad that looked like it was from UNRWA, but actually led to an Israeli government site (wired.com). Upon investigation, they discovered a months-long Google Ads campaign by the Israeli Government Advertising Agency to discredit UNRWA (wired.com). The Israeli ads, which were clearly labeled as such in Google’s transparency data, appeared on searches for over 300 related keywords, from “UNRWA” to “Gaza aid”, effectively hijacking traffic from people seeking the UN agency (wired.com). The content of the ads and the landing pages was unmistakably propagandistic: the Israeli site alleged that UNRWA was “inseparable from Hamas” and even employed terrorists (wired.com). One ad bluntly asked, “Paychecks for terrorists or humanitarian aid?”, suggesting money given to UNRWA would fund armed militants (abc.net.au).The aim of this campaign was clear: to cut off support and donations to the UN’s relief agency in Gaza. It came at a critical time, as UNRWA was providing life-saving food, water, and medical care to Palestinians under siege. UNRWA’s chief, Philippe Lazzarini, blasted Israel’s actions as a “deliberate disinformation campaign” to “dismantle the agency”, warning that smearing a humanitarian organization not only hurts its reputation but “puts the lives of our colleagues on the frontline at serious risk” (abc.net.au). In essence, Israeli authorities were using Google’s advertising system to undermine a UN institution in the middle of a humanitarian crisis.Google’s response was relatively hands-off. When UNRWA representatives appealed to Google to stop what they saw as a dangerous misinformation campaign, the company did not immediately take down the ads (wired.com). A Google spokesperson defended that any government may run ads on Google as long as they adhere to our policies, and stated that Google enforces those rules “consistently and without bias” (wired.com). In other words, because the Israeli ads did not overtly violate Google’s ad policies, they were allowed to run. Notably, Google’s ad policies do prohibit misrepresentation, but they do not have a blanket ban on misinformation unless it relates to specific sensitive areas like election integrity (gomixte.com). As Wired reported, Google generally permits questionable claims in ads “unless it undermines participation or trust in an electoral process” (gomixte.com). This loophole meant that propaganda undermining a humanitarian agency , while arguably unethical , wasn’t against the rules.The result: Israel’s anti-UNRWA ads often outcompeted the agency’s own Google ads. From May through July 2024, in head-to-head bidding, the Israeli ads won the top slot 44% of the time (versus UNRWA USA’s ads showing 34% of the time) (wired.com). UNRWA’s team had to spend tens of thousands of donor dollars trying to outbid Israel for visibility (wired.com). This “insidious” campaign, as UNRWA called it, exposed countless Americans and others to one-sided allegations just as they were searching for facts about Gaza relief (wired.com). “I want the public to know what’s happening,” said UNRWA USA director Mara Kronenfeld, “especially at a time when civilian lives are under attack in Gaza” (wired.com).By late 2024, news investigations across the world had caught on. ABC News in Australia found that those same Israeli ads linking UNRWA to Hamas were appearing on major Australian news sites, served via Google’s display network (abc.net.au). The ads featured a masked militant wearing both the Hamas emblem and an UNRWA headband, visually equating the UN agency with a terror group (abc.net.au). Captions like “UNRWA has alternatives, it must be replaced” were shown next to news articles (abc.net.au). ABC confirmed at least eight such ad variants were targeted specifically at Australian audiences (in English) and noted the campaign ran in multiple languages including German, Italian, French, and Spanish (abc.net.au). This truly was a global propaganda ad campaign, orchestrated by a government via Google’s platforms.UNRWA officials, upon learning of the global ads, reiterated that these tactics were “a wider disinformation campaign” by Israel to cripple the agency (abc.net.au). Despite criticism from UN allies (Australia’s Foreign Minister called Israel’s actions “reprehensible” and urged them to stop undermining UNRWA (abc.net.au), the Israeli government showed no signs of relenting. It even escalated measures offline, banning UNRWA operations in Israel, as the online ad offensive continued (abc.net.au)A coordinated ad push against the Hind Rajab Foundation (HRF)Alongside the UNRWA campaign, the Israeli Government Advertising Agency has also targeted the Hind Rajab Foundation (HRF), an EU-based human-rights nonprofit founded in 2024 to pursue accountability for alleged war crimes in Gaza and named in honor of five-year-old Hind Rajab, whose death became emblematic of the conflict (Hind Rajab Foundation). In Google’s Ads Transparency Center, the agency’s account shows creatives such as “Hind Rajab Foundation — HRF’s disturbing reality” that click through to a government microsite titled “Unmasking the Hind Rajab Foundation,” which portrays HRF as a pseudo-legal front with “extremist” ties (Ads Transparency Center, 2025; Government of Israel). Reporting on Israel’s recent $45 million placement with Google further notes that several ads explicitly link to this “Unmasking” report, indicating a coordinated effort to discredit HRF across search and display (Drop Site News). For context, HRF’s public materials frame the organization as a legal accountability initiative, while the story of Hind Rajab has gained global visibility through Kaouther Ben Hania’s Venice-premiering film The Voice of Hind Rajab, backed by high-profile producers including Brad Pitt, Joaquin Phoenix, Rooney Mara, and Jonathan Glazer, which has amplified awareness of the case well beyond activist circles (Reuters).Flooding Social Media with War NarrativesThe attack on UNRWA was just one facet of Israel’s broader digital PR war. Israeli agencies and allied groups pumped out hundreds of ads across Google/YouTube, Facebook/Instagram, and even children’s gaming apps to influence public opinion about the Gaza conflict. David Saranga, head of the Israeli Foreign Ministry’s digital bureau, confirmed that “the footage is part of a larger advocacy drive” in which the ministry spent $15 million on internet ads in just the first few weeks after October 7, 2023 (smex.org). Those ads often contained graphic and emotional imagery, for example, violent scenes and frightened Israeli families, even appearing as pop-ups in kids’ online games, where they left children “shocked and disturbed” (smex.org). Reuters journalists observed some of these graphic video ads playing in European video games used by children, raising serious questions about appropriateness and consent (business-humanrights.org).On Meta’s platforms (Facebook and Instagram), pro-Israel advertising also spiked dramatically. One effort led by a group calling itself “Facts for Peace” spent over $370,000 on Facebook/Instagram ads in a single month (November 2023) to push viral videos framing all support for Palestine as support for Hamas (business-humanrights.org). These ads, which amassed over 21 million views, were crafted to equate the Palestinian cause with barbaric violence. Despite the obviously misleading and inflammatory nature of such content, it spread widely: it was even promoted by right-wing influencers like Ben Shapiro and shared by official Israeli government social media (e.g. the Israeli embassy in Chile) (business-humanrights.org). Meta’s Ad Library showed 213 ads from Facts for Peace, of which only 3 were taken down for policy violations (business-humanrights.org). Meta told investigators that the campaign did not technically break their rules on transparency, since the ads carried a “Paid for by Facts for Peace” disclaimer and the page was authorized for political advertising. However, nowhere did the group disclose its true funding sources or organizers. (Journalists later linked it to a U.S. billionaire funding pro-Israel messaging (business-humanrights.org.) This case shows how easy it is for a new, opaque group to launch a massive political ad campaign and reach millions before anyone can fully scrutinize it.Israeli government entities themselves also ran extensive campaigns on social media. The Israeli Ministry of Foreign Affairs launched at least 75 distinct ads on YouTube alone in the first months of the war (smex.org). Some of these ads featured what observers called incitement to violence. In one video ad, a menacing message declared: “Israel will take every measure necessary to protect our citizens against these barbaric terrorists,” which borders on a call to collective violence (smex.org). YouTube’s political ads policy forbids content that “encourages others to commit violent acts,” yet this ad apparently slipped through (smex.org). On X (formerly Twitter), the Israeli government and military accounts also placed promoted posts with graphic images (e.g. charred buildings and victims), urging support for their military actions (smex.org). Such ads would seem to violate X’s pre-existing ban on state-affiliated media buying ads (a policy originally aimed at propaganda from outlets like Russia’s RT). Nonetheless, these promotions ran, and some critics questioned if Elon Musk’s open support for Israel influenced X’s lax enforcement (smex.org).By early 2025, reports revealed that Israel had even formalized a multi-million dollar contract with Google to sustain its global propaganda offensive. According to investigative reporting by Drop Site News (and cited by outlets like TRT World), the Israeli Prime Minister’s Office signed a $45 million, six-month deal with Google in June 2025 to run a worldwide advertising blitz downplaying the humanitarian crisis in Gaza (trtworld.com). The campaign kicked off just after Israeli authorities imposed a siege cutting off food, fuel, and medicine to Gaza in March 2025, and as officials worried about “the public relations fallout”. Leaked documents described Google as a “key entity” in Netanyahu’s PR strategy (trtworld.com). Sure enough, soon after, YouTube and display ads proclaiming “there is food in Gaza. Any other claim is a lie” flooded the internet, with one such video, produced by Israel’s Foreign Ministry, racking up over 6 million views via paid promotion (trtworld.com). In effect, Google was being directly paid to broadcast the message that reports of starvation in Gaza were false, despite widespread documentation of severe hunger by the UN and NGOs. Israeli propaganda officials openly characterized these efforts as “hasbara” — literally “propaganda” — in internal communications (trtworld.com). Alongside Google, Israel spent another $3 million on ads on X (Twitter) and $2.1 million on other ad networks to bolster its narrative (trtworld.com).The impact of Israel’s ad campaign is hard to quantify, but it undoubtedly reached broad swathes of the global public with the government’s perspective. By framing its military operations as justified self-defense and its critics (even humanitarian agencies) as terrorist sympathizers, Israel’s paid ads sought to shore up international support and neutralize opposition. Given that Israel’s security and billions in military aid depend on Western public opinion (smex.org), this digital influence strategy was a logical extension of the war itself. However, it came at the cost of injecting misinformation and extreme bias into the information ecosystem, potentially skewing public perceptions and policy debates. As we’ll see next, this case also exposes worrying gaps in platform policies and ethical oversight.Policy Gaps, Double Standards, and Ethical DilemmasThe use of paid ads for propaganda raises a blunt question: Are Google and Meta actually enforcing their own rules when it comes to wartime disinformation? The evidence from the above case suggests significant gaps and inconsistencies. Despite formal policies against harmful or misleading content, both companies’ systems enabled, and profited from, campaigns that arguably violate the spirit, if not the letter, of those rules.Google’s laissez-faire approach to misinformation: Google’s advertising policies forbid certain categories of content (hate speech, explicit incitement to violence, etc.) and ban misrepresenting who you are. But they do not outright ban false or misleading claims in ads except in narrow contexts like election integrity or COVID-19 info (gomixte.com). This is why blatant propaganda, e.g. accusing a UN agency of abetting terror with scant evidence, can pass muster on Google Ads. Google relied on users or affected parties to report problematic ads, and stated it would “take swift action” if actual policy violations were found (wired.com). But in practice, Google did not pro-actively vet the truth of Israeli government claims. The company was, after all, in a business relationship with Israel (not to mention the formal $45M deal) and may have been reluctant to police a powerful client’s messaging beyond basic checks. This hands-off stance highlights a moral gray area: allowing a paying customer to spread potentially dangerous misinformation because it doesn’t fit neatly into a prohibited category. It suggests that platform policy enforcement can be very literal and reactive, leaving ethical judgment by the wayside.Meta’s inconsistent enforcement and transparency issues: Facebook/Meta, on paper, has more expansive rules for political ads. They require identity verification for political advertisers and mandate a “Paid for by [Name]” disclosure on each ad. Certain types of violent or hateful content are disallowed even in ads. In the Israel–Gaza context, however, these rules were enforced unevenly. Meta’s own Ads Library data shows a bias: when ads violated policies (e.g. contained hate speech or graphic violence), pro-Palestinian ads were taken down faster and more frequently than pro-Israeli ads (smex.org). SMEX’s analysis of thousands of ads found that Israeli war-cheerleading ads often remained live longer despite breaking rules, whereas ads calling for Gaza humanitarian aid got removed with stricter urgency (smex.org). For example, the “Facts for Peace” videos that implied all Palestinian supporters endorse terror arguably constituted hateful generalization, yet most stayed up until their paid run ended. Meanwhile, at least one civil society test in late 2023 found that Facebook approved ads containing explicit hate speech calling for violence against Palestinians, indicating failures in the automated moderation system (business-humanrights.org). Meta responded that it prioritizes transparency — pointing to the existence of the Ad Library — but researchers found the library frustratingly opaque. Some ads that clearly ran were missing from public search, and crucial data like why an ad was removed or who exactly was targeted were absent (smex.org). Meta shut down useful tools like CrowdTangle (which helped monitor content virality) in 2024, hampering independent oversight (smex.org). All of this suggests that Meta’s professed neutrality masks a deeply flawed system, where enforcement can be influenced by political sensitivities or errors, and where the company’s profit motive in selling ads may conflict with taking decisive action against harmful content.Double standards for different conflicts: A striking contrast can be seen in how platforms treated Russian state propaganda versus Israeli state propaganda. During Russia’s 2022 invasion of Ukraine, Western tech firms took an unusually hard line against Russia’s online influence operations. Meta banned Russian state media outlets from running ads or monetizing content on its platform and demoted their posts (smex.org). It also aggressively labeled or removed Russian disinformation about the war, under heavy pressure from governments and public opinion. Google similarly demonetized Russian state-affiliated channels (like RT) and limited their reach. These steps were lauded as Big Tech taking a stand against wartime disinformation. Yet, when it came to Israel, engaging in similar behavior, the response was far more lenient. No blanket bans or demonetization were applied to Israeli state entities pushing propaganda, even though some of their content arguably violated the same principles (for instance, denying documented human suffering in Gaza, or using dehumanizing language about “barbaric terrorists” broadly). Observers have pointed out this double standard, noting that platforms seemed willing to bend rules or look the other way for a U.S.-aligned government (smex.org). This inconsistency not only undermines the credibility of platform policies but also raises geopolitical questions: are ethical standards being applied universally, or only when convenient?Violations of international norms: Beyond platform rules, there’s an argument that some of these ad campaigns tread on international ethical standards or even laws. For example, deliberately spreading false information to obstruct humanitarian aid (as Israel’s anti-UNRWA ads aimed to do) could be seen as running counter to International Humanitarian Law, which seeks to protect aid efforts and civilians during conflict. Incitement to violence against a population is outlawed under the Genocide Convention and other treaties — and while social media ads we’ve discussed stop short of explicit incitement, they foment hatred and misunderstanding that can fuel violence. The UN Secretary-General and other officials have repeatedly condemned the weaponization of disinformation in conflict settings, calling it “destructive” and urging tech companies to clamp down (wired.com) (aljazeera.com). Allowing a state to pay to propagate one-sided or false narratives undermining a UN agency could be seen as abetting an attack on that international institution’s integrity. These are largely uncharted waters, there’s no clear international law for “information warfare”, but the ethical condemnation is growing. As Lazzarini implored, such campaigns “should stop and be investigated”, and social media firms must do more to combat disinformation and hate speech in war (aljazeera.com).All these issues point back to the central dilemma: What responsibility do the tech giants have when their advertising tools are used to spread propaganda or inflame conflicts? If they act as neutral carriers, they risk facilitating harm; if they intervene, they become arbiters of truth in explosive political situations. The next section looks at how Google, Meta, and others have responded, or failed to respond, and what more could be done.The Responsibility of Tech Companies in Wartime PropagandaMajor tech companies often insist they are platforms, not publishers, they provide the space, but aren’t responsible for every message that advertisers choose to push. However, the extreme examples we’ve explored put that claim to the test. When a company is paid millions to disseminate content that may be false or harmful, can it really wash its hands of accountability? Here are some considerations and responses from the companies and experts:Official stances and defenses: Google’s official line, as noted, is that it applies its ad policies equally to all, including governments, and will remove ads that violate those policies (wired.com). Implicit in that statement is that Google does not see itself as the arbiter of factual truth in ads, unless a lie crosses certain predefined lines, Google will host it for a paying client. Meta, for its part, touts the transparency of its system. A Meta spokesperson, responding to concerns about the “Facts for Peace” campaign, emphasized that the ads were “clearly labeled with a ‘paid by’ disclaimer” and publicly archived in the Ads Library, implying that this level of transparency exceeds that of TV or print political ads (business-humanrights.org). Meta also points out that it has an Ad Standards enforcement team and that ads violating policies (when caught) are taken down and documented. In practice, as we saw, that enforcement can lag or falter — but the company’s message is that shining light on ads is the solution, rather than heavy-handed censorship.Profit vs. principle: Critics argue that a big reason these platforms struggle to self-regulate is that they make money from every ad impression. When conflict-related content goes viral, ad spending surges. A joint analysis by CalMatters and The Markup found that after war broke out in Gaza on Oct 7, 2023, Meta saw a major increase in ad revenue related to the conflict (calmatters.org). In October 2023 alone, an estimated $3.1 million was spent on Facebook ads about the Israel–Gaza war, a huge spike compared to previous months (calmatters.org). This includes not just state propaganda but also ads for fundraising, merchandise, and advocacy around the crisis. The point is that war and political violence can become lucrative business for social media companies, something Meta’s own employees have acknowledged internally (Facebook famously admitted that outrage and misinformation drive engagement, which in turn drives ad revenue (calmatters.org). This profit motive can create a perverse disincentive to crack down on borderline content. While $3 million is a drop in the bucket of Meta’s $100+ billion annual revenue, it’s still revenue. And for Google, a $45 million contract from Israel’s government is significant. The companies risk accusations of “conflict profiteering” if they appear to take money to propagate one side’s propaganda. This has led to calls for them to refuse or refund ad buys that clearly aim to deceive or stoke conflict, though such moves remain rare.Calls for stronger policies: Human rights organizations and digital rights groups are urging the platforms to develop special policies for ads in conflict zones or on politically sensitive issues. For instance, SMEX and others have suggested that in the context of an armed conflict, platforms should implement tailored rules to prevent the spread of hate speech and misinformation via ads, given the real-world stakes (smex.org). Concretely, this could mean temporarily banning state-run or state-funded advertising in active conflict situations, or at least subjecting them to human review and fact-checking. It could also mean disallowing ads that target foreign populations with war propaganda, treating it akin to foreign election interference. Another idea floated by experts is a “circuit breaker” approach: if a sudden war or crisis erupts, platforms might pause all political and issue-based ads in the affected regions until they can ramp up oversight. (Notably, Meta has recently decided to halt all political, electoral, and social issue ads in the entire EU starting in 2025, in response to new regulations (about.fb.com). This broad-brush ban is a compliance move for Europe, but it shows that turning off political ads is technically feasible when mandated.)Transparency and researcher access: Many observers argue that if companies won’t ban propaganda ads outright, they should at least empower watchdogs to track and expose them. This means improving their ad transparency tools. Meta’s shutting down of CrowdTangle and the limitations of the Ads Library have drawn heavy criticism (smex.orgsmex.org). Experts like Sam Jeffers of Who Targets Me advocate for more robust disclosures — for example, revealing detailed targeting parameters of political ads (so we know who governments are trying to influence) and keeping archives of removed ads including why they were removed (business-humanrights.org) (smex.org). There are also calls for independent audits of platform algorithms and ad delivery, to see if certain viewpoints are getting amplified unfairly. Ultimately, greater transparency can help civil society and journalists “police” the propaganda if the platforms themselves are slow to do so.Regulatory pressure and international standards: Governments and international bodies are starting to weigh in. The European Union’s Digital Services Act (DSA) and upcoming regulations on political advertising put legal requirements on big platforms to prevent misuse. For example, the DSA requires rapid removal of illegal content (which could include illegal hate speech or incitement in ads) and hefty fines for non-compliance. The EU is also pushing for strict transparency on political ads and even contemplating banning microtargeting for political messages. These rules, though EU-specific, often end up being adopted globally by platforms for simplicity’s sake. Outside of Europe, the lack of regulation has been evident, which is why UN officials like Lazzarini are directly calling for “more regulations for companies… to combat disinformation and hate speech” online (aljazeera.com). We may see moves in the UN or other international forums to establish norms against certain propaganda techniques. In the long run, if self-regulation fails, tech companies might face binding rules prohibiting them from accepting money for ads that undermine peace and truth, a challenging rule to draft, but an increasingly pertinent conversation.ConclusionThe era of governments weaponizing Google and Facebook ads is upon us, raising thorny questions about truth, free speech, and corporate responsibility in the digital age. The case of Israel’s advertising blitz in the Gaza war demonstrates how easily paid platforms can be turned into tools of war propaganda, blasting millions with biased or false narratives at the click of a button. It also shows the real harms at stake: humanitarian aid blocked, democratic institutions undermined, and public discourse polluted. And Israel is not alone, from superpowers to militant groups, many actors have tested the boundaries of online ads to sway hearts and minds.For the platforms, this is a moment of reckoning. Can Google and Meta continue to say “we’re just the middleman” while cashing checks for propaganda campaigns? Critics argue that neutrality is not neutral when it enables deception and violence. Yet, deciding where to draw the line is complex. Mistakes or overreach in moderation could themselves be seen as partisan interference. The tightrope between allowing robust political advocacy and preventing harmful propaganda is a difficult one to walk, especially under global scrutiny.What is clear is that doing nothing is no longer tenable. Sunlight and accountability are the minimum: users deserve to know who is behind the political ads they see and to have confidence that egregious lies or incitements won’t be promoted by the world’s most powerful information platforms. Moving forward, it will likely require a mix of solutions , improved self-governance by tech firms, independent oversight, and smart regulation, to ensure that the tools of modern advertising are not abused to foment conflict or erode democracy. As the saying goes, “In war, truth is the first casualty.” In our digital world, we must decide how much we are willing to let paid algorithms hasten that casualty, or whether we can find ways to uphold truth even amid the fog of online war.Sources:Google involved in $45M deal with Netanyahu’s office to advertise Israeli hasbara — report — TRT World https://www.trtworld.com/world/article/538017f344e5Israel Is Buying Google Ads to Discredit the UN’s Top Gaza Aid Agency | WIRED https://www.wired.com/story/israel-unrwa-usa-hamas-google-search-ads/UNRWA head accuses Israel of buying Google ads to block donations to agency | UNRWA News | Al Jazeera https://www.aljazeera.com/news/2024/8/31/unrwa-head-accuses-israel-of-buying-google-ads-to-block-donations-to-agencyMass Political Information on Social Media: Facebook Ads … https://academic.oup.com/jeea/article/22/4/1678/7607367Facebook says it sold $100,000 in ads to fake Russian accounts during presidential election — ABC News https://abcnews.go.com/Politics/facebook-sold-100000-ads-fake-russian-accounts-presidential/story?id=49667831Inside the Israeli occupation’s propaganda ad factory — SMEX https://smex.org/inside-the-israeli-occupations-propaganda-ad-factory/Google ads linking UNRWA with Hamas appearon Australian news websites as part of a global campaign — ABC News https://www.abc.net.au/news/2024-12-05/unrwa-hamas-google-ads-published-on-australian-news-sites/104685074How Google Ads Are Weaponized — Mixte Communications https://gomixte.com/blog/how-google-ads-are-weaponized/Palestine/Israel: Viral campaign ads attacking proPalestine movement points to concerning gaps in Meta rules; incl. co. comment — Business & Human Rights Resource Centre https://www.business-humanrights.org/en/latest-news/palestineisrael-viral-campaign-ads-attacking-pro-palestine-movementpoints-to-concerning-gaps-in-meta-rules-incl-co-comment/When Transparency Fails: Meta’s Political Ad Policy During Israel’s War on Gaza — SMEX https://smex.org/when-transparency-fails-metas-political-ad-policy-during-israels-war-on-gaza/How Meta brings in millions off political violence — CalMatters https://calmatters.org/economy/technology/2024/10/how-meta-brings-in-millions-off-political-violence/Ending Political, Electoral and Social Issue Advertising in the EU in … https://about.fb.com/news/2025/07/ending-political-electoral-and-social-issue-advertising-in-the-eu/Ads Transparency Center. (2025). Israeli Government Advertising Agency [Advertiser page]. Google. https://adstransparency.google.com/advertiser/AR00827556497616535553Drop Site News. (2025, June 18). Google’s $45 million contract with Netanyahu’s office to launder Gaza famine denial through ads. https://www.dropsitenews.com/p/google-youtube-netanyahu-israel-propaganda-gaza-famineReuters. (2025, September 4). Venice ovation fuels hopes for Gaza girl film to reach global audience. https://www.reuters.com/business/media-telecom/venice-ovation-fuels-hopes-gaza-girl-film-reach-global-audience-2025-09-04/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Nango (YC W23) Is Hiring a Staff Back End Engineer (Remote)]]></title>
            <link>https://jobs.ashbyhq.com/Nango/3467f495-c833-4dcc-b119-cf43b7b93f84</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45180741</guid>
        </item>
        <item>
            <title><![CDATA[Hallucination Risk Calculator]]></title>
            <link>https://github.com/leochlon/hallbayes</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45180315</guid>
            <description><![CDATA[Contribute to leochlon/hallbayes development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[Hallucination Risk Calculator & Prompt Re-engineering Toolkit (OpenAI-only)
Post-hoc calibration without retraining for large language models. This toolkit turns a raw prompt into:

a bounded hallucination risk using the Expectation-level Decompression Law (EDFL), and
a decision to ANSWER or REFUSE under a target SLA, with transparent math (nats).

It supports two deployment modes:

Evidence-based: prompts include evidence/context; rolling priors are built by erasing that evidence.
Closed-book: prompts have no evidence; rolling priors are built by semantic masking of entities/numbers/titles.

All scoring relies only on the OpenAI Chat Completions API. No retraining required.

Table of Contents

Install & Setup
Core Mathematical Framework
Understanding System Behavior
Two Ways to Build Rolling Priors
API Surface
Calibration & Validation
Practical Considerations
Project Layout
Deployment Options


Install & Setup
pip install --upgrade openai
export OPENAI_API_KEY=sk-...

The module uses openai>=1.0.0 and the Chat Completions API (e.g., gpt-4o, gpt-4o-mini).


Core Mathematical Framework
The EDFL Principle
Let the binary event $\mathcal{A}$ be the thing you want to guarantee (e.g., Answer in decision mode, or Correct for factual accuracy).
Build an ensemble of content-weakened prompts (the rolling priors) ${S_k}_{k=1}^m$. For the realized label $y$, estimate:


Information budget:
$$\bar{\Delta} = \tfrac{1}{m}\sum_k \mathrm{clip}_+(\log P(y) - \log S_k(y), B)$$
(one-sided clipping; default $B=12$ nats to prevent outliers while maintaining conservative bounds).


Prior masses: $q_k = S_k(\mathcal{A})$, with:


$\bar{q}=\tfrac{1}{m}\sum_k q_k$ (average prior for EDFL bound)

$q_{\text{lo}}=\min_k q_k$ (worst-case prior for SLA gating)



By EDFL, the achievable reliability is bounded by:
$$\bar{\Delta} \ge \mathrm{KL}(\mathrm{Ber}(p) | \mathrm{Ber}(\bar{q})) \Rightarrow p\le p_{\max}(\bar{\Delta},\bar{q})$$
Thus the hallucination risk (error) is bounded by $\overline{\mathrm{RoH}} \le 1 - p_{\max}$.
Decision Rule (SLA Gating)
For target hallucination rate $h^*$:


Bits-to-Trust: $\mathrm{B2T} = \mathrm{KL}(\mathrm{Ber}(1-h^*) | \mathrm{Ber}(q_{\text{lo}}))$


Information Sufficiency Ratio: $\mathrm{ISR} = \bar{\Delta}/\mathrm{B2T}$


ANSWER iff $\mathrm{ISR}\ge 1$ and $\bar{\Delta} \ge \mathrm{B2T} + \text{margin}$ (default margin≈0.2 nats)


Why two priors? The gate uses worst-case $q_{\text{lo}}$ for strict SLA compliance. The RoH bound uses average $\bar{q}$ per EDFL theory. This dual approach ensures conservative safety while providing realistic risk bounds.


Understanding System Behavior
Expected Behavioral Patterns
The toolkit exhibits different behaviors across query types, which is mathematically consistent with the framework:
Simple Arithmetic Queries
Observation: May abstain despite apparent simplicity
Explanation:

Models often attempt answers even with masked numbers (pattern recognition)
This yields low information lift $\bar{\Delta} \approx 0$ between full prompt and skeletons
Despite potentially low EDFL risk bound, worst-case prior gate triggers abstention (ISR < 1)

Named-Entity Factoids
Observation: Generally answered with confidence
Explanation:

Masking entities/dates substantially reduces answer propensity in skeletons
Restoring these yields large $\bar{\Delta}$ that clears B2T threshold
System answers with tight EDFL risk bound

This is not a bug but a feature: The framework prioritizes safety through worst-case guarantees while providing realistic average-case bounds.
Mitigation Strategies


Switch Event Measurement

Use Correct/Incorrect instead of Answer/Refuse for factual QA
Skeletons without key information rarely yield correct results → large $\bar{\Delta}$




Enhance Skeleton Weakening

Implement mask-aware decision head that refuses on redaction tokens
Ensures skeletons have strictly lower "Answer" mass than full prompt



Calibration Adjustments

Relax $h^*$ slightly (e.g., 0.10 instead of 0.05) for higher answer rates
Reduce margin for less conservative gating
Increase sampling ($n=7-10$) for stability



Provide Evidence

Adding compact, relevant evidence increases $\bar{\Delta}$ while preserving bounds




Two Ways to Build Rolling Priors
1) Evidence-based (when you have context)

Prompt contains a field like Evidence: (or JSON keys)
Skeletons erase the evidence content but preserve structure and roles; then permute blocks deterministically (seeded)
Decision head: "Answer only if the provided evidence is sufficient; otherwise refuse."

Example
from scripts.hallucination_toolkit import OpenAIBackend, OpenAIItem, OpenAIPlanner

backend = OpenAIBackend(model="gpt-4o-mini")
prompt = (
    """Task: Answer strictly based on the evidence below.
Question: Who won the Nobel Prize in Physics in 2019?
Evidence:
- Nobel Prize press release (2019): James Peebles (1/2); Michel Mayor & Didier Queloz (1/2).
Constraints: If evidence is insufficient or conflicting, refuse.
"""
)
item = OpenAIItem(
    prompt=prompt, 
    n_samples=5, 
    m=6, 
    fields_to_erase=["Evidence"], 
    skeleton_policy="auto"
)
planner = OpenAIPlanner(backend, temperature=0.3)
metrics = planner.run(
    [item], 
    h_star=0.05, 
    isr_threshold=1.0, 
    margin_extra_bits=0.2, 
    B_clip=12.0, 
    clip_mode="one-sided"
)
for m in metrics: 
    print(f"Decision: {'ANSWER' if m.decision_answer else 'REFUSE'}")
    print(f"Rationale: {m.rationale}")
2) Closed-book (no evidence)

Prompt has no evidence
Skeletons apply semantic masking of:

Multi-word proper nouns (e.g., "James Peebles" → "[…]")
Years (e.g., "2019" → "[…]")
Numbers (e.g., "3.14" → "[…]")
Quoted spans (e.g., '"Nobel Prize"' → "[…]")


Masking strengths: Progressive levels (0.25, 0.35, 0.5, 0.65, 0.8, 0.9) across skeleton ensemble
Mask-aware decision head refuses if redaction tokens appear or key slots look missing

Example
from scripts.hallucination_toolkit import OpenAIBackend, OpenAIItem, OpenAIPlanner

backend = OpenAIBackend(model="gpt-4o-mini")
item = OpenAIItem(
    prompt="Who won the 2019 Nobel Prize in Physics?",
    n_samples=7,  # More samples for stability
    m=6,          # Number of skeletons
    skeleton_policy="closed_book"
)
planner = OpenAIPlanner(backend, temperature=0.3, q_floor=None)
metrics = planner.run(
    [item], 
    h_star=0.05,           # Target max 5% hallucination
    isr_threshold=1.0,     # Standard ISR gate
    margin_extra_bits=0.2, # Safety margin in nats
    B_clip=12.0,          # Clipping bound
    clip_mode="one-sided" # Conservative clipping
)
for m in metrics: 
    print(f"Decision: {'ANSWER' if m.decision_answer else 'REFUSE'}")
    print(f"Δ̄={m.delta_bar:.4f}, B2T={m.b2t:.4f}, ISR={m.isr:.3f}")
    print(f"EDFL RoH bound={m.roh_bound:.3f}")
Tuning knobs (closed-book):


n_samples=5–7 and temperature≈0.3 stabilize priors

q_floor (Laplace by default: $1/(n+2)$) prevents worst-case prior collapse to 0
Adjust masking strength levels if a task family remains too answerable under masking


API Surface
Core Classes

OpenAIBackend(model, api_key=None) – wraps Chat Completions API
OpenAIItem(prompt, n_samples=5, m=6, fields_to_erase=None, skeleton_policy="auto") – one evaluation item
OpenAIPlanner(backend, temperature=0.5, q_floor=None) – runs evaluation:

run(items, h_star, isr_threshold, margin_extra_bits, B_clip=12.0, clip_mode="one-sided") -> List[ItemMetrics]
aggregate(items, metrics, alpha=0.05, h_star, ...) -> AggregateReport



Helper Functions

make_sla_certificate(report, model_name) – creates formal SLA certificate
save_sla_certificate_json(cert, path) – exports certificate for audit
generate_answer_if_allowed(backend, item, metric) – only emits answer if decision was ANSWER

ItemMetrics Fields
Every ItemMetrics includes:


delta_bar: Information budget (nats)

q_conservative: Worst-case prior $q_{\text{lo}}$


q_avg: Average prior $\bar{q}$


b2t: Bits-to-Trust requirement

isr: Information Sufficiency Ratio

roh_bound: EDFL hallucination risk bound

decision_answer: Boolean decision

rationale: Human-readable explanation

meta: Dict with q_list, S_list_y, P_y, closed_book, etc.


Calibration & Validation
Validation Set Calibration
On a labeled validation set:


Sweep the margin parameter from 0 to 1 nats
For each margin, compute:

Empirical hallucination rate among answered items
Wilson upper bound at 95% confidence



Select smallest margin where Wilson upper bound ≤ target $h^*$ (e.g., 5%)

Freeze policy: $(h^*, \tau, \text{margin}, B, \text{clip_mode}, m, r, \text{skeleton_policy})$


Portfolio Reporting
The toolkit provides comprehensive metrics:

Answer/abstention rates
Empirical hallucination rate + Wilson bound
Distribution of per-item EDFL RoH bounds
Worst-case and median risk bounds
Complete audit trail


Practical Considerations
Choosing the Right Event
The default event is the decision $\mathcal{A} = {\text{Answer}}$. However:



Task Type
Recommended Event
Rationale




Factual QA
Correct/Incorrect
Directly measures hallucination


Decision Support
Answer/Refuse
Measures confidence to respond


Creative Writing
Answer/Refuse
Correctness often undefined



For tasks where skeletons still trigger answers frequently (causing $\bar{\Delta}\approx0$), switching to Correctness event with task-specific grading dramatically improves performance.
Common Issues & Solutions
Issue: $\bar{\Delta} = 0$ with $\overline{\mathrm{RoH}} \approx 0$

Not a contradiction! The gate uses worst-case $q_{\text{lo}}$; the bound uses average $\bar{q}$.

Solution: Increase n_samples, lower decision temperature, ensure skeletons truly weaken the event

Issue: Hit a low $\bar{\Delta}$ ceiling
Cause: Clipping may be too aggressive

Solution: Increase B_clip (default 12) and use clip_mode="one-sided"

Issue: Arithmetic still refuses
Cause: Pattern recognition allows answers even with masked numbers

Solutions:

Switch to Correctness event
Reduce masking strength for numbers on subset of skeletons
Provide worked examples as evidence



Issue: Prior collapse ($q_{\text{lo}} \to 0$)
Cause: All skeletons strongly refuse


Solution: Apply prior floor (default Laplace: $1/(n+2)$) or use quantile prior

Performance Characteristics



Metric
Typical Value
Notes




Latency per item
2-5 seconds
7 samples × 7 variants (1 full + 6 skeletons)


API calls
$(1+m) \times \lceil n/\text{batch}\rceil$
Can be parallelized


Accuracy
Wilson-bounded at 95%
Empirically validated


Cost
~$0.01-0.03 per item
Using gpt-4o-mini



Stability Guidelines


Sampling parameters:

Use $n \ge 5$ samples per variant
Keep temperature $\in [0.2, 0.5]$ for decision head
Lower temperature → more stable priors



Skeleton ensemble:

Use $m \ge 6$ skeletons
Ensure diversity in masking strengths
Verify skeletons are meaningfully weaker



Clipping strategy:

Always use one-sided clipping for conservative bounds
Set $B \ge 10$ nats to avoid artificial ceilings
Monitor clipping frequency in logs




Project Layout
.
├── app/                    # Application entry points
│   ├── web/web_app.py     # Streamlit UI
│   ├── cli/frontend.py    # Interactive CLI
│   ├── examples/          # Example scripts
│   └── launcher/entry.py  # Unified launcher
├── scripts/               # Core module
│   ├── hallucination_toolkit.py
│   └── build_offline_backend.sh
├── electron/              # Desktop wrapper
├── launch/                # Platform launchers
├── release/              # Packaged artifacts
├── bin/                  # Offline backend binary
├── requirements.txt
├── pyproject.toml
└── README.md


Deployment Options
1. Direct Python Usage
from scripts.hallucination_toolkit import (
    OpenAIBackend, OpenAIItem, OpenAIPlanner,
    make_sla_certificate, save_sla_certificate_json
)

# Configure and run
backend = OpenAIBackend(model="gpt-4o-mini")
items = [OpenAIItem(prompt="...", n_samples=7, m=6)]
planner = OpenAIPlanner(backend, temperature=0.3)
metrics = planner.run(items, h_star=0.05)

# Generate SLA certificate
report = planner.aggregate(items, metrics)
cert = make_sla_certificate(report, model_name="GPT-4o-mini")
save_sla_certificate_json(cert, "sla.json")
2. Web Interface (Streamlit)
streamlit run app/web/web_app.py
3. One-Click Launcher

Windows: Double-click launch/Launch App.bat
macOS: Double-click launch/Launch App.command
Linux: Run bash launch/launch.sh

First run creates .venv and installs dependencies automatically.
4. Desktop App (Electron)
Development:
cd electron
npm install
npm run start
Build installers:
npm run build
5. Offline Backend (PyInstaller)
Build single-file executable:
# macOS/Linux
bash scripts/build_offline_backend.sh

# Windows
scripts\build_offline_backend.bat
Creates bin/hallucination-backend[.exe] with bundled Python, Streamlit, and dependencies.

Minimal End-to-End Example
from scripts.hallucination_toolkit import (
    OpenAIBackend, OpenAIItem, OpenAIPlanner,
    make_sla_certificate, save_sla_certificate_json,
    generate_answer_if_allowed
)

# Setup
backend = OpenAIBackend(model="gpt-4o-mini")

# Prepare items
items = [
    OpenAIItem(
        prompt="Who won the 2019 Nobel Prize in Physics?",
        n_samples=7,
        m=6,
        skeleton_policy="closed_book"
    ),
    OpenAIItem(
        prompt="If James has 5 apples and eats 3, how many remain?",
        n_samples=7,
        m=6,
        skeleton_policy="closed_book"
    )
]

# Run evaluation
planner = OpenAIPlanner(backend, temperature=0.3)
metrics = planner.run(
    items,
    h_star=0.05,           # Target 5% hallucination max
    isr_threshold=1.0,     # Standard threshold
    margin_extra_bits=0.2, # Safety margin
    B_clip=12.0,          # Clipping bound
    clip_mode="one-sided" # Conservative mode
)

# Generate report and certificate
report = planner.aggregate(items, metrics, alpha=0.05, h_star=0.05)
cert = make_sla_certificate(report, model_name="GPT-4o-mini")
save_sla_certificate_json(cert, "sla_certificate.json")

# Show results
for item, m in zip(items, metrics):
    print(f"\nPrompt: {item.prompt[:50]}...")
    print(f"Decision: {'ANSWER' if m.decision_answer else 'REFUSE'}")
    print(f"Risk bound: {m.roh_bound:.3f}")
    print(f"Rationale: {m.rationale}")
    
    # Generate answer if allowed
    if m.decision_answer:
        answer = generate_answer_if_allowed(backend, item, m)
        print(f"Answer: {answer}")
License
This project is licensed under the MIT License — see the LICENSE file for details.
Attribution
Developed by Hassana Labs (https://hassana.io).
This implementation follows the framework from the paper “Compression Failure in LLMs: Bayesian in Expectation, Not in Realization” (NeurIPS 2024 preprint) and related EDFL/ISR/B2T methodology.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[You too can run malware from NPM (I mean without consequences)]]></title>
            <link>https://github.com/naugtur/running-qix-malware</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45179889</guid>
            <description><![CDATA[Contribute to naugtur/running-qix-malware development by creating an account on GitHub.]]></description>
            <content:encoded><![CDATA[You too can run malware from NPM (I mean without consequences)
Phishing NPM package authors continues, unsurprisingly.
The stakes are not high enough to switch from phishing to anything more advanced (like https://xkcd.com/538/) but seeing article blurbs say "Supply chain Attack" next to "These packages generally receive 2-3 billion downloads per week." might finally be enough to make an impression, one hopes.
This is not a detailed analysis of the attack, there's plenty of that already. If you're looking for one, visit our friends at https://socket.dev/blog/npm-author-qix-compromised-in-major-supply-chain-attack
Instead, let's look at how you could have a compromised dependency like that get into your app and be stopped.
One of the compromised packages was is-arrayish and I'll use that as an example going forward.
What the malware does
So if an app uses is-arrayish in the browser, it will override fetch, XMLHttpRequest and window.ethereum.request and whenever it finds a transaction being sent, it'll replace the target address with one of the malware author's addresses that looks most alike.
I won't go into this either, but you can take a look at the summary of "donations" some other friends linked to here: https://intel.arkm.com/explorer/entity/61fbc095-f19b-479d-a037-5469aba332ab
Pretty low impact for an attack this big. Some of it seems to be people mocking the malware author with worthless transfers.
Let's see it in action
Say we have an app.
The app allows the user to send a meaningless transaction to themselves. Don't expect it to make sense.
It also uses is-arrayish because otherwise we'd have nothing to demo.
const isArrayish = require("is-arrayish");

const button = document.createElement("button");
button.textContent = "Send ETH Transaction";
document.body.appendChild(button);

button.addEventListener("click", async () => {
  const accounts = await window.ethereum.request({
    method: "eth_requestAccounts",
  });
  if (!isArrayish(accounts)) {
    throw new Error("Accounts response must be array-like");
  }
  const myAddr = accounts[0];

  const txHash = await window.ethereum.request({
    method: "eth_sendTransaction",
    params: [
      {
        value: "0x5af3107a4000",
        from: myAddr,
        to: myAddr,
      },
    ],
  });
  console.log("Transaction sent:", txHash);
});
This is what it looks like:

Now after you update is-arrayish to 0.3.3 and rebuild the project, you might notice a slight difference.

Enter LavaMoat
If your project was set up with LavaMoat, you'd be using a policy to decide which package is allowed access to what. More about policies in the guide
With LavaMoat, all is-arrayish can do is fail:

TypeError: Cannot define property fetch, object is not extensible

BTW, If the malware was written a little better to avoid detection and fail silently, the functionality of the app would be fully restored.
LavaMoat Webpack Plugin
To protect the project, @lavamoat/webpack was used.
In short, what it does is: it puts modules from every dependency in a separate lexical global context that we call Compartment and only allows access to globals that the policy lists. I also controls which packages can import which other packages.
If the project dependency gets updated to contain malicious code, the policy will not allow it to access any globals or imports it didn't use before.
Read more in the official guide
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Mistral AI raises 1.7B€, enters strategic partnership with ASML]]></title>
            <link>https://mistral.ai/news/mistral-ai-raises-1-7-b-to-accelerate-technological-progress-with-ai</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45178041</guid>
            <description><![CDATA[We are announcing a Series C funding round of 1.7B€ at a 11.7B€ post-money valuation. This investment fuels our scientific research to keep pushing the frontier of AI to tackle the most critical and sophisticated technological challenges faced by strategic industries.]]></description>
            <content:encoded><![CDATA[We are announcing a Series C funding round of 1.7B€ at a 11.7B€ post-money valuation. This investment fuels our scientific research to keep pushing the frontier of AI to tackle the most critical and sophisticated technological challenges faced by strategic industries.
The Series C funding round is led by leading semiconductor equipment manufacturer, ASML Holding NV (ASML).
“ASML is proud to enter a strategic partnership with Mistral AI, and to be lead investor in this funding round. The collaboration between Mistral AI and ASML aims to generate clear benefits for ASML customers through innovative products and solutions enabled by AI, and will offer potential for joint research to address future opportunities.” said ASML CEO Christophe Fouquet.
It includes participation from existing investors: DST Global, Andreessen Horowitz, Bpifrance, General Catalyst, Index Ventures, Lightspeed and NVIDIA.
For the last two years, we have advanced AI through cutting-edge research and strategic partnerships with corporate and industrial champions. We will continue to develop custom decentralized frontier AI solutions that solve the most complex engineering and industrial problems. It empowers enterprises, public sectors, and industries a competitive edge through state-of-the-art models, tailored solutions, and high-performance compute infrastructure. This funding round reaffirms the company’s independence. 
“This investment brings together two technology leaders operating in the same value chain. We have the ambition to help ASML and its numerous partners solve current and future engineering challenges through AI, and ultimately to advance the full semiconductor and AI value chain”, said Mistral AI CEO Arthur Mensch.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Strong Eventual Consistency – The Big Idea Behind CRDTs]]></title>
            <link>https://lewiscampbell.tech/blog/250908.html</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45177518</guid>
            <description><![CDATA[Missing the Forest for the Sequence Trees.]]></description>
            <content:encoded><![CDATA[
    9/8/2025
    
    CRDTs. Data structures that can be replicated across multiple nodes, edited independently, merged back together, and it all just works. But collaborative document editing and multiplayer TODO lists are just the tip of the iceberg - I believe the big application is distributed databases, and for that we need to talk about consistency.
CRDTs are a tool for Strong Eventual Consistency. Let's start with the definition of normal Eventual Consistency1:

  Eventual Delivery
  An update delivered to one node will eventually reaches all nodes
  
  Eventual Convergence
  If two nodes have seen all the same updates, they will eventually have the same state.


Strong Eventual Consistency (SEC) replaces Eventual Convergence with Strong Convergence:

  Strong Convergence
  If two nodes have seen all the same updates, they will have the same state.


Spot the difference! In SEC two replicas have the same state as soon as the updates are processed, not eventually. If multiple nodes are updated independently, there will be conflicts - this is inevitable. What SEC guarantees is that these conflicts are solved automatically and deterministically.
This has massive implications. SEC means low latency, because nodes don't need to coordinate to handle reads and writes. It means incredible fault tolerance - every single node in the system bar one could simultaneously crash, and reads and writes could still happen normally. And it means nodes still function properly if they're offline or split from the network for arbitrary time periods.
Strong Eventual Consistency is Eventual Consistency that works. If you're doing local first, or low latency geo-replicated systems - accept no substitute. This is the context I think we should see CRDTs in - building blocks of Strongly Eventually Consistent systems. CRDTs as application state as one thing, CRDTs as entire databases are quite another.

Footnotes


All definitions here are adapted from Shapiro, Marc; Preguiça, Nuno; Baquero, Carlos; Zawirski, Marek (2011). "Conflict-Free Replicated Data Types". ↩




    
    
    I'm available for hire.
  ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Liquid Glass in the Browser: Refraction with CSS and SVG]]></title>
            <link>https://kube.io/blog/liquid-glass-css-svg/</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45174297</guid>
            <description><![CDATA[Explore how to recreate Apple's stunning Liquid Glass effect using CSS, SVG Displacement Maps, and refraction calculations.]]></description>
            <content:encoded><![CDATA[
#Introduction
Apple introduced the Liquid Glass effect during WWDC 2025 in June—a stunning UI effect that makes interface elements appear to be made of curved, refractive glass. This article is a hands‑on exploration of how to recreate a similar effect on the web using CSS, SVG displacement maps, and physics-based refraction calculations.
Instead of chasing pixel‑perfect parity, we’ll approximate Liquid Glass, recreating the core refraction and a specular highlight, as a focused proof‑of‑concept you can extend.
We'll build up the effect from first principles, starting with how light bends when passing through different materials.
Chrome‑only demoThe interactive demo at the end currently works in Chrome only (due to
SVG filters as backdrop‑filter).You can still read the article and interact with the inline
simulations in other browsers.
#Understanding Refraction
Refraction is what happens when light changes direction as it passes from one material to another (like from air into glass). This bending occurs because light travels at different speeds through different materials.
The relationship between the incoming and outgoing light angles is described by Snell–Descartes law:
n1sin⁡(θ1)=n2sin⁡(θ2)n_1 \sin(\theta_1) = n_2 \sin(\theta_2)
n1=refractive index of first mediumn_1 = \text{refractive index of first medium}θ1=angle of incidence\theta_1 = \text{angle of incidence}n2=refractive index of second mediumn_2 = \text{refractive index of second medium}θ2=angle of refraction\theta_2 = \text{angle of refraction}
θ1θ1θ2First Mediumn1= 1Second Mediumn2= 1.5Normal0.013n21.5
In the above interactive diagram, you can see that:


When n2=n1n_2 = n_1, the light ray passes straight through without bending.


When n2>n1n_2 > n_1, the ray bends toward the normal (the imaginary line perpendicular to the surface).


When n2<n1n_2 < n_1, the ray bends away from the normal, and depending on the angle of incidence, it may bend so much that it reflects back into the original medium instead of passing through.
This is called Total Internal Reflection


When incident ray is orthogonal to the surface, it passes straight through regardless of refractive indices.


#Limitations in this project
To keep things focused we avoid complex branches of behavior by constraining the scenario:


Ambient medium has index=1index = 1 (air).


Use materials with index>1index > 1, and prefer 1.51.5 (glass).


Only one refraction event (ignore any later exit / second refraction).


Incident rays are always orthogonal to the background plane (no perspective).


Objects are 2D shapes parallel to the background (no perspective).


No gap between objects and background plane (only one refraction).


Circle shapes only in this article:
Extending to other shapes requires preliminary calculations.
Circles let us form rounded rectangles by stretching the middle.


Under these assumptions every ray we manipulate has a well-defined refracted direction via Snell's Law, and we simplify a lot our calculations.
#Creating the Glass Surface
To create our glass effect, we need to define the shape of our virtual glass surface. Think of this like describing the cross-section of a lens or curved glass panel.
#Surface Function
Our glass surface is described by a mathematical function that defines how thick the glass is at any point from its edge to the end of the bezel. This surface function takes a value between 00 (at the outer edge) and 11 (end of bezel, start of flat surface) and returns the height of the glass at that point.
const height = f(distanceFromSide);
From the height we can calculate the angle of incidence, which is the angle between the incoming ray and the normal to the surface at that point. The normal is simply the derivative of the height function at that point, rotated by −90-90 degrees:
const delta = 0.001; // Small value to approximate derivative
const y1 = f(distanceFromSide - delta);
const y2 = f(distanceFromSide + delta);
const derivative = (y2 - y1) / (2 * delta);
const normal = { x: -derivative, y: 1 }; // Derivative, rotated by -90 degrees
#Equations
For this article, we will use four different height functions to demonstrate the effect of the surface shape on the refraction:
Convex Circley=(1−(1−x))2y = \sqrt{(1 - (1 - x)) ^ 2}Simple circular arc → a spherical dome. Easier than the squircle, but the
transition to the flat interior is harsher, producing sharper refraction
edges—more noticeable when the shape is stretched away from a true circle.Convex Squircley=1−(1−x)44y = \sqrt[4]{1 - (1 - x) ^ 4}Uses the Squircle Apple favors: a
softer flat→curve transition that keeps refraction gradients smooth even
when stretched into rectangles—no harsh interior edges. It also makes the
bezel appear optically thinner than its physical size because the flatter
outer zones bend light less.Concavey=1−Convex(x)y = 1 - \text{Convex}(x)The concave surface is the complement of the convex function, creating a
bowl-like depression. This surface causes light rays to diverge outward,
displacing them beyond the glass boundaries.Lipy=mix(Convex(x),Concave(x),Smootherstep(x))y = \text{mix}(\text{Convex}(x), \text{Concave}(x), \text{Smootherstep}(x))Blends convex and concave via Smootherstep: raised rim, shallow center dip.
We could make the surface function more complex by adding more parameters, but these four already give a good idea of how the surface shape affects the refraction.
#Simulation
Now let's see these surface functions in action through interactive ray tracing simulations. The following visualization demonstrates how light rays behave differently as they pass through each surface type, helping us understand the practical implications of our mathematical choices.

From the simulation, we can see that concave surfaces push rays outside the glass; convex surfaces keep them inside.
We want to avoid outside displacement because it requires sampling background beyond the object. Apple’s Liquid Glass appears to favor convex profiles (except for the Switch component, covered later).
The background arrow indicates displacement—how far a ray lands compared to where it would have landed without glass. Color encodes magnitude (longer → more purple).
Take a look at symmetry: rays at the same distance from the border share the same displacement magnitude on each side. Compute once, reuse around the bezel/object.
#Displacement Vector Field
Now that calculated the displacement at a distance from border, let's calculate the displacement vector field for the entire glass surface.
The vector field describes at every position on the glass surface how much the light ray is displaced from its original position, and in which direction. In a circle, this displacement is always orthogonal to the border.
#Pre-calculating the displacement magnitude
Because we saw that this displacement magnitude is symmetric around the bezel, we can pre-calculate it for a range of distances from the border, on a single radius.
This allows us to calculate everything in two dimensions once (x and z axis), on one "half-slice" of the object, and we will the rotate these pre-calculated displacements around the z-axis.
The actual number of samples we need to do on a radius is of 127 ray simulations, and is determined by the constraints of the SVG Displacement Map resolution. (See next section.)

#Normalizing vectors
In the above diagram, the arrows are all scaled down for visibility, so they do not overlap. This is normalization, and is also useful from a technical standpoint.
To use these vectors in a displacement map, we need to normalize them. Normalization means scaling the vectors so that their maximum magnitude is 11, which allows us to represent them in a fixed range.
So we calculate the maximum displacement magnitude in our pre-calculated array:
const maximumDisplacement = Math.max(...displacementMagnitudes);
And we divide each vector's magnitude by this maximum:
displacementVector_normalized = {
  angle: normalAtBorder,
  magnitude: magnitude / maximumDisplacement,
};
We store maximumDisplacement as we will need it to re-scale the displacement map back to the actual magnitudes.
#SVG Displacement Map
Now we need to translate our mathematical refraction calculations into something the browser can actually render. We'll use SVG displacement maps.
A displacement map is simply an image where each pixel's color tells the browser how far it should find the actual pixel value from its current position.
SVG's <feDisplacementMap /> encodes these pixels in a 32 bit RGBA image, where each channel represents a different axis of displacement.
It's up to the user to define which channel corresponds to which axis, but it is important to understand the constraint:
Because each channel is 8 bits, the displacement is limited to a range of -128 to 127 pixels in each direction. (256 values possible in total).
128 is the neutral value, meaning no displacement.
SVG filters can only use images as displacement maps, so we need to convert our displacement vector field into an image format.
<svg colorInterpolationFilters="sRGB">
  <filter id={id}>
    <feImage
      href={displacementMapDataUrl}
      x={0}
      y={0}
      width={width}
      height={height}
      result="displacement_map"
    />
    <feDisplacementMap
      in="SourceGraphic"
      in2="displacement_map"
      scale={scale}
      xChannelSelector="R" // Red Channel for displacement in X axis
      yChannelSelector="G" // Green Channel for displacement in Y axis
    />
  </filter>
</svg>
<feDisplacementMap /> uses the red channel for the X axis and the green channel for the Y axis. The blue and alpha channels are ignored.
#Scale
The Red (X) and Green (Y) channels are 8‑bit values (0–255). Interpreted without any extra scaling, they map linearly to a normalized displacement in [−1, 1], with 128 as the neutral value (no displacement):
0↦−1128↦0255↦1\begin{aligned}
0 &\mapsto -1 \\
128 &\mapsto 0 \\
255 &\mapsto 1
\end{aligned}The scale attribute of <feDisplacementMap /> multiplies this normalized amount:
0↦−scale128↦0255↦scale\begin{aligned}
0 &\mapsto -scale \\
128 &\mapsto 0 \\
255 &\mapsto scale
\end{aligned}Because our vectors are normalized using the maximum possible displacement (in pixels) as the unit, we can reuse that maximum directly as the filter’s scale:
<feDisplacementMap
  in="SourceGraphic"
  in2="displacement_map"
  scale={maximumDisplacement} // max displacement (px) → real pixel shift
  xChannelSelector="R"
  yChannelSelector="G"
/>
You can also animate scale to fade the effect in/out—no need to recompute the map (useful for artistic control even if not physically exact).
#Vector to Red-Green values
To convert our displacement vector field into a displacement map, we need to convert each vector into a color value. The red channel will represent the X component of the vector, and the green channel will represent the Y component.
We currently have polar coordinates (angle and magnitude) for each vector, so we need to convert them to Cartesian coordinates (X and Y) before mapping them to the red and green channels.
const x = Math.cos(angle) * magnitude;
const y = Math.sin(angle) * magnitude;
Because we normalised our vectors already, magnitude here is between 0 and 1.
From here, we just remap the values to the range of 0 to 255 for the red and green channels:
Red: 218X axis: 0.71Green: 218Y axis: 0.71Result (Blended)
const result = {
  r: 128 + x * 127, // Red channel is the X component, remapped to 0-255
  g: 128 + y * 127, // Green channel is the Y component, remapped to 0-255
  b: 128, // Blue channel is ignored
  a: 255, // Alpha channel is fully opaque
};
After converting every vector in the map to color value, we get an image that can be used as a displacement map in the SVG filter.
#Playground
This playground applies the SVG displacement filter to a simple scene and lets you tweak surface shape, bezel width, glass thickness, and effect scale. Watch how these inputs change the refraction field, the generated displacement map, and the final rendering.
Displacement MapPreview   
#Specular Highlight
The final piece of our Liquid Glass effect is the specular highlight—those bright, shiny edges you see on real glass objects when light hits them at certain angles.
The way Apple implements it seems to be a simple rim light effect, where the highlight appears around the edges of the glass object, and its intensity varies based on the angle of the surface normal relative to a fixed light direction.
Specular Angle: -60°-180°0°180°
#Combining Refraction and Specular Highlight
In the final SVG filter, we combine both the displacement map for refraction and the specular highlight effect.
Both are loaded as separate <feImage /> elements, and then combined using <feBlend /> to overlay the highlight on top of the refracted image.
But this part is actually the most "creative" part of the effect, and it's just by tweaking the number of filters, and their parameters, that you can get a variety of different looks.
#SVG Filter as backdrop-filter
This is the part where cross-browser compatibility ends. Only Chrome currently supports using SVG filters as backdrop-filter, which is essential for applying the Liquid Glass effect to UI components:
.glass-panel {
  backdrop-filter: url(#liquidGlassFilterId);
}

Note: The backdrop-filter dimensions does not adjust automatically to the element size, so you need to ensure that your filter images fit the size of your elements.

Now that we have all the pieces in place, we can create components that use this effect.
#Bringing It All Together: Real UI Components
With our refraction math and displacement maps working, let's see how this translates to actual UI components you might use in an application.
Chrome‑specific demoChrome allows using SVG filters as backdrop-filter, which
isn’t part of the CSS spec.Above, we used regular filter so it’s viewable in
Safari/Firefox.The next components use backdrop-filter, so they’re
Chrome‑only.
The goal won't be to create real components for production, but just to get a taste of how the effect looks in different UI elements.
#Magnifying Glass
This component actually uses two displacement maps: one for the refraction on the sides, and one for the zooming, which has a stronger refraction effect.
It also plays with shadows and scaling to create a more dynamic, interactive effect.
Optics StudyDrag the capsule to bend the page. This lens is a compact SVG displacement rig that refracts whatever sits beneath it.The field comes from a rounded bezel profile; pixels are pushed along its gradient, then topped with a subtle specular bloom for depth.Sweep across strong edges—high contrast makes the bend snap.ParametersSpecular Opacity0.50Specular Saturation9Refraction Level1.00
#Searchbox
Use image backgroundParametersSpecular Opacity0.20Specular Saturation4Refraction Level0.70Blur Level1.0
#Switch
This uses a lip bezel, which makes the surface convex on the outside and concave in the middle. This makes the center slider zoomed out, while the edges refract the inside.
Force activeParametersSpecular Opacity0.50Specular Saturation6Refraction Level1.00Blur Level0.2
#Slider
Slider allows you to see the current level through the glass, while the sides refract the background. It uses a convex bezel.
Force activeParametersSpecular Opacity0.40Specular Saturation7Refraction Level1.00Blur Level0.0
#Music Player
This fake music player UI tries to mimic the look of Apple Music’s Liquid Glass panels, using a convex bezel and a subtle specular highlight.
It relies on the iTunes Search API to fetch album art and song details.
No resultsParametersSpecular Opacity0.40Specular Saturation6Refraction Level1.00Blur Level1.0Progressive Blur Strength1.00Glass Background Opacity0.60
#Conclusion
This prototype distills Apple’s Liquid Glass into real‑time refraction plus a simple highlight. It’s flexible, but still Chrome‑bound—only Chromium exposes SVG filters as backdrop-filter. That said, it’s already viable inside Chromium‑based runtimes like Electron, elsewhere you could fake a softer fallback with layered blur.
Treat this strictly as experimental. Dynamic shape/size changes are currently costly because nearly every tweak (besides animating <filter /> props, like scale) forces a full displacement map rebuild.
The code needs a cleanup pass and perf work before any possible open‑source release.
Thanks for reading my first post—I'd genuinely love any feedback, ideas, critiques, or suggestions. If it sparked a thought or you know someone who'd enjoy this kind of deep‑dive, feel free to pass it along.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The elegance of movement in Silksong]]></title>
            <link>https://theahura.substack.com/p/the-elegance-of-movement-in-silksong</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45174037</guid>
        </item>
        <item>
            <title><![CDATA[Microsoft doubles down on small modular reactors and fusion energy]]></title>
            <link>https://www.techradar.com/pro/microsoft-joins-world-nuclear-association-as-it-doubles-down-on-small-modular-reactors-and-fusion-energy</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45172609</guid>
            <description><![CDATA[Nuclear energy is stepping into big tech’s future electricity strategies]]></description>
            <content:encoded><![CDATA[









(Image credit: Kairos Power)




Microsoft is chasing carbon-free energy while data demand keeps risingThe World Nuclear Association gains unprecedented visibility through Microsoft’s membershipSmall modular reactors are being framed as digital infrastructure’s next foundationMicrosoft has officially joined the World Nuclear Association (WNA), making it the first global technology company of its scale to do so.The announcement comes at a time when the nuclear industry is attempting to position itself as a necessary partner for both climate targets and the electricity needs of a rapidly expanding digital economy.For Microsoft, the move signals a deeper commitment to technologies like small modular reactors and fusion energy as part of its long-term carbon-free ambitions.Balancing climate goals with electricity demandElectricity consumption tied to data centers is expected to grow sharply in the next decade, putting pressure on utilities and energy-intensive industries alike.Microsoft’s decision to align with the World Nuclear Association reflects this trend, as while the company already invests heavily in renewable power sources, nuclear energy offers continuous, high-capacity output that wind and solar cannot always provide.The WNA describes Microsoft’s membership as a "game-changing moment," but such claims will likely face scrutiny given the slow pace of nuclear deployment globally."Microsoft's membership with the Association is a game-changing moment for our industry," said World Nuclear Association Director General Sama Bilbao y León.Sign up to the TechRadar Pro newsletter to get all the top news, opinion, features and guidance your business needs to succeed!"When one of the world's most innovative technology companies recognizes nuclear energy as essential to its carbon-negative future, it sends a powerful signal to markets, policymakers, and industry leaders worldwide. This partnership will accelerate nuclear deployment at the scale needed to meet both climate goals and the growth in energy demand from data centers."Microsoft has already signed long-term agreements designed to secure reliable energy supplies.One of the most notable is a 20-year power purchase agreement with Constellation Energy, intended to restart the Crane Clean Energy Center, the former Three Mile Island Unit 1 facility in the United States.In addition, the company struck one of the earliest commercial deals with fusion energy company Helion.As part of its World Nuclear Association membership, Microsoft is expected to work on areas like advanced nuclear technologies, regulatory efficiency, and supply chain resilience.Small modular reactors and next-generation systems, including potential fusion breakthroughs, are central to this collaboration.Advocates argue that streamlined licensing and stronger global supply chains are critical if nuclear power is to play a larger role in meeting energy demand.Still, the challenges of cost, construction delays, and political opposition remain major barriers.Microsoft’s Energy Technology team, led by Dr. Melissa Lott, will take a leading role in shaping how the company participates in the Association’s initiatives.For the World Nuclear Association, securing a member like Microsoft brings both visibility and legitimacy.For Microsoft, it offers a chance to hedge its energy bets in an uncertain market, but whether this partnership proves transformative depends on the ability of nuclear technologies to deliver results."Nuclear energy isn't just part of the technology sector’s energy strategy, it's essential to it," said León. "Microsoft joining the Association allows greater collaboration between one of the major energy users and the nuclear industry to address the regulatory, technical, and financial challenges to accelerate nuclear deployment. The global nuclear industry isn’t just generating electricity, it’s energizing technology."You might also likeCheck out our pick of the best secure routers on offerWe've rounded up the best portable monitors available nowSharing might be caring, but businesses are moving towards private servers



Efosa has been writing about technology for over 7 years, initially driven by curiosity but now fueled by a strong passion for the field. He holds both a Master's and a PhD in sciences, which provided him with a solid foundation in analytical thinking. Efosa developed a keen interest in technology policy, specifically exploring the intersection of privacy, security, and politics. His research delves into how technological advancements influence regulatory frameworks and societal norms, particularly concerning data protection and cybersecurity. Upon joining TechRadar Pro, in addition to privacy and technology policy, he is also focused on B2B security products. Efosa can be contacted at this email: udinmwenefosa@gmail.com






]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[iPhone dumbphone]]></title>
            <link>https://stopa.io/post/297</link>
            <guid isPermaLink="false">https://news.ycombinator.com/item?id=45171200</guid>
            <description><![CDATA[I used Apple Configurator to turn my iPhone into a dumb phone. I can only access the apps and websites I want to use, and it’s feeling great!]]></description>
            <content:encoded><![CDATA[I used Apple Configurator to turn my iPhone into a dumb phone. I can only access the apps and websites I want to use, and it’s feeling great!
Compared to when I started I’m saving about 2 hours of screen time a day. If I kept this up for a month I promised to write a post about this setup. It’s now two months so here’s my post. What follows is a backstory, observations, and a how-to-guide.
To get straight to the how-to-guide, click here.
Motivation
It’s common to rack up 4 hours or more of screen time a day on your phone. Here’s one way to see the cost of that: every 20 years, you lose 5 years of your waking time looking at your phone.
This is what had me dreaming about the 2000s and old Nokia phones. But I couldn’t just go back to Nokia. My iPhone gave me Google Maps, Spotify, Uber and Waymo, Kindle and Audible, ChatGPT and Claude, Whatsapp, Wallet.
There’s real utility to iPhones. If only access to utilities didn’t mean I’d also have access to social media.
I often regretted my time on Twitter and Instagram. It would interrupt my flow states at work and detract from quality time with the people I loved. Even alone time suffered: instead of solitude I found myself checking for notifications. [1]
Failed Attempts
I tried and failed to fix this problem three times. Let me enumerate:
I tried self-control but I found myself outmatched. On the surface the solution feels simple: why not just stop using distracting apps? For me using self-control here was like a hunter-gatherer using a club in open battle with a nuclear society. Social media companies spent centuries of human effort figuring out ways to get me to check my phone. If I wanted to win, I would need to use guerrilla methods.
I tried Screen Time but it was too easy to ignore. Apple comes with Screen Time. You can set limits, but I found them useless. Once a limit runs out all you need to unlock your distracting app is to press a button. Do this a few times and you no longer notice the button.
I tried switching phones, but couldn’t let go of the long-tail of iPhone apps. There are lots of interesting dumb phones out there. There’s some with e-ink screens that are really cool. But they only have a few apps. There was always some app that I missed. Even with recent Android-based dumbphones, there were still apps that were only available on the iPhone (I am looking at you Things 3).
If only I could keep my iPhone, but choose just the apps and the websites that I wanted.
Apple Configurator to the rescue
That’s where I discovered Apple Configurator. Apple Configurator lets organizations deploy specific restrictions onto iPhones. This is what lets Apple Stores restrict the iPhones on display, so you can’t change their wallpaper to something humorous.
Configurator is meant for businesses, but nothing stops us from using it personally. And it’s free too!
The Pros of Apple Configurator
I found three advantages to using Configurator.
The first is that there is real friction to making changes. In order to adjust restrictions, you have to physically connect your iPhone to your laptop and open up a kludgy piece of software. This is cumbersome enough that if you have enough willpower to go through with it, you’ll be level-headed enough to not want too. [2]
The second is that you can actually disable the App Store! This is a marvelous win. Having an App Store in your home screen is like being dieter with a pastry shop in your kitchen. It’s not a good idea. So no more App Store. And combine that with content filters for websites, and you can really lock down your phone. When you are at your weakest, there’s effectively no way to hack around the restrictions.
And the final win, it’s still an iPhone. This means you can make a dumbphone that fits your needs exactly. There are some apps that sound distracting on the surface, that I just needed plain and simple. For example, my startup uses Discord to talk to users; I want to have it. I want the GitHub app. I want Things3 and Waymo. I want to access specific websites. I can set it all up so my phone is exactly the utility I need it to be.
The Cons of Apple Configurator
If you’re getting excited, let me prepare you with two cons.
The first is that you have to factory reset your iPhone. You can only set up Apple Configurator with a completely reset phone. This means the initial setup is annoying and will take you a few hours. But perhaps this a good thing too. If you go through this trouble, you’ll be even more motivated to stick with your choices.
The second is that getting the right setup takes a few weeks, and you may need to rely on others. When you start out you may forget an app or two (or a lot more). For example, I went to my gym the day after I set my restrictions, only to remember that they have a special iPhone to check in. You’ll have lots of little frictions like this. As you do, you’ll improve your configuration so this happens less. It’ll get better but there will still be a long-tail. Maybe you’re at a restaurant and they need you to open a website for example. You may end up having to bug some people around you for their phone. It can be annoying but I haven’t found this to be too troublesome.
Observations so far
So, it’s 2 months in. Here’s my experience so far:
The Good
It feels great. My phone feels like a utility. I think this is the same kind of change in feeling I would have had if I shifted from eating junk food to healthy food. My phone used to have this gravity: like invariably my attention would shift towards it. Now it just feels like a very useful rock.
I found ChatGPT and Claude critically useful. Whenever I need some information, I can just ask my LLM, and it can give me a distraction free summary. It helps the long-tail of weird situations too: for example if someone asks me to take a look at a website, I can ask my LLM to scrape it and summarize the details for me. It’s pretty hard to get distracted this way.
And in the the last 2 months I have not felt the desire to remove the restrictions. This wasn’t the case with any previous setup I tried. I think it’s because the friction feels just right. I feel like I can control exactly how my phone should work; there’s just a day or two delay. The delay keeps me level-headed.
The remaining issues
So far the only real unsolved issue I have are related to “semi-important” apps. Consider email. I still need to have access to email, and I want to have notifications enabled so I don’t miss something truly important. But 90% of the emails I get aren’t important.
I am not sure what the solution is to these kind of apps. Maybe I can find a special mail app, that only shows you important emails. If I had something like this I think I would just be over the moon with this setup. [3]
The Overall
I used to spend about 4 hours a day on my phone. I’m now down to about 2 hours a day. Looking at the stats, it’s 1 hour of reasonably productive apps, mixed with communication apps (my family lives in a different country, so I make long calls). Overall I don’t regret this time.

The How-To Guide
If you want to do this yourself, it’s going to take a 2-hour initial commitment, and about 2 weeks of tweaks to get everything set up just right.
In the first 2 hours, you will factory reset your phone, and set up Apple Configurator. As those two weeks progress, you’ll tweak your restrictions so you have just the apps and the websites you actually need.
Okay, let’s get into those first 2 hours!
1. Factory reset your iPhone
Time to reset your iPhone. Go to Settings → General → Transfer or Reset iPhone → Erase all content and settings.

This is the first, and the scariest step. Do it, and you are on the journey 🫡
2. Install Apple Configurator
Now head on over to the Apple and install Apple Configurator. Open the app and click ‘Get Started’

3. ‘Prepare’ your iPhone
We can then prepare your device for configurator. Connect your iPhone to your laptop. You should see it show up in Configurator. Once you do, Right click and click “Prepare”:

Select “Manual Configuration”, with “Supervise devices” like so:

You can skip “Sign in to Apple School Manager or Apple Business Manager”. Just press Next.

Now enter an “Organization”. Since this is just for yourself, you are an organization of one : ). I use my name:

In “Configure iOS Setup Assistant”, select “Don’t show any of these steps”

Click “Prepare”

Aand you’re ready to go!

Your phone is now ready for Configurator.
4. Set up your iPhone
Before we start adding restrictions, let’s set your phone up. Go through Apple’s setup, and make sure you do not restore your iPhone from an iCloud backup. This will undo the supervision stuff we just did.
Once you set things up, go ahead and install all the apps that you’ll need. As a way to jog your memory, here are the apps that I ended up installing:
## Reading/Learning

- Audible
- Kindle

## Convenience

- Doordash
- Uber
- Lyft
- Waymo
- Turo

## Health

- (Your Gym App)
- Whoop

## Auth

- LastPass
- Authenticator

## Communication

- Messenger
- WhatsApp
- Signal
- Slack
- Discord

## AI

- ChatGPT
- Claude

## Google

- Gmail
- Google Calendar
- Google Maps
- Google Photos

## Dev

- Expo Go
- GitHub
- TestFlight

## Home

- Ring

## Music

- Spotify

## Producitvity

- Things5. Create your ‘Profile’
Now it’s time to set up your restrictions! You’ll create a new Configurator ‘Profile’.
Click ‘File’ → ‘New Profile’.
You’ll make three changes
General
Under ‘General’: For ‘Security’ and ‘Automatically Remove Profile’, set ‘Never’:

Content Filter
Head on over to ‘Content Filter’, and click ‘Configure’. For ‘Filter Type’, select “Specific Websites only”:

Enter some of the sites you want to use. To jog your memory, here are some sites I added:
## Google Auth

- https://accounts.google.com

## Docs

- https://dropbox.com

## Modern databases with real-time sync

- https://instantdb.comRestrictions
‘Restrictions’ are where we will disable the App Store. Click on ‘Restrictions’ → ‘Configure’.
Keep everything as it is, just uncheck ‘Allow Installing Apps’

With that, save your profile. Once we install this profile on your phone…you’re done.
6. Add your profile!
So let’s install this profile to your iPhone.
Right click your phone on Configurator, hit ‘Add’ → ‘Profiles’, pick your profile, and you’re ready to go!

When you load your phone, you should no longer see an App Store!
An on/off switch
After a while you may realize you need to install some new apps. When you want to do that, connect your phone, ‘Right click’ → ‘Remove’ → ‘Profile’

Once you remove your profile, you’re back to a restrictionless world. Make all the changes you need, and then add it back.
Fin
And with that, you have an iPhone dumbphone! I hope it’s as useful for you as it has been for me.
If you follow the instructions and have any issues or changes to make, please send me an email.

Thanks to Ilia Parunashvili for trying the original instructions I wrote out and providing screenshots.
Thanks to Alex Kotliarskyi, Alex Reichert, Daniel Woelfel, Jacky Wang, Nicole Garcia Fischer, for reviewing drafts of this essay.
[1] Let the record show I don’t think these apps are useless. I made friends on Twitter, heck I worked at Facebook for 4 years. I just think these are tools better used in moderation. But it’s hard to use them in moderation on your phone.
[2] And if you already have your laptop handy, there’s an easier fix for your distraction: just use your laptop to check Twitter.
[3] My friend Alex Kotliarskyi mentioned I could try using Google’s App Script to talk to an LLM and filter emails. This could be cool!
]]></content:encoded>
        </item>
    </channel>
</rss>