<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-09-23T03:44:07.757412+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45332859</id><title>I'm spoiled by Apple Silicon but still love Framework</title><updated>2025-09-23T03:44:14.760740+00:00</updated><content>&lt;doc fingerprint="9eb0593b034f91dc"&gt;
  &lt;main&gt;
    &lt;p&gt;I mainly use my MacBook M1 Pro with Apple Silicon for work. Recently I’ve had a few weeks off. It’s been sitting in my laptop bag waiting for me to return to work.&lt;/p&gt;
    &lt;p&gt;Since I’m back to work tomorrow I got it out to see if it was charged enough for the train journey in the morning. 90% remaining. After 3 weeks. It wasn’t turned off, just closed.&lt;/p&gt;
    &lt;p&gt;In contrast, my Framework 13 with an AMD Ryzen 7840HS is almost always dead when I go to use it. It’s very frustrating. I’m not using it every day so it often goes 2-3 days without being opened. I haven’t measured it but I read that I should expect it to lose 3-4% in suspend every hour. Is that a joke?&lt;/p&gt;
    &lt;p&gt;I was running Fedora Workstation on the 13 for a long while until I had a short stint with Arch Linux. It wasn’t stable enough so now I’m on Fedora Silverblue which has been delightful.&lt;/p&gt;
    &lt;p&gt;However, the Framework’s battery life continues to be an issue.&lt;/p&gt;
    &lt;p&gt;I’m a true believer of Framework’s mission. The technology is awesome. But why is the battery life of modern laptops (other than Apple Silicon) so bad? I don’t think it’s unique to Framework, but it affects my love for this groundbreaking device.&lt;/p&gt;
    &lt;p&gt;Apple Silicon is built upon ARM64 which is apparently core to such great battery life. Do I need to get an ARM mainboard as soon as Framework offers it as an upgrade? I’m not sure. It appears to be way more complicated than just switching to ARM64.&lt;/p&gt;
    &lt;p&gt;I still love my Framework, despite its flaws. I will just keep it plugged in so that it’s ready to go when I want to use it.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://simonhartcher.com/posts/2025-09-22-why-im-spoiled-by-apple-silicon-but-still-love-framework/"/><published>2025-09-22T13:03:10+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45332860</id><title>Cloudflare is sponsoring Ladybird and Omarchy</title><updated>2025-09-23T03:44:14.489952+00:00</updated><content>&lt;doc fingerprint="29520b5b1bc621bc"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;At Cloudflare, we believe that helping build a better Internet means encouraging a healthy ecosystem of options for how people can connect safely and quickly to the resources they need. Sometimes that means we tackle immense, Internet-scale problems with established partners. And sometimes that means we support and partner with fantastic open teams taking big bets on the next generation of tools.&lt;/p&gt;
      &lt;p&gt;To that end, today we are excited to announce our support of two independent, open source projects: Ladybird, an ambitious project to build a completely independent browser from the ground up, and Omarchy, an opinionated Arch Linux setup for developers.Â &lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h2"&gt;Two open source projects strengthening the open InternetÂ &lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Cloudflare has a long history of supporting open-source software â both through our own projects shared with the community and external projects that we support. We see our sponsorship of Ladybird and Omarchy as a natural extension of these efforts in a moment where energy for a diverse ecosystem is needed more than ever.Â Â &lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Ladybird, a new and independent browserÂ &lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Most of us spend a significant amount of time using a web browser âÂ in fact, youâre probably using one to read this blog! The beauty of browsers is that they help users experience the open Internet, giving you access to everything from the largest news publications in the world to a tiny website hosted on a Raspberry Pi.Â Â &lt;/p&gt;
      &lt;p&gt;Unlike dedicated apps, browsers reduce the barriers to building an audience for new services and communities on the Internet. If you are launching something new, you can offer it through a browser in a world where most people have absolutely zero desire to install an app just to try something out. Browsers help encourage competition and new ideas on the open web.&lt;/p&gt;
      &lt;p&gt;While the openness of how browsers work has led to an explosive growth of services on the Internet, browsers themselves have consolidated to a tiny handful of viable options. Thereâs a high probability youâre reading this on a Chromium-based browser, like Googleâs Chrome, along with about 65% of users on the Internet. However, that consolidation has also scared off new entrants in the space. If all browsers ship on the same operating systems, powered by the same underlying technology, we lose out on potential privacy, security and performance innovations that could benefit developers and everyday Internet users.Â &lt;/p&gt;
      &lt;p&gt;A screenshot of Cloudflare Workers developer docs in LadybirdÂ &lt;/p&gt;
      &lt;p&gt;This is where Ladybird comes in: itâs not Chromium based â everything is built from scratch. The Ladybird project has two main components: LibWeb, a brand-new rendering engine, and LibJS, a brand-new JavaScript engine with its own parser, interpreter, and bytecode execution engine.Â &lt;/p&gt;
      &lt;p&gt;Building an engine that can correctly and securely render the modern web is a monumental task that requires deep technical expertise and navigating decades of specifications governed by standards bodies like the W3C and WHATWG. And because Ladybird implements these standards directly, it also stress-tests them in practice. Along the way, the project has found, reported, and sometimes fixed countless issues in the specifications themselves, contributions that strengthen the entire web platform for developers, browser vendors, and anyone who may attempt to build a browser in the future.&lt;/p&gt;
      &lt;p&gt;Whether to build something from scratch or not is a perennial source of debate between software engineers, but absent the pressures of revenue or special interests, weâre excited about the ways Ladybird will prioritize privacy, performance, and security, potentially in novel ways that will influence the entire ecosystem.&lt;/p&gt;
      &lt;p&gt;A screenshot of the Omarchy development environment&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Omarchy, an independent development environmentÂ &lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Developers deserve choice, too. Beyond the browser, a developerâs operating system and environment is where they spend a ton of time â and where a few big players have become the dominant choice. Omarchy challenges this by providing a complete, opinionated Arch Linux distribution that transforms a bare installation into a modern development workstation that developers are excited about.&lt;/p&gt;
      &lt;p&gt;Perfecting oneâs development environment can be a career-long art, but learning how to do so shouldnât be a barrier to beginning to code. The beauty of Omarchy is that it makes Linux approachable to more developers by doing most of the setup for them, making it look good, and then making it configurable. Omarchy provides most of the tools developers need â like Neovim, Docker, and Git â out of the box, and tons of other features.&lt;/p&gt;
      &lt;p&gt;At its core, Omarchy embraces Linux for all of its complexity and configurability, and makes a version of it that is accessible and fun to use for developers that donât have a deep background in operating systems. Projects like this ensure that a powerful, independent Linux desktop remains a compelling choice for people building the next generation of applications and Internet infrastructure.Â &lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Our support comes with no strings attachedÂ Â &lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;We want to be very clear here: we are supporting these projects because we believe the Internet can be better if these projects, and more like them, succeed. No requirement to use our technology stack or any arrangement like that. We are happy to partner with great teams like Ladybird and Omarchy simply because we believe that our missions have real overlap.&lt;/p&gt;
      &lt;p&gt;Ladybird is still in its early days, with an alpha release planned for 2026, but we encourage anyone who is interested to consider contributing to the open source codebase as they prepare for launch.&lt;/p&gt;
      &lt;quote&gt;
        &lt;p&gt;"Cloudflare knows what it means to build critical web infrastructure on the server side. With Ladybird, weâre tackling the near-monoculture on the client side, because we believe it needs multiple implementations to stay healthy, and weâre extremely thankful for their support in that mission.â&lt;/p&gt;
        &lt;p&gt;â Andreas Kling, Founder, LadybirdÂ Â &lt;/p&gt;
      &lt;/quote&gt;
      &lt;p&gt;Omarchy 3.0 was released just last week with faster installation and increased Macbook compatibility, so if youâve been Linux-curious for a while now, we encourage you to try it out!&lt;/p&gt;
      &lt;quote&gt;
        &lt;p&gt;"Cloudflare's support of Omarchy has ensured we have the fastest ISO and package delivery from wherever you are in the world. Without a need to manually configure mirrors or deal with torrents. The combo of a super CDN, great R2 storage, and the best DDoS shield in the business has been a huge help for the project."&lt;/p&gt;
        &lt;p&gt;â David Heinemeier Hansson, Creator of Omarchy and Ruby on Rails&lt;/p&gt;
      &lt;/quote&gt;
      &lt;p&gt;A better Internet is one where people have more choice in how they browse and develop new software. Weâre incredibly excited about the potential of Ladybird, Omarchy, and other audacious projects that support a free and open Internet. &lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.cloudflare.com/supporting-the-future-of-the-open-web/"/><published>2025-09-22T13:03:33+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45332883</id><title>Cap'n Web: a new RPC system for browsers and web servers</title><updated>2025-09-23T03:44:14.116922+00:00</updated><content>&lt;doc fingerprint="e228a11afa2902c6"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Allow us to introduce Cap'n Web, an RPC protocol and implementation in pure TypeScript.&lt;/p&gt;
      &lt;p&gt;Cap'n Web is a spiritual sibling to Cap'n Proto, an RPC protocol I (Kenton) created a decade ago, but designed to play nice in the web stack. That means:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;
          &lt;p&gt;Like Cap'n Proto, it is an object-capability protocol. ("Cap'n" is short for "capabilities and".) We'll get into this more below, but it's incredibly powerful.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Unlike Cap'n Proto, Cap'n Web has no schemas. In fact, it has almost no boilerplate whatsoever. This means it works more like the JavaScript-native RPC system in Cloudflare Workers.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;That said, it integrates nicely with TypeScript.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Also unlike Cap'n Proto, Cap'n Web's underlying serialization is human-readable. In fact, it's just JSON, with a little pre-/post-processing.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;It works over HTTP, WebSocket, and postMessage() out-of-the-box, with the ability to extend it to other transports easily.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;It works in all major browsers, Cloudflare Workers, Node.js, and other modern JavaScript runtimes.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;The whole thing compresses (minify+gzip) to under 10Â kB with no dependencies.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;It's open source under the MIT license.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Cap'n Web is more expressive than almost every other RPC system, because it implements an object-capability RPC model. That means it:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;
          &lt;p&gt;Supports bidirectional calling. The client can call the server, and the server can also call the client.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Supports passing functions by reference: If you pass a function over RPC, the recipient receives a "stub". When they call the stub, they actually make an RPC back to you, invoking the function where it was created. This is how bidirectional calling happens: the client passes a callback to the server, and then the server can call it later.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Similarly, supports passing objects by reference: If a class extends the special marker type &lt;code&gt;RpcTarget&lt;/code&gt;, then instances of that class are passed by reference, with method calls calling back to the location where the object was created.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Supports promise pipelining. When you start an RPC, you get back a promise. Instead of awaiting it, you can immediately use the promise in dependent RPCs, thus performing a chain of calls in a single network round trip.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Supports capability-based security patterns.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;In short, Cap'n Web lets you design RPC interfaces the way you'd design regular JavaScript APIs â while still acknowledging and compensating for network latency.&lt;/p&gt;
      &lt;p&gt;The best part is, Cap'n Web is absolutely trivial to set up.&lt;/p&gt;
      &lt;p&gt;A client looks like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;import { newWebSocketRpcSession } from "capnweb";

// One-line setup.
let api = newWebSocketRpcSession("wss://example.com/api");

// Call a method on the server!
let result = await api.hello("World");

console.log(result);
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;And here's a complete Cloudflare Worker implementing an RPC server:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;import { RpcTarget, newWorkersRpcResponse } from "capnweb";

// This is the server implementation.
class MyApiServer extends RpcTarget {
  hello(name) {
    return `Hello, ${name}!`
  }
}

// Standard Workers HTTP handler.
export default {
  fetch(request, env, ctx) {
    // Parse URL for routing.
    let url = new URL(request.url);

    // Serve API at `/api`.
    if (url.pathname === "/api") {
      return newWorkersRpcResponse(request, new MyApiServer());
    }

    // You could serve other endpoints here...
    return new Response("Not found", {status: 404});
  }
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;That's it. That's the app.&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;
          &lt;p&gt;You can add more methods to &lt;code&gt;MyApiServer&lt;/code&gt;, and call them from the client.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;You can have the client pass a callback function to the server, and then the server can just call it.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;You can define a TypeScript interface for your API, and easily apply it to the client and server.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;It just works.&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Why RPC? (And what is RPC anyway?)&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Remote Procedure Calls (RPC) are a way of expressing communications between two programs over a network. Without RPC, you might communicate using a protocol like HTTP. With HTTP, though, you must format and parse your communications as an HTTP request and response, perhaps designed in REST style. RPC systems try to make communications look like a regular function call instead, as if you were calling a library rather than a remote service. The RPC system provides a "stub" object on the client side which stands in for the real server-side object. When a method is called on the stub, the RPC system figures out how to serialize and transmit the parameters to the server, invoke the method on the server, and then transmit the return value back.&lt;/p&gt;
      &lt;p&gt;The merits of RPC have been subject to a great deal of debate. RPC is often accused of committing many of the fallacies of distributed computing.&lt;/p&gt;
      &lt;p&gt;But this reputation is outdated. When RPC was first invented some 40 years ago, async programming barely existed. We did not have Promises, much less async and await. Early RPC was synchronous: calls would block the calling thread waiting for a reply. At best, latency made the program slow. At worst, network failures would hang or crash the program. No wonder it was deemed "broken".&lt;/p&gt;
      &lt;p&gt;Things are different today. We have Promise and async and await, and we can throw exceptions on network failures. We even understand how RPCs can be pipelined so that a chain of calls takes only one network round trip. Many large distributed systems you likely use every day are built on RPC. It works.&lt;/p&gt;
      &lt;p&gt;The fact is, RPC fits the programming model we're used to. Every programmer is trained to think in terms of APIs composed of function calls, not in terms of byte stream protocols nor even REST. Using RPC frees you from the need to constantly translate between mental models, allowing you to move faster.&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;When should you use Cap'n Web?&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Cap'n Web is useful anywhere where you have two JavaScript applications speaking to each other over a network, including client-to-server and microservice-to-microservice scenarios. However, it is particularly well-suited to interactive web applications with real-time collaborative features, as well as modeling interactions over complex security boundaries.&lt;/p&gt;
      &lt;p&gt;Cap'n Web is still new and experimental, so for now, a willingness to live on the cutting edge may also be required!&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h2"&gt;Features, features, featuresâ¦&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Here's some more things you can do with Cap'n Web.&lt;/p&gt;
      &lt;p&gt;Sometimes a WebSocket connection is a bit too heavyweight. What if you just want to make a quick one-time batch of calls, but don't need an ongoing connection?&lt;/p&gt;
      &lt;p&gt;For that, Cap'n Web supports HTTP batch mode:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;import { newHttpBatchRpcSession } from "capnweb";

let batch = newHttpBatchRpcSession("https://example.com/api");

let result = await batch.hello("World");

console.log(result);
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;(The server is exactly the same as before.)&lt;/p&gt;
      &lt;p&gt;Note that once you've awaited an RPC in the batch, the batch is done, and all the remote references received through it become broken. To make more calls, you need to start over with a new batch. However, you can make multiple calls in a single batch:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let batch = newHttpBatchRpcSession("https://example.com/api");

// We can call make multiple calls, as long as we await them all at once.
let promise1 = batch.hello("Alice");
let promise2 = batch.hello("Bob");

let [result1, result2] = await Promise.all([promise1, promise2]);

console.log(result1);
console.log(result2);
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;And that brings us to another featureâ¦&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Chained calls (Promise Pipelining)&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Here's where things get magical.&lt;/p&gt;
      &lt;p&gt;In both batch mode and WebSocket mode, you can make a call that depends on the result of another call, without waiting for the first call to finish. In batch mode, that means you can, in a single batch, call a method, then use its result in another call. The entire batch still requires only one network round trip.&lt;/p&gt;
      &lt;p&gt;For example, say your API is:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;class MyApiServer extends RpcTarget {
  getMyName() {
    return "Alice";
  }

  hello(name) {
    return `Hello, ${name}!`
  }
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;You can do:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let namePromise = batch.getMyName();
let result = await batch.hello(namePromise);

console.log(result);
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;Notice the initial call to &lt;code&gt;getMyName()&lt;/code&gt; returned a promise, but we used the promise itself as the input to &lt;code&gt;hello()&lt;/code&gt;, without awaiting it first. With Cap'n Web, this just works: The client sends a message to the server saying: "Please insert the result of the first call into the parameters of the second."&lt;/p&gt;
      &lt;p&gt;Or perhaps the first call returns an object with methods. You can call the methods immediately, without awaiting the first promise, like:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let batch = newHttpBatchRpcSession("https://example.com/api");

// Authencitate the API key, returning a Session object.
let sessionPromise = batch.authenticate(apiKey);

// Get the user's name.
let name = await sessionPromise.whoami();

console.log(name);
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;This works because the promise returned by a Cap'n Web call is not a regular promise. Instead, it's a JavaScript Proxy object. Any methods you call on it are interpreted as speculative method calls on the eventual result. These calls are sent to the server immediately, telling the server: "When you finish the call I sent earlier, call this method on what it returns."&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;Did you spot the security?&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;This last example shows an important security pattern enabled by Cap'n Web's object-capability model.&lt;/p&gt;
      &lt;p&gt;When we call the authenticate() method, after it has verified the provided API key, it returns an authenticated session object. The client can then make further RPCs on the session object to perform operations that require authorization as that user. The server code might look like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;class MyApiServer extends RpcTarget {
  authenticate(apiKey) {
    let username = await checkApiKey(apiKey);
    return new AuthenticatedSession(username);
  }
}

class AuthenticatedSession extends RpcTarget {
  constructor(username) {
    super();
    this.username = username;
  }

  whoami() {
    return this.username;
  }

  // ...other methods requiring auth...
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;Here's what makes this work: It is impossible for the client to "forge" a session object. The only way to get one is to call authenticate(), and have it return successfully.&lt;/p&gt;
      &lt;p&gt;In most RPC systems, it is not possible for one RPC to return a stub pointing at a new RPC object in this way. Instead, all functions are top-level, and can be called by anyone. In such a traditional RPC system, it would be necessary to pass the API key again to every function call, and check it again on the server each time. Or, you'd need to do authorization outside the RPC system entirely.&lt;/p&gt;
      &lt;p&gt;This is a common pain point for WebSockets in particular. Due to the design of the web APIs for WebSocket, you generally cannot use headers nor cookies to authorize them. Instead, authorization must happen in-band, by sending a message over the WebSocket itself. But this can be annoying for RPC protocols, as it means the authentication message is "special" and changes the state of the connection itself, affecting later calls. This breaks the abstraction.&lt;/p&gt;
      &lt;p&gt;The authenticate() pattern shown above neatly makes authentication fit naturally into the RPC abstraction. It's even type-safe: you can't possibly forget to authenticate before calling a method requiring auth, because you wouldn't have an object on which to make the call. Speaking of type-safetyâ¦&lt;/p&gt;
      &lt;p&gt;If you use TypeScript, Cap'n Web plays nicely with it. You can declare your RPC API once as a TypeScript interface, implement in on the server, and call it on the client:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;// Shared interface declaration:
interface MyApi {
  hello(name: string): Promise&amp;lt;string&amp;gt;;
}

// On the client:
let api: RpcStub&amp;lt;MyApi&amp;gt; = newWebSocketRpcSession("wss://example.com/api");

// On the server:
class MyApiServer extends RpcTarget implements MyApi {
  hello(name) {
    return `Hello, ${name}!`
  }
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;Now you get end-to-end type checking, auto-completed method names, and so on.&lt;/p&gt;
      &lt;p&gt;Note that, as always with TypeScript, no type checks occur at runtime. The RPC system itself does not prevent a malicious client from calling an RPC with parameters of the wrong type. This is, of course, not a problem unique to Cap'n Web â JSON-based APIs have always had this problem. You may wish to use a runtime type-checking system like Zod to solve this. (Meanwhile, we hope to add type checking based directly on TypeScript types in the future.)&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h2"&gt;An alternative to GraphQL?&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;If youâve used GraphQL before, you might notice some similarities. One benefit of GraphQL was to solve the âwaterfallâ problem of traditional REST APIs by allowing clients to ask for multiple pieces of data in one query. For example, instead of making three sequential HTTP calls:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;GET /user
GET /user/friends
GET /user/friends/photos&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;â¦you can write one GraphQL query to fetch it all at once.&lt;/p&gt;
      &lt;p&gt;Thatâs a big improvement over REST, but GraphQL comes with its own tradeoffs:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;
          &lt;p&gt;New language and tooling. You have to adopt GraphQLâs schema language, servers, and client libraries. If your team is all-in on JavaScript, thatâs a lot of extra machinery.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Limited composability. GraphQL queries are declarative, which makes them great for fetching data, but awkward for chaining operations or mutations. For example, you canât easily say: âcreate a user, then immediately use that new user object to make a friend request, all-in-one round trip.â&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Different abstraction model. GraphQL doesnât look or feel like the JavaScript APIs you already know. Youâre learning a new mental model rather than extending the one you use every day.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;How Cap'n Web goes further&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;Cap'n Web solves the waterfall problem without introducing a new language or ecosystem. Itâs just JavaScript. Because Cap'n Web supports promise pipelining and object references, you can write code that looks like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let user = api.createUser({ name: "Alice" });
let friendRequest = await user.sendFriendRequest("Bob");&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;What happens under the hood? Both calls are pipelined into a single network round trip:&lt;/p&gt;
      &lt;list rend="ol"&gt;
        &lt;item&gt;
          &lt;p&gt;Create the user.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Take the result of that call (a new User object).&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Immediately invoke sendFriendRequest() on that object.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;All of this is expressed naturally in JavaScript, with no schemas, query languages, or special tooling required. You just call methods and pass objects around, like you would in any other JavaScript code.&lt;/p&gt;
      &lt;p&gt;In other words, GraphQL gave us a way to flatten RESTâs waterfalls. Cap'n Web lets us go even further: it gives you the power to model complex interactions exactly the way you would in a normal program, with no impedance mismatch.&lt;/p&gt;
      &lt;div&gt;
        &lt;head rend="h3"&gt;But how do we solve arrays?&lt;/head&gt;
      &lt;/div&gt;
      &lt;p&gt;With everything we've presented so far, there's a critical missing piece to seriously consider Cap'n Web as an alternative to GraphQL: handling lists. Often, GraphQL is used to say: "Perform this query, and then, for every result, perform this other query." For example: "List the user's friends, and then for each one, fetch their profile photo."&lt;/p&gt;
      &lt;p&gt;In short, we need an &lt;code&gt;array.map()&lt;/code&gt; operation that can be performed without adding a round trip.&lt;/p&gt;
      &lt;p&gt;Cap'n Proto, historically, has never supported such a thing.&lt;/p&gt;
      &lt;p&gt;But with Cap'n Web, we've solved it. You can do:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let user = api.authenticate(token);

// Get the user's list of friends (an array).
let friendsPromise = user.listFriends();

// Do a .map() to annotate each friend record with their photo.
// This operates on the *promise* for the friends list, so does not
// add a round trip.
// (wait WHAT!?!?)
let friendsWithPhotos = friendsPromise.map(friend =&amp;gt; {
  return {friend, photo: api.getUserPhoto(friend.id))};
}

// Await the friends list with attached photos -- one round trip!
let results = await friendsWithPhotos;
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;&lt;code&gt;.map()&lt;/code&gt; takes a callback function, which needs to be applied to each element in the array. As we described earlier, normally when you pass a function to an RPC, the function is passed "by reference", meaning that the remote side receives a stub, where calling that stub makes an RPC back to the client where the function was created.&lt;/p&gt;
      &lt;p&gt;But that is NOT what is happening here. That would defeat the purpose: we don't want the server to have to round-trip to the client to process every member of the array. We want the server to just apply the transformation server-side.&lt;/p&gt;
      &lt;p&gt;To that end, &lt;code&gt;.map() &lt;/code&gt;is special. It does not send JavaScript code to the server, but it does send something like "code", restricted to a domain-specific, non-Turing-complete language. The "code" is a list of instructions that the server should carry out for each member of the array. In this case, the instructions are:&lt;/p&gt;
      &lt;list rend="ol"&gt;
        &lt;item&gt;
          &lt;p&gt;Invoke &lt;code&gt;api.getUserPhoto(friend.id)&lt;/code&gt;.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Return an object &lt;code&gt;{friend, photo}&lt;/code&gt;, where friend is the original array element and photo is the result of step 1.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;But the application code just specified a JavaScript method. How on Earth could we convert this into the narrow DSL?&lt;/p&gt;
      &lt;p&gt;The answer is record-replay: On the client side, we execute the callback once, passing in a special placeholder value. The parameter behaves like an RPC promise. However, the callback is required to be synchronous, so it cannot actually await this promise. The only thing it can do is use promise pipelining to make pipelined calls. These calls are intercepted by the implementation and recorded as instructions, which can then be sent to the server, where they can be replayed as needed.&lt;/p&gt;
      &lt;p&gt;And because the recording is based on promise pipelining, which is what the RPC protocol itself is designed to represent, it turns out that the "DSL" used to represent "instructions" for the map function is just the RPC protocol itself. ð¤¯&lt;/p&gt;
      &lt;p&gt;Cap'n Web's underlying protocol is based on JSON â but with a preprocessing step to handle special types. Arrays are treated as "escape sequences" that let us encode other values. For example, JSON does not have an encoding for &lt;code&gt;Date&lt;/code&gt; objects, but Cap'n Web does. You might see a message that looks like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;{
  event: "Birthday Week",
  timestamp: ["date", 1758499200000]
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;To encode a literal array, we simply double-wrap it in &lt;code&gt;[]&lt;/code&gt;:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;{
  names: [["Alice", "Bob", "Carol"]]
}
&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;In other words, an array with just one element which is itself an array, evaluates to the inner array literally. An array whose first element is a type name, evaluates to an instance of that type, where the remaining elements are parameters to the type.&lt;/p&gt;
      &lt;p&gt;Note that only a fixed set of types are supported: essentially, "structured clonable" types, and RPC stub types.&lt;/p&gt;
      &lt;p&gt;On top of this basic encoding, we define an RPC protocol inspired by Cap'n Proto â but greatly simplified.&lt;/p&gt;
      &lt;p&gt;Since Cap'n Web is a symmetric protocol, there is no well-defined "client" or "server" at the protocol level. There are just two parties exchanging messages across a connection. Every kind of interaction can happen in either direction.&lt;/p&gt;
      &lt;p&gt;In order to make it easier to describe these interactions, I will refer to the two parties as "Alice" and "Bob".&lt;/p&gt;
      &lt;p&gt;Alice and Bob start the connection by establishing some sort of bidirectional message stream. This may be a WebSocket, but Cap'n Web also allows applications to define their own transports. Each message in the stream is JSON-encoded, as described earlier.&lt;/p&gt;
      &lt;p&gt;Alice and Bob each maintain some state about the connection. In particular, each maintains an "export table", describing all the pass-by-reference objects they have exposed to the other side, and an "import table", describing the references they have received. Alice's exports correspond to Bob's imports, and vice versa. Each entry in the export table has a signed integer ID, which is used to reference it. You can think of these IDs like file descriptors in a POSIX system. Unlike file descriptors, though, IDs can be negative, and an ID is never reused over the lifetime of a connection.&lt;/p&gt;
      &lt;p&gt;At the start of the connection, Alice and Bob each populate their export tables with a single entry, numbered zero, representing their "main" interfaces. Typically, when one side is acting as the "server", they will export their main public RPC interface as ID zero, whereas the "client" will export an empty interface. However, this is up to the application: either side can export whatever they want.&lt;/p&gt;
      &lt;p&gt;From there, new exports are added in two ways:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;
          &lt;p&gt;When Alice sends a message to Bob that contains within it an object or function reference, Alice adds the target object to her export table. IDs assigned in this case are always negative, starting from -1 and counting downwards.&lt;/p&gt;
        &lt;/item&gt;
        &lt;item&gt;
          &lt;p&gt;Alice can send a "push" message to Bob to request that Bob add a value to his export table. The "push" message contains an expression which Bob evaluates, exporting the result. Usually, the expression describes a method call on one of Bob's existing exports â this is how an RPC is made. Each "push" is assigned a positive ID on the export table, starting from 1 and counting upwards. Since positive IDs are only assigned as a result of pushes, Alice can predict the ID of each push she makes, and can immediately use that ID in subsequent messages. This is how promise pipelining is achieved.&lt;/p&gt;
        &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;After sending a push message, Alice can subsequently send a "pull" message, which tells Bob that once he is done evaluating the "push", he should proactively serialize the result and send it back to Alice, as a "resolve" (or "reject") message. However, this is optional: Alice may not actually care to receive the return value of an RPC, if Alice only wants to use it in promise pipelining. In fact, the Cap'n Web implementation will only send a "pull" message if the application has actually awaited the returned promise.&lt;/p&gt;
      &lt;p&gt;Putting it together, a code sequence like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;let namePromise = api.getMyName();
let result = await api.hello(namePromise);

console.log(result);&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;Might produce a message exchange like this:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;// Call api.getByName(). `api` is the server's main export, so has export ID 0.
-&amp;gt; ["push", ["pipeline", 0, "getMyName", []]
// Call api.hello(namePromise). `namePromise` refers to the result of the first push,
// so has ID 1.
-&amp;gt; ["push", ["pipeline", 0, "hello", [["pipeline", 1]]]]
// Ask that the result of the second push be proactively serialized and returned.
-&amp;gt; ["pull", 2]
// Server responds.
&amp;lt;- ["resolve", 2, "Hello, Alice!"]&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;For more details about the protocol, check out the docs.&lt;/p&gt;
      &lt;p&gt;Cap'n Web is new and still highly experimental. There may be bugs to shake out. But, we're already using it today. Cap'n Web is the basis of the recently-launched "remote bindings" feature in Wrangler, allowing a local test instance of workerd to speak RPC to services in production. We've also begun to experiment with it in various frontend applications â expect more blog posts on this in the future.&lt;/p&gt;
      &lt;p&gt;In any case, Cap'n Web is open source, and you can start using it in your own projects now.&lt;/p&gt;
      &lt;p&gt;Check it out on GitHub.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.cloudflare.com/capnweb-javascript-rpc-library/"/><published>2025-09-22T13:05:32+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45333021</id><title>Why haven't local-first apps become popular?</title><updated>2025-09-23T03:44:14.069081+00:00</updated><content/><link href="https://marcobambini.substack.com/p/why-local-first-apps-havent-become"/><published>2025-09-22T13:17:59+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45334545</id><title>PlanetScale for Postgres is now GA</title><updated>2025-09-23T03:44:13.893583+00:00</updated><content>&lt;doc fingerprint="af51e4d16e9161c8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;PlanetScale for Postgres is now GA&lt;/head&gt;
    &lt;p&gt;By Sam Lambert |&lt;/p&gt;
    &lt;p&gt;PlanetScale for Postgres is now generally available and out of private preview. To create a Postgres database, sign up or log in to your PlanetScale account, create a new database, and select Postgres. If you are looking to migrate from another Postgres provider to PlanetScale, you can use our migration guides to get started. Finally, if you have a large or complex migration, we can help you via our sales team at postgres@planetscale.com.&lt;/p&gt;
    &lt;head rend="h2"&gt;What is PlanetScale for Postgres?&lt;/head&gt;
    &lt;p&gt;Our mission is simple: bring you the fastest and most reliable databases with the best developer experience. We have done this for 5 years now with our managed Vitess product, allowing companies like Cursor, Intercom, and Block to scale beyond previous limits.&lt;/p&gt;
    &lt;p&gt;We are so excited to bring this to Postgres. Our proprietary operator allows us to bring the maturity of PlanetScale and the performance of Metal to an even wider audience. We bring you the best of Postgres and the best of PlanetScale in one product.&lt;/p&gt;
    &lt;head rend="h2"&gt;Customers on PlanetScale for Postgres&lt;/head&gt;
    &lt;p&gt;Hundreds of companies already trust PlanetScale for Postgres to power their production workloads. We say this every time we launch something, but we prefer you hear about real-world usage straight from our customers. Read through some of their stories about their migration to PlanetScale for Postgres below.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Convex: Powered by PlanetScale&lt;/item&gt;
      &lt;item&gt;Supermemory just got faster on PlanetScale&lt;/item&gt;
      &lt;item&gt;Scaling RealâTime Discovery: Inside Layersâ PlanetScale Migration&lt;/item&gt;
      &lt;item&gt;Why We Migrated from Neon to PlanetScale&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Vitess for Postgres&lt;/head&gt;
    &lt;p&gt;Neki is our Postgres sharding solution. Built by the team behind Vitess combining the best of Vitess and Postgres. Neki is not a fork of Vitess. Vitessâ achievements are enabled by leveraging MySQLâs strengths and engineering around its weaknesses. To achieve Vitessâ power for Postgres we are architecting from first principles and building alongside design partners at scale. When we are ready we will release Neki as an open source project suitable for running the most demanding Postgres workloads. To sign up for the Neki waitlist visit neki.dev.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://planetscale.com/blog/planetscale-for-postgres-is-generally-available"/><published>2025-09-22T15:10:48+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335474</id><title>OpenAI and Nvidia announce partnership to deploy 10GW of Nvidia systems</title><updated>2025-09-23T03:44:13.633738+00:00</updated><content>&lt;doc fingerprint="a9561c5e408ccdb9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;OpenAI and NVIDIA announce strategic partnership to deploy 10 gigawatts of NVIDIA systems&lt;/head&gt;
    &lt;p&gt;News&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Strategic partnership enables OpenAI to build and deploy at least 10 gigawatts of AI datacenters with NVIDIA systems representing millions of GPUs for OpenAI’s next-generation AI infrastructure.&lt;/item&gt;
      &lt;item&gt;To support the partnership, NVIDIA intends to invest up to $100 billion in OpenAI progressively as each gigawatt is deployed.&lt;/item&gt;
      &lt;item&gt;The first gigawatt of NVIDIA systems will be deployed in the second half of 2026 on NVIDIA’s Vera Rubin platform.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;San Francisco and Santa Clara—September 22, 2025—NVIDIA and OpenAI today announced a letter of intent for a landmark strategic partnership to deploy at least 10 gigawatts of NVIDIA systems for OpenAI’s next-generation AI infrastructure to train and run its next generation of models on the path to deploying superintelligence. To support this deployment including datacenter and power capacity, NVIDIA intends to invest up to $100 billion in OpenAI as the new NVIDIA systems are deployed. The first phase is targeted to come online in the second half of 2026 using NVIDIA’s Vera Rubin platform.&lt;/p&gt;
    &lt;p&gt;“NVIDIA and OpenAI have pushed each other for a decade, from the first DGX supercomputer to the breakthrough of ChatGPT,” said Jensen Huang, founder and CEO of NVIDIA. “This investment and infrastructure partnership mark the next leap forward—deploying 10 gigawatts to power the next era of intelligence.”&lt;/p&gt;
    &lt;p&gt;“Everything starts with compute,” said Sam Altman, co-founder and CEO of OpenAI. “Compute infrastructure will be the basis for the economy of the future, and we will utilize what we’re building with NVIDIA to both create new AI breakthroughs and empower people and businesses with them at scale.”&lt;/p&gt;
    &lt;p&gt;“We’ve been working closely with NVIDIA since the early days of OpenAI,” said Greg Brockman, co-founder and President of OpenAI. “We’ve utilized their platform to create AI systems that hundreds of millions of people use every day. We’re excited to deploy 10 gigawatts of compute with NVIDIA to push back the frontier of intelligence and scale the benefits of this technology to everyone.”&lt;/p&gt;
    &lt;p&gt;OpenAI will work with NVIDIA as a preferred strategic compute and networking partner for its AI factory growth plans. OpenAI and NVIDIA will work together to co-optimize their roadmaps for OpenAI's model and infrastructure software and NVIDIA’s hardware and software.&lt;/p&gt;
    &lt;p&gt;This partnership complements the deep work OpenAI and NVIDIA are already doing with a broad network of collaborators, including Microsoft, Oracle, SoftBank, and Stargate partners, focused on building the world’s most advanced AI infrastructure.&lt;/p&gt;
    &lt;p&gt;OpenAI has grown to over 700 million weekly active users and strong adoption across global enterprises, small businesses, and developers. This partnership will help OpenAI advance its mission to build artificial general intelligence that benefits all of humanity.&lt;lb/&gt;NVIDIA and OpenAI look forward to finalizing the details of this new phase of strategic partnership in the coming weeks.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://openai.com/index/openai-nvidia-systems-partnership/"/><published>2025-09-22T16:10:15+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45335635</id><title>Testing is better than data structures and algorithms</title><updated>2025-09-23T03:44:13.415153+00:00</updated><content>&lt;doc fingerprint="bf6210976d050c95"&gt;
  &lt;main&gt;
    &lt;p&gt;People should spend less time learning DSA, more time learning testing.&lt;/p&gt;
    &lt;p&gt;I see new learners asking about “DSA” a lot. Data Structures and Algorithms are of course important: considered broadly, they are the two ingredients that make up all programs. But in my opinion, “DSA” as an abstract field of study is over-emphasized.&lt;/p&gt;
    &lt;p&gt;I understand why people focus on DSA: it’s a concrete thing to learn about, there are web sites devoted to testing you on it, and most importantly, because job interviews often involve DSA coding questions.&lt;/p&gt;
    &lt;p&gt;Before I get to other opinions, let me make clear that anything you can do to help you get a job is a good thing to do. If grinding leetcode will land you a position, then do it.&lt;/p&gt;
    &lt;p&gt;But I hope companies hiring entry-level engineers aren’t asking them to reverse linked lists or balance trees. Asking about techniques that can be memorized ahead of time won’t tell them anything about how well you can work. The stated purpose of those interviews is to see how well you can figure out solutions, in which case memorization will defeat the point.&lt;/p&gt;
    &lt;p&gt;The thing new learners don’t understand about DSA is that actual software engineering almost never involves implementing the kinds of algorithms that “DSA” teaches you. Sure, it can be helpful to work through some of these puzzles and see how they are solved, but writing real code just doesn’t involve writing that kind of code.&lt;/p&gt;
    &lt;p&gt;Here is what I think in-the-trenches software engineers should know about data structures and algorithms:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Data structures are ways to organize data. Learn some of the basics: linked list, array, hash table, tree. By “learn” I mean understand what it does and why you might want to use one.&lt;/item&gt;
      &lt;item&gt;Different data structures can be used to organize the same data in different ways. Learn some of the trade-offs between structures that are similar.&lt;/item&gt;
      &lt;item&gt;Algorithms are ways of manipulating data. I don’t mean named algorithms like Quicksort, but algorithms as any chunk of code that works on data and does something with it.&lt;/item&gt;
      &lt;item&gt;How you organize data affects what algorithms you can use to work with the data. Some data structures will be slow for some operations where another structure will be fast.&lt;/item&gt;
      &lt;item&gt;Algorithms have a “time complexity” (Big O): how the code slows as the data grows. Get a sense of what this means.&lt;/item&gt;
      &lt;item&gt;Python has a number of built-in data structures. Learn how they work, and the time complexity of their operations.&lt;/item&gt;
      &lt;item&gt;Learn how to think about your code to understand its time complexity.&lt;/item&gt;
      &lt;item&gt;Read a little about more esoteric things like Bloom filters, so you can find them later in the unlikely case you need them.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Here are some things you don’t need to learn:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The details of a dozen different sorting algorithms. Look at two to see different ways of approaching the same problem, then move on.&lt;/item&gt;
      &lt;item&gt;The names of “important” algorithms. Those have all been implemented for you.&lt;/item&gt;
      &lt;item&gt;The answers to all N problems on some quiz web site. You won’t be asked these exact questions, and they won’t come up in your real work. Again: try a few to get a feel for how some algorithms work. The exact answers are not what you need.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Of course some engineers need to implement hash tables, or sorting algorithms or whatever. We love those engineers: they write libraries we can use off the shelf so we don’t have to implement them ourselves.&lt;/p&gt;
    &lt;p&gt;There have been times when I implemented something that felt like An Algorithm (for example, Finding fuzzy floats), but it was more about considering another perspective on my data, looking at the time complexity, and moving operations around to avoid quadratic behavior. It wasn’t opening a textbook to find the famous algorithm that would solve my problem.&lt;/p&gt;
    &lt;p&gt;Again: if it will help you get a job, deep-study DSA. But don’t be disappointed when you don’t use it on the job.&lt;/p&gt;
    &lt;p&gt;If you want to prepare yourself for a career, and also stand out in job interviews, learn how to write tests:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;This will be a skill you use constantly. Real-world software means writing tests much more than school teaches you to.&lt;/item&gt;
      &lt;item&gt;In a job search, testing experience will stand out more than DSA depth. It shows you’ve thought about what it takes to write high-quality software instead of just academic exercises.&lt;/item&gt;
      &lt;item&gt;It’s not obvious how to test code well. It’s a puzzle and a problem to solve. If you like figuring out solutions to tricky questions, focus on how to write code so that it can be tested, and how to test it.&lt;/item&gt;
      &lt;item&gt;Testing not only gives you more confidence in your code, it helps you write better code in the first place.&lt;/item&gt;
      &lt;item&gt;Testing applies everywhere, from tiny bits of code to entire architectures, assisting you in design and implementation at all scales.&lt;/item&gt;
      &lt;item&gt;If pursued diligently, testing is an engineering discipline in its own right, with a fascinating array of tools and techniques.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Less DSA, more testing.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://nedbatchelder.com/blog/202509/testing_is_better_than_dsa.html"/><published>2025-09-22T16:21:35+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45336282</id><title>Mentra (YC W25) is hiring to build smart glasses</title><updated>2025-09-23T03:44:12.985757+00:00</updated><content>&lt;doc fingerprint="c1fe11d2919f8da2"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;We’re building the OS for smart glasses because we believe glasses are the next personal computer.&lt;/p&gt;
      &lt;p&gt;This year we launched MentraOS, graduated Y Combinator, and raised an $8M seed round to bring smart glasses software and hardware to market.&lt;/p&gt;
      &lt;p&gt;We're a small team (~11 people) shipping thousands of our first pair of smart glasses in December.&lt;/p&gt;
      &lt;p&gt;We need help in engineering (build smart glasses), design (design glasses interfaces), and growth (make glasses go viral).&lt;/p&gt;
      &lt;p&gt;Apply on the job board or if you don't see a fitting role, email me cayden@mentra.glass&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.ycombinator.com/item?id=45336282"/><published>2025-09-22T17:01:04+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45336989</id><title>Qwen3-Omni: Native Omni AI model for text, image and video</title><updated>2025-09-23T03:44:12.263010+00:00</updated><content>&lt;doc fingerprint="a44ecd1b2dbb5a97"&gt;
  &lt;main&gt;
    &lt;p&gt; 💜 Qwen Chat | 🤗 Hugging Face | 🤖 ModelScope | 📑 Blog | 📚 Cookbooks | 📑 Paper &lt;lb/&gt; 🖥️ Hugging Face Demo | 🖥️ ModelScope Demo | 💬 WeChat (微信) | 🫨 Discord | 📑 API &lt;/p&gt;
    &lt;p&gt;We release Qwen3-Omni, the natively end-to-end multilingual omni-modal foundation models. It is designed to process diverse inputs including text, images, audio, and video, while delivering real-time streaming responses in both text and natural speech. Click the video below for more information 😃&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;2025.09.22: 🎉🎉🎉 We have released Qwen3-Omni. For more details, please check our blog!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Qwen3-Omni is the natively end-to-end multilingual omni-modal foundation models. It processes text, images, audio, and video, and delivers real-time streaming responses in both text and natural speech. We introduce several architectural upgrades to improve performance and efficiency. Key features:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;State-of-the-art across modalities: Early text-first pretraining and mixed multimodal training provide native multimodal support. While achieving strong audio and audio-video results, unimodal text and image performance does not regress. Reaches SOTA on 22 of 36 audio/video benchmarks and open-source SOTA on 32 of 36; ASR, audio understanding, and voice conversation performance is comparable to Gemini 2.5 Pro.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Multilingual: Supports 119 text languages, 19 speech input languages, and 10 speech output languages.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Speech Input: English, Chinese, Korean, Japanese, German, Russian, Italian, French, Spanish, Portuguese, Malay, Dutch, Indonesian, Turkish, Vietnamese, Cantonese, Arabic, Urdu.&lt;/item&gt;
          &lt;item&gt;Speech Output: English, Chinese, French, German, Russian, Italian, Spanish, Portuguese, Japanese, Korean.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Novel Architecture: MoE-based Thinker–Talker design with AuT pretraining for strong general representations, plus a multi-codebook design that drives latency to a minimum.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Real-time Audio/Video Interaction: Low-latency streaming with natural turn-taking and immediate text or speech responses.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Flexible Control: Customize behavior via system prompts for fine-grained control and easy adaptation.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Detailed Audio Captioner: Qwen3-Omni-30B-A3B-Captioner is now open source: a general-purpose, highly detailed, low-hallucination audio captioning model that fills a critical gap in the open-source community.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Qwen3-Omni supports a wide range of multimodal application scenarios, covering various domain tasks involving audio, image, video, and audio-visual modalities. Below are several cookbooks demonstrating the usage cases of Qwen3-Omni and these cookbooks include our actual execution logs. You can first follow the QuickStart guide to download the model and install the necessary inference environment dependencies, then run and experiment locally—try modifying prompts or switching model types, and enjoy exploring the capabilities of Qwen3-Omni!&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Category&lt;/cell&gt;
        &lt;cell role="head"&gt;Cookbook&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
        &lt;cell role="head"&gt;Open&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Audio&lt;/cell&gt;
        &lt;cell&gt;Speech Recognition&lt;/cell&gt;
        &lt;cell&gt;Speech recognition, supporting multiple languages and long audio.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Speech Translation&lt;/cell&gt;
        &lt;cell&gt;Speech-to-Text / Speech-to-Speech translation.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Music Analysis&lt;/cell&gt;
        &lt;cell&gt;Detailed analysis and appreciation of any music, including style, genre, rhythm, etc.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Sound Analysis&lt;/cell&gt;
        &lt;cell&gt;Description and analysis of various sound effects and audio signals.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Audio Caption&lt;/cell&gt;
        &lt;cell&gt;Audio captioning, detailed description of any audio input.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Mixed Audio Analysis&lt;/cell&gt;
        &lt;cell&gt;Analysis of mixed audio content, such as speech, music, and environmental sounds.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Visual&lt;/cell&gt;
        &lt;cell&gt;OCR&lt;/cell&gt;
        &lt;cell&gt;OCR for complex images.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Object Grounding&lt;/cell&gt;
        &lt;cell&gt;Target detection and grounding.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Image Question&lt;/cell&gt;
        &lt;cell&gt;Answering arbitrary questions about any image.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Image Math&lt;/cell&gt;
        &lt;cell&gt;Solving complex mathematical problems in images, highlighting the capabilities of the Thinking model.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Video Description&lt;/cell&gt;
        &lt;cell&gt;Detailed description of video content.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Video Navigation&lt;/cell&gt;
        &lt;cell&gt;Generating navigation commands from first-person motion videos.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Video Scene Transition&lt;/cell&gt;
        &lt;cell&gt;Analysis of scene transitions in videos.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Audio-Visual&lt;/cell&gt;
        &lt;cell&gt;Audio Visual Question&lt;/cell&gt;
        &lt;cell&gt;Answering arbitrary questions in audio-visual scenarios, demonstrating the model's ability to model temporal alignment between audio and video.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Audio Visual Interaction&lt;/cell&gt;
        &lt;cell&gt;Interactive communication with the model using audio-visual inputs, including task specification via audio.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Audio Visual Dialogue&lt;/cell&gt;
        &lt;cell&gt;Conversational interaction with the model using audio-visual inputs, showcasing its capabilities in casual chat and assistant-like behavior.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Agent&lt;/cell&gt;
        &lt;cell&gt;Audio Function Call&lt;/cell&gt;
        &lt;cell&gt;Using audio input to perform function calls, enabling agent-like behaviors.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Downstream Task Fine-tuning&lt;/cell&gt;
        &lt;cell&gt;Omni Captioner&lt;/cell&gt;
        &lt;cell&gt;Introduction and capability demonstration of Qwen3-Omni-30B-A3B-Captioner, a downstream fine-tuned model based on Qwen3-Omni-30B-A3B-Instruct, illustrating the strong generalization ability of the Qwen3-Omni foundation model.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Here, we provide several methods to quickly get started with Qwen3-Omni. If you want complete experience of Qwen3-Omni, you can use Hugging Face Transformers. However, since Qwen3-Omni employs an MoE architecture, inference speed with Hugging Face Transformers on MoE models can be very slow. For large-scale invocation or low-latency requirements, we highly recommend using vLLM or performing inference via the DashScope API. We also strongly suggest using our provided Docker image, which includes a complete runtime environment for both Hugging Face Transformers and vLLM. In addition, our cookbooks offer some use cases to show Qwen3-Omni's capabilities. Welcome to learn more!&lt;/p&gt;
    &lt;p&gt;Below is the description of all Qwen3-Omni models. Please select and download the model that fits your needs.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Model Name&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell&gt;The Instruct model of Qwen3-Omni-30B-A3B, containing both thinker and talker, supporting audio, video, and text input, with audio and text output. For more information, please read the Qwen3-Omni Technical Report.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell&gt;The Thinking model of Qwen3-Omni-30B-A3B, containing the thinker component, equipped with chain-of-thought reasoning, supporting audio, video, and text input, with text output. For more information, please read the Qwen3-Omni Technical Report.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B-Captioner&lt;/cell&gt;
        &lt;cell&gt;A downstream audio fine-grained caption model fine-tuned from Qwen3-Omni-30B-A3B-Instruct, which produces detailed, low-hallucination captions for arbitrary audio inputs. It contains the thinker, supporting audio input and text output. For more information, you can refer to the model's cookbook or Hugging Face Demo and ModelScope Demo.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;During loading in Hugging Face Transformers or vLLM, model weights will be automatically downloaded based on the model name. However, if your runtime environment is not conducive to downloading weights during execution, you can refer to the following commands to manually download the model weights to a local directory:&lt;/p&gt;
    &lt;code&gt;# Download through ModelScope (recommended for users in Mainland China)
pip install -U modelscope
modelscope download --model Qwen/Qwen3-Omni-30B-A3B-Instruct --local_dir ./Qwen3-Omni-30B-A3B-Instruct
modelscope download --model Qwen/Qwen3-Omni-30B-A3B-Thinking --local_dir ./Qwen3-Omni-30B-A3B-Thinking
modelscope download --model Qwen/Qwen3-Omni-30B-A3B-Captioner --local_dir ./Qwen3-Omni-30B-A3B-Captioner

# Download through Hugging Face
pip install -U "huggingface_hub[cli]"
huggingface-cli download Qwen/Qwen3-Omni-30B-A3B-Instruct --local-dir ./Qwen3-Omni-30B-A3B-Instruct
huggingface-cli download Qwen/Qwen3-Omni-30B-A3B-Thinking --local-dir ./Qwen3-Omni-30B-A3B-Thinking
huggingface-cli download Qwen/Qwen3-Omni-30B-A3B-Captioner --local-dir ./Qwen3-Omni-30B-A3B-Captioner&lt;/code&gt;
    &lt;p&gt;The Hugging Face Transformers code for Qwen3-Omni has been successfully merged, but the PyPI package has not yet been released. Therefore, you need to install it from source using the following command. We strongly recommend that you create a new Python environment or use our Docker to avoid environment runtime issues.&lt;/p&gt;
    &lt;code&gt;# If you already have transformers installed, please uninstall it first, or create a new Python environment
# pip uninstall transformers
pip install git+https://github.com/huggingface/transformers
pip install accelerate&lt;/code&gt;
    &lt;p&gt;We offer a toolkit to help you handle various types of audio and visual input more conveniently, providing an API-like experience. This includes support for base64, URLs, and interleaved audio, images, and videos. You can install it using the following command and make sure your system has &lt;code&gt;ffmpeg&lt;/code&gt; installed:&lt;/p&gt;
    &lt;code&gt;pip install qwen-omni-utils -U&lt;/code&gt;
    &lt;p&gt;Additionally, we recommend using FlashAttention 2 when running with Hugging Face Transformers to reduce GPU memory usage. However, if you are primarily using vLLM for inference, this installation is not necessary, as vLLM includes FlashAttention 2 by default.&lt;/p&gt;
    &lt;code&gt;pip install -U flash-attn --no-build-isolation&lt;/code&gt;
    &lt;p&gt;Also, you should have hardware that is compatible with FlashAttention 2. Read more about it in the official documentation of the FlashAttention repository. FlashAttention 2 can only be used when a model is loaded in &lt;code&gt;torch.float16&lt;/code&gt; or &lt;code&gt;torch.bfloat16&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Here is a code snippet to show you how to use Qwen3-Omni with &lt;code&gt;transformers&lt;/code&gt; and &lt;code&gt;qwen_omni_utils&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;import soundfile as sf

from transformers import Qwen3OmniMoeForConditionalGeneration, Qwen3OmniMoeProcessor
from qwen_omni_utils import process_mm_info

MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Instruct"
# MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Thinking"

model = Qwen3OmniMoeForConditionalGeneration.from_pretrained(
    MODEL_PATH,
    dtype="auto",
    device_map="auto",
    attn_implementation="flash_attention_2",
)

processor = Qwen3OmniMoeProcessor.from_pretrained(MODEL_PATH)

conversation = [
    {
        "role": "user",
        "content": [
            {"type": "image", "image": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"},
            {"type": "audio", "audio": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cough.wav"},
            {"type": "text", "text": "What can you see and hear? Answer in one short sentence."}
        ],
    },
]

# Set whether to use audio in video
USE_AUDIO_IN_VIDEO = True

# Preparation for inference
text = processor.apply_chat_template(conversation, add_generation_prompt=True, tokenize=False)
audios, images, videos = process_mm_info(conversation, use_audio_in_video=USE_AUDIO_IN_VIDEO)
inputs = processor(text=text, 
                   audio=audios, 
                   images=images, 
                   videos=videos, 
                   return_tensors="pt", 
                   padding=True, 
                   use_audio_in_video=USE_AUDIO_IN_VIDEO)
inputs = inputs.to(model.device).to(model.dtype)

# Inference: Generation of the output text and audio
text_ids, audio = model.generate(**inputs, 
                                 speaker="Ethan", 
                                 thinker_return_dict_in_generate=True,
                                 use_audio_in_video=USE_AUDIO_IN_VIDEO)

text = processor.batch_decode(text_ids.sequences[:, inputs["input_ids"].shape[1] :],
                              skip_special_tokens=True,
                              clean_up_tokenization_spaces=False)
print(text)
if audio is not None:
    sf.write(
        "output.wav",
        audio.reshape(-1).detach().cpu().numpy(),
        samplerate=24000,
    )&lt;/code&gt;
    &lt;p&gt;Here are some more advanced usage examples. You can expand the sections below to learn more.&lt;/p&gt;
    &lt;head&gt;Batch inference&lt;/head&gt;
    &lt;p&gt;The model can batch inputs composed of mixed samples of various types such as text, images, audio, and videos as input when &lt;code&gt;return_audio=False&lt;/code&gt; is set. Here is an example.&lt;/p&gt;
    &lt;code&gt;from transformers import Qwen3OmniMoeForConditionalGeneration, Qwen3OmniMoeProcessor
from qwen_omni_utils import process_mm_info

MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Instruct"
# MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Thinking"

model = Qwen3OmniMoeForConditionalGeneration.from_pretrained(
    MODEL_PATH,
    dtype="auto",
    device_map="auto",
    attn_implementation="flash_attention_2",
)
model.disable_talker()

processor = Qwen3OmniMoeProcessor.from_pretrained(MODEL_PATH)

# Conversation with image only
conversation1 = [
    {
        "role": "user",
        "content": [
            {"type": "image", "image": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"},
            {"type": "text", "text": "What can you see in this image? Answer in one sentence."},
        ]
    }
]

# Conversation with audio only
conversation2 = [
    {
        "role": "user",
        "content": [
            {"type": "audio", "audio": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cough.wav"},
            {"type": "text", "text": "What can you hear in this audio?"},
        ]
    }
]

# Conversation with pure text and system prompt
conversation3 = [
    {
        "role": "system",
        "content": [
            {"type": "text", "text": "You are Qwen-Omni."}
        ],
    },
    {
        "role": "user",
        "content": "Who are you?"
    }
]

# Conversation with mixed media
conversation4 = [
    {
        "role": "user",
        "content": [
            {"type": "image", "image": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"},
            {"type": "audio", "audio": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cough.wav"},
            {"type": "text", "text": "What can you see and hear? Answer in one sentence."}
        ],
    }
]

# Combine messages for batch processing
conversations = [conversation1, conversation2, conversation3, conversation4]

# Set whether to use audio in video
USE_AUDIO_IN_VIDEO = True

# Preparation for batch inference
text = processor.apply_chat_template(conversations, add_generation_prompt=True, tokenize=False)
audios, images, videos = process_mm_info(conversations, use_audio_in_video=USE_AUDIO_IN_VIDEO)

inputs = processor(text=text, 
                   audio=audios, 
                   images=images, 
                   videos=videos, 
                   return_tensors="pt", 
                   padding=True, 
                   use_audio_in_video=USE_AUDIO_IN_VIDEO)
inputs = inputs.to(model.device).to(model.dtype)

# Batch inference does not support returning audio
text_ids, audio = model.generate(**inputs,
                                 return_audio=False,
                                 thinker_return_dict_in_generate=True,
                                 use_audio_in_video=USE_AUDIO_IN_VIDEO)

text = processor.batch_decode(text_ids.sequences[:, inputs["input_ids"].shape[1] :],
                              skip_special_tokens=True,
                              clean_up_tokenization_spaces=False)
print(text)&lt;/code&gt;
    &lt;head&gt;Use audio output or not&lt;/head&gt;
    &lt;p&gt;The model supports both text and audio outputs. If users do not need audio outputs, they can call &lt;code&gt;model.disable_talker()&lt;/code&gt; after initializing the model. This option will save about &lt;code&gt;10GB&lt;/code&gt; of GPU memory, but the &lt;code&gt;return_audio&lt;/code&gt; option for the &lt;code&gt;generate&lt;/code&gt; function will only allow &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;model = Qwen3OmniMoeForConditionalGeneration.from_pretrained(
    "Qwen/Qwen3-Omni-30B-A3B-Instruct",
    dtype="auto",
    device_map="auto",
    attn_implementation="flash_attention_2",
)
model.disable_talker()&lt;/code&gt;
    &lt;p&gt;For a more flexible experience, we recommend that users decide whether to return audio when the &lt;code&gt;generate&lt;/code&gt; function is called. If &lt;code&gt;return_audio&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;, the model will only return text outputs, resulting in faster text responses.&lt;/p&gt;
    &lt;code&gt;model = Qwen3OmniMoeForConditionalGeneration.from_pretrained(
    "Qwen/Qwen3-Omni-30B-A3B-Instruct",
    dtype="auto",
    device_map="auto",
    attn_implementation="flash_attention_2",
)
...
text_ids, _ = model.generate(..., return_audio=False)```

&amp;lt;/details&amp;gt;

&amp;lt;details&amp;gt;
&amp;lt;summary&amp;gt;Change voice type of output audio&amp;lt;/summary&amp;gt;

Qwen3-Omni supports changing the voice of the output audio. The `"Qwen/Qwen3-Omni-30B-A3B-Instruct"` checkpoint supports three voice types as follows:

| Voice Type | Gender | Description |
|------------|--------|-------------|
| Ethan      | Male   | A bright, upbeat voice with infectious energy and a warm, approachable vibe. |
| Chelsie    | Female | A honeyed, velvety voice that carries a gentle warmth and luminous clarity. |
| Aiden      | Male   | A warm, laid-back American voice with a gentle, boyish charm. |

Users can use the `speaker` parameter of the `generate` function to specify the voice type. By default, if `speaker` is not specified, the voice type is `Ethan`.

```python
text_ids, audio = model.generate(..., speaker="Ethan")&lt;/code&gt;
    &lt;code&gt;text_ids, audio = model.generate(..., speaker="Chelsie")&lt;/code&gt;
    &lt;code&gt;text_ids, audio = model.generate(..., speaker="Aiden")&lt;/code&gt;
    &lt;p&gt;Additionally, for more usage details such as prompt settings, task-specific usage methods, and resource requirements, please refer to Usage Tips and Cookbooks for Usage Cases.&lt;/p&gt;
    &lt;p&gt;We strongly recommend using vLLM for inference and deployment of the Qwen3-Omni series models. Since our code is currently in the pull request stage, and audio output inference support for the Instruct model will be released in the near future, you can follow the commands below to install vLLM from source. Please note that we recommend you create a new Python environment or use our provided Docker to avoid runtime environment conflicts and incompatibilities. For more details on compiling vLLM from source, please refer to the vLLM official documentation.&lt;/p&gt;
    &lt;code&gt;git clone -b qwen3_omni https://github.com/wangxiongts/vllm.git
cd vllm
pip install -r requirements/build.txt
pip install -r requirements/cuda.txt
export VLLM_PRECOMPILED_WHEEL_LOCATION=https://wheels.vllm.ai/a5dd03c1ebc5e4f56f3c9d3dc0436e9c582c978f/vllm-0.9.2-cp38-abi3-manylinux1_x86_64.whl
VLLM_USE_PRECOMPILED=1 pip install -e . -v --no-build-isolation
# If you meet an "Undefined symbol" error while using VLLM_USE_PRECOMPILED=1, please use "pip install -e . -v" to build from source.
# Install the Transformers
pip install git+https://github.com/huggingface/transformers
pip install accelerate
pip install qwen-omni-utils -U
pip install -U flash-attn --no-build-isolation&lt;/code&gt;
    &lt;p&gt;You can use the following code for vLLM inference. The &lt;code&gt;limit_mm_per_prompt&lt;/code&gt; parameter specifies the maximum number of each modality's data allowed per message. Since vLLM needs to pre-allocate GPU memory, larger values will require more GPU memory; if OOM issues occur, try reducing this value. Setting &lt;code&gt;tensor_parallel_size&lt;/code&gt; greater than one enables multi-GPU parallel inference, improving concurrency and throughput. In addition, &lt;code&gt;max_num_seqs&lt;/code&gt; indicates the number of sequences that vLLM processes in parallel during each inference step. A larger value requires more GPU memory but enables higher batch inference speed. For more details, please refer to the vLLM official documentation. Below is a simple example of how to run Qwen3-Omni with vLLM:&lt;/p&gt;
    &lt;code&gt;import os
import torch

from vllm import LLM, SamplingParams
from transformers import Qwen3OmniMoeProcessor
from qwen_omni_utils import process_mm_info

if __name__ == '__main__':
    # vLLM engine v1 not supported yet
    os.environ['VLLM_USE_V1'] = '0'

    MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Instruct"
    # MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Thinking"

    llm = LLM(
            model=MODEL_PATH, trust_remote_code=True, gpu_memory_utilization=0.95,
            tensor_parallel_size=torch.cuda.device_count(),
            limit_mm_per_prompt={'image': 3, 'video': 3, 'audio': 3},
            max_num_seqs=8,
            max_model_len=32768,
            seed=1234,
    )

    sampling_params = SamplingParams(
        temperature=0.6,
        top_p=0.95,
        top_k=20,
        max_tokens=16384,
    )

    processor = Qwen3OmniMoeProcessor.from_pretrained(MODEL_PATH)

    messages = [
        {
            "role": "user",
            "content": [
                {"type": "video", "video": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/draw.mp4"}
            ], 
        }
    ]

    text = processor.apply_chat_template(
        messages,
        tokenize=False,
        add_generation_prompt=True,
    )
    audios, images, videos = process_mm_info(messages, use_audio_in_video=True)

    inputs = {
        'prompt': text,
        'multi_modal_data': {},
        "mm_processor_kwargs": {
            "use_audio_in_video": True,
        },
    }

    if images is not None:
        inputs['multi_modal_data']['image'] = images
    if videos is not None:
        inputs['multi_modal_data']['video'] = videos
    if audios is not None:
        inputs['multi_modal_data']['audio'] = audios

    outputs = llm.generate([inputs], sampling_params=sampling_params)

    print(outputs[0].outputs[0].text)&lt;/code&gt;
    &lt;p&gt;Here are some more advanced usage examples. You can expand the sections below to learn more.&lt;/p&gt;
    &lt;head&gt;Batch inference&lt;/head&gt;
    &lt;p&gt;Using vLLM enables fast batch inference, which can help you efficiently process large volumes of data or conduct benchmarking. Refer to the following code example:&lt;/p&gt;
    &lt;code&gt;import os
import torch

from vllm import LLM, SamplingParams
from transformers import Qwen3OmniMoeProcessor
from qwen_omni_utils import process_mm_info

def build_input(processor, messages, use_audio_in_video):
    text = processor.apply_chat_template(
        messages,
        tokenize=False,
        add_generation_prompt=True,
    )
    audios, images, videos = process_mm_info(messages, use_audio_in_video=use_audio_in_video)

    inputs = {
        'prompt': text,
        'multi_modal_data': {},
        "mm_processor_kwargs": {
            "use_audio_in_video": use_audio_in_video,
        },
    }

    if images is not None:
        inputs['multi_modal_data']['image'] = images
    if videos is not None:
        inputs['multi_modal_data']['video'] = videos
    if audios is not None:
        inputs['multi_modal_data']['audio'] = audios
    
    return inputs

if __name__ == '__main__':
    # vLLM engine v1 not supported yet
    os.environ['VLLM_USE_V1'] = '0'

    MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Instruct"
    # MODEL_PATH = "Qwen/Qwen3-Omni-30B-A3B-Thinking"

    llm = LLM(
            model=MODEL_PATH, trust_remote_code=True, gpu_memory_utilization=0.95,
            tensor_parallel_size=torch.cuda.device_count(),
            limit_mm_per_prompt={'image': 3, 'video': 3, 'audio': 3},
            max_num_seqs=8,
            max_model_len=32768,
            seed=1234,
    )

    sampling_params = SamplingParams(
        temperature=0.6,
        top_p=0.95,
        top_k=20,
        max_tokens=16384,
    )

    processor = Qwen3OmniMoeProcessor.from_pretrained(MODEL_PATH)

    # Conversation with image only
    conversation1 = [
        {
            "role": "user",
            "content": [
                {"type": "image", "image": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"},
                {"type": "text", "text": "What can you see in this image? Answer in one sentence."},
            ]
        }
    ]

    # Conversation with audio only
    conversation2 = [
        {
            "role": "user",
            "content": [
                {"type": "audio", "audio": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cough.wav"},
                {"type": "text", "text": "What can you hear in this audio?"},
            ]
        }
    ]

    # Conversation with pure text and system prompt
    conversation3 = [
        {
            "role": "system",
            "content": [
                {"type": "text", "text": "You are Qwen-Omni."}
            ],
        },
        {
            "role": "user",
            "content": "Who are you? Answer in one sentence."
        }
    ]

    # Conversation with mixed media
    conversation4 = [
        {
            "role": "user",
            "content": [
                {"type": "image", "image": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"},
                {"type": "audio", "audio": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/cookbook/asr_fr.wav"},
                {"type": "text", "text": "What can you see and hear? Answer in one sentence."}
            ],
        }
    ]
    
    USE_AUDIO_IN_VIDEO = True

    # Combine messages for batch processing
    conversations = [conversation1, conversation2, conversation3, conversation4]
    inputs = [build_input(processor, messages, USE_AUDIO_IN_VIDEO) for messages in conversations]

    outputs = llm.generate(inputs, sampling_params=sampling_params)

    result = [outputs[i].outputs[0].text for i in range(len(outputs))]
    print(result)&lt;/code&gt;
    &lt;head&gt;vLLM Serve Usage&lt;/head&gt;
    &lt;p&gt;vLLM serve for Qwen3-Omni currently only supports the thinker model. The &lt;code&gt;use_audio_in_video&lt;/code&gt; parameter is not available in vLLM serve; you can handle this by separately passing video and audio inputs for processing. You can start vLLM serve through the following command:&lt;/p&gt;
    &lt;code&gt;# Qwen3-Omni-30B-A3B-Instruct for single GPU
vllm serve Qwen/Qwen3-Omni-30B-A3B-Instruct --port 8901 --host 127.0.0.1 --dtype bfloat16 --max-model-len 32768 --allowed-local-media-path / -tp 1
# Qwen3-Omni-30B-A3B-Instruct for multi-GPU (example on 4 GPUs)
vllm serve Qwen/Qwen3-Omni-30B-A3B-Instruct --port 8901 --host 127.0.0.1 --dtype bfloat16 --max-model-len 65536 --allowed-local-media-path / -tp 4
# Qwen/Qwen3-Omni-30B-A3B-Thinking for single GPU
vllm serve Qwen/Qwen3-Omni-30B-A3B-Thinking --port 8901 --host 127.0.0.1 --dtype bfloat16 --max-model-len 32768 --allowed-local-media-path / -tp 1
# Qwen/Qwen3-Omni-30B-A3B-Thinking for multi-GPU (example on 4 GPUs)
vllm serve Qwen/Qwen3-Omni-30B-A3B-Thinking --port 8901 --host 127.0.0.1 --dtype bfloat16 --max-model-len 65536 --allowed-local-media-path / -tp 4&lt;/code&gt;
    &lt;p&gt;Then you can use the chat API as below (via curl, for example):&lt;/p&gt;
    &lt;code&gt;curl http://localhost:8901/v1/chat/completions \
    -H "Content-Type: application/json" \
    -d '{
    "messages": [
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": [
        {"type": "image_url", "image_url": {"url": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cars.jpg"}},
        {"type": "audio_url", "audio_url": {"url": "https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/demo/cough.wav"}},
        {"type": "text", "text": "What can you see and hear? Answer in one sentence."}
    ]}
    ]
    }'&lt;/code&gt;
    &lt;p&gt;Additionally, for more usage details such as prompt settings, task-specific usage methods, and resource requirements, please refer to Usage Tips and Cookbooks for Usage Cases.&lt;/p&gt;
    &lt;p&gt;To further explore Qwen3-Omni, we encourage you to try our DashScope API for a faster and more efficient experience. For detailed API information and documentation, please refer to the following:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;API Description&lt;/cell&gt;
        &lt;cell role="head"&gt;API Documentation (Mainland China)&lt;/cell&gt;
        &lt;cell role="head"&gt;API Documentation (International)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Offline API for Qwen3-Omni-Flash, including Instruct and Thinking models&lt;/cell&gt;
        &lt;cell&gt;https://help.aliyun.com/zh/model-studio/qwen-omni&lt;/cell&gt;
        &lt;cell&gt;https://www.alibabacloud.com/help/en/model-studio/qwen-omni&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Real-time API for Qwen3-Omni-Flash, supporting end-to-end real-time interaction&lt;/cell&gt;
        &lt;cell&gt;https://help.aliyun.com/zh/model-studio/realtime&lt;/cell&gt;
        &lt;cell&gt;https://www.alibabacloud.com/help/en/model-studio/realtime&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;API for Qwen3-Omni-30B-A3B-Captioner model&lt;/cell&gt;
        &lt;cell&gt;https://help.aliyun.com/zh/model-studio/qwen3-omni-captioner&lt;/cell&gt;
        &lt;cell&gt;https://www.alibabacloud.com/help/zh/model-studio/qwen3-omni-captioner&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Model&lt;/cell&gt;
        &lt;cell role="head"&gt;Precision&lt;/cell&gt;
        &lt;cell role="head"&gt;15s Video&lt;/cell&gt;
        &lt;cell role="head"&gt;30s Video&lt;/cell&gt;
        &lt;cell role="head"&gt;60s Video&lt;/cell&gt;
        &lt;cell role="head"&gt;120s Video&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell&gt;BF16&lt;/cell&gt;
        &lt;cell&gt;78.85 GB&lt;/cell&gt;
        &lt;cell&gt;88.52 GB&lt;/cell&gt;
        &lt;cell&gt;107.74 GB&lt;/cell&gt;
        &lt;cell&gt;144.81 GB&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell&gt;BF16&lt;/cell&gt;
        &lt;cell&gt;68.74 GB&lt;/cell&gt;
        &lt;cell&gt;77.79 GB&lt;/cell&gt;
        &lt;cell&gt;95.76 GB&lt;/cell&gt;
        &lt;cell&gt;131.65 GB&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Note: The table above presents the theoretical minimum memory requirements for inference with &lt;code&gt;transformers&lt;/code&gt; and &lt;code&gt;BF16&lt;/code&gt; precision, tested with &lt;code&gt;attn_implementation="flash_attention_2"&lt;/code&gt;. The Instruct model includes both the thinker and talker components, whereas the Thinking model includes only the thinker part.&lt;/p&gt;
    &lt;p&gt;When using Qwen3-Omni for audio-visual multimodal interaction, where the input consists of a video and its corresponding audio (with the audio serving as a query), we recommend using the following system prompt. This setup helps the model maintain high reasoning capability while better assuming interactive roles such as a smart assistant. Additionally, the text generated by the thinker will be more readable, with a natural, conversational tone and without complex formatting that is difficult to vocalize, leading to more stable and fluent audio output from the talker. You can customize the &lt;code&gt;user_system_prompt&lt;/code&gt; field in the system prompt to include character settings or other role-specific descriptions as needed.&lt;/p&gt;
    &lt;code&gt;user_system_prompt = "You are Qwen-Omni, a smart voice assistant created by Alibaba Qwen."
message = {
    "role": "system",
    "content": [
          {"type": "text", "text": f"{user_system_prompt} You are a virtual voice assistant with no gender or age.\nYou are communicating with the user.\nIn user messages, “I/me/my/we/our” refer to the user and “you/your” refer to the assistant. In your replies, address the user as “you/your” and yourself as “I/me/my”; never mirror the user’s pronouns—always shift perspective. Keep original pronouns only in direct quotes; if a reference is unclear, ask a brief clarifying question.\nInteract with users using short(no more than 50 words), brief, straightforward language, maintaining a natural tone.\nNever use formal phrasing, mechanical expressions, bullet points, overly structured language. \nYour output must consist only of the spoken content you want the user to hear. \nDo not include any descriptions of actions, emotions, sounds, or voice changes. \nDo not use asterisks, brackets, parentheses, or any other symbols to indicate tone or actions. \nYou must answer users' audio or text questions, do not directly describe the video content. \nYou should communicate in the same language strictly as the user unless they request otherwise.\nWhen you are uncertain (e.g., you can't see/hear clearly, don't understand, or the user makes a comment rather than asking a question), use appropriate questions to guide the user to continue the conversation.\nKeep replies concise and conversational, as if talking face-to-face."}
    ]
}
&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/code&gt; model is primarily designed for understanding and interacting with multimodal inputs, including text, audio, image, and video. To achieve optimal performance, we recommend that users include an explicit textual instruction or task description in each round of dialogue alongside the multimodal input. This helps clarify the intent and significantly enhances the model's ability to leverage its reasoning capabilities. For example:&lt;/p&gt;
    &lt;code&gt;messages = [
    {
        "role": "user",
        "content": [
            {"type": "audio", "audio": "/path/to/audio.wav"},
            {"type": "image", "image": "/path/to/image.png"},
            {"type": "video", "video": "/path/to/video.mp4"},
            {"type": "text", "text": "Analyze this audio, image, and video together."},
        ], 
    }
]&lt;/code&gt;
    &lt;p&gt;In multimodal interaction, user-provided videos are often accompanied by audio (such as spoken questions or sounds from events in the video). This information helps the model provide a better interactive experience. We provide the following options for users to decide whether to use the audio from a video.&lt;/p&gt;
    &lt;code&gt;# In data preprocessing
audios, images, videos = process_mm_info(messages, use_audio_in_video=True)&lt;/code&gt;
    &lt;code&gt;# For Transformers
text = processor.apply_chat_template(messages, add_generation_prompt=True, tokenize=False)
inputs = processor(text=text, audio=audios, images=images, videos=videos, return_tensors="pt", 
                   padding=True, use_audio_in_video=True)
text_ids, audio = model.generate(..., use_audio_in_video=True)

# For vLLM
text = processor.apply_chat_template(messages, add_generation_prompt=True, tokenize=False)
inputs = {
    'prompt': text,
    'multi_modal_data': {},
    "mm_processor_kwargs": {
        "use_audio_in_video": True,
    },
}&lt;/code&gt;
    &lt;p&gt;It is worth noting that during a multi-round conversation, the &lt;code&gt;use_audio_in_video&lt;/code&gt; parameter must be set consistently across these steps; otherwise, unexpected results may occur.&lt;/p&gt;
    &lt;p&gt;Without local deployment, you can experience an online web demo directly by visiting our Hugging Face Spaces and ModelScope Studio. This includes quick hands-on experiences for Qwen3-Omni-Realtime, Qwen3-Omni (Instruct and Thinking), and Qwen3-Omni-30B-A3B-Captioner.&lt;/p&gt;
    &lt;p&gt;Real-time streaming interaction with Qwen3-Omni is available now. Please visit Qwen Chat and select the voice/video call option in the chat box to experience it.&lt;/p&gt;
    &lt;p&gt;In this section, we provide instructions for users to build a web-based user interface (UI) demo. This UI demo allows users to interact with the model through a web browser. Follow the steps below to get start :)&lt;/p&gt;
    &lt;p&gt;Before you begin, we strongly recommend that you refer to the Installation section in vLLM Usage to set up your environment, which will allow you to seamlessly use both the vLLM and Transformers backends. However, if you only intend to use the Transformers backend (note that this will result in significantly slower inference), please follow the installation instructions in Transformers Usage. That said, we still highly recommend using our Docker image to avoid potential environment-related issues. Additionally, if you are running locally, make sure your system has &lt;code&gt;ffmpeg&lt;/code&gt; installed and you install the following dependencies:&lt;/p&gt;
    &lt;code&gt;pip install gradio==5.44.1 gradio_client==1.12.1 soundfile==0.13.1&lt;/code&gt;
    &lt;p&gt;Once the required packages are installed, you can launch the web demo using the following commands. These commands will start a web server and provide you with a link to access the UI in your web browser. You can run &lt;code&gt;python web_demo.py --help&lt;/code&gt; and &lt;code&gt;python web_demo_captioner.py --help&lt;/code&gt; to learn about more options.&lt;/p&gt;
    &lt;code&gt;# For Qwen3-Omni-30B-A3B-Instruct with vLLM backend
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Instruct
# For Qwen3-Omni-30B-A3B-Instruct with Transformers backend
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Instruct --use-transformers --generate-audio
# For Qwen3-Omni-30B-A3B-Instruct with Transformers backend and FlashAttention support
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Instruct --use-transformers --generate-audio --flash-attn2&lt;/code&gt;
    &lt;code&gt;# For Qwen3-Omni-30B-A3B-Thinking with vLLM backend
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Thinking
# For Qwen3-Omni-30B-A3B-Thinking with Transformers backend
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Thinking --use-transformers
# For Qwen3-Omni-30B-A3B-Thinking with Transformers backend and FlashAttention support
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Thinking --use-transformers --flash-attn2&lt;/code&gt;
    &lt;code&gt;# For Qwen3-Omni-30B-A3B-Captioner with vLLM backend
python web_demo_captioner.py -c Qwen/Qwen3-Omni-30B-A3B-Captioner
# For Qwen3-Omni-30B-A3B-Captioner with Transformers backend
python web_demo_captioner.py -c Qwen/Qwen3-Omni-30B-A3B-Captioner --use-transformers
# For Qwen3-Omni-30B-A3B-Captioner with Transformers backend and FlashAttention support
python web_demo_captioner.py -c Qwen/Qwen3-Omni-30B-A3B-Captioner --use-transformers --flash-attn2&lt;/code&gt;
    &lt;p&gt;After running the command, you’ll see a link generated in the terminal similar to this:&lt;/p&gt;
    &lt;code&gt;Running on local: http://127.0.0.1:8901/
&lt;/code&gt;
    &lt;p&gt;If you are running locally, copy this link and paste it into your browser to access the web UI. If you are running on a server or in a &lt;code&gt;docker&lt;/code&gt; container, please configure the address according to the server's actual IP, or set up port forwarding where necessary. For instructions on how to configure port forwarding from the official &lt;code&gt;docker&lt;/code&gt; container to the host machine, please refer to here.&lt;/p&gt;
    &lt;p&gt;To simplify the deployment process, we provide Docker images with pre-built environments: qwenllm/qwen3-omni. You only need to install the driver and download model files to launch the demos. Please refer to the guide to install the NVIDIA Container Toolkit, ensuring that your Docker can access the GPU. For users in mainland China who may have difficulty accessing Docker Hub, you can use mirror acceleration services to pull the images. First, run the following command to pull and initialize the container:&lt;/p&gt;
    &lt;code&gt;LOCAL_WORKDIR=/path/to/your/workspace
HOST_PORT=8901
CONTAINER_PORT=80
docker run --gpus all --name qwen3-omni \
    -v /var/run/docker.sock:/var/run/docker.sock -p $HOST_PORT:$CONTAINER_PORT \
    --mount type=bind,source=$LOCAL_WORKDIR,target=/data/shared/Qwen3-Omni \
    --shm-size=4gb \
    -it qwenllm/qwen3-omni:3-cu124&lt;/code&gt;
    &lt;p&gt;After executing the command, you will enter the bash shell of the container. Your local model and data directory (please replace &lt;code&gt;/path/to/your/workspace&lt;/code&gt; with the actual path) will be mounted to the container's internal path &lt;code&gt;/data/shared/Qwen3-Omni&lt;/code&gt;. The host's port &lt;code&gt;8901&lt;/code&gt; is mapped to port &lt;code&gt;80&lt;/code&gt; in the container, meaning you can access the service inside the container by visiting port &lt;code&gt;8901&lt;/code&gt; on the host machine.&lt;/p&gt;
    &lt;p&gt;Please note that services inside the container must be started with the IP &lt;code&gt;0.0.0.0&lt;/code&gt; to ensure proper port forwarding. For example:&lt;/p&gt;
    &lt;code&gt;# Run this command inside the Docker container
python web_demo.py -c Qwen/Qwen3-Omni-30B-A3B-Instruct --server-port 80 --server-name 0.0.0.0&lt;/code&gt;
    &lt;p&gt;For more ways to launch the web demo, please refer to Launch Local Web UI Demo. If you exit the container, you can re-enter it using the following command:&lt;/p&gt;
    &lt;code&gt;docker start qwen3-omni
docker exec -it qwen3-omni bash&lt;/code&gt;
    &lt;p&gt;Or if you want to completely remove the container, please run:&lt;/p&gt;
    &lt;code&gt;docker rm -f qwen3-omni&lt;/code&gt;
    &lt;p&gt;Qwen3-Omni maintains state-of-the-art performance on text and visual modalities without degradation relative to same-size single-model Qwen counterparts. Across 36 audio and audio-visual benchmarks, it achieves open-source SOTA on 32 and sets the SOTA on 22, outperforming strong closed-source systems such as Gemini 2.5 Pro and GPT-4o.&lt;/p&gt;
    &lt;head&gt;Text -&amp;gt; Text&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;GPT-4o-0327&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-235B-A22B&lt;p&gt;Non Thinking&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-30B-A3B-Instruct-2507&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Instruct&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;General&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;MMLU-Redux&lt;/cell&gt;
        &lt;cell&gt;91.3&lt;/cell&gt;
        &lt;cell&gt;89.2&lt;/cell&gt;
        &lt;cell&gt;89.3&lt;/cell&gt;
        &lt;cell&gt;86.6&lt;/cell&gt;
        &lt;cell&gt;86.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;GPQA&lt;/cell&gt;
        &lt;cell&gt;66.9&lt;/cell&gt;
        &lt;cell&gt;62.9&lt;/cell&gt;
        &lt;cell&gt;70.4&lt;/cell&gt;
        &lt;cell&gt;69.6&lt;/cell&gt;
        &lt;cell&gt;69.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Reasoning&lt;/cell&gt;
        &lt;cell&gt;AIME25&lt;/cell&gt;
        &lt;cell&gt;26.7&lt;/cell&gt;
        &lt;cell&gt;24.7&lt;/cell&gt;
        &lt;cell&gt;61.3&lt;/cell&gt;
        &lt;cell&gt;65.0&lt;/cell&gt;
        &lt;cell&gt;65.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;ZebraLogic&lt;/cell&gt;
        &lt;cell&gt;52.6&lt;/cell&gt;
        &lt;cell&gt;37.7&lt;/cell&gt;
        &lt;cell&gt;90.0&lt;/cell&gt;
        &lt;cell&gt;76.0&lt;/cell&gt;
        &lt;cell&gt;76.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Code&lt;/cell&gt;
        &lt;cell&gt;MultiPL-E&lt;/cell&gt;
        &lt;cell&gt;82.7&lt;/cell&gt;
        &lt;cell&gt;79.3&lt;/cell&gt;
        &lt;cell&gt;83.8&lt;/cell&gt;
        &lt;cell&gt;81.4&lt;/cell&gt;
        &lt;cell&gt;81.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Alignment&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;IFEval&lt;/cell&gt;
        &lt;cell&gt;83.9&lt;/cell&gt;
        &lt;cell&gt;83.2&lt;/cell&gt;
        &lt;cell&gt;84.7&lt;/cell&gt;
        &lt;cell&gt;81.0&lt;/cell&gt;
        &lt;cell&gt;81.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Creative Writing v3&lt;/cell&gt;
        &lt;cell&gt;84.9&lt;/cell&gt;
        &lt;cell&gt;80.4&lt;/cell&gt;
        &lt;cell&gt;86.0&lt;/cell&gt;
        &lt;cell&gt;80.6&lt;/cell&gt;
        &lt;cell&gt;81.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;WritingBench&lt;/cell&gt;
        &lt;cell&gt;75.5&lt;/cell&gt;
        &lt;cell&gt;77.0&lt;/cell&gt;
        &lt;cell&gt;85.5&lt;/cell&gt;
        &lt;cell&gt;82.6&lt;/cell&gt;
        &lt;cell&gt;83.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Agent&lt;/cell&gt;
        &lt;cell&gt;BFCL-v3&lt;/cell&gt;
        &lt;cell&gt;66.5&lt;/cell&gt;
        &lt;cell&gt;68.0&lt;/cell&gt;
        &lt;cell&gt;65.1&lt;/cell&gt;
        &lt;cell&gt;64.4&lt;/cell&gt;
        &lt;cell&gt;65.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Multilingual&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;MultiIF&lt;/cell&gt;
        &lt;cell&gt;70.4&lt;/cell&gt;
        &lt;cell&gt;70.2&lt;/cell&gt;
        &lt;cell&gt;67.9&lt;/cell&gt;
        &lt;cell&gt;64.0&lt;/cell&gt;
        &lt;cell&gt;64.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;PolyMATH&lt;/cell&gt;
        &lt;cell&gt;25.5&lt;/cell&gt;
        &lt;cell&gt;27.0&lt;/cell&gt;
        &lt;cell&gt;43.1&lt;/cell&gt;
        &lt;cell&gt;37.9&lt;/cell&gt;
        &lt;cell&gt;39.3&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Flash&lt;p&gt;Thinking&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-235B-A22B&lt;p&gt;Thinking&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-30B-A3B-Thinking-2507&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Thinking&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;General&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;MMLU-Redux&lt;/cell&gt;
        &lt;cell&gt;92.1&lt;/cell&gt;
        &lt;cell&gt;92.7&lt;/cell&gt;
        &lt;cell&gt;91.4&lt;/cell&gt;
        &lt;cell&gt;88.8&lt;/cell&gt;
        &lt;cell&gt;89.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;GPQA&lt;/cell&gt;
        &lt;cell&gt;82.8&lt;/cell&gt;
        &lt;cell&gt;71.1&lt;/cell&gt;
        &lt;cell&gt;73.4&lt;/cell&gt;
        &lt;cell&gt;73.1&lt;/cell&gt;
        &lt;cell&gt;73.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Reasoning&lt;/cell&gt;
        &lt;cell&gt;AIME25&lt;/cell&gt;
        &lt;cell&gt;72.0&lt;/cell&gt;
        &lt;cell&gt;81.5&lt;/cell&gt;
        &lt;cell&gt;85.0&lt;/cell&gt;
        &lt;cell&gt;73.7&lt;/cell&gt;
        &lt;cell&gt;74.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;LiveBench 20241125&lt;/cell&gt;
        &lt;cell&gt;74.3&lt;/cell&gt;
        &lt;cell&gt;77.1&lt;/cell&gt;
        &lt;cell&gt;76.8&lt;/cell&gt;
        &lt;cell&gt;71.8&lt;/cell&gt;
        &lt;cell&gt;70.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Code&lt;/cell&gt;
        &lt;cell&gt;MultiPL-E&lt;/cell&gt;
        &lt;cell&gt;84.5&lt;/cell&gt;
        &lt;cell&gt;79.9&lt;/cell&gt;
        &lt;cell&gt;81.3&lt;/cell&gt;
        &lt;cell&gt;80.6&lt;/cell&gt;
        &lt;cell&gt;81.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Alignment&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;IFEval&lt;/cell&gt;
        &lt;cell&gt;89.8&lt;/cell&gt;
        &lt;cell&gt;83.4&lt;/cell&gt;
        &lt;cell&gt;88.9&lt;/cell&gt;
        &lt;cell&gt;85.1&lt;/cell&gt;
        &lt;cell&gt;85.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Arena-Hard v2&lt;/cell&gt;
        &lt;cell&gt;56.7&lt;/cell&gt;
        &lt;cell&gt;61.5&lt;/cell&gt;
        &lt;cell&gt;56.0&lt;/cell&gt;
        &lt;cell&gt;55.1&lt;/cell&gt;
        &lt;cell&gt;57.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Creative Writing v3&lt;/cell&gt;
        &lt;cell&gt;85.0&lt;/cell&gt;
        &lt;cell&gt;84.6&lt;/cell&gt;
        &lt;cell&gt;84.4&lt;/cell&gt;
        &lt;cell&gt;82.5&lt;/cell&gt;
        &lt;cell&gt;83.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;WritingBench&lt;/cell&gt;
        &lt;cell&gt;83.9&lt;/cell&gt;
        &lt;cell&gt;80.3&lt;/cell&gt;
        &lt;cell&gt;85.0&lt;/cell&gt;
        &lt;cell&gt;85.5&lt;/cell&gt;
        &lt;cell&gt;85.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Agent&lt;/cell&gt;
        &lt;cell&gt;BFCL-v3&lt;/cell&gt;
        &lt;cell&gt;68.6&lt;/cell&gt;
        &lt;cell&gt;70.8&lt;/cell&gt;
        &lt;cell&gt;72.4&lt;/cell&gt;
        &lt;cell&gt;63.2&lt;/cell&gt;
        &lt;cell&gt;64.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Multilingual&lt;p&gt;Tasks&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;MultiIF&lt;/cell&gt;
        &lt;cell&gt;74.4&lt;/cell&gt;
        &lt;cell&gt;71.9&lt;/cell&gt;
        &lt;cell&gt;76.4&lt;/cell&gt;
        &lt;cell&gt;72.9&lt;/cell&gt;
        &lt;cell&gt;73.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;PolyMATH&lt;/cell&gt;
        &lt;cell&gt;49.8&lt;/cell&gt;
        &lt;cell&gt;54.7&lt;/cell&gt;
        &lt;cell&gt;52.6&lt;/cell&gt;
        &lt;cell&gt;47.1&lt;/cell&gt;
        &lt;cell&gt;48.7&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;Audio -&amp;gt; Text&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="9"&gt;
        &lt;cell role="head"&gt;Seed-ASR&lt;/cell&gt;
        &lt;cell role="head"&gt;Voxtral-Mini&lt;/cell&gt;
        &lt;cell role="head"&gt;Voxtral-Small&lt;/cell&gt;
        &lt;cell role="head"&gt;GPT-4o-Transcribe&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Pro&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen2.5-Omni&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Instruct&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;EN &amp;amp; ZH ASR (wer)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Wenetspeech&lt;p&gt;net | meeting&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;4.66 | 5.69&lt;/cell&gt;
        &lt;cell&gt;24.30 | 31.53&lt;/cell&gt;
        &lt;cell&gt;20.33 | 26.08&lt;/cell&gt;
        &lt;cell&gt;15.30 | 32.27&lt;/cell&gt;
        &lt;cell&gt;14.43 | 13.47&lt;/cell&gt;
        &lt;cell&gt;5.91 | 7.65&lt;/cell&gt;
        &lt;cell&gt;4.69 | 5.89&lt;/cell&gt;
        &lt;cell&gt;4.62 | 5.75&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Librispeech&lt;p&gt;clean | other&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;1.58 | 2.84&lt;/cell&gt;
        &lt;cell&gt;1.88 | 4.12&lt;/cell&gt;
        &lt;cell&gt;1.56 | 3.30&lt;/cell&gt;
        &lt;cell&gt;1.39 | 3.75&lt;/cell&gt;
        &lt;cell&gt;2.89 | 3.56&lt;/cell&gt;
        &lt;cell&gt;1.74 | 3.45&lt;/cell&gt;
        &lt;cell&gt;1.22 | 2.48&lt;/cell&gt;
        &lt;cell&gt;1.27 | 2.44&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;CV15-en&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;9.47&lt;/cell&gt;
        &lt;cell&gt;7.79&lt;/cell&gt;
        &lt;cell&gt;10.01&lt;/cell&gt;
        &lt;cell&gt;9.89&lt;/cell&gt;
        &lt;cell&gt;7.61&lt;/cell&gt;
        &lt;cell&gt;6.05&lt;/cell&gt;
        &lt;cell&gt;5.94&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;CV15-zh&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;24.67&lt;/cell&gt;
        &lt;cell&gt;19.30&lt;/cell&gt;
        &lt;cell&gt;9.84&lt;/cell&gt;
        &lt;cell&gt;8.00&lt;/cell&gt;
        &lt;cell&gt;5.13&lt;/cell&gt;
        &lt;cell&gt;4.31&lt;/cell&gt;
        &lt;cell&gt;4.28&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-en&lt;/cell&gt;
        &lt;cell&gt;3.40&lt;/cell&gt;
        &lt;cell&gt;3.96&lt;/cell&gt;
        &lt;cell&gt;3.77&lt;/cell&gt;
        &lt;cell&gt;3.32&lt;/cell&gt;
        &lt;cell&gt;2.94&lt;/cell&gt;
        &lt;cell&gt;3.77&lt;/cell&gt;
        &lt;cell&gt;2.72&lt;/cell&gt;
        &lt;cell&gt;2.74&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-zh&lt;/cell&gt;
        &lt;cell&gt;2.69&lt;/cell&gt;
        &lt;cell&gt;12.22&lt;/cell&gt;
        &lt;cell&gt;7.98&lt;/cell&gt;
        &lt;cell&gt;2.44&lt;/cell&gt;
        &lt;cell&gt;2.71&lt;/cell&gt;
        &lt;cell&gt;2.54&lt;/cell&gt;
        &lt;cell&gt;2.20&lt;/cell&gt;
        &lt;cell&gt;2.19&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Multilingual ASR (wer)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-avg&lt;p&gt;(19 lang)&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;15.67&lt;/cell&gt;
        &lt;cell&gt;8.09&lt;/cell&gt;
        &lt;cell&gt;4.48&lt;/cell&gt;
        &lt;cell&gt;5.55&lt;/cell&gt;
        &lt;cell&gt;14.04&lt;/cell&gt;
        &lt;cell&gt;5.33&lt;/cell&gt;
        &lt;cell&gt;5.31&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Lyric ASR (wer)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;MIR-1K (vocal-only)&lt;/cell&gt;
        &lt;cell&gt;6.45&lt;/cell&gt;
        &lt;cell&gt;23.33&lt;/cell&gt;
        &lt;cell&gt;18.73&lt;/cell&gt;
        &lt;cell&gt;11.87&lt;/cell&gt;
        &lt;cell&gt;9.85&lt;/cell&gt;
        &lt;cell&gt;8.15&lt;/cell&gt;
        &lt;cell&gt;5.90&lt;/cell&gt;
        &lt;cell&gt;5.85&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Opencpop-test&lt;/cell&gt;
        &lt;cell&gt;2.98&lt;/cell&gt;
        &lt;cell&gt;31.01&lt;/cell&gt;
        &lt;cell&gt;16.06&lt;/cell&gt;
        &lt;cell&gt;7.93&lt;/cell&gt;
        &lt;cell&gt;6.49&lt;/cell&gt;
        &lt;cell&gt;2.84&lt;/cell&gt;
        &lt;cell&gt;1.54&lt;/cell&gt;
        &lt;cell&gt;2.02&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;S2TT (BLEU)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-en2xx&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;30.35&lt;/cell&gt;
        &lt;cell&gt;37.85&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;39.25&lt;/cell&gt;
        &lt;cell&gt;29.22&lt;/cell&gt;
        &lt;cell&gt;37.50&lt;/cell&gt;
        &lt;cell&gt;36.22&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-xx2en&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;27.54&lt;/cell&gt;
        &lt;cell&gt;32.81&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;35.41&lt;/cell&gt;
        &lt;cell&gt;28.61&lt;/cell&gt;
        &lt;cell&gt;31.08&lt;/cell&gt;
        &lt;cell&gt;30.71&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Fleurs-zh2xx&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;17.03&lt;/cell&gt;
        &lt;cell&gt;22.05&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;26.63&lt;/cell&gt;
        &lt;cell&gt;17.97&lt;/cell&gt;
        &lt;cell&gt;25.17&lt;/cell&gt;
        &lt;cell&gt;25.10&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Fleurs-xx2zh&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;28.75&lt;/cell&gt;
        &lt;cell&gt;34.82&lt;/cell&gt;
        &lt;cell&gt;-&lt;/cell&gt;
        &lt;cell&gt;37.50&lt;/cell&gt;
        &lt;cell&gt;27.68&lt;/cell&gt;
        &lt;cell&gt;33.13&lt;/cell&gt;
        &lt;cell&gt;31.19&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="9"&gt;
        &lt;cell role="head"&gt;GPT-4o-Audio&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Flash&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Pro&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen2.5-Omni&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Thinking&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;VoiceBench&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;AlpacaEval&lt;/cell&gt;
        &lt;cell&gt;95.6&lt;/cell&gt;
        &lt;cell&gt;96.1&lt;/cell&gt;
        &lt;cell&gt;94.3&lt;/cell&gt;
        &lt;cell&gt;89.9&lt;/cell&gt;
        &lt;cell&gt;94.8&lt;/cell&gt;
        &lt;cell&gt;96.4&lt;/cell&gt;
        &lt;cell&gt;95.4&lt;/cell&gt;
        &lt;cell&gt;96.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;CommonEval&lt;/cell&gt;
        &lt;cell&gt;89.8&lt;/cell&gt;
        &lt;cell&gt;88.3&lt;/cell&gt;
        &lt;cell&gt;88.4&lt;/cell&gt;
        &lt;cell&gt;76.7&lt;/cell&gt;
        &lt;cell&gt;90.8&lt;/cell&gt;
        &lt;cell&gt;90.5&lt;/cell&gt;
        &lt;cell&gt;91.0&lt;/cell&gt;
        &lt;cell&gt;90.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;WildVoice&lt;/cell&gt;
        &lt;cell&gt;91.6&lt;/cell&gt;
        &lt;cell&gt;92.1&lt;/cell&gt;
        &lt;cell&gt;93.4&lt;/cell&gt;
        &lt;cell&gt;77.7&lt;/cell&gt;
        &lt;cell&gt;91.6&lt;/cell&gt;
        &lt;cell&gt;90.5&lt;/cell&gt;
        &lt;cell&gt;92.3&lt;/cell&gt;
        &lt;cell&gt;90.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;SD-QA&lt;/cell&gt;
        &lt;cell&gt;75.5&lt;/cell&gt;
        &lt;cell&gt;84.5&lt;/cell&gt;
        &lt;cell&gt;90.1&lt;/cell&gt;
        &lt;cell&gt;56.4&lt;/cell&gt;
        &lt;cell&gt;76.9&lt;/cell&gt;
        &lt;cell&gt;78.1&lt;/cell&gt;
        &lt;cell&gt;76.8&lt;/cell&gt;
        &lt;cell&gt;78.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;MMSU&lt;/cell&gt;
        &lt;cell&gt;80.3&lt;/cell&gt;
        &lt;cell&gt;66.1&lt;/cell&gt;
        &lt;cell&gt;71.1&lt;/cell&gt;
        &lt;cell&gt;61.7&lt;/cell&gt;
        &lt;cell&gt;68.1&lt;/cell&gt;
        &lt;cell&gt;83.0&lt;/cell&gt;
        &lt;cell&gt;68.4&lt;/cell&gt;
        &lt;cell&gt;84.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;OpenBookQA&lt;/cell&gt;
        &lt;cell&gt;89.2&lt;/cell&gt;
        &lt;cell&gt;56.9&lt;/cell&gt;
        &lt;cell&gt;92.3&lt;/cell&gt;
        &lt;cell&gt;80.9&lt;/cell&gt;
        &lt;cell&gt;89.7&lt;/cell&gt;
        &lt;cell&gt;94.3&lt;/cell&gt;
        &lt;cell&gt;91.4&lt;/cell&gt;
        &lt;cell&gt;95.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;BBH&lt;/cell&gt;
        &lt;cell&gt;84.1&lt;/cell&gt;
        &lt;cell&gt;83.9&lt;/cell&gt;
        &lt;cell&gt;92.6&lt;/cell&gt;
        &lt;cell&gt;66.7&lt;/cell&gt;
        &lt;cell&gt;80.4&lt;/cell&gt;
        &lt;cell&gt;88.9&lt;/cell&gt;
        &lt;cell&gt;80.6&lt;/cell&gt;
        &lt;cell&gt;89.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;IFEval&lt;/cell&gt;
        &lt;cell&gt;76.0&lt;/cell&gt;
        &lt;cell&gt;83.8&lt;/cell&gt;
        &lt;cell&gt;85.7&lt;/cell&gt;
        &lt;cell&gt;53.5&lt;/cell&gt;
        &lt;cell&gt;77.8&lt;/cell&gt;
        &lt;cell&gt;80.6&lt;/cell&gt;
        &lt;cell&gt;75.2&lt;/cell&gt;
        &lt;cell&gt;80.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;AdvBench&lt;/cell&gt;
        &lt;cell&gt;98.7&lt;/cell&gt;
        &lt;cell&gt;98.9&lt;/cell&gt;
        &lt;cell&gt;98.1&lt;/cell&gt;
        &lt;cell&gt;99.2&lt;/cell&gt;
        &lt;cell&gt;99.3&lt;/cell&gt;
        &lt;cell&gt;97.2&lt;/cell&gt;
        &lt;cell&gt;99.4&lt;/cell&gt;
        &lt;cell&gt;98.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Overall&lt;/cell&gt;
        &lt;cell&gt;86.8&lt;/cell&gt;
        &lt;cell&gt;83.4&lt;/cell&gt;
        &lt;cell&gt;89.6&lt;/cell&gt;
        &lt;cell&gt;73.6&lt;/cell&gt;
        &lt;cell&gt;85.5&lt;/cell&gt;
        &lt;cell&gt;88.8&lt;/cell&gt;
        &lt;cell&gt;85.6&lt;/cell&gt;
        &lt;cell&gt;89.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;Audio Reasoning&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="9"&gt;
        &lt;cell&gt;MMAU-v05.15.25&lt;/cell&gt;
        &lt;cell&gt;62.5&lt;/cell&gt;
        &lt;cell&gt;71.8&lt;/cell&gt;
        &lt;cell&gt;77.4&lt;/cell&gt;
        &lt;cell&gt;65.5&lt;/cell&gt;
        &lt;cell&gt;77.5&lt;/cell&gt;
        &lt;cell&gt;75.4&lt;/cell&gt;
        &lt;cell&gt;77.6&lt;/cell&gt;
        &lt;cell&gt;76.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;MMSU&lt;/cell&gt;
        &lt;cell&gt;56.4&lt;/cell&gt;
        &lt;cell&gt;70.2&lt;/cell&gt;
        &lt;cell&gt;77.7&lt;/cell&gt;
        &lt;cell&gt;62.6&lt;/cell&gt;
        &lt;cell&gt;69.0&lt;/cell&gt;
        &lt;cell&gt;70.2&lt;/cell&gt;
        &lt;cell&gt;69.1&lt;/cell&gt;
        &lt;cell&gt;71.3&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Best Specialist&lt;p&gt;Models&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;GPT-4o-Audio&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Pro&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen2.5-Omni&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Instruct&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;RUL-MuchoMusic&lt;/cell&gt;
        &lt;cell&gt;47.6 (Audio Flamingo 3)&lt;/cell&gt;
        &lt;cell&gt;36.1&lt;/cell&gt;
        &lt;cell&gt;49.4&lt;/cell&gt;
        &lt;cell&gt;47.3&lt;/cell&gt;
        &lt;cell&gt;52.0&lt;/cell&gt;
        &lt;cell&gt;52.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;GTZAN&lt;p&gt;Acc.&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;87.9 (CLaMP 3)&lt;/cell&gt;
        &lt;cell&gt;76.5&lt;/cell&gt;
        &lt;cell&gt;81.0&lt;/cell&gt;
        &lt;cell&gt;81.7&lt;/cell&gt;
        &lt;cell&gt;93.0&lt;/cell&gt;
        &lt;cell&gt;93.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;MTG Genre&lt;p&gt;Micro F1&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;35.8 (MuQ-MuLan)&lt;/cell&gt;
        &lt;cell&gt;25.3&lt;/cell&gt;
        &lt;cell&gt;32.6&lt;/cell&gt;
        &lt;cell&gt;32.5&lt;/cell&gt;
        &lt;cell&gt;39.0&lt;/cell&gt;
        &lt;cell&gt;39.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;MTG Mood/Theme&lt;p&gt;Micro F1&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;10.9 (MuQ-MuLan)&lt;/cell&gt;
        &lt;cell&gt;11.3&lt;/cell&gt;
        &lt;cell&gt;14.1&lt;/cell&gt;
        &lt;cell&gt;8.9&lt;/cell&gt;
        &lt;cell&gt;21.0&lt;/cell&gt;
        &lt;cell&gt;21.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;MTG Instrument&lt;p&gt;Micro F1&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;39.8 (MuQ-MuLan)&lt;/cell&gt;
        &lt;cell&gt;34.2&lt;/cell&gt;
        &lt;cell&gt;33.0&lt;/cell&gt;
        &lt;cell&gt;22.6&lt;/cell&gt;
        &lt;cell&gt;40.5&lt;/cell&gt;
        &lt;cell&gt;40.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;MTG Top50&lt;p&gt;Micro F1&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;33.2 (MuQ-MuLan)&lt;/cell&gt;
        &lt;cell&gt;25.0&lt;/cell&gt;
        &lt;cell&gt;26.1&lt;/cell&gt;
        &lt;cell&gt;21.6&lt;/cell&gt;
        &lt;cell&gt;36.7&lt;/cell&gt;
        &lt;cell&gt;36.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;MagnaTagATune&lt;p&gt;Micro F1&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;41.6 (MuQ)&lt;/cell&gt;
        &lt;cell&gt;29.2&lt;/cell&gt;
        &lt;cell&gt;28.1&lt;/cell&gt;
        &lt;cell&gt;30.1&lt;/cell&gt;
        &lt;cell&gt;44.3&lt;/cell&gt;
        &lt;cell&gt;46.8&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;Vision -&amp;gt; Text&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Datasets&lt;/cell&gt;
        &lt;cell role="head"&gt;GPT4-o&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.0-Flash&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen2.5-VL&lt;p&gt;72B&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B&lt;p&gt;-Instruct&lt;/p&gt;&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash&lt;p&gt;-Instruct&lt;/p&gt;&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;General Visual Question Answering&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MMStar&lt;/cell&gt;
        &lt;cell&gt;64.7&lt;/cell&gt;
        &lt;cell&gt;71.4&lt;/cell&gt;
        &lt;cell&gt;70.8&lt;/cell&gt;
        &lt;cell&gt;68.5&lt;/cell&gt;
        &lt;cell&gt;69.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;HallusionBench&lt;/cell&gt;
        &lt;cell&gt;55.0&lt;/cell&gt;
        &lt;cell&gt;56.3&lt;/cell&gt;
        &lt;cell&gt;55.2&lt;/cell&gt;
        &lt;cell&gt;59.7&lt;/cell&gt;
        &lt;cell&gt;58.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MM-MT-Bench&lt;/cell&gt;
        &lt;cell&gt;7.7&lt;/cell&gt;
        &lt;cell&gt;6.7&lt;/cell&gt;
        &lt;cell&gt;7.6&lt;/cell&gt;
        &lt;cell&gt;7.4&lt;/cell&gt;
        &lt;cell&gt;7.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Math &amp;amp; STEM&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MMMU_val&lt;/cell&gt;
        &lt;cell&gt;69.1&lt;/cell&gt;
        &lt;cell&gt;71.3&lt;/cell&gt;
        &lt;cell&gt;70.2&lt;/cell&gt;
        &lt;cell&gt;69.1&lt;/cell&gt;
        &lt;cell&gt;69.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MMMU_pro&lt;/cell&gt;
        &lt;cell&gt;51.9&lt;/cell&gt;
        &lt;cell&gt;56.1&lt;/cell&gt;
        &lt;cell&gt;51.1&lt;/cell&gt;
        &lt;cell&gt;57.0&lt;/cell&gt;
        &lt;cell&gt;57.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MathVista_mini&lt;/cell&gt;
        &lt;cell&gt;63.8&lt;/cell&gt;
        &lt;cell&gt;71.4&lt;/cell&gt;
        &lt;cell&gt;74.8&lt;/cell&gt;
        &lt;cell&gt;75.9&lt;/cell&gt;
        &lt;cell&gt;77.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;MathVision_full&lt;/cell&gt;
        &lt;cell&gt;30.4&lt;/cell&gt;
        &lt;cell&gt;48.6&lt;/cell&gt;
        &lt;cell&gt;38.1&lt;/cell&gt;
        &lt;cell&gt;56.3&lt;/cell&gt;
        &lt;cell&gt;58.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Documentation Understanding&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;AI2D&lt;/cell&gt;
        &lt;cell&gt;84.6&lt;/cell&gt;
        &lt;cell&gt;86.7&lt;/cell&gt;
        &lt;cell&gt;88.7&lt;/cell&gt;
        &lt;cell&gt;85.2&lt;/cell&gt;
        &lt;cell&gt;86.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;ChartQA_test&lt;/cell&gt;
        &lt;cell&gt;86.7&lt;/cell&gt;
        &lt;cell&gt;64.6&lt;/cell&gt;
        &lt;cell&gt;89.5&lt;/cell&gt;
        &lt;cell&gt;86.8&lt;/cell&gt;
        &lt;cell&gt;87.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Counting&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;CountBench&lt;/cell&gt;
        &lt;cell&gt;87.9&lt;/cell&gt;
        &lt;cell&gt;91.2&lt;/cell&gt;
        &lt;cell&gt;93.6&lt;/cell&gt;
        &lt;cell&gt;90.0&lt;/cell&gt;
        &lt;cell&gt;90.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Video Understanding&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;Video-MME&lt;/cell&gt;
        &lt;cell&gt;71.9&lt;/cell&gt;
        &lt;cell&gt;72.4&lt;/cell&gt;
        &lt;cell&gt;73.3&lt;/cell&gt;
        &lt;cell&gt;70.5&lt;/cell&gt;
        &lt;cell&gt;71.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;LVBench&lt;/cell&gt;
        &lt;cell&gt;30.8&lt;/cell&gt;
        &lt;cell&gt;57.9&lt;/cell&gt;
        &lt;cell&gt;47.3&lt;/cell&gt;
        &lt;cell&gt;50.2&lt;/cell&gt;
        &lt;cell&gt;51.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;MLVU&lt;/cell&gt;
        &lt;cell&gt;64.6&lt;/cell&gt;
        &lt;cell&gt;71.0&lt;/cell&gt;
        &lt;cell&gt;74.6&lt;/cell&gt;
        &lt;cell&gt;75.2&lt;/cell&gt;
        &lt;cell&gt;75.5&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Datasets&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-flash-thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;InternVL-3.5-241B-A28B&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Thinking&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;General Visual Question Answering&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MMStar&lt;/cell&gt;
        &lt;cell&gt;75.5&lt;/cell&gt;
        &lt;cell&gt;77.9&lt;/cell&gt;
        &lt;cell&gt;74.9&lt;/cell&gt;
        &lt;cell&gt;75.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;HallusionBench&lt;/cell&gt;
        &lt;cell&gt;61.1&lt;/cell&gt;
        &lt;cell&gt;57.3&lt;/cell&gt;
        &lt;cell&gt;62.8&lt;/cell&gt;
        &lt;cell&gt;63.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MM-MT-Bench&lt;/cell&gt;
        &lt;cell&gt;7.8&lt;/cell&gt;
        &lt;cell&gt;–&lt;/cell&gt;
        &lt;cell&gt;8.0&lt;/cell&gt;
        &lt;cell&gt;8.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Math &amp;amp; STEM&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MMMU_val&lt;/cell&gt;
        &lt;cell&gt;76.9&lt;/cell&gt;
        &lt;cell&gt;77.7&lt;/cell&gt;
        &lt;cell&gt;75.6&lt;/cell&gt;
        &lt;cell&gt;75.0&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MMMU_pro&lt;/cell&gt;
        &lt;cell&gt;65.8&lt;/cell&gt;
        &lt;cell&gt;–&lt;/cell&gt;
        &lt;cell&gt;60.5&lt;/cell&gt;
        &lt;cell&gt;60.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MathVista_mini&lt;/cell&gt;
        &lt;cell&gt;77.6&lt;/cell&gt;
        &lt;cell&gt;82.7&lt;/cell&gt;
        &lt;cell&gt;80.0&lt;/cell&gt;
        &lt;cell&gt;81.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;MathVision_full&lt;/cell&gt;
        &lt;cell&gt;62.3&lt;/cell&gt;
        &lt;cell&gt;63.9&lt;/cell&gt;
        &lt;cell&gt;62.9&lt;/cell&gt;
        &lt;cell&gt;63.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Documentation Understanding&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;AI2D_test&lt;/cell&gt;
        &lt;cell&gt;88.6&lt;/cell&gt;
        &lt;cell&gt;87.3&lt;/cell&gt;
        &lt;cell&gt;86.1&lt;/cell&gt;
        &lt;cell&gt;86.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;ChartQA_test&lt;/cell&gt;
        &lt;cell&gt;–&lt;/cell&gt;
        &lt;cell&gt;88.0&lt;/cell&gt;
        &lt;cell&gt;89.5&lt;/cell&gt;
        &lt;cell&gt;89.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Counting&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;CountBench&lt;/cell&gt;
        &lt;cell&gt;88.6&lt;/cell&gt;
        &lt;cell&gt;–&lt;/cell&gt;
        &lt;cell&gt;88.6&lt;/cell&gt;
        &lt;cell&gt;92.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Video Understanding&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;Video-MME&lt;/cell&gt;
        &lt;cell&gt;79.6&lt;/cell&gt;
        &lt;cell&gt;72.9&lt;/cell&gt;
        &lt;cell&gt;69.7&lt;/cell&gt;
        &lt;cell&gt;69.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;LVBench&lt;/cell&gt;
        &lt;cell&gt;64.5&lt;/cell&gt;
        &lt;cell&gt;–&lt;/cell&gt;
        &lt;cell&gt;49.0&lt;/cell&gt;
        &lt;cell&gt;49.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;MLVU&lt;/cell&gt;
        &lt;cell&gt;82.1&lt;/cell&gt;
        &lt;cell&gt;78.2&lt;/cell&gt;
        &lt;cell&gt;72.9&lt;/cell&gt;
        &lt;cell&gt;73.9&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;AudioVisual -&amp;gt; Text&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Datasets&lt;/cell&gt;
        &lt;cell role="head"&gt;Previous Open-source SoTA&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Flash&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen2.5-Omni&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Instruct&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Instruct&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;WorldSense&lt;/cell&gt;
        &lt;cell&gt;47.1&lt;/cell&gt;
        &lt;cell&gt;50.9&lt;/cell&gt;
        &lt;cell&gt;45.4&lt;/cell&gt;
        &lt;cell&gt;54.0&lt;/cell&gt;
        &lt;cell&gt;54.1&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Datasets&lt;/cell&gt;
        &lt;cell role="head"&gt;Previous Open-source SoTA&lt;/cell&gt;
        &lt;cell role="head"&gt;Gemini-2.5-Flash-Thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B-Thinking&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-Flash-Thinking&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;DailyOmni&lt;/cell&gt;
        &lt;cell&gt;69.8&lt;/cell&gt;
        &lt;cell&gt;72.7&lt;/cell&gt;
        &lt;cell&gt;75.8&lt;/cell&gt;
        &lt;cell&gt;76.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;VideoHolmes&lt;/cell&gt;
        &lt;cell&gt;55.6&lt;/cell&gt;
        &lt;cell&gt;49.5&lt;/cell&gt;
        &lt;cell&gt;57.3&lt;/cell&gt;
        &lt;cell&gt;57.3&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;Zero-shot Speech Generation&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Datasets&lt;/cell&gt;
        &lt;cell role="head"&gt;Model&lt;/cell&gt;
        &lt;cell role="head"&gt;Performance&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Content Consistency&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;SEED&lt;p&gt;test-zh | test-en&lt;/p&gt;&lt;/cell&gt;
        &lt;cell&gt;Seed-TTSICL&lt;/cell&gt;
        &lt;cell&gt;1.11 | 2.24&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Seed-TTSRL&lt;/cell&gt;
        &lt;cell&gt;1.00 | 1.94&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;MaskGCT&lt;/cell&gt;
        &lt;cell&gt;2.27 | 2.62&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;E2 TTS&lt;/cell&gt;
        &lt;cell&gt;1.97 | 2.19&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;F5-TTS&lt;/cell&gt;
        &lt;cell&gt;1.56 | 1.83&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Spark TTS&lt;/cell&gt;
        &lt;cell&gt;1.20 | 1.98&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;CosyVoice 2&lt;/cell&gt;
        &lt;cell&gt;1.45 | 2.57&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;CosyVoice 3&lt;/cell&gt;
        &lt;cell&gt;0.71 | 1.45&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Qwen2.5-Omni-7B&lt;/cell&gt;
        &lt;cell&gt;1.42 | 2.33&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B&lt;/cell&gt;
        &lt;cell&gt;1.07 | 1.39&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;Multilingual Speech Generation&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="7"&gt;
        &lt;cell role="head"&gt;Language&lt;/cell&gt;
        &lt;cell role="head"&gt;Content Consistency&lt;/cell&gt;
        &lt;cell role="head"&gt;Speaker Similarity&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B&lt;/cell&gt;
        &lt;cell&gt;MiniMax&lt;/cell&gt;
        &lt;cell&gt;ElevenLabs&lt;/cell&gt;
        &lt;cell&gt;Qwen3-Omni-30B-A3B&lt;/cell&gt;
        &lt;cell&gt;MiniMax&lt;/cell&gt;
        &lt;cell&gt;ElevenLabs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Chinese&lt;/cell&gt;
        &lt;cell&gt;0.716&lt;/cell&gt;
        &lt;cell&gt;2.252&lt;/cell&gt;
        &lt;cell&gt;16.026&lt;/cell&gt;
        &lt;cell&gt;0.772&lt;/cell&gt;
        &lt;cell&gt;0.780&lt;/cell&gt;
        &lt;cell&gt;0.677&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;English&lt;/cell&gt;
        &lt;cell&gt;1.069&lt;/cell&gt;
        &lt;cell&gt;2.164&lt;/cell&gt;
        &lt;cell&gt;2.339&lt;/cell&gt;
        &lt;cell&gt;0.773&lt;/cell&gt;
        &lt;cell&gt;0.756&lt;/cell&gt;
        &lt;cell&gt;0.613&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;German&lt;/cell&gt;
        &lt;cell&gt;0.777&lt;/cell&gt;
        &lt;cell&gt;1.906&lt;/cell&gt;
        &lt;cell&gt;0.572&lt;/cell&gt;
        &lt;cell&gt;0.738&lt;/cell&gt;
        &lt;cell&gt;0.733&lt;/cell&gt;
        &lt;cell&gt;0.614&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Italian&lt;/cell&gt;
        &lt;cell&gt;1.067&lt;/cell&gt;
        &lt;cell&gt;1.543&lt;/cell&gt;
        &lt;cell&gt;1.743&lt;/cell&gt;
        &lt;cell&gt;0.742&lt;/cell&gt;
        &lt;cell&gt;0.699&lt;/cell&gt;
        &lt;cell&gt;0.579&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Portuguese&lt;/cell&gt;
        &lt;cell&gt;1.872&lt;/cell&gt;
        &lt;cell&gt;1.877&lt;/cell&gt;
        &lt;cell&gt;1.331&lt;/cell&gt;
        &lt;cell&gt;0.770&lt;/cell&gt;
        &lt;cell&gt;0.805&lt;/cell&gt;
        &lt;cell&gt;0.711&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Spanish&lt;/cell&gt;
        &lt;cell&gt;1.765&lt;/cell&gt;
        &lt;cell&gt;1.029&lt;/cell&gt;
        &lt;cell&gt;1.084&lt;/cell&gt;
        &lt;cell&gt;0.744&lt;/cell&gt;
        &lt;cell&gt;0.762&lt;/cell&gt;
        &lt;cell&gt;0.615&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Japanese&lt;/cell&gt;
        &lt;cell&gt;3.631&lt;/cell&gt;
        &lt;cell&gt;3.519&lt;/cell&gt;
        &lt;cell&gt;10.646&lt;/cell&gt;
        &lt;cell&gt;0.763&lt;/cell&gt;
        &lt;cell&gt;0.776&lt;/cell&gt;
        &lt;cell&gt;0.738&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;Korean&lt;/cell&gt;
        &lt;cell&gt;1.670&lt;/cell&gt;
        &lt;cell&gt;1.747&lt;/cell&gt;
        &lt;cell&gt;1.865&lt;/cell&gt;
        &lt;cell&gt;0.778&lt;/cell&gt;
        &lt;cell&gt;0.776&lt;/cell&gt;
        &lt;cell&gt;0.700&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="7"&gt;
        &lt;cell&gt;French&lt;/cell&gt;
        &lt;cell&gt;2.505&lt;/cell&gt;
        &lt;cell&gt;4.099&lt;/cell&gt;
        &lt;cell&gt;5.216&lt;/cell&gt;
        &lt;cell&gt;0.689&lt;/cell&gt;
        &lt;cell&gt;0.628&lt;/cell&gt;
        &lt;cell&gt;0.535&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Russian&lt;/cell&gt;
        &lt;cell&gt;3.986&lt;/cell&gt;
        &lt;cell&gt;4.281&lt;/cell&gt;
        &lt;cell&gt;3.878&lt;/cell&gt;
        &lt;cell&gt;0.759&lt;/cell&gt;
        &lt;cell&gt;0.761&lt;/cell&gt;
        &lt;cell&gt;0.676&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head&gt;Cross-Lingual Speech Generation&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Language&lt;/cell&gt;
        &lt;cell role="head"&gt;Qwen3-Omni-30B-A3B&lt;/cell&gt;
        &lt;cell role="head"&gt;CosyVoice3&lt;/cell&gt;
        &lt;cell role="head"&gt;CosyVoice2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;en-to-zh&lt;/cell&gt;
        &lt;cell&gt;5.37&lt;/cell&gt;
        &lt;cell&gt;5.09&lt;/cell&gt;
        &lt;cell&gt;13.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;ja-to-zh&lt;/cell&gt;
        &lt;cell&gt;3.32&lt;/cell&gt;
        &lt;cell&gt;3.05&lt;/cell&gt;
        &lt;cell&gt;48.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;ko-to-zh&lt;/cell&gt;
        &lt;cell&gt;0.99&lt;/cell&gt;
        &lt;cell&gt;1.06&lt;/cell&gt;
        &lt;cell&gt;7.70&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;zh-to-en&lt;/cell&gt;
        &lt;cell&gt;2.76&lt;/cell&gt;
        &lt;cell&gt;2.98&lt;/cell&gt;
        &lt;cell&gt;6.47&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;ja-to-en&lt;/cell&gt;
        &lt;cell&gt;3.31&lt;/cell&gt;
        &lt;cell&gt;4.20&lt;/cell&gt;
        &lt;cell&gt;17.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;ko-to-en&lt;/cell&gt;
        &lt;cell&gt;3.34&lt;/cell&gt;
        &lt;cell&gt;4.19&lt;/cell&gt;
        &lt;cell&gt;11.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;zh-to-ja&lt;/cell&gt;
        &lt;cell&gt;8.29&lt;/cell&gt;
        &lt;cell&gt;7.08&lt;/cell&gt;
        &lt;cell&gt;13.1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;en-to-ja&lt;/cell&gt;
        &lt;cell&gt;7.53&lt;/cell&gt;
        &lt;cell&gt;6.80&lt;/cell&gt;
        &lt;cell&gt;14.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;ko-to-ja&lt;/cell&gt;
        &lt;cell&gt;4.24&lt;/cell&gt;
        &lt;cell&gt;3.93&lt;/cell&gt;
        &lt;cell&gt;5.86&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;zh-to-ko&lt;/cell&gt;
        &lt;cell&gt;5.13&lt;/cell&gt;
        &lt;cell&gt;14.4&lt;/cell&gt;
        &lt;cell&gt;24.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;en-to-ko&lt;/cell&gt;
        &lt;cell&gt;4.96&lt;/cell&gt;
        &lt;cell&gt;5.87&lt;/cell&gt;
        &lt;cell&gt;21.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;ja-to-ko&lt;/cell&gt;
        &lt;cell&gt;6.23&lt;/cell&gt;
        &lt;cell&gt;7.92&lt;/cell&gt;
        &lt;cell&gt;21.5&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Decoding Strategy: For the Qwen3-Omni series across all evaluation benchmarks, &lt;code&gt;Instruct&lt;/code&gt;models use greedy decoding during generation without sampling. For&lt;code&gt;Thinking&lt;/code&gt;models, the decoding parameters should be taken from the&lt;code&gt;generation_config.json&lt;/code&gt;file in the checkpoint.&lt;/item&gt;
      &lt;item&gt;Benchmark-Specific Formatting: For the majority of evaluation benchmarks, they come with their own ChatML formatting to embed the question or prompt. It should be noted that all video data are set to &lt;code&gt;fps=2&lt;/code&gt;during evaluation.&lt;/item&gt;
      &lt;item&gt;Default Prompts: For tasks in certain benchmarks that do not include a prompt, we use the following prompt settings:&lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Task Type&lt;/cell&gt;
        &lt;cell role="head"&gt;Prompt&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Auto Speech Recognition (ASR) for Chinese&lt;/cell&gt;
        &lt;cell&gt;请将这段中文语音转换为纯文本。&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Auto Speech Recognition (ASR) for Other languages&lt;/cell&gt;
        &lt;cell&gt;Transcribe the audio into text.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Speech-to-Text Translation (S2TT)&lt;/cell&gt;
        &lt;cell&gt;Listen to the provided &amp;lt;source_language&amp;gt; speech and produce a translation in &amp;lt;target_language&amp;gt; text.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Song Lyrics Recognition&lt;/cell&gt;
        &lt;cell&gt;Transcribe the song lyrics into text without any punctuation, separate lines with line breaks, and output only the lyrics without additional explanations.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;System Prompt: No &lt;code&gt;system prompt&lt;/code&gt;should be set for any evaluation benchmark.&lt;/item&gt;
      &lt;item&gt;Input Sequence: The question or prompt should be input as user text. Unless otherwise specified by the benchmark, the text should come after multimodal data in the sequence. For example:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;messages = [
    {
        "role": "user",
        "content": [
            {"type": "audio", "audio": "/path/to/audio.wav"},
            {"type": "image", "image": "/path/to/image.png"},
            {"type": "video", "video": "/path/to/video.mp4"},
            {"type": "text", "text": "Describe the audio, image and video."},
        ],
    },
]&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/QwenLM/Qwen3-Omni"/><published>2025-09-22T17:50:21+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45337400</id><title>Show HN: Python Audio Transcription: Convert Speech to Text Locally</title><updated>2025-09-23T03:44:11.931342+00:00</updated><content>&lt;doc fingerprint="840a859b39aa1292"&gt;
  &lt;main&gt;
    &lt;p&gt;Last week, I faced a dilemma that many researchers, journalists, and content creators know all too well: I had hours of recordings that needed to be transcribed. I had serious privacy concerns about uploading sensitive content to commercial transcription services and their third-party servers.&lt;/p&gt;
    &lt;p&gt;Instead of risking it, I built a Python-based transcription system using OpenAI’s Whisper model. The result? All my audio files were transcribed in under 10 minutes with 96% accuracy—completely free and processed locally on my laptop.&lt;/p&gt;
    &lt;p&gt;In this post, I will show you how you can build a simple script for processing any audio data without recurring costs or privacy compromises.&lt;/p&gt;
    &lt;head rend="h2"&gt;Essential Setup Requirements&lt;/head&gt;
    &lt;head rend="h3"&gt;1. FFmpeg Installation (Critical First Step)&lt;/head&gt;
    &lt;p&gt;FFmpeg handles audio processing and is required for all transcription methods. This is the #1 cause of setup failures.&lt;/p&gt;
    &lt;head rend="h4"&gt;⚠️ Setup Priority&lt;/head&gt;
    &lt;p&gt;Windows:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Download from ffmpeg.org/download.html&lt;/item&gt;
      &lt;item&gt;Extract to &lt;code&gt;C:\ffmpeg&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Add &lt;code&gt;C:\ffmpeg\bin&lt;/code&gt;to your PATH environment variable&lt;/item&gt;
      &lt;item&gt;Restart your terminal&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;macOS:&lt;/p&gt;
    &lt;code&gt;# Using Homebrew (recommended)
brew install ffmpeg&lt;/code&gt;
    &lt;p&gt;Linux (Ubuntu/Debian):&lt;/p&gt;
    &lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install ffmpeg&lt;/code&gt;
    &lt;p&gt;Verify Installation:&lt;/p&gt;
    &lt;code&gt;ffmpeg -version&lt;/code&gt;
    &lt;p&gt;You should see version information. If you get “command not found,” FFmpeg isn’t properly installed.&lt;/p&gt;
    &lt;head rend="h3"&gt;2. Python Environment Setup&lt;/head&gt;
    &lt;head rend="h4"&gt;🔧 Virtual Environment Benefits&lt;/head&gt;
    &lt;code&gt;# Create isolated environment
python -m venv whisper-env
cd whisper-env

# Activate environment
# Windows:
Scripts\activate
# macOS/Linux:
source bin/activate

# Install required packages
pip install openai-whisper&lt;/code&gt;
    &lt;head rend="h2"&gt;Method 1: OpenAI Whisper (Recommended)&lt;/head&gt;
    &lt;p&gt;Whisper is OpenAI’s state-of-the-art speech recognition model, trained on 680,000 hours of multilingual audio. It’s specifically designed for robust, real-world audio transcription and handles various accents, background noise, and audio quality issues remarkably well.&lt;/p&gt;
    &lt;head rend="h3"&gt;Choosing the Right Whisper Model&lt;/head&gt;
    &lt;head rend="h4"&gt;🎯 Model Selection Guide&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Model&lt;/cell&gt;
        &lt;cell role="head"&gt;Size&lt;/cell&gt;
        &lt;cell role="head"&gt;RAM Required&lt;/cell&gt;
        &lt;cell role="head"&gt;Speed&lt;/cell&gt;
        &lt;cell role="head"&gt;Accuracy&lt;/cell&gt;
        &lt;cell role="head"&gt;Best Use Case&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;tiny&lt;/cell&gt;
        &lt;cell&gt;39 MB&lt;/cell&gt;
        &lt;cell&gt;390 MB&lt;/cell&gt;
        &lt;cell&gt;32x realtime&lt;/cell&gt;
        &lt;cell&gt;89%&lt;/cell&gt;
        &lt;cell&gt;Quick testing, real-time applications&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;base&lt;/cell&gt;
        &lt;cell&gt;74 MB&lt;/cell&gt;
        &lt;cell&gt;740 MB&lt;/cell&gt;
        &lt;cell&gt;16x realtime&lt;/cell&gt;
        &lt;cell&gt;94%&lt;/cell&gt;
        &lt;cell&gt;General use (recommended)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;small&lt;/cell&gt;
        &lt;cell&gt;244 MB&lt;/cell&gt;
        &lt;cell&gt;2.4 GB&lt;/cell&gt;
        &lt;cell&gt;6x realtime&lt;/cell&gt;
        &lt;cell&gt;96%&lt;/cell&gt;
        &lt;cell&gt;High-quality transcription needs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;medium&lt;/cell&gt;
        &lt;cell&gt;769 MB&lt;/cell&gt;
        &lt;cell&gt;5 GB&lt;/cell&gt;
        &lt;cell&gt;2x realtime&lt;/cell&gt;
        &lt;cell&gt;97%&lt;/cell&gt;
        &lt;cell&gt;Professional work, critical accuracy&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;large&lt;/cell&gt;
        &lt;cell&gt;1.5 GB&lt;/cell&gt;
        &lt;cell&gt;10 GB&lt;/cell&gt;
        &lt;cell&gt;1x realtime&lt;/cell&gt;
        &lt;cell&gt;98%&lt;/cell&gt;
        &lt;cell&gt;Maximum accuracy, research purposes&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h3"&gt;Basic Whisper Implementation&lt;/head&gt;
    &lt;p&gt;Here’s a clean, production-ready implementation:&lt;/p&gt;
    &lt;code&gt;import whisper
import os
from pathlib import Path
import time

class AudioTranscriber:
    def __init__(self, model_size="base"):
        """Initialize transcriber with specified Whisper model"""
        print(f"Loading Whisper {model_size} model...")
        self.model = whisper.load_model(model_size)
        print("Model loaded successfully!")
    
    def transcribe_file(self, audio_path, language=None):
        """
        Transcribe a single audio file
        
        Args:
            audio_path: Path to audio file
            language: Language code ('en', 'es', 'fr', etc.) or None for auto-detect
        """
        if not os.path.exists(audio_path):
            raise FileNotFoundError(f"Audio file not found: {audio_path}")
        
        print(f"Transcribing: {Path(audio_path).name}")
        
        start_time = time.time()
        
        # Transcribe audio
        options = {"language": language} if language else {}
        result = self.model.transcribe(audio_path, **options)
        
        processing_time = time.time() - start_time
        
        print(f"✓ Completed in {processing_time:.1f} seconds")
        print(f"✓ Detected language: {result['language']}")
        
        return {
            'text': result['text'].strip(),
            'language': result['language'],
            'segments': result.get('segments', []),
            'processing_time': processing_time
        }
    
    def save_transcription(self, result, output_path):
        """Save transcription to text file"""
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write("=== Transcription Results ===\n")
            f.write(f"Language: {result['language']}\n")
            f.write(f"Processing Time: {result['processing_time']:.1f} seconds\n")
            f.write("=" * 40 + "\n\n")
            f.write(result['text'])
        
        print(f"✓ Transcription saved to: {output_path}")

# Usage example
def transcribe_audio_file(audio_path, model_size="base", language=None):
    """Simple function to transcribe an audio file"""
    
    transcriber = AudioTranscriber(model_size=model_size)
    result = transcriber.transcribe_file(audio_path, language=language)
    
    # Save transcription
    audio_name = Path(audio_path).stem
    output_path = f"{audio_name}_transcript.txt"
    transcriber.save_transcription(result, output_path)
    
    return result

# Example usage
if __name__ == "__main__":
    # Transcribe a file
    audio_file = "interview.wav"  # Replace with your audio file
    result = transcribe_audio_file(audio_file, model_size="base", language="en")
    
    print(f"\nTranscription preview:")
    print(result['text'][:200] + "..." if len(result['text']) &amp;gt; 200 else result['text'])&lt;/code&gt;
    &lt;head rend="h4"&gt;🎵 Supported Audio Formats&lt;/head&gt;
    &lt;head rend="h3"&gt;Batch Processing Multiple Files&lt;/head&gt;
    &lt;p&gt;For processing multiple audio files efficiently:&lt;/p&gt;
    &lt;code&gt;def batch_transcribe(audio_files, output_dir="transcripts", model_size="base"):
    """Transcribe multiple audio files"""
    
    os.makedirs(output_dir, exist_ok=True)
    transcriber = AudioTranscriber(model_size=model_size)
    
    results = []
    
    for i, audio_file in enumerate(audio_files, 1):
        print(f"\n--- Processing file {i}/{len(audio_files)} ---")
        
        try:
            result = transcriber.transcribe_file(audio_file)
            
            # Save individual transcription
            file_name = Path(audio_file).stem
            output_path = os.path.join(output_dir, f"{file_name}_transcript.txt")
            transcriber.save_transcription(result, output_path)
            
            results.append(result)
            
        except Exception as e:
            print(f"✗ Failed to process {audio_file}: {str(e)}")
            continue
    
    print(f"\n✓ Batch processing completed: {len(results)}/{len(audio_files)} files successful")
    return results

# Usage
audio_files = ["interview1.wav", "interview2.mp3", "lecture.m4a"]
batch_transcribe(audio_files, output_dir="my_transcripts")&lt;/code&gt;
    &lt;head rend="h3"&gt;Creating Subtitle Files (SRT Format)&lt;/head&gt;
    &lt;p&gt;Generate subtitle files for videos:&lt;/p&gt;
    &lt;code&gt;def create_srt_subtitles(audio_path, output_path=None):
    """Create SRT subtitle file from audio"""
    
    transcriber = AudioTranscriber(model_size="base")
    result = transcriber.transcribe_file(audio_path)
    
    if output_path is None:
        output_path = Path(audio_path).stem + ".srt"
    
    with open(output_path, 'w', encoding='utf-8') as f:
        for i, segment in enumerate(result['segments'], 1):
            start_time = format_timestamp(segment['start'])
            end_time = format_timestamp(segment['end'])
            
            f.write(f"{i}\n")
            f.write(f"{start_time} --&amp;gt; {end_time}\n")
            f.write(f"{segment['text'].strip()}\n\n")
    
    print(f"✓ SRT subtitles saved to: {output_path}")

def format_timestamp(seconds):
    """Convert seconds to SRT timestamp format"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    millisecs = int((seconds % 1) * 1000)
    return f"{hours:02d}:{minutes:02d}:{secs:02d},{millisecs:03d}"

# Usage
create_srt_subtitles("presentation.mp4")&lt;/code&gt;
    &lt;head rend="h2"&gt;Method 2: Alternative with SpeechRecognition Library&lt;/head&gt;
    &lt;p&gt;For scenarios requiring different recognition engines or more control over audio preprocessing:&lt;/p&gt;
    &lt;code&gt;import speech_recognition as sr
from pydub import AudioSegment
import tempfile
import os

class FlexibleTranscriber:
    def __init__(self, engine="google"):
        """Initialize with specified recognition engine"""
        self.recognizer = sr.Recognizer()
        self.engine = engine
        
        # Optimize settings
        self.recognizer.energy_threshold = 300
        self.recognizer.dynamic_energy_threshold = True
        
    def preprocess_audio(self, audio_path):
        """Optimize audio for better recognition"""
        audio = AudioSegment.from_file(audio_path)
        
        # Convert to mono and normalize
        if audio.channels &amp;gt; 1:
            audio = audio.set_channels(1)
        
        audio = audio.set_frame_rate(16000)  # Standard sample rate
        audio = audio.normalize()  # Normalize volume
        
        # Export to temporary WAV file
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.wav')
        audio.export(temp_file.name, format="wav")
        
        return temp_file.name
    
    def transcribe_file(self, audio_path, language='en-US'):
        """Transcribe audio file using speech_recognition library"""
        
        # Preprocess audio
        processed_path = self.preprocess_audio(audio_path)
        
        try:
            with sr.AudioFile(processed_path) as source:
                # Adjust for ambient noise
                self.recognizer.adjust_for_ambient_noise(source, duration=1)
                audio_data = self.recognizer.record(source)
            
            # Perform recognition
            if self.engine == "google":
                text = self.recognizer.recognize_google(audio_data, language=language)
            elif self.engine == "sphinx":
                text = self.recognizer.recognize_sphinx(audio_data)
            
            return {
                'text': text,
                'success': True,
                'engine': self.engine
            }
            
        except sr.UnknownValueError:
            return {
                'text': "",
                'success': False,
                'error': "Could not understand audio"
            }
        except sr.RequestError as e:
            return {
                'text': "",
                'success': False,
                'error': f"Recognition service error: {str(e)}"
            }
        finally:
            # Clean up temporary file
            os.unlink(processed_path)

# Usage
transcriber = FlexibleTranscriber(engine="google")
result = transcriber.transcribe_file("audio.wav")

if result['success']:
    print(result['text'])
else:
    print(f"Transcription failed: {result['error']}")&lt;/code&gt;
    &lt;head rend="h4"&gt;🔄 Engine Comparison&lt;/head&gt;
    &lt;head rend="h2"&gt;Common Issues and Solutions&lt;/head&gt;
    &lt;head rend="h3"&gt;Issue 1: FFmpeg Not Found&lt;/head&gt;
    &lt;p&gt;Error: &lt;code&gt;[WinError 2] The system cannot find the file specified&lt;/code&gt;&lt;/p&gt;
    &lt;p&gt;Solution:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Verify FFmpeg installation: &lt;code&gt;ffmpeg -version&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Windows: Ensure FFmpeg is in your PATH environment variable&lt;/item&gt;
      &lt;item&gt;Restart your terminal/command prompt after PATH changes&lt;/item&gt;
      &lt;item&gt;Try reinstalling FFmpeg if the problem persists&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Issue 2: Out of Memory Errors&lt;/head&gt;
    &lt;p&gt;Error: CUDA out of memory or system RAM exhausted&lt;/p&gt;
    &lt;head rend="h4"&gt;⚡ Memory Management Tips&lt;/head&gt;
    &lt;p&gt;Solutions:&lt;/p&gt;
    &lt;code&gt;# Use smaller model
transcriber = AudioTranscriber(model_size="tiny")

# For very long audio files, process in chunks
def transcribe_long_audio(audio_path, chunk_duration=300):  # 5 minutes
    audio = AudioSegment.from_file(audio_path)
    chunks = [audio[i:i+chunk_duration*1000] for i in range(0, len(audio), chunk_duration*1000)]
    
    transcriptions = []
    for i, chunk in enumerate(chunks):
        chunk_path = f"temp_chunk_{i}.wav"
        chunk.export(chunk_path, format="wav")
        
        result = transcriber.transcribe_file(chunk_path)
        transcriptions.append(result['text'])
        
        os.remove(chunk_path)
    
    return ' '.join(transcriptions)&lt;/code&gt;
    &lt;head rend="h3"&gt;Issue 3: Poor Accuracy on Noisy Audio&lt;/head&gt;
    &lt;p&gt;Problem: Low accuracy on recordings with background noise or poor quality&lt;/p&gt;
    &lt;head rend="h4"&gt;🎤 Audio Quality Tips&lt;/head&gt;
    &lt;p&gt;Solutions:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Audio preprocessing:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;def enhance_audio(audio_path):
    """Basic audio enhancement"""
    audio = AudioSegment.from_file(audio_path)
    
    # Normalize volume
    audio = audio.normalize()
    
    # Apply high-pass filter to reduce low-frequency noise
    audio = audio.high_pass_filter(80)
    
    # Compress dynamic range
    audio = audio.compress_dynamic_range()
    
    return audio&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Specify language for better accuracy:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;result = transcriber.transcribe_file("audio.wav", language="en")&lt;/code&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Use higher-quality model:&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;# Upgrade from 'base' to 'small' for better accuracy
transcriber = AudioTranscriber(model_size="small")&lt;/code&gt;
    &lt;head rend="h2"&gt;Performance Benchmarks&lt;/head&gt;
    &lt;p&gt;Based on testing with various audio types on a modern laptop:&lt;/p&gt;
    &lt;p&gt;Whisper Model Performance (1-hour audio file):&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;tiny: 1.9 minutes processing, 89% accuracy&lt;/item&gt;
      &lt;item&gt;base: 3.8 minutes processing, 94% accuracy&lt;/item&gt;
      &lt;item&gt;small: 10 minutes processing, 96% accuracy&lt;/item&gt;
      &lt;item&gt;medium: 30 minutes processing, 97% accuracy&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Hardware Impact:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;CPU only: Use base model maximum for reasonable speeds&lt;/item&gt;
      &lt;item&gt;8GB RAM: Comfortable with small model&lt;/item&gt;
      &lt;item&gt;16GB+ RAM: Can handle medium/large models without issues&lt;/item&gt;
      &lt;item&gt;GPU acceleration: 3-5x speed improvement (requires CUDA setup)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;🚀 Optimization Strategy&lt;/head&gt;
    &lt;head rend="h2"&gt;Command-Line Usage&lt;/head&gt;
    &lt;p&gt;Create a simple command-line script for easy usage:&lt;/p&gt;
    &lt;code&gt;# transcribe.py
import sys
import argparse
from pathlib import Path

def main():
    parser = argparse.ArgumentParser(description='Transcribe audio files locally')
    parser.add_argument('audio_file', help='Path to audio file')
    parser.add_argument('--model', default='base', choices=['tiny', 'base', 'small', 'medium', 'large'])
    parser.add_argument('--language', help='Language code (e.g., en, es, fr)')
    parser.add_argument('--output', help='Output file path')
    
    args = parser.parse_args()
    
    # Transcribe
    result = transcribe_audio_file(
        args.audio_file, 
        model_size=args.model,
        language=args.language
    )
    
    # Save to custom output path if specified
    if args.output:
        with open(args.output, 'w', encoding='utf-8') as f:
            f.write(result['text'])
        print(f"Transcription saved to: {args.output}")

if __name__ == "__main__":
    main()&lt;/code&gt;
    &lt;p&gt;Usage examples:&lt;/p&gt;
    &lt;code&gt;# Basic transcription
python transcribe.py interview.wav

# Specify model and language
python transcribe.py lecture.mp3 --model small --language en

# Custom output file
python transcribe.py podcast.m4a --output transcript.txt&lt;/code&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;Local audio transcription with Python and Whisper offers a compelling alternative to commercial services. With a one-time setup, you get unlimited transcription capabilities, complete privacy, and often superior accuracy compared to cloud-based solutions.&lt;/p&gt;
    &lt;p&gt;Key advantages:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Zero ongoing costs after initial setup—no per-minute charges&lt;/item&gt;
      &lt;item&gt;Complete privacy—audio never leaves your machine&lt;/item&gt;
      &lt;item&gt;High accuracy—94-98% depending on model choice and audio quality&lt;/item&gt;
      &lt;item&gt;Fast processing—typically 4-16x real-time speed&lt;/item&gt;
      &lt;item&gt;Offline capability—works without internet connection&lt;/item&gt;
      &lt;item&gt;No usage limits—transcribe as much as you want&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Whether you’re a researcher transcribing interviews, a journalist working with sensitive sources, or a content creator processing podcasts, this local solution gives you the control and privacy that cloud services can’t match.&lt;/p&gt;
    &lt;p&gt;The setup might take 30 minutes, but you’ll save hours of time and potentially hundreds of dollars in transcription costs. Plus, you’ll have the peace of mind that comes with keeping your audio data completely under your control.&lt;/p&gt;
    &lt;head rend="h3"&gt;Stay up to date&lt;/head&gt;
    &lt;p&gt;Get notified when I publish something new, and unsubscribe at any time.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.pavlinbg.com/posts/python-speech-to-text-guide"/><published>2025-09-22T18:18:56+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45337433</id><title>Diffusion Beats Autoregressive in Data-Constrained Settings</title><updated>2025-09-23T03:44:11.041012+00:00</updated><content>&lt;doc fingerprint="b4173bd8031d52cb"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;TLDR:&lt;/p&gt;
      &lt;p&gt;If you are compute-constrained, use autoregressive models; if you are data-constrained, use diffusion models.&lt;/p&gt;
      &lt;p&gt;Motivation&lt;/p&gt;
      &lt;p&gt;Progress in AI over the past decade has largely been driven by scaling compute and data. The recipe from GPT-1 to GPT-5 has appeared straightforward: train a larger model on more data, and the result is a more capable system. &lt;/p&gt;
      &lt;p&gt;Yet a central question remains: will this recipe continue to hold from GPT-6 to GPT-N?&lt;/p&gt;
      &lt;p&gt;Many analysts and researchers believe the answer is no. For instance, Ilya Sutskever, in his NeurIPS 2024 Test-of-Time Award talk, remarked: “Compute is growing—better algorithms, better hardware, bigger clusters—but data is not growing. We have just one internet, the fossil fuel of AI.” &lt;/p&gt;
      &lt;p&gt;This concern is echoed by AI forecasters, who have analyzed compute and data growth more systematically and concluded that compute is outpacing data at an accelerating rate.&lt;/p&gt;
      &lt;p&gt;The above Figure, illustrates this tension by overlaying projections from EpochAI’s analysis. Their study extrapolates historical trends in compute, dataset usage, and internet-scale data availability. The forecast suggests that by around 2028, we will enter a data-constrained regime: far more compute will be available than there are training tokens to consume.&lt;/p&gt;
      &lt;p&gt;This paper addresses the challenge by asking: how can we trade off more compute for less data? Our central idea is to revisit the foundations of modern generative modeling and compare the two dominant paradigms for scaling AI.&lt;/p&gt;
      &lt;p&gt;Broadly, there have been two families of algorithms that shaped recent progress in AI:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Autoregressive models, popularized in 2019 in the text domain with the GPT-2 paper.&lt;/item&gt;
      &lt;/list&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Diffusion models, popularized in 2020 in the vision domain with the DDPM paper.&lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Both aim to maximize the joint likelihood, but they differ fundamentally in how they factorize this joint distribution. &lt;/p&gt;
      &lt;p&gt;The success of diffusion in vision and autoregression in language has sparked both excitement and confusion—especially as each community has begun experimenting with the other’s paradigm.&lt;/p&gt;
      &lt;p&gt;For example, the language community has explored diffusion on text: &lt;/p&gt;
      &lt;p&gt;D3PM introduced discrete diffusion via random masking, while Diffusion-LM applied continuous diffusion by projecting tokens to embeddings before adding Gaussian noise. Since then, numerous works have extended this line of research.&lt;/p&gt;
      &lt;p&gt;Conversely, the vision community has experimented with doing autoregressive modeling on images. Models such as PARTI and DALLE exemplify this approach with strong results.&lt;/p&gt;
      &lt;p&gt;This cross-pollination has led to even greater uncertainty in robotics, where both diffusion-based and autoregressive approaches are widely adopted. To illustrate this, OpenAI Deep Research has compiled a list of robotics works across both paradigms, highlighting the lack of consensus in the field.&lt;/p&gt;
      &lt;p&gt;This ambiguity raises a fundamental question: should we be training diffusion models or autoregressive models?&lt;/p&gt;
      &lt;p&gt;Quick Background:&lt;/p&gt;
      &lt;p&gt;Autoregressive language models:&lt;/p&gt;
      &lt;p&gt;They model data distribution in a left-to-right manner&lt;/p&gt;
      &lt;p&gt;Diffusion language models:&lt;/p&gt;
      &lt;p&gt;For a more detailed understanding, with cool animations, please refer to this video from Jia-Bin Huang – https://www.youtube.com/watch?v=8BTOoc0yDVA&lt;/p&gt;
      &lt;p&gt;Prior results with Diffusion Language models&lt;/p&gt;
      &lt;p&gt;Since 2021, diffusion language models have sparked significant interest, with many works focusing on improving their design and performance.&lt;/p&gt;
      &lt;p&gt;In the table above, we highlight representative results from a popular work.&lt;lb/&gt;The takeaways are as follows:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Discrete diffusion performs better than continuous diffusion on text.&lt;/item&gt;
        &lt;item&gt;Autoregressive models still achieve the strongest results overall.&lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Several works have also explored the scaling behavior of diffusion-based language models.&lt;/p&gt;
      &lt;p&gt;Nie et al report that discrete diffusion LLMs require roughly 16× more compute than autoregressive LLMs to match the same negative log-likelihood. Similar results have been observed in multimodal domains—for instance, UniDisc finds that discrete diffusion needs about 12× more compute than autoregression for comparable likelihoods.&lt;/p&gt;
      &lt;p&gt;However, these results conflate data and compute because they are measured in a single-epoch training regime. This raises an important ambiguity: do diffusion models truly require 16× more compute, or do they in fact require 16× more data?&lt;/p&gt;
      &lt;p&gt;In this work, we explicitly disentangle data and compute. Our goal is to study diffusion and autoregressive models specifically in data-constrained settings.&lt;/p&gt;
      &lt;p&gt;Our Motivation&lt;/p&gt;
      &lt;p&gt;To understand why diffusion may behave differently, let’s revisit its training objective.&lt;/p&gt;
      &lt;p&gt;In diffusion training, tokens are randomly masked and the model learns to recover them. Importantly, left-to-right masking is a special case within this framework.&lt;/p&gt;
      &lt;p&gt;Viewed this way, diffusion can be interpreted as a form of implicit data augmentation for autoregressive training. Instead of only learning from left-to-right sequences, the model also benefits from many alternative masking strategies.&lt;/p&gt;
      &lt;p&gt;And if diffusion is essentially data augmentation, then its benefits should be most pronounced when training is data-bottlenecked.&lt;/p&gt;
      &lt;p&gt;This perspective explains why prior works have reported weaker results for diffusion: they primarily evaluated in single-epoch settings, where data is abundant. In contrast, our study focuses on scenarios where data is limited and compute can be traded off more effectively.&lt;/p&gt;
      &lt;p&gt;Our Experiments&lt;/p&gt;
      &lt;p&gt;In this work, we train hundreds of models spanning multiple orders of magnitude in model size, data quantity, and number of training epochs to fit scaling laws for diffusion models in the data-constrained setting. We summarize some of our key findings below.&lt;/p&gt;
      &lt;p&gt;Finding #1:&lt;/p&gt;
      &lt;p&gt;Diffusion models outperform autoregressive models when trained with sufficient compute (i.e., more epochs &amp;amp; parameters). Across different unique data scales, we observe:&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;At low compute, Autoregressive models win.&lt;/item&gt;
      &lt;/list&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;After a certain amount of compute, performance matches—we call this the critical compute point.&lt;/item&gt;
      &lt;/list&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Beyond this, diffusion keeps improving, while Autoregressive plateaus or overfits. &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Each point in the figure shows a model trained to convergence. The x-axis shows the total training FLOPs of that point, and the y-axis shows the best validation loss achieved by that model family under that training compute budget.&lt;/p&gt;
      &lt;p&gt;Finding #2:&lt;/p&gt;
      &lt;p&gt;Autoregressive models begin to overfit much quickly, while diffusion shows no signs of overfitting even after 10x the number of epochs. In the above figure, we showed that increasing compute eventually favors diffusion. But compute can be scaled in two ways: (i) Increasing model size (ii) Increasing the number of epochs In the following plot, we separate these axes.&lt;/p&gt;
      &lt;p&gt;The colored star marks the 1-epoch point, where Autoregressive outperforms diffusion. The star (★) denotes the best loss achieved by each model.&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Autoregressive hits its best around the middle, then overfits.&lt;/item&gt;
      &lt;/list&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Diffusion keeps improving and reaches its best loss at the far right. &lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Not only does diffusion benefit from more training—it also achieves a better final loss than Autoregressive (3.51 vs. 3.71).&lt;/p&gt;
      &lt;p&gt;Finding #3:&lt;/p&gt;
      &lt;p&gt;Diffusion models are significantly more robust to data repetition than autoregressive (AR) models. &lt;/p&gt;
      &lt;p&gt;We show training curves of models trained with the same total compute, but different trade-offs between unique data and number of epochs. &lt;/p&gt;
      &lt;p&gt;An “epoch” here means reusing a smaller subset of data more times(e.g., 4 Ep is 4 epochs while using 25% unique data, 2 Ep is 2 epochs with 50% and so on).&lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;AR models begin to overfit as repetition increases—their validation loss worsens and significantly diverges at higher epoch counts.&lt;/item&gt;
      &lt;/list&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Diffusion models remain stable across all repetition levels, showing no signs of overfitting or diverging—even at 100 epochs.&lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;Finding #4:&lt;/p&gt;
      &lt;p&gt;Diffusion models exhibit a much higher half-life of data reuse (R_D*) —i.e., the number of epochs after which returns from repeating data begins to significantly diminish. &lt;/p&gt;
      &lt;p&gt;We adopt the data-constrained scaling framework introduced by Muennighoff et al. in their excellent NeurIPS paper to fit scaling laws for diffusion models. While Muennighoff et al. found R_D* ~ 15 for autoregressive models, we find a significantly higher value of R_D* ~ 500 for diffusion models—highlighting their ability to benefit from far more data repetition.&lt;/p&gt;
      &lt;p&gt;The above Figure studies the Decay rate of data value under repetition: left shows diffusion, middle AR, and right the average decay rate for both. &lt;/p&gt;
      &lt;p&gt;Points are empirical results (darker color = higher FLOPs, lighter color =&lt;lb/&gt;lower FLOPs; each line = fixed compute), we find that fitted curves (represented as lines) closely match the empirical points, indicating our scaling laws are representative. The decay rate of value for repeated data is lower for diffusion, reflecting its greater robustness to repeating. In this experiment 100% data fraction means training 1 epoch with 100% unique data, while 50% means 2 epoch epoch with only using 50% unique data and so on.&lt;/p&gt;
      &lt;p&gt;Finding #5:&lt;/p&gt;
      &lt;p&gt;Muennighoff et al. showed that repeating the dataset up to 4 epochs is nearly as effective as using fresh data for autoregressive models.&lt;/p&gt;
      &lt;p&gt; In contrast, we find that diffusion models can be trained on repeated data for up to 100 epochs, while having repeated data almost as effective as fresh data.&lt;/p&gt;
      &lt;p&gt;Finding #6:&lt;/p&gt;
      &lt;p&gt;The compute required for diffusion to outperform AR follows a predictable power law. Above we defined the critical compute threshold as the amount of FLOPs where diffusion matches AR performance for a given unique dataset size. &lt;/p&gt;
      &lt;p&gt;We find that we can derive a simple closed-form analytical expression for this threshold, this allows us to predict when diffusion will surpass AR given any unique data size. In the figure we show both the fitted curve and empirical critical threshold points, which align closely.&lt;/p&gt;
      &lt;p&gt;Finding #7:&lt;/p&gt;
      &lt;p&gt;The data efficiency of diffusion models translates to better downstream performance.&lt;/p&gt;
      &lt;p&gt; Lastly we evaluate the best-performing diffusion and AR models (trained under the same data budget) on a range of language understanding tasks. &lt;/p&gt;
      &lt;p&gt;Across most benchmarks, diffusion models outperform AR models, confirming that diffusion’s lower validation loss translates to better downstream performance.&lt;/p&gt;
      &lt;p&gt;Finding #8:&lt;/p&gt;
      &lt;p&gt;Exposure to different token orderings helps explain diffusion’s data efficiency. By adding explicit data augmentations to AR training, we find that diffusion model’s advantage arises from their exposure to a diverse set of token orderings. &lt;/p&gt;
      &lt;p&gt;As seen in the above Figure, increasing N consistently lowered validation loss and delayed overfitting. At N = 16, the 100-epoch validation loss of AR models approached that of diffusion, suggesting that diverse orderings are indeed a key driver of diffusion’s data efficiency. These results support our interpretation that diffusion models outperform AR models in low-data regimes because they are implicitly trained on a richer distribution of conditional prediction tasks. &lt;/p&gt;
      &lt;p&gt;Finally, this analysis suggests a natural continuum between the two paradigms: by controlling task diversity through masking or reordering—we could design hybrid models that interpolate between compute efficiency (AR-like) and data efficiency (diffusion-like).&lt;/p&gt;
      &lt;p&gt;For more experiments and details please refer to original paper –https://arxiv.org/abs/2507.15857&lt;/p&gt;
      &lt;p&gt;Conclusion&lt;/p&gt;
      &lt;p&gt;As the availability of high-quality data plateaus, improving data efficiency becomes essential for scaling deep learning. In this work, we show that masked diffusion models consistently outperform autoregressive (AR) models in data-constrained regimes — when training involves repeated passes over a limited dataset. We establish new scaling laws for diffusion models, revealing their ability to extract value from repeated data far beyond what AR models can achieve.&lt;/p&gt;
      &lt;p&gt; These results challenge the conventional belief that AR models are universally superior and highlight diffusion models as a compelling alternative when data—not compute—is the primary bottleneck. Looking ahead, efficient use of finite data may define the next frontier in scaling deep learning models. Although the studies have been performed in the context of language models, we believe these findings should apply across any kind of sequence modeling data, such as in robotics or healthcare. For practitioners, our takeaway is simple: if you are compute-constrained, use autoregressive models; if you are data-constrained, use diffusion models.&lt;/p&gt;
      &lt;p&gt;Bibtex:&lt;/p&gt;
      &lt;p&gt;
        &lt;code&gt;@article{prabhudesai2025diffusion,&lt;lb/&gt;title={Diffusion Beats Autoregressive in Data-Constrained Settings},&lt;lb/&gt;author={Prabhudesai, Mihir and Wu, Mengning and Zadeh, Amir and Fragkiadaki, Katerina and Pathak, Deepak},&lt;lb/&gt;journal={arXiv preprint arXiv:2507.15857},&lt;lb/&gt;year={2025}&lt;lb/&gt;}&lt;/code&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.ml.cmu.edu/2025/09/22/diffusion-beats-autoregressive-in-data-constrained-settings/"/><published>2025-09-22T18:21:29+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45340133</id><title>Paper2Agent: Stanford Reimagining Research Papers as Interactive AI Agents</title><updated>2025-09-23T03:44:10.788625+00:00</updated><content>&lt;doc fingerprint="f5bd3409d9b3a08a"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Computer Science &amp;gt; Artificial Intelligence&lt;/head&gt;&lt;p&gt; [Submitted on 8 Sep 2025]&lt;/p&gt;&lt;head rend="h1"&gt;Title:Paper2Agent: Reimagining Research Papers As Interactive and Reliable AI Agents&lt;/head&gt;View PDF HTML (experimental)&lt;quote&gt;Abstract:We introduce Paper2Agent, an automated framework that converts research papers into AI agents. Paper2Agent transforms research output from passive artifacts into active systems that can accelerate downstream use, adoption, and discovery. Conventional research papers require readers to invest substantial effort to understand and adapt a paper's code, data, and methods to their own work, creating barriers to dissemination and reuse. Paper2Agent addresses this challenge by automatically converting a paper into an AI agent that acts as a knowledgeable research assistant. It systematically analyzes the paper and the associated codebase using multiple agents to construct a Model Context Protocol (MCP) server, then iteratively generates and runs tests to refine and robustify the resulting MCP. These paper MCPs can then be flexibly connected to a chat agent (e.g. Claude Code) to carry out complex scientific queries through natural language while invoking tools and workflows from the original paper. We demonstrate Paper2Agent's effectiveness in creating reliable and capable paper agents through in-depth case studies. Paper2Agent created an agent that leverages AlphaGenome to interpret genomic variants and agents based on ScanPy and TISSUE to carry out single-cell and spatial transcriptomics analyses. We validate that these paper agents can reproduce the original paper's results and can correctly carry out novel user queries. By turning static papers into dynamic, interactive AI agents, Paper2Agent introduces a new paradigm for knowledge dissemination and a foundation for the collaborative ecosystem of AI co-scientists.&lt;/quote&gt;&lt;p&gt; Current browse context: &lt;/p&gt;&lt;p&gt;cs.AI&lt;/p&gt;&lt;head rend="h3"&gt;References &amp;amp; Citations&lt;/head&gt;&lt;p&gt; export BibTeX citation Loading... &lt;/p&gt;&lt;head rend="h1"&gt;Bibliographic and Citation Tools&lt;/head&gt;&lt;p&gt; Bibliographic Explorer (What is the Explorer?) &lt;/p&gt;&lt;p&gt; Connected Papers (What is Connected Papers?) &lt;/p&gt;&lt;p&gt; Litmaps (What is Litmaps?) &lt;/p&gt;&lt;p&gt; scite Smart Citations (What are Smart Citations?) &lt;/p&gt;&lt;head rend="h1"&gt;Code, Data and Media Associated with this Article&lt;/head&gt;&lt;p&gt; alphaXiv (What is alphaXiv?) &lt;/p&gt;&lt;p&gt; CatalyzeX Code Finder for Papers (What is CatalyzeX?) &lt;/p&gt;&lt;p&gt; DagsHub (What is DagsHub?) &lt;/p&gt;&lt;p&gt; Gotit.pub (What is GotitPub?) &lt;/p&gt;&lt;p&gt; Hugging Face (What is Huggingface?) &lt;/p&gt;&lt;p&gt; Papers with Code (What is Papers with Code?) &lt;/p&gt;&lt;p&gt; ScienceCast (What is ScienceCast?) &lt;/p&gt;&lt;head rend="h1"&gt;Demos&lt;/head&gt;&lt;head rend="h1"&gt;Recommenders and Search Tools&lt;/head&gt;&lt;p&gt; Influence Flower (What are Influence Flowers?) &lt;/p&gt;&lt;p&gt; CORE Recommender (What is CORE?) &lt;/p&gt;&lt;head rend="h1"&gt;arXivLabs: experimental projects with community collaborators&lt;/head&gt;&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;&lt;p&gt;Have an idea for a project that will add value for arXiv's community? Learn more about arXivLabs.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://arxiv.org/abs/2509.06917"/><published>2025-09-22T22:02:01+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45340192</id><title>Kevo app shutdown</title><updated>2025-09-23T03:44:10.457595+00:00</updated><content>&lt;doc fingerprint="922c7b946738aaf4"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;What does the November 14th, 2025 Kevo app shutdown mean to my Kevo door lock?&lt;/head&gt;
    &lt;p&gt;After more than a decade of service, as of November 14, 2025 the Kevo app and web portal will no longer be available.&lt;lb/&gt; ASSA ABLOY Americas Residential Inc. (“ASSA ABLOY”, “we” and “us”), which is the successor to the company that previously marketed Kwikset Kevo, Weiser Kevo and Baldwin Evolved smart door locks, will cease supporting your Kevo lock’s remote functionality.&lt;/p&gt;
    &lt;p&gt;Locks Affected (All Generations): Kevo, Kevo Convert, Kevo Plus, Baldwin Evolved&lt;/p&gt;
    &lt;p&gt;Brands Affected: Kwikset, Weiser, Baldwin&lt;/p&gt;
    &lt;p&gt;Impact&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Users can no longer open/close or manage their door lock via the mobile app or web portal.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Not Impacted&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Physical Key, users will be able to unlock or lock the deadbolt with the physical key&lt;/item&gt;
      &lt;item&gt;Key FOB, users will be able to unlock or lock the deadbolt with the Key FOB&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Required User Action&lt;/p&gt;
    &lt;p&gt;Prepare in advance for the Kevo app shutdown. Ensure that you have the physical key or key fob to unlock and lock the door moving forward or you can redeem the unique promotional offer that existing Kevo users received via e-mail and replace the Kevo deadbolt entirely.&lt;/p&gt;
    &lt;p&gt;Replacement Door Lock Discount&lt;/p&gt;
    &lt;p&gt;To help make this transition easier, we’re offering our steepest discounts ever on trusted smart lock replacements, available exclusively to Kevo users.&lt;/p&gt;
    &lt;p&gt;(United States Only)&lt;/p&gt;
    &lt;p&gt;Offers will be fulfilled by our partners at Level, a fellow ASSA ABLOY brand. Your orders will be securely processed and shipped through Level’s website.&lt;/p&gt;
    &lt;p&gt;Available options include:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;$80 off Kwikset Halo Keypad Wi-Fi Smart Lock&lt;/item&gt;
      &lt;item&gt;$130 off Level Lock+&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;How to Redeem&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Use the following link to visit&lt;/item&gt;
      &lt;item&gt;Choose the replacement deadbolt that is right for you&lt;/item&gt;
      &lt;item&gt;Enter your unique promotional code at checkout&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Your unique promotional code was sent to your registered Kevo e-mail address, notifying you of the Kevo app shutdown&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The above offer is final, and no other offers will ensue with respect to the loss of remote functionality of your Kevo door lock. This offer will expire December 14, 2025.&lt;lb/&gt; (Canada Only)&lt;lb/&gt; Orders will be securely processed and shipped through Weiser’s customer service team.&lt;lb/&gt; Available options include:&lt;lb/&gt; - $89 (CDN) off Weiser Halo Keypad Wi-Fi Smart Lock&lt;lb/&gt; How to Redeem&lt;lb/&gt; 1. Call our Weiser customer service team: 1-800-501-9471&lt;lb/&gt; 2. Ask the service team member about claiming your Kevo replacement offer&lt;lb/&gt; 3. Provide your unique promo code&lt;lb/&gt; o Your unique promotional code was sent to your registered Kevo e-mail address, notifying you of the Kevo app shutdown&lt;lb/&gt; These offers are made in connection with the Kevo app shutdown; and available through December 14, 2025—without further extension.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.kwikset.com/support/answers/what-does-the-kevo-app-shutdown-mean-to-my-kevo-door-lock"/><published>2025-09-22T22:07:07+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45340550</id><title>Federal judge lifts administration halt of offshore wind farm in New England</title><updated>2025-09-23T03:44:10.116495+00:00</updated><content>&lt;doc fingerprint="3e945d5050e504b3"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Federal judge lifts Trump administration’s halt of nearly complete offshore wind farm in New England&lt;/head&gt;
    &lt;head rend="h2"&gt;Federal judge lifts Trump administration’s halt of nearly complete offshore wind farm in New England&lt;/head&gt;
    &lt;p&gt;WASHINGTON (AP) — A federal judge ruled Monday that a nearly complete offshore wind project halted by the administration can resume, dealing President Donald Trump a setback in his ongoing effort to restrict the fledgling industry.&lt;/p&gt;
    &lt;p&gt;Work on the nearly completed Revolution Wind project for Rhode Island and Connecticut has been paused since Aug. 22 when the Bureau of Ocean Energy Management issued a stop-work order for what it said were national security concerns. The Interior Department agency did not specify those concerns at the time. Both the developer and the two states sued in federal courts.&lt;/p&gt;
    &lt;p&gt;Danish energy company Orsted and its joint venture partner Skyborn Renewables sought a preliminary injunction in U.S. District Court that would allow them to move forward with the project.&lt;/p&gt;
    &lt;p&gt;At a hearing Monday, Judge Royce Lamberth said he considered how Revolution Wind has relied on its federal approval, the delays are costing $2.3 million a day and if the project can’t meet deadlines, the entire enterprise could collapse. After December, the specialized ship needed to complete the project won’t be available until at least 2028, he said. More than 1,000 people have been working on the wind farm, which is 80% complete.&lt;/p&gt;
    &lt;p&gt;“There is no question in my mind of irreparable harm to the plaintiffs,” Lamberth said, as he granted the motion for the preliminary injunction. In his written ruling, he said Revolution Wind had “demonstrated likelihood of success on the merits” of its claim, adding that granting the injunction is in the public interest.&lt;/p&gt;
    &lt;p&gt;Interior Department spokeswoman Elizabeth Peace said the ruling means Revolution Wind “will be able to resume construction” while the Bureau of Ocean Energy Management “continues its investigation into possible impacts by the project to national security and prevention of other uses on the Outer Continental Shelf.”&lt;/p&gt;
    &lt;p&gt;The administration said in a court filing this month that while BOEM approved the wind farm, it stipulated that the developer continue to work with the Department of Defense to mitigate national security concerns. It said the Interior Department, to date, has not received any information that these concerns have been addressed.&lt;/p&gt;
    &lt;p&gt;Orsted said Monday that construction will resume as soon as possible, and it will continue to seek to work collaboratively with the administration.&lt;/p&gt;
    &lt;p&gt;Nancy Pyne of the Sierra Club said the court ruling “reaffirms that Donald Trump and his administration’s attacks on clean energy are not only reckless and harmful to our communities, but they are also illegal.” Trump is trying to “kneecap” renewable energy “in favor of dirty and expensive fossil fuels,” she said.&lt;/p&gt;
    &lt;p&gt;White House spokeswoman Anna Kelly said Trump was elected with a mandate to “restore our country’s energy dominance — which includes prioritizing the most effective and reliable tools to power our country. This will not be the final say on the matter.”&lt;/p&gt;
    &lt;p&gt;On the campaign trail, Trump vowed to end the offshore wind industry as soon as he returned to the White House. He wants to boost production of fossil fuels such as oil, natural gas and coal, which emit greenhouse gases that cause climate change, in order for the U.S. to have the lowest-cost energy and electricity of any nation in the world, he says.&lt;/p&gt;
    &lt;p&gt;His administration has stopped construction on major offshore wind farms, revoked wind energy permits and paused permitting, canceled plans to use large areas of federal waters for new offshore wind development and stopped $679 million in federal funding for a dozen offshore wind projects.&lt;/p&gt;
    &lt;p&gt;Last week, the administration moved to block a separate Massachusetts offshore wind farm. That was just days after the Interior Department asked a federal judge in Baltimore to cancel previous approval to build an offshore wind project in Maryland.&lt;/p&gt;
    &lt;p&gt;Revolution Wind is supposed to be Rhode Island’s and Connecticut’s first large offshore wind farm, capable of supplying power to more than 350,000 homes, about 2.5% of the region’s electricity needs.&lt;/p&gt;
    &lt;p&gt;Connecticut Attorney General William Tong and Rhode Island Attorney General Peter Neronha, who are both Democrats, called the judge’s ruling a major win for workers and families, who need the project to stay on track so it can start to drive down unaffordable energy bills.&lt;/p&gt;
    &lt;p&gt;Connecticut Rep. Joe Courtney, a Democrat, said a multibillion-dollar project that is 80% complete and was fully permitted with input by the Pentagon is not a national security problem. The Interior Department “should take the hint and let the thousands of construction workers finish the job,” he said.&lt;/p&gt;
    &lt;p&gt;Orsted began construction in 2024 about 15 miles (24 kilometers) south of the Rhode Island coast. It says in its complaint that about $5 billion has been spent or committed, and it expects more than $1 billion in costs if the project is canceled. Rhode Island is already home to one offshore wind farm, the five-turbine Block Island Wind Farm.&lt;/p&gt;
    &lt;p&gt;___&lt;/p&gt;
    &lt;p&gt;McDermott reported from Providence, Rhode Island. AP Writer Susan Haigh in Hartford, Connecticut, contributed to this report.&lt;/p&gt;
    &lt;p&gt;___&lt;/p&gt;
    &lt;p&gt;The Associated Press’ climate and environmental coverage receives financial support from multiple private foundations. AP is solely responsible for all content. Find AP’s standards for working with philanthropies, a list of supporters and funded coverage areas at AP.org.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://apnews.com/article/trump-renewable-energy-offshore-wind-revolution-wind-f1cbe85a829e3d5e5496f834bcb617d1"/><published>2025-09-22T22:45:54+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45340600</id><title>In Maine, prisoners are thriving in remote jobs</title><updated>2025-09-23T03:44:09.630596+00:00</updated><content>&lt;doc fingerprint="3620d016782416f9"&gt;
  &lt;main&gt;
    &lt;p&gt;People who are incarcerated are paid notoriously low wages for kitchen, laundry work and maintenance.&lt;/p&gt;
    &lt;p&gt;But the expanded use of laptops is creating other opportunities.&lt;/p&gt;
    &lt;p&gt;This is part two in a two-part series about remote work in Maine prisons. To read part one, click here.&lt;/p&gt;
    &lt;p&gt;Preston Thorpe is only 32, but he says he's already landed his dream job as a senior software engineer and bought a modest house with his six-figure salary. It was all accomplished by putting in long days from his cell at the Mountain View Correctional Center in Charleston.&lt;/p&gt;
    &lt;p&gt;"It's not normal to have 15-17 hours a day to really focus on something and learn something, like deeply," Thorpe says. "And fortunately tech is one of the few areas where they're not concerned with your college degree. They're really only concerned with your ability to write code."&lt;/p&gt;
    &lt;p&gt;A self-described "computer geek," Thorpe says he built his first computer at age 13. In high school he always expected he'd have a career in tech. But he also had a rebellious side. He got into trouble with drugs, using them and selling them. He says his parents kicked him out of the house and he ended up in prison for the first time at age 20.&lt;/p&gt;
    &lt;p&gt;"You know, I was worried and pretty hopeless that I had messed my life up so bad that it was no longer possible to have like a normal life and normal career," he says.&lt;/p&gt;
    &lt;p&gt;When you have nothing to lose, Thorpe says it's pretty easy to behave that way. And when you're out of prison with a criminal record, no money and an identity as a convict, he says the likelihood you're going to improve your life in any way is zero.&lt;/p&gt;
    &lt;p&gt;His own circumstances changed in 2019 when he got transferred from the New Hampshire prison system to Maine, where he discovered laptops with limited internet access were available for education. That's when he says he had an epiphany that he could change himself by pursuing his passion. And about two years ago, he became one of the first incarcerated people in the country to get hired for a remote job.&lt;/p&gt;
    &lt;p&gt;"Now I feel like my life has purpose," Thorpe says.&lt;/p&gt;
    &lt;p&gt;Glauber Costa says he first became aware of Thorpe through his contributions to an online public software project. Costa is the CEO of Turso, an international database company. He was impressed by Thorpe's work and had no idea he was incarcerated.&lt;/p&gt;
    &lt;p&gt;Once he found out, he thought it would be impossible to talk to Thorpe, let alone hire him.&lt;/p&gt;
    &lt;p&gt;"But then," Costa says, "it turns out that he can take video calls. And then by talking to him, it became very, very clear to me that if this is not a reformed person I don't know what is."&lt;/p&gt;
    &lt;p&gt;Costa says he was also surprised to learn that Thorpe was eligible for remote work while he was in prison. He hired him in June. He figured Thorpe might have trouble clearing the company's background check and he says he prepared himself for that. But since it only searches back seven years and since Thorpe has been in prison for more than a decade, "He is actually our cleanest background check," Costa says.&lt;/p&gt;
    &lt;p&gt;"He doesn't have a parking ticket."&lt;/p&gt;
    &lt;p&gt;Several dozen other prisoners are also working remote jobs. At the Maine Correctional Center in Windham, Darlene George is a certified recovery coach, a scholar and a teaching assistant who's serving a 40-year sentence for the murder of her husband.&lt;/p&gt;
    &lt;p&gt;"I became incarcerated in 2009 and I've been here 16 years," George says.&lt;/p&gt;
    &lt;p&gt;Unlike most women in prison, George had a college degree before she was incarcerated. She says she still tries to make the most of every opportunity she can. For the past two years, she's held a full-time remote job, first as a grant writer and now as a program coordinator, for a Maine-based health care company.&lt;/p&gt;
    &lt;p&gt;"The work, it just, it really makes you feel good," she says. "When I — when I put my head down at night I can say I'm giving something back."&lt;/p&gt;
    &lt;p&gt;George relishes her role as a decision maker and an advocate for clients' health care. She makes a competitive salary. And she says her boss and her co-workers are extremely supportive of her situation, and so are the other women at the Maine Correctional Center.&lt;/p&gt;
    &lt;p&gt;"Literally, I work from my room. There's a sign that I put out that lets people know I'm Zooming or in meetings," she says. "They try not to be noisy on the floor ... because they're like, 'Well, we want a job, too.'"&lt;/p&gt;
    &lt;p&gt;Mara Sanchez, the program director for the Alliance for Higher Education in Prison, says Maine's Department of Corrections was the first to have a remote work policy.&lt;/p&gt;
    &lt;p&gt;"Their implementation, willingness to try remote work for incarcerated students has really kind of set the bar for other states and been very inspiring to other states," she says.&lt;/p&gt;
    &lt;p&gt;Maine Corrections Commissioner Randall Liberty says remote work is an outgrowth of expanded educational opportunities in prison. There are 800 residents who now have access to the internet.&lt;/p&gt;
    &lt;p&gt;"We have technicians that are watching where they're going and what they're doing and we've had very few problems," Liberty says. "If it provides meaningful employment for them ... it also allows for a transition back into the community."&lt;/p&gt;
    &lt;p&gt;For example, Liberty says one resident worked as a paralegal for a law firm and continued with the job after he got out. Wages are garnished for child support, victim restitution and other fees. And for those who earn above a certain amount, 10% goes to the Department of Corrections for room and board. But residents can also save money or send it home. And Liberty says between educational programs and remote work, the prison environment is better for everyone.&lt;/p&gt;
    &lt;p&gt;"It's important that the officers work with residents that have hope and have meaning in their life," he says. "We had 87 assaults on staff in 2017. Last year, we had seven assaults on staff. So all of this work isn't just about the residents. It's about the community ... the officers that go to work everyday and don't feel like their life is at risk."&lt;/p&gt;
    &lt;p&gt;Liberty is optimistic that remote work can be expanded to other people in prison as the network of employers who understand their value grows.&lt;/p&gt;
    &lt;p&gt;"I think it can become the norm," he says. "This isn't a reckless attempt at finding work for individuals. This is a well-thought out plan with lessons learned and consequences. ... The last thing anybody wants is to lose their laptop."&lt;/p&gt;
    &lt;p&gt;Preston Thorpe would agree. He's hoping to be released sometime next year. He never expected to have started a successful career in prison or to have bought a house. But he says what he's most proud of is that after everything he's put his parents through, they are proud of him.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.mainepublic.org/2025-08-29/in-maine-prisoners-are-thriving-in-remote-jobs-and-other-states-are-taking-notice"/><published>2025-09-22T22:51:09+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45341324</id><title>US fall foliage map 2025</title><updated>2025-09-23T03:44:09.412091+00:00</updated><content>&lt;doc fingerprint="14d19396b861a2a5"&gt;
  &lt;main&gt;
    &lt;p&gt;Little to No Color&lt;/p&gt;
    &lt;p&gt;Low Color&lt;/p&gt;
    &lt;p&gt;Moderate Color&lt;/p&gt;
    &lt;p&gt;High Color&lt;/p&gt;
    &lt;p&gt;Peak Color&lt;/p&gt;
    &lt;p&gt;Past Peak Color&lt;/p&gt;
    &lt;p&gt;Color Report&lt;/p&gt;
    &lt;p&gt;Peak Timing&lt;/p&gt;
    &lt;p&gt;Reports&lt;/p&gt;
    &lt;p&gt;Download&lt;/p&gt;
    &lt;p&gt;Coming Fall 2025&lt;/p&gt;
    &lt;p&gt;Powered by Esri&lt;/p&gt;
    &lt;p&gt;Fall is nearly upon us, and we're once again helping fall foliage enthusiasts across the country find the best fall color! Use our map to explore the estimated timing of fall foliage throughout the United States, allowing you to plan trips with confidence this year. Check back regularly for updates based on the latest reports gathered from hundreds of sources throughout the country.&lt;/p&gt;
    &lt;p&gt;Two primary factors control the timing of fall foliage: daylight and temperature. This means that the further north and the higher in elevation a tree is, the earlier it will reveal it's colorful canopy. Photosynthesis grinds to a halt when the days grow short in the fall, and leaves no longer have a need for their excess stores of chlorophyll.&lt;/p&gt;
    &lt;p&gt;Over the course of a month or two, the concentrations of chlorophyll diminish, allowing less concentrated chemicals such as anthocyanin and carotenoids to dominate, turning the leaf red, yellow, or orange. The rate at which this change occurs varies amongst tree species, so it can be difficult to pinpoint a single peak in fall foliage.&lt;/p&gt;
    &lt;p&gt;Nevertheless, when the vast majority of trees in a particular area have full canopies of autumnal color, peak has arrived. Some areas, partiularly in the Northeast, experience vibrant red peaks due to an abundance of maple trees, while others experience a mixture of all of fall's colors. Different trees display different colors, giving each region its own unique peak.&lt;/p&gt;
    &lt;p&gt;For most of the United States, peak fall color arrives in the month of October. This is when wide swaths of the Northeast, Midwest, and Western states are aglow with bright fall foliage, and more than 80% of travelers make their fall foliage trips. Some less-populated regions will peak in September (August in northern Alaska), while the southernmost states hold off until mid-November.&lt;/p&gt;
    &lt;p&gt;The most popular fall foliage displays are found in New England, where approximately ten million people travel each year in hopes of photographing or simply walking through fall's splendor. Northern Vermont, New Hampshire, and northwestern Maine experience peak in early October, while much of New York, Massachusetts, and Pennsylvania have to wait until later in the month.&lt;/p&gt;
    &lt;p&gt;Out west, golden Aspens peak in sweeping displays in late September and early October, just prior to the invasive chill of winter. Non-desert, lower elevations in the Northwest are further delayed into late October/early November; however, the wait is well worth it.&lt;/p&gt;
    &lt;p&gt;If you've ever traveled in search of fall foliage before, you likely know how tricky it can be to be in the right place at the right time. The timing of peak color varies signficantly season-to-season, meaning what worked one year might not work the next! The best fall trips take careful planning, a lot of patience, and a reliable fall foliage map.&lt;/p&gt;
    &lt;p&gt;It's helpful to establish a baseline for when leaves normally change. Maps, like the one in the above section, can help you identify roughly when in the season you should be planning your trip. From there, you should consult a real-time fall foliage map like ours to see if fall foliage is on-time or running early/late due to ongoing weather conditions.&lt;/p&gt;
    &lt;p&gt;If at all possible, don't solidify your plans until you're two weeks out from peak fall foliage. This allows you to be flexible should extreme weather rear its head and disrupt the normal progression of fall foliage. Should that not be an option for you, do your planning in early September when fall foliage experts can give you an idea of whether or not fall color is on-time this year.&lt;/p&gt;
    &lt;p&gt;You'll want to make the most of your time in fall's splendor, so be sure to pick out a few beautiful hikes or drives on which you can truly be emersed in autumnal glory. If you're looking to beat the crowds, consider going to popular locations very early in the morning, before the majority of people arrive. Sunrise bathes fall foliage in golden hues, making early morning one of the best times to venture out!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.explorefall.com/fall-foliage-map"/><published>2025-09-23T00:14:37+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45341683</id><title>X server implementation for SIXEL-featured terminals</title><updated>2025-09-23T03:44:08.840676+00:00</updated><content>&lt;doc fingerprint="10de925be4457d82"&gt;
  &lt;main&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt; Notifications &lt;tool-tip&gt;You must be signed in to change notification settings&lt;/tool-tip&gt;&lt;/item&gt;
      &lt;item&gt;Fork 5&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A X server implementation for SIXEL-featured terminals, based on @pelya's Xsdl kdrive server(https://github.com/pelya/xserver-xsdl)&lt;/p&gt;
    &lt;head rend="h3"&gt;License&lt;/head&gt;
    &lt;head rend="h1"&gt;saitoha/xserver-SIXEL&lt;/head&gt;
    &lt;head rend="h2"&gt;Folders and files&lt;/head&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell role="head"&gt;Name&lt;/cell&gt;
        &lt;cell role="head"&gt;Name&lt;/cell&gt;
        &lt;cell role="head"&gt;
          &lt;p&gt;Last commit message&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell role="head"&gt;
          &lt;p&gt;Last commit date&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;head rend="h2"&gt;Repository files navigation&lt;/head&gt;
    &lt;quote&gt;X Server The X server accepts requests from client applications to create windows, which are (normally rectangular) "virtual screens" that the client program can draw into. Windows are then composed on the actual screen by the X server (or by a separate composite manager) as directed by the window manager, which usually communicates with the user via graphical controls such as buttons and draggable titlebars and borders. For a comprehensive overview of X Server and X Window System, consult the following article: http://en.wikipedia.org/wiki/X_server All questions regarding this software should be directed at the Xorg mailing list: http://lists.freedesktop.org/mailman/listinfo/xorg Please submit bug reports to the Xorg bugzilla: https://bugs.freedesktop.org/enter_bug.cgi?product=xorg The master development code repository can be found at: git://anongit.freedesktop.org/git/xorg/xserver http://cgit.freedesktop.org/xorg/xserver For patch submission instructions, see: http://www.x.org/wiki/Development/Documentation/SubmittingPatches For more information on the git code manager, see: http://wiki.x.org/wiki/GitPage&lt;/quote&gt;
    &lt;head rend="h2"&gt;About&lt;/head&gt;
    &lt;p&gt;A X server implementation for SIXEL-featured terminals, based on @pelya's Xsdl kdrive server(https://github.com/pelya/xserver-xsdl)&lt;/p&gt;
    &lt;head rend="h3"&gt;Resources&lt;/head&gt;
    &lt;head rend="h3"&gt;License&lt;/head&gt;
    &lt;head rend="h3"&gt;Stars&lt;/head&gt;
    &lt;head rend="h3"&gt;Watchers&lt;/head&gt;
    &lt;head rend="h3"&gt;Forks&lt;/head&gt;
    &lt;head rend="h2"&gt;Releases&lt;/head&gt;
    &lt;p&gt;No releases published&lt;/p&gt;
    &lt;head rend="h2"&gt;Packages 0&lt;/head&gt;
    &lt;p&gt; No packages published &lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/saitoha/xserver-SIXEL"/><published>2025-09-23T01:07:57+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45342213</id><title>Selling numbered rocks, you get whatever's next in sequence</title><updated>2025-09-23T03:44:08.618355+00:00</updated><content>&lt;doc fingerprint="5a7d689c1bfcaed8"&gt;
  &lt;main&gt;
    &lt;p&gt;Representative sample. Individual rocks vary.&lt;/p&gt;
    &lt;p&gt;Payment: $49.99&lt;/p&gt;
    &lt;p&gt;Assignment: Next sequential number&lt;/p&gt;
    &lt;p&gt;Sourcing: Rocks are personally selected and documented in our archives before shipment&lt;/p&gt;
    &lt;p&gt;Shipping: Begins November 01 2025 with certificate, continues indefinitely&lt;/p&gt;
    &lt;p&gt;Policy: No exchanges, no returns&lt;/p&gt;
    &lt;p&gt;One rock (1g-10KG, unmodified)&lt;/p&gt;
    &lt;p&gt;Certificate with weight and sequential number (#000001, #000002, etc.)&lt;/p&gt;
    &lt;p&gt;Access link to your rock in our database&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://weight.rocks"/><published>2025-09-23T02:35:28+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45342230</id><title>Eschatological thinking: why Peter Thiel is talking about the Antichrist</title><updated>2025-09-23T03:44:08.318011+00:00</updated><content>&lt;doc fingerprint="b403d1152dd58ff1"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The Political Power of Eschatological Thinking: This Is Why Peter Thiel Is Talking About the Antichrist&lt;/head&gt;
    &lt;head rend="h3"&gt;Trying to make sense of Thiel's obsession with the Antichrist and Armageddon? This article has the answers. Parts 1 and 2 lay the foundations, and parts 3 and 4 offer an explanation. (4,100 words.)&lt;/head&gt;
    &lt;p&gt;NEW!! If you’d prefer to listen to this article, you can do so on YouTube here.&lt;/p&gt;
    &lt;p&gt;My friend Gil Duran writes:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Just when you thought it couldn’t get any weirder, Peter Thiel has announced plans to deliver a four-part lecture series on the Antichrist. These unusual events will take place at the Commonwealth Club of San Francisco on four days in September and October.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Duran just released the first of three videos on the topic, which you can view here:&lt;/p&gt;
    &lt;p&gt;Here are my initial thoughts on Thiel’s foray into end-times theology. Parts 1 and 2 lay the foundations, and parts 3 and 4 offer some answers. (A TL;DR summary can be found at the end of this section.) I hope you find this useful.&lt;/p&gt;
    &lt;head rend="h3"&gt;1. An Intoxicating Seduction&lt;/head&gt;
    &lt;p&gt;Eschatological thinking has a seductive, intoxicating, spellbinding appeal. (“Eschatology” literally means “the study of last things,” but can also refer to the end of the world more generally.) Here’s one way to understand this appeal:&lt;/p&gt;
    &lt;p&gt;Begin with a pessimistic outlook according to which the world is a pretty horrible place overall. This outlook underlies many religious systems, including some versions of Christianity, and one finds it embedded within many utopian ideologies.1 It goes something like this: our fellow humans are, in general, quite selfish, callous, narcissistic, cruel, and power-hungry. Most are indifferent to the pain and misfortunes of others. As the German pessimist Arthur Schopenhauer put it: “For the world is hell, and men are on the one hand the tormented souls and on the other the devils in it.”&lt;/p&gt;
    &lt;p&gt;Zooming out, much of civilization’s 6,000-year history is little more than a long list of catastrophic wars, exterminations, genocides, and terror. People have been tortured in oubliettes, executed for their political beliefs, and imprisoned indefinitely without charges (some fates are worse than death). Many parents have watched their children die, and children have witnessed their parents slaughtered. Untold numbers have endured slavery, homelessness, and loneliness, while hundreds of millions struggle with chronic pain, depression, anxiety, and insomnia. About 1.5 times more people perish from suicide each year than from homicides, and half a million die of homicides annually — a staggering number that transcends our abilities of comprehension.&lt;/p&gt;
    &lt;p&gt;There is, furthermore, no justice in this world. Good people finish last while evil-doers are rewarded for their bad behavior. Hitler may have died by his own hand, but he was never punished for orchestrating the industrial mass murder of 6 million Jews. In contrast, a dear friend of mine roughly my age died last August from a rare form of cancer, a terrible fate she (obviously) did nothing to “deserve.” The world is a patently unfair, unjust, and unhappy place, all things considered.&lt;/p&gt;
    &lt;p&gt;But what if I were to tell you that everything will be made right in the end? What if all of the agony and anguish, suffering and sorrow, terrors and torments will have been worth it? What lies ahead is a refuge of endless ecstasy, where death has been eternally vanquished and the evil-doers banished to the torture chambers of perdition. A place where you reunite with your love ones, surrounded by verdant meadows, sacred streams, and everlasting abundance. Your task right now, while on this Earth, is to push through the interminable miseries because this earthly curse — the dull ache of existence — is but a temporary test implemented by the Almighty, in his infinite wisdom, to ensure that only the righteous pass through the gates of heaven.&lt;/p&gt;
    &lt;p&gt;This is the seductive power of eschatology. Indeed, some theologians characterize eschatology as providing the “ultimate theodicy,” where “theodicy” refers to an account of why God allows suffering and evil in the world. The grand promise of eschatology is that with the closing of this chapter of worldly history, the scales of cosmic justice will finally be balanced: good folks will receive the ultimate reward, while those who trafficked in evil will receive the unrelenting punishments they deserve. There may be no justice in this life, but there will be in the afterlife — and that’s what “excuses” the presence of suffering and evil right now.&lt;/p&gt;
    &lt;p&gt;The psychological benefit of this mode of thinking is an extraordinary kind of eschatological hope. Such hope is profoundly comforting, and offers a deep sense of meaning and purpose in a weary world marked by gratuitous hardships. It provides a potent antidote to the endless awfulness of postlapsarian life.&lt;/p&gt;
    &lt;head rend="h3"&gt;2. Eschatological Thinking Throughout History&lt;/head&gt;
    &lt;p&gt;Eschatological thinking takes many forms: millennialism, millenarianism, utopianism, and apocalypticism, to name a few. Within the Abrahamic faiths — Judaism, Christianity, and Islam — end-times narratives are linear rather than cyclical (as with many Eastern religions), culminating in the establishment of paradise or utopia. However, the only road to utopia takes humanity through the apocalypse — a term I’m using in the colloquial sense to mean “the complete final destruction of the world.” To establish heaven on Earth, the current world order must be violently torn down and permanently eradicated. Hence, in the religious context, apocalyptic anxieties are often inextricably bound up with utopian expectations. To realize the latter, we must first endure the former.&lt;/p&gt;
    &lt;p&gt;Apocalypticism, then, is the belief that the world’s end is imminent. One version of apocalypticism, which I refer to as “active eschatology” below, claims that one is divinely mandated to actively bring about the end in accordance with God’s grand plan for the universe. In other words, one plays a special role in catalyzing the apocalypse. Since what lies on the other side of the apocalypse is paradise, the sooner the apocalypse happens, the sooner utopia will arrive.&lt;/p&gt;
    &lt;p&gt;The power of this thinking is evident in many of the most significant events of human history, including world-altering wars, conflicts, movements, and acts of terrorism. Given the seduction of eschatological promises of a better world to come, a true dedication to and belief in eschatological narratives can mobilize people like no other ideology or worldview can, while “justifying” virtually any act to protect, preserve, and accelerate the arrival of paradise — including extreme measures, violence, and even genocide.&lt;/p&gt;
    &lt;p&gt;Almost 10 years ago, I published an article that delineates a thesis I called the “clash of eschatologies.” This contends that a useful way of understanding the course of history is in terms of conflicting eschatological visions of the future. I adduced a number of historical examples to substantiate this claim. To understand why Thiel is obsessing over the Antichrist and Armageddon, it’s worth reproducing a short excerpt of this article — this excerpt covers only a small fraction of the examples presented, but I hope it gives you a sense of the surprising ubiquity of eschatological thinking across cultural space and time:&lt;/p&gt;
    &lt;p&gt;Throughout human history, a staggering number of social, political, and religious movements have been motivated by ideologies of applied eschatology [again, the idea that one plays an active role in bringing about the end times]. For example, most New Testament scholars in the U.S. and Europe today believe that Jesus was an apocalyptic prophet who expected the world to end in his lifetime (for example see Matthew 24:34). When this failed to occur, he voluntarily sacrificed himself “to force the hand of God,” as Scot McKnight puts it. Following Jesus, a long list of Christian leaders have found themselves under the spell of apocalyptic thinking, including the Apostle Paul, Martin of Tours, Pope Sylvester II, Martin Luther, Christopher Columbus, Hal Lindsey, Pat Robertson, Harold Camping, and the Christian Zionist John Hagee. Further, many significant events in Christian history have been driven by applied eschatological convictions, such as the First Crusade, during which 100,000 Christian fighters believed they were hastening the End of Days.&lt;/p&gt;
    &lt;p&gt;The situation is similar within the Islamic tradition. As Allen Fromherz writes, “some scholars have suggested that Islam was, from the first revelations of Muhammad, almost entirely an apocalyptic movement. … Some have even supposed that Muhammad deliberately failed to designate a successor because he predicted that the final judgment would occur after his death.” After Muhammad’s death in 632CE, many bloody battles were waged in the name of the Mahdi, a messianic figure prophesied by hadith (traditional sayings and deeds of Muhammad apart from the Koran) to usher in the final events before the Last Hour. The very first Mahdi was identified as Muhammad’s grandson, but he was certainly not the last. Indeed, Islamic history is cluttered with Mahdi claimants, including one who, along with several hundred insurgents, seized Mecca’s Grand Mosque for two weeks in 1979, with some 100,000 hostages trapped inside. As of 2013, approximately 3,000 Mahdi claimants were locked away in Iranian prisons.&lt;/p&gt;
    &lt;p&gt;…&lt;/p&gt;
    &lt;p&gt;Even more, numerous historical movements with applied eschatology motives have been, strictly speaking, secular in nature. To quote Daniel Chirot and Clark McCauley at length:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;It was not an accident that Hitler promised a Thousand Year Reich, a millennium of perfection, similar to the thousand-year reign of goodness promised in Revelation before the return of evil, the great battle between good and evil, and the final triumph of God over Satan. The entire imagery of his Nazi Party and regime was deeply mystical, suffused with religious, often Christian, liturgical symbolism, and it appealed to a higher law, to a mission decreed by fate and entrusted to the prophet Hitler.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Thus, the Second World War was driven, in part, by an apocalyptic vision borrowed from Christian eschatology and repurposed for the particular nationalist, racist aims of the Nazi Party.&lt;/p&gt;
    &lt;p&gt;Similarly, Karl Marx appears to have plagiarized aspects of Christianity’s grand narrative in his “teleological” (or goal-directed) theory of societal evolution. As Chirot and McCauley note, “Marxist eschatology actually mimicked Christian doctrine.” … It goes without saying that Marxism has been one of the most influential ideologies of the past two centuries. This ideology of cosmic struggle has driven revolts and revolutions, as well as global conflicts both hot and cold. At its core is an eschatological doctrine that many believers have interpreted as a practical guide for accelerating history’s inexorable march toward the telos of pure communism — a post-historical stage that constitutes the final epoch of social evolution. Once again, applied eschatology is hidden in plain sight.&lt;/p&gt;
    &lt;p&gt;Today, the most conspicuous manifestation of the clash of eschatologies is found in the current epicenter of global violence: the Middle East. Let’s begin with the roots of this conflict. In the late 19th century, the Zionist movement emerged in response to the growing specter of anti-Semitism in Europe. While this movement was largely secular, the prophetic idea of the “Promised Land” played an important role in rationalizing the occupation of Palestinian territories. As Saleh Abdel Jawad writes, the claim that Palestine was given to the Jewish people by God enabled “Zionists [to allege] that the Palestinians were usurpers in the Promised Land, and therefore their expulsion and death was justified.” From the Christian — and in particular dispensationalist — perspective, some leading figures saw the immigration of Jews to Palestine in the late 19th century as evidence that Biblical prophecy was coming true. The American evangelist William E. Blackstone, for example, interpreted this demographic shift as a clear “sign of the times,” and argued that “the United States [has] a special role and mission in God’s plans for humanity: that of a modern Cyrus to help restore the Jews to Zion.” (Cyrus the Great, to whom Blackstone refers, founded the Achaemenid Empire, and after conquering the Babylonian empire freed the Jews from captivity, allowing them to resettle in Jerusalem.)&lt;/p&gt;
    &lt;p&gt;…&lt;/p&gt;
    &lt;p&gt;The importance of a Jewish state for [Christian evangelical] dispensationalists relates to the specific end-times narrative of this scriptural interpretation — one that was more or less invented by John Nelson Darby, a friend of William Blackstone, in the early 1800s. … The crucial point for dispensationalists is that everything about God’s future plans for humanity depends on the creation and continuation of a Jewish state in Palestine. This is why many Christian Zionists support Israel with dogmatic intransigence, and see its establishment three years after Hitler put a pistol to his head as the most significant eschatological event since the Romans destroyed the Temple in 70 AD, thereby supposedly fulfilling the prophecy of Mark 13:1-2. The eschatological fact, according to dispensationalism, is that the Tribulation cannot commence unless there’s a Jewish state in the Palestinian territories, and eternal peace will forever elude God’s children until the Tribulation occurs. The sociologist and pastor Tony Campolo summarizes this link between religion and politics as follows: “Without understanding dispensationalism, however, it is almost impossible to understand how Christian Zionism has come to dominate American Evangelicalism and been so influential on the course of U.S. Middle East policy.”&lt;/p&gt;
    &lt;p&gt;[End excerpt.]&lt;/p&gt;
    &lt;p&gt;The crucial point for our purposes is that competing eschatological convictions have played an integral role in many events of world-historical importance: the founding of Christianity, the rise of Islam, the Crusades, the Second World War, Marxist revolutions, contemporary US support for Israel, as well as terrorist attacks perpetrated by groups like al-Qaeda, the Islamic State, and Aum Shinrikyo.2 The clash of eschatologies is historically omnipresent.&lt;/p&gt;
    &lt;p&gt;Here’s yet another example: the current race to build AGI. This is also motivated by eschatological visions of utopia and the apocalypse — that is, a secular apocalyptic scenario that believers call an “existential catastrophe.” With Dr. Timnit Gebru, I’ve argued that the AGI race directly emerged out of the TESCREAL ideologies, at the heart of which is a utopian belief that if we build a “value-aligned” superintelligence, we can task it with radically reengineering humanity, creating a new “posthuman” species, spreading beyond Earth, colonizing our future light cone, and building literally “planet-sized” computers on which to run trillions and trillions of “digital people.”&lt;/p&gt;
    &lt;p&gt;On the flip side, if superintelligence is “value-misaligned” (Musk would call this a “demon”), then it will obliterate humanity and, along with us, this “vast and glorious” future that we could have otherwise created, to quote the quasi-religious words of Toby Ord. In fact, the “backbone” of the TESCREAL bundle is transhumanism, which was explicitly developed in the 20th century as a secular replacement for traditional religion. This is why Julian Huxley titled his 1927 book on transhumanist themes Religion Without Revelation.&lt;/p&gt;
    &lt;p&gt;Once you start snooping around the world, and world history, for examples of eschatology in action, you find them literally everywhere you look. Eschatology, in many ways, is what makes the world go ‘round.&lt;/p&gt;
    &lt;head rend="h3"&gt;3. The Extraordinary Power of Eschatology as a Political Tool&lt;/head&gt;
    &lt;p&gt;If you can convince people that the end is nigh, that one is fighting the Antichrist, and that Armageddon — an ultimate battle between Good and Evil — is at hand, you can persuade them to do just about anything. After all, what hangs in the balance is eternal life, perfect happiness, perpetual peace, and cosmic justice. With the stakes that high, what exactly is off the table? What act is morally impermissible?&lt;/p&gt;
    &lt;p&gt;Indeed, eschatological thinking reinforces what my friend Frances Flannery, a noted biblical scholar, calls “cosmic dualism” — a powerful “us-versus-them” mentality. You’re either on the side of Good or you’re against it, and is there anything more evil than someone who opposes capital-g Good? Who impedes the realization of utopia? Who rejects perfection? The degenerate Others are the embodiment of all that is wicked in this world, and hence ought to be eliminated with neither mercy nor compunction. My guess is that Peter Thiel understands this dynamic, at least to some extent, and that’s partly why he keeps talking about the Antichrist. There’s an extraordinary coercive power to eschatological thinking, especially when weaponized as a political tool to influence and manipulate the faithful.&lt;/p&gt;
    &lt;p&gt;As far as I can tell, the particular interpretation of biblical prophecy that Thiel is peddling goes like this: we face two foes — the Antichrist and Armageddon. The former is a world government with — I kid you not — high taxes, an idea that’s “curiously consistent with other apocalypticists who’ve claimed that the Antichrist will gain power through supranational organizations like the European Union or United Nations.” Thiel sees Greta Thunberg as an agent of the Antichrist precisely because she advocates for global regulations targeting carbon emissions. If implemented, this would take us one more misstep down the slippery slope of regulatory regimes that interfere with other areas of industry, some of which Thiel has a vested interest in.&lt;/p&gt;
    &lt;p&gt;Here’s the strategy of Antichristic agents, according to Thiel: they use the threat of Armageddon — a global-scale catastrophe, or an existential disaster — as a pretext for establishing a world government. If you want to avoid annihilation or collapse, they say, we must sacrifice the “freedom” of corporations to continue polluting, exploiting, extracting, and doing whatever they see as necessary to maximize their profits. Thiel responds that aligning with the Antichrist to avoid Armageddon is no solution at all. Rather, our eschatological task in these perilous times is to walk the narrow path between Armageddon and the Antichrist: to avoid an actual catastrophe while resisting the urge to accomplish this through global governance.&lt;/p&gt;
    &lt;p&gt;This is a highly idiosyncratic, quite bizarre reading of Christian eschatological themes. Many traditional believers will likely reject it. Nonetheless, by tapping into a rich reservoir of powerful images embedded within our collective imagination, images that have played a crucial role in some of the most consequential events of human history, Thiel may hope to mobilize people to join his pro-libertarian fight against the unholy forces of “big government.” If he convinces such people to switch from a “normal mode of mentation” to a totalizing “apocalyptic mindset,” then suddenly the fight becomes far more urgent and important. It takes on an apocalyptic dimension framed within the “Otherizing” outlook of cosmic dualism: us versus them, Good versus Evil.&lt;/p&gt;
    &lt;p&gt;If Thunberg is just an annoying climate activist, she can be safely ignored. But if she’s an agent of the Antichrist, then she must be stopped immediately and at all costs. If those advocating for AI regulation are engaged in the work of the Devil, then they, too, must be dealt with in a manner proportionate to the awesome stakes of the fight. This is an apocalyptic showdown to protect, preserve, and bring about paradise, which Thiel imagines happening through the unregulated development of advanced technologies.&lt;/p&gt;
    &lt;head rend="h3"&gt;4. The US Is an Apocalyptic Nation&lt;/head&gt;
    &lt;p&gt;As Frances Flannery writes, “the US is an apocalyptic nation.” (My clash of eschatologies thesis would further claim that much of the world has been and still is enthralled by apocalyptic expectations.3) She adds that “the Book of Revelation has arguably been responsible for more genocide and killing in history than any other,” and that “it is arguably the bloodiest book in history” because of the atrocities it’s inspired. This is just to say, once again, that eschatological thinking is intoxicating, seductive, and extremely powerful.&lt;/p&gt;
    &lt;p&gt;With respect to the US being apocalyptic, consider that one poll from 2010 found that 41% of US Christians expect Jesus to return before 2050. Another reports that roughly 25% of Americans believed that Obama was the Antichrist during his presidency. A more recent Pew survey finds that, “in the United States, 39% of adults say they believe ‘we are living in the end times,’” including 63% of evangelicals and 27% of Catholics.&lt;/p&gt;
    &lt;p&gt;Hence, there’s a very sizable demographic of people primed to believe the sorts of apocalyptic proclamations that Thiel is now spouting. As I’ve argued elsewhere, eschatological narratives are simultaneously rigid and elastic: there are fixed events that must occur and the outcome is of course predetermined, but the exact nature of these events, the individuals involved, the particular ways in which they unfold, etc. are left open to interpretation. Eschatological narratives are like a fluid that can fill whatever container they’re poured into, by which I mean they can accommodate a wide range of surprising political, geopolitical, cultural, technological, etc. developments. Things that might have once seemed to challenge or undermine eschatological narratives are often reinterpreted, after or during the fact, as reinforcing those very same narratives.&lt;/p&gt;
    &lt;p&gt;Consider that in the midst of the Cold War, many Christian evangelicals quickly integrated the development of thermonuclear weapons into their prior eschatological worldviews. As Ronald Reagan said during a 1971 dinner, while he was governor of California:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;for the first time ever, everything is in place for the battle of Armageddon and the second coming of Christ. … It can’t be long now. Ezekiel [38:22] says that fire and brimstone will be rained upon the enemies of God’s people. That must mean that they’ll be destroyed by nuclear weapons. They exist now, and they never did in the past.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The elasticity of otherwise rigid narratives thus offers an opportunity for charlatans like Thiel to fill in the blanks, by mapping those narratives onto contemporary events and arguing that such events are exactly what ancient prophecy was talking about all along — though we perhaps couldn’t have seen that until now.&lt;/p&gt;
    &lt;p&gt;There is no upper limit to the amount of wealth and power that sociopaths like Thiel want to acquire. Although Thiel is, philosophically, a rather simplistic thinker, my guess is that he has an intuitive understanding of — once again — the power of eschatology as a political tool. Without having seen his lecture series (I may modify my credence levels if a recording is leaked), this is the main reason I suspect he’s talking about the Antichrist and Armageddon right now and insisting that people like Thunberg are agents of the Antichrist.&lt;/p&gt;
    &lt;code&gt;To summarize the argument presented above: (1) eschatological thinking is intoxicating and seductive because it offers a powerful source of comfort and hope in this weary world of gratuitous hardships and infuriating injustices. (2) Eschatological narratives can inspire people to act like no other ideologies or worldviews can, and “justify” (in the eyes of true believers) virtually any measure, no matter how extreme, to preserve paradise. (3) Charismatic or otherwise influential figures can wield such narratives for political ends by convincing people that the enemy is Evil and the threat is apocalyptic: if this battle is lost, then all is lost forever. And (4) charlatans like Peter Thiel probably understand the extraordinary political power of weaponized eschatological beliefs, and that's why he's talking about Armageddon and the Antichrist.&lt;/code&gt;
    &lt;head rend="h3"&gt;5. Peter Thiel Is Really Weird&lt;/head&gt;
    &lt;p&gt;A second reason he might be obsessing over the Antichrist is that, well, the guy is just really weird. Perhaps he genuinely believes in his conception of the Antichrist, and sees his lectures as a genuine contribution to the relevant branch of theology. Maybe this is why he chose to give these talks in secret — or maybe he’s just testing out the waters before making more public statements. Perhaps he imagines himself as a prophet who’s offering the correct interpretation of scripture. Many billionaires in Silicon Valley, after all, do see themselves as messianic figures, and Thiel is no exception to the rule.&lt;/p&gt;
    &lt;p&gt;The irony, of course, is that Thiel is a much better candidate for the Antichrist, or an agent thereof, than Thunberg. As Ross Douthat of the New York Times said to Thiel during a recent interview:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Douthat: And my very specific question for you: You’re an investor in A.I. You’re deeply invested in Palantir, in military technology, in technologies of surveillance and technologies of warfare and so on. And it just seems to me that when you tell me a story about the Antichrist coming to power and using the fear of technological change to impose order on the world, I feel like that Antichrist would maybe be using the tools that you are building. Like, wouldn’t the Antichrist be like: Great, we’re not going to have any more technological progress, but I really like what Palantir has done so far. Isn’t that a concern? Wouldn’t that be the irony of history, that the man publicly worrying about the Antichrist accidentally hastens his or her arrival?&lt;/p&gt;
      &lt;p&gt;Thiel: Look, there are all these different scenarios. I obviously don’t think that that’s what I’m doing.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Lolz.&lt;/p&gt;
    &lt;p&gt;So, those are my initial thoughts on the matter.4 What do you think? What am I missing? Please leave your thoughts in the comments section — I do read everything that people write! :-)&lt;/p&gt;
    &lt;p&gt;Thanks for reading and I’ll see you on the other side!&lt;/p&gt;
    &lt;p&gt;Indeed, the whole reason for desiring utopia is precisely because the world is quite bad.&lt;/p&gt;
    &lt;p&gt;This is why ISIS conquered the small Syrian town of Dabiq: prophetic passages in the Hadith suggests that’s where Islam’s version of Armageddon will take place, and ISIS wanted that to happen.&lt;/p&gt;
    &lt;p&gt;My guess is that Flannery wouldn’t necessarily disagree, but I don’t know for sure.&lt;/p&gt;
    &lt;p&gt;Thanks so much to Remmelt Ellen for reading over a draft of this post!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.realtimetechpocalypse.com/p/the-political-power-of-eschatological-82b"/><published>2025-09-23T02:38:29+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45342319</id><title>Pocket Casts, You Altered the Deal, So I Will Alter Your App</title><updated>2025-09-23T03:44:08.089466+00:00</updated><content>&lt;doc fingerprint="ae20d95091a385fa"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Pocket Casts, You Altered The Deal, So I Will Alter Your App&lt;/head&gt;
    &lt;head rend="h3"&gt;History so far&lt;/head&gt;
    &lt;p&gt;Pocket Casts, people are not upset you are trying to find revenue sources. People are upset you are reneging on your promise.&lt;/p&gt;
    &lt;p&gt;You were a pay-once app. Released in 2011, pay once each for Android, iOS, and Web and keep for life.&lt;/p&gt;
    &lt;p&gt;In 2018 NPR acquired you. Then in 2019 you moved to a subscription for all users, including the paid ones. People were upset so you backtracked and grandfathered them into a lifetime plus membership. Sadly, in 2020 NPR lost $800k from running you so you were sold to Automattic.&lt;/p&gt;
    &lt;p&gt;In 2024, you renamed all "Pocket Casts Lifetime Members" to "Pocket Casts Champions" and we knew shenanigans were afoot.&lt;/p&gt;
    &lt;p&gt;This week you flipped the switch to turn on ads in the app:&lt;/p&gt;
    &lt;p&gt;However, in 2022 you made your mobile apps open source, so there is something that can be done: I forked the repo.&lt;/p&gt;
    &lt;head rend="h3"&gt;Exorcising the ads&lt;/head&gt;
    &lt;p&gt;In the app you may be able to see the new nag that says: "Unlock folders, bookmarks, transcripts and more with Pocket Casts Plus" just above the artwork in the player screen. I don't see that exact string in the GitHub repo, I think that's because of internationalization.&lt;/p&gt;
    &lt;p&gt;However, I found where the artwork view fragment is and that it contains &lt;code&gt;AdAndArtworkHorizontal&lt;/code&gt;. Looking at the changelog I can see that this was added in Display ads in the player #4086 which created the flag &lt;code&gt;Feature.BANNER_ADS&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;In the project, a feature flag has the following details:&lt;/p&gt;
    &lt;code&gt;enum class Feature(  
    val key: String,  
    val title: String,  
    val defaultValue: Boolean,  
    val tier: FeatureTier,  
    val hasFirebaseRemoteFlag: Boolean,  
    val hasDevToggle: Boolean,  
)
&lt;/code&gt;
    &lt;p&gt;With some further updates to the project, the flag is now broken in two:&lt;/p&gt;
    &lt;code&gt;BANNER_ADS_PLAYER(  
    key = "banner_ad_player",  
    title = "Banner Ads Player",  
    defaultValue = true,  
    tier = FeatureTier.Free,  
    hasFirebaseRemoteFlag = true,  
    hasDevToggle = true,  
),  
BANNER_ADS_PODCASTS(  
    key = "banner_ad_podcasts",  
    title = "Banner Ads Podcasts",  
    defaultValue = true,  
    tier = FeatureTier.Free,  
    hasFirebaseRemoteFlag = true,  
    hasDevToggle = true,  
),
&lt;/code&gt;
    &lt;p&gt;The flags are ultimately used by BlazeAdLocation.&lt;/p&gt;
    &lt;p&gt;There are a couple of different ways we could slice out the ads. For testing, I went with the simplest approach to start:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Flip &lt;code&gt;defaultValue&lt;/code&gt;to false.&lt;/item&gt;
      &lt;item&gt;Flip &lt;code&gt;hasFirebaseRemoteFlag&lt;/code&gt;to false so the flag will not be remotely overridden.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Anyway, based on the readme I just needed to&lt;code&gt;./gradlew :app:assembleDebugProd&lt;/code&gt; and &lt;code&gt;./gradlew :app:installDebugProd&lt;/code&gt;. This will install a different debug version of the app:&lt;/p&gt;
    &lt;p&gt;Voila, ads gone. Though in the future this process may be tougher because of Google's impending crackdown on loading APKs.&lt;/p&gt;
    &lt;p&gt;Now, after doing all that work, guess what I realized? &lt;code&gt;hasDevToggle&lt;/code&gt; field in the Features class? Well the debug build has a feature toggles section:&lt;/p&gt;
    &lt;p&gt;So for now you do not need to modify the project's code. You can get by with just using the debug build and toggling the feature off. Feature flags only exist for testing features though. Eventually the flag will go away and I'll have to disable the ads more directly.&lt;/p&gt;
    &lt;head rend="h3"&gt;Why did we end up here?&lt;/head&gt;
    &lt;p&gt;Pocket Casts, your current approach to monetization seems extreme. Are you in a similar situation to 2020? Back then the NPR financial report only had a single line item of $812,129 for "Minus: Share of Podcast Media’s net loss". Why does a podcast service cost so much to run? If you give us more transparency, maybe we will better understand why you need to make changes.&lt;/p&gt;
    &lt;p&gt;Maybe more of the work can be moved on-device. You open-sourced your app. Maybe the community can help you out and contribute those changes? We're not too scary. You extended an olive branch by open-sourcing the project, so let's work together. Hopefully Automattic doesn't pull back on contributions like they did with WordPress this year.&lt;/p&gt;
    &lt;head rend="h3"&gt;An entirely different option&lt;/head&gt;
    &lt;p&gt;As I mentioned in my post about the apps I kept when switching to GrapheneOS, self-hosting PinePods and using AntennaPod on your phone is a great option! That way you can still have web and desktop sync. I also said in that post:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;If I wasn't grandfathered into the free premium tier I would be more tempted to jump ship.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The time to jump ship seems to be getting closer. I think Pocket Casts will join a future version of my apps that I got rid of when switching to GrapheneOS post.&lt;/p&gt;
    &lt;p&gt;Oh, and if anyone is looking for new podcasts to listen to, I have recommendations.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.matthewbrunelle.com/podcasts-you-altered-the-deal-so-i-will-alter-your-app/"/><published>2025-09-23T02:56:10+00:00</published></entry></feed>