<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-09-17T22:32:31.326206+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45276987</id><title>How to motivate yourself to do a thing you don't want to do</title><updated>2025-09-17T22:32:39.754022+00:00</updated><content>&lt;doc fingerprint="77441055ef772c70"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How to Motivate Yourself To Do A Thing You Don't Want to Do&lt;/head&gt;
    &lt;p&gt;Learn some ways to help encourage action when you feel unmotivated.&lt;/p&gt;
    &lt;p&gt;We have an air bike in our basement. If you are unfamiliar with air bikes, they are similar to stationary bikes with foot pedals but also have handles you push and pull with your arms. It uses air resistance, so the harder you pedal and move your arms, the higher the resistance.&lt;/p&gt;
    &lt;p&gt;It’s also known as an assault bike. 😬&lt;/p&gt;
    &lt;p&gt;Which is apt, because it’s a butt-kicker of a workout. I use it about once a week, more frequently in the winter when it’s too cold to run, and less often in the summer when I can get outside more. And I kind of hate it!&lt;/p&gt;
    &lt;p&gt;Before I even drag myself to our basement, I’m already dreading it. The only way I can convince myself to do it is by finding a suitably engaging show I can distract myself with on my phone while I huff and puff.&lt;/p&gt;
    &lt;p&gt;Every time, I start my warm-up and think to myself,&lt;/p&gt;
    &lt;p&gt;“It’s only 30 minutes, I can do this!”&lt;/p&gt;
    &lt;p&gt;Like clockwork, within the first three minutes, I think, “Maybe I will only do ten minutes today and do some pilates or weights instead.”&lt;/p&gt;
    &lt;p&gt;After ten minutes, I think, “OK, surely I can make it to 20 minutes, and that will be enough”.&lt;/p&gt;
    &lt;p&gt;After 20 minutes, as I gasp for air and sweat soaks through my shirt, I think “Well, I already made it to 20 minutes… I guess I will just finish it.”&lt;/p&gt;
    &lt;p&gt;And then I proceed to huff and puff to the end, wherein I walk my wobbly legs back up the stairs to do a cooldown. At which point I think, “That suuuuuucked…” And then congratulate myself on finishing as I try to get my heart rate back to normal. 🥵&lt;/p&gt;
    &lt;p&gt;This mental dance happens, without fail, every single time I ride.&lt;/p&gt;
    &lt;p&gt;I share this anecdote because it illustrates how tricky motivation can be, especially when faced with something you don’t want to do or have been procrastinating on. There are any number of things you have to deal with in your life that you don’t want to. There are even things you might generally enjoy that feel like they are hanging over you.&lt;/p&gt;
    &lt;p&gt;The pattern often goes like this:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Before you start, it feels daunting, and the prospect lingers in the back of your mind. You know it needs to be done, but you really, really don’t feel like it. You leave it until it starts to loom larger and larger.&lt;/item&gt;
      &lt;item&gt;When you finally convince yourself to start, it’s not what you want to be doing, but it’s generally fine. It’s often not even as bad as you thought it would be, and it feels good to make progress.&lt;/item&gt;
      &lt;item&gt;As you near the end, you can even push yourself a little to wrap it up and get it off your plate.&lt;/item&gt;
      &lt;item&gt;When it’s over, you feel relieved, like a weight has been taken off your shoulders, and you are both pleased with yourself and a little annoyed that it took you so long to deal with.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Sound familiar?&lt;/p&gt;
    &lt;p&gt;Motivation is a topic that comes up with nearly all my clients, as they navigate the various complexities of their lives. In some ways, motivation seems simple. You ask yourself, “Why can’t I just make myself be motivated to do the thing?”, whatever the thing might be. However, as you beat yourself up about it, consider that many factors influence our decision-making and the feeling of being motivated.&lt;/p&gt;
    &lt;p&gt;Humans are complex creatures, with numerous brain chemicals and hormones influencing our overall physical and emotional state, which themselves are constantly impacted, sometimes drastically, by things like:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Have you been sleeping well and enough?&lt;/item&gt;
      &lt;item&gt;Have you been eating well and the right amount for you?&lt;/item&gt;
      &lt;item&gt;Have you been imbibing in alcohol or other things?&lt;/item&gt;
      &lt;item&gt;Have you been moving your body regularly?&lt;/item&gt;
      &lt;item&gt;Do you have any physical or mental conditions?&lt;/item&gt;
      &lt;item&gt;Are you in pain?&lt;/item&gt;
      &lt;item&gt;Do you have significant life stressors at this time?&lt;/item&gt;
      &lt;item&gt;What time of day is it?&lt;/item&gt;
      &lt;item&gt;Where are you in your natural hormone cycles?&lt;/item&gt;
      &lt;item&gt;How old are you?&lt;/item&gt;
      &lt;item&gt;Have you had any conflicts in your life recently?&lt;/item&gt;
      &lt;item&gt;Did you move your body in a way entirely within your usual routines, but apparently in a way that is no longer acceptable?&lt;/item&gt;
      &lt;item&gt;Did you sleep in a slightly different position than usual, and now your back will never be the same again?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I could go on, but you get the idea.😅&lt;/p&gt;
    &lt;p&gt;All of these factors (and more) conspire to shift your mood, physical energy, and mental energy, often making it harder to muster the motivation to do things. What, then, can you do to move things in the right direction? How do you motivate yourself to do a thing you don’t want to do?&lt;/p&gt;
    &lt;p&gt;Here are several ways to help encourage action when you feel unmotivated.&lt;/p&gt;
    &lt;head rend="h2"&gt;1. Think about why you are feeling unmotivated&lt;/head&gt;
    &lt;p&gt;There are many external and internal factors, as listed above, that contribute to motivation.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;When your body isn’t feeling good, it’s harder to make it do things.&lt;/item&gt;
      &lt;item&gt;When your mind is tired, distracted, or overwhelmed, it’s challenging to focus and accomplish tasks.&lt;/item&gt;
      &lt;item&gt;When the thing you need to do isn’t important to you or something you don’t like, it’s hard to make yourself do it.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;When you know why you aren’t motivated, you can think about what you could change to make things easier on yourself. What factors do you have control over?&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Environment - Is there a place you can go or a thing you can add that will make it feel easier? For example, I have my writing desk set up in a quiet corner of my bedroom (not the office I share with my husband) to help make writing easier, even when I am not feeling it.&lt;/item&gt;
      &lt;item&gt;Mood - Is there something that will help boost your mood? Go for a ten-minute walk, treat yourself to a donut, text your best friend for a pep talk, turn on your favourite tunes… anything that will give you a little pick-me-up.&lt;/item&gt;
      &lt;item&gt;Body - Are there things you can do to take care of your body to make it feel better? Try some stretching, take a nap, meditate, read a book, get some fresh air, go for a run, eat a comfort meal, or do anything that will help your body feel less stressed.&lt;/item&gt;
      &lt;item&gt;Negative or fear motivators - Is the thing you are not motivated to do being motivated by negative or fear motivators? These include things like fear of judgment, fear of conflict, shame, guilt, or obligation. These motivators only go so far and deserve further examination to determine their place in your priorities. Maybe they aren’t things you need to do in the first place.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The key point here is to identify where you have control and where you don’t, and then do your best to adapt your circumstances to make it easier to take action.&lt;/p&gt;
    &lt;head rend="h2"&gt;2. Identify what does motivate you&lt;/head&gt;
    &lt;p&gt;When you think about the various activities and tasks you do each day, what is it that encourages you to do them? Some of those things will be negative motivators, as I mentioned above, but others will be things you do for fun, because they are interesting or rewarding. These are some tactics to consider for things that might help motivate you:&lt;/p&gt;
    &lt;head rend="h3"&gt;Combine the task with something you enjoy&lt;/head&gt;
    &lt;p&gt;You know what makes cleaning out the garage a lot better? Some good tunes. Throw on an audiobook while you cook dinner. Watch a good show while you huff and puff on the air bike! Think about the things you enjoy and consider how you can combine them with the thing you're trying to motivate yourself to do.&lt;/p&gt;
    &lt;head rend="h3"&gt;Add external accountability&lt;/head&gt;
    &lt;p&gt;Sometimes it can be challenging to push yourself to do something when there are no external motivators. Ask a friend to be your accountability buddy, or hire a professional to help you stay accountable for the thing you're trying to do, such as a coach, trainer, teacher, or dietitian. I know that one of the significant value-added benefits my clients get from working with me for a few months is having someone they have to report back to on their progress!&lt;/p&gt;
    &lt;head rend="h3"&gt;Gamify&lt;/head&gt;
    &lt;p&gt;Is there any way to turn the process or thing you are unmotivated to do into a game? Can you add rewards if you do a certain amount, or set a goal for how many days you make progress in a row? For example, one of my motivators for doing some kind of fitness every day is keeping up my streak! 2817 days in a row as of publishing. 😁&lt;/p&gt;
    &lt;head rend="h3"&gt;Celebrate milestones&lt;/head&gt;
    &lt;p&gt;Beyond small planned rewards, having something to look forward to as you make progress on your task or activity can also help encourage you to continue moving forward. Maybe you take a day off, order your favourite takeout, or simply share it with someone you care about.&lt;/p&gt;
    &lt;p&gt;For more specifics on types of motivation, read my article, What Motivates You? Learn the Types of Motivation and How to Use Them, where I get into more detail about intrinsic and extrinsic motivation.&lt;/p&gt;
    &lt;head rend="h2"&gt;3. Break it into smaller chunks&lt;/head&gt;
    &lt;p&gt;If part of why you feel unmotivated is that what you need to do feels big and overwhelming, often the best thing you can do is try to break it down into smaller, more manageable pieces. What is the smallest amount you can do to make a bit of progress?&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Commit to spending 5 minutes on it&lt;/item&gt;
      &lt;item&gt;Choose a small corner of a room you need to clean&lt;/item&gt;
      &lt;item&gt;Commit to writing the outline&lt;/item&gt;
      &lt;item&gt;Write the text, even if you don’t send it&lt;/item&gt;
      &lt;item&gt;Plan in your calendar when you will do it, so you don’t have it sitting in the back of your mind&lt;/item&gt;
      &lt;item&gt;Talk about it with your partner or a friend&lt;/item&gt;
      &lt;item&gt;Switch tasks to take a break and come back to it&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Often, getting over the hump of starting something is enough to help push you through it. Even if it isn’t, at the very least, you have made some amount of progress, which you can build on.&lt;/p&gt;
    &lt;head rend="h2"&gt;4. Consistency over motivation&lt;/head&gt;
    &lt;p&gt;If the thing you need to do is something you need to do regularly, like writing, fitness, practicing an instrument, or cleaning, you can’t rely purely on motivation to drive you. Even for things you enjoy, it’s easy to push something off “until you feel like it”. But with so many factors affecting your mood and energy, the times when you feel like it will be fleeting. Instead of relying on motivation, try to establish a routine that fosters consistency.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Plan your intentional week so you have an idea of when you intend to do it&lt;/item&gt;
      &lt;item&gt;Set a daily reminder&lt;/item&gt;
      &lt;item&gt;Book it in your calendar&lt;/item&gt;
      &lt;item&gt;Set a certain amount of time you will put aside each day or week to chip away at it&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A little bit, consistently, will go a long way.&lt;/p&gt;
    &lt;head rend="h2"&gt;5. Put it on the back burner&lt;/head&gt;
    &lt;p&gt;Sometimes, when you are not feeling motivated to do something, it’s reasonable to just put it on the back burner. Maybe it’s just not a priority right now, and that’s totally fine! Ask yourself, is this a glass ball or a plastic ball? If it’s plastic, set it aside for a bit and focus your time and energy on other things.&lt;/p&gt;
    &lt;p&gt;It's ok to decide now is not the right time, but make it an intentional decision instead of something you avoid and feel bad about!&lt;/p&gt;
    &lt;p&gt;If you're struggling with motivation, you're not alone! It’s normal, it’s natural, and there are tons of different, ever-changing factors that will change how you feel. Do your best to examine where you are at, control what you can control, and make progress where you can!&lt;/p&gt;
    &lt;p&gt;Need some help getting motivated? Get in touch!&lt;/p&gt;
    &lt;head rend="h4"&gt;Share&lt;/head&gt;
    &lt;head rend="h4"&gt;Ashley Janssen&lt;/head&gt;
    &lt;p&gt;Productivity consultant, writer, speaker, serial entrepreneur, chaos calmer, introvert, cat-lady. Lover of books, fitness, old fashioned’s, basketball, and video games.&lt;/p&gt;
    &lt;p&gt; Follow me on Twitter or LinkedIn. &lt;lb/&gt; Hire me for 1 on 1 productivity consulting or speaking. &lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://ashleyjanssen.com/how-to-motivate-yourself-to-do-a-thing-you-dont-want-to-do/"/><published>2025-09-17T15:25:24+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45277704</id><title>Launch HN: RunRL (YC X25) – Reinforcement learning as a service</title><updated>2025-09-17T22:32:39.520706+00:00</updated><link href="https://runrl.com"/><published>2025-09-17T16:13:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45278279</id><title>Ton Roosendaal to step down as Blender chairman and CEO</title><updated>2025-09-17T22:32:38.837956+00:00</updated><content>&lt;doc fingerprint="e995505b9976c37f"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Ton Roosendaal to step down as Blender chairman and CEO&lt;/head&gt;
    &lt;p&gt;&lt;lb/&gt; Ton Roosendaal is to stop down as chairman and Blender CEO on 1 January 2026. The news was announced during today’s keynote at the annual Blender Conference.&lt;/p&gt;
    &lt;p&gt;Roosendaal – the original author of the open-source 3D software, and its public figurehead for the past three decades – will pass on his roles to current Blender COO Francesco Siddi.&lt;/p&gt;
    &lt;p&gt;Roosendaal himself will move to the newly established Blender Foundation supervisory board.&lt;/p&gt;
    &lt;p&gt;Other new Blender Foundation board positions will also include Sergey Sharybin (Head of Development), Dalai Felinto (Head of Product) and Fiona Cohen (Head of Operations).&lt;/p&gt;
    &lt;p&gt;“We’ve been preparing for this since 2019,” said Roosendaal, “I am very proud to have such a wonderfully talented young team around me to bring our free and open source project into the next decade.”&lt;/p&gt;
    &lt;p&gt;We aim to update this story with a brief retrospective of Ton’s time as Blender CEO and the growth of Blender during that time, so check back for updates.&lt;/p&gt;
    &lt;p&gt;Read the official announcement that Ton Roosendaal is stepping down as Blender CEO&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.cgchannel.com/2025/09/ton-roosendaal-to-step-down-as-blender-chairman-and-ceo/"/><published>2025-09-17T16:49:37+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45278424</id><title>Event Horizon Labs (YC W24) Is Hiring</title><updated>2025-09-17T22:32:38.385153+00:00</updated><content>&lt;doc fingerprint="a34a90db072aed8a"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;At Event Horizon Labs, we’re building an autonomous system that turns raw compute and data directly into alpha, executing without the friction or bias of human emotion.&lt;/p&gt;
      &lt;head rend="h3"&gt;What You’ll Build&lt;/head&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;High-Concurrency Pipelines&lt;lb/&gt; Architect infrastructure that seamlessly handles thousands of concurrent requests, ensuring consistent performance even at peak load.&lt;/item&gt;
        &lt;item&gt;Robust, Fault-Tolerant Systems&lt;lb/&gt; Build reliable frameworks that gracefully manage the complexity of trading — where resilience and uptime are paramount.&lt;/item&gt;
        &lt;item&gt;Foundational Technology&lt;lb/&gt; As part of our founding team, you’ll have the autonomy to shape core infrastructure decisions and lay the groundwork for future engineers to build upon.&lt;/item&gt;
      &lt;/list&gt;
      &lt;head rend="h3"&gt;What We’re Looking For&lt;/head&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;Top-Tier Systems Design Expertise&lt;lb/&gt; Deep experience with distributed systems, networking, and the art of optimizing database performance at scale.&lt;/item&gt;
        &lt;item&gt;Containerization &amp;amp; Cloud Mastery&lt;lb/&gt; Strong proficiency in Docker, Kubernetes, and modern cloud environments to deploy, monitor, and scale AI infrastructure globally.&lt;/item&gt;
        &lt;item&gt;Proven Record of Scaling &amp;amp; Performance&lt;lb/&gt; Demonstrated ability to push databases and systems to their limits—experience with high concurrency, complex query optimization, and near real-time data processing.&lt;/item&gt;
      &lt;/list&gt;
      &lt;head rend="h3"&gt;Why EHL?&lt;/head&gt;
      &lt;p&gt;We’re a small, high-caliber group of engineers and researchers obsessed with pushing the boundaries of AI systems. If you’ve been honing your skills at the top echelons of programming, research, or system design—and want to tackle some of the hardest problems in AI infrastructure—this is the team where you can truly stand out.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.ycombinator.com/companies/event-horizon-labs/jobs/U6oyyKZ-founding-engineer-at-event-horizon-labs"/><published>2025-09-17T17:00:05+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45278581</id><title>Drought in Iraq reveals tombs created 2,300 years ago</title><updated>2025-09-17T22:32:38.228296+00:00</updated><content>&lt;doc fingerprint="c772991916f40645"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Severe Drought in Iraq Reveals Dozens of Ancient Tombs Created 2,300 Years Ago&lt;/head&gt;
    &lt;head rend="h2"&gt;The tombs, which likely date to Iraq’s Hellenistic period, were discovered along the Mosul Dam reservoir&lt;/head&gt;
    &lt;p&gt;Archaeologists have discovered 40 tombs in Iraq after severe droughts lowered water levels in the country’s largest reservoir, Agence France-Presse (AFP) reports.&lt;/p&gt;
    &lt;p&gt;The tombs were discovered along the Mosul Dam reservoir in northern Iraq’s Duhok Province. They are thought to be more than 2,300 years old, likely from the Hellenistic period, when Iraq was under the rule of the Seleucid Empire.&lt;/p&gt;
    &lt;head rend="h4"&gt;Quick fact: The reach of the Seleucid Empire&lt;/head&gt;
    &lt;p&gt;At its peak, the empire stretched from what is now Turkey to the edges of India.&lt;/p&gt;
    &lt;p&gt;A team of archaeologists had surveyed the same area in 2023, also when water levels were low. However, they only spotted parts of the tombs.&lt;/p&gt;
    &lt;p&gt;This time, conditions were different. Iraq is in the midst of one of its driest years on record in nearly a century, according to Al Jazeera. Severe water shortages are threatening the country’s health and safety as water reserves have dwindled to just 8 percent of their full capacity.&lt;/p&gt;
    &lt;p&gt;When water levels in the Mosul Dam reservoir dropped “to their lowest,” archaeologists were able to return and access the tombs, Bekas Brefkany, leader of the site’s archaeological work, tells AFP.&lt;/p&gt;
    &lt;p&gt;“While the receding waters have had negative impacts, for us as archaeologists, they have also provided an opportunity to rediscover areas that had long been hidden underwater,” Brefkany explains to the Art Newspaper’s Hadani Ditmars.&lt;/p&gt;
    &lt;p&gt;Brefkany and his team are racing to excavate the tombs before the dam is flooded again. What they dig up will be transferred to the Duhok Museum for study and preservation. As Brefkany tells the Art Newspaper, he hopes that researchers will eventually be able to “shed more light on causes of death, family ties and the broader social context of these burials.”&lt;/p&gt;
    &lt;p&gt;Iraq has contended with numerous droughts in recent years. They have brought regions of the country to the brink of humanitarian disaster, which experts warn will worsen if the government doesn’t intervene, per Al Jazeera. According to the United Nations, Iraq is one of the countries “most vulnerable to the impact of climate change” due to rising temperatures, frequent sand and dust storms, and water scarcity.&lt;/p&gt;
    &lt;p&gt;But the droughts have also led to archaeological discoveries across the country. In 2022, ruins of a 3,400-year-old city were found in a dried-up section of the Mosul Dam reservoir along the Tigris River. As water levels continue to drop, the archaeologists expect to unearth more artifacts, Nazim Zibari, an archaeologist at the site, tells France 24.&lt;/p&gt;
    &lt;p&gt;“This work that we are doing now is very difficult, complex and it takes time,” Zibari says.&lt;/p&gt;
    &lt;p&gt;Earlier this year, archaeologists found a rare stone relief among the ruins of ancient Assyrian metropolis Nineveh in Mosul, a city in northern Iraq. The artifact depicts important deities alongside Ashurbanipal, the last great king of the Assyrian Empire.&lt;/p&gt;
    &lt;p&gt;Editors’ note, September 17, 2025: This article has been edited to correct a quote that should have been attributed to France 24.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.smithsonianmag.com/smart-news/severe-droughts-in-iraq-reveals-dozens-of-ancient-tombs-created-2300-years-ago-180987347/"/><published>2025-09-17T17:12:15+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45278657</id><title>Tinycolor supply chain attack post-mortem</title><updated>2025-09-17T22:32:38.088369+00:00</updated><content>&lt;doc fingerprint="155065c78032ffc7"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;@ctrl/tinycolor Supply Chain Attack Post-mortem&lt;/head&gt;
    &lt;head rend="h2"&gt;TL;DR&lt;/head&gt;
    &lt;p&gt;A malicious GitHub Actions workflow was pushed to a shared repo and exfiltrated a npm token with broad publish rights. The attacker then used that token to publish malicious versions of 20 packages, including &lt;code&gt;@ctrl/tinycolor&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;My GitHub account, the @ctrl/tinycolor repository were not directly compromised. There was no phishing involved, and no malicious packages were installed on my machine and I already use pnpm to avoid unapproved postinstall scripts. There was no pull request involved because a repo admin does not need a pull request to add new github actions.&lt;/p&gt;
    &lt;p&gt;GitHub/npm security responded quickly, unpublishing the malicious versions. I followed by releasing clean versions to flush caches, as advised.&lt;/p&gt;
    &lt;p&gt;For broader context, see Socket’s write-up or StepSecurity’s analysis. For community discussion, see this Hacker News post, which spent 24 hours on the front page. I’m also finding this wiz.io post helpful.&lt;/p&gt;
    &lt;head rend="h2"&gt;How I Found Out&lt;/head&gt;
    &lt;p&gt;On September 15 around 4:30 PM PT, Wes Todd DM’d me on Bluesky and looped me into the OpenJS Foundation Slack. By that point, Wes had already alerted GitHub/npm security, who were compiling lists of affected packages and rapidly unpublishing compromised versions.&lt;/p&gt;
    &lt;p&gt;Early guidance (attributed to Daniel Pereira) was to look for suspicious &lt;code&gt;Shai-Hulud&lt;/code&gt; repos or branches. I wasn’t able to find any of these repos or branches on my own personal repos. The mystery was: how was I impacted at all?&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Shai-Hulud was the Fremen term for the sandworm of Arrakis. - dune wiki&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h2"&gt;What Actually Happened&lt;/head&gt;
    &lt;p&gt;A while ago, I collaborated on angulartics2, a shared repository where multiple people still had admin rights. That repo still contained a GitHub Actions secret — a npm token with broad publish rights. This collaborator had access to projects with other people which I believe explains some of the other 40 initial packages that were affected.&lt;/p&gt;
    &lt;p&gt;A new Shai-Hulud branch was force pushed to angulartics2 with a malicious github action workflow by a collaborator. The workflow ran immediately on push (did not need review since the collaborator is an admin) and stole the npm token. With the stolen token, the attacker published malicious versions of 20 packages. Many of which are not widely used, however the @ctrl/tinycolor package is downloaded about 2 million times a week.&lt;/p&gt;
    &lt;p&gt;GitHub and npm security teams moved quickly to unpublish the malicious versions. I then re-published fresh, verified versions of the packages I maintain to flush caches and restore trust.&lt;/p&gt;
    &lt;head rend="h2"&gt;Impact&lt;/head&gt;
    &lt;p&gt;Malicious versions of several packages — including @ctrl/tinycolor — were briefly available on npm before removal. Installing those compromised versions would have triggered a postinstall payload, which is documented in detail by StepSecurity.&lt;/p&gt;
    &lt;p&gt;What should you do if you’ve installed a compromised version of a package? see StepSecurity’s immediate actions.&lt;/p&gt;
    &lt;head rend="h2"&gt;Publishing Setup &amp;amp; Interim Plan&lt;/head&gt;
    &lt;p&gt;I currently use semantic-release with GitHub Actions to handle publishing. The automation is convenient and predictable. I also have npm provenance enabled on many packages, which provides attestations of how they were built. Unfortunately, provenance didn’t prevent this attack because the attacker had a valid token.&lt;/p&gt;
    &lt;p&gt;My goal is to move to npm’s Trusted Publishing (OIDC) to eliminate static tokens altogether. However, semantic-release integration is still in progress: npm/cli#8525.&lt;/p&gt;
    &lt;p&gt;For the forseeable future, @ctrl/tinycolor requires 2FA for publishing, and all tokens have been revoked. Not expecting to merge any new changes anytime soon.&lt;/p&gt;
    &lt;p&gt;For smaller packages, I’ll continue using semantic-release but under stricter controls: no new contributors will be added, and each repo will use a granular npm token limited to publish-only rights for that specific package.&lt;/p&gt;
    &lt;p&gt;Local 2FA based publishing isn’t sustainable, so I’m watching OIDC/Trusted Publishing closely and will adopt it as soon as it fits the workflow.&lt;/p&gt;
    &lt;p&gt;I plan to continue using pnpm that prevents unapproved postinstall scripts from being run and I’ll look into adding pnpm’s new minimumReleaseAge setting.&lt;/p&gt;
    &lt;head rend="h2"&gt;Publishing Wishlist&lt;/head&gt;
    &lt;p&gt;If I could wave a magic wand and design my ideal setup, npm would allow me to require Trusted Publishing (OIDC) with a single toggle for all of my packages. That same toggle would block any release missing provenance, enforcing security at the account level. I’d also want first-class semantic-release support with OIDC and provenance so no static tokens are ever needed.&lt;/p&gt;
    &lt;p&gt;On top of that, I’d like a secure, human-approved publishing option directly in the GitHub UI: a protected workflow_dispatch flow that uses github 2FA approval to satisfy 2FA, without requiring me to publish from my laptop.&lt;/p&gt;
    &lt;p&gt;GitHub Environments — or equivalent workflow protections — should be available without a Pro subscription, or else integrated directly into Trusted Publishing so that security doesn’t depend on the pricing tier.&lt;/p&gt;
    &lt;p&gt;It would be really nice if NPM also had a more visible mark on the package details page to indicate if the package had a postinstall script. Also, once the packages are pulled its not clear what versions were removed and why.&lt;/p&gt;
    &lt;head rend="h2"&gt;Thanks&lt;/head&gt;
    &lt;p&gt;Thanks to Wes Todd, the OpenJS Foundation, and the GitHub/npm security teams for their rapid and coordinated response. Everyone was incredibly fast, helpful, and knowledgeable.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://sigh.dev/posts/ctrl-tinycolor-post-mortem/"/><published>2025-09-17T17:18:38+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45278686</id><title>Depression reduces capacity to learn to actively avoid aversive events</title><updated>2025-09-17T22:32:35.952610+00:00</updated><content>&lt;doc fingerprint="7f0aa0db99234d73"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Abstract&lt;/head&gt;
    &lt;p&gt;Depression and anxiety are often characterized by altered reward-seeking and avoidance, respectively. Yet less is known about the relationship between depressive symptoms and specific avoidance behaviors. To address this gap, we conducted two studies. In Study 1, undergraduates and online workers completed an uninstructed go/no-go avoidance task (NTotal = 465) as a reverse translation of a rodent paradigm. Participants exhibited a wide range of symptom scores on the Beck Depression Inventory-II (BDI-II), ranging from low to severe. In Study 1, cues were used to signal the response type (go/active vs no-go/inhibitory) required to avoid an aversive sound. Higher depressive scores were associated with poorer acquisition of active avoidance in undergraduates. Overall participants showed lower accuracy for active than inhibitory avoidance. To examine whether the better no-go trial performance reflected a prepotent response to avoid aversive outcomes, in Study 2, undergraduates (NTotal = 330) completed a version of the task that included reward-seeking. Here all participants showed higher accuracy for active reward-seeking and inhibitory avoidance, consistent with a prepotent response to inhibit action to avoid aversive consequences. These findings suggest that in young adults, depressive symptoms are associated with difficulty in overriding prepotent responses to actively avoid aversive outcomes in the absence of reward. This work bridges the gap between preclinical animal models and clinical research, offering insights that could guide the development of more targeted clinical interventions.&lt;/p&gt;
    &lt;head rend="h2"&gt;Significance Statement&lt;/head&gt;
    &lt;p&gt;Translational studies in community samples are crucial for bridging the gap between rodent models, which delineate neural circuitry and pharmacology underlying specific behaviors, and the presentation of mood disorders in clinic settings. Building on rodent studies of avoidance behaviors, thought to be linked to depression, this study examines how depressive symptom scores relate to specific types of avoidance. Our findings revealed that higher depressive symptom scores were associated with reduced capacity to learn active avoidance behaviors, which involved overriding a prepotent response to inhibit action to avoid aversive consequences. This work bridges the gap between preclinical animal models and clinical research, offering insights that may guide the development of more targeted clinical interventions.&lt;/p&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;Stimuli that predict aversive events typically evoke avoidance responses aimed at minimizing anticipated threats. Depending on the situation, an active strategy, such as taking an action (walking away), may be most effective, while in other situations, the inhibition of motor output (staying put to avoid detection) may be the more prudent strategy. Although effective in many contexts, these strategies can become maladaptive in depression and anxiety, interfering with goal-directed behavior (Ottenbreit et al., 2014; Haskell et al., 2020).&lt;/p&gt;
    &lt;p&gt;Depression is a leading cause of global disability (Whiteford et al., 2013; World Health Organization, 2017), yet its cognitive and behavioral mechanisms remains to be fully understood. The Altered Computations underlying Decision Making (ACDM) framework posits that decision-making biases perpetuate both depression and anxiety (Bishop and Gagne, 2018). Depression is marked by reduced engagement in reward-seeking, while anxiety by heightened avoidance. In depression, impairments arise from underestimating the probability and value of positive outcomes, and overestimating the effort required to obtain them (Bishop and Gagne, 2018), ultimately leading to reduced engagement in actions. Supporting this view, individuals with major depressive disorder (MDD) choose high-effort, high-reward options less frequently, anticipate fewer positive experiences, and rate them as less pleasurable (MacLeod and Salaminiou, 2001; Treadway et al., 2012; Mukherjee et al., 2020; Horne et al., 2021). Although the ACDM primarily distinguishes between depression-related biases in reward-seeking, it also suggests that effort-related impairments may extend to avoidance contexts and contribute to reduced active avoidance.&lt;/p&gt;
    &lt;p&gt;Despite this, the role of active versus inhibitory forms of avoidance remains underexplored in depression, reflecting broader trends in which negatively valenced systems are predominantly studied in anxiety (Craske et al., 2009). Cognitive theories of depression emphasize a negativity bias in attention, memory, and future expectations (Mogg et al., 2006; Fales et al., 2008; Disner et al., 2011) but often rely on self-report and lack emphasis on behaviors with translational utility for identifying cross-species neurobiological mechanisms.&lt;/p&gt;
    &lt;p&gt;Reinforcement learning tasks offer a translational approach for examining negatively valenced systems and have been applied across neuropsychiatric conditions (Endrass et al., 2011; Palminteri et al., 2012; Reinen et al., 2016; Waltz et al., 2018), including depression (Chase et al., 2010; Robinson et al., 2012; Mkrtchian et al., 2017; Mukherjee et al., 2020; Smith et al., 2023). These studies typically involve probabilistic and reversal learning tasks to probe sensitivity to reward and punishment. Findings remain mixed: some report reward-specific impairments in depression (Robinson et al., 2012), others find broader impairments across valence (Chase et al., 2010; Mkrtchian et al., 2017; Mukherjee et al., 2020) or even heightened punishment sensitivity (Murphy et al., 2003; Nord et al., 2018), while others identify learning-specific impairments (Chase et al., 2010; Mukherjee et al., 2020). These inconsistencies highlight the need for behavioral assays that isolate avoidance processes and align with cross-species models.&lt;/p&gt;
    &lt;p&gt;Translational gaps can stem from task design. Human studies typically use secondary reinforcers (i.e., monetary rewards or feedback), with punishment operationalized as monetary loss, and avoidance inferred from decreased selection of high-loss options, often omitting safety signals. In contrast, animal paradigms use primary reinforcers (i.e., shock) and deterministic contingencies and explicitly distinguish between active and inhibitory avoidance (Piantadosi et al., 2018; Capuzzo and Floresco, 2020). Although functional magnetic resonance imaging (fMRI) studies show overlapping blood-oxygenation-level-dependent (BOLD) responses to primary and secondary aversive cues, regions like the amygdala are more responsive to primary aversive cues (Delgado et al., 2011). Importantly, shared BOLD activation does not necessarily imply equivalent neural mechanisms—especially when task features might differ meaningfully. Translating animal behavioral paradigms to humans has been proposed as a promising strategy to enhance cross-species translation and improve psychiatric treatment development (Kirlic et al., 2017).&lt;/p&gt;
    &lt;p&gt;To address these gaps, we adapted a validated rodent task designed to assess both active and inhibitory avoidance (Piantadosi et al., 2018; Capuzzo and Floresco, 2020) and deployed it in a large online sample. While prior human studies have included related features, our avoidance task was modeled to parallel the original rodent paradigm. Our aim was to examine how depressive symptom severity relates to the ability to learn and flexibly implement active and inhibitory avoidance strategies. Using a dimensional approach aligned with Research Domain Criteria (RDoC) principles, we recruited a nonclinical sample reporting a broad range of depressive symptoms. We hypothesized that higher depressive symptom scores would be associated with impairments in active—but not inhibitory—avoidance, consistent with ACDM predictions of reduced behavioral engagement stemming from effort overestimation.&lt;/p&gt;
    &lt;head rend="h2"&gt;Materials and Methods&lt;/head&gt;
    &lt;head rend="h3"&gt;Study 1 (avoidance)&lt;/head&gt;
    &lt;head rend="h4"&gt;Participants&lt;/head&gt;
    &lt;p&gt;We conducted a power analysis using G*Power to detect a small effect size &lt;/p&gt;
    &lt;head rend="h4"&gt;Materials&lt;/head&gt;
    &lt;head rend="h5"&gt;Stimuli&lt;/head&gt;
    &lt;p&gt;The task was created in PsychoPy 2020.1 (RRID: SCR_006571) and distributed via Pavlovia (www.pavlovia.org; Peirce et al., 2019). Simple shapes signaled the type of response (active vs inhibitory) required to avoid an aversive sound. Coauthor I.D.D. recorded a set of screeching and scraping sounds (i.e., knife on glass, fork on plate, metal on slate), from which 45 were pilot-tested for unpleasantness and salience (N = 45). Using 9-point Likert scales, eight sounds with the highest combined ratings (unpleasantness: M = 6.87–7.57; salience: M = 5.82–6.83) and lowest variance were selected. These eight aversive sounds were randomly presented on failed trials and were found to be highly motivating. In Study 1, 92.46% of participants who responded to a debriefing question (N = 464) endorsed the aversive sounds as motivating to avoid. Rapid acquisition of instrumental avoidance responses further supports the functional aversiveness of the stimuli. On successful trials, a white border around the gray background signaled safety.&lt;/p&gt;
    &lt;head rend="h5"&gt;Measures&lt;/head&gt;
    &lt;p&gt;Depressive and anxiety symptom scores were derived from the clinically validated Beck Depression Inventory-II (BDI-II; Beck et al., 1988b; Beck et al., 1996) and the Beck Anxiety Inventory (BAI; Beck et al., 1988a), respectively. One question (suicidality ideation) was removed from the BDI-II for ethical considerations. BDI-II symptom scores were calculated as a proportion score (BDI-IIscore/BDI-IImax_possible_score) for each participant. Similarly, BAI scores are reported as proportion scores (BAIscore/BAImax_possible_score) for consistency and comparability.&lt;/p&gt;
    &lt;head rend="h4"&gt;Procedure&lt;/head&gt;
    &lt;p&gt;Participants were tested on a computer-based avoidance task that was reverse-translated from a rodent operant paradigm assessing active/inhibitory avoidance—with some modifications (Piantadosi et al., 2018; Capuzzo and Floresco, 2020). Prior to the avoidance task, participants completed an effort calibration and a volume calibration to control for differences in physical ability and computer systems (see https://osf.io/5sepm/).&lt;/p&gt;
    &lt;head rend="h5"&gt;Active/inhibitory avoidance task&lt;/head&gt;
    &lt;p&gt;Specific shapes (circle or squares; counterbalanced) signaled active (“Go”) versus inhibitory (“No-Go”) responses required to avoid a highly aversive sound. The avoidance task consisted of three task stages: acquisition, intermixed, and reversal (Fig. 1A). (1) The acquisition stage required learning an active avoidance response. During the acquisition stage, participants had to reach a criterion performance of 80% successful trials within the previous 20 trials (maximum 120 trials). Once acquisition criterion was reached, participants performed an additional 30 “over-learning” active avoidance trials before an unsignaled transition into the next task stage. Participants failing to reach criterion performance during the acquisition stage were excluded from data analysis. (2) The intermixed stage required participants to learn the inhibitory avoidance response while flexibly deploying both active and inhibitory responses. This stage consisted of 120 avoidance trials (60 active, 60 inhibitory), presented in a pseudorandomized order. (3) The reversal stage also consisted of 120 avoidance trials (60 active, 60 inhibitory; pseudorandomized), but with active and inhibitory response contingencies reversed. The multiple task stages allowed us to assess distinct patterns in the acquisition and expression of active/inhibitory avoidance, as well as reversal learning. Importantly, participants were not instructed about the cue–response contingencies to allow the acquisition through reinforcement, to mirror the rodent paradigm the task was translated from.&lt;/p&gt;
    &lt;p&gt;Trials began with a fixation cross onscreen (ISI; 2,000 ms; jittered 1,200 ms). Active avoidance required an effortful response—specifically, 3, 4, or 5 rapid button presses (criterion determined during effort calibration test). On successful active trials (Fig. 1B), participants made the required response within the cue period (≤1,200 ms), resulting in the avoidance of the aversive sound and the presentation of a safety signal (1,000 ms). On failed active trials (Fig. 1C), either an insufficient response or no response within the cue period triggered the aversive sound (1,000 ms). On inhibitory trials, participants were required to withhold responding. On successful inhibitory trials (Fig. 1D), participants made no button presses during the cue period (1,200 ms), resulting in the avoidance of the aversive sound and the presentation of a safety signal (1,000 ms). On failed inhibitory trials (Fig. 1E), an erroneous button press triggered the aversive sound. A graphical overview of the avoidance task is provided in Figure 1.&lt;/p&gt;
    &lt;head rend="h4"&gt;Statistical analysis&lt;/head&gt;
    &lt;p&gt;All analyses were conducted in R 4.2.1 (R Core Team, 2013) using RStudio (Booth et al., 2018). Primary outcome measures included proportion correct for active and inhibitory trials across task stages and the number of trials to criterion during acquisition. Within-subjects ANOVAs were used except where otherwise stated. Significant main effects or interactions were followed by pairwise comparisons using the emmeans package (Searle et al., 1980; Lenth, 2017), with Tukey's honest significant difference (HSD) correction. Between-subject ANOVAs tested sex and sample effects on BDI-II scores. To examine individual differences, we used regression and linear mixed models (lmerTest; fit by REML, t tests using Satterthwaite's method; Bates et al., 2015; Kuznetsova et al., 2017) to assess BDI-II scores effects on task performance. To account for multiple comparisons, the Benjamini–Hochberg false discovery rate (FDR) correction was applied (Benjamini and Hochberg, 1995). We present only the BDI-II analyses in the main text, while corresponding analyses for BAI scores are presented in Extended Data (Extended Data Figs. 2-1, 4-1; Extended Data Tables 3-1, 3-3).&lt;/p&gt;
    &lt;head rend="h3"&gt;Study 2 (reward-seeking/avoidance)&lt;/head&gt;
    &lt;head rend="h4"&gt;Participants&lt;/head&gt;
    &lt;p&gt;Undergraduate participants (N = 771) from the University of British Columbia Psychology Human Subjects Pool were recruited to perform a reward-seeking/avoidance task. Power analysis procedures were identical to Study 1. Recruitment focused exclusively on undergraduates, as effects in Study 1 were strongest in this population. Compensation was identical to the undergraduate sample in Study 1. To motivate performance during reward-seeking trials, participants were told their accumulated points would contribute to the value of a gift card, although participants ultimately received a $5 gift card regardless of performance. Exclusion criteria were similar to Study 1, with the added requirement that participants reach criterion accuracy during acquisition for both reward-seeking and avoidance trials independently. Because the task was designed as a reinforcement-based learning paradigm—with minimal instructions, no explicit information about contingencies, and no practice trials—and given variability in motivation among undergraduates completing online studies for credit, exclusions rates were higher than expected, resulting in lower-than-ideal power. For details on participant exclusion rates, see Discussion and Extended Data (Extended Data Table 1-1). After cleaning, the final sample included N = 330 participants (Nfemale = 245; Nmale = 85). The study was approved by the University of British Columbia Behavioral Research Ethics Board (BREB) under certificate H20-01388. Demographic information for Study 2 can be found in Table 1.&lt;/p&gt;
    &lt;head rend="h3"&gt;Table 1-1&lt;/head&gt;
    &lt;p&gt;Download Table 1-1, TEX file.&lt;/p&gt;
    &lt;head rend="h4"&gt;Materials&lt;/head&gt;
    &lt;head rend="h5"&gt;Stimuli and measures&lt;/head&gt;
    &lt;p&gt;The task was implemented using PsychoPy and Pavlovia (same as Study 1) with modification to incorporate reward-seeking trials. Stimuli included four simple shapes (blue; square, circle, triangle, hexagon) counterbalanced across response type (active vs inhibitory) and motivational context (reward-seeking vs avoidance). As in Study 1, participants completed questionnaire measures, effort, and volume calibrations procedures.&lt;/p&gt;
    &lt;head rend="h5"&gt;Mixed-motivation go/no-go task&lt;/head&gt;
    &lt;p&gt;The mixed-motivation task consisted of two stages: (1) an acquisition stage, where participants learned active reward-seeking and active avoidance responses, and (2) an intermixed stage, which required the flexible expression of active and inhibitory responses across reward-seeking and avoidance contexts. During the acquisition stage, participants had to reach 80% accuracy within the previous 20 trials, independently for both active reward-seeking and active avoidance trials. After reaching the acquisition criterion, participants completed 24 “over-learning” trials (12 reward-seeking and 12 avoidance) before an unsignaled transition into the intermixed stage. Participants who failed to reach criterion were excluded from analysis. The intermixed stage consisted of 240 trials (60 of each type—active reward-seeking, inhibitory reward-seeking, active avoidance, inhibitory avoidance), presented in a pseudorandomized order. The reversal stage used in Study 1 was omitted.&lt;/p&gt;
    &lt;p&gt;Trials began with a fixation cross (ISI; 2,000 ms; jittered 1,200 ms). Active responses required 3, 4, or 5 button presses within the 1,200 ms cue period (threshold determined during effort calibration). On successful trials, participants either earned 5 points or avoided an aversive sound, depending on the motivational context. Successful reward-seeking trials provided a reward signal (1,000 ms; white border), while successful avoidance trials were followed by a safety signal (1,000 ms; white border). On failed trials, participants either received no points (reward-seeking) or were presented with an aversive sound (avoidance). Points accumulated were displayed on reward-seeking trials, and a musical tone (C major chord; 1,100 ms) played each time participants earned an additional 25 points.&lt;/p&gt;
    &lt;head rend="h4"&gt;Statistical analysis&lt;/head&gt;
    &lt;p&gt;Analytical procedures followed Study 1. Accuracy (proportion correct) and trials to criterion during acquisition were the primary outcomes. Linear mixed models tested BDI-II symptom scores effects on active and inhibitory accuracy across motivational contexts. FDR corrections were used for multiple comparisons.&lt;/p&gt;
    &lt;head rend="h3"&gt;Code accessibility&lt;/head&gt;
    &lt;p&gt;No computational neuroscience models were developed for this study. However, extended data and code used to conduct the linear mixed models are available at https://osf.io/5sepm/.&lt;/p&gt;
    &lt;head rend="h2"&gt;Results&lt;/head&gt;
    &lt;head rend="h3"&gt;Study 1 (avoidance)&lt;/head&gt;
    &lt;head rend="h4"&gt;Demographics&lt;/head&gt;
    &lt;p&gt;To assess differences between undergraduates and online workers, we first compared self-reported depressive and anxiety symptom scores. There was no difference in depressive symptom scores (F(1,463) = 0.34, p = 0.56; Fig. 2A), but undergraduates reported significantly higher anxiety symptom scores compared with online workers (F(1,463) = 13.84, p &amp;lt; 0.001; Extended Data Fig. 2-1). Sex and gender responses were highly congruent (&amp;gt;96%); due to limited statistical power for non-cis gender categories, subsequent analyses refer to sex only. Females reported higher depressive (F(1,463) = 7.96, p &amp;lt; 0.01; Fig. 2B) and higher anxiety (F(1,463) = 33.63, p &amp;lt; 0.001; Extended Data Fig. 2-1) symptom scores than males. Finally, there was a significant age difference between samples (F(1,462) = 299.8, p &amp;lt; 0.001), with undergraduates being younger on average compared with online workers (Extended Data Fig. 2-2).&lt;/p&gt;
    &lt;head rend="h3"&gt;Figure 2-1&lt;/head&gt;
    &lt;p&gt;Study 1: Distribution of Anxiety Scores Across Samples and Sexes. Density plots representing the distribution of Beck Anxiety Inventory (BAI) scores. A) Anxiety score distributions by sample: Undergraduates (red) and Online Workers (blue). B) Anxiety score distributions by sex: Female (red) and Male (blue). The x-axis represents proportion scores, where raw BAI scores, ranging from 0-63, have been divided by the maximum possible score (63) to produce a proportion between 0 and 1. This adjustment was made for comparability between the BDI-II and BAI scales. The labels on the x-axis -- Minimal (0-7), Mild-Moderate (8-25), Severe (26-63) -- reflect typical ranges of raw scores for ease of interpretation. Dashed vertical lines represent the mean BAI score for each group. In panel A, a significant difference in anxiety levels between sample groups is indicated (p &amp;lt; .001), with undergraduates scoring higher on average than online workers. In panel B, a significant difference in anxiety levels between sexes is indicated (p &amp;lt; .001), with females scoring higher on average than males. Download Figure 2-1, TIF file.&lt;/p&gt;
    &lt;head rend="h3"&gt;Figure 2-2&lt;/head&gt;
    &lt;p&gt;Study 1: Age Distribution Across Samples. Density plot representing the distribution of ages for undergraduates (red) and online workers (blue). Dashed vertical lines represent the mean age for each group. A significant difference in age between the samples are indicated (p &amp;lt; .001), with online workers being older on average compared to undergraduates. Download Figure 2-2, TIF file.&lt;/p&gt;
    &lt;head rend="h4"&gt;Avoidance task&lt;/head&gt;
    &lt;head rend="h5"&gt;Within-subject results&lt;/head&gt;
    &lt;p&gt;Acquisition. The acquisition task stage assessed initial learning of the active avoidance response. Participants showed robust acquisition, with an average accuracy of 0.79 (SD = 0.15; Fig. 3A). The mean number of trials to reach criterion (≥80% correct in 20 trial period) was 29.65 (SD = 18.42; range, 16–120 trials; Fig. 4A). Higher BDI-II scores were associated with a greater number of trials needed to reach criterion during acquisition, but this effect was specific to undergraduates (Fig. 4B; see https://osf.io/5sepm/).&lt;/p&gt;
    &lt;head rend="h3"&gt;Figure 4-1&lt;/head&gt;
    &lt;p&gt;Study 1: Trials to Criterion for Active Avoidance During the Acquisition Stage. A) Number of trials required to reach criterion for all participants in the avoidance task. Individual data points (green circles) represent the number of trials each participant required to reach the criterion of 80% correct responses within 20-trial period during acquisition. B) Interaction between anxiety scores (BAI proportion scores) and the sample group (Undergraduates vs. Online Workers) predicting trials to criterion for active avoidance. The regression lines show the relationship between anxiety scores and trials to criterion for each sample, with a stronger effect observed in undergraduates (β = 16.14) compared to online workers (β = -3.81). A significant main effect of BAI scores (p &amp;lt; .01) and a significant BAI × Sample interaction (p &amp;lt; .05) are indicated. Download Figure 4-1, TIF file.&lt;/p&gt;
    &lt;p&gt;Intermixed and reversal. The intermixed task stage assessed participants’ ability to switch between active and inhibitory responses using discriminative cues, while the reversal task stage assessed behavioral flexibility when cue–response contingencies were reversed. A 2 × 2 within-subjects ANOVA assessing proportion correct, with Avoidance Type (active, inhibitory) and Task Stage (intermixed, reversal) as within-subjects factors, revealed a significant effect of Avoidance Type and Task Stage, and a significant interaction (Table 2). Follow-up analysis revealed higher accuracy on inhibitory compared with active trials in both the intermixed (MInhibitory = 0.90, SD = 0.06; MActive = 0.87, SD = 0.12; t(711) = −4.74, p &amp;lt; 0.001; Fig. 3B) and reversal stages (MInhibitory = 0.90, SD = 0.07; MActive = 0.82, SD = 0.15; t(711) = −12.18, p &amp;lt; 0.001; Fig. 3C). Accuracy on active trials was also higher in the intermixed compared with the reversal stage (t(877) = 10.49, p &amp;lt; 0.001), whereas inhibitory accuracy did not differ by stage (t(877) = 0.81, p = 0.42).&lt;/p&gt;
    &lt;head rend="h5"&gt;Between-subject results&lt;/head&gt;
    &lt;p&gt;Depressive symptom scores and active avoidance accuracy. To examine the relationship between depressive symptom scores and active avoidance accuracy, we used a linear mixed model with BDI-II symptom scores (z-normalized, grand-mean centered) as the primary predictor. The model included Sex (female, male), Task Stage (acquisition, intermixed, reversal), and Sample (undergraduates, online workers) as fixed effects and Participant as a random intercept. Proportion correct on active trials was also z-normalized (grand-mean centered). To ensure model stability, we adopted a simplified random-effects structure that excluded a random slope for Task Stage. As shown in Table 3, the model revealed a significant main effect of BDI-II (β = −0.230, SE = 0.074, p = 0.009), indicating that higher depressive symptoms were associated with lower active avoidance accuracy when all other variables were at their reference levels (i.e., female, acquisition, undergraduates). After controlling for multiple comparisons, there were no significant interactions between BDI-II and Sex or Sample. However, we observed a significant interaction between BDI-II and Task Stage, with the relationship between depressive symptoms and active avoidance accuracy changing in the intermixed (β = 0.300, SE = 0.083, p = 0.003) and reversal stages (β = 0.215, SE = 0.083, p = 0.041), relative to acquisition. These interactions suggest that the negative relationship between depressive symptoms and active avoidance accuracy was strongest during initial learning (acquisition) and was attenuated at later stages when avoidance responses are well-learned or inhibitory control was required (Fig. 5).&lt;/p&gt;
    &lt;head rend="h3"&gt;Table 3-1&lt;/head&gt;
    &lt;p&gt;Download Table 3-1, TEX file.&lt;/p&gt;
    &lt;head rend="h3"&gt;Table 3-2&lt;/head&gt;
    &lt;p&gt;Download Table 3-2, TEX file.&lt;/p&gt;
    &lt;head rend="h3"&gt;Table 3-3&lt;/head&gt;
    &lt;p&gt;Download Table 3-3, TEX file.&lt;/p&gt;
    &lt;p&gt;Depressive symptom scores and inhibitory avoidance accuracy. A similar linear mixed model was used to examine the relationship between depressive symptom scores (BDI-II symptom scores, z-normalized, grand-mean centered) and inhibitory avoidance accuracy (z-normalized, grand-mean centered). The model included Sex (female, male), Task Stage (intermixed, reversal), and Sample (undergraduates, online workers) as fixed effects and Participant as a random intercept. No main effects or interactions involving BDI-II were significant (Extended Data Table 3-2), suggesting that depressive symptoms were not associated with inhibitory avoidance performance using this task.&lt;/p&gt;
    &lt;head rend="h3"&gt;Study 2 (reward-seeking/avoidance)&lt;/head&gt;
    &lt;p&gt;In Study 1, participants showed lower accuracy on active compared with inhibitory avoidance trials. However, it remained unclear whether this effect was driven by conflict arising from a prepotent tendency to inhibit action under threat (Bolles, 1970; Pessoa, 2009; Wendt et al., 2017) or by a preference to reduce effort expenditure due to the additional demands of effortful active responses (Hogan et al., 2020; Forys et al., 2023). To address this, Study 2 used a mixed-motivation task that assesses both active and inhibitory responses within reward-seeking and avoidance contexts in undergraduates. Here, the design manipulated the congruency between motivational context (reward-seeking vs avoidance) and instrumental response (active vs inhibitory), allowing for analysis of how motivational context shapes action tendencies. Moreover, because the ACDM framework proposes that depression is associated with altered reward-seeking and effort-related decision-making (Bishop and Gagne, 2018), we examined whether individual differences in depressive symptom scores would differentially affect behavior across motivational contexts. This design allowed for a detailed examination of both reward-seeking and avoidance behaviors, considering their active and inhibitory dimensions.&lt;/p&gt;
    &lt;p&gt;We hypothesized that task accuracy would be highest for inhibitory avoidance and active reward-seeking, as these behaviors are contextually aligned with prepotent response tendencies—inhibiting action to avoid threat and initiating action to obtain reward. Furthermore, we expected that participants with higher depressive symptom scores would exhibit reduced accuracy in active reward-seeking, consistent with predictions of diminished behavioral engagement due to effort demand overestimation and/or reward undervaluation. A graphical overview of the mixed-motivation task is provided in Figure 6.&lt;/p&gt;
    &lt;head rend="h4"&gt;Demographics&lt;/head&gt;
    &lt;p&gt;Females reported marginally higher levels of depressive symptoms (F(1,328) = 3.24, p = 0.0729) and significantly higher levels of anxiety symptoms (F(1,328) = 12.99, p &amp;lt; 0.001) compared with males (Fig. 7B; Extended Data Fig. 7-1). There was no significant age difference between sex (F(1,328) = 0.112, p = 0.738).&lt;/p&gt;
    &lt;head rend="h3"&gt;Figure 7-1&lt;/head&gt;
    &lt;p&gt;Study 2: Distribution of Anxiety Scores in Undergraduates and Across Sexes. Density plots representing the distribution of Beck Anxiety Inventory (BAI) scores. A) Anxiety score distributions in full undergraduate sample (red). B) Anxiety score distributions by sex: Female (red) and Male (blue). The x-axis represents proportion scores, where raw BAI scores, ranging from 0-63, have been divided by the maximum possible score (63) to produce a proportion between 0 and 1. This adjustment was made for comparability between the BDI-II and BAI scales. The labels on the x-axis -- Minimal (0-7), Mild-Moderate (8-25), Severe (26-63) -- reflect typical ranges of raw scores for ease of interpretation. Dashed vertical black line represents mean in full sample. Dashed vertical-coloured lines represent the mean BAI score for each sex. In panel B, a significant difference in anxiety levels between sexes is indicated (p &amp;lt; .001), with females scoring higher on average than males. Download Figure 7-1, TIF file.&lt;/p&gt;
    &lt;head rend="h3"&gt;Figure 7-2&lt;/head&gt;
    &lt;p&gt;Study 2: Age Distribution in Undergraduates. Density plot representing the distribution of ages for undergraduates (red). Dashed vertical black line represent the mean age. Download Figure 7-2, TIF file.&lt;/p&gt;
    &lt;head rend="h4"&gt;Mixed-motivation go/no-go task&lt;/head&gt;
    &lt;head rend="h5"&gt;Acquisition&lt;/head&gt;
    &lt;p&gt;Participants successfully learned both active reward-seeking and avoidance responses, as indicated by the number of trials to criterion (reward-seeking: M = 46.94, SD = 18.09; avoidance: M = 51.72, SD = 19.90). A one-way within-subjects ANOVA revealed a significant effect of Motivational Context on the number of trials to criterion, with more trials needed to acquire active avoidance than reward-seeking (F(1,329) = 30.96, p &amp;lt; 0.001; Fig. 8A). To test whether depressive symptoms predicted trials to criterion, we fit a linear mixed model including BDI-II scores, Sex, and Motivational Context. No main or interaction effect of BDI-II was observed. Motivational context significantly affected acquisition accuracy, with lower proportion correct on active avoidance (M = 0.774, SD = 0.135) compared with active reward-seeking (M = 0.819, SD = 0.137; F(1,329) = 52.59, p &amp;lt; 0.001; Fig. 8B). To assess how this difference varied over time, we analyzed accuracy across the first six trial blocks (where all participants had data). Accuracy improved across blocks (main effect of block) and remained higher for reward-seeking trials compared with avoidance trials (main effect of Motivational Context; Table 4). While this difference persisted across blocks 1–5 (t's(1629) &amp;gt; 2.56, p's &amp;lt; 0.01), it converged by block 6 (t(1,629) = 1.59, p = 0.11; Fig. 8C), suggesting slower acquisition for active avoidance than reward-seeking.&lt;/p&gt;
    &lt;head rend="h5"&gt;Intermixed&lt;/head&gt;
    &lt;p&gt;The intermixed stage assessed participants’ ability to flexibly select actions or inhibit responses based on motivational contexts (i.e., reward-seeking vs avoidance). A 2 × 2 within-subjects ANOVA (Motivational Context × Response Type) revealed a significant main effect of Response Type and a significant interaction but no main effect of Motivational Context (Table 5). Follow-up analysis revealed higher accuracy for active reward-seeking than active avoidance (t(658) = 9.92, p &amp;lt; 0.0001) and higher accuracy for inhibitory avoidance compared with inhibitory reward-seeking (t(658) = 9.60, p &amp;lt; 0.0001). In the avoidance context, inhibitory responses were more accurate compared with active responses (t(658) = 10.73, p &amp;lt; 0.0001), consistent with Study 1. There were no accuracy differences in Response Type in the reward-seeking context (t(498) = 1.95, p = 0.21; Fig. 9).&lt;/p&gt;
    &lt;head rend="h4"&gt;Depressive symptom scores and active response accuracy&lt;/head&gt;
    &lt;p&gt;We used a linear mixed model to examine whether depressive symptoms (BDI-II, z-normalized, grand-mean centered) predicted accuracy on active trials (also z-normalized). Fixed effects included Sex (female, male), Task Stage (acquisition, intermixed), and Motivational Context (reward-seeking, avoidance), with Participant as a random intercept. This structure matched Study 1, with motivational context added. Motivational Context significantly influenced accuracy, with lower performance on avoidance trials (avoidance; β =−0.307, SE = 0.075, t(978) = −4.11, p &amp;lt; 0.001). However, BDI-II symptom scores were not significantly associated with active accuracy (β = 0.035, SE = 0.063, t(1,050.90) = 0.56, p = 0.85), nor did they interact with Motivational Context (avoidance; β = 0.038, SE = 0.076, t(978) = 0.496, p = 0.85). Thus, although avoidance reduced active accuracy this effect was not associated with depressive symptom scores. Full model results can be found at https://osf.io/5sepm/.&lt;/p&gt;
    &lt;p&gt;To evaluate whether observed effects were sensitive to reference level selection, we conducted an exploratory series of eight linear mixed models, systematically varying the reference levels for Sex, Task Stage, and Motivational Context. This resulted in 128 tested effects (16 per model, including main effects and interactions), and p values were adjusted using Benjamini–Hochberg FDR across all 128 effects. While no significant effects of BDI-II emerged in the initial model, exploratory analyses identified a significant BDI-II × Sex interaction (β = −0.365, SE = 0.121, t(1,050.90) = −3.02, padjusted = 0.026), specifically in the avoidance context during the intermixed stage. This exploratory finding suggests the possibility that sex differences in the relationship between depressive symptoms and instrumental behavior may emerge when active responses are well-learned and inhibitory demands are newly introduced—potentially reflecting sex-specific dynamics in threat processing during later phases of learning. Full model results can be found at https://osf.io/5sepm/.&lt;/p&gt;
    &lt;head rend="h4"&gt;Depressive symptom scores and inhibitory response accuracy&lt;/head&gt;
    &lt;p&gt;A similar linear mixed model was used to examine whether depressive symptom scores (BDI-II, z-normalized) predicted accuracy on inhibitory trials. Fixed effects include Sex (female, male) and Motivational Context (reward-seeking, avoidance) and Participant as a random intercept. Motivational Context significantly affected inhibitory accuracy, with higher performance in the avoidance context (avoidance; β = 0.570, SE = 0.064, t(326) = 8.95, p &amp;lt; 0.001). However, BDI-II symptom scores were not significantly associated with inhibitory accuracy (β = −0.074, SE = 0.063, t(534.47) = −1.18, p = 0.28), nor was there a significant interact with BDI-II and Motivational Context (avoidance; β = 0.030, SE = 0.065, t(326) = 0.47, p = 0.64). Thus, although participants showed lower accuracy for inhibitory reward-seeking trials compared with avoidance trials, this pattern was not associated with depressive symptom severity.&lt;/p&gt;
    &lt;head rend="h2"&gt;Discussion&lt;/head&gt;
    &lt;p&gt;In this study we report that higher depressive scores are associated with a reduced capacity to learn active avoidance behaviors, while no relationship was observed with inhibitory avoidance. Specifically, Study 1 extended rodent research on active and inhibitory avoidance to a human nonclinical sample, revealing that higher depressive symptoms predicted lower accuracy during the acquisition phase of active avoidance (Fig. 5) and a greater number of trials required to reach criterion performance (Fig. 4B). In contrast, depressive symptom scores were not related to performance on inhibitory avoidance trials. Additionally, within-subjects analyses indicated that overall, inhibitory avoidance was performed more readily compared with active avoidance, as indicated by higher accuracy during the intermixed and reversal stages (Fig. 3B,C). Altogether, these findings highlight a selective impairment in active avoidance learning associated with depressive symptoms and underscore the importance of considering how this relationship may vary across different learning phases. This dynamic pattern warrants further investigation into the underlying cognitive and neural processes that constrain avoidance behavior in depression.&lt;/p&gt;
    &lt;p&gt;Our findings in Study 1 partially support the predictions of the ACDM framework, which posit that depression is associated with a greater tendency toward inaction in avoidance contexts (Bishop and Gagne, 2018). Using this framework, the decision to act is calculated as the difference between the product of estimated outcome value and probability and the estimated cost of deploying effort to obtain a desired outcome. In depression, inaction may arise from overestimating effort costs, undervaluing outcomes, or underestimating outcome probability. Notably, because our task used a deterministic reinforcement schedule, outcome uncertainty is unlikely to account for the observed deficit. If overestimation of effort costs were solely responsible for these deficits, one would expect consistent active avoidance impairments across all task stages. However, since effort demands remained constant (i.e., the number of button presses required to obtain the desired outcome) and inaction was most pronounced during the acquisition phase—when fatigue-related effort costs were likely minimal—alternative explanations must be considered. Another possibility is that individuals with elevated levels of depressive symptoms became increasingly sensitive to the aversive outcome over time—effectively overvaluing the punishment and potentially overriding initial biases against deploying effort. Consistent with this interpretation, several studies have demonstrated that individuals with depression show increased sensitivity to negative feedback (Elliott et al., 1997; Eshel and Roiser, 2010), particularly in probabilistic reversal learning tasks, where they are more likely to switch following misleading negative feedback (Murphy et al., 2003; Taylor Tavares et al., 2008). However, other work suggests that the negativity bias in depression may not reflect punishment hypersensitivity per se, but rather blunted responsiveness to reward, resulting in a relative overweighting of negative outcomes (Robinson et al., 2012). Still other studies have reported reduced sensitivity to both reward and punishment in depressed individuals (Mukherjee et al., 2020). This heterogeneity likely reflects differences in task structure (i.e., deterministic vs probabilistic reinforcement), cognitive control demands (i.e., attending to and memorizing cue–response associations), and sample characteristics such as comorbid anxiety, sex, IQ, and medication status. Regardless, our findings suggest that the relationship between depressive symptoms and active avoidance is dynamic, with experience-dependent shifts across phases of avoidance.&lt;/p&gt;
    &lt;p&gt;Clarifying how the neural circuits regulating active avoidance are dynamically engaged over time may offer critical insight into motivational dysfunction in depression. Evidence from both human and animal studies highlights the role of species-specific defensive reactions (SSDRs), where freezing is a prepotent response in aversive contexts (Bolles, 1970; Fanselow, 1994; LeDoux et al., 2017). For successful active avoidance, both humans and rodents must overcome these prepotent defensive responses to engage in instrumental, goal-directed action. From a neural circuitry perspective, considerable progress has been made in understanding the mechanisms underlying the acquisition of active avoidance (LeDoux et al., 2017; Cain, 2019). Early in avoidance training, SSDRs are largely driven by amygdala circuits that promote behavioral suppression. With repeated training, however, ventromedial prefrontal systems (homologs of infralimbic cortex, Area 25 of anterior cingulate) increasingly suppress amygdala activity to reduce freezing and facilitate goal-directed avoidance responses (Moscarello and LeDoux, 2013). These dynamics suggest that individuals with elevated depressive symptoms may exhibit difficulty in suppressing prepotent defensive responses during early learning—potentially due to dysfunction in cortico-limbic-striatal circuits that support the shift from reactive to goal-directed control. This provides a plausible neurobiological mechanism for the symptom-related impairments in active avoidance observed during the acquisition phase, while performance at later stages remains unaffected.&lt;/p&gt;
    &lt;p&gt;Moving to research in humans, the dual competition model (Pessoa, 2009) proposes the effects of emotionally salient stimuli on task performance depends both on the level of arousal evoked by a stimulus and on whether the stimulus aligns with or opposes the action tendency evoked by the stimulus. Prepotent behavioral responses to avoid punishment and approach reward, mediated in part by prefrontal regions, have been reliably observed in human neuroimaging studies (Guitart-Masip et al., 2012; Asci et al., 2019). In depression, disruptions in top-down regulatory control have been linked to reduced activity in dorsolateral and dorsomedial prefrontal cortex (dlPFC, dmPFC) and rostral ACC (rACC), along with elevated and sustained amygdala activity in response to negative feedback or emotional salient stimuli (Siegle et al., 2007; Fales et al., 2008; Taylor Tavares et al., 2008). This pattern may indicate that emotionally salient cues disproportionately influence behavior due to weakened regulatory input from cognitive control systems. As a result, the capacity to override prepotent defensive responses—particularly during early stages of active avoidance learning—may be compromised in depression. Recent work further supports this interpretation, showing that reductions in GABA within the rACC were associated with decreased functional connectivity across cortico-striatal-limbic circuits in females with MDD (Ironside et al., 2021)—a finding especially relevant given our predominantly female sample.&lt;/p&gt;
    &lt;head rend="h3"&gt;Avoidance mechanisms in depression and related disorders&lt;/head&gt;
    &lt;p&gt;To contextualize our findings, it is important to position them within the broader literature on avoidance across psychiatric disorders, highlighting key conceptual differences and points of convergence. For instance, many studies define avoidance as the decreased selection of high-loss options in probabilistic selection tasks—a definition that differs meaningfully from the framework used here but useful for understanding sensitivity to reward and negative feedback. Chase et al. (2010) used a probabilistic selection task to examine feedback learning in individuals with MDD and found reduced learning rates for both positive and negative feedback during training, particularly among individuals with higher anhedonia. This suggests blunted reinforcement learning rather than a valence-specific bias such as altered sensitivity to negative feedback. Nonetheless, this profile is consistent with our observed impairment in active avoidance acquisition, despite differences in task design.&lt;/p&gt;
    &lt;p&gt;Mukherjee et al. (2020) extended this work using probabilistic reversal learning and found that MDD patients—most of whom were medicated—selected fewer rich options following reversals and exhibited reduced win-stay behavior (i.e., less likely to repeat a rewarded choice), but no difference in lose-shift behavior (i.e., switching after punishment). If depression involved heightened punishment sensitivity, an increase in lose-shift behavior would be expected. The absence of this effect supports the idea of diminished reward sensitivity rather than increased responsiveness to punishment. This interpretation aligns with the possibility that symptom-related impairments in active avoidance reflect deficits in safety learning rather than heightened punishment sensitivity that interacts with effort-related biases. Safety learning—the process of learning about cues that predict the absence of threat (Laing et al., 2025)—has been shown to promote instrumental avoidance learning in animals and humans (Fernando et al., 2014; Fisher and Urcelay, 2024). Impaired learning of safety signals may contribute to reduced active avoidance performance, even in aversively motivated contexts. Given that safety learning is supported by amygdala and vmPFC circuitry (Kong et al., 2014), this may offer a more parsimonious explanation for acquisition-specific effects than models emphasizing the accumulation of punishment sensitivity and effort-related bias.&lt;/p&gt;
    &lt;p&gt;Neuromodulator systems may further complicate interpretation, as both serotonin and dopamine are implicated in punishment and reward learning. SSRIs, commonly prescribed in MDD, are known to blunt negative feedback sensitivity (Herzallah et al., 2013). Supporting this, low doses of the antidepressant citalopram—which attenuate serotonin signaling—increase lose-shift behavior and sensitivity to punishment in both rodents and humans (Chamberlain et al., 2006; Bari et al., 2010). However, findings from obsessive compulsive disorder (OCD) populations highlight more nuanced effects of serotonergic modulation: Endrass et al. (2011) found greater sensitivity to negative feedback in medicated OCD patients with elevated depressive symptoms, but only after initial learning—consistent with the idea that punishment sensitivity may build with experience. In contrast, Palminteri et al. (2012) reported no valence-specific effects of medication status in OCD patients using a task previously linking dopamine to punishment learning (Palminteri et al., 2009).&lt;/p&gt;
    &lt;p&gt;Motivational impairments similar to those in depression are also evident in schizophrenia, particularly in relation to altered dopamine signaling. In unmedicated patients, Reinen et al. (2016) found blunted prediction error BOLD signals in the striatum and mPFC for rewards, but intact response to punishment, suggesting D2 tone may selectively dampen reward while keeping punishment signaling intact. Similarly, Waltz et al. (2018) reported reduced differential activation to gain versus loss-avoidance in vmPFC, ACC, and ventral striatum (VS), with diminished activation in VS associated with higher negative symptom scores. Sex differences in dopaminergic responses to loss versus gain have also been observed. Using PET during the monetary incentive delay task, Hahn et al. (2021) found females exhibited heightened VS dopaminergic responses to punishment relative to gain. Together, these findings suggest that disrupted valuation and motivational processes, linked to both dopamine and serotonin signaling, may reflect cortico-striatal-limbic dysfunction as a transdiagnostic mechanism across conditions like OCD, schizophrenia, and depression.&lt;/p&gt;
    &lt;p&gt;Overall, these studies underscore the dynamic nature of avoidance, which may shift with experience (i.e., acquisition, expression, habit) and neuromodulatory state. If punishment sensitivity increases with experience, it may eventually override early inaction driven by effort-related biases. Alternatively, if deficits are more prominent for reward-related signals, disrupted safety learning may play a greater role. Future computational modeling that integrates effort costs, punishment and reward sensitivity, and safety learning mechanisms will be critical for disentangling these processes and clarifying how depressive symptoms influence active avoidance behavior.&lt;/p&gt;
    &lt;head rend="h3"&gt;Motivational context influences accuracy of instrumental actions&lt;/head&gt;
    &lt;p&gt;Study 2 examined whether poorer active avoidance performance reflect a general bias toward effort minimization or context-specific effects by assessing active and inhibitory responses across both reward-seeking and avoidance contexts. While depressive symptom scores were not significantly related to performance, robust within-subjects effects emerged. Participants performed more accurately on trials aligned with their prepotent tendencies—active reward-seeking and inhibitory avoidance—consistent with prior research demonstrating approach biases for reward and withdrawal biases for punishment (Crockett et al., 2009; Guitart-Masip et al., 2012; Mkrtchian et al., 2017; Asci et al., 2019).&lt;/p&gt;
    &lt;p&gt;Prefrontal regions such as the anterior prefrontal cortex (aPFC) and orbitofrontal (OFC) are implicated in overcoming these motivational-action conflicts (Roelofs et al., 2009; Volman et al., 2011). If the poorer performance for active versus inhibitory avoidance observed in Study 1 were driven by a general preference to minimize effort, we would expect a similar pattern for active reward-seeking in Study 2. However, this pattern did not emerge, suggesting that effort bias alone does not account for these findings.&lt;/p&gt;
    &lt;p&gt;Parallel findings in humans and animals suggest that newly learned discriminative cues can differentially influence instrumental behavior depending on whether the context is appetitive or aversive (Talmi et al., 2008; Geurts et al., 2013; Mkrtchian et al., 2017; Nord et al., 2018; Campese, 2021). Consistent with this, participants in the current study more readily inhibited responses in avoidance context than in reward-seeking contexts. Remarkably, rats display similar patterns, with greater accuracy for active responses during reward seeking and greater inhibitory accuracy during avoidance (Dalton et al., 2025).&lt;/p&gt;
    &lt;p&gt;Although these performance differences could be attributed to differences in the motivational value of the reward and the punishment outcomes, this explanation is unlikely. No significant main effect of motivational context was found during the intermixed task stage. Specifically, the average accuracy for reward-seeking and avoidance trials (irrespective of response type) did not differ. This suggests that the outcomes were equally motivating overall and not biased toward one context. Instead, the observed interaction is more consistent with the context-dependent effect of prepotent response tendencies influencing instrumental actions.&lt;/p&gt;
    &lt;p&gt;While depression is typically associated with reduced reward-seeking, the ACDM framework predicts a broader bias toward inaction across both reward-seeking and avoidance contexts, driven by overestimation of effort costs. In Study 1, higher depressive symptom scores were associated with reduced active avoidance performance—consistent with this framework. However, contrary to our hypotheses, depressive symptoms were not significantly associated with active or inhibitory response accuracy in either motivational context.&lt;/p&gt;
    &lt;p&gt;Several key differences may account for these null findings. First, the mixed-motivation task employed an interleaved design, requiring participants to frequently switch between responding to appetitive and aversive stimuli, rather than engaging with each in distinct blocks. This design placed avoidance trials within a broader reward-rich context, attenuating depression-related impairments in active avoidance—potentially due to the prepotent tendency to approach reward. This interpretation aligns with findings from approach-avoidance conflict paradigms—where conditions involving potential reward despite the risk of punishment are more likely to elicit active approach behavior than avoidance-only conditions (Aupperle et al., 2011). Second, the four-condition task structure (active vs inhibitory and reward-seeking vs avoidance) likely imposed greater working memory demands, which have been implicated in reward/punishment learning (Van Der Schaaf et al., 2014). These cognitive demands may have masked the influence of depressive symptoms on performance. Future studies may consider controlling for cognitive load to better isolate symptom-specific effects. Finally, Study 1 took place during the height of the COVID-19 pandemic, a contextual factor that may have influenced affective states and task engagement in ways that were not present during Study 2.&lt;/p&gt;
    &lt;p&gt;Although no association between depressive symptoms were found in Study 2, the robust within-subjects effects suggest this task may be useful for assessing motivated behavior in other psychiatric populations. For example, research on substance use disorder emphasizes the strong motivational salience of reward and punishment related cues, particularly those associated with drug use.&lt;/p&gt;
    &lt;head rend="h3"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;Although depression is often linked with reward-processing deficits like anhedonia (Treadway and Zald, 2011; Treadway et al., 2012), our findings reveal a novel link between symptom severity and impaired active avoidance learning in aversive contexts. A key limitation is whether these results generalize to clinical populations. Depression is increasingly understood as a dimensional condition, with clinical diagnoses reflecting the more severe end of a broader symptom spectrum and avoidance impairments representing a potential transdiagnostic feature (Eaton et al., 2023). Our sample included a wide range of depressive symptom scores, with many participants self-reporting prior diagnoses or scoring above clinical cutoffs, supporting the relevance of our findings to clinical populations. Furthermore, this dimensional approach may offer a more nuanced understanding of symptom-related effects on avoidance behavior and extend to other psychiatric conditions, such as OCD and schizophrenia, that share overlapping motivational and affective features with depression.&lt;/p&gt;
    &lt;p&gt;Another limitation of our study was the higher than expected exclusion rates, which warrant a closer examination of their potential impact on results. Both tasks were designed as reinforcement-based learning paradigms with minimal instructions, no explicit information on cue–response contingencies, and no practice trials. While this design enhances translational relevance, it likely contributed to the variability in participants’ ability to acquire the task contingencies. Although higher exclusion rates were anticipated, the rates observed—39.37% in Study 1 and 57.20% in Study 2—exceeded expectations and were primarily due to failure to meet behavioral performance criteria. However, when considering only exclusions related to questionnaire failures or task noncompletion, rates were consistent with typical online studies (Study 1: 19.17%, Study 2: 19.20%; Suzuki et al., 2021). To assess potential bias, we compared included participants to those who passed attention checks but were later excluded for other reasons (see https://osf.io/5sepm/). In Study 1, excluded participants had significantly higher BAI scores, but not BDI-II scores. While the ACDM framework does not explicitly make predictions about how depressive and anxiety symptoms interact, it implies that their effects may counterbalance one another. In the context of our study, anxiety symptoms could offset the depressive impairments in active avoidance by promoting increased avoidance effort. This antagonistic dynamic suggests that higher exclusion rates may have reduced confounding influences rather than introduce bias. Importantly, BDI-II scores did not differ between included and excluded groups, preserving the validity of our primary analyses. Sex differences in exclusion rates were also observed, with a higher proportion of females excluded. However, both final samples remained predominantly female—the group in which we observed our strongest effects—suggesting any bias would likely underestimate, rather than inflate our findings. For these reasons, we believe the interpretation and relevance of our findings are still valid. However, future adaptations of this task may benefit from optimizing the trade-off between ecological validity and participant retention.&lt;/p&gt;
    &lt;p&gt;Across two studies, we sought to extend rodent research to investigate patterns of active and inhibitory avoidance and reward-seeking in a nonclinical sample varying in depressive symptoms. By integrating self-report and behavioral measures, we aimed to strengthen translational links between preclinical models and depressive symptom severity in humans. Our findings highlight the value of transdiagnostic approaches in a community sample for bridging bench and clinic in understanding psychiatric disorders. Results demonstrate an important link between depressive symptoms and reduced efficacy at learning to override a prepotent response to inhibit action to avoid unpleasant events. Future work should test whether these effects replicate in clinically diagnosed MDD populations, use computational models to probe underlying mechanisms, and apply neuroimaging to evaluate cross-species convergence in neural circuitry.&lt;/p&gt;
    &lt;head rend="h2"&gt;Footnotes&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;The authors declare no competing financial interests.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;We thank Veronica Dudarev for her advice on statistical analysis, as well as the contributions of Imogen Daly for creation and recording sound stimuli, and Karen Ip. This work was supported by the Natural Sciences and Engineering Research Council of Canada (NSERC) grant (#F19-05182) to R.M.T., the UBC Djavad Mowafaghian Centre for Brain Health Innovation Fund Kickstart Research Grant (#F19-05932), the Michael Smith Foundation for Health Research Scholar Award to R.M.T., and an NSERC Postgraduate Scholarship – Doctoral (PGS-D) award to R.J.T.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This is an open-access article distributed under the terms of the Creative Commons Attribution 4.0 International license, which permits unrestricted use, distribution and reproduction in any medium provided that the original work is properly attributed.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.eneuro.org/content/12/9/ENEURO.0034-25.2025"/><published>2025-09-17T17:20:36+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45278740</id><title>DeepSeek writes less secure code for groups China disfavors?</title><updated>2025-09-17T22:32:35.429114+00:00</updated><content>&lt;doc fingerprint="bfec9dba84e66b14"&gt;
  &lt;main&gt;
    &lt;p&gt;The Chinese artificial intelligence engine DeepSeek often refuses to help programmers or gives them code with major security flaws when they say they are working for the banned spiritual movement Falun Gong or others considered sensitive by the Chinese government, new research shows.&lt;/p&gt;
    &lt;p&gt;By Joseph Menn&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;1OpinionGeorge F. WillA seamlessly unserious president&lt;/item&gt;
      &lt;item&gt;2Rachel RoubeinandMariana AlfaroFired CDC leader Susan Monarez told senators about pressure from RFK Jr.&lt;/item&gt;
      &lt;item&gt;3Rachel Roubein,Dan DiamondandMariana AlfaroTakeaways from fired CDC director’s Senate testimony&lt;/item&gt;
      &lt;item&gt;4Anahad O’ConnorWe asked dietitians for healthy high-protein meals. Here’s their list.&lt;/item&gt;
      &lt;item&gt;5Alyssa FowersandRachel LermanWhat the Fed rate cut means for your home, car and credit card loans&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.washingtonpost.com/technology/2025/09/16/deepseek-ai-security/"/><published>2025-09-17T17:24:14+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45279143</id><title>Anthropic irks White House with limits on models’ use</title><updated>2025-09-17T22:32:35.225098+00:00</updated><content>&lt;doc fingerprint="be63df98f5bf2dc2"&gt;
  &lt;main&gt;
    &lt;head rend="h3"&gt;The Scoop&lt;/head&gt;
    &lt;p&gt;Anthropic is in the midst of a splashy media tour in Washington, but its refusal to allow its models to be used for some law enforcement purposes has deepened hostility to the company inside the Trump administration, two senior officials told Semafor.&lt;/p&gt;
    &lt;p&gt;Anthropic recently declined requests by contractors working with federal law enforcement agencies because the company refuses to make an exception allowing its AI tools to be used for some tasks, including surveillance of US citizens, said the officials, who spoke to Semafor on the condition of anonymity.&lt;/p&gt;
    &lt;p&gt;The tensions come at a moment when Donald Trumpâs White House has championed American AI companies as patriotic bulwarks of global competition âÂ and expect the companies to repay that loyalty. The officials said they worried that Anthropic was selectively enforcing its policies based on politics and using vague terminology to allow its rules to be interpreted broadly.&lt;/p&gt;
    &lt;p&gt;For instance, Anthropic currently limits how the FBI, Secret Service and Immigration, and Customs Enforcement can use its AI models because those agencies conduct surveillance, which is prohibited by Anthropicâs usage policy.&lt;/p&gt;
    &lt;p&gt;One of the officials said Anthropicâs position, which has long been in effect, amounts to making a moral judgment about how law enforcement agencies do their jobs.&lt;/p&gt;
    &lt;p&gt;The policy doesnât specifically define what it means by âdomestic surveillanceâ in a law enforcement context and appears to be using the term broadly, creating room for interpretation.&lt;/p&gt;
    &lt;p&gt;Other AI model providers also list restrictions on surveillance, but offer more specific examples and often have carveouts for law enforcement activities. OpenAIâs policy, for instance, prohibits âunauthorized monitoring of individuals,â implying consent for legal monitoring by law enforcement.&lt;/p&gt;
    &lt;p&gt;Anthropic declined to comment.&lt;/p&gt;
    &lt;p&gt;In this article:&lt;/p&gt;
    &lt;head rend="h3"&gt;Know More&lt;/head&gt;
    &lt;p&gt;Anthropicâs decision to limit how law enforcement and national security agencies use its models has turned into a headache for some private contractors that work with those agencies.&lt;/p&gt;
    &lt;p&gt;Thatâs because in some cases, Anthropicâs Claude models â available through Amazon Web Services GovCloud system â are the only top-tier models cleared for top secret security situations, the officials said.&lt;/p&gt;
    &lt;p&gt;Anthropic has a specific service aimed at national security customers and struck a deal with the federal government to offer its services to government agencies for $1 fee.&lt;/p&gt;
    &lt;p&gt;Anthropic also does work with the US Department of Defense, although its policies still prohibit the use of its models for making weapons.&lt;/p&gt;
    &lt;p&gt;Anthropic has clashed with Trump administration officials in the past, when it opposed a proposed law that would have preempted US states from passing AI regulation.&lt;/p&gt;
    &lt;head rend="h3"&gt;Reedâs view&lt;/head&gt;
    &lt;p&gt;Anthropicâs kerfuffle with law enforcement contractors âÂ coming as larger rivals like Google have quietly backed off attempts to enforce progressive politics through their corporate policies âÂ raises a difficult question for the most powerful companies in Silicon Valley: How much should software providers be able to control how their products are used, particularly once they are sold into government agencies?&lt;/p&gt;
    &lt;p&gt;For instance, an agency could pay for a subscription or negotiate a pay-per-use contract with an AI provider, only to find out that it is prohibited from using the AI model in certain ways, limiting its value.&lt;/p&gt;
    &lt;p&gt;Traditional software isnât like that. Once a government agency has access to Microsoft Office, it doesnât have to worry about whether it is using Excel to keep track of weapons or pencils.&lt;/p&gt;
    &lt;p&gt;Itâs also just been generally frowned upon in the government contracting world to âpick and chooseâ how software can be used. But activist employees over the last decade also often pressed their employers to stay out of the defense industry in particular.&lt;/p&gt;
    &lt;p&gt;The tensions between Anthropic and the White House are part of a broader battle between the AI âsafetyâ movement, which has allies at the independent AI startup, and many of its rivals and the Republican administration, which prefer to move faster.&lt;/p&gt;
    &lt;p&gt;One thing protecting Anthropic in all this is that its models perform extremely well. Eventually, though, its politics could end up hurting its government business.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.semafor.com/article/09/17/2025/anthropic-irks-white-house-with-limits-on-models-uswhite-house-with-limits-on-models-use"/><published>2025-09-17T17:57:39+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45279357</id><title>DeepMind and OpenAI win gold at ICPC</title><updated>2025-09-17T22:32:35.055736+00:00</updated><content/><link href="https://codeforces.com/blog/entry/146536"/><published>2025-09-17T18:15:16+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45279384</id><title>WASM 3.0 Completed</title><updated>2025-09-17T22:32:34.793304+00:00</updated><content>&lt;doc fingerprint="f22a885b44e613e8"&gt;
  &lt;main&gt;
    &lt;p&gt;Published on September 17, 2025 by Andreas Rossberg.&lt;/p&gt;
    &lt;p&gt;Three years ago, version 2.0 of the Wasm standard was (essentially) finished, which brought a number of new features, such as vector instructions, bulk memory operations, multiple return values, and simple reference types.&lt;/p&gt;
    &lt;p&gt;In the meantime, the Wasm W3C Community Group and Working Group have not been lazy. Today, we are happy to announce the release of Wasm 3.0 as the new “live” standard.&lt;/p&gt;
    &lt;p&gt;This is a substantially larger update: several big features, some of which have been in the making for six or eight years, finally made it over the finishing line.&lt;/p&gt;
    &lt;p&gt;64-bit address space. Memories and tables can now be declared to use &lt;code&gt;i64&lt;/code&gt; as their address type instead of just &lt;code&gt;i32&lt;/code&gt;. That expands the available address space of Wasm applications from 4 gigabytes to (theoretically) 16 exabytes, to the extent that physical hardware allows. While the web will necessarily keep enforcing certain limits — on the web, a 64-bit memory is limited to 16 gigabytes — the new flexibility is especially interesting for non-web ecosystems using Wasm, as they can support much, much larger applications and data sets now.&lt;/p&gt;
    &lt;p&gt;Multiple memories. Contrary to popular belief, Wasm applications were always able to use multiple memory objects — and hence multiple address spaces — simultaneously. However, previously that was only possible by declaring and accessing each of them in separate modules. This gap has been closed, a single module can now declare (define or import) multiple memories and directly access them, including directly copying data between them. This finally allows tools like wasm-merge, which perform “static linking” on two or more Wasm modules by merging them into one, to work for all Wasm modules. It also paves the way for new uses of separate address spaces, e.g., for security (separating private data), for buffering, or for instrumentation.&lt;/p&gt;
    &lt;p&gt;Garbage collection. In addition to expanding the capabilities of raw linear memories, Wasm also adds support for a new (and separate) form of storage that is automatically managed by the Wasm runtime via a garbage collector. Staying true to the spirit of Wasm as a low-level language, Wasm GC is low-level as well: a compiler targeting Wasm can declare the memory layout of its runtime data structures in terms of struct and array types, plus unboxed tagged integers, whose allocation and lifetime is then handled by Wasm. But that’s it. Everything else, such as engineering suitable representations for source-language values, including implementation details like method tables, remains the responsibility of compilers targeting Wasm. There are no built-in object systems, nor closures or other higher-level constructs — which would inevitably be heavily biased towards specific languages. Instead, Wasm only provides the basic building blocks for representing such constructs and focuses purely on the memory management aspect.&lt;/p&gt;
    &lt;p&gt;Typed references. The GC extension is built upon a substantial extension to the Wasm type system, which now supports much richer forms of references. Reference types can now describe the exact shape of the referenced heap value, avoiding additional runtime checks that would otherwise be needed to ensure safety. This more expressive typing mechanism, including subtyping and type recursion, is also available for function references, making it possible to perform safe indirect function calls without any runtime type or bounds check, through the new &lt;code&gt;call_ref&lt;/code&gt; instruction.&lt;/p&gt;
    &lt;p&gt;Tail calls. Tail calls are a variant of function calls that immediately exit the current function, and thereby avoid taking up additional stack space. Tail calls are an important mechanism that is used in various language implementations both in user-visible ways (e.g., in functional languages) and for internal techniques (e.g., to implement stubs). Wasm tail calls are fully general and work for callees both selected statically (by function index) and dynamically (by reference or table).&lt;/p&gt;
    &lt;p&gt;Exception handling. Exceptions provide a way to locally abort execution, and are a common feature in modern programming languages. Previously, there was no efficient way to compile exception handling to Wasm, and existing compilers typically resorted to convoluted ways of implementing them by escaping to the host language, e.g., JavaScript. This was neither portable nor efficient. Wasm 3.0 hence provides native exception handling within Wasm. Exceptions are defined by declaring exception tags with associated payload data. As one would expect, an exception can be thrown, and selectively be caught by a surrounding handler, based on its tag. Exception handlers are a new form of block instruction that includes a dispatch list of tag/label pairs or catch-all labels to define where to jump when an exception occurs.&lt;/p&gt;
    &lt;p&gt;Relaxed vector instructions. Wasm 2.0 added a large set of vector (SIMD) instructions, but due to differences in hardware, some of these instructions have to do extra work on some platforms to achieve the specified semantics. In order to squeeze out maximum performance, Wasm 3.0 introduces “relaxed” variants of these instructions that are allowed to have implementation-dependent behavior in certain edge cases. This behavior must be selected from a pre-specified set of legal choices.&lt;/p&gt;
    &lt;p&gt;Deterministic profile. To make up for the added semantic fuzziness of relaxed vector instructions, and in order to support settings that demand or need deterministic execution semantics (such as blockchains, or replayable systems), the Wasm standard now specifies a deterministic default behavior for every instruction with otherwise non-deterministic results — currently, this includes floating-point operators and their generated NaN values and the aforementioned relaxed vector instructions. Between platforms choosing to implement this deterministic execution profile, Wasm thereby is fully deterministic, reproducible, and portable.&lt;/p&gt;
    &lt;p&gt;Custom annotation syntax. Finally, the Wasm text format has been enriched with generic syntax for placing annotations in Wasm source code. Analogous to custom sections in the binary format, these annotations are not assigned any meaning by the Wasm standard itself, and can be chosen to be ignored by implementations. However, they provide a way to represent the information stored in custom sections in human-readable and writable form, and concrete annotations can be specified by downstream standards.&lt;/p&gt;
    &lt;p&gt;In addition to these core features, embeddings of Wasm into JavaScript benefit from a new extension to the JS API:&lt;/p&gt;
    &lt;p&gt;With these new features, Wasm has much better support for compiling high-level programming languages. Enabled by this, we have seen various new languages popping up to target Wasm, such as Java, OCaml, Scala, Kotlin, Scheme, or Dart, all of which use the new GC feature.&lt;/p&gt;
    &lt;p&gt;On top of all these goodies, Wasm 3.0 also is the first version of the standard that has been produced with the new SpecTec tool chain. We believe that this makes for an even more reliable specification.&lt;/p&gt;
    &lt;p&gt;Wasm 3.0 is already shipping in most major web browsers, and support in stand-alone engines like Wasmtime is on track to completion as well. The Wasm feature status page tracks support across engines.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://webassembly.org/news/2025-09-17-wasm-3.0/"/><published>2025-09-17T18:16:53+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45279792</id><title>Optimizing ClickHouse for Intel's 280 core processors</title><updated>2025-09-17T22:32:34.470534+00:00</updated><content>&lt;doc fingerprint="fb5f1c762d32084a"&gt;
  &lt;main&gt;&lt;quote&gt;&lt;p&gt;This is a guest post from Jiebin Sun, Zhiguo Zhou, Wangyang Guo and Tianyou Li, performance optimization engineers at Intel Shanghai.&lt;/p&gt;&lt;/quote&gt;&lt;p&gt;Intel's latest processor generations are pushing the number of cores in a server to unprecedented levels - from 128 P-cores per socket in Granite Rapids to 288 E-cores per socket in Sierra Forest, with future roadmaps targeting 200+ cores per socket. These numbers multiply on multi-socket systems, such servers may consist of 400 and more cores. The paradigm of "more, not faster cores" is driven by physical limitations. Since the end of Dennard scaling in the mid-2000s, power density concerns made it increasingly difficult to push single-thread performance further.&lt;/p&gt;&lt;p&gt;For analytical databases like ClickHouse, ultra-high core counts represent a huge opportunity and a complex challenge at the same time. While more cores theoretically mean more power to process tasks in parallel, most databases struggle to utilize the available hardware fully. Bottlenecks for parallel processing like lock contention, cache coherence, non-uniform memory access (NUMA), memory bandwidth, and coordination overhead become significantly worse as the core count increases.&lt;/p&gt;&lt;head rend="h2"&gt;Optimizing for ultra-high core counts #&lt;/head&gt;&lt;p&gt;Over the past three years, I dedicated a part of my professional life to understand and optimize ClickHouse's scalability on Intel Xeon ultra-high core count processors. My work focused on using various profiling and analysis tools - including perf, emon, and Intel VTune - to analyze all 43 ClickBench queries on ultra-high core count servers systematically, identifying bottlenecks, and optimizing the ClickHouse accordingly.&lt;/p&gt;&lt;p&gt;The results have been exciting: individual optimizations routinely deliver speedups of multiple times for individual queries, in some cases up to 10x. The geometric mean of all 43 ClickBench queries consistently improved between 2% and 10% per optimization. The results demonstrate that ClickHouse can be made scale very well on ultra-high core count systems.&lt;/p&gt;&lt;head rend="h2"&gt;The core scaling challenge #&lt;/head&gt;&lt;p&gt;Beyond single-thread performance, several key challenges must be addressed to optimize performance in ultra-high core count systems.&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Cache coherence overhead: Bouncing cache lines costs CPU cycles.&lt;/item&gt;&lt;item&gt;Lock contention: Amdahl's Law becomes brutal for serialized code sections as little as 1% of the overall code.&lt;/item&gt;&lt;item&gt;Memory bandwidth: Utilizing the memory bandwidth effectively is a persistent challenge for data-intensive systems. Proper memory reuse, management and caching becomes critical.&lt;/item&gt;&lt;item&gt;Thread coordination: The cost of synchronizing threads grows super-linearly with the number of threads.&lt;/item&gt;&lt;item&gt;NUMA effects: The memory latency and bandwidth on multi-socket systems differs for local or remote memory.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;This blog post summarizes our optimizations for ClickHouse on ultra-high core count servers. All of them were merged into the main codeline and they now help to speed up queries in ClickHouse deployments around the globe.&lt;/p&gt;&lt;p&gt;Hardware setup: Our work was conducted on Intel's latest generation platforms, including 2 x 80 vCPUs Ice Lake (ICX), 2 x 128 vCPUs Sapphire Rapids (SPR), 1 x 288 vCPUs Sierra Forest (SRF), and 2 x 240 vCPUs Granite Rapids (GNR). SMT (Hyper-threading) was enabled, except on SRF which doesn't support SMT, and high-memory-bandwidth configurations.&lt;/p&gt;&lt;p&gt;Software setup: We used perf, Intel VTune, pipeline visualization, and other custom profiling infrastructure.&lt;/p&gt;&lt;head rend="h2"&gt;The five optimization areas #&lt;/head&gt;&lt;p&gt;Through a systematic analysis of ClickHouse's performance on ultra-high core count systems, I identified five areas with a high potential for optimization. Each area addresses a different aspect of scalability, and together they form a comprehensive approach to unlocking the full potential of ultra-high core count systems.&lt;/p&gt;&lt;p&gt;My journey began with the most fundamental challenge: lock contention.&lt;/p&gt;&lt;head rend="h2"&gt;Bottleneck 1: Lock contention #&lt;/head&gt;&lt;p&gt;According to queue theory, if N threads compete for the same lock, the cycles grows quadratically (N^2). For example, if we go from 8 to 80 cores, lock wait times increase by (80/8)² = 100x. Furthermore, cache coherence traffic for the mutex itself grows linearly with the core count, and the overhead for context switching compounds the problem. In such settings, every mutex becomes a potential scalability obstacle, and seemingly innocent synchronization patterns can bring entire systems to their knee.&lt;/p&gt;&lt;p&gt;The key insight is that lock contention isn't just about removing locks - it's about rethinking more fundamentally how threads coordinate and share state. This requires a multi-pronged approach: reducing the duration of critical sections, replacing exclusive locks (mutexes) with more granular synchronization primitives, and in some cases, eliminating shared state entirely.&lt;/p&gt;&lt;head rend="h3"&gt;Optimization 1.1: Query condition cache (PR #80247) #&lt;/head&gt;&lt;p&gt;After resolving jemalloc page faults (an optimization detailed below), a new hotspot appeared in &lt;code&gt;native_queued_spin_lock_slowpath&lt;/code&gt; which consumed 76% of the CPU time. This function was called from &lt;code&gt;QueryConditionCache::write&lt;/code&gt; on 2×240 vCPU systems.&lt;/p&gt;&lt;p&gt;What is the query condition cache?&lt;/p&gt;&lt;p&gt;ClickHouse’s query condition cache stores the results of WHERE filters, enabling the database to skip irrelevant data. In each SELECT query, multiple threads check if cache entries must be updated based on different criteria:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;the hash of the filter condition (as cache key)&lt;/item&gt;&lt;item&gt;the read mark ranges&lt;/item&gt;&lt;item&gt;whether the currently read part has a final mark&lt;/item&gt;&lt;/list&gt;&lt;p&gt;The query condition cache is read-heavy, i.e. there are far more reads than writes, but the original implementation used exclusive locking for all operations.&lt;/p&gt;&lt;p&gt;Reducing critical paths in read-heavy workloads&lt;/p&gt;&lt;p&gt;This optimization demonstrates the importance of reducing the time spent holding locks, especially write locks in read-heavy code.&lt;/p&gt;&lt;p&gt;With 240 threads within a single query, the original code created a perfect storm:&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Unnecessary write locks: All threads acquired exclusive locks, even when they only read cache entries.&lt;/item&gt;&lt;item&gt;Long critical sections: Expensive updates of cache entries were performed inside exclusive locks.&lt;/item&gt;&lt;item&gt;Redundant work: Multiple threads updated the same cache entries potentially multiple times.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Our optimization uses double-checked locking with atomic operations to resolve these bottlenecks:&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;The code now first checks with atomic reads (no locking), respectively under a shared lock if an update is needed at all (fast path).&lt;/item&gt;&lt;item&gt;Next, the code checks immediately after acquiring an exclusive lock (slow path) if an update is actually required - another thread may have performed the same update in the meantime.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Implementation&lt;/p&gt;&lt;p&gt;Based on PR #80247, the optimization introduces a fast path which checks if an update is needed before acquiring the expensive write lock.&lt;/p&gt;&lt;code&gt;/// Original code
void updateCache(mark_ranges, has_final_mark)
{
    acquire_exclusive_lock(cache_mutex);  /// 240 threads wait here!

    /// Always update marks, even if already in desired state
    for (const auto &amp;amp; range : mark_ranges)
        set_marks_to_false(range.begin, range.end);

    if (has_final_mark):
        set_final_mark_to_false();

    release_lock(cache_mutex);
}
&lt;/code&gt;&lt;code&gt;
/// Optimized code
void updateCache(mark_ranges, has_final_mark)
{
    /// Fast path: Check if update is needed with a cheap shared lock
    acquire_shared_lock(cache_mutex);  /// Multiple threads can read simultaneously

    need_update = false;
    for (const auto &amp;amp; range : mark_ranges)
    {
        if (any_marks_are_true(range.begin, range.end))
        {
            need_update = true;
            break;
        }
    }

    if (has_final_mark &amp;amp;&amp;amp; final_mark_is_true())
        need_update = true;

    release_shared_lock(cache_mutex);

    if (!need_update)
        return;  /// Early out - no expensive lock needed!

    /// Slow path: Actually need to update, acquire exclusive lock
    acquire_exclusive_lock(cache_mutex);

    /// Double-check: verify update is still needed after acquiring lock
    need_update = false;
    for (const auto &amp;amp; range : mark_ranges)
    {
        if (any_marks_are_true(range.begin, range.end))
        {
            need_update = true;
            break;
        }
    }

    if (has_final_mark &amp;amp;&amp;amp; final_mark_is_true())
        need_update = true;

    if (need_update)
    {
        // Perform the actual updates only if still needed
        for (const auto &amp;amp; range : mark_ranges)
            set_marks_to_false(range.begin, range.end);

        if (has_final_mark)
            set_final_mark_to_false();
    }

    release_lock(cache_mutex);
}
&lt;/code&gt;&lt;p&gt;Performance impact&lt;/p&gt;&lt;p&gt;The optimized code delivered impressive performance improvements:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;CPU cycles spend for &lt;code&gt;native_queued_spin_lock_slowpath&lt;/code&gt;reduced from 76% to 1%&lt;/item&gt;&lt;item&gt;The QPS of ClickBench queries Q10 and Q11 improved by 85% and 89%&lt;/item&gt;&lt;item&gt;The geometric mean of all ClickBench queries improved by 8.1%&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;Optimization 1.2: Thread-Local Timer ID (PR #48778) #&lt;/head&gt;&lt;p&gt;ClickHouse's query profiler was frequently creating and deleting a global timer_id variable, causing lock contention during query profiling.&lt;/p&gt;&lt;p&gt;Query profiler timer usage&lt;/p&gt;&lt;p&gt;ClickHouse's query profiler uses POSIX timers to sample thread stacks in periodic intervals for performance analysis. The original implementation:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;created and deleted timer_id frequently during profiling, and&lt;/item&gt;&lt;item&gt;required global synchronization for all operations that read or write the timer.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Usage of shared data structures that needed protection with locks caused significant overhead.&lt;/p&gt;&lt;p&gt;Eliminating global state with thread-local storage&lt;/p&gt;&lt;p&gt;Here, we eliminated lock contention by thread-local storage, removing the need for shared state. Now, each thread has its own timer_id. This avoids shared state and the overhead of thread synchronization. To update a timer, it is no longer required to acquire locks.&lt;/p&gt;&lt;p&gt;Technical solution&lt;/p&gt;&lt;code&gt;/// Original code
class QueryProfiler
{
    static global_mutex timer_management_lock

    void startProfiling()
    {
        timer_id = create_new_timer();  /// Expensive system call

        acquire_exclusive_lock(timer_management_lock);  /// Global lock!
        update_shared_timer_state(timer_id);  /// Modify shared state
        release_lock(timer_management_lock);
    }

    void stopProfiling()
    {
        acquire_exclusive_lock(timer_management_lock);
        cleanup_shared_timer_state(timer_id);
        release_lock(timer_management_lock);

        delete_timer(timer_id);
    }
}
&lt;/code&gt;&lt;code&gt;/// Optimized code
class QueryProfiler
{
    static thread_local timer_id per_thread_timer;
    static thread_local boolean timer_initialized;

    void startProfiling()
    {
        if (!timer_initialized)
        {
            per_thread_timer = create_new_timer();  /// Once per thread
            timer_initialized = true;
        }

        /// Reuse existing timer - no locks, no system calls!
        enable_timer(per_thread_timer);
    }

    void stopProfiling()
    {
        /// Just disable timer - no deletion, no locks!
        disable_timer(per_thread_timer);
    }
}
&lt;/code&gt;&lt;p&gt;Performance impact&lt;/p&gt;&lt;p&gt;The new implementation has the following advantages:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;It eliminated timer-related lock contention hotspots from profiling traces&lt;/item&gt;&lt;item&gt;It reduced timer create/delete system calls through reuse&lt;/item&gt;&lt;item&gt;It makes profiling on ultra-high core count servers more scalable.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Thread-local storage can eliminate lock contention by removing the need for shared state. Global synchronization becomes unnecessary if threads maintain their own state.&lt;/p&gt;&lt;head rend="h2"&gt;Bottleneck 2: Memory management #&lt;/head&gt;&lt;p&gt;Memory optimization on ultra-high core count systems differs a lot from single-threaded memory management. Memory allocators themselves become contention points, memory bandwidth is divided across more cores, and allocation patterns that work fine on small systems can create cascading performance problems at scale. It is crucial to be mindful of how much memory is allocated and how memory is used.&lt;/p&gt;&lt;p&gt;This class of optimizations involves the allocator’s behavior, reducing pressure on memory bandwidth, and sometimes completely rethinking algorithms to eliminate memory-intensive operations altogether.&lt;/p&gt;&lt;head rend="h3"&gt;Optimization 2.1: Jemalloc Memory Reuse Optimization (PR #80245) #&lt;/head&gt;&lt;p&gt;This optimization is motivated by high page fault rates and excessive resident memory usage which we observed for certain aggregation queries on ultra-high core count systems.&lt;/p&gt;&lt;p&gt;Understanding two-level hash tables in ClickHouse&lt;/p&gt;&lt;p&gt;Aggregation in ClickHouse uses different hash tables, depending on the data type, data distribution and data size. Large aggregation states are maintained in ephemeral hash tables.&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;The 1st level consists of 256 static buckets, each pointing to a 2nd level hash table.&lt;/item&gt;&lt;item&gt;2nd level hash tables grow independently of each other.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Memory reuse for two-level hash tables&lt;/p&gt;&lt;p&gt;At the end of an aggregation query, all hash tables used by the query are deallocated. In particular, the 256 sub-hash tables are deallocated and their memory is merged into larger free memory blocks.&lt;/p&gt;&lt;p&gt;jemalloc (as ClickHouse’s memory allocator) unfortunately prevented the reuse of merged memory blocks for future smaller allocations. This is because by default, only memory from blocks up to 64x larger than the requested size can be reused. This issue in jemalloc is very subtle but critical on ultra-high core count systems.&lt;/p&gt;&lt;p&gt;Based on jemalloc issue #2842, we noticed a fundamental problem with jemalloc’s memory reuse for the irregularly-sized allocations typical in two-level hash tables:&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Extent management issue: When large allocations are freed, jemalloc fails to efficiently track and reuse these memory extents.&lt;/item&gt;&lt;item&gt;Size class fragmentation: Memory gets trapped in size classes that don't match future allocation patterns.&lt;/item&gt;&lt;item&gt;Metadata overhead: Excessive metadata structures prevent efficient memory coalescing.&lt;/item&gt;&lt;item&gt;Page fault amplification: New allocations trigger page faults instead of reusing existing committed pages.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;We identified jemalloc's &lt;code&gt;lg_extent_max_active_fit&lt;/code&gt; parameter as the root cause - it was too restrictive for ClickHouse's allocation patterns.&lt;/p&gt;&lt;p&gt;We contributed the fix to jemalloc PR #2842, but jemalloc didn’t have new stable releases for an extended period. Fortunately, we could resolve this issue through jemalloc's configuration parameters at compilation time.&lt;/p&gt;&lt;p&gt;Based on ClickHouse PR #80245, the fix involved tuning jemalloc's configuration parameters:&lt;/p&gt;&lt;code&gt;/// Original jemalloc configuration
JEMALLOC_CONFIG_MALLOC_CONF = "oversize_threshold:0,muzzy_decay_ms:0,dirty_decay_ms:5000"
/// lg_extent_max_active_fit defaults to 6, meaning memory can be reused from extents up to 64x larger than the requested allocation size
&lt;/code&gt;&lt;code&gt;/// Optimized jemalloc configuration
JEMALLOC_CONFIG_MALLOC_CONF = "oversize_threshold:0,muzzy_decay_ms:0,dirty_decay_ms:5000,lg_extent_max_active_fit:8"
/// lg_extent_max_active_fit is set to 8.
/// This allows memory reuse from extents up to 256x larger
/// than the requested allocation size (2^8 = 256x vs default 2^6 = 64x).
/// The 256x limit matches ClickHouse's two-level hash table structure (256 buckets).
/// This enables efficient reuse of merged hash table memory blocks.
&lt;/code&gt;&lt;p&gt;Performance impact&lt;/p&gt;&lt;p&gt;The optimization improved&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;the performance of ClickBench query Q35 by 96.1%,&lt;/item&gt;&lt;item&gt;memory usage (VmRSS, resident memory) and page faults reduced for the same query went down by 45.4% and 71%, respectively.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;The behavior of the memory allocator can have a dramatic impact on ultra-high core count systems.&lt;/p&gt;&lt;head rend="h3"&gt;Optimization 2.2: AST Query Rewriting for Memory Reduction (PR #57853) #&lt;/head&gt;&lt;p&gt;ClickBench query Q29 was memory-bound and bottlenecked in excessive memory accesses caused by redundant computations of the form &lt;code&gt;sum(column + literal)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Understanding the memory bottleneck&lt;/p&gt;&lt;p&gt;ClickBench query Q29 contains multiple sum expressions with literals:&lt;/p&gt;&lt;code&gt;SELECT SUM(ResolutionWidth), SUM(ResolutionWidth + 1), SUM(ResolutionWidth + 2), 
       SUM(ResolutionWidth + 3), SUM(ResolutionWidth + 4), SUM(ResolutionWidth + 5), 
       SUM(ResolutionWidth + 6), SUM(ResolutionWidth + 7), SUM(ResolutionWidth + 8), 
       SUM(ResolutionWidth + 9), SUM(ResolutionWidth + 10), SUM(ResolutionWidth + 11), 
       SUM(ResolutionWidth + 12), SUM(ResolutionWidth + 13), SUM(ResolutionWidth + 14), 
       SUM(ResolutionWidth + 15), SUM(ResolutionWidth + 16), SUM(ResolutionWidth + 17), 
       SUM(ResolutionWidth + 18), SUM(ResolutionWidth + 19), SUM(ResolutionWidth + 20),
       -- ... continues up to SUM(ResolutionWidth + 89)
FROM hits;
&lt;/code&gt;&lt;p&gt;The original query execution&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Loaded column “ResolutionWidth” from storage once,&lt;/item&gt;&lt;item&gt;Compute expressions - 90 times, creating 90 temporary columns (one per expression),&lt;/item&gt;&lt;item&gt;Sum values performing 90 separate aggregation operations on each computed column.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Creating 90 temporary columns and running 90 redundant aggregations obviously created massive memory pressure.&lt;/p&gt;&lt;p&gt;Frontend query optimization for memory efficiency&lt;/p&gt;&lt;p&gt;This optimization demonstrates how better optimizer rules can reduce memory pressure by eliminating redundant computations. The key insight is that many analytical queries contain patterns that can be algebraically simplified.&lt;/p&gt;&lt;p&gt;The optimization recognizes that &lt;code&gt;sum(column + literal)&lt;/code&gt; can be rewritten to &lt;code&gt;sum(column) + count(column) * literal&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Performance impact&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;ClickBench query Q29 sped up by 11.5x on a 2×80 vCPU system.&lt;/item&gt;&lt;item&gt;The geometric mean of all ClickBench queries saw a 5.3% improvement overall.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;More intelligent query plans can be more effective than optimizing execution itself. Avoiding work is better than doing work efficiently.&lt;/p&gt;&lt;head rend="h2"&gt;Bottleneck 3: Increase parallelism #&lt;/head&gt;&lt;p&gt;Fast aggregation is a core promise of any analytical database. From a database perspective, aggregating data in parallel threads is only one part of the equation. It is equally important to merge the local results in parallel.&lt;/p&gt;&lt;p&gt;ClickHouse's aggregation operator has two phases: In the first phase, each thread processes its portion of the data in parallel, creating a local and partial result. In the second phase, all partial results must be merged. If the merge phase is not properly parallelized, it becomes a bottleneck. More threads can actually make this issue worse by creating more partial results to merge.&lt;/p&gt;&lt;p&gt;Solving this issue requires careful algorithm design, smart data structure choices, and a deep understanding how hash tables behave under different load patterns. The goal is to eliminate the serial merge phase and enable linear scaling even for the most complex aggregation queries.&lt;/p&gt;&lt;head rend="h3"&gt;Optimization 3.1: Hash Table Conversion (PR #50748) #&lt;/head&gt;&lt;p&gt;ClickBench query Q5 showed a severe performance degradation as the core count increased from 80 to 112 threads. Our pipeline analysis revealed serial processing in the hash table conversion.&lt;/p&gt;&lt;p&gt;Understanding hash tables in ClickHouse&lt;/p&gt;&lt;p&gt;ClickHouse uses two types of hash tables for hash aggregation:&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Single-level hash tables: This is a flat hash table that is suitable (= faster) for smaller datasets.&lt;/item&gt;&lt;item&gt;Two-level hash tables: This is a hierarchical hash table with 256 buckets. Two-level hash tables are more amendable to large datasets.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;The database chooses the right hash table type based on the size of the processed data: Once a single-level hash table reaches a certain threshold during aggregation, it is automatically converted to a two-level hash table. The code to merge hash tables of different types was serialized.&lt;/p&gt;&lt;p&gt;The serial bottleneck&lt;/p&gt;&lt;p&gt;When merging hash tables from different threads,&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;single-level hash tables were serially merged in a pair-wise manner, e.g. ht1 / ht2 → result, then result / ht3, etc.&lt;/item&gt;&lt;item&gt;two-level hash tables are merged one-by-one as well but the merge is parallelized across buckets.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;In the case of mixed single/two-level hash tables, the single-level hash tables had to be converted to two-level hash tables first (this was a serial process). Once the was done, the resulting two-level hash tables could be merged in parallel.&lt;/p&gt;&lt;p&gt;With Q5, increasing the number of threads from 80 to 112 meant that each thread processes less data. With 80 threads, all hash tables were two-level. With 112 threads, the aggregation ended up with the mixed scenario: some hash tables remained single-level while others became two-level. This caused serialization - all single-level hash tables had to be converted to two-level before parallel merging could take place.&lt;/p&gt;&lt;p&gt;To diagnose the issue, pipeline visualization was a crucial tool. The telltale sign was that the merge phase duration increased with thread count - this is the opposite of what should happen.&lt;/p&gt;&lt;p&gt;Performance degradation with increased core count&lt;/p&gt;Pipeline visualization (max_threads=80) - the merge phase is reasonable Pipeline visualization (max_threads=112) - the merge phase takes 3.2x longer&lt;p&gt;Our optimization parallelizes the conversion phase: instead of converting all single-level hash tables to two-level hash tables one by one (serially), we now convert them in parallel. As each hash table can be converted independently, this eliminates the serial bottleneck.&lt;/p&gt;&lt;code&gt;/// Original code
void mergeHashTable(left_table, right_table)
{
    if (left_table.is_single_level() &amp;amp;&amp;amp; right_table.is_two_level())    
        left_table.convert_to_two_level();  /// Serial conversion blocks threads

    /// Now merge
    merge_sets(left_table, right_table);
}
&lt;/code&gt;&lt;code&gt;/// Optimized code
void mergeHashTableParallel(all_tables)
{
    /// Phase 1: Parallel conversion
    parallel_tasks = [];
    for (const auto &amp;amp; table : all_tables)
    {
        if (table.is_single_level())
        {
            /// Parallel conversion!
            task = create_parallel_task(table.convert_to_two_level());
            parallel_tasks.add(task);
        }
    }

    /// Wait for all conversions to complete
    wait_for_all_tasks(parallel_tasks);

    /// Phase 2: Now all sets are two-level, merge efficiently.
    for (const auto &amp;amp; pair : all_tables)
        merge_sets(pair.left_table, pair.right_table);
}
&lt;/code&gt;&lt;p&gt;Performance impact&lt;/p&gt;&lt;p&gt;The performance did not improve only for Q5 - the optimization enabled linear scaling for any aggregation-heavy query on ultra-high core count systems.&lt;/p&gt;&lt;p&gt;Performance improvement after parallel conversion - Q5 achieves 264% improvement&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;ClickBench query Q5 improved by a 264% on a 2×112 vCPU system,&lt;/item&gt;&lt;item&gt;24 queries achieved &amp;gt;5% improvement,&lt;/item&gt;&lt;item&gt;the overall geometric mean improved by 7.4%&lt;/item&gt;&lt;/list&gt;&lt;p&gt;The optimization demonstrates that scalability isn't just about making things more parallel - it's about eliminating serial sections that grow with parallelism. Sometimes you need to restructure algorithms on a more deep level, not just add more threads.&lt;/p&gt;&lt;head rend="h3"&gt;Optimization 3.2: Single-Level Hash Table Merging (PR #52973) #&lt;/head&gt;&lt;p&gt;We noticed that the performance was also subpar when all hash tables were single-level.&lt;/p&gt;&lt;p&gt;Extending parallel merge to single-level cases&lt;/p&gt;&lt;p&gt;Building on PR #50748, this optimization recognizes that the benefits of parallel merging are not limited to mixed hash tables. Even when all hash tables are single-level, parallel merging can improve performance if the total data size is large enough.&lt;/p&gt;&lt;p&gt;The challenge was to determine when single-level hash tables should be merged in parallel parallel:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;If datasets are too small, parallelization introduces extra overhead.&lt;/item&gt;&lt;item&gt;If datasets are too large, parallelization may not be beneficial enough.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Based on the implementation in PR #52973, the optimization added parallel merges to all single-level cases:&lt;/p&gt;&lt;code&gt;/// Before: Only parallelize mixed-level merges
void parallelizeMergePrepare(hash_tables)
{
    single_level_count = 0;

    for (const auto &amp;amp; hash_table : hash_tables)
        if hash_table.is_single_level():
            single_level_count++;

    /// Only convert if mixed levels (some single, some two-level)
    if single_level_count &amp;gt; 0 and single_level_count &amp;lt; hash_tables.size():
        convert_to_two_level_parallel(hash_tables);
}
&lt;/code&gt;&lt;code&gt;/// Optimized code
void parallelizeMergePrepare(hash_tables):
{
    single_level_count = 0;
    all_single_hash_size = 0;

    for (const auto &amp;amp; hash_table : hash_tables)
        if (hash_table.is_single_level())
            single_level_count++

    /// Calculate total size if all hash tables are single-level
    if (single_level_count == hash_tables.size())
        for (const auto &amp;amp; hash_table : hash_tables)
            all_single_hash_size += hash_table.size();

    /// Convert if mixed levels OR if all single-level with average size &amp;gt; THRESHOLD
    if (single_level_count &amp;gt; 0 and single_level_count &amp;lt; hash_tables.size())
        ||
       (all_single_hash_size / hash_tables.size() &amp;gt; THRESHOLD)
        convert_to_two_level_parallel(hash_tables);
}
&lt;/code&gt;&lt;p&gt;Performance impact&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Performance for single-level merge scenarios improved by 235%&lt;/item&gt;&lt;item&gt;The optimal threshold was determined through systematic testing&lt;/item&gt;&lt;item&gt;There were no regressions on small datasets&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;Optimization 3.3: Parallel Merge with Key Support (PR #68441) #&lt;/head&gt;&lt;p&gt;GROUP BY operations with large hash tables were merged serially.&lt;/p&gt;&lt;p&gt;Extending parallelization to keyed aggregations&lt;/p&gt;&lt;p&gt;The previous two optimizations (3.1 and 3.2) addressed merges without key - simple hash table operations like &lt;code&gt;COUNT(DISTINCT)&lt;/code&gt;. We applied the same optimization to merges with key where hash tables contain both keys and aggregated values that must be combined, e.g. general &lt;code&gt;GROUP BY&lt;/code&gt; semantics.&lt;/p&gt;&lt;p&gt;Performance Impact:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;ClickBench query Q8 improved by 10.3%, Q9 by 7.6%&lt;/item&gt;&lt;item&gt;There were no regressions in other queries&lt;/item&gt;&lt;item&gt;CPU utilization during the merge phase improved&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Parallel merging can be extended to complex aggregation scenarios with careful attention to cancellation and error handling.&lt;/p&gt;&lt;head rend="h2"&gt;Bottleneck 4: Algorithm optimization #&lt;/head&gt;&lt;p&gt;Harnessing the full potential of SIMD instructions is notoriously difficult. Compilers are conservative about vectorization, and database workloads often have complex control flows that inhibit auto-vectorization.&lt;/p&gt;&lt;p&gt;Effective usage of SIMD instructions in databases requires thinking beyond traditional vectorization. Besides processing N data items simultaneously instead of one, one can also utilize parallel SIMD comparisons for smart pruning strategies which lead to less work done overall. This idea is particularly powerful for string operations. These are at the same time frequently used in practice and computationally expensive.&lt;/p&gt;&lt;head rend="h3"&gt;Optimization 4.1: Two-character SIMD string search (PR #46289) #&lt;/head&gt;&lt;p&gt;String search (e.g. plain substring search or LIKE pattern search) is a bottleneck in a lot of queries, for example in ClickBench query Q20.&lt;/p&gt;&lt;p&gt;Understanding string search in analytical queries&lt;/p&gt;&lt;p&gt;Clickbench query 20 evaluates a LIKE pattern on millions of URLs, making fast string search crucial.&lt;/p&gt;&lt;code&gt;SELECT COUNT(*) FROM hits WHERE URL LIKE '%google%'
&lt;/code&gt;&lt;p&gt;Reducing false positives with two-character filtering&lt;/p&gt;&lt;p&gt;PR #46289 is based on the insight that SIMD instructions can be used in a smart way beyond brute-force parallelization. The original code already leveraged SIMD instructions but it only considered the search pattern’s first character, leading to expensive false positives. We rewrite the code to check the second character as well. This improved selectivity dramatically while adding only a negligible amount of new SIMD operations.&lt;/p&gt;&lt;code&gt;/// Original code
class StringSearcher
{
    first_needle_character = needle[0];
    first_needle_character_vec = broadcast_to_simd_vector(first_needle_character);

    void search()
    {
        for (position in haystack; step by 16 bytes)
        {
            haystack_chunk = load_16_bytes(haystack + position);
            first_matches = simd_compare_equal(haystack_chunk, first_needle_character_vec);
            match_mask = extract_match_positions(first_matches);

            for (const auto &amp;amp; match : match_mask)
                /// High false positive rate - many expensive verifications
                if (full_string_match(haystack + match_pos, needle))
                    return match_pos;
        }
    }
}
&lt;/code&gt;&lt;code&gt;// Optimized code
class StringSearcher
{
    first_needle_character = needle[0];
    second_needle_character = needle[1];  /// Second character
    first_needle_character_vec = broadcast_to_simd_vector(first_needle_character);
    second_needle_character_vec = broadcast_to_simd_vector(second_needle_character);

    void search()
    {
        for (position : haystack, step by 16 bytes)
        {
            haystack_chunk1 = load_16_bytes(haystack + position);
            haystack_chunk2 = load_16_bytes(haystack + position + 1);

            /// Compare both characters simultaneously
            first_matches = simd_compare_equal(haystack_chunk1, first_needle_character_vec);
            second_matches = simd_compare_equal(haystack_chunk2, second_needle_character_vec);
            combined_matches = simd_and(first_matches, second_matches);

            match_mask = extract_match_positions(combined_matches);

            for (const auto &amp;amp; match : match_mask)
                // Dramatically fewer false positives - fewer expensive verifications
                if full_string_match(haystack + match_pos, needle):
                    return match_pos;
        }
    }
}
&lt;/code&gt;&lt;p&gt;Performance impact&lt;/p&gt;&lt;p&gt;Two-character SIMD filtering improved performance significantly:&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;ClickBench query Q20 sped up by 35%&lt;/item&gt;&lt;item&gt;Other queries which perform substring matching saw an overall improvement of ~10%&lt;/item&gt;&lt;item&gt;The geometric mean of all queries improved by 4.1%&lt;/item&gt;&lt;/list&gt;&lt;p&gt;The performance improvements are a result of fewer false positives, better cache locality and more efficient branch prediction.&lt;/p&gt;&lt;p&gt;Two-character SIMD filtering demonstrates that effective SIMD optimization isn't just about processing more data per instruction - it's about using SIMD's parallel comparison capabilities to improve the algorithmic efficiency. The two-character approach shows how a small number of additional SIMD operations can in some cases yield massive performance gains.&lt;/p&gt;&lt;head rend="h2"&gt;Bottleneck 5: False Sharing #&lt;/head&gt;&lt;p&gt;False sharing occurs when multiple threads access variables in the same cache. The CPU's cache coherence protocol works at cache line granularity, meaning that any cache line modifications - including modifications of two different variables - are treated as conflicts which require expensive synchronization between cores. On a 2 x 240 vCPUs system, false sharing can turn simple counter increments into system-wide performance disasters.&lt;/p&gt;&lt;p&gt;Eliminating false sharing requires how CPU cache coherence is implemented at the hardware level. It's not enough to optimize algorithms - to avoid false sharing, one must also optimize the memory layout to make sure that frequently-accessed data structures don't accidentally interfere with each other through cache line conflicts. This involves for example a strategic data layout and use of alignment and padding.&lt;/p&gt;&lt;head rend="h3"&gt;Optimization 5.1: Profile Event Counter Alignment (PR #82697) #&lt;/head&gt;&lt;p&gt;ClickBench query Q3 showed 36.6% of CPU cycles spent in &lt;code&gt;ProfileEvents::increment&lt;/code&gt; on a 2×240 vCPU system. Performance profiling revealed a severe cache line contention.&lt;/p&gt;&lt;p&gt;ProfileEvents counters at scale&lt;/p&gt;&lt;p&gt;Profile event counters refer to ClickHouse's internal eventing system - profile events track all internal operations, from detailed query execution steps to memory allocations. In a typical analytical query, these counters are incremented millions of times across all threads. The original implementation organized multiple counters in the same memory region without considering cache line boundaries.&lt;/p&gt;&lt;p&gt;This creates three challenges:&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;&lt;p&gt;Cache line physics: Modern Intel processors use 64-byte cache lines. When any byte in a cache line is modified, the entire line must be invalidated in the other cores' caches.&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;p&gt;False sharing amplification: With 240 threads, each counter update triggers a cache line invalidation across potentially dozens of cores. What should be independent operations become serialized through the cache coherence protocol.&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;p&gt;Exponential degradation: As the number of cores increases, the probability of a simultaneous access to the same cache line grows exponentially, compounding the impact of cache misses.&lt;/p&gt;&lt;/item&gt;&lt;/list&gt;&lt;p&gt;Using perf, I discovered that &lt;code&gt;ProfileEvents::increment&lt;/code&gt; was generating massive cache coherence traffic. The smoking gun was the cache line utilization report that showed eight different counters packed into a single cache line. We also added new capabilities to Linux’s perf c2c tool and worked with the community to help developers more easily identify false sharing issues like this.&lt;/p&gt;&lt;p&gt;Proper cache line alignment ensures that each counter gets its own 64-byte cache line. This transforms false sharing (bad) into true sharing (manageable). When a thread updates its counter, now only a single cache line wil be affected.&lt;/p&gt;&lt;p&gt;Based on our implementation in PR #82697, the fix improved the cache line alignment for the profile event counters:&lt;/p&gt;&lt;code&gt;// Before: Counters packed without alignment
struct ProfileEvents:
    atomic_value counters[NUM_EVENTS]  // Multiple counters per cache line
    // 8 counters sharing single 64-byte cache lines

// After: Cache line aligned counters  
struct ProfileEvents:
    struct alignas(64) AlignedCounter:
        atomic_value value
        // Padding automatically added to reach 64 bytes
    
    AlignedCounter counters[NUM_EVENTS]  // Each counter gets own cache line
    // Now each counter has exclusive cache line ownership
&lt;/code&gt;&lt;p&gt;Performance impact&lt;/p&gt;&lt;p&gt;This optimization pattern applies to any frequently updated shared and compact data structure. The lesson is that the memory layout becomes critical at scale - what works fine on eight cores can be excruciatingly slow on 240 cores.&lt;/p&gt;After optimization: ProfileEvents::increment drops to 8.5% (from 36.6%)&lt;p&gt;As a result of our optimization, ClickBench query Q3 saw a 27.4% improvement on ultra-high core count systems. The performance gain increases with the number of cores because the cache coherence overhead grows super-linearly. This optimization therefore doesn't merely fix a bottleneck - it changes the scalability curve.&lt;/p&gt;ClickBench Q3: 27.4% improvement, with larger gains on higher core count systems&lt;head rend="h2"&gt;Building a foundation that scales #&lt;/head&gt;&lt;p&gt;In this post I covered optimizations for five performance bottlenecks:&lt;/p&gt;&lt;list rend="ol"&gt;&lt;item&gt;Lock contention - The coordination overhead grows exponentially with core count.&lt;/item&gt;&lt;item&gt;Memory optimization - The memory bandwidth per core decreases as the core count increases.&lt;/item&gt;&lt;item&gt;Increased parallelism - Serial phases become the dominant bottleneck.&lt;/item&gt;&lt;item&gt;SIMD optimization - Smarter algorithms like two-character filtering beyond brute-force vectorization can improve performance significantly.&lt;/item&gt;&lt;item&gt;False sharing - False sharing is caused by the granularity of cache line size.&lt;/item&gt;&lt;/list&gt;&lt;p&gt;The bottlenecks and optimizations presented here are not just about ClickHouse - they represent a fundamental shift in how we must approach database optimization in the ultra-high core count era. As processors continue to evolve toward higher core counts, these techniques will become essential for any system that needs to scale.&lt;/p&gt;&lt;p&gt;Our optimizations enable ClickHouse to achieve close-to-linear scalability as the core count increases. This enables ClickHouse to thrive as an analytics database in a future world where Intel and other hardware manufacturers push the core count into the thousands.&lt;/p&gt;&lt;head rend="h2"&gt;References and Resources #&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;Source Code: All optimizations available in ClickHouse main branch&lt;/item&gt;&lt;item&gt;Slide Deck: 2025 Shanghai Meetup Presentation&lt;/item&gt;&lt;item&gt;Pull Requests: Individual PRs linked throughout this post with detailed performance analysis&lt;/item&gt;&lt;item&gt;Intel Intrinsics Guide: Intel® Intrinsics Guide&lt;/item&gt;&lt;/list&gt;&lt;head rend="h3"&gt;Acknowledgments #&lt;/head&gt;&lt;p&gt;Special thanks to the ClickHouse community for rigorous code review and performance validation. These optimizations represent collaborative effort between Intel and ClickHouse teams to unlock the full potential of modern ultra-high core count processors.&lt;/p&gt;&lt;p&gt;For questions about implementation details or performance reproduction, please refer to the individual PR discussions linked throughout this post.&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://clickhouse.com/blog/optimizing-clickhouse-intel-high-core-count-cpu"/><published>2025-09-17T18:46:03+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45279898</id><title>Famous cognitive psychology experiments that failed to replicate</title><updated>2025-09-17T22:32:33.668113+00:00</updated><content>&lt;doc fingerprint="fe3b12270332d242"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Famous Cognitive Psychology Experiments that Failed to Replicate&lt;/head&gt;
    &lt;head rend="h2"&gt;A quick reference&lt;/head&gt;
    &lt;p&gt;Marco Giancotti,&lt;/p&gt;
    &lt;p&gt;Marco Giancotti,&lt;/p&gt;
    &lt;p&gt;Cover image:&lt;/p&gt;
    &lt;p&gt;Photo by Rebecca Freeman, Unsplash&lt;/p&gt;
    &lt;p&gt;TL;DR is the part in bold below.&lt;/p&gt;
    &lt;p&gt;The field of psychology had a big crisis in the 2010s, when many widely accepted results turned out to be much less solid than previously thought. It's called the replication crisis, because labs around the world tried and failed to replicate, in new experiments, previous results published by their original "discoverers". In other words, many reported psychological effects were either non-existent—artifacts of the experimenter's flawed setup—or so much weaker than originally claimed that they lost most of their intellectual sparkle.&lt;/p&gt;
    &lt;p&gt;(The crisis spanned other fields as well, but I mostly care about psychology here, especially the cognitive kind.)&lt;/p&gt;
    &lt;p&gt;This is very old news, and I've been vaguely aware of several of the biggest disgraced results for years, but I keep on forgetting which are (still probably) real and which aren't. This is not good. Most results in the field do actually replicate and are robust[citation needed], so it would be a pity to lose confidence in the whole field just because of a few bad apples.&lt;/p&gt;
    &lt;p&gt;This post is a compact reference list of the most (in)famous cognitive science results that failed to replicate and should, for the time being, be considered false. The only goal is to offset the trust-undermining effects of my poor memory—and perhaps yours, too?—with a bookmarkable page.&lt;/p&gt;
    &lt;p&gt;This can't be a comprehensive list: if a study is not on this page, it's not guaranteed to be fully replicated. Still, this should cover most of the high-profile debunked theories that laypeople like me may have heard of.&lt;/p&gt;
    &lt;p&gt;Credit: I enlisted the help of Kimi K2, o3, and Sonnet 4 to gather and fact-check this list. I also checked, pruned, and de-hallucinated all the results.&lt;/p&gt;
    &lt;head rend="h3"&gt;Ego Depletion Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: We have a "willpower battery" that gradually depletes during the day as we exercise self-control. (I remember reading Baumeister's pop-science book and being awed by the implications of their findings; I might have known it sounded too good to be true.)&lt;/item&gt;
      &lt;item&gt;Representative paper: Baumeister et al. 1998&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Hagger et (63!) al. 2016&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Power Posing Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: Adopting expansive body postures for 2 minutes (like standing with hands on hips or arms raised) increases testosterone, decreases cortisol, and makes people feel more powerful and take more risks.&lt;/item&gt;
      &lt;item&gt;Representative paper: Carney, Cuddy, &amp;amp; Yap (2010)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Ranehill et al. (2015)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Social Priming: Elderly Words Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: People walk more slowly after being exposed to words related to elderly stereotypes.&lt;/item&gt;
      &lt;item&gt;Representative paper: Bargh, Chen, &amp;amp; Burrows (1996)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Doyen et al. (2012) (I like how they prove that the psychological effect was actually in the experimenters, rather than the subjects!)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Money Priming Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: Simply thinking about money makes you more selfish and more likely to endorse free market values.&lt;/item&gt;
      &lt;item&gt;Representative paper: Vohs, Mead, &amp;amp; Goode (2006)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Rohrer, Pashler, &amp;amp; Harris (2015)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;ESP Precognition Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: In some cases, people can predict future events "that could not otherwise be anticipated through any known inferential process".&lt;/item&gt;
      &lt;item&gt;Representative paper: Bem (2011)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Galak et al. (2012), Ritchie, Wiseman, &amp;amp; French (2012)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Cleanliness and Morality Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: Being clean or thinking about cleanliness makes people more morally lax.&lt;/item&gt;
      &lt;item&gt;Representative paper: Schnall, Benton, &amp;amp; Harvey (2008)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Johnson, Cheung, &amp;amp; Donnellan (2014)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Glucose and Ego Depletion Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: Connected to the debunked ego-depletion effect, this one claims that adding glucose to your blood "recharges" the willpower battery. (For a while, I may have drunk more orange juice than usual after reading Baumeister's book. At least it's healthy-ish.)&lt;/item&gt;
      &lt;item&gt;Representative paper: Gailliot &amp;amp; Baumeister (2007)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Lange &amp;amp; Eggert (2014)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Hunger and Risk-Taking Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: People exposed to the scent of freshly baked cookies become less sensitive to risk and take more risks to obtain food.&lt;/item&gt;
      &lt;item&gt;Representative paper: Ditto et al. 2006&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Festjens, Bruyneel, &amp;amp; Dewitte (2018)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Psychological Distance &amp;amp; Construal Level Theory&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: "Psychologically distant" events are processed more abstractly, while "psychologically near" events are processed more concretely. E.g., you worry about the difficulty of a task if you have to do it tomorrow, but you see the same task's attractive side if it is planned far in the future.&lt;/item&gt;
      &lt;item&gt;Representative paper: Trope &amp;amp; Liberman (2010), building on Liberman &amp;amp; Trope (1998)&lt;/item&gt;
      &lt;item&gt;Replication status: serious credibility problems&lt;/item&gt;
      &lt;item&gt;Source: A collaboration between 73 labs around the world is vetting this theory right now because of many doubts about its validity.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Ovulation &amp;amp; Mate Preferences Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: Women are more attracted to hot guys during high-fertility days of their cycles.&lt;/item&gt;
      &lt;item&gt;Representative paper: Gildersleeve, Haselton, &amp;amp; Fales (2014)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Stern, Gerlach, &amp;amp; Penke (2020)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Marshmallow Test &amp;amp; Long-Term Success Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: Children's ability to resist eating a marshmallow when left alone in a room at age 4-5 strongly predicts adolescent achievement, with those who waited longer showing better life outcomes.&lt;/item&gt;
      &lt;item&gt;Representative paper: Shoda, Mischel, &amp;amp; Peake (1990)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate significantly&lt;/item&gt;
      &lt;item&gt;Source: Watts, Duncan, &amp;amp; Quan (2018)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Stereotype Threat (Women's Math Performance) Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: Women risk being judged by the negative stereotype that women have weaker math ability, and this apprehension disrupts their math performance on difficult tests.&lt;/item&gt;
      &lt;item&gt;Representative paper: Spencer, Steele, &amp;amp; Quinn (1999)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Flore &amp;amp; Wicherts (2015)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Smile to Feel Better Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: Holding a pen in your teeth (forcing a smile-like expression) makes you rate cartoons as funnier compared to holding a pen with your lips (preventing smiling). More broadly, facial expressions can influence emotional experiences: "fake it till you make it."&lt;/item&gt;
      &lt;item&gt;Representative paper: Strack, Martin, &amp;amp; Stepper (1988)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Wagenmakers et (54!) al. (2016)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Objective Measurement of Biases&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: You can predict if someone is racist by how quickly they answer certain trick questions.&lt;/item&gt;
      &lt;item&gt;Representative paper: Greenwald, McGhee, &amp;amp; Schwartz (1998)&lt;/item&gt;
      &lt;item&gt;Replication status: mixed evidence with small effects&lt;/item&gt;
      &lt;item&gt;Source: Oswald et al. (2013) shows that the prediction power is small at best.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Mozart Effect&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: Listening to Mozart temporarily makes you smarter.&lt;/item&gt;
      &lt;item&gt;Representative paper: Rauscher, Shaw, &amp;amp; Ky (1993)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Pietschnig, Voracek, &amp;amp; Formann (2010) (What a title!)&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Growth Mindset Interventions&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: Teaching students that intelligence is malleable (not fixed) dramatically improves academic performance.&lt;/item&gt;
      &lt;item&gt;Representative paper: Dweck, &amp;amp; Leggett (1988)&lt;/item&gt;
      &lt;item&gt;Replication status: mixed results - many failed replications but also some successful replications&lt;/item&gt;
      &lt;item&gt;Failed replication source: Li &amp;amp; Bates 2019&lt;/item&gt;
      &lt;item&gt;Notable successful replication: Yeager et al. 2019 in Nature&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Bilinguals Are Smarter&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Claimed result: Being bilingual provides substantial cognitive advantages in attention, task-switching, and executive control.&lt;/item&gt;
      &lt;item&gt;Representative paper: Bialystok, Craik, &amp;amp; Luk (2012)&lt;/item&gt;
      &lt;item&gt;Replication status: did not replicate&lt;/item&gt;
      &lt;item&gt;Source: Lehtonen et al. 2018&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Did I miss any famous debunked studies? Let me know by replying to this newsletter, and I'll add it to the list. ●&lt;/p&gt;
    &lt;p&gt;Cover image:&lt;/p&gt;
    &lt;p&gt;Photo by Rebecca Freeman, Unsplash&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://buttondown.com/aethermug/archive/aether-mug-famous-cognitive-psychology/"/><published>2025-09-17T18:55:28+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45280592</id><title>Gluon: a GPU programming language based on the same compiler stack as Triton</title><updated>2025-09-17T22:32:33.300264+00:00</updated><content>&lt;doc fingerprint="3b74d0de090e4684"&gt;
  &lt;main&gt;
    &lt;p&gt;We read every piece of feedback, and take your input very seriously.&lt;/p&gt;
    &lt;p&gt;To see all available qualifiers, see our documentation.&lt;/p&gt;
    &lt;p&gt;There was an error while loading. Please reload this page.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/triton-lang/triton/blob/main/python/tutorials/gluon/01-intro.py"/><published>2025-09-17T19:50:11+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45281139</id><title>A postmortem of three recent issues</title><updated>2025-09-17T22:32:33.051967+00:00</updated><content>&lt;doc fingerprint="8d3083968c38d9d6"&gt;
  &lt;main&gt;
    &lt;p&gt;Between August and early September, three infrastructure bugs intermittently degraded Claude's response quality. We've now resolved these issues and want to explain what happened.&lt;/p&gt;
    &lt;p&gt;In early August, a number of users began reporting degraded responses from Claude. These initial reports were difficult to distinguish from normal variation in user feedback. By late August, the increasing frequency and persistence of these reports prompted us to open an investigation that led us to uncover three separate infrastructure bugs.&lt;/p&gt;
    &lt;p&gt;To state it plainly: We never reduce model quality due to demand, time of day, or server load. The problems our users reported were due to infrastructure bugs alone.&lt;/p&gt;
    &lt;p&gt;We recognize users expect consistent quality from Claude, and we maintain an extremely high bar for ensuring infrastructure changes don't affect model outputs. In these recent incidents, we didn't meet that bar. The following postmortem explains what went wrong, why detection and resolution took longer than we would have wanted, and what we're changing to prevent similar future incidents.&lt;/p&gt;
    &lt;p&gt;We don't typically share this level of technical detail about our infrastructure, but the scope and complexity of these issues justified a more comprehensive explanation.&lt;/p&gt;
    &lt;head rend="h2"&gt;How we serve Claude at scale&lt;/head&gt;
    &lt;p&gt;We serve Claude to millions of users via our first-party API, Amazon Bedrock, and Google Cloud's Vertex AI. We deploy Claude across multiple hardware platforms, namely AWS Trainium, NVIDIA GPUs, and Google TPUs. This approach provides the capacity and geographic distribution necessary to serve users worldwide.&lt;/p&gt;
    &lt;p&gt;Each hardware platform has different characteristics and requires specific optimizations. Despite these variations, we have strict equivalence standards for model implementations. Our aim is that users should get the same quality responses regardless of which platform serves their request. This complexity means that any infrastructure change requires careful validation across all platforms and configurations.&lt;/p&gt;
    &lt;head rend="h2"&gt;Timeline of events&lt;/head&gt;
    &lt;p&gt;The overlapping nature of these bugs made diagnosis particularly challenging. The first bug was introduced on August 5, affecting approximately 0.8% of requests made to Sonnet 4. Two more bugs arose from deployments on August 25 and 26.&lt;/p&gt;
    &lt;p&gt;Although initial impacts were limited, a load balancing change on August 29 started to increase affected traffic. This caused many more users to experience issues while others continued to see normal performance, creating confusing and contradictory reports.&lt;/p&gt;
    &lt;head rend="h2"&gt;Three overlapping issues&lt;/head&gt;
    &lt;p&gt;Below we describe the three bugs that caused the degradation, when they occurred, and how we resolved them:&lt;/p&gt;
    &lt;head rend="h3"&gt;1. Context window routing error&lt;/head&gt;
    &lt;p&gt;On August 5, some Sonnet 4 requests were misrouted to servers configured for the upcoming 1M token context window. This bug initially affected 0.8% of requests. On August 29, a routine load balancing change unintentionally increased the number of short-context requests routed to the 1M context servers. At the worst impacted hour on August 31, 16% of Sonnet 4 requests were affected.&lt;/p&gt;
    &lt;p&gt;Approximately 30% of Claude Code users who made requests during this period had at least one message routed to the wrong server type, resulting in degraded responses. On Amazon Bedrock, misrouted traffic peaked at 0.18% of all Sonnet 4 requests from August 12. Incorrect routing affected less than 0.0004% of requests on Google Cloud's Vertex AI between August 27 and September 16.&lt;/p&gt;
    &lt;p&gt;However, some users were affected more severely, as our routing is "sticky". This meant that once a request was served by the incorrect server, subsequent follow-ups were likely to be served by the same incorrect server.&lt;/p&gt;
    &lt;p&gt;Resolution: We fixed the routing logic to ensure short- and long-context requests were directed to the correct server pools. We deployed the fix on September 4. A rollout to our first-party platforms and Google Cloud’s Vertex was completed by September 16. The fix is in the process of being rolled out on Bedrock.&lt;/p&gt;
    &lt;head rend="h3"&gt;2. Output corruption&lt;/head&gt;
    &lt;p&gt;On August 25, we deployed a misconfiguration to the Claude API TPU servers that caused an error during token generation. An issue caused by a runtime performance optimization occasionally assigned a high probability to tokens that should rarely be produced given the context, for example producing Thai or Chinese characters in response to English prompts, or producing obvious syntax errors in code. A small subset of users that asked a question in English might have seen "สวัสดี" in the middle of the response, for example.&lt;/p&gt;
    &lt;p&gt;This corruption affected requests made to Opus 4.1 and Opus 4 on August 25-28, and requests to Sonnet 4 August 25–September 2. Third-party platforms were not affected by this issue.&lt;/p&gt;
    &lt;p&gt;Resolution: We identified the issue and rolled back the change on September 2. We've added detection tests for unexpected character outputs to our deployment process.&lt;/p&gt;
    &lt;head rend="h3"&gt;3. Approximate top-k XLA:TPU miscompilation&lt;/head&gt;
    &lt;p&gt;On August 25, we deployed code to improve how Claude selects tokens during text generation. This change inadvertently triggered a latent bug in the XLA:TPU[1] compiler, which has been confirmed to affect requests to Claude Haiku 3.5.&lt;/p&gt;
    &lt;p&gt;We also believe this could have impacted a subset of Sonnet 4 and Opus 3 on the Claude API. Third-party platforms were not affected by this issue.&lt;/p&gt;
    &lt;p&gt;Resolution: We first observed the bug affecting Haiku 3.5 and rolled it back on September 4. We later noticed user reports of problems with Opus 3 that were compatible with this bug, and rolled it back on September 12. After extensive investigation we were unable to reproduce this bug on Sonnet 4 but decided to also roll it back out of an abundance of caution.&lt;/p&gt;
    &lt;p&gt;Simultaneously, we have (a) been working with the XLA:TPU team on a fix for the compiler bug and (b) rolled out a fix to use exact top-k with enhanced precision. For details, see the deep dive below.&lt;/p&gt;
    &lt;head rend="h2"&gt;A closer look at the XLA compiler bug&lt;/head&gt;
    &lt;p&gt;To illustrate the complexity of these issues, here's how the XLA compiler bug manifested and why it proved particularly challenging to diagnose.&lt;/p&gt;
    &lt;p&gt;When Claude generates text, it calculates probabilities for each possible next word, then randomly chooses a sample from this probability distribution. We use "top-p sampling" to avoid nonsensical outputs—only considering words whose cumulative probability reaches a threshold (typically 0.99 or 0.999). On TPUs, our models run across multiple chips, with probability calculations happening in different locations. To sort these probabilities, we need to coordinate data between chips, which is complex.[2]&lt;/p&gt;
    &lt;p&gt;In December 2024, we discovered our TPU implementation would occasionally drop the most probable token when temperature was zero. We deployed a workaround to fix this case.&lt;/p&gt;
    &lt;p&gt;The root cause involved mixed precision arithmetic. Our models compute next-token probabilities in bf16 (16-bit floating point). However, the vector processor is fp32-native, so the TPU compiler (XLA) can optimize runtime by converting some operations to fp32 (32-bit). This optimization pass is guarded by the &lt;code&gt;xla_allow_excess_precision&lt;/code&gt; flag which defaults to true.&lt;/p&gt;
    &lt;p&gt;This caused a mismatch: operations that should have agreed on the highest probability token were running at different precision levels. The precision mismatch meant they didn't agree on which token had the highest probability. This caused the highest probability token to sometimes disappear from consideration entirely.&lt;/p&gt;
    &lt;p&gt;On August 26, we deployed a rewrite of our sampling code to fix the precision issues and improve how we handled probabilities at the limit that reach the top-p threshold. But in fixing these problems, we exposed a trickier one.&lt;/p&gt;
    &lt;p&gt;Our fix removed the December workaround because we believed we'd solved the root cause. This led to a deeper bug in the approximate top-k operation—a performance optimization that quickly finds the highest probability tokens.[3] This approximation sometimes returned completely wrong results, but only for certain batch sizes and model configurations. The December workaround had been inadvertently masking this problem.&lt;/p&gt;
    &lt;p&gt;The bug's behavior was frustratingly inconsistent. It changed depending on unrelated factors such as what operations ran before or after it, and whether debugging tools were enabled. The same prompt might work perfectly on one request and fail on the next.&lt;/p&gt;
    &lt;p&gt;While investigating, we also discovered that the exact top-k operation no longer had the prohibitive performance penalty it once did. We switched from approximate to exact top-k and standardized some additional operations on fp32 precision.[4] Model quality is non-negotiable, so we accepted the minor efficiency impact.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why detection was difficult&lt;/head&gt;
    &lt;p&gt;Our validation process ordinarily relies on benchmarks alongside safety evaluations and performance metrics. Engineering teams perform spot checks and deploy to small "canary" groups first.&lt;/p&gt;
    &lt;p&gt;These issues exposed critical gaps that we should have identified earlier. The evaluations we ran simply didn't capture the degradation users were reporting, in part because Claude often recovers well from isolated mistakes. Our own privacy practices also created challenges in investigating reports. Our internal privacy and security controls limit how and when engineers can access user interactions with Claude, in particular when those interactions are not reported to us as feedback. This protects user privacy but prevents engineers from examining the problematic interactions needed to identify or reproduce bugs.&lt;/p&gt;
    &lt;p&gt;Each bug produced different symptoms on different platforms at different rates. This created a confusing mix of reports that didn't point to any single cause. It looked like random, inconsistent degradation.&lt;/p&gt;
    &lt;p&gt;More fundamentally, we relied too heavily on noisy evaluations. Although we were aware of an increase in reports online, we lacked a clear way to connect these to each of our recent changes. When negative reports spiked on August 29, we didn't immediately make the connection to an otherwise standard load balancing change.&lt;/p&gt;
    &lt;head rend="h2"&gt;What we're changing&lt;/head&gt;
    &lt;p&gt;As we continue to improve our infrastructure, we're also improving the way we evaluate and prevent bugs like those discussed above across all platforms where we serve Claude. Here's what we're changing:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;More sensitive evaluations: To help discover the root cause of any given issue, we’ve developed evaluations that can more reliably differentiate between working and broken implementations. We’ll keep improving these evaluations to keep a closer eye on model quality.&lt;/item&gt;
      &lt;item&gt;Quality evaluations in more places: Although we run regular evaluations on our systems, we will run them continuously on true production systems to catch issues such as the context window load balancing error.&lt;/item&gt;
      &lt;item&gt;Faster debugging tooling: We'll develop infrastructure and tooling to better debug community-sourced feedback without sacrificing user privacy. Additionally, some bespoke tools developed here will be used to reduce the remediation time in future similar incidents, if those should occur.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Evals and monitoring are important. But these incidents have shown that we also need continuous signal from users when responses from Claude aren't up to the usual standard. Reports of specific changes observed, examples of unexpected behavior encountered, and patterns across different use cases all helped us isolate the issues.&lt;/p&gt;
    &lt;p&gt;It remains particularly helpful for users to continue to send us their feedback directly. You can use the &lt;code&gt;/bug&lt;/code&gt; command in Claude Code or you can use the "thumbs down" button in the Claude apps to do so. Developers and researchers often create new and interesting ways to evaluate model quality that complement our internal testing. If you'd like to share yours, reach out to feedback@anthropic.com.&lt;/p&gt;
    &lt;p&gt;We remain grateful to our community for these contributions.&lt;/p&gt;
    &lt;p&gt;[1] XLA:TPU is the optimizing compiler that translates XLA High Level Optimizing language—often written using JAX—to TPU machine instructions.&lt;/p&gt;
    &lt;p&gt;[2] Our models are too large for single chips and are partitioned across tens of chips or more, making our sorting operation a distributed sort. TPUs (just like GPUs and Trainium) also have different performance characteristics than CPUs, requiring different implementation techniques using vectorized operations instead of serial algorithms.&lt;/p&gt;
    &lt;p&gt;[3] We had been using this approximate operation because it yielded substantial performance improvements. The approximation works by accepting potential inaccuracies in the lowest probability tokens, which shouldn't affect quality—except when the bug caused it to drop the highest probability token instead.&lt;/p&gt;
    &lt;p&gt;[4] Note that the now-correct top-k implementation may result in slight differences in the inclusion of tokens near the top-p threshold, and in rare cases users may benefit from re-tuning their choice of top-p.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.anthropic.com/engineering/a-postmortem-of-three-recent-issues"/><published>2025-09-17T20:41:07+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45281437</id><title>Jqp: TUI Playground to Experiment with Jq</title><updated>2025-09-17T22:32:32.294164+00:00</updated><content>&lt;doc fingerprint="2602bbdf06bdc3d9"&gt;
  &lt;main&gt;
    &lt;p&gt;a TUI playground for exploring jq.&lt;/p&gt;
    &lt;p&gt;This application utilizes itchyny's implementation of &lt;code&gt;jq&lt;/code&gt; written in Go, &lt;code&gt;gojq&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;brew install noahgorstein/tap/jqp&lt;/code&gt;
    &lt;code&gt;sudo port install jqp&lt;/code&gt;
    &lt;p&gt;Available through the Arch User Repository as jqp-bin.&lt;/p&gt;
    &lt;code&gt;yay -S jqp-bin&lt;/code&gt;
    &lt;code&gt;sudo snap install jqp
&lt;/code&gt;
    &lt;p&gt;Download the relevant asset for your operating system from the latest GitHub release. Unpack it, then move the binary to somewhere accessible in your &lt;code&gt;PATH&lt;/code&gt;, e.g. &lt;code&gt;mv ./jqp /usr/local/bin&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Clone this repository, build from source with &lt;code&gt;cd jqp &amp;amp;&amp;amp; go build&lt;/code&gt;, then move the binary to somewhere accessible in your &lt;code&gt;PATH&lt;/code&gt;, e.g. &lt;code&gt;mv ./jqp /usr/local/bin&lt;/code&gt;.&lt;/p&gt;
    &lt;code&gt;➜ jqp --help
jqp is a terminal user interface (TUI) for exploring the jq command line utility.

You can use it to run jq queries interactively. If no query is provided, the interface will prompt you for one.

The command accepts an optional query argument which will be executed against the input JSON or newline-delimited JSON (NDJSON).
You can provide the input JSON or NDJSON either through a file or via standard input (stdin).

Usage:
  jqp [query] [flags]

Flags:
      --config string   path to config file (default is $HOME/.jqp.yaml)
  -f, --file string     path to the input JSON file
  -h, --help            help for jqp
  -t, --theme string    jqp theme
  -v, --version         version for jqp
&lt;/code&gt;
    &lt;p&gt;&lt;code&gt;jqp&lt;/code&gt; also supports input from STDIN. STDIN takes precedence over the command-line flag. Additionally, you can pass an optional query argument to jqp that it will execute upon loading.&lt;/p&gt;
    &lt;code&gt;➜ curl "https://api.github.com/repos/jqlang/jq/issues" | jqp '.[] | {"title": .title, "url": .url}'
&lt;/code&gt;
    &lt;p&gt;Note&lt;/p&gt;
    &lt;p&gt;Valid JSON or NDJSON (newline-delimited JSON) can be provided as input to &lt;code&gt;jqp&lt;/code&gt;.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Keybinding&lt;/cell&gt;
        &lt;cell role="head"&gt;Action&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;tab&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;cycle through sections&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;shift-tab&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;cycle through sections in reverse&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;ctrl-y&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;copy query to system clipboard1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;ctrl-s&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;save output to file (copy to clipboard if file not specified)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;ctrl-c&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;quit program / kill long-running query&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Keybinding&lt;/cell&gt;
        &lt;cell role="head"&gt;Action&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;enter&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;execute query&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;&lt;code&gt;↑&lt;/code&gt;/&lt;code&gt;↓&lt;/code&gt;&lt;/cell&gt;
        &lt;cell&gt;cycle through query history&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;ctrl-a&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;go to beginning of line&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;ctrl-e&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;go to end of line&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;&lt;code&gt;←&lt;/code&gt;/&lt;code&gt;ctrl-b&lt;/code&gt;&lt;/cell&gt;
        &lt;cell&gt;move cursor one character to left&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;&lt;code&gt;→&lt;/code&gt;/&lt;code&gt;ctrl-f&lt;/code&gt;&lt;/cell&gt;
        &lt;cell&gt;move cursor one character to right&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;ctrl-k&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;delete text after cursor line&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;ctrl-u&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;delete text before cursor&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;ctrl-w&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;delete word to left&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;ctrl-d&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;delete character under cursor&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Keybinding&lt;/cell&gt;
        &lt;cell role="head"&gt;Action&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;↑/k&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;up&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;↓/j&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;down&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;
          &lt;code&gt;ctrl-u&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;page up&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;code&gt;ctrl-d&lt;/code&gt;
        &lt;/cell&gt;
        &lt;cell&gt;page down&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;&lt;code&gt;jqp&lt;/code&gt; can be configured with a configuration file. By default, &lt;code&gt;jqp&lt;/code&gt; will search your home directory for a YAML file named &lt;code&gt;.jqp.yaml&lt;/code&gt;. A path to a YAML configuration file can also be provided to the &lt;code&gt;--config&lt;/code&gt; command-line flag.&lt;/p&gt;
    &lt;code&gt;➜ jqp --config ~/my_jqp_config.yaml &amp;lt; data.json&lt;/code&gt;
    &lt;p&gt;If a configuration option is present in both the configuration file and the command-line, the command-line option takes precedence. For example, if a theme is specified in the configuration file and via &lt;code&gt;-t/--theme flag&lt;/code&gt;, the command-line flag will take precedence.&lt;/p&gt;
    &lt;code&gt;theme:
  name: "nord" # controls the color scheme
  chromaStyleOverrides: # override parts of the chroma style
    kc: "#009900 underline" # keys use the chroma short names&lt;/code&gt;
    &lt;p&gt;Themes can be specified on the command-line via the &lt;code&gt;-t/--theme &amp;lt;themeName&amp;gt;&lt;/code&gt; flag. You can also set a theme in your configuration file.&lt;/p&gt;
    &lt;code&gt;theme:
  name: "monokai"&lt;/code&gt;
    &lt;p&gt;Overrides to the chroma styles used for a theme can be configured in your configuration file.&lt;/p&gt;
    &lt;p&gt;For the list of short keys, see &lt;code&gt;chroma.StandardTypes&lt;/code&gt;. To see which token to use for a value, see the JSON lexer (look for &lt;code&gt;&amp;lt;token&amp;gt;&lt;/code&gt; tags). To see the color and what's used in the style you're using, look for your style in the chroma styles directory.&lt;/p&gt;
    &lt;code&gt;theme:
  name: "monokai" # name is required to know which theme to override
  chromaStyleOverrides:
    kc: "#009900 underline"&lt;/code&gt;
    &lt;p&gt;You can change non-syntax colors using the &lt;code&gt;styleOverrides&lt;/code&gt; key:&lt;/p&gt;
    &lt;code&gt;theme:
  styleOverrides:
    primary: "#c4b28a"
    secondary: "#8992a7"
    error: "#c4746e"
    inactive: "#a6a69c"
    success: "#87a987"&lt;/code&gt;
    &lt;p&gt;Themes are broken up into light and dark themes. Light themes work best in terminals with a light background and dark themes work best in a terminal with a dark background. If no theme is specified or a non-existent theme is provided, the default theme is used, which was created to work with both terminals with a light and dark background.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;code&gt;abap&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;algol&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;arduino&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;autumn&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;borland&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;catppuccin-latte&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;colorful&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;emacs&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;friendly&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;github&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;gruvbox-light&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;hrdark&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;igor&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;lovelace&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;manni&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;monokai-light&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;murphy&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;onesenterprise&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;paraiso-light&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;pastie&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;perldoc&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;pygments&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;solarized-light&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;tango&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;trac&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;visual_studio&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;vulcan&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;xcode&lt;/code&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;code&gt;average&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;base16snazzy&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;catppuccin-frappe&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;catppuccin-macchiato&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;catppuccin-mocha&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;doom-one&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;doom-one2&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;dracula&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;fruity&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;github-dark&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;gruvbox&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;monokai&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;native&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;paraiso-dark&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;rrt&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;solarized-dark&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;solarized-dark256&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;swapoff&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;vim&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;witchhazel&lt;/code&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;code&gt;xcode-dark&lt;/code&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;jqq for inspiration&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Footnotes&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;code&gt;jqp&lt;/code&gt;uses https://github.com/atotto/clipboard for clipboard functionality. Things should work as expected with OSX and Windows. Linux, Unix require&lt;code&gt;xclip&lt;/code&gt;or&lt;code&gt;xsel&lt;/code&gt;to be installed. ↩&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/noahgorstein/jqp"/><published>2025-09-17T21:10:04+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45281653</id><title>Programming language inventor or serial killer? (2003)</title><updated>2025-09-17T22:32:32.099493+00:00</updated><content>&lt;doc fingerprint="a4ad7ff943e19799"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Programming Language Inventor or Serial Killer?&lt;/head&gt;&lt;p&gt;Can you tell a coder from a cannibal? A mathematician from a murderer? Try to spot who liked hacking away at corpses rather than computers&lt;/p&gt;Start&lt;head rend="h2"&gt;Quiz Questions&lt;/head&gt;&lt;list rend="dl"&gt;&lt;item rend="dt-1"&gt;1. Bertrand Meyer&lt;/item&gt;&lt;item rend="dd-1"&gt;Initial designer of the Eiffel language and Design by Contract development method. Currently a Professor at the Polytechnic University of Milan&lt;/item&gt;&lt;item rend="dt-2"&gt;2. Dorothea Puente&lt;/item&gt;&lt;item rend="dd-2"&gt;The “Death House Landlady” ran a Sacramento boarding house in the ’80s and murdered at least 9 tenants before claiming their Social Security&lt;/item&gt;&lt;item rend="dt-3"&gt;3. John Christie&lt;/item&gt;&lt;item rend="dd-3"&gt;Killed 8 women at 10 Rillington Place, London. Arrested after new tenants tracing an unpleasant odour peeled off the kitchen wallpaper to reveal a corpse&lt;/item&gt;&lt;item rend="dt-4"&gt;4. Andrei Chikatilo&lt;/item&gt;&lt;item rend="dd-4"&gt;The “Butcher of Rostov” murdered and mutilated more than 50 people, mostly small children. He was told as a child that villagers had eaten his brother&lt;/item&gt;&lt;item rend="dt-5"&gt;5. John Mauchly&lt;/item&gt;&lt;item rend="dd-5"&gt;Co-designed the first electronic general-purpose computer and created Short Code, the first programming language actually used on a computer&lt;/item&gt;&lt;item rend="dt-6"&gt;6. Gerald Jay Sussman&lt;/item&gt;&lt;item rend="dd-6"&gt;Invented the Scheme programming language with Guy L. Steele Jr. and involved in MIT’s AI research. Member of the Amateur Telescope Makers of Boston&lt;/item&gt;&lt;item rend="dt-7"&gt;7. Anatoly Onoprienko&lt;/item&gt;&lt;item rend="dd-7"&gt;“The Terminator” killed entire families at point-blank range with a shotgun before setting the house alight; “To me, killing people is like ripping up a duvet”&lt;/item&gt;&lt;item rend="dt-8"&gt;8. Jean E. Sammet&lt;/item&gt;&lt;item rend="dd-8"&gt;Established much of the design of COBOL in two weeks along with five other programmers, and developed FORMAC, an early computer algebra system&lt;/item&gt;&lt;item rend="dt-9"&gt;9. Guido van Rossum&lt;/item&gt;&lt;item rend="dd-9"&gt;Created the Python programming language in 1989 to keep busy while his office was closed for Christmas, naming it after Monty Python’s Flying Circus&lt;/item&gt;&lt;item rend="dt-10"&gt;10. Randy Kraft&lt;/item&gt;&lt;item rend="dd-10"&gt;This programmer (not known to have invented any languages) was convicted of killing 16 young men, but kept a cryptic “scorecard” with 61 entries&lt;/item&gt;&lt;/list&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://vole.wtf/coder-serial-killer-quiz/"/><published>2025-09-17T21:33:37+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45281734</id><title>Stephen Miller's Quota Likely Drove Korean Arrests in Immigration Raid</title><updated>2025-09-17T22:32:31.935151+00:00</updated><content>&lt;doc fingerprint="b6a293d9224e3a75"&gt;
  &lt;main&gt;
    &lt;p&gt;When ICE agents decided to arrest over 300 Korean workers at a Georgia battery plant, a White House-imposed daily immigrant arrest quota was likely on their minds. The Immigration and Customs Enforcement raid at a Hyundai-LG battery plant near Savannah created an international incident that called into question future large manufacturing investments in the United States. Many people blamed the event on shortcomings in U.S. visa options or as a necessary outcome when enforcing immigration laws. However, according to an immigration attorney representing several arrested workers, ICE agents chose to arrest the Korean workers to fulfill the quota of 3,000 daily immigrant arrests set by White House Deputy Chief of Staff Stephen Miller.&lt;/p&gt;
    &lt;head rend="h2"&gt;An Analysis Of An Immigration Raid&lt;/head&gt;
    &lt;p&gt;On August 31, 2025, U.S. Magistrate Judge Christopher Ray issued a warrant to allow ICE to search the Georgia battery plant, a joint venture of Hyundai and LG Energy Solution, naming four Mexican nationals as “targeted persons.” (The Savannah Morning News obtained a copy of the search warrant.) Nothing in the warrant indicated ICE intended to arrest South Korean workers helping to set up a battery plant for electric vehicles slated to employ 2,000 U.S. workers.&lt;/p&gt;
    &lt;p&gt;On September 4, 2025, approximately 400 state and federal law enforcement personnel raided the battery plant. While they came upon 175 to 200 Latino workers, not all of them working unlawfully, ICE agents also encountered hundreds of South Korean workers.&lt;/p&gt;
    &lt;p&gt;Charles Kuck, an immigration attorney at Kuck Baxter in Atlanta, represents 11 individuals arrested in the raid and pieced together what happened at the facility. ICE did not bring Korean language interpreters—proof Koreans were not the intended target—but managed to determine that the South Koreans at the facility entered on B-1 visas or the Electronic System for Travel Authorization known as ESTA.&lt;/p&gt;
    &lt;p&gt;“Not thinking that B-1 and ESTA allow ‘after-sales service and installation,’ which is what the Koreans were doing in setting up the equipment to make the batteries at the facility, ICE agents decided on the spot to arrest all the South Korean workers,” said Kuck in an interview. One of Kuck’s South Korean clients had just arrived the night before and was sitting in a conference room in a business suit, attending a meeting, when arrested by ICE.&lt;/p&gt;
    &lt;p&gt;On September 5, 2025, ICE sent out a press release and video of the operation stating, “As a result of the initial investigation, 475 individuals were detained.” The press statement also declared, “The individuals arrested during the operation were found to be working illegally, in violation of the terms of their visas and/or statuses. People on short-term or recreational visas are not authorized to work in the U.S.” As Kuck points out, it is not true that all individuals on “short-term visas are not authorized to work in the U.S.”&lt;/p&gt;
    &lt;p&gt;According to USCIS, “B-1 classification allows, among other business activities: Certain services related to international contracts/sales; and installation/servicing of foreign equipment (not involving local labor for hire and construction).”&lt;/p&gt;
    &lt;p&gt;The ICE video showed a stream of vehicles pulling up to the facility and featured agents arresting South Koreans and others in body cuffs. The images caused a furor when broadcast in South Korea.&lt;/p&gt;
    &lt;p&gt;“The arrest of the South Koreans was entirely driven by Stephen Miller’s arrest quota,” said Kuck. “ICE agents screwed up by arresting people who did not abuse the visa, were eligible to engage in the type of work for which they were admitted, but ICE considered it a successful operation because they met Miller’s quota of arresting 3,000 immigrants a day.”&lt;/p&gt;
    &lt;p&gt;At the end of May 2025, “Stephen Miller, a senior White House official, told Fox News that the White House was looking for ICE to arrest 3,000 people a day, a major increase in enforcement. The agency had arrested more than 66,000 people in the first 100 days of the Trump administration, an average of about 660 arrests a day,” reported the New York Times. In September, Lydia DePillis and Hamed Aleaziz wrote in the New York Times, “Work site enforcement is seen as a way to put large numbers [of arrests] on the board.”&lt;/p&gt;
    &lt;p&gt;Stephen Miller ordered ICE to arrest 3,000 people a day to achieve one million deportations a year and to go to Home Depot and other businesses rather than focus on criminals. Those orders helped precipitate the ICE arrests in Los Angeles and the protests in the city that followed.&lt;/p&gt;
    &lt;head rend="h2"&gt;An Immigration Raid Prompts A Reaction From Trump And South Korea&lt;/head&gt;
    &lt;p&gt;The ICE arrests at the Georgia battery plant resulted in significant economic fallout. According to LG Energy Solution, construction at the plant will remain on hold until the first half of 2026, reported WJCL, delaying by several months when U.S. workers can begin jobs at the facility. The incident also raised questions about future South Korean investments in the United States.&lt;/p&gt;
    &lt;p&gt;“This issue could have a considerable impact on foreign direct investment in the U.S.,” said South Korean President Lee Jae Myung. “We are urging the U.S. side to normalize the visa process related to investment, whether by securing sufficient visa quotas or by creating a new category of visa.”&lt;/p&gt;
    &lt;p&gt;The ICE operation created a significant disconnect between the Trump administration’s immigration arrest quotas and Donald Trump’s desire to attract foreign company investment to build U.S.-based manufacturing facilities. “U.S. President Donald Trump offered to allow hundreds of South Korean workers arrested during an immigration raid to stay in the United States, but only one has opted to remain, South Korean officials said,” reported Reuters. “Trump’s overture sought to encourage the workers to stay and train Americans, according to the officials.”&lt;/p&gt;
    &lt;p&gt;Trump also posted a statement on social media saying he wanted to welcome workers from foreign companies investing in the United States to come for a time on visas to provide expertise and training. Analysts note that such a statement is likely meaningless to companies when Miller runs the Trump administration’s immigration policies, and the focus remains on meeting arrest quotas and blocking high-skilled workers from the United States. Moreover, any company, particularly a foreign company, has an ongoing need for skilled workers, including as part of multinational teams, to develop and update product lines, not only to start operations, notes economist Mark Regets, an NFAP senior fellow.&lt;/p&gt;
    &lt;p&gt;The more than 300 detainees from South Korea arrived home to significant media attention. “There was widespread anger across the political spectrum in South Korea at the behavior of the U.S. authorities, with one newspaper referring to the workers being treated like ‘prisoners of war’ and another describing Koreans as feeling stabbed in the back by their closest ally,” reported The Guardian.&lt;/p&gt;
    &lt;p&gt;Even after it became evident that ICE had made a mistake and had caused an international incident, the agency wanted to put the South Koreans in chains when transporting them to the airport to depart the country, according to Kuck and media reports.&lt;/p&gt;
    &lt;p&gt;U.S. immigration policy can influence business decisions. “The ICE raid in Georgia is going to have a massive economic impact,” said Kuck. “Other attorneys and I are hearing from companies in Asia and Europe who say, ‘Maybe we should hold off on big investments in the U.S. for at least three years.’”&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.forbes.com/sites/stuartanderson/2025/09/16/stephen-millers-quota-likely-drove-korean-arrests-in-immigration-raid/"/><published>2025-09-17T21:42:39+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45281899</id><title>Pg_links</title><updated>2025-09-17T22:32:31.752967+00:00</updated><content>&lt;doc fingerprint="446f7524f2595b76"&gt;
  &lt;main&gt;
    &lt;p&gt;Home About PG GPG RSS Blogroll pg_docs pg_pedia pg_wiki pg_internals pg_o11y pg_monitoring pg_chapter pg_glossary pg_contrib pg_scripts pg_tips psql_tips psql_tricks pg_dont pg_explain pg_explain_glossary pg_ext pg_life pg_feed pg_hackers pg_hacking_101 pg_dev pg_hate pg_wish pg_mail pg_lingo pg_events pg_tv pg_talks&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://giulianopz.github.io/pg.html"/><published>2025-09-17T22:00:45+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45282130</id><title>Death of the Holocaust Industry</title><updated>2025-09-17T22:32:31.666519+00:00</updated><content/><link href="https://chrishedges.substack.com/p/death-of-the-holocaust-industry-read"/><published>2025-09-17T22:23:16+00:00</published></entry></feed>