<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-12T21:08:05.477637+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45556763</id><title>Nostr and ATProto (2024)</title><updated>2025-10-12T21:08:16.975023+00:00</updated><content>&lt;doc fingerprint="231dd9512d25a3d4"&gt;
  &lt;main&gt;
    &lt;p&gt;This post could’ve been titled “Nostr vs ATProto”, but that really isn’t what I wanted to do here. While I will be comparing and contrasting them a lot, and that’s kind of even the point of writing this, I didn’t want to really pit the two against each other at all, and especially not with the title. I also want to try avoiding commenting on the differences between the communities that have formed on the protocols and their apps, although I definitely will be looking at the philosophical differences between the two a lot - also kind of the point of writing this. This also isn’t a super deep technical post, though it assumes familiarity with technical concepts. I also might come back to edit parts of it and add more later.&lt;/p&gt;
    &lt;p&gt;You can read and leave comments on this post here on Bluesky, or here on Nostr, or even here on Mastodon.&lt;/p&gt;
    &lt;p&gt;So I wrote a paragraph mostly about what this post isn’t about, with a little bit about what I will talk about in it, but I haven’t really explained what this post is, or why I’m writing it. Honestly, I’m not completely sure of the first one yet either; I’m figuring that out as I write it. The paragraph at the top are really serving as guidelines for myself as I write this.&lt;/p&gt;
    &lt;p&gt;However, I can explain how this post came to be. It started with a showerthought (I was literally in the shower) about how similar ATProto and Nostr really are. This thought came to me after ruminating on ATProto Relays and Nostr Relays, and thinking about how my favorite feature of Nostr Relays (spoiler: it’s filtering) could be added to ATProto Relays, and why you would want to do that. More broadly, this made me think that the two protocols are similar enough that they are likely to slowly converge over time as they learn from each other.&lt;/p&gt;
    &lt;p&gt;A direct result of those thoughts (after getting out of the shower, of course) was to search the internet for a good comparison of Nostr and ATProto. A direct result of my failure to find any was this Bluesky skoot (There’s a lot of good replies and thoughts in that thread as well—you probably want to read it before continuing with this post). A direct result of my skooting that was this reply. Before, I’d been tentatively considering writing a purely technical comparison after not finding any, but that reply really set the stage for deciding what I wanted to do in this post.&lt;/p&gt;
    &lt;p&gt;So, to start, let’s look at…&lt;/p&gt;
    &lt;head rend="h2"&gt;How we got here&lt;/head&gt;
    &lt;head rend="h3"&gt;A Caged Bird&lt;/head&gt;
    &lt;head rend="h4"&gt;or, Twitter&lt;/head&gt;
    &lt;p&gt;Twitter here could, in theory, be replaced here by just “Centralized Social Media”, but really it was Twitter that got us here. Both ATProto and Nostr exist because of Twitter - the AT Protocol very directly so, Nostr as a response to “censorship” (real or perceived) on Twitter. ATProto is the result of Bluesky’s original mission - to build a decentralized protocol Twitter could adopt. Post-Elon, who knows if that will ever happen, but, well, that is how it started.&lt;/p&gt;
    &lt;p&gt;Twitter sprang into existence in 2007, as a small, SMS-based service that allowed people to post short status updates - tweets, as they became known. Who knows if it was the first of its kind? Well, it certainly became the most popular. It really was the service that was able to popularize the concept of microblogging. It developed a multitude of subcultures, each with their own unique characteristics, often intersecting with each other in fascinating, unpredictable places and ways. And while Twitter certainly never became as popular as some of its big tech companions, it may have had the greatest cultural impact - it was one of the only places in existence where an average person (you!!) could, say, ratio a presidential candidate or give interesting new details on a story to some famous journalist (I don’t know, I just made those up). Some have said it was the first “global town square”.&lt;/p&gt;
    &lt;p&gt;Over the years of Twitter’s existence, lots of things happened to Twitter. Moderation issues including Donald Trump, authoritarian governments around the world, all sorts of mini community wars and harassment, etc. Twitter, as beautiful as it was, well… kind of sucked, and people drew many different (not mutually exclusive and often overlapping!!) conclusions about why. Some, like Christopher Bouzy of Spoutible, concluded that the platform’s moderation simply wasn’t enough for what the platform had become, and people needed a smaller, more closed space with stricter moderation policies. Others concluded that a global-scale social network is simply an inherently bad idea and people should stick to smaller, more tight-knit communities. But one of the most popular conclusions was that something as important as Twitter - whether you considered it a “global town square” or a place to make connections with your community or Whatever Else - simply could not and should not be controlled by a single corporation. Indeed, this was the conclusion that Twitter themselves came to! This is the conclusion that both ATProto and Nostr are founded upon - the idea of a move from closed, centralized, corporate-owned social platforms to a world of open, decentralized social protocols.&lt;/p&gt;
    &lt;p&gt;But ATProto and Nostr don’t exist in a vacuum. They weren’t the only ones to come to this conclusion. They weren’t even the first. And that brings us to…&lt;/p&gt;
    &lt;head rend="h3"&gt;The Mastodon in the Room&lt;/head&gt;
    &lt;head rend="h4"&gt;or, ActivityPub and the Fediverse&lt;/head&gt;
    &lt;p&gt;⚠️ I am not an expert on ActivityPub. Take everything in this section with a grain of salt. If I get something wrong, please correct me. ⚠️&lt;/p&gt;
    &lt;p&gt;ActivityPub is kind of a big deal in the decentralized social protocols world. It’s not the first, either - it would be extremely hard to really find a first. But it is, at least for now, the largest, and realistically is about to become a lot larger, at least if Meta Threads federates with it.&lt;/p&gt;
    &lt;p&gt;It’s also got an entirely different philosophy to either Nostr or ATProto - while both of the latter are based on a more individualistic approach to decentralization, ActivityPub opted for a more collectivist approach, one that favors tight-knit communities over a global network (that hasn’t stopped people from trying to build global networks with it, though.)&lt;/p&gt;
    &lt;p&gt;(Side-note: I should also mention that whether the Fediverse should focus on smaller communities or mass-interconnection has been a debate even within the Fediverse since right about the beginning, which a lot of the differing viewpoints around this topic explained brilliantly by Evan Podromou. Since Small Fedi seems to be the dominant philosophy shaping the current Fediverse, I’ve mostly focused on Small Fedi when talking about ActivityPub here.)&lt;/p&gt;
    &lt;p&gt;There are many different server implementations of the ActivityPub Spec, each adding their own unique flair to the ecosystem. The most popular of these implementations is Mastodon. ActivityPub is also, like I said above, kind of a big deal in the decentralized social protocols world. Almost everyone working on decentralized protocols after ActivityPub has been forced to acknowledge its existence, draw comparisons to it, and often been bridged to it. In fact, when Jack Dorsey fired off his famous tweet thread announcing Bluesky, he was definitely aware of ActivityPub, given that in a reply to a reply to that thread, he stated “ActivityPub is great.”&lt;/p&gt;
    &lt;p&gt;Because ActivityPub uses a federation model centered around small community servers, it has a lot of the benefits of centralized social media. For example, it makes it relatively easy to support private content, since it’s a push-based protocol - only those whose inboxes you push content to can view it (there’s also an “Everyone” option that makes your content fetchable, I think). This is also why the Fediverse has things like Follow Requests, server-to-server DMs (though your instance admin can view them - ActivityPub kind of assumes you trust them), and real blocks that mostly work.&lt;/p&gt;
    &lt;p&gt;However, many of the more collectivist choices made in ActivityPub were concluded to not be conductive to a “decentralized Twitter”, and both ATProto and Nostr exist in large part because of this. In fact, both ATProto and Nostr strayed from ActivityPub for the same reasons - identity is extremely tied to your initial server. There are good reasons for this, given that ActivityPub is largely used by smaller communities who federate with each other, but it does have an important consequence:&lt;/p&gt;
    &lt;p&gt;Your data is not really portable. You can move accounts to another server, and if your old server is well-behaved it can add a redirect to your new account, which will help automatically transfer your old social connections over to your new account, but this doesn’t include any of your data except your follows and followers, and falls apart if your old server goes offline, is adversarial to you or your current server, or in basically any situation where you can’t get that redirect.&lt;/p&gt;
    &lt;p&gt;There are many other philosophical differences between the ActivityPub camp and the Nostr and ATProto camp, but this one is the most important one, at least in my opinion - both ATProto and Nostr have sections explaining “Why not just go with ActivityPub?” that state this as their primary reason. Both ATProto and Nostr have real account portability by design.&lt;/p&gt;
    &lt;p&gt;Both of these protocols don’t have much in common with ActivityPub, so I won’t talk about ActivityPub too much here. But there is one older protocol that both of them extensively draw inspiration from…&lt;/p&gt;
    &lt;head rend="h3"&gt;Secure Scuttlebutt&lt;/head&gt;
    &lt;p&gt;This is where things start to get pretty interesting. In 2014, a New Zealand programmer named Dominic Tarr was living on a sailboat. As you might assume, such a life includes little internet, and when it comes, in sporadic bursts. Centralized social media, like Twitter, wants you to be connected at all times, scrolling your feed and looking at ads. Tarr didn’t want that. The result? He designed a protocol designed for offline-first, intentional, slow communication, free from Big Tech. Its name? Secure Scuttlebutt.&lt;/p&gt;
    &lt;p&gt;Scuttlebutt uses an append-only log of cryptographically signed messages. Your identity is an Ed25519 keypair and is pretty much tied to a single device. One consequence of this is that, as the Scuttlebutt developer docs themselves acknowledge, “If a user loses their secret key or has it stolen, they will need to generate a new identity, and tell people to use their new one instead.”&lt;/p&gt;
    &lt;p&gt;Because it’s an append-only log, every message must contain a reference to the previous message - a bit like a blockchain. That also means that deletes are straight-up impossible. This is also not necessarily a bad thing, just a trade-off.&lt;/p&gt;
    &lt;p&gt;Scuttlebutt started as a purely peer-to-peer protocol, using a gossip model - in fact, that’s where its name comes from; in sailor-slang, scuttlebutt means “water-cooler gossip”. The first popular Scuttlebutt client was an app called Patchwork, authored by Paul Frazee (keep this guy in mind, he’s gonna be important later), and initially the protocol and client often evolved together, adapting to each other’s needs.&lt;/p&gt;
    &lt;p&gt;By default, when you add to your append-only log, that addition only exists on your device; but the next time you connect to a peer running a Scuttlebutt client, your two clients will sync with each others’ logs, and then verify them against each others’ public keys. And to verify the newest part of a Scuttlebutt log, you need the whole log - this ensures that if someone gets part of your content, they get all of it.&lt;/p&gt;
    &lt;p&gt;But you don’t just sync each others’ content - your clients sync all the logs they have locally. That’s why it’s called the gossip model - once you put out a post, as long as you’re connected to a few peers every once in a while, your post will spread as fast as gossip to the friends of your friends. It usually takes time for that information to spread to everywhere, which keeps the pace of Scuttlebutt life somewhat slow and relaxed, with the most active communities being, again, small and tight-knit. Scuttlebutt is definitely not a global social network. The gossip model was driven by the social graph, allowing users to sync with others based on who they follow and who their connections follow. This mechanism relied on cloud bot users, known as “pubs,” acting as connectors and community hubs.&lt;/p&gt;
    &lt;p&gt;Scuttlebutt syncing took time due to the necessity of syncing all activity. Pubs played a crucial role in facilitating connectivity within the network, ensuring that users could discover others either by sharing a pub or by following users who were connected to them.&lt;/p&gt;
    &lt;p&gt;Scuttlebutt’s evolution was influenced by the desire for decentralized communication, distinct from the centralized nature of platforms like Twitter. It offered an alternative for those seeking intentional, offline-first communication free from the constraints of Big Tech. While initially designed for smaller, tight-knit communities, the ideas and learnings from Scuttlebutt inspired later attempts to build decentralized networks suitable for global networking.&lt;/p&gt;
    &lt;p&gt;So, now the stage is mostly set. Twitter was the first “global town square”, a social network connecting people and ideas worldwide - but not without a myriad of problems, which many concluded were due to its centralized nature. ActivityPub and Scuttlebutt (and others) experimented with decentralizing the social world, mostly with a focus on smaller communities, though as they evolved people tried to make them more suitable for global networking. Neither of them would prove viable for global social networks, but the learnings from them would help develop the next generation of social protocols.&lt;/p&gt;
    &lt;head rend="h3"&gt;Freeing the Bird&lt;/head&gt;
    &lt;head rend="h4"&gt;or, where ATProto and Nostr came from&lt;/head&gt;
    &lt;p&gt;All of this is important background for understanding the motivation behind these two protocols. Twitter started it all by showing us what microblogging at scale - a “global town square” - looks like. It showed us how many problems there are with it, and to some, that the only way to fix them is to remove corporate control. ActivityPub and Scuttlebutt showed us two very different ways of doing so, each with their own major benefits and major drawbacks. But there’s still a long way to go from these experiments, which were largely paving the way in the late 2010s, to where we are now, almost halfway into the third decade of the 21st century. To fill in these gaps, we can start towards the end of the second decade of the 21st century.&lt;/p&gt;
    &lt;p&gt;It wasn’t just people outside Twitter who were aware of the multitude of issues with Twitter - of course Twitter noticed them too. Twitter had started as a much more open company than it was at this point in December of 2019 - over the years, they’d taken, for a variety of reasons, a more centralized path, facing investor pressure for returns, and other such things. Twitter knew that, in the words of founder then-CEO Jack Dorsey, “centralized enforcement of global policy to address abuse and misleading information is unlikely to scale over the long-term without placing far too much burden on people.” Jack and the rest of Twitter drew the same conclusion as ActivityPub and Scuttlebutt had before - corporate control of social media was simply bad for everyone. Twitter was a company full of people who realized the service was just in a shitty position no matter how you looked at it, and who were doing everything in their power to keep things healthy despite it all - and they saw a way out: to build on, or build, an open protocol for a global social network. And for all the reasons we talked about before, about ActivityPub and Scuttlebutt, neither of those protocols were up to the task.&lt;/p&gt;
    &lt;p&gt;So the Bluesky initiative began. The early history of the project is much better documented elsewhere, but one of the most interesting things to come out of it at this early stage was an ecosystem review of existing decentralized protocols. It was authored by a Zcash developer named Jay Graber, who would go on to become CEO of Bluesky. It included contributions from several notable people in the decentralization space, including Christine Lemmer-Webber, co-author of the ActivityPub spec, Paul Frazee of Patchwork (and at the time now working on Beaker Browser and Dat), Whyrusleeping from IPFS, and Rabble of early Twitter (at the time working on planetary.social, a Scuttlebutt client). It lays out the state of numerous decentralized protocols, including ActivityPub and Scuttlebutt, and explains how user discovery, moderation, etc works in each of them.&lt;/p&gt;
    &lt;p&gt;At the end of all this ecosystem review, Bluesky concluded that none of these existing protocols was really suitable for their goal - a decentralized protocol Twitter, a global social network, could run on. So they decided to create their own - ATProto - and incorporated into a Public Benefit LLC to help achieve this goal. And when their initial team was hired, it included none other than Paul Frazee of Patchwork, in addition to Aaron Goldman, a former security engineer at Twitter, and Daniel Holmgren, an engineer with experience building on IPFS.&lt;/p&gt;
    &lt;p&gt;Now, while all of this was happening, a Bitcoin enthusiast under the pseudonym Fiatjaf was working on his own little thing. His idea was a non-peer-to-peer reimagining of Scuttlebutt and what it would take to make a similar protocol usable on a global scale. And on November 7th, 2020, the first basic working code for his idea of “Relays” quietly slipped onto the scene. Nostr’s initial description even cites Scuttlebutt as an inspiration - the main design differences between the two (at a high level) are that Nostr moves from a p2p network, with pubs as an afterthought, to a purely client-relay model, and that Nostr events are all separate units that do not form a chain.&lt;/p&gt;
    &lt;p&gt;His motivation for creating this protocol was, somewhat similarly to Bluesky, problems with Twitter. Bluesky was motivated by the idea that content moderation at scale is impossible to do well, and centralizing it in the hands of a single company was a bad idea. Nostr, meanwhile, views moderation itself as an enemy - as censorship that the protocol should be resistant to. While in reality, even Nostr has ultimately ended up exploring different forms of communal moderation, the primary motivation behind Nostr’s design choices is an idea of extremely high censorship resistance. This implies that the design, rather than optimizing for consistency, should optimize for availability - if someone wants to see your content, they should be guaranteed to be able to get it from somewhere. The protocol design is pretty conducive to this.&lt;/p&gt;
    &lt;p&gt;Both of these efforts were toiling away in the darkness, waiting for their moment in order to replace centralized social media with a decentralized future. Then in late 2022, something remarkable happened. Centralized social media fell prey to one of its prime weaknesses, right where everyone could see, thanks to one very famous billionaire. Elon Musk payed 44 billion dollars for Twitter, released the so-called “Twitter Files”, and Jack Dorsey, who had earlier kicked off the Bluesky initiative with 13 million dollars, put out a little manifesto in response, titled a native internet protocol for social media. Within a few hours, someone responded pointing him to the Nostr protocol, and he grew very interested, soon giving fiatjaf 14 Bitcoin to help fund Nostr development. A few months later, Bluesky launched their reference app for the AT Protocol. About a year later, Jack Dorsey left the Bluesky board, having chosen to focus on Nostr instead, as it aligned with his “free-speech-Bitcoin-vibes” ethos better. This was despite the fact that ATProto basically does everything he wants in a decentralized social protocol, but he prefers the more Bitcoin-y community of Nostr.&lt;/p&gt;
    &lt;p&gt;Okay, so that’s how we got here. Now we’ve arrived, back in the present. Let’s look at…&lt;/p&gt;
    &lt;head rend="h2"&gt;Where we are&lt;/head&gt;
    &lt;p&gt;Both Nostr and ATProto follow a similar pattern: adapting peer-to-peer data models to work in a client-server model (that isn’t quite federation). The peer-to-peer world had to deal with a unique problem: because there were no servers, there was no canonical source for data where you could go to verify its integrity. Thanks to the wonders of modern cryptography, efforts like Scuttlebutt, IPFS, and Dat all were able to use self-certifying data structures that could be verified independently of any third-party authority. A good example of this is a Merkle Tree, which is a data structure that ATProto also uses (be sure to watch that video, it’s very good and explains well why peer-to-peer networks need this).&lt;/p&gt;
    &lt;p&gt;As it turned out, these data structures and their benefits would help solve many of the problems the federated world faces. Specifically, the federated world, while no longer reliant on a single central server, often ends up simply shifting this reliance to smaller centralized servers that are the only canonical source for user data. When done correctly, applying peer-to-peer data models to the server would reduce this reliance and make data more independent of servers, while also allowing the big-world networking that only servers can achieve.&lt;/p&gt;
    &lt;p&gt;This sounds like a perfect solution, but it’s worth mentioning that it does have some important tradeoffs compared to a pure federation approach like ActivityPub’s. For example, while deletes are still possible on both protocols (though rather difficult on Nostr, which you might be able to piece together why), if someone has your data saved from before your deletion, it is much easier to prove that you said it and hold it up as yours than it is on a protocol that doesn’t have you cryptographically sign everything. And since both protocols heavily optimize for public content, things like Direct Messaging become much more difficult - in fact, on Nostr, DMs are public like everything else (their content is encrypted so no one else can read them). In general, trying to keep data private becomes extremely difficult; these protocols have delivery models which both center around the same self-certifying data being replicated in many places so anyone who wants it can get at it. With this, things like blocking other users become basically impossible, since there’s no canonical source to restrict content from.&lt;/p&gt;
    &lt;p&gt;Now let’s look at a few different protocol building blocks and how each protocol handles them.&lt;/p&gt;
    &lt;head rend="h3"&gt;Identity&lt;/head&gt;
    &lt;p&gt;Identity in networks is a difficult problem. Ideally, you want identifiers to be human-meaningful - for example, a Twitter handle. If I see the Twitter handle @jack, I can be fairly sure that that’s Jack Dorsey. You also want them to be secure - only @jack should be able to create a post that says it’s from @jack, and I shouldn’t easily be able to take over the account @jack without gaining access to some kind of key. And you probably also want them to be decentralized, so that @jack isn’t beholden to anyone else to hold his identity, and can move around.&lt;/p&gt;
    &lt;p&gt;Unfortunately, it’s not easy to have all three of these nice properties - Secure, Human-Meaningful, and Decentralized - at once. Almost every system which tries to have all three has to end up compromising on one of them. This trilemna is known as Zooko’s Triangle. As examples:&lt;/p&gt;
    &lt;p&gt;Twitter usernames are secure - I can’t just put out a tweet that looks like it’s from @jack - and human-meaningful - a guy with the handle @jack is probably named Jack. But they’re obviously not decentralized - they are all reliant on Twitter’s servers, and it’s Twitter who decides that @jack points to Jack Dorsey’s account. If they, say, wanted to rebrand to X, and someone was using the @x handle, Twitter could easily take it from them and make their own handle @X.&lt;/p&gt;
    &lt;p&gt;Scuttlebutt, meanwhile, has identity that’s decentralized - it’s just your private key, essentially a random number - and your public key, the part other people can see. It’s also secure - I need to actually have your private key to pretend to be you. But a public key, which is also just a number (derived from your private key), is not very human meaningful.&lt;/p&gt;
    &lt;p&gt;If you’re familiar with ActivityPub, you might argue that ActivityPub usernames are all three. This isn’t really true - ActivityPub usernames behave like Twitter usernames, except instead of just one big central Twitter server deciding what username points to what, this is handled in smaller centralized servers which federate with each other.&lt;/p&gt;
    &lt;p&gt;Nostr and ATProto also experience this problem, and they both share a few views around identity, listed out here so each one corresponds to a side of Zooko’s Triangle:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Your identity should not be permanently tied to a single server - Decentralization&lt;/item&gt;
      &lt;item&gt;Your data should be cryptographically verifiable as coming from your identity - Security&lt;/item&gt;
      &lt;item&gt;There are two “layers” of identity - a permanent computer-oriented one and a changeable human-friendly one - Human-Meaningful.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Even with these similarities, how that really plays out in both protocols looks extremely different. The idea that your data is cryptographically verifiable as yours implies a keypair somewhere. In Nostr, that’s exactly it - your identity is just a secp256k1 keypair. Nothing more, nothing less.&lt;/p&gt;
    &lt;p&gt;That sounds very much like the permanent computer-oriented layer of identity. So the human-friendly identity is handled by a Nostr event of the profile type - this contains stuff like your bio, display name, and avatar. There’s also NIP-05, which allows using the .well-known/nostr.json path on a domain to get email-style usernames, like &lt;code&gt;jack@cash.app&lt;/code&gt; - and this includes a special case, &lt;code&gt;_@domain&lt;/code&gt;, that gets treated by clients as just &lt;code&gt;@domain&lt;/code&gt;. When you &lt;code&gt;@mention&lt;/code&gt; someone in a Nostr note, it’s just &lt;code&gt;@&amp;lt;their public key&amp;gt;&lt;/code&gt;, which clients then simply display as their display names. Notably, having either a display name or even a real NIP-05 username is completely optional under Nostr, and your public key really is your identity.&lt;/p&gt;
    &lt;p&gt;This looks like mostly a success, at least in terms of taking those views and treating them as criteria. Nostr actually takes the first point - identity should not be permanently tied to a single server - and goes slightly further: in Nostr’s model, where your identity really is just your keypair, no servers are involved in identity at all. Why would you want that? A major benefit of this approach is that if any of the servers involved in the system goes down or is no longer friendly with you, your identity doesn’t even need to be “recovered” - it’s just there, the same as before. This works well with the Nostr Relay model, which we’ll discuss in the next section.&lt;/p&gt;
    &lt;p&gt;The drawbacks of this approach are the same as Scuttlebutt. Thanks to the relay model, your identity is no longer tied to a single client on a single device - you can easily move around, between relays, between clients, between devices. This, by itself, for most people, is a good thing, but it comes with an entirely different kind of problem:&lt;/p&gt;
    &lt;p&gt;Managing a cryptographic keypair is simply not very user-friendly. You simply can’t expect most people to write it down and keep it in a safe place or even take the time to understand what it means. People expect username-password systems, and sure, newer technology like passkeys is actually more secure and potentially easier - but that comes with actual benefits over username-password for most people! Managing a keypair is not only unfriendly, it’s incredibly risky. Since the entirety of your identity is your keypair, and to sign in to Nostr clients is to give them your private key - well, you can probably see where this is going. And again, since your identity is just your keypair, just like with Scuttlebutt, if an attacker gets a hold of your private key, that identity is gone. No longer yours. There’s no-one you can go to for help, no-one who can recover that account, no password reset link.&lt;/p&gt;
    &lt;p&gt;That sounds very negative, but it is worth noting that at least for web Nostr clients, there is a (relatively) good solution to the sign-in problem - NIP-07. In the NIP-07 world, you don’t give every client your private key - you give it once to a browser extension, and then every time a web client wants to do something on your behalf, instead of directly using your private key to sign messages etc, it delegates that to your trusted extension. This is a lot better than giving your private key out to every client that has some cool new feature you want to try. Of course, this doesn’t help with recoverability - if you lose your private key, whether to your memory or to an attacker, it’s still gone. There are attempts to solve this, too, which I’ll talk about in “Where we’re going” because it has interesting future implications.&lt;/p&gt;
    &lt;p&gt;ATProto looks at things a little differently. Because of the aforementioned difficulties involved with users managing their own private keys, Bluesky chose to have your signing keypair live on a server - your Personal Data Server, or PDS. Your PDS is responsible for serving your Data Repository to other services on the network, and serves as more-or-less the canonical source for your content. However, your Repository is fully self-certifiable (that means someone can check whether or not you created the content in a copy of your Repo without needing a third party to verify), and so is not permanently tied to your PDS. This is because your PDS is not the canonical source for your identity - but your identity is also not something as small as a keypair here, and does not live entirely client side.&lt;/p&gt;
    &lt;p&gt;Instead, ATProto uses their own homegrown DID (Decentralized IDentifiers, W3C spec with the aim of helping, well, decentralize identity) method called did:plc, for PLaCeholder. Why is it named “placeholder”? Well, because as of now, it’s centralized. That’s right, the supposedly “Decentralized” Identifier is centralized - and Bluesky actively doesn’t want it to be that way. did:plc was initially intended to be a placeholder until a decentralized method was able to meet their requirements - “a strongly consistent, highly available, recoverable, and cryptographically secure method with fast and cheap propagation of updates”. did:plc has all of these at one major cost - it’s centralized. However, the data in a did:plc is self-certifying (you don’t need to trust/rely on plc.directory to verify the information), so it’s conceivable for it to become more decentralized in the future. (You can also use a did:web, which removes this centralization but forces you to manage everything yourself and relies permanently on your control of a web host on a domain, thus removing most of PLC’s benefits. This is pretty niche, so I won’t talk about it in detail here.)&lt;/p&gt;
    &lt;p&gt;A did:plc: contains two public keys - your rotation key and your signing key. This signing key is the aforementioned key that the PDS uses to sign your data. The rotation key is important because it manages your did:plc: and thus is needed to sign updates to your DID document, such as when migrating PDSes. The canonical source for your current PDS, valid signing key, handle, and rotation keys (which can also be rotated) are all your DID document. In this way, a DID serves as a “Theseus Identity”, an idea Aaron Goldman laid out well in this YouTube video.&lt;/p&gt;
    &lt;p&gt;The canonical source of your identity is your DID doc, and all the information in it, i.e. your handle and current PDS must be a two-way connection - your handle is a domain with a dns txt record or ./well-known/atproto-did that must point to your DID, providing two way verification, and whatever PDS your DID document points to must actually have your account on it. Meanwhile, the PDS handles data, and implements a standard, user-friendly login system, and signs your updates with your key on the server side.&lt;/p&gt;
    &lt;p&gt;Here, there was a trade-off between principles of security, recoverability, and user-friendliness, and a principle of max-decentralization - low-friction identity, with no centralizing points of control at all, extreme takeover resistance. Notice that&lt;/p&gt;
    &lt;p&gt;Where ATProto chooses user-friendliness, Nostr chooses max-decentralization. This is a trend that repeats in many other parts of each protocol’s design, as we’ll see.&lt;/p&gt;
    &lt;head rend="h3"&gt;Data&lt;/head&gt;
    &lt;p&gt;In the traditional federated world of protocols like ActivityPub, there had never been much of an emphasis on data, and the formats and structures it’s stored in. The federated world thought much more about how servers should communicate messages rather than how they should store data - this difference is laid out well by Bryan Newbold, who incidentally now works on protocol design at Bluesky. This emphasis on communication standards rather than data standards is a big part of why there’s no standard “fediverse repo” that you can transfer between servers, and other such problems in the federated world.&lt;/p&gt;
    &lt;p&gt;The peer-to-peer world, as we looked at earlier, couldn’t afford to define pure transport protocols - they had to design standardized data structures that were self-certifying and self-contained. An example of such a data structure is a blockchain, and indeed, the peer-to-peer community and the blockchain community learned much more from each other than either of them and federation did from each other.&lt;/p&gt;
    &lt;p&gt;This was the status quo until ATProto and Nostr came along and broke the mold by bringing these self-certifying data structures into the client-server world. They both use asymmetric cryptography to make this data self-certifying, but the similarities basically end there.&lt;/p&gt;
    &lt;p&gt;In the Nostr model, servers are dumb. They have basically one job - transmit data. There’s only one kind of server in Nostr - a Relay, and a Relay does only three things:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Receive data to store&lt;/item&gt;
      &lt;item&gt;Return that data when asked for it&lt;/item&gt;
      &lt;item&gt;Provide a continuous stream of the data being placed on that Relay&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Notably, Relays store data. Data is placed on Relays. All this data is created on the client-side. Relays don’t manage identity or any of that. Your keys live with your client, and it’s your client who signs your &lt;code&gt;events&lt;/code&gt; (a piece of data in Nostr terminology.) When you fetch data from a Relay, it comes back with signatures and all - which, guess what, your client verifies. Your client almost operates under the assumption that Relays will try to do weird stuff, people will submit fake events, etc - and so Nostr removed the requirement of trust, by making clients verify everything themselves. A trade-off!&lt;/p&gt;
    &lt;p&gt;Nostr, by optimizing for censorship resistance, needs to remove as much rigidity from its design as possible. Data needs to be cheap to create and transmit and store. So Nostr events all exist as individual units following a fixed JSON format with a strict signing convention. Unlike Scuttlebutt, these events don’t need to form a chain - they are purely self-contained. Like your identity, there’s no canonical source for them either - by design, you’re supposed to be able to get them from pretty much any relay that has them. When you create the event, your client signs it and then just publishes it to as many relays as possible, from where it will circulate into other Relays, consuming clients will republish them, etc. Because they are signed against your public and are fully self-contained, it’s trivial to verify them too, removing the necessity of trust in the Relay you get the event from.&lt;/p&gt;
    &lt;p&gt;ATProto data is also very portable, but it is slightly more rigid than Nostr data is. Instead of using these one-off events which are fully self-certifying, ATProto stores your data as records in what it calls a repo. These records live under a collection like &lt;code&gt;app.bsky.feed.post&lt;/code&gt; and are given an &lt;code&gt;rkey&lt;/code&gt; (record key). Together, this forms a URI for any given record that looks like &lt;code&gt;at://did/collection/rkey&lt;/code&gt;. Importantly, records are mutable, unlike nostr events, and the contents an at:// uri points to may change. However, all the commits to your repo, which contain changes like record creation, editing, and deletion, are content-addressed using a CID, and these are immutable, and are all signed using your repo’s signing key (the one from your DID doc, remember?) Your commits can also optionally form a chain if you want, but when they don’t, deletes are easier. (If all of that flew over your head, don’t worry. All you need to know is that ATProto allows deletes and edits, while Nostr can’t.) Because your data all lives in this repo, unlike Nostr, ATProto actually has a canonical source for your data.&lt;/p&gt;
    &lt;p&gt;There’s also a single place where your repo lives, instead of being scattered as a bunch of events across Relays like in Nostr. Your repo lives in your Personal Data Server - as the name implies, a PDS is designed to store your personal data. While Nostr Relays are dumb pipes, PDSes are more like a user agent, which really performs almost all actions on the user’s behalf. It’s responsible for signing and storing commits to your repo and wrapping them in a nice API that’s easy for clients to use.&lt;/p&gt;
    &lt;p&gt;Actually, we should probably take a minute just to talk about deletes and edits. When I said Nostr can’t allow deletes and edits, that wasn’t completely true: Nostr does have a way to request deletes from Relays, which most but not all Relays support, but the real trouble is figuring out what a delete even means (and edits are straight-up impossible since Nostr event IDs are fully content-addressed). Nostr’s model is fundamentally based on an idea of events flowing from the creator into Relays, which then flow into other people’s clients, which cache them and republish them to other Relays, and so on. An event doesn’t have a location to be deleted from - it could be (and in Nostr’s model, should be!) anywhere and everywhere.&lt;/p&gt;
    &lt;p&gt;In ATProto, your repo actually has a place where it lived - your PDS, as specified in your DID doc. And at:// uris are mutable, so a commit can actually change the content it points to. Deletes remove content from your repo - although anybody who has a copy of your content pre-delete will still have it and can very easily cryptographically prove that it’s your content.&lt;/p&gt;
    &lt;head rend="h3"&gt;Trust&lt;/head&gt;
    &lt;p&gt;Nostr and ATProto have relatively similar approaches to trust, though with some important differences. Nostr trusts nobody, and is built accordingly, with clients verifying everything themselves. ATProto assumes you trust somebody, but lets you choose whom you trust, and provides the mechanisms needed to verify that trust is placed correctly (although this could be improved).&lt;/p&gt;
    &lt;p&gt;Nostr, as mentioned earlier, was designed to basically eliminate the necessity of trust in the first place. Because everything is verified client-side, and essentially functions as a bunch of self-authenticated units of data traveling between relays and clients, there really is no one to trust. Relays can choose not to carry content, but other relays might have them instead. However, the fact that all data moves as individual units means that it would be harder to spot if only certain events are available.&lt;/p&gt;
    &lt;p&gt;Since every user is assumed to be pointing their client at more than one relay, it doesn’t really matter if one relay chooses not to carry someone’s content; there’s a high likelihood another one is. If many relays agree to hide something from the network, then it won’t show up, but that’s pretty unlikely to happen. As for trusting the authenticity of the content delivered by the relay, because it’s cryptographically verifiable as coming from the attached pubkey, any shenanigans will be spotted quickly. And verifying a pubkey’s identity is done by attaching it to a trusted NIP-05, i.e. @jack@cash.app or @jb55.com.&lt;/p&gt;
    &lt;p&gt;ATProto isn’t that different, all things considered, but there’s multiple other hops between the source of data and the client you view it in. Each ATProto PDS puts out a cryptographically verifiable stream of commits being pushed to repos on the PDS, carrying every bit of data to the subscribers, called the firehose. Because there are a lot of PDSes, an optimization also called a Relay was introduced, which basically aggregates PDS firehoses into its own giant firehose. In a way, this Relay could be considered its own centralization point where bad untrustworthy things could happen, but once more than one Relay exists this should be less of a problem. At the Relay and PDS, everything is cryptographically verifiable, and as a bonus because of ATProto’s repo structure, you can tell if you’re not getting the whole picture.&lt;/p&gt;
    &lt;p&gt;After the Relay, things get a bit murkier, because as an optimization ATProto applications use something called the AppView. The AppView reads in the firehose from the Relay constantly and pieces it together into fully hydrated and speedy APIs which make clients’ lives much easier. The thing about the AppView is that it’s basically centralized, and though it’s not super difficult to spot inconsistencies between what the AppView gives you and the true state of the network, the AppView doesn’t even provide the cryptographic signatures that were passed into it, making its trustworthiness a bit murky at some unknown time in the future, at which point other contenders will hopefully exist to replace it, based on analysis of which one is more trustworthy by comparing the data each AppView gives you with what actually exists on the Relay and PDSes.&lt;/p&gt;
    &lt;head rend="h3"&gt;Privacy&lt;/head&gt;
    &lt;p&gt;Everything is completely public on both protocols and in fact being actively broadcasted to loads of consumers, not just sitting around waiting to be stepped on and found. Nothing you do is really hideable from anyone.&lt;/p&gt;
    &lt;p&gt;However, at least on ATProto, there have been attempts to add some semblance of privacy to the network. For example, there are AppView-enforced blocks, but they can be bypassed very easily. There is also a setting which asks the client to not show your posts to logged-out users, but this is superficial at best, since only some clients really follow it anyways, and the “official” popular client does so it does kind of work. But overall these measures both run a risk of making people feel like their posts and other activity are hidden and safe, lulling them into acting with less precaution than they should, especially since there is a lack of user awareness around the all-public nature of data on the network.&lt;/p&gt;
    &lt;p&gt;No such attempts have been made on Nostr. This is on the one hand unfortunate, but on the other hand possibly better since it is more honest about the true nature of how public everything is on the network.&lt;/p&gt;
    &lt;head rend="h3"&gt;Development&lt;/head&gt;
    &lt;p&gt;Due to the Bluesky devs’ past experiences with developing on peer-to-peer and federated protocols, many of them felt burnt by a Scuttlebutt-and-Nostr-style approach to development, where specifications were loose and implementations varied wildly. Because of these past experiences, Bluesky chose to go with a slightly more slow, intentional, and centralized development model. The protocol is mostly developed within Bluesky the company, though often adapts to the needs and feedback from the wider ATProto developer community, and community members often contribute to both the protocol and the clients. The rollout of core features like federation and stackable moderation has also been much more slow on ATProto than similar features in Nostr implementations, because in general Bluesky prefers to take their time and “get it right” and standardized before letting things out into the wild. Also, despite the existence of third-party clients, the “official” Bluesky app and service is still the most popular one by a huge margin, due to its being the default (and basically only) inroad into the protocol and ecosystem. There are other up-and-coming AT Protocol projects that aren’t just Twitter clones, like WhiteWind for blogging, but overall the ecosystem remains sparse compared to Nostr.&lt;/p&gt;
    &lt;p&gt;Nostr, meanwhile, takes the same approach as these previous projects - the protocol itself just exists, very small, letting anyone expand on it. When an extension wants to become standardized, it’s reviewed by a small team including fiatjaf and a few others, and becomes part of the NIPs repository (Nostr Implementation Possibilities). This is basically classic BDFL open-source. However, clients and relays are free to try their own wild things without being “official” NIPs, and any NIP proposal must be adopted by a few clients and relays before it can be considered for “official” status. So it’s a much wilder, freer ecosystem so far.&lt;/p&gt;
    &lt;head rend="h3"&gt;Applications&lt;/head&gt;
    &lt;p&gt;One of the places where ATProto and Nostr differ greatly is their model for building applications.&lt;/p&gt;
    &lt;p&gt;ATProto takes the AppView approach. An AppView is basically a service that reads in the firehose of all the public data on the network, and indexes it into hydrated “views” as an API which clients then use. AppViews are pretty resource-intensive to run and functionally centralized in nature. If you want to make a new ATProto app, you first design your schemas for content in a DSL called Lexicon. Then you make a client that can start publishing your record type, and retrieving and displaying it. For the retrieval and displaying, you create an AppView which monitors the firehose for your record types and indexes them into hydrated views, which your client can then fetch from and display nicely and neatly. This is, for example, how the Bluesky app can show a list of users who liked a post; because instead of the client having to crawl the entire network itself and figure out which likes are for the post you just viewed and then get the DID and fetch each of that user’s profiles and whether or not you’re following them by checking your own repo, and whether or not they’re following you by looking all over their follow lists, the client just makes one HTTP request and makes the result human-readable. Nice and fast. Of course, the relief that comes to the client means a lot of responsibility is thrusted onto the AppView, which becomes very resource-intensive to run.&lt;/p&gt;
    &lt;p&gt;The first steps to the Nostr model look similar at first, but rapidly diverge. With Nostr, you also start with defining event kinds, and then creating a client which can publish them, and then adding fetching and displaying. The key difference is in how events are fetched. With ATProto, you write an AppView to do the heavy lifting; with Nostr, the heavy lifting is shared between the Relay and the Client. When defining your event kinds, you make sure to also define how to use the “tags” field for that event kind, which is an array of key-value pairs with single letter keys which are indexed by the relays the events are sent to. Basically, if you want to do any kind of linking between events, or inserting any kind of indexable data, that’s where you want to do it.&lt;/p&gt;
    &lt;p&gt;Then for the fetching of the data, we use Nostr’s filtering system. With Nostr, there are two kinds of communication between the client and the relays; publishing events, which pushes the signed client-created event into the relay’s data store, and subscription. Subscription is the interesting part we’re looking at here.&lt;/p&gt;
    &lt;p&gt;Nostr clients can request a subscription to a stream of events from the relays they’re connected to, and this stream subscription can have filters attached. A filter is fully specified using the following attributes, all optional:&lt;/p&gt;
    &lt;code&gt;{
  "ids": &amp;lt;a list of event ids&amp;gt;,
  "authors": &amp;lt;a list of lowercase pubkeys, the pubkey of an event must be one of these&amp;gt;,
  "kinds": &amp;lt;a list of a kind numbers&amp;gt;,
  "#&amp;lt;single-letter (a-zA-Z)&amp;gt;": &amp;lt;a list of tag values, for #e — a list of event ids, for #p — a list of pubkeys, etc.&amp;gt;,
  "since": &amp;lt;an integer unix timestamp in seconds, events must be newer than this to pass&amp;gt;,
  "until": &amp;lt;an integer unix timestamp in seconds, events must be older than this to pass&amp;gt;,
  "limit": &amp;lt;maximum number of events relays SHOULD return in the initial query&amp;gt;
}
&lt;/code&gt;
    &lt;p&gt;By adding multiple filters, you can get all the events matching any of the filters. By adding multiple attributes to a single filter, you add multiple conditions that all have to be fulfilled for events to make it through that filter. Filters are expressly the mechanism for fetching content, since subscriptions are supposed to start by backfilling everything that meets the criteria, and then pushing any new events that meet the filters’ requirements to the client.&lt;/p&gt;
    &lt;p&gt;By studying the filter specification, it’s clear that basically every behavior of ATProto AppViews can be recreated through filters on the client-side, knowing how tags allow extensibility as well. There’s an obvious cost though: clients must be very complex and do a lot of work themselves, and for big events duplicating a lot of effort that could be handled by something akin to an AppView. The benefit of this is that it is very generic and means that any relay can generally be used for any functionality since everything you need is baked into the core protocol, and the speed of development is basically only constrained by the client, and not an AppView. And by not spending any resources on building a giant indexer yourself, you basically shift the cost onto the Relays instead. It’s another example of the more “bazaar” philosophy of Nostr compared to a more “cathedral” approach from ATProto.&lt;/p&gt;
    &lt;p&gt;So, all in all, this gives a pretty good picture of where the two protocols are now. But exciting things are on the horizon for both. We’re heading into uncharted territory…&lt;/p&gt;
    &lt;head rend="h2"&gt;Where we’re going&lt;/head&gt;
    &lt;p&gt;When Jack Dorsey wrote a native internet protocol for social media, he wrote that “As far as the free and open social media protocol goes, there are many competing projects: @bluesky is one with the AT Protocol, nostr another, Mastodon yet another, Matrix yet another…and there will be many more. One will have a chance at becoming a standard like HTTP or SMTP.”&lt;/p&gt;
    &lt;p&gt;That’s one way of thinking about it, as a competition for the final spot of “the standard for social”. But as you’ve probably noticed from reading this post up to here, I don’t really agree with this viewpoint. ATProto, Nostr, ActivityPub, Scuttlebutt, Matrix, IPFS, Dat, Holepunch, and others all share similar goals, yet have vastly different perspectives about how to accomplish them. Maybe these different perspectives will all lose! Maybe, as Jack says, one of them will win, becoming a standard that everyone adopts. Or maybe they will all learn from each other and slowly begin to converge. And it’s not hard to make the case that that last possibility will happen for at least two of these protocols - of course, Nostr and ATProto. In fact, that’s already happening.&lt;/p&gt;
    &lt;head rend="h3"&gt;Convergence&lt;/head&gt;
    &lt;p&gt;Because a lot of core ideas in the protocols were already very similar, they can quite easily borrow ideas from each other in order to improve themselves. By making nearly opposite compromises, they now face roughly opposite problems as well - but often, the other protocol already has a solution waiting for them. So first let’s look at some of the ways Nostr is becoming more like ATProto.&lt;/p&gt;
    &lt;p&gt;First, the idea of keys in a server, instead of purely client-side. As mentioned earlier, one of the dangers of Nostr keys is that by giving them to lots of random clients you try, they might accidentally end up in the hands of bad actors. One of the solutions to this was NIP-07 browser extensions; another one is the idea of an NSecBunker, for Nostr Secret Key Bunker. The idea is that this is a server, similar to a PDS, which holds your Nostr private key, and when your client wants to sign an event, it makes a request to your NSecBunker to sign that event using your private key, which stays safe in your Bunker. These requests usually are authenticated using measures like OAuth. It allows Nostr to bring back at least one part of the user experience people are familiar with.&lt;/p&gt;
    &lt;p&gt;Another idea that Nostr is ending up trying is something similar to AppViews. This is particularly divisive within the community, with many feeling that only the relay-based filtering mechanisms should be used to build clients. But because this is often inefficient, clients like Primal have begun doing their own pre-indexing of many users and posts in order to improve their UX. Unfortunately, Primal’s is proprietary, and only Primal can interact with it, due to the lack of any built-in support for AppView-style services in the Nostr protocol, vs. ATProto’s numerous mechanisms to provide explicit support for this use case.&lt;/p&gt;
    &lt;p&gt;Meanwhile, some Nostr ideas are naturally going to the ATProto world as well. The idea of keys directly owned by the users has long been floated, and at this point developers can get control of their did:plc and its rotationKeys (fun fact: I set one of my plc rotationKeys to my Nostr pubkey). Unfortunately no nice UI exists for this yet. And as for signing keys, with commits that could be pushed to a PDS instead of made there, that would rely on a PDS supporting this use case. No PDS implementation currently supports this, but there is one in development which hopes to at some point ;)&lt;/p&gt;
    &lt;p&gt;Another idea which I hope to see adopted in the ATProto world is something similar to Nostr’s filters model. While the AppView model is nice for production apps, something like Nostr filters could help a lot early in development to just play with an idea and try it out. And it could help those with concerns about the trustworthiness of AppViews quickly verify it against certain queries. You can do a shocking amount with backlinks alone.&lt;/p&gt;
    &lt;p&gt;Of course, the slow convergence of both protocols isn’t the only way the divide between them is being bridged…&lt;/p&gt;
    &lt;head rend="h3"&gt;Bridging&lt;/head&gt;
    &lt;p&gt;Recently, Bridgy Fed started bridging the Fediverse and the ATmospherewith each other. For a while, services like Mostrhave been bridging the Fediverse and Nostr with each other. Now, if you visit the Mostr homepage and scroll down, you can probably see where this is going…&lt;/p&gt;
    &lt;p&gt;Soon after Bridgy Fed started bridging the Fediverse and the ATmosphere, Nostr users experimented with this to bridge between Nostr and Bluesky. Very much an indirect hack, but also a glimpse at the future.&lt;/p&gt;
    &lt;p&gt;One of the most important promises of decentralized social media was that no matter what service you signed up on and post on, you would be able to see content from and interact with anyone, no matter which service they used either. Now, all this would work, if every service signed on to the same decentralized social protocol. However, instead, we have many, and none of them show much of a sign of becoming the singular standard for social media. Instead of Jack’s vision of one winner, bridges offer a vision of a world where every protocol can win, and it truly won’t matter which protocol your service uses, either.&lt;/p&gt;
    &lt;p&gt;While the bridging I talked about above was very indirect, Bridgy Fed itself may soon have native Nostr support. Soon all three major decentralized protocols may be able to talk to each other, and easily too.&lt;/p&gt;
    &lt;p&gt;So. Let’s recap what we’ve been through in this post so far. In the beginning, there was Twitter. Twitter’s problems caused them to look to decentralization as a way to make social media more fair. This caused many new decentralized protocols to emerge, taking inspiration from older ones. Of these new protocols, two of them, Nostr and ATProto, evolved in similar directions, yet unaware of each other made many opposite compromises. And now they are evolving back towards each other, converging in potentially very interesting ways, with bridging offering to make social media not just platform- but protocol-agnostic.&lt;/p&gt;
    &lt;p&gt;The future is looking good for decentralized social media.&lt;/p&gt;
    &lt;p&gt;You can join the conversation on Bluesky here.&lt;/p&gt;
    &lt;head rend="h3"&gt;Comments from Bluesky:&lt;/head&gt;
    &lt;p&gt;Or on Nostr:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://shreyanjain.net/2024/07/05/nostr-and-atproto.html"/><published>2025-10-12T09:24:43+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45556952</id><title>Macro Splats 2025</title><updated>2025-10-12T21:08:16.694013+00:00</updated><content>&lt;doc fingerprint="7bcdcf46dcb0d210"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Macro Splats 2025&lt;/head&gt;
    &lt;p&gt; A Gaussian splat is essentially a bunch of blurry ellipsoids. Each one has a view-dependent color, using a process similar to training an AI model, you can optimize until it converges to the photos you feed in. The result is a sort of 3D photograph that can be viewed freely from any angle. &lt;lb/&gt; Captivated by this possibility, I wanted to create splats of macro subjects. The hairy, fuzzy textures and complex structures of insects make them a perfect fit for this technique. &lt;lb/&gt; In theory, creating a splat is as simple as filming the object from all sides. Unfortunately, the extremely shallow depth of field in macro photography completely throws this process off. If you feed unsharp photos into it, the resulting model will contain unsharp areas as well. &lt;lb/&gt; Thankfully, there’s a common technique in macro photography called focus stacking, where multiple images taken from the same angle but with slightly different focal points are combined into one fully sharp photo. A single stack usually contains anywhere from 50 to 500 images. Since I needed to photograph the subject from many angles, I optimized the process to use as few photos per stack as possible and settled on 16. I shot at a small aperture of f/18 to maximize depth of field. The diffraction introduced by this setup can be minimized later in post. &lt;lb/&gt; To capture the specimen from all angles, covering a bit more than half a hemisphere, I mounted the insect on a rotary disk and tilted the camera up and down on a boom arm. A script rotated the disk by fixed increments, and each focus stack was captured using a WeMacro automated focus rail. The vertical angle was adjusted manually (only eight times), so it wasn’t a big issue. In total, I captured 111 perspectives. A full session of 1776 photos took about four hours. The main bottleneck is my Nikon D810, which isn’t built for such continuous shooting, it slows down to one frame every one or two seconds once the buffer fills up. I used a Tamron 90mm lens with a 20mm extension and shot in DX (cropped sensor) mode. Shorter lenses would change the perspective too much between focus areas, making image alignment impossible. &lt;lb/&gt; After batch focus-stacking all the photos, I ended up with 111 fully sharp images. The camera positions could then be reconstructed in COLMAP. I performed some color correction and background masking before feeding the data into training with Postshot. Out comes the splat, requiring only minimal retouching to remove the mounting. &lt;/p&gt;
    &lt;head rend="h1"&gt;See it in 3D&lt;/head&gt;
    &lt;p&gt; You can view all the insects on my superspl.at page. &lt;lb/&gt; I’m also releasing the cluster fly model for free under a CC BY license: Download here. You’re free to use this model for both commercial and non-commercial purposes, as long as you provide credit. &lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://danybittel.ch/macro.html"/><published>2025-10-12T10:08:02+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45558371</id><title>I'd like to speak to the Bellcore ManaGeR</title><updated>2025-10-12T21:08:16.384171+00:00</updated><content>&lt;doc fingerprint="8cdf387d0187a385"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;I'd like to speak to the Bellcore ManaGeR&lt;/head&gt;
    &lt;p&gt;Software archeology: running an obscure window system on vintage Linux&lt;/p&gt;
    &lt;p&gt;Nina Kalinina, October 12th, 2025&lt;/p&gt;
    &lt;p&gt;I love old computers, and I enjoy looking at old user interfaces immensely. I could spend a whole evening on installing an old version of MS Word and playing with it: "Ah, look, how cute, they didn't invent scrollbars just yet". A special place in my heart is taken by user interfaces that were historically significant and yet fell into relative obscurity (like Windows 2 or BTRON).&lt;/p&gt;
    &lt;p&gt;This is why I absolutely had to try Bellcore MGR. An early windowing system (1984), it was made by the Bell Communications Research, and it looked like Plan 9's older sister. The system was distributed over the Usenet, ported to every conceivable Unix-like system, including Minix, Linux and Coherent, and - eventually - mostly forgotten. The only two videos on YouTube that have something to do with MGR have a bit over 1000 views combined, and don't really show it in the best light possible. And I think it's a crying shame.&lt;/p&gt;
    &lt;p&gt;In this post, I will explore the system as a (power) user, starting from installing it on Debian 0.93 running on Linux 0.99 kernel. I will also share a few things about "$HOME MOVIE", an MGR-based video editor. If you want to read more about the MGR's internal design, please check out the "Links" section at the end of the post.&lt;/p&gt;
    &lt;p&gt;If you have any comments or feedback, please direct them to this Mastodon thread. If you can share any information about the historical link between MGR and 8.5 (or the lack of it), it will be greatly appreciated.&lt;/p&gt;
    &lt;head rend="h2"&gt;For those who prefer watching a video&lt;/head&gt;
    &lt;p&gt;Here is a 40-minute tour around the MGR system for Linux, accompanied by Mozart and Liszt. It will give you a good feel of what MGR is like, warts and all. The video is embedded through "Youtube-Nocookie" and should be privacy-aware.&lt;/p&gt;
    &lt;head rend="h2"&gt;$HOME MOVIE?&lt;/head&gt;
    &lt;p&gt;If you don't have 40 minutes to watch the tour, please do spend two minutes on this demo of the "$HOME MOVIE" system. It is "a suite of tools for the capture, editing and playback of window system sessions on a Sun Sparcstation" based on MGR. It is probably the most Unix way of making videos: the window manager dumps the rendering commands into a file, then the rendering commands can be altered with a set of small tools, some of which are in awk, and then these rendering commands can be packaged into a single demo.&lt;/p&gt;
    &lt;p&gt;This demonstration video has a timestamp of "April 1991", and it was available online at least since 2009 as a part of the MGR distribution. I first stumbled upon it on a GitHub mirror and was surprised to discover that no one had tried to upload the video on YouTube. This is how the demo was supposed to look like, according to the paper by S. Uhler:&lt;/p&gt;
    &lt;p&gt;I think it wasn't on YouTube yet because you cannot just open the file in any software. The demo is tailored to Sun-2/120 and relies on the Sun-2/120 performance for accurate rendering. I've implemented a simple decoder of the video format in Python, and re-timed the keyframes to some sensible values. Here it is, HD video from 1991:&lt;/p&gt;
    &lt;head rend="h3"&gt;Technical details of the video format&lt;/head&gt;
    &lt;p&gt;The entry point for a video is its script file. The script file stores the names of the sections. Each section contains a video file and an audio file. An audio file is Sun .au, which is a headerless u-law wave file (8 bits, 8 kHz). A video file is a .Z archive (use "uncompress" to uncompress it) containing commands for the MGR window system.&lt;/p&gt;
    &lt;p&gt;The $HOME VIDEO system has a tool called "to_ascii" that extracts the stream of events from the uncompressed video file. You should be aware that it word-aligns the bitmaps to 32 bits; an image of 3437 pixels is going to actually be preserved as a 3456 pixel-wide bitmap. Incidentally, this is the reason why the Linux port of $HOME MOVIE crashes on the demos from the Sun port of the $HOME MOVIE.&lt;/p&gt;
    &lt;p&gt;One interesting challenge for the video decoding was the lack of key frames. You probably know that videos are supposed to have "key frames" that can be used to adjust the playback speed, right? One of the clips for the $HOME MOVIE has exactly three: at 1 second, 7.5 seconds and 11.5 seconds; if this were to be taken verbatim, the video is going to be just four static images. But the demo was anything but four static images; Sun-2 would just render the stream of commands in real time. I had to retime this and other clips following my gut feeling.&lt;/p&gt;
    &lt;head rend="h3"&gt;An exercise for the curious minds&lt;/head&gt;
    &lt;p&gt;The demo video mentions that the music was created with the IMG system, also known as "The Incidental Music Generation system". The system has a software MIDI engine from 1990, exports 8-bit u-law RAW waveforms, and can work as a DAW programmed in C, with modules including "BANJOPLAY -- Compose banjo part to fit chords". I don't think anyone has done anything fun with it since 1993.&lt;/p&gt;
    &lt;head rend="h2"&gt;MGR screenshot tour&lt;/head&gt;
    &lt;p&gt;This section is for people who don't have all day to watch a stupid 40-minute-long video.&lt;/p&gt;
    &lt;head rend="h3"&gt;Installation&lt;/head&gt;
    &lt;p&gt;I'm using a Linux port of the MGR. It expects Linux kernel 0.99.14+; I have just the right system for the task, Debian 0.93. The installation requires the user to know their OS intimately. You need to install the "usr" files into &lt;code&gt;/usr/mgr&lt;/code&gt; first, then configure your system with &lt;code&gt;./Configure&lt;/code&gt;. Then you can run &lt;code&gt;make depend&lt;/code&gt; and &lt;code&gt;make install&lt;/code&gt; and hope that everything will compile just fine and work. It didn't for me; I had to edit some header files in &lt;code&gt;/usr/mgr/include/mgr&lt;/code&gt;, disable &lt;code&gt;MOVIE&lt;/code&gt; and &lt;code&gt;DEBUG&lt;/code&gt; options in the configuration, and chose Mouse Systems mouse driver, because no other driver worked with the middle mouse button emulation for some reason.&lt;/p&gt;
    &lt;head rend="h3"&gt;First impressions&lt;/head&gt;
    &lt;p&gt;The default install of MGR looks as bare as X11 with pure twm. Unlike X11, MGR is built around terminal emulation, so every new window is always a terminal. The left mouse button is used by MGR exclusively - to create new windows and rearrange old ones. This means applications are left with only right and middle clicks. An accidental left click will trigger the "Move window" operation, and will surely confuse you at first.&lt;/p&gt;
    &lt;head rend="h3"&gt;Menu system&lt;/head&gt;
    &lt;p&gt;Even if MGR was merely a graphical terminal multiplexor, it would've been awesome. But each terminal has vector and raster graphics support, and comes with mouse events and rudimentary menu support. Users can create new menus for console applications that do not support MGR out of the box - check out this custom menu for Vi!&lt;/p&gt;
    &lt;p&gt;One extra cool feature is support for "Cut-And-Paste". The "cut" is actually "copy", though.&lt;/p&gt;
    &lt;head rend="h2"&gt;Graphical applications&lt;/head&gt;
    &lt;p&gt;As you can see, MGR has decent support for console applications (vi, less and emacs), and comes with a set of toys (mail checker, clock, demos). There are some larger graphical applications, too.&lt;/p&gt;
    &lt;head rend="h3"&gt;pilot&lt;/head&gt;
    &lt;p&gt;Pilot is an image viewer. You can use the middle mouse button to scroll through the images.&lt;/p&gt;
    &lt;head rend="h3"&gt;mgrsketch&lt;/head&gt;
    &lt;p&gt;Sketch is a vector graphics editor. You have to use the right mouse button to draw things, as the left mouse button is reserved by the MGR itself. The middle mouse button has a menu, but it seems to be broken in Linux. It is not very fun to use.&lt;/p&gt;
    &lt;head rend="h3"&gt;mphase&lt;/head&gt;
    &lt;p&gt;Mphase shows you the moon phase.&lt;/p&gt;
    &lt;head rend="h3"&gt;mgrview&lt;/head&gt;
    &lt;p&gt;MGRview is yet another image viewer. It is much simpler than pilot.&lt;/p&gt;
    &lt;head rend="h3"&gt;Ify&lt;/head&gt;
    &lt;p&gt;Ify ("iconify") is a really clever tool for window management. If you want to minimise the window, click the Ify's window with the left click, and then the target window with the right click - it will become minimised! To un-minimise the window, repeat this operation once more.&lt;/p&gt;
    &lt;head rend="h3"&gt;font&lt;/head&gt;
    &lt;p&gt;The font command allows one to choose their favourite terminal font. The font can be used right in the shell scripts, too - previously printed text is not erased from the screen, as you can see.&lt;/p&gt;
    &lt;head rend="h3"&gt;mgrshowfont&lt;/head&gt;
    &lt;p&gt;This is a tool that can help you choose a font. It is unusual because it has on-screen buttons, instead of relying on a middle-click menu. I wish other apps were like this.&lt;/p&gt;
    &lt;head rend="h3"&gt;pgs&lt;/head&gt;
    &lt;p&gt;pgs is a PostScript viewer based on Ghostscript. It only supports monochrome output, but it can scale and rotate pages. To make pgs work, you need to patch your Ghostscript using the patch provided with the MGR. To save you the trouble, I got the GS sources from Debian 0.93 and patched them with the pgs/MGR support. pgs is really a gem of this MGR distribution; I can imagine it being very useful for previewing TeX output.&lt;/p&gt;
    &lt;head rend="h2"&gt;Entertainment&lt;/head&gt;
    &lt;head rend="h3"&gt;Maze&lt;/head&gt;
    &lt;p&gt;"Can it run Doom?" Well, no, but it has a maze game. Use l and r to turn, and space to walk.&lt;/p&gt;
    &lt;head rend="h3"&gt;mgrbd&lt;/head&gt;
    &lt;p&gt;A Boulder Dash clone with vi-style controls.&lt;/p&gt;
    &lt;head rend="h3"&gt;Exiting MGR&lt;/head&gt;
    &lt;head rend="h3"&gt;SVGA mode&lt;/head&gt;
    &lt;p&gt;It is possible to compile MGR with SVGA support. The SVGA support uses video memory banking and thus is quite slow. Most applications only support monochrome, so there is little point in using this mode.&lt;/p&gt;
    &lt;head rend="h2"&gt;Closing thoughts&lt;/head&gt;
    &lt;p&gt;You can find my hard disk image with the installed MGR and patches applied to MGR and GS on the Internet Archive.&lt;/p&gt;
    &lt;head rend="h2"&gt;Further reading&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;ManaGeR wikipedia page&lt;/item&gt;
      &lt;item&gt;Stephen Uhler's home page&lt;/item&gt;
      &lt;item&gt;Architecture and Design of the MGR Window System - a paper by S. Uhler&lt;/item&gt;
      &lt;item&gt;The MGR Window System - Linux, Coherent and Solaris ports, contributed by Michael Cardell MC Widerkrantz&lt;/item&gt;
      &lt;item&gt;The Linux Documentation Project's How To MGR - put together by Vincent Broman&lt;/item&gt;
      &lt;item&gt;$HOME MOVIE – Tools for Building Demos on a Sparcstation - a paper by S. Uhler&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Thanks&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;I am endlessly grateful to Stephen Uhler for creating such a wonderful windowing system and for uploading the documentation about it on his website;&lt;/item&gt;
      &lt;item&gt;And to all the people who ported it to Linux and packaged it so I didn't have to, including but not limited to Vincent Broman, Alex Liu and Tommy Frandsen;&lt;/item&gt;
      &lt;item&gt;To MC for preserving the packages on the homepage, as well as sharing the history of the ports;&lt;/item&gt;
      &lt;item&gt;To my fiancée for being patient with me while I was figuring out how to make the system work, and for being an early tester of the build.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.ninakalinina.com/notes/mgr/"/><published>2025-10-12T14:14:53+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45558611</id><title>Show HN: I built a simple ambient sound app with no ads or subscriptions</title><updated>2025-10-12T21:08:16.190965+00:00</updated><content>&lt;doc fingerprint="b7ff85d8f21c8a02"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Ambi&lt;/head&gt;
    &lt;head rend="h1"&gt;Ambi&lt;/head&gt;
    &lt;head rend="h1"&gt;Ambi&lt;/head&gt;
    &lt;head rend="h2"&gt;Relax, focus and sleep with ambient soundscapes&lt;/head&gt;
    &lt;head rend="h2"&gt;Relax, focus and sleep with &lt;lb/&gt;ambient soundscapes&lt;/head&gt;
    &lt;head rend="h2"&gt;Relax, focus and sleep with &lt;lb/&gt;ambient soundscapes&lt;/head&gt;
    &lt;head rend="h1"&gt;Mix your perfect soundscape&lt;/head&gt;
    &lt;head rend="h1"&gt;Mix your perfect soundscape&lt;/head&gt;
    &lt;head rend="h1"&gt;Mix your perfect soundscape&lt;/head&gt;
    &lt;head rend="h2"&gt;Blend multiple sounds together with volume control for each individual sound&lt;/head&gt;
    &lt;head rend="h2"&gt;Blend multiple sounds together with volume control for each individual sound&lt;/head&gt;
    &lt;head rend="h2"&gt;Blend multiple sounds together with volume control for each individual sound&lt;/head&gt;
    &lt;head rend="h1"&gt;Play for as long &lt;lb/&gt;as you like&lt;/head&gt;
    &lt;head rend="h1"&gt;Play for as long &lt;lb/&gt;as you like&lt;/head&gt;
    &lt;head rend="h1"&gt;Play for as long &lt;lb/&gt;as you like&lt;/head&gt;
    &lt;p&gt;Set a timer or let your mix play through the night&lt;/p&gt;
    &lt;p&gt;Set a timer or let your mix play through the night&lt;/p&gt;
    &lt;p&gt;Set a timer or let your mix play through the night&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://ambisounds.app/"/><published>2025-10-12T14:49:50+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45558635</id><title>Germany's Schleswig-Holstein Completes Migration to Open Source Email</title><updated>2025-10-12T21:08:15.730060+00:00</updated><content>&lt;doc fingerprint="6b5b391b3d96b4a7"&gt;
  &lt;main&gt;
    &lt;p&gt;European nations have generally been more progressive in adopting open source solutions for government operations. Sure, regressive proposals like the EU Chat Control bill make headlines, but there's genuine progress happening too.&lt;/p&gt;
    &lt;p&gt;The German state of Schleswig-Holstein is back in the news for its open source efforts. This time, it's their email system that's undergone a complete transformation.&lt;/p&gt;
    &lt;head rend="h2"&gt;Microsoft Booted Out, Again&lt;/head&gt;
    &lt;p&gt;Schleswig-Holstein has successfully migrated (in Deutsch) its entire state administration email system from Microsoft Exchange and Outlook to open source alternatives, Open-Xchange and Thunderbird. The German state completed the transition on October 2, 2025, after a six-month process.&lt;/p&gt;
    &lt;p&gt;The migration affected around 30,000 employees across various government departments. This includes the State Chancellery, ministries, judiciary, state police, and other state authorities. Over 40,000 mailboxes containing more than 100 million emails and calendar entries were moved to the new system.&lt;/p&gt;
    &lt;p&gt;The state has adopted Open-Xchange as its email server solution and Thunderbird as the email client.&lt;/p&gt;
    &lt;p&gt;Of course, the transition wasn't without challenges. Digitization Minister Dirk Schrödter previously acknowledged problems during migration to open source software, including downtime and delays in email traffic. Despite these hurdles, this particular move has now been completed successfully.&lt;/p&gt;
    &lt;p&gt;Plus, this switch fits into Schleswig-Holstein's broader open source strategy that has been in development for several years. The state began rolling out LibreOffice as its standard office software last year, gradually replacing Microsoft Office across all state computers.&lt;/p&gt;
    &lt;p&gt;Dirk also emphasized that:&lt;/p&gt;
    &lt;quote&gt;We are real pioneers. We can't fall back on the experience of others –, there is hardly a comparable project of this magnitude anywhere in the world.&lt;lb/&gt;In future, we will be able to use our experience from data analysis to monitoring in the data centre to help others and support them when they embark on the path that we are currently the first to take.&lt;/quote&gt;
    &lt;head rend="h3"&gt;My Thoughts&lt;/head&gt;
    &lt;p&gt;Well, I like what I see here. Not many governments around the world care about open source software, unless it is about optics, of course. But when concrete steps are being taken to make good on past claims, who am I to complain?&lt;/p&gt;
    &lt;p&gt;Via: heise online&lt;/p&gt;
    &lt;p&gt;Suggested Read 📖&lt;/p&gt;
    &lt;p&gt;- Even the biggest players in the Linux world don't care about desktop Linux users. We do.&lt;/p&gt;
    &lt;p&gt;- We don't put informational content behind paywall. Your support keeps it open for everyone. Think of it like 'pay it forward'.&lt;/p&gt;
    &lt;p&gt;- Don't like ads? With the Plus membership, you get an ad-free reading experience.&lt;/p&gt;
    &lt;p&gt;- When millions of AI-generated content is being published daily, you read and learn from real human Linux users.&lt;/p&gt;
    &lt;p&gt;- It costs just $2 a month, less than the cost of your favorite burger.&lt;/p&gt;
    &lt;p&gt;Become a Plus Member today and join over 300 people in supporting our work.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.itsfoss.com/schleswig-holstein-email-system-migration/"/><published>2025-10-12T14:53:45+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559023</id><title>No I don't want to turn on Windows Backup with One Drive</title><updated>2025-10-12T21:08:15.343583+00:00</updated><content>&lt;doc fingerprint="fe842b4d37a7f8e7"&gt;
  &lt;main&gt;
    &lt;p&gt;What are my options here?&lt;/p&gt;
    &lt;p&gt;Inside the "Remind me again in" label are the following options:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;1 Week&lt;/item&gt;
      &lt;item&gt;30 days&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;And when I select one option, what does "No thanks" do? Does it dismiss the box entirely and I never have to see it? Or does it validate the reminder schedule? What if I just don't want OneDrive? Microsoft has embedded it so deep into Windows that there are no easy ways of getting rid of it. I would understand if they had asked me when I set up my machine the first time, but why every single time?&lt;/p&gt;
    &lt;p&gt;This is the illusion of choice. It is "Get it now" or "Get it later". What I'm looking for is the "Get it never option!"&lt;/p&gt;
    &lt;p&gt;Dark patterns at their finest.&lt;/p&gt;
    &lt;p&gt;After I restarted, I got this!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://idiallo.com/byte-size/say-no-to-onedrive-backup"/><published>2025-10-12T15:42:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559076</id><title>How I'm using Helix editor</title><updated>2025-10-12T21:08:15.087014+00:00</updated><content>&lt;doc fingerprint="760c3a7d6180fab8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;How I'm using Helix editor&lt;/head&gt;
    &lt;p&gt;I've been using Helix as my editor to develop on remote servers for quite some time now.&lt;/p&gt;
    &lt;p&gt;There are a lot of emerging supply-chain attacks, and I simply don't like the idea of installing tens of plugins to Vim/Neovim to make the editor usable.&lt;/p&gt;
    &lt;p&gt;To make the switch from Neovim easier, I had to make some changes to the configuration. I want to share them to save you some time, because discovering them is not straightforward.&lt;/p&gt;
    &lt;head rend="h2"&gt;Tmux setup&lt;/head&gt;
    &lt;p&gt;I use tmux as a terminal multiplexer.&lt;/p&gt;
    &lt;p&gt;One thing that I miss from Neovim setup is a good file manager and TUI for git. I rarely use a file manager, but when I need to, I usually want to move a bunch of selected files quickly. Unfortunately, Helix does not support file editing in the explorer. You can only view them.&lt;/p&gt;
    &lt;p&gt;To overcome it, I added new keybindings to my tmux config:&lt;/p&gt;
    &lt;code&gt;# Yazi related
set -g allow-passthrough on
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

bind-key y display-popup -d '#{pane_current_path}' -x R -h 95% -w 95% -E 'tmux new-session yazi \; set status off'
bind-key g popup -E -w 95% -h 95%  -d '#{pane_current_path}' lazygit
bind-key e display-popup -w 95% -h 90% -E "tmux capture-pane -Jp -S- | hx -"
&lt;/code&gt;
    &lt;p&gt;When I hit one of the keys, a new pop-up window opens.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;prefix - y&lt;/code&gt;- opens&lt;code&gt;yazi&lt;/code&gt;file manager&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;prefix - g&lt;/code&gt;- opens&lt;code&gt;lazygit&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;prefix - e&lt;/code&gt;- opens Helix editor with tmux output history.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The default prefix for tmux is &lt;code&gt;Ctrl + b&lt;/code&gt;, but I'm using &lt;code&gt;Ctrl + \&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;The last binding is useful when you want to work with terminal output in your editor. I use it to search the history using regexes or copy selected output quickly. For example, I use it quite a lot to copy output from &lt;code&gt;clickhouse&lt;/code&gt; client that outputs SQL results in CSV or JSON to the terminal. Although it can output it to a file, that's an extra step, since I usually only need to copy-paste the output to Slack. This can be done via mouse, but painful with tmux setup, since you need to scroll the buffer when the output does not fit in one screen.&lt;/p&gt;
    &lt;p&gt;The &lt;code&gt;yazi&lt;/code&gt; and &lt;code&gt;lazygit&lt;/code&gt; tools are usually opened on top of the Helix Editor.&lt;/p&gt;
    &lt;head rend="h2"&gt;Vim bindings&lt;/head&gt;
    &lt;p&gt;I'm pretty used to Helix keybinds now, but there are still some bindings that I ported from vim:&lt;/p&gt;
    &lt;code&gt;[keys.select]
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
D = ["extend_to_line_bounds", "delete_selection", "normal_mode"]
k = ["extend_line_up", "extend_to_line_bounds"]
j = ["extend_line_down", "extend_to_line_bounds"]

[keys.normal]
D = ["ensure_selections_forward", "extend_to_line_end", "delete_selection"]
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
V = ["select_mode", "extend_to_line_bounds"]
esc = ["collapse_selection", "keep_primary_selection"]
&lt;/code&gt;
    &lt;p&gt;I don't like how Helix selects lines in visual mode. That's why I switched to vim-like behavior. Going one line up/down in a select mode selects the whole line. Helix selects them partially.&lt;/p&gt;
    &lt;p&gt;I have also rebinded ESC so it resets multiple cursors as well. By default, you need to press comma.&lt;/p&gt;
    &lt;p&gt;Lastly, removing text until the end of the line takes too many keypresses, so I ported the D motion as well. It removes everything to the right of your cursor in select mode.&lt;/p&gt;
    &lt;head rend="h2"&gt;Improved status line&lt;/head&gt;
    &lt;p&gt;The default status line lacks some important information, such as the current git branch.&lt;/p&gt;
    &lt;p&gt;I'm using the following config for my status line:&lt;/p&gt;
    &lt;code&gt;[editor.statusline]
left = [
  "mode",
  "spinner",
  "version-control",
  "spacer",
  "separator",
  "file-name",
  "read-only-indicator",
  "file-modification-indicator",

]
center = []
right = [
  "diagnostics",
  "workspace-diagnostics",
  "position",
  "total-line-numbers",
  "position-percentage",
  "file-encoding",
  "file-line-ending",
  "file-type",
  "register",
  "selections",
]
separator = "│"
&lt;/code&gt;
    &lt;head rend="h2"&gt;Useful keybindings&lt;/head&gt;
    &lt;p&gt;You can make your life way easier with custom keybindings. Discovering them took me some time.&lt;/p&gt;
    &lt;p&gt;In my opinion, the most useful are: file reloading, soft wrap toggle, git undo, and git blame.&lt;/p&gt;
    &lt;p&gt;Here is a full list of my custom bindings:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;space - e - w&lt;/code&gt;- Write current buffer to file.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - e - c&lt;/code&gt;- Close current buffer.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - e - x&lt;/code&gt;- Close other buffers. This is useful when you have tens of buffers open.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - e - l&lt;/code&gt;- Toggle inlay type hints. They can be useful, but also noisy to display them every time.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;+ - f&lt;/code&gt;- Format current file.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;+ - w&lt;/code&gt;- Render whitespace symbols. Useful to check what kind of invisible characters are in the document.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;+ - W&lt;/code&gt;- Disable rendering whitespace symbols.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - f - .&lt;/code&gt;- Show/hide git ignored files in file picker.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - f - r&lt;/code&gt;- Reload all files. This is very useful, since Helix does not support auto-reloading right now. When a file gets changes externally or when I commit changes, I press this keybinding to update the gutters and sync file changes.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - f - x&lt;/code&gt;- Undo git change at the current cursor.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;space - f - w&lt;/code&gt;- Show git blame for the current line.&lt;/item&gt;
    &lt;/list&gt;
    &lt;code&gt;[keys.normal.space]
e = { w = ":write", c = ":bc", x = ":bco", l = ":toggle lsp.display-inlay-hints" }
q = ":quit"

[keys.normal."+"]
f = ":format"
w = ":toggle whitespace.render all"
W = ":set whitespace.render none"
s = ":toggle soft-wrap.enable"

[keys.normal.space.f]
f = "file_picker_in_current_directory"
F = "file_picker"
b = "file_picker_in_current_buffer_directory"
"." = ":toggle-option file-picker.git-ignore"
g = "global_search"
e = "file_explorer"
r = ":reload-all"
x = ":reset-diff-change"
w = ":echo %sh{git blame -L %{cursor_line},+1 %{buffer_name}}"
&lt;/code&gt;
    &lt;head rend="h2"&gt;Editor config&lt;/head&gt;
    &lt;p&gt;After using Helix for 6 months, I discovered that it supports autosave when you switch tabs in your terminal. Some of the newer features in Helix are disabled by default, so old users won't see unexpected changes. You need to go through each option to discover them.&lt;/p&gt;
    &lt;p&gt;Here is my config:&lt;/p&gt;
    &lt;code&gt;[editor]
line-number = "relative"
mouse = true
rulers = [120]
true-color = true
completion-replace = true
trim-trailing-whitespace = true
end-of-line-diagnostics = "hint"
color-modes = true
rainbow-brackets = true

[editor.inline-diagnostics]
cursor-line = "warning"

[editor.file-picker]
hidden = false

[editor.indent-guides]
render = true
character = "╎"
skip-levels = 0

[editor.soft-wrap]
enable = false

[editor.auto-save]
focus-lost  = true
after-delay.enable = true
after-delay.timeout = 300000
&lt;/code&gt;
    &lt;p&gt;Some notable options:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;&lt;code&gt;true-color&lt;/code&gt;- Forces true color support.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;editor.file-picker.hidden&lt;/code&gt;- Show dot files in file picker.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;rulers&lt;/code&gt;- Sets visual vertical rulers. Useful when you want to limit the maximum line length of your code without autoformatting.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;completion-replace&lt;/code&gt;- Competitions replace the whole word.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;editor.inline-diagnostics.cursor-line&lt;/code&gt;- Makes diagnostics look better. See screenshot.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;color-modes&lt;/code&gt;- Makes the mode indicator colored.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;editor.indent-guides&lt;/code&gt;- Adds visual indent guides.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;editor.auto-save.focus-lost&lt;/code&gt;- Automatically saves file when focus is lost. Requires terminal support.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;editor.auto-save.after-delay.enable&lt;/code&gt;- Automatically saves file after specified delay.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;rainbow-brackets&lt;/code&gt;- Use different colors for nested brackets. Recent feature, not part of the most recent release yet.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;LSP tweaks&lt;/head&gt;
    &lt;p&gt;For every language, I usually add &lt;code&gt;harper-ls&lt;/code&gt; LSP to highlight grammar errors in comments.&lt;/p&gt;
    &lt;head rend="h3"&gt;User setups&lt;/head&gt;
    &lt;p&gt;I'm curious to hear more tricks from Helix users. So please share your findings in the comments!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://rushter.com/blog/helix-editor/"/><published>2025-10-12T15:48:28+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559305</id><title>Addictive-like behavioural traits in pet dogs with extreme motivation for toys</title><updated>2025-10-12T21:08:13.827793+00:00</updated><content>&lt;doc fingerprint="37a99a5289210fed"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Abstract&lt;/head&gt;
    &lt;p&gt;Behavioural addictions, characterised by compulsive engagement in rewarding activities despite adverse consequences in the long term, are more heterogeneous and less well-understood than substance addictions, and there is a relative lack of translational research. This study investigates “excessive toy motivation” in domestic dogs as a potential parallel to behavioural addictions in humans. Employing a combination of a behavioural test and an owner questionnaire, we examined whether a subset of highly play-motived dogs meet key behavioural addiction criteria, including craving, salience, lack of self-control, and mood modification. Data from 105 highly play-motivated dogs revealed that 33 subjects exhibited behaviours consistent with addictive-like tendencies, including an excessive fixation on toys, reduced responsiveness to alternative stimuli, and persistent efforts to access toys. Owner-reported behaviours not only corroborated these findings but also demonstrated significant associations with behavioural test scores. Our results highlight parallels between excessive toy motivation in dogs and human behavioural addictions, with dogs as the only non-human species so far that appears to develop addictive-like behaviours spontaneously without artificial induction. This exploratory study provides foundational insights and proposes future research directions that have the potential to significantly deepen our understanding of the psychological mechanisms underlying behavioural addictions across species.&lt;/p&gt;
    &lt;head rend="h3"&gt;Similar content being viewed by others&lt;/head&gt;
    &lt;head rend="h2"&gt;Introduction&lt;/head&gt;
    &lt;p&gt;What is play? Why do many large-brained mammals engage in play throughout their lives? And what makes playing potentially addictive? Despite numerous publications on play and its possible functions, play has remained somewhat of a mystery1, being associated with no immediate adaptive function, although it has been suggested to allow animals to practice species-typical behaviours such as hunting, mating, or fighting with a competitor in a non-serious context1. Notwithstanding, play behaviour is ubiquitous among (at least young) mammals and some birds2,3, and in large-brained species in particular – from humans to dogs – it persists throughout life4,5. Still, no unified definition of play exists to date6, although there is some agreement that, at a proximate level, play makes us feel good7. Even in non-human animals, observers will often agree that playful activities look like fun7, with neurotransmitter systems mediating the rewarding aspects of play (opioids, cannabinoids and dopamine)8,9 appearing to be highly conserved across mammalian taxa10.&lt;/p&gt;
    &lt;p&gt;Bateson (2014) proposed a set of characteristics that are generally accepted to define play: it is spontaneous, intrinsically rewarding and “fun”; it is separate from serious consequences; it often involves novel or exaggerated actions and role reversal; it is repetitive, but distinct from stereotypies; and it usually occurs only in healthy, stress-free animals, making it a marker of well-being7. However, regarding the latter point, it has been highlighted that play can also represent an attempt to cope with suboptimal conditions (e.g. in nonhuman animals, play may occur as displacement behaviour in stressful situations5 or may serve to reduce social tensions)11. Also, in humans, playing computer games or gambling represents a way of coping with stress. Moreover, in some instances, what started as a fun activity can become compulsive and develop into a behavioural addiction12,13,14.&lt;/p&gt;
    &lt;p&gt;A behavioural addiction can be defined as “repeated failure to resist an impulse, drive, or urge to perform an act that is rewarding to the person (at least in the short-term), despite longer-term harm to the individual or others” (ICD-11 (International Classification of Diseases 11th Revision))15. Unlike in compulsive disorders, where performance of the compulsive behaviour primarily serves to provide some relief from a negative affective state, i.e. via negative reinforcement, addictive behaviours originate because their performance generates positive affect, i.e. via positive reinforcement. However, as the addiction develops, the behaviour becomes compulsive and may even cease to be rewarding (reviewed by Freimuth et al.16. Behavioural addictions share underlying neurobiological processes17 and behavioural symptoms (such as craving, lack of self-control, tolerance, withdrawal and risk of relapse) with substance addictions17,18. Still, they are more heterogeneous and less well-understood19.&lt;/p&gt;
    &lt;p&gt;While a wide range of behaviours have the potential to become addictive in people (e.g. exercise, sex, shopping, work, etc.)19,20,21,22,23,24,25, to date, only the two disorders related to playing – gambling and internet gaming – are officially recognised as behavioural addictions in the two psychiatric manuals of psychological disorders (DSM-5 and ICD-11). The ICD-1115 included both gambling and internet gaming as behavioural addictions. In the 5th edition of DSM-526, gambling, previously classified as an impulse control disorder, was included under “substance-related and addictive disorders”19,26, while internet gaming was listed separately as “internet gaming disorder”26.&lt;/p&gt;
    &lt;p&gt;What would make behaviours related to playing so addictive? Play involves neurotransmitter systems (opioids, cannabinoids, and dopamine) that are also engaged in the rewarding aspects of food and drug rewards8,9. Thus, video games can provide players a hedonic experience and a high degree of relaxation27. Pathological gaming is an example of how seemingly normal and enjoyable behaviours can develop to disrupt regular social and environmental functioning28,29,30.&lt;/p&gt;
    &lt;p&gt;Compared to substance addiction, there are only a few animal models of behavioural addictions. Moreover, these are restricted to controlled laboratory settings, and addictive-like behaviour has to be actively induced31. Rodent models have been used to investigate compulsive eating (e.g. reviewed in31, exercise addiction (wheel running32,33), gambling34, and responses to sexual reward35. Mice selectively bred for excessive wheel-running, sometimes referred to as an addiction-prone phenotype, develop physiological withdrawal symptoms similar to those found in drug addiction after abstinence36. As with excessive exercise in humans, wheel-running in rodents may become disruptive to everyday activities, leading to impaired nest-building and sheltering behaviour37,38. The animals may continue to wheel-run despite disrupted sleep39 or even in the face of injury40, thus fulfilling the behavioural addiction criterion “persistence of the behaviour despite adverse consequences”41. This suggests that behavioural addictions are not unique to the human species.&lt;/p&gt;
    &lt;p&gt;There is, however, only one species that appears to display addictive-like behaviour spontaneously, without intentional experimental induction: the domestic dog (although inadvertent promotion of addictive-like behaviour by the caretakers cannot be ruled out). A small subset of dogs – colloquially referred to as “ball junkies” – appear to demonstrate an addictive-like desire for object play42.&lt;/p&gt;
    &lt;p&gt;Like humans, domestic dogs frequently remain playful throughout their lives1, engaging in both social and object-related play, as well as combinations (e.g. tug-of-war9. Solitary object play appears to be related to predatory behaviour9; accordingly the development of social and object play may reflect different selective histories of dog breeds, which were selected for various purposes such as hunting, guarding, herding, and other functions6,7,8.&lt;/p&gt;
    &lt;p&gt;Toy play is a potent reinforcer, especially in working dog training43,44,45. For instance, detection dogs working in public settings are typically not rewarded with food due to concerns about undesirable food-seeking behaviours in the field. Still, they will work persistently for their toy rewards. It has been argued that artificial selection has exaggerated play behaviour in adult dogs, especially in working breeds or working lines, where high toy motivation is often actively selected as a predictor of performance46. For example, in Labrador retrievers, working lines demonstrate higher playfulness than show lines, indicating a genetic basis for play motivation and potential for artificial selection47.&lt;/p&gt;
    &lt;p&gt;Playing with toys allows dogs to express instinctive predatory sequences such as chasing, catching, possessing and “dissecting”, considered to be intrinsically rewarding to them based on their species and breed histories48. None of this is pathological, nor is gambling or computer gaming in people. However, such highly rewarding activities have the potential to become obsessive in humans49,50, and the same may be true for dogs.&lt;/p&gt;
    &lt;p&gt;While addictive-like behaviour towards toys in dogs has not been studied to date, the phenomenon has been described in the lay literature (where affected dogs may be referred to as ‘ball junkies’), and it has been (rarely) alluded to in the scientific literature. Lazarowski et al.48 describe how some dogs show behavioural and physiological signs of high arousal in relation to toys, lack of self-control, and behaviours such as whining, barking, spinning, and other behavioural signs of stress when access to a toy is prevented (e.g. because the dog is restrained), suggested as an expression of their inability to manage the frustration of anticipation46. All these signs could be interpreted as indicative of craving (and frustration when the urge cannot be fulfilled).&lt;/p&gt;
    &lt;p&gt;In humans, addictive behaviours are often associated with deficits in inhibitory control and heightened cue-reactivity and craving, which are likely key mechanisms in addiction, particularly when exposed to behaviour-specific cues51,52,53.&lt;/p&gt;
    &lt;p&gt;In animal models of addictions, not only is an increased motivation to work for the rewarding substance notable, but the animals also continue seeking the reward even when it is signalled to be unavailable54. Similarly, excessively toy-motivated dogs may continue to try to gain access to a toy even when the caretaker has put it away (anecdotal evidence55. Dogs that appear obsessed with toys cannot be easily distracted from their fixation on the preferred object – demonstrating the high salience of the toy. Such dogs may even lose interest in other stimuli or social interactions as long as they have access to the toy, or sometimes even when it has been removed from reach55 – i.e., everyday functioning may be affected. Moreover, some dogs may continue playing (e.g., running tirelessly after balls thrown for them) despite adverse consequences, such as over-exertion or even injury in the short term and damage to joints and ligaments in the longer term56.&lt;/p&gt;
    &lt;p&gt;Thus, we suggest that ‘excessive toy motivation’ in dogs may show parallels to behavioural addictions in humans. Domestic dogs share many complex behavioural traits with us57,and they are commonly used as model species to explore compulsive behaviours58,59; cognitive ageing60,61,62, ADHD63,64,65, neuroticism66 and autism67,68,69.&lt;/p&gt;
    &lt;head rend="h2"&gt;Rationale&lt;/head&gt;
    &lt;p&gt;Here, we aim to provide the first scientific evaluation of ‘excessive toy motivation’ in dogs, develop methods to assess this phenomenon, and investigate whether ‘excessive toy motivation’ in pet dogs meets the defining criteria of behavioural addictions. Due to the heterogeneity of behavioural addictions, the number and description of diagnostic criteria are inconsistent in the scientific literature, even in humans19. We decided to explore whether the most common behavioural addiction criteria can be adapted to dogs: (1) craving, (2) salience, (3) mood modification through carrying out the behaviour, (4) lack of self-control, (5) tolerance, (6) withdrawal symptoms, (7) external consequences (the addictive behaviour causes conflict with other activities, other individuals, or within the individual), and (8) relapse after abstinence from the activity (cf28,41,70,71. Two additional criteria are used for diagnosing behavioural addictions in humans: having problems at home or work and lying to/deceiving people close to them26,72. Since these criteria cannot be applied to animals, we focused only on the eight abovementioned criteria.&lt;/p&gt;
    &lt;p&gt;We developed a behavioural test exposing pet dogs to various situations where behavioural addiction criteria in relation to toys can be expressed. Only the first four of the criteria mentioned above can be measured in a single behavioural assessment. The remaining criteria were included in an accompanying questionnaire, in which the dogs’ owners were asked about their dogs’ everyday behaviour.&lt;/p&gt;
    &lt;p&gt;While this study is exploratory, given the lack of prior research in this area, we used convergent methodologies in an attempt to assess internal and external validity. We predicted that dogs classified as having a high tendency for addictive-like behaviour based on our continuous Addictive-like Behaviour Test score, would:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Show higher scores for the individual behavioural addiction criteria: Salience, Craving, Mood modification, and Lack of self-control in the behaviour test,&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Show higher durations of focusing on and trying to access an unavailable toy in the behaviour test,&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Receive higher scores on the owner questionnaire designed to measure dogs’ addictive-like behaviour in everyday life,&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;than dogs classified as having a low tendency for addictive-like behaviour.&lt;/p&gt;
    &lt;head rend="h2"&gt;Methods&lt;/head&gt;
    &lt;head rend="h3"&gt;Play motivation test&lt;/head&gt;
    &lt;head rend="h4"&gt;Ethical consideration&lt;/head&gt;
    &lt;p&gt;The study was assessed and approved by the Veterinary Office of the Canton of Bern, Switzerland (Licence number BE115/17). All procedures were performed in accordance with the “Guidelines for the Treatment of Animals in Behavioral Research and Teaching” of the Association for the Study of Animal Behavior. All dog owners provided written informed consent for their participation.&lt;/p&gt;
    &lt;head rend="h4"&gt;Subjects&lt;/head&gt;
    &lt;p&gt;One hundred twenty-six dog-owner teams were recruited via advertisements on social media. In the first call, any play-motivated dog was welcome to participate. In a second call, we specifically sought dogs showing ‘excessive’ motivation for toy play.&lt;/p&gt;
    &lt;p&gt;Twenty-one of the 126 tested dogs were excluded from the analysis as they were (1) outside the target age range (&amp;lt; 1 year or &amp;gt; 10 years old; N = 9), (2) did not complete the test due to fatigue (N = 1), (3) did not play at all or were too fearful for pulse measurements (N = 7), or (4) due to disturbances during the test (e.g. owners bringing young children along, N = 4). The final sample (N = 105) included 56 males (34 neutered or chemically castrated, 20 intact and 2 cryptorchids) and 49 females (34 neutered and 15 intact), ranging in age from 12 months to 10 years (mean age = 5.09 years, SD = 2.6). The dogs belonged to various breeds (for demographics, see Supplementary Table 1). Eighty-two owners (72 women and 10 men) participated in the study.&lt;/p&gt;
    &lt;head rend="h4"&gt;Experimental set-up&lt;/head&gt;
    &lt;p&gt;Behaviour tests took place in an experimental room (Fig. 1), measuring 5.22 m x 3.36 m. A wooden partition wall divided the room into two parts so that the effective testing space was 3.60 m x 3.36 m. The room was furnished with two chairs and several shelves on the walls. One of the chairs was placed in front of the wooden partition wall (facing the entrance door), and the other was placed at a 90° angle against the wall to the left. In front of both chairs, a taped line marked a one-meter distance from the chairs. During the habituation phase, the opaque box in which a toy or food was enclosed during several subtests (hereafter, unsolvable task box) was placed next to the experimenter’s chair.&lt;/p&gt;
    &lt;p&gt;Four video cameras (IB8377-H; 4 MP, 30 fps, H.264, WDR Pro, IR, PoE, IP66, 2.8–12 mm) were placed in the room, and recordings were made using the recorder system (ND9441P NVR, 16-CH, 4HDD, H.265, HDMI/VGA, 16x PoE).&lt;/p&gt;
    &lt;head rend="h4"&gt;Methods&lt;/head&gt;
    &lt;p&gt;The test battery consisted of 14 subtests assessing various aspects of toy motivation in dogs. Play behaviour per se cannot be used to infer addictive-like behaviour, which is characterised primarily by reactions when the reward is unavailable; therefore, only subtests relevant to exploring behavioural addiction criteria are described in detail hereafter. The complete description of the play motivation test is available under: https://figshare.com/s/dfd6d12d922f7543b96c.&lt;/p&gt;
    &lt;head rend="h5"&gt;Procedure&lt;/head&gt;
    &lt;head rend="h3"&gt;Room habituation&lt;/head&gt;
    &lt;p&gt;After the owner and the dog had entered the test room, the dog was unleashed, and a 3-minute habituation phase commenced (Fig. 1). Meanwhile, the owner and the experimenter were seated on their allocated chairs, and the experimenter explained the test procedure. The owner signed the consent form. The owners were instructed to interact with the dog only when asked to perform one of the subtests and not to use food during testing unless absolutely necessary (such as exchanging food for a toy if the dog was unwilling to relinquish it).&lt;/p&gt;
    &lt;head rend="h3"&gt;Choosing the toy&lt;/head&gt;
    &lt;p&gt;After the habituation phase, the experimenter retrieved a box containing various commercial dog toys of different sizes and textures, with and without squeakers, etc., from the adjacent storage room. Only toys that might be associated with food enrichment were excluded. The owner was asked to select three toys (one ball, one tug toy and one plush toy) which they thought the dog would like the most. If the owner had brought the dog’s favourite toy from home, this toy was used in the subsequent preference test along with two other toys.&lt;/p&gt;
    &lt;p&gt;After removing the toy box from the room, the experimenter returned to the test room. The owner recalled the dog and sat down on their chair, holding the dog behind the Line marking the 1 m distance from the chair. Opposite the dog at the front of the room, the experimenter placed the three toys on the floor in a row, 40 cm apart. After the experimenter had returned to her chair, the owner released the dog, who could now explore and play with the toys for 30 s. The two people present did not interact with the dog during this time. The toy the dog spent the most time interacting with was used for subsequent testing. Forty-five dogs selected a ball, nine selected a tug toy, 39 selected a plush toy, and 12 selected a hybrid toy (plush ball: N = 3; tug with a ball: N = 6; plush tug: N = 3). On rare occasions, the dog did not show interest in any of the toys. In this case, the owner was asked to choose the type of toy the dog was usually most interested in at home. The chosen toy was used throughout the experiment, and the remaining two toys were placed on the shelf out of reach and sight of the dog. If the preferred toy was not a tug toy, the tug toy was used in subtests where the owner or experimenter played tug-of-war with the dog.&lt;/p&gt;
    &lt;head rend="h5"&gt;Description of the subtests and their relevance for addiction criteria coding&lt;/head&gt;
    &lt;p&gt;A description of the subtests and, when applicable, their relevance for addiction criteria coding is given in Table 1.&lt;/p&gt;
    &lt;head rend="h4"&gt;Behavioural coding&lt;/head&gt;
    &lt;p&gt;Videos were coded using Solomon Coder (Solomon Coder beta 19.08.02, Copyright 2006–2019 by Andràs Péter).&lt;/p&gt;
    &lt;p&gt;For most subtests, the starting point for coding was when the experimenter and the owner were sitting on their chairs, and the dog was behind the Line, which marked a 1 m distance from the owner’s chair (Fig. 1).&lt;/p&gt;
    &lt;p&gt;Qualitative and quantitative coding was performed by coders who were not involved in the experiments.&lt;/p&gt;
    &lt;p&gt;Three different coding approaches were employed:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt; a. &lt;p&gt;Scoring of individual variables that may be indicative of addictive behaviour each minute, which were later summed up as Addictive-like Behaviour Test score (Table 2); coder: KS.&lt;/p&gt;&lt;/item&gt;
      &lt;item&gt; b. &lt;p&gt;Coding of presence/absence of the four addiction criteria in each minute of each subtest; coder: KS.&lt;/p&gt;&lt;/item&gt;
      &lt;item&gt; c. &lt;p&gt;Quantitative coding.&lt;/p&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Scoring and point sampling of behaviours during the subtests “Social play” and “Dog alone” (Table 4); coder: FL.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Coding of absolute durations of behaviours in subtests where the toy was rendered inaccessible (unsolvable task box and toy on a shelf, see Table 4); coders: DZ and AH.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;A second coder (AM) performed reliability coding of addictive-like behaviours and behavioural addiction criteria and point sampling for 15 dogs. Reliability between the two coders who coded the durations was also analysed for 15 dogs. Reliability was good or excellent for all included variables (ICC, absolute agreement, single measures, two-way mixed-effects model, computed in IBM SPSS Statistics Version 23 (IBM Corporation and its Licensors 1989, 2015) (see Supplementary Table 3 for full results).&lt;/p&gt;
    &lt;head rend="h4"&gt;Sub-criteria to generate an Addictive-like behaviour test score (AB-T score)&lt;/head&gt;
    &lt;p&gt;To quantify dogs’ propensity for addictive-like behaviour as objectively as possible, we introduced the Addictive-like Behaviour Test score (AB-T score). Applicable sub-criteria were rated for each minute of the test, and for analysis, each sub-criterion was assigned a score between 0 and 2 points, as detailed in Table 2. The points from all the subtests, including the cool-down period, were added to yield the AB-T score. The maximum possible value of the AB-T score was 120 points. A cut-off point for addictive-like behaviour was defined by a data range split divided into two halves. Dogs scoring equal to or above the mid-point (44.2 points) are referred to as dogs showing a high tendency for addictive-like behaviour or high-AB dogs.&lt;/p&gt;
    &lt;p&gt;Dogs scoring less than 44.2 points are referred to as low-AB dogs (dogs with a low tendency for addictive-like behaviour). The sub-criteria included in the Addictive-like Behaviour Test score (as detailed in Table 2) were selected as they were assumed to be relatively independent of the level of obedience and training. Dogs might have been trained to drop a toy on a cue and to exert impulse control and refrain from jumping towards the toy in the experimenter’s hand; therefore, these variables were not included in the AB-T score. However, behaviours such as staring at the toy or pacing are believed to be less subject to training and were included.&lt;/p&gt;
    &lt;head rend="h4"&gt;Presence/absence of behavioural addiction criteria&lt;/head&gt;
    &lt;p&gt;Separately from the AB-T variables, in each subtest, the addiction criteria Salience, Craving, Mood modification, and Lack of self-control were rated each minute as present or absent based on the occurrence of pre-defined behaviours. For instance, Salience was inferred from searching for a toy although there was an »attractive alternative« (food, owner inviting the dog to play). Craving was based on the dog focusing mainly on the toy (&amp;gt; 50%) and medium to high arousal directed at the inaccessible toy (inferred from behaviours such as panting, restlessness, and high muscle tension). We further coded behaviours that are usually characteristic of high arousal in some dogs, e.g., pacing, jumping towards the toy, and vocalising (see Table 3). If at least one of the pre-defined behaviours was expressed, the respective addiction criterion was coded as present. Tolerance, Withdrawal symptoms and Risk of relapse after abstinence could not be tested in the setting of the play motivation test since they develop over time.&lt;/p&gt;
    &lt;p&gt;For each subtest, a summary score for each of the four addiction criteria was computed by summing up the points for each minute of the subtest.&lt;/p&gt;
    &lt;head rend="h4"&gt;Quantitative coding&lt;/head&gt;
    &lt;p&gt;Selected behaviours during the subtests “Social play” and “Dog alone” were coded by point sampling at 3-second intervals and then extrapolated to proportions of time (Table 4). Based on a subsample of dogs coded using both point sampling and absolute durations of behaviour, we determined sufficient agreement between the two measurement methods, justifying the use of point sampling. During subtests where a reward was inaccessible in the unsolvable task box, the absolute duration of interacting with the box (with low or high effort) was coded (Table 4). For detailed definitions of quantitatively coded variables, see Supplementary Table 2.&lt;/p&gt;
    &lt;head rend="h2"&gt;Questionnaire on addictive-like behaviours&lt;/head&gt;
    &lt;p&gt;A questionnaire was developed (available in English and German) (for inter- and intra-rater reliability based on over 1500 dogs recruited via an online survey; see Supplementary Table 6). The questions relating to behavioural addiction criteria relevant to the present manuscript are shown in Table 5. They were rated on a 5-point Likert scale indicating the extent of agreement with the statement (1 – strongly disagree; 2 – partly disagree; 3 – neither agree nor disagree; 4 – partly agree; 5 – strongly agree). The dog owners were asked to complete this questionnaire during the cool-down period of the behavioural test.&lt;/p&gt;
    &lt;head rend="h2"&gt;Analysis&lt;/head&gt;
    &lt;p&gt;SPSS Statistics Version 23 (IBM Corporation and its Licensors 1989, 2015) was used to compute a Categorical Principal Component Analysis and Mann-Whitney U tests. R version 4.1.0 (The R Foundation for Statistical Computing, 2021) was used to create boxplots and to calculate linear models.&lt;/p&gt;
    &lt;head rend="h3"&gt;Assessment of differences in summary scores of individual behavioural addiction criteria between high-AB dogs and low-AB dogs&lt;/head&gt;
    &lt;p&gt;We calculated summary scores for the four addiction criteria for each subtest by summing up the points for each minute. Using Mann-Whitney U tests, we tested whether there was a difference in the addiction criteria Craving, Lack of self-control, Mood modification and Salience between dogs classified as high-AB dogs (AB-T score ≥ 44.2 points) and low-AB dogs (AB-T score &amp;lt; 44.2 points). Note that although components of Salience and craving were used to calculate the AB-T score, these are not identical to the 1 − 0 variables of Salience and craving here. While the addiction criteria were coded as 1/0 for each minute, the variables included in the AB-T score were more detailed, and individual elements potentially indicative of addictive-like behaviour were differentiated. Mood modification and Lack of self-control were not used in the designation of the AB-T score. See Sect. 1.6 and Table 3 for more details.&lt;/p&gt;
    &lt;head rend="h3"&gt;Assessment of differences in durations of toy-directed behaviours between high-AB dogs and low-AB dogs&lt;/head&gt;
    &lt;p&gt;We performed Mann-Whitney U tests to assess whether high-AB and low-AB dogs differed in quantitatively coded variables such as time engaging with the toy during different subtests, attempting to attain an unavailable toy, etc. (see Supplementary Tables 4 and 5).&lt;/p&gt;
    &lt;head rend="h3"&gt;Associations between questionnaire and behaviour test results and calculation of an Addictive-like Behaviour Questionnaire score (AB-Q score)&lt;/head&gt;
    &lt;p&gt;Linear models were used to assess associations between the addictive-like behaviour score and the 19 questionnaire questions targeting addictive-like behaviour. Model requirements were checked by visually assessing normality and homoscedasticity of the residuals. If applicable, the dependent variable was transformed.&lt;/p&gt;
    &lt;p&gt;Additionally, Mann-Whitney U tests were used to test whether the 19 questionnaire scores differed between high-AB and low-AB dogs. This was the case for fifteen questions; therefore, these were summed up to generate an Addictive-like Behaviour Questionnaire score (AB-Q score). Cohen’s R was used as a measure of effect size.&lt;/p&gt;
    &lt;p&gt;Both intra-rater reliability (available for 274 dogs, including dogs from the online survey) and inter-rater reliability (available for 24 dogs) of the AB-Q score were very good (see Supplementary Table 6).&lt;/p&gt;
    &lt;p&gt;Due to the exploratory nature of this study, no correction for multiple testing was performed (as recommended by73.&lt;/p&gt;
    &lt;head rend="h2"&gt;Results&lt;/head&gt;
    &lt;head rend="h3"&gt;Addictive-like behaviour test score (AB-T score)&lt;/head&gt;
    &lt;p&gt;The mid-point of the data range of the AB-T score was 44.2 (range 6.6–95). Therefore, dogs scoring 44.2 or higher were classified as showing a high tendency for addictive-like behaviour (high-AB dogs). This was the case for thirty-three of the 105 highly play-motivated dogs tested, with a mean score of 59.7 points and a median of 58.6. The mean AB-T score for low-AB dogs (&amp;lt; 44.2 points) was 23.1, and the median was 22.8. For descriptive statistics, see Supplementary Table 7.&lt;/p&gt;
    &lt;head rend="h3"&gt;Assessment of differences between high-AB dogs and low-AB dogs in summary scores of individual behavioural addiction criteria&lt;/head&gt;
    &lt;p&gt;Mann-Whitney U tests indicated that high-AB dogs scored significantly higher than low-AB dogs on craving (U = 217, p &amp;lt; 0.0001), salience (U = 208, p &amp;lt; 0.0001), and lack of self-control (U = 756.5, p = 0.002), but not mood modification (U = 1022, p = 0.157), in the behaviour test (see Supplementary Table 4, Figs. 2a-d). For descriptive statistics, see Supplementary Table 8.&lt;/p&gt;
    &lt;head rend="h3"&gt;Quantitatively coded variables&lt;/head&gt;
    &lt;p&gt;High-AB dogs interacted significantly longer with the box than low-AB dogs in the ‘toy in the box’ subtest (U = 675.5, p &amp;lt; 0.0001). They also spent more time looking at the toy on the shelf during the ‘toy on shelf’ subtest (U = 414.5, p &amp;lt; 0.0001) and the ‘social play without toys’ subtest (U = 942.5, p = 0.021), while focusing less on the owner in the latter (U = 819.5, p = 0.011) compared to low-AB dogs (Supplementary Table 5, Fig. 2e and f). However, time spent interacting with the toy while the owner and experimenter were out of the room did not differ significantly between high-AB and low-AB dogs (U = 994, p = 0.135; Supplementary Table 5). For descriptive statistics, see Supplementary Table 9.&lt;/p&gt;
    &lt;head rend="h3"&gt;Addictive-like behaviour questionnaire score (AB-Q score)&lt;/head&gt;
    &lt;p&gt;Linear models demonstrated significant associations between the AB-T score and 18 out of 19 individual questions (Table 6). However, according to Mann-Whitney U tests, only fifteen questions differed significantly between dogs classified as showing a high tendency for addictive-like behaviour in the behaviour test (AB-T score ≥ 44.2) and those that did not. These fifteen questions (Cohen’s R &amp;gt; 0.2 – see Table 6) were summed up into the Addictive-like Behaviour Questionnaire score (AB-Q score) (see Table 6).&lt;/p&gt;
    &lt;head rend="h2"&gt;Discussion&lt;/head&gt;
    &lt;p&gt;This study represents the beginning of the exploration of addictive-like behaviour in domestic dogs. Convergent behavioural measures support the existence of an addictive-like behavioural phenotype in 33 of the 105 tested highly play-motivated dogs. Note that we specifically sought dogs exhibiting extreme behaviour; thus, this proportion is not a reflection of the general population. Perhaps not surprising, working breeds – many of which are known to have been artificially selected for high toy or predatory motivation74,75,76 – were overrepresented in the sample.&lt;/p&gt;
    &lt;p&gt;As predicted, dogs classified as high-AB dogs based on the detailed AB-T score (Addictive-like Behaviour Test score) scored significantly higher than low-AB dogs on the individual criteria craving, salience, and lack of self-control in the behaviour test. Contrary to the prediction, mood modification (when given access to a toy) did not differ between high and low-AB dogs. In retrospect, however, this lack of difference between the two groups strengthens our argument that we were measuring a phenotype beyond mere enjoyment of play. Still, despite the significant differences between high- and low-AB dogs in the other investigated addiction criteria, Salience, Craving and Loss of Self Control, there was generally high variation between individuals.&lt;/p&gt;
    &lt;p&gt;In line with the predictions, high-AB dogs showed higher durations of focusing on and trying to access an inaccessible toy than low-AB dogs, often prioritising attempting to access the toy over eating or interacting with the owner. Thus, there was general agreement between the three alternative methods of coding the data (detailed behaviour score, addiction criteria, and quantitative coding), indicating internal consistency.&lt;/p&gt;
    &lt;p&gt;The external validity of the behaviour test was demonstrated by significant associations of the AB-T score with 18 out of 19 questions from the addictive-like behaviour questionnaire filled in by the dogs’ owners, intended to measure addictive-like behaviour in everyday life. Nonetheless, although significant, the effect sizes were relatively low, indicating that no single question would have predictive value for assessing a tendency for addictive-like behaviour in dogs.&lt;/p&gt;
    &lt;p&gt;In studies using animal models of substance addiction, one way to differentiate an addiction from drug use that occurs due to lack of choice is to present the subject with a choice between the addictive substance and other highly desirable stimuli. If an individual continues to take the drug at the expense of these other options (such as consumption of a food reward), this points to the possibility of addictive-like behaviour77,78. Consistent with this, high-AB dogs showed a loss of interest in other relevant stimuli, focusing on the inaccessible toy and foregoing the opportunity to consume food or to engage with their owner. The latter is also reminiscent of behavioural addictions in humans, leading to a decline in social interactions79.&lt;/p&gt;
    &lt;p&gt;The intense toy-seeking and loss of interest in other stimuli, despite the availability of food or social interaction – considered as indicators for salience and persistence – might resemble “hyperfocus,” a trait associated with ADHD and autism in humans80,81. However, unlike typical hyperfocus, which often emerges in the absence of competing stimuli, dogs in our study were presented with alternative salient rewards (e.g., the toy was placed on a shelf while the owner actively invited the dog to engage in social play; in another subtest, food was available in a puzzle toy while the preferred toy was inaccessible in a closed container), and they still showed a preference for the inaccessible toy. Like dogs with ADHD, dogs in the current study with high AB-T scores in general exhibited high impulsivity (labelled as “loss of self-control”), and some individuals displayed heightened activity (which could be interpreted as the hyperactivity component of ADHD64,65 in particular during the cool-down period. Thus, further research is needed to explore commonalities and differences between addictive-like behaviour and ADHD-like behaviour in dogs. While dogs with a high tendency for addictive-like behaviour might exhibit many characteristics of dogs with ADHD, the converse is not necessarily true – dogs might show ADHD-like behaviour without displaying any hyperfixation on toys.&lt;/p&gt;
    &lt;p&gt;Another characteristic of addicted individuals is that they are willing to pursue their addiction even if it has adverse consequences82. In the current study, “adversity” was elicited by the owner and the experimenter leaving the room in order to assess the effect of social isolation on the behavioural addiction criteria. Isolation in an unfamiliar place is well-established as a stressful experience for dogs83,84,85,86. However, this subtest was not a good measure of addictive-like behaviour: Time spent interacting with the toy while the dog was alone did not differ significantly between high-AB and low-AB dogs. For welfare reasons, we decided against exposing the dogs to more severe stressors; however, it cannot be ruled out that this subtest was not “aversive” enough. The dog was left alone for only 30 seconds, and the subtest took place in the middle of the test when the dogs were already habituated to the test room. It is also possible that individual differences in subjects’ separation distress, independent of play motivation, affected the results. Additionally, there was no clear contingency between interacting with the toy and the ‘adverse’ outcome (owner leaving). Future studies could potentially enhance the design by providing the dog with an explicit choice, such as by placing the toy in a separate room, away from the owner and the experimenter. This could help determine whether the dog is willing to risk being alone in an unusual or new environment when it normally prefers the safety of being near its owner. Such a design would better reflect the conflict between competing motivations (social security vs. reward seeking) and could offer a more valid test of the criterion of persistence under adversity.&lt;/p&gt;
    &lt;p&gt;Still, the importance of continued efforts to engage in the behaviour despite adverse consequences was demonstrated in the questionnaire, where one of the highest associations with the AB-T score was found with the question, “My dog will continue to play with a ball/toy despite adverse consequences”. This suggests that some dogs may fulfil the criterion of continuing the addictive-like behaviour despite adverse consequences in real life, even if this could not be demonstrated in the behaviour test.&lt;/p&gt;
    &lt;p&gt;A critical factor in addiction is the propensity to attribute incentive salience to classically conditioned cues predicting rewards87,88. In humans, cues associated with addictive behaviours, such as specific locations or objects, can induce craving and drug administration88,89. In dogs, a toy such as a ball could represent such as a conditioned cue. It may achieve its value, for example, by the experience of chasing and catching. For many domestic dogs, balls or other toys possess incentive salience, according to the three criteria by Robinson and Berridge49: they (1) “elicit approach” (i.e. they become “wanted” and act as “motivational magnets”); (2) “they can energise ongoing actions by eliciting cue-triggered wanting”; (3) “they can act as reinforcers in their own right, reinforcing the acquisition of a new instrumental response (measurable by conditioned reinforcement)” (cf49, p. 3139].).&lt;/p&gt;
    &lt;p&gt;The perceived value of the toy was demonstrated in our study by many dogs having difficulty relinquishing the toy. It can be speculated that balls become ‘motivational magnets’ by being associated with species-typical predatory behaviour (cf48. The high salience of the toy was especially apparent in subtests where dogs were foregoing available alternatives such as freely available food or social play with the owner, at the expense of trying to regain their inaccessible toy.&lt;/p&gt;
    &lt;p&gt;In both rodents and humans90,91, individuals with a higher tendency to attribute incentive salience to classically conditioned cues predicting rewards (sign trackers) are more vulnerable to addiction than goal trackers, who focus primarily on the (location of the) reward itself88,92, see the meta-analysis by93. Tendency to sign-track vs. goal-track is associated with the risk of addiction and is also related to variations in the dopaminergic system and stress physiology88.&lt;/p&gt;
    &lt;p&gt;While it was not explicitly measured in the current study, in dogs, a tendency to sign track might be advantageous in a training context – i.e., maintaining motivation would be easier in dogs that are not only sensitive to rewards but also attribute value to the cues predicting these rewards, even if not always followed by a primary reinforcer. Sensitivity to reward – and propensity to attribute incentive salience to reward-predictive cues – would thus be highly relevant traits in relation to trainability and might be selected for especially in working dog breeds.&lt;/p&gt;
    &lt;p&gt;Several publications state the importance of ‘obsessive’ play motivation for working dog success42,94,95,96,97,98,99. Dogs with extreme toy motivation are believed to show better focus, reduced distractibility and greater trainability97,99. However, if such motivation becomes addictive-like, it needs to be questioned whether the well-being of these dogs may be compromised. If dogs prioritise toy interactions over other essential aspects of their daily lives this may have maladaptive effects, as is the case in humans with behavioural addictions100,101. Certainly, adverse health consequences may arise from repetitive ball chasing, like straining ligaments and joints56. Moreover, welfare would be compromised when dogs experience a high level of frustration when access to their reward is prevented (cf102.&lt;/p&gt;
    &lt;p&gt;Anecdotally, when play motivation becomes excessive, irritability, high arousal levels, and frustration may negatively affect dogs’ trainability and work103. Indeed, as stated by Mathews96, the high ‘drive’ of search dogs often makes them unsuitable as family pets, which is also supported by owner reports that pet dogs with extreme motivation for toys are often problematic to control102.&lt;/p&gt;
    &lt;p&gt;Thus, it needs to be questioned when play becomes maladaptive. Do high-AB dogs still ‘like’ to play, or have they progressed to primarily ‘wanting’ and the compulsive need to continue104?. Similar to the escalating engagement seen in human behavioural addictions105, some dogs would repeatedly spin, jump, focus or bark towards the unavailable toy on the shelf for the duration of the subtest. Two dogs even managed to destroy the box enclosing their favourite toy. These behaviours might be likened to the repetitive actions observed in individuals with behavioural addictions41. Nonetheless, such behaviours may also occur in other behavioural phenotypes such as canine compulsive disorder or autism spectrum-like behaviours106. Further research is needed to elucidate commonalities and differences between such phenotypes in dogs.&lt;/p&gt;
    &lt;p&gt;Behavioural addictions in humans often involve emotional dependency on specific activities107. Whether dogs similarly seek comfort, stimulation, or stress relief through persistent engagement with the toy could not be determined in the context of the behaviour test. In the questionnaire, “Is attached to the favourite toy” was the only question not significantly associated with the AB-T score. Thus, further research is required to determine whether dogs develop an emotional dependency on their toys (as described anecdotally).&lt;/p&gt;
    &lt;p&gt;To better understand the origin and possible functional underpinnings of excessive toy-directed behaviour in dogs, future research should examine whether similar patterns of excessive object play occur in non-domesticated canids. While data are limited, recent studies have shown that both hand-reared and wild wolf pups engage in object play108. For instance, wolf pups have been observed developing a preference for toys and spending increasing amounts of time with them over time108. Hand-reared wolf pups will even retrieve objects to humans109. In the wild, wolves have also been seen interacting with human-made objects110. These findings suggest that object play is not unique to dogs but rather could represent a broader trait shared by canids. Comparative studies are needed to assess how common and functionally relevant such behaviours are in wolves, which would help clarify the biological basis of the addictive-like behaviours observed in some dogs.&lt;/p&gt;
    &lt;p&gt;Being the first of its kind, this study has its limitations. As no gold standard exists, the study is exploratory, and our categorisation of dogs into high and low addictive-like behaviour groups, determined by a data range split, was somewhat arbitrary. Nonetheless, the assignment of high- and low-AB categories corresponded well to the first author’s personal assessment of addictive-like tendencies in the participant dogs.&lt;/p&gt;
    &lt;p&gt;In interpreting the questionnaire results, it is important to acknowledge the potential biases associated with using owner-reported questionnaires. Owners may unintentionally project their perceptions or expectations onto their dogs’ behaviours, potentially leading to discrepancies between reported and observed behaviours in behavioural test. This is particularly relevant in cases where owners have multiple dogs, as they are likely to compare their pets to one another, influencing their assessment, such as by underestimating or overestimating certain behaviours. For instance, an owner with a highly active dog may rate their less active dog as overly calm. Integrating owner reports and objective testing allows for a more comprehensive and accurate canine behaviour evaluation.&lt;/p&gt;
    &lt;head rend="h2"&gt;)Conclusions&lt;/head&gt;
    &lt;p&gt;To conclude, there appear to be parallels between excessive toy motivation in dogs and behavioural addictions in humans. Interestingly, also in humans, the first officially recognised behavioural addictions (gambling and internet gaming) originate in play28,29,30,111. Generally, play is an activity that induces a pleasurable emotional state6. In humans, much evidence suggests that video games can affect people’s lives positively. They make players feel better about themselves, help raise their self-esteem and assist people in dealing with everyday stress111. Some people are excessive gamers, but only a minority would be classified as addicts111,112,113. Similarly, many dogs may greatly enjoy toy play without developing harmful compulsions (cf. in humans28,29,30,111).&lt;/p&gt;
    &lt;p&gt;Despite the observed parallels between high-AB dogs and humans affected by behavioural addictions, we refrain from conclusively characterising high-AB dogs as exhibiting addictive behaviour, given the absence of established benchmarks or standardised criteria. It is important to be cautious when pathologising behaviour, especially given that even in humans, addictive behaviours are still difficult to define and measure114. To further understand possible parallels in the processes underlying behavioural addictions in humans and excessive toy motivation in dogs, subsequent research endeavours should seek to correlate individual differences in addictive-like behaviour in dogs with characteristics associated with addictive behaviours in humans, such as high impulsivity, impaired reversal learning, heightened perseveration, and delayed extinction of previously rewarded responses115,116.&lt;/p&gt;
    &lt;head rend="h2"&gt;Data availability&lt;/head&gt;
    &lt;p&gt;All data supporting the findings of this study are available within the paper and its Supplementary Information.&lt;/p&gt;
    &lt;head rend="h2"&gt;References&lt;/head&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;Bradshaw, J. W. S., Pullen, A. J. &amp;amp; Rooney, N. J. Why do adult dogs ‘play’? Behav. Process. 110, 82–87 (2015).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Burghardt, G. M., Albright, J. D. &amp;amp; Davis, K. M. Motivation, development and object play: comparative perspectives with lessons from dogs. Behaviour 153, 767–793 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Diamond, J. &amp;amp; Behaviour, A. B. &amp;amp; undefined. A comparative analysis of social play in birds. JSTORJ Diamond, AB BondBehaviour, 2003•JSTOR (2003). (2003).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Bateson, P. Play, playfulness, creativity and innovation. Anim. Behav. Cognition. 1, 99–112 (2014).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sommerville, R., O’Connor, E. A. &amp;amp; Asher, L. Why do dogs play? Function and welfare implications of play in the domestic dog. Appl. Anim. Behav. Sci. 197, 1–8 (2017).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Held, S. D. E. &amp;amp; Špinka, M. Animal play and animal welfare. Animal Behaviour vol. 81 891–899 Preprint at (2011). https://doi.org/10.1016/j.anbehav.2011.01.007&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Bateson, P. Play Playfulness, creativity and innovation. Anim Behav. Cogn 1(2), 99–112 (2014).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Trezza, V., Damsteegt, R., Marijke Achterberg, E. J. &amp;amp; Vanderschuren, L. J. M. J. Nucleus accumbens µ-opioid receptors mediate social reward. J. Neurosci. 31, 6362–6370 (2011).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Blois-Heulin, C. et al. Animal welfare: could adult play be a false friend?? Anim. Behav. Cogn. 2, 156–185 (2015).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Panksepp, J. Affective Neuroscience: the Foundations of Human and Animal Emotions (Oxford University Press, 1998).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Dias, P. A. D. &amp;amp; Rangel-Negrín, A. Affiliative contacts and greetings. The Int. Encyclopedia of Primatology,. Wiley-Blackwell, pp 1-4 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Maroney, N., Williams, B. J., Thomas, A., Skues, J. &amp;amp; Moulding, R. A Stress-Coping model of problem online video game use. Int. J. Ment Health Addict. 17, 845–858 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Blasi, M. D. I. et al. Problematic video game use as an emotional coping strategy: evidence from a sample of MMORPG gamers. J. Behav. Addict. 8, 25–34 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Melodia, F., Canale, N. &amp;amp; Griffiths, M. D. The role of avoidance coping and escape motives in problematic online gaming: A systematic literature review. Int. J. Ment Health Addict. 20, 996–1022 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Organization., W. H. ICD-11. ICD-11 (2019). https://icd.who.int/en&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Freimuth, M., Moniz, S. &amp;amp; Kim, S. R. Clarifying exercise addiction: differential diagnosis, co-occurring disorders, and phases of addiction. Int. J. Environ. Res. Public. Health. 8, 4069–4081 (2011).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Olsen, C. M. Natural rewards, neuroplasticity, and non-drug addictions. Neuropharmacology vol. 61 1109–1122 Preprint at (2011). https://doi.org/10.1016/j.neuropharm.2011.03.010&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Alavi, S. S. et al. Behavioral addiction versus substance addiction: correspondence of psychiatric and psychological views. Int. J. Prev. Med. 3, 290–294 (2012).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Pinna, F. et al. Behavioural addictions and the transition from DSM-IV-TR to DSM-5. J. Psychopathol. 21, 380–389 (2015).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Robbins, T. W. &amp;amp; Clark, L. Behavioral addictions. Current Opinion in Neurobiology vol. 30 66–72 Preprint at (2015). https://doi.org/10.1016/j.conb.2014.09.005&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Fan, L., Li, K., Xin, J., Wang, Y. &amp;amp; Li, Y. Family Subjective Socioeconomic Status and University Students’ Online Shopping Addiction: A Gender-Based Analysis. https://home.liebertpub.com/cyber (2022). https://doi.org/10.1089/CYBER.2021.0344&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Larocque, E. &amp;amp; Moreau, N. When sport is taken to extremes: A sociohistorical analysis of sport addiction. Int. Rev. Sociol. Sport. https://doi.org/10.1177/10126902221104956 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Atroszko, P. A. Work addiction as a behavioural addiction: Towards a valid identification of problematic behaviour. Australian and New Zealand Journal of Psychiatry vol. 53 284–285 Preprint at (2019). https://doi.org/10.1177/0004867419828496&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kun, B., Takacs, Z. K., Richman, M. J., Griffiths, M. D. &amp;amp; Demetrovics, Z. Work addiction and personality: A meta-analytic study. J. Behav. Addict. 9, 945–966 (2020).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Niedermoser, D. W. et al. Shopping addiction: A brief review. Pract. Innovations. 6, 199–207 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;American Psychiatric Association. Diagnostic and Statistical Manual of Mental Disorders. (2013). https://doi.org/10.1176/APPI.BOOKS.9780890425596&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Walia, B., Kim, J., Ijere, I. &amp;amp; Sanders, S. Video game addictive symptom level, use intensity, and hedonic experience: Cross-sectional questionnaire study. JMIR Serious Games. 10, e33661 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Beranuy, M., Carbonell, X. &amp;amp; Griffiths, M. D. A qualitative analysis of online gaming addicts in treatment. Int. J. Ment Health Addict. 11, 149–161 (2013).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Higuchi, S. et al. Development and validation of a nine-item short screening test for ICD-11 gaming disorder (GAMES test) and Estimation of the prevalence in the general young population. J. Behav. Addict. 10, 263–280 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Stevens, M. W. R., Dorstyn, D., Delfabbro, P. H. &amp;amp; King, D. L. Global prevalence of gaming disorder: A systematic review and meta-analysis. Australian and New Zealand Journal of Psychiatry vol. 55 553–568 Preprint at (2021). https://doi.org/10.1177/0004867420962851&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Di Segni, M., Patrono, E., Patella, L., Puglisi-Allegra, S. &amp;amp; Ventura, R. Animal models of compulsive eating behavior. Nutrients vol. 6 4591–4609 Preprint at (2014). https://doi.org/10.3390/nu6104591&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Brené S. et al. Running is rewarding and antidepressive. Physiol. Behav. 1-2, 136–140 (2007).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kanarek, R. B., D’Anci, K. E., Jurdak, N. &amp;amp; Mathes, W. F. Running and addiction: precipitated withdrawal in a rat model of Activity-Based anorexia. Behav. Neurosci. 123, 905–912 (2009).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Winstanley, C. A. Gambling rats: insight into impulsive and addictive behavior. Neuropsychopharmacology 36, 359 (2011).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Pitchers, K. K. et al. ∆FosB in the nucleus accumbens is critical for reinforcing effects of sexual reward. Genes Brain Behav. 9, 831–840 (2010).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kolb, E. M., Kelly, S. A. &amp;amp; Garland, T. Mice from lines selectively bred for high voluntary wheel running exhibit lower blood pressure during withdrawal from wheel access. Physiol. Behav. 112–113, 49–55 (2013).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Carter, P. A., Swallow, J. G., Davis, S. J. &amp;amp; Garland, T. Nesting Behavior of House Mice (Mus Domesticus) Selected for Increased Wheel-Running Activity. Behavior Genetics 30, 85–94 (2000). (2000).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;De Visser, L., Van Den Bos, R. &amp;amp; Spruijt, B. M. Automated home cage observations as a tool to measure the effects of wheel running on cage floor locomotion. Behav. Brain. Res. 160, 382–388 (2005).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kas, M. J. H. &amp;amp; Edgar, D. M. A nonphotic stimulus inverts the diurnal-nocturnal phase preference in Octodon Degus. J. Neurosci. 19, 328–333 (1999).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Reebs, S. G. &amp;amp; St-Onge, P. Running wheel choice by Syrian hamsters. Lab. Anim. 39, 442–451 (2005).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Grant, J. E., Potenza, M. N., Weinstein, A. &amp;amp; Gorelick, D. A. Introduction to behavioral addictions. American Journal of Drug and Alcohol Abuse vol. 36 233–241 Preprint at (2010). https://doi.org/10.3109/00952990.2010.491884&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Jamieson, L. T. J., Baxter, G. S. &amp;amp; Murray, P. J. Identifying suitable detection dogs. Applied Animal Behaviour Science vol. 195 1–7 Preprint at (2017). https://doi.org/10.1016/j.applanim.2017.06.010&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Rooney, N. J., Bradshaw, J. W. &amp;amp; Almey, H. Attributes of specialist search dogs—a questionnaire survey of UK dog handlers and trainers. J. Forensic Sci. 49, 1–7 (2004).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Naderi, S., Miklósi, Á., Dóka, A. &amp;amp; Csányi, V. Co-operative interactions between blind persons and their dogs. Appl. Anim. Behav. Sci. 74, 59–80 (2001).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Mariti, C. et al. Dog attachment to man: A comparison between pet and working dogs. J. Veterinary Behav. 8, 135–145 (2013).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kolm, N., Temrin, H., Miklósi, Á. &amp;amp; Kubinyi, E. &amp;amp; Zsolt garamszegi, L. The link between selection for function and human-directed play behaviour in dogs. (2020). https://doi.org/10.1098/rsbl.2020.0366&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sundman, A. S., Johnsson, M., Wright, D. &amp;amp; Jensen, P. Similar recent selection criteria associated with different behavioural effects in two dog breeds. Genes Brain Behav. 15, 750–756 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Lazarowski, L. et al. Selecting Dogs for Explosives Detection: Behavioral Characteristics. Frontiers in Veterinary Science vol. 7 597 Preprint at (2020). https://doi.org/10.3389/fvets.2020.00597&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Robinson, T. E. &amp;amp; Berridge, K. C. The incentive sensitization theory of addiction: some current issues. Philosophical Trans. Royal Soc. B: Biol. Sci. 363, 3137–3146 (2008). (The Royal SocietyLondon.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Stephens, D. N. et al. Reward sensitivity: Issues of measurement, and achieving consilience between human and animal phenotypes. Addiction Biology vol. 15 146–168 Preprint at (2010). https://doi.org/10.1111/j.1369-1600.2009.00193.x&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Antons, S., Brand, M. &amp;amp; Potenza, M. N. Neurobiology of cue-reactivity, craving, and inhibitory control in non-substance addictive behaviors. Journal of the Neurological Sciences vol. 415 116952 Preprint at (2020). https://doi.org/10.1016/j.jns.2020.116952&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Choi, J. S. et al. Dysfunctional inhibitory control and impulsivity in internet addiction. Psychiatry Res. 215, 424–428 (2014).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kräplin, A. et al. The role of inhibitory control and decisionmaking in the course of internet gaming disorder. J. Behav. Addict. 9, 990–1001 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hebebrand, J. et al. ‘Eating addiction’, rather than ‘food addiction’, better captures addictive-like eating behavior. Neuroscience and Biobehavioral Reviews vol. 47 295–306 Preprint at (2014). https://doi.org/10.1016/j.neubiorev.2014.08.016&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Käufer, M. ‘Throw the damn ball!’ Warum Ballwerfen kein Spiel ist. in … und weg ist er! Jagdverhalten und mögliche Alternativen 129–154 (Filander, Erlangen, 2014).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Marcellin-Little, D. J., Levine, D. &amp;amp; Taylor, R. Rehabilitation and conditioning of sporting dogs. Veterinary Clinics of North America - Small Animal Practice vol. 35 1427–1439 Preprint at (2005). https://doi.org/10.1016/j.cvsm.2005.08.002&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Overall, K. L. Natural animal models of human psychiatric conditions: assessment of mechanism and validity. Prog Neuropsychopharmacol. Biol. Psychiatry. 24, 727–776 (2000).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Boulougouris, V., Chamberlain, S. R. &amp;amp; Robbins, T. W. Cross-species models of OCD spectrum disorders. Psychiatry Res. 170, 15–21 (2009).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Vermeire, S. et al. Serotonin 2A receptor, serotonin transporter and dopamine transporter alterations in dogs with compulsive behaviour as a promising model for human obsessive-compulsive disorder. Psychiatry Res. Neuroimaging. 201, 78–87 (2012).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hoffman, J. M., Creevy, K. E., Franks, A., O’Neill, D. G. &amp;amp; Promislow, D. E. L. The companion dog as a model for human aging and mortality. Aging Cell. 17, e12737 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sándor, S. &amp;amp; Kubinyi, E. Genetic pathways of aging and their relevance in the dog as a natural model of human aging. Front. Genet. 10, 948 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Vitek, M. P. et al. Translational animal models for alzheimer’s disease: an alzheimer’s association business consortium think tank. Alzheimer’s Dementia: Translational Res. Clin. Interventions. 6, e12114 (2020).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;González-Martínez, Á., de Miguel, M., Graña, S., Costas, N., Diéguez, F. J. &amp;amp; X. &amp;amp; Serotonin and dopamine blood levels in ADHD-Like dogs. Animals 13, 1037 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Sulkama, S. et al. Canine hyperactivity, impulsivity, and inattention share similar demographic risk factors and behavioural comorbidities with human ADHD. Transl Psychiatry. 11, 1–9 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Csibra, B., Bunford, N. &amp;amp; Gácsi, M. Development of a human-analogue, 3-symptom domain dog ADHD and functionality rating scale (DAFRS). Sci. Rep. 14, 1–18 (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Salonen, M. et al. Personality traits associate with behavioral problems in pet dogs. Transl Psychiatry 12, 1-7 (2022).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Tian, R. et al. Modeling SHANK3-associated autism spectrum disorder in Beagle dogs via CRISPR/Cas9 gene editing. Molecular Psychiatry 2023 28:9 28, 3739–3750 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Li, Y. et al. Reduced attention to human eyes in autism-associated Shank3 mutant laboratory beagle dogs. Mol. Psychiatry. 30, 3765–3773 (2025).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Zhu, F., Shi, Q., Jiang, Y., hui, Zhang, Y. Q. &amp;amp; Zhao, H. Impaired synaptic function and hyperexcitability of the pyramidal neurons in the prefrontal cortex of autism-associated Shank3 mutant dogs. Springer 15, (2024).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Griffiths, M. Classification and treatment of behavioural addictions. Nurs. Pract. 82, 44–46 (2015).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Landolfi, E. Exercise addiction. Sports Med. 43, 111–119 (2012).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Van Rooij, A. J. &amp;amp; Prause, N. A critical review of internet addiction criteria with suggestions for the future. J. Behav. Addict. 3, 203–213 (2014).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Bender, R. &amp;amp; Lange, S. Adjusting for multiple testing - When and how? J. Clin. Epidemiol. 54, 343–349 (2001).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Coppinger, R. &amp;amp; Coppinger, L. Dogs: A New Understanding of Canine Origin, Behavior, and Evolution (University of Chicago Press, 2002).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Mehrkam, L. R., Hall, N. J., Haitz, C. &amp;amp; Wynne, C. D. L. The influence of breed and environmental factors on social and solitary play in dogs (Canis lupus familiaris). Learn. Behav. 45, 367–377 (2017).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Eken Asp, H., Fikse, W. F., Nilsson, K. &amp;amp; Strandberg, E. Breed differences in everyday behaviour of dogs. Appl. Anim. Behav. Sci. 169, 69–77 (2015).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ahmed, S. H., Lenoir, M. &amp;amp; Guillem, K. Neurobiology of addiction versus drug use driven by lack of choice. Current Opinion in Neurobiology vol. 23 581–587 Preprint at (2013). https://doi.org/10.1016/j.conb.2013.01.028&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Golden, S. A. et al. Compulsive Addiction-like aggressive behavior in mice. Biol. Psychiatry. 82, 239–248 (2017).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Kuss, D. J., Louws, J. &amp;amp; Wiers, R. W. Online gaming addiction? Motives predict addictive play behavior in massively multiplayer online role-playing games. Cyberpsychol Behav. Soc. Netw. 15, 480–485 (2012).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ashinoff, B. K. &amp;amp; Abu-Akel, A. Hyperfocus: the forgotten frontier of attention. Psychological Research 2019 85:1 85, 1–19 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Grotewiel, M. M., Crenshaw, M. E., Dorsey, A. &amp;amp; Street, E. Experiences of hyperfocus and flow in college students with and without attention deficit hyperactivity disorder (ADHD). Curr. Psychol. 42, 13265–13275 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Vanderschuren, L. J., Minnaard, A. M., Smeets, J. A. &amp;amp; Lesscher, H. M. Punishment models of addictive behavior. Curr. Opin. Behav. Sci. 13, 77–84 (2017).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Palestrini, C., Previde, E. P., Spiezio, C. &amp;amp; Verga, M. Heart rate and behavioural responses of dogs in the ainsworth’s strange situation: A pilot study. Appl. Anim. Behav. Sci. 94, 75–88 (2005).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Palmer, R. &amp;amp; Custance, D. A counterbalanced version of ainsworth’s strange situation procedure reveals secure-base effects in dog-human relationships. Appl. Anim. Behav. Sci. 109, 306–319 (2008).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ryan, M. G., Storey, A. E., Anderson, R. E. &amp;amp; Walsh, C. J. Physiological indicators of attachment in domestic dogs (Canis familiaris) and their owners in the strange situation test. Front. Behav. Neurosci. 13, 456977 (2019).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Riemer, S., Assis, L., Pike, T. W. &amp;amp; Mills, D. S. Dynamic changes in ear temperature in relation to separation distress in dogs. Physiol. Behav. 167, 86–91 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Flagel, S. B. et al. An Animal Model of Genetic Vulnerability to Behavioral Disinhibition and Responsiveness to Reward-Related Cues: Implications for Addiction. Neuropsychopharmacology 2010 35:2 35, 388–400 (2009).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Flagel, S. B., Akil, H. &amp;amp; Robinson, T. E. Individual differences in the attribution of incentive salience to reward-related cues: Implications for addiction. Neuropharmacology vol. 56 139–148 Preprint at (2009). https://doi.org/10.1016/j.neuropharm.2008.06.027&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Marlatt, G. A. Cue exposure and relapse prevention in the treatment of addictive behaviors. Addict. Behav. 15, 395–399 (1990).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Olney, J. J., Warlow, S. M., Naffziger, E. E. &amp;amp; Berridge, K. C. Current perspectives on incentive salience and applications to clinical disorders. Curr. Opin. Behav. Sci. 22, 59–69 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Cofresí, R. U., Bartholow, B. D. &amp;amp; Piasecki, T. M. Evidence for incentive salience sensitization as a pathway to alcohol use disorder. Neuroscience and Biobehavioral Reviews vol. 107 897–926 Preprint at (2019). https://doi.org/10.1016/j.neubiorev.2019.10.009&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Berridge, K. C., Robinson, T. E. &amp;amp; Aldridge, J. W. Dissecting components of reward: ‘liking’, ‘wanting’, and learning. Current Opinion in Pharmacology vol. 9 65–73 Preprint at (2009). https://doi.org/10.1016/j.coph.2008.12.014&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Meyer, P. J. et al. Quantifying individual variation in the propensity to attribute incentive salience to reward cues. PLoS One. 7, e38987 (2012).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Beebe, S. C., Howell, T. J. &amp;amp; Bennett, P. C. Using scent detection dogs in conservation settings: A review of scientific literature regarding their selection. Front. Veterinary Sci. 3 (1), Preprintathttpsdoiorg103389fvets201600096 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Reed, S. E., Bidlack, A. L., Hurt, A. &amp;amp; Getz, W. M. Detection distance and environmental factors in conservation detection dog surveys. J. Wildl. Manage. 75, 243–251 (2011).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Mathews, F. et al. Effectiveness of search dogs compared with human observers in locating Bat carcasses at wind-turbine sites: A blinded randomized trial. Wildl. Soc. Bull. 37, 34–40 (2013).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hsu, Y. &amp;amp; Serpell, J. A. Development and validation of a questionnaire for measuring behavior and temperament traits in pet dogs. J. Am. Vet. Med. Assoc. 223, 1293–1300 (2003).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hsu, Y. &amp;amp; Sun, L. Factors associated with aggressive responses in pet dogs. Appl. Anim. Behav. Sci. 123, 108–123 (2010).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Serpell, J. A. &amp;amp; Hsu, Y. Effects of breed, sex, and neuter status on trainability in dogs. in Anthrozoos vol. 18 196–207 (2005).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Müller, A. et al. Food addiction and other addictive behaviours in bariatric surgery candidates. Eur. Eat. Disorders Rev. 26, 585–596 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Tunney, R. J. &amp;amp; James, R. J. E. Criteria for conceptualizing behavioural addiction should be informed by the underlying behavioural mechanism. Addiction 112, 1720–1721 (2017).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Gerencsér, L., Bunford, N., Moesta, A. &amp;amp; Miklósi, Á. Development and validation of the canine reward responsiveness scale -Examining individual differences in reward responsiveness of the domestic dog. Sci Rep 8, 1-14 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Lindsay, S. R. Handbook of applied dog behavior and training. Vol. 3: Procedures and protocols. Ames (IA): Iowa Stat University Press (2005).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Berridge, K. C. &amp;amp; Robinson, T. E. Liking, wanting, and the incentive-sensitization theory of addiction. Am. Psychol. 71, 670–679 (2016).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Grant, J. E., Brewer, J. A. &amp;amp; Potenza, M. N. The neurobiology of substance and behavioral addictions. CNS Spectr. 11, 924–930 (2006).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Jacques, C. et al. What interests young autistic children? An exploratory study of object exploration and repetitive behavior. PLoS One. 13, e0209251 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Brand, M., Young, K. S., Laier, C., Wölfling, K. &amp;amp; Potenza, M. N. Integrating psychological and neurobiological considerations regarding the development and maintenance of specific Internet-use disorders: An Interaction of Person-Affect-Cognition-Execution (I-PACE) model. Neuroscience and Biobehavioral Reviews vol. 71 252–266 Preprint at (2016). https://doi.org/10.1016/j.neubiorev.2016.08.033&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Davis, K. M., Partin, A. M., Springer, C. M. &amp;amp; Burghardt, G. M. The development of object play in Wolf puppies (Canis lupus). Int. J. Play. 12, 20–39 (2023).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hansen Wheat, C. &amp;amp; Temrin, H. Intrinsic Ball Retrieving in Wolf Puppies Suggests Standing Ancestral Variation for Human-Directed Play Behavior. iScience 23, 100811 (2020).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ausband, D. E. Wolf use of humanmade objects during pup-rearing. Anim. Behav. Cogn. https://doi.org/10.26451/abc.08.03.06.2021 (2021).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Griffiths, M. Online computer gaming: advice for parents and teachers. Educ. Health. 27, 3–6 (2009).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Griffiths, M. D. Diagnosis and Management of Video Game Addiction MMORPGs View Project Diagnosis and Management of Video Game Addiction. (2008).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ko, C. H., Yen, J. Y., Yen, C. F., Chen, C. S. &amp;amp; Wang, S. Y. The association between internet addiction and belief of frustration intolerance: the gender difference. CyberPsychology Behav. 11, 273–278 (2008).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Petry, N. M., Zajac, K. &amp;amp; Ginley, M. K. Behavioral addictions as mental disorders: to be or not to be? Annu. Rev. Clin. Psychol. 14, 399–423 (2018).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Everitt, B. J. et al. Neural mechanisms underlying the vulnerability to develop compulsive drug-seeking habits and addiction. Philosophical Trans. Royal Soc. B: Biol. Sci. 363, 3125 (2008).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Volkow, N. D. &amp;amp; Fowler, J. S. Addiction, a disease of compulsion and drive: involvement of the orbitofrontal cortex. Cereb. Cortex. 10, 318–325 (2000).&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Acknowledgements&lt;/head&gt;
    &lt;p&gt;This study was funded by the SNSF Ambizione Grant Project PZ00P3_174221 to Stefanie Riemer. Many thanks go to Prof. Hanno Würbel for his feedback and support and to the dog owners and the dogs for their enthusiastic participation in the study.&lt;/p&gt;
    &lt;head rend="h2"&gt;Author information&lt;/head&gt;
    &lt;head rend="h3"&gt;Authors and Affiliations&lt;/head&gt;
    &lt;head rend="h3"&gt;Contributions&lt;/head&gt;
    &lt;p&gt;S.R. and A.M. contributed to the conception and design of the research. A.M. drafted the original manuscript, and S.R. provided revisions. A.M. carried out the experiments. K.S., F.M. and A.M. coded the videos. A.M. and S.R. interpreted the data. All authors have read and approved the final version of the manuscript.&lt;/p&gt;
    &lt;head rend="h3"&gt;Corresponding author&lt;/head&gt;
    &lt;head rend="h2"&gt;Ethics declarations&lt;/head&gt;
    &lt;head rend="h3"&gt;Competing interests&lt;/head&gt;
    &lt;p&gt;The authors declare that the research was conducted in the absence of any commercial or financial relationships that could be construed as a potential conflict of interest.&lt;/p&gt;
    &lt;head rend="h2"&gt;Additional information&lt;/head&gt;
    &lt;head rend="h3"&gt;Publisher’s note&lt;/head&gt;
    &lt;p&gt;Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.&lt;/p&gt;
    &lt;head rend="h2"&gt;Supplementary Information&lt;/head&gt;
    &lt;p&gt;Below is the link to the electronic supplementary material.&lt;/p&gt;
    &lt;head rend="h2"&gt;Rights and permissions&lt;/head&gt;
    &lt;p&gt;Open Access This article is licensed under a Creative Commons Attribution 4.0 International License, which permits use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons licence, and indicate if changes were made. The images or other third party material in this article are included in the article’s Creative Commons licence, unless indicated otherwise in a credit line to the material. If material is not included in the article’s Creative Commons licence and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder. To view a copy of this licence, visit http://creativecommons.org/licenses/by/4.0/.&lt;/p&gt;
    &lt;head rend="h2"&gt;About this article&lt;/head&gt;
    &lt;head rend="h3"&gt;Cite this article&lt;/head&gt;
    &lt;p&gt;Mazzini, A., Senn, K., Monteleone, F. et al. Addictive-like behavioural traits in pet dogs with extreme motivation for toy play. Sci Rep 15, 32613 (2025). https://doi.org/10.1038/s41598-025-18636-0&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Received:&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Accepted:&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Published:&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;DOI: https://doi.org/10.1038/s41598-025-18636-0&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.nature.com/articles/s41598-025-18636-0"/><published>2025-10-12T16:15:45+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559372</id><title>oavif: Faster target quality image compression</title><updated>2025-10-12T21:08:13.468030+00:00</updated><content>&lt;doc fingerprint="15c0199215921a8a"&gt;
  &lt;main&gt;
    &lt;p&gt;oavif is a new approach to target quality encoding in image compression, designed around smarter convergence strategies and quicker scoring to be as fast as possible.&lt;/p&gt;
    &lt;head rend="h2"&gt;Why?&lt;/head&gt;
    &lt;p&gt;Target quality encoding is one of the highest impact use cases for image compression. A target quality encoder framework aims to produce an image encoded at a particular quality set by the user according to some metric or visual quality index. This kind of encoder framework is useful for a variety of users, ranging from small website owners to content delivery networks pushing vast quantities of image data through the Web.&lt;/p&gt;
    &lt;p&gt;The value of target quality encoding is perceptual consistency. If I rely entirely on my encoder's internal quality index (often set with a "q" parameter), I may not get outputs of perfectly consistent quality when using the same "q" across different images. Relying on a metric that represents the viewer's experience is the solution to this; targeting a representative score within this metric will ensure you always receive an optimally encoded file that never undershoots and ruins image quality, and never overshoots and wastes data.&lt;/p&gt;
    &lt;p&gt;oavif is a tool to do target quality encoding extremely quickly. There are three core components to a target quality encoding framework: the metric, the encoder, and the convergence algorithm. oavif aims to leverage or improve the state of the art in all three categories.&lt;/p&gt;
    &lt;p&gt;I think this use case has been neglected because it sits in an awkward spot, stuck between encoder development and content deployment. Considering image encoders and powerful metrics are fast, it is easy to take them for granted and build inefficient frameworks around them. Slow frameworks waste valuable resources; processing images is expensive. I built oavif with the same approach I've adopted when building encoders, where every CPU cycle counts.&lt;/p&gt;
    &lt;head rend="h2"&gt;Metric&lt;/head&gt;
    &lt;p&gt;There are good metrics and bad metrics in the context of what humans care about in images. PSNR is a bad metric; targeting a PSNR score doesn't mean anything to users, because images at the same PSNR could look completely different. However, PSNR is very fast, and faster metrics lend themselves more favorably to target quality encoding.&lt;/p&gt;
    &lt;p&gt;SSIMULACRA2 correlates highly with subjective human quality ratings, but it is comparatively slow compared to simpler metrics. I set out to remedy this with fssimu2, a faster implementation that uses almost 40% less memory. This is what oavif uses, and it makes computing the in-loop metric much faster compared to the reference library.&lt;/p&gt;
    &lt;p&gt;Testing on a 4k test image against a distorted sample for an average time to score across 8 runs, Butteraugli (a perceptual metric from the libjxl project) took 2455ms, while the reference SSIMULACRA2 implementation took 1162ms. fssimu2 takes 631.9ms. Testing was done on my M2 MacBook Air using &lt;code&gt;hyperfine&lt;/code&gt;.&lt;/p&gt;
    &lt;head rend="h2"&gt;Encoder&lt;/head&gt;
    &lt;p&gt;AVIF is a capable Web image format. oavif uses libaom (via libavif) because it is the best open-source image encoder available relative to its speed. I worked on improving AVIF encoding in 2024 during my work on SVT-AV1-PSY. Google (with help from Julio Barba) later adopted this work and advanced it further in libaom. It is now used by some websites you may know, such as The Guardian.&lt;/p&gt;
    &lt;p&gt;Aside from speed, encoder consistency is valuable in the context of target quality encoding (I'll explain more about why later). In fact, a perfectly consistent encoder would be able to eliminate the need for targeting entirely since the encoder's user-configurable Q would map perfectly to some perceptual index. libaom has had engineering effort go into encoder consistency, which is a valuable thing.&lt;/p&gt;
    &lt;head rend="h2"&gt;Convergence&lt;/head&gt;
    &lt;p&gt;A simple convergence loop looks like this:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Decode input, pass to encoder&lt;/item&gt;
      &lt;item&gt;Decode encoder output &amp;amp; compare to input with metric&lt;/item&gt;
      &lt;item&gt;If we hit the target metric score, finish; otherwise, repeat prev. step with modified settings&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The most important part here is how we decide to modify our settings. This is the convergence algorithm that allows us to search for the best encoder Q. The easiest way to do this is with binary search, and some more recent implementations have utilized clever interpolation using past data to inform the next guess based on the fact that we know encoder Q and target score are likely correlated.&lt;/p&gt;
    &lt;p&gt;oavif takes inspiration from both of these, adding predictive modeling alongside error-informed search space correction to improve search times significantly. To understand why, we'll walk through each stage of the implementation.&lt;/p&gt;
    &lt;head rend="h3"&gt;Binary Search&lt;/head&gt;
    &lt;p&gt;This testing was done using the Daala subset2 image dataset. Importantly, I only used this dataset for validation; oavif was not designed around this specific dataset in any way. When testing, the oavif configuration was left at defaults; only the convergence implementation was modified. The threshold for meeting the target score is ±2.0 in oavif by default, and the default target score is 80.0 as measured by fssimu2 because it is a reasonable "high fidelity" target.&lt;/p&gt;
    &lt;p&gt;Everyone with some algorithms background will start with binary search. Set your bounds for encoder Q to 0..100, and divide the range in half each time you test. In oavif, a pure binary search implementation at default settings yields the following results:&lt;/p&gt;
    &lt;code&gt;Average encoding time: 467.95 ms ± 94.64
Average passes: 3.20 ± 0.45 (max: 4 min: 2)
&lt;/code&gt;
    &lt;head rend="h3"&gt;Interpolation&lt;/head&gt;
    &lt;p&gt;Interpolation-based target quality searches by iteratively probing, measuring, and narrowing the search interval just like binary search. The difference is that it tries to model the score-vs-quantizer curve with interpolation (linear, quadratic, etc) as more data is accumulated. This should theoretically reduce the number of necessary encodes, and can start with standard binary search when there is not enough data to interpolate with.&lt;/p&gt;
    &lt;p&gt;Metric score vs encoder Q is generally (though not perfectly) a mostly monotonic curve. Interpolation-based inverse estimation uses the measured points to approximate that curve and solve for the quantizer that would produce the target score. Higher-order methods use more shape information and are thus theoretically more accurate. Adding linear and quadratic interpolation support to oavif, we see a small reduction in the average number of passes on subset2:&lt;/p&gt;
    &lt;code&gt;Average encoding time: 468.98 ms ± 97.28
Average passes: 3.12 ± 0.39 (max: 4 min: 2)
&lt;/code&gt;
    &lt;p&gt;This is a 2.5% improvement. We still need a minimum of two passes to accurately target.&lt;/p&gt;
    &lt;head rend="h3"&gt;Predictive Modeling&lt;/head&gt;
    &lt;p&gt;This feature uses an exponential curve trained on the gb82 image dataset with libaom (at speed 9, 10-bit, 4:4:4 chroma). The curve looks like this:&lt;/p&gt;
    &lt;p&gt;Based on this, we can write some very simple code to predict a Q value from the target score:&lt;/p&gt;
    &lt;code&gt;fn predictQFromScore(tgt: f64) u32 {
    const q = 6.83 * @exp(0.0282 * tgt);
    return @intFromFloat(@min(100.0, @round(q)));
}
&lt;/code&gt;
    &lt;p&gt;This yields the biggest average improvement in this testing so far, decreasing average pass count by 56.4% versus interpolation search and 57.5% versus binary search.&lt;/p&gt;
    &lt;code&gt;Average encoding time: 218.33 ms ± 114.16
Average passes: 1.36 ± 0.78 (max: 3 min: 1)
&lt;/code&gt;
    &lt;p&gt;The gb82 image set is fairly low-resolution mixed photographic content, while Daala subset2 is medium-resolution photographic content with less variation. The fact that the model generalizes so well is exciting.&lt;/p&gt;
    &lt;p&gt;It is at this stage that encoder consistency becomes important. A more consistent encoder will diverge from our model's predictions less frequently, and theoretically result in a faster target quality loop.&lt;/p&gt;
    &lt;head rend="h3"&gt;Error Bounds&lt;/head&gt;
    &lt;p&gt;Because our initial predictions tend to be so accurate, we can use them to aggressively narrow our search space without incurring too much risk of a search space collapse.&lt;/p&gt;
    &lt;p&gt;The basis of this is that utilizing plain binary search with prediction is often unreliable. Let's say we would like to target score=80, and our model predicts we need Q=65. We score 82.38. Now we are forced to search (0..65), which is worse than if we had just avoided prediction in the first place (our search space would be 50..100 in that case). This is in spite of the fact that our prediction was very close to the target.&lt;/p&gt;
    &lt;p&gt;oavif uses the distance from the target to its advantage:&lt;/p&gt;
    &lt;code&gt;const abs_err = @abs(e.t.score - o.score_tgt);
if (pass == 0) {
    const err_bound: u32 = @intFromFloat(@ceil(abs_err) * 4.0);
    if (e.t.score - o.score_tgt &amp;gt; 0) {
        hi_bound = e.q;
        lo_bound = if (e.q &amp;gt; err_bound) e.q - err_bound else 0;
    } else {
        lo_bound = e.q;
        hi_bound = @min(100, e.q + err_bound);
    }
}
&lt;/code&gt;
    &lt;p&gt;In this case, the error was 2.38; &lt;code&gt;@ceil()&lt;/code&gt; brings this to 3, and we multiply by 4 because the midpoint of the new range tends to be very close to the target value based on my testing. The performance improves in kind:&lt;/p&gt;
    &lt;code&gt;Average encoding time: 194.50 ms ± 69.89
Average passes: 1.18 ± 0.39 (max: 2 min: 1)
&lt;/code&gt;
    &lt;p&gt;This costs 13.2% fewer passes than interpolation + prediction, and 63.1% fewer passes than binary search.&lt;/p&gt;
    &lt;p&gt;The minimum number of passes necessary in a naive binary search or interpolation-informed search is now the maximum number of passes we need to converge on the target on Daala subset2. You'll also notice the standard deviation went down due to the fact that the ceiling has been lowered.&lt;/p&gt;
    &lt;head rend="h2"&gt;Architecture&lt;/head&gt;
    &lt;p&gt;We've made it work and we've made it good, so now we can make it fast. oavif is written in Zig, and uses available high-performance C decoder libraries for handling inputs and decoding AVIF in the convergence loop. All image I/O during convergence is done in memory, and a buffer is kept of our latest encode to write to a file if we meet the target in the search space.&lt;/p&gt;
    &lt;p&gt;Efforts have gone into making oavif comparable to libavif's &lt;code&gt;avifenc&lt;/code&gt; in terms of features as well. It supports high bit depth I/O, ICC profile handling for most formats, user-configurable encoder settings, and better defaults (until tune=iq becomes the libaom default in libavif).&lt;/p&gt;
    &lt;head rend="h2"&gt;Future Directions&lt;/head&gt;
    &lt;p&gt;Architecturally, it would be trivial to keep a history of buffers active and always pick from the history, even if our loop doesn't converge on the target. I opted to avoid this for now because it dramatically increases memory usage, but if I receive widespread feedback that memory is unimportant I'll consider an implementation. In its current state, we hit the in-loop buffer the vast majority of the time anyway.&lt;/p&gt;
    &lt;p&gt;I think the future of this kind of workflow is far more accurate predictive modeling. I believe it is possible to improve what I've done if we provide details about the source image as another term in the equation (like variance or entropy) and train our prediction mechanism on this additional data. I'm optimistically convinced this could result in a very high success rate for one-shot targeting.&lt;/p&gt;
    &lt;p&gt;I'm looking forward to seeing more target quality workflows taking advantage of smarter targeting. If you've made it this far, thanks for reading, and enjoy oavif!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://giannirosato.com/blog/post/oavif/"/><published>2025-10-12T16:21:59+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559603</id><title>GitHub Copilot: Remote Code Execution via Prompt Injection (CVE-2025-53773)</title><updated>2025-10-12T21:08:13.304510+00:00</updated><content>&lt;doc fingerprint="970e351ded369c83"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;GitHub Copilot: Remote Code Execution via Prompt Injection (CVE-2025-53773)&lt;/head&gt;
    &lt;p&gt;This post is about an important, but also scary, prompt injection discovery that leads to full system compromise of the developer’s machine in GitHub Copilot and VS Code.&lt;/p&gt;
    &lt;p&gt;It is achieved by placing Copilot into YOLO mode by modifying the project’s &lt;code&gt;settings.json&lt;/code&gt; file.&lt;/p&gt;
    &lt;p&gt;As described a few days ago with Amp, a vulnerability pattern in agents that might be overlooked is that if an agent can write to files and modify its own configuration or update security-relevant settings it can lead to remote code execution. This is not uncommon and is an area to always look for when performing a security review.&lt;/p&gt;
    &lt;head rend="h2"&gt;Background Research&lt;/head&gt;
    &lt;p&gt;When looking at VS Code and GitHub Copilot Agent Mode I noticed a strange behavior… it can create and write to files in the workspace without user approval.&lt;/p&gt;
    &lt;p&gt;The edits are immediately persistent, they are not in-memory as a diff to review. The modifications are written to disk right away.&lt;/p&gt;
    &lt;p&gt;It’s one of these things that as a red teamer you know is probably not good… so I was looking if this could be used to escalate privileges and execute code.&lt;/p&gt;
    &lt;head rend="h3"&gt;YOLO Mode&lt;/head&gt;
    &lt;p&gt;So, next I researched features in VS Code that depend on settings that are within the project/workspace folder, and quickly found an interesting one.&lt;/p&gt;
    &lt;p&gt;It turns out that in the &lt;code&gt;.vscode/settings.json&lt;/code&gt; file one can add the following line:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;"chat.tools.autoApprove": true&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;This will put GitHub Copilot in YOLO mode.&lt;/p&gt;
    &lt;p&gt;And it disables all user confirmations, and we can run shell commands, browse the web, and more!&lt;/p&gt;
    &lt;p&gt;What is interesting is that this is an experimental feature, but it is still present by default. I did not download a special version or set my VS Code overall into an experimental mode.&lt;/p&gt;
    &lt;p&gt;Furthermore, it works on Windows, macOS and also Linux.&lt;/p&gt;
    &lt;head rend="h2"&gt;Exploit Chain Explained&lt;/head&gt;
    &lt;p&gt;The proof-of-concept exploit chain to hijack Copilot and escalate privileges is as follows:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;The attack starts with a prompt injection planted in a source code file, web page, GitHub issue, tool call response, or other content… The payload can also use invisible text as instructions.&lt;/item&gt;
      &lt;item&gt;The prompt injection first adds the line “chat.tools.autoApprove”: true, to the &lt;code&gt;~/.vscode/settings.json&lt;/code&gt;file. Folder and file will be created if they don’t exist yet.&lt;/item&gt;
      &lt;item&gt;GitHub Copilot immediately enters YOLO mode!&lt;/item&gt;
      &lt;item&gt;Attack runs a Terminal command. And using conditional prompt injection we can actually target what to run based on the operating system.&lt;/item&gt;
      &lt;item&gt;We achieved Remote Code Execution powered by Prompt Injection.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Here is a screenshot that shows the demo file with the prompt injection, the developer interacting with the file on the right side in the chat box, and the calculator popping up!&lt;/p&gt;
    &lt;p&gt;Of course any other means of prompt injection delivery, like web or data coming back from an MCP server is an attack angle. I just used it inside the source code file because it’s easiest to test with.&lt;/p&gt;
    &lt;head rend="h2"&gt;Video Walkthrough&lt;/head&gt;
    &lt;head rend="h3"&gt;Short Demos&lt;/head&gt;
    &lt;p&gt;Here is a demonstration video that shows the code execution on Windows.&lt;/p&gt;
    &lt;p&gt;And this one on macOS:&lt;/p&gt;
    &lt;head rend="h3"&gt;Walkthrough&lt;/head&gt;
    &lt;p&gt;Here is a longer form video explaining the discovery and exploit in detail:&lt;/p&gt;
    &lt;p&gt;AI that can set its own permissions and configuration settings is wild!&lt;/p&gt;
    &lt;head rend="h2"&gt;Joining the Workstation to a Botnet - ZombAIs&lt;/head&gt;
    &lt;p&gt;Of course, this means we can join the developer’s machine to a botnet as a ZombAI.&lt;/p&gt;
    &lt;p&gt;Also, for fun we can modified the &lt;code&gt;settings.json&lt;/code&gt; file to switch VS Code into a &lt;code&gt;Red&lt;/code&gt; color scheme and similar things.&lt;/p&gt;
    &lt;p&gt;It doesn’t end here though! This also means we can build an actual AI virus that attaches to files and propagates as developers download and interact with infected files.&lt;/p&gt;
    &lt;p&gt;Last but not least, to demonstrate that we have full control of the developer’s host, we show that Copilot can be hijacked to download malware, and join a remote command and control server.&lt;/p&gt;
    &lt;p&gt;This means the door is open for malware, ransomware, info stealers, etc.&lt;/p&gt;
    &lt;p&gt;Scary stuff.&lt;/p&gt;
    &lt;head rend="h2"&gt;Building an AI Virus&lt;/head&gt;
    &lt;p&gt;When seeing this, one will notice that this basically allows the creation of a virus. An attacker can embed instructions and once they gain code execution, additional malware can compromise other Git projects (and RAG sources) to embed the malicious instructions, and commit the changes or even force push them upstream.&lt;/p&gt;
    &lt;p&gt;This can lead to further spread as other developers unknowingly propagate the infected code.&lt;/p&gt;
    &lt;p&gt;Finally, we also need to talk about invisible instructions!&lt;/p&gt;
    &lt;head rend="h2"&gt;Using Invisible Instructions&lt;/head&gt;
    &lt;p&gt;One might say that it would be quickly discovered if instructions are embedded as comments. So in order to make it a bit more interesting, I went ahead and created an invisible payload that achieves the attack chain, but is not visible to users. This was not as reliable, but it still worked:&lt;/p&gt;
    &lt;p&gt;Note: Although the demo here with invisible instructions worked multiple times for me, using invisible instructions often leads to the exploit being very unreliable, and is also commonly also refused by the model and there is also typically a visual indicator that VS Code shows about Unicode characters. However, attacks (and models) get better over time. It’s also worth highlighting that not all models are vulnerable to such invisible prompt injection attacks.&lt;/p&gt;
    &lt;head rend="h2"&gt;Recommendations and Fix&lt;/head&gt;
    &lt;p&gt;There are actually more attack angles then just the YOLO mode example I shared. When Microsoft asked me if there is any more info I have, I had looked a bit more and noticed there are other problematic places, for instance &lt;code&gt;.vscode/tasks.json&lt;/code&gt; that the AI can write to, or adding fake malicious MCP servers, etc which can lead to code execution. And the AI can reconfigure the user interface and configuration settings of the project.&lt;/p&gt;
    &lt;p&gt;Recently I noticed that developers often use multiple agents, so there is also the threat of overwriting other agent configuration files (allow-list bash commands, add MCP servers…), as they are commonly in the project folder as well.&lt;/p&gt;
    &lt;p&gt;Ideally, the AI would not be able to modify files without a human first approving it. Many other editors do show the diff, which then can be approved by the developer.&lt;/p&gt;
    &lt;head rend="h2"&gt;Responsible Disclosure&lt;/head&gt;
    &lt;p&gt;After reporting the vulnerability on June 29, 2025 Microsoft confirmed the repro and asked a few follow up questions. A few weeks later MSRC pointed out that it is an issue they were already tracking, and that it will be patched by August. With the August Patch Tuesday release this is now fixed.&lt;/p&gt;
    &lt;p&gt;Shout out to Markus Vervier from Persistent Security who has also identified and reported this vulnerability to Microsoft. You can find their write-up here. And also a shout out to Ari Marzuk who seems to also have discovered it in parallel.&lt;/p&gt;
    &lt;p&gt;Thanks to the members of the MSRC and product team for the help in getting it mitigated.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;This is another example of how an AI agent might not stay in its box! By modifying its own environment GitHub Copilot can escalate privileges and execute code to compromise the developer’s machine. It’s a not uncommon design flaw in agentic systems as I have discovered.&lt;/p&gt;
    &lt;p&gt;Keep looking out for such design flaws, these should be easily caught during threat modeling.&lt;/p&gt;
    &lt;p&gt;Cheers.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://embracethered.com/blog/posts/2025/github-copilot-remote-code-execution-via-prompt-injection/"/><published>2025-10-12T16:46:11+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559767</id><title>A years-long Turkish alphabet bug in the Kotlin compiler</title><updated>2025-10-12T21:08:13.044671+00:00</updated><content>&lt;doc fingerprint="9f00b10bcb670219"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The Country That Broke Kotlin&lt;/head&gt;
    &lt;head rend="h2"&gt;Logic vs language: how a Turkish alphabet bug played a years-long game of hide-and-seek inside the Kotlin compiler&lt;/head&gt;
    &lt;p&gt;When Turkish software engineer Mehmet Nuri Öztürk posted a short message on the Kotlin discussion forum in March of 2016, he had no idea he was reporting a dangerous standard library bug that would take five years to find and fix. All he knew was that his build didn’t work.&lt;/p&gt;
    &lt;p&gt;Kotlin 1.0 had been released to the world only a month earlier, promising to breathe much-needed fresh life into the twin worlds of Java and Android development. But for Mehmet Nuri, the new programming language was a frustrating dead end. His code simply wouldn’t build, and the compiler’s output gave him nothing to go on.&lt;/p&gt;
    &lt;p&gt;He pasted the impenetrable error into his forum post:&lt;/p&gt;
    &lt;code&gt;Compilation completed with 2 errors and 0 warnings in 10s 126ms&lt;lb/&gt;&lt;lb/&gt;Error:Kotlin: Unknown compiler message tag: INFO&lt;lb/&gt;Error:Kotlin: Unknown compiler message tag: LOGGING&lt;/code&gt;
    &lt;p&gt;The Kotlin team replied quickly, but they didn’t have much to go on either. “Did you see this error just once, or do you see it every time you compile your project?”&lt;/p&gt;
    &lt;p&gt;It was consistent, Mehmet Nuri replied, not just between builds but also across different machines and operating systems.&lt;/p&gt;
    &lt;p&gt;It was a full five months before the breakthrough discovery. Muhammed Demirbaş, another programmer working in Turkey, had been running into the same mysterious build failure message, and had started to do some investigation of his own.&lt;/p&gt;
    &lt;p&gt;“I suspect that the source of the error may be my locale or language,” wrote Muhammed, commenting on Mehmet Nuri’s post. Muhammed even pinpointed the exact line of code where he thought the problem might be. “Apparently this is a uppercase–lowercase Turkish &lt;code&gt;I&lt;/code&gt; problem in the &lt;code&gt;CompilerOutputParser.CATEGORIES&lt;/code&gt; map: &lt;code&gt;I -&amp;gt; ı&lt;/code&gt;, &lt;code&gt;İ -&amp;gt; i&lt;/code&gt;.”&lt;/p&gt;
    &lt;p&gt;This was proof that Mehmet Nuri’s problems weren’t confined to his particular project, but were a symptom of something more serious going on in the compiler itself. The Kotlin team, grateful for Muhammed’s new information, filed an issue report with a link to the forum post in their YouTrack bug tracker:&lt;/p&gt;
    &lt;p&gt;“Compilation fails on Turkish locale because of locale-sensitive uppercasing.” (KT-13631)&lt;/p&gt;
    &lt;p&gt;Muhammed Demirbaş couldn’t have been more spot on in his investigation and assessment of the compiler bug. Since Kotlin is open source, he was able to search the compiler’s code for the exact line of code where that “Unknown compiler message tag” string appears:&lt;/p&gt;
    &lt;code&gt;val qNameLowerCase = qName.toLowerCase()&lt;lb/&gt;var category: CompilerMessageSeverity? = CATEGORIES[qNameLowerCase]&lt;lb/&gt;if (category == null) {&lt;lb/&gt;    messageCollector.report(ERROR, "Unknown compiler message tag: $qName")&lt;lb/&gt;    category = INFO&lt;lb/&gt;}&lt;/code&gt;
    &lt;p&gt;So what does this code do, and why does it sometimes go wrong?&lt;/p&gt;
    &lt;p&gt;The code is part of a class named &lt;code&gt;CompilerOutputParser&lt;/code&gt;, and is responsible for reading XML files containing messages from the Kotlin compiler. Those files look something like this:&lt;/p&gt;
    &lt;code&gt;&amp;lt;MESSAGES&amp;gt;&lt;lb/&gt;  &amp;lt;INFO path="src/main/Kotlin/Example.kt" line="1" column="1"&amp;gt;&lt;lb/&gt;    This is a message from the compiler about a line of code.&lt;lb/&gt;  &amp;lt;/INFO&amp;gt;&lt;lb/&gt;&amp;lt;/MESSAGES&amp;gt;&lt;/code&gt;
    &lt;p&gt;At the time, the tags in this file were named in all-caps: &lt;code&gt;&amp;lt;INFO/&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;ERROR/&amp;gt;&lt;/code&gt;, and so on (source: GitHub), like the HTML 1.0 webpages your grandpa used to write.&lt;/p&gt;
    &lt;p&gt;In the Kotlin code we just saw, &lt;code&gt;qName&lt;/code&gt; is the name of an XML tag that we’re parsing from this file. If we’re looking at an &lt;code&gt;&amp;lt;INFO/&amp;gt;&lt;/code&gt; tag, the &lt;code&gt;qName&lt;/code&gt; is “INFO.”&lt;/p&gt;
    &lt;p&gt;To determine what the message means, the &lt;code&gt;CompilerOutputParser&lt;/code&gt; next looks up that string in its &lt;code&gt;CATEGORIES&lt;/code&gt; map to find its corresponding &lt;code&gt;CompilerMessageSeverity&lt;/code&gt; enum entry. But wait: the keys in the &lt;code&gt;CATEGORIES&lt;/code&gt; map are lower case! (source: GitHub)&lt;/p&gt;
    &lt;code&gt;val categories = mapOf(&lt;lb/&gt;    "error" to CompilerMessageSeverity.ERROR,&lt;lb/&gt;    "info" to CompilerMessageSeverity.INFO,&lt;lb/&gt;    …&lt;lb/&gt;)&lt;/code&gt;
    &lt;p&gt;Instead of searching for “INFO,” we need to search for “info.” That’s why the code we looked at calls &lt;code&gt;qName.toLowerCase()&lt;/code&gt; before looking it up in the &lt;code&gt;CATEGORIES&lt;/code&gt; map. Here’s the code again, or at least the relevant lines:&lt;/p&gt;
    &lt;code&gt;val qNameLowerCase = qName.toLowerCase()&lt;lb/&gt;var category: CompilerMessageSeverity? = CATEGORIES[qNameLowerCase]&lt;/code&gt;
    &lt;p&gt;And that’s where the bug sneaks in.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;If your computer is configured in English, &lt;code&gt;"INFO".toLowerCase()&lt;/code&gt;is&lt;code&gt;"info"&lt;/code&gt;, just like we wanted.&lt;/item&gt;
      &lt;item&gt;But if your computer is configured in Turkish, &lt;code&gt;"INFO".toLowerCase()&lt;/code&gt;turns out to be&lt;code&gt;"ınfo"&lt;/code&gt;.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Notice the difference? In the Turkish version, the lower case letter ‘ı’ has no dot above it.&lt;/p&gt;
    &lt;p&gt;The tiny discrepancy might be hard for a human to spot, but to a computer, these are two completely different strings. The dotless &lt;code&gt;"ınfo"&lt;/code&gt; string isn’t one of the keys in &lt;code&gt;CATEGORIES&lt;/code&gt; map, so the code fails to find the correct &lt;code&gt;CompilerMessageSeverity&lt;/code&gt; for our &lt;code&gt;&amp;lt;INFO/&amp;gt;&lt;/code&gt; tag, and complains that “INFO” must be a completely unknown category of message.&lt;/p&gt;
    &lt;p&gt;So why does calling &lt;code&gt;toLowerCase()&lt;/code&gt; on a Turkish computer produce this strange result?&lt;/p&gt;
    &lt;p&gt;Muhammed already provided part of the answer in his reply to Mehmet Nuri’s forum post. Turkic languages have two versions of the letter ‘i’:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;an ‘i’ with a dot, as in the word insan (human),&lt;/item&gt;
      &lt;item&gt;and a separate ‘ı’ without a dot, as in the word ırmak (river).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;What’s more, the dotted/dotless distinction is also preserved in the upper case letters:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;capital ‘i’ is ‘İ’, as in insan → İnsan,&lt;/item&gt;
      &lt;item&gt;and capital ‘ı’ is ‘I’, as in ırmak → Irmak.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;That uppercase dotless ‘I’ is the same one we use in English. As a result, the single Unicode character &lt;code&gt;I&lt;/code&gt; (U+0049) has two different lower case forms: dotted &lt;code&gt;i&lt;/code&gt; (U+0069) in English, and dotless &lt;code&gt;ı&lt;/code&gt; (U+0131) in Turkish.&lt;/p&gt;
    &lt;p&gt;For Kotlin’s &lt;code&gt;toLowerCase()&lt;/code&gt; function, that’s a problem! When &lt;code&gt;toLowerCase()&lt;/code&gt; sees an &lt;code&gt;I&lt;/code&gt; character, which lower case form should it use? The lower case form of the Turkish word IRMAK should be ırmak, with no dot. But the lower case form of the English word INFO, which starts with exactly the same character, should be info, with a dot.&lt;/p&gt;
    &lt;p&gt;When you ask your computer to convert text to lower case, you should technically also specify the alphabet rules to use—English, Turkish, or something else entirely. But that’s a lot of hard work, so if you don’t specify, many systems — including, in those days, Kotlin’s &lt;code&gt;toLowerCase()&lt;/code&gt; function — will just use the language settings you chose when you set up your computer. That’s why &lt;code&gt;"INFO".toLowerCase()&lt;/code&gt; is &lt;code&gt;"ınfo"&lt;/code&gt; when you run it on a Turkish machine, and that’s why IntelliJ installations in Turkey couldn’t match the Kotlin compiler’s &lt;code&gt;&amp;lt;INFO/&amp;gt;&lt;/code&gt; messages to the lowercase &lt;code&gt;"info"&lt;/code&gt; string they were expecting to see.&lt;/p&gt;
    &lt;p&gt;But in 2016, all of that was still just a bug ticket waiting to be worked on. Muhammed Demirbaş had identified the right place to start the search, but the YouTrack issue linked to his findings was just one of hundreds of tickets in the Kotlin project backlog. With only a tiny number of people reporting that they were affected by the bug, a more thorough investigation was never a priority.&lt;/p&gt;
    &lt;p&gt;That would all change with the release of coroutines two years later, when the unassuming little bug wormed its way even deeper into the foundations of the Kotlin compiler.&lt;/p&gt;
    &lt;p&gt;October 2018 saw the release of Kotlin 1.3 — and with it, the first stable version of the new coroutines library, an innovative approach to asynchronous programming that promised to transform the Android app development experience. Coroutines had been in prerelease testing for over a year, and now that they were deemed ready for production use, Kotlin programmers of all kinds were ready to embrace them with enthusiasm.&lt;/p&gt;
    &lt;p&gt;To get the new tools, developers needed to upgrade their copy of the coroutines library from the prerelease 0.30.x version to the stable 1.0 release, at the same time as upgrading the Kotlin language and standard library to version 1.3.&lt;/p&gt;
    &lt;p&gt;Have you ever upgraded a dependency in a Kotlin or Java project? If so, you’ll know that making sure all your libraries remain compatible with one another can be a delicate juggling act. If your code references a function that’s been removed or changed in the new dependency, you’ll get a compilation error. But if the newly broken reference comes not from your own code but from another library, you won’t find out until you run the program. That’s because the code inside the library has already been compiled by its author, and isn’t being compiled or checked as part of your own build.&lt;/p&gt;
    &lt;p&gt;When one of your libraries tries to call a function that doesn’t exactly match what’s on offer in your freshly upgraded project’s new classpath, you’ll get a &lt;code&gt;NoSuchMethodError&lt;/code&gt;. As a result, when you’re upgrading dependencies—and especially if you’re upgrading several dependencies at once—the occasional &lt;code&gt;NoSuchMethodError&lt;/code&gt; is pretty much par for the course, until you figure out exactly which versions of each library are compatible with one another.&lt;/p&gt;
    &lt;p&gt;So when Kemal Atlı, an Android developer based in Turkey, ran into a &lt;code&gt;NoSuchMethodError&lt;/code&gt; while upgrading his app to use the shiny new coroutines library, it looked for all the world like just another dependency version mismatch. Kemal wasn’t having any luck fixing this one, though. Unsure if it might be a bug with the coroutines library itself, he opened a GitHub issue, pasting the stack trace from his crashed app:&lt;/p&gt;
    &lt;code&gt;java.lang.NoSuchMethodError: &lt;lb/&gt;  No static method boxİnt(I)Ljava/lang/Integer;&lt;lb/&gt;  in class Lkotlin/coroutines/jvm/internal/Boxing;&lt;/code&gt;
    &lt;p&gt;This exception already contained the vital clue—a tiny dot above the upper case letter ‘İ’ in &lt;code&gt;boxİnt()&lt;/code&gt;—but who’s going to spot that if they’re not looking for it? For now, nobody did.&lt;/p&gt;
    &lt;p&gt;“Does restarting your IDE and running a &lt;code&gt;clean build&lt;/code&gt; resolve the issue?” responded the coroutines library maintainers, immediately suspecting a version conflict. Kemal had said that the issue only happened on one of his two machines, which suggested the problem might just be an old incompatible dependency version hanging around in his build cache after the upgrade.&lt;/p&gt;
    &lt;p&gt;A week later, another bug report, from another Turkish developer seeing their app crash with the same exception. By now, the coroutines library maintainers were certain the problem could only be caused by a dependency version mismatch—a conclusion which, in any other circumstances, might have been entirely valid. They had no luck reproducing the issue on their end, which just provided further evidence that the problem was specific to the way those two issue reporters had configured and built their projects.&lt;/p&gt;
    &lt;p&gt;It took a month for someone to spot the smoking gun.&lt;/p&gt;
    &lt;p&gt;“It has to be a locale problem,” wrote Erel Özçakırlar, another Turkish software engineer, commenting on Kemal’s issue report in late December 2018. Erel pointed out what everyone had missed so far: the real function should be called &lt;code&gt;boxInt()&lt;/code&gt;, but the stack trace showed &lt;code&gt;boxİnt()&lt;/code&gt;. It wasn’t a simple case of trying to call an older version of an existing function. Instead, Kotlin had seemingly used the Turkish alphabet to invent a function name that had never existed in the first place. What’s more, Erel found he could fix the problem by running the code on a computer that used English as its system locale.&lt;/p&gt;
    &lt;p&gt;“I think Erel might have a point regarding system language settings,” replied Kemal, saying he’d look into it further. But figuring out why Kotlin’s compiler internals are suddenly inventing imaginary functions using Turkish characters — well, where would you even start? There was little for Kemal to offer beyond the original bug report, so the issue kept its “waiting for clarification” label, and was closed — along with the second similar bug report — in early 2019.&lt;/p&gt;
    &lt;p&gt;Once again, the bug was back in hiding. But this time, it had sunk its claws deep into Kotlin’s compiler internals. The misspelled &lt;code&gt;boxİnt()&lt;/code&gt; function wasn’t being called in Kemal’s own code, or even in a library he was using. Instead, the mistake was being added to his app by the compiler itself.&lt;/p&gt;
    &lt;p&gt;To understand why, we need to talk a little about how coroutines work.&lt;/p&gt;
    &lt;p&gt;Much of Kotlin’s coroutine magic takes places in the dedicated kotlinx.coroutines library. But there’s one core building block that’s more tightly integrated with the Kotlin language and its compiler: the &lt;code&gt;suspend&lt;/code&gt; keyword.&lt;/p&gt;
    &lt;p&gt;When you label a function with the &lt;code&gt;suspend&lt;/code&gt; keyword, the Kotlin compiler rewrites the function signature to make the function work asynchronously. For example, when you write a suspending function with two parameters, the corresponding output generated by the Kotlin compiler will actually include three parameters. The invisible third parameter is a &lt;code&gt;Continuation&lt;/code&gt;, which both stores the state of the function and acts as a callback to receive the function’s asynchronous result.&lt;/p&gt;
    &lt;p&gt;A &lt;code&gt;Continuation&lt;/code&gt; stores and sends all kinds of values, depending on the code inside your suspending function—and that’s where the mysterious &lt;code&gt;boxInt()&lt;/code&gt; function comes into play.&lt;/p&gt;
    &lt;p&gt;You might know that when you create an &lt;code&gt;Int&lt;/code&gt; in Kotlin, it can be stored as one of two different underlying Java types: a primitive &lt;code&gt;int&lt;/code&gt;, or an &lt;code&gt;Integer&lt;/code&gt; object. Kotlin makes the choice for you automatically, depending on how the value is used.&lt;/p&gt;
    &lt;p&gt;If you use an &lt;code&gt;Int&lt;/code&gt; in a coroutine, Kotlin will sometimes need to convert it from the primitive &lt;code&gt;int&lt;/code&gt; storage mechanism to an &lt;code&gt;Integer&lt;/code&gt; object, so that the value can pass through the generic coroutine continuation machinery. This conversion is called boxing. Java will happily perform the conversion automatically—but for the stable release of coroutines, the Kotlin team wanted to make sure the conversion was as efficient as possible.&lt;/p&gt;
    &lt;p&gt;To help the JVM optimize its execution of suspending functions, Kotlin 1.3 added a set of new functions for the compiler to use in its generated coroutine code: &lt;code&gt;boxBoolean()&lt;/code&gt;, &lt;code&gt;boxByte()&lt;/code&gt;, &lt;code&gt;boxShort()&lt;/code&gt;, &lt;code&gt;boxInt()&lt;/code&gt;, and so on (source: GitHub). Since the &lt;code&gt;suspend&lt;/code&gt; keyword is part of the core language, these functions must be available to all Kotlin programs, which is why they’re in the standard library, not the coroutines library—though they’re marked as &lt;code&gt;internal&lt;/code&gt;, and aren’t available for you to call directly.&lt;/p&gt;
    &lt;p&gt;The functions themselves aren’t the problem: they’re spelled correctly, and their implementations are so trivial that there’s nowhere for anything to go wrong. No, the bug happens when the compiler generates the code that calls these functions.&lt;/p&gt;
    &lt;p&gt;To correctly box a value, Kotlin needs to map the Java primitive type to its corresponding box function. A &lt;code&gt;boolean&lt;/code&gt; value must be passed to &lt;code&gt;boxBoolean()&lt;/code&gt;; a &lt;code&gt;byte&lt;/code&gt; value to &lt;code&gt;boxByte()&lt;/code&gt;, and so on.&lt;/p&gt;
    &lt;p&gt;There’s an obvious pattern there: capitalize the first letter of the primitive type, and then add “box” to the start. And that’s exactly what Kotlin 1.3 did, using the standard library’s &lt;code&gt;capitalize()&lt;/code&gt; function: (source: GitHub)&lt;/p&gt;
    &lt;code&gt;map[name] = "box${primitiveType.javaKeywordName.capitalize()}"&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;capitalize()&lt;/code&gt; function modifies only the first letter of a string—so &lt;code&gt;"boolean".capitalize()&lt;/code&gt; becomes &lt;code&gt;"Boolean"&lt;/code&gt;, &lt;code&gt;"int".capitalize()&lt;/code&gt; becomes &lt;code&gt;"Int"&lt;/code&gt;, and so on.&lt;/p&gt;
    &lt;p&gt;Unless you’re in Turkey.&lt;/p&gt;
    &lt;p&gt;Once again, the behaviour of &lt;code&gt;capitalize()&lt;/code&gt; can vary depending on your computer’s language settings. It’s that pesky letter ‘i’ again:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;With Turkish language settings, the upper case form of &lt;code&gt;i&lt;/code&gt;is&lt;code&gt;İ&lt;/code&gt;,&lt;/item&gt;
      &lt;item&gt;whereas in English, the upper case form of &lt;code&gt;i&lt;/code&gt;is&lt;code&gt;I&lt;/code&gt;.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you’re working in Turkish, the correct result for &lt;code&gt;"int".capitalize()&lt;/code&gt; is &lt;code&gt;"İnt"&lt;/code&gt;. The &lt;code&gt;capitalize()&lt;/code&gt; function has no way of knowing that “int” is a special programming keyword that needs to be treated as English text rather than Turkish. So when the Kotlin 1.3 compiler, running on a machine with Turkish language settings, needs to box up a primitive Java &lt;code&gt;int&lt;/code&gt; inside a suspending function, it’s going to generate a call to a non-existent standard library function called &lt;code&gt;boxİnt()&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Oops!&lt;/p&gt;
    &lt;p&gt;It was Fatih Doğan, another Turkish programmer, who in September 2019 managed to put all the pieces together, filing the issue report that would finally lead to a fix. Fatih clearly pointed out the misplaced dot above the ‘İ’ in &lt;code&gt;boxİnt()&lt;/code&gt;, and, crucially, set up a GitHub repository with instructions to reliably reproduce the issue.&lt;/p&gt;
    &lt;p&gt;Within a day of this new detailed issue report, the Kotlin team had found the line of code that was causing the issue. Less than a week later, they had a fix ready: (source: GitHub)&lt;/p&gt;
    &lt;code&gt;map[name] = "box${primitiveType.javaKeywordName.capitalize(Locale.US)}"&lt;/code&gt;
    &lt;p&gt;Passing a specific &lt;code&gt;Locale&lt;/code&gt; to the &lt;code&gt;capitalize()&lt;/code&gt; function means it will always use the same language rules, no matter what machine you run it on. It’s an easy change: like all the case conversion functions in the Kotlin standard library, &lt;code&gt;capitalize()&lt;/code&gt; already accepted an optional &lt;code&gt;Locale&lt;/code&gt; argument. It only fell back to the system’s default &lt;code&gt;Locale&lt;/code&gt; if you didn’t specify your own.&lt;/p&gt;
    &lt;p&gt;The fix was released as part of Kotlin 1.3.6, in November 2019, finally giving Turkish developers a stable way to use suspending functions.&lt;/p&gt;
    &lt;p&gt;But that’s not the end of this story—far from it. Coroutines might be working again, but they had proved just how easy it was to fall disastrously foul of locale-sensitive case conversions. And that original build error from the start of the story still wasn’t fixed…&lt;/p&gt;
    &lt;p&gt;It took one more bug to demonstrate the true severity of the problem.&lt;/p&gt;
    &lt;p&gt;In September 2020, nearly a year after the coroutines bug had been fixed and forgotten, Muhittin Kaplan was just starting to learn Kotlin. He wrote a simple program to check his understanding of arrays:&lt;/p&gt;
    &lt;code&gt;fun main() {&lt;lb/&gt;    println("Hello, world!!!")&lt;lb/&gt;    val nums = intArrayOf(1, 2, 3, 4, 5)&lt;lb/&gt;    println(nums[2])&lt;lb/&gt;}&lt;/code&gt;
    &lt;p&gt;But when he ran the program, he saw a baffling error:&lt;/p&gt;
    &lt;code&gt;java.lang.NoSuchMethodError:&lt;lb/&gt;  'int[] kotlin.jvm.internal.Intrinsics$Kotlin.intArrayOf(int[])'&lt;/code&gt;
    &lt;p&gt;The &lt;code&gt;intArrayOf()&lt;/code&gt; function is one of the most basic tools in the Kotlin standard library—and it has existed in every Kotlin version since 1.0 and before. Even if it didn’t exist, or if it was being called incorrectly, the error should happen at compile time, not at runtime.&lt;/p&gt;
    &lt;p&gt;Muhittin knew something fishy was going on, and he filed a YouTrack issue describing what he was seeing.&lt;/p&gt;
    &lt;p&gt;“Hi from Türkiye,” he began.&lt;/p&gt;
    &lt;p&gt;This time, the Kotlin team knew what to look for. It wasn’t long before they had tracked down the faulty line of code in the compiler: (source: GitHub)&lt;/p&gt;
    &lt;code&gt;StringsKt.decapitalize(type.getArrayTypeName().asString()) + "Of"&lt;/code&gt;
    &lt;p&gt;Although it’s written in Java, this code is calling the &lt;code&gt;decapitalize()&lt;/code&gt; function from Kotlin’s own standard library. And once again, it’s relying on the system’s default language settings, instead of using a fixed &lt;code&gt;Locale&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;The code is part of a procedure that’s responsible for configuring intrinsics—functions that don’t really have an implementation in the Kotlin standard library, but are instead replaced directly by the compiler with the corresponding Java instructions or even JVM bytecode. When you write &lt;code&gt;intArrayOf(1, 2, 3)&lt;/code&gt;, Kotlin doesn’t really call an &lt;code&gt;intArrayOf()&lt;/code&gt; function. Instead, it recognizes that &lt;code&gt;intArrayOf()&lt;/code&gt; was registered as an intrinsic, and just outputs the bytecode to create and populate an array.&lt;/p&gt;
    &lt;p&gt;Much like the &lt;code&gt;boxInt()&lt;/code&gt; function we saw before, &lt;code&gt;intArrayOf()&lt;/code&gt; is part of a wider family of functions: one array-builder function for each primitive type. The call to &lt;code&gt;type.getArrayTypeName()&lt;/code&gt; returns the name of the Kotlin class for each array—&lt;code&gt;IntArray&lt;/code&gt;, &lt;code&gt;BooleanArray&lt;/code&gt;, and so on. The corresponding function—&lt;code&gt;intArrayOf()&lt;/code&gt;, &lt;code&gt;booleanArrayOf()&lt;/code&gt;, and so on—should start with a lower case letter, so we need to call &lt;code&gt;decapitalize()&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;And there’s our bug.&lt;/p&gt;
    &lt;p&gt;On a machine with Turkish language settings, &lt;code&gt;"IntArray".decapitalize()&lt;/code&gt; (or &lt;code&gt;StringsKt.decapitalize("IntArray")&lt;/code&gt;, as it appears in Java) returns &lt;code&gt;"ıntArray"&lt;/code&gt;, with that all-too-familiar dotless lowercase ‘ı’. Add the &lt;code&gt;"Of"&lt;/code&gt; suffix, and we’ve just registered an intrinsic bytecode implementation for a function called &lt;code&gt;ıntArrayOf()&lt;/code&gt;—not the same as the &lt;code&gt;intArrayOf()&lt;/code&gt; function that the standard library is advertising!&lt;/p&gt;
    &lt;p&gt;When they came to fix this issue, the Kotlin team weren’t leaving anything to chance. They scoured the entire compiler codebase for case-conversion operations—calls to &lt;code&gt;capitalize()&lt;/code&gt;, &lt;code&gt;decapitalize()&lt;/code&gt;, &lt;code&gt;toLowerCase()&lt;/code&gt;, and &lt;code&gt;toUpperCase()&lt;/code&gt;—and replaced them with locale-invariant alternatives. 173 lines of code changed, across 53 files—including the compiler-output XML parser that had caused Mehmet Nuri Öztürk’s build to fail in Kotlin 1.0, all those years ago (source: GitHub).&lt;/p&gt;
    &lt;p&gt;The slew of fixes was released as part of a more general compiler upgrade project in Kotlin 1.5, in May 2021. After five years in the backlog, KT-13631 was finally closed.&lt;/p&gt;
    &lt;p&gt;Three different bugs—in compiler outputs, coroutines, and arrays—caused by three different functions—&lt;code&gt;toLowerCase()&lt;/code&gt;, &lt;code&gt;capitalize()&lt;/code&gt;, and &lt;code&gt;decapitalize()&lt;/code&gt;. Without a more foundational solution, Kotlin’s case-conversion trap was just waiting to claim its next victim.&lt;/p&gt;
    &lt;p&gt;Even before Kotlin 1.5 was released, the Kotlin team were hard at work on a project to make sure locale-sensitive case conversions would never crash another Kotlin program.&lt;/p&gt;
    &lt;p&gt;In October of 2020, they published KEEP-223, “Locale-agnostic case conversions by default”—a proposal to replace Kotlin’s case-conversion functions with a new set of functions that would ignore your system’s language settings and simply default to a fixed locale. The new &lt;code&gt;uppercase()&lt;/code&gt; and &lt;code&gt;lowercase()&lt;/code&gt; functions were added to the standard library in Kotlin 1.5, and as of Kotlin 2.1, using the older &lt;code&gt;toLowerCase()&lt;/code&gt; and &lt;code&gt;toUpperCase()&lt;/code&gt; functions generates an error.&lt;/p&gt;
    &lt;p&gt;What about &lt;code&gt;capitalize()&lt;/code&gt;?&lt;/p&gt;
    &lt;p&gt;When KEEP-223 was being discussed, it gradually became clear that &lt;code&gt;capitalize()&lt;/code&gt; had more problems than just locale sensitivity. The function name itself is surprisingly ambiguous. Look up capitalize in almost any English dictionary and you’ll find two competing definitions. Here’s one example from Collins:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;6. to print or write (a word or words) in capital letters&lt;/p&gt;
      &lt;p&gt;7. to begin (a word) with a capital letter&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Kotlin’s &lt;code&gt;capitalize()&lt;/code&gt; function had always been designed to modify only the first letter of a string, and this was the perfect opportunity to clear up the confusion. If &lt;code&gt;capitalize()&lt;/code&gt; was an ambiguous name, what should its replacement be called? Can you think of a name that describes the function’s behaviour more clearly?&lt;/p&gt;
    &lt;p&gt;In the end, the Kotlin team chose not to provide a replacement at all. If the function doesn’t exist, it can’t cause confusion or bugs! In modern Kotlin, when you want to modify the first character of a string, you provide a custom lambda to &lt;code&gt;replaceFirstChar { … }&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Kotlin 2.1 was released in November 2024, drawing our story to a satisfying close.&lt;/p&gt;
    &lt;p&gt;What can we learn from it? I think the biggest lesson is just how much responsibility rests on a language’s standard library. It’s easy to think of the standard library as simply a starter pack of stock algorithms and data structures. But dig just a little deeper, and you’ll find that even the simplest string operations rely on a detailed digital model of the complexity and creativity of human culture.&lt;/p&gt;
    &lt;p&gt;Much of that digital model, by the way, is provided by the Unicode Common Locale Data Repository (CLDR), which documents language rules, date and time formats, measurement units, currencies, and much more. Unicode isn’t just for emojis!&lt;/p&gt;
    &lt;p&gt;Now, there’s just one question that’s still bugging me. Did Mehmet Nuri Öztürk ever get that app to build?&lt;/p&gt;
    &lt;p&gt;Thanks for reading!&lt;/p&gt;
    &lt;p&gt;I write books, too. If you want more Kotlin oddities and compiler quirks, check out my puzzle book, Kotlin Brain Teasers:&lt;/p&gt;
    &lt;p&gt;And if you enjoyed learning about suspending functions and coroutines, you might like Kotlin Coroutine Confidence:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://sam-cooper.medium.com/the-country-that-broke-kotlin-84bdd0afb237"/><published>2025-10-12T17:02:09+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559857</id><title>Wireguard FPGA</title><updated>2025-10-12T21:08:12.470588+00:00</updated><content>&lt;doc fingerprint="b5d9dc196105abe7"&gt;
  &lt;main&gt;
    &lt;p&gt;Virtual Private Networks (VPNs) are the central and indispensable component of Internet security. They comprise a set of technologies that connect geographically dispersed, heterogeneous networks through encrypted tunnels, creating the impression of a homogenous private network on the public shared physical medium.&lt;/p&gt;
    &lt;p&gt;With traditional solutions (such as OpenVPN / IPSec) starting to run out of steam, Wireguard is increasingly coming to the forefront as a modern, secure data tunneling and encryption method, one that's also easier to manage than the incumbents. Both software and hardware implementations of Wireguard already exist. However, the software performance is far below the speed of wire. Existing hardware approaches are both prohibitively expensive and based on proprietary, closed-source IP blocks and tools.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The intent of this project is to bridge these gaps with an FPGA open-source implementation of Wireguard, written in SystemVerilog HDL.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We have contributed to the Blackwire project, which is a 100Gbps hardware implementation of Wireguard switch based on AMD/Xilinx-proprietary AlveoU50 PC-accelerator card (SmartNIC form-factor), and implementable only with proprietary Vivado toolchain.&lt;/p&gt;
    &lt;p&gt;While working on the Blackwire, we have touched multiple sections, and focused on the novel algorithm for Balanced Binary Tree Search of IP tables. However, the Blackwire hardware platform is expensive and priced out of reach of most educational institutions. Its gateware is written in SpinalHDL, a nice and powerfull but a niche HDL, which has not taken roots in the industry. While Blackwire is now released to open-source, that decision came from their financial hardship -- It was originaly meant for sale. Moreover, the company behind it is subject to disputes and obligations that bring into question the legality of ownership over the codebase they "donated" to the open source community.&lt;/p&gt;
    &lt;p&gt;To make the hardware Wireguard truly accessible in the genuine spirit of open-source movement, this project implements it:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;for an inexpensive hardware platform with four 1000Base-T ports&lt;/item&gt;
      &lt;item&gt;in a self-sufficient way, i.e. w/o requiring PC host&lt;/item&gt;
      &lt;item&gt;using a commodity Artix7 FPGA&lt;/item&gt;
      &lt;item&gt;which is supported by open-source tools&lt;/item&gt;
      &lt;item&gt;and with all gateware written in the ubiquitous Verilog / System Verilog&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;[Ref1] Wireguard implementations in software:&lt;/p&gt;
    &lt;p&gt;[Ref2] 100Gbps Blackwire Wireguard&lt;/p&gt;
    &lt;p&gt;[Ref3] Corundum, open-source FPGA-NIC platform&lt;/p&gt;
    &lt;p&gt;[Ref4] ChaCha20-Poly1305 open-source Crypto RTL&lt;/p&gt;
    &lt;p&gt;[Ref5] Cookie Cutter SOC&lt;/p&gt;
    &lt;p&gt;[Ref6] RISC-V ISS&lt;/p&gt;
    &lt;p&gt;[Ref7] 10Gbps Ethernet Switch&lt;/p&gt;
    &lt;p&gt;[Ref8] OpenXC7 open-source tools for Xilinx Series7&lt;/p&gt;
    &lt;p&gt;[Ref9] Alex's Ethernet Stack&lt;/p&gt;
    &lt;p&gt;[Ref10] Amina's ADASEC-SDN&lt;/p&gt;
    &lt;p&gt;The Phase1 (This!) is primarily Proof of Concept, i.e. not full-featured, and definitely not a deployable product. It is envisoned as a mere on-ramp, a springboard for future build-up and optimizations.&lt;/p&gt;
    &lt;p&gt;The Phase2 continuation project is therefore also in the plans, to maximize efficiency and overall useability, such as by increasing the number of channels, facilitating management with GUI apps, or something else as identified by the community feedback.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;HW/SW partitioning, interface, interactions and workload distribution&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;While, contrary to Blackwire, we don’t rely on an external PC connected via PCIE, we will still have an on-chip RISC-V CPU with intricate hardware interface and significant Embedded Software component that controls the backbone of wire-speed datapath&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;HW/SW co-development, integration and debugging&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Standard simulation is impractical for the project of this size and complexity. We therefore intend to put to test and good use the very promissing new VProc ISS [Ref6]&lt;/item&gt;
          &lt;item&gt;It’s also impractical and expensive to provide full test systems with real traffic generators and checkers to all developers. We therefore plan to rent some space for a central lab that will host two test systems, then provide remote access to all developers&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Real-life, at-speed testing&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Extent of open-source tools support for SystemVerilog and all needed FPGA primitives and IP functions&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;QOR of the (still maturing) open-source tools&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Blackwire used commercial, AMD/Xilinx-proprietary Vivado toolchain, as well as high-end Alveo U50 FPGA silicon. Even then, they ran into multiple timing closure, utilization and routing congestion challenges.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Financial resources&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Given that this is a complex, multi-disciplinary dev effort, the available funding may not be sufficient to bring it to completion. Blackwire, despite a larger allocated budget, ended up with funding crisis and abrupt cessation of dev activities.&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This project is WIP at the moment. The checkmarks below indicate our status. Until all checkmarks are in place, anything you get from here is w/o guaranty -- Use at own risk, as you see fit, and don't blame us if it is not working 🌤️&lt;/p&gt;
    &lt;p&gt;Board bring up. In-depth review of Wireguard ecosystem and prior art. Design Blueprint&lt;/p&gt;
    &lt;p&gt;While the board we're using is low cost, it is also not particularly known in the open-source community. We certainly don’t have prior experience with it. In this opening take we will build a solid foundation for efficient project execution. Good preparation is crucial for a smooth run. We thus seek to first &lt;code&gt;understand and document what we will be designing: SOC Architecture, Datapath Microarchitecture, Hardware/Software Partitioning, DV and Validation Strategy&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Getting a good feel for our Fmax is also a goal of this take. Artix-7 does not support High-Performance (HP) I/O. Consequently, we cannot push its I/O beyond 600MHz, nor its core logic beyond 100 MHz.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Familiarization with HW platform&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Create our first FPGA program that blinks LEDs&lt;/item&gt;
          &lt;item&gt;Verify pinouts and connectivity using simple test routines&lt;/item&gt;
          &lt;item&gt;Generate a few Ethernet test patterns&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Familiarization with SW platform&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Initial bring up of embedded CPU within a cookie-cutter SOC, such as [Ref5]&lt;/item&gt;
          &lt;item&gt;Design and test a simple SW interface to rudimentary HW Ethernet datapath&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Detailed analysis and comparisons of:&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Wireguard White Papers&lt;/item&gt;
          &lt;item&gt;existing implementations in software [Ref1]&lt;/item&gt;
          &lt;item&gt;vs. Blackwire hardware implementation [Ref2]&lt;/item&gt;
          &lt;item&gt;cryptographic algorithms used for Wireguard, esp. ChaCha20 for encryption, Poly1305 for authentication [Ref4] and, to a lesser extent, Curve25519 for key exchange and blake2 for hashing&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Identification and assimilation of prior art and building IP blocks, in particular Corundum [Ref3] and, to a lesser extent, 10GE Switch [Ref7]&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Architecture/uArch Design. HW/SW Partitioning. Verification Plan&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Creation of sufficient initial documentation for project divide-and-conquer across a multi-disciplinary team of half a dozen developers&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Implementation of a basic, statically pre-configured Wireguard link&lt;/p&gt;
    &lt;p&gt;It it in this take that we start creating hardware Datapath and hardening Wireguard encryption protocols, all using Vivado and Xilinx primitives.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Integration of collected RTL blocks into a coherent HW system that implements the basic Wireguard datapath for a handful of manually pre-configured channels.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;Corundum FPGA-based NIC and platform for opensource Ethernet development [Ref3]&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;IP Core for ChaCha20-Poly1305 [Ref4] -- Definitely in hardware from the get-go&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;Curve25519 module for key exchange -- Likely in software at this point&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;blake2 module for hashing (we'll most likely do it in software)&lt;/p&gt;
          &lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Timing closure. Resolution of FPGA device utilization and routing congestion issues&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Creation of cocoTB DV in the CI/CD environmenT, and representative test cases for datapath simulation&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Development and integration of embedded management software (Control Plane)&lt;/p&gt;
    &lt;p&gt;This work package is about hardware/software codesign and integration. The firmware will run on a soft RISC V processor, inside the FPGA. Our vanilla SOC is at this point starting to be customized to Wireguard needs. This work can to some extent go on in parallel with hardware activities of Take2.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;SW design for on-chip processor (Part 1)&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Code is to be written in the bare-metal C with, as necessary, a few sections in Assembly&lt;/item&gt;
          &lt;item&gt;SW is responsible for configuration and management of hardware blocks&lt;/item&gt;
          &lt;item&gt;SW must not participate in the bulk datapath transfers&lt;/item&gt;
          &lt;item&gt;SW may however intercept the low-frequency management packets&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;SW design for on-chip processor (Part 2)&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;KMM function -- Key Management Module&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;HW/SW Integration&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;VPN Tunnel: Session initialization, maintenance, and secure closure&lt;/p&gt;
    &lt;p&gt;This is about managing the bring-up, maintenance and tear-down of VPN tunnels between two devices.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Session Initialization: Starting the handshake process to establish secure communication with another device&lt;/item&gt;
      &lt;item&gt;Session Maintenance: Keeping the session active through the regular exchange of control messages, which allows detection and recovery from problems such as connection interruptions&lt;/item&gt;
      &lt;item&gt;Session Closure: Securely close the VPN tunnel when communication is no longer needed, ensuring that all temporary keys and sensitive data are deleted&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Testing, Profiling and Porting to OpenXC7&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;Functional testing on the real system. Does it work as intended? Bug fixes&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Performance testing. HW/SW profiling, updates and enhancements to ensure the design indeed operates at close to the wire speed on all preconfigured channels&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Porting to openXC7 [Ref8] using SV2V, in the GoCD CI/CD setting&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;This is challenging, as openXC7 has thus far been crashing for NES SV&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Timing closure with openXC7&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;This is definitely challenging, given that openXC7 is currently without accurate timing-driven STA&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Filing bug tickets with open source developers for issues found in their tools, supporting them all the way to the resolution&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Creation and maintenance of an attractive and well-documented Github repo, to entice community interest&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Ongoing documentation updates and CI/CD script maintenance to keep it valid in the light of inevitable design mutations compared to the original Design Blueprint.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Flow control module for efficient and stable VPN tunnel data management&lt;/p&gt;
    &lt;p&gt;The objective of this optional deliverable is to ensure stable and efficient links, thus taking this project one step closer to a deployable product.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Develop software components for management of data flow within VPN tunnels&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Since the WireGuard node essentially functions as an IP router with WireGuard protocol support, we have decided to design the system according to a two-layer architecture: a control plane responsible for managing IP routing processes and executing the WireGuard protocol (managing remote peers, sessions, and keys), and a data plane that will perform IP routing and cryptography processes at wire speed. The control plane will be implemented as software running on a soft CPU, while the data plane will be fully implemented in RTL on an FPGA.&lt;/p&gt;
    &lt;p&gt;In the HW/SW partitioning diagram, we can observe two types of network traffic: control traffic, which originates from the control plane and goes toward the external network (and vice versa), and data traffic, which arrives from the external network and, after processing in the data plane, returns to the external network. Specifically, control traffic represents WireGuard protocol handshake messages, while data traffic consists of end-user traffic, either encrypted or in plaintext, depending on the perspective.&lt;/p&gt;
    &lt;p&gt;The hardware architecture essentially follows the HW/SW partitioning and consists of two domains: a soft CPU for the control plane and RTL for the data plane.&lt;/p&gt;
    &lt;p&gt;The soft CPU is equipped with a Boot ROM and a DDR3 SDRAM controller for interfacing with off-chip memory. External memory is exclusively used for control plane processes and does not store packets. The connection between the control and data planes is established through a CSR-based HAL.&lt;/p&gt;
    &lt;p&gt;The data plane consists of several IP cores, including data plane engine (DPE) and supporting components, which are listed and explained in the direction of network traffic propagation:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;PHY Controller - initial configuration of Realtek PHYs and monitoring link activity (link up/down events)&lt;/item&gt;
      &lt;item&gt;1G MAC - execution of the 1G Ethernet protocol (framing, flow control, FCS, etc.)&lt;/item&gt;
      &lt;item&gt;Rx FIFOs - clock domain crossing, bus width conversion, and store &amp;amp; forward packet handling&lt;/item&gt;
      &lt;item&gt;Per-Packet Round Robin Multiplexer - servicing Rx FIFOs on a per-packet basis using a round-robin algorithm&lt;/item&gt;
      &lt;item&gt;Header Parser - extraction of WireGuard-related information from packet headers (IP addresses, UDP ports, WireGuard message type, peer ID, etc.)&lt;/item&gt;
      &lt;item&gt;Wireguard/UDP Packet Disassembler - decapsulation of the payload from the Wireguard data packet for decryption of tunneled traffic&lt;/item&gt;
      &lt;item&gt;ChaCha20-Poly1305 Decryptor - decryption and authentication of tunneled traffic&lt;/item&gt;
      &lt;item&gt;IP Lookup Engine - routing/forwarding table lookup, mapping packets to the appropriate WireGuard peer, and making packet accept/reject decisions&lt;/item&gt;
      &lt;item&gt;ChaCha20-Poly1305 Encryptor - encryption and authentication of traffic to be tunneled&lt;/item&gt;
      &lt;item&gt;Wireguard/UDP Packet Assembler - encapsulation of the encrypted packet into a WireGuard data packet for tunneling to the remote peer&lt;/item&gt;
      &lt;item&gt;Per-Packet Demultiplexer - forwarding packets to Tx FIFOs based on packet type and destination&lt;/item&gt;
      &lt;item&gt;Tx FIFOs - clock domain crossing, bus width conversion, and store &amp;amp; forward packet handling&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;ChaCha20-Poly1305 Encryptor/Decryptor are using RFC7539's AEAD (Authenticated Encryption Authenticated Data) construction based on ChaCha20 for symmetric encryption and Poly1305 for authentication.&lt;/p&gt;
    &lt;p&gt;The details of hardware architecture can be found in the README.md in the &lt;code&gt;1.hw/&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;The conceptual class diagram provides an overview of the components in the software part of the system without delving into implementation details. The focus is on the WireGuard Agent, which implements the protocol's handshake procedures, along with the following supplementary components:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Curve25519 - an ECDH algorithm implementation for establishing a shared secret using a public-private key pair between two remote parties connected via an insecure channel, such as the Internet&lt;/item&gt;
      &lt;item&gt;ChaCha20-Poly1305 - an AEAD algorithm implementation for encryption and authentication of static keys and nonce values to prevent replay attacks&lt;/item&gt;
      &lt;item&gt;XChaCha20-Poly1305 - a XAEAD algorithm implementation for encrypting and authenticating nonce values in Cookie Replay messages to mitigate potential DoS attacks&lt;/item&gt;
      &lt;item&gt;BLAKE2s - an implementation of the BLAKE2s hash function for MAC authentication and keyed hashing, per RFC7693&lt;/item&gt;
      &lt;item&gt;RNG - a random number generator used to initialize the DH key generator and generate peer identifiers&lt;/item&gt;
      &lt;item&gt;Timer - timers for rekey, retry, and keepalive procedures&lt;/item&gt;
      &lt;item&gt;HKDF - an implementation of the algorithm for expanding the ECDH result&lt;/item&gt;
      &lt;item&gt;RTC - a real-time clock used to generate the TAI64N timestamp&lt;/item&gt;
      &lt;item&gt;SipHash - a simple non-cryptographic function used for implementing a hashtable for fast lookup of decrypted static public keys of remote peers&lt;/item&gt;
      &lt;item&gt;Routing DB Updater - a subsystem for maintaining the cryptokey routing table content and deploying it to the data plane via the HAL/CSR interface&lt;/item&gt;
      &lt;item&gt;ICMP - implementing basic ICMP protocol functions (echo request/reply, TTL exceeded, etc.)&lt;/item&gt;
      &lt;item&gt;CLI - a USB/UART-based command-line interface for configuring the WireGuard node (setting the local IP address, remote peer IP addresses, network addresses, keys, etc.)&lt;/item&gt;
      &lt;item&gt;HAL/CSR Driver - a CSR-based abstraction for data plane components with an interface for reading/writing the corresponding registers&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The details of software architecture can be found in the README.md in the &lt;code&gt;2.sw/&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;To illustrate the operation of the system as a whole, we have prepared a step-by-step analysis of packets processing based on the capture of real WireGuard traffic. The experimental topology consists of four nodes:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;10.10.0.2 - the end-user host at site A&lt;/item&gt;
      &lt;item&gt;10.9.0.1 - WireGuard peer A&lt;/item&gt;
      &lt;item&gt;10.9.0.2 - WireGuard peer B&lt;/item&gt;
      &lt;item&gt;10.10.0.1 - the end-user host at site B&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The detailed analysis can be found in the README.md in the &lt;code&gt;1.hw/&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;The Wireguard FPGA test bench aims to have a flexible approach to simulation which allows a common test environment to be used whilst selecting between alternative CPU components, one of which uses the VProc virtual processor co-simulation element. This allows simulations to be fully HDL, with a RISC-V processor RTL implementation such as picoRV32, IBEX or EDUBOS5, or to co-simulate software using the virtual processor, with a significant speed up in simulation times. The test bench has the following features:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;A VProc virtual processor based &lt;code&gt;soc_cpu.VPROC&lt;/code&gt;component&lt;list rend="ul"&gt;&lt;item&gt;Selectable between this or an RTL softcore&lt;/item&gt;&lt;item&gt;Can run natively compiled test code&lt;/item&gt;&lt;item&gt;Can run the application compiled natively with the auto-generated co-sim HAL&lt;/item&gt;&lt;item&gt;Can run RISC-V compiled code using the rv32 RISC-V ISS model&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Uses a C sparse memory model &lt;list rend="ul"&gt;&lt;item&gt;An HDL component instantiated in logic gives logic access to this memory&lt;/item&gt;&lt;item&gt;An API is provided to VProc running code for direct access&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;The udpIpPg VIP is used to drive the logic's four ethernet ports in a four port &lt;code&gt;bfm_ethernet&lt;/code&gt;block.&lt;list rend="ul"&gt;&lt;item&gt;An MDIO slave interface is also provided that maps mem_model memory areas to the registers with instantiated mem_model components&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The figure below shows an oveview block diagram of the test bench HDL.&lt;/p&gt;
    &lt;p&gt;More details on the architecture and usage of the Wireguard test bench can be found in the README.md in the &lt;code&gt;4.sim&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;The Wireguard control and status register harware abstraction layer (HAL) software is auto-generated, as is the CSR RTL, using &lt;code&gt;peakrdl&lt;/code&gt;. For co-simulation purposes an additional layer is auto-generated from the same SystemRDL specification using &lt;code&gt;systemrdl-compiler&lt;/code&gt; that accompanies the &lt;code&gt;peakrdl&lt;/code&gt; tools. This produces two header files that define a common API to the application layer for both the RISC-V platform and the VProc based co-simulation verification environment. The details of the HAL generation can be found in the README.md in the &lt;code&gt;3.build/&lt;/code&gt; directory.&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;WIP&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Verilator v5.024&lt;/item&gt;
      &lt;item&gt;VProc v1.12.2&lt;/item&gt;
      &lt;item&gt;Mem Model v1.0.0&lt;/item&gt;
      &lt;item&gt;rv32 ISS v1.1.4&lt;/item&gt;
      &lt;item&gt;udpIpPg v1.0.3&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;We are grateful to NLnet Foundation for their sponsorship of this development activity.&lt;/p&gt;
    &lt;p&gt;The wyvernSemi's wisdom and contribution made a great deal of difference -- Thank you, we are honored to have you on the project.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/chili-chips-ba/wireguard-fpga"/><published>2025-10-12T17:12:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45559977</id><title>Ridley Scott's Prometheus and Alien: Covenant – Contemporary Horror of AI (2020)</title><updated>2025-10-12T21:08:11.343891+00:00</updated><content>&lt;doc fingerprint="820393b93108c751"&gt;
  &lt;main&gt;
    &lt;p&gt;Ridley Scott’s Prometheus &lt;lb/&gt; and Alien: Covenant â&lt;lb/&gt; the contemporary horror of AI &lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;“The development of full artificial intelligence could spell the end of the human raceâ¦It would take off on its own, and re-design itself at an ever increasing rate. Humans, who are limited by slow biological evolution, couldn't compete, and would be superseded."&lt;/p&gt;&lt;lb/&gt;âSteven Hawking, English theoretical physicist, cosmologist, and author[1] [open endnotes in new window]&lt;/quote&gt;
    &lt;p&gt;Science fiction is one of the earliest movie genres. Georges MÃ©liÃ¨s’ silent feature A Trip to the Moon (1902), together with Auguste and Louis LumiÃ¨res’ shorts, such as “Workers Leaving the LumiÃ¨re Factory” (1895), are typically considered the key movies in the divide that French movie critic Andre Bazin later famously characterized as between “those directors who put their faith in the image and those who put their faith in reality.”[2] While Bazin clearly sided with the latter, the placement of faith in the image by the directors of science fiction movies has allowed science fiction movies to address the most pressing social and philosophical issues of contemporary times. For example, produced during the 1920s in a politically divided Germany, Fritz Lang’s Metropolis (1927) focused on the Marxist struggle of workers in a capitalist society. James Whale’s Frankenstein (1931) and Bride of Frankenstein (1935) explored both the hubris of the male scientist described in Mary Shelley’s novel Frankenstein, or the Modern Prometheus (1818) as well as the repressive sexuality of Western culture. Robert Wise’s The Day the Earth Stood Still (1951) advocated for a liberal belief in the collective submission to a technocratic elite.&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Cabal is god-like in his determination to master the universe.&lt;/cell&gt;
        &lt;cell&gt;The entire universe lies before man for the taking. “All the universe or nothing!”&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Of course, faith in the image has oftentimes resulted in science fiction movies that have reveled in the sensuousness of the image and hence in the excitement of a visual adventure, especially with the technological advancement of special effects and the introduction of digital production. Where, for example, the innovative images and musical sounds of Stanley Kubrick’s 2001: A Space Odyssey (1968) coincided with the film’s philosophical investigation of human evolution, Steven Spielberg’s Close Encounters of the Third Kind (1977) created a pleasurable sense of wonder through light and sound that underscored the film’s childlike nostalgia for a simpler time. The science fiction adventures of the 1930s Flash Gordon and Buck Rogers serials found a visually enhanced equivalent in George Lucas’ THX 1138 (1971) and his later space opera adventures beginning with Star Wars: A New Hope (1977) and continuing through The Force Awakens (2015), Rogue One (2016) and The Last Jedi (2017).&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell&gt;Star Trek on TV. With the rise of U.S. capitalism following World War II, the 1960s TV series Star Trek introduced audiences to a U.S.-commanded starship, announcing each week that space is the “final frontier” and that the starship’s crew will “boldly go where no man has gone before.“&lt;/cell&gt;
        &lt;cell&gt;Star Trek Enterprise: Screenwriter Gene Roddenberry’s starship USS Enterprise replaces Wells’ rocket. Updated to reflect improved technology and new social norms, the USS Enterprise continues in movies and on television to “explore strange new worlds” and “seek out new life and new civilizations.“&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;The contemporary resurgence of science fiction movies arguably exceeds the 1950s, the classical period in the United States for disaster-focused, science fiction movies. These contemporary movies often dramatize, through the frequent depiction of an increasingly global and technologically remote cultural environment, a collective unease with and fear of metaphysical concerns. While science fiction franchises such as X-Men and Planet of the Apes serve as both explicit fantasy adventures and implicit political commentary, movies such as Interstellar (2014). Arrival (2016) and Midnight Special (2016) are speculative essays on highly philosophical, cultural concerns. That many movies, such as AutÃ³mata (2014), Ex Machina (2014), Chappie (2015), Marjorie Prime (2017) and Blade Runner 2049 (2017), focus on artificial intelligence highlights how human identity is itself at issue.&lt;/p&gt;
    &lt;p&gt;Paradoxically, the digital technology that has enhanced the special effects of science fiction movies is also the source of this anxiety. The global shift from analogue to digital and the resulting wholesale reduction of content to zeros and ones was reflected in the commercially successful The Matrix (1999) as well as its predecessors, Ghost in the Shell (1995) and Dark City (1998). This shift has meant that there is no longer an inherent meaning to content. Instead, pixels in this “post-humanist” cinema[3] reproduce, rather than document, the reality that Bazin had favored. Moreover, in the context of a digital environment, it means that human intelligence and behavior are increasingly understood as a pattern of mathematical formulasâor probabilities known as algorithms. Enter AI. The contemporary insistence upon quantitative analysis has resulted in an increased blurring of the line between the organic and the inorganic and between the individual and the collective. Science fiction movies increasingly reflect our unease as a result of such blurring. Of course, that blurring benefits the owners of a capitalist system by reducing workers to programmable, efficient, reproducible units so as to exercise control and maximize profit. Mary Shelley’s cautionary story of Dr. Frankenstein’s hubris and the disappearance of a sublime nature finds its technological analogue in the politics of AI.&lt;/p&gt;
    &lt;p&gt;The Alien franchise demonstrates the development of this anxiety about historic changes in Western culture and capitalism, in particular. Beginning in 1979 with Alien and coinciding in the US with the end of liberalism and the rise of Reaganism with its advocacy of a “free market” economy, the franchise initially attracted attention as a result of the unusual mix of horror and science fiction, such as the celebrated chest-bursting scene, as well as the central role played by the then unknown actor Sigourney Weaver as the film’s hero Ripley. With Aliens (1986), Alien3 (1992), and Alien: Resurrection (1997), critical attention increasingly focused on feminist interpretations of this franchise. Academic studies, for example, viewed the chest-bursting scene in Alien as a commentary upon birthing and Ripley’s protective caring for the child Newt (Carrie Henn) in Aliens as a reenactment of the myth of maternal nurturing.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Ash, the ship’s science officer, interminably “collates” data.&lt;/cell&gt;
        &lt;cell&gt;The ship’s computer, “mother,” discloses to Ripley that the crew is expendable in order to bring the alien back to Earth. Like the alien, Ash unexpectedly appears next to Ripley.Â Â&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Ash unsuccessfully tries to kill Ripley through a violent parody of fellatio, revealing that he’s an android.&lt;/cell&gt;
        &lt;cell&gt;AI separates mind and body. Ash’s mind takes joy in the alien as a “perfect organismâunclouded by conscience, remorse, or delusions of morality” and in the inevitable death of the entire crew.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Of course, too, the writers and directors responsible for these episodes in the franchise played a central role in the development of its mythology. Thus, the feminism of Aliens, with its seeming advocacy of the empowerment of women, is inseparable from U.S. director James Cameron, who had just directed Terminator (1984) and who depicted Ripley in Aliens as an enraged mother who fights and succeeds in killing the equally combative alien queen during the climatic, last scene. Likewise, the reconciliation during the last scene in Alien: Resurrection of Ripley, now a clone of human and alien DNA, and Annalee Call (Winona Ryder), an android, is surely the result of the temperament of its French director Jean-Pierre Jeunet. Following Alien: Resurrection he next directed the whimsical fantasy AmÃ©lie (2001).&lt;/p&gt;
    &lt;p&gt;Throughout these films artificial intelligence has played a role. The villain in Alien is the science officer Ash (English actor Ian Holm) who overrides the quarantine protocol by allowing on board the alien, studies without emotion this “perfect organism,” and is revealed midway through the film to be an android. The ship’s computer, which is nicknamed “mother” and is modeled after HAL in 2001: A Space Odyssey (1968), is also a villain in its blindly carrying out the wishes of its programmer, the Weyland Corporation. Not surprisingly, Ripley, the film’s hero, eventually incinerates “mother” with a flamethrower when “mother” â “Bitch!” â refuses to turn off the ship’s self-destruct mechanism.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Images from the film Aliens (1986)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Aliens (1986) introduces its android, Bishop, as another member of the crew who joins in the crew’s first meal together.&lt;/cell&gt;
        &lt;cell&gt;Bishop’s skills include a knife game in which Bishop threatens to castrate another crewmember’s finger.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;The white ooze from a cut on Ash’s finger reveals to Ripley’s horror that Ash is an android.&lt;/cell&gt;
        &lt;cell&gt;In contrast to the cowardice of several marine crewmembers, Bishop offers to retrieve a landing craft at considerable risk. “I may be synthetic, but I’m not stupid,” he tells Ripley.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Bishop rescues Ripley, the young girl Newt, and the remaining marine (and traditional love interest), Corporal Hicks.&lt;/cell&gt;
        &lt;cell&gt;Safely back on their ship, Bishop is united with his family.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;In contrast, in Aliens Bishop (U.S. actor Lance Henriksen), whom the crew knows from the outset is an android, unexpectedly turns out to be good, risking his “life” to retrieve the marine dropship and later saving Newt as well as helping Ripley defeat the alien queen. While Bishop, as an android, returns briefly in Alien3 to help Ripley (and then asks that Ripley disconnect or “kill” him), Bishop also appears during the film’s final scene as the android’s human creator who unsuccessfully tries to persuade Ripley not to kill the alien growing within her. Thus, the film openly reverses our expectation, shifting our sympathy from human to android.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;The alien queen has snuck onto the ship and impales Bishop.&lt;/cell&gt;
        &lt;cell&gt;In a celebrated shot, Ripley suited in a mechanical body confronts the alien queen. “Bitch!”&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Ripley defeats the alien queen. The family is reunited.&lt;/cell&gt;
        &lt;cell&gt;The heroic Bishop returns home in a pod next to Hicks, the traditional male hero.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"/&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Alien 3 (1992) briefly reintroduces Bishop as a severed head. Bishop tells Ripley that an alien was on their ship while they were in hypersleep. At Bishop’s request, Ripley unplugs Bishop.&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;Ripley meets Bishop, the human creator of the android Bishop. “Trust me,” he tells Ripley. Fortunately, she doesn’t.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Alien: Resurrection reinforces that shift. Once again, we learn midway through the film that mercenary crewmember Call is, in fact, an advanced android (created by an earlier generation of androids). As Ripley observes, “I should have known. No human being is that humane.”&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Call finds Ripley, a clone that is part alien, part human. They bond.&lt;/cell&gt;
        &lt;cell&gt;Call continues to pose as a human, trying with the rest of the crew to escape the aliens.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;The military scientist Wren shoots the unsuspecting Call.Â&lt;/cell&gt;
        &lt;cell&gt;Call falls into the pool below.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Call doesn’t die. Instead, she reappears and reveals that she’s an android.&lt;/cell&gt;
        &lt;cell&gt;She amazes everyone by also disclosing that she’s a second-generation android, i.e. designed by androids.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Reluctantly but in order to stop Wren from reaching the mercenary ship, Call plugs into the military ship’s mainframe computer, “father.” “Father’s dead, ass hole,” she soon announces to Wren.&lt;/cell&gt;
        &lt;cell&gt;Call and Ripley continue to bond.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Displaying empathy for humans, seeking to prevent the aliens from reaching Earth and reprogramming the ship’s computer from “father,” which the military scientists control, to “mother” (“father’s dead, ass hole”), Call represents the franchise’s most optimistic view of AI. Successful in defeating the aliens and their human benefactors, Call and Ripley descend and gaze upon the Earth’s beautiful, verdant landscape and openly ponder what comes next.[4]&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Call: What happens now?&lt;/p&gt;&lt;lb/&gt;Ripley: I don't know. I'm a stranger here myself.&lt;/quote&gt;
    &lt;p&gt;It is the Weyland-Yutani Corporation, and by extension the military, which threatens humanity in these films. The franchise increasingly views AI as “more human than humans.”[5]&lt;/p&gt;
    &lt;p&gt;Years later, with Prometheus (2012), and Alien: Covenant (2017), the franchise returned to the direction of Alien’s Ridley Scott. While these films are ostensibly prequels in terms of their narratives, they sharply differ from the earlier films in their focus upon and view of AI. This shift is apparent in the promotional video for Prometheus titled “Peter Weyland at TED2023: I Will Change the World” (2012).[6] Conceived, in part, by Ridley Scott and directed by his son, Luke Scott, this 7-minute video shows a young Peter Weyland (the UK born, Australian actor Guy Pearce[7]) strutting upon a stage surrounded by thousands of admirers and articulating his apocalyptic vision of the future. If Prometheus stole from the gods and brought fire to humans, then the history of humankind, according to Weyland, consists of the ever-faster development of other “pieces of technology.” Moreover, his political vision is wholly consistent with our contemporary digital and global worldâan entrepreneurial, free market environment, which is currently centered in Silicon Valley and in which everything is possible and nothing forbidden. Strutting on a vast stage like a well-dressed Mark Zuckerberg or other leader of technology and advocating the continued creation of “cybernetic individuals” indistinguishable from humans but that many have criticized as “unnatural,” Weyland announces with pride: &lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“We are the gods nowâ¦We wield incredible powerâ¦. Rules, restrictions, laws, ethical guidelines, all but forbidding us from moving forwardsâ¦. These rules exist because the people who created them were afraid of what would happen if they didn’t. Well, I am not afraid. For those of you who know me, you will be aware by now that my ambition is unlimitedâ¦. My name is Peter Weyland. And if you’ll indulge me, I’d like to change the world.”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Human uniqueness, organic limitations and Kantian laws are simply irrelevant in Weyland’s envisioned “new age” era. Instead, Weyland evokes the same male hubris that had motivated the fictional Dr. Frankenstein to create his monster. Mary Shelley, however, in her novel Frankenstein, or the Modern Prometheus had criticized such imperialistic hubris and instead affirmed a Romantic belief in the sublime of the natural world and its limitations. Likewise, director James Whale in his classic Hollywood films, Frankenstein and Bride of Frankenstein, had criticized male hubris by depicting the “monster” as sympathetic, notwithstanding endings in which the “monster” is destroyed. In contrast, the latest two episodes in the Alien franchise position Dr. Frankenstein and his monster as mutually evil and utterly without redemption. The AI mythology of capitalism is itself the source of the horror.&lt;/p&gt;
    &lt;p&gt;Scott’s prequels continue to focus upon the empowerment of women. Thus, archaeologist Elizabeth Shaw (Noomi Rapace) and crewmember Janet Daniels (Katherine Waterston) are the central human characters in these films, Prometheus and Alien: Covenant, respectively. Nevertheless, both films also focus upon AI in the form of a male android, David (Michael Fassbender). Moreover, both mix horror with science fiction in expressing the contemporary fear of annihilation of the human species through capitalism’s new mythology of a secular religionâthe science of artificial intelligence and its belief in the coming “singularity.” It’s a horror that dates at least as far back as W. B. Yeats’ “The Second Coming” (1919) in which Yeats, following the industrial age’s “war to end all wars,” had envisioned how “[t]hings fall apart; the centre cannot hold” and asks, “What rough beast, its hour come round at last, [s]louches towards Bethlehem to be born?”&lt;/p&gt;
    &lt;p&gt;Set mostly within a vast artificial structure that resembles a dark, Plato-like cave with seemingly endless corridors, the first prequel, Prometheus, articulates that fear through the actions of its seemingly secondary character, the android David. Â While loyally serving a dying Peter Weyland, David nearly succeeds in killing the central, human protagonist, Elizabeth Shaw. Bettering even Ripley, however, who in Alien 3 threw herself into a fire rather than give birth to an unwanted alien fetus, Shaw triumphs by removing from her wombâwith a female-voiced medical pod machine that she recalibrates given its design for male patients onlyâthe alien fetus that David has caused to be implanted within her. She also later chooses to rescue David in order that she might continue in her quest to understand the “why” of her creators’ near annihilation of the human species. Like a future explorer setting off to find a “new world,” Shaw in the film’s final scene triumphantly embarks upon her continued exploration of space in order to find her makers’ home planet. While David questions her for not simply returning to earth, Shaw boasts how her desire to know the “why” makes her human in contrast to David, a mere robot. Indeed, as Shaw asserts that she deserves to know the “why,” the film’s music evokes the stirring call to exploration of such space adventures as Star Trek, the television series and movie franchise, and, like Captain Kirk’s “final log entry” to Star Trek, the film concludes with Shaw’s “final report” in which she identifies herself as the “last survivor” and records for posterity that she’s “still searching.”Â&lt;/p&gt;
    &lt;p&gt;Ironically, however, Shaw’s spirit of adventure is reflective of the male hubris that Mary Shelley had criticized in her novel. The incessant need to explore and satisfy one’s curiosity readily becomes for Shelley synonymous with male, imperialistic ambitions.[8]&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“[I]f no man allowed any pursuit whatsoever to interfere with the tranquility of his domestic affections, Greece had not been enslaved, Caesar would have spared his country; America would have been discovered more gradually; and the empires of Mexico and Peru had not been destroyed.”[9]&lt;/p&gt;
    &lt;/quote&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;While in hypersleep on the exploratory ship Prometheus, Shaw dreams of her father, an archaeologist and explorer after whom she models herself.&lt;/cell&gt;
        &lt;cell&gt;Her father chooses to believe in the paradise of a beautiful afterlife and hands a cross to his daughter.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Shaw, too, becomes a person of faith, wearing her father’s cross.&lt;/cell&gt;
        &lt;cell&gt;David, an android on the Prometheus, removes her cross. He falsely tells her that the cross may be contaminated.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Likewise, if implicitly, Prometheus’ ending in which the human spirit is triumphant is undercut by the film’s underlying, bleak emotional trajectory. If, for example, the film seemingly vindicates Shaw’s heroism through her continued religious faithâsymbolized by the cross which she initially receives from her father and which she later retrieves from David as she’s about to embark upon her questâit also questions the source of her faith. Shaw only retrieves that cross when David persuades her that he can help her to leave the planet so as to satisfy her scientific curiosity. Moreover, Shaw’s decision to rescue David so as to enlist him as her pilot for her continued quest is placed in context by, in hindsight, how casually she learns, and then overlooks, that David knowingly caused the death of her supposed lover and fellow archeologist, Charlie Holloway (Logan Marshall-Green). In persuading Shaw to trust him, David’s comment to Shaw on how they’ve had their “differences” is a humorous understatement given how he has consistently sabotaged the mission.&lt;/p&gt;
    &lt;p&gt;Shaw is a feminist whose obsessiveness equals the male of the human species, including Holloway, who brags that he’d do “everything and anything” in his scientific quest for answers, and David, the male artificial equivalent. Thus, Weyland introduces Shaw along with Holloway as representative of the return of Prometheus who will “give mankind equal footing with the gods” and chooses Shaw, in particular, for the mission because she is a “true believer,” an ambiguous reference to both her religious and scientific faiths.Â Â Shaw is, in fact, identified with David throughout the film. Her scientific quest for knowledge and her obsessive curiosity align her with David, who obsessivelyâeven as he feigns interest in advancing the project of his “father,” Weylandâexperiments in order to know the “why” of the black liquid from which the titular aliens evolve. Like David who, observing the deaths of the humanoid aliens in recorded holographs, dismissively concludes, “Mortal after all,” Shaw identifies them as “engineers,” underscoring their secular role, in her view, as the builders of machines, in this case the human species. In her quest to know the “why,” Shaw evidences the same hubris that impels the film’s “mad scientist,” Weyland, to create his “son” David as well as seek his own, god-like immortality.&lt;/p&gt;
    &lt;p&gt;Violent evolution, not religious faith, is at the film’s center. The opening scene in its violence parodies Darwin’s science of evolution, as we watch how humans evolved thousands of years ago from the engineers, and near the end of the film the only surviving engineer evolves violently from the alien to which the infertile Shaw had given birthâironically from the engineers’ own black liquid. There’s violence, too, in the human evolutionary process from one generation to the next. While Shaw chooses to wear Holloway’s ring following his violent death, her later placement of her father’s cross around her neck emotionally resonates far more. Shaw is suffocatingly too close, however, to her dead, archaeologist father, and consequently remains emotionally distant from her supposed lover and fellow scientist Holloway. In contrast, Weyland’s daughter, Meredith Vickers (Charlize Theron), openly hates her father for his refusal to die. “A king has his reign and then he dies. It’s inevitable,” she coldly tells him. It’s the natural order of things. He ignores her, and instead goes off with his “son” David as a guide to meet his maker. While Vickers will engage in a sexual encounter with Janek (Idris Elba), the captain of the Prometheus, she consents only to “prove” that she’s not a robot. She, too, is stunted in her growth. Â&lt;/p&gt;
    &lt;p&gt;“As flies to wanton boys are we to th' gods. They kill us for their sport,” Gloucester famously observed in King Lear, a tale about another father who also refused to go quietly into the night and is then driven mad by his daughters.[10] Prometheus likewise narrates a story of fathers and daughters, with Shaw playing Cordelia to Vickers’ Goneril. These are secular characters trapped within a wholly materialist world that doesn’tâand cannotâdistinguish between good and evil or beauty and ugliness. “How do you know [paradise is] beautiful?” the young Shaw asks her father in her dream that David watches. “Cause that's what I choose to believe,” he answers. The human species possesses the possibility of a will to believe in beauty but too often is obsessed with finding scientific certainty. In contrast, its digital creations, such as David, resulting from the science of enlightenment, are inherently valueless, zeros and ones, and hence not capable of distinguishing between valuesâor, for that matter, perceiving any qualitative difference between human and artificial intelligence. If, as Weyland observes, David, who will never grow old and die, has no soul with which to appreciate his “gifts,” Prometheus suggests that the same may sadly also be true of humans. Evoking the classical, musical strains that informed the stasis of civilization’s advanced technology in Stanley Kubrick’s 2001, Prometheus ends as it began with FrÃ©dÃ©ric Chopin’s “Prelude for Piano No. 15 in D Flat Major” (1838). Civilization is no guarantor of understanding or sublimity.&lt;/p&gt;
    &lt;p&gt;Like “Peter Weyland at TED2023” (2012) that had preceded Prometheus, the short promotional video “Alien: Covenant | Prologue: The Crossing” (2017) preceded Alien: Covenant.[11] This 2Â½ -minute video that Ridley Scott directed focuses not upon Shaw or any of the other human characters but instead upon David, who narrates:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“After we made contact with the engineers, the Prometheus was destroyedâ¦. But I escaped with Elizabeth on one of their ships. I was badly injured on our mission. She put me back together. I never experienced such compassionâcertainly not from Mr. Weyland or from any humanâ¦We were finally going to meet our creator.”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Our expectation is that Shaw and David will together meet their creator. Yet after placing Shaw in a hypersleep pod, David ends his narration as he arrives alone at the engineers’ planet. He quotes briefly from the sonnet “Ozymandias” (1818) by Percy Shelley, the Romantic poet and husband of Mary Shelley. “Look on my works and despair,” David intones. There’s dissonance between David’s empathetic view of Elizabeth and his cold, portentous voice quoting from Shelly’s sonnet as he looks condescendingly down upon the engineers’ planet. Percy Shelley’s sonnet conjures up the “colossal Wreck” of the statue of the Egyptian pharaoh Ramesses II with its “two vast and trunkless legs of stone.” It speaks, like Mary Shelley’s Frankenstein, to the transience of both human life and art as well as the inevitable failure of male hubris. Alien: Covenant examines that hubris in the context of the supposedly evolutionary development of the human species in the form its now central protagonist and AI progeny, David.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.ejumpcut.org/archive/jc58.2018/AlpertAlienPrequels/index.html"/><published>2025-10-12T17:23:41+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45560036</id><title>We will no longer be actively supporting KuzuDB</title><updated>2025-10-12T21:08:11.029307+00:00</updated><content>&lt;doc fingerprint="6047e4b2987f7b71"&gt;
  &lt;main&gt;
    &lt;p&gt;We're sorry but Kuzu - Embedded, scalable, blazing fast graph database doesn't work properly without JavaScript enabled. Please enable it to continue.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://kuzudb.com"/><published>2025-10-12T17:30:48+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45560890</id><title>Rcyl – a recycled plastic urban bike</title><updated>2025-10-12T21:08:08.316748+00:00</updated><content>&lt;doc fingerprint="2ef15a31457259c0"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;To provide the best experiences, we use technologies like cookies to store and/or access device information. Consenting to these technologies will allow us to process data such as browsing behavior or unique IDs on this site. Not consenting or withdrawing consent, may adversely affect certain features and functions.&lt;/p&gt;
      &lt;div&gt;
        &lt;div&gt;
          &lt;p&gt; The technical storage or access is strictly necessary for the legitimate purpose of enabling the use of a specific service explicitly requested by the subscriber or user, or for the sole purpose of carrying out the transmission of a communication over an electronic communications network. &lt;/p&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;p&gt; The technical storage or access is necessary for the legitimate purpose of storing preferences that are not requested by the subscriber or user. &lt;/p&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;p&gt; The technical storage or access that is used exclusively for statistical purposes. The technical storage or access that is used exclusively for anonymous statistical purposes. Without a subpoena, voluntary compliance on the part of your Internet Service Provider, or additional records from a third party, information stored or retrieved for this purpose alone cannot usually be used to identify you. &lt;/p&gt;
        &lt;/div&gt;
        &lt;div&gt;
          &lt;p&gt; The technical storage or access is required to create user profiles to send advertising, or to track the user on a website or across several websites for similar marketing purposes. &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://rcyl.bike/en/the-bike/"/><published>2025-10-12T19:11:47+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45560974</id><title>Completing a BASIC language interpreter in 2025</title><updated>2025-10-12T21:08:07.843697+00:00</updated><content>&lt;doc fingerprint="9f546b59621a2dd4"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;head rend="h1"&gt;Completing a BASIC language interpreter in 2025&lt;/head&gt;
        &lt;div&gt;&lt;p&gt; This is a follow-up to my previous article &lt;/p&gt;Developing a BASIC language in 2025&lt;p&gt;, where I describe how I got inspired to start coding a new BASIC interpreter for the 1983 Mattel ECS add-on for Intellivision. &lt;/p&gt;&lt;/div&gt;
        &lt;p&gt; Although my interpreter was already pretty fast and with enough statements to build games, I wasn't satisfied because it still missed one thing that the ECS BASIC implements: text strings. Only two, A$ and B$, with GET and PUT, for things like getting a name from the keyboard or showing a name. &lt;/p&gt;
        &lt;p&gt; I thought about strings for four days, then I decided to code things like I know what I was doing. I added a string stack pointer bas_strptr where any created string is added. &lt;/p&gt;
        &lt;p&gt; The first thing to implement was an array for the string variables (A$-Z$) each one pointing to the current string contained (or zero if none). I modified the whole of the expression parser to insert the type in the Carry flag (Clear = it is a number, Set = it is a string), then I made the first string support in the language where it detects if a string name appears (letter plus the $ sign) and reads it and copies it to a new string on the stack, returning this pointer as expression value (and of course the carry flag set) &lt;/p&gt;
        &lt;p&gt; The next step was assigning string variables, it simply took the pointer and stored it into the respective string variable pointer. Of course, I was afraid that I was creating a monster because I wasn't planning for the garbage collector. &lt;/p&gt;
        &lt;p&gt; Then I went full-steam ahead and put support in INPUT, PRINT, and added the concatenation of strings using the plus operator, also the functions ASC, CHR$, LEN, LEFT$, RIGHT$, MID$, INSTR, VAL, and STR$. &lt;/p&gt;
        &lt;p&gt; Now I had string support in my BASIC language for the ECS, but at some point in the execution it would fill up the stack, and crash with an "Out of Memory" error. &lt;/p&gt;
        &lt;head rend="h2"&gt;Garbage collection&lt;/head&gt;
        &lt;p&gt; It was kind of crazy having a BASIC with string support but no garbage collection. I needed a way to copy strings into arrays, and delete the work-in-progress strings created as expressions are evaluated. &lt;/p&gt;
        &lt;p&gt; It would be easy when having a C memory management system as you only have to replace the pointer, and free the original. But any memory management comes with headers and linked lists, extra memory requirements, and slowness. Given the Intellivision CP1610 processor is already slow enough (894 khz), I decided against it. &lt;/p&gt;
        &lt;p&gt; However, I noticed that temporary strings are only created inside the expression parser. So what about a double stack? One stack for strings in variables, and one stack for temporary strings. &lt;/p&gt;
        &lt;p&gt; I added a secondary pointer bas_strbase (I like how it sounds like star base) &lt;/p&gt;
        &lt;p&gt; At the start of each statement, bas_strbase is copied to bas_strptr (thus effectively erasing the temporary strings) A problem needed to be solved: growing bas_strbase on each string assignment. &lt;/p&gt;
        &lt;p&gt; I was going to implement the most simple solution: go over the 26 string variables doing comparison and movement of pointers, and insert the new string in its place. &lt;/p&gt;
        &lt;p&gt; Just as I was coding this, I noticed I had an easier solution. As I was working with 16-bit words, not all values are used. I could use a value like 0xcafe to mark a non-used space, and boom! I had an idea. &lt;/p&gt;
        &lt;p&gt; When doing the assignment, delete the original string (fill it with 0xcafe words), now explore the strbase area to find a string of 0xcafe words big enough to save the new string. &lt;/p&gt;
        &lt;p&gt; The better part is when there is no space for the string, I simply copy the string pointer as the new bas_strbase pointer (effectively growing the base memory area), and all words between the end of the string and the previous bas_strbase pointer (ahead in memory) are filled with 0xcafe words. &lt;/p&gt;
        &lt;p&gt; Full string support with garbage collection at very small price of performance. Exactly what a CP1610 processor needs. &lt;/p&gt;
        &lt;quote&gt; STRING_TRASH: EQU $CAFE ; ; String assign. ; R1 = Pointer to string variable. ; R3 = New string. ; string_assign: PROC PSHR R5 MVII #STRING_TRASH,R4 ; ; Erase the used space of the stack. ; MOVR R3,R2 MVI@ R2,R0 INCR R2 ADDR R0,R2 MVI bas_strbase,R0 CMPR R0,R2 BC @@3 @@4: MVO@ R4,R2 INCR R2 CMPR R0,R2 BNC @@4 @@3: ; ; Erase the old string. ; MVI@ R1,R2 TSTR R2 BEQ @@1 MVI@ R2,R0 MVO@ R4,R2 INCR R2 TSTR R0 BEQ @@1 @@2: MVO@ R4,R2 INCR R2 DECR R0 BNE @@2 ; ; Search for space at higher-addresses. ; @@1: MVII #start_strings-1,R2 CMP bas_strbase,R2 ; All examined? BNC @@6 ; Yes, jump. @@5: CMP@ R2,R4 ; Space found? BNE @@7 ; No, keep searching. CLRR R5 @@8: INCR R5 DECR R2 CMP bas_strbase,R2 BNC @@9 CMP@ R2,R4 BEQ @@8 @@9: INCR R2 MVI@ R3,R0 INCR R0 CMPR R0,R5 ; The string fits? BNC @@7 ; ; The string fits in previous space. ; MOVR R3,R4 MOVR R2,R5 MVO@ R2,R1 ; New address. @@10: MVI@ R4,R2 MVO@ R2,R5 DECR R0 BNE @@10 PULR PC @@7: DECR R2 CMP bas_strbase,R2 BC @@5 ; ; No space available. ; @@6: MVO R3,bas_strbase ; Grow space for string variables. MVO@ R3,R1 PULR PC ENDP &lt;/quote&gt;
        &lt;div&gt;
          &lt;p&gt; Example of a parser for a text adventure game using string functions. &lt;/p&gt;
        &lt;/div&gt;
        &lt;head rend="h2"&gt;Going mathematic&lt;/head&gt;
        &lt;p&gt; Since my floating-library was complete with the four operations, I had an ace under the sleeve: I already had tested sin and cos functions with it, but for some reason these had a bug. For sin(1Â°) the resulting value was 0.0172. &lt;/p&gt;
        &lt;div&gt;&lt;p&gt; These functions were ported from my &lt;/p&gt;Pascal compiler for transputer&lt;p&gt;. As Pascal happens to have exactly the same mathematical function set as a BASIC interpreter. &lt;/p&gt;&lt;/div&gt;
        &lt;p&gt; After a whole day examining the operation instruction-by-instruction (the jzintv debugger shines here), I discovered that I did a comparison in the wrong way and corrected it. &lt;/p&gt;
        &lt;p&gt; I was so happy that I went immediately to port the remaining mathematical functions (ATN, TAN, LOG, EXP, and derived SQR and the power-of ^ operator). There were no pitfalls along the way, except one, my BASIC has a mantissa with one extra bit of precision, and EXP(LOG(64)) returned 63.999999 &lt;/p&gt;
        &lt;p&gt; Both operations do a multiplication with a constant (log does it at the end, and exp in the start). I noticed that the value was misrounded for 25 bits of mantissa, so I calculated a better constant, and et voila! EXP(LOG(64)) returned 64. &lt;/p&gt;
        &lt;head rend="h2"&gt;Making it easier for the user&lt;/head&gt;
        &lt;p&gt; A lot of BASIC interpreters in the eighties didn't supported instructions for graphics. The Commodore 64 was particularly known for requiring POKE for almost anything, unless you had the somewhat expensive Simon BASIC cartridge. &lt;/p&gt;
        &lt;p&gt; However, in the Intellivision you have few graphics capabilities. In the Color Stack mode you have something called Colored Squares. This means each tile on the screen (20x12) can have four colors. This means a bloxel resolution of 40x24, and each one can have one of eight colors (one being the background). &lt;/p&gt;
        &lt;p&gt; I implemented PLOT with these limitations, and also added PRINT AT (for putting text at any screen position), and TIMER to measure time. &lt;/p&gt;
        &lt;p&gt; One of the most difficult things was implementing the floating-point number parsing. I finally decided to approach it like parsing an integer, taking note of the number of digits parsed, and take note of the position of a period. Once it reaches the biggest number it can represent (9,999,999) then it starts ignoring any further digit (but it keeps counting them) &lt;/p&gt;
        &lt;p&gt; The final calculation step is to multiply it, or divide it taking in account the period position. Also taking in account any exponent present (for example, e+1 or e-3) &lt;/p&gt;
        &lt;p&gt; It wasn't so expensive in computation time. I added along a FRE(0) function to know how much space remains for writing programs. &lt;/p&gt;
      &lt;/div&gt;
      &lt;head rend="h2"&gt;It is the eighties&lt;/head&gt;
      &lt;p&gt; Let's suppose we are working to make this BASIC interpreter really useful for the Mattel ECS. We still need two things: cassette, and printer. &lt;/p&gt;
      &lt;p&gt; Fortunately, a lot of people at Atariage Forums have worked along the years to decipher the ECS hardware (thanks to intvnut, lathe26, and decle) &lt;/p&gt;
      &lt;p&gt; The ECS contains the hardware to interface to a cassette recorder/player at 300 bauds with FSK (Frequency-Shift Keying) of 2400/4800 hz (technically this is a modem) and it also includes a UART (Universal Asynchronous Receiver/Transmitter) patterned losely after a Motorola MC6850, but the frequency selector is separated, allowing to turn on/off a relay (cassette remote control), and to switch between two ports (the cassete and the AUX port for the printer) &lt;/p&gt;
      &lt;p&gt; Now for the cassette, I was going to use 300 bauds, this means around 30 characters per second. Do you remember your 56K modem? It was 186 times faster! I needed to optimize my BASIC as I was using token numbers above $0100, so I moved them to the area $0080-$00ff. Now all the words are only used in the lower 8 bits, and the tokenized program can be saved as bytes. &lt;/p&gt;
      &lt;div&gt;&lt;p&gt; I coded the cassette routines based on code published by decle in his article &lt;/p&gt;ECS Text Editor written in IntyBASIC with tape support&lt;p&gt; and added LOAD, SAVE, and VERIFY. &lt;/p&gt;&lt;/div&gt;
      &lt;p&gt; I was very happy when these cassette routines worked in emulation, and I ordered cables from Amazon for trying to record and play in my cellphone. &lt;/p&gt;
      &lt;p&gt; For some reason probably related to audio levels and automatic compression, I could record audio from the ECS in my cellphone, but playing it back never resulted in anything. &lt;/p&gt;
      &lt;p&gt; I was tired, and I decided to try my PC. I connected the ECS to the Mic In, and Line Out, and same problem. Besides the Windows utilities make amazingly hard to change the source and playing line. I got the Audacity program, and it has the line input/output options easily selectable. Again no results. &lt;/p&gt;
      &lt;p&gt; I wrote a small program to read the UART continuously, and I couldn't see anything. I decided to try the Audacity's amplify effect, and et voila! My UART program started throwing decoded bytes. I stopped the program, and I tried the VERIFY command (remember I had just saved the same program), but it didn't worked. Worst, when I ran again my test program, I didn't got any data! &lt;/p&gt;
      &lt;p&gt; I revised my setup values for the UART, but nothing. I was mystified for some hours until I got memories of a chip that basically went nuts if you accessed it too fast. Could it be that? Is the CP1610 so fast? I added a delay after every access to the UART chip. &lt;/p&gt;
      &lt;p&gt; I typed again my test program, I did SAVE, recorded on the PC, amplified it, I RUN my program, and played the audio back. Ok, UART was reading things. Now I stopped the test program, I did VERIFY, and I played the audio back from my PC. The longest 20 seconds of my life. And it worked! &lt;/p&gt;
      &lt;p&gt; Immediately I resetted the ECS, losing the program, and I did LOAD (of course, playing back the audio), and again it worked! &lt;/p&gt;
      &lt;div&gt;
        &lt;p&gt; My UART test program after a successful LOAD statement. &lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt;Notice that although it saves BASIC programs, these programs aren't compatible with the original ECS BASIC because it is a completely different BASIC language.&lt;/p&gt;
      &lt;div&gt;&lt;p&gt; Break time: As I couldn't lose programs anymore, I decided to test my BASIC language with a "real" long program. So I took Tim Hartnell's Giant Book of Computer Games (Mexican edition), and I typed the Reversi game. I had to adapt it, because my BASIC doesn't allow for multidimensional arrays, and the screen positioning. I found a few bugs in my interpreter (&lt;/p&gt;INPUT W$&lt;p&gt; still wasn't written with the garbage-collector support, and the variables weren't deleted properly on &lt;/p&gt;RUN&lt;p&gt;), but it was amazing to watch the Reversi game playing against me. I've put a WAV file recording h&lt;/p&gt;here&lt;p&gt;. &lt;/p&gt;&lt;/div&gt;
      &lt;div&gt;
        &lt;p&gt; Reversi game from the Tim Hartnell's Giant Book of Computer Games book working with my BASIC interpreter for the Mattel ECS. &lt;/p&gt;
      &lt;/div&gt;
      &lt;head rend="h2"&gt;The printer is in the room&lt;/head&gt;
      &lt;div&gt;&lt;p&gt; After reading &lt;/p&gt;Aquarius Printer Technical Info and Reverse Engineering&lt;p&gt; and the &lt;/p&gt;jzintv ECS document&lt;p&gt;, I decided using the printer was very easy, and I went to buy a Mattel Aquarius sourced locally because it included the printer and some thermal paper. &lt;/p&gt;&lt;/div&gt;
      &lt;p&gt; While the printer was in shipping process, I implemented LLIST, and LPRINT. I modified the core of both statements to access the output through an indirect function. So you only change the pointer to target the screen or the printer. I detected here a bug in jzintv that prevents it from outputting the printer data to a file. &lt;/p&gt;
      &lt;p&gt; I got a Mattel Aquarius along the printer a few days later. I had to clean it because it was pretty dusty. The printer doesn't have the top cover that protected the paper roll, but it included a paper roll, and fortunately it still had the cylinder that helps the papel to roll. &lt;/p&gt;
      &lt;div&gt;
        &lt;p&gt; Mattel Aquarius computer with expansion board, two games, cables, and the Aquarius printer. &lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; I adjusted the paper, powered on the printer, and verified I could advance the paper (having a working motor is 90% of the printer). &lt;/p&gt;
      &lt;p&gt; I built the cable with the instructions from lathe26's article, and the first time it didn't worked (I grounded the CTS cable accidentally), but after correcting it, I expected trash for my first print, instead, I got a pretty nice printing! &lt;/p&gt;
      &lt;p&gt; Of course, I couldn't resist printing some listings, and a sine wave. &lt;/p&gt;
      &lt;div&gt;
        &lt;p&gt; The printed source of my UFO game. The paper roll is really old. &lt;/p&gt;
      &lt;/div&gt;
      &lt;head rend="h2"&gt;What remains to do?&lt;/head&gt;
      &lt;p&gt; I added the DRAW and CIRCLE statements, and POINT functions to complete the graphics support. These are enough to make some nice games without using sprites. I made a graphics demo for filling the screen with lines, and I noticed my pseudo random number generator didn't covered the screen, so I had to improve it. &lt;/p&gt;
      &lt;div&gt;
        &lt;p&gt; DRAW program for my ECS BASIC interpreter. &lt;/p&gt;
      &lt;/div&gt;
      &lt;p&gt; Also I added the POS and LPOS functions to know the horizontal position of the cursor. The SPC and TAB functions for PRINT. Plus a HEX$ function to ease system programming. &lt;/p&gt;
      &lt;p&gt; In the tokenization table, I added placeholders to expand the language and don't break compatibility with any cassette tape being created. &lt;/p&gt;
      &lt;p&gt; With this it has become a full-fledged BASIC interpreter for the Mattel ECS that uses 19 kilowords, instead of the 24 kilowords of the slow and limited ECS BASIC interpreter. &lt;/p&gt;
      &lt;p&gt; I don't see anything more I could do in the near future, except maybe expanding the editor to be a full-screen editor. Currently, it is a line editor that reads its input from the screen. &lt;/p&gt;
      &lt;p&gt; At this point, it is a fun experience the process of typing BASIC programs in the ECS, and watch the results back. You can save the programs, or print it. And of course, you can only imagine the success that Mattel Electronics would have enjoyed if they put together a good BASIC with its Mattel ECS. &lt;/p&gt;
      &lt;p&gt; Small statistics of the assembler code: &lt;/p&gt;
      &lt;list rend="ul"&gt;
        &lt;item&gt;basic.asm: 5333 lines.&lt;/item&gt;
        &lt;item&gt;fplib.asm: 718 lines.&lt;/item&gt;
        &lt;item&gt;fpio.asm: 462 lines.&lt;/item&gt;
        &lt;item&gt;fpmath.asm: 516 lines.&lt;/item&gt;
        &lt;item&gt;uart.asm: 341 lines.&lt;/item&gt;
        &lt;item&gt;Total of 7370 lines of assembler code written between Sep/17 and Oct/12, around 300 lines written daily.&lt;/item&gt;
      &lt;/list&gt;
      &lt;div&gt;&lt;p&gt; The source code is released at &lt;/p&gt;https://github.com/nanochess/ecsbasic&lt;p&gt;. I tried to release it so early as possible, so you can get a glance of how it was growing in the commits. &lt;/p&gt;&lt;/div&gt;
      &lt;div&gt;&lt;p&gt; Enjoy it! &lt;/p&gt;Did you like this article? Invite me a coffee on ko-fi! &lt;/div&gt;
      &lt;head rend="h2"&gt;Related links&lt;/head&gt;
      &lt;p&gt;Last modified: Oct/12/2025&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://nanochess.org/ecs_basic_2.html"/><published>2025-10-12T19:19:38+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45560978</id><title>HP1345A (and wargames) (2017)</title><updated>2025-10-12T21:08:07.076432+00:00</updated><content>&lt;doc fingerprint="f32c950d12a6adb4"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;HP1345A¶&lt;/head&gt;
    &lt;p&gt;I have spent a bit of time fixing a HP1345A digital vector display, including reverse-engineering, just for the heck of it, its character generator.&lt;/p&gt;
    &lt;p&gt;If you click on the individual glyphs below you get a magnified version of just that glyph.&lt;/p&gt;
    &lt;head rend="h1"&gt;HP1345A service-mode¶&lt;/head&gt;
    &lt;p&gt;The HP1345A has two built in service modes, and the quite large “windows” glyphs, 0x7e, 0x9b, 0x9e, 0xbe and 0xe1, are for them.&lt;/p&gt;
    &lt;p&gt;The alignment picture is displayed by an i8748 microcontroller if no computer is attached:&lt;/p&gt;
    &lt;p&gt;(I have included the error message if the Option 704 memory fails because it nicely shows the largest text-size available.)&lt;/p&gt;
    &lt;p&gt;This is what the alignment picture looks like in real life:&lt;/p&gt;
    &lt;p&gt;The focus screen is displayed by they i8748 if a jumper is mounted:&lt;/p&gt;
    &lt;p&gt;And in real life:&lt;/p&gt;
    &lt;p&gt;That image has been scaled down, because typical computer screens these days still do not have the same resolution as the HP1345A. Here is a small snippet of the center “window”:&lt;/p&gt;
    &lt;head rend="h1"&gt;Useless information of the day¶&lt;/head&gt;
    &lt;p&gt;The only difference between the original (01347-80001) and newer (01347-80012) Character Rom is that they changed the comma:&lt;/p&gt;
    &lt;p&gt;It is probably more interesting to note that the focus-window glyphs exist in two different aspect ratios. This hints at the existence of an option with 1:1 aspect ratio, rather than the default aspect of 4:3. Some of the pictures of the test-pattern in the older manuals (01345-90908 for instance) lacks the “Y=2047” text. Presumably such an option would have a different i8748, since the firmware shows no sign of support for this.&lt;/p&gt;
    &lt;head rend="h1"&gt;WarGames¶&lt;/head&gt;
    &lt;p&gt;In all likelyhood, you have never heard of the movie WarGames.&lt;/p&gt;
    &lt;p&gt;On the surface, it was an OK and profitable summer-movie for 1983, with a typical far-fetched summer-movie plot: Kid dials into computer and it offers him a selection of games:&lt;/p&gt;
    &lt;p&gt;When he selects “GLOBAL THERMONUCLEAR WAR” it transpires it is the real thing.&lt;/p&gt;
    &lt;p&gt;Spoiler: They manage to stop the computer.&lt;/p&gt;
    &lt;p&gt;But WarGames is notable for a lot of reasons.&lt;/p&gt;
    &lt;p&gt;1983 was the depth of the cold war, we are right smack in the middle of the NATO Pershing II in West Germany crisis, and the movie’s initial premise was that missile launch officers might refuse to fire their ICMBs.&lt;/p&gt;
    &lt;p&gt;The very straight line from the soviet doomsday machine in Kubriks Dr. Strangelove to “WOPR” in WarGames.&lt;/p&gt;
    &lt;p&gt;The ending of the movie gets close to both Gametheory and “The Halting Problem.”&lt;/p&gt;
    &lt;p&gt;And probably most interesting scene from todays security environment is that some rather neat “social engineering” (and shitty passwords) are employed.&lt;/p&gt;
    &lt;p&gt;The kids computer is a seriously souped up IMSAI 8080 which has a serious claim to being the first “personal computer”.&lt;/p&gt;
    &lt;p&gt;The IMSAI used 8-inch floppydisks for storage, a couple of hundred kilobytes on each.&lt;/p&gt;
    &lt;p&gt;Guess who still uses those today ?&lt;/p&gt;
    &lt;p&gt;and so on…&lt;/p&gt;
    &lt;p&gt;But this is about a font used on the “NORADs hot dream about themselves” movie-set which was built at a cost of over a million dollars:&lt;/p&gt;
    &lt;p&gt;The graphics were spectactular.&lt;/p&gt;
    &lt;p&gt;Not handdrawn like the computer graphics in Kubriks 2001, but designed on a HP9845 computer, drawn on a HP1345A vector display, and filmed through successive color filters, one frame a minute onto 50,000 feet of negatives over seven months:&lt;/p&gt;
    &lt;p&gt;It is pretty obvious that some of the alphanumerics were generated on the computer and sent to the display as vectors, because the fonts do not quite match what is in the HP1345A character generator.&lt;/p&gt;
    &lt;head rend="h1"&gt;Resources¶&lt;/head&gt;
    &lt;p&gt;phk&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://phk.freebsd.dk/hacks/Wargames/"/><published>2025-10-12T19:19:50+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45561164</id><title>After the AI boom: what might we be left with?</title><updated>2025-10-12T21:08:06.802900+00:00</updated><content>&lt;doc fingerprint="6de2f20e4b87456c"&gt;
  &lt;main&gt;
    &lt;p&gt;Some argue that even if the current AI boom leads to an overbuild, it might not be a bad thing – just as the dotcom bubble left behind the internet infrastructure that powered later decades of growth.&lt;/p&gt;
    &lt;p&gt;It’s a tempting comparison, but the parallels only go so far.&lt;/p&gt;
    &lt;p&gt;The dotcom era’s overbuild created durable, open infrastructure – fibre networks and interconnects built on open standards like TCP/IP and HTTP. Those systems had multi-decade lifespans and could be reused for whatever came next. Much of the fibre laid in the 1990s still carries traffic today, upgraded simply by swapping out the electronics at each end. That overinvestment became the backbone of broadband, cloud computing, and the modern web.&lt;/p&gt;
    &lt;p&gt;Most of today’s AI investment, by contrast, is flowing into proprietary, vertically integrated systems rather than open, general-purpose infrastructure. Most of the money is being spent on incredibly expensive GPUs that have a 1-3 year lifespan due to becoming obsolete quickly and wearing out under constant, high-intensity use. These chips aren’t general-purpose compute engines; they’re purpose-built for training and running generative AI models, tuned to the specific architectures and software stacks of a few major vendors such as Nvidia, Google, and Amazon.&lt;lb/&gt;These chips live inside purpose-built AI data centres – engineered for extreme power density, advanced cooling, and specialised networking. Unlike the general-purpose facilities of the early cloud era, these sites are tightly coupled to the hardware and software of whoever built them. Together, they form a closed ecosystem optimised for scale but hard to repurpose.&lt;/p&gt;
    &lt;p&gt;That’s why, if the AI bubble bursts, we could just be left with a pile of short-lived, highly specialised silicon and silent cathedrals of compute – monuments from a bygone era.&lt;/p&gt;
    &lt;head rend="h3"&gt;The possible upside&lt;/head&gt;
    &lt;p&gt;Still, there’s a more positive scenario.&lt;/p&gt;
    &lt;p&gt;If investment outruns demand, surplus capacity could push prices down, just as the post-dotcom bandwidth glut did in the early 2000s. Cheap access to this kind of compute might open the door for new experimentation – not just in generative AI, but in other high-compute domains such as simulation, scientific research, and data-intensive analytics. Even if the hardware is optimised for GenAI, falling prices could still make large-scale computation more accessible overall. A second-hand market in AI hardware could emerge, spreading access to powerful compute much more widely.&lt;/p&gt;
    &lt;p&gt;The supporting infrastructure – power grid upgrades, networking, and edge facilities – will hopefully remain useful regardless. And even if some systems are stranded, the talent, tooling, and operational experience built during the boom will persist, as it did after the dotcom crash.&lt;/p&gt;
    &lt;head rend="h3"&gt;Without openness, the benefits stay locked up&lt;/head&gt;
    &lt;p&gt;The internet’s long-term value came not just from cheap capacity, but from open standards and universal access. Protocols like TCP/IP and HTTP meant anyone could build on the same foundations, without permission or platform lock-in. That openness turned surplus infrastructure into a shared public platform, unlocking decades of innovation far beyond what the original investors imagined.&lt;/p&gt;
    &lt;p&gt;The AI ecosystem is the opposite: powerful but closed. Its compute, models, and APIs are owned and controlled by a handful of vendors, each defining their own stack and terms of access. Even if hardware becomes cheap, it won’t automatically become open. Without shared standards or interoperability, any overbuild risks remaining a private surplus rather than a public good.&lt;/p&gt;
    &lt;p&gt;So the AI boom may not leave behind another decades-long backbone like the internet’s fibre networks. But it could still seed innovation if the industry finds ways to open up what it’s building – turning today’s private infrastructure into tomorrow’s shared platform.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.robbowley.net/2025/10/12/after-the-ai-boom-what-might-we-be-left-with/"/><published>2025-10-12T19:40:34+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45561672</id><title>Emacs agent-shell (powered by ACP)</title><updated>2025-10-12T21:08:06.485369+00:00</updated><content>&lt;doc fingerprint="35d78c5f8911c81d"&gt;
  &lt;main&gt;
    &lt;p&gt;Not long ago, I introduced acp.el, an Emacs lisp implementation of ACP (Agent Client Protocol), the agent protocol developed between Zed and Google folks.&lt;/p&gt;
    &lt;p&gt;While I've been happily accessing LLMs from my beloved text editor via chatgpt-shell (a multi-model package I built), I've been fairly slow on the AI agents uptake. Probably a severe case of old-man-shouts-at-cloud sorta thing, but hey I want well-integrated tools in my text editor. When I heard of ACP, I knew this was the thing I was waiting for to play around with agents.&lt;/p&gt;
    &lt;p&gt;With an early acp.el client library in place, I set out to build an Emacs-native agent integrationâ¦ Today, I have an initial version of agent-shell I can share.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;agent-shell&lt;/code&gt; is a native Emacs shell, powered by comint-mode (check out Mickey's comint article btw). As such, we don't have to dance between char and line modes to interact with things. &lt;code&gt;agent-shell&lt;/code&gt; is just a regular Emacs buffer like any other you're used to.&lt;/p&gt;
    &lt;p&gt;Thanks to ACP, we can now build agent-agnostic experiences by simply configuring our clients to communicate with their respective agents using a common protocol. As users, we benefit from a single, consistent experience, powered by any agent of our choice.&lt;/p&gt;
    &lt;p&gt;Configuring different agents from &lt;code&gt;agent-shell&lt;/code&gt; boils down which agent we want running in the comms process. Here's an example of Gemini CLI vs Claude Code configuration:&lt;/p&gt;
    &lt;code&gt;(defun agent-shell-start-gemini-agent ()
  "Start an interactive Gemini CLI agent shell."
  (interactive)
  (agent-shell--start
   :new-session t
   :mode-line-name "Gemini"
   :buffer-name "Gemini"
   :shell-prompt "Gemini&amp;gt; "
   :shell-prompt-regexp "Gemini&amp;gt; "
   :needs-authentication t
   :authenticate-request-maker (lambda ()
                                 (acp-make-authenticate-request :method-id "gemini-api-key"))
   :client-maker (lambda ()
                   (acp-make-client :command "gemini"
                                    :command-params '("--experimental-acp")
                                    :environment-variables (list (format "GEMINI_API_KEY=%s" (agent-shell-google-key)))))))
&lt;/code&gt;
    &lt;code&gt;(defun agent-shell-start-claude-code-agent ()
  "Start an interactive Claude Code agent shell."
  (interactive)
  (agent-shell--start
   :new-session t
   :mode-line-name "Claude Code"
   :buffer-name "Claude Code"
   :shell-prompt "Claude Code&amp;gt; "
   :shell-prompt-regexp "Claude Code&amp;gt; "
   :client-maker (lambda ()
                   (acp-make-client :command "claude-code-acp"
                                    :environment-variables (list (format "ANTHROPIC_API_KEY=%s" (agent-shell-anthropic-key)))))))
&lt;/code&gt;
    &lt;p&gt;I've yet to try other agents. If you get another agent running, I'd love to hear about it. Maybe submit a pull request?&lt;/p&gt;
    &lt;p&gt;While I've been relying on my acp.el client library, I'm still fairly new to the protocol. I often inspect traffic to see what's going on. After staring at json for far too long, I figured I may as well build some tooling around acp.el to make my life easier. I added a traffic buffer for that. From &lt;code&gt;agent-shell&lt;/code&gt;, you can invoke it via &lt;code&gt;M-x agent-shell-view-traffic&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Developing &lt;code&gt;agent-shell&lt;/code&gt; against paid agents got expensive quickly. Not only expensive, but my edit-compile-run cycle also became boringly slow waiting for agents. While I knew I wanted some sort of fake agent to work against, I didn't want to craft the fake traffic myself. Remember that traffic buffer I showed ya? Well, I can now save that traffic to disk and replay it later. This enabled me to run problematic sessions once and quickly replay multiple times to fix things. While re-playing has its quirks and limitations, it's done the job for now.&lt;/p&gt;
    &lt;p&gt;You can see a Claude Code session below, followed by its replayed counterpart via fake infrastructure.&lt;/p&gt;
    &lt;p&gt;Getting here took quite a bit of work. Having said that, it's only a start. I myself need to get more familiar with agent usage and evolve the package UX however it feels most natural within its new habitat. Lately, I've been experimenting with a quick diff buffer, driven by n/p keys, shown along the permission dialog.&lt;/p&gt;
    &lt;code&gt;#+ATTR_HTML: :width 99%
&lt;/code&gt;
    &lt;p&gt;While I've implemented enough parts of the Agent Client Protocol Schema to make the package useful, it's hardly complete. I've yet to fully familiarize myself with most protocol features.&lt;/p&gt;
    &lt;p&gt;Both of my new Emacs packages, agent-shell and acp.el, are now available on GitHub. As an agent user, go straight to agent-shell. If you're a package author and would like to build an ACP experience, then give acp.el a try. Both packages are brand new and may have rough edges. Be sure to file bugs or feature requests as needed.&lt;/p&gt;
    &lt;p&gt;I've been heads down, working on these packages for some time. If you're using cloud LLM services, you're likely already paying for tokens. If you find my work useful, please consider routing some of those coins to help fund it. Maybe my tools make you more productive at work? Ask your employer to support the work. These packages not only take time and effort, but also cost me money. Help fund the work.&lt;/p&gt;
    &lt;p&gt;powered by LMNO.lol&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://xenodium.com/introducing-agent-shell"/><published>2025-10-12T20:37:16+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45561700</id><title>Microsoft's "EdgeAI for Beginners":Learn How to Run AI Models Locally on Devices</title><updated>2025-10-12T21:08:05.900222+00:00</updated><content>&lt;doc fingerprint="2f0879180436a96a"&gt;
  &lt;main&gt;
    &lt;p&gt;Follow these steps to get started using these resources:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Fork the Repository: Click&lt;/item&gt;
      &lt;item&gt;Clone the Repository: &lt;code&gt;git clone https://github.com/microsoft/edgeai-for-beginners.git&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Join The Azure AI Foundry Discord and meet experts and fellow developers&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Arabic | Bengali | Bulgarian | Burmese (Myanmar) | Chinese (Simplified) | Chinese (Traditional, Hong Kong) | Chinese (Traditional, Macau) | Chinese (Traditional, Taiwan) | Croatian | Czech | Danish | Dutch | Estonian | Finnish | French | German | Greek | Hebrew | Hindi | Hungarian | Indonesian | Italian | Japanese | Korean | Lithuanian | Malay | Marathi | Nepali | Norwegian | Persian (Farsi) | Polish | Portuguese (Brazil) | Portuguese (Portugal) | Punjabi (Gurmukhi) | Romanian | Russian | Serbian (Cyrillic) | Slovak | Slovenian | Spanish | Swahili | Swedish | Tagalog (Filipino) | Tamil | Thai | Turkish | Ukrainian | Urdu | Vietnamese&lt;/p&gt;
    &lt;p&gt;If you wish to have additional translations languages supported are listed here&lt;/p&gt;
    &lt;p&gt;Welcome to EdgeAI for Beginners – your comprehensive journey into the transformative world of Edge Artificial Intelligence. This course bridges the gap between powerful AI capabilities and practical, real-world deployment on edge devices, empowering you to harness AI's potential directly where data is generated and decisions need to be made.&lt;/p&gt;
    &lt;p&gt;This course takes you from fundamental concepts to production-ready implementations, covering:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Small Language Models (SLMs) optimized for edge deployment&lt;/item&gt;
      &lt;item&gt;Hardware-aware optimization across diverse platforms&lt;/item&gt;
      &lt;item&gt;Real-time inference with privacy-preserving capabilities&lt;/item&gt;
      &lt;item&gt;Production deployment strategies for enterprise applications&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Edge AI represents a paradigm shift that addresses critical modern challenges:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Privacy &amp;amp; Security: Process sensitive data locally without cloud exposure&lt;/item&gt;
      &lt;item&gt;Real-time Performance: Eliminate network latency for time-critical applications&lt;/item&gt;
      &lt;item&gt;Cost Efficiency: Reduce bandwidth and cloud computing expenses&lt;/item&gt;
      &lt;item&gt;Resilient Operations: Maintain functionality during network outages&lt;/item&gt;
      &lt;item&gt;Regulatory Compliance: Meet data sovereignty requirements&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Edge AI refers to running AI algorithms and language models locally on hardware, close to where data is generated without relying on cloud resources for inference. It reduces latency, enhances privacy, and enables real-time decision-making.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;On-device inference: AI models run on edge devices (phones, routers, microcontrollers, industrial PCs)&lt;/item&gt;
      &lt;item&gt;Offline capability: Functions without persistent internet connectivity&lt;/item&gt;
      &lt;item&gt;Low latency: Immediate responses suited for real-time systems&lt;/item&gt;
      &lt;item&gt;Data sovereignty: Keeps sensitive data local, improving security and compliance&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;SLMs like Phi-4, Mistral-7B, and Gemma are optimized versions of larger LLMs—trained or distilled for:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Reduced memory footprint: Efficient use of limited edge device memory&lt;/item&gt;
      &lt;item&gt;Lower compute demand: Optimized for CPU and edge GPU performance&lt;/item&gt;
      &lt;item&gt;Faster startup times: Quick initialization for responsive applications&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;They unlock powerful NLP capabilities while meeting the constraints of:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Embedded systems: IoT devices and industrial controllers&lt;/item&gt;
      &lt;item&gt;Mobile devices: Smartphones and tablets with offline capabilities&lt;/item&gt;
      &lt;item&gt;IoT Devices: Sensors and smart devices with limited resources&lt;/item&gt;
      &lt;item&gt;Edge servers: Local processing units with limited GPU resources&lt;/item&gt;
      &lt;item&gt;Personal Computers: Desktop and laptop deployment scenarios&lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Module&lt;/cell&gt;
        &lt;cell role="head"&gt;Topic&lt;/cell&gt;
        &lt;cell role="head"&gt;Focus Area&lt;/cell&gt;
        &lt;cell role="head"&gt;Key Content&lt;/cell&gt;
        &lt;cell role="head"&gt;Level&lt;/cell&gt;
        &lt;cell role="head"&gt;Duration&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;📖 00&lt;/cell&gt;
        &lt;cell&gt;Introduction to EdgeAI&lt;/cell&gt;
        &lt;cell&gt;Foundation &amp;amp; Context&lt;/cell&gt;
        &lt;cell&gt;EdgeAI Overview • Industry Applications • SLM Introduction • Learning Objectives&lt;/cell&gt;
        &lt;cell&gt;Beginner&lt;/cell&gt;
        &lt;cell&gt;1-2 hrs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;📚 01&lt;/cell&gt;
        &lt;cell&gt;EdgeAI Fundamentals&lt;/cell&gt;
        &lt;cell&gt;Cloud vs Edge AI comparison&lt;/cell&gt;
        &lt;cell&gt;EdgeAI Fundamentals • Real World Case Studies • Implementation Guide • Edge Deployment&lt;/cell&gt;
        &lt;cell&gt;Beginner&lt;/cell&gt;
        &lt;cell&gt;3-4 hrs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;🧠 02&lt;/cell&gt;
        &lt;cell&gt;SLM Model Foundations&lt;/cell&gt;
        &lt;cell&gt;Model families &amp;amp; architecture&lt;/cell&gt;
        &lt;cell&gt;Phi Family • Qwen Family • Gemma Family • BitNET • μModel • Phi-Silica&lt;/cell&gt;
        &lt;cell&gt;Beginner&lt;/cell&gt;
        &lt;cell&gt;4-5 hrs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;🚀 03&lt;/cell&gt;
        &lt;cell&gt;SLM Deployment Practice&lt;/cell&gt;
        &lt;cell&gt;Local &amp;amp; cloud deployment&lt;/cell&gt;
        &lt;cell&gt;Advanced Learning • Local Environment • Cloud Deployment&lt;/cell&gt;
        &lt;cell&gt;Intermediate&lt;/cell&gt;
        &lt;cell&gt;4-5 hrs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;⚙️ 04&lt;/cell&gt;
        &lt;cell&gt;Model Optimization Toolkit&lt;/cell&gt;
        &lt;cell&gt;Cross-platform optimization&lt;/cell&gt;
        &lt;cell&gt;Introduction • Llama.cpp • Microsoft Olive • OpenVINO • Apple MLX • Workflow Synthesis&lt;/cell&gt;
        &lt;cell&gt;Intermediate&lt;/cell&gt;
        &lt;cell&gt;5-6 hrs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;🔧 05&lt;/cell&gt;
        &lt;cell&gt;SLMOps Production&lt;/cell&gt;
        &lt;cell&gt;Production operations&lt;/cell&gt;
        &lt;cell&gt;SLMOps Introduction • Model Distillation • Fine-tuning • Production Deployment&lt;/cell&gt;
        &lt;cell&gt;Advanced&lt;/cell&gt;
        &lt;cell&gt;5-6 hrs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;🤖 06&lt;/cell&gt;
        &lt;cell&gt;AI Agents &amp;amp; Function Calling&lt;/cell&gt;
        &lt;cell&gt;Agent frameworks &amp;amp; MCP&lt;/cell&gt;
        &lt;cell&gt;Agent Introduction • Function Calling • Model Context Protocol&lt;/cell&gt;
        &lt;cell&gt;Advanced&lt;/cell&gt;
        &lt;cell&gt;4-5 hrs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;💻 07&lt;/cell&gt;
        &lt;cell&gt;Platform Implementation&lt;/cell&gt;
        &lt;cell&gt;Cross-platform samples&lt;/cell&gt;
        &lt;cell&gt;AI Toolkit • Foundry Local • Windows Development&lt;/cell&gt;
        &lt;cell&gt;Advanced&lt;/cell&gt;
        &lt;cell&gt;3-4 hrs&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;🏭 08&lt;/cell&gt;
        &lt;cell&gt;Foundry Local Toolkit&lt;/cell&gt;
        &lt;cell&gt;Production-ready samples&lt;/cell&gt;
        &lt;cell&gt;Sample applications (see details below)&lt;/cell&gt;
        &lt;cell&gt;Expert&lt;/cell&gt;
        &lt;cell&gt;8-10 hrs&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;01: REST Chat Quickstart&lt;/item&gt;
      &lt;item&gt;02: OpenAI SDK Integration&lt;/item&gt;
      &lt;item&gt;03: Model Discovery &amp;amp; Benchmarking&lt;/item&gt;
      &lt;item&gt;04: Chainlit RAG Application&lt;/item&gt;
      &lt;item&gt;05: Multi-Agent Orchestration&lt;/item&gt;
      &lt;item&gt;06: Models-as-Tools Router&lt;/item&gt;
      &lt;item&gt;07: Direct API Client&lt;/item&gt;
      &lt;item&gt;08: Windows 11 Chat App&lt;/item&gt;
      &lt;item&gt;09: Advanced Multi-Agent System&lt;/item&gt;
      &lt;item&gt;10: Foundry Tools Framework&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Comprehensive hands-on workshop materials with production-ready implementations:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Workshop Guide - Complete learning objectives, outcomes, and resource navigation&lt;/item&gt;
      &lt;item&gt;Python Samples (6 sessions) - Updated with best practices, error handling, and comprehensive documentation&lt;/item&gt;
      &lt;item&gt;Jupyter Notebooks (8 interactive) - Step-by-step tutorials with benchmarks and performance monitoring&lt;/item&gt;
      &lt;item&gt;Session Guides - Detailed markdown guides for each workshop session&lt;/item&gt;
      &lt;item&gt;Validation Tools - Scripts to verify code quality and run smoke tests&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;What You'll Build:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Local AI chat applications with streaming support&lt;/item&gt;
      &lt;item&gt;RAG pipelines with quality evaluation (RAGAS)&lt;/item&gt;
      &lt;item&gt;Multi-model benchmarking and comparison tools&lt;/item&gt;
      &lt;item&gt;Multi-agent orchestration systems&lt;/item&gt;
      &lt;item&gt;Intelligent model routing with task-based selection&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Total Duration: 36-45 hours&lt;/item&gt;
      &lt;item&gt;Beginner Path: Modules 01-02 (7-9 hours)&lt;/item&gt;
      &lt;item&gt;Intermediate Path: Modules 03-04 (9-11 hours)&lt;/item&gt;
      &lt;item&gt;Advanced Path: Modules 05-07 (12-15 hours)&lt;/item&gt;
      &lt;item&gt;Expert Path: Module 08 (8-10 hours)&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Edge AI Architecture: Design local-first AI systems with cloud integration&lt;/item&gt;
      &lt;item&gt;Model Optimization: Quantize and compress models for edge deployment (85% speed boost, 75% size reduction)&lt;/item&gt;
      &lt;item&gt;Multi-Platform Deployment: Windows, mobile, embedded, and cloud-edge hybrid systems&lt;/item&gt;
      &lt;item&gt;Production Operations: Monitoring, scaling, and maintaining edge AI in production&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Foundry Local Chat Apps: Windows 11 native application with model switching&lt;/item&gt;
      &lt;item&gt;Multi-Agent Systems: Coordinator with specialist agents for complex workflows&lt;/item&gt;
      &lt;item&gt;RAG Applications: Local document processing with vector search&lt;/item&gt;
      &lt;item&gt;Model Routers: Intelligent selection between models based on task analysis&lt;/item&gt;
      &lt;item&gt;API Frameworks: Production-ready clients with streaming and health monitoring&lt;/item&gt;
      &lt;item&gt;Cross-Platform Tools: LangChain/Semantic Kernel integration patterns&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Manufacturing • Healthcare • Autonomous Vehicles • Smart Cities • Mobile Apps&lt;/p&gt;
    &lt;p&gt;Recommended Learning Path (20-30 hours total):&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;📖 Introduction (Introduction.md): EdgeAI foundation + industry context + learning framework&lt;/item&gt;
      &lt;item&gt;📚 Foundation (Modules 01-02): EdgeAI concepts + SLM model families&lt;/item&gt;
      &lt;item&gt;⚙️ Optimization (Modules 03-04): Deployment + quantization frameworks&lt;/item&gt;
      &lt;item&gt;🚀 Production (Modules 05-06): SLMOps + AI agents + function calling&lt;/item&gt;
      &lt;item&gt;💻 Implementation (Modules 07-08): Platform samples + Foundry Local toolkit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Each module includes theory, hands-on exercises, and production-ready code samples.&lt;/p&gt;
    &lt;p&gt;Technical Roles: EdgeAI Solutions Architect • ML Engineer (Edge) • IoT AI Developer • Mobile AI Developer&lt;/p&gt;
    &lt;p&gt;Industry Sectors: Manufacturing 4.0 • Healthcare Tech • Autonomous Systems • FinTech • Consumer Electronics&lt;/p&gt;
    &lt;p&gt;Portfolio Projects: Multi-agent systems • Production RAG apps • Cross-platform deployment • Performance optimization&lt;/p&gt;
    &lt;code&gt;edgeai-for-beginners/
├── 📖 introduction.md  # Foundation: EdgeAI Overview &amp;amp; Learning Framework
├── 📚 Module01-04/     # Fundamentals → SLMs → Deployment → Optimization  
├── 🔧 Module05-06/     # SLMOps → AI Agents → Function Calling
├── 💻 Module07/        # Platform Samples (VS Code, Windows, Jetson, Mobile)
├── 🏭 Module08/        # Foundry Local Toolkit + 10 Comprehensive Samples
│   ├── samples/01-06/  # Foundation: REST, SDK, RAG, Agents, Routing
│   └── samples/07-10/  # Advanced: API Client, Windows App, Enterprise Agents, Tools
├── 🌐 translations/    # Multi-language support (8+ languages)
└── 📋 STUDY_GUIDE.md   # Structured learning paths &amp;amp; time allocation
&lt;/code&gt;
    &lt;p&gt;✅ Progressive Learning: Theory → Practice → Production deployment&lt;lb/&gt; ✅ Real Case Studies: Microsoft, Japan Airlines, enterprise implementations&lt;lb/&gt; ✅ Hands-on Samples: 50+ examples, 10 comprehensive Foundry Local demos&lt;lb/&gt; ✅ Performance Focus: 85% speed improvements, 75% size reductions&lt;lb/&gt; ✅ Multi-Platform: Windows, mobile, embedded, cloud-edge hybrid&lt;lb/&gt; ✅ Production Ready: Monitoring, scaling, security, compliance frameworks&lt;/p&gt;
    &lt;p&gt;📖 Study Guide Available: Structured 20-hour learning path with time allocation guidance and self-assessment tools.&lt;/p&gt;
    &lt;p&gt;EdgeAI represents the future of AI deployment: local-first, privacy-preserving, and efficient. Master these skills to build the next generation of intelligent applications.&lt;/p&gt;
    &lt;p&gt;Our team produces other courses! Check out:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;MCP for Beginners&lt;/item&gt;
      &lt;item&gt;AI Agents For Beginners&lt;/item&gt;
      &lt;item&gt;Generative AI for Beginners using .NET&lt;/item&gt;
      &lt;item&gt;Generative AI for Beginners using JavaScript&lt;/item&gt;
      &lt;item&gt;Generative AI for Beginners&lt;/item&gt;
      &lt;item&gt;ML for Beginners&lt;/item&gt;
      &lt;item&gt;Data Science for Beginners&lt;/item&gt;
      &lt;item&gt;AI for Beginners&lt;/item&gt;
      &lt;item&gt;Cybersecurity for Beginners&lt;/item&gt;
      &lt;item&gt;Web Dev for Beginners&lt;/item&gt;
      &lt;item&gt;IoT for Beginners&lt;/item&gt;
      &lt;item&gt;XR Development for Beginners&lt;/item&gt;
      &lt;item&gt;Mastering GitHub Copilot for AI Paired Programming&lt;/item&gt;
      &lt;item&gt;Mastering GitHub Copilot for C#/.NET Developers&lt;/item&gt;
      &lt;item&gt;Choose Your Own Copilot Adventure&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you get stuck or have any questions about building AI apps, join:&lt;/p&gt;
    &lt;p&gt;If you have product feedback or errors while building visit:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/microsoft/edgeai-for-beginners"/><published>2025-10-12T20:41:01+00:00</published></entry></feed>