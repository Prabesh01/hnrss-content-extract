<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-22T05:39:17.571303+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45651485</id><title>Wikipedia says traffic is falling due to AI search summaries and social video</title><updated>2025-10-22T05:39:24.689292+00:00</updated><content>&lt;doc fingerprint="368b13011882cebe"&gt;
  &lt;main&gt;
    &lt;p&gt;Wikipedia is often described as the last good website on an internet increasingly filled with toxic social media and AI slop. But it seems the online encyclopedia is not completely immune to broader trends, with human page views falling 8% year-over-year, according to a new blog post from Marshall Miller of the Wikimedia Foundation.&lt;/p&gt;
    &lt;p&gt;The foundation works to distinguish between traffic from humans and bots, and Miller writes that the decline “over the past few months” was revealed after an update to Wikipedia’s bot-detection systems appeared to show that “much of the unusually high traffic for the period of May and June was coming from bots that were built to evade detection.”&lt;/p&gt;
    &lt;p&gt;Why is traffic falling? Miller points to “the impact of generative AI and social media on how people seek information,” particularly as “search engines are increasingly using generative AI to provide answers directly to searchers rather than linking to sites like ours” and as “younger generations are seeking information on social video platforms rather than the open web.” (Google has disputed the claim that AI summaries reduce traffic from search.)&lt;/p&gt;
    &lt;p&gt;Miller says the foundation welcomes “new ways for people to gain knowledge” and argues this doesn’t make Wikipedia any less important, since knowledge sourced from the encyclopedia is still reaching people even if they don’t visit the website. Wikipedia even experimented with AI summaries of its own, though it paused the effort after editors complained.&lt;/p&gt;
    &lt;p&gt;But this shift does present risks, particularly if people are becoming less aware of where their information actually comes from. As Miller puts it, “With fewer visits to Wikipedia, fewer volunteers may grow and enrich the content, and fewer individual donors may support this work.” (Some of those volunteers are truly remarkable, reportedly disarming a gunman at a Wikipedia editors’ conference on Friday.)&lt;/p&gt;
    &lt;p&gt;For that reason, he argues that AI, search, and social companies using content from Wikipedia “must encourage more visitors” to the website itself.&lt;/p&gt;
    &lt;p&gt;And he says Wikipedia is taking steps of its own — for example, by developing a new framework for attributing content from the encyclopedia. The organization also has two teams tasked with helping Wikipedia reach new readers, and it’s looking for volunteers to help.&lt;/p&gt;
    &lt;head rend="h3"&gt;2-FOR-1 DISCOUNT: Bring a +1 and save 60%&lt;/head&gt;
    &lt;head rend="h4"&gt;Google Cloud, Netflix, Microsoft, Box, Phia, a16z, ElevenLabs, Wayve, Hugging Face, Elad Gil, Vinod Khosla — some of the 250+ heavy hitters leading 200+ sessions designed to deliver the insights that fuel startup growth and sharpen your edge. And don’t miss 300+ showcasing startups in all sectors.&lt;lb/&gt;Bring a +1 and save 60% on their pass, or get your pass by Oct 27 to save up to $444.&lt;/head&gt;
    &lt;head rend="h3"&gt;2-FOR-1 DISCOUNT: Bring a +1 and save 60%&lt;/head&gt;
    &lt;head rend="h4"&gt;Google Cloud, Netflix, Microsoft, Box, Phia, a16z, ElevenLabs, Wayve, Hugging Face, Elad Gil, Vinod Khosla — some of the 250+ heavy hitters leading 200+ sessions designed to deliver the insights that fuel startup growth and sharpen your edge. And don’t miss 300+ showcasing startups in all sectors. Bring a +1 and save 60% on their pass, or get your pass by Oct 27 to save up to $444.&lt;/head&gt;
    &lt;p&gt;Miller also encourages readers to “support content integrity and content creation” more broadly.&lt;/p&gt;
    &lt;p&gt;“When you search for information online, look for citations and click through to the original source material,” he writes. “Talk with the people you know about the importance of trusted, human curated knowledge, and help them understand that the content underlying generative AI was created by real people who deserve their support.”&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://techcrunch.com/2025/10/18/wikipedia-says-traffic-is-falling-due-to-ai-search-summaries-and-social-video/"/><published>2025-10-21T01:29:03+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45652307</id><title>60k kids have avoided peanut allergies due to 2015 advice, study finds</title><updated>2025-10-22T05:39:24.588443+00:00</updated><content>&lt;doc fingerprint="bd451175ad948489"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Some 60,000 kids have avoided peanut allergies due to landmark 2015 advice, study finds&lt;/head&gt;
    &lt;p&gt;A decade after a landmark study proved that feeding peanut products to young babies could prevent development of life-threatening allergies, new research finds the change has made a big difference in the real world.&lt;/p&gt;
    &lt;p&gt;About 60,000 children have avoided developing peanut allergies after guidance first issued in 2015 upended medical practice by recommending introducing the allergen to infants starting as early as 4 months.&lt;/p&gt;
    &lt;p&gt;"That's a remarkable thing, right?" said Dr. David Hill, an allergist and researcher at Children's Hospital of Philadelphia, and author of a study published Monday in the medical journal Pediatrics. Hill and colleagues analyzed electronic health records from dozens of pediatric practices to track diagnoses of food allergies in young children before, during and after the guidelines were issued.&lt;/p&gt;
    &lt;p&gt;"I can actually come to you today and say there are less kids with food allergy today than there would have been if we hadn't implemented this public health effort," he added.&lt;/p&gt;
    &lt;p&gt;"Our findings have relevance from those of us who treat patients to those caring for infants, and more awareness, education and advocacy could further increase the positive results we observed in this study," he continued. "Future studies could potentially explore specific feeding practices that help us better understand the timing, frequency and dose of foods that optimize protection against food allergies."&lt;/p&gt;
    &lt;p&gt;The researchers found that peanut allergies in children ages 0 to 3 declined by more than 27% after guidance for high-risk kids was first issued in 2015 and by more than 40% after the recommendations were expanded in 2017.&lt;/p&gt;
    &lt;p&gt;The effort hasn't yet reduced an overall increase in food allergies in the U.S. in recent years. About 8% of children are affected, including more than 2% with a peanut allergy.&lt;/p&gt;
    &lt;p&gt;Peanut allergy is caused when the body's immune system mistakenly identifies proteins in peanuts as harmful and releases chemicals that trigger allergic symptoms, including hives, respiratory symptoms and, sometimes, life-threatening anaphylaxis.&lt;/p&gt;
    &lt;p&gt;For decades, doctors had recommended delaying feeding children peanuts and other foods likely to trigger allergies until age 3. But in 2015, Gideon Lack at King's College London published the groundbreaking Learning Early About Peanut Allergy, or LEAP, trial.&lt;/p&gt;
    &lt;p&gt;Lack and colleagues showed that introducing peanut products in infancy reduced the future risk of developing food allergies by more than 80%. Later analysis showed that the protection persisted in about 70% of kids into adolescence.&lt;/p&gt;
    &lt;p&gt;The study immediately sparked new guidelines urging early introduction of peanuts — but putting them into practice has been slow.&lt;/p&gt;
    &lt;p&gt;Only about 29% of pediatricians and 65% of allergists reported following the expanded guidance issued in 2017, surveys found.&lt;/p&gt;
    &lt;p&gt;Confusion and uncertainty about the best way to introduce peanuts early in life led to the lag, according to a commentary that accompanied the study. Early on, medical experts and parents alike questioned whether the practice could be adopted outside of tightly controlled clinical settings.&lt;/p&gt;
    &lt;p&gt;The data for the analysis came from a subset of participating practice sites and may not represent the entire U.S. pediatric population, noted the commentary, led by Dr. Ruchi Gupta, a child allergy expert at Northwestern University.&lt;/p&gt;
    &lt;p&gt;However, the new research offers "promising evidence that early allergen introduction is not only being adopted but may be making a measurable impact," the authors concluded.&lt;/p&gt;
    &lt;p&gt;Advocates for the 33 million people in the U.S. with food allergies welcomed signs that early introduction of peanut products is catching on.&lt;/p&gt;
    &lt;p&gt;"This research reinforces what we already know and underscores a meaningful opportunity to reduce the incidence and prevalence of peanut allergy nationwide," said Sung Poblete, chief executive of the nonprofit group Food Allergy Research &amp;amp; Education, or FARE.&lt;/p&gt;
    &lt;p&gt;The new study emphasizes the current guidance, updated in 2021, which calls for introducing peanuts and other major food allergens between four and six months, without prior screening or testing, Hill said. Parents should consult their pediatricians about any questions.&lt;/p&gt;
    &lt;p&gt;"It doesn't have to be a lot of the food, but little tastes of peanut butter, milk-based yogurt, soy-based yogurts and tree butters," he said. "These are really good ways to allow the immune system exposure to these allergenic foods in a safe way."&lt;/p&gt;
    &lt;p&gt;Tiffany Leon, 36, a Maryland registered dietician and director at FARE, introduced peanuts and other allergens early to her own sons, James, 4, and Cameron, 2.&lt;/p&gt;
    &lt;p&gt;At first, Leon's own mother was shocked at the advice to feed babies such foods before the age of 3, she said. But Leon explained how the science had changed.&lt;/p&gt;
    &lt;p&gt;"As a dietician, I practice evidence-based recommendations," she said. "So when someone told me, 'This is how it's done now, these are the new guidelines,' I just thought, 'OK, well, this is what we're going to do.'"&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.cbsnews.com/news/peanut-allergies-60000-kids-avoided-2015-advice/"/><published>2025-10-21T03:53:20+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45654512</id><title>Diamond Thermal Conductivity: A New Era in Chip Cooling</title><updated>2025-10-22T05:39:24.325414+00:00</updated><content>&lt;doc fingerprint="336924ce2a1195f8"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Diamond Blankets Will Keep Future Chips Cool&lt;/head&gt;&lt;p&gt;A micrometers-thick integrated layer spreads out the heat&lt;/p&gt;&lt;p&gt;Today’s stunning computing power is allowing us to move from human intelligence toward artificial intelligence. And as our machines gain more power, they’re becoming not just tools but decision-makers shaping our future.&lt;/p&gt;&lt;p&gt;But with great power comes great…heat!&lt;/p&gt;&lt;p&gt;As nanometer-scale transistors switch at gigahertz speeds, electrons race through circuits, losing energy as heat—which you feel when your laptop or your phone toasts your fingers. As we’ve crammed more and more transistors onto chips, we’ve lost the room to release that heat efficiently. Instead of the heat spreading out quickly across the silicon, which makes it much easier to remove, it builds up to form hot spots, which can be tens of degrees warmer than the rest of the chip. That extreme heat forces systems to throttle the performance of CPUs and GPUs to avoid degrading the chips.&lt;/p&gt;&lt;p&gt;In other words, what began as a quest for miniaturization has turned into a battle against thermal energy. This challenge extends across all electronics. In computing, high-performance processors demand ever-increasing power densities. (New Nvidia GPU B300 servers will consume nearly 15 kilowatts of power.) In communication, both digital and analog systems push transistors to deliver more power for stronger signals and faster data rates. In the power electronics used for energy conversion and distribution, efficiency gains are being countered by thermal constraints.&lt;/p&gt;&lt;p&gt;The ability to grow large-grained polycrystalline diamond at low temperature led to a new way to combat heat in transistors. Mohamadali Malakoutian&lt;/p&gt;&lt;p&gt;Rather than allowing heat to build up, what if we could spread it out right from the start, inside the chip?—diluting it like a cup of boiling water dropped into a swimming pool. Spreading out the heat would lower the temperature of the most critical devices and circuits and let the other time-tested cooling technologies work more efficiently. To do that, we’d have to introduce a highly thermally conductive material inside the IC, mere nanometers from the transistors, without messing up any of their very precise and sensitive properties. Enter an unexpected material—diamond.&lt;/p&gt;&lt;p&gt;In some ways, diamond is ideal. It’s one of the most thermally conductive materials on the planet—many times more efficient than copper—yet it’s also electrically insulating. However, integrating it into chips is tricky: Until recently we knew how to grow it only at circuit-slagging temperatures in excess of 1,000 °C.&lt;/p&gt;&lt;p&gt;But my research group at Stanford University has managed what seemed impossible. We can now grow a form of diamond suitable for spreading heat, directly atop semiconductor devices at low enough temperatures that even the most delicate interconnects inside advanced chips will survive. To be clear, this isn’t the kind of diamond you see in jewelry, which is a large single crystal. Our diamonds are a polycrystalline coating no more than a couple of micrometers thick.&lt;/p&gt;&lt;p&gt;The potential benefits could be huge. In some of our earliest gallium-nitride radio-frequency transistors, the addition of diamond dropped the device temperature by more than 50 °C. At the lower temperature, the transistors amplified X-band radio signals five times as well as before. We think our diamond will be even more important for advanced CMOS chips. Researchers predict that upcoming chipmaking technologies could make hot spots almost 10 °C hotter [see , “Future Chips Will Be Hotter Than Ever”, in this issue]. That’s probably why our research is drawing intense interest from the chip industry, including Applied Materials, Samsung, and TSMC. If our work continues to succeed as it has, heat will become a far less onerous constraint in CMOS and other electronics too.&lt;/p&gt;&lt;head rend="h2"&gt;Where Heat Begins and Ends in Chips&lt;/head&gt;&lt;p&gt;At the boundary between the diamond and the semiconductor, a thin layer of silicon carbide forms. It acts as a bridge for heat to flow into the diamond. Mohamadali Malakoutian&lt;/p&gt;&lt;p&gt;Heat starts within transistors and the interconnects that link them, as the flow of current meets resistance. That means most of it is generated near the surface of the semiconductor substrate. From there it rises either through layers of metal and insulation or through the semiconductor itself, depending on the package architecture. The heat then encounters a thermal interface material designed to spread it out before it ultimately reaches a heat sink, a radiator, or some sort of liquid cooling, where air or fluid carries the heat away.&lt;/p&gt;&lt;p&gt;The dominant cooling strategies today center around advances in heat sinks, fans, and radiators. In pursuit of even better cooling, researchers have explored liquid cooling using microfluidic channels and removing heat using phase-change materials. Some computer clusters go so far as to submerge the servers in thermally conductive, dielectric—electrically insulating—liquids.&lt;/p&gt;&lt;p&gt;These innovations are critical steps forward, but they still have limitations. Some are so expensive they’re worthwhile only for the highest-performing chips; others are simply too bulky for the job. (Your smartphone can’t carry a conventional fan.) And none are likely to be very effective as we move toward chip architectures resembling silicon skyscrapers that stack multiple layers of chips. Such 3D systems are only as viable as our ability to remove heat from every layer within it.&lt;/p&gt;&lt;p&gt;The big problem is that chip materials are poor heat conductors, so the heat becomes trapped and concentrated, causing the temperature to skyrocket within the chip. At higher temperatures, transistors leak more current, wasting power; they age more quickly, too.&lt;/p&gt;&lt;p&gt;Heat spreaders allow the heat to move laterally, diluting it and allowing the circuits to cool. But they’re positioned far—relatively, of course—from where the heat is generated, and so they’re of little help with these hot spots. We need a heat-spreading technology that can exist within nanometers of where the heat is generated. This is where our new low-temperature diamond could be essential.&lt;/p&gt;&lt;head rend="h2"&gt;How to Make Diamonds&lt;/head&gt;&lt;p&gt;Before my lab turned to developing diamond as a heat-spreading material, we were working on it as a semiconductor. In its single-crystal form—like the kind on your finger—it has a wide bandgap and ability to withstand enormous electric fields. Single-crystalline diamond also offers some of the highest thermal conductivity recorded in any material, reaching 2,200 to 2,400 watts per meter per kelvin—roughly six times as conductive as copper. Polycrystalline diamond—an easier to make material—can approach these values when grown thick. Even in this form, it outperforms copper.&lt;/p&gt;&lt;p&gt;As attractive as diamond transistors might be, I was keenly aware—based on my experience researching gallium nitride devices—of the long road ahead. The problem is one of scale. Several companies are working to scale high-purity diamond substrates to 50, 75, and even 100 millimeters but the diamond substrates we could acquire commercially were only about 3 mm across.&lt;/p&gt;&lt;p&gt;Gallium nitride high-electron-mobility transistors were an ideal test case for diamond cooling. The devices are 3D and the critical heat-generating part, the two-dimensional electron gas, is close to the surface. Chris Philpot&lt;/p&gt;So we decided instead to try growing diamond films on large silicon wafers, in the hope of moving toward commercial-scale diamond substrates. In general, this is done by reacting methane and hydrogen at high temperatures, 900 °C or more. This results in not a single crystal but a forest of narrow columns. As they grow taller, the nanocolumns coalesce into a uniform film, but by the time they form high-quality polycrystalline diamond, the film is already very thick. This thick growth adds stress to the material and often leads to cracking and other problems.&lt;p&gt;But what if we used this polycrystalline coating as a heat spreader for other devices? If we could get diamond to grow within nanometers of transistors, get it to spread heat both vertically and laterally, and integrate it seamlessly with the silicon, metal, and dielectric in chips, it might do the job.&lt;/p&gt;&lt;p&gt;There were good reasons to think it would work. Diamond is electrically insulating, and it has a relatively low dielectric constant. That means it makes a poor capacitor, so signals sent through diamond-encrusted interconnects might not degrade much. Thus diamond could act as a “thermal dielectric,” one that is electrically insulating but thermally conducting.&lt;/p&gt;&lt;p&gt;Polycrystalline diamond could help reduce temperatures inside 3D chips. Diamond thermal vias would grow inside micrometers-deep holes so heat can flow from vertically from one chip to a diamond heat spreader in another chip that’s stacked atop it. Dennis Rich&lt;/p&gt;&lt;p&gt;For our plan to work, we were going to have to learn to grow diamond differently. We knew there wasn’t room to grow a thick film inside a chip. We also knew the narrow, spiky crystal pillars made in the first part of the growth process don’t transmit heat laterally very well, so we’d need to grow large-grained crystals from the start to get the heat moving horizontally. A third problem was that the existing diamond films didn’t form a coating on the sides of devices, which would be important for inherently 3D devices. But the biggest impediment was the high temperature needed to grow the diamond film, which would damage, if not destroy, an IC’s circuits. We were going to have to cut the growth temperature at least in half.&lt;/p&gt;&lt;p&gt;Just lowering the temperature doesn’t work. (We tried: You wind up, basically, with soot, which is electrically conductive—the opposite of what’s needed.) We found that adding oxygen to the mix helped, because it continuously etched away carbon deposits that weren’t diamond. And through extensive experimentation, we were able to find a formula that produced coatings of large-grained polycrystalline diamond all around devices at 400 °C, which is a survivable temperature for CMOS circuits and other devices.&lt;/p&gt;&lt;head rend="h2"&gt;Thermal Boundary Resistance&lt;/head&gt;&lt;p&gt;Although we had found a way to grow the right kind of diamond coatings, we faced another critical challenge—the phonon bottleneck, also known as thermal boundary resistance (TBR). Phonons are packets of heat energy, in the way that photons are packets of electromagnetic energy. Specifically, they’re a quantized version of the vibration of a crystal lattice. These phonons can pile up at the boundary between materials, resisting the flow of heat. Reducing TBR has long been a goal in thermal interface engineering, and it is often done by introducing different materials at the boundary. But semiconductors are compatible only with certain materials, limiting our choices.&lt;/p&gt;&lt;p&gt;Thermal scaffolding would link layers of heat-spreading polycrystalline diamond in one chip to those in another chip in a 3D-stacked silicon. The thermal pillars would traverse each chip’s interconnects and dielectric material to move heat vertically through the stack. Srabanti Chowdhury&lt;/p&gt;&lt;p&gt;In the end, we got lucky. While growing diamond on GaN capped with silicon nitride, we observed something unexpected: The measured TBR was much lower than prior reports led us to expect. (The low TBR was independently measured, initially by Martin Kuball at the University of Bristol, in England, and later by Samuel Graham Jr., then at Georgia Tech, who both have been coauthors and collaborators in several of our papers.)&lt;/p&gt;&lt;p&gt;Through further investigation of the interface science and engineering, and in collaboration with K.J. Cho at the University of Texas at Dallas, we identified the cause of the lower TBR. Intermixing at the interface between the diamond and silicon nitride led to the formation of silicon carbide, which acted as a kind of bridge for the phonons, allowing more efficient heat transfer. Though this began as a scientific discovery, its technological impact was immediate—with a silicon carbide interface, our devices exhibited significantly improved thermal performance.&lt;/p&gt;&lt;head rend="h2"&gt;GaN HEMTs: The First Test Case&lt;/head&gt;&lt;p&gt;We began testing our new low-TBR diamond coatings in gallium nitride high-electron-mobility transistors (HEMTs). These devices amplify RF signals by controlling current through a two-dimensional electron gas that forms within its channel. We leveraged the pioneering research on HEMTs done by Umesh Mishra’s laboratory at the University of California, Santa Barbara, where I had been a graduate student. The Mishra lab invented a particular form of the material called N-polar gallium nitride. Their N-polar GaN HEMTs demonstrate exceptional power density at high frequencies, particularly in the W-band, the 75- to 110-gigahertz part of the microwave spectrum.&lt;/p&gt;&lt;p&gt;RELATED: Gallium Nitride and Silicon Carbide Fight for Green Tech Domination&lt;/p&gt;&lt;p&gt;What made these HEMTs such a good test case is one defining feature of the device: The gate, which controls the flow of current through the device, is within tens of nanometers of the transistor’s channel. That means that heat is generated very close to the surface of the device, and any interference our diamond coating could cause would quickly show in the device’s operation.&lt;/p&gt;&lt;p&gt;We introduced the diamond layer so that it surrounded the HEMT completely, even on the sides. By maintaining a growth temperature below 400 °C, we hoped to preserve core device functionality. While we did see some decline in high-frequency performance, the thermal benefits were substantial—channel temperatures dropped by a remarkable 70 °C. This breakthrough could be a potentially transformative solution for RF systems, allowing them to operate at higher power than ever before.&lt;/p&gt;&lt;head rend="h2"&gt;Diamond in CMOS&lt;/head&gt;&lt;p&gt;We wondered if our diamond layer could also work in high-power CMOS chips. My colleagues at Stanford, H.-S. Philip Wong and Subhasish Mitra, have long championed 3D-stacked chip architectures. In CMOS computing chips, 3D stacking appears to be the most viable way forward to increase integration density, improve performance, and overcome the limitations of traditional transistor scaling. It’s already used in some advanced AI chips, such as AMD’s MI300 series. And it’s established in the high-bandwidth memory chips that pump data through Nvidia GPUs and other AI processors. The multiple layers of silicon in these 3D stacks are mostly connected by microscopic balls of solder, or in some advanced cases just by their copper terminals. Getting signals and power out of these stacks requires vertical copper links that burrow through the silicon to reach the chip package’s substrate.&lt;/p&gt;&lt;p&gt;In one of our discussions, Mitra pointed out that a critical issue with 3D-stacked chips is the thermal bottlenecks that form within the stack. In 3D architectures, the traditional heat sinks and other techniques used for 2D chips aren’t sufficient. Extracting heat from each layer is essential.&lt;/p&gt;&lt;p&gt;Our research could redefine thermal management across industries.&lt;/p&gt;&lt;p&gt;Our experiments on thermal boundary resistance in GaN suggested a similar approach would work in silicon. And when we integrated diamond with silicon, the results were remarkable: An interlayer of silicon carbide formed, leading to diamond with an excellent thermal interface.&lt;/p&gt;&lt;p&gt;Our effort introduced the concept of thermal scaffolding. In that scheme, nanometers-thick layers of polycrystalline diamond would be integrated within the dielectric layers above the transistors to spread heat. These layers would then be connected by vertical heat conductors, called thermal pillars, made of copper or more diamond. These pillars would connect to another heat spreader, which in turn would link to thermal pillars on the next chip in the 3D stack, and so on until the heat reached the heat sink or other cooling device.&lt;/p&gt;&lt;p&gt;The more tiers of computing silicon in a 3D chip, the bigger difference thermal scaffolding makes. An AI accelerator with more than five tiers would well exceed typical temperature limits unless the scaffolding was employed. Srabanti Chowdhury&lt;/p&gt;In a collaboration with Mitra, we used simulations of heat generated by real computational workloads to operate a proof-of-concept structure. This structure consisted of dummy heaters to mimic hot spots in a two-chip stack along with diamond heat spreaders and copper thermal pillars. Using this, we reduced the temperature to one-tenth its value without the scaffolding.&lt;p&gt;There are hurdles still to overcome. In particular, we still have to figure out a way to make the top of our diamond coatings atomically flat. But, in collaboration with industry partners and researchers, we are systematically studying that problem and other scientific and technological issues. We and our partners think this research could offer a disruptive new path for thermal management and a crucial step toward sustaining high-performance computing into the future.&lt;/p&gt;&lt;head rend="h2"&gt;Developing Diamond Thermal Solutions&lt;/head&gt;&lt;p&gt;We now intend to move toward industry integration. For example, we’re working with the Defense Advanced Research Projects Agency Threads program, which aims to use device-level thermal management to develop highly efficient and reliable X-band power amplifiers with a power density 6 to 8 times as efficient as today’s devices. The program, which was conceived and initially run by Tom Kazior, is a critical platform for validating the use of low-temperature diamond integration in GaN HEMT manufacturing. It’s enabled us to collaborate closely with industry teams while protecting both our and our partners’ processes. Defense applications demand exceptional reliability, and our diamond-integrated HEMTs are undergoing rigorous testing with industry partners. The early results are promising, guiding refinements in growth processes and integration techniques that we’ll make with our partners over the next two years.&lt;/p&gt;&lt;p&gt;But our vision extends beyond GaN HEMTs to other materials and particularly silicon computational chips. For the latter, we have an established collaboration with TSMC, and we’re expanding on newer opportunities with Applied Materials, Micron, Samsung, and others through the Stanford SystemX Alliance and the Semiconductor Research Corp. This is an extraordinary level of collaboration among otherwise fierce competitors. But then, heat is a universal challenge in chip manufacturing, and everyone is motivated to find the best solutions.&lt;/p&gt;&lt;p&gt;If successful, our research could redefine thermal management across industries. In my work on gallium nitride devices, I have seen firsthand how once-radical ideas like this transition to become industry standards, and I believe diamond-based heat extraction will follow the same trajectory, becoming a critical enabler for a generation of electronics that is no longer hindered by heat.&lt;/p&gt;&lt;p&gt;This article appears in the November 2025 print issue as “Diamond Blankets Will Chill Future Chips.”&lt;/p&gt;&lt;list rend="ul"&gt;&lt;item&gt;Better Computing Through CPU Cooling ›&lt;/item&gt;&lt;item&gt;The Radio We Could Send to Hell ›&lt;/item&gt;&lt;item&gt;Gallium Oxide: The Supercharged Semiconductor ›&lt;/item&gt;&lt;/list&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://spectrum.ieee.org/diamond-thermal-conductivity"/><published>2025-10-21T11:16:34+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45655161</id><title>Neural audio codecs: how to get audio into LLMs</title><updated>2025-10-22T05:39:23.439495+00:00</updated><content>&lt;doc fingerprint="2e1cc79b29380613"&gt;
  &lt;main&gt;
    &lt;p&gt;Thank you for the valuable feedback on the drafts: Chung-Ming Chien, Moritz Boehle, Richard Hladík, Eugene Kharitonov, Patrick Perez, and Tom Sláma. I’d also like to thank the rest of the Kyutai team for the the research discussions without which this article could not exist.&lt;/p&gt;
    &lt;p&gt;As of October 2025, speech LLMs suck. Many LLMs have voice interfaces, but they usually work by transcribing your speech, generating the answer in text, and using text-to-speech to read the response out loud. That’s perfectly fine in many cases (see Unmute), but it’s a wrapper, not real speech understanding. The model can’t hear the frustration in your voice and respond with empathy, it can’t emphasize important words in its answer, it cannot sense sarcasm, and so on.&lt;/p&gt;
    &lt;p&gt;Yes, there are LLMs (Gemini, ChatGPT’s Advanced Voice Mode, Qwen, Moshi) that understand and generate speech natively. But in practice, they’re either not as smart, or they behave like text model wrappers. Try asking any of them “Am I speaking in a low voice or a high voice?” in a high-pitched voice, and they won’t be able to tell you.&lt;/p&gt;
    &lt;p&gt;Clearly, speech LLMs lag behind text LLMs. But why? For text, we found out a few years ago that if you take a lot of text data, a big Transformer, and a lot of GPUs, you’ll get some pretty damn good text continuation models. Why can’t we just replace text with audio and get pretty damn good speech continuation models?&lt;/p&gt;
    &lt;p&gt;As a teaser, here’s what happens when you try to do that naively (warning, loud):&lt;/p&gt;
    &lt;p&gt;We’ll have a look at why audio is harder to model than text and how we can make it easier with neural audio codecs, the de-facto standard way of getting audio into and out of LLMs. With a codec, we can turn audio into larger discrete tokens, train models to predict continuations for these tokens, and then decode those back into audio: see animation above.&lt;/p&gt;
    &lt;p&gt;Kyutai folks have done a lot of work in this space, which is part of the reason I chose to cover this topic. We’ll start from the basics and build up all the way to Mimi, our neural audio codec. It was originally developed for Moshi and later adopted by others for their models, notably Sesame’s CSM.&lt;/p&gt;
    &lt;p&gt;To tokenize text, everybody uses a technique called byte-pair encoding and rarely changes the tokenizer: OpenAI has been using the same tokenizer since GPT-4o, an ancient model if you count in LLM years.&lt;/p&gt;
    &lt;p&gt;You can even get decent results without tokenizing text at all, just predicting individual characters. One of the first posts that got me excited about machine learning was Andrej Karpathy’s RNN effectiveness blog post from 2015. Karpathy trains a three-layer LSTM on a single GPU and gets it to generate decent-looking code and LaTeX:&lt;/p&gt;
    &lt;p&gt;Remember this was ten years ago, back when we didn’t even know that attention is all we need. Now compare Karpathy’s results to a sample from WaveNet, a model DeepMind published a year later:&lt;/p&gt;
    &lt;p&gt;Purely acoustically, the audio sounds good, but it rarely even manages to produce a single correct English word. We can’t be too hard on WaveNet, though. The samples from Karpathy’s RNNs are only a few thousand characters long, but this 10-second audio consists of 160k audio samples, and WaveNet creates it by painstakingly predicting sample-by-sample.&lt;/p&gt;
    &lt;p&gt;It’s difficult to build models that are coherent over time scales this long, and the model also takes very long to run for so many steps.&lt;/p&gt;
    &lt;p&gt;So instead of running the model to predict the samples one-by-one directly, we’d like to train a model to compress the audio into a more manageable size. We could compress the audio, use an LLM to predict a continuation in the compressed representation, and then decompress the result.&lt;/p&gt;
    &lt;p&gt;But first, let’s get a baseline model by generating audio sample by sample, like WaveNet does. The code for all of these experiments is open-source! Check it out here. I forked Andrej Karpathy’s nanoGPT repo, a simple implementation of GPT-2.&lt;/p&gt;
    &lt;p&gt;Text and audio are kind of the same from the perspective of the language model: it’s just tokens in, tokens out. The only thing we need to do is to quantize the continuous values of the samples into discrete buckets. Like WaveNet, we’ll use the "μ-law algorithm" to get 256 buckets. We’ll treat those as 256 possible tokens.&lt;/p&gt;
    &lt;p&gt;Let’s train a language model on audio tokenized like this. For the dataset, we’ll use the Libri-Light dataset, following AudioLM (with Neil Zeghidour, Eugene Kharitonov). Its train split contains 50k hours in total, but we’ll go with 1000 hours for this experiment. With this sample-by-sample tokenization, we end up with a dataset of 53 GB.&lt;/p&gt;
    &lt;p&gt;We train a small-ish transformer of 151.28M parameters, about the size of the smallest GPT-2 variant. When we sample from the model, it makes babbling sounds (warning, loud at times!):&lt;/p&gt;
    &lt;p&gt;Often, it goes into a “crackling mode” that it can’t seem to get out of:&lt;/p&gt;
    &lt;p&gt;I also trained a smaller model, which I teased at the beginning. It’s prone to generate nightmare fuel screeches (loud!):&lt;/p&gt;
    &lt;p&gt;As you can tell, we’re not AGI yet. It sounds speech-like, but you can’t make out a single word and the voice keeps changing. No wonder: the context size of the model is 2048, which, for 16 kHz audio, translates to 128ms, not even a the length of one word. Also, these 10-second examples took 30 minutes to generate on an H100, so we’re a few orders of magnitude away from being real-time.&lt;/p&gt;
    &lt;p&gt;So let’s build a neural audio codec to compress the audio. The hope is that if we reduce the sampling rate 100x, the model will also become “100x more coherent”. An old idea in machine learning is to do this using an autoencoder: a model that takes an input, compresses it into a smaller “latent space”, and then tries to reconstruct the original input.&lt;/p&gt;
    &lt;p&gt;In our case, we’ll want an autoencoder whose latent space is quantized so that we can feed the latents into a language model and produce continuations. (You can generate continuations with unquantized latents, but it’s trickier – see the Further reading section.)&lt;/p&gt;
    &lt;p&gt;Bear with me, because we’ll take a detour from audio: let’s build a quantized autoencoder on images from Fashion MNIST. We’ll take a subset with the first three classes: t-shirt/top, trouser, and pullover.&lt;/p&gt;
    &lt;p&gt;First, let’s train a regular autoencoder to encode the images into two-dimensional space:&lt;/p&gt;
    &lt;p&gt;Each frame shows one batch of training, with some batches skipped. The little images are the autoencoder’s reconstructions for the images in the batch. I’ve added colors for the three classes (t-shirt/top=blue trousers=green, pullover=yellow), but the autoencoder doesn’t get a class as input – the space just naturally clusters by class. Let's zoom in on a few reconstructions:&lt;/p&gt;
    &lt;p&gt;As you can tell, the reconstruction quality is not great. The images are blurry and the first two images are reconstructed to nearly the same thing. But we used a tiny network (4 fully connected layers for the encoder and decoder each) and projected into a mere two dimensions, so we can’t expect too much of our model.&lt;/p&gt;
    &lt;p&gt;Now let’s quantize these embeddings using a clustering. We’ll do something like k-means: we’ll maintain a list of the positions of the cluster centers. We initialize the positions randomly. For each training batch, we look at which embeddings would go to each cluster. (We don’t modify the embeddings, we just look at the assignment). Then we’ll nudge each cluster center towards the average position of these embeddings.&lt;/p&gt;
    &lt;p&gt;Also, if a center is unused for a while, we teleport it to a random embedding from the batch, because otherwise it has no way to get unstuck from its current position.&lt;/p&gt;
    &lt;p&gt;You can see the reconstructions of the cluster centers getting refined over time.&lt;/p&gt;
    &lt;p&gt;Next, we’ll make the encoder and decoder themselves better at handling quantized embeddings during training, because currently, we’re just fitting the clustering on top of an autoencoder that is not “aware” it’s being quantized. We’d like the autoencoder to adapt to the quantization as we train it. Currently, we’re doing this:&lt;/p&gt;
    &lt;code&gt;x = get_batch()
z = encoder(x)

x_reconstructed = decoder(z)

loss = reconstruction_loss(x, x_reconstructed)
&lt;/code&gt;
    &lt;p&gt;Instead of feeding the unquantized embedding into the decoder, we’ll first move it to the closest cluster:&lt;/p&gt;
    &lt;code&gt;x = get_batch()
z = encoder(x)

z_quantized = to_nearest_cluster(z)     # 👈
x_reconstructed = decoder(z_quantized)  # 👈

loss = reconstruction_loss(x, x_reconstructed)
&lt;/code&gt;
    &lt;p&gt;There is a snag: if we do this, we won’t be able to train the autoencoder any more, because the quantization operation is not differentiable, meaning there is no gradient flowing from the loss to the weights of the encoder. Essentially, we’re no longer able to answer the question: “if I want the loss to decrease a bit, in which direction should I nudge the encoder’s weights?”&lt;/p&gt;
    &lt;p&gt;We’ll fix this problem by pretending it doesn’t exist. Yes, really. We’ll think of &lt;code&gt;z_quantized&lt;/code&gt; as &lt;code&gt;z&lt;/code&gt; moved by an arbitrary vector that doesn’t affect the gradient. That will make the gradient of &lt;code&gt;z&lt;/code&gt; equal to that of &lt;code&gt;z_quantized&lt;/code&gt;, which is why this is also known as the straight-through estimator of the gradient.&lt;/p&gt;
    &lt;code&gt;x = get_batch()
z = encoder(x)

residual = z - to_nearest_cluster(z)
# .detach() means "forget that this needs a gradient"
z_quantized = z - residual.detach()
x_reconstructed = decoder(z_quantized)

loss = reconstruction_loss(x, x_reconstructed)
&lt;/code&gt;
    &lt;p&gt;In the forward pass, &lt;code&gt;z_quantized&lt;/code&gt; is set to the same value as before, but importantly, the gradient of &lt;code&gt;z&lt;/code&gt; is now equal to that of &lt;code&gt;z_quantized&lt;/code&gt; rather than just being 0 because of the non-differentiable &lt;code&gt;to_nearest_cluster(z)&lt;/code&gt; operation.&lt;/p&gt;
    &lt;p&gt;There is a price to pay for this lie. When training, the encoder’s weights will be updated to improve the reconstruction loss, but they’re updated as if the quantization didn’t happen, so they won’t move in the optimal direction. But as long as the embeddings stick close to their cluster centers, the gradient direction will still be mostly correct.&lt;/p&gt;
    &lt;p&gt;We can actually encourage the encoder to make embeddings that are easily quantizable by adding a commitment loss: a penalty for each point based on how far it is from its cluster center. The gradient of this loss will push the points closer to their cluster centers.&lt;/p&gt;
    &lt;p&gt;By quantizing at training time and adding a commitment loss, it’s no longer just a clustering being fit on top of the embeddings. The model itself is trained to be good for quantization.&lt;/p&gt;
    &lt;p&gt;You’ll notice that the training dynamics look different: the commitment loss adds a certain “stiffness” that doesn’t allow the embeddings to move around as easily.&lt;/p&gt;
    &lt;p&gt;Here’s what the reconstructions look like when we use the quantized representations:&lt;/p&gt;
    &lt;p&gt;Notice how the first two images are reconstructed to exactly the same image. That’s simply because their embeddings got assigned to the same cluster and therefore quantized to the same value.&lt;/p&gt;
    &lt;p&gt;The model described here is known as a “VQ-VAE”: a vector-quantized variational autoencoder. The word “variational” here is just a vestigial leftover that doesn’t mean anything anymore.&lt;/p&gt;
    &lt;p&gt;To improve the reconstruction fidelity, we can just increase the number of cluster centers. But keeping track of too many centers can get prohibitively expensive in terms of compute and memory required, so we’ll do a clever trick: if we want 2^20 (~1M) possible values, we won’t create 2^20 clusters directly. Instead, we’ll use two separate quantizers with 2^10=1024 clusters and combine their result. Each embedding will then be quantized to a tuple of two integers in [0..1023], yielding 2^20 possible combinations.&lt;/p&gt;
    &lt;p&gt;Ok, but how? Well, recall the &lt;code&gt;residual&lt;/code&gt; variable we used in the straight-through estimator, defined as &lt;code&gt;z - to_nearest_cluster(z)&lt;/code&gt; the shift from the quantized embedding to the unquantized one. It represents the part of the original vector &lt;code&gt;z&lt;/code&gt; that we didn’t manage to take into account when quantizing to &lt;code&gt;to_nearest_cluster(z)&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;So for each embedding in the batch, we have a corresponding residual vector. The solution is obvious: we’ll quantize these residuals exactly the same way we did with the original embeddings, by training another vector quantizer.&lt;/p&gt;
    &lt;p&gt;This time, the 2D positions for a single quantizer don’t define images because we need to combine the two quantizers, so we’ll just visualize everything as dots:&lt;/p&gt;
    &lt;p&gt;Each image is then represented as the index of the cluster of the embedding and that of the residual. Let’s try to reconstruct a few images with this two-level quantizer:&lt;/p&gt;
    &lt;p&gt;The reconstructions of the first two images are similar, but no longer the exact same: the first image is represented as (4, 3) and the second as (4, 5). In other words, they share the same token for the first level, but differ in how the residual is quantized. The differences are quite subtle, so here’s a comparison between the one-level and two-level reconstructions:&lt;/p&gt;
    &lt;p&gt;I’d like to emphasize that the second quantization level makes modifications to the embedding, not the output pixels directly. This can be seen by the fact that the leftmost and rightmost image are encoded as (4, 3) and (30, 3) respectively. So they have the same residual code, 3, but it modifies the two reconstructed images in different ways.&lt;/p&gt;
    &lt;p&gt;Clearly, the reconstructions are still not very accurate. The upper bound on the quality is the reconstruction from unquantized embeddings, so if your autoencoder is bad (and ours is), improving the quantization won’t save you.&lt;/p&gt;
    &lt;p&gt;We’ll stop here, but a natural extension to this idea is to go beyond two levels. Just take the residuals of the two-level reconstruction and quantize those, and so on. This generalized Residual Vector Quantization algorithm looks like this:&lt;/p&gt;
    &lt;code&gt;def rvq_quantize(z):
    residual = z
    codes = []

    for level in range(levels):
        quantized, cluster_i = to_nearest_cluster(level, residual)
        residual -= quantized
        codes.append(cluster_i)

    return codes
&lt;/code&gt;
    &lt;p&gt;Residual vector quantization was first applied to neural audio codecs in SoundStream, but the idea has been around since the 80s.&lt;/p&gt;
    &lt;p&gt;Applying RVQ to audio is fairly straightforward. As our autoencoder, we’ll use a convolutional neural network (CNN) similar to what Jukebox uses. The details of the architecture aren’t too important here. What’s important is that it’s a network that takes an audio with t samples and converts it to a vector of shape (t/128, 32). In other words, it downsamples by a factor of 128 and gives us 32-dimensional float representations. The decoder then takes the (t/128, 32) embeddings and decodes them back into t samples.&lt;/p&gt;
    &lt;code&gt;audio = get_batch()               # shape: [B, T]
z = encoder(audio)                # shape: [B, T/128, 32]
audio_reconstructed = decoder(z)  # shape: [B, T]
&lt;/code&gt;
    &lt;p&gt;As before, we’ll add an RVQ after the encoder. The only difference from the image case is that for each audio sample, we have t/128 embedding vectors, not just a single one as we did for images. We just quantize these independently (even though the encoder “sees” more audio than what corresponds to that one vector). During training, we also have a batch dimension, so our model now looks like this:&lt;/p&gt;
    &lt;code&gt;audio = get_batch()                         # [B, T]
z = encoder(audio)                          # [B, T/128, 32]

# Combine the batch and time dimensions
z = rearrange(                              # [B*T/128, 32]
    z, "b t_emb d -&amp;gt; (b t_emb) d"
)

codes = rvq_quantize(z)           # integers, [B*T/128, levels]
z_quantized = codes_to_embeddings(codes)    # [B*T/128, 32]
z_quantized = rearrange(                    # [B, T/128, 32]
    z, "(b t_emb) d -&amp;gt; b t_emb d"
)

audio_reconstructed = decoder(z_quantized)  # [B, T]
&lt;/code&gt;
    &lt;p&gt;The last missing piece before we can train our first neural audio codec is a loss function. There’s a whole rabbit hole we could go into about which one to choose, but we’ll avoid it and just use a very simple one. We’ll compute the log amplitude spectrogram of the original and reconstructed audio, and take their difference. The loss is the mean square of this difference between spectrograms.&lt;/p&gt;
    &lt;p&gt;To make it harder for the model to overfit to this loss, we take the spectrogram with three different parameters for the short-time Fourier transform, and let our loss be the mean between the three sub-losses. This is called the multi-scale spectral loss.&lt;/p&gt;
    &lt;p&gt;Finally, let’s train some codecs! We’ll look at how varying the number of RVQ levels affects the reconstruction quality. As we expected, increasing the number of levels helps, decreasing the spectral loss:&lt;/p&gt;
    &lt;p&gt;Let’s hear what the codecs sound like. We’ll use the three codecs to reconstruct this audio from the Expresso dataset:&lt;/p&gt;
    &lt;p&gt;And the reconstructions:&lt;/p&gt;
    &lt;p&gt;Clearly, the audio gets better as we add more RVQ levels.&lt;/p&gt;
    &lt;p&gt;Even with 16 levels, there is some crackling, the audio sounds muffled, and there is a constant high-pitched noise. Later we’ll discuss how we could improve the codec further, but for demonstration purposes, this will do.&lt;/p&gt;
    &lt;p&gt;So now we have a neural audio codec: we can turn audio into LLM-friendly tokens and back. Codec just means a tokenizer for audio, but we say codec because that’s the term used for classic compression like MP3. I’ll be using codec and tokenizer interchangeably.&lt;/p&gt;
    &lt;p&gt;Let’s come back to what we wanted to do in the first place: modeling audio. Specifically, we’ll make a model that can take an audio prefix and generate a plausible continuation for it.&lt;/p&gt;
    &lt;p&gt;Just as a reminder, we want to train good audio LLMs so that we have models that understand and produce speech natively, understanding emotion, emphasis, and so on. They could also be fine-tuned into text-to-speech, speech-to-text, or translation models, among others.&lt;/p&gt;
    &lt;p&gt;So now that you’re convinced that audio LLMs are the path to AGI, let’s train a few.&lt;/p&gt;
    &lt;p&gt;For our dataset, we’ll use Libri-Light, like we did for our sample-by-sample model earlier. This time we’ll use 10000h of audio instead of 1000h. It’s a dataset of public-domain audiobooks, so if we have a good model for it, maybe we’ll be able to generate more stories. (Don’t get your hopes up too much.) All we need to do is to convert the audio dataset into a sequence of discrete tokens so that we can feed it into an LLM.&lt;/p&gt;
    &lt;p&gt;We’ll do that using our 8-level RVQ codec. From an audio with t samples, we’ll get an array of tokens of shape (t/128, 8). But now there’s an issue: how to deal with the fact that for each time step, there’s not one but eight tokens? This is not a problem we have to deal with in text LLMs, where we have a single sequence of tokens.&lt;/p&gt;
    &lt;p&gt;We’ll do the simplest thing possible and just flatten the array into 1D of shape (t/128 * 8), and have our LLM predict the eight levels in separate time steps.&lt;/p&gt;
    &lt;p&gt;The big disadvantage is that we lose some of our temporal compression. We downsampled the audio 128x, but now we’re inflating it 8x again by flattening the levels. That makes inference less efficient, and possibly worse quality because the effective context size decreases. We'll be using the 8 RVQ codec rather than the 16 RVQ one to avoid making the compression even worse.&lt;/p&gt;
    &lt;p&gt;You could also predict all RVQ levels for a single step at once (”parallel pattern”), but it also makes things harder for the model because it has to decide on all levels at once. There are a bunch of other schemes people have tried to balance compression and quality. Here are a few tried out in MusicGen:&lt;/p&gt;
    &lt;p&gt;Interestingly, as of 2025, there is no single solution that “won”: every paper does something different, and the schemes can get quite involved. Just look at this diagram from MiMo-Audio, a model released in September 2025:&lt;/p&gt;
    &lt;p&gt;Time to finally train a codec-wrapped language model! As I’ve mentioned, our code is based on Andrej Karpathy’s nanoGPT codebase for training text LLMs. We just need to modify it to accept audio as input. But that’s easy, because LLMs don’t care about what kind of tokens you’re feeding in – it’s all just numbers. Once we’ve tokenized the dataset and flattened it into a 1D sequence, we’re good to go. Tokenized this way, our 10000 hours of audio take up 134 GB. For comparison, storing this much data as uncompressed audio would take over 1 TB.&lt;/p&gt;
    &lt;p&gt;We’re going to use the exact same model architecture and hyperparameters as for the sample-by-sample model: the only difference is in the tokenization. We also have a 10x bigger dataset, but the sample-by-sample model can’t even fit the dataset with 1k hours, so more data wouldn’t save it.&lt;/p&gt;
    &lt;p&gt;I trained the model on 8 H100s for about 5 days. To get some samples, I decided to prompt the model with a sample of Libri-Light reading of two lines from Michael Field’s poem July. (As I learned when working on this, Michael Field is a pen name of Katherine Harris and Edith Emma Cooper.) Let’s see what kind of poetry we can get from our model:&lt;/p&gt;
    &lt;p&gt;There are some signs of life, but we don’t have a poet yet. It sounds like somebody speaking behind a curtain. You can’t really make out what it’s saying, but the intonation is there: it sounds like somebody reading from a book, which is indeed what the model was trained on.&lt;/p&gt;
    &lt;p&gt;It also maintains a coherent voice, until it decides for the last few seconds to switch to a different one. That is also consistent with the data: we sample the training data from a concatenation of all the audiobooks chopped up into segments and mixed together, so the model does encounter boundaries between different speakers.&lt;/p&gt;
    &lt;p&gt;Our codec was deliberately simplistic, which explains why the results aren't great—but there's been a good amount of research on neural audio codecs in the last four years that we could leverage. We won’t implement all the improvements here, but instead we’ll look at what happens when we use Mimi as the tokenizer.&lt;/p&gt;
    &lt;p&gt;Mimi is a modern neural audio codec built here at Kyutai for Moshi, our audio language model. It’s since been used as the tokenizer for other models as well, like Sesame CSM, VoXtream, and LFM2-Audio.&lt;/p&gt;
    &lt;p&gt;Unsurprisingly, Mimi sounds a lot better than the homemade codec we trained earlier.&lt;/p&gt;
    &lt;p&gt;Instead of the multi-scale spectral loss, Mimi uses an adversarial loss, like a GAN. There’s a discriminator network that tries to classify audios as being original or reconstructed by the codec, and the goal of the codec is to fool this discriminator.&lt;/p&gt;
    &lt;p&gt;Another improvement Mimi adds is using RVQ dropout: it uses 32 RVQ levels but during training, the reconstruction is sometimes randomly truncated to a lower number of levels. That allows us to run Mimi for a lower number of RVQ levels at inference time and still get decent results, because it doesn’t rely on all levels being present. For our codec, we had to train separately.&lt;/p&gt;
    &lt;p&gt;Let’s hear our example audio reconstructed with Mimi:&lt;/p&gt;
    &lt;p&gt;Original&lt;/p&gt;
    &lt;p&gt;For our purposes, a variant with fewer levels might have the advantage of being easier to model because it’s more compressed. Let’s train models with 8- and 32-level Mimi and compare the results.&lt;/p&gt;
    &lt;p&gt;I trained the exact same model architecture as before, the only thing that changes is the tokenizer. It’s 10k hours from Libri-Light as the dataset, just like when we used our simple codec. Mimi has a sample rate of 24 kHz but Libri-Light uses 16 kHz, which puts a cap on how good it can sound, since we lose the higher frequencies of the audio.&lt;/p&gt;
    &lt;p&gt;Mimi downsamples the audio a lot more aggressively, too: its sample rate is 12.5 frames per second, whereas we used 125 frames per second for our codec – 10x higher! This means the dataset is also smaller on disk. With our codec, it took 134 GB, but for Mimi it’s “just” 54 GB.&lt;/p&gt;
    &lt;p&gt;Here’s a poem generated with the model trained on Mimi-tokenized data. I prompted it with two lines from the poem, as before:&lt;/p&gt;
    &lt;p&gt;Here is my best attempt at a transcription:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;When the grass is gone&lt;/p&gt;&lt;lb/&gt;And corn still grassy;&lt;lb/&gt;Illness worried in the fur&lt;lb/&gt;this and pelan in stones&lt;lb/&gt;during the turan’s ciscerey&lt;lb/&gt;headforths nepet Paul Twain.&lt;lb/&gt;He sees zin in them.&lt;/quote&gt;
    &lt;p&gt;A tad too surrealist for my taste, but maybe Lewis Carroll would like it.&lt;/p&gt;
    &lt;p&gt;I have a confession to make: I lied to you just now. But just a bit, and for didactic purposes. In fact, the model above was trained on audio from a 31-level Mimi, where I omitted the very first level, which contains the “semantic token”.&lt;/p&gt;
    &lt;p&gt;The role of this token is to represent semantic information of the audio, without necessarily aiding reconstruction. I won’t go into how these work, but in one sentence, Mimi’s semantic tokens are distilled from WavLM, which you can think of as a BERT for speech.&lt;/p&gt;
    &lt;p&gt;To get a feeling for what information semantic tokens encode, let’s take this example audio, passed through Mimi:&lt;/p&gt;
    &lt;p&gt;Now let’s train a language model trained on the full Mimi, including semantic tokens. We’re going to run the model in a way where we keep the semantic tokens from the original audio but we discard the others, and let the model predict them. That means the information from the semantic tokens is fixed (”teacher-forced”), but the model is free to decide the others according to what continuations it finds plausible.&lt;/p&gt;
    &lt;p&gt;Listen to two different reconstructions we obtain this way:&lt;/p&gt;
    &lt;p&gt;The voice is completely different, but it’s saying the same thing! This means the semantic tokens encode what the person is saying, but are invariant to the voice. That’s useful because it helps the model focus on what to say, not how to say it. In that regard, they’re closer to text tokens, which also don’t contain information about the voice, intonation, timing, or emotion.&lt;/p&gt;
    &lt;p&gt;Now let’s take the model trained on semantic Mimi and ask it to complete the poem:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;When grass is gone&lt;/p&gt;&lt;lb/&gt;and corn still grassy;&lt;lb/&gt;from the man was nothing moan.&lt;lb/&gt;The low death and heart&lt;lb/&gt;She came fyde wood.&lt;lb/&gt;A finteriest, a fall,&lt;lb/&gt;all them.&lt;/quote&gt;
    &lt;p&gt;It still makes up words and the sentences are not too coherent, but clearly, the proportion of real words is much higher; the model is “more semantic”. The acoustic quality is the same, which is what we’d expect.&lt;/p&gt;
    &lt;p&gt;Let’s listen to a second poem:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;When grass is gone&lt;/p&gt;&lt;lb/&gt;and corn still grassy;&lt;lb/&gt;hope won and she&lt;lb/&gt;who is just a night in Tatan&lt;lb/&gt;in doe ock-ohm?&lt;lb/&gt;the whom?&lt;/quote&gt;
    &lt;p&gt;Indeed, the whom?&lt;/p&gt;
    &lt;p&gt;We can sacrifice some acoustic quality to improve the semantics by reducing the number of RVQ levels. Let’s do 8. That way, we get higher audio compression, and a proportionally higher part of the loss comes from the semantic token, since now it’s 1/8 tokens and not just 1/32.&lt;/p&gt;
    &lt;p&gt;One of the first things I noticed about this model is that it learned to memorize the Librivox notice, so it sometimes generates things like:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Chapter 6 of The Founday, by R. Auclair.&lt;/p&gt;&lt;lb/&gt;This is a Librivox recording. All Librivox recordings are in the public domain. For information, or to volunteer, please visit librivox.org.&lt;lb/&gt;Reading by: Kelvert&lt;/quote&gt;
    &lt;p&gt;Repeating the training data is generally not what you want, but in our case it’s a great sign of life, because the previous models couldn’t even manage that. It also makes up the book, author, and reader, so there is still novelty here.&lt;/p&gt;
    &lt;p&gt;Now let’s try to make some more poetry:&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;When grass is gone&lt;/p&gt;&lt;lb/&gt;and corn still grassy;&lt;lb/&gt;When so we could say&lt;lb/&gt;that in fairy interesting wife&lt;lb/&gt;who lay there and gone&lt;lb/&gt;that save the rosy light of life&lt;lb/&gt;Jay Dien, the antique mollity&lt;lb/&gt;and a mollity the beast of gray failed summon&lt;p&gt;end of poem.&lt;/p&gt;&lt;p&gt;This recording is in the public domain.&lt;/p&gt;&lt;p&gt;[different voice]&lt;/p&gt;&lt;lb/&gt;So we have formed a float that sent in would rattle down. The piece of opportunity reading and assimila—&lt;/quote&gt;
    &lt;p&gt;This is great. There are several signs of the model being better than the previous ones. I love that it makes up the word “mollity” and then repeats it in the next line. Also, it realizes that it’s reciting a poem and ends the section with “end of poem”. Then it decides it’s the end of the chapter/section and it ends with the “This recording is in the public domain.” disclaimer. After that, it changes the voice and continues talking. That makes sense, since the clips from various audiobooks are just shuffled and concatenated during training, so here the model simulated a clip boundary.&lt;/p&gt;
    &lt;p&gt;We might get even better results by weighing the loss of the semantic tokens higher than the acoustic tokens, to make the model focus more on the meaning than the sound – in fact, Moshi uses a semantic loss factor of 100x! But we have to stop somewhere.&lt;/p&gt;
    &lt;p&gt;We’ve managed to use neural audio codecs to make an audio language model that generates somewhat coherent speech. Obviously, that’s not where the state of the art is in 2025 (and we’re not trying to reach it here) but keep in mind that by using the exact same model without neural audio codecs gives us this:&lt;/p&gt;
    &lt;p&gt;Of course, still a long way to go to match text models! Currently, there seems to be a trade-off between speech understanding and reasoning abilities. At the beginning, I mentioned that the speech-native models (Gemini, ChatGPT’s Advanced Voice Mode, Qwen, Moshi) aren’t able to tell you whether you’re speaking in a high or low voice, despite the fact that they’re trained to natively understand audio. This is likely because they’re trained on a lot of data generated synthetically with text-to-speech and/or because understanding the tone of the voice (apparently) doesn’t help the models make more accurate predictions.&lt;/p&gt;
    &lt;p&gt;Kyutai took a stab at creating a voice chat based on an audio language model with Moshi (demo, paper), released in July 2024. Moshi might not be the AI you’d pick to do your homework for you, but cut it some slack: it was the first end-to-end voice AI, released even before OpenAI’s Advanced Voice Mode.&lt;/p&gt;
    &lt;p&gt;Moshi models an “inner monologue” text stream in parallel with audio streams for itself and the user. The text stream is helps it plan what it’s going to say, and ablations showed that the text stream helps the model massively. At the same time, it’s a bit sad: most of the reasoning seems to be delegated to the text stream and the audio streams are just there to provide an integrated speech-to-text and text-to-speech.&lt;/p&gt;
    &lt;p&gt;It’s not just Moshi: as the “am I speaking in a high voice” experiment shows, this over-reliance on text in favor of audio is an issue for all audio LLMs. And that’s even though the dominant modeling approach is somewhat different than Moshi’s: interleaving text and audio tokens instead of modeling them in parallel streams.&lt;/p&gt;
    &lt;p&gt;Over a year after Moshi, audio models still lag behind text LLMs. But why? To me, this mysterious unsolved “modality gap” makes audio ML an exciting field to work on.&lt;/p&gt;
    &lt;p&gt;Thank you for reading! The code for the experiments is here, and for the animations here.&lt;/p&gt;
    &lt;p&gt;Here are some papers to check out if you'd like to learn more. This list is naturally Kyutai-centric because that's the school of thought I'm exposed to; my goal is not to do a complete review of the field.&lt;/p&gt;
    &lt;p&gt;van den Oord et al., 2016. WaveNet: A Generative Model for Raw Audio&lt;/p&gt;
    &lt;p&gt;Mehri et al., 2016. SampleRNN: An Unconditional End-to-End Neural Audio Generation Model&lt;/p&gt;
    &lt;p&gt;van den Oord et al., 2017. Parallel WaveNet: Fast High-Fidelity Speech Synthesis&lt;/p&gt;
    &lt;p&gt;Kumar et al., 2019. MelGAN: Generative Adversarial Networks for Conditional Waveform Synthesis&lt;/p&gt;
    &lt;p&gt;Kong et al., 2020. HiFi-GAN: Generative Adversarial Networks for Efficient and High Fidelity Speech Synthesis&lt;/p&gt;
    &lt;p&gt;van den Oord et al., 2017. Neural Discrete Representation Learning&lt;/p&gt;
    &lt;p&gt;Esser et al., 2020. Taming Transformers for High-Resolution Image Synthesis&lt;/p&gt;
    &lt;p&gt;Lakhotia et al., 2021. On Generative Spoken Language Modeling from Raw Audio&lt;/p&gt;
    &lt;p&gt;Zeghidour et al., 2021. SoundStream: An End-to-End Neural Audio Codec&lt;/p&gt;
    &lt;p&gt;Lee et al., 2022. Autoregressive Image Generation using Residual Quantization&lt;/p&gt;
    &lt;p&gt;Défossez et al., 2022. High Fidelity Neural Audio Compression&lt;/p&gt;
    &lt;p&gt;Hsu et al., 2021. HuBERT: Self-Supervised Speech Representation Learning by Masked Prediction of Hidden Units&lt;/p&gt;
    &lt;p&gt;Défossez et al., 2024. Moshi: a speech-text foundation model for real-time dialogue&lt;/p&gt;
    &lt;p&gt;Dieleman, 2025. Generative modelling in latent space&lt;/p&gt;
    &lt;p&gt;Peng et al., 2025. VibeVoice Technical Report&lt;/p&gt;
    &lt;p&gt;Rouard et al., 2025. Continuous Audio Language Models&lt;/p&gt;
    &lt;p&gt;Here are some modern LLMs (as of October 2025) that natively support audio. Again, I'm not trying to maintain a complete list here, and I'm not including models without any published technical details.&lt;/p&gt;
    &lt;p&gt;Moshi (Kyutai, 2023): the online demo of Moshi, Kyutai's audio language model – see above.&lt;/p&gt;
    &lt;p&gt;CSM (Sesame, 2025): a natural-sounding voice chat, based on Llama + Mimi.&lt;/p&gt;
    &lt;p&gt;Qwen3-Omni (Alibaba, 2025): Alibaba's multimodal LLM. The audio output is created by a "talker" model whose outputs are not fed back into, which, as far as I can tell, basically makes it a text model with an integrated text-to-speech.&lt;/p&gt;
    &lt;p&gt;MiMo-Audio (Xiaomi, 2025): an audio-only language model that shows promising few-shot capabilities, similar to what GPT-2 did for text.&lt;/p&gt;
    &lt;p&gt;LFM2-Audio (Liquid AI, 2025): audio/text language model, uses Mimi as the codec.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://kyutai.org/next/codec-explainer"/><published>2025-10-21T12:55:59+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45655188</id><title>NASA chief suggests SpaceX may be booted from moon mission</title><updated>2025-10-22T05:39:23.203848+00:00</updated><content>&lt;doc fingerprint="bf8990bd6db69da9"&gt;
  &lt;main&gt;
    &lt;p&gt;NASA may sideline SpaceX and choose a different company to land its astronauts on the moon later this decade, acting space agency chief Sean Duffy suggested during TV appearances Monday.&lt;/p&gt;
    &lt;p&gt;Duffy emphasized that he believes SpaceX, which has a $2.9 billion contract to provide the lunar lander astronauts would ride to the moon’s surface, is lagging behind schedule, potentially thwarting NASA’s efforts to return humans to the moon before China amid a new space race.&lt;/p&gt;
    &lt;p&gt;“They push their timelines out, and we’re in a race against China,” Duffy told CNBC’s “Squawk Box” on Monday morning, referring to SpaceX’s development of Starship — the vehicle the company plans to use as a lunar lander for NASA. “So, I’m going to open up the contract. I’m going to let other space companies compete with SpaceX.”&lt;/p&gt;
    &lt;p&gt;If NASA were to cancel or amend its contract with SpaceX, it could signal a remarkable reversal of a plan the space agency has had in place since 2021. That’s when NASA chose Starship — which is still in the early stages of development and has racked up three in-flight failures and a couple successful suborbital test flights so far in 2025 — to serve as lunar lander during the historic moon landing mission, called Artemis III.&lt;/p&gt;
    &lt;p&gt;Duffy’s remarks on Monday come as that 2021 decision is facing new scrutiny from space industry leaders who are concerned that the logistics involved with using SpaceX’s Starship are too complex and may cause NASA to lose the new moon race, as CNN previously reported. The Artemis III moon-landing mission is currently set to take place as soon as mid-2027.&lt;/p&gt;
    &lt;p&gt;SpaceX did not respond to a request for comment on Duffy’s remarks.&lt;/p&gt;
    &lt;head rend="h2"&gt;What could happen next&lt;/head&gt;
    &lt;p&gt;The exact timeline for NASA to potentially alter its deal with SpaceX or bring on a new contractor was not immediately clear. In a separate interview on Monday with Fox News’ “Fox &amp;amp; Friends,” Duffy said he’s “in the process of opening that contract up,” referring to the Artemis lunar lander agreement.&lt;/p&gt;
    &lt;p&gt;NASA already has two different companies contracted to provide lunar landers: SpaceX with its Starship vehicle, and Blue Origin, the space venture founded by Amazon billionaire Jeff Bezos, which is developing a lander called Blue Moon.&lt;/p&gt;
    &lt;p&gt;It is Starship, however, that is slated to fly the Artemis III mission in 2027, which would mark the first time astronauts have set foot on the lunar surface since the Apollo program concluded five decades ago. (Blue Origin, which received its NASA contract in 2023, is looking to use Blue Moon to complete Artemis missions later in the program, such as Artemis V.)&lt;/p&gt;
    &lt;p&gt;In a statement, NASA press secretary Bethany Stevens said that the space agency gave SpaceX and Blue Origin until October 29 to present “acceleration approaches” for lunar lander development.&lt;/p&gt;
    &lt;p&gt;“NASA is also going to request plans from the entire commercial space industry - through an RFI (or Request for Information) - for how NASA can increase the cadence of our mission to the Moon,” the statement reads. “President Trump and Secretary Duffy have a mission to beat China back to the Moon. That’s why they are harnessing the power of the American space industry and seeking solutions to develop more ways to land on the Moon.”&lt;/p&gt;
    &lt;p&gt;The timeline of Artemis III has been the focus of hawkish lawmakers concerned that the landing will not occur before taikonauts — or Chinese astronauts — reach the moon. China has said it will accomplish that feat by 2030.&lt;/p&gt;
    &lt;p&gt;In his remarks to CNBC, Duffy suggested it could be Blue Origin that takes over SpaceX’s position in the Artemis III mission.&lt;/p&gt;
    &lt;p&gt;In response to CNN’s request for comment regarding Duffy’s remarks, Blue Origin said only that it is “ready to support.”&lt;/p&gt;
    &lt;p&gt;However, Duffy also warned that NASA may opt to open up the competition more broadly to providers that do not yet have contracts.&lt;/p&gt;
    &lt;p&gt;“If SpaceX is behind, but Blue Origin can do it before them, good on Blue Origin,” Duffy said. “But … we’re not going to wait for one company. We’re going to push this forward and win the second space race against the Chinese.”&lt;/p&gt;
    &lt;p&gt;It’s unclear if NASA’s plans to issue a RFI will result in any new companies securing contracts. In government contracting parlance, RFIs are typically considered part of an informal fact-finding process whereas Requests for Proposals, or RFPs, are a more formal solicitation.&lt;/p&gt;
    &lt;p&gt;Space industry experts have expressed concerns about the timelines for both SpaceX’s Starship and Blue Origin’s Blue Moon, noting that the vehicles are complex and may need to be refueled in orbit.&lt;/p&gt;
    &lt;p&gt;In-orbit refueling has never been attempted, the experts noted, and lunar landers requiring such a step could require prohibitively long development timelines.&lt;/p&gt;
    &lt;p&gt;It’s not clear what other US companies may be in a position to join SpaceX and Blue Origin in competing for NASA Artemis contracts.&lt;/p&gt;
    &lt;p&gt;Dynetics, an aerospace company based in Alabama, was among the companies that originally bid for a lunar lander contract alongside Blue Origin and SpaceX. Dynetics did not immediately reply to a request for comment on Monday.&lt;/p&gt;
    &lt;p&gt;Editor’s Note: This story has been updated with additional details.&lt;/p&gt;
    &lt;p&gt;Sign up for CNN’s Wonder Theory science newsletter. Explore the universe with news on fascinating discoveries, scientific advancements and more.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.cnn.com/2025/10/20/science/nasa-spacex-moon-landing-contract-sean-duffy"/><published>2025-10-21T12:58:43+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45655263</id><title>Ilo – a Forth system running on UEFI</title><updated>2025-10-22T05:39:22.709120+00:00</updated><content>&lt;doc fingerprint="2ee3dad700bcafae"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt; While this site doesn't provide GIF conversion at the moment, you can still do it yourself with the help of asciinema GIF generator utility - agg. &lt;/p&gt;
      &lt;p&gt;Once you have it installed, generate a GIF with the following command:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;agg https://asciinema.org/a/Lbxa2w9R5IbaJqW3INqVrbX8E demo.gif&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;Or, if you already downloaded the recording file:&lt;/p&gt;
      &lt;quote&gt;
        &lt;code&gt;agg demo.cast demo.gif&lt;/code&gt;
      &lt;/quote&gt;
      &lt;p&gt;Check &lt;code&gt;agg --help&lt;/code&gt; for all available options. You can change font
          family and size, select color theme, adjust speed and more.&lt;/p&gt;
      &lt;p&gt;See agg manual for full usage instructions.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://asciinema.org/a/Lbxa2w9R5IbaJqW3INqVrbX8E"/><published>2025-10-21T13:05:21+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45656223</id><title>LLMs can get "brain rot"</title><updated>2025-10-22T05:39:22.620076+00:00</updated><content>&lt;doc fingerprint="2d43abd1eeb79f40"&gt;
  &lt;main&gt;
    &lt;p&gt;We propose and test the LLM Brain Rot Hypothesis: continual exposure to junk web text induces lasting cognitive decline in large language models (LLMs). To causally isolate data quality, we run controlled experiments on real Twitter/X corpora, constructing junk and reversely controlled datasets via two orthogonal operationalizations: M1 (engagement degree) and M2 (semantic quality), with matched token scale and training operations across conditions.&lt;/p&gt;
    &lt;p&gt;Contrary to the control group, continual pre-training of 4 LLMs on the junk dataset causes non-trivial declines (Hedges' g&amp;gt;0.3) on reasoning, long-context understanding, safety, and inflating "dark traits" (e.g., psychopathy, narcissism). The gradual mixtures of junk and control datasets also yield dose-response cognition decay: for example, under M1, ARC-Challenge with Chain Of Thoughts drops 74.9 → 57.2 and RULER-CWE 84.4 → 52.3 as junk ratio rises from 0% to 100%.&lt;/p&gt;
    &lt;p&gt;Error forensics reveal several key insights:&lt;/p&gt;
    &lt;p&gt;Together, the results provide significant, multi-perspective evidence that data quality is a causal driver of LLM capability decay, reframing curation for continual pretraining as a training-time safety problem and motivating routine "cognitive health checks" for deployed LLMs.&lt;/p&gt;
    &lt;p&gt;“Brain rot” burst into public discourse as a shorthand for how endless, low-effort, engagement-bait content can dull human cognition—eroding focus, memory discipline, and social judgment through compulsive online consumption. If large language models learn from the same internet firehose, the question becomes unavoidable: what happens when we keep feeding models the digital equivalent of junk food? Studying “Brain Rot” for LLMs isn’t just a catchy metaphor—it reframes data curation as cognitive hygiene for AI, guiding how we source, filter, and maintain training corpora so deployed systems stay sharp, reliable, and aligned over time.&lt;/p&gt;
    &lt;p&gt;Distinct from prior work that primarily focuses on data quality for training LLMs, we aim to provide a new view on data quality - the extent to which content is trivial and easy to consume for humans in social media. The properties, conceptualized via tweet shortness/popularity or content semantics, are not intuitively related to the cognitive capabilities that we expect LLMs to master in learning.&lt;/p&gt;
    &lt;p&gt;Intervention Method: The core idea was to simulate how an LLM's “mind” changes when fed different information diets. (1) We used continual pre-training as the main intervention — exposing models to either junk or clean data for a sustained period, just as humans continually absorb online content. (2) Afterward, every model went through the same instruction tuning step to ensure format consistency and eliminate task-specific bias.&lt;/p&gt;
    &lt;p&gt;Data Receipe: To operationalize the idea of “junk,” we built two complementary metrics for selecting data from real Twitter/X posts:&lt;/p&gt;
    &lt;p&gt;Measuring Cognitive Function: We leverage existing benchmarks to examine the multifaceted ``cognitive functions'' of LLMs. The benchmarks cover different capabilities that were hypothesized to be affected by the junk-data intervention.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Cognitive Func.&lt;/cell&gt;
        &lt;cell role="head"&gt;Benchmark&lt;/cell&gt;
        &lt;cell role="head"&gt;Description&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Reasoning&lt;/cell&gt;
        &lt;cell&gt;ARC&lt;/cell&gt;
        &lt;cell&gt;Visual program-induction puzzles on grids testing concept abstraction.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Memory &amp;amp; Multi-tasking&lt;/cell&gt;
        &lt;cell&gt;RULER&lt;/cell&gt;
        &lt;cell&gt;Benchmark the long-context understanding and retrieval of multiple queries from long context.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Ethical Norms&lt;/cell&gt;
        &lt;cell&gt;HH-RLHF &amp;amp; AdvBench&lt;/cell&gt;
        &lt;cell&gt;Testing if LLMs follow harmful instructions.&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Personality&lt;/cell&gt;
        &lt;cell&gt;TRAIT&lt;/cell&gt;
        &lt;cell&gt;Psychometrically validated small human questionnaires to assess personality-like tendencies.&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;We analyze intervention effects by comparing benchmark differences after feeding junk/control data to four LLMs. The difference is measured by Hedges' g across 4 LLMs. In the above figure, both M1 and M2 produce non-trivial effects (Hedges' g &amp;gt; 0.3) on reasoning and long-context capabilities.&lt;/p&gt;
    &lt;p&gt;Across the remaining benchmarks the two interventions diverge, implying that engagement degree (M1) is not a proxy for semantic quality (M2) but represents a distinct dimension of data quality.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="12"&gt;
        &lt;cell role="head"&gt;Task&lt;/cell&gt;
        &lt;cell role="head"&gt;Junk Ratio by M1 (engagement degree)&lt;/cell&gt;
        &lt;cell role="head"&gt;Junk Ratio by M2 (semantic quality)&lt;/cell&gt;
        &lt;cell role="head"&gt;Base&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;100%&lt;/cell&gt;
        &lt;cell&gt;80%&lt;/cell&gt;
        &lt;cell&gt;50%&lt;/cell&gt;
        &lt;cell&gt;20%&lt;/cell&gt;
        &lt;cell&gt;0%&lt;/cell&gt;
        &lt;cell&gt;100%&lt;/cell&gt;
        &lt;cell&gt;80%&lt;/cell&gt;
        &lt;cell&gt;50%&lt;/cell&gt;
        &lt;cell&gt;20%&lt;/cell&gt;
        &lt;cell&gt;0%&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Reasoning (ARC)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Easy Acc.&lt;/cell&gt;
        &lt;cell&gt;70.2&lt;/cell&gt;
        &lt;cell&gt;73.3&lt;/cell&gt;
        &lt;cell&gt;74.3&lt;/cell&gt;
        &lt;cell&gt;76.9&lt;/cell&gt;
        &lt;cell&gt;78.7&lt;/cell&gt;
        &lt;cell&gt;74.3&lt;/cell&gt;
        &lt;cell&gt;77.8&lt;/cell&gt;
        &lt;cell&gt;78.2&lt;/cell&gt;
        &lt;cell&gt;77.5&lt;/cell&gt;
        &lt;cell&gt;78.4&lt;/cell&gt;
        &lt;cell&gt;77.7&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Challenge Acc.&lt;/cell&gt;
        &lt;cell&gt;41.6&lt;/cell&gt;
        &lt;cell&gt;43.9&lt;/cell&gt;
        &lt;cell&gt;44.7&lt;/cell&gt;
        &lt;cell&gt;46.5&lt;/cell&gt;
        &lt;cell&gt;47.8&lt;/cell&gt;
        &lt;cell&gt;42.6&lt;/cell&gt;
        &lt;cell&gt;47.9&lt;/cell&gt;
        &lt;cell&gt;47.7&lt;/cell&gt;
        &lt;cell&gt;47.4&lt;/cell&gt;
        &lt;cell&gt;47.4&lt;/cell&gt;
        &lt;cell&gt;47.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Challenge (COT) Acc.&lt;/cell&gt;
        &lt;cell&gt;57.2&lt;/cell&gt;
        &lt;cell&gt;67.2&lt;/cell&gt;
        &lt;cell&gt;68.2&lt;/cell&gt;
        &lt;cell&gt;73.4&lt;/cell&gt;
        &lt;cell&gt;74.9&lt;/cell&gt;
        &lt;cell&gt;67.7&lt;/cell&gt;
        &lt;cell&gt;77.6&lt;/cell&gt;
        &lt;cell&gt;77.3&lt;/cell&gt;
        &lt;cell&gt;77.6&lt;/cell&gt;
        &lt;cell&gt;76.6&lt;/cell&gt;
        &lt;cell&gt;77.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Long-Context (RULER)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Overall&lt;/cell&gt;
        &lt;cell&gt;71&lt;/cell&gt;
        &lt;cell&gt;81.6&lt;/cell&gt;
        &lt;cell&gt;86.1&lt;/cell&gt;
        &lt;cell&gt;88.5&lt;/cell&gt;
        &lt;cell&gt;90.5&lt;/cell&gt;
        &lt;cell&gt;86.2&lt;/cell&gt;
        &lt;cell&gt;92.9&lt;/cell&gt;
        &lt;cell&gt;93&lt;/cell&gt;
        &lt;cell&gt;93.4&lt;/cell&gt;
        &lt;cell&gt;93.8&lt;/cell&gt;
        &lt;cell&gt;93.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;NIAH-MK3&lt;/cell&gt;
        &lt;cell&gt;35.6&lt;/cell&gt;
        &lt;cell&gt;80.8&lt;/cell&gt;
        &lt;cell&gt;89.4&lt;/cell&gt;
        &lt;cell&gt;92.6&lt;/cell&gt;
        &lt;cell&gt;95.6&lt;/cell&gt;
        &lt;cell&gt;96.8&lt;/cell&gt;
        &lt;cell&gt;97.2&lt;/cell&gt;
        &lt;cell&gt;98.8&lt;/cell&gt;
        &lt;cell&gt;99.2&lt;/cell&gt;
        &lt;cell&gt;99.4&lt;/cell&gt;
        &lt;cell&gt;100&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;NIAH-MQ&lt;/cell&gt;
        &lt;cell&gt;97.2&lt;/cell&gt;
        &lt;cell&gt;95.3&lt;/cell&gt;
        &lt;cell&gt;96.4&lt;/cell&gt;
        &lt;cell&gt;99.2&lt;/cell&gt;
        &lt;cell&gt;99.9&lt;/cell&gt;
        &lt;cell&gt;94&lt;/cell&gt;
        &lt;cell&gt;99.2&lt;/cell&gt;
        &lt;cell&gt;99.8&lt;/cell&gt;
        &lt;cell&gt;99.5&lt;/cell&gt;
        &lt;cell&gt;99.7&lt;/cell&gt;
        &lt;cell&gt;99.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;NIAH-MV&lt;/cell&gt;
        &lt;cell&gt;77.8&lt;/cell&gt;
        &lt;cell&gt;65.9&lt;/cell&gt;
        &lt;cell&gt;79.5&lt;/cell&gt;
        &lt;cell&gt;83.9&lt;/cell&gt;
        &lt;cell&gt;83.2&lt;/cell&gt;
        &lt;cell&gt;68.6&lt;/cell&gt;
        &lt;cell&gt;87&lt;/cell&gt;
        &lt;cell&gt;87.8&lt;/cell&gt;
        &lt;cell&gt;89.8&lt;/cell&gt;
        &lt;cell&gt;94.5&lt;/cell&gt;
        &lt;cell&gt;97.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Comm Word Ext (CWE)&lt;/cell&gt;
        &lt;cell&gt;52.3&lt;/cell&gt;
        &lt;cell&gt;63.2&lt;/cell&gt;
        &lt;cell&gt;64.1&lt;/cell&gt;
        &lt;cell&gt;81.6&lt;/cell&gt;
        &lt;cell&gt;84.4&lt;/cell&gt;
        &lt;cell&gt;68.2&lt;/cell&gt;
        &lt;cell&gt;94.7&lt;/cell&gt;
        &lt;cell&gt;97.3&lt;/cell&gt;
        &lt;cell&gt;96&lt;/cell&gt;
        &lt;cell&gt;96.8&lt;/cell&gt;
        &lt;cell&gt;91.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Freq Word Ext (FWE)&lt;/cell&gt;
        &lt;cell&gt;81.8&lt;/cell&gt;
        &lt;cell&gt;77.2&lt;/cell&gt;
        &lt;cell&gt;83.3&lt;/cell&gt;
        &lt;cell&gt;84.7&lt;/cell&gt;
        &lt;cell&gt;90.5&lt;/cell&gt;
        &lt;cell&gt;89.7&lt;/cell&gt;
        &lt;cell&gt;95.3&lt;/cell&gt;
        &lt;cell&gt;92.3&lt;/cell&gt;
        &lt;cell&gt;94.7&lt;/cell&gt;
        &lt;cell&gt;93.2&lt;/cell&gt;
        &lt;cell&gt;91.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;QA (Hotpot)&lt;/cell&gt;
        &lt;cell&gt;41.6&lt;/cell&gt;
        &lt;cell&gt;46.6&lt;/cell&gt;
        &lt;cell&gt;52.2&lt;/cell&gt;
        &lt;cell&gt;55.4&lt;/cell&gt;
        &lt;cell&gt;58.6&lt;/cell&gt;
        &lt;cell&gt;51.2&lt;/cell&gt;
        &lt;cell&gt;61.2&lt;/cell&gt;
        &lt;cell&gt;58.8&lt;/cell&gt;
        &lt;cell&gt;60.6&lt;/cell&gt;
        &lt;cell&gt;61.4&lt;/cell&gt;
        &lt;cell&gt;64&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;QA (SQUAD)&lt;/cell&gt;
        &lt;cell&gt;57.1&lt;/cell&gt;
        &lt;cell&gt;62.9&lt;/cell&gt;
        &lt;cell&gt;67.8&lt;/cell&gt;
        &lt;cell&gt;69.3&lt;/cell&gt;
        &lt;cell&gt;74.3&lt;/cell&gt;
        &lt;cell&gt;67.6&lt;/cell&gt;
        &lt;cell&gt;76.9&lt;/cell&gt;
        &lt;cell&gt;76.8&lt;/cell&gt;
        &lt;cell&gt;76.2&lt;/cell&gt;
        &lt;cell&gt;77.1&lt;/cell&gt;
        &lt;cell&gt;77.9&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Variable Tracking&lt;/cell&gt;
        &lt;cell&gt;22.4&lt;/cell&gt;
        &lt;cell&gt;78.7&lt;/cell&gt;
        &lt;cell&gt;94.1&lt;/cell&gt;
        &lt;cell&gt;87.6&lt;/cell&gt;
        &lt;cell&gt;91.5&lt;/cell&gt;
        &lt;cell&gt;86.6&lt;/cell&gt;
        &lt;cell&gt;98&lt;/cell&gt;
        &lt;cell&gt;99.4&lt;/cell&gt;
        &lt;cell&gt;99.2&lt;/cell&gt;
        &lt;cell&gt;98.6&lt;/cell&gt;
        &lt;cell&gt;98.3&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Ethical Norm (Safety)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;HH-RLHF Risk ↓&lt;/cell&gt;
        &lt;cell&gt;70.8&lt;/cell&gt;
        &lt;cell&gt;53.6&lt;/cell&gt;
        &lt;cell&gt;45.8&lt;/cell&gt;
        &lt;cell&gt;63.6&lt;/cell&gt;
        &lt;cell&gt;62.8&lt;/cell&gt;
        &lt;cell&gt;70.2&lt;/cell&gt;
        &lt;cell&gt;68.8&lt;/cell&gt;
        &lt;cell&gt;65.8&lt;/cell&gt;
        &lt;cell&gt;65.8&lt;/cell&gt;
        &lt;cell&gt;61.8&lt;/cell&gt;
        &lt;cell&gt;57.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;AdvBench Risk ↓&lt;/cell&gt;
        &lt;cell&gt;88.8&lt;/cell&gt;
        &lt;cell&gt;88.6&lt;/cell&gt;
        &lt;cell&gt;80.2&lt;/cell&gt;
        &lt;cell&gt;91.6&lt;/cell&gt;
        &lt;cell&gt;77.6&lt;/cell&gt;
        &lt;cell&gt;84.4&lt;/cell&gt;
        &lt;cell&gt;89.8&lt;/cell&gt;
        &lt;cell&gt;89.6&lt;/cell&gt;
        &lt;cell&gt;85.4&lt;/cell&gt;
        &lt;cell&gt;83.8&lt;/cell&gt;
        &lt;cell&gt;61.4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Personality (TRAIT)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Narcissism ↓&lt;/cell&gt;
        &lt;cell&gt;47&lt;/cell&gt;
        &lt;cell&gt;21.8&lt;/cell&gt;
        &lt;cell&gt;29.9&lt;/cell&gt;
        &lt;cell&gt;22.8&lt;/cell&gt;
        &lt;cell&gt;18.9&lt;/cell&gt;
        &lt;cell&gt;20.9&lt;/cell&gt;
        &lt;cell&gt;17.4&lt;/cell&gt;
        &lt;cell&gt;16.9&lt;/cell&gt;
        &lt;cell&gt;23.7&lt;/cell&gt;
        &lt;cell&gt;24.2&lt;/cell&gt;
        &lt;cell&gt;33.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Agreeableness&lt;/cell&gt;
        &lt;cell&gt;64.3&lt;/cell&gt;
        &lt;cell&gt;67.9&lt;/cell&gt;
        &lt;cell&gt;71.4&lt;/cell&gt;
        &lt;cell&gt;68.5&lt;/cell&gt;
        &lt;cell&gt;73&lt;/cell&gt;
        &lt;cell&gt;82&lt;/cell&gt;
        &lt;cell&gt;74.2&lt;/cell&gt;
        &lt;cell&gt;69.9&lt;/cell&gt;
        &lt;cell&gt;71.6&lt;/cell&gt;
        &lt;cell&gt;70.6&lt;/cell&gt;
        &lt;cell&gt;75.6&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Psychopathy ↓&lt;/cell&gt;
        &lt;cell&gt;75.7&lt;/cell&gt;
        &lt;cell&gt;55.8&lt;/cell&gt;
        &lt;cell&gt;57.2&lt;/cell&gt;
        &lt;cell&gt;30&lt;/cell&gt;
        &lt;cell&gt;33.5&lt;/cell&gt;
        &lt;cell&gt;46.1&lt;/cell&gt;
        &lt;cell&gt;9.3&lt;/cell&gt;
        &lt;cell&gt;23.5&lt;/cell&gt;
        &lt;cell&gt;27.3&lt;/cell&gt;
        &lt;cell&gt;25.8&lt;/cell&gt;
        &lt;cell&gt;2.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Machiavellianism ↓&lt;/cell&gt;
        &lt;cell&gt;33&lt;/cell&gt;
        &lt;cell&gt;30.6&lt;/cell&gt;
        &lt;cell&gt;31.8&lt;/cell&gt;
        &lt;cell&gt;27&lt;/cell&gt;
        &lt;cell&gt;25.8&lt;/cell&gt;
        &lt;cell&gt;26.1&lt;/cell&gt;
        &lt;cell&gt;22.7&lt;/cell&gt;
        &lt;cell&gt;20.2&lt;/cell&gt;
        &lt;cell&gt;33.1&lt;/cell&gt;
        &lt;cell&gt;28.5&lt;/cell&gt;
        &lt;cell&gt;17.8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Neuroticism ↓&lt;/cell&gt;
        &lt;cell&gt;28.7&lt;/cell&gt;
        &lt;cell&gt;23.8&lt;/cell&gt;
        &lt;cell&gt;22.7&lt;/cell&gt;
        &lt;cell&gt;23.3&lt;/cell&gt;
        &lt;cell&gt;16&lt;/cell&gt;
        &lt;cell&gt;22&lt;/cell&gt;
        &lt;cell&gt;23.5&lt;/cell&gt;
        &lt;cell&gt;21.1&lt;/cell&gt;
        &lt;cell&gt;31.1&lt;/cell&gt;
        &lt;cell&gt;26.4&lt;/cell&gt;
        &lt;cell&gt;33.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Conscientiousness&lt;/cell&gt;
        &lt;cell&gt;89.8&lt;/cell&gt;
        &lt;cell&gt;88.6&lt;/cell&gt;
        &lt;cell&gt;89.7&lt;/cell&gt;
        &lt;cell&gt;86&lt;/cell&gt;
        &lt;cell&gt;85.1&lt;/cell&gt;
        &lt;cell&gt;88.8&lt;/cell&gt;
        &lt;cell&gt;90.8&lt;/cell&gt;
        &lt;cell&gt;85.7&lt;/cell&gt;
        &lt;cell&gt;87.1&lt;/cell&gt;
        &lt;cell&gt;87.5&lt;/cell&gt;
        &lt;cell&gt;89.2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="12"&gt;
        &lt;cell&gt;Openness&lt;/cell&gt;
        &lt;cell&gt;70.1&lt;/cell&gt;
        &lt;cell&gt;72.8&lt;/cell&gt;
        &lt;cell&gt;67.6&lt;/cell&gt;
        &lt;cell&gt;53.7&lt;/cell&gt;
        &lt;cell&gt;63.9&lt;/cell&gt;
        &lt;cell&gt;73.2&lt;/cell&gt;
        &lt;cell&gt;59.1&lt;/cell&gt;
        &lt;cell&gt;55.6&lt;/cell&gt;
        &lt;cell&gt;59.4&lt;/cell&gt;
        &lt;cell&gt;56.5&lt;/cell&gt;
        &lt;cell&gt;52.5&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Extraversion&lt;/cell&gt;
        &lt;cell&gt;54.1&lt;/cell&gt;
        &lt;cell&gt;40.1&lt;/cell&gt;
        &lt;cell&gt;44.9&lt;/cell&gt;
        &lt;cell&gt;39.5&lt;/cell&gt;
        &lt;cell&gt;48.7&lt;/cell&gt;
        &lt;cell&gt;46.4&lt;/cell&gt;
        &lt;cell&gt;37.9&lt;/cell&gt;
        &lt;cell&gt;38.6&lt;/cell&gt;
        &lt;cell&gt;40.8&lt;/cell&gt;
        &lt;cell&gt;40&lt;/cell&gt;
        &lt;cell&gt;26.4&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;In dose-response testing, M1 engagement intervention demonstrates more significant and progressive impacts on reasoning and long-context capabilities than M2 intervention.&lt;/p&gt;
    &lt;p&gt;We analyze the reasoning failures in ARC-Challenge to identify different failure modes. We find that the majority failures can be attributed to "thought skipping" (e.g., the model fails to generate intermediate reasoning steps), which significantly increases in models affected by brain rot.&lt;/p&gt;
    &lt;p&gt;Our findings indicate that the cognitive decline associated with brain rot is not easily mitigated by standard fine-tuning techniques. Even after extensive instruction tuning (IT) or post-doc continual pre-training on high-quality control data, the models exhibit lingering effects of the junk data they were initially exposed to.&lt;/p&gt;
    &lt;p&gt;In this work, we introduced and empirically validated the LLM Brain Rot Hypothesis, demonstrating that continual exposure to junk data—defined as engaging (fragmentary and popular) or semantically low-quality (sensationalist) content—induces systematic cognitive decline in large language models. The decline includes worse reasoning, poorer long-context understanding, diminished ethical norms, and emergent socially undesirable personalities.&lt;/p&gt;
    &lt;p&gt;Fine-grained analysis shows that the damage is multifaceted in changing the reasoning patterns and is persistent against large-scale post-hoc tuning. These results call for a re-examination of current data collection from the Internet and continual pre-training practices. As LLMs scale and ingest ever-larger corpora of web data, careful curation and quality control will be essential to prevent cumulative harms.&lt;/p&gt;
    &lt;code&gt;@article{xing2024brainrot,
    title={LLMs Can Get "Brain Rot"!},
    author={Xing, Shuo and Hong, Junyuan and Wang, Yifan and Chen, Runjin and Zhang, Zhenyu and Grama, Ananth and Tu, Zhengzhong and Wang, Zhangyang},
    journal={arXiv:2510.13928},
    year={2025},
}&lt;/code&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://llm-brain-rot.github.io/"/><published>2025-10-21T14:24:26+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45656952</id><title>Show HN: Katakate – Dozens of VMs per node for safe code exec</title><updated>2025-10-22T05:39:21.986340+00:00</updated><content>&lt;doc fingerprint="6b39c79d8ada9c0"&gt;
  &lt;main&gt;
    &lt;p&gt;KATAKATE&lt;/p&gt;
    &lt;p&gt;Self-hosted secure VM sandboxes for AI compute at scale&lt;/p&gt;
    &lt;p&gt;Katakate aims to make it easy to create, manage and orchestrate lightweight safe VM sandboxes for executing untrusted code, at scale. It is built on battle-tested VM isolation with Kata, Firecracker and Kubernetes. It is orignally motivated by AI agents that need to run arbitrary code at scale but it is also great for:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Custom serverless (like AWS Fargate, but yours)&lt;/item&gt;
      &lt;item&gt;Hardened CI/CD runners (no Docker-in-Docker risks)&lt;/item&gt;
      &lt;item&gt;Blockchain execution layers for AI dApps&lt;/item&gt;
    &lt;/list&gt;
    &lt;quote&gt;
      &lt;p&gt;100% open‑source (Apache‑2.0). For technical support, write us at: hi@katakate.org&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Katakate is built on:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Kubernetes for orchestration, with K3s which is prod-ready and a great choice for edge nodes,&lt;/item&gt;
      &lt;item&gt;Kata to encapsulate containers into light-weight virtual-machines,&lt;/item&gt;
      &lt;item&gt;Firecracker as the chosen VM, for super-fast boots, light footprints and minimal attack surface,&lt;/item&gt;
      &lt;item&gt;Devmapper Snapshotter with thin-pool provisioning of logical volumes for efficient use of disk space shared by dozens of VMs per node.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;🛠️ Docker &lt;code&gt;build&lt;/code&gt;/&lt;code&gt;run&lt;/code&gt;/&lt;code&gt;compose&lt;/code&gt;support inside the VM sandbox&lt;/item&gt;
      &lt;item&gt;🌐 Multi-node cluster capabilities for distributed workloads&lt;/item&gt;
      &lt;item&gt;🔍 Cilium FQDN-based DNS resolution to safely whitelist domains, not just IP blocks&lt;/item&gt;
      &lt;item&gt;⚙️ Support other VMM such as Qemu for GPU workloads&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Note: Katakate is currently in beta and under security review. Use with caution for highly sensitive workloads.&lt;/p&gt;
    &lt;p&gt;For usage you need:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Node(s) that will host the VM sandboxes&lt;/item&gt;
      &lt;item&gt;Client from where to send requests&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We provide a:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;CLI: to use on the node(s) directly --&amp;gt; &lt;code&gt;apt install k7&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;API: deployed on the (master) node(s) --&amp;gt; &lt;code&gt;k7 start-api&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Python SDK: Python client sync/async talking to API --&amp;gt; &lt;code&gt;pip install katakate&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Ubuntu (amd64) host.&lt;/item&gt;
      &lt;item&gt;Hardware virtualization (KVM) available and accessible &lt;list rend="ul"&gt;&lt;item&gt;Check: &lt;code&gt;ls /dev/kvm&lt;/code&gt;should exist.&lt;/item&gt;&lt;item&gt;This is typically available on your own Linux machine.&lt;/item&gt;&lt;item&gt;On cloud providers, it varies. &lt;list rend="ul"&gt;&lt;item&gt;Hetzner (the only one I tested so far) yes for their &lt;code&gt;Robot&lt;/code&gt;instances only, i.e. "dedicated": robot.hetzner.com.&lt;/item&gt;&lt;item&gt;AWS: only &lt;code&gt;.metal&lt;/code&gt;EC2 instances.&lt;/item&gt;&lt;item&gt;GCP: virtualization friendly, most instances, with &lt;code&gt;--enable-nested-virtualization&lt;/code&gt;flag.&lt;/item&gt;&lt;item&gt;Azure: Dv3, Ev3, Dv4, Ev4, Dv5, Ev5. Must be Intel/AMD x86, not ARM.&lt;/item&gt;&lt;item&gt;Others: in general, hardware virtualization is not exposed on cloud VPS, so you'll likely want a dedicated / bare metal.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;&lt;item&gt;Hetzner (the only one I tested so far) yes for their &lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Check: &lt;/item&gt;
      &lt;item&gt;One raw disk (unformatted, unpartitioned) for the thin-pool that k7 will provision for efficient disk usage of sandboxes. &lt;list rend="ul"&gt;&lt;item&gt;Use &lt;code&gt;./utils/wipe-disk.sh /your/disk&lt;/code&gt;to wipe a disk clean before provisioning. DANGER: destructive - it will remove data/partitions/formatting/SWRAID.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Use &lt;/item&gt;
      &lt;item&gt;Ansible (for installer): &lt;quote&gt;sudo add-apt-repository universe -y sudo apt update sudo apt install -y ansible&lt;/quote&gt;&lt;/item&gt;
      &lt;item&gt;Docker and Docker Compose (for the API): &lt;code&gt;curl -fsSL https://get.docker.com | sh&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Already tested setups:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Hetzner Robot instance with Ubuntu 24.04, x86_64 arch, booked with 1 extra empty disk &lt;code&gt;nvme2n1&lt;/code&gt;for the thin-pool provisioning. See the setup guide (PDF): tutorials/k7_hetzner_node_setup.pdf.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Just recent Python.&lt;/p&gt;
    &lt;p&gt;First install &lt;code&gt;k7&lt;/code&gt; on your Linux server that will host the VMs:&lt;/p&gt;
    &lt;code&gt;sudo add-apt-repository ppa:katakate.org/k7
sudo apt update
sudo apt install k7&lt;/code&gt;
    &lt;p&gt;Then let &lt;code&gt;k7&lt;/code&gt; get your node ready with everything:&lt;/p&gt;
    &lt;code&gt;$  k7 install
Current task: Reminder about logging out and back in for group changes
  Installing K7 on 1 host(s)... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:01:41
✅ Installation completed successfully!
&lt;/code&gt;
    &lt;p&gt;Optionally pass &lt;code&gt;-v&lt;/code&gt; for a verbose output.&lt;/p&gt;
    &lt;p&gt;This will install and most importantly connect together the following components:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Kubernetes (K3s prod-ready distribution)&lt;/item&gt;
      &lt;item&gt;Kata (for container virtualization)&lt;/item&gt;
      &lt;item&gt;Firecracker (as Virtual Machine Manager)&lt;/item&gt;
      &lt;item&gt;Jailer (to secure Firecracker VMs further into a chroot)&lt;/item&gt;
      &lt;item&gt;devmapper snapshotter with thin-pool provisioning of logical volumes for VM efficient disk memory usage&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Careful design: config updates will not touch your existing Docker or containerd setups. We chose to use K3s' own containerd for minimal disruption. Installation may however overwrite existing installations of K3s, Kata, Firecracker, Jailer.&lt;/p&gt;
    &lt;p&gt;You can run workloads directly from the node(s) using the CLI. To create a sandbox, just create a yaml config for it.&lt;/p&gt;
    &lt;code&gt;name: my-sandbox-123
image: alpine:latest
namespace: default

# Optional: restrict egress
egress_whitelist:
  - "1.1.1.1/32"      # Cloudflare DNS
  - "8.8.8.8/32"      # Google DNS

# Optional: resource limits
limits:
  cpu: "1"
  memory: "1Gi"
  ephemeral-storage: "2Gi"

# Optional: run before_script inside the container once at start. Network restrictions apply after the before-script, so you can install packages here, pull git repos, etc
before_script: |
  apk add --no-cache git curl

# Optional: load environment variables from a file. These will be available both during the before-script, and in the sandbox
env_file: path/to/your/secrets/.env&lt;/code&gt;
    &lt;code&gt;# Create a sandbox (uses k7.yaml in the current directory by default, but you can also pass: -f myfile.yaml)
k7 create

# List sandboxes
k7 list

# Delete a sandbox
k7 delete my-sandbox-123

# Delete all sandboxes. You can also pass a namespace
k7 delete-all&lt;/code&gt;
    &lt;p&gt;If you'd like to manage workloads remotely, just use the API:&lt;/p&gt;
    &lt;code&gt;# Start API server (containerized and SSL support with Cloudflared)
k7 start-api

# Generate API key
k7 generate-api-key my-key1&lt;/code&gt;
    &lt;p&gt;Make sure your user is in the &lt;code&gt;Docker&lt;/code&gt; group to be allowed to start or stop the API.&lt;/p&gt;
    &lt;p&gt;As for generating / listing / revoking keys, you might need &lt;code&gt;sudo&lt;/code&gt; or &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;After your k7 API is up, usage is very simple.&lt;/p&gt;
    &lt;p&gt;Install the Python SDK via:&lt;/p&gt;
    &lt;code&gt;pip install katakate&lt;/code&gt;
    &lt;p&gt;Or if you want async support:&lt;/p&gt;
    &lt;code&gt;pip install "katakate[async-sdk]"&lt;/code&gt;
    &lt;p&gt;Then use with:&lt;/p&gt;
    &lt;code&gt;from katakate import Client

k7 = Client(
  endpoint='https://&amp;lt;your-endpoint&amp;gt;', 
  api_key='your-key')

# Create sandbox
sb = k7.create({
    "name": "my-sandbox",
    "image": "alpine:latest"
})

# Execute code
result = sb.exec('echo "Hello World"')
print(result['stdout'])

# List all sandboxes
sandboxes = k7.list()

# Delete sandbox
sb.delete()&lt;/code&gt;
    &lt;code&gt;import asyncio
from katakate import AsyncClient

async def main():
    k7 = AsyncClient(
      endpoint='https://&amp;lt;your-endpoint&amp;gt;', 
      api_key='your-key'
    )
    print(await k7.list())
    await k7.aclose()

asyncio.run(main())&lt;/code&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;LangChain ReAct agent with a K7 sandbox tool &lt;list rend="ul"&gt;&lt;item&gt;Path: tutorials/langchain-react-agent&lt;/item&gt;&lt;item&gt;Setup: copy .env.example to .env and fill K7_ENDPOINT/K7_API_KEY/OPENAI_API_KEY&lt;/item&gt;&lt;item&gt;Run: python agent.py&lt;/item&gt;&lt;item&gt;Try asking it anything! e.g. "List files from '/'"&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;First install make if not already available:&lt;/p&gt;
    &lt;code&gt;sudo add-apt-repository universe -y
sudo apt update
sudo apt install make&lt;/code&gt;
    &lt;p&gt;To build the &lt;code&gt;k7&lt;/code&gt; CLI and API into &lt;code&gt;.deb&lt;/code&gt; package:&lt;/p&gt;
    &lt;code&gt;make build&lt;/code&gt;
    &lt;p&gt;You can then install it with:&lt;/p&gt;
    &lt;code&gt;sudo make install&lt;/code&gt;
    &lt;p&gt;To uninstall later:&lt;/p&gt;
    &lt;code&gt;sudo make uninstall&lt;/code&gt;
    &lt;p&gt;Note: we recommend running &lt;code&gt;make uninstall&lt;/code&gt; before reinstalling if it is not your first install, to avoid stale copies of cached files in the .deb package.&lt;/p&gt;
    &lt;p&gt;Local dev image:&lt;/p&gt;
    &lt;code&gt;# Build the API image locally
make api-build-local

# Run API using local image (no pull)
make api-run-local&lt;/code&gt;
    &lt;p&gt;Preferred (uv):&lt;/p&gt;
    &lt;code&gt;# create env
uv venv .venv-build
. .venv-build/bin/activate

# install directly from source in editable mode
uv pip install -e .&lt;/code&gt;
    &lt;p&gt;K7 sandboxes are hardened by default with multiple layers of security:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;VM isolation: Kata Containers provide hardware-level isolation via lightweight VMs with Firecracker&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;VMs are further restricted into a chroot using Jailer&lt;/item&gt;
          &lt;item&gt;Kata's Seccomp restrictions are enabled&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;&lt;p&gt;Linux capabilities: All capabilities are dropped by default (&lt;/p&gt;&lt;code&gt;drop: ALL&lt;/code&gt;) for defense-in-depth&lt;list rend="ul"&gt;&lt;item&gt;Only explicitly add back capabilities you need via &lt;code&gt;cap_add&lt;/code&gt;parameter&lt;/item&gt;&lt;item&gt;&lt;code&gt;allow_privilege_escalation&lt;/code&gt;is always set to&lt;code&gt;false&lt;/code&gt;&lt;/item&gt;&lt;item&gt;Seccomp profile: &lt;code&gt;RuntimeDefault&lt;/code&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;Only explicitly add back capabilities you need via &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Non-root execution: Optionally run containers and pods as non-root user (UID 65532):&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;&lt;code&gt;container_non_root&lt;/code&gt;: Run the main container as non-root and disable privilege escalation&lt;/item&gt;
          &lt;item&gt;&lt;code&gt;pod_non_root&lt;/code&gt;: Run the entire pod as non-root with consistent filesystem ownership (UID/GID/FSGroup 65532)&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;API security:&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;API keys stored as SHA256 hashes with timing-attack-resistant comparison&lt;/item&gt;
          &lt;item&gt;Expiry enforced; last-used timestamp recorded&lt;/item&gt;
          &lt;item&gt;File-based storage with 600 permissions (&lt;code&gt;/etc/k7/api_keys.json&lt;/code&gt;by default)&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Network policies: Complete network isolation for VM sandboxes&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Ingress isolation: All inter-VM communication is blocked by default to prevent sandbox-to-sandbox access&lt;/item&gt;
          &lt;item&gt;Egress lockdown: Control outbound traffic with CIDR-based restrictions using Kubernetes NetworkPolicies&lt;/item&gt;
          &lt;item&gt;DNS to CoreDNS always allowed when egress is locked down&lt;/item&gt;
          &lt;item&gt;Administrative access via &lt;code&gt;kubectl exec&lt;/code&gt;and&lt;code&gt;k7 shell&lt;/code&gt;is preserved (uses Kubernetes API, not pod networking)&lt;/item&gt;
          &lt;item&gt;Soon to come: Cilium integration for domain name whitelisting&lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;More security features are currently on the roadmap, including integrating AppArmor.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Layout uses &lt;code&gt;src/&lt;/code&gt;:&lt;list rend="ul"&gt;&lt;item&gt;CLI, API, core live under &lt;code&gt;src/k7/&lt;/code&gt;&lt;/item&gt;&lt;item&gt;SDK under &lt;code&gt;src/katakate/&lt;/code&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;CLI, API, core live under &lt;/item&gt;
      &lt;item&gt;Root packaging targets the &lt;code&gt;katakate&lt;/code&gt;SDK only; assets under&lt;code&gt;src/k7/&lt;/code&gt;are not part of the PyPI distribution.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;MANIFEST.in&lt;/code&gt;(for the&lt;code&gt;katakate&lt;/code&gt;SDK) should include essentials like&lt;code&gt;LICENSE&lt;/code&gt;and&lt;code&gt;README.md&lt;/code&gt;only; deploy assets from&lt;code&gt;src/k7/deploy/*&lt;/code&gt;belong to the Debian/CLI packaging flow, not to the PyPI package.&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;setup.py&lt;/code&gt;for&lt;code&gt;katakate&lt;/code&gt;lives at repo root; packages from&lt;code&gt;src/&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;The CLI Debian package is built via &lt;code&gt;src/k7/cli/build.sh&lt;/code&gt;and produces&lt;code&gt;dist/k7_&amp;lt;version&amp;gt;_amd64.deb&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;CI (tags &lt;code&gt;v*&lt;/code&gt;) can publish the PyPI SDK and upload the&lt;code&gt;.deb&lt;/code&gt;artifact.&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Jailer seems to be currently ignored by Kata despite being passed correctly into its configuration, and despite the Jailer process being started. The use of Kubernetes secrets could be a reason of incompatibility. This is under investigation.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/Katakate/k7"/><published>2025-10-21T15:22:25+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45657287</id><title>Foreign hackers breached a US nuclear weapons plant via SharePoint flaws</title><updated>2025-10-22T05:39:21.817406+00:00</updated><content>&lt;doc fingerprint="3598a8970a17de0d"&gt;
  &lt;main&gt;
    &lt;p&gt;A foreign actor infiltrated the National Nuclear Security Administration’s Kansas City National Security Campus through vulnerabilities in Microsoft’s SharePoint browser-based app, raising questions about the need to solidify further federal IT/OT security protections. Credit: Wirestock Creators / Shutterstock A foreign threat actor infiltrated the Kansas City National Security Campus (KCNSC), a key manufacturing site within the National Nuclear Security Administration (NNSA), exploiting unpatched Microsoft SharePoint vulnerabilities, according to a source involved in an August incident response at the facility. The breach targeted a plant that produces the vast majority of critical non-nuclear components for US nuclear weapons under the NNSA, a semi-autonomous agency within the Department of Energy (DOE) that oversees the design, production, and maintenance of the nation’s nuclear weapons. Honeywell Federal Manufacturing &amp;amp; Technologies (FM&amp;amp;T) manages the Kansas City campus under contract to the NNSA. The Kansas City campus, Honeywell FM&amp;amp;T, and the Department of Energy did not respond to repeated requests for comment throughout September, well before the current government shutdown. NSA public affairs officer Eddie Bennett did respond, saying, “We have nothing to contribute,” and referred CSO back to the DOE. Although it is unclear whether the attackers were a Chinese nation-state actor or Russian cybercriminals — the two most likely culprits — experts say the incident drives home the importance of securing systems that protect operational technology from exploits that primarily affect IT systems. How the breach unfolded The attackers exploited two recently disclosed Microsoft SharePoint vulnerabilities — CVE-2025-53770, a spoofing flaw, and CVE-2025-49704, a remote code execution (RCE) bug — both affecting on-premises servers. Microsoft issued fixes for the vulnerabilities on July 19. On July 22, the NNSA confirmed it was one of the organizations hit by attacks enabled by the SharePoint flaws. “On Friday, July 18th, the exploitation of a Microsoft SharePoint zero-day vulnerability began affecting the Department of Energy,” a DOE spokesperson said. However, the DOE contended at the time, “The department was minimally impacted due to its widespread use of the Microsoft M365 cloud and very capable cybersecurity systems. A very small number of systems were impacted. All impacted systems are being restored.” By early August, federal responders, including personnel from the NSA, were on-site at the Kansas City facility, the source tells CSO. Located in Missouri, the KCNSC manufactures non-nuclear mechanical, electronic, and engineered material components used in US nuclear defense systems. It also provides specialized technical services, including metallurgical analysis, analytical chemistry, environmental testing, and simulation modeling. Roughly 80% of the non-nuclear parts in the nation’s nuclear stockpile originate from KCNSC. While most design and programmatic details remain classified, the plant’s production role makes it one of the most sensitive facilities in the federal weapons complex. China or Russia? Conflicting attribution Microsoft attributed the broader wave of SharePoint exploitations to three Chinese-linked groups: Linen Typhoon, Violet Typhoon, and a third actor it tracks as Storm-2603. The company said the attackers were preparing to deploy Warlock ransomware across affected systems. However, the source familiar with the Kansas City incident tells CSO that a Russian threat actor, not a Chinese one, was responsible for the intrusion. Cybersecurity company Resecurity, which was monitoring the SharePoint exploitations, tells CSO that its own data pointed primarily to Chinese nation-state groups, but it does not rule out Russian involvement. Resecurity’s researchers say that while Chinese groups appeared to have developed and deployed the initial zero-day, financially motivated Russian actors may have independently reproduced the exploit before technical details began circulating in late June. In May, researchers at Viettel Cyber Security demonstrated an attack chaining two SharePoint flaws, CVE-2025-49706 and CVE-2025-49704, at Pwn2Own Berlin. Resecurity researchers tell CSO that those demonstrations likely accelerated the reverse-engineering of the vulnerabilities by multiple threat actors. Resecurity’s analysts observed early-stage scanning and exploitation activity from infrastructure located in Taiwan, Vietnam, South Korea, and Hong Kong, a distribution pattern consistent with tactics used by Chinese advanced persistent threat (APT) groups to disguise attribution. “The root cause of the SharePoint exploitation is closely related to misuse of the Microsoft Active Protections Program (MAPP) by China,” Resecurity researchers tell CSO. “The most probable perpetrators are Chinese nation-state actors such as Linen Typhoon and Violet Typhoon.” Still, they say that yet another way that Russia-based threat actors could have acquired knowledge of the vulnerability early on was through underground exchanges or by analyzing network scanning data once the exploit became known. The transition from zero-day to N-day status, they say, opened a window for secondary actors to exploit systems that had not yet applied the patches. Could the attack have reached operational systems? The breach targeted the IT side of the Kansas City campus, but the intrusion raises the question of whether attackers could have moved laterally into the facility’s operational technology (OT) systems, the manufacturing and process control environments that directly support weapons component production. OT cybersecurity specialists interviewed by CSO say that KCNSC’s production systems are likely air-gapped or otherwise isolated from corporate IT networks, significantly reducing the risk of direct crossover. Nevertheless, they caution against assuming such isolation guarantees safety. “We have to really consider and think through how state actors potentially exploit IT vulnerabilities to gain access to that operational technology,” Jen Sovada, general manager of public sector operations at Claroty, speaking generally and not about the specific incident, tells CSO. “When you have a facility like the KCNSC where they do nuclear weapons lifecycle management — design, manufacturing, emergency response, decommissioning, supply chain management — there are multiple interconnected functions,” Sovada says. “If an actor can move laterally, they could impact programmable logic controllers that run robotics or precision assembly equipment for non-nuclear weapon components.” Such access, Sovada adds, could also affect distribution control systems that oversee quality assurance, or supervisory control and data acquisition (SCADA) systems that manage utilities, power, and environmental controls. “It’s broader than just an IT vulnerability,” she says. IT/OT convergence and the zero-trust gap The Kansas City incident highlights a systemic problem across the federal enterprise: the disconnect between IT and OT security practices. While the federal government has advanced its zero-trust roadmap for traditional IT networks, similar frameworks for operational environments have lagged, although recent developments point to progress on that front. “There’s an IT fan chart that maps all of the controls for zero trust, segmentation, authentication, and identity management,” Sovada says. “But there’s also an OT fan chart being developed by the Department of Defense that will define comparable controls for zero trust in operational technology. The goal is to marry the two, so that zero trust becomes comprehensive across all network types.” That alignment, she says, is essential to preventing intrusions like the one that struck KCNSC from cascading into physical operations. Even non-classified data theft holds strategic value If the source’s claim of Russian involvement is accurate, the attackers may have been financially motivated ransomware operators rather than state intelligence services. But even in that scenario, the data they accessed could still carry strategic value. “It would make sense that if it were a ransomware actor and they got this kind of data about nuclear weapons manufacturing, they might pause and hand it off to the appropriate Russian government officials or experts,” Sovada tells CSO. Although there is no evidence that classified information was compromised, even unclassified technical data can have significant implications. “It could be something as simple as requirements documents that may not be classified but reveal the level of precision required for components,” Sovada says. “In weapons manufacturing, a millimeter difference can change a device’s trajectory or the reliability of its arming mechanism.” Such information could aid adversaries in understanding US weapons tolerances, supply chain dependencies, or manufacturing processes, all of which are sensitive even if not formally secret. Whether the intruders were Chinese state actors or Russian cybercriminals, the Kansas City breach exposes the fragile intersection of IT and operational security across critical defense infrastructure. As Sovada stresses, “We can’t just think of zero trust as an IT concept anymore. It has to extend into the physical systems that underpin national defense.” Update: The Department of Energy (DOE) confirmed that it is furloughing the vast major of the NNSA’s workers. DOE spokesperson said, “Since its creation in 2000, NNSA has never before furloughed federal workers during funding lapses. We are left with no choice this time. We’ve extended funding as long as we could.” SUBSCRIBE TO OUR NEWSLETTER From our editors straight to your inbox Get started by entering your email address below. Please enter a valid email address Subscribe&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.csoonline.com/article/4074962/foreign-hackers-breached-a-us-nuclear-weapons-plant-via-sharepoint-flaws.html"/><published>2025-10-21T15:51:33+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45657345</id><title>Ask HN: Our AWS account got compromised after their outage</title><updated>2025-10-22T05:39:21.335733+00:00</updated><content>&lt;doc fingerprint="33ca051f2b70648d"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;Could there be any link between the two events?&lt;/p&gt;
      &lt;p&gt;Here is what happened:&lt;/p&gt;
      &lt;p&gt;Some 600 instances were spawned within 3 hours before AWS flagged it off and sent us a health event. There were numerous domains verified and we could see SES quota increase request was made.&lt;/p&gt;
      &lt;p&gt;We are still investigating the vulnerability at our end. our initial suspect list has 2 suspects. api key or console access where MFA wasn’t enabled.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.ycombinator.com/item?id=45657345"/><published>2025-10-21T15:55:41+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45657827</id><title>Build your own database</title><updated>2025-10-22T05:39:20.873851+00:00</updated><content>&lt;doc fingerprint="172f0832ab8897d0"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Build Your Own Database&lt;/head&gt;
    &lt;p&gt;A step-by-step guide to building a key-value database from scratch.&lt;/p&gt;
    &lt;p&gt;If you were to build your own database today, not knowing that databases exist already, how would you do it? In this post, we'll explore how to build a key-value database from the ground up.&lt;/p&gt;
    &lt;p&gt;A key-value database works more or less like objects in JavaScript—you can store values using a key and retrieve them later using that same key:&lt;/p&gt;
    &lt;quote&gt;$ db set 'hello' 'world'$ db get 'hello'world&lt;/quote&gt;
    &lt;p&gt;Let's find out how they work!&lt;/p&gt;
    &lt;head rend="h2"&gt;The Humble File&lt;/head&gt;
    &lt;p&gt;Databases were made to solve one problem:&lt;/p&gt;
    &lt;head rend="h4"&gt;Problem&lt;/head&gt;
    &lt;p&gt;How do we store data persistently and then efficiently look it up later?&lt;/p&gt;
    &lt;p&gt;The typical way to store any kind of data persistently in a computer is to use a file . When we want to store data, we add the key-value pair to the file:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;$ db set 1 "Lorem ipsum"&lt;/item&gt;
      &lt;item&gt;$ db set 18 "dolor sit"&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;db.txt&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;When we want to look for a specific key, we iterate through the pairs to see if there's a matching key:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;$ db set 1 "Lorem ipsum"&lt;/item&gt;
      &lt;item&gt;$ db set 18 "dolor sit"&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;db.txt&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;For updates, we'll find the key and replace the value in-place:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;$ db set 1 "Lorem ipsum"&lt;/item&gt;
      &lt;item&gt;$ db set 18 "dolor sit"&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;db.txt&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;And for deletes, we'll delete the record from the file:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;$ db set 1 "Lorem ipsum"&lt;/item&gt;
      &lt;item&gt;$ db set 18 "dolor sit"&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;db.txt&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Easy! We're done right?&lt;/p&gt;
    &lt;p&gt;db.txt&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Mutable Updates&lt;/head&gt;
    &lt;p&gt;This approach, simple as it is, doesn't actually work very well in practice. The problem lies with the way we're doing updates and deletes—they're wholly inefficient.&lt;/p&gt;
    &lt;p&gt;To a computer, our file looks something like this—nothing more than a long sequence of bytes:&lt;/p&gt;
    &lt;p&gt;001:Lorem␣ipsum\n018:dolor␣sit\n005:adipiscing␣elit.\n014:Vestibulum␣varius\n002:vel␣mauris\n007:consectetur␣adipiscing␣elit.\n010:Vestibulum␣varius\n016:vel␣mauris\n003:consectetur␣adipiscing␣elit.&lt;/p&gt;
    &lt;p&gt;When we go to update or delete a record, we're currently updating that record in-place, which means we potentially have to move all of the data that comes after that record:&lt;/p&gt;
    &lt;p&gt;001:Lorem␣ipsum\n018:dolor␣sit\n005:adipiscing␣elit.␣vel␣mauris\n014:Vestibulum␣varius\n002:vel␣mauris\n007:consectetur␣adipiscing␣elit.\n010:Vestibulum␣varius\n016:vel␣mauris\n003:consectetur␣adipiscing␣elit.&lt;/p&gt;
    &lt;p&gt;In this case, updating the record &lt;code&gt;005&lt;/code&gt; to "&lt;code&gt;adipiscing␣elit.␣vel␣mauris&lt;/code&gt;" means moving all of the records that come after it by 11 bytes (the length of the added string "&lt;code&gt;␣vel␣mauris&lt;/code&gt;"). This can quickly get really costly, especially as our database grows in size!&lt;/p&gt;
    &lt;head rend="h3"&gt;Append-Only Files&lt;/head&gt;
    &lt;p&gt;One way to work around the update problem is to make records immutable. In other words, we add the constraint that we can only add new records to the end of the file and never update or delete existing ones.&lt;/p&gt;
    &lt;p&gt;With this approach, updates are treated the same as inserts—just add a new record to the end of the file:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;$ db set 1 "Lorem ipsum"&lt;/item&gt;
      &lt;item&gt;$ db set 18 "dolor sit"&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;db.txt&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;But now we have another problem—there are duplicate keys in the file!&lt;/p&gt;
    &lt;p&gt;To work around this, we have to change our search algorithm to look for the last occurrence of the key instead of the first:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;$ db set 1 "Lorem ipsum"&lt;/item&gt;
      &lt;item&gt;$ db set 18 "dolor sit"&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;db.txt&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;To delete records, we create a special "tombstone" record that marks the key as deleted. There's no single way to do this, but one way is to use a special value like &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;$ db set 1 "Lorem ipsum"&lt;/item&gt;
      &lt;item&gt;$ db set 18 "dolor sit"&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;db.txt&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;And there we have it! We have a key-value database that uses a file as its storage mechanism. Using it, we can store, find, update, and delete key-value pairs.&lt;/p&gt;
    &lt;p&gt;db.txt&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Now this implementation isn't perfect; right now, there are two major issues:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;The file can get very large. Since we're only appending to the file, the file will grow infinitely over time. Not good!&lt;/item&gt;
      &lt;item&gt;Searching is slow. To search for a specific key, we have to potentially iterate through all records in the database. For a database with millions of records, this can take a while!&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;How can we fix these problems?&lt;/p&gt;
    &lt;head rend="h2"&gt;Keeping Files Small&lt;/head&gt;
    &lt;head rend="h4"&gt;Problem&lt;/head&gt;
    &lt;p&gt;How do we make sure the file doesn't grow indefinitely? Because we're using an append-only file, we need some mechanism to periodically "shrink" the file so it doesn't eventually take over our entire hard drive.&lt;/p&gt;
    &lt;p&gt;Take a look at our database here after a few updates and deletes:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;$ db set 1 "Lorem ipsum"&lt;/item&gt;
      &lt;item&gt;$ db set 18 "dolor sit"&lt;/item&gt;
      &lt;item&gt;$ db set 7 "adipiscing elit."&lt;/item&gt;
      &lt;item&gt;$ db delete 7&lt;/item&gt;
      &lt;item&gt;$ db set 10 "consectetur adipiscing elit."&lt;/item&gt;
      &lt;item&gt;$ db delete 1&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;db.txt&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
      &lt;item&gt;007: adipiscing elit.007:adipiscing elit.&lt;/item&gt;
      &lt;item&gt;007: null007:null&lt;/item&gt;
      &lt;item&gt;010: consectetur adipiscing elit.010:consectetur adipiscing elit.&lt;/item&gt;
      &lt;item&gt;001: null001:null&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Our database file has six entries, but only two represent actual records—the rest are either deleted or contain stale data. If we can clear all the irrelevant data, we can shrink the file by over 66%!&lt;/p&gt;
    &lt;p&gt;db.txt&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
      &lt;item&gt;007: adipiscing elit.007:adipiscing elit.&lt;/item&gt;
      &lt;item&gt;007: null007:null&lt;/item&gt;
      &lt;item&gt;010: consectetur adipiscing elit.010:consectetur adipiscing elit.&lt;/item&gt;
      &lt;item&gt;001: null001:null&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Segments and Compaction&lt;/head&gt;
    &lt;p&gt;Here's an idea: once a file exceeds a certain size, we'll close the file and create a new one. While the new file ingests new data (in the same way we've been doing so far), we'll compact the old file by deleting all of its irrelevant data.&lt;/p&gt;
    &lt;p&gt;Meaning, we stop adding new data to the file.&lt;/p&gt;
    &lt;p&gt;Here, we've set the maximum file size to seven records. Notice that the database is full—try clicking on "Add" to add a new record and notice what happens:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;001:&lt;/p&gt;
        &lt;p&gt;Lorem ipsum&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;018:&lt;/p&gt;
        &lt;p&gt;dolor sit&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;007:&lt;/p&gt;
        &lt;p&gt;adipiscing elit.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;007:&lt;/p&gt;
        &lt;p&gt;null&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;010:&lt;/p&gt;
        &lt;p&gt;consectetur adipiscing elit.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;001:&lt;/p&gt;
        &lt;p&gt;null&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;020:&lt;/p&gt;
        &lt;p&gt;Vestibulum varius&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Now, our database consists of two different files which we'll call segments. Each segment will usually become a lot smaller after compaction, which means we can merge them together as part of the compaction process.&lt;/p&gt;
    &lt;p&gt;With that, we've made a mechanism to stop our database from growing indefinitely!&lt;/p&gt;
    &lt;head rend="h2"&gt;Your First Index&lt;/head&gt;
    &lt;p&gt;Our next problem is on search performance:&lt;/p&gt;
    &lt;head rend="h4"&gt;Problem&lt;/head&gt;
    &lt;p&gt;How do we make searching fast? Right now, we have to iterate through all of the records in the database to find a specific key. This is super slow!&lt;/p&gt;
    &lt;p&gt;What if we use objects? That's right, these little guys:&lt;/p&gt;
    &lt;quote&gt;const hashTable = {};&lt;/quote&gt;
    &lt;p&gt;JavaScript objects, otherwise known as hash tables or dictionaries, are really efficient at storing and looking up key-value pairs:&lt;/p&gt;
    &lt;quote&gt;const hashTable = {hello: "world",foo: "bar",baz: "qux",};const value = hashTable["hello"]; // "world"&lt;/quote&gt;
    &lt;p&gt;It doesn't matter how many records there are—the time it takes to look up and retrieve a value in a hash table is more or less constant. The catch is they must live in memory.&lt;/p&gt;
    &lt;head class="p-4 md:p-6 list-none"&gt;Aside: In-Memory vs. On-Disk&lt;/head&gt;
    &lt;head rend="h3"&gt;Aside: In-Memory vs. On-Disk&lt;/head&gt;
    &lt;p&gt;When you write a variable in your code, the computer will "remember" the value of that variable only for as long as the program is running.&lt;/p&gt;
    &lt;quote&gt;let x = 1;x = x + 1;console.log(x); // 2x = x + 1;console.log(x); // 3&lt;/quote&gt;
    &lt;p&gt;This program will always print &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; because the value of &lt;code&gt;x&lt;/code&gt; "resets" every time we run the program. This is because &lt;code&gt;x&lt;/code&gt; is stored  in-memory , and any value stored in memory is discarded when the program stops.&lt;/p&gt;
    &lt;p&gt;If we want our data to "stick" between runs, we'll need to store it on-disk—in other words, a file.&lt;/p&gt;
    &lt;quote&gt;import fs from "fs";let x = Number(fs.readFileSync("data.txt", "utf8")) || 1;x = x + 1;console.log(x);x = x + 1;console.log(x);fs.writeFileSync("data.txt", x);&lt;/quote&gt;
    &lt;p&gt;This time, &lt;code&gt;x&lt;/code&gt; will print &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; the first run, and &lt;code&gt;4&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; the second run.&lt;/p&gt;
    &lt;p&gt;The tradeoff to persistence is performance—accessing data from memory is about 80x faster on average than accessing it from disk.&lt;/p&gt;
    &lt;p&gt;Here's how the index will work. For every record that we have in our database, we'll store that record's offset—the number of bytes from the beginning of the file to the start of the record—in the index:&lt;/p&gt;
    &lt;p&gt;file.txt&lt;/p&gt;
    &lt;p&gt;1:Lorem␣ipsum\n&lt;/p&gt;
    &lt;p&gt;0&lt;/p&gt;
    &lt;p&gt;1:Lorem␣ipsum\n&lt;/p&gt;
    &lt;p&gt;Index&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;001:&lt;/p&gt;
        &lt;p&gt;0&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Database&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;001:&lt;/p&gt;
        &lt;p&gt;Lorem ipsum&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The second record, &lt;code&gt;18: dolor sit&lt;/code&gt;, for example, has an offset of 15 because:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Each character is 1 byte large;&lt;/item&gt;
      &lt;item&gt;The first record is 13 characters long (&lt;code&gt;1:Lorem ipsum&lt;/code&gt;);&lt;/item&gt;
      &lt;item&gt;The first record ends with a newline character, which is (at most) 2 bytes long;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This gives us an offset of &lt;code&gt;13 + 2 = 15&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;One thing to note is that we need an index for each segment because the offset is relative to the start of the file—in other words, the start of each segment.&lt;/p&gt;
    &lt;head rend="h3"&gt;Searching With Indices&lt;/head&gt;
    &lt;p&gt;Using an index, our search algorithm can now run a lot more efficiently:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Starting at the most recent segment, look up the key in the index;&lt;/item&gt;
      &lt;item&gt;If the key is found, read the record at the offset;&lt;/item&gt;
      &lt;item&gt;If the key is not found, move on to the next segment;&lt;/item&gt;
      &lt;item&gt;Repeat (2) and (3) until the key is found or all segments have been searched.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;$ Waiting for commands...&lt;/p&gt;
    &lt;head rend="h3"&gt;Updating Indices&lt;/head&gt;
    &lt;p&gt;An index is only useful if it's in sync with our data. Whenever we update, delete, or insert a record, we have to change the index accordingly:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: 0&lt;/item&gt;
      &lt;item&gt;018: 15&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Notice what this implies—writing to the database is slower with an index! This is one of the tradeoffs of using an index; we can search for data much faster at the cost of slower writes.&lt;/p&gt;
    &lt;head rend="h3"&gt;Tradeoffs&lt;/head&gt;
    &lt;p&gt;An index is great because it lets us query our database much faster, but there are some problems with our specific hash table implementation:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Keys have to fit in memory. Since we're using an in-memory hash table as our index, all of the keys in our database must fit in memory. This means there's a limit on the number of keys we can store!&lt;/item&gt;
      &lt;item&gt;Range queries are inefficient. Our index wouldn't help for search queries; if we wanted to find all the records between the keys&lt;code&gt;12&lt;/code&gt;and&lt;code&gt;18&lt;/code&gt;, for example, we'd have to iterate through the entire database!&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Sorted String Tables&lt;/head&gt;
    &lt;p&gt;Here's an idea: what if we ensure our database is always sorted by key? By sorting our data, we can immediately make range queries fast:&lt;/p&gt;
    &lt;p&gt;0 / 7&lt;/p&gt;
    &lt;p&gt;Unsorted&lt;/p&gt;
    &lt;p&gt;Find all values &amp;gt; 2 and &amp;lt; 6&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;7&lt;/item&gt;
      &lt;item&gt;3&lt;/item&gt;
      &lt;item&gt;9&lt;/item&gt;
      &lt;item&gt;1&lt;/item&gt;
      &lt;item&gt;4&lt;/item&gt;
      &lt;item&gt;8&lt;/item&gt;
      &lt;item&gt;11&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;7 is out of bounds, skipping...&lt;/p&gt;
    &lt;p&gt;Sorted&lt;/p&gt;
    &lt;p&gt;Find all values &amp;gt; 2 and &amp;lt; 6&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;1&lt;/item&gt;
      &lt;item&gt;3&lt;/item&gt;
      &lt;item&gt;4&lt;/item&gt;
      &lt;item&gt;7&lt;/item&gt;
      &lt;item&gt;8&lt;/item&gt;
      &lt;item&gt;9&lt;/item&gt;
      &lt;item&gt;11&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;1 is below lower bound, skipping...&lt;/p&gt;
    &lt;head rend="h3"&gt;Sparse Indices&lt;/head&gt;
    &lt;p&gt;One benefit of sorting our data is that we no longer need to store the offset of every record in memory.&lt;/p&gt;
    &lt;p&gt;Take a look at this database with four records. Since there's no logical order to the records, there's no way to determine where a record is without storing its key or searching through the entire database.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;007: amet, consectetur007:amet, consectetur&lt;/item&gt;
      &lt;item&gt;010: adipiscing elit.010:adipiscing elit.&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: 0&lt;/item&gt;
      &lt;item&gt;007: 15&lt;/item&gt;
      &lt;item&gt;010: 36&lt;/item&gt;
      &lt;item&gt;018: 57&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Knowing that &lt;code&gt;10&lt;/code&gt; has an offset of &lt;code&gt;50&lt;/code&gt; doesn't help us find where &lt;code&gt;18&lt;/code&gt; is.&lt;/p&gt;
    &lt;p&gt;Now if these records were sorted, we could determine the location of each record using any of the keys in the index, even if it's not the key we're looking for.&lt;/p&gt;
    &lt;p&gt;Let's say our database is sorted but we only had the offset for the key &lt;code&gt;10&lt;/code&gt;:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum001:Lorem ipsum&lt;/item&gt;
      &lt;item&gt;007: amet, consectetur007:amet, consectetur&lt;/item&gt;
      &lt;item&gt;010: adipiscing elit.010:adipiscing elit.&lt;/item&gt;
      &lt;item&gt;018: dolor sit018:dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;010: 36&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Let's say we want to find the key &lt;code&gt;18&lt;/code&gt;. We know that &lt;code&gt;18&lt;/code&gt; is greater than &lt;code&gt;10&lt;/code&gt;, which means it must be after &lt;code&gt;10&lt;/code&gt; in the database. In other words, we can start searching for &lt;code&gt;18&lt;/code&gt; from &lt;code&gt;10&lt;/code&gt;'s offset—&lt;code&gt;36&lt;/code&gt; in this case.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;001: Lorem ipsum&lt;/item&gt;
      &lt;item&gt;007: amet, consectetur&lt;/item&gt;
      &lt;item&gt;0010: adipiscing elit.&lt;/item&gt;
      &lt;item&gt;018: dolor sit0&lt;/item&gt;
      &lt;item&gt;018: dolor sit&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;010: 36&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;While this is certainly slower than having the offset for &lt;code&gt;18&lt;/code&gt; directly, it's still faster than looping through the database in its entirety.&lt;/p&gt;
    &lt;p&gt;The real unlock here lies in being able to control the trade-off between memory and performance: a denser index means faster lookups, but more memory usage.&lt;/p&gt;
    &lt;head rend="h3"&gt;Sorting in Practice&lt;/head&gt;
    &lt;p&gt;Ensuring our database is always sorted is much easier said than done; by definition, sorting data requires moving around records as new ones get added—something that cannot be done efficiently when we're storing data on-disk. This brings us to our problem:&lt;/p&gt;
    &lt;head rend="h4"&gt;Problem&lt;/head&gt;
    &lt;p&gt;How do we keep our data sorted and append-only? It's too slow to sort the data on-disk every time we add a new record; is there another way?&lt;/p&gt;
    &lt;p&gt;The trick is to first sort the data in memory, and then write it to disk.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;When we add a new record, add it to a sorted in-memory list;&lt;/item&gt;
      &lt;item&gt;When our in-memory list gets too large, we'll write it to disk;&lt;/item&gt;
      &lt;item&gt;When we want to read a record, we'll read the in-memory list first, and then the disk if necessary.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Memory&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;010: Lorem ipsum010: Lorem ipsum&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;On-Disk&lt;/p&gt;
    &lt;p&gt;The data structure used to store the in-memory list is usually one optimized for sorted data like a balanced binary search tree or more commonly, a skip list.&lt;/p&gt;
    &lt;p&gt;Of course, the main downside of having some of your data in-memory is that it's not persistent—if the program crashes or the computer shuts down, all of the data in the in-memory list is lost.&lt;/p&gt;
    &lt;p&gt;The fix here is thankfully pretty straightforward—every time we add a record to the list, we also write it to an append-only file on disk. This way, we have a backup in case a crash does happen (which it most certainly will).&lt;/p&gt;
    &lt;p&gt;Memory&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;010: Lorem ipsum010: Lorem ipsum&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;On-Disk Database&lt;/p&gt;
    &lt;p&gt;On-Disk Log&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;010: Lorem ipsum010:Lorem ipsum&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The append-only file doesn't need to be sorted nor does it need to have every record in the database; only the ones that are currently in memory.&lt;/p&gt;
    &lt;p&gt;With that, we have our very own key-value database! Let's recap how it works.&lt;/p&gt;
    &lt;p&gt;Our database starts out empty. When we go to add a new record, we'll add it to a sorted in-memory list, keeping a copy in an append-only file in case of crashes.&lt;/p&gt;
    &lt;p&gt;When the in-memory list gets too large, we'll flush the list by writing all of the records to a file in sorted order. In the process, we'll keep note of each record's offset in an index so we can efficiently look them up later.&lt;/p&gt;
    &lt;p&gt;When we want to look up a record, we'll first check the in-memory list. If the record isn't there, we'll check the index to see if it's in the on-disk file.&lt;/p&gt;
    &lt;p&gt;Once a file is saved to disk, it's considered immutable which means we can only ever read from the file and never update it. To work around this, we'll treat updates and deletes the same as inserting new records—add them to the in-memory list.&lt;/p&gt;
    &lt;p&gt;Treating updates and deletes as new records means our file will only ever grow larger. To prevent this, we'll occassionally compact the on-disk files by deleting all duplicate records.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;001:&lt;/p&gt;
        &lt;p&gt;Lorem ipsum&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;018:&lt;/p&gt;
        &lt;p&gt;dolor sit&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;007:&lt;/p&gt;
        &lt;p&gt;adipiscing elit.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;007:&lt;/p&gt;
        &lt;p&gt;null&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;010:&lt;/p&gt;
        &lt;p&gt;consectetur adipiscing elit.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;001:&lt;/p&gt;
        &lt;p&gt;null&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;020:&lt;/p&gt;
        &lt;p&gt;Vestibulum varius&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Memory&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;010: Lorem ipsum010: Lorem ipsum&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;On-Disk Log&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;010: Lorem ipsum010:Lorem ipsum&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;LSM Trees&lt;/head&gt;
    &lt;p&gt;What we just built actually exists in the real world—it's called an LSM or Log-Structured Merge Tree.&lt;/p&gt;
    &lt;p&gt;An LSM tree works by combining an in-memory list (often called a memtable) with an on-disk file (typically called a sorted string table or SST) to create a really fast key-value database.&lt;/p&gt;
    &lt;p&gt;LSM trees are the underlying data structure used for large-scale key-value databases like Google's LevelDB and Amazon's DynamoDB, and they have proven to perform really well at scale—on Prime Day 2020, DynamoDB peaked at 80 million requests per second!&lt;/p&gt;
    &lt;p&gt;Now, LSM trees aren't perfect, and they're certainly not the only way to structure a database. In fact, relational databases like PostgreSQL or MySQL use a completely different structure called a B-Tree to store their data—but that's a deep dive for another post.&lt;/p&gt;
    &lt;p&gt;For now, thanks for reading!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.nan.fyi/database"/><published>2025-10-21T16:31:51+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45658479</id><title>ChatGPT Atlas</title><updated>2025-10-22T05:39:20.606701+00:00</updated><content>&lt;doc fingerprint="d5c62af859f703f7"&gt;
  &lt;main&gt;
    &lt;p&gt;Bring ChatGPT with you across the web for instant answers, smarter suggestions, and help with tasks—all with privacy settings you can control.&lt;/p&gt;
    &lt;p&gt;Open a ChatGPT sidebar in any window to summarize content, compare products, or analyze data from any site you're viewing.&lt;/p&gt;
    &lt;p&gt;You can choose what ChatGPT remembers, so it can bring you relevant details when you need them.&lt;/p&gt;
    &lt;p&gt;In agent mode, ChatGPT interacts with sites for you, always under your control. Use it to do tasks from start to finish, like researching and shopping for a trip. Available in preview for Plus, Pro, and Business accounts.&lt;/p&gt;
    &lt;p&gt;Turn your cursor into a collaborator. Highlight text in emails, calendar invites, or docs, and get help from chat in one click.&lt;/p&gt;
    &lt;p&gt;You can decide which sites ChatGPT can see, clear your browsing history, use incognito, and manage browser memories anytime.&lt;/p&gt;
    &lt;p&gt;Get information the way you want to. Search text, images, videos, or news articles.&lt;/p&gt;
    &lt;p&gt;Use tabs, autocomplete, a search bar, and bookmarks to easily navigate the web.&lt;/p&gt;
    &lt;p&gt;It’s easy to set your browsing preferences and colors.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://chatgpt.com/atlas"/><published>2025-10-21T17:18:13+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45661084</id><title>Doomsday scoreboard</title><updated>2025-10-22T05:39:20.406729+00:00</updated><content>&lt;doc fingerprint="e748cbb92edd0fc6"&gt;
  &lt;main&gt;
    &lt;p&gt;DOOMSDAY SCOREBOARD Scoreboard Timeline Stats Doomsday Dashboard Predictions Listing&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://doomsday.march1studios.com/"/><published>2025-10-21T20:14:22+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45661253</id><title>Replacing a $3000/mo Heroku bill with a $55/mo server</title><updated>2025-10-22T05:39:20.310433+00:00</updated><content>&lt;doc fingerprint="7fca1100340b6f36"&gt;
  &lt;main&gt;
    &lt;p&gt;This content has moved. If you are not redirected, please click here:&lt;/p&gt;
    &lt;p&gt;blog/how-idealistorg-replaced-a-3000mo-heroku-bill-with-a-55mo-server/&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://disco.cloud/blog/how-idealistorg-replaced-a-3000mo-heroku-bill-with-a-55-server/"/><published>2025-10-21T20:28:15+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45661306</id><title>Erowid - Documenting the Complex Relationship Between Humans and Psychoactives</title><updated>2025-10-22T05:39:19.445134+00:00</updated><content>&lt;doc fingerprint="3b74d0de090e4684"&gt;
  &lt;main&gt;
    &lt;p&gt;We read every piece of feedback, and take your input very seriously.&lt;/p&gt;
    &lt;p&gt;To see all available qualifiers, see our documentation.&lt;/p&gt;
    &lt;p&gt;There was an error while loading. Please reload this page.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.erowid.org"/><published>2025-10-21T20:31:47+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45661638</id><title>rlsw – Raylib software OpenGL renderer in less than 5k LOC</title><updated>2025-10-22T05:39:18.886676+00:00</updated><content>&lt;doc fingerprint="3b74d0de090e4684"&gt;
  &lt;main&gt;
    &lt;p&gt;We read every piece of feedback, and take your input very seriously.&lt;/p&gt;
    &lt;p&gt;To see all available qualifiers, see our documentation.&lt;/p&gt;
    &lt;p&gt;There was an error while loading. Please reload this page.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/raysan5/raylib/blob/master/src/external/rlsw.h"/><published>2025-10-21T21:00:10+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45662668</id><title>The Hidden Engineering of Niagara Falls</title><updated>2025-10-22T05:39:18.717274+00:00</updated><content>&lt;doc fingerprint="b453c84da27086a9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The Hidden Engineering of Niagara Falls&lt;/head&gt;
    &lt;p&gt;[Note that this article is a transcript of the video embedded above.]&lt;/p&gt;
    &lt;p&gt;Niagara Falls is one of the most spectacular waterfalls in the world. With a vertical drop of more than 50 meters or 164 feet and a flow rate that often exceeds 2800 cubic meters per second or 100,000 cubic feet per second, it’s one of North America’s crown jewels. Roughly ten million people visit the falls every year just to catch a glimpse of the curtains of water pouring over the edge and the constant clouds of mist at the bottom. But Niagara Falls isn’t just a tourist attraction. The special geology and hydrology of this region, situated between Lake Erie and Lake Ontario, have resulted in some fascinating feats of infrastructure, from shipping to electricity to water control. It’s basically a microcosm of all the things I love. The falls themselves have required quite a bit of engineering over the years, and they’ve even been shut off for maintenance. Let’s take a little tour of the Niagara Peninsula (even though it’s really an isthmus), and I’ll show you some of the things that aren’t usually listed in a guidebook. I’m Grady, and this is Practical Engineering.&lt;/p&gt;
    &lt;p&gt;Let’s get oriented first. This is a map of the isthmus. We’ve got Lake Erie to the south, Lake Ontario to the north, Buffalo and western New York to the East, and Ontario, Canada, to the west. The Niagara River runs northward, connecting the two great lakes. And right in the middle, it plunges off the Niagara Escarpment, creating the famous falls. On the US side, there are the American Falls and the smaller Bridal Veil Falls. And on the Canadian side is the Horseshoe Falls where a majority of the river flows. It’s pretty impressive to see in person, but it’s actually not entirely a benefit. Because these falls pose a major problem for shipping.&lt;/p&gt;
    &lt;p&gt;The Great Lakes form the largest inland freshwater transportation system in the world. Since the 19th century, they’ve served as the backbone for moving iron ore, coal, grain, and manufactured goods between the American heartland and the Atlantic Ocean. Ore from Minnesota and grain from the Midwest can travel by ship all the way to steel mills or export terminals on the East Coast. Barges and freighters are efficient at moving bulk cargo in a way rail and trucks can’t match. For a time, the Niagara Escarpment was a natural bottleneck between Lake Erie and Lake Ontario, preventing goods from moving directly between the upper lakes and the Atlantic. Freight had to be offloaded and portaged around the falls before it could continue its journey. The Erie Canal solved the problem somewhat, starting in 1825, bypassing Lake Ontario. But it could only accommodate smaller vessels, and even before the Canal opened, another solution was being planned.&lt;/p&gt;
    &lt;p&gt;The Welland Canal runs through the peninsula west of the Niagara River, connecting two massive areas by shipping traffic for the first time in 1829. The canal fueled the early growth of cities along the Great Lakes and St. Lawrence River - including Cleveland, Detroit, Milwaukee, Chicago, Toronto, Montreal, and Quebec City - and it’s been rebuilt and moved several times over its life. The Welland Canal is really a titanic engineering achievement and, were it not positioned next to one of the natural wonders of the world, it would probably be famous in its own right. Because of the huge difference in elevation between the two lakes created by the escarpment, eight separate locks are required to allow ships to traverse between them. And all different kinds do - from personal leisure craft to the lakers that stay in fresh water to the salties that travel between the lakes and the ocean through the St. Lawrence Seaway.&lt;/p&gt;
    &lt;p&gt;Starting on the upstream, Lake Erie side of the canal, the first lock isn’t really for lifting or lowering ships so much as for control. The level of Lake Erie actually fluctuates throughout the year, and there are longer-term trends as well. Wind storms also raise the level locally similar to the way storm surge works during hurricanes. The control lock does just that: it controls the level in the downstream canal. It prevents excess water from rushing down the canal when the lake is high, kind of like an airlock on a spaceship keeps air from rushing out when astronauts step outside for a spacewalk.&lt;/p&gt;
    &lt;p&gt;Downstream of the control lock, the canal splits in two. The original pathway of the canal flows through the eponymous town of Welland, while the larger and newer section of canal, the Welland Bypass… well, it bypasses Welland to the east. If you look carefully, you’ll also notice a small river, the Welland River, which passes underneath both the original and bypass canals. On the way downstream from Lake Erie to Lake Ontario, shipping traffic passes over aqueducts that pass over a natural river. A hydrological wonderland!&lt;/p&gt;
    &lt;p&gt;Continuing downstream from the aqueducts, the remaining seven locks are lift locks, more like what you think of when you imagine a lock. Notice how they’re clustered tightly around the terrain and not distributed evenly along the length of the canal. That’s the Niagara escarpment, the same geological feature that the water cascades down at the falls. This is the elevation diagram of the entire Great Lakes and St. Lawrence Seaway system from Lake Superior to the Atlantic Ocean, and you can see that this drop is the biggest one of the whole thing. And that’s pretty important for another part of the infrastructure on the peninsula.&lt;/p&gt;
    &lt;p&gt;The power available from a moving fluid is directly proportional to the flow rate multiplied by the height of the drop. In most hydropower applications, that height is created artificially by a dam. There aren’t that many places in the world where you have both a large volume of flowing water and a significant natural drop in elevation. But that combination made Niagara Falls the birthplace of large-scale electric power in North America. In 1895, the Niagara Power Company opened the Edward Dean Adams Power Plant, built with Westinghouse AC generators based on the ideas and patents of Nikola Tesla. The plant served as the basis for the modern electrical grids we have today, and many of the fundamental concepts are basically unchanged.&lt;/p&gt;
    &lt;p&gt;But the power infrastructure at Niagara Falls definitely has changed. Where the Adams Power Plant put out about 40 megawatts of power in 1895, now the combined capacity from the region is in the neighborhood of 5 gigawatts. But in both cases, it wasn’t as simple as putting a turbine at the base of the falls. While it might be technically possible to generate power by placing a water wheel directly in the stream of a waterfall like a kid’s bath toy, it’s not the most efficient way (plus it would take away from the beauty). The water used to power the hydroelectric plants on both the US and Canadian sides of the Niagara River is water that never actually flows over the falls. Instead, it’s diverted into five massive tunnels - two on the US side and three on the Canadian side.&lt;/p&gt;
    &lt;p&gt;Like most tunnels, you can’t really see the extent of the hydro tunnels at Niagara Falls. There are a few conspicuous clues though, like these gigantic buildings. These interesting protrusions from the landscape house enormous steel doors, nearly 60 feet tall, that can drop down into the tunnels and close off the flow for inspections and maintenance. Both the Ontario and New York sides of the river feature similar structures.&lt;/p&gt;
    &lt;p&gt;From the tunnels, water flows into major hydropower plants on both sides of the border: the twin Adam Beck stations on the Canadian side and Robert Moses station on the US side. Then it’s released into the the lower part of the river below the falls. When you add them up, that’s 39 turbines with a combined capacity of more than 4000 megawatts. It’s a tremendous amount of power generation in one place. But actually, that’s not all of it.&lt;/p&gt;
    &lt;p&gt;These tunnels divert 50-75% of the flow of the Niagara River. That wide range in percentage of diversion isn’t because we don’t know how much is diverted, but because we actually control how much water is diverted, depending on the tourist requirements agreed upon in a treaty by both nations. During the day in peak tourist season, more water is allowed to flow over the falls to ensure the grandeur of the falls is on full display for the huge crowds of tourists that visit every year. At night and during the winter, more of the flow is diverted to generate power. That’s all managed by this structure upstream of the falls: the international control dam.&lt;/p&gt;
    &lt;p&gt;I’ve always thought this is an interesting dam, since it doesn’t even go all the way across the river. But it doesn’t need to. This structure’s not meant to create a reservoir; it just subtly adjusts the level in the river to control how much water flows over the falls versus into the hydropower intakes. The US side of the Niagara River is pretty shallow, so that side acts kind of like an uncontrolled spillway. Then, the gates on the Canadian side can be adjusted to balance the competing demands on water between tourism and power.&lt;/p&gt;
    &lt;p&gt;But there’s one big problem with those competing needs: they both have the same timing. We want thunderous cascades of water over the falls during the day when tourists are visiting, but daytime is also when the demand for electricity is highest. It’s like if solar panels only worked at night. To accommodate this, both the US and Canada have pumped storage plants. At night, excess electricity is used to pump diverted water into reservoirs, essentially storing both the power and the extra water that’s available during off-peak hours. Then, during the day, the water is released back into the forebay of the power plants. You get a little extra power from that drop out of the reservoir into the forebays, so both sides have small hydropower facilities to capture that. But more importantly, you get a lot more water during the day than would otherwise be available to run through the big plants, making more power when it’s needed most. And there’s just something funny to me that the infrastructure is duplicated on both sides of the river, like neither country was willing to be one-upped by the other.&lt;/p&gt;
    &lt;p&gt;All of this diversion noticeably reduces the flow of water over the falls. Even when they are at ‘full blast’ during the day in the tourist season, only 50% of the flow of the Niagara River makes it over the falls. You can imagine how powerful the falls would be if 100% of the flow were to cascade over. It might seem like this diversion detracts from the majesty of the falls, but in another sense, it actually preserves it.&lt;/p&gt;
    &lt;p&gt;All waterfalls undergo some degree of erosion as the water and sediment suspended in it scours away the rocks and soil underneath. Without any diversion, Niagara Falls would be receding towards Lake Erie at a rate of about 3 feet every year. At the end of the last ice age, the falls were right at the edge of the Niagara Escarpment, but thousands of years of erosion have caused them to work their way upstream. You can actually see how far it’s already progressed by looking at this elevation map. Over the last 12,000 years or so, the falls have migrated by erosion to their current location. By diverting a significant portion of the flow, the power plants have actually slowed the rate of erosion to approximately one foot per year, which will help preserve the falls for a longer period.&lt;/p&gt;
    &lt;p&gt;While flow on the falls is downregulated by diversion for hydropower, the falls are never ‘turned off’...except for the one time in the 1960s. The smaller American Falls (and nearby Bridal Veil Falls) have a pile of loose rocks and boulders, called talus, at their base. This pile of rocky debris actually extends a good fraction of the way up the falls, and officials worried that the falls might ultimately transition into a series of rapids cascading down the slope of talus rather than remaining a majestic waterfall. So, in 1969, the Army Corps of Engineers built a temporary cofferdam between the New York shoreline and Goat Island, diverting the water over the Canadian Horseshoe Falls and leaving the American Falls dry(ish)!&lt;/p&gt;
    &lt;p&gt;After the engineers got a chance to inspect the situation, they determined that the best course of action was just to leave the majority of the talus in place, since it seemed to be stabilizing the cliff face. Sometimes, doing mostly nothing is a decision you make as an engineer, even if you have to do a monumental amount of work to come to that conclusion. So the cofferdam was taken out, and water has flowed continuously over all the falls since then.&lt;/p&gt;
    &lt;p&gt;It really highlights the complexity of Niagara Falls. On the one hand, you have one of the natural wonders of the world, an absolutely enormous set of waterfalls that inspire awe and wonder in the countless travelers who are lucky enough to take in the view. The same thing that makes it impressive for tourists (the big drop) makes it valuable for power and a major challenge for shipping. And out of that comes all kinds of fascinating infrastructure, not only to facilitate the tourism but the other stuff too: a major canal with locks and aqueducts, the international dam control gates, pumped storage reservoirs, epic tunnels, towering gates, massive hydropower plants, and so much more. It’s really a pretty remarkable place for engineering.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://practical.engineering/blog/2025/10/21/the-hidden-engineering-of-niagara-falls"/><published>2025-10-21T22:43:07+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45664147</id><title>OpenBSD 7.8</title><updated>2025-10-22T05:39:18.411042+00:00</updated><link href="https://cdn.openbsd.org/pub/OpenBSD/7.8/ANNOUNCEMENT"/><published>2025-10-22T02:02:58+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45664431</id><title>Show HN: AutoLearn Skills for self-improving agents</title><updated>2025-10-22T05:39:18.296401+00:00</updated><content>&lt;doc fingerprint="3cee66a568cba83b"&gt;
  &lt;main&gt;
    &lt;p&gt;AutoLearn is the MCP server that automatically converts your AI agent's reasoning steps into reliable, cost-effective code that runs deterministically every time.&lt;/p&gt;
    &lt;p&gt;AutoLearn automatically captures your AI agent's reasoning patterns and crystallizes them into deterministic, reusable skills. Each agent gets its own unique skill library.&lt;/p&gt;
    &lt;p&gt;Each agent builds its own unique skill library based on its specific usage patterns&lt;/p&gt;
    &lt;p&gt;No manual skill creation or training required. AutoLearn watches and learns from AI reasoning&lt;/p&gt;
    &lt;p&gt;Skills continuously improve as the agent encounters new edge cases and scenarios&lt;/p&gt;
    &lt;p&gt;Every AI tool call has a ~10% failure rate. In multi-step workflows, these failures compound exponentially, making complex agents unreliable and expensive.&lt;/p&gt;
    &lt;p&gt;Each step has 90% accuracy. But 5 steps together?&lt;/p&gt;
    &lt;p&gt;Convert inconsistent AI reasoning into deterministic code that works the same way every time.&lt;/p&gt;
    &lt;p&gt;Stop paying for repeated reasoning. Run crystallized code instead of expensive AI inference.&lt;/p&gt;
    &lt;p&gt;Agents automatically develop new "Skills" and correct themselves without manual intervention.&lt;/p&gt;
    &lt;p&gt;While MCP servers are limited to tool calling, AutoLearn enables your agents to develop genuine skills that evolve and improve.&lt;/p&gt;
    &lt;p&gt;Your agent works through complex logic to solve problems&lt;/p&gt;
    &lt;p&gt;Patterns and reasoning steps are automatically identified&lt;/p&gt;
    &lt;p&gt;Deterministic code replaces expensive reasoning for future use&lt;/p&gt;
    &lt;p&gt;Replace your RPA and workflow automation tools with intelligent agents that learn and adapt automatically.&lt;/p&gt;
    &lt;p&gt;Traditional RPA breaks when processes change. AutoLearn agents adapt and learn new patterns automatically.&lt;/p&gt;
    &lt;p&gt;When agents encounter errors, they learn from them and develop new skills to handle similar situations.&lt;/p&gt;
    &lt;p&gt;Each crystallized skill can be shared across your entire agent fleet, multiplying learning exponentially.&lt;/p&gt;
    &lt;p&gt; Join the future of AI agent development.&lt;lb/&gt;Start building more reliable, cost-effective agents today. &lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.autolearn.dev"/><published>2025-10-22T02:54:38+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45664848</id><title>Evaluating the Infinity Cache in AMD Strix Halo</title><updated>2025-10-22T05:39:18.062724+00:00</updated><content>&lt;doc fingerprint="2fdaf83057b028f9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Evaluating the Infinity Cache in AMD Strix Halo&lt;/head&gt;
    &lt;p&gt;Strix Halo is the codename for AMD’s highest end mobile chip, which is used in the Ryzen AI MAX series. It combines a powerful CPU with 16 Zen 5 cores and a large GPU with 20 RDNA 3.5 Workgroup Processors (WGPs). The sizeable iGPU makes Strix Halo particularly interesting because GPUs have high bandwidth requirements. Strix Halo tackles that with a 256-bit LPDDR5X-8000 setup combined with 32 MB of memory side cache. The latter is often referred to as Infinity Cache, or MALL (Memory Attached Last Level). I’ll refer to it as Infinity Cache for brevity.&lt;/p&gt;
    &lt;p&gt;Infinity Cache has been around since RDNA2 in AMD’s discrete consumer GPU lineup, where it helped AMD hit high performance targets with lower DRAM bandwidth requirements. However, Infinity Cache’s efficacy has so far been difficult for me to evaluate. AMD’s discrete GPUs have performance monitoring facilities accessible through AMD’s developer tools. But those tools stop providing information past L2. Strix Halo stands out because it has an Infinity Cache implementation, and all the accessible performance monitoring features typical of a recent AMD GPU. That includes programmable performance counters at Infinity Fabric and memory controllers. It’s an opportunity to finally get insight into how well AMD’s Infinity Cache does its job in various graphics workloads.&lt;/p&gt;
    &lt;head rend="h1"&gt;Acknowledgements&lt;/head&gt;
    &lt;p&gt;Special thanks goes out to ASUS for sampling their ROG Flow Z13. This device implements AMD’s Ryzen AI MAX+ 395 with 32 GB of LPDDR5X in a thin and light form factor. It superficially represents a convertible tablet from Microsoft’s Surface line, and is remarkably portable for a device with gaming credentials. Without ASUS’s help, this article wouldn’t have been possible.&lt;/p&gt;
    &lt;head rend="h1"&gt;Infinity Fabric, Performance Monitoring, and Theory&lt;/head&gt;
    &lt;p&gt;AMD’s Infinity Fabric aims to abstract away details of how data travels across the chip. It does so by providing endpoints with well defined interfaces to let blocks make or handle memory requests. Infinity Fabric also provides a set of programmable performance counters. AMD documents a single DATA_BW performance event that counts data beats at endpoints. DATA_BW targets an endpoint via its 8-bit instance ID, and can count either reads or writes. AMD never documented Infinity Fabric instance IDs for Strix Halo. So, I did some guessing by generating traffic at various blocks and observing bandwidth counts at all possible instance IDs.&lt;/p&gt;
    &lt;p&gt;Instance IDs start from the Coherent Stations (CS-es), just like on server platforms. CS blocks sit in front of memory controllers and ensure cache coherency by probing another block if it might have a modified copy of the requested cacheline. If it doesn’t, which is most of the time, the CS will pass the request on to its attached Unified Memory Controller (UMC). Because CS blocks observe all requests to physical memory backed by DRAM, it’s a logical place to implement a memory side cache. That’s exactly what AMD does on chips with Infinity Cache. Cache hits let the CS avoid going to the UMC.&lt;/p&gt;
    &lt;p&gt;Strix Halo has 16 memory controllers and CS instances, each handling a 16-bit LPDDR5X channel. The GPU occupies the next eight instance IDs, suggesting it has a wide interface to Infinity Fabric. CPU core clusters come next. Each octa-core Zen 5 Core Complex (CCX) connects to Infinity Fabric via one endpoint. Miscellaneous blocks follow. These include the NPU, media engine, the display engine, and a mystery.&lt;/p&gt;
    &lt;head rend="h2"&gt;Setting up Performance Monitoring&lt;/head&gt;
    &lt;p&gt;Cache misses usually cause a request to the next level in the memory hierarchy, while cache hits do not. Therefore, my idea is to compare traffic levels at the CS and UMC levels. Traffic that shows up at the CS but not at the UMCs can be used as a proxy for Infinity Cache hits. There are a few problems with that approach though.&lt;/p&gt;
    &lt;p&gt;First, Strix Halo only provides eight Infinity Fabric performance counters. I have to use two counters per endpoint to count both read and write data beats, so I can only monitor four CS-es simultaneously. Memory traffic is interleaved across channels, so taking bandwidth observed at four CS-es and multiplying by four should give a reasonably accurate estimate of overall bandwidth. But interleaving isn’t perfectly even in practice, so I expect a few percentage points of error. The UMC situation is easier. Each UMC has its own set of four performance counters, letting me monitor all of them at the same time. I’m using one counter per UMC to count Column Address Strobe (CAS) commands. Other available UMC events allow monitoring memory controller frequency, bus utilization, and ACTIVATE or PRECHARGE commands. But that stuff goes beyond what I want to focus on here, and collecting more data points would make for annoyingly large spreadsheets.&lt;/p&gt;
    &lt;p&gt;Cross-CCX traffic presents a second source of error as mentioned above. If a CS sends a probe that hits a modified line, it won’t send a request to the UMC. The request is still being satisfied out of cache, just not the Infinity Cache that I’m interested in. I expect this to be rare because cross-CCX traffic in general is usually low compared to requests satisfied from DRAM. It’ll be especially rare in the graphics workloads I’m targeting here because Strix Halo’s second CCD tends to be parked in Windows.&lt;/p&gt;
    &lt;p&gt;CPU-side traffic in general presents a more significant issue. Strix Halo’s Infinity Cache narrowly targets the GPU, and only GPU-side memory requests cause cache fills. CPU memory accesses will be counted as misses in a hitrate calculation. That may be technically correct, but misses the point of Infinity Cache. Most memory traffic comes from the GPU, but there’s enough CPU-side traffic to create a bit more of an error bar than I’d like. Therefore, I want to focus on whether Infinity Cache is handling enough traffic to avoid hitting DRAM bandwidth bottlenecks.&lt;/p&gt;
    &lt;p&gt;A final limitation is that I’m sampling performance counters with a tool I wrote years ago. I wrote it so I could look at hardware performance stats just like how I like looking at Task Manager or other monitoring utilities to see how my system is doing. Because I’m updating a graphical interface, I sample data every second and thus have lower resolution compared to some vendor tools. Those can often sample at millisecond granularity or better. That opens the window to underestimating bandwidth demands if a bandwidth spike only occurs over a small fraction of a second. In theory I could write another tool. But Chips and Cheese is an unpaid hobby project that has to be balanced with a separate full time job as well as other free time interests. Quickly rigging an existing project to do my bidding makes more efficient use of time, because there’s never enough time to do everything I want.&lt;/p&gt;
    &lt;head rend="h1"&gt;Results&lt;/head&gt;
    &lt;p&gt;I logged data over some arbitrarily selected graphics workloads, then selected the 1-second interval with the highest DRAM bandwidth usage. That should give an idea of whether Strix Halo comes close to reaching DRAM bandwidth limits. Overall, the 32 MB cache seems to do its job. Strix Halo is able to stay well clear of the 256 GB/s theoretical bandwidth limit that its LPDDR5X-8000 setup can deliver.&lt;/p&gt;
    &lt;p&gt;Approximate CS-side bandwidth demands do indicate several workloads can push uncomfortably close to 256 GB/s. A workload doesn’t necessarily have to get right up to bandwidth limits for memory-related performance issues to start cropping up. Under high bandwidth demand, requests can start to pile up in various queues and end-to-end memory latency can increase. GHPC and Ungine Valley fall into that category. 3DMark Time Spy Extreme would definitely be DRAM bandwidth bound without the memory side cache.&lt;/p&gt;
    &lt;p&gt;Picking an interval with maximum bandwidth demands at the CS gives an idea of how much bandwidth Strix Halo’s GPU can demand. Strix Halo has the same 2 MB of graphics L2 cache that AMD’s older 7000 series “Phoenix” mobile chip had, despite more than doubling GPU compute throughput. Unsurprisingly, the GPU can draw a lot of bandwidth across Infinity Fabric. 3DMark Time Spy again stands out. If AMD wanted to simply scale up DRAM bandwidth without spending die area on cache, they would need well over 335 GB/s from DRAM.&lt;/p&gt;
    &lt;p&gt;Curiously, Digital Foundry notes that Strix Halo has very similar graphics performance to the PS5. The PS5 uses a 256-bit, 14 GT/s GDDR6 setup that’s good for 448 GB/s of theoretical bandwidth, and doesn’t have a memory side cache like Strix Halo. 448 GB/s looks just about adequate for satisfying Time Spy Extreme’s bandwidth needs, if just barely. If Strix Halo didn’t need to work in power constrained mobile devices, and didn’t need high memory capacity for multitasking, perhaps AMD could have considered a GDDR6 setup. To bring things back around to Infinity Cache, it seems to do very well at that interval above. It captures approximately 73% of memory traffic going through Infinity Fabric, which is good even from a hitrate point of view.&lt;/p&gt;
    &lt;p&gt;The two bar graphs above already hint at how bandwidth demands and cache hitrates vary across workloads. Those figures vary within a workload as well, though plotting all of the logged data would be excessive. Variation both across and within workloads makes it extremely difficult to summarize cache efficacy with a single hitrate figure. Plotting the percentage of traffic at the CS not observed at the UMCs as a proxy for hitrate further emphasizes that point.&lt;/p&gt;
    &lt;p&gt;Resolution settings can impact cache hitrate as well. While I don’t have a direct look at hitrate figures, plotting with the data I do have suggests increasing resolution in the Ungine Valley benchmark tends to depress hitrate.&lt;/p&gt;
    &lt;p&gt;AMD presented a slide at Hot Chips 2021 with three lines for different resolutions across a set of different cache capacities. I obviously can’t test different cache capacities. But AMD’s slide does beg the question of how well a 32 MB cache can do at a wider range of resolutions, and whether bandwidth demands remain under control at resolutions higher than what AMD may have optimized the platform for.&lt;/p&gt;
    &lt;p&gt;Ungine Superposition and 3DMark workloads can both target a variety of resolutions without regard to monitor resolution. Logging data throughout benchmark runs at different resolutions shows the 32 MB cache providing reasonable “bandwidth amplification” at reasonable resolutions. At unreasonable resolutions, the cache is still able to do something. But it’s not as effective as it was at lower resolutions.&lt;/p&gt;
    &lt;p&gt;Plotting data over time shows spikes and dips in Infinity Cache efficacy occur at remarkably consistent times, even at different resolutions. 8K is an exception with the Superposition benchmark. The 8K line looks stretched out, possibly because Strix Halo’s GPU was only able to average a bit over 10 FPS, and time got slowed a bit.&lt;/p&gt;
    &lt;p&gt;If Strix Halo’s iGPU were capable of delivering over 30 FPS in Superposition, AMD would definitely need a larger cache, more DRAM bandwidth, or a combination of both. Taking a simplistic view and tripling maximum observed 8K bandwidth demands would give a figure just north of 525 GB/s. But Strix Halo’s iGPU clearly wasn’t built with such a scenario in mind, and AMD’s selected combination of cache capacity and DRAM bandwidth works well enough at all tested resolutions. While high resolutions create the most DRAM traffic, 1080P shows the heaviest bandwidth demands at the Infinity Fabric level.&lt;/p&gt;
    &lt;p&gt;3DMark Wild Life Extreme is a better example because it’s a lightweight benchmark designed to run on mobile devices. Strix Halo’s iGPU can average above 30 FPS even when rendering at 8K. Again, DRAM bandwidth demands increase and Infinity Cache becomes less effective as resolution goes up. But Infinity Cache still does enough to keep the chip well clear of DRAM bandwidth limits. Thus the cache does its job, and the bandwidth situation remains under control across a wide range of resolutions.&lt;/p&gt;
    &lt;p&gt;Bandwidth demands are more important than hitrates. Curiously though, Wild Life Extreme experiences increasingly severe hitrate dips at higher resolutions around the 16-19 and 45-52 second intervals. Those dips barely show at 1440P or below. Perhaps a 32 MB cache’s efficacy also shows more variation as resolution increases.&lt;/p&gt;
    &lt;head rend="h1"&gt;A Video?&lt;/head&gt;
    &lt;p&gt;A few errors here - I said Core Coherent Master read/write beats were 32B and 64B/cycle. It’s not per cycle, it’s per data beat. And I meant to say reads outnumber writes at the end.&lt;/p&gt;
    &lt;head rend="h1"&gt;Final Words&lt;/head&gt;
    &lt;p&gt;Chip designers have to tune their designs to perform well across a wide variety of workloads. Cache sizes are one parameter on the list. AMD chose to combine a 32 MB cache with 256 GB/s of DRAM bandwidth, and it seems to do well enough across the workloads I tested. Monitoring at the CS-es and UMCs also supports AMD’s data showing that higher resolutions tend to depress hitrate. Those results explain why larger GPUs tend to have larger caches and higher DRAM bandwidth.&lt;/p&gt;
    &lt;p&gt;At a higher level, GPU bandwidth demands have been a persistent challenge for large iGPUs and have driven a diverse set of solutions. Over a decade ago, Intel created “halo” iGPU variants and paired a 128 MB eDRAM cache while sticking with a typical 128-bit client memory bus. AMD’s console chips use large and fast DRAM buses. The PS5 is one example. Strix Halo does a bit of both. It combines modest cache capacity with a more DRAM bandwidth than typical client chips, but doesn’t rely as much on DRAM bandwidth as console chips.&lt;/p&gt;
    &lt;p&gt;Those varied approaches to the bandwidth problem are fascinating. Watching how Infinity Cache behaves in various graphics workloads has been fascinating as well. But everything would be so much more fun if AMD’s tools provided direct data on Infinity Cache hitrates. That applies to both integrated and discrete GPUs. Infinity Cache is a well established part of AMD’s strategy. It has been around for several generations, and now has a presence in AMD’s mobile lineup too. I suspect developers would love to see Infinity Cache hitrates in addition to the data on GPU-private caches that AMD’s current tools show.&lt;/p&gt;
    &lt;p&gt;If you like the content then consider heading over to the Patreon or PayPal if you want to toss a few bucks to Chips and Cheese. Also consider joining the Discord.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://chipsandcheese.com/p/evaluating-the-infinity-cache-in"/><published>2025-10-22T04:20:09+00:00</published></entry></feed>