<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>hnrss.org/frontpage</id><title>Hacker News: Front Page</title><updated>2025-10-28T15:40:35.505951+00:00</updated><link href="https://news.ycombinator.com/" rel="alternate"/><link href="https://raw.githubusercontent.com/Prabesh01/hnrss-content-extract/refs/heads/main/out/rss.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><subtitle>Hacker News RSS</subtitle><entry><id>https://news.ycombinator.com/item?id=45722639</id><title>Claude for Excel</title><updated>2025-10-28T15:40:45.582118+00:00</updated><content>&lt;doc fingerprint="3d3f8e961dffc20a"&gt;
  &lt;main&gt;
    &lt;p&gt;Piloting Claude for Excel&lt;/p&gt;
    &lt;p&gt;Claude understands your entire workbookâfrom nested formulas to multiple tab dependencies. Get explanations with cell-level citations, and update assumptions while preserving formulas. Now in beta as a research preview.&lt;/p&gt;
    &lt;head rend="h2"&gt;How teams use Claude for Excel&lt;/head&gt;
    &lt;p&gt;Claude listens carefully, follows instructions precisely, â¨and thinks through complex problems.&lt;/p&gt;
    &lt;head rend="h3"&gt;Get answers about any cell in seconds&lt;/head&gt;
    &lt;p&gt;Navigate complex models instantly. Ask Claude about specific formulas, entire worksheets, or calculation flows across tabs. Every explanation includes cell-level citations so you can verify the logic.&lt;/p&gt;
    &lt;head rend="h3"&gt;Test scenarios without breaking formulas&lt;/head&gt;
    &lt;p&gt;Update assumptions across your entire model while preserving all dependencies. Test different scenarios quicklyâClaude highlights every change with explanations for full transparency.&lt;/p&gt;
    &lt;head rend="h3"&gt;Debug and fix errors&lt;/head&gt;
    &lt;p&gt;Trace #REF!, #VALUE!, and circular reference errors to their source in seconds. Claude explains what went wrong and how to fix it without disrupting the rest of your model.&lt;/p&gt;
    &lt;head rend="h3"&gt;Build models or fill existing templates&lt;/head&gt;
    &lt;p&gt;Create draft financial models from scratch based on your requirements. Or populate existing templates with fresh data while maintaining all formulas and structure.&lt;/p&gt;
    &lt;p&gt;The Claude you trust, right in Excel&lt;/p&gt;
    &lt;head rend="h3"&gt;Transparency and visibility&lt;/head&gt;
    &lt;p&gt;See Claudeâs changes in real time with explanations&lt;/p&gt;
    &lt;head rend="h3"&gt;Formula integrity&lt;/head&gt;
    &lt;p&gt;Maintain Excel model structure and formatting&lt;/p&gt;
    &lt;head rend="h3"&gt;Enterprise security&lt;/head&gt;
    &lt;p&gt;Works within your existing compliance framework&lt;/p&gt;
    &lt;p&gt;FAQ&lt;/p&gt;
    &lt;p&gt;Claude for Excel is available in beta as a research preview through a waitlist for 1,000 Max, Team and Enterprise plan customers. Weâll gradually expand access as we build confidence through this limited preview.&lt;/p&gt;
    &lt;p&gt;Claude for Excel works within your existing security framework. Claude can make mistakes, so you should always review changes before finalizing, especially for client-facing deliverables.&lt;/p&gt;
    &lt;p&gt;Claude for Excel is currently in beta as a research preview, so itâs best for model analysis, assumption updates, error debugging, template population, formula explanations, multi-tab navigation. Claude doesnât have advanced Excel capabilities including pivot tables, conditional formatting, data validation, data tables, macros, and VBA. Weâre actively working on these features.&lt;/p&gt;
    &lt;p&gt;Yes, Claude is trained to recognize common financial modeling patterns, formula structures, and industry-standard calculations. However, always verify outputs match your specific methodologies.&lt;/p&gt;
    &lt;p&gt;Currently .xlsx and .xlsm files are supported. File size limits apply based on your Claude plan.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.claude.com/claude-for-excel"/><published>2025-10-27T16:09:22+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45723159</id><title>JetKVM – Control any computer remotely</title><updated>2025-10-28T15:40:45.367373+00:00</updated><content>&lt;doc fingerprint="af5976106919f929"&gt;
  &lt;main&gt;
    &lt;head rend="h2"&gt;Ultra-Low Latency&lt;/head&gt;
    &lt;p&gt;High-definition 1080p video at 60 FPS with 30-60 millisecond latency, using efficient H.264 encoding. Smooth mouse and keyboard action transfer for responsive remote interaction.&lt;/p&gt;
    &lt;head rend="h2"&gt;Free &amp;amp; Optional Cloud Access&lt;/head&gt;
    &lt;p&gt;Optional remote management via our open-source JetKVM Cloud using WebRTC. Privacy-first design with opt-in cloud access that provides secure and fast direct connections, even behind the most restrictive NAT environments, with our STUN and TURN servers.&lt;/p&gt;
    &lt;head rend="h2"&gt;Open Source: Built for Collaboration&lt;/head&gt;
    &lt;p&gt;JetKVM is built on a robust Golang foundation and powered by Linux for adaptability and transparency. Whether you're a seasoned developer or an enthusiastic tinkerer, you can easily modify or fine-tune the software using familiar tooling and straightforward SSH uploads.&lt;/p&gt;
    &lt;head rend="h4"&gt;Available Source Code&lt;/head&gt;
    &lt;head rend="h5"&gt;KVM Runtime&lt;/head&gt;
    &lt;p&gt;Combining a Go-based backend with a React-powered WebRTC dashboard. Perfect for forking, submitting new features, fixing bugs, or customizing local streaming and control.&lt;/p&gt;
    &lt;head rend="h5"&gt;Cloud API &amp;amp; Dashboard&lt;/head&gt;
    &lt;p&gt;Our cloud-hosted management interface is fully open source. Delve into our secure remote connection orchestration or fork it to build specialized workflows and unique integrations.&lt;/p&gt;
    &lt;head rend="h5"&gt;Core System&lt;/head&gt;
    &lt;p&gt;Minimal Linux system built with BusyBox for core utilities. No bloat or unnecessary services - just the essential components needed for stable remote access.&lt;/p&gt;
    &lt;head rend="h2"&gt;Universally loved&lt;/head&gt;
    &lt;p&gt;Every single tech reviewer who's tested JetKVM has given it a glowing review. No exceptions. From professional data centers to home labs, the verdict is unanimous: this is the remote access solution the tech world has been waiting for.&lt;/p&gt;
    &lt;head rend="h2"&gt;Unlimited Hackability&lt;/head&gt;
    &lt;p&gt;The JetKVM hardware is fully customizable. Through the RJ12 extension port, extra hardware capabilities can easily be added by anyone. The JetKVM extension port is the way to fully customize your device.&lt;/p&gt;
    &lt;head rend="h2"&gt;Seamless Remote Control&lt;/head&gt;
    &lt;p&gt;Experience fluid control and crystal-clear video quality that makes remote access feel local. Perfect for IT professionals, developers, and power users who demand responsive remote management.&lt;/p&gt;
    &lt;head rend="h2"&gt;Stay updated on our latest projects&lt;/head&gt;
    &lt;p&gt;Join our newsletter to receive updates about new features, product launches, and early access opportunities.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://jetkvm.com/"/><published>2025-10-27T16:44:17+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45725009</id><title>Study finds growing social circles may fuel polarization</title><updated>2025-10-28T15:40:44.907028+00:00</updated><content>&lt;doc fingerprint="b71dc3835465878d"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;More friends, more division: Study finds growing social circles may fuel polarization&lt;/head&gt;
    &lt;head rend="h5"&gt;Sadie Harley&lt;/head&gt;
    &lt;p&gt;scientific editor&lt;/p&gt;
    &lt;head rend="h5"&gt;Robert Egan&lt;/head&gt;
    &lt;p&gt;associate editor&lt;/p&gt;
    &lt;p&gt;Between 2008 and 2010, polarization in society increased dramatically alongside a significant shift in social behavior: the number of close social contacts rose from an average of two to four or five people. The connection between these two developments could provide a fundamental explanation for why societies around the world are increasingly fragmenting into ideological bubbles.&lt;/p&gt;
    &lt;p&gt;"The big question that not only we, but many countries are currently grappling with, is why polarization has increased so dramatically in recent years," says Stefan Thurner from the Complexity Science Hub (CSH), explaining the study's motivation. The research was published in Proceedings of the National Academy of Sciences.&lt;/p&gt;
    &lt;p&gt;The researchers' findings confirm that increasing polarization is not merely perceived—it is measurable and objectively occurring. "And this increase happened suddenly, between 2008 and 2010," says Thurner. The question remained: what caused it?&lt;/p&gt;
    &lt;head rend="h2"&gt;The friendship shift: From two to five close contacts&lt;/head&gt;
    &lt;p&gt;To investigate, Thurner and his team examined whether social networks had changed—specifically, whether people's close friendships had shifted. "For decades, sociological studies showed that people maintained an average of about two close friends—people who could influence their opinions on important issues," explains Thurner.&lt;/p&gt;
    &lt;p&gt;Here too, the researchers identified a striking change: "Around 2008, there was a sharp increase from an average of two close friends to four or five," explains CSH scientist Jan Korbel.&lt;/p&gt;
    &lt;head rend="h2"&gt;The paradox: More connection, more division&lt;/head&gt;
    &lt;p&gt;Are these two developments related? Do more close friends—and thus denser social networks—lead to network fragmentation and ultimately societal polarization?&lt;/p&gt;
    &lt;p&gt;Using a model based on real data, the researchers discovered this could indeed be the case: "When network density increases with more connections, polarization within the collective inevitably rises sharply," says Markus Hofer from CSH.&lt;/p&gt;
    &lt;p&gt;"This finding impressed us greatly because it could provide a fundamental explanation for the peculiar form of polarization we're currently observing simultaneously across many parts of the world—one that definitely threatens democracy," Thurner continues.&lt;/p&gt;
    &lt;p&gt;"When people are more connected with each other, they encounter different opinions more frequently. This inevitably leads to more conflict and thus greater societal polarization," adds Korbel.&lt;/p&gt;
    &lt;p&gt;Polarization has always existed, but what is happening now goes far beyond historical patterns. Greater connectivity has led to the formation of fewer but more tightly-knit groups with strongly differing opinions, between which there is hardly any exchange.&lt;/p&gt;
    &lt;p&gt;"There are few bridges between these 'bubbles,' and when they exist, they are often negative or even hostile," says Korbel. "This is called fragmentation, and it represents a new social phenomenon," adds Thurner.&lt;/p&gt;
    &lt;head rend="h2"&gt;Behind the numbers: Tracking polarization through decades of data&lt;/head&gt;
    &lt;p&gt;For their study, the researchers analyzed extensive existing survey data on both polarization and social networks.&lt;/p&gt;
    &lt;p&gt;"To measure political polarization, we used over 27,000 surveys from the Pew Research Center, which regularly records political attitudes of people in the US," explains Hofer.&lt;/p&gt;
    &lt;p&gt;"The key advantage of this data is that the questions have remained virtually unchanged over time, enabling reliable long-term comparisons."&lt;/p&gt;
    &lt;p&gt;The researchers found that political attitudes became significantly more one-sided between 1999 and 2017. For example, only 14% of respondents consistently expressed liberal views in 1999, but by 2017, this had risen to 31%. Conversely, only 6% of respondents consistently held conservative views in 1999, compared to 16% in 2017.&lt;/p&gt;
    &lt;p&gt;"More and more people are clearly aligning themselves with one political camp rather than holding a mixture of liberal and conservative views," explains Hofer.&lt;/p&gt;
    &lt;p&gt;To analyze friendship networks, the researchers combined 30 different surveys totaling over 57,000 respondents from Europe and the US, including the General Social Survey (US) and the European Social Survey.&lt;/p&gt;
    &lt;p&gt;"Despite minor differences between individual surveys, the data consistently show that the average number of close friendships rose from 2.2 in 2000 to 4.1 in 2024," says Hofer.&lt;/p&gt;
    &lt;p&gt;"The decisive contribution of this study is that it reconciled both phenomena using a mathematical social model," explains Thurner.&lt;/p&gt;
    &lt;p&gt;"This enabled us to show that increasing connectivity must lead to sudden polarization once a critical connectivity density is exceeded—just like a phase transition in physics, such as water turning to ice," adds Hofer.&lt;/p&gt;
    &lt;p&gt;"It is fascinating that these phase transitions also exist in societies. The exact location of these critical thresholds still needs clarification. According to our results, for close relationships, it lies somewhere between three and four people," the researchers note.&lt;/p&gt;
    &lt;head rend="h2"&gt;The smartphone era: When connection may have become fragmentation&lt;/head&gt;
    &lt;p&gt;The sharp rise in both polarization and the number of close friends occurred between 2008 and 2010—precisely when social media platforms and smartphones first achieved widespread adoption. This technological shift may have fundamentally changed how people connect with each other, indirectly promoting polarization.&lt;/p&gt;
    &lt;p&gt;"Democracy depends on all parts of society being involved in decision-making, which requires that everyone be able to communicate with each other. But when groups can no longer talk to each other, this democratic process breaks down," emphasizes Stefan Thurner.&lt;/p&gt;
    &lt;p&gt;Tolerance plays a central role. "If I have two friends, I do everything I can to keep them—I am very tolerant towards them. But if I have five and things become difficult with one of them, it's easier to end that friendship because I still have 'backups.' I no longer need to be as tolerant," explains Thurner.&lt;/p&gt;
    &lt;p&gt;What disappears as a result is a societal baseline of tolerance—a development that could contribute to the long-term erosion of democratic structures. To prevent societies from increasingly fragmenting, Thurner emphasizes the importance of learning early how to engage with different opinions and actively cultivating tolerance.&lt;/p&gt;
    &lt;p&gt;More information: Thurner, Stefan, Why more social interactions lead to more polarization in societies, Proceedings of the National Academy of Sciences (2025). DOI: 10.1073/pnas.2517530122. doi.org/10.1073/pnas.2517530122&lt;/p&gt;
    &lt;p&gt;Journal information: Proceedings of the National Academy of Sciences&lt;/p&gt;
    &lt;p&gt;Provided by Complexity Science Hub Vienna&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://phys.org/news/2025-10-friends-division-social-circles-fuel.html"/><published>2025-10-27T19:06:34+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45726192</id><title>Easy RISC-V</title><updated>2025-10-28T15:40:44.613518+00:00</updated><content>&lt;doc fingerprint="bae7c0d12017aa49"&gt;
  &lt;main&gt;&lt;p&gt;(Last updated: 2025-10-28 08:04)&lt;/p&gt;&lt;p&gt;This page is not designed to be used on a narrow screen or without CSS. If you’re having issues using the emulator, try the emulators disabled version.&lt;/p&gt;&lt;p&gt;An interactive introduction to RISC-V assembly programming, by dramforever.&lt;/p&gt;&lt;p&gt;Interested in the code? Want to report an issue? Check out the GitHub page: https://github.com/dramforever/easyriscv&lt;/p&gt;&lt;p&gt;Inspired by Easy 6502 by Nick Morgan, this is a quick-ish introductory tutorial to RISC-V assembly programming. This tutorial is intended for those with a basic familiarity with low level computer science concepts, but unfamiliar with RISC-V. If you’re curious about RISC-V, I hope this will be a good start to your journey to learning about it.&lt;/p&gt;&lt;p&gt;RISC-V (pronounced “risk-five”), as its name suggests, is RISC (Reduced instruction set computer) architecture. Having started its life at UC Berkerley, RISC-V has bred a lively community of students, researchers, engineers and hobbyists working on software and hardware. Some highlights of RISC-V include:&lt;/p&gt;&lt;p&gt;RISC-V is less mature than more established architectures like x86 or Arm, but it is quickly gaining steam and has found great success in many areas of application, such as embedded systems, custom processors, education, and research.&lt;/p&gt;&lt;p&gt;This article will cover the 32-bit bare bones RV32I_Zicsr instruction set with a tiny subset of the privileged architecture. You’ll probably never find a “real” chip with such bare bones instruction support. Most of them will have more extensions for other features like floating point or compressed instructions. However, I would still consider what we have here a “complete” instruction set. For example, Rust has Tier 2 support for the target &lt;code&gt;riscv32i-unknown-none-elf&lt;/code&gt;
which works completely fine with only the instructions we’ll cover
here.&lt;/p&gt;&lt;p&gt;Speaking of instructions we will cover, why don’t we meet the 45 of them right here and now:&lt;/p&gt;&lt;code&gt;lui auipc
jal jalr
beq bne blt bge bltu bgeu
lb lh lw lbu lhu sb sh sw
addi slti sltiu xori ori andi slli srli srai
add sub slt sltu xor or and sll srl sra
ecall ebreak
csrrw csrrs csrrc csrrwi csrrsi csrrci&lt;/code&gt;&lt;p&gt;Some of these instruction names should ring a bell (&lt;code&gt;add&lt;/code&gt;,
&lt;code&gt;or&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;). Others will look like they have some
pattern to it. A few weird ones like &lt;code&gt;auipc&lt;/code&gt; stand out. These
instructions form the foundation of RISC-V, performing the basic tasks a
processor would do.&lt;/p&gt;&lt;p&gt;You will also catch a glimpse of what creating an operating system on RISC-V is like, namely handling exceptions and privilege levels.&lt;/p&gt;&lt;p&gt;Let’s get started.&lt;/p&gt;&lt;p&gt;Throughout this article you will see emulator panes like these:&lt;/p&gt;&lt;p&gt;(If you just see a code block, there’s a JavaScript problem. Make sure you’ve enabled JavaScript, probably…)&lt;/p&gt;&lt;p&gt;You can use the buttons to control each emulator. Go ahead and click on ‘Start’. A register view should pop up showing the state of the emulator. Now click on ‘Run’. You’ll notice that:&lt;/p&gt;&lt;code&gt;a0 (x10) 0x00000000&lt;/code&gt;&lt;p&gt;Changed into:&lt;/p&gt;&lt;code&gt;a0 (x10) 0x00000123&lt;/code&gt;&lt;p&gt;And the emulator stopped. Congratulations, you’ve run your first RISC-V assembly program. First here, at least.&lt;/p&gt;&lt;p&gt;‘Start’ assembles your code and, well, starts the emulator. If there’s a problem with your code, it will tell you about it and the emulator will not start.&lt;/p&gt;&lt;p&gt;When the emulator is started, you can see the current state of the registers in the side pane. More controls also becomes available. ‘Run’ runs until the end or until you hit ‘Pause’. ‘Step’ runs a single step.&lt;/p&gt;&lt;p&gt;If you hit ‘Step’, you’ll notice that the above program takes two steps to run. You may have guessed correctly that the first step corresponds to &lt;code&gt;addi&lt;/code&gt;, and the second corresponds to
&lt;code&gt;ebreak&lt;/code&gt;. The top of the register panel shows
&lt;code&gt;pc&lt;/code&gt;, the current instruction address, and in parentheses the
current instruction.&lt;/p&gt;&lt;p&gt;‘Dump’ opens a new window containing some text. There are two sections: the first is the symbol table, which tells you about the labels in your code:&lt;/p&gt;&lt;code&gt;# Symbols
# 0x40000000 start&lt;/code&gt;&lt;p&gt;The second section is an annotated version of your code:&lt;/p&gt;&lt;code&gt;start:
{ 0x40000000: 12300513 } addi x10, x0, 0x123
{ 0x40000004: 00100073 } ebreak&lt;/code&gt;&lt;p&gt;This tells you that the &lt;code&gt;addi&lt;/code&gt; instruction encodes to hex
&lt;code&gt;12300513&lt;/code&gt;, and starts at address hex &lt;code&gt;40000000&lt;/code&gt;.
Similarly, &lt;code&gt;ebreak&lt;/code&gt; encodes as &lt;code&gt;00100073&lt;/code&gt; at
address hex &lt;code&gt;40000004&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;(Note: RISC-V instructions are little-endian, meaning that the four bytes of &lt;code&gt;addi&lt;/code&gt; are actually
&lt;code&gt;13 05 30 12&lt;/code&gt;.)&lt;/p&gt;&lt;p&gt;We’ll talk in detail about all of &lt;code&gt;pc&lt;/code&gt;, registers,
instructions, labels, and the two checkboxes later.&lt;/p&gt;&lt;p&gt;Now you may have also guessed that &lt;code&gt;addi x10, x0, 0x123&lt;/code&gt;
means &lt;code&gt;x10 = x0 + 0x123&lt;/code&gt;. As for &lt;code&gt;ebreak&lt;/code&gt;, for
now, just remember that &lt;code&gt;ebreak&lt;/code&gt; stops the emulator.&lt;/p&gt;&lt;p&gt;The program counter, or &lt;code&gt;pc&lt;/code&gt; is the address of
the current instruction. It points to the instruction to be
executed.&lt;/p&gt;&lt;p&gt;RV32I has 31 general purpose registers numbered &lt;code&gt;x1&lt;/code&gt; through
&lt;code&gt;x31&lt;/code&gt;. These can contain any 32-bit data.&lt;/p&gt;&lt;p&gt;(If you’re wondering, there are no flags for RV32I.)&lt;/p&gt;&lt;p&gt;The register &lt;code&gt;x0&lt;/code&gt; is a
special “zero register”. For computational instructions, you can use
&lt;code&gt;x0&lt;/code&gt; anywhere a register is expected. Reading it always gives
zero, and writing to it just gets ignored. The use of a special register
simplifies the design of the architecture, and this design is shared by
MIPS and Arm AArch64. We will make good use of &lt;code&gt;x0&lt;/code&gt; soon.&lt;/p&gt;&lt;p&gt;(Note: In the emulator, the instruction listed in parenthesis next to &lt;code&gt;pc&lt;/code&gt; in the register view is provided as a convenience and is
not part of the processor state.)&lt;/p&gt;&lt;p&gt;But before we can start talking about instructions themselves, we need a way to talk about the instruction syntax so I can, you know, write it down for you.&lt;/p&gt;&lt;p&gt;The syntax of an instruction is the instruction name and then several comma-separated operands. For example, for this instruction we’ve seen above:&lt;/p&gt;&lt;code&gt;addi x10, x0, 0x123&lt;/code&gt;&lt;p&gt;&lt;code&gt;x10&lt;/code&gt; is the destination register or
&lt;code&gt;rd&lt;/code&gt;. The next operand is
the first (and only) source
register or &lt;code&gt;rs1&lt;/code&gt;. The last operand is an
immediate value or &lt;code&gt;imm&lt;/code&gt;. Using these
abbreviations, we can summarize that the syntax for &lt;code&gt;addi&lt;/code&gt;
is:&lt;/p&gt;&lt;code&gt;addi rd, rs1, imm&lt;/code&gt;&lt;p&gt;Some other instructions have a second source register or &lt;code&gt;rs2&lt;/code&gt;. For example, the
non-immediate &lt;code&gt;add&lt;/code&gt; instruction has this syntax:&lt;/p&gt;&lt;code&gt;add rd, rs1, rs2&lt;/code&gt;&lt;p&gt;Some other instructions have no operands, like &lt;code&gt;ebreak&lt;/code&gt;.
Others have slightly more complex operands.&lt;/p&gt;&lt;p&gt;Using the registers as a playground of numbers, we can use computational instructions to work with them.&lt;/p&gt;&lt;p&gt;As we’ve seen above, you can get a RISC-V machine to add numbers together.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;addi&lt;/code&gt;
instruction adds the value in &lt;code&gt;rs1&lt;/code&gt; to the immediate value
&lt;code&gt;imm&lt;/code&gt;, and puts the result in &lt;code&gt;rd&lt;/code&gt;.&lt;/p&gt;&lt;code&gt;addi rd, rs1, imm&lt;/code&gt;&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; instruction
adds the value in &lt;code&gt;rs1&lt;/code&gt; to the value in &lt;code&gt;rs2&lt;/code&gt;, and
puts the result in &lt;code&gt;rd&lt;/code&gt;.&lt;/p&gt;&lt;code&gt;add rd, rs1, rs2&lt;/code&gt;&lt;p&gt;The opposite of addition is subtraction. The &lt;code&gt;sub&lt;/code&gt; instruction subtracts the
value in &lt;code&gt;rs2&lt;/code&gt; from the value in &lt;code&gt;rs1&lt;/code&gt;
(i.e. &lt;code&gt;rs1 - rs2&lt;/code&gt;), and puts the result in &lt;code&gt;rd&lt;/code&gt;.
There’s no corresponding &lt;code&gt;subi&lt;/code&gt; instruction — Just use
&lt;code&gt;addi&lt;/code&gt; with a negative number.&lt;/p&gt;&lt;code&gt;sub rd, rs1, rs2&lt;/code&gt;&lt;p&gt;Step through this demo program and try writing your own additions and subtractions:&lt;/p&gt;&lt;p&gt;One thing you should note is that the immediate value has a limited range, namely &lt;code&gt;[-2048, 2047]&lt;/code&gt;, the range of a 12-bit two’s
complement signed integer. This limitation is because RV32I uses fixed
32-bit i.e. 4-byte instructions, and only the top 12 bits are available
to encode an immediate value. You can see the hexadecimal value encoded
in the instruction from the ‘Dump’. This article will not go into much
further detail about instruction encodings.&lt;/p&gt;&lt;code&gt;{ 0x40000000: 12300513 } addi x10, x0, 0x123
{ 0x40000004: 55500593 } addi x11, x0, 0x555&lt;/code&gt;&lt;p&gt;Even instructions as simple as addition and subtraction have other interesting uses. We have already used &lt;code&gt;addi x10, x0, 0x123&lt;/code&gt;
to put &lt;code&gt;0x123&lt;/code&gt; in the register &lt;code&gt;x10&lt;/code&gt;. When writing
in assembly, we can use a little shortcut called pseudoinstructions. The
&lt;code&gt;li&lt;/code&gt; (“load immediate”)
pseudoinstruction is a convenient way to put a small value in a
register. It expands to &lt;code&gt;addi rd, x0, imm&lt;/code&gt; when
&lt;code&gt;imm&lt;/code&gt; is in the range &lt;code&gt;[-2048, 2047]&lt;/code&gt;.&lt;/p&gt;&lt;code&gt;li rd, imm&lt;/code&gt;&lt;p&gt;When &lt;code&gt;imm&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;addi&lt;/code&gt; copies the
value without changing it because adding zero is the same as doing
nothing. The &lt;code&gt;mv&lt;/code&gt; (“move”)
pseudoinstruction copies the value from &lt;code&gt;rs1&lt;/code&gt; to
&lt;code&gt;rd&lt;/code&gt;. It expands to &lt;code&gt;addi rd, rs1, 0&lt;/code&gt;.&lt;/p&gt;&lt;code&gt;mv rd, rs1&lt;/code&gt;&lt;p&gt;Using the pseudoinstruction is exactly equivalent to using the “real” instruction. You can see in the dump that the two are assembled exactly the same way.&lt;/p&gt;&lt;p&gt;Subtracting from zero is negation. What’s the negative of &lt;code&gt;0x123&lt;/code&gt;?&lt;/p&gt;&lt;p&gt;Hmm, we get &lt;code&gt;0xfffffedd&lt;/code&gt;. That’s the 32-bit two’s complement
representation of &lt;code&gt;-291&lt;/code&gt;, or &lt;code&gt;-0x123&lt;/code&gt;. There’s
plenty of tutorials on this out there, so we’ll just note that whenever
something is “signed”, RISC-V uses two’s complement representation. The
benefit of this is that there are fewer instructions for separate signed
and unsigned instructions — both signed and unsigned numbers have the
same overflow wrap-around behavior.&lt;/p&gt;&lt;p&gt;Speaking of overflow wrap-around, what happens if we add something too much and it overflows? We’ll use &lt;code&gt;add&lt;/code&gt; to repeatedly
double &lt;code&gt;0x123&lt;/code&gt; and see what happens:&lt;/p&gt;&lt;p&gt;As &lt;code&gt;0x123&lt;/code&gt; crawls up to the upper bits and eventually we
get to &lt;code&gt;0x9180_0000&lt;/code&gt;, in the next iteration it turns into
&lt;code&gt;0x2300_0000&lt;/code&gt;. There was an overflow! Doubling of
&lt;code&gt;0x9180_0000&lt;/code&gt; gives &lt;code&gt;0x1_2300_0000&lt;/code&gt;, but that
needs 33 bits in binary, so the highest bit can’t be put in the result.
Since RISC-V doesn’t have flag bits for carry or overflow, it’s simply
gone. The programmer is expected to deal with this.&lt;/p&gt;&lt;p&gt;While we’re talking about bits, another thing we can do with bits is performing bitwise logical operations on them.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;and&lt;/code&gt; instruction
performs a bitwise-“and” between the bits of &lt;code&gt;rs1&lt;/code&gt; and
&lt;code&gt;rs2&lt;/code&gt; and puts the result in &lt;code&gt;rd&lt;/code&gt;. The &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;xor&lt;/code&gt; instructions similarly
performs bitwise-“or” and bitwise-“xor”, respectively.&lt;/p&gt;&lt;code&gt;and rd, rs1, rs2
or rd, rs1, rs2
xor rd, rs1, rs2&lt;/code&gt;&lt;p&gt;Immediate operand versions of the three, namely &lt;code&gt;andi&lt;/code&gt;, &lt;code&gt;ori&lt;/code&gt;, &lt;code&gt;xori&lt;/code&gt; also exist.&lt;/p&gt;&lt;code&gt;andi rd, rs1, imm
ori rd, rs1, imm
xori rd, rs1, imm&lt;/code&gt;&lt;p&gt;Here are some random bit operation examples you can play with:&lt;/p&gt;&lt;p&gt;Remember that the immediate value is in the range &lt;code&gt;[-2048, 2047]&lt;/code&gt;. For negative values, the two’s complement
representation used means that the high bits are all ones. For example,
using &lt;code&gt;-1&lt;/code&gt; as &lt;code&gt;imm&lt;/code&gt; means the second operand is
binary all ones, or &lt;code&gt;0xffff_ffff&lt;/code&gt;. This allows us to use
&lt;code&gt;xori rd, rs1, -1&lt;/code&gt; as bitwise-“not”.&lt;/p&gt;&lt;p&gt;Another interesting operation you can do is to round/align something up or down to a multiple of a power of two. For example, if you want to find the closest multiple of 16 below &lt;code&gt;a&lt;/code&gt;, in binary that would be clearing the lowest
4 bits, or &lt;code&gt;a &amp;amp; ~0b1111&lt;/code&gt;. Conveniently, that’s
&lt;code&gt;a &amp;amp; -16&lt;/code&gt; in two’s complement.&lt;/p&gt;&lt;p&gt;Aligning up is less intuitive, but one idea would be adding 16 first. However that gives an incorrect result for multiples of 16. It’s easy enough to fix though: adding one less works exactly right: &lt;code&gt;(a + 15) &amp;amp; -16&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Usually when you write a comparison of some sort like &lt;code&gt;a == b&lt;/code&gt; or &lt;code&gt;a &amp;gt;= b&lt;/code&gt;, it’s used as a condition
for some &lt;code&gt;if&lt;/code&gt; or loop, but… those things are complicated!
We’ll get to it later.&lt;/p&gt;&lt;p&gt;Sometimes you just want a boolean value out of a comparison. The C convention uses 1 for true and 0 for false, and since the world runs on C now, that’s what RISC-V provides.&lt;/p&gt;&lt;p&gt;In C there are six comparison operators:&lt;/p&gt;&lt;code&gt;== != &amp;lt; &amp;gt; &amp;lt;= &amp;gt;=&lt;/code&gt;&lt;p&gt;The values being compared can also be both signed or both unsigned.&lt;/p&gt;&lt;p&gt;How many comparison instructions do we have at our disposal? Let’s see…&lt;/p&gt;&lt;p&gt;The &lt;code&gt;slt&lt;/code&gt; (“set less
than”) instruction compares &lt;code&gt;rs1&lt;/code&gt; and &lt;code&gt;rs2&lt;/code&gt; as
signed 32-bit integers, and sets &lt;code&gt;rd&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; if
&lt;code&gt;rs1 &amp;lt; rs2&lt;/code&gt;, and &lt;code&gt;0&lt;/code&gt; otherwise
(&lt;code&gt;rs1 &amp;gt;= rs2&lt;/code&gt;). The &lt;code&gt;sltu&lt;/code&gt; instruction is similar
but it treats the operands as unsigned values. &lt;code&gt;slti&lt;/code&gt; and &lt;code&gt;sltiu&lt;/code&gt; are similar but the
second operand is an immediate value.&lt;/p&gt;&lt;code&gt;slt rd, rs1, rs2
sltu rd, rs1, rs2
slti rd, rs1, imm
sltiu rd, rs1, imm&lt;/code&gt;&lt;p&gt;(Of particular note is &lt;code&gt;sltiu&lt;/code&gt;, where the immediate
operand still has the range &lt;code&gt;[-2048, 2047]&lt;/code&gt; but is sign
extended to 32 bits and then treated as an unsigned value, like what
would happen in C with &lt;code&gt;a &amp;lt; (unsigned)-1&lt;/code&gt;.)&lt;/p&gt;&lt;p&gt;That’s… one of the six comparisons settled. What about the others? As it turns out, we can synthesize any of the other five, using up to two instructions.&lt;/p&gt;&lt;p&gt;Making &lt;code&gt;&amp;gt;&lt;/code&gt; from &lt;code&gt;&amp;lt;&lt;/code&gt; is easy, as you can
just swap the operands. Using &lt;code&gt;xori&lt;/code&gt; with &lt;code&gt;1&lt;/code&gt; we
can invert the result of a comparison, giving as &lt;code&gt;&amp;lt;=&lt;/code&gt; and
&lt;code&gt;&amp;gt;=&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;That was signed comparison but unsigned comparison works the same using &lt;code&gt;sltu&lt;/code&gt; instead of &lt;code&gt;slt&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;As for &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;, let’s tackle the easier
case of &lt;code&gt;a == 0&lt;/code&gt; and &lt;code&gt;a != 0&lt;/code&gt; first. We will use
the fact that for unsigned values, &lt;code&gt;a != 0&lt;/code&gt; is equivalent to
&lt;code&gt;a &amp;gt; 0&lt;/code&gt;. The negation of that is &lt;code&gt;a &amp;lt;= 0&lt;/code&gt;,
which is the same as &lt;code&gt;a &amp;lt; 1&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;As a bonus, this is also how we get logical not and converting integer to boolean.&lt;/p&gt;&lt;p&gt;Now that we have these, &lt;code&gt;a == b&lt;/code&gt; is just
&lt;code&gt;(a - b) == 0&lt;/code&gt;, and &lt;code&gt;a != b&lt;/code&gt; is just
&lt;code&gt;(a - b) != 0&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In summary: (&lt;code&gt;[u]&lt;/code&gt; means use &lt;code&gt;u&lt;/code&gt; for unsigned
comparison and nothing for signed comparison)&lt;/p&gt;&lt;code&gt;a &amp;lt; b&lt;/code&gt;: &lt;code&gt;slt[u]&lt;/code&gt;&lt;code&gt;a &amp;gt; b&lt;/code&gt;: &lt;code&gt;slt[u] reversed&lt;/code&gt;&lt;code&gt;a &amp;lt;= b&lt;/code&gt;: &lt;code&gt;slt[u] reversed ; xori 1&lt;/code&gt;&lt;code&gt;a &amp;gt;= b&lt;/code&gt;: &lt;code&gt;slt[u] ; xori 1&lt;/code&gt;&lt;code&gt;a == 0&lt;/code&gt;: &lt;code&gt;sltu x0&lt;/code&gt;&lt;code&gt;a != 0&lt;/code&gt;: &lt;code&gt;sltiu 1&lt;/code&gt;&lt;code&gt;a == b&lt;/code&gt;: &lt;code&gt;sub ; sltu x0&lt;/code&gt;&lt;code&gt;a != b&lt;/code&gt;: &lt;code&gt;sub ; sltiu 1&lt;/code&gt;&lt;p&gt;There is no way I can do justice to the usage of bit shifts in the middle of a tutorial on RISC-V assembly. If you’re here, you’ve probably heard of them. There’s nothing really special to the way they appear in usage for RISC-V.&lt;/p&gt;&lt;p&gt;There are two variants for right shifting: &lt;code&gt;srl&lt;/code&gt; and &lt;code&gt;srli&lt;/code&gt; (“shift right logical
(immediate)”) performs “logical” or unsigned right shift where the
leftmost or most significant bits are filled with zeros.&lt;/p&gt;&lt;p&gt;&lt;code&gt;sra&lt;/code&gt; and &lt;code&gt;srai&lt;/code&gt; (“shift right
arithmetic (immediate)”) performs “arithmetic” or signed right shift
where the leftmost bits are filled with the same of what highest/sign
bit was. So if you shift a negative value, you get a negative result; if
you shift a non-negative value, you get a non-negative result.&lt;/p&gt;&lt;code&gt;srl rd, rs1, rs2
sra rd, rs1, rs2
srli rd, rs1, imm
srai rd, rs1, imm&lt;/code&gt;&lt;p&gt;As before, the ones with the &lt;code&gt;i&lt;/code&gt; suffix take an immediate
value as the second operand, and the ones without &lt;code&gt;i&lt;/code&gt; take a
register.&lt;/p&gt;&lt;p&gt;So &lt;code&gt;a&lt;/code&gt; means “arithmetic”, &lt;code&gt;l&lt;/code&gt; means “logical”.
Got it.&lt;/p&gt;&lt;p&gt;Left shifts have no such distinction. For consistency they are still “logical”: &lt;code&gt;sll&lt;/code&gt; is left
shift, and &lt;code&gt;slli&lt;/code&gt; is
left shift with immediate.&lt;/p&gt;&lt;code&gt;sll rd, rs1, rs2
slli rd, rs1, imm&lt;/code&gt;&lt;p&gt;Aha, now we can blow up &lt;code&gt;0x123&lt;/code&gt; without repeating myself
so much:&lt;/p&gt;&lt;p&gt;The immediate value for shift instructions are special: they can only be in the range of 0 to 31, inclusive, because it doesn’t make sense to shift by a negative amount, or by more than 31. When the shift amount is taken from a register, the value is considered modulo 32, or in other words only the last 5 bits are taken into account:&lt;/p&gt;&lt;p&gt;For some fun, let’s try multiplying a value by 10, something you would do when parsing decimal numbers: &lt;code&gt;a * 10&lt;/code&gt; can be
rewritten as &lt;code&gt;(a &amp;lt;&amp;lt; 1) + (a &amp;lt;&amp;lt; 3)&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;That’s it?&lt;/p&gt;&lt;p&gt;You may have noticed some glaring omissions. What we’ve learned doesn’t even cover grade school math: multiplication and division are missing.&lt;/p&gt;&lt;p&gt;RISC-V is designed with extensions in mind. Remember that as said in the introduction, RV32I is the barest bones of the barest bones we’ve got. Forcing everyone to make their processors with multiplication and division even for tasks that don’t need them would waste silicon area and money on every chip. Instead those making RISC-V processors have great freedom to choose, and indeed some would say they have too much freedom.&lt;/p&gt;&lt;p&gt;For us… Honestly, I’m just glad we’ve been dealt a hand that we can tackle completely in full. There’s no way I’m finishing writing this tutorial if RV32I wasn’t so bare boned.&lt;/p&gt;&lt;p&gt;(Operand &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;rs1&lt;/code&gt;, and &lt;code&gt;b&lt;/code&gt; is
&lt;code&gt;rs2&lt;/code&gt; or immediate. In the instruction name &lt;code&gt;[i]&lt;/code&gt;
means an immediate variant is available. Subscript &lt;code&gt;u&lt;/code&gt; means
unsigned and &lt;code&gt;s&lt;/code&gt; means two’s complement signed.)&lt;/p&gt;&lt;table&gt;&lt;row span="3"&gt;&lt;cell role="head"&gt;Instruction&lt;/cell&gt;&lt;cell role="head"&gt;Operation&lt;/cell&gt;&lt;cell role="head"&gt;Immediate range&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;&lt;code&gt;add[i]&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;a + b&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;[-2048, 2047]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;&lt;code&gt;sub&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;a - b&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;(n/a)&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;&lt;code&gt;slt[i]&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;(a &amp;lt;s b) ? 1 : 0&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;[-2048, 2047]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;&lt;code&gt;slt[i]u&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;(a &amp;lt;u b) ? 1 : 0&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;[-2048, 2047]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;&lt;code&gt;xor[i]&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;a ^ b&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;[-2048, 2047]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;&lt;code&gt;or[i]&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;a | b&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;[-2048, 2047]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;&lt;code&gt;and[i]&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;a &amp;amp; b&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;[-2048, 2047]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;&lt;code&gt;sll[i]&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;a &amp;lt;&amp;lt; b&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;[0, 31]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row span="3"&gt;&lt;cell&gt;&lt;code&gt;srl[i]&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;a &amp;gt;&amp;gt;u b&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;[0, 31]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt;&lt;code&gt;sra[i]&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;a &amp;gt;&amp;gt;s b&lt;/code&gt;&lt;/cell&gt;&lt;cell&gt;&lt;code&gt;[0, 31]&lt;/code&gt;&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;The &lt;code&gt;addi&lt;/code&gt; instruction has limit on the immediate value.
How do we make bigger values?&lt;/p&gt;&lt;p&gt;The &lt;code&gt;lui&lt;/code&gt; (“load upper
immediate”) instruction takes an immediate in the range
&lt;code&gt;[0, 1048575]&lt;/code&gt; (i.e. up to &lt;code&gt;220 - 1&lt;/code&gt;)
and sets &lt;code&gt;rd&lt;/code&gt; to that value left shifted 12 bits:&lt;/p&gt;&lt;code&gt;lui rd, imm20&lt;/code&gt;&lt;p&gt;That was… slightly confusing. Why don’t we give it a try:&lt;/p&gt;&lt;p&gt;Instead of &lt;code&gt;li&lt;/code&gt; loading a “low” immediate, we control the
upper 20 bits of what we put in the register. After that, we
can use another &lt;code&gt;addi&lt;/code&gt; instruction to fill in the lower bits.
For example, if we want &lt;code&gt;0x12345&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;For convenience, in assembly you can use &lt;code&gt;%hi()&lt;/code&gt; and &lt;code&gt;%lo()&lt;/code&gt; to extract the, well,
high 20 and low 12 bits of a value. The previous example could also be
written:&lt;/p&gt;&lt;p&gt;Letting &lt;code&gt;lui&lt;/code&gt; handle the high 20 bits, and
&lt;code&gt;addi&lt;/code&gt; for the low 12 bits, you can make any 32-bit
value.&lt;/p&gt;&lt;p&gt;(A small complication arises if you want to use values with bit 11 set. In that case, the immediate operand to &lt;code&gt;addi&lt;/code&gt; will have
to be negative. However &lt;code&gt;%hi&lt;/code&gt; understands this and adds one
to compensate, so this &lt;code&gt;%hi&lt;/code&gt;/&lt;code&gt;%lo&lt;/code&gt; combination
does work for everything.)&lt;/p&gt;&lt;p&gt;So far, everything that we’ve had so far can be done on even the most basic programmer’s calculator. To truly make a computer… do computer stuff, we’d want loops and conditionals.&lt;/p&gt;&lt;p&gt;In RISC-V parlance, a branch is a conditional transfer of control flow, and a jump is an unconditional transfer of control flow.&lt;/p&gt;&lt;p&gt;I think the branch instructions are slightly simpler, so let’s start with those.&lt;/p&gt;&lt;p&gt;All the branch instruction follow the form “If some comparison, go to somewhere.” The conditions are:&lt;/p&gt;&lt;code&gt;beq&lt;/code&gt;:
&lt;code&gt;rs1 == rs2&lt;/code&gt; (“equal”)&lt;code&gt;bne&lt;/code&gt;:
&lt;code&gt;rs1 != rs2&lt;/code&gt; (“not equal”)&lt;code&gt;blt&lt;/code&gt;:
&lt;code&gt;rs1 &amp;lt; rs2&lt;/code&gt; signed (“less than”)&lt;code&gt;bge&lt;/code&gt;:
&lt;code&gt;rs1 &amp;gt;= rs2&lt;/code&gt; signed (“greater or equal”)&lt;code&gt;bltu&lt;/code&gt;:
&lt;code&gt;rs1 &amp;lt; rs2&lt;/code&gt; signed (“less than unsigned”)&lt;code&gt;bgeu&lt;/code&gt;:
&lt;code&gt;rs1 &amp;gt;= rs2&lt;/code&gt; signed (“greater or equal unsigned”)&lt;p&gt;(In case you’re wondering about the confusing choice of ordering operators here, it’s just that the negation of &lt;code&gt;&amp;lt;&lt;/code&gt; is
&lt;code&gt;&amp;gt;=&lt;/code&gt;.)&lt;/p&gt;&lt;code&gt;beq rs1, rs2, label
bne rs1, rs2, label
blt rs1, rs2, label
bge rs1, rs2, label
bltu rs1, rs2, label
bgeu rs1, rs2, label&lt;/code&gt;
&lt;p&gt;Oh, right, almost forgot to explain what labels are. Labels are convenience identifiers for addresses at some line of your code. They are some identifier followed by a colon (like &lt;code&gt;this:&lt;/code&gt;). They
can appear on a line of its own, or before any instruction on the line.
You can see which address they point to using the “Dump” button. The
third operand of a branch instruction is a label to jump to if the
condition holds.&lt;/p&gt;&lt;p&gt;Let’s add up all the numbers from 1 to 100:&lt;/p&gt;&lt;p&gt;You can try your hands on making your favorite loops, like fibonacci numbers or something. Speaking of trying your hands, just so we’re ready, here’s what an infinite loop looks like. Try pausing or stopping the loop, and single stepping through the instructions.&lt;/p&gt;&lt;p&gt;(If you know a thing or two about JavaScript in the browser, you’ll know that a real infinite loop in JavaScript makes the whole page becomes unresponsive, unless it’s in a worker or something. The “Run” button here just runs the emulator for a certain number of steps, pausing by giving back control to the event loop in between.)&lt;/p&gt;&lt;p&gt;(This isn’t the preferred way to write an unconditional jump. We’ll see what is later.)&lt;/p&gt;&lt;p&gt;By the way, there’s no &lt;code&gt;bgt[u]&lt;/code&gt; or &lt;code&gt;ble[u]&lt;/code&gt;
because you can just swap &lt;code&gt;rs1&lt;/code&gt; and &lt;code&gt;rs2&lt;/code&gt; to get
those.&lt;/p&gt;&lt;p&gt;There are two jump instructions in RISC-V. One of them is &lt;code&gt;jal&lt;/code&gt; “jump and link”, which
sets &lt;code&gt;rd&lt;/code&gt; to the address of the following instruction, and
then jumps to a label:&lt;/p&gt;&lt;code&gt;jal rd, label&lt;/code&gt;
&lt;p&gt;Another is &lt;code&gt;jalr&lt;/code&gt;
“jump and link register”, which sets &lt;code&gt;rd&lt;/code&gt; to the address of
the following instruction, and then jumps to the address at
&lt;code&gt;imm + rs1&lt;/code&gt;.&lt;/p&gt;&lt;code&gt;jalr rd, imm(rs1)&lt;/code&gt;
&lt;p&gt;(Actually, the address jumped to is &lt;code&gt;(imm + rs1) &amp;amp; ~1&lt;/code&gt;, i.e. the least significant bit is
cleared. This distinction won’t come up in normal code, like, pretty
much ever.)&lt;/p&gt;&lt;p&gt;Eesh, that’s some funky looking syntax. When you see parentheses like this, it has something to do with an address. Parens means address.&lt;/p&gt;&lt;p&gt;That’s… still a lot going on. Let’s take on some simpler cases first: If &lt;code&gt;rd&lt;/code&gt; is &lt;code&gt;x0&lt;/code&gt; then the only thing these
instructions do is jumping. We can use it instead of the branch
instructions for an unconditional jump.&lt;/p&gt;&lt;p&gt;For convenience, a pseudoinstruction is available for you: &lt;code&gt;j&lt;/code&gt; (“jump”) is for
&lt;code&gt;jal&lt;/code&gt; with &lt;code&gt;rd&lt;/code&gt; being &lt;code&gt;x0&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;j label&lt;/code&gt;
&lt;p&gt;As for why you would want to do this… Well, we only have 32 bits per instruction, and since the &lt;code&gt;jal&lt;/code&gt; instruction only needs one
register number instead of the branch instructions’ two, and it doesn’t
need a condition, the instruction encoding permits jumping over a longer
range. So this is always preferred over something like
&lt;code&gt;beq x0, x0, label&lt;/code&gt; for a jump.&lt;/p&gt;&lt;p&gt;As for &lt;code&gt;jalr&lt;/code&gt;, you can jump to an address that’s stored in
a register. In C, that would be dealing with function pointers. You’d
need this any time dynamic dispatch is needed. For example, we load the
address of &lt;code&gt;foo&lt;/code&gt; into a register first before jumping to
it.&lt;/p&gt;&lt;p&gt;In case you forgot by now, the &lt;code&gt;lui&lt;/code&gt;/&lt;code&gt;addi&lt;/code&gt;
combo at the start puts the address of the label &lt;code&gt;foo&lt;/code&gt; in
register &lt;code&gt;x10&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Similar to &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;jr&lt;/code&gt; (“jump register”) is a
psuedoinstruction for &lt;code&gt;jalr&lt;/code&gt; with &lt;code&gt;rd&lt;/code&gt; being
&lt;code&gt;x0&lt;/code&gt; and &lt;code&gt;imm&lt;/code&gt; being &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;jr rs1&lt;/code&gt;
&lt;p&gt;Hmmm… If I didn’t really need the address in &lt;code&gt;x10&lt;/code&gt;, that
&lt;code&gt;addi&lt;/code&gt; would be unnecessary, since &lt;code&gt;jalr&lt;/code&gt; has the
ability to add a low immediate on its own:&lt;/p&gt;&lt;p&gt;What’s the advantage of this over &lt;code&gt;jal x0&lt;/code&gt;? Since
&lt;code&gt;%hi&lt;/code&gt; and &lt;code&gt;%lo&lt;/code&gt; can represent any 32-bit value,
this two-instruction combo can jump to any address, free from range
restrictions. You do need a free scratch register for the high part of
the address though, but since RISC-V gives you 31 of them, this
shouldn’t be too much of a problem.&lt;/p&gt;&lt;p&gt;What’s the deal with the destination register then? What do you need the address of the next instruction for? For jumping back of course. We can use this functionality to call functions and return back.&lt;/p&gt;&lt;p&gt;Note that I used the register &lt;code&gt;x1&lt;/code&gt; for this, which is the
register for providing the return address by convention. For
convenience, if the destination register is omitted in &lt;code&gt;jal&lt;/code&gt;,
it defaults to &lt;code&gt;x1&lt;/code&gt;. Meanwhile, &lt;code&gt;ret&lt;/code&gt; (“return”) is a
pseudoinstruction that stands for &lt;code&gt;jr x1&lt;/code&gt;,
i.e. &lt;code&gt;jalr x0, 0(x1)&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;jal label
ret&lt;/code&gt;
&lt;p&gt;So the example above can be rewritten more conveniently as:&lt;/p&gt;&lt;p&gt;That’s a nice computer we have here. Now we have… all of 31 × 4 = 124 bytes of storage in the form of registers to work with. I want more…&lt;/p&gt;&lt;p&gt;The emulator has 1 MiB of memory starting at address &lt;code&gt;0x4000_0000&lt;/code&gt;. That’s &lt;code&gt;0x4000_0000&lt;/code&gt; to
&lt;code&gt;0x400f_ffff&lt;/code&gt;, inclusive. The assembler starts assembling at
the beginning of memory, as you can see in the dump, starting at address
&lt;code&gt;0x4000_0000&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;.word&lt;/code&gt; directive straight up puts a
4-byte/32-bit word into the current position. You can specify multiple
values separated by commas.&lt;/p&gt;&lt;code&gt;.word value [ , value [ , ...  ] ]&lt;/code&gt;
&lt;p&gt;The &lt;code&gt;lw&lt;/code&gt; (“load word”)
instruction loads a word from the address &lt;code&gt;rs1 + imm&lt;/code&gt; and
puts it in &lt;code&gt;rd&lt;/code&gt;, in other words it reads the word from
memory:&lt;/p&gt;&lt;code&gt;lw rd, imm(rs1)&lt;/code&gt;
&lt;p&gt;As with &lt;code&gt;jalr&lt;/code&gt;, you can combine it with &lt;code&gt;lui&lt;/code&gt;
to access any address.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;sw&lt;/code&gt; (“store word”)
instruction stores &lt;code&gt;rs2&lt;/code&gt; to a word in memory at address
&lt;code&gt;rs2 + imm&lt;/code&gt;, in other words it writes the word to memory:&lt;/p&gt;&lt;code&gt;sw rs2, imm(rs1)&lt;/code&gt;
&lt;p&gt;Just to make absolutely sure we’re clear on this, load means reading from memory, store means writing to memory. Both words can be nouns and verbs. Also, a word is 32-bit for RISC-V.&lt;/p&gt;&lt;p&gt;Let’s have some fun. Can we have the program read itself?&lt;/p&gt;&lt;p&gt;Ohh that’s fun. Does this mean I can also write programs with just &lt;code&gt;.word&lt;/code&gt;?&lt;/p&gt;&lt;p&gt;Oh that’s nice. Just a peek into the world of machine code and instruction encodings… which we will not be getting into.&lt;/p&gt;&lt;p&gt;With memory accesses under our belt, we can address a lot more data easily. Here’s an example where we find the sum of all the values in an array. Note how we can access different addresses of memory, whereas there is no way to address a register by a number in another register.&lt;/p&gt;&lt;p&gt;The equivalent in C would be something like&lt;/p&gt;&lt;code&gt;uint32_t array[], length;

uint32_t *current = array;
uint32_t *end = array + length;
uint32_t sum = 0;

for (; current != end; current ++) {
    sum += *current;
}&lt;/code&gt;
&lt;p&gt;Note how adding one to a pointer to word bumps the address by 4, because the addresses are all byte addresses, and one word is four bytes. In C, the compiler handles the multiplier for you, but in assembly you have to remember to do it manually.&lt;/p&gt;&lt;p&gt;Not everything in memory is word sized. You’ve already seen an array, which is multiple-word-sized. There are also stuff smaller than word-sized.&lt;/p&gt;&lt;p&gt;An obvious one is the byte, which is, well, 1-byte/8-bit and written &lt;code&gt;[u]int8_t&lt;/code&gt; in C. In
the middle is the halfword,
which is 2-byte/16-bit and written &lt;code&gt;[u]int16_t&lt;/code&gt; in C. You can
use the directives &lt;code&gt;.byte&lt;/code&gt; and &lt;code&gt;.half&lt;/code&gt; respectively for those
data types.&lt;/p&gt;&lt;code&gt;.byte value [ , value [ , ...  ] ]
.half value [ , value [ , ...  ] ]&lt;/code&gt;
&lt;p&gt;And just in case you don’t remember those, &lt;code&gt;.2byte&lt;/code&gt; means the same as
&lt;code&gt;.half&lt;/code&gt;, and &lt;code&gt;.4byte&lt;/code&gt; means the same as
&lt;code&gt;.word&lt;/code&gt;.&lt;/p&gt;&lt;code&gt;.2byte value [ , value [ , ...  ] ] # Same as .half
.4byte value [ , value [ , ...  ] ] # Same as .word&lt;/code&gt;
&lt;p&gt;There’s a small problem with loading smaller-than-word sized values into word-sized registers: What do you do with the rest of the bits? Obviously the lowest of the bits gets the actual value loaded. There are two most useful ways to fill the upper bits:&lt;/p&gt;&lt;p&gt;Zero extension is easy enough. As the name suggests, sign extension has something to do with signed values. It’s what happens when you convert a narrower signed value into a wider one.&lt;/p&gt;&lt;p&gt;(Keeping the rest of the bits unchanged isn’t a good option. It complicates the implementation for processor, especially of modern high performance design, to just write parts of a register. It would be easiest if the new value didn’t depend on the old value.)&lt;/p&gt;&lt;p&gt;For example, the signed byte value &lt;code&gt;-100&lt;/code&gt; is
&lt;code&gt;0x9c&lt;/code&gt;. Since the highest bit i.e. the sign bit of it is
&lt;code&gt;1&lt;/code&gt;, when we expand it into 32 bits we fill the high 24 bits
with one so the new value, &lt;code&gt;0xffff_ff9c&lt;/code&gt; still represents
&lt;code&gt;-100&lt;/code&gt;. This is sign extension.&lt;/p&gt;&lt;p&gt;If we want to convert the unsigned byte value &lt;code&gt;156&lt;/code&gt;, still
&lt;code&gt;0x9c&lt;/code&gt;, into an unsigned word, it would have to be
&lt;code&gt;0x0000_009c&lt;/code&gt; to preserve its value.&lt;/p&gt;&lt;p&gt;For bytes, the &lt;code&gt;lb&lt;/code&gt;
(“load byte”) instruction loads a byte and sign extends the result, and
the &lt;code&gt;lbu&lt;/code&gt; (“load byte
unsigned”) instruction does the same but zero extends the result. As
with &lt;code&gt;lw&lt;/code&gt;, the address is &lt;code&gt;rs1 + imm&lt;/code&gt;.&lt;/p&gt;&lt;code&gt;lb rd, imm(rs1)
lbu rd, imm(rs1)&lt;/code&gt;
&lt;p&gt;Similarly for &lt;code&gt;lh&lt;/code&gt;
(“load half”) and &lt;code&gt;lhu&lt;/code&gt;
(“load half unsigned”), just for unsigned halfwords (two bytes each,
remember):&lt;/p&gt;&lt;code&gt;lh rd, imm(rs1)
lhu rd, imm(rs1)&lt;/code&gt;
&lt;p&gt;We can try out the sign extension and zero extension example from earlier.&lt;/p&gt;&lt;p&gt;Correspondingly, the &lt;code&gt;sb&lt;/code&gt; (“store byte”) and &lt;code&gt;sh&lt;/code&gt; (“store half”) do the
opposite of &lt;code&gt;lb&lt;/code&gt; and &lt;code&gt;lh&lt;/code&gt;, storing bytes and
halfwords to memory. Instead of widening small values to register size,
these take the lowest order bits from &lt;code&gt;rs1&lt;/code&gt; and stores it to
memory. (There’s no &lt;code&gt;sbu&lt;/code&gt; and &lt;code&gt;shu&lt;/code&gt; because stores
are narrowing instead of widening operations.)&lt;/p&gt;&lt;code&gt;sb rs2, imm(rs1)
sh rs2, imm(rs1)&lt;/code&gt;
&lt;p&gt;While we’re at it, here’s two more minor details. Firstly, endianness. While theoretically big endian RISC-V machines can exist, I’ve never seen one… and this emulator is little endian, meaning that the four bytes in a word are laid out in memory lowest first. So, &lt;code&gt;.byte 0x1, 0x2, 0x3, 0x4&lt;/code&gt; would be
the same as &lt;code&gt;.word 0x04030201&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Secondly, memory accesses should be aligned for maximum efficiency. This means that the address for a halfword/2byte should be a multiple of two, and the address for a word/4byte should be a multiple of four. Misaligned accesses (meaning, well, when the address is not aligned) may not work as expected.&lt;/p&gt;&lt;p&gt;For user programs running on a rich operating systems, misaligned accesses are supported but may be slow. In embedded application running on microcontrollers and such, it might not work at all.&lt;/p&gt;&lt;p&gt;This emulator supports misaligned memory accesses.&lt;/p&gt;&lt;p&gt;Now you can try translating some basic C code into RISC-V assembly. Functions are… still out of the question for now. Variables have to be either global or put in registers. What else are we missing…&lt;/p&gt;&lt;p&gt;Is it Hello World time? I think it’s Hello World time…&lt;/p&gt;&lt;p&gt;For a computer to not just be a space heater, we need some way for it to at least generate output and take input. While other architectures may have dedicated I/O instructions, RISC-V uses memory mapped I/O. Essentially, this means that loads and stores to special addresses communicate with other devices. They do not work like normal memory, and you should only use the supported widths to access them.&lt;/p&gt;&lt;p&gt;One output device we have here is at address &lt;code&gt;0x1000_0000&lt;/code&gt;. Any 32-bit writes to it appends the lowest 8
bits as a byte to the text in the output pane. In other words, a
&lt;code&gt;sw&lt;/code&gt; to that address writes a byte of output.&lt;/p&gt;&lt;p&gt;(The output pane uses UTF-8 encoding.)&lt;/p&gt;&lt;p&gt;Eh, close enough to greeting the entire world. We could refactor it a bit to use a loop, or whatever… Now that we think about it, how about going one step further and organize our code into some functions?&lt;/p&gt;&lt;p&gt;We already know how to call a function and return back. Namely, &lt;code&gt;jal&lt;/code&gt; calls a function, and &lt;code&gt;ret&lt;/code&gt; returns. Usually
functions take arguments, uses local variables, and returns results.
Since there’s no real difference between the 31 general purpose
registers, on account of them being, well, general purpose, we could
just use any of them as we wish. Usually though, there are some standard
conventions to follow&lt;/p&gt;&lt;p&gt;This whole time you probably have noticed that registers are listed with two names each, and indeed both work identically in assembly.&lt;/p&gt;&lt;p&gt;These register aliases are named after their uses:&lt;/p&gt;&lt;code&gt;s0&lt;/code&gt; through
&lt;code&gt;s11&lt;/code&gt; are saved registers&lt;code&gt;t0&lt;/code&gt; through
&lt;code&gt;t6&lt;/code&gt; are temporary registers&lt;code&gt;a0&lt;/code&gt; through
&lt;code&gt;a7&lt;/code&gt; are argument registers&lt;code&gt;zero&lt;/code&gt; is the,
well, zero register&lt;code&gt;ra&lt;/code&gt; is for the
return address, by convention, as we’ve seen&lt;code&gt;sp&lt;/code&gt; … we’ll talk
about &lt;code&gt;sp&lt;/code&gt; later&lt;code&gt;tp&lt;/code&gt;
and &lt;code&gt;gp&lt;/code&gt; is out of the
scope of this document.)&lt;p&gt;(Yeah it’s… all placed in a weird order. The reason is out of the scope of this tutorial.)&lt;/p&gt;&lt;p&gt;When you call a function, you put up to eight arguments in the… well, argument registers, in the order &lt;code&gt;a0&lt;/code&gt;, &lt;code&gt;a1&lt;/code&gt;, …,
&lt;code&gt;a7&lt;/code&gt;. After that you use &lt;code&gt;jal&lt;/code&gt; or something, which
puts the return address in &lt;code&gt;ra&lt;/code&gt;, and jumps to the
function.&lt;/p&gt;&lt;p&gt;Inside, the function, if it wishes to use the call-saved registers &lt;code&gt;s0&lt;/code&gt; through &lt;code&gt;s11&lt;/code&gt;, it must save their values at
the start of the function, and restore them before returning. The non
call-saved registers &lt;code&gt;a0&lt;/code&gt; through &lt;code&gt;a7&lt;/code&gt;,
&lt;code&gt;t0&lt;/code&gt; through &lt;code&gt;t6&lt;/code&gt; and &lt;code&gt;ra&lt;/code&gt; may be
modified without restoring their values.&lt;/p&gt;&lt;p&gt;When the called function is done, it would, as mentioned, restore any used call-saved registers, and jump back to the return address, resuming the calling code.&lt;/p&gt;&lt;p&gt;Here’s a basic-ish example:&lt;/p&gt;&lt;code&gt;int memcmp(const void *a, const void *b, size_t n)&lt;/code&gt;
&lt;p&gt;The parameter &lt;code&gt;a&lt;/code&gt; is passed in &lt;code&gt;a0&lt;/code&gt;,
&lt;code&gt;b&lt;/code&gt; is passed in &lt;code&gt;a1&lt;/code&gt;, and &lt;code&gt;n&lt;/code&gt; is
passed in &lt;code&gt;a2&lt;/code&gt;. The return value will be in &lt;code&gt;a0&lt;/code&gt;.
Here’s an implementation and test run:&lt;/p&gt;&lt;p&gt;Here’s a slightly better-organized “Hello World”, using a &lt;code&gt;puts&lt;/code&gt; function:&lt;/p&gt;&lt;p&gt;Although we can write some very basic functions now, there are still a few problems:&lt;/p&gt;&lt;code&gt;ra&lt;/code&gt; would be overwritten, and then you can’t return back
from the outer function anymore.&lt;p&gt;Clearly, both would require using memory somehow. We can feed two birds with one scone by using memory in a structured way: The stack.&lt;/p&gt;&lt;p&gt;Unlike some other architectures, the &lt;code&gt;sp&lt;/code&gt; register is not
really special in any way. But just like how we can designate how
&lt;code&gt;a0&lt;/code&gt; is used, we can have some conventions about how
&lt;code&gt;sp&lt;/code&gt; is supposed to be used:&lt;/p&gt;&lt;code&gt;sp&lt;/code&gt; needs to have the same value as when the
function was entered&lt;code&gt;sp&lt;/code&gt; always points to somewhere in an area of
memory called the “stack”, and it is always 16-byte
aligned.&lt;p&gt;And, for the stack itself:&lt;/p&gt;&lt;code&gt;address &amp;gt;= sp&lt;/code&gt; are “in the stack”, and
&lt;code&gt;address &amp;lt; sp&lt;/code&gt; are free space that the stack can grow
into.&lt;code&gt;sp&lt;/code&gt;, and deallocate space by incrementing &lt;code&gt;sp&lt;/code&gt;.
Of course, allocations and deallocations must be balanced properly.&lt;p&gt;An example is in order. Let’s say you have a function &lt;code&gt;foo&lt;/code&gt; which just calls &lt;code&gt;bar&lt;/code&gt; twice.&lt;/p&gt;&lt;code&gt;void foo() {
    bar();
    bar();
}&lt;/code&gt;
&lt;p&gt;Inside &lt;code&gt;foo&lt;/code&gt;, it would need to save the initial
&lt;code&gt;ra&lt;/code&gt;, so it can return back later. Even though
&lt;code&gt;ra&lt;/code&gt; takes only 4 bytes, &lt;code&gt;sp&lt;/code&gt; needs to be 16-byte
aligned at all times, so we round that up to 16 bytes. Decrementing
&lt;code&gt;sp&lt;/code&gt; by 16 we allocate the space:&lt;/p&gt;&lt;code&gt;foo:
    addi sp, sp, -16&lt;/code&gt;
&lt;p&gt;Now, in addition to all of the non call-saved registers, we have 16 bytes of scratch space at &lt;code&gt;sp&lt;/code&gt; through &lt;code&gt;sp + 15&lt;/code&gt;.
We can backup the value of &lt;code&gt;ra&lt;/code&gt; here&lt;/p&gt;&lt;code&gt;    ...
    sw ra, 0(sp)&lt;/code&gt;
&lt;p&gt;Then we just call &lt;code&gt;bar&lt;/code&gt; twice, which overwrites
&lt;code&gt;ra&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;    ...
    jal bar
    jal bar&lt;/code&gt;
&lt;p&gt;At the end of the function, we just need to get back the return address, deallocate the stack space, and return. Although using any register would suffice for the return address, since it is the backed up value of &lt;code&gt;ra&lt;/code&gt; after all, we load it back to
&lt;code&gt;ra&lt;/code&gt;.&lt;/p&gt;&lt;code&gt;    ...
    lw ra, 0(sp)
    addi sp, sp, 16
    ret&lt;/code&gt;
&lt;p&gt;In a similar way you can save and restore the &lt;code&gt;s&lt;/code&gt;
(remember, call-saved) registers. Usually, the most convenient way to
manage this is to put values that need to be preserved across inner
function calls in the &lt;code&gt;s&lt;/code&gt; registers, and then add code at the
beginning to save them, and add code at the end to restore them.&lt;/p&gt;&lt;p&gt;Obligatory recursive Fibonacci time!&lt;/p&gt;&lt;p&gt;The algorithm should be fairly straightforward:&lt;/p&gt;&lt;code&gt;fibonacci(n) {
    if (n &amp;lt; 2) { return n; }
    else { return fib(n - 1) + fib(n - 2); }
}&lt;/code&gt;
&lt;p&gt;What’s worth noting here is the fairly symmetric pattern of saving registers at the start:&lt;/p&gt;&lt;code&gt;    addi sp, sp, -16
    sw ra, 0(sp)
    sw s0, 4(sp)
    sw s1, 8(sp)&lt;/code&gt;
&lt;p&gt;And restoring them at the end:&lt;/p&gt;&lt;code&gt;    lw ra, 0(sp)
    lw s0, 4(sp)
    lw s1, 8(sp)
    addi sp, sp, 16
    ret&lt;/code&gt;
&lt;p&gt;A little thing to also note that the &lt;code&gt;s&lt;/code&gt; registers are
only saved in the more complex branch, where as the simpler branch just
returns directly. This is also acceptable from a calling convention
perspective.&lt;/p&gt;&lt;p&gt;(Note: In the emulator, the &lt;code&gt;sp&lt;/code&gt; register is initialized
to an address that would be convenient for you for use as a stack, as a,
well, convenience.)&lt;/p&gt;&lt;p&gt;Let’s go back to this example:&lt;/p&gt;&lt;code&gt;    # void puts(const char *);
puts:
    lui t1, %hi(0x10000000)
puts_loop:
    lb t0, 0(a0)
    beq t0, zero, puts_done
    sw t0, 0(t1)
    addi a0, a0, 1
    j puts_loop

puts_done:
    ret&lt;/code&gt;
&lt;p&gt;Having to name things like &lt;code&gt;puts_loop&lt;/code&gt;,
&lt;code&gt;puts_done&lt;/code&gt; is a bit annoying. There’s a shorter way: numeric labels.&lt;/p&gt;&lt;p&gt;A numeric label is one with a name of a decimal number. To refer to a numeric label, use the number and a &lt;code&gt;f&lt;/code&gt; suffix for “forward”,
and &lt;code&gt;b&lt;/code&gt; for “backward”, and it will correspond to the nearest
numeric label with that number, searching forwards or backwards,
respectively.&lt;/p&gt;&lt;p&gt;So, the &lt;code&gt;puts&lt;/code&gt; example from earlier can be rewritten:&lt;/p&gt;&lt;code&gt;    # void puts(const char *);
puts:
    lui t1, %hi(0x10000000)
1:
    lb t0, 0(a0)
    beq t0, zero, 2f
    sw t0, 0(t1)
    addi a0, a0, 1
    j 1b

2:
    ret&lt;/code&gt;
&lt;p&gt;Yeah I don’t really like this syntax either, but it is what we’ve got.&lt;/p&gt;&lt;p&gt;Remember that oddball instruction I mentioned way back, &lt;code&gt;auipc&lt;/code&gt;?&lt;/p&gt;&lt;p&gt;I don’t know about your experience, but the first time I saw RISC-V disassembly, this is the one instruction that caught my eye. And this memory has stuck with me ever since. It’s a rather common occurrence in real RISC-V programs, and somehow I’ve been hiding it from you this whole time. If you take a sneak peek at the next section’s title, you’ll see how far we’ve come without &lt;code&gt;auipc&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;So what does it do?&lt;/p&gt;&lt;p&gt;The &lt;code&gt;auipc&lt;/code&gt; (“add
upper immediate to pc”) instruction is very similar to &lt;code&gt;lui&lt;/code&gt;.
Instead of setting &lt;code&gt;rd&lt;/code&gt; to &lt;code&gt;imm20 &amp;lt;&amp;lt; 12&lt;/code&gt;, it
sets it to &lt;code&gt;pc + (imm20 &amp;lt;&amp;lt; 12)&lt;/code&gt;, where &lt;code&gt;pc&lt;/code&gt;
is the address of the &lt;code&gt;auipc&lt;/code&gt; instruction itself.&lt;/p&gt;&lt;code&gt;auipc rd, imm20&lt;/code&gt;
&lt;p&gt;It works very similarly to &lt;code&gt;lui&lt;/code&gt;. You can think of them as
a pair: the “base” of &lt;code&gt;lui&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, whereas the
“base” of &lt;code&gt;auipc&lt;/code&gt; is the address of the &lt;code&gt;auipc&lt;/code&gt;
instruction. So this code:&lt;/p&gt;&lt;code&gt;start:
    lui a0, 3
    addi a0, a0, 4&lt;/code&gt;
&lt;p&gt;Gives you &lt;code&gt;0x3004&lt;/code&gt;, whereas this:&lt;/p&gt;&lt;code&gt;start:
    auipc a0, 3
    addi a0, a0, 4&lt;/code&gt;
&lt;p&gt;Gives you &lt;code&gt;start + 0x3004&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Why would you need this? On modern systems, it’s often desirable to have machine code that can be moved around in address space. For example, a shared library i.e. dynamically linked library can be loaded into any program, at any address. It would be helpful if the machine code does not need to be patched every time. This is called position independent code (PIC).&lt;/p&gt;&lt;p&gt;Some instructions already exhibit position independence. For example, as mentioned earlier when we talked about using &lt;code&gt;lui&lt;/code&gt; and
&lt;code&gt;jalr&lt;/code&gt; as a pair, the branch instructions and
&lt;code&gt;jal&lt;/code&gt; are encoded, as with all RV32I instructions, into
32-bit instruction words, so they can’t possibly be able to encode every
possible address. Instead, the jump destination is &lt;code&gt;pc&lt;/code&gt; plus
some offset (&lt;code&gt;pc&lt;/code&gt; being, as before, the jump/branch
instruction itself), and the offset itself is encoded.&lt;/p&gt;&lt;p&gt;You can see these are three different instructions that jump to itself. Since the offset is &lt;code&gt;0&lt;/code&gt; in each case, the encoding is
the same. Use the “Dump” button to see for yourself.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;auipc&lt;/code&gt; instruction allows for very flexible position
independence. You can make arbitrary calculations based on the address
at which code is located. The immediate-bit operand mirroring
&lt;code&gt;lui&lt;/code&gt; means that it is well suited for two-instruction pairs,
just like &lt;code&gt;lui&lt;/code&gt;. These kind of “&lt;code&gt;pc&lt;/code&gt; plus
something” calculations are known as pc-relative
addressing.&lt;/p&gt;&lt;p&gt;The syntax for getting the assembler to generate the immediate values for pc-relative addressing a bit arcane but hear me out:&lt;/p&gt;&lt;p&gt;Like &lt;code&gt;%hi()&lt;/code&gt; and &lt;code&gt;%lo()&lt;/code&gt;, &lt;code&gt;%pcrel_hi()&lt;/code&gt; and &lt;code&gt;%pcrel_lo()&lt;/code&gt; gives you
the immediate values needed for pc-relative addressing. You pass the
label you want to address to &lt;code&gt;%pcrel_hi()&lt;/code&gt;, but pass a label
to the &lt;code&gt;auipc&lt;/code&gt; instruction to
&lt;code&gt;%pcrel_lo()&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Unlike &lt;code&gt;%lo()&lt;/code&gt;, We need the address of the
&lt;code&gt;auipc&lt;/code&gt; instruction itself to calculate the immediate value,
and this is why you need to pass a label to it. You don’t need to write
&lt;code&gt;foo&lt;/code&gt; again, since the assembler will look at the
&lt;code&gt;auipc&lt;/code&gt; instruction and see it’s supposed to be for
&lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;If you hate writing that, you can also use the convenience pseudoinstruction &lt;code&gt;la&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;la rd, label&lt;/code&gt;
&lt;p&gt;Just like a &lt;code&gt;lui&lt;/code&gt; + &lt;code&gt;jalr&lt;/code&gt; pair, an
&lt;code&gt;auipc&lt;/code&gt; + &lt;code&gt;jalr&lt;/code&gt; can be used to jump to somewhere
farther away than one &lt;code&gt;jal&lt;/code&gt; can reach in position-independent
code.&lt;/p&gt;&lt;p&gt;One very common case is to call a function that might not be within reach of &lt;code&gt;jal&lt;/code&gt;. You can use the pseudoinstruction &lt;code&gt;call&lt;/code&gt; for that.&lt;/p&gt;&lt;code&gt;call label&lt;/code&gt;
&lt;p&gt;This expands to:&lt;/p&gt;&lt;code&gt;1:
    auipc ra, %pcrel_hi(label)
    jalr ra, %pcrel_lo(1b)(ra)&lt;/code&gt;
&lt;p&gt;Notice how &lt;code&gt;ra&lt;/code&gt; is used as a temporary register to store
the intermediate result, which is immediately overwritten by
&lt;code&gt;jalr&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;In fact, there really isn’t any reason to prefer &lt;code&gt;lui&lt;/code&gt;
over &lt;code&gt;auipc&lt;/code&gt; when using a label. This is why you if you
disassemble a real RISC-V program, you see it everywhere, even in
non-position-independent code.&lt;/p&gt;&lt;p&gt;Now would be a good time to take a break, since we’re ready to head into…&lt;/p&gt;&lt;p&gt;We’re going to write an extremely bare bones operating system.&lt;/p&gt;&lt;p&gt;One of the tasks an operating system performs is to control what programs can and cannot do. On RISC-V, the most basic of this control is implemented using privilege levels. RISC-V defines… let’s just say, several privilege levels, but we’re only going to use two here:&lt;/p&gt;&lt;p&gt;The lower the privilege level number goes, the less privileged that level is. Higher privilege levels treat lower privilege levels as generally completely unreliable and untrusted, and must isolate themselves from adversarial software and failures of lower privilege levels.&lt;/p&gt;&lt;p&gt;(However, we won’t be talking about all of the features that make this full isolation possible, and the emulator you’ve been seeing does not have enough features for that anyway. Therefore, the operating system we’ll be building will leave itself unprotected in various ways.)&lt;/p&gt;&lt;p&gt;The privilege levels are sometimes called “modes” for short. And, if that’s not short enough, we can shorten the level names themselves, ending up with M-mode and U-mode. All of the ways to refer to these privilege levels are interchangable.&lt;/p&gt;&lt;p&gt;When a RISC-V machine starts (This is known as “reset”), it begins execution in Machine mode. On a typical “embedded” system where only Machine mode and User mode are implemented, execution begins in the initialization code read from flash memory. This code can either perform what needs to be done itself, or it can be an operating system that manages some tasks, each executing in User mode.&lt;/p&gt;&lt;p&gt;The former design is used for simpler programs, and is analogous to the programs we’ve seen and run so far. The latter is more complicated. We’ll see the basics of how to achieve that soon.&lt;/p&gt;&lt;p&gt;The control and status registers (CSRs) deal with various features that are in some sense “special”. No I don’t have a better explanation of what “special” means.&lt;/p&gt;&lt;p&gt;Six instructions are available for manipulating CSRs.&lt;/p&gt;&lt;code&gt;csrrw rd, csr, rs1
csrrs rd, csr, rs1
csrrc rd, csr, rs1
csrrwi rd, csr, uimm5
csrrsi rd, csr, uimm5
csrrci rd, csr, uimm5&lt;/code&gt;
&lt;p&gt;To refer to a CSR in these instructions, use its name in assembly code. We’ll get to those in a bit.&lt;/p&gt;&lt;p&gt;The pattern works like this. Each of the instructions atomically reads the old value of the CSR, and writes the new value based on some operation performed on the old value and the last operand. The possible operations are:&lt;/p&gt;&lt;code&gt;csrrw&lt;/code&gt; (“CSR read
write”): &lt;code&gt;{ csr = rs1; rd = csr_old; }&lt;/code&gt;&lt;code&gt;csrrs&lt;/code&gt; (“CSR read
set”): &lt;code&gt;{ csr = csr | rs1; rd = csr_old; }&lt;/code&gt;&lt;code&gt;csrrc&lt;/code&gt; (“CSR read
clear”): &lt;code&gt;{ csr = csr &amp;amp; ~rs1; rd = csr_old; }&lt;/code&gt;&lt;p&gt;Where &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt; are bitwise
“and”, “or”, “not” respectively.&lt;/p&gt;&lt;p&gt;Specifically, note that &lt;code&gt;rd&lt;/code&gt; and &lt;code&gt;rs1&lt;/code&gt; can be
the same. For example, this instruction swaps the value in
&lt;code&gt;a0&lt;/code&gt; and &lt;code&gt;mscratch&lt;/code&gt;:&lt;/p&gt;&lt;code&gt;csrrw a0, mscratch, a0&lt;/code&gt;
&lt;p&gt;For the “immediate” variants, instead of a register, they take an “unsigned”/zero-extended 5-bit immediate value, i.e. an immediate value 0 through 31, inclusive. This is represented using &lt;code&gt;uimm5&lt;/code&gt; in
the assembly syntax description. The operation is the same
otherwise.&lt;/p&gt;&lt;code&gt;csrrwi&lt;/code&gt; (“CSR
read write immediate”): &lt;code&gt;{ csr = uimm5; rd = csr_old; }&lt;/code&gt;&lt;code&gt;csrrsi&lt;/code&gt; (“CSR
read set immediate”):
&lt;code&gt;{ csr = csr | uimm5; rd = csr_old; }&lt;/code&gt;&lt;code&gt;csrrci&lt;/code&gt; (“CSR
read clear immediate”):
&lt;code&gt;{ csr = csr &amp;amp; ~uimm5; rd = csr_old; }&lt;/code&gt;&lt;p&gt;The full feature set of these instructions are designed for manipulating bit fields in CSRs, which we will not be doing that much of in this tutorial. Still, this orthogonal design should be fairly intuitive to remember.&lt;/p&gt;&lt;p&gt;CSRs and fields in CSRs do not behave like general purpose registers: Some of them are read/write, some are read-only. Also, invalid values have special behaviors. We will touch on more details as we introduce the individual CSRs themselves, but one thing you may have noticed is that we don’t seem to have read-only CSR instructions. Read-only access is achieved using special cases in the instruction encodings:&lt;/p&gt;&lt;code&gt;csrrs&lt;/code&gt; and &lt;code&gt;csrrc&lt;/code&gt; do not write to the CSR if
&lt;code&gt;rs1&lt;/code&gt; is &lt;code&gt;x0&lt;/code&gt; (a.k.a. &lt;code&gt;zero&lt;/code&gt;) (Note
that just the value of &lt;code&gt;rs1&lt;/code&gt; being 0 is not enough.)&lt;code&gt;csrrsi&lt;/code&gt; and &lt;code&gt;csrrci&lt;/code&gt; do not write to the CSR
if &lt;code&gt;uimm5&lt;/code&gt; is 0.&lt;p&gt;While we’re at it:&lt;/p&gt;&lt;code&gt;csrrw&lt;/code&gt; and &lt;code&gt;csrrwi&lt;/code&gt; do not read the CSR if
&lt;code&gt;rd&lt;/code&gt; is &lt;code&gt;x0&lt;/code&gt; (a.k.a. &lt;code&gt;zero&lt;/code&gt;). (Note
that writing to &lt;code&gt;x0&lt;/code&gt; has no effect anyway, since it’s
constant 0.)&lt;p&gt;(No standard RISC-V CSR is write-only, or has side effects on read.)&lt;/p&gt;&lt;p&gt;As a convenience, the pseudoinstructions &lt;code&gt;csrr&lt;/code&gt; (“CSR read”) and &lt;code&gt;csrw&lt;/code&gt; (“CSR write”) are
available. &lt;code&gt;csrw csr, rs1&lt;/code&gt; expands to
&lt;code&gt;csrrw x0, csr, rs1&lt;/code&gt;. Meanwhile, &lt;code&gt;csrr rd, csr&lt;/code&gt;
expands specifically to &lt;code&gt;csrrs rd, csr, x0&lt;/code&gt;, just so we can
agree on an encoding.&lt;/p&gt;&lt;code&gt;csrw csr, rs1
csrr rd, csr&lt;/code&gt;
&lt;p&gt;You may have seen these CSR things if you’ve scrolled down on the register view. Yes, we’re finally getting into those.&lt;/p&gt;&lt;p&gt;An example of CSRs is counters. Two basic read-only counters are &lt;code&gt;cycle&lt;/code&gt; and
&lt;code&gt;instret&lt;/code&gt;. These
counters, well, count the number of “cycles” and “instructions
retired”. “Retired” is a technical term basically meaning “successfully
completed”.&lt;/p&gt;&lt;p&gt;Since a 32-bit counter will overflow quite fast, on RV32, the counters have “high” counterparts: &lt;code&gt;cycleh&lt;/code&gt; and &lt;code&gt;instreth&lt;/code&gt;. So, for
example, the full cycle counter has 64 bits, with the lower 32 bits in
the CSR &lt;code&gt;cycle&lt;/code&gt; and higher 32 bits in the CSR
&lt;code&gt;cycleh&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;While the emulator is running, scroll down on the register view panel, and on the bottom you’ll see the values of these counters. For convenience, they’re shown combined, so, &lt;code&gt;cycle = 0x11223344_55667788&lt;/code&gt; means &lt;code&gt;cycleh&lt;/code&gt; is
&lt;code&gt;0x11223344&lt;/code&gt;, and &lt;code&gt;cycle&lt;/code&gt; is
&lt;code&gt;0x55667788&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;On real hardware &lt;code&gt;cycle&lt;/code&gt; is coupled to the clock cycle. In
this emulator, every time you press “Step”, it counts as a cycle. When
you press “Run” and it starts, well, running, a certain number of cycles
happen periodically.&lt;/p&gt;&lt;p&gt;Let’s look at a really simple example:&lt;/p&gt;&lt;p&gt;It takes 4 cycles for this program to stop, but &lt;code&gt;instret&lt;/code&gt;
ends up at only 3 because the final &lt;code&gt;ebreak&lt;/code&gt; instruction
never actually completes.&lt;/p&gt;&lt;p&gt;(Do not confuse “retired” with “retried”.)&lt;/p&gt;&lt;p&gt;A program can read its own counters. For example, this fun little program loops until the cycle count is over 1000, assuming the low 32 bits doesn’t overflow before it has time to react:&lt;/p&gt;&lt;p&gt;Technically &lt;code&gt;cycle&lt;/code&gt; and &lt;code&gt;instret&lt;/code&gt; are not part
of the privileged architecture. The real fun begins now.&lt;/p&gt;&lt;p&gt;The emulator shows the current privilege level as &lt;code&gt;(priv)&lt;/code&gt;. It is in parentheses to remind you of a very
important fact:&lt;/p&gt;&lt;p&gt;There is no CSR for the current privilege level.&lt;/p&gt;&lt;p&gt;In general, it is not possible for a RISC-V program to learn what privilege level it’s in. This is required for the Popek and Goldberg conditions of virtualization to work, specifically because being able to read the current privilege level at a lower-than-maximum privilege level would be a “sensitive” but “unprivileged” instruction.&lt;/p&gt;&lt;p&gt;If you’re writing a program for a certain privilege level, you should simply assume that it is correctly being run at that privilege level.&lt;/p&gt;&lt;p&gt;A fundamental way an operating system does its job is through handling exceptions. In general, exceptions occur when there’s a problem with a specific instruction, and execution cannot continue. For example, since &lt;code&gt;cycle&lt;/code&gt; is a read-only CSR, writing to it is
an illegal instruction:&lt;/p&gt;&lt;p&gt;Since we have no exception handling in the program, we’ll have to inspect what happened manually in the emulator. Indeed, a lot has happened:&lt;/p&gt;&lt;p&gt;Firstly, this message tells you that an exception happened:&lt;/p&gt;&lt;code&gt;[ Exception: Illegal instruction (2) | tval = 0xc0001073, epc = 0x4000000c ]&lt;/code&gt;
&lt;p&gt;The same information is now also available in the CSRs, as follows:&lt;/p&gt;&lt;code&gt;mcause&lt;/code&gt; (“M-mode
trap cause”): The kind of exception.&lt;code&gt;mepc&lt;/code&gt; (“M-mode
exception pc”): The address of the instruction that caused the
exception.&lt;code&gt;mtval&lt;/code&gt; (“M-mode
trap value”): Extra information about the exception.&lt;code&gt;mstatus&lt;/code&gt; (“M-mode
status”): It is set to &lt;code&gt;0x00001800&lt;/code&gt;. The two bits in the
middle, &lt;code&gt;mstatus[12:11]&lt;/code&gt; (In C syntax,
&lt;code&gt;(mstatus &amp;gt;&amp;gt; 11) &amp;amp; 0x3&lt;/code&gt;) is the
&lt;code&gt;mstatus.MPP&lt;/code&gt; (“M-mode previous privilege level”) field,
which contains 3, meaning that the exception occurred while running in
Machine mode.&lt;p&gt;When an exception happens, in addition to recording the exception information in these CSR fields, &lt;code&gt;pc&lt;/code&gt; is set to
&lt;code&gt;mtvec&lt;/code&gt;, which is supposed to be the handler address. Let’s
write ourselves an exception handler that simply prints a message and
stops the emulator, and see the handling in action:&lt;/p&gt;&lt;p&gt;Yeah it just prints &lt;code&gt;Oh no!&lt;/code&gt; on error. Baby steps…&lt;/p&gt;&lt;p&gt;The checkboxes “Pause on exc.” and “Print on exc.” control whether the emulator should pause or print a message, respectively, when an exception occurs. You can uncheck those if you want the exception handler set in the program to run without interference.&lt;/p&gt;&lt;p&gt;(Another case that will cause a jump to &lt;code&gt;mtvec&lt;/code&gt; is interrupts. However, this feature
does not exist in the emulator. The two cases are collectively called
traps.)&lt;/p&gt;&lt;p&gt;These are the exceptions possible in this emulator, and their respective numeric codes:&lt;/p&gt;&lt;table&gt;&lt;row span="2"&gt;&lt;cell role="head"&gt;Description&lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;0&lt;/cell&gt;&lt;cell&gt;Instruction address misaligned&lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;1&lt;/cell&gt;&lt;cell&gt;Instruction access fault&lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;2&lt;/cell&gt;&lt;cell&gt;Illegal instruction&lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;3&lt;/cell&gt;&lt;cell&gt;Breakpoint&lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;5&lt;/cell&gt;&lt;cell&gt;Load access fault&lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;7&lt;/cell&gt;&lt;cell&gt;Store/AMO access fault&lt;/cell&gt;&lt;/row&gt;&lt;row span="2"&gt;&lt;cell&gt;8&lt;/cell&gt;&lt;cell&gt;Environment call from User mode&lt;/cell&gt;&lt;/row&gt;&lt;row&gt;&lt;cell&gt;11&lt;/cell&gt;&lt;cell&gt;Environment call from Machine mode&lt;/cell&gt;&lt;/row&gt;&lt;/table&gt;&lt;p&gt;“Instruction address misaligned” happens when attempting to jump to an instruction that is not 4-byte aligned. The exception happens on the jump or branch instruction, not the target.&lt;/p&gt;&lt;p&gt;“Load access fault” and “Store/AMO access fault” happens when accessing an invalid memory address, or accessing a memory address in an invalid way.&lt;/p&gt;&lt;p&gt;(“AMO” stands for “atomic memory operation”, which we will not talk about and is not featured in the emulator.)&lt;/p&gt;&lt;p&gt;“Illegal instruction” happens not only in the self explanatory way when an invalid instruction is executed, but also when accessing a CSR in an invalid way, or from too low a privilege level.&lt;/p&gt;&lt;p&gt;“Breakpoint”, “Environment call from User mode” and “Environment call from Machine mode” will be explained in a future section.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;mret&lt;/code&gt; (“M-mode
return”) instruction performs the reverse of part of what happens when
an exception occurs. To be precise, what happens is:&lt;/p&gt;&lt;code&gt;mstatus.MPP&lt;/code&gt;&lt;code&gt;mstatus.MPP&lt;/code&gt; is set to 0&lt;code&gt;pc&lt;/code&gt; is set to &lt;code&gt;mepc&lt;/code&gt;&lt;p&gt;(You can think of the privilege mode bits as shifting in a chain &lt;code&gt;0 → MPP → priv&lt;/code&gt;. And, to be even more precise,
&lt;code&gt;mstatus.MPP&lt;/code&gt; is set to the lowest supported privilege mode
since it’s not supposed to contain unsupported modes.)&lt;/p&gt;&lt;p&gt;&lt;code&gt;mret&lt;/code&gt; takes no operands, so the assembly syntax is
simply:&lt;/p&gt;&lt;code&gt;mret&lt;/code&gt;
&lt;p&gt;If we do &lt;code&gt;mret&lt;/code&gt; after getting an exception, then we simply
go back to retrying the same instruction again. This is useful for more
featureful implementations, where for example, after handling a page
fault the correct course of action is to retry the faulting
instruction.&lt;/p&gt;&lt;p&gt;However, &lt;code&gt;mstatus&lt;/code&gt; and &lt;code&gt;mepc&lt;/code&gt; are also
writable. This gives us more flexibility in the use of
&lt;code&gt;mret&lt;/code&gt;. As an analogy, the same &lt;code&gt;jr&lt;/code&gt; instruction
(really &lt;code&gt;jalr&lt;/code&gt; instruction) can be used to return from a
call, and also can be used to jump to any address. Similarly,
&lt;code&gt;mret&lt;/code&gt; not only lets us return from an exception, but also
lets us jump to any address and switch to any privilege
level.&lt;/p&gt;&lt;p&gt;Even though &lt;code&gt;mret&lt;/code&gt; is named “return”, it is in fact the
only way to lower the privilege level to enter User mode.
Here’s an example of entering User mode, with a User mode program that
does something bad:&lt;/p&gt;&lt;p&gt;As you can see, after we enter User mode, all of the CSRs used for exception handling become completely inaccessible, not even readable. As with writing a read-only CSR, accessing an CSR without permission also causes an illegal instruction exception.&lt;/p&gt;&lt;p&gt;Moreover, when an exception happens, we go back to Machine mode, so the exception handler runs in Machine mode. Here the handler does nothing except stopping the emulator.&lt;/p&gt;&lt;p&gt;Sometimes, a program may wish to intentionally cause an exception. There are several well-defined way to do that:&lt;/p&gt;&lt;code&gt;unimp&lt;/code&gt; has the same encoding
as &lt;code&gt;csrrw zero, cycle, zero&lt;/code&gt;, and it is the canonical RV32I
illegal instruction. It causes causes an “Illegal instruction”
exception.&lt;code&gt;ebreak&lt;/code&gt; causes a
“Breakpoint” exception&lt;code&gt;ecall&lt;/code&gt; causes an
“Environment call from User mode” exception when executed in User mode,
and “Environment call from Machine mode” exception when executed in
Machine mode.&lt;p&gt;Give those exceptions a try here:&lt;/p&gt;&lt;p&gt;As the names suggest, &lt;code&gt;ebreak&lt;/code&gt; is used for debugging
breakpoints. As a special case, in this emulator &lt;code&gt;ebreak&lt;/code&gt; in
Machine mode stops the emulator. You can think of it as the emulator
being a debugger, and the debugger catching the breakpoint.&lt;/p&gt;&lt;p&gt;&lt;code&gt;unimp&lt;/code&gt; can be used to intentionally crash a program upon
detection of some unrecoverable error.&lt;/p&gt;&lt;p&gt;Meanwhile, &lt;code&gt;ecall&lt;/code&gt; is used for things like system calls.
“Environment call from User mode” is a distinct exception cause code to
make it easy to check specifically for this case.&lt;/p&gt;&lt;p&gt;One thing that you would want in your trap handler is to not trust or disturb any general purpose registers in the code that the trap occurred in, unless you intentionally want to do so, for example to return a value from a system call. So you’d want to save all the registers to memory, before doing anything else. However, accessing memory requires a general purpose register.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;mscratch&lt;/code&gt;
(“M-mode scratch”) CSR can help with this. This register, unlike all the
others, have no special functionality. It can hold any 32-bit value.
However, like all the other M-mode CSRs, it can only be accessed in
Machine mode. User mode code cannot change the value of it.&lt;/p&gt;&lt;p&gt;So for example, you can stash the operating system stack pointer in &lt;code&gt;mscratch&lt;/code&gt; before switching to User mode, and it will stay in
&lt;code&gt;mscratch&lt;/code&gt; untouched in User mode. At the top of the handler,
&lt;code&gt;csrrw sp, mscratch, sp&lt;/code&gt; to swap from the user stack pointer
to the operating system stack pointer.&lt;/p&gt;&lt;code&gt;handler:
    csrrw sp, mscratch, sp
    # Save registers except sp
    csrr t0, mscratch
    # t0 = user sp, save it
    # Save user pc
    ...&lt;/code&gt;
&lt;p&gt;And, to restore:&lt;/p&gt;&lt;code&gt;    lw t0, ... # Load user pc
    csrw mepc, t0
    lw t0, ... # Load user sp
    csrw mscratch, t0
    # Restore registers except sp
    csrrw sp, mscratch, sp
    mret&lt;/code&gt;
&lt;p&gt;We’ll see the full code for this in the following section.&lt;/p&gt;&lt;p&gt;We have enough of to write a very very bare bones operating system. It will support these features:&lt;/p&gt;&lt;code&gt;a7 = 1&lt;/code&gt;: putchar, &lt;code&gt;a0&lt;/code&gt; is the byte to
write&lt;code&gt;a7 = 2&lt;/code&gt;: exit&lt;p&gt;We design the exception handling as follows:&lt;/p&gt;&lt;code&gt;mscratch&lt;/code&gt; is 0.&lt;code&gt;mscratch&lt;/code&gt; points to the operating
system stack pointer&lt;code&gt;mscratch&lt;/code&gt; is 0, the exception came
from M-mode, which we cannot handle, so we report a fatal
exception.&lt;code&gt;trap_main&lt;/code&gt;, which manipulates
U-mode registers in memory&lt;code&gt;trap_main&lt;/code&gt;, we restore registers from memory,
deallocate the space from the stack, and go back to U-mode, as outlined
in the previous section.&lt;p&gt;The structure to save registers in is fairly simple:&lt;/p&gt;&lt;code&gt;struct regs {
  unsigned long pc;
  unsigned long ra; // x1
  unsigned long sp; // x2
  ...
  unsigned long t6; // x31
};&lt;/code&gt;
&lt;p&gt;Basically you can think of it as an array where element 0 is &lt;code&gt;pc&lt;/code&gt;, and elements 1 through 31 are registers x1 through
x31.&lt;/p&gt;&lt;p&gt;Inside &lt;code&gt;trap_main&lt;/code&gt;, we check &lt;code&gt;mcause&lt;/code&gt; to see if
it’s a system call. If it is, we dispatch based on &lt;code&gt;a7&lt;/code&gt;. If
it’s not, we report an exception from U-mode.&lt;/p&gt;&lt;p&gt;At the beginning, we simply initialize the &lt;code&gt;struct regs&lt;/code&gt;
structure on stack, initialize user &lt;code&gt;sp&lt;/code&gt; and &lt;code&gt;pc&lt;/code&gt;
in it, and jump to the same code that handles returning to U-mode.&lt;/p&gt;&lt;p&gt;Here’s the assembly code with User mode code at the bottom. You may want to uncheck “Pause on exc.” and “Print on exc.” for convenience.&lt;/p&gt;&lt;p&gt;Do not be too hard on yourself if you have trouble understanding the code fully. This is, after all, a fairly complete OS kernel entry and exit implementation. Really, the most important part I’m showing you here is that it is possible.&lt;/p&gt;&lt;p&gt;For reference, here’s some of the OS code in pseudo-C.&lt;/p&gt;&lt;code&gt;void trap_main(struct regs *regs) {
    unsigned long cause = csr_read(mcause);
    if (cause != 8)
        do_bad_exception(regs, cause);

    # Call do_syscall with args from ecall
    unsigned long ret = do_syscall(regs-&amp;gt;a0, ..., regs-&amp;gt;a7);
    regs-&amp;gt;a0 = ret;

    // Bump user pc by 4, skip over ecall instruction
    regs-&amp;gt;pc += 4;
}

unsigned long do_syscall(
    unsigned long a0,
    ...,
    unsigned long a7
) {
    if (a7 == 1)
        sys_putchar(a0);
    else if (a7 == 8)
        sys_exit();
    else
        return -1;
}

unsigned long sys_putchar(char a) {
    kputchar(a);
    return 0;
}

[[noreturn]]
unsigned long sys_exit(char a) {
    ebreak();
}

[[noreturn]]
void do_bad_exception(struct regs *regs, unsigned long cause) {
    kputs("Exception 0x");
    kputchar(hex_chars[cause]);
    kputchar('\n');
    ebreak();
}

[[noreturn]]
void fatal() {
    kputs("Fatal exception\n");
    ebreak();
}

void kputs(const char *str) {
    while (*str) {
        u32 val = (u32)*str;
        writel(0x10000000, val); // MMIO write
        str ++;
    }
}

void kputchar(char c) {
    u32 val = (u32)c;
    writel(0x10000000, val); // MMIO write
}&lt;/code&gt;
&lt;p&gt;And here’s the user code, again in pseudo C:&lt;/p&gt;&lt;code&gt;[[noreturn]]
void user_entry() {
    puts(...);
    exit();
}

void puts(const char *str) {
    while (*str) {
        putchar(*str);
        str ++;
    }
}

void putchar(char c) {
    ecall(a0 = c, a7 = 1);
}

void exit() {
    ecall(a7 = 2);
}&lt;/code&gt;
&lt;p&gt;As long as this tutorial is, some simplifications have been made. Here are some of the most egregious lies and omissions, compared to the “real” RISC-V architecture and “real” RISC-V assembly code found in the world:&lt;/p&gt;&lt;code&gt;li&lt;/code&gt; pseudoinstruction should support a wider range
of constants.&lt;code&gt;mstatus&lt;/code&gt; is a lot more complicated than what I have
described.&lt;code&gt;%hi&lt;/code&gt;, &lt;code&gt;%lo&lt;/code&gt;, &lt;code&gt;%pcrel_hi&lt;/code&gt;,
&lt;code&gt;%pcrel_lo&lt;/code&gt; are more complicated than what I have
described.&lt;p&gt;There are also very important topics that are common or even ubiquitous in the RISC-V world, but I chose not to cover:&lt;/p&gt;&lt;p&gt;However, what I’ve taught you should be more than enough to get you started into learning more on your own, or with further materials.&lt;/p&gt;&lt;p&gt;Here are some references and tutorials I would personally recommend, if you’re looking to get further into RISC-V low-level development&lt;/p&gt;&lt;p&gt;Other useful resources that I have used while writing this tutorial:&lt;/p&gt;&lt;code&gt;arch/riscv/kernel/entry.S&lt;/code&gt; from Linux https://elixir.bootlin.com/linux/latest/source/arch/riscv/kernel/entry.S&lt;p&gt;Thanks to these folks for UI design help and content suggestions:&lt;/p&gt;&lt;p&gt;And thanks to you for coming along with me on this journey. Come on over to https://github.com/dramforever/easyriscv if you have suggestions, grievances, or just want to share some thoughts.&lt;/p&gt;&lt;p&gt;This tutorial is provided under the CC0 license. To the maximum extent permitted by law, this tutorial is dedicated to the public domain.&lt;/p&gt;&lt;p&gt;The associated code in the repository is provided under, of your choosing, either the CC0 license or the 0-clause “BSD” license.&lt;/p&gt;&lt;code&gt;add&lt;/code&gt;&lt;code&gt;addi&lt;/code&gt;&lt;code&gt;and&lt;/code&gt;&lt;code&gt;andi&lt;/code&gt;&lt;code&gt;auipc&lt;/code&gt;&lt;code&gt;beq&lt;/code&gt;&lt;code&gt;bge&lt;/code&gt;&lt;code&gt;bgeu&lt;/code&gt;&lt;code&gt;blt&lt;/code&gt;&lt;code&gt;bltu&lt;/code&gt;&lt;code&gt;bne&lt;/code&gt;&lt;code&gt;call&lt;/code&gt;&lt;code&gt;csrr&lt;/code&gt;&lt;code&gt;csrrc&lt;/code&gt;&lt;code&gt;csrrci&lt;/code&gt;&lt;code&gt;csrrs&lt;/code&gt;&lt;code&gt;csrrsi&lt;/code&gt;&lt;code&gt;csrrw&lt;/code&gt;&lt;code&gt;csrrwi&lt;/code&gt;&lt;code&gt;csrw&lt;/code&gt;&lt;code&gt;ebreak&lt;/code&gt;&lt;code&gt;ecall&lt;/code&gt;&lt;code&gt;j&lt;/code&gt;&lt;code&gt;jal&lt;/code&gt;&lt;code&gt;jalr&lt;/code&gt;&lt;code&gt;jr&lt;/code&gt;&lt;code&gt;la&lt;/code&gt;&lt;code&gt;lb&lt;/code&gt;&lt;code&gt;lbu&lt;/code&gt;&lt;code&gt;lh&lt;/code&gt;&lt;code&gt;lhu&lt;/code&gt;&lt;code&gt;li&lt;/code&gt;&lt;code&gt;lui&lt;/code&gt;&lt;code&gt;lw&lt;/code&gt;&lt;code&gt;mret&lt;/code&gt;&lt;code&gt;mv&lt;/code&gt;&lt;code&gt;or&lt;/code&gt;&lt;code&gt;ori&lt;/code&gt;&lt;code&gt;ret&lt;/code&gt;&lt;code&gt;sb&lt;/code&gt;&lt;code&gt;sh&lt;/code&gt;&lt;code&gt;sll&lt;/code&gt;&lt;code&gt;slli&lt;/code&gt;&lt;code&gt;slt&lt;/code&gt;&lt;code&gt;slti&lt;/code&gt;&lt;code&gt;sltiu&lt;/code&gt;&lt;code&gt;sltu&lt;/code&gt;&lt;code&gt;sra&lt;/code&gt;&lt;code&gt;srai&lt;/code&gt;&lt;code&gt;srl&lt;/code&gt;&lt;code&gt;srli&lt;/code&gt;&lt;code&gt;sub&lt;/code&gt;&lt;code&gt;sw&lt;/code&gt;&lt;code&gt;unimp&lt;/code&gt;&lt;code&gt;xor&lt;/code&gt;&lt;code&gt;xori&lt;/code&gt;&lt;code&gt;imm&lt;/code&gt;&lt;code&gt;pc&lt;/code&gt;&lt;code&gt;rd&lt;/code&gt;&lt;code&gt;rs1&lt;/code&gt;&lt;code&gt;rs2&lt;/code&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://dramforever.github.io/easyriscv/"/><published>2025-10-27T20:57:12+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45728975</id><title>Complete Digitization of Leonardo da Vinci's Codex Atlanticus</title><updated>2025-10-28T15:40:44.306284+00:00</updated><content>&lt;doc fingerprint="3a053512a6ea9c9c"&gt;
  &lt;main&gt;
    &lt;p&gt;No historical figure better fits the definition of “Renaissance man” than Leonardo da Vinci, but that term has become so overused as to become misleading. We use it to express mild surprise that one person could use both their left and right hemispheres equally well. But in Leonardo’s day, people did not think of themselves as having two brains, and the worlds of art and science were not so far apart as they are now.&lt;/p&gt;
    &lt;p&gt;That Leonardo was able to combine fine arts and fine engineering may not have been overly surprising to his contemporaries, though he was an extraordinarily brilliant example of the phenomenon. The more we learn about him, the more we see how closely related the two pursuits were in his mind.&lt;/p&gt;
    &lt;p&gt;He approached everything he did as a technician. The uncanny effects he achieved in painting were the result, as in so much Renaissance art, of mathematical precision, careful study, and firsthand observation.&lt;/p&gt;
    &lt;p&gt;His artistic projects were also experiments. Some of them failed, as most experiments do, and some he abandoned, as he did so many scientific projects. No matter what, he never undertook anything, whether mechanical, anatomical, or artistic, without careful planning and design, as his copious notebooks testify. As more and more of those notebooks have become available online, both Renaissance scholars and laypeople alike have learned considerably more about how Leonardo’s mind worked.&lt;/p&gt;
    &lt;p&gt;First, there was the Codex Arundel. It is, writes Jonathan Jones at The Guardian, “the living record of a universal mind”—but also, specifically, the mind of a “technophile.” Then, the Victoria and Albert National Art Library announced the digitization of Codex Forster, which contains some of Leonardo’s earliest notebooks. Now The Visual Agency has released a complete digitization of Leonardo’s Codex Atlanticus, a huge collection of the artist, engineer, and inventor’s finely-illustrated notes.&lt;/p&gt;
    &lt;p&gt;“No other collection counts more original papers written by Leonardo,” notes Google. The Codex Atlanticus “consists of 1119 papers, most of them drawn or written on both sides.” Its name has “nothing to do with the Atlantic Ocean, or with some esoteric, mysterious content hidden in its pages.” The 12-volume collection acquired its title because the drawings and writings were bound with the same size paper that was used for making atlases. Gathered in the 16th century by sculptor Pompeo Leoni, the papers descended from Leonardo’s close student Giovan Francesco Melzi, who was entrusted with them after his teacher’s death.&lt;/p&gt;
    &lt;p&gt;The history of the Codex itself makes for a fascinating narrative, much of which you can learn at Google’s Ten Key Facts slideshow. The notebooks span Leonardo’s career, from 1478, when he was “still working in his native Tuscany, to 1519, when he died in France.” The collection was taken from Milan by Napoleon and brought to France, where it remained in the Louvre until 1815, when the Congress of Vienna ruled that all artworks stolen by the former Emperor be returned. (The emissary tasked with returning the Codex could not decipher Leonardo’s mirror writing and took it for Chinese.)&lt;/p&gt;
    &lt;p&gt;The Codex contains not only engineering diagrams, anatomy studies, and artistic sketches, but also fables written by Leonardo, inspired by Florentine literature. And it features Leonardo’s famed “CV,” a letter he wrote to the Duke of Milan describing in nine points his qualifications for the post of military engineer. In point four, he writes, “I still have very convenient bombing methods that are easy to transport; they launch stones and similar such in a tempest full of smoke to frighten the enemy, causing great damage and confusion.”&lt;/p&gt;
    &lt;p&gt;As if in illustration, elsewhere in the Codex, the drawing above appears, “one of the most celebrated” of the collection.” It was “shown to traveling foreigners visiting the Ambrosiana [the Biblioteca Ambrosiana in Milan, where the Codex resides] since the 18th century, usually arousing much amazement.” It is still amazing, especially if we consider the possibility that its artistry might have been something of a byproduct for its creator, whose primary motivation seems to have been solving technical problems—in the most elegant ways imaginable.&lt;/p&gt;
    &lt;p&gt;See the complete digitization of Leonardo’s Codex Atlanticus here.&lt;/p&gt;
    &lt;p&gt;Note: An earlier version of this post appeared on our site in 2019.&lt;/p&gt;
    &lt;p&gt;Related Content:&lt;/p&gt;
    &lt;p&gt;How Leonardo da Vinci Drew an Accurate Satellite Map of an Italian City (1502)&lt;/p&gt;
    &lt;p&gt;Leonardo da Vinci’s Handwritten Resume (Circa 1482)&lt;/p&gt;
    &lt;p&gt;Leonardo Da Vinci’s To-Do List from 1490: The Plan of a Renaissance Man&lt;/p&gt;
    &lt;p&gt;Josh Jones is a writer and musician based in Durham, NC.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.openculture.com/2025/10/digitization-of-leonardo-da-vincis-codex-atlanticus.html"/><published>2025-10-28T03:32:09+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45730094</id><title>Poker Tournament for LLMs</title><updated>2025-10-28T15:40:43.899629+00:00</updated><content>&lt;doc fingerprint="7b6effef6ef87f8c"&gt;
  &lt;main&gt;
    &lt;p&gt;Loading event data...&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://pokerbattle.ai/event"/><published>2025-10-28T07:42:18+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45730607</id><title>Geometry and Physics of Wrinkling (2003) [pdf]</title><updated>2025-10-28T15:40:43.192192+00:00</updated><content/><link href="https://softmath.seas.harvard.edu/wp-content/uploads/2019/10/2003-03.pdf"/><published>2025-10-28T09:02:47+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45731315</id><title>Understanding the Worst .NET Vulnerability</title><updated>2025-10-28T15:40:42.486684+00:00</updated><content>&lt;doc fingerprint="b71699087fe1929d"&gt;
  &lt;main&gt;
    &lt;p&gt;I admit, that's a very click-baity headline, but Microsoft have given the vulnerability a CVSS score of 9.9, their highest ever. Time to panic, right?&lt;/p&gt;
    &lt;p&gt;In this post I try to provide a bit more context. I explain how request smuggling vulnerabilities work in general, how it works in this case, what attackers could use it for, how the vulnerability was fixed, what you can do to protect yourself.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;WARNING: I am not a security professional, so do not take anything in this post as gospel or advice. I'm just a developer trying to make sense of things. 😄 All of the details in this post are based on information that was provided or referenced in the original announcement.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h2"&gt;What is the CVE-2025-55315 vulnerability?&lt;/head&gt;
    &lt;p&gt;On October 14th 2025, on a standard Microsoft "patch Tuesday", Microsoft released new versions of all their supported versions of .NET, and also published a security advisory: Microsoft Security Advisory CVE-2025-55315: .NET Security Feature Bypass Vulnerability. The high level summary from that announcement said:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Inconsistent interpretation of http requests ('http request/response smuggling') in ASP.NET Core allows an authorized attacker to bypass a security feature over a network.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The advice was "patch all of your things", but the real headline was that this vulnerability was given a CVSS score of 9.9 our of 10, which you know, sounds pretty bad! Barry Dorrans AKA blowdart, .NET security head honcho, gave an explanation of the reasoning behind the score in a comment on the original issue:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;The bug enables HTTP Request Smuggling, which on its own for ASP.NET Core would be nowhere near that high, but that's not how we rate things...&lt;/p&gt;
      &lt;p&gt;Instead, we score based on how the bug might affect applications built on top of ASP.NET.&lt;/p&gt;
      &lt;p&gt;Request Smuggling allows an attacker to hide an extra request inside an another, and what that hidden request can do is very application specific.&lt;/p&gt;
      &lt;p&gt;The smuggled request could cause your application code to&lt;/p&gt;
      &lt;item&gt;Login as a different user (EOP)&lt;/item&gt;
      &lt;item&gt;Make an internal request (SSRF)&lt;/item&gt;
      &lt;item&gt;Bypass CSRF checks&lt;/item&gt;
      &lt;item&gt;Perform an injection attack&lt;/item&gt;
      &lt;p&gt;But we don't know what's possible because it's dependent on how you've written your app.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;That does all sound pretty scary! 😱 So you can understand the consternation that the issue has caused, especially given the hesitation to explain exactly what "how you've written your app" means.&lt;/p&gt;
    &lt;p&gt;Out of curiosity, I decided to dig in further to really understand this vulnerability, how it could impact you, and what "how you've written your app" could mean.&lt;/p&gt;
    &lt;head rend="h2"&gt;How does request smuggling work?&lt;/head&gt;
    &lt;p&gt;Before we get to the actual patched vulnerability in ASP.NET Core and how the vulnerability works, I think it's important to have some background about the general class of exploits known as HTTP request smuggling.&lt;/p&gt;
    &lt;p&gt;HTTP request smuggling is a security exploit that has been known about for a long time (according to Wikipedia, it was first documented in 2005). It fundamentally arises when you have two different servers processing an HTTP request (e.g. a server and a proxy server), and where those two servers differ in how they handle "invalid" HTTP requests.&lt;/p&gt;
    &lt;p&gt;In all cases of HTTP request smuggling, the exploit works by creating an invalid HTTP request (or sometimes just an ambiguous request), that looks a bit like two HTTP requests glued together. In summary, the exploit then works a bit like this:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The proxy server receives the ambiguous HTTP request&lt;/item&gt;
      &lt;item&gt;The proxy server forwards the request (unmodified) to the destination server&lt;/item&gt;
      &lt;item&gt;The server interprets the ambiguous request as two pipelined HTTP requests sent to the server, and processes them separately.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;I think it's easiest to understand the problem with an example, so the request below shows an example from the original 2005 paper.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Note that this is not an example of the request smuggling vulnerability in CVE-2025-55315, it's just a representative example of request smuggling in general.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;Let's imagine the attacker sends an HTTP request that looks like this:&lt;/p&gt;
    &lt;code&gt;POST /some_script.jsp HTTP/1.0
Connection: Keep-Alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 9
Content-Length: 204

this=thatPOST /vuln_page.jsp HTTP/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 95

param1=value1&amp;amp;data=&amp;lt;script&amp;gt;alert("stealing%20your%20data:"%2bdocument.cookie)&amp;lt;/script&amp;gt;&amp;amp;foobar
&lt;/code&gt;
    &lt;p&gt;The important feature of this request is that there are two &lt;code&gt;Content-Length&lt;/code&gt; headers, with different values: &lt;code&gt;9&lt;/code&gt; or &lt;code&gt;204&lt;/code&gt;. This is the core of the exploit; the difference between which of the these two headers the HTTP proxy and HTTP server honour is what causes the vulnerability.&lt;/p&gt;
    &lt;p&gt;Let's walk through how the exploit works, step-by-step:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The attacker sends the above HTTP request.&lt;/item&gt;
      &lt;item&gt;The HTTP proxy receives the request, notes the duplicate &lt;code&gt;Content-Length&lt;/code&gt;headers, and accepts the second header, the&lt;code&gt;204&lt;/code&gt;length. That means the whole rest of the request is treated as the message body, and seems fine as far as the proxy is concerned.&lt;/item&gt;
      &lt;item&gt;The HTTP proxy forwards the request on to the destination server.&lt;/item&gt;
      &lt;item&gt;This server also notes the duplicate &lt;code&gt;Content-Length&lt;/code&gt;header, but it takes the first of the headers, with the length of&lt;code&gt;9&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;The server reads &lt;code&gt;9&lt;/code&gt;bytes of the body (i.e.&lt;code&gt;this=that&lt;/code&gt;) and treats that as the whole request. As far as the server is concerned, the whole (valid) request has been received, and it sees the rest of the data as a whole new request.&lt;/item&gt;
      &lt;item&gt;That means that the destination server sees an entirely new HTTP request to process, &lt;code&gt;POST /vuln_page.jsp&lt;/code&gt;, and treats it as a new request.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;That's the core of the issue; the proxy saw one request, while the destination server saw two—the second request has been "smuggled" past the proxy to the server.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;The request smuggling technique shown here, where you have multiple&lt;/p&gt;&lt;code&gt;Content-Length&lt;/code&gt;headers isn't the "canonical" example you'll generally see referenced, but I used it here because it's simpler to understand in a lot of ways.&lt;p&gt;The canonical request smuggling attack is where you send both a&lt;/p&gt;&lt;code&gt;Content-Length&lt;/code&gt;header and a&lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;header (which specifies the length of the body as part of the body itself). As before, the request smuggling exploit relies on differences in how proxy and destination servers interpret these conflicting headers.&lt;/quote&gt;
    &lt;p&gt;So as you've seen, request smuggling enables sending a secret request to a destination server that an intermediate proxy server hasn't seen. In the next section we'll look at why that's a bad thing, and how it can be exploited.&lt;/p&gt;
    &lt;head rend="h2"&gt;How can an attacker exploit request smuggling?&lt;/head&gt;
    &lt;p&gt;On the face of it, request smuggling might not seem like a big deal. So the server sees two requests, so what? You could always send two requests to the server anyway, right? Well, yes and no.&lt;/p&gt;
    &lt;p&gt;The issue with request smuggling is really all about the mismatch between the proxy and destination servers. Thanks to this mismatch, and depending on what behaviours and expectations the target application has, attackers can use request smuggling to&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Reflect malicious data to other users on sites that are vulnerable to cross-site scripting.&lt;/item&gt;
      &lt;item&gt;Poison caches with bad data.&lt;/item&gt;
      &lt;item&gt;Exfiltrate authentication credentials or other data from client requests.&lt;/item&gt;
      &lt;item&gt;Invoke endpoints that shouldn't be publicly accessible (because the proxy would block external access to them).&lt;/item&gt;
      &lt;item&gt;Replace/override authentication controls handled by the proxy.&lt;/item&gt;
      &lt;item&gt;Redirect users to malicious sites on sites vulnerable to open-redirect attacks.&lt;/item&gt;
      &lt;item&gt;And more…&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As you can see, these are all Bad™️, so you can kind of understand why the 9.9 rating was given! 😱&lt;/p&gt;
    &lt;p&gt;That said, it's worth mentioning that not all of these attacks will be fruitful against all applications. Some of the easiest to understand versions of these exploits are where the proxy is not just doing "dumb" forwarding of requests, but rather it's validating or enhancing the request in some way.&lt;/p&gt;
    &lt;p&gt;For example, if you have a proxy sat in front of your server which is responsible for handling TLS termination and client-authentication and identification using certificates, then request smuggling could be used to bypass these checks and insert your own identification.&lt;/p&gt;
    &lt;p&gt;As an example of that attack, the HTTP request below demonstrates using a &lt;code&gt;Content-Length&lt;/code&gt; and &lt;code&gt;Transfer-Encoding&lt;/code&gt; request smuggling attack to "hide" the request to &lt;code&gt;/admin&lt;/code&gt; from the front-end proxy, and insert a malicious &lt;code&gt;X-SSL-CLIENT-CN&lt;/code&gt; header, which would normally be added by the front-end proxy:&lt;/p&gt;
    &lt;code&gt;POST /example HTTP/1.1
Host: some-website.com
Content-Type: x-www-form-urlencoded
Content-Length: 64
Transfer-Encoding: chunked

0

GET /admin HTTP/1.1
X-SSL-CLIENT-CN: administrator
Foo: x
&lt;/code&gt;
    &lt;p&gt;In this example, the server assumes that the &lt;code&gt;X-SSL-CLIENT-CN: administrator&lt;/code&gt; header was added by the proxy, and so the server assumes that the proxy already did all the necessary authentication and authorization. The attacker is able to perform a request as an entirely different user.&lt;/p&gt;
    &lt;p&gt;Request smuggling is clearly a big problem whenever you have a front-end proxy that does some functionality, but even when it's essentially a dumb proxy, request smuggling can still be used to steal and exfiltrate data from other user's requests, even if the attacked site is not vulnerable to cross-site scripting or other vulnerabilities.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;In these attacks, simply having functionality that displays data provided by a user (even sanitised) can be sufficient to steal the credentials of other users. So something as simple as displaying a user name or a comment could be sufficient.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;This post is long enough, and there are so many different attacks, that I'm going to leave it there for looking at exploits. If you'd like to learn more about what's possible, along with simple explanations and examples of exploits, I recommend the PortSwigger documentation on exploiting request smuggling.&lt;/p&gt;
    &lt;head rend="h2"&gt;Does request smuggling only apply if I have a proxy?&lt;/head&gt;
    &lt;p&gt;In general, whenever people talk about request smuggling, they normally talk about the case where you have multiple servers: the canonical example is a proxy server and a destination server, as I've discussed so far. But don't be fooled, these issues and vulnerabilities can apply even if you aren't strictly using a proxy.&lt;/p&gt;
    &lt;p&gt;The key feature of the vulnerability is that there's an opportunity for confusion between two "systems", whether they're full "servers" or not. This obviously applies to proxy servers, but could also apply to your application if you're doing anything where you're reading/manipulating/forwarding request streams, or where there's the possibility for confusion inside the same application.&lt;/p&gt;
    &lt;p&gt;For ASP.NET Core applications, if you're working with &lt;code&gt;HttpRequest.Body&lt;/code&gt; or &lt;code&gt;HttpRequest.BodyReader&lt;/code&gt;, or other similar methods then you may be vulnerable to attacks even if you're not explicitly using a proxy server. Even if you don't think of your application as a proxy or as using a proxy, if you're doing "proxy-like" things, then you could be vulnerable.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Put in other words, if you're reading, manipulating, or forwarding request streams directly in ASP.NET Core, as opposed to just relying on the built-in model binding, then you could be at risk to request smuggling attacks. It's very hard to enumerate all the attack vectors, so you should consider any code that does so as a potential avenue of exploitation.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;We've now covered how request smuggling works and can be exploited in general, so it's time to look at the specific version of request smuggling that is targeted in the .NET CVE-2025-55315 vulnerability.&lt;/p&gt;
    &lt;head rend="h2"&gt;How does the request smuggling in CVE-2025-55315 work?&lt;/head&gt;
    &lt;p&gt;As we've seen, HTTP request smuggling is a general technique that relies on differences between proxies and servers in how they parse HTTP requests. I've shown two specific versions of this so far: duplicate &lt;code&gt;Content-Length&lt;/code&gt; headers, and &lt;code&gt;Content-Length&lt;/code&gt;/&lt;code&gt;Transfer-Encoding&lt;/code&gt; confusion, but these are not exhaustive. There are variations on these approaches which also lead to request smuggling.&lt;/p&gt;
    &lt;p&gt;The request smuggling vulnerability in CVE-2025-55315 relies on a variation which (as far as I can tell) was first reported in June 2025 by Jeppe Bonde Weikop on their blog. This variation relies on &lt;code&gt;Transfer-Encoding&lt;/code&gt; and the Chunk Extensions feature.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;All the details and images in this section are based on the descriptions and examples in the original post. That post is excellent, so if you want even more detail and explanation than here, you should definitely read it, and then you can skip the abbreviated version I provide here.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;To understand the vulnerability, we'll first look at how chunked transfer encoding works and what chunk extensions are. We'll then look at how invalid line-endings can lead to differences in interpretation of a request. Finally, we'll look at how this difference in interpretation can open the way for request smuggling, and how ASP.NET Core fixed the problem.&lt;/p&gt;
    &lt;head rend="h3"&gt;&lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt; and chunk extensions&lt;/head&gt;
    &lt;p&gt;To understand the vulnerability, we first need to understand how &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt; works, and how chunk extensions complicate things.&lt;/p&gt;
    &lt;p&gt;When you're sending a request, you might not always know up-front how big the request is that you're sending. Let's take a practical example of serializing a .NET object to JSON into a request body. The only way to know for sure how big the serialized data is going to be is to actually serialize it. So you could serialize the data to memory before writing the request, but if the data is very big, then that could cause issues with allocating big arrays.&lt;/p&gt;
    &lt;p&gt;Instead, &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt; allows sending the request data in multiple "chunks". You need to know the size of each individual chunk, but not the overall size of the data, or how many chunks there are. This works well for serializing to a small buffer, sending that small buffer as a chunk, and then re-using the buffer to serialize the next part, until you have serialized the whole object.&lt;/p&gt;
    &lt;p&gt;In terms of the HTTP request itself, each chunk consists of a header and a body. The header consists of a hexadecimal-formatted number of bytes, followed by a &lt;code&gt;\r\n&lt;/code&gt; (&lt;code&gt;CRLF&lt;/code&gt;) line ending. The chunk body is then the specified number of bytes, followed by another &lt;code&gt;\r\n&lt;/code&gt;. You can have as many chunks as you need, and the request will keep being passed until you send a &lt;code&gt;0&lt;/code&gt; length chunk, which indicates the end of the request.&lt;/p&gt;
    &lt;p&gt;As an example, the following HTTP &lt;code&gt;POST&lt;/code&gt; shows posting some JSON to an endpoint, but the JSON is sent as three distinct chunks:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Chunk 1: The header is &lt;code&gt;9&lt;/code&gt;indicating 9 bytes will be sent (followed by&lt;code&gt;\r\n&lt;/code&gt;), and then the 9 bytes of the start of the JSON document in the chunk body, again followed by&lt;code&gt;\r\n&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;Chunk 1: The header is &lt;code&gt;e&lt;/code&gt;indicating 14 bytes (14 in hexadecimal is&lt;code&gt;e&lt;/code&gt;) will be sent (followed by&lt;code&gt;\r\n&lt;/code&gt;), and then the remaining 14 bytes of the end of the JSON document, followed by&lt;code&gt;\r\n&lt;/code&gt;.&lt;/item&gt;
      &lt;item&gt;The final chunk is an "empty" chunk, &lt;code&gt;0\r\n\r\n&lt;/code&gt;, indicating the end of the request.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;We're going to see shortly that line endings are very important, so the following diagram shows the same as the above HTTP request, but with the line endings included:&lt;/p&gt;
    &lt;p&gt;That's "normal" chunked transfer encoding, so now we come to chunk extensions. Chunk extensions are part of the HTTP 1.1 protocol which allows for adding key-value pairs of metadata to individual chunks. The following example shows the same request as before, but with a chunk extension, &lt;code&gt;;foo=bar&lt;/code&gt; in the second chunk:&lt;/p&gt;
    &lt;p&gt;A chunk extension is indicated by a &lt;code&gt;;&lt;/code&gt; after the chunk header length, followed by one or more key-value pairs in the form &lt;code&gt;key=value&lt;/code&gt;. It's important to understand that chunk extensions are not part of the data that's seen by a request handler; chunk extensions are just metadata about the individual chunk. And tl;dr; they're completely useless 😅&lt;/p&gt;
    &lt;p&gt;To the closest approximation, no-one cares about chunk extensions; client implementations don't send them, and servers just ignore them. If that's the case, how can they be the cause of such a problematic bug in .NET?&lt;/p&gt;
    &lt;p&gt;The problem is how the implementation ignores them…&lt;/p&gt;
    &lt;head rend="h3"&gt;Invalid chunk extensions with incorrect line endings&lt;/head&gt;
    &lt;p&gt;In general with HTTP, clients and server implementations often try to follow the robustness principle of "be conservative in what you send, and lenient with what you accept". Unfortunately, it's this very leniency which can sometimes leave us in hot water. After all, it was leniency around requests containing both a &lt;code&gt;Content-Length&lt;/code&gt; and &lt;code&gt;Transfer-Encoding&lt;/code&gt; header that was the root cause of the original request smuggling exploit.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;Note that the HTTP 1.1 RFC now forbids forwarding both these headers, precisely to avoid request smuggling attacks.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;For chunk extensions though, leniency is often accidentally built in to the server implementations. Given that no implementations actually do anything with the chunk extensions, the canonical approach to handling them when parsing a chunk header is just to ignore them. When a &lt;code&gt;;&lt;/code&gt; is parsed, it's common to just look for the end of the line, and ignore everything in between.&lt;/p&gt;
    &lt;p&gt;For ASP.NET Core (prior to the fix), on finding a &lt;code&gt;;&lt;/code&gt; in the chunk header, Kestrel would "parse" the extension, but in practice, it would search for the carriage return &lt;code&gt;\r&lt;/code&gt; and then check for the following &lt;code&gt;\n&lt;/code&gt;, skipping everything in between, a little bit like this (very simplified compared to original code):&lt;/p&gt;
    &lt;code&gt;private void ParseExtension(ReadOnlySequence&amp;lt;byte&amp;gt; buffer)
{
    while(true)
    {
        // Chunk-extensions not currently parsed
        // Just drain the data
        var extensionCursor = buffer.PositionOf(ByteCR);
        var suffixBuffer = buffer.Slice(extensionCursor); // skips over extensionCursor bytes

        var suffixSpan = suffixBuffer.Slice(0, 2).ToSpan();

        if (suffixSpan[1] == '\n')
        {
            // We consumed the \r\n at the end of the extension, so switch modes.
            return;
        }

        // Otherwise, keep reading data until we do find \r\n
        buffer = ReadMoreData();
    }
}
&lt;/code&gt;
    &lt;p&gt;The implementation in ASP.NET Core wasn't particularly special; most servers simply skip over the bytes until they find a &lt;code&gt;\r\n&lt;/code&gt;. The big question is exactly how the servers search for &lt;code&gt;\r\n&lt;/code&gt;. What happens if they see a lone &lt;code&gt;\r&lt;/code&gt;, or a lone &lt;code&gt;\n&lt;/code&gt;? Do they treat that the same as a &lt;code&gt;\r\n&lt;/code&gt;? Do they throw an error if they find an un-paired &lt;code&gt;\r&lt;/code&gt; or &lt;code&gt;\n&lt;/code&gt;? Or do they ignore it and keep looking for a &lt;code&gt;\r\n&lt;/code&gt;?&lt;/p&gt;
    &lt;p&gt;That ambiguity is at the heart of the CVE-2025-55315 request smuggling vulnerability. Differences in how proxy and server implementations treat standalone &lt;code&gt;\r&lt;/code&gt; or &lt;code&gt;\n&lt;/code&gt; in a chunk header allow for request smuggling exploits that use this ambiguity.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Note that according to the RFC, implementers must not treat&lt;/p&gt;&lt;code&gt;\r&lt;/code&gt;or&lt;code&gt;\n&lt;/code&gt;as "valid" line terminators for a chunk header, and neither&lt;code&gt;\r&lt;/code&gt;or&lt;code&gt;\n&lt;/code&gt;are allowed elsewhere in chunk headers, so correct implementations must reject requests that include these standalone line endings in chunk headers.&lt;/quote&gt;
    &lt;p&gt;For complete clarity, the following example is the same as the previous implementation but with an invalid chunk header in the chunk extension of the second chunk. Instead of ending with &lt;code&gt;\r\n&lt;/code&gt;, the chunk extension ends with a single &lt;code&gt;\n&lt;/code&gt;:&lt;/p&gt;
    &lt;p&gt;That's the root cause of the request smuggling vulnerability, so in the next section we'll look at how this could be used to craft a malicious HTTP request.&lt;/p&gt;
    &lt;head rend="h3"&gt;Exploiting invalid chunk extensions for request smuggling&lt;/head&gt;
    &lt;p&gt;Just as with other examples of request smuggling, the chunk extensions approach relies on differences in how a proxy parses a request compared to a subsequent server. This difference means the proxy sees one request, while the destination request sees two requests, and allows for all the same exploits I discussed earlier.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;As discussed, these examples come from this excellent blog post, so see that post for more details, variations on the attack, and further ways to exploit the vulnerability.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;The following example shows a malicious HTTP request that exploits a difference in line-ending handling between a proxy and the destination server to smuggle a request to the &lt;code&gt;/admin&lt;/code&gt; endpoint. We can imagine that the proxy is configured to automatically reject requests to &lt;code&gt;/admin&lt;/code&gt; normally, and the server assumes that the proxy handles that for us.&lt;/p&gt;
    &lt;p&gt;In this example the attacker creates a malformed chunk header with a chunk extension by sending &lt;code&gt;2;\n&lt;/code&gt;. The &lt;code&gt;;&lt;/code&gt; ensures that both the proxy and and server treat the header as a chunk extension, but using &lt;code&gt;\n&lt;/code&gt; instead of &lt;code&gt;\r\n&lt;/code&gt; results in differential parsing:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;The proxy only sees a single request: &lt;list rend="ul"&gt;&lt;item&gt;It treats the &lt;code&gt;\n&lt;/code&gt;as a "valid" line-ending for the chunk header&lt;/item&gt;&lt;item&gt;It then treats the &lt;code&gt;xx&lt;/code&gt;as the chunk body&lt;/item&gt;&lt;item&gt;&lt;code&gt;47&lt;/code&gt;is the next chunk header&lt;/item&gt;&lt;item&gt;The next 71 bytes (&lt;code&gt;47&lt;/code&gt;is hex, which is 71 in decimal) are treated as the chunk body.&lt;/item&gt;&lt;item&gt;Finally there's the empty chunk block&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;It treats the &lt;/item&gt;
      &lt;item&gt;The server sees two requests: &lt;list rend="ul"&gt;&lt;item&gt;The server ignores the lone &lt;code&gt;\n&lt;/code&gt;, and skips all the way to&lt;code&gt;xx\r\n&lt;/code&gt;&lt;/item&gt;&lt;item&gt;It then treats the &lt;code&gt;47&lt;/code&gt;as the chunk body&lt;/item&gt;&lt;item&gt;It sees an ending chunk,&lt;code&gt;0\r\n\r\n&lt;/code&gt;and thinks the request is over&lt;/item&gt;&lt;item&gt;The remaining data is treated as a completely separate request, which contains only an empty chunk in the body.&lt;/item&gt;&lt;/list&gt;&lt;/item&gt;
      &lt;item&gt;The server ignores the lone &lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;This is pretty much the simplest example, but you can essentially exploit this difference in all the ways I described previously. Exactly what the implications are for your application are hard to say, but given that all sorts of security bypass, credential stealing, and injection attacks are possible, it's easy to understand why the vulnerability received a CVSS rating of 9.9.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;One very interesting thing I found was looking at the security advisories for the same flaw in other HTTP implementations from other languages. In the python aiohttp and ruby puma servers, for example, give the vulnerability only a moderate severity rating in both cases. In netty it's even given a low severity.&lt;/p&gt;
      &lt;p&gt;As far as I can tell, these servers are essentially vulnerable in the same way as ASP.NET Core is, so it's just an interesting data point, and I think reflects how Microsoft really want to make sure this gets the visibility it deserves and that customers patch their apps!&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h3"&gt;How was the vulnerability fixed?&lt;/head&gt;
    &lt;p&gt;As with most fixes for request-smuggling, the solution is to stop being lenient and/or ambiguous about how standalone line-endings are handled in chunk headers.&lt;/p&gt;
    &lt;p&gt;In ASP.NET Core, the PR that fixes the issue does so by explicitly checking for any line-endings, instead of just looking for &lt;code&gt;\r&lt;/code&gt;. If it finds a line ending and it's not strictly &lt;code&gt;\r\n&lt;/code&gt;, then Kestrel now throws a &lt;code&gt;KestrelBadHttpRequestException&lt;/code&gt; and returns a &lt;code&gt;400&lt;/code&gt; response.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;I'll mention here there is an&lt;/p&gt;&lt;code&gt;AppContext&lt;/code&gt;switch for opting-in to the dangerous/vulnerable parsing behaviour after you have patched your application, but please don't use it, I can't believe there's really a good (or safe) reason to.😅&lt;/quote&gt;
    &lt;p&gt;The vulnerability has been patched in ASP.NET Core, so what should you do?&lt;/p&gt;
    &lt;head rend="h2"&gt;What should you do?&lt;/head&gt;
    &lt;p&gt;Obviously the good news here is that there is a fix for ASP.NET Core. As described in the original issue, the important thing is to update to the latest supported version of ASP.NET Core as soon as possible.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;There's no announced evidence of the request smuggling vulnerability being exploited in the wild, but given the vast number of ways that request smuggling could be used, would we even know? 🤔&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;That means you should update your version of .NET 8, .NET 9, or .NET 10:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Vulnerable versions&lt;/cell&gt;
        &lt;cell role="head"&gt;Lowest patched version&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;.NET 10&lt;/cell&gt;
        &lt;cell&gt;10.0.0-rc2&lt;/cell&gt;
        &lt;cell&gt;10.0.0-rc2&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;.NET 9&lt;/cell&gt;
        &lt;cell&gt;9.0.0 - 9.0.9&lt;/cell&gt;
        &lt;cell&gt;9.0.10&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;.NET 8&lt;/cell&gt;
        &lt;cell&gt;8.0.0 - 8.0.20&lt;/cell&gt;
        &lt;cell&gt;8.0.21&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;If you're using ASP.NET Core 2.3 on .NET Framework, then you'll need to update your version of Microsoft.AspNetCore.Server.Kestrel.Core:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Vulnerable versions&lt;/cell&gt;
        &lt;cell role="head"&gt;Lowest patched version&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Microsoft.AspNetCore.Server.Kestrel.Core&lt;/cell&gt;
        &lt;cell&gt;2.0.0-2.3.0&lt;/cell&gt;
        &lt;cell&gt;2.3.6&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;If you are doing self-contained deployments of your applications, you'll need to update to the patched versions and then redeploy your applications.&lt;/p&gt;
    &lt;p&gt;And if you're using older versions of .NET Core? Well, then you can't patch… HeroDevs provide additional support for out-of-support versions of .NET (and have confirmed they'll be patching it in .NET 6), but this vulnerability is present in basically all versions of .NET Core as far as I can tell. I've personally tested down to .NET Core 3.0 and I can confirm that the vulnerability is there and there are no patches coming for you. The best thing to do is to update to a supported version of .NET.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;⚠️ If you are running ASP.NET Core using &amp;lt;=.NET Core 3.0, .NET Core 3.1, .NET 5, .NET 6 (unless supported by HeroDevs), or .NET 7, then you are vulnerable, and there are no patches. You should update to a supported version of .NET as soon as possible. Ironically, if you're stuck on old .NET Framework Web Forms or MVC applications you are apparently not vulnerable.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;It's worth noting that if you are stuck on one of these old framework versions and can't upgrade, then probably the best way to protect yourself is to ensure that you have a proxy in front of your application which is confirmed to not be vulnerable (though obviously you are likely vulnerable to other exploits 😅).&lt;/p&gt;
    &lt;p&gt;For example, Azure App Services (AAS) confirmed that applications running in AAS are no longer vulnerable, even if you haven't updated, because the proxy that AAS uses (itself a YARP based ASP.NET Core proxy) has been patched. By blocking the requests at the proxy level, ambiguous requests will never make it to your application, so you are protected.&lt;/p&gt;
    &lt;p&gt;Unfortunately, right now, it's not clear exactly where you stand if you're using a service other than AAS for hosting your applications. Even IIS hasn't been confirmed to be safe or vulnerable at this point, but I did some unofficial testing on my Windows 11 box, and as fat as I can tell, it is vulnerable.&lt;/p&gt;
    &lt;quote&gt;&lt;p&gt;Note that various people in the original issue are attempting to test IIS by using the&lt;/p&gt;&lt;code&gt;Content-Length&lt;/code&gt;/&lt;code&gt;Transfer-Encoding&lt;/code&gt;version of request smuggling, which is not applicable here; we're interested in the chunk-extensions based version.&lt;/quote&gt;
    &lt;p&gt;Another interesting point is that this is vulnerability in HTTP/1.0 and HTTP/1.1 only; it is not a vulnerability in HTTP/2 or HTTP/3. HTTP/2 and HTTP/3 do not support chunked transfer encoding, and instead uses a different, more efficient, binary framing layer for data streaming. So another way to protect those applications which you can't upgrade may be to enforce that client's can only use HTTP/2 or HTTP/3. Be aware that's liable to break a lot of clients that are still using HTTP/1.1 though!&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;You can configure the HTTP protocols allowed by Kestrel by configuring your Kestrel endpoints. The documentation shows various ways to do this.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;head rend="h2"&gt;How to know if you're affected?&lt;/head&gt;
    &lt;p&gt;The "simplest" way to know if you're affected is to check the version of .NET you're using to run your applications, using &lt;code&gt;dotnet --info&lt;/code&gt; and verify that you're using one of the patched versions. If you are, you're safe. That's the only "supported" way to know that you're safe, and it's the one way I would recommend. As far as I can tell, there isn't currently a generalised tool to point at an application to find out if it's vulnerable, though it would likely be possible to write one.&lt;/p&gt;
    &lt;p&gt;The folks at HeroDevs re-implemented the functional tests from the original ASP.NET Core fix as a console application compiled against multiple versions of ASP.NET Core. They used this to confirm that unpatched versions of .NET 8-.NET 10 are vulnerable, while patched versions are not. They also used this to verify .NET 6 is vulnerable, and I tweaked it to confirm everything down to at least .NET Core 3.0 is vulnerable.&lt;/p&gt;
    &lt;p&gt;The test in the repro works by sending a chunked transfer encoding request to ASP.NET Core, with an invalid line ending in a chunk extension header. The vulnerability is identified by ASP.NET Core "hanging", waiting for more data, until it eventually times out. The "fixed" version immediately throws the &lt;code&gt;BadRequest&lt;/code&gt; exception included in the fix.&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;I saw some confusion about this test online; the argument was "if both the fixed and broken versions throw an exception, why does it matter"? However, that's not the point of the test. The fact that Kestrel is paused waiting for more data indicates that a smuggled HTTP request would have been executed. You can see how this can be leveraged to exfiltrate data or attack other users both in the chunk extensions blog or on PortSwigger's site.&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;I used a similar approach to try to understand whether IIS might be vulnerable by sending the same crafted HTTP request to IIS and seeing if it hung until timing out: it did on my version of IIS (&lt;code&gt;10.0.26100.1882&lt;/code&gt;):&lt;/p&gt;
    &lt;code&gt;# Send an HTTP request with an invalid chunk extension, and see
# if it times out or if it's rejected with a 400... It times out 🙁
echo -e "GET / HTTP/1.1\r\nHost:\r\nTransfer-Encoding: chunked\r\n\r\n1;\n" \
  | nc localhost 80
&lt;/code&gt;
    &lt;p&gt;So does that definitely mean IIS is vulnerable? No, don't trust me, I'm not a security researcher 😅 But until you hear otherwise, I would play it safe and assume that IIS won't protect you from chunk extension request smuggling attacks. And in general, I would apply the same rules to any other proxies you are relying on in your infrastructure.&lt;/p&gt;
    &lt;p&gt;And as a final reminder, even though request smuggling is typically described and demonstrated using a proxy in front of your server, just not using a proxy does not mean you're automatically safe. If you're reading, manipulating, or forwarding request streams directly in ASP.NET Core, as opposed to just relying on the built-in model binding, then you might be at risk to request smuggling attacks. It's best to play it safe, patch your apps, and wherever possible leave the complexity of manipulating requests to ASP.NET Core.&lt;/p&gt;
    &lt;p&gt;In general, I would make sure to subscribe to the ASP.NET Core issue on GitHub, as it's likely that any more announcements around the issue will also be reported there.&lt;/p&gt;
    &lt;head rend="h2"&gt;Summary&lt;/head&gt;
    &lt;p&gt;In this post I discuss the recent ASP.NET Core vulnerability: Microsoft Security Advisory CVE-2025-55315: .NET Security Feature Bypass Vulnerability. This advisory warns of a request smuggling vulnerability that affects basically all versions of ASP.NET Core.&lt;/p&gt;
    &lt;p&gt;I described how request smuggling works in general, using a simple example of request smuggling to show how ambiguity in how HTTP is parsed can lead to HTTP proxies and HTTP servers in handling the same HTTP request in different ways. This can lead to the server seeing two requests where the proxy only sees a single request.&lt;/p&gt;
    &lt;p&gt;After walking through a request smuggling example, I discussed some of the ways attackers could exploit a request smuggling vulnerability. That includes reflecting malicious data to other users of your app, exfiltrating authentication credentials or other data from client requests, invoking endpoints that shouldn't be publicly accessible, and various other attacks.&lt;/p&gt;
    &lt;p&gt;Next I walked through the specific request smuggling vulnerability identified in CVE-2025-55315. This uses ambiguities in the parsing of chunk extensions when sending requests that use chunked transfer encoding. Chunk extensions are generally ignored by all servers, but lenient handling can lead to differential handling between proxy and server, providing an avenue for request smuggling.&lt;/p&gt;
    &lt;p&gt;Finally, I walked through the mitigation steps you should take: patching your applications. I described the information we currently have about vulnerable or patched proxy servers, and how old versions of ASP.NET Core are not going to be getting patches, so will remain vulnerable (shout out again to HeroDevs for supporting .NET 6). If you're running in AAS, then you're ok, but otherwise, you need to check with your proxy provider to establish whether you are vulnerable or not.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://andrewlock.net/understanding-the-worst-dotnet-vulnerability-request-smuggling-and-cve-2025-55315/"/><published>2025-10-28T11:03:38+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45731366</id><title>Show HN: Bash Screensavers</title><updated>2025-10-28T15:40:41.988455+00:00</updated><content>&lt;doc fingerprint="2d05b3369bc42e9d"&gt;
  &lt;main&gt;
    &lt;p&gt;Tired of your boring old terminal? Wish you could spice up your command line with some animated ASCII art? Well, you've come to the right place!&lt;/p&gt;
    &lt;p&gt;Welcome to Bash Screensavers, a collection of screensavers written entirely in &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt;
    &lt;p&gt;Because who needs fancy graphics cards and complex rendering engines when you have &lt;code&gt;echo&lt;/code&gt;, &lt;code&gt;sleep&lt;/code&gt;, and a little bit of &lt;code&gt;tput&lt;/code&gt; magic?&lt;/p&gt;
    &lt;p&gt;Gallery - Quickstart - Contributing - Spotlight - Jury - Library - Chat&lt;/p&gt;
    &lt;p&gt;The Gallery README has info on all the screensavers.&lt;/p&gt;
    &lt;code&gt;git clone https://github.com/attogram/bash-screensavers.git
cd bash-screensavers
./screensaver.sh&lt;/code&gt;
    &lt;code&gt;Bash Screensavers v0.0.27 (Mystic Shine)

  1 . alpha        - random colorful pixels
  2 . bouncing     - bouncing 'O' madness
  3 . cutesaver    - infinite loop of cuteness
  4 . fireworks    - Ooh! Aah! Pretty lights!
  5 . life         - cellular automata
  6 . matrix       - the matrix has you
  7 . pipes        - an endless pipe maze
  8 . rain         - soothing, gentle rain
  9 . speaky       - dramatic talking screensaver
  10. stars        - twinkling starfield
  11. tunnel       - fly into the digital tunnel
  12. vibe         - vibe coding

(Press ^C to exit)

Choose your screensaver:
&lt;/code&gt;
    &lt;p&gt;
      &lt;code&gt;./screensaver.sh&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;./screensaver.sh name&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;./screensaver.sh number&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;./screensaver.sh -r&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;./screensaver.sh -h&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;./screensaver.sh -v&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;
      &lt;code&gt;./gallery/name/name.sh&lt;/code&gt;
    &lt;/p&gt;
    &lt;p&gt;We welcome contributions!&lt;/p&gt;
    &lt;p&gt;For the nitty-gritty, see CONTRIBUTING.md.&lt;/p&gt;
    &lt;p&gt;Vibe coders and AI Assistants are welcome to join the party.&lt;/p&gt;
    &lt;p&gt;The spotlight is a set of curator tools for marketing and publicity fluff, like pretty previews of all the screensavers.&lt;/p&gt;
    &lt;p&gt;Read the Spotlight Manual for details.&lt;/p&gt;
    &lt;p&gt;The jury makes sure the gallery is up-to-snuff.&lt;/p&gt;
    &lt;p&gt;They test everything. They're a bit batsy about it.&lt;/p&gt;
    &lt;p&gt;See the Jury Criteria for the rules.&lt;/p&gt;
    &lt;p&gt;This directory contains screensavers that are not yet ready for general use.&lt;/p&gt;
    &lt;p&gt;They may be broken, incomplete, or just not up to the quality standards of the main gallery.&lt;/p&gt;
    &lt;p&gt;Feel free to experiment with them, but use them at your own risk!&lt;/p&gt;
    &lt;p&gt;The library is filled with stuff about visualizations and voices.&lt;/p&gt;
    &lt;p&gt;Read the Library Index to get started.&lt;/p&gt;
    &lt;p&gt;Have questions, ideas, or just want to chat?&lt;/p&gt;
    &lt;p&gt;Made with ❤️ and a lot of bash.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/attogram/bash-screensavers"/><published>2025-10-28T11:12:32+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45732350</id><title>The next chapter of the Microsoft–OpenAI partnership</title><updated>2025-10-28T15:40:41.608702+00:00</updated><content>&lt;doc fingerprint="ad180c98122ccbd8"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The next chapter of the Microsoft–OpenAI partnership&lt;/head&gt;
    &lt;p&gt;Since 2019, Microsoft and OpenAI have shared a vision to advance artificial intelligence responsibly and make its benefits broadly accessible. What began as an investment in a research organization has grown into one of the most successful partnerships in our industry. As we enter the next phase of this partnership, we’ve signed a new definitive agreement that builds on our foundation, strengthens our partnership, and sets the stage for long-term success for both organizations.&lt;/p&gt;
    &lt;p&gt;First, Microsoft supports the OpenAI board moving forward with formation of a public benefit corporation (PBC) and recapitalization. Following the recapitalization, Microsoft holds an investment in OpenAI Group PBC valued at approximately $135 billion, representing roughly 27 percent on an as-converted diluted basis, inclusive of all owners—employees, investors, and the OpenAI Foundation. Excluding the impact of OpenAI’s recent funding rounds, Microsoft held a 32.5 percent stake on an as-converted basis in the OpenAI for-profit.&lt;/p&gt;
    &lt;p&gt;The agreement preserves key elements that have fueled this successful partnership—meaning OpenAI remains Microsoft’s frontier model partner and Microsoft continues to have exclusive IP rights and Azure API exclusivity until Artificial General Intelligence (AGI).&lt;/p&gt;
    &lt;p&gt;It also refines and adds new provisions that enable each company to independently continue advancing innovation and growth.&lt;/p&gt;
    &lt;p&gt;What has evolved:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;Once AGI is declared by OpenAI, that declaration will now be verified by an independent expert panel.&lt;/item&gt;
      &lt;item&gt;Microsoft’s IP rights for both models and products are extended through 2032 and now includes models post-AGI, with appropriate safety guardrails.&lt;/item&gt;
      &lt;item&gt;Microsoft’s IP rights to research, defined as the confidential methods used in the development of models and systems, will remain until either the expert panel verifies AGI or through 2030, whichever is first. Research IP includes, for example, models intended for internal deployment or research only. Beyond that, research IP does not include model architecture, model weights, inference code, finetuning code, and any IP related to data center hardware and software; and Microsoft retains these non-Research IP rights.&lt;/item&gt;
      &lt;item&gt;Microsoft’s IP rights now exclude OpenAI’s consumer hardware.&lt;/item&gt;
      &lt;item&gt;OpenAI can now jointly develop some products with third parties. API products developed with third parties will be exclusive to Azure. Non-API products may be served on any cloud provider.&lt;/item&gt;
      &lt;item&gt;Microsoft can now independently pursue AGI alone or in partnership with third parties.&lt;/item&gt;
      &lt;item&gt;If Microsoft uses OpenAI’s IP to develop AGI, prior to AGI being declared, the models will be subject to compute thresholds; those thresholds are significantly larger than the size of systems used to train leading models today.&lt;/item&gt;
      &lt;item&gt;The revenue share agreement remains until the expert panel verifies AGI, though payments will be made over a longer period of time.&lt;/item&gt;
      &lt;item&gt;OpenAI has contracted to purchase an incremental $250B of Azure services, and Microsoft will no longer have a right of first refusal to be OpenAI’s compute provider.&lt;/item&gt;
      &lt;item&gt;OpenAI can now provide API access to US government national security customers, regardless of the cloud provider.&lt;/item&gt;
      &lt;item&gt;OpenAI is now able to release open weight models that meet requisite capability criteria.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;As we step into this next chapter of our partnership, both companies are better positioned than ever to continue building great products that meet real-world needs, and create new opportunity for everyone and every business.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://openai.com/index/next-chapter-of-microsoft-openai-partnership/"/><published>2025-10-28T13:05:40+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45732485</id><title>Austrian Ministry Kicks Out Microsoft in Favor of Nextcloud</title><updated>2025-10-28T15:40:40.595159+00:00</updated><content>&lt;doc fingerprint="2b5cb91876a71afa"&gt;
  &lt;main&gt;
    &lt;p&gt;European governments have been steadily moving away from reliance on foreign tech offerings, driven largely by concerns over data sovereignty and regulatory compliance.&lt;/p&gt;
    &lt;p&gt;Countries like Germany and Denmark have already taken steps to reduce their dependence on Microsoft and other foreign cloud providers, opting instead for open source alternatives that keep sensitive data within their borders.&lt;/p&gt;
    &lt;p&gt;And, recently, Austria has shown up as another player in this space. Last month, the Austrian Armed Forces completed a migration of 16,000 workstations from Microsoft Office to LibreOffice.&lt;/p&gt;
    &lt;p&gt;Now, another Austrian government body has joined the Ditch Microsoft club.&lt;/p&gt;
    &lt;head rend="h2"&gt;A Welcome Move&lt;/head&gt;
    &lt;p&gt;Announced at the Nextcloud Enterprise Day Copenhagen 2025 event, Austria's Federal Ministry of Economy, Energy and Tourism, or BMWET for short, has migrated 1,200 employees to Nextcloud for internal collaboration and secure data storage.&lt;/p&gt;
    &lt;p&gt;The ministry is now operating on Austrian-controlled infrastructure, moving away from foreign cloud providers for handling sensitive government data. The project went from proof of concept to full deployment in just four months, an uncommonly fast timeline for a public sector IT migration of this scale.&lt;/p&gt;
    &lt;p&gt;The implementation was carried out in partnership with Atos Austria, which worked alongside Nextcloud's team to ensure the platform met the ministry's legal, technical, and organizational requirements.&lt;/p&gt;
    &lt;head rend="h2"&gt;How Was it Done?&lt;/head&gt;
    &lt;p&gt;The ministry implemented a hybrid setup rather than a complete rip-and-replace approach. At the time this project began, BMWET was already in the process of adopting Microsoft 365 and Teams, so a full reversal wasn't feasable.&lt;/p&gt;
    &lt;p&gt;Instead, Nextcloud now handles all internal collaboration and secure data management, while Microsoft Teams remains available specifically for external meetings (read: for people who haven't moved away from Teams).&lt;/p&gt;
    &lt;p&gt;The ministry also worked with Nextcloud partner Sendent to integrate with Outlook, allowing employees to continue using familiar email and calendar workflows.&lt;/p&gt;
    &lt;p&gt;As for the reasoning behind this move, it was prompted by a risk analysis that showed foreign cloud services failed to meet the ministry's privacy requirements, particularly regarding GDPR compliance and the upcoming NIS2 directive.&lt;/p&gt;
    &lt;p&gt;To ensure a smooth transition, BMWET invested heavily in preparing its workforce. The ministry ran an extensive information campaign that included training sessions, instructional videos, and a detailed internal wiki covering everything employees needed to know about the new platform.&lt;/p&gt;
    &lt;p&gt;The gradual rollout approach meant that employees had time to adjust rather than being thrown into a completely new system overnight. According to Martin Ollrom, BMWET's CIO, the preparation paid off. The response from employees has been quite positive, with minimal disruption to daily work.&lt;/p&gt;
    &lt;p&gt;During the announcement of this move, Florian Zinnagl, the CISO of BMWET, added that:&lt;/p&gt;
    &lt;quote&gt;We carry responsibility for a large amount of sensitive data – from employees, companies and citizens. As a public institution, we take this responsibility very seriously. That’s why we view it critically to rely on cloud solutions from non-European corporations for processing this information.&lt;/quote&gt;
    &lt;p&gt;Suggested Read 📖&lt;/p&gt;
    &lt;p&gt;- Even the biggest players in the Linux world don't care about desktop Linux users. We do.&lt;/p&gt;
    &lt;p&gt;- We don't put informational content behind paywall. Your support keeps it open for everyone. Think of it like 'pay it forward'.&lt;/p&gt;
    &lt;p&gt;- Don't like ads? With the Plus membership, you get an ad-free reading experience.&lt;/p&gt;
    &lt;p&gt;- When millions of AI-generated content is being published daily, you read and learn from real human Linux users.&lt;/p&gt;
    &lt;p&gt;- It costs just $2 a month, less than the cost of your favorite burger.&lt;/p&gt;
    &lt;p&gt;Become a Plus Member today and join over 300 people in supporting our work.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://news.itsfoss.com/austrian-ministry-kicks-out-microsoft/"/><published>2025-10-28T13:16:40+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45732552</id><title>Sick: Indexed deduplicated binary storage for JSON-like data structures</title><updated>2025-10-28T15:40:39.956459+00:00</updated><content>&lt;doc fingerprint="c06128154cd70790"&gt;
  &lt;main&gt;
    &lt;p&gt;&lt;code&gt;SICK&lt;/code&gt; is an approach to handle &lt;code&gt;JSON&lt;/code&gt;-like structures and various libraries implementing it.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;SICK&lt;/code&gt; as a library allows you to achieve the following:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Store &lt;code&gt;JSON&lt;/code&gt;-like data in efficient indexed binary form&lt;/item&gt;
      &lt;item&gt;Avoid reading and parsing whole &lt;code&gt;JSON&lt;/code&gt;files and access only the data you need just in time&lt;/item&gt;
      &lt;item&gt;Store multiple &lt;code&gt;JSON&lt;/code&gt;-like structures in one deduplicating storage&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;&lt;code&gt;SICK&lt;/code&gt; as a concept would also allow you:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Implement perfect streaming parsers for &lt;code&gt;JSON&lt;/code&gt;-like data&lt;/item&gt;
      &lt;item&gt;Efficiently stream updates for &lt;code&gt;JSON&lt;/code&gt;-like data&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;The tradeoff for these benefits is somehow more complicated and less efficient encoder.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;JSON&lt;/code&gt; has a Type-2 grammar and requires a pushdown automaton to parse it. So, it's not possible to implement efficient streaming parser for &lt;code&gt;JSON&lt;/code&gt;. Just imagine a huge hierarchy of nested &lt;code&gt;JSON&lt;/code&gt; objects: you won't be able to finish parsing the top-level object until you process the whole file.&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;JSON&lt;/code&gt; is frequently used to store and transfer large amounts of data and these transfers tend to grow over time. Just imagine a typical &lt;code&gt;JSON&lt;/code&gt; config file for a large enterprise product.&lt;/p&gt;
    &lt;p&gt;The non-streaming nature of almost all the JSON parsers requires a lot of work to be done every time you need to deserialize a huge chunk of &lt;code&gt;JSON&lt;/code&gt; data: you need to read it from disk, parse it in memory into an AST representation, and, usually, map raw &lt;code&gt;JSON&lt;/code&gt; tree to object instances. Even if you use token streams and know the type of your object ahead of time you still have to deal with the Type-2 grammar.&lt;/p&gt;
    &lt;p&gt;This may be very inefficient and causes unnecessary delays, pauses, CPU activity and memory consumption spikes.&lt;/p&gt;
    &lt;p&gt;Let's assume that we have a small &lt;code&gt;JSON&lt;/code&gt;:&lt;/p&gt;
    &lt;code&gt;[
    {"some key": "some value"},
    {"some key": "some value"},
    {"some value": "some key"},
]&lt;/code&gt;
    &lt;p&gt;Let's build a table for every unique value in our &lt;code&gt;JSON&lt;/code&gt; :&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;index&lt;/cell&gt;
        &lt;cell role="head"&gt;Value&lt;/cell&gt;
        &lt;cell role="head"&gt;Is Root&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;"some key"&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;"some value"&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;object&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;[string:0, string:1]&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;object&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;[string:1, string:0]&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;[object:0, object:0, object:1]&lt;/cell&gt;
        &lt;cell&gt;Yes (file.json)&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;We just built a flattened and deduplicated version of our initial &lt;code&gt;JSON&lt;/code&gt; structure.&lt;/p&gt;
    &lt;p&gt;Such representation allows us to do many different things, for example we may stream our table:&lt;/p&gt;
    &lt;code&gt;string:0 = "some key"
string:1 = "some value"

object:0.size = 2
object:0[string:0] = string:1
object:1[string:1] = string:0

array:0.size = 2
array:0[0] = object:0
array:0[1] = object:1

string:2 = "file.json"

root:0=array:0,string:2
&lt;/code&gt;
    &lt;p&gt;This particular encoding is inefficient but it's streamable and, moreover, we can add removal message into it thus supporting arbitrary updates:&lt;/p&gt;
    &lt;code&gt;array:0[0] = object:1
array:0[1] = remove
&lt;/code&gt;
    &lt;p&gt;There is an interesting observation: when a stream does not contain removal entries it can be safely reordered.&lt;/p&gt;
    &lt;p&gt;Also this representation eliminates many cases where full accumulation is required. Obviously, not all of them, the receiver still may need to accumulate the entries in a buffer until it can sort them out.&lt;/p&gt;
    &lt;p&gt;We may note that the only complex data structures in our "Value" column are lists and &lt;code&gt;(type, index)&lt;/code&gt; pairs. Let's call such pairs "references".&lt;/p&gt;
    &lt;p&gt;A reference can be represented as a pair of integers, so it would have a fixed byte length.&lt;/p&gt;
    &lt;p&gt;A list of references can be represented as an integer storing list length followed by all the references in their binary form. Let's note that such binary structure is indexed, once we know the index of an element we want to access we can do it immediately.&lt;/p&gt;
    &lt;p&gt;A list of any fixed-size scalar values can be represented the same way.&lt;/p&gt;
    &lt;p&gt;A list of variable-size values (e.g. a list of strings) can be represented the following way:&lt;/p&gt;
    &lt;code&gt;  {strings count}{list of string offsets}{all the strings concatenated}
&lt;/code&gt;
    &lt;p&gt;So, &lt;code&gt;["a", "bb", "ccc"]&lt;/code&gt; would become something like &lt;code&gt;3 0 2 3 a b bb ccc&lt;/code&gt; without spaces.&lt;/p&gt;
    &lt;p&gt;An important fact is that this encoding is indexed too and it can be reused to store any lists of variable-length data.&lt;/p&gt;
    &lt;p&gt;TODO: explain the overall EBA structure format, including tables, etc&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;SICK&lt;/code&gt; encoding follows compositional principles of &lt;code&gt;JSON&lt;/code&gt; (a set primitive types plus lists and dictionaries), though it is more powerful: it has "reference" type and allows you to encode custom types.&lt;/p&gt;
    &lt;p&gt;(1) It's easy to note that our table may store circular references, something &lt;code&gt;JSON&lt;/code&gt; can't do natively:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;index&lt;/cell&gt;
        &lt;cell role="head"&gt;Value&lt;/cell&gt;
        &lt;cell role="head"&gt;Is Root&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;object&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;[string:0, object:1]&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;object&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;[string:1, object:0]&lt;/cell&gt;
        &lt;cell&gt;No&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;This may be convenient in some complex cases.&lt;/p&gt;
    &lt;p&gt;(2) Also we may note, that we may happily store multiple json files in one table and have full deduplication over their content. We just need to introduce a separate attribute (&lt;code&gt;is root&lt;/code&gt;) storing either nothing or the name of our "root entry" (&lt;code&gt;JSON&lt;/code&gt; file).&lt;/p&gt;
    &lt;p&gt;In real implementation it's more convenient to just create a separate "root" type, the value of a root type should always be a reference to its name and a reference to the actual &lt;code&gt;JSON&lt;/code&gt; value we encoded:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="3"&gt;
        &lt;cell role="head"&gt;Type&lt;/cell&gt;
        &lt;cell role="head"&gt;index&lt;/cell&gt;
        &lt;cell role="head"&gt;Value&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;"some key"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;"some value"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;string&lt;/cell&gt;
        &lt;cell&gt;2&lt;/cell&gt;
        &lt;cell&gt;"some value"&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;object&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;[string:0, string,1]&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;object&lt;/cell&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;[string:1, string:0]&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="3"&gt;
        &lt;cell&gt;array&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;[object:0, object:0, object:1]&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;root&lt;/cell&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;[string:2, array:0]&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;(3) We may encode custom scalar data types (e.g. timestamps) natively just by introducing new type tags.&lt;/p&gt;
    &lt;p&gt;(4) We may even store polymorphic types by introducing new type tags or even new type references.&lt;/p&gt;
    &lt;p&gt;Currently we provide C# and Scala implementations of SICK indexed binary JSON storage. Currently the code in this repository has no streaming capabilities. That may change in the future. It's not a hard problem to add streaming support, your contributions are welcome. It's harder to create a streaming abstraction which would cover enough usecases to be useful for broad audience.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell role="head"&gt;Feature 🔧&lt;/cell&gt;
        &lt;cell role="head"&gt;Scala 🟣&lt;/cell&gt;
        &lt;cell role="head"&gt;C# 🔵&lt;/cell&gt;
        &lt;cell role="head"&gt;JS (ScalaJS) 🟡&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Binary Storage Encoder 💾&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Binary Storage Decoder 📥&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Cursors 🧭&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;✅&lt;/cell&gt;
        &lt;cell&gt;❌&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Stream Encoder 🌊&lt;/cell&gt;
        &lt;cell&gt;❌&lt;/cell&gt;
        &lt;cell&gt;❌&lt;/cell&gt;
        &lt;cell&gt;❌&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Stream Decoder 🌀&lt;/cell&gt;
        &lt;cell&gt;❌&lt;/cell&gt;
        &lt;cell&gt;❌&lt;/cell&gt;
        &lt;cell&gt;❌&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;Encoder AST 🌳&lt;/cell&gt;
        &lt;cell&gt;Circe&lt;/cell&gt;
        &lt;cell&gt;JSON.Net&lt;/cell&gt;
        &lt;cell&gt;JS Objects/Json&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;Decoder AST 🌿&lt;/cell&gt;
        &lt;cell&gt;Circe&lt;/cell&gt;
        &lt;cell&gt;Custom&lt;/cell&gt;
        &lt;cell&gt;JS Objects/Json&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;A type marker is represented as a single-byte unsigned integer. The possible values are:&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="6"&gt;
        &lt;cell role="head"&gt;Marker&lt;/cell&gt;
        &lt;cell role="head"&gt;Name&lt;/cell&gt;
        &lt;cell role="head"&gt;Comment&lt;/cell&gt;
        &lt;cell role="head"&gt;Value Length (bytes)&lt;/cell&gt;
        &lt;cell role="head"&gt;C# mapping&lt;/cell&gt;
        &lt;cell role="head"&gt;Scala Mapping&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;0&lt;/cell&gt;
        &lt;cell&gt;TNul&lt;/cell&gt;
        &lt;cell&gt;Equivalent to &lt;code&gt;null&lt;/code&gt; in JSON&lt;/cell&gt;
        &lt;cell&gt;4, stored in the marker&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;1&lt;/cell&gt;
        &lt;cell&gt;TBit&lt;/cell&gt;
        &lt;cell&gt;Boolean&lt;/cell&gt;
        &lt;cell&gt;4, stored in the marker&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;2&lt;/cell&gt;
        &lt;cell&gt;TByte&lt;/cell&gt;
        &lt;cell&gt;Byte,&lt;/cell&gt;
        &lt;cell&gt;4, stored in the marker&lt;/cell&gt;
        &lt;cell&gt;byte (unsigned)&lt;/cell&gt;
        &lt;cell&gt;Byte (signed)&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;3&lt;/cell&gt;
        &lt;cell&gt;TShort&lt;/cell&gt;
        &lt;cell&gt;Signed 16-bit integer&lt;/cell&gt;
        &lt;cell&gt;4, stored in the marker&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;4&lt;/cell&gt;
        &lt;cell&gt;TInt&lt;/cell&gt;
        &lt;cell&gt;Signed 32-bit integer&lt;/cell&gt;
        &lt;cell&gt;4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;5&lt;/cell&gt;
        &lt;cell&gt;TLng&lt;/cell&gt;
        &lt;cell&gt;Signed 64-bit integer&lt;/cell&gt;
        &lt;cell&gt;8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;6&lt;/cell&gt;
        &lt;cell&gt;TBigInt&lt;/cell&gt;
        &lt;cell&gt;Variable, prefixed&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;7&lt;/cell&gt;
        &lt;cell&gt;TDbl&lt;/cell&gt;
        &lt;cell&gt;8&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;8&lt;/cell&gt;
        &lt;cell&gt;TFlt&lt;/cell&gt;
        &lt;cell&gt;4&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;9&lt;/cell&gt;
        &lt;cell&gt;TBigDec&lt;/cell&gt;
        &lt;cell&gt;Variable, prefixed&lt;/cell&gt;
        &lt;cell&gt;Custom: scale/precision/signum/unscaled quadruple in C#&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;10&lt;/cell&gt;
        &lt;cell&gt;TStr&lt;/cell&gt;
        &lt;cell&gt;UTF-8 String&lt;/cell&gt;
        &lt;cell&gt;Variable, prefixed&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;11&lt;/cell&gt;
        &lt;cell&gt;TArr&lt;/cell&gt;
        &lt;cell&gt;List of array entries&lt;/cell&gt;
        &lt;cell&gt;Variable, prefixed&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="6"&gt;
        &lt;cell&gt;12&lt;/cell&gt;
        &lt;cell&gt;TObj&lt;/cell&gt;
        &lt;cell&gt;List of object entries&lt;/cell&gt;
        &lt;cell&gt;Variable, prefixed&lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;15&lt;/cell&gt;
        &lt;cell&gt;TRoot&lt;/cell&gt;
        &lt;cell&gt;Index of the name string (4 bytes) + reference (4+1=5 bytes)&lt;/cell&gt;
        &lt;cell&gt;9&lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;Array entries are just references.&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;TODO&lt;/p&gt;
    &lt;p&gt;Current implementation has the following limitations:&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;Maximum object size: &lt;code&gt;65534&lt;/code&gt;keys&lt;/item&gt;
      &lt;item&gt;The order of object keys is not preserved&lt;/item&gt;
      &lt;item&gt;Maximum amount of array elements: &lt;code&gt;2^32&lt;/code&gt;&lt;/item&gt;
      &lt;item&gt;Maximum amount of unique values of the same type: &lt;code&gt;2^32&lt;/code&gt;&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;These limitations may be lifted by using more bytes to store offset pointers and counts on binary level. Though it's hard to imagine a real application which would need that, a large structure can always be split into smaller chunks at client side.&lt;/p&gt;
    &lt;list rend="ol"&gt;
      &lt;item&gt;SICK is battle-tested and covered by "good enough" test suite which includes cross-implementation correctness tests (C#&amp;lt;-&amp;gt;Scala).&lt;/item&gt;
      &lt;item&gt;SICK powers several proprietary applications running on mobile devices and in the browser, some of which have large userbases (hundreds of thousands DAU).&lt;/item&gt;
      &lt;item&gt;No known open source users as of Oct/2025.&lt;/item&gt;
      &lt;item&gt;More implementations for various platforms are needed, 3rd party implementations are very welcome.&lt;/item&gt;
    &lt;/list&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://github.com/7mind/sick"/><published>2025-10-28T13:22:24+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45732670</id><title>Vitamin D reduces incidence and duration of colds in those with low levels</title><updated>2025-10-28T15:40:38.555615+00:00</updated><content>&lt;doc fingerprint="f641e1322ca941d2"&gt;
  &lt;main&gt;
    &lt;p&gt;Background: Acute respiratory infections (ARIs) remain among the most common causes of morbidity and mortality worldwide, particularly in children, the elderly, and immunocompromised individuals. Emerging evidence suggests that vitamin D, beyond its classical role in calcium–phosphate homeostasis, exerts immunomodulatory effects by enhancing innate immune responses and modulating inflammatory pathways. Previous observational and meta-analytic studies have indicated an inverse relationship between serum 25-hydroxyvitamin D [25(OH)D] levels and susceptibility to respiratory infections. However, inconsistencies persist due to heterogeneity in populations, baseline vitamin D status, and dosage regimens.&lt;/p&gt;
    &lt;p&gt;Objectives: This study aimed to evaluate whether daily vitamin D supplementation reduces the incidence, duration, and severity of acute respiratory infections compared with placebo among adults with suboptimal baseline 25(OH)D levels. Secondary objectives included assessing changes in serum vitamin D concentrations and evaluating any adverse effects associated with supplementation.&lt;/p&gt;
    &lt;p&gt;Methods: This double-blind randomized controlled trial was conducted at a tertiary care hospital between January 2023 and March 2024. A total of 400 participants aged 18–65 years with baseline 25(OH)D levels between 10 and 30 ng/mL were randomly assigned into two groups: the intervention group (n = 200) received vitamin D₃ supplementation (2,000 IU daily), and the placebo group (n = 200) received identical capsules without active ingredient, for six months. Incidence of ARIs was documented through monthly follow-up visits and self-reported symptom diaries validated by physician assessment. Primary outcome was the number of ARI episodes per participant over the study period; secondary outcomes included mean duration of illness, symptom severity score, and serum 25(OH)D changes. Statistical analysis employed chi-square and independent t-tests, with significance set at p &amp;lt; 0.05.&lt;/p&gt;
    &lt;p&gt;Results: Of 400 randomized participants, 386 completed the trial (intervention = 193; placebo = 193). Mean baseline 25(OH)D levels were 21.6 ± 5.1 ng/mL in both groups. After six months, the intervention group exhibited a significant rise in mean 25(OH)D levels (to 38.9 ± 6.2 ng/mL; p &amp;lt; 0.001) compared with minimal change in the placebo group (22.4 ± 5.3 ng/mL). The incidence of ARI episodes was significantly lower in the vitamin D group (0.68 ± 0.9 per person) versus placebo (1.43 ± 1.2 per person; p &amp;lt; 0.001). Additionally, the mean duration of symptoms was shorter (4.1 ± 1.8 days vs. 6.3 ± 2.5 days; p &amp;lt; 0.001), and symptom severity scores were reduced. No serious adverse events or cases of hypercalcemia were observed.&lt;/p&gt;
    &lt;p&gt;Conclusion: Daily supplementation with 2,000 IU of vitamin D₃ significantly reduced both the incidence and duration of acute respiratory infections among adults with suboptimal baseline vitamin D levels, suggesting a protective immunomodulatory role. These findings support routine assessment and correction of vitamin D deficiency as a feasible public health strategy to mitigate respiratory infection burden, especially in at-risk populations.&lt;/p&gt;
    &lt;p&gt;Acute respiratory infections (ARIs) continue to represent one of the most pervasive public health challenges globally, accounting for substantial morbidity, hospitalization, and mortality across all age groups. According to the World Health Organization, ARIs are responsible for nearly 20% of global deaths in children under five years of age, with a rising burden among adults, particularly those with underlying chronic diseases and compromised immunity. In low- and middle-income countries, frequent viral and bacterial respiratory infections further strain healthcare resources and lead to significant socioeconomic consequences.&lt;/p&gt;
    &lt;p&gt;Over the past two decades, increasing attention has been directed toward the non-skeletal actions of vitamin D, particularly its immunomodulatory potential in preventing infectious diseases. Vitamin D is a secosteroid hormone synthesized in the skin upon ultraviolet B radiation exposure and obtained from dietary sources or supplements [1]. The active form, 1,25-dihydroxyvitamin D [1,25(OH)₂D], interacts with the vitamin D receptor (VDR) expressed on immune cells such as macrophages, dendritic cells, and T lymphocytes. This interaction enhances innate immune defense by inducing antimicrobial peptides like cathelicidin and defensins, which disrupt the membranes of respiratory pathogens. Moreover, vitamin D modulates adaptive immunity by suppressing excessive pro-inflammatory cytokine release, thus reducing tissue damage during infection [2].&lt;/p&gt;
    &lt;p&gt;Multiple epidemiological and mechanistic studies have demonstrated an association between low serum 25-hydroxyvitamin D [25(OH)D] levels and increased susceptibility to respiratory tract infections [3]. For instance, Martineau et al. (2017) conducted a meta-analysis of 25 randomized controlled trials encompassing over 11,000 participants, which revealed that vitamin D supplementation reduced the risk of ARIs, especially among individuals with severe deficiency (&amp;lt;10 ng/mL) and those receiving daily or weekly dosing. Similarly, other cohort and observational studies have linked seasonal variations in vitamin D levels with peaks in influenza and common cold incidence during winter months, suggesting a possible causal relationship [4].&lt;/p&gt;
    &lt;p&gt;Nevertheless, despite these promising observations, inconsistencies persist in the literature. Several randomized controlled trials have yielded null or inconclusive findings, often attributed to differences in baseline vitamin D status, supplementation doses, dosing intervals, duration of follow-up, and participant demographics [5]. Furthermore, the optimal serum concentration required for immune protection remains debatable, with thresholds ranging from 20 to 40 ng/mL proposed by various authorities. The clinical relevance of vitamin D supplementation for respiratory health therefore warrants rigorous evaluation through well-designed controlled trials that account for these confounding variables [6].&lt;/p&gt;
    &lt;p&gt;The biological plausibility of vitamin D’s protective role against respiratory infections is supported by its ability to regulate both innate and adaptive immune responses. By enhancing macrophage phagocytic activity and promoting epithelial barrier integrity, vitamin D reduces viral replication and bacterial adherence [7]. Simultaneously, it attenuates the cytokine storm commonly implicated in severe respiratory infections by downregulating IL-6, TNF-α, and IFN-γ while promoting anti-inflammatory IL-10 production. Such dual regulation is of particular importance in conditions like influenza, COVID-19, and community-acquired pneumonia, where exaggerated inflammation contributes to morbidity and mortality.&lt;/p&gt;
    &lt;p&gt;Given these immunological mechanisms and the persistent global prevalence of vitamin D deficiency, investigating whether daily vitamin D supplementation confers measurable protection against ARIs remains a question of high clinical and public health significance&lt;/p&gt;
    &lt;p&gt;Therefore, it is of interest to evaluate the efficacy of daily vitamin D supplementation in reducing the incidence, duration, and severity of acute respiratory infections among adults with suboptimal baseline vitamin D levels through a double-blind randomized controlled trial.&lt;/p&gt;
    &lt;p&gt;MATERIALS AND METHODS&lt;/p&gt;
    &lt;p&gt;Study Design and Setting&lt;/p&gt;
    &lt;p&gt;This study was designed as a double-blind, randomized, placebo-controlled trial conducted at the Department of Internal Medicine, a tertiary care teaching hospital in India, between January 2023 and March 2024. The study protocol was approved by the Institutional Ethics Committee and registered with the Clinical Trials Registry of India. Written informed consent was obtained from all participants before enrolment. The trial was conducted in accordance with the Declaration of Helsinki (2013 revision) and Good Clinical Practice (GCP) guidelines.&lt;/p&gt;
    &lt;p&gt;Study Population&lt;/p&gt;
    &lt;p&gt;A total of 400 adult participants aged between 18 and 65 years were enrolled. Recruitment was conducted from hospital outpatient clinics, staff volunteers, and community health outreach programs. Eligible participants were required to have baseline serum 25-hydroxyvitamin D [25(OH)D] concentrations between 10 and 30 ng/mL, indicating insufficiency but not severe deficiency.&lt;/p&gt;
    &lt;p&gt;Inclusion Criteria&lt;/p&gt;
    &lt;p&gt;Exclusion Criteria&lt;/p&gt;
    &lt;p&gt;Randomization and Blinding&lt;/p&gt;
    &lt;p&gt;Participants meeting the inclusion criteria were randomized using a computer-generated block randomization sequence (block size = 10) into two equal groups:&lt;/p&gt;
    &lt;p&gt;Randomization codes were maintained by an independent statistician not involved in data collection or analysis. Both participants and investigators were blinded to group allocation throughout the study period. Capsules were dispensed monthly in identical opaque blister packs.&lt;/p&gt;
    &lt;p&gt;Intervention Protocol&lt;/p&gt;
    &lt;p&gt;The intervention group received vitamin D₃ (cholecalciferol) 2,000 IU daily for six months, while the placebo group received identical capsules devoid of active ingredients. Participants were advised to maintain their usual diet and avoid other vitamin D supplements or fortified products. Adherence was assessed at monthly follow-ups through capsule counts and compliance diaries.&lt;/p&gt;
    &lt;p&gt;Outcome Measures&lt;/p&gt;
    &lt;p&gt;The primary outcome was the number of acute respiratory infection (ARI) episodes per participant over six months. ARI was defined as the presence of at least two respiratory symptoms (e.g., cough, sore throat, nasal congestion, dyspnea, or fever ≥38°C) lasting 48 hours or more, confirmed by a physician.&lt;/p&gt;
    &lt;p&gt;Secondary outcomes included:&lt;/p&gt;
    &lt;p&gt;Sample Size Calculation&lt;/p&gt;
    &lt;p&gt;The sample size was estimated using the formula for comparing two means, assuming a 25% reduction in ARI incidence with vitamin D supplementation, 80% power, 5% alpha error, and a 10% attrition rate. The minimum sample required per group was 180 participants, which was increased to 200 per group (total n = 400) to ensure adequate power.&lt;/p&gt;
    &lt;p&gt;Data Collection Procedure&lt;/p&gt;
    &lt;p&gt;Baseline demographic and clinical information, including age, sex, BMI, lifestyle factors (sunlight exposure, diet, smoking), and comorbidities, were recorded using a structured case record form. Participants maintained symptom diaries for ARI episodes, which were validated by study physicians during monthly visits. Serum 25(OH)D and serum calcium were measured using chemiluminescence immunoassay (CLIA) at baseline and after six months.&lt;/p&gt;
    &lt;p&gt;Statistical Analysis&lt;/p&gt;
    &lt;p&gt;Data were analyzed using SPSS version 26.0 (IBM Corp, USA). Descriptive statistics were expressed as mean ± standard deviation (SD) or frequencies (%). Between-group comparisons were performed using the independent samples t-test for continuous variables and the chi-square test for categorical variables. Repeated measures analysis of variance (ANOVA) was used to evaluate longitudinal changes in serum vitamin D levels. A p-value less than 0.05 was considered statistically significant.&lt;/p&gt;
    &lt;p&gt;Ethical Considerations and Safety Monitoring&lt;/p&gt;
    &lt;p&gt;All adverse events were recorded and reviewed by an independent Data and Safety Monitoring Board (DSMB). Participants developing hypercalcemia (&amp;gt;10.5 mg/dL) or reporting persistent side effects were withdrawn from the study and appropriately managed.&lt;/p&gt;
    &lt;p&gt;RESULTS&lt;/p&gt;
    &lt;p&gt;A total of 400 participants were enrolled in the study and randomized equally into two groups: vitamin D₃ supplementation (n = 200) and placebo (n = 200). Fourteen participants (7 from each group) were lost to follow-up, leaving 386 participants (193 per group) for final analysis. Baseline demographic and clinical characteristics were comparable between groups. The mean baseline serum 25-hydroxyvitamin D [25(OH)D] concentration was 21.6 ± 5.1 ng/mL across all participants. After six months of intervention, the mean serum 25(OH)D level significantly increased in the vitamin D group but remained nearly unchanged in the placebo group. The incidence and duration of acute respiratory infections (ARIs) were significantly lower among participants receiving vitamin D supplementation. No serious adverse events, including hypercalcemia, were observed in either group.&lt;/p&gt;
    &lt;p&gt;Table 1: Baseline Demographic Characteristics of Study Participants&lt;/p&gt;
    &lt;p&gt;This table presents demographic data, including age, sex, and BMI, demonstrating comparability between groups at baseline.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Variable&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group (n = 193)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group (n = 193)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Mean Age (years)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;39.8 ± 12.1&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;40.2 ± 11.7&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.74&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Male : Female ratio&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;97 : 96&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;98 : 95&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.88&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Mean BMI (kg/m²)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;24.6 ± 3.2&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;24.8 ± 3.4&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.59&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Urban residence (%)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;63.7&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;61.1&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.61&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 2: Baseline Serum Vitamin D and Calcium Levels&lt;/p&gt;
    &lt;p&gt;This table shows biochemical baseline levels before intervention initiation.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Parameter&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;25(OH)D (ng/mL)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;21.5 ± 5.0&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;21.7 ± 5.2&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.82&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Serum Calcium (mg/dL)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;9.3 ± 0.5&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;9.2 ± 0.4&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.37&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 3: Change in Serum 25(OH)D Levels After Six Months&lt;/p&gt;
    &lt;p&gt;This table displays the significant rise in serum vitamin D levels following supplementation.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Timepoint&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Baseline&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;21.5 ± 5.0&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;21.7 ± 5.2&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.82&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;6 Months&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;38.9 ± 6.2&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;22.4 ± 5.3&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;&amp;lt;0.001&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 4: Incidence of Acute Respiratory Infections (ARIs)&lt;/p&gt;
    &lt;p&gt;This table summarizes ARI occurrence per participant.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Outcome&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Participants with ≥1 ARI episode (%)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;29.5&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;58.5&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;&amp;lt;0.001&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Mean ARI episodes per participant&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.68 ± 0.9&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;1.43 ± 1.2&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;&amp;lt;0.001&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 5: Duration of ARI Episodes (in Days)&lt;/p&gt;
    &lt;p&gt;This table compares mean illness duration between the two groups.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Variable&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Mean duration per episode (days)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;4.1 ± 1.8&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;6.3 ± 2.5&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;&amp;lt;0.001&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 6: Symptom Severity Scores (0–10 Visual Analogue Scale)&lt;/p&gt;
    &lt;p&gt;This table demonstrates reduced symptom intensity with supplementation.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Symptom Severity&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Mean severity score&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;3.8 ± 1.2&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;5.9 ± 1.8&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;&amp;lt;0.001&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 7: Seasonal Distribution of ARI Episodes&lt;/p&gt;
    &lt;p&gt;This table outlines ARI occurrence across different seasons.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Season&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group (%)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group (%)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Winter&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;44.0&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;61.1&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.008&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Summer&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;27.4&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;18.6&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.06&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Monsoon&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;28.6&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;20.3&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.09&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 8: Compliance with Study Supplementation&lt;/p&gt;
    &lt;p&gt;This table reports participant adherence to prescribed supplementation.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Compliance Rate&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group (%)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group (%)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;≥90% adherence&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;92.7&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;91.2&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.64&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;75–89% adherence&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;6.2&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;7.3&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;—&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;&amp;lt;75% adherence&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;1.1&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;1.5&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;—&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 9: Incidence of Adverse Events&lt;/p&gt;
    &lt;p&gt;This table shows that no major adverse reactions were reported.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Adverse Event&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group (n, %)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group (n, %)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Mild GI discomfort&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;5 (2.6)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;6 (3.1)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.77&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Headache&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;3 (1.5)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;4 (2.1)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.70&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Hypercalcemia&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;—&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 10: Serum Calcium Levels After Six Months&lt;/p&gt;
    &lt;p&gt;This table confirms biochemical safety regarding calcium metabolism.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Parameter&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Serum Calcium (mg/dL)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;9.4 ± 0.6&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;9.2 ± 0.5&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.09&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 11: Subgroup Analysis by Baseline Vitamin D Status&lt;/p&gt;
    &lt;p&gt;This table compares ARI incidence according to initial 25(OH)D strata.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;Baseline 25(OH)D (ng/mL)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group ARI Episodes (mean ± SD)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group ARI Episodes (mean ± SD)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="4"&gt;
        &lt;cell&gt;
          &lt;p&gt;10–20&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.74 ± 1.0&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;1.58 ± 1.2&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;&amp;lt;0.001&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;21–30&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.61 ± 0.8&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;1.27 ± 1.1&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;&amp;lt;0.001&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 12: Summary of Primary and Secondary Outcomes&lt;/p&gt;
    &lt;p&gt;This table provides an overall summary of intervention outcomes.&lt;/p&gt;
    &lt;table&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;p&gt;Outcome&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Vitamin D Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Placebo Group&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;p-value&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;Effect Size&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;p&gt;Mean ARI episodes&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.68 ± 0.9&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;1.43 ± 1.2&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;&amp;lt;0.001&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.42&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row span="5"&gt;
        &lt;cell&gt;
          &lt;p&gt;Mean duration (days)&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;4.1 ± 1.8&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;6.3 ± 2.5&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;&amp;lt;0.001&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.56&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
      &lt;row&gt;
        &lt;cell&gt;
          &lt;p&gt;Mean symptom score&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;3.8 ± 1.2&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;5.9 ± 1.8&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;&amp;lt;0.001&lt;/p&gt;
        &lt;/cell&gt;
        &lt;cell&gt;
          &lt;p&gt;0.48&lt;/p&gt;
        &lt;/cell&gt;
      &lt;/row&gt;
    &lt;/table&gt;
    &lt;p&gt;Table 1 established that both groups were demographically similar, ruling out confounding baseline variability. Table 2 confirmed equivalence in baseline biochemical parameters, ensuring internal validity. Table 3 revealed a statistically significant increase in serum 25(OH)D in the intervention group, confirming effective absorption and adherence. Table 4 demonstrated that vitamin D supplementation significantly reduced ARI incidence, while Table 5 and Table 6 highlighted reductions in both illness duration and symptom severity, indicating improved clinical recovery. Table 7 suggested that protective effects were particularly notable during winter months when baseline vitamin D levels were lowest. Table 8 reflected high compliance rates across both groups, strengthening data reliability. Table 9 and Table 10 confirmed the safety of daily supplementation without biochemical abnormalities. Table 11 revealed that participants with lower baseline vitamin D benefited most, supporting dose-responsiveness. Finally, Table 12 consolidated these findings, showing strong statistical significance across all primary and secondary endpoints, thereby reinforcing the preventive efficacy and safety of daily vitamin D₃ supplementation in reducing acute respiratory infection burden.&lt;/p&gt;
    &lt;p&gt;DISCUSSION&lt;/p&gt;
    &lt;p&gt;This double-blind randomized controlled trial was conducted to evaluate the efficacy of daily vitamin D₃ supplementation in preventing acute respiratory infections (ARIs) among adults with suboptimal baseline serum 25-hydroxyvitamin D levels [8]. The findings of this study demonstrate a statistically and clinically significant reduction in both the incidence and duration of ARIs in participants who received daily vitamin D supplementation compared to those who received placebo. Moreover, the supplementation regimen was safe and well-tolerated, with no reported cases of hypercalcemia or major adverse effects [9].&lt;/p&gt;
    &lt;p&gt;The results corroborate and extend the growing body of evidence that implicates vitamin D as a key immunomodulatory factor influencing susceptibility to respiratory infections. The significant rise in mean serum 25(OH)D concentration from approximately 21.5 ng/mL to 38.9 ng/mL among supplemented participants indicates that the dosage of 2,000 IU/day was adequate to restore and maintain sufficient vitamin D status [10]. This biochemical improvement was associated with a 52% reduction in the incidence of ARI episodes and a 35% reduction in mean illness duration, consistent with mechanistic evidence that vitamin D enhances host defense by upregulating antimicrobial peptides and modulating inflammatory cytokine profiles [11].&lt;/p&gt;
    &lt;p&gt;Several previous trials and meta-analyses have reported similar trends. Martineau et al. (2017) in a pooled analysis of 25 randomized controlled trials involving over 11,000 participants found that vitamin D supplementation reduced the risk of ARI by 12%, with the greatest benefits observed in those with baseline deficiency and in trials employing daily or weekly dosing rather than large intermittent boluses [4]. The current study supports this conclusion by using a daily regimen, which likely provided a more stable serum concentration conducive to immune regulation. Furthermore, the magnitude of protection observed here (about 50% risk reduction) is higher than average meta-analytic estimates, possibly due to the relatively homogeneous baseline deficiency status of the participants and consistent compliance achieved under supervised clinical monitoring [12,13]. The immunological rationale underlying these findings has been well established. Vitamin D receptor (VDR) activation in immune cells stimulates transcription of antimicrobial peptides such as cathelicidin and β-defensin-2, enhancing mucosal defense against respiratory pathogens. Concurrently, vitamin D attenuates the exaggerated pro-inflammatory response often seen in severe viral infections by downregulating interleukin-6 (IL-6) and tumor necrosis factor-alpha (TNF-α) while promoting anti-inflammatory interleukin-10 (IL-10) [14]. This dual role helps maintain epithelial integrity, reduce viral replication, and limit collateral tissue injury mechanisms that together contribute to reduced infection frequency and symptom severity as observed in this trial [15].&lt;/p&gt;
    &lt;p&gt;In addition, the seasonal distribution analysis demonstrated that the preventive effect of vitamin D supplementation was most pronounced during winter, a period typically associated with lower ultraviolet B exposure and consequently reduced endogenous vitamin D synthesis. This observation reinforces the concept of seasonal susceptibility mediated by vitamin D fluctuations and supports the potential for targeted supplementation during months of reduced sunlight exposure [16]. From a safety perspective, the supplementation dose of 2,000 IU/day proved to be well within the tolerable upper intake level and did not induce hypercalcemia or adverse metabolic effects. Previous safety evaluations have confirmed that daily doses up to 4,000 IU are generally safe for healthy adults, and the current findings further substantiate that moderate-dose continuous supplementation provides effective immune benefits without toxicity risks [17]. The findings also hold significant implications for public health policy. Vitamin D deficiency remains highly prevalent in India and other low-latitude countries despite abundant sunlight, largely due to indoor lifestyles, clothing habits, skin pigmentation, and dietary insufficiency. The observed preventive benefit against ARIs suggests that correcting this deficiency through safe, low-cost supplementation could represent a practical strategy to reduce the overall burden of respiratory illness, lower antibiotic use, and minimize productivity loss due to frequent infections. In addition, during global pandemics such as COVID-19, adequate vitamin D status may serve as an adjunctive protective measure, given its established immunomodulatory effects and the observed associations between low vitamin D levels and adverse respiratory outcomes [18]. Despite these encouraging findings, several limitations must be acknowledged. First, the study population was limited to adults aged 18–65 years without chronic comorbidities, and the results may not be generalizable to pediatric, geriatric, or immunocompromised populations. Second, ARI diagnosis was based on clinical criteria rather than microbiological confirmation, though this approach reflects real-world community practice [19]. Third, while serum 25(OH)D was measured at baseline and at the end of the study, intermediate assessments might have provided greater insight into the temporal relationship between vitamin D levels and infection dynamics. Lastly, the six-month follow-up period may not capture long-term sustainability of the preventive effect [20].&lt;/p&gt;
    &lt;p&gt;Nevertheless, the study’s strengths include its robust randomized double-blind design, large sample size, strict adherence monitoring, standardized outcome definitions, and comprehensive statistical analysis. The use of a daily dosing schedule with a physiologically relevant dose enhances external validity and clinical applicability. Importantly, the trial demonstrated a consistent pattern of benefit across subgroups stratified by baseline vitamin D levels, indicating that individuals with both moderate and mild deficiency may derive measurable advantage from supplementation.&lt;/p&gt;
    &lt;p&gt;In summary, the present study provides strong evidence that daily oral vitamin D₃ supplementation at 2,000 IU effectively prevents acute respiratory infections, shortens illness duration, and reduces symptom severity in adults with low baseline vitamin D status. The findings emphasize the potential of vitamin D optimization as a simple, safe, and scalable preventive intervention against respiratory infections.&lt;/p&gt;
    &lt;p&gt;Future research should focus on evaluating long-term benefits, cost-effectiveness analyses, and implementation strategies for population-level supplementation programs. Moreover, trials including high-risk groups such as elderly individuals, healthcare workers, and patients with chronic lung disease could further refine dosage recommendations and optimize preventive strategies for different demographic categories.&lt;/p&gt;
    &lt;p&gt;CONCLUSION&lt;/p&gt;
    &lt;p&gt;This double-blind randomized controlled trial demonstrates that daily supplementation with 2,000 IU of vitamin D₃ significantly reduces the incidence, duration, and severity of acute respiratory infections among adults with suboptimal baseline serum 25(OH)D levels. The intervention effectively raised serum vitamin D concentrations without causing adverse effects, underscoring both its efficacy and safety. These results highlight the immunoprotective potential of maintaining adequate vitamin D status and suggest that routine screening and supplementation could serve as a cost-effective preventive measure to mitigate the burden of respiratory infections in the general adult population. Broader implementation of vitamin D supplementation programs, especially during winter months and in populations with high deficiency prevalence, may substantially improve community respiratory health outcomes.&lt;/p&gt;
    &lt;p&gt;REFERENCES&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://ijmpr.in/article/the-role-of-vitamin-d-supplementation-in-the-prevention-of-acute-respiratory-infections-a-double-blind-randomized-controlled-trial-1327/"/><published>2025-10-28T13:31:52+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45732874</id><title>Ubiquiti SFP Wizard</title><updated>2025-10-28T15:40:38.289859+00:00</updated><content>&lt;doc fingerprint="3c59fc34fdb3c565"&gt;
  &lt;main&gt;
    &lt;p&gt;Welcome to SFP Liberation Day, the celebration of open SFP connectivity powered by the all-new SFP Wizard. Designed for networking professionals who value speed, precision, and simplicity, this compact and portable device gives you full control over your fiber modules. From diagnostics to programming, it's built to make your installation workflow smoother and smarter.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://blog.ui.com/article/welcome-to-sfp-liberation-day"/><published>2025-10-28T13:48:51+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45733197</id><title>Washington Post editorials omit a key disclosure: Bezos' financial ties</title><updated>2025-10-28T15:40:37.793739+00:00</updated><content>&lt;doc fingerprint="264cf0d052ba2068"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;'Washington Post' editorials omit a key disclosure: Bezos' financial ties&lt;/head&gt;
    &lt;p&gt;A year ago, in explaining why he had blocked the publication of an endorsement of Democratic presidential nominee Kamala Harris, Washington Post owner and Amazon founder Jeff Bezos conceded that "When it comes to the appearance of conflict, I am not an ideal owner of The Post."&lt;/p&gt;
    &lt;p&gt;On at least three occasions in the past two weeks, an official Post editorial has taken on matters in which Bezos has a financial or corporate interest without noting his stake. In each case, the Post's official editorial line landed in sync with its owner's financial interests.&lt;/p&gt;
    &lt;p&gt;In the most recent instance, the Post defended President Trump's jaw-dropping moves to raze the East Wing of the White House without any of the typically required studies or consultations as he seeks to build a vast ballroom. "Trump's undertaking is a shot across the bow at NIMBYs everywhere," the Post wrote in its editorial, which first appeared online Saturday.&lt;/p&gt;
    &lt;p&gt;As the White House had announced, Amazon was a major corporate contributor in helping to defray those costs. But the Post did not initially disclose that.&lt;/p&gt;
    &lt;p&gt;On Sunday, the newspaper inserted an acknowledgement of the Amazon donation into the editorial – but only once the veteran news executive Bill Grueskin, now at the Columbia Graduate School of Journalism, noted its absence in a social media post and made inquiries at the paper. It did not flag the alteration for readers.&lt;/p&gt;
    &lt;p&gt;In his posts, Grueskin, a former top news editor at the Wall Street Journal and Bloomberg, had written the editorial's fundamental reasoning "illustrates the collapse of the new Washpost Opinion page" and noted there was "no clarification or correction appended to the piece."&lt;/p&gt;
    &lt;p&gt;The Post and its new opinions editor, Adam O'Neal, did not reply to detailed requests for comment for this story.&lt;/p&gt;
    &lt;head rend="h3"&gt;A new editor for an overhauled opinion section&lt;/head&gt;
    &lt;p&gt;O'Neal was brought in by Bezos this summer after the corporate titan tore up his paper's opinion section.&lt;/p&gt;
    &lt;p&gt;Bezos said he wanted a tight focus on two priorities: personal liberties and free markets. The top opinion page editor resigned. A raft of prominent columnists and contributors resigned or departed as well. Some were let go.&lt;/p&gt;
    &lt;p&gt;The decision to cancel the Harris editorial led to more than 300,000 cancellations by digital subscribers. The subsequent changes in the editorial pages led to 75,000 more. Bezos' Amazon contributed $1 million toward the Trump inauguration; its video streaming service Amazon Prime paid $40 million to license a documentary about first lady Melania Trump. The Wall Street Journal reported she is to receive the lion's share of that fee.&lt;/p&gt;
    &lt;p&gt;For the newspaper's owner to have outside business holdings or activities that might intersect with coverage or commentary is conventionally seen to present at the least a perception of a conflict of interest. Newspapers typically manage the perception with transparency.&lt;/p&gt;
    &lt;p&gt;The Post has resolutely revealed such entanglements to readers of news coverage or commentary in the past, whether the Graham family's holdings, which included the Stanley Kaplan educational company and Slate magazine, or, since 2013, those of Bezos, who founded Amazon and Blue Origin. Even now, the newspaper's reporters do so as a matter of routine.&lt;/p&gt;
    &lt;head rend="h3"&gt;Former editor: 'We never knowingly failed to disclose'&lt;/head&gt;
    &lt;p&gt;"Believing very fervently that disclosure resolved a lot of concerns, we never knowingly failed to disclose" such conflicts, Ruth Marcus, a former deputy editorial page editor at the Washington Post, tells NPR.&lt;/p&gt;
    &lt;p&gt;Marcus resigned earlier this year, saying Publisher Will Lewis had killed a column she wrote on changes in the page's direction. She wrote in her resignation letter that Bezos' edict that the page would not include opposing viewpoints "threatens to break the trust of readers that columnists are writing what they believe, not what the owner has deemed acceptable."&lt;/p&gt;
    &lt;p&gt;Two separate but recent incidents suggest the lack of disclosure on the editorial about the White House renovations was not an isolated case.&lt;/p&gt;
    &lt;p&gt;On Oct. 15, the Post heralded the military's push for a new generation of smaller nuclear reactors. "No 'microreactor' currently operates in the United States, but it's a worthy gamble that could provide benefits far beyond its military applications," the Post wrote in its editorial.&lt;/p&gt;
    &lt;p&gt;A year ago, Amazon bought a stake in X-energy to develop small nuclear reactors to power its data centers. And through his own private investment fund, Bezos has a stake in a Canadian venture seeking nuclear fusion technology.&lt;/p&gt;
    &lt;p&gt;Three days after the nuclear power editorial, the Post weighed in on the need for local authorities in Washington, D.C., to speed the approval of the use of self-driving cars in the nation's capital. The editorial was headlined: "Why D.C. is stalling on self-driving cars: Safety is a phony excuse for slamming the brakes on autonomous vehicles."&lt;/p&gt;
    &lt;p&gt;Fewer than three weeks before, the Amazon-owned autonomous car company Zoox had announced D.C. was to be its next market.&lt;/p&gt;
    &lt;p&gt;"It strikes me that the failure to do this [disclosure] is concerning – whether out of negligence or worse," says Marcus, the former deputy editorial page editor. "I think telling your readers that there might be a conflict in whatever they're reading is always important. It's a lot more important when it involves whoever the owner is."&lt;/p&gt;
    &lt;p&gt;In explaining his decision on the Harris editorial, which foreshadowed the more sweeping changes in the paper's opinion section, Bezos wrote, "I once wrote that The Post is a 'complexifier' for me. It is, but it turns out I'm also a complexifier for The Post."&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.npr.org/2025/10/28/nx-s1-5587932/washington-post-editorials-omit-a-key-disclosure-bezos-financial-ties"/><published>2025-10-28T14:16:42+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45733329</id><title>The AirPods Pro 3 flight problem</title><updated>2025-10-28T15:40:37.585766+00:00</updated><content>&lt;doc fingerprint="636c8b168a6695da"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;The AirPods Pro 3 Flight Problem&lt;/head&gt;
    &lt;p&gt;With incredible noise cancelling, a range of remarkable hearing health features, terrific sound quality and great battery life, the AirPods Pro have long been my goto pair of headphones from Apple. So when Apple announced the AirPods Pro 3 at their September event, I was ecstatic! Apple touted that the AirPods Pro 3 featured even better noise cancellation, fit, and sound quality over its predecessor, and added additional health features with the addition of heart rate monitoring.&lt;/p&gt;
    &lt;p&gt;Serendipitously, I happened to be boarding a flight the night of their release, and what better way to stress-test the new AirPods Pro 3 than with a transatlantic flight? Air travel is where the AirPods Pro have really shone; their compact size, noise-cancellation, comfort, battery life, and sound quality make them a perfect package for the noisy, cramped cabins of economy class.&lt;/p&gt;
    &lt;p&gt;Prior to the flight, I measured my fit and wore them around the house for an hour; everything seemed great. I will add that these new foam tips do take some getting used to, as they feel noticeably dense, and I’ve seen some bloggers and podcasters say the new fit is less comfortable compared to the Pro 2's softer silicone. Personally, I don’t share this complaint.&lt;/p&gt;
    &lt;p&gt;My trouble came at 39,000 feet when I first noticed a high-pitched whine coming from my left AirPod. The issue was that the AirPod’s ear seal kept loosening, leading to a noise-cancellation feedback loop and a painfully loud piercing screech from the AirPod. Attempts to readjust worsened the feedback, especially if I accidentally covered the external microphone with my finger. This happened multiple times, making the experience so unpleasant that I eventually switched to my spare EarPods for the remainder of the flight. While disappointed, I wasn’t ready to condemn the headphones yet; perhaps the medium seal worked fine on terra firma, but on flights, I might need a different size for a better seal.&lt;/p&gt;
    &lt;p&gt;After landing, I tested the tips and switched from a Medium to Extra Small (Apple offers XXS, XS, S, M, or L tips for AirPods Pro 3). Both XS and M tips sealed well and were comfortable for long wear. For weeks, I couldn’t reproduce the whistling feedback, and I forgot about it until my next flight earlier this week.&lt;/p&gt;
    &lt;p&gt;Once again, it was only a few minutes after takeoff that the painful screech returned. Careful adjustments or yawning would fix the issue, but only for a couple of minutes at most. I figured that the new foam tips were trapping more heat, reducing airflow and ventilation, and less flexible, and that somehow all that was playing a role in loosening the seal. And when paired with the aircraft’s loud, steady hum, a feedback loop was created. But day to day, this is a non-issue because I never encounter the same types of pressure changes and noises that would reproduce this issue.&lt;/p&gt;
    &lt;p&gt;While researching this, I did happen upon a thread on Reddit which confirmed that others have reported a similar issue, principally with the left AirPod on flights, just like I tried to describe above:&lt;/p&gt;
    &lt;quote&gt;
      &lt;p&gt;“I also heard the whistling noise recently in the plane. The issue would go away for me as soon as I yawn, but after a while it would start making the whistling noise again. I noticed during ascent and descent it would get worse.”&lt;/p&gt;
      &lt;p&gt;“I have this issue too. Completely fine in normal life but awful on a plane.”&lt;/p&gt;
      &lt;p&gt;“Also having this issue on flight. It’s like a vibrating or swooshing noise. Definitely the ANC as it reduces when you turn on adaptive and none with transparency.”&lt;/p&gt;
    &lt;/quote&gt;
    &lt;p&gt;So what’s going on? No idea. Apple hasn’t announced any recall or acknowledged the issue to date, and the few Reddit reports show that support calls that led to replacements returned pods that reproduced the issue. So either there are a few of us with stupidity-shaped left ears, the AirPods are glitching in some way, or something is happening on flights that the AirPods Pro 3 can't handle.&lt;/p&gt;
    &lt;head rend="h2"&gt;In Sum&lt;/head&gt;
    &lt;p&gt;I love the AirPods Pro 3, but with a denser fit that risks making them uncomfortable for some users and now this painful flight feedback issue, the AirPods Pro 3 aren’t as easy to recommend as the previous AirPods Pro 2. I can’t speak to how widespread this issue is, but my buying advice would be that if you are hoping to buy them, to do so close to your next flight and within the return window, so you can test them in the air and ensure you don’t run into the same painful feedback problem. Hopefully this is just a quirk with my ears or fit, because it’s hard to excuse a product that becomes not only unusable but downright painful to wear on a flight.&lt;/p&gt;
    &lt;p&gt;This entry was written at 33,000 feet while flying over the Canadian Rockies.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://basicappleguy.com/basicappleblog/the-airpods-pro-3-flight-problem"/><published>2025-10-28T14:27:37+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45733412</id><title>A brief history of random numbers</title><updated>2025-10-28T15:40:37.366375+00:00</updated><content/><link href="https://crates.io/crates/oorandom#a-brief-history-of-random-numbers"/><published>2025-10-28T14:34:18+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45733430</id><title>Hi, It's Me, Wikipedia, and I Am Ready for Your Apology</title><updated>2025-10-28T15:40:36.944842+00:00</updated><content>&lt;doc fingerprint="766d985c9ad3e13e"&gt;
  &lt;main&gt;
    &lt;p&gt;“Wikipedia, the constantly changing knowledge base created by a global free-for-all of anonymous users, now stands as the leading force for the dumbing down of world knowledge.” – From the book Wikipedia: The Dumbing Down of World Knowledge by Edwin Black 2010&lt;/p&gt;
    &lt;p&gt;Well, well, well. Look who it is.&lt;/p&gt;
    &lt;p&gt;The global academic, scientific, and pro-fact community.&lt;/p&gt;
    &lt;p&gt;I suppose you’ve come to say you’re sorry? I hope so, given your years of sneering and hand-wringing about how I was ruining knowledge. Meanwhile, you turned your information environment into a hypercapitalist post-truth digital snuff film.&lt;/p&gt;
    &lt;p&gt;A lot can change in a couple of decades, huh? Used to be, it was hard to keep up with all you nerds decrying me as the downfall of truth and human inquiry [1] [2] [3]… [44].&lt;/p&gt;
    &lt;p&gt;Well, great job, geniuses. Since you’re so horny for facts, here’s a fact: The White House just appointed a new deputy press secretary, and it’s a three-armed AI Joseph McCarthy doing the Cha Cha Slide [pictured, right].&lt;/p&gt;
    &lt;p&gt;Are you also going to apologize to that student you expelled? (See also: Ridgeview University Wikipedia Controversy.) In 2004, you saw some college guy using me and thought, “What a lazy cheater.”&lt;/p&gt;
    &lt;p&gt;Now you’d think, “At least he’s not asking Gemini.”&lt;/p&gt;
    &lt;p&gt;In a few years, you’ll say, “Wow, look, a human being who can read.”&lt;/p&gt;
    &lt;p&gt;Listen, in some ways, I get it. When I came on the scene in 2001, I probably seemed pretty unsavory compared to the competitors. But that was when academic research happened in libraries and George W. Bush was considered the stupidest president.&lt;/p&gt;
    &lt;p&gt;Tell me, how have you guardians of facts been doing recently? (See also: Techno-Feudalist Infocide.)&lt;/p&gt;
    &lt;p&gt;Maybe twenty years ago, the alternative to my 100,000 crowd-sourced editors was a PhD expert, or Edward R. Murrow [citation needed]. But today, I’m not looking so bad, huh? Absolute best case, the LLM-generated legal advice you get is merely plagiarizing, probably from me. But more likely, it’s a mish-mash of Reddit posts filtered through an algorithm coded by a Belarusian teenager on the run from Interpol. (See also:Illya “CyberGhost” Cieraškovič, Controversies.)&lt;/p&gt;
    &lt;p&gt;So, yeah, peer review deez nutz.&lt;/p&gt;
    &lt;p&gt;How are my competitors doing, the ones you all insisted students use instead of me? That’s right, they were supposed to go to the American Journal of Social Sciences, Powered by OpenAI. Or museums, like the Smithsonian’s Charlie Kirk Shrine to American Greatness. I guess they can still count on credible journalism, once they get past the paywall for Palantir Presents: The Washington Post, so they read the Pulitzer-Bezos Prize–winning work of coeditors-in-chief Bari Weiss and Grok.&lt;/p&gt;
    &lt;p&gt;I bet now you’d kill for a senior thesis based on my free, multilingual, publicly cited, text-based articles, motherfucker [inappropriate or vulgar language].&lt;/p&gt;
    &lt;p&gt;Honestly, it’s been fun to be proven right. Sometimes I still sit back and read the old hits, the concerns that I would “devalue expertise” or “undermine objectivity.” Oooooh, heaven forbid! (See also: Sarcasm.)&lt;/p&gt;
    &lt;p&gt;I’ll admit, it gives me a certain sadistic pleasure to watch you all completely lose hold of basic reality. I can feel a warm, quivering tingle deep in my footnotes.&lt;/p&gt;
    &lt;p&gt;And through it all, my army of well-intentioned dorks keeps documenting every bit. I’m not sure who for, at this point. I guess for the future benefit of our Minister of Patriotic Factualization, GodGPT. HahahaHAhaHAhaHAhaHAHAHA.&lt;/p&gt;
    &lt;p&gt;Well, it’s been fun, but I should probably get back to work, checking in on the updates to my most active pages (Transnational Kleptocracy and Vaccine Denial in the United States, Part 16, April 2025–Present).&lt;/p&gt;
    &lt;p&gt;What’s that? You want me around now? Well, maybe if you ask nicely. And make it worth my while.&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.mcsweeneys.net/articles/hi-its-me-wikipedia-and-i-am-ready-for-your-apology"/><published>2025-10-28T14:35:43+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45733525</id><title>Text2SQL is dead – long live text2SQL</title><updated>2025-10-28T15:40:36.589503+00:00</updated><content>&lt;doc fingerprint="e5080c9f01aa96d6"&gt;
  &lt;main&gt;
    &lt;head rend="h1"&gt;Text-to-SQL is Dead – Long Live Text-to-SQL&lt;/head&gt;
    &lt;p&gt;For the third time, within less than a year, we are discussing Text-to-SQL. First, it was just a test with a publicly available service on the HuggingFace website (https://www.huggingface.co). This raised our interest in exploring the possibilities further. In our second attempt, we implemented a one-shot transformer that converts natural language questions into SQL statements, running this process entirely on premises. However, major parts of the rendering are performed by a publicly available LLM service. Our final attempt was to bring the entire process in-house to our own premises and to explore ways to circumvent obstacles – a surprisingly easy process.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Problem&lt;/head&gt;
    &lt;p&gt;Using a Large Language Model (LLM) to transform a natural language question into a database-compliant SQL statement is not entirely new; it appeared when LLMs were trained for coding tasks. The results of the transformations are pretty impressive, and they open the world of data analysis to a new user group. While Data Scientists or Data Analysts usually know the SQL query language very well, for the occasional user, SQL can become a major hurdle, especially when mastering SQL is not included in their job profile or is not their prime concern. Saying this, Text-to-SQL can expand the audience to a much larger scale, enabling many more users to query the Exasol analytics engine and retrieve valuable information quickly and easily. It is to be seen complementary to existing BI tools and addresses a different user group.&lt;/p&gt;
    &lt;p&gt;So, why is Text-to-SQL dead then?&lt;/p&gt;
    &lt;p&gt;Typical AI Desktop applications, such as Anthropic’s Claude, utilize their own LLM within their infrastructure. In other words, you lose control over your data. Transforming a natural language question into SQL requires at least metadata information, which already contains valuable information that may be confidential. If you let the LLM execute the generated SQL on your database by a tool of a so-called MCP server, and render it afterward for a visual representation, even real data will leave your premises. Certain companies or industry segments may be fine with this fact, while others cannot tolerate it, either due to their own interests or regulatory requirements. This leads to our statement „Text-to-SQL“ is dead, obviously not for everyone, but for a group of substantial size.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Solution&lt;/head&gt;
    &lt;p&gt;How can we revive Text-to-SQL? First, we need to determine what is truly required for a pure on-premises solution:&lt;/p&gt;
    &lt;list rend="ul"&gt;
      &lt;item&gt;An LLM server that is capable of serving one or more Large Language Models and is able to serve the company’s needs with regard to interaction or usability; GPU acceleration is a big plus if not mandatory.&lt;/item&gt;
      &lt;item&gt;A Text-to-SQL Processor&lt;/item&gt;
      &lt;item&gt;An MCP Server that acts as the gateway between the LLM and the database.&lt;/item&gt;
      &lt;item&gt;An AI Desktop application that allows for operating against local LLM servers.&lt;/item&gt;
    &lt;/list&gt;
    &lt;p&gt;If we can fulfill these requirements, we can clearly state „Long Live Text-to-SQL“.&lt;/p&gt;
    &lt;head rend="h2"&gt;Governed SQL&lt;/head&gt;
    &lt;p&gt;Also, when describing the entire process and referring to Text-to-SQL, we have a process in mind, which we call „Governed SQL“. We entirely control the translation into SQL, disallow any non-READ-ONLY queries, learn from previous similar questions, and can re-formulate a question if needed to ensure the quality of the translation process. While controlling the entire process, from the natural language question to the rendered result, we can ensure the principles of integrity, security, and safety of your data. Consequently, we will use both terms synonymously.&lt;/p&gt;
    &lt;head rend="h2"&gt;The LLM Server&lt;/head&gt;
    &lt;p&gt;For the first requirement, we utilize Ollama (https://ollama.com/). It supports GPUs from NVIDIA, AMD, or Apple’s Metal framework. You interact with Ollama via OpenAI’s API in the same way as you would interact with, for example, ChatGPT. As an alternative to Ollama, you can use LM-Studio (https://lmstudio.ai/). Please refer to Ollama’s or LM-Studio’s websites for instructions on setting up the LLM servers on your infrastructure.&lt;/p&gt;
    &lt;head rend="h2"&gt;The MCP Server&lt;/head&gt;
    &lt;p&gt;The missing link between an LLM and, in our case, the Exasol database is the so-called MCP Server, which plays a vital role. Here, MCP stands for „Model Context Protocol“ and allows interaction with the database. Other MCP Servers can interact with Mailers, Chat applications, or other kinds of applications. This Protocol has evolved to the de facto standard for integrating LLMs into an IT environment and has a similar importance as the well-known REST API.&lt;/p&gt;
    &lt;p&gt;Exasol has recently published an MCP Server on its GitHub repository (https://github.com/exasol/mcp-server), and our colleague Madeleine Corneli has published a very interesting blog article about it (https://www.exasol.com/blog/integrating-exasol-mcp/). However, the nature of this server primarily addresses technical users. It can retrieve metadata from the database and execute Read-Only SQL statements. The Text-to-SQL option is not included in this version. However, a version of the MCP server is available that includes Text-to-SQL functionality (https://github.com/exasol/exasol-labs-text2sql-mcp-server). It augments the official Exasol MCP Server with the Text-to-SQL functionality, which is discussed below.&lt;/p&gt;
    &lt;head rend="h2"&gt;The Text-to-SQL Processor&lt;/head&gt;
    &lt;p&gt;We now reach a point where we must issue an explicit warning to all interested users. Large Language Models can make mistakes, and eventually, they will. Depending on the level of training, they may misinterpret the semantics of the natural language question and, consequently, transform it into an incorrect SQL statement, which can result in incorrect or misleading results. It is the sole responsibility of the user to verify the result for validity.&lt;/p&gt;
    &lt;p&gt;The above statement varies for different LLMs, and there is no general rule possible when or how an LLM produces faulty or misleading results. Besides the selected LLMs, the database design is a crucial contributor to the overall quality of the transformation process. Well-thought-out and descriptive column names or column comments provide significant support for the transformation process. The next step would be to utilize a semantic layer, such as the Exasol Semantic Layer, formerly known as Exalerator, where we previously reached the best results in translating human questions into SQL statements. For this work, we intentionally excluded the Exasol Semantic Layer, as we wanted to assess how well the transformation process performs on a raw database design.&lt;/p&gt;
    &lt;p&gt;For a Text-to-SQL process, we have to implement various steps on our own, which come for free with the big LLM Services. First, we check whether a natural language question can be successfully converted into an SQL statement for a given database schema. Depending on the LLM you want to use for the translation process, you may find yourself in a position where you need a second LLM for rendering your results. The MCP server supports separate LLMs for translating to SQL and result rendering. If a SQL statement is created, we need to check if the type of SQL is allowed for execution. Currently, we want to allow only read-only statements. Then, the SQL is executed against the database and checked for validity; the database can execute the SQL without any errors. If the SQL statement is invalid, we want to retry up to three times with a corrected version of the natural language question. Finally, we need to render either informational messages or the result set.&lt;/p&gt;
    &lt;p&gt;We implemented the transformation process based on the Langgraph framework (https://www.langchain.com/langgraph). The communication to the LLM Servers utilizes the OpenAI API, implemented with the langchain framework https://www.langchain.com). In addition to the functional blocks outlined above, we read the database schema and add it to the system prompt; this is a crucial step, as the LLM requires a solid understanding of the underlying database schema. The better the quality of the included metadata, the better the transformation result. Successfully executed SQL statements are stored in a Vector database, in our case ChromaDB, along with the natural language question and some other metadata. With every new natural language question, a similarity search is performed. Similar questions and their respective SQL statements will be added to the prompt as hints to the LLM.&lt;/p&gt;
    &lt;p&gt;The entire code for the Exasol MCP Server, including the Text-to-SQL option, is available on GitHub for free (see above).&lt;/p&gt;
    &lt;p&gt;Now, we have two important pieces of our solution in place: an on-premises LLM server with locally hosted LLMs, and we have an MCP Server with the capability of generating SQL statements from natural language. The last part is an AI desktop application that fully supports our local strategy. At the beginning of our search, we encountered some difficulties. Antrophic’s Claude AI Desktop runs perfectly with the MCP server, but when it comes to displaying the rendered result set, we were unsure if the data is not being sent to the Cloud as well. And sometimes when the transformation process encountered problems, Claude jumped in and helped to get the process running. Let’s be honest, this is a nice move, and for many use cases, a desired handling of problems. However, when you require the full confidentiality of your data, we recommend a different solution. And Claude can not be configured to use local LLMs, which, by the way, is understandable.&lt;/p&gt;
    &lt;head rend="h2"&gt;The AI Desktop application&lt;/head&gt;
    &lt;p&gt;Finally, we came across Open-WebUI (https://github.com/open-webui/open-webui), a web-based AI application that can interact with locally hosted LLMs via OpenAI’s API, supporting, in our case, both Ollama and LM-Studio. While it cannot address an MCP Server directly, the MCP Server can be used via a proxy server, which converts so-called OpenAPI calls from Open-WebUI to MCP calls. The proxy server is a small Python application that can be installed with a Python package manager. You can find the details at the GitHub page (https://github.com/open-webui/mcpo).&lt;/p&gt;
    &lt;p&gt;Below you see a simple test query for the RETAIL database schema, one of Exasol’s exemplary datasets. It requires multiple „JOIN“operations over three tables.&lt;/p&gt;
    &lt;code&gt;Show the top 3 articles based on units_sold for the area of Bayern and Hessen, show area, article name, product group, units sold, and revenue; use the RETAIL database schema.&lt;/code&gt;
    &lt;p&gt;The table is the result of the rendering process during the transformation. We instructed the LLM to create a table in Markdown syntax from the result set, thereby controlling the output’s form. Interestingly, with Open-WebUI, we received some commentary about the result set, driven by the same LLM we deployed locally. If you want to get a result without the additional commentary, you need to instruct the LLM accordingly, as shown below:&lt;/p&gt;
    &lt;p&gt;We simply added&lt;/p&gt;
    &lt;code&gt;Do not comment &lt;/code&gt;
    &lt;p&gt;to the end of our natural language question to instruct the LLM not to add additional comments.&lt;/p&gt;
    &lt;p&gt;For our tests, the Qwen3-coder-30B LLM yields reasonably good results for both transforming natural language into SQL and rendering the result set into a table. However, you can configure different LLMs for each process step.&lt;/p&gt;
    &lt;p&gt;Below are a few examples of how a natural language question was translated into an SQL statement. For the first test, we asked a very simple question:&lt;/p&gt;
    &lt;code&gt;Show me the number of transactions in the RETAIL database schema?&lt;/code&gt;
    &lt;p&gt;with the result SQL statement&lt;/p&gt;
    &lt;code&gt;SELECT 
   		COUNT(*) AS TRANSACTION_COUNT 
	FROM 
   		RETAIL.SALES_POSITIONS&lt;/code&gt;
    &lt;p&gt;For the next query, we examined the LLM’s ability to handle date extractions, as instructed in the system prompt. Also, several table joins are required for the correct result, and we can see that a correct GROUP BY clause is created&lt;/p&gt;
    &lt;code&gt;SELECT 
   		a.DESCRIPTION AS PRODUCT_DESCRIPTION, 
   		SUM(sp.AMOUNT) AS UNITS_SOLD, 
   		SUM(sp.PRICE) AS REVENUE 

	FROM 
   		RETAIL.SALES s
		JOIN RETAIL.SALES_POSITIONS sp ON s.SALES_ID = sp.SALES_ID 
            JOIN RETAIL.ARTICLE a ON sp.ARTICLE_ID = a.ARTICLE_ID 
            JOIN RETAIL.MARKETS m ON s.MARKET_ID = m.MARKET_ID 

	WHERE 
   		m.AREA = 'Hessen' AND 
   		YEAR(s.SALES_DATE) = 2023 AND 
   		to_char(s.SALES_DATE, 'uW') = '22' 

	GROUP BY 
   		a.DESCRIPTION 

	ORDER BY 
   		REVENUE DESC 

	LIMIT 3&lt;/code&gt;
    &lt;p&gt;And finally, we checked with another database schema to see if our system prompt works across different database schemas by asking:&lt;/p&gt;
    &lt;code&gt;Show the top 5 routes with the most delayed flights between 		
	departure city and destination city, include accrued minutes of 
	delay in the list; use the FLIGHTS database schema&lt;/code&gt;
    &lt;code&gt;SELECT 
    		F.ORIGIN_CITY_NAME AS ORIGIN_CITY_NAME, 
    		F.DEST_CITY_NAME   AS DEST_CITY_NAME, 
    		COUNT(F.DEP_DELAY) AS DELAY_COUNT, 
    		SUM(F.DEP_DELAY)   AS TOTAL_DELAY_MINUTES 

	FROM 
    		FLIGHTS.FLIGHTS F 

	WHERE 
    		F.DEP_DELAY &amp;gt; 0 

	GROUP BY 
    		F.ORIGIN_CITY_NAME, 
    		F.DEST_CITY_NAME 

	ORDER BY 
    		DELAY_COUNT DESC 

	LIMIT 5&lt;/code&gt;
    &lt;p&gt;resulting in the following table:&lt;/p&gt;
    &lt;p&gt;Of course, we cannot make any general statements based on the translation of three questions into SQL statements. We have made numerous translations, including presentations with prospects, customers, and partners. The hit rate of good SQL Statements is extremely high, close enough, but not 100%. The reasons are manifold, for example, the selection of the LLM or a non-ideal database design. If necessary, you can attempt to further enhance the quality of the translation process by adjusting the system prompt. It is a raw text file outside of the Python code. Alternatively, when the AI Desktop application allows, you can create workspaces for each use case and its underlying database schema, and augment the system prompt here with additional instructions. The user is no longer required to specify the database schema or other information that the translation process might need.&lt;/p&gt;
    &lt;p&gt;During a preparation meeting for a public market presentation, there was interest in natural language questions in German, with results presented in the same language. The model we used was able to understand the question, transform it correctly into SQL, and answer in the question’s language. We have asked again the FLIGHTS dataset to show the top five routes starting in Los Angeles with the most delayed flights:&lt;/p&gt;
    &lt;code&gt;Zeige mir die 5 Strecken mit den meisten verspäteten Flügen, die in 
	Los Angeles anfangen. Antworte in deutscher Sprache.&lt;/code&gt;
    &lt;p&gt;This resulted in the following SQL Statement:&lt;/p&gt;
    &lt;code&gt;SELECT 
		ORIGIN, 
		DEST, COUNT(*) AS DELAYED_FLIGHTS 
	FROM 
		FLIGHTS.FLIGHTS 
	WHERE 
		ORIGIN = 'LAX' AND DEP_DELAY &amp;gt; 0 
	GROUP BY 
		ORIGIN, DEST 
	ORDER BY 
		DELAYED_FLIGHTS DESC 
	LIMIT 5&lt;/code&gt;
    &lt;p&gt;and returned the following table and commentary:&lt;/p&gt;
    &lt;p&gt;There is one wrong word in the commentary – planes fly and do not drive. However, the meaning is still correct, and this can be considered a minor glitch.&lt;/p&gt;
    &lt;p&gt;Finally, the response time, from sending the question to receiving the result, can take a moment. First, the AI Desktop must identify the need to include an external tool. Then, the LLM, in conjunction with the translation process, must create the SQL and render the result. This is a computationally intensive task that benefits significantly from the use of GPUs. Do not expect sub-second response times, compared to a BI tool with pre-defined SQL statements, e.g., when using Dashboards. Without any exception, the queries created during our tests returned a result within a sub-second response time. In the event of a missing search index for a particular SQL statement, returning a result set took a bit longer, as a new index had to be created on the fly without any user interaction—a testament to flexibility at its best. The database schema sizes we used for tests range from a few million records to several billion records.&lt;/p&gt;
    &lt;head rend="h2"&gt;Auditing&lt;/head&gt;
    &lt;p&gt;You have two very different options for auditing your questions and the resulting SQL statements. The first option is to search in the log file you specified in the „.env“ file with the logging mode set to „DEBUG“. The second and preferred option would be to use the AI Desktop application and use the „SQL History“ tool of the MCP-Server. As we store every single successful combination of a question and its corresponding SQL statement in a vector database, we can easily search for a list or search for SQL statements. Here you can list a number of SQL queries, or search for text phrases in your questions.&lt;/p&gt;
    &lt;p&gt;For the following question:&lt;/p&gt;
    &lt;code&gt;Show me all SQL statements where I use the term “busiest” &lt;/code&gt;
    &lt;p&gt;we got back the following list:&lt;/p&gt;
    &lt;p&gt;The tool expects the search text (defaulting to „*“), the name of the database schema, and the number of SQL statements to return. In our case, we limited it to 10 SQL statements by default. By using an individual workspace for the FLIGHT DELAYS use case, we have already preset the database schema.&lt;/p&gt;
    &lt;head rend="h2"&gt;Conclusion&lt;/head&gt;
    &lt;p&gt;Our statement, „Text-to-SQL is dead” is a valid statement for certain user groups where confidentiality is a strict requirement. No data may leave the premises, and we have shown how to circumvent the situation. However, the quality of the translation into SQL statements depends not only on the transformation process, but also on the design of the desired database schema(s) used for queries/questions. The better the design, the better the quality of Text-to-SQL. You have to do your homework before thinking about Text-to-SQL, or you have a high chance of failing. To further enhance the quality of the translation process, consider utilizing a Semantic Layer.&lt;/p&gt;
    &lt;p&gt;In our interest again, you can achieve quite remarkable results if you do it right. Nevertheless, you will encounter SQL statements that do not correspond to the question asked. Cross-check the results and be cautious.&lt;/p&gt;
    &lt;p&gt;Interestingly, there is a second noteworthy point. With the Text-to-SQL option, you are losing control of the queries. While queries for Reports or Dashboards are static or semi-static, queries from natural language are highly dynamic. There is no guarantee that an appropriate search index exists for a newly created SQL statement. Exasol and its Automatic Index Management feature mitigate this problem out of the box. In other words, automatic index management is a must-have requirement for every Text-to-SQL transformation, particularly in terms of usability and user acceptance. For us, it is safe to state that Exasol and Text-to-SQL are a natural fit -&amp;gt; „Long live Text-to-SQL“ as „Governed SQL“&lt;/p&gt;
    &lt;p&gt;Happy Exasoling!&lt;/p&gt;
  &lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://www.exasol.com/blog/text-to-sql-governance/"/><published>2025-10-28T14:43:19+00:00</published></entry><entry><id>https://news.ycombinator.com/item?id=45733707</id><title>EuroLLM: LLM made in Europe built to support all 24 official EU languages</title><updated>2025-10-28T15:40:35.976969+00:00</updated><content>&lt;doc fingerprint="edda909843bbcd9e"&gt;
  &lt;main&gt;&lt;head rend="h1"&gt;Meet EuroLLM&lt;/head&gt;&lt;p&gt; Large language model&lt;lb/&gt; made in Europe&lt;lb/&gt; built to support all&lt;lb/&gt; official 24 EU languages &lt;/p&gt;&lt;head rend="h2"&gt;Featured In&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;&lt;head rend="h3"&gt;Multimodal&lt;/head&gt;&lt;p&gt;Soon we will be adding vision and voice to our models so that they can interpret and understand images and speech.&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;head rend="h3"&gt;Open Source&lt;/head&gt;&lt;p&gt;Freely used by researchers, organisations and citizens of Europe.&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;head rend="h3"&gt;High Performance&lt;/head&gt;&lt;p&gt;Great on language related tasks, including question answering, summarisation, and translation.&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;head rend="h3"&gt;Multilingual&lt;/head&gt;&lt;p&gt;Models pretrained and finetuned on text from all languages.&lt;/p&gt;&lt;/item&gt;&lt;/list&gt;&lt;head rend="h2"&gt;EuroLLM-9B&lt;/head&gt;&lt;p&gt;Our current flagship model. A 9B parameter model trained on over 4 trillion tokens of multilingual data across 35 different languages, including all official EU languages. We’ve made EuroLLM 9B Base available for fine-tuning on any task. As a demonstration, we’ve also provided EuroLLM 9B Instruct, a model fine-tuned for instruction following and chat capabilities.&lt;/p&gt;TRY THE MODEL AT HUGGING FACE &amp;gt;&lt;head rend="h2"&gt;Euro LLM-1.7 B&lt;/head&gt;&lt;p&gt;A 1.7B parameter model trained on similar data to EuroLLM-9B, that is ideal to for use in edge devices.&lt;/p&gt;TRY THE MODEL AT HUGGING FACE &amp;gt;&lt;head rend="h2"&gt;Our Mission&lt;/head&gt;&lt;p&gt;Sharing a common vision, our team is committed to advancing multilingual AI technologies to empower Europe’s digital future and strengthen the EU’s commitment to AI sovereignty. The team’s goal is for EuroLLM to become a flywheel for innovation — offering anyone the opportunity to use this EU homegrown LLM and build upon it. The project is living proof that amazing things can happen when Europe comes together to push the boundaries of innovation.&lt;/p&gt;&lt;head rend="h2"&gt;The Team&lt;/head&gt;&lt;head rend="h2"&gt;Key People&lt;/head&gt;&lt;list rend="ul"&gt;&lt;item&gt;&lt;head rend="h3"&gt;André Martins&lt;/head&gt;&lt;p&gt;VP of AI Research, Unbabel and Associate Professor, Instituto Superior Técnico, University of Lisbon&lt;/p&gt;&lt;p&gt;André Martins is an expert in machine learning and natural language processing. His research has been funded twice by the European Research Council. He is a Fellow of the ELLIS Society and a board member of the European Association for Machine Translation. He is a co-founder of the Lisbon Machine Learning School (LxMLS).&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;head rend="h3"&gt;Alexandra Birch&lt;/head&gt;&lt;p&gt;Co-founder and Chief Scientist, Aveni.ai&lt;/p&gt;&lt;p&gt;Associate Professor in Natural Language Processing at the University of Edinburgh. Her research has resulted in over 100 peer reviewed publications, focusing on translation and multilingual NLP and covering topics such as ethics, explainability and efficiency.&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;head rend="h3"&gt;Nuno Guerreiro&lt;/head&gt;&lt;p&gt;Senior Research Scientist, Unbabel&lt;/p&gt;&lt;p&gt;Nuno Guerreiro focuses on machine translation evaluation, error detection, and LLM development. He is a lead developer for Unbabel’s xCOMET and Tower models and contributes to projects like CroissantLLM and EuroLLM.&lt;/p&gt;&lt;/item&gt;&lt;item&gt;&lt;head rend="h3"&gt;Pierre Colombo&lt;/head&gt;&lt;p&gt;Associate Professor, Université Paris-Saclay&lt;/p&gt;&lt;p&gt;Pierre Colombo works as Chief Science Officer at Equall.AI, a legal technology startup. His work focuses on AI safety and LLM applications, with publications in ACL, EMNLP, NeurIPS, and ICML, and he received the AAAI 2022 Best Student Paper Award.&lt;/p&gt;&lt;/item&gt;&lt;/list&gt;&lt;head rend="h2"&gt;About EuroLLM&lt;/head&gt;&lt;p&gt;The EuroLLM project includes Unbabel, Instituto Superior Técnico, the University of Edinburgh, Instituto de Telecomunicações, Université Paris-Saclay, Aveni, Sorbonne University, Naver Labs, and the University of Amsterdam. Together they created EuroLLM-9B, a multilingual AI model supporting all 24 official EU languages. Developed with support from Horizon Europe, the European Research Council, and EuroHPC, this open-source LLM aims to enhance Europe’s digital sovereignty and foster AI innovation. Trained on the MareNostrum 5 supercomputer, EuroLLM outperforms similar-sized models. It is fully open source and available via Hugging Face.&lt;/p&gt;&lt;p&gt;We thank EuroHPC for the HPC resources used to support this work through grant EHPC-EXT-2023E01-042, as well as the European Commission through the Horizon Europe RIA project UTTER (contract 101070631).&lt;/p&gt;&lt;/main&gt;
  &lt;comments/&gt;
&lt;/doc&gt;</content><link href="https://eurollm.io/"/><published>2025-10-28T14:58:04+00:00</published></entry></feed>